
/*
	Jeebox internals
*/


struct Random
	linkage
		cpp_part Rnd
	|uint64| Store
	|uint64| State
	
	saveas struct

	function Int (|int64|)
		cpp_part RndInt
		|| s = ++.state
		rz = (.store + s).hash
		.store = rz		
		
	setter Seed (|uint64|) 
		.store = value
		.state = 1
		
	function TimeSeed
		.seed = date()
	
	function Text (|int| n, |codepoint| a, |codepoint| b, |string|)
		|| fs = FastString()
		if a.isascii and b.isascii
			fs.size = n
		for i in n
			fs.AppendUTF8(self[a,b])
		return fs
	
	
	function Texts (|int| array_len, |int| item_len, |[string]|)
		for array_len
			rz <~ .text(item_len, 'a', 'z')
	
	
	function Data (|int| n, |string|)
		|| m = n|int64|.alignUp(8)
		|| s = string(m)
			|| addr = s.addr|&int64|
			for i in m>>3
				addr[i] = .int
			return s[0,n]
	
	function Int (|f64| n, |int64|) 
		return .Double * n

	function Double (|f64|)
		rz = .int|uint64|
		rz /= 18446744073709551616.0 

	function Float (|float|) 
		return .double
	
	function Float (|float| From, |float| To, |float|) 
		cpp_part FloatRange
		return (.double * (To - From)) + From
	
	function Float (|float| To, |float|) 
		cpp_part FloatScale
		return .double * To

	function Float (|float| From, |float| To, |float| step, |float|)
		cpp_part FloatStep
		if !step
			return self[from, to]
		rz = self[from, to+step]
		rz -= rz modf step
		
	function Float (|float| From, |float| To, |float|step, |float| Pow, |float|) 
		cpp_part FloatPow
		rz = self[from, to, step]
		rz = rz.rangeconvert(from, to, 1, 0)
		rz = rz pow pow
		rz = rz.rangeconvert(1, 0, from, to)
	
	syntax access (|float| To, |float|) 
		cpp_part AccessScale
		return .float(to)
		
	syntax access (|float| From, |float| To, |float|) 
		cpp_part AccessRange
		return .float(from, to)

	syntax access (|float| From, |float| To, |float| step, |float|)
		cpp_part AccessStep
		return .float(From, to, step)

	syntax access (|float| From, |float| To, |float|step, |float| Pow, |float|) 
		cpp_part AccessPow
		return .float(From,to,step, pow)

	syntax access (|f64|)
		return .double
		

	function Temporal (|Memory| mem)
		|| p = mem.ptr|&uint64|
		|| after = (mem.ptr + mem.ByteCapacity - 7)|&uint64|
		while p < after
			*p++ = .int
		mem.Length = mem.Capacity
	
	function Init
		if !.store
			.TimeSeed
	
		
	module  // module random
		|Random| Shared
		.shared.TimeSeed

		macro SyntaxAccess
			random.shared.float(*_)



function ivec2.syntaxcall (|int| n, |string|)
	return random.shared.Text(n, .x, .y)

function float.syntaxcall (|float|)
	return random.shared.double * self

function int.syntaxcall (|int|)
	return random.shared.double * self

function int.Rand (|int|)
	disabled "use 'num()'"


function uint64.Now (|uint64|)
	return date.hash mod self

function int.Now (|uint64|)
	return self|uint64|.now

	
function int64.randomvec2 (|vec2|)
	|| M = 0xFFFFffff
	|| S = 1.0 / M|float|
	|| H = .hash
	return ( (H >> 32)|float|,   (H & M)|float| ) * S

