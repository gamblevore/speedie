
/*
	Jeebox internals
*/


struct Random
	linkage
		cpp_part Rnd
	|uint64| Store
	|uint64| State
	
	saveas struct

	function Int (|int64| b, |int64|)
		cpp_part IntTo
		return .int(0, b)
	
	function Int (|int64| a, |int64| b, |int64|)
		cpp_part IntRange
		return (.Float64 * ((b-a)|float64|) + a|float64|)|int64|

	function Int (|int64|)
		cpp_part RndInt
		|| s = ++.state
		rz = (.store + s).hash
		.store = rz
		
	setter Seed (|uint64|) 
		.store = value
		.state = 1
		
	function TimeSeed
		.seed = date.now
	
	function Text (|int| n, |codepoint| a, |codepoint| b, |string|)
		|| fs = FastString()
		if a.isascii and b.isascii
			fs.size = n
		for i in n
			fs.AppendUTF8(self[a|float|, b|float|]|codepoint|)
		return fs
	
	
	function Texts (|int| array_len, |int| item_len, |[string]|)
		for array_len
			rz <~ .text(item_len, 'a', 'z')
	
	
	function Data (|int| n, |string|)
		|| m = n.alignUp(8)
		|| s = string(m)
			|| addr = s.addr|&int64|
			for i in m>>3
				addr[i] = .int
			return s[0,n]
	
	function Float64 (|Float64|) // Double (
		|| i = .int|uint64|
		|uint64[1]| C
		|| F = (&C[0])|&f64|
		c[0] = (i >> 12) ||| 4_607_182_418_800_017_408
		return F[] - 1.0

	function Float (|float|)
		|| i = .int|uint|
		|uint[1]| C
		|| F = (&C[0])|&float|
		c[0] = (i >> 9) ||| 7~bits<<23
		return F[] - 1.0
	
	function Float (|float| From, |float| To, |float|) 
		cpp_part FloatRange
		return (.float * (To - From)) + From
	
	function Float (|float| To, |float|) 
		cpp_part FloatScale
		return .float * To

	function Float (|float| From, |float| To, |float| step, |float|)
		cpp_part FloatStep
		if !step
			return self[from, to]
		rz = self[from, to+step]
		rz -= rz mod step
		
	function Float (|float| From, |float| To, |float|step, |float| Power, |float|) 
		cpp_part FloatPow
		rz = self[from, to, step]
		rz = rz.rangeconvert(from, to, 1.0, 0)
		rz = rz pow power
		rz = rz.rangeconvert(1.0, 0, from, to)
	
	function Vec3 (|vec3|)
		return (.float, .float, .float)
		
	function Vec2 (|vec2|)
		return (.float, .float)
		
	function Vec4 (|vec4|)
		return (.float, .float, .float, .float)
		
	syntax access (|ivec2| Lim, |ivec2|)	
		cpp_part AccessIVec2
		return ivec2(.int(lim.x), .int(lim.y))
		
	syntax access (|int| To, |int|) 
		cpp_part AccessTo
		return .int(0, to)
		
	syntax access (|float| To, |float|) 
		cpp_part AccessScale
		return .float(to)
		
	syntax access (|float| From, |float| To, |float|) 
		cpp_part AccessRange
		return .float(from, to)

	syntax access (|float| From, |float| To, |float| step, |float|)
		cpp_part AccessStep
		return .float(From, to, step)

	syntax access (|float| From, |float| To, |float|step, |float| Pow, |float|) 
		cpp_part AccessPow
		return .float(From,to,step, pow)

	syntax access (|Float64|)
		return .Float64
		
	function Temporal (|!&byte| Start, |!&byte| After)
		cpp_part TemporalBytes
		require after > Start
		|| N2 = (After-Start)&~7
		|| After2 = Start+N2
		while Start < after2
			Start|&uint64|[] = .int
			Start+=8
		while Start < after
			Start++[] = .int

	function Temporal (|Memory| mem)
		description "seems not temporal... needs upgrade."
		|| P = mem.ptr
		if p?
			.temporal(P, P + mem.ByteCapacity)
			mem.Length = mem.size

	
	function Init
		if !.store
			.TimeSeed
	
	
	module  // module random
		|Random| Shared
		.shared.TimeSeed

		macro SyntaxAccess
			random.shared.float(*_)


// these random funcs need unifying their purpose / names
// do they return the same type of a different?
// access is nicer for different. fits with float, even int! int[1] == bool
// doesnt work with ivecs2 for string, but w can just rename it to text.
function ivec2.Text (|int| n, |string|)
	return random.shared.Text(n, .x, .y)
	
function float.SyntaxAccess (|bool|)
	return random[] < self

function float.SyntaxCall (|float|)		// can this even be accessed anymore? seems no?
	return random.shared.float * self	// 1.0() doesnt work anymore? neither 1.0[]

function float64.SyntaxCall (|float64|)
	return random.shared.float64 * self

function int.SyntaxCall (|int|)
	return (random.shared.Float64 * self|Float64|)|int|

function int.Rand (|int|)
	disabled "use 'num()'"

function byte.SyntaxCall (|byte| to, |byte|) 
	return random.shared.int(self, to) // these random funcs need unifying their purpose / names

function ivec2.SyntaxCall (|ivec2|) // speedrogue uses this
	|| cw = random[0.0, .x|float|, 1.0]
	|| ch = random[0.0, .y|float|, 1.0]
	return (cw, ch).iVec2


function uint64.Now (|uint64|)
	return date.hash mod self

function int.Now (|uint64|)
	return self|uint64|.now

	
function int64.RandomVec2 (|vec2|)
	|| M = 0xFFFFffff
	|| S = 1.0 / M|float|
	|| H = .hash
	return ( (H >> 32)|float|,   (H & M)|float| ) * S

