
target !minilib {

class SpdProcess (Process)
	linkage
		cpp_part Proc
	description "SpdProcess is a process, that happens to be made by Speedie. Speedie processes come with a pico (message-passer), so they can be talked to, if you want.

We also make it easier to send and receive message objects, instead of pure strings.

SpdProcess handles your subprocess dying, or needing resetting.

The DebugName is normally a file-path, but might not be, for example you are in fact running a function in a thread and using that function as a subprocess.

(This is possible if the function is an entire speedie program, complete with 'main', loaded from a library.)
"
	contains SpdProcess
	|jbin|						Writer
	|&pico|						Pico
	|stringzeroterminated|		DebugName
	|?ThreadAsProcess|			SubProcess
	|int| 						DeathLimit
	|int|						DiedCount
	|bool|						AlreadyWarnedDied
	|bool|						WeAreParent
	|date|						DelaySpawnTill

	constructor	(|string| path, |?ThreadAsProcess| fn, |pico| pico, |[string]| params=nil,  |ProcessMode| Mode=ProcessMode.stderrpassthru)
		super.constructor(path, mode) // <-- mode should be passed here
		
		.deathlimit = 12
		.DebugName = path
		.WeAreParent = path != "" or fn != nil
		.args	= params
		.SubProcess = fn
		.writer = FastString()
		.pico = pico

			
	destructor
		pico.destroy(.pico, "destructor")
			
	function CommsOpen (|bool|)
		if self
			// platform.log "y1: ${.pico.status.render}"
			return .pico.status == 0

	helper Alive (|bool|)
		if self != nil
			return (.ChildAlive, .ParentAlive)(.WeAreParent)
	
	helper ParentAlive (|bool|)
		if app.ParentID > 1
			return true

	helper ChildAlive (|bool|)
		.TryStart_
		if .DelaySpawnTill
			return true
		if .SubProcess
			return .CommsOpen
		if .status.isrunning
			return true


	syntax append (|string| str, |bool|)
		cpp_Part SendStr
		return self <~ @sstr.msg(str)


	syntax append (|message| msg, |bool|)
		cpp_part Send 
		opt norefcounts			
		.TryStart_
		|| p = .pico
		if p.status
			msg.RenderJbin(.writer)
			p <~ .writer

 
	function Get (|float| T=0, |message|)
		opt norefcounts
		if self
			.TryStart_
			|| str = .pico.get(T)
				rz = str.parse
	

	function LastSend (|date|)
		|| p = .pico
		return p.config.lastsend
		
	
	function TimeWaitingForReply (|date|)
		|| c = .pico.config
		|| last = c.lastsend
		if c.lastread < last
			return last.ago

	
	helper HandleDied 
		|| Bad = !.Status.crashed
		.DiedCount += Bad
		.Disconnect(.status.name) // removes us from the check-list


	function CanActivate (|bool|)
		if .Diedcount < .Deathlimit
			.alreadywarneddied = false
			return true
		if !.AlreadyWarnedDied
			.AlreadyWarnedDied = true
			error (.path, "Too many disconnections, blocking reconnection.")
	
	
	helper Kill
		disabled "Explain why"

		
	helper Kill (|int| ExitCode, |stringzeroterminated| why)
		super.kill(ExitCode)
		.Disconnect(why)


	syntax expect (|string| err)
		cpp_part Fail
		if .CommsOpen
			printline err
			errorreceiver.NewError(nil, err, .path)
		.Disconnect(err)


	function Disconnect (|stringzeroterminated| Why="")
		opt norefcounts
		// all this can be moved into pico!!! very easy.
		// delayspawntill is just a number!
		.DelaySpawnTill = 0
		.ClosePipes
		if .alive and !why and .CommsOpen
			why = "UnknownReason"
		.pico!.close(Why)


	helper StartProcess (|&pico?| C = nil,  |ExitCode|)
		cpp_Wrapper JB_Sh_StartProcess

	
	function SpawnAsChild (|duration| delay=0, |bool|)
		if !.pico.isok
			require pico.replace(.pico)
		
		if delay > 0
			.DelaySpawnTill = date.now + delay
			return true
		return .Start_


	helper TryStart_
		opt inline
		|| D = .DelaySpawnTill
			if D < date.now
				.start_
	
	
	helper Start_ (|bool|)
		.DelaySpawnTill = 0
		|| err = .StartProcess(.pico)
		return err.successful


	function TimedOut (|date| Durr, |bool|)
		if (.TimeWaitingForReply > durr)
			error (self, "child timed out.")
			return true
	
	
	function IsOpen (|bool|)
		nil checker // shouldn't be necessary
		require .CommsOpen
		.trystart_
		if .DelaySpawnTill
			return true
		if .WeAreParent
			return .subprocess or .status.isrunning
		return app.ParentID > 1
	
	
	function Deactivate (|int| ExitCode)
		|| running = .status.isrunning
			.Kill(ExitCode)			// kill child
		  elseif .CommsOpen			// inconsistant...
			.handledied				// disconnect comms
	
	
	function ActivateChild (|bool|)
		if .isopen
			return true
		.Deactivate(0)
		if .CanActivate
			expect (.path) (self, "Can't re-activate process without a path.")
			return .SpawnAsChild


	iterator
		while .pico.Canget
			|| msg = .get(10.0)
			if !msg
				continue
			yield msg


	module
		|bool|		 CheckedParent
		|SpdProcess| _Parent
		
		function app.Parent (|&pico| comms=nil, |bool| Expect=false, |spdprocess|)
			opt norefcounts
			if spdprocess.CheckedParent
				return spdprocess._parent
			spdprocess.CheckedParent = true

			if pico.HasParentSocket and !comms
				comms = pico.new
			if comms
				if !app.IsThreadedAsLib
					require comms.CompleteExec
				|| p = SpdProcess("", nil, comms)
				SpdProcess._parent = p
				return p

			if expect
				error "Parent lost connection"


		function CheckAllAlive
//			opt norefcounts
//			|| m = Process.First
//			while m
//				|| ch = m
//				m++
//				if !ch.status.IsRunning
//					if ch isa SpdProcess
//						ch.HandleDied
//					  else
//						ch.Remove
		

		helper CreateArgs (|string| path, |[string]!| Args, |&cstring|)
			cpp_wrapper


		function string.Spawn (|[string]| Params=nil, |spdprocess|)
			return SpdProcess.Spawn(self, params)		
		
		
		function Spawn (|string| app_path, |[string]| params=[], |string| DebugName="", |ProcessMode| Mode=ProcessMode.CaptureAll, |duration| Delay=0, |SpdProcess|)
			require app_path.file.mustexist
			|| pico = pico.new(app_path)
				rz = SpdProcess(app_path, nil, pico, params, Mode)
				rz.DebugName = DebugName
				if !rz.SpawnAsChild(delay)
					rz = nil


		function SpawnFork (|ProcessMode| Mode=ProcessMode.CaptureAll, |SpdProcess|)
			|| p = pico.new$
			|| id = p.spawnfork
			if id < 0
				pico.destroy(p, "fork failed")
				return nil

			if id == 0 // we are child
				id = app.parentid
				mode = ProcessMode.PassThru
			rz = spdprocess(app.path, nil, p, nil, mode)
			rz.pid = id

	
	prototype ThreadAsProcess (|&pico| Comms, |int64| Data, |&cstring| args, |bool|)
		function Spawn (|[string]!| R = [], |string| ThreadName,  |SpdProcess|)
			description `This is meant to run a "main-function" from a lib, as if it were a subprocess. Its usually a wrapper around main(). Just needed this to debug speedie from within Perry.`
			|| c_args = SpdProcess.CreateArgs("", r)
			|| pico_fn = pico.new(threadname)
				|| proc = SpdProcess(threadname, self, pico_fn, r)
				if proc.pico.SpawnThread(self|picothreadfn|, 7|&nil|, c_args)
					return proc
			memory.free(c_args)



prototype Thread (|pico| Comms, |int64| Data, |&nil| Argument, |bool|)
	function Spawn (|pico| Comms, |int64| Data, |&nil| Argument,  |int| BuffBits=0, |&pico|)
		description "Just a wrapper around pico.thread" 
		|| name = (&comms.config.name[0])|cstring|
		|| pico_out = pico.new(name.wrap, -1)
			if BuffBits
				pico_out.Config.Bits = BuffBits
			if comms.SpawnThread(self|picothreadfn|, Data|&nil|, Argument|&cstring|)
				return pico_out
			pico_out.Close("")



function app.fork (|PID_Int|)
	cpp_wrapper fork
	description "Calls unix's `fork()`. Does nothing else.

To fork and communicate with speedie apps using messages, use spdprocess.spawnfork()

To fork and talk to PicoMsg-based apps that aren't speedie, use pico.spawnfork()"


prototype SpdDeathActionFn

}

