		
class SpdProcess (Process)
	linkage
		cpp_part Proc
	description "SpdProcess is a process, that happens to be made by Speedie. Speedie processes come with a pico (message-passer), so they can be talked to, if you want.

We also make it easier to send and receive message objects, instead of pure strings.

SpdProcess handles your subprocess dying, or needing resetting.

The DebugName is normally a file-path, but might not be, for example you are in fact running a function in a thread and using that function as a subprocess. (This is possible! If the function is an entire speedie program, complete with 'main', loaded from a library.)
"
	contains SpdProcess
	|jbin|						Writer
	|&pico|						Pico
	|stringzeroterminated|		DebugName
	|?ThreadAsProcess|			SubProcess
	|int| 						DeathLimit
	|int|						DiedCount
	|bool|						AlreadyWarnedDied
	|bool|						WeAreParent
	|ProcessMode|				Mode

	constructor	(|string| path, |?ThreadAsProcess| fn, |pico| pico, |[string]| params=nil,  |ProcessMode| Mode=ProcessMode.AutoPrintErrors)
		super.constructor(path) // <-- mode should be passed here
		
		.deathlimit = 12
		.DebugName = path
		.WeAreParent = path != "" or fn != nil
		.args	= params
		.SubProcess = fn
		.mode = mode
		.output = (faststring(), nil)(.Mode is CaptureStdOut)
		.erroroutput = (faststring(), nil)(.mode is CaptureOrPrintErrors)
		.writer = FastString()
		.pico = pico

			
	destructor
		pico.destroy(.pico, "destructor")
			
	function CommsOpen (|bool|)
		return self and .pico.status == 0

	helper Alive (|bool|)
		if self != nil
			return (.ChildAlive, .ParentAlive)(.WeAreParent)
	
	helper ParentAlive (|bool|)
		if app.ParentID > 1
			return true

	helper ChildAlive (|bool|)
		if .SubProcess
			return .CommsOpen
		if .status.isrunning
			return true


	syntax append (|string| str, |bool|)
		cpp_Part SendStr
		return self <~ @sstr.msg(str)


	syntax append (|message| msg, |bool|)
		cpp_part Send 
		opt norefcounts			
		|| p = .pico
		if p.status
			msg.RenderJbin(.writer)
			p <~ .writer
			.UpdatePipes

 
	function Get (|float| T=0, |message|)
		opt norefcounts
		if self
			.UpdatePipes
			|| str = .pico.get(T)
				rz = str.parse
	

	function LastSend (|date|)
		|| p = .pico
		return p.config.lastsend
		
	
	function TimeWaitingForReply (|date|)
		|| p = .pico
		|| c = p.config
		|| last = c.lastsend
		if c.lastread < last
			return last.ago

	
	helper HandleDied
		|| Bad = !.Status.crashed
		.DiedCount += Bad
		if (.ErrorOutput!=nil) and (.mode is AutoPrintErrors)
			|| s = .ErrorOutput.GetResult
				printline s
		.Disconnect(.status.name) // removes us from the check-list


	function CanActivate (|bool|)
		if .Diedcount < .Deathlimit
			.alreadywarneddied = false
			return true
		if !.AlreadyWarnedDied
			.AlreadyWarnedDied = true
			error (.path, "Too many disconnections, blocking reconnection.")
	
	
	helper Kill
		disabled "Explain why"
		
	helper Kill (|int| ExitCode, |stringzeroterminated| why)
		super.kill(ExitCode)
		.Disconnect(why)

	syntax expect (|string| err)
		cpp_part Fail
		if .CommsOpen
			printline err
			errorreceiver.NewError(nil, err, .path)
		.Disconnect(err)


	function Disconnect (|stringzeroterminated| Why="")
		opt norefcounts
		.UpdatePipes
		.UnRegister
		.ClosePipes
		if .alive and !why and .CommsOpen
			why = "UnknownReason"
			debugger
		.pico!.close(Why)


	helper StartProcess (|string| path, |[string]| Args=nil, |pico| C = nil, |bool| CaptureStdOut, |ExitCode|)
		cpp_Wrapper JB_Sh_StartProcess

	
	function SpawnChild (|bool|)
		if !.pico.isok
			require pico.replace(.pico)

		|| err = .StartProcess(.path, .args, .pico, .output!=nil)
		return err.successful


	function TimedOut (|date| Durr, |bool|)
		if (.TimeWaitingForReply > durr)
			error (self, "child timed out.")
			return true
	
	function IsOpen (|bool|)
		nil checker // shouldn't be necessary
		require .CommsOpen
		if .WeAreParent
			return .subprocess or .status.isrunning
		return app.ParentID > 1
			
	function Deactivate (|int| ExitCode)
		|| running = .status.isrunning
		if .CommsOpen and !running	// inconsistant...
			.handledied				// disconnect comms
		if running
			.Kill(ExitCode)		// kill child
	
	
	function ActivateChild (|bool|)
		if .isopen
			return true

		.Deactivate(0)
		
		if .CanActivate
			expect (.path) (self, "Can't re-activate process without a path.")
			return .SpawnChild


	iterator
		while .pico.Canget
			yield .get(1000.0)


	module
		InitOwner()
		|SpdProcess| Parent = nil
		
		function InitOwner
			target !minilib
				|| p = pico.parent 
					.parent = SpdProcess("", nil, p)

		function CheckAllAlive
			opt norefcounts
			|| m = ProcessOwner.First
			while m
				|| ch = m
				m++
				if !ch.status.IsRunning
					if (ch isa SpdProcess)
						ch.HandleDied
					ch.UnRegister
		

		helper CreateArgs (|string| path, |[string]| Args, |&cstring|)
			cpp_wrapper


		function BackTrace (|&nil| space, |&int| size, |&cstring|) 
			cpp_wrapper JB_App__BackTrace


		function Spawn (|string| app_path, |[string]| params=[], |string| DebugName="", |ProcessMode| Mode=ProcessMode.CaptureAll, |SpdProcess|)
			require app_path.file.mustexist
			|| pico = pico.new(app_path)
				rz = SpdProcess(app_path, nil, pico, params, Mode)
				if !rz.SpawnChild
					rz = nil


		function SpawnFork (|ProcessMode| Mode=ProcessMode.CaptureAll, |SpdProcess|)
			|| p = pico.new$
			|| id = p.spawnfork
			if id < 0
				pico.destroy(p, "fork failed")
				return nil

			if id == 0 // we are child
				id = app.parentid
				mode = 0
			rz = spdprocess(app.path, nil, p, nil, mode)
			rz.pid = id

	
	prototype ThreadAsProcess (|&pico| Comms, |int64| Data, |&cstring| args, |bool|)
		function Spawn (|[string]| R = [], |string| ThreadName,  |SpdProcess|)
			description `This is meant to run a "main-function" from a lib, as if it were a subprocess. Its usually a wrapper around main(). Just needed this to debug speedie from within Perry.`
			|| c_args = SpdProcess.CreateArgs("", r)
			|| pico_fn = pico.new(threadname)
				|| proc = SpdProcess(threadname, self, pico_fn, r)
				if proc.pico.SpawnThread(self|picothreadfn|, 7|&nil|, c_args)
					return proc
			memory.free(c_args)



prototype Thread (|pico| Comms, |int64| Data, |&nil| Argument, |bool|)
	function Spawn (|pico| Comms, |int64| Data, |&nil| Argument,  |int| BuffBits=0, |pico|)
		description "Just a wrapper around pico.thread" 
		|| pico_out = pico.new(comms.config.name.str)
			if BuffBits
				pico_out.Config.Bits = BuffBits
			if comms.SpawnThread(self|picothreadfn|, Data|&nil|, Argument|&cstring|)
				return pico_out
			pico_out.Close("")


datatype ProcessMode (byte)
	flags
		CaptureStdOut
		CaptureOrPrintErrors = [CaptureErrors, AutoPrintErrors]
		CaptureAll = CaptureStdOut ||| AutoPrintErrors

	syntax is (|ProcessMode| M, |bool|)
		return self&M



function app.fork (|PID_Int|)
	cpp_wrapper fork
	description "Calls unix's `fork()`. Does nothing else.

To fork and communicate with speedie apps using messages, use spdprocess.spawnfork()

To fork and talk to PicoMsg-based apps that aren't speedie, use pico.spawnfork()"


prototype SpdDeathActionFn

