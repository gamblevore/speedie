

datatype vec4 
	syntax cast (|bool|)
		cpp_part Bool
		return self != vec4()	
	
	operator ± (|float| i, |vec4|)
		cpp_part Shrink
		return (.x+i, .y+i, .z-i, .w-i)
	
	syntax Equals (|vec4| v, |bool|Aware, |bool|)
		return (.x == v.x) and (.y == v.y) and (.z == v.z) and (.w == v.w) 
	
	function Clamp (|float| max=1.0, |vec4|)
		return (.x.clamp(max), .y.clamp(max), .z.clamp(max), .w.clamp(max))
	
	function Sqrt (|vec4|)
		return (.x.sqrt, .y.sqrt, .z.sqrt, .w.sqrt) // oof
		
	function Sin (|vec4|)
		return (.x.sin, .y.sin, .z.sin, .w.sin)

	function Cos (|vec4|)
		return (.x.cos, .y.cos, .z.cos, .w.cos)
	
	function Size (|vec2|)
		return (.x2 - .x, .y2 - .y)
	
	function Up (|float| X, |vec4|)
		return self + (0,x,0,x)

	function Right (|float| X, |vec4|)
		return self + (x,0,x,0)

	operator • (|vec4| other, |float|)
		cpp_part Dot
		return (self * other).sum

	function operatordot3 (|vec4| V, |float|)
		V *= self
		return v.x+v.y+v.z

	function CosR (|vec4|)
		return (self * math.iTau).cos

	operator Pow (|vec4| p, |vec4|)
		return (.x pow p.x, .y.cos pow p.y, .z.cos pow p.z, .w.cos pow p.w)

	function iVec4 (|ivec4|)
		return (.x|int|, .y|int|, .z|int|, .w|int|)	

	function Lum (|float|)
		return .xyz.lum

	function Width (|float|)
		return .x2 - .x1			// not quite true but SubliminalApp uses it this way :(

	function Height (|float|)
		return .y2 - .y1			// not quite true but SubliminalApp uses it this way :(

	function Area (|float|)
		return .width*.Height

	function Aspect (|float|)
		return .width / .height
	
	function Floor (|vec4|)
		return (.x.floor, .y.floor, .z.floor, .w.floor)
	
	function Sum (|float|)
		return .x + .y + .z + .w
	
	function Overlap (|vec4| R, |vec4|)
		disabled "Use .clip"
	
	function Clip (|vec4| R, |vec4|)
		r.x  = r.x  max .x
		r.y  = r.y  max .y
		r.x2 = r.x2 min .x2
		r.y2 = r.y2 min .y2
		return r


	function Sign (|float| sigma=0.0, |vec4|)
		.x = .x.sign(sigma)
		.y = .y.sign(sigma)
		.z = .z.sign(sigma)
		.w = .w.sign(sigma)
		return self
	
	function Exists (|bool|)
		return .width > 0 and .Height > 0
	function Posify (|vec4|)
		description "Make this vector have positive area." 
		return (.x1 min .x2, .y1 min .y2, .x1 max .x2, .y1 max .y2)
	
	render
		fs <~ "(${.x}, ${.y}, ${.z}, ${.w})"
	
	module
		function New (|vec4|)
			cpp_part New0
			return (0.0,0.0,0.0,0.0)
		function New (|vec3| a, |float| b, |vec4|)
			cpp_part New31
			numeric
			return (a, b)
		function New (|float| f, |vec4|)
			cpp_part New1
			numeric
			return (f,f,f,f)
		function New (|float| g, |float| a, |vec4|)
			cpp_part Gray
			numeric
			return (g,g,g,a)
		function New (|float| a, |float| b, |float| c, |float| d, |vec4|)
			cpp_part New4
			numeric
			return (a,b,c,d)
		function Load (|&byte| B, |vec4|)
			cpp_inbuilt JB_vec4_Load


datatype ivec4
	function Clip (|ivec4| R, |ivec4|)
		r.x  = r.x  max .x
		r.y  = r.y  max .y
		r.x2 = r.x2 min .x2
		r.y2 = r.y2 min .y2
		return R
		
	function BoundClip (|ivec4| bn, |ivec4|)
		return .bound(bn).clip(bn)

	function Bound (|ivec4| bn, |ivec4|)
		rz = self
		if rz.x < bn.x
			rz.x = bn.x
			rz.x2 = bn.x + .width
		  elseif .x2 > bn.x2
			rz.x2 = bn.x2
			rz.x = bn.x2 - .width
		if rz.y < bn.y
			rz.y = bn.y
			rz.y2 = bn.y + .height
		  elseif .y2 > bn.y2
			rz.y2 = bn.y2
			rz.y = bn.y2 - .height
		
	function Vec4 (|vec4|)
		return (.x|float|, .y|float|, .z|float|, .w|float|)

	operator minus (|ivec2| D, |ivec4|)
		return self - (D,D)

	operator plus (|ivec2| D, |ivec4|)
		return self + (D,D)

	operator right (|int|x, |ivec4|)
		return self + (x,0,x,0)
	
	operator up (|int|x, |ivec4|)
		return self + (0,x,0,x)

	operator left (|int|x, |ivec4|)
		return self - (x,0,x,0)
		
	operator down (|int|x, |ivec4|)
		return self - (0,x,0,x)
		
	function MoveTo (|ivec2| XY, |ivec4|)
		return (XY, XY + .size)

	syntax Equals (|ivec4| v, |bool|Aware, |bool|)
		return (.x == v.x) and (.y == v.y) and (.z == v.z) and (.w == v.w)
	
	operator ± (|int|i, |ivec4|)
		cpp_part Shrink
		return (.x+i, .y+i, .z-i, .w-i)
	
	function Width (|int|)
		return .x2 - .x1			// not quite true but SubliminalApp uses it this way :(
	
	function Width (assigns:|int|, |ivec4|)
		.x2 = .x1 + Value
	function Height (assigns:|int|, |ivec4|)
		.y2 = .y1 + Value
	
	function Width (|bool|d, |int|)
		disabled "use .length"
	
	function Length (|bool|d, |int|)
		return self[2+d|int|] - self[0+d|int|]
	
	function H (|ivec2|)
		return .x1x2
	function V (|ivec2|)
		return .y1y2
		
	function Height (|int|)
		return .y2 - .y1
		
	function Area (|int|)
		return .width * .height
	
	function Aspect (|float|)
		return .width div .height
	
	function Horz (|intrange|)
		return .x1 to .x2
	
	function Vert (|bool|d=false, |intrange|)
		return .dim(1-d|int|)
	
	function Dim (|int|d, |intrange|)
		return self[d] to self[d+2]
		
	function Horz (assigns:|ivec2|r, |ivec4|)
		.x1 = r.x1
		.x2 = r.x2
		return self
	
	function Contains (|int| x, |int| y, |bool|)
		cpp_part ContainsInt
		return .contains((x,y), 0)
		
	function Contains (|ivec2| P, |int| i=0, |bool|)
		cpp_part ContainsIvec2
		require p.x >= .x+i and p.x < .x2-i
		require p.y >= .y+i and p.y < .y2-i
		return true
	
	function Contains (|ivec2| v, |bool|)
		cpp_part ContainsVec2
		return .contains(v, 0)
	
	operator contains (|ivec4| v, |bool|)
		disabled "why?"
		return .contains(v.x1y1) and .contains(v.x2y2)
	
	operator overlaps (|ivec4| v, |bool|)
		require v.x2 > .x1
		require v.x1 < .x2 
		require v.y2 > .y1
		require v.y1 < .y2
		return true 
	
	operator contains (|ivec2| v, |bool|)
		return .contains(v)
	
	function IsPositive (|bool|)
		return (.x2 > .x) and (.y2 > .y)
	
	function IsNegative (|bool|)
		return (.x2 < .x) or (.y2 < .y)
		
	syntax cast (|bool|)
		cpp_part Bool
		return self!=ivec4()	

	function Soothe (|ivec4|)
		return (0, 0, .x2 - .x1, .y2 - .y1)	
	
	function Size (|ivec2|)
		return (.x2 - .x1, .y2 - .y1)	

	render
		fs <~ "(${.x}, ${.y}, ${.z}, ${.w})"
	
	module
		function Load (|&byte| B, |ivec4|)
			cpp_inbuilt JB_ivec4_Load

		function New (|ivec4|)
			cpp_part New0
			return (0, 0, 0, 0)
		function New (|int| x, |ivec4|)
			cpp_part New1
			numeric
			return (x,x,x,x)
		function New (|int| x, |int| y, |int| z, |int| w, |ivec4|)
			cpp_part New4
			numeric
			return (x,y,w,z)
	
	iterator Rect
		|| curr = (.x1,.y1)
		while (curr.y < .y2) // just changed this ooofff
			while (curr.x < .x2)
				yield curr
				++curr.x
			curr = (.x1, curr.y+1)





datatype vec3
	size 16 // We are using vec4 for vec3 :)
	syntax cast (|bool|)
		cpp_part Bool
		return (self != vec3())


	function Camera2 (|mat4|)
		rz[3,3] = 1.0
		rz[1,1] = 1.0
		rz[0,0] =  .z, rz[2,0] = .x
		rz[0,2] = -.x, rz[2,2] = .z


	function Camera3 (|mat4|)
		rz[3,3] = 1.0
		rz[0,0] = 1.0
		rz[1,1] =  .z, rz[2,1] = .y
		rz[1,2] = -.y, rz[2,2] = .z

	function Camera (|mat4|)
		return .Camera2
		// can we do a simple y rotation?
		rz[3,3] = 1.0
// a forward z... means everything stays "as-is"
		rz[0,0] =  .z, rz[1,1] = .z, rz[2,2] = .z

// now we have some kinda rotations.
// all x, means we turn to the right		
		rz[1,0] =  .y,  rz[2,0] =  .x
		rz[0,1] =  .x,  rz[2,1] =  .y
		rz[0,2] = -.x,  rz[1,2] = -.y
		rz[0,0] = 1.0
		rz[1,2] = -.y//, rz[2,2] = .z



	function LookAt (|mat4|)
		disabled "Not sure this function even makes sense originally."
//	    || f = .normal
//	    || u = vec3(0,1,0)
//	    || s = (f x u).normal
//	    u = s x f
//	    rz.rows[0] = (s,  -(s • self))
//	    rz.rows[1] = (u,  -(u • self))
//	    rz.rows[2] = (f,  -(f • self))
//		rz[3,3] = 1.0

	function RotateXLeft (|vec3|)
		return (.x, .z, -.y)
	function RotateXRight (|vec3|)
		return (.x, -.z, .y)
		
	function RotateYLeft (|vec3|)
		return (.z, .y, -.x)
	function RotateYRight (|vec3|)
		return (.z, -.y, .x)
		
	function RotateZLeft (|vec3|)
		return (.y, .x, -.z)
	function RotateZRight (|vec3|)
		return (.y, -.x, .z)
	
	syntax Compare (|float| Other, |bool|Aware, |float|)
		|| LSq = .lengthsq
		|| Osq = other*other
		return lsq - Osq

	syntax Equals (|vec3| v, |bool|Aware, |bool|)
		return (.x == v.x) and (.y == v.y) and (.z == v.z) 
	
	function Lum (|float|)
		return ((self*self) • (0.299, 0.587, 0.114)).sqrt

	function Sin (|vec3|)
		return (.x.sin, .y.sin, .z.sin)

	function Cos (|vec3|)
		return (.x.cos, .y.cos, .z.cos)

	function Fract (|vec3|)
		return (.x.fract, .y.fract, .z.fract)
	
	function Ceil (|vec3|)
		return (.x.ceil, .y.ceil, .z.ceil)	

	function SinR (|vec3|)
		return (self * math.iTau).sin

	function CosR (|vec3|)
		return (self * math.iTau).cos

	operator Pow (|vec3| p, |vec3|)
		return (.x pow p.x, .y.cos pow p.y, .z.cos pow p.z)

	operator min (|vec3| s, |vec3|)
		cpp_part Min3
		(s.x min= .x)
		(s.y min= .y)
		(s.z min= .z)
		return s

	operator max (|vec3| s, |vec3|)
		cpp_part Max3
		(s.x max= .x)
		(s.y max= .y)
		(s.z max= .z)
		return s

	operator max (|float| s, |vec3|)
		(.x max= s)
		(.y max= s)
		(.z max= s)
		return self
	
	function Max (|float|)
		return .x max .y max .z

	function Min (|float|)
		return .x min .y min .z
		
	function iVec3 (|ivec3|)
		return (.x|int|, .y|int|, .z|int|)

	function LengthSq (|float|)
		return (.x*.x + .y*.y + .z*.z)

	function Length (|float|)
		return .lengthsq.sqrt
		
	operator mul (|float| x, |vec3|)
		cpp_part MulF
		return (x,x,x)*self

	operator mul (|vec3| v, |vec3|)
		cpp_part Mul3
		return (.x*v.x, .y*v.y, .z*v.z)
	
	function Abs (|vec3|)
		return (.x.abs, .y.abs, .z.abs)
	
	operator • (|vec3| other, |float|)
		cpp_part Dot
		return (self * other).sum


	function Reflect (|vec3| plane, |vec3|)
		return self - 2.0 * (self • plane) * plane

	function Sum (|float|)
		return .x + .y + .z


	function Normal (|vec3|) 									// use invsqrt instead?
		return self / .length

	operator x (|vec3| V, |vec3|)
		description "Gives something at right angles. IDK its just maths dont ask me." 
	    rz.x = .y * v.z - .z * v.y
	    rz.y = .z * v.x - .x * v.z
	    rz.z = .x * v.y - .y * v.x

	render
		fs <~ "${.x}, ${.y}, ${.z}"
	
	module
		function New (|vec3|)
			cpp_part zero
			return (0.0, 0.0, 0.0)
		function New (|float| x, |float| y, |float| z, |vec3|)
			numeric
			return (x,y,z)
		function New (|vec2| xy, |float| z, |vec3|)
			cpp_part New21
			numeric
			return (xy,z)
		function New (|float| x, |vec3|)
			cpp_part New1
			numeric
			return (x,x,x)
		function Up   (|vec3|)
			return (0.0,  1.0, 0.0)
		function Down (|vec3|)
			return (0.0, -1.0, 0.0)



datatype ivec3
	syntax cast (|bool|)
		cpp_part Bool
		return .x or .y or .z

	function Vec3 (|vec3|)
		return (.x|float|, .y|float|, .z|float|)	

	render
		fs <~ "(${.x}, ${.y}, ${.z})"

	syntax Equals (|ivec3| v, |bool| Aware, |bool|)
		return (.x == v.x) and (.y == v.y) and (.z == v.z) 
	
	module
		function New (|ivec3|)
			return (0, 0, 0)





// mousetest
datatype IntRange (ivec2)
	linkage
		cpp_part Rg
	function Width (|int|)
		return .x2 - .x
	operator Inside (|ivec4| R, |bool|)
		return R.Contains(.X, .Y)

	operator overlaps (|intrange| r, |bool|)
		return r.x1 < .x2 and r.x2 > .x1
	function By (|intrange| r, |ivec4|)
		return (.x, r.x, .y, r.y)
 
	operator ± (|int|i, |intrange|)
		cpp_part Shrink
		return (.x+i, .x2-i)
	
	
	operator dtd  (|intrange| R, |bool|)
		if (r.x2 <= .x) or (r.x >= .x2)
			return false
		return true
		
	function Resolve (|intrange|)
		return (.lower, .higher)
	function Higher (|int|)
		return .x1 max .x2
	function Lower (|int|)
		return .x1 min .x2
	function Mid (|int|)
		return (.x1 + .x2)/2
//	function Mix (|float|f, |float|)
//		return mix(.x1, .x2, f)
	function LimitTo (|int| i, |ivec2|)
		if (.X  < 0):		.X  = 0
		if (.X2 < 0):		.X2 = 0
		if (.X  > i):		.X  = i
		if (.X2 > i):		.X2 = i
		return self

	operator Contains (|int| i, |bool|)
		cpp_part Contains1
		return (i >= .X) and (i < .X2)
	operator Contains (|ivec2| i, |bool|)
		cpp_part Contains2
		return self contains i.x and i.x2

	syntax Equals (|int| i, |bool|)
		return .X==i and .X2==i

	iterator
		|| _End = .x2
		|| _Curr = .x
		while (_curr < _end)
			yield _Curr (_Curr)
			++_Curr



datatype ivec2
	operator • (|ivec2| other, |int|)
		cpp_part Dot
		return (self * other).sum

	function LengthSq (|float|)
		return (.x * .x)|float| + (.y * .y)|float| 

	function Width (|int|)
		return .x2 - .x

	syntax Compare (|float| Other, |bool|Aware, |int|)
		|| LSq = .lengthsq
		|| Osq = other*other
		if (Lsq > osq)
			return 1
		if (Lsq < osq)
			return -1

	syntax cast (|intrange|)
		return self|intrange|

	function Grow (|ivec2|g, |ivec4|)
		return (self-g, self+g)
		
	function Clip (|int| p, |int|)
		if p < .x
			return .x
		return p min .x2
		
	function Clip (|ivec2| p, |ivec2|)
		cpp_part Clip2
		p.x = .x.clamp(p.x)
		p.y = .y.clamp(p.y)
		return p
			
	function Mid (|int|)
		return (.x1+.x2)/2
		
	operator contains (|int| x, |bool|)
		return (x >= .x1) and (x <= .x2)

	function Contains (|ivec2| i, |int| within=0, |bool|)
		if i.x >= within  and  i.x < .x-within
			if  i.y >= within  and  i.y < .y-within
				return true

	operator mul (|float| x, |ivec2|)
		return (.vec2*x).ivec2

	operator align (|int| a, |ivec2|)
		return (.x align a, .y align a)

	operator max (|ivec2| o, |ivec2|)
		cpp_part Max2
		return (o.x max .x, o.y max .y)

	operator max (|int| o, |ivec2|)
		cpp_part Max1
		return (o max .x, o max .y)

	operator min (|ivec2| o, |ivec2|)
		return (o.x min .x, o.y min .y)
		
	operator fma (|int|a, |int|)
		return .x + .y*a

	operator inrange (|ivec2| p, |bool|)
		return .x inrange p.x  and  .y inrange p.y

	function Sum (|int|)
		return .x + .y

	function Area (|int|)
		return .x * .y

	function Inside (|ivec4| R, |bool|)
		return R.Contains(.x, .y)
	
	function Vec2 (|vec2|)
		return (.x|float|, .y|float|)
	
	function Rect (|ivec4|)
		return (0, 0, .x, .y)

	function Point (|ivec4|) 
		return .xyxy + (0,0,1,1)
	
	syntax cast (|bool|)
		cpp_part Bool
		return .x or .y
	
	syntax Equals (|ivec2| v, |bool|Aware, |bool|)
		cpp_part Equals2
		return (.x == v.x) and (.y == v.y) 

	syntax Equals (|int| v, |bool|Aware, |bool|)
		return (.x == v) and (.y == v) 
	
	function RotateRight (|ivec2|)
		description "Rotates like a steering wheel, so turning the top to the right" 
		return (.y, -.x)
	
	function RotateLeft (|ivec2|)
		description "Rotates like a steering wheel, so turning the top to the left" 
		return (-.y, .x)
		
	render
		fs <~ "(${.x}, ${.y})"
	
	
	iterator
		|| curr = (0,0)
		while (curr.y < .y)
			while (curr.x < .x)
				yield curr
				++curr.x
			curr = (0,curr.y+1)
			
	module
		function New (|int| x, |ivec2|)
			cpp_Part New1
			numeric
			return (x, x)
		function New (|int| x, |int| y, |ivec2|)
			cpp_Part New2
			numeric
			return (x, y)



datatype vec2
	render
		fs <~ "${.x}, ${.y}"

	function iVec2 (|ivec2|)
		return (.x|int|, .y|int|)

	function Reflect (|vec2| plane, |vec2|)
		return self - (2.0 * (self • plane) * plane)
		
	function Normal (|vec2|)
		return self / .Length
	
	function Box (|float| x, |vec4|)
		return (self - x, self+x)

	function IFloor (|ivec2|)
		return .floor.ivec2
	
	function Floor (|vec2|)
		return (.x.floor, .y.floor)

	function Ceil (|vec2|)
		return (.x.ceil, .y.ceil)

	function Log2 (|vec2|)
		return (.x.log2, .y.log2)

	operator Pow (|vec2| v, |vec2|)
		return (.x pow v.x, .y pow v.y)
		
	function Max (|float|)
		return .x max .y

	syntax cast (|bool|)
		cpp_part Bool
		return .x or .y

	function RoundEven (|vec2|)
		self += 0.5
		rz = self - .Fract
		if !.x
			rz.x -= .x.IntegerToMod2
		if !.y
			rz.y -= .y.IntegerToMod2
	
	syntax Equals (|vec2| v, |bool|Aware, |bool|)
		return (.x == v.x) and (.y == v.y) 
	
	operator • (|vec2| other, |float|)
		cpp_part Dot
		return (self * other).sum

	operator min (|vec2| s, |vec2|)
		(s.x min= .x)
		(s.y min= .y)
		return s

	operator max (|vec2| s, |vec2|)
		(s.x max= .x)
		(s.y max= .y)
		return s	

	function Sum (|float|)
		return .x + .y

	function LengthSq (|float|)
		return (.x * .x)  +  (.y * .y)

	function Length (|float|)
		return .LengthSq.sqrt

	function Fract (|vec2|)
		return (.x.fract, .y.fract)
		
	function Abs (|vec2|)
		return (.x.abs, .y.abs)

	function SinCos (|vec4|)
		return (.x.sincos, .y.sincos)
		
	function Sin (|vec2|)
		return (.x.sin, .y.sin)

	function Cos (|vec2|)
		return (.x.cos, .y.cos)

	function SinR (|vec2|)
		return (self * math.iTau).sin

	function CosR (|vec2|)
		return (self * math.iTau).cos

	syntax Compare (|float| Other, |bool|Aware, |int|)
		|| L = .LengthSq
		other = other * other
		if (L > other)
			return 1
		if (L < other)
			return -1
	
	module
		function New (|vec2|)
			cpp_part New0
		function New (|float| a, |vec2|)
			cpp_part New1
			numeric
			return (a, a)
		function New (|float| a, |float| b,  |vec2|)
			cpp_part New2
			numeric
			return (a, b)


datatype mat2 (vec4)
	function vec2.operatormul (|mat2| m, |vec2|)
		return (m.xy • self, m.zw • self)
	function vec3.operatormul (|mat2| m, |vec3|)
		cpp_part YRotation
		|| XZ = .xz
		XZ = (m.xy • xz, m.zw • xz)
		return (xz.x, .y, xz.y)
	module
		function New (|vec4| x, |mat2|)
			numeric
			return x|mat2|
		function New (|float| a, |float| b, |float| c, |float| d,  |mat2|)
			cpp_part New4
			numeric
			return (a,b,c,d)|mat2|
		function New (|mat2|)
			cpp_part Identity
			return (1.0, 0.0, 0.0, 1.0)|mat2|



function vecmix (|vec2|a, |vec2|b, |vec4|)
	cpp_part mix22
	return (a.x, a.y, b.x, b.y)
function vecmix (|float|a, |float|b, |vec2|c, |vec4|)
	cpp_part mix112
	return (a, b, c.x, c.y)
function vecmix (|vec2|a, |float|b, |float|c, |vec4|)
	cpp_part mix211
	return (a.x, a.y, b, c)
function vecmix (|float|a, |vec2|b, |float|c, |vec4|)
	cpp_part mix121
	return (a, b.x, b.y, c)
function vecmix (|vec3|a, |float|b, |vec4|)
	cpp_part mix31
	return (a.x, a.y, a.z, b)
function vecmix (|float|a, |vec3|b, |vec4|)
	cpp_part mix13
	return (a, b.x, b.y, b.z)
function vecmix (|vec2|a, |float|b, |vec3|)
	cpp_part mix21
	return (a.x, a.y, b)
function vecmix (|float|a, |vec2|b, |vec3|)
	cpp_part mix12
	return (a, b.x, b.y)
function ivecmix (|ivec2|a, |ivec2|b, |ivec4|)
	cpp_part imix22
	return (a.x, a.y, b.x, b.y)
function ivecmix (|int|a, |int|b, |ivec2|c, |ivec4|)
	cpp_part imix112
	return (a, b, c.x, c.y)
function ivecmix (|int|a, |ivec2|b, |int|c, |ivec4|)
	cpp_part imix121
	return (a, b.x, b.y, c)
function ivecmix (|ivec3|a, |int|b, |ivec4|)
	cpp_part imix31
	return (a.x, a.y, a.z, b)
function ivecmix (|int|a, |ivec3|b, |ivec4|)
	cpp_part imix13
	return (a, b.x, b.y, b.z)
function ivecmix (|ivec2|a, |int|b, |ivec3|)
	cpp_part imix21
	return (a.x, a.y, b)
function ivecmix (|int|a, |ivec2|b, |ivec3|)
	cpp_part imix12
	return (a, b.x, b.y)


function ivec2.Abs (|ivec2|)
	return (.x.abs, .y.abs)

function ivec4.Clamp (|int| L, |int| H, |ivec4|)
	return .max(L).min(H)

function ivec4.Max (|int| L, |ivec4|)
	return (.x max L, .y max L, .z max L, .w max L )

function ivec4.Min (|int| L, |ivec4|)
	return (.x min L, .y min L, .z min L, .w min L )

function ivec4.Center (|vec2|)
	return .vec4.center

function vec4.Center (|vec2|)
	return (.x+.x2, .y+.y2)*0.5

