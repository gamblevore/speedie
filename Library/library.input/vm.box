


// vm.box
forms
	U0:
	U1:		r1 r
	U2:		r1 r,  r2 r
	U3:		r1 r,  r2 r,  r3 r
	U4:		r1 r,  r2 r,  r3 r,  r4 r


	Func	// func: fnc:
		SaveRegs	5
		Incr		1
		JUMP		j
		Prm1		x
		Prm2		x
	
	Tail
		JUMP		j
		Prm1		x
	
	Cmp		// cmp:
		r1		r
		r2		r
		Cmp		4

	CmpD	// cmpd:
		r1		r
		r2		r
		r3		r
	
	CmpEq	// cmpeq:
		r1		r
		r2		r
		Jmp		j

	Const	// const:
		r1		r
		Rot		6
		Inv		1
		Value	12
	
	Bra		// bra:
		r1		r
		c1		2
		jmp		j
	
	Mem		// mem:
		r1		r	// dest
		r2		r	// Base
		r3		r	// VarAdd
		L		7	// Const A
		move	2
	
	Setn
		r1		r
		Cond	1	// 0 == always, 1 = only if dest == 0
		Inv		1
		Value	16
		Prm1	x
		Prm2	x
		
	
	CNTR	// 
		r1		r
		r2		r
		incr	3
		size	2 // 1, 2, 4, 8
		// *(u1+L3-8) += i2
		// u1+=incr-3
		// this can add a reg to an obj property
		// incr useful for writing to an array?
	
	CNTC
		r1		r
		cnst	8
		size	2 // 1, 2, 4, 8
		// *(u1+CNTC_Lu-8) += CNTC_cnsti
	
	BFLD
		r1		r
		r2		r
		up		6
		down	6
	
	BCmp	// bcmp:
		r1		r
		r2		r
		r3		r
		Shift	6
		Inv		3

	SWAP
		A		6
		B		6
		C		6
		D		6
		
	RET
		r1		r
		r2		r
		Count	3
		Exists	1
	
	Div
		r1		r
		r2		r
		r3		r
		r4		r
		Kind	2
	
	Trap
		Func	1		// what about breaking if the func hits a certain level?
		Signal  1		// signal, breakpoint

	Float:		r1 r,  r2 r,  r3 r,  r4 r,  D  1

	FloatIncr
		r1		r
		r2		r
		D		1
		High	13


// this file:
// 1) builds the c++ codes, and the jump-table, and the ASM accessor functions
// 2) builds the instruction-info speedie uses exec can just include this file too.
// 3) builds the Âµforms



#!						 (((((STOP)))))
EROR (U1)
	// all 0000 means no-op
	if (n1 or U1_Lu)
		return u1+U1_Lu

TRAP (Trap)
	if (Trap_Signalu)
		JB_App__SelfSignal(Trap_Lu)
	else if (!Trap_Funcu)
		debugger



#!						 (((((FUNC)))))

RET (Ret)	// ret: 
	__ 
	Code = Return(r, Code, Op)
	___

FUNC (Func, 2,3) // func: 
	__
	Code = BumpStack(r, Code, Op)
	___

FNCX (Func, 2,3)
	__
	vm.CurrStack = r // to make this recursive
	ForeignFuncSimple(r, Code, Op)
	___

TAIL (Tail, 2)
	__
	Code = TailStack(r, Code, Op)
	___

SWAP (Swap)
	std_swap(r[SWAP_Au], r[SWAP_Bu])
	std_swap(r[SWAP_Cu], r[SWAP_Du])
	


#!						 (((((Utils)))))
PRNT (U1)
	printf("%lli\n", i1)
	#!better to print this also as float/double/signed/unsigned...
RARE (U2)
	if_rare (Rare(r, Op)) return n3
CONV (U3)
	Conv(r, n2, Op)



#!						 (((((Consts)))))
SETK (Const)
	RotateConst(r, Op)
SETN (setn)//, 1, 2, 3)			// OK
	LoadConst(r, Op, Code)



#!						 (((((Math)))))
ADDK ("rrnl")
	i1  =  i2 + U2_Li
ADD  (U3)
	i1  =  i2 + (i3 << L3) // only need 6 bits for shift! can we save 3 conditional add?
SUB  (U3)
	i1  =  i2 - (i3 << L3)
MUL  (U4)
	i1 = (i2 * i3) + i4
DIV  (Div)
	DivMath(r, Op)



#!						 (((((Bitops)))))
SHRS  (U3)
	i1 = i2 >> (u3 + L3)
SHRU  (U3)
	u1 = u2 >> (u3 + L3)
SHLS  (U3)
	i1 = i2 >> (u3 + L3)
BAND  (U3)
	u1 = u2 &  (u3|||L3)
BOR   (U3)
	u1  |= (u2|||u3)
BXOR  (U3)
	u1 = u2 ^ u3
BXNR  (U3)		// for A = ~B
	u1 = (~u2 ^ u3)
BNOT  (U2)
	u1 = ~u2 // & U3_Li
BFLG  (BFLD)
	if (BFLD_Lu) // perhaps sign can allow for 1-4 contig regs to be masked?
		i1 = ((i2 << BFLD_upu) >> BFLD_downu)
	else
		u1 = ((u2 << BFLD_upu) >> BFLD_downu)
BFLS  (BFLD)		 // same?
	i1 |= ((i2 << BFLD_downu) >> BFLD_upu)

	
//BSTT  (U4)
//	i1 = 0//bitstats(u2, u3, u4)
BROL  (U3)
	i1 = JB_u64_RotL(u2, u3 + L3)
BROR  (U3)
	i1 = JB_u64_RotR(u2, u3 + L3)
BCMP  (BCmp)
	u1 = BitComp(r, Op)


#!						 (((((Branches)))))
JUMP (U0)
	Code += l0

CMPI  (Cmp)					// Yes. int/uint/u64/i64 versions
	__
	Code = CompI(r, Op, Code)
	___
CMPF  (Cmp)
	__
	Code = CompF(r, Op, Code)
	___
CMPE  (CmpEq)
	__
	Code = CompEq(r, Op, Code)
	___
CMPN  (CmpEq)				// NO (But easy to fix)
	__
	Code = CompNeq(r, Op, Code)
	___
BRA   (Bra)					// Merge these two?
	__
	if (!i1)
		Code += Bra_jmpi
	___
	i1 += Bra_c1u-1

BRAN  (Bra)					
	__
	if (i1)
		Code += Bra_jmpi
	___
	i1 += Bra_c1u-1

LUPU  ("rrj")				// assume uint64
	__
	if (i1++ < i2)
		Code -= U2_Lu
	___
LUPD  ("rrj")			 	// same
	__
	if (i1-- > i2)
		Code -= U2_Lu
	___



#!						 (((((Refs)))))
RSDE  ("rrrj")
	__
	Code += U3_Li
	___
	decr(o3)
	decr(o2)
	safedecr(o1)
	#!jump too? for branches...
RSET  (U4)
	setref(n1, o1, o2)
	setref(n3, o3, o4)

RALO  (U2)
	o1 = alloc(o2)
	#!should call constructor too.



#!						(((((Memory)))))
TABL  (U2)
	u1 = table(u2, L2)
RD1U  (mem)
	u1 = mem(uint8)
	mem2(uint8)
RD1S  (mem)
	u1 = mem(char)
	mem2(char)
RD2U  (mem)
	u1 = mem(u16)
	mem2(u16)
RD2S  (mem)
	u1 = mem(s16)
	mem2(s16)
RD4U  (mem)
	u1 = mem(u32)
	mem2(u32)
RD4S  (mem)
	u1 = mem(int)
	mem2(int)
RD8U  (mem)
	u1 = mem(u64)
	mem2(u64)
RD16  (mem)
	((ivec4*)r)[n1] = mem(ivec4)
	mem2(ivec4)
WR1U  (mem)
	mem(uint8) = u1
	mem2(uint8)
WR2U  (mem)
	mem(u16) = u1
	mem2(u16)
WR4U  (mem)
	#! xcode only complains about this one? ?
	mem(u32) = (u32)u1
	mem2(u32)
WR8U  (mem)
	mem(u64) = u1
	mem2(u64)
WR16  (mem)
	mem(ivec4) = (ivec4)(((ivec4*)r)[n1])
	mem2(ivec4)

CNTC  (CNTC)					// aWESOME  JOBBBBBBBBBBB BROOOOOO LOLLLLLLL ::DDDDDD
	CountConst(r, Op)
MEMM  ("rrnl")
	#! copy/fill/endian/xor
	MemStuff((u32*)u1, (u32*)u2, n3, L3)


#!						(((((Float)))))
FADK (FloatIncr)
	// we just want simple things like MyFloat += 2.0
	if (FloatIncr_Du)
		d1 += d2 + FloatIncr2(Op)
	else
		f1 += f2 + FloatIncr1(Op)

FADD  (Float)
	if (Float_Du)
		d1 = d2 + d3 - d4
	else
		f1 = f2 + f3 - f4

FMUL  (Float)
	if (Float_Du)
		d1 = (d2 * d3)+d4
	else
		f1 = (f2 * f3)+f4

FDIV  (Float)
	if (Float_Du)
		d1 = d2 / d3
	else
		f1 = f2 / f3

FFRC  (Float)
	if (Float_Du)
		d1 = (d2 - floor(d2)) * d3
	else
		f1 = (f2 - floor(f2)) * f3
