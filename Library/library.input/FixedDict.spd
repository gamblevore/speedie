

class FixedDict
	contains object
	linkage: cpp_part fix
	|uint|					ItemTypes
	|Byte|					ValueType
	|Byte|					Letter
	|(&nil)?|				Value
	|FixedDict--?|			Parent
	|(&nil)[16]|			Items
	
	constants
		TypeValue	= 0
		TypeObj     = 1
		TypeStem	= 2
		TypeDict    = 3
	
	constructor (|&nil| Value = nil, |Byte| type = 0)
		cpp_part ConstructorValue
		.value = value
		.valuetype = type
		if (type == typeobj)
			jb_incr(value|object|)
	
	constructor (|FixedDict| Parent, |int| Part, || old, |byte| type)
		cpp_part ConstructorReplace
		.value = old|&nil|
		.valuetype = type
		parent.typeof(part) = typedict
		parent.items[part] = self|&nil|
		jb_incr(self)


	destructor
		.clear
	
	function Clear
		opt norefcounts
		|| T = .itemtypes
		|| i = 0
		while T
			if T & 3
				jb_decr( self[i] )
			++i
			T >>= 2
		if .valuetype == typeobj
			jb_decr( .value|object| )
		.valuetype = 0
		.itemtypes = 0
	
	
	function TypeOf (|int| i, |int|)
		return 3 & .itemtypes >> (i<<1)


	function TypeOf (|int| i2, assigns:|uint|)
		i2 <<= 1
		.itemtypes	= (.itemtypes &~ (3 << i2))  |||  (Value << i2)


	syntax access (|int| i, |fixeddict?|)
		return .items[i]|fixeddict?|


	function SetPart (|int| B, || Val, |int| type)
		opt NoRefCounts
		if type
			jb_incr(val)

		|| BT = .typeof(b)
		|| place = &.items[b]
		|| obj = (place[])|fixeddict|		// verbose but faster
		if BT >= typestem
			if obj
				if obj.valuetype
					jb_decr( obj.value|object| )
				obj.valuetype = type
				obj.value = val|&nil|
			  else
				debugger // obj will never be nil here
		  else
			.typeof(b) = type
			place[] = val|&nil|
			if bt
				jb_decr( obj )				// cos we call this last, compiler can opt it.
	

	function DownPart (|int| part, |FixedDict|)
		opt NoRefCounts
		|| rt = .typeof(part)
		|| r  = self[Part]
		if rt == TypeDict
			return r!
		return fixeddict(self, part, r, rt)
	

	helper InlineValue (|int| t, ||)
		nil self
		if T == typeobj: return self|...|
		if T and self and .valuetype
			return .value|...|


	syntax access (|string| s, assigns:|| o)
		cpp_part SetValue
		|| n = s.length
			.addType(s.addr, n, o, typeobj)
		// could allow "" as a name, using .value?


	syntax access (|string| s, ||)
		cpp_part GetValue
		|| n = s.length
			return .gettype(s.addr, n)|...|

	
	helper AddType (|&byte| Addr, |int| n, || val, |int| Type)
		opt norefcounts
		|| i = 0
		while 
			|| b = addr[i++]
			self = .DownPart(b&15)
			if i >= n
				return .SetPart(B>>4, Val, Type)
			self = .DownPart(B>>4)


	helper GetType (|&byte| Addr, |int| n, ||)
		opt norefcounts
		|| i = 0
		while
			|| B	= addr[i++]
			self	= self[B&15]				#require
			|| T	= .typeof(B>>4)
			self	= self[B>>4]
			if i >= n
				return .InlineValue(t)
			require T == typedict


	module
		function TimeTest (|[string]| items)
			|fixeddict of string|  fd = fixeddict()
			|dictionary of string| ed = dictionary()
			|| n = 4
			
			printline
			for (n): fd = fixeddict(), using ("fixed set") {
				for a in items: fd[a] = a
			}

			printline
			for (n): using ("fixed set reuse") {
				for a in items: fd[a] = a
			}

			printline
			for (n): ed = dictionary(), using ("set") {
				for a in items: ed[a] = a
			}
			
			printline
			for (n): using ("set reuse") {
				for a in items: ed[a] = a
			}
			
			printline
			for (n): using ("fixed get") {
				for a in items
					expect (fd[a] == a)
			}

			printline
			for (n): using ("get") {
				for a in items
					expect (ed[a] == a)
			}
		
		
		function Test
			|[string]| items	= []
			|| fs				= faststring.new

			for i in 100
				fs <~ ('A' + i)|Byte|
				fs <~ ('Z' + i)|Byte|
				fs <~ (i&15)|Byte| // just for the mix
			
			|| s = fs.getresult
			|| prefill = fixeddict()

			for i in 100
				for j in (i + 1) to 100 // fill ooftester
					|| t = s[i, j]
					items <~ t
					prefill[t] = t
			prefill.clear

			using (leaktester.new("oof2"))
				|| f = fixeddict()
				for t in items
					f[t] = t
			
			(prefill)
			|fixeddict of string| dict	= FixedDict.new
			for t in items
				dict[t] = t
			for t in items
				expect (dict[t] == t) (dict[t])
			dict.clear

			TimeTest(items)



/*
	Could replace:
		* Array			(arrays suck in every language. we only wanna go forward/backward!)
		* Dictionary	(kinda bloated, and slower!! and takes more memory!)
*/

// Possible idea: Optimise speedie's lookuptables for properties/globals
	// * nil means empty dictionary
	// * Store <= 8 values, as inline-array in FixedDict (name+value stored in .items)
	// * FixedDict can be upgraded to a proper dictionary


role NameTableConcept (object)
	description "Just an idea of what we could do. Not an actual useful code."
	function Add (|!&NameTableConcept| self, |message| y)
		opt norefcounts
		|| v = self[]
		if !v
			self[] = y
			return 
		
		if v isa FixedDict
			v.NameTableAdd(y)
			return 

		|| d = FixedDict()
		self[] = d
		d.NameTableAdd(v|&nil||message|)
		d.NameTableAdd(y)


	helper fixedDict.NameTableAdd (|message| value)
		opt norefcounts
		|| l = .Letter
		.Letter = l+1
		.SetPart(l++, value, fixeddict.TypeObj)
		if l <= 7
			return
		
		|message--[8]| Tmp
		|| n = Platform.PointerBytes * 8
		Memory.Copy((&tmp[0])|&nil|, (&.items[0])|&nil|, n)
		Memory.zero((&.items[0])|&nil|, n) // remove all objects
		.ItemTypes = 0
		
		// ReAdd objects
		for i in 8
			|| msg = tmp[i]!
			|| name = msg.name
			.addtype(name.addr, name.length, msg, fixeddict.typeobj)
			jb_decr(msg) // oof
	
	
	function Get (|string| name, |message|)
		nil checker
		if self isa FixedDict
			|int| l = .letter
				while --l >= 0
					|| s = .items[l]|&nil||message|
					if s.name == name
						return s
				return nil
			return self[name]|&nil||message|
		if self isa message
			if .name == name
				return self
			
				
//class Example
//	|?NameTableConcept| Table
//	
//	constructor
//	function Test
//		|| list = "'a', 'b', 'c'" ~ parse
//		for s in list
//			.Table.add(s)
//			for s2 in list
//				|| x = .table.get(s2.name)
//				"$s2 --> $x"
//
//main
//	|| x = Example()
//	x.Test
//
