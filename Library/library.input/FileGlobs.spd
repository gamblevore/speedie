
/*
	Jeebox internals. By Theodore H. Smith...
*/


function string.OperatorGlobs (|string| txt, |bool|)
	require self
	description "Don't use this on a full-file path, but on path components"
	|&byte| text_backup
	|&byte| wild_backup
	|| text = txt.addr
	|| wild = .addr
	|| textEnd = text + txt.length
	|| wildEnd = wild + .length
	
	while text < textEnd
		|| w = (wild[]).lowercase
		if w == '*'
			text_backup = text
			wild_backup = ++wild
		  elseif (w == '?'  or  w == text[].lowercase)
			text++
			wild++
		  else
			wild = wild_backup
			text = ++text_backup
			require wild and text
	
	while (wild < wildEnd and wild[] == '*')
		wild++  // ignore trailing stars
	return wild == wildEnd


function string.OperatorGlobbed_By (|[string]| globs, |bool|)
	opt norefcounts
	for g in globs
		if g globs self
			return true		


/*
	There are two separate possible use cases.
	So we need two separate functions to do this.
	
	1) We want to pass a list of globs to collect them, like to a shell script
		Passing: abc, abc, abc... should collect abc 3x.
		
	2) We want to test a file-path against some globs. Just use globbed_by.
*/




function string.GlobPath (|bool| AllowLinks=false, |[file]|)
	return .split.globpaths(allowlinks)


function array.GlobPaths (|[string]| self, |bool| AllowLinks=false, |[file]|)
	description "Returns a list of files, that match the glob passed. Can send one glob per line."

	for L in self
		|| fixed = L.RegularPath
		if Fixed contains "**"
			error "Can't glob '**' in: " + Fixed
		  else
			"".FileGlobSub(AllowLinks, fixed / '/', rz, 0)


// /usr/local/speedie/abc*

helper string.FileGlobSub (|bool| AllowLinks, |[string]| GlobParts, |[file]| result, |int| i)
	|string--| p = GlobParts[i++]
	p ?= ""
	ifn p contains '*'
		|| newpath = (.child(p), "/")(self or p) 
		newpath.FileGlobSub2(AllowLinks, GlobParts, result, i)
		return
	
	for ch in .file.list // skips invis, and sorts
		if p globs ch
			.child(ch).FileGlobSub2(AllowLinks, GlobParts, result, i)


helper string.FileGlobSub2 (|bool| AllowLinks, |[string]| parts, |[file]| result, |int| i)
	if parts > i
		.FileGlobSub(AllowLinks, parts, result, i)
	  else
		|| f = .file
		if f.Exists
			result <~ f
