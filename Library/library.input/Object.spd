
/*
	Jeebox internals. By Theodore H. Smith...
*/


class Object
	linkage
		wrapper
		cpp_class JB_Object
	
	virtual Render (|FastString|fs_in=nil, |string|)
		nil self
		cpp_wrapper JB_ObjRender

	helper GenericRender (|FastString| fs_in=nil)
		cpp_wrapper JB_Obj_GenericRender

	function Class (|&ClassData|)
		nil checker
		cpp_wrapper JB_ObjClass

	helper ClassBehaviours (|&byte|)
		cpp_wrapper JB_ObjClassBehaviours

	helper MemoryLayer (|MemoryLayer|)
		cpp_wrapper JB_ObjLayer
	
	helper RefCount (|int|)
		cpp_Wrapper JB_ObjRefCount
	
	helper ObjectID (|int|)			// stable across Runs!
		nil checker
		cpp_wrapper JB_ObjectID		// uses pos within the superblock :)
	
	function Dispose				// Safely clears out all the properties...
		cpp_wrapper JB_ObjDestroy


	operator isa (|&ClassData| cls, |bool|)
		cpp_part Isa
		if (self)
			|| P = .Class
			while (P|bool|)
				if (P == cls)
					return true
				P = P.Parent
	
	
	operator MustBe (|&ClassData| x, |bool|)  // perhaps mustbe should just be isa.
		nil checker
		return self.mustbe(x)
	
	helper MustBe (|&ClassData| x, |Message|ErrNode=nil, |bool|)
		nil checker
		if self isa x
			return true
		if self
			.TypeFailed(x, errnode)

	operator fast_isa (|&ClassData| x, |bool|)
		cpp_part FastIsa
		return (self) and (.Class == x)

	operator as (|&ClassData| x, |object|)
		cpp_name JB_Object_As
		if self isa x
			return self
		if self
			return .TypeFailed(x, nil)
		
	operator fast_as (|&ClassData| x, |object|)
		cpp_part FastAs
		if self
			if .class == x
				return self
			return .TypeFailed(x, nil)
	
	helper TypeFailed (|&ClassData| Cls, |message?| where,  |object|)
		|| name = .Class.name.str
		error (where, name + " (object) is not a: " + cls.name )
		platform.log "TypeFail"
		platform.log app.stacktrace
		debugger

	api DebugPrint  // more for use in XCode, than anything else.
		cpp_name jdb
		visible true
		if self
			print string.Wrap(.class.name)
			print ": "
		printline .render

		
	helper SyntaxExpect ( |string| Error )
		visible
		cpp_part Fail
		
		if self isa message
			errorreceiver.NewError( self, Error )
		  else
			errorreceiver.NewError( Error )


	helper string.SyntaxWarn
		cpp_part Warn
		errorreceiver.Newwarning( self )
	
	
	function MemorySanity
		|| r = .refcount
		if r < 0 or r > 100000 // sigh
		
	module
		function DebugAllMemory (assigns:|bool|)
			cpp_wrapper JB_DebugAllMemory
		function TotalSanity (|bool| Force=true, |bool|)
			cpp_wrapper JB_TotalSanity
			// something like that?


struct ClassData
	linkage
		wrapper
		cpp_class JB_Class
	
	|?&ClassData|			Parent
	|?&ClassData|			NextClass
	|cstring|				Name
	|&byte|					SaveInfo
	|bool|					HasSubclasses
	|int|					Size
	|&&nil|					SpdTable
	
	function Init (|&MemoryWorld| World, |int| Size)
		// don't call this... unless you create one yourself.
		cpp_wrapper JB_Class_Init
	
	function AllocZeroed (|Object|)
		cpp_Wrapper JB_Class_AllocZeroed

	function CreateLayer (|Object| obj, |MemoryLayer!|)
		cpp_Wrapper JB_Mem_CreateLayer

	function CreateUseLayer (|Object| obj, |object| obj2, |MemoryLayer!|)
		rz = .createlayer(obj)
		rz.use
		rz.obj2 = obj2

	function Layer (|MemoryLayer|)
		cpp_Wrapper JB_Class_Layer

	function DefaultLayer (|MemoryLayer|)
		cpp_Wrapper JB_Class_DefaultLayer

	function Restore
		.DefaultLayer.Use
		
	module 
		helper First (|&classdata|)
			cpp_wrapper JB_AllClasses
		
		helper New (|cstring| Name, |int| Size, |?&ClassData| Parent, |&ClassData|)
			cpp_wrapper JBClassNew
	
	iterator
		|| curr = self
		while (curr)
			yield curr
			curr = curr.nextclass


function DebugAt (|int| i=1)
	cpp_nothing JB_DoAt


cpp_nothing JB_SetRef				(|Object?| A,			|Object?| B)
cpp_nothing JB_Incr					(|Object?| Obj)
cpp_nothing JB_FreeIfDead			(|Object?| Obj,			|&nil|)
cpp_nothing JB_SafeDecr 			(|Object?| Obj,			|Object?|)
cpp_nothing JB_Decr					(|Object?| Obj)
cpp_nothing JB_Clear				(|Object?| Obj)
cpp_nothing JB_DecrMulti			(|Object| Obj,			|int| n)
cpp_nothing JB_Ternary				(|Object| Obj,			|int|) // weird, only 1 param?
cpp_nothing JB_Swap					(|Object| A,			|Object| B)
cpp_wrapper JB_Delete				(|object| Obj)
cpp_wrapper JB_Str3					(|Object| Data,			|int| N, |string|)
cpp_nothing JB_New					(|&ClassData|  Class,	|Object|)
cpp_nothing JB_NewClass				(|&ClassData|  Class,	|Object|)
cpp_nothing JB_LayerNew				(|MemoryLayer| L,		|&ClassData| Class, |Object|)
cpp_nothing JB_LayerNewClass		(|MemoryLayer| L,		|&ClassData| Class, |Object|)



/// debugging
prototype	fpDestructor		(|object| self)



struct MemoryWorld
	linkage
		wrapper
		cpp_class JB_MemoryWorld

	|&Byte|		 	Name
	|Byte|			SuperSize
	|Byte|			BlockSize
	|Byte|			ShadowSize
	|Byte|			Alignment



class MemoryLayer
	linkage
		wrapper
		cpp_class JB_MemoryLayer
		cpp_part  Mem

	|Object|		Obj
	|Object|		Obj2
	|uint64|		Num3
	
	constructor (|&ClassData| Cls)
		cpp_wrapper JB_Mem_Constructor

	function LayerClass (|&ClassData|)
		disabled "unused?"

	function Use
		cpp_wrapper JB_Mem_Use
	
//	syntax Using (|memorylayer|) // need the default for this class... sigh
		




