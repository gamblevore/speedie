
/*
	Jeebox internals. By Theodore H. Smith...
*/


class FastString {
	linkage
		wrapper
		cpp_part FS

// Fast appends and tools for building data formats
// add bool append? it should be safe now?

	|int|			Length
	|int|			Reserved
	|&Byte|			ResultPtr
	|uint16|		Indent
	|Byte|			IndentChar
//	|int|			WrittenLength // invisible
	|bool|			Failed
	|int|			NoFlush
	
/////

	constructor							{ cpp_wrapper JB_FS_Constructor }
	constructor (|int|size)				{ cpp_wrapper JB_FS_ConstructorSize }
	destructor							{ cpp_wrapper JB_FS_Destructor }

	setter Length (|int|)				{ cpp_wrapper JB_FS_LengthSet }
	
	function AppendLower (|string| data)
		cpp_wrapper JB_FS_AppendLower
	function FreeSize (|int|):	cpp_wrapper JB_FS_FreeSize
	function FreeSize (assigns:|int|, |&byte|) {cpp_wrapper JB_FS_NeedSpare}

	function StreamLength (|int|)
		cpp_wrapper JB_FS_StreamLength

	function Size (|int|)				{ cpp_wrapper JB_FS_Size }
	function Size (assigns:|int|)		{ cpp_wrapper JB_FS_SizeSet }
	function AppendMultiReplace (|string|s, |dictionary of string| m, |ErrorReceiver| Rec=stderr) { cpp_wrapper JB_FS_AppendMultiReplace }
		
	function AppendHex (|int64| Num, |int|RoundTo=2)
		cpp_wrapper JB_FS_AppendHex
	
	function AppendHexData (|string| Data)
		cpp_part AppendHexStr 
		if data
			.appendhexdata(Data.addr, data.length)
	
	function AppendHexData (|&byte| Data, |int| N, |int| Spaces=0)
		cpp_wrapper JB_FS_AppendHexData

	function AppendSection (|String| Data, |int| Start, |int| Length)
		cpp_wrapper JB_FS_AppendSection

	function AppendHex3 (|int|Num)
		cpp_wrapper JB_FS_AppendHex3
	
	function AppendUTF8 (|codepoint| Num)	{ cpp_wrapper JB_FS_AppendUTF8Char }
	function IndentLine						{ cpp_wrapper JB_FS_LineIndent }
	function AppendIndent					{ cpp_wrapper JB_FS_AppendIndent }
	function Flush	(|bool|)				{ cpp_wrapper JB_FS_Flush }
	function Remove (|Byte| b)				{ cpp_wrapper JB_FS_RemoveByte }
	function GetResult (|string|)
		nil self
		cpp_wrapper JB_FS_GetResult
	function GetResult (|FastString?| other, |string|)
		nil self
		cpp_wrapper JB_FS_SmartResult
	function Copy (|string|)
		cpp_wrapper JB_FS_Copy

	function Noob (|uint64| n)
		if n < 224
			self <~ n|byte|
		  else
			self <~ (224+(n & 31))|byte|
			.hInt(n>>5)
		
	function hInt (|uint64| n)
		while
			if n <= 127
				self <~ (n)|byte|
				exit
			self <~ (n ||| 128)|byte|
			n >>= 7
			
		
	function lInt (|uint64| n)
		while n
			self <~ N|byte|
			n >>= 8

	function EncodeLength (|uint64| N)  // maybe hInt is better? like how many speedie-strings are over 128 anyhow?
		|| lim = 256-8					// you get 14 bits instead of 11 in two bytes.
		|| L2 = N|byte|					// remove these two funcs? (one below)
		if N >= lim
			l2 = lim + n.lelength
		self <~ L2|byte|
		if N >= lim
			.lint(N)

	function uint64.LELength (|int|)    // could remove this also
		pragma inline
		return (self|int|.log2 max 0) >> 3
		
	render
		fs <~ self

	syntax Append (|Byte| data, |int|count)
		cpp_wrapper JB_FS_AppendMultiByte

	syntax Append (|string| data, |int|count)
		cpp_part AppendMultiStr
		|| needed = data.Length*count
		if .FreeSize < needed
			.FreeSize = needed
		for count
			self <~ data

	function AppendQuotedEscape (|string| s)
		self <~ '"'
		.appendescape(s)
		self <~ '"'
	
	function AppendEscape (|string| s)
		.AppendMultiReplace( s, jeebox.EscapeStr )


	module
		function Use (|object| other, |FastString|)
			if other isa FastString
				return other
			if other isa string
				return other.out
			if other
				error (other, "Faststring can't use this object.")
		
		
		function New (|FastString?| other, |FastString|)
			cpp_wrapper JB_FS__FastNew
		
		function New (|file| dest, |bool| PrintLineOnFlush, |FastString|)
			cpp_wrapper JB_FS__FileFlush
		
		function New (|&byte| b, |int| n, |FastString|)
			cpp_part NewDirect
			rz = faststring()
			rz.ResultPtr = b
			rz.Reserved = n


	syntax Access (|int| off, |Byte|)
		cpp_wrapper JB_FS_Byte
	
	syntax Access (|int| off, assigns:|Byte|)
		cpp_wrapper JB_FS_ByteSet
	
	function Last (|int| off=0, |int|)
		cpp_wrapper JB_FS_Last
	
	syntax Append (|string?| data)
		cpp_wrapper JB_FS_AppendString
	
	syntax Append (|FastString| fs)
		cpp_part AppendFastString
		.AppendMemory(fs.resultptr, fs.length)
		
	syntax Append (|Byte| data)
		cpp_wrapper JB_FS_AppendByte

	function AppendIntegerAsText (|int64| data, |int|RoundTo=1)
		cpp_wrapper JB_FS_AppendIntegerAsText

	function AppendInteger (|int64| data, |int|RoundTo=1)
		disabled "appendintegerastext or appendint?"
	
	function AppendInt (|int| data)
		cpp_Wrapper JB_FS_AppendInteger
			
	function AppendShort (|uint16| data)
		cpp_wrapper JB_FS_AppendShort

	syntax Append (|int64| data)
		cpp_part AppendInt64
		.AppendIntegerAsText(data, 1)
	
	syntax Append (|uint| data)
		cpp_part AppendUint
		.AppendIntegerAsText(data, 1)

	syntax Append (|int| data)
		cpp_part AppendInt32
		.AppendIntegerAsText(data, 1)
		
	function AppendFile (|File| f, |bool|)
		if f.opened
			return .appendpipe(f.descriptor, 0)
		
	helper AppendPipe (|int|fd, |int| mode, |bool|)
		cpp_wrapper JB_FS_AppendPipe // (FastString* self, int fd, int Mode)
	
	syntax cast (|string|)
		return .getresult

	
	syntax Append (|cstring| Str)
		cpp_wrapper JB_FS_AppendCString

	
	function Field (|string| name, |string| data)
		cpp_part AppendInfo
		if data
			.fieldstart(name)
			self <~ '"'
			.appendescape(data)
			self <~ '"'
	
	function PadTo (|int|n, |byte| b=' ')
		self <~ (b, n-.length)
	
	function FieldStart (|string| name)
		.IndentLine
		if name
			self <~ name
			self <~ ' '


	function FieldEnter (|string| name)
		.fieldstart(name)
		.indent++

	function FieldFloat (|string| name, |f64| data)
		cpp_part AppendInfoFloat
		if data
			.fieldstart(name)
			self <~ data

	function Field (|string| name, |int64| data)
		cpp_part AppendInfoNum
		if data
			.fieldstart(name)
			self <~ data

	function AppendMemory (|&byte| Str, |uint| N)
		cpp_wrapper JB_FS_AppendMem_
	

	function AppendDurr (|Date| D)
		cpp_wrapper JB_FS_AppendDurr

	function AppendLocalTime (|Date| D)
		cpp_wrapper JB_FS_AppendLocalTime


	syntax Append (|f64| D)
		cpp_wrapper JB_FS_AppendDoubleAsText0

	
	function AppendDouble (|f64| D, |int| dp=1, |bool| CanExp=false)
		cpp_wrapper JB_FS_AppendDoubleAsText
	
	
	syntax Append (|Float| F)
		cpp_name JB_FS_AppendFloatAsText
		self <~ F|f64|

	
	function Mark (|int|)
		cpp_wrapper
	
	function Grew (|int| m, |bool|)
		cpp_wrapper

	macro SyntaxAppend
		_1.render(_0)
		

	syntax Compare (|int| n, |bool|Aware, |int|)
		return .streamlength - n
}


extend FastString
	function File (|File|)
		cpp_wrapper JB_FS_File
	
	function File (assigns:|File|)
		cpp_wrapper JB_FS_FileSet

	// use syntax-append instead? "fs <~ (doubles, n)"
	function AppendFloats (|float[1]| Data, |int| N)
		self <~ '['
		for (i in N)
			self <~ ", "
			start
			self <~ Data[i]
		self <~ ']'

	function AppendDoubles (|f64[1]| Data, |int| N)
		self <~ '['
		for (i in N)
			self <~ ", "
			start
			self <~ Data[i]
		self <~ ']'

	function AppendInts (|int[1]| Data, |int| N)
		self <~ '['
		for (i in N)
			self <~ ", "
			start
			self <~ Data[i]
		self <~ ']'

	function AppendInt64s (|int64[1]| Data, |int| N)
		self <~ '['
		for (i in N)
			self <~ ", "
			start
			self <~ Data[i]
		self <~ ']'


