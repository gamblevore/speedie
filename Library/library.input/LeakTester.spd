
/*
	Jeebox internals. By Theodore H. Smith...
*/


class LeakTester
	linkage
		cpp_part		Lk

	|int|		MemUsedStart
	|string|	Name

	constructor (|string| name)
		.MemUsedStart = app.objmemory
		.Name = name
		app.LeakMarkMemory
	
	helper FinalTest
		.Test2
		.MemUsedStart = nil
		app.LeakUnMarkMemory
	
	helper Test2
		require .MemUsedStart
		|int| NewAmount = app.objmemory
		|| Diff = NewAmount - .MemUsedStart
		if Diff > 0
			debugger
			"Leaked $Diff bytes in ${.Name}. New Count $NewAmount."

	
	helper SyntaxUsingComplete (|object| idk=nil)
		.finaltest

	
	helper SyntaxUsing (|LeakTester|)
		return self

	
	module
		helper SyntaxUsing (|LeakTester|)
			return leaktester.new("")
		
		helper TestClasses
			


helper @memory.CollectLeaks_ (|object| self, |[]|)
	JB_FindLeakedObject(self, rz)


helper @memory.PrintLeaks_ (|object| self)
	description "Finds the object that refers to this leaked object."
	visible
	cpp_name jbl
	for bad in memory.CollectLeaks_(self)
		bad.debugprint
		debugger
	

	
function object.FindReferences
	|| r = []
	JB_FindLeakedObject(self, r)
	printline r
	debugger


function object.MarkRefCount (|bool| Active=true)
	cpp_wrapper JB_MarkRefCount


function object.RefCountMark (|int|)
	|| S = self|&int|
	return S[] & 1



struct SpeedTester
	|Date|				Start
	|string|			Name
		
	helper SyntaxUsingComplete (|object| idk=nil)
		|| µs = date() - .start
		SpeedTester.log( .Name + ": " + µs.renderdurr + "s" )
			
	module
		function Log (|string| s)
			printline s


function string.SyntaxUsing (|SpeedTester|)
	SpeedTester.log( "Starting: " + self )
	rz.name = self
	rz.start = date()


cpp_wrapper JB_FindLeakedObject 	(|object| Obj,			|array| dest)
cpp_wrapper JB_Mem_ClassLeakCounter ()
