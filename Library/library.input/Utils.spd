
// allow the short sort of one-liners that other languages have...
// good for demos and language-tests

function dictionary.Sort (|SorterComparer| fn, |int| count, |[...]|)
	rz = .values // a more efficient sorter could extract only needed
	rz.sort(fn)
	rz.Length = count


function string.Sort (|byte| sep = '\n', |string|)
	|| x = .split(sep)
	x.Sort(&String.Sorter)
	return x.Join(string.byte(sep))


helper MessagePositionSorter (SorterComparer of message)
	return .position < b.position


role MessageTable (Dictionary)
	contains Message
	syntax Access (|string| Key, assigns:||)
		super.valuelower(key) = value
	syntax Access (|string| Key, ||)
		return super.valuelower(key)
	syntax Access (|message| Key, assigns:||)
		cpp_part GetMsg
		super.valuelower(key.name) = value
	syntax Access (|message| Key, ||)
		cpp_part SetMsg
		return super.valuelower(key.name)
	syntax append (|message| Msg)
		cpp_part AppendMsg
		super.valuelower(msg.name) = msg
	


function message.List (|[Message]|)
	opt norefcounts
	for s in self
		rz <~ s


	
function message.Dict (|bool| DoLower=false, |bool| DoCount=false,   |dictionary of message|)
	// cheese.spd uses this
	opt norefcounts
	rz = Dictionary()
	|| i = 0
	for s in self
		if DoLower
			rz.Valuelower(s.name) = s
		  else
			rz[s.name] = s
		if DoCount
			s.Position = i++


function @file.Dictionary (|file|)
	disabled "Use .words"

	
function @file.Words (|file|)
	return "/usr/share/dict/words".file

		
function string.Dict (|byte| sep='\n', |dictionary of string|)
	if self
		rz = Dictionary()
		if self
			for l in StringFields( self, sep )
				rz[l] = "true"


function Message.FindNotInserted (|message|)
	opt norefcounts
	nil self
	for c.up in self
		if c.position > -1
			return c
	return self


function message.IsTypeOfDecl (|bool|)
	return .WithinType(1)


function message.WithinType (|int| Allowed=3, |bool|)
	opt norefcounts
	|| p = .parent
	|| msg = self
	while p and p != @arg
		if (allowed&1) and (p == @decl)
			return msg.isfirst
		if (allowed&2) and (p == @type)
			return msg.islast
		msg = p
		p = p.parent	


function Message.At (|int| pos, |message|)
	return .FindTightest(pos, false, false)


helper message.FindTightest (|int| pos, |bool| named=false, |bool| SamePosition=false,  |message|) // findpos, findat
	opt norefcounts
	nil checker
	|| size = int.max
	for ch.flat in self
		|| r = ch.rangelength
		if !r
			0
		  elseif (ch.contains(pos, true)) and (!named or ch.name or (ch == @dot or @sdot))
			if sameposition and ch.position != pos
				0// fail
			
			  elseif (r < size) or ((rz!=nil) and (pos == rz.position and pos == ch.after)) // smallest
				rz = ch
				size = r


function message.LOC (|ivec2|)
	description "Calculate Lines of content" 
	opt norefcounts
	for s.flat in self
		++(rz[1])
		|| p = s.parent
			|| pf = p.func
			rz[0] += (pf == @arg) or (pf == @tmp  and  s == @tmp)


struct StringDigitIterator
	description `Provides integers from a string. For example the string "123" will provide (1, 2, 3)`
	|string| S
	|int|    i
	
	iterator
		while .i < .s.length
			yield (.s[.i]|int| - '0') (.i)
			++.i


function String.Digits (|StringDigitIterator|)
	rz.S = self	


function int.Digits (|StringDigitIterator|)
	return .Render.digits


function int.Msg (|message|)
	return @num + .render

function string.Msg (|message|)
	return @str + self
	
function int64.Msg (|message|)
	return @num + .Render

function bool.Msg (|message|)
	return @thg + .string


datatype HumanDate (date)
	render
		fs.AppendLocalTime(self)


function Faststring.syntaxappend (|humandate| d)
	.appendlocaltime(d)


function message.date (|humanDate|)
	return .int


insertion
	parse (â€“digest _0).ParseJbin! // could possibly compress large files too?


// seems not worth it
// we'd want a sum(_0, _1*2) macro!
// we'd need to be able to pass types
//insertion
//	sum	({
//		|| Src = _0
//		|| V = Src.ZeroValue
//		for (c in Src)
//			V += c
//		rejoin (V)
//	})


datatype FailableInt (int) // useful when you want most numbers, even negatives, and zero but still want AN error code
	constants
		|int| 
		Fail = 0x8000_0000
	default FailableInt.fail
	false   FailableInt.fail
	syntax cast (|bool|)
		return self != fail|int|

