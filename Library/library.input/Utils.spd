
// allow the short sort of one-liners that other languages have...
// good for demos and language-tests

function dictionary.Sort (|SorterComparer| fn, |int| count, |[...]|)
	rz = .values // a more efficient sorter could extract only needed
	rz.sort(fn)
	rz.Length = count
	
	
function message.AllNames (|[string]|)
	opt norefcounts
	for s in self
		|| i = s.GoodName
		if i != string.error
			rz <~ i


function message.List (|[Message]|)
	opt norefcounts
	for s in self
		rz <~ s


 // we want something that looks like it could have a name
function message.GoodName (|bool| NeedName=false, |string|)
	|| name = .GoodNamesub
		return name
	if name.isok and needname
		error (self, "No name found")
		return string.Error
	return name

function message.smartname (assigns:|string|)
	if .name != value
		.name = value // save memory for often generated strings
	
	
helper message.GoodNameSub (|bool| NeedName=false, |string|)
	opt norefcounts
	|| f = .func
	if .IsString or f == @thg or @num
		return .name
	if f == @tmp
		|| c = .first
		if !c
			return .name
	error (self, "Make sure this item is a string or a proper-name.")
	return string.Error


function ivec4.List (|message|)
	rz = @list.msg
	for i in 4
		rz <~ self[i]

function message.Dict (|bool| DoCount=false, |dictionary of message|)
	opt norefcounts
	rz = Dictionary()
	|| i = 0
	for s in self
		rz[s.name] = s
		if DoCount
			s.Position = i++

function @file.Dictionary (|file|)
	disabled "Use .words"
	
function @file.Words (|file|)
	return "/usr/share/dict/words".file
		
function string.Dict (|byte| sep='\n', |!dictionary|)
	rz = Dictionary()
	if self
		for l in StringFields( self, sep )
			rz[l] = "x"

function string.Sort (|byte| sep = '\n', |string|)
	|| x = .split(sep)
	x.Sort(&String.Sorter)
	return x.Join(string.byte(sep))


function Message.FindNotInserted (|message|)
	opt norefcounts
	nil self
	for c.up in self
		if c.position > -1
			return c
	return self


helper message.FindTightest (|int| pos, |bool| named=false, |bool| SamePosition=false,  |message|) // findpos, findat
	opt norefcounts
	nil checker
	|| size = int.max
	for ch.flat in self
		|| r = ch.rangelength
		if !r
			0
		  elseif (ch.contains(pos, true)) and (!named or ch.name or (ch == @dot or @sdot))
			if sameposition and ch.position != pos
				0// fail
			
			  elseif (r < size) or ((rz!=nil) and (pos == rz.position and pos == ch.after)) // smallest
				rz = ch
				size = r


function message.LOC (|ivec2|)
	description "Calculate Lines of content" 
	opt norefcounts
	for s.flat in self
		rz[1] ++
		|| p = s.parent
			|| pf = p.func
			rz[0] += (pf == @arg) or (pf == @tmp  and  s == @tmp)


struct StringDigitIterator
	|string| S
	|int|    i
	
	iterator
		while .i < .s.length
			yield (.s[.i]|int| - '0') (.i)
			.i++
	
	function ZeroValue (|int64|)


function String.Digits (|StringDigitIterator|)
	rz.S = self	


function int.Digits (|StringDigitIterator|)
	return .Render.digits


function int.Msg (|message|)
	return @num + .render

function string.Msg (|message|)
	return @str + self
	
function int64.Msg (|message|)
	return @num + .Render

function bool.Msg (|message|)
	return @thg + .Render


datatype HumanDate (date)
	render
		fs.AppendLocalTime(self)
		
function message.date (|humanDate|)
	return .int


insertion
	parse (â€“digest _0).ParseJbin!


// seems not worth it
// we'd want a sum(_0, _1*2) macro!
// we'd need to be able to pass types
//insertion
//	sum	({
//		|| Src = _0
//		|| V = Src.ZeroValue
//		for (c in Src)
//			V += c
//		rejoin (V)
//	})

