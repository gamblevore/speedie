
// allow the short sort of one-liners that other languages have...
// good for demos and language-tests

function dictionary.sort (|SorterComparer| fn, |int| count, |[...]|)
	|| tmp = .values // a more efficient sorter could extract only needed
	tmp.sort(fn)
	for i in count
		rz <~ tmp[i]

function message.AllNames (|[string]|)
	opt norefcounts
	for s in self
		rz <~ s.name

function ivec4.list (|message|)
	rz = @list.msg
	for i in 4
		rz <~ self[i]

function message.Dict (|dictionary of message|)
	opt norefcounts
	rz = Dictionary()
	for s in self
		rz[s.name] = s

function @file.Dictionary (|file|)
	disabled "Use .words"
	
function @file.Words (|file|)
	return "/usr/share/dict/words".file
		
function string.Dict (|byte|sep='\n', |dictionary|)
	rz = Dictionary()
	if self
		for l in StringFields( self, sep )
			rz[l] = "x"

function string.Sort (|byte| sep = '\n', |string|)
	|| x = .split(sep)
	x.Sort(StringSorter)
	return Join2(x, string.byte(sep))


