

class Task (list)
	// size 128
	// it's size is always 128. Perhaps a bad idea?
	// i could try to make it a more normal class?
	// the idea is to allow all sorts of subclasss
	// without fragmenting the allocation.
	// but 128 per task could also be a waste of space?
	// also limits the maximum amount of stuff you can put in one.
	linkage
		visible
		cpp_class JB_Task

	|taskstate| 		_State
	|int|				_Object
	|&nil|				_func
	
	constructor
		cpp_part Empty
		._Func = &(message.dummy)
		._Object = 0
	
	constructor (|uint| Obj, |&nil| func)
		._Object = Obj
		._Func = func
		
	destructor
		visible
		|| curr = self|&object|
		|| o = ._object
		while o
			|| i = o.lowestbit
			o &= ~i
			i = i|int|.log2
			jb_decr( curr[i] )          // noice
			
	syntax is (|taskstate| s, |bool|) 
		return ._state & s
			
	syntax is (|taskstate| s, assigns:|bool|)
		if value
			._state |= s
		  else
			._state &= ~s


datatype TaskState (byte)
	flags
		|TaskState| 
		Started
		Paused
		WaitsTillStart
		HadErrors
		Animation
		Successful
		Finished
	
	syntax is (|TaskState| t, |bool|)
		return self & t

