

class DataObject 
	linkage
		cpp_part Wrap
		cpp_class DTWrap
	contains int64
	constants
		kNothing = 0
		kFree    = 1
		kDelete  = 2
	
	|DataTypeCode|		DataType
	|byte|				DeathAction
	|int64|				PrivValue
	
	destructor
		if .deathaction == DataObject.kfree
			Memory.free(.privvalue|&nil|)

	
	constructor (|int64| v)
		cpp_part ConstructorInt
		.datatype = datatypecode.s64
		.PrivValue = v

	
	constructor (|bool| b)  // could be an issue as most things convert to a bool...
		cpp_part ConstructorBool
		.datatype = datatypecode.bool
		.PrivValue = b|int|

	
	constructor (|?&nil| p)
		cpp_part ConstructorVoidPtr
		.datatype = datatypecode.unusedtype
		.PrivValue = p|int64|


	syntax access (||) // for floats... perhaps use this?    macro first: .privvalue|...(samebits)|
		return .privvalue

	
	function Value (|int64|)
		if (self) {return .privvalue}
	
	
	function FloatValue (|f64|)
		if (self) {return .privvalue.asfloat}


	function Value (assigns:|int64|)
		disabled "This property is immutable"


	render
		if .datatype.isfloat
			fs <~ .FloatValue
		  elseif .datatype == datatypecode.unusedtype
			fs <~ "0x"
			fs.appendhex(.privvalue)
		  elseif .datatype == datatypecode.bool	
			fs <~ ("true", "false")(.privvalue)
		  else
			fs <~ .PrivValue

	module
		function NewFloat (|f64| v, |Dataobject|)
			rz = DataObject(true) 
			rz.datatype = datatypecode.f64
			rz.PrivValue = v.AsInt


