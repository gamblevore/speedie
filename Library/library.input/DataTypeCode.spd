

datatype DataTypeCode (uint16)
	linkage
		cpp_part TC

	default 0	
	constants Types
		|DataTypeCode|
	// 8 = "is a number" bit...
		unsigned = 64
		byte    = 0 + 0  + 64 + 0   + 8
		char	= 0 + 0  + 0  + 0   + 8
		Byte2   = 1 + 0  + 64 + 0   + 8
		Byte3   = 2 + 0  + 64 + 0   + 8
		Byte4   = 3 + 0  + 64 + 0   + 8
		SByte   = 0 + 0  + 0  + 0   + 8
		SByte2  = 1 + 0  + 0  + 0   + 8
		SByte3  = 2 + 0  + 0  + 0   + 8
		SByte4  = 3 + 0  + 0  + 0   + 8
		uint16  = 0 + 16 + 64 + 0   + 8
		int16   = 0 + 16 + 0  + 0   + 8
		s16x2   = 1 + 16 + 0  + 0   + 8
		s16x3   = 2 + 16 + 0  + 0   + 8
		s16x4   = 3 + 16 + 0  + 0   + 8
		int64   = 0 + 48 + 0  + 0   + 8
		uint64  = 0 + 48 + 64 + 0   + 8
		iVec2   = 1 + 32 + 0  + 0   + 8
		iVec3   = 2 + 32 + 0  + 0   + 8
		iVec4   = 3 + 32 + 0  + 0   + 8
		Float16 = 0 + 16 + 0  + 128 + 8
		Float   = 0 + 32 + 0  + 128 + 8
		Double  = 0 + 48 + 0  + 128 + 8
		Vec2	= 1 + 32 + 0  + 128 + 8
		Vec3    = 2 + 32 + 0  + 128 + 8		// vec3 sucks kinda
		Vec4	= 3 + 32 + 0  + 128 + 8
											// Mat4	// make it a struct? mat3 also?
		Int		= 0 + 32 + 0  + 0   + 8
		UInt	= 0 + 32 + 64 + 0   + 8
		bool	= 256
		u32	 = uint

		HFloat = Float16
		s64	 = int64
		u64	 = uint64
		f64	 = double
		f16	 = hfloat
		int8 = char
		uint8 = byte
		u16	 = uint16
		s16	 = int16
		
		_voidptr = 112 // unsigned 64-bit non-numeric value.
		cstring = 112 // same
		Failed = 512
		PossibleBits = 1023
		Numeric = 8
	
	
	function DebugPrint
		printline .Render
	
	
	render
		self = self&PossibleBits
		if !.IsNumeric
			if self is bool
				fs <~ "bool"
			  else
				fs <~ "non-numeric"
		  elseif self == byte
			fs <~ "byte"
		  else
			if !.IsSigned
				fs <~ "u"
			|| b = .ByteCount
			if .IsInt
				if b == 1
					fs <~ "char"
				  elseif b == 2
					fs <~ "short"
				  elseif b == 4
					fs <~ "int"
				  elseif b == 8
					fs <~ "int64"
			  else
				fs <~ "float"
				if b != 4
					fs <~ b*8
					
		
	function Basictype (|DataTypeCode|) // compares floatness, vector-size, and "isnumericness"
		return self & (128 + 8 + 3)		// ignores bit-size and signedness.
	
	function OK (|bool|)
		return !(self&failed)
	
	function Has (|datatypecode| M, |bool|)
		opt inline
		return self&PossibleBits&M
	
		
	syntax is (|datatypecode| M, |bool|)
		opt inline
		return self&PossibleBits == M&PossibleBits
	
	function Floatness (|int|)
		if .isint
			return 0
		return .bytecount // makes sense

	function IsFloat (|bool|) // turn this into floatness?
		return (self >> 7) & 1
	
	function IsPointer (|bool|)
		return !.isnumeric and (self isnt bool) // for now
		
	function IsIntReg (|bool|)
		if .IsPointer // pointers, bascially, are ints
			return true
		if .isint and .VecCount <= 1
			return true

	
	function IsInt (|bool|)
		return !.IsFloat
	
	function IsSigned (|bool|)
		return !(self & unsigned)
	
	function SetSigned (|bool| HasSign, |DataTypeCode|)
		if hasSign
			return self  &~ unsigned
		return self ||| unsigned
	
	function IsNumeric (|bool|)
		return self & numeric
	
	function NumericCount (|int|)
		if (self & numeric)
			return .VecCount
	
	function ItemBitCount (|int|)
		return 8 << ._shift
	
	function _Shift (|int|)
		return (self >> 4) & 3

	function ByteCount (|int|)
		return .VecCount << ._Shift

	function BitCount (|int|)
		// not sure I actually WANT VecCount for most things?
		// we don't have boolvecs anyhow :)
		if self is bool
			return 1
		return (.VecCount << ._Shift) << 3

	function VecCount (assigns:|int|, |datatypecode|)
		return (self &~ 3) ||| (Value-1)
	
	function VecCount (|int|)
		return (self & 0x03) + 1
	
	function SameBasicType (|DataTypeCode| b, |bool|)
		return (.isfloat == b.isfloat) // this will do for now.
	
