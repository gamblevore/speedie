
/*
	Jeebox internals. By Theodore H. Smith...
*/


datatype Date (int64)
	// one second is 64K (64*1024)
//	syntax cast (|bool|)
//		return self|bool|

	syntax cast (|float|)
		// are these bad? remove them??
		cpp_Part CastFloat
		return .Float
	
	syntax cast (|Float64|)
		cpp_Part CastDouble
		return .Float64
	
	
	constants
		Highest = 0x7FFFffffFFFFffff_
		kOneStep = 0.000015258789 // 1.0 / 64.0K
		kSecondsPerDay = 86400
		kSecondsPerWeek = 604800
		kSecondsPerMonthApprox = 2628000
	
	
	syntax Compare (|float| Other, |bool|Aware, |int|)
		|| oof = other.date
		if (self > oof)
			return 1
		if (self < oof)
			return -1
	
	function WholeSeconds (|int64|) // needs 48 bits!
		return self >> 16
	
//	function Rate (|Float64|) // per what, though? per-second is common, but if we are talking about per-day its another thing.
//		return 1.0 / .Seconds 
	
	function Float (|float|)
		return self|float| * kOneStep
	
	function Float64 (|Float64|)
		return self|Float64| * kOneStep
	
	function ReportAgo (|string|)
		|| s = .Float64
		|| unit = "s"
		if s < 0.01
			s *= 1000.0
			unit = "ms"
		return s.Render + unit
		
	function Ago (|date|)
		if self
			return now() - self
	
	render LocalTime
		fs.AppendLocalTime(self)
	
	render RenderDurr
		fs.AppendDurr(self)

	render RenderInt
		fs.appendintegerastext(self)
	
	render  // hmmm... i guess this is just for data-formats.
		disabled "Do you mean .LocalTime or .RenderInt"

		
	function Fired (|bool|)
		if self != 0
			return self < date()
	
	function DayOfWeek (|int|)
		return .Days mod 7
	
	function Days (|int64|)
		return (.wholeSeconds / kSecondsPerDay)
	
	function Minutes (|int64|) // needs 48 bits!
		return .wholeSeconds / 60

	function MonthsApprox (|int64|)
		return (.wholeSeconds / kSecondsPerMonthApprox)

	function WeekOfYear (|int|)
		return .Weeks mod 52
	
	function TimeID (|uint64|)
		cpp_wrapper

	function Weeks (|int64|)
		return (.wholeSeconds / kSecondsPerWeek)

	function int64.ToSeconds (|date|)
		return self << 16
	
	iterator
		|| StartDate = date.now()
		|| EndDate = StartDate + self
		while
			|| Currtime = date.now
			if Currtime >= EndDate
				exit
			yield ((CurrTime - StartDate).float) (CurrTime-StartDate) // why a float at all?

	module
		function TimeID (|uint64|)
			return .now.timeID
			
		function Ticks (|int64|)
			return (.now>>10) //64KB-->64

		function Now (|Date|)
			cpp_wrapper JB_Date__Now

		function New (|Date|)
			cpp_part New0
			return now()

		function TimeStamp  (|uint64|)
			cpp_Wrapper RDTSC
			
		function Hash  (|uint64|)
			return .timestamp.hash


