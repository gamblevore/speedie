
/*
	Jeebox internals. By Theodore H. Smith...
*/


datatype Date (int64)
	// one second is 64K (64*1024)
//	syntax cast (|bool|)
//		return self|bool|

	constants
		Highest = 0x7FFFffffFFFFffff_
		kOneStep = 0.000015258789 // 1.0 / 64.0K
		kSecondsPerDay = 86400
		kSecondsPerWeek = 604800
		kSecondsPerMonthApprox = 2628000
	
//	syntax cast (|float|)
//		// are these bad? remove them??
//		cpp_Part CastFloat
//		return .Float
	
	syntax cast (|Float64|)
		cpp_Part CastDouble
		return .Float64
	
	
	function Seconds (|float|)
		disabled "Use .float or .float64"
	
	function Float (|float|)
		disabled "This loses seconds precision"
		return .float64|float| // better. Or else we lose too much precision
	
	function Float64 (|Float64|)
		return self|Float64| * kOneStep
	
	
	syntax Compare (|float| Other, |bool|Aware, |int|)
		|| oof = other.date
		if (self > oof)
			return 1
		if (self < oof)
			return -1
	
	function WholeSeconds (|int64|) // needs 48 bits!
		return self >> 16
	
//	function Rate (|Float64|) // per what, though? per-second is common, but if we are talking about per-day its another thing.
//		return 1.0 / .Seconds 

	operator Minus (|date| D, |duration|)
		return self|int64| - D|int64|

	operator Mod (|duration| D, |duration|)
		return self|int64| mod D|int64|

	function ReportAgo (|string|)
		|| s = .Float64
		|| unit = "s"
		if s < 0.01
			s *= 1000.0
			unit = "ms"
		return s.Render + unit
		
	function Ago (|Duration|)
		if self
			return now() - self
	
	render LocalTime
		fs.AppendLocalTime(self)
	
	render RenderDurr
		fs.AppendDurr(self)

	render RenderInt
		fs.appendintegerastext(self)
	
	render  // hmmm... i guess this is just for data-formats.
		disabled "Do you mean .LocalTime or .RenderInt"

		
	function Fired (|bool|)
		if self != 0
			return self < date.now
	
	function DayOfWeek (|int|)
		return .Days mod 7
	
	function Days (|int64|)
		return (.wholeSeconds / date.kSecondsPerDay)
	
	function Minutes (|int64|) // needs 48 bits!
		return .wholeSeconds / 60

	function MonthsApprox (|int64|)
		return (.wholeSeconds / date.kSecondsPerMonthApprox)
	
	function WeekOfYear (|int|)
		return .Weeks mod 52
	
	function TimeID (|uint64|)
		cpp_wrapper

	function Weeks (|int64|)
		return (.wholeSeconds / kSecondsPerWeek)

	function int64.ToSeconds (|date|)
		return self << 16


	function Cycle (|duration| Length, |float|)
		description "Returns a number between 0 and 1. This number cycles back and forth in a sinusoidal fashion."
		opt min 3
		|| P = .loop(length)
		return (P.sin * 0.5) - 0.5


	function Loop (|duration| Length, |float|)
		description "Returns a number between 0 and 1. This number increases linearly, then resets"
		opt min 3
		return (self mod Length)|int| div Length

	
	iterator
		|| StartDate = date.now()
		|| EndDate = StartDate + self
		while
			|| Currtime = date.now
			if Currtime >= EndDate
				exit
			yield ((CurrTime - StartDate).float) (CurrTime-StartDate) // why a float at all?

	module
		function TimeID (|uint64|)
			return .now.timeID
			
		function Ticks (|int64|)
			return (.now>>10) //64KB-->64

		function Now (|Date|)
			cpp_wrapper JB_Date__Now

		function New (|Date|)
			disabled "Use .now"

		function TimeStamp  (|uint64|)
			cpp_Wrapper RDTSC
			
		function Hash  (|uint64|)
			return .timestamp.hash


datatype Duration (date)
	linkage
		cpp_class JB_Duration
	function Float (|float|)
		return .float64|float| // better. Or else we lose too much precision

	function WholeSeconds (|int64|) // needs 48 bits!
		return self >> 16
	
	syntax cast (|float|)
		// are these bad? remove them??
		cpp_Part CastFloat
		return .Float	