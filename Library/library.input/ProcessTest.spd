
 
module ProcessTest 
	linkage
		cpp_part ProT
	function Run
		||		Variant		= app.args[0].int-1 max 0
		|bool|	DyingChild  = Variant&1
		|bool|	DyingParent = Variant&2
		|bool|	TimeOut     = Variant&4
		|bool|	Slow        = Variant&8
		
		if app.hasipc
			using "child process"
				if DyingChild
					.ChildDieTest(timeout)
				  else
					.ChildTest(DyingParent, Slow)
		  else 
			using "parent process"
				if DyingParent 
					.ParentDieTest(timeout)
				  else
					.ParentTest(DyingChild, Slow)


	function ParentTest (|bool| ChildDying, |bool| Slow)
		|| chld = app.StartChild(app.rawargs)
		chld.canprint = ChildDying|int|
		for i in 1 to 10000
			chld <~ "\n\n\nhello " + i.render
			if slow
				app.sleep(2s)
			|| response = chld.get(5s)  #loop
			if slow or i isa 256: printline response.name
		chld.disconnect
		app.sleep(0.01s)


	function ChildTest (|bool| ParentDying, |bool| Slow)
		|| p = process.Parent
		p.canprint = ParentDying|int|
		while p.isopen
			|| ch = p.get(5s)  #loop
			if slow
				app.sleep(2s)
			p <~ ch.name.uppercase.zalgo


	function Process.DieOrTimeout (|bool| timeout)
		.self ("will timeout", "will die")(timeout)
		self <~ "glittery"
		if timeout
			app.sleep(10s)
		  else
			app.quit(-1)

		
	function ParentDieTest (|bool| timeout)
		|| chld = app.StartChild(app.rawargs)
		chld.canprint = 1
		chld.DieOrTimeout(timeout)
		(chld)


	function ChildDieTest (|bool| timeout)
		|| srv = process.Parent
		srv.canprint = 1
		srv.DieOrTimeout(timeout)
		(srv)

