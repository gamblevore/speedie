
/*
So what do we have? we basically write a chunk of data into a file, and it gets
compressed! Pretty simple! So we want the stringstream to be able to give us back chunks of data.
*/


struct FlowPart
	linkage:cpp_part FLP
	|FastBuff|				Buff
	|stringstream|			Read
	|faststring| 			Write
	
	function init (|string| path, |string| type, |bool|)
		|| sign = type * 2
		.write = path.AddExt(".flow."+type).out #require
		.read = path.AddExt(".expected."+type).in(sign)
		.write <~ sign
		return .buff.Alloc(1MB)

	function Flush
		.buff.tmpstr.CompressInto(.write, flowpart.stats)
		.buff.Curr = .buff.start
		.write.Flush
	
	function Test (|uint| Expected, |int| Bytes)
		opt norefcounts
		|| r = .read
			|| Found = r.uint(bytes)
			if Found != Expected
				"Flow Control differs here: ${app.StackTrace}"
				debugger 

	module
		|CompressionStats| 		Stats


class FlowControl
	linkage:cpp_part Flow
	|FlowPart| 			Bits
	|FlowPart| 			Loops
	|bool| 				OK
	|uint16| 			LoopCount
	
	constructor (|string| Path)
		.ok = .loops.init(path, "w") and .bits.init(path, "b")

	function While (|uint| value)
		visible
		if value
			.LoopCount++
			return
	
		|| c = .LoopCount
		.LoopCount = 0
		if .Loops.buff <~ c|uint16|
			.loops.flush
		.loops.Test(c, 2)

	function Cond (|bool| value)	
		visible
		if .bits.buff <~ value|byte|
			.bits.Flush
		.bits.Test(value|uint|, 1)
	
	
	module
		|flowcontrol| flow 

