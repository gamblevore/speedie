

/*
	API to check if something different happened to the flow control from one platform to another
	only call: flowcontrol.Cond
*/

		
class FlowControl
	linkage:cpp_part Flow
	|FastBuff|				Buff
	|stringstream|			Read
	|faststring| 			Write
	|bool| 					OK

	constructor (|string| Path)
		flow off
		.ok = .buff.Alloc(1MB)
		.init(path)
		print "Capturing flow: "
		printline path

	helper init (|string| path)
		flow off
		|| prev = path.AddExt(".expected")
		if AlwaysMove or (!prev.fileexists and path.fileexists)
			|| f = path.file
			if f.exists
				require f.moveto(prev)
		.write = path.out
		if prev.fileexists 
			.read = prev.readFile.decompress.stream

	helper Flush
		flow off
		if .write
			.buff.tmpstr.CompressInto(.write, stats)
			.write.Flush
		.buff.Curr = .buff.start
			 

	destructor
		flow off
		FlowControl.Disabled = int.max
		.flush
		printline stats.render
		stats.clear

	
	helper Cond (|byte| value, |bool|)
		flow off, opt norefcounts, visible
		if .buff <~ value
			.Flush
		|| r = .read
		if !r
			return true
		require r != nil
		|| Found = r.byte
		if Found == value
			return true

		printline flowdiff
		printline app.StackTrace("JB_Flow_Cond")
		.read = nil

	
	module
		|flowcontrol|			Flow // DONT directly alter this 
		||						FlowDiff = "Flow differs here:"

		|CompressionStats| 		Stats
		|uint| 					Disabled = int.max
		|bool|					AlwaysMove
			
		syntax append (|bool| value, |bool|)
			visible, flow off, cpp_name JB_Flow__Cond
			if .disabled
				return value
			.disabled = 1
			.flow.cond(('T', 'F')(value))
			.disabled = 0
			return value
			
		syntax append (|string| name, |bool| Print=true,  |bool|)
			opt norefcounts, flow off, cpp_part AddStr
			
			if .disabled
				return true
			rz = true
			|| find = 
			for c in name
				if !.flow.cond(c)
					if print
						"Expected:"
						printline name
						"But found:"
						
						
					rz = false

		function Activate
			flow off
			.Disabled = int.max // in case its set badly
			.flow = FlowControl("/tmp/flowcontrol/" + app.filename + ".flow")
			.Disabled = 0
		
		function Stop
			flow off
			.Disabled = int.max
			.Flow = nil

		syntax Using (|FlowControlStopper|)
			flow off
			.Activate




datatype FlowControlStopper (uint)
	syntax usingcomplete
		flowcontrol.stop
