

/*
	API to check if something different happened to the flow control from one platform to another
	only call: flowcontrol.Cond
*/


datatype FlowControlStopper (uint)
	syntax usingcomplete
		flowcontrol.stop
		
class FlowControl
	linkage:cpp_part Flow
	|FastBuff|				Buff
	|stringstream|			Read
	|faststring| 			Write
	|bool| 					OK

	constructor (|string| Path)
		flow off
		.ok = .buff.Alloc(1MB)
		.init(path)
		print "Capturing flow: "
		printline path

	helper init (|string| path)
		|| prev = path.AddExt(".expected")
		if !prev.fileexists and path.fileexists
			require path.file.moveto(prev)
		.write = path.out
		if prev.fileexists 
			.read = prev.readFile.decompress.stream

	helper Flush
		flow off
		.buff.tmpstr.CompressInto(.write, stats)
		.buff.Curr = .buff.start
		.write.Flush
			 

	destructor
		FlowControl.Disabled = int.max
		.flush
		printline stats.render
		stats.clear

	syntax append (|byte| value)
		cpp_part Cond
		flow off
		opt norefcounts
		visible
		if .buff <~ value
			.Flush
		|| r = .read
		require r != nil
		|| Found = r.byte
		if Found != value
			"Flow differs here:"
			printline app.StackTrace("JB_Flow__Cond")
			if curraction
				print "During: "
				printline CurrAction
				
			.read = nil
	
	module
		|uint| 					Disabled = int.max
		|flowcontrol|			Flow 
		|CompressionStats| 		Stats
		|string|				CurrAction
		
		function AddCode (|uint64| Code, |uint| Size=8)
			for Size
				flow <~ code&255
				code >>= 8
			
		function Activate
			.Disabled = int.max // in case its set badly
			.flow = FlowControl(app.ExePath.AddExt(".flow"))
			.Disabled = 0
		
		function Stop
			.Disabled = int.max
			.Flow = nil

		syntax Using (|FlowControlStopper|)
			.Activate



