

/*
	API to check if something different happened to the flow control from one platform to another
*/

		
class FlowControl
	linkage:cpp_part Flow
	|FastBuff|				Buff
	|StringReader?|			ReadInput
	|faststring?| 			Write
	|Faststring?| 			Excuse

	constructor
		flow off
		.buff.needAlloc(1MB)
		.Excuse = FastString()

	helper Init (|string| path, |string| DateStr)
		flow off
		if .LoadPath(path, false) or .LoadPath(path, true)
			print " vs new: "
		  else
			print "Capturing flow: "
		printline path
		.write = path.out
		flowcontrol.Disabled = 0
		if FlowControl.flowmode >= FlowControl.Validate
			FlowControl.Input(DateStr, "App Creation Date")



	helper LoadPath	(|string| path, |bool| IsPrev,   |bool|)
		flow off
		require FlowControl.FlowMode >= FlowControl.Validate
		|| name = (".expected", ".prev")(!IsPrev)
		|| CmpFile = path.AddExt(name)
		if IsPrev
			if AlwaysMove or (!CmpFile.filesize and path.filesize)
				|| f = path.file
				if f.exists
					require f.MoveTo(CmpFile)
		
		if CmpFile.FileSize
			|| S = CmpFile.ReadFile
				.ReadInput = S.decompress.stream
				rz = .readinput.hasany
				if rz
					print "Old: "
					print CmpFile
		
		
	helper Flush
		flow off
		if .write
			.buff.tmpstr.CompressInto(.write, stats)
		.buff.Curr = .buff.start
			 

	destructor
		flow off
		FlowControl.Disabled = int.max
		
		.flush
		if .ReadInput!=nil
			"Flow: Occurred equally."
		stats.Print
		stats.clear

	
	helper AddByte (|byte| value)
		flow off
		if .buff <~ value
			.Flush
		
	helper Cond (|byte| value, |bool|)
		flow off, opt norefcounts, visible

		.AddByte(value)
		|| r = .ReadInput
		if r == nil
			return true
		|| b = r.byte
		if b == value
			return true
		.fail(string.byte(value), string.byte(b), "")


	function Fail (|string| found, |string| expected, |string| InputName)
		opt norefcounts, flow off
		|| fs = .Excuse									#debug_require
		if InputName 
			fs <~ "Different input for: ${InputName}. "			
		if !.readinput.HasAny
			fs <~ "New-stream longer than old-stream."
		  else
			fs <~ "Expected: "
			fs.printnicely(expected)
			fs <~ " but found: "
			fs.printnicely(found)
		fs <~ "\n"
		
		if !InputName
			app.StackTrace(3, fs)
			printline fs.GetResult
			.Excuse = nil
			.ReadInput = nil
		if flowcontrol.BreakOnFail
			debugger


	function faststring.PrintNicely (|string| s)
		|| Cause = s.UnPrintable
		if cause < 0
			self <~ "#(${s.hex})#"
		  elseif cause == '\n'
			s.ReplaceAll("\n", `\n`, self)
		  else
			self <~ s
	
	
	module
		|flowcontrol|			Flow			// DONT directly alter this 

		|CompressionStats| 		Stats
		|uint| 					Disabled		= int.max
		|byte|					FlowMode		= FlowControl.Validate
		|bool|					AlwaysMove		= true
		|bool|					BreakOnFail
		
		constants
			Validate			= 2
			Log					= 1
			Off					= 0
			
		syntax append (|bool| value, |bool|)
			visible,  flow off,  cpp_name JB_Flow__Cond
			if .disabled
				return value
			.disabled = 1
			.flow!.cond(('T', 'F')(value))
			.disabled = 0
			return value

		function Input (|[string]| lines, |string| name,  |bool|)
			cpp_part InputStrings
			flow off
			.Input(lines.join("\n"), name)

		function Input (|string| data, |string| name)
			visible
			flow off
			require !.disabled

			.disabled = 1
			|flowcontrol--| f = .flow!
			|StringReader--| r = f.ReadInput
			if r != nil
				|| str = r.str(data.length)
				if str != data
					f.Fail(str, data, name)
				
			for c in data
				f.addbyte(c)
			.disabled = 0
		
		function Stop
			flow off
			.Disabled = int.max
			.Flow = nil

		function Allow (|string| name, |uint64| StartCode = __modified__,  |FlowControlStopper|)
			cpp_part FlowAllow
			flow off
			require FlowMode
			.Disabled = int.max			// in case its set badly
			|| f = FlowControl()
			.flow = f
			f.init("/tmp/FlowControl/" + name + ".txt.mz", StartCode|int64|.Hex)

		function New (|string| name, |uint64| StartCode = __modified__,  |FlowControlStopper|)
			cpp_part FlowStarter
			flow off
			target flow
				return .allow(name, StartCode)
			  else
				disabled "Either: Enable flow-control via 'targets: flow'... OR use 'flowcontrol.allow'"




datatype FlowControlStopper (uint)
	syntax UsingComplete (|object| idk=nil)
		flow off
		flowcontrol.stop
	
	syntax Using (|FlowControlStopper|)
		flow off

