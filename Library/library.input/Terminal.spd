
datatype TerminalColor (int)
	
class TerminalCell
	|int| 		Color
	|string| 	Text


module Terminal
	|array of array|	Screen
	|faststring| 		fs
	|date| 				LastDisplay
	
	constants
		w = 80
		h = 35 // too many lines will break the clearscreen/reset function!
		|TerminalColor|
		Black = 30, Red,Green,Yellow,Blue,Magenta,Cyan,White
	
	helper init
		require !.Screen
		for h
			|| s = []
			.Screen <~ s
			for w
				s <~ TerminalCell(0, " ")
		
	syntax append (|string| text, |ivec2| V, |TerminalColor| Colors = 0)
		.init
		|| x0 = v.x
		for c.codepoints in text
			if c == 10 or 13
				v.y++
				v.x = x0
			  elseif c == ' '
				v.x++
			  elseif v inrange .size  and  c != ' '
				if c == 127
					c = ' ' // lol
				.Screen[v.y][v.x] = TerminalCell(colors, c)
				v.x++
		
	function DrawRect (|ivec4| Rect, |string| inside="", |terminalcolor| colors=0)
		|| r2 = rect + (1,1,-2,-2)
		for s.rect in rect
			|| c = inside
			|| X = r2.x1x2 contains s.x
			|| Y = r2.y1y2 contains s.y
			if !x and !y
				c = "+"
			  elseif !x and y
				c = "|"
			  elseif !y and x
				c = "-"
			self <~ (c, s)


	function Flat (|string|)
		opt norefcounts
		.fs := FastString()
		|| PrevCol = 0
		for line in .Screen
			for cell in line|array of terminalcell|
				|| CCol = cell.color
				if PrevCol != CCol
					PrevCol = CCol
					.fs <~ "\1b[1;${CCol}m"
				.fs <~ cell.Text
				cell.text = " "
			.fs <~ '\n'
		return .fs.GetResult


	function Display
		|| now = date.now
		if .LastDisplay
			app.Sleep((LastDisplay + 1s/60) - now)
		  else
			"\1b[2J"			// clear
		.LastDisplay = now
		"\1b[1;1H"				// reset
		print .flat
	
	
	function FrameText (|string| s, |ivec4| Frame, |terminalcolor| FrameCol=terminal.white, |terminalcolor| TextCol=0)
		.init
		s = s.wrap(frame.width-2)
		|| p = frame.xy+1
		for i.rect in frame Â± 1
			.Screen[i.y][i.x] = terminalcell(0," ")
		for l.lines in s
			self <~ (l, p, textcol)
			p.y++
		.DrawRect(frame, FrameCol)
	

	function Size (|ivec2|)
		return (w,h)
	
	syntax Expect (|string| msg="")
		"\07"
		if msg
			printline msg

	syntax access (|ind|)
		cpp_wrapper JB_App__GetChar


