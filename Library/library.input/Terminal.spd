

/*
	Jeebox internals. By Theodore H. Smith...
*/

datatype TerminalColor (int)
	
module Terminal
	|array of array|	Screen
	|faststring| 		fs
	|date| 				LastDisplay
	|byte[]| 			ColorInfo

	constants
		w = 80
		h = 35 // too many lines will break the clearscreen/reset function!
		TermClear = "\1b[2J"
		TermReset = "\1b[1;1H"
		Black = 30
		|TerminalColor|  //      \1b[1;31m // red
		Red,Green,Yellow,Blue,Magenta,Cyan,White
	
	function Size (|ivec2|)
		return (w,h)
	
	syntax Expect (|string| msg="")
		"\07"
		if msg
			printline msg

	syntax append (|string| text, |ivec2| xy, |TerminalColor| Colors = 0)
		cpp_part Append2
		self <~ (text, xy.x, xy.y, colors)
	
	syntax append (|string| text, |int| x = 0, |int| y = 0, |TerminalColor| Colors = 0)
		.Init
		|| within = 0
		for c.codepoints in text
			if c == 10 or 13
				y++
				within = 0
			  else 
				|| xx = x+within
				if  xx inrange w  and  y inrange h  and  c != ' '
					if c == 127
						c = ' ' // lol
					.Screen[y][xx] = string.char(c)
					.ColorInfo[(.w*y)+xx] = colors // update later... allow setting bg, or styles.
				within++
	
	function FrameText (|string| s, |ivec4| Frame, |terminalcolor| FrameCol=terminal.white, |terminalcolor| TextCol=0)
		s = s.wrap(frame.width-2)
		|| p = frame.xy+1
		for i.rect in frame Â± 1
			.Screen[i.y][i.x] = " "
		for l.lines in s
			self <~ (l, p, textcol)
			p.y++
		.DrawRect(frame, FrameCol)
		
	function DrawRect (|ivec4| Rect, |string| inside="", |terminalcolor| colors=0)
		|| r2 = rect + (1,1,-2,-2)
		for s.rect in rect
			|| c = inside
			|| X = r2.x1x2 contains s.x
			|| Y = r2.y1y2 contains s.y
			if !x and !y
				c = "+"
			  elseif !x and y
				c = "|"
			  elseif !y and x
				c = "-"
			self <~ (c, s)


	helper Init
		require !.Screen
		.ColorInfo = byte[.w*.h]
		(TermClear).puts
		for h
			|| s = []
			s.SyntaxAppend(" ", w)
			.Screen <~ s


	function Flat (|string|)
		visible
		opt norefcounts
		.fs := FastString()
		|| cols = .ColorInfo.ptr
		|| PrevCol = 0
		for line in .Screen
			for (ch in line) (i)
				|| ccol = *cols++
				if PrevCol != ccol
					PrevCol = ccol
					.fs <~ "\1b[1;${ccol|int|}m"
				if ch isa string
					.fs <~ ch
				line[i] = " "
			.fs <~ '\n'
		return .fs.GetResult


	function Display
		.init
		|| now = date.now
		if .LastDisplay
			app.Sleep((LastDisplay + 1s/60) - now)
		.LastDisplay = now
		TermReset.puts
		.flat.puts
	
	syntax access (|ind|)
		cpp_wrapper JB_App__GetChar
		

helper string.puts
	.cstr.cstring.puts







