
	
function StringReader.CompressInto (|object| dest, |int|Strength=mzlab.default, |&compressionstats| st=nil) 
	expect (self!=nil) ("Nil object given to CompressInto")
	|jbin| j = faststring.use(dest)				#require
	st := CompressionStats.All
	|| Mode = ("ro", "")(strength >= mzlab.strong)
	|| ChunkSize = (4MB, 1MB)(mode)				// don't change these! compression will fail.
	st.start
	j <~ _JbinHeader
	j.enter(@tmp, "Âµz")
	j.addint(.length)
	j.enter(@arg, Mode)
	while .hasany
		|| str = .str(Chunksize)
		|| Place = j.OpenSection
		if Mode
			j.StrongCompressChunk(str, strength > mzlab.strong)
		  else
			j.CompressChunk(str)
		
		j.CloseSection(Place)
		st.LiveUpdate(str.length, j.length - place)
		if !.NoMoreChunks
			j.flush // we are calling it after anyhow	
	j.up(2)
	j.flush			// we definitely need to flush it.  Im serious!
	j.CompressChunk(nil)						// cleanup


helper StringReader.DecompressInto (|object| dest, |int| lim=int.max, |&compressionstats| st=nil, |bool|)
	expect (self!=nil) ("Nil object given to CompressInto")
	|| fs = faststring.use(dest)				#require
	if !.IsCompressed
		fs <~ .readall
		return true
	st := compressionstats.all
	st.start

	|| OK = StdErr.Mark
	check (.DetectJBinType == 1) (self, _jBinNotJbin)
	
	|| mz = .NextMsg							#require
	if mz == @arg // remove this later
		mz = .NextMsg(@tmp)
	  else
		require mz.expect(@tmp)

	|| size = .NextMsg(mz, @num)
	|| arg = .NextMsg(mz, @arg)
	|| Remaining = size.int
	ifn size and arg and Remaining <= lim
		if (Remaining > lim)
			error (self, "mz would decompress too large")
		  else
			error (self, "Invalid mz header")
	  else
		mz.name = nil
		size.name = nil
		|| Mode = arg.name
		|| ChunkMax = (4MB, 1MB)(mode) 
		while
			|| c = .NextMsg(arg, @bin)			#loop
			|| s = c.name
			|| Expected = Remaining min ChunkMax
			if Mode
				loop fs.StrongDecompressChunk(c.name, Expected)
			  else
				loop fs.DecompressChunk(c.name, Expected)
			Remaining -= Expected
			fs.Flush
			st.LiveUpdate(c.length, Expected)
			c.remove
			
	return OK

		
helper faststring.CompressChunk (|string| str) 
	cpp_wrapper JB_Str_CompressChunk

helper faststring.DecompressChunk (|string| str, |int| Expected, |int|) 
	cpp_wrapper JB_Str_DecompressChunk

helper faststring.StrongCompressChunk (|string| str, |bool| Strong = false) 
	cpp_wrapper JB_BALZ_CompressChunk

helper faststring.StrongDecompressChunk (|string| str, |int| Expected, |int|) 
	cpp_wrapper JB_BALZ_DecompressChunk


