
// merging compressor. NOT FINISHED. WORK IN PROGRESS.
// GOAL
// Just... share strings, and IDs, the rest can be chucked.

struct HollyPlanter
	linkage
		cpp_part HRV
	|StringReader|	Input 
	|message|		Name
	|message|		Strings
	|message| 		Types
	|message| 		Lengths
	|message|		Tree
	|[messageid]|	Table

	constants
		MaxOneByte = 255-(32+16)
	
	
	function Collect (|StringReader|)
		.Table   = []
		require .input.DetectJBinType // oof
		.name    = .input.nextmsg(@tmp, "ћ")
		.strings = .input.nextmsg(.name, @nil)
		.Types   = .input.nextmsg(.name, @nil)
		.lengths = .input.nextmsg(.name, @nil)
		.Tree    = .input.nextmsg(.name, @nil)		#require
		
		return .types.name.Stream


	function IDGen (|StringReader| S,  |StringReader| T,  |StringReader| L)
		opt norefcounts
		|| IDCount = T.hint							#require
		.table <~ (messageID("", @nil, 0), IDCount)
		|| Found = 0
		
		while T.hasany
			|| Raw = T.Byte
			|| fn = (raw&127)|syntax|				#expect (.input, "Bad syntax")
			|| Amount = (T.noob, 1)(Raw&128)
			for Amount
				expect (Found < IDCount) (.input, "Too many IDs")
				expect (.lengths)  (.input, "Not enough lengths")
				|| Len = L.noob
				|| ID = MessageID(S.str(Len), fn|syntax|, found)
				.table[Found++] = ID
		expect (Found == IDCount) (.input, "Too few IDs")


	function MakeTree (|message|)
		opt norefcounts
		|message| Parent
		|| TreeParser = .Tree.DecompressStream
		|uint64| Highest = MaxOneByte
		
		while TreeParser.hasany
			|| Raw = TreeParser.noob
			if Raw >= 16
				Raw -= 16
				|| ID = Raw >> 2
				if raw & 2
					ID = Highest-ID
				|| MID = .table[ID]
				expect MID!=nil (.input, "Bad ID")
				(Highest max= ID+1)
				|| msg = mid.msg(parent)
				if !parent or Raw&1 // Down
					parent = msg
					rz := msg
			  else
				parent = parent.upward(Raw+1) // go up
				expect (parent or !treeparser.hasany) (.input, "Went up too far")


	function Decode (|message|)
		|| types = .collect
		if types.hasany
			.IDGen(.strings.DecompressStream, types, .lengths.DecompressStream)
			rz = .MakeTree
	
	
	function StringReader.ReviveJbin (|message|)
		|HollyPlanter| sq
		sq.input = self
		return sq.decode

	
	
struct HollyPotter
	linkage: cpp_part HR
	|faststring|					Strings
	|faststring|					Types
	|faststring|					Lengths
	|faststring|					Tree
	
	function BuildTable (|message| root, |bool|)
		|| OK = stderr.mark
		|MessageCompressor| md
		|[MessageID]| table
		|| strlen = root.identify(md, table)
		.strings = FastString(strlen)
		.types = FastString()
		.tree = FastString()
		.lengths = FastString()
		.types.hint(table.length)
		
		table.sort(&messageid.IDSorter)
		|| PrevType = table[0].func
		|| Count    = 0
		
		for i in table.length
			|messageid--| ID = table[i]
			id.tag = i
			.strings <~ id
			.Lengths.noob(id.Length)
			if id.func != PrevType
				Count = .AddType(PrevType, Count)
				PrevType = id.Func
			Count++
		.AddType(PrevType, Count)
		return OK
	
	helper AddType (|syntax| Prev, |int| Count, |int|)
		if Count == 1
			.Types <~ Prev|byte|
		  else
			.types <~ (prev|byte| (|) 128|byte|)
			.types.noob(Count)

	helper GoUp (|int| Depth)
		while depth > 0
			|| amount = depth min 16
			.tree <~ (amount-1)|byte|
			depth -= amount
			
	function Compress (|message| root, |jbin| j, |int| strength=mzlab.fast)
		opt NoRefCounts
		require .BuildTable(root)
		|| curr = root
		|| highest = HollyPlanter.MaxOneByte
		
		while curr
			|| depth = 0
			|| next = curr.FlatNextDepth(depth)
			highest = .Encode(curr, depth > 0, highest)
			.GoUp(-depth)
			curr = next
		
		.Write(j, strength)

	helper Encode (|message| curr, |bool| Depth, |int| highest,  |uint64|)
		#!"this is pingponging!"
		|| ID = curr.name|MessageID|.tag
		|| Code = Depth|uint|
		if ID > highest
			highest = ID + 1 // 
		  elseif (highest - ID)|uint| < ID|uint|
			ID = highest - ID
			Code |= 2
		Code |= (ID << 2)
		.tree.noob( Code + 16 )
		return highest

	helper Write (|jbin| j, |int| str)
		j <~ _JbinHeader
		j.enter(@tmp, "ћ")
		j.addcomp(.strings, str)
		j.add(@bin, .types) // already compressed.
		j.addcomp(.lengths, str-2)
		j.addcomp(.Tree,    str-2)
		j.up	
	
	
	helper message.Compress (|faststring| fs_in=nil, |int| Strength=mzlab.fast, |string|)
		|HollyPotter| Stuff
		|| fs = FastString(fs_in)
		Stuff.Compress(self, fs, strength)
		return fs.GetResult(fs_in)
	
	module
		function TestHolly (|file| input)
			return 
			require input.MustExist
			|| p = input.path
			if input isa "jbin"
				p = input.trimext
			|| out = p.addext("hol").file 
			|| back = p.addext("back").file
			input.file.parse.Compress(out)
			"${input.size.strsize} compressed to ${out.size.strsize}"
			|| msg = out.in.revivejbin()				#require
			msg.render_jbin(back.out)
			if back.CompareFile(input, input)
				printline "Holly Tested OK: " + input
				

helper message.DecompressStream (|StringReader|)
	if self == @bin
		return .name.decompress(int.max).Stream
	  else
		return .name.stream
