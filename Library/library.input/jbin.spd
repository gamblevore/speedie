
// jbin: streamable, binary jeebox

/* 
	Future improvement... allocate one block at a time! Can call constructor on each object
	Just need a Curr+Last pointer.
*/


|| _JbinHeader     = "\01\10\EA\E2"     /// can't put a constant in a role? 
|| _jBinNotJbin    = "Not jbin"


extend message
	render RenderJbin (|string| shell_path = "")
		opt norefcounts
		require self
		|| js = fs|jbin|
		if shell_path
			js.sheb(shell_path)
		js <~ _JbinHeader
		.render_jbin_sub(js)
	
	
	helper render_jbin_sub (|jbin| js)
		opt norefcounts
		|| ch	 = self
		|| after = .FlatAfter
		while ch and ch != after
			|| Depth	= 0
			|| curr		= ch
			ch			= curr.FlatNextDepth(depth)
			js.Add(curr.func, curr.name, depth > 0)
			js.exit(-depth)



role JBin (Faststring)
	linkage: cpp_part bin
	constructor         (|syntax| type=@arg, |string| name="")
		cpp_part Constructor
		 self <~ _JbinHeader
		.enter(type, name)
	constructor (|int| n)
		cpp_part Constructor0
		if n // what?
	function Enter		(|syntax| type=@arg, |string| name="", |jbinleaver|)
		return .add(type, name, true)
	function Tmp		(|string| name, |jbinLeaver|)
		.Enter(@tmp, name)
		.Enter(@arg)
		return 2
			
	function AddStr		(|string| name)
		.add(@str, name)
	function AddInt		(|int64| name)
		.add(@num, name.render)
	function Add		(|syntax| type, |string| name="", |bool|into = false, |jbinleaver|)
		return .addmemory(type, name.length, into, name.addr)
	function Add		(|syntax| type, |faststring| fs, |bool|into = false, |jbinleaver|)
		cpp_part AddFS
		return .addmemory(Type, fs.length, into, fs.Resultptr)


	function AddComp (|faststring| fs, |int| strength=mzlab.strongest)
		if strength > 0
			|| Place = .OpenSection
			fs.compressinto(self, strength)
			.CloseSection(Place)
		  else
			.add(@str, fs)
			CompressionStats.all.LiveUpdate(fs.length, fs.length, true)

		
	function Sheb		(|string| name)
		self <~ '#'
		self <~ '!'
		self <~ name
		self <~ '\n' // noice

	function Exit (|int| amount = 1)
		|| add = 239
		while amount > 0
			|| B  = (add + amount)  min  (255)
			self    <~ B|byte|
			amount  -= (B-add)

	function AddCstring (|syntax| type=@str, |cstring| name)
		.AddMemory(type, name.length, false, name|&byte|)
	
	function AddMemory (|syntax| type, |uint64| L, |bool| GoIn=false, |?&byte| data=nil, |jbinleaver|)
		|int| T = (type|int|<<1) ||| (goin)
		self <~ T|byte|
		.hint(L)
		if data
			.AppendMemory(data, L|int|)
		return goin|int|


	function OpenSection  (|int|)				// openstream 
		++ .NoFlush
		.length += 6
		return .length

	function CloseSection (|int| c)			// closestream
		|| CurrLen = .length
		expect (CurrLen >= c) (self, "Unable to close section")
		.length = c - 6
		|| blen = 5
		c = CurrLen - c
		|| Actual = c
		while {
			Actual >>= 7
			--blen
		} (Actual)

		self <~ (0|byte|, blen) 
		self <~ (@bin|int|<<1)|byte|
		.hint(c)
		.length = CurrLen
		--.NoFlush



datatype jbinLeaver (int)
	// need some nice syntax so we can do: using j.enter
	// not finished

	syntax UsingComplete (|jbin| jb)
		StdErr.LowerErrorsTo = self
		
	module
		function test
			|| j = jbin()
			j.Enter	// Sigh... syntaxusing is called upon the leaver, and not the jbin!
					// how to make it work on j rather than on j.enter?
					// we could do it.
					// so... we call j.enter
					// i mean we can just make it work on the thing inside the dot instead of the overall
					// but that affects a lot of things. its not very reliable.
						  
	

function StringReader.NextMsg (|message| parent=nil, |syntax| fn=@nil, |string| name=nil,  |Message|)
	cpp_part NextMsgExpect
	opt norefcounts
	rz = .NextMsg #require
	expect (rz.expect(fn, name) and (rz in parent)) (rz)


helper StringReader.NextMsg (|message|)
	return .nextmsginfo|message|


helper StringReader.NextMsgInfo (|uint64|)
	opt norefcounts
	|| Msg = .UserObj|message|
	|int| info
	while 
		info = .NonZeroByte
		loop info > 239
		msg = Msg.upward(info - 239)
		.userobj = msg, require msg

	|| T = (info >> 1)|syntax|
	if (t < @max and T > @nil) // 01 --> T=@nil
		msg = msg.msg(t, .str(.hInt))			
		if info & 1
			.userobj = msg
		return msg|uint64|

	.userobj = nil
	if info >= 0
		expect (T > @nil) (self, "StringReader.IsJBin was not called.")
		error (self, "Corrupted jbin")


function StringReader.IsJBin (|bool|)
	return .str(4).IsJbin
	
	
function StringReader.ExpectJbin (|bool|)	
	if .IsJBin
		return true
	error (Self, _jBinNotJbin)


function StringReader.ParseJbin (|int64| Remain=int64.max, |MessageRoot|)	
	require .ExpectJbin
	.UserObj = nil
	rz = .NextMsg
	while --Remain > 0
		loop .NextMsginfo
	
	if .Data.WentBad
		rz = nil // be consistant with .parse!
	

function string.ParseJbin (|int64| max=int64.max, |messageroot|)
	return .Stream.ParseJbin(max)


function string.Digest (|string|)
	if .IsJbin
		return self
	return .parse$.renderjbin

