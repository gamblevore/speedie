
/*
	Jeebox internals. By Theodore H. Smith...
*/


module Math
	constants
		E = 2.7182818284590452353602874713526
		iTau = 0.15915494309
	
	function Pi (|float|)
		disabled "Use π for pi, or 2π for PI*2"
	
	function Sin (|float| f, |float|)
		return .sinpi(f*2.0)

	function Cos (|float| f, |float|)
		return .cospi(f*2.0)
		
	function float.cos (|float|)
		return math.cos(self)
		
	function float.exp2 (|float|)
		return 2.0 pow self

	function ACosBad (|float| f, |float|)
		cpp_wrapper (acosf)
	
	function Tan (|float| f, |float|)
		return .TanPi(f*2.0)
	
	function float.Acos (|float|)
		return math.acosbad(self) * math.iTau
		
	function float.Sin (|float|)
		return math.sin(self) //sigh

	function float.tan (|float|)
		return math.tan(self) //sigh

	helper float.__sincospi (|&float| A, |&float| B)
		cpp_wrapper (__sincospif)
		
	function float.SinCos (|vec2|)
		|float| a
		|float| b
		self*=2
		.__sincospi(a, b)
		return (a, b)
		
	function CosPi (|float| f, |float|)
		cpp_wrapper (__cospif)

	function Saw (|float| f, |float|)		 // just a saw-func
		//   0-->0,  0.25-->1,  0.5-->0,  0.75--> -1,  1-->0
		f = f.fract
		f = f * 4.0
		f = f - f.minus0(1.0)
		return f
	
	function TanPi (|float| f, |float|)
		cpp_wrapper (__tanpif)
	
	function SinPi (|float| f, |float|)
		cpp_wrapper (__sinpif)

	function float.ATan2Bad (|float| f2, |float|)
		cpp_wrapper (atan2f)

	function float.ATan2 (|float| y, |float|)
		rz = -.ATan2Bad(y)				   // our result is +-pi, but we want 0-1...
		rz *= math.iTau
		if rz < 0.0
			rz ++

	function int.Abs (|int|)
		cpp_wrapper (abs)
	
	function int.Sqrt (|int|)
		return (self|Float64|.sqrt)|int|
	
	function f64.Sqrt (|Float64|)
		cpp_wrapper (sqrt)
	
	function float.Gaussian (|float| v, |float|)
		|| exp = self*self / v
		|| factor = math.e pow -exp
		|| mul = π|float| * v
		|| sq = mul.Sqrt
		return factor / sq
	
	function float.Clamp (|float|L, |float|H, |float|)
		cpp_wrapper JB_f_Clamp
	
	function float.Clamp (|float|H=1.0, |float|)
		return .clamp(0,h)
		
	function float.Cluster (|float|)
		cpp_Wrapper JB_f_Cluster

	function int64.Hash (|uint64|)
		return self|uint64|.hash 

	function int.Hash (|uint|)
		return self|uint|.hash 

	function uint64.Hash (|uint64|)
		cpp_wrapper JB_uint64_hash
	
	function int.LowestBit (|int|)
		return self & -self 

	function int.RemoveOneBit (|int|)
		return self & (self-1)

	function int.Sign (|int|)
		if self > 0
			return 1
		return -(self|uint|>>31)

	function int.Clamp (|int| low, |int| high, |int|)
		cpp_part ClampRange
		|| result = low max self
		return high min result

	function int.Clamp (|int| high, |int|)
		return high min (self max 0)

	function Int.FlipSign (|int| Sign, |int|)
		// Sign is 0 or 1
		return (self xor -Sign) + Sign

	function int.SetSign (|bool| IsNeg, |int|)
		// bool.dir is beter
		if (IsNeg)
			return -self
		return self
	
	function int.SignBit (|int|)
		return self|uint| >> 31
		
	function int.Reduce1 (|int|)
		disabled "seems buggy, doesnt work for 0"
		return self + (.signbit << 1) - 1
	
	function int.Reduce (|int| d=1, |int|)
		if (self > d)
			return self - d
		elseif (self < -d)
			return self + d
		
	function int.Reduce2 (|int| d, |&int| Zeros, |int|)
		opt inline
		if ( self > d )
			return self - d
		  elseif (self < -d)
			return self + d
		Zeros[0] = Zeros[0] + 1
	
	function uint64.LowestBit (|uint64|)
		return self & -self 

	function uint.LowestBit (|uint|)
		return self & -self 

	function uint64.RemoveOneBit (|uint64|)
		return self & (self-1)



function Mix (|float| X, |float| Y, |float| Mix, |float|)
	cpp_Part FloatMix
	return X + (Mix * (Y - X))

function UnMix (|float| X, |float| Y, |float| R, |float|) // inbetweenness
	return (R - x)/(Y - X)

function Mix (|vec4| A, |vec4| B, |float| F, |vec4|)
	cpp_Part Vec4Mix
	return (A*(1.0-F)) + (B*F)

function Mix (|vec3| A, |vec3| B, |float| F, |vec3|)
	cpp_Part Vec3Mix
	return (((A,0.0)*(1.0-F)) + ((B,0.0) * F)).xyz

function Mix (|vec2| A, |float| F, |float|)
	cpp_Part Vec2Mix
	return (A.x1*(1.0-F)) + (a.x2*F)



function int.CopySign (|int| From, |int|)
	if (self.signbit == from.signbit)
		return self 
	return -self


extend int
	operator pow (|int| a, |int|)
		if (a==2)
			return self*self
		if self >= 0
			rz = 1
			for a
				rz *= self

	operator minus0 (|int| a, |int|)
		|| r = self - a
		if r >= 0
			return r
			
extend ivec2
	operator minus0 (|ivec2| a, |ivec2|)
		return (.x minus0 a.x, .y minus0 a.y)


extend f64
	function Negate (|bool| b, |Float64|)
		if (b)
			return -self
		return self


extend float
	function Negate (|bool| b, |float|)
		if (b)
			return -self
		return self

	function CopySign (|float| frum, |float|)
		cpp_Wrapper (copysignf)
	
	function Minus0 (|float| B, |float|)
		cpp_Wrapper (fdimf)

	function Reduce (|float| f, |float|)
		return .abs.minus0(f).copysign(self)
	
	function Increase (|float| f, |float|)
		return self + f.copysign(self)
	
	function IsNan (|bool|)
		cpp_wrapper (__isnanf)
	
	function IsNormal (|bool|)
		// not inf and not nan, but what about 0? i guess 0 is normal?
		cpp_wrapper (__isnormalf)
	
	function RangeConvert (|float| lfrom, |float| hfrom, |float| lto, |float| hto, |float| )
		|| fr = hfrom - lfrom
		// if its lfrom, return lto
		// if its hfrom, return hto
		|| inbetweenfromness = (self - lfrom) / fr
		return mix(lto, hto, inbetweenfromness) 
	
	
	function RangeConvertClamped (|float| lfrom, |float| lto, |float| hfrom, |float| hto, |float| )
		self = .RangeConvert(lfrom, hfrom, lto, hto)
		return .clamp(lto, hto)
		
		
	function Sanity (|bool|)
		ifn .isnan or .isinf
			return true
		debugger 
	
	function MakeSane (|float|)
		if .Sanity
			return self
	
	function IsInf (|bool|)
		cpp_wrapper (__isinff)
	
	function f64.IsNan (|bool|)
		cpp_wrapper (__isnand)
	
	function f64.isInf (|bool|)
		cpp_wrapper (__isinfd)
	
	function Pow (|int| n, |float|)
		visible
		rz = self
		for n
			rz *= self

	function Pow2 (|float|)
		return self*self

	function Pow3 (|float|)
		return self*self*self

	function Pow4 (|float|)
		rz = self*self
		rz *= rz

	function Pow6 (|float|)
		rz = self*self
		rz = rz*rz*rz

	function Pow8 (|float|)
		rz = self * self
		rz *= rz
		rz *= rz

	function Pow16 (|float|)
		rz = self * self
		rz *= rz
		rz *= rz
		rz *= rz

function math.RangeConvert (|float| lfrom, |float| hfrom, |float| lto, |float| hto, |FloatRangeConverter|)
	description "Converts numbers in one range, to another range. Very awkward to do, normally!" 
	cpp_part RangeConv4
	return (-lfrom,  1.0 / (hfrom - lfrom),  lto,  hto)|FloatRangeConverter|

function math.RangeConvert (|float| lfrom, |float| hfrom, |FloatRangeConverterBasic|)
	description "Same as math.RangeConvert(lfrom, hfrom, 0, 1)" 
	cpp_part RangeConv2
	return (-lfrom,  1.0 / (hfrom - lfrom))|FloatRangeConverterBasic|

datatype FloatRangeConverter (vec4)
	function Convert (|float| x, |float|)
		return mix(.z, .w, (x + .x) * .y)

datatype FloatRangeConverterBasic (vec2)
	function Convert (|float| x, |float|)
		return (x + .x) * .y



function int.Towards (|int| Dest, |int| N, |int|)
	if (self >= dest)
		self -= N
		if (self <= dest)
			return dest 
	  else
		self += N
		if (self >= dest)
			return dest
	return self

	
function float.Mul (|float| by, |bool| Cond, |float|)
	if cond
		return self * by
	return self


function float.Plus (|bool|b, |float| add=1.0, |float|)
	if b
		return self + add
	return self

