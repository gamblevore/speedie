

prototype PicoThreadFn (|pico| Comms, |&nil| Obj, |&cstring| Args=nil, |bool|)
// todo: pico could use shared memory, instead of pipes. This actually reduces memory use!
// To under half the memory.


struct PicoMessage
	linkage: wrapper, cpp_part Pico
	|int|			Length
	|?&int8|		Data
	
	syntax cast (|bool|)
		if self
			return .data
	
	module
		function From (|string| s, |PicoMessage|)
			rz.length = s.length
			rz.data = s.addr|&int8|
		function FromFS (|faststring| fs, |PicoMessage|)
			rz.length = fs.length
			rz.data = fs.ResultPtr|&int8|


function @string.FromPico (|picomessage| M, |string|)
	|| x = m.data|&byte|
		return string.own(x, M.length)


struct Pico
	linkage: wrapper, cpp_part Pico, cpp_class PicoComms

	function IsParent (|bool|)
		cpp_wrapper PicoIsParent
		
	function CanGet (|bool|)
		nil self
		cpp_wrapper PicoCanGet
		
	helper SpawnFork (|bool| Exec=false, |PID_Int|)
		nil self
		cpp_wrapper PicoStartFork

	function SpawnThread (|PicoThreadFn| fn, |&nil| Obj, |?&cstring| Args = nil, |bool|)
		cpp_wrapper PicoStartThread

	function CompleteExec (|bool|)
		cpp_wrapper PicoRestoreSockets
	
	syntax append (|string| str, |bool| Wait=false, |bool|)
		cpp_part SendString
		|| Msg = picomessage.From(Str)
		return .send(msg, wait)

	syntax append (|faststring| fs, |bool| Wait=false, |bool|)
		cpp_part SendFS
		|| msg = picomessage.Fromfs(fs)
		rz = .send(msg, wait)
		fs.length = 0
		
	helper _Send (|?&int8| msg, |int| Length, |bool| Wait=false, |bool|)
		cpp_wrapper PicoSend

	helper Send (|picomessage| A, |bool| Wait=false, |bool|)
		cpp_Part SendMsg
		return ._send(A.data, a.length, wait)
		
	function Tickle
		|| msg = PicoMessage.from("")
		.send(msg)

	function Config (|&PicoConfig|)
		// this should not allow a nil-self. why does it?
		cpp_wrapper PicoCommsConf
	
	helper __Get (|PicoMessage| Msg, |float| T)
		nil checker
		cpp_wrapper PicoGet

	function Get (|float| T, |string|)
		nil checker
		if .canget
			|picomessage| msg
			.__get(msg, T)
			return string.FromPico(msg)
		
	function Close (|cstring| Why)
		cpp_wrapper PicoClose
	
	function Status (|ErrorInt|)
		nil checker
		cpp_wrapper PicoError
	
	function IsOK (|bool|)
		nil checker
		|| s = .status
		return s == 0 or 255

	function IsSending (|bool|)
		cpp_wrapper PicoStillSending
		
	

	module
		function GlobalConfig (|&PicoGlobalConfig|)
			cpp_wrapper PicoGlobalConf
			
		function SleepForSend (|float| During=5.0, |float| After = 0.5)
			cpp_wrapper PicoSleepForSend
		
		function Start
			cpp_wrapper PicoStart

		function Destroy (|?&pico| Where, |Cstring| Why, |?&pico|)
			cpp_wrapper PicoDestroy
			
		function Replace (|&&pico| Where, |bool|)
			|| New = pico.new #require
			.destroy(where, "replace")
			where[0] = new
			return true

		function HasParentSocket (|bool|)
			cpp_wrapper PicoHasParentSocket
			
		function Create (|cstring| Name, |?&pico|)
			cpp_wrapper PicoCreate

		function Fork (|stringzeroterminated| name="", |int| Noise=0,   |&pico|)
			|| p = .new(name, noise)
				|| pid = p.spawnfork
				if pid >= 0
					return p
				p.close(nil)
		
		function New (|stringzeroterminated| name="", |int| Noise=0,   |&pico|)
			|| p = pico.Create(name)
				|| c = p.config
				c.bits = 16
				c.Noise = noise
				return p
			|PicoGlobalStats| St
			St.Read
			error ("Couldn't create a pico object. Too many picos: " + St.OpenPicos.render)
	

module PicoNoise
	constants
		DebugChild	= 1
		DebugParent	= 2
		Debug		= 3
		EventsChild	= 4
		EventsParent= 8
		Events		= 12
		All			= 15


struct PicoConfig
	linkage: wrapper
	constants
	|byte[32]|					Name
	|Date|						LastRead
	|Date|						LastSend
	|int|						Noise
	|float|						SendTimeOut
	|int|						SendFailCount
	|int|						ReadFailCount
	|int|						QueueBytesRemaining
	|int|						Bits
	|&PicoGlobalConfig|			Realm


struct PicoGlobalConfig
	linkage: wrapper
	|Date|						LastActivity
	|Date|						TimeOut
	|int|						ExitCode
	|int|						DesiredThreadCount
	

struct PicoGlobalStats
	linkage: wrapper
	|int|						TimeOutCount
	|int|						OpenSockets
	|int|						OpenPicos

	helper Read
		cpp_wrapper PicoStats
	module
		function Read (|PicoGlobalStats|)
			rz.read

