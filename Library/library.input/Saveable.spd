

// all objects should be saveable unless the class sas its not.
// makes more sense. we messed up the language otherwise!

struct ObjectSaver
	linkage
		cpp_Part Saver

	|?FastString|				Dest
	|?object--|					CantSaveThis
	|?object--|					Root
		
	destructor
		check !.CantSaveThis (.CantSaveThis, "This class has no saving function for it.")
	
	module
		|SaverClassInfo|		SaveableList
		constants
			RefMark = 0x40000000
		
		function LoadOne (SaverLoadClass)
			|| N = SaverClassInfo.new( cls, data )
			cls.saveinfo = N|&byte|
			N.NextInfo = objectsaver.Saveablelist
			objectsaver.Saveablelist = N
		
		function CallMe (|SaverLoadClass| fn)
			visible
			cpp_wrapper JB_InitClassList
		
		function Init
			require !.saveablelist
			.CallMe(&LoadOne)




class Saveable
// probably should be called LOADABLE too... :)
	linkage
		visible
		wrapper
		cpp_part Sav

	
	constructor
		cpp_wrapper

	virtual SaveWrite (|&ObjectSaver| Saver)
		Saver.CantSaveThis = self
		saver.dest! <~ "nil,"
	
	virtual LoadProperties (|&ObjectLoader| Loader,)
	
	behaviour LoadProperties // how to hide this? just use "_"?
		Loader.CouldntLoad = self

	virtual SaveCollect (|&ObjectSaver| Saver)

	behaviour SaveCollect { /* not all objects need to collect anything... */ }	
	
	helper IsSaveMarked (|bool|)
		|| p = self|&int|
		return (p[0] & ObjectSaver.RefMark)

	helper SaveMark (|bool|)
		// pretty brave!!! to try this! Very dangerous
		|| p = self|&int|
		|| rc = p[0] 
		require !(rc & ObjectSaver.RefMark)
		p[0] = Rc ||| ObjectSaver.RefMark
		return true
	
	helper SaveUnMark
		|| p = self|&int|
		p[0] &= ~ ObjectSaver.RefMark
	
	function SaveTo (|File| f)
		cpp_part SaveToFile
		|| it = f.out
			.SaveTo(it)
	
	function ObjectSaver.Finish (|saveable| first)
		opt norefcounts
		|| fs = .dest!
		fs <~ '\n'
		fs <~ '@'
		fs.AppendObjectID(first)
		fs <~ '\n'
		fs <~ kSaverEnd

	// textview uses "SaveTo" as a property.
	function SaveTo (|FastString| fs_in = nil, |string|)
		cpp_part SaveTo
		|| fs = FastString(fs_in)
		ObjectSaver.init
		|| Saver = objectsaver.new
		saver.dest = fs
		saver.root = self
		fs <~ kSaverStart1
		
		.SaveTryCollect(saver)

		// Go through all the classes...
		|saverclassinfo--| sci = ObjectSaver.saveablelist 
		while (sci!=nil)
			sci.output(saver)
			sci = sci.nextinfo
		
		sci = ObjectSaver.saveablelist 
		while (sci!=nil)
			sci.clear // maybe slower BUT I JUST WANT THIS TO WORK!!!
			sci = sci.nextinfo
		
		Saver.Finish(self)
		|| result = fs.GetResult(fs_in)
		saver.dest = nil
		saver.CantSaveThis = nil
		return result


/////// /////// /////// /////// /////// HELPERS /////// /////// /////// /////// /////// /////// 


extend ObjectSaver
	function AppendBool (|bool| b)
		.dest! <~ b|int|
		.dest! <~ ','

	function AppendString (|string| s)
		// seems fine, to be honest.
		.dest! <~ '`'
		s.replaceall("`","``", .dest)
		.dest! <~ '`'
		.dest! <~ ','
	
	function AppendInt (|int64| i)
		.dest! <~ i
		.dest! <~ ','
	function AppendRaw (|&byte| f, |int| n)
		.dest!.AppendHexData(f, n)
		.dest! <~ ','
	function AppendObject (|object| o)
		.dest!.AppendObjectOrNil(o)
		.dest! <~ ','


helper FastString.AppendObjectID (|saveable| o)
	.Appendhex3( o.ObjectID )


helper FastString.AppendObjectOrNil (|object| o)
	if (o isa saveable)
// For linked lists... if we try to save one object but it has a .next
// but we don't want to save the .next...
		if (o.IsSaveMarked)
			.AppendObjectID(o)
		  else
			#!"Valid behaviour! For example we save a level, but we don't save the player along with the level. Like terraria."
//			debugger(1)
			self <~ "nil"
	  elseif (o isa string)
		o.render(self)
	  else
		self <~ "nil"


extend Array
	Behaviour SaveCollect
		// put all in, for now.   // opt later. :)
		for (v in self)
			v.SaveTryCollect(saver)
		opt NoRefCounts

	Behaviour SaveWrite
		opt NoRefCounts
		|| D = saver.dest!
		for (v in self)
			D <~ ", "
			start
			D.AppendObjectOrNil(v)


extend Dictionary
	behaviour SaveCollect
		opt NoRefCounts
		for (v in self)
			v.SaveTryCollect(saver)
	
	behaviour SaveWrite
		opt NoRefCounts
		|| D = saver.dest!
		|| L = .navigate
		
		while (l.movenext)
			D <~ l.name // what if it's an int?
			D <~ ": "
			D.AppendObjectOrNil(l.value)
			D <~ ','



constants
	kSaverStart1 = "@JBSave\n"
	kSaverEnd = ""



/// Try not to generate savers for things that contain "saveas nil"
/// or ARE "saveas nil"


helper Object.SaveTryCollect (|&ObjectSaver| Saver)
	opt norefcounts
	if (self isa Saveable)
		require .SaveMark
		.SaverInfo <~ self
		.__SaveCollect__(saver)
	  elseif (self)
		ifn self isa string
			saver.CantSaveThis = self





prototype SaverLoadClass (|&ClassData| cls, |&char| Data)

class SaverClassInfo (array)
	default nil
	linkage
		cpp_part sci

	contains			Saveable
	saveas				nil
	
	|&ClassData|		Cls
	|SaverClassInfo?|	NextInfo
	|&char|				Data
	

//	function AdFub (|faststring| fs)
//		// adfub????
//		// nothing uses this?
//		opt norefcounts
//		for (Obj in self)
//			fs.AppendObjectID(obj)


	constructor ( |&ClassData| Cls, |&char| Data )
		.cls  = cls
		.data = data

	
	function HasData (|bool|)
		return .data[0]

	
	function Saveable.SaverInfo (|SaverClassInfo|)
		opt norefcounts
		return .Class.saveinfo|Saverclassinfo|


	function Clear
		opt norefcounts
		require self
		for Obj in self
			obj.SaveUnMark // make debugging easier...
		super.clear

	
	function Output (|&ObjectSaver| Saver)
		opt norefcounts		
		|| D = saver.dest
		require d and self
		D <~ '\n'
		D <~ string.Wrap(.cls!.name).lowercase // lol.
		D <~ ' '
		
		if (.HasData)
			D <~ '('
			D <~ .data|cstring|
			D <~ ')'
			D <~ ' '
		D <~ "(\n"
		
		for (Obj in self)
			D <~ '\t'
			D.AppendObjectID(obj)
			D <~ ':'
			D <~ '('
			Obj.__SaveWrite__(Saver)
			D.remove(',')
			D <~ ')'
			D <~ '\n'
		D <~ ')'
		D <~ '\n'




/////	 /////	 /////	 /////	 /////	 /////	 /////	 /////	 /////	 /////	 /////	 /////	 


struct StructSaveTest
	saveas struct
	|saveable?|	Sav
	|int64|		Intt
	|string|	Str
	
	function RunTest
		.test("")
		
	function Test (|string| s)
		cpp_part TestStr

	function Test (|object| s)
		cpp_part TestObj

