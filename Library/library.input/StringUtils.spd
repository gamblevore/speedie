

function Print (|string?| data) // macro this too?
	cpp_wrapper JB_Str_Print


function PrintLine (|string| data="")
	strprintline(Data)							// to disambiguate vs macro


macro PrintLine
	StrPrintline(_0.render) // not self-referential anymore.


function StrPrintLine (|string?| data)
	cpp_wrapper JB_Str_PrintLine


function PrintLine (|object?| o)
	cpp_name JB_Obj_PrintLine
	printline o.render


function ZalgoLine (|string| data)
	printline data.zalgo


macro ZalgoLine
	Printline _0.render.zalgo


function Print (|object| o)
	cpp_name JB_Obj_Print
	print o.render


function PrintError (|string| data)
	cpp_wrapper JB_Str_PrintError


function byte.IsConso (|bool|)
	return .isletter and !.isvowel


function byte.IsVowel (|bool|)
	|| b = .lowercase
	return (b == 'a' or 'i' or 'e' or 'o' or 'u') 


function int.OperatorPC (|int| x, |string|) 
	return (self|float| / x|float|).pc

function int.operatorof (|string| type, |string| nothing="", |string|)
	return type.Pluralize(self, nothing)

function string.Pluralize (|int| amount, |string| nothing="", |string|)
	if !amount and nothing
		return nothing
		
	|| fs = FastString()
	if amount
		fs <~ amount
	  else
		fs <~ "no"
	fs <~ " "
	fs <~ self
	if amount != 1
		if .Last == 's'
			fs <~ "e"
		fs <~ "s"
	return fs


function string.Moat (|string|)
	|| fs = faststring()
	fs.size = .length + 4
	fs <~ "__"
	fs <~ self
	fs <~ "__"
	return fs


function string.IsFileLike (|bool|)
	|| c = *self
	return (c == '/') or ((c == '.' or c == '~') and ((self[1] == '.') or (self[1] == '/')))
	// so... we want to wrap to w... but prefer to wrap at a SPACE or comma
	
function byte.IsTextLine (|bool|)
	 return self == '\n' or '\r'

function codepoint.IsTextLine (|bool|)
	 return self == '\n' or '\r'

function int.TabsWidth (|int|)
	return 4-(self & 3)


function String.UTF16To8 (|faststring|fs=nil, |int|BigEndian=1, |string|)
	cpp_wrapper JB_Str_UTF16To8


function String.UTF8 (|string|)
	if !.isbadutf8(0)
		return self
	return .UTF16To8


/*function string.Appender4 (|string| a, |string| b, |string| c=nil, |string|)
	cpp_wrapper JB_Str_Appender4 // if we wanted 2 params just use "+"

function string.Appender7 (|string| a, |string| b, |string| c, |string| d, |string| e=nil, |string| f=nil, |string|)
	cpp_wrapper JB_Str_Appender7
*/ // do later. compiler can use this :)


function string.OperatorPlus (|cstring| c, |string|)
	if self
		|| tmp = c.temp
		return self + (&tmp)|string|
	return c.str


function cstring.OperatorPlus (|string| s, |string|)
	if s
		|| tmp = .temp
		return (&tmp)|string| + s
	return .str


struct FakeJBString
	|int| Refcount
	|int| Length
	|&byte| Addr


helper cstring.temp (|fakejbstring|)
	rz.refcount = 0
	rz.length = .length
	rz.addr = self|&byte|


function String.ExtractPathAndLine (|&ivec2| LineAndByte, |string|)
	if .LineCount > 1	
		|| parsed = .Parse
			|| curr = (parsed.first, parsed)(parsed == @arg)
			while curr
				|| pos = curr["pos"]
				|| path = curr["file"]
				path := curr["path"]
				if path and pos
					|int| n = pos.int // make the c++ compile D:
					*LineAndByte = (1, n)
					return path.name
				curr++

	rz = .TrimStart("line ")
	|| tr = rz.trim
	if tr.isint
		|| v = (tr.int|int|, 0)
		*LineAndByte = v
		return ""
	
	|| parts = rz / ':'
	rz = parts[0].trim
	|| v2 = (parts[1].trim.int|int|, parts[2].trim.int|int|) 
	*LineAndByte = v2
	if *rz == '~'
		rz = rz.Resolve(fileResolveMode.allowmissing)


helper string.WrapSub (|int| MaxWidth, |bool| IsInline, |int| p, |int|)
	|| i		= p
	|| ParaMax	= 1K
	MaxWidth	= MaxWidth min Paramax
	|| Orig		= MaxWidth
	paramax += p

	while
		|| c = .byte(i, -1)
		if c < 0
			return i
		if c|byte|.IsTextLine
			if !isinline
				return i + 1
			c = ' '
		if i >= ParaMax or MaxWidth <= 0
			return i
		
		if c == '\t'
			i++
			maxwidth -= (Orig-MaxWidth).TabsWidth
		  elseif isinline
			i++
		  elseif jeebox.CSWrapSplit[c]
			i++
			MaxWidth--
		  else									 // so where does the word end?
			|| WordEnd = .find(jeebox.CSWrapSplit, i, ParaMax)
				WordEnd += (self[WordEnd] > 32)
			  else
				WordEnd = .length min paramax
			|| MW2 = MaxWidth - .CharCount(i, WordEnd)
			if MW2 < 0
				if i == p
					i = p + MaxWidth
				return i
			MaxWidth = MW2
			i = WordEnd


helper String.UnTabbifySub (|faststring| fs)
	|| Tabs = .OutByte('\t') ?? .Length
	if tabs == 0
		fs <~ self
	  else
		fs <~ (' ', tabs*4)
		fs.AppendSection(self, tabs, int.max)


helper String.TabbifySub (|faststring| fs)
	|| Sp = .OutByte(' ') ?? .length
	if Sp == 0
		fs <~ self
	  else
		sp = Sp.AlignDown(4)
		fs <~ ('\t', Sp>>2)
		fs.AppendSection(self, sp, int.max)
	

function String.AddTabs (|bool| Tabs=true, |string|)
	|| fs = faststring()
	|| n = 0
	for t.lines in self
		if n++
			fs <~ '\n'
		if tabs
			t.TabbifySub(fs)
		  else
			t.UntabbifySub(fs)
	rz = fs.GetResult
	if rz == self // nice opt
		rz = self


helper String.TabsToSpacesSub (|faststring| fs)
	|| i = 0 
	for (c in self)
		if c == '\t'
			|| remain = 4 - (i mod 4)
			fs <~ (' ', remain)
			i += remain
		  else
			fs <~ c
			i++
		

function String.TabsToSpaces (|string|)
	|| fs = FastString()
	for (l.lines in self) (p)
		l.TabsToSpacesSub(fs)
		if p
			fs <~ self[p] // match line-ending
	return fs
		
		
function faststring.RenderSpeed (|float| seconds, |int64| BytesIn, |int64| BytesOut, |string| Name)
	if name
		self <~ Name
		self <~ ": "
		
	BytesIn.StrSize(self)
	if BytesOut 
		self <~ " to "
		Bytesout.strsize(self)
		self <~ " ("
		|| ratio = ((Bytesout|float| / Bytesin|float|)*100.0)
		self.appenddouble(ratio)
		self <~ "%)"

	self <~ " in "

	if seconds < 0.01
		.appenddouble(seconds*1000.0, 2)
		self <~ 'm'
	  else
		.appenddouble(seconds, 2)
	self <~ 's'
		
	require seconds
	|| scale = 1.0MB
	|| unit = 'M'
	|| rate = BytesIn|float| / (scale*seconds)
	if rate >= 1.0K
		rate /= 1.0K
		unit = 'G'
	  elseif rate <= 1.0
		rate *= 1.0K
		unit = 'K'
	|| dp = (5,2)(rate <= 0.01)
	self <~ "  ("
	self.appenddouble(rate, dp)
	self <~ unit
	self <~ 'B'
	self <~ "/s)"


	
function string.UnPrintable (|int|)
	if .IsBadUTF8
		return -1
	
	for c in self
		ifn (c >= ' ' or c == 9)
			if c.IsTextLine
				return '\n'
			return -2


function String.Spin (|int| f, |byte|)
	return `|/-\`[f&3] // useful for printing "processing" things to stdout

