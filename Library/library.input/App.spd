
/*
	Jeebox internals. By Theodore H. Smith...
*/


module App {
|[string]?|					_OldArgs = nil
|string| 					Usage
|message|					_Conf
|config|					_Prefs
|string| 					_Path
|file?|						_StdOut
|file?|						_stdin

function Sleep (|float| Duration)
	.sleep(duration.date)

function Sleep (|Date| Duration=1s)
	cpp_wrapper JB_Date__Sleep
	
function TrySleep (|date| Duration=1s, |bool|)
	cpp_wrapper JB_Date__TrySleep
	
function TrySleep (|float| Duration, |bool|)
	return .trysleep(duration.date)
	
syntax access (|int| i, |string|)
	disabled "use app.args[i]"

function Option (|string| name, |bool|)
	disabled "Use app.yes()"

function Yes (|string| name, |bool|)
	return app[name].yes

function No (|string| name, |bool|)
	return !.yes(name)

function Conf (|string| name, |string|)
	return ._conf[name].value

function Conf (|string| name, assigns:|string|)
	disabled "Set conf values in the original app.configure..."

function Pref (|string| s, |string|)
	cpp_part GetPref
	return ._prefs[s].value
	
function PrefMsg (|string| s, |message|)
	return ._prefs[s]

function Created (|date|)
	return __now__|date|
	
function TimeID (|uint64|)
	return __time_id__

function Pref (|string| s, assigns:|string|)
	opt norefcounts
	.PrefsInit()[s] = Value

function Pref (|string| s, assigns:|message|)
	opt norefcounts
	cpp_part SetPrefMsg
	.prefsinit()[s] = Value

function AllowInteruptCrash (assigns:|bool|)
	cpp_wrapper JB_App__CrashOnInterupt

function Crash (|string| reason="")
	opt norefcounts
	if reason
		printline reason
	.CrashLog "AboutToCrash".cstr
	-1|&byte|[] = 0
	"Crash Failed!"
	app.quit(-1)


function CrashLog (|cstring| value)
	cpp_wrapper JB_Rec__CrashLog

syntax access (|string| name, |string|)
	cpp_part ArgValue
	opt norefcounts
	for R in .rawargs
		if R.argname ~= name
			return R.argvalue


function Options (|[string]|)
	disabled "Use switches"

function Switches (|[string]|)
	opt norefcounts
	for R in .RawArgs
		if R.ArgName
			rz <~ R
	
helper args_ (|[string]|)
	opt norefcounts
	for R in .rawargs
		if R.argname ~= ""
			rz <~ r

function Args (|[string]|)
	cpp_part ArgsArray
	opt norefcounts
	rz = ._OldArgs
	if rz == nil // == nil important here
		rz = .args_
		._OldArgs = rz

function CrashPrint
	cpp_wrapper JB_CrashTracer

function exepath (|string|)
	cpp_wrapper JB_App__Path

function Path (|string|)
	cpp_part OrigPath
	visible class~file
	|| p = ._Path
		return p
	p = .env["OrigScriptPath"]
	if p
		._Path = p
		return p
	p = .exepath
	if p
		._Path = p
		return p

function PrintStackTrace
	visible
	cpp_name JB_PrintStackTrace
	print .StackTrace


render StackTrace (|int| skip = 2)
	|(&nil)[128]| arr
	|| size = â€“count arr
	|| strs = SpdProcess.BackTrace(&arr[0], &size)
	for i in skip to size-1 
		fs <~ strs[i]
		fs <~ '\n'
	memory.free(strs)


function Restart
	.turninto(.path, .rawargs)


function ThreadName (assigns:|string|)
	cpp_Wrapper JB_App__SetThreadName

function AppName (|string|)
	return .apppath.name

function AppPath (|string|)
	if platform.osx
		return .path.backtoapp
	return .path

function CallPath (|stringzeroterminated|)
	cpp_wrapper JB_App__CallPath
		
function TurnInto (|string| s, |[string]| R=nil)
	cpp_Wrapper JB_App__TurnInto

function ObjMemory (|int64|)
	cpp_wrapper JB_MemCount

function StringMemory (|int64|)
	return Memory.usedstring

function OtherMemory (|int64|)
	return Memory.usedOther

function ClearCaches (|int| which=0)
	cpp_wrapper JB_App__ClearCaches

function PrefPath (|string|)
	rz = app.conf("prefs")$
	if rz[] == '~'
		rz = rz.pathfix
	if rz ~= "default"
		rz = ""
	
	if rz[] != '/'
		rz = file.Prefs(rz)
	check (rz[] == '/' or '~') ("App pref path should be 'default' or a full-path.")


function PrefsInit (|date| when=0, |config!|)
	if ._prefs
		return ._prefs!
	|| pref_path = .prefpath
		._prefs = pref_path.file.conf
	if !._prefs
		._prefs = Message(@arg, string.error)
	if when
		if when < 0: When = date.now
		app.pref("first") := when.renderint
	return ._prefs!


function SavePrefs
	opt norefcounts
	._prefs.save?
	

function Expired (|date| period, |date| From = __now__, |date|)
	|| expiry = period + from
	if date() > expiry
		return expiry
	

	
function Env (|dictionary of string|)
	cpp_wrapper JB_App__Env

function ChildEnv (|StringZeroTerminated| s, assigns:|?StringZeroTerminated| value, |int|)
	cpp_wrapper JB_App__SetEnv


function Input (|stringthatwasreadsafely|)
	cpp_Wrapper JB_App__Readline

function IsMainThread (|bool|)
	return !.IsThreadedAsLib

helper IsThreadedAsLib (|bool|)
	cpp_wrapper JB_LibIsThreaded
	
helper ParentID (|pid_int|)
	cpp_wrapper JB_App__ParentID
	
helper ID (|pid_int|)
	cpp_wrapper JB_App__ID


function sp_run  (|&cstring| args, |int| mode = 3, |errorint|)
	cpp_Wrapper JB_SP_Run

function rawargs  (|array of string|)
	cpp_wrapper JB_App__Args

function exit (|int| Code=0)
	disabled "Use app.quit instead (to avoid confusion with the 'exit' statement, which exits loops!)"


function Quit (|string| Err = "", |int| Code=0)
	cpp_wrapper JB_App__Quit

function ErrorNumber (|&int|)
	cpp_wrapper JB_App__ErrorNumber


function Name (|string|)
	disabled ".Filename (terminal) or .appname (gui package osx)"


function FileName (|string|)
	return .Path.Name


function StdIn (|File!|)
	opt norefcounts
	return ._Stdin init File.newpipe(filedes.stdin)

	
function StdOut (|File!|)
	opt norefcounts
	return ._StdOut init File.NewPipe(filedes.stdout)


function CWD (|string|)
	cpp_wrapper JB_File__CWD

function CWD (assigns:|string|, |ErrorInt|)
	return ._chdir(Value.resolve)

helper _chdir (|string| path, |ErrorInt|)
	cpp_wrapper JB_File__chdir


function LeakMarkMemory
	cpp_wrapper JB_Mem_Mark

function LeakUnMarkMemory
	cpp_wrapper JB_Mem_Unmark
	
function IsQuarantined (|bool|)	
	return .path contains "/AppTranslocation/"


function Say (|string| s, |bool| print=true,  |errorint2|)
	visible
	if print
		printline s
	return "/usr/bin/say".execute([s])
	
function AppleScript (|string| str, |ErrorInt2|)
	return "/usr/bin/osascript".execute(["-e",str], nil)


function Sudo (|string| p, |ErrorInt2|)
	return .applescript("do shell script \"$p\" with administrator privileges")


function Configure (assigns:|string|)
	|error| err
	._conf  = Value.parsewitherror(err)
	if err
		printline err.render
	._conf := message()



function Icon (assigns:|string| path)
	|| ico = path.Resolve
		.seticon(ico.cstr)

function SetIcon (|cstring| path)
	cpp_wrapper JB_App__SetIcon

function ShowURL (|string| path)
	cpp_part ShowURLStr
	.showurlc(path.cstr)

function ShowURLC (|cstring| path)
	cpp_wrapper JB_App__ShowURL
}



