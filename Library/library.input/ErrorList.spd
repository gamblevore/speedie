

|ErrorList| StdErr = ErrorList.new
|ErrorList| StdErrOriginal = stderr

// hmmm... what should I do?
// how to remove log

prototype fnErrorLogger (|errorlist| self, |string| Data)

class ErrorList
	linkage
		cpp_part Rec
		cpp_class JB_ErrorReceiver
		visible true

	contains ErrorList

	|Error|					Errors
	|fnErrorLogger| 		LogFunc
	|int|					MaxErrors
	|int|					MaxProblems
	|int|					ErrorCount
	|int|					ProblemCount
	|int|					WarnCount
	|int|					LowerErrorsTo
	|bool|					BlockErrors
	|string|				Source
	|object| 				LogObj

	constructor
		.errors = error()
		.MaxErrors = 512
		.MaxProblems = 16
		JB_API.NilHappened = nil


	function Clear
		.errors.clear
		.errorcount = 0
		.warncount = 0
		.problemcount = 0
	
	
	function OK (|bool|)
		Return self and !.errorcount
	
	function HasProblems (|bool|) // totallyok
		Return self and .errorcount or .problemcount
	
	function HasAnything (|bool|) // totallyok
		Return self and .errorcount or .problemcount or .warncount
	
	
	function NewItem (|Error|Err)	
		visible true
		if self
			self <~ err
		
	
	syntax append (|Error| Err)
		target debug
			|| CanPrint = !.BadCount and error.autoprint
		  else
			|| CanPrint = false
		target self
			#!"Speedie" // useful marker for debugging...
		
		.incr(err)
		require .CanAddMore(err.severity)
		
		err.path := .source
		if Error.KeepStackTrace
			err.StackTrace := app.StackTrace
			
		(.LogFunc)(self, err.render)?
		if CanPrint and err.IsBad
			printline err.render
		if error.autoprint and err.severity >= Errorseverity.problem
			debugat
		if error.autoprint != errorflags.PrintAndRemove
			.errors <~ err


	syntax append (|string| Err)
		cpp_part AppendStr
		self <~ error(nil, err)


	setter LogFile (|string|)
		opt norefcounts
		visible class~file
		ifn Value contains "/"
			value = file.Logs[value]
		.LogObj = value.file
		.LogFunc = LogFileWriter
	
	function LogFileWriter (fnErrorLogger)
		opt norefcounts
		visible class~file
		|| f = .LogObj
		if f isa file
			if !f.Opened
				f.OpenEmpty
			f <~ data
			

	function Incr (|error| err, |bool| add=true)
		|| n = (1, -1)(add)
		
		if err.severity == errorseverity.problem
			.problemcount += n
		  elseif err.isError
			.errorcount += n
		  elseif err.iswarning
			.warncount += n


	function Pop (|error|)
		opt norefcounts
		|| err = .errors.pop
			.incr(err, false)
			return err
		
	
	function Mark (|errormarker|)
		return .ErrorCount
	
	function Count (|int|)
		disabled "Do you mean .ErrorCount or .WarnCount, or .TotalCount?"


	function List (|error|)
		disabled "Do you mean .Errors?"

	
	render
		.rendererrors(fs, 0, false)


	function RenderErrors (|faststring| fs, |errorseverity| Level, |bool|shell, |int|)
		opt norefcounts
		require self
		for err in self
			if err.severity >= level
				RZ++
				if shell
					err.renderclang(Fs)
				  else
					err.render(fs)
				fs <~ "\n"


	render RenderErrors
		cpp_part RenderErrors0
		.rendererrors(fs, errorseverity.problem, false)
		
	
	function PrintErrors (|int|)
		return .PrintErrors(errorseverity.problem, false, false)


	function ShellPrintErrors (|int|)
		visible // for jb_main.cpp
		return .PrintErrors(errorseverity.problem, false, true)
	
	
	function PrintErrors (|errorseverity| Level, |bool| PrintCount, |bool| shell, |int|)
		cpp_part PrintErrorsMain
		|| rec = self ?? stderr

		|| fs    = faststring()
		|| Count = rec.rendererrors(fs, level, shell)$
		printerror fs.getresult
		fs.problemsfound(count)
		PrintError fs.getresult
		if Count
			return -1


	function faststring.ProblemsFound (|int| count)
		self <~ Count
		self <~ " issue"
		if Count > 1
			self <~ 's'
		self <~ " found.\n" // found."
	
	function BadCount (|int|)
		return .errorcount + .problemcount
		
	function CanAddMore (|errorseverity| level=ErrorSeverity.error, |bool|)
		require !.BlockErrors and !ErrorList.OutOfMemory
		if level == ErrorSeverity.problem
			return (.problemcount < .maxproblems)
		if level >= ErrorSeverity.error // a warning
			return (.ErrorCount < .MaxErrors)
		return (.WarnCount < .MaxErrors)
	
	
	Syntax UsingComplete
		stderr.printerrors
		stderr = self

		
	Syntax Using (|ErrorList|)
		|| old = stderr
		stderr = self
		return old
	
	function ReturnErrors
		opt norefcounts
		for e in self
			stderr <~ e

	function FirstError (|error|)
		visible
		opt norefcounts
		for err in .errors
			if Err.iserror
				return err


	module
		function OutOfMemory (|bool|)
			cpp_Wrapper JB_OutOfMemoryOccurred
			
		
	iterator
		|| curr_err = .errors.first
		while (curr_err)
			|| N = curr_err.next
			yield curr_err
			curr_err = N



extend Object
	syntax expect
		"Non-Fatal Internal Error"
		app.CrashPrint
		"${app.ObjMemory.strsize} memory used"
		stderr.NewError(nil, "Non-Fatal Internal Error")


extend string
	syntax expect
		visible
		stderr.NewError(nil, self)


function bool.OperatorPlus (|string| s, |bool|)
	// idk... kinda usel
	if self
		return true
	debugger
	error s


datatype ErrorMarker (uint)
	syntax cast (|bool|)
		return stderr.errorcount == self
