

|ErrorReceiver| StdErr = ErrorReceiver.new


prototype fnErrorLogger (|ErrorReceiver| self, |string| Data)

class ErrorReceiver
	linkage
		cpp_part Rec
		cpp_class JB_ErrorReceiver
		visible true

	contains ErrorReceiver

	|Error|					Errors
	|fnErrorLogger?| 		_LogFunc
	|object?| 				_LogObj
	|int|					MaxErrors
	|int|					MaxProblems
	|int|					ErrorCount
	|int|					ProblemCount
	|int|					WarnCount
	|int|					LowerErrorsTo
	|bool|					BlockErrors
	|string|				Source

	constructor
		.errors = error()
		.MaxErrors = 512
		.MaxProblems = 64
		JB_API.NilHappened_ = nil


	function Clear
		.errors.clear
		.errorcount = 0
		.warncount = 0
		.problemcount = 0
	
	
	function OK (|bool|)
		Return self and !.errorcount
	
	function HasProblems (|bool|) // totallyok
		Return self and (.errorcount ||| .problemcount)
	
	function HasAnything (|bool|) // totallyok
		Return self and (.errorcount ||| .problemcount ||| .warncount)
	
	syntax append (|Error| Err)
		cpp_part AppendErr
		if !self
			self = StdErr!
		target debug
			|| CanPrint = !.BadCount and error.autoprint
		  else
			|| CanPrint = false
		target self
			#!"Speedie" // useful marker for debugging...
		
		.incr(err)
		
		err.path ?= .source
		if Error.KeepStackTrace
			err.StackTrace ?= app.StackTrace
		
		|| log = ._logfunc 
			(log)(self, err.render)
		if CanPrint and err.IsBad
			printline err.render
		if error.autoprint and err.severity > Errorseverity.problem
			debugat
		if error.autoprint != errorflags.PrintAndRemove
			.errors <~ err


	syntax append (|string| LogMsg)
		cpp_part Log
		if !._LogFunc
			.LogFile = app.filename + ".log"
		|| log = ._logfunc
			(log)(self, LogMsg)


	setter LogFile (|string|)
		opt norefcounts
		ifn Value contains "/"
			value = file.Logs[value]
		if value
			._LogObj = value.file
			._LogFunc = LogFileWriter
	
	
	helper LogFileWriter (fnErrorLogger)
		opt norefcounts
		visible class~file
		|| f = ._LogObj
		if f isa file
			if !f.Opened
				f.OpenEmpty
			f <~ data
			

	function Incr (|error| err, |bool| add=true)
		|| n = (1, -1)(add)
		
		if err.severity == errorseverity.problem
			.problemcount += n
		  elseif err.isError
			.errorcount += n
		  elseif err.iswarning
			.warncount += n


	function Pop (|error|)
		opt norefcounts
		|| err = .errors.pop
			.incr(err, false)
			return err
		
	
	function Mark (|errormarker|)
		return .ErrorCount
	
	function Count (|int|)
		disabled "Do you mean .ErrorCount or .WarnCount, or .TotalCount?"


	function List (|error|)
		disabled "Do you mean .Errors?"

	
	render
		.rendererrors(fs, 0, false)


	function RenderErrors (|faststring| fs, |errorseverity| Level, |bool| shell, |int|)
		opt norefcounts
		require self
		for err in self
			if err.severity >= level
				++RZ
				if shell
					err.renderunix(Fs)
				  else
					err.render(fs)
				fs <~ "\n"


	render RenderErrors
		cpp_part RenderErrors0
		.rendererrors(fs, errorseverity.problem, false)
		
	
	function PrintErrors (|int|)
		return .PrintErrors(errorseverity.problem, false, false)


	function ShellPrintErrors (|int|)
		visible // for jb_main.cpp
		return .PrintErrors(errorseverity.problem, false, true)
	
	
	function PrintErrors (|errorseverity| Level, |bool| PrintCount, |bool| shell, |int|)
		cpp_part PrintErrorsMain
		|| rec = StdErr
		if self
			rec = self

		|| fs    = faststring()
		|| Count = rec.rendererrors(fs, level, shell)$
		printerror fs.getresult
		fs.problemsfound(count)
		PrintError fs.getresult
		if Count
			return -1


	function faststring.ProblemsFound (|int| count)
		self <~ Count of "issue"
		self <~ " found\n" // "1 issue found"
	
	function BadCount (|int|)
		visible
		return .errorcount + .problemcount
		
	function CanAddMore (|errorseverity| level=ErrorSeverity.error, |bool|)
		require !.BlockErrors and !ErrorReceiver.OutOfMemory
		if level == ErrorSeverity.problem
			return (.problemcount < .maxproblems)
		if level >= ErrorSeverity.error // a warning
			return (.ErrorCount < .MaxErrors)
		return (.WarnCount < .MaxErrors)
	
	
	Syntax UsingComplete (|object| idk=nil)
//		stderr.printerrors // note to self: don't readd this!
		stderr = self

		
	Syntax Using (|ErrorReceiver|)
		|| old = stderr
		stderr = self
		return old
	
	
	function LastError (|error|)
		visible
		opt norefcounts
		for err.reverse in .errors
			if Err.iserror
				return err


	module
		|Float64|		Progress
		function OutOfMemory (|bool|)
			cpp_Wrapper JB_OutOfMemoryOccurred
			
		
	iterator
		|| curr_err = .errors.first
		while (curr_err)
			|| N = curr_err.next
			yield curr_err
			curr_err = N
			
	constants
		NonFatal = "Non-Fatal Internal Error"



extend Object
	syntax expect
		cpp_part Fail
		printline errorreceiver.NonFatal
		app.CrashPrint
		"${app.ObjMemory.strsize} memory used"
		errorreceiver.NewError(nil, errorreceiver.NonFatal)


extend string
	syntax expect
		cpp_part Fail
		visible
		errorreceiver.NewError(nil, self)


datatype ErrorMarker (int)
	syntax cast (|bool|)
		return stderr.errorcount == self
