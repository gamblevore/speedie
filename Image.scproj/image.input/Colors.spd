

module Colors
	function Rainbow (|float| H, |float| S, |float| B, |float| A=1.0,  |vec4|)
		description "Rainbow color wheel. More orange than color.Wheel" 
//		h-=3th
//		if keys.shift
//			return .wheel(h,s,b,a)
		h = h.Fract
		h = h * 7.0
	    || i = h|int|
	    || hf = h.fract
		|| f = hf*B
		
	    if (i == 0)							// R->O
			rz = (B, f*0.5, 0, a)
	      elseif (i == 1)					// O->Y
			rz = (B, (f+B)*0.5, 0, a)
	      elseif (i == 2)					// Y->G
			rz = (B-f, B, 0,  a)
	      elseif (i == 3)					// G->T
			rz = (0, B, f, a)
	      elseif (i == 4)					// T->B
			rz = (0, B-f, B, a)
	      elseif (i == 5)					// B->P
			rz = (f, 0, B, a)			
		  else								// P->R
			rz = (B, 0, B-f, a)			
		
		|| Gray = vec4(B, A)
		rz = (rz * S) + Gray * (1.0-S)

	
	function Wheel (|float| H, |float| S, |float| B, |float| A=1.0,  |vec4|)
		description "Perceptual color wheel. Not truely HSV." 
		h = h.Fract
		h = h * 6.0
	    || i = h|int|
	    || f = h.fract
	    || p = b * (1.0 - s)
	    || q = b * (1.0 - (s * f))

		f = (2.0-f)*f // theo-addition? :o) might tweak later. Not enough red.
	    || t = b * (1.0 - (s * (1.0 - f)))
	
	    if (i == 0)
			return (b, t, p, a)
	    if (i == 1)
			return (q, b, p, a)
	    if (i == 2)
			return (p, b, t, a)
	    if (i == 3)
			return (p, q, b, a)
	    if (i == 4)
			return (t, p, b, a)
		return (b, p, q, a)
	
	function Wheel (|vec4| Y,  |vec4|)
		cpp_part WheelVec
		return .Wheel(y.r, y.g, y.b, y.a)
	
	function White (|float| alpha=1.0, |vec4|)
		return vec4(1.0, alpha)
	function Gray (|float| alpha=1.0, |vec4|)
		return vec4(0.5, alpha)
	function Black (|float| alpha=1.0, |vec4|)
		return vec4(0.0, alpha)
	function Red (|float| alpha=1.0, |vec4|)
		return vec4(1.0, 0.0, 0.0, alpha)
	function Orange (|float| alpha=1.0, |vec4|)
		return vec4(1.0, 0.5, 0.0, alpha)
	function Yellow (|float| alpha=1.0, |vec4|)
		return vec4(1.0, 1.0, 0.0, alpha)
	function Green (|float| alpha=1.0, |vec4|)
		return vec4(0.0, 1.0, 0.0, alpha)
	function Blue (|float| alpha=1.0, |vec4|)
		return vec4(0.0, 0.0, 1.0, alpha)
	function Purple (|float| alpha=1.0, |vec4|)
		return vec4(0.5, 0.0, 1.0, alpha)
	function Magenta (|float| alpha=1.0, |vec4|)
		return vec4(1.0, 0.0, 1.0, alpha)
	function Brown (|float| alpha=1.0, |vec4|)
		return vec4(1.0, 0.5, 0.25, alpha)
	function Clear (|vec4|)
		0 // lol

insertion
	black	colors.black(_0)
	gray	colors.gray(_0)
	white	colors.white(_0)


datatype PreMultipliedColor (ivec4)


function imagepixel.PreMul (|PreMultipliedColor|)
	return .Color.PreMul


function vec4.PreMul (|PreMultipliedColor|)
	|| M = .Clamp
	|| A = m.a
	m = (m * (A * 255.0)) + 0.25
	m.a = (1.0-A) * 64.0K
	return m.ivec4|PreMultipliedColor|


function errorseverity.color (|vec4|)
	if self == ErrorSeverity.Warning
		return colors.yellow
	if self == ErrorSeverity.Problem
		return Colors.Orange
	if self < ErrorSeverity.Warning
		return colors.White
	return colors.red
	
