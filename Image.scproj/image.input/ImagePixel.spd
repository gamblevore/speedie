


struct ImagePixel
	|byte| R
	|byte| G
	|byte| B
	|byte| A
	linkage
		datatype true
		cpp_part pix
		opt min 3

	constructor
		self <~ (0,0,0,255)
		

	render
		fs <~ "0c"
		fs.appendhex(.r)
		fs.appendhex(.g)
		fs.appendhex(.b)
		fs.appendhex(.a)
	
	
	function Load (|message| f)
		opt norefcounts
		cpp_Part LoadMsg
		if f
			.load(f.value)
	
	function Load (|string| s)
		if s[0, "0c"]
			s = s[2...]
		for i in 4
			|| v = 0
			|| c = s[i*2, i*2+2]
				v = c.parsehex|int|
			  elseif i == 3
				v = 255
			.SyntaxAccess(i) = v
	
	function Lum (|float|)
		return .color.lum

	function RndSolid
		|uint| rnd = random.shared.int
		self <~ rnd
		.a = 0xff
	
	function HasColor (|bool|)
		return .r or .g or .b

	function HasAny (|bool|)
		return *(self|&int|)
			
	syntax cast (|bool|)
		cpp_part Exists
		return .hascolor

	syntax cast (|vec4|)
		cpp_part CastVec4
		return .color

	function Equals (|imagepixel|p, |bool|)
		return .uint == p.uint
	
	syntax append (|int| r, |int| g, |int| b, |int| a=255)
		cpp_part AppendInts
		.R=r.clamp(255)
		.g=g.clamp(255)
		.b=b.clamp(255)
		.a=a.clamp(255)
		
	function Alpha (assigns:|float|a)
		a = (a * 255.0) + 0.25
		.a = a.clamp(255)
		
	syntax append (|&imagepixel| r)
		* self = *r

	syntax append (|vec4| V)
		cpp_part AppendVec
		v = (v * 255.0) + 0.25
		self <~ (v.r, v.g, v.b, v.a)

	syntax append (|vec3| V)
		cpp_part AppendVec3
		self <~ ((V,1.0))
		
	syntax append (|ivec4| V)
		cpp_part AppendIvec
		self <~ (v.r, v.g, v.b, v.a)

	syntax append (|uint| P)
		cpp_part AppendUint
		(self|&uint|)[0] = p

	function Solid (|uint|)
		|| d = self|&uint|
		return d[0]

	function Add (|float| c)
		|int| v = (c * 255.0) + 0.25
		.rgb = .raw + v 

	function AddInt (|int| i)
		.r += i
		.g += i
		.b += i
		
	function Add (|vec4| c)
		cpp_part AddVec
		self <~ (c+.Color)

	function RGB (assigns:|ivec4|w)
		cpp_part rbgsetints
		w = w.clamp(0,255)
		.R=w.r
		.g=w.g
		.b=w.b

	function RGB (assigns:|vec4|v)
		cpp_part rbgsetfloats
		v = (v * 255.0) + 0.25
		.R=v.r
		.g=v.g
		.b=v.b
		
	function Gray (|float|)
		return  .R + .G + .B
		
	function Brightness (|float|)
		return .Gray * 765th
		
	syntax append (|float| v)
		cpp_part AppendFloat
		self <~ ((v,v,v,1.0))
		
	operator mul (|float| F, |vec4|)
		cpp_Part Mul
		return .color * F
	
	operator mul (|vec4| F, |vec4|)
		cpp_Part MulVec
		return .color * F
	
	function Overlay (|vec4| T)
		|| C = mix(self, T, T.a)
		self <~ c // why not set .a also? would mean I can store it using __builtinconvert

	function Underlay (|vec4| b) 
		|| Old = .color
		|| C = mix(b, Old, Old.a)
		C.a = old.a
		self <~ C 
	
	
	function Take (|&uint| r)
		(self|&uint|)[0] = r[0]

	function Color (|vec4|)
		return vec4.load(self|&byte|) * 255th
		
	function Raw (|ivec4|)
		return ivec4.load(self|&byte|)
	
	function Uint (|uint|)
		return self|&uint|[0]
	
	function RGB (|ivec3|)
		return (.r, .g, .b)
	
	function Color (assigns:|vec4|R)
		self <~ R
		
	syntax access (assigns:|int|R)
		cpp_Part SetAll
		self <~ (r, r, r)
		
	syntax access (|int|i, assigns:|int|v)
		cpp_Part SetPart
		|| b = &.r
		b[i] = v
	
	function vec4.px (|imagepixel|)
		rz <~ self
	function vec3.px (|imagepixel|)
		rz <~ self
	function ivec4.px (|imagepixel|)
		rz <~ self

	module 
		|ImagePixel| Bad
		|ImagePixel| White
		|ImagePixel| Clear
		init()
		function Init
			white <~ (1.0)
		function Char (|codepoint| c, |&imagepixel|)
			if c&1
				return .white
			return .clear


extend vec3
	syntax cast (|imagepixel|)
		rz <~ self
extend vec4
	syntax cast (|imagepixel|)
		rz <~ self
extend ivec4
	syntax cast (|imagepixel|)
		rz <~ self
		


module Colors
	function White (|float| alpha=1.0, |imagepixel|)
		|| v = (1.0, 1.0, 1.0, alpha)
		rz <~ v
	function Gray (|float| alpha=1.0, |imagepixel|)
		|| v = (0.5, 0.5, 0.5, alpha)
		rz <~ v
	function Red (|float| alpha=1.0, |imagepixel|)
		|| v = (1.0, 0.0, 0.0, alpha)
		rz <~ v
	// these could be... thingies? a~b thingies :)
	// macros :) adjs 1.0~gray
	function Black (|float| alpha=1.0, |imagepixel|)
		|| v = (0.0, 0.0, 0.0, alpha)
		rz <~ v
	function Clear (|imagepixel|)
		0 // lol
