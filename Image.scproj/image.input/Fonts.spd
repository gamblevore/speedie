

module font
	|image| small_
	function Small (|Image|)
		opt norefcounts
		return .small_ init ( img://SmallFont.png ).fontload
	constants
		Width = 6 
		Height = 9 


function image.DrawText (|string| Str, |ivec2| xy, |vec4| Col = colors.clear, |bool| DrawInvis=false, |int|)
	opt norefcounts
	|| sf = font.small
		return sf.DrawFont(str, xy, col, drawinvis, self)

		
function image.DrawFont (|string| Str, |ivec2| xy, |vec4| Col, |bool| DrawInvis, |image| Where, |int|)
	opt min 3
	
	require (str and Where.Pixels and .Pixels)

	|| i = 0	
	for (c.codepoints in str) (ptr)
		|codepoint| pc = c.SetSign(drawinvis)
		pc = pc.ImproveDraw(str, ptr - str.addr)
		.DrawChar(pc, Where, xy, Col)

		|| w = (1, i.tabsWidth)(c != '\t')
		i += w
		xy.x += w * font.width
	return xy.x


function image.DrawTextWrap (|string| Str, |image| Where, |ivec2| xy, |vec4| Col, |int| H)
	opt min 3
	|| lines = (H / 12) max 1
	if lines <= 1
		.Drawfont(str, xy, col, false, where)
		return
	
	// how can we make this do tabs?
	// use the standard textview drawer?
	// how to pass it in?
	
	|| i  = 0
	|| mw = where.ControlClip.width/font.width
	while (i < str.length) and (lines >= 1)
		|| p = i
		i = str.WrapSub(mw, false, p)
		|| ttt = str[p, i]
		.DrawFont(ttt, xy, col, false, where)
		xy.y -= 12
		lines--



helper string.FontLoad (|image|)
	rz = .LoadQOI$
	|| blank = colors.clear
	for v in rz
		if !v.hascolor or !v.a
			v <~ blank

	for c in rz.width/6
		if c > 32
			rz.FontCleanupChar((c*6, 0))


	
function image.FontCleanupChar (|ivec2| s)
	for v in (6, 8)
		|| p = v+s
		|| c = self[p].color
		self[p] <~ c.FontPixelCleanup



function vec4.FontPixelCleanup (|vec4|)
	|| full		= 0.95 // fair?
	|| total	= (.x+.y+.z)/3.0
	require total >= 0.1
	
	rz = vec4(1)
	if total < full						// "anything above this is 100% white"
		rz.a = total/full				// anything else... is white, but less opaque



function image.DrawIcon (|CodePoint| C, |image| Where, |ivec2| XY, |vec4| Col=colors.white)
	.drawchar(c, where, xy, col, 0) 


function image.DrawChar (|CodePoint| C, |image| Where, |ivec2| XY, |vec4| Col, |int| DrawMode=1)
	opt min 3
	if c.iswhite
		return
	if c|int| < 0
		c = -c // draw white-space

	|uint64| MissingChar = 0
	if c == 0xAB
		c = 128
	  elseif c == 0xBB
		c = 129
	  elseif c >= 130 and c <= 133
		0 // idk
	  elseif c == 0x2261
		c = 13
	  elseif c >= 0x80
		MissingChar = c.hash
		c = 0x80
	
	// (mode 1)== normal
		// emoji-letter: draw it as-is. no recolor.
	// mode 0 == colored icons
		// emoji-letter: gets recolored
	// letter-pixels: totally recolor using col, either way.

	if !col.a and (drawmode == 1)
		col = colors.white
	
	|| Read		= (font.Width, font.Height-1)
	|| Clip		= where.clip((XY, xy+Read))
	require clip.ispositive
	
	|| X2  		= C|int| * font.Width
	|| v0		= (X2, 0) - xy
	if (c < 32) and (col == vec4(1) or drawmode == 1)
		drawmode = -1
	  elseif drawmode == 1
		drawmode = (col.a*255.0)|int| + 1

	|| y = 0
	while clip.y < clip.y2
		|| sz = self[v0 + clip.xy]
		|| dz = where[clip.xy]
		for ww in clip.width
			if (MissingChar)
				sz = &imagepixel.clear
				if (ww-1 inrange 4) and y-1 inrange 6
					sz = imagepixel.char(missingchar)
					MissingChar>>=1
			
			if sz[]
				if drawmode > 0
					|| A = (sz.a + 1) * DrawMode
					|| c2 = col
					if A < 64K									
						|| f = A|float| * 65536th
						c2 = mix(dz.color, c2, f)				// transparent pixel
					dz <~ c2
				  elseif drawmode < 0
					dz <~ sz									// emoji direct
				  else
					dz <~ mix(sz.color, col, col.a)				// emoji darkened
			sz++
			dz++
		clip.y++
		y++




