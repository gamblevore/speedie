
//  https:github.com/grimfang4/SDL_FontCache
//  TTF_Font* Sans = TTF_OpenFont("Sans.ttf", 24) this opens a font style and sets a size
//
//  SDL_Color White = {255, 255, 255}   this is the color in rgb format, maxing out all would give you the color white, and it will be your text's color
//
//  SDL_Surface* surfaceMessage = TTF_RenderText_Solid(Sans, "put your text here", White)  as TTF_RenderText_Solid could only be used on SDL_Surface then you have to create the surface first
//
//  SDL_Texture* Message = SDL_CreateTextureFromSurface(renderer, surfaceMessage) now you can convert it into a texture
//
//  SDL_Rect Message_rect create a rect
//  Message_rect.x = 0  controls the rect's x coordinate 
//  Message_rect.y = 0  controls the rect's y coordinte
//  Message_rect.w = 100  controls the width of the rect
//  Message_rect.h = 100  controls the height of the rect
//
//  Mind you that (0,0) is on the top left of the window/screen, think a rect as the text's box, that way it would be very simple to understand
//
//  Now since it's a texture, you have to put RenderCopy in your game loop area, the area where the whole code executes
//
//  SDL_RenderCopy(renderer, Message, NULL, &Message_rect) you put the renderer's name first, the Message, the crop size(you can ignore this if you don't want to dabble with cropping), and the rect which is the size and coordinate of your texture
//
//  Don't forget to free your surface and texture
//  SDL_FreeSurface(surfaceMessage)
//  SDL_DestroyTexture(Message)




module font
	|image| small_
	function Small (|Image|)
		opt norefcounts
		return .small_ init ( img://SmallFont.png ).fontload
	constants
		Width = 6 
		Height = 9 


function image.DrawText (|string| Str, |image| Where, |ivec2| xy=(0,0), |vec4| Col = colors.clear, |bool| DrawInvis=false, |int|)
	opt min 3
	require (str and Where.Pixels and .Pixels)
	for c.codepoints in str
		if DrawInvis
			c = -c
		|| next = .DrawChar(c, Where, xy, Col)#loop
		xy.x = next
	return xy.x
		


function image.DrawTextWrap (|string| Str, |image| Where, |ivec2| xy, |vec4| Col, |int| H)
	opt min 3
	|| lines = (H / 12) max 1
	if lines <= 1
		.DrawText(str, where, xy, col)
		return
		
	|| i	= 0
	|| mw	= where.ControlClip.width/font.width
	while (i < str.length) and lines >= 1
		|| p = i
		i = str.wrapsub(mw, false, p)
		|| ttt = str[p, i]
		.DrawText(ttt, where, xy, col)
		xy.y -= 12
		lines--


helper string.FontLoad (|image|)
	rz = .LoadQOI$
	|| blank = colors.clear
	for v in rz
		if !v.hascolor or !v.a
			v <~ blank

	for c in rz.width/6
		if c > 32
			rz.FontCleanupChar((c*6, 0))

	
function image.FontCleanupChar (|ivec2| s)
	for v in (6, 8)
		|| p = v+s
		|| c = self[p].color
		self[p] <~ c.FontPixelCleanup


function vec4.FontPixelCleanup (|vec4|)
	|| full		= 0.95 // fair?
	|| total	= (.x+.y+.z)/3.0
	require total >= 0.1
	
	rz = vec4(1)
	if total < full						// "anything above this is 100% white"
		rz.a = total/full				// anything else... is white, but less opaque



function image.DrawIcon (|CodePoint| C, |image| Where, |ivec2| XY, |vec4| Col=colors.white)
	.drawchar(c, where, xy, col, 0) 


function image.DrawChar (|CodePoint| C, |image| Where, |ivec2| XY, |vec4| Col, |int| DrawMode=1, |int|)
	opt min 3
	rz = (font.Width + XY.x) max 1
	if c.iswhite
		return rz
	if c|int| < 0: c = -c // draw white-space
	|uint64| MissingChar = 0
	if c == 0xAB
		c = 128
	  elseif c == 0xBB
		c = 129
	  elseif c >= 130 and c <= 133
		0 // idk
	  elseif c >= 0x80
		MissingChar = c.hash
		c = 0x80
	
	// (mode 1)== normal
		// emoji-letter: draw it as-is. no recolor.
	// mode 0 == colored icons
		// emoji-letter: gets recolored
	// letter-pixels: totally recolor using col, either way.

	if !col.a and (drawmode == 1)
		col = colors.white
	
	|| Read		= (font.Width, font.Height-1)
	|| Clip		= where.clip((XY, xy+Read))
	if !clip.ispositive
		return rz
	
	|| X2  		= C|int| * font.Width
	|| v0		= (X2, 0) - xy
	if (c < 32) and (col == vec4(1) or drawmode == 1)
		drawmode = -1
	  elseif drawmode == 1
		drawmode = (col.a*255.0)|int| + 1

	|| y = 0
	while clip.y < clip.y2
		|| sz = self[v0 + clip.xy]
		|| dz = where[clip.xy]
		for ww in clip.width
			if (MissingChar)
				sz = &imagepixel.clear
				if (ww-1 inrange 4) and y-1 inrange 6
					sz = imagepixel.char(missingchar)
					MissingChar>>=1
					
			
			if sz.uint
				if drawmode > 0
					|| A = (sz.a + 1) * DrawMode
					if A >= 64K									
						dz <~ col								// opaque pixel
					  else
						|| f = A|float| * 65536th
						dz <~ mix(dz.color, col, f)			// transparent pixel
				  elseif drawmode < 0
					dz <~ sz									// emoji direct
				  else
					dz <~ mix(sz.color, col, col.a)			// emoji darkened
			sz++
			dz++
		clip.y++
		y++


function message.Now (||)
	|| a = .slowcount #require
	|int| b = date.now mod a
	return self[b]

		
function string.EndsWithLine (|bool|)
	return .last.IsTextLine

