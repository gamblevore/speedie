

function DebugArgsKeyDown (GUIKeyEvent)
	opt norefcounts
	if key.IsCancel
		.window!.setfocus(nil)
		return true
	

function FoundListKeys (GuiKeyEvent)
	opt norefcounts
	if key.IsDelete
		if self isa ListView
			|| s = .FirstSelected
				.RemoveRow(s)
		return true


function DebugArgsGotFocus (guiaction)
	opt norefcounts
	|| vis = state == 1
	if  self isa textview
		.InitDebugArgs
		if !vis
			.save
	.SlideOpen(0.125s, (movecode.open)(vis) )


function textview.InitDebugArgs
	if !.Document
		|| f = .ide.DebugArgsFile
		.LoadDocument(Document(f))
	.text := DefaultFiles.DebugArgs
		

function fnStillRunning (fnConfirmCanceller)
	if self isa perryide
		.UpdateDebuggedApp(false)
		return !.RunCompiledApp

	
function Window.Confirm (|string| Q, |fnConfirmCanceller| fn, |bool|)
	|| can = ConfirmCanceller(self, fn)
	if q.confirm(can)
		return true


function perryide.MakeNothingRunning (|string| reason, |bool|)
	|| prod = .runcompiledapp
		if .confirm("Kill running product " + .Name + Reason, fnStillRunning)
			prod.TryKillingChildren()
			prod.kill
			.UpdateDebuggedApp(true)
			prod = nil
	return !prod



function ClickedDebug (GUIAction)
	|| i = .ide
	if .text == "\02"		// play
		require i.MakeNothingRunning(" before debugging?")
		i.DebugIsWaitingForCompile = true
		i.compile("debug")
		i.ShowText(i.ProductOut, "", false)
		|| itm = i.CompileTabs.items[3]
			(itm is hidden)
		i.ProductErrors.text = ""
	  elseif .text == "\07" // stop
		require i.MakeNothingRunning("?")


function PressingDebug (GUIAction)
	opt norefcounts
	|| i = .ide
	i.DebugArgsList.setfocus


function PerryIDE.DebugEnvs (|message| env)
	opt norefcounts
	for rel in env
		|| ch2 = rel[2]
		if ch2 and rel[1] == "="
			app.ChildEnv(rel.first!.name) = ch2.name


function PerryIDE.DebugActualStr (|file| f, |[string]| args, |faststring|)
	rz = FastString()
	rz <~ f.name
	rz <~ ":"
	for a in args
		rz <~ ","
		start
		rz <~ " "
		rz.AppendQuotedEscape(a)


function perryide.DebugActual (|file| f, |[string]| args) // actuallyruncompiledapp, runproduct, actualdebug, debugproduct
	|| out = .DebugActualStr(F, args)
	.LogOneAction(@emb + out.Copy)
	out <~ ("\n", 2)
	|| r = Process.stream(f, args, out)
	.RunCompiledApp = r
	if r and r.PID
		.RunButton.text = "\07"


function perryide.DebugPath (|file| f, |message| conf)
	|| p = .Project
	if !p.isdir
		p = p.Parent
	app.cwd = p
	
	|| pwd = conf["pwd"]
		|| path = pwd.goodname
		if pwd != "."
			app.cwd = path


function PerryIDE.StartDebugging (|file!| f)
	require f.MustExist and StdErr.ok

	.DebugArgsList.InitDebugArgs
	|| debugargs = .DebugArgslist.text.parse		#require
	|| ArgMsg = DebugArgs["args"]					#require
	ArgMsg = ArgMsg.Copy
	for a in ArgMsg
		if a == @arel
			expect (a == "?") (a)
			|| str = a.firstname.Ask				#require
			a.Become(@str, str)
			a.clear
				
	|| args = argmsg.AllNames
	if debugargs["flags"]["open"].yes
		check (!args) (ArgMsg, "You can't pass arguments, when using open-flags")
		args = [f]
		f = "/usr/bin/open".file
	  elseif f.IsDir and Platform.OSX
		f = f.Child("Contents/MacOS/" + f.TrimExtAndPath)!
	
	|| old = app.cwd
	.DebugPath(f, debugargs)	
	.DebugEnvs(debugargs["env"])		
	.DebugActual(f, args)

	if !StdErr.ok
		.DebugArgsList.FillErrors(StdErr)
		|| err = StdErr.LastError
			Notifications <~ err
	app.cwd = old


function PerryIDE.CompileTab (|int| i, |listviewrow|) // for autocomplete
	return .CompileTabs.items[i]


function PerryIDE.AddProductErr (|string| err)
	if err
		.ProductErrors <~ err
		|| t = .CompileTab(3)$
		if .ProductSep.iscollapsed or t is hidden
			.ShowText(.ProductErrors, nil, true)
		(t isnt hidden)


function PerryIDE.UpdateDebuggedApp (|bool| Kill, |bool|)
	|| r = .RunCompiledApp						#require

	|| rout = r.Output
	if !(r.userflags&1) and rout and rout.length
		.ShowCompileTab(.productout, true)
		r.userflags |= 1
	
	r.step
	if kill or !r.IsRunning
		.RunCompiledApp = nil
		.RunButton.text = "\02"
	
	.ProductOut <~ rout
	.AddProductErr(r.ErrorOutput)
	
	if kill
		.ProductOut <~ "\n(--Process Killed--)"
	  elseif !r.IsRunning
		|| exitcode = "\n(--Exit OK--)"
		if r.exit > 0
			exitcode = "\n(--Exit Error: ${r.Exit}--)"
			.addProductErr(exitcode)
		.ProductOut <~ exitcode
	
	return !kill
		

function Process.TryKillingChildren
//	|| fs = faststring()
//	|| args = ["-A", "-o", "'ppid pid'"]
//	|| result = "/bin/ps".Execute(args, fs)
//	debugger
//	printline fs
// just doesnt work


