


|| DebugGUI = false

function DebugABC1 (|int| i, |int|)
	|| n = i*9
	n++
	return n

function DebugABC11 (|int| i, |int|)
	return i*9 + 1


function DebugABC2
	|| n = "def".length
	|| i = 2 * 3
	for 4
		n *= n + 3

function DebugABC2 (|int| x, |int|)
	|| n = 1
	if x
		n = 2
	  else
		n = 3
	return n + 1


function DebugArgsKeyDown (GUIKeyEvent)
	opt norefcounts
	if key.IsCancel
		.window!.SetFocus(nil)
		return true


function DeleteableListKeys (GuiKeyEvent)
	opt norefcounts
	require key.IsDelete
	if self isa ListView
		|| s = .FirstSelected
			|| p = s.parent
			.RemoveRow(s)
			if !p.HasAny
				.RemoveRow(p)
	return true


function DebugArgsGotFocus (guiaction)
	opt norefcounts
	|| vis = state == 1
	if  self isa textview
		.InitDebugArgs
		if !vis
			.save
	|| Durr = movecode.open.flip(vis)
	.SlideOpen(0.2s, Durr)


function textview.InitDebugArgs
	if !.Document
		|| f = .ide.DebugArgsFile
		.LoadDocument(Document(f), true)
	.text ?= templates.DebugArgs
		

function fnStillRunning (fnConfirmCanceller)
	if self isa perryide
		.UpdateDebuggedApp(false)
		return !.RunCompiledApp

	
function Window.Confirm (|string| Q, |fnConfirmCanceller| fn, |bool|)
	|| can = ConfirmCanceller(self, fn)
	if q.confirm(can)
		return true


function PerryIDE.MakeNothingRunning (|string| reason, |bool|)
	|| prod = .runcompiledapp
		if .confirm("Kill running product " + .Name + Reason, fnStillRunning)
			prod.kill(-1)
			.UpdateDebuggedApp(true)
			prod = nil
	return !prod



function ClickedDebug (GUIAction)
	|| i = .ide
	if .text == "\02"		// play
		require i.MakeNothingRunning(" before debugging?")
		i.DebugIsWaitingForCompile = true
		i.compile("debug")
		i.ShowText(i.ProductOut, "", false)
		|| itm = i.CompileTabs.items[3]
			(itm is hidden)
		i.ProductErrors.text = ""
	  elseif .text == "\07" // stop
		require i.MakeNothingRunning("?")


function PressingDebug (GUIAction)
	opt norefcounts
	|| db = .ide.DebugArgsText
	if db.HasAnyFocus
		db.ClearFocus
	  else
		db.setfocus


function PerryIDE.DebugEnvs (|message| env)
	opt norefcounts
	for rel in env
		|| ch2 = rel[2]
		if ch2 and rel[1] == "="
			app.ChildEnv(rel.first!.name) = ch2.name


function PerryIDE.DebugAppCallArgsDisplay (|file| f, |[string]| args, |faststring|)
	#!------
	rz = FastString()
	rz <~ f.name
	rz <~ ":"
	for a in args
		rz <~ ","
		start
		rz <~ " "
		rz.AppendQuotedEscape(a)


function PerryIDE.DebugActual (|file| f, |[string]| args) // actuallyruncompiledapp, runproduct, actualdebug, debugproduct
	|| out = .DebugAppCallArgsDisplay(F, args)
	.LogOneAction(@emb + out.Copy)
	out <~ ("\n", 2)
	|| r = Process.stream(f, args, out, faststring(), ProcessOwnerMode.OwnGroup)
	.RunCompiledApp = r
	if r and r.PID
		.ShowProductIfMoreOutput = out.Length
		.RunButton.text = "\07"


function PerryIDE.DebugPath (|message| conf)
	|| p = .Project
	if !p.isdir
		p = p.Parent
	app.cwd = p
	
	|| pwd = conf["pwd"]
		|| path = pwd.goodname
		if pwd != "."
			app.cwd = path


function PerryIDE.StartDebugging (|file!| f)
	require f.MustExist and StdErr.ok

	.DebugArgsText.InitDebugArgs
	|| DebugArgs = .DebugArgsText.text.parse		#require
	|| ArgMsg = DebugArgs["args"]					#require
	ArgMsg = ArgMsg.Copy
	for a in ArgMsg
		if a == @arel
			expect (a == "?") (a)
			|| str = a.firstname.Ask				#require
			a.Become(@str, str)
			a.clear
				
	|| args = ArgMsg.AllNames
	if debugargs["flags"]["open"].yes
		check (!args) (ArgMsg, "You can't pass arguments, when using open-flags")
		args = [f]
		f = "/usr/bin/open".file
	  elseif f.IsDir and Platform.OSX
		f = f.Child("Contents/MacOS/" + f.TrimExtAndPath)!
	
	|| old = app.cwd
	.DebugPath(debugargs)	
	.DebugEnvs(debugargs["env"])		
	.DebugActual(f, args)

	if !StdErr.ok
		.DebugArgsText.FillErrors(StdErr)
		|| err = StdErr.LastError
			Notifications <~ err
	app.cwd = old


function PerryIDE.CompileTab (|int| i, |listviewrow|) // for autocomplete
	return .CompileTabs.items[i]


function PerryIDE.AddProductErr (|string| err)
	if err
		.ProductErrors.log(err)
		|| t = .CompileTab(3)$
		if .ProductSep.iscollapsed or t is hidden
			.ShowText(.ProductErrors, nil, true)
		(t isnt hidden)


function PerryIDE.UpdateProductText (|process| r)
	|| rout = r.Output
	if rout and rout.length
		.ProductOut.Log(rout, 256K)
		if !(r.userflags&1)
			.ShowCompileTab(.productout)
			r.userflags |= 1 // remove userflags next time and use OutputShouldOpenWithinDebug?/??
		if .ShowProductIfMoreOutput < .ProductOut.Length
			.ShowProductIfMoreOutput = int.max // no more updates
			.CompileTabSelect(.ProductOut)
			.ProductSep.Show
	
	
function PerryIDE.UpdateDebuggedApp (|bool| Kill, |bool|)
	|| r = .RunCompiledApp						#require

	r.step
	.UpdateProductText(r)
	
	|| x = r.Status
	if kill or !x.IsRunning
		.RunCompiledApp = nil
		.RunButton.text = "\02"
	
	.AddProductErr(r.ErrorOutput)
	
	if kill
		.ProductOut.log("\n(--Process Killed--)")
	  elseif !x.IsRunning
		|| exitcode = "\n(--Exit OK--)"
		if x > 0
			exitcode = "\n(--Exit Error: ${x}--)"
			.addProductErr(exitcode)
		.ProductOut.log(exitcode)
	
	return !kill
		

function ClickedStack (GUIListEvent)
	require row
	|| path = row.firstname
	|| i = .ide	

	i.EditPath(path, false)
	i.editme.ShowAndSel(row.last.int, true)
	return true


function ReturnStack (guilistevent) // show ASM?
	return ClickedStack(self, row)
	

function ClickedVariables (GUIListEvent)
//	return ClickedStack(self, row)
	

function ReturnVariables (GUIListEvent)
	return ClickedStack(self, row)
	
	
function DebugStepOver (guiaction)
	beep "over"
	
function DebugStepIn (guiaction)
	beep "in"
	
function DebugStepOut (guiaction)
	beep "out"
	
function DebugStepRun (guiaction)
	beep "run"
	



function ClickedASMButton (guiaction)
	opt norefcounts
	|| i = .ide
	|| v = i.ASMView
	v.clear
	if v is Visible
		i.hideasm
		return true

	i.CurrASMFunc = nil
	expect (i.UpdateASM) (beep)
	(v is visible)
	v.AddFail "Displaying ASM..."



function perryide.TryReselectASM (|bool|)
	require !.DuringASMEvent and (.ASMView is Visible)
	.DuringASMEvent = true
	.UpdateASM
	.ReselectASM
	.DuringASMEvent = false


function perryide.ReselectASM
	opt norefcounts
	|| i = .editme.SelectedLine.Position
	for s in .ASMView.ListSource
		if !(s.name contains "JUMP: ") and (s.first.int >= i)
			.ASMView.Select(s)
			exit
	
	
function perryide.HideASM
	(.ASMView isnt visible)
	.ASMView.clear
	.CurrASMFunc = nil


function perryide.UpdateASM (|bool|)
	opt norefcounts
	|| fn = .CurrSelFunc
	if fn != .CurrASMFunc
		.CurrASMFunc = fn
		return fn and .MaybeSendMessage("asm", fn)
	

function ListView.AddFail (|string| s)
	|| D = listviewstate.disabled ||| listviewstate.aligncenter ||| listviewstate.Disabled
	self <~ ListViewRow(s, D)



function perryide.GotASM (|message| asm)
	.DuringASMEvent = true
	.GotASMSub(asm)
	.ReselectASM
	.DuringASMEvent = false


function perryide.GotASMSub (|message| asm)
	|listviewrow| name = asm.first$
	|| l = .ASMView
	l.clear
	|| src = l.ListSource
	(name is AlignCenter)
//	(name is disabled) // nice to copy the name
	src <~ name
	|| arg = asm.last
	if !arg.HasAny
		l.AddFail "--(ASM Unavailable)--"
	
	|| n = 0
	|message| file
	for s in arg
		if s == "file"
			file = s.first
		  else
			n++
			|| cpy = s.copy
			src <~ cpy
			cpy.obj = file.name
	name.name = "function " + name.name + " (" + n.render + ")"
	


function ASMViewKeys (guikeyevent)
	if key.IsCancel
		(self isnt visible)


function SelectedASM (guilistevent)
	require row
	|| i = .ide
	require !i.DuringASMEvent
	|| file = row.obj as string				#require
	|| n = row.first.int
	i.DuringASMEvent = true
	i.EditPath(file.name, false)
	i.editme.ShowAndSel(n, true)
	i.DuringASMEvent = false

