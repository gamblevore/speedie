
 
function FileSepClicker (guiaction)
	opt norefcounts
	.ide.ViewAsSwap


function perryide.UnusedFuncsFB (|message| stuff)
	opt norefcounts
	|| arg = stuff.last
	require arg == @arg
	|| where = stuff.firstname
	for tmp in arg
		.unused_hoe(tmp, where)


function perryide.unused_hoe (|message| tmp, |string| where)
	|| err = error(nil, tmp.name, ErrorSeverity.warning, where )
	err.position = tmp.first.int
	.editme.LineErrorAdd(err)


function IdeAddProj (|string| Path, |PerryIDE| ide = nil, |PerryIDE!|) // initide
	|| old = perry.FindProj(path)
		ClickedTabs(nil, old)
		|| o = old.ide
			return o
	ide := PerryIDE.EmptyBase
	ide := PerryIDE(path.file)
	ide.LoadProject
	return ide


function string.TrimCodeExt (|string|)
	if .PathIsCode
		return .TrimExtAndPath
	return self


function Perry.CreateProj (|string| path)
	|| proj = path.file
	|| Main = defaultfiles.EmptyMainFile(proj.trimextandpath)
		
	ifn path isa "scproj"
		require path.file.CreateEmpty
		if path isa "spd"
			proj.data = main
	  else
		expect (!path.fileexists) (path, "Can't create over existing project.")

		proj.child("input/main.spd")!.data(Main) #require

		|| R = defaultfiles.Roots
		|| T = defaultfiles.Todo
		proj.child(".perry")!.data = R
		proj.child("input/.todo")!.data = T
	IdeAddProj(path)


function ClickedOpenProj (GUIaction)
	|| start		= "~/".resolve
	|| path			= app.AskOpen("spd,scproj/,input/", start, "Open Project", "Open", "OpenProj")	#require
	|| better_path	= path.GetSpeedieProj
		IdeAddProj(better_path)
	  else
		IdeAddProj(path)
	perry.HideStartIfNeeded


function ClickedCreateProj (GUIAction)
	|| path = app.AskSave("scproj/",  "",  "New Project",  "Create", "OpenProj")
		perry.CreateProj(path)
	perry.HideStartIfNeeded


function ClickedOpenFile (GUIaction)
	|| file = app.AskOpen("",  "",  "Open File", "Open", "OpenProj")
		IdeAddProj(file)
	perry.HideStartIfNeeded


function ClickedCreateFile (GUIaction)
	|| path = app.AskSave("spd",  "",  "New File",  "New", "OpenProj")
		perry.CreateProj(path)
	perry.HideStartIfNeeded


function perry.HideStartifneeded
	if .projects.hasany
		startupwindow.hide
		
	
function ClickedTabs (GUIAction)
	opt norefcounts
	|| i = row.ide
		i.ShowIDE(True)


function ClickedCompileTabs (Guiaction)
	opt norefcounts
	.ide.CompileTabSelect(row)


function PerryIDE.CompileTabSelect (|object| Desired, |bool| select=false)	
	opt norefcounts
	for i in .CompileTabs.Items
		|| obj = i.obj as textview
			|| vis = (Desired == i or obj)
			(i is selected)  = vis
			(obj is visible) = vis
			if vis and select
				obj.ScrollToEnd		


function ClickedToolbar (GUIAction)
	opt norefcounts
	if self isa ButtonView
		if (.clickcount == 2)
			.ide.ViewAsSwap


function file.InputFol (|file|)
	for c.files in self
		if  c.name ~= "input"  or  c isa "input"
			return c


function file.FindProjectMain (|file|)
	|| inp = .inputfol$
	|| best = inp.child("main.spd")
	if best.exists
		return best
	best = inp.child("index.spd")
	if best.exists
		return best
	for c.files in inp
		if c.isSource
			return c


function PerryIDE.FindNotTodo (|bool|)
	if .IsSingleFileProject
		|| c = .CurrFileRow
		|| root = .FileList[0]
		if c != root
			.NotTodo = c
	if !.nottodo
		.nottodo = .LocateProjRoot("./main.spd")
		if !.nottodo
			.nottodo = .LocateProjRoot("./index.spd")
			if !.nottodo
				.nottodo = .MainProjFol
	return .nottodo


function PerryIDE.ClickedTodo
	|| fl	= .filelist
	|| todo	= .MainProjFol ?? fl[0]
	require .FindNotTodo // what? fl is nil? it happened tho?
	if !todo
		todo = fl[0]
	|| Jumpback = (todo is selected) and .nottodo and (fl.listsource contains .nottodo) 
		todo = .NotTodo
		fl.show(todo)
		fl.scrolljump
	  else
		.nottodo = .CurrFileRow
	fl.SelectNoShow(todo)


//function HeldReleaseButton (GUIaction)
//	if self isa buttonview
//		if !.OpenMenu
//			.ide.notify("No build-tasks exist.")


//function ClickedRelease (GUIaction)
//	return false
//	|| name = .tag as string
//		.ide.compile("compile", name)


function fnBuildIsDead (fnConfirmCanceller)
	if self mustbe perryide
		if !.IsBuilding
			.CancelCompile
			return true


function Perryide.IsBuilding (|bool|) // .isbuilding, .iscompiling, .compiling 
	return .buildbutton isnt enabled


function ClickedCancel (GUIAction)
	|| i = .ide!
	if !i.Isbuilding
		return true
	|| can = ConfirmCanceller(i, fnBuildIsDead)
	|| name = i.project.TrimCodeExt
	|| q = "Currently building $name... Cancel Build of $name?"
	if q.confirm(can)
		i.CancelCompile("UserCancel")
		return true
		

function ClickedCompile (GUIaction)
	.ide!.compile("compile")

		
function PerryRecheckEvent (guilistevent)
	.ide!.ForceRecheck


function ReturnProjectPath (GUIListEvent)
	if row isa filerow
		row.location.reveal
	return true


function ReturnAllFuncs (GUIListEvent)
	|| e = .ide!.EditMe
	e.ShowAndSel(row!.position)
	e.SetFocus
	return true

	
function OpenProjectPath (GUIaction)
	|| f = .ide!.filelist.FirstSelected as FileRow
		if (self isa buttonview)
			.FillMenuPath(f.location)


function ClickedStatus (GUIaction)
	.ide!.editme.ShowNextParseError


function ClickedProjectInfo (GUIaction)
	.ide!.NextProjInfo


function PerryIDE.SaveAndShowErrors (|bool| FromKeys, |bool|)
	opt norefcounts
	.SaveEditing(documentstate.ErrorChecking)
	.Recheck
	|| t = .istextonly
	.ViewAsProject
	if t and .isviewing(.errorlist)
		return true
	if .ShowErrors
		return true
	.UseThisView(.Viewfiles)
	return true
		


function PerryIDE.ShowErrors (|bool|)
	opt norefcounts
	if !.isviewing(.errorlist)
		.UseThisView(.ViewErrors)
		return true
	if .errorlist.hasany
		.errorlist.selectatleastfirst
		return true


function ClickedAView (GUIaction)
	opt norefcounts
	if self isa ButtonView
		.ide!.UseThisView(self, true)


function perryide.UseThisView (|buttonview| btn, |bool| chng=false)
	opt norefcounts
	|| el = .errorlist
	if (el is visible) and btn.tag == el
		el.SelectAtleastFirst
	.view(btn, chng)


function ClickedNoNeed (GUIaction)
	opt norefcounts
	|| t = .tag as buttonview
		.ide!.view(t)	


function PerryIDE.ShowText (|textview| field, |string?| Text, |bool| Always, |bool|)
	if text != nil
		field.text = text
	.CompileTabSelect(field)
	.ShowCompileCutely(Always)
	return true


function perryIDE.UpdateJeeboxField (|bool|)
	|| e = .editme
	|| sr = e.SelRange
	|| txt = e.SelText
	if !sr.width
		txt = e.FindDrawInfo(sr.x).text
	
	|error| Err
	|| str = ""
	|| msg = txt.ParseWithError(Err)
		str = msg.RenderAST(0)
	  else
		str = Err!.render
	// OK... so... what about resel from drag?
	.ShowText(.JeeboxText, str, true)
	
	return true


//function PerryIDE.ClickedFile (|bool|)
//	|| t = .editme.seltext.trim
//	if t[0] == '/'
//		|| it = t.inwhite
//			t = t[0, it]
//		if t.reveal
//			return true


function PerryIDE.BatchPhind (|string| text, |uint| ID, |bool|)
	|| found = .filelist.BatchFind(text, ID)
	.foundlist.use(found)
	.foundlist.setfocus
	return found.hasany


function PressedSelInfo (GUIaction)
	opt norefcounts
	|| i = .ide!
	|| q = i.filelist.quickopen
	q.text = "line " + i.editme.CurrLine.Render
	i.filelist.showquickopen


function PressedSearchWithin (Guiaction)
	|| i = .ide!
	|| f = i.FileList
	|| r = f.SearchWithin
		f.SearchWithin = nil
	  else
		f.SearchWithin = f.FindSearchWithin
	i.ReTextSubFind
	
	
function PressedSearchKeys (GUIKeyEvent)
	opt norefcounts
	|| w = .ide!
	|| t = self as textview #require
	
	if key.isaccept
		w.ViewAsProject
		|| ID = ((perry.findID+1)&255) max 1
		perry.findID = ID
		w.BatchPhind(t.text, ID)
		if w.foundlist.isempty and t.text
			w.noneed("The search text “${t.text}” wasn't found", nil)
			perry.FindElseWhere(w, t.text, ID)
		  else
			w.noneed
		return true
	if (key is down) and (t.selrange == t.text.length)
		w.FoundList.setfocus
		return true
	require key.iscancel
	if t.text
		t.text = ""
	  else
		w.view(W.viewfiles)
	return true


function EditMeSelChange (GUITextEvent)
	opt norefcounts
	|| i = .ide!
	if i.ProductSep.IsOpen and i.jeeboxtext is visible
		i.UpdateJeeboxField
	i.popuphide
	i.ShowRightStats
	i.EditMeTabRetryThing = 0
	require !TextWasAltered and i.feedback.CommsOpen
	|| e = self|textview|
	|| s = e.selrange
	if s.width
		e.PerryTryAutoComplete(s.x2, "autocomplete_sel", PerryAutoCompleteReason.sel)


function EditMeSelError (GUITextErrorSelected)
	opt norefcounts
	|| i = .ide
	|| el = i.errorlist
	i.DuringMsgFB = true
	el.select(error.drawerror)
	i.DuringMsgFB = false

	
	
function PressedEditKeys (GUIKeyEvent)
	opt norefcounts
	if self isa TextView
		require .ExpectsParse >= 2
		if key is Decl
			return .PerryDeclKey
		
		require key == -9 or -10 or 27
		key = key.abs
		
		|| tabkind = .PerryInsertSyntax(key)
			if tabkind == 1
				.ide!.EditMeTabRetryThing = 0
			return true


function PerryIDE.MoveError (|error| row,  |string| p,  |int| i,  |error|)
	opt norefcounts
	while row
		|| nrow = row.step(i>0) 
		if !nrow or nrow.path != p
			return row
		row = nrow


function PerryIDE.ClickedError (|error| row)
	require !.DuringMsgFB
	using self
		|| f = row.path.file
		if (row.path != .editme.path) and f.IsNicelyViewable
			.GoToAnyFile(f)
		.editme.ShowAndSel(row.position)
		.editme.MyError = row


function file.IsNicelyViewable (|bool|)
	if .isdir
		return true
	require .exists
	require .size < 512KB
	return !.readall.isbinary


function PerryIDE.ClickedFind (|error| row)
	|| p = row.path
	.GotoIncludedFile(p)
	if row.position
		.editme.ShowAndSel(row.position, .MassSearchField.text.length)
	  else
		row = row.first
	|| curr = .MoveError(row, p, -1)
	|| last = .MoveError(row, p,  1)
	.editme.ClearFound

	while curr
		.editme.MarkAsFound(curr, row == curr)
		if curr == last
			exit
		curr++


function ErrorListPaste (guipasteevent)
	|| errs = error.from(data.ParseWithError(nil))$
	|| i = .ide
	|| L = i.errorlist.listsource
	for e in errs
		if e == @tmp
			L <~ error.from(e)
	i.updateerrorcount
	i.noneed

/*
error
	"Passing optional: JB_Dict_ValueLower(self.items, name) to Yes"
	pos 169
	file "/usr/local/speedie/Speedie.scproj/speedie.input/SC_Targets.spd"
*/	
	
	
	
function ClickedError (GUIListEvent)
	|| ide = .ide!
	if row isa error
		if self == ide.errorlist
			ide.ClickedError(row)
		  else
			ide.ClickedFind(row)
	  elseif sdlapp.event is mousedown
		if !.Start and ide.filelist isnt visible
			clickedaview(ide.ViewFiles)
	return true


function LogAreaKeys (GuiKeyEvent)
	if key iscmd keys.k
		|| s1 = .ide!.LogComms!
		|| s2 = .ide!.LogActions!
		|| c = s1.slowcount + s2.SlowCount
			if "Clear log?\n\nContains $c items.".confirm
				s1.clear
				s2.clear
		return true


function ReturnErrorList (GuiListEvent)
	.select(row)
	.ide!.editme.setfocus
	return true


function perryide.ReTextSubFind
	|| r = .filelist.SearchWithin
		.SubFindCheckBox.text = "Searches: " + r.Name
	  else
		.SubFindCheckBox.text = "Searches: All"


function SelectedFile (GuiListevent)
	if row isa FileRow
		return .ide!.EditFile(row)


//function RightClickErrorList (GUIListEvent)
//	opt NoRefCounts
//	if self isa FileViewer
//		|| m = .newcmm
//		m <~ ("Copy File Path",			FileViewerCopyPath)
//		m <~ ("Show In Finder",			FileViewerCMMShow)
//		m <~ ("Show In Project",		ProjectCMMShow)
//	return true


function perry.FindElseWhere (|perryide| ignore, |string| find, |byte| FindID)
	for w in perry.OpenProj
		if (w != ignore) and w.BatchPhind(find, FindID)
			if "\"$find\" not found here, but was found in '${w.name}'.\n\nTake a look?".confirm
				w.showide
				w.ShowFind
			return


function HideSomeStuffOnResize (guiaction)
	if self isa guicontrol
		.ide.PopupHide
	

function PerrySearchWithin (GUIListEvent)
	opt NoRefCounts
	.ide.SubFindCheckBox is visible
	.ide.ShowFind
	


function PerryFileViewRightClick (GuiListEvent)
	require RightClickFileList(self, row, mode)
	if row isa filerow
		|| m = .CMM									#require
		|| menu = menuitem("Count Lines Of Code", FileViewerCountCode)
		|| where = m.listsource.Last.prev
			where.prev = menu
	return true


function FileViewerCountCode (GuiMenuEvent)
	|| row = clicked!.row as filerow			#require
	|| CLOC = (0,0)
	|| FileCount = 0
	|| Size = 0
	for c.flat in row
		|| L = c.ReadFrom
		if l.isSource
			|| f = l.file
				|| p = f.parse
					FileCount++
					size += f.size
					CLOC += p.loc
	
	|| fstr = "file".pluralize(FileCount)
	app.alert "${Cloc[0]} lines of code and ${Cloc[1]} nodes in ${size.strsize} text\n\n$fstr at: ${row.location}"


