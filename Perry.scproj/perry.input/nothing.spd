

helper asm_test_add (|int| a, |int| b, |int|)
	cpp_name asm_test_sub
	visible
	|| y = 2.0
	return ((a + b) / 2) - ((a / b) * 2)


helper asm_test_func (|int| a, |int| b, |int|)
	cpp_name asm_test
	visible
	return asm_test_add(b*b, a*a)


helper asm_test_ptr (|fixeddict| a, |&int| b,  |int|)
	cpp_name asm_test_ptr
	visible
	a.letter = -1
	*b = 0
	b[0] = 1
	|| n = 10
	b[n] = 5
	n = b[1]
	n = b[0]
	a.Value = a|&nil|
	a.items[1] = 5|&nil|
	a.items[n] = 5|&nil|
	

helper asm_test_flow (|int| a, |int| b, |int|)
	cpp_name asm_test_flow
	visible
	if a > b
		a = a
	if b < a
		b = b
	if a == a
		a = a
	if b != b
		b = b
	if 1.CountBits == 2.CountBits
		|| x = 2
	
	


ignore {

function asm_test_add (|int| a, |int| b, |int|)
	|| y = 2.0
	return ((a + b) / 2) - ((a / b) * 2)
-->
asm asm_test_add
	SETK: r3, 29, 1				// 2.0
	ADD:  r31, r1, r2			// a+b
	SETK: r30, 0, 1				// const 2
	DIV:  r0, r31, r31, r30, 0	// (a+b)/ 2
	DIV:  r0, r30, r1, r2, 0	// (a/b)
	SETK: r29, 0, 1				// load const 2 (could be optimised)
	MUL:  r30, r30, r29, r0		// (a/b) * 2
	SUB:  r1, r31, r30			// -
	RET:  r1, r0, 1, 0			// return
// Seems to be ok actually? Just the const can be removed...
// also values that are written but never used.
// we could store the regs in ONE value that is a 64-bit value... so each 2 bits gives us a type of 0-3
// awkward to be honest... but maybe ok. we could store two versions? like a condensed version?
}