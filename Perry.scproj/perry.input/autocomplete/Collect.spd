

function PerryIDE.MaybeSendMessage (|string| cmd,  |message| where,  |string| name="", |string| reason="", |date|)
	#!sendmsg, msgsend, sendcmd, cmdsend
	|| fn = where.Func
	.SectionKeyTime = nil
	
	if (fn == @name) and cmd[0, "autocomplete"]
		return nil
	if (fn == @thg) and (where in @decl) and !where.isfirst
		return nil
	.SetAutoPoint(where.Position)
	|| isString = fn.IsString
		if where.ShouldDisplayString
			ifn cmd starts "autocomplete_sel"
				return .DisplayStr(where)

	if fn == @char or @num
		.PopupHide
		return nil

	if !fn.isstring		
		return .SendFeedbackRequest(cmd, where, name, reason)


function message.ShouldDisplayString (|bool|)
	if self == @bin
		return true
	require self == @str or @char
	require .name.LengthUTF8 < 350
	return .name.Escape != .name
	

function PerryIDE.CanSend (|string| cmd, |bool|)
	if .LastCmdStr != cmd
		return true
	if !.LastSendTime or .LastSendTime.ago > 0.66s
		return true


function PerryIDE.SendFeedbackRequest (|string| cmd,  |message| where,  |string| name,  |string| reason, |date|)
	|| msg = .BuildCmd(cmd, where, name, reason)		#require

	|| CmdStr = msg.RenderJbin
	if .CanSend(Cmdstr)
		rz = .SendFeedbackMsg(msg)
	.LastCmdStr = CmdStr
	.LastSendTime = rz


function PerryIDE.SendFeedbackStr (|string| op)
	if .projIsSpeedieCode
		.SendFeedbackMsg(.checkmsg(op, false))
	

function PerryIDE.DateWrap (|message| msg, |date| d, |message|)
	rz = @arg + "Perry"
	rz <~ d
	rz <~ msg
	if msg.name[0, "autocomplete"]
		.LastAutoCompleteDate = d


function PerryIDE.SendFeedbackMsg (|message| msg, |date|)
	require msg and .projIsSpeedieCode
	|| fb = .FeedbackInit(.feedback)			#require
	.feedback = fb
	|| d = date.now
	|| record = .DateWrap(msg, d)
	fb <~ record
	.SpeedieMsgReceive(fb)
	.LogOneComm(msg, "\1C ")
	return d


function PerryIDE.FeedbackInit (|SpdProcess| C, |SpdProcess|)   // InitCompiler, initfeedback
	if c
		if !c.subprocess and C.TimedOut(5s)
			c.Deactivate(32) // epipe
		if c.IsOpen
			return c
		if c.SubProcess
			return c // can't deactivate it.
		if c.ActivateChild
			return c
		return nil // ded?

	|| p = [.project, "--perry=bin", "--nocolor"]
	|| f = .SharedProjectTabSource[@nil]$
	|| name = .name
	|| Noisy = false//SpdLibAlreadyInUse
	if noisy
		p <~ "--noisy"		

	p <~ "--check"
	
	// 
	|SpdProcess| spd 
	
	if !SpdLibAlreadyInUse
		SpdLibAlreadyInUse = true
		target debug {
		if !.UsingSpdLib
			.UsingSpdLib = true
			f.name = name.TrimExt + "()"
		spd = (Speedie_Main).SpawnThread(p)
		}

	if !spd?
		|| proc = speedie.resolve
		target debug
			proc = file.speedie.child("Speedie.scproj/Build/Products/Debug/Speedie")
		if proc
			|| Mode = ProcessMode.CaptureAll * !noisy
			spd = SpdProcess.spawn(Proc, p, .project.name, mode)
	if noisy and spd
		spd.pico.config.noise = -1
	return spd


function PerryIDE.ActualCompile (|string| operation)
	(operation) // i guess we'll use this later. debug vs compile
	if .compilr: return app.beep // wah?
	
	require .filelist.SaveAll(documentstate.saving)
	|| IsSCProj  =  .name ~= "Speedie.scproj"
	|| args = [.project, "--nocolor", ]
	if .DebugIsWaitingForCompile
		args <~ "--usescriptloc"
	if !IsSCProj
		args <~ "--perry=bin"
	  else
		args <~ "--perry"

	.compilr = process.Stream(speedie, args)		#require
	.SpeedieText.text = ""
	
	(.BuildButton isnt enabled)
	(.BuildButton isnt visible)
	(.RunButton isnt enabled)
	(.Progress is visible)

	is active
	.ShowCompileTab(.speedietext)//, IsSCProj)
	.ViewAsCurr


target debug
	cpp_libwrapper Speedie_Main (SpdMainFn)
|| SpdLibAlreadyInUse = false
