

function PerryIDE.MaybeSendMessage (|string| cmd,  |message| where,  |string| name="", |string| reason="", |bool|) // sendmsg, msgsend
	|| fn = where.func
	if fn == @char or @num
		.popuphide
		return false
	.SetAutoPoint(where.position)
	|| isString = (fn == @str or @sstr or @back or @bin)
		ifn cmd starts "autocomplete_sel"
			return .DisplayStr(where)
	  else
		return .GetFeedback(cmd, where, name, reason)


function PerryIDE.GetFeedback (|string| cmd,  |message| where,  |string| name,  |string| reason, |bool|)
	|| n = .projmsg.first.nyme
	|| msg = .BuildCmd(cmd, where, name, reason)
		.SendFeedbackmsg(msg)
		return true


function PerryIDE.GetFeedbackStr (|string| op)
	.SendFeedbackmsg(.compilemsg(op, false))
	

function PerryIDE.datewrap (|message| msg, |message|)
	rz = @arg + "Perry"
	|| d = date.now
	rz <~ d
	rz <~ msg
	if msg.name[0, "autocomplete"]
		.LastAutoCompleteDate = d


function PerryIDE.SendFeedbackMsg (|message| msg)
	require msg
	.feedback = .CompilerInit(.feedback, false)			#require
	
	|| record = .DateWrap(msg)
	if .feedback <~ (record, 0.004s)
		.SpeedieMsgReceive(.feedback)
	.LogComms(msg, "\1C ")


function PerryIDE.SubProcess (|bool| actual_compile, |fn_Subprocess|)
	require platform.isdebug and !actual_compile
	if actual_compile
		rz = Speedie_Compiler
		Speedie_Compiler = nil
	  else
		rz = Speedie_Checker
		Speedie_Checker = nil


function PerryIDE.ReportDead (|bool| IsFeedback, |string| msg="")
	|| type = ("feedback ", "compiler ")(isfeedback)
	if isfeedback
		type += .feedback.where
	  else
		type += .compilr.where

	|| s = type + " crashed\n\n"
	(self is dead)
	.notify(s, @emb + msg)
	.CancelCompile


function PerryIDE.CompilerInit (|process| C, |bool| actual_compile, |process|)   //InitCompiler
	|| time = 5s
	|| Active = C.Activate(time, actual_compile)
	if active == -1
		return nil
	if Active
		return C

	|| p = [.project, "--perry=bin", "--quiet"]
	|| f = .projmsg.first 
	|| name = f.name
	if !actual_compile
		p <~ "--check"
	
	|| SubProcess = .SubProcess(actual_compile)
		if !.UsingSpdLib
			.UsingSpdLib = true
			f.name = name + "()"
		rz = (SubProcess).RunAsProcess(name, p, 128KB)
	  else
		target false //debug
			|| Proc = "/usr/local/speedie/Terminal/Debug/uwu".resolve
		  else
			|| proc = Speedie.resolve
		if proc
			rz = process.child(Proc, name, p, 128KB)


function PerryIDE.ActualCompile (|message| msg)
	require msg
	|| c = .CompilerInit(.compilr, true)
	if c == nil
		isnt active
		return
	.compilr = c
	.stdout.text = ""
	
	c <~ .datewrap(msg)
	(.buildbutton isnt enabled)
	(.progress is visible) 
	is active
	if .Project.name ~= "Speedie.scproj"
		.ShowStdOut(true)  




target debug
	cpp_libwrapper Speedie_Main (fn_subprocess)
	|fn_subprocess| Speedie_Checker = Speedie_Main
	|fn_subprocess| Speedie_Compiler = Speedie_Main
  else
	|fn_subprocess| Speedie_Checker = nil
	|fn_subprocess| Speedie_Compiler = nil
