

extend PerryIDE
	function Recheck (|bool| strong=false)
		if strong or .ModifiedForCompile
			.ForceRecheck
		|| p = .path					#debug_require
		|| unused = @tmp + "unused"
		unused <~ p
		|| lf = .LostFunks
			unused <~ lf.copy
		.SendFeedbackMsg(unused)
	
	
	function ForceRecheck
		.ModifiedForCompile = false
		if .projIsSpeedieCode and !.UsingSpdLib
			.Feedback = nil
			.AskCheck


	function AskCheck
		.SendFeedbackStr "check"
		

	syntax is (|ListViewState| s, assigns:|bool| mod)
		opt norefcounts
		|| r = .SharedProjectTabSource
			r.syntaxis(s) = mod
		
		if (s is modified)
			|| sub = .CurrFileName.SubMenu
				(sub.ListSource is modified) = Mod


	function ClearErrors (|bool| Compiled)
		isnt Broken
		.CompileOKString = ("Compile OK", "Check OK")(Compiled)
		.errorlist.Clear
		.editme.ClearErrors
		.filelist.ClearErrors
		.RelistStartupErrors
		.UpdateErrorCount
		
	
	function CheckedOK (|string| kind, |bool|)
		.ClearErrors(kind=="compile")
		if .viewing == .ViewErrors
			.NoNeed(.CompileOKString, .viewfiles)
		return true


	function message.ActualReplaceError (|string| src)
		|| SubError = src.parse.first
			.ReplaceWith(suberror)
	
	function message.CleanErrors
		opt norefcounts
		for e in self
			|| a = e.arg
				|| f = a["file"]
				|| str = a.firstName
				if (f ~= "(string)") and (str[0, "error\n"])
					e.ActualReplaceError(str)


	function ShowCompileErrors (|message!| msg, |bool| RealCompile, |bool|)
		|| MaybeOK = msg.last
		if (MaybeOK == @thg and "ok")
			.ErrorList.clear
			.UpdateErrorCount
			return .CheckedOK(msg.name)
	
		// inconsistant input...
		|| arg = msg
		if arg != @arg
			arg = msg.arg
		  else
			MaybeOK = msg
		arg.cleanErrors
		
		is Broken
		.NoNeed
		|| newlist = error.from(MaybeOK)
		newlist ?= Error()
		.errorlist.listsource = newlist
		.UpdateErrorCount
		if .IsFront
			if RealCompile or .ErrorList isnt Visible
				beep
		.ShowErrors


	function UpdateErrorCount
		opt norefcounts
		|| h = .errorlist.headers
			h.name = ""
			|| n = .errorlist.listsource.slowcount
				h.name = n of "issue"

	function ExpandCompileSep (|bool|)
		|| coll = .ProductSep.divider.Collapsed
			.ShowCompileTab(.SpeedieText)
			return !.ProductSep.divider.Collapsed


	function Compile (|string| operation)
		if !.isBuilding // they pressed it twice
			.ActualCompile(operation)
			return 
		if !.ExpandCompileSep					// appeared to do nothing
			ClickedCancel(.BuildButton)			// might as well just do the next thing then
	
	
	function CheckMsg (|string| operation, |bool| SaveAll, |message|)
		if SaveAll
			require .filelist.SaveAll(documentstate.saving)
		|| cmd = @tmp + operation
		cmd <~ .Project.path
		return cmd


	function DebugFB (|message| msg)
		// || pp = .ProductPath
		// we actually... hmmm... can't open the debugger yet. not until it's made!
	
		
	function ErrorListFB (|message| msg, |bool|)			// errorfb, errorsfb
		|| RealErrors	= msg ~!= "check"
		.ClearErrors(RealErrors)
		|| NoErrors		= .ShowCompileErrors(msg, RealErrors)
		|| ErrsVis		= .isviewing(.ErrorList) 
		.errorlist.SelectFirst
		if !RealErrors
			0
		  elseif NoErrors
			if errsvis
				.view(.viewfiles)
			if msg ~= "debug"
				.debugFB(msg)
		  elseif !errsvis
			.view(.viewerrors)
			.say(" failed. Could not compile")
		.LoadErrors(RealErrors, realerrors)
		.showstats

	
	function ReadLog (|bool| Killed=false)
		|| c = .Compilr $
		|| StdOut = c.ReadStdOut
		.SpeedieText.log(StdOut)
		|| IsRunning = c.status.IsRunning
		require !IsRunning or Killed

		|| Bad = .CheckCrashed(c,  "compiler")
		|| Errors = c.ErrorOutput.GetResult
			|| p = errors.parse
				.ShowCompileErrors(p, true)
			// Notifications will pick up the err otherwise!
		  elseif !bad
			|| msg = @tmp + "compile"
			msg <~ (@thg, "ok")
			.ShowCompileErrors(msg, false)
			.CompiledOK
		.compilr = nil
		.RenableAfterCompile


	function Say (|string| str)
		target osx
			if !.IsFront or GUI.IsBackground
				.Talker = Process.stream("/usr/bin/say", [.name.trimext + str])
				(.talker)
	
	
	function CompiledOK
		|| db = .DebugIsWaitingForCompile
		.CheckedOK("compile")
		|| msg = .speedietext.text.parse
		
		|| last = msg[@tmp, -1]
		if last.expect(@tmp, "Product")
			|| path = last[@nil]
			if path.ExpectString
				|| file = @url + "file"
				file <~ path
				|| str = "\n\nCompiled OK!"
				|| f = path.name.file
				if !f.exists
					str += " But it doesn't exist :("
				.notify(.name + str, file)
				.say(str)
				if db
					.StartDebugging(f)


	function Notify (|string| What, |message| response=nil)
		|| c = what
		if response
			c = what + ("\n" + response.render) // hmmm... seems awkward
		.LogOneComm(@emb + ("\1b " + c))
		notifications <~ (what, response)
	
	
	function CancelCompile (|bool|)
		opt norefcounts
		|| c = .Compilr
		if !c
			return .RenableAfterCompile
		c.Kill(0)
		app.Sleep(0.025) // allow pipes to work
		.Readlog(true)
		return true


	function RenableAfterCompile (|bool|)
		.DebugIsWaitingForCompile = false
		|| code = .ProjIsSpeedieCode
		(.buildbutton is enabled) = code
		(.runbutton is enabled) = code
		(.buildbutton is visible)
		(.progress isnt visible)
		.HideStuff
		isnt active
		return true

