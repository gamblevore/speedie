

extend PerryIDE
	function Recheck 
		require .ModifiedForCompile
		.ModifiedForCompile = false
		.ForceRecheck
		
	function ForceRecheck
		if .IsSpeedieCode and !.UsingSpdLib
			.GetFeedbackStr "check"

	
	syntax is (|ListViewState| s, |bool|)
		return .projmsg.syntaxis(s)
	syntax isnt (|ListViewState| s, |bool|)
		return !.syntaxis(s)
	syntax is (|ListViewState| s, assigns:|bool| mod)
		.projmsg.syntaxis(s) = mod
		
		if (s == listviewstate.modified)
			|| sub = .CurrFileName.SubMenu$
			|| src = sub.ListSource$
			(src is modified) = Mod

	syntax isnt (|ListViewState| s, assigns:|bool| b)
		.syntaxis(s)=!b

	function ClearErrors (|bool| Compiled)
		isnt Broken
		.CompileOKString = ("Compile OK", "Check OK")(Compiled)
		.errorlist.Clear
		.editme.ClearErrors
		.filelist.ClearErrors
	
	
	function CompiledOK (|message| msg, |bool|)
		isnt active
		.ClearErrors(msg=="compile")
		if .viewing == .ViewErrors
			.NoNeed(.CompileOKString, .viewfiles)
		return true


	function ShowCompileErrors (|message| msg, |bool|)
		isnt active
		|| MaybeOK = msg.first
		sdlapp.CompileStatus = nil
		if (MaybeOK == "ok")
			.errorlist.clear
			return .CompiledOK(msg)

		is Broken
		.NoNeed
		.errorlist.listsource = MaybeOK.jberrors


	function Compile (|string| operation)
		if !.Building
			// require .filelist.saveall // CompileMsg does this
			.ActualCompile(.CompileMsg(operation, true))
		  elseif .editsep.div.Collapsed
			.ShowStdOut  
		  else
			beep
			
	
	function CompileMsg (|string| operation, |bool| SaveAll, |message|)
		if SaveAll
			require .filelist.SaveAll
		|| cmd = @tmp + operation
		cmd <~ .Project.path
		return cmd


	function DebugFB (|message| msg)
		// || pp = .ProductPath
		// we actually... hmmm... can't open the debugger yet. not until it's made!
	
		
	function ErrorListFB (|message| msg, |bool|)
		.filelist.ClearErrors
		|| NoErrors		= .ShowCompileErrors(msg)
		|| ErrsVis		= .isviewing(.errorlist) 
		.errorlist.selectfirst
		|| RealErrors	= msg ~!= "check"
		if !RealErrors
			0
		  elseif NoErrors
			if errsvis
				.view(.viewfiles)
			if msg ~= "debug"
				.debugFB(msg)
		  elseif !errsvis
			.view(.viewerrors)
		.LoadErrors(RealErrors, realerrors)
		.showstats


	function LogFB (|message| msg)
		// ignore.
	
	function Readlog
		if .Building and .stdout.height > 1
			.justreadlog

	function JustReadLog
		opt norefcounts
		.stdout <~ .Compilr.ReadStdOut
	
	function CompileFB (|message| msg, |bool|)
		.CancelCompile
		|| first = msg.first #require
		if first == @arg // an error-list
			.ErrorListFB(msg)
		  else
			.CompiledOK(msg)
		if self isnt broken
			|| file = @url + "file"
			file <~ first
			.notify(.name + "\n\nCompiled OK!", file)
				
				
	function Notify (|string| What, |message| response=nil)
		|| c = what
		if response
			c = what + ("\n" + response.render) // hmmm... seems awkward
		.LogComms(@emb + ("\1b " + c))
		notifications <~ (what, response)
	
	function CancelCompile 
		.compilr.JustKill?
		(.buildbutton is enabled)
		(.progress isnt visible)
		.JustReadlog
		isnt active

