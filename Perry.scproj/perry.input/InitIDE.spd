
extend PerryIDE  
    constructor (|file| project)
		super.constructor 
		.IsMainWindow		= true
		.Project			= project
		.InConstructor		= true
		.CanAskingAboutMissing = true
		.RecentFiles 		= message()
		.id					= "IDE"
		.Debugger			= GUIControl(self)
		.AppInfo			= TextView(.debugger)
		.DebugBtns			= guicontrol(.debugger)
		.Variables			= listview(.debugger, ClickedVariables, ReturnVariables)
		.Stack				= listview(.debugger, ClickedStack, ReturnStack)
		.SearchArea			= guicontrol(self) 
		.ViewButtons		= guicontrol(self) 
		.RBorder			= guicontrol(self)
		.CompileArea	    = StretchControl.horz(self, 0~right, 0, 100)
		.Toolbar			= buttonview(self,		ClickedToolBar)
		.RunButton			= buttonview(.Toolbar,	ClickedDebug,			PressingDebug, nil, PressingDebug)
		.BuildButton		= buttonview(.Toolbar,	Clickedcompile)
		.ProjectTabs		= ButtonView(.Toolbar,	ClickedTabs,    	 PressingTabs, 	ReturnProjectPath,  RightClickedTabs) 
		.StartScreen		= ButtonView(.Toolbar,	&StartupWindow.open, ClickedOpenRecent, ReturnRecents)
		.DebugSwitcher		= ButtonView(.Toolbar,	DebugSwitch)
		.Progress			= ProgressBar(.Toolbar,	ClickedCancel)
		.GoPrev				= ButtonView(.RBorder,	ClickedPrevNext, RightClickNext, ChosePrevItem, RightClickNext)
		.GoNext				= ButtonView(.RBorder,	ClickedPrevNext, RightClickNext, ChosePrevItem, RightClickNext)
		.CurrFileName		= ButtonView(.RBorder,	OpenProjectPath, nil,	ReturnProjectPath)
		.FunctionMenu		= ButtonView(.RBorder,	MenuAllFuncs,	 nil,	ReturnAllFuncs) 
		.ASMButton			= ButtonView(.rborder,  ClickedASMButton)
		.MassSearchField	= TextView(.SearchArea,	nil,					PressedSearchKeys)
		.MassReplaceField	= TextView(.SearchArea,	nil,					PressedSearchKeys)
		.SubFindCheckBox	= ButtonView(.searcharea, PressedSearchWithin)
		.FoundList			= ListView(.SearchArea,	ClickedError,			ReturnErrorList) 
		.ErrorList			= ListView(self,		ClickedError,			ReturnErrorList) 
		.CommsLogList		= ListView(self,		nil,					nil)
		.EditMe				= TextView(self,		JumpToDefinition,		PressedEditKeys)
		.ASMView			= Listview(self,        SelectedASM, SelectedASM)
		.ASMStretch			= StretchControl.horz(self, 200~left, 110, 110)
		.DrawMe				= GraphicsEditor(self)
		.FileList			= FileViewer(self,		SelectedFile,			nil, .editme) 
		.EditStatus			= TextView(self,		ClickedStatus)
		.ProjectInfo		= TextView(self,		ClickedProjectInfo)
		.SelInfo			= TextView(self,		PressedSelInfo)
		.JeeboxText			= TextView(self)
		.SpeedieText		= TextView(self)
		.ProductOut			= TextView(self)
		.ProductErrors		= TextView(self)
		.CompileTabs		= ButtonView(.CompileArea,		ClickedCompileTabs) 
		.UnNeededLabel		= TextView(self,		ClickedNoNeed)
		.AutoComplete		= menu(self, 			nil,					AutoCompleteInsertText)
		.ViewFiles			= ButtonView(.ViewButtons,		ClickedAView)
		.ViewSearch			= ButtonView(.ViewButtons,		ClickedAView)
		.ViewDebugger		= ButtonView(.ViewButtons,		ClickedAView)
		.ViewErrors			= ButtonView(.ViewButtons,		ClickedAView)
		.viewlog			= ButtonView(.ViewButtons,		clickedaview)
		.Views				= [.filelist,  .errorlist,  .debugger,  .searcharea,  .CommsLogList]
		.FileSep			= StretchControl.horz(self, 175~right, 110, 210)
		.ProductSep			= StretchControl.vert(self, 0~right, 0, 100)
		.PopupDisplay		= textview(self)
		.DebugArgsList		= textview(self)
		.AttachedProgram	= ""
		
		.init
		perry.AddRecent(project)
		.InConstructor = false
	
	
	function perry.FindRecent (|string| p, |message|)
		opt norefcounts
		|| c = Perry.RecentProjects.first
			return .FindRecent(p, c)


	function perry.FindRecent (|string| p, |message!| curr, |message|)
		opt norefcounts
		while curr
			if curr ~= p
				return curr
			curr++
	
	
	function perry.AddRecent (|file| project)
		|| f = .Findrecent(project)
			f.name = project // fix case
			return 
		|| Added = @tmp + project
		added <~ (@str, project.name)
		Perry.RecentProjects.first = added
		Perry.RecentProjects.trim(15)
	
	
	function Init // perryide.init
		.size      = the~area
		.CopyPaste = CopyPasteFlags.PasteFile
		.onpaste   = perryopendoc

		|| LeftBG = vec4(0.125, 0.975)
		with .toolbar 
			.size 			= the~width  by  20~down
			.takesfocus		= 0
			.ID				= "toolbar" 
			isnt drawsfocus
			.align			= ListViewState.aligncenter
			.gnormal.solid  = vec4(0.125, 0.94) 
			.NoDrawClicked  = true
		
		
		with .DebugArgsList
			isnt visible
			is editable
			.size =  the~left+4 for 360  by  15~down back 150
			.id = "debugargs"
			.OnFocus = DebugArgsGotFocus
			.gnormal.solid  = (0.05, 0.05, 0.05, 0.95)
			.gnormal.edge = (0.0, 0.0, 0.0, 0.125)
			.OnKeyDown = DebugArgsKeyDown
			.expectsparse = textview.AlwaysJeebox
			.attachedfrom = movecode.top
			.ClickOutsideCloses = true		


		with .ViewButtons 
			.ID				= "LBorder"
			.size 			= the~width  by  15~down
			.gnormal.solid  = vec4(0.077, 0.95)


		with .Rborder 
			.ID				= "RBorder"
			.size 			= the~width  by  15~down
			.gnormal.solid	= vec4(0.077, 0.95)


		with .FileList
			.IsMainListView = true
			.tooltip		= "Displays files in project"
			.folfile		= ".perry"
			.takesfocus 	= takesfocusflag.CanFocus
			.ID				= "FileList"
			.size 			= the~width by the~bottom to 15~down
			.copypaste	   |= copypasteflags.pastefile
			.OnSearchWithin = PerrySearchWithin
			.onpaste		= PerryOpenDoc
			.newcmm				// for the hideside test
			.sizecheckers	= "spd,txt,frag,vert,sdf" / ','
			if self.Project.isdir
				.NoFind			= "jb.cpp,jb.h,jb_globals.cpp".dict(',')
			isnt drawsfocus
			is NoSearch
			
			.GNormal.Solid = LeftBG
			.OnRightClick = PerryFileViewRightClick
			.WasEdited = PerryRecheckEvent
			.UseColorScheme	= true
			.OneAlwaysSelected = true
			.SetFocus
			.Init
	
	
		with .EditMe
			is   enabled
			is   editable
			is   codeeditor
			isnt drawsfocus
			.ID				= "EditMe"
			.GroupSaveAll	= true
			.size = the~width  by  the~bottom to 0~before 
			.OnTextChanged	= EditMeModified
			.OnShowExtraInfo = OnShowExtraInfo
			.gnormal.solid	= vec4(0.1, 0.974)
			.OnSelChanged   = EditMeSelChange
			.OnSelError		= EditMeSelError


		with .ASMView
			isnt visible
			.tooltip		= "Displays ASM"
			.TakesFocus 	= TakesFocusFlag.CanFocus
			.ID				= "ASMView"
			.size 			= the~area
			is NoSearch
			.GNormal.solid =  LeftBG
			.OnKeyDown = ASMViewKeys


		with .autocomplete
			.OnRightClick   = PerrySuperAutoComplete
			.onselected		= PerryAutocompleteSelected
			.ID				= "AutoComplete"
			.takesfocus 	= takesfocusflag.CanFocus
			|| dark			= self.filelist.GNormal.bg.color
			.GNormal.bg = mix(  dark, vec4(0.5, 1.0, 0.0, 1.0), 0.05)  // mostly dark
			.GNormal.edge = mix(dark, colors.green, 0.1 )  // less dark
			// now what?
			is TypeThrough
			isnt visible


		with .ErrorList
			.Headers = ListViewRow("", listviewstate.aligncenter)
			.IsMainListView = true
			.tooltip = "Displays Compile Errors. Press \1f< or \1f> to step in list."
			.GNormal.Solid = LeftBG
			.onpaste = ErrorListPaste
			.OnKeyDown = DeleteableListKeys
			.listsource = error()
			.copypaste	   |= copypasteflags.pastetext
			.copypaste	   |= copypasteflags.CopyText
			
		
		with .CommsLogList
			.IsMainListView = true
			.GNormal.Solid = LeftBG
		
		
		.ErrorLogInit(.Errorlist, "ErrorList" )
		.ErrorLogInit(.CommsLogList,   "LogArea" )

		with .UnNeededLabel 
			.takesfocus 	= 0
			.ID				= "NoNeed"
			.size 			= 5~inside  by  17~up to 55~down
			isnt editable
			isnt visible
			isnt drawsfocus
			.copypaste	   |= copypasteflags.copytext
			.alignment		= MoveCode.Center
			.gnormal.clear 


		with .SearchArea 
			.tooltip		= "Searches stuff. Press \1f; or \1f' to step in list."
			.takesfocus 	= takesfocusflag.CanFocus
			.ID				= "SearchArea"
			.size 			= the~width by the~bottom to 15~down
			isnt visible
			isnt drawsfocus
			.gnormal		= self.errorlist.gnormal


		with .MassSearchField
			is   editable
			is   visible
			isnt drawsfocus
			.YAdjust = -1
			.tooltip		= self.SearchArea.Tooltip			
			.SingleLine		= TextView.SingleLine
			.ID				= "find"
			.size 			= 3~inside  by  2~down back 15
//			.takesfocus		= takesfocusflag.On
			.gnormal.solid	= (0.0, 0.0, 0.0, 0.25)
			.autocompletestring = "Find..."


		with .MassReplaceField
			is   editable
			is   visible
			isnt drawsfocus
			.YAdjust = -1
			.tooltip		= self.SearchArea.Tooltip			
			.SingleLine		= TextView.SingleLine
			.ID				= "replace"
			.size 			= 3~inside  by  2~under back 15
//			.takesfocus		= takesfocusflag.On
			.gnormal.solid	= (0.0, 0.0, 0.0, 0.25)
			.autocompletestring = "Replace..."


		with .SubFindCheckBox
			isnt visible
			.size		= 3~inside  by  2~under back 15
			.Tooltip	= "Searches within only selected files"
			.id			= "SubFind"
			.gnormal.solid = (0, 0, 0, 0.25)


		with .FoundList // with .findlist
			is   editable
			is   visible
			is   UnSearchable
			isnt DrawsFocus
			.IsMainListView = true
			.RowHeight		= .rowheight + 3
			.IsTree			= true
			.NoSeps			= true
			.tooltip		= self.SearchArea.Tooltip			
			.OneAlwaysSelected = true
			.UseColorScheme	= true
			.OnKeyDown		= DeleteableListKeys
			.ID				= "FoundList"
			.size 			= the~width  by  the~bottom to 0~under 
			.AlwaysSendChangeEvent = true
//			.takesfocus		= takesfocusflag.On
			.gnormal		= self.FileList.GNormal.copy
			.GNormal.Solid = LeftBG
			.gRowSel.solid  = ((0.8, 1.0, 0.8, 0.65))


		with .debugger 
			.tooltip		= "Debugger area"
			.takesfocus 	= takesfocusflag.CanFocus
			.ID				= "DebuggerArea"
			.size 			= the~width by the~bottom to 15~down
			isnt drawsfocus
			isnt visible
			.gnormal		= self.errorlist.gnormal

		
		with .appinfo
			is   visible
			isnt drawsfocus
			.Alignment		= MoveCode.Center
			.tooltip		= self.debugger.Tooltip
			.ID				= "Application Info"
			.size 			= the~width  by  1~down back 40
			.gnormal.solid	= (0.0, 0.0, 0.0, 0.25)


		with .DebugBtns
			is   visible
			isnt drawsfocus
			.ID = "DebugButtons"
			.tooltip		= self.debugger.Tooltip
			.size 			= the~width  by  1~under back 18
			.gnormal.solid	= (0.0, 0.0, 0.0, 0.25)
			self.AddDebugButtons(DebugStepOver, "\02", "Step Over")
			self.AddDebugButtons(DebugStepIn,   "\03", "Step In")
			self.AddDebugButtons(DebugStepOut,  "\04", "Step Out")
			self.AddDebugButtons(DebugStepRun,  "\02\02", "Run")


		with .variables
			is   visible
			is   UnSearchable
			isnt DrawsFocus
			.IsMainListView = true
			.RowHeight		= .rowheight + 3
			.NoSeps			= true
			.tooltip		= "The variables in the current function"
			.UseColorScheme	= true
			.ID				= "Variables"
			.size 			= the~width  by  400 to 0~under
			.AlwaysSendChangeEvent = true
			.gnormal		= self.FileList.GNormal.copy
			.GNormal.Solid = LeftBG
			.gRowSel.solid  = ((0.8, 1.0, 0.8, 0.65))


		with .stack
			is   visible
			is   UnSearchable
			isnt DrawsFocus
			.RowHeight		= .rowheight + 3
			.NoSeps			= true
			.tooltip		= "The function call stack"
			.UseColorScheme	= true
			.ID				= "Stack"
			.size 			= the~width  by  the~bottom to 1~under 
			.AlwaysSendChangeEvent = true
//			.TakesFocus		= takesfocusflag.On
			.gnormal		= self.FileList.GNormal.copy
			.GNormal.Solid = LeftBG
			.gRowSel.solid  = ((0.8, 1.0, 0.8, 0.65))
			
			
		with .progress
			isnt visible
			.gnormal.edge = vec4(0.5)


		with .PopupDisplay
			isnt visible
			is PassThru
//			.alignment		= MoveCode.Center // can be multi-line, so no
			.clipmode = ControlClipMode.SlideBackInWindow
			.ID				= "PopupDisplay"
			.size 			= the~area
			.takesfocus		= 0
			.expectsparse	= TextView.probablyjeebox


		with .DrawMe
			is   enabled
			is   editable
			isnt drawsfocus
			.ID				= "DrawMe"
			.size = the~width by the~bottom to 0~before 
//			.takesfocus		= takesfocusflag.On
			.gnormal.bg		= vec4(0.0, 0.81)
			.gnormal.edge   = vec4(0.2, 1.0)
			.gnormal.seps	= vec4(0.4, 1.0)


		with .EditStatus 
			.ID				= "Status And Errors"
			.alignment		= MoveCode.Center
			isnt editable
			.takesfocus		= 0
			.size 			= the~width  by  0 to 13
			.gnormal.solid  = vec4(0.125, 0.94)


		with .ProjectInfo 
			.ID				= "ProjectInfo"
			.alignment		= MoveCode.MiddleLeft
			.SingleLine		= TextView.SingleLine
			isnt editable 
			.takesfocus		= 0
			.size 			= the~left for 400  by  0 to 13
			.gnormal.clear


		with .SelInfo 
			.ID				= "SelInfo"
			.alignment		= MoveCode.MiddleRight
			.SingleLine		= TextView.singleline
			isnt editable
			.takesfocus		= 0
			.size 			= the~right back 180  by  0 to 13
			.gnormal.clear

		with .FileSep
			is enabled
			.ID	= "filesep"
			.size = the~width by 14~up to 20~down
			.addright self.Rborder
			.addright self.ProductSep
			.addleft  self.ViewButtons
			.addleft  self.ErrorList
			.addleft  self.CommsLogList
			.addleft  self.debugger
			.addleft  self.SearchArea
			.addleft  self.FileList
			.addleft  self.UnNeededLabel
		
		with .filesep.div
			.onhide = FileSepClicker
			.onshow = FileSepClicker
			.onstretch = HideSomeStuffOnResize

		with .ProductSep
			is enabled
			.size = the~area
			.div.defaultFraction = 0.125
			.ID	= "edit+stdout"
			.AddLow  self.CompileArea
			.addhigh self.rborder
			.addhigh self.editme
			.addhigh self.ASMStretch
			.addhigh self.drawme
		
		with .asmstretch
			.id = "ASMStretch"
			.size = the~width by the~bottom to 15~down
			.div.defaultFraction = 0.7
			.AddRight(self.asmview)
	
		.JeeboxText.SetupOut("jeebox")
		.SpeedieText.SetupOut("speedie")
		.ProductOut.SetupOut("product", TextView.AllowJeebox)
		.ProductErrors.SetupOut("errors")

		.AddIDEButton(.RunButton,		"\02", "Debug Project", "debug")
		.AddIDEButton(.buildbutton,		"\1C", "Build Project", "compile")
		.buildbutton.next = .Progress
		.AddIDEButton(.progress,	"", "", "progress")
		.runbutton.size =   5~after for 22  by  3~inside
		.buildbutton.size = 5~after for 22  by  3~inside
		.StartScreen.size = 7~left back 22  by  3~down back 14
		.progress.size =    0~before for 60  by  3~inside
		
		.RunButton.ExpandOnMouseOver = 1
		.buildbutton.ExpandOnMouseOver = 1
		.progress.ExpandOnMouseOver = 1
		.currfilename.ExpandOnMouseOver = 1
		.FunctionMenu.ExpandOnMouseOver = 1
		.ProjectTabs.ExpandOnMouseOver = 2
	
		with .DebugSwitcher
			.size = 31~left back 22  by  3~down back 14
			.id = "switch"
			
			
		with .CompileArea
			.ID				= "OutBorder"
			.size 			= the~width  by  18~down
			.gnormal.solid	= vec4(0.087, 0.95)
//			.AddLeft(self.CompileTabs)
//			.AddRight(self.Variables)

		with .ProjectTabs
			.id = "Tabs"
			.size = 10~after to the~right  by  3~inside
			.itemwidth = 84
			.CanReOrderButtons = true
			.items = perry.projects
			|| pf = perry.projects.first 
				 (pf is selected)
			.gnormal.solid	= (0.7, 1.0, 0.2, 0.2)
			.GNormal.Drawer = image.RoundRectDrawer
			.GNormal.CornersCut = 12
			.GNormal.CornerSize = 6

		with .CompileTabs
			.id = "CompileTabs"
			.size = the~width by 18~down
			.itemwidth = 101
			.gnormal.solid	= (0.7, 1.0, 0.2, 0.1)
			.items = ("Speedie, Jeebox, '', Errors"~parse)|listviewrow|
			|| C = .items.first!
			(C is selected)
			C.Obj = self.SpeedieText
			self.SpeedieText.tag = c.obj
			c = c.IDESetNext(self.JeeboxText)
			c = c.IDESetNext(self.ProductOut)
			c = c.IDESetNext(self.ProductErrors)
			(c is hidden)
			(c is Broken)
			

		.AddIDEButton(.StartScreen,	"\1a", "Startup screen", "startup")
		.AddViewButton(.Viewfiles,		"\10",	.filelist)
		.AddViewButton(.viewsearch,		"\16",	.searcharea)
		.AddViewButton(.viewerrors,		"\17",	.errorlist)
		.AddViewButton(.viewdebugger,	"\18",	.debugger)
		if app.prefs["dev"]
			.AddViewButton(.viewlog,		"\0D",	.CommsLogList)

		.viewfiles.left = 5 ~ right
		.view(.Viewfiles)
		
		.addlbutton(.goprev,		"<",	"prev", "Go to previous file.")
		.addlbutton(.gonext,		">",	"next", "Go to next file.")
		
		.gonext.SubControl = .GoPrev.SubControl
		
		with .CurrFileName
			.MouseDownDoesClick	= true
			.gnormal.solid	= (0.7, 1.0, 0.2, 0.1)
			.id = "CurrFileName"
			.tooltip = "Show File Path"

		with .FunctionMenu
			.MouseDownDoesClick	= true
			.gnormal = self.currfilename.gnormal
			.id = "AllFuncs"
			.tooltip = "List Functions In File"
			.size = 4~after for 40 by the~same

		with .ASMButton
			.gnormal = self.startscreen.gnormal
			.id = "asm"
			.tooltip = "ASM-Viewer (Inbuilt GodBolt)"
			.size = 6~left back 23  by  the~same
			.text = "\1d"
		
		with .FunctionMenu.submenu
			isnt drawsfocus
			.ID = "AllFuncsMenu"
			.OnSelected = PerryFuncMenuSelected
			.OnTypingFilter = PerryFuncListFilter

		with .startscreen.submenu
			isnt drawsfocus
			.ID = "RecentList"

		with .CurrFileName.submenu
			isnt drawsfocus
			.ID				= "PathMenu"
		
		.ViewAsCurr
		.SetupLogArea
		.ReTextSubFind
		.CompileTabSelect(.SpeedieText)
		
	function listviewrow.IDESetNext (|guicontrol| obj, |Message!|)
		opt inline
		rz = .next!
		rz.obj = obj
		obj.tag = rz


	function textview.SetupOut (|string| name, |int| Parse=TextView.probablyjeebox)
//		printline name
		opt norefcounts
		is enabled
		is alwaysscrollable
		isnt editable
		isnt drawsfocus
		.ID				= name
		.size 			= the~width by the~bottom to 0~under
//		.takesfocus		= takesfocusflag.On
		.gnormal.solid	= vec4(0.077, 0.95)
		.expectsparse	= Parse
		.PreferStayAtEnd= true
		.ide.productsep.addleft(self)
//		"--"
		
		
	function SetupLogArea
		|| g = .CommsLogList
		g.istree = true
		g.id = "log"
		require !app.prefs["nolog"]
		g.gnormal.seps = g.gnormal.bg
		g.gnormal.seps.alpha *= 0.8
		
		g.OnKeyDown = LogAreaKeys
		.LogComms = .AddBaseLog("-- speedie comms --")
		.LogActions = .AddBaseLog("-- perry actions --")
	
	
	function AddBaseLog (|string| s, |listviewrow|)
		rz = @arg + s
		.CommsLogList.listsource <~ rz
		(rz is expanded)
		(rz is aligncenter)


	helper LogOneThing (|message| msg, |string| type, |listviewrow| m)
		opt norefcounts
		m <~ @emb + (type + msg.render)
		m.position++ 
		while m.position > 300
			m.first.remove
			m.position--
		if .CommsLogList.IsViewable
			GUI.Touch
	
	
	function LogOneComm (|message| msg, |string| type="")
		opt norefcounts
		.LogOneThing(msg, type, .LogComms!)


	function LogOneAction (|message| msg, |string| type="")
		opt norefcounts
		.LogOneThing(msg, type, .LogActions$)


	function ErrorLogInit (|listview| lv, |string| s)
		with lv
			.takesfocus 	= takesfocusflag.CanFocus
			.ID				= s
			.size 			= the~width by the~bottom to 15~down
			isnt visible
			isnt drawsfocus
			is unsearchable
			.MultiLineDraw = true
			.AlwaysSendChangeEvent = true
			.copypaste	   |= copypasteflags.copytext
			.gnormal.edge	= .gnormal.bg
			.rowheight	    = .rowheight * 2


	function AddViewButton (|ButtonView| BTN, |string| Oof, |guicontrol| tag)
		.ViewButtons <~ btn // 
		btn.tag		= tag
		.addlbutton(Btn, oof, tag.id, tag.tooltip)
		btn.id		= "btn_"+tag.id
		btn.size    = 3~after for 21  by  1~down back 13
		btn.align  |= listviewstate.DrawWhiteSpace
		tag.tooltip = ""
	
	
	function AddLButton (|ButtonView| BTN, |string| txt, |string| id, |string|tool)
		.AddIDEButton(btn, txt, tool, id)
		btn.size = 1~after for 16  by  1~inside
		btn.gnormal.clear
	
	
	function AddIDEButton (|guicontrol| BTN, |string| txt, |string| tip, |string| id)
		btn.id = id
		btn.tooltip = tip
		btn.Text = txt
		(btn is Spacer)
		|| opacity = 0.93
		|| f	   = 0.15 / opacity
		if btn isa buttonview
			btn.gnormal.solid = (f, f, f, opacity)
	

	function AddDebugButtons (|GUIAction| action, |string| icon, |string| id)
		|| btn = buttonview(.DebugBtns, action)
		btn.size = 5~after for 22  by  3~inside
		btn.id = id
		btn.Tooltip = id
		btn.Text = icon
		|| opacity = 0.93
		|| f	   = 0.15 / opacity
		btn.gnormal.solid = (f, f, f, opacity)
		
		
	function LoadProject (|bool|)
		require .project.mustexist("load project")
		.DuringLoad++
		.StartFileList
		.DuringLoad--
		require .StartProj

		StartupWindow.hide
		.viewasproject
		.AskCheck
		GUI.SavePrefs // for pref-file editing
		.ShowIDE
		.ViewAsbetter
		.LoadStartupErrors
		.StartupDebugArea
		return true
	
	
	function StartupDebugArea
		|| m = `
		line "/usr/local/speedie/GUI.scproj/gui.input/GUI/Confirm.spd" "ConfirmWindow.SetResponse" 3362
		line "/usr/local/speedie/GUI.scproj/gui.input/GUI/FileViewer.spd" "FileViewer.ShowQuickOpen" 2540
` ~ parse
		|| v = `
		line "/usr/local/speedie/GUI.scproj/gui.input/GUI/Confirm.spd" "|TextView| R" 3414
		line "/usr/local/speedie/GUI.scproj/gui.input/GUI/Confirm.spd" "|bool| Vis" 3433
` ~ parse
		.Stack.use(m as listviewrow)
		.Variables.use(v as listviewrow)
		.appinfo.text = "Speedie\n(Inactive)"
	
	
	function RelistStartupErrors
		for err in .startuperrors
			ifn err isa error
				log "RelistStartupErrors bug"
			.errorlist <~ err
			is broken
		// * need to alter the saved errors when the .perry file is altered...
	
	
	function StartFiles 
		|| IsDir     = .project.isdir
		|| ProjConf	 = .perryfile
		error.SourceAdd(@tmp+projconf)
		|message| conf
		if !isdir
			.FileList.NoFind = nil
		  elseif projconf.exists
			conf = projconf.parse

		|| f = .FileList
		f.clear
		f.AddRoot(.project, true)
		f.FocusOn( .root! )
		.LoadConfSub(conf)


	function LoadConfSub (|message| conf)
		|| f = .FileList
		f.Excludes = dictionary()
		for ex in conf..excludes
			f.Excludes![ex.value] = "x"
		
		if !conf and .projIsSpeedieCode
			conf = templates.Roots.parse
		
		.LostFunks = conf["unused_lib_funcs"]
		for lib in .LostFunks
			lib.name = .expandstr(lib.name)
		
		for ro in conf..roots
			error.SourceAdd(ro)
			if ro.expect(@str)
				file.OSXMaxCaseWarnings[] max= 1 // like /usr/local/bin vs /USR/LOCAL/BIN . Allows to report case errors.
				|| str = .ExpandStr(ro.name)
					f.addroot(str.file)
				  else
					error (ro, "Can't find this project root. Please fix this path.")
			error.SourceRemove
		
		f.CheckSize
		error.SourceRemove


	function DesiredStart (|filerow| projfol, |&int| pos,  |filerow|)
		opt norefcounts
		|| edit = .SharedProjectTabSource["edit"]
			pos[] = .SharedProjectTabSource["pos"].int
			|| n = edit.name
				return self.filelist[n]
		|| tod = .nottodo
			return tod
		return projfol
	
	
	function StartProj (|bool|)
		opt norefcounts
		|| projfol = .MainProjFol
			projfol.dirfile = ".todo"
			.findnottodo
			(projfol is expanded)
			|| pos = 0
			|| file = .DesiredStart(projfol, pos)
				.EditRow(file)
				.EditMe.showandsel(pos)
			return true
		return .EditRow(.filelist.start)


	function PerryFile (|file!|)
		return .project.child(".perry")
	
	
	function StartFileList
		perry.AddProj(.project.path, self)
		|| r = .root
			.id = r.location
		.nottodo = nil
		.RecentFiles.clear
		.StartFiles
	
