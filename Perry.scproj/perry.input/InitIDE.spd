

extend PerryIDE 
    constructor (|bool| ignore)
		super.constructor 
		
		sdlapp.AppDocumentOpen = PerryOpenDoc // move to a different startup place
		.EnableHistoryChanges = true
		.InConstructor		= true
		.Previous			= message()
		.id					= "IDE"
		.Debugger			= GUIControl(self)
		.SearchArea			= guicontrol(self) 
		.ViewButtons		= guicontrol(self) 
		.RBorder			= guicontrol(self)
		.StdOutBorder		= guicontrol(self)
		.Toolbar			= buttonview(self,		ClickedToolBar,			nil)
		.RunButton			= buttonview(.Toolbar,	ClickedDebug,			PressingDebug, nil, PressingDebug)
		.BuildButton		= buttonview(.Toolbar,	Clickedcompile,			nil)
		.Tabs				= ButtonView(.Toolbar,	ClickedTabs,    PressingTabs,  ReturnProjectPath,  RightClickedTabs) 
		.StartScreen		= ButtonView(.Toolbar,	&StartupWindow.open)
		.Progress			= ProgressBar(.Toolbar,	ClickedCancel)
		.GoPrev				= ButtonView(.RBorder,	ClickedPrevNext, RightClickNext, ChosePrevItem, RightClickNext)
		.GoNext				= ButtonView(.RBorder,	ClickedPrevNext, RightClickNext, ChosePrevItem, RightClickNext)
		.CurrFileName		= ButtonView(.RBorder,	OpenProjectPath, nil, ReturnProjectPath) 
		.FunctionMenu		= ButtonView(.RBorder,	MenuAllFuncs,	nil,  ReturnAllFuncs) 
		.MassSearchField	= TextView(.SearchArea,	nil,					PressedSearchKeys)
		.SubFindCheckBox	= ButtonView(.searcharea, PressedSearchWithin   	)
		.FoundList			= ListView(.SearchArea,	ClickedError,			ReturnErrorList) 
		.ErrorList			= ListView(self,		ClickedError,			ReturnErrorList) 
		.LogArea			= ListView(self,		nil,					nil)
		.EditMe				= TextView(self,		JumpToDefinition,		PressedEditKeys)
		.FileList			= FileViewer(self,		SelectedFile,			nil, .editme) 
		.Status				= TextView(self,		ClickedStatus,			nil)
		.StatsInfo			= TextView(self,		ClickedStats,			nil)
		.SelInfo			= TextView(self,		PressedSelInfo,			nil)
		.JeeboxText			= TextView(self,		nil,					nil)
		.SpeedieText		= TextView(self,		nil,					nil)
		.ProductPage		= TextView(self,		nil,					nil)
		.tabs2				= ButtonView(.stdoutborder,		ClickedCompileTabs) 
		.NoNeeder			= TextView(self,		ClickedNoNeed,			nil)
		.AutoComplete		= menu(self, 			nil,					AutoCompleteInsertText)
		.ViewFiles			= ButtonView(.ViewButtons,		ClickedAView)
		.ViewSearch			= ButtonView(.ViewButtons,		ClickedAView)
		.ViewDebugger		= ButtonView(.ViewButtons,		ClickedAView)
		.ViewErrors			= ButtonView(.ViewButtons,		ClickedAView)
		.viewlog			= ButtonView(.ViewButtons,		clickedaview)
		.Views				= [.filelist,  .errorlist,  .debugger,  .searcharea,  .logarea]
		.filesep			= StretchControl.horz(self, 175~right, 110, 110)
		.editsep			= StretchControl.vert(self, 0,         0,   100)
		.PopupDisplay		= textview(self)
		.DebugArgsList		= textview(self	)
		.AttachedProgram	= ""
		
		.init
		.InConstructor = false
	
	
	function Init // perryide.init
		.size = the~area
		.noclutter  = 2
		.CopyPaste	= CopyPasteFlags.PasteFile
		.onpaste = &perryopendoc


		with .toolbar 
			.size 			= the~width  by  20~down
			.takesfocus		= 0
			.ID				= "toolbar" 
			isnt drawsfocus
			.align			= ListViewState.aligncenter
			.gnormal.solid  = (0.0, 0.0, 0.0, 0.6) 
			.NoDrawClicked  = true
		
		
		with .DebugArgsList
			isnt visible
			is editable
			.size =  the~left+4 for 360  by  18~down back 150
			.id = "debugargs"
			.ClickOutsideCloses = true
			.OnFocus = DebugArgsGotFocus
			.gnormal.solid  = (0.0, 0.0, 0.0, 0.7)
			.gnormal.edge = (0.0, 0.0, 0.0, 0.125)
			.OnKeyDown = DebugArgsKeyDown


		with .ViewButtons 
			.ID				= "LBorder"
			.size 			= the~width  by  15~down
			.gnormal.solid  = (0.0, 0.0, 0.0, 0.7)


		with .Rborder 
			.ID				= "RBorder"
			.size 			= the~width  by  15~down
			.gnormal.solid	= (0.0, 0.0, 0.0, 0.7)

		with .FileList
			.tooltip		= "Displays files in project"
			.folfile		= ".perry"
			.takesfocus 	= takesfocusflag.CanFocus
			.ID				= "FileList"
			.size 			= the~width by the~bottom to 15~down
			.copypaste	   |= copypasteflags.pastefile
			.OnSearchWithin = PerrySearchWithin
			.onpaste		= &PerryOpenDoc
			.newcmm				// for the hideside test
			.sizecheckers	= "spd,txt,frag,vert,sdf" / ','
			.NoFind			= "jb.cpp,jb.h,jb_globals.cpp".dict(',')
			isnt drawsfocus
			is NoSearch
			
			.WasEdited = PerryfileRenamed
			.UseColorScheme	= true
			.OneAlwaysSelected = true
			.SetFocus
			.Init


		with .autocomplete
			.ID				= "AutoComplete"
			.takesfocus 	= takesfocusflag.CanFocus
			is TypeThrough
			isnt visible

		with .errorlist
			 .tooltip = "Displays Compile Errors. Press \1f< or \1f> to step in list."
		
		.ErrorLogInit(.Errorlist, "ErrorList" )
		.ErrorLogInit(.LogArea,   "LogArea" )

		with .NoNeeder 
			.takesfocus 	= 0
			.ID				= "NoNeed"
			.size 			= 5~inside  by  17~up to 55~down
			isnt editable
			isnt visible
			isnt drawsfocus
			.copypaste	   |= copypasteflags.copytext
			.align			= ListViewState.aligncenter
			.gnormal.clear 


		with .debugger 
			.tooltip		= "Debugger area"
			.takesfocus 	= takesfocusflag.CanFocus
			.ID				= "DebuggerArea"
			.size 			= the~width by the~bottom to 15~down
			isnt drawsfocus
			isnt visible
			.gnormal		= self.errorlist.gnormal


		with .SearchArea 
			.tooltip		= "Searches stuff. Press \1f< or \1f> to step in list."
			.takesfocus 	= takesfocusflag.CanFocus
			.ID				= "SearchArea"
			.size 			= the~width by the~bottom to 15~down
			isnt visible
			isnt drawsfocus
			.gnormal		= self.errorlist.gnormal


		with .MassSearchField
			is   editable
			is   visible
			isnt drawsfocus
			.tooltip		= self.SearchArea.Tooltip			
			.SingleLine		= true
			.ID				= "SearchField"
			.size 			= 3~inside  by  2~down back 15
			.takesfocus		= takesfocusflag.On
			.gnormal.solid	= (0.0, 0.0, 0.0, 0.25)


		with .SubFindCheckBox
			isnt visible
			.size		= 3~inside  by  2~under back 15
			.Tooltip	= "Searches within only selected files"
			.id			= "SubFind"
			.gnormal.solid = (0, 0, 0, 0.25)


		with .FoundList // with .findlist
			is   editable
			is   visible
			is   UnSearchable
			isnt DrawsFocus
			.IsTree	= true
			.NoSeps	= true
			.tooltip		= self.SearchArea.Tooltip			
			.OneAlwaysSelected = true
			.UseColorScheme	= true
			.OnKeyDown		= FoundListKeys
			.ID				= "FoundList"
			.size 			= the~width  by  the~bottom to 0~under 
			.AlwaysSendChangeEvent = true
			.takesfocus		= takesfocusflag.On
			.gnormal		= self.FileList.GNormal.copy
			.GNormal.solid  = nil // ?
			.gRowSel.solid  = ((0.8, 1.0, 0.8, 0.65))


		with .tester
			.gnormal.solid	= ((0.0, 0.0, 0.1, 1.0))
			.size = 10~wide by 10~high
			.left = 0
			
		with .progress
			.gnormal.edge = (1.0, 1.0, 1.0, 0.5)


		with .PopupDisplay
			isnt visible
			is clickthrough
			.ID				= "PopupDisplay"
			.size 			= the~area
			.takesfocus		= 0
			.clipmode = ControlPoint.SlideBackInWindow
			.expectsparse	= TextView.probablyjeebox
			.gnormal.bg		<~ ((0.1, 0.3, 0.1, 1.0))
			.gnormal.edge	<~ ((0.1, 0.3, 0.1, 0.5))

	
		with .EditMe
			is   enabled
			is   editable
			isnt drawsfocus
			.ID				= "EditMe"
			.GroupSaveAll	= true
			//.ShowLineNumbers=true
			.size = the~width by the~bottom to 0~before 
			.SetsDebugLines = 13
			.OnTextChanged	= EditMeModified
			.OnShowExtraInfo = OnShowExtraInfo
			.takesfocus		= takesfocusflag.On
			.gnormal.solid	= (0.0, 0.0, 0.0, 0.81)
			.OnSelChanged   = EditMeSelChange
			.onselerror		= EditMeSelError
			.ColoriseAsRoot = autocomplete.functions


		with .status 
			.ID				= "Status"
			.align			= ListViewState.aligncenter
			isnt editable
			.takesfocus		= 0
			.size 			= the~width  by  0 to 11
			.gnormal.solid  = (0, 0, 0, 0.6)


		with .StatsInfo 
			.ID				= "StatsInfo"
			.align			= ListViewState.alignleft
			isnt editable 
			.takesfocus		= 0
			.size 			= the~left to the~middle+100  by  0 to 11
			.gnormal.clear


		with .SelInfo 
			.ID				= "SelInfo"
			.align			= ListViewState.alignright
			isnt editable
			.takesfocus		= 0
			.size 			= the~right back 180  by  0 to 11
			.gnormal.clear

		with .FileSep
			is enabled
			.ID	= "filesep"
			.size = the~width by 12~up to 20~down
			.addHigh self.Rborder
			.addHigh self.editsep
			.addlow  self.ViewButtons
			.addlow  self.ErrorList
			.addlow  self.LogArea
			.addlow  self.debugger
			.addlow  self.SearchArea
			.addlow  self.FileList
			.addlow  self.Noneeder
		
		with .filesep.div
			.onhide = FileSepClicker
			.onshow = FileSepClicker
			.onstretch = HideSomeStuffOnResize

		with .editsep
			is enabled
			.size = the~area
			.ID	= "edit+stdout"
			.AddLow  self.StdOutBorder
			.addhigh self.rborder
			.addhigh self.editme


		.JeeboxText.SetupOut("jeebox")
		.SpeedieText.SetupOut("speedie")
		.ProductPage.SetupOut("product")
				
		.runbutton.SubControl = self.DebugArgsList

		.AddIDEButton(.RunButton,	"\02", "Debug Project", "debug")
		.AddIDEButton(.buildbutton, "\1C", "Build Project", "compile")
		.buildbutton.next = .progress // better
		.AddIDEButton(.progress,	"", "", "progress")
		.runbutton.size =   5~after for 22  by  3~inside
		.buildbutton.size = 5~after for 22  by  3~inside
		.progress.size =    0~before for 60  by  3~inside
		
		.RunButton.ExpandOnMouseOver = 1
		.buildbutton.ExpandOnMouseOver = 1
		.progress.ExpandOnMouseOver = 1
		.currfilename.ExpandOnMouseOver = 1
		.FunctionMenu.ExpandOnMouseOver = 1
		.tabs.ExpandOnMouseOver = 2

		
		with .StdOutBorder
			.ID				= "OutBorder"
			.size 			= the~width  by  18~down
			.gnormal.solid	= (0.0, 0.0, 0.0, 0.75)

		with .tabs
			.id = "Tabs"
			.size = 10~after to the~right  by  3~inside
			.itemwidth = 75
			.items = perry.projects
			|| pf = perry.projects.first 
				 (pf is selected)
			.gnormal.solid	= (0.7, 1.0, 0.2, 0.2)

		with .tabs2
			.id = "CompileTabs"
			.size = the~area
			.itemwidth = 75
			.gnormal.solid	= (0.7, 1.0, 0.2, 0.1)
			|| items = "Speedie, Jeebox, ''".parse|listviewrow|
			.items = items
			items = items.first
			(items is selected)
			items.Obj = self.SpeedieText
			items++
			items.obj = self.JeeboxText
			items++
			items.obj = self.ProductPage
			

		.AddIDEButton(.StartScreen,	"\1a", "Startup screen", "startup")
		.StartScreen.size = 7~left back 22  by  3~down back 14

		.AddViewButton(.Viewfiles,		"\10",	.filelist)
		.AddViewButton(.viewsearch,		"\16",	.searcharea)
		.AddViewButton(.viewerrors,		"\17",	.errorlist)
		.AddViewButton(.viewdebugger,	"\18",	.debugger)
		.AddViewButton(.viewlog,		"\0D",	.logarea)
		.viewfiles.left = 5
		.view(.Viewfiles)
		
		.addlbutton(.goprev,		"<",	"prev", "Go to previous file.")
		.addlbutton(.gonext,		">",	"next", "Go to next file.")
		
		with .CurrFileName
			.MouseDownDoesClick	= true
			.gnormal.solid	= (0.7, 1.0, 0.2, 0.1)
			.id = "CurrFileName"
			.tooltip   = "Show File Path"

		with .FunctionMenu
			.MouseDownDoesClick	= true
			.gnormal = self.currfilename.gnormal
			.id = "AllFuncs"
			.tooltip   = "List Functions In File"
			.size = 4~after for 40 by the~same
		
		with .FunctionMenu.submenu
			.onselected = PerryFuncMenuSelected

		with .currfilename.submenu
			isnt drawsfocus
			.ID				= "PathMenu"
		
		with .FunctionMenu.submenu
			isnt drawsfocus
			.ID				= "allFuncsMenu"
		
		.ViewAsCurr
		.SetupLogArea
		.ReTextSubFind
		.StdOutSelect(.SpeedieText)
		

	function textview.SetupOut (|string| name)
		opt norefcounts
		is enabled
		is alwaysscrollable
		isnt editable
		isnt drawsfocus
		.ID				= name
		.size 			= the~width by the~bottom to 0~under
		.takesfocus		= takesfocusflag.On
		.gnormal.solid	= (0.0, 0.0, 0.0, 0.85)
		.expectsparse	= TextView.probablyjeebox
		.PreferStayAtEnd= true
		.ide.EditSep.addlow(self)
		
		
	function SetupLogArea
		|| g = .LogArea
		g.istree = true
		require !app.prefs["nolog"]
		g.gnormal.seps = g.gnormal.bg
		g.gnormal.seps.a *= 0.8
		
		g.OnKeyDown = LogAreaKeys
		.sendrecv = @thg + "-- speedie comms --"
		g.listsource <~ .sendrecv
		g.id = "log"
		(.sendrecv is expanded)
		(.sendrecv is aligncenter)


	function LogComms (|message| msg, |string|type="")
		opt norefcounts
		require .sendrecv
		|| m = .sendrecv
		m <~ @emb + (type + msg.render)
		m.position++ 
		while m.position > 300
			m.first.remove
			m.position--


	function ErrorLogInit (|listview| lv, |string| s)
		with lv
			.takesfocus 	= takesfocusflag.CanFocus
			.ID				= s
			.size 			= the~width by the~bottom to 15~down
			isnt visible
			isnt drawsfocus
			is unsearchable
			.MultiLineDraw = true
			.AlwaysSendChangeEvent = true
			.copypaste	   |= copypasteflags.copytext
			.gnormal.edge	= .gnormal.bg
			.rowheight	   *= 2

	function AddViewButton (|ButtonView| BTN, |string| Oof, |guicontrol| tag)
		.ViewButtons <~ btn // 
		btn.tag		= tag
		.addlbutton(Btn, oof, tag.id, tag.tooltip)
		btn.id		= "btn_"+tag.id
		btn.size    = 3~after for 21  by  1~down back 13
		btn.align  |= listviewstate.DrawWhiteSpace
		tag.tooltip = ""
	
	
	function AddLButton (|ButtonView| BTN, |string| txt, |string| id, |string|tool)
		.AddIDEButton(btn, txt, tool, id)
		btn.size = 1~after for 16  by  1~inside
		btn.gnormal.clear
	
	
	function AddIDEButton (|guicontrol| BTN, |string| txt, |string| tip, |string| id)
		btn.id = id
		btn.tooltip = tip
		btn.Text = txt
		(btn is Spacer)
		|| opacity = 0.93
		|| f	   = 0.15 / opacity
		if btn isa buttonview
			btn.gnormal.solid = (f, f, f, opacity)
	
	function LoadProject (|file| proj, |bool|)
		require proj.mustexist("load project")
		.project = proj
		.IsLoading = true
		require .LoadConfSub(proj)
		.IsLoading = false
		startupwindow.hide
		.viewasproject
		.ForceRecheck
		app.saveprefs // for pref-file editing
		.Show(false)
		.ViewAsbetter
		return true
	
	
	function Roots (|message| conf, |[string]|)
		opt norefcounts
		for ro in conf..roots
			if ro.expect(@str)
				|| str = .ExpandStr(ro.name) 
					rz <~ str
				  else
					error (ro, "Can't find this project root. Please fix this path.")
	
	
	function StartFiles (|message| conf, |bool| IsDir)
		|| f = .FileList
		f.clear
		f.Excludes = dictionary()
		for ex in conf..excludes
			f.Excludes[ex.value] = "x"

		f.addroot(.project, true) isnt editable
		f.FocusOn( f.start|filerow| )
		
		if !IsDir and .IsSpeedieCode
			conf = qqfiles.Roots.parse
		for p in .roots(conf)
			f.addroot(p.file)
		f.checksize


	function DesiredStart (|filerow| projfol, |&int| pos,  |filerow|)
		opt norefcounts
		|| edit = .ProjMsg["edit"]
			*pos = .ProjMsg["pos"].int
			|| n = edit.nyme
				return self.filelist[n]
		|| tod = .nottodo
			return tod
		return projfol
	
	
	function StartProj (|bool|)
		opt norefcounts
		|| projfol = .MainProjFol
			projfol.dirfile = ".todo"
			.findnottodo
			(projfol is expanded)
			|| pos = 0
			|| file = .DesiredStart(projfol, pos)
			.EditRow(file)
			.EditMe.showandsel(pos)
			return true
		  elseif .EditRow(.filelist.start)
			return true
		  else
			.close(sdlapp.kactivity)


	function LoadConfSub (|file| proj, |bool|)
		|| ProjIsDir = proj.isdir
		|| ProjConf	 = proj.child(".perry")
		
		|message| conf
		if ProjIsDir and projconf.exists
			conf = projconf.parse
		
		perry.AddProj(proj.path, self)
		|| r = .root
			.id = r.location
		.nottodo = nil			// awkward. should remove this property
		.Previous.clear
		.PrevMarker = nil
		
		.StartFiles(conf, ProjIsDir)
		.isloading = false		// its done and we need .startproj
		return .StartProj
	
