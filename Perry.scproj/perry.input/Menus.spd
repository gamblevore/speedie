

function ButtonView.FillMenuPath (|string| L, |listviewrow| tab=nil)
	|| p = .SubMenu		#require
	|| orig = l
	p.listsource.clear
	while l
		|| S = filerow.icon(l, "").render + " " + l.NameOrRoot
		p <~ filerow(l, s, (".nothing", "")(l != orig))
		if l.IsVolume
			exit
		l = l.parent
	.OpenMenu(tab)


function string.NameOrRoot (|string|)
	opt norefcounts
	|| s = .name
		return s
	return "Root"


function PerryIDE.EnablePrevNext
	|| m = .FindInHistory(.path)
	(.GoNext is enabled) = m.next!=nil
	(.GoPrev is enabled) = m.prev!=nil


function perryide.FindInHistory (|string| p, |message|)
	opt norefcounts
	for s in .RecentFiles
		if s.firstname ~= p
			return s


function perryide.AddToJumpHistory
	require !.StillJumping
	|| p = .path
	|| old = .findinhistory(p)
	if  !.duringNextPrev  or  !old
		if old
			old.remove
		.RecentFiles.msg(@str, p.name).msg(@str, p)
		.RecentFiles.trim(60, false)
	.EnablePrevNext
	

function RightClickNext (GUIaction)
	if self isa ButtonView
		|| s = .SubMenu
			s.OnTypingFilter = PerryFileListFilter
			s.ListSource = .ide.SortedPrevious
			.OpenMenu


function ChosePrevItem (GUIListEvent)
	|| i = .ide
	|| old = i.FindInHistory(row.firstname)
	i.GoToMarker(old ?? row, 1)
	return true


function ClickedPrevNext (GUIaction)
	opt norefcounts
	|| i = .ide
	|| m = i.FindInHistory(i.Path)
		|| fwd = self == i.gonext
		m = m.step(fwd)
		i.GoToMarker(m, fwd.dir)
		return true
	

function PerryFileListFilter (GUIListEditEvent)
	opt norefcounts
	.ListSource = .ide.SortedPrevious(value)


function PerryIDE.GoToMarker (|message| m, |int| dir)
	require m 
	|| l = m.first
	.duringNextPrev = dir
	using self
		.GoToAnyFile(m.firstname, true)
	.duringNextPrev = 0


function perryide.SortedPrevious (|string| StrFilter = "", |message|)
	rz = Message()
	for ch in .RecentFiles
		if StrFilter.filter(ch.name)
			|| cpy = ch.copy
			rz <~ cpy


function PressingTabs (guiaction)
	if self isa ButtonView
		|| p = .submenu|listview|
		|| ide = row.ide
		if p and ide
			p.ListSource.clear
			p <~ ( "Copy " + ide.name, MenuCopyProject, ide)
			|| file = ide.path|string|
			if file and file != ide.Project|string|
				p <~ ( "Copy " + file.name, MenuCopyFile, ide)
			p <~ ( "Show In Desktop", MenuShowProject, ide)
			p <~ ( "Close", MenuCloseProject, ide)
			.OpenMenu(row)


function message.IDE (|perryide|)
	opt norefcounts
	if self
		|| o = .obj as perryide
			return o
		for w in window.all
			if w isa PerryIDE
				if .name ~= w.Project
					return w


function ClickedOpenRecent (GUIaction)
	if self isa ButtonView
		|| s = .SubMenu
			s.ListSource = Perry.RecentProjects
			.OpenMenu


function string.NotifyCopy
	clipboard.text = self
	Notifications <~ "Copied: " + self


function MenuCopyProject (guimenuevent)
	opt norefcounts
	|| ide = menu.ide
		ide.project.NotifyCopy


function MenuCopyFile (guimenuevent)
	opt norefcounts
	|| ide = menu.ide
		ide.Path.NotifyCopy


function MenuCloseProject (guimenuevent)
	opt norefcounts
	|| ide = menu.ide
		ide.Close


function MenuShowProject (guimenuevent)
	opt norefcounts
	|| ide = menu.ide
		ide.Project.Reveal
	

function RightClickedTabs (GUIAction)
	if row and self isa ButtonView
		|| i = row.ide
			.FillMenuPath(i.Project, row)

