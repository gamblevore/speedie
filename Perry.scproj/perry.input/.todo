

                                                       Todo

* jz -d /Users/theodore/Compression/SF.xml.mz // fail
* small floats printing wrong
* breakpoints on click line num
* click on ch to view bytes.
* caller list should select current func?


// VM
* Intrinsics
* SIMD
* opt ReadOrWriteSub for ADPK.
* post-opt if x: a = b, else: a = c --> a = b, if !x: a = c    // assuming that either branch is only 1 instruction
* clami/clamu 32-bit
* debug info! in pack

* Perry exec
	* exec send back debug-info
* "debug mode" VM
* Check for funcs in the lib that need removing (ASM)
* Save ClassProperty hash per-class in exec-lib... for when properties change!


* // Perry Release
* step into func... ignoring param funcs
* TextView error/find resync (make both options work side by side then detect first difference. also script a few events?)
* scroll no longer saved for fwd/backward! undo system needs to set it on doc/load but not type/undo
	* Prev/next buggered
* Double clicking on a white space should select the space... (also is the start of a char off a little?)
* Comments should be grey or something (TextViewLine bug?)


// Perry do later
* use stringstream for compression! not jbin!
* leaking (Check if it happens with non-code files)
* prev/next for search area. Save previous lists! up to 10?
* Last 5 (or so) files in the file-tab area could be nice.


// Speedie Do later
* shrink history https://passingcuriosity.com/2017/truncating-git-history/
* Figure out why the entire string table keeps thrashing despite all my efforts
* .t.Rotation.y += y // seems to bypass the rotation setter!
* carrays :(
	* structs work wierdly with carrays also. mat4 rows and stuff.
	* my_mat4 *= somemat4() // should create tempstruct
* CalledFrom datatypes too
* To make "dispatch" clickable, we need to alter MoveToInitFunc, so we have an init func per module per file.


// Perry additions
* Don't keep on requesting pico per keypress if it just crashed? give it at least 5 seconds!
* Too long text in listview draw as much as we can
* image editor for the gaming engine
* skinning support? .HelloKitty.spd or .emo.spd file endings could reskin the IDE dynamically.
   * game-like IDE. functionality, "fix" using gameplay states. Mini-games that "Restore state". Do after the VM. Like collect items that are code and get unlocked in the right order...  that can't just be commented out.
* Double clicking |abc| on the || should sel the entire thing, doing on the inside should sel the inside
* https://www.gridsagegames.com/blog/gsg-content/uploads/2024/01/cogmind_options_menu_font_set_sorting.gif


// ASM opts
	* x = .vec4.y						// no need simd
	* .xy = .vec4.wz					// wz is just a vec2, can be copied in MEMCPY(8) instruction
	* early decr could free register
	* do refs in the nilchecker phase? I will have total information at each branch close...
		* its also super-fast
	* avoid nil-checks for inlines if we know its not nil?
	* LUPU/LUPD mini-opt in "while"
	* JMPK opt
	* LUPU post-processing opt?
	* no phi! can be a future opt. phis via linked-list

