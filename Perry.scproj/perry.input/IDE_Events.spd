 
 
function FileSepClicker (guiaction)
	opt norefcounts
	.ide.ViewTextModeSwap


function PerryIDE.UnusedFuncsFB (|message| stuff)
	opt norefcounts
	|| arg = stuff.Last
	require arg == @arg
	|| where = stuff.FirstName
	for tmp in arg
		.UnusedFuncsSub(tmp, where)


function PerryIDE.UnusedFuncsSub (|message| tmp, |string| where)
	|| Level = ErrorSeverity.Hint
	if tmp.name contains "() is unused"
		Level = ErrorSeverity.warning
	
	|| err = error(nil, tmp.name, level, where)
	err.position = tmp.first.int
	.editme.LineErrorAdd(err)


function perry.IdeAddProj (|string| Path, |PerryIDE| ide = nil, |PerryIDE!|) // initide
	|| old = perry.FindProj(path)
		ClickedTabs(nil, old)
		|| o = old.ide
			return o
	ide ?= PerryIDE.EmptyBase
	ide ?= PerryIDE(path.file)
	ide.LoadProject
	return ide


function string.TrimCodeExt (|string|)
	if .PathIsCode
		return .TrimExtAndPath
	return self


function Perry.CreateProj (|string| path)
	|| proj = path.file
	|| Main = templates.EmptyMainFile(proj.trimextandpath)
		
	ifn path isa "scproj"
		require path.file.CreateEmpty
		if path isa "spd"
			proj.data = main
	  else
		expect (!path.FileExists) (path, "Can't create over existing project.")

		proj.child("input/main.spd").data(Main) #require

		|| R = templates.Roots
		|| T = templates.Todo
		proj.child(".perry").data = R
		proj.child("input/.todo").data = T
	IdeAddProj(path)

	
function ClickedTabs (GUIAction)
	opt norefcounts
	|| i = row.ide
		i.ShowIDE(True)


function ClickedCompileTabs (Guiaction)
	opt norefcounts
	.ide.CompileTabSelect(row)


	
function PerryIDE.ShowCompileTab (|object| tab) // showtab
	.ShowCompileCutely           // OOOP. 
	.CompileTabSelect(tab)


function PerryIDE.CompileTabSelect (|object| Desired)	
	opt norefcounts
	for i in .CompileTabs.Items
		|| obj = i.obj as textview
			|| vis = (Desired == i or obj)
			(i is selected)  = vis
			(obj is visible) = vis


function ClickedToolbar (GUIAction)
	opt norefcounts
	if self isa ButtonView
		if (.clickcount == 2)
			.ide.ViewTextModeSwap


function file.InputFol (|file|)
	for c.files in self
		if  c.name ~= "input"  or  c isa "input"
			return c


function file.FindProjectMain (|file|)
	|| inp = .inputfol$
	|| best = inp.child("main.spd")
	if best.exists
		return best
	best = inp.child("index.spd")
	if best.exists
		return best
	for c.files in inp
		if c.isspd
			rz = c
			exit


function PerryIDE.FindConfFile (|filerow|)
	if .IsSingleFileProject
		return .FileList[0]
	return .LocateProjRoot("./index.spd")


function PerryIDE.FindNotTodo (|bool|)
	if .IsSingleFileProject
		|| c = .CurrFileRow
		|| root = .FileList[0]
		if c != root
			.NotTodo = c
	if !.nottodo
		.nottodo = .LocateProjRoot("./main.spd")
		if !.nottodo
			.nottodo = .LocateProjRoot("./index.spd")
			if !.nottodo
				.nottodo = .MainProjFol
	return .nottodo


function PerryIDE.ClickedTodo
	|| fl	= .filelist
	|| todo	= .MainProjFol ?? fl[0]
	require .FindNotTodo // what? fl is nil? it happened tho?
	if !todo
		todo = fl[0]
	|| Jumpback = (todo is selected) and .nottodo and (fl.listsource contains .nottodo) 
		todo = .NotTodo
		fl.show(todo)
	  else
		.nottodo = .CurrFileRow
	fl.SelectNoShow(todo)


function fnBuildIsDead (fnConfirmCanceller)
	if self mustbe perryide
		if !.IsBuilding
			return .CancelCompile


function PerryIDE.IsBuilding (|bool|) // .isbuilding, .iscompiling, .compiling 
	return .buildbutton isnt enabled


function ClickedCancel (GUIAction)
	|| i = .ide
	if !i.Isbuilding
		return true
	|| can = ConfirmCanceller(i, fnBuildIsDead)
	|| name = i.project.TrimCodeExt
	|| q = "Currently building $name... Cancel Build of $name?"
	if q.confirm(can)
		return i.CancelCompile
		

function ClickedCompile (GUIaction)
	.ide.compile("compile")

		
function PerryRecheckEvent (guilistevent)
	.ide.ForceRecheck


function ReturnProjectPath (GUIListEvent)
	if row isa filerow
		row.location.reveal
	return true


function ReturnRecents (GUIListEvent)
	perry.IdeAddProj(row.name)
	return true


function ReturnAllFuncs (GUIListEvent)
	|| e = .ide.EditMe
	e.ShowAndSel(row!.position, true)
	e.SetFocus
	return true

	
function OpenProjectPath (GUIaction)
	|| f = .ide.filelist.FirstSelected as FileRow
		if (self isa buttonview)
			.FillMenuPath(f.location)


function ClickedStatus (GUIaction)
	.ide.editme.ShowNextParseError


function ClickedProjectInfo (GUIaction)
	.ide.NextProjInfo


function PerryIDE.SaveAndShowErrors (|bool|) // checkerrors recheckforerrors
	opt norefcounts
	.SaveEditing(documentstate.ErrorChecking)
	.Recheck(True)
	|| t = .IsTextMode
	.ViewAsProject
	if t and .IsViewing(.errorlist)
		return true
	if .ShowErrors
		return true
	.UseThisView(.Viewfiles)
	return true
		


function PerryIDE.ShowErrors (|bool|)
	opt norefcounts
	if !.isviewing(.errorlist)
		.UseThisView(.ViewErrors)
		return true
	if .errorlist.hasany
		.errorlist.selectatleastfirst
		return true


function ClickedAView (GUIaction)
	opt norefcounts
	if self isa ButtonView
		.ide.UseThisView(self, true)


function PerryIDE.UseThisView (|buttonview| btn, |bool| chng=false)
	opt norefcounts
	// merge into .view?
	|| el = .errorlist
	if (el is visible) and btn.tag == el
		el.SelectAtleastFirst
	.view(btn, chng)


function ClickedNoNeed (GUIaction)
	opt norefcounts
	|| i = .ide
	i.view(i.viewfiles)


function PerryIDE.ShowText (|textview| field, |string?| Text, |bool| Always, |bool|)
	if text != nil
		field.text = text
	.CompileTabSelect(field)
	.ShowCompileCutely(Always)
	return true


function perryIDE.FlipJeeboxField (|bool|)
	if .flip(.JeeboxText)
		return .UpdateJeeboxField
	return true


function PerryIDE.UpdateJeeboxField (|bool|)
	|| e = .EditMe
	|| sr = e.SelRange
	|| txt = e.SelText
	if !sr.width
		txt = e.FindDrawInfo(sr.x).text
	
	|| str = ""
	|| msg = txt.Parse
		str = msg.RenderAST(0)
	  else
		str = stderr.pop!.render
	.ShowText(.JeeboxText, str, true)	// OK... so... what about resel from drag?
	
	return true


function perryide.UpdateFoundHeader
	|| f = .FoundList
	|| h = f.Headers
		|| files = 0
		|| matches = 0
		for s.fast in f.ListSource
			files ++
			matches += s.SlowCount
		h.Name = (matches of "match") + " in " + (files of "file")


function PerryIDE.BatchPhind (|string| text,  |bool| DoReplace, |uint| ID,  |bool|)
	// The search ID... allows not being wasteful when searching across multiple projects
	// which may then search the file twice. If something is already missed in one file
	// theres no point re-searching it. Especially with 10 projects open. Thats 10 misses
	// on the same damn file.
	
	|| f = .FoundList.ListSource
	f.clear
	.filelist.BatchFind(text, DoReplace, f, ID)
	.foundlist.setfocus
	.UpdateFoundHeader
	return f.HasAny


function PressedLineInfo (GUIaction)
	opt norefcounts
	|| i = .ide
	|| q = i.filelist.quickopen
	q.text = "line " + i.editme.CurrLine.Render
	i.filelist.showquickopen


function PressedCharInfo (GUIaction)
	opt norefcounts
	|| i = .ide
	i.BytesInfoMode = !i.BytesInfoMode
	i.ShowRightStats


function PressedSearchWithin (Guiaction)
	|| i = .ide
	|| f = i.FileList
	|| r = f.SearchWithin
		f.SearchWithin = nil
	  else
		f.SearchWithin = f.FindSearchWithin
	i.ReTextSubFind



function PerryIDE.MassSearch (|bool|)
	opt norefcounts
	|| t = .MassSearchField.Text
	.ViewAsProject

	// i forgot what the ID is about.
	// some clever algorithm something that stops something bad happening
	// just keep it... till i remmeber what it does.
	// maybe something to do with searches across multiple projects.
	// i think thats it. So theres no point finding something in another
	// project if we already found it in ours.
	
	|| ID = (perry.findID+1)&255
	ID = ID max 1
	perry.FindID = ID
	
	.BatchPhind(t, true, ID)
	
	if t and .FoundList.isempty
		.NoNeed("The search text “${t}” wasn't found", nil)
		perry.FindElseWhere(self, t, ID)
	  else
		.noneed
	return true

			
	
function PerryIDE.DoReplacement (|error| File, |string| r, |int|)
	|| fs = faststring()
	|| t = .EditMe.Text
	|| First = file.first!.position
	|| last = first
	for curr.fast in file
		fs.appendRange(t, last, curr.position)
		last = curr.after
		curr.position = fs.length
		curr.rangelength = R.Length
		fs <~ R
		rz++

	.editme.InsertSub(fs, (first, last), false, false)


function PerryIDE.DidReplace (|int| n, |string| dest)
	Notifications <~ "Replaced $n matches with: $dest"


function PerryIDE.CanReplace (|string| r,  |listviewrow| root,  |string| src,  |bool|)
	|| n = 0
	for f in root
		n += f.SlowCount
	return "Replace $n matches of: \"$src\"\n\nWith: \"$r\" ?".Confirm


function PerryIDE.DoReplacements (|bool|)
	opt norefcounts
	if .FoundList.isempty
		.MassSearch
	|| r = .massreplacefield.text
	|| l = .FoundList.ListSource
	|| f = l.first
	|| src = .MassSearchField.text
	require .CanReplace(r, l, src)

	|| n = 0
	while  f
		|| fr = f.obj as FileRow
		if f.HasAny and .EditFile(fr) and f isa error
			n += .DoReplacement(f, r)
		f++
	
	.DidReplace(n, r)
	return true
	

function PressedSearchKeys (GUIKeyEvent)
	opt norefcounts
	|| w = .ide
	
	if key.isaccept
		if self == w.MassReplaceField
			return w.DoReplacements
		return w.MassSearch
		
	|| t = w.MassSearchField
	if (key is down) and (t.selrange == t.text.length)
		w.FoundList.setfocus
		return true
	
	if key.IsCancel
		if t.text
			t.text = ""
		  else
			w.view(W.viewfiles)
		return true


function EditMeSelChange (GUITextEvent)
	opt norefcounts
	|| i = .ide
	i.TryReselectASM
	if i.ProductSep.IsOpen and i.jeeboxtext is visible
		i.UpdateJeeboxField
	i.PopupHide
	i.ShowRightStats
	i.ShowLeftStats
	i.EditMeTabRetryThing = 0
	require !TextWasAltered and i.feedback.CommsOpen
	|| e = self|textview|
	|| s = e.selrange
	if s.width
		e.PerryTryAutoComplete(s.x2, "autocomplete_sel", PerryAutoCompleteReason.sel)


function EditMeSelError (GUITextErrorSelected)
	opt norefcounts
	|| i = .ide
	|| el = i.errorlist
	i.DuringMsgFB = true
	el.select(error.lineerror)
	i.DuringMsgFB = false

	
	
function PressedEditKeys (GUIKeyEvent)
	opt norefcounts
	if self isa TextView
		require .ExpectsParse >= 2
		if key is Decl
			return .PerryDeclKey
		
		require key == -9 or -10 or 27
		key = key.abs
		
		|| tabkind = .PerryInsertSyntax(key)
			if tabkind == 1
				.ide.EditMeTabRetryThing = 0
			return true


function PerryIDE.MoveError (|error| row,  |string| p,  |int| i,  |error|)
	opt norefcounts
	while row
		|| nrow = row.step(i>0) 
		if !nrow or nrow.path != p
			return row
		row = nrow


function PerryIDE.ClickedError (|error| row)
	require !.DuringMsgFB
	using self
		|| f = row.path.file
		if (row.path != .editme.path) and f.IsNicelyViewable
			.EditPath(f, false)
		.editme.ShowAndSel(row.position, true)
		.editme.MyError = row


function file.IsNicelyViewable (|bool|)
	if .isdir
		return true
	require .exists
	require .size < 512KB
	return !.readall.isbinary


function PerryIDE.ClickedFind (|error| row)
	opt norefcounts
	.GotoIncludedFile(row.path)
	|| L0 = .MassSearchField.text.length
	|| f1 = row.first
	if row.position
		|| L = row.rangelength
		L ?= L0
		.editme.ShowAndSel(row.position, L, true)
		return

	|| curr = .MoveError(f1, row.path, -1)$
//	|| last = .MoveError(f1, row.path,  1)

	.editme.show(curr.position)
//	while curr
//		.editme.MarkAsFound(curr)
//		if curr == last
//			exit
//		curr++


function ErrorListPaste (guipasteevent)
	|| p = data.parse
		|| errs = error.from(p)
		|| i = .ide
		|| L = i.errorlist.listsource
		for e in errs
			if e == @tmp
				L <~ error.from(e)
		i.UpdateErrorCount
		i.NoNeed
	  else
		StdErr.pop
	
	
function ClickedError (GUIListEvent)
	|| ide = .ide
	if row isa error
		if self == ide.errorlist
			ide.ClickedError(row)
		  else
			ide.ClickedFind(row)
	  elseif GUI.event is mousedown
		if !.Start and ide.filelist isnt visible
			ClickedAView(ide.ViewFiles)
	return true


function LogAreaKeys (GuiKeyEvent)
	require key iscmd keys.k

	|| s1 = .ide.LogComms
	|| s2 = .ide.LogActions
	|| c = s1.SlowCount + s2.SlowCount
		if "Clear log?\n\nContains $c items.".confirm
			s1.clear
			s2.clear
	return true


function ReturnErrorList (GuiListEvent)
	.select(row)
	.ide.editme.setfocus
	return true


function PerryIDE.ReTextSubFind
	|| r = .filelist.SearchWithin
		.SubFindCheckBox.text = "Searches: " + r.Name
	  else
		.SubFindCheckBox.text = "Searches: All"


function SelectedFile (GuiListevent)
	if row isa FileRow
		return .ide.EditFile(row)


function perry.FindElseWhere (|perryide| ignore, |string| find, |byte| FindID)
	for w in perry.OpenProj
		if (w != ignore) and w.BatchPhind(find, false, FindID)
			if "\"$find\" not found here, but was found in '${w.name}'.\n\nTake a look?".confirm
				w.showide
				w.ShowFind
			return


function HideSomeStuffOnResize (guiaction)
	if self isa guicontrol
		.ide.PopupHide
	

function PerrySearchWithin (GUIListEvent)
	opt NoRefCounts
	.ide.SubFindCheckBox is visible
	.ide.ShowFind


function PerryFileViewRightClick (GuiListEvent)
	require self|fileviewer|.RightClickFileList(row, mode)
	if row isa filerow
		|| m = .CMM									#require
		|| menu = menuitem("Count Lines Of Code", FileViewerCountCode)
		|| where = m.listsource[4]
			where.prev = menu
	return true


function FileViewerCountCode (GuiMenuEvent)
	|| row = clicked!.row as filerow			#require
	|| CLOC = (0, 0)
	|| FileCount = 0
	|| Size = 0
	for c.flat in row
		|| L = c.ReadFrom
		if l.isspd or !row.hasany
			|| f = l.file
				|| p = f.parse
					CLOC += p.loc
				size += f.size
				FileCount++
	
	|| fstr = "file".pluralize(FileCount)
	|| r = (size|float| / cloc[]|float|).Render
	app.alert "${Cloc[]} lines of code and ${Cloc[1]} nodes in ${size.strsize} text ($r bytes per line)\n\n$fstr at: ${row.location}"

