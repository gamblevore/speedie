


class PerryIDE (Window) 
	linkage: cpp_part IDE

	|SpdProcess?|				Feedback
	|Process?|					compilr
	|Process?|					RunCompiledApp
	|string|					CompileOKString
	|[error]|					StartupErrors
	|FileViewer|				FileList
	|Guicontrol|				Debugger
	|Guicontrol|				SearchArea
	|Guicontrol|				rborder
	|guicontrol| 				StdOutBorder
	
	|FileRow?|					NotTodo
	|message?|					ProjMsg
	|message?| 					LostFunks
	|[guicontrol]|				Views
	|File|						Project
	|ivec2|						AutoPoint
	|TextView| 					ProductOut
	|TextView| 					ProductErrors
	|TextView|					SpeedieText
	|TextView|					JeeboxText
	|TextView|					MassSearchField
	|TextView|					EditMe
	|GraphicsEditor| 			DrawMe
	|TextView|					EditStatus
	|TextView|					ProjectInfo
	|TextView|					SelInfo
	|TextView|					NoNeeder
	|TextView|					PopupDisplay
	|message?|					LastExtraInfo
	|StretchControl|			ProductSep
	|StretchControl|			FileSep
	|listviewrow?|				LogComms
	|listviewrow?|				LogActions
	|menu|						AutoComplete
//	|ListView|					Variables		// ... todo
//	|ListView|					Stack			// ... todo
	|ListView|					ErrorList
	|listview|					CommsLogList
	|ListView|					FoundList
	|textview| 					DebugArgsList
	|Guicontrol of buttonview|	ViewButtons
	|buttonview?|				PrevView
	|ButtonView|				CurrFileName
	|ButtonView|				FunctionMenu
	|buttonview|				Toolbar
	|Buttonview|				ProjectTabs
	|buttonview| 				CompileTabs // compilertabs
	|buttonview|				SubFindCheckBox    
	|Buttonview|				ViewErrors
	|Buttonview|				ViewFiles
	|Buttonview|				ViewSearch
	|Buttonview|				ViewDebugger
	|Buttonview|				ViewLog
	|Buttonview|				GoNext
	|Buttonview|				GoPrev
	|Buttonview|				StartScreen
	|Buttonview|				BuildButton
	|Buttonview|				RunButton
	|Process?| 					Talker
	|message|					RecentFiles
	|string| 					LastCmdStr
	|date|						LastSendTime
	|string|					AttachedProgram
	|ProgressBar|				Progress
	|Faststring?|				Stats
	|ivec2|						PopupDisplayCorner
	|date|						LastAutoCompleteDate
	|date|						PopupDateOn
	|uint[3]| 					LastMemory
	|int|						EditMeTabRetryThing
	|byte|						DuringLoad
	|byte| 						DuringTempView
	|bool|						AlreadyExpandedCompileTab
	|bool| 						StillJumping
	|bool|						CanAskingAboutMissing
	|bool|						DuringMsgFB  // canloadfile, canupdate, .disable 
	|char|						DuringNextPrev
	|bool|						IsTextOnly
	|bool|						UsingSpdLib
	|bool| 						DebugIsWaitingForCompile
	|bool|						InConstructor
	|bool|						ModifiedForCompile
	|bool| 						IsGraphics
	|byte|						PopupReason

		
	function UpdateStatusErrors
		.EditStatus.text = .PerryStatus


	function ExpandStr (|string| path, |string|)
		|| d = perry.pathdict init [ "spd"  :  perry.SpeedieDir ]

		rz = path.path_expand(perry.PathDict) #expect ("Unrecognised @ in: " + path)
		rz = rz.resolve(fileResolveMode.allowmissing)
	
	function PerryError (|error?|) 
		opt norefcounts
		if keys.shift
			|| u = sdlapp.tooltip.useable
				return u
		|| e = .editme.myerror.useable(0)
			if .editme.ParsedMessage				// don't show simple parse errors
				return e
			if .editme.expectsparse >= textview.probablyjeebox
				return e
		return sdlapp.tooltip.useable
	
	
	function PerryStatus (|string|)
		opt norefcounts
		|| p = .PerryError
			return p.name


	function RemoveProjFromList
		|| r = .projmsg
			.projmsg = message() // for now
			|| n = r.next
			n := r.prev
			.ProjectTabs.selected = n
			r.remove


	function JeeboxEffects (|image| where, |message| bg)
		return
		effects.dest = where
		if Effects.StartJeebox(bg, 0.5)
			Effects.Backup
		  else
			Effects.Restore
	
	behaviour Tickle
		opt norefcounts
// seems to cause blockages sometimes? why?
//		.Feedback$.Pico.Tickle
	
	behaviour Drawbackground
		opt norefcounts
		|| bg = app.Prefmsg("bg")
		if bg == "flat"
			return super.drawbackground(where)
		if !bg
			app.pref("bg") = "jeebox"
		.Jeeboxeffects(where, bg)


	behaviour CancelClose 
		|| proj = .projmsg					#require
		proj["pos"] = .editme.sel0
		Perry.save
		
		if !.filelist.AskSaveall
			return true // failed
		if !ClickedCancel(self)
			return true
		
		|| n = proj.parent.slowcount
		if n >= 2 and reason|int| < SDLCloseReason.TryQuit|int|
			.RemoveProjFromList
		|| p = .prev
		if p isa perryide
			p.showide
			

	function LocateProjRoot (|string| path, |filerow|)
		opt norefcounts
		|| R = .FindPath(path)
		|| P = .MainProjFol
		if R and P and r.location[0, p.location]
			return r			// what do i wanna do?
			

	function FindPath (|string| path, |filerow|)
		opt norefcounts
		return .FileList.FindAPath(Path) 

		
	function MainProjFol (|filerow|)
		opt norefcounts
		|| it = .FileList
		|| r = it[0]
		return it.findapath("./input/", r)  ??  it.findapath("./*.input/", r) 


	behaviour AppForeGroundChanged
		.CheckModified
		.PopupHide
		if !.focus
			.setfocus(.editme)
	
	
	function MyStatsMode (|int|)
		rz = perryide.StatsMode|int|
		if rz > 3
			rz = 0
		if rz < 0
			rz = 0
		perryide.StatsMode = rz
	
	
	function InfoStatus (|string|)
		|| fs = .stats init FastString()
		|| i = .MyStatsMode
		if i == 0
			fs <~ "  --" // :)
		
		  elseif i == 1
			|| e = .editme
			|| t = e.text

			// * char count:  x~chars  x~lines  x~loc  x~nodes, Same for memory
			fs <~ "Chars ${t.charcount}   Lines ${t.linecount}"
			|| msg = .EditMe.ParsedMessage
				|| loc = msg.loc
				fs <~ "   LOC ${loc[0]}   Nodes ${loc[1]}"
			
		  elseif i == 2
			|| f = .filelist.FirstSelected as filerow
			if !f
				0
			  elseif f.asdir
				fs <~ f.Name + "/"
			  else
				fs <~ "proj"
				f = (.filelist.listsource as filerow)
			
			if f
				|| s = f.lastsize
					fs <~ " ${s.strsize} in (${f.lastfilecount} \11)"
				  else
					fs.Length = 0
					fs <~ "no source found"
		
		  elseif i == 3
			|| img = sdlapp.screen.size.area*4*2
			|| PS = PicoGlobalStats.Read 
			fs <~ "Obj ${app.ObjMemory.strsize}   "
			fs <~ "Str ${app.stringmemory.strsize}   "
			fs <~ "Img ${(app.OtherMemory+img).strsize}   "
			fs <~ "Sck ${PS.OpenSockets}/${PS.OpenPicos}"
		return fs


	function NextProjInfo
		.ShowLeftStats(perryide.StatsMode+1)


	function ShowLeftStats (|int| i = -1)
		if i >= 0
			perryide.StatsMode = i
		.ProjectInfo.text = .InfoStatus	


	function ShowRightStats
		if .isgraphics
			(.selinfo isnt visible)
			return
		
		(.selinfo is visible)
		|| fs = FastString()
		|| t = .Editme.Text
		|| sel0 = .editme.sel0
		|| sel = .EditMe.SelText
		|| n = sel.linecount-1			
		fs <~ "ln "
		fs <~ t[0, sel0].LineCount
		if n
			fs <~ "+"
			fs <~ n+1
		fs.PadTo 9
		fs <~ " ch "
		fs <~ t.charcount(0, sel0)
		n = sel.CharCount
		if n
			fs <~ "+"
			fs <~ sel.CharCount
		fs.padto 25
		.SelInfo.text = fs	

	
	function ProjName (|string|)
		disabled "Use .name"
		
	function Name (|string|) //.ProjName
		opt norefcounts
		|| m = .projmsg
			return m.name.name


	function Show (|bool| FromClick=false)
		disabled "use .ShowIDE"

	
	function ShowIDE (|bool| FromClick=false)
		debug_require self // what?
		|| p = .Project
		app.pref("currproj") = p
		if FromClick
			if .islast
				.ClickedTodo
			  else
				.recheck
		if !.isfront
			.ProjectTabs.selected = .projmsg
			.editme.SetFocus // make it simple
			super.show
		.id = .name
		sdlapp.Title = .id


	helper UpdateSearchSwap (|textview|)
		opt norefcounts
		require .isfront
		|| E = .inline.editor
		|| M = .MassSearchField
		|| F = .realfocus
		if F == E
			return M
		if F == M
			return E
			
	
	function UpdateSearchText
		opt norefcounts
		|| other = .UpdateSearchSwap #require 
		|| rf = .RealFocus // what if they just used the same document??
			|| t = rf.text // sigh
			sdlapp.LastSearch = t
			if other.text != t
				other.text = t
				other.Sel = 0


	function HideStuff 
		|| M  = .MouseXY
		|| LB = .ViewButtons.lastrect.y1
		|| LF = .filelist.lastrect.x2-2
		
		|| HideTop  = (m.y < LB)
		|| HideSide = (m.x > LF)
		|| HideTabs = HideTop or .IsTextOnly
		|| VisSide  = !.filelist.decluttering
		|| VisTop   = !.StartScreen.decluttering
		|| VisTabs  = !.ProjectTabs.Decluttering

		// OK... so .. if one is visible, we don't make the other invis
		if .filelist.cmm == .openedmenu
			hideside = false 

		if VisSide and VisTop and (HideSide != HideTop) 
			HideSide = false
			HideTop = false
			HideTabs = false
		
		require !.CurrMouseDown 
		if HideTabs == VisTabs
			.ProjectTabs.declutter = HideTabs
			
		if (hidetop == vistop)
			.StartScreen.declutter = hidetop
			if HideTop
				(.DebugArgsList isnt visible)			// better to declutter
			|| ShowBuilders = !HideTop and (!.istextonly or .path.isSource)
			|| HideBuilders = !ShowBuilders
			.runbutton.declutter		= HideBuilders
			.buildbutton.declutter		= HideBuilders
			.Progress.Declutter			= HideBuilders
		
		if (hideside == visside)
			.filelist.declutter = hideside
			if hideside and .filelist.hasfocus
				.editme.SetFocus
			if .viewing == .viewfiles
				.noneed
				|| fl = .filelist.ListSource as filerow
					fl.SmartName = "file".pluralize(fl.LastFileCount)


	function TestCompilerAlive (|bool|)
		.CheckNotCrashed((&.feedback)|&process|, "feedback")
		return .CheckNotCrashed(.compilr,  "compiler")


	function CheckNotCrashed (|&Process| pp, |string| what, |bool|)
		|| p = pp[]
		if !p or p.status
			return true
		|| fs = faststring()
		fs <~ "Crashed ${p.Status.SignalName} : ${p.render}\n"
		fs <~ p.erroroutput.getresult.FindStacktrace
		.notify(fs, @emb + what)
		.CancelCompile("crashed")
		pp[] = nil


	function string.FindStacktrace (|string|)
		|| f = "\n****** CRASH"
		|| where = .find(f) #require
		where = .find("\n", where) #require
		where += f.length
		|| After = .find("\n-----------------------\n", where)
		if !after: after = int.max
		
		return self[where, after] 
		

	function SaveMemory
		if .IsFront
			|| d = PerryIDE.Effects.Duration
				PerryIDE.Effects.Duration = 0
				.LogOneAction(@emb + ("Image effect time: " + d.RenderDurr))
			return 
		require !.UsingSpdLib
		|| f = .Feedback
		if f.CommsOpen and f.lastsend.ago > (30.0+.position|float|).date
			|| msg = "Released Speedie: " + .name
			.LogOneAction(@emb + msg)
			f.Kill("SaveMemory")
		

	behaviour FrameUpdate // perframe, eachframe, onframe
		.ProjectTabs.TrimWidth
		if !ShouldNotDisturbGUI
			.SaveMemory
			if !.focus
				.setfocus(.editme) // shouldn't need this... why doesn't .focus setter get called?
		.UpdateDebuggedApp(false)
		.TestCompilerAlive
		|| f = .feedback
			.SpeedieMsgReceive(f)
		.UpdateSearchText
		.UpdateStatusErrors
		.ReadLog
		.PopupDisplayFadeIn
		
		|| fc = sdlapp.FrameCount|int|
		require .IsFront
		if fc+1 isa 64
			require !.ProjClosed
			
		if .UpdateMem 
			.ShowLeftStats
				
		if fc isa 32
			.CheckModified
		
		if !ShouldNotDisturbGUI and !.DebugArgsList.HasFocus
			.HideStuff


	function UpdateMemOne (|int| i, |uint| c, |bool|)
		require .LastMemory[i] != c
		.LastMemory[i] = c
		return true
		
		
	function UpdateMem (|bool|)
		require perryide.StatsMode == 3
		rz |= .UpdateMemOne(0, app.ObjMemory)
		rz |= .UpdateMemOne(1, app.stringmemory)
		rz |= .UpdateMemOne(2, app.OtherMemory)


	function CheckModified 
		.EditMe.document.checkmodified?
		

	function ProjClosed (|bool|)
		require .CanAskingAboutMissing
		|| f = .project
		require !f.exists
		.CanAskingAboutMissing = false
		
		if ("Project "+f.name+" can't be found on the file-system anymore.\n\nWould you like to close it?").confirm
			.close
			rz = true
		  elseif .IsSingleFileProject
			f.write("")
				

	function ShowFind (|bool|)
		.retextsubfind
		.ViewAsProject
		.View(.ViewSearch)
		.MassSearchField.SelectAll
		.MassSearchField.SetFocus
		return true

	
	helper CmdKey (|keys| key, |bool|)
		if key is f
			if .masssearchfield.hasfocus
				.PrevView.Click?
				return .editme.OpenSearch
			return .ShowFind
		if key is k
			|| t = .outtext
			if t and !super.keydown(key)
				t.text = ""
			return true
		if key is e
			return .SaveAndShowErrors
		if key is i
			FileViewerCountCode(.filelist, nil, .filelist.LastSelected.cell)
			return true
		if key is comma
			return ClickedPrevNext(.goprev)
		if key is period
			return ClickedPrevNext(.gonext)
		if key is r
			if keys.Shift
				PressingDebug(.runbutton)
			  else
				ClickedDebug(.runButton)
			return true
		if key is o
			if keys.shift
				clickedopenfile(self)
			  else
				clickedopenproj(self)
			return true
		if key is n
			if keys.shift
				clickedCreatefile(self)
			  else
				clickedCreateproj(self)
			return true
		if key is l // l = file list
			if keys.option or keys.Shift
				RightClickNext(.goprev)
				return .goprev.searchmenu
			  else
				return .ShowQuickStuff(true)
		if key is d
			return .ShowQuickStuff(false)
		if key is b
			Clickedcompile(.buildbutton)
			return true
		if  key is s  and  .editme is visible
			.SaveEditing(documentstate.saving)
			return true
		if key is num0
			.ViewAsSwap
			return true
		if key is num9
			.flip(.ProductOut)
			return true
		if key is num8 or j
			if .flip(.JeeboxText)
				.UpdateJeeboxField
			return true
		if key is num7
			.flip(.SpeedieText)
			return true
		if key is num1
			.RunButton.dopressing(nil)
			return true
		if key is p or backslash
			return .idecommand
			

	function Flip (|textview| s, |bool|)
		|| Item = .compiletabs.selected
		if item  and  .ProductSep.isopen  and item.obj == s
			.ProductSep.collapse
			return false
		.ShowText(s, nil, true)
		return true

	function ShowQuickStuff (|bool| FuncMenu, |bool|)
		if FuncMenu
			if (.FunctionMenu.MenuIsOpen)
				FuncMenu = false
		  else
			if (.filelist.QuickOpen is visible)
				FuncMenu = true
		if FuncMenu
			// some double -L bug here
			.FileList.quickopen isnt visible
			if .FunctionMenu.SearchMenu
				return true
			return .FileList.ShowQuickOpen
			
		  else
			|| sub = .FunctionMenu.SubMenu
				sub.CloseMenu
			if .FileList.ShowQuickOpen
				return true
			return .FunctionMenu.SearchMenu
			
	
	behaviour KeyDown
		if keys.cmd and .cmdkey(key)
			return true
		if (key is tab) and .OpenedMenu == .autocomplete
			return .autocomplete.doreturn
		if super.keydown(key)
			return true
		if .openedmenu or key.IsModifier
			return false
		if .focus isnt editable
			.Editme.SetFocus
			return .editme.__KeyDown__(key)

	
	function GotoIncludedFile (|string| path, |bool|)
		|| f = .FileList[path]
			.FileList.Select(f)
			return true
	
	
	function GotoAnyFile (|string| path, |bool| ChangeFocus, |bool|)
		require path.FileExists
		if ChangeFocus
			.Editme.SetFocus
		return .GotoIncludedFile(path) or .FileList.AddExtra(path)
	
		
	function Root (|filerow|)
		opt norefcounts
		return .FileList.start as filerow


	function file.NeedsOwnWindow (|bool|)
		if .IsProj
			return true
		if .isSource
			rz = .parse.Find(@tmp, "main")


	function OpenDoc (GUIPasteEvent)
		require self
		|| p   = data
		|| ext = p.ext
		|| f   = p.file
		if f.isdir
			p = p.pathdir
		if .GotoIncludedFile(p)
			rz = self
		  elseif f.NeedsOwnWindow
			rz = IdeAddProj(p)							// add as project
		  else
			.filelist.addextra(p)						// add root
			rz = self
		startupwindow.hide
		.showide


	Syntax UsingComplete (|object| idk)
		.StillJumping = false
		.AddToJumpHistory

		
	Syntax Using (|PerryIDE|)
		.AddToJumpHistory
		.StillJumping = true
		return self


	module
		|JeeboxEffects|				Effects
		|bool|						DummyTest
		|byte|						StatsMode
		
		Effects.Init()

//		syntax access (|int| i, |perryide|)
//			opt norefcounts
//			for w in window.all
//				if w isa perryide
//					if i <= 0
//						return w
//					i--
		
		
		function New (|string| path, |perryide|)
			rz = PerryIDE(path.file)
			rz.LoadProject
			rz.EditMe.SetFocus
		
		
		function EmptyBase (|perryide|)
			opt norefcounts
			for w in window.all
				if w isa perryide
					if !w.root
						return w
	
	
		function PerryOpenDoc (GUIPasteEvent)
			|| i = .ide
			if i?
				require data.fileexists
			  else
				i = perry.ProjContaining(data)
				i := IdeAddProj(data, nil)
			return i.OpenDoc(after, data, purpose)

		
	function LoadErrors (|bool| jump, |bool| actual_compile) 
		opt norefcounts
		|| txt = .EditMe
		|| doc = txt.document
		|| path = (doc.location, "")(doc)
		|| lst = .errorlist
		txt.clearerrors
		.filelist.ClearErrors

		|error| jumpto 
		|| src = lst.ListSource
		|| ActualErrors = 0
		|| sel = txt.Selectedline
		if src.hasany and src mustbe error
			for err in src
				if err.severity >= ErrorSeverity.Error
					ActualErrors++
				if err.path ~= path
					if txt.LineErrorAdd(err) == sel
						txt.TryShowLineError(sel)
					if jump and (!jumpto or err == lst.FirstSelected)
						jumpto = err
				if actual_compile
					.CommsLogList <~ err.copy
				.filelist.ErrorAt(err)
				
		if jumpto
			txt.ErrorJump(jumpto.position)
		  elseif jump and actual_compile
			if .DuringMsgFB
				.DuringMsgFB = false
				lst.select(src.first)
		(self is broken) = ActualErrors > 0
		.RelistStartupErrors
		.CommsLogList.listsource.keep(144)


	function EditRow (|listviewrow| r, |int|)
		description `
-1 means "its OK, its already loaded"
1 means "its OK, we managed to load it"
So anything not 0 means "its OK"`

		if r isa filerow
			rz = .EditFile(r)


	function CurrFileRow (|FileRow|)
		opt norefcounts
		return .FileList.FirstSelected as filerow
	

	function Path (|string|)
		opt norefcounts
		return .editme.document$.location
	

	function EditPath (|string| s, |bool|)
		if s
			return .editfile(.findpath(s))


	function EditFile (|FileRow| r, |int|) // editfile, loadfile, fileload, fileedit, openfile, fileopen
		require r and r.location and !.DuringLoad
		// the drawing thing needs a document too!
		// why not the same?
		// we could make editfield have an internal draw editor...
		// but at that point we might as well make a general viewer...
		// why not a 3D SDF viewer and audioplayer too.
		// or a fileviewer or a gamepreview player
		// better to have a generalised "fileviewer"
		|| g = (r isa "voi" or "png" or "qoi")
		if .IsGraphics != g
			.IsGraphics = g
			.DuringLoad++
			.ViewAsCurr
			.DuringLoad--
		|| ok = (.EditDraw(r), .EditText(r))(g)
		if ok != 1
			return ok

		.CurrFileName.text = r.name
		.DuringLoad++
		.filelist.select(r)
		
		if !g
			.LoadErrors(true, false)
			if .editme.FindExpectsParse < 2
				.ProductSep.Collapse
		
		.PopupHide
		.AddToJumpHistory
		if  !g  and  .IsEditingSource
			.Recheck
		.DuringLoad--
		
		return 1
			

	function EditDraw (|FileRow| r, |int|)
		if .drawme.LoadFile(r.location)
			return 1
		

	task_run CheckScrollErrors (taskgui)
		|| e = .upon.editme 
		if e.myerror
			e.BumpScroll(60)
	
	
	function EditText (|FileRow| r, |int|) // edittextfile, loadfile, fileload, fileedit, openfile, fileopen
		|| E	= .editme
		|| doc	= r.document
		if e.Document == doc
			return -1
		
		if doc.location.pathiscode
			e.ExpectsParse = TextView.AlwaysJeebox
		  else
			e.ExpectsParse = TextView.AllowJeebox
		|| Loaded = E.LoadDocument(doc) #require
		|| m = .FunctionMenu.SubControl as menu
			m.StopFilter
		|| spd = r.location.PathIsCode
		doc.CompareTreesOnSave = spd
		.ListAllFuncs
		.CheckScrollErrors(0, date.now + 0.25s)		
		|| it = .ProjMsg
			if !.DuringLoad
				it["edit"] = r.location
			it["pos"] = doc.Position

		return 1


	function HandleAltered
		// well it depends on if we modified shared files?
		for i in perry.OpenProj
			i.ModifiedForCompile = true
		.recheck				// could be delayed, too.


	function UpdateActiveFile
		|| d = .editme.Document$
		|| l = d.Location.Resolve(true)$
		if l ~= app.prefpath.resolve
			.updateprefs
		  elseif l ~= .perryfile
			.updateperry
	
	
	function UpdatePerry
		.startuperrors.clear
		.StartFiles
		.LoadStartupErrors
	
	
	function UpdatePrefs
		|| oldPrefs = app._prefs
		app._prefs = nil
		if app.PrefsInit(0)
			.notify("Reloaded Prefs.")
		  else
			.notify("Prefs are corrupted")
			app._prefs = oldPrefs
		¥.LoadFromPrefs


	function ParseErrorDetect
		// not necessarily an error!? what if the file is not spd?
		for e.toplist in .errorlist
			if e isa error
				if e is parse
					e.remove
		
		if .IsEditingSource	
			|| err = .editme.MyError
				ifn err isa error
					log "ParseErrorDetect bug"
				.errorlist <~ err // right?

	
	function LoadStartupErrors
		while (|| err = stderr.pop)
			notifications <~ err
			if err.IsBad
				.StartupErrors <~ err.copy


	function SaveDrawing
		.DrawMe.Save


	function SaveEditing (|int| Purpose) // savetext, savefile, filesave
		opt norefcounts
		if .DrawMe is visible
			return .SaveDrawing
		.ParseErrorDetect
		
		|| e = .editme
		if purpose == documentstate.errorchecking
			require e is modified
		// otherwise resave anyhow.
		
		if (!keys.shift and .projIsSpeedieCode)
			.filelist.saveall(Purpose)
		  elseif e.WasEverAltered
			require e.Save
		  else
			return
		
		.UpdateActiveFile
		with .currfilerow
			.lastsize = e.Length
			if .location.pathiscode
				self.HandleAltered
		(self is modified) = (e is modified)


function string.GetSpeedieProj (|string|)
	rz = self
	while rz and !(rz isa "scproj")
		rz = rz.parent


function perryide.IDECommand (|bool|)
	// this should be a window really!
	|| cmd = "Enter Command".ask $
	if cmd ~= "beep"
		for 2s
			beep
      elseif cmd ~= "cr_fix"
		.editme.beep = .EditMe.seltext.ReplaceAll("\r\n", "\r").ReplaceAll("\r", "\n")
	  elseif cmd ~= "cr_use"
		.editme.beep = .EditMe.seltext.ReplaceAll("\n", "\r\n")
	  else
		beep "unrecognised: " + cmd


function textview.beep (assigns:|string| s)
	expect (.text != s) (beep)
	.SelText = s

