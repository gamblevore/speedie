

|| Speedie		= "/usr/local/bin/speedie".file
|| CppCompiler	= "/usr/bin/g++"
|file| NewStdOut // should just take a file really... shouldn't need to set it to an int


module Perry
    |listviewrow|					Projects
    |string|						_SpeedieDir
    |bool|							Checked	
    |bool| 							Terminal
    |byte| 							FindID
	|dictionary of string|			PathDict
	
	
	constants
		arc_newer	= 2
		arc_older	= 1
	
	function SpeedieDir (|string|)
		opt norefcounts
		if ._SpeedieDir
			return ._SpeedieDir
		._SpeedieDir = .MakeSpeedieDir(true)
		if ._SpeedieDir
			return ._SpeedieDir
		._SpeedieDir = "/usr/local/speedie"
		if !._SpeedieDir.resolve
			"/usr/local/speedie didn't resolve?"
		return ._SpeedieDir
		
		
	function LoadWindowsFromArgs
		for arg in app.args // load specified documents
			|| ide = .LoadAppArg(arg)
			if !.Terminal
				.Terminal = true
				.Projects = Message()
				ide.tabs.items = .projects
				target !debug
					NewStdOut = file.Logs.Child("PerryOut.log")
					pipe.StdOut = NewStdOut.OpenEmpty
					"Perry Log"
	
	
	function LoadAppArg (|string| arg, |perryide|)
		|| line = (0, 0)
		|| path = arg.ExtractPathAndLine(line)
		require path.FileExists or path.write("")
		|| ide = sdlapp.OpenDocument(path)
		if ide isa PerryIDE
			ide.editme.ViewLineAndSel(line.x)
			return ide
		
	
	function Save
		visible
		app.prefs..colors = Â¥.savecolors.parse

		
	function LoadWindowsSub (|PerryIDE| r, |bool|)
		|| Found = false
		for proj_item in .projects
			if proj_item.name.fileExists
				found = true
			  else
				proj_item.Remove
		
		require Found
		for proj_item in .projects
			|| proj = proj_item.name.file
			|| r2 = R ?? PerryIDE(false)
			r2.Loadproject(proj)
			startupwindow.hide
			r = nil
		return true


	function BuildAppMenu
		appmenu.addsep
		|| extra = platform.isdebug or app.prefs["dev"].Yes
			appmenu <~ ("Prepare Upload",   ClickedMakeArchiveMenu)
			appmenu <~ ("Uninstall",   		ClickedUninstallMenu)
			//appmenu <~ ("Birds",			ClickedBirdsMenu)
		appmenu <~ ("Edit Preferences", ClickedEditPrefs)
		appmenu <~ ("Self-Test",   		ClickedTestInstallMenu)
		appmenu <~ ("Install",  		ClickedInstallMenu)


	function Startup (GUIApplicationInit)
		target lin: sdlapp.removeborder // doesnt seem to work in Windows WSL?
		sdlapp.DrawBackgroundMode = 1
		stderr.LogFile = "PerryErrors.txt"
		app.InitColors
		ColorScheme.LoadFromPrefs(DefaultColors)
		.BuildAppMenu
	
		|| old = app.Pref("currproj")
		.Projects = (app.prefs)("lastproj")
		
		|| i = PerryIDE(false)
		i.ViewAsText
		
		.LoadWindowsFromArgs
		if !.Terminal and !.LoadWindowsSub(i)
			startupwindow.show
			return 0
		|| oof = (.FindProj(old),  .Projects.First)(old)
			oof.ide.showide


	function OpenProj (|[PerryIDE]|)
		opt norefcounts
		for w in window.all
			if w isa PerryIDE
				rz <~ w


	function IDE (|PerryIDE|)
		opt norefcounts
		for w in window.all
			if w isa PerryIDE
				return w


	function FindProj (|string| path, |message|)
		return .Projects.find(path)


	function ProjContaining (|string| path, |PerryIDE|)
		opt norefcounts
		for w.reverse in window.all
			if w isa perryide
				if w.FindPath(path)
					return w


	helper string.ProjCleanName (|string|)
		rz = .name
		while rz endswith "()"
			rz = rz[0, rz.length-2]
	
	
	function perryide.SetTab2Name (|message| old)
		opt norefcounts
		.tabs.selected = old

		|| f = old.first
		f.name = f.name.ProjCleanName
		.id = "IDE: " + f.name
		.CompileTabs.items.last.name = f.name + "[]"
		
		
	function AddProj (|string| path, |PerryIDE| i)
		opt norefcounts
		|| old	= .FindProj(path)
		if !old
			old = .projects.msg(@tmp, path)
			old.msg(@str, path.TrimProj)
			old["edit"] = ""
			old["pos"] = ""
		
		i.ProjMsg = old
		i.SetTab2Name(old)
			

extend PerryIDE {
function IsSpeedieCode (|bool|)
	opt norefcounts
	|| r = .filelist.listsource.First as filerow
		return r.location.pathiscode
	

function View (|ButtonView| btn)
	opt norefcounts
	require !.istextonly
	|| g		= btn.tag as guicontrol #require
	
	|| changed	= g isnt visible
	
	|| old = .viewing
	if btn != old
		.PrevView = old
	

	// colors
	for b in .viewbuttons
		|| c = (0.0, 0.0, 0.0, 0.0)
		if b == btn
			c = (0.7, 1.0, 0.2, 0.1)
		b.gnormal.solid = c
	
	// visable
	for g2 in .views
		(g2 is visible) = g == g2
		
	// consistancy
	if (btn == .viewsearch)
		.MassSearchField.setfocus
		.masssearchfield.text = SDLApp.LastSearch
		changed = false
	  elseif (btn == .viewerrors)
		.SwitchedToErrors
	if changed
		g.setfocus
	  elseif btn == .viewfiles
		if !.InConstructor
			.filelist.ShowQuickOpen
	.CheckViewWorthIt(old)


function ShowStdOut (|bool| AlwaysShow=false)
	if AlwaysShow or .EditSep.Collapsed
		.EditSep.Show // needs reflow first?
		.outtext.ScrollToEnd?
	  else
		.EditSep.Collapse


function OutText (|textview|)
	|| row = .CompileTabs.Selected
		|| obj = row.obj as TextView
			return obj


function SwitchedToErrors
	|| e = .errorlist
	if e.listsource.hasany and !e.FirstSelected
		e.selectfirst
	  else
		.editme.ShowParseError


function NoNeed (|string| s = "", |buttonview| old = nil)
	|| n = .noneeder
	n.text = s
	|bool| Vis = s
	(n is visible) = vis 
	if !vis
		n.tag = old


function CheckViewWorthIt (|buttonview| old)
	|| s = ""
	if (.errorlist is visible) and .errorlist.isempty
		s = .CompileOKString
	  elseif (.debugger is visible) and !.attachedProgram
		s = "No program active"
	.noneed(s, old)


function Viewing (|buttonview|) // currview
	opt norefcounts
	for i in .ViewButtons
		if (i.tag as guicontrol) is visible
			return i


function IsViewing (|guicontrol| g, |bool|)
	return (g is visible)


function IsSingleFileProject (|bool|)// IsProj
	if .project
		return !.project.isdir
	
function ViewAsBetter
	require .project
	if .IsSingleFileProject
		.viewasproject
	  else
		.viewascurr


function ViewAsCurr
	.ViewAsVis(!.istextonly)


function ViewAsText
	.ViewAsVis(false)


function ViewAsProject
	.ViewAsVis(True)


function ViewAsSwap
	if .istextonly
		.ViewAsProject
	  else
		.ViewAsText


function Ext (|string|)
	opt norefcounts
	return .editme$.document$.location$.ext


function ViewAsVis (|bool| vis)
	opt norefcounts
	.istextonly = !vis
	|| AnyViews = false
	for v in .ViewButtons
		|| t = v.tag as guicontrol
			(t is visible) = (v.gnormal.bg.hasany)
			AnyViews := t is visible 
	
	if vis and !AnyViews
		.viewfiles.click(nil)

	|| top = !(.noclutter&1) and vis
	.filesep.Collapsed = !vis
	(.gonext is visible)	= vis
	(.goPrev is visible)	= vis
	(.rborder is visible)	= vis
	(.ViewButtons is visible) = vis
	(.filesep.div is visible) = vis
	(.StartScreen is visible) = (.noclutter & 1)==0
	(.filelist is decluttered)  = (.noclutter & 2)!=0
	(.noneeder is visible)  = .noneeder.text and vis
	if !top and !Platform.IsDebug
		(.DebugArgsList isnt visible)
	
	|| StillRuns = top and (vis or (.ext == "spd"))
	|| srchvis   = vis and (.searcharea is visible) 
	(.searcharea is visible)		= srchvis

	(.runbutton is visible)			= StillRuns
	(.buildbutton is visible)		= StillRuns
	(.progress is visible)			= Stillruns and (.buildbutton isnt enabled)
	(.tabs is decluttered)			= !top

	if vis
		.CurrFileName.size = 8 ~ after for 140 by 1~inside
		.FileListersInside(.rborder)
	  else
		.CurrFileName.size = 140~wide by 3~inside
		.FileListersInside(.toolbar)
	
	|| IsPic = .IsGraphics
	(.editme is visible) = !IsPic
	(.drawme is visible) = IsPic
	.reflow
	if !.Focus.IsViewable
		.editme.SetFocus
	


function FileListersInside (|guicontrol| dest)
	dest <~ .currfilename
	dest <~ .functionmenu
}

