

|| Speedie		= "/usr/local/bin/speedie".file
|| CppCompiler	= "/usr/bin/g++"


module Perry
    |ListViewRow|					Projects
	|Dictionary of String|			PathDict
	|listviewrow|					RecentProjects=message()
    |bool|							Checked	
    |byte| 							FindID
	
	constants
		arc_newer	= 2
		arc_older	= 1
	
	
	function LoadWindowsFromArgs (|bool|)
		require app.args > 0
		|| OldProj = .projects
		.Projects = Message()
		for arg in app.args // load specified documents
			|| ide = .LoadAppArg(arg)
				ide.ProjectTabs.items = .projects
				rz = true
	
	
	function LoadAppArg (|string| arg, |perryide|)
		|| line = (0, 0)
		|| path = arg.ExtractPathAndLine(line)
		require path.FileExists or path.write("")
		|| ide = sdlapp.OpenDocument(path)
		if ide isa PerryIDE
			ide.editme.ViewLineAndSel(line.x)
			return ide


	function OpenProj (|[PerryIDE]|)
		opt norefcounts
		for w in window.all
			if w isa PerryIDE
				rz <~ w


	function IDE (|PerryIDE|) // frontide, frontperry, firstperry
		opt norefcounts
		for w in window.all
			if w isa PerryIDE
				return w
	
	
	function Save
		visible
		app.prefmsg("colors") = ¥.savecolors.parse

		
	helper LoadWindowsSub (|bool|)
		|| Found = false
		for proj_item in .projects
			if proj_item.name.fileExists
				found = true
			  else
				proj_item.Remove
		
		require Found
		for proj_item in .projects
			|| proj = proj_item.name.file
			|| r2 = PerryIDE(proj)
			r2.Loadproject
			startupwindow.hide
		
		return true


	function BuildAppMenu
		appmenu.addsep
		|| extra = platform.isdebug or app.pref("dev").Yes
			appmenu <~ ("Prepare Upload",   ClickedMakeArchiveMenu)
			appmenu <~ ("Uninstall",   		ClickedUninstallMenu)
		appmenu <~ ("Edit Preferences", ClickedEditPrefs)
//		appmenu <~ ("Self-Test",   		ClickedTestInstallMenu)
		appmenu <~ ("Install",  		ClickedInstallMenu)


	function LoadRecents
		Perry.RecentProjects = app.PrefList("Recents")
		for s in Perry.RecentProjects
			if !s.name.FileExists
				s.Remove // ooof

	
	function Startup (GUIApplicationInit)
		target lin: sdlapp.removeborder // doesnt seem to work in Windows WSL?
		sdlapp.AppDocumentOpen = &PerryIDE.PerryOpenDoc
		stderr.LogFile = "PerryErrors.txt"
		app.InitColors
		¥.LoadDefaults
		.BuildAppMenu
		.LoadRecents
	
		|| old = app.Pref("currproj")
		.Projects = app.prefmsg("lastproj")
		
		if app.CWD == "/"
			app.args.remove("YES", true)

		if filedes.StdOut.IsTerminal
			app.AllowInteruptCrash = true // fails with 0 params... sigh whatever

		if !.LoadWindowsFromArgs and !.LoadWindowsSub()
			startupwindow.show
			return 0
		|| oof = (.FindProj(old),  .Projects.First)(old)
			|| ide = oof.ide
			ide.showide
			


	function FindProj (|string| path, |message|)
		return .Projects.find(path)


	function ProjContaining (|string| path, |PerryIDE|)
		opt norefcounts
		for w.reverse in window.all
			if w isa perryide
				if w.FindPath(path)
					return w


	helper string.ProjCleanName (|string|)
		rz = .name
		while rz endswith "()"
			rz = rz[0, rz.length-2]
	
			
	function AddProj (|string| path, |PerryIDE| i)
		opt norefcounts
		|| old	= .FindProj(path)
		if !old
			old = .projects.msg(@tmp, path)
			old.msg(@str, path.TrimCodeExt)
			old["edit"] = ""
			old["pos"] = ""
		
		i.ProjMsg = old
		i.SetTab2Name(old)



extend PerryIDE {
function SetTab2Name (|message| old)
	opt norefcounts
	.ProjectTabs.selected = old

	|| f = old[@nil]
		f.name = f.name.ProjCleanName
		.id = "IDE: " + f.name
		|| ii = .CompileTabs.items[@nil, 2]
			ii.name = f.name + "[]"


function ProjIsSpeedieCode (|bool|)
	opt norefcounts
	// why not just use .project?
	|| r = .filelist.listsource.First as filerow
		return r.location.PathIsCode
	

function View (|ButtonView| btn, |bool| CanChangeFocus=true)
	opt norefcounts
	require !.istextonly
	|| g		= btn.tag as guicontrol #require
	
	|| changed	= g isnt visible
	
	|| old = .viewing
	if btn != old
		.PrevView = old
	

	// colors
	for b in .viewbuttons
		|| c = (0.0, 0.0, 0.0, 0.0)
		if b == btn
			c = (0.7, 1.0, 0.2, 0.1)
		b.gnormal.solid = c
	
	// visable
	for g2 in .views
		(g2 is visible) = g == g2
		
	// consistancy
	if (btn == .viewsearch)
		.MassSearchField.setfocus
		.masssearchfield.text = SDLApp.LastSearch
		changed = false
	  elseif (btn == .viewerrors)
		.SwitchedToErrors
	if changed
		if CanChangeFocus
			g.setfocus
	  elseif btn == .viewfiles
		if !.InConstructor
			.filelist.ShowQuickOpen
	.CheckViewWorthIt(old)


function ShowCompileCutely (|bool| Always=false)
	require .ProductSep.iscollapsed
	if !always
		if .AlreadyExpandedCompileTab
			return
		.AlreadyExpandedCompileTab = true
	.ProductSep.Show

	
function ShowCompileTab (|object| tab) // showtab
	.ShowCompileCutely           // OOOP. 
	.CompileTabSelect(tab)


function OutText (|textview|)
	|| row = .CompileTabs.Selected
		return row.obj as TextView


function SwitchedToErrors
	|| e = .ErrorList
	if e.listsource.hasany and !e.FirstSelected
		e.selectfirst
	  else
		.editme.ShowNextParseError


function NoNeed (|string| s = "", |buttonview| old = nil)
	|| n = .noneeder
	n.text = s
	|bool| Vis = s
	(n is visible) = vis 
	if !vis
		n.tag = old


function CheckViewWorthIt (|buttonview| old)
	|| s = ""
	if (.errorlist is visible) and .errorlist.isempty
		s = .CompileOKString
	  elseif (.debugger is visible) and !.attachedProgram
		s = "No program active"
	.noneed(s, old)


function Viewing (|buttonview|) // currview
	opt norefcounts
	for i in .ViewButtons
		if (i.tag as guicontrol) is visible
			return i


function IsViewing (|guicontrol| g, |bool|)
	return (g is visible)


function IsSingleFileProject (|bool|)// IsProj
	return !.project.isdir


function ViewAsBetter
	if .IsSingleFileProject
		.ViewAsProject
	  else
		.viewascurr


function ViewAsCurr
	.ViewAsVis(!.istextonly)


function ViewAsText
	.ViewAsVis(false)


function ViewAsProject
	.ViewAsVis(True)


function ViewAsSwap
	if .istextonly
		.ViewAsProject
	  else
		.ViewAsText


function ViewAsVis (|bool| AsProject)
	opt norefcounts
	.istextonly = !AsProject
	|| AnyViews = false
	for v in .ViewButtons
		|| t = v.tag as guicontrol
			(t is visible) = (v.gnormal.bg.hasany)
			AnyViews := t is visible 
	
	if AsProject and !AnyViews
		.viewfiles.click(nil)

	.filesep.isCollapsed = !AsProject
	(.gonext is visible)	= AsProject
	(.goPrev is visible)	= AsProject
	(.rborder is visible)	= AsProject
	(.ViewButtons is visible) = AsProject
	(.filesep.div is visible) = AsProject
		
	(.noneeder is visible)  = .noneeder.text and AsProject and (.FileList isnt visible)
	(.searcharea is visible)		= AsProject and (.searcharea is visible) 

	if AsProject
		.CurrFileName.size = 8 ~ after for 140 by 1~inside
		.FileListersInside(.rborder)
	  else
		.CurrFileName.size = 140~wide by 3~inside
		.FileListersInside(.toolbar)
	
	|| IsPic = .IsGraphics
	(.editme is visible) = !IsPic
	(.drawme is visible) = IsPic
	.reflow
	if !.Focus.IsViewable
		.editme.SetFocus
	


function FileListersInside (|guicontrol| dest)
	dest <~ .currfilename
	dest <~ .functionmenu
}

