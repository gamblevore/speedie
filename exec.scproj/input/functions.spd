

class function
	|int|				Index
	|int|				Length
	|string|			Name
	|Message?|			Src
	|?&ASMblob|			SpeedieFunc
	|?&nil|				CFunc
	

	constructor (|message| spd)
		opt norefcounts
		.name = spd.name
		.speediefunc = nil
		|| ASM = spd.first
		if asm.IsString
			.LoadCode(asm)
		  else
			asm.Expect(@bin)

	
	constructor (|?&nil| fn, |string| name)
		.name = name
		.CFunc = fn
	
		
	function LoadCode (|message| ASM)
		opt norefcounts
		|| s    = asm.name
		|| blob = s.addr|&ASMBlob|
		|| n    = (s.length/4) - 2
		// we actually aren't allowed to write to string addresses!!
		// right? I mean... internal ones anyhow?
		.length = n
		check (n > 0) ("Missing asm for: " + .name)
		check (!blob.guard and !blob.callcount) ("Corrupted asm for: " + .name)
		blob.guard = bear|int| // bobobear
		blob.callcount = 0
		.speediefunc = blob
	
	
	function Run (|&ivec4|)
		jb_vm.vm.Registers 
		return jb_vm.Run(.speediefunc!.ASM[0], .length)
	
	
	function LinkCpp
	
		
	function LinkSpd
		// app-funcs are already linked
		// lib-funcs no...
		// I guess we can do it like func-num + SmallOffset?
		// We might want a small offset, say 256 instructions inside.
		// small offsets can't work with cpp lol.

	render:					fs <~ .name

	constants
		|int| 
		bear = 0xB0B0BA14

	module
		syntax access (|message| s, |function|)
			if s == @num
				return .int(s)
			return Linker[s]
		
		function int (|message| s, |function|)
			opt norefcounts
			|| i = s.int
			|| i2 = i >> 1
			if i & 1
				|| fn = AppTable[i2]
					return fn
			  else
				|| fn = Lib[i2]
					return fn
			s.CantFindFunc

	
	
	
module Linker
	|dictionary of function|	AllFuncs = dictionary()		// this is for the entire app...  inbuilt,  and pack combined

	syntax append (|function| fn)
		AllFuncs.ValueLower(fn.name) = fn
		
	syntax access (|message| s, |function|)
		opt norefcounts
		|| fn = .AllFuncs.ValueLower(s.name)
			return fn
		s.cantfindfunc




module Lib	
	|[function]|				Funcs
	|dictionary of &nil|		Globals = dictionary()
	|int|						GlobalCount

	function AddLibFunc (|function| fn, |bool|)
		expect (.Funcs < 16K) ("Too many functions")			// for detecting corrupt lib
		fn.index = .Funcs.length
		.Funcs <~ fn
		linker <~ fn
		return true
	
	function AddLibGlob (|?&nil| where, |string| name, |bool|)
		opt norefcounts
		expect (.GlobalCount++ < 1K) ("Too many globals")		// for detecting corrupt lib
		// wait we can't store ptrs in a dict? was this a wrapper obj?
//		.Globals.valuelower(name) = where!
		return true
	
	
	syntax access (|int| i, |function|)
		return .Funcs[i]


	function LoadLib (|bool|)
		|&&nil| Funcs 
		|| spd = package.LibFuncLayout(funcs).parse
		|| globs = .LoadLibFuncs(spd, funcs!)
			.LoadLibGlobs(spd, globs)
		if stderr.ok
			return class.LoadInbuiltClasses

	
	function LoadLibFuncs (|message| spd, |&&nil| Internals, |&&nil|)
		opt norefcounts
		for ch in spd[@prm]
			|| fn = Internals++[]  #expect  (ch, "Missing lib function")
				
			require .AddLibFunc( function(fn, ch.name) )
					
		check (!Internals[]) ("Extra InternalFunction")
		return internals+1


	function LoadLibGlobs (|message| spd, |&&nil| Internals)
		opt norefcounts
		for ch in spd[@arr, 1]
			|| G = Internals++[]  #expect  (ch, "Missing lib global")
				
			require .AddLibGlob( G, ch.name )

		check (!Internals[]) ("Extra global") 
		


module AppTable 
	|int|			FnLim = 64K // allow configure? its more about corrupted files,
								// Not "we can't handle more"!
	|[function]|	Funcs
	|[function]|	LinkOrder 

	syntax append (|function| fn, |bool|)
		if (.Funcs < FnLim)
			fn.index = .Funcs.length
			.Funcs <~ fn
			return true
		error (package.funcs, "Too many functions")
	
	
	syntax access (|int| i, |function|)
		return .Funcs[i]
	

	function LinkEmUpâ€¼ (|bool|)
		opt norefcounts
		Description "Checks that stdlib has all needed functions... and gets a reference to them."
		
		for name in package.linkage
			|| fn = Linker[name]
				AppTable.LinkOrder <~ fn
		return stderr.ok


	function RunMain (|int|)
		opt norefcounts
		|| main = .funcs[1]					#expect ("Missing main")
		rz  = .funcs[0]!.Run|&int64|[]
		rz ?= main.Run|&int64|[]


function message.CantFindFunc
	error (self, "Can't find function: " + .name)


//////////          //////////            //////////
//////////          //////////            //////////
