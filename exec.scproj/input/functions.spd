
class function
	|int|				Index
	|int|				Length
	|string|			Name
	|Message?|			Src
	|?&ASMblob|			SpeedieFunc
	|?&nil|				CFunc

	constructor (|string| name)
		cpp_Part Basic
		.name  = name
	
	constructor (|?&nil| cpp, |message| spd)
		.name = spd.name
		|| ASM = spd[0]
		.speediefunc = nil
		if asm == @sstr or @bin       // noice
			|| s    = asm.name
			|| blob = s.addr|&ASMBlob|
			|| n    = (s.length/4) - 2
			// we actually aren't allowed to write to string addresses!!
			// right? I mean... internal ones anyhow?
			.length = n
			check (n > 0) ("Missing asm for: " + .name)
			check (!blob.guard and !blob.callcount) ("Corrupted asm for: " + .name)
			blob.guard = bear // bobobear
			blob.callcount = 0
			.speediefunc = blob
	
	
	function Run (|int64|)
		jb_vm.vm.ClearRegisters 
		return jb_vm.Run(.speediefunc!.ASM[0], .length)
	
	
	function LinkCpp
	
		
	function LinkSpd
		// app-funcs are already linked
		// lib-funcs no...
		// I guess we can do it like func-num + SmallOffset?
		// We might want a small offset, say 256 instructions inside.
		// small offsets can't work with cpp lol.

	
	syntax call (|int|):	return .run
	render:					fs <~ .name

	constants
		bear = 0xB0B0BA14

	module
		function LoadApp (|bool|)
			opt norefcounts
			for spd in package.funcs 
				|| fn = function(nil, spd)
				(apptable <~ fn) #loop
				fn.LinkCpp
				fn.LinkSpd

			check (apptable.table >= 1) ("Missing 'init'")
			check (apptable.table >= 2) ("Missing 'main'")
			return stderr.ok
			
		
		syntax access (|int| i, |function|)
			if i > 0
				return apptable[i]
			return internaltable[1-i]

	
	
	
	
	
//////////          //////////            //////////
// our super table thingy				  //////////
//////////          //////////            //////////

module InternalTable
	|[function]|				Table
	|dictionary of function|	Names
	|string|					Failed

	syntax append (|function| fn, |bool|)
		ifn (.table < 16K)
			error ("Too many functions")
			return false
		fn.index = .table.length
		.table <~ fn
		return true
		
	syntax access (|int| i, |function|)
		return .table[i]

	function Build (|bool|)
		|&&nil| Internals 
		|| spd = package.LibFuncLayout(&Internals).parse
		rz = .Buildsub(spd.first, internals)
	
	function BuildSub (|message| spd, |&&nil| Internals, |bool|)
		opt norefcounts
		while spd
			|| fn = *Internals++
			if !fn
				error (spd, "Missing cpp function")
				exit
				
			InternalTable <~ function(fn, spd)
			spd++
					
		return (!*Internals) #check "Extra InternalFunction" 
		

	function ReGather (|bool|)
		Description "Checks that stdlib has all needed functions... and gets a reference to them."
		
		|| list = StringFields(package.linkage.name, '\n')
		.LoadNameTableSub(list)
		expect !.Failed ("Lib lacks needed function: " + .failed)
		return stderr.ok 


	function LoadNameTableSub (|StringFields| flist)
		opt norefcounts
		for l in flist
			.Failed = l
			if l
				AppTable.linkorder <~ internaltable.names[l]$
		.Failed = ""



module AppTable
	|[function]|	Table
	|[function]|	LinkOrder 

	syntax append (|function| fn, |bool|)
		if (.table < 4M)
			fn.index = .table.length
			.table <~ fn
			return true
		error (package.funcs, "Too many functions")
	
	syntax access (|int| i, |function|)
		return .table[i]

//////////          //////////            //////////
//////////          //////////            //////////
