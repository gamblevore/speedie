


class Type (Class)  
	|datatypecode|			DataType
	|BaseType|				BaseType


class Class 
	linkage
		cpp_class ClsInfo
	|string|				Name
	|?Message|				Src
	|?class|				Super
	|&classdata|			RealClass
	
	
	constructor (|!&classdata| Cls)
		.realclass = cls
		.name = string.Wrap(cls.name)
		addclass(self)
	
	constructor (|message!| Cls, |class!| Parent)
		opt norefcounts
		.name = cls.name
		.src = cls
		.super = parent
		|| cstr = .name.cstr.cstring
		|| f = cls.first
		|| b = f.next.slowcount
		.realclass = classdata.new(cstr, f.int, parent.realclass, b max 2)
		addclass(self)

	function Size (|int|)
		return .realclass.size
		
	function LoadSuper 
		opt norefcounts
		|| P = .realclass.Parent
			|| str = P.name.str
			|| cls = table.valuelower(str)
				.super = cls
				return
		.super = Obj
		
	syntax equals (|string| s, |bool| aware, |bool|)
		return .name ~= s
	
	render
		|| sup = .super.name?
		fs <~ "Class: $.name ($.size, $sup)"


	function ClassData.Behaviour (assigns:|int| i, |function| fn)
		//.behaviour

	helper ClassData.Behaviour (|int| i, assigns:|&nil| Beh)
		cpp_wrapper JB_SetBehaviour	
	

	function LoadBehaviours
		|| b = .src.second
		|| i = 0
		for fn in b
			.realclass.Behaviour(i++) = function[fn.int]
		
				
	module
		function Behave (|bool|)
			opt norefcounts
			for c in .list
				c.Loadbehaviours
			return true

		function AddClass (|class| c)
			.list <~ c
			.table.valuelower(c.name) = c
		
	
		function LoadAppClasses (|bool|)
			opt norefcounts
			for s in package.ProjClasses
				|| SuperCls = s.next.Supper
					class.JbinClasses(s[@arg], SuperCls)
			return stderr.ok


		function LoadInbuiltClasses (|bool|)
			opt norefcounts
			object.TotalSanity(true)
			for cd in ClassData.first
				|| c = class.new(cd)
				if c.name ~= "Object"
					.obj = c
//			debugger
			|| o = .Obj
				for c in .list
					c.LoadSuper
//			|| all_cls = package.LibClassLayout.parse 
//			class.JbinClasses(all_cls, o)
			object.TotalSanity(true)
			return stderr.ok
		
		
		function dictionary.syntaxaccess (|&classdata| c, ||)
			|| n = c.name
				|| s = n.str
				rz = self.valuelower(s)
			
		function JbinClasses (|message| all, |!class| parent)
			opt norefcounts
			require all.expect(@arg)
			for msg in all
				|| c = class.new(msg, parent)
				|| arg = msg.last
				if arg == @arg
					.JbinClasses(arg, c)

	
		|class|					Obj
		|[class]|				List
		|dictionary of class|	Table = dictionary.new




datatype BaseType (int)
	constants (
		|BaseType|
		Module = 0 // not actually a type
		Nil
		Object
		Struct
		DataType
		FuncProto
	)
	syntax is (|BaseType| d, |bool|)
		return self == d

