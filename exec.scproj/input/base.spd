
 
module package
	linkage: cpp_part pack
	|memory|		globals
	|config|		funcs
	|config|		linkage
	|config|		ProjClasses
	|config|		strings
	
	
	function LibFuncLayout (|&&&nil| funcs, |string|)
		cpp_wrapper JB_App__LibFuncs
	
	function LibClassLayout (|string|)
		cpp_wrapper JB_App__LibClasses
	
	function LibClasses (|message|)
		opt norefcounts
		return .LibClassLayout().parse
	
	
	function LoadAppClasses (|message| list)
		for s in list
			|| cls = class.Table[s.name]
				class.grab(s[@arg], cls)
			  else
				error (s, "Linked to missing class: " + s.name)


	function LoadPack (|bool|)
		opt norefcounts
		.GetStructure
		require StdErr.ok
		class.Grab(.libClasses, nil)
		.LoadAppClasses(.ProjClasses)
		return stderr.ok
	
	
	function GetStructure (|int|)
		opt norefcounts
		|| pk			= .InputPack
		|| app_			= pk..app			#check "Missing 'app'"

		debugger.root	= pk..debug
		debugger.meta	= pk..meta
		
		.strings		= app_..strs ?? Message()
		.projclasses	= app_..clss ?? message()
		.funcs			= app_..fncs		#check "Missing 'fncs'"
		.linkage		= app_..link		#check "Missing 'link'"

		|| g = app_.int						#check "No globals requested."
		(g <= 256MB)						#check "Over 256MB of globals requested."
		.glob(g)
		

	function InputPack (|messageroot|)
		opt norefcounts
		|| x = app.args[0]
		x := "~/Speedie/exec.scproj/demo.xpd"
		|| fl = x.FileThatExists("load executable")
			return fl.parse[@tmp, "pack"]

