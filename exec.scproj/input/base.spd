
 
module package
	linkage: cpp_part Pack
	|memory|		globals
	|config|		funcs
	|config|		linkage
	|config|		ProjClasses
	|config|		strings
	
	
	function LibFuncLayout (|&&&nil| funcs, |string|)
		cpp_wrapper JB_App__LibFuncs


	function LibClassLayout (|string|)
		cpp_wrapper JB_App__LibClasses
	
	
	function LoadAppClasses (|message| list)
		opt norefcounts
		for s in list
			|| SuperCls = s.next.Supper
				class.GrabClasses(s[@arg], SuperCls)
	

	function message.Supper (|class|)
		opt norefcounts
		if !self
			return class.object
			
		return (class.Table[.name])  #expect (self, "Linked to missing class")


	function LoadPack (|bool|)
		opt norefcounts
		if .GetStructure
			|| all_cls = .LibClassLayout.parse 
			class.GrabClasses(all_cls)
			.LoadAppClasses(.ProjClasses)
			return stderr.ok
	
	
	function GetStructure (|bool|)
		opt norefcounts
		|| pk			= .InputPack
		|| app_			= pk..app			#check "Missing 'app'"

		debugger.root	= pk..debug
		debugger.meta	= pk..meta
		
		.strings		= app_..strs ?? Message()
		.projclasses	= app_..clss ?? message()
		.funcs			= app_..fncs		#check "Missing 'fncs'"
		.linkage		= app_..link		#check "Missing 'link'"

		|| g = app_.int						#check "No globals requested."
		(g <= 256MB)						#check "Over 256MB of globals requested."
		.glob(g)
		return stderr.ok
		

	function InputPack (|messageroot|)
		opt norefcounts
		|| x = app.args[0]
		x := "~/Speedie/exec.scproj/demo.xpd"
		|| fl = x.FileThatExists("load executable")
			return fl.parse[@tmp, "pack"]
