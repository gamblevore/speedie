

class DrawToolBar (Guicontrol)
	// selection/airbrush/stamps/eraser



// should have pure display mode... and edit mode.
// can load qoi files or our own editor format


class GraphicsEditor (GuiControl)
	|[image]|				Layers
	|image| 				Merged
	|file| 					Backing
	|int| 					BG
	
	function Load (|bool|)
		require .Backing
		|| d = .backing.Read(64MB)
		if d.IsJbin
			rz = .LoadNative(d)
		  else
			rz = .LoadImage(d)
		.Merged = nil
		.Merged = image(.size)
	
	function Size (|ivec2|)
		opt norefcounts
		return .Layers[0]$.size
			
	behaviour Draw
		where.drawrect(self, .gnormal, 1.0)
		
		.merged.Drawcentered(where)
	
	helper LoadNative (|string| f, |bool|)
		return false
		|| root = f.parse_jbin
		|| imgs = root["jdraw"]["layers"]
		for l in imgs
			if l.Expect(@tmp)
				|| p = .Loadmsg(l)
					.layers <~ p
		|| size = .Size
		for p in .Layers
			expect (p.Size == size) ("Layers have different sizes.")
		return true
	
		
	function LoadMsg (|Message| l, |image|)
		disabled
		|| w = l[@num, 0].int
		|| h = l[@num, 1].int
		|| d = l[2].nyme.decompress
		require (w > 0) and (h > 0) and d
		|| img = image((w,h), l.name)
			img.Copy(d)
			return img
	
	function Save
/*jdraw 1
	layers
		oof (#data#)*/
		|jbin| j = .backing.out
		j <~ _JbinHeader
		j.enter @arg
		j.enter(@tmp, "jdraw")
		j.addint 1
		j.enter @arg
		j.enter(@tmp, "layers")
		j.enter @arg
		for l in .Layers
			j.addimage(l, l.name)
		j.up 5
		j.Flush
	
	function image.RawData (|string|)
		return string.FromPtr(.ptr, .ByteCapacity)
			
	function jbin.AddImage	(|image| img, |string| name)
		.enter(@tmp, name)
		.addint(img.Width)
		.addint(img.height)
		.add(@bin, img.rawdata.compress)
		.up
	
	
	function DoMerge (|bool| bg=true)
		if bg
			.DoBG
		for p in .layers
			p.DrawTo(.Merged) // cell-system would be better than doing all this work
							  // everytime a single pixel is altered! Of course... we'd need cells...
							  // just get it working for now!
		
	function DoBG (|int| size=3)
		if .bg == 0 // checkerboard
			.Merged.Clear
			return 
			
		|| g = colors.gray
		|| w = colors.white
		for (p in .Merged) (v)
			|| col = (v<<size).sum isa 2
			*p = (g,w)(col)
	
	
	function Export (|file| dest)
		.Domerge(false)
		dest <~ .Merged.WriteQOI
		
		
	helper LoadFile (|string| path, |bool|)
		|| data = path.ReadFile			#require
		if path isa "png"
			data = image.ConvertPNGToVOI(data) #require
		.loadimage(data)


	helper LoadImage (|string| data, |bool|)
		|| p = data.Loadqoi
			.Merged = p
			return true

