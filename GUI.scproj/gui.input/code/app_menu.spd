

// should really just be a module... no need to have a whole class for this
class AppMenu (Window)
	linkage:	cpp_Part AM
	|ListView|					Choices

    constructor
		super.constructor
		.id					= "appmenu"
		.ClickOutsideCloses = true
		.Choices			= ListView(self,	nil,	AppMenuReturnkey)
		.gnormal.edge = (0.5, 0.0, 1.0, 0.5)
		.init


	function Init
		is visible
		isnt drawsfocus
		.id = "AppMenu"
		.setfocus
		|| first = "About " + app.filename
		|| it = .choices
		it <~ (first,						AppMenuAbout)
		it.addsep
		it <~ ("Help",						AppMenuHelp)
		it <~ ("Quit",						AppMenuQuit)
		it.StyleAsMenu


	behaviour KeyDown
		if key is escape
			.cancelreturn
			.Choices.selectnone
			return true
		return super.keydown(key)


	function ShowAsDialog
		|| n	= .Choices.listsource.slowcount
		|| mh	= n * .Choices.rowheight + 4
		.size	= 160~wide by (mh)~high
		.Choices.size = the~area
		.Choices.selectfirst
		
		|| p = (self)()
		if p isa menuitem
			.Choices.selectnone
			(p.MenuEvent)(nil, p, nil)?


	module
		|AppMenu|	Menu
		function SyntaxAppend (|string| name, |guimenuevent| ev)
			.menu.Choices.listsource.second.next = menuitem(name, ev)

		function AddSep
			self <~ ("", nil)

		function InitAppMenu
			if !.menu
				.menu = appmenu()
				.menu.hide

		function Show (|int|)
			.InitAppMenu
			.menu.choices.setfocus
			.menu.ShowAsDialog
			return SDLActivity.activity


function AppMenuHelp (GuiMenuEvent)
	|| it = app.conf("HelpURL")
		app.showurl(it)
	  elseif self.mustbe(listview)
		menu.removequietly(self)
		beep "No help available."


function AppMenuQuit (GuiMenuEvent)
	sdlapp.WantsQuit = true


function AppMenuAbout (GuiMenuEvent)
	|| fs = faststring()
	|| v = app.conf("version")
	|| c = app.conf("creator")
	fs <~ "${app.filename} (${app.TimeID|int64|}) v$v, by $c."
	beep fs


function AppMenuReturnkey (GuiListEvent)
	(.window as appmenu).ReturnValue = .FirstSelected
	return true

