

// should really just be a module... no need to have a whole class for this
class AppMenu (Window)
	linkage:	cpp_Part AM
	|ListView|					Choices

    constructor
		super.constructor
		.id					= "appmenu"
		.ClickOutsideCloses = true
		.Choices			= ListView(self,	nil,	AppMenuReturnkey)
		.gnormal.edge = (0.5, 0.0, 1.0, 0.5)
		.init


	function init
		is visible
		isnt drawsfocus
		.id = "AppMenu"
		.setfocus
		|| first = "About " + app.filename
		if app.Unregistered
			first = first + " / Register"
		|| it = .choices
		it <~ (first,						AppMenuAbout)
		it.addsep
		it <~ ("Help",						AppMenuHelp)
		it <~ ("Quit",						AppMenuQuit)
		it.StyleAsMenu


	behaviour keydown
		if key is escape
			.cancelreturn
			.Choices.selectnone
			return true
		return super.keydown(key)


	function ShowAsDialog
		|| n	= .Choices.listsource.slowcount
		|| mh	= n * .Choices.rowheight + 4
		.size	= 160~wide by (mh)~high
		.Choices.size = the~area
		.Choices.selectfirst
		
		|| p = (self)()
		if p isa menuitem
			.Choices.selectnone
			(p.MenuEvent)(nil, p, nil)?


	module
		|AppMenu|	Menu
		function SyntaxAppend (|string| name, |guimenuevent| ev)
			.menu.Choices.listsource.second.next = menuitem(name, ev)

		function AddSep
			self <~ ("", nil)

		function InitAppMenu
			if !.menu
				.menu = appmenu()
				.menu.hide

		function Show (|int|)
			.InitAppMenu
			.menu.choices.setfocus
			.menu.ShowAsDialog
			return sdlapp.kactivity


function AppMenuHelp (GuiMenuEvent)
	|| it = app.conf("HelpURL")
		app.showurl(it)
	  elseif self.mustbe(listview)
		menu.removequietly(self)
		beep "No help available."


function AppMenuAbout (GuiMenuEvent)
	registration.show


function registration.show
	|| fs = faststring()
	|| v = app.conf("version")
	|| c = app.conf("creator")
	fs <~ "${app.filename} (${app.TimeID|int64|}) v$v, by $c."

	if registration..salt
		fs <~ "\n\n"
		if registration.testfailed
			fs <~ "Please register! Supporting ${app.conf(`name`)} helps me create better programs for you.\n\nYour support is greatly appreciated! Join our wonderful supporters!"
			|| options = [registration..Type, "Enter Code", "Cancel"]
			|| sigh = ConfirmIt(fs,  "",  Options) 
			if sigh == 1
				app.showurl(registration..buyurl)
			if sigh == 0 or 1
				registration.ask
			return
		fs <~ "Registered to: ${registration.name}"
		if !5.rand
			fs <~ " (a wonderful person!)"
	ConfirmIt(fs,  "",  ["Thanks"])


function AppMenuQuit (GuiMenuEvent)
	sdlapp.WantsQuit = true


function AppMenuReturnkey (GuiListEvent)
	.window|appmenu|.ReturnValue = .sel
	return true


module Registration
	cpp_part Reg
	|message|	RegConf

	function Code (|string|)
		return app.pref("serial_code")

	function app.NeedReg (|string| s, |bool|)
		if !app.unregistered or registration.ask( s )
			return true

	function CarriedInfo (|string|)
		return .code.split('-').last

	function Code (assigns:|string|)
		app.pref("serial_code") = value

	syntax access (|string| name, |string|)
		return .RegConf[name].value

	function UnRegister
		app.Unregistered = true
		.code = ""
		sdlapp.saveprefs

	function app.RegStartup
		|| r = app._conf..registration
		registration.RegConf = r
		app.unregistered = r
		app.PrefsInit(0)
		registration.TestFailed
	
	function Name (|string|)
		|| parts = .code.Components
		return parts[0].trim
			
	function TestFailed (|string| code=registration.code, |string|)
		code = code.trim(jeebox.cswordmiddle.invert)
		|| parts = code.Components
		|| name = parts[0].trim
		|| serial = parts[1].trim
		ifn name and serial
			return "Please enter the code as it was provided. It should look like:\n\n 'User Name / ${registration..prefix}-1234-5678-9012'" 
		
		// abc/per1-asdasda-das-da-sdss-1123
		|| serial_parts = serial.split('-')
		|| carried_info = serial_parts.pop
		serial = join2(serial_parts,"-")
		|| fs = faststring()
		|| hex = (carried_info + name).hash >> 16
		fs.appendhex(hex, 6)
		|| ser_parter = fs.getresult.split(4)
		|| ser_parts = ser_parter.list
		|| gen_serial = join2(ser_parts, "-")
		if gen_serial != serial
			ser_parts <~ carried_info
			printline name + "/" + join2(ser_parts, "-")
			app.sleep(1.5s) // lol
			return "Serial '$code' is incorrect"
		app.Unregistered = false
		.code = code

	function Ask (|string| reason="", |bool|)
		if reason and !reason.EndsWith("\n\n")
			reason = reason + "\n\n"
		|| err = ""
		while
			|| Code = ("Please enter your registration code\n\n" + reason + err).ask$
			err = .TestFailed(code)
			if !err
				sdlapp.saveprefs
				beep "Serial accepted!"
				return true


