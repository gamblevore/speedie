

	
// openfile,  filedialog,  folderdialog,  askfile,  openfolder

function app.AskOpen (|string| types, |string| base="", |string|question="", |string|accept="Open", |string|)
	require sdlapp.StartedProperly
	return OpenSaveRequest(types, base, accept, false, question)


function app.AskSave (|string| SingleType, |string| base="", |string|question="", |string|accept="Save", |string|)
	require sdlapp.StartedProperly
	if SingleType contains ','
		error "Can't save with multiple extensions"
		return nil
	return OpenSaveRequest(SingleType, base, accept, true, question)
	

function OpenSaveRequest (|string| types,  |string| base,  |string| Accept,  |bool| Save,  |string| question, |string|)
	|| w = OpenSaveDialog.asker init OpenSaveDialog()
	
	with w
		.types				= types
		.accept.text		= accept
		.path.text			= base
		(.name is visible)	= save
		.question.vistext = question
	|| bigger = question and save
	|| wsize = (350 by 216,  350 by 200)(bigger)
	w.size = wsize
	|| bot = (39~up, 23~up)(bigger)
	w.files.size = 1~inside by bot to 16~down
	
	if save
		|| t = "Untitled.txt" 
		|| ext = types.name
			t = "untitled." + ext
		w.name.text = t
			
	|| last = OpenSaveDialog.LastDir[types].value
		base = last.parent
	base := "~/".resolve
	|| f = w.files
	f.ListFilesUp(base, types, save)
	f.SelectFirst
	if last
		f.select(OpenSaveDialog.FindFileName(f, last.name))
	
	if save
		if w.name.text contains '.'
			w.name.sel = (0, 8) // only works on the secon time we run this func? annoying.
		w.name.setfocus
	  else
		f.setfocus
	
	rz = (w)()|string|
	if rz
		OpenSaveDialog.LastDir[types] = rz
		sdlapp.Saveprefs // nicer



class OpenSaveDialog (Window)
	linkage
		cpp_part Open
    |textview|			Path
    |textview|			Name
    |textview|			Question
    |ListView|			Files
    |Buttonview|		Cancel
    |Buttonview|		Accept
    |Buttonview|		Reveal
    |string|			Types
    |string|			LastGoodPath
    |string|			Keyboard
    |date|				KeyDownExpired

    constructor
		super.constructor
		.copypaste	   |= copypasteflags.pastefile
		.onpaste		= DragPathEvent|GUIPasteEvent|
		.Accept			= buttonview(self, OnAskSaveAnswer)
		.Cancel			= buttonview(self, OnAskSaveAnswer)
		.Path			= textview(self, nil)
		.files			= ListView(self, nil, OnAskSaveEntered)
		.question		= textview(self)
		.Name			= textview(self, OnAskSaveName)
		.Reveal			= buttonview(self, OnAskSaveReveal)
		.size			= 350 by 200
		.id				= "opensave"
		isnt visible
		.AddButton(.accept,  "", true)
		.AddButton(.Cancel,	"Cancel", false)
		.init
	
	
	function InitField (|textview| f, |string| id)
		with f
			isnt AlwaysScrollable
			is   enabled
			is   editable
			is   NeverDrawModified
			isnt DrawsFocus
			.singleline = true
			.id			= id
			.takesfocus	= takesfocusflag.canfocus
			.gnormal.solid= ((0.0, 0.0, 0.0, 0.1))
	
	
	function DragPathEvent (GUIPasteEvent)
		.path.text = data
		relistkey(.path, nil)
		return true

	
	function init
		.path.id = "opensave"
		.path.onkeydown = relistkey
		.path.OnTextChanged= relistkey
		
		.InitField(.path, "path")
		.InitField(.name, "name")
		.InitField(.question, "question")
		(.Question isnt enabled)
		.path.size =  1~right to 20~left  by  1 ~ down back 15
		.name.size =  1~right to 92~left  by  4~up for 15
		.question.size =  1~right to 102~left  by  2~under back 15
		with .reveal
			.size 		= the~right-2 back 19  by  the~top back 14
			.text		= "\10"
			.gnormal.clear 
		
		with .files
			isnt DrawsFocus
			.OneAlwaysSelected = true
			.id			= "files"
			.size 		= 1~inside by 23~up to 16~down
			.gnormal.solid = ((0.0,0.0,0.0,0.1))
			.growsel = ¥.Menurowsel
		
		.gnormal = ¥.systemstyle

		
	behaviour keydown
		opt NoRefCounts
		if (key is up or down) and !.Name.hasfocus
			return .files.keydown(key)
		  elseif key.iscancel
			.cancelReturn
			return true
		  elseif key.IsAccept
			if .focus == .path or nil
				.files.setfocus
				return true
			if (.focus == .Files)
				if .name isnt visible
					.Accept.Click
				  elseif keys.cmd or keys.shift or keys.cmd
					return false// 
				  else
					.name.setfocus
					.name.selectall
				return true
		
		if !keys.cmd and !key.isscan and key|codepoint|.isalphanum
			.JumpToKey(key|codepoint|)
			return true
		return super.keydown(key)
 

	function JumpToKey (|codepoint| cp)
		if .KeyDownExpired.Fired
			.Keyboard = ""
		.KeyDownExpired = date() + 0.5s
		.Keyboard += cp.Render
		.Files.JumpTo(.keyboard)
		
		
	function AddButton (|ButtonView| BTN,  |string| Oof,  |bool| first)
		btn.ExpandOnMouseOver = 2
		btn.size = (44~long to 4~before) by (4~up for 16)
		btn.Text = Oof
		btn.gnormal.solid = (1.0, 1.0, 1.0, 0.15)
	
	
	module
		|message|						PrefPlace 
		|OpenSaveDialog|				Asker
		
		function StartPrefs (|message|)
			rz = (app.prefs)("opensave")
			rz.keep(20)
			for f.reverse in rz
				if f != @tmp
					f.remove
		
		function LastDir (|message|)
			opt norefcounts
			return .PrefPlace init .startprefs
			
		function FindFileName (|listview| s, |string| name, |filerow|)
			for r.all in s
				if r isa filerow
					if r.location.name ~= name
						return r
		

		function RelistKey (guikeyevent)
			opt NoRefCounts
			require key <= 0
			|| w = .window|OpenSaveDialog|
			|| p = w.path
			|| t = p.text
			if (t[0] != '/')
				beep
				p.text = w.LastGoodPath init "/"
				return true
			
			w.RelistFiles(t, false)
			return true



function file.IsDirLike (|bool|)
	require .IsDir
	|| n	= .Name
	|| ext	= n.Ext
	return (n != "XCBuildData") and (ext != "app" and "framework" and "bundle" and "xcodeproj" and "build" and "dSYM") // os x


function OpenSaveDialog.RelistFiles (|string| path, |bool| AlwaysUse=true)
	|| pf = path.file
	if !pf.exists and !AlwaysUse
		return

	if path[0] == '~'
		path = path.Resolve
	if path
		.LastGoodPath = path
		.files.ListFilesUp(path, .types, (.name is visible))


function OnAskSaveAnswer (GUIAction)
	opt NoRefCounts
	|| w = .window|opensavedialog|$
	if self != w.accept
		w.cancelreturn
		return nil

	if w.name is visible and editable
		OnAskSaveName(w.name, keys.return)
	  else
		w.GoIntoFolder


function OpenSaveDialog.GoIntoFolder (|bool|)
	|| f = .files.sel|filerow|
	|| Acceptable = f and (f isnt greyed)
	expect Acceptable (Beep)
	if f.asdir
		if (f.name == "..") or !.types or !.types.typecontains(f.location.ext+"/")
			.path.text = f.location
			.RelistFiles(f.location)
			return true
	if (f.name != "..")
		if .Name is visible
			beep
		  else
			.ReturnValue = f.Location
		return true


function OnAskSaveName (GUIKeyEvent)
	opt norefcounts
	if key.isaccept
		|| w = .window|opensavedialog|$
		|| s = .text #expect Beep
		w.ReturnValue = w.path.text.child(s)
		return true


function OnAskSaveReveal (GUIAction)
	opt NoRefCounts
	|| w = .Window|opensavedialog|$
	|| f = w.files.sel
	if f isa filerow
		|| p = (w.path.text, f.location)(f.name == "..")
		p.reveal


function OnAskSaveEntered (GuiListEvent)
	return .parent|OpenSaveDialog|.GoIntoFolder


function window.CancelReturn
	.ReturnValue = self
