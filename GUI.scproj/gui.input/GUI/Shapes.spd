

class VObject
	|vec2| Pos
	|vec2| Radius
	|vec2| Velocity
	|byte| Nudge
	|vec4| Color
	|float|	Health
	
	constructor (|vec4| Pos_Rad, |vec4| Color=colors.white)
		.pos = Pos_Rad.xy
		.Radius = Pos_Rad.zw
		.Color = color
		.Health = 1
		
	function Towards (|vec2| P, |float| Speed)
		.Velocity = (P - .pos).Normal * Speed
	
	syntax Access (|vec4| V, |vec4|)
		|| P = .pos
		V += (P, P) // add nudge later
		return V
		
	function y (|float|)
		return .pos.y

	function x (|float|)
		return .pos.x

	function left (|float|)
		return .pos.x - .Radius.x

	function right (|float|)
		return .pos.x + .Radius.x
		
	function Box (|vec4|)
		|| rad = .Radius
		return (.pos-rad, .pos+rad)

	function Step
		.pos += .Velocity

	function OverlapsBlock (|VObject| B, |vec4|)
		return .OverlapsRect(b.box)
	
	function OverlapsRect (|vec4| B, |vec4|)
		return B.Clip(.box)
	
	function Screen (|ivec4|)
		return .box.Screen
	
	syntax cast (|ivec4|)
		return .Screen
	
	module
		|float| DrawScale
		|vec2|  DrawMovement
// later: handle other ratios, for example (Add borders)
// could we try to get closer to phi? say trim a few pixels off the top? to 865 pixels


function vec4.Scr0 (|vec4|)
	return (self + VObject.Drawmovement.xyxy) * VObject.DrawScale

function ivec4.Screen (|ivec4|)
	return .Vec4.Screen

function vec4.Screen (|ivec4|)
	|| p = .scr0
	|| w = p.Width
	|| h = p.Height
	p = p.floor
	p.x2 = p.x + w
	p.y2 = p.y + h
	return p.iVec4


extend Window
	helper _ReadjustBlock2D
		description "Readjusts current draw-matrix. This converts object coords to screen coords." 
		|| Sc = .BlockScale$
		|| LR = .lastrect
		|| W = LR.width|float|
		|| H = LR.Height|float|
		|| Size = W
		if Sc < 0 
			sc = -sc
			Size = H
		
		Size /= sc
		Size = size.round(2)
		VObject.DrawScale = Size
		|| M = .BlockMove
		if .BlockMode&1
			M.x = ((W*0.5) + (Size * M.x))/Size
		if .BlockMode&2
			M.y = ((H*0.5) + (Size * M.y))/Size
		VObject.DrawMovement = M

	function BlockX (|bool| Middle=false, assigns:|float|)
		.BlockMove.x = Value
		.BlockMode = (.BlockMode &~1) ||| Middle
	
	function BlockY (|bool| Middle=false, assigns:|float|)
		.BlockMove.y = Value
		.BlockMode = (.BlockMode &~2) ||| (Middle<<1)
		
	setter BlockHeight (|float|)
		.Blockscale = -Value.abs
	
	setter BlockWidth (|float|)
		.Blockscale = Value.abs



class GridSection
	|...[512]|  Cells
	|uint64|    State
	|byte[4]|	Dimensions
	|object--?| Owner
	contains uint64
	constants
		CellMax = 512

	constructor
		(&.Dimensions)|&int|[] = 0
		.Fill(0)

	function Width (|int|)
		return .Dimensions[0]

	function Height (|int|)
		return .Dimensions[1]

	function Depth (|int|)
		return .Dimensions[2]

	function at (|uint| i=0, |&...|)
		if i < 512
			return .Cells[i]
		return Dummy
	
	function Fill (|uint64| V)
		|| C = .at
		for i in CellMax
			C[i] = v
	module
		|...| Dummy

