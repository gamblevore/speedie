

class Shape
	|vec2| Pos
	|vec2| Radius
	|vec2| Velocity
	|byte| Nudge
	|vec4| Color
	|float|	Health
	
	constructor (|vec4| Pos_Rad, |vec4| Color=colors.white)
		.pos = Pos_Rad.xy
		.Radius = Pos_Rad.zw
		.Color = color
		.Health = 1
		
	syntax cast (|ivec4|)
		return .Screen
	
	function Towards (|vec2| P, |float| Speed)
		.Velocity = (P - .pos).Normal * Speed
		
	function y (|float|)
		return .pos.y

	function x (|float|)
		return .pos.x

	function left (|float|)
		return .pos.x - .Radius.x

	function right (|float|)
		return .pos.x + .Radius.x
		
	function Box (|vec4|)
		|| rad = .Radius
		return (.pos-rad, .pos+rad)

	function Screen (|ivec4|)
		return .box.Screen
	
	function Step
		.pos += .Velocity

	function OverlapsBlock (|Shape| B, |vec4|)
		return .overlapsrect(b.box)
	
	function OverlapsRect (|vec4| B, |vec4|)
		return B.Clip(.box)
	
	module
		|float| DrawScale
		|vec2| DrawMovement
// later: handle other ratios, for example (Add borders)
// could we try to get closer to phi? say trim a few pixels off the top? to 865 pixels


function vec4.Scr0 (|vec4|)
	return (self + Shape.Drawmovement.xyxy) * Shape.DrawScale

function ivec4.Screen (|ivec4|)
	return .Vec4.Screen

function vec4.Screen (|ivec4|)
	|| p = .scr0
	|| w = p.Width
	|| h = p.Height
	p = p.floor
	p.x2 = p.x + w
	p.y2 = p.y + h
	return p.iVec4


extend Window
	helper _ReadjustBlock2D
		description "Readjusts current draw-matrix. This converts object coords to screen coords." 
		|| BS = .shapescale$
		|| J = 0.0
		if bs > 0 
			J = .LastRect.width|float|
		  else
			bs = -bs
			J = .LastRect.height|float|
		
		j/=bs
		Shape.DrawScale = j
		|| M = .ShapeMove
		if .ShapeMode&1
			M.x = (j+m.x)*0.5
		if .ShapeMode&2
			M.y = (j+m.y)*0.5
		Shape.DrawMovement = M

	function BlockX (|bool| Middle=false,assigns:|float|)
		.ShapeMove.x = Value
		.ShapeMode = (.ShapeMode &~1) ||| Middle
	
	function BlockY (|bool| Middle=false,assigns:|float|)
		.ShapeMove.y = Value
		.ShapeMode = (.ShapeMode &~2) ||| (Middle<<1)
		
	setter BlockHeight (|float|)
		.shapescale = -Value.abs
	
	setter BlockWidth (|float|)
		.shapescale = Value.abs

