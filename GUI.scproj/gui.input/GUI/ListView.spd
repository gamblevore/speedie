
class ListView (GUIControl) {
	linkage
		cpp_part LV
	|int|							RowHeight
	|int|							ScrollShift
	|byte|							ColumnCount
	|byte|							ScrollRealigner
	|bool|							IsEditing
	|bool|							IsSpreadSheetLike
	|bool|							IsMainListView
	|bool|							SelJustChanged
	|bool|							RightClickSelects
	|bool|							MultiSelection
	|bool|							MultiLineDraw
	|bool|							CanSeeAllLines
	|bool|							OneAlwaysSelected
	|bool| 							_BlockedDuringUse
	|bool|							AlwaysSendChangeEvent
	|bool|							NoSeps
	|bool|							IsTree
	|bool|							UseColorScheme
	|bool|							Skips
	|byte|							CommandSelectRow

	|ListViewRow?|					DraggingRowTo
	|ListViewrow?|					_Scroll
	|ListViewCell?|					EditDelayed
	|ListViewCell?|					MouseDownCell
	|ListViewrow?|					DraggingRowFrom
	|ListViewrow|					ListSource
	|listviewrow?| 					Headers
	|string|						ColumnInfo
	|menu?|							CMM
	|DrawStyle|						gRowSel 
	
	|GUIListEditEvent?|				TryEditCell
	|GUIListEvent?|					WasEdited
	|GUIListEvent?|					OnSelected
	|GUIKeyEvent?|					OnKeyDown
	|GUIListEvent?|					OnReturn
	|GUIListEvent?|					CalculateColumnWidths
	|GUIListEvent?|					OnRightClick
	|GUIListDragEvent?|				OnDragRow
	|ListViewRowDraw?|				OnDrawRow
	|textview?| 					TypingFilter
	|GUIListEditEvent?| 			OnTypingFilter


	constructor (|guicontrol| p,  |GUIListEvent| sel,  |GUIListEvent| ret)
		super.constructor(p)
		.RowHeight		= 13
		.ColumnCount	= 1
		.takesfocus 	= takesfocusflag.On
		.onreturn		= ret
		.onselected 	= sel
		.oncopy			= (&listview.defaultcopy)|GUICopyEvent|
		is editable
		isnt drawsfocus
		.listsource		= ListViewrow()
		.gRowSel		= .gnormal.copy
		.RightClickSelects = true
		.init
	
	
	function Init
		.gRowSel.Bg			<~ ((0.5, 0.5, 0.5, 0.65))
		.gnormal.solid		=  ((0,   0,   0,   0.65))
		.gnormal.seps		<~ ((0.5, 0.5, 0.5, 0.65))
	
	
	function guicontrol.BestXForMenu (|int|x, |int| width, |controlline|)
		opt norefcounts
		(width max= 64)
		if x >= 0
			return (x)~right for width
		if .mousexy.x > .horz.mid
			return the~right back width
		return the~left for width

	
	function TryRenameCellTo (|listviewcell!| cell, |string| value, |bool|)
		opt NoRefCounts
		require .TryRenameCellSub(cell, value)
		|| o = cell.row
		.touch
		.show(o)
		(.WasEdited)(self, o)?
		(.onselected)(self, o)?
		return true


	function TryRenameCellSub (|listviewcell!| cell, |string| value, |bool|)
		opt norefcounts
		|| tec = .TryEditCell
			return (tec)(self, cell, value)

		|| orig = cell.row
		orig.__textset__(cell.column, value)
		return true


//	function ViewableRowCount (|int|)
//		opt norefcounts
//		for r.all in self
//			rz++


	function DistTo (|ListViewRow| a, |ivec2|)
		opt norefcounts
		for r.all in self
			if r == a
				rz.y = rz.x
			++rz.x

	
	function ColorRow (|int| Depth, |int| Column, |int| y, |imagepixel|)
		if y
			return (0.5, 0.5, 0.5, 1.0).px
		if .UseColorScheme
			return Â¥.SyxCol[1]
		return imagepixel.clear


	function DistBetween (|ListViewRow| c, |ListViewRow| b, |int|)
		opt norefcounts
		|| a = c
		while a
			if a == b
				return rz
			a = .Hiernext(a)
			++rz
		a = c
		rz = 0
		while a
			if a == b
				return rz
			a = .Hierprev(a)
			--rz


	function OpenMenu (|ListViewRow| r, |int| y)
		opt norefcounts
		|| m = .cmm	
			m.EditingRow = r
			y = (y+2) - .lastbottom
			y:=1
			m.ShowCmm(self, y)


	function DesiredHeight (|int|)
		opt norefcounts
		rz = 2 + ((.ListSource.SlowCount max 2) * .RowHeight)
		|| t = .typingfilter
			rz += t.height - 1 


	function Col (|int| col,  |ivec4| z2, |ListViewrow| sc, |intrange|)
		|| x1	= .columns(col)
		|| col1 = col+1
		|| x2	= .columns(col1) - 1
		rz		= (x1, x2) + z2.x
		rz.x2	= rz.x2 min z2.x2


		
	function Columns (|int| i, |int|)
		require i > 0

		|| w = .width
		if .DrawCols == 3
			if i == 1
				return (w/2)
			if i == 2
				return (w/2)+(w/4)
		return w
	
	
	
	function DrawCols (|int|)
		if .width < 150
			return 1
		return .ColumnCount

	
	function TextWidth (|int|)
		opt norefcounts
		for row.viewable in self
			rz = rz max row.__text__.bounds.x
		rz *= font.width
	

	function NewCmm (|menu|)
		rz = .cmm
		if rz
			rz.listsource.clear
			return rz
		rz = menu(self, nil, nil)
		rz.clipmode = ControlClipMode.SlideBackInWindow
		.cmm = rz
		rz.id = "cmm"
	
	
	behaviour RightClick
		.EditDelayed = nil
		listview.delayEditTill_ = nil
		.MouseDownCell = .FindClickedCell(P)
		|| mdc = .MouseDownCell$
		|| r = mdc.row
		require (r isnt disabled)
		|| y = .DrawYRow(r)
		
		if (.RightClickSelects or .OnRightClick)
			if r isnt selected
				.Select(r)
			|| c = .onrightclick 
			if c and (c)(self, r)
				.openmenu(r, y - .lastbottom)
	

	function MenuForSelRow
		|| sels = .FirstSelected$
		.showfast(sels)
		|| y = .DrawYRow(sels)
		|| fp = .onrightclick
		if fp and (fp)(self, sels)
			.openmenu(sels, y - .lastbottom)
		
	
	function DoReturn (|bool|)
		|| r = .OnReturn$
		(r)(self, .FirstSelected)
		return true
		
	
	function Clear
		.listsource.clear
		._Scroll		= nil
		.DraggingRowTo	= nil
		.DraggingRowFrom= nil
	

	function InlineCell (|bool| always = false, |&InlineEditor|)
		opt norefcounts
		|| w = .window$
		|| t = w.inline
		if always or (self == T.editingfor)
			return t

			
	function ClearEdits
		opt norefcounts
		.InlineCell.FinishAndClear(false)?
	
	
	function Replaced (|ListViewrow| gone, |ListViewrow?| orig, |ListViewrow|)
		opt norefcounts
		if orig == gone
			return .sib(orig)
		return orig
	
	
	function Sib (|ListViewrow|r, |ListViewrow|)
		return .HierNext(r) ?? .hierPrev(r)
	
	
	function CheckRemoved (|ListViewrow| r)
		._Scroll		= .replaced(r, ._Scroll)
		.DraggingRowTo	= .replaced(r, .DraggingRowTo)
		.DraggingRowFrom= .replaced(r, .DraggingRowFrom)
	
	
	function RemoveRow (|ListViewrow| r, |bool| update=true)
		.CheckRemoved(r)
		
		|ListViewrow| willsel
		if r is selected
			willsel = r.prev ?? r.next
		r|list|.remove
		
		if willsel
			willsel.ChangeSel(true)
			.SelectedEvent( willsel )

		sdlapp.touch(self)
		if Update
			.touch				// setmodified
	
	
	behaviour Search
		require s
		.OpenSearch // whatever
		if JustUpdate
			return .SearchItems(s)
		|| f = .nextsearch(.lastselected)$
		
		.Show(f)
		if !.DraggingRowFrom
			.Select(f)
		return true
		
		
	function Rename (|bool|)
		cpp_part RenameCurr
		return .startRenameCell(.LastSelected.cell)
	
	
	function Rename (|ListViewRow| r, |bool|) 
		cpp_part RenameRow
		return .startRenameCell(r.cell)
	
	
	function RenameCol (|ListViewRow| r, |int| col, |bool|)
		return .StartRenameCell( r.cell(col) )
	
		
	function StartRenameCell (|ListViewcell!| rc, |bool|)  //  .editcell
		opt norefcounts
		|| r = rc.row
		.SelectAdd(r)
		.Show(r)
		|| inl = .InlineCell(true)
			expect inl.edit(rc, self)			(beep)
			if .istree
				inl.Editor!.selectall
		return true
	
	
	helper NeedFilter (|textview|)
		opt norefcounts
		rz = .TypingFilter
		if rz
			return rz
		rz = TextView(Self)
		.Typingfilter = rz
		rz.id = "filter"
		rz.gnormal.bg = (0.1,0.1,0.1,1.0)
		rz.gnormal.edge = .gnormal.edge
		(rz is editable)
		rz.size = the~width by (15)~down
	
	
	behaviour TypedString
		opt norefcounts
		if .OnTypingFilter
			|| t = .NeedFilter
			t.TypedString(input)
			return .UpdateFilter


	helper UpdateFilter (|bool|)
		opt norefcounts
		|| t = .OnTypingFilter$
		|| str = ""
		|| tf = .typingfilter
			str = tf.text
		(t)(self, nil, str)
		.touch
		if tf and self isa menu
			.Sizer.g(1) = .DesiredHeight~long
		if .selectablecount == 1
			.SelectFirst
		return true
	
	
	behaviour KeyDown
		opt norefcounts
		if .KeyDownTest(key) or (.OnKeydown)(self, key)?
			.editdelayed = nil
			return true
		|| tf = .TypingFilter
			if (keys.cmd and !key.iscmd)
				return tf.__keydown__(key)
			
			
			
	helper KeyDownTest (|keys| key, |bool|)
		if (key is INSERT or Enter)
			.rename
			return true

		if key.IsAccept
			return .doreturn
		
		if key.iscancel
			if .DraggingRowFrom
				.DraggingRowFrom = nil
				.DraggingRowTo = nil
				return true
			if .ClearSearch
				return true
			if keys.shift
				return .rename
			
		if .OnRightClick and (key.IsCmm)
			.menuforselrow
			return true
			
		if (key iscmd keys.A)
			return .SelectAll
		if (key is PAGEUP)
			.ScrollByRows(-.VisibleRows+1)
			return true
		if (key is PAGEDOWN)
			.ScrollByRows(.VisibleRows-1)
			return true
		if (key is HOME)
			.slidescroll = .start
			return true
		if (key is END)
			.slidescroll = .end
			return true
			
		if key is up or down
			if keys.Cmd
				.SelectMove( (-int.max, int.max)(Key is up) )
			  elseif !.FirstSelected
				.SelectMove( (-int.max, int.max)(Key is down) )
			  else
				|| i = 1
				if keys.option: i = .VisibleRows/2
				if key is up
					i = -i
				.SelectMove(i)
			return true
		
		if .IsTree and (key is left or right)
			return .openorclose(key)

		|| t = .TypingFilter
			if key.iscancel
				.StopFilter
			  else
				t.__keydown__(key) // delete too
			return .UpdateFilter

	
	function DefaultCopy (GUICopyEvent)
		|| fs = faststring()
		for s.listsel in self
			|| it = s.__copyid__
			it := s.text
			it := s.name
			if fs.length
				fs <~ '\n'
			fs <~ it
		return fs


	function CopyList (|array of string|)
		opt norefcounts
		.EditDelayed = nil
		.clearinternaldrops
		for s.listsel in self
			|| it = s.__copyid__
				rz <~ it


//	function SelList (|array of ListViewrow|)
//		opt norefcounts
//		for s.listsel in self
//			rz <~ s
	
	
	function IsEmpty (|bool|) // similar: hasany, rowcount
		return !.listsource.hasany
	
	
	function JumpTo (|string| s, ||)
		opt norefcounts
		|| it = .partialfind(S)
			.select(it)
		
		
	function PartialFind (|string| s, |listviewrow|)
		opt norefcounts
		for r.toplist in self
			if listview.pf(r.name)[0, s]
				return r


	function VisibleRows (|int|)
		|| h = .height + .scrollshift + .RowHeight - 1
		|| r = .RowHeight
		return h / r
	

	function FullyVisibleRows (|int|)
		return .height / .RowHeight


	function VisibleRowsGap (|int|)
		|| m = .FullyVisibleRows
		if m == 5
			return 4
		if m > 5
			return m - 2
		return m
		
	
	function CheckDrawUpdate
		if ._ScrollDrawTimer and !.inscrollarea(.mousexy)
			sdlapp.Touch(self)


	function EnableDrag
		.ondragrow = (nil, &BasicRowDrag)(.istree)
	

	behaviour MouseMove
		if .CanSeeAllLines
			.ScrollDrawTimer = 0
			return .HasFocus
		
		return .HandleMouseInScrollArea(p, ._ScrollDrawTimer)
	
	
	behaviour LostFocus
		.InlineCell.clear(false)?
		.clearinternaldrops
		super.lostfocus
	
	
	function SlideScroll (assigns:|listviewrow|r)
		.ScrollSet(r) // we wanted this to slide smoothly... sigh. do it later.
					  // in terms of the nodes and mousewheel.


	function ScrollSet (|ListViewrow?| s)
		s := .start
		.scrollshift = 0
		.ScrollRealigner = 0
		debug_require s != .listsource
		._scroll = s
		.ExpandParents(s)
		.checkdrawupdate
		if .isediting and (s and !.VisFullyContains(s))
			.ClearEdits


//	function VisContains (|ListViewRow| s, |bool|)
//		opt norefcounts
//		require s
//		for r.visible in self
//			if r == s
//				return true


	function VisFullyContains (|ListViewRow!| s, |bool|)
		opt norefcounts
		for r.fullyvisible in self
			if r == s
				return true


	function ScrollProtect
		opt norefcounts
		|| s	= ._scroll
		ifn .listsource contains s
			s = .start
			._scroll = s
		require s
		|| last = .end
		for .VisibleRowsGap
			if last == s
				s = nil
			last = .hierstep(last, false) #loop
		if !s
			.scrollset(last)
	
	
	function ExtractSelected (|ListViewrow| c, |ListViewrow|)
		rz = ListViewrow()
		while c
			|| p = c.nextselected
			rz <~ c
			c = p
	
	
	function FoundSep (|ListViewrow| m, |ListViewrow| before, |int|dir, |bool|)
		opt norefcounts
		|| answer = false
		while
			m = .hierstep(m, dir>0)
			if m == before
				return answer
			require m
			if m is disabled
				answer = true
			

	function CanBasicRowDragOne (|ListViewrow| s, |ListViewrow| before, |bool|)
		opt norefcounts
		if before
			require before isnt disabled
			require !.FoundSep(s, before, -1)
		return .FoundSep(s, before, 1)
		

	function HasSeps (|bool|)
		opt norefcounts
		|| l = .start
		while l
			if l is disabled
				return true
			l++


	function CanBasicRowDrag (|ListViewrow| s, |ListViewrow|before, |bool|)
		opt norefcounts
		if !.hasSeps
			return true
			
		while s
			require .CanBasicRowDragOne(s, before) 
			s = s.nextselected
		return true


	function BasicRowDrag (GuiListDragEvent)
		|| s = .FirstSelected
		if !s or (.Hiernext(s) == before) and !s.nextselected
			return true // no need
		if (before is selected)
			if before != s 
				beep
			return true
		if !.CanBasicRowDrag(s, before)
			beep
			return true
		
		for p in .ExtractSelected(s)
			if into	
				into <~ p
			  elseif before
				before.prev = p
		
		.bumpscroll
		return true
	
	
	function ClearInternalDrops
		.DraggingRowTo = nil
		.CommandSelectRow = nil
		.SelJustChanged = false
		.MouseDownCell = nil
		

	behaviour MouseUp
		ScrollInfo.endDrag

		|| f = .DraggingRowFrom
		|| t = .DraggingRowTo
		|| sl = .SelJustChanged
		.DraggingRowFrom = nil
		.ClearInternalDrops

		if f and t
			|| dr = .OnDragRow 	#debug_require
			if t == .listsource
				(dr)(self, nil, t) 
			  else
				(dr)(self, t, nil) 
			
		  elseif !sl
			|| LC = .FindClickedCell(P)
				|| L = LC.row
				require (L isnt disabled)
				if (L is selected) and (.SelCount > 1)
					.Select(l)
				  elseif !keys.Cmd and (.window!.SelBeforeMouseDown == self)
					.DelayedRename(Lc)
			

	function SelCount (|int|)
		opt norefcounts
		for f.listsel in self 
			RZ++


	function SelectableCount (|int|)
		opt norefcounts
		for f.all in self 
			if f isnt disabled
				rz++


	function DelayedRename (|ListViewCell| i)
		.EditDelayed = i
		delayedittill_ = (date() + 0.5s, nil)(i)


	function TryDelayedEdit
		|| i = .EditDelayed$
		.EditDelayed = nil
		|| p = .mouseXY
		if self contains p
			|| R = .FindClickedCell(p)
			if r and (R == i)
				.startRenameCell(r)
	
	
	function CanDrawDrag (|ListViewrow| wantsbefore, |bool|)
		if .DraggingRowTo or (.FirstSelected != .lastselected)
			return true
		require .draggingrowfrom != WantsBefore
		require .Hiernext(.draggingrowfrom) != wantsbefore
		return true


	function FixScroll (|bool|)
		if !._scroll
			.scrollset(.start)
			return ._scroll
		return true


	behaviour MouseDown
		.EditDelayed = nil
		if clicks >= 0
			.SelJustChanged = clicks > 1
		if (!keys.Cmd) and (.CommandSelectRow)
			return MouseDragging.handled
		
		|| AdjustScroll = (clicks == -1) and (.draggingrowFrom)
		if (clicks == -1) and (.window!.droppinginto == self) // I guess the filter is already done...
			|| i = .FindClicked(p)
			if (i isnt disabled)
				.Select(i)
			AdjustScroll = true

		if AdjustScroll
			if !.fixscroll
				.ClearInternalDrops
				debugger
				return MouseDragging.handled // why MouseDragging.DragWhatFixThis
			|| p2 = (0, .rowheight / 2)
			|| i  = .FindClicked(P - P2)
			|ListViewrow--| WantsTo
			
			if i
				WantsTo = i
			  else
				WantsTo = .listsource
				|| top = .lasttop
				if (p.y+p2.y > .lasttop)
					|| s = ._Scroll
						WantsTo = .bmove(s, -1)
					.ScrollByRows(-1)
					
				  elseif (p.y-p2.y < .LastBottom)
					.ScrollByRows(1)
			
			if .draggingrowFrom and (.CanDrawDrag(Wantsto))
				.draggingrowto = wantsto
			return MouseDragging.EvenIfNoMovement
		
		if .ClickedScroll(P, clicks)
			return MouseDragging.Within
		
		|| FirstSel = .FirstSelected
		|| LC = .FindClickedCell(P)
		if (Clicks > 1) and (firstsel) and !(keys.Cmd)
			if lc and lc.row == firstsel
				(.OnReturn)(self, firstsel)?
			return MouseDragging.handled
		
		.MouseDownCell = LC
		if !lc
			if !Keys.Cmd
				.selectnone
			return MouseDragging.handled
		|| l = lc.row 
		if L is disabled
			return MouseDragging.handled
			
		if keys.Cmd
			.CommandSelectRow := 1 + (L is selected)
			|| State = .CommandSelectRow
			.selectadd(l, State == 1, true)
			return MouseDragging.Within
		
		if (L isnt selected) or .AlwaysSendChangeEvent
			if keys.shift
				.selectShift(firstsel, L)
			  else
				.Select(L)

		if (!.istree and .OnDragRow and l is editable)
			.DraggingRowFrom = L
			.DraggingRowTo = nil
			return MouseDragging.Within
		return MouseDragging.handled
	
	
	function LastSelected (|ListViewrow|)
		opt NoRefCounts
		|| l = .end
		while l
			if l is selected
				return l
			l = .hierPrev(l)
		return .OneAlways
			
		
	function End (|ListViewrow|)
		opt norefcounts
		|| li = .listsource 
		return (li.hierend(li), li.last)(.IsTree)
	
	function Edge (|int|i, |bool| Selectable=false, |ListViewrow|)
		opt norefcounts
		rz = (.end, .start)(i > 0)
		if selectable
			while rz and rz is disabled
				rz = rz.step(i <= 0)
		
	function Start (|ListViewrow|)
		return .listsource.first 
	function SearchStep (|ListViewrow| l, |bool| fwd, |ListViewrow|)
		opt norefcounts
		|| root = .listsource
		if !fwd
			return l.hierprev(root) ?? .end
		if l != root // compare to .list? instead?
			(l is expanded) // might as well
		return l.hiernext(.listsource) ?? .start
	function HierNext (|ListViewrow| l, |ListViewRow|)
		if l
			return (l.hiernext(.listsource), l.next)(.istree)
	function HierPrev (|ListViewrow| l, |ListViewrow|)
		if l
			return (l.hierprev(.listsource), l.prev)(.istree)
	function HierStep (|ListViewrow| l, |bool|fwd, |ListViewrow|)
		if fwd
			return .Hiernext(l)
		return .hierprev(l)
	function BMove (|ListViewrow| l, |int| i, |ListViewrow|)
		opt norefcounts
//		require l
		for i.abs
			l = .hierstep(l, i > 0) #loop
		return l
	
//	function Loop (|ListViewrow| l, |bool| fwd, |ListViewrow|)
//		opt norefcounts
//		rz = .hierstep(l, fwd)
//		rz := (.start, .end)(fwd)


	function NextSearch (|ListViewRow| curr, |ListViewRow|)
		opt norefcounts
		|| dir = !keys.shift				// can do this backwards... if we want.
		
		curr := .start
		|| Start = curr
		
		while curr {
			curr = .searchstep(curr, dir)
			if curr == start
				return (start, nil)(curr is found)
		} (curr isnt found)
		return curr
	
	
	function ClearSearch (|bool|)
		opt norefcounts
		for s.all in self
			if s is found
				(s is Found) = false
				rz = true
	

	function SearchItems (|string| s, |bool|)
		|| c = .columncount
		opt norefcounts
		for m.all in self
			|| n = m.searchcolumns(s, c)
			(m is found) = (n > 0)
			rz = true


	function OpenOrClose (|keys| K, |bool|)
		opt norefcounts
		|| sel		= .LastSelected$
		|| Expand	= (k is right)
		|| Force	= keys.option 
		if (!Expand and (!sel.hasany or sel isnt expanded))
			sel = sel.parent!
			.Select(sel)
			Force = true
		if sel != .listsource
			if (!Expand and sel contains ._Scroll)
				.showfast(sel)
		if !force and !expand and (sel.AllExpandState & 2)
			for r in sel
				(r is expanded)=false
			return true
		if Force or (Expand == (sel is expanded))
			for r.flat in sel
				(r is expanded) = Expand
		(sel is expanded) = Expand
		return true


	function SelectAtleastFirst	
		if !.firstselected
			.select(.start)

	function Selected (|ListViewRow|)
		disabled "Do you mean .FirstSelected or .LastSelected?"
	
	
	function FirstSelected (|ListViewRow|)
		opt NoRefCounts
		|| l = .start 		
		while l
			if l is selected
				return l
			l = .HierNext(l)
		return .OneAlways


	function OneAlways (|ListViewRow|)
		opt norefcounts
		if .onealwaysselected
			|| it = .start
				(it is selected)
				self.SelectedEvent( it )
				return it


	function SelectAll (|bool|)
		opt norefcounts
		return .selectshift(.start, .end)


	function SelectFirst (|listviewselectmode| mode = listviewselectmode.normal, |bool|)
		opt norefcounts
		
		.select(.edge(-1, true), mode)
		return true


	function SelectShift (|ListViewrow| l, |ListViewrow| m, |bool|)
		opt norefcounts
		expect (l and m) (Beep)
		expect (.multiselection) (Beep)
		expect (l.parent == m.parent) (beep)
		
		|| modified = 0
		|| all		= (l == .start) and (m == .end) 
		|| i		= .DistBetween(l,m)
		|| n		= i.abs + 1
		for n
			if (l isnt disabled)
				modified += l.ChangeSel(true)
			 l = .hierstep(l, i > 0)#loop

		if modified
			|| mode = listviewselectmode.normal
			if all
				mode = listviewselectmode.noshow
			.SelectedEvent( (m, nil)(i), mode )
		return true


	function SelectMove (|int| i, |bool| Multi=keys.shift)
		opt norefcounts
		debug_require i
		|| l = (.LastSelected, .FirstSelected)(i > 0)
		if !l
			// what if .start or .end is disabled?
			|| f = .edge(i, true)
			return .Select(f)
		
		|| m = .bmove(l, i)
		ifn .multiselection and multi
			while m  and  m is disabled
				m = .hierstep(m, i > 0)
			return .Select(m)
		
		if multi
			.SelectShift(l, m)
		  else
			.SelectAdd(m)


	function SelectAdd (|ListViewrow| m, |bool| State=true, |bool| Multi=keys.shift)
		opt norefcounts
		if .OneAlwaysSelected
			return .Select(m)
		
		if .multiselection and multi
			if m.ChangeSel(state)
				.SelectedEvent(m)
		  else
			.Select(m)


	function SelectNone
		opt NoRefCounts
		|| one = .OneAlwaysSelected
		|| s = (.FirstSelected ?? .start, nil)(one)
		return .Select(s)
	
	
	function SelectNoShow (|ListViewRow| s)
		.select(s, ListViewSelectMode.Noshow)
	
	function SelectFast (|ListViewRow| s)
		.select(s, ListViewSelectMode.Fast)
		
		
	function Select (|ListViewRow?| s, |ListViewSelectMode| Mode = ListViewSelectMode.Normal)
		opt norefcounts
		require s and s != .ListSource
		require .owns(s)
		
		.ExpandParents(s)
		|| Modified = 0
		for r.all in self
			modified += r.ChangeSel(r == s)
		
		if modified or .AlwaysSendChangeEvent or mode is SendEvent
			.SelectedEvent(s, mode)
		if mode isnt noshow
			.show(s)

	
	function FocusOn (|ListViewrow| r)
		require .listsource contains r
		.ScrollSet(r)
		(r is expanded)
		.Select(r)

	
	function SelectedEvent (|ListViewRow| s, |ListViewSelectMode| Mode=ListViewSelectMode.normal)
		opt norefcounts
		.ClearEdits
		.SelJustChanged = true
		if s and (Mode isnt noshow)
			.Show(s)

		if (mode isnt noevent) and !._BlockedDuringUse
			(.onselected)(self, s, mode)?


	function ScrollByRows (|int| Rows)
		|| s = ._Scroll
			.scrollset( .bmove(s, rows) )
			.bumpscroll

	
	function ScrollMoveTo (|int| v)
		|| s = .start
			.scrollset(.bmove(s, v))
	
	
	function ShowFast (|ListViewrow| i)
		.show(i)

	
	function Owns (|ListViewrow| i, |bool|)
		return .listsource contains i
	
	
	function ExpandParents (|ListViewrow| i)
		opt norefcounts
		require i
		while i != .listsource
			i = i.parent		#require
			(i is expanded)

	
	function Show (|ListViewrow| i)
		require i
		debug_Require .owns(i)
		
		.ExpandParents(i)
		require !.VisFullyContains(i)
		|| n = .visiblerows|float|*0.34
		.scrollset(.bmove(i, -n|int|))
	
		
//	function Contains (|int| Y,  |ivec2| Search,  |bool|)
//		|| Srch = (.absleft,  y - .RowHeight,  .right,  y)
//		return Srch.contains(Search)
	
	
	function Use (|ListViewrow| PL, |bool| SendClickEvent=false)
		opt norefcounts
		debug_require pl
		require pl != .listsource
		._BlockedDuringUse = !SendClickEvent
		.listsource = pl

		.Scrollset( pl.first )
		if .OneAlwaysSelected
			.SelectFirst
		  else
			.SelectNone
		.bumpscroll
		._BlockedDuringUse = false

	
	helper ClickedScroll (|ivec2| P, |int| Clicks, |bool|)
		return .ClickedScrollbar(P, Clicks, .slh, ._ScrollDrawTimer)


	helper FindClicked (|ivec2| Search, |ListViewRow|)
		|| c = .FindClickedCell((0, search.y))
			return c.row
	
	
	helper FindClickedMenu (|int| y, |ListViewRow|)
		opt norefcounts
		if y <= .lastBottom
			return .bmove(.LastVisible$, 1)
		if y > .lastTop
			return .bmove(._scroll$, -1)
		|| c = .FindClickedCell((0,y))
			return c.row
	
	
	function StopFilter
		|| t = .typingfilter
			t.remove
			.typingfilter = nil
		

//	function FilterText (|string|)
//		opt norefcounts
//		|| t = .TypingFilter
//			rz = t.text


	helper ActualRect (|ivec4|)
		opt norefcounts
		rz = .lastrect
		|| t = .typingfilter
			rz.y2 -= t.height-1
		if .Headers
			rz.y2 -= .HeaderHeight
			
	helper HeaderHeight (|int|)
		return 19
	
	
	helper FindClickedCell (|ivec2| Search, |ListViewCell|)
		opt NoRefCounts
		|| r = .ActualRect
		|| x = search.x - r.x
		
		for sc.visible in self
			r.y = r.y2 - .RowHeight
			if r.vert contains search.y
				return .DrawCell( sc, x )
			r.y2 = r.y


	helper DrawYRow (|ListViewrow| search, |int|)
		opt NoRefCounts
		|| r = .lastrect

		for row.visible in self
			r.y = r.y2 - .rowheight
			if row == search
				return r.y2
			r.y2 = r.y

	
	function DefaultColumnWidths (GUIListEvent)
		return nil
		/*
		|| cw = .ColumnWidths$
		|| Weights = cw.length$
		|| sect = .width / Weights
		|| x = sect*2
		cw[0] = 0
		cw[1] = x
		
		for i in (2 to weights)
			x+=sect
			cw[i] = x
		cw[weights-1] = .width
		*/
	
	
	function LastVisible (|ListViewrow|)
		for r.visible in self
			rz = r


	helper RowBorderDraw (|ListViewrow| curr, |ListViewrow| find, |int| add, |image| where, |drawstyle| g)
		|| r = .RowBounds(curr, find, add)
			where.RectStyled(r, g)
	
	
	helper ListViewRow.CalculateSkip (|ListViewRow| prev, |int| n, |int|)
		opt norefcounts
		require prev
		for i in 1 to n
			|| t =     .__text__(i)
			|| p = prev.__text__(i)
			if (t == p) // and t and p 
				rz |= 1<<i
	
	
	helper CalculateSkips
		opt norefcounts
		|| n = .ColumnCount
		|ListViewRow| prev
		for sk.visible in self
			|| ind = (0, sk.CalculateSkip(prev, n))(.IsTree)
			sk.indent = ind
			prev = sk
	
	
	helper RowBounds (|ListViewrow| curr, |ListViewrow| find, |int| add, |ivec4|)
		opt norefcounts
		require find
		
		|| s	= .ActualRect
		|| low	= s.y1
		|| top	= s.y2 + .scrollshift - .rowheight
		while curr != find
			top -= .rowheight
			require (curr) and (top >= low)
			curr = .hiernext(curr)
		return (s.x, top, s.x2, top + add)


	helper SetInlineSize
		opt norefcounts
		|| inl = .InlineCell								#require
		|| cell = inl.cell									#require
		|| cb = .CellBounds(._scroll, cell)
			if (cb.y2 <= .height+1) and (cb.y1 >= -1)
				inl.editor!.size = cb.layout
				return
		inl.FinishAndClear


	helper CellBounds (|ListViewRow| curr,  |ListViewCell| cell,  |ivec4|)
		opt norefcounts
		|| sc = cell.row!
		|| B = .RowBounds(._scroll, sc, .rowheight)			#require
		B.horz = .col(cell.column, B, sc)
		B.x += sc.depth(self) * font.width*2
		return (B down .lastbottom) left .lastleft 


	helper DrawBordersSub (|image| Where,  |ivec4| Rect)
		require !.decluttered
		|| z2 = rect
		z2.y2 += .scrollshift
		z2.y  = z2.y2 - .rowheight
		
		if !.noseps and .gnormal.seps.a
			for r.visible in self
				|| n = .drawcols
				for i in n
					z2.horz = .Col(i, rect, r)
					r.DrawDividerH(z2, where, self, i)
					if i < n-1
						r.DrawDividerV(z2, where)
				z2 = z2 down .rowheight

		z2 = rect
		z2.y2 += .scrollshift
		z2.y = z2.y2 - .rowheight
		for r.visible in self
			if r is Selected
				Where.mark(z2, (2, 3)(.hasfocus))
			z2 = z2 down .rowheight


	function DrawMarks (|image| Where,  |ivec4| Rect)
		where.clearmarks(.lastrect)
		.DrawBordersSub(where, rect)
		|| bg		= .gnormal.bg
		|| focus	= .gRowSel.bg
		|| focuscol	= focus.color
		|| bgcol	= bg.color
		focuscol	= mix(bgcol, focuscol, focuscol.a)
		
		|| unfoc	= vec4(focuscol.lum)
		unfoc.a		= focuscol.a
		unfoc		= mix(focuscol, unfoc, 0.667)
		unfoc.a += 0.2
		where.fillmarks(.lastrect Â± 1, bgcol, .gnormal.seps, focuscol, unfoc)

			
	behaviour MouseWheel
		if !.CanSeeAllLines
			|| i = -p.y
			.scrollPixels(i*6)
		return true


	helper RealignScrollshift (|int| shl, |int|)
		if shl >= (.rowheight/2)
			return shl + 1
		return shl-1


	helper ScrollSlide (|int|)
		|| y	= .lasttop
		|| shl	= .scrollshift
		if !shl or .ScrollPixelsSub(0)
			return 0
		
		|| real = .ScrollRealigner
			real--
			if real < 32
				shl = .realignscrollshift(shl).clamp(0, .rowheight)
				.scrollshift = shl
				if !shl
					real = 0
			.ScrollRealigner = real
			sdlapp.touch(Self)
		return shl


	function ScrollPixels (|int| rem)
		if rem
			.ScrollPixelsSub(rem)
			.bumpscroll
			.ScrollRealigner = (48, 0)(.scrollshift)
			sdlapp.touch(self)


	function ScrollEnd (|listviewrow|)
		opt norefcounts
		rz = .end
		for .VisibleRowsGap
			rz = .hierstep(rz, false) #loop
	
	
	helper ScrollPixelsSub (|int| rem, |bool|)
		rem += .scrollShift
		|| cmp = (.start, .scrollend)(rem < 0) 
		if cmp == ._scroll
			rem = 0
		
		while (rem < 0)
			.ScrollByRows -1
			rem += .rowheight
		while (rem >= .rowheight)
			.ScrollByRows(1)
			rem -= .rowheight
		.scrollshift = rem
		return !rem


	function DrawHeaders (|image| where, |ivec4| rect)
		opt NoRefCounts
		|| l = .headers
			rect.y = rect.y2
			rect.y2 = .lastrect.y2
			l.ListRowDraw(Where, rect, self, 0)


	behaviour Draw
		opt NoRefCounts
		|| c = (.CalculateColumnWidths) ?? (DefaultColumnWidths)
		(c)(self, nil) // allow the thing to calculate the column widths before draw
		.ScrollProtect
		
		|| clip = where.ControlClip
		|| rect = .ActualRect
		|| L = .ListSource
		
		.CalculateSkips
		.DrawMarks(where, rect)
		.drawheaders(where, rect)
		
		rect.y2 += .ScrollSlide
		|| End = .End
		
		
		for r.visible in self
			rect.y = rect.y2 - .RowHeight
			|| D = (r.depth(self), 0)(.IsTree)
			r.ListRowDraw(Where, rect, self, D)
			rect.y2 = rect.y
			.CanSeeAllLines = (r == end and .start == ._scroll)

		where.controlclip = clip
		where.horz = .lastrect.h // redundant?
		|| cmm = .cmm
			.RowBorderDraw(._scroll, cmm.EditingRow, .RowHeight, where, Â¥.border)

		|| re = .RowBounds(._scroll, .DraggingRowTo, 1)
			re = re up .rowheight
			if !.draggingrowto.prev
				re = re down 2
			where.RectStyled(re, Â¥.border)
		
		.SetInlineSize
		
		where.RectOutlineOnly(.lastrect, .gnormal.edge, .gnormal.bg, ~.FindAttachedEdge)

		if .CanSeeAllLines
			.ScrollDrawTimer = 0
		  else
			if self isa menu
				.ScrollDrawTimer = 1							// oooop
			.DrawScroll(.slh, where)


	helper textview.MoveListLine (|int| i, |bool|)
		opt norefcounts
		|| inl = .isinline$
		|| c = inl.cell$ // wat
		|| c2 = c.step(i)
			inl.Edit(c2, nil)
			if i < 0
				.selrange = 0
		return true


//	helper LastNamed (|string| s, |ListViewrow|)
//		opt norefcounts
//		rz = .listsource.last
//		while rz
//			if rz.name ~= s
//				return rz
	
	
	syntax Append (|string| name, |GUIMenuEvent| ev, |object| obj=nil)
		cpp_part AppendMenuItem
		self <~ menuitem(name, ev, obj)

	
	Syntax append (|ListViewRow| R)
		|| needsel = .OneAlwaysSelected and !.ListSource.HasAny
		.listsource <~ r
		if needsel
			.select(r)
	
	
	helper AddSep
		self <~ menuitem("", nil)


	iterator ListSel
		|| f = .FirstSelected
		while f
			yield f
			f = f.nextselected


	iterator Viewable
		|| F = .start
		while f
			yield f
			f = .Hiernext(f)

	iterator Visible
		.fixscroll
		|| F = ._scroll
		|| n = .VisibleRows
		while f and n >= 1
			yield f
			f = .Hiernext(f)
			--n


	iterator FullyVisible
		.fixscroll
		|| F = ._scroll
		|| n = .FullyVisibleRows
		while f and n >= 1
			yield f
			f = .Hiernext(f)
			--n


	iterator All
		|| F = .start
		while f
			yield f
			f = .Hiernext(f)

	iterator TopList
		|| F = .start
		while f
			yield f
			f = f.next

	module
		|date|				DelayEditTill_
		.init

		function Init
	
	
		helper pf (|string| s, |string|)
			for (c in s) (i)
				if c.IsAlphaNum
					return s[i...].lowercase
			
}



function ListViewrow.Depth (|listview| me, |int|)
	opt norefcounts
	|| c = self
	rz = -1
	|| root = me.listsource
	while c and (root != c)
		rz++
		c = c.parent

