 

class Document (list)
	linkage
		cpp_part Doc
	contains DocumentState
	|int|					UndoChecker
	|int|					ScrollPos
	|byte|					MaxUndos
	|bool|					WasCompressed
	|bool|					WasJbin
	|byte|					ExpectJeebox
	|bool| 					CompareTreesOnSave
	|bool|					LoadedFromFile
	|bool|					ShouldntSave	
	|DocumentState?|		Current
	|DocumentState?|		Original
	|message?|				DocParsed
	|string|				Location
	|date|					FileDate
	|date|					ViewDate
	|intrange|				TypingPlace
	|DocumentViewer|		Viewers
	|CachedPath|			Ref
	
	
	constructor (|string| path, |int| Undos)
		.maxundos	= Undos
		.Location	= path
		.ref		= CachedPath(path, document.Cache_, self)
		.Viewers	= DocumentViewer(nil)

	
	destructor
		.Viewers.clear
		.ref.DeRef
	
	render
		fs <~ .location
		fs <~ "\n"
		super.render(fs)


	function Clear 
		.original = nil
		.current = nil
		.loadedfromfile = false
		super.clear
		
	
	function MoveTo (|string| path)
		require .Location != path
		.ref.Cache.ValueLower(.location) = nil
		.Location = path
		.ref.Path = path
		.ref.Cache.ValueLower(path) = .ref

	
	function Text (|string|)
		opt norefcounts
		|| c = .Current
			return c.text

	function ExpectCurr (||)
		opt NoRefCounts
		|| o = .original
		|| c = .Current
		if c and (c.parent|object| != self|object|)
			debugger //!!??
			c = nil
		if o and (o.parent|object| != self|object|)
			debugger //????
			o = nil
		if (!c)
			c = .first
			.current = c
		return c


	function UpdateState (|string| nt, |ivec2| ns)
		opt norefcounts
		|| c = .Current
			if c != .original
				c.text = nt
				c.typingplace = ns
				return
		
		.addstate(nt, ns)
	 

	function AddState (|string| nt, |ivec2| ns, |DocumentState|)
		|| c = .current
			if c.text == nt
				return c
			c.RemoveAfter
		
		|| latest = documentstate()
		latest.typingplace = ns
		latest.text = nt
		self <~ latest
		
		.current = latest
		.original ?= latest
		.Trim
		return latest


	function ClearTo (|string| s)
		.clear
		.AddState(s, nil)

	function IsModified (|bool|)
		opt norefcounts
		|| c = .current
		|| o = .original
		require o and c
		return (c != o) and (c.text!=o.text)


	function DocClose (|bool|)
		if !.IsModified
			return true
		|| Answer = ("Save file " + .Location.name + "?").AskSaveOrCancel()
		if answer >= 1		// save
			return .save(DocumentState.Closing)
		return answer == 0	// don't


	helper SaveText (|documentstate| l, |string|)
		|| t = l.text
		if .Wasjbin
			t = t.digest
		if .WasCompressed
			t = t.compress
		return t


	function Save (|int| Purpose=0, |ind|)
		// purpose is unused, right now.
		// it was used, originally... and might be again.
		|| l = .Location			#require
		|| c = .current				#require	
		|| f = l.file
		|| t = .SaveText(c)
		|| KeepDate = false
		rz = t.Length
		|| Deleted = !t and !f.visible
			if !f.delete
				rz = -1
		  else
			KeepDate = .FindKeepDate(t, f)
			if !f.data(t)
				rz = -1
		if rz
			.original = c
			if !deleted
				if KeepDate
					f.modified = .filedate
				  else
					f.modified = gui.FrameStart // just clear the subsecond bits
			.filedate = f.modified  // read it back to be sure its what we think it is.
			.UpdateSavedState
			

	function FindKeepDate (|string| t,  |file| f,  |bool|)
		require .CompareTreesOnSave
		|| old = f.ReadAll
			|| jold = old.Parse
				|| tp = t.parse
					rz = jold.deepequals(tp)
			  else
				stderr.pop

	
	helper SimpleUpdateFromDisk (|bool|)
		|| d = .FileDate
		if !d
			return true			// unsaved... must be ok.
		
		if d == .Location.file.modified
			return true			// no need
		if .IsModified
			return false		// not sure which to use.
		return .load(true)		// Reload!

	
	helper HandleExternalModified (|bool|)
		if .SimpleUpdateFromDisk
			return true

		|| Options	= ["Save", "Reload"]
		|| Answer	= confirmationdialog.ask("The file ${.location.name} has been externally modified. Reload or resave?", "", Options) 
		if answer >=  1			// save
			.save(DocumentState.Saving)
		if answer ==  0			// reload
			.load(true)
		return true


//	function Length (|int|)
//		|| c = .current
//			return c.text.length

	
	function DocumentViewer.NextViewer (|$?DocumentViewer| out, |textview|)
		opt norefcounts
		|| it = .Viewer
		out = .next
		if !it.Window
			.Remove
			return nil
		if it isa TextView
			return it
		
	function ShowParseErrorInViewers
		opt norefcounts
		|| v = .viewers.first
		while v
			|| it = v.NextViewer(v)
				it.parse

	function UpdateViewers (|int| Reason)
		opt norefcounts
		|| a = .current$
		|| v = .viewers.first
		while v
			|| it = v.NextViewer(v)
				it.UseState(a,  self,  a.typingplace, Reason)


	function UpdateSavedState 
		opt norefcounts
		|| v = .viewers.first
		while v
			|| it = v.Nextviewer(v)
				(it is modified) = false
				(it.ontextchanged)(it, documentstate.Saving, false)?
				


	function LoadSub (|bool| ChangedExternal, |bool|)
		|| f = .Location.file
		|| Lim = document.AskLimit(f)
		|| Data	= f.readall(lim)		#require
		
		.viewdate = gui.FrameStart
		.wascompressed = data.IsCompressed
		if .wascompressed
			data = data.decompress
		.WasJBin = data.Isjbin
		if .wasjbin
			data = data.parse.render
			
		.filedate = f.modified
		|| OldPos = (0,0)
		if ChangedExternal
			|| c = .Current
				OldPos = ivec2(.scrollpos)
		  else
			.clear
			
		.AddState(data, OldPos)
		.Original = .Current
		.LoadedFromFile = true
		return true


	function Load (|bool| ChangedExternal = false, |bool|)
		if ChangedExternal or !.LoadedFromFile
			require .loadsub(ChangedExternal)
		.UpdateViewers(DocumentState.Initialset)
		return true


	function Trim
		opt norefcounts
		|| L = .last$
		|| F = .first
		require L != F
		|| n = .maxundos - 2
		for (n)
			l--
			require L != F
		while
			|| nxt = f.next
			if nxt == l
				exit
			nxt.remove
		if !.current.parent	 // how?? its the last!
			debugger			
			self <~ .current
		if !.original.parent // original sometimes isnt first
			debugat // just wanna see :)
			.first = .original
			f.remove


	module
		|dictionary of cachedpath| Cache_ = dictionary()
		function New (|string| path, |document|)
			cpp_part NewShared
			if path
				rz = .Cache_.DocumentCached(path)
			rz ?= document(path, 120)
			
		function AskLimit (|file| f, |int|)
			|| n = f.size
			if n <= 128MB or n >= int.max
				return 128MB
			if "The file ${f.name} is ${n|int|.strsize} big. Do you still want to load it?\n\nText-editor performance may suffer.".confirm
				return n+1
			return 128MB




extend TextView
	function KeepUndosOnLoseFocus (|bool|)
		return (self is editable) and !.isinline

	
	function UpdateAllViews (|string| nt, |ivec2| NS, |int| Reason)
		opt norefcounts
		|| u = .document
			u.UpdateViewers(Reason)
		  else
			super.textset(nt)
			(self is modified) = true
			.touch
			.TypingPlaceTry(ns, true, nil)
			(.OnTextChanged)(self, reason, true)?


	helper TryCaptureUndo (|int| x, |string| nt, |ivec2| ns)
		opt NoRefCounts
		|| u = .undoer
			if self is editable
				if x == u.UndoChecker
					u.UpdateState(nt, ns)
				  else
					u.AddState(nt, ns)
		.UpdateAllViews(nt, ns, DocumentState.Typing)				// updates self


	function UndoChecker (assigns:|int| x)
		opt norefcounts
		with .undoer
			.UndoChecker = x


	function DoUndo (|bool| undo, |bool|)
		.undo(undo)
		return true


	function Undo (|bool| undo)
		opt norefcounts
		|| u = .undoer$
		|| m = u.ExpectCurr$
		|| pos = m.TypingPlace.xx
		
		m = m.step(!undo)		#expect beep
		if undo
			pos = m.TypingPlace
		u.current = m
		
		if .text != m.text
			.UseState(m, u, pos, DocumentState.UndoOrRedo)


	function UpdateModState (|document| D, |int| reason)
		|| ismod = d.ismodified
		if (self is modified) != ismod 
			(self is modified) = ismod
			if ismod
				.touch
		(.OnTextChanged)(self, Reason, ismod)?


	function UseState (|DocumentState| L,  |document| D,  |ivec2| ty,  |int| Reason)
		require .parent
		.UndoChecker = -1
		.GuessExpectsParse
		if l.text
			self|guicontrol|.text = l.text
			|| i = d.scrollpos
			.PrepareLinesOfText
			.TypingPlaceTry( ty, true, nil)
			.scrollpos = i
			if reason == DocumentState.typing
				.ShowTypingPlace(ty)
			  elseif reason == DocumentState.UndoOrRedo
				.show(ty.x)
		  else	
			.Clear(l.text)		
		
		.UpdateModState(d, reason)
	



class DocumentState (list)
	linkage
		cpp_part dcs
	contains DocumentState
	|string|			_Text
	|IntRange|			TypingPlace 

	constants
		InitialSet = 0
		Typing = -1
		UndoOrRedo = -2
		Saving = -3
		Closing = -4
		ErrorChecking = -5

	function Text	(|string|)
		if UseCompression
			return ._Text.Decompress
		  else
			return ._Text

	setter Text (|string|)
		if UseCompression
			._text = value.Compress // mz is pretty fast anyway
		  else
			._Text = value
	module
		|bool| UseCompression


