

class FileViewer (ListView)
	linkage
		cpp_part FV
    |dictionary?|					Excludes
    |dictionary?|					NoFind
    |TextView|						QuickOpen
    |ListView|						ListOpen
    |textView|						Editme
    |filerow?| 						Extra
    |filerow?| 						SearchWithin
    |[string]|						SizeCheckers
    |GUIListEvent?|					OnSearchWithin
    
	constructor (|window| p, |GUIListEvent| sel, |GUIListEvent| ret, |TextView| EditMe)
		super.constructor(p, sel, ret)
		.MultiSelection 	= true
		.editme				= editme
		.OnReturn			= ReturnFileList
		.OnRightClick		= RightClickFileList
		.quickopen			= textview(nil,		nil,		nil)
		.Listopen			= ListView(nil,		nil, 		ClickedOpenList)
		.ondrawrow			= InsideFileViewRowDraw
		.tryeditcell		= FileRowRenamer
		.listsource			= filerow("", "root")
		
		.quickopen.tag = self
		.listopen.tag = self
	
	
	destructor
		.quickopen.disposeall
		.listopen.disposeall


	function Init
		.IsTree	= true
		.NoSeps	= true
		.EnableDrag
		with .quickopen
			is enabled
			is editable
			isnt visible
			.clipmode		= ControlClipMode.SlideBackInWindow
			.ID				= "quickopen"
			.size 			= 400~wide by 15~high
			.OnKeyDown		= QuickOpenKey
			.OnTextChanged	= QuickOpenModified
			.takesfocus		= takesfocusflag.On
			.onfocus		= QuickOpenFocus
			.SingleLine		= TextView.SingleLine
			.gnormal.solid	= (0.0, 0.1, 0.0, 0.90)

		|| l = .listsource as filerow
			l.AsDir = true
			
		with .Listopen
			is enabled
			is unsearchable
			isnt editable
			isnt visible
			.clipmode		= ControlClipMode.SlideBackInWindow
			.OneAlwaysSelected = true
			.ID				= "listopen"
			.gnormal.solid	= (0.0, 0.1, 0.0, 0.90)
			.takesfocus 	= 0
	
	
	behaviour MouseDown
		rz = super.MouseDown(p, clicks)
		if clicks == 1 or 0
			.TryReloadPath


	function TryReloadPath
		opt norefcounts
		for s.up in .FirstSelected
			if s isa filerow
				s.TryReload(self)
	
	
	behaviour AppForegroundChanged
		.TryReloadPath
	
	
	behaviour KeyDown
		if key.isdelete
			|| r = .FirstSelected
			if r isa filerow
				r.AskDelete(self)
				return true
		rz = super.keydown(key)
		.TryReloadPath


	function filerow.DirSize (|[string]|sc, |ivec2|)
		opt norefcounts
		require .asdir
		for f in self
			if f isa filerow
				for ext in sc
					if f isa ext
						rz += (f.lastsize|int|, 1)
						exit
				if f.asdir
					rz += f.dirsize(Sc)
		.lastsize = rz[0]
		.lastfilecount = rz[1]
	
	
	function CheckSize
		opt norefcounts
		|| f = .listsource
		if f isa filerow
			f.dirsize(.sizecheckers)
	
		
	function ShowQuickOpen (|bool|)
		opt norefcounts
		|| w = .window
		|| q = .quickopen
		q.text ?= .editme.seltext.before("\n").trim
		w <~ q
		w <~ .listopen
		if q is visible
			.HideOpenList
			return true
		(q is visible)
		q.SetFocus
		q.SelectAll
		.OpenQuickRelist(q.text)
		return true


//	function SavedFileData (|string| path, |string|)
//		opt norefcounts
//		|| f = self[path]
//			return f.savedfiledata

			
	function AddRoot (|file| fol, |bool| IsMainProj = false, |filerow|)
		|| C = 3000
		rz = .AddRootSub(fol, IsMainProj, C)
		(rz isnt editable)
		self <~ rz


	helper AddRootSub (|file| fol, |bool| IsMainProj, |&int| C, |filerow|)
		|| p = fol.path
		if !fol.isdir
			return FileRow(p, p.name)
		|| F = FileRow(p, p.TrimExtAndPath, .folfile)
		f.InMainProj = IsMainProj
		(f is expanded) = IsMainProj
		f.FillFilesSub(fol, .excludes, .folfile, c)
		return f


//	function Conf (|string|)
//		opt NoRefCounts
//		return (.start as filerow)$.location.child(.folfile)
	
	
	function FolFile (|string|)
		return .listsource.name
	
	
	function FolFile (assigns:|string|)
		.listsource.name = value


	function ErrorAt (|error| e)
		|| f = self[e.path]
		while f and f != .ListSource
			f.HasError = true
			f = f.Parent

			
	function ClearErrors
		opt norefcounts
		for s in self
			s.HasError = false


	iterator
		|| _curr = .listsource.first as filerow
		while _curr
			|| N_ = _curr.FlatNext
			yield _curr
			_curr = N_
		(self)


	function SaveAll (|int| Purpose, |bool|)
		cpp_part SaveAllArr
		rz = true		
		|| Decision = 0
		|| m = .Modified // what if like 100 are invalid? THEN? ask for all?
		for f in m
			if .CanSave(purpose, f, Decision)
				if !f.Save(purpose)
					rz = false


	helper CanSave (|int| Purpose, |filerow| f, |&int| Decision,   |bool|)
		|| d = f._Document		#require
		if !d.ShouldntSave
			return true
		.editme.LoadDocument(d)
		d.ShowParseErrorInViewers
		if Purpose == DocumentState.ErrorChecking
			return false 
		if (purpose == DocumentState.Saving)
			if !Decision[]
				|| q = "Save invalid jeebox for document?\n" + f.location
				decision[] = q.confirm.dir
			return Decision[] > 0
		return true


	function Modified (|[FileRow]|)
		opt norefcounts
		for f in self
			if f.ismodified
				rz <~ f


	function AskSaveAll (|bool|)
		|| m = .modified 
		if !m
			return true
		.focuson(m.first!)

		|| fs = faststring()
		|| n = m.Length
		|| fstr = "file".pluralize(n)
		fs <~ "Save $fstr in project "
		fs <~ .start!.name
		fs <~ "?"
		fs <~ "\n"
		for m0 in m
			fs <~ "\n"
			fs <~ m0.readname
		
		|| answer = AskSaveOrCancel(fs)
		if answer >= 1  // save
			return .saveall(documentstate.saving)
		return answer == 0	// don't


	syntax access (|int| i, |filerow|)
		return .listsource[i] as filerow


	syntax access (|string| path, |filerow|)
		cpp_part AccessPath
		if path ~= "/usr/local/speedie/exec.scproj/input/main.spd"
		if path.file.IsDir
			path = path.PathDir // standardise
		for f in self
			if path ~= f.location or f.ReadFrom
				return f


	helper string.name (|bool| YeahReally, |string|)
		cpp_part NameMaybe
		if YeahReally
			return .name
		return self


	helper string.FileViewMatch (|string| path, |int|)
		if path[0] == '/'
			require (self ~= path)
			return 10
		if self globs path
			return 8
		if (path[0] == '.' and path[1] != '/') and .endswith(path, true)
			return 1

		if path.length < 2
			return 0
		|| slah = path contains '/'
		if (self, .name)(slah) contains path
			if self.endswith(path) and self[(self-path)-1] == '.'
				return 1 // sigh
			return 2

	
	function FindAPath (|string| path,  |filerow| within=nil, |bool| Copy=false, |filerow|)
		return .FindPaths(path, within, copy)[0]


	function FindPaths (|string| path,  |listviewrow| within=nil, |bool| Copy=false, |[filerow]|)
		require path
		|| NameOnly = path[0, "./"] 
			path = path[2...]

		within ?= .listsource
		for f.flat in within
			if f isa filerow
				|| it = f.match(path, NameOnly)
					f.rangelength = it
					if Copy
						f = FileRow(f)
						if f.Location.file.IsDir
							f.name = f.name.PathDir
					rz <~ f
		
		if rz
			rz.sort(FileRowScoreSorter)
			|dictionary of filerow| D = dictionary.new
			for f in rz
				f.samenameasprev = false
				|| old = D[f.name]
					old.SameNameAsPrev = true
					f.SameNameAsPrev = true
				d[f.name] = f
		
		for (f.backwards in rz) (i)
			if f.SameNameAsPrev
				if copy
					|| name = f.name + "  --  " + f.location.neatenpath
					f = filerow(f)
					f.name = name
					rz[i] = f
				  else
					rz.remove(i)
		
	
	function Listviewrow.FileSort
		.sort(&fileviewer.FileRowNameSorter)
	

	helper error.ExtractRecent (|message| into)
		opt norefcounts
		for s in self
			if s|error|.when
				into <~ s

		
	helper CanFind (|filerow| f, |uint| id, |bool|)
		if id
			require f.findid != id
		f.findID = ID
		
		|| s = .SearchWithin
			|| Restrict = s.location
			if !f.location[0,Restrict]
				return false
		
		if !.NoFind or !.nofind.valuelower(f.name)
			return true
	
	
	helper BatchFindSub (|string| str, |error| all, |uint| id, |bool| Repl)
		opt norefcounts
		|| Remain = 10K
		for f in self
			if (f isa filerow)
				if .CanFind(f, id)
					f.FindInFile(str, all, remain, repl)


	function BatchFind (|string| str,  |message|)
		cpp_part BatchFindWrap
		return .BatchFind(str, 0, false)
		

	function BatchFind (|string| str, |uint| findid, |bool| ForReplace,   |message|)
		|| All = error()
		if !str
			return all
		.BatchFindSub(str, all, findid, forreplace)
		all.ExtractRecent(rz)			// Split into recent and not recent
		rz.sort(ErrorSearchSorter)		// recent
		all.sort(ErrorSearchSorter)		// not recent
		for s in all
			rz <~ s


	function HideOpenList (|bool|)
		.ListOpen.clear
		.QuickOpen.hide
		.ListOpen.hide
		return true


	function OpenQuickRelist (|string| path, |bool| Improve=false)
		|| b = .OpenQuickRelistsub(path, improve)
			path = b
		.QuickOpen.text = b
		
	helper OpenQuickRelistSub (|string| path,  |bool| Improve,  |string|)
		rz = path
		if path < 2
			.listopen.clear
			return rz
		
		ifn path[0, "/"] or path[0, "~/"]
			|| r = .FindPaths(path, nil, true)
			.ListOpen.QuickOpenFill(r)
			return rz
		
		|| f = path.before(":").file
		|| filter = ""
		if !f.Exists
			f = f.Parent
			if !f.exists
				Notifications <~ f + " doesn't exist"
				beep
				return rz
			filter = path.name
		  elseif Improve
			rz = path.PathDir
		.OpenQuickRelistDir(f, filter)


	helper ListView.QuickOpenFill (|[filerow]| Items)
		|| HasSel = .FirstSelected != nil
		.clear
		for p in items
			|| m = message(@str, p.name)
			|| dir = p.Location.file.isdir
			m.name = ("\10 ", "\11 ")(dir) + m.name
			
			if HasSel and p isnt disabled
				(p is selected)
				HasSel = false
			m.flags = p.flags
			self <~ m
			m.obj = p
		(self is visible) = items.length > 0
		|| d = .DesiredHeight
		|| d2 = d.clamp(100, 250)
		.size = the~same by 0~before back d2


	helper OpenQuickRelistDir (|file| path, |string| filter)
		|| invis = filter starts "."
		|[filerow]| items
		for ch in path
			if invis or ch.visible
				|| s = path[ch]!
				if s.IsDir
					ch += "/"
				|| ffr = filerow(s, ch)
				if filter and !(ch.name starts filter)
					(ffr is Grayed)
					(ffr is Disabled)
				items <~ ffr
		items.sort(FileRowScoreSorter)
		.listopen.QuickOpenFill(items)
	
	
	function OpenQuick (|string| s)
		|| LineByte = (0, 0)
		|| Path = s.ExtractPathAndLine(LineByte)				
			|| r = .FindAPath(path) ?? .AddExtra(path)
				.Select(nil) // do we need this?
				.SelectFast(r)
		  else
			.editme.SetFocus
		
		if LineByte.x1
			.editme.ViewLineAndSel(LineByte.x1)
		if LineByte.x2
			.editme.ShowAndSel(LineByte.x2, true)


	function AddExtra (|string| path, |filerow|)
		require path[0] == '/' or '~'
		|| f = path.file
		require f.mustexist
		|| x = .extra
		if !x
			x = filerow("", "(Extra)", ".")
			.extra = x
			self <~ x
		
		|| C = 3000
		rz = .AddRootSub(path.file, false, C) 
		x <~ rz
		.SelectFast(rz)

	module
		function FileRowRenamer (guilisteditevent)
			opt norefcounts
			|| o = cell!.row as filerow
				return o.moveto(value)
			
		function FileRowScoreSorter (SorterComparerFileRow)
			opt norefcounts
			if b.rangelength == a.rangelength
				|| aprj = a.InMainProj
				|| bprj = b.InMainProj
				if aprj == bprj
					return FileRowNameSorter(a, b)
				return aprj
				
			return a.rangelength < b.rangelength


		function ErrorSearchSorter (SorterComparerError)
			// spds first.
			|| an = a.path.name 
			|| bn = b.path.name 
			|| ae = an.ext
			|| be = bn.ext
			|| it = isbetter(ae, be, "spd")
				rz = it == 1
			  else
				it = isbetter(ae, be, "box")
				if it
					rz = it == 1
				  else
					rz = (an ~< bn, ae ~< be)(be == ae)


		function FileRowNameSorter (SorterComparerFileRow)
			opt norefcounts
			if (b.asdir) != (a.asdir)
				return (b.asdir)
			return (b.name ~<= a.name)

		function QuickOpenModified (GUITextEvent)
			|| fv = .tag as fileviewer
				fv.OpenQuickRelist(.text)

		function QuickOpenKey (guikeyevent)
			|| fv = .tag as fileviewer				#require
			|| l = fv.listopen
			if key.IsAccept
				|| row = l.FirstSelected
					ClickedOpenList(l, row)
				  else
					fv.OpenQuick(.text)
					fv.HideOpenList
				rz = true
			  elseif (key is escape)
				rz = fv.HideOpenList
			  elseif key is up or down
				rz = l.KeyDown(key)


		function QuickOpenFocus (guiaction)
			require state == 0
			|| fv = .tag as FileViewer
				rz = fv.hideopenlist


		function ClickedOpenList (GuiListevent)
			|| V = .tag as FileViewer
			|| r = row!.obj as filerow
			require r and v

			|| loc = r.location
			if loc.file.isdir
				V.OpenQuickRelist(loc, true)
				return true
			v.OpenQuick(loc)
			V.HideOpenList
			return true
			

		function InsideFileViewRowDraw (ListViewRowDraw)
			opt norefcounts
			if self isa filerow
				|| z	= parent.lastrect
				|| sh	= font.width*2
				|| v	= (6 + .depth(parent)*sh, texty)
				|| mod	= ._Document.ismodified?
				|| ddd	= (Colors.black(0.5), Colors.clear)(mod)
				ddd.a *= strength // sigh...
				font.small!.drawicon(.Modifier, where, V, ddd)

				if .HasError and (!.hasany or self isnt expanded)
					v.x = z.x2-sh
					font.small!.drawicon('\17', where, V, ddd) // not sure???
				return (sh, 0)


		helper isbetter (|string| a, |string| b, |string| ext, |int|)
			if (b == ext) != (a == ext)
				return (a==ext)+1


helper string.PlatformVisible (|bool| AtRoot, |bool|)
	require self[0] != '.'
	if !atroot
		return true
	if platform.osx
		return (.length > 3) and !.islower
	return true


function FileRow.Modifier (|byte|)
	if .DoesntExist
		return '?'
	return icon(.location, "", self is expanded, !.asdir)


extend_module filerow
	helper icon (|string| self, |string| types, |bool| Expanded = false, |bool| NotDir = false, |byte|)
		|| n = .name
		|| ext = n.ext
		if (.last == '/') and !notdir
			if types and types.TypeContains(ext + "/")
				rz = '\19'
			  elseif expanded
				rz = '\1A'
			  else
				rz = '\10'
		  elseif (ext == "app" or "scproj" or "uwuz")
			rz = '\19'
		  else
			rz = '\11'



function fileviewer.FindSearchWithin (|filerow|)
	opt norefcounts
	|| s = .FirstSelected as filerow
		while (s isa filerow) and !s.AsDir
			s = s.parent
		return s
	
function ReturnFileList (GUIListEvent)
	if self isa FileViewer
		.Editme.SetFocus
		return true
	
function RightClickFileList (GUIListEvent)
	opt NoRefCounts
	if self isa fileviewer
		|| m = .newcmm
		m <~ ("Show In Desktop",	FileViewerCMMShow)
		m <~ ("Copy File Path",		FileViewerCopyPath)
		m <~ ("Rename File",		FileViewerRenameFile)
		m.addsep
		|| within = .FindSearchWithin
			m <~ ("Search Within: " + within.name, FileViewerSearchWithin, within)
		
		|| rem = .FirstSelected as filerow
			if (.extra contains rem) and rem != .extra
				m <~ ("Remove From Project",	FileViewerRemove)

		m.AddSep
		m <~ ("Create New File",	FileViewerCreateFile)
		m <~ ("Delete File",		FileViewerTrash)
	return true


function FileViewerCMMShow (GuiMenuEvent)
	|| row = clicked!.row
	if row isa FileRow
		row.location.Reveal


function FileViewerRenameFile (GuiMenuEvent)
	|| row = clicked!.row as filerow
	if self isa FileViewer
		.rename(row)
	

function FileViewerCreateFile (GuiMenuEvent)
	|| row = clicked!.row as filerow		#require
	if !row.asdir
		row = row.parent!
	|| l = row.location
	|| f = l.file.UniqueChild("untitled")
	if f and f.CreateEmpty and self isa FileViewer
		|| created = filerow(f.path, f.name) 
		row <~ created
		row.filesort
		.rename(created)
		.checksize
		.SomethingChanged(row)


function FileViewer.SomethingChanged (|filerow?| row)
	.TryReloadPath
	(.WasEdited)(self, row)?


function File.CreateEmpty (|bool|)
	expect (!.exists) (self, "File already exists, can't create empty file here.")
	return .data("")


function FileViewerCopyPath (GuiMenuEvent)
	opt norefcounts
	if Clicked
		|| row = clicked.row as FileRow
			clipboard.text = row.location


function FileViewerTrash (GuiMenuEvent)
	|| row = clicked!.row
	if  row isa FileRow  and  self isa fileviewer
		row.AskDelete(self)
		.SomethingChanged(nil)


function FileViewerRemove (GuiMenuEvent) // just removes knowledge of the item
	|| row = clicked!.row
	if row isa FileRow and self isa FileViewer
		row.remove
		.SomethingChanged(nil)


function FileViewerSearchWithin (GuiMenuEvent)
	opt norefcounts
	|| row = menu.obj as filerow
	if self isa FileViewer
		if row == .listsource
			row = nil
		if row != .Searchwithin
			.SearchWithin = row
			(.OnSearchWithin)(self, row)?
		
	

prototype SorterComparerFileRow (|filerow| a, |filerow| b, |bool|)
prototype SorterComparerError   (|error|   a, |error|   b, |bool|)
