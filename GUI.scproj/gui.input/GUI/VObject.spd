



class VObject
	|vec3|		Pos
	|vec3|		Radius
	|vec3|		Velocity
	|byte|		Nudge
	|byte|		ShapeID
	|vec4|		Color			// image pixel?
	|float|		Health			// are ints better? I think so?
	|DistanceFunction| Shape
	
	prototype DistanceFunction (|vec3| orig, |vec3| dir, |vec3| idir, |vec2|)
		// this should become a more generalised "hitter"
		// for shape, nearest point, and color and maybe even sound+energy uses
		
	constructor (|vec2| Pos,  |vec2| Size,  |vec4| Color=colors.white)
		cpp_part ConstructorBox2D
		.pos = (pos, 0.0)
		.Shape = &raytracer.BoxShape
		.Color = color
		.Health = 256
		.size = vec3(size,1.0)
		.ShapeID = ++ShapeIDs

	constructor (|vec3| Pos,  |vec3| Rad, |DistanceFunction| shape,   |vec4| Color=colors.white)
		cpp_part ConstructorSphere
		.pos = pos
		.Shape = shape
		.Radius = rad
		.Color = color
		.Health = 256
		.ShapeID = ++ShapeIDs
		
	function Towards (|vec3| P, |float| Speed)
		.Velocity = (P - .pos).Normal * Speed
	
	function y (|float|)
		return .pos.y

	function x (|float|)
		return .pos.x

	function left (|float|)
		return .pos.x - .Radius.x

	function right (|float|)
		return .pos.x + .Radius.x
	
	setter Size	(|vec3|)
		.Radius = value*0.5
		
	function Box2D (|vec4|)
		|| rad = .Radius.xy
		|| p = .pos.xy
		return (P-rad, P+rad)

	function Step
		.pos += .Velocity

	function OverlapsBlock (|VObject| B, |vec4|)
		return .OverlapsRect(b.box2d)
	
	function OverlapsRect (|vec4| B, |vec4|)
		return B.Clip(.box2d)
	
	function Screen (|ivec4|)
		return .box2d.Screen
	
	syntax cast (|ivec4|)
		return .Screen
	
	module
		|byte| ShapeIDs
		|float| DrawScale
		|vec2|  DrawMovement
		
		function Box (|vec3| Pos, |vec3| Radius, |vec4| Color=colors.white, |vobject|)
			return VObject(pos, radius, &raytracer.BoxShape, color)
			
			
		function Sphere (|vec3| Pos, |float| Radius,  |vec4| Color=colors.white, |vobject|)
			return VObject(pos, vec3(radius), &raytracer.SphereShape, color)
			
// later: handle other ratios, for example (Add borders)
// could we try to get closer to phi? say trim a few pixels off the top? to 865 pixels

		function Size (|float| X, |float| Width, |float| Y, |float| Height, |controlrect|)
			if Width < 0
				x += Width
				Width = Width.abs
			if height < 0
				y += height
				height = height.abs
			|| V = (x,y,x+width,y+height)*16.0
			return V.iVec4|controlrect|

////


function controlsize.CalculateBlocks (|ivec4|)
	|| V = .gsize.vec4 * 16th
	return V.Screen


function vec4.ScreenFloat (|vec4|)
	return (self + VObject.Drawmovement.xyxy) * VObject.DrawScale

function ivec4.Screen (|ivec4|)
	return .Vec4.Screen

function vec4.Screen (|ivec4|)
	|| p = .ScreenFloat
	|| w = p.Width
	|| h = p.Height
	p = p.floor
	p.x2 = p.x + w
	p.y2 = p.y + h
	return p.iVec4


extend Window
	helper _ReadjustBlock2D
		description "Readjusts current draw-matrix. This converts object coords to screen coords." 
		|| Sc = .BlockScale$
		|| LR = .lastrect
		|| W = LR.width|float|
		|| H = LR.Height|float|
		|| Size = W
		if Sc < 0 
			sc = -sc
			Size = H
		
		Size /= sc
		Size = size.round(2)
		VObject.DrawScale = Size
		|| M = .BlockMove
		if .BlockMode&1
			M.x = ((W*0.5) + (Size * M.x))/Size
		if .BlockMode&2
			M.y = ((H*0.5) + (Size * M.y))/Size
		VObject.DrawMovement = M

	function BlockX (|bool| Middle=false, assigns:|float|)
		.BlockMove.x = Value
		.BlockMode = (.BlockMode &~1) ||| Middle
	
	function BlockY (|bool| Middle=false, assigns:|float|)
		.BlockMove.y = Value
		.BlockMode = (.BlockMode &~2) ||| (Middle<<1)
		
	setter BlockHeight (|float|)
		.Blockscale = -Value.abs
	
	setter BlockWidth (|float|)
		.Blockscale = Value.abs
