 
// confirm, ask, confirmit, beep, alert
module beep
	|date| OK = 1
	syntax expect (|string| s=nil)
		app.beep(s)


extend_module app
	function BeepSub
		cpp_Wrapper JB_App__Beep
	
	function Beep (|string?| q="")
		if beep.OK.fired
			.BeepSub
			beep.OK = gui.FrameStart + (1s/12)
		if q
			.alert(q)
	
	function Alert (|string| Q)
		if GUI.StartedProperly
			ConfirmIt(q, "", ["OK"])
		  else
			GUI.PendingAlerts <~ q


function ConfirmCancel (|string| Q,  |string| Title="",  |int|)
	|| Answers = ["Yes", "No", "Cancel"]
	return ConfirmIt(q, title, answers)


function AskSaveOrCancel (|string| Q,  |string| Title="",  |int|)
	|| Answers = ["Save", "Dont", "Cancel"]
	return ConfirmIt(q, title, Answers)


function string.Confirm (|string| Title="", |ConfirmCanceller| Canceller=nil, |bool|)
	|| Answers = ["Yes", "No"]
	return ConfirmIt(self, title, Answers, Canceller) == 1


function string.Ask_Named (|string| Answers,  |int|)
	return ConfirmIt(self, "", Answers.Components)


function string.Ask (|string| response="",  |string| Title="",  |stringthatwasreadsafely|)
	|| Answers = ["OK", "Cancel"]
	if ConfirmIt(self, title, Answers, response) == 1
		return ConfirmWindow_._asker!.response.text
	return String.Error


function guicontrol.VisText (assigns:|string|s)
	.TextSet(s)
	(self is visible) = s.Length > 0


function ConfirmWindow_.Resize (|string| s)
	|| desired = .question.TextSize(s) + (19, 34)
	|| actual = desired max (200, 100)
	actual = actual min (450, 550)
	actual = actual min (GUI.Screensize.x2y2 - 8)
	.size = actual.layout


helper window.TryCloseDialog (|bool|)
	opt norefcounts
	.cancelreturn
	|| count = 0
	if self isa ConfirmWindow_
		for b in .Buttons
			if b is visible
				count++
		if count == 1
			.remove
			return true


function ConfirmIt (|string| Q,  |string| Title,  |[string]| Answers,  |string| Response=string.byte(0), |ConfirmCanceller| Cancel = nil, |int|)
	|| w = ConfirmWindow_._asker init ConfirmWindow_()
	if !q or w is visible		// recursive... sigh
		if answers[2]
			return -1			// cancel
		return 0

	w.DelayUntil = gui.FrameStart + 0.5s
	with w
		.text = title
		.Resize(q)
		.question.text = q
		for i in 3
			|| b  = .buttons[i]!
			|| bw = b.textwidth+8 max 40
			|| a = answers[i]
			a ?= ""
			b.vistext = a
			|| l = (3,7)(i > 0)
			b.size    = (l)~after for bW  by 5~up  for 17
		.SetResponse(response)
		
		|| p = (W)(Cancel)
		ifn (.response isnt visible) or (p != .yes) or (.response.text)
			beep
			
		.text = ""
		.question.text = "" // clear memory :)

		if p == .yes
			return 1
		if p == .cancel or nil
			return -1

	
	
class ConfirmWindow_ (Window)
	linkage
		cpp_part cwin
    |textview|			Question
    |textview|			Response
    |Buttonview|		Yes
    |Buttonview|		No
    |Buttonview|		Cancel
    |[Buttonview]|		Buttons
    |date|				DelayUntil // for accidental presses.

    constructor
		super.constructor
		.id				= "confirm"
		.Yes			= buttonview(self, OnConfirmAnswer)
		.No				= buttonview(self, OnConfirmAnswer)
		.Cancel			= buttonview(self, OnConfirmAnswer)
		.response		= textview(self, nil)
		.Question		= textview(self, nil)
		.gnormal        = Â¥.systemstyle 
		.fullscreen		= (300, 150)
		.AddButton(.yes, "Yes", true)
		.AddButton(.No,	 "No" , false)
		.AddButton(.Cancel, "Cancel", false)
		
		isnt visible
		.init
		

	function SetResponse (|string| response)
		opt norefcounts
		|| R = .response
		|| vis = response != string.byte(0)
		r.visible = vis
		if vis
			r.text = response
			r.SelectAll
			r.SetFocus


	function Init
		with .question
			 is AlwaysScrollable // why isnt
			.id			= "question"
			.size 		= 6~inside  by  2~above to the~top-6
			.takesfocus = 0
			&.gnormal.edge<~ (0,0,0,0)
			&.gnormal.bg  <~ ((0.11,0.11,0.11,1.0))
		
		with .response
			is editable
			isnt drawsfocus
			.id			= "response"
			.singleline = TextView.SingleLineWithTabs
			.gnormal	= self.question.gnormal
			.size		= 6~inside  by  2~above for 15

		
	behaviour KeyDown
		opt NoRefCounts
		
		|| cans = key.iscancel
		if (.cancel is visible) and cans
			.returnvalue = .cancel
			return true

		if (.no is visible)
			if cans or ((.response isnt visible) and (key.isdelete or key is n or d))
				.returnvalue = .NO
				return true

		if (.yes is visible) and (key.IsAccept or cans or (key is space))
			.returnvalue = .YES
			return true
		return super.keydown(key)


	function AddButton (|ButtonView| BTN, |string| Oof, |bool| first)
		.Buttons <~ btn
		btn.ExpandOnMouseOver = 2
		btn.Text			= Oof
		btn.gnormal.solid	= (0.15, 0.15,0.15,1.0)
	
	module	
		|ConfirmWindow_| _asker



function OnConfirmAnswer (GUIAction)
	opt norefcounts
	.window$.ReturnValue = self // self isa button, not a window! (i made this mistake once)



prototype fnConfirmCanceller (|object| self, |bool|) 
class ConfirmCanceller
	linkage
		cpp_part cncl
	|object|					Owner
	|fnConfirmCanceller|		Func
	syntax call (|bool|)
		if self
			return (.func)(.owner)
	
