

// todo:
// 1) Add screen cells and culling
// 2) turn the spheres into chunks?
// 3) Optimisations around unmoving objects
// 4) hit-detection? (surely its just chunk vs chunk anyhow?)
// 5) 4 threads, each can do one quad.
// 6) more shapes:
	// * box    / sloped voxels / blends with neighbours
	// * pipe   / half-pipes    / bends
	// * sphere / capsule       / blobs
	// * SDFs
	// (All shapes: Provide raydist for drawing, nearest point for hit-detection)
	



class RayTracer
	visible false
	|vec4|			Color
	|float|			Dist
	//
	|vec2|			Size
	|vec2|			Scale
	|vec2|			Adjust
	//
	|Vec3|			Dir
	|vec3|			iDir
	|Mat4|			_LookAt
	|Vec3|			_Camera
	//
	visible true
	|[vobject]|		Shapes
	|float|			Pitch
	|float|			Spin
	
	constructor (|vec3| Camera)
		// Default RayTracer constructor should use the block positioning system
		// either by zpos or zoom
		._LookAt.reset
		.Camera(Camera)
	
	
	function Camera (|vec3|)
		return ._Camera

	setter Camera (|vec3|)
		._Camera = Value.MakeSane
	
	
	helper ViewMat (|&mat4|)
		.spin = .spin.Fract
		.Pitch = .Pitch.fract
		._LookAt = .spin.SinCos.RotateAroundY	// could make a faster version that creates already transposed thing
		|| M = .pitch.SinCos.RotateAroundX   	// or just creates needed values and applies directly
		._LookAt *= M							// and only needs a "virtual" vec3
		return ._LookAt
	
			
	function AntiAlias (|vec2| XY, |&imagepixel| pxl, |&imagepixel|)
		|| ID = pxl.a
		|| C = pxl.Color
		for i in 4
			|| sh = (i&1, i>>1).Vec2 - 0.5
			c += .GetColor(XY + sh*0.8)
		C *= 5th
		C.a = ID|float|*255th
		pxl <~ C
		return pxl
	
	
	function GetColor (|vec2| XY, |vec4|)
		opt min 3, opt norefcounts
		.Color = nil
		.Dist = float.max
		XY = (xy + .adjust) * .scale
		.dir = (xy, 1.0).Normal * ._LookAt
		.idir = -1.0 / .dir
		
		for sp in .Shapes
			|| t = (sp.Shape)(sp, .Camera, .dir, .idir)
			|| tx = t.x
			if (tx > 0) and (tx < .Dist)
				.Dist = t.x
				|| P = .Camera + .dir*tx
				|| Norm = (P - sp.pos).normal
				|| C = (norm.abs * sp.Color.xyz)
				.color = (C, sp.shapeID|float|*255th)
		return .Color


	function RayTrace (|image| where, |float|)
		// should allow alpha for drawing over prev images...
		// meaning that the alpha can't be the ID!
		opt norefcounts,  opt min 3
		.ViewMat
		.size = where.size.vec2
		.scale = 1.0/.size.xx
		.adjust = .size * -0.5
		|| P = vec2()
		|| w = where.Width|float|
		|| h = where.Height|float|
		
		while p.y < h
			|| PY = (0, p.y|int|)
			|| pxl = where[PY]
			|| below = where[PY+(0,-1)]			
			|| Left = pxl
			while p.x < w
				|| C = .GetColor(P)
				pxl <~ C
				if pxl.a!=left.a
					left = .AntiAlias(p-(1.0,0), left)
					pxl = .AntiAlias(p, pxl)
					rz++
				if pxl.a!=below.a
					below = .AntiAlias(p-(0,1.0), below)
					if pxl.a==left.a
						pxl = .AntiAlias(p, pxl)
					rz++
				// :O
				left = pxl
				pxl++
				below++
				p.x++
			p.y++
			p.x = 0
		rz /= where.size.area|float|		


struct RayTracerCulling
// for each division... we could get 3 points and find the "worst"? or perhaps theres always a worst point?
// fractal circle based. Options?:
	// * 9 levels, 0 == full, odd = within-quad, even = overlaps.
		// * save as 4 bits, so we get 4 bits per level... 6 levels then sort an array.
	// * Some screen-tree structure, with pointers, to do something similar?
		// * can be improved. No need draw object in entire overlapping quads. usually only two small quads!
		// * Put each object into tree individually??? OR put objs into "da curr level" of tree?
	// * we need some kinda linked-list and memory-management for it.

