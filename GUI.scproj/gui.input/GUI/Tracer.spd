

class RayTracer
	visible false
	|vec4|			Color
	|float|			Dist
	//
	|vec2|			Size
	|vec2|			Scale
	|vec2|			Adjust
	//
	|Vec3|			Dir
	|vec3|			iDir
	|Mat4|			_LookAt
	|[vobject]|		Shapes
	//
	visible true
	|Vec3|			Camera
	|float|			Pitch
	|float|			Spin
	//			|| M2 = lr.SinCos.RotateAroundY	
	
	constructor (|vec3| Camera)
		.Camera = Camera.MakeSane
		._LookAt.reset
	
	
	setter Camera (|vec3|)
		.Camera = Value.MakeSane
	
	
	helper ViewMat (|&mat4|)
		._LookAt.reset
		.spin = .spin.Fract
		.Pitch = .Pitch.fract
		|| M = .spin.SinCos.RotateAroundY
		._LookAt *= M
		return ._LookAt
	
	function MoveNicely (|vec3| P)
		.Camera += p * .ViewMat
	
			
	function AntiAlias (|vec2| XY, |&imagepixel| pxl, |&imagepixel|)
		|| ID = pxl.a
		|| C = pxl.Color
		for i in 4
			|| sh = (i&1, i>>1).Vec2 - 0.5
			c += .GetColor(XY + sh*0.75)
		C *= 5th
		C.a = ID|float|*255th
		pxl <~ C
		return pxl
	
	
	function GetColor (|vec2| XY, |vec4|)
		opt min 3, opt norefcounts
		.Color = nil
		.Dist = float.max
		XY = (xy + .adjust) * .scale
		.dir = (xy, 1.0).Normal * ._LookAt
		.idir = -1.0 / .dir
		
		for sp in .Shapes
			|| t = raytracer.SphereShape(sp, .Camera, .dir, .idir)
			|| tx = t.x
			if (tx > 0) and (tx < .Dist)
				.Dist = t.x
				|| P = .Camera + .dir*tx
				|| Norm = (P - sp.pos).normal
				|| C = (norm.abs * sp.Color.xyz)
				.color = (C, sp.shapeID|float|*255th)
		return .Color


	function RayTrace (|image| where, |float|)
		opt norefcounts,  opt min 3
		.size = where.size.vec2
		.scale = 1.0/.size.xx
		.adjust = .size * -0.5
		|| P = vec2()
		|| w = where.Width|float|
		|| h = where.Height|float|
		
		while p.y < h
			|| PY = (0, p.y|int|)
			|| pxl = where[PY]
			|| below = where[PY+(0,-1)]			
			|| Left = pxl
			while p.x < w
				pxl <~ .GetColor(P)
				if pxl.a!=left.a
					left = .AntiAlias(p-(1.0,0), left)
					pxl = .AntiAlias(p, pxl)
					rz++
				if pxl.a!=below.a
					below = .AntiAlias(p-(0,1.0), below)
					if pxl.a==left.a
						pxl = .AntiAlias(p, pxl)
					rz++
				// :O
				left = pxl
				pxl++
				below++
				p.x++
			p.y++
			p.x = 0
		rz /= where.size.area|float|		

	
	module
		function SphereShape (VObject.DistanceFunction)
			opt min 3
			|| L = .pos - orig
			|| t = L • dir
			if t > 0
				|| r = .Radius
				|| h = ((r*r) + (t*t) - (L • L) ).Sqrt
				return (t-h, t+h) // what about tca + h? or returning (tca,h)?
		
		
		function BoxShape (VObject.DistanceFunction)
			opt min 3
			
			orig -= .pos
			|| r = .Radius * .Proportion
					
			|| p0 = (orig - r) * idir
			|| p1 = (orig + r) * idir
			
			|| t1 = (P0 min P1).max
			|| t2 = (P0 max P1).min
			
			if t2 >= t1
				return (t1, t2)




class GridSection
	|...[512]|  Cells
	|uint64|    State
	|byte[4]|	Dimensions
	|object--?| Owner
	contains uint64
	constants
		CellMax = 512

	constructor
		(&.Dimensions)|&int|[] = 0
		.Fill(0)

	function Width (|int|)
		return .Dimensions[0]

	function Height (|int|)
		return .Dimensions[1]

	function Depth (|int|)
		return .Dimensions[2]

	function at (|uint| i=0, |&...|)
		if i < 512
			return .Cells[i]
		return Dummy
	
	function Fill (|uint64| V)
		|| C = .at
		for i in CellMax
			C[i] = v
	module
		|...| Dummy

