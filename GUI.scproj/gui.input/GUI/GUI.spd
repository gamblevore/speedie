

module GUI
	linkage
		cpp_part App
	|image|						Screen = image("read")
	|error|						ToolTip = error()
	|date|						OpenedFirst
	|GUIPasteEvent|				AppDocumentOpen
	|string|					LastSearch
	|uint|						EventCount

	visible false
	|SDL_Event|					Event
	|[string]|					PendingAlerts
	|array?|					DrawDrag = nil
	|&SDL_Window|				ScreenWindow
	|&SDL_Renderer|				Renderer
	|&SDL_Texture|				Raw
	|ivec2| 					NewSize
	|ivec2| 					CurrMouseXY
	|ivec2|						TryResizeLater

	|date|						DrawFinish
	|date|						FrameStart = 1
	|date|						FrameLastDelay = 1
	|byte|						DrawState
	|uint16|					DrawFrameLength

	|date|						BlurBackgroundStart
	|float|						Scale
	|bool|						MouseMoveInited
	|bool|						StartedProperly
	|date|						ForeGroundTime
	|bool|						FlashSelector
	|sdlactivity|				QuitReason
	|date|						FixScreenBug
	|date|						FastToolTipDate
	|date|						ChangeSelFlash
	|bool|						NeedMouseMove
	|bool|						AControlWasResized
	|bool|						TextInputEnabled
	|bool|						TextInputEnabledAtStart
	|byte|						TouchCount=3  // draw the first few frames always
											  // helps with startup events! at least on osx
	|byte|						SingleFrameNest
	|byte|						TouchFingersDown
	|byte|						CanDrag
	|byte|						ResizedCounter // for resize bug fix
	visible true
	
	cpp_wrapper SDL_Init				(|uint| c)
	cpp_wrapper SDL_Quit				()

	cpp_wrapper SDL_CreateWindow		(|cstring| title, |int| x, |int| y, |int| w, |int| h, |uint| flags, |?&SDL_Window|) 
	cpp_wrapper SDL_SetWindowTitle		(|&SDL_Window| win, |cstring| title) 
	cpp_wrapper SDL_GetWindowTitle		(|&SDL_Window| win, |cstring|) 
	cpp_wrapper SDL_RaiseWindow			(|&SDL_Window| win) 

///
	cpp_wrapper SDL_CaptureMouse		(|bool| state, |int|) 
	cpp_Wrapper SDL_GetMouseState		(|?&int| x, |?&int| y, |mousebutton|) 
	cpp_wrapper SDL_SetRelativeMouseMode (|bool| Relative)
	cpp_wrapper SDL_WarpMouseInWindow   (|&sdl_window| window, |int| x, |int| y)
	cpp_wrapper SDL_ShowCursor			(|int| show=-1, |int|)
	cpp_wrapper SDL_CreateCursor		(|&byte| data, |&byte| mask, |int| w, |int| h, |int| hot_x, |int| hot_y, |&SDL_Cursor|)
	cpp_wrapper SDL_SetCursor			(|&SDL_Cursor| Cursor)
///	

	cpp_Wrapper SDL_CreateRenderer		(|&SDL_Window| window, |int| index, |Uint| flags, |?&SDL_renderer|)

	cpp_Wrapper SDL_GetRendererOutputSize (|&SDL_Renderer| renderer, |&int| w, |&int| H, |int|)
	cpp_Wrapper SDL_CreateTexture		(|&SDL_Renderer| renderer, |Uint| format, |int| access, |int| w, |int| h, |&SDL_Texture|)
	cpp_Wrapper SDL_GL_GetDrawableSize	(|&SDL_Window| window, |&int| w, |&int| h)
	cpp_wrapper SDL_RenderCopy			(|&SDL_Renderer| renderer,  |&SDL_Texture| texture,  |?&SDL_Rect| srcrect, |&SDL_Rect| dstrect)
	cpp_Wrapper SDL_RenderPresent		(|&SDL_Renderer| renderer)
	cpp_wrapper SDL_EventState			(|int| event, |int| enable, |byte|)
	cpp_wrapper SDL_SetWindowPosition	(|&SDL_Window| w,  |int| x, |int| y)
	cpp_wrapper SDL_GetDisplayBounds	(|int| displayIndex, |&SDL_Rect| rect, |int|)
	cpp_wrapper SDL_SetWindowMaximumSize (|&SDL_Window| window, |int| max_w, |int| max_h)
	cpp_wrapper SDL_SetWindowMinimumSize (|&SDL_Window| window, |int| max_w, |int| max_h)
	cpp_Wrapper SDL_MaximizeWindow		(|&SDL_Window| window)
	cpp_wrapper SDL_SetWindowFullscreen	(|&SDL_Window| window, |int| Mode=0x1001, |int|)
	cpp_Wrapper SDL_RestoreWindow		(|&SDL_Window| window)
	cpp_wrapper SDL_GetWindowPosition	(|&SDL_Window| w,  |&int| x, |&int| y)
	cpp_wrapper SDL_GetWindowSize		(|&SDL_Window| w,  |&int| x, |&int| y)
	cpp_wrapper SDL_SetWindowSize		(|&SDL_Window| window, |int| w, |int| h, |int|)
	cpp_wrapper SDL_ResetKeyboard		()
	cpp_wrapper SDL_StartTextInput		()
	cpp_wrapper SDL_StopTextInput		()
	cpp_wrapper SDL_ShowSimpleMessageBox		(|int| Flags, |cstring| title, |cstring| msg, |?&SDL_Window| window)
	cpp_Wrapper JB_SDL_RemoveWindowBorder (|&nil| window)
	cpp_Wrapper JB_SDL_SetModified		(|&nil| window, |bool| b)
	cpp_wrapper JB_SDL_FullScreenToggle	(|&nil| w)
	cpp_Wrapper SDL_GetCurrentDisplayMode (|int| displayIndex, |&SDL_DisplayMode| mode, |errorint|)

	helper SDL_FullScreen (|&nil| w, |int| Mode=1)
		|| full = .isfullscreen
		if (mode == 0) or (!full and mode>0) or (full and mode<0)
			.JB_SDL_FullScreenToggle(w) // toggle is just for MacOSX
										// linux wants the real sdl_setfullscreen!!
		
	function DocumentOpened  (|bool|Clear=true, |String|)
		cpp_Wrapper JB_App__DocumentOpened
		

	helper InitDelegates
		cpp_Wrapper JB_App__InitStuff


	function ScreenSize (|ivec4|)
		cpp_Part GetScreen
		return (.ScreenOrig.vec4 / .scale).iVec4

	function NativeWindow (|&nil|)
		|SDL_SysWMinfo| data
		|| s = .ScreenWindow
			s.SDL_GetWindowWMInfo(data)
			return data.window|&nil|


	function Alert (|string| msg, |string| title="")
		cpp_part MsgBox
		visible
		SDL_ShowSimpleMessageBox(0, title.cstr, msg.cstr, nil)

	
	function SelChanged
		.FlashSelector = true
		.ChangeSelFlash = 1


	helper ScreenOrig (|ivec4|)
		|| P = .ScreenPosOrig
		return (p, p + .SizeOrig)


	helper SizeOrig (|ivec2|)
		|ivec2[1]| place
		|| s = .ScreenWindow
			|| p0 = (&place[0])|&int|
			.SDL_GetWindowSize(s,  p0,  p0+1)
			return place[0]


	helper SizeOrig (assigns:|ivec2|)
		|| p = .ScreenPosOrig
		|| r = (p, p + value)
		.ScreenOrig(r)


	function Title (|string|)
		|| s = .ScreenWindow
			return SDL_GetWindowTitle(s).Render


	function Title (assigns:|string|)
		|| s = .ScreenWindow
			SDL_SetWindowTitle(s, value.cstr)


	helper ScreenPosOrig (|ivec2|)
		|int[2]| place
		|| s = .ScreenWindow
			.SDL_GetWindowPosition(s,  place[0],  place[1])
			return (place[0], place[1])


	helper CenterCursor
		|| sz = .Sizeorig/2
		.SDL_WarpMouseInWindow(.screenwindow!, sz.x, sz.y)
		
	helper NukeCursor
		|| w = .ScreenWindow$
		|byte[1]| nothing
		|| g_cursor = SDL_CreateCursor(&nothing[0], &nothing[0], 1, 1, 0, 0)
		.CenterCursor
		SDL_SetCursor(g_cursor)
		.ShowCursor(false)
						

	function ShowCursor (|bool| v = true)
		SDL_ShowCursor(v|int|)


	function CursorVisible (|bool|)
		return SDL_ShowCursor()


	helper ScreenOrig (assigns:|ivec4| result, |bool|)
		require .ScreenWindow
		if (result.x <= 0) and (result.y <= 0)
			|| n = .NativeWindow
				.SDL_FullScreen(n)
			return true
		|| Old = .SizeOrig
		|| aligned = .scale * (1.0+.IsHighDPI)
		|| wh = result.size-1
		if aligned > 1.0
			 wh = wh align aligned|int|
		.SDL_SetWindowSize(.screenwindow!, wh.x, wh.y)
		if .SizeOrig != wh
			.TryResizeLater = wh
		if result.xy
			.SDL_SetWindowPosition(.ScreenWindow!, result.x, result.y)

		if old != .SizeOrig
			.NewSize = .SizeOrig
		return true
		
	
	function Touch (|guicontrol| modified=nil)
		modified.touch

	
	function Resized (|guicontrol| modified=nil)
		.AControlWasResized = true
		.Touch(modified)

	
	helper IsTyping (|bool|)
		return .event is TEXTINPUT or KEYDOWN
	
	
	function Run (|errorint|)
		target !gui
			disabled `Put "targets gui" in the app's conf section to use this!`

		expect (window.all.HasAny) "Create a window first, then call GUI.run"
			
		require .init
		app.ClearCaches
		|uint| n 
		while .SingleFrame
			if n++ isa 512
				app.ClearCaches //  :)
		.Terminate
		.sdl_quit
		
		rz = (!StdErr.OK)|int|
		if .SingleFrameNest > 0
			// we could get stuck in an inf-loop when they are trying to quit
			// besides... the calling code will be in an invalid state...
			// and can come from anywhere
			app.quit(rz)

	
	helper PostLoads
		opt norefcounts
		|| s = .TryResizeLater
			.TryResizeLater = nil // clear... in case of inf loop
			.SizeOrig = s

		for w in window.all
			if !w.PostLoaded
				w.PostLoaded = true
				w.__PostLoad__


	function MouseXY (|ivec2|)
		|| x = -1,  || y = -1
		|| err = SDL_GetMouseState(&x, &y)
		return (x,  y).sdlxy
		
		
	function MouseButtons (|Mousebutton|)
		return SDL_GetMouseState(nil, nil)

	
	constants
		SDL_PIXELFORMAT_ARGB8888 = 372645892
		SDL_PIXELFORMAT_RGBA8888 = 373694468
		SDL_PIXELFORMAT_ABGR8888 = 376840196
		ChosenPixelFormat = SDL_PIXELFORMAT_ABGR8888
		SDL_INIT_TIMER =			0x00000001
		SDL_INIT_AUDIO =			0x00000010
		SDL_INIT_VIDEO =			0x00000020  /** implies SDL_INIT_EVENTS */
		SDL_INIT_JOYSTICK =			0x00000200  /** implies SDL_INIT_EVENTS */
		SDL_INIT_HAPTIC =			0x00001000
		SDL_INIT_GAMECONTROLLER =	0x00002000  /** implies SDL_INIT_JOYSTICK */
		SDL_INIT_EVENTS =			0x00004000
		SDL_INIT_SENSOR =			0x00008000
		SDL_WINDOWPOS_CENTERED =	0x2FFF0000
		SDL_TEXTUREACCESS_STREAMING = 1
		SDL_WINDOW_RESIZABLE =		0x20
		SDL_WINDOW_ALLOW_HIGHDPI =	0x00002000


	helper InitSDL (|&nil|)
		expect (font.small) "SmallFont not loaded."
		// joystick works around a sdl2-bug
		SDL_Init(SDL_INIT_AUDIO ||| SDL_INIT_VIDEO ||| SDL_INIT_EVENTS ||| SDL_INIT_HAPTIC ||| SDL_INIT_JOYSTICK)

		|| DS = .CurrDisplaySize
		|| W = SDL_CreateWindow(.NiceAppName.cstr,
			SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, DS.x, DS.y, SDL_WINDOW_RESIZABLE ||| SDL_WINDOW_ALLOW_HIGHDPI) #expect "Can't init window"
		.screenwindow = w
		.SDL_SetWindowMaximumSize(w, 2K, 2K)
		.SDL_SetWindowMinimumSize(w,  400,  200)
		.vsync = true
		.renderer = SDL_CreateRenderer(w, -1, 0)  #expect  "Can't init renderer"
		return .NativeWindow


	function vsync (assigns:|bool|)
		// Lowers frame-rate. We'll need a better option to resyncing.
		// if we draw into our own buffer anyhow.
		|| v = ("1", "0")(value)
		.SetHint("SDL_RENDER_VSYNC".cstr, v.cstr)
	
	
	helper RemoveBorder
		|| n = .NativeWindow
			JB_SDL_RemoveWindowBorder(n)


	function SavePrefs
		if app._prefs
			app.prefs["screen"] = GUI.ScreenOrig.List
			app.PrefsSave


	function CurrDisplaySize (|ivec2|) // screensize
		// we call the monitor a "display"
		// and our SDL window we call it a "screen"
		// cos we have sub-windows. They can't both be windows
		|sdl_displaymode| mode = nil
		if SDL_GetCurrentDisplayMode(0, mode)
			return (mode.w, mode.h)


	helper IsHighDPI (|bool|)
		|int[2]| SmallPx
		|int[2]| BigPx
		SDL_GetWindowSize(.ScreenWindow!,  &BigPx[0],  &BigPx[1] )
		SDL_GL_GetDrawableSize( .screenwindow!,  &SmallPx[0],  &SmallPx[1] )
		|| s = SmallPx[0]
		|| b = BigPx[0]
		if s and b
			return s > b
	
	
	function IsFullScreen (assigns:|bool|)
		|| n = GUI.NativeWindow
			.SDL_FullScreen(n, (value<<1)-1)
		
	function IsFullScreen (|bool|)
		return .CurrDisplaySize.y <= .ScreenOrig.size.y
		
		
	helper BumpSize
		description "Fixes a MacOSX bug. Not my fault!" 
		.FixScreenBug = 0
		|| n = GUI.NativeWindow
			|| was = .IsFullScreen
			.SDL_FullScreen(n, -1)
			if was
				.SDL_FullScreen(n, 1)
	
	
	function Scaling (assigns:|float| scale)
		scale = scale.clamp(1.0, 8.0)
		|| v1 = .SizeOrig.vec2
		|| v2 = v1 / scale
		|| bigPx = v2.ivec2
		.Screen.sizeinfo = bigPx
		|| r = .Renderer
			.Raw = SDL_CreateTexture(r, ChosenPixelFormat, SDL_TEXTUREACCESS_STREAMING, bigPx.x, bigPx.y)
			.scale = Scale
			window.all.lastrect = bigPx.rect
		

	function GUICheck
		if app.yes("version")
			printline app.BuildConfig("version")
			app.quit
		if app.yes("created")
			printline __now__|date|.LocalTime
			app.quit
	
	function NiceAppName (|string|)
		opt norefcounts
		with app.BuildConfig("selfname")
			return it
		with app.BuildConfig("name")
			return it
		return app.appname
	
	
	function Init (|float| Scaling=1.0, |bool|) // startup
		opt norefcounts
		target !gui
			disabled `Put "targets gui" in the app's conf section to use this!`
		if .drawframelength
			return true
		.drawframelength = 60th.date // could try changing this to 61th?
		
		.GUICheck
		pico.GlobalConfig.SuicideIfParentDies = false
		pico.start
		.openedfirst = date.now
		.ForeGroundTime = .OpenedFirst
		.CurrMouseXY = ivec2(-1)

		AppMenu.GetAppMenu
		|| n = .InitSDL
		if !n
			gui.Alert("Unable to load SDL2", StdErr.LastError.name)
			return false
	
		.SDL_FullScreen(n, 1)
		scaling *= 2.0 - (0.5*.IsHighDPI)
		.Scaling = scaling
		.sdl_stoptextinput
		.FastToolTipDate = 1
		
		.CheckQuarantine
		¥.LoadDefaults

		.InitDelegates
		.ShowCursor(false)
		.StartedProperly = true
		return true
		
	
	helper SetHint (|cstring| name, |cstring| value)
		cpp_wrapper SDL_SetHint
	
	function IsBackground (|bool|)
		return !.ForeGroundTime
	
	helper TrySelectorFlash
		if !.IsBackground and (GUI.ChangeSelFlash.fired)
			.FlashSelector = !.FlashSelector
			.Touch
			if .ChangeSelFlash == 1
				.FlashSelector = true
			GUI.ChangeSelFlash = .FrameStart + 1s


	function ClearAlerts
		|| it = .PendingAlerts
			.PendingAlerts = []
			for s in it
				app.alert(s)


	function DialogIsOpen (|bool|)
		opt norefcounts
		return .FrontDialog


	function FrontDialog (|window|)
		opt norefcounts
		for w.reverse in window.all
			if w.IsDialog
				return w
	
	
	helper DoFakeMouseMove
		opt norefcounts
		.NeedMouseMove = false // noice
		|| w = .EventWindow
			.MouseMoveEvent(nil, w, .MouseXY)
	
	
	helper ActualEvents (|SDLActivity|) // frameevents
		while (.QuitReason isnt exitorterminate) and .Event.Poll
			.eventcount++
			rz |= .CheckEvent(.event)
			.Event.type = 0
		if .NeedMouseMove
			.DoFakeMouseMove
		|| Quitish = .QuitReason &~ SDLActivity.Activity
			rz = .StrongClose(Quitish) ||| SDLActivity.Activity 
		.QuitReason = 0
		.StartResize	// don't remove! causes delayed updates! resizes can happen here
						// and the next thing that happens is a draw!
		if .NewSize
			.TouchCount ?= 1
	
	
	function DroppingInto (|guicontrol|)
		opt norefcounts
		return __modules__.window.front.droppinginto?


	function UpdateTextFocus (|window| w)
		opt norefcounts
		|| f = w.realfocus
		|| AllowTyping = f and ((f is editable) or (f isa menu) or (f isa textview))
		if !f and (w is editable)
			AllowTyping = true	// allow type-through if the window is "editable". like to type secret codes in
		if (f isa textview)
			if (!f.SelRange.width) and f.inrange(f.selrange.x)
				GUI.TrySelectorFlash
		
		require .TextInputEnabled != AllowTyping
		.TextInputEnabled = AllowTyping
		if AllowTyping
			.sdl_starttextinput
		  else
			.sdl_stoptextinput
		
			
	function PreframeText (|window| W)
		.TextInputEnabledAtStart = .TextInputEnabled		
		if ListView.delayedItTill_.fired
			ListView.delayedItTill_ = 0
			|| lv = w.realfocus
			if lv isa ListView
				lv.TryDelayedEdit

	
	function OpenDocument (|string| path, |object|)
		require path
		|| d = .AppDocumentOpen
			|| f = path.file
			if f.exists
				rz = (d)(nil, nil, f.path, CopyPasteFlags.PasteFile)
	
	
	function HandleOpenFile
		|| d = .DocumentOpened$
		.OpenDocument(d)
		if .OpenedFirst.guiago < 3s
			.FixScreenBug = .FrameStart + 1s


	function OrderWindows (|window|)
		opt norefcounts
		|| i = 0
		for w in window.all
			if w is NewlyShown
				GUI.Resized(w)
				(w isnt newlyshown)
			if w is visible
				if rz
					w.position = i++
				rz = w
			  else
				w.position = -1
				window.all.first = w

		
	helper PreFrame (|sdlactivity|)
		opt norefcounts
		if .FixScreenBug.Fired
			.BumpSize
			rz = SDLActivity.activity
		
		while (|| err = stderr.pop)
			notifications <~ err
			beep
			rz = SDLActivity.activity

		.HandleOpenFile
		
		|| w = .OrderWindows
			.UpdateTextFocus(W)
			.PreFrameText(w)
			
			|| ed = w.inline
			if ed.needshide
				ed.clear

			if .CanDrag >= mousedragging.EvenIfNoMovement
				.touch
				w.DoMouseDrag(.MouseXY, true)
				rz = SDLActivity.activity
	
	
	function DoDrawDrag (|window| w)
		|| s = .drawdrag
		|| d = w.DroppingInto
		require s and d and d != w.currmousedown
		|| P	= .mousexy
		|| sigh	= P.grow((6,6))
		|| img = .Screen
		img.DrawCircleStyled(sigh, ¥.DragAndDrop, 0.0)
		sigh	= P.grow((10,10))
		img.DrawCircleStyled(sigh, ¥.DragAndDrop, 7.0)
		
		img.controlclip = sigh
		|| t	= s.length.Render
		|| x	= t.length*font.width
		|| h	= font.height
		|| P2	= (x, h)/2
		img.drawtext(t, P-P2, true)


	function DialogSorter (SorterComparerWindow)
		opt norefcounts
		if a and b
			return a.isdialog|int| - b.isdialog|int|


	function DrawWinFrom (|window|)
		opt norefcounts
		for w.reverse in window.all
			if w.isviewable and w.isfullscreen
				return w
		return window.all.first


	function StartResize
		opt norefcounts
		require .acontrolwasresized
		.acontrolwasresized = false
		.Touch
		for w.fast in __modules__.window.all
			w.reflow
		for w.fast in notifications.Alerts
			w.reflow(false)


	helper Window.Reflow (|bool| UsePrev = true, |ivec4|)
		opt norefcounts
		|| p = .parent ?? window.all
		|| D = GUI.Screen
		|| BigRect = d.rect
		|| rect = (0,0,0,0)
		|| b = .prev
		if b and UsePrev
			rect = b.lastrect
		return .reflowdoc(bigrect, rect, bigrect)

	
	function CheckTaskAnimations
		opt norefcounts
		
		for w in window.all
			for t in w.tasks
				if t is Animation
					|| p = t.taskprogress
					if p != t.prevprogress
						t.PrevProgress = p
						t.upon.touch(-1)

	
	function StartDraw
		opt norefcounts
		|| CanBlur = !app.prefs["noblur"]
		
		if !.DialogIsOpen
			.BlurBackgroundStart = 0
		
		.TouchCount = 0
		.DrawState = 2
		.StartFrame(.Raw!)

		|| w1 = .DrawWinFrom
		while w1
			if w1.IsViewable
				if w1.IsDialog
					if CanBlur: .Screen.Blur(.BGBlurAmount)
					CanBlur = false
				w1.DrawWindow(.Screen)
			w1 = w1.next as window // :O
		
		notifications.Draw
		.DoDrawDrag(window.front!)
		if app.prefs["beep"]
			beep // debug drawing!


	helper BGBlurAmount (|float|)
		.BlurBackgroundStart ?= gui.FrameStart
		|| Scale = 7.0
		|| ago = .BlurBackgroundStart.guiago.Float
		rz = ago*Scale*4.0
		if rz > Scale
			return scale
		GUI.Touch


	helper window.AnyFrameStepsNeeded (|ind|)
		|| Time = gui.FrameStart
		|| Within = Time & 0xFFFF
		|| Remain = ._FrameNext - Within
		if Remain <= 0
			if remain < -0.5s
				return -1
			return Within
		if Remain >= 0.5s			// wrapped
			return Within+1s


	helper window.FrameStepsAmount (|int|)
		|| Within = .AnyFrameStepsNeeded()		#require

		|| fps = .SimulationFPS|int|
		if fps < 10
			fps = (60, 10)(.Tasks.first)
			fps >>= gui.IsBackground
		
		|int| i = ._FrameNum
		if (i >= FPS)
			i = 0
		
		|duration| Next 
		while 
			next = (1s*(i+rz))/FPS
			loop next <= Within
			rz++

		._FrameNext = Next		
		i += rz
		while i > fps
			i -= fps
		._Framenum = i

		|| ST = gui.FrameStart
		if (._LastTimeSeen - ST).abs > 0.5s					// Computer paused, or clock changed.  Just do 1 frame.
			rz = 1
		._LastTimeSeen = ST
		

	helper window.DoFrameStep (|bool| ChangeOK)
		.RunWindowTasks(false)
		.FixFocus
		.FrameCount++
		.__FrameStep__(ChangeOK and !.OpenedMenu)
	
	
	helper DoSimulation
		opt norefcounts
		|| wf = Window.front$
		|| FrontIsDialog = .DialogIsOpen
		if FrontIsDialog or wf.AnyFrameStepsNeeded()
			keys.FlushKeys

		|| Got = 0
		for  w  in  window.all
			|| N = w.FrameStepsAmount()
			for n
				w.DoFrameStep(!FrontIsDialog)
				Got++

		if Got
			window.all.sort(DialogSorter|sortercomparer|)
			.StartResize

// ideally we remove the whole concept of sorting windows
// there is just one window... the main window.
// it might have subwindows, though? games have invnetories and settings and stuff
// maybe window.|[window]| SubWindows makes sense for games? kinda?
// settings would just be a dialog window.
// who knows? Also dialogs and the confirm window exist...

	function Cycle (|duration| length, |Duration| Adjust=0, |float|)
		opt inline
		return (.FrameStart+adjust).cycle(length)


	function Loop (|duration| length, |float|)
		opt inline
		return .FrameStart.loop(length)

	
	helper SingleFrame (|bool|)
		if .SingleFrameNest <= 2
			.SingleFrameNest++
			rz = .SingleFrameSub
			.SingleFrameNest--


	helper SingleFrameSub (|bool|)
		opt norefcounts
		|| EnoughTime = .DelayEvents
		if EnoughTime or SDL_Event.HasAny
			|| Occur = .HandleEvents
			require Occur isnt ExitOrTerminate
		
		.DoSimulation
		.CheckTaskAnimations
		.DrawState |= (.TouchCount != 0)
		
		// draw waiting could be improved. Could simulate instead of sleeping?
		// also drawtime could be variable...
		if .DrawState == 1
			.StartDraw
		if .DrawState & 2
			|| remain = .EndDraw
			// do we need to sleep if vsync is on?
//			if remain > 2
//				app.Sleep(remain)
		return true


	helper EndDraw (|duration|)
		// we could just draw immediately? but then delay the next drawstart?
		// perhaps 1-frame faster reaction on screen?
		|| d = date.now
		|uint64| ago = d - .DrawFinish				// super dooper unsigned clock saver
		rz = .DrawFrameLength - ago
		require rz < 128							// 512th of a second
		.DrawState &= ~2
		.DrawFinish = d
		.EndFrame(.Raw!)


	helper DelayEvents (|bool|)
		|| CanSleep = !SDL_Event.HasAny
		|| L = 256										// 256th of a second
		if .IsBackground and !.DroppingInto
			l = .DrawFrameLength*9

		|| d = date.now
		.framestart = d		

		|uint64| Ago = d - .FrameLastDelay				// Unsigned, in case the clock goes backwards
		|date| Remain = L - ago
		if Remain <= 0
			.FrameLastDelay = d
			return true

		if CanSleep
			app.Sleep(Remain)
	
	
	helper HandleEvents (|SDLActivity|)
		if .ForeGroundTime.GuiAgo < 0.1s
			keys.Reset
		.StartResize
		SpdProcess.CheckAllAlive
		rz = .PreFrame

		.ClearAlerts
		.HandleAppResize
		.PostLoads
		notifications.CheckForDisappear
		rz |= .ActualEvents


	helper CheckQuarantine
		if platform.osx and app.isQuarantined
			GUI.alert("Please drag this app to the /Applications/ folder to stop MacOSX quarantining it.", "Quarantine Warning" )


	helper ReScale (|float| NewScale, |bool|)
		if (NewScale >= 1.0 and NewScale <= 8.0)
			.scale = NewScale
			.NewSize = .SizeOrig
		  else
			beep
		return true
	
	
	helper HandleAppResize
		if !.NewSize
			if .ResizedCounter
				.ResizedCounter--
			return
		.ResizedCounter = 4
		
		|| r = .raw
			r.dispose
		|| v = (.NewSize.vec2/.Scale).ivec2
		.newsize = nil										// phew
		.Screen.size = v
		.Raw = SDL_CreateTexture(.renderer!, ChosenPixelFormat, SDL_TEXTUREACCESS_STREAMING, v.x, v.y)

		window.all.FullScreen = v
		.StartResize


	function StartFrame (|&SDL_Texture| T)
		opt norefcounts
		|| stride = 0
		|&nil| SDLBuff
		t.lockThatZerosEventhoughItShouldnt(nil, &sdlbuff, &stride)
		// could use SDL_UpdateTexture instead? use my own buffer! then
		// we don't need to lock/unlock, which uses 2x memory and DOESN'T
		// let me get access to the old buffer! might be faster too.
		.screen.UseExternalPointer(SDLBuff, .Screen.size.area, 4)
		
	
	function EndFrame (|&SDL_Texture| T)
		|SDL_Rect| dstrect
		SDL_GL_GetDrawableSize( .screenwindow!,  &dstrect.w,  &dstrect.h )
		t.UnlockThatCopiesEvenThoughItShouldnt
		// SDL_UpdateTexture(T, nil, &pixels, w*h*4);
		SDL_RenderCopy(.renderer!, T, nil, &dstrect)
		SDL_RenderPresent(.renderer!)


	function IsQuitting (|bool|)
		return .quitreason is ExitOrTerminate


	function Quit (|sdlactivity| Reason=0, |SDLActivity|)
		opt norefcounts
		reason |= sdlactivity.Exiting
		
		if reason isnt terminating
			for w in window.all
				if w.IsDialog
					require w.TryCloseDialog
				  else
					require !w.__CancelClose__(Reason)

		return .terminate


	function Terminate (|sdlactivity|)
		opt norefcounts
		.SavePrefs // in case we crash during quit
//		app.say "no"
		SDL_SetRelativeMouseMode(false) // helpful
		for w in window.all
			.quitreason = SDLActivity.Terminating // in case of wierd events
			w.close(SDLActivity.Terminating)
		.SavePrefs
		return SDLActivity.Terminating


	function FileDroppedIntoApp (|window| w, |string| path, |SDLEventType| t, |int|)
		|| p = (copypasteflags.pastefile, copypasteflags.pastetext)(t is dropfile)
		|| c = w[.MouseXY] ?? w
		c.DoPaste(path, p)
		w.DroppingInto = nil
		return SDLActivity.activity


	function AllowKeyDown (|&SDL_KeySym| Ev, |bool|)
		opt norefcounts
		if !.TextInputEnabledAtStart or ev.command
			return true
		|| k = ev.sym
		if k is tab or escape
			return true
		if k.iscmm or k.isscan
			return true
		if k.isaccept or k.isdelete
			return true


	function AllowTyping (|bool|)
		opt norefcounts
		return .TextInputEnabledAtStart and !keys.cmd
	
	
	function Window.MenuAt (|ivec2| xy, |bool| Test, |guicontrol|)
		opt norefcounts
		|| F = .openedmenu$
		if (!test) or (f.lastrect.horz contains xy.x)
			return f
	
	
	function Window.ControlOrMenuAt (|ivec2| xy, |bool| Test = true, |guicontrol|)
		opt norefcounts
		return .MenuAt(xy, test) ?? self[xy]


	function StandardKeys (|keys| key, |bool|)
		opt norefcounts
		|| w = __modules__.window.front						#require
		|| cmd = keys.cmd
		|| rf = w.realfocus
			if cmd
				if (key is g)
					if !rf.__Search__(GUI.lastsearch, false)
						beep
					return true
				if (key is f) and !(keys.shift or keys.option)
					return rf.OpenSearch
			  elseif (key is find or AC_SEARCH)
				return rf.OpenSearch

		|| gw = rf ?? w
		if cmd
			if (key is PLUS or EQUALS)
				return .Rescale(.scale+0.5)
			if (key is minus)
				return .Rescale(.scale-0.5)
			if (key is f) and keys.option
				|| n = .nativewindow
					.SDL_FullScreen(n)
				return true
			if (key is l) and keys.shift
				JB_Mem_ClassLeakCounter()
			if (key is squote)
				return w.DoListViewNext(true)
			if (key is semicolon)
				return w.DoListViewNext(false)
			if (key is d) and  keys.ctrl
				|| ov = w.MouseIsOver
					Notifications <~ ov.ContainedName
				  else
					beep
			
		  
		if (key is copy) or (cmd and key is c)
			|| wf = w._FocusAttempt
			if !rf and wf isa textview
				return wf.docopy
			return gw.DoCopy
		if (key is paste) or (cmd and key is v)
			return gw.DoPaste(clipboard.text)


	helper StrongClose (|sdlactivity| Reason, |SDLActivity|)
		opt norefcounts
		if Reason is Terminating
			return SDLActivity.Terminating // terminate will call windowclose anyhow
	
		if Reason isnt windowclose
			return .quit(reason)

		|| w = window.front
			if (reason is exiting) and w.IsMainWindow
				return GUI.AskQuit
			.quitreason = 0 // i guess?
			return w.close

		return reason
	
	
	helper BackgroundChanged (|bool| back, |int|)
		|| same = .IsBackground == back

//		if app.prefs["dev"].Yes // what is up with these *&(&@$ keys!??
//			|| msg = "unchanged." * same
//			|| dest = ("back", "fore")(back)
//			app.say "to $dest. $msg"
			
		require !same
		if back
			.ForeGroundTime = 0
		  else
			SDL_RaiseWindow(.ScreenWindow!) // work around crappy SDL/MacOSX event issues?
			.ForeGroundTime = gui.FrameStart

		beep.OK = 1		
		keys.Reset
		.FlashSelector = false
		if !.DialogIsOpen
			for w in __modules__.window.all
				w.__AppForegroundChanged__(!back)
		.touch
		return SDLActivity.activity


	helper EventWindow (|window--|)
		opt norefcounts
		return .FrontDialog ?? __modules__.window.front
	
	
	helper CheckEvent (|&SDL_Event| ev, |int|)
		visible, opt norefcounts
		|| t = ev.type
		 
		if t is APP_DIDENTERFOREGROUND or APP_DIDENTERBACKGROUND
			return .BackgroundChanged(t is APP_DIDENTERBACKGROUND)
		
		if  t is APP_TERMINATING
			.quitreason |= SDLActivity.ExitOrTerminate
			return sdlactivity.ExitOrTerminate
		
		if  t is QUIT // comes from cmd-w! this code is to block this bad SDL2 design.
			if !.Quitreason
				.Quitreason |= SDLActivity.Exiting
			return .Quitreason
		
		if  t is WINDOWEVENT
			return .windowevent(ev)

		|| w = .EventWindow
		require w // and w.parent // why would w.parent be nil?
				  // quitting the app during breakout in perry caused this, though
				  // need to trap this event...

		w.__Tickle__
		if T is dropbegin
			w.DroppingInto = w[.MouseXY] ?? w
			return SDLActivity.activity
		
		if t is DROPFILE or Droptext
			return .FileDroppedIntoApp(w, ev.drop.filestr, t)
		
		if t is DropComplete
			w.DroppingInto = nil
			return SDLActivity.activity

		if t is TEXTINPUT
			return .TextInputevent(ev, w)

		if t is KEYDOWN
			return .KeyDownEvent(ev, w)
					
		if t is KEYUP
			return .KeyUpEvent(ev)

		if t is MOUSEWHEEL
			return .MouseWheelEvent(ev,	w)

		|| b = ev.button
		if (b.button >= 4) and (t is mousedown)					// what about holding it?
			return w.DoListViewNext(b.button == 4)|int|			// assumes SDLActivity.activity == 1
	
		if t is MOUSEDOWN
			return .MouseDownEvent(w, b)

		if t is MULTIGESTURE
			require !.IsBackground
			return .GestureEvent(ev, w)

		|| xy = b.xy
		if t is MOUSEMOVE
			require !.IsBackground or w.DroppingInto
			return .MouseMoveEvent(ev.motion, w, xy)

		if t is MOUSEUP
			return .MouseUpEvent(w, xy, b.button)

	
	helper GestureEvent (|&SDL_Event| ev, |window| w, |int|)
		|| f = ev.Gesture
		|| rot = f.dTheta
		|| pinch = f.dDist
		|| mina = (π/180.0)|float|
		if rot.abs > mina or pinch.abs > 0.002
			return w.__Gesture__(nil, rot*math.itau, pinch)|int|
			
		
	helper WontCloseMainWindow (|window| w, |bool|)
		opt norefcounts
		if !w.ismainwindow
			return true
		for ww in window.all
			if (w != ww) and ww.ismainwindow
				return true
		if .AskQuit
			.quitreason |= sdlactivity.exiting
			
		
		
	helper WindowEvent (|&SDL_Event| ev, |int|)
		opt norefcounts
		|| wev = ev.window
		|| wt = wev.event
		if wt is CLOSE										// A request to close ANY window.
			|| w = window.front // should really be .frontvisible
			if !w
				return sdlactivity.exiting
								// or .front should only return visible windows...
			if !.WontCloseMainWindow(w)
				return 0
			.Quitreason |= SDLActivity.activity
			w.Close(SDLActivity.WindowClose)
			.Quitreason |= SDLActivity.activity
			return SDLActivity.activity
			
		if wt is RESIZED
			.NewSize = (wev.data1, wev.data2)
			return SDLActivity.activity
		
		if wt is FOCUS_GAINED
			return .BackgroundChanged(false)
		
		if wt is FOCUS_LOST
			return .BackgroundChanged(true)


	helper MouseUpEvent (|window| w, |ivec2| XY, |int| Button,  |int|)
		SDL_CaptureMouse(false)
		|| dd   = .drawdrag 
		|| di	= w.DroppingInto
			for c in dd
				di.dopaste(c, copypasteflags.pastefile)
		
		|| dow	= w.CurrMouseDown
		|| F	= w.openedmenu
		w.ClearDrops
		if !(di and dd) and (button == 3) and (dow != F) and f and (f contains xy)
			f.__rightclick__(xy)
		  elseif dow and (button!=3) and !ScrollInfo.JustClicked_
			dow.__MouseUp__(xy)
		ScrollInfo.JustClicked_ = false
		return SDLActivity.activity


	helper MouseMoveEvent (|?&SDL_MouseMotionEvent| ev, |window| w, |ivec2| XY, |int|)
		// shouldn't occur in background... unless we have a DragEvent?
		|| OldXY = .CurrMouseXY
		|ivec2| move
		if ev
			move = (ev.xrel, ev.yrel)
			.MouseMoveInited = true
		if !move
			move = xy - OldXY		#require
			if !.MouseMoveInited
				return SDLActivity.Activity				// or else we never get there

		|| MB = .MouseButtons
		require MB or !.IsBackground
		
		if OldXY.x < 0
			move = nil // some bug work around?
			
		.CurrMouseXY = xy
		if !w.SimulationFPS
			.ShowCursor
		if .EventCount isa 8
			|| contrain = w.SimulationFPS > 0
				.CenterCursor
			SDL_SetRelativeMouseMode(contrain)			// in case a window comes up or closes

		if (.CanDrag >= MouseDragging.Within) and (MB is left)
			w.DoMouseDrag(xy, .CanDrag >= MouseDragging.Beyond)
			return SDLActivity.activity
		
		|guicontrol--| PrevOver = w.MouseIsOver
		|guicontrol--| Over  = w.ControlOrMenuAt(Xy, false)

		w.MouseIsOver = Over
		|| Down = w.CurrMouseDown
		if !Down and over
			.SetToolTips(Over)
		
		if w.createddate.guiago > 0.01s
			if (PrevOver != nil and Over) and (Down == nil or PrevOver)
				PrevOver.__MouseMove__(xy, move, SDL_WindowEventID.leave)
							
			if (down == Over or nil)
				|| state = (SDL_WindowEventID.moved, SDL_WindowEventID.enter)(PrevOver == Over)
				if !over
					Over = w
				if Over.__MouseMove__(xy, move, state)
					rz = SDLActivity.activity


	helper TextInputEvent (|&SDL_Event| ev, |window| w, |int|)
		#!textinput!
		if .AllowTyping and .CanDrag <= mousedragging.Handled
			|| e = ev.Editing.str
			if w.__TypedString__(e)
				return SDLActivity.activity


	helper KeyUpEvent (|&SDL_Event| ev, |int|)
		keys.Removekey(ev.key.key), return sdlactivity.activity


	helper MouseWheelEvent (|&SDL_Event| ev, |window| w,  |int|)
		w.__gesture__(ev.wheel.xy*(1,-1), 0, 0)
		return sdlactivity.Activity
	
	
	helper KeyDownEvent (|&SDL_Event| ev, |window| w, |int|)
		#!keydown!
		if .ForeGroundTime.GuiAgo < 0.1s
			beep 
			Notifications <~ "oof"
			return SDLActivity.nothing
		if .CanDrag >= mousedragging.Within
			return SDLActivity.nothing

		|| kev = ev.keysym
		|| key = kev.sym
		
		if key.IsEaten
			return SDLActivity.nothing

		if (key is w) and (keys.cmd)
			// i think we could try eliminate this test.
			// later... I mean... send an event of same type that is already sent
			// so hopefully only 1 gets through?
			return 0
		beep.OK = 1
		
		keys.AddKey(key)
		if !w.openedmenu and !.AllowKeyDown(kev)
			return SDLActivity.nothing
		
		if (key isnt escape) or key.IsFirstFrame
			if .StandardKeys(key)
				return SDLActivity.activity
			if w.__keydown__(key)
				return SDLActivity.activity
		
		if (.SingleFrameNest < 2) and keys.escape.HeldKey(0.75s)
			keys.escape.eat
			return  AppMenu.show
		

	helper Window.GetUserAttention
		if !.Focus
			._FlashSelf |= 1
		._alphafader = gui.FrameStart
		beep
	
	
	helper MouseDownEvent (|window| w,  |&SDL_MouseButtonEvent| B,   |int|)
		|| xy = b.xy
		beep.OK = 1
		if notifications.Clickedat(xy)
			return SDLActivity.activity
			
		|| InsideWin = w.lastrect.soothe contains xy
		if !InsideWin and (w == .FrontDialog)
			if w.ClickOutsideCloses
				w.CloseDialog
				return SDLActivity.activity
			w.GetUserAttention
			return SDLActivity.nothing
		
		.candrag = nil

		|| foc = w.realFocus
			if foc.ClickOutsideCloses and !(foc contains xy)
				w.setfocus(nil)
				return SDLActivity.activity

		if w.MouseDownEvent(b.button, b.clicks, xy)
			.Touch
			return SDLActivity.activity
		
	
	helper Window.MouseDownEvent (|int| bn,  |int| clicks,  |ivec2| xy, |bool|)
		target osx
			|| Ctrl = keys.ctrl // only osx needs this
		  else
			|| ctrl = false
		|guicontrol--| clicked 
		if (bn == 3) or (Ctrl and bn == 1) 
			clicked = .ControlOrMenuAt(xy)
			clicked.__rightclick__(xy)?
		  else
			mousebutton.DownAt = gui.FrameStart
			clicked = .DoMouseDown(xy, clicks)
		.currmousedown = clicked
		return clicked


	function GuiControl.ContainedName (|string|)
		|| fs = FastString()
		fs <~ "Name: "
		while
			fs <~ .ID
			self = self.Parent
			loop self and !(self isa window)
			fs <~ " <~ "
		return fs
	
	
	function SetToolTips (|guicontrol?| r)
		opt norefcounts
		|| w = r.window
		require w and r and w.ToolTipControl != r
		w.ToolTipControl = r
		
		|| info = ""
		ifn r isa textview  and  r is editable
			info = r.Description
		|| delay = (0.0s, 1.5s)(!GUI.FastToolTipDate.fired)
		|| now = gui.FrameStart
		|| t = .tooltip
		if t.name and t.when.fired
			GUI.FastToolTipDate = now + 1s
		t.when = now + delay
		t.name = info


function guicontrol.Description (|string|)
	return .tooltip // :)
	
	
datatype SDLActivity (byte)
	flags
		|SDLActivity|
		Nothing = 0
		Activity
		WindowClose
		ExitOrTerminate = [Exiting, Terminating]
		StrongWindowClose = WindowClose+Exiting
	syntax is (|SDLActivity| act, |bool|)
		return self & act
	syntax is (|SDLActivity| act, assigns:|bool| value, |SDLActivity|)
		if value
			return self ||| act
		return self &~ act


function Duration.syntaxcall (|float|)
	return gui.loop(self)

// CVDisplayLink could be used to make vsyncing possible? Its a lot of per-platform work though.
// Linux/Win have their own alternatives.

//
//
//
//struct FPSCounter
//	|date|   Next
//	|int|  Amount
//
//	function Count (|string| name="")
//		.Amount++
//		|| now = date.now
//		require now >= .Next
//
//		now += 1s
//		if .Next
//			|| durr = now - .next
//			|| rate = .Amount|float| / durr.Float
//			|| fs = FastString()
//			fs <~ name
//			fs <~ " fps = "
//			fs.AppendFloat(rate)
//			fs <~ " : "
//			fs <~ .amount
//			.Amount = 1
//			|| s = fs.GetResult
//			log s
//			printline s
//		.next = now
//
//
//|FPSCounter| DrawStartCounter
//|FPSCounter| DrawEndCounter
//|FPSCounter| EventCounter
