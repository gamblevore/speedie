

class SpaceMap (memorylayer)
	constructor
		super.constructor(SpaceTree)
		.Use
		.root = spacetree()
	|SpaceTree| Root


class SpaceTree (list)
	contains SpaceChunk
	|SpaceChunk--[8]|		Segments
	|SpaceTree --[3]|		Neighbours
	// to go right:
		// if on the right, use neighbour[0]
		// if on the left, look at our parent and use our pos but one step left.
	
	// perhaps we should just make a linked list of ALL vobjects in a map?
	// then we can do all the moves+reinsertions first
	// then go over it AGAIN to do the hit-detection.
	// although thats not so great when we don't store the old position.
	// this loses us the ability to "Go back to the previous position" in case
	// a fast-moving object hits a wall.
	// unless those moves are done at the time anyhow?
	// and its just obj vs obj thats done secondly... 
	module
		|list of VObjectHolder| Holders


class SpaceChunk (list)
	|GridSection| Blocks
	contains VObject
	function Parent (|SpaceTree|)
		return super.parent|&nil||spacetree|


role VObjectHolder (list)
	// .obj will be the vobject
