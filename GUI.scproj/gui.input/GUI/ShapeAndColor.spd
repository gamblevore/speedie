

datatype RayInfo (vec4)
	default vec4(float.max, 0, 0, 0)
	module
		|| Miss = vec4(float.max, 0, 0, 0)
	
	operator Subtract (|rayinfo| R, |rayinfo|)
		// Analytic subtraction.
		if r.x==float.max or .x == float.max
			return self
		
		if r.x > .x // hit s first, so just use s.
			return self // might need to adjust the thickness, but do that later.
		
		|| r2 = r.x + r.y
		|| s2 =  .x +  .y
		
		if r2 >= s2
			return Miss		// cut right through
	
		.x = r2 max .x					// nice!
		.w = .w max r.w					// material fixs
		return self
	
	
	operator Add (|rayinfo| R, |rayinfo|)
		.x = .x min r.x

		|| r1 = r.x
		|| r2 = r1 + r.y
		|| s1 = .x
		|| s2 = s1 + .y
		|| extra = 0.0
/*		if r1 >= s2 or r2 <= s1 // beyond, just add
			extra = r.y
		  elseif r1 < s2 and r1 > s1 // start inside
			extra = r2 - s2
		  elseif r2 < s2 and r2 > s1 // end inside
			extra = s1 - r1

		if extra > 0
			.y += extra
		*/
		.y = .y max r.y
		.w = .w max r.w
		return self
	
	function vec4.syntaxcast (|rayinfo|)
		return self|rayinfo|


module VShapes
// https://www.youtube.com/watch?v=aNR4n0i2ZlM // a heart shape?

	function OpSmooth (|float| a, |float| b, |float| k=0.125, |float|)
	    k *= 4.0
	    || h = ( k-(a-b).length max 0.0 ) / k
	    return (a min b) - h*h*k*0.25
	

	function OpRepLim (|vec3| p, |float| spacing, |vec3| lima, |vec3| limb, |vec3|)
	    return p - spacing*((p / spacing).round.clamp(lima, limb)) // from inigo. Doesnt quite work yet?
	
	// this is just not my thing lol.
	// i dont konw how to do it.
	function Heart (DistanceFunction)
		p.w *= 0.5
		p.y += gui.Cycle(5s, (.id.hash&255)*2s)*0.5
		if hit
			return PlasticBall(self, ray, p, hit)
		
		
		|| r = .Radius.x * p.w
		|| L = P - .Pos
//		L.Z *= 1.01
//		|| sq = (2.0, 1.0, 1.0)
		
		l.x = l.x.length
		|| r2 = r * 0.75
		if l.x < r2 and l.y < 0
			l.x = 0
		  else 
			l.x -= r2
		if l.y < 0
			l.x = (l.x - l.y)
		|| d = L.Length - r
		
		
		return (D, 0, 0, 0)
		
		
	function Sphere (DistanceFunction)
		opt min 3
		if Hit
			return NormalColor(self, ray, p, Hit)
		|| L = .Pos - P
		|| r = .Radius.x * p.w
		if ray
			|| t = L • Ray._CamDir
			if t > 0
				|| h = (r*r) + (t*t) - (L • L)
				if h >= 0
					h = h.Sqrt
					return (t-h, h*2, 0, 0)
			return rayinfo.miss
		return vec4(L.Length-r, 0, 0, 0) // for SDF operations


	function Debug (DistanceFunction)
		p.w *= 0.5
		if Hit
			return NormalColor(self, ray, p, Hit)
		if Keys.k[]
			return Box(self, ray, p)
		if Keys.l[]
			p.w *= 1.1
			return Sphere(self, ray, p)

		// Seems CPU-side SDFs are impossible to do fast.
		// At least using SDF-like techniques
		// We need to stay purely analytical right now.
		// Until we can upload speedie code to a GPU.
		
		rz = Box(self, ray, p)
		
		p.w *= 1.2
		rz = rz subtract Sphere(self, ray, p)


	function PhotoMetricR0 (|float| n2, |float| n1, |float|)
		return ((n1-n2)/(n1+n2)).pow2
	
    function PhotoMetricR0 (|float| n2, |float|)
        cpp_Part PhotoMetricAir
        return ((1.0-n2)/(1.0+n2)).pow2
	
	
	function PhotoMetric (|float| R0, |float| dot, |float|)
		|| s = 1.0 - dot // improved schlick equation...
						 // no idea how to use it.
		return r0 + (s - R0) * s.pow4
	
	
	function PlasticBall (DistanceFunction)
		if !Hit or !ray
			return Sphere(self, ray, p)
		return plasticColor(self, ray, p, hit)
		

	function PlasticColor (ColorFunction)
		|| Flux = 4.0
		|| Normal = (P - .Pos).Normal

	    || Kd = 0.072
	    || Ks = 0.04
		|| dir = ray._camdir
		
							// Diffuse
		|| LightDir = ray.MainLight
        || Light = kd * Flux * ((Normal • lightDir).pow2 + 1.3)

        if 1				// Phong
			|| R = LightDir.reflect(Normal)
			light += ks * Flux * (((R • dir) max 0.0).pow8)

		  elseif 0			// Schlick
			|| r0 = PhotoMetricR0(1.5)
			light += ks*PhotoMetric(r0, Normal • -lightDir) // doesnt look right

		  else				// Blinn-phong
			|| NdotH = (normal • -ray._halfway).clamp // can't get this to work... sadly.
			|| SpecularIntensity = NdotH.pow8
			light += ks * Flux * SpecularIntensity*10
		
		rz = light * .Color
		rz.a = .Color.a
	
	
	function CloudColor (ColorFunction)
		// clouds aren't like this, they are more like aura-bulbs
		// with particles that drift off them randomly

		|| r = .Radius.x * p.w
		|| Y = 0.15 * (hit.y+0.01) / r
		|| Str = (0.75 + y).Clamp
		|| ss = (0.4 + y).Clamp
		return vec4(ss, Str) * .Color


	function CloudBubble (DistanceFunction)
		p.w *= 0.5
		p.y+=gui.Cycle(5s, (.id.hash&255)*2s)*0.5
		if hit
			return cloudcolor(self, ray, p, hit)
			
		|| r = .Radius.x * p.w
		return Sphere(self, ray, p + (0,0,r)) add Sphere(self, ray, p - (0,r,0)) add Sphere(self, ray, p + (r,0,0))
	


	function Box (DistanceFunction)
		opt min 3
		if hit
			return NormalColor(self, ray, p, hit)
		|| orig = P - .Pos
		|| r = .Radius * p.w
		if ray
			|| idir = ray._iDir
			
			|| p0 = (orig - r) * idir
			|| p1 = (orig + r) * idir
			
			|| PP = P0 max P1
			|| PM = P0 min P1
			|| t1 = PM.max
			|| t2 = PP.min
			
			if t2 >= t1
				return (t1, t2-t1, 0, 0)
			return rayinfo.miss

		|| P3 = orig.abs - R  max 0
		return (P3.length, 0, 0, 0)


	function NormalColor (ColorFunction)
		|| Norm = (P - .Pos).normal.abs		// Spherical color
		return (norm, 1.0) * .Color
	
	
	function FudgeBlock (DistanceFunction)
		if !Hit
			return box(self, ray, P, hit)
		return IceFudgeColor(self, ray, P, hit)
	
		
	function IceFudgeColor (ColorFunction)
		|| Norm = (P - .Pos).normal
		|| y = Norm.y.uncos
		|| x = Norm.z.length.untan(Norm.x)
		|| str = 8.0
		|| spd = 30s
		|| grid = ((((x+y + gui.Cycle(spd))*str).fract - 0.5)*str).clamp*0.125 + 0.875
		return (grid, grid, grid, 1.0)*.Color

	function Black (ColorFunction)
	
	function Rainbows (ColorFunction)
		|| r = 0.0
//		|| r = ray.Rotation.x*300 // can't quite get this right.
		return Colors.Rainbow(hit.x+r, 1, 0.5)
	

prototype ColorFunction (|vobject| self, |raytracer| Ray, |vec3| P, |rayinfo| Hit=vec4(), |rayinfo|)
prototype DistanceFunction (|vobject| self, |raytracer?| Ray, |vec3| P, |rayinfo| Hit=vec4(), |rayinfo|)
	description "
x: dist
y: thickness
z: reserved
w: material-info

If y == 0, then an SDF-engine is used to call this again until its good enough.
"
	function New (|vec3| Pos, |vec3| Radius, |vec4| color=vec4(1),   |vobject|)
		return VObject(pos, radius, self, color)
	function New (|vec3| Pos, |float| Radius, |vec4| color=vec4(1),   |vobject|)
		cpp_part NewSphere
		return VObject(pos, vec3(radius), self, color)

