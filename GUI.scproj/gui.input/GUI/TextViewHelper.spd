

datatype TextLineFlags (uint16)
	flags
		// Error
		BreakPoint
		Colored
		Found
		CurrFound
		Last
		AvoidLastChar
		FakeMsg
//		Selected


class TextViewLine (list)
	linkage
		cpp_part Line
	contains TextViewLine

	|string|				Text
	|message?|				Message
	|Error?|				LineError
	|int|					MsgPos
	|int|					vline
	|int|					tline
	|TextLineFlags|			State

	constructor (|int| p=0)
		.position = p
	
	render
		if !.parent
			for c in self
				c.render(fs)
				fs <~ '\n'
		  else
			fs <~ "${.position}: "
			fs <~ '"'
			fs.appendescape(.text)
			fs <~ '"'

	helper ClearForPrepare
		.message = nil
		.state = nil
		.lineerror = nil
		.text = ""

	helper textview.BackHasIgnoringSpaces (|string| name, |int| pos, |codepoint|)
		while --pos >= 0
			|| t = .text[pos]
			if t != ' ' and '\t'
				if rz
					return t
				pos -= name.length - 1
				require .Text[pos, name]
				rz = '\n'
				
		
	function DrawRange (|ivec2|)
		|| p = .position
		|| L = .text.length
		return (P, P+L)
		

	operator contains (|ind| b, |bool|)
		|| d = .drawrange
		if self isnt last
			d.x2 -= 1 
		return d contains b

	syntax is (|TextLineFlags| F, |bool|)
		return .state&F
	
	syntax is (|TextLineFlags|F, assigns:|bool|)
		if value
			.state |= f
		  else
			.state &= ~F

	function XOfChar (|ind| Pos, |int|)
		return .SquaresAtByte(pos) * font.width

	
	function SquaresAtByte (|ind| B, |int|)
		b -= .position
		require b > 0
		
		|| StrEnd = b + .text.addr
		for (c.CodePoints in .text) (after)
			if c == '\t'
				rz += rz.tabswidth
			  else
				rz++
			if after >= Strend
				exit

	
	function After (|int|)
		return .position + .text.length


	function ByteOfX (|int| X, |ind|)
		|| chars	= (x max 0) / font.width
		|| bytes	= .text.CountBytesInSquares(chars) min .text.length
		return bytes + .position
	

	helper message.addpos (|int| p)
		opt norefcounts
		for ch.flat in self: ch.position += p


	helper Colorise (|message| msg, |bool| ParsedOK, |message|)
		.msgpos = -1
		.message = nil
		isnt fakemsg

		if msg
			return .ColoriseSub(msg)

		require !parsedok

		|| r = .text.ParseWithError(nil)
			.msgpos = .position
			r.addpos(.position)
			.ColoriseSub(r)
			is fakemsg
	
	
//	function @textviewline.FindLeak ()
//		|| h = WhoLeakedme
//			|| r = []
//			JB_FindLeakedObject(r, r)
//			if r
//				printline r
//				debugger

	
	helper range (|intrange|)
		return (.position, .after)

	
	helper EmptyLine (|bool|)
		require self
		return (.text.length == 1) and .text[0].istextline


	helper ColoriseSub (|message| srch, |message|)
		opt norefcounts
		rz = .ColoriseSub2(srch)
		|| r = rz
		if !r or r.startsafter(.range)
			r = srch
			while r
				r = r.parent
				if (r == @arg) and r.StartsBefore(.range)
					rz?=r
					exit
		
		if r and !r.startsafter(.range)
			(self is breakpoint) = r is breakpoint
			.msgpos = .position // isn't it r.position?
			.message = r
		  else
			isnt breakpoint
			
		
	helper ColoriseSub2 (|message| srch, |message|)
		opt norefcounts
		|| r	= .range
		while srch.EndsBefore(r)
			|| p = srch
			srch = srch.flatnext
			if !srch
				require p==@arg
				return p
			
		if srch.StartsAfter(r)							// AFTER
			return srch
			
		while srch.startsbefore(R) and srch.iscontainer
			|| nxt = srch.flatnext #loop
			if nxt.StartsAfter(r)
				exit
			srch = nxt									// what about...
		
		return srch


	helper message.NextColor (|int| s, |message|)
		opt norefcounts
		|| nxt = self
		rz = nxt
		|| LastAfter = nxt.after
		while nxt
			|| curr = nxt
			nxt	= nxt.flatnext
			if curr.after <= s					// too far back
				if curr.after > lastafter
					LastAfter = curr.after
					rz = curr
				continue						// go next

			|| cp	= curr.position
			if (cp <= s)
				rz = curr
			  elseif !nxt or nxt.position > cp
				exit

			|| par	= curr.parent				// special coloring
			if par and par.contains(s, true)
				|| pt = par.func
				if pt == @type
					return par
				if !curr.prev
					if (pt == @decl) or (pt == @func and curr == @thg) 
						return par


	function Ends (|bool|)
		return .endswithline or self is last
		
		
	function EndsWithLine (|bool|)
		return .text.EndsWithLine


	function DrawSelSub (|image| where,  |ivec2| R,  |textview| parent,  |int| vline,  |drawstyle| g)
		opt min 3
		|| M = .DrawRange
		require (r.x <= m.x2) and (r.x2 >= m.x)
		|| Start  = .SquaresAtByte(R.x1 max M.x1)
		|| Finish = .SquaresAtByte(R.x2 min M.x2)
		require Finish > Start
		
		|| Y = parent.lasttop - (vline+1) * parent.lineheight
		|| X = parent.TextLeft
		|| n = font.Width
		x += n - 2

		|| sel = (x+start*N,  y,  x+finish*N,  y+parent.lineheight)
		sel.x -= (Start == 0)
		sel.x--
		
		|| LinePos = r.x2-(1+m.x1)
		if (.text[linepos].IsTextline) or (r.x2 > m.x2)
			sel.x2 = parent.right-1
		  elseif r.x2==m.x2
			sel.x2++

		Where.DrawRectStyled(sel, g)


	function SetLineNum (|int| t, |int|)
		.tline = t
		return t + .endswithline

	
	function TrySetError (|error| e, |bool|)
		opt norefcounts
		|| old = .LineError
			e.when = old.when
		.LineError = e
		e.Obj = self
		return e == old


	function InitDefaults (|textview| parent, |int| t, |int|)
		opt norefcounts
		|| e = parent.MyError
			if (self contains e.position) and (!e.obj) 
				e.obj = self
				.LineError = e
		if parent.ParsedMessage
			is colored
		return .SetLineNum(t)


	function TakeEntireText (|string| txt, |ind| p, |ind|)
		.Text = txt[p, int.max]
		(self is AvoidLastChar) = .EndsWithLine
		is last
	
	
	function FindWhereLineBreaks (|string| txt, |int| MaxWidth, |bool| IsInline, |ind| p, |ind|)
		.position = p
		if .vline > 1000K
			return .TakeEntireText(txt, p)					// just give up wrapping

		if p >= txt.length // edge case.
			.Text = ""
			is last
			return -1

		|| i = txt.WrapSub(MaxWidth, IsInline, p)
		.Text = txt[p, i]
		(self is AvoidLastChar) = .EndsWithLine
		if (i >= txt.length) and !.EndsWithLine
			is last
			return -1
		isnt last
		return i


	
helper textview.DrawError (|image| Where, |int| y, |TextViewLine| D)
	opt norefcounts
	|| e = d.LineError$
	if (e is parse) and .ParsedMessage			// obviously it parsed ok.
		d.LineError = nil
		return
	|| r = .lastrect
	y++
	r.y	= y
	r.y2 = y + .lineheight
	|| lm= 0.225
	|| v = (1.0, 0.1, 0.1, lm)
	if e == .myerror
		v = (1.0, 0.15, 0.1, 0.22)
	|| sc = e.Severity.color // why not use this?
	if e.severity == errorseverity.ok
		v = (0.6, 0.6, 0.6, 0.25)
	  elseif e.severity == errorseverity.problem
		v.g = v.r*0.5
		v.a = v.a*0.5
	  elseif e.severity < errorseverity.problem
		v = (0.6, 0.6, 0.1, 0.1)

	if d contains .sel1
		.myerror = e
	if e is parse
		|| Alpa = (e.when.guiago.float - 1.0) * lm
		if (Alpa <= lm)
			GUI.touch(Self)
		v.a = alpa min lm
	where.DrawRect(r, v.px)


//helper textview.DrawFound (|image| Where, |int| y, |TextViewLine| D)
//	opt norefcounts
//	|| r = .lastrect
//	r.y	= y
//	r.y2 = y + 2
//	|| add = (0.15, 0.0)(d is currfound)
//	|| v = (0.6+Add, 0.5+Add, 0.1+Add, 0.4).px
//	where.DrawRect(r, v)


helper textview.DrawLighter (|image| Where, |int| y)
	|| r	= .lastrect
	r.y		= y + 1
	r.y2	= y + .lineheight + 1
	|| col	= (1.0, 1.0, 1.0, 0.06).px
	where.DrawRect(r, col)


helper TextView.DrawLineNumber (|image| Where,  |TextViewLine| D,  |int| y,  |imagepixel| lc,  |int|)
	opt norefcounts
	|| x = .DrawOneStartLine(d.text) 
	|| big		    = .LineNumWidth
		|| P		= (x-3, y)
		|| shift	= big - d.tline.LineNumWidth
		|byte[8]|   buff
		for i in 8
			buff[i] = '0'
		d.tline.render(&Buff[shift], 8-shift)
		if d.tline != (d.prev.tline?)
			|| draw	= false
			for i in 8
				|| c = buff[i] #loop
				if c != '0'
					draw = true
				if draw
					p.x = font.small!.DrawChar(c, Where, p, lc)
		x += big * font.width
	if .Alignment is right and .Alignment isnt left
		|| m = d.text.Bounds.x*font.width+8
		|| w = .width
		x += w - m
	return x


helper TextView.UseColorAnyway (|int|)
	ifn .isinline
		if .ParsedMessage// or .myerror
			return 2
		return 3


helper TextView.DrawOneLine (|image| Where, |TextViewLine| D, |int| y, |int| usecol, |imagepixel| lc)
	opt norefcounts
	opt min 3
	|| GoUp = (7 - .lineheight)/2
	if d.LineError
		if .myerror 
			.drawerror(where, y+GoUp, d)
		  else
			d.LineError = nil // sigh. crappy bug fix

	if .CanDrawLight(d)				// linelight
		lc.r += 80
		lc.g += 80
		lc.b += 80
		.DrawLighter(where, y+GoUp)

	|| x	 = .DrawLineNumber(where, d, y, lc)-1
	|| state = MsgTextDrawState(x, d)
	|| NoDrawFirst = self is CodeEditor and d is breakpoint
		state.font.DrawChar('\18', Where, (x, y), nil)
	
	|codepoint| Prev
	|| xlimit = .lastrect.x2
	for (c.CodePoints2 in state.t) (pos)
		x = state.next(c, pos)
		if x > xlimit
			exit
		ifn useCol & 2
			UseCol = (d is colored)|int|
		|| col = Â¥.GetColor(state.msg, usecol, pos)
		if d.LineError and c == 9 and prev == 32 
			c = -c
		if NoDrawFirst and !c.IsWhite
			NoDrawFirst = false
		  elseif !NoDrawFirst
			state.font.DrawChar(c, Where, (x, y), col, 1)
		prev = c
	
	if .AutoLim(d)
		if d.islast // last line draw too early with autocomplete
			x += font.width // but we shouldn't need this!
		.DrawAuto(Where, d, x, y)


helper TextView.AutoLim (|textviewline| d, |bool|)
	if .CanAutoComplete and .AutoCompleteString
		|| after = d.after
		if d is last
			after++ // ??
		if (.Sel1 == after-1)  and  (d.Ends)
			return true


helper TextView.FakeAutoComplete (|int|)
	|| n = .autocompleteback
	if .autocompletestring=="" or .autocompletestring.length == n
		return -1
	return n


helper TextView.DrawAuto (|image| where, |textviewline| d, |int| x, |int| y)
	|| n = .FakeAutoComplete
	|| str = (.autocompletestring[n, int.max], "...")(n>=0)
	|| fs = font.small
		fs.drawtext(str, where, (x,y), colors.white(0.3))
	


struct MsgTextDrawState
	linkage: cpp_Part msc
	|int|					i
	|int|					x
	|int|					Adder
	|message--?|			msg
	|string--|				t
	|image--|				font
	
	function Next (|&codepoint| pc, |&int| ppos, |int|)
		opt norefcounts
		|| c = pc[]
		|| w = (1, .i.tabsWidth)(c != '\t')
		rz   = .x
		.x   = rz + w*font.width
		.i  += w
		|| m = .msg
			|| pos	= ppos[]
			pc[]	= c.ImproveDraw(.t, pos)
			pos	   += .adder, ppos[] = pos
			.msg	= m.NextColor(pos)
			
		
	module
		function New (|int| x, |textviewline| d, |MsgTextDrawState|)
			rz.i = 0
			rz.x = x
			rz.adder = d.msgpos
			rz.msg = d.message
			rz.t = d.text
			rz.font = font.small!


helper codepoint.ImproveDraw (|string| t, |int|pos, |codepoint|)
	if self == '!'
		if t[pos+1] == '='
			return 130
	  elseif self == '='
		if t[pos-1] == '!'
			return 131
	  elseif self == '<'
		if t[pos+1] == '~'
			return 132
	  elseif self == '~'
		if t[pos-1] == '<'
			return 133
	return self


function int.LineNumWidth (|int|)
	opt norefcounts
	|| l = self
	if l < 100 // 2 min
		return 2
	if l < 1000
		return 3
	if l < 10000
		return 4
	return 5


function string.TextLineCount (|int|)
	|| a = 0
	|| b = 0
	for c in self
		a += c == 10 // faster
		b += c == 13
	return a + b


helper string.CountBytesInSquares (|int| Remain, |int|)
	|| n = .length
	|| i = 0
	require remain > 0 and n > 0
	for (c.codepoints in self) (After)
		if c == '\t'
			i += i.tabswidth
		  else
			i++
		if i >= remain
			return (after - .addr)|int|
	return .length


function TextView.DrawOneStartLine (|string| txt, |int|)
	|| s = .lastrect
	|| b = font.width
	|| x = s.x1 + b
	if .Alignment is Horizontal
		|| W = (txt.length) * font.width
		x += (s.width - W)/2
	return x


helper string.HasWord (|string| s, |ind| i = 0, |bool|)
	return self[i, s]  and  self[s.length].iswhite


extend message
	function EndsBefore (|intrange| r, |bool|)
		return .after <= r.x
	function StartsAfter (|intrange| r, |bool|)
		return .position >= r.x2
	function StartsBefore (|intrange| r, |bool|)
		return .position < r.x
		
	
	
function Textviewline.ReclaimStart (|int| p, |textviewline|)
	opt norefcounts
	rz = self
	while
		if rz.after > p
			return rz 
		rz = rz.next #loop


function Textviewline.ReclaimEnd (|int| T, |int| dp, |textviewline|)
	opt norefcounts
	|| v  = .vline
	
	while
		self = .next #loop
		.position += dp
		T = .setlinenum(T)
		.vline = ++v
	return self


function message.FlatRange (|intrange|)
	opt norefcounts
	rz = (int.max, 0)
	for ch.flat in self
		|| ss = ch.range
		if ss.x >= 0
			rz.x = rz.x min ss.x
			rz.x2 = rz.x2 max ss.x2



