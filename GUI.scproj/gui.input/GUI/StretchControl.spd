

role StretchControl (GuiControl)
	contains stretchdivider
	linkage
		cpp_part SC
	
	helper Add (|string| name)
		|| rz = guicontrol(self)
		rz.ID = name
		
	setter IsCollapsed (|bool|)
		opt norefcounts
		.div.setcollapsed(false, value)
	
	function IsCollapsed (|bool|)
		opt norefcounts
		return !.div.ActiveEnd.length
		
	function IsOpen (|bool|)
		opt norefcounts
		return !.IsCollapsed()
		
	function Reset
		opt norefcounts
		.div.ActiveEnd = .div.start

	function Collapse (|bool| soft = false)
		opt norefcounts
		.div.Collapse(soft)
	
	function AddHigh (|guicontrol| G)
		opt norefcounts
		.div.high <~ g
		
    function AddLeft (|guicontrol| G)
        .AddLow(g)

    function AddRight (|guicontrol| G)
        .AddHigh(g)
        
	function AddLow (|guicontrol| G)
		opt norefcounts
		.div.low <~ g

	helper div (|stretchdivider!|)
		return .last|stretchdivider|!
	
	function Show 
		opt norefcounts
		.div.show
		
	module
		function Horz (|guicontrol| p, |controlpoint| start, |int| min=0, |int| max=0, |stretchcontrol|)
			return .Build(p, start, min, max, 0)

		function Vert (|guicontrol| p, |controlpoint| start, |int| min=0, |int| max=0, |stretchcontrol|)
			return .Build(p, start, min, max, 1)

		function Build (|guicontrol| p, |controlpoint| start, |int| min, |int| max, |int| d, |stretchcontrol|)
			cpp_part It
			|StretchControl| sG    = StretchControl(p)
			sG.add(("bottom", "left" )(d))
			sG.add(("top",    "right")(d))
			|| SD   = stretchdivider(sG, d) 
			SD.start= start
			SD.min  = min
			SD.max  = max
			sd.InitGroup
			return sG



class StretchDivider (GuiControl)
	linkage:cpp_part Div
	|guiAction?|				OnHide 
	|guiAction?|				OnShow
	|guiAction?|				OnStretch
	|int|						Min
	|int|						Max
	|controlpoint|				Start
	|date|						Entered
	|int|						d
	|float|						DefaultFraction


	constructor (|guicontrol| p,  |int| d)
		super.constructor(p)
		isnt drawsfocus
		.d = d
		.DefaultFraction = 0.333
		.takesfocus = 0
		.gnormal.solid = (0.65, 0.75, 0.0, 1.0)

	
	function InitGroup
		opt norefcounts
		cpp_part SSST
		.id = "stretch"
		|| A = .low!
		|| C = .high!
		|| s = .start
		if A == "left" // noice
			|| H = the~height
			A.size = the~left to s		by  H
			C.size = the~rest			by  H
		  else
			|| W = the~width
					 // down/up controls split by horz-line
			A.size = W  by  the~bottom	to  s
			C.size = W  by  the~rest
		.initdiv


	function InitDiv	
		|| W = 3~before  for 6
		if .collapsed
			W = 0~before for 4
		|| H = W
		if .d
			W = the~width
		  else
			H = the~height
		.size = W by H
		(.OnStretch)(self)?

	behaviour Resized
		.InTest(GUI.mousexy, true)
		

	function Collapsed (|bool|)
		return !.ActiveEnd.length


	function Collapse (|bool| soft = false)
		opt norefcounts
		if !.collapsed
			.start = .ActiveEnd
			.ActiveEnd = ((.min, 0)(soft)) ~ Right


	helper SetCollapsed (|bool| Soft, |bool| value)
		if value
			.collapse(soft)
		  elseif .collapsed
			.show


	function SlowFlip
		if .Collapsed
			if .min > 0 // shouldnt be possible
				(.onshow)(self, 1)?
			  else
				.Show
		  else
			if .min > 0
				(.onhide)(self, 0)?
			  else
				.Collapse(true)


	task SlowShow (taskgui, |int| s)
		constructor
			is Animation
		
		run
			// now what?
			|| p = .upon.parent$
			|| pr = p.LastRect
			if .upon.ActiveEnd.length < 10
				|| s = .upon.start.length
				if s < 10
					|| d = .upon.d
					s = mix(pr[d]|float|, pr[d+2]|float|, 0.333)|int|
				.upon.ActiveEnd = (.s)~up
	
	
	function Show (|bool| anim=false)
		opt norefcounts
		|| p = .parent$
		|| pr = p.lastrect
		require .ActiveEnd.length < 10
		|| s = .start.length
		if s < 10
			s = mix(pr[.d]|float|, pr[.d+2]|float|, .defaultFraction)|int|
		if anim
			.slowshow(0.75s, s)
		  else
			.ActiveEnd = (s)~up


	function High (|guicontrol|)
		opt norefcounts
		return .parent.second

	function Low (|guicontrol|)
		opt norefcounts
		return .parent.first

	function ActiveEnd (|controlpoint|)
		opt NoRefCounts
		return .low$.sizer[2+.d]
	
	setter ActiveEnd (|controlpoint|)
		opt NoRefCounts
		.low$.sizer.g(2+.d) = value
		.InitDiv
		
	behaviour MouseDown
		require .InTest(P, false)
		if keys.cmd or (clicks == 2)
			.SlowFlip
			return mousedragging.handled
		|| pr = .parent!.lastrect Â± 1
		|| x  = p[.d] - pr[.d]
		(x max= .min)
		(x min= pr.size[.d]-.max) 
		.ActiveEnd = (x)~up
		return mousedragging.Beyond


	helper InTest (|ivec2| P, |bool| MightBeOut, |bool|)
		|| Out = MightBeOut and !(.lastrect contains P)
		|| dateout = !.entered
		if Out != dateout
			.touch
			.Entered = (0, gui.FrameStart)(out)
		if GUI.MouseButtons is left
			|| d = gui.FrameStart-0.75s
			if .Entered > d
				.Entered = d
		return !Out


	behaviour MouseMove
		opt norefcounts
		if .MouseNotDownOverOther
			return .intest(P, true)


	helper FadeAlpha (|float|)
		|| now  = gui.FrameStart
		|| diff = now - .entered
		|| f = (diff.float - 0.6)*2.0
		rz = f.clamp
		if rz >= 0 and rz < 1.0
			.touch


	behaviour Draw
		opt norefcounts
		require .MouseNotDownOverOther and .entered
		|| rect = .LastRect
		|| xy   = rect.xy
		require where contains xy

		|| a = .FadeAlpha
		|| scale = rect.size.Vec2
		|| h = scale[1-.d]
		|| w = scale[.d]
		scale = 2.25 / (w, h)
		w = 3.0
		xy[.d] += 1
		|| add = (.d, 1-.d)
		|| stride = (where.width, 1)(.d)
		|| col = .gnormal.edge.Color
		|| center = (w, h)*0.5 - 0.5

		// not sure why I neeed these wierd adjustments...
		if !.d
			center.x += 2
			scale.x *= 1.26th
			scale.y *= 2th
		  else
			xy.y+=(!.collapsed)*3
			scale.y *= 1.2th
			scale.x *= 1th
		
		for j in h
			|| p = where[xy]
			for i in w
				|| diff2 = ((i,j)-center) * scale
				col.a = (1.0 - diff2.abs.sum)*a
				p.overlay(col.PreMul)
				p += stride
			xy += add

function GuiControl.MouseNotDownOverOther (|bool|)
	opt norefcounts
	|| w = .window
		|| c = w.CurrMouseDown
		return (c == self or nil)
