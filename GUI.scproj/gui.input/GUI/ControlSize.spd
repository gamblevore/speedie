


struct ControlSize
	linkage
		cpp_part csiz
		datatype true
	|controlrect|				GSize
	
	helper G (|int| i, |guicontrol| g, assigns:|ControlPoint|)
		if .gsize[i] != value
			.GSize[i] = value
			GUI.resized(g)
	
	function SetSize (|guicontrol| g, |controlrect| GSize) // only one we need, right?
		ifn .gsize equals gsize
			.GSize = gsize
			GUI.resized(g)
	
	function ivec4.OperatorEquals (|ivec4| v, |bool|) // sigh
		for i in 4
			require self[i] == v[i]
		return true

	syntax access (|int| i, |ControlPoint|)
		return .GSize[i]|controlpoint|
				
	function Mode (|int|i, |int|)
		return .GSize[i]&15

	function Size (|int| i,  |int|)
		return .GSize[i]>>4

	setter guicontrol.FullScreen (|ivec2|) // for full-screen windows
		.lastrect = (0,0,value)

		.sizer.g(0, self) = ControlPoint.low
		.sizer.g(1, self) = ControlPoint.low

		.sizer.g(2, self) = ((value.x << 4) ||| ControlPoint.length|int|)|controlpoint|
		.sizer.g(3, self) = ((value.y << 4) ||| ControlPoint.length|int|)|controlpoint|


	helper guicontrol.CalculateSize (|ivec4| Parent, |ivec4| Prev, |ivec4| Hard, |ivec4|) // ResizeControl, ReCalculateSize
		opt norefcounts
		rz = .sizer.CalculateSize(parent, prev, Hard, self)
		if .LastRect!=rz
			.LastRect = rz
			if self isa Window
				._ReadjustBlock2D
			GUI.NeedMouseMove = true
			|| Initial = self isnt HasBeenSized
			is HasBeenSized
			.__Resized__(Initial)
		if !.hasany
			return rz
		|| mine = rz
		if self isa window
			mine = mine.soothe
			hard = mine
		.Reflow(mine, hard)


	function CalculateSize (|ivec4| Parent, |ivec4| Prev, |ivec4| Window, |guicontrol| upon, |ivec4|)
		|| UseBlocks = upon is blocksized
			return .CalculateBlocks
//		|| dbg = upon.clipmode is debug
//			"---------------"
		window = window Â± upon.Padding
		|| PS = parent.size
		for i in 4
			|| sz = .size(i)
			|| m = .Mode(i)
			if m <= ControlPoint.Centered
				|int| d = (m&2) + (i&1)
				if m ==	ControlPoint.Low or ControlPoint.High
					d = parent[d]
				  elseif m == ControlPoint.Before or ControlPoint.After
					d = Prev[d]
				  elseif m == ControlPoint.Centered
					d = PS[i&1]>>1
				rz[i] = d + sz
//				if dbg
//					.PrintExplain(i, d, rz)
//			  elseif m == controlpoint.Percent // ~pc
//				rz[i] = ((Sz * PS[i&1]) / (64K*100)) + parent[i&1]
//				if dbg
//					.PrintExplain(i, 0, rz)
		
		|| E = upon.FindAttachedEdge.flip
		for i in 4
			if .mode(i) == ControlPoint.Length
				|| other = i xor 2
				|| ro = rz[other]
				|| sz = .size(i)
				
				sz = upon.Transition(sz, i, e)
				rz[i] = ro + ((i>=2) sign sz)
//				if dbg
//					.PrintExplain(i, ro, rz)

		if upon.ClipMode is SlideBackInParent
			|| rz2 = rz.Bound(parent)
//			if dbg
//				.ExplainBound(rz, rz2)
			rz = rz2
		
		if upon.ClipMode is SlideBackInWindow
			|| rz2 = rz.Bound(window)
			rz2 = rz2.boundclip(window) // in case parent goes outside window
//			if dbg
//				.ExplainBound(rz, rz2)
			rz = rz2
	
	
//	function PrintExplain (|int| i, |int| New, |ivec4| rz)
//		|| fs = faststring()
//		.explain(i, new, rz, fs)
//		printline fs
//	
//	
//	function Explain (|int| i,  |int| New,  |ivec4| rz,  |faststring| fs)
//		|| m = .mode(i)
//
//		|int| d = (m&2) + (i&1)
//		fs <~ ".${ivec4.edgename(i)} (${rz[i]}) = "
//		if m ==	ControlPoint.Low or ControlPoint.High
//			fs <~ ".parent."
//		  elseif m == ControlPoint.Before or ControlPoint.After
//			fs <~ ".prev."
//		  elseif m == controlpoint.Centered
//			fs <~ ".parentcenter."
//		  elseif m == controlpoint.Percent
//			fs <~ "percent "
//		  elseif m == ControlPoint.Length
//			fs <~ "add "
//			d = d xor 2
//		
//		fs <~ "${ivec4.edgename(d)} ($new) + ${.Size(i)}"
//
//	function ExplainBound (|ivec4| rz, |ivec4| rz2)
//		if rz != rz2
//			print rz.Render
//			print " bounded to "
//			printline rz2.Render



function @ivec4.EdgeName (|int| i, |string|)
	if i == 0
		return "left"
	if i == 1
		return "bottom"
	if i == 2
		return "right"
	if i == 3
		return "top"
		

