

|| ¥ = colorscheme()

class ColorScheme
	linkage
		cpp_part Sch
	|ImagePixel[64]|		SyxCol
	|ImagePixel|			RootTmp
	|ImagePixel|			None
	|ImagePixel[8]|			History
	|vec4[4]|				BGCorners
	|int|					HistoryIndex
	|int|					Altered

	|drawstyle| 			Scroll
	|drawstyle| 			TextSelection
	|drawstyle|				TextCopy
	|drawstyle|				TextSelectionUnfocus
	|drawstyle|				ModifiedBorder
	|drawstyle|				Border
	|drawstyle|				DragAndDrop
	|drawstyle|				WhiteStyle
	|drawstyle|				SystemStyle
	|drawstyle|				Menus
	|DrawStyle|				MenuRowSel 


	function LoadDefaults
		.load(DefaultColors.parse)
	
	
	function LoadFromPrefs
		.loaddefaults
		|| s = app._prefs["colors"]
			¥.load(s)

	
	constructor
		.scroll.bg				<~ ((0.5, 0.0, 0.7, 0.4)) 
		.scroll.edge			<~ ((0.75, 0.25, 0.9, 0.5))
		.TextSelection.bg		<~ ((1.0, 0.25, 0.75, 0.5))
		.TextCopy.bg			<~ ((0.6, 0.6, 0.1, 0.2))
		.TextCopy.edge			<~ ((0.6, 0.6, 0.1, 0.2))
		.TextSelection.edge		<~ ((1.0, 0.25, 0.75, 0.5))
		.TextSelectionUnfocus.bg <~ ((1.0, 0.35, 0.65, 0.2))
		.TextSelectionUnfocus.edge <~ ((1.0, 0.35, 0.65, 0.2))
		.modifiedborder.edge	<~ ((1.0, 1.0, 0.5, 1.0))
		.modifiedborder.Bg		<~ ((0.0, 0.0, 0.0, 0.0))
		.border.edge			<~ vec4(1)
		.border.Bg				= nil
		.DragAndDrop.edge		<~ ((1.0, 0.0, 0.0, 1.0))
		.DragAndDrop.bg			<~ ((1.0, 0.0, 0.0, 1.0))
		.whitestyle.bg			<~ vec4(1)
		.whitestyle.edge		<~ vec4(1)
		.systemstyle.bg		<~ ((0.0, 0.1, 0.0, 0.96))
		.systemstyle.edge	<~ ((0.0, 0.1, 0.0, 0.5))
		.systemstyle.Drawer = image.CurlieQueDrawer		
		.BGCorners[0]		= (0.7, 1.0, 0.2, 1.0)
		.BGCorners[1]		= .BGCorners[0] 
		.BGCorners[2]		= (0.6, 1.0, 0.1, 1.0)
		.BGCorners[3]		= .BGCorners[2]
		.menus.edge			= (1.0, 0, 1.0, 1.0).px
		.menus.bg			= (0.0, 0.0, 0.0, 1.0).px
		.menus.seps			= nil
		.MenuRowSel.solid	= (0.5, 0.5, 0.5, 0.65)

	
	setter BG (|vec3|)
		for i in 4
			.bgcorners[i] = (value, 1.0)


	function Load (|message| s)
		|| list = s..syx$
		for syx in list
			|| num = syntax.Func(syx.Name, syx)
				|| c = &.syxcol[num]
				c.load(syx.first)
				c.a = 255
		.RootTmp.load(s..root)
		.none.load(s..none)


	render SaveColors
		fs.FieldEnter("syx")
		for i in @max|int|
			|| obj = i|syntax|.obj
				fs.field( obj.name, $.SyxCol[i] ) 
		fs.indent--
		
		fs.field( "root", $.RootTmp ) 
		fs.field( "none", $.None ) 


	syntax access (|int| i, assigns: |vec3|)
		.BGCorners[i] = (value, 1.0)
		
//	function FadeV (|vec4| top, |vec4| bottom)
//		.BGCorners[0] = top
//		.BGCorners[1] = top
//		.BGCorners[2] = bottom
//		.BGCorners[3] = bottom
		
		
	function DrawBackground (GUIDrawBackground)
		// so...
		|| C0 = .BGCorners[0]
		|| C1 = .BGCorners[1]
		|| C2 = .BGCorners[2]
		|| C3 = .BGCorners[3]
		if c0 == c1 and c2 and c3
			where.RectBasic(where.controlclip, c0)
		  else
			|| scale = (2.0, 2.0)/(where.size.vec2)		// interpolate these... sigh.
			for (P in where) (v) 
				|| vs = v.vec2*scale
				|| CX1	= mix(C0,	c1, vs.x)
				|| Cx2	= mix(C2,	c3, vs.x)
				|| C	= mix(cx2, cx1, vs.y) 
				P <~ C 



function FixupColor (|message| self, |ind| pos, |message|)
	opt norefcounts						// need to fixup container colors...
	require self
	if self == @emb
		self = .Parent$

	if .Position <= pos					// if we are after, its too far
		while .After <= pos
			self = .Parent						#require
	require .Contains(pos, true)

	if self == @prm or self in @url
		return .Parent // NICE
	if .IsContainer
		require !(self == @arg and "\t")
		if (pos == .position) or pos == (.after-1)
			return self
		return nil
	return self


helper message.UseRootTmpColor (|bool|)
	return (self == @tmp)  and  !(.flags & TextView.NotRoot)  and  .atroot

function message.iVec4 (|ivec4|)
	opt norefcounts
	if self
		|| c = .first
		for i in 4
			rz[i] = (C #loop).int|int|
			c++

function colorscheme.GetColor (|message| msg, |int| HasColor, |int| pos, |imagepixel|)
	opt NoRefCounts
	if !HasColor
		return imagepixel.clear
	if msg
		|| col = FixupColor(msg, pos)
			if col.UseRootTmpColor
				return .RootTmp
			return .SyxCol[col.func|uint| & 63]
	if HasColor == 3
		return .None
	return .SyxCol[0]


function textview.LineNumColor (|imagepixel|)
	|| c = .gnormal.bg.color
	c = mix(c, colors.white, 0.35)
	c.a = 1.0
	return c.px


function textview.CanDrawLight (|TextViewLine| D, |bool|)
	if (self is editable) and !.SingleLine
		|| sr	= .selrange
		ifn .seltext contains jeebox.csline
			return  (d contains sr.x and sr.x2)

