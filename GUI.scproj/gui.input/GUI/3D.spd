

// this is very complex
// and who says we need/have a frustum?
// if our camera is a spherical projection... we DON'T use this!
struct CameraSystem
	|vec3|		CamPos
	|vec3|		CamDir
	|vec4[6]|	Planes		//		Right Left Up Down Forward Backward Open Close
	constants
		NearDistance = 0.01
		FarDistance  = 400.0
		
	function Create
		|| fov = 1.0			  // 2 * tan(fovRadians/ 2)
		|| viewRatio = window.all.LastRect.aspect

	    || NerHeight = fov * nearDistance,  || NerWidth = nerHeight * viewRatio
	    || FarHeight = fov * farDistance,   || FarWidth = farHeight * viewRatio

		|| CU = (0, 1.0, 0)
		|| CR = (1.0, 0, 0)

		|| U = CU * FarHeight
		|| R = CR * FarWidth
	    || faar = .CamPos + .CamDir * FarDistance

	    || FarTopLeft = faar + U - R
	    || FarTopRigt = faar + U + R
	    || FarBotLeft = faar - U - R
	    || FarBotRigt = faar - U + R

		U = CU * nerHeight
		R = CR * nerWidth
	    || Near = .CamPos + .CamDir * nearDistance
	
	    || NerTopLeft = near + U - R
	    || NerTopRigt = near + U + R
	    || NerBotLeft = near - U - R
	    || NerBotRigt = near - U + R
		.Planes[0] = Plane3D(NerTopRigt, farTopRigt, FarBotRigt) // right
		.Planes[1] = Plane3D(NerTopLeft, FarTopLeft, FarBotLeft) // left
		.Planes[2] = Plane3D(NerTopRigt, NerTopLeft, FarTopRigt) // up
		.Planes[3] = Plane3D(NerBotRigt, FarBotRigt, FarBotLeft) // down
		.Planes[4] = Plane3D(FarTopRigt, FarBotRigt, FarBotLeft) // front
		.Planes[5] = Plane3D(NerTopRigt, NerTopLeft, NerBotLeft) // back



datatype Plane3D (vec4)
	module
		function New (|vec3| A, |vec3| B, |vec3| C, |vec4|)
		    || N = ((B-A) x (C-B)).normal
			return (N, N â€¢ A)



class PObject // merge with vobject
	|vec4| PosRad
	constructor (|vec3| Pos, |float| R)
		.PosRad = (pos, r)
		
