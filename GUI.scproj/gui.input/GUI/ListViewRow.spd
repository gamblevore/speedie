


role ListViewRow (message)
	linkage
		cpp_part Row
	contains ListViewRow
	constructor
		super.Constructor(@arg, "")
		is editable
		
	constructor (|string| name, |ListViewState| state = ListViewState.editable)
		cpp_part Named
		super.Constructor(@arg, name)
		.tag = state

	function State (|ListViewState|)
		return .tag

	function State (assigns:|ListViewState|)
		.tag = value

	syntax is (|ListViewState| s, |bool|)
		if self
			return .tag & s


	syntax is (|ListViewState| s, assigns:|bool| b)
		|| t = .tag
		|| t2 = t ||| s
		if !b
			t2 = t&~s
		if t2 != t
			gui.touch
			.tag = t2


	helper Vis (|int|i, |bool|)
		if !self
			return true
		return !((.Indent)&(1<<i))
		

	helper AllExpandState (|int|)
		opt norefcounts
		for r in self
			if (r is expanded) and r.hasany
				rz |= 2
			  else
				rz |= 1


	function HierEnd (|listviewrow| root, |bool| searchall = false, ||)
		opt norefcounts
		rz = self
		while searchall or (rz is expanded) or (rz == root)
			rz = rz.last		#loop


	function HierPrev (|listviewrow| root, |bool| searchall=false, || )
		opt norefcounts
		|| p = .Prev
			return p.hierend(root, SearchAll)
		p = .parent
		return (nil, p)(p == root)


	function HierNext  (|listviewrow| root, ||)
		opt norefcounts
		if (self is expanded) or (self == root)
			return .flatnext
		return .next ?? .flatafter
		
	
	function InView (|listview| Of, |bool|)
		opt norefcounts
		|| f = of.scrollstart$
		for of.VisibleRows
			if f == self
				return true
			f++
			require f
		
	
	helper ListView.DrawCell (|ListViewrow| R, |int| x, |ListViewcell|)
		// So... what are columns
		// 0-100 --> 30, 60
		// if x < a number, we are in that thing.
		|| col = 0
		for i in (1 to .DrawCols-1)
			if .columns(i) >= x
				exit
			col++
		return R.cell(col)
	
		
	function RemoveQuietly (|listview| lv)
		.remove(lv, false)
	
	
	function Remove (|listview| lv, |bool| Update=true)
		if (lv)
			lv.removerow(self, Update)
		  else
			super.remove


	function NextSelected (||)
		opt norefcounts
		|| f = .next
		while f
			if f is selected
				return f
			f = f.next


	helper DrawSep (|ivec4| rect, |image| Where, |float| Str=1)
		opt norefcounts
		|| y = (rect.y + rect.y2+1)/2
		rect = (rect.x+1, y, rect.x2, y+1)
		|| v = (1.0, 1.0, 1.0, 0.25*str)
		|| A = v.px
		where.DrawRect(Rect, A) 
	
	
	helper DrawDividerH (|ivec4| z2, |image| Where, |int| i)
		opt NoRefCounts
		require (self isnt disabled) and (.prev isnt disabled)
		|| Vis	= .vis(i)
			Where.MarkLineH(z2.x1y2, z2.width, 1)

	helper DrawDividerV (|ivec4| z2, |image| Where)
		Where.MarkLineV(z2.x1y2, 		z2.height, 1)
		Where.MarkLineV(z2.x2y2+(1,0),	z2.height, 1)

	
	helper ListRowDraw (|image| Where, |ivec4| Rect, |ListView| p, |int| depth)
		opt NoRefCounts
		require self and !p.decluttered
		|| w	= p.window	
		|| z2	= rect
		
		|| str = p.Declutterer.Strength
		where.controlclip = rect.clip(p.lastrect)
		for i in p.DrawCols
			rect.horz	= p.ColBounds(i, z2, self)
			rect.x	   += depth*font.width*2
			.DrawRowColumn(rect, where,  p, depth, i, str) 

		if self is active
			where.horz	= z2.h
			where.DrawCircleStyled( z2 + (4,0,-4,0), ¥.WhiteStyle, 1.0)
				
		if self is Grayed
			|| gr = colors.gray(0.4*str)
			where.DrawRect(z2 + (0,0,0,-1), gr)

		if self is found
			z2 += (0, 1, 0, 0)
			z2.y2 = z2.y + 2
			|| edge = ¥.textselection.edge
			edge.Alpha *= str
			where.DrawRect(z2, edge)


	helper DrawRowColumn (|ivec4| rect, |image| Where, |ListView| Parent, |int| Depth, |int| Column, |float| str)
		opt NoRefCounts

		require .vis(column)

		|| na = .__DisplayName__(column)
		if !na and (self is disabled)
			.DrawSep(Rect, where, str)
			return

		|| R		= Rect.TextCorner(parent.gnormal, na, .state)
		|| sighy	= ((rect.y + rect.y2)/2) - 3
		|| moved	= (parent.OnDrawRow)(self, Rect.y1, sighy, where, parent, column, str)?
		R.x += moved.x
		if parent.MultiLineDraw
			r.y = rect.y2 - 10
		|| TextCol	= parent.ColorRow(depth, column, moved.y)
		TextCol.alpha *= str
		font.small!.DrawTextWrap(na, Where, R, Textcol, parent.rowheight)
		

	function Cell (|int| i=0, |ListViewCell|)
		rz = Message()
		rz.obj = self
		rz.position = i



datatype ListViewState (uint16)
	flags
		|ListViewState| 
		AlignLeft = 0
		Align		= [AlignCenter, AlignRight]
		Selected 
		Modified
		Disabled
		Grayed
		Active
		Editable
		Broken		
		Dead		
		Expanded
		Found
		Hierarchical
		DrawWhiteSpace
		Hidden
	syntax is (|ListViewState| s, |bool|)
		return self & s


datatype ListViewSelectMode (uint)
	linkage
		numeric false
	flags
		|ListViewSelectMode|
		InitialSelection
		Fast
		NoShow
		NoEvent
		SendEvent
		Normal = 0
	
	syntax is (|ListViewSelectMode| s, |bool|)
		return (self|uint| & s|uint|) == s


role ListViewCell (message)
	linkage
		cpp_part Cell
	function Original (|ListViewrow|)
		disabled "Use .row" // or should it just be .row
	function Column (|int|)
		if self
			return .position
	function Row (|ListViewrow!|)
		return (.obj as Message)|listviewrow|!
	syntax cast (|string|)
		return self$.value
	function Step (|int|i, |ListViewcell|)	
		return .step(i, .position)
	function Step (|int|i, |int|col, |ListViewcell|)
		cpp_Part StepCol
		|| c = .row.move(i)
			return c.cell(col)  
	syntax equals (|ListViewcell|c, |bool| aware, |bool|)
		return c.obj == .obj  and  c.position == .position
	function Value (|string|)
		require self
		return .row.__DisplayName__(.column)
	
	
	function Tab (|bool| dir, |ListView| lv, |ListViewcell|)
		|| n    = .column + (1, -1)(dir)
		|| cols = lv.DrawCols
		if n >= cols
			return .step( 1, 0)
		if n < 0
			return .step(-1, cols-1)
		return .row.cell(n)

