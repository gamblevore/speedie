

struct InlineEditor
	linkage
		cpp_part inl
	|ListViewCell?|		Cell
	|Textview?|			Editor
	|Guicontrol?|		EditingFor
	|bool|				NeedsHide
	  
	
	function Init (|Window| w)
		.editor = textview(w)
		with .editor
			//.clipmode		= controlclipmode.debug
			.id				= "inline_editor"
			.visible		= false
			.SingleLine		= TextView.SingleLine
			(self.editor! is editable)
			&.gnormal.bg	<~ (0, 0, 0, 255)
	
	
	function NextSearch
		|| L = .EditingFor
		if L and !L.__Search__(GUI.LastSearch, false)
			beep

	
	function AcceptSearch (|string| s, |bool| hide=false)
		GUI.LastSearch = s
		.NextSearch
		if hide
			.clear
	
	
/*
	function Accept (|string| s, |bool| hide)
		.AcceptSearch(s)
	 // not sure why it did this? it never made sense
		if .editingfor isa textview
			.AcceptSearch(s)
			if hide
				.clear
		  elseif .editingfor isa listview
			.finishandclear
		*/
	
	function UpdateSearch (|string| s)
		|| l = .editingfor
		if l isa listview
			GUI.LastSearch = s
			l.__Search__(s, true)
	
	
	function FinishAndClear (|bool|focus=true)
		opt norefcounts
		|| e = .editor
		|| c = .cell
		if e and c and e.text != c.__DisplayName__
			|| l = .editingfor
			if l isa listview
				l.TryRenameCellTo(c, e.text)
		.Clear(focus)
		
	
	function Clear (|bool| Focus = true)
		.NeedsHide = false
		.cell = nil
		|| s = .EditingFor 
		if s isa listview
			GUI.LastSearch = .editor!.text
			if focus
				s.setfocus
		with .editor
			.visible = false
			.text = ""      // wants new
		if s isa listview
			s._IsEditing = false
			if focus
				s.setfocus
		.EditingFor = nil
	
	
	function Edit (|ListViewCell| r, |ListView| l, |bool|)
		opt norefcounts
		l ?= .editingfor as ListView
		
		debug_require l and r
		|| row = r.row
		require row is editable and row isnt UnSelectable and l is editable
		with .editor
			.FinishEditing(false)
			.visible = true
			.setfocus
			.text = r
			.selrange = .text.length
		l.Select(r.row)
		l <~ .editor
		l._isediting = true
		l.ShowFast(r.row)
		.cell = r
		.EditingFor = l
		return true
	

function window.Inline (|&InlineEditor|) // avoid getting the struct itself
	opt norefcounts
	return &.InlineEditorPlace


function window.InlineEditor (|guicontrol|)
	opt norefcounts
	return .InlineEditorPlace.Editor


function GuiControl.CanSearch (|int|)
	if self is unsearchable
		return 0
	if self isa textview
		if .IsInline
			return -1
		if .SingleLine
			return 0
		if self isnt editable
			require .hasfocus
				
	return 1


function GuiControl.OpenSearch (|bool|)
	opt norefcounts
	debug_require !(self isa window)
	require self isnt NoSearch
	|| cs = .CanSearch
	if cs > 0
		return .OpenSearchSub
	if cs < 0
		return false	
	
	|| f = self
	while {
		if f.CanSearch > 0
			return f.opensearchsub
		f = f.NextFocus(true, false)
	} (f and f != self)


function GuiControl.OpenSearchSub (|bool|)
	|| e	= .window!.inline
	|| FOR	= e.editingfor
	require for != self
	 
	if for
		e.FinishAndClear(False)
	if self isa textview
		if .isinline
			return for$.opensearch
		GUI.LastSearch ?= .seltext
	
	|| f = e.editor!
	e.editingfor = self
	self <~ f
	debug_require !(self isa window)
	f.size = 115~left  by  15~down to the~top
	f.text = GUI.LastSearch
	f.visible = true
	.setfocus // makes sense
	f.setfocus
	f.selectall
	if GUI.lastsearch
		e.UpdateSearch(GUI.lastsearch)
	return true
