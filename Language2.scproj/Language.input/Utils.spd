


function TestAttachedToFunc
	// Need to allow deeper nodes... to look at stuff above them...
	// if they are within an adj... 
	|| stuff = "(a)~(cat), a~green~cat, a~(light~green)~cat".parse
	for line in stuff
		printline " :: $line ::"
		for c.flat in line
			|| m = c.attachedto
			if m
				printline "     '$c'   got  '$m' (${m.func})"
				debugger
			m = c.attachedto
	debugger



function message.AttachedToFunc (|syntax|)
	opt norefcounts
	|| m = .attachedto
	if m
		return m.func


function message.ObjAttachedTo (|message|)
	opt norefcounts
	
	|| c = self
	while
		|| p = c.parent
		require (p == @bra or p == @adj)
		if (p == @adj)
			c = c.next
			if c
				while c == @bra: c = c[0] // drill down
				return c

		c = p // just continue up!



function message.OppAttachedTo (|message|)
	opt norefcounts
	
	// _ walk home
	
	|| p = .prev
	if p == @thg and "_"
		return p
	if false and self == @opp
		|| n = .next
		if n == @oat
			return n
	return .objattachedto
	



function message.AttachedTo (|message|)
	opt norefcounts
	if (self != @opp)
		return .objattachedto
	return .oppattachedto
	


function word.SyntaxWarn ( |string| Msg ) {
	StdErr.NewWarning( .source, Msg )
}
function Group.SyntaxWarn ( |string| Msg ) {
	StdErr.NewWarning( .source, Msg )
}


function word.SyntaxExpect ( |string| Msg )
	StdErr.NewError( .source, Msg )


function Group.SyntaxExpect ( |string| Msg )
	StdErr.NewError( .source, Msg )



function syntax.CatID (|bool| attached, |int|)
	|| result = (self|int| - @thg|int|)
	|| NumberOfItemsInSyxArray = 8 // thg, opp, cnj, etc... adds up to 8.
	if result >= NumberOfItemsInSyxArray // wat? 
	return result + (NumberOfItemsInSyxArray, 0)(attached)


function message.SyxBits (|ElementList|)
	|| ID = .func.catid(.AttachedToFunc|bool|)
	return 1 << ID


function message.Word (|word|) {
	opt norefcounts
	|| w = .obj
	if w isa word	
		return w
}


function word.operatorisa (|Element| cat, |bool|)
	require self
	return .eles & cat.catbits 


function message.operatorisa (|Element| cat, |bool|)
//	Disabled "Asdasd"
	opt NoRefCounts
	|| c = self
	while c == @bra
		c = c.first
	|| t = c$.tran$
	if t isa TransInfo
		return t.myword isa cat
	  else
		debugger


function dictionary.AppendGroup (|string| name, |Group| result) {
	Opt NoRefCounts
	|| old = (self|dictionary of Group|)[name]
	if !old
		self[name] = result
		return
	
	debug_require (old != result)		
	require !old.GroupClash(result)
	
	old <~ result
}


function Dictionary.AppendWord (|string| name, |Word| result)
	|| old = (self|dictionary of Word|)[name]
	debug_require (result and !result.alternates)
	debug_require (old != result)
		
	if !old
		self[name] = result
		return
	
	if old.owner == result.owner
		if old.AllowsSame and result.AllowsSame
			old.Merge(result)
			return
		error (result, "Same name '"+name+"' twice in concept: " + old.Groupname + "\nIf this intentional, wrap the name in a bracket like '(dog):'")
		
	if old.OKWith(result)
		result.alternates = old.alternates
		old.alternates = result

