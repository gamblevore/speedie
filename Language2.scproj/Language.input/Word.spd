


class Word (ringtree) {
	contains Word
	|string|			Name
	|message|			Source
	|Group|				Owner
	|SpecialProperty|	Special
	|Word|				Alternates
	|ElementList|		Eles
	|uint|				_SyxBits
	|Gram|				Types
	

	constructor (|string| name, |Group| o, |ElementList| el, |message| src, |gram| G) {
		.name = name
		.owner = o
		.eles = el
		.source = src
		.Types = G
		.special = o.defaultspecial
	}
	
	
	render {
		.eles.render(FS)
		fs <~ ' '
		fs <~ .name
		.types.render(fs)
	}


	function SoloType (|gram|)
		return .types.solo


	function AddToGrammar 
		opt norefcounts
		|| t = .SoloType$.log2 // well... OK i guess.
		.lang.grammar[t-1] = self
	
	
	function Insert (|string| name)
		opt norefcounts
		.lang.words.AppendWord(name, self)

	function AllowsSame (|bool|)
		opt norefcounts
		|| s = .source
		return s == @item and s.first == @bra
		
	
	function Merge (|word| w)
		.types |= w.types // simple?

		
	function NoClashes 
		opt norefcounts
		|| w = self
		while
			w = w.next #require
			.WordClash(w)

	
	function OKWith (|Word| W, |bool|) {
		expect (W != self) (self, "Bug in WordClash")

		if (w.owner != .owner) and (w.eles.mini != .eles.mini)		// different CATS are allowed
			return true
		
		if w.AllowsSame and .AllowsSame
			return true // whatever.
		
		debugger
		|| err = "'${w.name} (${w.Groupname})' clashes with '${w.name} (${.Groupname})'." 
		error (self,	err)
//		error (w,		err)
	}


	function WordClash (|Word| W, |bool|) {
		if (w.eles tdt .eles)
			return false
		
		if (w.types != .types)							// different grams are OK?
			return false
			
		// printline w.source.errorlocation
		// printline  .source.errorlocation
		
		|| Wat = (w.source == .source)
		if (wat)
			debugger
			w.render
			
		|| S = ("Concept conflicts itself", "Can't have same grammar type")(Wat)
		error (W,		"$S[1].")
		error (self,	"$S[2].")
		return true
	}
	
	
	function GroupName (|string|)
		return .owner.idea.name
	
	
	function Lang (|language|)
		return .owner.lang

	
	function Message.LoadGram (|&ElementList| Catty, |gram|)			// male + future
		Opt NoRefCounts
		
		require (self) and (self != @emb) and (.expectlast)

		|gram| result = 0
		for oof.flat in self
			if oof == @opp
				oof.expect(@opp, "+")
			  elseif oof == @thg
				|| argh = Gram.select(oof)
				if argh
					result |= argh
				  else
					|| c = Element.select(oof)		 #expect (oof, "Unknown grammar type “${oof}”." )
					catty[0] |= c
			  else
				expect (oof == @rel or oof == @bra) (oof)
		
		if (!result and !catty[0])
		return result
		
	
	function CatMatch (|ElementList| ele, |bool| Exact, |bool|) {
		if exact
			return ele == .eles
		return ele & .eles
	}
	
	function Improve (|gram| Oof, |word|) {
		return .owner.bestword(.eles, oof)
	}
	
	function GrammarCheck (|bool|) {
		|| Found = false
		for r in gram.components
			|| Component = .types & r 
			expect (Component) (self, "Internal error: Gram component missing.")
			if !found and (self is grammar)
				Found = (Component != r)
		if self is grammar
			expect (found) (self, "No specific grammar (tense/gender/audience/etc) specified.")
		return true
	}
	
	operator Isa (|language| s, |bool|)
		return .owner.lang == s
	
	
	function BestCat (|ElementList| fbits, |word|) {
		opt norefcounts
		
		|| s = self
		|| best
		while s
			|| CatSyx = s.syxbits
			if (fbits == CatSyx)
				return s
			if (fbits & CatSyx)
				best = s
			s = s.alternates
		return best
	}

	
	function VerifyWord {
		check .name		(self, "No name for Word?")
		check .owner	(self, "No concept?")
	}
	
	
	syntax equals (|string| name, |bool| Aware, |bool|) {
		return self and .name.syntaxequals(name, aware)
	}
	
	syntax is (|SpecialProperty| p, |bool|)
		return .special & p
}


datatype SpecialProperty (byte) {
	flags List {
		|SpecialProperty|
		ControlFlags = (Grammar, Punctuation, DoesReverse, Reversable, Invisible, TakesAdjective)
	}
}
