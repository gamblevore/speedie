
/*
	Jeebox internals. Only the creator... Theodore H. Smith... may view.
*/


class Language {
	linkage
		cpp_part Lang

	|dictionary|				Complaints
	|dictionary of Group|		Groups
	|dictionary of word|		Words
	|String|					Name
	|String|					LangID
	|Array of Word|				Grammar			// will (run) / am (running) / was (running)
	|LangWordExpander|			WordExpander
	|LangZuncFinder|			Renderer
	|gram|						Weak
	
	
	constructor (|string| ID, |string| name)
		.langid		= id
		.name		= name
		.words		= dictionary.new
		.Groups	= dictionary.new
		.grammar	= array.new
	
	function FindGrammar (|gram| s, |word|)
		return .grammar[s.log2-1] // for now... i guess? I can't think of anything better....

	function IsMaster (|bool|)
		return (.langid == language.MasterLangName)
	
	render
		fs <~ .name
		fs <~ " ("
		fs <~ .langid
		fs <~ ")\n"
		
		fs.indent++
		for Cl in .Groups
			for g in Cl
				fs.IndentLine
				g.render(fs)
				fs <~ '\n'
	
		
	function BuildGroupSub (|message| msg, |ElementList| Cls, |message| ID, |message| arg, |message| IsAdd)
		// verb ++view
		Opt NoRefCounts

		if arg
			require arg.expect(@arg)
		isAdd = id.isdefaultadd(isadd)
		if isAdd
			expect (.wordexpander) (id, "Can't expand '${.name}'")

		id = id.isadd_id$
		|| Name = (id, id.first)(ID != @arr)
		|| idea = name.concept(.ismaster)				#expect (id, "No master-concept found for this language-concept.")
		// ummm yes there is?
		|| c = Group.new(cls, idea, self, msg)
		c.DefaultSpecials
		c.AddToLang
		require c.GroupLoad(arg, id, isadd)
		c.Improve


	function BuildGroupList (|message| msg, |element| cls, |ElementList| ClsList=nil)
		Opt NoRefCounts
		
		require langload.CheckOrder(cls, msg)
	
		|| arg = msg[@arg]
		|| list = arg[-1]		#require
		
		|message| IsAdd
		if List == @brel
			isadd = List
			List = List[@list] #require
		expect ((List == @list) or List.isdefaultadd) (List)
		
		clslist := cls.expand
		for (ch in List)
			.BuildGroupSub(ch, clslist, ch, nil, isadd)
	
	
	function BuildAGroup (|message| msg, |element| cls, |ElementList| ClsList=nil)
		Opt NoRefCounts
		require langload.Checkorder(cls, msg)

		|| First = msg[nil|syntax|] #require
		|| n = first.next
		expect (first!=@arg)       (first, "Need a name for this concept.")
		if (n)
			expect (n == @arg) (n)
			require n.expectlast

		clslist := cls.expand
		.BuildGroupSub(msg, clslist, First, n, nil)
		
	module {
		||							MasterLangName = "english"
		|dictionary of language|	Languages
	}
}


function message.IsAdd_ID (|message|)
	if (self == @brel and self == "++")
		return self[@thg]
	if (self != @arr)
		.expect(@thg)
	return self


function message.IsDefaultAdd (|message| old = nil, |message|)
	if (self == @brel and self == "++")
		expect (!old) (self, "Already got one of those.")
		return self
	return old




function string.LocalLangFile (|string|)
	if !.ext
		return "dict/" + self + ".box"
	return self


function string.LocalTestFile (|string|)
	if !.ext
		return "dict/" + self + ".test"
	return self


extend_module Language {
	function FindLang (|message| r, |language|)
		return .Languages.msglower(r)			#expect (r, "Can't find language.")

	function init
		require !languages 
		.languages = dictionary.new
		Element.init
		
		|| l = Gram.list
		l..tense = nil
		l..gender = nil
		l..towards = nil
		l..audience = nil
		l..plurality = nil 
			
		
	function LoadDict (|string| path, |bool|)
		return langload.Dict(path.LocalLangFile.file.parse)

		
	function LoadCat (|string| path, |bool|)
		|| oof = path.LocalLangFile.file.parse #require
		for c in oof
			require category.add(c)
		return true


	function LoadDict (|array of string| scripts, |bool|)
		for s in scripts
			require langload.Dict(s.parse)
		return true
	
	
	function Clear
		require .languages
		.languages = nil
		.languages = dictionary.new
	
	
	syntax access (|message| m, |message| m2, |language|)
		|| L = .languages.msglower(m)
		if (!L)
			L = language.new(m.id, m2.name)
			.languages.msglower(m) = l
		return l
	
	
	syntax access (|string| s, |language|)
		return .languages[s]
	
	
	function Master (|language|)
		return .Languages[.MasterLangName]
	function English (|language|)
		return .Languages..english
	function Spanish (|language|)
		return .Languages..spanish
}

