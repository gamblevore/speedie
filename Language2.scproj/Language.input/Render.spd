

prototype LangMsgRender  (|Message|self, |LangFastString| fs)
prototype LangZuncFinder (|Message|self, |LangFastString| fs, |langmsgrender|)
prototype LangWordExpander (|group|self, |string| name, |gram| types)


function Message.LangExport (|langfaststring| fs)
	|| R = (fs.langinfo)(self, fs)
	if (R)
		(R)(self, fs)
	  else
		debugger

class LangFastString (FastString)
	|LangZuncFinder|	LangInfo 
	|int|				WantSep
	|int|				PrevSep
	|bool|				Capnext
	
	constructor  (|LangZuncFinder| Info)
		.langinfo = info


function LangFaststring.AddSep (|int| Sep)
	// addsep... should store it, until another addsep is needed
	// or a sentance end.
	// no point adding ' ' and then adding '.'
	// '.' > ',' > ' '
	if .WantSep < sep  and  sep != .prevsep
		.wantsep = sep


function langfaststring.SyntaxAppend (|string| Source, |bool| Keepsep)
	|| p = .wantsep
	self <~ source
	if keepsep
		.prevsep = p


function langfaststring.SyntaxAppend (|string| Source)
	|| w = .wantsep
	if w and w != .PrevSep
		self <~ w
		if w != ' ' // dont append if its not punct? fix later. 
			self <~ ' '
		if w == '.'
			.capnext = true
		.wantsep = 0

	|| first = source.FirstLangChar
	require first >= 0
	|| last = source.LastLangChar
	for (s in first to last)
		|| c = source[s]
		self <~ c
		if c.in(33,127) and wierdness.zalgo
			.zalgo(c, 8, 0)
			
	.PrevSep = 0


function langfaststring.SyntaxAppend (|byte| ch)
	if (.CapNext)
		.CapNext = false
		if ch.in('a', 'z')
			super <~ (ch - 32)|byte|
			return

	ch = (' ', ch)(ch == '_')
	super <~ ch


function message.CouldUseASep (|bool|)
	opt norefcounts
	require .next

	return (.word is Punctuation)


function string.FirstLangChar (|int|)
	for (i in .length)
		if self[i] != '_'
			return i
	return -1
	

function string.LastLangChar (|int|)
	for (i.down in .length)
		if self[i] != '_'
			return i
	return -1
