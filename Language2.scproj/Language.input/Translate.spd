

function file.Translate (|object| Dest, |message|) {
	return .parse$.translate(dest)
}



class TransState {
	|dictionary|		Complaints
	|dictionary of int|	GroupStats
	|Language|			Dest
	|bool|				IsWierd
	
	constructor (|language| d)
		.dest = d
	
	
	function Stats (|message| m, |transinfo| ti)
		opt norefcounts
		
		require (ti) and (m == @opp)
		|| verb = Element.verb.catbits
		|| wcat = ti.myword.eles
		require wcat & (verb)
		// so we have a verb
		.GroupStats := dictionary.new
		|| n = ti.myword.owner.idea.name
		.GroupStats[n] = *.GroupStats[n] + 1
	
	
	function PrintStats
		require .Groupstats
		for (v in .Groupstats) (k)
			printline "$k: $v"
	
	
	function Read (|message| m)
		.Readwords(m, language.Master)
	
	function Translate (|message|src, |message|)
		|| ulu = message(src)
		.StraightTranslate(src, ulu)
		.ImproveWords(ulu)
		.RemoveStructure(ulu)
		.AddStructure(ulu)
		.printstats
	//	ulu.DebugTranAll
	//	D.wordspecificers(src, ulu)
		return ulu


	function CantFindWord (|word| Wrd, |message| Src, |word|)
		|| n = wrd.Groupname
		if n == wrd.name
			n = ""
		  else
			n = " (" + n + ")"
		error (src, "No concept ‘${wrd.name}’$n in ‘${.dest.LangID}’" )


	function DestVersion (|word| Wrd, |message| Src, |word|)
		Opt NoRefCounts
		require wrd

		|| Con = .dest[wrd]
		if con
			return con.BestWord(wrd)

		if .CanReporterrors(src, wrd)
			.CantFindWord(wrd, src)


	function ReadWords (|message| Read, |language| srclang)
		Opt NoRefCounts

		if read.translateable
			read.obj = .FindSrc(read, srclang)

		for r in Read
			if (r == @Sheb)
				srclang = language.FindLang(r)$
			  else
				.ReadWords(r, srclang)


	function CanReportErrors (|message| msg, |word| w = nil, |bool|)
		require (Msg != @name)
		require (stderr.errorcount < 50)
		|| n = msg.id
		if w // can't use ternary... temp-expr bug
			n = w.Groupname
		.Complaints := dictionary.new
		require !.Complaints[n]
		.Complaints[n] = msg
		return true
		

	function FindSrc (|message| msg, |language| srclang, |Word|)
		Opt NoRefCounts

		|| Wrd = SrcLang[msg]
		if wrd
			return wrd
		
		if .CanReporterrors(msg)
			srclang.CantFindSrc(msg)


	function language.CantFindSrc (|message| msg, |Word|)
		|| s = "No ${msg.ShortDesc} in ${.LangID.titlecase}."
		printline s
//		debugat()
		self[msg]
		error (msg, s)

}


extend message
	function Use (|word| wrd2, |gram|)
		if !wrd2
			return -1
		.name = Wrd2.name
		.obj = Wrd2
		return wrd2.types


	function Translate (|object| Dest = nil, |message|)
		require self
		expect (language.Master) ("Translation not inited properly.")

		|| D = language.Master
		if (dest isa string)
			D = language[Dest] #expect "Can't find language: " + dest
		  elseif dest isa Language
			D = dest
		
		|| State = TransState.new(D)
		State.Read(self)
		return State.Translate(self)

	function message.LangRead
		|| State = TransState.new(nil)
		State.Read(self)
		state.straightread(self)




extend language
	syntax access (|string| name, |word|)
		if name.islower
			return .words[name]
		return .words[name.idcase]

	syntax access (|word| wrd, |Group|)
		Opt NoRefCounts
		|| con = .Groups[Wrd.Groupname]
		if con
			return con.BestCon(wrd)

	syntax access (|message| msg, |word|)
		Opt NoRefCounts
		|| Wrd = self[msg.name]
		if wrd
			return wrd.bestCat(msg.SyxBits)


function message.ID (|string|)
	return .name.lowercase
