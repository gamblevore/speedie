

extend_module language
	function ReportFullTest (|string| path)
		|| orig = path.LocalTestFile.file.parse #require
		|| eng_msg = orig.translate
		if stderr.ok
			printline eng_msg.langrender
		
		|| span = orig.translate("spanish")
		if stderr.ok
			printline span.langrender



function language.TenseTest (|string| src, |gram| G)
	|| msg = src.parse			#require
	.tensetestsub(msg, g, "run")


function language.TenseTestSub (|message| msg, |gram| G, |string| name)
	msg.LangRead

	for ch.flat in msg
		|| ti = ch.tran
		if ti
			|| w = ti.myword
			if (w ~= name) and (w.types != g)
				error (msg, "Failed tense: '${g.render}' vs '$msg'")


function language.TenseTestAll (|message| msg)
	|| bra = msg[@bra]$
	|| Wrd = bra[@thg]$
	|| arg = bra.next(@arg)$
	arg.expectlast$
	|elementlist| eles 
	for item in arg
		item.expect(@item)$
		|| name = item[0]$
		|| test = name.next(nil)$
		name.remove // whatever
		|| G = name.LoadGram(eles)$
		.tensetestsub(test, G, wrd.name)
	
	
function language.BasicEnglishTest
	|| oof = "
tense_test (run)
	Present_Simple:				i run	
	Present_Continuous:			i am~running	
	Present_Perfect:			i have~ran	
	Present_Perfect_Continuous:	i have~been~running	

	Past_Simple:				i ran	
	Past_Continuous:			i was~running	
	Past_Perfect:				i had~run	
	Past_Perfect_Continuous:	I had~been~running
	
	Future_Simple:				i will~run	
	Future_Continuous:			i will~be~running	
	Future_Perfect:				i will~have~ran	
	Future_Perfect_Continuous:	i will~have~been~running	

	timeless:					i like %to~run	
	conditional:				i could~run
	past_idea+present_idea:		i would~run // ???	
	past_idea+present_idea:		i wont~run	// ???
".parse.first
	
	.tensetestall(oof)



function Word.Lookupcheck (|language| master, |bool|) {
	|| Found = master[self]
	if (!found)
		|| n = .Groupname
		|| w = master[n]
		|| perhaps = ""
		if (w)
			expect (w.Groupname != n) (w, "Element mismatch between '${master.name}' and '${.lang.name}' for concept: '$n'. ${w.eles.render} vs ${.eles.render}") 
			perhaps = "Perhaps you meant: ${w.Groupname}"
		error (self, "No ${master.name} concept found for: $n\n"+perhaps )
		return false

	found = found.bestcon(self)
	|| FoundCat = found.eles 
	|| wcat = .eles 
	expect (FoundCat dtf .eles) (self, "Word element mismatch vs ${master.name} (${FoundCat.render} vs ${wcat.render}):\n$Found\n${.owner.render}")
	|| Best = found.BestWord(self) #expect (self, "No matching word found for this concept!:\n" + found.render)
	return true
}



function Group.Verify (|language| master) {
	opt norefcounts
	expect (.Words)									(self, "No Words?")

	|| Count = 0
	|| N = .PreferedForm.name
	
	check (.GroupName)								(self, "No Name?")
	check (.eles)									(self, "No element?")
	for f in self
		check (f.owner == self)						(self, "Word points to wrong concept.")
		f.Noclashes
		expect (count++ < 64)						(self, "Too many words (need under 64).") 
		if master
			require f.LookupCheck(master)
		require f.GrammarCheck // not multiple errs per Group.
	check (Count)									(self, "Concept has no words?")
}

