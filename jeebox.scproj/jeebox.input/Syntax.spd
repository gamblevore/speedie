
/*
	Jeebox internals. By Theodore H. Smith...
*/


prototype fpMsgRender (|Message| self, |FastString| fs)
		

datatype Syntax (Byte)
	default nil
	linkage
		cpp_Part Syx
		numeric false // disallow implicit (syntax <--> int) conversion

	function Translateable (|bool|) 
		return self <= @Thg and self >= @tmp

	function ListViewable (|bool|) 
		return .translateable or .isstring

	function IsString (|bool|)
		return self >= @sstr and self <= @str

// relies on me having cleverly ordered all my syntax :> to group them up.
	function NoChildren (|bool|)
		return self >= @Cnj	and self <= @Bin

	function IsRel (|bool|) 
		return self >= @rel and self <= @yoda

	function IsAdj (|bool|) 
		return self >= @adj and self <= @badj

	function IsBra (|bool|) 
		return self == @bra or @list

	function Message.Translateable (|bool|) 
		return .Func.Translateable
			
	operator plus (|string| m, |message|)
		return .msg(m)
	
	operator plus (|int64| m, |message|)
		opt norefcounts
		cpp_Part PlusNum
		return .msg(m.render)
		
	function Name (|string|) 
		Opt NoRefCounts
		if self
			|| o = .obj
				return o.name
		return "child"
	
	function LongName (|string|) 
		Opt NoRefCounts
		if self
			|| o = .obj
				return o.longname
		return "child"
	
	function Obj (|syntaxobj|) 
		return jeebox._FuncArray[self|int|]
	
	
	function Msg ( |string| name="", |Message| ) 
		return Message( nil, self, parser.using.position, name, name.length )
	
	
	function message.Msg ( |syntax| fn, |string| name="", |Message| )
		return Message( self, fn, parser.using.position, name, name.length )
	
	
	// replace with int64.msg? seems better.
	function Msg ( |int64| name, |Message| )
		disabled "Use int64.msg instead"
		
	function ExportAddr (assigns:|fpMsgRender|) 
		Opt NoRefCounts
		.obj!.exportaddr = Value
	
	function ExportAddr (|fpMsgRender|) 
		Opt NoRefCounts
		return .obj!.exportaddr
	

	function RenderAddr (|fpMsgRender|) 
		Opt NoRefCounts
		return .obj!.renderaddr
	
	
	module 
		|int|		CurrFuncID_
		
		function Func (|string?| name, |message| where=nil, |syntax|)
			visible
			if name!=nil
				|| obj = jeebox._syxdict.valuelower(name) #expect (where, "Unknown syntax " + name)
				return obj.id
			
		function StdNew (|fpMsgRender| msg, |string|name, |String| LongName, |int| ID,  |Syntax|) 
			|| result = Syntaxobj.new(msg, name, ID)
			jeebox._syxdict[name] = result
			jeebox._Funcarray[ID] = result
			if (LongName)
				jeebox._syxdict[LongName] = result
				result.LongName = LongName
			  else
				result.LongName = Name
			return ID|syntax|



class SyntaxObj 
	linkage
		cpp_part Fn
	visible			true

	|fpMsgRender|			RenderAddr
	|fpMsgRender|			ExportAddr
	|String|				Name
	|String|				LongName
	|Syntax|            	ID


	constructor (|fpMsgRender| msg, |string| name, |int| ID) 
		.RenderAddr = msg
		.Name		= Name
		.ID			= ID|syntax|
		.ExportAddr = Message.Dummy!
	
	
	render 
		if !fs_in 
			return .LongName.lowercase
		fs_in <~ .LongName.LowerCase
	


