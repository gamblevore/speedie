

class Macro 
	|bool|				Cleaned
	|string|  			input
	|message| 			Parsed
	constructor (|string| s)
		cpp_part ConstructorStr
		.input = s
	constructor (|message| s)
		cpp_part ConstructorMsg
		.parsed = s
	function Pz (|message|)
		opt norefcounts
		rz = .parsed
		if !rz
			rz = .input.parse
			rz.wipepositions
			.parsed = rz
	syntax call (|[message]| prms=nil, |message|)
		rz = message()
		rz.Become(self, prms)
	
	function string.macro (|macro|)
		return macro(self)
	

extend message
	helper MacroAvoidCopy (|message|)
		if self isnt Inserted
			is Inserted
			return self
		return  .copy


	helper MacroDot (|message| prm, |message|)
		require prm.expect(@thg)
		rz = .copy
		(prm is inserted)
		rz.name = prm.name
	
	
	helper MacroPrm (|message| root,  |array of message| prms,  |Message|)
		opt norefcounts
		|| n = .name
		if (self == @thg or @dot or @sdot) and (n.first == '_')
			if (n == 1) or n.IsInt(1) 
				|| oop = prms[n.int|int|]		#expect (root, "Not enough params.")
				if self == @dot or @sdot
					return .macrodot(oop)
				return oop.MacroAvoidCopy
			return message(self)
		return .MacroCopy(root, prms)


	helper MacroCopy (|Message| root, |array of message| prms,  |Message|)
		opt norefcounts
		rz = message(self)						// looks better
		for v in self
			rz <~ v.MacroPrm(root, prms)


	function Become (|message| src)
		cpp_part BecomeMsg
		.func = src.func
		.name = src.name
		.clear
		.TakeAllFrom(src)


	helper Become (|Macro| b,  |array of message| prms=nil)
		// prefer macro.build
		cpp_part BecomeMacro,  using self,  opt norefcounts
		
		for (r in prms) (i)
			if r == self
				r = .copy
				prms[i] = r
			r.flags = nil
		
		|| pz = b.pz
		|| cpy = pz.macrocopy(self, prms)
		.become(cpy)

		for r in prms
			check (r is inserted)  (r, "Unused parameter to macro")


