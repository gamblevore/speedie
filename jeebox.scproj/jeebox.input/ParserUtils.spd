
/*
	Jeebox internals. By Theodore H. Smith...
*/


function parser.New (|Message| Parent, |Syntax| Func, |int| Start, |string| name="", |Message|)
	Opt NoRefCounts
	cpp_part NewParentName
	rz = Message.new(parent, func, Start, name, .nextstart - start)


function parser.New (|Message| Parent, |Syntax| Func, |int| Start, |int| End, |Message|)
	Opt NoRefCounts
	cpp_part NewParent
	|| name = parser[start, end, func]
	rz = Message.new(Parent, func, Start, name, end - start)


function parser.NewWord ( |Message| P, |Syntax| F, |int| Start, |int| SearchFrom, |Message|)
	Opt NoRefCounts
	|| after = parser.WordAfter( SearchFrom )
	|| name = parser[searchfrom, after, f]
	rz = message.New( P, F, start, name, after - start )


function parser.NewEmpty ( |Message| P, |Syntax| F, |int| Start, |int| After, |Message|)
	Opt NoRefCounts
	rz = message.new(P, F, start, "", after - start)


function parser.NewSkip ( |Message| P, |Syntax| F, |int| Start, |int| NameStart, |int| NameEnd, |Message|)
	Opt NoRefCounts
	|| name = parser[namestart, nameend, f]
	rz = message.New( P, F, start, name, parser.nextstart - start )



//////////////////////////////////////////////////

function String.ParseJSON (|Messageroot|)
	|| tmp = Jeebox.UnEscapeStr
	jeebox.UnEscapeStr = Jeebox.JS_UnEscapeStr
	rz = .parse
	jeebox.UnEscapeStr = tmp
	rz.ConvertJSONToJB?
	

function String.ParseWithError (|&Error| rec, |MessageRoot|)
	rz = .parse
	if !rz
		|| r = stderr.pop
		if rec: *rec = r 


helper String.IsJbin (|ind|)
	if  *self == '#'  and  self[1] == '!' // shebang
		|| nl = .find('\n')
			nl++
			if self[nl, _JbinHeader]
				return nl
	  elseif self[0, _JbinHeader]
		return 0
	return -1


function String.Parse (|syntax| owner = @arg, |bool| AllowDecomp=true,  |MessageRoot|)
	|| data = self[.isjbin max 0, int.max]

	if AllowDecomp and data.iscompressed
		data = data.decompress(int.max)
	|| j2 = data.isjbin
		data = data[j2, int.max]
		rz = data.parsejbin
	  else
		rz = data.parsesub(owner, allowdecomp)
		


helper String.ParseSub (|syntax| owner, |bool| AllowDecomp,  |MessageRoot|)
	// language2.scproj uses owner
	if !Parser.CppInited
	    Parser.Init
	parser.StartParse( self )
	parser._StopBars = 0
	|| OK		= StdErr.mark
	|| Flags	= parser.kTemporal
	|| into		= message.new(nil, owner, 0, "", 0)
	|| lines	= parser.ParseLoopFlags( into, "", Flags )
	if !Lines and into.hasChildCount(1)
		into = into.first // nice

	parser.CleanSpaces
	if parser.Running
	    parser.Expect( 0 )
	
	parser.StopParse // clear error message
	if !OK
		into = nil
	return into|MessageRoot|



extend Parser
	function fError (ParseHandler)
	    return nil // seems OK... doesn't need to do more
	function fError2 (ParseHandler)
		return .erroradd("Unexpected syntax", start)
	

	function ErrorAlwaysAdd (|String| s, |ind|Start, |Message|)
	    .ErrorStart = start
		
		// create msg for memory-layer
		|| err				= Error.new(message())
		err.Position		= Start
		(err is dontstrip)
		(err is parse)
		err.name			= s
	    err.originaldata	= .data
		
		stderr <~ err
	
	
	function ErrorAdd (|String| s, |ind|Start = parser.NextStart, |Message|)
		if .OK //  multiple errors... per parse gets STUPID.
			return .ErrorAlwaysAdd(s, start)
	

	function OK (|bool|)
		Return !.ErrorStart


	function ErrorEvent (|int|Start, |int| ExpectedBits, |int| RealBits)
	    visible true // called directly by the tokeniser... sorry :PPPP

		|| Err = FastString.new
	    ifn RealBits & kIllegalChar
			ifn ExpectedBits and Realbits and FindError(expectedbits)
	            err <~ "Unexpected "
			  else
	            for (5) { // 5, in case there is a bug causing infinite loop.
	                ExpectedBits = MessageErrorSub( err, ExpectedBits, Realbits )
	            } (ExpectedBits)
	            err <~ " but found "

		if (RealBits == kEndOfLine)
			err <~ "end-of-line"

		  elseif !RealBits
			err <~ "end-of-data"

		  else
			if parser.NextStart <= start
				parser.NextStart = start + 1

			if (RealBits & kIllegalChar)
				err <~ "Found illegal-character "
	            || illegal = parser[start]
	            if (illegal.CanPrintAsNormalChar) 
	                err <~ '\''
	                err <~ parser[start]
	                err <~ '\''
				  else
	                err <~ "0x"
	                err.AppendHex( illegal )
	                err <~ ' '
			  else
	            err <~ '\''
	            |ind| N = parser.NextStart min (start + 100)
	            err <~ parser[ start, N, @nil ].escape
	            err <~ '\''

		Parser.ErrorAdd( err, start )


	function FindError (|int| num, |int|)
		if num == kThing: return kThing
		for (_ErrorNames) (Key)
	        || i = key.parseint|int|
			if (num & i) == i
				return i


	function MessageErrorSub (|FastString| fs, |int| num, |int| ButFound, |int|)
		|| e = ._ErrorNames
		if !e
			e = Dictionary()
			._ErrorNames = e
	        e[kTemporal]           = "temporal"
	        e[kTemporalSyx]        = "declaration"
	        e[kTemporalWord]       = "statement"
	        e[kEndOfLine]          = "end-of-line"
	        E[kColon]              = "':'"
	        E[kOppSyx]             = "operator"
	        E[kOppWord]            = "operator"
	        E[kOpp]                = "operator"
	        E[kOppTemporal]        = "temporal-operator"
	        E[kThing]              = "a name"
	        E[kThingWord]          = "a name"
	        E[kThingSyx]           = "something"
	        E[kIllegalChar]        = "illegal-character"
	    
		if fs.length
			fs <~ " / "
		  else
			fs <~ "Expected "
		
		|| BestValue = FindError(num)
			|| s = e[ BestValue ]
				fs <~ s
			else
				fs <~ "something"
			return num &~ BestValue
		
		fs <~ "something else"



struct MessagePosition
	linkage
		cpp_part MsgPos
		noauto
	
	|MemoryLayer--|     Layer
	|int|               Position
	|uint|              Length
	|MsgParseFlags|		Flags
	|uint16|            Tag
	
	destructor
		parser.using = *self
	    .Layer.use 
	
	function SyntaxUsingComplete (|object| idk=nil)


api list.JDB2
	cpp_name jdb2
	visible
	if (Self)
		printline self|message|.jdb_
	  else
	    "(nil)"


api list.JDB3
	cpp_name jdb3
	visible
	if (Self)
		printline self|message|.jdb_(3)
	  else
		"(nil)"


function byte.CanPrintAsNormalChar (|bool|)
	return (self < 127 and self >= 32)


// remove tokenhandler_fp, its just parsehandler!
prototype ParseHandler			(|int| Start, |message?| Parent=nil, |Message?|)
prototype TokenHandler_fp		(|int| Start, |message?| parent=nil, |Object?|)
prototype fnIDGenerator			(|int| Start, |int| End, |syntax| f,   |String|)
prototype SorterComparerMsg		(|message| a, |message| b, |bool|)



struct ParserLineAndIndent
	|int|			Lines 
	|int|			Indent
	|int|			Commas
	|int|			Pos
	|bool|			IsDebug


 
role MessageRoot (Message)
	contains Message
	linkage
		noauto
		pragma noearlyfree
	operator isa (|string| s, |bool|)
		return .FilePath isa s

