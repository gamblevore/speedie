

// Huff Coder
// unfinished.

/*
struct RangeCoderItem
	|uint16|  Code
	|uint16|  Depth


class RangeCoder (list)
	contains RangeCoder
	|int|   Char = -1
	|int|   Freq = 0
	|int|	Code = 0
	
	function Place (|RangeCoder| after)
		opt norefcounts
		|| f = .freq
		while
			|| n = after.next
			if !n or n.freq >= f
				after.next = self
				exit
			after = n


	function Encode (|&RangeCoderItem| n, |int| Depth=0, |int| Code=0)
		opt norefcounts
		if n
			|| k = .Char
			if k >= 0
				|| c = &n[k]
				c.code = code
				c.depth = depth
		.position = depth++
		.code = code
		code <<= 1
		|| l = .first
		|| r = l.next
			l!.encode(n, depth, code)
			r!.encode(n, depth, code|||1)


	function LinkAll
		opt norefcounts
		while
			|| l = .first
			|| r = l.next #loop
			|| Comb = RangeCoder(-1,  l!.freq + r.freq)
			Comb.place(r)
			Comb <~ l
			Comb <~ r
	
	
	function PrintScore
		|| fs = faststring()
		for s.flat in self
			if s.freq and s.char >= 0
				fs <~ s.char|byte|
				fs <~ "  |  "
				for i.down in s.position
					fs <~ ('0' + s.code[i])|byte|
				fs <~ "\n"
		printline fs
					
				
	render
		if .freq
			fs <~ .freq
			fs <~ ": "

		if .char >= 0
			fs.appendescape(.char|byte|.render)
		  elseif .hasany
			fs <~ "(" 
			|| any = false
			for ch in self
				if any
					fs <~ ",  "
				any = true
				ch.render(fs)
			fs <~ ")"
			
		
	module
		helper Sorter (SorterComparerBool)
			target debug
				if a|RangeCoder|.freq == b|RangeCoder|.freq
					return a|RangeCoder|.char > b|RangeCoder|.char
			return a|RangeCoder|.freq > b|RangeCoder|.freq 


		function EncodeBytes (|string| input, |faststring| fs)
			|RangeCoderItem[256]| Table = nil
			.CollectBytes(input, &Table[0])
			
			|uint64| Bits
			|int|    Bits_Used
			fs.FreeSize = input.length + 96 // The table fits in 96 bytes?
			|| ptr = fs.ResultPtr + fs.Length
			|| Code = 0
			|| Remain = 8
			for b in input
				|| c = table[b]
				|| d = c.Depth
				code <<= d
				code |= c.Code
				Remain -= d
				if Remain <= 0
					ptr++[] = code >> -Remain
					Remain += 8
					code >>= 8 // better to accumulate 64 bits... but lets do that next time.
			if Remain > 0 
				ptr++[] = code >> -Remain
			
	//		|| bytes = (Bits_Used + 7) >> 3
	//		"${input.strsize} to ${bytes.strsize}"
					
			
		function CollectBytes (|string| input, |&RangeCoderItem| items=nil)
			|int[256]| Histo = nil
			|| root = RangeCoder()
			|| h = &histo[0]
			
			for b in input
				h[b]++
	
			for i in 256
				|| hi = h[i]
					root <~ RangeCoder(i, hi)
			
			root.sort(&RangeCoder.sorter)
			root.LinkAll
			|| s = root.first!
			s.Encode(items)
	
			root.PrintScore
	
		
		function Test (|string| s = "he ties the tether")
			|| fs = faststring()
			.EncodeBytes(s, fs)
				
*/
