

// Holistic Jeebox Compressor
// !!Experimental!!
// !!TESTS SHOW IT NEEDS MORE WORK TO IMPROVE RATIO!!


helper StringReader.HollyPart (|message| root, |stringreader|)
	|| s = .NextMsg(root)
		if s == @bin
			s.name = s.name.Decompress
		rz = s.name.Stream()
		if !rz.HasAny
			rz = nil


function String.HollyDecode (|message|)
	return .Stream.hollydecode


function StringReader.HollyDecode (|message|)
	require .ExpectJbin
	|[messageid]| Recent = []
	|| root    = .NextMsg(@tmp, "ћ")
	|| Nodes   = .nextmsg(root).int
	recent <~ (messageid(), nodes)
	|| Strings = .HollyPart(root)
	|| Types   = .HollyPart(root)
	|| lengths = .HollyPart(root)
	|| Commn   = .HollyPart(root)
	|| Tree    = .HollyPart(root)
		|[messageid]| Common = []
		|[messageid]| Palette = []
		.HollyBuildPalette(strings!, types!, lengths!, palette)
		.HollyBuildCommon(commn!, palette, common)
		rz = .HollyDecodeSub(tree, Palette, common, Recent)



helper StringReader.HollyBuildCommon (|StringReader| Common,  |[messageid]| Palette,  |[messageid]| Out)
	opt norefcounts
	while Common.HasAny
		out <~ Palette[Common.small]



helper StringReader.HollyBuildPalette (|StringReader| Str,  |StringReader| Ty,  |StringReader| Ln,  |[messageid]| Palette,  |int|)
	opt norefcounts
	Palette <~ (messageID(), ty.length)
	while Ty.HasAny
		|| fn = Ty.Byte|syntax|						#expect (self, "Bad syntax")
		(rz < Palette.Length)						#expect	(self, "Too many IDs")
		(ln.HasAny)									#expect	(self, "Not enough lengths")
		Palette[rz++] = MessageID(Str.str(Ln.Small), fn, rz)
	(ty.Length == Palette.Length)					#expect (self, "Too few IDs")



helper StringReader.HollyDecodeSub (|StringReader| Tree,  |[messageid]| Palette,  |[messageid]| Common,  |[messageid]| Recent,  |message|)
	opt norefcounts
	
	|message| parent
	|| PalPoint = 0
	|| OutCount = 0
	while Tree.HasAny
		|| Raw = Tree.Small - 8
		if Raw < 0
			parent = parent.Upward(9+Raw)
			if !parent
				!(tree.HasAny)						#check (self, "Hit ceiling")
			continue
		
		|messageID| MID
		|| Ref = raw>>1
			if Ref <= 72
				MID = Common[Ref-1]					#expect (self, "Bad Common")
			  else
				MID = Recent[73+OutCount-Ref]		#expect (self, "Bad Recent")
		  else
			MID = Palette[PalPoint++]				#expect (self, "Bad Palette")
		
//		ћ.print(ref, mid, OutCount)
		|| Item = mid.msg(parent)
		if Raw & 1
			parent = Item
			rz := Item
		mid.id = OutCount
		Recent[OutCount++] = Mid



struct ћ
	|(dictionary of messageID)[64]| 	Dicts
	|faststring|						Lengths
	|faststring|						Tree
	|faststring|						Types
	|faststring|						Common
	|faststring|						Strings
	|[messageid]|						Palette
	
	function init
		.Lengths = Faststring()
		.Tree = FastString()
		.Types = FastString()
		.Common = FastString()
		.Strings = Faststring()
		.Palette = []

		for i in –count .Dicts
			.Dicts[i] = dictionary()
	
	
	function jbin.addcomp_view (|faststring| src, |int| Strength, |string| name)
		CompressionStats.All.Clear
		if CompressionStats.All.Live and name
			print name
			print ": "
		.AddComp(src, strength)
		CompressionStats.All.Clear


	function Encode (|message!| root, |jbin!| j)
		.init
		j <~ _JbinHeader
		j.enter(@tmp, "ћ")
		.EncodeSub(root, j)
		j.addcomp_view(.strings, 1, "string")
		j.addcomp_view(.types,   1, "type")
		j.addcomp_view(.lengths, 1, "length")
		j.addcomp_view(.Common,  0, "")
		j.addcomp_view(.Tree,    1, "tree")
		j.exit


	helper Find (|message| m, |messageID|)
		opt norefcounts
		|| v = .Dicts[(m.func)|int| & 63]
			return v[m.name]
	
	
	helper MakePlace (|message| m, |&messageID|)
		opt norefcounts
		|| pl = &.Dicts[(m.func)|int| & 63]
		|| v = (*pl) init dictionary()
		return v.MakePlace(m.name)|&messageID|


	helper EncodeSub (|Message| ch,  |jbin| j)
		opt NoRefCounts
		for s.flat in ch												// SCORE
			|| Where = .MakePlace(s)
			|| id = Where[0]
				id.Frequency++
			  else
				id = MessageID(s, .Palette.length),  *where = id
				id.frequency = 1
				id.Position = 4K
				.Palette <~ id
				.strings <~ id											// STRINGS
				.types <~ id.func										// TYPES
				.lengths.AppendSmall(id.length)							// LENGTHS
		
		"sorting ${.palette.length} items"
		(&MessageID.ByFreq).sort(.Palette) // this is awful. we need a way to do this but faster.
		for i in 64
			|| t = .Palette[i] #loop
			.Common.AppendSmall(t.id)
			t.position = i + 1
		
		|| OutCount = 0
		while ch
			|| depth = 0,   || Next = ch.FlatNextDepth(depth)
			|| ID = .find(ch)!
			|| Ref = 0
			if id.frequency
				id.frequency = 0
			  else
				Ref = ID.Position
				if ref > 72
					Ref = 73 + (OutCount - ID.id)
			
			id.id = OutCount
			|| Combined = 8 + (Ref<<1) + (depth == 1)
//			hrint(Combined)
			.tree.AppendSmall(Combined)									// DOWN TREE
			OutCount++
			if depth < 0
				depth = -depth
				while depth												// UP TREE
					|| item = depth min 8
					.tree <~ (item-1)|byte|
					depth -= item
			ch = next

		j.AddInt(OutCount)

	
	
	helper message.HollyEncode (|faststring| fs)
		|ћ| Hol
		hol.encode(self, fs)
	
	
	module {
	function TestHolly (|file| input)
		require input.MustExist
		|| p = input.path
		if input isa "jbin"
			p = input.trimext
		|| out = p.AddExt("hol").file
		|| pp = input.parse
		|| sout = out.out
		if pp and sout
			|ћ| hol
			compressionstats.all.live = true
			hol.encode(pp, sout)
			"total: ${input.size.strsize} to ${sout.length.strsize}"
			sout = nil
			|| back = out.in!.HollyDecode
				message.TreeCompare(pp, back)
}

