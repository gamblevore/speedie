
	
function StringReader.CompressInto (|object| dest, |int| Strength=mzlab.default, |?&compressionstats| st=nil) 
	|| fs = faststring.UseAsOutput(dest)				#require
	st = st.start
	fs <~ "mz\n\02"
	fs.AppendInt(.length)
	st.Out += 8
	while .HasAny
		|| str = .str(4MB)
		|| O = fs.CompressChunk(str, strength)
		|| N = str.length
		st.LiveUpdate(N, O, true)
		fs.flush
	st.end


		
function StringReader.DecompressInto (|object| dest,  |uint| Limit=512MB,  |&compressionstats| st=nil,  |bool|)
	|| header = .str(4)
	expect (header.IsCompressed)					(self, "Can't decompress non-mz data")
	|| Remain = .UInt(4)
	expect (Remain <= Limit)						(self, "mz would decompress too large")
	
	|| fs = FastString.UseAsOutput(dest)
		rz = .DecompressIntoSub(fs, Limit, st.start, Remain)
			

helper StringReader.DecompressIntoSub (|faststring| fs,  |int| OutLim,  |&compressionstats| st, |int| OutRemain, |bool|)
	while OutRemain > 0
		|| InSize = .UInt(4) - 4
		expect (InSize < 16MB) 							(self, "mz chunk too large")
		|| ChunkData = .str(InSize)
		expect (ChunkData == InSize) 					(self, "mz input too short")
		|| OutSize = fs.DecompressChunk(ChunkData)		#loop
		OutRemain -= OutSize
		fs.Flush
		st.LiveUpdate(InSize+4, OutSize, false)
	st.end
	
	return !OutRemain							#expect (self, "mz output too big" )
			
		
helper faststring.CompressChunk (|string| Input, |int| level, |int|) 
	cpp_wrapper JB_Str_CompressChunk


helper faststring.DecompressChunk (|string| Input, |int|) 
	cpp_wrapper JB_Str_DecompressChunk

