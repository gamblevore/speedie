
	
function StringReader.CompressInto (|object| dest, |int| Strength=mzlab.default, |?&compressionstats| st=nil) 
	expect (self!=nil) ("Nil object given to CompressInto")
	|jbin| j = faststring.use(dest)				#require
	st = st.start
	(strength)
	j <~ _JbinHeader
	j.enter(@tmp, "Âµz")
	j.addint(.length)
	j.enter(@arg)
	while .hasany
		|| str = .str(1MB)
		|| Place = j.OpenSection
		j.CompressChunk(str)
		j.CloseSection(Place.x, place.y, @bin)
		st.LiveUpdate(str.length, j.length - place.x, true)
		if !.NoMoreChunks
			j.flush // we are calling it after anyhow	
	j.exit(2)
	j.flush			// we definitely need to flush it.  Im serious!
	j.CompressChunk(nil)						// cleanup
	st.end


helper StringReader.DecompressInto (|object| dest,  |int| lim=int.max,  |&compressionstats| st=nil,  |bool|)
	|| fs = faststring.use(dest)				#require
	if !.IsCompressed
		fs <~ .readall
		return true

	.ExpectJbin
	|| mz = .NextMsg(@tmp)
	|| Remaining = .NextMsg(mz, @num).int
	|| arg = .NextMsg(mz, @arg)

	ifn (Remaining > 0) and (Remaining <= lim) and (arg)
		error (self, ("mz would decompress too large", "Invalid mz header")(Remaining > lim))
	  else
		st = st.start
		while (|| c = .NextMsg(arg, @bin))
			|| Expected = fs.DecompressChunk(c.name) #loop
			Remaining -= Expected
			fs.Flush
			st.LiveUpdate(c.length, Expected, false)
			c.remove
		st.end
	return !.Data.WentBad

		
helper faststring.CompressChunk (|string?| Input, |int| level = 2) 
	description "Passing nil Inputnil, free the internal buffers" 
	nil self
	cpp_wrapper JB_Str_CompressChunk


helper faststring.DecompressChunk (|string| Input, |int|) 
	cpp_wrapper JB_Str_DecompressChunk

