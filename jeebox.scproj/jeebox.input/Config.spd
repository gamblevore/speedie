

// use a message... as a dictionary!!
// wierd but efficient


role config (message)
	linkage
		pragma noearlyfree
	iterator
		|| C = .conffirst
		while (C)
			yield C
			C++

	function ConfFirst (||)
		|| l = .confarg
			return l|message|.first
			
	syntax cast (|string|)
		return .name
	
	function Save (|bool|)
		|| f = .obj as file
			|| p = .render
			if p.ParseWithError(nil)
				return f.smartdata(p) 


 // why would a conf-file be so big?
function file.Conf (|int| lim = 1MB,  |config|)
	opt norefcounts
	if .exists
		rz = .parse(lim)|config|
	rz := message()
	rz.obj = self


extend message
	function ConfArg (|config|)
		opt norefcounts
		if self == @arg or nil
			return self
		|| w = (.last, .next)(self == @tmp)
		if w == @arg
			return w

	function SyntaxAccess (|string| key, |bool| Err=false, |config|)
		cpp_part GetConf
		opt norefcounts
		for item in .confarg
			if item ~= key
				|| f = item.first
					return f
				return item // whatever
		if err
			error (self, key + " not found.")
		
	function Value (|string|)
		if self
			if self == @tmp and self in @arg
				return .firstname
			if self != @arg
				return .name
			return .FirstName
