

// use a message... as a dictionary!!
// wierd but efficient


role config (message)
	linkage
		pragma noearlyfree
	iterator
		|| C = .conffirst
		while (C)
			yield C
			C++

	helper ConfFirst (||)
		|| l = .confarg
			return l|message|.first
			
	syntax cast (|string|)
		cpp_part AsString
		if self
			return .Value
			
	syntax cast (|int64|)
		cpp_part AsInt
		return .int
			
	syntax cast (|f64|)
		cpp_part AsFloat
		return .float
	
	syntax cast (|messagetable|)
		cpp_part AsTable
		return .Dict(true)
	
	function Save (|bool|)
		|| f = .path
			|| p = .render
			if p.ParseWithError(nil)
				return f.smartdata(p)
	
	function Path (|file|)
		return .obj as file
	
	module
		function Create (|string| path,  |config|)
			if path[] == '~'
				path = path.pathfix
			if (path ~= "default") or !path
				path = app.FileName.lowercase + ".box.pref"	
			if path[] != '/'
				path = file.Prefs(path)
			return path.file.config

 // why would a conf-file be so big?
function file.Config (|int| lim = 1MB,  |config|)
	opt norefcounts
	if .exists
		rz = .parse(lim)|config|
	rz ?= message()
	rz.obj = self


extend message
	function ConfArg (|config|)
		opt norefcounts
		if self == @arg or nil
			return self
		|| w = (.last, .next)(self == @tmp)
		if w == @arg
			return w

	function SyntaxAccess (|string| key, |bool| Err=false, |config|)
		cpp_part GetConf
		opt norefcounts
		for item in .confarg
			if item ~= key
				|| f = item.first
					return f
				return item // whatever
		if err
			error (self, key + " not found.")
		
	function Value (|string|)
		if self
			if self == @tmp and self in @arg
				return .firstname
			if self != @arg
				return .name
			return .FirstName
