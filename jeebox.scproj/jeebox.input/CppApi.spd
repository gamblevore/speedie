
/*
	Jeebox internals. By Theodore H. Smith...
*/




export_api jb {
ExportPlace "Examples"
libraryname "Jeebox"

class_api Message (msg)
	api name (|string|)
		.nil$
		return .name
		description "The name of the node!"
	
	api func (|syntax|)
		.nil$
		return .func
		description `The node's syntactic-type. For example parsing "{}" would give a node of type 'arg', but parsing "()" would give a node of type 'list'.`
	
	api position (|int|)
		.nil$
		return .position
		description "The byte-position of the original syntax that created this node. Useful for error-reporting."
	
	api tag (|&nil|)
		.nil$
		return .obj|&nil|
		description "Attached user-defined value."
		 
	api nameset (|string| Result)
		.nil$
		.name = Result
		description "Sets the name."
		
	api funcset (|syntax| Result)
		.nil$
		.func = Result
		description "Sets the syntactic type"


	api positionset (|int| Result)
		.nil$
		.position = Result
		description "Sets the byte-position. Jeebox doesn't use this value other than to store it for you. You might want to set the position if you created some nodes yourself via jb_msg_create. Obviously those nodes wouldn't have a position."


	api tagset (|&nil| Result)
		.nil$
		.obj = Result|object|
		description "In case you want to attach a user-defined value to the node, to use for your own purposes."


	api firstset (|message| Result)
		.nil$
		.first = Result
		description "Inserts 'Result' as the first child, and safely-removes it from it's old tree. You don't need to do anything to keep the next/prev/parent/etc values correct! They are updated for you. Same for all tree-node setters: jb_msg_lastset, jb_msg_prevset, jb_msg_nextset"


	api lastset (|message| Result)
		.nil$
		.last = Result
		description "Same as jb_msg_firstset. Inserts 'Result' as the last child."

		
	api prevset (|message| Result)
		.nil$
		.prev = Result
		description "Same as jb_msg_firstset. Inserts 'Result' as our prev-sibling. Does nothing if 'self' has no parent."

		
	api nextset (|message| Result)
		.nil$
		.next = Result
		description "Same as jb_msg_firstset. Inserts 'Result' as our next-sibling. Does nothing if 'self' has no parent."


	api first (|message|)
		.nil$
		return .first
		description "Gets the first child of this node, if it exists."

		
	api last (|message|)
		.nil$
		return .last
		description "Gets the last child of this node, if it exists."

		
	api prev (|message|)
		.nil$
		return .prev
		description "Gets the previous-sibling, if it exists."

		
	api next (|message|)
		.nil$
		return .next
		description "Gets the next-sibling, if it exists."

		
	api parent (|message|)
		.nil$
		return .parent
		description "Gets the parent of this node, if it exists."


	api flatnext (|message|)
		.nil$
		return .flatnext
		description "Lists over the tree as if it were one-dimensional! A kind of 'stateless-tree-traversal'!"

		
	api flatafter (|message|)
		.nil$
		return .flatafter
		description "If you want to loop over all the nested-children (descendants) of one node, but that node is contained in a tree (it's not the root), you'll need to call this function first. Returned node is the 'end-marker'. Once you reach it, you stop. Example:
	Message* SearchMe = TheMsgYouWantToSearch();
	Message* LoopEnd = jb_msg_flatafter(SearchMe);
	for (Message* LoopCurr = SearchMe;  LoopCurr!=LoopEnd;  LoopCurr = jb_msg_flatnext(LoopCurr)) {
		DoSomethingTo(LoopCurr); // every descendant of SearchMe comes here!
	}
"

	api root (|message|)
		.nil$
		return .root
		description "Finds the top-most parent."

		
	api remove
		.nil$
		.remove
		description "Removes the node from the tree."

		
	api render (|int| mode, |string|)
		.nil$
		if mode & 1
			rz = .renderjbin
		  else
			rz = .render
		if mode & 2
			rz = rz.compress
		description "Renders the tree as a string!"

	
	
//	api ast (|string|)
//		.nil$
//		return .renderast
//		description "Renders the structure of the tree in a human-readable format. Useful to understand the parse-tree. This gives you an idea of how to move across the tree using jb_msg_child/prev/parent/etc!"
//			
//	api parseast (|message|)
//		.nil$
//		return .parseast
//		description "Does the opposite of jb_msg_ast, almost. You'll need to parse the string first, then call jb_msg_parseast"
	
	api copy (|message|layer, |message|)
		.nil$
		return .copy(layer)
		description "Copies the node's entire tree structure, positions, names and all."
	
	api create (|Syntax| Type, |string| Name, |message|)
		type.nil$
		return .msg(Type,name)
		description "Creates a new node with the type and name provided.

		The node is created as the last child of 'self'. If 'self' is nil... the node is created with no parent (this is fine)."


	api error (|string| ErrorMsg)
		.nil$
		errorreceiver.NewError( self, ErrorMsg )
		description "Lets you add your own error messages to the tree."
	
	api expect (|syntax| Type, |string| name, |message| ErrPlace, |message|)
		if (self)
			if .Expect(type, name)
				return self
		  elseif (Errplace)
			errplace.AccessErr(type, name, nil)
		
		description "Test the name and type, (or existance) of a message node."

	api access (|syntax| Type, |string| name, |bool| IsError, |Message|)
		Opt NoRefCounts
		return .find(Type, name, IsError)



class_api Syntax (syx)
	api name (|string|)
		.nil$
		return .name
		description `The syntax's short-name, for example "a=b" would return "rel".`
		 
	api longname (|string|)
		.nil$
		return .longname
		description `The syntax's human-readable name, for example "a=b" would return "relationship".`


class_api String (string)
	// cpp_name JB_String, cpp_part string
	api address (|cstring|)
		require (self)
		return .addr|cstring|
		/*description `The cstring returned may become invalid, if you call jb_decr on this JBString or calling jb_msg_nameset removed the last reference to this string. Just use this value before doing these things.`*/
		
	api length (|int|)
		return .length
		description "String length, in bytes. A nil-string is acceptable and gives 0 length."
	
	api compress (|string|)
		return .compress
		description "Compresses the string using the inbuilt 'mz' format."
		
	api decompress (|string|)
		return .decompress
		description "Deompresses the string using the inbuilt 'mz' format."
	
	api copy (|string|)
		return .copy
		description `Copies the string into a new string, which you can modify the contents as you like, before passing it to anything else. (Strings are meant to be "immutable" (their content doesn't change), but it's OK to modify it right after copying.`
		
	api parse (|string|path, |message|)
		require (self)
		return jb_api.parse(self, path)
		description "Parses the string into a tree! Parsing is the most important function in Jeebox! Returns nil if invalid jeebox code is detected. You must call jb_errors to detect that parse-error or else you canâ€™t parse more jeebox code.

The optional path is not used for anything except generating better error messages, but good error-messages are quite important!"

	api escape (|string|)
		return .escape
		description `Turns a string like "${}" into a string like "\${}". To make it safe to be parsed b Jeebox.`
	
	api print
		print self
		description "Prints this string to console. Useful for debugging."
		
	api printline
		printline self
		description "Same as jb_string_print except it ends with a \\n."
		
	api int (|message|m, |int64|)
		return .ParseInt(m)
		description "Parses this string into an integer. Allows hex also, like '0xffff'. If you pass a 'message' into this, then invalid strings will get reported into jb_errors() "
		
	api float (|message|m, |Float64|)
		return .Parsefloat(m)
		description "Parses this string into a double-precision float. If you pass a 'message' into this, then invalid strings will get reported into jb_errors() "


api syntax (|string| name, |syntax|)
	opt norefcounts
	return Syntax.Func(name)
	description `Looks up the syntax of that name from the syntax-table. The name must be in short-form, like "arg", not "argument". (The list of short-form names is in api.h, you will see $arg, $acc... its those minus the $.)`


api str (|cstring| Str, |int| Length, |&nil| Release, |&nil| Tag, |string|)
	if !str or length < 0
		return "" // why not?
	Length ?= str.length
	return string.FromPtr(str|&nil|, Length, Release, Tag)

	description "Creates a JBString from a c-string. Expects the c-string to remain unchanged until the JBString is freed. Length is optional. Can optionally pass a call-back to release your c-string, during freeing the JBString."


api cstr (|cstring| Str, |string|)
	if (str)
		return string.FromPtr(str|&nil|, str.length)

	description "Creates a JBString from a c-string. Expects the c-string to remain unchanged until the JBString is freed."


api delete_ (|object| obj)
	description "Deletes the object from memory. Don't call directly, use jb_incr jb_decr."


api errors (|Message|)
	Opt NoRefCounts
	return jb_api.errors
	description "Returns a list of errors as children of the returned node. Also clears the error-list. Each child's name is the error-description and each child's position is the error-position."



api ok (|bool|)
	Opt NoRefCounts
	return stderr.ok
	description "Returns if any errors were detected. Doesn't change anything. Call jb_errors to actually get the error-list and remove them."


api debug (|object|o)
	Opt NoRefCounts
	o.debugprint
	description "Prints a description of this object, useful for debugging."


api init (|int| Flags, |int|)
	return jb_api.Init(flags)
	description "Inits Jeebox. Call this before any other Jeebox functions. Pass 1 to succeed silently, or else a message is printed. Returns zero for success.
	
If jb_init fails it will try print a debug message. If jb_init returns 0x10000 that means an out-of-memory error occurred. You can free memory and try again."


api shutdown (|int|)
	stderr.clear
	jb_api.JB_LibShutdown
	description "Frees all memory used by jeebox!"


api version (|int|)
	return __time_id__


api readfile (|cstring| path, |bool| AllowMissingFile, |string|)
	jb_api.Init
	return file.ReadCPath(path, AllowMissingFile)
	description "Reads entire file at this path. Relative paths are allowed. Will create errors if the file can't be read for any reason.
	
	If AllowMissingFile is true then it's OK for the file to not exist, no error is created in that case. This helps make your code is a bit less pedantic."

}




module JB_API
	linkage
		cpp_part API

	|uint16| NilHappened_ = 0 // save 2 bytes XD
	cpp_wrapper JB_SP_Init (|&cstring| Args=nil, |bool| IsThread=false, |int|)
	cpp_wrapper JB_LibShutdown ()


	function Parse (|stringthatwasreadsafely?| s, |string| path="", |message|)
		require s // out of memory
		|| L = (Message).CreateLayerAndUse(path, s)
		if (L?)
			|| Result = s.parse
			(message).restore
			return result

	
	function Errors (|Message|)
		Opt NoRefCounts
		require !stderr.ok
		rz = stderr.errors
		for err in rz
			err.name = err.render
		stderr.clear


	function Init (|int| flags = 0, |int|)
		require (stderr==nil)
		|| ErrCode = jb_api.JB_SP_Init
			return ErrCode
		
		target !NoSelfTest // compile like: "speedie jeebox.scproj --target=NoSelfTest"
			|| msg = Jeebox.Test
			if flags & 1
				printline msg
		
		if !stderr.ok
			|| f = stderr.errors.first
				print f.name
			stderr.clear
			return -1000
	

	function NilHandler (|bool|)
		require stderr.ok
		
		debugger
		if ++.NilHappened_ < 16
			.NilCallBack("Jeebox: NilObjectError in caller.")
		  elseif .NilHappened_ == 16
			.NilCallBack("Jeebox: Too many NilObjectErrors. Silencing.")
	
	
	function NilCallBack (|string| ErrorMessage)
		printline ErrorMessage // usecallback instead.


	function message.Nil (|bool|)
		opt inline
		cpp_name JB_Msg_NilCheck
		return self or JB_API.NilHandler

	function syntax.Nil (|bool|)
		opt inline
		cpp_name JB_Syx_NilCheck
		return self or JB_API.NilHandler

