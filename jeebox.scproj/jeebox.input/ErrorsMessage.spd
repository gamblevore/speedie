

extend_module ErrorReceiver
	function NewWarning (|Message| node=nil, |string?| Desc=nil, |string?| path=nil)
		.NewErrorSub(node, desc, path, ErrorSeverity.warning)
	
	function NewProblem (|Message| node=nil, |string?| Desc=nil, |string?| path=nil)
		.NewErrorSub(node, desc, path, ErrorSeverity.problem)

	function NewError (|Message| node=nil, |string?| Desc=nil, |string?| path=nil)
		cpp_part NewErrorWithNode
		.NewErrorSub(node, desc, path, ErrorSeverity.Error)

	helper NewErrorSub (|Message| node, |string?| Desc, |string?| path, |errorseverity| sev)
		opt norefcounts
		|| Lower = stderr.LowerErrorsTo
			sev = lower|int| min sev
		if stderr.CanAddMore(sev)
			if desc == nil
				desc = node.MiniName("Unexpected ")
			nil|errorreceiver| <~ Error(node.FindNotInserted, desc, sev, path??"")


function Message.ErrorLocation (|string| desc = "", |string|)
	return Error(self, desc).render


function Message.FilePath (|string|)
	Opt NoRefCounts
	|| O = .memorylayer.obj
	if !__IS_LIBRARY__ and (O isa File)
		return O.path
	if O isa String
		return O


function Message.OriginalParseData (|string|)
	Opt NoRefCounts
	|| D = .memorylayer.obj2
	if D isa string
		return D


extend_module Error
	function CantParseNum (|Message| Where, |string| num, |int| Pos, |bool| Overflow)
		visible // for lib
		|| str = "Numeric overflow parsing number" 
		if !Overflow
			Str = "Canâ€™t parse number. Found: " + num[pos].render
		nil|errorreceiver| <~ error(where, str)


	function From (|message?| self, |error|)
		opt norefcounts
		require self
		if self != @arg
			return .AsError
		rz = error()
		for s in self
			rz <~ s.AsError
	
	
function message.AsError (|error|)
	rz = error(nil)
	|| arg = .Last
	if arg == @arg
		rz.position = arg..pos.int|int|
		rz.path	= arg..file.value
		rz.severity = arg..severity.int|errorseverity|
		rz.name	= arg[@str].name
	  else
		rz.name = .name
		rz.path = ""

