

extend_module ErrorReceiver
	function NewWarning (|Message| node=nil, |string?| Desc=nil, |string?| path=nil)
		.NewErrorSub(node, desc, path, ErrorSeverity.warning)
	
	function NewProblem (|Message| node=nil, |string?| Desc=nil, |string?| path=nil)
		.NewErrorSub(node, desc, path, ErrorSeverity.problem)

	function NewError (|Message| node=nil, |string?| Desc=nil, |string?| path=nil)
		cpp_part Latchkum
		.NewErrorSub(node, desc, path, ErrorSeverity.Error)

	function NewCriticalError (|Message| node=nil, |string?| Desc=nil, |string?| path=nil)
		.NewErrorSub(node, desc, path, ErrorSeverity.Critical)

	helper NewErrorSub (|Message| node, |string?| Desc, |string?| path, |errorseverity| sev)
		opt norefcounts
		|| Lower = stderr.LowerErrorsTo
			sev = lower|int| min sev
		if stderr.CanAddMore(sev)
			if !desc
				desc = node.MiniName("Unexpected ")
			nil|errorreceiver| <~ Error(node.FindNotInserted, desc, sev, path??"")



function Message.FilePath (|string|)
	Opt NoRefCounts
	|| O = .memorylayer.obj
	if !__IS_LIBRARY__ and (O isa File)
		return O.path
	if O isa String
		return O


function Message.OriginalParseData (|string|)
	Opt NoRefCounts
	|| D = .memorylayer.obj2
	if D isa string
		return D


extend_module Error
	function CantParseNum (|Message| Where, |string| num, |int| Pos, |bool| Overflow)
		visible // for lib
		|| str = "Numeric overflow parsing number" 
		if !Overflow
			Str = "Canâ€™t parse number. Found: " + num[pos].render
		nil|errorreceiver| <~ error(where, str)

