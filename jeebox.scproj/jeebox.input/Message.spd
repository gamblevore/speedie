
/*
	Jeebox internals. By Theodore H. Smith...
*/



class Message (list)
	linkage
		cpp_part Msg
		visible true

	description "The Message class is used like this: First you parse a string to create a tree of nodes.

After that, you now have a tree-data-structure that represents your data. The Message class is similar to XML or JSON or even a sourcecode-AST. But superior to all of them.
	"
////////////////////////////////
	contains Message
	|string|				Name
	|Syntax|				Func
	|Byte|					Indent
	|uint16|				RangeLength


////////////////////////////////		
	|MsgParseFlags|			Flags				// Flags: Output only. Change freely or reuse.
	|uint16|				Tag					// Tag:   Jeebox does not use this.
////////////////////////////////		
			
	constructor (|Message!| other)
		cpp_part ConstructorCopy
		super.constructor
		
		.Position	= other.Position
		.Name		= other.Name
		.func		= other.func
		.Obj		= other.obj
		.indent		= other.indent
		.flags		= other.flags ||| parser.using.flags // insertedness
		.RangeLength= other.RangeLength
		.Tag		= other.Tag


	constructor
		cpp_part ConstructorEmpty
		.func = @arg
		.Position	= parser.Using.position
		.flags		= parser.using.Flags
		.RangeLength= parser.Using.Length
		.tag		= parser.Using.Tag

			
	constructor (|Syntax| Func=1|Syntax|, |string| Name="")
		cpp_part ConstructorNormal
		.name		= name
		.func		= func
		.Position	= parser.Using.Position
		.flags		= parser.using.Flags
		.RangeLength= parser.Using.Length
		.tag		= parser.Using.Tag

	
	constructor (|Message| Parent, |Syntax| Func, |int| BytePos, |string| name, |int| RangeLength=0)
		cpp_part ConstructorRange
		super.constructor(Parent)
		
		.name		= name
		.Position	= BytePos
		.func		= func
		.RangeLength= RangeLength
		.flags		= parser.using.Flags
		.tag		= parser.Using.Tag


///////////////////////////////////////////////////////////////////////////////
	
	function Copy (|message| pos_msg=nil, |Message!|)
		opt norefcounts
		rz = pos_msg ?? self
		using rz
			rz = .copysub(pos_msg)
	
	
	helper CopySub (|message?| P = nil, |Message!|)
		opt norefcounts
		rz = message(self)
		if P
			rz.position = P.position
			rz.rangelength = P.rangelength
		for v in self
			rz <~ v.CopySub(P)


	operator matches (|message| m, |bool|)
		return .func == m.func  and  .name ~= m.name


	operator Starts (|string| s, |bool|)
		return .name[0, s, true]


////////////////////////////////////////////////////////////////////////////////
	
	
	function string.IsStatementName (|bool|)
		return (jeebox.cswordmiddle contains self) and (!self[].IsInt)
	
	
	syx Nil (WildCard)
		Opt NoRefCounts
		debugat
	
	
	syx Arg (Argument)
		Opt NoRefCounts
		|| Braces = (.parent and self isnt style2)  or  !.hasany  or .name or  (self in @arg)
			fs <~ '{'
		.FSListArg( fs, braces ) // the name is already rendered by this!!
		if Braces
			fs.AppendIndent
			fs <~ '}'
			fs <~ '\n'
		if !.parent
			fs <~ "\n" // make sure it will reparse as an arg
		

	syx Emb (Embedded_Value)
		fs <~ .Name
		require .hasany
		.RenderWithSpaces(fs)

	syx Type (Typecast)
//                                     obj|type|
		|| obj = .First					#require
		|| type = obj.next
		fs <~ obj
		fs <~ '|'
		if type: fs <~ type
		fs <~ '|'
	

	syx Decl (Declaration)					//		|x| a = b
		|| ch = .First				#require
		fs <~ '|'
		fs <~ ch
		fs <~ '|'
		ch++
		while ch
			fs <~ ' '
			fs <~ ch
			ch++
	
	
	syx Tmp (Statement)
		Opt NoRefCounts
		if .name.IsStatementName
			fs <~ .name
		  else
			fs <~ '+'
			fs.AppendQuotedEscape(.name) // use +''  ???  it is visually lighter.

		require .hasany

		|| ch = .First
		|| HasArg = false
		while (ch)
			if HasArg // hanging args
				fs.IndentLine
			fs <~ ' '
			fs <~ ch
			if ch == @arg
				hasarg = true
			ch++


	syx Oat (Operator_As_Thing)
		fs <~ '%'
		.renderwithspaces(fs)


	syx Ques (Question)
		fs <~ "–"
		fs <~ .name

		|| n = .first
			fs <~ ' '
			fs <~ n

	
	syx Cnj (conj)
//                                  I eat cheese #when I feel hungry
		fs <~ '#'
		fs <~ .Name

	syx Opp (Operator)
		fs <~ .Name
	
	syx Thg (Thing)
		fs <~ .Name

	syx Sheb (Shebang)
		fs <~ "#!"
		fs <~ .Name
		fs <~ '\n'

	syx SCnj (Syntactic_conj)
		fs <~ .Name						// a - b --> b + -a

	syx SThg (Syntactic_Thing)
		fs <~ .Name

	syx Num (Number)
		Opt NoRefCounts
		fs <~ .Name // 123
	

	syx SStr (Super_String)			// <(`abc`)>
		fs <~ "<(`"
		fs <~ .Name
		fs <~ "`)>"


	syx Back (Backtick)				//  `abc`
		if .name.find('`')
			.str__(fs)
		  else
			fs <~ '`'
			fs <~ .Name
			fs <~ '`'
	
	
	syx Char (Character)			//  'x'
		fs <~ '\''
		fs <~ .Name.EscapeChr
		fs <~ '\''


	syx Bin (Hex)
		fs <~ "#("
		fs.appendhexdata(.name)
		fs <~ ")#"
	
	syx Str (String)
		fs <~ '"'
		fs.appendescape(.name)

		for (ch in self)
			if (ch == @Emb)
				fs.appendescape(ch.Name)
			  else
				fs <~ '$'
				fs <~ '{'
				fs <~ ch
				fs <~ '}'
		fs <~ '"'


	syx Unit						// 20cm
		|| num = .FirstName
		fs <~ num
		if (num.ishexlike) and (num.last != '_')       // 0xFF
			fs <~ '_'
		fs <~ .name  // 20cm, 0xFF_cm
	

	syx ARel (After_Relationship)
		fs <~ .First
		fs <~ .Name

	
	syx Name
		|| ch = .First
		if (ch)
			fs <~ .Name      // sonic
			fs <~ " @ "			
			fs <~ ch         // the~hedgehog
		  else
			fs <~ '@'
			fs <~ .Name


	syx Dot (Dot)					// x.fn(a)
		|| ch = .First
			fs <~ ch
		fs <~ '.'
		fs <~ .Name
		if ch
			fs <~ ch.Next
		

	syx SDot (Self_Dot)
		// .fn
		// .fn(a)

		fs <~ '.'
		fs <~ .name
		fs <~ .First


	syx Func (Function)					// fn(a)
		|| ch = .First                  #require
		fs <~ ch
		fs <~ ch.Next
	
	
	syx BRel (Before_Relationship)
		fs <~ .name
		fs <~ .First
	
	
	syx Adj (Adjective)
		opt norefcounts
		|| f = .first
			|| l = f.next
				fs <~ f
				fs <~ " ~ "
				fs <~ l


	syx Badj (Backwards_Adjective)
		opt norefcounts
		|| f = .first
			|| l = f.next
				fs <~ l
				fs <~ " ≈ "
				fs <~ f


	syx Acc (Access)				// b[2]
		|| f = .first
			fs <~ f
			f = f.next
			if f
				f.RenderPrm(fs, '[', ']')
	
	syx Item
//                                   a: b
// if we can use a name... we can avoid needing two items?
// problem with that is its very non-standard. Saves 1/3 nodes for XML->jb, though?
		|| ch = .First	#require
		fs <~ ch
		fs <~ ": "
		fs <~ ch.Next

	
	syx Bra (Bracket)
		fs <~ '('
		fs <~ .First
		fs <~ ')'
	
	syx List
		Opt NoRefCounts
		fs <~ '('
		|| count = 0
		|| sep = ", "
		if (self is style2)
			sep = "\n"
			fs <~ sep
		for ch in self
			if ++count > 1
				fs <~ sep
			fs <~ ch
			if ch == @item
				count++
		if (count == 1  or  self is style2)
			fs <~ sep
		fs <~ ')'

	
	syx Prm (Parameter_List)
		Opt NoRefCounts // much simpler!
		fs <~ '('
		for ch in self
			fs <~ ", "
			start
			fs <~ ch
		fs <~ ')'

	
	syx Arr (Array)					// [b, c]
		fs <~ '['
		.FSListSep( fs, ", " )
		fs <~ ']'
	

	syx File (File_List)
		Opt NoRefCounts // much simpler!
		fs <~ .name
		.indent++
		for ch in self
			fs.IndentLine
			fs <~ ch
		.indent--


	syx Quot (Quotation)
		Opt NoRefCounts
		fs <~ "“"
		for ch in self
			fs <~ ch
			if (ch.next)
				fs <~ ", "
		
		fs <~ " ”"
	
////////////////////////////////////////////////////////////////////////////////		
	
	helper RenderWithSpaces (|FastString| fs, |Message|ch=nil)
		Opt NoRefCounts
		ch ?= .First

		while (ch)
			fs <~ ch
			ch = ch.next #require
			fs <~ ' '
	
	syx Rel (Relationship)
		.RenderWithSpaces(fs)
		
	
	syx ERel (Equals_Relationship)
		|| ch = .First					#require
		fs <~ ch
		fs <~ ' '
		
		++ch							#require
		fs <~ ch
		fs <~ "= "

		++ch
		fs <~ ch$

	
	syx TRel (Temporal_Relationship)
		.RenderWithSpaces(fs)
	

	syx Tril (Temporal_Relationship2)
		opt norefcounts
		|| f = .first			#require
		fs <~ '#'
		fs <~ f

		|| s = f.next			#require
		fs <~ ' '
		fs <~ s
		
		|| l = s.next			#require
		fs <~ ' '
		fs <~ l


	syx pinn (Post_InnerAdj)
		// I slowly~ran home --> i ran home <≈ slowly
		opt norefcounts

		|| f	= .first
		|| opp	= f.next
		|| l	= opp.next
		
		fs <~ f
		fs <~ ' '
		fs <~ opp.last
		fs <~ ' '
		fs <~ l
		fs <~ " <≈ "
		fs <~ opp.first

	
	function BinnRender (|faststring| fs, |string| sepa, |string| sepb)
		opt norefcounts

		// i can				>~ can i 
		// i can~run			>~ can i run
		// i can~run home		>~ can i run home
		// i run home			>~ run i home // NOpE!
		|| f = .first$
		|| opp = f.next$
		|| l = opp.next
		|| OF = opp.first

		fs <~ SepA
		fs <~ (of, opp)(of)
		fs <~ ' '
		fs <~ f

		if (!of)
			debugger !l
			return
		
		|| ON = OF.Next
			fs <~ ' '
			fs <~ ON
		
		if (L)
			fs <~ ' '
			fs <~ l


	syx binn (InnerAdj)
		// I slowly~ran home --> >~ slowly i ran home 
		.BinnRender(fs, ">~ ", "")


	syx Ask
		.BinnRender(fs, "∆", "")


	syx Yoda (Yoda_Relationship)
		// thing, thing, op, always three!
		// you have~become powerful ==  ¬ powerful you have~become
		opt norefcounts
		|| f = .first
		|| s = f.next
		|| l = s.next
		fs <~ "¬ "
		fs <~ l
		fs <~ ' '
		fs <~ f
		fs <~ ' '
		fs <~ s

	
	syx SCom (Syntactic_Comment)
		|| ch = .first
		if !ch
			fs <~ " /# "
			return 
		

		fs <~ ch.next
		fs <~ " /# "
		if ch.HasOneChild
			fs <~ ch.First
		  else
			ch.FSListArg( fs )
			fs <~ '\n'
		fs <~ " #/"

	
	syx Msg (Message_List)
		fs <~ "«"
		.FSListSep(fs, ", ")
		fs <~ " »"

		
	syx Todo (To_Do_List)
		fs <~ .name
		.FSListSep(fs, " ")

	
	syx url (URL)
		fs <~ .Name
		fs <~ "://"
		|| f = .first
			fs <~ f.name
	
	helper RenderPrm (|FastString| fs, |Byte| b1, |Byte| b2)
		fs <~ b1
		.FSListSep( fs, ", " )
		fs <~ b2


	function Dummy (fpMsgRender)
		// Dummy function used by .ExportAddr. Stops crashes if someone calls export but hasn't set his own function yet.

	
	function ConvertJSONToJB
		Opt NoRefCounts
		for (m in self)
			if (m == @item)
				|| Tmp = m[@nil] // a string
					m.prev = Tmp
					Tmp.Func = @tmp
					|| value = m.first
					Tmp <~ value
					m.remove
					value.ConvertJSONToJB
			  else
				m.ConvertJSONToJB


	render
		opt norefcounts
		fs <~ self

	
	function JDB_  (|faststring|fs_in=nil, |int| flags=1, |string|)
		return .jdb2_(flags, fs_in)


	render JDB2_  (|int| Flags = 1)			//  function ast,  message.ast
		if flags&1
			fs <~ "«"
		fs <~ .Func.name
		fs <~ ' '
		if (.name)
			fs.AppendQuotedEscape(( .name[0,32] , .name )(flags & 2))
		if .hasany
			fs.indent++
			for ch in self
				fs.IndentLine
				ch.jdb2_(flags, fs)
			fs.indent--
			if flags&1
				fs.IndentLine
		if flags&1
			fs <~ "»"
	
	
	render RenderAST (|int| flags=1)
		if (self == @arg) and (.isroot)
			for ch in self
				ch.jdb2_(flags, fs)
				fs <~ '\n'
		  else
			.jdb2_(flags, fs)
	
	
	function ParseAST (|message?|)
		if self == @arg
			|| f = .first$
			f.ExpectLast
			return f.ParseAST
		|| fn = Syntax.Func(.name, self)		#require
		|| name = .first
			|| isStr = name==@str
			rz = Message(fn, (name.name, "")(isstr))
			|| arg = (name.next, name)(isstr)
			if arg == @arg
				for ch in arg
					rz <~ ch.ParseAST
	
	
	function UnEmbedStr
		|| s1 = .First
		if (s1 == @Emb) and !s1.Next
			s1.Remove
			.Name = s1.Name


	function FSListSep (|FastString| fs, |String| sep)
		opt norefcounts
		for (ch in self)
			fs <~ sep
			start
			fs <~ ch
	

	function FSListArg (|FastString| fs, |bool| AddLine=false)
		opt NoRefCounts
		|| hasp = .parent!=nil
		fs.indent += hasp
		
		AddLine |= hasp
		if .name
			AddLine = true
			fs.IndentLine
			fs <~ "^"
			fs.AppendQuotedEscape(.name)
		for ch in self
			if AddLine
				fs.IndentLine
			fs <~ ch
			AddLine = true

		fs.indent -= hasp
		if hasp and fs.last != '\n'
			fs <~ '\n'


	function FuncName (|string|)
		return .Func.LongName.lowercase
		
	function Length (|int|)
		return .name.length
	
	function ShallowEquals (|message| B, |bool| Aware=false, |bool|)
		return (.func == b.func) and .name.syntaxequals(b.name, aware)
	
	function DeepEquals (|message?| B, |bool| Aware=false, |bool|)
		opt norefcounts
		nil self
		|| A = self
		|| A2 = .FlatAfter
		|| B2 = b.FlatAfter
		while
			|| ADone = A==A2
			|| BDone = B==B2
			if ADone And BDone
				return true

			if (ADone!=BDone) or (!a!.ShallowEquals(b!, aware))
				return false
				
			A = A.flatnext
			b = b.flatnext

		
	function Name (|string|)
		nil safe
		if self
			return .Name


	function Func (|Syntax|)
		nil safe
		if self
			return .func

	function Name_ (|string|) // for use within the message class!
		// seems unnecessary?
		description "For use within the message class, which can't use the 'name' function directly."
		nil safe
		if self
			return .Name


	function FirstName (|string|)
		nil checker
		opt norefcounts
		|| f = .first
			return f.name


	function Ancestor (|Syntax| f, |Message|)
		Opt NoRefCounts
		if self
			for ch.Up in .parent
				if ch == f
					return ch


	function Find (|Syntax| s, |Message|)
		cpp_part FindSyx
		nil self // remove once we improve the nil-checker to "link" variables
		Opt NoRefCounts
		for ch in self
			if ch == s
				return ch

	function FindAll (|syntax| fn=@tmp, |string| name, |[message]|)
		opt norefcounts
		nil self // remove once we improve the nil-checker to "link" variables
		for s in self
			if s.func == fn and s.name == name
				rz <~ s
		
	
// merge these two! find and find flat... seem to do the same except the err-param
	function Find (|Syntax| s, |string| name, |bool| Err = false, |Message|)
		cpp_part FindSyxName
		opt norefcounts
		for ch in self
			if (ch == s  and  ch ~= name): return ch

		if Err
			.AccessErr(s, name, nil)


	function Find (|string| name, |Message|)
		cpp_part FindName
		Opt NoRefCounts
		for ch in self
			if ch ~= name
				return ch
	

	function FindNested (|Syntax| fn, |string?| name = nil, |bool| Err=false, |Message|)
		Opt NoRefCounts
		nil self
		for curr.flat in self
			if curr == fn or fn == nil
				if name == nil  or  curr ~= name: Return curr
		if err
			.accesserr(fn, name, nil)
	
	
	function FastString.MsgErrorName (|string?| name)
		if (name)
			self <~ " '"
			self <~ name
			self <~ "' "


	function AccessErr (|syntax|s, |string?| name=nil, |message?| found=nil)
		cpp_part CantFind
		if !self
			jb_api.NilHandler
			return
		
		|| fs = faststring.new
		if found
			fs <~ "Expected "
			fs.MsgErrorName(name)
			fs <~ s.longName
			fs <~ " but found "
			fs <~ found.Func.longName
		  else
			if s
				fs <~ "Missing "
				fs <~ s.longName
			  else
				fs <~ "Missing syntax"
			fs.MsgErrorName(name)
			found = self

		errorreceiver.NewError( found, fs.getresult )
	

//	function AccessErr (|int| i)
//		cpp_part CantFindAt
//		|| errnum = (" at item " + i.render, "")(i)
//		errorreceiver.NewError( self, "Incomplete syntax" + errnum )


	function ExpectLast (|string| err="", |bool|)
		opt norefcounts
		if self
			|| N = .next
				N.syntaxexpect(err)
			  else
				return true


	function ExpectString (|bool|)
		if .IsString
			return true
		error (self, "Not a string")
		

	function Expect (|syntax| type, |string?| name=nil, |bool|)
		nil checker
		require self
		if (!type or (.Func == type))
			if (name == nil) or (.name ~= name)
				return true
		
		|| fs = faststring.new
		fs <~ "Expected "
		if (type)
			fs <~ Type.longname
		fs.MsgErrorName(name)
		fs <~ ", but found "//@"
		fs <~ .Func.longname
		fs.MsgErrorName(.name)
		error (self, fs)
	

	syntax call (|string| key, |Message|)
		Opt NoRefCounts
		if self
			for item in self
				if item ~= key
					return item.GiveArg
			return .msg(@tmp, key).GiveArg
		return message() // sigh


	syntax append (|string| key)
		cpp_part AppendString
		self <~ (@str, key)


	function Arg (|message|)
		return .last(@arg)


	function GiveArg (|message|)
		Opt NoRefCounts
		|| r = .last 
		if r == @arg
			return r
		return .msg(@arg)


	syntax access (|Syntax| Need, |syntax| OK, |Message|)
		cpp_Part NeedSyxOK
		Opt NoRefCounts
		if self
			|| found = .first
				if found == OK or found == need or (OK == @nil)
					return found
			if OK!=@nil
				.accesserr(need, nil, found)
	
	
	function NeedFirst (|message|)
		return self[@nil]


	syntax access (|Syntax| s, |Message|)
		cpp_Part NeedSyx
		Opt NoRefCounts
		|| found = .first
			if s == nil or found.func == s
				return found
		if self
			.accesserr(s, "", found)


	Syntax Access (|syntax| s, |int| n, |message|)
		cpp_Part NeedSyxInt
		Opt NoRefCounts
		|| Ch = self[n]
			if !s or ch.func==s
				return ch
		.accesserr(s, Nil, ch)
	
	
	syntax access (|Syntax| s, |string| name, |Message|)
		cpp_Part NeedSyxName
		Opt NoRefCounts
		|| f = self[s] // why @nil?
		if f.expect(@nil, name)
			return f
	
		
	syntax access (|string| key, assigns:|string|)
		cpp_part SetStr
		self[key] = @str.msg(Value)


	syntax access (|string| key, assigns:|int64|)
		cpp_part SetInt
		self[key] = value.msg

	
	syntax access (|string| key, assigns:|message|)
		cpp_part SetMsg
		opt norefcounts
		.AccessAdd(key) <~ Value		
	
	
	function AccessAdd (|string| key, |message|)
		opt norefcounts
		|| l = self
		if self == @tmp
			l = .last
			if l != @arg
				l = .msg(@arg)
		for tmp in l
			if (tmp ~= key)
				tmp.last.remove?
				return tmp  
		return l.msg(@tmp, key)

	
	function Become (|syntax| fn, |string| name="")
		cpp_part BecomeStr
		.func = fn
		.name = name


	function Become (|int64| num)
		cpp_part BecomeNum
		.clear
		.func = @num
		.name = num.render


	function Become (|message| src)
		cpp_part BecomeMsg
		.func = src.func
		.name = src.name
		.clear
		.TakeAllFrom(src)

	
	function Next (|syntax| Need, |string| Name, |Message|)
		Opt NoRefCounts
		cpp_part NextOfName
		|| ch = .Next(need) #require
		if ch ~= name
			return ch
		.accesserr(need, nil, ch)

	function Last (|syntax| Need, |Message|)
		Opt NoRefCounts
		|| ch = .last
		if ch and (!need or ch==Need)
			return ch
		.accesserr(Need, nil, ch)

	
	function Next (|syntax| Need, |Message|)
		Opt NoRefCounts
		cpp_part NextOf
		if (self)
			|| ch = .next
			if ch and (!need or ch==Need)
				return ch
			.accesserr(Need, nil, ch)

	
//	syntax Compare (|string| Other, |bool|Aware, |int|)
//		return .name.Compare(other, Aware)


	syntax equals (|string?| name, |bool|Aware, |bool|)
		return self and .name.SyntaxEquals( name, aware )


	syntax equals (|Syntax| X, |bool|Aware, |bool|)
		cpp_part EqualsSyx
		return self and (.Func == X)

//	sadly... this would mess up anything that tests msg == 1
//  bytes aren't really numbers...
//	syntax equals (|byte| B, |bool|Aware, |bool|)
//		cpp_part EqualsByte
//		return self and .name == B
	
	function HasPosition (|bool|)
		return .Position >= 0


	function ReplaceInto (|message| w, |message|)
		.prev = w
		w <~ self
		return w


	function Export (|FastString| fs)
		|| fn = (.Func.ExportAddr)
		(fn)( self, fs )

	function MiniName (|string|prefix="", |string|)
		require self
		return "$prefix$.FuncName “${.name[0,64].UnicodeSync}”"

	Syntax Expect (|string?| Error = nil)
		cpp_part Fail
		errorreceiver.NewError( self, Error )

	Syntax Deprecate ( |string| Error = "Deprecated." )
		.syntaxproblem(error)

	Syntax Problem ( |string?| Error = nil )
		errorreceiver.NewProblem( self, Error )
	
	Syntax Warn ( |string?| Error = nil )
		errorreceiver.NewWarning( self, Error )
	
	Syntax Append (|syntax| Fn, |string| name="")
		opt norefcounts
		cpp_part AppendSyx
		.msg(fn, name)
	
	Syntax Append (|int64| Num)
		cpp_part AppendNum
		self <~ (@num, num.render)

	Syntax Using (|MessagePosition|)
		Opt NoRefCounts
		rz = parser.Using
		rz.Layer = (Message).layer
		
		parser.Using.Position = .position
		parser.Using.Length = .RangeLength
		parser.Using.Tag = .Tag
		parser.Using.Flags = MsgParseFlags.Inserted // right?
		.MemoryLayer.use

	Syntax UsingComplete { }
	
//	setter Int (|int64|)
//		.Func = @num
//		.name = Value.Render // later we can do this a different way. Like directly
	
	function Int (|int| StrStart=0, |int64| low, |int64| high, |int64|)
		cpp_part IntRange
		|| i = .int(strstart)
		if i >= low and i <= high
			return i
		error (self, "Value out of range")
	
	
	function Int (|int| StrStart = 0, |int64|)
		opt norefcounts
		if self
			|| f = .First
			if !f or self != @unit
				return .name.ParseInt(StrStart, self)
			if self == 'x'
				return F.name.ParseHex(StrStart, F)
			|| mul = f.name.ParseFloat
			if self == 'K'
				mul *= 1K|Float64|
			  elseif self == "M"
				mul *= 1M|Float64|
			  elseif self == "G"
				mul *= 1G|Float64|
			  else
				error (self, "Invalid unit")
				mul = 0.0
			return mul|int64|
			

	function Float (|Float64|)
		if self
			return .name.ParseFloat(self)

//	function Hex (|int64|)
//		if self
//			return .name.ParseInt(self)

	function Float32 (|float|)
		|| d = .float|float|
		expect (d.abs <= float.max) ("Float64 got clipped in a float32")
		return d

	function Range (|intrange|)
		return (.position, .position+.RangeLength)
	function Range (assigns:|intrange|r)
		.position = r.x
		.RangeLength = r.width


	function Yes (|bool| Default=false, |bool|)
		if self
			return .name.yes(self)
		return Default
			

	function After (|int|)
		return .position + .RangeLength

	function After (assigns:|int|)
		.RangeLength = Value - .position

	
	operator Contains (|string| s, |bool|)
		opt norefcounts
		cpp_part ContainsStr
		return .FindNested(@nil, s, false)


	function Contains (|ind| p, |bool| AllowJustAfter=false, |bool|)
		cpp_part ContainsInd
		opt norefcounts // we want to put textview's insertion after a name and still find it
					    // like: abc      // abc is found still.   
					    //			^
		
		return .position <= p and (.after+AllowJustAfter) > p 
		
	operator In (|message| f, |bool|)
		cpp_Part InMsg
		opt norefcounts
		return .parent == f
		
	operator In (|syntax| f, |bool|)
		opt norefcounts
		|| p = .parent
			return p.func == f

	operator In (|syntax| f, |string| name, |bool|)
		cpp_Part InStr
		opt norefcounts
		|| p = .parent
			return p.func == f and p.name == name

	function IsContainer (|bool|)
		|| f = .func
		return f == @arg or @list or @prm or @arr or @bra

	function IsString (|bool|) // use .expectstring if you need this to be a string
		if self
			return .func.isstring

	function WipePositions
		opt norefcounts
		for v.flat in self
			v.position = -1

	module
		function Dictionary.Syntax (|string| Key, ||)
			return self[key.SyntaxLower] 
		

		function String.SyntaxLower (|string|)
			cpp_wrapper JB_Str_FastLower


		function GetFunc (|Message| msg, |Syntaxobj|)
			return jeebox._syxdict.Syntax( msg.name )   #expect (msg, "Can’t find syntax: ${msg.name}")



////\\\\////\\\\////\\\\////\\\\////\\\\////\\\\////\\\\////\\\\////\\\\////\\\\


function FastString.SyntaxAppend (|Message| msg)
	if (msg)
		(msg.Func.RenderAddr)( msg, self )
