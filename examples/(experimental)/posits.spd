#!/usr/local/bin/spd



function @string.posit (|uint64| b, |string|)
	|| fs = FastString(64)
	if b
		while b
			fs <~ b>>63
			b <<= 1
	  else
		fs <~ '0'
	return fs


function DecodePosit (|uint64| posit, |ivec4|)
	// if we make it so that... 1 means "End of exponent..."
	// (and 1 before that means signed exponent)
	// then, we can get it so that 0 means 0. no need for require posit
	require posit
	|int| sign = posit>>63
	posit <<= 1
	|int| top = posit>>63
	|| K = 0 // use something better instead
	for 31
		posit <<= 1
		k++
		loop (posit >> 63) == top
	posit <<= 1
	
	if top
		k = k - 1
	  else
		k = -k

	"posit: ${string.posit(posit)}"
	|| sh   = 64 - k.abs
	|| exp  = (posit>>sh)<<sh
	|| frac = posit<<k.abs
	"sign : $sign,  k: $k"
	"bits : exp: ${string.posit(exp)},  frac: ${string.posit(frac)}"
	exp = posit >> sh
	frac = (((posit << k.abs)>>1) ||| (1<<63)) >> (k.abs-1) // put a 1-bit in the right place...
														    // should be a simpler way...
	"ints : exp: $exp,  frac: ${string.posit(frac)} ($frac)"
	
	
	if sign: frac = -frac					//
	|| dk = 256.0|f64| pow k|f64|			//
	|| de = 2.0|f64| pow exp|f64|			// 
	|| df = frac|f64| / (2.0|f64| pow ((67 - 2*k.abs)|f64|)) // clean up da math later
	|| dx = dk * de * df

	// Now just try to make sense of this thing?
	"dk   : $dk,  de: $de,  df: $df"
	printline "x    : " + dx.Render(12)
	printline "      (0.000003553926)"
	
	// x = sign * 256^k * 2^e * f
	// now that it's decoded... what do we DO with it? haha.
	// add? multiply? subtract? divide?
	// and how? I assume we need to put them in the same range.
	// and then... do the math? and then there are left overs... so we need to then bitshift back into the correct range
	// and then finally put the math back again.
	return (sign, k, exp, frac)





function string.ToPosit (|uint64|)
	|| sh = 63
	for c in self
		|uint64| v = c - '0'
		if v <= 1
			rz |= v<<sh
			sh--			


main (|string| a)
	|| b = a.ToPosit
	"a: $a --> (${string.posit(b)})"
	|| codes = DecodePosit(b)
	"Hello ${b}!"

