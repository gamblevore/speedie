
https://www.scratchapixel.com // simple raytracing demo... based on code from here


main
	sdlapp.Rescale(3)
	return RayScene()


struct RayHit
	|vec4|  Color
	|float| Dist
	constructor
		.Dist = float.max
	function ok (|bool|)
		return .dist < float.max
	

class RayScene (window)
	|float|			G
	|date| 			LastDraw
	|[shape]|		Shapes
	|textview| 		FPS
	|date| 			LastFPSChange
	|vec3|			cam

	constructor
		.g = 0.006
		.cam = (1.6, 5.0, -22.0)
		.FPS = .TextView(false)
		.GNormal.clear // black background
		
		.shapes <~ Sphere((-1.0, 1.5, 12.0), 2)
		.shapes <~ Sphere(( 1.5, 2.5, 18.0), 3)
		.shapes <~ Sphere(( 7.0, 8.0, 18.0), 4)
		.shapes <~ Sphere(( -2.0, 9.0, 24.0), 6)
		.shapes <~ CubeShape(( 12.0, 3.0, 24.0), 4)
	
	behaviour Drawbackground
		opt norefcounts
		opt min 3
		|| Ago = .LastDraw.ago
		.LastDraw = date.now
		.LastFPSChange ?= .LastDraw
		if .LastFPSChange.ago > 0.5s
			|| fps = (1.0/ago.Float64).Render(1) + "fps"
			.fps.text = fps
			printline fps
			.LastFPSChange = .LastDraw
		
		|| size = where.size.vec2
		|| scale = 1.0/size.xx
		|| adjust = size*-0.5	
		for (c in where) (p)
			|| XY = (p.vec2 + adjust) * scale
			|| xyz = (xy, 1.0).Normal
			|| ixyz = -1.0 / xyz
			|| Found = RayHit()
			for sp in .Shapes
				sp.color(.cam, xyz, ixyz, Found)
			if (Found.ok)
				C <~ Found.Color
	
	
	function Moved (|vec3|)
		|| k = ivec3()
		k.y = keys.SPACE[] - keys.LSHIFT[]
		k.z = keys.W[]     - keys.S[]
		k.x = keys.D[]     - keys.A[]
		return k.Vec3

	
	behaviour FrameUpdate
		|| m = .moved
			.cam += m * 0.2
			SDLApp.touch
		for sp in .shapes
			sp.Move(.g)



class Shape
	|float|			radius
	|float|			Radius2
	|vec3|			Center
	|vec3|			Speed
	|vec4|			Fuzz

	constructor (|vec3| c, |float| r)
		.center = c
		.radius = r
		.radius2 = r * r

	virtual Dist (|vec3| orig, |vec3| dir, |vec3| idir, |float|)
		return -1
	
	function Move (|float| g)
		|| y = .Speed.y - g
		if (.center.y - .radius) < 0.0 and y < 0
			y = ((y * -0.8) - g) max 0
			if y <= g // rebouncer!
				y = g * random[40, 60]
		.Speed.y = y
		.center += .speed
		SDLApp.Touch

	function Color (|Vec3| orig, |Vec3| dir, |vec3| idir, |rayhit| H)
		opt min 3
		|| t = .__dist__(orig, dir, idir)
		if (t > 0) and (t < H.Dist)
			h.Dist = t
			|| P = orig + dir*t
			|| Norm = (P - .center).normal
			|| y = Norm.y.acos
			|| x = Norm.z.abs.atan2(Norm.x)
			|| grid = ((((x+y + SDLApp.Cycle(30s))*10).fract - 0.5)*10).clamp*0.1
			H.color = (0.6+x+grid, y+grid, 0.3, 1.0)



class Sphere (Shape)
	behaviour Dist
		opt min 3
		|| L = .center - orig
		|| tca = L • dir
		if tca > 0
			return tca - (.radius2 + (tca*tca) - (L • L) ).Sqrt		


class CubeShape (Shape)
	behaviour Dist
		opt min 3
		
		orig -= .center
		|| r = .radius
				
		|| p0 = (orig - r) * idir
		|| p1 = (orig + r) * idir
		
		rz = (P0 min P1).max
		|| tmax = (P0 max P1).min
		
		require tmax >= rz
