


class Shape	(list)
	contains Shape
	|vec3|			Center
	|float|			Radius
	|vec3|			Speed
	|float|			RadiusSq // optimised version
	|uint|			DrawCulled

	constructor (|vec3| c, |float| r)
		.center = c
		.radius = r
		.RadiusSq = r * r

	virtual Dist (|vec3| orig, |vec3| dir, |vec3| idir, |float|)
		return -1
	
	function Move (|float| g)
		|| y = .Speed.y - g
		if (.center.y - .radius) < 0.0 and y < 0
			y = ((y * -0.8) - g) max 0
			if y <= g // rebouncer!
				y = g * random[40, 60]
		.Speed.y = y
		.center += .speed
		SDLApp.Touch

	function Color (|Vec3| orig, |Vec3| dir, |vec3| idir, |rayhit| H)
		opt min 3
		|| t = .__dist__(orig, dir, idir)
		if (t > 0) and (t < H.Dist)
			h.Dist = t
			|| P = orig + dir*t
			|| Norm = (P - .center).normal
			|| y = Norm.y.acos
			|| x = Norm.z.abs.atan2(Norm.x)
			|| grid = ((((x+y + SDLApp.Cycle(30s))*10).fract - 0.5)*10).clamp*0.1
			H.color = (0.6+x+grid, y+grid, 0.3, 1.0)



class Sphere (Shape)
	behaviour Dist
		opt min 3
		|| L = .center - orig
		|| tca = L • dir
		if tca > 0.0
			return tca - (.RadiusSq + (tca*tca) - (L • L) ).Sqrt		


class CubeShape (Shape)
	behaviour Dist
		opt min 3
		
		orig -= .center
		|| r = .radius
				
		|| p0 = (orig - r) * idir
		|| p1 = (orig + r) * idir
		
		rz = (P0 min P1).max
		|| tmax = (P0 max P1).min
		
		require tmax >= rz
