

https://www.scratchapixel.com // simple raytracing demo... based on code from here


// We could divide the screen into squares, then each square becomes a frustrum.
// Each frustrum can make a list of possible objects it can hit.
// We could also do hierarchical bounding box detection.


main
	sdlapp.Rescale(3)
	return RayScene()


struct RayHit
	|vec4|  Color
	|float| Dist
	constructor
		.Dist = float.max
	function ok (|bool|)
		return .dist < float.max



class RayScene (window)
	|float|			G
	|date| 			LastDraw
	|list of shape|	Shapes
	|textview| 		FPS
	|date| 			LastFPSChange
	|vec3|			cam
	|ViewFrustrum|	Tracker

	constructor
		.g = 0.006
		.Tracker = ViewFrustrum(5) // 1<<5 == 32
		.cam = (1.6, 5.0, -22.0)
		.FPS = .TextView(false)
		.GNormal.clear // black background
		.shapes = list()
		.shapes <~ Sphere((-1.0, 1.5, 12.0), 2)
		.shapes <~ Sphere(( 1.5, 2.5, 18.0), 3)
		.shapes <~ Sphere(( 7.0, 8.0, 18.0), 4)
		.shapes <~ Sphere(( -2.0, 9.0, 24.0), 6)
		.shapes <~ CubeShape(( 12.0, 3.0, 24.0), 4)


	function PrintFrameRate
		|| Ago = .LastDraw.ago
		.LastDraw = date.now
		.LastFPSChange ?= .LastDraw
		if .LastFPSChange.ago > 0.5s
			|| fps = (1.0/ago.Float64).Render(1) + "fps"
			.fps.text = fps
			printline fps
			.LastFPSChange = .LastDraw


	behaviour Drawbackground	// how to turn rayangle into a frustrum?
		opt norefcounts
		opt min 3
		.PrintFrameRate
		
		.Tracker.griddy(Where.size.vec2, .shapes.first)		// x ranges from -0.5 to 0.5, y from smaller
		for (c in where) (p)								// might be nicer to iterate over tracker
			|| Ray = .Tracker.Ray(p)
			|| InvRay = -1.0 / Ray
			|| Found = RayHit()
			for sp in .Shapes
				sp.color(.cam, Ray, InvRay, Found)
			if Found.ok
				C <~ Found.Color
	
	function keys.MLength (|float|)
		|| l = .length
			return 0.5 + l.Clamp(1)
	
	function Moved (|vec3|)
		rz.y = keys.SPACE.MLength - keys.LSHIFT.MLength
		rz.z = keys.W.MLength     - keys.S.MLength
		rz.x = keys.D.MLength     - keys.A.MLength
		
	behaviour FrameUpdate
		|| m = .moved
			.cam += m * 0.4
			SDLApp.touch
		for sp in .shapes
			sp.Move(.g)
