#!/usr/local/bin/spd
import "GUI"

// possible games:
	// 3d arkanoid with 3d balls?
	// bubble-tank?
	// bubble-bobble? (maybe not, needs sprite artwork)
	// a snake-game with a funny walking/dancing snake that bites orbs
	// that fruit-merging game?
	// clouds dropping rain or fire or somthing and you have to burn people? (or tanks)
		// hard code the car!
	// 3D tetris? (and keep the 2D mode! allow switch)
	// washing dogs down some stairs!? HAHAHA


main
	return Bubbles().RunAsMain(1.25, 60)



class Bubbles (window)
	|RayTracer|		T

	constructor
		.t = RayTracer((1.6, 5.0, -22.0))!
		.t.Background = &vshapes.rainbows
		
		|| L = 10.0
		|| xx = 1
		|| CC = [&vshapes.CloudBubble,  &vshapes.PlasticBall,  &vshapes.Sphere,  &vshapes.cloudbubble]

		for i in (-L to L)
			xx = xx.hash
			|| sh = (i, 0.0, i.abs)*24.0
			|| C = CC[(xx&3)]![]
			.T.shapes <~ C.new(sh+(-1.0, 1.5, 12.0),  2)
			.T.shapes <~ C.new(sh+( 1.5, 2.5, 18.0),  3)
			.T.shapes <~ C.new(sh+( 7.0, 8.0, 18.0),  4)
			.T.shapes <~ C.new(sh+( -2.0, 9.0, 24.0), 6)
			.T.shapes <~ C.new(sh+( 12.0, 3.0, 24.0), 4)
		
		for (s in .t.shapes) (i)
			s.color = vec4(1)
			if i & 1
				s.color.g = 0

	behaviour MouseMove
		.t.rotation += (move.y|float| * -0.0001,  Move.x|float| * 0.0005, 0.0)
	
	behaviour keydown
		if key is RIGHTBRACKET
			raytracer.AdjustmentFinder += 0.1
		  elseif key is leftBRACKET
			raytracer.AdjustmentFinder -= 0.1
		  elseif key is RETURN
			|| ss = "new sh?".ask
				raytracer.AdjustmentFinder = ss.float
		  else 
			return false
				
		notifications <~ raytracer.AdjustmentFinder.Render
		return true
		
	behaviour Drawbackground
		opt norefcounts
		.T.RayTrace(where)
		gui.Touch
	
	behaviour FrameStep
		|| m = keys.Movement
			m = m.KeyFix((0.6, 0.25, 5.0))
			|| P = m.xyz
				.t.Camera += p.normal * .t.ViewMat
			.t.Rotation += (0, m.w*0.003, 0)


function float.KeyFix (|vec3| V, |float|)
	if self
		return ((.abs * v.r + v.g) min v.b).CopySign(self)


function vec4.KeyFix (|vec3| V, |vec4|)
	for i in 4
		self[i] = self[i].KeyFix(V)
	return self
	
	