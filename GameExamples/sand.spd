#!/usr/local/bin/spd
import "GUI"

main
	return SandSimulator().RunAsMain(60)


struct Particle
	|ParticleType| Type
	|int8| VX
	|int8| VY
	|uint| Start

	function Color (|vec4|)
		return .type.color

	syntax is (|ParticleType| T, assigns:|bool|)
		if Value
			.type = T
	
	syntax is (|ParticleType| T, |bool|)
		return .type == T
	
	function Swap (|&particle| P)
		|particle| T
		T = P[0]
		P[0] = self[0]
		self[0] = (&T)[0]
		
	function MoveTo (|?&particle| P, |bool|)
		if p and (p.type == 0 or p.type >= ParticleType.Max)
			P[0] = self[0]
			.Type = 0
			return true
	
	function IsLiquid (|bool|)
		nil checker
		return self!=nil and (.type >= ParticleType.water and .type <= ParticleType.Acid)
		
	function HasGravity (|bool|)
		nil checker
		return self!=nil and (self isnt wood and stone)


datatype ParticleType (byte)
	constants: Empty, Sand, Stone, Water, Lava, Acid, Air, Wood, Max
	syntax is (|ParticleType| T, |bool|)
		return self == T

	function Color (|vec4|)
		if self is sand:	return vec4(0.5, 0.35, 0.1, 1.0)
		if self is stone:	return vec4(0.5, 1.0)
		if self is Water:	return vec4(0.1, 0.4, 1.0, 1.0)
		if self is air:		return vec4(0.25, 1.0, 1.0, 0.4)
		if self is Lava:	return vec4(1.0, 0.5, 0.2, 0.5)
		if self is wood:	return colors.brown
		if self is acid:	return colors.Green
		

class SandSimulator (Window)
	|GridSection of particle|	Particles

	constructor 
		.Particles = GridSection(400,300)|gridsection of particle|//#quit
		.reset
	
	function Reset
		|| h = Random.shared.int
		for s in .Particles
			h = h.hash
			s[0] = nil
			s.Type = h
			|| h2 = h&255
			(s is water) = h2 > 200
			(s is sand) = h2 > 240
		
		
	function DoGravity (|!&particle| P, |ivec2| O, |&particle|)
		|| V = (p.vx, p.vy)
//		if o.y == 0
//			return p
		|| range = v.RayCast()
		for CC in range
			|| D = .Particles[O+CC]
				if p.MoveTo(D)
					rz = D
					p = D
				  elseif D.isliquid // adding this causes infinite rain. no idea why.
					if !p.IsLiquid
						D.swap(p)
						D.vy = D.vy|int| max -3
//					  else 
//						p2.vy = p.vy
//						p2.vx = p.vx
//						p.vx = 0
//						p.vy = 0
//					exit
		
		
	behaviour FrameStep
		require GUIActive // and (.FrameCount+1) isa 16
		.Touch
		
		|| rnd = 64K()
		for (s in .Particles) (V)
			if s.HasGravity
				s.vy = (s.vy - 1) max -5
				|| D = .DoGravity(S, V)
				if !D
					s.vy = 1-s.vy
					rnd = rnd.hash
					|| R = (Rnd&2) - 1
					if s.MoveTo(.Particles[V-(R,1)])
						0
					  elseif s.MoveTo(.Particles[V-(-R,1)])
						0
					  elseif s.Isliquid
						  if s.MoveTo(.Particles[V-(R,0)])
							0
						  elseif s.MoveTo(.Particles[V-(-R,0)])
							0
	
	behaviour keydown
		if key is space
			.reset
			return true	
	
	behaviour Drawbackground
		where.DrawRect(Self, colors.black)
		|| w = .Particles.width
		|| ws = (where.Width-(w*2))/2
		|| base = 40
		for (s in .Particles) (V)
			if s
				|| R = V*2 + (ws,base)
				where.DrawRect((R, R+2), s.color)

