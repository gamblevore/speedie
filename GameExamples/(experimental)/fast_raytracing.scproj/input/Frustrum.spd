
class ViewFrustrum
	|float|		CellSize
	|vec2|		Scale
	|vec2|		Adjust
	|vec4|		Screen
	|vec2|		LastSize
	|int|		Depth // really goes up to 16 bits really.
	|int|		TestCount
	|Plane|		Back
	|Plane|		Fwd
	|Plane[4]|	Edges

	constructor (|int| CellSize)
		.CellSize = (1<<CellSize)|float|
	
	function ShrinkList (|vec4| B, |shape| curr, |shape?|)
		opt norefcounts
		while curr
			if .contains(B, curr)
				if !rz
					rz = curr
			  elseif rz
				rz.prev = curr
			curr++
		// Need the box-plane. Just recalc for now... 
		

	function Griddy (|vec2| Size, |shape| first)
		require .LastSize != size
		.LastSize = size
		.scale = 1.0/size.xx
		.adjust = size * -0.5
		require first
		|| log = (size.max/.cellsize).log2.ceil		// (1440, 900) --> 6 --> (2K, 2K)
		|| bounds = (vec2(), vec2(2.0) pow vec2(log))
		.TestCount++
		.SubDivide(bounds, first)	


	function SubDivide (|vec4| B, |shape| first)
		opt norefcounts
		|| Clip = B.Clip(.screen)
		require (Clip.area > 0.0)
		first = .ShrinkList(B, first) #require
		|| Half = B.Size * 0.5
		if half.x <= .CellSize
			.draw(B, first)
		  else
			|| S = B.xy
			|| M = S+Half
			
			|| LD = (S, M)
			|| LU = LD.up(M.y)
			|| RU = LD.right(M.x)
			|| RD = RU.up(M.y)
			.Depth++
			.SubDivide(LD, first)
			.SubDivide(LU, first)
			.SubDivide(RD, first)
			.SubDivide(LD, first)
			.Depth--
		

		

	function Draw (|vec4| B, |shape| curr)
		// draw stuff in the list


	function Ray (|ivec2| p, |vec3|)
		|| XY = (p.vec2 + .adjust) * .scale
		return (xy, 1.0).Normal
		
	function Contains (|vec4| Box, |shape| curr,  |bool|)
		// should take curr.drawculled into account
		opt inline
		if rz
			curr.DrawCulled |= 1<<.Depth
	
	function Contains (|vec4| Sphere, |bool|)
		for i in 4
			require .Edges[i].sphere(Sphere)
		return true


class Frustrum
	|Plane[6]| Planes
	function Contains (|vec4| Sphere, |bool|)
		for i in 6
			require .planes[i].sphere(Sphere) <= 0
		return true


datatype Plane (vec4)
	function Point (|vec4| S, |float|)
		return (s dot3 self) + .w
	function Sphere (|vec4| S, |float|)
		return .Point(S) - s.w
