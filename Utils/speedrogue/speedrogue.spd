#!/usr/local/bin/spd

// todo
	// fix room connection...no need connect to the same room
	// also delete rooms that can't connect
	// also some rooms should connect but aren't


class RogueCreature (RogueObject)
    render
		fs <~ "${.name} has ${..strength} STR and ${..health} HP. "


role RogueObject (message)

module roguetype
	|message| Floor 
	|message| Rock
	|message| Wall
	|message| Corridor
	|message| Corriwall
	|message| Door
	|message| Gate


class RogueRoom
	|ivec4|   Size
	|message| Purpose 


datatype RogueCellState (byte)
	flags
		Visited
		Seen
		Glimpsed
		
class RogueCell	(RingTree)
	|ivec2|				Pos
	|message|			Type
	|rogueroom|			Room
	|RogueCellState|	State
	contains RogueObject
	
	constructor (|ivec2| pos, |message| Type=roguetype.rock)
		.pos = pos
		.type = Type
	
	syntax is (|message| m, |bool|)
		return .type == m
	function TermColor (|int|)
		// the types should have their colors
		if .Type == RogueType.Wall or roguetype.door or roguetype.gate or roguetype.Corriwall
			return Terminal.white
		if .type == roguetype.corridor
			return Terminal.red
	function Draw 
		Terminal <~ (.type.name, .pos, .termcolor)
		


module Map {
|[RogueCell]|	Data
|ivec2|			Size
|int64| 		Seed
|message| 		Creatures
|Message| 		RoomTypes
|[rogueroom]| 	Rooms
|message|		MapState

function Player (|RogueCreature|)
		

syntax access (|ivec2| s, |RogueCell|)
	if s inrange .size
		return .data[s.y * .size.x  +  s.x]

function Init (|ivec2| size)
	map.size = size
	for i in size
		.data <~ RogueCell(i)

function IsRoomOK (|ivec4| i, |bool|)
	for p.rect in i
		require self[p].Type != roguetype.Floor
	return true

function OKSize (|ivec4|)
	for attempt in 1000
		|| RoomSize = .rndsize
		if .IsRoomOK(RoomSize)
			return RoomSize

function RndSize (|ivec4|)
	|| c1 = .size.rnd
	|int| w = random[5, 25, 1]+2
	|int| h = random[4, 15, 1]+2
	|| c2 = c1 + (w,h)
	if c2.x >= .size.x // reflect room size back inwards if too far
		c2.x = c1.x
		c1.x -= w
	if c2.y >= .size.y
		c2.y = c1.y
		c1.y -= h
	return (c1, c2)
	

function ivec4.EdgeLength (|int|)
	return .area - (self Â± 2).area
	
function ivec4.Edge (|int| where, |ivec4|)
	// no corners!
	|| W = .Width-2
	|| H = .Height-2
	while where >= 0 and w > 0 and h > 0
		if (where < W)		// bottom
			return (.x + where+1, .Y, 0, -1)
		where -= w

		if (where < H)		// right
			return (.X2-1, .y+where+1, 1, 0)
		where -= h

		if (where < W)		// top
			return (.x + where+1, .Y2-1, 0, -1)
		where -= w

		if (where < H)		// left
			return (.X, .y + where+1, 1, 0)
		where -= h
		
	
function Connect (|ivec2| p, |ivec2| d)
	|| first = self[p] #require
	|| Length = 1
	|roguecell| last
	|| d2 = d.yx
	while Length < 30
		p += d
		|| c = self[p] #require
		|| ctype = c.type
		ifn cType == roguetype.rock or roguetype.wall or roguetype.Corridor
			exit
		last = c
		Length++
		c.Type = roguetype.Corridor
		with self[p+d2]
			if .type == roguetype.Rock
				.type = roguetype.corriWall
		with self[p-d2]
			if .type == roguetype.Rock
				.type = roguetype.corriWall
	
	if Length >= 2
		first.Type = roguetype.door
		last.position = 0
	
	if length > 2
		last.Type = roguetype.door
	  elseif length == 2
		last.Type = roguetype.Floor
		first.position = 0


function CanConnect (|rogueroom| r, |ivec2| p, |ivec2| d, |bool| Coridoors=false,  |bool|)
	|| s = r.size
	|| hitwall = 1
	for length in 30
		p += d
		|| c = self[p]$
		|| r2 = c.room
		|| ct = c.type
		if ct == roguetype.wall
			require hitwall++ <= 1
		if r2 and (r2 != r) and (ct == roguetype.Floor)
			return true
		require (ct == roguetype.rock or roguetype.wall) or (coridoors and ct == roguetype.corridor)
	
function ConnectRoom (|rogueroom| r)
	|int| needed = random[1, 5 * r.size.area/(25*15), 1]
	|| ToTest = r.size.EdgeLength
	for 1000
		|| Cell = r.size.Edge(Random[0, ToTest])
		if .CanConnect(r, cell.xy, cell.x2y2)
			.Connect(cell.xy, cell.x2y2)
			needed--
			require needed > 0
//		else // seems that some good positiosn ARE being tested, but are failing. Can't see why?
// everything seems OK?'
//			self[cell.xy].Type = roguetype.gate


function ivec2.isCornerOf (|ivec4| R, |bool|)
	r-=(0,0,1,1)
	return self == R.x1y1 or R.x1y2 or R.x2y1 or R.x2y2 // fix later

function GenRoom
	|| RoomSize = .oksize #require
	|| room = RogueRoom(roomsize, nil)
	.rooms <~ room
	for P.rect in RoomSize
		|| cell = self[p]
		cell.Room = room
		|| type = RogueType.Floor
		if !RoomSize.contains(P, 1)
			if cell.type != RogueType.wall
				Type = RogueType.wall
			  elseif p.IsCornerOf(Roomsize)
				0
			  else
					type = RogueType.floor
		cell.Type = type
	
	
function GenMap
	for i in 10
		.GenRoom
	for r in .Rooms
		.ConnectRoom(r)

function GenPlayer
	
function GenMonster
	

	
function Load (|int64| Seed)
	seed := date.now & 0xffff
	Random.shared.seed = seed
	map.seed = seed
	app.CWD = app.Path.parent
	// i could use a selector? i guess?
	|| Cells = "Cells.txt".file.parse
	RogueType.Floor = (Cells..floor)
	RogueType.wall = (Cells..wall)
	RogueType.rock = (Cells..rock)
	RogueType.corridor = (Cells..corridor)
	RogueType.corriwall = (Cells..corriwall)
	RogueType.door = (Cells..door)
	RogueType.Gate = (Cells..gate)
	.Creatures = "Creatures.txt".file.parse
	.roomtypes = "Rooms.txt".file.parse
	


function Run (|bool| Splash)
	.init(terminal.size) // (256,128)
	.GenMap
	.GenPlayer
	.GenMonster
	if Splash
		.splash
	while .Running
		.DetectVisibility
		.DrawMap
		Terminal.Display
	
function Running (|bool|)
	return true

function DetectVisibility
	
	
function DrawMap
	for i in .size
		self[i].draw
	terminal <~ ("Map: " + .Seed.Render, 30, 0)
	
function Splash
	|| scale = Terminal.w|float| / Terminal.h|float|
	|| h = 24

	for secs in 1s
		Terminal.DrawRect((0, 0, terminal.w, h))
		for i in 5.0
			|| Title = "Mini Rogue".Rotate(i + secs*3)
			|| f = i*1.234 + secs*(0.33+i*0.05)
			Terminal <~ (Title, 1+((1.5*f/scale).bounce*(Terminal.w-(title.length+2))), 1+f.bounce*(h-2), terminal.Red+i)

		|| title2 = "<Mini-Rogue>"
		|| x = (terminal.w - title2.length) / 2
		Terminal <~ (title2, x, 0, Terminal.Red)
		Terminal <~ (file://HeartLogo.txt , 32, 10, terminal.red)
		Terminal.Display
}
	
main
	|| a = app[0]
	map.load(a.int)
	map.run(!a)



