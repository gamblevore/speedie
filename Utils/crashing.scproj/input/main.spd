#!/usr/local/bin/spd

class Person
    |int| age
    |string| name
    setter age (|int|)
        expect (value > 0 and value < 300) "Age $value out of range on ${.name}"
        .age = value
    // now no one can set the age to a negative value...

main
    || P = person(12, "fred")
    P.age = -2 // protected from corruption here
	|| x = ["a", "b", "c"]
	if x == 3
	    "$x has three items."
	|| H = "house"
	if H == 5
	    "'$H' has five letters"
	|| L = "(a,b,c,d)".parse
	if L == 4
	    "The list $L has four items!"
    || z = 0
    for i in 10
        if i isa 2 // if 
            "$i is even"
            z[i] = true
          else
            "$i is odd"
    "z is $z"
    
    || fn = (mesayer, shesayer)(random[] < 0.5)
    (fn)(app.args[0])
    || G = RPGHero("fred")
    (RPGHero.Doaction["jump"])(G, "hes scared")


prototype SayerFunction (|string| input)

function MeSayer (SayerFunction)
    "Me says: $input"

function SheSayer (SayerFunction)
    "Rebecca says: $input (very quietly)"


class RPGHero // for a tile-based board game
    |string| Name
    |bool|   OnGround
    |bool|   IsDucking
    |int|    YSpeed
    |int|    GroundSpeed
    
    constructor (|string| name)
        .name = name


	module
		// would be nice if it doesn't need to be in a module, for auto-self
	    dispatch DoAction (|rpghero| self, |string| Reason)
	        jump
	            "$.Name jumped because $Reason"
	            if .OnGround
	                .YSpeed = (.YSpeed max 0) + 2 
	            
	        run 
	            "$.Name ran because $Reason"
	            .GroundSpeed = GroundSpeed min 5
	        
	        duck
	            "$.Name ducked because $Reason"
	            .IsDucking = true
	
	    