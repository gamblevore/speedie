
class BirdWindow (Window)
	|int|				Round
	|PipeOwner|			Pipes
	|bird|				Player
	|RetroFloat|		Speed
	|textview|			Score
	|date|				StartDate
	|int|				BestScore
	|int|				PrevBestScore

 
	constructor
		sdlapp.DrawBackgroundMode = -1
		.pipes = guicontrol(self)
		.player = bird(self)
		.Player.id = "bird"
		.pipes.size = the~width by 350~high
		.pipes.id = "pipeowner"
		.player.gnormal.solid = (0.8, 0.8, 0.1, 1.0)
		.size = the~area
		.score = textview(self)
		.score.Size =  8~left back 40  by  8~down back 12
		.score.gnormal.solid = nil
		.score.id = "score"
		.RestartGame
	
	
	function RestartGame
		.PrevBestScore = .bestscore
		pipeowner.Passed = 0
		.UpdateScore
		.score.singleline = true
		.speed.Amount = 0.75
		.speed.remain = 0
		.pipes.clear
		.pipes.position = 0
		.pipes.refill(0)
		.pipes.first.left = 200~right
		.player.init
	
		
	behaviour KeyDown
		if key is SPACE
			keys.space.eat
			.player.Jump
		if key is escape
			.RestartGame // ooop
		return true
	
	
	behaviour FrameUpdate
		if !.player.died
			.movepipes
		.player.gamestep(.pipes)
		if .player.died
			.RestartGame
	
	
	function UpdateScore
		|| score = pipeowner.Passed
		.bestscore = .bestscore max score
		|| s = ""
		if score == .bestscore
			s = score.render
			s += "!" * (score - .PrevBestScore)
		  else
			s = "$score/$.bestscore"
		.score.text = s

	
	function MovePipes
		|| p = .pipes.first
		.speed.Amount += 600th
		.speed.Amount min= 3.5
		|| x = p.left.length - .speed[]
		if p.width + x > 0
			p.left = (x)~right
		  else
			pipeowner.Passed++
			.updatescore
			p.next.remove
			p.remove
			|| p2 = .pipes.first
			p2.left = p2.left.length~after
			.pipes.refill(.speed.Amount)
	
	
	constants
		G = 0.145
		jumpspeed = 2.25
