#!/usr/local/bin/spd

module Counts 
	|int64| Lines
	|int64| Names
	|int64| Nodes
	|int64| Parsed
	|int64| Files
	|int64| Dirs
	|| exts = dictionary.new
	|| loud = !(app.yes("quiet") or app.yes("q"))
	
	function init (|string| ss)
		ss = ss.trim 
		ss := "spd/box"
		for s in (ss / '/') 
			exts[s] = s

	function Count (|message| Msg)
		require msg
		Counts.parsed++
		|| names = 	0 
		|| nodes = 0
		for s.flat in msg
			names += s.name!=""
			nodes++
		.Names += names
		.Nodes += Nodes


function string.loc (|int|)
	for s.lines in self
		rz += s.OutWhite >= 0


function file.cloc
	if counts.loud
		printline .path
	Counts.files++
	|| s = .ReadSafely$
	Counts.Lines += s.loc
	counts.Count(s.parse)


function file.CountAll (|bool| force=false)
	if .isdir
		counts.dirs++
		for c.files in self
			c.CountAll
	  else
		if force or counts.exts[.ext]
			.cloc	


main  
	|| a = app.args
	if !a
		"Usage: cloc path [--files=cpp/c/h]  [--quiet=true/false]"
		return 0
	
	counts.Init(app..files)
	for path in a
		|| dir = path.ExistingFile
			dir.CountAll(true)
	counts.report


function Counts.report
	|| f = .files
	|| l = .lines
	|| p = .parsed
	|| d = .nodes
	"$l lines in $f files"
	|| n = .names
		"$n names in $d nodes across $p jeebox files"
	stderr.clear

