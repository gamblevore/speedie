#!/usr/local/bin/spd


module Counts 
	|int64|		Lines
	|int64|		Names
	|int64|		Nodes
	|int64|		Parsed
	|int64|		Files
	|int64|		Dirs
	|int64| 	KB
	|int64| 	ObjMem
	|int64| 	StrMem
	|int|		MaxNodeLength
	|uint[65]|	Histogram
	
	||			exts = dictionary.new
	||			loud = !(app.yes("quiet") or app.yes("q"))
	||			PrintTree = false
	||			PrintedTree = false
	||			ParseSpeed = app.yes("s")
	|string| 	DefaultExt = "spd/box/jbin/jb/xml"
	
	function Init (|string| ss)
		|| pt = app["p"]
			PrintTree = true
			if pt != "true"
				MaxNodeLength = pt.int
		ss = ss.trim 
		ss := DefaultExt
		for s in (ss / '/') 
			exts[s] = s

	function Count (|message| Msg)
		opt norefcounts
		Counts.parsed++
		|| names = 	0 
		|| nodes = 0
		for s.flat in msg
			|| len = s.name.Length
			names += (len>0)
			|| n = len min 64
			Histogram[n]++
			nodes++
		.Names += names
		.Nodes += Nodes

	function MemStart
		.objmem = app.ObjMemory
		.strmem = app.stringmemory

	function PrintMem
		"Obj: ${.objmem.strsize}  Str: ${.strmem.strsize}"
		
	function MemEnd
		require app["m"]
		print "(Original) "
		.PrintMem
		.objmem = app.ObjMemory - .objmem
		.strmem = app.stringmemory - .strmem
		print "(Extra) "
		.PrintMem
		


function string.loc (|int|)
	for s.lines in self
		rz += s.OutWhite >= 0


function file.cloc
	if counts.PrintTree
		require StdErr.ok
		expect (!counts.PrintedTree) "Can't have multiple files, with printtree."
		counts.PrintedTree = true
	  elseif counts.loud
		printline .path 

	|| data = .ReadSafely(int.max) #require
	if data.IsCompressed
		data = data.Decompress(int.max) // might as well...
	
	Counts.files++
	
	counts.memstart
	|| Start = date.now
	|| msg = data.parse
	|| Durr = start.ago
	counts.MemEnd
	Counts.Lines += data.loc
	counts.kb += data.Length
	require msg
	counts.Count(msg) 
	if counts.PrintTree
		if counts.maxnodelength
			for s.flat in msg 
				s.name = s.name.Preview(counts.MaxNodeLength)
		msg.RenderAST(app.stdout)
		printline
	  elseif counts.ParseSpeed
		app.stdout.out.RenderSpeed(durr.seconds, data.length, 0, "Parsed")
		printline
	(msg)
		


function file.CountAll (|bool| force=false)
	if .isdir
		counts.dirs++
		for c.files in self
			c.CountAll
	  elseif force or counts.exts[.ext]
		.cloc


main  
	if !app.args
		"Usage: cloc path
--files=cpp/c/h               Only report these files (defaults to ${counts.DefaultExt})
--quiet=true/false            Makes less output
-k                            Keeps errors
-s                            Report parse speed
-p                            Print parse Tree
-m                            Report Memory Usage
-h                            Histogram
"
		return 0
	
	counts.Init(app..files)
	for path in app.args
		|| dir = path.ExistingFile
			dir.CountAll(true)
	counts.report


function Counts.ReportHisto
	require app.yes("h")
	|| h_done = false
	|| curr = 0
	|| total = .names + Histogram[0]
	for i in 65
		if histogram[i]
			if !h_done
				h_done = true
				"histogram:"
			curr += histogram[i]
			|| pc = curr pc total
			"    $i: $pc"
	if h_done
		""


function Counts.report
	if !app.yes("k")
		stderr.clear
	require !counts.PrintTree
	|| f = .files
	|| l = .lines
	|| p = .parsed
	|| d = .nodes
	|| kb = .KB.strsize
	"$l lines"
	|| n = .names
		"$n names in $d nodes"
		.ReportHisto
	if p > 1 or f > 1
		"Total files: $f, total jeebox files: $p, total filesize: $kb"
	if compressionstats.All.Out
		compressionstats.all.render(app.stdout.out)
		printline
		
