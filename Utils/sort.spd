#!/usr/local/bin/speedie

|[file]|				Found
|dictionary?|			Types
|int|					Total

main (|[existingfile]| files)
	types = dictionary.new
	types!["spd"] = "x"
	|| t = app["types"]
		if t == "*"
			types = nil
		  else
			types = t.Dict('/')
		
	for f in files
		app.Collect(f)
	found.sort(MySorter)
	|| remover = app.Findremover
	if app.No("quiet")
		for f in found
			"${f.trimstart(remover)} --> ${f.size.strsize}"
	"Total: ${Total.strsize}"


function App.FindRemover (|string|)
	require app.args == 1
	|| s = app.args[0]
		return s.PathDir
		

function app.Collect (|file| f)
	require	f
	if f.IsDir
		for c.files in f
			if c.visible
				.collect(c)
	  elseif !types or types[f.ext]
		total += f.size
		found <~ f

	
function MySorter (SorterComparer)
	if a isa file and b isa file
		return a.size - b.size
	