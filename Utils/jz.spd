#!/usr/local/bin/speedie

datatype Type (int)
	flags
		Compressed, Plain, XML, actions=(Box, Jbin, Report), StdOut
	
	syntax is (|Type| test, |bool|)
		return self & test
	syntax isnt (|Type| test, |bool|)
		return !(self & test)
	
	render
		if self is Compressed: fs <~ "compressed "
		if self is jbin
			fs <~ "jbin"
		  elseif self is box:  fs <~ "jeebox"
		  elseif self is xml:  fs <~ "xml"
		  else
			fs <~ "plain"


function app.Action (|type|)
	rz |= app["report"].yes * type.report
	rz |= app["box"].yes    * type.box
	rz |= app["bin"].yes    * type.jbin
	rz |= app["p"].yes      * type.stdout
	rz |= app["cmp"].yes    * type.compressed
	expect (rz & type.actions).CountBits <= 1 ("Too many actions chosen.")
	

main  
	|| args = app.args		#expect ("Usage: ${app.filename} InPath [...]")
	|| Action = .Action
	expect ((action isnt stdout) or (args == 1)) ("Can't write multiple files to stdout. How would we know where a file ends?")
	for r in args
		|| data = r.ReadFile(0.25GB, false)
			conv(data, r).Process(Action)
	
	if stderr.ok
		check (conv.done) "Nothing to do. All files already ${action.render}."


class Conv
	|string|	Data
	|string|	In
	module: |int| Done

	function Process (|Type| Dest, |bool|)
		|type| Detected = .data.IsCompressed * type.compressed
		ifn Dest&type.Actions // (de)compress only
			require (detected is Compressed) == (dest isnt compressed)
		if Detected
			.data = .data.Decompress 
		
		++done
		|| ext = ""
		|| Do = Dest&type.Actions
			|| parse = .data.parse
			expect (parse or dest is report) ("File isn't parseable.")
			if !parse
				detected |= type.plain
			  elseif .data.IsJbin
				detected |= type.jbin
			  elseif parse.Find(@xml)
				detected |= type.xml
				require parse.XMLToJeebox
			  else
				detected |= type.box

			if Dest is report
				"$.in is: ${detected.render}"
				StdErr.clear
				return true

			require Detected&type.actions != dest&type.actions
	
			if dest is box
				.data = parse.Render
				ext = "box"
			  else
				.data = parse.render_jbin
				ext = "jbin"
	
		if dest is compressed
			.data = .data.Compress
		if dest is stdout
			print .data
		  else
			|| Out = .in.RemoveExt("mz")
			if ext:  out = out.SetExt(ext) // killing good exts like "spd" <-- "". sigh
			if dest is compressed: out = out.AddExt("mz")
			if Out <~ .data
				printline out
		
		return true

/// jz -box  A.xml					// xml to box
/// jz -comp A.xml -out=B.xml.mz	// compress A.xml a.xml.mz ?
/// jz -comp A.xml.mz				// do nothing
/// jz A.whatever					// decompress (Assuming it is compressed)
/// jz -bin  A.box					// a.box.jbin