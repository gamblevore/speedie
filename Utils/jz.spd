#!/usr/local/bin/speedie

// give jz an "-o=file" switch
datatype Type (int)
	flags
		Compressed, Plain, XML, actions=(Box, Jbin, Report), StdOut, SelfReplace
	
	syntax is (|Type| test, |bool|)
		return self & test
	syntax isnt (|Type| test, |bool|)
		return !(self & test)
	
	render
		if self is Compressed
			fs <~ "compressed "
		if self is jbin
			fs <~ "jbin"
		  elseif self is box
			fs <~ "jeebox"
		  elseif self is xml
			fs <~ "xml"
		  else // speedie can't put this on a single line. C++ compile-error!
			fs <~ "plain"


|| DefaultStrength = mzlab.default

function App.GetActions (|Type|)
	for s in app.Switches
		|| name = s.ArgName
		if name ~= "r"
			rz |= type.report
		  elseif name ~= "j"
			rz |= type.box
		  elseif name ~= "b"
			rz |= type.jbin
		  elseif name[0].LowerCase == 'c'
			rz |= type.compressed
			|| str = s.ArgValue
				DefaultStrength = str.int max 0
		  elseif name ~= "s"
			rz |= type.selfreplace
		  elseif name ~= "p"
			rz |= type.stdout
			check (app.args == 1) ("Can't write multiple files to stdout.")
		  else
			error "Unknown switch $s"

	rz |= type.plain
	check ((rz & type.actions).CountBits <= 1) ("Too many actions.")


function app.usage (|string|)
	return "Usage: ${.filename} File1 [File2, ...],  or: ${.filename} FileIn -p > FileOut
	options:
		-j		Convert to jeebox
		-b		Convert to jbin
		-c		Compress
		-s		Replace file in-place
		-p		Print to stdout
		-test	Tests if compression works using input file
		-r		Just report types, otherwise do nothing.

	examples:
		jz -j A.xml						// xml to box
		jz -c A.xml						// compress A.xml into A.xml.mz
		jz    A.mz						// decompress
		jz -b A.box						// box to jbin
		jz -b A.xml						// xml to jbin
"

main  
	if app.yes("test")
		return 1-MZLab.TestMz(app[0]) 
		// so we wanna run the mzlab thing
		
	|| action = .getactions$
	for r in (app.args  #expect (.Usage))
		|| StartTime = date()
		|| data = r.ReadFile(int.max, false)
			conv(data, r, starttime).Process(Action)
	
	if stderr.ok and !conv.done
		"Nothing to do. All files already in destination format."



class Conv
	|string|	Data
	|string|	In
	|date| 		Start
	module: |int| Done
	
	constructor (|string| Data, |string| in, |date| before)
		.data = data
		.in = in
		.Start = before
		.Time("Read")
	
	function Time (|string| Name)
		|| ago = .Start.ago
		|float| scale = 1MB
		|float| size = .data.Length
		|| s = ago.seconds
		"$Name: ${s}s  (${Size/(scale*s)}MB/s)"

	function Process (|Type| Dest, |bool|)
		|type| Detected = .data.IsCompressed * type.compressed
		ifn Dest&type.Actions // (de)compress only
			require (detected is Compressed) == (dest isnt compressed)
		if Detected and .data.IsCompressed
			.start = date()
			.data = .data.Decompress(int.max)
			.time("Decompress")

		++done
		|| ext = ""
		|| Do = Dest&type.Actions
			.start = date.now
			|| parse = .data.parse
			expect (parse or dest is report) ("File isn't parseable.")
			if parse
				.time("Parse")
			if !parse
				detected |= type.plain
			  elseif .data.IsJbin
				detected |= type.jbin
			  elseif parse.Find(@xml)
				detected |= type.xml
				if !(dest is report)
					require parse.XMLToJeebox
			  else
				detected |= type.box

			if Dest is report
				"$.in is: ${detected.render}"
				StdErr.clear
				return true
 
			require Detected&type.actions != Do
	
			if dest is box
				.data = parse.Render
				ext = "box"
			  else
				.data = parse.render_jbin
				ext = "jbin"
	
		if dest is compressed
			.start = date.now
			.data = .data.Compress(DefaultStrength max 0)
			.time("Compress")
		if dest is stdout
			print .data
		  else
			|| Out = .in
			if dest isnt selfreplace
				out = .in.RemoveExt("mz")
				if ext
					out = out.SetExt(ext) // killing good exts like "spd" <-- "". sigh
				if dest is compressed
					out = out.AddExt("mz")
			if Out <~ .data
				printline out
		
		return true
