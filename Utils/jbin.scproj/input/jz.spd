#!/usr/local/bin/speedie

datatype Type (int)
	flags: Compressed, Plain, XML, Box, Jbin
	syntax is (|Type| test, |bool|)
		return self & test

/// jz -box  A.xml		// xml to box
/// jz -comp A.xml		// compress A.xml a.xml.mz ?
/// jz -comp A.xml.mz	// do nothing
/// jz A.whatever		// decompress (Assuming it is compressed)
/// jz -bin  A.box		// a.box.jbin

|| OutPath = app[1]
|| InPath = app[0]
|| Comp = app["comp"]
|| Data = ""
|type| Detected
|message| parse 

main  
	expect (app.args >= 1 and app.args <= 2)				("Usage: ${app.filename} InPath [OutPath]")
	data = inpath.file.ReadSafely(0.25GB)					#require
	.Detect
	if !.DoStuff and stderr.ok
		|| str = .ReportStr()
		error "$str to $str: Nothing to do."


function app.DoStuff (|bool|)
	if app["report"]
		print "$inpath is ${.ReportStr}\n\n"
		StdErr.clear
		return true
	if app["box"]
		return .ToBoxOrBin(Type.box)
	if app["bin"]
		return .ToBoxOrBin(Type.jbin)
	if (detected is Compressed) == !comp
		.write
		return true


function App.ReportStr (|string|)
	if Detected & type.Compressed: rz = "compressed "
	if Detected & type.jbin: rz += "jbin"
	if Detected & type.box:  rz += "jeebox"
	if Detected & type.xml:  rz += "xml"
		

function App.Detect
	if data.IsCompressed
		data = data.Decompress
		detected = Type.Compressed
	parse = data.parse
	if !parse
		detected |= type.plain
	  elseif data.IsJbin
		data = parse.Render
		detected |= type.jbin
	  elseif parse.Find(@xml)
		detected |= type.xml
	  else
		detected |= type.box

	
function App.ToBoxOrBin (|Type| Dest, |bool|)
	expect !(Detected is plain) ("File isn't jeebox.")
	|| ext = ""
	if Detected & Dest
		require Detected is Compressed
	  else
		if Detected is xml
			parse.XMLToJeebox
		if dest is box
			data = parse.Render
			ext = "box"
		  else
			data = parse.render_jbin
			ext = "jbin"

	.write(ext)
	return true
		

function app.write (|string| ext="")
	if !OutPath
		outpath = inpath.RemoveExt("mz")
		if ext
			outpath = outpath.setext(ext)
		if Comp
			outpath = outpath.addext("mz")
	
	if Comp
		data = data.Compress
	OutPath <~ data

	if StdErr.ok
		StrPrintLine(outpath)

