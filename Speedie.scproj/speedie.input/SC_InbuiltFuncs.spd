
/*
	Speedie Internals. By Theodore H. Smith...
*/



function scclass.Falsify (|message| ques, |message|)
	opt norefcounts
	|| f = .false
	if !f
		debugger
		return nil
	if f.hasany
		return f.copy
	ques.func = f.func
	if f isthing "nil"
		ques.obj = TypeNil
	  else
		ques.name = f.name


function Message.FalsifyNil (|message|)
	opt norefcounts

	|| ret = scfunction.currfunc!.returntype
	if ret and ret.IsNormal
		return ret.type.Falsify(self)
	.func = @thg
	.obj = typenil

	
function Message.ReplaceInbuiltSub (|scdecl?| self_decl, |message|)
	opt norefcounts
	if (self == "nil")
		return .FalsifyNil

	  elseif (self == "count")
		expect (self_decl and self_decl.IsCArray) (self, "This is not a c-array")
		return self_decl.c_array.msg

	  elseif (self == "digest")
		|| f = self[@sstr]
			|| IsOK = stderr.mark
			using self
				f.name = f.name.digest
				if !IsOK and stderr.CanAddMore
					|| err = stderr.errors.last
						err.shiftposition(f.position)
				
		.become(@bra)

	  elseif (self == "compress")
		|| f = self[@sstr]
			f.name = f.name.Compress
		.become(@bra)
	
	  elseif (self == "taskvars")
		|| cls = scfunction.currfunc!.cls		#expect (self)
		.become(@num,cls.TaskObjectCount|int|.render)
		
	  elseif (self == "sizeof")
		expect (self_decl) (self, "Unable to get size")
		return .InbuiltSizeOf(self_decl)
		
	  elseif (self == "typeof" or "contained")
		expect (self_decl) (self, "Unable to get type")
		if self ~= "typeof"
			return .InbuiltTypeOf(self_decl)
		return .InbuiltContained(self_decl)
		

	  elseif (self == "SELF_TEST_JBIN" or "SELF_TEST_NATURAL")
		Create_JeeboxTest( self )

	  else
		error (self)


target false
	function Message.InBuiltTypeOf (|scdecl| dcl, |string| Kind, |message|)
		opt norefcounts
		if kind != "typeof"
			dcl = dcl.contains #expect (self, "No contained type") // shouldn't fail but does? nilbug!
		return @thg + dcl.type.Name
		

function Message.InBuiltContained (|scdecl| dcl, |message|)
	opt norefcounts
	|| cnt = dcl.contains #expect (self, "No contained type")
	return @thg + cnt.type.Name


function Message.InBuiltTypeOf (|scdecl| dcl, |message|)
	opt norefcounts
	return @thg + dcl.type.Name
		
		


function Message.InBuiltSizeOf (|scdecl| sulf, |message|)
	return NewDeclNum(SCDecl(TypeInt!), sulf.SizeOfQuery)


function TypeOfQues (ExprResolver)
	opt norefcounts
	|| type
	|| prm = exp.first
	if !exp.name
		prm++
	if prm
		// replacing with TypeOfExpr, requires being able to return a "Typeinfo" object
		// which isn't even a class. like:   x = â€“sizeof MyStruct
		// what is the 'MyStruct' here? Or should we do that explicitly in the sizeof operator?
		// rather than collect it before, like I'm doing now.
		type = TypeOfExprModulesOK(prm, name_space) // AsDeclAutoComplete isnt a good name
	
	|| m = exp.ReplaceInbuiltSub(type.AsDecl)
		exp.SafeReplaceWith(m)
	if exp != @ques
		return TypeOfExpr(exp, name_space)


