
/*
	Jeebox internals. By Theodore H. Smith...
*/



function scclass.Falsify (|message| ques, |message|)
	opt norefcounts
	|| f = .false
	if !f
		debugger
		return nil
	if f.hasany
		return f.copy
	ques.func = f.func
	if f isthing "nil"
		ques.obj = typenil
	  else
		ques.name = f.name


function Message.FalsifyNil (|message|)
	opt norefcounts

	|| ret = scfunction.currfunc!.returntype
	if ret and ret.IsNormal
		return ret.type.Falsify(self)
	.func = @thg
	.obj = typenil

	
function Message.ReplaceInbuiltSub (|SCNode| name_space, |scdecl?| self_decl, |message|)
	opt norefcounts
	if (self == "nil")
		return .FalsifyNil

	  elseif (self == "count")
		expect (self_decl and self_decl.IsCArray) (self, "This is not a c-array")
		return self_decl.c_array.msg

	  elseif (self == "digest")
		|| f = self[@sstr]
			|| IsOK = stderr.mark
			f.name = f.name.digest
			if !IsOK and stderr.canaddmore
				|| err = stderr.errors.last
					err.shiftposition(f.position)
				
		.become(@bra)

	  elseif (self == "compress")
		|| f = self[@sstr]
			f.name = f.name.Compress
		.become(@bra)
	  elseif (self == "taskvars")
		|| cls = scfunction.currfunc!.cls #expect (self)
		.become(cls.taskobjectcount)
		
	  elseif (self == "sizeof")
		expect (self_decl) (self, "Unable to get size")
		return .InbuiltSizeOf(name_space, self_decl, self)

	  elseif (self == "SELF_TEST_JBIN" or "SELF_TEST_NATURAL")
		Create_JeeboxTest( self )

	  else
		error (self)


function Message.InBuiltSizeOf (|SCNode| name_space, |scdecl| sulf, |message| sulf_exp, |message|)
	return NewDeclNum(scdecl(TypeInt!), sulf.allocatedsize)


function TypeOfQues (ExprResolver)
	opt norefcounts
	|| type
	|| prm = exp.first
	if !exp.name
		prm++
	if prm
		// replacing with TypeOfExpr, requires being able to return a "Typeinfo" object
		// which isn't even a class. like:   x = â€“sizeof MyStruct
		// what is the 'MyStruct' here? Or should we do that explicitly in the sizeof operator?
		// rather than collect it before, like I'm doing now.
		type = TypeOfExprModulesOK(prm, name_space) // AsDeclAutoComplete isnt a good name
	
	|| m = exp.ReplaceInbuiltSub(name_space, type.AsDecl)
		exp.SafeReplaceWith(m)
	if exp != @ques
		return TypeOfExpr(exp, name_space)


