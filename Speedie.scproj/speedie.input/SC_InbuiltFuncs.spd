
/*
	Jeebox internals. By Theodore H. Smith...
*/



function Message.ReplaceInbuiltSub (|scbase| name_space, |scdecl| self_decl, |message| self_exp, |message|)
	if self_exp != self // remove param
	if (self == "count")
		expect (self_decl.c_array) (self_exp, "This is not a c-array")
		return «num self_decl.c_array »
	  elseif (self == "digest")
		|| f = self[@sstr]
			f.name = f.name.digest
		.become(@bra)
	  elseif (self == "compress")
		|| f = self[@sstr]
			f.name = f.name.Compress
		.become(@bra)
	  elseif (self == "sizeof")
		return .InbuiltSizeOf(name_space, self_decl, self_exp)

	  elseif (self == "SELF_TEST_JBIN" or "SELF_TEST_NATURAL")
		Create_JeeboxTest( self )

	  else
		error (self_exp)


function Message.InbuiltSizeOf (|scbase| name_space, |scdecl| sulf, |message| sulf_exp, |message|)
	return NewDeclNum(scdecl.new, sulf.bytesize, "")


function TypeOfQues (ExprResolver)
	opt norefcounts
	|| type
	|| prm = exp[0 + (exp.name == "")]
		type = TypeOfExprModulesOK(prm, name_space) // AsDeclAutoComplete isnt a good name
	|| m = exp.ReplaceInbuiltSub(name_space, type.AsDeclAutoComplete, exp)
		exp.SafeReplaceWith(m)
	if exp != @ques
		return TypeOfExpr(exp, name_space)


function Object.AsDecl2 (|scdecl|)
	if self
		if self isa SCDecl
			return self
		if self isa scfunction
			return .returntype
