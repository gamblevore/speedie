/*
	Jeebox internals. By Theodore H. Smith...
*/



|| iii = 0
class SCParamArray
	linkage
		cpp_part		PA
	contains message

	|Message--?[11]|	Items
	|Message--?|		Exp
	|SCClass--?|		Cls
	|int16|				Size
	|int16|				ErrCount
	|bool|				IsAssigns
	|bool|				HasProperParams
	|bool|				IsDot
	|bool|				IsAddress
	|bool|				IsNotModule
	|bool|				IsSelf
	|bool|				IsSuper
	|bool|				Found
	|bool|				AllowSelfToConstructor
	

	constructor (|Message?| exp)
		opt norefcounts
		.Exp = exp
		.IsDot = (exp == @dot)
		.IsAddress = (exp and exp.niceparent Isbrel "&")
		.ErrCount = stderr.errorcount


	function AddSub (|| m)
		expect (.size < 11) (m, "Too many parameters")
		|| i = .size++
		.items[i] = m
	
	syntax access (|int| i, ||)
		if (i < .size)
			return .items[i]
			
	render
		for i in .size|int|
			fs <~ ','
			fs <~ ' '
			start
			|| obj = .items[i] 
			obj.render(fs)
			|| ty = typeofexpr(obj, nil)
				ty.render(fs)
	
	function CopyArgs (|[message]|)
		opt norefcounts
		for s in self
			rz <~ s
	
	function IsModule (|bool|)
		return !.IsNotModule
		
	function MadeError (|bool|)
		return StdErr.ErrorCount > .errcount
	
	function IsSelfCon (|bool|)
		return (.isself or .issuper) and (scfunction.currfunc is constructor)
	
	function IgnoreSelfContain (|int|)
	// need to allow addressofcasting on self struct
		opt norefcounts
		|| cls = .cls
			if (.IsDot and .IsNotModule)
				if cls.isstruct
					rz |= kTypeCastIgnoreAddressOf
				if cls is IgnoreContainedSelf
					rz |= kTypeCastIgnoreContained

	function RenderKind (|string|)
		if (.IsNotModule)
			return "class"
		return "module"
	
	function ModuleName (|string|)
		|| p = self[0] 
		if !.IsNotModule
			p = .exp.first
		
		if p
			rz = p.RenderType.nicerclassname


	function string.NicerClassName (|string|)
		if self ~= "StringZeroTerminated"
			return "string"
		return self
		

	function PreReadTypes (|SCNode| Name_Space, |Message?| P, |message?| side, |bool|)
		if p and !.exp
			.exp = p
		|| item = p.first

		while item
			item = .AddTestedParam(item, name_space)

		.side = side
		return true


	function SCNode.IsModuleFunc (|bool|)
		opt norefcounts
		if (self isa scarg)
			return !.IsClassArg
		return (self isa SCModule)


	function DetectDotSuper (|SCNode| curr, |SCNode| arg_space, |SCNode|)
		opt norefcounts
		.IsNotModule = !Curr.IsModuleFunc
		if .IsDot
			|| Exp0 = .exp.first
				.isself = (exp0 ~= "self")
				if .IsNotModule
					|| ty = typeofexpr(exp0, arg_space)
						.cls = ty.type
					.addsub(exp0)
					if (exp0 IsThing "super")
						.IsSuper = true
						exp0.name = "self"
						// setting isself would change property setters.
						return Curr.parent
		return Curr


	syntax cast (|bool|)
		return (self != nil) and .HasProperParams


	function AddParam (|message| item)
		.addsub(item)
		.HasProperParams = true


	function AddTestedParam (|message| item, |SCNode| name_space, |message|)
		opt norefcounts
		|| nxt = item.next
		|| pr = item.parent
		expect TypeOfExpr( item, name_space ) ( item, "Canâ€™t find type." )

		if item in pr // in case "..." adds a param
			.AddParam(Item)
			return item.next

		/// temped out! ouch!
		if nxt
			.AddParam(nxt.prev)
		  else
			.addparam(pr.last)
		return nxt


	function MacroSize (|int|)
		return .size - .isassigns


	function Side (assigns:|Message|)
		if Value
			.addsub(Value)
			.IsAssigns = true
	
	
	function StructExtract (|scdecl| type)
		// remove this?
		debugat
		|| s = .exp
			|| where = s.UseNonRefChangers(True)!
			|| fn = where.func
			if fn != @rel
				scfunction.TempMoveOut(s, type)
	

	
	function StructAsReturn (|SCDecl| type, |scfunction| fn)
		|| s = .exp$
		|| Rel = s.UseNonRefChangers(True)
		|| f = Rel.func

		if f == @prm
			Rel = scfunction.TempMoveOut(s, type.internal).second!
			f = Rel.func			/*   .TestAccept(YY.new)   -->   || tmp = YY.new, .TestAccept(tmp)   */
		  elseif  (Rel.ASMType is kreturn)
			/* return YY.new  --> yy.new(rz), return */
			|| prm = s.last!
			prm.func = @prm
			|| subrz = prm.msg(@thg, "rz")			// we need to add rz.
			subrz.obj = scfunction.currfunc!.StructReturned // right?
			rel.prev = rel.first
			return
		
		if  f == @rel
			|| name = Rel.first!
			|| op = name.next!
			if op != "="
				// just temp it out...? we'll have a rel?
				error (op, "Please simplify this expression")
			  else
				if  Rel in @decl				/*	|| x = YY.new   -->   |YY| x,  YY.new(&x)  */
					op.become(@thg, name.name)
					|| Dcl = Rel.parent!
					|| dcltype = dcl.first
						dcltype.become(@thg, type.type.name)
					dcl.next = s
					dcl <~ Neweqrel(name, type.internal!.CreateStructNil(name))
				  else
					op.become(@bra)
					op.obj = nil
					op <~ name
					op = name
					Rel.next = s
				
				|| prm = s.last!				/*  y = YY.new --> YY.new(&y)  */
				if fn.StructReturnPos==1
					prm.first = Rel
				  else
					prm.last = rel
				prm.func = @prm
				Rel.become(@brel, "&")
				Rel.obj = type
				if op != name
					op.obj = name.obj
					if !op.obj
						op.obj = name
						FixMe <~ op
		
		  else
			error (s, "Not sure how to handle this.")
	
		// returns need further processing!
		// we do returns via params, right? the thing is... we want to keep the returns
		// as returns... so that we can do more logic with it. at least... it will make things simpler.
		
		// in this case... we could expect the C++ renderer to do it, but thats quite lame.
		// i think we could just post-process it? makes sense, right?! Do it after transform...
		// probably do this before the nil-checker?
	
	
	module
		|[message]| FixMe
		
		function PostStructFix
			opt norefcounts
			for s in .FixMe
				|| orig = s.obj as message
					s.obj = orig.obj
			.FixMe.clear
	
	
	iterator
		|int| n = .size
		|int| i = 0
		while i < n
			yield .items[i]
			++i
