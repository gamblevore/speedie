/*
	Jeebox internals. By Theodore H. Smith...
*/



class SCParamArray
	linkage
		cpp_part		PA
	contains message

	|Message--?[11]|	Items
	|Message--?|		Exp
	|SCClass--?|		Cls
	|int|				RunNum
	|int16|				Size
	|int16|				ErrCount
	|bool|				IsAssigns
	|bool|				HasProperParams
	|bool|				IsDot
	|bool|				IsAddress
	|bool|				IsNotModule
	|bool|				IsSelf
	|bool|				IsSuper
	|bool|				Found
	|bool|				AllowSelfToConstructor
	

	constructor (|Message?| exp)
		opt norefcounts
		.Exp = exp
		.IsDot = (exp == @dot)
		.IsAddress = (exp and exp.niceparent Isbrel "&")
		.ErrCount = stderr.errorcount
		.runnum = ++RunCount


	function AddSub (|| m)
		expect (.size < 11) (m, "Too many parameters")
		|| i = .size++
		.items[i] = m
	
	syntax access (|int| i, ||)
		if (i < .size)
			return .items[i]
			
	render
		for i in .size|int|
			fs <~ ','
			fs <~ ' '
			start
			|| obj = .items[i] 
			obj.render(fs)
			|| ty = typeofexpr(obj, nil)
				ty.render(fs)
	
	function CopyArgs (|[message]|)
		opt norefcounts
		for s in self
			rz <~ s
	
	function IsModule (|bool|)
		return !.IsNotModule
		
	function MadeError (|bool|)
		return StdErr.ErrorCount > .errcount
	
	function IsSelfCon (|bool|)
		return (.isself or .issuper) and (scfunction.currfunc is constructor)
	
	function IgnoreSelfContain (|int|)
	// need to allow addressofcasting on self struct
		opt norefcounts
		|| cls = .cls
			if (.IsDot and .IsNotModule)
				if cls.isstruct
					rz |= kTypeCastIgnoreAddressOf
				if cls is IgnoreContainedSelf
					rz |= kTypeCastIgnoreContained

	function RenderKind (|string|)
		if (.IsNotModule)
			return "class"
		return "module"
	
	function ModuleName (|string|)
		|| p = self[0] 
		if !.IsNotModule
			p = .exp.first
		
		if p
			rz = p.RenderType.nicerclassname


	function string.NicerClassName (|string|)
		if self ~= "StringZeroTerminated"
			return "string"
		return self
		

	function PreReadTypes (|SCNode| Name_Space, |Message?| P, |message?| side, |bool|)
		if p and !.exp
			.exp = p
		|| item = p.first

		while item
			|| nxt = item.next
			
			require  .AddTestedParam(item, name_space)
			if item in p // in case "..." adds a param
				item = item.next
			  else		 /// temped out! ouch!
				item = nxt

		.side = side
		return true


	function SCNode.IsModuleFunc (|bool|)
		opt norefcounts
		if (self isa scarg)
			return !.IsClassArg
		return (self isa SCModule)


	function DetectDotSuper (|SCNode| curr, |SCNode| arg_space, |SCNode|)
		opt norefcounts
		.IsNotModule = !Curr.IsModuleFunc
		if .IsDot
			|| Exp0 = .exp.first
				.isself = (exp0 ~= "self")
				if .IsNotModule
					|| ty = typeofexpr(exp0, arg_space)
						.cls = ty.type
					.addsub(exp0)
					if (exp0 IsThing "super")
						.IsSuper = true
						exp0.name = "self"
						// setting isself would change property setters.
						return Curr.parent
		return Curr


	syntax cast (|bool|)
		return (self != nil) and .HasProperParams


	function AddParam (|message| item)
		.addsub(item)
		.HasProperParams = true


	function AddTestedParam (|message| item, |SCNode| name_space, |bool|)
		opt norefcounts
		expect TypeOfExpr( item, name_space ) ( item, "Canâ€™t find type." )
		.AddParam(Item)
		return true


	function MacroSize (|int|)
		return .size-.isassigns


	function Side (assigns:|Message|)
		if (Value)
			.addsub(Value)
			.IsAssigns = true
	
	
	function StructFix (|scdecl| type)
		|| s = .exp
			|| where = s.ParentPoint
			if where != @decl
				scfunction.TempMoveOut(s, type)
	
	module
		|int|	RunCount
		
		
	iterator
		|int| n = .size
		|int| i = 0
		while i < n
			yield .items[i]
			++i
