/*
	Jeebox internals. By Theodore H. Smith...
*/



class SCParamArray
	linkage
		cpp_part		PA
	contains message

	|Message[11]--|		Items
	|Message--|			Exp
	|SCClass--|			Cls
	|int16|				Size
	|int16|				ErrCount
	|bool|				IsAssigns
	|bool|				HasProperParams
	|bool|				IsDot
	|bool|				IsAddress
	|bool|				IsNotModule
	|bool|				IsSelf
	|bool|				IsSuper
	|bool|				Found
	

	constructor (|Message| exp, |message|side=nil)
		.Exp = exp
		.side = side
		.IsDot = (exp == @dot)
		.IsAddress = (exp != nil) and (exp.niceparent Isbrel "&")
		.ErrCount = stderr.errorcount


// exp0's type... we want it. where do we want it???? NOT IN HREERE!!! WHERE THEN
// IN SOME PLACE THAT WE NEED it. WHICH PLACE?
// A PLACE WITH THTE THINGS THAT WE ARE USING THIS FOR.
// WICH PLACE IS THAT?
// THE plACE THAT WE ARE USING THESE THING FOR???
// its a place that we are using them...
// and where is that.
// the place that we are using them?
// i cant fucking think with this shitty music.


	function addsub (|| m)
		expect (.size < 11) (m, "Too many parameters")
		|| i = .size++
		.items[i] = m
	
	syntax access (|int| i, ||)
		if (i < .size)
			return .items[i]
			
	render
		for i in .size|int|
			fs <~ ','
			fs <~ ' '
			start
			|| obj = .items[i] 
			obj.render(fs)
			|| ty = typeofexpr(obj, nil)
				ty.render(fs)
			
	
	function IsModule (|bool|)
		return !.IsNotModule
		
	function MadeError (|bool|)
		return StdErr.ErrorCount > .errcount
		
	
	function IgnoreSelfContain (|int|)
	// need to allow addressofcasting on self struct
		opt norefcounts
		|| cls = .cls
			if (.IsDot and .IsNotModule)
				if cls.isstruct
					rz |= kTypeCastIgnoreAddressOf
				if cls.IgnoreContainedSelf
					rz |= kTypeCastIgnoreContained

	function RenderKind (|string|)
		if (.IsNotModule)
			return "class"
		return "module"
	
	function ModuleName (|string|)
		if (.IsNotModule)
			return Self[0].RenderType
		return .exp.first.RenderType



	function PreReadTypes (|SCBase| Name_Space, |Message| P, |message|side, |bool|)
		.exp := p
		for  Item.fast in P  // in case '...' adds a param
			require  .AddTestedParam(item, name_space)
		.side = side
		return true


	function scbase.IsModuleFunc (|bool|)
		opt norefcounts
		if (self isa scarg)
			return !.IsClassArg
		return (self isa SCModule)


	function DetectDotSuper (|SCBase| curr, |scbase| arg_space, |SCBase|)
		opt norefcounts
		.IsNotModule = !Curr.IsModuleFunc
		if .IsDot
			|| Exp0 = .exp.first
				.isself = (exp0 ~= "self")
				if .IsNotModule
					|| ty = typeofexpr(exp0, arg_space)
						.cls = ty.type
					.addsub(exp0)
					if (exp0 IsThing "super")
						.IsSuper = true
						exp0.name = "self"
						// setting isself would change property setters.
						return Curr.Lookup
		return Curr


	syntax cast (|bool|)
		return .HasProperParams


	function AddParam (|message| item)
		.addsub(item)
		.HasProperParams = true


	function AddTestedParam (|message| item, |scbase| name_space, |bool|)
		opt norefcounts
		expect TypeOfExpr( item, name_space ) ( item, "Canâ€™t find type." )
		.AddParam(Item)
		return true


	function Range (|IntRange|)
		|| y = .size
		|| x = (.isdot and .IsNotModule)|int|
		return (x,y)|intrange|


	function MacroSize (|int|)
		if .isassigns
			return .size-1
		return .size


	function Side (assigns:|Message|)
		if (Value)
			.addsub(Value)
			.IsAssigns = true

