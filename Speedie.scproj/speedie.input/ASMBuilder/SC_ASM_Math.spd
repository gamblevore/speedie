

prototype fn_OpASM          (|&ASMState| self, |asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |asmreg|)
prototype fn_ASMConstifier  (|asmreg| L, |asmreg| R, |int64|)


extend asmreg
	function CondAnswer (|asmreg|)
		.µtype = DataTypeCode.bool
		is AlreadyNegated
		is CondAnswer
		isnt negate
		return self

	function BoolAnswer (|asmreg|)
		.µtype = DataTypeCode.bool
		
		is AlreadyNegated
		isnt negate
		if self is CondRequest
			isnt condrequest
			is CondAnswer
		return self 


extend ASMState
	function EqualsInt (|asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |asmreg|)
		|| negate = (dest is negate)|int|
		|| Res = dest.BoolAnswer		// Hmmm... so what should it be?
		if dest isnt CondRequest
			if  L is constany  and  R is constany
				.nop2(r, l)
				// what if we get false? theres no fat? its just reg0
				return .NumToReg(exp, ((l.const==r.const)==!negate)|int|, res, datatypecode.bool)
			return exp.CMPB(dest, L, R, negate xor 1) * res

		if l.reg
			if negate
				return exp.JMPN(r,l,0) * res
			return exp.JMPE(r,l,0) * res
		if negate
			return exp.JBAN(r,0) * res
		return exp.JBOR(r,0) * res

	
	function Exists (|asmreg| dest, |asmreg| L, |message| exp, |asmreg|)
		opt inline
		return .Equals(dest.negate, l, asmreg(), exp)


	function EqualsSame (fn_opasm)
		return .NumToReg(exp, (dest isnt negate)|int|, dest, datatypecode.bool)
	
	
	function Equals (fn_opasm)
		|| rr = r.reg,  || ll = l.reg
		if !rr  and  ll
			swap (l) (r) // put reg 0 into the left... more convenient.
		(Dest  as=  l bitand r bitand asmreg.constany)
		
		if rr == ll
			rz = .EqualsSame(dest, l, r, exp)
		  elseif dest.IsInt
			rz = .EqualsInt(dest, l, r, exp)
		  else
			rz = .CompareFloat(dest, l, r, exp, 2)
			
		if rz is constany
			if dest is constany
				.nop2(l, r)
			|| eq = (rz.const)|bool| != (dest is negate)
			(rz is TrueConstCond) = eq // in case we compare to 0 and get nopped later
			
		rz = rz.boolanswer
	
		
	function NotEq  (fn_opasm)
		return .Equals(dest.negate, l, r, exp)


	function CompareInt (|asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |int| Mode, |asmreg|)
		|| OldDest = dest
		dest = dest.BoolAnswer
		mode |= !r.signed<<2
		mode ^= OldDest isnt Negate
		if OldDest isnt CondRequest
			return exp.CMPI(dest, L, R, mode) * dest

		return exp.JMPI(L, R, mode, 0) * dest


	function CompareFloat (|asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |int| Mode, |asmreg|)
		|| OldDest = dest
		if (l is constany and r is constany) // needs to handle this!
		dest = dest.BoolAnswer
		mode |= l.IsBig<<3
		mode |= r.IsBig<<2
		mode ^= OldDest isnt Negate
		if dest isnt CondRequest
			return exp.CMPF(dest, L, R, Mode) * dest
		return exp.JMPF(L, R, Mode, 0) * dest


	function Compare (|asmreg| dest,  |asmreg| L,  |asmreg| R,  |message| exp,  |int| Mode,  |asmreg|)
		if dest.IsInt
			rz = .CompareInt(dest, l, r, exp, mode)
		  else
			rz = .CompareFloat(dest, l, r, exp, mode)
		rz = rz.boolanswer

/*				(A >  B)    (A <= B)    (A == B)    (A != B)			*/
	
	function More   (fn_opasm)
		return .compare(dest, l, r, exp, 0)

	function LessEq (fn_opasm)
		return .compare(dest, l, r, exp, 1)

	function Less   (fn_opasm)
		return .compare(dest, r, l, exp, 0)

	function MoreEq (fn_opasm)
		return .compare(dest, r, l, exp, 1)



	// MATH 
	function QuickFloat32Plus    (fn_OpASM)
		if  r is constany // a + 1,   a - 1
			|| QQ = .QuickFloatPlusConstSub(dest, l, r, exp)
				return qq
		if  l is constany  and  l isnt Alternate   // 1 + a --> a + 1
			return .QuickFloatPlusConstSub(dest, r asnt asmreg.alternate, l, exp)
	
			
	function QuickFloatPlusConstSub    (fn_OpASM)
		|| k = r.Const|uint64|
		k ^= (l is Alternate)<<31
		require (k >> 18) << 18 == k
		.nop(r)
		return exp.FADK(dest, l, k) * Dest


	function message.DivByZero
		problem (self, "Divide by zero???")	


	function QuickFloatDiv    (fn_OpASM)
		require r is ConstAny
		|| v = r.float
		|| v2 = v.abs
		// could use exp.FEXK to do powers of 2
		if v2 == 1.0 or 0.0
			if v2 == 0.0
				Exp.DivByZero
			.nop(r)
			return .Quick1Or1Sub(dest, l, v|int|, exp)


	// from 1 to -1
	function Quick1Or1Sub (|&ASMState| self, |asmreg| dest, |asmreg| L, |int| ptoi, |message| exp, |asmreg|)
		if ptoi == -1										//   x * -1  -->  0-x 
			return .subtract(dest, asmreg(), l, exp)
		if ptoi == 1										//   x * 1   -->  x 
			return l
		return dest.µtype.zero								//   x * 0   -->  0
		

	function QuickIntMul    (fn_OpASM)
		|| Pow2 = .IntPowerOfTwo(r)
			if Pow2 <= 1
				return .Quick1Or1Sub(dest, l, Pow2, exp)
			return exp.BFLG(dest, l,  Pow2-1, 0, 0) * Dest	// y = x * 4  -->  y = x << 2

		|| five = .IntPowerOfTwo(r, 1) // 5 or 9 or 17 or 33, etc
			return exp.ADD(dest, l, l, five-1) * dest


	function QuickFloatMul    (fn_OpASM)
		require r is ConstAny	
		|| v = r.float
		if  v == 1.0 or 0.0 or -1.0
			.nop(r)
			return .Quick1Or1Sub(dest, l, v|int|, exp)
		if  v == 2.0
			.nop(r)
			return .plus(dest, l, l, exp)
		
		if r.Fourbytes
			|| x = r.const
			|| y = x >> 18
			if x == y << 18
				.nop(r)
				return exp.FMLK(dest, l, x) * Dest

	
	function ASMReg.LeftScore (|int|) // we want pointers on the left... ints on the left, and consts on the right
		return (.µtype.ispointer<<1) + (self isnt constany)
	
	
	function asmreg.PointerMul (|message| exp, |int| swapped, |int|)
		opt norefcounts
		|| fn = exp.Func
		if fn == @opp
/			if swapped
				exp = exp.next
			  else
				exp = exp.prev
			
		  elseif fn == @arel or @brel
/			exp = exp.first
		
		  elseif fn == @acc // merge after testing this
/			exp = exp.first
			
		  elseif fn == @dot // obj.Prop // requires pointermul on .prop cos of prev props
			// leave it?
			debugat
		  else
			error "aaargh"
			debugger 
		|| d = exp.ASMDecl.Internal
			return d.CArraySize
		debugger // hmmmm. its not a pointer after all?
	

	function InlineAddK (|asmreg| L, |int64| R, |bool|)
		if l is temp
/			|| fat = l.fat
			if fat isa asm.addk
	/			|| CC = fat.r[2] + R
				if CC.CanStoreAsIntImmediate
/					fat.r[2] = CC
					return true


	function IntPlus     (fn_opasm)
		//		a - 1,		a + 1		//
		//		1 - a,		1 + a		//
		if dest is ConstAny // perhaps we can do this in domathsub?
			return .MakeConst2(dest, l, r, exp, ConstifyIntPlus)

		if l.reg == r.reg // shift
			if l is Alternate
				debugger // shouldn't happen
			return .BFLG_Const(exp, dest, l, 1, 0) // shift up

		|| swapped = 0
		if  l.LeftScore < r.LeftScore // put consts into R
			if l is alternate
				target debug
					if r.µtype.IsPointer				// 1 - ptr??? we blocked this already.
			  else
				swapped = 1
				swap (l) (r) // a+b == b+a
	
		if !r.reg // add or subtract zero
			return .Assign(dest, l, exp)
		
	
		|| lmul = 1
		if (l isnt noscale) and l.µtype.ispointer
			lmul = l.PointerMul(exp, swapped)
		if r is ConstAny
			|| RR = r.const
			if l is alternate
				RR = -RR
			rr *= lmul
			if r.CanAddK(RR)								// a - 1,  a + 1
				.nop(r)
				if .InlineAddK(l, rr)
					return l
				return exp.ADDK(dest, L, RR) * dest

		|&fatasm| fat
		if lmul.ispow2		  								// x = int1 + int2
			fat = exp.ADD(dest, L, R, lmul.log2)			// x = lptr + r<<3
			if l is alternate
				fat.op ++
		  else
			|| v = .numtoreg(exp, lmul, asmreg(), datatypecode.uint)
			if l isnt alternate								// x = lptr + r*12
				fat = exp.MULT(dest, R, V, L)
			  else											// x = (lptr - rptr)/12
				exp.SUB(dest, L, R, ASMReg())
				|| uinttype = 0, debugger
				fat = exp.DIVV(dest, ASMReg(), dest, V, uinttype)  
			  
		return fat * Dest
		

	function FloatPlus (fn_opasm)
		if dest is ConstAny
			return .makeconst2(dest, l, r, exp, ConstifyFloatPlus)

		|| IsF32 = dest.FourBytes
			|| qq = .QuickFloat32Plus(dest, l, r, exp)
				return qq

		|| ss = (l is alternate)
		|| rr = r.reg
		return exp.fADD(dest, l, r*!ss, r*ss, 1-IsF32) * Dest


	function Plus (fn_opasm) // add (
		|| rr = r.reg, || ll = l.reg
		if !rr
			return l
		if l is alternate
			if rr == ll
				return .zeros(dest)
		  else
			if !ll
				return r
		if l.isint
			return .IntPlus(dest, l, r, exp)
		return .FloatPlus(dest, l, r, exp)


	function Subtract (fn_opasm)	// x = a - b
		(l is alternate) // the logic ismostly shared...
		return .plus(dest, l, r, exp)


	function Minus (fn_opasm)		// x = -b
		// not the same as negative, which is an fn_asm... that means it works on the exp
		// where as fn_opasms work on the op.
		(l is alternate)
		return .plus(dest, l, r, exp)


	function FloatMul (fn_opasm)
		if dest is constany
			return .makeconst2(dest, l, r, exp, ConstifyFloatMul)
		rz = .QuickFloatMul(dest, R, L, exp)
		if rz == nil
			rz = .QuickFloatMul(dest, L, R, exp)
			if rz == nil
				rz = exp.FMUL(dest, L, R, asmreg(), l.IsBig|int|) * Dest


	function IntMul (fn_opasm)
		if dest is ConstAny
			return .MakeConst2(dest, l, r, exp, ConstifyIntMul)
		rz = .QuickIntMul(dest, R, L, exp)
		if rz == nil
			rz = .QuickIntMul(dest, L, R, exp)
			if rz == nil
				rz = exp.MULT(dest, L, R, asmreg()) * Dest


	function BoolMul (|asmreg| dest, |asmreg| Bule, |asmreg| V, |message| exp, |asmreg|)		
		if dest is ConstAny
			return .MakeConst2(dest, Bule, V, exp, ConstifyBoolMul)
		rz = .QuickIntMul(dest, Bule, V, exp)
		if !rz
/			rz = exp.TERN(dest, Bule, V, asmreg()) * Dest				// TERN


	function Multiply (fn_opasm)
		if l isa DataTypeCode.bool
			return .BoolMul(dest, l, r, exp)
		if r isa DataTypeCode.bool
			return .BoolMul(dest, r, l, exp)

		if l is ConstAny
			swap (l) (r)
		if l.isint
			return .IntMul(dest, r, l, exp)
		return .floatmul(Dest, l, r, exp)
	

	function Divide (fn_opasm)
		if r.reg == l.reg											// return 1
			return .SelfDivide(dest, exp)
		if dest.isint
			return .DivInt(dest, l, r, exp)
		return .DivFloat(dest, l, r, exp)


	function DivFloat    (fn_opasm)
		if (dest is ConstAny) and (l isnt alternate)
			return .MakeConst2(dest, l, r, exp, ConstifyFloatDiv)
		rz = .QuickFloatDiv(dest, L, R, exp)
		if rz == nil
			rz = exp.FDIV(dest,  L,  R,  asmreg(), dest.isbig|int|) * dest


	function SelfDivide (|asmreg| dest, |message| exp, |asmreg|)
		if dest.IsInt
			return .NumToReg(exp, 1, dest, datatypecode.int) // x/x=1
		if !dest.Isbig
			return .NumToReg(exp, 0x3f800000 /*1.0*/, dest, datatypecode.float)
		return .NumToReg(exp, 0x3ff0000000000000 /*1.0 double*/, dest, datatypecode.f64)
		

	function QuickIntDiv    (fn_opasm)
		|| PToi = .IntPowerOftwo(r)
			if ptoi <= 1											//   x/1  x/0  x/-1
				if ptoi == 0
					exp.DivByZero
				return .Quick1Or1Sub(dest, l, ptoi, exp)
			if !l.Signed
				return exp.BFLG(dest, l, 0, ptoi-1, 0) * Dest		// u / 2 --> u >> 1
			return exp.DIV2(dest, l, ptoi-1, ptoi-1) * Dest			// nice
	
	
	function DivInt    (fn_opasm)
		if dest is ConstAny
			return .MakeConst2(dest, L, R, exp, ConstifyIntDiv)
		|| q = .QuickIntDiv(dest, l, r, exp)
			return q
		return exp.DIVV(dest, ASMReg(), l, r, dest.IntDivType) * dest
	
	
	function ModFloat    (fn_opasm)
		if dest is ConstAny
			return .MakeConst2(dest, L, R, exp, Constifyfloatmod)
		|| big = dest.IsBig|int|
		exp.fdiv(dest, L, R, asmreg(), big)
		return exp.FFRC(dest, asmreg(), dest, R, big) * dest
	
	
	function ModInt    (fn_opasm)
		if dest is ConstAny
			return .MakeConst2(dest, L, R, exp, ConstifyIntMod)
		return exp.DIVV(asmreg(), dest, L, R, dest.IntDivType) * Dest
	
	
	function Mod    (fn_opasm)
		if dest.isint
			return .ModInt(dest, l, r, exp)
		return .ModFloat(dest, l, r, exp)
		


	// BITS
	function BitNot (fn_opasm)
		if r.reg // what?
		if dest is ConstAny
			return .makeconst2(dest, l, asmreg(), exp, ConstifyBitNot)
		return .BitMaker(dest, l, asmreg(), exp, asm.bnot)

	
	function BitXor (fn_opasm)
		if dest is ConstAny
			return .MakeConst2(dest, l, r, exp, ConstifyBitXor)
		if (l.reg == r.reg)
			return .Zeros(dest)
		if !l.reg
			return .Assign(dest, r, exp)
		if !r.reg
			return .Assign(dest, l, exp)
		return .BitMakerSwap(dest, l, r, exp, asm.bxor)

	function BitOr (fn_opasm)
		if dest is ConstAny
			return .MakeConst2(dest, l, r, exp, ConstifyBitOr)
		if .NopMinusOne(l)
			return .Assign(dest, R, exp)
		if .NopMinusOne(r)
			return .Assign(dest, L, exp)
		return .BitMakerSwap(dest, l, r, exp, asm.bor)

			
	function BitAnd (fn_opasm)		
		if dest is constany
			return .MakeConst2(dest, l, r, exp, ConstifyBitAnd)
		if .nopminusone(r)
			return .Assign(dest, l, exp)
		if .nopminusone(l)
			return .Assign(dest, r, exp)
		if l.isconst(0) or r.IsConst(0)
			return .Zeros(dest)
		if (l.reg == r.reg)
			return .Assign(dest, l, exp)
		return .BitMakerSwap(dest, l, r, exp, asm.band)


	function BitMakerSwap (|asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |asm| Op, |asmreg|)
		if (l is ConstAny)
			if  r.reg and (r is constany) // ??? both consts?
			swap (l) (r)
		return .BitMaker(Dest, l, r, exp, op)
	
	
	function BitMaker (|asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |asm| Op, |asmreg|)
		|| k = .const(R, 9, op!=asm.bor)
			r = asmreg()
		  else
			k = 0
		|| fat = exp.BAND(dest, L, R, k) 
		fat.op = op
		return fat * Dest


	function SHR  (fn_opasm)
		if dest is constany
			return .MakeConst2(dest, l, r, exp, (ConstifyBitSHS, ConstifyBitSHR)(l.signed))
		|| K = .const(R, 6, false)
			return .BFLG_Const(exp, dest, l, 0, k)
		
		|| op = (asm.BSHS, asm.BSHR)(l.signed)
		return .BitMaker(dest, l, r, exp, op)
	

	function SHL  (fn_opasm)
		if dest is constany
			return .MakeConst2(dest, l, r, exp, ConstifyBitSHL)
		|| K = .const(R, 6, false)
			return .BFLG_Const(exp, dest, l,  K, 0)
		
		return .BitMaker(dest, l, r, exp, asm.bshl)


	function BFLG_Const  (|message| exp, |asmreg| dest, |asmreg| Src, |uint| up, |uint| down, |asmreg|)
		|uint| srcbits = src.BitCount
		if up > srcbits or down > srcbits			// wierd?
			problem (exp, "Shift too far")
		if !up and !down
			return .assign(dest, src, exp)
		
		|| extra = 64 - srcBits // handle extra bits.
		up += extra
		down += extra
		if  !src.reg  or  (up >= 64)  or  (!src.signed and down >= 64)
			return .zeros(dest)
	
		return exp.BFLG(dest,  src,  up,  down,  src.signed|int|) * dest


	function Zeros (|asmreg| dest, |asmreg|)
		rz = asmreg()
		rz.µtype = dest.µtype
	
	
	function Assign (|asmreg| dest, |asmreg| src, |message| exp, |asmreg|)
		if src.reg != dest.reg
			return .BitMakerSwap(dest, src, asmreg(), exp, asm.bor) //
		return dest		// hmmm... we are already there


	function NopMinusOne (|asmreg| r, |bool|)
		if r.IsConst(-1)
			.nop(r)
			return true
	
	
function int64.Fits (|int| amount, |bool| signed=true,  |bool|)
	|| sh = 64 - amount
	|| x = self << sh
	if signed
		x >>= sh
	  else
		x = self|uint64| >> sh
	return x == self

