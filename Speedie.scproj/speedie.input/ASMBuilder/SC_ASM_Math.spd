

prototype fn_OpASM  (|&ASMState| self, |asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |asmreg|)
prototype fn_OpASM2 (|&ASMState| self, |asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |&fatasm|)


extend asmreg
	function BoolASM (|asmreg|)
		.µtype = DataTypeCode.bool
		
		is AlreadyNegated
		if self is CondRequest
			isnt condrequest
			is CondAnswer
		return self 


extend ASMState
	function EqualsInt (|asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |&fatasm|)
		|| negate = (dest is negate)|int|
		if dest isnt CondRequest
			return exp.CMPB(dest, L, R, negate)

		if l.reg
			rz = exp.JMPE(r,l,0)
		  else
			rz = exp.jBRA(r,0)
		rz.op += negate
		|| dummy = rz*asmreg.condanswer

	
	function Equals (fn_opasm)
		if r.reg == 0  and  l.reg != 0
			swap (l) (r) // put reg 0 into the left... more convenient.

		if dest.Isfloat
			|| Mode = 2+(dest is negate)
			return .Compare(dest, l, r, exp, mode) // can't really be bothered to do this const comparison

		|| fat = .equalsint(dest, l, r, exp)
		rz = fat * Dest
		if dest is ConstAny
			// this isn't true... what about floats? we could just... rationalise floats?
			// so where do we set floats even?
			rz.const = ((l.const == r.const) != (dest is negate))|int|
		rz = rz.boolasm
	
		
	function NotEq  (fn_opasm)
		return .Equals(dest.negate, l, r, exp)


	function CompareInt (|asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |int| Mode, |asmreg|)
		if l.Signed!=r.Signed // hmmm??

		mode += l.signed<<1
		if l.IsBig ||| r.IsBig
			mode += 4 // i guess it just is faster? its not needed. we COULD remove this!!
		
		if dest isnt CondRequest
			return exp.CMPI(dest, L, R, mode)*dest

		return exp.JMPI(L, R, mode, 0) * asmreg.CondAnswer


	function CompareFloat (|asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |int| Mode, |asmreg|)
		mode += 8 * l.IsBig
		mode += 4 * r.IsBig
		if dest isnt CondRequest
			return exp.CMPF(dest, L, R, Mode)*dest
		return exp.JMPF(L, R, Mode, dest)*asmreg.CondAnswer


	function Compare (|asmreg| dest,  |asmreg| L,  |asmreg| R,  |message| exp,  |int| Mode,  |asmreg|)
		if dest.IsInt
			rz = .compareint(dest, l, r, exp, mode)
		  else
			rz = .comparefloat(dest, l, r, exp, mode)
		rz = rz.BoolASM
	
	
	function Less   (fn_opasm)
		return .compare(dest, l, r, exp, 1)

	function MoreEq (fn_opasm)
		return .compare(Dest, r, l, exp, 1)

	function More   (fn_opasm)
		return .compare(dest, l, r, exp, 0)

	function LessEq (fn_opasm)
		return .compare(Dest, r, l, exp, 0)
	


	// MATH 
	function QuickFloatPlus    (fn_OpASM2)
		require r is ConstAny
		|| v = .f(r)
		if v == 0.0
			return l.fat
		
		if r.fourbytes
			|| k = .GetConst(r)[]|uint|
			if (k >> 18) << 18 != k
				debugger, #!hmmm. const-optimiser/renderer will handle it, but lets check to make sure
			rz = exp.fadk(dest, l, k)
			rz.info = Dest


	function QuickFloatDiv    (fn_OpASM)
		require r is ConstAny
		|| v = .f(r)
		if v == 0.0
			problem (Exp, "Divide by zero???")
		if !v or v.abs == 1.0
			return .Quick1Or1Sub(dest, l, v|int|, exp)

		|| p = .GetConst(r)
		|ivec2| ex
		if l.IsBig
			|| f8 = p|&f64|[]
			require f8 > 0
			ex = f8.exponent
		  else
			|| f4 = p|&float|[]
			require f4 > 0
			ex = f4.exponent
		
		//if ex.y == 1
			//return exp.FEXK(dest, L, asmreg(), ex.x, 0, l.IsBig|int|) * Dest


	// from 1 to -1
	function Quick1Or1Sub (|&ASMState| self, |asmreg| dest, |asmreg| L, |int| ptoi, |message| exp, |asmreg|)
		if ptoi == -1										//   x * -1  -->  0-x 
			return .subtract(dest, asmreg(), l, exp)
		if ptoi == 1										//   x * 1   -->  x 
			return l
		return asmreg.zero									//   x * 0   -->  0
		

	function QuickIntMul    (fn_OpASM)
		|| PToi = .IntPowerOftwo(r)$

		if ptoi <= 1
			return .Quick1Or1Sub(dest, l, ptoi, exp)
	
		return .BFLG_Const(exp, dest, l,  ptoi-1, 0)	// y = x * 4 --> y = x << 2


	function QuickFloatMul    (fn_OpASM)
		require r is ConstAny	
		|| v = .f(r)		
		if  v == 1.0 or 0.0 or -1.0
			return .Quick1Or1Sub(dest, l, v|int|, exp)
		if  v == 2.0
			return .plus(dest, l, l, exp)
		
		if r.Fourbytes
			|| x = .GetConst(r)[]
			|| y = x >> 18
			if x == y << 18
				return exp.FMLK(dest, l, x) * Dest

	
	function ASMReg.LeftScore (|int|) // we want pointers on the left... ints on the left, and consts on the right
		return (.µtype.ispointer<<1) + (self isnt constany)
	
	
	function PlusInt     (fn_opasm)
		//		a - 1,		a + 1		//
		//		1 - a,		1 + a		//
		if  l.LeftScore < r.leftscore
			if l is alternate
				target debug
					if r.µtype.IsPointer				// 1 - ptr??? we blocked this already.
			  else
				swap (l) (r) // a+b == b+a

		|| lmul = l.pointermul
		|&fatasm| fat
		if r is ConstAny
			|| RR = .GetConst(R)[]
			if l is alternate
				RR = -RR
			rr *= lmul
			if r.CanAddK(RR)							// a - 1,  a + 1
				fat = exp.ADDK(dest, L, RR)
				if dest is ConstAny
					|| LL = .GetConst(L)[]
					fat.const = ll + rr

		if fat
			0
		  elseif lmul.ispow2  							// x = int1 + int2
			fat = exp.ADD(dest, L, R, lmul.log2)		// x = lptr + r<<3
			fat.op += l is alternate
		  else
			|| v = .GenericNumFinder(exp, lmul)
			if l isnt alternate							// x = lptr + r*12
				fat = exp.MULT(dest, R, V, L)
			  else										// x = (lptr - rptr)/12
				exp.SUBB(dest, L, R, asmreg())
				|| uint64type = 0, debugger
				fat = exp.DIVV(dest, asmreg(), dest, V, uint64type)  
			  
		return fat * Dest
		
		

	
	
	function PlusFloat   (fn_opasm)
		|| IsF32 = dest.FourBytes
			if  .QuickFloatPlus(dest, r, l, exp)  or  .QuickFloatPlus(dest, l, r, exp)
				return dest

		|| ss = (l is alternate)
		|| rr = r.reg
		|| fat = exp.fADD(dest, l, r*!ss, r*ss, 1-IsF32)
		ifn dest is ConstAny
			0 //
		  elseif IsF32
			|| rf = r.F32
			|| lf = l.F32
			if ss
				lf += rf
			  else
				lf -= rf
			fat.F32 = lf
		  else
			|| rf = r.F64
			|| lf = l.F64
			if ss
				lf += rf
			  else
				lf -= rf
			fat.F64 = lf
		return fat * Dest


// do this transform here:
// p1 = p2 * k3,  f1 = f2 + p1  -->  f1 = f2 + (p2 << log2(k3))	
// we need the info on double/float...
//	if p isa ASM.FMLK
//		|| k = p.a3|int|.asfloat.Log2
//		require !k.Fract and !.match3_2(out)
//		.op = asm.fexk
//		.a3 = p.a2
//		.a4 = k|int|
//		return true
// FEXK  (FloatAddExp)
//		f1 = FloatSh1(u2, r4) + FloatSh1(u3, r5)


	function BoolMul (|asmreg| dest, |asmreg| Boo, |asmreg| V, |message| exp, |asmreg|)
		|| fat = exp.TERN(dest, boo, V, asmreg())
		if dest is ConstAny
			fat.const = boo.const * v.const
		return fat * Dest

		
	function Plus   (fn_opasm) // add (
		if !r.reg
			return l
		if !l.reg and (l isnt alternate)
			return r
		if l.isint
			return .PlusInt(dest, l, r, exp)
		return .PlusFloat(dest, l, r, exp)


	function Subtract  (fn_opasm)	// x = a - b
		(l is alternate) // the logic ismostly shared...
		return .plus(dest, l, r, exp)


	function Minus  (fn_opasm)		// x = -b
		(l is alternate)
		return .plus(dest, l, r, exp)


	function IntMul (fn_opasm)
		rz = .QuickIntMul(dest, R, L, exp)
		rz := .QuickIntMul(dest, L, R, exp)
		rz := exp.MULT(dest, L, R, asmreg()) * Dest
		if dest is ConstAny
			rz.needfat.const = l.const * r.const


	function FloatMul (fn_opasm)
		rz = .QuickFloatMul(dest, R, L, exp)
		rz := .QuickFloatMul(dest, L, R, exp)
		rz := exp.FMUL(dest, L, R, asmreg(), l.IsBig|int|) * Dest
		if dest is ConstAny
			|| fat = rz.needfat
			if dest.FourBytes
				fat.F32 = l.F32 * r.F32
			  else
				fat.F64 = l.F64 * r.F64


	function Mul    (fn_opasm)
		if l isa DataTypeCode.bool
			return .BoolMul(dest, l, r, exp)
		if r isa DataTypeCode.bool
			return .BoolMul(dest, r, l, exp)
			
		if l is ConstAny
			swap (l) (r)
		if l.isint
			return .IntMul(dest, r, l, exp)
		return .floatmul(Dest, l, r, exp)
	

	function Div    (fn_opasm)
		if dest.isint
			return .DivInt(dest, l, r, exp)
		return .DivFloat(dest, l, r, exp)


	function DivFloat    (fn_opasm)
		rz = .QuickFloatDiv(dest, R, L, exp)
		rz := .QuickFloatDiv(dest, L, R, exp)
		rz := exp.FDIV(dest,  L,  R,  asmreg(), dest.isbig|int|) * dest
		if dest is ConstAny
			|| fat = rz.needfat
			if dest.FourBytes
				fat.f32 = l.f32 / r.f32
			  else
				fat.f64 = l.f64 / r.f64


	function DivInt    (fn_opasm)
		|| PToi = .IntPowerOftwo(r)
			if ptoi <= 1   //   x/1  x/0  x/-1
				return .Quick1Or1Sub(dest, l, ptoi, exp)
			if !l.Signed
				return .BFLG_Const(exp, dest, l, 0, ptoi) // u / 2 --> u >> 1
		
		|| fat = exp.DIVV(dest, asmreg(), l, r, dest.IntDivType)
		if dest is ConstAny
			|int64| C
			if dest.FourBytes
				if dest.Signed
					C = l.const|int| / r.const|int|
				  else
					C = l.const|uint| / r.const|uint|
			  else
				if dest.Signed
					C = l.const|int64| / r.const|int64|
				  else
					C = l.const|uint64| / r.const|uint64|
			fat.Const = C
		return fat * Dest
	
	
	function ModFloat    (fn_opasm)
		|| d = dest.Reg #check (Exp)
		|| big = dest.IsBig|int|
		exp.fdiv( dest, asmreg(), L, R, big)
		|| fat = exp.FFRC(dest, asmreg(), dest, R, big)
		if dest is ConstAny
			if dest.FourBytes
				fat.f32 = l.f32 mod r.f32
			  else
				fat.f64 = l.f64 mod r.f64
		return fat * dest
	
	
	function ModInt    (fn_opasm)
		|| fat = exp.DIVV(asmreg(), dest, L, R, dest.IntDivType)
		if dest is ConstAny
			|int64| C
			if dest.FourBytes
				if dest.Signed
					C = l.const|int   |  mod  r.const|int|
				  else
					C = l.const|uint  |  mod  r.const|uint|
			  else
				if dest.Signed
					C = l.const|int64 |  mod  r.const|int64|
				  else
					C = l.const|uint64|  mod  r.const|uint64|
			fat.Const = C
		return fat*Dest
	
	
	function Mod    (fn_opasm)
		if dest.isint
			return .ModInt(dest, l, r, exp)
		return .ModFloat(dest, l, r, exp)
		


	// BITS
	function BitNot (fn_opasm)
		if r.reg // what?
		|| fat = exp.BNOT(dest, l, asmreg())
		if l is ConstAny
			fat.const = ~l.const
		return fat*Dest

	
	function BitXor (fn_opasm)
		if (l.reg == r.reg)
			return .BitOr(dest, asmreg(), asmreg(), exp)
		|| fat = exp.BXOR(dest, L, R)
		if dest is ConstAny
			fat.const = l.Const xor r.const
		return fat*Dest


	function BitOr  (fn_opasm)
		if l is ConstAny
			swap (l) (r)
		dest.Expect(exp)
		|| fat = exp.BOAR(dest, L, R)
		if dest is ConstAny
			fat.Const = l.const ||| r.const
		return fat * Dest


	function BitAnd (fn_opasm)		
		|| fat = exp.BAND(dest, L, R, 0)
		if dest is ConstAny
			fat.const = l.const & r.const
		return fat*Dest


//	function ConstForShift (|asmreg| r, |int| btc, |message| exp,  |int64|)
//		// shl/shl used to use this
//		rz = .GetConst(r)[]
//		if rz < 0
//			error (exp, "Can't negative shift")
//		  elseif rz >= btc
//			error (exp, "Shift too large for type")
		

	function BFLG_Const  (|message| exp, |asmreg| dest, |asmreg| l, |int| up, |int| down, |asmreg|)
		|| fat = exp.BFLG(dest,  l,  up,  down,  l.signed|int|)
		debugger
		|| lll = l.Const
		if l.Signed
			fat.Const = (LLL << up)>>down
		  else
			fat.Const = (LLL|uint64| << up) >> down
		return fat*dest
	
		
	function SHR  (fn_opasm)
		if r is ConstAny
			return .BFLG_Const(exp, dest, l, 0, r.const)
		
		|&Fatasm| fat
		if l.Signed
			fat = exp.BSHS(dest, L, R)
		  else
			fat = exp.BSHR(dest, L, R)
			
		return fat*dest

	
	function SHL    (fn_opasm)
		if r is ConstAny
			return .BFLG_Const(exp, dest, l,  r.const, 0)
		return exp.BSHL(dest, L, R) * Dest
	
	
	function Assign (fn_opasm)
		if dest.µType isnt bool
			return .BitOr(dest, l, asmreg(), exp)
		return exp.CMPB(dest, L, asmreg(), 1)*dest

