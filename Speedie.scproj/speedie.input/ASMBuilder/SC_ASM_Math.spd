

prototype fn_OpASM          (|&ASMState| self, |asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |asmreg|)
prototype fn_ASMConstifier  (|&fatasm| self, |asmreg| L, |asmreg| R)


extend asmreg
	function BoolAnswer (|asmreg|)
		.µtype = DataTypeCode.bool
		
		if self is negate
			is AlreadyNegated
		if self is CondRequest
			isnt condrequest
			is CondAnswer
		return self 


extend ASMState
	function EqualsInt (|asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |asmreg|)
		|| negate = (dest is negate)|int|
		if dest isnt CondRequest
			if dest is constany
				l.nop
				r.nop
				return .numtoreg(exp, ((l.const==r.const)==!negate)|int|, dest)
			return exp.CMPB(dest, L, R, negate)*Dest

		|&fatasm| fat 
		if l.reg
			fat = exp.JMPE(r,l,0)
		  else
			fat = exp.jBRA(r,0)
		fat.op += negate
		return fat*dest.boolanswer

	
	function Equals (fn_opasm)
		if r.reg == 0  and  l.reg != 0
			swap (l) (r) // put reg 0 into the left... more convenient.

		if dest.Isfloat
			|| Mode = 2+(dest is negate)
			return .Compare(dest, l, r, exp, mode) // can't really be bothered to do this const comparison

		return .equalsint(dest, l, r, exp)
	
		
	function NotEq  (fn_opasm)
		return .Equals(dest.flip(asmreg.negate), l, r, exp)


	function CompareInt (|asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |int| Mode, |asmreg|)
/*
			A > B,    A >= B,    UA > UB,    UA >= UB
*/

		mode += l.signed * 2
		if dest isnt CondRequest
			return exp.CMPI(dest, L, R, mode) * dest

		return exp.JMPI(L, R, mode, 0) * asmreg().BoolAnswer


	function CompareFloat (|asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |int| Mode, |asmreg|)
		mode += 8 * l.IsBig
		mode += 4 * r.IsBig
		if dest isnt CondRequest
			return exp.CMPF(dest, L, R, Mode) * dest
		return exp.JMPF(L, R, Mode, dest) * asmreg.CondAnswer


	function Compare (|asmreg| dest,  |asmreg| L,  |asmreg| R,  |message| exp,  |int| Mode,  |asmreg|)
		if dest.IsInt
			return .CompareInt(dest, l, r, exp, mode)
		return .CompareFloat(dest, l, r, exp, mode)
	
	function LessEq (fn_opasm): return .compare(dest, r, l, exp, 1)
	function Less   (fn_opasm): return .compare(dest, r, l, exp, 0)
	
	function MoreEq (fn_opasm): return .compare(dest, l, r, exp, 1)
	function More   (fn_opasm): return .compare(dest, l, r, exp, 0)



	// MATH 
	function QuickFloat32Plus    (fn_OpASM)
		if  r is constany // a + 1,   a - 1
			|| QQ = .QuickFloatPlus32Sub(dest, l, r, exp)
				return qq
		if  l is constany  and  l isnt Alternate   // 1 + a --> a + 1
			|| QQ = .QuickFloatPlus32Sub(dest, r asnt asmreg.alternate, l, exp)
				return qq
	
			
	function QuickFloatPlus32Sub    (fn_OpASM)
		|| k = r.Const|uint64|
		k ^= (l is Alternate)<<31
		require (k >> 18) << 18 == k
		r.nop
		return exp.FADK(dest, l, k) * Dest

	function message.DivByZero
		problem (self, "Divide by zero???")	

	function QuickFloatDiv    (fn_OpASM)
		require r is ConstAny
		|| v = r.float
		if v == 0.0
			Exp.DivByZero
		if !v.fract
			r.nop
			return .Quick1Or1Sub(dest, l, v|int|, exp)


	// from 1 to -1
	function Quick1Or1Sub (|&ASMState| self, |asmreg| dest, |asmreg| L, |int| ptoi, |message| exp, |asmreg|)
		if ptoi == -1										//   x * -1  -->  0-x 
			return .subtract(dest, asmreg(), l, exp)
		if ptoi == 1										//   x * 1   -->  x 
			return l
		return dest.µtype.zero								//   x * 0   -->  0
		

	function QuickIntMul    (fn_OpASM)
		|| Pow2 = .IntPowerOfTwo(r)
			if Pow2 <= 1
				return .Quick1Or1Sub(dest, l, Pow2, exp)
			return exp.BFLG(dest, l,  Pow2-1, 0, 0) * Dest	// y = x * 4  -->  y = x << 2

		|| five = .IntPowerOfTwo(r, 1) // 5 or 9 or 17 or 33, etc
			return exp.ADD(dest, l, l, five-1) * dest


	function QuickFloatMul    (fn_OpASM)
		require r is ConstAny	
		|| v = r.float
		if  v == 1.0 or 0.0 or -1.0
			r.nop
			return .Quick1Or1Sub(dest, l, v|int|, exp)
		if  v == 2.0
			r.nop
			return .plus(dest, l, l, exp)
		
		if r.Fourbytes
			|| x = r.const
			|| y = x >> 18
			if x == y << 18
				r.nop
				return exp.FMLK(dest, l, x) * Dest

	
	function ASMReg.LeftScore (|int|) // we want pointers on the left... ints on the left, and consts on the right
		return (.µtype.ispointer<<1) + (self isnt constany)
	
	
	function asmreg.PointerMul (|message| exp, |int| swapped, |int|)
		if !.µtype.ispointer
			return 1
		
		|| fn = exp.Func
		if fn == @opp
			debugger 
			exp = exp.parent
			if swapped
				exp = exp.last
			else
				exp = exp.first
			
		  elseif fn == @arel or @brel
			debugger
			exp = exp.first
		
		  elseif fn == @acc
			debugger 
			exp = exp.first
			
		  else
			// should never happen. Even @thg shouldn't.
			error "aaargh"
			debugger 
		return 1
	

	function PlusInt     (fn_opasm)
		//		a - 1,		a + 1		//
		//		1 - a,		1 + a		//
		if dest is ConstAny // perhaps we can do this in domathsub?
			return .MakeConst2(dest, l, r, exp, &fatasm.ConstifyIntPlus)
		|| swapped = 0
		if  l.LeftScore < r.LeftScore
			if l is alternate
				target debug
					if r.µtype.IsPointer				// 1 - ptr??? we blocked this already.
			  else // what about the exp?
				swapped = 1
				swap (l) (r) // a+b == b+a

	
		|| lmul = l.PointerMul(exp, swapped)
		if r is ConstAny
			|| RR = r.const
			if l is alternate
				RR = -RR
			rr *= lmul
			if r.CanAddK(RR)							// a - 1,  a + 1
				r.nop
				return exp.ADDK(dest, L, RR) * dest

		|&fatasm| fat
		if lmul.ispow2		  							// x = int1 + int2
			fat = exp.ADD(dest, L, R, lmul.log2)		// x = lptr + r<<3
			if l is alternate
				fat.op ++
		  else
			|| v = .numtoreg(exp, lmul)
			if l isnt alternate							// x = lptr + r*12
				fat = exp.MULT(dest, R, V, L)
			  else										// x = (lptr - rptr)/12
				exp.SUB(dest, L, R, ASMReg())
				|| uint64type = 0, debugger
				fat = exp.DIVV(dest, ASMReg(), dest, V, uint64type)  
			  
		return fat * Dest
		

	function FloatPlus   (fn_opasm)
		if dest is ConstAny
			return .makeconst2(dest, l, r, exp, &fatasm.ConstifyFloatPlus)

		|| IsF32 = dest.FourBytes
			|| qq = .QuickFloat32Plus(dest, l, r, exp)
				return qq

		|| ss = (l is alternate)
		|| rr = r.reg
		return exp.fADD(dest, l, r*!ss, r*ss, 1-IsF32) * Dest


	function BoolMul (|asmreg| dest, |asmreg| Boo, |asmreg| V, |message| exp, |asmreg|)		
		if dest is ConstAny
			return .MakeConst2(dest, boo, V, exp, &fatasm.ConstifyBoolMul)
			
		|| fat = exp.TERN(dest, boo, V, asmreg())
		if dest is ConstAny
			fat.const = boo.const * v.const
		return fat * Dest

		
	function Plus   (fn_opasm) // add (
		if !r.reg
			return l
		if !l.reg and (l isnt alternate)
			return r
		if l.isint
			return .PlusInt(dest, l, r, exp)
		return .FloatPlus(dest, l, r, exp)


	function Subtract  (fn_opasm)	// x = a - b
		(l is alternate) // the logic ismostly shared...
		return .plus(dest, l, r, exp)


	function Minus  (fn_opasm)		// x = -b
		// not the same as negative, which is an fn_asm... that means it works on the exp
		// where as fn_opasms work on the op.
		(l is alternate)
		return .plus(dest, l, r, exp)


	function IntMul (fn_opasm)
		if dest is ConstAny
			.MakeConst2(dest, l, r, exp, &fatasm.ConstifyIntMul)
		rz = .QuickIntMul(dest, R, L, exp)
		if rz == nil
			rz = .QuickIntMul(dest, L, R, exp)
			if rz == nil
				rz = exp.MULT(dest, L, R, asmreg()) * Dest


	function FloatMul (fn_opasm)
		if dest is constany
			return .makeconst2(dest, l, r, exp, &fatasm.ConstifyFloatMul)
		rz = .QuickFloatMul(dest, R, L, exp)
		if rz == nil
			rz = .QuickFloatMul(dest, L, R, exp)
			if rz == nil
				rz = exp.FMUL(dest, L, R, asmreg(), l.IsBig|int|) * Dest


	function Multiply (fn_opasm)
		if l isa DataTypeCode.bool
			return .BoolMul(dest, l, r, exp)
		if r isa DataTypeCode.bool
			return .BoolMul(dest, r, l, exp)
			
		if l is ConstAny
			swap (l) (r)
		if l.isint
			return .IntMul(dest, r, l, exp)
		return .floatmul(Dest, l, r, exp)
	

	function Divide (fn_opasm)
		if dest.isint
			return .DivInt(dest, l, r, exp)
		return .FloatDiv(dest, l, r, exp)


	function FloatDiv    (fn_opasm)
		if (dest is ConstAny) and (l isnt alternate)
			return .MakeConst2(dest, l, r, exp, &fatasm.ConstifyFloatDiv)
		rz = .QuickFloatDiv(dest, L, R, exp)
		if rz == nil
			rz = exp.FDIV(dest,  L,  R,  asmreg(), dest.isbig|int|) * dest


	function QuickIntDiv    (fn_opasm)
		|| PToi = .IntPowerOftwo(r)
			if ptoi <= 1   //   x/1  x/0  x/-1
				if ptoi == 0
					exp.DivByZero
				return .Quick1Or1Sub(dest, l, ptoi, exp)
			if !l.Signed
				return exp.BFLG(dest, l, 0, ptoi-1, 0)*Dest		// u / 2 --> u >> 1
			return exp.DIV2(dest, l, ptoi-1, ptoi-1)*Dest		// nice
	
	
	function DivInt    (fn_opasm)
		if dest is ConstAny
			return .MakeConst2(dest, L, R, exp, &fatasm.ConstifyIntDiv)
		|| q = .QuickIntDiv(dest, l, r, exp)
			return q
		return exp.DIVV(dest, ASMReg(), l, r, dest.IntDivType) * dest
	
	
	function ModFloat    (fn_opasm)
		if dest is ConstAny
			return .MakeConst2(dest, L, R, exp, &fatasm.Constifyfloatmod)
		|| big = dest.IsBig|int|
		exp.fdiv(dest, asmreg(), L, R, big)
		|| fat = exp.FFRC(dest, asmreg(), dest, R, big)
		return fat * dest
	
	
	function ModInt    (fn_opasm)
		if dest is ConstAny
			return .MakeConst2(dest, L, R, exp, &fatasm.ConstifyIntMod)
		|| fat = exp.DIVV(asmreg(), dest, L, R, dest.IntDivType)
		return fat * Dest
	
	
	function Mod    (fn_opasm)
		if dest.isint
			return .ModInt(dest, l, r, exp)
		return .ModFloat(dest, l, r, exp)
		


	// BITS
	function BitNot (fn_opasm)
		if r.reg // what?
		if dest is ConstAny
			return .makeconst2(dest, l, asmreg(), exp, &fatasm.ConstifyBitNot)
		return .BitMaker(dest, l, asmreg(), exp, asm.bnot)

	
	function BitXor (fn_opasm)
		if dest is ConstAny
			return .MakeConst2(dest, l, r, exp, &fatasm.ConstifyBitXor)
		if (l.reg == r.reg)
			return .Zeros(dest, exp)
		return .BitMakerSwap(dest, l, r, exp, asm.bxor)


	function BitOr (fn_opasm)
		if dest is ConstAny
			return .MakeConst2(dest, l, r, exp, &fatasm.ConstifyBitOr)
		if l.IsConst(-1)
			return .Assign(dest, L, exp)
		if r.IsConst(-1)
			return .Assign(dest, R, exp)
		return .BitMakerSwap(dest, l, r, exp, asm.bor)

			
	function BitAnd (fn_opasm)		
		if dest is constany
			return .MakeConst2(dest, l, r, exp, &fatasm.ConstifyBitAnd)
		if l.IsConst(0) or r.IsConst(0)
			return .zeros(dest, exp)
		return .BitMakerSwap(dest, l, r, exp, asm.band)


	function BitMakerSwap (|asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |asm| Op, |asmreg|)
		if (l is ConstAny)
			swap (l) (r)
		return .BitMaker(Dest, l, r, exp, op)
	
	
	function BitMaker (|asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |asm| Op, |asmreg|)
		|| K = r.const
		if r is ConstAny and k fits 9
			r.nop
			r = ASMReg()
		  else
			k = 0
		|| fat = exp.BAND(dest, L, R, K)
		fat.op = op
		return fat * Dest


	function SHR  (fn_opasm)
		if dest is constany
			return .MakeConst2(dest, l, r, exp, (&fatasm.ConstifyBitSHS, &fatasm.ConstifyBitSHR)(l.signed))
		if r is ConstAny
			return .BFLG_Const(exp, dest, l, 0, r.nop)
		
		#!What about extra bits? EG: (int32 >> x)
		|| op = (asm.BSHS, asm.BSHR)(l.signed)
		return .BitMaker(dest, l, r, exp, op)
	

	function SHL  (fn_opasm)
		if dest is constany
			return .MakeConst2(dest, l, r, exp, &fatasm.ConstifyBitSHL)
		if r is ConstAny
			return .BFLG_Const(exp, dest, l,  r.nop, 0)
		
		return .BitMaker(dest, l, r, exp, asm.bshl)


	function BFLG_Const  (|message| exp, |asmreg| dest, |asmreg| l, |int| up, |int| down, |asmreg|)
		if !l.reg
			return .zeros(dest, exp)
	
		debugger, #!What about extra bits? like unsigned-shifting down a signed 32-int
		#! Should also just assign zero if we shift too far.
		|| fat = exp.BFLG(dest,  l,  up,  down,  l.signed|int|)
		debugger
		|| lll = l.Const
		if l.Signed
			fat.Const = (LLL << up)>>down
		  else
			fat.Const = (LLL|uint64| << up) >> down
		return fat*dest


	function Zeros (|asmreg| dest, |message| exp, |asmreg|)
		return .BitOr(dest, asmreg(), asmreg(), exp)
	
	
	function Assign (|asmreg| dest, |asmreg| L, |message| exp, |asmreg|)
		if dest.µType isnt bool  or  l.µType is bool
			return .BitOr(dest, l, asmreg(), exp)
		if l.IsFloat								// sigh can this even happen?
			error (Exp)								// I mean i can use cmpf?
		return exp.CMPB(dest, L, asmreg(), 1)*dest



function int64.OperatorFits (|int| amount, |bool|)
	|| sh = 64-amount
	return ((self << sh) >> sh) == self


function asmreg.IsConst (|int64| val, |bool|)
	return  (self is ConstAny) and (.const == val)
	
	