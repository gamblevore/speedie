

// ADDK? optimise stages... OR special-case it specifically. 

struct ASMState
	linkage: cpp_part Pac
//	|uint16| 					ParentBlock
	|datatypecode|				ReturnType
	|bool|						OK    
	|bool|						Inited   
	|byte|						LabelCount
	|byte|						VDecls
	|byte|						VTmps
	|byte|						WithinBranch

	|SCFunction--|				fn       
	|µFunc|						Out      
	|&FatASM|					Start		// a "slice" feature would be nice    
	|&FatASM|					Curr    
	|&FatASM|					End    
	|&FatASM|					WhileStart
	|uint64[32]|				Consts 

	function AddFuncParams (|SCFunction| fn)
		opt norefcounts
		for a in fn.Args
			a.dtype = .DeclareMe(nil, a.RegType|AsmReg|)|datatypecode|

	function Last (|&FatASM|)
		return .curr-1
	
	syntax access (|asmreg| a, |&uint64|)
		cpp_part GetConst, pragma inline
		return .consts[a.reg]

	
	function IntPowerOfTwo (|asmreg| r,  |FailableInt|)
		// -1 --> -1,  0 --> 0,  1 --> 1,  2 --> 2,  4 --> 3,  8 --> 4
		if r is ConstAny
			|| v = .Consts[r.reg]
			if v == -1
				return v
			if v.IsPo2
				return v.Log2+1

		if (!r.reg) // what?


	function AddConstantAndReturnOld (|message| exp,  |AsmReg| Dest,  |AsmReg| ToGrow,  |int64| Value,  |asmreg|)
		|| x = .VTmps
		rz = .TempMe(exp, dest)
		if togrow.isint and value.CanStoreAsIntImmediate
			// x = y++
			.AddASM(asm.ADPK, exp.parent!, rz, ToGrow, Value)
			.VTmps = x
		  else
			.Assign(rz, ToGrow, asmreg(), exp)
			.VTmps = x // dont need to close the constants... not yet anyhow.
			.AddConstant(exp, Dest, ToGrow, value)
	
	
	function AddConstant (|message| exp,  |AsmReg| Dest,  |AsmReg| Src,  |int64| Value,  |asmreg|)
		if dest.isint
			if Value.CanInt32
//			if value.CanStoreAsIntImmediate
//  make the ADDK renderer or const-optimiser deal with too big values.
				.AddASM(asm.ADDK, exp.parent!, dest, src, Value)
				return dest
		  elseif dest.FourBytes
// same
			if value.CanFloat32
				.AddASM(asm.FADK, exp.parent!, dest, src, value)
				return dest
			debugger // how is this possible? we are adding a 64 bit float to a 32-bit?
		debugat
		|| where = .NumToEgg(value, exp)
		return .Plus(dest, src, where, exp)
		
		
	function AddASM (|int| SM, |message| dbg, |int| a, |int| b, |int| c, |int| d, |int| e, |&FatASM|)
		pragma inline,  opt norefcounts,  cpp_part AddASM5
		rz = self <~ (sm, dbg)
		rz.r[0] = a
		rz.r[1] = b
		rz.r[2] = c
		rz.r[3] = d
		rz.r[4] = e
		
	function AddASM (|int| SM, |message| dbg, |int| a, |int| b, |int| c, |int| d, |&FatASM|)
		pragma inline,  opt norefcounts,  cpp_part AddASM4
		rz = self <~ (sm, dbg)
		rz.r[0] = a
		rz.r[1] = b
		rz.r[2] = c
		rz.r[3] = d

	function AddASM (|int| SM, |message| dbg, |int| a, |int| b, |int| c, |&FatASM|)
		pragma inline,  opt norefcounts,  cpp_part AddASM3
		rz = self <~ (sm, dbg)
		rz.r[0] = a
		rz.r[1] = b
		rz.r[2] = c

	function AddASM (|int| SM, |message| dbg, |int| a, |int| b, |&FatASM|)
		pragma inline,  opt norefcounts,  cpp_part AddASM2
		rz = self <~ (sm, dbg)
		rz.r[0] = a
		rz.r[1] = b

	function AddASM (|int| SM, |message| dbg, |int| a, |&FatASM|)
		pragma inline,  opt norefcounts,  cpp_part AddASM1
		rz = self <~ (sm, dbg)
		rz.r[0] = a
	
	function AddASM (|int| SM, |message| dbg, |&FatASM|)
		pragma inline,  opt norefcounts,  cpp_part AddASM0
		return self <~ (sm, dbg)

	syntax append (|int| code, |message| dbg, |&FatASM|)
		cpp_part RequestOp
		|| p = .curr
		if p < .end
			.curr = p + 1
			P.op = code
			p.debug = dbg
//			p.BlockNum = .BlockNum
//			p.ParentBlock = .ParentBlock
			return p
		if .OK
			error "ASM is out of memory."
			.OK = false
		return .start
	
		
	function DeclareMe (|Message| where,  |asmreg| T,  |asmreg|)
		|| d = .VDecls|int| + 1
		if (d + .vtmps <= 31)
			t.reg = d
			.vdecls = d
			return t
		error (where, "No free local variables.")			
	
	
	function TempMe (|Message| where,  |asmreg| T=asmreg.Temp,  |asmreg|) // .needreg
		if t.reg
			return t
		
		|| d = .vtmps|int| + 1
		if (d + .vtmps <= 31)
			t.reg = 32-d
			.vtmps = d
			return t
		error (where, "No free local variables.")


	function FindConst (|uint64| Code, |asmreg|)
		if Code
			return asmreg()
		|int| i = 31 - .VTmps
		// any flow-control can destroy this
		// what about something like:
		// || x = (1,2+1)
		// perhaps tern should open/close?
		while i > .VDecls
			if .Consts[i] == code
				return i.reg as asmreg.ConstAny
			--i
	
///////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Branch (|message| cond,  |&fatasm|)
		|| dest = asmreg.newCondRequest
		.WithinBranch++
		|| Src = .µ(cond, dest)
		.WithinBranch--
		if Src isnt cond
			(dest is negate) = (src isnt AlreadyNegated)
			.equals(dest, dest, src, cond)
		return .curr - 1
	

	function µOpen (|message| exp, |AsmReg|)
		return .µ( exp, AsmReg.StayOpen) asnt asmreg.StayOpen

	
	function µ (|message| exp,  |AsmReg| Dest = asmreg(), |AsmReg|)
		opt norefcounts
		pragma inline
		cpp_part Get
		|| T = exp.ASMType
		|| fn = fn_asm_table[T]!
		target debug
			if !T
				fn = fn_asm_table[exp.func|int|]!
				debugger

		|| OV = .VTmps		
		rz = (fn)(self, exp, dest)
		if dest isnt StayOpen
			.VTmps = (ov)
		
		target debug
			|| dd = dest.reg
			if dd and rz.reg != dd
				// its not about "being different"... but "did it allocate something that it didnt need to"
				#!FFFFFFASSDJKLASDM<>AS


	function Prm (|message| prm, |asmreg|)
		|| r = .ExistingVar(prm)
		if r.Exists
			return r
		// why not use tmps? won't these interfere with the function-passing??
		|| Where = .tempme(prm, asmreg())
		return .µ(prm, where)


	module
		|FatASM[]|					JSMSpace = FatASM[0]!
		|[memory of fatasm]|		Ancients
		|ASMState|					Sh
		


		
function @ASMTmp.DoFunc (fn_Asm)
	opt norefcounts
	|| prms = exp.last!
	|| fn = prms.asfunc
	expect (fn and fn.args <= 10) (prms, "Too many parameters")
	// speedie's function histogram:  0:410, 1:1656, 2:1464, 3:713, 4:167, 5:61, 6:10, 7:3, 8:1
	// there are only 4 above 6!, only 14 above 5

	if !dest
		dest = asmreg()
	  else
		dest = .TempMe(prms, dest)
		dest.µtype = fn.RegType

	|int| Reg2
	|int| Reg3
	|| sh = 0
	|| OV = .VTmps

	for p.fast in prms
		|| v = .prm(p).reg
		if sh <= 25
			reg2 |= (v << sh)
		  else
			reg3 |= (v << (sh-30))
		sh += 5
	.VTmps = (OV)
	
	|| OP = (asm.func2, asm.func3)(sh <= 25)
	if fn is Wrapper
		op = (asm.fncx2, asm.fncx3)(sh <= 25)

	|| SaveAmount = .vdecls * (dest isnt forreturn)
	.AddASM(OP,  prms.parent!,  save: SaveAmount,  incr: 0,  jump: fn.TableId,  reg2,  reg3)
	return dest


function ASMState.PackMakerInit (|bool|)
	opt norefcounts
	if sh.Inited
		return true
	sh.inited = true
	VM_Builder.JustMakeMyBread
	SpdAssembler.InitAss
	return .alloc(ASMState.JSMSpace)


function ASMState.Alloc (|memory of fatasm| j, |bool|)
	if j.setcap(4MB)
		.start = j.ptr
		.curr = .start
		.end = j.Capacity + .start
		spdassembler <~ asm.eror
		spdassembler <~ asm.NOOP
		Ancients <~ j
		return true


function @ASMState.ExpandJSM (|bool|)
	require .Ancients < 16
	|| j = FatASM[4MB]
		.Ancients <~ .jsmspace
		.JSMSpace = j
		return sh.Alloc(j)
	


function ASMState.InitState (|scfunction| fn)
	if fn.ASM
		.out = fn.asm!
	  else
		.out = µfunc(fn, .curr)
	.LabelCount = 0
	.fn  = fn
	.returntype = fn.returntype.regtype
	.ok  = true
	.vdecls = 0
	.vtmps = 0
	.AddFuncParams(fn)


function ASMState.FinishASM
	opt norefcounts
	ifn .last isa asm.ret
		debugger
	.out.length = .curr - .out.IR


function int64.CanInt32 (|bool|)
	return  (self <<32)>>32 == self
	

function int64.CanFloat32 (|bool|)
	return  (self|uint64|>>32)<<32 == self
	
