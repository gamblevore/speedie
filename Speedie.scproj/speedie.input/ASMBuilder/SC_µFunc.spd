
extend SCFunction
	function StartASM
		.µstart = ASMState.sh.Index

	function µTest (|memory of asm|)
		description "Generate some code (only for testing)."
		rz = asm[.µlength*3]!
		|| p = rz.ptr
		|| after = .MuRender(P, P+rz.itemCount)
		rz.itemcount = after-p
		rz.length = rz.itemcount
		
	// cosmic lore unfold... into tales untold

	function IR (|&fatasm|)
		return ASMState.sh.start + .µstart
	
	function MuRender (|!&ASM| Where, |!&asm| After, |!&asm|)
		|uint64| HasLabel
		rz = where
		for (fat.fat in self) (i)
			haslabel |= fat.jumpreg << (i&63)
			|| n = rz - where
			if n >= 64K
				error (.source, "Function too large (>= 256K compiled)")
			fat.ASMIndex = n
			fat.CheckHasOutput
			rz = fat.µrenderinto(rz, after)

		if HasLabel // Use this as a jump-map??? To skip huge sections?
			for fat.fat in self
				|| r = fat.JumpReg
					fat.FillLabelRequest(where, rz, r-1)

	render µRender
		fs <~ "asm ${.name}\n"
		|| bb = 0
		for µ.fat in self
			if options.ASMRenderBlocks and µ.BlockNum != bb
				bb = µ.BlockNum
				fs <~ "//$bb\n"
			fs <~ '\t'
			µ.Renda(fs)
			fs <~ '\n'


/// TEXTUAL STUFF		
	function µPrint
		printline self
		|| fs = faststring()
		.µRender(fs)
		printline fs

	iterator fat
		|| FirstInst = .IR
		|| CurrInst = FirstInst
		|| AfterInst = Currinst + .µlength
		while currinst < Afterinst
			yield currinst (CurrInst - FirstInst)
			++currinst


function fatasm.FillLabelRequest (|!&asm| Start, |!&asm| After, |int| reg)
	|| SelfOut = start + .ASMIndex
	target debug: debug_require  SelfOut >= start  and  SelfOut < after 

	// this needs fixing.
	|int| J = .r[reg]
	|| OldDest = self + J + 1
	|| DestOut = OldDest.asmindex
	|| dest = start + DestOut

	target debug: debug_require dest >= start and dest <= after
	|| J2 = (dest - SelfOut) -1
	check (J2 != -1) (self, "Invalid ASM generated (infinite loop)")
	.r[reg] = J2
	.µRenderInto(SelfOut, SelfOut+1) // rerender
	.r[reg] = J						 // restore!


//function memory.Run (|memory of asm| self, |&ivec4| Args = nil, |int| ArgCount=0, |int64|)
//	disabled
//	cpp_part RunArgs
//	|| r = jb_vm.vm.Registers(true)
//	if args
//		for i in argcount
//			r[i] = args[i] 
//	
//	return jb_vm.Run(.ptr, .length)|&int64|[]


function JBin.Add (|SCFunction| fn)
	.AddMemory(@bin, fn.µlength*4)
	for i.fat in fn
		.AppendInt(i.Encode)
