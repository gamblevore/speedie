
struct SC_Hoister
	linkage
		cpp_part Hoi
	|SCDecl--[6]|	Items
	|byte|			Count
	|byte|			Spare
	
	constants
		MinHoistScore	= 3

	helper GotGlobal (|message| prop,  |scdecl| decl)
		opt NoRefCounts
		|| dest = ASMState.sh.DeclareMe(prop, decl)		// Pre-declare glob.
		ASMType.GlobAddr(decl, prop, dest)
		.got(dest, Decl)

	helper Got (|asmreg| dest, |scdecl| decl)
		opt NoRefCounts
		decl.NilReg = dest.reg ||| nilreg.Hoisted
		.Items[.Count++] = decl
		.spare--

	helper GotConst (|message| prop,  |scdecl| decl)
		opt NoRefCounts
		|| dest = ASMState.sh.DeclareMe(prop, decl)		// Pre-declare glob.
		asmstate.sh.NumToReg(prop, decl.exportposition, dest, dest.µtype)
		.got(dest, Decl)
	
	function Unhoist (|asmreg|)
		opt NoRefCounts
		for d in .Items
			loop d
			d.nilreg = 0

	function HoistNormal (|message| exp)
		.spare = –count .items
		.Hoist(exp, 0)
		
	function HoistLoop (|message| exp)
		.spare = 2
		.Hoist(exp, 1<<20)

	helper Hoist (|message| exp, |int| Score)
		opt norefcounts
		|| fn = exp.func
		if fn == @type
			exp = exp.first! // no go into the type!
		  elseif fn == @func
			exp = exp.second!
		
		|| GoIn = true
		if  (fn == @dot or @thg or @num)  and  (.spare > 0)
			|| prop = exp.ASMDecl
			GoIn = prop isnt const and global
			if (score >= 0)  and  prop.nilreg isnt hoisted
				if prop is const
					if (score >= 1<<20) and prop.exportposition
						.GotConst(exp, prop)
				  elseif prop is Global
					.GotGlobal(exp, prop)
	
		if goin
			for ch.fast in exp
				|| add = 0
				if ch.func == @tmp
					|| ty = ch.ASMType
					add += (ty is kWhile) * MinHoistScore
					add -= (ty is kIf)
					
				.Hoist(ch, add + score)

