

struct SC_Hoister
	linkage
		cpp_part Hoi
	|uint|				Bits
	|byte|				Count
	|byte|				Spare
	|message--[6]|		Collection
	|uint--[6]|			Scores
	
	
	constants
		MinHoistScore = 3
		AsLoop = 1<<20
		AsGlobal = 1<<31


	function ASMState.GlobAddr (|scdecl| D, |message| exp, |AsmReg| Dest, |asmreg|)
		|| Glob = .TryGetGlob(D)
			return Glob
		return .GlobAddrsub(d, exp, dest)
	
	
	function ASMState.GlobAddrSub (|SCDecl| D, |message| exp, |AsmReg| Dest, |asmreg|)
		opt norefcounts

		|int64| iTable = d.ExportPosition
		expect (iTable > 0)          (exp, "No global address".internal)
		expect (iTable <= 24~bits)   (exp, "Used over 16MB of global data")
		
		|| fat = exp.GTAB(dest,  (d.IsLib)|int|,  iTable>>6)
		fat.Const = iTable &~ 63
		(dest is CanHoist)
		Dest = fat * dest
		dest.µtype = DataTypeCode._voidptr
		return dest.HaveAddr
	
	
	function ASMState.Hoist (|?&fatasm| fat, |int| n)
		if fat == sh.KnownValues[n]
			return // already done. Probably a number.
		
		target debug
			if sh.HoistMap & (1<<n)		// what?
			if sh.knownvalues[n]		// what?
			if fat isnt CanHoist		// what?

		if fat
			fat.µRefCount++
		
		sh.KnownValues[n] = fat
		sh.HoistMap |= 1<<n
		
	
	helper HoistComplete (|asmreg| dest, |SCDecl| decl, |asmreg| K, |asmstate| sh)
		opt NoRefCounts
		decl.FatConstIndex = k.fatindex

		|| n = dest.reg
		sh.hoist(k.fat, n)
		if .bits & (1<<n)  				// what?
		.Bits |= 1<<n
		.Spare--


	function HoistNormal (|message| exp)
		.spare = 6
		.HoistRecursive(asmstate.sh, exp, 0)
		.PostRun(asmstate.sh)


	helper HoistLoop (|asmstate| sh, |message| exp)
		opt norefcounts
		.Spare = 3
		.HoistRecursive(sh, exp.last! , sc_hoister.AsLoop)
		.Spare = 2
		.HoistRecursive(sh, exp.first!, sc_hoister.AsLoop)
		.PostRun(asmstate.sh)
		

	helper MarkExp (|message| exp, |int| Score)
		|| i = .count++
		target debug: if i >= 6 // what?
		.collection[i] = exp
		.scores[i] = score
			
	
	helper PostRun  (|asmstate| sh)
		// do the highest one first.
		// gtabs should come first.
		for i in .count
			|| prop = .collection[i]!
			.PostRunOne(sh, prop, prop.asmdecl, (.scores[i] >> 31)|bool|)

	
	helper PostRunOne  (|asmstate| sh, |message| prop, |scdecl| decl, |bool| IsGlobal)
		|| dest = sh.DeclareMe(prop, decl)
		|asmreg| K
		if IsGlobal
			K = sh.GlobAddrSub(decl, prop, dest)
		  else
			(dest is canhoist)
			K = sh.NumToReg(prop, decl.ExportPosition, dest, dest.µtype)
		.HoistComplete(dest, Decl, k, sh)
			

	helper CanReuseConst (|SCDecl| decl, |bool|)
		opt NoRefCounts
		|| k = decl.ExportPosition$
		for old in ASMState.sh
			if old._Const == K
				old.µRefCount++
				decl.FatConstIndex = old.Index
				return true

	
	function ASMState.TryGetGlob (|SCDecl| D, |asmreg|)
		|uint64| find = d.ExportPosition
		|uint64| range = 128 * d.globInfo.ByteCount
		for old in ASMState.sh
			if old isa asm.gtab
				|uint64| Addr = old.const
				if Addr <= find and addr + range > find
					return old.info
					

	function TryHoistOne (|asmstate| sh, |message| exp, |scdecl| prop, |int| Score)
		if prop is const
			if (score >= AsLoop) and .CanReuseConst(prop)
				.MarkExp(exp, score)
					
		  elseif prop is Global
			if sh.TryGetGlob(prop)
				.MarkExp(exp, score ||| asglobal)
	
	
	function message.Declable (|message!|)
		opt norefcounts
		|| fn = .func
		if fn == @decl
			self = .second!
			fn = .func
		while fn == @type
			self = .first! // no go into the type!
			fn = .func
		if fn == @func
			return .second!
		return self
	
	
	function CanHoist (|bool|)
		return .spare > 0
	
	
	function HoistRecursive (|ASMState| sh, |message| exp, |int| Score, |bool|)
		opt norefcounts
		require .CanHoist
		exp = exp.Declable
		|| fn = exp.func
		if fn == @arg and Score < AsLoop
			return true
		
		if  fn == @dot or @thg or @num
			|| prop = exp.ASMDecl
			if prop is const or global
				if score >= 0
					.TryHoistOne(sh, exp, prop, score)
					return .CanHoist
				return true
	
		for ch.fast in exp
			|| add = 0
			if ch.func == @tmp
				|| ty = ch.ASMType
				add += (ty is kWhile) * MinHoistScore
				add -= (ty is kIf)
				
			require .HoistRecursive(sh, ch, add + score)
		return true
		
