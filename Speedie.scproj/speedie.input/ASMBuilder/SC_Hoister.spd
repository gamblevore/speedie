
struct SC_Hoister
	linkage
		cpp_part Hoi
	|SCDecl--[6]|	Items
	|byte|			Count
	|byte|			Spare
	
	constants
		MinHoistScore = 3
		AsLoop = 1<<20
		

	helper GotGlobal (|message| prop,  |scdecl| decl)
		opt NoRefCounts
		|| dest = ASMState.sh.DeclareMe(prop, decl)		// Pre-declare glob.
		|| Addr = ASMType.GlobAddr(decl, prop, dest)
		.got(dest, Decl, addr)

	helper WriteConst (|message| prop,  |scdecl| decl)
		opt NoRefCounts
		|| dest = ASMState.sh.DeclareMe(prop, decl)		// Pre-declare glob.
		|| K = asmstate.sh.NumToReg(prop, decl.exportposition, dest, dest.µtype)
		.got(dest, Decl, k)

	helper Got (|asmreg| dest, |scdecl| decl, |asmreg| K)
		opt NoRefCounts
		|| I = k.fatindex
		|| F = I.fat
			f.µrefcount++
		decl.FatConstIndex = I
		decl.NilReg = dest.reg ||| nilreg.Hoisted
		.Items[.Count++] = decl
		.spare--

	helper ReuseConst (|message| prop,  |scdecl| decl)
		opt NoRefCounts
		|| k = decl.ExportPosition
		for i in .Count
			|| Old = .items[i]!
			if old.ExportPosition == K
				old.fat!.µRefCount++
				decl.FatConstIndex = old.FatConstIndex
				decl.NilReg = old.NilReg
				return
		.WriteConst(prop, decl)
	
	
	function asmstate.Unhoist (|sc_hoister| H, |asmreg|)
		opt NoRefCounts
		for d in h.Items
			loop d
			d.nilreg = 0
			|| f = d.fat
				f.µrefcount--
				if f.isunused
					.nop(f)
					

	function HoistNormal (|message| exp)
		.spare = –count .items
		.Hoist(exp, 0)
		
	function HoistLoop (|message| exp)
		.spare = 2
		.Hoist(exp, AsLoop)

	function TryHoist (|message| exp, |int| Score, |scdecl| prop)
		if prop.nilreg isnt hoisted
			if prop is const
				if (score >= AsLoop) and prop.exportposition
					.ReuseConst(Exp, prop)
			  elseif prop is Global
				.GotGlobal(exp, prop)
		  else
			|| fat = prop.fat
				fat.µRefCount++
	
	
	function message.Declable (|message!|)
		opt norefcounts
		|| fn = .func
		if fn == @decl
			self = .second!
			fn = .func
		while fn == @type
			self = .first! // no go into the type!
			fn = .func
		if fn == @func
			return .second!
		return self
	
	
	function Hoist (|message| exp, |int| Score)
		opt norefcounts
		exp = exp.Declable
		|| fn = exp.func
		if fn == @arg and Score < AsLoop // should work but doesn't
			return // fix this later.
		if  (fn == @dot or @thg or @num)  and  (.spare > 0)
			|| prop = exp.ASMDecl
			if (score >= 0)
				.TryHoist(exp, score, prop)
			if prop is const or global
				return
	
		for ch.fast in exp
			|| add = 0
			if ch.func == @tmp
				|| ty = ch.ASMType
				add += (ty is kWhile) * MinHoistScore
				add -= (ty is kIf)
				
			.Hoist(ch, add + score)


function scdecl.Hoisted (|asmreg|)
	rz = .datatype|asmreg|
	rz.reg = .nilreg
	rz.fatindex = .fatconstindex
