

function message.ASMDecl (|SCDecl!|)
	opt norefcounts
	rz = .fastdecl
	if rz.typeonly == datatypecode.unusedtype
		rz.wholetype = rz.CalculateASMType|datatypecode|
	target debug: rz.ASMSanity


function SCFunction.GenASM
	opt norefcounts
	|SC_Hoister| H 
	|| a = .sourcearg!
	asmtype.ArgSub(ASMState.Sh, A, H)
	ASMState.Sh.Unhoist(h)


function message.OperatorMul (|asm| op, |&fatasm|)
	cpp_part RequestOp
	|| a = ASMState.sh
	|| p = a.Curr
	if p < a.End
		if  .Position < 0
		if  p == 239400
		p[0] = nil
		a._curr = p + 1
		P._op = op
		p.debug = self
		p.BasicBlock = a.BasicBlock
		return p

	error (self, "Function too large (over 64K)")
	return a.start



target debug
	function scdecl.ASMSanity 
		ifn .iscarray or .pointercount or .isobject or .isbarestruct
			|| size = .type.Size
			|| T = .TypeOnly
			if T is Vec3 or ivec3
				size = 12
			if size != T.bytecount // sigh. what?
				#!"Should we have set the dtype when the decl was created? or at least verified in the nil-checker?"
				#!"We could change it if it is only 112."
				debugger


function asmstate.TryNopUnusedDecl (|scdecl| d)
	if d is compilercreated
		|| f = d.fat
			.AskNop(f)


function scdecl.CalculateASMType (|asmreg|)
	opt norefcounts
	if .pointercount or .iscarray
		// carrays must be allocated. So this reg will store a pointer to the carray.
		return datatypecode._voidptr|ASMReg|

	|| t = .type
	|| b = t.BaseType
	if b > scnodetype.datatype
		return datatypecode._voidptr|ASMReg|
	
	|| I = t.typeinfo
	if I == datatypecode.unusedtype // what?
	return I|asmreg|


function SCFunction.ASMReturn (|scdecl|)
	opt norefcounts
	|| T = .returntype
	if t isnt ReturnedStruct
		return T
	

datatype VarUseMode (int)
	Flags
		Return
		Set	// unused so far
		ExistingVar
		Sometimes
	syntax is (|varusemode| v, |bool|)
		return self&v
//	syntax is (|varusemode| v, assigns:|bool|, |varusemode|)
//		if value
//			return self|||v
//		return self&~v


