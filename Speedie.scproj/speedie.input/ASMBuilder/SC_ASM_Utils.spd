

function message.ASMDecl (|SCDecl!|)
	opt norefcounts
	rz = .fastdecl
	if rz.typeonly == datatypecode.unusedtype
		rz.wholetype = rz.CalculateASMType|datatypecode|
	target debug: rz.ASMSanity


function SCFunction.GenASM
	opt norefcounts
	|SC_Hoister| H 
	|| a = .sourcearg!
	asmtype.ArgSub(ASMState.Sh, A, H)


function message.OperatorMul (|asm| op, |&fatasm|)
	cpp_part RequestOp
	|| a = ASMState.sh
	|| p = a.Curr
	if p < a.End
		if  .Position < 0
		if  p == 239400
		p[0] = nil
		a._curr = p + 1
		P._op = op
		p.debug = self
		p.BranchDepth = a.State.BranchDepth
		p.BasicBlock = a.BasicBlock
		return p

	error (self, "Function too large (over 64K)")
	return a.start


target debug
	function scdecl.ASMSanity 
		ifn .IsCarray or .PointerCount or .IsObject or .IsBareStruct
			|| size = .type.Size
			|| T = .TypeOnly
			if T is Vec3 or ivec3
				size = 12
			if size != T.bytecount // sigh. what?
				#!"Should we have set the dtype when the decl was created? or at least verified in the nil-checker?"
				#!"We could change it if it is only 112."
				debugger



function asmstate.CloseOneVar (|message?| exp, |int| OriginalDecls, |&bool| DoMore,   |message?|)
	opt norefcounts
	
										  /// READ TABLE ///
	|| v =  (.VDecls, .vtemps)(OriginalDecls >= 0)
	|| d = .vars[v]
	if !d and OriginalDecls>=0 // oof?
	
	
										   /// UNHOIST ///
	|| k = .KnownValues[v]
		target debug
			if d and d.fat and d.fat != k // are these always the same? then remove one?
		
		|| DebugView = !.state.inlinedepth  and  originaldecls >= 0  and  options.optimise < 4
		if !DebugView  and  k.µRefCount <= 1 // HoistComplete did +1 on it's refcount earlier. So it is unused.
			.Nop(k) 
		  else
			if (k isa asm.gtab) and (v == OriginalDecls + 1) // this happens to be the first gtab and it is used.
				DoMore[] = false
				return nil // keep it
			k.µRefCount-- // restore :)
		.KnownValues[v] = nil
	.HoistMap &=~ (1<<v)
			

										/// NOP UNUSED VARS ///
	if d is CompilerCreated
		|| f = d.fat
			if  f.µrefcount == 1  and  f isa asm.allo // oof
			.AskNop(f)


									  /// DEALLOCATE STRUCTS ///
	if  d  and  exp
		if (d isnt return and global)  and  d.IsBareStruct
			exp = exp.DeepLast
			ASMType.AllocBearStruct(self, exp, v, d, -1)


											/// CLEANUP ///
	.vars[v] = nil
	if OriginalDecls >= 0
		.VDecls = v - 1
	  else
		.VTemps = v + 1
			
	return exp



function scdecl.CalculateASMType (|asmreg|)
	opt norefcounts
	if .pointercount or .iscarray
		// carrays must be allocated. So this reg will store a pointer to the carray.
		return datatypecode._voidptr|ASMReg|

	|| t = .type
	|| b = t.BaseType
	if b > scnodetype.datatype
		return datatypecode._voidptr|ASMReg|
	
	|| I = t.typeinfo
	if I == datatypecode.unusedtype // what?
	return I|asmreg|


function SCFunction.ASMReturn (|scdecl|)
	opt norefcounts
	|| T = .returntype
	if t isnt ReturnedStruct
		return T


function SCFunction.RealReturnType (|scdecl|)
	opt norefcounts
	|| T = .returntype
	if t and t isnt ReturnedStruct
		return T
	return TypeVoid


datatype VarUseMode (int)
	Flags
		Return
		Set						// unused so far
		ExistingVar
		Sometimes
	syntax is (|varusemode| v, |bool|)
		return self&v

