
extend SCFunction
	function StartASM
		.µstart = Assembler.sh.Index

	function GuessLength (|int|)
		for s.ListASM in self
			rz += s.GuessSize		
		
	function µTest (|memory of asm|)
		description "Generate some code (only for testing)."
		rz = asm[.µlength|int|*3]!
		|| p = rz.ptr
		|| after = .MuRender(P, P+rz.Size)
		rz.Size = after-p
		rz.length = rz.Size
		
	// cosmic lore unfold... into tales untold

	function IR (|&fatasm|)
		return Assembler.sh.start + .µstart
	
	function MuRender (|!&ASM| Where, |!&asm| After, |!&asm|)
		|uint64| HasLabel
		rz = where
		for (fat.fat in self) (i)
			haslabel |= fat.JumpPrm << (i&63)
			|| n = rz - where
			if n >= 64K
				error (.source, "Function too large (>= 256K compiled)")
			fat.ASMIndex = n
			fat.CheckHasOutput
			rz = fat.µRenderInto(rz, after)

		if HasLabel // Use this as a jump-map??? To skip huge sections?
			for fat.fat in self
				|| r = fat.JumpPrm
					fat.FillLabelRequest(where, rz, r-1)

	
	target debug
		render µRender (|bool|RenderBlocks=false)
			fs <~ "asm ${.exportname}   ${.µLengthguess*4} / ${compiler.stASMTotalOps}\n" // " asm " "asm"
			|| bb = 0
			for µ.fat in self
				if RenderBlocks and µ.BasicBlock != bb
					bb = µ.BasicBlock
					fs <~ "//$bb\n"
				µ.RenderFat(fs)
				fs <~ '\n'


/// TEXTUAL STUFF		
	function µPrint (|int| i)
		target debug
			printline self
			|| fs = faststring()
			if i 
				|| n = PackMaker.packfuncs.length
				fs <~ "("
				(i div n).Percent(fs)
				fs <~ ") "
			.µRender(fs)
			printline fs


	iterator fat
		|| FirstInst = .IR
		|| CurrInst = FirstInst
		|| AfterInst = Currinst + .µlength
		while currinst < Afterinst
			yield currinst (CurrInst - FirstInst)
			++currinst


function fatasm.FillLabelRequest (|!&asm| Start, |!&asm| After, |int| reg)
	|| SelfOut = start + .ASMIndex
	target debug: debug_require  SelfOut >= start  and  SelfOut < after 

	// this needs fixing.
	|int| J = .prms[reg]
	|| OldDest = self + J + 1
	|| DestOut = OldDest.asmindex
	|| dest = start + DestOut

	target debug: debug_require dest >= start and dest <= after
	|| J2 = (dest - SelfOut) -1
	check (J2 != -1) (self, "Invalid ASM generated (infinite loop)")
	.prms[reg] = J2
	.µRenderInto(SelfOut, SelfOut+1) // rerender
	.prms[reg] = J						 // restore!


//function memory.Run (|memory of asm| self, |&ivec4| Args = nil, |int| ArgCount=0, |int64|)
//	disabled
//	cpp_part RunArgs
//	|| r = jb_vm.vm.Registers(true)
//	if args
//		for i in argcount
//			r[i] = args[i] 
//	
//	return jb_vm.Run(.ptr, .length)|&int64|[]


function JBin.AddFunction (|SCFunction| fn, |int| Missed)
	// need aligning each.
	if missed
		self.AddInt(missed)
	|| n = fn.µlengthguess*4
/	|| M = .ReserveMemory(@bin, n)
	for i in n
		M[i] = 'A' + i
	// MuRender


