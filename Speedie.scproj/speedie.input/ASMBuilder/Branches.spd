	

#!"if (x) return, a(), b()   -->   if !x {a(), b()}, return"


extend Assembler {

function Else (|message?| other, |asmreg|)
	rz = .ElseSub(other)
	.BasicBlock++


function ElseSub (|message?| other, |asmreg|)
	opt norefcounts
	if !other
		return asmreg()
	|| T = other.ASMType
	if T == ASMType.kif
		return .IF(other, asmreg())
	if other != @arg
		other = other.first!
	  else
		debugger
	return ASMType.ARG(self, other)


function If (fn_asm)
	.state.BranchDepth++
	rz = .ifsub(exp, dest)
	.state.BranchDepth--


function IfSub (fn_asm)
	opt norefcounts
	
	|| cond = exp.first!,  || arg1 = cond.next!
	|| Other = arg1.next
	|| IfStart = .curr
	
	|FATRange| B
	.Branch(cond, B)
	|| ArgStart = .curr
	if b.Never
		return .Else(other)								// if k0 {b()} else {return}

	.BasicBlock++
	|| Arg1Return = ASMType.arg(self, arg1)
	if b.always or !other.HasAsmStuff
		.AllJumpTo(b)
		.BasicBlock++
		return Arg1Return * b.always					// if k1: return 

	if ArgStart == .curr								// if x {} else {something()}
		.SoftNopRange(ifstart, argstart)
		.Branch(cond, B, true)
		rz = .Else(other) & Arg1Return
		.AllJumpTo(b)
		.BasicBlock++
		return rz
	
		
	if .curr.op != asm.eror
	|| AfterFirst = other.jump
	.AllJumpTo(b)
	rz = .Else(other) & Arg1Return						// if x {return} else {return}
	AfterFirst.jumpto(.curr, Assembler.sh)
	.BasicBlock++


function LoopFill (|fatasm| C, |fatasm| S, |fatasm| A)
	while C < S
		#!ClearExits
		|| op = C.Op
		if op >= kContinue
			C._op = ASM.Jump
			if op == kContinue			// continue
				C.JumpTo(S, self)
			  else       				// exit
				C.JumpTo(A, self)
		C++



function BigWhile (fn_asm)
	|| OV = .OpenVars
	//WhileHoister = nil
	//WhileHoister.HoistLoop(self, exp)
	|| what = asmtype.ArgumentSub(self, exp)
	return .CloseVars(OV, exp, what)
	

function While (fn_asm)
	.state.BranchDepth++ // loops are still branches
	.state.LoopDepth++
	rz = .WhileSub(exp)
	.state.LoopDepth--
	.state.BranchDepth--	


function WhileSub (|message| exp,  |asmreg|)
	opt norefcounts
	|| InitialJump = exp.JUMP												// test goes after loop
	|| Returns = ASMType.ArgumentSub(self, exp.second!)						// arg

	|FatRange| loop_test
	// how to step into this? Into the while-true
	|| LT = .Branch(exp.first!, loop_test)
	if loop_test.never
		.SoftNopRange(InitialJump, loop_Test.start)
		return ASMReg()
	
	if loop_test.always
		.Nop(InitialJump)
		if  loop_test.After != loop_Test.Start  //  EH?
			debugger
			.SoftNopRange(loop_Test.start, loop_Test.after)
		
		// now what?
		exp.JUMP.JumpTo(initialjump+1, self)
		loop_test.after++
	  else
		InitialJump.JumpTo(loop_test.start, self)
		.AllJumpTo(loop_test, InitialJump+1)

	.loopfill(InitialJump+1 /*loop_start*/,  loop_test.start /*continue*/,  loop_test.After /*exit*/)
	
	return returns * loop_test.Always



function Exit			(fn_asm)
	opt norefcounts
	|| J = exp.jump											// request jump to exit
	J._op = kexit


function Continue		(fn_asm)
	opt norefcounts
	|| J = exp.jump											// request jump to continue
	J._op = kcontinue


function BackCond (|fatasm| start)
	|| l = .last
	require l >= start
	|| bb = l.basicblock
	.nop(l)
	--l
	if l.basicblock == bb  and  l >= start  and  l is RealConst
		.nop(l)


function Ternary		(fn_asm)
	opt norefcounts
	
	// I'd rather actually re-write this to be like an if-condition! Like reuse the code
	// then we can put back in, the opts in here... into the generalised if thing.
	// this will do for now.
	
	|| prms = exp.second
	|| cond = prms.first!
	|| A = cond.next!
	|| B = A.next!
	
	// opt this:
	// x = JB_Ternary(Bool, 1, -1) --> 
	// x = -1
	// x += Bool << 1
	
	|| DestType = exp.ASMDecl.typeonly
	|| mA = .ExistingVar(a, varusemode.Sometimes)
	|| mB = .ExistingVar(b, varusemode.Sometimes)
	
	if ma isa DestType
		if (mb isa DestType) and !DestType.isfloat
			return .InbuiltTernary(dest, ma, mb, cond)
	
	dest = .TempTyped(exp, dest)
	if  ma isa DestType  and  ma isnt ConstOutput						// goes thru kk.isknown!
		|| mC = .ExistingVar(cond, varusemode.Sometimes)
		if (ma == mc)
			return .MiniTernary(dest, ma, b, cond)
	
	|FatRange| br
	.Branch(cond, Br)
	|| KK = br.Constness
	if KK.IsKnown
		|| which = (A, B)(KK.Default)
		return .µInto(which, dest)

	return .RealTernary(exp, dest, a, b, br)


function RealTernary (|message| exp, |asmreg| dest, |message| A, |message| B, |fatrange| Branch, |asmreg|)
	.basicblock++
	|| µA = .µInto(A, dest)
	|| Exit = exp.jump
	.AllJumpTo(Branch)
	.basicblock++
	rz = .µInto(B, dest)
	.basicblock++
	
	rz = .TernRefCount(µa, rz)						
	Exit.jumpto(.curr, self)


function TernRefCount (|asmreg| A, |asmreg| B, |asmreg|)
	// We want things that are refered to... to not disappear.
	rz = B
	|| fa = A.fat
	|| fb = B.fat		
		fb.Input(5, A)			// refcount A, save from disposal
	  elseif fa
		rz = A


function InbuiltTernary (|asmreg| dest, |asmreg| ma, |asmreg| mb, |message| cond, |asmreg|)
	opt norefcounts
	|| mc = ASMReg()
	|| dr = dest.reg
		if (dr != ma.reg and mb.reg)
			mc = dest
	mc = .µ(cond, mc)
	
	if mc is ConstOutput
		|| i = mc.Const
		.NopConst(mc)
		return (ma, mb)(i)
	
	return cond.TERN(dest, mc, ma, mb, mc.small) * dest


function MiniTernary (|asmreg| dest, |asmreg| ma, |message| B, |message| cond, |asmreg|)
	// x = (a, b+1)(a)
	opt norefcounts
	.Assign(dest, ma, b.prev!)
	|fatrange| Branch
	.Branch(cond, Branch, true)
	.basicblock++
	rz = .µinto(b, dest)
	.basicblock++
	rz = .TernRefCount(ma, rz)
	.AllJumpTo(Branch)


function Branch (|message| Cond,  |fatrange| Range,  |bool| Neg = false,  |asmreg|)
	range.Start = .curr
	|| mode = asmreg.CondRequest.Negate(neg)

	rz = .µ(cond, mode)
	if rz isnt CondAnswer
		rz = .Exists(mode, rz, cond)

	if rz is constoutput
		range.Constness = (rz.const!=0)|maybebool|
		if rz is RealConst
			.BackCond(range.start)
	  else
		range.Constness = maybebool.default(false)
	
	range.after = .curr


helper ASMBoolShrink (|message| exp,  |ASMReg| Dest,  |ASMReg| BothSame,  |ASMReg|)
	if bothsame.isbool and (dest isnt Negate)
		if (dest is CondRequest)								// if  a or a   -->  if a
			return BothSame.BoolAnswer							
		return bothsame											// x = a or a   -->  x = a
	return .Exists(dest, BothSame, exp)							// x = int1 or int1


helper BoolFromBools (|message| exp, |ASMReg| Dest, |opmode| opp, |ASMReg| ml, |ASMReg| mr, |ASMReg|)
	// handles:  a = a and b,  a = a or b
	dest = .TempTyped(exp, dest)
	if opp is or
		rz = .BitOr(dest, ml, mr, exp)
	  else
		rz = .BitAnd(dest, ml, mr, exp)
	
	if (dest is negate)
		rz = .BitNot(rz, dest, asmreg(), exp)
		(rz is AlreadyNegated)


function asmreg.IsBoolV (|bool|)
	return self.IsBool and (self isnt RealConst)


helper ASMBoolBadnessMadness (|message| exp,  |ASMReg| Dest,  |opmode| Opp,  |ASMReg|)
	opt norefcounts // 😵‍💫 // 😵‍💫 // 😵‍💫 // 😵‍💫
	dest.µtype = DataTypeCode.bool
	
	|| A = exp.first!
	|| B = exp.last!
	|| ml = .ExistingVar(A, varusemode.Sometimes)
	|| mr = .ExistingVar(B, varusemode.Sometimes)
	
	if ml and (ml iz mr)
		return .ASMBoolShrink(exp, dest, ml)

	if (dest isnt condrequest) and (ml.isboolV and mr.isboolV) 
		return .BoolFromBools(exp, dest, opp, ml, mr)		// No consts via .existingvar		

	if dest is negate
		(opp xor= OpMode.AndOr)								//  !(a and b)  -->  !a or !b
	
	if dest is CondRequest									// 😢 😿 😢 😿 😢 😿 😢 😿 SADNESS!!
		if OPP is OR
			return .BranchOr(A, B, dest)
		return .BranchAnd(A, B, Dest)

	return .BoolValue(A, dest, opp, b)
	


function FoundReg (|message| All, |int| R, |bool|)
	opt norefcounts
	all = all.Declable
	
	if all == @thg or @num // nums can be hoisted
		|| d = all.FastDeclSafe
		if d is local
			|| v = d.WholeType
			if v.reg == r
				return true
		
	for s.fast in All
		if .FoundReg(s, r)
			return true


function Unchanged (|message| A, |asmreg| dest, |message| B, |bool|)
	|| Dr = dest.reg
	return !.FoundReg(a,dr) or !.FoundReg(b,dr)


function UniqueLocation (|message| A, |asmreg| dest, |message| B, |asmreg|)
	if dest.reg
		if (dest is Declaration) or .Unchanged(A, dest, B)
			return dest
	rz = .TempOnly(A)
	(rz is negate) = (Dest is negate)
	rz.µtype = dest.µtype	


function BoolTestAndJump (|message| exp, |asmreg| req, |opmode| opp, |&fatasm|)
	|| mode = ASMReg.CondRequest.negate(opp is OR)
	return .Exists(mode, req, exp).fat!


function BoolValue (|message| A, |ASMReg| Dest, |opmode| Opp, |message| B, |ASMReg|)
	opt norefcounts
	dest = .UniqueLocation(a, dest, B)

	|| first = .µBoolInto(A, dest)
	if first is ConstOutput
		return .BoolConst1(b, dest, opp, first).boolanswer			// x = 5 or Y() --> x = Y()
	
	|| JUMP = .BoolTestAndJump(a, first, opp)						// AND/OR
	|| Second = .µBoolInto(B, dest)
	if Second is ConstOutput
		return .BoolConst2(first, second, opp, jump).boolanswer

	JUMP.JumpTo(.curr, self)
	
	if first.IsBool and Second.IsBool
		return dest.boolanswer

	return .Exists(dest, dest, A.next!)


function BoolConst1 (|message| B, |asmreg| dest, |opmode| Opp, |asmreg| ml, |asmreg|)
	|| V = (ml.const!=0) != (dest is negate)
	|| expect = opp is OR
	if v == expect
		ml.µtype = datatypecode.bool
		return .SetConst(b, v|int|, ml, dest)
									// x = 5 or  2	 --> x = true
									// x = 0 and 2	 --> x = false
	
	.NopReg(ml)						// x = 0 or y()  --> x = y()
									// x = 7 and y() --> x = y()
	|| mr = .µ(B, dest)
	if mr is ConstOutput
		mr.µtype = datatypecode.bool
		v = (mr.const!=0) != (dest is negate)
		return .SetConst(b, v|int|, mr, dest)
	
	if mr.isbool
		return mr
	return .Exists(dest, mr, B)


function BoolConst2 (|asmreg| ml, |asmreg| kr, |opmode| Opp, |FATASM| Jump, |asmreg|)
	|| V = kr.const!=0
	if v == (opp is AND)
		.softnop jump
		.NopReg(kr)
		return ml
		
	.nop jump // this also nops ml!
	return kr


function BranchAnd (|message| A, |message| B, |asmreg| dest, |asmreg|)
	|fatrange| AndTest
	|| First = .Branch(A, andtest, dest is negate)
	if AndTest.never
		return first

	|| Second = .Branch(B, AndTest, dest is negate)
	if  first isnt RealConst
		// a and b
		// a and 1
		// a and 0
		return first

	// 1 and 1
	// 1 and 0
	// 1 and b
	return second


function BranchOr (|message| A, |message| B, |asmreg| dest, |asmreg|)
	|FatRange| OrTest
	|| First = .Branch(A, OrTest, dest isnt negate)
	|| KF = OrTest.Constness.negate
	if kf.knowntrue
		|| fake = A.noop
		fake.const = KF|int|
		// 1 or 1
		// 1 or 0
		// 1 or b
		(first is condanswer)
		return fake*first.boolanswer						// only way around this. Cos we got asm-reg(0)

	
	|fatrange| Br2
	|| second = .Branch(B, Br2, dest is negate)
	.AllJumpTo(OrTest)

	if Br2.always
		// a or 1
		// 0 or 1
		return second

	if kf.KnownFalse
		// 0 or 0
		// 0 or b
		return second

	// a or 0
	// a or b
	
	return first
}




Struct FatRange
	|&FatASM|   Start
	|&FatASM|   After
	|maybebool| Constness
	
	
	function Always (|bool|)
		opt inline
		return .Constness.KnownTrue
	
	
	function Never (|bool|)
		opt inline
		return .Constness.KnownFalse
	
	iterator
		|| curr = .after!
		while (curr > .start)
			curr--
			yield curr


extend Assembler
	function InlineFinishWithConsts (|fatrange| R, |ASMReg|)
		for s in R
			if s isa asm.ret
				if rz
					rz = rz.simplify
				  else
					|| dest = s.inputfat(0)
						rz = dest.info 
					  else
						rz = s.prms[0]|int|.asm
				s.SetOp = asm.jump
				s.JumpReg = 1
				.JumpFix(s)
			  elseif s isa asm.KNST
				Assembler.sh.AskNop(s)
		
		rz &= ~ASMReg.Exit
		(rz as= .state.return&asmreg.exit)
	
	
	function JumpFix (|fatasm| s, |?&fatasm| curr=nil)
		(s isnt CondAnswer)
		if !curr
			curr = .curr
		s.JumpTo(curr, self)
	
	
	function AllJumpTo (|FatRange| range, |?&FatAsm| curr = nil)
		for s in range
			if (s is CondAnswer) and !(s isa asm.knst)
				.JumpFix(s, curr)
	
	

function @Assembler.PrintProgress
	cpp_name adb 
	visible
	opt norefcounts
	"---"
	|| fn = scfunction.currfunc!
	printline fn
	|| Base = assembler.sh.Start + fn.µStart
	|| amount = fn.µLength ?? (Assembler.sh.curr - base)
	for n in amount
		base[n].debugprint


function message.Jump (|&Fatasm|)
	return .jump(0)
