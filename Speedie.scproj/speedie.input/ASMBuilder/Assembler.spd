

struct InlineBlock
	|scfunction!--|	Fn    
	|asmreg|		Return
	|byte|			ParentVDecls
	|byte|			BranchDepth
	|byte|			LoopDepth
	|byte|			InlineDepth


struct Assembler
	linkage: cpp_part Pac
	|DataTypeCode|				ReturnASM
	|uint16| 					BasicBlock

	|InlineBlock|				State
	|byte|						DeepestInline
	|byte|						InlineDepthLimit
	|byte|						StackSize
	|byte|						VDecls
	|byte|						VTemps
	|bool|						IsTextual
	|int|						CurrFuncGrab
	|bool|						Inited
	|bool|						NeedsRework
	|bool|						TailInlineable

	|scfunction--|				Out

	|?&FatASM|					InlineEnd
	|uint|						HoistMap
	|?&FatASM|					Orig
	|&FatASM|					FuncStart
	|&FatASM|					LastDebug
	|&FatASM|					Start		// a "slice" feature would be nice    
	|&FatASM|					_Curr    
	|&FatASM|					End    

	|scdecl--[32]|				Vars
	|(?&FATASM)[32]|			KnownValues
	|FatASM| 					Zero

	constants
		kContinue		= 254
		kExit			= 255
	

	module
		//|SC_Hoister|				WhileHoister
		|Assembler|					Sh
		|memory of fatasm|			JSM = FatASM[0]!
		|memory of fatasm|			HoistSpace = FatASM[0]!


	function fn (|scfunction!--|)
		return .state.fn
	
    function Curr (|&fatasm|)
        return ._curr

	function OpenVars (|uint16|)
		return (.VDecls|uint| << 8) ||| (.VTemps << 0)


	function CloseVars (|uint16| Orig, |message| exp = nil, |asmreg| Return=nil, |asmreg|)
		opt NoRefCounts
		
		|| OrigDecls = Orig >> 8
		|| OrigTemps = orig & 255

		|| DoMore = true
		while .VTemps < OrigTemps
			exp = .CloseOneVar(exp, -1, DoMore)

		while DoMore and .VDecls > OrigDecls
			exp = .CloseOneVar(exp, OrigDecls, DoMore)
			loop DoMore

		return Return


	function AddFuncParams (|SCFunction| fn)
		opt NoRefCounts
		for a in fn.Args
			// reset.
			(a is param)
			(a isnt const)
			(a isnt body)
			.DeclareMe(a.source, a)
	
	
	function Index (|int|)
		return ._curr - .start
	
	
	function Last (|&FatASM|)
		return ._curr - 1


	function Last (|asm| type, |&FatASM|)
		|| L = ._curr - 1
		if l isa type
			if l.BasicBlock == .basicblock
				return L
	
	
	function IntPowerOfTwo (|asmreg| r, |int| Sub=0, |FailableInt|)
		// -1 --> -1,  0 --> 0,  1 --> 1,  2 --> 2,  4 --> 3,  8 --> 4
		// this is used for multiplication mostly. like x*-1, or x*0, or x*1
		|| v = r.const
		if v == -1
			if sub
			.NopConst(r)
			return v
		v -= Sub
		if v.IsPow2
			.NopConst(r)
			if !v
				return 0
			return v.Log2+1


	function IncrPost (|message| exp,  |AsmReg| Dest,  |AsmReg| ToGrow,  |int64| Value,  |asmreg|)
		if togrow.isint and value.CanStoreAsIntImmediate and !dest.IsVec
			return exp.ADPK(dest, ToGrow, Value) * Dest
		.Assign(dest, ToGrow, exp)
		rz = .IncrPre(exp, togrow, ToGrow, value)


	function AddToReg (|message| exp, |asmreg| Dest, |asmreg| Orig, |int64| Amount, |asmreg|)
		if !dest or dest == asmreg()
			dest.µtype = orig.µtype
		dest = .temponly(exp, dest)
		|| Where = orig • dest
		(where is realconst)
		|| K = .NumToReg(exp, amount, where, orig.µtype)
		return .Plus(dest, Orig, K, exp)
	
	
	function IncrPre (|message| exp,  |AsmReg| Dest,  |AsmReg| Src,  |int64| Value,  |asmreg|)
		if !src.reg // what?
		if !dest.reg
			dest = src
		src = .AddToReg(exp, src, src, value) 
		if dest.reg==src.reg
			return src
		return .Assign(dest, src, exp)


	syntax append (|asm| code, |message| dbg, |&FatASM|)
		cpp_part RequestOp
		return dbg.operatormul(code)


	syntax expect (|message?| where=nil, |string| msg)
		cpp_part Fail
		|| f = SCFunction.currfunc!
		f.µlength = .length
		printline f.µrender
		debugger
		error (where, msg)


	function DeclareMe (|Message| where,  |scdecl| Type,  |asmreg|)
		|| t = Type.CalculateASMType
		|| ret = .state.return
		if ret.reg and (type is VarThatGotReturned) and (.state.fn.ReturnedVars == 1)
			ret.µtype = T|DataTypeCode|
			Type.wholetype = ret
			
			return ret
		
		|| d = .VDecls|int| + 1
		t.reg = d
		Type.WholeType = t
		if (d < .VTemps)
			.Vars[d] = Type
			.Vdecls = d
			target debug: Type.ASMSanity
			return t
		error (self, where, "No free local variables.")


	function TempTyped (|Message| where, |asmreg| T, |scdecl| Type,  |asmreg|)
		t.µtype = type.datatype
		return .TempOnly(where, t)
	
	
	function TempTyped (|Message| where, |asmreg| T=asmreg.Temp, |asmreg|)				// .needreg
		opt norefcounts
		if t isnt textual
			// what if there is a type and its different?
			// and if its NEVER different... why add it?
			t.µtype = where.asmdecl.datatype
		return .TempOnly(where, t)


	function TempOnly (|Message| where, |asmreg| T=asmreg.Temp, |asmreg|)				// .needreg
		opt norefcounts
		if t.reg
			return t
		|| r = .VTemps - 1
		check (r > .vdecls) (where, "No free local variables.")
		t.reg = r
		.VTemps = r
		(t isnt realconst) // why would it be?
		(t is temp)
//		.declprint
		return t
	
	
	function NopReg (|asmreg| R)
		|| f = r.fat
			return .Nop(f)
		if r.reg and r isnt param
			debugat // bad!
	
	
	function Nop2Consts (|asmreg| A, |asmreg| B)
		|| Further = a.FatIndex > b.FatIndex
			.NopConst(A)
		.NopConst(B)
		if !Further
			.NopConst(A) // in case of swapped order
	
	
	function Const (|asmreg| R, |int| bits, |bool| signed, |ind|)
		if R is ConstOutput
			|| k = R.const
			if k.fits(bits, signed)
				.NopConst(R, true)
				return k|uint64|.trim(bits)


	function NopConst (|asmreg| R, |bool| Ask=false,   |bool|)
		// This is used all over. can we make this bool result used all over?
		// Sigh. So much analysis just to see if we can rework anything
		// What about temps? (temps can come multiple blocks (ternaries))
		
		if (r is RemoveableOutput) or (r is RealConst)
			|| f = r.fat
				if !ask or f.BasicBlock == .BasicBlock
					.Nop(f)
					return true
	
	
	function Nop (|FATASM| Fat, |int| Depth=0)
		|| C = .curr - 1
		if fat == C
			._curr = C // nice

		for v.regoutputs in fat
			v&=31
			.KnownValues[v] = nil
			.HoistMap &=~ (1<<v)

		depth++
		if depth > 7
		for f.fatinputs in fat
			.decr(f, depth)

		// why is this coming after? maybe better before? try?
		|| Type = asm.noop * (fat < ._curr)
		fat.setop = Type
	
	
	function Decr (|?&fatasm| f, |int| Depth=0)
		if f
			|| C = f.µrefcount
			C -= (C > 0)
			f.µrefcount = C
			if C <= 0
				.Nop(f, depth)
	
	
	function SofterNop (|FATASM| Fat)
		fat.SetOp = asm.noop

	
	function AskNop (|fatasm| f)
		if f.µRefCount <= 0
			.nop(f)	

	
	function NopRange (|fatasm| Start, |fatasm| After)
		while start < After
			.nop(--after)
			
		
///////////////////////////////////////////////////////////////////////////////////////////////////

	function µBoolInto (|message| exp, |AsmReg| Dest, |asmreg|)
		|| X = .ExistingVar(Exp)
		X ?= .µInto(exp, dest)
		if  (X.µtype isnt bool)  or  (dest is negate  and  X isnt AlreadyNegated)
			return .exists(dest as (X bitand ASMReg.FromExistingVar), X, exp)
		return .Assign(dest, X, exp)


	function µInto (|message| exp, |AsmReg| Dest, |asmreg|)
		target debug: if !dest.reg
		|| r = .µ(Exp, dest)
		if r.reg == dest.reg
			return r
		|| dest2 = r.reg(dest)
		(dest2 is temp) = (dest is temp)
		return .Assign(Dest2, r, exp)

		
	function µ (|message| exp, |AsmReg| Dest = asmreg(), |asmreg|)
		description "Same as µGetASM, except this closes temp vars for reuse." 
		|| Closer = .OpenVars
		|| v = .µGetASM(exp, dest)
		return .CloseVars(Closer, nil, v)


	function µReffed (|message| exp, |scdecl!| A, |asmreg|)
		rz = asmreg()
		(rz is AddrNeed) = (a is Reference)
		rz = .µGetASM(exp, rz)
		if (a is reference  and  rz isnt containsaddr)
			error (exp, "Failed to get address of expression. (Compiler *should* have caught this in transform phase)")
		
		|| f = rz.fat
			f.µRefCount++


	function µGetASM (|message| exp, |AsmReg| Dest = asmreg(), |asmreg|)
		opt norefcounts
		cpp_part GetASM 

		|| fn = fn_asm_table[exp.ASMType]!
		target debug
			dest.TmpCheck
			|| StartStackSize = ++.stacksize
			if StartStackSize > 20 // ugh
			|| trap = ++ASMTrapper
			// if trap == 575
				
		  else
			opt inline
		
		|| ss = (fn)(self, exp, dest)

		target debug
			.stacksize--
			if !ss.tmpcheck
				(fn)(self, exp, dest)
			if !ss or dest is set or ss is set
				return ss // no need test.
			if !ss.reg and (ss isnt condanswer)
				if (ss isnt ExitFunction) and (ss isnt constoutput)
					debugger
					PrintProgress()
					(fn)(self, exp, dest)
		return ss
	
	
	function ZeroMemory (|int| Index, |message| Exp, |asmreg| Base, |asmreg| VarAdd, |scdecl| D, |&fatasm|)
		check (d and !index and !varadd.reg) (exp)
		if d
			index = d.SizeOfQuery
			check (index < 512K and index > 0) (exp, "Can't zero that much memory")
		return exp.MEMZ(base, index)
	
	
	function ReadOrWriteSub (|ASMReg| Dest, |message| Exp, |asmreg| Base, |asmreg| VarAdd, |scdecl?| Decl, |int| Index, |&fatasm|)
		if dest is containsaddr
			#!wait?? this is meant to be an addrrequest? not a response.
			debugger
		
		if dest is FromZeroMemory
			return .ZeroMemory(index, exp, base, varadd, Decl)
		
		(dest asnt= asmreg.AddrRequest)
		|| T = dest.µtype
		|| bytes = t.ByteCount.log2
		if  (bytes|uint| > 4)
			error (exp, "Object to large to access")				// can we do struct-mem-copy?
			bytes = 0
		
		if varadd is ConstOutput
			|| CC = varadd.fat
				if varadd is RealConst
					.nop(cc)
				index += cc.const
				varadd = asmreg()
		//  ADDK: bs, r1, 4
		//  RD1U: r2, bs, value, 4, 0 
		base = .InlineOffsetOpt(Base, bytes, index, 127, Decl)

/*
	// these need to be opted. Not always happening? InlineOffsetOpt seems to only do ADDK, not ADPK
	ADPK: t30, r2, 4                               /* R++ */
	WR4U: t31, t30, r0, 0, 0                       /* R++[0] */	
	|| Move = .TryAddPKMemory(base) // how is this different to InlineOff~t?
*/

		if index >= 128												// read/write only allows up to 127
			index <<= bytes
			base = .AddToReg(exp, asmreg(), base as asmreg.noscale, index)
			index = 0

		if 0: exp.RD1U, exp.RD1S, exp.RD2U, exp.RD2S, exp.RD4S, exp.RD8U, exp.RD16
		if 0: exp.WR1U, exp.WR2U, exp.WR4U, exp.WR8U, exp.WR16
 
		rz = exp.RD4U(dest, base, varadd, index>>bytes, 0)
		if dest is set
			rz._op = ASMType.WriteASM[bytes]
		  else
			|| B = (bytes<<1) + t.issigned
			rz._op = ASMType.ReadASM[b]


	function Read (|asmreg| dest, |message| exp, |asmreg| Ptr, |asmreg| VarAdd, |scdecl| DestDecl, |int| index=0,  |&fatasm|)
		opt inline
		(dest isnt set)
		return .ReadOrWriteSub(dest, exp, ptr, VarAdd, DestDecl, index)


	function Write (|asmreg| dest, |message| exp, |asmreg| Ptr, |asmreg| VarAdd, |scdecl| ReadDecl, |int| index=0, |&fatasm|)
		opt inline
		(dest is set)
		return .ReadOrWriteSub(dest, exp, ptr, VarAdd, ReadDecl, index)


	function ReadOrWrite (|ASMReg| dest, |message| m, |asmreg| base, |asmreg| VarAdd, |scdecl| Ty,  |int| index=0, |asmreg|)
		opt inline
		if dest is FromZeroMemory or set
			(dest is RealConst)				// make compiler happy
		return .ReadOrWriteSub(dest, m, base, VarAdd, ty, index) * dest


	function PrmCollectSpd (|message| prms,  |SCFunction| fn,  |uint64|) // paramcollect, paramscollect
		opt norefcounts
		|int64| sh
		|| args = fn.args
		|| i = 0
		for p.fast in prms
			|int64| v = .µReffed(p!, args[i]!).reg
			sh += 5
			rz |= v << sh
			i++
		
		rz |= i

	
//	function DeclPrint
//		if 0 and "InitTypes2".trap
//			"d: ${.vdecls|int|} t: ${.vtemps|int|}"
//			debugger
	
	function PrmCollect (|message| prms,  |SCFunction| fn,  |uint64|)
		// We want a simple param order for speedie. Only sensible way to do things.
		// So we can't share the prmcollector.
		opt norefcounts
		
		if !fn.HasCVersion
			return .PrmCollectSpd(prms, fn)
		
		|int64| sh = 64
		|| fc = 0
		|| ic = 0
		|| args = fn.args
		|| n = args.Length
		for Ints in 2
			|| i = 0
			for p.fast in prms
				|| ty = p.ASMDecl
				if ty.SpecialRegs|int| != Ints		// should get .SpecialRegs from message somehow?
					|int64| v = .µReffed(p!, args[i]!).reg
					sh -= 5
					rz  |=  v << sh
					ic += ints
					fc += !ints
				i++
		
		rz >>= 64-((n*5)+12)
		if fc>8 or ic>8			// hmmm
		rz |= fn.ASMReturn.SpecialRegs << 11
		if fc
			rz |= (8-fc) << 6
			rz |= (8-ic) << 0
		  else
			rz |= (17-ic) << 6
//		.DeclPrint
			

	function CallFunc (|message| exp,  |asmreg| dest,  |scfunction| fn,  |asmreg|)
		|| v = .VDecls					// Exit(Dest)
		v += (!v or dest.reg != v)
		|| diff = v - .VDecls
		if diff == 1
			.vars[v] = fn.RealReturnType
			if .vars[v] isnt Return and .vars[v] != typevoid
		
		.Vdecls = v
		
		check (v < 32) (exp, "Too many registers in use. No space for result.")
		if (dest is ExitAtAll) and .state.return
			v = 1 max .state.parentvdecls // a simple max will fix this?
		dest.reg = v
		dest.µtype = fn.ASMRegType
		return dest.ReallySimplify


	function PackMakerInit
		opt norefcounts
		require !.Inited
		.inited = true
		VM_Builder.JustDefineInstructions
		instruction.InstructionInit
		ASMType.InitAccess
		Instruction[asm.KNSR].Const
		Instruction[asm.KNST].Const
		asm.encoders[asm.KNST] = fatasm.KNST_Encoder
		asm.encoders[asm.noop] = fatasm.NOOP_Encoder
		return 
		TextAssembler.Requests		?= dictionary()
		TextAssembler.RequestTable	?= array()
	
	
	function InitAndStartFunc (|scfunction| fn) // init 
		// can't we just zero the entire thing?
		opt norefcounts
		
		target debug
			asm.noisyasm = 3

		|| j = jsm
		.end = j.NeedSpare(256K, j.Size)
		.start = j.ptr
		._curr = .start + j.Length
		
		// after zeroing, we could just set everything normally? It seems ._curr is set from the jsm.
		HoistSpace.Length = 0
		
		.out = fn
		.state.fn = fn
		SCFunction.CurrFunc = fn
		.state.Return = nil
		.StackSize = 0
		.state.inlinedepth = 0
		.state.BranchDepth = 0
		.TailInlineable = true
		.InlineDepthLimit = 3
		.BasicBlock = 0
		.VDecls = 0
		.IsTextual = false
		.VTemps = 32
		.NeedsRework = false
		.zero = nil
		.zero.info = AsmReg()
//		.vars = nil // C++ doesn't get right code... should be memory.fill
		memory.Fill((&.vars[0])|&byte|, 64*8, 0)

		.Guard
		fn.StartASM
		.LastDebug = .curr
		.InlineEnd = nil
		.hoistmap = nil
		.FuncStart = .curr
		.ReturnASM = fn.ASMReturn.regtype
		.AddFuncParams(fn)


	function CapASM
		.out.µlength = .length
		jsm!.length = .curr - .start 

		
	function FinishASM 
		opt norefcounts
		if .zero.Const // what?
		|| l = .last
		if !l.IsFinisher
			debugger !.fn.ASMReturn
			.DeallocStack
			if !ASMType.ReturnOpt(self, 0, 0)
				.fn.Source!.DeepLast.RET()
		.Optimise


	function Guard
		opt norefcounts
		|| A = asmreg()										// GUARD
		|| arg = .fn.SourceArg!
		target debug
			if arg.position < 0
				arg.position = 0 // skip error detection
		Arg.EROR(A,A,A,A,0)

	
	function SmartSecretFat (|asmreg| Thg, |&fatasm|)
		|| F = thg.fat
			return F
		
		|| Where = .last
		|| Start = .FuncStart
		|| reg = thg.reg
		while  where >= start
			require where.BasicBlock == .BasicBlock
			|| X = where.SmartFatness(reg)
			require !X.KnownFalse
			if X.knowntrue
				return where
			// now what?
			Where--


/* The .asint/.asfloat functions should be recognised as working on constants? Or is that just a general case of inline functions? Technically, its an inline func that does nothing, just returns the original... with a different type. */

	function IsASMConst (|message| exp, |bool|)
		|| fn = exp.func
		if fn == @num
			return true
		if fn == @thg // now what?
			return ASMType.ThgSub(self, exp, ASMReg.ConstRequest)
	
	
	function CanReuseParam (|message| Prms, |scdecl| A, |asmreg| v, |bool|)
		opt norefcounts
		
		// we could also allow it... if we are the last expr in the function
		// what about returns?
		// || x = func(a,b,c)
		// return x
		// ok... as long as the next one DOESN'T return V. So returning 0, or anything else, is OK.

		// OPT THIS LATER! OPTS ARE FUN! DONT DEPREIVE UR FUTURE SELF OF FUN!
		
		// WHY STRESS NOW JUST TO HAVE LESS FUN LATER!
		

		if  a is reference  or  a isnt altered
			return true

		|| vr = v.reg
		require vr
		require (.state.return.reg == vr)

		for p.fast in prms
			// check for the address of the same var?
			if .ExistingVar(p).reg == vr
				require !rz
				rz = true
	
	
	function TryInline (|message| prms, |asmreg| dest, |scfunction| fn, |int| AllowedGain, |asmreg|)
		opt norefcounts
		|| Start = .curr
		|| OV = .OpenVars
		
		|inlineblock| Old = .State			// can't use implicit types for barestructs
		if !dest.reg and fn.ASMReturn
			if dest isnt discard
				Dest = .TempOnly(prms, dest)
		
		if dest isnt ExitFunction
			.TailInlineable = false
		  elseif .state.InlineDepth == 0
			.TailInlineable = true
		
		|int| D = ++.state.InlineDepth
		.DeepestInline = D max .DeepestInline
		
		dest = dest.simplify
		dest.µtype = fn.ASMRegType
		.state.fn = fn
		.state.Return = dest
		.state.ParentVDecls = .VDecls
		.state.BranchDepth = 0
		
		|fatrange| LL
		rz = .TryInlineSub(prms, fn, AllowedGain, LL)
		.state = old
		if .state.InlineDepth == 0
			.InlineEnd = nil
		if !rz
			.NopRange(start, .curr) // rewind
		.CloseVars(OV)

	
	function TryInlineSub (|Message| prms, |SCFunction| fn, |int| AllowedGain, |fatrange| LL, |asmreg|)
		opt norefcounts
		LL.Start = .curr
		|| POld = .InlineParameters(prms, fn.LinkDepth==1)
		|| RealStart = .curr		// Params need to be done anyhow... so don't count them.
		.GenASMSub(fn)
		.RestoreParameters(POld)
		ll.after = .curr
		|| Result = .InlineFinishWithConsts(ll)
		|| Grown = .CurrGain(RealStart)
		if Grown <= AllowedGain
			if !result
				(result is ConstOutput) // no longer zero
			return Result
	
	
	function UpdateInlineReg (|message| prms, |asmreg| V, |scdecl| D, |asmreg|)
		if v is constoutput and d isnt Altered
			(d is const)

		|| T = D.WholeType

		if v.isbig != t.isbig
/			|| tmp = .TempTyped(prms, t.µType|asmreg|)
			v = ASMType.TypeCastSub(self, prms, tmp, v)			// Convert.
		
		v.TmpCheck
		D.AsmReg = v											// update reg!
		return v


	function InlineVar (|message| prms, |message| m, |scdecl| a, |asmreg|)
		opt	norefcounts
	
		m = m.ASMUnbra
		|| fn = m.Func
		require fn == @thg
		|| d = m.ASMDecl

		require d is local
		|| v = .LocalThg(d)
		if v and .CanReuseParam(prms, a, v)
			// what about if a gets altered... and then used?
			// like in some nested opt inline thing?
			(a is reference) = (d is reference)
			(a is const) = (d is const)
			return v	
	
	
	function InlineParameters (|message| prms, |bool| IsLeaf, |uint64|)
		opt norefcounts
		|| p = prms.first!
		
		if "HighestMatch".trap
			// what about passing a byte to a param taking an int?
			// depends? like if it comes from a read, its already correct.
			// our system assumes 32/64 bit correctness.
			// So... passing 32 to a 64 isnt correct, but otherwise it should be?
		
		for (a in .fn.Args) (i)
			rz |= a.CollectASMReg << (i<<3)
			|| v = .InlineVar(prms, p, a)
			if v
				0
			  elseif IsLeaf and (a isnt altered)
				v = .µGetASM(p, v)		// then we don't care if its a temp
			  else
				v = .DeclareMe(a.source, a)
				v = .µInto(p, v)
			
			v = .UpdateInlineReg(prms, V, a)
			.MarkDeclAsConst(a, V, nil)
			p = p.next!
	

	function RestoreParameters (|uint64| Old)
		opt norefcounts
		for a.backwards in .fn.Args
			a.RestoreASM(old)
			old >>= 8
			.MarkDeclAsConst(a, nil, nil) // parameters can never be const anyhow
			a.fatconstindex = 0
			
	
	function SCDecl.CollectASMReg (|uint64|)
		if self isnt param // hmm?
		rz = .wholetype.reg
		rz |= (self is const) << 5
		rz |= (self is reference) << 6
	

	function scdecl.RestoreASM (|uint64| PP)
		.WholeType = .WholeType.reg(PP&31)
		(self is const) = (PP>>5)&1
		(self is reference) = (PP>>6)&1

	
	
	function CurrGain (|&fatasm| Start, |int|)
		|| C = .curr
		while Start < C
			rz += start.exists
			start++ 
			

	function AskForInline (|Message| prms, |ASMReg| dest, |SCFunction| fn, |ASMReg|)
		opt norefcounts
		require .state.InlineDepth < .InlineDepthLimit
		|| N = fn.µlength
		require N and !fn.HasCVersion

		|| MaxEnd = .inlineend
			|| SubInline = .curr + (N / 3)
			require SubInline < maxend

		|| AllowedGain = 5 + (fn is inline) * 23		// assume that functions have 5 instruction overhead.
		|| Grace = 9
		AllowedGain -= .State.inlinedepth
		
		for p.fast in prms
			Grace += .IsASMConst(p)<<2
	
		require (AllowedGain + Grace) > fn.µlength

		if !.state.InlineDepth
			.InlineDepthLimit = 3
			.DeepestInline = 0
			.InlineEnd = .curr + AllowedGain
		
		|| I = .TryInline(prms, dest, fn, AllowedGain)
			return I
		
		// try weaker inline
		require !.state.InlineDepth and .DeepestInline > 1

		.InlineDepthLimit = 1
		return .TryInline(prms, dest, fn, AllowedGain)


	iterator
		|| h = .hoistmap
		while h
			|| h2 = h.LowestBit
			yield .KnownValues[h2|int|.log2]!
			h &= ~h2
	
	
	
	
function SCFunction.HasCVersion (|bool|)
	if .IsLibrary
		return true
	require self is wrapper

	if .IsCppInBuilt == 1	// cpp_inbuilt. These normally have no address? but perhaps we made a wrapper for it in the exec? we should check if it still exists.
		debugat
		return true

	if .IsCppInBuilt == 2	// cpp_nothing: cpp_spd might sound better?
		debugat
		return false // need to be replaced with ASM intrinsics.

	if self Is ExternalLib	// cpp_libwrapper ?   // Speedie_Main in perry, counts as one!
		debugat
		return false  // i think only perry used this and only in debug mode within Xcode

	return true



function Assembler.RegClear (|message| exp, |&fatasm| C, |int| i)
	c.prms[5] = 0
	|| L = c.Const
	|| signed = L < 0
		L = -L
	exp.BFLG(i.asm, i.asm, L, L, signed|int|)


function Assembler.RegsBitClear (|message| exp, |&fatasm| Start)
	opt norefcounts
	|| c = .Last-1
	while C >= Start
		if (c isa asm.GRAB)
			|| id = c.Prms[5]
			if id == .CurrFuncGrab
				.RegClear(exp, c, c.reg(0))
		c--


function @ASMType.ASMFunction (fn_asm) // dofunction function
	opt norefcounts
	|| prms = exp.last!
	|| TableID = 0
	|| fn = prms.AsFunc
		|| MiniDest = .AskForInline(prms, dest, fn)
			return MiniDest
	  else
		|| f = exp.first!
		TableID = .µ(f).Reg
		|| dcl = f.ASMDecl
		// need to execute exp.first
/		fn = dcl.Type.FuncProto			#expect (exp)

	dest = .CallFunc(exp, dest, fn)
	if !fn.ASMReturn
		(dest is constoutput)
	
	|| Start = .curr
	++.CurrFuncGrab
	|| Closer = .OpenVars
//	.declprint
	|| P = .PrmCollect(prms, fn)
//	.declprint
	.CloseVars(Closer)
	
	if !TableID
		tableid = fn.tableid ?? 0xFFFF // 0xffff means unknown?
		TableID += 31
	|| PExt = P >> 32
	|| fat = prms.FNC(dest, TableID, P,  PExt) // prms.fncx
	if fn.HasCVersion
		fat._op = asm.FNCX
	fat._op += PExt > 0
	.RegsBitClear(exp, Start)
	
	if 0: prms.FNC3, prms.FNCX, prms.FNCX3 // MARK USED

	
	fat.µRefCount += fn isnt stateless
	if fn is Killer // return just to be safe
		fat = exp.RET()
		fat.µRefCount++
		dest = asmreg.exit
	
	.CurrFuncGrab--
	return fat*dest
		


target debug
	|| ASMTrapper = 0
// Speedie's function histogram:  0:410, 1:1656, 2:1464, 3:713, 4:167, 5:61, 6:10, 7:4, 8:0
// There are only 4 above 6!, only 14 above 5, 75 above 4
// almost all lib functions have 4 or less. 5 is for proj funcs.
	

	

function Assembler.GenASMSub (|scfunction| fn)
	opt norefcounts
	|SC_Hoister| H 
	|| a = fn.SourceArg!
	asmtype.ArgSub(Assembler.Sh, A, H)


function Assembler.Rework (|SCFunction| fn,  |bool|)
	HoistSpace.NeedSpare(.Length)
	HoistSpace.CopyFrom(.FuncStart, .Length)
	.Orig = .FuncStart
	.InitAndStartFunc(fn)
	.GenASMSub(fn)
	.FinishASM
	.Orig = nil


function Assembler.GenerateASM (|scfunction| fn,  |bool|) // AsmGenerate
	opt norefcounts
	
	.InitAndStartFunc(fn)
	.GenASMSub(fn)
	.FinishASM
	if .NeedsRework
		.Rework(fn)
	.CapASM

	if StdErr.ok
		target debug
			fn.µprint(++CountASMFuncPrint)
		return true


|| CountASMFuncPrint = 0

