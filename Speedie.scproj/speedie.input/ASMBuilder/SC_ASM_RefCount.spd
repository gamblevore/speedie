

extend asmstate
	function InlineOffsetOpt (|asmreg| base, |int| pow2, |&int| index, |uint| maximum, |asmreg|)
		if base is temp
			|| bs = base.fat
			if bs isa asm.ADDK
				|uint| CC = bs.prms[2]
				|uint| CC2 = CC >> pow2
				if (CC2 <= maximum) and (CC2<<pow2 == CC)
					index[] += CC2
					|| R = bs.prms[1]
					base.reg = R
					(base is temp) = (R >> 31)
					base.fatindex = 0
					.nop(bs)
		return base


	function RefCountSub (|message| exp, |message| prms, |scfunction| fn, |&FatASM|)	// JB_SetRef(a, b)
		opt	NoRefCounts
		if fn == compiler.RefClear
			|| offset = 0
			|| A = .µ(prms.first!, ASMReg.AddrRequest)
			A = .InlineOffsetOpt(A, 3, &offset, 13~bits)
			return exp.RFWR(A, nil, 1, offset)						// reg to mem

		if fn == Compiler.RefSetRef
			|| Out = .µGetASM(prms.first!, ASMReg.AddrRequest)
			|| From = .µ(prms.second!, ASMReg.AddrRequest)
			if out.reg == from.reg
				return exp.noop // wat?
			
			|| offset = 0
			if Out isnt ContainsAddr
				if From is ContainsAddr
					from = .InlineOffsetOpt(from, 3, &offset, 13~bits)
					return exp.RFRD(Out, From, 1, offset)			// mem to reg
				return exp.RFST(Out, From)							// reg to reg
			
			if  From is ContainsAddr
				|| P = prms.second!
				|| where = .Temponly(P)
				where.µtype = datatypecode._voidptr
				From = .Read(where, P, From, nil) * where			// (mem to reg)?

			out = .InlineOffsetOpt(Out, 3, offset, 13~bits)
			return exp.RFWR(Out, From, 1, offset)					// reg to mem


		if fn == Compiler.RefIncr2
			|| A = .µ(prms.first!, asmreg.AddrRequest)
			target debug: if a isnt ContainsAddr					// always memory
			|| offset = 0
			A = .InlineOffsetOpt(A, 3, offset, 13~bits)
			|| B = .µ(prms.second!)
			target debug: if b is ContainsAddr						// always reg
			return exp.RFWR(a, b, 0, offset)
		  else
			|| A = .µ(prms.first!)
			target debug: if A is ContainsAddr						// always a reg!

			if fn == Compiler.RefIncr
				|| P = .last(asm.gstr)
					if (p.r0 samereg a.reg) and p.r1 == 0
						p.r1 = 1
						return p
				return exp.rfst(asmreg(), a)

			if fn == Compiler.RefDecr
				|| P = .last
				#! what
				if (p isa asm.rfst)
					if (p.r1 samereg a.reg) and (p.r0 == 0)
						p._op = asm.RFAP
						p.r0 = p.prms[1]
						p.r1 = 0
						return p
				  elseif (p isa asm.gstr)
					if p.r0 samereg a.reg and p.r1 == 1
						return nil
				return exp.RFST(a, asmreg())
	
			if fn == Compiler.RefSafeDecr
				return exp.RFAP(asmreg(), a, asmreg())
	
		debugger 
		return exp.EROR(asmreg(), asmreg(), asmreg(), asmreg(), 0)


	function RefCount (fn_asm)	// JB_SetRef(a, b)
		opt norefcounts
		|| prms = exp.last!
		|| fn = prms.obj|SCFunction|!
		if fn != Compiler.RefFreeIfDead
			|| fat = .RefCountSub(exp, prms, fn)
				return fat * asmreg()
			return nil
		|| A = .µ(prms.first!)

		#! Disallow: if obj.X(),   when obj.X() is a disowner
		#! Then we will never freeifdead within if-branch or other tests.
		#! needs understanding of disowners!
		
		exp.RFAP(A, asmreg(), asmreg())
		return a


function ASMState.Decr (|asmreg|)
	|| fat = .last(asm.rfst)
		|| upon = fat.prms[0]
			if !fat.prms[1] and !fat.prms[2]
				.nop(fat)
				rz.reg = upon


function ASMState.SafeDecr (|asmreg|)
	|| fat = .last(asm.rfap)
		|| upon = fat.prms[1]
		if upon and !fat.prms[0] and !fat.prms[2]
			.nop(fat)
			rz.reg = upon
	


class RefTest
	|string| s
	Constructor
		visible
		.s = "4"

