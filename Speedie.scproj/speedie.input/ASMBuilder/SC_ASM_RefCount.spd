


extend_module ASMType
	function RefCountSub (fn_fatasm)	// JB_SetRef(a,b)
		opt	NoRefCounts
		debugger 
		|| prms = exp.last
		|| fn = prms.obj|SCFunction|!
		|| A = .µ(prms.first!, dest)

		|| offset = 0
		if fn == Compiler.RefIncr
			target debug: if A is ContainsAddr				// always a reg!
			return exp.RFRG(a, a, 8)

		if fn == Compiler.RefDecr
			if a is ContainsAddr // do we need addrrequest?
				return exp.RFDC(a, 1, offset)				// SHOULD do decrmulti in destructors/carrays.
			return exp.RFRG(a, a, 6)						// (but refcounter doesnt do it yet)

		if fn == Compiler.RefSafeDecr
			target debug: if a is ContainsAddr				// always a reg!
			return exp.RFRG(a, a, 4)

		if fn == Compiler.RefFreeIfDead
			target debug: if a is ContainsAddr				// always a reg!
			return exp.RFRG(a, a, 2)

		if fn == Compiler.RefIncr2
			|| B = .µ(prms.second!)
			target debug: if a isnt ContainsAddr			// always memory
			target debug: if b is ContainsAddr				// always reg
			return exp.RFWR(a, b, 0, offset)

		if fn == Compiler.RefClear
			target debug: if a isnt ContainsAddr			// always an addr
			return exp.RFWR(A, ASMReg(), offset, 1)			// set mem to nil

		if fn == Compiler.RefDecrMulti						// seems unused
			|| BD = prms.second!.asmdecl
			target debug: if a isnt ContainsAddr			// always memory
			target debug: if bd isnt const					// always const!!
			return exp.RFDC(a, bd.ExportPosition, offset)
		
		if fn == Compiler.RefSetRef							// full refcounts
			|| second = prms.second!
			|| B = .µ(second, asmreg.AddrRequest)
			if a is ContainsAddr
				if b is ContainsAddr
					|| where = .TempTyped(second)
					b = where.Read(exp, b) * where			// mem to reg (only)
				return exp.RFWR(A, B, 1, offset)			// reg to mem (full refcount)

			if b is ContainsAddr							// mem to reg
				return exp.RFRD(a, b, 1, offset)

			return exp.RFRG(a, a, 15)						// reg to reg



	function RefCount (fn_asm)	// JB_SetRef(a,b)
		return RefCountSub(self, exp, dest)! * dest



class RefTest
	|string| s
	Constructor
		visible
		.s = "4"

