

function RefCountTest (|message| msg)
	visible
	|| x = msg.name
	x = x
	x = msg.name
/*		-->
	JB_String* X = Msg->Name;
	JB_Incr(X);
	JB_SetRef(X, Msg->Name);
	JB_Decr(X);
*/


extend asmstate
	function InlineOffset (|asmreg| base, |int| pow2, |&int| index, |int| maximum=1GB, |asmreg|)
		if base is temp and containsaddr
			|| bs = base.fat
			if bs isa asm.addk
				|| CC = bs.r[2]
				|| CC2 = CC >> pow2
				if (CC2 <= maximum) and (CC2>>pow2 == CC)
					.nop(bs)
					index[] += CC2
					|| R = bs.r[1]
					base.reg = R
					(base is temp) = (R >> 31)
		return base


	function RefCountSub (fn_fatasm)	// JB_SetRef(a,b)
		opt	NoRefCounts
		|| prms = exp.last!
		|| fn = prms.obj|SCFunction|!
			
		if fn == compiler.refclear
			|| offset = 0
			|| A = .µ(prms.first!, asmreg.AddrRequest)
			return exp.RFWR(A, nil, 1, offset)						// reg to mem

		if fn == Compiler.RefSetRef
			|| Out = .µ(prms.first!, asmreg.AddrRequest)
			|| From = .µ(prms.second!, asmreg.AddrRequest)
			if out.reg == from.reg
/				return exp.noop // wat?
			
			|| offset = 0
			if Out isnt ContainsAddr
				if From is ContainsAddr
					from = .InlineOffset(from, 3, offset)
					return exp.RFRD(Out, From, 1, offset)			// mem to reg
				return exp.RFST(Out, From, nil)						// reg to reg

			if  From is ContainsAddr
				|| where = .TempTyped(prms)
				From = .Read(where, exp, From, nil) * where			// (mem to reg)?
			from = .InlineOffset(Out, 3, offset)
			return exp.RFWR(Out, From, 1, offset)					// reg to mem


		if fn == Compiler.RefIncr2
			|| A = .µ(prms.first!, asmreg.addrrequest)
			|| offset = 0
			A = .InlineOffset(A, 3, offset)
			|| B = .µ(prms.second!)
			target debug: if a isnt ContainsAddr					// always memory
			target debug: if b is ContainsAddr						// always reg
			return exp.RFWR(a, b, 0, offset)
		  else
			|| A = .µ(prms.first!)
			target debug: if A is ContainsAddr						// always a reg!

			if fn == Compiler.RefIncr
				return exp.RFST(asmreg(), a, asmreg())

			if fn == Compiler.RefDecr
				return exp.RFST(a, asmreg(), asmreg())
	
			if fn == Compiler.RefSafeDecr
				return exp.RFST(a, a, asmreg())

			if fn == Compiler.RefFreeIfDead
				return exp.RFST(asmreg(), asmreg(), a)
	
		debugger 
		return exp.EROR(asmreg(), asmreg(), asmreg(), asmreg(), 0)



	function RefCount (fn_asm)	// JB_SetRef(a,b)
		return .RefCountSub(exp, dest) * asmreg()



function asmstate.Decr (|bool| SafeDecr=false, |asmreg|)
	|| fat = .last(asm.rfst)
		|| out = fat.out&31
			|| In = fat.a&31
			|| against = (out, nil)(SafeDecr)
			if in == against
				.nop(fat)
				rz.reg = out


function ASMState.SafeDecr (|asmreg|)
	return .decr(true)
	


class RefTest
	|string| s
	Constructor
		visible
		.s = "4"

