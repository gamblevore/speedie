


function message.ExpandBits (|asmreg| Src, |Datatypecode| Type,  |asmreg|)
	|| sh = ASMState.sh
	|| closer = sh.OpenVars
	|| Where = sh.TempOnly(self, Type|asmreg|)
	|| dest = .BFLG(where, Src, 32, 32, Src.Signed|int|) * Where
	return sh.CloseVars(Closer, dest)
	
	
function message.ADD_ (|ASMReg| dest, |ASMReg| L, |ASMReg| R, |int| Sh, |&fatasm|)
	if dest.IsVec							// Extra bits get clipped if we do:    ivec4 + big
		if l is Alternate
			return .QSUB(dest, l, r, sh)
		return .QADD(dest, l, r, sh)
			
	|| BigLast = R.IsBig
	if L.IsBig != BigLast
		if  BigLast  and  (sh == 0  and  l isnt Alternate)
			swap (L) (R)				    // r1 = small + big --> r1 = big + small
			BigLast = false
		if !BigLast							// r1 = big + small << sh
			if l isnt Alternate
				return .ADDM(dest, L, R, sh)
			return .SUBM(dest, L, R, sh)
/		l = .ExpandBits(L, r.Âµtype)
	
	if L isnt Alternate
		return .ADD(dest, L, R, sh)
	return .SUB(dest, L, R, sh)		



function asmstate.MUL_ (|ASMReg| dest, |ASMReg| A, |ASMReg| B, |asmreg| Add, |message| exp, |&fatasm|)
	|| A2 = .SmallToBig(A, B, exp)
	|| B2 = .SmallToBig(B, A, exp)
	return exp.MUL(Dest, A, B, add)


