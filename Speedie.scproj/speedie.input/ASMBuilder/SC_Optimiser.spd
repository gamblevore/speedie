

/*
* BFLS, BFLG
* functions: tail, fncx
* (addr+=n), cntc(addr, 0) --> cntc(addr, n)
* Glob = glob + 1-127 // --> cntc
* flowcontrol
	* LUPU/LUPD
	* if x: return true/false --> conditional return 
* a*b + c --> MUL
* a*k1 + b*k2 -> FEXK
*/


function SpdAssembler.Optimise (|scfunction| fn, |bool|)
	|| ASM = fn.ASM$
	|| Curr = ASM.IR
	|| length = ASM.length
	if curr[-1].op or curr[length-1].op // bad

	for i in length
		Curr.TryOpt()
		

function FatASM.TryOpt
	// Now optimise! :D
	// how to make sure that we don't mess up a jump?
	// if something jumps into a thing...
	// we need to organise these into blocks... so we don't optimise math across blocks.
	// what about something like this?
	// if x: return true/false. Thats legit not the same block! Well it is a dependant block
	// so we need a way to see what block depends on what?
	
