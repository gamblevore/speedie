	

extend ASMState {

// abc(), if (x) return, def()   -->   abc(), if !x {def()}, return
function If				(fn_asm)
	opt norefcounts
	
	|| cond = exp.first!,  || arg1 = cond.next!
	|| Else = arg1.next!,  || arg2 = else.first
	|message| ElseIfCond
	if arg2 and arg2 != @arg
		ElseIfCond = arg2
		arg2 = arg2.next
	
	|| Flip = !arg1.HasAsmStuff
		if ElseIfCond		// if (x) {} elseif (y) {yy} else {zz} --> if (!x) {if (y) {yy} else {zz}}
			arg1 = ElseIfCond
		  elseif arg2		// if (x) {} else {y()}                --> if (!x) {y()}...
			arg1 = arg2
		  else				// if (X) --> {x} // with discard
			return .µ(cond, asmreg.arg)
		ElseIfCond = nil
		arg2 = nil

	|| B = .BranchConstAware(cond, Flip)
	if !b.Constness.KnownFalse
		ASMType.arg(self, arg1)
		B.jumpto(.curr)
		
	if !b.constness.KnownTrue and (ElseIfCond or arg2.HasAny)
		|| AfterFirst = (arg1.jump(0), nil)(!b.constness.knownfalse) // skip second branch, cos first branch ran
		if ElseIfCond
			.IF(ElseIfCond, asmreg())
		  else
			ASMType.ARG(self, arg2)
		if afterfirst
			AfterFirst.jumpto = .curr
	return asmreg()


function While			(fn_asm)
	opt norefcounts
	|| BEGIN = exp.JUMP(0)							// jump to end... THEN EMIT arg and jump back.
	ASMType.arg(self, exp.second)					// arg

	|| CONTINUE = .Curr
	BEGIN.jumpto = CONTINUE
	|| GOBACK = .BranchSub(exp.first!)
	|| EXIT = .Curr
	GOBACK.jumpto(BEGIN+1)
	|| C = BEGIN

	while C < CONTINUE
		#!ClearExits
		|| op = C.Op
		if op >= kContinue
			C.op = ASM.Jump
			if op == kContinue // continue
				C.JumpTo = CONTINUE
			  else       // exit
				C.JumpTo = EXIT
		C++
	
	return asmreg()


function Exit			(fn_asm)
	opt norefcounts
	self <~ (kexit, exp)											// request jump fwd


function Continue		(fn_asm)
	opt norefcounts
	self <~ (kcontinue, exp)										// request jump fwd a little less


function Ternary		(fn_asm)
	opt norefcounts
	
	|| prms = exp.second
	|| cond = prms.first!
	|| A = cond.next!
	|| B = A.next!
	
	|| DestType = exp.ASMDecl.typeonly
	|| mA = .ExistingVar(a)
	|| mB = .ExistingVar(b)
	if (ma isa DestType) and (mb isa DestType) and !DestType.isfloat
		return .SimpleTernary(dest, ma, mb, cond)

	dest = .TempTyped(exp, dest)
	|| FirstOK = .BranchConstAware(cond)
	|| KK = FirstOK.Constness
	if KK.IsKnown
		#! what about nopping? or does the branch nop?
/		|| which = (A,B)(KK.Default)
		return .µInto(which, dest)
	.µInto(A, dest)
	|| Exit = exp.jump(0)

	FirstOK.jumpto(.curr)

	rz = .µInto(B, dest)
	Exit.r[3] = .curr - Exit


function SimpleTernary (|asmreg| dest, |asmreg| ma, |asmreg| mb, |message| cond, |asmreg|)
	opt norefcounts
	|| dr = dest.reg
	|| mc = (asmreg(), dest)(dr == ma.reg or mb.reg)
	|| µ = .µ(cond, mc)
	return cond.TERN(dest, µ, ma, mb) * dest


function BranchConstAware (|message| cond,  |bool| neg=false, |fatrange|)
	return .Branchsub(cond, neg, true)


function BranchSub (|message| cond,  |bool| neg=false, |bool| CanConst=false, |fatrange|)
	|| mode = asmreg.CondRequest.Negate(neg)
	rz.start = .curr
	|| answer = .µ(cond, mode)
		
	if answer isnt CondAnswer
		(canconst)
//		if (answer is constany) and canconst // deal with these const stuff later.
		answer = .exists(mode, answer, cond)
	rz.after = .curr
	// boolean logic is very awkward


helper ASMBoolShrink (|message| exp,  |ASMReg| Dest,  |ASMReg| ml,  |ASMReg|)
	if (ml.isbool) and (dest isnt negate) and (dest isnt condrequest)
/		return ml.boolanswer								// x = a or a   -->  x = a
	/return .Exists(dest, ml, exp)							// if  a or a   -->  if a


helper BoolFromBools (|message| exp, |ASMReg| Dest, |opmode| opp, |ASMReg| ml, |ASMReg| mr, |ASMReg|)
	// handles:  a = a and b,  a = a or b
	dest = .TempTyped(exp, dest)
	|| fat = exp.BAND(dest, ml, mr, 0)
	fat.op += opp is OR
	if (dest is negate)
		.BitNot(dest, dest, asmreg(), exp)
		(dest is AlreadyNegated)
	return fat * dest


function asmreg.IsBoolV (|bool|)
	return self.IsBool and (self isnt constany)


helper ASMBoolBadnessMadness (|message| exp,  |ASMReg| Dest,  |opmode| Opp,  |ASMReg|)
	opt norefcounts // 😵‍💫 // 😵‍💫 // 😵‍💫 // 😵‍💫 	// deal with consts later!!! :O
	debugat 0
	dest.µtype = datatypecode.bool
	
	|| A = exp.first!
	|| B = exp.last!
	|| ml = .ExistingVar(A)
	|| mr = .ExistingVar(B)
	
	if ml and ml.reg == mr.reg
		return .ASMBoolShrink(exp, dest, ml)

	if dest is negate
		(opp xor= OpMode.AndOr)								//  !(a and b)  -->  !a or !b
	
	if dest is CondRequest									// 😢 😿 😢 😿 😢 😿 😢 😿 SADNESS!!
		if OPP is OR
			return .BranchOr(A, B, dest)
		return .BranchAnd(A, B, Dest)

	if ml.isboolV and mr.isboolV
		return .BoolFromBools(exp, dest, opp, ml, mr)			// No consts via .existingvar		

	if "AndOrRest".trap
		.lastprogress = .curr
	rz = .BoolValue(A, dest, opp, b)
	if "AndOrRest".trap
		.printprogress(exp)
		debugger
	

function message.FoundReg (|int| R, |bool|)
	opt norefcounts
	for s.flat in self
		if s == @thg
			|| sr = s.asmreg
			if sr == r
				return true


function Unchanged (|message| A, |asmreg| dest, |message| B, |bool|)
	|| Dr = dest.reg
	return !a.foundreg(dr) or !b.foundreg(dr)


function UniqueLocation (|message| A, |asmreg| dest, |message| B, |asmreg|)
	if (dest is NotYetUsed) or .Unchanged(A, dest, B)
		return dest
	rz = .temponly(A)
	(rz is negate) = (Dest is negate)
	rz.µtype = dest.µtype	


function ExistingBool (|message| A, |ASMReg| Dest, |ASMReg|)
	|| ml = .ExistingVar(A)
	if ml.isbool and (dest.reg == ml.reg)
		(ml is negate) = (dest is negate)
		return ml
	

function BoolTestAndJump (|message| exp, |asmreg| req, |opmode| opp, |&fatasm|)
	|| mode = ASMReg.CondRequest.negate(opp is OR)
	return .Exists(mode, req, exp).fat!


function BoolValue (|message| A, |ASMReg| Dest, |opmode| Opp, |message| B, |ASMReg|)
	opt norefcounts
	dest = .UniqueLocation(a, dest, B)
	|| first = .µBoolInto(A, dest)

	if first is ConstAny
		return .BoolConst1(b, dest, opp, first)					// x = 5 or Y() --> x = Y()
	
	|| JUMP = .BoolTestAndJump(a.next!, dest, opp)				// AND/OR
	|| Second = .µBoolInto(B, dest)
	if Second is ConstAny
		.NOP(jump)
		return .BoolConst2(opp, first, Second)

	JUMP.JumpTo = .curr
	
	if first.IsBool and Second.IsBool
		return dest

	return .Exists(dest, dest, A.next!)


function PrintProgress (|message| exp)
	opt norefcounts
	"---"
	printline exp.niceparent
	|| Curr = .LastProgress
	while curr < .curr
		curr.debugprint
		curr++
	.LastProgress = curr


function BoolConst1 (|message| B, |asmreg| dest, |opmode| Opp, |asmreg| ml, |asmreg|)
	|| V = (ml.const!=0) != (dest is negate)
	|| expect = opp is OR
	if v == expect
		ml.µtype = datatypecode.bool
		ml.Const = v|int|				// x = 5 or  2	 --> x = true
		return ml						// x = 0 and 2	 --> x = false
	
	.nop(ml)							// x = 0 or y()  --> x = y()
										// x = 7 and y() --> x = y()
	|| mr = .µ(B, dest)
	if mr is ConstAny
		ml.µtype = datatypecode.bool
		mr.const = (mr.const != 0)|int|
		return mr.BoolAnswer
	
	if mr.isbool
		return mr
	return .Exists(dest, mr, B)



function BoolConst2 (|opmode| Opp, |asmreg| ml,  |asmreg| mr, |asmreg|)
	|| V = mr.const!=0
	if v == (opp is AND)
		.nop(mr)
		ml.µtype = datatypecode.bool
		return ml
	
	if ml is FromExistingVar // why not?
		.nop(ml)
	mr.µtype = datatypecode.bool
	mr.const = v|int|
	return mr



function BranchAnd (|message| A, |message| B, |asmreg| dest, |asmreg|)
	|| FirstPart = .BranchConstAware(A, dest is negate)
	|| KK = FirstPart.Constness
	if KK.IsKnown
/		if KK.KnownTrue
/			.nop(firstpart)
			|| tmp = .BranchConstAware(b, dest is negate)
		/ return dest.boolanswer
	
	|| tmp2 = .BranchConstAware(B, dest is negate)
	return dest.BoolAnswer



function BranchOr (|message| A, |message| B, |asmreg| dest, |asmreg|)
	|| FirstPart = .BranchConstAware(A, dest isnt negate)
	|| KK = FirstPart.Constness
	if !KK.KnownTrue
		|| part2 = .BranchConstAware(B, dest is negate)
		FirstPart.jumpto(.curr)	
	  else
/		0
	return dest.BoolAnswer

}



Struct FatRange
	|&FatASM| Start
	|?&FatASM| After
	iterator
		|| curr = .after!
		while (curr > .start)
			curr--
			yield curr
	
	function asmstate.Nop (|!&fatrange| R)
		for s in R
			.nop(s)
	
	function JumpTo (|&fatasm| curr)
		|| any = false
		for s in self
			if s is CondAnswer
				(s isnt CondAnswer)
				s.jumpto = curr
				any = true
		if !any // what?
	
	function Constness (|maybebool|)
		|| a = .After|uint64|
		if a <= 1
			return a|maybebool|
		
