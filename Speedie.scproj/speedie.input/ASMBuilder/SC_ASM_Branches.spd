	

extend ASMState {

// abc(), if (x) return, def()   -->   abc(), if !x {def()}, return
function If				(fn_asm)
	opt norefcounts
	
	|| cond = exp.first!,  || arg1 = cond.next!
	|| Else = arg1.next!,  || arg2 = else.first
	|message| ElseIfCond
	if arg2 and arg2 != @arg
		ElseIfCond = arg2
		arg2 = arg2.next
	
	|| Flip = !arg1.HasAsmStuff
		if ElseIfCond		// if (x) {} elseif (y) {yy} else {zz} --> if (!x) {if (y) {yy} else {zz}}
			arg1 = ElseIfCond
		  elseif arg2		// if (x) {} else {y()}                --> if (!x) {y()}...
			arg1 = arg2
		  else				// if (X) --> {x} // with discard
			return .µ(cond, asmreg.arg)
		ElseIfCond = nil
		arg2 = nil

	|| B = .Branch(cond, Flip)
	rz = ASMType.arg(self, arg1)
	B.fill(.curr)
	
	if ElseIfCond or arg2.HasAny
		|| AfterFirst = arg1.jump(0) // marks as ended... to prevent opts. can be removed later during optimisation
		if ElseIfCond
			|| a = asmreg()
			rz = .IF(ElseIfCond, a)
		  else
			rz = ASMType.ARG(self, arg2)
		AfterFirst.jumpto = .curr


function While			(fn_asm)
	opt norefcounts
	|| BEGIN = exp.JUMP(0)								// jump to end... THEN EMIT arg and jump back.
	ASMType.arg(self, exp.second)						// arg

	|| CONTINUE = .Curr
	BEGIN.jumpto = CONTINUE
	|| GOBACK = .Branch(exp.first!)						// cond
	|| EXIT = .Curr
	GOBACK.Fill(BEGIN+1)
	|| C = BEGIN

	while C < CONTINUE
		#!ClearExits
		|| op = C.Op
		if op >= kContinue
			C.op = ASM.Jump
			if op == kContinue // continue
				C.JumpTo = CONTINUE
			  else       // exit
				C.JumpTo = EXIT
		C++
	


function Exit			(fn_asm)
	opt norefcounts
	self <~ (kexit, exp)											// request jump fwd


function Continue		(fn_asm)
	opt norefcounts
	self <~ (kcontinue, exp)										// request jump fwd a little less


function Ternary		(fn_asm)
	opt norefcounts
	
	|| prms = exp.second
	|| cond = prms.first!
	|| A = cond.next!
	|| B = A.next!
	
	|| destType = exp.ASMDecl.typeonly
	|| mA = .ExistingVar(a)
	|| mB = .ExistingVar(b)
	if (ma isa desttype) and (mb isa desttype)
		// OPT: make it check that both are ints (if dest is int)
		// and bits are equal or less.
		return .SimpleTernary(dest, ma, mb, cond)

	dest = .TempTyped(exp, dest)
	|| FailToSecond = .Branch(cond)
	.µInto(A, dest)
	|| Exit = exp.jump(0)

	FailToSecond.fill(.curr)

	rz = .µInto(B, dest)
	Exit.r[3] = .curr - Exit
	


function Branch (|message| cond,  |bool| neg=false,  |fatrange|)
	.branch(cond, ASMReg.negate * neg, rz)


function Branch (|message| cond,  |asmreg| mode,  |&fatrange| range)
	cpp_Part BranchSub
	if range
		range.start = .curr
	(mode as= asmreg.CondRequest)
	|| answer = .µ(cond, mode)
	if answer isnt CondAnswer
		if answer isnt alreadynegated
			mode = mode.flip(asmreg.negate)
		answer = .equals(mode, asmreg(), answer, cond)
	if range
		range.after = .curr
	
	// if a or b
		// c
	// if TRUE1                --> jump after (b)
	// if false1 and FALSE2    --> leave to owner, on reverse condition

	// if a and b
		// c
	// if false1 --> leave to owner
	// if false2 --> leave to owner


helper DoAndOr (|message| exp,  |ASMReg| Dest,  |opmode| Opp,  |ASMReg|)
	opt norefcounts
	|| A = exp.first!
	|| B = exp.last!
	|| ml = .ExistingVar(A)
	|| mr = .ExistingVar(B)

	|| negate = dest is negate					//  !(a and b) === !a or !b
	if (ml and mr) and !negate
		if ml.reg == mr.reg						// x = a or a --> x = a|bool|
			if ml.µType is bool
				return ml
			return .Equals(dest as asmreg.negate, ml, asmreg(), A)
		if (ml.µtype is bool) and (mr.µType is bool) and (dest isnt CondRequest)
			dest = .TempOnly(exp, dest)
			dest.µType = DataTypeCode.bool
			|| fat = exp.BAND(dest, ml, mr, 0)
			if (opp is or)
				fat.op = asm.BOR
			return fat * dest
	
	if dest isnt CondRequest					// AAARGH
		dest = .NumToReg(exp, 1-negate, dest)
	
	  elseif negate								// simplify logic a little.
		(opp xor= OpMode.AndOr)

	if negate
		(dest isnt negate)
		(dest is alreadynegated)
	
	if OPP is AND // did I get negate correct?
		|| ANDs = .Branch(A, negate)
		return .DoSecondPart(Exp, dest, B, negate).BoolAnswer

	|| Ors = .Branch(A, !negate)
	|| part2 = .DoSecondPart(Exp, dest, B, negate)
	ors.fill(.curr)	
	return part2.BoolAnswer
	


function DoSecondPart (|message| exp,  |ASMReg| Dest,  |message|  B,  |bool| Negate,  |ASMReg|)
	if dest isnt CondRequest
		return .Equals(dest, .µ(b), asmreg(), exp)
	|| tmp = .Branch(B, negate)							// opposite jumpyness
	return dest
	// hmmm?

}




Struct FatRange
	|&FatASM| Start
	|&FatASM| After
	iterator
		|| curr = .start
		while (curr < .after)
			yield curr
			curr++
			
	function Fill (|&fatasm| curr)
		|| any = false
		curr--
		for s in self
			if s is condanswer
				(s isnt condanswer)
				s.jumpto = curr
				any = true
		if !any // what?


