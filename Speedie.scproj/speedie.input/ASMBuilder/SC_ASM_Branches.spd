	

#!"if (x) return, a(), b()   -->   if !x {a(), b()}, return"


extend ASMState {

function ArgOrIf (|message?| other, |asmreg|)
	rz = .ArgOrIfSub(other)
	.BasicBlock++


function ArgOrIfSub (|message?| other, |asmreg|)
	opt norefcounts
	if other
		|| T = other.asmtype
		if T != asmtype.kif
			if other != @arg
				other = other.first
			  else
				debugger
			return ASMType.ARG(self, other)
		return .IF(other, asmreg())
	return asmreg()


function IfEmpty (|message| cond, |message| other, |asmreg|)
	if !other
/		return .µ(cond, asmreg.Discard)							// if (x())    -->   x()
	|fatrange| B
/	.Branch(cond, true, B)
	if b.never
		return ASMReg() // assume SubJumps are sorted out.
	.ArgOrIf(other)
	B.AllJumpTo
	return asmreg()


function If (fn_asm)
	opt norefcounts
	
	|| cond = exp.first!,  || arg1 = cond.next!
	|| Other = arg1.next
	if !arg1.HasAsmStuff
		return .IfEmpty(cond, other)

	|FATRange| B
	.Branch(cond, B)
	if b.never
		return .ArgOrIf(other)

	ASMType.arg(self, arg1)
	if b.always or !other
		B.AllJumpTo
		.BasicBlock++
		return asmreg()						// were done!

	if .curr.op != asm.eror
	B.AllJumpTo // why curr+1?
	|| AfterFirst = arg1.jump(0)
	.ArgOrIf(other)
	AfterFirst.jumpto = .curr
	
	return asmreg()


function LoopFill (|fatasm| C, |fatasm| S, |fatasm| A)
	while C < S
		#!ClearExits
		|| op = C.Op
		if op >= kContinue
			C.op = ASM.Jump
			if op == kContinue			// continue
				C.JumpTo = S
			  else       				// exit
				C.JumpTo = A
		C++


function While (fn_asm)
	opt norefcounts
	|| BEGIN = exp.JUMP(0)							// jump to end... THEN EMIT arg and jump back.
	ASMType.arg(self, exp.second)					// arg

	|fatrange| LOOP_TEST
	|| LT = .Branch(exp.first!, true, loop_test)
	if loop_test.never
/		.Nop(begin, loop_Test.start)
		return asmreg()
	
	BEGIN.jumpto = LOOP_Test.start
	LOOP_TEST.AllJumpTo(BEGIN+1, true)
	.loopfill(begin, LOOP_Test.start, LOOP_Test.After)
	
	return asmreg()


function Exit			(fn_asm)
	opt norefcounts
	self <~ (kexit, exp)											// request jump fwd


function Continue		(fn_asm)
	opt norefcounts
	self <~ (kcontinue, exp)										// request jump fwd a little less


function BackCond (|fatasm| start)
	|| l = .last
	if l >= start
		.nop(l)
		if --l >= start and l is RealConst
			.nop(l)


function Ternary		(fn_asm)
	opt norefcounts
	
	|| prms = exp.second
	|| cond = prms.first!
	|| A = cond.next!
	|| B = A.next!
	
	|| DestType = exp.ASMDecl.typeonly
	|| mA = .ExistingVar(a)
	|| mB = .ExistingVar(b)
	if (ma isa DestType) and (mb isa DestType) and !DestType.isfloat
		return .SimpleTernary(dest, ma, mb, cond)

	dest = .TempTyped(exp, dest)
	|fatrange| TernTest
	|| TT = .Branch(cond, terntest)
	|| KK = TernTest.Constness
	if KK.IsKnown
		|| which = (A, B)(KK.Default)
		rz = .µInto(which, dest)
	  else
		.µInto(A, dest)
		|| Exit = exp.jump(0)
		TernTest.AllJumpTo
		rz = .µInto(B, dest)
		Exit.jumpto = .curr


function SimpleTernary (|asmreg| dest, |asmreg| ma, |asmreg| mb, |message| cond, |asmreg|)
	opt norefcounts
	|| dr = dest.reg
	|| mc = (ASMReg(), dest)(dr == ma.reg or mb.reg)
	|| µ = .µ(cond, mc)
	return cond.TERN(dest, µ, ma, mb) * dest


function Branch (|message| Cond,  |bool| Neg = false,  |fatrange| Range, |asmreg|)
	range.Start = .curr
	|| mode = asmreg.CondRequest.Negate(neg)

	rz = .µ(cond, mode)
	if rz isnt CondAnswer
		rz = .Exists(mode, rz, cond)

	if rz is constoutput
		range.Constness = (rz.const!=0)|maybebool|
		if rz is RealConst
			.BackCond(range.start)
	  else
		range.Constness = maybebool.default(false)
	
	range.after = .curr


helper ASMBoolShrink (|message| exp,  |ASMReg| Dest,  |ASMReg| ml,  |ASMReg|)
	if (ml.IsBool) and (dest isnt Negate) and (dest isnt CondRequest)
		return ml.BoolAnswer								// x = a or a   -->  x = a
	return .Exists(dest, ml, exp)							// if  a or a   -->  if a


helper BoolFromBools (|message| exp, |ASMReg| Dest, |opmode| opp, |ASMReg| ml, |ASMReg| mr, |ASMReg|)
	// handles:  a = a and b,  a = a or b
	dest = .TempTyped(exp, dest)
	if opp is or
		rz = .BitOr(dest, ml, mr, exp)
	  else
		rz = .BitAnd(dest, ml, mr, exp)
	
	if (dest is negate)
		rz = .BitNot(rz, dest, asmreg(), exp)
		(rz is AlreadyNegated)


function asmreg.IsBoolV (|bool|)
	return self.IsBool and (self isnt RealConst)


helper ASMBoolBadnessMadness (|message| exp,  |ASMReg| Dest,  |opmode| Opp,  |ASMReg|)
	opt norefcounts // 😵‍💫 // 😵‍💫 // 😵‍💫 // 😵‍💫
	dest.µtype = datatypecode.bool
	
	|| A = exp.first!
	|| B = exp.last!
	|| ml = .ExistingVar(A)
	|| mr = .ExistingVar(B)
	
	if ml and (ml.reg == mr.reg)
		return .ASMBoolShrink(exp, dest, ml)

	if (dest isnt condrequest) and (ml.isboolV and mr.isboolV) 
		return .BoolFromBools(exp, dest, opp, ml, mr)		// No consts via .existingvar		

	if dest is negate
		(opp xor= OpMode.AndOr)								//  !(a and b)  -->  !a or !b
	
	if dest is CondRequest									// 😢 😿 😢 😿 😢 😿 😢 😿 SADNESS!!
		if OPP is OR
			return .BranchOr(A, B, dest)
		return .BranchAnd(A, B, Dest)

	return .BoolValue(A, dest, opp, b)
	

function FoundReg (|message| A, |int| R, |bool|)
	opt norefcounts
	for s.flat in A
		if s == @thg
			|| sr = .RegOfMsg(s)
			if sr == r
				return true


function Unchanged (|message| A, |asmreg| dest, |message| B, |bool|)
	|| Dr = dest.reg
	return !.foundreg(a,dr) or !.foundreg(b,dr)


function UniqueLocation (|message| A, |asmreg| dest, |message| B, |asmreg|)
	if dest.reg
		if (dest is Declaration) or .Unchanged(A, dest, B)
			return dest
	rz = .temponly(A)
	(rz is negate) = (Dest is negate)
	rz.µtype = dest.µtype	


function BoolTestAndJump (|message| exp, |asmreg| req, |opmode| opp, |&fatasm|)
	|| mode = ASMReg.CondRequest.negate(opp is OR)
	return .Exists(mode, req, exp).fat!


function BoolValue (|message| A, |ASMReg| Dest, |opmode| Opp, |message| B, |ASMReg|)
	opt norefcounts
	dest = .UniqueLocation(a, dest, B)

	|| first = .µBoolInto(A, dest)
	if first is ConstOutput
		return .BoolConst1(b, dest, opp, first).boolanswer			// x = 5 or Y() --> x = Y()
	
	|| JUMP = .BoolTestAndJump(a.next!, dest, opp)					// AND/OR
	|| Second = .µBoolInto(B, dest)
	if Second is ConstOutput
		.NOP(jump) //opp, first, Second, B
		return .BoolConst2(second, dest, opp, b, first).boolanswer

	JUMP.JumpTo = .curr
	
	if first.IsBool and Second.IsBool
		return dest.boolanswer

	return .Exists(dest, dest, A.next!)


function BoolConst1 (|message| B, |asmreg| dest, |opmode| Opp, |asmreg| ml, |asmreg|)
	|| V = (ml.const!=0) != (dest is negate)
	|| expect = opp is OR
	if v == expect
		ml.µtype = datatypecode.bool
		return .SetConst(b, v|int|, ml, dest)
									// x = 5 or  2	 --> x = true
									// x = 0 and 2	 --> x = false
	
	.nop(ml)						// x = 0 or y()  --> x = y()
									// x = 7 and y() --> x = y()
	|| mr = .µ(B, dest)
	if mr is ConstOutput
		mr.µtype = datatypecode.bool
		v = (mr.const!=0) != (dest is negate)
		return .SetConst(b, v|int|, mr, dest)
	
	if mr.isbool
		return mr
	return .Exists(dest, mr, B)


function BoolConst2 (|asmreg| mr, |asmreg| Dest,  |opmode| Opp, |message| exp, |asmreg| ml, |asmreg|)
	|| V = mr.const!=0
	if v == (opp is AND)
		.nop(mr)
		ml.µtype = datatypecode.bool
		return ml
	
	if ml is FromExistingVar // why not?
		.Nop(ml)
	mr.µtype = DataTypeCode.bool
	return .SetConst(exp, v|int|, mr, dest)


function BranchAnd (|message| A, |message| B, |asmreg| dest, |asmreg|)
	|fatrange| AndTest
	|| First = .Branch(A, dest is negate, andtest)
	if AndTest.never
		return first

	|| Second = .Branch(B, dest is negate, AndTest)
	if  first isnt RealConst
		// a and b
		// a and 1
		// a and 0
		return first

	// 1 and 1
	// 1 and 0
	// 1 and b
	return second


function BranchOr (|message| A, |message| B, |asmreg| dest, |asmreg|)
	|FatRange| OrTest
	|| First = .Branch(A, dest isnt negate, OrTest)
	|| KF = OrTest.Constness.negate
	if kf.knowntrue
		|| fake = A.noop
		fake.const = KF|int|
		// 1 or 1
		// 1 or 0
		// 1 or b
		(first is condanswer)
		return fake*first.boolanswer						// only way around this. Cos we got asm-reg(0)

	
	|fatrange| Br2
	|| second = .Branch(B, dest is negate, Br2)
	OrTest.AllJumpTo

	if Br2.always
		// a or 1
		// 0 or 1
		return second

	if kf.knownfalse
		// 0 or 0
		// 0 or b
		return second

	// a or 0
	// a or b
	
	return first

}



Struct FatRange
	|&FatASM|   Start
	|&FatASM|   After
	|maybebool| Constness
	
	function Always (|bool|)
		opt inline
		return .constness.KnownTrue
	
	function Never (|bool|)
		opt inline
		return .constness.KnownFalse
				
	iterator
		|| curr = .after!
		while (curr > .start)
			curr--
			yield curr
	
	function AllJumpTo (|&fatasm| curr = .curr, |bool| Strip = true)
		|| A = asmstate.sh
		for s in self
			if s is CondAnswer
				(s isnt CondAnswer)
				s.jumpto = curr
				if strip and s == Curr - 1
					curr--
					A.nop(s)
					


function @asmstate.PrintProgress (|message| exp=nil)
	target debug {
	cpp_name adb
	opt norefcounts
	"---"
	|| s = ASMState.sh
	printline s.fn
	if exp
		printline exp
	  else
		s.LastProgress = s.funcstart
	|| Curr = s.LastProgress
	while curr < s.curr
		curr.debugprint
		curr++
	s.LastProgress = curr
	}
