	

#!"if (x) return, a(), b()   -->   if !x {a(), b()}, return"


extend ASMState {

function Else (|message?| other, |asmreg|)
	rz = .ElseSub(other)
	.BasicBlock++


function ElseSub (|message?| other, |asmreg|)
	opt norefcounts
	if !other
		return asmreg()
	|| T = other.ASMType
	if T == ASMType.kif
		return .IF(other, asmreg())
	if other != @arg
		other = other.first!
	  else
		debugger
	return ASMType.ARG(self, other)


function If (fn_asm)
	.state.BranchDepth++
	rz = .ifsub(exp, dest, mode)
	.state.BranchDepth--


function IfSub (fn_asm)
	opt norefcounts
	
	|| cond = exp.first!,  || arg1 = cond.next!
	|| Other = arg1.next
	|| IfStart = .curr

	|FATRange| B
	.Branch(cond, B)
	|| ArgStart = .curr
	if b.Never
		return .Else(other)								// ^^^ if k0 {b()} else {return}

	.BasicBlock++
	|| Arg1Return = ASMType.arg(self, arg1)
	if b.always or !other.HasAsmStuff
		.AllJumpTo(b)
		.BasicBlock++
		return Arg1Return * b.always					// ^^^ if k1: return 

	if ArgStart == .curr
/		.NopRange(ifstart, argstart)
		.Branch(cond, b, true)
		
	if .curr.op != asm.eror
	|| AfterFirst = arg1.jump(0)
	.AllJumpTo(b)
	rz = .Else(other) & Arg1Return						// ^^^ if x {return} else {return}
	AfterFirst.jumpto(.curr, asmstate.sh)
	


function LoopFill (|fatasm| C, |fatasm| S, |fatasm| A)
	while C < S
		#!ClearExits
		|| op = C.Op
		if op >= kContinue
			C.setop = ASM.Jump
			if op == kContinue			// continue
				C.JumpTo(S, self)
			  else       				// exit
				C.JumpTo(A, self)
		C++


function While (fn_asm)
	|sc_hoister| H 
	|| OV = .OpenVars
	h.HoistLoop(exp.first!)
	.state.BranchDepth++
	rz = .WhileSub(exp, h)
	.state.BranchDepth--
	.CloseVars(OV)
	h.Unhoist


function WhileSub (|message| exp,  |sc_hoister| H,  |asmreg|)
	opt norefcounts
	|| begin = exp.JUMP(0)												// test goes after loop
	|| Returns = ASMType.argsub(self, exp.second!, H)					// arg

	|FatRange| loop_test
	|| LT = .Branch(exp.first!, loop_test, true)
	if loop_test.never
/		.NopRange(begin, loop_Test.start)
		return ASMReg()
	
	begin.JumpTo(loop_test.start, self)
	.AllJumpTo(loop_test,begin+1)
	.loopfill(begin, loop_test.start, loop_test.After)
	
	return returns * loop_test.Always


function Exit			(fn_asm)
	opt norefcounts
	self <~ (kexit, exp)											// request jump fwd


function Continue		(fn_asm)
	opt norefcounts
	self <~ (kcontinue, exp)										// request jump fwd a little less


function BackCond (|fatasm| start)
	|| l = .last
	if l >= start
		.nop(l)
		if --l >= start and l is RealConst
			.nop(l)


function Ternary		(fn_asm)
	opt norefcounts
	
	|| prms = exp.second
	|| cond = prms.first!
	|| A = cond.next!
	|| B = A.next!
	
	|| DestType = exp.ASMDecl.typeonly
	|| mA = .ExistingVar(a, varusemode.Sometimes)
	|| mB = .ExistingVar(b, varusemode.Sometimes)
	if (ma isa DestType) and (mb isa DestType) and !DestType.isfloat
		return .SimpleTernary(dest, ma, mb, cond)

	dest = .TempTyped(exp, dest)
	|fatrange| TernTest
	|| TT = .Branch(cond, terntest)
	|| KK = TernTest.Constness
	if KK.IsKnown
		|| which = (A, B)(KK.Default)
		rz = .µInto(which, dest)
	  else
		|| µA = .µInto(A, dest)
		|| Exit = exp.jump(0)
		.AllJumpTo(TernTest)
		rz = .µInto(B, dest)
		
		|| fa = µa.fat
		|| fB = rz.fat
			fb.RegInput(5, µa)	// link µA from µB... so now B refers to A.
		  elseif fa				// Filling an unused param. No instruction use it!
/			fa.µRefCount++	//just in case
							
		Exit.jumpto(.curr, self)


function SimpleTernary (|asmreg| dest, |asmreg| ma, |asmreg| mb, |message| cond, |asmreg|)
	opt norefcounts
	|| dr = dest.reg
	|| mc = (ASMReg(), dest)(dr == ma.reg or mb.reg)
	|| µ = .µ(cond, mc)
	return cond.TERN(dest, µ, ma, mb) * dest


function Branch (|message| Cond,  |fatrange| Range,  |bool| Neg = false,  |asmreg|)
	range.Start = .curr
	|| mode = asmreg.CondRequest.Negate(neg)

	rz = .µ(cond, mode)
	if rz isnt CondAnswer
		rz = .Exists(mode, rz, cond)

	if rz is constoutput
		range.Constness = (rz.const!=0)|maybebool|
		if rz is RealConst
			.BackCond(range.start)
	  else
		range.Constness = maybebool.default(false)
	
	range.after = .curr


helper ASMBoolShrink (|message| exp,  |ASMReg| Dest,  |ASMReg| BothSame,  |ASMReg|)
	if bothsame.isbool and (dest isnt Negate)
		if (dest is CondRequest)								// if  a or a   -->  if a
			return BothSame.BoolAnswer							
		return bothsame											// x = a or a   -->  x = a
	return .Exists(dest, BothSame, exp)							// x = int1 or int1


helper BoolFromBools (|message| exp, |ASMReg| Dest, |opmode| opp, |ASMReg| ml, |ASMReg| mr, |ASMReg|)
	// handles:  a = a and b,  a = a or b
	dest = .TempTyped(exp, dest)
	if opp is or
		rz = .BitOr(dest, ml, mr, exp)
	  else
		rz = .BitAnd(dest, ml, mr, exp)
	
	if (dest is negate)
		rz = .BitNot(rz, dest, asmreg(), exp)
		(rz is AlreadyNegated)


function asmreg.IsBoolV (|bool|)
	return self.IsBool and (self isnt RealConst)


helper ASMBoolBadnessMadness (|message| exp,  |ASMReg| Dest,  |opmode| Opp,  |ASMReg|)
	opt norefcounts // 😵‍💫 // 😵‍💫 // 😵‍💫 // 😵‍💫
	dest.µtype = DataTypeCode.bool
	
	|| A = exp.first!
	|| B = exp.last!
	|| ml = .ExistingVar(A, varusemode.Sometimes)
	|| mr = .ExistingVar(B, varusemode.Sometimes)
	
	if ml and (ml.reg == mr.reg)
		return .ASMBoolShrink(exp, dest, ml)

	if (dest isnt condrequest) and (ml.isboolV and mr.isboolV) 
		return .BoolFromBools(exp, dest, opp, ml, mr)		// No consts via .existingvar		

	if dest is negate
		(opp xor= OpMode.AndOr)								//  !(a and b)  -->  !a or !b
	
	if dest is CondRequest									// 😢 😿 😢 😿 😢 😿 😢 😿 SADNESS!!
		if OPP is OR
			return .BranchOr(A, B, dest)
		return .BranchAnd(A, B, Dest)

	return .BoolValue(A, dest, opp, b)
	

function FoundReg (|message| All, |int| R, |bool|)
	opt norefcounts
	for s.flat in All
		if (s == @thg) and !(s in @func)
			|| a = .ASMLocal(s, 0)
			|| sr = a.reg
			if sr == r
				return true


function Unchanged (|message| A, |asmreg| dest, |message| B, |bool|)
	|| Dr = dest.reg
	return !.FoundReg(a,dr) or !.FoundReg(b,dr)


function UniqueLocation (|message| A, |asmreg| dest, |message| B, |asmreg|)
	if dest.reg
		if (dest is Declaration) or .Unchanged(A, dest, B)
			return dest
	rz = .temponly(A)
	(rz is negate) = (Dest is negate)
	rz.µtype = dest.µtype	


function BoolTestAndJump (|message| exp, |asmreg| req, |opmode| opp, |&fatasm|)
	|| mode = ASMReg.CondRequest.negate(opp is OR)
	return .Exists(mode, req, exp).fat!


function BoolValue (|message| A, |ASMReg| Dest, |opmode| Opp, |message| B, |ASMReg|)
	opt norefcounts
	dest = .UniqueLocation(a, dest, B)

	|| first = .µBoolInto(A, dest)
	if first is ConstOutput
		return .BoolConst1(b, dest, opp, first).boolanswer			// x = 5 or Y() --> x = Y()
	
	|| JUMP = .BoolTestAndJump(a.next!, dest, opp)					// AND/OR
	|| Second = .µBoolInto(B, dest)
	if Second is ConstOutput
		.NOP(jump) //opp, first, Second, B
		return .BoolConst2(second, dest, opp, b, first).boolanswer

	JUMP.JumpTo(.curr, self)
	
	if first.IsBool and Second.IsBool
		return dest.boolanswer

	return .Exists(dest, dest, A.next!)


function BoolConst1 (|message| B, |asmreg| dest, |opmode| Opp, |asmreg| ml, |asmreg|)
	|| V = (ml.const!=0) != (dest is negate)
	|| expect = opp is OR
	if v == expect
		ml.µtype = datatypecode.bool
		return .SetConst(b, v|int|, ml, dest)
									// x = 5 or  2	 --> x = true
									// x = 0 and 2	 --> x = false
	
	.nopreg(ml)						// x = 0 or y()  --> x = y()
									// x = 7 and y() --> x = y()
	|| mr = .µ(B, dest)
	if mr is ConstOutput
		mr.µtype = datatypecode.bool
		v = (mr.const!=0) != (dest is negate)
		return .SetConst(b, v|int|, mr, dest)
	
	if mr.isbool
		return mr
	return .Exists(dest, mr, B)


function BoolConst2 (|asmreg| mr, |asmreg| Dest,  |opmode| Opp, |message| exp, |asmreg| ml, |asmreg|)
	|| V = mr.const!=0
	if v == (opp is AND)
		.nopreg(mr)
		ml.µtype = datatypecode.bool
		return ml
	
	if ml is FromExistingVar // why not?
		.Nopreg(ml)
	mr.µtype = DataTypeCode.bool
	return .SetConst(exp, v|int|, mr, dest)


function BranchAnd (|message| A, |message| B, |asmreg| dest, |asmreg|)
	|fatrange| AndTest
	|| First = .Branch(A, andtest, dest is negate)
	if AndTest.never
		return first

	|| Second = .Branch(B, AndTest, dest is negate)
	if  first isnt RealConst
		// a and b
		// a and 1
		// a and 0
		return first

	// 1 and 1
	// 1 and 0
	// 1 and b
	return second


function BranchOr (|message| A, |message| B, |asmreg| dest, |asmreg|)
	|FatRange| OrTest
	|| First = .Branch(A, OrTest, dest isnt negate)
	|| KF = OrTest.Constness.negate
	if kf.knowntrue
		|| fake = A.noop
		fake.const = KF|int|
		// 1 or 1
		// 1 or 0
		// 1 or b
		(first is condanswer)
		return fake*first.boolanswer						// only way around this. Cos we got asm-reg(0)

	
	|fatrange| Br2
	|| second = .Branch(B, Br2, dest is negate)
	.AllJumpTo(OrTest)

	if Br2.always
		// a or 1
		// 0 or 1
		return second

	if kf.KnownFalse
		// 0 or 0
		// 0 or b
		return second

	// a or 0
	// a or b
	
	return first
}




Struct FatRange
	|&FatASM|   Start
	|&FatASM|   After
	|maybebool| Constness
	
	
	function Always (|bool|)
		opt inline
		return .Constness.KnownTrue
	
	
	function Never (|bool|)
		opt inline
		return .Constness.KnownFalse
	
	iterator
		|| curr = .after!
		while (curr > .start)
			curr--
			yield curr


extend asmstate
	function InlineFinishWithConsts (|fatrange| R, |ASMReg|)
		for s in R
			if s isa asm.ret
				if rz
					rz = rz.simplify
				  else
					|| dest = s.input(0)
						rz = dest.info 
					  else
						rz = s.r[0]|int|.asm
				s.SetOp = asm.jump
				s.JumpReg = 1
				.JumpFix(s)
			  elseif s isa asm.KNST
				ASMState.sh.AskNop(s)
		
		rz &= ~ASMReg.Exit
		(rz as= .state.return&asmreg.exit)
	
	
	function JumpFix (|fatasm| s, |?&fatasm| curr=nil)
		(s isnt CondAnswer)
		if !curr
			curr = .curr
		s.JumpTo(curr, self)
	
	
	function AllJumpTo (|FatRange| range, |?&FatAsm| curr = nil)
		for s in range
			if (s is CondAnswer) and !(s isa asm.knst)
				.JumpFix(s, curr)
	
	

function @asmstate.PrintProgress (|message| exp=nil)
	cpp_name adb 
	visible
	opt norefcounts
	"---"
	printline scfunction.currfunc!
	|| s = asmstate.sh
	if exp
		printline exp
	  else
		s.LastDebug = s.funcstart
	|| Curr = s.LastDebug
	while curr < s.curr
		curr.debugprint
		curr++
	s.LastDebug = curr
