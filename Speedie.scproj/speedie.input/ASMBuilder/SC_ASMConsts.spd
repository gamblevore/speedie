


function ASMState.DoConsts (|asmreg| D,  |asmreg| L,  |asmreg| R,  |&uint64| RImm=nil,  |asmreg|)
	|| LL = self[L],  || RR = self[R],  || DD = self[D]
	|| m = d.math
	if l.isfloat
		if l.fourbytes
			return .DoF32Const(D, DD|&float|, LL|&float|, RR|&float|, M)
		return .DoF64Const(D, DD|&f64|, LL|&f64|, RR|&f64|, M)
	
	if rimm
		RR = rimm
	if l.fourbytes
		return .DoI32Const(D, DD|&int|, LL|&int|, RR|&int|, M)
	return .DoI64Const(D, DD|&int64|, LL|&int64|, RR|&int64|, M)



function asmstate.DoF32Const (|asmreg| D, |&float| DD, |&float| LL, |&float| RR, |opmode| M, |asmreg|)
	|| LLL = *LL
	|| RRR = *RR
		
	if 0
		0
	  elseif M == ASMMath.Add
		LLL += RRR 
	  elseif M == ASMMath.Sub
		LLL -= RRR 
	  elseif M == ASMMath.Mul
		LLL *= RRR 
	  elseif M == ASMMath.Div
		LLL /= RRR 
	  elseif M == ASMMath.Mod
		(LLL mod= RRR)

	*(DD|&uint64|) = 0 // clear high bits
	if LLL.abs
		*DD = LLL
		return D
	*DD = 0
	return asmreg.zero



function asmstate.DoF64Const (|asmreg| D, |&f64| DD, |&f64| LL, |&f64| RR, |opmode| M, |asmreg|)
	|| LLL = *LL
	|| RRR = *RR
		
	if 0
		0
	  elseif M == ASMMath.Add
		LLL += RRR 
	  elseif M == ASMMath.Sub
		LLL -= RRR 
	  elseif M == ASMMath.Mul
		LLL *= RRR 
	  elseif M == ASMMath.Div
		LLL /= RRR 
	  elseif M == ASMMath.Mod
		(LLL mod= RRR)

	if LLL.abs
		*DD = LLL
		return D
	*DD = 0
	return asmreg.zero



function asmstate.DoI32Const (|asmreg| D, |&int| DD, |&int| LL, |&int| RR, |opmode| M, |asmreg|)
	if M != ASMMath.div and ASMMath.mod
		return .DoI64Const(D, DD|&int64|, LL|&int64|, RR|&int64|, M|opmode|)
	|| LLL = *LL
	|| RRR = *RR
		
	if M == ASMMath.Div
		LLL /= RRR 
	  elseif M == ASMMath.Mod
		(LLL mod= RRR)		

	*(DD|&uint64|) = 0 // clear high bits
	*DD = LLL
	if LLL
		return D
	return asmreg.zero



function asmstate.DoI64Const (|asmreg| D, |&int64| DD, |&int64| LL, |&int64| RR, |opmode| M, |asmreg|)
	|| LLL = *LL
	|| RRR = *RR
		
	if 0
		0
	  elseif M == ASMMath.Add
		LLL += RRR 
	  elseif M == ASMMath.Sub
		LLL -= RRR 
	  elseif M == ASMMath.Mul
		LLL *= RRR 
	  elseif M == ASMMath.Div
		LLL /= RRR 
	  elseif M == ASMMath.Mod
		(LLL mod= RRR)
	  elseif M == ASMMath.Shru
		LLL = LLL|uint64|>>RRR|uint64|
	  elseif M == ASMMath.Shrs
		LLL = LLL>>RRR
		// is this 32-bit or 64-bit or what-bit? right-shifting a signed short... sigh
		// what if we disable any except 64-bit?
	  elseif M == ASMMath.Shl
		LLL <<= RRR
	  elseif M == ASMMath.Bnt
		LLL = ~LLL
	  elseif M == ASMMath.Ban
		LLL &= RRR
	  elseif M == ASMMath.Xor
		LLL ^= RRR
	  elseif M == ASMMath.Xnr
		LLL = ~(LLL ^ RRR)

	*DD = LLL
	if LLL
		return D
	return asmreg.zero


