
extend_module ASM
	function SelfTestASM (|message| tests)
		opt norefcounts
		.enc1

		|| list = tests.last(@arg)
		|| testname = tests[@thg]
		require list and testname

		textassembler.assemble(list)
		|| fn = TreeAssembler[testname]
			|| ff = fn.finish.run


	function TestASM 
		|| dev = app.prefs["dev"].int
		if dev >= 2
			asm.noisyasm = 3
		if asm.noisyasm >= 3
			.Listinstructions

		require dev > 0
		|| T = __digest__( file://syntax.asm ).parse[@tmp, "tests"] #require

		stderr.ErrorsAreWarnings++ // nice
		.SelfTestASM(T)
		stderr.ErrorsAreWarnings--
	

function message.GetASMFunc (|message|)
	opt norefcounts
	if .reg >= 0
		|| op = .next(@thg, "=")$
		|| Adj = op.next(@adj)$
		return adj[@func]


extend_module SCFunction
	function LinkAll (|[scfunction]| Funcs)
		opt norefcounts
		for fn in funcs
			if fn.CurrReacher
				.Link(fn)

	function Link (|SCFunction| fn)
		opt norefcounts
		// so... this will be the ACTUAL link.
		// as in the one that the run-time loader will do!
		|| mu = fn.asm$


function asm2.Encode (|ASM|)
	return (ASM.encoders[.op])(self)		

	
function @asm.Enc1
	|asm2| R
	R.op = ASM.DSUB
	R.r[0] = 3
	R.r[1] = 2
	R.r[2] = 1
	R.Rest = 0
	|| oof = R.Encode
