

// i think the order of whats happening is wrong?
// it can't find the instructions or something?
// just step through the instruction lister thing and find out what is wrong
// 

module VM_Builder {
|[message]| 	NameList
|message|   	ModuleArg
|file|			vm_file
|faststring|	form_h
|message|		dt_prm
|string|		parent
|byte|			NormalPos = 0
|byte|			HighPos = 112


function DefineGetSub (|string| fname,  |int| up,  |int| down, |byte| c, |byte| c2)
	.form_h <~ "
#define   ${fname}${c}       (((${c2}int)((Op.Raw)<<$down))>>$Up)
#define   ${fname}${c}_(x)   (((${c2}int)((x)<<$down))>>$Up)
"


function DefineGet (|string| fname,  |int| up,  |int| down, |bool| last, |[message]|)
	if last
		.DefineGetSub(fname, up, down, 'i', ' ')
	.DefineGetSub(fname, up, down, 'u', 'u')
	rz <~ @thg + fname
	rz <~ @num + up
	rz <~ @num + down


// we need to create an array of forms...
function FillTypePrm (|string| fname, |int| pname)
	|message| add
	|| prop = @thg + fname
	|| r = [prop]
	if pname >= 4
		add = (macros.ASMcopier2)(r)	
	  else
		r <~ @num + pname
		add = (macros.ASMcopier)(r)	
	.dt_prm <~ add	


function GenAcc (|message| line, |int| bit_pos, |int| pname, |int|)
	opt norefcounts
	|| n = 32 - bit_pos
	|| lname = "_L"
	if line
		|| f = line.needfirst$
		|| f0 = *f.name
		if f0 == 'r'
			.FillTypePrm(line.name, pname)
			return 5+bit_pos
		if f0.isint
			n = f.int
		expect (n >= 1)  (f, "Too many total bits")
		expect (n <= 25) (f, "Too large field. 25 bits max, found: " + n.render)
		lname = "_" + line.name 
	
	lname = .parent + lname
	|| arr = .DefineGet(lname, 32-n, bit_pos, bit_pos+n==32)
	|| fnc_src = (macros.ASMSetter)(arr)
	SCFunction.newfunc(fnc_src, nil, line)
	
	.FillTypePrm(lname, pname)
	
	if  bit_pos+n > 32  or  n > 25  // bad
		error (.dt_prm, "Too many total bits")
	return n+bit_pos


function DataTypeModule
	opt norefcounts
	|| module = "extend_module ASM:constants:".parse
	compiler <~ module
	.modulearg = module.last.last.last


function AddForm (|message| form, |µform|)
	opt norefcounts 
	rz = µform(form)
	µform.forms.valuelower(form.name) = rz 


function string.ASMNormalise (|string|)
	|| n = 0
	for c in self
		c = c.lowercase
		if c == 'r' or 'n'	
			n++
		  elseif c == 'l' or 's' or 'j'
			0
		  else
			return self
	return "U" + ('0' + n)


function DataTypeCreate (|message| form,  |int| fnum,  |message|)
	opt norefcounts
	|| name = "ASM_" + form.name
	|| sigh = (Macros.ASM_Datatype)([
		@thg + name
		@num + fnum
	])
	rz = sigh.findnested(@list)
	rz++
	#!"This would be better if speedie grouped these, rather than spamming JB_InitCode_"
	while sigh.hasany
		compiler <~ sigh.first


function GenerateForms (|message| forms)
	opt norefcounts
	|| f = 0
	for form_msg in forms[@arg]
		if (f < 32) #check (form_msg, "Too many forms")
			using form_msg
			.GenerateOne(form_msg, ++f)


function GenerateOne (|message| form_msg, |int| f)
	opt norefcounts
	|| frm = .AddForm(form_msg)
	.dt_prm = .DataTypeCreate(form_msg, f)
	.parent = form_msg.name
	|| bit_pos = 7
	|| p    = 0
	|| arg  = form_msg[@arg,-1]							#require
	if arg.prev == "..."
		frm.Varies = true
	for l in arg
		bit_pos = .GenAcc(l, bit_pos, p++)
	
	if bit_pos < 32 and p < 5
		.GenAcc(nil, bit_pos, 5)
	.form_h <~ '\n'

	
function CppLibFile (|string| ch, |file|)
	return TransCompiler.CppLib[ch]
	

function BuildFiles (|bool|)
	.vm_file = Compiler.InputFile( nil, "vm.box", nil )	#require
	|| x = .vm_file.parse								#require
	|| forms = x.find("forms")
	forms.remove

	|| code = faststring()
	|| jump = faststring()
	.form_h = faststring()

	.Clean(x)
	.DataTypeModule
	.GenerateForms(forms)
	.NameList = .VMSpd(x)
	.VMCpp(code, jump)

	.CppLibFile("InstructionGetters.h").SmartData = form_h
	.CppLibFile("Instructions.i").SmartData = code
	.CppLibFile("InstructionList.h").SmartData = jump
	.form_h = nil
	return true

	
function MakeTheVM
	compiler.UserProj.use
	require .BuildFiles	
	treeassembler.InitAll
	asm.TestASM


function BuildInstructions (TranFunc) // __instructionlist__
	opt norefcounts
	expect !node.hasany (node.first)

	|| after = node
	for (tmp in .namelist) (pos)
		|| form = tmp[0][0].nyme
			|| fnc = @sdot + "add" 
			|| list = fnc.msg(@list)
			list.msg(@str, form.lowercase)
			list.msg(@str, tmp.name)
			list.msg(@num, pos.render)
			after.next = fnc
			after = fnc

	node.saferemove


function MakeJump   (|message| msg, |FastString| jump)
	jump <~ "&&${msg.name},\n"

 
function Clean   (|message| msg)
	opt norefcounts
	for ch.flat in msg
		if ch in @arg
			ch.indent += 4
		if ch == @opp
			if ch == "mod"
				ch.name = "%"
			  elseif ch == "(|)"
				ch.name = "|"


function VMSpd   (|message| list, |[message]|)
	opt norefcounts
	rz <~ (@thg+"EROR",  128)
	for ch in list
		.VMTmp(ch, rz)

	
function VMCpp (|faststring| vm, |faststring| jump)
	opt norefcounts
	for tmp in .NameList
		.MakeVM(tmp, vm)
		.MakeJump(tmp, jump)

	vm <~ "ı \n\n"


function MakeVM (|message| tmp, |faststring| vm)
	opt norefcounts
	require tmp == @tmp
	|| p = tmp.prev
	if P == @sheb
		vm <~ "	// ${P.name}\n"

	|| arg = tmp.last
	vm <~ "ı ${tmp.name}: "
	if !arg.Find(@tmp, "__")
		vm <~ "_"
	vm <~ "\n"
	for line in arg
		.VMLine(line, vm)


function VMDecl (|message| tmp, |[message]| msgs)
	opt norefcounts
	|| arg = tmp.last
	|| prms = tmp.first
	|| name = prms.first.name.asmnormalise
	|| form = µform.forms.valuelower(name)			#require
	|| id = (.highpos++, .normalpos++)(form.varies)
	asm.Encoders[id] = asm.Forms[form.Index]
	msgs[id] = tmp
	name = "ASM_" + name
	.ModuleArg <~ NewDecl(name)
	.ModuleArg <~ NeweqRel(@thg+tmp.name, @num + id)
// TypeList


function VMTmp (|message| tmp, |[message]| msgs)		
	if (tmp == @tmp) and (tmp != "forms" and "ignore")
		.VMDecl(tmp, msgs)


function VMLine (|message| line, |faststring| vm)
	if line == @sheb
		vm <~ "	// ${line.name}\n"
	  else
		vm <~ "\t"
		line.Render(vm)
		vm <~ ";"
	vm <~ "\n"
}

	
	
	
	
	
