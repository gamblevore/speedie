

extend ASMState
	function LoadTitle (|message| m, |message|)
		// asm oof (9)
		opt NoRefCounts
		|| name = m[@thg]$
		.fn.exportname = name.name
		.fn.name = name.name
		|| bra = name.Next(@bra)$
		|| n = bra[@num].int
		expect (n>=0 and n<=10) (m, "Too many arguments")
		for n
			.fn.args <~ TypeInt64!.TypeNormal // :) just ints!

		rz = bra.Next(@arg)
		rz.expectlast

		

	function TextInstruction (|message| m)
		if !.TextOp(m)
			debugat // retry
			.TextOp(m)
		// we also need to go into the if/while things


	function TextOp (|message| m, |bool|)
		opt norefcounts
		
		if m == @rel
	//    r1 = jb_str_length(r2)~5    // save 5 regs on the stack
			|| Dest = m[@thg]$
			|| funcMsg = dest.GetASMFunc$

		require m.expect(@tmp)
		|| op = instruction[m]						#require
		|| list = m.first
		expect (list == nil or @list or @bra) (m)

		if op.IsSetConst
			return .SetConst(list, m)
		
		|| A = self <~ (op.opcode, m)
		m.RangeLength = a.Index // each message now knows its fat thingy.
		|| pos = 0
		for p in list
			if p != @name
				a.AddRegParam(p, pos)
			  else
				a.AddLabelRequest(p, pos)
			expect (++pos <= op.pcount) (list, "Too many params")

		return (op.pcount == pos) #expect (list, "Too few params")

	
	function fatasm.AddLabelRequest (|message| P, |int| Pos, |int|)
		|| x = .info as asmreg.labelrequest
		x.reg = pos
		.info = x


	function LoadLabelJumps (|bool|)
		opt norefcounts
		if ASMState.sh.labelcount
			for A in .out
				if a is labelrequest
					require .GetLabel(a)
		return true
	
	
	function GetLabel (|&FatASM| Jumper, |bool|)
		opt norefcounts

		|| list = jumper.msg.first
		|| i = 0
		|| found = false
		for s in list
			if s == @name
				for A in .out
					|| m = a.msg
					if m.name ~= s.name
						|| fat = m.rangelength|uint| #expect (m, "Label has no address")
						jumper.r[i] = fat ||| asmreg.FatRef
						found = true
			i++
		
		
		return found #expect (jumper, "No label found")
	
	
	function AddLabel (|message| ch)
		opt norefcounts
		|| l = .labelcount+1
		expect l <= 254 (ch, "Too many labels")
		.labelcount = l
		ch.rangelength = .curr.index


	function TextFuncSub (|message| m, |bool|)
		opt NoRefCounts
		.vdecls = 31 // no other choice. Register requester will fail... otherwise.
					 // i forgot how this helps. WHAT GOES WRONGGG????
		for ch in .LoadTitle(m)
			if ch == @name
				.addlabel(ch)
			  else
				.TextInstruction(ch)
		.SetLength
		return .LoadLabelJumps

