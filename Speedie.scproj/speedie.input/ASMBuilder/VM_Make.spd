

module VM_Builder {
|[message]| 	NameList
|message|   	ModuleArg
|file|			vm_file
|faststring|	form_h = faststring()
|message|		dt_prm
|string|		parent
|int| 			Total
|byte| 			XType
|byte|			NormalPos = 0
|uint|			FreeMultiASM = ~1
|faststring|	FatFile
|[message]|		rdz



function DefineGetSub (|string| fname,  |int| up,  |int| down,  |byte| c,  |byte| c2)
	.form_h <~ "
#define   ${fname}${c}       (((${c2}int)((Op)<<$down))>>$Up)
#define   ${fname}${c}_(x)   (((${c2}int)((x)<<$down))>>$Up)
"


function DefineGet (|string| fname,  |int| up,  |int| down, |message|)
	.DefineGetSub(fname, up, down, 'i', ' ')
	.DefineGetSub(fname, up, down, 'u', 'u')
	|[message]| arr
	arr <~ @thg + fname
	arr <~ up.msg
	arr <~ down.msg
	return Ugh.run(arr)


// we need to create an array of forms...
function FillTypePrm (|string| fname, |int| pname)
	|| prop = @thg + fname
	.dt_prm <~ Ooof.run(prop, pname.msg)


function FinishAcc 
	opt NoRefCounts
	|| s = .dt_prm
		|int| X = .XType
			Macro.TmpPrms_ <~ x.msg
		|macro--| M = (VM_Builder.double_rizzler, VM_Builder.rizzler)(x)
		s.AppendMacro(M, macro.TmpPrms_)
		macro.TmpPrms_.clear
	.XType = 0


function GenAcc (|message| line, |int| bit_pos, |int| pname, |int| Max, |int|)
	opt norefcounts
	|| n = Max - bit_pos
	|| lname = "_L"
	if line
		|| f = line.NeedFirst$
		|| f0 = f.name[]
		if f0 == 'x' and bit_pos == 32 // x means an extra 4 bytes of values. like 8-byte ASM.
			.XType = pname
			return int.max
		if f0 == 'r' or 'R'
			.FillTypePrm(line.name, pname)
			return 5+bit_pos
		if f0.isint
			n = f.int
		expect (n >= 1)        (line, "Too many total bits")
		expect (n <= (Max-8))  (line, "Too large field. Found: " + n.render)
		lname = "_" + line.name 
	
	lname = .Parent + lname
	|| fnc_src = .DefineGet(lname, Max-n, bit_pos)
	
	SCFunction.NewFunc(fnc_src, nil, line)
	
	.FillTypePrm(lname, pname)
	
	if  (bit_pos+n) > Max  or  n > (Max-8)  // bad
		error (line, "Too many total bits")
	return n+bit_pos


function DataTypeModule 
	opt norefcounts
	|| module = "extend_module ASM:constants:" ~ parse
	compiler <~ module
	.modulearg = module.last.last.last



function AddForm (|message| form, |µform|)
	opt norefcounts 
	rz = µform(form)
	µform.forms.ValueLower(form.name) = rz 


function DataTypeCreate (|message| form,  |int| fnum,  |message|)
	opt norefcounts
	|| name = "ASM_" + form.name
	|| sigh = vm_builder.ASM_Datatype.run(
		@thg + name
		fnum.msg
	)
	rz = sigh.FindNested(@list)
	rz++
	#!"This would be better if speedie grouped these, rather than spamming JB_InitCode_"
	while sigh.hasany
		compiler <~ sigh.first


function GenerateForms (|message| forms, |bool| DoMore)
	opt norefcounts
	|| f = 0
	for form_msg in forms[@arg]
		if (f < 128)									#check (form_msg, "Too many forms")
			using form_msg
			.AddForm(form_msg)
			++f
			if DoMore
				.GenerateOne(form_msg, f)


function GenerateOne (|message| form_msg, |int| f)
	opt norefcounts
	.dt_prm = .DataTypeCreate(form_msg, f)
	.parent = form_msg.name
	|| bit_pos = 8
	|| p   = -1
	|| arg = form_msg[@arg,-1]							#require
		
	for l in arg
		bit_pos = .GenAcc(l, bit_pos, ++p, 32)
		if bit_pos > 32
			exit
	
	if bit_pos < 32 and p < 5
		.GenAcc(nil, bit_pos, 5, 32)
	.FinishAcc
	.form_h <~ '\n'

	
function CppLibFile (|string| ch, |file|)
	return TransCompiler.CppLib[ch]
	

function VMBox (|message|)
	|| v = Compiler.InputFile( "vm.box", nil )
		.vm_file = v
		rz = v.parse
		if rz
			rz.TranAllTargets
	  else
		error "Can't find vm.box"


function JustDefineInstructions (|bool|)
	description "Shorter version that just makes the stuff we need, rather than generate the entire VM."
	require !ModuleArg
	|| vmdef = .VMBox
		|| forms = vmdef.find("forms")
		.GenerateForms(forms, false)
		.FillEncoders(vmdef, false)


function BuildFiles (|bool|)
	|| VMDef = .VMBox							#require

	FatFile = Compiler.InputFileAlways( "speedie.input/ASMBuilder/FatGen.box").out
	
	|| Forms = VMDef.find("forms")
	forms.remove
	
	|| Code = FastString()
	|| Jump = FastString()

	.Clean(VMDef)
	.DataTypeModule
	.GenerateForms(forms, true)
	.FillEncoders(VMDef)
	.VMCpp(code, jump)
	
	|| fs = FatFile
		fs.Flush
	.SafeWrite("InstructionGetters.h", form_h)
	.SafeWrite("Instructions.i",       code)
	.SafeWrite("InstructionList.h",    jump)
	.form_h.size = 0
	return true


function SafeWrite (|String| name, |FastString| data)
	target debug
		debug_require data.length >= 1K // oof?
	.CppLibFile(name)!.SmartData = data


function UseASM
	opt norefcounts
	require 0
	|| m = Message()
	m.RARE(asmreg(), asmreg())
		
function MakeTheVM (|bool|)
	compiler.Project.use
	.UseASM
	if .BuildFiles	
		asm.TestASM
	return stderr.ok


function BuildInstructions (TranFunc) // __instructionlist__
	opt norefcounts
	expect !node.hasany (node.first)

	|| after = node
	for (tmp in .namelist) (pos)
		|| form = tmp[0][0].name
			|| fnc = @sdot + "add" 
			|| list = fnc.msg(@list)
			list <~ (@str, form.lowercase)
			list <~ (@str, tmp.name)
			list <~ pos
			after.next = fnc
			after = fnc

	node.SafeRemove


function MakeJump   (|message| msg, |FastString| jump)
	jump <~ "&&${msg.name},\n"

 
function Clean (|message| msg)
	opt norefcounts
	for ch.flat in msg
		if ch in @arg
			ch.indent += 4
		if ch == @opp
			if ch == "mod"
				ch.name = "%"
			  elseif ch == "|||"
				ch.name = "|"


function BadEncoder (ASM_Encoder)
	debugger


function VM_NewInstructions (|message| list, |bool| Amount, |[message]| rz)
	opt norefcounts
	for ch in list
		require .VM_NewIns(ch, amount, rz)


function VM_FillPos (|message| list, |[message]| rz)
	opt norefcounts
	for ch in list
		if ch ~= "POS"
			|| f = ch.first
			if f == @num
				ch.flags |= 32K
				|| i = f.int
				|| arg = ch.last(@arg) // now what?
				|| item = arg.first
					.VM_MakeInstructionSub(item, false, rz, i)				


function FillEncoders (|message| list, |bool| ActuallyMakeTheVM = true)
	opt norefcounts
	|[message]| R = nil
	if ActuallyMakeTheVM
		R = []
		.NameList = r
		R <~ (@thg+"EROR",  256)
	.vm_FillPos(list, r)
	.VM_NewInstructions(list, false, R)
	.VM_NewInstructions(list, true, R)
	for i in 256
		asm.encoders[i] ?= badencoder

	
function VMCpp (|faststring| vm, |faststring| jump)
	opt norefcounts
	for tmp in .NameList
		.MakeVM(tmp, vm)
		.MakeJump(tmp, jump)

	vm <~ "ı \n\n"


function MakeVM (|message| tmp, |faststring| vm)
	opt norefcounts
	require tmp == @tmp
	|| p = tmp.prev
	if P == @sheb
		vm <~ "	// ${P.name}\n"

	require tmp isnt Special
	(tmp is Special)
	|| arg = tmp.last

	vm <~ "ı ${tmp.name}: "
	if !arg.Find(@tmp, "__")
		vm <~ "_"
	vm <~ "\n"

	for line in arg
		.VMLine(line, vm)


function message.VMBits (|int|)
	opt norefcounts
	for s in self
		if s == @num
			rz |= 1<<(s.int(0, 1, 3)-1)
	rz ?= 1


// vmmake
function VM_MakeInstructionSub (|message| tmp,  |bool| Ask,  |[message]?| ActuallyMakeTheVM, |int| ForceID)
	opt norefcounts

	// We need to actually write to a file... that we can hand-modify.
	
	// could be simplified but i dont care anymore. i dont wanna deal with this code.
	|| prms = tmp.first
	|| FoundBits = prms.VMBits
	if ask
		require FoundBits & 1
	
	tmp.flags |= 32K
	|| P1 = prms.first
	
	|| name = p1.name					//  .ASMNormalise
	|| form = µform.NeedForm(name, p1)
	|| FormEnc = asm.Forms[form.Index]
	name = "ASM_" + name
	using tmp
	if ActuallyMakeTheVM != nil			// otherwise speedie is just using the encoders.
		.ModuleArg <~ NewDecl(name)
	++.Total
	
	.MakeFatCreator(tmp.name, form)
	if forceid
		.FreeMultiASM &=~ (1<<forceid)
		if .OKBoomer(tmp, forceid, formenc, ActuallyMakeTheVM)
			.AddµOp(tmp.name, forceid)
		return 
	
	|| id = 0
	if ask
		id = .FreeID(tmp, foundbits)
	|| Done = false
	for (b.bits in foundbits) (extra)
		|| x = id + extra
		if .OKBoomer(tmp, x, formenc, ActuallyMakeTheVM) and !done
			.AddµOp(tmp.name, X)
			done = true


function OKBoomer (|message| tmp,  |int| x,  |asm_encoder| formenc,  |array?| R,  |bool|)
	check (!asm.encoders[x]) (tmp, "ASM clash?") 
	asm.Encoders[x] = FormEnc
	if R != nil
		R[x] = tmp
		return true


helper message.VMMsgArgName (|int| i, |string|)
	if self
		return .name
	return string.byte('a' + i)


function MakeFatCreator (|string| name, |µform| form)
	opt norefcounts
	|| fn = .FatCreatorSub(name, form)
	|| fs = .FatFile
		fs <~ "\n"
		fn.Render(fs)
		fs <~ "\n"


function FatCreatorSub (|string| name, |µform| form, |message|)
	opt norefcounts
	|| fn = IceCream.run(@thg+name)
	|| arg = fn.Last!
	|| prm = arg.prev!
	|| FatDecl = prm.last!
	|| f = form.src.first.first
	if rdz == 0
		rdz <~ (arg, 2)
	
	// theres 12 temps here.
	// a lot. Can we reduce this? At least in the ASM?
	// if we decr something, we can mark it as "removed"
	// and if its the last... we can go all the way down.
	// of course... this is "per-branch". So it would need a stack of these... 
	
	for (p in form) (i)
		|| ty = ("asmreg", "int")(p.isreg)
		|| pname = f.VMMsgArgName(i)
		|| rel = NewRel(@thg + pname, @thg + "nil", "=")
		|| dcl = NewDecl(ty, rel)
		fatdecl.prev = dcl
		rdz[0] = i.msg
		rdz[1] = @thg + pname
		arg <~ p.which.run(rdz)
		if p is jump
			rdz[0] = @thg+pname
			|| size = 32 - p.bitsize
			rdz[1] = @num+size
			arg <~ ohio.run(rdz)
		f++
	return fn
		

function µparam.Which (|macro!--|)
	if self is jump
		return vm_Builder.gyatt
	if self is number
		return VM_Builder.legs
	if self is output
		return vm_builder.skibidy
	return vm_builder.arms


function AddµOp (|string| name, |int| id) 
	opt norefcounts
	|| msg = id.msg
	|| thg = @thg + name
	.ModuleArg <~ NewEqRel(thg, msg)

	
function FreeID (|message| m, |int| ask, |int|)
	if ask <= 1
		|int| n = .normalpos ?? 32
		.normalpos = n+1
		expect (n < 256) (m, "Too many opcodes")
		return n
	
	|| f = .FreeMultiASM
	for i in 16
		if f&ask == ask
			.freemultiasm = f&~ask
			return i<<2
		ask <<= 4
	error (m, "Can't find free ID for ASM")


function VM_NewIns (|message| tmp, |bool| ask, |[message]?| ActuallyMakeTheVM, |bool|)
	if (tmp == @tmp) and !(tmp.flags&32K) 
		if (tmp != "forms" and "ignore")
			.VM_MakeInstructionSub(tmp, ask, ActuallyMakeTheVM, 0)
			require ask
	return true


function VMLine (|message| line, |faststring| vm)
	if line == @sheb
		vm <~ "	// ${line.name}\n"
	  else
		vm <~ "\t"
		line.Render(vm)
		vm <~ ";"
	vm <~ "\n"



|| icecream = `function message._0 (,|&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm._0, self)
}`.macro


|| rizzler = "
if curr < after		// remove the test for curr!=nil...
	curr++[] = rz 
return curr
".macro


|| double_rizzler = "
if curr < after+2
	curr++[] = rz 
	curr++[] = .prms[_0]
	|| p2 = .prms[_0+1]
	if p2
		curr++[] = p2
	
return curr
".macro


|| ASM_Datatype = "datatype _0 (ASM) 
	module
		function Encode (ASM_Encoder,)
			visible true
			|asm| rz = .op|asm| << 24
		
ASM.Forms[_1] = &_0.Encode // for now
".macro


|| Ooof  = `rz._0 = .prms[_1]`.macro
|| Ugh = `function asm._0 (assigns:|uint|, |asm|): return self ||| ((value << _1) >> _2)`.macro
|| ohio    = "if (((_0<<_1)>>_1) != _0): error (self, `Jumped too far`)".macro
|| gyatt   = "rz.jumpinput(_0) = _1".macro
|| legs    = "rz.numinput(_0) = _1".macro
|| arms    = "rz.reginput(_0) = _1".macro
|| skibidy = "rz.dest(_0, _1, a)".macro

}


	
