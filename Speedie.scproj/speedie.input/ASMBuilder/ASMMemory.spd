
extend Assembler {


function AddConst (|int| Add, |message| exp, |ASMReg| Base, |ASMReg|)
	|| dest = base
	if base isnt temp
		dest.reg = 0
	
	(base is NoScale)
	return .AddToReg(exp, dest, base, Add)


function ZeroMemory (|int| Index, |message| Exp, |asmreg| Base, |asmreg| VarAdd, |scdecl| D, |&fatasm|)
	expect (D) (exp)
	check (!varadd.reg) (exp)
	|| Amount = D.SizeOfQuery						#require
	expect (Amount < 4096) (exp, "Object too large to clear via ASM.") // can re-write this to generate a loop.

	if index
		if d isnt property							// Sigh. now what? the size isnt right?
		|| PropSize = d.CalculateSize min 16
		Index *= PropSize
		if index|uint| > (9~bits)|uint|
			base = .AddConst(index, exp, base)
			index = 0
	
	while
		|| Sub = Amount min (1<<10)
		Amount -= Sub
		
		rz = exp.MEMZ(base, index, Sub & 10~bits)		// VM treats 0 as the biggest num
		loop Amount > 0
		base = .AddConst(Sub, exp, base)



function ReadOrWriteSub (|ASMReg| Dest, |message| Exp, |asmreg| Base, |asmreg| VarAdd, |scdecl?| Decl, |int| Index, |&fatasm|)
	target debug: if (dest isnt set) and !dest.reg // oh man
	if dest is ContainsAddr
		#!wait?? this is meant to be an addrrequest? not a response.
		debugger
	
	if dest is FromZeroMemory
		|| fat = .ZeroMemory(index, exp, base, varadd, Decl)
			return fat
		dest = asmreg()

	(dest asnt= asmreg.AddrRequest)
	|| T = dest.µtype
	|| bytes = t.ByteCount
	if decl
		|| curr = Decl.CalculateSize(0)
		if curr != bytes // just check.
		bytes = curr.clamp(1,16)
	bytes = bytes.log2
	
	
	if  (bytes|uint| > 4)
		error (exp, "Object to large to access")				// can we do struct-mem-copy?
		bytes = 0
	
	index++
	|| VInd = .Const(varadd, 7, false)
		index += VInd
		VarAdd = ASMReg()
	
	if decl isnt ClassObj
		base = .InlineOffsetOpt(Base, bytes, index, 7, Decl)
	
	|| pinc = .MemOpt(base, index, bytes)
	
	rz = exp.RD4U(dest, base, VarAdd, index, pinc)
	if dest is set
		rz._op = ASMType.WriteASM[bytes]
	  else
		|| B = (bytes<<1) + t.issigned
		rz._op = ASMType.ReadASM[b]


function MemOpt (|$asmreg| base, |$int| index, |int| bytes, |int|)
	|| bs = base.fat$
	|| Before = bs isa asm.addk
	require before or (bs isa asm.ADAK)
	if base isnt temp
		require .last == bs
		require bs.reg(0) == bs.reg(1)
	
	rz = bs.prms[2]|int| >> bytes
	
	|| i = index
	if before
		i += rz
		require i|uint| <= 127 // could go out of range!
	
	if before and (bs is temp)
		rz = 0 // rz... does it still matter?
	  else
		require rz >= -1 and rz <= 1

	index = i
	base = bs.RegInput(1)
	.nop(bs)
	


function Assembler.InlineOffsetOpt (|asmreg| base, |int| pow2, |$int| index, |uint| MaxBits, |scdecl?| Glob, |asmreg|)
	opt norefcounts
	target debug: if glob is classobj // what?
	|| bs = base.fat
	if !bs
		return base

	|uint| maximum = (1 << maxbits) - 1
	|int64| LostBytes = 0
	if base is GlobalMemory
		expect (glob)
		LostBytes = glob.au.ExportPosition
		
		|| K = bs.const
		if (glob isnt global) and (glob is property)		// a property on a global struct
			debugger // really not sure what to do.
			LostBytes += K
	//		|| curr = P.CalculateSize(depth), || SmallCurr = curr.clamp(1,16)
			
		  else
			LostBytes -= K
			expect LostBytes >= 0
		
	if LostBytes & (pow2)~bits
		#!not good. We'd need to use an addk. but should never happen
		debugger

	|| i = index + (LostBytes >> pow2) 
	if i <= maximum|int|
		index = i
		return base

													// Unstorable. increase externally				
	i = (index << pow2) + lostbytes
	index = 0
	return .AddToReg(bs.msg, base, base as asmreg.noscale, i)





function Read (|asmreg| dest, |message| exp, |asmreg| Ptr, |asmreg| VarAdd, |scdecl| ReadDecl, |int| index=0,  |&fatasm|)
	opt inline
	(dest isnt set)
	if (0)
		.Dummy(exp)
	return .ReadOrWriteSub(dest, exp, ptr, VarAdd, ReadDecl, index)


function Write (|asmreg| dest, |message| exp, |asmreg| Ptr, |asmreg| VarAdd, |scdecl| DestDecl, |int| index=0, |&fatasm|)
	opt inline
	(dest is set)
	return .ReadOrWriteSub(dest, exp, ptr, VarAdd, DestDecl, index)


function ReadOrWrite (|ASMReg| dest, |message| exp, |asmreg| base, |asmreg| VarAdd, |scdecl| Ty,  |int| index=0, |asmreg|)
	opt inline
	if dest is set or FromZeroMemory
		(dest is RealConst)				// make compiler happy
	return .ReadOrWriteSub(dest, exp, base, VarAdd, ty, index) * dest


function Dummy (|message| exp)
	if exp: exp.RD1U, exp.RD1S, exp.RD2U, exp.RD2S, exp.RD4S, exp.RD8U, exp.RD16, exp.WR1U, exp.WR2U, exp.WR4U, exp.WR8U, exp.WR16



}
