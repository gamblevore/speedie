


function Assembler.RefCountSub (|message| exp, |message| prms, |scfunction| fn, |&FatASM|)	// JB_SetRef(a, b)
	opt	NoRefCounts
	if fn == compiler.RefClear
		|| offset = 0
		|| A = .µ(prms.first!, ASMReg.AddrRequest)
		A = .InlineOffsetOpt(A, 3, offset, 13, nil, prms.first!)
		return exp.RFWR(A, nil, 1, offset)						// reg to mem


	if fn == Compiler.RefSetRef
		|| DestMsg = prms.first!
		|| A = .µGetreal(DestMsg, ASMReg.AddrRequest)
		|| P = prms.second!
		|| B = .µ(P, ASMReg.AddrRequest)
		if A iz B
			return nil // wat?
		
		|| offset = 0
		if A isnt ContainsAddr
			if B is ContainsAddr
				B = .InlineOffsetOpt(B, 3, offset, 13, P.ASMDecl, p)
				return exp.RFRD(A, B, 1, offset)				// mem to reg
			return exp.RFST(A, B)								// reg to reg
		
		|| glob = DestMsg.ASMDecl
		if  B is ContainsAddr
			|| where = .Temponly(P)
			where.µtype = datatypecode._voidptr
			B = .Read(where, P, B, nil, p.ASMDecl) * where		// (mem to reg)?

		A = .InlineOffsetOpt(A, 3, offset, 13, glob, p)
		return exp.RFWR(A, B, 1, offset)						// reg to mem


	if fn == Compiler.RefIncr2
		|| A = .µ(prms.first!, asmreg.AddrRequest)
		target debug: if a isnt ContainsAddr					// always memory
		|| offset = 0
		A = .InlineOffsetOpt(A, 3, offset, 13, nil, prms.first!)
		|| B = .µ(prms.second!)
		target debug: if b is ContainsAddr						// always reg
		return exp.RFWR(a, b, 0, offset)

	|| A = .µ(prms.first!)
	require !.RegIsConst(a, 0)
	target debug: if A is ContainsAddr						// always a reg!

	if fn == Compiler.RefIncr
		|| P = .last(asm.gstr)
			if (p.r0 samereg a.reg) and p.r1 == 0
				p.r1 = 1
				return p
		|| fat = exp.rfst(asmreg(), a)
		Fat.Outputs = 0
		return fat

	if fn == Compiler.RefDecr
		|| P = .last
		#! what
		if (p isa asm.rfst)
			if (p.r1 samereg a.reg) and (p.r0 == 0)
				p._op = asm.RFAP
				p.r0 = p.prms[1]
				p.r1 = 0
				return p
		  elseif (p isa asm.gstr)
			if p.r0 samereg a.reg and p.r1 == 1
				return nil
		return exp.RFST(a, asmreg())

	if fn == Compiler.RefSafeDecr
		return exp.RFAP(asmreg(), a, asmreg())

	debugger 
	return exp.EROR(asmreg(), asmreg(), asmreg(), asmreg(), 0)


function Assembler.RefCount (fn_asm)	// JB_SetRef(a, b)
	opt norefcounts
	|| prms = exp.last!
	|| fn = prms.obj|SCFunction|!
	if fn != Compiler.RefFreeIfDead
		|| fat = .RefCountSub(exp, prms, fn)
			fat.µrefcount++
			return fat * nil
		return nil
	|| A = .µ(prms.first!)

	#! Disallow: if obj.X(),   when obj.X() is a disowner
	#! Then we will never freeifdead within if-branch or other tests.
	#! needs understanding of disowners!
	
	exp.RFAP(A, asmreg(), asmreg())
	return a


function Assembler.DecrObj (|asmreg|)
	|| fat = .last(asm.rfst)
		|| upon = fat.prms[0]
			if !fat.prms[1] and !fat.prms[2]
				.nop(fat)
				rz.reg = upon


function Assembler.SafeDecr (|asmreg|)
	|| fat = .last(asm.rfap)
		|| upon = fat.prms[1]
		if upon and !fat.prms[0] and !fat.prms[2]
			.softnop(fat)
			rz.reg = upon
	


class RefTest
	|string| s
	Constructor
		visible
		.s = "4"

