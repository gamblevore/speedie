


dispatch fn_asm_table (fn_asm)
	@arg:
		opt norefcounts
		for ch.fast in exp
			.µ(ch, asmreg.discard)


	@decl: // yay
		opt norefcounts
		|| rel = exp.last!
		|| ty = rel.first!.fastdecl
		|| reg = .DeclareMe(Exp, ty.reg)
		return .µ(rel.last!, reg)


	@num: asmtmp.num

	@rel: asmtmp.DoMath


	@thg: ASMTmp.Thg


	@bra: ASMTmp.First

	@sheb: ASMtmp.Ignore
		

	@list: // vectors
		debugger

	@func:
		opt norefcounts
		return .DoFunc(exp.last!, dest)


	@dot:	ASMTmp.Dot
	@acc:	ASMTmp.Access


	@brel: asmtmp.Brel		// ++, --, -, &


	@arel: asmtmp.arel      // ++, --, 


	@type:					asmtmp.TypeCast


	@tmp:					asmtmp.unexpected

	(ASMtmp.kDebugger):		ASMtmp.Debugger
	(ASMtmp.kif):			ASMtmp.If
	(ASMtmp.krejoin):		ASMtmp.First
	(ASMtmp.kreturn):		ASMtmp.return
	(ASMtmp.kwhile):		ASMtmp.While
	(asmtmp.kTern):			ASMtmp.Ternary

	(asmtmp.kContinue):		ASMtmp.Continue
	(asmtmp.kExit):			ASMtmp.Exit

	(asmtmp.ksetvar):		ASMtmp.SetRel
	(asmtmp.kStatExpr): 	ASMtmp.StatExpr
	(asmtmp.kPointer):		asmtmp.Pointer

	(asmtmp.kIgnore):		ASMtmp.Ignore
	(asmtmp.kFail):			ASMtmp.Ignore

	63:
		0




function asmstate.SimpleTernary (|asmreg| dest, |asmreg| ma, |asmreg| mb, |message| cond, |asmreg|)
	opt norefcounts
	|| dr = dest.reg
	|| mc = (asmreg(), dest)(dr == ma.reg or mb.reg)
	mc = .µ(cond, mc)
	.addasm(asm.TERN, cond, dest, mc, ma, mb)
	return dest


extend_module ASMTmp {

|asm_mem[10]| ReadASM
|asm_mem[5]| WriteASM

function InitAccess
	|| R = &ASMtmp.ReadASM[0]
	|| W = &ASMtmp.WriteASM[0]
	*R++ = ASM.RD1U, *W++ = ASM.WR1U
	*R++ = ASM.RD1S, *W++ = ASM.WR2U
	*R++ = ASM.RD2U, *W++ = ASM.WR4U
	*R++ = ASM.RD2S, *W++ = ASM.WR8U
	*R++ = ASM.RD4U, *W++ = ASM.WR16
	*R++ = ASM.RD4S
	*R++ = ASM.RD8U
	*R++ = ASM.RD8U
	*R++ = ASM.RD16
	*R++ = ASM.RD16	


function Debugger		(fn_asm)
	.addasm(asm.TRAP, exp)

	
function If				(fn_asm)
	opt norefcounts
	debugger
	
	|| cond = exp.first!
	|| Start = .Branch(cond)
	|| arg = cond.next!
	.µ(arg)
	|| ElseIf = arg.next
		if mode // what?
		IF(self, elseif, asmreg(), 1)
	Start.r[3] = (mode + .curr) - Start
	
	
function While			(fn_asm)
	opt norefcounts
	debugger
	|| write = .WhileStart
	.WhileStart = .curr
	IF(self, exp, asmreg(), 1)
	|| finish = .curr
	.AddASM(asm.JUMP, exp, .whilestart - finish)				// jump back
	.WhileStart = write

	while write < finish
		if write.Op == 255 // exit
			write.op = ASM.Jump
			write.r[0] = finish - write
		write++

	
function Exit			(fn_asm)
	opt norefcounts
	self <~ (255, exp)											// request jump fwd


function Continue		(fn_asm)
	opt norefcounts
	.AddASM(asm.JUMP, exp, .whilestart - .curr)					// jump back
	

function StatExpr		(fn_asm)
	opt norefcounts
	for ch.fast in exp
		if ch.islast
			return .µ(ch, dest)
		.µ(ch, asmreg.discard)


function Ternary		(fn_asm)
	opt norefcounts
	
	|| prms = exp.second
	|| cond = prms.first!
	|| A = cond.next!
	|| B = A.next!
	
	|| mA = .SimpleVar(a)
	|| mB = .SimpleVar(b)
	if ma and mb
		return .SimpleTernary(dest, ma, mb, cond)
	
	#! we'll need to protect registers...  x = (1,1+2)(cond)
	#! x can be set to 1, then we find the number 1 as a constant in a register
	#! Except its not really there cos it hasnt been done yet!
	#! Its actually quite good that we set it directly, though.
	#! We need some kinda way to block off "unknown registers" 

	dest = .TempMe(exp, dest)
	|| FailToSecond = .Branch(cond)
	.µ(A, dest)
	|| Exit = .AddASM(asm.jump, exp)

	FailToSecond.r[3] = .curr - FailToSecond

	.µ(B, dest)
	Exit.r[3] = .curr - Exit	

	return dest
	

	
function First			(fn_asm)
	opt norefcounts
	return .µ(exp.first!, dest)


function Return			(fn_asm)
	opt norefcounts
	|| f = exp.first
		|| Where = asmreg.ForReturnReg
		where.µtype = asmstate.sh.ReturnType
		rz = .µ(f, Where)
	.AddASM(asm.RET, exp, rz, asmreg(), 1)


function TypeCast		(fn_asm)		// 
	opt norefcounts
	debugger
	|| src = .µ(exp.first!, dest)
	|| T = src.µtype
	if t is bool
		return .NotEq(dest, asmreg(), src, exp)

	|| OldDecl = exp.first!.fastdecl
	|| NewDecl = exp.second!.fastdecl
	|| OldType = olddecl.regtype
	|| NewType = newdecl.regtype
	|| OC = T.BitCount
	|| NC = newtype.BitCount
	if  oldtype.BitCount != OC  or  newtype.BitCount != NC  // hmmm. How? they should match up.

	|| FloatDiff = T.isfloat != newtype.isfloat
	if !FloatDiff and (nc == oc)
		return src

	dest = .TempMe(exp, dest)
	ifn t.isfloat or newtype.isfloat
		|| Sh = 64 - oc
		.AddASM(asm.BFLG, exp, dest, src, sh, sh, src.signed|int|)
		return dest as ASMMath.bitcorrect
	
	|| Conv = .AddASM(asm.CONV, exp, dest, src)
	debugger,   #!put in actual numbers later
	if floatdiff
		Conv.r[2] = 1
	  else
		Conv.r[2] = 3
	
	return dest


function Pointer		(fn_asm)
	// *a, x = *(a.b) 
	opt	NoRefCounts
	dest = .tempme(exp, dest)
	|| Ptr = .µ(exp.first!, dest)
	|| A = Dest.ReadOrWrite(exp)
	.AddASM(A, exp, dest,  Ptr)
	return dest as asmmath.Bitcorrect


function Access		(fn_asm)						// a[b], struct.mem[b], func()[func2()]
	opt	NoRefCounts
	dest = .tempme(exp, dest)

	|| Ptr = .µ(exp.first!, dest.requestpos)		// x = a.b[0]
	|| Ind = .µ(exp.second!, ptr.unrequest • dest)
	|| A = Dest.ReadOrWrite(exp)

	.AddASM(A, exp, dest,  Ptr, ind)
	return dest as asmmath.Bitcorrect

		

function Dot		(fn_asm)						// a.b
	opt	NoRefCounts
	dest = .tempme(exp, dest)
	|| Obj = .µ(exp.first!, dest)
	|| prop = exp.fastdecl
	|| T = prop.typeinfo
	dest.µtype = T
	debugger
	
	|| B = t.ByteCount.log2
	|| A = Dest.ReadOrWriteSub(exp, t, b)			 #require

	|| Pos = prop.exportposition >> B
	if !pos // what?
	|| WantAddr = dest is positionrequest
	if WantAddr or pos >= 128						// oof
		.AddASM(asm.ADDK, exp, dest, obj, pos)
		if WantAddr
			return dest
		pos = 0
	
	.AddASM(A, exp, dest: dest,  ptr: Obj,  index: 0, Pos)
	return dest
		

function SetRel	(fn_asm)
	opt	norefcounts
	|| Var = .SimpleVar(exp.first!)	
	|| R = .µ(exp.last!, var)
	if r isnt discard								// x = 1, already done!
		(r is set)
		return .µ(exp.first!, R)


function Num (fn_asm)
	opt norefcounts
	|| d = exp.fastdecl
	|| X = d.exportposition
	target debug
		if x == 0 != exp.iszero // argh
	|| r = asmstate.sh.FindConst(x)
		return r
	Dest = .TempMe(exp, dest)
	.NumToReg(X, exp, Dest)
	(Dest is const)
	return dest
	// loadconst?


function Thg (fn_asm)
	opt norefcounts
													// what if this is a constant?
	|| d = exp.FastDecl
	if d is local
		|| reg = d.reg
		if dest is set								// copy a reg
			debugger
			if !reg.reg					// what?
			.AddASM(asm.BOR, exp, dest, reg)
			return dest
		return reg
	
	if d is const									// We want a number, really
		|| R = dest.reg
		check (R and dest isnt set) (exp)
		|| val = d.exportposition
			.NumToReg(val, exp, R)
			(dest is const)
			return dest
		return asmreg.Zero

	check (d is global) (Exp)
	if dest isnt discard
		return DoGlobal(self, exp, dest, d)
 

function DoGlobal (|&ASMState| self, |message| exp, |AsmReg| Dest, |scdecl| D, |AsmReg|)
	opt	NoRefCounts
	|| addr = dest
	if dest isnt set								// a = glob
		addr = .tempme(exp, dest)

	.AddASM(asm.tabl,  exp, addr,   d.IsLib|int|)

	|| i = d.ExportPosition				#check (exp, "Internal error: No global address")
	.AddASM(dest.ReadOrWrite(Exp), exp, dest,  addr, i)
	return addr as asmmath.Bitcorrect
	

function Not		(fn_asm)
	opt	NoRefCounts
	(dest is negate) = dest isnt Negate
	|| src = .µ(exp.first!, dest)
	if src is AlreadyNegated
		return src
	return .Equals(dest, asmreg(), src, exp)
	

function ARel		(fn_asm)
	opt	NoRefCounts
	|| Sub = exp.name.first == '-'
	return Precrement(self, exp.first!, dest, 2 + Sub)
	

function Minus			(fn_asm)					// -a
	opt	NoRefCounts
	return ASMTmp.DoSingleMath(self, exp, dest, scoperator.minus)
  

function Precrement		(fn_asm)					// --a, ++a
	opt	NoRefCounts
	|| Src = .µ(exp, dest)							// src has the old value.
	if (mode & 2)									// we want src.
		dest = src
	  else
		dest = .TempMe(exp, dest)	
	
	|| D = exp.FastDecl
	|int64| Value = (-1,1)(mode & 1)
	if dest.isfloat
		if dest.fourbytes
			value = value|float|.asint
		  else
			value = value|f64|.asint
	  elseif D.typesuffers
		Value *= D.typesuffers
		check Value.CanStoreAsIntImmediate (exp, "Object too large to increment")
			
	check .TryUseConstant(exp, dest, src, Value, asm.add)		(exp) // shouldn't fail!

	if d isnt local
		.µ(exp, dest.set)							// write it back again
	
	return dest

	
function BRel		(fn_asm)						//  --a,  ++a,  &a,  --glob,  --a.b, -a
	opt	NoRefCounts
	|| n = exp.name.first
	|| F = exp.first!
	if n == '&'
		return .µ(F, dest.requestpos)
	if n == '~'
		return dosinglemath(self, exp, dest, scoperator.bnot)
	if n == '!'
		return Not(self, F, dest)

	if exp.name == 1								// -a
		return Minus(Self, f, dest)
	
	|| Sub = n == '-'
	return Precrement(self, F, dest, Sub|int|)



function DoSingleMath (|&ASMState| self, |message| exp, |AsmReg| Dest, |scoperator| Scop, |AsmReg|)
	|| Src = .µ(exp, dest)
	(src is SingleExpr)
	return DoMathSub(self, exp, dest, src, scop)


function DoMath (fn_asm)
	|| op = exp.second!
	return domathsub(self, exp, dest, 0.reg, op.obj|scoperator|)
		

function DoMathSub (|&ASMState| self,  |message| exp,  |AsmReg| Dest,  |asmreg| mr,  |scoperator?| Scop, |AsmReg|)
	opt norefcounts

	|| F = exp.first!
	|| op = f.next!
	
	|| ml = asmreg()
	if mr isnt singleexpr
		|| OV = .OpenVars
		ml = .µ(F, asmreg.StayOpen)
		mr = .µ(exp.last!, asmreg.StayOpen)
		.CloseVars(OV)
		(ml isnt StayOpen)
		(mr isnt StayOpen)

	|| fn = scop.ASM2					#expect (op, "No ASM for this operator?")
	dest = .tempme(exp, dest) 
	dest.µtype = ml.µtype				// assignment conversion needs doing?	
	(dest as= scop!.code)
	(dest is frommath)

	ifn  ml is const  and  mr is const
		return (fn)(self, dest, ml, mr, op)

	(Dest is const)
	|| R = (fn)(self, dest, ml, mr, op)
	if r isnt const // hmm?
		debugger 
		(fn)(self, dest, ml, mr, op)
	return .DoConsts(dest, ml, mr)


function Ignore			(fn_asm)


function Unexpected		(fn_asm)
	"Bad asmtmp"
	debugger


}


helper ASMReg.ReadOrWriteSub (|message| m, |datatypecode| t, |int| bytes, |asm|)
	if self is set
		if bytes <= 4
			return ASMtmp.WriteASM[bytes]
		error (m, "Object to large to write")
	  else
		|| B = (bytes<<1) + t.issigned
		if b <= 9
			return ASMtmp.ReadASM[b]
		error (m, "Object to large to read")


function ASMReg.ReadOrWrite (|message| m, |asm|)
	|| T = .µtype
	|| bytes = t.ByteCount.log2
	return .ReadOrWriteSub(m, t, bytes)


function asmstate.SimpleVar (|message| m, |asmreg|)
	opt	norefcounts
	real self
	|| fn = m.func 
	while fn == @bra or @type
		m = m.first!
		fn = m.func
	if fn == @thg
		return asmtmp.thg(asmstate.sh, m)
	if fn == @num
		return asmtmp.num(asmstate.sh, m)


function int64.CanStoreAsIntImmediate (|bool|)
	return ((self << 50)>>50) == self


function uint64.CanStoreAsFloatImmediate (|bool|)
	return ((self << 50)>>50) == self

