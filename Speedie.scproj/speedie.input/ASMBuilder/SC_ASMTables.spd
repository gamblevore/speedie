

dispatch fn_asm_table (fn_asm)
	@arg:
		opt norefcounts
		|| OV = .openvars
		|| DiscardResult = 128.reg
		for ch.fast in exp
			.µ(ch, DiscardResult)
		.closevars(OV)


	@decl: // yay
		debugger


	@num:
		debugger


	@rel:
		opt norefcounts
		|| OV = .openvars
		rz = .DoRels(exp.first!, reg)
		.closevars(OV)


	@thg: ASMTmp.Thg


	@bra:
		opt norefcounts
		return .µ(exp.first!, reg)

	@sheb: ASMtmp.Ignore
		

	@list: // vectors
		debugger


	@func:
		opt norefcounts
		// 0, a, b, fn(), b*b, a*a
		// 0, a, b, b*b, a*a, fn()
		rz = .DoFunc(exp.last!, reg)


	@acc: // pointers?
		debugger


	@brel: // ++, --, -
		debugger


	@arel: // ++, --, 
		debugger


	@type: // 
		// bit narrowing, float conversion, etc?
		// could be others too? vectors?
		debugger

	(ASMtmp.kDebugger):		ASMtmp.Debugger
	(ASMtmp.kif):			ASMtmp.If
	(ASMtmp.krejoin):		ASMtmp.Rejoin
	(ASMtmp.kreturn):		ASMtmp.return
	(ASMtmp.kwhile):		ASMtmp.While

	(asmtmp.kContinue):		ASMtmp.Continue
	(asmtmp.kExit):			ASMtmp.Exit
	(asmtmp.ksetvar):		ASMtmp.SetRel
	(asmtmp.kStatExpr): 	ASMtmp.StatExpr
	(asmtmp.kTern):			ASMtmp.Tern

	(asmtmp.kIgnore):		ASMtmp.Ignore
	(asmtmp.kFaille):		ASMtmp.Ignore

	@tmp:
		#!the tmp type should have already been set
		debugger
	63:
		0


datatype ASMtmp (uint16)
	syntax is (|asmtmp| t, |bool|)
		return self == t

	constants
		|asmtmp| 
		kElseIf = 48
		kIf
		kWhile
		kContinue
		kExit
		kReturn
		kRejoin
		kSwap
		kTern
		kStatExpr
		kSetVar
		kIgnore
		kDebugger
		kFaille = 63
	

// for some reason, replacing this will cause speedie to generate bad code
// I guess I am setting the Flags somewhere, or testing them? but I can't see where.
function Message.ASMType (|ASMTmp|)
	rz = .FLAGS & 63

function Message.ASMType (assigns:|ASMTmp|)
	target debug: if .objectid == 0
	value = (.FLAGS &~ 63) ||| value
	.FLAGS = value 


extend_module ASMtmp {

|asm_mem[10]| ReadASM
|asm_mem[5]| WriteASM


function StateExpr		(fn_asm): debugger
function Debugger		(fn_asm): debugger
function Continue		(fn_asm): debugger
function Exit			(fn_asm): debugger
function SetRel			(fn_asm): debugger
function StatExpr		(fn_asm): debugger
function Tern			(fn_asm): debugger
function If				(fn_asm): debugger
function Rejoin			(fn_asm): debugger
function While			(fn_asm): debugger

function Ignore			(fn_asm)
function Unexpected		(fn_asm)
	"Bad asmtmp"
	debugger

function Return			(fn_asm)
	opt norefcounts
	|| f = exp.first
		rz = .µ(f)
	.AddASM(asm.RET, exp, rz)


function Thg (fn_asm)
	opt norefcounts
								// what if this is a constant?
	|| d = exp.fastDecl
	if d is local
		if !d.dreg.reg			// what?
		return d.dreg			// we don't copy registers HERE, but in SetRel
	
	if d is const				// we want a number, really
		debugger
// might be nice to store that value somewhere... on the decl. So we don't reparse it each time!
//		if !.TrySmallConst(reg, value, orig): .AddASM(asm.setn, exp, reg)

	if reg.isset
		return SetGlobal(self, exp, reg)
	if !reg.isdiscard
		return ReadGlobal(self, exp, reg)



function SetGlobal (fn_asm)



function ReadGlobal (fn_asm)
	reg = .NeedSomewhere(exp, reg)
	.AddASM(asm.RD1U, exp, reg)

// Now put that global into the reg!
// need to look at how the mem() function works...
// also need a table of ASM per bit-size
// SIMDs will need a simd reader ASM...
// i think just a RD16 is enough?

}
	
