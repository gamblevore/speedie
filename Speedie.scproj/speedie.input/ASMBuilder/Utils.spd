


function message.ASMDecl (|SCDecl!|)
	opt norefcounts
	rz = .fastdecl
	if (rz is Global) and !rz.au.ExportPosition // oof
		|| P = .first
			rz.au.ExportPosition = p.ASMDecl.au.ExportPosition
			rz.sanity
			target debug:  if !rz.au.ExportPosition // oof
				
	
	if rz.typeonly == 0//datatypecode.unusedtype
		rz.wholetype = rz.CalculateASMType
	target debug: rz.ASMSanity


function assembler.RequestOp (|asm| op, |message| exp, |&fatasm|)
	|| p = .Curr
	if p < .End
		if  exp.Position < 0
		p[0] = nil
		._curr = p + 1
		P._op = op
		p.debug = exp
		p.BranchDepth = .State.BranchDepth
		p.LoopDepth = .State.LoopDepth
		p.BasicBlock = .BasicBlock
		return p

	error (exp, "Function too large (over 64K)")
	return .start
	
	
function message.OperatorMul (|asm| op, |&fatasm|)
	|| a = Assembler.sh
	return a.RequestOp(op, self)
	


target debug
	function scdecl.ASMSanity 
		ifn  .IsCarray  or  .PointerCount  or  .IsObject  or  .IsBareStruct
			|| size = .type.Size
			|| T = .TypeOnly
			if T is Vec3 or ivec3
				size = 12
			if size != T.bytecount // sigh. what?
				#!"Should we have set the dtype when the decl was created? or at least verified in the nil-checker?"
				#!"We could change it if it is only 112."
				debugger




function Assembler.OpenVars (|uint64|)
	return (.VDecls|uint64| << 0) ||| (.VTemps|uint64| << 32)


function Assembler.CloseVars (|uint64| Orig,  |message| exp = nil,  |asmreg| Return=nil, |asmreg|)
	opt NoRefCounts
	
	|| OrigTemps = Orig >> 32
	|| OrigDecls = (orig << 32) >> 32

	while .CloseOneVar(exp, origtemps, .vtemps)
		0
	
	while .CloseOneVar(exp, OrigDecls, .vdecls)
		0

	return Return


function Assembler.CloseOneVar (|message?| exp,  |uint| Orig,  |$uint| Curr,  |bool|)
	opt norefcounts										/// READ TABLE ///
	target debug
		|| C0 = Curr
	|| Extra = Curr &~ Orig
	if Extra == -1 // huh?
	require Extra
	
	|| v = extra.log2
	Curr &=~ (1<<v)
	.KnownValuesMap &=~ (1<<v)

	|| fat = .Registers[v]
	if !fat: return true
	.registers[v] = nil
	if fat.Âµrefcount <= 0 and fat is NotAlteredInbranch		
		ifn (Orig&1)  and  !.state.inlinedepth  and  options.optimise < 4
			.Nop(fat) 
			
						
	if fat is CompilerCreated							/// NOP UNUSED VARS ///
		.AskNop(fat)


	if  exp  and  fat isa asm.allo						/// DEALLOCATE STRUCTS ///
		ASMType.AllocBearStruct(-1, exp.DeepLast, v.asm, fat.Reg(1)<<4)

	return true



function scdecl.CalculateASMType (|asmreg|)
	opt norefcounts
	if .pointercount or .iscarray
		// carrays must be allocated. So this reg will store a pointer to the carray.
		return datatypecode._voidptr|ASMReg|

	|| t = .type
	|| b = t.BaseType
	if b > scnodetype.DataType
		return datatypecode._voidptr|ASMReg|
	
	|| I = t.typeinfo
	return I|asmreg|


function SCFunction.ASMReturn (|scdecl|)
	opt norefcounts
	|| T = .returntype
	if t isnt ReturnedStruct
		return T


function SCFunction.RealReturnType (|scdecl|)
	opt norefcounts
	|| T = .returntype
	// if t is returnedstruct: return typevoid // better?
	if t and t isnt ReturnedStruct
		return T
	return TypeVoid


datatype VarUseMode (int)
	Flags
		Linkable
		ReturnAble
		SetAble
		Return = ReturnAble
		Set = SetAble
		ExistingVar
		Sometimes			// unused so far.
	
	syntax is (|VarUseMode| v, |bool|)
		return self&v

