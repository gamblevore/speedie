


dispatch fn_asm_table (fn_asm)
	@arg:  ASMType.Arg
	@decl: ASMType.decl
	@num:  ASMType.num
	@char: ASMType.char
	@rel:  ASMType.DoMath
	@thg:  ASMType.Thg
	@bra:  ASMType.First
	@sheb: ASMType.Sheb
	@sstr: ASMState.Str
	@list: ASMState.VectorLoad
	@func: ASMType.ASMFunction
	@dot:  ASMType.Dot
	@acc:  ASMType.Access
	@brel: ASMType.Brel		// ++, --, -, &
	@arel: ASMType.arel     // ++, --, 
	@type:					ASMType.TypeCast
	@tmp:					ASMType.unexpected

	(ASMType.kif):			ASMstate.If
	(ASMType.kwhile):		ASMstate.While
	(ASMType.kTern):		ASMstate.Ternary
	(ASMType.kContinue):	ASMstate.Continue
	(ASMType.kExit):		ASMstate.Exit

	(ASMType.kDebugger):	ASMType.Debugger
	(ASMType.krejoin):		ASMType.First
	(ASMType.kreturn):		ASMType.return

	(ASMType.kSetRel):		ASMType.SetRel
	(ASMType.kStatExpr): 	ASMType.StatExpr
	(asmtype.kRefCount):	asmstate.RefCount
	(asmtype.kSwizzle):		asmstate.VecSwizzle
	(ASMType.kIgnore):		ASMType.Ignore
	(ASMType.kFail):		ASMType.Ignore

	63:						ASMType.unexpected



extend_module ASMType {
constants
	IncrAfter = 2
	IncrBefore = 0
	
|asm_Read[10]|	ReadASM
|asm_Write[5]|	WriteASM
|message--|		LastDebugMark

function InitAccess
	|| R = &ASMType.ReadASM[0]
	|| W = &ASMType.WriteASM[0]
	R++[] = ASM.RD1U
	R++[] = ASM.RD1S
	R++[] = ASM.RD2U
	R++[] = ASM.RD2S
	R++[] = ASM.RD4U
	R++[] = ASM.RD4S
	R++[] = ASM.RD8U
	R++[] = ASM.RD8U
	R++[] = ASM.RD16
	R++[] = ASM.RD16
	#!Write	
	W++[] = ASM.WR1U
	W++[] = ASM.WR2U
	W++[] = ASM.WR4U
	W++[] = ASM.WR8U
	W++[] = ASM.WR16


function Debugger (fn_asm)
	if Options.TargetDebug
		return exp.TRAP(asmreg(), 0, 2) * ASMReg() // 2 == sigint
	return asmreg()
	

function StatExpr (fn_asm)
	opt norefcounts
	for ch.fast in exp.first
		if ch.islast
			return .µGetASM(ch, dest)
		.µ(ch, asmreg.Discard)

	
function First (fn_asm)
	opt norefcounts
	return .µGetASM(exp.first!, dest)


function Sheb (fn_asm)
	opt NoRefCounts
	LastDebugMark = exp
	return exp.noop * asmreg()
	
	
function ReturnOpt (|&ASMState| self, |int| Ret, |int| bb, |bool|)
	|| l = .last
	
	// seems the wrong order... it is:   bor, bor, bor, func.   Not:   func, bor, bor, bor
	while l isa asm.BORR
		Ret = PreOptBOR(self, l, Ret) #require
		l--
		
	if l isa asm.fnc or asm.fnc3
		return PreOptFnc(self, l, bb)


function PreOptBOR (|&ASMState| self, |FATASM| l, |int| Ret, |int|)
	(self)
	require !l.prms[2]						// x = b ||| 0  -->  x = b
	require Ret == l.Prm(0)	// return x
	rz = l.r1
	using L // SyntaxUsingComplete needs upgrade to deref?
		l.msg.ret(rz.asm)
		l.Operatormul(asmreg.exit)
	rz&=31


function PreOptFnc (|&ASMState| self, |FATASM| l, |int| bb, |bool|)
	require !l.r3 // no pExt
	using L
		l.msg.tail(l.r1, l.r2) // syntaxusingcomplete needs upgrade to deref?
		L.OperatorMul(asmreg.exit)
		return bb == .basicblock // no blocks occured

	
function InlinedReturn (|&ASMState| self, |message| exp, |asmreg| dest, |AsmReg|)
	opt norefcounts
	// What about getting the address of registers?
	dest = dest as asmreg.ExitFunction * .TailInlineable
	dest = dest as asmreg.ExitAtAll
	|| bb = .BasicBlock
	|| f = exp.first
		if dest.reg
			dest = .µinto(f, dest)
		  else
			dest = .µ(f, asmreg.discard)
	
	.DeallocStack
	if .TailInlineable and ReturnOpt(self, dest, bb)
		return dest
	
	|| fat = exp.RET(Dest)
	fat.µRefCount = 1
	(fat is CondAnswer)
	return fat*Dest

	
/*
Can this occur? From what C code? Can I block it?

	ALLOC(1)
	FUNC // just de-alloc before the optimise thingy.
	ALLOC(-1)
	RET

function abc
	|struct| WorkSpace
	.func(WorkSpace)
	return
*/



function NilStrooct (|&asmstate| self, |message| exp, |ASMReg| dest, |ASMReg|)
	opt norefcounts
	|| inner = exp.first
	expect ((inner == @arg) and !inner.hasany) (exp) // nil
	|| zzeerrooo = asmreg() as asmreg.FromZeroMemory
	zzeerrooo.reg = dest.reg
	return .temponly(exp, zzeerrooo)


function Return (fn_asm)
	opt norefcounts
	|| L = .state.return		// can remove constants, so try first
		return InlinedReturn(self, exp, L)

	|| bb = .BasicBlock
	|| f = exp.first
		dest = .ExistingVar(f, VarUseMode.return)
		if !dest
			dest = .µGetASM(f, ASMReg.ExitFunction)
	  else
		dest = asmreg()
	
	.DeallocStack
	if ReturnOpt(self, dest, bb)
		return asmreg.exit
	
	|| D0 = .SafeDecr
		if d0.reg != dest.reg // problem
	|| D1 = .decr
	|| D2 = .decr
	
	|ind| K = -1
	// we shouldn't be able to inline consts from other blocks!
	if !D0
		K = .Const(dest, 8, true)
	|| HasK = K>=0
	|| fat = exp.RET(dest*!HasK, D1, D2, (D0!=nil)|int|, K * HasK)
	fat.µRefCount++
	return fat * asmreg.Exit
	


function TypeCast (fn_asm)
	opt norefcounts
	|| f = exp.first!
	dest.µtype = exp.asmdecl.datatype
	|| fReg = .µGetASM(F, dest)
	if fReg.µtype == dest.µtype
		return fReg // already done!
	return TypeCastSub(self, exp, dest, freg)


function TypeCastSub (|&asmstate| self, |message| exp, |ASMReg| dest, |ASMReg| from, |ASMReg|)
	opt norefcounts
	|| NewDecl = exp.ASMDecl
	if newdecl.isbarestruct
		return nilstrooct(self, exp, dest)
		
	|| NewType = NewDecl.regtype
	if !from.Reg												// x = 0|float|
		from.µtype = NewType
		return from

	|| OldType = from.µtype	
	if NewType is bool
		if (OldType is bool) and (dest isnt negate)				// x = true|bool| // why?
			return from
		return .NotEq(dest, asmreg(), from, exp)

	if  (NewType.BitCount == OldType.BitCount)  and  NewType.IsFloat == oldtype.isfloat
		from.µtype = newtype
		return from
	
	dest = .TempOnly(exp, dest)
	dest.µType = NewType
	if from is ConstOutput
		return ConstConvert(self, exp, dest, from, oldtype, newtype)
		
	if oldtype.isfloat or newtype.isfloat
		return exp.CONV(dest, from, oldtype.ASMConv(newtype))*dest
	|| sh2 = 64 - OldType.BitCount
	return exp.BFLG(dest, from, sh2, sh2, from.signed|int|) * dest



function ConstConvert  (|&asmstate| self, |message| exp, |ASMReg| dest, |ASMReg| from, |Datatypecode| Old, |Datatypecode| New, |ASMReg|)
	// this converts in place...	// we don't want that.
	
	|| srf = from.NeedFAT
	|| NC = New.BitCount
	|int64| K
	if old.isint!=new.isint
		K = srf.FloatIntConvConst(old, new)
	  elseif new.isfloat
		K = srf.FloatConvConst(NC)
	  else
		|| sh = 64 - NC
		|| oof = srf.Const << sh
		K = (oof|int64| >> sh, oof|uint64| >> sh)(dest.Signed) // shift up and down

	.NopConst(from)
	return .NumToReg(exp, K, dest, new)


function Decl (fn_asm)
	rz = DeclSub(self, exp)
	if options.Optimise < 4
		|| fat = rz.fat
			fat.µRefCount++		// Keep vars viewable for debugging
								// Actually its not an issue for even release builds!
								// just don't add vars you don't need!


function SetRel (fn_asm)						// function relset (
	opt	norefcounts								//     x[func()] = y++
	|| A = exp.first!.asmunbra
	|| B = exp.last!
	|| X = .ExistingVar(A, VarUseMode.set)
		dest = .µInto(B, X)
		|| D = a.ASMDecl
		.MakeConstFromASM(d, nil, dest)
		return dest

	// probably x.y = z, or x[y] = z 
	dest = .µGetASM(B, asmreg()) 
	dest = (dest asnt ASMReg.RealConst) as AsmReg.set
	return .µ(A, dest as asmreg.AlwaysSet)



function AllocBearStruct (|&asmstate| self, |message| exp, |int| v, |scdecl| ty, |int| dir, |asmreg|)
	(self)
	|| size = ty.SizeOfQuery
	size = (size+15)>>4
	|| dest = v.asm
	return exp.ALLO(dest, size*dir) * dest
	
	
	
function DeclSub (fn_asm)
	opt norefcounts
	
	|| rel = exp.last!
	|| ty = exp.fastdecl
	if !exp.obj
		debugger
		ty = rel.first!.fastdecl
	ty.BranchDepth = .state.BranchDepth
	dest = .DeclareMe(rel, ty)
	if ty.IsBareStruct
		return AllocBearStruct(self, exp, dest, ty, 1)
		
	|| item = rel.last!

	if ty isnt local							// a carray or somthing?? idk
	if (ty is alteredinbranch) or (ty isnt local)
		return .µInto(item, dest)

	|| K = .µInto(item, dest)
	if k is ConstOutput
		.MakeConstFromASM(ty, k, nil)
	return k

	
function ArgSub (|&ASMState| self, |message| exp, |&sc_hoister| H, |AsmReg|)
	opt norefcounts
	|| OV = .OpenVars
	
	for ch.fast in exp
		if h
			h.HoistNormal(ch)
		if ch.func == @decl
			ASMType.Decl(self, ch, AsmReg.RealDiscard)
		  else
			|| What = .µ(ch, AsmReg.RealDiscard)
			if what & asmreg.exit // what is exit
				rz = what
				exit

	if rz & asmreg.exit
		exp = nil // don't AllocBearStruct(-1) 
	.CloseVars(OV, exp)


function Arg (fn_asm) // argument 
	return ArgSub(self, exp, nil)


function Access (fn_asm)									// a[b], struct.mem[b]
	opt	NoRefCounts
	if dest isnt set
		dest = .TempTyped(exp, dest)
	
	|| f = exp.first!
	|| d = f.asmdecl

	|| base = .µGetASM(f)									// x = a.b[0]
	|| sc = exp.Second.first!
	if base is InlinedAccess
/		return base

	|| vara = .µGetASM(sc)

	if d.TypeInfo.VecCount > 1
		return .VecAccess(exp, dest, base, vara)

	target debug
		if !d.PointerCount and !d.IsCarray
	
	if dest isnt AddrRequest
		dest.µType = exp.ASMDecl.DataType
		return .ReadOrWrite(Dest, exp, base, vara, d)
		
	dest = dest.HaveAddr
	base = base.HaveAddr
	dest.µType = DataTypeCode._voidptr
	return .Plus(dest, base, vara, exp)
	


function Dot (fn_asm)										// a.b
	opt	NoRefCounts
	|asmreg| SubDest // fool around with optimising this
	if dest isnt set // **once** everything is working
		dest = .TempTyped(exp, dest)
		subdest = subdest.usereg(dest)
	
	|| prop = exp.ASMDecl
	if prop is const // wait? don't these all get pre-transformed? SHOULD they be?
		|| fn = prop.islookuponly
		if fn isa scfunction
			return DoGlobal(self, exp, dest, prop)
		return ASMConst(self, exp, dest, prop)
	if prop is global
		return DoGlobal(self, exp, dest, prop)
	|| F = exp.first!		 
	|| Obj = .µGetASM(F, subdest)
	|| T = prop.typeinfo
	dest.µtype = T
	
	|int64| Pos = prop.ExportPosition
	if (pos < 0 or pos > 1K) // what?
	
	if (dest is AddrRequest) or prop.IsCarray
		pos *= t.ByteCount
		if prop.iscarray
			dest.µtype = DataTypeCode._voidptr
		dest = dest.haveaddr
		return .AddToReg(exp, dest, obj as ASMReg.NoScale, pos)
	
	return .ReadOrWrite(Dest, exp, obj, ASMReg(), prop, pos)


function Char (fn_asm)
	return num(self, exp, dest, mode) // its just a num, right?


function Num (fn_asm)
	opt norefcounts
	|| d = exp.ASMDecl
	|| T = d.typeonly
	dest.µtype = T
	(dest is RealConst)
	
	if d.NilReg is hoisted
		Dest.reg = d.nilreg&31
		dest.fatindex = D.fatconstindex
		return Dest
	
	return .NumToReg(exp, d.exportposition, dest, T)


function Thg (fn_asm)
	|| thg = asmtype.ThgSub(self, exp, dest)
	|| reg = thg.reg
	if (reg-1)|uint| < 31							// what?
		return thg
	if reg == 0  and  thg is RealConst
		return thg // its still ok.   nil/false
	error (exp, "Register out of bounds")


function ASMConst (|&ASMState| self, |message| exp, |AsmReg| Dest, |scdecl| d, |asmreg|)
	(dest is RealConst)
	if dest isnt ConstRequest
		dest.µtype = d.datatype
		if d.nilreg isnt hoisted
			return .NumToReg(exp, d.exportposition, dest, dest.µtype)
		dest.fatindex = d.fatconstindex
		Dest.reg = d.nilreg&31
		(dest isnt constinput)
	return dest


function ThgSub (|&ASMState| self, |message| exp, |AsmReg| Dest, |asmreg|)
	opt norefcounts
	|| d = exp.ASMDecl
	if d is local
		|| T = .ThgASM(d)
		if dest isnt addrneed
			return T
		if dest is DeclareInlineParam // &A
			(t is InlinedAccess)
			return T
		if d.IsbareStruct // it already has the address
			return T.haveaddr
		dest = .TempTyped(exp, dest, d)
		return exp.GRAB(dest, t) * dest.HaveAddr
	
	if d is const
		return ASMConst(self, exp, dest, d)

	if dest isnt ConstRequest
		check (d is global) (Exp)
		return DoGlobal(self, exp, dest, d)


function GlobAddr (|scdecl| D, |message| exp, |AsmReg| Dest, |asmreg|)
	opt norefcounts
	if d.NilReg is Hoisted
		Dest = d.hoisted
	  else
		|int64| iTable = d.ExportPosition
		expect (iTable > 0)          (exp, "No global address".internal)
		expect (iTable <= 18~bits)   (exp, "Used over 256K of global data")
		Dest = exp.GTAB(dest,  (d.IsLib)|int|,  iTable) * dest
	dest.µtype = DataTypeCode._voidptr
	return dest.HaveAddr


function DoGlobal (|&ASMState| self, |message| exp, |AsmReg| Dest, |scdecl| D, |ASMReg|)
	opt	NoRefCounts
	target debug
		|| d2 = exp.asmdecl
		if !d.minimatch(d2) // Remove d2. it the same as D.
	if dest isnt set
		dest = .TempTyped(exp, dest)
	
	|| addr = GlobAddr(d, exp, dest)
		if dest is AddrRequest
			addr.µtype = d.DataType
			return addr.HaveAddr
		
		dest.µtype = d.DataType
		dest = dest asnt ASMReg.ContainsAddr
		return .ReadOrWrite(dest, Exp, addr, ASMReg(), d, 0)
	


function AddressOf (fn_asm)
	rz = .µGetASM(exp, dest as asmreg.addrneed)
	if (rz is ContainsAddr)
		return rz
	error (exp, "ASM fail")
	.µGetASM(exp, dest as asmreg.addrneed)


function BoolNot (fn_asm)							// !a
	dest = dest.negate
	|| src = .µGetASM(exp, dest)
	if src is AlreadyNegated
		return src
	return .Exists(dest, src, exp)
	

///   ///

function IncrSlowOnAddr (|&ASMState| self, |message| f, |ASMReg| Dest, |int| Mode, |ASMReg| Addr, |int64| Amount, |ASMReg|)	
	opt	NoRefCounts									// *a, x = *(a.b)
	|| TmpCloser = .OpenVars // remove this open/close? We CAN remove??? OOF
	.Read(Dest, F, dest, addr)						// READ

	|| NewValue = (.Temptyped(f), dest)(mode & IncrAfter)
	.IncrPre(f, NewValue, dest, amount)				// ADD

	|| fat = .write(dest, f, newvalue, addr)		// WRITE BACK

	// the new value should exist! now lets close
	.CloseVars(TmpCloser)
	return fat * Dest


function IncrOnAddr (|&ASMState| self, |message| f, |AsmReg| Dest, |int| Mode, |AsmReg| Addr, |int64| Amount, |asmreg|)
	ifn  dest.isint  and  amount.fits(7)
		return IncrSlowOnAddr(self, f, dest, mode, Addr, Amount)
	|| bc = dest.µtype.ByteCount.log2
	|| offset = 0
	addr = .InlineOffsetOpt(addr, bc, &offset, 5~bits)
	|| fat = f.CNTC(Addr, dest, offset, amount, bc)
	if mode & IncrAfter
		fat._op = asm.cntd
	return fat * dest


function IncrAmount (|asmreg| upon, |int| IsPlus, |scdecl| D,  |int64|)
	opt norefcounts
	rz = (1,-1)(IsPlus & 1)
	if upon.isfloat
		if upon.FourBytes
			rz = rz|float|.asint
		  else
			rz = rz|Float64|.asint
	  elseif D.TypeSuffers
		rz *= D.PointerIncrement



function NotTemp (|&asmstate| self, |asmreg| Src, |message| p)
	|| r = .state.return.reg
	if r and r == src.reg
		return
	check (src isnt temp) (p, "Can't increment temporary value.")



function Incrementatulatorifier		(fn_asm)				// --a++
	visible
	opt	NoRefCounts
	|| Src = .µGetASM(exp, dest as ASMReg.AddrRequest)
	|| Amount = IncrAmount(src, mode, exp.ASMDecl)
	if !dest.reg and dest isnt Discard
		dest = .TempTyped(exp, dest)
	
	|| p = exp.parent! // better positions
	if src is ContainsAddr
		dest.µType = src.µType
		return IncrOnAddr(self, p, dest, mode, src, amount)
	
	NotTemp(self, src, p)
	if mode & IncrAfter
		return .IncrPost(p, dest, src, amount)				// x++,	 y = x++
	return .IncrPre(p, dest, src, Amount)					// ++x,	 y = ++x




function ARel (fn_asm)
	opt	NoRefCounts
	|| F = exp.name[]
	if F == '?' or '!'
		return .µGetASM(exp.first!, dest)
	|| M = (F == '+')|int|
	if dest isnt discard
		M += IncrAfter
	return Incrementatulatorifier(self, exp.first!, dest, M)



function BRel (fn_asm)						//  --a,  ++a,  &a,  --glob,  --a.b, -a
	opt	NoRefCounts
	|| S = exp.name
	|| n = S[]
	if n == '~'
		return .DoMathSub(exp, dest, scoperator.bnot.asm!)
	if n == '-' and S == 1								// -a
		return .DoMathSub(exp, dest, scoperator.Negative.asm!)

	|| F = exp.first!
	if n == '!'
		return BoolNot(self, F, dest)
	if n == '&'
		return AddressOf(self, f, dest)
	
	|| IsPlusPlus = n == '+'						// ++a, --a
	return Incrementatulatorifier(self, F, dest, IsPlusPlus|int|)



function DoMath (fn_asm)
	opt norefcounts
	|| op = exp.second!
	|| scop = op.obj|scoperator|
		if scop is AndOr
			return .ASMBoolBadnessMadness(exp, dest, scop.Kind)
		|| fn = scop.asm
			return .DoMathSub(exp, dest, fn)
	error (op, "No ASM for this operator?")
	debugger // what?



function Ignore			(fn_asm)
	return ASMReg()


function Unexpected		(fn_asm)
	if !exp.asmtype
		|| f = exp.func|int|
			exp.asmtype = f
			return .µGetASM(exp, dest)
	error (exp, "bad ASMType")
}



extend ASMState {
function message.ASMUnbra (|message|)
	opt	norefcounts
	real self
	|| fn = .func 
	while (fn == @bra) or ((fn == @type) and .TypeCastDoesnothing)
		self = .first!
		fn = .func
	return self


// would be nice to allow --X or ++X
// however, what if its being passed to a function?
// and the function is inline?
// in fact, what if it isnt inline? I think we need tests for those?
function ExistingVar (|message| m, |VarUseMode| Mode = 0, |asmreg|)
	opt	norefcounts
	real self
	m = m.ASMUnbra
	|| fn = m.func 
	if fn == @thg
		return .ASMLocal(m, mode)
	if fn != @num
		return nil
	|| d = m.ASMDecl
	if d.nilreg is hoisted
		rz = d.nilreg|int|.asm
		rz.µtype = d.DataType
	if (d is const) and !d.exportposition
		return .NumToReg(m, 0, asmreg(), d.DataType)


function Str (fn_asm)
	opt	norefcounts
	dest = .TempOnly(exp, dest)
	|| real = exp.name|MessageID|
	dest.µtype = DataTypeCode._voidptr
	return exp.gstr(dest, 0, real.ID) * dest // seems good!


helper DoMathSub (|message| exp,  |ASMReg| Dest,  |fn_opasm!| fn, |ASMReg|)
	opt norefcounts
	|| ml = ASMReg()
	|| mr = ASMReg()
	|| First = exp.first!
	if First.islast
		ml = .µGetASM(first, dest)
	  else
		|| Closer = .OpenVars
		|| discardmode = dest & AsmReg.Discard
		|| Mode = discardmode with dest
		
		ml = .µGetASM(First, mode)
		mode = DiscardMode.with(dest, ml)
		mr = .µ(exp.last!, mode)
		.CloseVars(Closer)
	
	dest = .TempTyped(exp, dest)
	(dest is constoutput) = (ml&mr is constoutput)
	
	|| op = exp.second
	op ?= exp
	rz = (fn)(self, dest, ml, mr, op)
	rz = rz.ConstInputFromMath(ml, mr)
	rz.µtype = dest.µtype


function ASMReg.ConstInputFromMath (|asmreg| L, |asmreg| R, |asmreg|)
	if self is constoutput
		(self is constinput) = l.ConstEnough & r.ConstEnough
	return self


function ASMReg.ConstEnough (|bool|)
	return self|uint64| & asmreg.NotUnConst|uint64|


function ThgASM (|scdecl| d, |asmreg|)
	|| T = d.WholeType as ASMReg.FromExistingVar
	(t is param) = (d is param) // unused?
	if (d isnt alteredinbranch)
		|| fi = d.FatConstIndex
			|| f = fi|uint|.fat
			if f is ConstOutput
				(T is ConstOutput)
				t.FatIndex = fi
	|| rr = T.reg
		|| Ret = .State.Return
		if rr and rr == ret.reg
			(T is temp = ret is temp)
	return T


function ASMLocal (|message| s, |VarUseMode| mode, |asmreg|)
	opt	norefcounts
	|| d = s.ASMDecl
	if d is local
		if mode is Return
			.fn.TrackReturns(d)
		rz = .ThgASM(d)


function SetDeclToConst (|scdecl| decl, |asmreg| Initial, |&fatasm| f, |bool|)
	if (Initial is ConstOutput) and (decl isnt AlteredInBranch)
		if f
			(decl is const)
			// || k = 1, k = 2, k = k + 3
			decl.ExportPosition = f._const
			if !Initial.FatIndex
			decl.FatConstIndex = Initial.fatindex
			return true
		debugger 


function MakeConstFromASM (|scdecl| decl, |asmreg| Initial, |asmreg| NewValue)
	description "Marks Decl as a const, if it definitely is a const. Otherwise marks as NOT CONST. Also nops unused consts. Also updates new const value."
	
	// uncompleted code?

	opt NoRefCounts
	|| f = Initial.fat
	if initial
		require !.SetDeclToConst(decl, initial, f)

// || k = 1, k = X	// clear here
// y = k			// nice.
	|| NewFat = newvalue.fat
	if decl is Const
		(decl isnt const)
		if f
			.AskNop(f)
		decl.ExportPosition = 0
		|| fat = decl.fat
		if fat and newfat != fat
			decl.FatConstIndex = 0
			.AskNop(fat)
	
	if NewValue
		.SetDeclToConst(decl, newvalue, Newfat)


function DeallocStack
	opt norefcounts
	require !.istextual
	|int| top = .VDecls
	|| exp = .Last.msg
	while top > 0
		|| d = .vars[top]!
		if d.IsBareStruct
			exp = exp.DeepLast
			ASMType.AllocBearStruct(self, exp, top, d, -1)
		top--
	
}



function SCFunction.TrackReturns (|scdecl| D)
	if d isnt VarThatGotReturned
		.ReturnedVars++
		(d is VarThatGotReturned)	


function message.HasAsmStuff (|bool|)
	opt norefcounts
	nil checker
	for ch in self
		|| chh = ch.ASMUnbra
		|| fn = chh.func
		if fn != @sheb and @num and @char
			return true


function FatASM.FloatConvConst (|int| DestBitSize, |int64|)
	|| f = &._Const
	if DestBitSize == 64						// f32 to f64
		return (f|&float|[]|Float64|).asint
												// f64 to f32
	return f|&f64|[]|float|.asint


function FatASM.FloatIntConvConst (|datatypecode| src, |datatypecode| dest, |int64|)
	|| dbc = dest.ByteCount
	|| f = (&._Const)|&nil|
	if src.IsInt
		|| v = .Const
		if src.IsSigned
			if dbc == 4
				return v|float|.asint			// i to f32
			return v|Float64|.asint				// i to f64
		if dbc == 4
			return v|uint64||float|.asint		// u to f32
		return v|uint64||Float64|.asint			// u to f64

	// src.isfloat
	if src.ByteCount == 4
		|| f32 = f|&float|[]
		if dest.IsSigned
			return f32|int64|					// f32 to i
		return f32|uint64|						// f32 to u
	
	|| f64 = f|&f64|
	if dest.IsSigned
		return f64|int64|						// f32 to i
	return f64|uint64|							// f32 to u


function DataTypecode.ASMConv (|Datatypecode| To, |int|)
	return to.ASMPart<<2 ||| .asmpart


function DataTypecode.ASMPart (|int|)
	if .isfloat
		return 0 + (.bitcount > 32)
	return 2 + .issigned


function Message.TypeCastDoesNothing (|bool|)
	opt norefcounts
	|| Output = .ASMDecl.typeonly
	|| Input = .first!.ASMDecl.typeonly
	require  Output.VecCount == Input.VecCount			// Vectors
	require  Output.IsFloat  == Input.isfloat			// Floatness
	|| BoolOut = Output is bool
	require (BoolOut) == (Input is bool)				// Boolness

	|| BytesLost = Input.ByteCount - Output.ByteCount
	if output.isfloat
		return BytesLost == 0
	require BytesLost <= 0

	
function string.Trip (|bool|)
	return asmtype.LastDebugMark ~= self 

