


dispatch fn_asm_table (fn_asm)
	@arg: ASMTmp.Arg

	@decl: asmtmp.decl

	@num:  ASMTmp.num

	@rel:  ASMTmp.DoMath

	@thg:  ASMTmp.Thg

	@bra:  ASMTmp.First

	@sheb: ASMtmp.Ignore
		
	@list: // vectors
		debugger
		

	@func: asmtmp.DoFunc

	@dot:  ASMTmp.Dot
	
	@acc:  ASMTmp.Access

	@brel: asmtmp.Brel		// ++, --, -, &

	@arel: asmtmp.arel      // ++, --, 

	@type:					asmtmp.TypeCast

	@tmp:					asmtmp.unexpected

	(ASMtmp.kDebugger):		ASMtmp.Debugger
	(ASMtmp.kif):			ASMtmp.If
	(ASMtmp.krejoin):		ASMtmp.First
	(ASMtmp.kreturn):		ASMtmp.return
	(ASMtmp.kwhile):		ASMtmp.While
	(asmtmp.kTern):			ASMtmp.Ternary

	(asmtmp.kContinue):		ASMtmp.Continue
	(asmtmp.kExit):			ASMtmp.Exit

	(asmtmp.kSetRel):		ASMtmp.SetRel
	(asmtmp.kStatExpr): 	ASMtmp.StatExpr
	(asmtmp.kPointer):		asmtmp.Pointer

	(asmtmp.kIgnore):		ASMtmp.Ignore
	(asmtmp.kFail):			ASMtmp.Ignore

	63:						ASMtmp.unexpected




function asmstate.SimpleTernary (|asmreg| dest, |asmreg| ma, |asmreg| mb, |message| cond, |asmreg|)
	opt norefcounts
	|| dr = dest.reg
	|| mc = (asmreg(), dest)(dr == ma.reg or mb.reg)
	|| µ = .µ(cond, mc)
	return cond.TERN(dest, µ, ma, mb) * dest



function asmstate.AddToReg (|&FATASM| addr, |int| add, |message| exp, |asmreg|)
	|| reg = addr.info
	if add
		return .plus(reg, reg, .NumToReg(add, exp), exp)
	return reg



extend_module ASMTmp {
constants
	IncrAfter = 2
	IncrBefore = 0
	
|asm_Read[10]| ReadASM
|asm_Write[5]| WriteASM

function InitAccess
	|| R = &ASMtmp.ReadASM[0]
	|| W = &ASMtmp.WriteASM[0]
	R++[] = ASM.RD1U, W++[] = ASM.WR1U
	R++[] = ASM.RD1S, W++[] = ASM.WR2U
	R++[] = ASM.RD2U, W++[] = ASM.WR4U
	R++[] = ASM.RD2S, W++[] = ASM.WR8U
	R++[] = ASM.RD4U, W++[] = ASM.WR16
	R++[] = ASM.RD4S
	R++[] = ASM.RD8U
	R++[] = ASM.RD8U
	R++[] = ASM.RD16
	R++[] = ASM.RD16	


function Debugger		(fn_asm)
	if Options.targetdebug
		.addasm(asm.TRAP, exp) // nice!

//	* make typecast a mathopp
//		* typecast consts


// abc(), if (x) return, def()   -->   abc(), if !x {def()}, return
function If				(fn_asm)
	opt norefcounts
	debugger
	
	|| cond = exp.first!,  || arg1 = cond.next!
	|| Else = arg1.next!,  || arg2 = else.first
	|message| ElseIfCond
	if arg2 and arg2 != @arg
		ElseIfCond = arg2
		arg2 = arg2.next
	
	|| Flip = !arg1.HasAsmStuff
		if ElseIfCond		// if (x) {} elseif (y) {yy} else {zz} --> if (!x) {if (y) {yy} else {zz}}
			arg1 = ElseIfCond
		  elseif arg2		// if (x) {} else {y()}                --> if (!x) {y()}...
			arg1 = arg2
		  else				// if (X) --> {x} // with discard
			return .µ(cond, asmreg.arg)
		ElseIfCond = nil
		arg2 = nil

	|| Start = .Branch(cond, Flip)
	rz = .µ(arg1)
	|| AfterFirst = .AddASM(asm.jump, arg1) // marks as ended... to prevent opts. can be removed later during optimisation
	if ElseIfCond or arg2.HasAny
		if ElseIfCond
			|| a = asmreg()
			rz = IF(self, elseifcond, a)
		  else
			rz = ARG(self, arg2)
		AfterFirst.r[3] = .curr - afterfirst
	Start.r[3] = .curr - Start

	
	
function While			(fn_asm)
	opt norefcounts
//	.AddASM(asm.NOOP, exp)							// allow for lupu/lupd?
	|| Jumper = .AddASM(asm.JUMP, exp)				// jump to end... THEN EMIT arg and jump back.
	.WhileStart = jumper
	ASMTmp.arg(self, exp.second)					// arg
	|| CondStart = .curr							// right?
	debugger
	|| ExitPlace = .branch(exp.first!)				// cond
	ExitPlace.r[3] = .curr - Jumper

	while Jumper < ExitPlace
		#!ClearExits
		|| op = Jumper.Op
		if op >= 254								// exit/continue
			Jumper.op = ASM.Jump
			|| oof = (condstart, exitplace)(op==254)
			Jumper.r[0] = oof - Jumper
		Jumper++
	


function Exit			(fn_asm)
	opt norefcounts
	self <~ (255, exp)											// request jump fwd


function Continue		(fn_asm)
	opt norefcounts
	self <~ (254, exp)											// request jump fwd a little less
	

function StatExpr		(fn_asm)
	opt norefcounts
	for ch.fast in exp
		if ch.islast
			return .µ(ch, dest)
		.µ(ch, asmreg.Arg)


function Ternary		(fn_asm)
	opt norefcounts
	
	|| prms = exp.second
	|| cond = prms.first!
	|| A = cond.next!
	|| B = A.next!
	
	|| mA = .ExistingVar(a)
	|| mB = .ExistingVar(b)
	if ma!=nil and mb!=nil
		return .SimpleTernary(dest, ma, mb, cond)

	dest = .TempMe(exp, dest)
	|| FailToSecond = .Branch(cond)
	.µ(A, dest)
	|| Exit = .AddASM(asm.jump, exp)

	FailToSecond.r[3] = .curr - FailToSecond

	rz = .µ(B, dest)
	Exit.r[3] = .curr - Exit
	

	
function First			(fn_asm)
	opt norefcounts
	return .µ(exp.first!, dest)


function Return			(fn_asm)
	opt norefcounts
	|| reg = 0
	|| f = exp.first
		|| Where = asmreg.ForReturn
		where.reg = 1
		where.µtype = asmstate.sh.ReturnType
		reg = .µ(f, Where)
	.AddASM(asm.RET, exp, reg, asmreg(), 1)



function TypeCast		(fn_asm)
	opt norefcounts
	|| sr = .µ(exp.first!, dest)
	|| NewDecl = exp.ASMDecl
	|| NewType = newdecl.regtype
	if newtype is bool
		debugat
		return .NotEq(dest, asmreg(), sr, exp)

	|| OldDecl = exp.first!.ASMDecl
	|| OldType = olddecl.regtype
	|| OC = oldtype.BitCount
	|| NC = newtype.BitCount

	|| FloatDiff = newtype.isfloat != oldtype.isfloat
	if !FloatDiff and (nc == oc)
		return sr
	
	if !sr.reg // x = 0|float|
		sr.µtype = newtype
		return sr
	dest = .TempMe(exp, dest)
	dest.µType = NewType
	
	// why can't i move this into a const collector?
	// cos i don't know what the original input types were?
	// not even from the original fats output?
	// sighhh...... perhaps?
	// its too much structure. its like the messgeid. good idea but NO WAY. leave it for now!
	// old idea is good enough!
	
	|| UponConst = sr is ConstAny
	|&fatasm| fat
	if oldtype.isfloat or newtype.isfloat
		debugat,   #!put in actual numbers later
		fat = .AddASM(asm.CONV, exp, dest, sr, 3-(floatdiff<<1)).BitCorrect
		if UponConst
			(fat.info as= asmreg.ConstAny)
			|| srf = sr.needfat
			if NewType.IsFloat and !FloatDiff
				fat.FloatConvConst(srf, NC)
			  else
				fat.FloatIntConvConst(srf, oldtype, newtype)
	  else
		|| sh = 64 - oc
		fat = .AddASM(asm.BFLG, exp, dest, sr, sh, sh, sr.signed|int|).bitcorrect
		if UponConst
			|| oof = fat.Const << sh
			fat.Const = (oof|int64| >> sh, oof|uint64| >> sh)(sr.Signed) // shift up and down
			(fat.info as= asmreg.ConstAny)
	rz = fat*dest



function Pointer		(fn_asm)
	// *a, x = *(a.b) 
	opt	NoRefCounts
	if dest is AddrRequest // hmmm?
	dest = .TempMe(exp, dest)
	|| Ptr = .µ(exp.first!, dest)
	|| A = Dest.ReadOrWrite(exp)
	|| fat = .AddASM(A, exp, dest,  Ptr).BitCorrect
	return fat*dest


function Decl (fn_asm)
// yay
	opt norefcounts
	|| rel = exp.last!
	|| ty = rel.first!.fastdecl
	|| dcl = .DeclareMe(Exp, ty)
	return SetReg(self, rel.last!, dcl)


function SetReg (|&ASMState| self=asmstate.sh, |message| exp, |AsmReg| Dest, |AsmReg|)
	|| r2 = .µ(exp, dest as AsmReg.set)
	r2 = r2 asnt asmreg.set
	if r2.reg == dest.reg
		return r2
	return .Assign(dest, r2, asmreg(), exp)


/*
// we wanna do this per-instruction actually.
// HOW? Well... any instruction that sets anything... should just update the regfile
// right? 
// just to say where the last fat came from.
// I guess I need to update the instruction gen code.
// so it does this automatically?
// how to do that?

function UpdateRegFile (|&ASMState| self=asmstate.sh, |asmreg| r, |scdecl| dcl, |AsmReg|)
	if dcl is local
		.registers[r.reg] = r.fat					// not sure how this works with nesting?
	return r
*/

function Arg   (fn_asm)
	opt norefcounts
	|| decls = .VDecls
	for ch.fast in exp
		.µ(ch, asmreg.Arg)
	.VDecls = decls


function Access		(fn_asm)						// a[b], struct.mem[b], func()[func2()]
	opt	NoRefCounts
	dest = .tempme(exp, dest)

	|| Ptr = .µ(exp.first!, dest.RequestPos)		// x = a.b[0]
	check (ptr is ContainsAddr) (exp)
	|| Ind = .µ(exp.second!, ptr • dest)
	if (dest is addrrequest)
		return .plus(dest.HaveAddr, ptr, ind, exp)
	
	|| A = Dest.ReadOrWrite(exp)
	|| fat = .AddASM(A, exp, dest, Ptr, ind).BitCorrect
	fat.info = fat.info asnt asmreg.containsaddr
	return fat * dest


function Dot		(fn_asm)						// a.b
	opt	NoRefCounts
	dest = .tempme(exp, dest)
	|| Obj = .µ(exp.first!, dest)
	|| prop = exp.ASMDecl
	|| T = prop.typeinfo
	dest.µtype = T
	debugger
	
	|| A = Dest.ReadOrWrite(exp)
	|| B = t.ByteCount.log2
	|| Pos = prop.exportposition >> B
	if !pos // what?
	if (dest is addrrequest) or (pos >= 128)						// read/write only allows up to 127
		|| addk = .AddASM(asm.ADDK, exp, dest, obj, pos)
		if dest is addrrequest
			return addk.haveaddr*dest
		pos = 0
	
	return .AddASM(A, exp, dest: dest,  ptr: Obj,  index: 0, Pos) * Dest
		

function SetRel	(fn_asm)
	opt	norefcounts					//   x[func()] = y++
	|| L = exp.first!
	|| Var = .ExistingVar(L)
	|| R = .µ(exp.last!, var)
	|| vr = var.reg
		if r.reg == vr
			return nil // done!
	check (r.reg) (self, exp, "SetRel failed")
	
	return setreg(self, exp, r)


function Num (fn_asm)
	opt norefcounts
	|| d = exp.ASMDecl
	|| r = asmstate.sh.FindConst(d)
	if r != nil
		return r
	return .NumToReg(d.exportposition, exp, Dest)


function Thg (fn_asm)
	|| thg = ThgSub(self, exp, dest, mode)
	if thg != nil
		return thg
	error (exp)


function ThgSub (|&ASMState| self, |message| exp, |AsmReg| Dest, |int| Mode, |asmreg|)
	opt norefcounts
													// what if this is a constant?
	|| d = exp.ASMDecl
	if d is local
		|| reg = d.reg
		if (reg.reg-1)|uint| >= 31					// what?
		if !reg.fatindex
			// this reg doesn't have the fat. it should always have the fat
			// how should this be found? Through registers or via decls?
			// we are finding constants via registers... Why not this too?
			// lets see.
			
			// We could give the decl a fat index... (not a bad idea)
			// or we could store the value in the register
			// or both.
			// maybe both is best? At least... it should be in the registers...
			// I think so. We have vdecl and vtmps... so it should be OK.
			// so anytime a var is altered... we just alter all the info, right?
			// so thats just... setrel, decl, and &prm
		return reg

	if d is const
		|| R = dest.reg
		check (R and dest isnt set) (exp)
		|| val = d.exportposition
			require !mode
			(dest is constany)
			return .NumToReg(val, exp, dest)
		return AsmReg()

	if mode
		return nil
	check (d is global) (Exp)
	return DoGlobal(self, exp, dest, d)
 

function DoGlobal (|&ASMState| self, |message| exp, |AsmReg| Dest, |scdecl| D, |asmreg|)
	opt	NoRefCounts
	|| addr = dest
	if dest isnt set								// a = glob
		addr = .tempme(exp, dest)

	|int64| iTable = d.ExportPosition
	expect (iTable > 0)      (exp, "No global address".internal)
	expect (iTable < 16MB)   (exp, "Too much global data")

	if dest is AddrRequest
		|| iAdd = iTable
		if itable >= 16K
			debugger // does this ever happen?
			itable &= 16K-1
		|| a = .AddASM(asm.tabl,  exp,  addr,  (!d.IsLib)|int|,  itable)
		return .addtoreg(a, iadd-itable, exp).haveaddr

	|| iRead = iTable
	|| iOld = iRead
	if iTable < 128
		iTable = 0		// keep the current table. More optimisable.
	  elseif iTable < 16K
		iRead = 0		// itable has a bigger range... so use that. 
	  else
		itable = 0		// Make this optimisable.
		iRead = 0

	|| tabl = .AddASM(asm.TABL,  exp,  addr,  (!d.IsLib)|int|, iTable)
	if !itable and !iread
		.addtoreg(tabl, iold, exp)
	debugger 
	#!This used to return ADDR not DEST. so we we returnign addr.bitcorrect. is this faulse?
	#!probably ok aksuually
	return .AddASM(dest.ReadOrWrite(Exp), exp, dest, addr, iRead).BitCorrect * dest

	

function Not		(fn_asm)
	opt	NoRefCounts
	dest = dest.negate
	|| src = .µ(exp.first!, dest)
	if src is AlreadyNegated
		return src
	return .Equals(dest, asmreg(), src, exp)
	

function Minus			(fn_asm)					// -a
	opt	NoRefCounts
	return ASMTmp.DoSingleMath(self, exp, dest, scoperator.minus.asm!)


function SlowCountOnAddr (|&ASMState| self, |message| f, |AsmReg| Dest, |int| Mode, |AsmReg| Addr, |int64| Amount, |asmreg|)
//	    *a, x = *(a.b) 
	opt	NoRefCounts
	// need to read... also save old value
	|| x = .VTmps
	.AddASM(Dest.Read(F), f, dest, addr)

	// we have read... now we need to add		
	|| NewValue = (.TempMe(f), dest)(mode & IncrAfter)
	.AddConstant(f, NewValue, dest, amount)

	// now we have the new value... lets write it back again
	|| fat = .AddASM(Dest.write(F), f, NewValue, addr)

	// we wrote back the old value... the new value should exist!
	.VTmps = x
	return fat * Dest


function CountOnAddr (|&ASMState| self, |message| f, |AsmReg| Dest, |int| Mode, |AsmReg| Addr, |int64| Amount, |asmreg|)
	ifn  dest.isint  and  amount <= 63  and  amount >= -64
		return SlowCountOnAddr(self, f, dest, mode, Addr, amount)
	|| opp = (ASM.CNTC, ASM.CNTD)(mode & IncrAfter)	
	|| bc  = dest.µtype.ByteCount
	|| log = bc.Log2
	if dest.BitCount * (1<<log) != bc // hmm? maths bug?
	return .AddASM(opp, f, Addr, dest, 0, amount, log) * dest


function IncrAmount (|asmreg| dest, |int| mode, |scdecl| D,  |int64|)
	opt norefcounts
	rz = (1,-1)(mode & 1)
	if dest.isfloat
		if dest.FourBytes
			rz = rz|float|.asint
		  else
			rz = rz|f64|.asint
	  elseif D.TypeSuffers
		rz *= D.PointerIncrement



function Incrementatulatorifier		(fn_asm)				// --a++
	visible
	opt	NoRefCounts
	|| f = exp.first!
	|| Src = .µ(f, dest.RequestPos)
	|| sr = src
	|| Amount = IncrAmount(sr, mode, f.ASMDecl)
	if src is ContainsAddr
		return CountOnAddr(self, f, dest, mode, src, amount)
	
	check (sr isnt temp) (exp, "Can't increment temporary value.")
	ifn mode & IncrAfter
		return .AddConstant(exp, sr, sr, Amount)							// ++x,	 y = ++x

	return .AddConstantAndReturnOld(f, dest, sr, amount)					// x++,	 y = x++



function ARel		(fn_asm)
	opt	NoRefCounts
	|| M = (exp.name[] == '+')|int|
	if dest
		M += IncrAfter
	return Incrementatulatorifier(self, exp.first!, dest, M)



function BRel		(fn_asm)						//  --a,  ++a,  &a,  --glob,  --a.b, -a
	opt	NoRefCounts
	|| n = exp.name[]
	|| F = exp.first!
	if n == '&'
		return .µ(F, dest.requestpos)
	if n == '~'
		return dosinglemath(self, exp, dest, scoperator.bnot.asm!)
	if n == '!'
		return Not(self, F, dest)

	if exp.name == 1								// -a
		return Minus(Self, f, dest)
	
	|| PlusPlus = n == '+'
	return Incrementatulatorifier(self, F, dest, PlusPlus|int|)



function DoSingleMath (|&ASMState| self, |message| exp, |AsmReg| Dest, |fn_opasm| fn, |asmreg|)
	|| Src = .µ(exp, dest)
	src = src <~ asmreg.SingleExpr
	return DoMathSub(self, exp, dest, src, fn)


function DoMath (fn_asm)
	opt norefcounts
	|| op = exp.second!
	|| scop = op.obj|scoperator|
		|| fn = scop.asm
			return DoMathSub(self, exp, dest, 0.asm, fn)
	error (op, "No ASM for this operator?")
	debugger // what?
		

helper DoMathSub (|&ASMState| self,  |message| exp,  |AsmReg| Dest,  |asmreg| mr,  |fn_opasm!| fn, |asmreg|)
	opt norefcounts

	|| F = exp.first!
	|| op = f.next!
	
	|| ml = AsmReg()
	if mr isnt SingleExpr
		|| OV = .VTmps
		|| D1 = (dest & asmreg.discard) as asmreg.stayopen
		debugat 
		ml = .µ(F, D1) asnt asmreg.stayopen
		mr = .µ(exp.last!, dest & asmreg.discard)
		.VTmps = OV
	
	if dest is Discard
		return asmreg() // no need to do anything. {a()+b()}

	dest = .TempMe(exp, dest) 
	dest.µtype = ml.µtype				// assignment conversion needs doing?	
	(dest is frommath)

	if ml isnt ConstAny or mr isnt ConstAny
		return (fn)(self, dest, ml, mr, op)
	(Dest is MathConst)
	rz = (fn)(self, dest, ml, mr, op)
	if rz isnt mathconst // hmm?
		debugger, (fn)(self, dest, ml, mr, op)


function Ignore			(fn_asm)


function Unexpected		(fn_asm)
	"Bad asmtmp"
	debugger

}



function ASMReg.ReadOrWrite (|message| m,  |asm|)
	if self is set
		return .Write(m)
	return .Read(m)
	

function ASMReg.Read (|message| m,  |asm|)
	|| T = .µtype
	|| bytes = t.ByteCount.log2
	|| B = (bytes<<1) + t.issigned
	if b <= 9
		return ASMtmp.ReadASM[b]
	error (m, "Object to large to read")
	
	
function ASMReg.Write (|message| m,  |asm|)
	|| bytes = .µtype.ByteCount.log2
	if bytes <= 4
		return ASMtmp.WriteASM[bytes]
	error (m, "Object to large to write")


function asmstate.ExistingVar (|message| m, |asmreg|)
	opt	norefcounts
	real self
	|| fn = m.func 
	while fn == @bra or @type
		m = m.first!
		fn = m.func
	if fn == @thg
		|| found = asmtmp.thgsub(asmstate.sh, m, asmreg(), 2)
		if found != nil
			return found
	  elseif fn == @num
		|| reg = asmstate.sh.findconst(m.ASMDecl)
		if reg!=nil
			return reg
	return nil


function message.HasAsmStuff (|bool|)
	opt norefcounts
	for ch in self
		if ch.func != @sheb
			return true


function FatASM.FloatConvConst (|&FatASM| src, |int| DestBitSize)
	|| f = (&src.Const)|&nil|
	|| d = (&.Const)|&nil|
	if DestBitSize == 64			// f32 to f64
		d|&f64|[]   = f|&float|[]
	  elseif DestBitSize == 32		// f64 to f32
		d|&float|[] = f|&f64|[]
	  else
		error (src.msg)


function FatASM.FloatIntConvConst (|&FatASM| fat, |datatypecode| src, |datatypecode| dest)
	|| dbc = dest.ByteCount
	|| f = (&fat.Const)|&nil|
	|| d = (&.Const)|&nil|
	if src.IsInt
		|| v = fat.Const
		if src.IsSigned
			if dbc == 4
				(d|&float|)[] = v|float|				// i to f32
			  else
				(d|&f64|)[] = v|f64|					// i to f64
		  else
			if dbc == 4
				(d|&float|)[] = v|uint64||float|		// u to f32
			  else
				(d|&f64|)[] = v|uint64||f64|			// u to f64
	  else
		|| i = d|&int64|
		|| u = d|&uint64|
		if dbc == 4
			|| f32 = f|&float|
			if dest.IsSigned
				i[] = f32[]|int|						// f32 to i
			  else
				u[] = f32[]|int|						// f32 to u
		  else
			|| f64 = f|&f64|
			if dest.IsSigned
				i[] = f64[]|int64|						// f64 to i
			  else
				u[] = f64[]|uint64|						// f64 to u


