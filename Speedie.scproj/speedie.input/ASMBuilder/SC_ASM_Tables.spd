


dispatch fn_asm_table (fn_asm)
	@arg:  ASMType.Arg
	@decl: ASMType.decl
	@num:  ASMType.num
	@rel:  ASMType.DoMath
	@thg:  ASMType.Thg
	@bra:  ASMType.First
	@sheb: ASMType.Sheb
	@sstr: ASMState.Str
	@list: // vectors
		debugger
	@func: ASMType.DoFunction
	@dot:  ASMType.Dot
	@acc:  ASMType.Access
	@brel: ASMType.Brel		// ++, --, -, &
	@arel: ASMType.arel     // ++, --, 
	@type:					ASMType.TypeCast
	@tmp:					ASMType.unexpected

	(ASMType.kif):			ASMstate.If
	(ASMType.kwhile):		ASMstate.While
	(ASMType.kTern):		ASMstate.Ternary
	(ASMType.kContinue):	ASMstate.Continue
	(ASMType.kExit):		ASMstate.Exit

	(ASMType.kDebugger):	ASMType.Debugger
	(ASMType.krejoin):		ASMType.First
	(ASMType.kreturn):		ASMType.return

	(ASMType.kSetRel):		ASMType.SetRel
	(ASMType.kStatExpr): 	ASMType.StatExpr
	(asmtype.kRefCount):	asmstate.RefCount

	(ASMType.kIgnore):		ASMType.Ignore
	(ASMType.kFail):		ASMType.Ignore

	63:						ASMType.unexpected



extend_module ASMType {
constants
	IncrAfter = 2
	IncrBefore = 0
	
|asm_Read[10]| ReadASM
|asm_Write[5]| WriteASM

function InitAccess
	|| R = &ASMType.ReadASM[0]
	|| W = &ASMType.WriteASM[0]
	R++[] = ASM.RD1U, W++[] = ASM.WR1U
	R++[] = ASM.RD1S, W++[] = ASM.WR2U
	R++[] = ASM.RD2U, W++[] = ASM.WR4U
	R++[] = ASM.RD2S, W++[] = ASM.WR8U
	R++[] = ASM.RD4U, W++[] = ASM.WR16
	R++[] = ASM.RD4S
	R++[] = ASM.RD8U
	R++[] = ASM.RD8U
	R++[] = ASM.RD16
	R++[] = ASM.RD16	


function Debugger (fn_asm)
	if Options.targetdebug
		return exp.TRAP(asmreg(), 0, 2)*asmreg() // 2 == sigint
	return asmreg()
	

function StatExpr (fn_asm)
	opt norefcounts
	for ch.fast in exp
		if ch.islast
			return .µ(ch, dest)
		.µ(ch, asmreg.Discard)

	
function First (fn_asm)
	opt norefcounts
	return .µ(exp.first!, dest)


function Sheb (fn_asm)
	opt norefcounts
	return exp.noop*asmreg()



function Return (fn_asm)
	opt norefcounts
	|| reg = ASMReg()
	|| f = exp.first
		|| ret = .ReturnASM|asmreg|
		reg = .µ(f, ret)
	
	|| amount = (f!=nil)|int|
	|| D0 = .SafeDecr
	|| D1 = .decr
	|| D2 = .decr
	if d0
		if d0.reg != reg.reg // problem
		return exp.RETO(D0, D1, D2, .decr) * asmreg()
	
	|| K = .Const(reg, 6, true) // return true, or -1 or whatever
		reg = asmreg()
	  else
		k = 0
	return exp.RET(reg, D1, D2, amount, K) * asmreg()
	


function TypeCast (fn_asm)
	opt norefcounts
	|| f = exp.first!
	dest.µtype = exp.asmdecl.datatype
	|| freg = .µ(F, dest)
	if freg.µtype == dest.µtype
		return freg // already done!
	return TypeCastSub(self, exp, dest, freg)


function TypeCastSub (|&asmstate| self, |message| exp, |ASMReg| dest, |ASMReg| from, |ASMReg|)
	opt norefcounts
	|| NewDecl = exp.ASMDecl
	|| NewType = NewDecl.regtype
	if !from.Reg												// x = 0|float|
		from.µtype = NewType
		return from

	|| OldType = from.µtype	
	if NewType is bool
		if (OldType is bool) and (dest isnt negate)				// x = true|bool| // why?
			return from
		return .NotEq(dest, asmreg(), from, exp)

	|| OC = OldType.BitCount
	|| NC = NewType.BitCount
	|| IsInt = NewType.IsInt

	|| Floatness = (NewType.IsFloat<<1) + oldtype.isfloat
	if Floatness == 0 or 3
		if (nc == oc) and (oldtype.IsSigned == newtype.IsSigned)
			from.µtype = newtype								// same all. maybe quicker to test in one go?
			return from
		if isint  and  (nc > oc  or  oc == 64)
			from.µtype = NewType
			return from
	
	dest = .TempOnly(exp, dest)
	dest.µType = NewType
	if from is ConstOutput
		return ConstConvert(self, exp, dest, from, oldtype, newtype)
		
	if oldtype.isfloat or newtype.isfloat
		return exp.CONV(dest, from, oldtype.asmconv(newtype))*dest
	|| sh2 = 64 - oc
	return exp.BFLG(dest, from, sh2, sh2, from.signed|int|) * dest



function ConstConvert  (|&asmstate| self, |message| exp, |ASMReg| dest, |ASMReg| from, |Datatypecode| Old, |Datatypecode| New, |ASMReg|)
	// this converts in place...	// we don't want that.
	
	|| srf = from.NeedFAT
	|| NC = New.BitCount
	|int64| K
	if old.isint!=new.isint
		K = srf.FloatIntConvConst(old, new)
	  elseif new.isfloat
		K = srf.FloatConvConst(NC)
	  else
		|| sh = 64 - NC
		|| oof = srf.Const << sh
		K = (oof|int64| >> sh, oof|uint64| >> sh)(dest.Signed) // shift up and down

	.NopConst(from)
	return .NumToReg(exp, K, dest, new)


function Decl (fn_asm)
	opt norefcounts
	exp = exp.last!
	|| ty = exp.first!.fastdecl
	dest = .DeclareMe(Exp, ty)
	exp = exp.last!

	if (ty is altered) or (ty isnt local) // its always local ???
		return .µinto(exp, dest)

	// we only want constants...
	|| K = .µinto(exp, dest)
	if k is ConstOutput
		|| f = k.fat
			(ty is const)
			ty.exportposition = f._const
			.neveraltered[.VDecls] = k.fatindex



function Arg (fn_asm)
	opt norefcounts
	|| Closer = .OpenVars // dcl ooffer
	for ch.fast in exp
		if ch.func == @decl
			asmtype.decl(self, ch, AsmReg.Discard)
		  else
			.µ(ch, AsmReg.Discard)

	.Closevars(Closer)
	return asmreg()



function Access (fn_asm)								// a[b], struct.mem[b]
	opt	NoRefCounts
	if dest isnt set
		dest = .TempTyped(exp, dest)
	
	|| f = exp.first!
	target debug
		|| d = f.asmdecl
		if !d.pointercount and !d.iscarray
	|| base = .µopen(f)					// x = a.b[0]
	|| sc = exp.second.first!
	|| vara = .µopen(sc)
	if dest isnt AddrRequest
		dest.µType = exp.ASMDecl.DataType
		return .ReadOrWrite(Dest, exp, base, vara)
		
	dest = dest.HaveAddr
	base = base.HaveAddr
	dest.µType = DataTypeCode._voidptr
	return .Plus(dest, base, vara, exp)
	


function Dot (fn_asm)									// a.b
	opt	NoRefCounts
	if dest isnt set
		dest = .TempTyped(exp, dest)
	|| Obj = .µopen(exp.first!, dest)
	|| prop = exp.ASMDecl
	|| T = prop.typeinfo
	dest.µtype = T
	
	|int64| Pos = prop.exportposition
	if (pos < 0 or pos > 1K) // what?
	
	if (dest is AddrRequest) or prop.iscarray
		pos *= t.ByteCount
		if prop.iscarray
			dest.µtype = datatypecode._voidptr
		dest = dest.haveaddr
		return .AddToReg(exp, dest, obj as ASMReg.NoScale, pos)

	
	return .ReadOrWrite(Dest, exp, obj, ASMReg(), pos)
		

function SetRel (fn_asm)	// function relset (
	opt	norefcounts									//   x[func()] = y++
	|| A = exp.first!
	|| B = exp.last!
	|| X = .ExistingVar(A)
	if X.reg
		return .µinto(B, X)
	
	dest = .µopen(B, X) asnt ASMReg.realconst		// why remove these?
	return .µ(A, dest as AsmReg.set)


function Num (fn_asm)
	opt norefcounts
	|| d = exp.ASMDecl
	|| T = d.typeonly
	dest.µtype = T
	(dest is RealConst)
	return .NumToReg(exp, d.ExportPosition, dest, T)


function Thg (fn_asm)
	|| thg = asmtype.ThgSub(self, exp, dest)
	|| reg = thg.reg
	if (reg-1)|uint| < 31							// what?
		return thg
	if reg == 0  and  thg is RealConst
		return thg // its still ok.   nil/false
	error (exp, "Register out of bounds")


function ThgSub (|&ASMState| self, |message| exp, |AsmReg| Dest, |asmreg|)
	opt norefcounts
	|| d = exp.ASMDecl
	if d is local
		|| T = d.wholetype
		(t is param) = (d is param)
		if (d isnt altered) and (d isnt param)
			|| fi = .NeverAltered[t.reg]
			if fi > 0
				|| f = fi|uint|.fat
				if f is ConstOutput
					(T is ConstOutput)
					t.FatIndex = fi
		if dest isnt addrneed
			return T
		return exp.addr(dest, t, dest, t) * dest.HaveAddr
	
	if d is const
		(dest is RealConst)
		if dest isnt ConstRequest
			return .NumToReg(exp, d.exportposition, dest, dest.µtype)
		return dest

	if dest isnt ConstRequest
		check (d is global) (Exp)
		return DoGlobal(self, exp, dest, d)
	return nil


function DoGlobal (|&ASMState| self, |message| exp, |AsmReg| Dest, |scdecl| D, |asmreg|)
	opt	NoRefCounts
	if dest isnt set								// a = glob
		dest = .TempTyped(exp, dest)

	|int64| iTable = d.ExportPosition
	expect (iTable > 0)          (exp, "No global address".internal)
	expect (iTable <= 18~bits)   (exp, "Used over 256K of global data")
	
	|| table = exp.GTAB(dest,  (!d.IsLib)|int|,  iTable)
	if dest is AddrRequest
		Dest.µtype = DataTypeCode._voidptr
		return (table * dest).HaveAddr
	
	dest.µtype = exp.asmdecl.DataType
	return .ReadOrWrite(dest, Exp, dest, asmreg(), 0)
	

function AddressOf (fn_asm)
	rz = .µ(exp, dest as asmreg.addrneed)
	if (rz is ContainsAddr)
		return rz
	error (exp, "ASM fail")
	.µ(exp, dest as asmreg.addrneed)


function BoolNot (fn_asm)							// !a
	dest = dest.negate
	|| src = .µ(exp, dest)
	if src is AlreadyNegated
		return src
	return .exists(dest, src, exp)
	

function BitNot (fn_asm)							// ~a
	return .DoMathSub(exp, dest as asmreg.SingleExpr, scoperator.bnot.asm!)


function Negative (fn_asm)							// -a
	return .DoMathSub(exp, dest as asmreg.singleexpr, scoperator.Negative.asm!)


///   ///

function IncrSlowOnAddr (|&ASMState| self, |message| f, |ASMReg| Dest, |int| Mode, |ASMReg| Addr, |int64| Amount, |ASMReg|)	
	opt	NoRefCounts									// *a, x = *(a.b)
	|| TmpCloser = .OpenVars
	.Read(Dest, F, dest, addr)						// READ

	|| NewValue = (.Temptyped(f), dest)(mode & IncrAfter)
	.IncrPre(f, NewValue, dest, amount)				// ADD

	|| fat = .write(dest, f, newvalue, addr)		// WRITE BACK

	// the new value should exist! now lets close
	.CloseVars(TmpCloser)
	return fat * Dest


function IncrOnAddr (|&ASMState| self, |message| f, |AsmReg| Dest, |int| Mode, |AsmReg| Addr, |int64| Amount, |asmreg|)
	ifn  dest.isint  and  amount.fits(7)
		return IncrSlowOnAddr(self, f, dest, mode, Addr, amount)
	|| bc  = dest.µtype.ByteCount
	|| log = bc.Log2
	if dest.BitCount * (1<<log) != bc // hmm? maths bug?
	|| fat = f.CNTC(Addr, dest, 1, amount, log)
	if mode & IncrAfter
		fat.op = asm.cntd
	return fat * dest


function IncrAmount (|asmreg| upon, |int| IsSubtract, |scdecl| D,  |int64|)
	opt norefcounts
	rz = (1,-1)(IsSubtract & 1)
	if upon.isfloat
		if upon.FourBytes
			rz = rz|float|.asint
		  else
			rz = rz|Float64|.asint
	  elseif D.TypeSuffers
		rz *= D.PointerIncrement



function Incrementatulatorifier		(fn_asm)				// --a++
	visible
	opt	NoRefCounts
	|| Src = .µ(exp, dest as asmreg.addrrequest)
	|| Amount = IncrAmount(src, mode, exp.ASMDecl)
	if src is ContainsAddr
		return IncrOnAddr(self, exp, dest, mode, src, amount)
	
	check (src isnt temp) (exp, "Can't increment temporary value.")
	ifn mode & IncrAfter
		return .IncrPre(exp, dest, src, Amount)				// ++x,	 y = ++x

	return .IncrPost(exp, dest, src, amount)				// x++,	 y = x++



function ARel (fn_asm)
	opt	NoRefCounts
	|| F = exp.name[]
	if F == '?' or '!'
		return .µ(exp.first!, dest)
	|| M = (F == '+')|int|
	if dest isnt discard
		M += IncrAfter
	return Incrementatulatorifier(self, exp.first!, dest, M)



function BRel (fn_asm)						//  --a,  ++a,  &a,  --glob,  --a.b, -a
	opt	NoRefCounts
	|| n = exp.name[]
	|| F = exp.first!
	if n == '&'
		return AddressOf(self, f, dest)
	if n == '~'
		return BitNot(self, f, dest)
	if n == '!'
		return BoolNot(self, F, dest)
	if exp.name == 1								// -a
		return Negative(Self, f, dest)
	
	|| IsPlusPlus = n == '+'						// ++a, --a
	return Incrementatulatorifier(self, F, dest, IsPlusPlus|int|)



function DoMath (fn_asm)
	opt norefcounts
	|| op = exp.second!
	|| scop = op.obj|scoperator|
		if scop is AndOr
			return .ASMBoolBadnessMadness(exp, dest, scop.Kind)
		|| fn = scop.asm
			return .DoMathSub(exp, dest, fn)
	error (op, "No ASM for this operator?")
	debugger // what?
		




function Ignore			(fn_asm)
	return asmreg()


function Unexpected		(fn_asm)
	if !exp.asmtype
		|| f = exp.func|int|
			exp.asmtype = f
			return .µ(exp, dest)
	error  (exp, "bad ASMType")
}



extend ASMState {

function ExistingVar (|message| m, |asmreg|)
	opt	norefcounts
	real self
	|| fn = m.func 
	while (fn == @bra) or ((fn == @type) and m.TypeCastDoesnothing)
		m = m.first!
		fn = m.func
	if fn == @thg
		return m.ASMLocal(ASMReg.FromExistingVar)
	


function Str (fn_asm)
	opt	norefcounts
	dest = .temponly(exp, dest)
	|| real = exp.name|messageid|
	dest.µtype = datatypecode._voidptr
	return exp.gstr(dest, 0, real.ID) * dest // seems good!



helper DoMathSub (|message| exp,  |ASMReg| Dest,  |fn_opasm!| fn, |ASMReg|)
	opt norefcounts
	|| ml = ASMReg()
	|| mr = ASMReg()
	if dest is SingleExpr
		ml = .µ(exp, dest)
	  else
		|| Closer = .OpenVars
		|| discardmode = dest & AsmReg.Discard
		|| Mode = discardmode with dest
		ml = .µopen(exp.first!, mode)
		mode = DiscardMode.with(dest, ml)
		mr = .µ(exp.last!, mode)
		.CloseVars(Closer)
	
	dest = .TempTyped(exp, dest)
	(dest isnt realconst)
	(dest as= ml & mr & asmreg.realconst)
	
	rz = (fn)(self, dest, ml, mr, exp.second!)
	(rz is constinput) = dest & ASMReg.ConstInput				// reset
	rz.µtype = dest.µtype
}


function message.ASMLocal (|asmreg| extra = 0, |asmreg|)
	opt	norefcounts
	|| d = .ASMDecl
	if d is local
		return d.WholeType as extra


function message.ASMReg (|int|)
	return .asmlocal.reg


function message.HasAsmStuff (|bool|)
	opt norefcounts
	for ch in self
		|| fn = ch.brafunc
		if fn != @sheb and @num and @char
			return true


function message.brafunc (|syntax|)
	opt norefcounts
	while self
		|| fn = .func
		if fn != @bra
			return fn
		self = .first


function FatASM.FloatConvConst (|int| DestBitSize, |int64|)
	|| f = &._Const
	if DestBitSize == 64				// f32 to f64
		return (f|&float|[]|Float64|).asint
										// f64 to f32
	return f|&f64|[]|float|.asint


function FatASM.FloatIntConvConst (|datatypecode| src, |datatypecode| dest, |int64|)
	|| dbc = dest.ByteCount
	|| f = (&._Const)|&nil|
	if src.IsInt
		|| v = .Const
		if src.IsSigned
			if dbc == 4
				return v|float|.asint			// i to f32
			return v|Float64|.asint				// i to f64
		if dbc == 4
			return v|uint64||float|.asint		// u to f32
		return v|uint64||Float64|.asint			// u to f64

	// src.isfloat
	if src.ByteCount == 4
		|| f32 = f|&float|[]
		if dest.IsSigned
			return f32|int64|					// f32 to i
		return f32|uint64|						// f32 to u
	
	|| f64 = f|&f64|
	if dest.IsSigned
		return f64|int64|					// f32 to i
	return f64|uint64|						// f32 to u


function DataTypecode.ASMConv (|Datatypecode| To, |int|)
	return to.ASMPart<<2 ||| .asmpart


function DataTypecode.ASMPart (|int|)
	if .isfloat
		return 0 + (.bitcount > 32)
	return 2 + .issigned


function Message.TypeCastDoesNothing (|bool|)
	opt norefcounts
	|| Output = .ASMDecl.typeonly
	|| Input = .first!.ASMDecl.typeonly
	require  Output.Count    == Input.Count				// vectors
	require  Output.IsFloat  == Input.isfloat			// floatness
	|| BoolOut = Output is bool
	require (BoolOut) == (Input is bool)				// boolness

	|| BytesLost = Input.ByteCount - Output.ByteCount
	if output.isfloat
		return byteslost == 0
	require byteslost <= 0


