


dispatch fn_asm_table (fn_asm)
	@arg:  ASMType.Arg
	@decl: ASMType.decl
	@num:  ASMType.num
	@rel:  ASMType.DoMath
	@thg:  ASMType.Thg
	@bra:  ASMType.First
	@sheb: ASMType.Ignore
	@list: // vectors
		debugger
	@func: ASMType.DoFunction
	@dot:  ASMType.Dot
	@acc:  ASMType.Access
	@brel: ASMType.Brel		// ++, --, -, &
	@arel: ASMType.arel     // ++, --, 
	@type:					ASMType.TypeCast
	@tmp:					ASMType.unexpected

	(ASMType.kif):			ASMstate.If
	(ASMType.kwhile):		ASMstate.While
	(ASMType.kTern):		ASMstate.Ternary
	(ASMType.kContinue):	ASMstate.Continue
	(ASMType.kExit):		ASMstate.Exit

	(ASMType.kDebugger):	ASMType.Debugger
	(ASMType.krejoin):		ASMType.First
	(ASMType.kreturn):		ASMType.return

	(ASMType.kSetRel):		ASMType.SetRel
	(ASMType.kStatExpr): 	ASMType.StatExpr
	(ASMType.kPointer):		ASMType.Pointer

	(ASMType.kIgnore):		ASMType.Ignore
	(ASMType.kFail):		ASMType.Ignore

	63:						ASMType.unexpected




function asmstate.SimpleTernary (|asmreg| dest, |asmreg| ma, |asmreg| mb, |message| cond, |asmreg|)
	opt norefcounts
	|| dr = dest.reg
	|| mc = (asmreg(), dest)(dr == ma.reg or mb.reg)
	|| µ = .µ(cond, mc)
	return cond.TERN(dest, µ, ma, mb) * dest



extend_module ASMType {
constants
	IncrAfter = 2
	IncrBefore = 0
	
|asm_Read[10]| ReadASM
|asm_Write[5]| WriteASM

function InitAccess
	|| R = &ASMType.ReadASM[0]
	|| W = &ASMType.WriteASM[0]
	R++[] = ASM.RD1U, W++[] = ASM.WR1U
	R++[] = ASM.RD1S, W++[] = ASM.WR2U
	R++[] = ASM.RD2U, W++[] = ASM.WR4U
	R++[] = ASM.RD2S, W++[] = ASM.WR8U
	R++[] = ASM.RD4U, W++[] = ASM.WR16
	R++[] = ASM.RD4S
	R++[] = ASM.RD8U
	R++[] = ASM.RD8U
	R++[] = ASM.RD16
	R++[] = ASM.RD16	


function Debugger		(fn_asm)
	if Options.targetdebug
		exp.TRAP(asmreg(),0,0) // nice!

	

function StatExpr		(fn_asm)
	opt norefcounts
	for ch.fast in exp
		if ch.islast
			return .µ(ch, dest)
		.µ(ch, asmreg.Arg)

	
function First			(fn_asm)
	opt norefcounts
	return .µ(exp.first!, dest)



function Return			(fn_asm)
	opt norefcounts
	|| reg = asmreg()
	|| f = exp.first
		|| Where = AsmReg.ForReturn
		where.reg = 1
		where.µtype = .ReturnASM
		reg = .µ(f, Where)
	exp.RET(reg, asmreg(), 1, 0)



function TypeCast		(fn_asm)
	opt norefcounts
	|| f = exp.first!
	|| req = dest as asmreg.ForCast
	req.µtype = exp.asmdecl.datatype
	|| sr = .µ(F, req)
	if sr.µtype == req.µtype
		return sr // already done!
	return TypeCastSub(self, exp, dest, sr)



function TypeCastSub (|&asmstate| self, |message| exp, |asmreg| dest, |asmreg| sr, |asmreg|)
	opt norefcounts
	|| NewDecl = exp.ASMDecl
	|| NewType = newdecl.regtype
	if !sr.reg								// x = 0|float|
		sr.µtype = newtype
		return sr

//	|| OldDecl = exp.first!.ASMDecl
	|| OldType = sr.µtype
	target debug
		if NewType.count != OldType.count
	
	if NewType is bool
		if OldType is bool					// x = true|bool| // why?
			return sr
		return .NotEq(dest, asmreg(), sr, exp)

	|| OC = oldtype.BitCount
	|| NC = newtype.BitCount

	|| FloatDiff = newtype.isfloat != oldtype.isfloat
	if !FloatDiff and (nc == oc)			// same bittype!
		debugger // should never happen!
		return sr
	
	dest = .TempOnly(exp, dest)
	dest.µType = NewType
	|&fatasm| fat
	if oldtype.isfloat or newtype.isfloat
		fat = exp.CONV(dest, sr, oldtype.asmconv(newtype))
		if sr is ConstAny			// shouldn't this just place the old fat?
			|| srf = sr.needfat		// no, because it could be used twice.
			if NewType.IsFloat and !FloatDiff
				fat.FloatConvConst(srf, NC)
			  else
				fat.FloatIntConvConst(srf, oldtype, newtype)
				
	  else
		|| sh = 64 - oc
		fat = exp.BFLG(dest, sr, sh, sh, sr.signed|int|)
		if sr is ConstAny
			|| oof = fat.Const << sh
			fat.Const = (oof|int64| >> sh, oof|uint64| >> sh)(sr.Signed) // shift up and down

	if sr is constany
		return .MakeConst(fat, dest)

	return fat*dest



function Pointer		(fn_asm)
	// *a, x = *(a.b) 
	opt	NoRefCounts
	if dest is AddrRequest // hmmm?
	dest = .TempTyped(exp, dest)
	|| Ptr = .µ(exp.first!, dest)
	return Dest.ReadOrWrite(exp,ptr)



function Decl (fn_asm)
	opt norefcounts
	exp = exp.last!
	|| ty = exp.first!.fastdecl
	dest = .DeclareMe(Exp, ty) 
	dest = dest as ASMReg.decl
	exp = exp.last!
	if ty isnt altered
		return .µinto(exp, dest)
	rz = .µinto(exp, dest)
	|| f = rz.fat
		(f is NeverAltered)



function Arg   (fn_asm)
	opt norefcounts
	|| DclCloser = .VDecls // dcl ooffer
	for ch.fast in exp
		if ch != @sheb
			.µ(ch, AsmReg.Arg)
	.CloseVDecls(DclCloser)



function Access		(fn_asm)						// a[b], struct.mem[b]
	opt	NoRefCounts
	dest = .TempTyped(exp, dest)

	|| Ptr = .µ(exp.first!, dest.RequestPos)		// x = a.b[0]
	check (ptr is ContainsAddr) (exp)
	|| Ind = .µ(exp.second!, ptr • dest)
	if (dest is AddrRequest)
		return .Plus(dest.HaveAddr, ptr, ind, exp)
	
	return Dest.ReadOrWrite(exp, ptr, ind)


function Dot		(fn_asm)						// a.b
	opt	NoRefCounts
	dest = .TempTyped(exp, dest)
	|| Obj = .µ(exp.first!, dest)
	|| prop = exp.ASMDecl
	|| T = prop.typeinfo
	dest.µtype = T
	debugger
	
	|| B = t.ByteCount.log2
	|| Pos = prop.exportposition >> B
	if !pos // what?
	if (dest is AddrRequest) or (pos >= 128)						// read/write only allows up to 127
		|| addk = exp.ADDK(dest, obj, pos)
		if dest is AddrRequest
			return addk.HaveAddr * dest
		pos = 0
	
	return Dest.ReadOrWrite(exp, obj, pos)
		

function SetRel	(fn_asm)
	opt	norefcounts									//   x[func()] = y++
	|| f = exp.first!
	|| l = exp.last!
	|| Var = .ExistingVar(f)
	if var.reg
		Dest = .µinto(L, var)
		if dest.reg == var.reg
			return dest // for a = 1: by the time we ran L, a == 1 already!
	  else
		dest = .µ(l, var)

	.µ(f, dest as AsmReg.set)


function Num (fn_asm)
	opt norefcounts
	|| d = exp.ASMDecl
	return .GenericNumFinder(exp, d.exportposition, dest) 


function Thg (fn_asm)
	|| thg = asmtype.ThgSub(self, exp, dest, mode)
	|| reg = thg.reg
	if (reg-1)|uint| < 31							// what?
		return thg
	error (exp, "Register out of bounds")


function ThgSub (|&ASMState| self, |message| exp, |AsmReg| Dest, |int| Mode, |asmreg|)
	opt norefcounts
	|| d = exp.ASMDecl
	if d is local
		return d.wholetype
		if (dest isnt requiretype) or (dest isa existing.µtype) // the ternary requires this.
			return existing				// why doesnt it do the testing itself?
		return nil
		
	rz = d.typeonly.zero

	if d is const
		check (dest.reg and dest isnt set) (exp)
		require !mode
		(dest is constany)
		return .NumToReg(exp, d.exportposition, dest)
	  else
		if mode
			return nil
		check (d is global) (Exp)
		DoGlobal(self, exp, dest, d)
 

helper DoGlobalSub (|&FATASM| addr, |int| add, |message| exp,  |asmreg|)
	|| Reg = addr.info
	|| NumAt = ASMState.sh.NumToReg(exp, add)
	return ASMState.sh.Plus(reg, reg, numat, exp)


function DoGlobal (|&ASMState| self, |message| exp, |AsmReg| Dest, |scdecl| D, |asmreg|)
	opt	NoRefCounts
	|| addr = dest
	if dest isnt set								// a = glob
		addr = .TempTyped(exp, dest)

	|int64| iTable = d.ExportPosition
	expect (iTable > 0)      (exp, "No global address".internal)
	expect (iTable < 16MB)   (exp, "Too much global data")
						
	if dest is AddrRequest
		|| sixteen = 16K-1
		|| a = exp.TABL(addr,  (!d.IsLib)|int|,  iTable&sixteen)
		if iTable <= sixteen
			return (a * Dest).HaveAddr
		return DoGlobalSub(a, iTable &~sixteen, exp).HaveAddr
	
	|| iRead = iTable
	|| iOld = iRead
	if iTable < 128
		iTable = 0				// keep the current table. More optimisable.
	  elseif iTable < 16K
		iRead = 0				// itable has a bigger range... so use that. 
	  else
		itable = 0				// Make this optimisable.
		iRead = 0

	|| tabl = exp.TABL(addr,  (!d.IsLib)|int|, iTable)
	if !itable and !iread and iold
		DoGlobalSub(tabl, iold, exp)
	debugger 
	return dest.ReadOrWrite(Exp, addr, iread)

	

function BoolNot		(fn_asm)						// !a
	opt	NoRefCounts
	|| src = .µ(exp.first!, dest.flip(asmreg.negate))
	if src is AlreadyNegated
		if dest is negate // why did we get here? we just flipped it above to not negated.
		return src
	return .Equals(dest, asmreg(), src, exp)
	

function BitNot				(fn_asm)					// ~a
	return .DoMathSub(exp, dest as asmreg.singleexpr, scoperator.bnot.asm!)


function Negative			(fn_asm)					// -a
	return .DoMathSub(exp, dest as asmreg.singleexpr, scoperator.Negative!.asm!)


function IncrSlowOnAddr (|&ASMState| self, |message| f, |ASMReg| Dest, |int| Mode, |ASMReg| Addr, |int64| Amount, |ASMReg|)	
	opt	NoRefCounts									// *a, x = *(a.b)
	|| TmpCloser = .VTmps
	Dest.Read(F, dest, addr)						// READ

	|| NewValue = (.Temptyped(f), dest)(mode & IncrAfter)
	.IncrPre(f, NewValue, dest, amount)				// ADD

	|| fat = dest.write(f, newvalue, addr)			// WRITE BACK

	// the new value should exist! now lets close
	.CloseVTmps(TmpCloser)
	return fat * Dest


function IncrOnAddr (|&ASMState| self, |message| f, |AsmReg| Dest, |int| Mode, |AsmReg| Addr, |int64| Amount, |asmreg|)
	ifn  dest.isint  and  amount <= 63  and  amount >= -64
		return IncrSlowOnAddr(self, f, dest, mode, Addr, amount)
//	|| opp = (ASM.CNTC, ASM.CNTD)(mode & IncrAfter)	
	|| bc  = dest.µtype.ByteCount
	|| log = bc.Log2
	if dest.BitCount * (1<<log) != bc // hmm? maths bug?
	|| fat = f.cntc(Addr, dest, 0, amount, log)
	if mode & IncrAfter
		fat.op = asm.cntd
	return fat*dest


function IncrAmount (|asmreg| upon, |int| IsSubtract, |scdecl| D,  |int64|)
	opt norefcounts
	rz = (1,-1)(IsSubtract & 1)
	if upon.isfloat
		if upon.FourBytes
			rz = rz|float|.asint
		  else
			rz = rz|Float64|.asint
	  elseif D.TypeSuffers
		rz *= D.PointerIncrement



function Incrementatulatorifier		(fn_asm)				// --a++
	visible
	opt	NoRefCounts
	|| Src = .µ(exp, dest.RequestPos)
	|| Amount = IncrAmount(src, mode, exp.ASMDecl)
	if src is ContainsAddr
		return IncrOnAddr(self, exp, dest, mode, src, amount)
	
	check (src isnt temp) (exp, "Can't increment temporary value.")
	ifn mode & IncrAfter
		return .IncrPre(exp, dest, src, Amount)				// ++x,	 y = ++x

	return .IncrPost(exp, dest, src, amount)				// x++,	 y = x++



function ARel		(fn_asm)
	opt	NoRefCounts
	|| M = (exp.name[] == '+')|int|
	if dest.reg
		M += IncrAfter
	return Incrementatulatorifier(self, exp.first!, dest, M)



function BRel		(fn_asm)						//  --a,  ++a,  &a,  --glob,  --a.b, -a
	opt	NoRefCounts
	|| n = exp.name[]
	|| F = exp.first!
	if n == '&'
		return .µ(F, dest.requestpos)
	if n == '~'
		return BitNot(self, f, dest)
	if n == '!'
		return BoolNot(self, F, dest)

	if exp.name == 1								// -a
		return Negative(Self, f, dest)
	
	|| IsPlusPlus = n == '+'						// ++a, --a
	return Incrementatulatorifier(self, F, dest, IsPlusPlus|int|)



function DoMath (fn_asm)
	opt norefcounts
	|| op = exp.second!
	|| scop = op.obj|scoperator|
		if scop is AndOr
			return .DoAndOr(exp, dest, scop.Kind)
		|| fn = scop.asm
			return .DoMathSub(exp, dest, fn)
	error (op, "No ASM for this operator?")
	debugger // what?
		




function Ignore			(fn_asm)


function Unexpected		(fn_asm)
	"bad ASMType"
	debugger

}


helper ASMState.DoMathSub (|message| exp,  |ASMReg| Dest,  |fn_opasm!| fn, |ASMReg|)
	opt norefcounts
	|| F = exp.first!
	|| op = f.next!
	
	|| ml = ASMReg()
	|| mr = ASMReg()
	|| TmpCloser = .VTmps
	|| SubMode = (dest & AsmReg.Discard) as AsmReg.StayOpen
	if mr isnt SingleExpr
		|| L = exp.last!
		if dest is notyetused
			submode.reg = dest.reg
		submode.µtype = F.asmdecl.typeonly // unnecessary?
		ml = .µ(F, SubMode)
		if ml.reg == dest.reg // we used it!
			submode.reg = 0
		submode.µtype = L.asmdecl.typeonly // unnecessary?
		mr = .µ(L, SubMode)
		(ml asnt= asmreg.stayopen)
	  else
		mr = .µ(exp, submode)
	(mr asnt= asmreg.stayopen)
	.CloseVTmps(TmpCloser)
	
	if dest is Discard
		return dest & ASMReg.discard // no need to do anything:   {a() + b(),  c()}
	
	dest = .TempTyped(exp, dest)
	(dest is FromMath)
	if  ml is ConstAny  and  mr is ConstAny
		(Dest is MathConst)
	
	// what if the operator is and/or?
	target debug:if ml.floatness != mr.floatness							// Shouldn't happen.
	rz = (fn)(self, dest, ml, mr, op)
	target debug
		if dest is MathConst  and  rz isnt MathConst		// hmm?
			debugger, (fn)(self, dest, ml, mr, op)



function ASMReg.ReadOrWrite (|message| m, |asmreg| ptr, |int| index=0, |asmreg|)
	return .ReadOrWrite(m, ptr, index, self is set) * self


function ASMReg.ReadOrWrite (|message| m, |asmreg| ptr, |int| index, |bool| DoRead, |&fatasm|)
	self = self asnt asmreg.containsaddr
	debugger 
	|| T = .µtype
	|| BC = t.ByteCount
	|| bytes = BC.log2
	check  (bytes <= 4)  (m, "Object to large to access")
		
	|asm| A
	if DoRead
		|| B = (bytes<<1) + t.issigned
		A = ASMType.ReadASM[b]
	  else
		A = ASMType.WriteASM[bytes]
	isnt set
	return m.RD4U(self, ptr, asmreg(), index, 0)
//		r1		R	// dest
//		r2		r	// Base
//		r3		r	// VarAdd
//		L		7	// Const A
//		move	2


function ASMReg.Read  (|message| m,  |asmreg| ptr,  |int| index=0,  |&fatasm|)
	opt inline
	return .ReadOrWrite(m, ptr, index, true)
	

function ASMReg.Write (|message| m,  |asmreg| ptr,  |int| index=0,  |&fatasm|)
	opt inline
	return .ReadOrWrite(m, ptr, index, false)


function asmstate.ExistingVar (|message| m,  |asmreg|)
	opt	norefcounts
	real self
	|| fn = m.func 
	while (fn == @bra) or ((fn == @type) and m.TypeCastDoesnothing)
		m = m.first!
		fn = m.func
	if fn == @thg
		|| dest = asmreg()
		return ASMType.ThgSub(self, m, dest, 2)


function message.HasAsmStuff (|bool|)
	opt norefcounts
	for ch in self
		if ch.func != @sheb
			return true


function FatASM.ConvertConst (|datatypecode| Oldtype, |datatypecode| Newtype)
	if NewType.IsFloat and Oldtype.IsFloat
		.FloatConvConst(self, newtype.BitCount)
	  else
		.FloatIntConvConst(self, oldtype, newtype)


function FatASM.FloatConvConst (|&FatASM| src, |int| DestBitSize)
	|| f = (&src.Const)|&nil|
	|| d = (&.Const)|&nil|
	if DestBitSize == 64			// f32 to f64
		d|&f64|[]   = f|&float|[]|Float64|
	  elseif DestBitSize == 32		// f64 to f32
		d|&float|[] = f|&f64|[]|float|
	  else
		error (src.msg)


function FatASM.FloatIntConvConst (|&FatASM| fat, |datatypecode| src, |datatypecode| dest)
	|| dbc = dest.ByteCount
	|| f = (&fat.Const)|&nil|
	|| d = (&.Const)|&nil|
	if src.IsInt
		|| v = fat.Const
		if src.IsSigned
			if dbc == 4
				(d|&float|)[] = v|float|				// i to f32
			  else
				(d|&f64|)[] = v|Float64|					// i to f64
		  else
			if dbc == 4
				(d|&float|)[] = v|uint64||float|		// u to f32
			  else
				(d|&f64|)[] = v|uint64||Float64|			// u to f64
	  else
		|| i = d|&int64|
		|| u = d|&uint64|
		if dbc == 4
			|| f32 = f|&float|
			if dest.IsSigned
				i[] = f32[]|int|						// f32 to i
			  else
				u[] = f32[]|int|						// f32 to u
		  else
			|| f64 = f|&f64|
			if dest.IsSigned
				i[] = f64[]|int64|						// f64 to i
			  else
				u[] = f64[]|uint64|						// f64 to u


function DataTypecode.ASMConv (|Datatypecode| To, |int|)
	return to.ASMPart<<2 ||| .asmpart


function DataTypecode.ASMPart (|int|)
	if .isfloat
		return 0 + (.bitcount > 32)
	return 2 + .issigned


function Message.TypeCastDoesNothing (|bool|)
	opt norefcounts
	|| Output = .ASMDecl.typeonly
	|| Input = .first!.ASMDecl.typeonly
	require (Output is bool) == (Input is bool)		// boolness
	require  Output.Count    == Input.Count			// vectors
	require  Output.IsFloat  == Input.isfloat		// floatness
	if output.isfloat
		return true
	return Output.ByteCount >= Input.ByteCount

