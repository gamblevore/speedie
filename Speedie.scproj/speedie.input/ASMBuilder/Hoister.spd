

/*	
Here is the approach we will use:
	"Pre-compile... analyse, then rewind""
	* Can be sped up by making it more complex to avoid stuff.
*/



function message.Declable (|message!|)
	opt norefcounts
	|| fn = .func
	if fn == @decl
		self = .second!
		fn = .func
	while fn == @type
		self = .first! // no go into the type!
		fn = .func
	if fn == @func
		return .second!
	return self



extend Assembler {

function FatASM.CanGlobGrab (|uint64| find, |uint64| range, |uint64| BS, |asmreg|)
	opt inline
	|uint64| Addr = .prms[2]
	require Addr <= find
	require addr + range > find
	require !(addr & ((1<<BS)-1))
	return .info


function TryGetGlob (|SCDecl| D, |asmreg| Mode, |asmreg|)
	// mode can be used to require an exact match
	|| G = d.GlobInfo
	|| B = G.ByteCount
	|uint64| range = 64 * B  // the idea is to be within N items, and before the item, and be aligned.
							 // So what should N be?  Read/Write takes 7 bits, but CNTC uses 6 bits!
	|uint64| find = d.au.ExportPosition

	B--	// now, lets align this shit.
	if mode is AddrForceRequest or d is library // need exact match.
		range = 1
	
	for old in Assembler.sh
		if old isa asm.gtab
			|| OK = old.CanGlobGrab(find, range, B)
				return OK


function GlobAddr (|SCDecl| D, |message| exp, |AsmReg| Dest, |asmreg|)
	opt norefcounts
	
	|| Glob = .TryGetGlob(D, dest)
		return Glob

//////

/*
	Reading of libglobs
	
	Lets say... that we have to read a lib glob.
	
	That libglob info... MUST be stored... somewhere. About the actual location of it. It can be
	in a different order. So thats just how it is.
	
	We access them, by name. Then... that name gets linked up, to our GTAB... which gets the actual
	thing. But we need a table of gtabs to libglobs.
	
	The "lets store things close to each other" thing doesn't work for libglobs. They might not be!!
	
	If we want to do this faster, we'd need a libglob reading instruction, at least for pointers.
	(not a bad idea).
	
	For now...
	
	Lets remove the opts around libglob reading.
*/	
	
	|int64| Original = d.au.ExportPosition
	check (Original <= 32~bits)				(exp, "Too much global data used: " + original.strsize)
	if !Original							// What?
	if  dest isnt AddrForceRequest  and  d isnt ClassObj  and  d isnt Library
		Original &= ~63
	
	|| Direct = Original & 18~bits
	(Dest is GlobalMemory)
	dest = dest.haveaddr	
	dest.Âµtype = DataTypeCode._voidptr

	|| fat = exp.GTAB(dest,  (d Is Library)|int|,  Direct)
	fat.Const = Direct
	rz = fat * dest
	
	|| Missing = Original - Direct
		check (d isnt library) (exp, "Lib too big!") // should never happen!
		if missing >= 4096
			fat = exp.ADDB(dest, missing >> 12)
			fat.const = Direct + ((missing >> 12) << 12)
	/		rz = fat * dest

}



