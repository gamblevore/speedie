

/*	
* Pre-compile... analyse, then rewind.
	* Works... a little slow?
		* Can be sped up by making it more complex to avoid stuff.
	* Maybe simpler overall?
		* Still needs a total re-write of my hoister.
	* avoids dead-code. Better for inlines?
	

So where to write this?
// we can write it normally.. then just copy over to a new buffer?
// seems to make sense.

*/







struct SC_Hoister
	linkage
		cpp_part Hoi
	|uint|				Bits
	|byte|				Count
	|byte|				Spare
	|message--[6]|		Consts


	constants
		MinHoistScore = 3
		AsLoop = 1<<20



	helper Added (|Assembler| sh, |asmreg| Dest, |scdecl| decl, |asmreg| K)
		decl.au.FatConstIndex = k.fatindex
		|| n = dest.reg
		sh.setconst(k.fat, n)
		if .bits & (1<<n)  				// what?
		.Bits |= 1<<n


	function Assembler.SetConst (|?&fatasm| fat, |int| n)
		description "Only if not altered in branch"
		opt norefcounts
		
		if fat == .KnownValues[n]
			return			// already done. Probably a number.
		
		target debug		// These should never happen!
			if fat isnt notalteredinbranch

		if fat
			fat.µRefCount++
		|| v = .vars[n]
			v.au.fatconstindex = (fat.index,0)(fat)
			v.au.ExportPosition = (fat._const,0)(fat)
				
	
		// what about updating the fatconstindex on .vars?
		// its meant to be the same, right? same reg?
		.KnownValues[n] = fat
		.KnownValuesMap |= 1<<n

	// Maybe just store the numbers in a list?
	// So check against OUR number? IDK?
	// And what if its pre-hoisted?
	
	helper DidReuseConst (|SCDecl| decl, |bool|)
		opt NoRefCounts
/		|| k = decl.au.ExportPosition
		if !k
			return true
		for old in Assembler.sh
			if old._Const == K
				if "inline_more".trap
					assembler.sh.fuckoff
					
				old.µRefCount++
				decl.au.FatConstIndex = old.Index
				return true


	function CanHoist (|bool|)
		return .spare > 0
	
	

function message.Declable (|message!|)
	opt norefcounts
	|| fn = .func
	if fn == @decl
		self = .second!
		fn = .func
	while fn == @type
		self = .first! // no go into the type!
		fn = .func
	if fn == @func
		return .second!
	return self



extend Assembler {

function TryGetGlob (|SCDecl| D, |asmreg|)
	|uint64| find = d.au.ExportPosition
	|uint64| range = 128 * d.globInfo.ByteCount
	for old in Assembler.sh
		if old isa asm.gtab
			|uint64| Addr = old.const
			if Addr <= find and addr + range > find
				return old.info


function GlobAddr (|scdecl| D, |message| exp, |AsmReg| Dest, |asmreg|)
	|| Glob = .TryGetGlob(D)
		return Glob
	return .GlobAddrsub(d, exp, dest)


function GlobAddrSub (|SCDecl| D, |message| exp, |AsmReg| Dest, |asmreg|)
	opt norefcounts

	|int64| iTable = d.au.ExportPosition
	expect (iTable > 0)          (exp, "No global address".internal)
	expect (iTable <= 24~bits)   (exp, "Used over 16MB of global data")
	
	|| fat = exp.GTAB(dest,  (d.IsLib)|int|,  iTable>>6)
	fat.Const = iTable &~ 63
	Dest = fat * dest
	dest.µtype = DataTypeCode._voidptr
	return dest.HaveAddr

}


	


function Assembler.Length (|int|)
	return .curr - .funcstart



