

extend asmstate
	function NumToReg (|int64| V, |message| exp, |int| Reg, |&FATASM|)
		rz = .AddASM(asm.KNST, exp, reg, (V << 32) >> 32, V>>32, -1, -1)
		.Registers[reg] = rz
		rz.Const = v
		rz.info = reg.asm

	function f (|asmreg| r, |f64|)
		|| p = self[r]
		if r.fourbytes
			return p|&float|[]
		return p|&f64|[]


	function NumToEgg (|int64| V, |message| exp, |asmreg|)
		rz = .TempMe(exp)
		.NumToReg(v, exp, rz)

	
	function FatASM.FixConst
		|| V = .r[1]|uint64| << 32
		V |= 0
		|| Inv = V|uint64|.countbits > 32 
			V = ~V
		|| R = (~V|uint64|).LongestBitStretch	// longest false-stretch
		if r.x >= 50		// OK so we have the longest stretch in r.x
			V = V rotl 63-r.y
			.r[2] = inv|int|
			.r[3] = V|int|
			return

		debugat
		|| signed = (v|int64| < 0)|int|
			v = ~v

		.op = asm.KNST
		.r[1] = 0
		.r[2] = signed
		.r[3] = v|int|
		if v >= (1 << 48)
			if v >= 64K
				//.op = asm.setn2
				.r[3] = v >> 32
				.R[4] = v & 0xFFFFffff
			  else
				//.op = asm.setn3
				.r[3] = 0
				.R[4] = v >> 32
				.R[5] = v & 0xFFFFffff
				
			
	function SetConst (|Message| List,  |message| Orig,  |bool|)
		opt norefcounts								// set1: r1, 123
		|| RegMsg = list[@thg]				#require
		|| ValMsg = regmsg.Next				#require
		|| Value  = ValMsg.ASMConst
		
		.NumToReg(value, orig, RegMsg.Reg)
		return true
	
	
function message.ASMConst (|uint64|) 
	opt norefcounts
	if (self == @unit)
		.expect(@nil, "d")$
		return .first.float.AsInt
	.expect(@num)$
	if (.name contains '.')
		return .float32.asint
	return .int


function uint64.LongestBitStretch (|ivec2|)
	if self == -1
		return (64,0)
	|uint64| last
	while self
		last = self
		self &= self rotl 1
		rz.x++
	rz.y = last.log2


// needs refcount upgrade.
function uint.isconst (|bool|)


function uint.ConstValue (|int64|)


function int64.CanStoreAsIntImmediate (|bool|)
	return ((self << 50)>>50) == self


function uint64.CanStoreAsFloatImmediate (|bool|)
	return ((self << 50)>>50) == self


function asmreg.CanAddK (|int64| T, |bool|) // used to be used from .plus()... works now from render
	if (self is constany) and .isint
		return t.CanStoreAsIntImmediate

