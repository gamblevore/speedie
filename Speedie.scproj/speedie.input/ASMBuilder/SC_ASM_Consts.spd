

function fatasm.NOOP_Encoder (Asm_encoder)
	curr[] = asm.noop << 24
	return curr


function fatasm.KNST_Encoder (Asm_encoder)
	if curr >= after-2
		return curr
	|| v = .const
	|| Orig = curr++
	|| inv = v>>63					// We only need to store 63 bits then? if the top is always false.
		v = ~v	  					// Opportunity to reclaim the top bit. I'll do it later.
	|asm| knst
	|| Mode = asm.knst << 24
	knst.R1 = .R[0]
	knst.ConstStretchy_Inv = inv
	knst.ConstStretchy_Value = v
	v >>= 17

	if v
		curr++[] = v
		mode = asm.knst2 << 24
		v >>= 32
		if v
			mode = asm.knst3 << 24
			curr++[] = v

	orig[] = knst ||| mode
			
	return Curr



extend ASMState
	// would be better if each scop... knew it's constifier
	// then the ops themselves don't need to call this... just DoMath can
	function MakeConst2 (|&ASMState| self, |asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |fn_ASMConstifier| fn,  |asmreg|)
		|| K = (fn)(l,r)
		.nop2(r, l)
		return .numtoreg(exp, k, dest as asmreg.textual)


	function MakeConst (|&fatasm| fat, |asmreg| reg, |asmreg|)
//		Fat.TryRotateConst // shouldn't we do this later?
		(reg is ConstAny)  // just before export?
		return fat*reg     // or the exporter itself should do it!

	
	function fatasm.TryRotateConst
		|| v = .const
		|| OtherInv = (~v, v)(v>>63)
		require otherinv >> 17
		
		|| Inv = V.CountBits > 32 
			V = ~V
		|| LBS = (~V).LongestBitStretch			// longest false-stretch
		require LBS.x >= (64-12)				// can only store 12-bits
		
		|| ramount = 63-LBS.y 
		V = V rotl ramount
		.op = asm.knsr							// easier to debug
		.r[1] = ramount
		.r[2] = inv|int|
		.r[3] = v
		target debug
			|| back = .r[3]|uint64| rotr .r[1]|uint64|
			if .r[2]
				back = ~back
			if back!=.const // oof
	
	
	function NumToFat (|message| exp, |int64| V, |asmreg| Reg, |&fatasm|)
		|| DestType = Reg.µtype
		Reg = .TempTyped(exp, Reg)				// could we do this without typing?
		|| fat = exp.KNST(reg, 0, 0, 0)
		fat.Const = v
		|| SrcType = reg.µtype
		if  srctype!=desttype  and (reg is ForCast) // ooop
			fat.ConvertConst(srctype, desttype)
			reg.µtype = desttype
		
		.Makeconst(fat, reg)
		return fat
	
	
	function NumToReg (|message| exp, |int64| V, |asmreg| Reg=ASMReg(), |asmreg|)
		if !v and (!reg.reg)
			return reg as asmreg.constany
		return .NumToFat(exp, v, reg).info
	
	
	function SetConst (|Message| List,  |message| Orig,  |bool|)
		opt norefcounts								// set1: r1, 123
		|| RegMsg = list[@thg]
		|| ValMsg = regmsg.Next				#require
		|| Value  = ValMsg.ASMConst
		
		.NumToReg(orig, value, RegMsg.Reg.textasm)
		return true
	
	
function message.ASMConst (|uint64|) 
	opt norefcounts
	if (self == @unit)
		.expect(@nil, "d")$
		return .first.float.AsInt
	.expect(@num)$
	if (.name contains '.')
		return .float32.asint
	return .int


function uint64.LongestBitStretch (|ivec2|)
	if self == -1
		return (64,0)
	|uint64| last
	while self
		last = self
		self &= self rotl 1
		rz.x++
	rz.y = last.log2


// needs refcount upgrade.
function uint.isconst (|bool|)
	debugger


function uint.ConstValue (|int64|)
	debugger

function int64.CanStoreAsIntImmediate (|bool|)
	return ((self << 50)>>50) == self


function uint64.CanStoreAsFloatImmediate (|bool|)
	return ((self << 50)>>50) == self


function asmreg.CanAddK (|int64| T, |bool|) // used to be used from .plus()... works now from render
	if (self is constany) and .isint
		return t.CanStoreAsIntImmediate


function ConstifyIntDiv (fn_ASMConstifier)
	if l.FourBytes
		if l.Signed
			return l.const|int| / r.const|int|
		return l.const|uint| / r.const|uint|
	if l.Signed
		return l.const|int64| / r.const|int64|
	return l.const|uint64| / r.const|uint64|


function ConstifyIntMod (fn_ASMConstifier)
	if l.FourBytes
		if l.Signed
			return l.const|int| mod r.const|int|
		return l.const|uint| mod r.const|uint|
	if l.Signed
		return l.const|int64| mod r.const|int64|
	return l.const|uint64| mod r.const|uint64|


function ConstifyIntMul (fn_ASMConstifier)
	if l.FourBytes
		return l.const|int| * r.const|int|
	return l.const|int64| * r.const|int64|


function ConstifyBoolMul (fn_ASMConstifier)
	return l.const|bool| * r.const|uint64|

function ConstifyIntPlus (fn_ASMConstifier)
	if l is alternate
		return l.const - r.const
	return l.const + r.const


function ConstifyFloatPlus (fn_ASMConstifier)
	if l.fourbytes
		|| rf = r.F32
		|| lf = l.F32
		if l is alternate
			lf -= rf
		  else
			lf += rf
		return lf.asint
	else
		|| rf = r.F64
		|| lf = l.F64
		if l is alternate
			lf -= rf
		  else
			lf += rf
		return lf.asint


function ConstifyFloatDiv (fn_ASMConstifier)
	if l.FourBytes
		return (l.f32 / r.f32).asint
	return (l.f64 / r.f64).asint


function ConstifyFloatMul (fn_ASMConstifier)
	if l.FourBytes
		return (l.f32 * r.f32).asint
	return (l.f64 * r.f64).asint


function ConstifyFloatMod (fn_ASMConstifier)
	if l.FourBytes
		return (l.f32 mod r.f32).asint
	  else
		return (l.f64 mod r.f64).asint


function ConstifyBitAnd (fn_ASMConstifier)
	return l.Const & r.const

function ConstifyBitOr (fn_ASMConstifier)
	return l.Const ||| r.const

function ConstifyBitNot (fn_ASMConstifier)
	return ~l.Const

function ConstifyBitXor (fn_ASMConstifier)
	return l.Const xor r.const

function ConstifyBitSHS (fn_ASMConstifier)
	return l.const >> r.const

function ConstifyBitSHR (fn_ASMConstifier)
	return l.const|uint64| >> r.const|uint64|

function ConstifyBitSHL (fn_ASMConstifier)
	return l.const|uint64| << r.const|uint64|



