


module Intrinsics
	|[message]| Codes
	
	

extend assembler {

function DoIntrinsic (|Message| where, |ASMReg| dest, |message| trin, |ASMReg|)
	opt norefcounts
	|| name = trin[@thg]
	trin = name.next(@prm)$
	|| op = instruction[name!]$
	
	|| form = op.Sizes
	expect (trin.HasChildCount(form.Count))    				(trin, "Expected paramcount: " + form.Count.render)
	return .TheTrinity(trin, where.last, dest, op.opcode)



function TheTrinity (|message| out, |message| Prms, |asmreg| dest, |byte| OpCode, |asmreg|)
	opt norefcounts
	|| n = 0
	|asmreg[8]| Collection
	|uint[6]| AlreadyDone
	for s.fast in out
		.Trinometer(s, prms, Collection, n++, AlreadyDone)

	|| fat = .RequestOp(OpCode, prms.parent!)
	|| DestPos = -1
	for i in n
		|| R = Collection[i]
		if R is Textual
			fat.RegInput(i) = R asnt asmreg.Textual
		  elseif R
			fat.NumInput(i) = R|int|
		  else
			DestPos = i
	
	if destpos >= 0
		dest = .TempOnly(dest)
		fat.Dest(destpos, dest, self)	
	return fat*dest
	

function Trinometer (|message| s, |message| Prms, |&ASMReg| Collection, |int| i, |&uint| Prev)
	opt norefcounts
	|| n = s.name
	|| n1 = n[].lowercase
	if n1.IsInt
		Collection[i] = s.int|asmreg| as ASMReg.Const
		return

	s.expect(@thg)
	if n ~= "dest"
		return
	
	expect (n1 == 'p') (s)
	
	collection[i] = asmreg() as asmreg.Textual
	|uint| l = s.Int(1, 0, 31) #require
	|| Done = Prev[--l]
		collection[i] = Collection[Done-1]
		return

	|| ref = Prms[l]								#expect (s, "Can't find this register")
	Prev[l] = i + 1
	collection[i] = .ÂµTrin(ref) as asmreg.textual
	
}



