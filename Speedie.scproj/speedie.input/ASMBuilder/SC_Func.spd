

class µFunc 
	linkage
		cpp_class FuncInASM
		cpp_part FuncInASM 
	|scfunction|			Fn
	|int|					Start
	|int|					Length
	|bool|					OK

	constructor (|SCFunction| fn)
		.fn = fn
		.start = ASMState.sh.Index
		fn.asm = self

	function µTest (|memory of asm|)
		description "Generate some code (only for testing)."
		rz = asm[.length*3]!
		|| p = rz.ptr
		|| after = .MuRender(P, P+rz.itemCount)
		rz.itemcount = after-p
		rz.length = rz.itemcount
	
	function scfunction.NeedµFunc (|µfunc|)
		opt norefcounts
		return .asm init µfunc(self)
		
	// cosmic lore unfold... into tales untold

	function IR (|&fatasm|)
		return ASMState.sh.start + .start
	
	function MuRender (|!&ASM| Where, |!&asm| After, |!&asm|)
		|uint64| HasLabel
		rz = where
		for (fat in self) (i)
			haslabel |= fat.jumpreg << (i&63)
			fat.ASMIndex = rz - where
			fat.CheckHasOutput
			rz = fat.µrenderinto(rz, after)

		if HasLabel // Use this as a jump-map??? To skip huge sections?
			for fat in self
				|| r = fat.JumpReg
					fat.FillLabelRequest(where, rz, r-1)


	function fatasm.FillLabelRequest (|!&asm| Start, |!&asm| After, |int| reg)
		|| SelfOut = start + .ASMIndex
		target debug: debug_require  SelfOut >= start  and  SelfOut < after 
	
		// this needs fixing.
		|int| J = .r[reg]
		|| OldDest = self + J + 1
		|| DestOut = OldDest.asmindex
		|| dest = start + DestOut

		target debug: debug_require dest >= start and dest <= after
		|| J2 = (dest - SelfOut) -1
		check (J2 != -1) (self, "Invalid ASM generated (infinite loop)")
		.r[reg] = J2
		.µRenderInto(SelfOut, SelfOut+1) // rerender
		.r[reg] = J						 // restore!
	
	
	function memory.Run (|memory of asm| self, |&ivec4| Args = nil, |int| ArgCount=0, |int64|)
		disabled
		cpp_part RunArgs
		|| r = jb_vm.vm.Registers(true)
		if args
			for i in argcount
				r[i] = args[i] 
		
		return jb_vm.Run(.ptr, .length)|&int64|[]


	render
		fs <~ "asm ${.fn.name}\n"
		|| bb = 0
		for µ in self
			if options.ASMRenderBlocks and µ.BlockNum != bb
				bb = µ.BlockNum
				fs <~ "//$bb\n"
			fs <~ '\t'
			µ.Renda(fs)
			fs <~ '\n'


/// TEXTUAL STUFF		
	function DebugPrint
		printline .fn
		|| fs = faststring()
		.render(fs)
		printline fs


	iterator
		|| FirstInst = .IR
		|| CurrInst = FirstInst
		|| AfterInst = Currinst + .length
		while currinst < Afterinst
			yield currinst (CurrInst - FirstInst)
			++currinst



function JBin.Add (|µFunc| fn)
	.AddMemory(@bin, fn.length*4)
	for i in fn
		.AppendInt(i.Encode)
