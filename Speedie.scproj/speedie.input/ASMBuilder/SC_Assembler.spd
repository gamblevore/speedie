

module TextAssembler
	|dictionary of uint|			LabelsToDo
		
	
	function TextFunc (|message| msg, |bool|) // assemble a function from text
		|| fn = SCFunction.new
		fn.source = msg
		ASmState.Sh.startfunc(fn)
		|| arg = ASmState.Sh.TextFuncSub(msg)
			compiler.exportnames[fn.exportname] = fn
		ASmState.Sh.FinishASM
		.LabelsToDo.dispose


	function TextData (|message| msg) // assemble a function from text
		// how?


	function Assemble (|message| msg)
		opt norefcounts
		for ch in msg
			if ch istmp "asm"
				.textfunc(ch)
			  elseif ch istmp "data"
				.textdata(ch)



module SpdAssembler
	|[scfunction]|				PackFuncs
	
	function InitAss
		instruction.InstructionInit
		asmtmp.InitAccess
		Instruction[asm.KSTR].Const
		Instruction[asm.KNST].Const
		return 
		TextAssembler.Requests		:= dictionary()
		TextAssembler.RequestTable	:= array()

	syntax access (|message| m, |ÂµFunc|)
		cpp_part AccessStr
		opt norefcounts
		|| f = compiler.XFunc(m.name, m)
			return f.ASM					#expect (m, "This function has no ASM")
						

	function GenerateASM (|scfunction| fn)
		opt norefcounts
		ASMState.Sh.StartFunc(fn)
		|| fp = fn_asm_table[@arg]!
		|| R = asmreg()
		|| A = fn.SourceArg!
		(fp)(ASmState.Sh, A, R)
		ASMState.Sh.FinishASM
		.Guard


	function Guard
		ASMState.sh.AddASM(ASM.EROR, compiler.InternalFile.ast!)
	
	
	function Vacuum (|scfunction| fn, |bool|)
		opt norefcounts
		for 2
			.GenerateASM(fn)
			if ASMState.Sh.ok
				printline fn.asm!.render
				exit
			require ASMState.ExpandJSM
		
		while .Optimise(fn.asm!)
			loop ++fn.OptCounts <= 16
		.FlowControl


extend_module ASM
	function Needed (|bool|)
		|| fn = compiler.XFunc("JB_ASM_Run")
			return fn.MyReacher
