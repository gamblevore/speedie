

module TextAssembler
	|dictionary of uint64|			Labels
		
	
	function TextFunc (|message| msg, |bool|) // assemble a function from text
		|| fn = SCFunction.new
		fn.source = msg
		ASmState.Sh.InitAndStartfunc(fn)
		ASMState.Sh.TextFuncSub(msg)
		compiler.exportnames[fn.exportname] = fn
		ASmState.Sh.FinishASM
		ASMState.Sh.LoadLabelJumps
		.Labels.dispose


	function TextData (|message| msg) // assemble a function from text
		// how?


	function Assemble (|message| msg)
		opt norefcounts
		for ch in msg
			if ch istmp "asm"
				.textfunc(ch)
			  elseif ch istmp "data"
				.textdata(ch)



module SpdAssembler
	|[scfunction]|				PackFuncs
	
	function InitAss
		instruction.InstructionInit
		ASMType.InitAccess
		Instruction[asm.KNSR].Const
		Instruction[asm.KNST].Const
		asm.encoders[asm.KNST] = fatasm.KNST_Encoder
		asm.encoders[asm.noop] = fatasm.NOOP_Encoder
		return 
		TextAssembler.Requests		?= dictionary()
		TextAssembler.RequestTable	?= array()


	syntax access (|message| m, |ÂµFunc|)
		cpp_part AccessStr
		opt norefcounts
		|| f = compiler.XFunc(m.name, m)
			return f.ASM					#expect (m, "This function has no ASM")
						

	function GenerateASM (|scfunction| fn, |bool|) // memory safe ASM reattempt
		opt norefcounts

		if !fn.tableid // oof
		ASMState.Sh.InitAndStartFunc(fn)
		|| A = fn.SourceArg!
		ASMType.HoistedArg(ASMState.Sh, A, ASMReg())
		ASMState.Sh.FinishASM

		if StdErr.ok
			fn.asm!.debugprint
			return true

