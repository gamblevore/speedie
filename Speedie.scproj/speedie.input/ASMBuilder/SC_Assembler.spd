

module TextAssembler
	|dictionary of uint|			LabelsToDo
		
	
	function TextFunc (|message| msg, |bool|) // assemble a function from text
		|| fn = SCFunction.new
		fn.source = msg
		TreeAssembler.StdState.Initstate(fn)
		|| arg = TreeAssembler.StdState.TextFuncSub(msg)
			compiler.exportnames[fn.exportname] = fn
		TreeAssembler.StdState.FinishASM
		.LabelsToDo.dispose


	function TextData (|message| msg) // assemble a function from text
		// how?


	function Assemble (|message| msg)
		opt norefcounts
		for ch in msg
			if ch istmp "asm"
				.textfunc(ch)
			  elseif ch istmp "data"
				.textdata(ch)



module TreeAssembler
	|ASMFuncState|				StdState
	|[scfunction]|				PackFuncs
	
	function InitAll
		instruction.instructionInit
		fn_asm.InitTable
		Instruction[asm.SET1]!.Const
		Instruction[asm.SETK]!.Const
		Instruction[asm.SETN]!.Const
		return 
		TextAssembler.Requests		:= dictionary()
		TextAssembler.RequestTable	:= array()


	syntax access (|message| m, |ÂµFunc|)
		cpp_part AccessStr
		opt norefcounts
		|| f = compiler.XFunc(m.name, m)
			return f.ASM					#expect (m, "This function has no ASM")

	
	function CollectFuncs (|string| exp, |[scfunction]|)
		opt norefcounts
		for l in exp / ','
			|| fn = compiler.XFunc(l)
				rz <~ fn
				fn.tableid = rz.length
			
		
	function VacuumPack (|[scfunction]| list, |int|)
		opt norefcounts
		fn_asm.InitTable

		require platform.IsDebug
		.stdstate.TotalInit
		
		for fn in list
			.Vacuum(fn)
		
		return 1K


	function Vacuum (|SCFunction| fn)
		opt norefcounts
		
		.StdState.Initstate(fn)
		|| fp = fn_asm_table[@arg]
			|| R = 0.reg
			|| A = fn.SourceArg!
			|| ST = TreeAssembler.StdState
			(fp)(ST, A, R)
		.StdState.FinishASM



extend_module ASM
	function Needed (|bool|)
		|| fn = compiler.XFunc("JB_ASM_Run")
			return fn.MyReacher
