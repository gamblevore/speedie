

module TextAssembler
	|dictionary of uint|			LabelsToDo
		
	
	function TextFunc (|message| msg, |bool|) // assemble a function from text
		|| fn = SCFunction.new
		fn.source = msg
		ASmState.Sh.Initstate(fn)
		|| arg = ASmState.Sh.TextFuncSub(msg)
			compiler.exportnames[fn.exportname] = fn
		ASmState.Sh.FinishASM
		.LabelsToDo.dispose


	function TextData (|message| msg) // assemble a function from text
		// how?


	function Assemble (|message| msg)
		opt norefcounts
		for ch in msg
			if ch istmp "asm"
				.textfunc(ch)
			  elseif ch istmp "data"
				.textdata(ch)



module SpdAssembler
	|[scfunction]|				PackFuncs
	
	function InitAss
		instruction.InstructionInit
		asmtmp.InitAccess
		Instruction[asm.KSTR].Const
		Instruction[asm.KNST].Const
		return 
		TextAssembler.Requests		:= dictionary()
		TextAssembler.RequestTable	:= array()

	syntax access (|message| m, |ÂµFunc|)
		cpp_part AccessStr
		opt norefcounts
		|| f = compiler.XFunc(m.name, m)
			return f.ASM					#expect (m, "This function has no ASM")

	
	function CollectFuncs (|string| exp, |[scfunction]|)
		opt norefcounts
		for l in exp / ','
			|| fn = compiler.XFunc(l)
				rz <~ fn
				fn.tableid = rz.length
						

	function GenerateASM (|scfunction| fn)
		opt norefcounts
		ASMState.Sh.Initstate(fn)
		|| fp = fn_asm_table[@arg]!
		|| R = asmreg()
		|| A = fn.SourceArg!
		(fp)(ASmState.Sh, A, R)
		ASMState.Sh.FinishASM


	function Optimise (|bool|)

	
	function FlowControl (|bool|)

	
	function Vacuum (|scfunction| fn, |bool|)
		opt norefcounts
		|| tries = 2
		while tries -- > 0
			.GenerateASM(fn)
			while .Optimise
			.FlowControl
			if ASMState.Sh.ok
				printline fn.asm!.render
				return true
			require ASMState.ExpandJSM


extend_module ASM
	function Needed (|bool|)
		|| fn = compiler.XFunc("JB_ASM_Run")
			return fn.MyReacher
