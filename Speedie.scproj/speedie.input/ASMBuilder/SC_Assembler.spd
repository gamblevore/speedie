

module TextAssembler
	|dictionary of uint64|			Labels
		
	
	function TextFunc (|message| msg, |bool|) // assemble a function from text
		|| fn = SCFunction.new
		fn.source = msg
		require ASmState.Sh.InitAndStartfunc(fn)
		ASMState.Sh.TextFuncSub(msg)
		compiler.exportnames[fn.exportname] = fn
		ASmState.Sh.FinishASM
		ASMState.Sh.LoadLabelJumps
		.Labels.dispose


	function TextData (|message| msg) // assemble a function from text
		// how?


	function Assemble (|message| msg)
		opt norefcounts
		for ch in msg
			if ch istmp "asm"
				.textfunc(ch)
			  elseif ch istmp "data"
				.textdata(ch)



module SpdAssembler
	|[scfunction]|				PackFuncs

	syntax access (|message| m, |scfunction|)
		cpp_part AccessStr
		opt norefcounts
		return compiler.XFunc(m.name, m)	#expect (m, "This function has no ASM")
						

	function GenerateASM (|scfunction| fn, |bool|) // memory safe ASM reattempt
		opt norefcounts
		
		require ASMState.Sh.InitAndStartFunc(fn)
		fn.GenASM
		ASMState.Sh.FinishASM

		if StdErr.ok
			target debug
				fn.Âµprint
			return true

