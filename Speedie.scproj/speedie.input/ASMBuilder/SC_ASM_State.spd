

struct ASMState
	linkage: cpp_part Pac
	|uint16| 					BasicBlock
	|DataTypeCode|				ReturnASM

	|byte|						VDecls
	|byte|						VTmps
	|bool|						OK    
	|bool|						Inited
	|byte|						ReturnDest

	target debug
		|&fatasm|				LastProgress
	|µFunc|						Out      
	|&FatASM|					FuncStart
	// we need to use indexes.
	// So .curr and .start and .end are now all ints!
	|&FatASM|					Start		// a "slice" feature would be nice    
	|&FatASM|					Curr    
	|&FatASM|					End    
	|scfunction!|				Fn    
	|scdecl--[32]|				Vars
// constants...
	|FATASM| 					Zero

	constants
		kContinue		= 254
		kExit			= 255
		MinHoistScore	= 3
	

	module
		|FatASM[]|					JSMSpace = FatASM[0]!
		|[memory of fatasm]|		Ancients
		|ASMState|					Sh


	function OpenVars (|uint64|)
		rz = (.VDecls|uint64| << 32) ||| (.vtmps << 0)
		
	function CloseVars (|uint64| V, |asmreg|)
		|| top = .vdecls
		|| d = v.high
		while top > d
			// remove NeverAltered and use .vars?
//			.NeverAltered[top] = 0
			.Vars[top] = nil
			top--
			
		.VDecls = d
		.VTmps = v.low
			
	function AddFuncParams (|SCFunction| fn)
		opt norefcounts
		for a in fn.Args
			(a is param) // reset
			.DeclareMe(a.source, a)

	function Last (|&FatASM|)
		return .curr - 1

	function Last (|asm| type, |&FatASM|)
		|| L = .curr - 1
		if l isa type
			if l.blocknum == .basicblock
				return L
	
	function IntPowerOfTwo (|asmreg| r, |int| Sub=0, |FailableInt|)
		// -1 --> -1,  0 --> 0,  1 --> 1,  2 --> 2,  4 --> 3,  8 --> 4
		// this is used for multiplication mostly. like x*-1, or x*0, or x*1
		if r is ConstOutput
			|| v = r.const
			if v == -1
				.NopConst(r)
				return v
			v -= Sub
			if v.IsPow2
				.NopConst(r)
				return v.Log2+1

	syntax expect (|message?| where=nil, |string| msg)
		cpp_part Fail
		|| f = scfunction.currfunc!.asm
			f.length = .curr - .funcstart
			printline f.render
		debugger
		error (where, msg)


	function DeclareMe (|Message| where,  |scdecl| Type,  |asmreg|)
		|| t = Type.CalculateASMType
		// if we have a var, that we are returning, and we are an inline.
		if .ReturnDest and (type is ReturnedVar) and (.fn.ReturnedVars == 1)
			t.reg = .ReturnDest
			Type.wholetype = t|DataTypeCode|
			return t
		
		|| d = .VDecls|int| + 1
		t.reg = d
		Type.wholetype = t|DataTypeCode|
		if (d < .vtmps)
			.Vars[d] = Type
			.vdecls = d
			target debug: Type.ASMSanity
			return t
		error (self, where, "No free local variables.")


	function TempTyped (|Message| where, |asmreg| T=asmreg.Temp, |asmreg|)				// .needreg
		opt norefcounts
		if t isnt textual
			// what if there is a type and its different?
			// and if its NEVER different... why add it?
			t.µtype = where.asmdecl.datatype
		return .TempOnly(where, t)


	function TempOnly (|Message| where, |asmreg| T=asmreg.Temp, |asmreg|)				// .needreg
		opt norefcounts
		if t.reg
			return t
		|| r = .vtmps - 1
		check (r > .vdecls) (where, "No free local variables.")
		t.reg = r
		.vtmps = r
		(t isnt realconst) // why would it be?
		(t is temp)
		return t

	
	function Nop (|asmreg| R)
		|| f = r.fat
			return .Nop(f)
		if r.reg and r isnt param
			debugat // bad!
	
	function Nop2Consts (|asmreg| A, |asmreg| B)
		.nopconst(A)
		.nopconst(B)
		.nopconst(A) // in case of swapped order
	
	function Const (|asmreg| R, |int| bits, |bool| signed, |ind|)
		if R is ConstOutput
			|| k = R.const
			if k.fits(bits, signed)
				.nopconst(R)
				return k|uint64|.trim(bits)

	function NopConst (|asmreg| R)
		if (r is RemoveableOutput) or (r is realconst)
			|| f = r.fat
				.Nop(f)
	
	function Nop (|FATASM| R) //!!
		r.op = asm.noop
		r.jumpreg = 0
		|| C = .curr - 1
		if R == C
			.curr = C // nice


	function Nop (|fatasm| Start, |fatasm| After)
		while start < After
			.nop(--after)


	function µBoolInto (|message| exp, |AsmReg| Dest, |asmreg|)
		target ASMNightmare {
		|| X = .ExistingVar(Exp)
		X ?= .µInto(exp, dest)
		if  (X.µtype isnt bool)  or  (dest is negate  and  X isnt AlreadyNegated)
			return .exists(dest as (X bitand asmreg.fromexistingvar), X, exp)
		return .Assign(dest, X, exp)
		}


	function µInto (|message| exp, |AsmReg| Dest, |asmreg|)
		target ASMNightmare {

		|| rz = .µ(Exp, dest)
		|| dest2 = rz.reg(dest)
		(dest2 is temp) = (dest is temp)
		return .Assign(Dest2, rz, exp)
		}
		
	function µ (|message| exp, |AsmReg| Dest = asmreg(), |asmreg|)
		description "Same as µGetASM, except this closes temp vars for reuse." 
		|| Closer = .OpenVars
		rz = .µGetASM(exp, dest)
		.CloseVars(Closer)


	function µGetASM (|message| exp, |AsmReg| Dest = asmreg(), |asmreg|)
		opt norefcounts
		cpp_part GetASM 
		target debug
			dest.tmpcheck
			debugat 0 // keep this
		  else
			opt inline

		.sanity
		|| fn = fn_asm_table[exp.ASMType]!
		|| ss = (fn)(self, exp, dest)
		.sanity

		target debug
			if !ss.tmpcheck
				(fn)(self, exp, dest)
			check (ss) (self, exp, "µInto failed")
			if (ss is RealConst) and ss.reg
				if !ss.fat
					debugger
					(fn)(self, exp, dest)
			if dest is set or ss is set
				return ss // no need test.
			if !ss.reg and (ss isnt condanswer)
				if (ss isnt constoutput)
					debugger
					(fn)(self, exp, dest)
		return ss


	function Sanity
		opt norefcounts
//		|| x1 = .fn.asm
//			|| x2 = x1.fn
//			|| x3 = x2.asm
//				|| x4 = x3.fn
	

	target ASMNightmare {
	function IncrPost (|message| exp,  |AsmReg| Dest,  |AsmReg| ToGrow,  |int64| Value,  |asmreg|)
		if dest isnt discard
			dest = .TempTyped(exp, dest)
		if ToGrow.isint and value.CanStoreAsIntImmediate
			return exp.ADPK(dest, ToGrow, Value) * Dest
		.Assign(dest, ToGrow, exp)
		rz = .IncrPre(exp, togrow, ToGrow, value)


	function AddToReg (|message| exp, |asmreg| Dest, |asmreg| Orig, |int64| Amount, |asmreg|)
		if !dest or dest == asmreg()
			dest.µtype = orig.µtype
		dest = .temponly(exp, dest)
		|| Where = orig • dest
		(where is realconst)
		|| K = .NumToReg(exp, amount, where, orig.µtype)
		return .Plus(dest, Orig, K, exp)
	
	
	function IncrPre (|message| exp,  |AsmReg| Dest,  |AsmReg| Src,  |int64| Value,  |asmreg|)
		if !src.reg // what?
		if !dest.reg
			dest = src
		src = .addtoreg(exp, src, src, value) 
		if dest.reg==src.reg
			return src
		return .Assign(dest, src, exp)

		
///////////////////////////////////////////////////////////////////////////////////////////////////

	function FuncPrm (|message| prm, |asmreg|)
		|| r = .ExistingVar(prm)
			return r
		return .µGetASM(prm)


	function ReadOrWrite (|ASMReg| dest, |message| m, |asmreg| base, |asmreg| varadd, |int| index=0, |asmreg|)
		return .ReadOrWriteSub(dest, m, base, varadd, index) * dest


	function ReadOrWriteSub (|ASMReg| dest, |message| exp, |asmreg| base, |asmreg| varadd, |int| index, |&fatasm|)
		if dest is containsaddr
			#!wait?? this is meant to be an addrrequest? not a response.
			debugger

		(dest asnt= asmreg.AddrRequest)
		|| T = dest.µtype
		|| bytes = t.ByteCount.log2
		if  (bytes|uint| > 4)
			error (exp, "Object to large to access")				// can we do struct-mem-copy?
			bytes = 0
		
		if varadd is ConstOutput
			|| CC = varadd.fat
				if varadd is RealConst
					.nop(cc)
				index += cc.const
				varadd = asmreg()

		base = .InlineOffset(Base, bytes, index, 127)
/*
	ADDK: bs, r1, 4
	RD1U: r2, bs, value, 4, 0
*/					
		if index >= 128												// read/write only allows up to 127
			index <<= bytes
			base = .AddToReg(exp, asmreg(), base as asmreg.noscale, index)
			index = 0
		
		target ASMNightmare {
		rz = exp.RD4U(dest, base, varadd, index, 0)
		if dest is set
			rz.op = ASMType.WriteASM[bytes]
		  else
			|| B = (bytes<<1) + t.issigned
			rz.op = ASMType.ReadASM[b]
		} else {
			rz = ASMState.sh.Zero
		}

	function Read (|asmreg| dest, |message| exp,  |asmreg| ptr,  |asmreg| varadd,  |int| index=0,  |&fatasm|)
		opt inline
		(dest isnt set)
		return .ReadOrWriteSub(dest, exp, ptr, varadd, index)
		

	function Write (|asmreg| dest, |message| exp,  |asmreg| ptr,  |asmreg| varadd,  |int| index=0,  |&fatasm|)
		opt inline
		(dest is set)
		return .ReadOrWriteSub(dest, exp, ptr, varadd, index)


	function PrmCollectC (|message| prms, |SCFunction| fn, |&uint| Addrs, |uint64|)
		// we need to do ints last, and also collect these backwards.
		opt norefcounts
		|| sh = 0
		|| fc = 0
		|| ic = 0
		|| n = fn.args.Length
		for Ints in 2
			|| p = prms.last
			while p
				|| ty = p.ASMDecl
				if ty.SpecialRegs|int| != Ints // should get .specialregs from message somehow?
					|| v = .FuncPrm(p!).reg
					rz  |=  v << sh
					sh += 5
					ic += ints
					fc += !ints
					if .Last isa asm.addr
						addrs[] |= v.Log2
				p--
		
		if fc>8 or ic>8			// hmmm
		rz <<= 12
		rz |= fn.ReturnType.SpecialRegs << 11
		if fc
			rz |= (8-fc) << 6
			rz |= (8-ic) << 0
		  else
			rz |= (17-ic) << 6


	function PrmCollect (|message| prms, |scfunction| fn, |&uint| Addrs,  |uint64|)
		opt norefcounts
		if fn.HasCVersion
			return .PrmCollectC(prms, fn, addrs)
		
		|| sh = 7
		|| p = prms.first
		for FnArg in fn.args
		// we'd like to collect bits on the SIMD/normal register file
		// for nativisation. 6 - bits per thing. Still counts as a 64-bit number
		// FuncPrmBits() also would need upgrading.
			|| v = .FuncPrm(p!).reg
			rz  |=  v << sh
			sh += 5
			rz++								// Send-count (4 bits max)
			p++
			if .Last isa asm.addr
				addrs[] |= v.Log2


	function CallFunc (|message| exp, |asmreg| dest, |scfunction| fn,  |asmreg|)
		|| v = .VDecls
		v += (dest.reg < v) // NOICE
		.vdecls = v
		check (v < 32) (exp, "Too many registers in use. No space for result.")
		dest.reg = v
		dest.µtype = fn.RegType
		rz = Dest.Simplify
		if !rz.reg
			(rz is constoutput)
	}

	function PackMakerInit (|bool|)
		opt norefcounts
		if .Inited
			return true
		.inited = true
		VM_Builder.JustDefineInstructions
		SpdAssembler.InitAss
		return .alloc(ASMState.JSMSpace)


	// we need to use indexes.
	// So .curr and .start and .end are now all ints!
	function Alloc (|memory of fatasm| j, |bool|)
		if j.SetSize(4MB)
			.start = j.ptr
			.curr = .start
			.end = j.buffersize + .start
			spdassembler.Guard
			Ancients <~ j
			return true


	function InitAndStartFunc (|scfunction| fn)
		if fn.ASM
			.out = fn.asm!
		  else
			.out = µfunc(fn, .curr)
		.zero = nil
		.zero.info = AsmReg()
		memory.Fill((&.vars[0])|&byte|, 32*8, 0)
		.FuncStart = .curr
		target debug
			.LastProgress = .curr
		.fn = fn
		scfunction.currfunc = fn
		.ReturnASM = fn.ReturnType.regtype
		.OK = true
		.ReturnDest = nil
		.BasicBlock = 0
		.VDecls = 0
		.VTmps = 32
		.AddFuncParams(fn)


	function FinishASM
		opt norefcounts
		if .zero.Const // what?
		|| l = .last
		if !l.IsFinisher
			expect (!.fn.returntype) ("ASMReturn".internal) // why?
			target ASMNightmare {
			|| fat = .fn.SourceArg!.RET(asmreg(), asmreg(), asmreg(), 0, asmreg())
			}
		.SetLength
		.ImproveJumps


	function fatasm.JumpImprove (|bool|)
		|| D = self
		|| n = 0
		while
			n++
			expect (n < 30) (.msg)
			D = D.jumpto			#require
			if d isa asm.jump
/				.jumpto = D
				rz = true
				continue
			if d isa asm.ret
				(self)[0] = (d)[0]
				rz = true
			exit


	function ImproveJumps
		|| A = .Curr
		|| J = .funcstart
		|| C = 0
		// jumps of 0 can be rendered as a nop
		while A > J
			if J isa asm.jump
				C += J.JumpImprove
			J++
		target debug
			if C
				PrintProgress(nil)


	function SetLength
		.out.length = .curr - .FuncStart
		
		
	function SmartSecretFat (|asmreg| Thg, |&fatasm|)
		|| F = thg.fat
			return F
		
		|| Where = .last
		|| Start = .FuncStart
		|| reg = thg.reg
		while  where >= start
			require where.BlockNum == .BasicBlock
			|| X = where.SmartFatness(reg)
			require !X.KnownFalse
			if X.knowntrue
				return where
			// now what?
			Where--


/* The .asint/.asfloat functions should be recognised as working on constants? Or is that just a general case of inline functions? Technically, its an inline func that does nothing, just returns the original... with a different type. */


	function IsASMConst (|message| exp, |bool|)
		target ASMNightmare {
		|| fn = exp.func
		if fn == @num
			return true
		if fn == @thg // now what?
			return ASMType.ThgSub(self, exp, ASMReg.ConstRequest)
		}
	
	
	function CanReuseInput (|message| Prms, |asmreg| Dest, |int| vr,  |bool|)
		opt norefcounts
		target ASMNightmare {
		require (dest.reg == vr)
		for p.fast in prms
			// check for the address of the same var?
			if .ExistingVar(p).reg == vr
				require !rz
				rz = true
		}
		
	
	function TryInline (|message| prms, |asmreg| dest, |µFunc| asm, |bool|)
	// how to do addr of reg?
	
		opt norefcounts
		|| fn = asm.fn
		require .fn.ExportName contains "Inline_"
		require !fn.CurrentlyInlining	
		fn.CurrentlyInlining = true
		
		|| oldFunc = .fn
		|| OldDest = .ReturnDest
	
		.fn = fn
		.ReturnDest = dest.reg ||| 128
	
		|fatrange| LL 
		LL.Start = .curr
		|| OK = .TryInlineSub(prms, dest, fn)
		LL.AllJumpTo

		.ReturnDest = Olddest
		.fn = oldFunc
		fn.CurrentlyInlining=false
		return OK
	
		
	function TryInlineSub (|message| prms, |asmreg| dest, |scfunction| fn, |bool|)
		target ASMNightmare {
		opt norefcounts
		|| p = prms.first
		for a in fn.Args
			|| v = .ExistingVar(p!) 
				|| vr = v.reg
				if (a isnt Altered) or .CanReuseInput(prms, dest, vr)
					|| T = a.WholeType.reg(vr)
					a.DataType = t|datatypecode|
					(a is param) = (v is param)
					continue 
			
			v = .DeclareMe(a.source, a)
			.µInto(p!, v as asmreg.ForInline)
			p++
		
		ASMType.arg(self, fn.SourceArg!, ASMReg())
		}
		return true
	
	
	function AskForInline (|message| prms, |asmreg| dest, |SCFunction| fn, |bool|)
		opt norefcounts
		|| A = fn.ASM
		require A and !fn.HasCVersion
		|| Gain = 5	- (A.Length-1)				// assume that functions have 5 instruction overhead.
		Gain += (fn is inline) * 24				// sigh...
		
		|| Grace = 8
		for p.fast in prms
			Grace += .IsASMConst(p)<<2
	
		require Gain + Grace > 0
	
		|| Start = .curr
		if .TryInline(prms, dest, A)
			|| Grown = .curr - start
			if Grown < gain
				return true
		.curr = start
	
			

	
function SCFunction.HasCVersion (|bool|)
	if .isstdlib
		return true
	require self is wrapper

	if .IsCppInBuilt == 1	// cpp_inbuilt. These normally have no address? but perhaps we made a wrapper for it in the exec? we should check if it still exists.
		debugat
		return true

	if .IsCppInBuilt == 2	// cpp_nothing: cpp_spd might sound better?
		debugat
		return false // need to be replaced with ASM intrinsics.

	if self Is ExternalLib	// cpp_libwrapper ?   // Speedie_Main in perry, counts as one!
		debugat
		return false  // i think only perry used this and only in debug mode within Xcode

	return true


target ASMNightmare {

function asmstate.RegsBitClear (|message| exp, |int| RegAddrs, |scfunction| fn)
	opt norefcounts
	for (b.bits in RegAddrs) (i)
		|| arg = fn.args[i]
		if arg and arg.PointerCount == 1
			|| in = arg.Internal
			if in and in.IsNormal and !in.IsFloat
				|| S = 64 - in.SizeOfQuery
				if S >= 0
					exp.BFLG(i.asm, i.asm, S, S, 0)


function @ASMType.DoFunction (fn_asm)
	opt norefcounts
	|| prms = exp.last!
	|| fn = prms.asfunc!
	
	dest = .CallFunc(exp, dest, fn)
	if .AskForInline(prms, dest, fn)
		return dest

	|| Closer = .OpenVars
	|uint| RegAddrs
	|| P = .PrmCollect(prms, fn, RegAddrs)
	.CloseVars(Closer)
	
	|| PExt = P >> 32
	|| fat = prms.FNC(dest, fn.TableID+31, P,  PExt)
	if fn.HasCVersion
		fat.op = asm.FNCX
	fat.op += PExt > 0
	
	if RegAddrs
		.RegsBitClear(exp, RegAddrs, fn)
		
	return fat * dest
}


// Speedie's function histogram:  0:410, 1:1656, 2:1464, 3:713, 4:167, 5:61, 6:10, 7:4
// There are only 4 above 6!, only 14 above 5, 75 above 4
// almost all lib functions have 4 or less. 5 is for proj funcs.
		


function @ASMState.ExpandJSM (|bool|)
	require .Ancients < 16
	|| j = FatASM[4MB]
		.Ancients <~ .JSMSpace
		.JSMSpace = j
		return sh.Alloc(j)
	


function fatasm.IsFinisher (|bool|)
	|| o = .op|asm|
	return o == asm.ret or asm.trap or asm.TAIL

