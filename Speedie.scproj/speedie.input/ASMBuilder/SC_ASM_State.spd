

struct ASMState
	linkage: cpp_part Pac
	|uint16| 					BlockNum
	|uint16| 					ParentBlock

	|byte|						VDecls
	|byte|						VTmps
	|datatypecode|				ReturnASM
	|bool|						OK    
	|bool|						Inited   

	|µFunc|						Out      
	|&FatASM|					FuncStart
	|&FatASM|					Start		// a "slice" feature would be nice    
	|&FatASM|					Curr    
	|&FatASM|					End    
	|FATASM| 					Zero

// constants...
//	|uint|						VAvail
//	|(&FATASM)[32]|				RegConsts  // its more complex than that
// for example, a loop that calls a func... then the temps are wiped out.
// we can't rely on a temp that was called earlier.
// what if we did all the const optimisation in the optimiser?
// makes sense, right? 

	constants
		kContinue = 254
		kExit = 255
	
	function CloseVDecls (|int| i)
		.VDecls = i

	function CloseVTmps (|int| i)
		target debug: if i < .vtmps // what?
		.VTmps = i

			
	function AddFuncParams (|SCFunction| fn)
		opt norefcounts
		for a in fn.Args
			.DeclareMe(a.source, a)

	function Last (|&FatASM|)
		return .curr-1
	
	function IntPowerOfTwo (|asmreg| r, |int| Sub=0,   |FailableInt|)
		// -1 --> -1,  0 --> 0,  1 --> 1,  2 --> 2,  4 --> 3,  8 --> 4
		// this is used for multiplication mostly. like x*-1, or x*0, or x*1
		if r is ConstAny
			|| v = r.const
			if v == -1
				return v
			v -= Sub
			if v.IsPow2
				return v.Log2+1

		if (!r.reg) // what?


	function IncrPost (|message| exp,  |AsmReg| Dest,  |AsmReg| ToGrow,  |int64| Value,  |asmreg|)
		if dest isnt discard
			dest = .TempTyped(exp, dest)
		if togrow.isint and value.CanStoreAsIntImmediate
			return exp.ADPK(dest, ToGrow, Value) * Dest
		.Assign(dest, ToGrow, asmreg(), exp)
		rz = .IncrPre(exp, togrow, ToGrow, value)


	function IncrPre (|message| exp,  |AsmReg| Dest,  |AsmReg| Src,  |int64| Value,  |asmreg|)
		if !src.reg // what?
		if !dest.reg
			dest = src
		if dest.isint and Value.CanStoreAsIntImmediate
			rz = exp.ADDK(src, src, Value) * dest
		  elseif dest.isfloat and dest.FourBytes and value|uint64|.CanStoreAsfloatImmediate
			rz = exp.FADK(src, src, value) * dest
		  else
			|| where = .NumToReg(exp, value)
			rz = .Plus(src, src, where, exp)
		if dest.reg!=src.reg
			rz = .Assign(dest, src, src, exp)


	syntax append (|int| code, |message| dbg, |&FatASM|)
		cpp_part RequestOp
		|| p = .curr
		if p < .end
			.curr = p + 1
			P.op = code
			p.debug = dbg
			p.BlockNum = .BlockNum
			p.ParentBlock = .ParentBlock
			return p
		.OK = false
		return .start


	syntax expect (|message?| where=nil, |string| msg)
		cpp_part Fail
		|| f = scfunction.currfunc!.asm
			f.length = .curr - .funcstart
			printline f.render
		debugger
		error (where, msg)


	function DeclareMe (|Message| where,  |scdecl| Type,  |asmreg|)
		|| d = .VDecls|int| + 1
		if (d < .vtmps)
			|| t = Type.CalculateASMType
			t.reg = d
			Type.wholetype = t|DataTypeCode|   		// right?
			.vdecls = d
			target debug: Type.ASMSanity
			return t
		error (self, where, "No free local variables.")


	function TempTyped (|Message| where, |asmreg| T=asmreg.Temp, |asmreg|)				// .needreg
		opt norefcounts
		if t isnt textual
			// what if there is a type and its different?
			// and if its NEVER different... why add it?
			t.µtype = where.asmdecl.typeonly // probably needs changing.
		return .TempOnly(where, t)

	function TempOnly (|Message| where, |asmreg| T=asmreg.Temp, |asmreg|)				// .needreg
		opt norefcounts
		if t.reg
			return t
		|| r = .vtmps - 1
		check (r > .vdecls) (where, "No free local variables.")
		t.reg = r
		.vtmps = r
		return t


//	function RegMap (|int|)
//		|| dcls = (.VDecls+1)~bits
//		if .vtmps >= 32
//			return dcls
//		|| tmps = .vtmps~bits
//		tmps = ~tmps
//		return dcls ||| tmps

///////////////////////////////////////////////////////////////////////////////////////////////////


	function µInto (|message| exp, |AsmReg| Dest, |asmreg|)
		|| rz = .µ(Exp, dest)
		check (rz) (self, exp, "µInto failed")
		|| dr = dest.reg
		if !dr // what?
		
		if rz.reg == dr
			return rz
		return .Assign(Dest, rz, asmreg(), exp)
	
			
	function µ (|message| exp, |AsmReg| Dest = asmreg(), |asmreg|)
		opt norefcounts
		target !debug
			opt inline
		cpp_part GetASM
		|| fn = fn_asm_table[exp.ASMType]!
		|| TmpCloser = .VTmps
		|| ss = (fn)(self, exp, dest)
		if dest isnt StayOpen
			.CloseVTmps(TmpCloser)

		target debug
			if exp.asmtype < ASMType.kElseIf
				|| ty = exp.ASMDecl
				|| sst = ss.µtype
				if sst != dest.µtype and ty.typeonly
					printline exp
					debugger
					(fn)(self, exp, dest)
		return ss


	function FuncPrm (|message| prm, |scdecl| DestType,  |asmreg|)
		|| r = .ExistingVar(prm) // seems unfinished? what about desttype?
			return r
		return .µ(prm, asmreg.stayopen)


	module
		|FatASM[]|					JSMSpace = FatASM[0]!
		|[memory of fatasm]|		Ancients
		|ASMState|					Sh
		


	
function SCFunction.HasCVersion (|bool|)
	if .isstdlib
		return true
	
	require self is wrapper

	if .IsCppInBuilt == 1	// cpp_inbuilt. These normally have no address? but perhaps we made a wrapper for it in the exec? we should check if it still exists.
		debugat
		return true

	if .IsCppInBuilt == 2	// cpp_nothing: cpp_spd might sound better?
		debugat
		return false // need to be replaced with ASM intrinsics.

	if self Is ExternalLib	// cpp_libwrapper ?   // Speedie_Main in perry, counts as one!
		debugat
		return false  // i think only perry used this and only in debug mode within Xcode

	return true


function asmstate.ASMPrmCollectNative (|message| prms, |SCFunction| fn, |uint64|)
	opt norefcounts
	|| sh = 12
	for Float in 2
		|| p = prms.first
		for FnArg in fn.args
			if FnArg.ASMUseSpecialRegs|int| == Float
				|| v = .FuncPrm(p!, FnArg).reg
				sh += 5
				rz  |=  v << sh
				rz += 1<<(Float<<2)				// Send-count (4 + 4 bits)
			p++
										// 32 - (5*4 + 4 + 4) = 4 . Still 4 bits left

function asmstate.ASMPrmCollect (|message| prms, |scfunction| fn, |bool| native,  |uint64|)
	opt norefcounts
	if native
		return .ASMPrmCollectNative(prms, fn)
	
	|| sh = 7
	|| p = prms.first
	for FnArg in fn.args
		|| v = .FuncPrm(p!, FnArg).reg
		sh += 5
		rz  |=  v << sh
		rz++								// Send-count (4 bits max)
		p++
											// 32 - (5*5 + 4) = 3 . Still 3 bits left	

function asmreg.CallFunc (|int| v, |int|)
	if (.reg == v)
		v -= self is Set //NOICE
	return v


function @ASMType.DoFunction (fn_Asm)
	opt norefcounts
	|| prms = exp.last!
	|| fn = prms.asfunc #require

	// Speedie's function histogram:  0:410, 1:1656, 2:1464, 3:713, 4:167, 5:61, 6:10, 7:4
	// There are only 4 above 6!, only 14 above 5, 75 above 4
	// almost all lib functions have 4 or less. 5 is for proj funcs.

	dest.µtype = fn.RegType
	|| vd = dest.CallFunc(.VDecls) + 1
	check (vd < 32) (exp, "Too many registers in use. No space for result.")
	dest.reg = vd

	|| TmpCloser = .VTmps
	|| IsC = fn.HasCVersion
	|| P = .ASMPrmCollect(prms, fn, IsC)
	.CloseVTmps(TmpCloser)
	
	|| PExt = P >> 32
	|&fatasm| fat
	
	if isc
		fat = exp.FFNC(dest, fn.TableId,  fn.returntype.ASMUseSpecialRegs|int|, P,  PExt)
	  else
		fat = exp.FUNK(dest, fn.TableId,  P,  PExt)
	fat.op += PExt!=0
//	Dest.reg = SaveAmount.asm // we don't wanna use this... makes the VM more complex.
//  Mostly I'm doing:  || x = msg.function(),  (which uses the correct position.)
	
	if !fn.ReturnType
		dest.reg = 0

	return fat * dest



function ASMState.PackMakerInit (|bool|)
	opt norefcounts
	if .Inited
		return true
	.inited = true
	VM_Builder.JustDefineInstructions
	SpdAssembler.InitAss
	return .alloc(ASMState.JSMSpace)



function ASMState.Alloc (|memory of fatasm| j, |bool|)
	if j.SetCap(4MB)
		.start = j.ptr
		.curr = .start
		.end = j.Capacity + .start
		spdassembler.Guard
		Ancients <~ j
		return true


function @ASMState.ExpandJSM (|bool|)
	require .Ancients < 16
	|| j = FatASM[4MB]
		.Ancients <~ .jsmspace
		.JSMSpace = j
		return sh.Alloc(j)
	

function ASMState.StartFunc (|scfunction| fn)
	if fn.ASM
		.out = fn.asm!
	  else
		.out = µfunc(fn, .curr)
	.zero = nil
	.zero.info = AsmReg()
	(.zero is NeverAltered)
	.FuncStart = .curr
	scfunction.currfunc = fn
	.ReturnASM = fn.ReturnType.regtype
	.OK = true
	.VDecls = 0
	.VTmps = 32
	.AddFuncParams(fn)


function ASMState.FinishASM
	opt norefcounts
	if .zero.Const // what?
	|| l = .last
	ifn (l isa asm.ret) or (l isa asm.trap)
		|| fn = scfunction.currfunc!
		expect (!fn.returntype) ("ASMReturn".internal) // why?
		fn.sourcearg!.RET(asmreg(), 1, 0, 0)
	.SetLength


function ASMState.SetLength
	.out.length = .curr - .FuncStart


