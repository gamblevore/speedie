

// ADDK? optimise stages... OR special-case it specifically. 

struct RegState
	|?&fatasm|			Creator
	|?scdecl--| 		Type


struct ASMState
	linkage: cpp_part Pac
	|uint16| 					BlockNum
	|uint16| 					ParentBlock
	|datatypecode|				ReturnASM
	|bool|						OK    
	|bool|						Inited   
	|byte|						VDecls
	|byte|						VTmps
//	|byte|						WithinBranch // remove?

	|SCFunction--|				fn       
	|µFunc|						Out      
	|&FatASM|					FuncStart
	|&FatASM|					Start		// a "slice" feature would be nice    
	|&FatASM|					Curr    
	|&FatASM|					End    
	|RegState[32]|				Registers
	|FATASM| 					Zero

	
	function CloseVDecls (|int| i)
		|| v = .VDecls
		while v > i
			.CloseReg(v--)
		.VDecls = v

	function CloseVTmps (|int| i, |asmreg| dest=asmreg())
		if dest isnt StayOpen
			|| v = .VTmps
			while v < i
				.CloseReg(v++)
			.VTmps = v
	
	function CloseReg (|int| i)
		|| r = &.Registers[i]
		r.type = nil		// i think its ok.
		r.Creator = nil
	
			
	function AddFuncParams (|SCFunction| fn)
		opt norefcounts
		for a in fn.Args
			.DeclareMe(a.source, a)

	function Last (|&FatASM|)
		return .curr-1

//	function ExpectReg (|int| a, |&fatasm|)
//		|| b2 = .RegPlace(A)[0]
//			return b2
//		error (self, errorreceiver.NonFatal + ": Register was nil")
//		return .zero

	function RegPlace (|int| a, |&regstate|)
		opt norefcounts
		|| InBounds = a|uint| <= 31
			if a <= .vdecls or a >= .vtmps
				return .registers[a]
		
		|| msg = (": Unassigned register",  ": Out of bounds register")(InBounds)
		error (self, errorreceiver.NonFatal + msg)
		return .Registers[0]
			
		
	function GetConst (|int| k, |&uint64|)
		opt inline
		|| r = .RegPlace(k).Creator
			if r == .zero or r isnt ConstAny // now what?
				return r.Const
		debugger 
		return .zero.const

	
	function IntPowerOfTwo (|asmreg| r,  |FailableInt|)
		// -1 --> -1,  0 --> 0,  1 --> 1,  2 --> 2,  4 --> 3,  8 --> 4
		// this is used for multiplication mostly. like x*-1, or x*0, or x*1
		if r is ConstAny
			|| v = .GetConst(r)[]
			if v == -1
				return v
			if v.IsPow2
				return v.Log2+1

		if (!r.reg) // what?


	function AddConstantAndReturnOld (|message| exp,  |AsmReg| Dest,  |AsmReg| ToGrow,  |int64| Value,  |asmreg|)
		|| reg = .TempMe(exp, dest)
		if togrow.isint and value.CanStoreAsIntImmediate
			if 0
				exp.adpk(reg, togrow, togrow)
			return exp.ADPK(reg, ToGrow, Value) * reg
		.Assign(reg, ToGrow, asmreg(), exp)
		rz = .AddConstant(exp, togrow, ToGrow, value)
	
	
	function AddConstant (|message| exp,  |AsmReg| Dest,  |AsmReg| Src,  |int64| Value,  |asmreg|)
		if dest.isint
			if Value.CanStoreAsIntImmediate
				return exp.ADDK(dest, src, Value) * dest
		  elseif dest.FourBytes
			if value|uint64|.CanStoreAsfloatImmediate
				return exp.FADK(dest, src, value) * dest
			debugger // how is this possible? we are adding a 64 bit float to a 32-bit?
		debugat
		|| where = .NumToReg(exp, value)
		return .Plus(dest, src, where, exp)
		

	syntax append (|int| code, |message| dbg, |&FatASM|)
		cpp_part RequestOp
		|| p = .curr
		if p < .end
			.curr = p + 1
			P.op = code
			p.debug = dbg
			p.BlockNum = .BlockNum
			p.ParentBlock = .ParentBlock
			return p
		.OK = false
		return .start
	
	
	syntax expect (|message?| where=nil, |string| msg)
		|| f = .fn.asm
			f.length = .curr - .funcstart
			printline f.render
		debugger
		error (where, msg)
	
	
	function DeclareMe (|Message| where,  |scdecl| Type,  |asmreg|)
		|| d = .VDecls|int| + 1
		if (d < .vtmps)
			|| t = Type.CalculateASMType
			t.reg = d
			Type.DType = t|datatypecode|   		// right?
			.vdecls = d
			.Registers[d].Type = Type
			target debug: Type.ASMSanity
			return t
		error (self, where, "No free local variables.")			
	
	
	function TempMe (|Message| where, |asmreg| T=asmreg.Temp,  |asmreg|) // .needreg
		|| r = t.reg
		if !r
//			if .Registers[r].Type != where.ASMDecl // hmmmm.... well now what?
//		  else
			r = .vtmps - 1
			check (r > .vdecls) (where, "No free local variables.")
			t.reg = r
			.vtmps = r
		if t isnt textual
			.Registers[r].Type = where.ASMDecl
		return t

	
	helper FoundCode (|int| i, |uint64| Value, |asmreg| typeinfo, |asmreg|)
		opt norefcounts
		|| place = .regplace(i)
		|| fat = place.Creator
		if fat and fat.const == Value
			|| ty = place.Type
			if ty is Altered
				#!hmmm. now what? need to understand blocks and if/while things?
				debugger 
			typeinfo.reg = i
			(typeinfo is ConstAny)
			return typeinfo


	function RegMap (|int|)
		|| dcls = (1<<.VDecls+1)-1
		if .vtmps >= 32
			return dcls
		|| tmps = (1 << .vtmps)-1
		tmps = ~tmps
		return dcls ||| tmps
	
	
	function FindConstDecl (|scdecl| d, |asmreg|)
		return .findconst(d.exportposition, d.CalculateASMType)

	function FindConst (|uint64| Value, |asmreg| typeinfo, |asmreg|)
		// our vars will need checking by the nil-checker...
		// to see if loops/ifs harm this thing.
		// technically... the asm thing can handle the ifs...
		// but loops must be pre-checked!
		
		if !value
			return asmreg()
		|| R = .regmap &~ 1
		for (b.bits in R) (i)
			|| f = .FoundCode(i, value, typeinfo)
			if f != nil
				return f


///////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Branch (|message| cond,  |bool| neg=false,  |!&fatasm|)
		|| cmu = .µ(cond, asmreg.CondRequest)
		if cmu is CondAnswer
			return cmu.needfat
		|| req = asmreg.CondRequest
		if cmu isnt alreadynegated
			(Req is negate)
		debugger
		cmu = .equals(req, asmreg(), cmu, cond)
		return cmu.needfat


	function µ (|message| exp, |AsmReg| Dest = asmreg(), |asmreg|)
		opt norefcounts
		target !debug
			opt inline
		cpp_part Get
		|| expasm = exp.ASMType
		|| fn = fn_asm_table[expasm]!
		target debug
			if !expasm
				fn = fn_asm_table[exp.func|int|]!
				debugger

		|| TmpCloser = .VTmps
		|| ss = (fn)(self, exp, dest)
		.CloseVTmps(TmpCloser, dest)
		target debug
			|| ty = exp.ASMDecl
			if ty.DType != ss.µType
				debugger
				(fn)(self, exp, dest)
		return ss


	function FuncPrm (|message| prm, |scdecl| DestType,  |asmreg|)
		|| r = .ExistingVar(prm)
		|| OldTmps = .VTmps
		if r != nil
			return r
		return .µ(prm, r)


	module
		|FatASM[]|					JSMSpace = FatASM[0]!
		|[memory of fatasm]|		Ancients
		|ASMState|					Sh
		


		
function @ASMTmp.DoFunc (fn_Asm)
	opt norefcounts
	|| prms = exp.last!
	|| fn = prms.asfunc
	ifn  fn and fn.args <= 10
		error (prms, "Too many parameters")
		return AsmReg()

	// speedie's function histogram:  0:410, 1:1656, 2:1464, 3:713, 4:167, 5:61, 6:10, 7:3, 8:1
	// there are only 4 above 6!, only 14 above 5

	if dest.reg == 0
		dest = asmreg()
	  else
		dest = .TempMe(prms, dest)
		dest.µtype = fn.RegType

	|int| Reg2
	|int| Reg3
	|| sh = 0
	|| TmpCloser = .VTmps

	|| p = prms.first
	for fnarg in fn.args
		expect (p) (exp, "Compiler did not fully type this function.") 
		|| v = .FuncPrm(p, fnarg).reg
		if sh <= 25
			reg2 |= (v << sh)
		  else
			reg3 |= (v << (sh-30))
		sh += 5
		p++
	.closeVTmps(TmpCloser)
	

	|| SaveAmount = .vdecls * (dest isnt forreturn)
	|| fat = exp.fncx(SaveAmount,  fn.TableId,  reg2,  reg3) // exp.func2, exp.func3

	|| OP = (asm.func2, asm.func3)(sh <= 25)
	if fn is Wrapper
		op = (asm.fncx2, asm.fncx3)(sh <= 25)
	fat.op = op

	return fat * dest


function ASMState.PackMakerInit (|bool|)
	opt norefcounts
	if .Inited
		return true
	.inited = true
	VM_Builder.JustDefineInstructions
	SpdAssembler.InitAss
	return .alloc(ASMState.JSMSpace)


function ASMState.Alloc (|memory of fatasm| j, |bool|)
	if j.SetCap(4MB)
		.start = j.ptr
		.curr = .start
		.end = j.Capacity + .start
		spdassembler.Guard
		Ancients <~ j
		return true


function @ASMState.ExpandJSM (|bool|)
	require .Ancients < 16
	|| j = FatASM[4MB]
		.Ancients <~ .jsmspace
		.JSMSpace = j
		return sh.Alloc(j)
	

function ASMState.StartFunc (|scfunction| fn)
	if fn.ASM
		.out = fn.asm!
	  else
		.out = µfunc(fn, .curr)
	.zero = nil
	.zero.info = AsmReg()
	for i in 32
		.CloseReg(i)
	.FuncStart = .curr
	.fn = fn
	.ReturnASM = fn.ReturnType.regtype
	.OK = true
	.VDecls = 0
	.VTmps = 32
	.AddFuncParams(fn)


function ASMState.FinishASM
	opt norefcounts
	if .zero.Const // what?
	|| l = .last
	ifn (l isa asm.ret) or (l isa asm.trap) 
		debugger
	.SetLength


function ASMState.SetLength
	.out.length = .curr - .FuncStart


//function int64.CanInt32 (|bool|)
//	return  (self <<32)>>32 == self
//	
//
//function int64.CanFloat32 (|bool|)
//	return  (self|uint64|>>32)<<32 == self
//	
