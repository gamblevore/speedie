


dispatch fn_asm_table (fn_asm)
	@arg:	ASMType.Arg
	@tril:	Assembler.BigWhile
	@decl:	ASMType.decl
	@num:	ASMType.num
	@char:	ASMType.char
	@rel:	ASMType.DoMath
	@thg:	ASMType.Thg
	@bra:	ASMType.First
	@sheb:	ASMType.Sheb
	@sstr:	Assembler.Str
	@list:	Assembler.VectorLoad
	@func:	ASMType.ASMFunction
	@dot:	ASMType.Dot
	@acc:	ASMType.Access
	@brel:	ASMType.Brel		// ++, --, -, &
	@arel:	ASMType.arel     // ++, --, 
	@type:					ASMType.TypeCast
	@tmp:					ASMType.unexpected

	(ASMType.kif):			Assembler.If
	(ASMType.kwhile):		Assembler.While
	(ASMType.kTern):		Assembler.Ternary
	(ASMType.kContinue):	Assembler.Continue
	(ASMType.kExit):		Assembler.Exit

	(ASMType.kDebugger):	ASMType.Debugger
	(ASMType.krejoin):		ASMType.First
	(asmtype.kswap):		ASMType.Swap
	(ASMType.kreturn):		ASMType.return

	(ASMType.kSetRel):		ASMType.SetRel
	(ASMType.kStatExpr): 	ASMType.StatExpr
	(asmtype.kRefCount):	Assembler.RefCount
	(asmtype.kSwizzle):		Assembler.VecSwizzle
	(ASMType.kIgnore):		ASMType.Ignore
	(ASMType.kFail):		ASMType.Ignore

	63:						ASMType.unexpected



extend_module ASMType {
constants
	IncrAfter = 2
	IncrBefore = 0
	
|asm_Read[10]|	ReadASM
|asm_Write[5]|	WriteASM
//|message--|		LastDebugMark

function InitAccess
	|| R = &ASMType.ReadASM[0]
	|| W = &ASMType.WriteASM[0]
	R++[] = ASM.RD1U
	R++[] = ASM.RD1S
	R++[] = ASM.RD2U
	R++[] = ASM.RD2S
	R++[] = ASM.RD4U
	R++[] = ASM.RD4S
	R++[] = ASM.RD8U
	R++[] = ASM.RD8U
	R++[] = ASM.RD16
	R++[] = ASM.RD16
	#!Write	
	W++[] = ASM.WR1U
	W++[] = ASM.WR2U
	W++[] = ASM.WR4U
	W++[] = ASM.WR8U
	W++[] = ASM.WR16


function Debugger (fn_asm)
	if Options.TargetDebug
		return exp.TRAP(asmreg(), 0, 2) * ASMReg() // 2 == sigint
	return asmreg()


function Swap (fn_asm)
	opt norefcounts
	|| prms = exp.last
	|| A = .existingvar(prms.first!)
	|| B = .existingvar(prms.second!)
	expect (A.reg and B.reg) (exp)
	return exp.swap(A, B, asmreg(), asmreg())*A


function StatExpr (fn_asm)
	opt norefcounts
	for ch.fast in exp.first
		if ch.islast
			return .µGetASM(ch, dest)
		.µ(ch, asmreg.Discard)

	
function First (fn_asm)
	opt norefcounts
	return .µGetASM(exp.first!, dest)


function Sheb (fn_asm)
	opt NoRefCounts
	// LastDebugMark = exp
	return exp.noop * asmreg()
	
	
function ReturnOpt (|&Assembler| self, |int| Ret, |int| bb, |bool|)
	|| l = .last
	
	// seems the wrong order... it is:   bor, bor, bor, func.   Not:   func, bor, bor, bor
	while l isa asm.BFLG
		Ret = PreOptBFLG(self, l, Ret) #require
		l--
		
	if l isa asm.fnc or asm.fnc3
		return PreOptFnc(self, l, bb)


function PreOptBFLG (|&Assembler| self, |FATASM| l, |int| Ret, |int|)
	(self)
	// out, in,   up, down, sign
	require Ret == l.Reg(0)	// return x
	|| up = l.reg(3)
	|| down = l.reg(4)
	
	require up == down // needs to be the same.
	require !up // for now, just go with 0 shift.
	// what about the shifting? doesnt it depend on how many bits the input has?
	// this is for a return, right? so... we can compare the bits to the number
	// of bits used by the function's return type.
	

	rz = l.r1
	using L // SyntaxUsingComplete needs upgrade to deref?
		|| nn = l.µRefCount
		l.msg.ret(rz.asm)
		l.Operatormul(asmreg.exit)
		l.µRefCount = nn
	rz &= 31


function PreOptFnc (|&Assembler| self, |FATASM| l, |int| bb, |bool|)
	require !l.r3 // no pExt
	using L
		|| nn = l.µRefCount
		l.msg.TAIL(l.r1, l.r2) // SyntaxUsingComplete needs upgrade to deref?
		L.OperatorMul(ASMReg.exit)
		l.µRefCount = nn
		return bb == .basicblock // no blocks occured

	
function InlinedReturn (|&Assembler| self, |message| exp, |asmreg| dest, |AsmReg|)
	opt norefcounts
	// What about getting the address of registers?
	dest = dest as asmreg.ExitFunction * .TailInlineable
	dest = dest as asmreg.ExitAtAll
	|| bb = .BasicBlock
	|| f = exp.first
		if dest.reg
			dest = .µinto(f, dest)
		  else
			dest = .µ(f, asmreg.discard)
	
	.DeallocStack
	if .TailInlineable and ReturnOpt(self, dest, bb)
		return dest
	
	|| fat = exp.RET(Dest)
	fat.µRefCount = 1
	(fat is CondAnswer)
	return fat*Dest


function NilStrooct (|&Assembler| self, |message| exp, |ASMReg| dest, |ASMReg|)
	opt norefcounts
	|| inner = exp.first
	expect ((inner == @arg) and !inner.hasany) (exp) // nil
	|| zzeerrooo = asmreg() as asmreg.FromZeroMemory
	zzeerrooo.reg = dest.reg
	return .temponly(exp, zzeerrooo)


function Return (fn_asm)
	opt norefcounts
	|| L = .state.return		// can remove constants, so try first
		return InlinedReturn(self, exp, L)

	|| bb = .BasicBlock
	|| f = exp.first
		dest = .ExistingVar(f, VarUseMode.return)
		if !dest
			dest = .µGetASM(f, ASMReg.ExitFunction)
	  else
		dest = asmreg()
	
	.DeallocStack
	if ReturnOpt(self, dest, bb)
		return asmreg.exit
	
	|| D0 = .SafeDecr
		if d0.reg != dest.reg // problem
	|| D1 = .decr
	|| D2 = .decr
	
	|ind| K = -1
	// we shouldn't be able to inline consts from other blocks!
	if !D0
		K = .Const(dest, 8, true)
	|| HasK = K>=0
	|| fat = exp.RET(dest*!HasK, D1, D2, (D0!=nil)|int|, K * HasK)
	fat.µRefCount++
	return fat * asmreg.Exit
	


function TypeCast (fn_asm)
	opt norefcounts
	|| f = exp.first!
	dest.µtype = exp.asmdecl.å.DataType
	|| fReg = .µGetASM(F, dest)
	if fReg.µtype == dest.µtype
		return fReg // already done!
	return TypeCastSub(self, exp, dest, freg)


function TypeCastSub (|&Assembler| self, |message| exp, |ASMReg| dest, |ASMReg| from, |ASMReg|)
	opt norefcounts
	|| NewDecl = exp.ASMDecl
	if newdecl.isbarestruct
		return NilStrooct(self, exp, dest)
		
	|| NewType = NewDecl.regtype
	if !from.Reg												// x = 0|float|
		from.µtype = NewType
		return from

	|| OldType = from.µtype	
	if NewType is bool
		if (OldType is bool) and (dest isnt negate)				// x = true|bool| // why?
			return from
		return .NotEq(dest, asmreg(), from, exp)

	if  (NewType.BitCount == OldType.BitCount)  and  NewType.IsFloat == oldtype.isfloat
		from.µtype = newtype
		return from
	
	dest = .TempOnly(exp, dest)
	dest.µType = NewType
	if from is ConstOutput
		return ConstConvert(self, exp, dest, from, oldtype, newtype)
		
	if oldtype.isfloat or newtype.isfloat
		return exp.CONV(dest, from, oldtype.ASMConv(newtype)) * dest
	
	|| sh2 = 64 - OldType.BitCount
	return exp.BFLG(dest, from, sh2, sh2, from.signed|int|) * dest



function ConstConvert  (|&Assembler| self, |message| exp, |ASMReg| dest, |ASMReg| from, |Datatypecode| Old, |Datatypecode| New, |ASMReg|)
	// this converts in place...	// we don't want that.
	
	|| srf = from.NeedFAT
	|| NC = New.BitCount
	|int64| K
	if old.isint != new.isint
		K = srf.FloatIntConvConst(old, new)
	  elseif new.isfloat
		K = srf.FloatConvConst(NC)
	  else
		|| sh = 64 - NC
		|| oof = srf.Const << sh
		K = (oof|int64| >> sh, oof|uint64| >> sh)(dest.Signed) // shift up and down

	.NopConst(from)
	return .NumToReg(exp, K, dest, new)


function SetRel (fn_asm)						// function relset (
	opt	norefcounts								//     x[func()] = y++
	|| A = exp.first!.asmunbra
	|| B = exp.last!
	|| X = .ExistingVar(A, VarUseMode.set)
		|| D = a.ASMDecl
		dest = .µInto(B, X)
		if x is CanHoist
			.MarkDeclAsConst(d, nil, dest)
		return dest

	// probably x.y = z, or x[y] = z 
	dest = .µGetASM(B, asmreg()) 
	(dest isnt RealConst)
	(dest is SetAlways)
	return .µ(A, dest)


function ThgReference (|&Assembler| self, |message| exp, |AsmReg| Dest, |scdecl| d, |asmreg|)
	|| Reff = d.WholeType
	|| dr = dest.reg
	if dest is AddrRequest // (|$int|) v {v++}
		return reff.haveaddr	
	
	if dr == d.WholeType.reg
		if !dr // how?
/		return dest

	if !dr
		if dest is set // what?
		dest.µType = Reff.µType
		dest = .TempOnly(exp, dest)
	
	if dest isnt set
		if dest is ContainsAddr // how?
		// dest = reff --> dest = *reff
		return .Read(dest, exp, Reff, nil, nil) * dest

	// reff = dest --> *reff = dest
/	return .write(Reff, exp, dest, nil, nil) * dest




function AllocBearStruct (|int| dir, |message| exp, |int| v, |scdecl| ty, |asmreg|)
	|| size = ty.SizeOfQuery
	size = (size+15)>>4
	|| dest = v.asm
	return exp.ALLO(dest, size*dir) * dest


function Decl (fn_asm)
	opt norefcounts
	
	|| rel = exp.last!
	|| ty = exp.fastdecl
	.DeclReset(ty)
	dest = .DeclareMe(rel, ty)

	if !exp.obj or dest is CanHoist					// Huh?
	if ty.IsBareStruct
		return AllocBearStruct(1, exp, dest, ty)
	
	|| item = rel.Last!

	if ty isnt local								// A carray or somthing?? idk
	if (ty is AlteredInBranch) or (ty isnt local)
//		(dest isnt canhoist)
		return .µInto(item, dest)

//	(dest is canhoist)								// We want to actually see the value, though?
	|| K = .µInto(item, dest)
	if k is ConstOutput
		.MarkDeclAsConst(ty, k, nil)
	return k


function ArgSub (|&Assembler| self, |message| exp, |?&sc_hoister| H, |AsmReg|)
	opt NoRefCounts
	for ch.fast in exp
		//if h
			//h.HoistNormal(ch)
		if ch.func == @decl
			ASMType.Decl(self, ch, AsmReg.RealDiscard)
		  else
			|| What = .µ(ch, AsmReg.RealDiscard)
			if what & asmreg.exit							// .exit has two bits but "is" requires both
				return what


function Arg (fn_asm) // argument 
	|| OV = .OpenVars
	|| what = ArgSub(self, exp, nil)
	return .CloseVars(OV, exp, what)


function Access (fn_asm)									// a[b], struct.mem[b]
	opt	NoRefCounts
	if dest isnt set
		dest = .TempTyped(exp, dest)
	
	|| f = exp.first!
	|| d = f.asmdecl

	|| base = .µGetASM(f)									// x = a.b[0]
	|| sc = exp.Second.first!
	|| vara = .µGetASM(sc)

	if d.TypeInfo.VecCount > 1
		return .VecAccess(exp, dest, base, vara)

	target debug
		if !d.PointerCount and !d.IsCarray
	
	if dest isnt AddrRequest
		dest.µType = exp.ASMDecl.å.DataType
		return .ReadOrWrite(Dest, exp, base, vara, d)
		
	dest = dest.HaveAddr
	base = base.HaveAddr
	dest.µType = DataTypeCode._voidptr
	return .Plus(dest, base, vara, exp)
	


function Dot (fn_asm)										// a.b
	opt	NoRefCounts
	|asmreg| SubDest // fool around with optimising this
	if dest isnt set // **once** everything is working
		dest = .TempTyped(exp, dest)
		subdest = subdest.ReUseRegInPlace(dest)
	
	|| prop = exp.ASMDecl
	if prop is const // wait? don't these all get pre-transformed? SHOULD they be?
		|| fn = prop.islookuponly
		if fn isa scfunction
			return DoGlobal(self, exp, dest, prop)
		return ConstFromThgName(self, exp, dest, prop)
	if prop is global
		return DoGlobal(self, exp, dest, prop)
	|| F = exp.first!		 
	|| Obj = .µGetASM(F, subdest)
	|| T = prop.typeinfo
	dest.µtype = T
	
	|int64| Pos = prop.å.ExportPosition
	if (pos < 0 or pos > 1K) // what?
	
	if (dest is AddrRequest) or prop.IsCarray
		pos *= t.ByteCount
		if prop.iscarray
			dest.µtype = DataTypeCode._voidptr
		dest = dest.haveaddr
		return .AddToReg(exp, dest, obj as ASMReg.NoScale, pos)
	
	return .ReadOrWrite(Dest, exp, obj, ASMReg(), prop, pos)


function Char (fn_asm)
	return num(self, exp, dest, mode) // its just a num, right?


function Num (fn_asm)
	opt norefcounts
	|| d = exp.ASMDecl
	|| T = d.typeonly
	dest.µtype = T
	(dest is RealConst)
	return .NumToReg(exp, d.å.ExportPosition, dest, T)


function Thg (fn_asm)
	|| thg = asmtype.ThgSub(self, exp, dest)
	|| reg = thg.reg
	if (reg-1)|uint| < 31								// what?
		return thg
	if  !reg  and thg is ConstOutput
		return thg										// Its still ok.   nil/false
	error (exp, "Register out of bounds")


function ConstFromThgName (|&Assembler| self, |message| exp, |AsmReg| Dest, |scdecl| d, |asmreg|)
	(dest is RealConst)
	if dest isnt ConstRequest
		dest.µtype = d.å.DataType
		return .NumToReg(exp, d.å.ExportPosition, dest, dest.µtype)
	return dest


function GrabAddr (|&Assembler| self, |message| exp, |AsmReg| Dest, |scdecl| d, |asmreg| T, |asmreg|)
	opt norefcounts
	dest = .TempTyped(exp, dest, d)

	|| fat = exp.GRAB(dest, t)
	if d.IsInt and !d.IsBool
		|| L = t.BitLoss
			|| bastard = .CurrFuncGrab.SetSign(t.Signed)|int64|
			fat.Prms[5] = bastard
			fat.const = L
	return fat * dest.HaveAddr


function ThgSub (|&Assembler| self, |message| exp, |AsmReg| Dest, |asmreg|)
	opt norefcounts
	// IF (EXP ~= "Bugged") and "CallFunc".trap
	|| d = exp.ASMDecl
	if d is local
		if dest is ConstRequest
			return nil
		
		if d is reference
			return ThgReference(self, exp, dest, d)
			
		|| T = .LocalThg(d)
		if dest isnt AddrNeed
			return T
			
		if d.IsBareStruct					// it already has the address
			return T.haveaddr
		return GrabAddr(self, exp, dest, d, T)
	
	if d is global
		if (dest is ConstRequest)
			return nil
		return DoGlobal(self, exp, dest, d)
		
	return ConstFromThgName(self, exp, dest, d)



function DoGlobal (|&Assembler| self, |message| exp, |AsmReg| Dest, |scdecl| D, |ASMReg|)
	opt	NoRefCounts
	target debug
		|| d2 = exp.asmdecl
		if !d.minimatch(d2) // Remove d2. it the same as D.
	if dest isnt set
		dest = .TempTyped(exp, dest)
	
	|| addr = .GlobAddr(d, exp, dest)
		if dest is AddrRequest
			addr.µtype = d.å.DataType
			return addr.HaveAddr
		
		dest.µtype = d.å.DataType
		dest = dest asnt ASMReg.ContainsAddr
		return .ReadOrWrite(dest, Exp, addr, ASMReg(), d, 0)
	


function AddressOf (fn_asm)
	rz = .µGetASM(exp, dest as asmreg.addrneed)
	if (rz is ContainsAddr)
		return rz &~ asmreg.ContainsAddr
	error (exp, "ASM fail")
	.µGetASM(exp, dest as asmreg.addrneed)


function BoolNot (fn_asm)							// !a
	dest = dest.negate
	|| src = .µGetASM(exp, dest)
	if src is AlreadyNegated
		return src
	return .Exists(dest, src, exp)
	

///   ///

function IncrSlowOnAddr (|&Assembler| self, |message| f, |ASMReg| Dest, |int| Mode, |ASMReg| Addr, |int64| Amount, |scdecl| glob,  |ASMReg|)	
	opt	NoRefCounts										// *a, x = *(a.b)
	|| TmpCloser = .OpenVars
	.Read(Dest, F, dest, addr, glob)					// READ

	|| NewValue = (.Temptyped(f), dest)(mode & IncrAfter)
	.IncrPre(f, NewValue, dest, amount)					// ADD

	|| fat = .write(dest, f, newvalue, addr, glob)		// WRITE BACK

	// the new value should exist! now lets close
	.CloseVars(TmpCloser)
	return fat * Dest


function IncrOnAddr (|&Assembler| self, |message| exp, |AsmReg| Dest, |int| Mode, |AsmReg| Addr, |int64| Amount, |scdecl| Glob, |asmreg|)
	ifn  dest.isint  and  amount.fits(6)
		return IncrSlowOnAddr(self, exp, dest, mode, Addr, Amount, glob)
	|| bc = dest.µtype.ByteCount.log2
	|| offset = 0
	addr = .InlineOffsetOpt(addr, bc, offset, 6~bits, glob)
	|| fat = exp.CNTC(Addr, dest, offset >> bc, amount, bc)

	fat.RegInput(0) = addr // the output is also an input!
	
	if mode & IncrAfter
		if 0: exp.CNTD
		fat._op = asm.cntd
	return fat * dest


function IncrAmount (|asmreg| upon, |int| IsPlus, |scdecl| D,  |int64|)
	opt norefcounts
	rz = (1,-1)(IsPlus & 1)
	if upon.isfloat
		if upon.FourBytes
			rz = rz|float|.asint
		  else
			rz = rz|Float64|.asint
	  elseif D.TypeSuffers
		rz *= D.PointerIncrement



function NotTemp (|&Assembler| self, |asmreg| Src, |message| p)
	|| r = .state.return.reg
	if r and r == src.reg
		return
	check (src isnt temp) (p, "Can't increment temporary value.")



function Incrementatulatorifier		(fn_asm)				// --a++
	visible
	opt	NoRefCounts
	|| Src = .µGetASM(exp, dest as ASMReg.AddrRequest)
	|| D = exp.ASMDecl
	|| Amount = IncrAmount(src, mode, D)

	if dest is discard
		mode = IncrBefore
	  elseif !dest.reg
		if mode & IncrAfter
			dest = .TempTyped(exp, dest)
		  else
			dest = src
	
	|| p = exp.parent! // better positions
	if src is ContainsAddr
		dest.µType = src.µType
		return IncrOnAddr(self, p, dest, mode, src, amount, D)
	
	NotTemp(self, src, p)
	if mode & IncrAfter
		return .IncrPost(p, dest, src, amount)				// x++,	 y = x++
	return .IncrPre(p, dest, src, Amount)					// ++x,	 y = ++x




function ARel (fn_asm)
	opt	NoRefCounts
	|| F = exp.name[]
	if F == '?' or '!'
		return .µGetASM(exp.first!, dest)
	|| M = (F == '+')|int|
	if dest isnt discard
		M += IncrAfter
	return Incrementatulatorifier(self, exp.first!, dest, M)



function BRel (fn_asm)						//  --a,  ++a,  &a,  --glob,  --a.b, -a
	opt	NoRefCounts
	|| S = exp.name
	|| n = S[]
	if n == '~'
		return .DoMathSub(exp, dest, scoperator.bnot.asm!)
	if n == '-' and S == 1								// -a
		return .DoMathSub(exp, dest, scoperator.Negative.asm!)

	|| F = exp.first!
	if n == '!'
		return BoolNot(self, F, dest)
	if n == '&'
		return AddressOf(self, f, dest)
	
	|| IsPlusPlus = n == '+'						// ++a, --a
	return Incrementatulatorifier(self, F, dest, IsPlusPlus|int|)



function DoMath (fn_asm)
	opt norefcounts
	|| op = exp.second!
	|| scop = op.obj|scoperator|
		if scop is AndOr
			return .ASMBoolBadnessMadness(exp, dest, scop.Kind)
		|| fn = scop.asm
			return .DoMathSub(exp, dest, fn)
	error (op, "No ASM for this operator?")
	debugger // what?



function Ignore			(fn_asm)
	return ASMReg()


function Unexpected		(fn_asm)
	if !exp.asmtype
		|| f = exp.func|int|
			exp.asmtype = f
			return .µGetASM(exp, dest)
	error (exp, "bad ASMType")
}



extend Assembler {
function message.ASMUnbra (|message|)
	opt	norefcounts
	real self
	|| fn = .func 
	while (fn == @bra) or ((fn == @type) and .TypeCastDoesnothing)
		self = .first!
		fn = .func
	return self


function ExistingThg (|message| m, |VarUseMode| Mode, |scdecl| d, |asmreg|)
	require d is local
	if mode is Return
		.fn.TrackReturns(d)
	return .LocalThg(d)


function ExistingVar (|message| m, |VarUseMode| Mode = 0, |asmreg|)
	opt	norefcounts

	m = m.ASMUnbra
	|| fn = m.Func
	
	require fn == @thg or @num
	
	|| d = m.ASMDecl
	if fn == @thg
		return .ExistingThg(m, mode, D)

	|| H = .MegaNumFinder(d.å.ExportPosition, d.å.DataType)
		return H

	// reg0. shouldn't this be part of the meganumfinder?
	if (d is const) and !d.å.ExportPosition // reg0
		return .NumToReg(m, 0, asmreg(), d.å.DataType)


function Str (fn_asm)
	opt	norefcounts
	dest = .TempOnly(exp, dest)
	|| real = exp.name|MessageID|
	dest.µtype = DataTypeCode._voidptr
	return exp.gstr(dest, 0, real.ID) * dest // seems good!


helper Vectorise (|asmreg| Src, |message| exp,  |asmreg|)
	|| T = .TempOnly(exp, src.BasicVec)
	return exp.VSWZ(T, src, 0) * T


helper DoMathSub (|message| exp,  |ASMReg| Dest,  |fn_opasm!| fn, |ASMReg|)
	opt norefcounts
	|| ml = ASMReg()
	|| mr = ASMReg()
	|| First = exp.first!
	if First.islast
		ml = .µGetASM(first, dest)
	  else
		|| Closer = .OpenVars
		|| DiscardMode = dest & AsmReg.Discard
		|| Mode = discardmode
		if dest is Declaration
			mode = mode.ReUseRegInPlace(dest)
		
		ml = .µGetASM(First, mode)
	
		mode = DiscardMode.with(dest, ml)
		mr = .µ(exp.last!, mode)
		.CloseVars(Closer)
		if ml.IsVec != mr.IsVec
			if ml.IsVec
				mr = .Vectorise(mr, exp)
			  else
				ml = .Vectorise(ml, exp)
	
	dest = .TempTyped(exp, dest)
	(dest is constoutput) = (ml&mr is constoutput)
	
	|| op = exp.second
	op ?= exp
	rz = (fn)(self, dest, ml, mr, op)

	target debug: if rz.IsVec != ml.IsVec			// argh?
	
	rz = rz.ConstInputFromMath(ml, mr)
	rz.µtype = dest.µtype


function ASMReg.ConstInputFromMath (|asmreg| L, |asmreg| R, |asmreg|)
	if self is constoutput
		(self is constinput) = l.ConstEnough & r.ConstEnough
	return self


function ASMReg.ConstEnough (|bool|)
	return self|uint64| & asmreg.NotUnConst|uint64|


function LocalThg (|scdecl| d, |asmreg|)
	opt norefcounts
	|| T = d.WholeType as ASMReg.FromExistingVar
	|| DP = d is param
	(t is param) = DP
	
	if  d isnt AlteredInBranch
		(t is CanHoist)
		if d is Const
			(t is constoutput)
		|| fi = d.å.FatConstIndex
			|| f = fi|uint|.fat
			if f is ConstOutput
				(T is ConstOutput)
				t.FatIndex = fi
	
	|| rr = T.reg
		|| Ret = .State.Return
		if rr == ret.reg
			(T is temp = ret is temp)
	
	return T


function SetDeclToConst (|scdecl| decl, |asmreg| Initial, |&fatasm| f, |bool|)
	require  (Initial is ConstOutput) and (decl isnt AlteredInBranch)

	(decl is const)
	if f
		// || k = 1, k = 2, k = k + 3
		decl.å.ExportPosition = f._const
		if !Initial.FatIndex
		decl.å.FatConstIndex = Initial.fatindex
		return true

	if !initial.reg
		decl.å.ExportPosition = 0
		decl.å.FatConstIndex = 0
		return true
		
	debugger // ooof? 


function MarkDeclAsConst (|scdecl| Decl, |asmreg| Initial, |asmreg| NewValue)
	description "Marks Decl as a const, if it definitely is a const. Otherwise marks as NOT CONST. Also nops unused consts. Also updates new const value."
	opt NoRefCounts
	|| f = Initial.fat
	if initial
		require !.SetDeclToConst(Decl, initial, f)

// || k = 1, k = X	 // clear k=1

	|| NewFat = NewValue.fat
	if decl is Const // Clear old const avalue.
		(decl isnt const)
		if f
			.AskNop(f)
		decl.å.ExportPosition = 0
		|| fat = decl.fat
		if fat and newfat != fat
			decl.å.FatConstIndex = 0
			.AskNop(fat)
	
	if NewValue
		.SetDeclToConst(decl, newvalue, Newfat)


function DeallocStack
	opt norefcounts
	require !.IsTextual
	|int| top = .VDecls
	|| exp = .Last.msg
	while top > .state.ParentVDecls
		|| d = .vars[top]!
		if d.IsBareStruct
			exp = exp.DeepLast
			ASMType.AllocBearStruct(-1, exp, top, d)
		top--
	
}



function SCFunction.TrackReturns (|scdecl| D)
	if d isnt VarThatGotReturned
		.ReturnedVars++
		(d is VarThatGotReturned)	


function message.HasAsmStuff (|bool|)
	opt norefcounts
	nil checker
	for ch in self
		|| chh = ch.ASMUnbra
		|| fn = chh.func
		if fn != @sheb and @num and @char
			return true


function FatASM.FloatConvConst (|int| DestBitSize, |int64|)
	|| f = &._Const
	if DestBitSize == 64						// f32 to f64
		return (f|&float|[]|Float64|).asint
												// f64 to f32
	return f|&f64|[]|float|.asint


function FatASM.FloatIntConvConst (|datatypecode| src, |datatypecode| dest, |int64|)
	|| dbc = dest.ByteCount
	|| f = (&._Const)|&nil|
	if src.IsInt
		|| v = .Const
		if src.IsSigned
			if dbc == 4
				return v|float|.asint			// i to f32
			return v|Float64|.asint				// i to f64
		if dbc == 4
			return v|uint64||float|.asint		// u to f32
		return v|uint64||Float64|.asint			// u to f64

	// src.isfloat
	if src.ByteCount == 4
		|| f32 = f|&float|[]
		if dest.IsSigned
			return f32|int64|					// f32 to i
		return f32|uint64|						// f32 to u
	
	|| f64 = f|&f64|
	if dest.IsSigned
		return f64|int64|						// f32 to i
	return f64|uint64|							// f32 to u


function DataTypecode.ASMConv (|Datatypecode| To, |int|)
	return to.ASMPart<<2 ||| .asmpart


function DataTypecode.ASMPart (|int|)
	if .isfloat
		return 0 + (.bitcount > 32)
	return 2 + .issigned


function Message.TypeCastDoesNothing (|bool|)
	opt norefcounts
	|| Output = .ASMDecl.typeonly
	|| Input = .first!.ASMDecl.typeonly
	require  Output.VecCount == Input.VecCount			// Vectors
	require  Output.IsFloat  == Input.isfloat			// Floatness
	if (Output is bool) == (Input is bool)				// Boolness
		return Input.ByteCount == Output.ByteCount

	
//function string.Trip (|bool|)
//	return asmtype.LastDebugMark ~= self 

