
function message.TAIL (|int| JUMP = nil, |int| Prm1 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.TAIL, self)
	rz.numinput(0) = JUMP
	rz.numinput(1) = Prm1
}


function message.FNC (|asmreg| r1 = nil, |int| JUMP = nil, |int| Prm1 = nil, |int| Prm2 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.FNC, self)
	rz.dest(0, r1, a)
	rz.numinput(1) = JUMP
	rz.numinput(2) = Prm1
	rz.numinput(3) = Prm2
}


function message.FNC3 (|asmreg| r1 = nil, |int| JUMP = nil, |int| Prm1 = nil, |int| Prm2 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.FNC3, self)
	rz.dest(0, r1, a)
	rz.numinput(1) = JUMP
	rz.numinput(2) = Prm1
	rz.numinput(3) = Prm2
}


function message.FNCX (|asmreg| r1 = nil, |int| Table = nil, |int| Prm1 = nil, |int| Prm2 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.FNCX, self)
	rz.dest(0, r1, a)
	rz.numinput(1) = Table
	rz.numinput(2) = Prm1
	rz.numinput(3) = Prm2
}


function message.FNCX3 (|asmreg| r1 = nil, |int| Table = nil, |int| Prm1 = nil, |int| Prm2 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.FNCX3, self)
	rz.dest(0, r1, a)
	rz.numinput(1) = Table
	rz.numinput(2) = Prm1
	rz.numinput(3) = Prm2
}


function message.KNST2 (|asmreg| r1 = nil, |int| Cond = nil, |int| Inv = nil, |int| Value = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.KNST2, self)
	rz.dest(0, r1, a)
	rz.numinput(1) = Cond
	rz.numinput(2) = Inv
	rz.numinput(3) = Value
}


function message.KNST3 (|asmreg| r1 = nil, |int| Cond = nil, |int| Inv = nil, |int| Value = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.KNST3, self)
	rz.dest(0, r1, a)
	rz.numinput(1) = Cond
	rz.numinput(2) = Inv
	rz.numinput(3) = Value
}


function message.EROR (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| IsOK = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.EROR, self)
	rz.reginput(0) = r1
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = IsOK
}


function message.NOOP (|&fatasm|, ) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.NOOP, self)
}


function message.TRAP (|asmreg| r1 = nil, |int| Mode = nil, |int| Signal = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.TRAP, self)
	rz.reginput(0) = r1
	rz.numinput(1) = Mode
	rz.numinput(2) = Signal
}


function message.GRAB (|asmreg| r1 = nil, |asmreg| r2 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.GRAB, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
}


function message.RET (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| SafeDecr = nil, |int| Value = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RET, self)
	rz.reginput(0) = r1
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = SafeDecr
	rz.numinput(4) = Value
}


function message.AFNC (|asmreg| r1 = nil, |int| Library = nil, |int| Index = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.AFNC, self)
	rz.dest(0, r1, a)
	rz.numinput(1) = Library
	rz.numinput(2) = Index
}


function message.ALLO (|asmreg| r1 = nil, |int| Amount = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.ALLO, self)
	rz.dest(0, r1, a)
	rz.numinput(1) = Amount
}


function message.SWAP (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.SWAP, self)
	rz.dest(0, r1, a)
	rz.dest(1, r2, a)
	rz.dest(2, r3, a)
	rz.dest(3, r4, a)
}


function message.RARE (|asmreg| r1 = nil, |asmreg| r2 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RARE, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
}


function message.CONV (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| Mode = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.CONV, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = Mode
}


function message.KNSR (|asmreg| r1 = nil, |int| Rot = nil, |int| Inv = nil, |int| Value = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.KNSR, self)
	rz.dest(0, r1, a)
	rz.numinput(1) = Rot
	rz.numinput(2) = Inv
	rz.numinput(3) = Value
}


function message.KNST (|asmreg| r1 = nil, |int| Cond = nil, |int| Inv = nil, |int| Value = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.KNST, self)
	rz.dest(0, r1, a)
	rz.numinput(1) = Cond
	rz.numinput(2) = Inv
	rz.numinput(3) = Value
}


function message.ADDB (|asmreg| r1 = nil, |int| K = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.ADDB, self)
	rz.dest(0, r1, a)
	rz.numinput(1) = K
}


function message.ADDK (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| K = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.ADDK, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = K
}


function message.ADAK (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| K = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.ADAK, self)
	rz.dest(0, r1, a)
	rz.dest(1, r2, a)
	rz.numinput(2) = K
}


function message.MULK (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| K = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.MULK, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = K
}


function message.ADD (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.ADD, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.SUB (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.SUB, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.MUL (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.MUL, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
}


function message.DIV (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| Kind = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.DIV, self)
	rz.dest(0, r1, a)
	rz.dest(1, r2, a)
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = Kind
}


function message.DIV2 (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| Sh = nil, |int| Clear = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.DIV2, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = Sh
	rz.numinput(3) = Clear
}


function message.CLAMI (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| Small = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.CLAMI, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = Small
}


function message.CLAMU (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| Small = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.CLAMU, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = Small
}


function message.ADDM (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.ADDM, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.SUBM (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.SUBM, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.DIVS (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| Kind = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.DIVS, self)
	rz.dest(0, r1, a)
	rz.dest(1, r2, a)
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = Kind
}


function message.MULS (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.MULS, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
}


function message.BFLG (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| up = nil, |int| down = nil, |int| sign = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	if "AndOrRest2".trap
	rz = a.RequestOp(asm.BFLG, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = up
	rz.numinput(3) = down
	rz.numinput(4) = sign
}


function message.BRSS (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.BRSS, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.BRSH (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.BRSH, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.BLSH (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.BLSH, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.BSTT (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.BSTT, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
}


function message.BAND (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.BAND, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.BXOR (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.BXOR, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.BORR (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.BORR, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.BNOT (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.BNOT, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.BANK (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| K = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.BANK, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = K
}


function message.BXRK (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| K = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.BXRK, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = K
}


function message.BORK (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| K = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.BORK, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = K
}


function message.EQUL (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Cmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.EQUL, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Cmp
}


function message.TERN (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| Small = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.TERN, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = Small
}


function message.CMPI (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Cmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.CMPI, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Cmp
}


function message.CMPF (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Cmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.CMPF, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Cmp
}


function message.JUMP (|int| JUMP = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.JUMP, self)
	rz.jumpinput(0) = JUMP
	if (((JUMP << 8) >> 8) != JUMP) {
		error (self, `Jumped too far`)
	}
}


function message.JMPI (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| Cmp = nil, |int| Jmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.JMPI, self)
	rz.reginput(0) = r1
	rz.reginput(1) = r2
	rz.numinput(2) = Cmp
	rz.jumpinput(3) = Jmp
	if (((Jmp << 22) >> 22) != Jmp) {
		error (self, `Jumped too far`)
	}
}


function message.JMPF (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| Cmp = nil, |int| Jmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.JMPF, self)
	rz.reginput(0) = r1
	rz.reginput(1) = r2
	rz.numinput(2) = Cmp
	rz.jumpinput(3) = Jmp
	if (((Jmp << 21) >> 21) != Jmp) {
		error (self, `Jumped too far`)
	}
}


function message.JMPE (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| LSmall = nil, |int| RSmall = nil, |int| Jmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.JMPE, self)
	rz.reginput(0) = r1
	rz.reginput(1) = r2
	rz.numinput(2) = LSmall
	rz.numinput(3) = RSmall
	rz.jumpinput(4) = Jmp
	if (((Jmp << 20) >> 20) != Jmp) {
		error (self, `Jumped too far`)
	}
}


function message.JMPN (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| LSmall = nil, |int| RSmall = nil, |int| Jmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.JMPN, self)
	rz.reginput(0) = r1
	rz.reginput(1) = r2
	rz.numinput(2) = LSmall
	rz.numinput(3) = RSmall
	rz.jumpinput(4) = Jmp
	if (((Jmp << 20) >> 20) != Jmp) {
		error (self, `Jumped too far`)
	}
}


function message.JMKM (|asmreg| r1 = nil, |int| K = nil, |int| Jmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.JMKM, self)
	rz.reginput(0) = r1
	rz.numinput(1) = K
	rz.jumpinput(2) = Jmp
	if (((Jmp << 22) >> 22) != Jmp) {
		error (self, `Jumped too far`)
	}
}


function message.JMKL (|asmreg| r1 = nil, |int| K = nil, |int| Jmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.JMKL, self)
	rz.reginput(0) = r1
	rz.numinput(1) = K
	rz.jumpinput(2) = Jmp
	if (((Jmp << 22) >> 22) != Jmp) {
		error (self, `Jumped too far`)
	}
}


function message.JMKE (|asmreg| r1 = nil, |int| K = nil, |int| Jmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.JMKE, self)
	rz.reginput(0) = r1
	rz.numinput(1) = K
	rz.jumpinput(2) = Jmp
	if (((Jmp << 22) >> 22) != Jmp) {
		error (self, `Jumped too far`)
	}
}


function message.JMKN (|asmreg| r1 = nil, |int| K = nil, |int| Jmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.JMKN, self)
	rz.reginput(0) = r1
	rz.numinput(1) = K
	rz.jumpinput(2) = Jmp
	if (((Jmp << 22) >> 22) != Jmp) {
		error (self, `Jumped too far`)
	}
}


function message.JBOR (|asmreg| r1 = nil, |int| Small = nil, |int| Jmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.JBOR, self)
	rz.reginput(0) = r1
	rz.numinput(1) = Small
	rz.jumpinput(2) = Jmp
	if (((Jmp << 14) >> 14) != Jmp) {
		error (self, `Jumped too far`)
	}
}


function message.JBAN (|asmreg| r1 = nil, |int| Small = nil, |int| Jmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.JBAN, self)
	rz.reginput(0) = r1
	rz.numinput(1) = Small
	rz.jumpinput(2) = Jmp
	if (((Jmp << 14) >> 14) != Jmp) {
		error (self, `Jumped too far`)
	}
}


function message.LUPU (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| Small = nil, |int| Jmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.LUPU, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = Small
	rz.jumpinput(3) = Jmp
	if (((Jmp << 19) >> 19) != Jmp) {
		error (self, `Jumped too far`)
	}
}


function message.LUPD (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| Small = nil, |int| Jmp = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.LUPD, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = Small
	rz.jumpinput(3) = Jmp
	if (((Jmp << 19) >> 19) != Jmp) {
		error (self, `Jumped too far`)
	}
}


function message.RFAP (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RFAP, self)
	rz.reginput(0) = r1
	rz.reginput(1) = r2
	rz.reginput(2) = r3
}


function message.RFST (|asmreg| r1 = nil, |asmreg| r2 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RFST, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
}


function message.RFWR (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| Decr = nil, |int| Offset = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RFWR, self)
	rz.reginput(0) = r1
	rz.reginput(1) = r2
	rz.numinput(2) = Decr
	rz.numinput(3) = Offset
}


function message.RFRD (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| Decr = nil, |int| Offset = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RFRD, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = Decr
	rz.numinput(3) = Offset
}


function message.RFDC (|asmreg| r1 = nil, |int| Count = nil, |int| Offset = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RFDC, self)
	rz.reginput(0) = r1
	rz.numinput(1) = Count
	rz.numinput(2) = Offset
}


function message.RALO (|asmreg| r1 = nil, |asmreg| r2 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RALO, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
}


function message.GSTR (|asmreg| r1 = nil, |int| Mode = nil, |int| Add = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.GSTR, self)
	rz.dest(0, r1, a)
	rz.numinput(1) = Mode
	rz.numinput(2) = Add
}


function message.GTAB (|asmreg| r1 = nil, |int| Mode = nil, |int| Add = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.GTAB, self)
	rz.dest(0, r1, a)
	rz.numinput(1) = Mode
	rz.numinput(2) = Add
}


function message.RD1U (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Offset = nil, |int| move = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RD1U, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Offset
	rz.numinput(4) = move
}


function message.RD1S (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Offset = nil, |int| move = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RD1S, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Offset
	rz.numinput(4) = move
}


function message.RD2U (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Offset = nil, |int| move = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RD2U, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Offset
	rz.numinput(4) = move
}


function message.RD2S (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Offset = nil, |int| move = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RD2S, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Offset
	rz.numinput(4) = move
}


function message.RD4U (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Offset = nil, |int| move = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RD4U, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Offset
	rz.numinput(4) = move
}


function message.RD4S (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Offset = nil, |int| move = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RD4S, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Offset
	rz.numinput(4) = move
}


function message.RD8U (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Offset = nil, |int| move = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RD8U, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Offset
	rz.numinput(4) = move
}


function message.RD16 (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Offset = nil, |int| move = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RD16, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Offset
	rz.numinput(4) = move
}


function message.WR1U (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Offset = nil, |int| move = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.WR1U, self)
	rz.reginput(0) = r1
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Offset
	rz.numinput(4) = move
}


function message.WR2U (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Offset = nil, |int| move = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.WR2U, self)
	rz.reginput(0) = r1
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Offset
	rz.numinput(4) = move
}


function message.WR4U (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Offset = nil, |int| move = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.WR4U, self)
	rz.reginput(0) = r1
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Offset
	rz.numinput(4) = move
}


function message.WR8U (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Offset = nil, |int| move = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.WR8U, self)
	rz.reginput(0) = r1
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Offset
	rz.numinput(4) = move
}


function message.WR16 (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Offset = nil, |int| move = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.WR16, self)
	rz.reginput(0) = r1
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Offset
	rz.numinput(4) = move
}


function message.CNTC (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| offset = nil, |int| cnst = nil, |int| size = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.CNTC, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = offset
	rz.numinput(3) = cnst
	rz.numinput(4) = size
}


function message.CNTD (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| offset = nil, |int| cnst = nil, |int| size = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.CNTD, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = offset
	rz.numinput(3) = cnst
	rz.numinput(4) = size
}


function message.RDWR (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| Length = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.RDWR, self)
	rz.reginput(0) = r1
	rz.reginput(1) = r2
	rz.numinput(2) = Length
}


function message.FADD (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| D = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.FADD, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = D
}


function message.FADK (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| High = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.FADK, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = High
}


function message.FMUL (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| D = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.FMUL, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = D
}


function message.FMLK (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| High = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.FMLK, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = High
}


function message.FDIV (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| D = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.FDIV, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = D
}


function message.FFRC (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| D = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.FFRC, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = D
}


function message.FCLM (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| D = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.FCLM, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = D
}


function message.VGET (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Ind = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.VGET, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Ind
}


function message.VSET (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Ind = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.VSET, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Ind
}


function message.VBLD (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| r5 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.VBLD, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = r5
}


function message.VSWZ (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| Fields = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.VSWZ, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = Fields
}


function message.VMOV (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.VMOV, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
}


function message.VADD (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| D = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.VADD, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = D
}


function message.VADK (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| High = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.VADK, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = High
}


function message.VMUL (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| D = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.VMUL, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = D
}


function message.VMLK (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| High = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.VMLK, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = High
}


function message.VDIV (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| D = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.VDIV, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = D
}


function message.VFRC (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| D = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.VFRC, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = D
}


function message.VCLM (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| D = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.VCLM, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = D
}


function message.QADD (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.QADD, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.QSUB (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.QSUB, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.QMUL (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.QMUL, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
}


function message.QDIV (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |int| Kind = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.QDIV, self)
	rz.dest(0, r1, a)
	rz.dest(1, r2, a)
	rz.reginput(2) = r3
	rz.reginput(3) = r4
	rz.numinput(4) = Kind
}


function message.QCLM (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |asmreg| r4 = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.QCLM, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.reginput(3) = r4
}


function message.QADK (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| K = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.QADK, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = K
}


function message.QFLG (|asmreg| r1 = nil, |asmreg| r2 = nil, |int| up = nil, |int| down = nil, |int| sign = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.QFLG, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.numinput(2) = up
	rz.numinput(3) = down
	rz.numinput(4) = sign
}


function message.QRSS (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.QRSS, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.QRSH (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.QRSH, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.QLSH (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.QLSH, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.QAND (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.QAND, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.QXOR (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.QXOR, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.QORR (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.QORR, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}


function message.QNOT (|asmreg| r1 = nil, |asmreg| r2 = nil, |asmreg| r3 = nil, |int| Sh = nil, |&fatasm|) {
	visible
	|| a = assembler.sh
	rz = a.RequestOp(asm.QNOT, self)
	rz.dest(0, r1, a)
	rz.reginput(1) = r2
	rz.reginput(2) = r3
	rz.numinput(3) = Sh
}

