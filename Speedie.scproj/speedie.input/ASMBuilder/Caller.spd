



extend Assembler {

function IsASMConst (|message| exp, |bool|)
	|| fn = exp.func
	if fn == @num
		return true
	if fn == @thg // now what?
		return ASMType.ThgSub(self, exp, ASMReg.ConstRequest)


function PrmCollectSpd (|message| prms,  |SCFunction| fn,  |uint64|) // paramcollect, paramscollect
	opt norefcounts
	|int64| sh
	|| args = fn.args
	|| i = 0
	for p.fast in prms
		|int64| v = .µReffed(p!, args[i]!).reg
		sh += 5
		rz |= v << sh
		i++
	
	rz |= i


function PrmCollect (|message| prms,  |SCFunction| fn,  |uint64|)
	// We want a simple param order for speedie. Only sensible way to do things.
	// So we can't share the prmcollector.
	opt norefcounts
	
	if !fn.HasCVersion
		return .PrmCollectSpd(prms, fn)
	
	|int64| sh = 64
	|| fc = 0
	|| ic = 0
	|| args = fn.args
	|| n = args.Length
	for Ints in 2
		|| i = 0
		for p.fast in prms
			|| ty = p.ASMDecl
			if ty.SpecialRegs|int| != Ints		// should get .SpecialRegs from message somehow?
				|int64| v = .µReffed(p!, args[i]!).reg
				sh -= 5
				rz  |=  v << sh
				ic += ints
				fc += !ints
			i++
	
	rz >>= 64-((n*5)+12)
	if fc>8 or ic>8			// hmmm
	rz |= fn.ASMReturn.SpecialRegs << 11
	if fc
		rz |= (8-fc) << 6
		rz |= (8-ic) << 0
	  else
		rz |= (17-ic) << 6
//		.DeclPrint
		

function CallFunc (|message| exp,  |asmreg| dest,  |scfunction| fn,  |asmreg|)
	|| vd = .VDecls
	|| v = vd.log2
	|| diff = (!v or dest.reg != v)
	v += diff
	
	vd |= 1<<v
	.Vdecls = vd
	
	check ((v < 32) and !(vd & .vtemps)) (exp, "Too many registers in use. No space for result.")
	if (dest is ExitAtAll) and .state.return
		v = 1 max (.state.parentvars >> 32) // a simple max will fix this?
	dest.reg = v
	dest.µtype = fn.ASMRegType
	dest = dest.ReallySimplify
	(dest is alternate) = diff
	return dest


function CanReuseParam (|message| Prms, |scdecl| A, |asmreg| v, |bool|)
	opt norefcounts

	if  a is reference  or  a isnt altered
		return true

	|| vr = v.reg
	require vr and (.state.return iz vr)

	for p.fast in prms
		// check for the address of the same var?
		if .ExistingVar(p) iz vr
			require !rz
			rz = true


function TryInline (|message| prms, |asmreg| dest, |scfunction| fn, |int| AllowedGain, |asmreg|)
	opt norefcounts
	|| Start = .curr
	|| OV = .OpenVars
	
	|inlineblock| Old = .State				// can't use implicit types for barestructs
	if !dest.reg and fn.ASMReturn
		if dest isnt discard
			Dest = .TempOnly(prms, dest)
	
	if dest isnt ExitFunction
		.TailInlineable = false
	  elseif .state.InlineDepth == 0
		.TailInlineable = true
	
	|int| D = ++.state.InlineDepth
	.DeepestInline = D max .DeepestInline
	
	dest = dest.simplify
	dest.µtype = fn.ASMRegType
	.state.fn = fn
	.state.Return = dest
	.state.ParentVars = .openvars
	.state.BranchDepth = 0
	
	|fatrange| LL
	rz = .TryInlineSub(prms, fn, AllowedGain, LL)
	if !rz
		.NopRange(start, .curr)				// rewind
	
	.state = old
	if .state.InlineDepth == 0
		.InlineEnd = nil
	.CloseVars(OV) // should closevars come before restore? sigh. idk.


function PrmPrint (|string| s)
	opt norefcounts
	
	print s
	print " "
	printline .fn.exportname
	
	for (a in .fn.Args) (i)
		print a.name
		print ": "
		print (a is const).render
		print ", "
		print (a is reference).render
		print ", "
		printline (a.wholetype.reg).render
	printline s
	printline
	printline


function TryInlineSub (|Message| prms, |SCFunction| fn, |int| AllowedGain, |fatrange| LL, |asmreg|)
	opt norefcounts
	LL.Start = .curr

	// if "InlineParam".trap
	|SavedRegisters| regs 
	regs.Collect(fn.args, self)
	
	.InlineParameters(prms, fn.LinkDepth==1)
	|| RealStart = .curr					// Params need to be done anyhow... so don't count them.
	asmtype.ArgumentSub(self, fn.SourceArg!)
	regs.Restore(fn.args)
	
	ll.after = .curr
	|| Result = .InlineFinishWithConsts(ll)
	|| Grown = .CurrGain(RealStart)
	if Grown <= AllowedGain
		if !result
			(result is ConstOutput)			// no longer zero
		return Result
	
	regs.Rewind(self)


function UpdateInlineReg (|asmreg| V, |scdecl| D, |asmreg|)
	if v is constoutput and d isnt Altered
		(d is const)

	|| T = D.WholeType
	v.TmpCheck
	D.AsmReg = v												// update reg!
	return v


function InlineVar (|message| prms, |message| m, |scdecl| a, |asmreg|)
	opt	norefcounts

	m = m.ASMUnbra
	|| fn = m.Func
	require fn == @thg
	|| d = m.ASMDecl

	require d is local
	|| v = .LocalThg(d)
	if v and .CanReuseParam(prms, a, v)
		// what about if a gets altered... and then used?
		// like in some nested opt inline thing?
		(a is reference) = (d is reference)
		(a is const) = (d is const)
		return v	


function InlineParameters (|message| prms, |bool| IsLeaf)
	// if "InlineParam".trap
	opt norefcounts
	|| p = prms.first!

	for a in .fn.Args			
		|| v = .InlineVar(prms, p, a)
		if !v
			|| o = .OpenVars
			v = .DeclareMe(a.source, a)
			if IsLeaf and a isnt altered
				|| v2 = .µGetASM(p, v)
				if v2.reg != v.reg
					.closevars(o) // close the var if v2 is unused.
				v = v2
			  else
				v = .µInto(p, v)
		
		v = .UpdateInlineReg(V, a)
		.MarkDeclAsConst(a, V, nil)
		p = p.next!


	
function CurrGain (|&fatasm| Start, |int|)
	|| C = .curr
	while Start < C
		rz += start.exists
		start++ 
		

function AskForInline (|Message| prms, |ASMReg| dest, |SCFunction| fn, |ASMReg|)
	opt norefcounts
	require .state.InlineDepth < .InlineDepthLimit
	|| N = fn.µlength
	require N and !fn.HasCVersion

	|| MaxEnd = .InlineEnd
		|| SubInline = .curr + (N / 3)
		require SubInline < maxend

	|| AllowedGain = 5 + (fn is inline) * 23		// assume that functions have 5 instruction overhead.
	|| Grace = 9
	AllowedGain -= .State.inlinedepth
	
	for p.fast in prms
		Grace += .IsASMConst(p)<<2

	require (AllowedGain + Grace) > fn.µlength

	if !.state.InlineDepth
		.InlineDepthLimit = 3
		.DeepestInline = 0
		.InlineEnd = .curr + AllowedGain
	
	|| I = .TryInline(prms, dest, fn, AllowedGain)
		return I
	
	// try weaker inline
	require !.state.InlineDepth and .DeepestInline > 1

	.InlineDepthLimit = 1
	return .TryInline(prms, dest, fn, AllowedGain)


function RegClear (|message| exp, |&fatasm| C, |int| i)
	c.prms[5] = 0
	|| L = c.Const
	|| signed = L < 0
		L = -L
	exp.BFLG(i.asm, i.asm, L, L, signed|int|)


function RegsBitClear (|message| exp, |&fatasm| Start)
	opt norefcounts
	|| c = .Last-1
	while C >= Start
		if (c isa asm.GRAB)
			|| id = c.Prms[5]
			if id == .CurrFuncGrab
				.RegClear(exp, c, c.reg(0))
		c--

}




function SCFunction.HasCVersion (|bool|)
	if .IsLibrary
		return true
	require self is wrapper

	if .IsCppInBuilt == 1	// cpp_inbuilt. These normally have no address? but perhaps we made a wrapper for it in the exec? we should check if it still exists.
		debugat
		return true

	if .IsCppInBuilt == 2	// cpp_nothing: cpp_spd might sound better?
		debugat
		return false // need to be replaced with ASM intrinsics.

	if self Is ExternalLib	// cpp_libwrapper ?   // Speedie_Main in perry, counts as one!
		debugat
		return false  // i think only perry used this and only in debug mode within Xcode

	return true


function @ASMType.ASMFunction (fn_asm) // dofunction function
	opt norefcounts
	|| prms = exp.last!
	|| TableID = 0
	// if "Inline_Consts".trap
	|| fn = prms.AsFunc
		|| MiniDest = .AskForInline(prms, dest, fn)
			return MiniDest
	  else
		|| f = exp.first!
		TableID = .µ(f).Reg
		|| dcl = f.ASMDecl
		// need to execute exp.first
/		fn = dcl.Type.FuncProto			#expect (exp)

	dest = .CallFunc(exp, dest, fn)
	if !fn.ASMReturn
		(dest is constoutput)
	
	|| Start = .curr
	++.CurrFuncGrab
	|| Closer = .OpenVars
	|| P = .PrmCollect(prms, fn)
	.CloseVars(Closer)
	
	if !TableID
		TableID = fn.tableid ?? 0xFFFF // 0xffff means unknown?
		TableID += 31
	|| PExt = P >> 32
	|| fat = prms.FNC(dest, TableID, P,  PExt) // prms.fncx
	if fn.HasCVersion
		fat._op = asm.FNCX
	fat._op += PExt > 0
	if dest is Alternate
		|| v = dest.reg
		.registers[v] = fat

	.RegsBitClear(exp, Start)
	
	if 0: prms.FNC3, prms.FNCX, prms.FNCX3 // MARK USED

	fat.µRefCount += fn isnt stateless
	if fn is Killer // return just to be safe
		fat = exp.RET()
		fat.µRefCount++
		dest = asmreg.exit
	
	.CurrFuncGrab--
	return fat * dest
		
