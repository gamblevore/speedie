


prototype fn_asm (|&ASMState| self, |message| exp, |AsmReg| Dest=0.reg, |int| Mode = 0, |AsmReg|)

	
	
datatype AsmReg (uint)
	default 0|AsmReg|
	linkage
		cpp_part Reg
		numeric false
	
	constants
		|asmreg|
		Set = 4
		PositionRequest = (1 << 29)
		ReallyTemp = (1 << 30)
		ForReturn = (1 << 30) ||| (1<<8)
		Discard = 1 << 31
	
	
	function Exists (|bool|)
		return self|int|
	
	function µType (|DataTypeCode|)
		return self|int| & 255
	function µType (assigns:|DataTypeCode|, |asmreg|)
		return ((self|int| & ~255) ||| value)|asmreg|
	
	syntax is (|AsmReg| R, |bool|)
		return self|uint| & R|uint|
	
	syntax is (|AsmReg| R, assigns:|bool|, |AsmReg|)
		if (value)
			return (self|int| ||| R|int|)|asmreg|
		  else
			return  (self|int| &~ R|int|)|asmreg|
			
	function RequestPos (|asmreg|)
		return self as positionrequest
			
	function Unrequest (|asmreg|)
		return self asnt positionrequest
		
	// we could do this instead
	// (self-1)&31!!
	// this will "rotate" 0 back to 31 and 1 to 0.
	function Reg (|int|)
		return (self|uint| >> 8) & 31
	
	function Reg (assigns:|int|, |AsmReg|)
		target debug
			if value > 31
		return (.µtype ||| (value << 8))|asmreg|
	
	syntax cast (|bool|)
		disabled "are we testing .reg, or if this is unused, or discarded?"
		return self|uint|
	
	syntax cast (|int|)
		cpp_part ToInt
		return .reg
	
	function SameType (|AsmReg| t, |message| err, |bool|)
		|| T1 = .µType
		|| t2 = t.µType
		// what about a < b with diferent types?
		// i guess speedie should sort that out on the C-level...
		return ((t2 == t1) or  (t1.IsInt and t2.IsInt)) #expect (err, "Type-mismatch")

	operator as (|asmreg| A, |asmreg|)
		return (self|uint| ||| A|uint|)|asmreg|

	operator asnt (|asmreg| A, |asmreg|)
		return (self|uint| &~ A|uint|)|asmreg|

	function Set (|asmreg|)
		return self as set
	
	function operator• (|asmreg| dest, |asmreg|)
		if .reg == dest.reg
			return 0.reg
		return dest
		
	function TryUse (|asmreg|)
		if self is ReallyTemp
			return (self|uint| &~ ReallyTemp|uint|)|asmreg|
	
	module
		function Empty (|asmreg|)
			return 0|asmreg|
	

function int.Reg (|asmreg|)
	cpp_part ToReg // (self - 1)&31 // would be better?
	rz.reg = self
