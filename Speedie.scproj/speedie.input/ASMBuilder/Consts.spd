

function fatasm.NOOP_Encoder (Asm_encoder)
	curr[] = asm.noop << 24
	return curr


function fatasm.KNST_Encoder (Asm_encoder)
	if curr >= after-2
		return curr
	|| v = .const
	|| Orig = curr++
	|| inv = v>>63					// We only need to store 63 bits then? if the top is always false.
		v = ~v	  					// Opportunity to reclaim the top bit. I'll do it later.
	|asm| knst
	|| Mode = asm.knst << 24
	knst.R1 = .prms[0]
	knst.ConstStretchy_Inv = inv
	knst.ConstStretchy_Value = v
	v >>= 17

	if 0
		.msg.KNSR(asmreg(), 0,0,0) // mark used
		.msg.KNST2(asmreg(),0,0,0)
		.msg.KNST3(asmreg(),0,0,0)

	if v
		curr++[] = v
		mode = asm.knst2 << 24
		v >>= 32
		if v
			mode = asm.knst3 << 24
			curr++[] = v

	orig[] = knst ||| mode
			
	return Curr



extend Assembler
	function MakeConstFromTwo (|&Assembler| self, |asmreg| dest, |asmreg| L, |asmreg| R, |message| exp, |fn_ASMConstifier| fn,  |asmreg|)
		// how to vectorise this? sigh...
		|| K = (fn)(l, r)
		.Nop2Consts(r, l)
		return .NumToReg(exp, k, dest, dest.µtype)


	function fatasm.TryRotateConst
		|| v = .const|uint64|
		|| OtherInv = (~v, v)(v>>63)
		require otherinv >> 17
		
		|| Inv = V.CountBits > 32 
			V = ~V
		|| LBS = (~V).LongestBitStretch			// longest false-stretch
		require LBS.x >= (64-12)				// can only store 12-bits
		
		|| ramount = 63-LBS.y 
		V = V rotl ramount
		._op = asm.knsr							// easier to debug
		.r1 = ramount
		.r2 = inv|int|
		.r3 = v|uint|
		target debug
			|| back = .prms[3]|uint64| rotr .prms[1]|uint64|
			if .prms[2]
				back = ~back
			if back!=.const // oof
	
	
	function SetConst (|message| exp, |int64| value, |asmreg| ml, |asmreg| Dest, |asmreg|)
		|| f = ml.fat
			f.const = value
			return ml
		if !ml.reg // its understandable, we sent across reg 0, so lets create a new FAT
			if !value
				return ml
			return .NumToReg(exp, value, dest, ml.µtype)
		ml.NeedFAT // sigh


	function MegaNumFinder (|int64| V, |DataTypeCode| Type, |ASMReg|)
		if v == 0
			return asmreg.zero.µtype(type)
		|| normal = Type.IsIntReg
		for f in self
			if f isa asm.KNST and f._const == v
				|| info = f.info
				if info.µType.IsIntReg == normal
					return info asnt asmreg.ConstInput
			
	
	function LoadNumber (|message| exp, |int64| V, |asmreg| Dest, |asmreg|)
		if !Dest.reg
			|| Found = .MegaNumFinder(v, dest.µtype)
				return Found
		
		dest = .TempOnly(exp, dest)		
		if dest isnt Textual
			|| K = .Last(asm.knst)
				if (k.r0 == dest.reg) and (k is temp)
					.nop(k)
		
		(dest is realconst)
		|| fat = exp.KNST(dest, 0, 0, 0)
		fat.Const = v
		rz = fat*dest
		

	function NumToReg (|message| exp, |int64| V, |asmreg| Reg, |datatypecode| SrcType, |asmreg|)
		if v // or (reg.reg)
			return .LoadNumber(exp, v, reg)
		
		
		reg.reg = 0
		(reg isnt temp)
		(reg is realconst)
		reg.µType = SrcType
		return reg
	
	
	function SetConst (|Message| List,  |message| Orig,  |bool|)
		cpp_part TextConst
		opt norefcounts								// set1: r1, 123
		|| RegMsg = list[@thg]
		|| ValMsg = RegMsg.Next				#require
		|| Value  = ValMsg.ASMConst
		
		.NumToReg(orig, value, RegMsg.Reg.textasm, datatypecode.uint64)
		return true
	

	
	
function message.ASMConst (|uint64|) 
	opt norefcounts
	if (self == @unit)
		.expect(@nil, "d")$
		return .first.float.AsInt
	.expect(@num)$
	if (.name contains '.')
		return .float32.asint
	return .int


function uint64.LongestBitStretch (|ivec2|)
	if self == -1
		return (64,0)
	|uint64| last
	while self
		last = self
		self &= self rotl 1
		rz.x++
	rz.y = last.log2


// needs refcount upgrade.

function int64.CanStoreAsAddK (|bool|)
	return ((self << 50)>>50) == self


function Assembler.CanAddK (|asmreg| R, |int64| T, |bool|) // used to be used from .plus()... works now from render
	require (r is constoutput) and R.isint
	require t.CanStoreAsAddK
 
	if r is realconst
		.nopconst(r)
	return true


function ConstifyIntDiv (fn_ASMConstifier)
	if l.FourBytes
		if l.Signed
			return l.const|int| / r.const|int|
		return l.const|uint| / r.const|uint|
	if l.Signed
		return l.const|int64| / r.const|int64|
	return l.const|uint64| / r.const|uint64|


function ConstifyIntMod (fn_ASMConstifier)
	if l.FourBytes
		if l.Signed
			return l.const|int| mod r.const|int|
		return l.const|uint| mod r.const|uint|
	if l.Signed
		return l.const|int64| mod r.const|int64|
	return l.const|uint64| mod r.const|uint64|


function ConstifyIntMul (fn_ASMConstifier)
	if l.FourBytes
		return l.const|int| * r.const|int|
	return l.const|int64| * r.const|int64|


function ConstifyBoolMul (fn_ASMConstifier)
	return l.const|bool| * r.const|uint64|

function ConstifyIntPlus (fn_ASMConstifier)
	if l is alternate
		return l.const - r.const
	return l.const + r.const


function ConstifyFloatPlus (fn_ASMConstifier)
	if l.fourbytes
		|| rf = r.F32
		|| lf = l.F32
		if l is alternate
			lf -= rf
		  else
			lf += rf
		return lf.asint
	else
		|| rf = r.F64
		|| lf = l.F64
		if l is alternate
			lf -= rf
		  else
			lf += rf
		return lf.asint


function ConstifyFloatDiv (fn_ASMConstifier)
	if l.FourBytes
		return (l.f32 / r.f32).asint
	return (l.f64 / r.f64).asint


function ConstifyFloatMul (fn_ASMConstifier)
	if l.FourBytes
		return (l.f32 * r.f32).asint
	return (l.f64 * r.f64).asint


function ConstifyFloatMod (fn_ASMConstifier)
	if l.FourBytes
		return (l.f32 mod r.f32).asint
	  else
		return (l.f64 mod r.f64).asint


function ConstifyBitAnd (fn_ASMConstifier)
	return l.Const & r.const

function ConstifyBitOr (fn_ASMConstifier)
	return l.Const ||| r.const

function ConstifyBitNot (fn_ASMConstifier)
	return ~l.Const

function ConstifyBitXor (fn_ASMConstifier)
	return l.Const xor r.const

function ConstifyBitSHS (fn_ASMConstifier)
	return l.const >> r.const

function ConstifyBitSHR (fn_ASMConstifier)
	return l.const|uint64| >> r.const|uint64|

function ConstifyBitSHL (fn_ASMConstifier)
	return l.const|uint64| << r.const|uint64|



