

struct NilTracker
	linkage:cpp_part nil
	|bool| 				NeedsTracking // base does not
	|uint64| 			Count
	|message--|			IfMsg
	|message--[1024]|	Items
	
	
	function SetNilness (|message| m, |scdecl| d, |nilstate| s, |scdecl|)
		opt norefcounts
		if d.nilused > 3 // what?
		if !.NeedsTracking
			m.Indent = d.NilUsed
			return d

		if (.count < 1024) 
			m.Indent = d.NilUsed
			.items[.count++] = m
			return d

		error (m, "Too many variables")
		return d

	function Start (|scfunction| f)
		opt norefcounts
		scfunction.currfunc = f
		.NeedsTracking = false
		.ifmsg = nil
		.Count = 0
		.restore
	
	function Tighten (|scfunction| f)
		opt norefcounts
		for (d in f.args) (i)
			if d.NeedsNilTighten
				f.args[i] = d.NilTighten
		if f.ReturnType.NeedsNilTighten
			f.ReturnType = f.ReturnType.NilTighten

	function SCDecl.NilTighten (|scdecl|)
		if .NilUsed isnt Nil
			return .MakeReal
		return .MakeOptional

	
	function Restore
		opt norefcounts
		for d in scfunction.currfunc.args				// no need add prms.... only log changes
			d.RestoreNil
	
	iterator
		|| n = 0
		while (n < .count++)
			yield self[n]
	module
		|| nilerr = "Possible NilObject Access."
	


function SCDecl.RestoreNil
	.nilused = .nildeclared


function SCdecl.NeedsNilTighten (|bool|)
	if self
		if (.NilDeclared isnt stated) and (.nilused is stated)
			return true
		return false
		if .nilused is Stated
			if !options.perry
				debugat
