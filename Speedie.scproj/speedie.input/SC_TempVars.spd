
function Message.HasOwnBlock (|Message|)
	opt norefcounts
	|| arg = .parent
	require (arg == @rel)
	arg = arg.parent
	require (arg == @decl) 
	arg = arg.parent
	require (arg == @arg)
	|| obj = arg.asarg
	if (obj and obj.TmpMovedOutFor == self)
		return arg


function Message.CreateOwnBlock (|Message?|)
	//  adds new ({}),  marks it as temp-exprblock for parent,  and puts in the right place

	using (self)
		
	|| bra = @bra.msg
	bra.obj = .obj
	rz = bra.msg(@arg)
	.ReplaceWith(bra)
	
	|| NewObj = rz.scarg(nil)
		NewObj.TmpMovedOutFor = self
		bra.statementexpr = newobj


function message.StatementExpr (assigns:|scarg| arg)
	.ASMType = asmtmp.kStatExpr
	arg.IsStatementExpr = true



function Message.TempIntoBlock (|message| ParentPlace, |Message|)
// We wanna merge all the temp funcs into one...
// Will make it harder if we use tempintoblock from multiple places...
// cos then "How it is used" becomes important.

	|| FuncMsg = .parent!
	if (funcmsg == @dot) and (funcmsg.first == self)
		0 // || x = R.pop().Property
	  else
		if FuncMsg!=@prm
			.RefDisappears // still not sure what this is doing
			return nil
		FuncMsg = FuncMsg.parent

	|| fn = FuncMsg.MsgFunc
	debug_require (FuncMsg==@func or @dot) and (!fn or fn.class == scfunction)
	
	ifn fn and fn.ReturnType
		scfunction.TempMoveOut(self, parentplace)
		return nil
	
	|| Using = .syntaxusing
	|| arg = FuncMsg.HasOwnBlock
	|message| TmpFuncThg
	|message| TmpFuncDecl
	if (Arg)
		|| rel = FuncMsg.parent!
		TmpFuncDecl = rel.parent!
		TmpFuncThg = rel.first!
	  else
		arg = FuncMsg.createownblock #require
		|| TmpFuncVar = UniqueTmpVar()
		TmpFuncDecl = MakeDecl( "", TmpFuncVar, FuncMsg, scdeclinfo.body )
		TmpFuncThg = «Thg TmpFuncVar »
		TmpFuncThg.obj = TmpFuncDecl.obj
		arg <~ TmpFuncDecl
		|| rej = NewRejoin()
		rej <~ tmpfuncthg
		arg <~ rej

	|| TmpParamName = UniqueTmpVar()
	rz = @thg + TmpParamName 
	.ReplaceWith( rz )
	|| TmpParamDecl = MakeDecl( "", TmpParamName, self, scdeclinfo.body )
	rz.obj = TmpParamDecl.obj 
	TmpFuncDecl.prev = TmpParamDecl



function message.IntoVariable (|SCNode| name_space, |nameandmsg|)
	|| P = .NiceParent
	|| Place = P.IsInDeclInBlock
		|| NameMsg = P.first!.usenonrefchangers
		if (NameMsg == @thg)
			rz.name = NameMsg.name
			rz.arg = place.Ancestor(@arg)!
			rz.msg = place.next // result uses .arg as backup if !.msg
			return rz
	
	|| Block = .CreateOwnBlock #require
	|| name = uniquetmpvar(name_space, "_imP")
	
	P = NewEqRel( @thg.msg(name), self )
	|| arg = block.asarg!
	|| decl = block.msg(@decl)
	decl <~ @emb
	decl <~ P
	decl.CollectFromBody(arg)
	block.parent!.obj = arg[name]	// Stop collectdecls being called twice! (name-conflict errors)
									// it's called in typeofblock, unless we already have the type
									// which we just set here.
	|| last = NewRejoin()
	|| RetVal = last.msg(@thg, name)
	RetVal.obj = P.obj
	 
	block <~ last
	rz.msg = last
	rz.arg = block
	rz.name = name



struct NameAndMsg
	|message?|   Msg
	|string|	 Name
	|message?|   Arg
	
	syntax append (|message| m)
		opt norefcounts
		|| msg = .msg
			msg.prev = m
		  else
			.arg <~ m



|| fs_tmp_num = FastString()
function UniqueTmpVar (|SCNode| base=scfunction.currfunc, |string| name = "tmP", |string|)
	opt norefcounts
	fs_tmp_num <~ '_'
	fs_tmp_num <~ name

	if (base)
		|| FN = base.OwningFunc
			fs_tmp_num <~ 'f'
			fs_tmp_num <~ FN.TmpCounter++|int|
	  else
		fs_tmp_num <~ SCGlobals.UniqueNum++
	return fs_tmp_num



extend_module scfunction
	function SafeTempMoveOut (|Message| msg, |scdecl| type, |Message!|)
		// we should really replace the other temps with this? at least 2 of them! We have too many
		// at least TypedTempMoveOut!
		cpp_part SafeTypedTempMoveOut
		// a.b.c -> || tmp1 = a.b.c
	
		|| Using = msg.SyntaxUsing
		|| name = UniqueTmpVar(msg.MsgOwningFunc)
		|| Stealer = msg.func.msg(msg.name)
		stealer.takeallfrom  msg
		
		|| p = msg.ParentPoint!
		if (msg == @rel)
			Stealer = stealer.wrapwith(@bra)
		msg.become(@thg, name)
	
		|| dcl = MakeDecl( "", name, Stealer )
		p.Prev = dcl
		if (msg in @arg)
			debugger
		
		msg.obj = type
		Stealer.obj = type
		|| Dcl2 = type.copydecl // no difference, its a temp
		Dcl2.Name = name
		|| relname = dcl.last.first 
			relname.obj = Dcl2
		msg.obj = Dcl2
		dcl.obj = Dcl2
		
		Return dcl


	function TempMoveOut (|Message| msg, |string| name="", |scdecl| type=nil, |Message!|)
		cpp_part TypedTempMoveOut
		// a.b.c -> || tmp1 = a.b.c
		if "JB_Sav_SaveTo".trap
	
		|| Using = msg.SyntaxUsing
		name := UniqueTmpVar(msg.MsgOwningFunc)
		|| repl = «thg name »
		msg.ReplaceWith( repl )
		
		|| p = repl.ParentPoint!
		|| insert = msg
		if (msg == @rel)
			insert = «bra, (msg)»
	
		|| dcl = MakeDecl( "", name, insert )
		p.Prev = dcl
		if (repl in @arg)
			repl.Remove
		
		if type
			msg.obj = type
		|| OldDcl = msg.AsDecl
			insert.obj = OldDcl
			|| Dcl2 = OldDcl.copydecl // no difference, its a temp
			Dcl2.Name = name
			|| relname = dcl.last.first 
				relname.obj = Dcl2
			repl.obj = Dcl2
			dcl.obj = Dcl2
		
		Return dcl



	function TempMoveOut (|Message!| msg, |Message!| place, |Message|)
		|| OldDecl = msg.AsDecl
		if !OldDecl
			place.prev = msg
			return msg // right?
	
		|| Using = msg.syntaxusing
		|| Name = UniqueTmpVar(msg.msgowningfunc)
		
		// a.b.c -> || tmp1 = a.b, tmp1.c
		|| NameThing = @Thg + name
		msg.ReplaceWith( NameThing )
		
		// here
		|| declmsg = MakeDecl( "", name, msg, scdeclinfo.body )
		place.prev = declmsg
		
		|| d = declmsg.Obj!|scdecl|
		NameThing.obj = d
		Return NameThing

