
/*
	Speedie Internals. By Theodore H. Smith...
*/



prototype CollectFunc (|Message| node, |SCNode| name_space, |Message?| ErrPlace, |SCNode?|)

class SCNode (SCObject) {
linkage
	cpp_part		Base

|Dictionary? of SCObject|			Access
|scdecl?|							LocalVarList
|SCNode--?|							Parent
|SCNode--?|							MyReacher
|SCImport--?|						Project


function IsLibrary (|bool|) // .islib, .isprojlib, .isproject, .isntproject, .isntlib
	opt norefcounts
	return .Project.IsSTDLib?


function IsReached (|bool|)
	return .MyReacher


function CollectFromNode (|Message| AST, |bool| Visible, |message| dest=nil)
	.Source ?= AST // not good! Considering that one "project" module covers multiple files!
	|| r = ast.ListAll
	
	|| Old = scnode.CurrVisibility
	scnode.CurrVisibility = Visible
	for c in r
		visible = .CollectOne( C, Visible )
	scnode.CurrVisibility = old // restore

	require dest // sigh
	for c in r
		if c in ast
			dest <~ c


function FuncSrc (|Message|)
	opt norefcounts
	return .Owningfunc$.Source


function CollectSub (|Message| c, |SCNode|)
	|| T = ClsCollectTable
	if self == compiler.program  or  self isa scmodule
		T = RootCollectTable
	
	if c != @tmp
		if self isa scclass
			c.expect(@decl)
		return nil
	
	|| FnObj = T[c.name]									#expect c
	|| base = (FnObj[])( c, self, c )						#require
	if (base != Compiler.program) // OK
		.TryAdd( c, base, base.Name )
	
	Return base


function FindModuleMsg (|Message| where, |SCNodeFindMode| Mode=0, |SCModule?|)
	opt norefcounts
	real self
	
	|| fn = where.func
	if fn == @dot
		|| f = where.first!
		f.next.expect(@emb)
		self = .FindModuleMsg(f, Mode) #require
	  else
		expect (fn == @thg or @name) (where)
	return .findmodule(where.name, where, Mode)


function FindClassMsg (|Message| where, |SCNodeFindMode| Mode=scnodefindmode.WantAType,  |SCClass|)
	opt norefcounts
	|| mod = .FindModuleMsg(where, Mode ||| SCNodeFindMode.ForClass)
		|| C = mod.cls
			return C
		if mode isnt noerrors
			error (where, "Expected a class but found module.")


function FindFunction (|string| Name, |SCFunction|)
	opt norefcounts
	|| o = self[ name ]
	if o isa SCFunction
		o.Reach
		Return o
	
	error ( nil, "Can’t find function: " + name )
	

function FindClass (|String| name, |Message| where=nil, |SCNodeFindMode| Mode=0,  |SCClass|)
	opt norefcounts
	|| Mod = .FindModule(name, where, Mode ||| SCNodeFindMode.ForClass)
		if mod.cls
			return mod.cls
		if Mode isnt noerrors
			error (where, "Expected a class but found module.")
		return nil
	if Mode isnt noerrors
		error (where, "Can't find class: " + name )


function FindModuleParent (|SCNodeFindMode| Mode, |SCnode|)
	opt norefcounts
	if mode is wantatype // allow going up superclasses instead.
		|| cls = self|scmodule|.cls
			|| p = cls.parent|scclass|
				|| mod = p.modul
				if mod.parent != self	// due to wierdness with how I did the interface thing
					return mod			// the task module contains a module with the interface.
										// yet we subclass off of that interface!
	return .parent


function FindModule (|String| name, |Message| where=nil, |SCNodeFindMode| Mode=0, |SCModule|)
	opt norefcounts

	|| Upon = self
	while upon
		if name ~= upon.name
			if upon isa scmodule
				return upon

		|| Obj = upon[ name ]
		if Obj isa SCModule
			return Obj
		if mode is dontgoup
			exit
		upon = upon.FindModuleParent(mode)
		
	if where and (Mode isnt noerrors)
		if mode is ForClass
			error (where, "Can’t find class: " + name)
		  else
			error (where, "Can’t find module: " + name)


syntax access (|message| s, |SCObject|)
	opt norefcounts
	rz = self[s.name]	#expect (s, "Can't find: " + s.name)


syntax access (|string| s, |SCObject|)
	opt norefcounts
	if self is AllowLinkedLists
		|| v = .LocalVarList
		while v
			if v.Name ~= s
				return v
			v = v.LocalVarList
		
	|| a = .Access
		return a.ValueLower(s)


function ActualAdd (|string| name, |scobject| IncObj)
	opt norefcounts
	// could we use scdecl linked-lists... at least for scargs?
	// we'd have to modify upcheck, I assume? to read from linked-lists?
	
	if  self is AllowLinkedLists  and  incobj isa SCDecl
		IncObj.LocalVarList = .LocalVarList
		.LocalVarList = IncObj
		return 
		
		
	|| m = .access ?= Dictionary.new
	m.valuelower( name ) = IncObj


function UpCheck (|string| name, |bool| LookUp=true, |SCObject|) {
	opt norefcounts
	// could modify this to add ability to read scdecl linkedlists
	// avoid needing an entire dictionary on scargs
	if LookUp and (self isa SCClass)
		for (c.upwards in self)
			|| it = c[name] 
				return it
		
	ifn (self isa scarg)
		return self[name]
	
	|| curr = self					// avoid bugs like || a = 1, {|| a = 1}
	while curr isa SCArg			// So... check upwards...
		|| found = curr[name] 
			return found
		require lookup
		curr = curr.parent|scarg|
}

	
function @scfunction.InType (|scnodetype| ty, |bool|)
	opt norefcounts
	|| fn = scfunction.currfunc
		|| cls = fn.cls
			return cls.basetype.syntaxis(ty)


function TryAdd (|Message?| ErrPlace, |SCObject| IncObj, |String| name)
	opt norefcounts
	real self
	expect (name.length inrange 64) ( ErrPlace, "Name should be 1-64 bytes long." )
	
	if self isa scclass
		|| scls = incobj.class
		if scls == scclass or scmodule
			self = self.modul|scclass|
	|| Old = .Upcheck( name, !(IncObj isa SCFunction) )
	
	if (!Old)
		return .ActualAdd(name, IncObj)
	
	require (Old != IncObj) // possible?
	
	if Old isa SCFunction
		if IncObj isa SCFunction		// link
			if (old.cls == IncObj.cls) or incobj.IsConstructorOnModule(old)
				old.Last.NextFunc = IncObj
				Return
		  elseif IncObj isa scdecl
			if old is HidesProperties
				expect (!IncObj.hiderfunc) (errplace, "Multiple property-hiders found.")
				incobj.hiderfunc = old
				return .ActualAdd(name, IncObj)
	
	if  (name == "self")  and  scfunction.intype(scnodetype.object)
		error ( ErrPlace, "Can't use 'self' here." )
	  else
		incobj.NameConflict(old, name)


function SCFunction.IsConstructorOnModule (|scfunction| old, |bool|)
	opt norefcounts
	if self is constructor
		|| p = old.parent
		return p == .cls!.modul


constructor
	cpp_part Constructor0
	.Project = scimport.curr
	.IsVisible = scnode.CurrVisibility	// don't do anything?


constructor (|string| Name)
	cpp_part ConstructorStr
	.Project = scimport.curr
	.name = name


constructor (|Message?| node)
	cpp_part ConstructorMsg
	.Project = scimport.curr // why not?
	.source = node
	.isvisible = node.visible


function message.visible2 (|maybebool|)
	if self
		|| i = .indent
		if i >= 254
			return (i == 254)|maybebool| // retrieve visibility of a delayed node.


function message.visible (|bool|)
	|| b = .visible2
	if b.isknown
		return b.Knowntrue
	return SCNode.CurrVisibility


function message.visible (assigns:|bool|)
	.indent = 255 - value


function Use
	opt norefcounts
	|| s = .source
		s.memoryLayer.Use
	.Project.use


function SubProjName (|string|)
	return Compiler.Program.ExportName


function SCFunction.UseExportWrapper (|string| CppWrapper, |bool|)
	if CppWrapper
		is Wrapper
		.SetExportName( CppWrapper, true )
		return true


function SCFunction.UseCppName (|string| CppName, |bool|)
	require CppName
	.SetExportName( CppName, true )
	return true


function LinkagePlace (|message|)
	opt norefcounts
	|| Place = .SourceArg
	|| Link = Place.find(@tmp, "linkage")
	return Link[@arg] ?? Place


function message.Cpp_Wrapper (|string|)
	opt norefcounts
	if self
		if self == @bra
			return .firstname
		return .name


function SCFunction.ExportNameBuilder (|string|CppPart="", |string| )
	if !CppPart
		CppPart = .Name
		if .IsAssigns and !(cpppart endswith "Hider")
			CppPart += "Set"

	|| SubSection = ""
	|| AfterSub = ""
	|| c = .cls
		SubSection = c.Modul.CppPath
		AfterSub = "_"
		if (self is constructor) and !(CppPart contains "Constructor")
			cppPart = "Constructor" + CppPart
	  else
		|| L = .parent
		if L isa SCModule
			if L.CppPart
				SubSection = L.CppPath
				AfterSub = "__"

	|| P = .Project		// never nil but whatever
		|| wanted = p.mod.exportname
		if wanted != subsection
			rz = (wanted + "_")
	rz += (SubSection + AfterSub + CppPart)


function scmodule.CppPath (|string|)
	|| f = .cpppart
	while
		|| p = .parent
		if (p isa scmodule)
			if !p.isimport
				self = p
				f = p.cpppart + "_" + f
				continue
		exit
	return f
	

function FindCppWrapper (|message| place, |bool|isclass, |message|)
	if self isa SCFunction
		|| pl = .FindCppWrapperFunc(place)
			return place.FindAndRemove2(pl, true, false)
	return place.FindAndRemoveSub( "cpp_wrapper", true, IsClass )


function Message.FindAndRemove2 (|message| place,  |bool| NothingOK,  |bool| IsClass,  |Message|)
//	opt norefcounts
	place.remove
	|| ch = place.first
	if NothingOK and !ch
		place.name = ""
		return place
	if ch == @thg or @bra
		if isclass
			expect (.parent istmp "linkage")   (ch, "Put this inside a 'Linkage' tag.")
		Return ch
	place[@thg]


function Message.FindAndRemoveSub (|String| name,  |bool| NothingOK,  |bool| IsClass,  |Message|)
	|| place = .find( @Tmp, name )
		return .FindAndRemove2(place, NothingOK, isclass)
	


function SCFunction.FindCppWrapperFunc (|message| place, |message|)
	opt NoRefCounts
	for cpp in place
		if (cpp.name starts "cpp_") and .FoundOneCpp(cpp.name)
			return cpp


function SCFunction.FoundOneCpp (|string| n, |bool|)
	if n == "cpp_nothing"
		.noautocomplete = 1
		.IsCppInBuilt = 2 // speedie will turn these into ASM isntructions
		return true
	if n == "cpp_inbuilt"
		.noautocomplete = 1
		.IsCppInBuilt = 1
		return true
	if n == "cpp_libwrapper"
		.noautocomplete = 1
		Is ExternalLib
		return true


function LoadExportName 
	// Project_Class_Func
	// Project_Module__Func	
	require !.ExportName
	
	|| place	= .LinkagePlace
	|| IsClass	= (self isa SCClass)
	// probably should use a dispatch table
	// we want to check so many things, wrapper, name, part, inbuilt, library...
	|| CW		= .FindCppWrapper(place, isclass)
	|| CppName	= place.FindAndRemove( "cpp_name",	false,  IsClass )
	|| CppPart	= place.FindAndRemove( "cpp_part",	false,  IsClass )


	if self isa SCFunction
		.IsCppInBuilt ?= (cw == @bra)|int|
		(self is cpp) = cw
		|| CppWrapper = cw.cpp_Wrapper
			.MakeParamsReal
		require !.UseExportWrapper(CppWrapper) and !.UseCppName(CppName) and (self isnt disabled)

///  ///  ///  ///  ///	 ///  ///  ///	 ///  ///  ///	 ///  ///  ///
		cppname = .exportnamebuilder(cpppart)
		(self Is Wrapper) = cw!=nil
	  else
		CppPart ?= .Name
		CppName ?= CppPart

		if self isa SCModule
			.CppPart = CppPart

		  elseif self isa scclass
			.Modul.CppPart = CppPart
			|| e = place.FindAndRemove( "cpp_class", false, true )
				.CppClass = e.unicodesafename
			.Modul.SetExportName( CppPart + "_", false ) // remove this? just try... once everything is working.

	.SetExportName( CppName, false )



function TryAddBase (|Message| c, |SCNode| neu) 
	.TryAdd( c, neu, neu.Name )


function LookUpFunc (|String| name, |Message| exp, |scobject|)
	return .LookUpSub( name, exp, self, nil, nil, kPurposeFunc )


function ProjectFix (|SCNode|)
	opt norefcounts
	if (self == compiler.program)
		|| c = scimport.curr
			return c.Mod
	return self


function LookUpSub (|String| OrigName, |Message?| Exp, |SCNode| Arg_Space, |SCDecl?| contains, |Message?| side, |int| Purpose, |SCObject|)
// nil "exp" means "Not considered an error if not found", because we need exp to report errors!
	
	|| ParamsArray	= SCParamArray.new(exp)
	|| Curr			= ParamsArray.DetectDotSuper(self, arg_space)
	|| paramshere = exp.last
	ParamsArray.PreReadTypes(Arg_Space, ParamsHere, side)
	|| CanFunction	= (ParamsHere) and  (!ParamsArray.IsAddress)
	|SCFunction| Missing
	|SCFunction| f
	|scclass|    owning_cls
	|| AllowSelfToConstructor = false

	if scfunction.currfunc
		owning_cls = scfunction.currfunc!.cls
		if owning_cls
			AllowSelfToConstructor = ParamsArray.IsSelfCon

	for (b.ListLookup in Curr)
		|| o = b[ origname ]
		if (!o)
			continue
		if (ParamsArray.IsDot)  and  (ParamsArray.IsModule)  and  (b == compiler.program)
			exit								// Stop SCFunction.Byte looking up Main.Byte...
		
		if o isa SCDecl
			if  ((owning_cls != curr) or exp.isfuncdot) and  o.Hiderfunc.Hidermatch(paramsarray.HasSide) 
				o = o.hiderfunc|scdecl|
			  else
				if o.Type.FuncProto
					expect ((ParamsArray.IsDot or !ParamsHere) and (!ParamsArray))  ( exp, "Wrap this in a bracket, before calling it as a function." )
					Return o

				if (!side and paramsarray.isdot and o.type.processas)
					if !exp
						debugger, return nil
					return o.ProcessAs(exp)

		
		paramsarray.AllowSelfToConstructor = AllowSelfToConstructor
		if (paramshere and paramshere.func == @prm) and (o isa scmodule)
			o = o.GetTheNewer|scmodule|
			paramsarray.AllowSelfToConstructor = false
		
		
		if CanFunction and (o isa SCFunction)
			f = o								// store for later return? not needed?
			o = f.ArgsMatch( contains, arg_space, ParamsArray )
			if !o
				0
			  elseif o.ismacro
				if o.ismacro
					Missing = o
				o = nil
			  else
				if  o is disabled  and  scfunction.currfunc isnt disabled
					error (exp,     o.description)
					error (o.source, "Disabled here.")

				if Paramshere
					ParamsHere.obj = o // multiple return :3
					if !paramsarray.AllowSelfToConstructor and (o is constructor)
						if o.ReturnsObject
							ParamsHere.ConstructorAddNil(paramsarray.isdot and !(self isa scmodule))
				Return o
		
		if o
			paramsarray.found = true
			if !ParamsArray
				if (purpose == kPurposeDot) and !paramsarray.isaddress and (o isa scdecl) 
					Return o
				///////
				
				ifn o isa SCFunction
					Return o 			// canfunction is false
				ifn exp in @dot			// x = a.b is still a function call
					|| err = "Function must have a prototype."		// what about the side thing?
					if side and !paramsarray.MacroSize
						err = "Not assignable."
					check (o|scfunction|.HasProto) (exp, err)
					Return o|scfunction|.HasProto

	if missing	// the missing stuff should ENTIRELY go within argsmatch? cos its called in two places.
		return Missing.MacroFix( contains, arg_space, paramsarray )

	require (exp)
	
	if f
		if (f is disabled)
			error (exp, f.description)
		  elseif !paramsarray.MadeError
			f.ArgsMatch( contains, arg_space, ParamsArray, kTypeCastDescribeErrors )
		if ParamsHere
			ParamsHere.obj = f // for auto-complete
		Return f

	|| ErrMsg = "" // can't find "" on something "".
	if (paramsarray.found)
		ErrMsg = "Unexpected params on variable."
	  elseif (!ParamsHere)
		ErrMsg = "Can’t find object “${OrigName}”."
	  elseif (ParamsArray.IsDot)
		ErrMsg = "Can’t find “${OrigName}” on ${ParamsArray.RenderKind} “${ParamsArray.ModuleName}”."
		if self isa SCModule
			|| cls = .cls
				|| found = cls.UpCheck(origname)
					ErrMsg += " (But it does exist on the class.)"
	  else
		ErrMsg = "Can’t find function “${OrigName}”."
	error ( exp, ErrMsg )


function message.ConstructorAddNil (|bool| isdot)
	opt norefcounts
	if isdot
		|| p = .parent
		.first = p.first
		self = p
	.first = .CreateNil


constants (
	kPurposeAddress
	kPurposeFunc
	kPurposeDot
	kPurposeVar
	kPurposeVarDecl
	kPurposeHider=0x10000
	NoErrors = 1
	DontGoUp = 2
)


function LookUpDot (|String| name, |Message| exp, |SCNode| arg_space, |SCDecl| contains, |Message| side, |Object|)
	opt norefcounts
	return .LookUpSub( name, exp, arg_space, contains, side, kPurposeDot )


function LookUpVar (|String| name, |Message| exp, |message| side, |SCObject|)
	opt norefcounts
	if name ~= "super"
		name = "self"
	
	return .LookUpSub( name, exp, self, nil, side, kPurposeVar )



function LookUpVarRootDecl (|String| name, |Message| exp, |SCObject|)
// misdesigned... but so is initrootdecl :(
	return .LookUpSub( name, exp, self, nil, nil, kPurposeVarDecl ) 


function LookUpVarDecl (|String| name, |SCDecl|)
	|| result = .LookUpSub( name, nil, self, nil, nil, kPurposeVarDecl )
	if result isa SCDecl
		Return result


function ImportFile (|SCFile| file)
	|| AST = file.AST								#require
	
	todo `visibility needs to make a bit more sense than this...
	 we should remove the "Visible" statement from within class scope... only allowed in the linkage.
	 within modules... it should only apply to global vars`
	|| Old = file.Use
	compiler.project = file.proj 
	|| v = file.proj.isstdlib and Options.MakeInterpreter
	compiler.program.CollectFromNode( ast, v )
	file.Stop(old)


function RequireContained (|Message| errplace, |SCDecl|)
	opt norefcounts
	|SCClass| cls
	
	if (self isa SCFunction)
		cls = .Cls
		if !cls
			cls = .ProtoType
			if !cls
				|| p = .parent as SCModule
					cls = p.Cls

	  elseif (self isa SCClass)
		cls = self
		
	  elseif (self isa SCModule)
		cls = .Cls
		
	  elseif (self isa SCArg)
		|| f = .ParentFunc
			cls = f.Cls
	
	expect (cls and cls.Contained)   (errplace, "Can’t use '...' here, no contained type found.")
	return cls.Contained


function SourceArg (|Message|)
	opt norefcounts
	|| p = .Source
		if p == @Arg
			Return p
		return p.find( @Arg )


function SCFunction.SourceArg (|message|)
	opt norefcounts
	|| arg = .Source.last
	if arg == @arg
		return arg


function SCFunction.ParamUniquer (|string| s, |string|)
	|| fs = faststring.new
	fs <~ s
	fs <~ "With"
	
	|| first = 0+(.cls!=nil)
	|| last = .args.length - 1
	if (last < first)
		fs <~ '0'
	  else
		for (i in first to last)
			|| a = .args[i]
				fs <~ a.type.modul.CppPart.Titlecase
	
	return fs


function UniquifyExport (|String| s, |string|)
	if (self isa scfunction)
		|| s2 = .ParamUniquer(s)
		if !compiler.ExportNames[s2]
			return s2
	
	|| u = SCGlobals.UniqueNum++
	|| s3 = s + u.render
	if !compiler.exportnames[s3]
		return s3


function RehomeExport (|bool|)
	check (!.IsLibrary) (self, "Can't rehome a std lib function. Use cpp_part to give a unique name.")
	|| newhome = .UniquifyExport(.exportname)			#require
	compiler.ExportNames[.exportname] = nil
	compiler.ExportNames[newhome] = self
	.exportname = newhome
	return true

			
function scobject.NameConflict (|SCObject| Old, |string| name)
	|| msg = "Name conflict: " + name
	error ( .source,   msg)
	(stderr.lasterror! is dontstrip)
	error (old.source, msg)
	(stderr.lasterror! is dontstrip)
	

function TestExportName (|String| s, |bool| Explicit, |string|) {
	|| o = Compiler.ExportNames[ s ]
	if !o : return s
	
	if !Explicit
		if (o isnt ExplicitExport)
			o.RehomeExport
		#!AAAA
		|| it = .UniquifyExport(s)
			return it
		
		#!BBBB
	  elseif o isnt ExplicitExport
		if o.RehomeExport: return s
	
	#!CCCC
	|| Err = "Export-name conflict: " + s
	error ( o.Source, Err )
	error (  .Source, Err )
}


function SetExportName (|String| s, |bool| Explicit)
	if self isa scfunction
		require !.ismacro

	s = s.UnicodeSafeName
	ifn (self isa SCModule) or (self isa SCClass)		// modules aren't really accessable like that.
		s = .TestExportName(s, explicit)				#require
		Compiler.ExportNames[ s ] = self

	(self is ExplicitExport) = Explicit
	.ExportName = s


function message.IsFuncDot (|bool|)
	opt norefcounts
	|| l = .last
	return l and (l.func == @prm)


function message.InsideFunc (|SCFunction|) //owningfunc, infunc
	opt norefcounts
	for ch.up in self
		if ch == @tmp
			|| fn = ch.AsFunc
				return fn


function OwningFunc (|SCFunction|)
	if self isa SCFunction:	Return self
	if self isa scarg:		Return .ParentFunc


function CollectOne (|Message| c, |bool| Visible=false, |bool|)
	if c IsTmp "visible"
		visible = .LoadVisibility( c )
		c.remove
		Return visible
	
	// SHOULDN'T DO .MoveToInitFunc FOR GLOBALS
	// better to collect immediately. lose visibility, and other issues
	c.Visible = Visible // save lost visibility
	
	if !.CollectSub( C ) and (self isa SCModule)
		.MoveToInitFunc( C )

	return visible


function CollectStr (|string| s, |message|)
	rz = s.ParseClean
	.CollectFromNode( rz, false )


function CreateNameDict (|Message| FuncName, |[message]| NameList) {
	expect (FuncName == @thg) ( FuncName, "Need a name." )
	
	|| AllSameType = ""
	for n in namelist
		|| Type = TypeofExpr(n, self) #require
		expect Type.IsNormal (n, "This can't be a constant.")
		
		|| NewType = type.type.name
		if (AllSameType == NewType or "")
			AllSameType = NewType
		  else
			AllSameType = "object"
	
	AllSameType ?= "object"

	|| Name = FuncName.Name
	|| fs = FastString.new

	fs <~ "
function $name (|dictionary of $AllSameType|)
	visible false
	|| _T = ${name}_Dict 
	if _T
		return _T
	_T = dictionary.new
	${name}_Dict = _T
"

	for s in NameList
		fs <~ `	_T.Set("`
		fs <~ s.name.Lowercase
		fs <~ `", `
		fs <~ s
		fs <~ ")\n"
		
	fs <~ "
	return _T
"

	|| FuncSrc = fs.GetResult
	|| msg = FuncSrc.ParseClean[0]
	.CollectSub( msg #expect )

	|| DclSrc = "|dictionary of $AllSameType| ${Name}_Dict = nil"
	|| DclMsg = DclSrc.ParseClean
		DclMsg.CollectFromBody(self)
}


function Message.ConstantExpandSub (|Message|)
	using (self)
	for item in self
		if rz
			rz = NewRel( rz, item.copy, "|||" )
		  else
			rz = item.copy


function ConstantExpand (|Message| ch)
	|| L = ch.first!
	|| op = L.Next!
	|| R = op.Next!
	
	expect ((op == "=") and (L ==@thg))  ( op, "Expected 'd=(a,b,c...)' ." )
	
	|| Rel = @rel.msg
	rel <~ l
	rel <~ (@opp, "=")
	rel <~ R.ConstantExpandSub

	ch.Next = rel
	R.MoveAllAfter(ch)
	ch.remove


function FindVis (|Message| c, |bool|)
	opt norefcounts
	if !c
		return true
	if c == @thg
		return c.TrueOrFalse
	if c == @adj
		|| first = c[@thg, "class"]
		|| name  = c[@thg, 1].name
		|| cls   = compiler.softclass(name)
		return cls and cls isnt banned
	error c


function LoadVisibility (|Message| p, |bool|)
	opt norefcounts
	rz = .FindVis(p.first) //   visible false,   visibile true,   visible
	.IsVisible = rz
	scnode.CurrVisibility = rz
	p.MakeComment


function AutoCompleteKind (|string|)
	if self isa SCModule
		return "module"
	if self isa scclass
		if .FuncProto
			return "function prototype"
		if .IsDataTypeOnly
			return "datatype"
		if .IsStruct
			return "struct"
		if .IsObject
			return "class"
	return "unknown"


iterator ListLookup
	|| Curr = self
	while (Curr)
		yield Curr
		Curr = Curr.parent



module {
	|bool|			CurrVisibility = true
	|bool|			ConstantsLoadingOverride

	function LoadCppPart (CollectFunc)
		opt norefcounts
		require (name_space isa scclass) or (name_space isa scmodule)
		
		if (name_space == compiler.program) // it's at root!
			|| file = node.file
				file.exportname = node[@thg]$.name
			node.remove
		
		return compiler.program
}

}



class SCBetterNode (SCNode)
	|string|	Description
	constructor
		//
	constructor (|message| msg)
		Super.Constructor( msg )
		
	function ReadDescription (|message| msg)
		|| str = msg[@str]
			check !.description (msg, "Multiple descriptions.")
			.Description = str.name




function DontRemove (CollectFunc)
	return Compiler.Program // OK


dispatch RootCollectTable (CollectFunc)
	+'love'					SCGame3D.Love
	+'function'				SCFunction.NewFunc
	+'extend_function'		SCFunction.NewFunc // user shouldn't write these
	+'api'					SCFunction.NewFunc
	+'cpp_libwrapper'		SCFunction.NewCppWrapper
	+'cpp_wrapper'			SCFunction.NewCppWrapper
	+'cpp_inbuilt'			SCFunction.NewCppWrapper
	+'cpp_nothing'			SCFunction.NewCppWrapper
	+'helper'				SCFunction.NewHelper
	+'macro'				SCFunction.NewMacro
	+'insertion'			SCThe.NewInsertion
	+'conf'					compiler.WrongConf
	+'crash'				{app.crash(node.firstname)}
	+'module'				SCModule.NeuModule
	+'static'				{error (node, "static is called 'module' in speedie.")}
	+'selector'				SCSelector.neu
	+'class'				SCClass.neuClass
	+'task'					sctasks.NewTask
	+'role'					SCClass.neuRole
	+'export_api'			SC_API.NewExportAPI
	+'model'				SCGame3D.NeuModel
	+'prototype'			SCFunction.NewProtoType
	+'render'				SCFunction.NewRender
	+'import'				(scimport.DoImport)
	+'shell_args'			InbuiltShellArgs.collect
	+'syntax'				SCClass.LoadSyntax
	+'linkage'				CppRefs.Linkage
	+'struct'				SCClass.newstruct
	+'datatype'				SCClass.NewDataType
	+'extend'				SCClass.StoreExtend
	+'extend_module'		SCClass.StoreExtendModule
	+'extends'				{ error (node, "I think you mean 'extend'"), return compiler.program }
	+'main'					SCFunction.NeuMain
	+'library'				SCFunction.NeuLibrary
	+'ignore'				(DontRemove)
	+'cpp_part'				(SCNode.LoadCppPart)
	+'constants'			(SCModule.ConstantCollector)
	+'flags'				(SCModule.ConstantCollector)
	


dispatch ClsCollectTable (CollectFunc)
	+'constructor'			SCFunction.NewConstructor		// ??
	+'destructor'			SCFunction.NewDestructor		// ??
	+'render'				SCFunction.NewRender			// ??
	+'function'				SCFunction.NewFunc
	+'extend_function'		SCFunction.NewFunc // user shouldn't write these
	+'setter'				SCFunction.NewHider
	+'api'					SCFunction.NewFunc
	+'macro'				SCFunction.NewMacro
	+'helper'				SCFunction.NewHelper
	+'behaviour'			SCBehaviour.NewActual
	+'actual'				SCBehaviour.NewActual
	+'virtual'				SCBehaviour.NewVirtual
	+'iterator'				SCIterator.NeuIter
	+'syx'					SCFunction.NeuSyx			   // jeebox specific
	+'cpp_wrapper'			SCFunction.NewCppWrapper
	+'cpp_libwrapper'		SCFunction.NewCppWrapper
	+'prototype'			SCFunction.NewProtoType
	+'syntax'				SCClass.LoadSyntax
	+'operator'				SCClass.LoadSyntax
	+'processas'			SCClass.ProcessAs
	+'cpp_refs'				cpprefs.ReadIntoCppRefs
	+'linkage'				CppRefs.Linkage
	+'description'
		if name_space isa scbetternode
			name_space.ReadDescription(node)

	+'class'				SCClass.NewInnerClass
	+'role'					SCClass.NewInnerClass
	+'task'					sctasks.NewTask

	+'initafter'			(SCModule.DoInitAfter)
	+'ignore'				(DontRemove)
	+'saveas'				(DontRemove)
	+'cpp_part'				(DontRemove)
	+'cpp_class'			(DontRemove)
	+'cpp_name'				(DontRemove)
	+'contains'				(DontRemove)
	+'default'				(SCClass.GetDefault)
	+'false'				(SCClass.GetFalse)
	+'size'					(SCClass.SetSize)
	+'module'				(DontRemove)
	+'constants'			(SCModule.ConstantCollector)
	+'flags'				(SCModule.ConstantCollector)



datatype SCNodeInfo (byte)
	Flags
		ExplicitExport
		Visible
		AllowLinkedLists
		InBuilt
		


datatype SCNodeFindMode (int)
	flags
		|SCNodeFindMode|
		NoErrors
		DontGoUp
		WantAType
		ForClass
	syntax is (|SCNodeFindMode| m, |bool|)
		return self & m

