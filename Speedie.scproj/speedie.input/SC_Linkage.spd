


module Linkage
	|| OSXFrameworks = message()
	|| Flagz = message()		// for the linker i guess...
	
	syntax access (|string| name, |bool|)
		return linkage.GetFlag(name).yes
	
	function Interpreter (|bool|)
		return self["interpreter"]
	
	function VM (|bool|)
		return self["vm"]
	
	function CombineFlags (|string| name,, |string|)
		|| fs = faststring()
		.getflag(name, fs)
		return fs
	
	function GetFlag (|string| name, |faststring| fs=nil, |string|)
		opt norefcounts
		for ch in .Flagz
			if ch ~= name
				if !fs
					return ch.firstname
				|| str = ch.firstname
					if fs.length
						fs <~ ' '
					fs <~ str


	function message.ConfTake (|message| dest, |string| name)
		opt norefcounts
		|| F = self[name]
			dest.takeallfrom(F)
			F.parent!.remove


	function CompilerCollect (|message| s)
		opt norefcounts
		Linkage.LinkCollect(s, Compiler.Program, nil)
		options.MakeInterpreter = linkage.interpreter
		s.remove
	

	function LinkCollect (CollectFunc)
		opt norefcounts
		expect  (name_space == Compiler.Program)  (node, "This must be at root.")
		|| arg = node[@arg]
			arg.ConfTake(.Flagz, "flags")
			arg.ConfTake(.osxframeworks, "frameworks")
			for ch in arg
				error (ch)
			return Compiler.program

		error (ErrPlace, `Supposed to be like: linkage { osx = "linker flags", win = "linker flags2" }` )




module InbuiltShellArgs
	function Collect (CollectFunc)
		expect  (name_space == Compiler.Program)  (node, "This must be at root.")

		|| ShellArgs = node[@list].listall
		feedback.ParseArgsSub(shellargs)
		
		return Compiler.program


