


module Linkage
	|| OSXFrameworks = message()
	|| Flagz = message()		// for the linker i guess...
	
	function Interpreter (|bool|)
		return linkage["interpreter"].yes
	
	syntax access (|string| name, |string|)
		|| fs = faststring()
		for ch in .Flagz
			if ch ~= name
				|| str = ch.firstname
					if fs.length
						fs <~ ' '
					fs <~ str
		return fs


	function message.ConfTake (|message| dest, |string| name)
		opt norefcounts
		|| F = self[name]
			dest.takeallfrom(F)
			F.parent!.remove

	
	function LinkerSub (CollectFunc) // linkagesub
		opt norefcounts
		|| arg = node[@arg]
			arg.ConfTake(.Flagz, "flags")
			arg.ConfTake(.osxframeworks, "frameworks")
			for ch in arg
				error (ch)
			return Compiler.program
			
				
		
	function Collect (CollectFunc)
		expect  (name_space == Compiler.Program)  (node, "This must be at root.")

		return LinkerSub(node, name_space, ErrPlace)		#expect (ErrPlace, `Supposed to be like: linkage { osx = "linker flags", win = "linker flags2" }` )




module InbuiltShellArgs
	function Collect (CollectFunc)
		expect  (name_space == Compiler.Program)  (node, "This must be at root.")

		|| ShellArgs = node[@list].listall
		feedback.ParseArgsSub(shellargs)
		
		return Compiler.program


