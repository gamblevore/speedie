
/*
	Speedie Internals. By Theodore H. Smith...
*/


module SC_Errors
	linkage
		cpp_part Errors
	
//	function Color (|string| Col)
//		if Pipe.ErrorIsTerminal
//			PrintError( Col )
	
/*	
0: reset colors/style
1: bold
4: underline
30 - 37: black, red, green, yellow, blue, magenta, cyan, and white text
40 - 47: black, red, green, yellow, blue, magenta, cyan, and white background
*/	

	|dictionary of error| IgnoredBranches = dictionary.new

	function AlreadyIgnored (|Message| F, |scfunction| fn, |error|)
		opt norefcounts
		|| e = .IgnoredBranches.obj(F)
			return e
		|| RipRoot = fn.SourceArg
		for Curr.up in F
			if (Curr == @arg)
				|| e2 = .IgnoredBranches.obj(Curr)
					return e2
			require (Curr != RipRoot)

	
	function CanKeep (|Error| Err, |bool|)
		opt norefcounts
		if Err is dontstrip
			return true
		if (!Err.node or Err.iswarning)
			return true // why not
		
		|| A = Err.node
			ifn a.obj isa scfunction // keep otherwise
				a = a.Ancestor(@arg)
		if a
			|| Fn = A.MsgOwningFunc
				|| OldErr = .AlreadyIgnored(A, fn)
				if olderr and OldErr.Severity >= err.Severity
					return false
				.IgnoredBranches.obj(A) = err
		return true

 
function errorreceiver.PrePrintErrors 
	for err in .errors
		err.improve
	if !options.KeepAllErrors
		for err in .errors
			if !SC_Errors.CanKeep(err)
				err.remove


function Compiler.PrintErrors (|errorseverity| MinSev)
	stderr.BlockErrors = true
	|| s = .RenderErrors(stderr, minsev)
	stderr.BlockErrors = false
	if options.perryoutput == 2
		s = s.digest
	if stderr.errorcount
		printerror s
	  else
		print s


function Compiler.RenderErrors (|errorreceiver| stderr, |errorseverity| MinSev, |string|) // render_errors
	|| Printable = stderr.problemcount+stderr.errorcount 
	if (Printable and minsev < errorseverity.problem)
		minsev = errorseverity.problem
	
	|| Count = 0
	|| msg = faststring()
	for (err in stderr)
		if err.severity >= MinSev
			Count++
			err.scrender(msg)
	
	if !count
		|| problems = 0
		for (err in stderr)
			if (err.severity == errorseverity.problem)
				if ++problems <= 10
					err.scrender(msg)
	  elseif !options.perryoutput
		msg.problemsfound(count)
	
	return msg


//function Message.FileLocation (|string|)
//	opt norefcounts
//	return .file$.path


function Error.Improve					// sc_improve 
	opt norefcounts
	|| node = FindBytePos( .node )		#require
	
	if !.HasPosition
		.position = node.position

	if !.path
		|| SC = node.File$
		if SC != .node.file
			.node = node // wrong file!!
		if sc.exists
			.path = sc.path


function FindBytePosSub (|Message?| Node, |Message?|)
	opt norefcounts
	if !node or node.HasPosition
		Return node

	// OK so now let's go inside...
	for m.flat in node
		if m.HasPosition
			Return m


function FindBytePos (|Message?| Node, |Message?|)
	|| first = FindBytePosSub( node )
		return first
	|| msg = FindBytePosSub( node.parent )
		Return msg

	// Last try...
	|| fn = node.MsgOwningFunc
		return FindBytePosSub( fn.Source )



extend Error
	function SCGrabLine (|faststring| fs, |bool| Usecolor)
		if Usecolor
			fs <~ ErrorColors.Normal

		|| d = .SCOriginalData	#require
		require .HasPosition

		|| Start  = d.find( jeebox.csline, .Position, 0	) + 1
		|| Finish = d.find( jeebox.csline, .Position... )
		if (Finish == -1)
			Finish = D.Length + 1
		
		|| Line = d[Start, Finish]
		Line = Line.ReplaceAll("\t", " ")
		fs <~ Line
		// mark where in the line the error occurs?

		|| Spaces = (.Position - Start)
		fs <~ '\n'
		if Usecolor
			fs <~ ErrorColors.Underline
		fs <~ (' ', spaces min 100) // it happened once, due to bugs. Another bug could cause this to be off and ruin things.
		fs <~ '^'


	function SCOriginalData (|string|)
		|| p = .SCOriginalpath
			|| f = p.file
			if f.exists and !f.isdir
				return f.readall
		return .originaldata


	function SCOriginalPath (|string|)
		|string| str = .node.file
		str ?= .path
		return str


	function SCLineCount (|int|)
		|| f = .SCOriginalData	#require
		return .LinePos( f )
	
	
	function SCLineIdentifiers (|faststring| fs, |string| Data)
		if (!.HasPosition)
			|| fn = .node.MsgOwningFunc #require // fallback...
			fs <~ fn.ExportName
		  else
			fs <~ (.SCLineCount	 #require)
			fs <~ ":"

			|| Start = Data.find( jeebox.csline, .Position, 0 )
			fs <~ .Position - Start
			fs <~ ":"


	render Render_Unix
// <path>:<line number>:<bytedownline>: error/warning: <message>
///.../Speedie.scproj/BuildTest/JB.cpp:2679:10: error: conflicting types for 'JB__Comp_InputFile'

		if options.color: fs <~ errorcolors.Bold
		
		|| node = .node
		|| data = .SCOriginalData
			|| p = .SCOriginalPath ?? "(string)"
			fs <~ p
			fs <~ ':'
			.SCLineIdentifiers(fs, data)
			
		  elseif node
			node.render(fs)
			|| fn = node.msgowningfunc // could be an error in a variable outside of a func! (module/global)
				fs <~ " in:\n"
				fn.render(fs)
		
		fs <~ ' '
		if options.color
			if (.iswarning)
				fs <~ errorcolors.warn
			  else
				fs <~ errorcolors.Error
		
		if .severity is problem
			fs <~ "warning" // "problem" isnt a valid unix thingy
		  else
			.severity.render(Fs)
		fs <~ ": "
		if options.color: fs <~ errorcolors.Bold
		fs <~ .name
		fs <~ '\n'

					// fs.whoops
					//   ^
		.SCGrabLine(fs, options.color)
		fs <~ '\n'

		if options.color: fs <~ errorcolors.Normal
		

		
	render SCRender
		// probably not needed, but whatever leave it for now.
		.path ?= .SCOriginalPath
		.path ?= "(string)"
		if options.perryoutput
			.render(fs)
		  else
			.render_unix(fs)



|| ErrorDelayer = ErrorReceiver()

