
/*
	Jeebox internals. By Theodore H. Smith...
*/



module ExternalCompiler { // cppcomp, external_compiler, extcomp
linkage:cpp_part Ext
|[File]|		FoundObjects
|[File]|		Cleanup
|int| 			CompilingLibFiles


////////////////////////////////////////////////////////////////////////////////


function TmpBase (|string| V, |string|)
	opt norefcounts
	|| s = ("/tmp/Speedie/", "/tmp/Speedie64/")(options.is32bit)
	return s + V


function TmpOut (|string| V, |string|)
	return .TmpBase("out" + V + ".txt")


function TmpErr (|string| V, |string|)
	return .TmpBase("err" + V + ".txt")


function BackupPath (|string|)
	return Compiler.Projects.child("Terminal/Backup")


function ProductName (|string|)
	return compiler.projectname + Compiler.VariantSuffix

function ProductSuffix (|String|)
	require Options.ProjectIsLibrary
	Target OSX
		return ".dylib"
	target Win
		return ".lib"
	return ".so"
	

function ProductPath (|String|)
	if options.output_path
		return options.output_path
	
	if options.scripting
		return compiler.originalinputpath.scriptlocation
		
	|| prod = .productname + .ProductSuffix
	if Options.SelfReplacement
		return Compiler.Projects.child("Terminal/"+prod)
	return Compiler.BuildFolder.path[ prod ]


function CppLib (|File|)
	return Compiler.Projects.filech("Library/CppLib")


function LibSuff (|string|)
	if options.ProjectIsMiniLib
		return "Mini"
	return ""

function ProjTmpPath (|string|)
	return .tmpbase(.ProductName)

function LibTmpPath (|string|)
	return .tmpbase("Lib") + .LibSuff

function LogName (|string|)
	return .ProjTmpPath.child("build.txt")



////////////////////////////////////////////////////////////////////////////////



function AllowedThisFile (|string| name, |bool|)
	if !options.ProjectIsMiniLib
		return true
	if name ~= "JB_File.cpp" or "JB_OSX.m" or "JB_PNG.cpp" or "JB_VM.cpp" or "JB_DirReaderWin32.cpp" or "JB_DirReaderUnix.cpp" or "JB_Child.cpp"
		return false
	return true

function CanCompile ( |string| name, |bool| )
	return name.ext.isclike and .AllowedThisFile(name)


function string.isCLike (|bool|)
	return (self ~= "cpp" or "m" or "mm") // mm gets wierd errors that cpp doesnt?


function NoGoodObject ( |string| Cpp, |File| h, |File| o, |int| )
	if (h.exists) and (h IsNewerThan o):	return 4 // most important
	ifn o.exists:							return 1
	if Cpp.file IsNewerThan o
		return 2

 
function NeedNewObjForSrc ( |string| cpp, |file| objects, |int| )
	|| aslib = options.makelib or options.projectislibrary
	require ! (aslib and (cpp contains "/JB_Main.")) // .o and .cpp
	require ! (!asm.needed and (cpp contains "/JB_VM."))  
	require ! (!(targets..gui or linkage.interpreter) and cpp contains "/JB_OSX.")  // should be "JB_Native.o"

	|| name		= cpp.name
	|| Prefix	= name.trimextandpath
	|| h		= cpp.Sibling(Prefix + ".h").file
	|| o		= Objects[Prefix + ".o"]
	.FoundObjects <~ o

	return .NoGoodObject(Cpp, h, o)



function FilterCppsIfAlreadyDone (|[string]| Cpps,  |File| Objects,  |&int| stdafx,  |[File]|)
	|| wierd = cpp_export.CppProduct
	for Cpp in Cpps
		|| reason = .NeedNewObjForSrc(cpp, objects) 
			rz <~ Cpp.File
			if (reason == 4) and stdafx
				*stdafx = 1


function CollectCppsInto ( |File| Fol,  |File| Objects, |&int| stdafx, |[File]| )
	|[string]| Cpps
	for name in Fol
		if .CanCompile(name)
			Cpps <~ Fol.path.child( name )

	return .FilterCppsIfAlreadyDone(Cpps, Objects, stdafx)

	
 
function Clean (|bool|)
	"/tmp/Speedie64".file.deleteall
	"/tmp/SpeedieApps".file.deleteall
	return stderr.ok


function MacBothArch (|[string]| r)
	r.appendwords( "-arch x86_64 -arch arm64 -mmacosx-version-min=11.0" )


function CreateCompileString (|[File]| CppList,  |string| Product,  |string| Type, |[string]|)
	rz.AppendWords( Product )

	|| cmode = "-std=gnu++17  -stdlib=libc++"
	if Type == "m" or "o" or "mm"
		if type == "mm"
			cmode += " -x objective-c++ "
		  else
			cmode = ""
		cmode += "-fobjc-arc  -fobjc-link-runtime"
	
	rz.AppendWords( ("-m32", "-m64")(options.Is32Bit) )
	
	rz.appendwords("-L/usr/local/speedie/Library")
	rz.appendwords("-L/usr/local/lib/")
	rz.appendwords("-I /usr/local/include")
	if platform.osx // OSX likes playing hide and seek
		rz.appendwords("-F/Library/Frameworks  -framework Cocoa  ")
		if targets..gui or linkage.interpreter
			rz.appendwords("-rpath @executable_path/../Frameworks")
		rz.appendwords("-rpath ~/Library/Frameworks  -rpath /usr/local/speedie/Library  -rpath /Library/Frameworks")
		
	rz.AppendWords( "-w  -Wno-return-type-c-linkage -lc++")
	rz.AppendWords( "-finput-charset=UTF-8 -fextended-identifiers" )
	rz.AppendWords( cmode )
	rz.AppendWords( " -fno-strict-aliasing  -fvisibility=hidden  -fvisibility-inlines-hidden" )
	rz.AppendWords( Linkage[Platform.name] )
	
	// Gaming64Bit
	rz.AppendWords("-ffast-math")

// not sure how you specify that these only apply to x86???
// clang seems too stupid to understand, anyhow... and refuses to compile :(
// (only when compiling for both arm64 and x86... )
// how to do a fat-compile with all the fastest version on both cpus?
// just be slow for now i guess?
// we need some way to specify core2 at least... + all the extensions
	
	if platform.OSX
		if .CompilingLibFiles
			.MacBothArch(rz)
		  elseif (options.arch ~= "intel") // and these files aren't lib files?
			if options.optimise >= 3 // sigh
				rz.AppendWords( " -march=core2  -mfpmath=sse  -mmmx  -msse  -msse2  -msse4.1  -msse4.2 " )
			// fallback?
		  else
			.MacBothArch(rz)
	
	// stripping
	rz.appendwords( "-fdata-sections -ffunction-sections")
	
	|| opt = options.optimise
	|| aslib = options.makelib or options.projectislibrary
		rz.appendwords( "-dynamiclib -fPIC")
		opt = 3
	if options.selfreplacement or aslib
		rz.appendwords( "-g")
	if (opt < 0)
		rz.AppendWords( " -O0  " )
	  elseif (opt >= 1)
		rz.AppendWords( " -Os " )
		if options.arch ~= "intel"
			rz.AppendWords( "-mtune=native" )
		if (opt >= 2)
			rz.AppendWords( " -flto " )


	// Headers
	|| cppl = .CppLib
	if options.ProjectIsMiniLib
		rz.appendwords( "-D AS_LIBRARY=1" )
	rz.AppendWords( "   -D TARGET_UNIX=1 -D __SPEEDIE__=1  -I $cppl  -I ${Compiler.BuildFolder} -I ${compiler.generatedcppsfolder}  " )

	|| NoASM = !asm.needed
	|| GotAny = false
	for f in CppList
		if f isa Type
			rz <~ f
			Gotany = true
	
	if !GotAny				// Disabled
		rz.clear
	


function ExecuteGCC (|[string]| Commands, |bool|)
	return "/usr/bin/g++".SilentExecute(Commands, nil) #expect ("C++ compiler failed to compile source code.")


function CollectAndCompile (|File| Input, |String| Output, |bool|)
	|| TmpFol = Output.MakeAndGoInto
	|| Cpps = .CollectCppsInto( Input, TmpFol, nil )
	return .ExtCompile( Cpps, " -c ", "cpp" )  and  .extCompile( Cpps, " -c ", "m" )  and  .extCompile( Cpps, " -c ", "mm" )


function UseAndCompile (|[string]| Input, |String| Output, |bool|)
	// not sure why this is different... I think it's for external C files?
	// can't remove it until i can test them.
	
	|| TmpFol = Output.MakeAndGoInto
	|| Cpps = .FilterCppsIfAlreadyDone( Input, TmpFol, nil )
	return .extCompile( Cpps, " -c ", "cpp" )  and  .extCompile( Cpps, " -c ", "m" )  and  .extCompile( Cpps, " -c ", "mm" )


function ClearThis
	if StdErr.ok
		for F in .Cleanup
			F.DeleteAll

	.Cleanup.Clear
	.FoundObjects.Clear


function IsCompilerAndNeedsInstall (|bool|)
	require (Options.SelfReplacement == kSelfReplace)
	require (StdErr.OK and !Compiler.IsTest)
	require (.TestNewCompiler and .BackupCompiler)
	return true


function ExtComp 
	require .ShouldExtComp
	if options.products
		if options.pack
			Flatten.BuildPack
		if options.native
			.RunCppCompile
			if .IsCompilerAndNeedsInstall
				.InstallCompiler
	.ClearThis
	if stderr.ok
		compiler.Package


function RunCppCompile
	require (StdErr.OK)

	if !options.silent
		"\nCompiling c++ to: \"${.ProductPath}\"\n"
	
	.CompilingLibFiles++
	.CollectAndCompile(	.CppLib,						.LibTmpPath )$
	.CompilingLibFiles--
	
	.CollectAndCompile(	Compiler.GeneratedCppsFolder,	.ProjTmpPath )$
	.UseAndCompile(		Cpp_Export.Cpp_input,			.ProjTmpPath        )$
	.ExtCompile(		.FoundObjects,			"-o " + .ProductPath,	"o" )$
		

function MakeLib
	|| n = .productpath.sibling("libspeedie.dylib")
	if !options.silent
		"Lib at: $n"
	
	.CompilingLibFiles++
	.ExtCompile(		.FoundObjects,			"-o " + n,	"o" )
	.CompilingLibFiles--
	


function LinkOK (|file| p, |file|) // or just not a link
	require p.exists
	|| lto = p.linksto
	if !lto
		return p

	|| tof = lto.resolve(true).file
	if tof.exists and !tof.linksto // not bad
		return tof

	tof.delete


function ShouldExtComp (|bool|)
	if options.Scripting
		return true // if were here... its cos the scripting code wants it
	require !options.final and Options.Compile  

	if options.ForceRecompile
		return true

	|| p = .linkOK(.ProductPath.file)
	if   !p   or   p.modified < scimport.recent
		return true
	printline p.path + " already up to date"



function ExtCompile (|[File]| Files, |String| Dest, |string| Type, |bool|)
	if !Files
		return true // awesome
	
	|| CompileString = .CreateCompileString( Files, Dest, Type )
	if !CompileString
		return true

	if Options.PrintCompileString
		print	 "\nclang "
		printline Join2(CompileString, " ")
	
	app.sleep(0.125s)
	return .ExecuteGCC( CompileString )


function saytest (|int| n)
	"\n()   Test$n   ()"


function TestNewCompiler (|bool|) // self_test, selftest, testself, test_self, testcompiler
	|| S = .ProductPath
	|| Test1 = S.File
	|| Test2 = "${S}2".File
	|| Test3 = "${S}3".File

	|| Cpp1 = Cpp_Export.CppProduct
	|| Cpp2 = Cpp1.Path.ReplacePathComponent(-2, "BuildTest2").File
	|| Cpp3 = Cpp1.Path.ReplacePathComponent(-2, "BuildTest3").File

	.Cleanup <~ Test2
	.Cleanup <~ Test3
	.Cleanup <~ Cpp3.Parent
	
// OldSpeedie has compiled SpeedyTest, at Test1. It is different.
	.saytest(1)
	require Test1.TestSpeedie("2")


// Test1 has been run. It created Test2. Test2 is different than Test1, because Test1 had a chance to optimise itself.

	.saytest(2)
	require Test2.TestSpeedie("3")


// Test2 creates Test3 in .cpp form only, for speed. The outputs SHOULD match.
	.saytest(3)
	printline
	
	require cpp2.mustexist and cpp3.mustexist
	expect (Cpp2.matchFile(Cpp3)) "$Cpp2 doesn't match $Cpp3!"

	return Test2.TestBatch and stderr.OK


	
function ReplaceOld (|file| input, |File| Backs)
	|file| oldest
	|| score = 0
	for f.files in Backs
		|| name = f.name
		if (name endswith "speedie") and (name[0].isletter)
			|| s = f.modified.ago.days
			if s > score
				score = s
				oldest = f
	
	if oldest != nil
		input.copyall(oldest)


function MakeDailyProductPath (|File| B, |string|)
	|| D = Date.Now.DayOfWeek
	|byte| x = 'A' + D
	return B.Path.child( D.Render+"_Speedie" )


function BackupCompiler (|bool|)
	|| Product = .ProductPath.file
	|| B = .BackupPath.File
	B.MakeEntirePath

	|| backup1 = B["LatestBackup"] 
	if backup1.matchFile( Product)
		return true

	.ReplaceOld( product, b )
	Product.CopyFileTo( backup1 )

	|| DailyProduct = .MakeDailyProductPath( B )
	|| path = DailyProduct.TrimExtAndPath
	Product.CopyFileTo( DailyProduct )
	Cpp_Export.CppProduct.Copyall( path + ".cpp" )
	Cpp_Export.HProduct.Copyall( path + ".h" )

	return stderr.ok


function InstallCompiler
	"Installing Speedie: $__time_id__"

	.ProductPath.File.MoveTo( Compiler.Projects.child("Terminal/Speedie") )

	|| CppTest = Cpp_Export.CppProduct
	|| HTest = Cpp_Export.HProduct
	|| Cpp0 = CppTest.Path.ReplacePathComponent(-2, "Build").file
	|| H0 = HTest.Path.ReplacePathComponent(-2, "Build").file
	Cpp0.Parent.MakeDir
	ifn CppTest.matchFile( Cpp0)
		CppTest.Copyto(Cpp0)
	ifn HTest.matchFile( H0)
		HTest.Copyto(H0)
	
	if options.Makelib
		.MakeLib
}


function String.LastLine (|string|)
	return .AfterByte('\n')


function file.TestBatch (|bool|)
	|| batch = compiler.BaseProjectPath["Batch"]
	print "Tested: " 
	|| sep = ""
	for c.files in batch
		if c.visible and c isa "spd"
			print sep
			sep = ", "
			print c.Name
			.SilentExecute([c, "--nocompile"])
	printline
	for c.files in batch
		if c isa "cpp" or "h"
			printline "This file should really not be here: " + c
			debugger
	return stderr.ok
	// we want to test each file... how? we need to call the new speedie!
	// so we need a folder to test...


function File.TestSpeedie (|string| Variant, |bool|) {
	require (.mustexist)
	expect !(.path contains " ") ("Path: ${.path} contains a space! :(")

// Create and call command
	variant = "--variant=" + variant
	|| cmd_args = ["--self",  "--nocolor",  Variant]
	if Variant == "3"
		cmd_args <~ "--final"
	if options.PrintCompileString
		cmd_args <~ "--noisy"
	if Options.arch
		cmd_args <~ "--arch="+options.arch

	|| result = faststring()
	.path.execute(cmd_args, result)
	printline Result

// Read output
	print			externalCompiler.TmpOut(Variant).ReadFile
	|| test_err =	externalCompiler.TmpErr(Variant).ReadFile
		error test_err // is this even used anymore?

	return StdErr.OK
}

	
function array.AddCStr (|string| s)
	opt norefcounts
	if s
		self <~ s.cstr

function Array.AppendWords (|string| R)
	for S in R / ' '
		.AddCStr(s)


function string.MakeAndGoInto (|File|)
	rz = .File
	rz.MakeEntirePath
	app.cwd = self


