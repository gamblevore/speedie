


datatype BranchState (byte)
	constants
		|BranchState|
		Always		= 2
		Never		= 1
		Perhaps		= 3

	function Not (|BranchState|)
		if self == never
			return always
		if self == Always
			return never
		return self
	syntax is (|branchstate| b, |bool|)
		return self == b


datatype NilState (byte) // Exec.scproj needs this here
	constants
		|nilstate|
		Failed		= 0
		Nilish		= 1	
		Realish		= 2 
		Either		= 3
		Stated		= 4
		ActuallyNil = Nilish  + Stated				// nil|message|.position
		Optional    = Either  + Stated				// || x = array[1000]
		Real		= Realish + Stated				// || x = message(),  x.position
	
	
//	function Always (|branchstate| Y, |branchstate|)
//		if (self is either) or (y is perhaps)
//			return branchstate.Perhaps
//		if (self is real) == Y
//			return branchstate.Always
//		return branchstate.Never
			
	syntax is (|nilstate| type, |bool|)
		return (self & type) == type
	syntax isnt (|nilstate| type, |bool|)
		return !.SyntaxIs(type)


struct ASMVarType
	contains object
	|int|					Contains // also a class
	|int|					ClassNum
	|int|					C_Array
	|byte|					PointerCount
	|NilState|				Expected
	|NilState|				Found

// OK, so we wanna export this and import it.
// can we make this all numbers? no pointers.
// I could make a type-tree system...
// so each type is based on another type.
// |DataTypeCode|  			TypeInfo // belongs on the class
