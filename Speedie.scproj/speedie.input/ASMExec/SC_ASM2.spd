


// we are gonna use IR to store the ASM... opt it after.

struct IR // µfunc uses this
	|byte|			Op
	|byte|			Label // 255 labels per function
	|byte[2]|		Nothing
	|byte[4]|		r
	|int|			Rest
	|uint|			Debug
	
	operator isa (|int| m, |bool|)
		return m == .op
		
	setter debug (|message|)
		|| FilePos  = value.position & MsgDebugPosShift.bits
		|| FileInfo = value.tag << MsgDebugPosShift
		.debug = FileInfo (|) FilePos
	
	function File (|scfile|)
		return scimport.allfiles[.debug>>MsgDebugPosShift]
	
	function FilePos (|ind|)
		return .debug & MsgDebugPosShift.bits
	
	function fs (|FastString| fs)
		opt norefcounts
		debugger
		|| op = instruction.typelist[.op]
		fs <~ op.name
		fs <~ ':'
		fs <~ (' ', 5-op.name.length)
		|| GotAny = ""
		|| remain = 25
		|| f = op.sizes
		for i in 5
			|| bs = f[i].bitsize
			if remain > 0 and bs
				fs <~ gotany
				gotany = ", "
				if f[i].isreg
					fs <~ 'r'
				if i >= 4
					fs <~ .rest
				  else
					fs <~ .r[i]
				remain += bs

	function Print
		if asm.NoisyASM >= 3
			printline .render
	
	render
		.fs(fs)

 
 
class µFunc1 (memory)
	linkage
		cpp_class ASMFunc2
		cpp_part ASMFunc2
	contains ASM

	function Visible
		visible // needed to compile strangely...
	
	function Run (|&int64| Args = nil, |int| ArgCount=nil, |int64|)
		cpp_part RunArgs
		if args
			|| vm	= jb_vm.vm
			|| r	= vm.ClearRegisters(argcount)
			for i in argcount
				r[i] = args[i] 
		
		return jb_vm.Run(.ptr, .length)

