
/*
	Jeebox internals. By Theodore H. Smith...
*/



class SCModule (SCBetterNode) {
linkage
	cpp_part		Mod

|int|						ModuleNum
|SCClass?|					Cls
|Message?|					InitVarsArg
|Message?|					InitCodeArg
|string|					CppPart
|CppRefs|					DefaultRefs
|message?|					InitAfter
|string|					SubsFrom
|bool|						Grabbed
|bool|						IsImport
|bool|						Inited
|bool|						IsRequiredInterface


constructor
	.defaultrefs = cpprefs.new
	|| c = compiler.modulelist
	if (c? != nil)
		compiler.modulelist <~ self


render
	|| c = .cls
		fs <~ "module of "
		c.render(fs)
	  else
		super.render(fs)


function SuperMod (|scmodule|)
	opt norefcounts
	|| c = .cls
		|| s = c.Super
			return s.modul


function IsProperModule (|bool|)
// not "main" or any other auto-generated module that doesn't properly have a "module name {" thing going on...
	require .parent
	if (.parent == compiler.program) and (.source == nil)
		return false
	return true


function SCDecl.PrefixedName (|faststring| fs, |SCModule| M)
	opt norefcounts
	if self Is Const
		fs <~ "k"
	fs <~ .project.Mod.ExportName
	fs <~ "_"
	if m.CppPart
		fs <~ "_"
		fs <~ m.CppPart
		fs <~ "_"
	.name.unicodesafename(fs)
	.ExportName = fs


function GlobalsFix
	// Goes through our properties/constants and renames them!
	|| fs = faststring()
	for decl.vars in self
		if Decl
			decl.PrefixedName(fs, self)



iterator Vars
	|| d = .access.navigate
	while d.MoveNext
		yield d.ValueDecl


function DictionaryReader.ValueDecl (|scdecl|)
	opt norefcounts
	|| t = .value
	if t isa SCDecl
		if !t.IsLookupOnly
			return t


//function IsProject (|bool|)
//	opt norefcounts
//	return .Project.Mod? == self


function NewModuleFunc (|Message| src, |SCFunction|)
	rz = SCFunction.NewFunc( src, self, src )|SCFunction|
	if rz
		.TryAddBase( src, rz )


function BaseDecls 
	.Use
	CollectDeclsGlobals( .source, self ) // right?


function AddModuleToFunc (|SCNode| space)
	if !space["self"]
		space.TryAdd( space.FuncSrc, self, "self" )



function SafeName (|string|)
	opt norefcounts
	|| n = .name
		return n
	|| c = .cls
		return c.name


function LoadModule (|Message| node)
	node.obj = self
	|| NameMsg = node.first
	if !.cls
		namemsg.expect(@thg)

	|| arg = namemsg
	if namemsg == @thg
		.name = namemsg.name
		|| sub = namemsg.next
		arg = sub
		if (sub == @bra) // module sdlapp (app)
			.SubsFrom = sub[@thg]$.name
			arg = sub.next

	arg.expect(@arg)
	arg.expectlast$
	.Source = arg
	
	compiler.disammodules!.TryAdd(nil, self, .safename)
	.CollectFromNode( .source, SCNode.CurrVisibility )


function GetTheNewer (|SCObject|)
	opt norefcounts
	while self
		|| o2 = self["new"]
			return o2
		|| cls = .cls #require
		require cls.isrole
		self = .supermod



module
	|scmodule--|	Curr

	function SCNode.SpaceModule (|message| errplace = nil, |scmodule|)
		if (self isa scmodule)
			return self
		if (self isa scclass)
			return .modul
		error (errplace, "This should go into a module or class.")
	
		
	function scclass.LoadModuleForCls (|message| node, |scnode| P)
		|| M = .modul
		m.Project = SCImport.curr
		
//		|| x = array.byte
//		if p != compiler.program
//			"route: ${self.name} --> ${p.name} --> ${p.parent.name}"
		m.parent = p
		m.Cls = self
		m.name = .Name
		
		if node
			MoveFutureStaticsIn(node) // fix this? Current this makes impossible to extend a static section...
			m.LoadModule( node )
		  else
			m.source = .source
	
	
	function NeuModule (CollectFunc)
		|| m = SCModule.new
		m.Project = scimport.curr
		m.parent = name_space.ProjectFix
		if node
			m.LoadModule( node )
		Return m


	function NewContainer (|string| s, |scmodule|)
		// for storing arbitrary stuff in.
		rz = SCModule.new
		rz.name = s
		Compiler.program.TryAdd( nil, rz, s )

}
