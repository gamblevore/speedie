

struct FatASM 
	linkage
		cpp_part FAT
	|ASMReg| 			Info		// only needs 32-bits of this. Could we make a smaller asmreg?
	|message--| 		Msg
	|uint64| 			_Const
	|uint[7]|			R
	|uint|				ASMIndex	
	|uint16| 			BlockNum		// remove?
	|uint16| 			ParentBlock		// remove?
	|uint16|			RefCount
	|byte|				Op
	|byte|				JumpReg
	
	
	function BaseOp (|int|)
		rz = .op
		if rz < 32
			rz = rz & ~3
			if rz == (asm.FNCX-1) or (asm.FNC-1)
				rz++
	
	function Form (|µform|)
		|| i = instruction.typelist[.op]
			return i.Sizes
		debugger

	operator mul (|asmreg| info, |asmreg|)
		cpp_part AsReg
		
		info.FatIndex = .index
		.info = info
		return info
	
	function Const (|int64|)
		opt norefcounts
		return ._const
		
	function Const (assigns:|int64|)
		opt norefcounts
//		if value == 9218868437227405312
		._const = value

	function F32 (assigns:|float|)
		if !value: value = 0			// rationalise
		.const = value.AsInt

	function F64 (assigns:|Float64|)
		if !value: value = 0			// rationalise
		.const = value.AsInt
		
	function F32 (|float|)
		rz = ((&._const)|&float|)[]
		if !rz: rz = 0					// rationalise

	function F64 (|Float64|)
		rz = ((&._const)|&f64|)[]
		if !rz: rz = 0					// rationalise
		
	setter Debug (|message|)
		.msg = Value

	function has (|int| a, |int| b, |bool|)
		|| out = .out
		return out == a or b
	
	function Info (|asmreg|)
		nil safe
		return .info
	
	function Index (|uint|)
		opt inline
		return 1 + self - asmstate.sh.funcstart

	function uint.FAT (|&FATASM|)
		opt inline
		return asmstate.sh.funcstart + (self - 1)
	
	function FileNum (|int|)
		return .msg.filenum & 0x4095
	
	function BytePos (|int|)
		return .msg.position
		
	operator isa (|int| m, |bool|)
		nil checker
		if self
			return m == .op
	
	syntax is (|asmreg| flags, |bool|)
		if self
			return (.info & flags)|uint64| != 0

	syntax is (|asmreg| flags, assigns:|bool|)
		if value
			(.info as= flags)
		  else
			(.info asnt= flags)
		
	function optnop (|bool|)
		.op = asm.noop
		.JumpReg = 0
		return true
	function LinkedFrom (|fatasm| New)
		.refcount++

	function RegInput (|int| a, assigns:|asmreg| info, |int|)
		cpp_part Prm
		rz = info.reg
		.r[a] = rz
		|| Src = info.fat
			Src.LinkedFrom(self) // what?
		

	function Dest (|uint| a, |asmreg| info, |bool|)
		|| dest = info.reg
		.r[a] = dest
	
	
	function File (|string|)
		opt norefcounts
		|| s = scimport.allfiles[.filenum]
			return s
	
	Syntax Expect (|string| Error)
		|| err = Error(nil, error, ErrorSeverity.Error, .file)
		err.position = .BytePos
		target debug: asmstate.printprogress(nil)
		stderr <~ err

	function NumInput (|int| a, assigns:|int| v)
		.r[a] = v

	function JumpInput (|int| a, assigns:|int| v)
		.r[a] = v
		.jumpreg = a + 1
		
	function JumpTo (assigns:|&fatasm|)
		|| j = .jumpreg
			|| D = (value - self) - 1
			check (D != 0 and -1) (self, "bad jump")
			.r[j-1] = D
		  else
			debugger

	function out (|uint|): return .r[0]
//	function out (assigns:|uint|): .r[0] = value
	
	// easier to do maths ad figure stuff out if its expressed like abcd
	function a (|uint|): return .r[1]
	function a (assigns:|uint|): .r[1] = value
	function b (|uint|): return .r[2]
	function b (assigns:|uint|): .r[2] = value
	function c (|uint|): return .r[3]
	function c (assigns:|uint|): .r[3] = value
	function d (|uint|): return .r[4]
	function d (assigns:|uint|): .r[4] = value

	function Swap (|int| a, |int| b)
		swap (.r[a-1]) (.r[b-1])
	
	helper Step (|int| dir, |&FatASM|)
		real self
		|| b = .blocknum
		while
			self += dir
			if .op != asm.noop
				return (self, nil)(b == .BlockNum)
		
	function Prev (|&FatASM|)
		opt inline
		return .step(-1)
		
	function Next (|&FatASM|)
		opt inline
		return .step(1)

	function match3_2 (|int| reg, |bool|)
		// prefers the value to be at 3.
		if reg == .a
			.swap(2, 3)
			return true
		return reg == .b
	
	
	function CheckReg
		opt inline
		target debug
			if .r[0] == 0
				|| form = .form
					check (form.params[0] isnt output) (.msg, "Missing ASM output")
	
	function FillLabelRequest (|!&asm| Start, |!&asm| After, |int| reg)
		|| where = start+.ASMIndex
		target debug: debug_require  where >= start  and  where < after 
	
		|int| dest_fat = .r[reg]
		|| fat = self + dest_fat
		|| dest_asm = fat.asmindex
		|| dest = start + dest_asm

		target debug: debug_require dest >= start and dest <= after
		|| amount = dest - where
			.r[reg] = amount - 1
		  else // WHAT?
			error (self, "Invalid ASM generated (infinite loop)")
		.µrenderinto(where, where+1) // rerender
	
	
	function µRenderInto (|!&asm| Where, |!&asm| After, |!&asm|)
		opt inline
		return (ASM.encoders[.op]!)(self, where, after)

	
	function Renda (|FastString| fs)
		opt norefcounts
		|| M = fs.mark
		|| op = instruction.typelist[.baseop]!
		fs <~ op.name
		fs <~ ':'
		fs <~ (' ', 5-op.name.length)
		|| GotAny = ""
		|| Remain = 24
		|| f = op.sizes

		for i in f.count
			|| bs = f[i].BitSize
			if bs and (remain > 0)
				fs <~ GotAny
				GotAny = ", "
				if f[i].isreg
					fs <~ 'r'
				fs <~ .r[i]|int|
				remain += bs
			if .op == asm.knst
				exit
		if (op.OpCode == asm.knst or asm.knsr)
			.RendaKnst(fs, fs.mark-m)
	
	
	function RendaKnst (|faststring| fs, |int| sofar)
		|| ty = .info.µType
		fs <~ (' ', 26-sofar)
		fs <~ "/# "
		if ty.IsInt
			fs <~ .const|int64|
		  else
			|float64| num
			if ty.ByteCount == 4
				num = .F32
			  else
				num = .f64
			fs.AppendDouble(num, 9, true, true)
			if ty.ByteCount == 4
				fs <~ "f"
			  else
				fs <~ "d"
		fs <~ " #/"


	function DebugPrint 
		visible
		if asm.NoisyASM >= 3
			|| fs = faststring()
			.Renda(fs)
			printline fs

 
