

struct FatASM
	|uint[6]|		R	
	|byte|			Op
	|byte|			Label	// 255 labels per function
	|uint16| 		BlockNum
	|uint|			Location
	
	
	function FileNum (|int|)
		return .Location & 0x4095
	
	function BytePos (|int|)
		return .Location >> 12
		
	operator isa (|int| m, |bool|)
		nil checker
		if self
			return m == .op

	syntax is (|int| m, |bool|)
		nil checker
		if self
			return m == .op
			
	function a1 (|uint|): return .r[0]
	function a1 (assigns:|uint|): .r[0] = value
	function a2 (|uint|): return .r[1]
	function a2 (assigns:|uint|): .r[1] = value
	function a3 (|uint|): return .r[2]
	function a3 (assigns:|uint|): .r[2] = value
	function a4 (|uint|): return .r[3]
	function a4 (assigns:|uint|): .r[3] = value
	function a5 (|uint|): return .r[4]
	function a5 (assigns:|uint|): .r[4] = value
	function k2 (|int|): return .k(1)
	function k3 (|int|): return .k(2)

	function k (|int| i, |uint|)
		
	function Swap (|int| a, |int| b)
		|| t = .r[--a]
		.r[a] = .r[--b]
		.r[b] = t

	function Swap (|&FatASM| other, |bool|)
		|| s = self|&ivec4|
		|| o = other|&ivec4|
		for 2
			|| t = s[], s++[] = o[], o++[] = t // shame speedie doesn't have swap () finished...
		
	
	helper Step (|int| dir, |&FatASM|)
		real self
		|| b = .blocknum
		while
			self += dir
			if .op != asm.noop
				return (self, nil)(b == .BlockNum)
		
	function Prev (|&FatASM|)
		pragma inline
		return .step(-1)
		
	function Next (|&FatASM|)
		pragma inline
		return .step(1)

	function match3_2 (|int| reg, |bool|)
		// prefers the value to be at 3.
		if reg == .a2
			.swap(2,3)
			return true
		return reg == .a3
			
	
	function Renda (|FastString| fs)
		opt norefcounts
		|| op = instruction.typelist[.op]		#debug_require
		fs <~ op.name
		fs <~ ':'
		fs <~ (' ', 5-op.name.length)
		|| GotAny = ""
		|| Remain = 25
		|| f = op.sizes
		for i in f.count
			|| bs = f[i].bitsize
			if remain > 0 and bs
				fs <~ gotany
				gotany = ", "
				if f[i].isreg
					fs <~ 'r'
				fs <~ .r[i]
				remain += bs

	function Print
		visible
		if asm.NoisyASM >= 3
			|| fs = faststring()
			.Renda(fs)
			printline fs

 
 
role ÂµFunc1 (memory)
	linkage
		cpp_class ASMFunc2
		cpp_part  ASMFunc2
	contains ASM
	visible

	function Run (|&ivec4| Args = nil, |int| ArgCount=nil, |int64|)
		cpp_part RunArgs
		|| r = jb_vm.vm.Registers(true)
		if args
			for i in argcount
				r[i] = args[i] 
		
		return jb_vm.Run(.ptr, .length)

