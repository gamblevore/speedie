

struct FatASM 
	linkage
		cpp_part FAT
		sort_properties true
	
	// phi-nodes can actually be don simply by linking one fat to the prev
	|byte|				InputFats
	|byte|				InputRegs
	|byte|				_Op
	|byte|				JumpReg
	|byte| 				Outputs
	|ASMReg| 			Info
	|message--| 		Msg
	|uint64| 			_Const
	|uint[6]|			R
	|uint16|			ASMIndex
	|uint16| 			BlockNum
	|int16|				µRefCount
	
	
	function Op (|byte|)
		return ._op
	
	setter SetOp (|byte| value)
		opt norefcounts
		.InputFats = 0
		._op = value
		.jumpreg = 0
		.outputs = 0
		// leave info, msg, and _const. Other things may need them still.
		for i in –count .r
			.r[i] = 0
		.asmindex = 0
		.blocknum = 0
		.µrefcount = 0
	
	function Out (|uint|)
		|| a = .Outputs|int|.LowestBit
			a = a.log2
			if a != 0 // asm.div?
			return .r[a]		
		
	function Input (|int| i, |&fatasm|)
		|| r = (.r[i] << 1) >> 16
			return r.fat
		
	function IsFunc (|bool|)
		|| b = .baseop
		return b == asm.fncx or asm.fnc
	
	function BaseOp (|int|)
		rz = .op
		if rz == asm.FNCX3
/			rz = asm.FNCX
		  elseif rz == asm.FNC3
/			rz = asm.FNC

	
	function Form (|µform|)
		|| i = instruction.typelist[.op]
			return i.Sizes
		debugger
		return instruction.typelist[0]!.Sizes


	operator mul (|asmreg| info, |asmreg|)
		cpp_part AsReg
		
		info.FatIndex = .index
		.info = info
		return info
	
	function Const (|int64|)
		opt norefcounts
		return ._const
		
	function Const (assigns:|int64|)
		opt norefcounts
		._const = value

//	function F32 (assigns:|float|)
//		if !value: value = 0			// rationalise
//		.const = value.AsInt
//
//	function F64 (assigns:|Float64|)
//		if !value: value = 0			// rationalise
//		.const = value.AsInt
		
	function F32 (|float|)
		rz = ((&._const)|&float|)[]
		if !rz: rz = 0					// rationalise

	function F64 (|Float64|)
		rz = ((&._const)|&f64|)[]
		if !rz: rz = 0					// rationalise
		
	setter Debug (|message|)
		.msg = Value
	
	function ResetFunctionCall (|int| reg, |bool|)
		// we will be the last instruction
		// so how can we reset this? I thinkonly by comparing the
		// state's vdecls. Temps will disappear.
		|| v = ASMState.sh.VDecls
		if v == reg and v == (.r0 - 1)
			.Outputs = v|int|.log2
			.r0 = v
			return true
		/0
		
	function ResetOutput (|int| reg, |bool|)
		if .IsFunc
			return .ResetFunctionCall(reg)
		
		|| o = .Outputs
		if (o&1) and .r[0]
			.r0 = reg
			return true
		if (o&2) and .r[1]
			.r1 = reg
			return true


	function SmartFatness (|int| reg, |maybebool|)
		opt norefcounts
		|| f = .form
		for i in f.Count
			if .Prm(i) == reg
				|| p = f.Params[i]
				if p.IsReg
					return (p is Output)|maybebool|

	syntax equals (|int| ID, |bool| aware, |bool|)
		(aware), return .id == ID
	
	function ID (|uint|)
		return self - asmstate.sh.start

	function Index (|uint|)
		opt inline
		return 1 + self - asmstate.sh.funcstart

	function uint.FAT (|&FATASM|)
		opt inline
		return asmstate.sh.funcstart + (self - 1)
	
	function FileNum (|int|)
		return .msg.filenum & 0x4095
	
	function BytePos (|int|)
		return .msg.position
	
	operator isa (|int| m, |bool|)
		nil checker
		if self
			return m == .op
	
	syntax is (|asmreg| flags, |bool|)
		if self
			return (.info & flags)|uint64| != 0

	syntax is (|asmreg| flags, assigns:|bool|)
		if value
			(.info as= flags)
		  else
			(.info asnt= flags)
			
	function asmreg.treg (|uint|)
		return .reg ||| ((self is Temp)<<31)

	function CopyFrom (|fatasm| D)
		(self)[0] = (d)[0]
		for i.FatInputs in self
			if i 
				i.µRefCount++
			
		
	function RegInput (|int| a, assigns:|asmreg| Input)
		cpp_part Prm
		opt inline
		
		|| i = input.FatIndex
		.r[a] = input.treg ||| (i << 15)
		.InputRegs |= 1<<a
		if i
			|| src = i.fat // we refcount dests too. shouldn't!
			.InputFats |= 1<<a
			src.µRefCount++
	
	
	function Dest (|uint| a, |asmreg| info)
		opt inline
		.r[a] = info.treg
		.Outputs |= a|int|.log2
	
	
	function File (|string|)
		opt norefcounts
		|| s = scimport.allfiles[.filenum]
			return s
	
	Syntax Expect (|string| Error)
		|| f = .file|file--|
		|| err = Error(nil, error, ErrorSeverity.Error, f)
		err.position = .BytePos
		nil|errorreceiver| <~ err
		.DebugPrint
	
	function NumInput (|int| a, assigns:|int| v)
		.r[a] = v

	function JumpInput (|int| a, assigns:|int| v)
		.r[a] = v
		.jumpreg = a + 1
		ASMState.sh.BasicBlock++
	
//	function Jump (|int|)
//		|| j = .jumpreg
//			return .r[j]

	function JumpTo (|&fatasm|)
		|| j = .jumpreg
			return self + 1 + .r[j-1]|int|
	
	
	function JumpTo (|&fatasm| value, |&asmstate| A)
		|| j = .jumpreg
			|| D = (value - self) - 1
			check (D != -1) (self, "bad jump")
			.r[j-1] = D
			if d == 0
				a.nop(self)
		  else
			j = .id
			debugger

	function r0 (|uint|): return .r[0]
	function r1 (|uint|): return .r[1]
	function r2 (|uint|): return .r[2]
	function r3 (|uint|): return .r[3]

	function r0 (assigns:|uint|): .r[0] = value
	function r1 (assigns:|uint|): .r[1] = value
	function r2 (assigns:|uint|): .r[2] = value
	function r3 (assigns:|uint|): .r[3] = value

	function r0 (assigns:|asmreg|): .r[0] = value.treg
	function r1 (assigns:|asmreg|): .r[1] = value.treg
	function r2 (assigns:|asmreg|): .r[2] = value.treg
	function r3 (assigns:|asmreg|): .r[3] = value.treg


//	function Swap (|int| a, |int| b)
//		swap (.r[a-1]) (.r[b-1])
// doesnt take fatinputs or other inputs into account anyhow
	
	helper Step (|int| dir, |&FatASM|)
		real self
		|| b = .blocknum
		while
			self += dir
			if .op != asm.noop
				return (self, nil)(b == .BlockNum)
		
	function Prev (|&FatASM|)
		opt inline
		return .step(-1)
		
	function Next (|&FatASM|)
		opt inline
		return .step(1)

	
	
	function Prm (|int| i, |int|)
		return .r[i] & ~(1<<31) // remove tmpbit.
		
	function CheckHasOutput 
		opt inline, opt norefcounts
		target debug
			// why not use .outputs?
			if !.Prm(0)
				|| P = .form.params[0]
				if  p is output//  and  p isnt optional 
					error (self, "Missing ASM output")
	
		
	function µRenderInto (|!&asm| Where, |!&asm| After, |!&asm|)
		opt inline
		return (ASM.encoders[.op]!)(self, where, after)

	
	function Renda (|FastString| fs, |bool| Simpler=false)
		opt norefcounts
		if (!.exists)  and  (.msg.func == @sheb)
			.RendaMsg(fs, 0)
			return 
		
		|| M = fs.mark
		|| op = instruction.typelist[.baseop]!
		|| NL = op.name.length
		if .baseop == asm.noop
			NL = -1
		  else
			fs <~ op.name
			fs <~ ':'
		fs <~ (' ', 5-op.name.length)
		|| GotAny = ""
		|| Remain = 24
		|| f = op.sizes
		/// 
		
		for i in f.count
			|| bs = f[i].BitSize
			if bs and (remain > 0)
				fs <~ GotAny
				GotAny = ", "
				|int| v = .r[i]
				if f[i].isreg
					fs <~ ('r' + v|uint| >> 30)|byte|
					v &= 31
				fs <~ v
				remain += bs
			if .op == asm.knst
				exit
		///
		
		if (self isa asm.knst or asm.knsr)
			.RendaKnst(fs, fs.mark-m)
			fs <~ ' '
		|| n = fs.mark - m
		if n <= 2
			fs.length--
			fs <~ "..."
			n += 2
		if !Simpler
			.RendaMsg(fs, n)
	

	function Exists (|bool|)
		return .op != asm.noop

	
	function TmpRender (|faststring| fs, |message| msg)
		|| arg = msg.Find(@arg)
		if !arg
			msg.Render(fs)
			return 
		
		|| c = msg.copy
		arg = c.find(@arg)!
		while arg
			arg.Remove
			arg = c.find(@arg)
		fs <~ c.Render.replaceall( "\n", ": " )
			
	
	function RendaMsg (|faststring| fs, |int| sofar)
		opt norefcounts
		|| msg = .msg
		if msg == @sheb
			msg.render(fs)
			return
		fs <~ (' ', 47-sofar)
		require msg != @arg

		fs <~ "/*" // reuse /* string lol.
		fs <~ " "
		if msg == @prm
			msg = msg.parent
		  else
			while msg == @num or @thg or @opp or @bra or @char
				loop !(msg in @prm)
				msg = msg.parent
		if (msg == @tmp)
			.TmpRender(fs, msg)
		  else
			msg.render(fs)
		
		fs <~ " " // reuse "*/" string
		fs <~ "*/"
	
	
	function RendaKnst (|faststring| fs, |int| sofar)
		|| ty = .info.µType
		fs <~ (' ', 26-sofar)
		fs <~ "/# "
		if ty.IsInt
			fs <~ .const|int64|
		  else
			|float64| num
			if ty.ByteCount == 4
				num = .F32
			  else
				num = .f64
			fs.AppendDouble(num, 9, true, true)
			if ty.ByteCount == 4
				fs <~ "f"
			  else
				fs <~ "d"
		fs <~ " #/"


	function DebugPrint 
		visible
		if asm.NoisyASM >= 3
			|| fs = faststring()
			.Renda(fs)
			printline fs
			
	iterator RegInputs
		|| ir = .InputRegs
		|| i = 0
		while (i < –count .r)
			ifn ir & (1 << i)
				i++
				continue
			yield i
			i++
			
	iterator FatInputs
		|| ir = .InputFats
		|| i = 0
		while (i < –count .r)
			ifn ir & (1 << i)
				continue
			yield (.input(i))
			i++

 
