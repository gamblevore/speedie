

/*
	we need a very simple exmaple... where we set some regs... and all the everything else is done automatically.
	all the refcounting... etc etc etc.
	
	does that mean something like this?
	
	asm.TERN(exp,1,2,3,4)
	asm.TERN(1,2,3,4,exp)
	exp.TERN(1,2,3,4)
	exp <~ asm.TERN(1,2,3,4)
	asm.TERN(1,2,3,4) <~ exp
	
	exp.TERN(1,2,3,4)
	
	we could do the refcounting later? like during the block-checking pass?
	
	what about closing of if/elsees... how can it know about that. seems like we should do the 
	refcounting then. anyhow... lets assume its immediate. We can also make all of these inlined
*/
	

struct FatASM
	|ASMReg| 			Info
	|message--| 		Msg
	|uint64| 			Const
	|&FatASM| 			BackLink // for multiple instructions setting the same register.

	|uint[6]|			R	
	|uint16| 			BlockNum
	|uint16|			RefCount
	|byte|				Op
	|byte|				Label	// 255 labels per function
	
	
	function F32 (assigns:|float|)
		((&.const)|&float|)[] = Value

	function F64 (assigns:|f64|)
		((&.const)|&f64|)[] = Value
		
	function F32 (|float|)
		return ((&.const)|&float|)[]

	function F64 (|f64|)
		return ((&.const)|&f64|)[]
		
	setter Debug (|message|)
		.msg = Value

	function Nop (|bool|)
		.op = asm.noop
		return true

	function has (|int| a, |int| b, |bool|)
		|| out = .out
		return out == a or b
	
	function Info (|asmreg|)
		nil safe
		return .info
	
	function FileNum (|int|)
		return .msg.filenum & 0x4095
	
	function BytePos (|int|)
		return .msg.position
		
	operator isa (|int| m, |bool|)
		nil checker
		if self
			return m == .op
	
	syntax append (|asmreg| flags)
		real self
		.info = .info as flags

	syntax is (|asmreg| flags, |bool|)
		if self
			return .info & flags
	
	function BitCorrect (|&FATASM|)
		.info = .info as AsmReg.BitCorrect
		return self
		
		
	function prm (|int| a, assigns:|asmreg| r)
		
		
	function prm (|int| a, assigns:|int| r)
		
		

	function out (|uint|): return .r[0]
	function out (assigns:|uint|): .r[0] = value
	
	// easier to do maths ad figure stuff out if its expressed like abcd
	function a (|uint|): return .r[1]
	function a (assigns:|uint|): .r[1] = value
	function b (|uint|): return .r[2]
	function b (assigns:|uint|): .r[2] = value
	function c (|uint|): return .r[3]
	function c (assigns:|uint|): .r[3] = value
	function d (|uint|): return .r[4]
	function d (assigns:|uint|): .r[4] = value

	function fa (|&FATASM|): return ASMState.Sh.Zero
	function fb (|&FATASM|): return ASMState.Sh.Zero
	function fc (|&FATASM|): return ASMState.Sh.Zero
	function fd (|&FATASM|): return ASMState.Sh.Zero

	function Swap (|int| a, |int| b)
		swap (.r[a-1]) (.r[b-1])

	function Swap (|&FatASM| other, |bool|)
		|| s = self|&ivec4|
		|| o = other|&ivec4|
		swap (s++[]) (o++[])
		swap (s[])   (o[])
		
	
	helper Step (|int| dir, |&FatASM|)
		real self
		|| b = .blocknum
		while
			self += dir
			if .op != asm.noop
				return (self, nil)(b == .BlockNum)
		
	function Prev (|&FatASM|)
		pragma inline
		return .step(-1)
		
	function Next (|&FatASM|)
		pragma inline
		return .step(1)

	function match3_2 (|int| reg, |bool|)
		// prefers the value to be at 3.
		if reg == .a
			.swap(2,3)
			return true
		return reg == .b
			
	
	function Renda (|FastString| fs)
		opt norefcounts
		|| op = instruction.typelist[.op]		#debug_require
		fs <~ op.name
		fs <~ ':'
		fs <~ (' ', 5-op.name.length)
		|| GotAny = ""
		|| Remain = 25
		|| f = op.sizes
		for i in f.count
			|| bs = f[i].bitsize
			if remain > 0 and bs
				fs <~ gotany
				gotany = ", "
				if f[i].isreg
					fs <~ 'r'
				fs <~ .r[i]
				remain += bs

	function Print
		visible
		if asm.NoisyASM >= 3
			|| fs = faststring()
			.Renda(fs)
			printline fs

 
 
role ÂµFunc1 (memory)
	linkage
		cpp_class ASMFunc2
		cpp_part  ASMFunc2
	contains ASM
	visible

	function Run (|&ivec4| Args = nil, |int| ArgCount=nil, |int64|)
		cpp_part RunArgs
		|| r = jb_vm.vm.Registers(true)
		if args
			for i in argcount
				r[i] = args[i] 
		
		return jb_vm.Run(.ptr, .length)

