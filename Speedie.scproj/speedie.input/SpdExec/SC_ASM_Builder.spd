
/*
	Jeebox internals. By Theodore H. Smith...
*/



function FatASM.AddRegNum (|message| src, |int| write, |int| num)
	opt norefcounts
	if write <= 5
		.r[write] = num // what if it's the last one...
	  else
		debugger


function FatASM.AddRegParam (|message| src, |int| write)
	opt norefcounts
	.addregnum(src, write, src.regornum)



datatype µParam (uint16)
	linkage: cpp_class ASMParam
	
	syntax is (|µparam| p, |bool|)
		return (self & p)

	flags
		|µparam|
		(32)		// starting point
		Jump
		Number
		Signed
		NoExpect
		PositionBits
		Output

//	function Form2 (|byte|)
//		return .bitsize ||| ((self is signed) << 7)
//	function Max (|int|)
//		|| oof = (self is signed)|int|
//		return (1 << ((.bitsize|int|)-oof))|int|
//
//	function IsLast (|bool|)
//		return self & 256
//	function NoExpect (|bool|)
//		return (self & 512)
//	function Min (|int|)
//		if (self is signed)
//			return -.max
	function BitSize (|int|)
		return (self & 31) + 1
	function IsReg (|bool|)
		return self isnt Number


//	function InRange (|int64| num, |message| src, |bool|)
//		|int64| H = .Max
//		|int64| L = .Min
//		if (num > h)
//		expect (num <  H)   (src, "Number too high.")
//		expect (num >= L)   (src, "Number too low.")
//		return true


function message.Reg (|int|)
	|| reg = .int(1)
	if (reg <= 31)
		return reg|int|
	error (self, "Expected register between r0 and r31")


function message.RegOrNum (|int|)
	if .name[].lowercase != 'r'
		return .int
	return .reg

