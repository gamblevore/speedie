
/*
	Jeebox internals. By Theodore H. Smith...
*/



function FatASM.AddRegNum (|message| src, |int| write, |int| num)
	opt norefcounts
	if write <= 5
		.r[write] = num // what if it's the last one...
	  else
		debugger


function FatASM.AddRegParam (|message| src, |int| write)
	opt norefcounts
	.addregnum(src, write, src.regornum)



datatype ÂµParam (uint16)
	linkage: cpp_class ASMParam
	function Form2 (|byte|)
		return .bitsize ||| (.issigned << 7)
	function Max (|int|)
		|| oof = .issigned|int|
		return (1 << ((.bitsize|int|)-oof))|int|
		
	function IsLast (|bool|)
		return self & 256
	function NoExpect (|bool|)
		return (self & 512)
	function Min (|int|)
		if (.issigned)
			return -.max
	function BitSize (|int|)
		return (self & 31) + 1
	function IsNumber (|bool|)
		return self & 64
	function IsReg (|bool|)
		return !.isnumber
//	function IsJump (|bool|)
//		return self & asm.jump
	function IsSigned (|bool|)
		return self & 128

	function InRange (|int64| num, |message| src, |bool|)
		|int64| H = .Max
		|int64| L = .Min
		if (num > h)
		expect (num <  H)   (src, "Number too high.")
		expect (num >= L)   (src, "Number too low.")
		return true



function message.RegOrNum (|bool| NeedReg = false, |int|)
	if !NeedReg and ((*.name).lowercase != 'r')
		return .int
	|| reg = .int(1)
	if (reg <= 31)
		return reg|int|
	error (self, "Expected register between r0 and r31")

