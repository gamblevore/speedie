

// exec.scproj uses this file.... so dont add too much to it!

struct FatASM
	|uint[6]|		R	
	|byte|			Op
	|byte|			Label	// 255 labels per function
	|uint16| 		BlockNum
	|uint|			Location
	
	
	function FileNum (|int|)
		return .Location & 0x4095
	
	function BytePos (|int|)
		return .Location >> 12
		
	operator isa (|int| m, |bool|)
		nil checker
		if self
			return m == .op

	syntax is (|int| m, |bool|)
		nil checker
		if self
			return m == .op
	
	function Swap (|int| a, |int| b)
		|| t = .r[a]
		.r[a] = .r[b]
		.r[b] = t
	
	function Prev (|&FatASM|)
		|| p = self - 1
		if p.BlockNum == .BlockNum
			return p
		
	function Next (|&FatASM|)
		|| p = self + 1
		if p.BlockNum == .BlockNum
			return p
	
	function Nop (|int|)
		.op = asm.noop
		return 2
		
	function Renda (|FastString| fs)
		opt norefcounts
		|| op = instruction.typelist[.op]		#debug_require
		fs <~ op.name
		fs <~ ':'
		fs <~ (' ', 5-op.name.length)
		|| GotAny = ""
		|| Remain = 25
		|| f = op.sizes
		for i in f.count
			|| bs = f[i].bitsize
			if remain > 0 and bs
				fs <~ gotany
				gotany = ", "
				if f[i].isreg
					fs <~ 'r'
				fs <~ .r[i]
				remain += bs

	function Print
		visible
		if asm.NoisyASM >= 3
			|| fs = faststring()
			.Renda(fs)
			printline fs

 
 
role ÂµFunc1 (memory)
	linkage
		cpp_class ASMFunc2
		cpp_part  ASMFunc2
	contains ASM
	visible

	function Run (|&ivec4| Args = nil, |int| ArgCount=nil, |int64|)
		cpp_part RunArgs
		|| r = jb_vm.vm.Registers(true)
		if args
			for i in argcount
				r[i] = args[i] 
		
		return jb_vm.Run(.ptr, .length)

