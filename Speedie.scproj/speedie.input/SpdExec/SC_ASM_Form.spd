

// vm.box


class µForm 
	|int|			Count
	|string|		Name
	|µParam[5]|		Params
	|message| 		src
	|int|			TotalBits
	|int| 			Outputs
	|int|			Index
	
	
	render
		fs <~ .name
		for i in .count
			fs <~ " "
			fs <~ .params[i].BitSize
		
	
	constructor (|message!| tmp)
		opt norefcounts
		.src = tmp
		.name = tmp.name
		for i in –count .params
			.params[i] = 0
		for line in tmp.last(@arg)
			|| f = line.NeedFirst
			.loadparam(f.name, f, line.IsLast)
		
		.index = ++µform.count


	function AddP (|int| Size, |µParam| P=0)
		if size <= 0 or size > 32 // hmm??
		|| i = .count++
		.totalbits += size
		expect (i < –count .params) ("Too many params.")
		p |= size - 1
		.params[i] = p
			

	syntax Access (|int| i, |µParam|)
		cpp_part AccessInt
		return .params[i]
	
	
	iterator
		|| i = 0
		while (i < .count)
			yield self[i] (i)
			++i

	function AddRemainder (|int| U)
		.addp( 32 - .TotalBits, µparam.Number ||| U)
	
	function LoadParam (|string| pl, |message| place, |bool| IsLast)
		if (pl.isint)
			|| i = pl.int
			check (i > 0 and i <= 24) (place, "Number out of range (1-24)")
			.addp(i, µparam.Number)
			return
		expect (pl == 1) (self)
		|| p = pl[]
		if  p == 'r'
			.AddP(5)
		  elseif p == 'R'
			.AddP(5, µparam.Output)
			.Outputs++
		  elseif p == 'x' // for 64/96/128 sized instructions
			.AddP(32, µparam.Number)
		  elseif p == 'n'
			.AddP(5, µparam.Number)
		  elseif p == 'l'
			.addremainder(0)
		  elseif p == 'L'
			.addremainder( µparam.NoExpect )
		  elseif p == 's'
			.addremainder( µparam.signed )
		  elseif p == 'S'
			.addremainder( µparam.signed + µparam.NoExpect )
		  elseif p == 'j'
			.addremainder( µparam.signed + µparam.jump )
		  elseif place
			error (place)
		  else
		    error (self)
	

	module
		|dictionary of µForm|				Forms = dictionary()
		|int| Count
		function NeedForm (|string| Form, |message| m=nil, |µform|)
			opt norefcounts
			rz = forms.valuelower(form)
			if !rz
				error (m, "Missing form: " + form)
				rz = µform(@arg.msg)
