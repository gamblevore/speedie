

struct NilItem
	|scdecl--|	Decl
	|nilstate|	Nil
	|byte[7]| 	Dummy


struct NilTracker
	linkage:cpp_part nil
	|scfunction--|		fn
	|uint| 				DeclCount
	|NilItem[1536]|		Items
		
	function Undo (|uint| s)
		.merge(s, false)
		.DeclCount = s
	
	function Restore (|uint| s)
		.merge(s, false)

	function Clear (|uint| a,  |uint| b)
		while a < b
			.items[a++].Nil = 0 // i hope?

	function Merge (|uint| s, |bool| Merge=true)
		|| c = .DeclCount
		.DeclCount = s
		while s > c
			|| i = &.items[--c]
			|| d = i.decl
			|| v = i.nil
			if Merge
				v |= d.nilused
				i.nil = v
			  elseif !v
				debugger 
			d.nilused = v
		
		
	function SetNilness (|scdecl| d, |nilstate| s)
		.TestedNilness(d, s)
	
	
	function TestedNilness (|scdecl| d, |nilstate| s, |nilstate|)
		opt norefcounts
		|| old = d.nilused
		if old == s
			return s
		if old > 3 or s > 3 // what?
		
		|| c = .DeclCount
		if (c < 1536)
			|| i = &.items[c]
			i.nil = old
			i.decl = d
			.DeclCount = c + 1
			d.nilused = s
			return s
		
		error (.fn, "Too many variables for nilchecker")
		return s


	function Start (|scfunction| f)
		opt norefcounts
		scfunction.currfunc = f
		.DeclCount = 0
		.fn = f
		|| r = f.returntype
			r.NilUsed = 0 // :)
		for d in .fn.args
			d.RestoreNil


	function Finish (|scfunction| f)
		opt norefcounts
		f.ReturnType.DeclareAsUsed?
		.fn = nil
		
	
	function Check (|scfunction| f)
		opt norefcounts
		if platform.IsDebug
			debugger 
			f.nildebug
			.Start(f)
			Runall(f.SourceArg)
			.Finish(f)


	function scfunction.canNil (|bool|)
		return !.IsMacro and !.IsWrapper and .isOK and .LimitTests
	
	
	function scfunction.LimitTests (|bool|)
		|| c = .Lookup #require
		require c.name contains "NilTest"
		return .SourceArg contains "nilcheck"
	
	module
		|niltracker| T
		function SaveLives
			opt norefcounts
			using options.NilStrength
				for f in compiler.funclist
					if f.cannil: T.Check(f)
				
			scfunction.currfunc = nil
			StdErr.PrintErrors
			StdErr.Clear

	
	

function SCDecl.RestoreNil
	|| d = .nildeclared & nilstate.either
	if .nilused != d // is this ever used?
	.nilused = d


function SCDecl.NilTake (|scdecl| d)
	opt norefcounts
	|| n = d.NilDeclared
	.NilUsed = n
	.NilDeclared = n


function message.IsNowNil (|bool|)
	opt norefcounts
	|| d = .obj as scdecl
		return (d == TypeNil) or (d.nilused isnt real)


function SCDecl.DeclareAsUsed
	opt norefcounts
	.nildeclared = .NilUsed (|) nilstate.stated


function scdecl.SuffersNil (|bool|)
	return .IsObject or .PointerCount


function scdecl.NilStated (|bool|)
	return .NilDeclared is Stated

