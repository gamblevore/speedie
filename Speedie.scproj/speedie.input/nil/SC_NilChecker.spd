


// We need to probably combine "merge" and "restore" and "negate"
// we are always merging two branches... one just might happen to be nil
// and one might happen to return.
// for example:
// 
// if !x
//    x = realobject()
// how to merge the states here? If we combine the previous state of "maybe" with the new state of "real"
// we get still "maybe". So we need to combine both branches instead of the parent branch.
// what about returns?

// if !x
// 		return

// hmmm... perhaps we can treat this differently. I mean... just apply the negative and be done with it.
// I think we are gonna calculate both states/approaches at once.
// we only have "StateA" and "StateB"... then we can swap between them or choose one.
// many cases to solve!!

prototype NilTrackerFn (|&Niltracker| self, |message| msg, |branchstate| Y=branchstate.always, |bool| Mode=false)


	


function scfunction.canNil (|bool|)
	return !(.IsMacro and !.IsWrapper and .isOK)


function scfunction.LimitTests (|bool|)
	|| c = .Lookup #require
	require c.name contains "NilTest"

	require .SourceArg contains "nilcheck"

	
function NilTracker.UseChildAsReal (|message| wrapper, |bool|) // a.b, *a, a[0], (a)()
	opt norefcounts
	|| ch = wrapper.first
		Jump(self, ch) // (fn * 0.5[])(a,b) // how do I know if this is real? run the child first (a tern here)
		return .FailIfNotReal(ch, ch.NilDecl)	
	


extend_module NilTracker {
	dispatch NilTable (NilTrackerFn)
		@thg:	Thing
		@bra:	Bracket
		@type:	Bracket // pretty much
		@func:	Function
		@tmp:   Statement
		@dot:	Property
		@acc:	Access
		@brel:	brel
		@rel:	Rel
		@decl:	Declaration
		@arg:	Argument
		63:     // for the size
	
	inittable()


function InitTable
	for i in 64
		NilTable[i] := Dummy
					

function Dummy (NilTrackerFn)
	debugger // do we get this ever?


function Access (NiLTrackerFn)
	opt norefcounts
	.UseChildAsReal(msg)						// abc[0]

	
function Rel (NilTrackerFn)
	opt norefcounts
	if msg.tmptype is kSetVar					// x = y
		SetRel(self, msg, y, mode)
	  else
		ProcessCondRel(self, msg, y, mode)


function Property (niltrackerfn)
	opt norefcounts

	|| exp = msg.first
	Jump(self, exp)
	|| dcl = msg.nildecl			#debug_require
	if dcl.NilDeclared isnt Either // perhaps allowing redundant checks sometimes is nice?
		msg.RedundantBranch(y.syntaxcast)

	//// version two?
	// so what if we are dong this:
	// x = a.b
	// or this?
	// if (a.b)
	// perhaps the redundant check isn't needed at this point, but some other point?
	// either way... we need to know "Where we are in the code". in some cond, or not?
	if msg.NilPropAccess
		.UseChildAsReal(msg)						// abc.var


function Statement (NilTrackerFn)
	opt norefcounts
	|| type = msg.TmpType
	if Type is kif
		If(self, msg, y, mode)
	  elseif type is kReturn
		Return(self, msg, y, mode)
	  elseif type is kWhile
		While(self, msg, y, mode)
		
	
function Function (NilTrackerFn)
	opt norefcounts
	|| fp = msg.first
	|| prms = fp.next
	|| fn = prms.obj|scfunction|
	if msg.tmptype == ASMtmp.kTern
		return tern(self, prms, y, mode)

	if (fp.func == @bra)
		require .UseChildAsReal(fp.first)						// (abc)()
	
	|| ret = fn.ReturnType
		check (!ret.SuffersNil or ret.IsStated) (msg, "Unknown if this function returns nil.")

	|| p = prms.first
	if fn.IsNilChecker and (y is always)
		Thing(self, p, y, true)		// if (!x.length) // x can be nil
	
	
	for a in fn.args
		.VariableSet(a, p.NilDecl, p, 1)
		if p.HasAny
			Jump(self, p)
		p++


function Return (NilTrackerFn)
	opt norefcounts

	|| value = msg.first				#require
	|| vd = value.NilDecl
	if vd.suffersnil
		|| vn = vd.nilused
		|| rd = .fn.ReturnType
		|| r  = rd.NilDeclared
		if r is real  and vn is Nilish
			error (msg, "Nil returned, against function declaration!")
		rd.nilused |= vn // find the answer at the end


function While (NilTrackerFn)
	opt norefcounts

	|| Cond = msg.first
	|| Arg = cond.next				#require
	// i guess its different cos of exits/continues working differently
	// and loops and stuff.


function If (NilTrackerFn)
	opt norefcounts	
	|| BeginState = .DeclCount
	|| cond = msg.first
	|| arg1 = cond.next
	|| Else = arg1.next
	|| arg2 = else.Last

	.IfDepth++
	jump(self, cond, BranchState.Always) // SetVars during conds actually should go into the parent branch... not undoable.
	.IfDepth++
	RunNormal(self, arg1)
	
	if arg2												// IF X {y=y1} ELSE {y=y2}
		|| Arg1Only = .DeclCount
		.Restore(BeginState)							// (undo y=y1 but keep track of it)
		.IfDepth--
		jump(self, cond, BranchState.Never)
		if arg2.IsFirst									// ELSE {y=y2}
			.IfDepth++
			RunNormal(self, arg2)
			.IfDepth -= 2
		  else											// ELSEIF (Y) {y=y2}
			.IfDepth--
			if(self, else)
		
		if arg1.Blocks
			0
		  elseif arg2.blocks							// (use arg1's state, <2% likelyhood)
			.Undo(BeginState)							// IF X {y=y1} ELSE {return}
		  else
			.DeclCount = Arg1Only						// (skip arg2, its already current)
			.merge(BeginState)							// (merges y=y1, y=y2)
		
	  else
		.IfDepth -= 2
		if arg1.Blocks
			.Undo(BeginState)							// IF X {y=y1, return}
			jump(self, cond, branchstate.never)
		  else
			.merge(BeginState)							// IF X {y=y1}


function Tern (Niltrackerfn)
	opt norefcounts
	|| cond = msg.first
	|| A = cond.next
	|| B = A.next

	debugat
	.IfDepth++
	jump(self, cond, branchstate.always)
	.IfDepth++
	|| BeginState = .DeclCount
	RunNormal(self, A)
	.Restore(BeginState)
	jump(self, cond, branchstate.never)
	RunNormal(self, B)
	.merge(BeginState)								// IF X {y=y1}
	.IfDepth -= 2
	// needs to propagate through bras and typescasts into a setrel



function Thing (NilTrackerFn)
	opt norefcounts
	if Y >= nilstate.Either
	|| dest = Y|NilState|
	|| dcl = msg.nildecl			#debug_require
	|| u = dcl.NilUsed
	
	if u == NilState.Either
		if (dcl is param) and (dcl.NilDeclared isnt stated)
			dcl.NilDeclared = NilState.optional
		return .TestedNilness(dcl, dest)

	if !Mode and dcl.NilDeclared is Either
		msg.RedundantBranch(y.syntaxcast)


function Argument (Niltrackerfn)
	opt norefcounts
	ifn msg in @bra
	|| d = .IfDepth&1
	
	.IfDepth += d
	RunNormal(self, msg, y, mode)
	.IfDepth -= d   // || x = (a > b)
					// both are good!
					// we long as we know "Where we are... we don't need to fool around with an ifdepth"
	
function Bracket (Niltrackerfn)
	opt norefcounts
	Jump(self, *msg, y, mode)


function Brel (Niltrackerfn)
	opt norefcounts
	|| b = *msg.name
	|| f = *msg
	if b == '!'
		|| old = .NeedCond()
		Jump(self, f, branchstate.always, mode)
		.NegateCond(old)
	  elseif b == '*'
		.UseChildAsReal(msg)										// *abc
		|| pd = f.nildecl
			.FailIfNotReal(f, pd)
		return jump(self, f, y)
	  else
		Jump(self, f, y)
	

function ProcessCondRel (Niltrackerfn)
	opt norefcounts
	|| ll = msg.first
	|| op = ll.next
	|| rr = op.next
	|| scop = op.obj|SCOperator|

	if scop.IsCompare
		|| LNil = (ll.obj as scdecl).IsNowNil
		|| RNil = (rr.obj as scdecl).IsNowNil
		if lnil or rnil
			expect (scop.IsNilTest) (op, "Can't use this operator on nil. Use != or ==.")
			if (lnil and rnil)
				return msg.RedundantBranch(true)
			if scop.HasEquals // if (a==nil or b==nil) return else a.a(b.b)
				y = y.not
			|| side = (rr, ll)(lnil)
			return jump(self, side, Y)
		return
	
	
	if scop.IsAndOr
		if scop.IsAndOr == 3 // x = (a and b)
			if y == BranchState.Never
				y = BranchState.Perhaps
		  else // x = !(a or b)
			if y == BranchState.always
				y = BranchState.Perhaps
		
		jump(self, ll, Y)
		jump(self, rr, Y)
		return

// its a bit ops by now. all others would have gone.
	if ll.hasany
		Jump(self, ll)
	if rr.hasany
		Jump(self, rr)


function Declaration (niltrackerfn)
	opt norefcounts
	|| exp = msg.last
	if exp == @rel
		setrel(self, exp, y, mode)
	

function SetRel (niltrackerfn)
	opt norefcounts
	|| l = msg.first
	|| r = msg.last
	if l.hasany
		Jump(self, l)
	if r.hasany
		Jump(self, r)

	// || x = &b // OK... x is not nil
	// but how do we know this? &abc does not return anything, not via our current code.
	// it has a decl... but like... what kind? a shared one? in this case... no?
	// i think getting a pointer will never share the decl.

	.VariableSet(l.nildecl, r.nildecl, r, 0)


function Jump (NilTrackerFn)
	pragma inline
	opt norefcounts
	(NilTable[msg.func])(self, msg, y, mode)


function RunNormal (NilTrackerFn)
	opt norefcounts
	for s.fast in msg
		Jump(self, msg)


function NilMsg (|message| err, |scdecl| d, |uint| PointerInferred, |string|)
	if PointerInferred
		return "Nil Error: Pointed-to can't be nil."
	if d isnt param
		if err == @thg
			return "Nil Access: Needs 'if' wrapping."
		return "Nil Access here."
	return "Nil Error: Don't declare with '?'... or test for nil."



}



function niltracker.VariableSet (|scdecl| recv, |scdecl| sent, |message| errplace, |uint| IsParam) // setrel, relset
	opt norefcounts
	require recv.suffersnil

	if recv.NilDeclared isnt nilish
		require .FailIfNotReal(errplace, sent, isparam>>1)
	  
	  elseif isparam										// a param that can accept nil
		|| recnil = recv.nildeclared
		check ((recnil is stated) or (sent.NilUsed isnt Nilish)) (errplace, "Unknown if this parameter accepts nil.")
		if IsParam == 2
			.SetNilness(sent, recnil)
			debugger 										// its too hard to imagine. just figure this out later
			// if (a and func(&a))
	  else
		.SetNilness(recv, sent.nilused)
		
			
	if recv.PointerCount == 1	// |!&!&struct| abc = f
	// what about pointers to pointers to something? // just give up? i think so...
		return .VariableSet(recv.internal, sent.internal, errplace, IsParam<<1)



function niltracker.FailIfNotReal (|message| err, |scdecl| d, |uint| PointerInferred=0,  |bool|)
	opt norefcounts
	if d.NilUsed isnt Nilish
		return true

	if !pointerinferred  and  d is param  and  d.NilDeclared is Stated
		d.NilDeclared = NilState.real
		d.nilused = NilState.Realish
		return true

	error (err, nilmsg(err, d, PointerInferred) )




