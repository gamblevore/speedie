


///////////// ///////////// ///////////// FINDING ///////////// ///////////// ///////////// 


function Message.FindAndRemove (|String| name,  |bool| NothingOK,  |bool| IsClass,  |string|)
	return .FindAndRemoveSub(name, NothingOK, isclass)$.name



function Message.DeprecatedClassOption (|String| name,  |string| Kind="!",  |int|)
	// this is a wasteful way to do stuff.
	// better to find them as we go through the code... not search for each at the start.
	|| place = .find( @Tmp, name )		#require
	|| num = 1
	if Kind != "!"
		|| ch = place.first
		require ch and ch.expect(@thg) and ch ~= Kind
		|| num_msg = ch.next 
			num_msg.expect(@num)
			num = num_msg.int
	
	place.Remove
	Return num



///////////// ///////////// ///////////// SYNTAX ///////////// ///////////// ///////////// 


function Message.MsgOwningFunc (|SCFunction|)
	opt norefcounts
	nil self
	for ch.up in self
		|| O = ch.obj
		if O isa SCArg
			|| pf = o.ParentFunc
				Return pf
		  elseif (O isa SCFunction) and (ch != @prm)
			// could be a func associated with the lst on "obj.func".
			Return o


function message.MakeComment // ignorenode ()  makeignored ()
	.ASMType = asmtmp.kIgnore
	.func = @Sheb
	.clear


function Message.NegateThg (|Message|)
	opt norefcounts
	if .name == "true"
		.name = "false"
		.obj = FalseBool
		return self
	if .name == "false"
		.name = "true"
		.obj = TrueBool
		return self
	return .WrapWith(@BRel, "!")


function Message.Negate (|Message!|)
	opt norefcounts
	real self
	|| upon = self
	|| f = .func
	if f == @thg
		return .negatethg
	
	if f == @bra
		upon = .unbra
		if upon.func == @thg
			upon.negatethg
			.obj = upon.obj
			return self
	
	if upon isbrel "!"
		upon.become(@bra)
		return self
	
	if upon.func == @rel
		|| opmsg = upon.second!
		|| op = scoperator.dict[opmsg.name]
			|| nega = op.opposite
				opmsg.become(nega)
				return self

	if f == @bra
		.Become(@brel, "!")					// the negator!
		return self

	using self
	rz = .WrapWith(@BRel,  "!")			// also the negator!


function Message.IsAssignable (|bool|)
	|| f = .func
	return f != @Func and @type and @num // unless... its an assigns func?


function message.IsInt (|bool|)
	return (self == @num) and !.name.find('.')


function Message.ParentPoint (|Message|)
	opt norefcounts
	|| curr = self
	while curr
		|| OldMsg = curr
		curr = curr.parent
		if curr == @Arg
			Return OldMsg


function Message.IsVarUseableInLoop (|String| name, |bool|)
	if name == "self"
		return false
	return .IsVarAltered(name)


function Message.IsVarAltered (|String| name, |bool|)
	opt norefcounts
	for msg.flat in self
		if (msg == @Rel) and (msg in @arg) and (*msg IsThing name)
			Return true


function Message.MsgArg (|SCArg|)
	opt norefcounts
	for ch.up in self
		|| O = ch.obj
		if O isa SCArg
			Return O


function Message.MsgFunc (|SCFunction|)
	opt norefcounts
	if self == @Dot or @Func
		|| sc = .second
			return sc.asfunc


function Message.DclExp (|Message|)
	opt norefcounts
	if self == @decl // oof
		return .second
	return self


function Message.MsgDecl (|SCDecl|)
	opt norefcounts
	|| d = .DclExp
		return d.AsDecl


function Message.DeclName (|Message|)
	opt norefcounts
	|| dcl = .DclExp
	if dcl == @Rel
		Return dcl[@thg]
	if dcl == @Thg
		Return dcl
	expect !(dcl == @Emb) (self)


function Message.VarName (|string|)
	opt norefcounts
	|| ch = self[@nil, 1]
		|| f = ch.func
		if f == @rel
			ch = ch.first!
			f = ch.func
		if f == @thg
			return ch.name
			
		error (ch)



// same as above?
function Message.GetDclName (|bool| IsConstructor=false, |Message|)
	opt norefcounts
	if isconstructor
		expect (self == 2) (self, "Constructors can't return things")
	rz = self[@Nil, 1]
	if rz == @Rel
		rz = rz[@thg]
	if !rz
		error (self, "No decl name found")


function Message.CollectDclName (|Message|)
	opt norefcounts
	if self
		|| thg = self
		if thg == @Rel
			thg = thg.first
		if thg == @thg
			return thg
		error self


function Message.WithinLoop (|Message| stop, |bool|)
	opt norefcounts
	while (self != stop) and self
		if (self IsTmp "while" or "for")
			return true // seems OK, its within a loop.
		self = .parent


function Message.UnBra (|Message|)
	opt norefcounts
	real self
	While self == @bra and .first != @arg
		self = .first!
	return self


function Message.UnBraType (|Message|)
	opt norefcounts
	real self
	While (self == @type) or (self == @bra and .first != @arg)
		self = .first!
	return self


function Message.UpToType (|Message|) // updecl, finddecl
	opt norefcounts
	|| c = self
	while c
		|| p = c.parent
		if p == @type
			require c.islast
			return p
		c = p

	
function Message.CastedParent (|Message|)
	opt norefcounts
	rz = .unbra.Parent
	if rz == @prm
		rz = rz.parent




///////////// ///////////// ///////////// MOVING ///////////// ///////////// ///////////// 


function Message.ReplaceWith (|message!| j, |Message!|)
	.Prev = j
	.Remove
	return j
	

function Message.ReplaceWithChild (||)
	rz = .First
	.Prev = rz
	.Remove


function message.SpdFunc (assigns:|syntax|)
	.func = value
	.asmtype = 0


function Message.SafeRemove (|syntax| T=@sheb)
	if self
		.SpdFunc = t
		.name = ""
		is inserted // stop issues with autocomplete :)
		for (c in self)
			c.remove


function Message.SafeReplaceWith (|message| Incoming)
	.saferemove @bra
	self <~ incoming


function Message.AddBefore (|Message| before, |Message| NewItem)
	if before
		before.Prev = NewItem
	  else
		self <~ NewItem


function Message.InsertBefore (|Message| j, |Message?| ch)
	opt norefcounts
	real self
	if ch in self
		ch!.Prev = j
	  else
		.Last = j


function Message.InsertAfter (|Message| ins, |Message| after)
	if after
		after.next = ins
	  else
		.first = ins


function Message.Move (|Message| last, |Message| into)
	opt norefcounts
	|| curr = self
	while (curr != last)
		|| next_ = curr.Next
		into.First = curr
		curr = next_


function Message.AppendAllInto (|Message|Dest)
	opt norefcounts
	While .hasany
		Dest.Last = .First


function Message.MoveAllAfter (|Message| after)
	opt norefcounts
	While .hasany
		after.Next = .Last


function Message.NeedMarker (|String| s, |bool| b, |Message|)
	opt norefcounts
	|| f = .find( @tmp, s )
		return f
	rz = @tmp.msg(s)
	if b
		.Last = rz
	  else
		.First = rz


function message.WipeCopy (|message?| oof, |Message!|)
	cpp_part LayerWipeCopy
	if !oof
		return .wipecopy
	|| old = (message).layer
	oof.memorylayer.use
	rz = .wipecopy
	old.use

	
function message.WipeCopy (|Message!|)
	opt norefcounts
	rz = Message(self)
	rz.position = -1
	for v in self
		rz <~ v.wipeCopy


function Message.CopyAllAfterBefore (|Message| Before, |message| copylayer)
	opt norefcounts
	|| exp = .Next
	While exp
		before.Prev = exp.wipeCopy(copylayer)
		exp++


function Message.CopyAllBefore (|Message| Before, |message| copylayer)
	opt norefcounts
	|| curr = .Prev
	while curr
		|| cpy = curr.Copy(copylayer)
		Before.Prev = cpy
		Before = cpy
		curr--


function Message.CopyAllAfter (|Message| after, |message| copylayer)
	opt norefcounts
	|| curr = .next
	While curr
		|| cpy = curr.WipeCopy(copylayer)
		after.Next = cpy
		after = cpy
		curr++


// all these copyintos need to clear position
function Message.CopyAllInto (|Message| j, |bool| wipe = false)
	opt norefcounts
	for c in self
		j <~ c.Copy(j)			// Was .wipecopy. why did I do that?


function Message.CopyAllBeforeInto (|Message| into, |Message| copylayer)
	opt norefcounts
	|| curr = .Prev
	while curr
		into.first = curr.Copy(copylayer)	// was .WipeCopy. why did I do that?
		curr--


function Message.CopyAllAfterInto (|Message| into, |Message| copylayer)
	opt norefcounts
	|| curr = .Next
	While curr
		into <~ curr.Copy(copylayer) // was .wipecopy. why did I do that?
		curr++


///////////// ///////////// ///////////// CREATING ///////////// ///////////// ///////////// 


function Message.GetMarker (|String| s, |Message|)
	opt norefcounts
	for a in self
		if a isTmp s
			return a


function NewEqRel (|Message| L, |Message| R, |Message|)
	opt norefcounts
	rz = @rel.msg
	rz <~ L
	|| op = rz.msg(@Opp, "=")
	op.obj = scoperator.assigns
	rz <~ R

	rz.ASMType = ASMtmp.kSetVar


function NewEqRel (|string| L, |String| R, |Message|)
	opt norefcounts
	return neweqrel(@thg+l, @thg+r)



function NewRejoin (|message|)
	rz = @tmp + "rejoin"
	rz.ASMType = asmtmp.kRejoin


function NewDecl (|string| type, |string| name="", |message|)
	opt norefcounts
	|| msg = (@thg+name, nil)(name)
	return newdecl(type, msg)


function NewDecl (|string| type, |message| RelOrName, |message|)
	opt norefcounts
	rz = @decl.msg
	if type
		rz <~ (@thg, type)
	  else
		rz <~ @emb
	
	rz <~ relOrName


function NewRel (|Message| L, |Message| R, |string| op, |Message|)
	opt norefcounts
	rz = @rel.msg
	rz <~ L
	rz <~ (@Opp, op)
	rz <~ R
	

function message.WrapWith (|syntax| f, |string| s="", |message!|)
	opt norefcounts
	rz = f + s
	.prev = rz
	rz <~ self


function Message.NeedBra (|Message|)
	if (self == @Bra or self in @bra)
		 return self
	
	return .wrapwith(@bra)


function NewFnc (|string| name, |Message|)
	opt norefcounts
	rz = @func.msg
	rz <~ (@thg, name)
	rz <~ @prm
	
	
function message.ExpectEmpty
	opt norefcounts
	|| f = .first
		error f


function message.IsAlwaysBool (|maybebool|)
	opt norefcounts
	|| d = .obj as SCDecl
		if d.IsConstOf(falsebool)
			return false
		if d.IsConstOf(truebool)
			return true


function message.IsAlwaysTrue (|bool|)
	return .IsAlwaysBool.istrue

function message.IsAlwaysFalse (|bool|)
	return .IsAlwaysBool.isfalse


function Message.StartUsingAfter // for "return" debugging.
	opt norefcounts
	|| biggest = -1
	|| L = .memorylayer
	|| d = .originalparsedata
		for s.flat in self
			if s.position >= 0 and s.memorylayer == l 
				(biggest max= s.after)
		|| b2 = d.find("\n", biggest)
			biggest = b2
		biggest++
	parser.Using.Position = biggest
	parser.Using.Flags = MsgParseFlags.Inserted
	.MemoryLayer.use


extend string
	function DebugFunc
		visible
		if scfunction.currfunc ~= self
