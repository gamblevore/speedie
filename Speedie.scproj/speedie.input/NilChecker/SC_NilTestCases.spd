

class NilTest
	|int|		V
	|string|	V2
	|?&byte|	V3
	|&byte|		V4
	
	constructor
		.v4 = (&NilTestByte)|&byte|
		.v3 = 0|&byte|
		
	function Reader
		|| y = 1
		if y
			"hello"
		|| v = .v3
		borks // amazing
		*v = 'x'
	
	function Broken
//		borks
//		if .v4
//			""
		
	function AndTest (|string?| a, |string?| b, |string| cc)
		if (a and b)
			|| p3 = .v3
			|| p2 = .v3
			|| p4 = .v4
			|| x = a.Addr
			|| y = b.Addr
			if (p2 and p3)
				*p2 = 0

			if (p3 and p2)
				*p3 = 0

			if (p3 and p4?)
				*p4 = 0

			if (p3 and p4? and x? and y?)
				*x = *y
				*p3 = *p4


	function recurse (|bool| pos, |bool|)
		cpp_part Bug // just left here to test my nilchecker... it should check for recursion bugs
		borks
		return .recurse(!pos)
	
	function TernTest
		|| a = ("a",nil)(0.5[])
		|| b = ("b",nil)(0.5[])
		if (a and b)
			|| x = a.Addr
			|| y = b.Addr
		
	function Read (|string| path, |bool|)
		.v2 = path.ReadFile
		return .v > .v2.Length
			
	// a getter
	function Get (|string|)
		return .v2[3, 10+(.v mod 10)]
		
	// a function that tests for self
	syntax cast (|bool|)
		return (self != nil) and .v2
		
	// a func that tests the params
	function IsSafe (|string| s, |message| m,  |bool|)
		if s
			return .v2 == s.reverse
		if m
			return m.name == .v2
		return true
		
	// a func that doesn't
	function IsQuick (|string| s, |message| m,  |bool|)
		if .v2 == s.reverse
		return m.name == .v2
	
	// a func that can return nil
	function CanNil (|niltest|)
		if .v
			return self

	// a few that cant
	function Exists (|niltest|)
		return self ?? niltest()
	
	function Exists2 (|niltest|)
		if self
			return self
		return niltest()
	
	function Exists3 (|niltest| p, |niltest|)
		if p
			return p
		return self
	
	function Exists4 (|niltest|)
		return (niltest(), self)(!self)
		
	function Exists5 (|niltest|)
		while self
			return self
		return .Exists4
		
	function Exists6 (|niltest|)
		|| z = .exists5
		borks
		if z == nil
			0
		using "abc"
		while
			|| x = .exists5
				return x
		
	function Exists7 (|!niltest|)
		for 100
			|| x = .Exists5
				return x
		return .Exists3(nil)
		
	function Exists8 (|bool|)
		real self
		if 1
			.v

	function Fail8 (|bool|)
		nil self 
		if 1
			borks
			.v

// pointers
	function BorkedPtr (|?&(niltest!)| xp0, |&niltest| xp2, |niltest| xp3)
		if !xp0
			borks
			*xp0 = self
		  else
			*xp0 = self
			
		borks	
		(*xp0).v

		|| xx = &NilTestByte
		borks
		if xx
			xx++

	function GoodPtr (|&niltest| xp0, |&niltest| xp2)
		if xp0
			*xp0 = self
		if xp2
			|| x = *xp2
				x.v

	function BadGoodPtr (|&niltest| p)
		if p
			*p = self
		
	function BadBadPtr (|&niltest| p)
		if p
			|| v = *p
				v.v++
	
	function NilGlobals
		borks
		x2 = nil
		
	function GoodBadPtr (|&niltest| p)
		|| v = *p
			v.v++
		.V

// I think those are some good tests... for now. but what about modules? thats a tricky one.

	module
		// assume can't be nil
		|byte|		NilTestByte
		|niltest|	x1 = niltest()
		|niltest|	x2 = x1.exists7
		|string|	x3				// defaults
		|niltest?|	n0 
		|niltest|	n1



/*
	* prototype GUIPasteEvent (|GUIControl| self)
*/

module NilTest2
	function HelloTest
		NilTest.n0
		|| x = NilTest.n0
			x.Reader

	function fpTest (|fpMsgRender?| f)
		|| fs = faststring()
		(f$)(message(), fs)
		
	
	function Dictionary (|dictionary? of string| d)
		borks
		d["abc"] = "x"
	
	function ArrayTest
		borks
		nil|array| <~ ""


function scfunction.NilPrint (|string| header="", |bool| nilch)
	cpp_name ndb1
	|| fs = FastString()
	fs <~ header
	|| c = .cls
		fs <~ c.name
		fs <~ "."
	fs <~ .name
	fs <~ "( "
	for a in .args
		fs <~ ", "
		start
		fs <~ a.name
		fs <~ " "
		a.nildeclared.nilname(fs, true)
	fs <~ " )"
	|| r = .ReturnType
		fs <~ " as "
		r.nildeclared.nilname(fs, true)
	if nilch and archonpurger.t.FnAbleToNilCheck
		fs <~ " (nilch)"
	fs <~ header
	
	printline fs


function scdecl.NilPrint (|string| reason="")
	cpp_name ndb2
	require .nilreg

	|| fs = FastString()
	fs <~ "    "
	if reason
		fs <~ reason
		fs <~ ": "
	fs <~ .name ?? "?"
	fs <~ " "
	|| d = .NilDeclared
	d.NilName(fs, false)
	d &= ~ NilState.Stated
	if .nilcurr != d
		fs <~ " ("
		.nilcurr.nilname(fs, false)
		fs <~ ")"
	printline fs


function UpgradeIntsTest
	|byte| a
	|byte| b
	|| c = a - b

	
function NilState.NilName (|faststring| fs, |bool| Expected)
	if (self is Stated) != Expected
		if Expected
			fs <~ "unstated "
		  else
			fs <~ "stated "
	fs <~ .Rawname


function @ArchonPurger.ndb4
	cpp_name ndb4
	visible
	(*t.Neel).ndb5()


function NilRecord.ndb5 
	cpp_name ndb5
	visible
	
	|| n = .DepthOfVars + 1
	for i in n
		// item 0 is nil
		|| D = ArchonPurger.T.decls[i]
			|| Name = D.name
			|| V = self[i].RawName
			"$Name:  $V"


