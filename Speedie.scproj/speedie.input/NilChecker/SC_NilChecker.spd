
#! So... the nil checker could be used to improve refcounting and ASM
#! We can keep track of where the "last used place" for each var is.
#! This can be done by an array of 32 decls... So anytime we hit a decl
#! we can keep track of it. If/while can store the info directly on the node
#! others (funcs) maybe? most will need a node after it... to say that "this is the last place"
#! Hopefully we don't spam everything with it.
#! We can just insert them when a block closes... unless its a sub if/while that closed

#! As for reg-allocation, when a var is closed, we can remove it from the table
#! We'll need a Decl-table and a tmp-table, each are 32-bits. We always allocate
#! into the lowest/highest free bit.
#! seems simple!


extend_module ArchonPurger {
	dispatch NilTable (NilTrackerFn)
		@thg:	Thing
		@bra:	Bracket
		@type:	Type
		@func:	NilFunction
		@tmp:   StatementJump
		@dot:	Property
		@acc:	Access
		@item:	Item
		@brel:	brel
		@arel:	arel
		@rel:	Rel
		@list:	List
		@decl:	Declaration
		@arg:	Argument
		@tril:	Argument
		@sheb:  Ignore
		@sstr:	String
		@str:	String
		@num:	Number
		@char:	Char
		(ASMType.kif):			If
		(ASMType.kdebugger):	ignore
		(ASMType.kWhile):		While
		(ASMType.kContinue):	Continue
		(ASMType.kExit):		Exit
		(ASMType.kSetRel):		SetRel
		(ASMType.kSwap):		Swap
		(ASMType.kReturn):		Return
		(ASMType.kTern):		Tern
		(ASMType.kStatExpr): 	StatExpr
		(ASMType.kIgnore):		Ignore
		(ASMType.krejoin):		Rejoin
		(ASMType.kFail):		Fail
		(ASMType.kRefCount):	NilFunction // sigh

	
	TrackerDummies()
	function TrackerDummies
		for i in 64
			NilTable[i]     ?= &Dummy
			fn_asm_table[i] ?= &ASMType.unexpected



function Dummy (NilTrackerFn): debugger


function Ignore (NilTrackerFn)

		
function StatementJump (NilTrackerFn)
	|| fn = NilTable[msg.ASMType]!
	if fn != StatementJump
		return (NilTable[msg.ASMType]!)(msg)
	if stderr.ok
		error (msg, "".internal)
		debugger // what? how?


function SyncJump (NilTrackerFn)
	PostIncrementNil.Sync = true
	rz = .jump(msg, test)
	PostIncrementNil.Clear


function JumpWithinBool (NilTrackerFn)
	t.InsideBoolLogic++
	rz = .jump(msg, test ||| nilcheckmode.ForBools)
	t.InsideBoolLogic--


function JumpSub (NilTrackerFn)
	opt inline
	|| t = msg.ASMType
		return (NilTable[t]!)(msg, test)
	t = msg.func|ASMType|
	msg.ASMType = t
	return (NilTable[t]!)(msg, test)


function Jump (NilTrackerFn)
	cpp_part FlowJump
	target flow
		if FlowControl.Active
			FlowControl <~ msg.func|byte|
			FlowControl.input("", msg.name)
	return .JumpSub(msg, test)
		


function PropertyToFunc (|message!| dot, |scfunction!| fn, |nilstate|)
	opt norefcounts
	// a.b
	// b(a)
	
	dot.func = @func
	dot.ASMType = (@func)|ASMType|
	|| upon = dot.First!
	|| Prms = dot.Last!
	Prms.obj = fn
	Prms.Func = @prm
	Prms.First = upon

	NewFuncsLoaded = true
	dot.memorylayer.use
	|| f = message(@thg, fn.exportname)
	f.Position = dot.position
	dot.First = f
	return nilstate.real
	


function UseChildAsReal (|message| msg, |nilcheckmode| test, |nilreason| reason, |NilState|) 	// a.b, *a, a[0], (a)()
	opt norefcounts

	|| dcl = msg.FastDecl
	if dcl is Global or const
		return dcl.NilDeclared
	|| ch = msg.First
		return .UseAsRealSub(ch, test, reason, dcl)
	debugger // what?


function UseAsReal (|message| msg, |nilcheckmode| test, |nilreason| reason, |NilState|) 	// a.b, *a, a[0], (a)()
	opt norefcounts
	return .UseAsRealSub(msg, test, reason, msg.fastdecl)


function UseAsRealSub (|message| ch, |nilcheckmode| test, |nilreason| reason, |scdecl| dcl, |NilState|) 	// a.b, *a, a[0], (a)()
	opt norefcounts
	|| chmode  = NilCheckMode.AllowRegisterAddr * (reason is accessing)
	|| actual = .Jump(ch, chmode)
	if actual is nilish
		|| ddd = dcl.hiderfunc
		if ddd and (reason is property) and !ddd.isassigns and (test isnt assigns)				// OK... 
			return .PropertyToFunc(ch.parent!, ddd)
			
		.BecomeReal(ch.FastDecl, ch, reason)

	|| nd = dcl.NilDeclared
	if  test isnt active  or  test is soft
		return nd
	if nd.statedreal and dcl.typesuffers
		return ch.RedundantDeclare(nd)

	return nd


function Rel (NilTrackerFn)									// x = y
	opt norefcounts
	|| ll = msg.first!
	|| op = ll.next!
	|| scop = op.obj!|SCOperator|
	|| rr = op.next!

	if scop Is Compare
		return .CompareObjs(ll, rr, test, scop)
	
	|| AndOr = scop is AndOr
		(test is AND) = (andor == opmode.AND)
		return .BooleanLogic(msg, test.activate)

	|| L = .Jump(ll) & NilState.Either		// (ptr+1) or (1+ptr) still needs nilness check
	|| R = .Jump(rr) & NilState.Either
	|| D = msg.FastDecl
	if !D.TypeSuffers						// (ptr-ptr) is actually a number... so thats OK.
		return nilstate.real
	if NilState.Nilish == l or r
		return nilstate.nilish
	return l ||| r


function List (NilTrackerFn)
	opt norefcounts
	for s in msg
		.jump(s)
	return nilstate.Real


function Item (NilTrackerFn)
	return .jump(msg.last!, test)


function Access (NilTrackerFn)
	opt norefcounts
	|| index = msg.second.first!.UnBra
	.jump(index)
	|| Mode = nilreason.accessing * (index == @num and "0")
	return .UseChildAsReal(msg, test, Mode)


function Property (NilTrackerFn)
	return .UseChildAsReal(msg, test, nilreason.property)


function RealBool (|bool| b, |nilstate|)
	rz = nilstate.real
	rz |= nilstate.truevalue >> b


function Number (NilTrackerFn)
	return .RealBool(msg.name.iszero)


function Char (NilTrackerFn)
	return .RealBool(msg.name.isnull)


function String (NilTrackerFn)
	opt norefcounts
	StringCorrector.CollectString(msg, scfunction.currfunc!.IsLibrary)
	return .RealBool(!msg.length)


//function NoRegAddrs
//	visible
//	|int| b
//	NoRegAddrs2(b)
//
//
//function NoRegAddrs2 (|!&int| a)
//	a = a + 1
//	a[] = 2


function NilFunction (NilTrackerFn)
	opt norefcounts
	test &=~ NilCheckMode.Disappears
	|| fp = msg.first!
	|| prms = fp.next!
	
	|| fn = prms.obj|SCFunction|
	if !fn
		fn = fp.GetFunctionPointer$
		fp = fp.unbra
		require .UseAsReal(fp, 0, nilreason.accessing)					// (abc)()

	ifn ((fn != scfunction.currfunc) or t.anyreturns or t.BranchDepth > 0)
		ErrorReceiver.NewCriticalError(msg, "Recursion fail: This would freeze.")
			
	
	if (Test is Active) and fn.IsNilChecker
		if fn.isnilchecker != 3
			Test |= NilCheckMode.Soft
		if t.FnAbleToNilCheck
			rz = nilstate.FnBecomesNilCh
	  else
		Test = 0
	
	|| P = prms.first
	|| HasAddrs = 0
	for recv in fn.args
		recv.Paramfix
		p.VariableParamSafety
		if (recv.nildeclared is optional) and (fn.IsNilChecker != 3)
			test |= nilcheckmode.Soft
			
		expect (p) (msg, "Compiler did not fully type this function.") 
		test |= nilcheckmode.AllowRegisterAddr
		|| v = .Jump(p!, test)
		if rz and !(v is FnBecomesNilCh) and p!.isfirst
			rz = 0 // can't work
		|| sent = p!.FastDecl
		
		HasAddrs |= sent.CanUpgradeRegister
		
		if (v is nilish)
			.NilParamPass(recv, sent, p!, fn, v)

		Test = 0
		p++
	
	if HasAddrs
		p = prms.first
		for recv in fn.args
			|| Sent = p!.FastDecl
			|| In = sent.CanUpgradeRegister
			if In == 1
				|| SentIn = sent.Internal!
				|| ri = recv.internal!
				// are we passing this backwards? Or was there some reason for it?
				// we'd have to swap and test to see if it makes more sense or less.
				
				.VariableSet(SentIn, recv.source!, ri, p!, ri.nilcurr)				
//				.VariableSet(SentIn, p!, ri, recv.source!, ri.nilcurr) // surely its this?

			  elseif In == 2
				.VariableSet(Sent, recv.source!, recv, p!, recv.nilcurr)

			p++

	if fn Is Killer
		.DeclKill
		if (t.BranchDepth == 0)  and  !t.AnyReturns // also if no returns happened...
			(scfunction.currfunc! is killer)
		msg.LastInBlock(SCBlockage.Quit) // may happen later than expected
		return nilstate.Killer
	
	|| ret = fn.ReturnType
		rz |= ret.NilDeclared
		check ((rz is stated) or !ret.TypeSuffers) (msg, "Nil-decoration needed on return type of function: " + fn.RenderName)



function Rejoin (NilTrackerFn)
	opt norefcounts
	return .jump(msg.first!, Test) 



function DetectStillChecks (|message| first, |nilstate|)
	require first
	rz = .jump(first)
	if !t.FnAbleToNilCheck or (rz is FnBecomesNilCh)
		return rz

	|| F = first.TrueNess(rz)
	|| SelfNil = t.self is nilish 
	if f.Knownfalse
		if !SelfNil
			t.FnAbleToNilCheck = false		// also require that false returns ALWAYS have self nil!
		// optional is allowed to return false
	  elseif rz is FnBecomesNilCh			// its ok
		0
	  elseif SelfNil
		t.FnAbleToNilCheck = false			// Nilcheckers require only return true if self is not nil!



function Return (NilTrackerFn)
	opt norefcounts
	|| v = .DetectStillChecks(msg.first)
	.Loops.ExitRecord |= nilstate.Basic		// mark as exitting safely.
//	.CloseVars(msg)
	.DeclKill
	t.anyreturns = true
	|| ret = t.return
	require ret and ret.typesuffers

	if ret.StatedReal
		expect (v isnt nilish) (msg, "Declaration does not allow returning " + v.rawname)
	ret.NilDeclared = ret.nildeclared ||| (v&nilstate.either)				// assume real, unless it becomes optional??
	target debugnil
		ret.NilPrint("return")



function Exit (NilTrackerFn)
//	.CloseVars(msg, .loops.VarCount)
	.loops.ExitRecord |= .EndBlock
	.loops.hasEscape = true



function Continue (NilTrackerFn)
//	.CloseVars(msg, .loops.VarCount)
	.loops.ContRecord |= .EndBlock



function While (NilTrackerFn)
	opt norefcounts
	|| cond = msg.first!
	|| CondTest = cond.IsAlwaysBool

	require !CondTest.KnownFalse and T.BranchEnter(msg)

	|| W = .loops.BeginLoop(!condtest.KnownTrue)
	for i in 3 
		.SyncJump(cond, NilCheckMode.whilepos)
		.Argument(cond.next!)
		.Loops.NextLoop

	if !condtest.KnownTrue
		.SyncJump(cond, NilCheckMode.whileneg)
		.loops.exitrecord |= .value // merge this
	
	.loops.FinishLoop(msg)
	ArchonPurger.loops = W

	return t.BranchExit(0)
	


function If (NilTrackerFn)
	opt norefcounts
	todo "we could store numbers on the "if" tmp... to check what decls have been altered"
	
	|| cond = msg.first!,  || arg1 = cond.next
	expect (arg1) (msg)
	|| Else = arg1.next,   || arg2 = else.first
	|message| ElseIfCond
	if arg2 and arg2 != @arg
		ElseIfCond = arg2
		arg2 = arg2.next

	|| Orig = T.BranchEnter(msg) #require
	#!"First Branch"
	.SyncJump(Cond, NilCheckMode.Ifpos)
	.Argument(arg1)
	
	|| First = T.BranchSwap(Orig)

	#!"Second Branch"
	.SyncJump(cond, NilCheckMode.ifneg) // we need the negative, for the merging.
	if ElseIfCond
		.if(Else)
	  elseif arg2.HasAny
		.Argument(arg2)
	return t.BranchExit(First)



function Tern (NilTrackerFn)
	opt norefcounts
	test &=~ NilCheckMode.Disappears
	msg = msg.second!

	|| Orig = T.BranchEnter(msg)	#require
	|| tC = msg.first!,  || tA = tC.next!,  || tB = tA.next!

	#!"First Branch"
	.jump(tC, NilCheckMode.positive)
	rz = .JumpWithinBool(tA, test)
	|| First = T.BranchSwap(Orig)

	#!"Second Branch"
	.JumpWithinBool(tC, nilcheckmode.negative)
	rz |= .JumpWithinBool(tB, test)
	t.BranchExitBool(First, test, orig)
	rz &= ~nilstate.FnBecomesNilCh	// in theory if BOTH were nil-testers... its OK
									// but thats sooo awkward to even think of a real-case
									// where I want this! Just don't do it!


function BooleanLogic (NilTrackerFn)
	opt norefcounts
	|| AA = msg.first!
	|| BB = msg.last!
	|| IsAnd = test is AND
	(test is AND) = false 

	|| Orig = T.BranchEnter(AA)	#require
	if IsAnd == (test is positive)
		|| NC = .Jump(AA, test ||| nilcheckmode.ForBools)				// x = (!a or !a.y)
		NC   |= .JumpWithinBool(BB, test)
		t.BranchExitBool(.value, test, orig)
		return nilstate.real ||| (NC & nilstate.FnBecomesNilCh)
	
	#!"test A+"
	.Jump(AA, test)
	|| First = T.BranchSwap(Orig)

	#!"test A-B+"
	.Jump(AA, test.negate ||| nilcheckmode.ForBools)
	.JumpWithinBool(BB, test)

	return t.BranchExitBool(First, test, orig)



function SuperSmartMagicCompare (|message| ll, |message| rr, |nilcheckmode| test, |scoperator| scop,   |nilstate|)
	opt norefcounts
	|| todo = 3
	
	if  ll.func == @thg and rr.func == @thg and test is Active
		if (scop Is EqualOrNot) and ((test is positive) == (scop is ExactlyEquals)|bool|)
		//	if real == x
		//		x becomes real
		// if real != x
		//     0
		//   else
		// 		x becomes real
			|| ld = ll.obj|scdecl|!
			|| rd = rr.obj|scdecl|!
			|| ldl = ld is local
			|| rdl = rd is Local
			if ldl or rdl
				if rdl and ld.NilCurr == NilState.Realish
					T.SetNilness(rd, NilState.real)
					todo &= ~2
				if ldl and rd.NilCurr == NilState.Realish
					T.SetNilness(ld, NilState.real)
					todo &= ~1
	
	if todo & 1
		.jump(ll, NilCheckMode.soft)
	if todo & 2	
		.jump(rr, NilCheckMode.soft)
	return nilstate.real


function CompareObjs (|message| ll, |message| rr, |nilcheckmode| test, |scoperator| scop,  |nilstate|)
	opt norefcounts
		
	|| LNil = ll.IsNowNil
	|| RNil = rr.IsNowNil
	if !lnil and !rnil
		return SuperSmartMagicCompare(ll, rr, test, scop)

	if lnil and rnil
		|| lld = ll.FastDecl
		if lld.DepthOfBranch >= .Loops.BranchDepth
			return ll.Redundantvar(lld, test)
		if lnil + rnil != 3
			return nilstate.real
	
	  elseif (2 == (lnil + rnil))		// || x = (a.b.c == objThatisCurrentlyNil)
		.jump(ll)
		.jump(rr)
		return nilstate.real

	if scop Is NilTest
		|| side = (rr, ll)(lnil == 1)
		if test is active
			(test is reversed) = scop Is ExactlyEquals
			test = test.activate
		return .jump(side, test)
	
	error (ll.next, "Nil can't accept this operator. Use != or ==.")


function Thing (NilTrackerFn)
	opt norefcounts
	|| dcl = msg.FastDecl
	rz = .ThingSub(msg, test, dcl)
	
	if dcl is NeedsClose and dcl isnt Grabbed
		|| nreg = dcl.NilReg
			t.closers[nreg] = msg.UpToArg
	
	msg.Indent = rz				// The msg now knows the current state! Nice!
	if t.FnAbleToNilCheck and dcl is self
		rz |= nilstate.FnBecomesNilCh


function ThingSub (|message| msg,  |nilcheckmode| test,  |scdecl| dcl,  |nilstate|)
	opt norefcounts										// Handles 10 different cases :O

	if !dcl.Suffers
		return dcl.nildeclared
	
	|| Unknown = dcl.IsUnknownParam 		
	if Unknown and (test isnt soft and disappears)
		if test isnt Active							// set var A to unknown prm B, so default to real
			return .BecomeReal(dcl, msg, NilReason.Reading)
		dcl.NilDeclared = nilstate.optional

	|| Y = dcl.NilCurr
	if  test isnt active  or  test is soft and Negative
		return Y

	if Unknown or (Y==nilstate.either) or (Y != (test&nilstate.Either))
		return T.SetNilness(dcl, Test)

	return msg.Redundantvar(dcl, test)


function StatExpr (NilTrackerFn)
	opt norefcounts
	return Argument(msg.first!, test)
 

function Argument (NilTrackerFn)
	opt norefcounts
	|| VarDepth = .value.DepthOfVars
//	ArgDepth++
	
	for s.fast in msg
		|| t = test & -s.islast
		if (rz is borked) and !stderr.ok
			exit // needs a clean space for borking
		|| prev = rz
		rz = .SyncJump(s, T ||| nilcheckmode.Disappears)
		if prev is borked
			error.AutoPrint = .oldprint
			expect !(stderr.ok) (s, "Borking but no zergs found?")
			stderr.clear
		if rz is Killer
			exit
	
//	--ArgDepth
	|| FinalVars = ArchonPurger.value
	|| Allowed = (1|uint64| << ((vardepth+1)<<1)) - 1|uint64|
	t.value = FinalVars & Allowed
	
//	.MergeVars(msg, finalvars, vardepth)


function Bracket (NilTrackerFn)
	opt norefcounts
	if msg.length					// a? --> (a) // but the bra has a name
		test |= NilCheckMode.Soft
	return .Jump(msg.first!, test)


function Type (NilTrackerFn)
	opt norefcounts
	|| F = msg.first!
	|| ns = .Jump(F, test) &~ nilstate.FnBecomesNilCh
	|| d = msg.FastDecl
	if !d.TypeSuffers
		return nilstate.real
	|| fd = f.FastDecl
	if fd.TypeSuffers // return inner suffering
		return ns
	
	return d.nildeclared // we created new suffering, so lets pass that back.


function Brel (NilTrackerFn)
	opt norefcounts
	|| b = msg.name[]
	if b == '*'
		error  (msg, "bad ASMType")	
//		return Pointer(msg, test)				// *abc

	|| ch = msg.first!
	if b == '-' or '+'							// for ++ or --
		return .jump(ch, test)
	if b == '!'
		return .Not(ch, test)
	
//	if b == '&'
//		(ch.FastDecl is AddressOfTaken)
	.Jump(ch, test)
	return nilstate.real						// & ~ both return real


function Not (NilTrackerFn)
	test = (test ||| nilcheckmode.reversed).activate
	|| a = .jump(msg, test)
	return a &~ nilstate.FnBecomesNilCh


function Arel (NilTrackerFn)
	opt norefcounts
	|| ch = msg.first
		rz = .jump(ch, test)
		|| b = msg.name[]
		if b == '!'
			rz &=~ nilstate.nilish
			rz |=  nilstate.realish
		  elseif b == '?' // won't it be transformed already?
			0
		  else
			if PostIncrementNil.Sync
				PostIncrementNil.Check(ch)
			if t.InsideBoolLogic
				error (ch, "Can't post-increment within boolean-logic")


function Declaration (NilTrackerFn) // function decl 
	opt norefcounts
	|| rel = msg.last!			// || x = y  --> x = y
	|| thg = rel.first			// x = y     --> x
		|| d = thg.FastDecl
		|| J = .Jump(rel.last!)
		if d.IsReg
			return T.Declare(D, J, msg)
	  else
		// carrays declared like: |int[1]| LocalVar
		|| d = rel.FastDecl // hmmm. a carray?
		if d.IsReg
			return T.Declare(D, nilstate.real, msg)
	



function Swapity (|scdecl| LD, |message| L, |scdecl| RD, |message| R, |nilstate| RN, |nilstate|)
	opt norefcounts
	|| LL = l.Unwrap
	if ll != @acc // memory access... must work
		check (LD is VarType) (L, "Can't swap. Must be a real variable somewhere.")
	return .VariableSet(LD,L,  RD,R,  RN)


function Swap (NilTrackerFn)
	opt norefcounts
	|| P = msg.last
	|| R = P.last!
	|| L = P.first!
	|| LD = L.FastDecl
	|| RD = R.Fastdecl
	|| RN = .Jump(R)
	|| LN = .Jump(L)

	.swapity(LD,L,  RD,R,  RN)
	.swapity(RD,R,  LD,L,  LN)


function SetRel (NilTrackerFn)
	opt norefcounts
	|| R = msg.last!
	|| L = msg.first!
	|| LD = L.FastDecl
	test = (nilcheckmode.soft) * (ld isnt local  and  ld.nildeclared == nilstate.optional)
	|| RN = .Jump(R, test)
	// to run this:  *a = *b
	// we would need to run *b first to get the value. So right-side has to be run first.
	.Jump(L, nilcheckmode.Assigns)
								
	return .VariableSet(LD, L, R.FastDecl, R, RN)


function Fail (NilTrackerFn)
	.OldPrint = error.autoprint 
	error.AutoPrint = 0
	return nilstate.borked


function NilParamPass (|scdecl| Recv, |scdecl| Sent, |message| where, |scfunction| f, |nilstate| v)
	opt norefcounts
	if recv.StatedReal
		.BecomeRealSub(sent, where, nilreason.passing, recv, f, v)
	  elseif !recv.nilstated and f != scfunction.currfunc  // haha
		recv.NilPrmFail(f)
	

function VariableSet (|scdecl| Recv, |message| RecvMsg, |scdecl| Sent, |message| SentMsg, |nilstate| SentState, |nilstate|) // setrel, relset
	opt norefcounts
	if !recv.typesuffers
		return nilstate.real
	expect (!recv.IsUnknownParam) (recvmsg, Recv.PrmStateMsg("Need to set it into another var."))

	if recv.StatedReal and ((recv isnt local) or (recv is reference))
		if SentState isnt nilish
			return sentstate
		if (SentState is realish) 
			return .BecomeReal(sent, SentMsg, NilReason.using)
		
		if (recv is property) and (recvmsg.func == @dot)
			if (scfunction.currfunc is constructor) and (recvmsg.first!.fastdecl is self)
				error (RecvMsg, "Property should be non-nil in constructor: " + recv.name)
				return nilstate.real
		
		error (RecvMsg, "Nil is not allowed on: " + recvmsg.origrender)
		return nilstate.real
		
	if recv.Suffers
		return T.SetNilness(recv, SentState)


function BecomeReal (|scdecl| sent,  |message| where,  |nilreason| reason,  |scdecl?| recv = nil,  |scfunction?| To = nil, |nilstate|)
	opt norefcounts
	|| Curr = sent.NilCurr
	if curr == NilState.Realish
		return curr
	
	return .BecomeRealSub(sent, where, reason, recv, to, curr)


function BecomeRealSub (|scdecl| sent,  |message| where,  |nilreason| reason,  |scdecl?| recv,  |scfunction?| To, |nilstate| curr, |nilstate|)
	if (Curr == nilstate.either) and sent.IsUnknownParam
		T.BecomeRealSub(sent)
		return T.SetNilness(sent, NilState.real)

	if recv and !recv.TypeSuffers		// passing nil to int
		return NilState.Real

	return .FailedReal(to, where, reason, curr)


function FailedReal (|scfunction| To, |message| where, |nilreason| reason, |nilstate| state, |nilstate|)
	|| fs = faststring()					// "Passing optional: S.pop to RefCount"
	fs <~ nilreason.values[reason]!
	|| raw = state.RawName
	ifn where isthing raw
		fs <~ ' '
		fs <~ raw
	fs <~ ':'
	fs <~ ' '
	where.OrigRender(fs)
	if To
		fs <~ " to "
		if where.isfirst and to.cls
			fs <~ to.Name
		  else
			to.rendertitle(fs)
		problem (to.source, kUsingStr)
	error (where, fs)
	
}


function scdecl.IsUnknownParam (|bool|)
	opt inline
	return (!.nilstated) and (self is param)


function message.Trueness (|nilstate| found, |maybebool|)
	opt norefcounts
	real self
	|| d = .FastDecl
	|| ret = ArchonPurger.t.Return$
	if d.FastMatch(ret)
		|| n = d.nildeclared
		if n & nilstate.KnownValue
			return maybebool.Known(n is TrueValue)
		if found & nilstate.knownValue
			return maybebool.Known(found is TrueValue)

	  elseif Ret.IsDataTypeOnly and d.IsDataTypeOnly // nothing special
		while self == @arg or @bra
			self = self.last
		if self matches ret.type.false
			return maybebool.Known(false)
	// return maybe


function message.operatormatches (|message| m, |bool|)
	return self and m and (.func == m.func)  and  (.name ~= m.name)


function scdecl.Paramfix
	(self is param)
	(self isnt body)


function message.VariableParamSafety
	opt norefcounts
	require .HasAny
	|| fn = .func
	if fn == @brel or @arel
		|| s = .name[]
		if s == '-' or '+'
			// we are altering this... so we wanna check PREVIOUS uses of the var
			return .DenyPreviousUse(self)
	  else
		for ch.flat in self
			fn = ch.func
			if fn == @brel or @arel
				|| s = ch.name[]
				if s == '&' or '-' or '+'
					.DenyPreviousUse(ch)


function message.DenyPreviousUse (|message| msg)
	opt norefcounts
	|| thg = msg.first!.UnBra
	require thg.func == @thg
	|| decl = thg.obj #require

	for ch.flat in .parent
		if ch == self
			return 
		if ch.obj == decl
			error (ch, "Unsafe var passing. (Altered later in expression)")
	

