
/*
	Jeebox internals. By Theodore H. Smith...
*/


module SCRefs {

linkage
	cpp_part Refs



flags
	kBasisNotObj = 0 // just be 0, for #require
	kBasisObj
	kBasisDeSTRUCTable
	kBasisTempStruct
	kBasisCArray

	kSufferedNoise
	kIsNoisy
	kIsDisowner
	kHoldsDisowned
	kNotDisturbed = 0 // must be 0, for #require


function Message.FindRef (|SCFunction| fn, |string| name, |Message|)
	opt norefcounts
	for (curr.forward in self)
		if (curr == @func)
			|| prms = curr.last
			if (prms) and (prms.obj == fn) and (prms.first isthing name)
				return Curr


function Message.LastUsedFix (|Message|)
	opt norefcounts
	if (self == @Decl)
		|| Ch = .second.first
		expect (Ch == @thg)
		if (SCRefs.RefBasis(ch, true) == SCRefs.kBasisObj)
			// we returning an object. need to scan for the first incr of that object...
			|| it = .FindRef(Compiler.RefIncr, Ch.name)
				return it.Next
	
	return .Next  
 

function DeclInit (|Message| dcl, |SCFunction| fn, |bool| IsJustAnArg)
	opt norefcounts
	|| Basis = RefBasis( dcl, true )
	if fn.dorefs
		require basis
	  else
		require basis & kBasisDestructable
	
	|| arg = Dcl.Parent!
	|| name = Dcl.DeclName!
	|Message| LastPlace
	if (Basis & kBasisObj)	// could be a struct?
		LastPlace = LastUsedRefPlace( name, arg )
	
	|| Blocker = arg.CausesUnReachable( arg, dcl, LastPlace )
	
	if (Basis == kBasisObj)								// we want == not & here
		RefIncr( name, dcl, IsJustAnArg )
	Blocker := LastPlace
	ReturnHandle( Blocker, arg, name, basis )
	
	|| Curr  = dcl
	|| After = arg.FlatAfter
	while  (Curr != After)  and  (Curr != LastPlace) 
		if (Curr == @Arg)
			|| Block2 = Curr.CausesUnReachable( arg )
				ReturnHandle( Block2, nil, name, basis )
		Curr = Curr.FlatNext


function scfunction.DoRefs (|bool|)
	return self isnt NoRefCounts


function RefBasis (|Message| msg, |bool| SetOnly, |int|)
	return RefBasisStruct(msg, SetOnly) &~ kBasisTempStruct 


function RefBasisStruct (|Message| msg, |bool| SetOnly, |int|)
	opt norefcounts
	|| type = msg.asdecl
	ifn type isa SCDecl
		type = TypeOfExpr( msg, nil )$
	
	if type.IsReffable(SetOnly)
		if type.IsCArray
			return kBasisCArray ||| kBasisObj
		if  type is self  and  scfunction.CurrFunc is Constructor
			return 0
		Return kBasisObj
	
	if type.HasStruct
		|| fn = type.type.destructorfunc
			return kBasisDestructable
		|| p = msg.niceparent
		if p isbrel "&"
			return kBasisTempStruct


function RC_Rel (|Message| rel)
	// a = b.c   ->   || tmp = b.c, jb_incr(tmp), jb_decr(a), a = tmp
	opt norefcounts
	
	|| First = rel.first!
	require RelNeedsRef( rel, first )
	
	|| result = NewFnc( "JB_SetRef" )
	|| lst = result.Last!
	lst <~ first
	lst <~ rel.Last
	lst.obj = Compiler.RefSetRef

	rel.ReplaceWith( result )


function RC_IgnoreReturn (|Message| msg, |bool| DoRefs)
	opt norefcounts
	require RefBasis( msg, false ) == kBasisObj
	if msg.func == @func
		|| dcl = msg.last!
		if dcl.func == @prm
			|| fn = dcl.obj!|scfunction|
			require fn isnt constructor
	
	|| free_if_dead = RefMsg0( "JB_FreeIfDead", Compiler.RefFreeIfDead )
	msg.FuncWrap( free_if_dead )


function RefDecr (|Message| msg, |Message| place, |int| Basis)
	// a = nil   ->   JB_decr(a),  a = nil 
	opt norefcounts
	
	|| OldPrev = place.Prev
	if (OldPrev) and (OldPrev == @Func) and (OldPrev.first ~= "JB_SafeDecr")
		place = OldPrev // safedecr always comes last
	
	|message| what 
	if basis & kBasisCArray
		what = DecrMulti( msg.parent!.asdecl!, msg.copy )
	  else
		what = RefDecrMsg( msg )
	if place == @arg
		place <~ what
	  else
		place.Prev = what


function DecrMulti (|scdecl| d, |message| m, |message|)
	opt norefcounts
	|| Int = d.c_array.msg
	int.obj = typeint!.typenormal // nice
	rz = macros.MultiDecr.run(m, Int)
	|| prm = rz.second
		prm.obj = Compiler.RefDecrmulti
		rz.obj = typevoid


function RefDecrMsg (|Message| msg, |Message|)
	return RefMsg( msg, "JB_Decr", Compiler.RefDecr! )


function RefClearMsg (|Message| msg, |Message|)
	// return refdecrmsg(msg) // for now
	return RefMsg( msg, "JB_Clear", Compiler.RefClear! )


function RefMsg (|Message| msg, |String| name, |SCFunction| func, |Message|)
	opt norefcounts
	rz = NewFnc( name )
	|| lst = rz.Last!
	lst <~ msg.Copy // shouldn't copy always... sometimes we want it directly, like .FillInDestructor!
	lst.obj = func
	rz.position = -1
	rz.obj = func.returntype ?? typevoid


// RefMsg/reffunc are almost the same... sigh.
function scfunction.RefFunc (|message| prm, |message| after)
	opt norefcounts
	parser.using.position = -1
	|| rz = «func »
	after.next = rz
	rz <~ (@thg, .exportname)
	rz.obj = prm.obj

	|| lst = rz.msg(@prm) 
	lst.obj = Compiler.RefIncr
	lst <~ prm


function RefIncr (|Message| msg, |Message| Place, |bool| IsJustAnArg=false)
	opt norefcounts
	if (IsJustAnArg)
		Place = msg.parent.parent
	  else
		if (Place == @decl)
			msg = Place.last
			if (msg == @rel)
				msg = msg.last!
				if msg.IsStatementExpr
					return msg.AvoidSafeDecr
		require !(msg.unbra isthing "nil")
		Place = msg

	Compiler.RefIncr!.RefFunc(msg, place)


function Message.AvoidSafeDecr
	opt norefcounts
	|| arg = .first
	|| decr = arg.last.prev
	|| prms = decr.Last
		if prms.obj == Compiler.RefSafeDecr
			prms.first.becomenil?  // remove it without, removing it. cos its still tested for in RefDecr!


function message.BecomeNil
	.name = "nil"
	.obj = TypeNil
	.clear

	
function RefDestructorMsg (|Message| msg, |SCFunction| fn, |Message|)
	return RefMsg( msg, fn.exportname, fn )


function RefCheckDisturbance (|Message| dcl, |int|)
	require RefBasis( dcl, false ) == SCRefs.kbasisobj
	
	Return kSufferedNoise // for the moment.
	
	|| msg = dcl
	|| arg = dcl.Parent
	// Loop should start at "Dcl", that's why we predefine it.
	// unless there's a better way?
	|| name = dcl.DeclName.name
	
	for (msg.ScanArg in arg)
		|Message| IgnoreArg
		if (msg == @Tmp)
			 IgnoreArg = msg.find(@Arg)
		
		for (f in msg.CollectFuncsUsed( IgnoreArg ))
			if (f.refs.disturbs)
				 Return kSufferedNoise
		
		if (msg == @Rel) and RelChangesDisowned( msg, name )
			Return kSufferedNoise
	
	Return kNotDisturbed


function message.IsReturnOrRejoin (|bool|)
	return (self == @tmp) and (self == "return" or "rejoin")


function Message.UnReachable (|Message|)
	return .CausesUnReachable(self)


function Message.CausesUnReachable (|Message| arg, |Message?| Dcl=nil, |Message?| LastPlace=nil, |Message|)
	opt norefcounts
	|| Curr = dcl ?? .First

	while (curr and curr != LastPlace)
		if (Curr == @Tmp)
			|| s = Curr.name
			if (s == "return")
				Return Curr

			if (s == "exit" or "continue")
				if SCRefs.ExitHitsOrGoesPast( Curr, arg )
					Return Curr
			  elseif (s == "rejoin") and (self == arg)
				Return Curr
		Curr++


function ExitHitsOrGoesPast (|Message!| curr, |Message!| arg, |bool|)
	opt norefcounts
	// while {||A, exit}			 // true
	// while {||A, if(true){exit}}   // true
	// while {if(true){||A, exit}}   // true
	// while {while {||A, exit}}	 // false
	while
		curr = curr.Parent
		if curr == arg
			Return true
		if curr IsTmp "while"
			return false


function RelNeedsRef (|Message| msg, |Message| first, |bool|)
	// only objects
	require (RefBasis( first, true ) == kBasisObj)
	
	// if left side is a property, do it regardless.
	if (first == @Dot)
		return true
	
	Return true // for now
	
	Return first.VarOptFlag(kSufferedNoise)


function Message.SetType (|DotUseType|)
	opt norefcounts
	|| d = .dottype
		return d
	if .func == @acc
		return DotUseType.memory
	if self isbrel "*"
		if .ASMType!=ASMtmp.kPointer // what?
		return DotUseType.memory


function Message.DotType (|DotUseType|)
	opt norefcounts
	if .func == @Dot
		|| d = .obj
		if d isa scdecl
			Return (d is property) * DotUseType.Property 


function RelChangesDisowned (|Message| msg, |String| name, |bool|)
	return false // for now
	
	|| first = *msg
	if (first IsThing name)
		Return first.VarOptFlag(kHoldsDisowned)



function RefMarkAsDisturber (|Message| msg, |SCFunction| fn)
	opt norefcounts
	|| r = fn.refs
		|| ds = r.DisturbsGet
			ds <~ "object"


function RefSafeDecr (|Message| msg, |Message| place)
	// a = nil   ->   a = nil, JB_decr(a)
	if (place == @Arg)
		place <~ SafeDecrMsg( msg )
	  else
		place.Prev = SafeDecrMsg( msg )


function ExprNeedsTemping (|Message| child, |Message| name, |bool|)
	opt norefcounts
	require RefBasis( name, false ) == kBasisObj
	
	for s.flat in child
		if s isthing name.name
			Return true


function Destructable (|Message| Blocker, |Message| arg, |Message| name)
	opt norefcounts
	|| type = TypeOfExpr(name, nil, nil)
	require (type isa SCDecl)
	
	|| fn		= type.type.destructorfunc!
	|| FnMsg	= RefMsg0(fn.exportname, fn)
	|| brel = fnmsg.last.msg(@brel, "&")
	|| NewThg = brel.msg(@thg, name.name)
	newthg.obj = name.obj // needed
	if (Blocker)
		Blocker.Prev = Fnmsg
	  else
		arg <~ Fnmsg


function ReturnTempMoveOut (|Message| Child, |Message| blocker)
	|| Temp = SCFunction.TempMoveOut( child, blocker ) // still need to ref it.
	ReturnTempMoveOutSub(child, blocker, temp)


function ReturnTempMoveOutSub (|Message| Child, |Message| blocker, |message| temp)
	if RefBasis(child, false) == kBasisObj
		RefIncr( child, temp.ParentPoint! )
		RefSafeDecr( temp, blocker )


function message.DoesAnything (|bool|)
	if self
		require self != @thg and @num and @str and @char
		return true


function ReturnHandle (|Message| Blocker, |Message?| arg, |Message| name, |int| Basis)
	if (Basis & kBasisDestructable)
		if (!Blocker)
			return .DeStructable(Blocker, arg, name)
		
		|| ch = Blocker.first
		if (Blocker.isReturnOrRejoin  and  ch isThing name.name) or (blocker isthing name.name)
			return
		if (blocker == "return") and (ch.DoesAnything)
			|| NeedsMoreTemping = SCFunction.TempMoveOut( ch, blocker ) // still need to ref it.
			.DeStructable(Blocker, arg, name)
			ReturnTempMoveOutSub(ch!, blocker, NeedsMoreTemping)
		  else
			.DeStructable(Blocker, arg, name)
		return

	if (basis & kBasisTempStruct)
		return // no need?

	if (!Blocker)
		RefDecr( name, arg!, basis )
		Return

	|| IsReturn = Blocker.IsReturnOrRejoin
	|| Child = Blocker.first
		if IsReturn and (child.unbratype isThing name.name)
			RefSafeDecr( name, blocker ) // needs to come after any decr!
			return
		if IsReturn and ExprNeedsTemping( Child, name )
			ReturnTempMoveOut(Child, blocker)
	RefDecr( name, blocker, basis )


function RC_RelConstructor (|Message| rel)
	// a = b.c   -->   || a = b.c, jb_incr(a)
	
	|| First = rel.first!
	require RelNeedsRef( rel, first )
	
	|| Last = rel[ 2 ]!
	require !(last IsThing "nil")
	
	if Last != @Thg
		Last = SCFunction.TempMoveOut( Last, rel )
	
	RefIncr( Last, rel )



function Message.FuncWrap (|Message| fnc)
	opt norefcounts
	.Prev = fnc
	fnc.Last <~ self


function RefMsg0 (|String| name, |SCFunction| func, |Message|)
	opt norefcounts
	rz = NewFnc( name )
	rz.position = -1
	rz.second!.obj = func


function Message.IsProperty (|bool|)
	Return .DotType is Property


function Message.NiceParent (|Message|)
	return .UseNonRefChangers(true)


function message.RefTransparent (|bool|)
	opt norefcounts
	|| f = .func
	if f == @bra
		return true
	if f == @type
		return true
	if f == @arel or @brel
		|| n = .name.first
		return n == '?' or '!'


function Message.RemoveTypeCasts (|Message|) 
	opt norefcounts
	while rz and rz.RefTransparent
		rz = rz.first


function Message.UseNonRefChangers (|bool| parent=false, |Message|)
	opt norefcounts
	real self
	|| Last = self
	|| Curr = self
	
	while
		curr = curr.parent
		if !curr : return last

		|| f = curr.func
		if f == @type
			|| D = Curr.Obj
			if (D isa SCDecl)
				if !D.IsNormalObject
					return (curr, last)(parent)
		  elseif !curr.reftransparent
			return (curr, Last)(parent)
		
		Last = Curr // Make sure it's not a (bracket) or obj|typecast|



function Message.IsSettablePlace (|bool|)
	opt norefcounts
	real self
	|| p = .parent
	while p == @bra
		self = p
		p = p.parent
	return .IsFirstOfSetRel


function Message.IsSetRel (|bool|)
	opt norefcounts
	require (self == @Rel)
	|| s = .second
		return (s.name == "=")


function Message.IsFirstOfSetRel (|bool|)
	opt norefcounts
	return .isfirst and .parent.issetrel


function Message.IsSetIntoPlace (|message|)
	opt norefcounts
	|| p = .NiceParent
	if p.IsSetRel
		Return p.first


function Message.IsSetIntoVar (|message|)
	opt norefcounts
	|| thg = .IsSetIntoPlace
	if (thg == @thg)
		return thg


function message.IsInDeclInBlock (|message|)
	opt norefcounts
	if (self == @rel)
		|| P = .niceparent
		if (P == @decl) and (P in @arg)
			return P


function LastUsedRefPlace (|Message| name, |Message| arg, |Message|)
	// This function has good and bad sides to it.
	// Good: It makes dealing with tempvars very simple. user created or compiler created
	// Bad: Possible obscure destructor bug, fired before you expect.
	// Maybe ordering issues with writing to stdout, files, etc.
	opt norefcounts
	|| d = name.AsDecl #expect
	|| Type = d.Type
	require Type isnt NoEarlyFree 
	
	|| s = name.name
	|| found = name
	
	for c.Flat in arg
		if c IsThing s
			found = c
	
	// scan up until we hit the arg. return item's position in the arg.
	|| curr = found
	while (found != arg)
		curr = found
		found = found.Parent
	
	return curr.LastUsedFix


function SafeDecrMsg (|Message| msg, |Message|)
	return RefMsg( msg, "JB_SafeDecr", Compiler.RefSafeDecr! )


function RC_DeclArg (|scdecl| AR, |scfunction| fn)
	opt norefcounts
	|| dcl = AR.WriteNilDecl
	fn.SourceArg.First = dcl
	.DeclInit( dcl, fn, true )
	dcl.remove


function Message.RefDisappears (|bool|)
	opt norefcounts
	if .func == @func
		self = .parent // sigh
	for (P.up in self)
		|| f = p.func
		if (f == @Type)
			|| D = P.AsDecl #debug_require
			if !D.IsNormalObject
				return true
		  elseif p.RefTransparent
			0 // go up
		  elseif f == @prm
			return false
		  elseif (F == @arg)
			return true // right?
		  elseif (f == @rel)
			|| comp = P.second!.obj
			if (comp isa SCOperator)
				return (comp Is Compare and comp isnt custom)
			return false
		  else
			return false


function message.IsStatementExpr (|bool|)
	opt norefcounts
	return .ASMType == ASMtmp.kStatExpr


function message.RC_HasTemporary (|int|)
	if (self == @func) or (.IsStatementExpr)
		return screfs.RefBasisStruct(self, false)


function RC_NeedsOwnBlock (|message| msg, |message| pp, |bool|)
	opt norefcounts

	// Test if exists within and/or

	|| HitArg = false
	for ch.up in msg
		if  ch == @arg
			hitarg = true
		  elseif  ch == @rel
			|| opp = ch.second
			if (opp == @opp) and (opp == "or" or "and")
				return true
		  elseif  ch istmp "while"
			if !hitarg
				return true
		if ch == pp
			exit

	
function RC_HandleDisappearing (|SCFunction| fn, |Message| msg, |int| Basis)
	|| ch = msg.UseNonRefChangers
	if Basis & kBasisDestructable or kBasisTempStruct
		ifn msg.IsSetIntoPlace or ch.parent.IsReturnOrRejoin
			scfunction.TempMoveOut(Msg)
		return 
	
	require (Basis == kBasisObj) and (!msg.IsProperty)
	|| parent = ch.NiceParent
	require  (Parent != @Arg)  and  !(parent.IsReturnOrRejoin and ch.IsOnlyChild)  and  !ch.IsSetIntoPlace
	
	if ch.RefDisappears
		|| fnc = NewFnc( "JB_FreeIfDead" )
		fnc.last!.obj = Compiler.RefFreeIfDead
		fnc.obj = Compiler.RefFreeIfDead!.returntype
		msg.ReplaceWith( fnc )
		fnc.Last <~ msg
		return
	
	if (parent == @prm) 
		if (parent.obj == compiler.TernaryFunc)
			require ch.UseNonRefChangers == parent.first    //    (a,b)(c)-->(c,a,b)
		if (parent.obj == Compiler.RefFreeIfDead)
			return nil										// already done!!!
	
	|| pp = ch.ParentPoint!
	if RC_NeedsOwnBlock(ch, pp)
		ch.TempIntoBlock(pp)
	  else
		scfunction.TempMoveOut(Msg)



function scfunction.CallSuperMem (|SCFunction| fn)
	opt norefcounts
	|| root = .sourcearg $
	using root
	|| PCon = NewFnc(fn.exportName)
	|| lst = PCon.last!
	lst.obj = fn

	for (a in fn.args) (i)
		lst.msg(@thg, a.name).obj = .args[i]

	if (self is Constructor)
		PCon.obj = fn.ReturnType
		root.First!.next = PCon
	  else 
		PCon.obj = typevoid
		root <~ PCon


	
function scfunction.FillInDestructor
	opt norefcounts
	|| s = .sourcearg$
	|| c = .cls$
	|| first = s.FindDestructor
	Using s
	for d in c.Properties
		if d.IsReffable(true)
			s.AddBefore( first, d.RefDestructor )
		  else
			|| Destr = d.HasStructDestructor
				|| Addr = d.DeclToAddr(.self)
				s.AddBefore( first, SCRefs.RefDestructorMsg( Addr, destr ) )


function scfunction.FindCallParents (|message|)
	opt norefcounts
	|| s = .SourceArg
		rz = .CountCallsToParentAlloc( s )


function scfunction.CallParents 
	opt norefcounts
	require self is Constructor or Destructor
	require .IsARealSpdFunc and !.FindCallParents
	|| c = .cls $
	
	|| parent = c.realsuper
	require (parent and parent != TypeObject)

	|| t = c.isrole
	require t != 2

	|| fn = .ConOrDesForCall(c, self is constructor, t)
		.CallSuperMem( fn )


function scfunction.ConOrDesForCall (|scclass| c, |bool| IsConstructor, |int| Task,  |scfunction|)
	opt norefcounts
	|| parent = c.super		#require	
	|| fn = parent.ConOrDesForCall(isconstructor, task)
		return fn

	if self is Constructor
		expect (.cls == TypeObject) or (.cls!.super == TypeObject) (self, "Need call to superclass's constructor, but can't auto-create one.")


function SCClass.ConOrDesForCall (|bool| IsConstructor, |int| Task, |scfunction|)
	if !IsConstructor
		return .FirstDestructor
	if task <= 1
		return .ConstructorFunc!.ParamlessConstructor
	return .ConstructorFunc



function SCFunction.BuildConstructorDestructor
	opt norefcounts
	|| TheCall = .FindCallParents
	|| IsConstructor = self is Constructor
	|| root = .SourceArg$
	.CheckConstructorAndDestructor( root, IsConstructor )
	if IsConstructor
		if !thecall
			thecall = root.first
		.FillInMissingConstructorDefaults( root, TheCall )
	require StdErr.OK and !IsConstructor
	
	|| c = .cls$
	if !c.HasStuffToHandleInDestructor
		if !Root.HasAny
			c.DestructorFunc = nil
	  elseif !c.IsWrapper
		.FillInDestructor



function SCFunction.AnalyseRefs (|[message]| list)
	|| root				= .SourceArg
	|| IsConstructor	= self is Constructor
	for (msg.flat in root)
		|| it = msg.RC_HasTemporary  // need to always do this?
			if .dorefs or (it != screfs.kBasisObj)
				SCRefs.RC_HandleDisappearing( self, msg, it )
	
		
	// avoid reading same thing that we alter.
	for (msg.ScanArg in root)
		list <~ msg
	// can we remove this ^^^ at some point?
	
	
	if .dorefs
		for (ar in .args)
			if (Ar is altered) and (ar.IsNormalObject)
				SCRefs.RC_DeclArg(ar, self)

	for (msg.backwards in list)
		|| f = msg.func
		if (f == @Rel)
			if (IsConstructor and SettingSelfProperty( msg ))
				SCRefs.RC_RelConstructor( msg )
			  elseif (.dorefs or SettingMemory(msg))
				SCRefs.RC_Rel( msg )
			
		  elseif (f == @Dot)
			SCRefs.RC_IgnoreReturn( msg, .dorefs )
			
		  elseif (f == @Func)
			SCRefs.RC_CheckFuncAllocOK( self, msg )
			SCRefs.RC_IgnoreReturn( msg, .dorefs )  // func(a,b,c)
			
		  elseif (msg.IsStatementExpr)
			SCRefs.RC_IgnoreReturn( msg, .dorefs )
			
		  elseif (f == @Decl)
			SCRefs.DeclInit( msg, self, false ) // || a = b, incr(b)



function RC_CheckFuncAllocOK (|SCFunction| self, |Message| dot)
	// calling a constructor is only allowed... within a constructor.
	// calling a destructor is only allowed within a destructor.
	opt norefcounts
	ifn dot in @bra and dot.parent in @bra // allow
		|| fn = dot.last!.asfunc
			if (fn is Destructor) and self isnt Destructor
				error (dot, "Can only call destructors from within a destructor.")


function SCFunction.RefsCheckPropertiesAltered
	opt norefcounts
	// Really... only if the variable we return, is disowned,
	// then this function is a disowner!
	// then I could remove .ReturnsDisowned = true
	
	for (curr.ScanArg in .SourceArg)
		if (curr == @Rel)
			|| ch = curr.first	 // a.b = x
			if ch and ch.IsProperty				
				// (not on self, within constructor)
				ifn  (self is Constructor) and ( ch.first IsThing "self" )				
					SCRefs.RefMarkAsDisturber( ch, self )



function scdecl.DeclToAddr (|SCDecl| P0, |Message|)
	opt norefcounts
	rz = @brel + "&"
	rz <~ .DeclToDot(p0)
	rz.obj = .GetAddress


function scdecl.DeclToDot (|SCDecl| P0, |Message|)
	opt norefcounts
	rz = @dot + .Name
	rz.msg(@thg, "self").obj = p0
	rz <~ @emb
	rz.obj = self

}


function scdecl.RefDestructor (|message|)
	opt norefcounts
	|| m = .DeclToDot(scfunction.currfunc!.self)
	if .IsCArray
		return screfs.DecrMulti(self, m)
	return SCRefs.RefClearMsg( m )


function message.tEENGAGERS
	visible
	|| RP   = .NiceParent
	|| RightSide = rp.Last! // in case of syntax_cast
	|| RightSide2 = rp.Last // in case of syntax_cast
