
/*
	Jeebox internals. By Theodore H. Smith...
*/


module SCRefs {

linkage
	cpp_part Refs



flags
	kBasisNotObj = 0 // just be 0, for #require
	kBasisObj
	kBasisDeSTRUCTable
	kBasisTempStruct
	kBasisCArray

	kSufferedNoise
	kIsNoisy
	kIsDisowner
	kHoldsDisowned
	kNotDisturbed = 0 // must be 0, for #require


function Message.FindRef (|SCFunction| fn, |string| name, |Message|)
	opt norefcounts
	for (curr.forward in self)
		if (curr == @func)
			|| prms = curr.last
			if (prms.obj == fn) and (prms.first isthing name)
				return Curr


function Message.LastUsedFix (|Message|)
	if (self == @Decl)
		|| Ch = self[1].first
		expect (Ch == @thg)
		if (SCRefs.RefBasis(ch, true) == SCRefs.kBasisObj)
			// we returning an object. need to scan for the first incr of that object...
			|| it = .FindRef(Compiler.RefIncr, Ch.name)
				return it.Next
	
	return .Next  


function Message.NoPointlessBlockRefs (|message| dcl, |bool|)
	return true // for now... not sure how to fix.
	// like this one
	|| inside = «acc 
		«arr 
			«num "0"»
		»
	»

 

function RC_DeclInit (|Message| dcl, |SCFunction| fn, |bool| IsJustAnArg)
	|| Basis = RefBasis( dcl, true )
	if fn.dorefs
		require basis
	  else
		require basis & kBasisDestructable
	
	|| arg = Dcl.Parent
	|| name = Dcl.DeclName
	|Message| LastPlace
	if (Basis & kBasisObj)	// could be a struct?
		LastPlace = LastUsedRefPlace( name, arg )
	
	|| Blocker = arg.CausesUnReachable( arg, dcl, LastPlace )
	if blocker.NoPointlessBlockRefs(dcl)
		if (Basis == kBasisObj)								// we want == not & here
			RefIncr( name, dcl, IsJustAnArg )
		Blocker := LastPlace
		ReturnHandle( Blocker, arg, name, basis )
	
	|| Curr  = dcl
	|| After = arg.FlatAfter
	while  (Curr != After)  and  (Curr != LastPlace) 
		if (Curr == @Arg)
			Blocker = Curr.CausesUnReachable( arg, nil, nil )
			if (Blocker)
				ReturnHandle( Blocker, nil, name, basis )
		Curr = Curr.FlatNext


function scfunction.doRefs (|bool|)
	return !.NoRefCounts


function RefBasis (|Message| msg, |bool| SetOnly, |int|)
	return RefBasisStruct(msg, setonly) &~ kBasisTempStruct 


function RefBasisStruct (|Message| msg, |bool| SetOnly, |int|)
	opt norefcounts
	|| type = msg.asdecl
	ifn type isa SCDecl
		type = TypeOfExpr( msg, nil )$
	
	if type.IsReffable(setonly)
		if type.c_array > 0
			return kBasisCArray (|) kBasisObj
		Return kBasisObj
	
	if type.hasstruct
		|| fn = type.type.destructorfunc
			if fn isnt DestructorNotFromLocalRefs
				return kBasisDestructable
		|| p = msg.niceparent
		if p isbrel "&"
			return kBasisTempStruct


function RC_Rel (|Message| rel)
	// a = b.c   ->   || tmp = b.c, jb_incr(tmp), jb_decr(a), a = tmp
	
	|| First = rel.first
	require RelNeedsRef( rel, first )
	
	using (rel)
	|| result = NewFnc( "JB_SetRef" )
	|| lst = result.Last
	lst <~ first
	lst <~ rel.Last
	lst.obj = Compiler.RefSetRef

	rel.ReplaceWith( result )


function RC_IgnoreReturn (|Message| msg, |bool| DoRefs)
// just deal with it
	require RefBasis( msg, false ) == kBasisObj
	// Func(a,b,c) -> || tmp = Func(a,b,c),  JB_FreeIfDead(tmp)
	
	using (msg)
	|| free_if_dead = RefMsg0( "JB_FreeIfDead", Compiler.RefFreeIfDead )
	msg.FuncWrap( free_if_dead )


function RefDecr (|Message| msg, |Message| place, |int| Basis)
	// a = nil   ->   JB_decr(a),  a = nil 
	opt norefcounts
	
	|| OldPrev = place.Prev
	if (OldPrev) and (OldPrev == @Func) and (OldPrev.first ~= "JB_SafeDecr")
		place = OldPrev // safedecr always comes last
	
	|message| what 
	if basis & kBasisCArray
		what = DecrMulti( msg.parent.asdecl, msg.copy )
	  else
		what = RefDecrMsg( msg )
	if place == @arg
		place <~ what
	  else
		place.Prev = what


|[message]| RefPrms
function DecrMulti (|scdecl| d, |message| m, |message|)
	opt norefcounts
	RefPrms.clear
	refprms <~ m
	RefPrms <~ d.c_array.msg
	rz = (macros.MultiDecr)(RefPrms)
	|| prm = rz.second
		prm.obj = Compiler.RefDecrmulti
		prm.parent.obj = typevoid


function RefDecrMsg (|Message| msg, |Message|)
	return RefMsg( msg, "JB_Decr", Compiler.RefDecr )


function RefClearMsg (|Message| msg, |Message|)
	// return refdecrmsg(msg) // for now
	return RefMsg( msg, "JB_Clear", Compiler.RefClear )


function RefMsg (|Message| msg, |String| name, |SCFunction| func, |Message|)
	using (msg)
	rz = NewFnc( name )
	|| lst = rz.Last
	lst <~ msg.Copy
	lst.obj = func
	rz.position = -1 // why not. its not real.
	rz.obj = func.returntype ?? typevoid


// RefMsg/reffunc are almost the same... sigh.
function scfunction.RefFunc (|message| prm, |message| after)
	opt norefcounts
	parser.usingpos = -1
	|| rz = «func »
	after.next = rz
	rz.msg(@thg, .exportname)
	rz.obj = prm.obj

	|| lst = rz.msg(@prm) 
	lst.obj = Compiler.RefIncr
	lst <~ prm


function RefIncr (|Message| msg, |Message| Place, |bool| IsJustAnArg=false)
	if (IsJustAnArg)
		Place = msg.parent.parent
	  else
		if (Place == @decl)
			msg = Place.last
			if (msg == @rel)
				msg = msg.last
		require !(msg.unbra isthing "nil")
		Place = msg

	Compiler.RefIncr.RefFunc(msg, place)


function RefDestructorMsg (|Message| msg, |SCFunction| fn, |Message|)
	return RefMsg( msg, fn.exportname, fn )


function SCFunction.MaxVars (|int|)
	opt norefcounts
	for ch.flat in .source
		if ch == @arg
			|| a = ch.asarg
				(rz max= a.count)


function RefCheckDisturbance (|Message| dcl, |int|)
	require RefBasis( dcl, false ) == SCRefs.kbasisobj
	
	Return kSufferedNoise // for the moment.
	
	|| msg = dcl
	|| arg = dcl.Parent
	// Loop should start at "Dcl", that's why we predefine it.
	// unless there's a better way?
	|| name = dcl.DeclName.name
	
	for (msg.ScanArg in arg)
		|Message| IgnoreArg
		if (msg == @Tmp)
			 IgnoreArg = msg.find(@Arg)
		
		for (f in msg.CollectFuncsUsed( IgnoreArg ))
			if (f.refs.disturbs)
				 Return kSufferedNoise
		
		if (msg == @Rel) and RelChangesDisowned( msg, name )
			Return kSufferedNoise
	
	Return kNotDisturbed


function Message.CollectFuncsUsed (|Message| Last=nil, |[SCFunction]|)
	for (curr.flat in self)
		if curr == last: exit
		|| fn = curr.MsgFunc
			rz <~ fn

function message.IsReturnOrRejoin (|bool|)
	return (self == @tmp) and (self == "return" or "rejoin")


function Message.UnReachable (|Message|)
	debugger self == @arg
	return .CausesUnReachable(self, nil, nil)  


function Message.CausesUnReachable (|Message| arg, |Message| Curr, |Message| LastPlace, |Message|)
	Curr := .First // ideally should just be "for (curr in self)"

	while (curr)
		require (curr != LastPlace)
		if (Curr == @Tmp)
			|| s = Curr.name
			if (s == "return")
				Return Curr

			if (s == "exit" or "continue" or "cant")
				if SCRefs.ExitHitsOrGoesPast( Curr, arg )
					Return Curr
			// why is rejoin separate? I want to use kEndsblock!
			  elseif (s=="rejoin") and (self == arg)
				Return Curr

		Curr++


function ExitHitsOrGoesPast (|Message| msg, |Message| arg, |bool|)
	// while {||A, exit}			 // true
	// while {||A, if(true){exit}}   // true
	// while {if(true){||A, exit}}   // true
	// while {while {||A, exit}}	 // false
	|| curr = msg
	while
		curr = curr.Parent
		if curr == arg
			Return true
		if curr IsTmp "while"
			return false


function RelNeedsRef (|Message| msg, |Message| first, |bool|)
	// only objects
	require (RefBasis( first, true ) == kBasisObj)
	
	// if left side is a property, do it regardless.
	if (first == @Dot)
		return true
	
	Return true // for now
	
	Return first.VarOptFlag(kSufferedNoise)


function Message.DotType (|DotUseType|)
	opt norefcounts
	|| f = .func
	if f == @brel
		if self == "*"
			return DotUseType.memory
		return 0
	if f == @acc
		return DotUseType.memory
	if f == @Dot
		if !(.obj isa SCDecl) or (!.last.obj)
			Return DotUseType.Property


function RelChangesDisowned (|Message| msg, |String| name, |bool|)
	return false // for now
	
	|| first = *msg
	if (first IsThing name)
		Return first.VarOptFlag(kHoldsDisowned)


function Message.VarOptFlag (|int| i, |bool|) {
	
}


function RefMarkAsDisturber (|Message| msg, |SCFunction| fn)
	fn.Refs.Disturbs <~ "object"


function RefSafeDecr (|Message| msg, |Message| place)
	// a = nil   ->   a = nil, JB_decr(a)
	if (place == @Arg)
		place <~ SafeDecrMsg( msg )
	  else
		place.Prev = SafeDecrMsg( msg )


function ExprNeedsTemping (|Message| child, |Message| name, |bool|)
	opt norefcounts
	require RefBasis( name, false ) == kBasisObj
	
	for s.flat in child
		if s isthing name.name
			Return true


function Destructable (|Message| Blocker, |Message| arg, |Message| name)
	|| type = TypeOfExpr(name, nil, nil)
	require (type isa SCDecl)

	|| fn		= type.type.destructorfunc
	|| FnMsg	= RefMsg0(fn.exportname, fn)
	fnmsg.last <~ «brel "&", «Thg name.name »»
	if (Blocker)
		Blocker.Prev = Fnmsg
	  else
		arg <~ Fnmsg


function ReturnTempMoveOut (|Message| Child, |Message| blocker)
	|| Temp = SCFunction.TempMoveOut( child, blocker ) // still need to ref it.
	ReturnTempMoveOutSub(child, blocker, temp)


function ReturnTempMoveOutSub (|Message| Child, |Message| blocker, |message| temp)
	require (RefBasis(child, false) == kBasisObj)
	RefIncr( child, temp.ParentPoint )
	RefSafeDecr( temp, blocker )


function message.DoesAnything (|bool|)
	require self
	require self != @thg and @num and @str and @char
	return true


function ReturnHandle (|Message| Blocker, |Message| arg, |Message| name, |int| Basis)
	if (Basis & kBasisDestructable)
		|message| NeedsMoreTemping
		|message| Ch
		if (Blocker)
			Ch = Blocker.first
			if (Blocker.isReturnOrRejoin  and  ch isThing name.name) or (blocker isthing name.name)
				return
			if (blocker == "return") and (ch.DoesAnything)
				NeedsMoreTemping = SCFunction.TempMoveOut( ch, blocker ) // still need to ref it.

		.DeStructable(Blocker, arg, name)
		if NeedsMoreTemping
			ReturnTempMoveOutSub(ch, blocker, NeedsMoreTemping)
		return

	if (basis & kBasisTempStruct)
		return // no need?

	if (!Blocker)
		debug_require (arg)
		RefDecr( name, arg, basis )
		Return

	|| IsReturn = Blocker.IsReturnOrRejoin
	|| Child = Blocker.first.unbratype

	if (!Child)
		RefDecr( name, blocker, basis )
		
	  elseif (IsReturn and (child isThing name.name) )
		RefSafeDecr( name, blocker ) // needs to come after any decr!
		
	  else
		if IsReturn and ExprNeedsTemping( Child, name )
			ReturnTempMoveOut(Child, blocker)
		RefDecr( name, blocker, basis )



function RC_RelConstructor (|Message| rel)
	// a = b.c   -->   || a = b.c, jb_incr(a)
	
	|| First = rel.first
	require RelNeedsRef( rel, first )
	
	|| Last = rel[ 2 ]
	require !(last IsThing "nil")
	
	if Last != @Thg
		Last = SCFunction.TempMoveOut( Last, rel )
	
	RefIncr( Last, rel )



function Message.FuncWrap (|Message| fnc)
	.Prev = fnc
	fnc.Last <~ self


function RefMsg0 (|String| name, |SCFunction| func, |Message|)
	rz = NewFnc( name )
	rz.position = -1
	rz[1].obj = func


function Message.IsProperty (|bool|)
	Return .DotType is Property


function Message.NiceParent (|Message|)
	return .UseNonRefChangers(true)


function Message.RemoveTypeCasts (|Message|) 
	opt norefcounts
	while (rz and (rz == @bra or @type))
		rz = rz.first


function Message.UseNonRefChangers (|bool| parent=false, |Message|)
	opt norefcounts
	|| Last = self
	|| Curr = self
	
	while
		curr = curr.parent
		ifn curr : return last

		|| f = curr.func
		if (f == @Bra)
			// lame
		  elseif (f != @Type)
			return (curr,Last)(parent)
		  else 
			|| D = Curr.Obj
			if (D isa SCDecl) and (!(D|scdecl|).IsNormalObject)
				return (curr,Last)(parent)
		
		Last = Curr // Make sure it's not a (bracket) or obj|typecast|



function Message.IsSettablePlace (|bool|)
	opt norefcounts
	|| p = .parent
	while p == @bra
		self = p
		p = p.parent
	return .IsFirstOfSetRel


function Message.IsSetRel (|bool|)
	opt norefcounts
	require (self == @Rel)
	|| s = .second
		return (s.name == "=")


function Message.IsFirstOfSetRel (|bool|)
	opt norefcounts
	return .isfirst and .parent.issetrel


function Message.IsSetIntoPlace (|message|)
	opt norefcounts
	|| p = .NiceParent
	if p.IsSetRel
		Return p.first


function Message.IsSetIntoVar (|message|)
	opt norefcounts
	|| thg = .IsSetIntoPlace
	require (thg == @thg)
	return thg


function message.IsInDeclInBlock (|message|)
	opt norefcounts
	if (self == @rel)
		|| P = .niceparent
		if (P == @decl) and (P in @arg)
			return P


function LastUsedRefPlace (|Message| name, |Message| arg, |Message|)
	// This function has good and bad sides to it.
	// Good: It makes dealing with tempvars very simple. user created or compiler created
	// Bad: Possible obscure destructor bug, fired before you expect.
	// Maybe ordering issues with writing to stdout, files, etc.	debugger
	|| Type = name.asdecl.Type #expect
	require !Type.NoEarlyFree 
	
	|| s = name.name
	|| found = name
	
	for c.Flat in arg
		if c IsThing s
			found = c
	
	found := name
	
	// scan up until we hit the arg. return item's position in the arg.
	|| curr = found
	while (found != arg)
		curr = found
		found = found.Parent
	
	return curr.LastUsedFix


function SafeDecrMsg (|Message| msg, |Message|)
	return RefMsg( msg, "JB_SafeDecr", Compiler.RefSafeDecr )


function RC_DeclArg (|scdecl| AR, |scfunction| fn)
	|| dcl = AR.WriteNilDecl
	fn.SourceArg.First = dcl
	RC_DeclInit( dcl, fn, true )
	dcl.remove


function Message.RefDisappears (|bool|)
	opt norefcounts
	for (P.up in .parent)
		if (P == @bra)
			0 // go up
		  elseif (P == @Type)
			|| D = P.AsDecl
			if d and !D.IsNormalObject
				return true
		  elseif (P == @rel)
			|| comp = P[1].obj
			if (comp isa SCOperator)
				return (comp.IsCompare and !comp.iscustom)
			return false
		  else
			return false


function message.IsStatementExpr (|bool|)
	opt norefcounts
	|| f = .first
	if (self == @bra) and (f == @arg)
		return f.asarg$.isstatementexpr


function message.RC_HasTemporary (|int|)
	if (self == @func) or (.IsStatementExpr)
		return screfs.RefBasisStruct(self, false)


function RC_NeedsOwnBlock (|message| msg, |message| pp, |bool|)
	opt norefcounts

	// Test if exists within and/or

	|| HitArg = false
	for ch.up in msg
		if  ch == @arg
			hitarg = true
		  elseif  ch == @rel
			|| opp = ch[1]
			if (opp == @opp) and (opp == "or" or "and")
				return true
		  elseif  ch istmp "while"
			if !hitarg
				return true
		if ch == pp
			exit
	
	return false // works OK?


	// Test if params contain obj-funcs
	if msg == @func
		for prm.flat in msg.last
			if prm == @func
				|| fn = prm.last.asfunc
					if (fn.returnType.isnormalobject) // and its disowned or whatever
						return true

	
function RC_HandleDisappearing (|SCFunction| fn, |Message| msg, |int| Basis)
	|| ch = msg.UseNonRefChangers
	if Basis & kBasisDestructable or basis & kBasisTempStruct
		if (!msg.IsSetIntoPlace and !ch.parent.IsReturnOrRejoin)
			scfunction.TempMoveOut(Msg)
		return 
	
	require (Basis == kBasisObj) and (!msg.IsProperty)
	|| parent = ch.niceparent
	require  (Parent != @Arg)  and  !(parent.IsReturnOrRejoin and ch.IsOnlyChild)  and  !ch.IsSetIntoPlace
	
	if !ch.RefDisappears
		if (parent == @prm) 
			if (parent.obj == compiler.TernaryFunc)
				require ch.UseNonRefChangers == parent.first    //    (a,b)(c)-->(c,a,b)
			if (parent.obj == Compiler.RefFreeIfDead)
				return nil // already done!!!
		
		|| pp = ch.parentpoint
		if RC_NeedsOwnBlock(ch, pp)
			ch.TempIntoBlock(pp)
		  else
			scfunction.TempMoveOut(Msg)
	  else
		// I'm not sure this ever should be done?
		// definitely not for soemthing we are about to return!!!
		// actually BOTH sides are wrong! whatever2 will leak! it DOES need freeifdead!
		using (msg)
		|| fnc = NewFnc( "JB_FreeIfDead" )
		fnc.last.obj = Compiler.RefFreeIfDead
		fnc.obj = Compiler.RefFreeIfDead.returntype
		msg.ReplaceWith( fnc )
		if msg == @func and msg.first == "JB_FreeIfDead"
		fnc.Last <~ msg



function scfunction.AddParentAllocFunc (|Message| root, |SCFunction| fn, |message|)
	if !fn and (self is Constructor)
		expect (.cls == typeobject) or (.cls.super == typeobject) (self, "Need call to superclass's constructor, but can’t auto-create one.")
		// a problem?
		return nil
	require fn  // can happen in this case!	//	class B (A) --> class A --> class object
				// but none has a destructor.
				// however... this isn't the ONLY case... it can happen in.
				// let's check for the others.

	|| slf = @thg + "self"
	slf.obj = .cls.SelfDecl

	|| PAF = NewFnc(fn.Name)
	|| lst = paf.last
	lst <~ slf
	lst.obj = fn
	paf.obj = typevoid

	if (self is Constructor)
		root.First = PAF
	  else 
		root <~ PAF
	
	.DoLinkTo( fn ) // sigh... shouldn't be necessary but it is...

	return PAF


function scfunction.FillInDestructor
	|| first = .SourceArg.FindDestructor
	Using .sourcearg
	for d in .cls.Properties
		if d.IsReffable(true)
			.SourceArg.AddBefore( first, d.RefDestructor )
		  else
			|| Destr = d.HasStructDestructor
				|| dm = .DeclToDot(d)	// Im not sure we need the type for this, at least not for refcounting
				|| Obj = «brel "&", dm »
				.SourceArg.AddBefore( first, SCRefs.RefDestructorMsg( Obj, destr ) )


function scfunction.CallParents (|Message| root, |bool| IsConstructor, |message|)
	|| TheCall = .CountCallsToParentAlloc( root )
		return Thecall

	|| parent = .Cls.super
	if (parent and parent != TypeObject)
		if IsConstructor
			rz = .AddParentAllocFunc( root, parent.ConstructorFunc.Paramless )
		  else
			rz = .AddParentAllocFunc( root, parent.FirstDestructor )


function SCFunction.BuildConstructorDestructor
	require (self is ConOrDes) and StdErr.OK				// require !.cls.IsRole
	
	|| root = .SourceArg
	|| IsConstructor = self is Constructor

	|| TheCall = .CallParents( root, IsConstructor )
	.FillInConstructorAndDestructor( root, IsConstructor, TheCall )
	require StdErr.OK and !IsConstructor
	
	ifn .cls.HasStuffToHandleInDestructor
		ifn Root.hasany
			.cls.DestructorFunc = nil
	  elseif !.cls.IsWrapper
		.FillInDestructor



function SCFunction.AnalyseRefs (|[message]| list)
	|| root				= .SourceArg
	|| IsConstructor	= self is Constructor
	for (msg.flat in root)
		|| it = msg.RC_HasTemporary  // need to always do this?
			if .dorefs or (it != screfs.kbasisobj)
				SCRefs.RC_HandleDisappearing( self, msg, it )
	
		
	// avoid reading same thing that we alter.
	for (msg.ScanArg in root)
		list <~ msg
	// can we remove this ^^^ at some point?
	
	
	if .dorefs
		for (ar in .args)
			if (Ar is altered) and (ar.IsNormalObject)
				SCRefs.RC_DeclArg(ar, self)

	for (msg in list)
		|| f = msg.func
		if (f == @Rel)
			if (IsConstructor and SettingSelfProperty( msg ))
				SCRefs.RC_RelConstructor( msg )
			  elseif (.dorefs or SettingMemory(msg))
				SCRefs.RC_Rel( msg )
			
		  elseif (f == @Dot)
			SCRefs.RC_IgnoreReturn( msg, .dorefs )
			
		  elseif (f == @Func)
			SCRefs.RC_CheckFuncAllocOK( self, msg )
			SCRefs.RC_IgnoreReturn( msg, .dorefs )  // func(a,b,c)
			
		  elseif (msg.IsStatementExpr)
			SCRefs.RC_IgnoreReturn( msg, .dorefs )
			
		  elseif (f == @Decl)
			SCRefs.RC_DeclInit( msg, self, false ) // || a = b, incr(b)



function RC_CheckFuncAllocOK (|SCFunction| self, |Message| dot)
	// calling a constructor is only allowed... within a constructor.
	// calling a destructor is only allowed within a destructor.
	if dot in @bra
		|| p = dot.parent
		if p in @bra
			return 
	
	|| fn = dot.last.asfunc
		if (fn is Constructor)
			if self isnt ConOrNew
				error (dot, "Can only call constructors from within a constructor.")
		  elseif (fn is Destructor)
			if self isnt Destructor
				error (dot, "Can only call destructors from within a destructor.")


function SCFunction.RefsCheckPropertiesAltered
	// Really... only if the variable we return, is disowned,
	// then this function is a disowner!
	// then I could remove .ReturnsDisowned = true
	
	for (curr.ScanArg in .SourceArg)
		if (curr == @Rel)
			|| ch = curr.first	 // a.b = x
			if ch.IsProperty				
				// (not on self, within constructor)
				ifn  (self is Constructor) and ( ch.first IsThing "self" )				
					SCRefs.RefMarkAsDisturber( ch, self )


function DeclToDot (|scdecl| d, |string| s, |Message|)
	opt norefcounts
	rz = @dot+s
	|| slf = rz.msg(@thg, "self")
	|| cls = scfunction.currfunc.cls
		slf.obj = cls.SelfDecl
	rz.msg(@emb)
	rz.obj = d // we need this, as it is a decl... but for locals... we don't need it!
}


function scdecl.RefDestructor (|message|)
	opt norefcounts
	|| m = screfs.DeclToDot(self, .name)
	if .c_array > 0
		return screfs.DecrMulti(self, m)
	  else
		return SCRefs.RefClearMsg( m )


