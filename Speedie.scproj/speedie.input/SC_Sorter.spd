


///// LEAF SORTING

helper SCFuncSorter (sortercomparer of scfunction)
	// just to help compression. otherside will use a dictionary anyhow.
	|| fA = .Tableid|int|
	|| fB = b.Tableid|int|
	|| d = fb - fa  // we need init and main first
		return d
	return .ExportName < b.ExportName



module CodeSorter
	function LeafsFirst
		opt norefcounts
		for f in compiler.FuncList
			f.FindDepths
		compiler.funclist.sort(LeafFunctionsSorter)


	function LeafFunctionsSorter (sortercomparer of scfunction)
		opt norefcounts
		|| x = .LinkDepth|int| - b.LinkDepth|int|
		if x < 0
			return 1
		if x == 0
			return .exportname < b.exportname
		return 0
	
	
function SCFunction.MarkRecursive (|scfunction| EndAt)
	opt norefcounts
	|| s = self
	while
		(s is Recursive)
		require s != endat
		s = s.DepthFinder
		require s != nil and EndAt


function SCFunction.FindDepths (|int|)
	opt norefcounts
	flow off
	// Orders the functions in terms of which ones need others.
	// So we can process leaf functions first. Maybe easier to optimise

	if .LinkDepth
		return .LinkDepth
	
	rz = 1
	for f in .LinkTo
		if (f isa SCFunction)
			if (f == self) or f.DepthFinder
				.MarkRecursive(f)
			  else
				f.DepthFinder = self
				|| D = f.FindDepths+1
				(rz max= D)
				f.DepthFinder = nil

	.LinkDepth = rz

	
