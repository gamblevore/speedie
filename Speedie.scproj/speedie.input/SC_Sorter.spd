


///// LEAF SORTING

module CodeSorter
	function LeafsFirst
		opt norefcounts
		for f in compiler.FuncList
			f.FindDepths
			if options.unusedfunctions and !f.IsSTDLib and !f.IsVisible // should be any kind of lib at all... std or not
				deprecate (f.source, "Unused function")
		compiler.funclist.sort(LeafFunctionsSorter)


	function LeafFunctionsSorter (sortercomparer)
		opt norefcounts
		return a|scfunction|.depth < b|scfunction|.depth
	
	
function scfunction.MarkRecursive (|scfunction| EndAt)
	opt norefcounts
	while
		is Recursive
		require self != endat
		self = .DepthFinder
		require self != nil and EndAt


function scfunction.FindDepths (|int|)
	flow off
	// Orders the functions in terms of which ones need others.
	// So we can process leaf functions first. Maybe easier to optimise
	if .depth
		return .depth
	
	rz = 1
	for f in .LinkTo
		if f isa SCFunction
			if f.DepthFinder
				.MarkRecursive(f)
			  else
				f.DepthFinder = self
				|| D = f.FindDepths+1
				(rz max= D)
				f.DepthFinder = nil
	.depth = rz

	
