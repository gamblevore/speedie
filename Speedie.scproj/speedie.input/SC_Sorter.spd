


///// LEAF SORTING

helper SCFuncSorter (sortercomparer of scfunction)
	// just to help compression. otherside will use a dictionary anyhow.
	|| fA = .TableId|int|
	|| fB = b.TableId|int|
	|| d = fb - fa  // we need init and main first
		return d
	return .ExportName < b.ExportName



module CodeSorter
	function LeafsFirst
		opt norefcounts
		for f in compiler.FuncList
			f.FindDepths
		compiler.FuncList.sort(LeafFunctionsSorter)


	function LeafFunctionsSorter (sortercomparer of scfunction)
		opt norefcounts
		|| x = .LinkDepth|int| - b.LinkDepth|int|
		if x < 0
			return 1
		if x == 0
			return .exportname < b.exportname
		return 0
	
	
function SCFunction.MarkRecursive (|scfunction| EndAt)
	opt norefcounts
	|| s = self
	while
		(s is Recursive)
		require s != endat
		s = s.DepthFinder
		require s != nil and s != EndAt


function SCFunction.FindDepths (|int|)
	opt norefcounts
	flow off
	// Orders the functions in terms of which ones need others.
	// So we can process leaf functions first. Maybe easier to optimise

	|| L = .LinkDepth
		return L
	
	rz = 1

	for f in .LinkTo
		if (f isa SCFunction)
			if (f == self) or f.DepthFinder
				.MarkRecursive(f)
				
			  elseif f.iscppinbuilt
				0 // do nothing. This affects nothing.

			  elseif f isnt cpp
				f.DepthFinder = self
				|| D = f.FindDepths + ((1))
				(rz max= D)
				f.DepthFinder = nil

			  else
				(rz max= 2)
				/*
					function SpdWrapper
						|| x = spdcaller(2)
					
					function SpdCaller (|int| x, |int|)
						return mycppfunc(x, 123)
				*/
				
				// The question... is should I allocate params as temps, or declarations.
				// speedie vm temp vars, gets wiped by spd func calls.
				// cpp funcs also can wipe some vars. Its not an issue for the VM
				// but for "real code" it is.
				// for simplicity, lets assume cpp wipes regs, even in the VM.

	.LinkDepth = rz

	
