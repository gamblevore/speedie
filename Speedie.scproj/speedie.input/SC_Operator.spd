
/*
	Jeebox internals. By Theodore H. Smith...
*/

// we have opposites... perhaps the negate operator could use it.


datatype OpMode (uint16)
	flags
		|OpMode|
		CompSet  = [Compare, Assigns]
		MathLike = [Bit, Math]
		Addition
		LeftOnly
		MakesSigned
		ExactlyEquals
		EqualOrNot
		NilTest		// not the same as equalornot... because those include customops
		SameOrLessBits = [NoExtraBits, LoseBits]
		Left = LeftOnly + NoExtraBits
		AndOr = [OR, AND]
		Custom
		CaseAware
		ExactEquals = niltest + exactlyequals + equalornot + compare
		ExactNotEquals = niltest + equalornot + compare
		
	syntax is (|OpMode| x, |bool|)
		return (self & x) == x



class SCOperator {
linkage
	cpp_part		Opp

|int|			Score

|string|		Name
|string|		CompOp
|string|		CompParam
|string|		FuncName
|fn_OpASM?|		ASM
|OpMode|		Kind
|SCOperator--?|	Opposite 


constructor (|string| name, |fn_opasm?| ASM, |OpMode| mode)
	.name = name
	.kind = mode
	.asm = asm
	dict[name] = self

syntax is (|OpMode| x, |opmode|)
	return .kind & x
	

function CaseAwareStr (|String|)
	return (self is caseaware)|bool|.render


syntax equals (|string| s, |bool| aware, |bool|)
	return .name.syntaxequals(s, aware)


function SimpleName (|String|)
	opt norefcounts
	|| n = .name
	if (self Is CaseAware)
		Return n[1...]
	Return n


function SetFuncName (assigns:|string| s)
	.funcname = "Operator" + s.UpperFirst
	dict[ s.Lowercase ] = self
	

function IsCompSet (|bool|)
	return self Is CompSet


function InitComp (|string| name_)
	if *name_ == '~'
		.kind |= opmode.CaseAware
	.kind |= opmode.Compare
	.FuncName = "OperatorCompare"
	
	// (a==b) =   0
	// (a<b)  =  -1
	// (a>b)  =   1
	// (a<=b) <=  0
	// (a>=b) >=  0
	
	|| s = .SimpleName
	if (s.length == 2)
		.CompOp = s
	  else
		.CompOp = "=="
	
	if (s == "<")
		.CompParam = "-1"
		.CompOp = "<="
	  elseif (s == ">")
		.CompParam = "1"
		.CompOp = ">="
	  elseif (s == "<=") or (s == ">=")
		.CompParam = "0"
	  else
		.CompParam = "0"


module {
	|Dictionary of SCOperator|			Dict = dictionary()
	|int|								CustomOperatorScore

	function Lookup ( |Message| opch, |SCOperator| )
		opt norefcounts
		|| result = opch.obj|SCOperator|
			if (result isnt custom)
				opch.name = result.name
			return result
		
		|| op = opch.name
		Result = dict[ op ]
		
		if (!Result)
			result = AddCustom( op )

		  elseif (op != result.name)
			if (result isnt custom)
				opch.name = result.name
		
		if op == "or"
			result.kind |= opmode.OR
		  elseif op == "and"
			result.kind |= opmode.and
		// why aren't 'if "" > nil' here? I think... cos no one would do that?
		return Result


	function Init		
		.AddComp("==",					&asmops.Equals, OpMode.ExactEquals)
		.AddComp( "<",					&asmops.Less)
		.AddComp( ">",					&asmops.More)
		.AddComp( "<=",					&asmops.LessEq)
		.AddComp( ">=",					&asmops.MoreEq)
		.AddComp( "!=",					&asmops.NotEq,  OpMode.ExactNotEquals)
		.OppositeComp("==", "!=")
		.OppositeComp("<", ">=")
		.OppositeComp(">", "<=")

		.AddAssign( "=" )

		.AddMath( "mod",	"mod",		&asmops.Mod)
		.AddMath( "+",		"Plus",		&asmops.Plus, opmode.Addition)
		.AddMath( "-",		"Minus",	&asmops.Minus, opmode.makessigned + opmode.Addition)
		.AddMath( "*",		"Mul",		&asmops.Mul)
		.AddMath( "/",		"Divide",	&asmops.Div)

		.AddBit( "<<<",	"RotateLeft",	&asmops.ROL, opmode.Left)
		.AddBit( ">>>",	"RotateRight",	&asmops.ROR, opmode.Left)
		.addbit( ">>",	"ShiftRight",	&asmops.SHR, opmode.Left)
		.addbit( "<<",	"ShiftLeft",	&asmops.SHL)
		.AddBit( "(|)",	"BitOr",		&asmops.BitOr)
		.AddBit( "&",	"BitAnd",		&asmops.BitAnd, opmode.SameOrLessBits)
		.AddBit( "^",	"Xor",			&asmops.bitxor, opmode.noextrabits)
		|| BitOr = dict[ "(|)" ]
		dict["|"]         = bitor // for: a |= b
		dict["|||"]       = bitor
		
		.AddBit( "is",		"is" )					// if obj is flag
		.AddBit( "isnt",	"isnt" )           		// if obj isnt flag

		.BuildOrder

	function OppositeComp (|string| A, |string| B)
		opt norefcounts
		|| pA = dict[A]
		|| pB = dict[B]
		if pa and pb
			pa.Opposite = pB
			pb.Opposite = pa

	function AddComp (|string| s, |fn_opasm| ASM, |OpMode| Mode=0)
		|| opp = SCOperator.new(s, ASM, mode ||| opmode.compare)
		opp.InitComp( s )

		|| newname = ("~" + s, "~=")(s != "==")
		Mode = mode &~ opmode.NilTest
		SCOperator.new(newname, nil, mode ||| OpMode.custom).InitComp( newname )
	
		
	function AddAssign (|string| s)
		SCOperator.new(s, &asmops.Assign, OpMode.assigns)

		
	function AddMath (|string| s, |string| FuncName, |fn_opasm| ASM, |OpMode| Mode=0, |SCOperator|)
		|| opp = SCOperator.new(s, asm, mode ||| opmode.math)
		opp.SetFuncName = funcname
		return opp
	

	function AddCustom (|string| s, |SCOperator|)
		|| opp = SCOperator.new(s, nil, OpMode.custom)
		opp.score = CustomOperatorScore
		opp.SetFuncName = s
		return opp


	function AddBit (|string| s, |String| FuncName, |fn_opasm?| ASM=nil, |OpMode| Mode=0)
		|| opp = SCOperator.new(s, asm, mode ||| opmode.Bit)
		opp.SetFuncName = FuncName
	
	
	function BuildOrder // reordering here
		|| Strs = "
mod
^ pow
/ divide
* multiply
- minus
+ plus
<<
>>
>>>
&&& &
^^^ xor ^
||| | (|)
to from custom
by
<
<=
>
>=
==
!=
is isnt
in
and
or
="	

		|| order = strs.split
		|| fake = «opp ""» 
		for (wi in order) (i)
			for s2 in wi.words
				if s2
					fake.name = s2
					.lookup(fake).score = i

		dict["="]!.score = 100
		CustomOperatorScore = dict["custom"]!.score

}

}




function Message.OpScore (|int|)
	opt norefcounts
	|| o = .obj
		return o|scoperator|.score
	|| op = scoperator.dict.ValueLower(.name)
		.obj = op
		return op.score
	return scoperator.customoperatorscore


function Message.OarExpand (|bool|)
	if self in @rel
		if self ~= "oar"
			deprecate (self, "Prefer '??' these days.")
		.name = "or"
		.parent!.BunchFix()
	return true


function Message.OppExpand (|bool|)
	if self == @opp
		if self ~= "oar" or "??"
			return .oarexpand
		if self ~= "init"
			return .initexpand


function Message.InitExpand (|bool|)
	opt norefcounts
	|| rel = .parent!
	.name = ":="
	using self
	rel.FixErl
	return true


function Message.RelFix (|bool| force, |bool|)
	require .AndOrExpansionTest != -1
	// 1 + 2 < 4
	//   $
	// 1 + $
	//     2 < $
	//         4 + 5
	|| One =  .first!
	|| Plus = One.Next!
	if force or !plus.obj
		|| PlusScore = plus.opscore // just do it now
		|| SubRel = Plus.next
		if  Plus == ":="
			.FixErl
		  elseif SubRel == @Rel
			rz = subrel.relfix(true)
			ifn self in @decl or @arg
				|| Two = SubRel.First!
				|| LessThan = Two.Next!
				|| Last = lessthan.next
				if LessThan.OpScore > PlusScore
					self <~ lessthan
					self <~ last
					subrel.first = plus
					subrel.first = one
					subrel.relfix(true)
					rz = true

	//       $
	//     $ < $
	// 1 + 2   4 + 5



function CustomFuncOp (|Message| exp, |SCOperator| comp, |SCNode|name_space, |Message|RN, |SCDecl|)
	// a + b   --> a.operator_plus(b)
	// a ?? b  --> a.operator_oar(b,syntaxcast?)
	opt norefcounts
	exp.become(@Dot, comp.FuncName)
	|| prm = «prm, RN » 
	exp <~ prm
	exp.second.Remove
	
	|| ty = TypeOfExpr( exp, name_space )$
	if rn and (prm.obj == compiler.fnAs)
		|| cls = rn.ObjCls
			if cls isnt Hassubclass
				prm.obj = compiler.fnFastas // noice
			return cls.typenormal
	return ty



module CustomOps
	constants
		NotCustom = 0
		TypeCastFromBool = 16
		TypeCastToBetter = 32
		Needed = 64
		LeftOnlyIsVector = 65
		RightOnlyIsVector = 66



function UseCustomOperators (|SCDecl| LC, |SCDecl| RC, |SCOperator| Comp, |message| ErrPlace, |int|)
	opt norefcounts
	if (comp is Custom or CaseAware)
		return CustomOps.Needed
	
	|| CompOrSet= comp.IsCompSet
	|| LNT		= LC.TypeInfo
	|| RNT		= RC.TypeInfo
	|| LN		= LNT.NumericCountBoolsToo
	|| RN		= RNT.NumericCountBoolsToo
	ifn LN and LN == RN	   		// not both same numbers
		if ln and rn and (ln == 1 or rn == 1)
			if (CompOrSet)
				return CustomOps.Needed
			
			expect (LNT.SameBasicType(RNT)) (errplace, "Vector type mismatch.")
			if LN > RN
				return CustomOps.LeftOnlyIsVector
			  else
				return CustomOps.RightOnlyIsVector
		return CustomOps.Needed				// num + obj
	
	
	|| extra = 0
	if LN and RN
		|| GotABool = (DataTypeCode.bool == lnt or rnt)
		if lnt != rnt
			expect !(gotabool and comp is compare) (errplace, "Cant compare bools to non-bools")
			if (comp is mathlike) and comp isnt NoExtraBits
				extra = CustomOps.TypeCastToBetter
				
		  else
			if GotABool and comp isnt Compare
				extra = CustomOps.TypeCastFromBool
			  elseif (comp is MakesSigned) and lc.isuintlike
				extra = CustomOps.TypeCastToBetter

	if (!SCNode.ConstantsLoadingOverride and LC.Type is TreatAsBaseType)
		return CustomOps.Needed ||| extra
	if ((LN > 1) and CompOrSet)					// can't compare vectors directly in C++
		return CustomOps.Needed ||| extra

	if !extra
		|| t = lc.type
		if t.super and t.hasOperator(comp.funcname)
			return CustomOps.Needed

	return extra


function scclass.HasOperator (|string| op, |bool|)
	opt norefcounts
	|| obj = self[op]
	if obj isa scfunction
		return true


function message.Become (|scoperator| op)
	.obj = op
	.name = op.name
	
	
	
