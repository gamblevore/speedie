
/*
	Jeebox internals. By Theodore H. Smith...
*/



class SCClass (SCNode) {
linkage
	cpp_part		Class

|SCClass?|					Super
|Message?|					Defawlt
|Message?|					False
|SCModule|					Modul
|[SCDecl]|					Properties
|SCDecl|					TypeNormal
|SCDecl|					TypeOptional
|SCDecl|					TypeReal
|[SCFunction]|  			Casts
|[SCClass]|					Children
|SCDecl?|					Contained
|scdecl?|					Signed								// int/uint
|scdecl?|					_NotConst
|SCFunction?|				FuncProto
|SCFunction?|				TheIsFunc
|SCFunction?|				ConstructorFunc
|SCFunction?|				DestructorFunc
|string|					CppClass
|SCDecl?|					ClassType
|SCDecl|					SelfDecl
|Message?|					IsModel
|SCBehaviour?|   			Behaviour
|string|					SaveAs
|SCClass?|					ProcessAs
|SCClass?|					DowngradeTo
|SCDecl?|					DataObject
|uint|						TaskObjectCount
|uint16|					Size
|uint16|					Depth
|uint16|					StructContainerDepth
|DataTypeCode|  			TypeInfo
|Byte|						MinOpt
|Byte|						IsBehaviour
|byte|						IsWrapper

// these could all just be an int?
|bool|						IgnoreContainedSelf
|bool|						HasCompareFunc
|bool|						HasEqualsFunc
|bool|						HasSubClass
|bool|						NoEarlyFree
|bool|						AutoGeneratedSavers
|bool|						SavingCanSkip
|bool|						TreatAsBaseType
|bool| 						Banned
|bool|						HasNilChecker
|bool|						DefaultsToReal
|byte|						IsRole
|bool|						IsBuiltin // SCNodeType
|SCNodetype| 				BaseType
|bool|						IsASM
|bool|						IsNotNumeric


constructor (|Message| node, |SCNode| parent, |bool| HasPtrs, |scmodule| m)
	Compiler.stClasses++
	
	node.obj = self			// for autocomplete :)
	.name = LoadClassName(node)
	.Source = node
	.Modul = m
	.project = parent.project
	.IsVisible = SCNode.CurrVisibility
	.saveas = ""
	.TypeInfo = DataTypeCode.UnusedType
	.Banned = .TestBanned
	
	|| T = SCDecl(self)
	t.nildeclared = (nilstate.real >> HasPtrs)
	.TypeNormal = T
	.TypeOptional = T.NilConstructor(NilState.optional * HasPtrs)
	.TypeReal = T.NilConstructor(NilState.Real * HasPtrs)
	
	if node == "struct"
		T = T.GetAddress(declmode.funcparam)
	  else
		T = T.CopyDecl
	.SelfDecl = T
	T.Name = "self"
	(T is SelfImplicit)
	(T isnt altered)


function NumericCount (|int|)
	if self
		return .TypeInfo.NumericCount


render
	super.Render(fs)
	if .isstruct
		fs <~ " struct"
	if .NumericCount
		fs <~ " numeric"
	if (.funcProto)
		fs <~ " prototype"
	  elseif (.isdatatypeonly)
		fs <~ " datatype"
	if .ismodel
		fs <~ " model"



function PassableCount (|int|)
	opt norefcounts
	for p in .properties
		rz += !p.IsCArray


function CreateAutoConstructor (|scfunction|)
	opt norefcounts
	rz = .CreateEmptyFunc( "Constructor", "ConstructorAuto" )		#require
	|| node = rz.source
	|| prms = node.Second
	|| arg	= prms.next

	for prop in .properties
		if !prop.IsCArray
			|| name = prop.name
			if name ~= "super"
				name = "sooper"
			check (name != "__rz__") (prop.source, "Invalid name.")
			prms <~ prop.WriteDeclTypeAndName(name, 0)
			|| rel = arg.msg(@rel)
			rel <~ (@sdot, name)
			rel <~ (@opp,  "=")
			rel <~ (@thg,  name)


function IsTask (|bool|)
	return self and .isrole & 2


// how can we get the size of each property?
function TaskProperties 
	opt norefcounts
	for (p in .Properties) (i)
		(p is task)


function CollectProperties 
	opt norefcounts
	require !.IsBehaviourTable

	scmodule.curr = .modul
	for item in .SourceArg
		if item == @decl
			.CollectProp(item)
			
	if .IsTask
		.TaskProperties
	  else
		|| it = .properties.first
			expect (!.IsRole) (it.source, "Roles can't have properties!")

	for (p in .properties)
		expect (!p.default) (p.source, "Class properties canâ€™t have default values.")

	if .IsModel
		.ModelDecls



function GetDepth
	opt norefcounts
	
	if !.depth
		.depth = 1
		for c.Upwards in self
			.depth++
			
	|| msg = .defawlt
	if msg and .isobject and !(msg isthing "nil")
		.DefaultsToReal = true // what if .defawlt is optional? // fuck them :D
		.TypeNormal.NilDeclared = NilState.real
	


function GetStructDepth
	opt norefcounts
	expect (.StructContainerDepth != -1) (self, "This struct contains itself?")
	.StructContainerDepth = -1
	
	|| r = 0
	for p in .properties
		|| t = p.type
		if (t.IsStruct) and (p.pointercount == 0) 
			t.GetStructDepth
			r = r max t.StructContainerDepth+1
	.StructContainerDepth = r


function CalculateSize (|int| Depth = 0, |int|)
	.CalculateSizeRaw(Depth)
	return .size


function CalculateSizeRaw (|int| Depth=0, |int|)
	|| si = .size
		return si

	if .IsFunc
		.size = Platform.PointerBytes
		return .size
	if .IsDataTypeOnly
		.size = .typeinfo.bytesize
		return .size

	expect (Depth < 16) (.sourceArg, "Class hierarchy too deep")
	|| Count = 0
	if self == typeobject
		count = 4 // refcount? depends if we are "owned" or "shared".
	|| s = .super
		Count = s.CalculateSizeRaw				#debug_require

	|| bits = 0
	for p in .properties
		|| curr = platform.PointerBytes
		ifn P.Type.IsObject or p.PointerCount
			Curr = P.type.calculatesize(depth+1)	#require
		if (p is task) and p.isobject
			bits[(count+platform.PointerBytes)>>3] = true
		Count = Count Align Curr

		|| Mul = P.c_Array ?? 1
		Count += Curr * Mul 

	.size = Count align 4
	if .istask
		.taskobjectcount = bits
		check (.size <= 128) (.source, "Task size is over 128.")
	return count	


function LoadSuperClass
	opt norefcounts
	
	|| OldMod = .modul.parent // in case it was already set, like in a task... which has a name_space
	if !oldmod
		.Modul.parent = compiler.program 
	
	|| p = .Source								#require
	|| supc = p.Second
	|SCClass| S
	if (supc != @bra)
		if supc: expect (supc == @arg) (supc)
		if (.IsObject) and (self != TypeObject)
			S = TypeObject
	  else
		|| thg = supc[@nil]								#require
		if thg == @sdot
			thg.func = @thg
			S = .modul.findclassmsg( thg, 0 )
		  elseif oldmod
			S = oldmod.findclassmsg( thg )
		  else
			S = Compiler[ thg ]
		
		if !S
			0 //
		  elseif (.FuncProto)
			error						(supc, "Can't subclass this.")
		  elseif (.isDataTypeonly)
			check (S.isDataTypeonly)	(supc, "Datatypes can only subclass datatypes.")
		  elseif (.IsStruct)
			check (S.IsStruct)			(supc, "Structs can only subclass structs.")
		  else
			check (S.IsObject)			(supc, "Classes can only subclass classes.")
	
	if (S)
		.Super = S
		if Options.ListAllLib
			s.Children <~ self
		if !.IsRole
			s.HasSubClass = true
		  elseif !oldmod
			.modul.parent = s.modul
		.parent = S


function LoadSuperBehaviours
	opt norefcounts
	|| s = .super
	|| b = .behaviour
		while (s and !S.behaviour)
			s = s.super
		if s
			b.FuncTable!.cls!.super = s.behaviour!.FuncTable!.cls


module {
function SetSize (CollectFunc)
	if name_space isa scclass
		name_space.size = node.first.int
	return compiler.program

function LoadClassName (|message| node, |string|)
	|| S = node.first
	if (s == @thg or @dot)
		return s.name 
	if (node istmp "class")
		error (node, "Can't find class name.")
}

function SCFunction.CopyParams (|message| list)
	|| p = .prms
	using list
	|| a = .source.GiveArg
	|| dot = @dot.msg("Constructor")
	a.first = dot
	|| name = dot.msg(@thg, "super")
	|| SubPrms = dot.msg(@prm)
	
	for s in list
		p <~ s.copy
		|| c = s.DeclName
			subprms <~ c.copy


function scfunction.Prms (|message|)
	return .source.find(@prm)


function CanHaveEmptyConstructor (|bool|)
// just having this function is evidence that automatically
// creating an empty constructor, is a bad idea. We should
// explicitly create it... like:
// 			class abc: constructor empty, constructor auto

	opt norefcounts
	for p in .Properties
		if p.TypeSuffers and p.StatedReal
			require p.type.DefaultsToReal
	return true


function CreateEmptyConstructors (|scfunction|)
	if .CanHaveEmptyConstructor
		rz = .CreateEmptyFunc( "Constructor" )		#require
		(rz is EmptyConstructor)

	|| pc = .PassableCount
	|| s = .super
	if s and rz and s != TypeObject // object has no constructor-func
		|| l = s.constructorfunc!.Prms 
		if l.HasAny
			rz.CopyParams(l)
			pc = 0 // i guess?
	
	if pc >= 1 and pc <= 8
		|| f2 = .CreateAutoConstructor
		rz := f2


function scfunction.AddConstructorReturn2
	require !.IsWrapper and self is newnew
	|| args = .source[@arg,2]
	using .source
	|| type = message(@thg, .cls!.name)
	if .cls.IsTask
		args.first = macros.ConstructorNewTask.run(type)
	  else
		args.first = macros.ConstructorNew.run(type)
	args.msg(@tmp, "return") <~ (@thg, "self")


function scfunction.AddConstructorReturn (|message| prms)
	opt norefcounts
	require (.cls!.isobject)
	is newnew
	using prms
	|| dcl = prms.msg(@decl)
	dcl.msg(@arel, "!") <~ (@thg, .cls!.name)



function CreateConstructors 
	if .IsObject
		|| Con = .FindAllocFunc( "Constructor" )
		if .IsRole
			|| s = .super! // roles always have supers
			check (!con or s.ConstructorFunc) (con.source, "Role's super lacks a constructor.")
			con := s.ConstructorFunc
			.DestructorFunc = s.DestructorFunc
			require con
		
		using .Source
		if !con and !.IsWrapper		// some wrapper classes cant be newed.
			con = .CreateEmptyConstructors
		.ConstructorFunc = con
		
		if con
			.modul.tryadd(con.source, con, "new") // maybe?
			.FillRoleConstructor(con)
			
	
	if !.IsRole
		|| NeedsDestructor = .IsObject or (.IsStruct and .HasObjectProperties)
		.DestructorFunc = .FindAllocFunc( "Destructor", !NeedsDestructor )
	  elseif .isrole == 3
		check (.super!.isrole == 2) (self, "Tasks can't nestedly subclass.")


function scclass.FillRoleConstructor (|scfunction| con)
	opt norefcounts
	for f in con
		(f is new)
		if .istask
			.FillTaskConstructor(f)

function FindSpecialFunc (|string| keyword, |bool| CheckParents, |SCFunction|)
	return .FindFunc(keyword.lowercase, CheckParents, true)


function FindFunc (|string| keyword, |bool| CheckParents, |bool| DoError, |SCFunction|)
	opt norefcounts
	for (b.upwards in self)
		|| o = b.access[ keyword ]
			if o isa SCFunction
				return o
			expect (!.IsObject or !doerror) (b.source, keyword + " keyword only usable with functions.")
		
		loop CheckParents



function NewClassNew (|SCFunction| con, |Message| src)
	|| IsOK = stderr.mark
	.NewClassNewSub(con, src)
	if !IsOK
		con.badness |= 1


function NewClassNewSub (|SCFunction| con, |Message| src)
	src.Position = con.Source!.Position
	
	|| result			= .Modul.NewModuleFunc( src )$
	result.counterpart	= con
	|| c = con.CounterPart|array|
	if !c
		c = []
		con.CounterPart = c
	c <~ result
	(result is New)
	(con.alloccode = functionType.Constructor)
	
	|| NewParams		= src[ @prm, 1 ]
	|| A				= con.Source!.Second
	|| rsrc				= result.source!
	|| TypeNode			= rsrc.FindNested(@thg, "type", true)
	if TypeNode and NewParams
		if A == @prm or @list
			|| CallParams = rsrc.FindNested(@dot).last
			for dcl in A
				|| dcpy = dcl.Copy(Src)
				NewParams  <~ dcpy
				|| dn = dcpy.GetDclName(true)
					CallParams <~ dn.Copy
		
		TypeNode.ReplaceWith(.TypeNormal.writetype)
		NewParams <~ .TypeNormal.WriteDeclFull


function NeedsDefaultValue (|message| def, |&message| place, |string| name)
	require !*place
	if .IsObject and !.IsRole
		if def and !(def isthing "nil")
			error (self, "Missing "+name+" value for class: "  + .name)
	*place = def


function ContainedTypeLoad
	.use
	|| sup = .super
		.Contained = sup.Contained
		.SelfDecl.Contains = sup.SelfDecl.Contains
		
		if .IsNotNumeric == sup.IsNotNumeric
			.NeedsDefaultValue(sup.Defawlt, .defawlt, "default")
			.NeedsDefaultValue(sup.false,   .false,   "false")
		.IgnoreContainedSelf |= sup.IgnoreContainedSelf // bad assumption. we shouldn't swap objects and datatypes
	
	.defawlt := Â«thg "nil"Â»
	if .NumericCount == 1 // what if its a vec4? (0,0,0,0)? sigh.
		.false := Â«num "0"Â»
	  else
		.false := Â«thg "nil"Â»

	|| ContainedMsg = .Sourcearg.find(@Tmp, "contains")[@thg]			#require
	|| cls = compiler[ ContainedMsg ]									#require
	|| TN = Cls.TypeOptional
	|| cont = TN.CopyDecl
	(cont Is UpgradeableContained)
	.Contained = cont
	.IgnoreContainedSelf |= cls.IsDataTypeOrFP
	.SelfDecl.Contains = TN // shouldn't we be setting this to .contained? but when I do... my GUI lib doesn't compile
							// which is strange cos speedie itself compiles OK. and all the errors generated seem garbage.
							// so we need to fix this. sighs... more work.


function scfunction.DontWantSameReturnType (|scfunction| f)
	require self
	|| r = f.ReturnType					#debug_require
	if r.MiniMatch(.returntype, 0)
		error (.source,  "Multiple casts found [1]")
		error (f.source, "Multiple casts found [2]")
	

function OverrideSyntax
	require stderr.OK
	|| cast = .FindSpecialFunc( "SyntaxCast", false )
	.casts = array.new

	if !.IsStruct
		.HasNilChecker = true // default to true
	
	for f in cast
		f.IsInline = true
		check  (f.args == 1)		  (f.Source, "No params allowed." )
		|| ret = f.ReturnType #expect (f.Source, "Need a return type.")
		f.NextFunc.DontWantSameReturnType(f)
		.Casts <~ f
		if ret.IsNormalBool
			|| OK = !f.isdisabled
				f.args.first!.nildeclared = nilstate.Optional
			|| Mode = f.sourcearg!.nilcheckmode(ok)
			f.IsNilChecker = Mode
			.HasNilChecker = true
	
	.HasCompareFunc = .FindSpecialFunc( "SyntaxCompare", true )
	.HasEqualsFunc = .FindSpecialFunc( "SyntaxEquals", true )
	.TheIsFunc = .FindSpecialFunc( "SyntaxIs", true )


function HasObjectProperties (|bool|)
	opt norefcounts
	for p in .properties
		if p.isnormalobject
			return true


function LoadConstructors
	.Use									// parsed messages come from our source's file
	SCNode.CurrVisibility = false			// for allocators that we generate
	
	.CreateConstructors
		
	|| s = .super
		.NoEarlyFree := s.NoEarlyFree

	(Message).Restore // restore message parsing to general


function AfterFuncsDecled
	.OverrideSyntax
		
	|| f = .ConstructorFunc
//		expect (!f.ReturnType)  ( f.Source, "Constructors canâ€™t return things." )
		.CheckAllocVsWrapper( f, true )
	
	f = .DestructorFunc
	if (f)
		expect (!f.NextFunc) ( f.Source, "Canâ€™t have multiple destructors" )
		expect (!f.ReturnType and (f.args.length == 1))   ( f.Source, "Destructor canâ€™t have a return type or parameters." )
		.CheckAllocVsWrapper( f, false )
	
	|| cls = .ClassType
		cls.Name = "&" + .CStructName + "Data" // sigh. Not pleasant.



function IsFunc (|bool|)
	Return .FuncProto


function IsObject (|bool|)
	Return (!.IsDataTypeOrFP) and (!.IsStruct)


function CreateEmptyFunc (|String| fname, |string| cpp_name="", |SCFunction|)
	SCNode.CurrVisibility = .IsVisible
	cpp_name := fname
	|| e	= "function $fname { cpp_part $cpp_name }"
	|| msg	= e.ParseClean
	rz		= SCFunction.NewFunc( msg, self, .source )|SCFunction|
	if rz
		.TryAdd( msg, rz, fname )
		rz.IsVisible = false


function FindAllocFunc (|String| fname, |bool| DontCreate = true, |SCFunction|)
	opt norefcounts
	|| it = .FindSpecialFunc( fname, false )
		Return it
	
	if !DontCreate and !.IsWrapper
		Return .CreateEmptyFunc( fname )


function CStructName (|String|)
	opt norefcounts
	require self
	if .IsRole == 1
		return .RealClass.CStructNamesub
	return .CStructNameSub


function CStructNameSub (|String|)
	opt norefcounts
	return .CppClass init .name.UnicodeSafeName


function HasStuffToHandleInDestructor (|bool|)
	opt norefcounts
	for p.upwards in self
		for d in p.Properties
			if d.HasStructDestructor: return true
			if d.IsReffable(true):    return true


function CanCompareSub (|string|s, |scdecl|against, |bool|)
	opt norefcounts
	for (b.upwards in self)
		|| o = b.access[ s ]
		if (o isa SCFunction)
			if o.cancompare(against)
				Return true
	
	
function CanCompare (|SCDecl| Against, |bool| AsEquals, |bool|)
	|| CanUseEquals = AsEquals and .hasEqualsFunc
	if !.HasCompareFunc  and  !CanUseEquals
		Return false

	if CanUseEquals and .CanCompareSub( "syntaxequals", Against )
		Return true

	if .HasCompareFunc
		Return .CanCompareSub( "syntaxcompare", Against )


function CheckAllocVsWrapper (|SCFunction| f, |bool| IsConstructor)
	require .IsWrapper and .IsObject and .super
	require (!f == isconstructor)

	if !IsConstructor
		require .FirstDestructor
	
	if !f.IsWrapper
		error (.Source, "Wrapper classes must have a constructor that is a wrapper function.")


function FirstDestructor (|SCFunction|)
	opt norefcounts
	for p.Upwards in self
		|| fn = p.DestructorFunc
		
		if !fn
			|| a = 1
		  elseif (p.IsWrapper and p.super)	// don't count "object" as having properties!
			Return fn
			
		  elseif (p.HasStuffToHandleInDestructor or fn.SourceArg.Hasany)
			return fn


function scfunction.AddSelfToFunc (|scclass| cls, |SCNode| space)
	opt norefcounts
	|| sl = cls.SelfDecl					// for my nil-checker
	if sl.TypeSuffers						// refcounting will set MarkAsRefAltered
		sl = sl.copydecl
		if self is destructor
			sl = sl.MakeNewReal
		  elseif (self is constructor) and cls.isobject
			sl = sl.makenewoptional // nice
		(sl is SelfImplicit)				// I shouldn't have to specify this, it should be copied!
	space.TryAdd( space.FuncSrc, sl, "self" )
	.args <~ sl


function message.HasSelfAsFirst (|bool|)
	opt norefcounts
	|| d = .first
		|| msg = d.DeclName
			return msg.name ~= "self"
	


function SCNode.ReachedName (|string|)
	opt norefcounts
	|| c = .MyReacher
	rz = "    via: " + .name
	if c.class == SCNode
		rz += " (visible func)"


function Compiler.Banned (|string| name, |bool|)
	opt norefcounts
	|| b = Options.BannedClasses
		return b.valuelower(name)


function TestBanned (|bool|)
	return compiler.banned(.name)

	
function BannedCheck (|message| src)
	opt norefcounts
	require .TestBanned
	error (self, "Banned class reached: " + .name)
	|| curr = .MyReacher
	for 16
		if !curr or curr.class == SCNode
			exit
		if src
			error (src, curr.ReachedName)
			src = nil
		  else
			error (curr, curr.ReachedName)
		curr = curr.MyReacher



function IsA (|SCClass| S, |bool|) // hassuper, issuper, issubclass
	opt norefcounts
	for p.upwards in self
		if p == S
			return true


function Real_Isa2 (|SCClass| cls, |bool|)
	opt norefcounts // why doesnt the first one do this?
	return .realclass.isa(cls.realclass)


function Real_Isa (|SCClass| cls, |bool|)
	opt norefcounts
	return .realclass.isa(cls)


function AfterAfterFuncs 
	|| s = .Super
		.HasCompareFunc := s.HasCompareFunc
		.HasEqualsFunc := s.HasEqualsFunc
	
	|| def = .Defawlt
		|| D = TypeOfExpr( def, .Modul )
		if d and .DefaultsToReal
			check (d.StatedReal) (def, "Object default must be real (non-nil)")
	
	.DeclModel


function StructName (|String|)
	if .IsDataTypeOrFP
		Return .Name
	return .SubProjName + "_" + .name


function MakeClassType (|scdecl| d, |scdecl|)
	opt norefcounts
	|| c = scdecl(TypeJBClass!)
	c.name = .name.lowercase
	c.source = .source
	C.pointercount = 1
	(c is ClassObj)
	C.nildeclared = nilstate.real
	C.Contains = d
	return c


function LoadClassType
	if .isobject
		.ClassType = .MakeClassType(.typenormal)
		


function TryAddToProject 
	opt norefcounts
	require !.FuncProto
	|| NameNode = .Source.first!
	|| mod = Compiler.DisamClasses!
	if NameNode == @dot		// load the modules first.
		mod = compiler.findmodulemsg(namenode.first!)	#require
	  else
		if .name == "interface" and self isa scclass
			require .isrole != 1

	
	mod.TryAdd( .SourceArg, .Modul, .Name )



module
	function SCClass.LoadLinkage
		opt NoRefCounts
		|| Arg = .LinkagePlace 				#require
		if arg.DeprecatedClassOption("wrapper", "union") // for SDL2
			.iswrapper = 2
		  elseif arg.DeprecatedClassOption("wrapper")
			.iswrapper = 1
		.NoAutoComplete = arg.DeprecatedClassOption("noauto")
		  
		.NoEarlyFree = arg.DeprecatedClassOption("pragma", "NoEarlyFree")
		.TreatAsBaseType = arg.DeprecatedClassOption("pragma", "TreatAsBaseType")
		.minopt = arg.DeprecatedClassOption("opt", "min")


	function scnode.ExpectModule (|message| errplace, |bool|)
		expect (self isa scmodule) (errplace, "Must be in a module." )
		return true


	function NeuClassSub (|Message| node, |SCNode| parent, |Message| ErrPlace, |string| ForInterface, |SCNodetype| base,  |SCClass|)
		if !ForInterface
			require parent.ExpectModule(errplace)
		
		|| arg = node.GiveArg
		|| cls = SCClass.new( node, parent, base.hasptrs, SCModule.new )
		cls.BaseType = base
		cls.IsRole = (node ~= "role")

		|| SA = cls.SourceArg
		cls.loadlinkage
		Compiler.ClassList <~ cls

		|| Module = arg.find( @tmp, "module" )
		cls.loadModuleForCls( Module, parent )

		if (ForInterface and parent isa scmodule)
			cls.CppClass = "__${parent.cls!.name.UnicodeSafeName}_${ForInterface.UnicodeSafeName}__"
		
		Return cls
	
	
	function NeuRole (CollectFunc)
		|| mod = neuclass(node, name_Space, errplace)|scmodule| $
		|| cls = mod.cls$
		cls.IsRole = true
		if !(cls.properties)
			return mod
		
	
	function NeuClass (CollectFunc)
		|| cls = .NeuClassSub(node, name_space, ErrPlace, "", SCNodetype.object)
			cls.ClassCollect
			rz = cls.modul

	
	function SCClass.ClassCollect
		.Collect( .Sourcearg, .IsVisible )


	function DataTypeSub (|Message| Node, |SCNode| Parent, |Message| ErrPlace, |string| ForInterface, |SCNodetype| BaseType, |SCModule|)
		if node.obj
			Return Compiler.program						// already done
		
		SCNode.CurrVisibility = false
		node.GiveArg
		
		|| it = .NeuClassSub( node, parent, ErrPlace, ForInterface, BaseType )
			it.ClassCollect
		
			expect !(it.Properties) (it.Source, "Datatypes canâ€™t have properties.")
					
			|| m = it.modul // to say it's already been processed...
			node.obj = M
			Return M
	
	
	function DataType (CollectFunc)
		return .DataTypeSub(node, name_space, errplace, "", SCNodetype.datatype)
	

	function NewStruct (CollectFunc)
		|| it = .NeuClassSub(node, name_space, errplace, "", SCNodetype.struct)
			it.basetype = SCNodeType.struct
			it.classcollect
			return it.modul


//	function NewCast (CollectFunc)
//		expect (name_space isa SCClass)  (node, "'cast' only goes inside classes." )
//		
//		|| f = node.first
//			f.name = "function"
//			f.Next = Â«Thg "operator_cast"Â»
//		
//		return SCFunction.NewFunc( node, name_space, ErrPlace )
	

	function SCClass.DataTypePostLoad
		require .IsDataTypeOnly
		|| node = .Source
		|| sup = .super
			.Size = sup.Size
			if !.IsNotNumeric
				.TypeInfo = sup.TypeInfo
				.defawlt := sup.defawlt

		|| N		= .name.lowercase
		|| Td		= DataTypeCode.Types[n]
			|| t = *td
			if T != 255
				.size = T.bytesize
				if t == datatypecode.Vec3 or datatypecode.iVec3
					.size = 16 // sigh 
				.TypeInfo	= T
				.IsBuiltin	= true
				
				require T.isint and !.Signed
				|| s2		= t.CreateSignedStuff
					.Signed		= s2.typenormal
					s2.Signed	= .typenormal

		expect (sup or .HasGameType) (node, "Datatypes must subclass off another type")
	
	
	function datatypecode.CreateSignedStuff (|scclass|)
		opt norefcounts
		|| s = .SetSigned(!.IsSigned)
		|| keymsg = Message(@thg)
		for (c in datatypecode.Types) (key)
			if (c == s)
				keymsg.name = key
				Return compiler[ keymsg ]
		

	function LoadSyntax (CollectFunc)
		|| name = node.name.UpperFirst
		|| AlreadyName = node[@thg] 		#require

		node.name = "function"
		AlreadyName.name = name + AlreadyName.name.UpperFirst

		Return SCFunction.NewFunc( node, name_space, ErrPlace )

	
	function NewInnerClass (CollectFunc)
		if name_space isa scclass
			return scclass.neuclass(node, name_Space.modul, errplace)
	
	function StoreExtend (CollectFunc)
		Compiler.ExtendList <~ node
		node.obj = SCImport.curr
		Return Compiler.program


	function StoreExtendModule (CollectFunc)
		Compiler.ExtendModuleList <~ node
		node.obj = SCImport.curr
		Return Compiler.program


	function ExtendOneFunc (CollectFunc)
		Compiler.ExtendList <~ node
		node.obj = SCImport.curr
		|| dot = node.first
		|| name = dot.first
		check (name == @thg or @name or @bra) (name)
		|| emb = name.next // its never not nil...
			check (emb != @prm) (emb, "Need space between bracket and name.")
			emb.remove
		return compiler.program


	function ProcessExtend (|Message| c, |bool| PreferClass, |scmodule| m=nil, |scfunction|)
		// OK now what?

		if (c == @tmp and "extend_module" or "extend")
			.ProcessExtendOld(c, preferclass)
			return nil
		
		|| dot = c[@dot]							#require
		|| name = Dot[@nil]							#require
		expect (name == @thg or @name) (name)

		M := Compiler.findmodulemsg(name)
		require m
		dot.clear
		dot.func = @thg
		|SCNode| B = M
		if name == @name		// it's a module
			PreferClass = false // whatever
		|| mcls = m.cls
		if (PreferClass and MCls)
			B = MCls
		name.func = @thg

		|| imp = c.obj as scimport
			imp.use
		  else
			B.project.use

		|| fn = scfunction.NewFuncSub(c, b)
		fn.tryadd(b)
		return fn
	

	function SCFunction.TryAdd (|SCNode| b)
		b.tryadd(.source, self, .name)
	

	function ProcessExtendOld (|Message| c, |bool| PreferClass)
		|| name = c[@thg]
			|| arg  = c.last(@arg)
			|| M = Compiler.findmodulemsg(name)
			if m and arg
				|SCNode| B = M
				|| cls = m.cls
				if (PreferClass and cls)
					B = cls
		
				|| imp = c.obj as scimport
					imp.use
				  else
					B.project.use
		
				B.Collect(arg, SCNode.CurrVisibility, m.SourceArg)

	
//	function DoOneNamedField (|message| c,  |string| name,  |string| datatype,  |int| n,  |message|)
//		using c 
//		|| src = "
//		function ${c.name} (|$Datatype|)
//			return .$name[$n]
//		function ${c.name} (assigns:|$Datatype|)
//			.$name[$n] = value
//		".parse
//		return src
//	
//	
//	function SCClass.FindDecl (|string| name, |message|)
//		opt norefcounts
//		for l in .sourcearg
//			if l == @decl
//				if l.declname ~= name
//					return l
	
	
	function ProcessAs (CollectFunc) // node, parent, errplace
		|| Name = node[@thg]					#require
		|| Cls = compiler[name]					#require
		if name_space.mustbe(scclass, node)
			name_space.processas = cls
		
		return compiler.program
	
	
	function GetFalse (CollectFunc)
		if name_space isa scclass
			name_space.false = node.NeedFirst
	
	
	function GetDefault (CollectFunc)
		|| cls = name_space as scclass
			cls.defawlt = node.NeedFirst
	
}


extend SCClass
	iterator Upwards
		|| Curr_ = self
		while (Curr_)
			yield Curr_
			Curr_ = Curr_.super


