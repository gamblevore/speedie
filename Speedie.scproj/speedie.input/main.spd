
/*
	Speedie. By Theodore H. Smith.  Licence available in licence.txt
*/



main // speedie main {
	References.test
	Compiler.SetupEnv
	Compiler.MiniTests
	if compiler.EnterCompile
		using FlowControl.attempt("Speedie"+options.variant)
			compiler.CompileTime
	Compiler.PrintResults


function Compiler.EnterCompile (|bool|)
	require !.TryVariousStartModes
	require FeedBack.ParseArgs
	return !interact.EnterAutoComplete


function Compiler.PrintResults
	|| OK = stderr.ok
	.PrintStats
	.PrintCompileErrors
	if app.parent != nil
		"Exiting Speedie ${app.id}"

	if options.SelfReplacement and FileDes.StdOut.IsTerminal
		if .VariantSuffix ~= "Test"
			|| msg = ("Success", "Failed")(ok)
			app.say(msg, false)
	if Options.Beep
		"\07"


function Compiler.MiniTests
	.TestDate
	.testTask


function compiler.ClearEnvs
	// osx freaks out sometimes otherwise
	// it's only specific flag that needs clearing tho... better to just find and remove it
	|| Allowed = "HOME LOGNAME PATH PWD SUDO_USER __PicoSock__" / ' '
	for (v in app.env) (k)
		ifn k in Allowed
			app.childenv(k) = nil


function compiler.SetupEnv
	opt norefcounts
	if (â€“sizeof FatASM) != 64

	app.parent // sigh. do this before clearenvs
	.ClearEnvs
	options.dev = app.prefs["dev"].int
	if !app.IsMainThread
		app.ThreadName = "SpeedieDebug"

	errorcolors.DisableIfNoTerminal
	error.AutoPrint = 1
	pico.GlobalConfig.DesiredThreadCount = 1
	
	// platform.log "00"
	if app.parent
		// platform.log "11"
		error.AutoPrint = 0
		ErrorColors.enabled = false



target PerryDBG
	api Speedie_Main (|&pico| comms, |int64| Mode, |&cstring| args, |ErrorInt|)
		// could this be a lib-func thats included with all compiles?
		// so any app can be run as a lib? Maybe later!
		cpp_name Speedie_Main 
		rz = app.sp_run(args, mode&4)
		app.parent(comms) // phew
		if rz == 0
			rz = app.sp_run(args, mode)



