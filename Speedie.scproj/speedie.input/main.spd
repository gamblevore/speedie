

main // speedie main {
	compiler.SetupEnv
	compiler.MiniTests
	compiler.Main
	compiler.PrintResults


function Compiler.Main
	if .EnterCompile
		using FlowControl.allow("Speedie")
			.CompileTime


function Compiler.EnterCompile (|bool|)
	return  !.TryVariousStartModes  and  FeedBack.ParseArgs  and  !interact.EnterAutoComplete


function Compiler.PrintResults
	.PrintStats
	.PrintCompileErrors
	if SpdProcess.parent != nil
		printline "Exiting Speedie " + app.id.render

	if options.selfreplacement and filedes.stdout.isterminal
		if .variantsuffix ~= "Test"
			if stderr.ok
				app.say("Speedie Success", false)
//			  else
//				app.say("Speedie Failed", false)
	if Options.Beep
		"\07"


function Compiler.MiniTests
	.testdate
	.testTask


function compiler.ClearEnvs
	// osx freaks out sometimes otherwise
	// it's only specific flag that needs clearing tho... better to just find and remove it
	for (v in app.env) (k)
		if k ~!= "HOME" and "LOGNAME" and "PATH" and "PWD" and "SUDO_USER"
			app.childenv(k) = nil


function compiler.SetupEnv
	opt norefcounts

	FlowControl.FlowMode = FlowControl.Off // can enable via "log"
	.Clearenvs
	app.PrefsInit(-1)
	
	if !app.IsMainThread
		app.ThreadName = "SpeedieDebug"

	errorcolors.DisableIfNoTerminal
	error.AutoPrint = 1
	pico.conf.DesiredThreadCount = 1
	
	if pico.parent
		error.AutoPrint = 0
		ErrorColors.enabled = false


api Speedie_Main (|&pico| comms, |int| Mode, |&cstring| args, |ErrorInt|)
	cpp_name Speedie_Main 
	pico.parent_ = comms // phew
	rz = app.sp_run(args, mode&4)
	comms.config.name = "Speedie"
	if rz == 0
		rz = app.sp_run(args, mode)


