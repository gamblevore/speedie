
/*
	Speedie. By Theodore H. Smith.  Licence available in licence.txt
*/


main // speedie main {
	Compiler.SetupEnv	
	Compiler.MiniTests
	Compiler.Main
	Compiler.PrintResults



function Compiler.Main
	if .EnterCompile
		using FlowControl.attempt("Speedie"+options.variant)
			.CompileTime


function Compiler.EnterCompile (|bool|)
	return  !.TryVariousStartModes  and  FeedBack.ParseArgs  and  !interact.EnterAutoComplete


function Compiler.PrintResults
	|| OK = stderr.ok
	.PrintStats
	.PrintCompileErrors
	if SpdProcess.parent != nil
		"Exiting Speedie ${app.id}"

	if options.selfreplacement and filedes.stdout.isterminal
		if .variantsuffix ~= "Test"
			|| msg = ("Success", "Failed")(ok)
			app.say(msg, false)
	if Options.Beep
		"\07"


function Compiler.MiniTests
	.testdate
	.testTask


function compiler.ClearEnvs
	// osx freaks out sometimes otherwise
	// it's only specific flag that needs clearing tho... better to just find and remove it
	for (v in app.env) (k)
		if k ~!= "HOME" and "LOGNAME" and "PATH" and "PWD" and "SUDO_USER"
			app.childenv(k) = nil


function compiler.SetupEnv
	opt norefcounts
	.ClearEnvs
	options.dev = app.prefs["dev"]
	if !app.IsMainThread
		app.ThreadName = "SpeedieDebug"

	errorcolors.DisableIfNoTerminal
	error.AutoPrint = 1
	pico.GlobalConfig.DesiredThreadCount = 1
	
	if pico.parent
		error.AutoPrint = 0
		ErrorColors.enabled = false



target perrydbg
	api Speedie_Main (|&pico| comms, |int64| Mode, |&cstring| args, |ErrorInt|)
		// could this be a lib-func thats included with all compiles?
		// so any app can be run as a lib? Maybe later!
		cpp_name Speedie_Main 
		pico.parent_ = comms // phew
		rz = app.sp_run(args, mode&4)
		comms.config.name = "Speedie"
		
		if rz == 0
			rz = app.sp_run(args, mode)




class aaaa
	|int| x

	module
		target debug3
			// Create IntOrBool type!
			function DistanceSorter3 (sortercomparer2 of aaaa)
				return b.x < a.x


