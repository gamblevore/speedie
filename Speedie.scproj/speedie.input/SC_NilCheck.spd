
/*	
	
	Todo:
		* Collectdecls: Pointers still need separate treatment... and getting the address/dereffing might be different too?
					
		* Transform:	This modifies the nilness of params and vars... depending on if they are tested or not
						if/while/ternary/??/?/and/or/expandtobool?
						wrapper-funcs (i guess just declare them as testers)

						if msg
							// msg is now optional
							if msg > nil, if msg != nil // same
							// msg is now optional and NOT nil within this branch
						
						if msg == nil // msg is now optional... but nil within that branch
						if msg >= nil, msg <= nil // what? just fail!
						
						My loops will need some altering! Like for arrays... we'll have to check if an
						item is nil... to exit the loop instead of checking the int value. Faster actually!
						
						
						
		* NilCheck:		This will create problems or even errors if not used properly
						Do this after transform and before refcount!
						We need to go through the entire program, and give each item found, a "timecode". That
						is... it has an "earliest time" that it COULD occur.
						So for branches, thats easy, both sides get the same time. We can do some simple logic like:
						
						function abc
							if !inited
								inited = true
								var1 = .CreateVar
								var2 = .CreateVar
							var1.explode
							var2.die
						
						If its only set in one place... that can help.
						
						So var1.explode actually has a "higher time" than var1 = .createvar. So its OK.
						
						Like this... we can make it work!
						
						POSSIBLY we could allow reordering.
						
						while looops are easier, unless they might not fire at all.
						
						function pointers... are a bit trickier?
						
						if (random[])
							a lot of code
							(.func)()
						  else
							small code
							(.func)()

						we have to check the time twice? But thats true of function calls in general???
						We could do it differently... "at each second in time..." there can be an array (or list whatever) of possible code we could be executing. The problem with that, is that it would explode exponentially :)
						
						Perhaps not? if we exclude times that not newer?
							
						
		* Strength:		Setting to a definite nil is ALWAYS an error... like: nil|msg|.pos=0
						Strength is settable in the project if its an error or problem
						For now it defaults to problem
*/




datatype NilState (byte)
	constants
		|nilstate|
		nil		= 1
		exists	= 2
		unknown = 3
		optional = 3
	syntax is (|nilstate| type, |bool|)
		return self == type
	syntax isnt (|nilstate| type, |bool|)
		return self != type



module NilChecker
	function CheckAll
		opt norefcounts
		// .Sort
	
		for f in compiler.funclist
			f.sourcearg.NilCheckArg
		
		.Sweep

	
	function Sweep
		|| main = compiler.getmainfunc(nil)
		// what about "init_"?
	



function message.NilCheckProperty
	pragma inline

function message.NilCheckAccess
	pragma inline

function message.NilCheckFP
	pragma inline

function message.NilCheckCond
	pragma inline



	// no need timer... just go through the args...
function Message.NilCheckFlat
	opt norefcounts
	for s.flat in self
		if s == @arg
			s.NilCheckArg
		  else
			s.NilCheckMemory


function Message.NilCheckMemory
//		checks:  *abc / abc[0],  abc.var,  (abc)()
	opt norefcounts
	|| f = .func
	if f == @dot
		.NilCheckProperty
	  elseif (f == @brel and self == "*") or f == @acc
		.NilCheckAccess
	  elseif (f == @func and .first == @bra)
		.NilCheckFP



function Message.NilCheckArg
	opt norefcounts
	for s in self
		#! We have ASM if/while flags set! Just use them???
		if s.func == @tmp and (s == "if" or "while")
			s.NilCheckCond
		  else
			s.nilcheckflat
			

