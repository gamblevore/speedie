
/*
	Nil checking! how to do it
	When to do it
	Where to do it
	AAAAARGH
	so complex to even think about it. OK... so lets start
	
	Now... how do I use it? and when?
	
	I think we need a multi-pass system, and the final pass should follow the code flow.
	
	Passes:
		* Collectdecls: This will set the basic variable qualities of nil or not
			DONE.
			
			This will be harder than it seems... due to how I've done pointers. Pointers are not containers...
			Even though they should be? Either way... we'll need to have two nilstates for a decl... one for the pointer
			and one for the thing itself. I COULD just make pointers now be containers... but then I'd need to change
			ALL my code.
			
			its easier to just add another pointer info. Also... getting what was pointed to... or that kinda thing
			will need info copied from the pointer's nilstate to its own? I guess you can't get a nil adderss of a
			value... so once we get the address its already not nil.


		
		* Transform:	This modifies the nilness of params and vars... depending on if they are tested or not
						if/while/ternary/??/?/and/or/expandtobool?
						wrapper-funcs (i guess just declare them as testers)

						if msg
							// msg is now optional
							if msg > nil, if msg != nil // same
							// msg is now optional and NOT nil within this branch
						
						if msg == nil // msg is now optional... but nil within that branch
						if msg >= nil, msg <= nil // what? just fail!
						
						My loops will need some altering! Like for arrays... we'll have to check if an
						item is nil... to exit the loop instead of checking the int value. Faster actually!
						
						
						
		* NilCheck:		This will create problems or even errors if not used properly
						Do this after transform and before refcount!
						We need to go through the entire program, and give each item found, a "timecode". That
						is... it has an "earliest time" that it COULD occur.
						So for branches, thats easy, both sides get the same time. We can do some simple logic like:
						
						function abc
							if !inited
								inited = true
								var1 = .CreateVar
								var2 = .CreateVar
							var1.explode
							var2.die
						
						If its only set in one place... that can help.
						
						So var1.explode actually has a "higher time" than var1 = .createvar. So its OK.
						
						Like this... we can make it work!
						
						POSSIBLY we could allow reordering.
						
						while looops are easier, unless they might not fire at all.
						
						function pointers... are a bit trickier?
						
						if (random[])
							a lot of code
							(.func)()
						  else
							small code
							(.func)()

						we have to check the time twice? But thats true of function calls in general???
						We could do it differently... "at each second in time..." there can be an array (or list whatever) of possible code we could be executing. The problem with that, is that it would explode exponentially :)
						
						Perhaps not? if we exclude times that not newer?
							
						
		
		* Strength:		Setting to a definite nil is ALWAYS an error... like: nil|msg|.pos=0
						Strength is settable in the project if its an error or problem
						For now it defaults to problem
		
		* cpp_wrappers:	Params assume not nil unless with "?" Same with all funcs actually.
*/


datatype NilState (byte)
	constants
		|nilstate|
		nil		= 1
		exists	= 2
		unknown = 3
		optional = 3
	syntax is (|nilstate| type, |bool|)
		return self == type
	syntax isnt (|nilstate| type, |bool|)
		return self != type
		

module NilChecker
	function Check
	




