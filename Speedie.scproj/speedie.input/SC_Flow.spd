

function Tran_Flow (TranFunc)
	expect (fn) (node, "Only use this on functions")
	|| msg = node[@thg] #require
	msg.ExpectLast
	node.SafeRemove
	check (msg == "off")  (msg, "Only allowed value is 'off'.")
	(fn is FlowDisabled)

	
insertion
	quietly	({FlowControl.DisabledIncr, (_0), FlowControl.DisabledIncr(-1), rejoin 0})


target Debug
	function scobject.syntaxequals (|string| name, |bool|)
		opt norefcounts
		require (self)	
		if .Name.SyntaxEquals( name, true )		// never needs !aware.
			return true
		|| x = .ExportName
		if x.syntaxequals( name, true )
			return true
		if x.endswith(name, true) and x[x.length - (name.length+1)] == '_'
			return true


	function string.trap (|message| msg=nil, |bool|)
		if scfunction.currfunc == self
			if msg
				printline msg
			return true
  else
	function scobject.syntaxequals (|string| name, |bool|)
		(name), visible
	function string.trap (|message| msg=nil, |bool|)
		(msg), visible
