

module LinkMap 
	|int| 			CurrID

	function SCObject.CanLinkTo (|SCObject| To, |bool|)
		if to.LinkedFrom < LinkMap.CurrID
			to.LinkedFrom = LinkMap.CurrID
			return true
			
	function SCFunction.DoLinkTo (|SCObject| To)
		if .canlinkto(to)
			linkmap.Store(.linkto, To)
	
	function scfunction.DoLinkFrom (|SCObject| To)
		if compiler.InPerry and .CanLinkTo(to)
			linkmap.Store(To.linkfrom, self)

	function scfunction.DoLinkBoth (|SCObject| To)
		if .canlinkto(to)
			linkmap.Store(.linkto, to)
			if compiler.InPerry
				linkmap.store(To.linkfrom, self)
	
	function Store (|&(array? of SCObject)| darr, |SCObject| obj)
		opt norefcounts
		|| arr = darr[]
		if arr == nil
			arr = []
			darr[] = arr
		arr <~ obj


	function CollectAll
		opt norefcounts
		for s in compiler.funclist
			.collect(s)


	function Collect (|scfunction| self)
		opt norefcounts
		scfunction.currfunc = self
		CurrID++
	
		for d in .args
			.CollectLinks( d )
	
		|| r = .returntype
			.CollectLinks( r )
	
		CollectFromSource(self, .sourcearg, false)
	
	
	function CollectFromSource (|scfunction| self, |message| src, |bool| InBranch)
		opt norefcounts
		for msg in src
			|| o = msg.obj
				.CollectLinks( o )
			if msg.HasAny
				if !inbranch
					|| T = msg.ASMType
					InBranch = (t == ASMType.kIf or ASMType.kwhile or ASMType.ktern)
				CollectFromSource(Self, msg, inbranch)
		


extend scfunction {

function CollectLinks (|object!| obj)
	opt norefcounts
	
	while 
		if obj isa SCFunction
			if !Compiler.InPerry
				return .DoLinkto( obj )
			return .DoLinkBoth( obj )
	
		if obj isa SCClass
			return .DoLinkTo( obj )
		
		if obj isa SCDecl
			.DoLinkto( obj.type )
			if compiler.InPerry
				.DoLinkFrom( obj )
			obj = obj.IsLookupOnly|scdecl| #require
		  else
			return


function Reach
	.ReachFunc(Compiler.VisibleFuncs!)


function ReachFunc (|SCNode| from)
	opt norefcounts
	flow off // memory order dependant!
	
	if .borked
		error (.source,    "Borked function reached!")
		error (from.source, from.ReachedName)
	
	|| MR = .MyReacher
		if mr == Compiler.VisibleFuncs
			.MyReacher = from
		return
	.MyReacher = from
		
	Compiler.stReachedFunc++
	if .IsLibrary
		Compiler.stLibFuncs++

	.cls.Reach(self)?
		
	for o in .LinkTo
		if (o.MyReacher)
			//
		  elseif (o isa SCFunction)
			o.ReachFunc(self)
		  elseif (o isa SCClass)
			o.Reach(self)
	
	
function IsUnused (|bool|)
	opt norefcounts
	|| p = .project
		require p.WarnUnusedFuncs

	if self == Compiler.mainfunc
		return false
	
	|| MR = .MyReacher
	if MR and MR != Compiler.VisibleFuncs
		return false
	
	if .isvisible and .islibrary
		return false

	return (self isnt ConOrDes) and !.IsAllocOrNew

}


function message.HateUnusedFuncs
	opt norefcounts
	|| imp = scimport.findimport(.name)
		imp.warnunusedfuncs = true
	  else
		.expect(.func, "Can't find project")


function scclass.Reach (|SCNode| from, |message| src=nil)
	opt norefcounts
	flow off
	require !.MyReacher
	.MyReacher = from
	Compiler.stReachedClass++
	
	if Options.BannedClasses
		.BannedCheck(src)
	|| s = .super
		s.Reach(self)
	|| b = .Behaviour
		b.FuncTable!.cls!.reach(self)
	
	|| df = .DestructorFunc
		df.ReachFunc(self)
	
	for d in .Properties
		d.TypeReach(self, d.source!)
		d.contains!.TypeReach(self, d.source!)
	
	.ReachBehaviours


function scclass.ReachBehaviours
	flow off
	for f in .Access
		if f isa SCFunction
			if f.IsBehaviour
				f.ReachFunc(self)


function compiler.DeadStrip
	opt norefcounts
	compiler.MainFunc.ReachedDetect?
	
	for f in .FuncList
		f.ReachedDetect

	if options.MakeInterpreter // must come before the next loop
		for c in .classlist
			c.reach(Compiler.Interpreter)
	
	for c in .classlist
		if c.MyReacher // shorten-discovery-chains, 
			c.ReachBehaviours // behaviour chains tend to be long.

	CodeSorter.LeafsFirst		// super-refcounter wants this
	

function scdecl.TypeReach (|SCNode| from, |message| src)
	opt norefcounts, flow off
	if self
		return .type.reach(from, src)

	
