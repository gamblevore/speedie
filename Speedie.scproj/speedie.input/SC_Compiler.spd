
/*
	Jeebox internals. By Theodore H. Smith...
*/

|SCClass|	Typef64
|SCClass|	Typef32
|SCClass|	Typefloat
|scclass|	Typehfloat
|SCClass|	TypeSaveable
|SCClass|	TypeInt
|SCClass|	TypeInt16
|SCClass|	TypeDate
|SCClass|	TypeInt64
|SCClass|	TypeuInt16
|SCClass|	TypeuInt
|SCClass|	TypeuInt64
|SCClass|	TypeString
|SCClass|	TypeSyntax
|SCClass|	TypeBool
|SCClass|	TypeCharSet
|SCClass|	TypeByte
|SCClass|	TypeObject
|SCClass|	TypeVoidPtr
|SCClass|	TypeWrapper
|SCClass|	TypeArray
|SCClass|	TypeDictionary
|SCClass|	TypeFastString
|SCClass|	TypeJBClass
|SCClass|	TypeVec4
|SCClass|	TypeVec3
|SCClass|	TypeVec2
|SCClass|	TypeiVec4
|SCClass|	TypeiVec3
|SCClass|	TypeiVec2
|SCDecl|	TypeNil
|SCClass|	TypeVoid_
|SCDecl|	TypeVoid
|SCDecl|	TrueBool
|SCDecl|	FalseBool

extend_module compiler
	|SCBase|	VisibleFuncs
	|SCBase|	Interpreter



function Compiler.FindSpeedieRoot (|string|)
	|| paths = app.exepath.resolve.parent
	|| srch = "/Speedie/"
	|| found = paths.find(srch,0,int.max,true)
		return paths[0, found + srch.length]
	return "/usr/local/speedie"
	

module Compiler {
linkage
	cpp_part Comp

|File|					BaseProjectPath
|string|				OriginalInputPath
|File|					_BuildFolder
|File|					TempFolder
|String|				_Projects
|String|				_SpeedieProj
|SCFile|				InternalFile = SCFile.new(nil)
|string|				ProjectName
|string|				ReportedName
|message|				DebugInsert
|message|				ConfMsg
|dictionary|			InsecureWords

|SCFile~Dictionary|		Files = nil
|[SCImport]|			ImportedList
|SCImport~Dictionary|   ImportedNames = nil
//|file~Dictionary|		FilesImported = nil


|SCModule|				program

|[SCClass]|				ClassList
|[SCModule]|			ModuleList
|[SCFunction]|			FuncList
|[SCFunction]|			ProtoTypes

|SCBase~Dictionary|		ExportNames = nil
|dictionary of dictionary| AdjDicts = dictionary()

|SCFunction|			PrivateProperty
|SCFunction|			RefIncr
|SCFunction|			RefDecr
|SCFunction|			RefClear
|SCFunction|			RefDecrMulti
|SCFunction|			RefFreeIfDead
|SCFunction|			RefSafeDecr
|SCFunction|			RefSetRef

|SCFunction|			TernaryFunc
|SCFunction|			TernaryFunc2

|[String]|				SyxArray
|Message|				Extend_list
|[Message]|				API_List
|[SCFunction]|			API_Funcs
|Message|				API_Place
|[Message]|				Extend_module_list

|SCModule|				DisamClasses
|SCModule|				DisamModules

|bool|					HasMainFunc
|bool| 					InitedOK = true
|int|					stClasses
|int|					stFuncs
|int|					stReachedFunc
|int|					stReachedClass
|int|					stFunctionProgress
|int|					stParseTime
|int|					stTotalSourceSize
|int|					stTotalFileCount
|int|					stParseTimeTotal
|int|					CurrStage
|SCFunction|			ClassListInitFunc




constants
	kTimeWidth = 19


function BuildFolder (|file|)
	ifn ._BuildFolder.Exists
		._BuildFolder.MakeDir
	return ._buildfolder


function GetMainFunc (|message| where, |ScFunction|)
	opt norefcounts
	|| mod = Compiler.FindModule("app", where)
		|| fn = mod["main"]
		if fn isa SCFunction
			return fn


function PrepareInterpreter
	require options.ListAllLib


function CompileAll (|bool|)
	require .stage("Compilation")
	.InitCompiler
	.testdate
	.ImportAll

	.PrepareInterpreter
	require .Stage( "More constructors" )
	.RefConstructors // constructors
	.CheckIsGoodLibrary

	require .Stage( "Stripping dead code" )
	.DeadStrip
	CodeSorter.LeafsFirst		// super-refcounter wants this
	
	require .Stage( "NilChecking" )
	nilsweep.CheckAll
	
	require .Stage( "RefCounting" )
	.Timer( "RefCounting" )
	.DoRefAnalysis				// do actual refcounts.

	if Options.Cpp
		.Timer( "Export Cpp" )
		if linkage.Interpreter
			ExecTable.Run
		Cpp_Export.ExportAllSource

	SCImport.ExportShaders

	require .Stage( "Finished" )
	.TimerSub("Parse", .stParseTimeTotal)
	.Timer( "" )
	return true


function Projects (|String|)
	return ._projects init .findspeedieRoot


function SpeedieProj (|String|)
	return ._SpeedieProj init .projects["Speedie.scproj"]


function testdate
	|int64| day  = 5662310400
	|int64| hour = 235929600
	|int64| min  = 3932160
	|int64| sec  = 64*1024
	if sec  != 1s
	if min  != 1mins
	if hour != 1hours
	if day  != 1days
	

function compiler.ReachedClassCount (|int|)
	opt norefcounts
	for C in compiler.classlist
		RZ += ((C.currreacher) and c.isobject)


function AddSubProjects (|[SCModule]| Modules)
	opt norefcounts
	for Imp in .ImportedList
		Modules <~ imp.Mod

function FastString.AppendWidth (|string| s, |int| Width)
	self <~ s
	self <~ (' ', Width - s.length)


function Reached (|string| s, |bool|)
	flow off
	|| obj = self[s]
		return (obj.currreacher)


function InitTypes
	TypeInt				= .Constpiler("int")
	TypeInt16			= .Constpiler("int16")
	TypeInt64			= .Constpiler("int64")
	TypeuInt			= .Constpiler("uint")
	TypeuInt16			= .Constpiler("uint16")
	TypeuInt64			= .Constpiler("uint64")
	Typef64				= .Constpiler("f64")
	Typef32				= .Constpiler("float")
	Typehfloat			= .Constpiler("hfloat")
	Typefloat			= Typef32 // whyyyyy... why I do dis. 
	TypeBool			= .Constpiler("bool")
	TypeString			= .Constpiler("string")
	TypeByte			= .Constpiler("byte")
	TypeCharSet			= .Constpiler("charset")
	Typevec2			= .Constpiler("vec2")
	Typevec3			= .Constpiler("vec3")
	Typevec4			= .Constpiler("vec4")
	Typeivec2			= .Constpiler("ivec2")
	Typeivec3			= .Constpiler("ivec3")
	Typeivec4			= .Constpiler("ivec4")
	Typedate			= .Constpiler("date")
	TypeJBClass			= Compiler..classdata
	TypeObject			= Compiler..object
	TypeSyntax			= Compiler..syntax
	TypeVoidPtr			= Compiler.._voidptr
	TypeVoid_           = Compiler.._void
	TypeWrapper			= Compiler..datatypewrapper
	TypeDictionary		= Compiler..dictionary
	TypeFastString		= Compiler..faststring
	TypeArray			= Compiler..array
	TypeSaveable		= Compiler..saveable

	typevoid            = typevoid_.TypeNormal
	typestring.HasSubClass = true // compiler doesn't know about internal-subclasses of string.


function InitBasicStuff // compiler.init
	if !StdErr.ok
		stderr.LowerErrorsTo = ErrorSeverity.Warning
		compiler.InitedOK = false
	(Message).Restore
		
	cpp_export[""] // str0
	options.ListAllLib = linkage.interpreter
	
	.InitTypes
	TypeNil = .AddGlobalConst( "nil", TypeObject )
	TrueBool = .AddGlobalConst( "true", TypeBool )
	FalseBool = .AddGlobalConst( "false", TypeBool )
	
	.AddGlobalConst( "__time_id__", typeint ).islookuponly = «num scimport.recent.timeid »
	.AddGlobalConst( "__now__", typedate ).islookuponly = «num date.now »
	.AddGlobalConst( "__modified__", typedate ).islookuponly = «num scimport.recent »
	.AddGlobalConst( "π", typef64 ).islookuponly = «num "3.1415926535897932" »
	.AddGlobalConst( "τ", typef64 ).islookuponly = «num "6.2831853071795864" »

	stderr.LowerErrorsTo = 0


function InitBasicFuncs (|bool|)
	.RefSetRef		= .LoadRefFunc( "JB_SetRef" )
	.RefIncr		= .LoadRefFunc( "JB_Incr" )
	.RefDecr		= .LoadRefFunc( "JB_Decr" )
	.RefClear		= .LoadRefFunc( "JB_Clear" )
	.RefDecrMulti	= .LoadRefFunc( "JB_DecrMulti" )
	.RefFreeIfDead	= .LoadRefFunc( "JB_FreeIfDead" )
	.RefSafeDecr	= .LoadRefFunc( "JB_SafeDecr" )
	.TernaryFunc	= .FindFunction( "JB_Ternary" )
	.PrivateProperty = .CreateFuncFromSource("function Private () {disabled `This property is private.`}")
	return StdErr.OK


function CreateFuncFromSource (|String| Src, |SCFunction|)
	|| msg	= src.ParseClean
	rz		= SCFunction.NewFunc( msg, nil, msg )|SCFunction|
	rz.IsVisible = false


function Constpiler (|string| name, |scclass|)
	rz = compiler[name]  #require
	rz.typenormal.isconst = true


function Library (|file|)
	return .projects.filech("Library")


function Jeebox (|file|)
	return .Projects.filech("jeebox.scproj")


function Speedie (|file|)
	return .Projects.filech("Speedie.scproj")


function ImportLibs
	SCImport.STDLibTime = true
	SCImport.Importpath( "Library",		.Library,		1 )
	SCImport.Importpath( "jeebox",		.Jeebox,		1 )


function ImportProj
	SCImport.STDLibTime = false
	SCImport.Importpath( "",   .BaseProjectPath,  0 )


function ImportAST
	opt norefcounts
	for rz in .ImportedList
		rz.PrepareAll



function ImportAll
	.Timer( "Read" )
	require .Stage( "Finding Files" )
	
	.ImportLibs
	.ImportProj
	.ImportAST
	if options.SelfReplacement //and options.MakeASM
		VM_Builder.MakeTheVM

	require .Stage( "Import" )
	.Timer( "Import" )
	
	for L in SCImport.AllFiles
		L.Proj.use
		compiler.program.ImportFile( L )

	.Stage( "Initialising Compiler" )
	.InitBasicStuff
	.AddMain
	require StdErr.ok
	
	parser.insertedflags = MsgUIFlags.Inserted // noice
	scimport.noproj
	
	for c in .classlist
		C.TryAddToProject
	
	require .Stage( "Processing Delayed Imports" )
	for l in .extend_list
		SCClass.ProcessExtend( l, true )

	for l in .extend_module_list
		SCClass.ProcessExtend( l, false )

	require .initbasicfuncs
	
	.ModuleList = ListModules( .program.access )
	.AddSubProjects(.ModuleList)
	.ModuleList <~ .program
	
	
	require .Stage( "Creating Class Hierarchy" )
	for c in .classlist
		c.AddInterfacesTo(.modulelist)
		
	for c in .ClassList
		c.CreateBehaviour	// creates new classes, put before loadsuperclass
	
	for c in .ClassList
		c.LoadSuperclass
	
	for c in .ClassList
		c.GetDepth
	
	
	require stderr.ok
	
	.SortModules
	.OrderClassList

	for c in .ClassList
		c.DataTypePostLoad
	
	require .Stage( "Savers and behaviours" )
	for c in .ClassList
		c.LoadSaver

	.DoSavers(0)

	for c in .ClassList
		c.ProcessBehaviours
	
	require stderr.ok
	for c in .ClassList
		c.ProcessInterfaces
	
	require .Stage( "Creating Class Allocators And Stuff" )
	for c in .ClassList
		c.LoadContainedType


	require .Stage( "Parsing Class Properties" ) // just moved this... used to come after
	for c in .ClassList					  // handling function prototypes.
		c.LoadProperties
		require !TooManyErrors()


	for c in .ClassList					  // handling function prototypes.
		if c.isstruct
			c.GetStructDepth

	.sortmodules	// need to re-sort array??? lol.


	for c in .ClassList
		c.CalculateSize


	for c in .ClassList
		c.Project.use
		c.LoadConstructorsAndAllocators
		

	require .Stage( "Collecting Constants" )
	for c in .ClassList
		c.Project.use
		c.MoreConstantCollection // constants gotta come after 


	scimport.noproj


	for f in SCImport.AllFiles
		f.Use
		Compiler.program.CollectConstants( f.LiveAST, f.proj )

	for m in .ModuleList
		m.Use
		m.CollectConstants( m.Source, m.project )

	(Message).Restore
	scimport.noproj


	// we need decls for this.
	// can we move decls earlier?
	if .API_Place
		|| Proj = .API_Place[@thg]
		for m in .api_list
			sc_api.DelayedClassAPI(m, proj.name)

	.DoSavers(1)


	require .Stage( "Creating Class Exportnames" )
	for c in .ClassList
		c.Use
		c.LoadExportName

	
	require .Stage( "Initialising Modules" )
	.LoadInits


	scimport.noproj
	

	require .Stage( "Handling Function Prototypes" )
	for f in .ProtoTypes
		scfunction.currfunc = f
		f.FuncDecls
	scfunction.currfunc = nil

	require StdErr.OK
	

	.DoSavers(2)

	
	require .Stage( "Parsing Function Parameters" )
	for f in .FuncList
		scfunction.currfunc = f
		f.FuncDecls
		f.LoadExportName
		require !TooManyErrors()


	scfunction.currfunc = nil
	

	/// Then declarations "|| x = message[0]"	
	require .Stage( "A Bit More Stuff On Classes" )
	for c in .ClassList
		c.ExportName = c.JSStructName // minifier...
		c.AfterFuncsDecled
	  

	require .Stage( "Collecting File Variables" )
	for m in .ModuleList
		m.InitDecls
	for F in SCImport.AllFiles
		F.Decls Compiler.Program

	scimport.noproj
	(Message).Restore


	require .Stage( "Even More Stuff On Classes" )
	for c in .ClassList
		c.AfterAfterFuncs
	

	.Stage( "Collecting Module Variables" )
	for m in .ModuleList
		if m != Compiler.program
			m.BaseDecls
			m.FillDisposeFunc
	

	.Stage( "Renaming Module Variables" )
	for m in .ModuleList
		m.RenameVars
		if m.cls
			m.cls.RenameInterfaces


	for m in SortInitOrder(.ModuleList)
		m.DelayedInitFuncTransform
	.PostInitCodeCall
	

	.Stage( "Creating Exportnames For Function Prototypes" )
	for f in .FuncList
		if f.ProtoDecl
			f.ProtoDecl.Name = f.ExportName
	
	
	.Stage( "Checking Iterators" )
	for c in .ClassList
		c.CheckIterator


	.Timer( "Transform" )
	.Stage( "Transforming Functions" )

	for f in .FuncList
		require !TooManyErrors()
		f.CheckNotBadName
		f.Transform
		
		.stFunctionProgress++	

	.Stage( "Building Function Link Map" )
	for f in .FuncList
		f.PostTransform // removed some func-calls...


function LoadInits
	for m in .ModuleList
		m.Use
		m.LoadExportName
		m.LoadInitFunc


function PostInitCodeCall
	.program.initvarsarg <~ "initcode_()".parseclean


function ExprFuncsInit
/* @decl is BAD!   dont add it*/
	exprfuncs[@Rel ] = (TypeOfRel)
	exprfuncs[@BRel] = (TypeOfBRel)
	exprfuncs[@ARel] = (TypeOfARel)
	exprfuncs[@Adj ] = (TypeOfAdj)
	exprfuncs[@Func] = (TypeOfFunc)
	exprfuncs[@Acc ] = (TypeOfAccess)
	exprfuncs[@msg ] = (TypeOfMsg)
	exprfuncs[@sthg] = (TypeOfSthg)
	exprfuncs[@Dot ] = (TypeOfDot)
	exprfuncs[@Name] = (TypeOfSyx)
	exprfuncs[@url ] = (TypeOfURL)
	exprfuncs[@list] = (TypeOflist)
	exprfuncs[@Arr ] = (TypeOfArr)
	exprfuncs[@Arg ] = (TypeOfArgArr)
	exprfuncs[@Char] = (TypeOfChar)
	exprfuncs[@sstr] = (TypeOfSString)
	exprfuncs[@Item] = (TypeOfLast)
	exprfuncs[@Bra ] = (TypeOfBra)
	exprfuncs[@Str ] = (TypeOfStr)
	exprfuncs[@Back] = (TypeOfStr)
	exprfuncs[@Num ] = (TypeOfNum)
	exprfuncs[@unit] = (Typeofunit)
	exprfuncs[@Thg ] = (TypeOfThg)
	exprfuncs[@Ques] = (TypeOfQues)
	exprfuncs[@SDot] = (Typeofsdot)
	exprfuncs[@Type] = (typeoftype)
	exprfuncs[@Emb ] = (TypeOfNothing)
	exprfuncs[@Sheb] = (TypeOfNothing)


function InitCompiler
	require (.Projects.fileCH("Library").mustexist)
	require stderr.ok
	scoperator.Init
	.exprfuncsinit
	Cpp_Export.Init

	.files := Dictionary.new
	
	////////////////////////////////////////////////
	.ExportNames = Dictionary.new
	.TimerOutput = FastString.new
	.TimerOutput <~ "\n"

	.ImportedNames = Dictionary.new      // stop projects imported twice.
	.CurrStage = 1

	.stReachedClass = 0
	.stParseTimeTotal = 0
	.stReachedFunc = 0
	SCGlobals.UniqueNum = 100
	.stClasses = 0
	.stFuncs = 0
	.stFunctionProgress = 0
	////////////////////////////////////////////////
	
	if options.SingleFileInput
		if Interact.Perry
			._BuildFolder = compiler.originalinputpath.ScriptContainer.file
		  else
			._BuildFolder = .BaseProjectPath
	  else
		._BuildFolder = .BaseProjectPath[ "Build" + Compiler.VariantSuffix ]

	.TempFolder = TransCompiler.ProjTmpPath.file  ///Tmp/Speedie/Proj
	.TempFolder.MakeEntirePath
	.GeneratedCppsFolder.makeEntirePath
	
	.CreateRoot
	.CreateDisambiguation
	SCImport.AllFiles <~ .InternalFile
	ir.Resources = SCImport.AllFiles // why not? its just the same thing really. scfile is a subclass of file



function GeneratedCppsFolder (|File|)
	// * For most projects (Galaxies), we build jb.cpp in the temp folder, when built from terminal.
	// * For xcode compiles, we use ExternalCompile, which creates a "Cpp" folder for the jb.cpp to be in
	//   keeping it nice and separate from the builds that we want to use.
		// * we COULD build straight from the temp-folder? I don't see why not...
	// * For self-replacement, well... we use the buildfolder, which is versioned: Build, BuildTest, BuildTest2. 
	
	// the question is, what happens to compiling speedie from xcode? :D
	// I guess it's considered "self-replacement". It's OK.

	if !Options.ExternalCompile
		return .TempFolder
	if  Options.SelfReplacement
		return .BuildFolder
	return .BaseProjectPath["Cpp"]



function CreateDisambiguation
	// classes.string, module.string, globals.whatever, etc.
	// make a module...

	.DisamClasses = SCModule.NewContainer("__classes__")
	.DisamModules = SCModule.newContainer("__modules__")


function FindClass (|String| name, |Message| where, |SCClass|)
	opt norefcounts
	|| Mod = .FindModule(name, where, "Expected a class but found something else")
		return Mod.cls			#expect (where, "Expected a class but found module.")


function FindClassOK (|String| name, |SCClass|)
	opt norefcounts
	|| Obj = compiler.program.access.valuelower( name )
	if obj isa scmodule
		return obj.cls


function FindModuleMsg (|Message| where, |SCModule|)
	return .FindModule(where.name, where)


function FindModule (|String| name, |Message| where, |string| ErrMsg="Not a module.", |SCModule|)
	|| Obj = compiler.program.access.valuelower( name )

	if Obj isa SCModule
		return Obj
	
	if where and !obj
		error (where, "Can’t find: " + name) // OK
	  elseif errmsg
		error (where, ErrMsg)


function CreateRoot
	|| Prj = SCImport.new(nil)
	.InternalFile.Proj = Prj

	|| M = Prj.Mod
	.program = M

	M.ExportName = "JB"
	M.Name = "main"
	M.Lookup = nil


function LoadRefFunc (|String| name, |SCFunction|)
	opt norefcounts
	|| o = .FindFunction(name)
		o.AllocCode = kIsReffer
		return o


function FindFunction (|string| Name, |SCFunction|)
	opt norefcounts
	|| o = compiler.program[ name ]
	if o isa SCFunction
		Return o
	
	error ( nil, "Can’t find function: " + name )


function scfunction.IsAllocOrNew (|bool|)
	return self isa (kIsAlloc (|) kIsNew)


function scfunction.HasFloatparams (|int|)
	opt norefcounts
	for arg in .args
		|| d = arg.type.TypeInfo
		rz += (d.isfloat)


function scfunction.HasFloatReturn (|int|)
	opt norefcounts
	|| f = .returntype
		return f.isfloat|int|


/*function CheckMaxVars
	require options.CheckMaxVars
	|| V    = 0
	|| Used = 0
	|| Args = 0
	|int[10]| ArgVersions

	for f in .FuncList
		if (f.CurrReacher)
			|| N = f.args.length
			V = v max f.maxvars
			ArgVersions[n min 9]++
			used ++
			|| FP = f.HasFloatparams
			|| RP = f.HasFloatReturn
			if fp or rp
				"${f.RenderName} has $fp float params and $rp float result."

	for i in (–count argversions)
		if argversions[i]
			"${argversions[i]} args of size $i"


	"$v maxvars"
	"$used funcs used. ${.funclist.length} funcs total."
	// what about the function count
*/


function DoRefAnalysis
	opt norefcounts
	|[message]| list // avoid reading same thing that we alter.
	for f in .FuncList
		if f.CanDoRefs
			list.clear
			f.AnalyseRefs(list)
	scfunction.currfunc = nil
	//.CheckMaxVars


function scfunction.CanDoRefs (|bool|)
	if .IsWrapper or .IsAllocOrNew or .IsMacro
		return false
	scfunction.currfunc = self
	return true


function RefConstructors
	opt norefcounts
	for f in .FuncList
		if f.CanDoRefs
			f.BuildConstructorDestructor
	scfunction.currfunc = nil


function SortModules
	.ModuleList.sort(ModulesSorter)


function SCClass.IsDataTypeOrStruct (|bool|)
	return .IsDataType or .IsStruct


function ModulesSorter (SorterComparer)
	opt norefcounts
	|| aa = a|scmodule|
	|| bb = b|scmodule|
	|| ca = aa.cls
	|| cb = bb.cls
	
	if !ca or !cb // a module
		if ca or cb
			return cb
		// could use initafter?
	  else
		|| tt = aa.cls.basetype
		|| D = tt|int| - bb.cls.basetype|int|
			return D < 0
		
		D = ca.depth|int| - cb.depth|int|
		if D
			return D < 0

		if tt == scbasetype.struct 
			D = ca.StructContainerDepth|int| - cb.StructContainerDepth|int|
			if D
				return D < 0
		
	return aa.name < bb.name


function scfunction.StripTest
	opt norefcounts
	|| Base = Compiler.VisibleFuncs
	
	if !.IsVisible	
		require options.ListAllLib and !.disabled
		base = Compiler.Interpreter
	
	if !.FindReached(base)
		.depth = 1


function DeadStrip
	opt norefcounts
	Compiler.VisibleFuncs = scbase("Visible",	false)
	Compiler.Interpreter = scbase("Interpreter", false)

	.getmainfunc(nil).StripTest?
	
	for f in .FuncList
		f.striptest

	if options.ListAllLib // must come before the next loop
		for c in .classlist
			c.reach(Compiler.Interpreter)
	
	for c in .classlist
		if c.CurrReacher // shorten-discovery-chains, 
			c.ReachBehaviours // behaviour chains tend to be long.
		
	
			

function CheckIsGoodLibrary
	if options.ProjectIsLibrary
		expect compiler.api_place ("No export_api found for library-compile. Either create export_api, or create 'main' to make it not a library.")


function InputFile (|File| Default, |String| s, |message| where, |File|)
	opt norefcounts
	expect !(s contains "../") (where, "Insecure path")
	// find the "highest" file...
	if SCImport.Curr
		|| found = SCImport.Curr.Resources.ValueLower(s)
			return found
			
	|| best = int.max
	for (imp in .ImportedList)
		if (imp.depth < best)
			|| f = imp.Resources.ValueLower(s)
				rz = f
				best = imp.Depth
	if rz
		return rz

	rz := Compiler.BaseProjectPath[s]
	if (Default != nil)
		rz := default[s]
	ifn rz.exists
		rz = nil


function OrderClassList
	// put the .ClassList in the same order as the ModuleList
	.ClassList.Clear
	for m in .ModuleList
		.ClassList <~ (m.cls		#continue)


function AddGlobalConst (|string| name, |SCClass| c, |SCDecl|)
	|| d = SCDecl.new
	d.Type = c
	d.IsConst = true
	d.IsLookupOnly = "" // it is lookuponly... but what for? "" i guess... whatever.
	d.Name = name
	d.default = «thg name »
	Compiler.program.TryAdd( nil, d, name )
	Return d


function AddMain
	|message| m

	|| f = .getmainfunc(nil)
		m = f.sourcearg
	  else
		"Compiling as library."
		m = .program.CollectString( "main:\n" ).last				// mainproj.collect
	Options.ProjectisLibrary = !f
	
	if m and .ConfMsg
		m.first = "app.configure = __AppConfString".parse
	
	|| b = (Truebool, falsebool)(options.ProjectIsLibrary) 
	.program.TryAdd( nil, b, "__IS_LIBRARY__" )


function Collect (|Message| m, |bool| visible)
	Compiler.program.CollectOne( m, visible ) // delete. compiler.collect --> .MyProj.Collect


syntax append (|message| m)
	.InternalFile.LiveAST <~ m

syntax access (|string| name, |Message| where=nil, |SCClass|)
	cpp_part AccessStr
	return .FindClass( name, where )


syntax access (|Message| name, |SCClass|)
	if name
		return .FindClass( name.name, name )


////  ////  ////  ////  ////  ////  ////  ////  ////  ////  ////  ////  ////  

|Date|			LastTime
|string|		LastTimeName
|FastString|	TimerOutput

function AppendCompilerTime (|string| s, |int| Durr)
	compiler.TimerOutput.appendwidth(s, compiler.kTimeWidth)
	if options.color
		compiler.TimerOutput <~ errorcolors.good
	compiler.TimerOutput.appenddurr(Durr)
	if options.color
		compiler.TimerOutput <~ errorcolors.normal
	compiler.TimerOutput <~ '\n'


function TimerSub (|string| s, |int| Durr)
	Durr -= .stParseTime
	.stParseTimeTotal += .stParseTime
	.stParseTime = 0
	.AppendCompilerTime(s, durr)


function Timer (|string| name)
	|| Curr = Date.Now
	if (.LastTime)
		.TimerSub( .LastTimeName, (Curr - .LastTime)|int| )

	if !name and !options.silent
		print .TimerOutput
	
	.LastTimeName = name
	.LastTime = Date.now


function Stage (|string| name, |bool|)
	require StdErr.OK
	if (Options.PrintStages)
		|| space = " "*(Compiler.CurrStage <= 9)
		" ${.CurrStage}$space  :: $name ::  "
	.CurrStage++
	return true


function IsTest (|bool|)
	return (App.fileName contains "Test")


function VariantSuffix (|string|)
	if (Options.SelfReplacement == kSelfReplace) and Options.Compile
		return "Test" + Options.Variant
	return Options.Variant



function AddSCProj (|string| Path, |string|)
	if (path.name contains '.')
		return path
	return path + ".scproj"


function FindProjNoSuffix (|string| Path, |string|)
	|| spd = path + ".spd"
	if spd.FileExists
		return spd
	return path + ".scproj"


function FindProject (|string| Path, |bool| error, |File|)
	|| p = .BaseProjectPath.parent
	|| B = .FindProjectSub(p, path)
		return B
	|| A = .FindProjectSub(.projects, path)
		return A

	
helper FindProjectSub (|string| base, |string| Path, |File|)
	if (Path[0] == '/')
		return Path.ExistingFile
	
	|| First = Path
	|| SlashPos = Path.find('/')
		First = Path[0, SlashPos]
	first = .AddSCProj(first)
	
	if SlashPos
		First = First + Path[SlashPos...]

	rz = base.FileCh(First)
	if !rz.Exists
		rz = nil
}


function ProjName (|String|)
	return Compiler.Program.ExportName // OK



// recursive is a bit akward...
	// x --> a
	// a --> b
	// b --> c
	// b --> a
// a and b should be recursive
// x and c should NOT be.


module depthtest
	function x				// 2 or 4?
		.a3
		.a1
		.r1
		
		
	function a1: .a2     		// 3
	function a2: .a3    		// 2
	function a3:				// 1
	function r1: .r2			// r
	function r2 {.r1, .a1, .a3}	// r
