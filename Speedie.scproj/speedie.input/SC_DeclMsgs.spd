


function DeclsDefault (|Message| def, |Message|)
	opt norefcounts
	if def.issetrel
		return def.Last


function MakeDecl (|string| Type, |string| Name, |Message| Value, |SCDeclInfo| Purpose=0, |Message!|)
	opt norefcounts
	rz = «decl »
	|| f = rz.msg(@arg),    todo "this should change... I don't like @arg types."
	
	if (Type)
		(f is style2)
		f <~ (@thg, type)
	  else
		f.func = @emb
	
	if !Value
		rz <~ (@thg, name)
		return rz
	
	|| Rel = rz.msg(@rel)
	|| NameMsg = rel.msg(@thg, name)
	rel <~ (@opp, "=")
	rel <~ value
	
	|| o = value.obj as scdecl
		|| dcl = o.copydecl(true)
		dcl.info |= purpose
		dcl.Name = name
		dcl.Default = value
		NameMsg.obj = dcl		
		Rel.obj = dcl
		rz.obj = dcl
		f.obj = dcl
	

function MakeDeclOrRel (|Message| Into, |message| namemsg, |Message| value, |Message|)
	require into
	rz = «decl
		«emb »
	»
	
	if value
		Value = NeweqRel( NameMsg, value )
	  else
		Value = NameMsg
	rz <~ value
	into.First = rz



function SCDecl.IntsOnly (|Message| exp, |bool|)
	|| T = .type.TypeInfo
	if (.isnormalnumber and t.isint)
		return true // for constants... isnormalnumber allows constants a bit better.
	
	expect (T != DataTypeCode.UnusedType)	(exp, "Can’t do bit ops on this")
	expect (!T.isfloat)						(exp, "Can’t do bit ops on floats")
	return true



function DefaultStitch (|Message| Default, |Message| dcl, |message|)
	opt norefcounts
	using (dcl)
	rz = dcl.msg(@rel)
	rz <~ dcl.second
	rz <~ (@Opp, "=")
	rz <~ Default


function scfunction.CollectDeclsParams (|Message| prms, |SCNode| AddToSpace)
	opt norefcounts
	scmodule.curr = .parent|scmodule|
	|| cls = .Cls
	if !cls
		cls = .parent|SCModule|!.Cls
	  elseif !prms.HasSelfAsFirst
		expect (AddToSpace) (prms)
		.AddSelfToFunc(cls, AddToSpace)

	for item in prms
		item.CollectOneParam(self, AddToSpace, cls)

	|| ns = .nilself
		.WantAs(ns)
	|| r = .returntype
		if self is HidesProperties
			r = r.makereal
			.ReturnType = r
		if r.isbarestruct
			(r is returnedstruct)

//	check (!dcl.isbarestruct) (self, "Structs can't be passed without a pointer")
		
			


function Message.CollectOneParam (|scfunction| func, |SCNode| Recv, |scclass| cls, |bool|)
	opt norefcounts
	real self
	if (func.isassigns == 2) and .islast
		if !cls
			error (self, "Can’t use this here." )
		  else
			// setter x (|int|) --> fn x (|int| value)
			func.IsAssigns = 3
			if cls.IsDataTypeOrFP
				.next = .copy // fn x (|int|) --> fn x (|int| value, |int|)
			.AddValue(func)
		
	if  self == @Item  and  .first == "assigns"
		self = .Last
		func.IsAssigns = 1
		.addvalue(func)

	require .Expect(@decl)
	
	|| dcl = .CollectDecl(func, recv, declmode.FuncParam, cls, func) #require
	if dcl.default isthing "nil"
		dcl.NilDeclared = nilstate.optional
	func.args <~ dcl
	(dcl isnt NumberConst)
	if dcl.name
		(dcl is Param)
		(dcl isnt Altered)
	  else
		(dcl is return)
	return true



function scclass.CollectProp (|Message| msg, |bool|)
	opt norefcounts
	|| dcl = msg.CollectDecl( .modul, self, DeclMode.properties, self)
		.properties <~ dcl
		(dcl is property)
		dcl.becomereal
		return true



// remove these... but later.
function CollectDeclsGlobals (|Message| arg, |SCNode| scarg)
	opt norefcounts
	for item in arg
		if item == @decl
			require item.CollectAGlobalDecl(scarg)


function scdecl.ForContained (|scdecl|) // notglobal, noglobal
	|| Strong = (.NilDeclared isnt nilish) and .typesuffers
	if (self isnt global) and !.name and !strong 
		return self
	// strange that it can have a name and be marked as !
	// surely... all contained classes can be nil?
	rz = .copydecl
	rz.name = ""
	rz.nildeclared |= nilstate.nilish
	(rz isnt global)


function scdecl.NotLocal (|scdecl|)
	if (self isnt local) and !.name 
		return self
	rz = .copydecl
	rz.name = ""
	(rz isnt local)


function scdecl.AsLocal (|scdecl|)
	if (self is local) 
		return self
	rz = .copydecl
	rz.name = ""
	(rz is local)


function Message.CollectAGlobalDecl (|SCNode| scarg, |bool|)
	opt norefcounts
	|| f = .file
		f.proj.decllayer.use
	
	|| dcl = .CollectDecl(scarg, scarg, declmode.Globals)		#require
	|| def = dcl.Default
	if def and !dcl.nilstated
		|| d = def.msgdecl
		if d and d.StatedReal
			dcl.nildeclared = nilstate.real			// in case of something like |object| x = real()
	(dcl is property)
	(dcl is Global)
	
	if (.Indent == 255) or ('_' == dcl.name[] or dcl.name.Last)
		(dcl is hidden)
	if dcl.islib
		if (dcl isnt hidden) and (Options.MakeInterpreter or options.ModePack)
			PackMaker.AddLibGlob(dcl)
	  else
		if options.ModePack
			packmaker.PackGlobs <~ dcl

	return true


function CollectDeclsFuncBodyJustWhatWeNewlyMade (|Message| arg, |SCNode| scarg) 	// remove later... :)
	opt norefcounts	// basically... the caller needs fixing.
	for item in arg
		if item == @decl
			item.CollectFromBody(scarg) // keep on going even if one failed. good for autocomplete


function Message.CollectFromBody (|SCNode| scarg)
	opt norefcounts
	if .obj
		return
	|| dcl = .CollectDecl(scarg, scarg, declmode.FunctionBody)
		(dcl is body)
		(dcl isnt NumberConst)
		scparamarray.PostStructFix
		|| def = dcl.Default
			check (def != @thg  or  def.name ~!= dcl.name) (def, "Same name!")


function CollectDeclsFuncBodyUnsureHowToRemove (|Message| arg, |SCNode| scarg)
	CollectDeclsFuncBodyJustWhatWeNewlyMade(arg, scarg)



// definitely remove this!
function CollectDeclsFuncBody (|Message| arg, |SCNode| scarg)
	CollectDeclsFuncBodyJustWhatWeNewlyMade(arg, scarg)


function Message.CollectDecl (|SCNode| P, |SCNode| Recv, |int| Mode, |scclass| cls=nil, |scfunction| FuncPrmz=nil,  |scdecl|)
	|| Types = .first!
	|| Names = types.Next

	expect (FuncPrmz or Names)  (self, "No name found.")
	|| Default = DeclsDefault( names )
	|| Sdcl = ExtractDecl( Types, P, mode )
	if !sdcl  and  !default  and  (P isa SCArg)
		sdcl = P.ParentFunc!.ReturnType

	|| NameItm = names.CollectDclName
	|SCDecl--| DefaultDcl
	if FuncPrmz
		0
	  elseif (Default and mode != declmode.Properties)
		DefaultDcl = TypeOfExprNeeded( Default, P ) #require
		DefaultDcl = DefaultDcl.Downgrade
		if (sdcl)   // make sure it matches.
			default = sdcl.ExpectMatch( DefaultDcl, kTypeCastTrue, default )
		
	  elseif (!cls) and (sdcl) and (sdcl.CanUseDefault)
		Default = sdcl.CreateDefault(types, mode >= 4)
		if (Default)
			TypeOfExpr( default, P )
			names = DefaultStitch( Default, self )
	
	|| NoOriginalDcl = false
	if !Sdcl
		NoOriginalDcl = true
		if (cls) and (cls.Contained)
			sdcl = cls.Contained! // (|| x = Y), (|object| x = Y)
		  else
			expect (!FuncPrmz and defaultdcl) ( self, ("Missing type", "Missing type, or default value.")(!FuncPrmz) )
			sdcl = DefaultDcl
	
	if sdcl.NeedsContainedfix
		sdcl = sdcl.Containedfix
	
	|| dcl = Sdcl.CopyDeclsButter(mode * !!nameitm?)
	if !NameItm
		check (.islast) ( self, "Parameter is missing a name." )
		if funcprmz
			if FuncPrmz.CollectReturnAsReal // allocs dont fail (assumed so)
				dcl.nildeclared = nilstate.real
			FuncPrmz.ReturnType = dcl // we need the copy
		return nil

	if !Default
		names.expectlast
	
	if mode != declmode.Properties // the old .obj is needed
		nameitm.obj = dcl
	
	if (Mode & 8) and NoOriginalDcl // functionbody
		if sdcl isnt StayBorrowed
			(Dcl Isnt Borrowed)
		dcl.nildeclared = NilState.real >> dcl.TypeSuffers 
	
	if (nameitm in @Rel)
		nameitm.Parent!.obj = dcl
	
	.obj = dcl
	types.obj = dcl // might as well set it everywhere.
	dcl.Default = Default
	dcl.Name = nameitm.name
	dcl.Source = self
	(dcl Isnt Const) // on "|| bla = true", make "bla" editable.

	if default and defaultdcl
		dcl.AssignabilityCheck(nil, default, DefaultDcl)

	if Recv // nil for prototypes
		Recv.TryAdd( self, dcl, dcl.Name )
	
	return dcl



function Message.CollectFuncTableName (|string|)
	//	@msg.ID-->"msg"
	//	"abc"-->"abc"
	//	why? why not?
	if self == @name
		return .name.UpperCase
	if .name and self != @dot
		Return .Name

	Return .Firstname 
	

function scdecl.NeedsContainedfix (|bool|)
	opt NoRefCounts
	if !.AllocSource and !.contains
		return .ReallyContains


function scdecl.Containedfix (|scdecl|)
	opt norefcounts
	|| t = .type
	rz = (.copydecl, self)(T.typenormal == self)
	rz.contains = t.SelfDecl.Contains


function scdecl.DownGrade (|scdecl|)
	opt norefcounts
	if !.IsNormalObject
		return self
	|| y = .type.DowngradeTo
		return y.TypeNormal
	return self
	
	
function message.AddValue (|scfunction| f)
	opt norefcounts
	pragma inline
	if !.HasChildCount(2)
		using f.source!
			self <~ «thg "Value"»


datatype DeclMode (int)
	constants
		|DeclMode|
		FuncParam	= 4
		Properties	= 3
		Globals		= 1
		FunctionBody = 8
		Local		= FuncParam+FunctionBody
		Proto		= 16
		TypeCast	= 32
		ProtoParam	= FuncParam + Proto
		Always		= 64

	syntax is (|DeclMode|o, |bool|)
		return self == o

