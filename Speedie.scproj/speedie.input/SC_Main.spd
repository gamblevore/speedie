


main // speedie main { 
	compiler.Main


function Compiler.Main
	.SetupEnv
	if .EnterCompile
		using FlowControl.allow("Speedie")
			.CompileTime
	.PrintResults


function Compiler.EnterCompile (|bool|)
	return  !.TryVariousStartModes  and  FeedBack.ParseArgs  and  !interact.Enter


function Compiler.PrintResults
	.PrintStats
	if !stderr.ok
		printline "Installation: " + .projects
	.PrintCompileErrors
	if interact.Perry != nil
		printline "exiting speedie " + app.id.render


function compiler.ClearEnvs
	// osx freaks out sometimes otherwise
	for (v in app.env) (k)
		if k ~!= "HOME" and "LOGNAME" and "PATH" and "PWD" and "USER"
			app.childenv(k) = nil


function compiler.SetupEnv
	opt norefcounts

	file.relaxsudo(1)		// chowns created files/folders to not-root
	FlowControl.FlowMode = FlowControl.Off // can enable via "log"	
	error.AutoPrint = 1
	.Clearenvs
	check (app.pref_path) "Conf missing prefpath"
	app.PrefsInit
	|| talk = app..talk
	if talk.length and app.IsMainThread
		app.IgnoreBreakPoints

	errorcolors.DisableIfNoTerminal


function app.IgnoreBreakPoints
	cpp_wrapper JB_Pipe__IgnoreBreakPoints


api Speedie_Main (|&cstring| args, |int| Mode, |ErrorInt|)
	cpp_name Speedie_Main 
	return app.sp_run(args, mode)

