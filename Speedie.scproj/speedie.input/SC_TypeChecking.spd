


module exec
	function LoadStructure


function ExpandToBool (|Message| inside, |SCBase| name_space, |Message|)
	|| decl = TypeOfExpr( inside, name_space )$

	|| x = inside
	rz = TypeBool.TypeNormal.ExpectMatch( decl, kTypeCastTrue, inside )
	(x) // bug work around? somecaller is opt norefcounts badly

	While (rz == @bra) and (rz.first == @bra)
		rz = rz.ReplaceWithChild



function RelSetOrExpansion (|Message| exp)
	// (x = a) or (x = b)
	// --> x = a, if (!x) {x = b}
	|| L = exp.first
	|| R = exp.last						// should probably go within collectdecls at least?
	using (exp)
	exp.clear
	l.moveallin(exp)
	|| cond = r.first.copy
	|| tmp = «tmp "if"
		«bra
			«brel "!", cond »
		»
		«arg, R »
	»
	
	|| P = exp.parent
	((p,exp)(P == @decl)).next = tmp


function Or_And_Expansion (|SCDecl| LC, |SCDecl| RC, |Message| exp, |SCBase| name_space, |SCDecl|)
	|| LBool = LC.Minimatch( TypeBool.TypeNormal, kTypecastFalse )
	|| RBool = RC.Minimatch( TypeBool.TypeNormal, kTypecastFalse )
		
	if RBool and LBool
		Return LC // easy
	
	// x = (mybool and myint) // convert to bool
	|| ch0 = exp.first
	|| ch2 = ch0.next.next // ch0 could change
	if !LBool
		ExpandToBool( ch0, name_space )
	if !RBool
		ExpandToBool( ch2, name_space )
	
	Return TypeBool.TypeNormal


function Message.CastToObject (|Message|)
	|| d = .AsDecl #expect
	if (d.Type.IsObject)
		 Return self
	
	|| Match = TypeObject.TypeNormal.TryTypeCast( d, self, kTypeCastTrue )
	expect (Match >= kSimpleMatch) (self)
	Return .CastedParent


|AsmReg| xxx = nil
function MatchBase
	visible
	|| y = (xxx, nil)(1)


function scdecl.Match (|SCDecl| O, |int| TypeCast, |Message| exp = nil, |uint|)
// Make TypeCast = true able to deal with... pointers to structs!
	if (o == nil)
		require .default
		Return kUseDefaultParams

	if (o == self)
		Return kSimpleMatch
	require o.type and .type
		

	if (o.IsNil and (TypeCast & kTypeCastTrue))		// nil cast
		if .CantBeNilInCpp							// |mystruct| x = nil
			if !exp
				return kNeedsTypeCast
			|| NilStruct = .CreateStructNil(exp)
			exp.replacewith(nilstruct)
			return kCastedMatch
		Return kSimpleMatch // will this work?

	// Don't .Match on the contains? It would run into "array covariance" errors?
	if O.PointeryMatch(self)
		|| ooop = .PointeryMatchSub(o, typecast)
		if !ooop and (TypeCast & kTypeCastBothways) and o.IsNormalObject and .IsNormalObject
			ooop = o.pointerymatchsub(self, typecast)
		if (ooop)
			return ooop

	if (TypeCast & kTypeCastTrue) and (.type == typevoidptr) and (o.pointercount or o.type.funcproto)
		if (!exp)
			return kNeedsTypeCast (|) kVoidPtrMatch
		if (o.type.funcproto)
			return exp.CastToVoidPtr(nil) // actually do it.
		return kCastedMatch


	if TypeCast & kActualTypecasts
		Return .TryTypeCast( O, exp, TypeCast )



function scdecl.SafelyWrappable (|bool|)
	opt norefcounts
	|| n = .isnumeric
	if (n <= 1) or (self == typebool.typenormal)
		return true
	
	|| fns = TypeWrapper.modul["new"]|scfunction|
	require fns isa scfunction

	for f in fns
		|| p = f.args
		if (p.length == 1) and p[0].match(self, 0)
			return true
 


function scdecl.TryTypeCast (|SCDecl| O, |Message| exp, |int| TypeCast, |int|)
	opt norefcounts

	|| t = .type
	|| ot = o.type
	if (.PointerCount == O.PointerCount + 1)
		|| OAddr = O.GetAddress
		if .MiniMatch( OAddr, TypeCast ) and (!exp or exp.CanGetAddress(nil))
			return exp.GetAddressOf(OAddr)


	if (o.c_array) and (.pointercount == 1)
		|| oaddr = o.GetAddress
		oaddr.C_Array = 0
		if .MiniMatch( OAddr, TypeCast ) and (!exp or exp.CanGetAddress(nil))
			return exp.GetAddressOf(OAddr, true)
	

	/// hmmmm... need to test it... without the c-array? how?
	ifn typecast & knobooltypecast
		if (t == TypeBool) and (.IsNormal) and (o.pointercount)
			return exp.CastToBool(nil)
	
	
	// hah.... who cares. INEED ENERGY!
	// quick check! int vs uint
	|| CounterPart = t.Signed
	if (CounterPart) and (CounterPart.type == ot)
		if (CounterPart.match(o, typecast, exp).isnormalmatch)
			return ksimplematch


	|| NoBools = (TypeCast&kTypeCastBothWays) or (typecast & knobooltypecast) 
	if (TypeCast & kTypeCastMost)			// Type Casting
		// we do bool casting after, as its usually a sign of a bug.
		for (b.Upwards in Ot)
			for (C in b.Casts)
				try
					cant NoBools and (C.returnType == typebool.typenormal)
					need .Match( C.ReturnType, 0 ).IsNormalMatch
					return C.CreateTypeCast( O, exp )
		
		
		|| IsaBool = (t == TypeBool) and (.IsNormal)
		if (!NoBools) and isabool
			return exp.CastToBool(nil)

		
		// use better_numeric
		// try datatype conversion here...
		if (!isabool or !NoBools) and O.canwrap
			if (Typewrapper.typenormal.Match( self, 0 ).IsNormalMatch)
				// Already have all the type info! So check the contained type is correct!
				|| it = .contains
					require it.match(O, kTypeCastNumbers)
					return exp.WrapExpr(O)

			// self == object/datatype-wrapper
			if .Match( Typewrapper.typenormal, 0 ).isNormalMatch and O.SafelyWrappable 
				return exp.WrapExpr(o)  // only OK to turn to a bool if O is a bool.

	
	if TypeCast & kTypeCastNumbers
		if o.isnil and .isnumeric
			Return kNumericMatch
		
		|| OIsNum = O.IsNormalNumber
		|| SIsNum =  .IsNormalNumber
		if Oisnum and sisNum
			return kNumericMatch		// This causes deceptive errors...
		if TypeCast&kTypeCastBothWays
			if Oisnum and  .IsNormalBool
				return knumericMatch
			if sisnum and o.IsNormalBool
				return knumericMatch
				// i guess???

	// so much nicer!
	if ot.FuncProto.EqualOrMoreSpecific(t.FuncProto) and .PointeryMatch(O)
		return exp.CastToClass(t, nil)
