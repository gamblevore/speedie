

// some kinda function table... saved to a file

module PackMaker
	|[SCFunction]|			LibFuncs
	|[SCDecl]|				LibGlobs
	|[SCFunction]|			PackFuncs
	|[SCDecl]|				PackGlobs
	|int|					_PackGlobSize
	|int|					_LibGlobSize


	function PackGlobSize (|int|)
		return ._PackGlobSize init .GlobalsSize(.PackGlobs, true)
	
	function LibGlobSize (|int|)
		return ._LibGlobSize init .GlobalsSize(.libGlobs, false)
		
	helper AddFunc (|scfunction| f)
		opt norefcounts
		if f.IsLibrary
			if f.MyReacher or options.MakeInterpreter
				.LibFuncs <~ f
		  elseif f.MyReacher
			.PackFuncs <~ f

		
	function AddAll (|int|)
		opt norefcounts
		for f in Compiler.FuncList
			if f.CanLibLoad
				.addfunc(f)
	
	
	// we want to always create libglobs?
	// then... and sort them nicely, by size! not name.
	// sigh. i guess name is faster for lookup. but 
	// we can make our own internal tables anyhow.
	
	
	function DoLibGlobs (|jbin| lib) // SortLibGlobs
		opt norefcounts
		.LibGlobs.sort(GlobalsSorter)
		
		lib.enter(@arr)
		for (f in LibGlobs)
			lib.Add(@thg, f.ExportName)
		lib.exit

	
	function GlobalsSize (|[scdecl]| List, |bool| Alter, |int|)     // SortGlobals, GlobalsSort
		opt norefcounts
		rz = 1				// rz = 1, so if .au.ExportPosition == 0 then something is wrong.
		for (d in list)
			|| s = d.CarraySize
			|| s16 = s min 16
			rz = rz align s16
			if alter
				d.ExportPosition = rz
			rz += s
	

	function SortFuncsAndBuildGlobs
		opt norefcounts
		|| FnInit = compiler.xfunc("JB_Init_") // we need app and pack inits separately
		|| FnMain = compiler.xfunc("JB_Main")
		require fninit and fnmain
		
		fninit.PackID = 1 // put init and main first!
		fnmain.PackID = 2
		
		.SortASMFuncs(.PackFuncs, nil)
		TypeObject!.PackClassChildren(nil)
		
		.PackGlobs.sort(GlobalsSorter)

		|&&nil| Table
		|| frogs = .PackGlobSize
		if platform.isdebug
			Table = jb_vm.vm.InitTable(.libfuncs.length+31, frogs)
		.SortASMFuncs(.LibFuncs, Table)
		.LibGlobs.sort(GlobalsSorter)

		for (g in .LibGlobs) (i)		// lib globs are asked for, so we'll ask for them by name.
			g.ExportPosition = i + 1

		for c in Compiler.ClassList
			if c.IsRole
				|| t = c.ClassType!
				|| t2 = c.RealClass.ClassType!
				t.ExportPosition = t2.ExportPosition
				
	
	
	helper SortASMFuncs (|[scfunction]| list, |?&&nil| Table)
		opt norefcounts
		(table)
		list.sort(SCFuncSorter)

		|| ID = 0
		while (|| f = list[id])
			f.PackID = ++id			
			target debug
				if Table
					Table[id+31] = jb_vm.Load(f.exportname)

	
	function WriteLibFuncs (|jbin!| j)
		opt norefcounts
		todo "Write the LibFuncs via c++ structs, instead of jbin, like array of name/ptr pairs"
		
		j.Enter(@prm)
		for f in .libfuncs
			j.Add(@thg, f.exportname)
		j.Exit


	
	function FATCompile (|bool|)
		opt norefcounts
		.Packfuncs.sort(&CodeSorter.LeafFunctionsSorter)
		Assembler.jsm.length = 0
		
		for fn in .Packfuncs
			require Assembler.sh.GenerateASM(fn)
		Assembler.sh.Guard
		
		if !Compiler.InPerry
			.RunAFewTests
		
		|| main = Compiler.MainFunc
			(main is usedbyasm)
		return true
	
	
	function MakePack 
		opt norefcounts
		compiler.During = compiler.Packing
		Assembler.Sh.PackMakerInit			// fn_asm_table[@arg]
		PackMaker.AddAll
		.SortFuncsAndBuildGlobs
		if .FATCompile and options.ModePack // options.ModePack can be false, if compiler.InPerry = true
			.WritePackToDisk
		compiler.During = 0
	
	
	function WritePackToDisk
		|| F = Compiler.ProductPath.SetExt("zpd").file
		require f.OpenEmpty
		
		|| j = jbin(@tmp, "zpd")
		j.file = f
		j.enter
		j.Enter(@tmp, "app")
		j.AddInt(.PackGlobSize + 16)
		j.enter
		
		|| Stack_Trace = FastString()
		.ListPackFuncs(j, stack_trace)
		.DumpStrings(j)
		.PackClasses(j)
		.FuncLink(j)
		.GlobLink(j)
		.AddDebugStuff(j, stack_trace)
		j.ExitAll
	
	
	function AddDebugStuff (|jbin| j, |string| func_names)
		j.tmp("debug")
		j.Enter(@tmp, "func")
		|compressionstats| st
		|| f2 = func_names.compress(st)
		print "Stack-trace Compression: "
		st.print
		j.AddStr(f2)
		j.exit(3)


	
	function ListPackFuncs (|jbin| j, |faststring| func_names)
		opt norefcounts
		j.enter(@tmp, "code")
		|| Missed = 0
		for f in .PackFuncs
			if f is UsedByASM
				j.AddFunction(f, Missed)
				func_names <~ f.exportname
				func_names <~ '\n'
				Missed = 0
			  else
				Missed++
		"Fully inlined $Missed out of ${.PackFuncs.length}"
		j.Exit
		
		
	function DumpStrings (|jbin| j)
		|| strs = FastString()
		.DumpStringsSub(strs)
		strs <~ 0|byte|			// they are all cstrings... but we'll actually just overwrite it to make them
		j.enter(@tmp, "strs")	// cstrings, during load.
		j.Add(@sstr, strs)
		j.exit
	
	
	helper DumpStringsSub (|jbin| strs)
		opt norefcounts
		for s in StringCorrector.list
			|| n = s.length * s.Frequency
			strs.AppendStrLength(n)
			if n
				strs <~ s


	function PackClasses (|jbin| j)
		j.enter(@tmp, "clss")
		typeobject!.PackClassChildren(j)
		j.exit
	
	
	function FuncLink (|jbin| j)
		opt norefcounts
		j.tmp("flnk")
		for linked in .libfuncs
			j.add(@thg, linked.ExportName)
		j.exit(2)
	
	
	function GlobLink (|jbin| j)
		opt norefcounts
		j.tmp("glnk")
		for linked in .LibGlobs
			j.add(@thg, linked.ExportName)
		j.exit(2)


	function SCClass.HasPackChildren (|bool|)
		opt norefcounts
		for c in .children
			if !c.isrole and !c.IsLibrary
				return true
			if c.HasPackChildren
				return true
	
	
	function SCClass.PackClassChildren (|jbin?| j)
		opt norefcounts
		if j
			require .HasPackChildren
			j.enter
		for c in .children
			if c.isrole
				c.PackClassChildren(j)
			  else
				c.packexport(j)
		if j
			j.exit
	
	
	function SCClass.PackExport (|jbin?| j)
		opt norefcounts
		if j
			require .MyReacher or .IsLibrary or .HasPackChildren
			j.enter(@tmp, .name)
			if !.IsLibrary
				.DescribeInPack(j)
			.PackClassChildren(j)
			j.exit
		  else
			|| T = .ClassType!
			if .IsLibrary
				packmaker.libglobs <~ T
				(T is Library)
			  elseif .MyReacher
				packmaker.packglobs <~ T
			.PackClassChildren(j)
		
		
	function SCClass.DescribeInPack (|jbin| j)
		opt norefcounts
		|| sz = (0, .size)(.iswrapper)
		j.addint(sz)
		j.enter(@list)
	
		|| name = "0"
		|| df = .DestructorFunc
			name = df.exportname
		j.add(@thg, name)
	
		|| b = .behaviour
		while (b)
			for (M in b.interfaces)
				|| fn = .BestBehaviourFor(m.name.InterfaceToBehaviour)
					|| BaseClass = .InterfaceForBehaviour(fn)
						j.add(@thg, fn.exportname)
			b = b.upwards
		
		j.exit

		
	function BuildInterpreter (|string|)
		|| pack = jbin()
		.WriteLibFuncs(pack)
/		.DoLibGlobs(pack)
		return pack


function SCFunction.WrappedName (|string|)
	if !.iscppinbuilt
		return .ExportName
	return .ExportName + "Wrap"


function SCFunction.CanLibLoad (|bool|)
	if !.ismacro and (self isnt disabled) and (.iscppinbuilt != 2)
		return true


/* Instead of this... SortAndPackFuncs could create some cpp... like
struct LibPack
	|int|			FuncCount
	|int|			GlobCount
	|LibEntry[1]|	Item

struct LibEntry
	|&nil|		Where
	|cstring|	Name

then we just return a LibPack* from C++.

Then exec can just... use the table directly, as it is already sorted. :)
*/


//|| LIBGC = 0 // not used much... but definitly is needed
//function scdecl.CheckLibGlob 
//	if (self isnt marked) and self.IsLib and (self is Global) and (self isnt const)
//		|| c = SCFunction.CurrFunc
//			if !c.IsSTDLib
//				is Marked
//				LIBGC++
//				"\n/*\n$self($LIBGC) --> ${c.exportname}\n*/\n"


/*
	Globals used by speedie: (legit, not removeable)
	|Array of Message!| TmpPrms_(1) --> VM_Builder__FinishAcc
	|Random| Shared(2)				--> SCGame3D__Love
	|ErrorReceiver!| StdErr(3)		--> nil__LaunchMothership
	|MessagePosition| Using(4)		--> AC__ParserRestore
	|SpdProcess| Parent(5)			--> AC__EnterAutoComplete
	|bool| _DotInsertAllow(6)		--> AC__GetFunc
	|Dict of SyntaxObj| _SyxDict(7) --> Cpp_WriteAPIHeader
	|byte| Active(8)				--> Func__CurrFuncSet
	|Charset!| CSLine(9)			--> Ext__Clean
	|bool| Enabled(10)				--> Options__ColorSet
	|byte| AutoPrint(11)			--> FB__AppOptions_breakonerr
	|bool| DebugExecute(12)			--> FB__AppOptions_noisy
	|Charset!| CSWordStart(13)		--> Str_IsOKForImport
*/


