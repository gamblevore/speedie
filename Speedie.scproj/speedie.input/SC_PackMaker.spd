

// some kinda function table... saved to a file

module PackMaker
	|[scfunction]|			LibFuncs
	|[SCDecl]|				LibGlobs
	|[scfunction]|			PackFuncs
	|[SCDecl]|				PackGlobs
	|int| 					ExportPos

	function AddAll
		opt norefcounts
		|| MakeExec = options.MakeInterpreter
		for f in Compiler.FuncList
			if !f.CanLibLoad
				0
			  elseif f.IsStdLib
				if MakeExec or f.needsexport
					.LibFuncs <~ f
			  elseif f.NeedsExport or (f in "ASMExamples")
				.PackFuncs <~ f
		.SortAll
	
		
	function AddLibGlob (|scdecl| d)
		.LibGlobs <~ d
		d.ExportPosition = ++.ExportPos
	
	
	function DoLibGlobs (|jbin| lib)
		opt norefcounts
		LibGlobs.sort(NodeSorter)
		
		lib.enter(@arr)
		for (f in LibGlobs)
			lib.Add(@thg, f.ExportName)
		lib.exit


	function SortAll 
		opt norefcounts
		|| FnInit = compiler.xfunc("JB_Init_") // we need app and pack inits separately
		|| FnMain = compiler.xfunc("JB_Main")
		require fninit and fnmain
		
		fninit.tableid = 1 // put init and main first!
		fnmain.tableid = 2

		.SortSub(.libfuncs, true)
		.SortSub(.Packfuncs, false)
	
	
	helper SortSub (|[scfunction]| list, |bool| test)
		target debug
			|| Table = (jb_vm.vm.InitTable(list.length+31), nil)(test)
		(test)
		list.sort(SCFuncSorter)
		|| id = 0
		while
			|scfunction--| f = list[id] #loop
			f.TableID = ++id
			target debug
				if Table
					Table[id+31] = jb_vm.Load(f.exportname)

	
	function WriteLibFuncs (|jbin!| j)
		opt norefcounts
		todo "Write the LibFuncs via c++ structs, instead of jbin, like array of name/ptr pairs"
		
		j.Enter(@prm)
		for f in .libfuncs
			j.Add(@thg, f.exportname)
		j.Exit

		
	function ActualASMCompile (|bool|)
		opt norefcounts
		for fn in .Packfuncs
			if fn.tableid
				if fn.parent.name ~= "ASMExamples"
					require SpdAssembler.GenerateASM(fn) // memory safe
		
		.RunAFewTests
		return true
	

	function TestFn (|string| s, |scfunction|)
		opt norefcounts
		|| mod = compiler.program.FindModule("ASMExamples")
			return mod.Findfunction(s)
	
	
	function RunAFewTests 
		opt norefcounts
		
		|scfunction| fn
		fn = .testfn("SemiConst")
		if fn
			for i in 2
				debugat
				self[0] = i*16K
				|| found = fn.test|&int|[]
		
		fn = .testfn("AndOrConsts")
		if fn
			|| Andor = fn.Test|&int64|[]
		
		fn = .testfn("PackTestConsts")
		if fn
			|| D = fn.Test|&f64|[]
		
		fn = .testfn("ForeignFuncs")
		if fn
			self[0] = "hello", self[1] = "abc"
			|| str = fn.Test|&string|[]
			printline str
			
		fn = .testfn("Math")
		if fn
			for i in 5
				self[0] = 12+i, self[1] = 6+i
				|| num = fn.Test|&int64|[]
				
		fn = .testfn("Mul")
		if fn
			self[0] = 8725, self[2] = 4, self[1] = 275, self[3] = 2	
			|| num = fn.Test|&int64|[]
			if num != 18000
			
		fn = .testfn("AndOr")
		if fn
			self[0] = 0,   self[1] = 6,   self[2] = 1,   self[3] = 0
			|| Andor = fn.Test|&int64|[]
			if andor != 3
			
		fn = .testfn("AndOr2")
		if fn
			for i in 4
				self[0] = i&1,   self[1] = (i&2)>>1
				|| AndOr2 = fn.Test|&int64|[]
			
	
	
	function MakePack 
		if (–sizeof FatASM) != 64
		require ASMState.Sh.PackMakerInit			// fn_asm_table[@arg]
		require .ActualASMCompile

		|| j = jbin(@tmp, "xpd")
		j.enter
		j.enter(@tmp, "app")
		.OrderGlobals(j)
		j.enter
		.ListPackFuncs(j)
		.DumpStrings(j)
		.PackClass(j)
		.FuncLink(j)
		.GlobLink(j)

		Compiler.ProductFile.SmartData = j


	function OrderGlobals (|jbin| j)
		.PackGlobs.sort(DeclSizeSorter)
		|| g = .OrderGlobalsSub
		j.addint(G + 16)


	function OrderGlobalsSub (|int|)
		opt norefcounts
		|| G = 1				// So we can detect bugs easier... if something lacks an export position.
		for (d in .PackGlobs)
			|| s = d.DeclSize
			G = G align s
			d.ExportPosition = G
			G += s
		return g

	
	function scfunction.Test (|?&ivec4|)
		opt norefcounts
		|| mu = .asm
			|| mu2 = mu.µTest
				|| P = mu2.ptr
				printline self
				printline mu
				return jb_vm.Run(p, mu2.length)
	
	
	syntax access (|int| v, assigns:|int64|)
		|| r = jb_vm.vm.Registers(false)+v
		r|&int64|[] = Value
	
	
	syntax access (|int| v, assigns:|object|)
		|| r = jb_vm.vm.Registers(false)+v
		r|&object--|[] = value
	

	function ListPackFuncs (|jbin| j)
		opt norefcounts
		j.tmp("fncs")
		for f in compiler.funclist
			if f.tableid
					|| asm = f.ASM 
						j.Add(@tmp, f.ExportName, true)
						j.add(asm)
						j.exit
						"OK: ${f.name}"
					  else
						error (f, "no asm generated for: " + f.name)
					
		j.Exit(2)
		
	
	function DumpStrings (|jbin| j)
		j.tmp("strs")
		for s in StringCorrector.list
			j.add(@str, s)
		j.exit(2)


	function PackClass (|jbin| j)
		j.enter(@tmp, "clss")
		typeobject!.PackClassChildren(j)
		j.exit
	
	function FuncLink (|jbin| j)
		opt norefcounts
		j.tmp("flnk")
		for linked in .libfuncs
			j.add(@thg, linked.ExportName)
		j.exit(2)
	
	
	function GlobLink (|jbin| j)
		opt norefcounts
		j.tmp("blnk")
		for linked in .LibGlobs
			j.add(@thg, linked.ExportName)
		j.exit(2)


	function SCClass.HasPackChildren (|bool|)
		opt norefcounts
		for c in .children
			if !c.isrole and !c.isstdlib
				return true
			if c.HasPackChildren
				return true

	function SCClass.PackClassChildren (|jbin| j)
		opt norefcounts
		require .HasPackChildren
		j.enter
		for c in .children
			if !c.isrole
				c.packexport(j)
		j.exit
	
	
	function SCClass.PackExport (|jbin| j)
		opt norefcounts
		require .HasPackChildren or !.isstdlib

		j.enter(@tmp, .name)
		if !.IsSTDLib
			.DescribeInPack(j)
		.PackClassChildren(j)
		j.exit
		
		
	function SCClass.DescribeInPack (|jbin| j)
		opt norefcounts
		|| sz = (0, .size)(.iswrapper)
		j.addint(sz)
		
		|| fn_list = .behaviour!.WrapperFuncs
		j.enter(@list)
	
		|| name = "0"
		|| df = .DestructorFunc
			name = df.exportname
		j.add(@thg, name)
	
		|| b = .behaviour
		while (b)
			for (M in b.interfaces)
				|| fn = .BestBehaviourFor(m.name.InterfaceToBehaviour)
					|| BaseClass = .InterfaceForBehaviour(fn)
						j.add(@thg, fn.exportname)
			b = b.upwards
		
		j.exit

		
	function BuildInterpreter (|string|)
		|| pack = jbin()
		.WriteLibFuncs(pack)
		.DoLibGlobs(pack)
		return pack


function scfunction.WrappedName (|string|)
	if .iscppinbuilt
		return .exportname + "Wrap"
	  else
		return .exportname


function scfunction.CanLibLoad (|bool|)
	if !.ismacro and (self isnt disabled) and (.iscppinbuilt != 2)
		return true


/* Instead of this... SortAndPackFuncs could create some cpp... like
struct LibPack
	|int|			FuncCount
	|int|			GlobCount
	|LibEntry[1]|	Item

struct LibEntry
	|&nil|		Where
	|cstring|	Name

then we just return a LibPack* from C++.

Then exec can just... use the table directly, as it is already sorted. :)
*/


/*
function PrintFunc (|string| s)
	visible
	|| fn = compiler.xfunc(s)
		printline fn
*/


function scfunction.operatorin (|string| s, |bool|)
	opt norefcounts
	return .parent.name ~= s


|| ASM_ASK = " RUN!" + "!"				// remove this
