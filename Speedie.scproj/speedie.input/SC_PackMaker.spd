

// some kinda function table... saved to a file

module PackMaker
	|[scfunction]|			LibFuncs
	|[SCDecl]|				LibGlobs
	|[scfunction]|			PackFuncs
	|[SCDecl]|				PackGlobs
	|int| 					ExportPos

	helper AddFunc (|scfunction| f)
		opt norefcounts
		if f.IsLibrary
			if f.needsexport or options.MakeInterpreter
				.LibFuncs <~ f
		  elseif f.NeedsExport or (f in "ASMExamples")
			.PackFuncs <~ f

		
	function AddAll (|int|)
		opt norefcounts
		for f in Compiler.FuncList
			if f.CanLibLoad
				.addfunc(f)
	
	
	// we want to always create libglobs?
	// then... and sort them nicely, by size! not name.
	// sigh. i guess name is faster for lookup. but 
	// we can make our own internal tables anyhow.
	
	
	function DoLibGlobs (|jbin| lib) // SortLibGlobs
		opt norefcounts
		.LibGlobs.sort(GlobalsSorter)
		
/		lib.enter(@arr)
		for (f in LibGlobs)
			lib.Add(@thg, f.ExportName)
		lib.exit


	function OrderGlobals (|[scdecl]| List, |int|) // sortglobals, globalssort
		opt norefcounts
		list.sort(GlobalsSorter)
		rz = 1				// rz = 1, so if .ExportPosition == 0 then something is wrong.
		for (d in list)
			|| s = d.CarraySize
			|| s16 = s min 16
			rz = rz align s16
			d.ExportPosition = rz
			rz += s
	

	function SortFuncsAndBuildGlobs (|int|)
		opt norefcounts
		|| FnInit = compiler.xfunc("JB_Init_") // we need app and pack inits separately
		|| FnMain = compiler.xfunc("JB_Main")
		require fninit and fnmain
		
		fninit.tableid = 1 // put init and main first!
		fnmain.tableid = 2

		.SortASMFuncs(.PackFuncs, nil)
		TypeObject!.PackClassChildren(nil)
		
		rz = .OrderGlobals(.PackGlobs)
		.SortLibStuff(rz)
	
	
	function SortLibStuff (|int| pg)
		opt norefcounts
		|&&nil| Table
		if platform.isdebug and pg
			Table = jb_vm.vm.InitTable(.libfuncs.length+31, pg)
		.SortASMFuncs(.libfuncs, Table)
		.LibGlobs.sort(GlobalsSorter)

		for (g in .libglobs) (i)		// lib globs are asked for, so we'll ask for them by name.
			g.exportposition = i + 1
	
	
	helper SortASMFuncs (|[scfunction]| list, |?&&nil| Table)
		opt norefcounts
		list.sort(SCFuncSorter)

		|| ID = 0
		while (|| f = list[id])
			f.TableID = ++id
			|| proto = f.hasproto
				proto.exportposition = id
			target debug
				if Table
					Table[id+31] = jb_vm.Load(f.exportname)

	
	function WriteLibFuncs (|jbin!| j)
		opt norefcounts
		todo "Write the LibFuncs via c++ structs, instead of jbin, like array of name/ptr pairs"
		
		j.Enter(@prm)
		for f in .libfuncs
			j.Add(@thg, f.exportname)
		j.Exit

	
	function scfunction.AMiniTest (|bool|)
		if .cls ~= "asm_test_obj"
			return true
		return (self in "ASMExamples")
	
	
	function CompileSomeFunctions (|bool| MiniTest, |bool|)
		opt norefcounts
		for (fn in .Packfuncs) (i)
			if fn.AMiniTest == MiniTest
				require SpdAssembler.GenerateASM(fn, i)
		asmstate.sh.Guard
		
		if minitest
			.RunAFewTests
		return true

	
	function ActualASMCompile (|bool|)
		opt norefcounts
		.Packfuncs.sort(&CodeSorter.LeafFunctionsSorter)
		|| j = asmstate.sh.jsm
			j.length = 0
		
		if !compiler.InPerry
			require .CompileSomeFunctions(true)
		return .CompileSomeFunctions(false)
	

	
	target debug {
	function TestFn (|string| s, |scfunction--|)
		opt norefcounts
		|| mod = compiler.program.FindModule("ASMExamples")
			return mod.Findfunction(s)
	}	
		
		
	function RunAFewTests 
		target debug {
		|scfunction--| fn
		fn = .testfn("SemiConst")
		if fn
			for i in 2
				self[0] = i*16K
				|| found = fn.TestObesity|&int|[]
		
		fn = .testfn("AndOrConsts")
		if fn
			|| Andor = fn.TestObesity|&int64|[]
		
		fn = .testfn("Consts")
		if fn
			|| D = fn.TestObesity|&f64|[]
		
		fn = .testfn("ForeignFuncs")
		if fn
			self[0] = "hello", self[1] = "abc"
			|| str = fn.TestObesity|&string|[]
			printline str
			
		fn = .testfn("Math")
		if fn
			for i in 5
				self[0] = 12+i, self[1] = 6+i
				|| num = fn.TestObesity|&int64|[]
				
		fn = .testfn("Mul")
		if fn
			self[0] = 8725, self[2] = 4, self[1] = 275, self[3] = 2	
			|| num = fn.TestObesity|&int64|[]
			if num != 18000
			
		fn = .testfn("AndOr")
		if fn
			self[0] = 0,   self[1] = 6,   self[2] = 1,   self[3] = 0
			|| Andor = fn.TestObesity|&int64|[]
			if andor != 3
			
		fn = .testfn("AndOr2")
		if fn
			for i in 4
				self[0] = i&1,   self[1] = (i&2)>>1
				|| AndOr2 = fn.TestObesity|&int64|[]
			
		fn = .testfn("TestAtomic")
		if fn
			|| atomic = fn.TestObesity|&int|[]
			printline atomic
		}
	
	function MakePack 
		if (–sizeof FatASM) != 64
		ASMState.Sh.PackMakerInit			// fn_asm_table[@arg]
		PackMaker.AddAll
		|| pg = .SortFuncsAndBuildGlobs
		target debug {
		if .ActualASMCompile and Options.pack
			.WritePackToDisk(pg)
		}
	
	
	function WritePackToDisk (|int| pg)
		|| j = jbin(@tmp, "xpd")
		j.enter
		j.enter(@tmp, "app")
		j.addint(pg + 16)
		j.enter
		.ListPackFuncs(j)
		.DumpStrings(j)
		.PackClasses(j)
		.FuncLink(j)
		.GlobLink(j)

		Compiler.ProductFile.SmartData = j

	
	function SCFunction.TestObesity (|?&ivec4|)
		opt norefcounts
		|| mu = .µLength
			|| mu2 = .µTest
			.µprint(0)
			return jb_vm.Run(mu2.ptr, mu2.length)
	
	
//	function µfunc.DebugASM
			
	
	syntax access (|int| v, assigns:|int64|)
		|| r = jb_vm.vm.Registers(false)+v
		r|&int64|[] = Value
	
	
	syntax access (|int| v, assigns:|object|)
		|| r = jb_vm.vm.Registers(false)+v
		r|&object--|[] = value
	

	function ListPackFuncs (|jbin| j)
		opt norefcounts
		j.tmp("fncs")
		for f in compiler.funclist
			if f.tableid
				|| asm = f.µLength
					j.Add(@tmp, f.ExportName, true)
					j.add(f)
					j.exit
					"OK: ${f.name}"
				  else
					error (f, "no asm generated for: " + f.name)
					
		j.Exit(2)
		
	
	function DumpStrings (|jbin| j)
		j.tmp("strs")
		for s in StringCorrector.list
			j.add(@str, s)
		j.exit(2)


	function PackClasses (|jbin| j)
		j.enter(@tmp, "clss")
		typeobject!.PackClassChildren(j)
		j.exit
	
	function FuncLink (|jbin| j)
		opt norefcounts
		j.tmp("flnk")
		for linked in .libfuncs
			j.add(@thg, linked.ExportName)
		j.exit(2)
	
	
	function GlobLink (|jbin| j)
		opt norefcounts
		j.tmp("blnk")
/		for linked in .LibGlobs
			j.add(@thg, linked.ExportName)
		j.exit(2)


	function SCClass.HasPackChildren (|bool|)
		opt norefcounts
		for c in .children
			if !c.isrole and !c.IsLibrary
				return true
			if c.HasPackChildren
				return true
	
	
	function SCClass.PackClassChildren (|jbin?| j)
		opt norefcounts
		if j
			require .HasPackChildren
			j.enter
		for c in .children
			if !c.isrole
				c.packexport(j)
		if j
			j.exit
	
	
	function SCClass.PackExport (|jbin?| j)
		opt norefcounts
		|| Output = .IsReached

		if j
			require output or .HasPackChildren
			j.enter(@tmp, .name)
			if !.IsLibrary
				.DescribeInPack(j)
			.PackClassChildren(j)
			j.exit
		  else
			if !output
				0
			  elseif .islibrary
				packmaker.libglobs <~ .classtype
			  else
				packmaker.packglobs <~ .classtype
			.PackClassChildren(j)
		
		
	function SCClass.DescribeInPack (|jbin| j)
		opt norefcounts
//		packmaker.packglobs <~ .ClassType // wait, we do this twice?
		|| sz = (0, .size)(.iswrapper)
		j.addint(sz)
		
		|| fn_list = .behaviour!.WrapperFuncs
		j.enter(@list)
	
		|| name = "0"
		|| df = .DestructorFunc
			name = df.exportname
		j.add(@thg, name)
	
		|| b = .behaviour
		while (b)
			for (M in b.interfaces)
				|| fn = .BestBehaviourFor(m.name.InterfaceToBehaviour)
					|| BaseClass = .InterfaceForBehaviour(fn)
						j.add(@thg, fn.exportname)
			b = b.upwards
		
		j.exit

		
	function BuildInterpreter (|string|)
		|| pack = jbin()
		.WriteLibFuncs(pack)
/		.DoLibGlobs(pack)
		return pack


function SCFunction.WrappedName (|string|)
	if !.iscppinbuilt
		return .ExportName
	return .ExportName + "Wrap"


function SCFunction.CanLibLoad (|bool|)
	if !.ismacro and (self isnt disabled) and (.iscppinbuilt != 2)
		return true


/* Instead of this... SortAndPackFuncs could create some cpp... like
struct LibPack
	|int|			FuncCount
	|int|			GlobCount
	|LibEntry[1]|	Item

struct LibEntry
	|&nil|		Where
	|cstring|	Name

then we just return a LibPack* from C++.

Then exec can just... use the table directly, as it is already sorted. :)
*/


function SCFunction.operatorin (|string| s, |bool|)
	opt norefcounts
	return .parent.name ~= s


//|| LIBGC = 0 // not used much... but definitly is needed
function scdecl.CheckLibGlob 
//	if (self isnt marked) and self.IsLib and (self is Global) and (self isnt const)
//		|| c = SCFunction.CurrFunc
//			if !c.IsSTDLib
//				is Marked
//				LIBGC++
//				"\n/*\n$self($LIBGC) --> ${c.exportname}\n*/\n"


/*
	Uses by speedie: (They all seem legit and not removeable.)
	|Array of Message!| TmpPrms_(1) --> VM_Builder__FinishAcc
	|Random| Shared(2)				--> SCGame3D__Love
	|ErrorReceiver!| StdErr(3)		--> nil__LaunchMothership
	|MessagePosition| Using(4)		--> AC__ParserRestore
	|SpdProcess| Parent(5)			--> AC__EnterAutoComplete
	|bool| _DotInsertAllow(6)		--> AC__GetFunc
	|Dict of SyntaxObj| _SyxDict(7) --> Cpp_WriteAPIHeader
	|byte| Active(8)				--> Func__CurrFuncSet
	|Charset!| CSLine(9)			--> Ext__Clean
	|bool| Enabled(10)				--> Options__ColorSet
	|byte| AutoPrint(11)			--> FB__AppOptions_breakonerr
	|bool| DebugExecute(12)			--> FB__AppOptions_noisy
	|Charset!| CSWordStart(13)		--> Str_IsOKForImport
*/

