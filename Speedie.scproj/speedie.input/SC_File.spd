
/*
	Jeebox internals. By Theodore H. Smith...
*/


class SCFile (file)
	linkage:cpp_part File
	|string|		ExportName
	|SCImport|		Proj
	|string|		FData
	|Message?|		LiveAST
	|Message?|		OrigAST
	|uint16|		FileNum
	|bool|			IsInternal


	constructor (|File| f, |scimport| p)
		flow off // dates shouldn't matter ///
		flowcontrol.disabled++
		super.constructor((f.path, "")(f != nil))
		.Proj = p
		.filenum = scimport.allfiles.length
		.IsInternal = f == nil
		.LiveAST = .start_ast
		Compiler.stTotalFileCount += .isinternal
		(SCImport.Recent max= f.modified) 
		flowcontrol.disabled--
		
	
	
	function Start_AST (|message|)
		if .IsInternal
			(Message).createLayer(self).use
			rz = message(@arg, "")
			(message).restore
	
	
	function Stop (|scimport| Old)
		scimport.curr = nil // whatever.
		scimport.CurrIsManuallyImported = 0


	function Use (|scimport|)
		opt norefcounts
		rz = scimport.curr
		scimport.curr = .proj
		scimport.CurrIsManuallyImported = .Proj.Depth
		|| l = .LiveAst
			l.memoryLayer.Use
	
	
	function CollectGlobals (|SCNode| p)
		.Proj.use // should be inside use?
		CollectDeclsGlobals( .LiveAST, p )
	
	
	function scmodule.InitDecls // same as scfile.decls just different
		|| a = .initvarsarg.First
		if a.hasany
			.Project.use
			CollectDeclsGlobals( a, self )
	
	
	function GetMsg (|int| pos, |message|)
		opt norefcounts
		for f.flat in .orig
			if f.name and f.range contains pos
				return f
	
	
	function Orig (|message|)
		if !.OrigAST// or .OrigDate < .Modified
			.OrigAST = .ASTSub(true)
		return .OrigAST
	
	
	function AST (|Message|)
		opt norefcounts
		return .LiveAST init .ASTSub(false)
	
	
	function DetectInsecureWords
		opt norefcounts
		require options.perryoutput
		|| words = compiler.InsecureWords$
		|| where = (0,0)
		|| found = words.Find(.fdata, where)
			|| place = @thg + ""
			place.range = where
			errorreceiver.newerror(place, "Insecure word found", .path)
		
		
	function ASTSub (|bool| Orig, |Message|)
		FlowControl.input(self, "AST")
		
		flowcontrol.disabled++ // i want it a bit less sensitive to random file-cleanups
		|| str = .Readall(true).decompress // like: x() --> x() // comment
		flowcontrol.disabled-- // also... parse/parseclean will find REAL differences.
		
		if str
			|| Layer = (Message).CreateUseLayer(self, str)
			layer.num3 = .filenum
			.fData = str
			StdErr.source = .path
			parser._DotInsertallow = true	// more consistant with IDE
			
			|| oldimp = scimport.CurrIsManuallyImported
			scimport.CurrIsManuallyImported = .proj.depth
			parser.Using.Tag = 0  // I'd rather remove this dumb thing. Each scfunction has a file already
										// so only macros would need this. Its just used for to make vm-debug positions
			if !orig
				rz = .fData.ParseClean
			  else
				rz = .fdata.parse
			scimport.CurrIsManuallyImported = oldimp
			.DetectInsecureWords
			
			parser.using.tag = 0
			parser._DotInsertallow = false
			StdErr.source = ""
		(Message).restore



//function app.CodeSign (|file|)
//	|| sign = app.prefs[codesign_native] // code
//		|| me = app.apppath.file
//		me.codesign(sign.value)
//		return me
//
//	errorreceiver.newproblem( nil, "No code-signature found. (`speedie --codesign=\"details\" to save signature). Unable to sign self." )


function file.CodeSign (|string| sign, |ExitCode|)
	target osx
		if !platform.osx
			return 45 // ENOSUPPORT
		using ErrorSeverity.Warning
		|[string]| args = []
		args <~ "--deep"
		args <~ "--force"
		if options.PrintCompileString
			args <~ "--verbose"
		args <~ "-s"
		args <~ sign.cstr
		args <~ self.cstr

		rz = "/usr/bin/codesign".DebugExecute(args) // creates unnecesssary errors

		args = []
		args <~ "--verify"
		if options.PrintCompileString
			args <~ "--verbose"
		args <~ self
		if rz.Successful
			rz = "/usr/bin/codesign".DebugExecute(args)
		if rz.Successful
			args[0] = "-a"
			rz = "/usr/sbin/spctl".DebugExecute(args)


function string.DebugExecute (|[string]?| Args=nil, |faststring|Out=nil, |faststring| Errs=nil, |ExitCode|)
	if file.DebugExecute // shouldnt be default!
		print self
		print " "
		printline args.Render
	return .Execute(args, out, errs)
	

module image
	function LoadPNG (|&byte| data, |int| len, |&int| x, |&int| y, |&int| comp, |?&byte|)
		cpp_wrapper JB_Img__LoadPNG

	function WriteQOI (|&byte| data, |int| w, |int| h, |&int| len, |?&byte|)
		cpp_wrapper JB_Img__WriteQOI

	function ConvertPNGToVOI (|string| p, |string|)
		rz = string.error
		|| x	= 0
		|| y	= 0
		|| comp	= 0
		|| img = .loadpng( p.addr, p.length, &x, &y, &comp )
			|| n = 0
			|| qoi = .writeqoi(img, x, y, n)
				rz = string.Own(qoi, n).compress(mzlab.Fast)
			memory.free(img)

