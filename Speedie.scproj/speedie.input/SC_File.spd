
/*
	Speedie Internals. By Theodore H. Smith...
*/


class SCFile (file)
	linkage:cpp_part File
	|string|		ExportName
	|SCImport|		Proj
	|string|		FData
	|Message?|		LiveAST
	|Message?|		OrigAST
	|uint16|		FileNum
	|bool|			IsInternal
	|[scclass]?|	Types


	constructor (|File| f, |scimport| p)
		flow off // dates shouldn't matter ///
		FlowControl.DisabledIncr
		|string--| x = (f.path, string.error)(f != nil) // just feel like doing this.
		super.constructor(x)
		.Proj = p
		.Types = nil
		.filenum = scimport.AllFiles.length
		.IsInternal = f == nil
		.LiveAST = .start_ast
		Compiler.stTotalFileCount += .isinternal
		(SCImport.Recent max= f.modified) 
		FlowControl.DisabledIncr(-1)
		
	
	
	function Start_AST (|message|)
		if .IsInternal
			(Message).createLayer(self).use
			rz = message(@arg, "")
			(message).restore
	
	
	function Stop
		if curr == self
			curr = nil
		scimport.curr = nil // whatever.
		scimport.CurrIsManuallyImported = 0


	function Use
		opt norefcounts
		curr = self
		scimport.curr = .proj
		scimport.CurrIsManuallyImported = .Proj.Depth
		|| l = .LiveAst
			l.memoryLayer.Use
	
	syntax Append (|scclass| C)
		opt norefcounts
		if self
			(.Types init []) <~ c
	
	function CollectGlobals (|SCNode| p)
		.Proj.use // should be inside use?
		CollectDeclsGlobals( .LiveAST, p )
	
	
	function SCModule.InitDecls					// same as scfile.decls just different
		|| a = .initvarsarg.First
/		if a.hasany
			.Project.use
			CollectDeclsGlobals( a, self )
	
	
	function GetMsg (|int| pos, |message|)
		opt norefcounts
		for f.flat in .orig
			if f.name and f.range contains pos
				return f
	
	
	function Orig (|message|)
		if !.OrigAST							// or .OrigDate < .Modified
			.OrigAST = .ASTSub(true)
		return .OrigAST
	
	
	function AST (|Message|)
		opt norefcounts
		return .LiveAST init .ASTSub(false)
	
	
	function DetectInsecureWords
		opt norefcounts
		require options.perryoutput
		|| words = compiler.InsecureWords$
		|| where = (0,0)
		|| found = words.Find(.fdata, where)
			|| place = @thg + ""
			place.range = where
			errorreceiver.newerror(place, "Insecure word found", .path)
		
		
	function ASTSub (|bool| Orig, |Message|)
		FlowControl.input(self, "AST")
		
		FlowControl.DisabledIncr // i want it a bit less sensitive to random file-cleanups
		|| str = .Readall(true).decompress // like: x() --> x() // comment
		FlowControl.DisabledIncr(-1) // also... parse/parseclean will find REAL differences.
		
		if str
			|| Layer = (Message).CreateLayerAndUse(self, str)
			layer.num3 = .filenum
			.fData = str
			StdErr.source = .path
			parser._DotInsertallow = true	// more consistant with IDE
			
			|| oldimp = scimport.CurrIsManuallyImported
			scimport.CurrIsManuallyImported = .proj.depth
			parser.Using.Tag = 0  // I'd rather remove this dumb thing. Each scfunction has a file already
										// so only macros would need this. Its just used for to make vm-debug positions
			if !orig
				rz = .fData.ParseClean
			  else
				rz = .fdata.parse
			scimport.CurrIsManuallyImported = oldimp
			.DetectInsecureWords
			
			parser.using.tag = 0
			parser._DotInsertallow = false
			StdErr.source = ""
		(Message).restore
	
	module
		|scfile--| Curr



function file.CodeSign (|string| sign, |ExitCode|)
	target osx
		if !platform.osx
			return 45 // ENOSUPPORT
		using ErrorSeverity.Warning
		|[string]| args = []
		args <~ "--deep"
		args <~ "--force"
		if options.PrintCompileString
			args <~ "--verbose"
		args <~ "-s"
		args <~ sign.cstr
		args <~ self.cstr

		|| errs = FastString()
		|| f = "/usr/bin/codesign".file
		rz = f.Execute(args, nil, errs)

		// Seems we are getting rz.successful and yet errs contains useless results.

		args = []
		args <~ "--verify"
		if options.PrintCompileString
			args <~ "--verbose"
		args <~ self
		
		if rz.Successful
			rz = "/usr/bin/codesign".Execute(args, nil, errs)
		if rz.Successful
			args[0] = "-a"
			rz = "/usr/sbin/spctl".Execute(args, nil, errs)
		  else
			error (f, errs.GetResult)

	

