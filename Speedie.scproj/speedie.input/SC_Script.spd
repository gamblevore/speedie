

function Compiler.ScriptLoc (|string| f, |file|)
	rz = feedback.TryUseProject(f, true).ScriptLocation.file
	options.output_path = rz


function compiler.UsingScript (|file| f, |file|)
	|| both = Options.ModePack|||Options.modecpp
	require (both < 2) and options.compile
	require !f.isdir
	require f.Read(16) starts "#!"
	
	rz = .ScriptLoc(f)
	
	if error.autoprint == errorflags.printandkeep
		error.AutoPrint = 0
	
	options.scripting = true
	options.silent = true
	options.PrintCompileString = false
	options.OperationCount++
	app.rawargs.remove(0)


function compiler.ScriptRecompile (|file| f, |file|script_build, |bool|)
	if !script_build.exists
		return true
	if (script_build.modified < f.modified)
		return true


function compiler.CanTryModes (|file|)
	opt norefcounts
//	require !app.parent // this blocks speedie programs, calling speedie scripts
						// but I want them to be able to!
						// So why did I put this?
						
	require !app["perry"] and !app["nocompile"]
	|| p = app.rawargs[0]
	if p and !p.argname
		rz = p.file


function compiler.exe (|string|)
	opt norefcounts
	return options.exe_path ?? options.output_path


function compiler.TryVariousStartModes (|bool|)
	|| f = .CanTryModes$		
	|| it = compiler.UsingScript(f)
		|| cwd = app.cwd
		if compiler.ScriptRecompile(f, it)
			compiler.CompileTime
		if stderr.ok
			app.cwd = cwd
			app.ChildEnv("OrigScriptPath") = f
			app.turninto(.exe, app.rawargs)
		rz = true



function string.ContainerName (|string|ext, |string|)
	|| After = .find(ext.PathDir)
		return self[0, after].name


function string.SpdScriptName (|string|)
	// if we are in fizz.scproj... use fizz.
	rz  = .ContainerName(".scproj")
	rz ?= .ContainerName(".uwu")
	rz ?= .name.trimextandpath


function string.ScriptContainer (|string| container = "/tmp/SpeedieApps/",  |string|)
	return container[.hash|int64|.abs.render]


function string.ScriptLocation (|string| container = "/tmp/SpeedieApps/",  |string|)
	|| full = .AbsolutePath ?? self
	|| dest = full.Scriptcontainer(container)
	dest.makeentirepath
	return dest[full.SpdScriptName]

