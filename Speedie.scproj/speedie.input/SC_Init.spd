

module SC_Init
	function SCModule.BuildInitArg (|message|)
		opt norefcounts
		|| s = .source
			using s
				rz = .BuildInitArgSub
		  else
			rz = .BuildInitArgSub
	
	
	function SCModule.BuildInitArgSub (|message|)
		rz = @arg.msg
		rz <~ @arg
		|| src = .source
			|| ig = src.msg(@tmp, "ignore")
			ig.Obj = self // ignore in the renderer.
			ig <~ rz


	function Message.SettingToNil (|bool|)
		opt norefcounts
		if (self == @Decl)
			|| d = .Last
			if (d == @Rel) and (d.Last ~= "nil")
				Return true


	function SCModule.MoveToInitFunc (|Message| c)	
		opt norefcounts
		if (c == @sheb or @url)
			c.remove
			return
		
		expect c.AllowedMoveToInit (c)
		
		if c == @Decl
			require !c.SettingToNil
		
		if c == @decl
			.InitVarsArg ?= .BuildInitArg
			.InitVarsArg.first <~ c
		  else
			.InitCodeArg ?= .BuildInitArg
			.InitCodeArg <~ c


function Message.AllowedMoveToInit (|bool|)
	opt norefcounts
	|| type = .func
	if (type == @dot or @sdot or @func or @rel or @decl)
		return true
	if self istmp "once"
		return true


function SCModule.LoadInitFuncSub (|message| init, |string| name)
	|| msg = "helper $Name (|int|)".ParseClean
	msg <~ init
	|| fn = .NewModuleFunc( msg )
		(fn is InitFunc)
		|| L = init.Last
		if !L.hasany
			L.Remove // never called anymore?


function SCModule.LoadInitFunc
	SCNode.CurrVisibility = true
	scmodule.Curr = self
	|| arg = .InitCodeArg
		.LoadInitFuncSub(arg, "InitCode_")
	
	arg = .InitVarsArg
	if arg
		.LoadInitFuncSub(arg, "Init_")
	scmodule.curr = nil


function SCModule.TryInit (|array of scmodule| req, |bool|)
	opt norefcounts
	for name in .InitAfter
		name.expect(@thg)$
		|| m = compiler.FindModuleMsg(name)
		require m and m.Inited

	.Inited = true
	req <~ self
	return true


extend_module SCModule
	function DoInitAfter (CollectFunc)
		opt norefcounts
		|| mod = name_Space.SpaceModule(node)$
		mod.InitAfter = node[@prm, @bra]
		return compiler.program


function SortInitOrderSub (|array of scmodule| mods, |array of scmodule| out, |bool|)
	opt norefcounts
	|SCModule| failed
	|| GotAny = false
	for m in mods
		require stderr.ok
		if m.inited
			//
		  elseif m.tryInit(out)
			gotany = true
		  else
			Failed = m

	expect (gotany or !failed) (Failed.source, "Modules has recursive init order")
	return failed

	
function SortInitOrder (|array of scmodule| mods, |array of scmodule|)
	while SortInitOrderSub(mods, rz)
		0 // this is such a wierd loop. But it works well. :)

	
function SCModule.AddDelayedInit (|message| src, |message| dest, |string| fn_name)
	opt norefcounts
	if src and .HasActualCode(src) and (self != Compiler.program)
		using src
		dest.AlmostAppend  @sheb + ("// " + .Name)
		|| dot = @dot + fn_name
		dot <~ (@thg, .name)
		dot <~ @prm
		dest.almostappend  dot



function message.AlmostAppend (|message| v)
	opt norefcounts
	|| s = .last
	if s == @tmp
		s.prev = v
	  else
		self <~ v
	


function SCModule.DelayedInitFuncTransform
	opt norefcounts
	|| v = .InitVarsArg
	|| DestVars = (Compiler.program.InitVarsArg, compiler.appinitglobals)(.IsLibrary)
	|| DestCode = (Compiler.program.InitCodeArg, compiler.appinitcode)(.IsLibrary)
	
	|| it = v.first
		for (msg in it)
			if (msg == @Decl)
				|| name = msg.GetDclName
					if name.InitRootDecl( msg, self )
						msg.Remove
		
		.AddDelayedInit(v, destvars, "Init_")

	.AddDelayedInit(.InitCodeArg, destcode, "InitCode_")


function SCModule.HasActualCode (|message|arg, |bool|)
	opt norefcounts
	for curr.flat in arg
		if (curr == @Decl)
			continue_with curr.FlatAfter
		  elseif (curr != @arg)
			return true // found something!


function Message.InitRootDecl (|Message| DeclMsg, |SCNode| name_space, |bool|) {
	// this code just seems wrong... it finds an SCDecl and puts it into "Decl" :)
	// have an SCDecl... that should always already have a default! So why we are creating a default?
	
	require .expect(@thg)
	
	|| decl = name_space.LookUpVarRootDecl( .name, self )
	if decl isa SCDecl
		if decl.isbarestruct
			return true
		using (self)

		|| P = .parent
		|| NewDefault = (P.last, nil)(P == @Rel)
			
		if !NewDefault
			if !Decl.IsNormal
				return true
			NewDefault = Decl.CreateDefault(self)
			if (NewDefault and decl.contains)
				NewDefault = decl.WriteTypeCast(NewDefault)
				NewDefault.Obj = nil // just keep doing what it used to do
		
		if newdefault
			if !newdefault.IsNilOrZero // and !(options.modepack and decl.islib)
				DeclMsg.Prev = NewRel( @thg + .name, NewDefault, "=" )
		Return true
}


function message.IsNilOrZero (|bool|)
	opt norefcounts
	|| f = .func
	|| n = .name
	if f == @thg
		if .obj == typenil or FalseBool
			return true
		if n == "nil" or "false" // what?
	if f == @num
		return .iszero
	if f == @arg
		return !.hasany
		
