

// new task system

module SCTasks {

function CollectAll
	opt norefcounts
	|| T = typetask		// now what?
	require T
	for ch in compiler.TasksTodo
		|| P = ch.obj|SCNode|!
		if P == Compiler.program
			P = T.Modul
		  elseif p isa SCClass
			p = p.modul|SCClass|
		|| found = NewTaskActual(ch, P)
			found.parent = p
			P.TryAdd(ch, found, found.name)


function NewTaskActual (|Message| node, |SCNode| name_space, |SCNode?|)
	opt norefcounts
	|| name = node[@thg]
	|| fields = name.Next(@nil)
	require name and fields
	if fields == @bra or @list
		fields.func = @bra
	  else
		fields = @bra.msg
		name.next = fields
	
	|| arg = fields.next(@arg)		#require
	|| Supper = fields.first
	arg.TakeAllFrom(fields)
	
	|| level = 2
	using node
	node.name = "role"

	if Supper == @thg or @dot
		fields <~ Supper
		level = 3
		arg.BuildTask(fields)
	  else
		fields <~ (@sdot, "interface")
		arg.BuildTask(fields)

	|| task = SCClass.NeuRole(node, name_space, node)|SCModule|
		compiler.taskslist <~ task.cls
		task.cls!.IsRole = level
	return task


function NewTask (CollectFunc)
	node.obj = name_space
	compiler.taskstodo <~ node
	return compiler.program


function scclass.FillTaskConstructor (|scfunction| con)
	opt norefcounts
	|| src = con.source!
	using src
	.FillTaskConstructorSub(src, src.last.TaskConBefore, 0)
	

function message.TaskConBefore (|message!|)
	opt norefcounts
	|| marker = .find(@dot, "constructor")
	if !marker
		marker = .first
	marker++
	if marker
		return marker
	
	return .msg(@sheb, "task")


function scclass.FillTaskConstructorSub (|message| con, |message| before, |int| depth)
	opt norefcounts
	expect (depth <= 16) (con, "Recursion bug. Sheesh.") // what?
	|| pr = .super
	if pr.istask
		pr.FillTaskConstructorSub(con, before, depth+1)
	
	for p in .properties
		p.source!.MakeTaskVar(con, before, depth==0)


function Message.MakeTaskVar  (|message!| con, |message| before, |bool| First)
	opt norefcounts
	|| prm = con.second!
	|| arg = prm.next!
	|| name = .VarName
		if first
			before.prev = NewEqRel(@sdot + name, @thg + name)
		prm <~ .copy // :)


function Message.BuildRunTask (|message| fields, |bool|)
	opt norefcounts
	|| prms = .first
	if !prms or prms == @arg
		prms = @list.msg
		.first = prms
		|| ss = fields.first
			prms <~ ss.copy
	  else
		|| pf = prms.func
		expect (pf == @bra or @list) (prms)
	
	|| arg = prms.next
		arg.expect(@arg)
		require arg.ExpectLast
	  else
		arg = .msg(@arg)
	
	|| p1 = prms.first
	|| ff = fields.first
	if (p1 == @thg or @dot) and ff == @sdot
		ff.name = "task"
		ff.func = @thg
			
	|| f = p1.func
	ifn f == @thg or @dot
		|| brah = @bra.msg
		brah <~ (@thg, "interface")
		.first = brah
		|| pr = .parent!
		pr.AppendMacro(sctasks.TaskMacro, [prms])
		|| callprms = pr.flatlast
		callprms <~ (@thg, "self")
		for p in prms
			|| ty = p.second
				callprms <~ ty.copy
	
	.name = "function"
	.first = @thg + "run"
	return true



function Message.BuildTask (|message| fields)
	|| Runs = .FindAll("run")
	|| run = runs[0]
		check (runs < 2) (runs[0], "Multiple run statements")
	  else
		run = @tmp + "run"
		run.TakeAllFrom(self)
		self <~ run
		
	if run.BuildRunTask(fields) and !.findall("constructor")
		run.prev = "constructor () {}"~parse


	
|| TaskMacro = `
	role interface (task)
		prototype prototype (^"_0")
		syntax call (^"_0")
			return (._func|prototype|)()
`.macro

}



function compiler.TestTask
	|| xxx = task.LessThan3("a", 5, "c")
	|| z = (xxx)(8)


task LessThan3 (|string| a, |int| b, |string| c)
	run (|int| i, |bool|)
		return i < .b


module SCTasks2
	function run
		|| xxx = lessthan("a", 5, "c")
		|| z = LessThan.abc(xxx, 1)
		|| yyy = task.lessthan2(1.2)
		|| w = LessThan.abc(yyy, 1)

		
	task LessThan (|string| a, |int| b, |string| c)
		run (|int| LESSTHAN, |bool|)
			cpp_part TaskTest
			return LESSTHAN < .b
		
		module
			function abc (lessthan) 
				return (self)(LessThaN)


task LessThan2 (|float| f)
	run 	(SCTasks2.lessthan)
		return lessthan*2.1 < .f

