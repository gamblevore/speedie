

// new task system

module SCTasks {

|| tmp = message()
function CollectAll
	opt norefcounts
	|| T = typetask
	require T
	for ch in compiler.TasksTodo
		|| P = ch.obj|SCNode|!
		if P == Compiler.program
			P = T.Modul
		  elseif p isa SCClass
			p = p.modul|SCClass|
		NewTaskActual(ch, P)


function NewTaskActual (|Message| node, |SCNode| name_space)
	opt norefcounts
	|| name = node[@thg, @dot]$
	|| fields = name.Next
	if fields == @bra or @list
		fields.func = @bra
	  else
		fields = @bra.msg
		name.next = fields
	
	|| arg = fields.next
	if !arg.expect(@arg)
		arg = node.msg(@arg)
	
	|| Supper = fields.first
	while (|| L = fields.Last)
		(l is Editable) // not actually editable
		tmp.First = L
	
	
	|| level = 2
	using node

	if Supper == @thg or @dot
		fields <~ Supper
		level = 3
	  else
		fields <~ (@sdot, "interface")
	arg.BuildTask(fields, node, level)
	arg.TakeAllFrom(tmp)
	node.name = "role"
	
	
	if name == @dot
		|| P = name_space.FindModuleMsg(name.first!)
			name_Space = p // hmmm
		
	|| task = SCClass.NeuRole(node, name_space, node)|SCModule|
		compiler.taskslist <~ task.cls
		task.cls!.IsRole = level
		task.parent = name_space
		name_space.TryAdd(node, task, task.name)


function NewTask (CollectFunc)
	node.obj = name_space
	compiler.taskstodo <~ node
	return compiler.program


function scclass.FillTaskConstructor (|scfunction| con)
	opt norefcounts
	|| src = con.source!
	using src
	.FillTaskConstructorSub(src, src.last.TaskConBefore, 0)
	|| p = .modul.parent as scmodule
		|| c = p.cls
			c.tryadd(src, con, .name)
	

function message.TaskConBefore (|message!|)
	opt norefcounts
	|| marker = .find(@dot, "constructor")
		marker++
	  else
		marker = .first
	if marker
		return marker
	
	return .msg(@sheb, "task")


function scclass.FillTaskConstructorSub (|message| con, |message| before, |int| depth)
	opt norefcounts
	expect (depth <= 16) // what?
	|| pr = .super
	if pr.istask
		pr.FillTaskConstructorSub(con, before, depth+1)
	
	for p in .properties
		|| S = p.source
			if s is Editable
				S.MakeTaskVar(con, before, depth==0)


function Message.MakeTaskVar  (|message!| con, |message| before, |bool| First)
	opt norefcounts
	|| prm = con.second!
	|| arg = prm.next!
	|| name = .VarName
		if first
			before.prev = NewEqRel(@sdot + name, @thg + name)
		prm <~ .copy // :)


function Message.BuildRunTask (|message| fields, |int| level, |bool|)
	opt norefcounts
	|| prms = .first
	|| NoPrms = !prms or prms == @arg
		prms = @list.msg
		.first = prms
		if level == 3
			|| ss = fields.first
				prms <~ ss.copy
	  else
		|| pf = prms.func
		expect (pf == @bra or @list) (prms)
	
	|| arg = prms.next
		arg.expect(@arg)
		require arg.ExpectLast
	  else
		arg = .msg(@arg)
	
	|| p1 = prms.first
	|| ff = fields.first
	if (p1 == @thg or @dot) and ff == @sdot
		ff.name = "task"
		ff.func = @thg
			
	|| f = p1.func
	if !(f == @thg or @dot)
		|| brah = @bra.msg
		brah <~ (@thg, "interface")
		.first = brah
		|| pr = .parent!
		pr.AppendMacro(sctasks.TaskMacro, [prms])
		|| callprms = pr.flatlast
		callprms <~ (@thg, "self")
		for p in prms
			|| ty = p.second
				callprms <~ ty.copy
	
	.name = "function"
	.first = @thg + "run"
	return true


function Message.BuildTask (|message| fields, |message!| root, |int| level)
	|| Runs = .FindAll("run")
	|| run = runs[0]
	check (runs <= 1) (run, "Multiple run statements")

	if root == "task_run"
		if run: error run
		run = @tmp + "run"
		run.msg(@arg).TakeAllFrom(self)
		self <~ run
	  else
		expect (run) (self, "Missing 'run' statement")

	if run.BuildRunTask(fields, level) and !.findall("constructor")
		run.prev = "constructor () {}"~parse


	
|| TaskMacro = `
	role interface (task)
		prototype prototype (^"_0")
		syntax call (^"_0")
			return (._func|prototype|)()
`.macro

}



function compiler.TestTask
	|| xxx = task.LessThan3("a", 5, "c")
	|| z = (xxx)(8)


task LessThan3 (|string| a, |int| b, |string| c)
	run (|int| i, |bool|)
		return i < .b


