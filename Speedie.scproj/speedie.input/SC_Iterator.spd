
/*
	Jeebox internals. By Theodore H. Smith...
*/


class SCIterator (SCNamed)
	linkage
		cpp_part			Iter

	|[SCNodeRenamer]|	Names
	|SCNodeRenamer?|	selfs
	|SCNodeRenamer?|	ValueRenamer
	|message?|			Index
	|message?|			LoopCond
	|message?|			LoopEndCond
	|message?|			Value
	|message?|			WhileLoop
	|message?|			Yield
	|scclass?|			Parent
	|bool| 				OK
	
	constructor (|scclass?| parent, |Message!| msg)
		.parent = parent
		
		|| thg = msg.first
		|| x = (thg.name ?? "DefaultIterator")
		.Name = x
		
		|| M = StdErr.mark
		|| src = msg.last(@arg)									#check msg
		.source = src
		
		
		.WhileLoop  = .source.find( @tmp, "while" )				#check (msg, "missing while")
		|| WhileArg = .WhileLoop.find(@Arg)						#check (.WhileLoop, "missing argument for 'while'")

		.LoopEndCond = WhileArg.Next.first
		
		|| Cond = .WhileLoop.first
		if (Cond == WhileArg)
			Cond = «thg "true"»
		  elseif cond
			Cond = Cond.NeedBra
		.LoopCond = Cond
		
		|message| w
		if whilearg
			w = WhileArg.FindNested( @Tmp, "yield" )			#check (WhileArg, "Missing yield statement.")		
		.yield = w
		.Value = .yield.first									#check (.yield, "Missing value")

		|| i = .yield.second
			i.Expect(@bra)
			i = i.first
		.Index = i
		
		|| sn = SCNodeRenamer.new
		.selfs = sn
		if src
			sn.CollectSelfs( src )
		.Names = .Uniqueify( src )
		.OK = M


	function message.Deepest (|syntax| Tmp, |string| name, |message?|)
		opt norefcounts
		real self // unneeded?
		for ch in self
			|| best = ch.deepest(tmp, name)
				return best
		if self == @tmp and name
			return self


	function MakeWhile (|message| arg, |message| postcond, |message|)
		|| result = .WhileLoop!.copy(arg)				 // hmmm... this position thing doesn't work.
		|| Loop = result.Deepest(@tmp, "while") #require // for (x,y) loops...
		|| larg = Loop.find(@arg)				#require
		|| it = larg.next // postcond
			it.remove
		larg.replacewith(arg)
		loop <~ postcond
		return result
	
	
	function RenameSelf (|Message| Name)
		.selfs!.Rename( Name )


	function Check (|SCClass| cls)
		using .source
		|| dot = ("." + .name, "")(.name)
		|| msg = "iterator iter_test () {for yield_test$dot in self {(yield_test)}}".parseclean
		|| fnc = SCFunction.NewFunc( msg, cls, .source )|SCFunction|
			fnc.FuncDecls
			fnc.Transform


	function RenameValue (|message| s)
		|| v = .ValueRenamer
		if !v
			v = SCNodeRenamer.new
			.ValueRenamer = v
			v.Collect(  .source,  .value!.name,  .source.FlatAfter )
		v.Rename( s )


	function Renuqify (|SCNode| p)
		opt norefcounts
		for n in .names
			n.Uniqueify( p )


	function Uniqueify (|Message?| msg, |[SCNodeRenamer]|)
		opt norefcounts
		for dcl.flat in msg
			if dcl == @Decl
				|| CurrName = dcl.getdclname
					|| ren = SCNodeRenamer.new
					ren.CollectDclThg( CurrName )
					rz <~ ren


	module
		|sciterator| carray
		|sciterator| pointer
		
		function SimpleIter (|string| src, |sciterator|)
			|| s = src.parse.first!
			|| it = SCIterator.new(nil, s)
			if it.OK
				rz = it

		function NeuIter (CollectFunc)
			if name_space.mustbe(SCClass, node)
				|| it = SCIterator.new(name_space, node)
				if it.OK
					name_space.tryadd(node, it, it.name)
					Return Compiler.program // OK

		
		carray = SimpleIter(
"iterator	// eyyy mammi, i aint doin this
	|| first = &self[0]
	|| i = 0
	while (i <  –count self)
		yield first[i] (i)
		i++"
)

		pointer = SimpleIter(
"iterator
	|| curr = self
	while self[0]
		yield self[0] (self)
		self++"
)
		


function SCClass.GetIteratorAny (|String| name, |message| node, |SCIterator|)
	opt norefcounts
	name := "DefaultIterator"
	for c.upwards in self
		|| R = c[name] 
		if R isa SCIterator
			return R

	.iterfailed(name, node)

function scclass.Iterfailed (|string| name, |message| node)
	error (node, "No iterator $Name for class: ${.Name}" )



function SCClass.CheckIterator
	opt norefcounts
	for i in .access
		if i isa sciterator
			i.check(self)


function scdecl.GetIteratorAny (|String| name, |message| node, |SCIterator|)
	if .IsCArray
		return sciterator.carray
	|| cls = .type
	if .PointerCount and !cls.isstruct
		return sciterator.pointer
	
	return cls.GetIteratorAny(name, node)


