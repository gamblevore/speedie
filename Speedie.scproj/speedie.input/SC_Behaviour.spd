 

/*
	Jeebox internals. By Theodore H. Smith...
*/


class SCBehaviour (SCNode)
	|SCModule?|							FuncTable
	|dictionary of SCModule|			Interfaces
	|[SCFunction]|						WrapperFuncs	
	
	
	constructor (|SCClass| parent)
		.project = parent.project
		.parent = parent
		.Interfaces = dictionary.new


	function Cls (|SCClass|)
		return .parent|scclass|
	
	
	function Add (|SCNode| fn)
		opt norefcounts
		require (fn)
		|| Old = self[fn.name]|SCNode|
			error (fn.source,	kNameConf) 
			error (old.source,	kNameConf)
		  else
			.TryAdd(fn.source, fn, fn.name) // Link... later.
	
	
	function Upwards (|SCBehaviour|)
		opt norefcounts
		|| curr = .cls
		while curr
			curr = curr.Super$
			|| b = curr.behaviour
				return b
		
	
	function SCClass.AddBehaviourOrInterface (|SCNode| M, |Message| ErrPlace)
		|| b = .behaviour
		if (!b)
			b = SCBehaviour.new(Self)
			.behaviour = b
		
		if (M isa SCModule)
			b.interfaces.valuelower(M.name) = M
		  else
			b.add(m)
	
	
	function SCModule.OneOrOther (|SCModule| B, |SCModule|)
		if (self and b)
			error ( .source, kNameConf)
			error (b.source, kNameConf)
		return B


	function SCClass.InterfaceForBehaviour (|SCFunction| Fn, |SCClass|)
		|| name = fn.name.lowercase
		if (name.UnderScoreAtAnyEnd)
			name = name.InterfaceToBehaviour
		
		if (name.last == '0')
			name = name[0, name.length-1]
		if (!name.UnderScoreAtAnyEnd)
			name = name.moat
		return .InterfaceFor(name, fn.source)
	
	
	function SCClass.InterfaceFor (|string| name, |message| errplace, |SCClass|)
		opt norefcounts
		|SCModule| Result
		for (C.upwards in self)
			|| B = C.behaviour
				|| I = B.interfaces[name]
					Result = Result.OneOrOther(I)

		expect result (ErrPlace, "No interface found for this behaviour")
		return Result.cls
	
	
	function SCClass.CreateBehaviour
		require .isobject and !.isrole
		
		.Behaviour := SCBehaviour.new(self)
		.Behaviour!.CreateFuncTable( .sourcearg! )
	
	
	function SCClass.BestBehaviourFor (|string| name, |SCFunction|)
		opt norefcounts
		|| b = .behaviour
		while (b)
			|| fn = b[name]
			if (fn isa SCFunction)
				return fn
			b = b.upwards

	
	function SCClass.FillInterFaceIn  (|SCFunction| fn, |bool| Late)
		|| Interface = .InterfaceForBehaviour(fn)					#require
		|| prm = fn.source.find(@prm)								#expect (fn.source, "No parameters found")
		
		|| f = prm.first
			fn.DeclsPrototypeInterface(f, interface, late)


	function SCClass.FillInterFaceWrapper  (|SCFunction| fn)
		|| Interface = .InterfaceForBehaviour(fn)					#require
		|| prm = fn.source.find(@prm)								#expect (fn.source, "No parameters found")
		
		|| f = prm.first											#require
		fn.DeclsProtoCleanup(interface, f, true, false)

		require stderr.ok
		|| prms = fn.source!.findnested(@sthg, "...")				#expect
		// so... now we have prms? fill them in?
	
		|| WriteTo = prms.parent!
		WriteTo.func = @prm
		prms.Remove

		|| Using = fn.source!.syntaxusing
		|| CopyFrom = fn.source.Second
		WriteTo <~ (@thg, "self")

		for C in CopyFrom
			if C == @decl
				|| it = c.declname
					WriteTo <~ (@thg, it.name)

		
	function SCClass.IsBehaviourTable (|bool|)
		require self
		return .Behaviourness == scbehaviour.kBehaviourTable
	
	
	function SCFunction.IsBehaviour (|bool|)
		opt norefcounts
		return .protodecl$.Type.IsInterface
	
	
	function SCClass.IsInterface (|bool|)
		if self
			return .Behaviourness & scbehaviour.kBehaviourProto


	function String.InterfaceToBehaviour (|string|)
		return self[2, .length-2].lowercase

		
	function SCClass.ProcessBehaviours 
		|| B = .behaviour										#require
		|| Table = b.FuncTable									#require
		|| TableCls = Table.cls									#require
		
		for (fn in B)
			.FillInterFaceIn(fn, false)
		
		for (W in b.Wrapperfuncs)
			.FillInterfaceWrapper(w)

		for (interface in B.interfaces)
			interface.AddInterfaceToTable(TableCls)
	
	
	function SCClass.ProcessInterfaces
		require .IsInterface
		|| fn = .funcproto					#require
		|| L = fn.parent
		if (L isa scmodule)
			|| cls = L.cls
				fn.AddSelfPrm(cls)
	
	
	function SCModule.AddInterfaceToTable (|SCClass| TableCls)
		|| d = SCDecl(.cls!)
		d.NilDeclared = NilState.real
		d.Name = .name.InterfaceToBehaviour
		TableCls.properties <~ d
		TableCls.tryadd(.source, d, d.name)
	
	
	function SCClass.BehaviourName (|string|)
		return .name + "_Behaviour"
	

	function CreateFuncTable (|Message| ErrPlace)
		expect !.FuncTable

		|| name = .cls!.BehaviourName
		using errplace 
		|| msg = @tmp + "struct"
		msg <~ (@Thg, name)
		msg <~ @Arg
		
		.project.use
		|| F = SCClass.NewStruct(msg, compiler.program, ErrPlace)|SCModule|
			F.cls!.Behaviourness = kBehaviourTable
			f.cls!.IsRole = .cls!.IsRole
			compiler.program.TryAddBase( ErrPlace, F )			
			.FuncTable = F
			scimport.noproj
	
	
	function String.UnderScoreAtAnyEnd (|bool|)
		return (Self[] == '_') or (self[-1] == '_')
	

	function SCNode.ShouldBeClass (|message|errplace, |SCClass|)
		return .IsNormalObject #expect (errplace, "Can only use this in a class.")

	
	function SCFunction.AddSelfPrm (|SCClass| cls)
		|| prms = .source.find(@prm)
		|| name = .source.first			#expect (.source, "No name found")
		using name
			if !prms
				prms = «prm »
				name.next = prms
			
			prms.first = MakeDecl(cls.name, "self", nil)
	
	
	module {
		function Tran_Behaviour (|message| node, |scclass| cls, |bool|)
			require node
			expect !cls.IsRole (node, "roles can't specify behaviours (roles aren't real classes!)")
			|| name = node[@thg]$
			|| lst = name.next
				expect (lst != @bra and @prm and @list)  (lst, "Behaviours can't specify parameters")
			using node 
				|| it = name.next
					it.expect(@arg)
				  else
					node <~ «arg »

				name.next = «prm
					«thg name.name.moat »
				»
			return true
		
		
		function NewActual (CollectFunc)
			|| cls = name_space.ShouldBeClass(errplace)
			if cls and Tran_Behaviour(node, cls)
				|| fn = SCFunction.NewFunc(node, cls, node)|scfunction|
					cls.AddBehaviourOrInterface( fn, ErrPlace )
					(fn is Behaviour)
					(fn is ExpectsRealVars)
					Return fn


		function MakeVirtualCaller (|SCModule| Mod, |SCClass| Cls, |Message| ErrPlace, |SCFunction|)
			// so it's a func, on the base, with the same name... as... the module
			|| InterName = mod.name
			|| Type = cls.behaviourname
			|| FuncName = Intername.InterfaceToBehaviour
			|| FNStr = "
function $InterName (,$InterName)
	pragma inline
	|| Table = .ClassBehaviours|&$Type|
	return (Table.$FuncName)(...)
"
			using Errplace
			|| FNSrc = FNStr.ParseClean
				rz = SCFunction.NewFunc( fnsrc.first, Cls, ErrPlace )|SCFunction|
				if rz
					(rz is Behaviour)
					(rz is ExpectsRealVars)
					cls.behaviour!.WrapperFuncs <~ rz
		
		

		function NewVirtual (CollectFunc)
			require errplace
			using (errplace)
			|| cls = name_space.ShouldBeClass(errplace)
				|| arg = node.find(@arg)
					|| Beh = «tmp "behaviour"
						node.first!.copy, arg »
					node.next = beh
					name_Space.CollectOne( beh, true ) // cos we collect from a list... sigh

				|| Mod = .NewVirtualSub(node, cls, errplace)
					return .MakeVirtualCaller(Mod, cls, errplace)
		
		
		function NewVirtualSub (|Message| node, |SCClass| cls, |Message| ErrPlace, |scmodule|) {
			|| Thg = node.first!
			|| required = (thg isarel "++")
				thg = thg.replacewith(thg.first!)

			expect (thg==@thg) (node, "Interface has no name.")
			|| s = Thg.name
			expect (!s.UnderScoreAtAnyEnd) (thg, "Interfaces can’t start or end with underscore.")
			expect (s~!="destructor")      (thg, "Bad name.")
			Thg.name = s.moat
			
			|| Mod = SCFunction.NewPrototypeSub(node, cls, ErrPlace, s) #require
			Mod.IsRequiredInterface = required
			cls.AddBehaviourOrInterface( Mod, ErrPlace )
			|| mcls = mod.cls
				mcls.Behaviourness = kBehaviourProto
				if required
					mcls.Behaviourness = kBehaviourProtoRequired
			Return Mod
		}
	}

	
	constants
		kBehaviourTable = 1
		kBehaviourProto = 2
		kBehaviourProtoRequired = 6
	
	
	iterator
		|| FnList = .access.navigate
		while
			|| value = fnlist.NextValue
			if (!value): exit
			yield value|scfunction|
	linkage
		cpp_part Beh


function SCNode.IsNormalObject (|SCClass|)
	if (self isa SCClass)
		if .isobject
			return self


function message.IsBehaviour (|bool|)
	return .name == "behaviour" or "actual"
// .isbehaviour // name == "behaviour"


//extend SCClass
//	syntax Compare (|string| Other, |bool|Aware, |int|)
//		if !self
//			return 1
//		return .name.Compare(other, Aware)
//	syntax Equals (|string| Other, |bool|Aware, |bool|)
//		cpp_part EqualsStr
//		if self
//			return .name.syntaxequals(other, Aware)


function SCClass.RenameInterfaces
	|| b = .Behaviour$
	for (f in b.interfaces)
		|| it = f.cls
			it.name = it.CppClass + it.name


|| kNameConf = "Name conflict"
