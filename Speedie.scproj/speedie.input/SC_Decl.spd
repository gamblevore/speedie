
/*
	Jeebox internals. By Theodore H. Smith...
*/

// scdecl is actually not bad.

constants
	// worse errors are higher numbers
	// don't go to 1024 << 22 ! even 512 risks negative ints.
	kNeedsAddressOfButAlsoNeedsSuperMatch  = 64 << 22
	kNeedsAddressOf     = 32 << 22
	kNeedsTypeCast		= 16 << 22
	kNeeds				= kNeedsTypeCast ||| kNeedsAddressOf ||| kNeedsAddressOfButAlsoNeedsSuperMatch 

	kUseDefaultParams   = 8 << 22
	kLossyCastedMatch	= 7 << 22
	kCastedMatch		= 6 << 22
	kVoidPtrMatch		= 5 << 22
	kSuperClassMatch	= 4 << 22
	kAddressOfMatch     = 3 << 22
	kNumericMatch		= 2 << 22
	kSimpleMatch		= 1 << 22
	kMultipleErrors		= 1 << 21
	kNoMatch			= 0

	kTypeCastMost				= 1
	kTypeCastNumbers			= 2
	kTypeCastIgnoreContained	= 4
	kTypeCastIgnoreAddressOf	= 8
	kTypeCastBothWays			= 16
	kTypeCastTrue				= kTypeCastMost ||| kTypeCastNumbers   // to replace whatever we used to do when we passed "true"
	kNoBoolTypeCast				= 32
	kTypeCastAssigns			= 64
	kTypeCastWantSuperDistance	= 128
	kTypeCastDescribeErrors		= 256
	kTypeCastFromZero			= 512
	kActualTypecasts			= ~(kTypeCastWantSuperDistance ||| kNoBoolTypeCast)  
	kTypeCastFalse				= 0



datatype SCDeclInfo (int)
	flags
		|SCDeclInfo|
		Borrowed
		StayBorrowed
		DirectNumber						// 7
		Const
		NumberConst = DirectNumber + Const	// const: x = 7
		Static
		UpgradeableContained
		NewlyCreated
		TypeImprove
		UsedByCode
		API
		ClassObj
		CompilerCreated
		PropertyWasConstructed
		Disabled
		Param
		Body
		Property
		Global
		Return
		AlteredViaPointer
		Altered
		GameFlyingMem
		Task
		Atomic
		Self
		SetTo					// a var sets it... like: rz = obj
		Hidden					// internal global... should not be exposed to non-lib stuff
		Biggest
		PostIncremented
		ReturnedStruct
		IntendedAsReturn
		Swappable	 = Param + Body + Global + Property
		Local		 = Body + Param
		SelfImplicit = Self + local // local is set by CollectOneParam, anyhow?
		DclCopied    = altered + stayborrowed + static + api + UpgradeableContained + compilercreated // need more too? do later


	function Set (|SCDeclInfo| d, |bool| b, |SCDeclInfo|)
		if b
			return self ||| d
		return self &~ d
		
	

class SCDecl (SCNamed) {
	linkage
		cpp_part			Decl

	|int|				C_Array
	
	|uint64|			ExportPosition	// also can store numeric constants float/int up to 64-bits
	|SCFunction--?|		HiderFunc		// todo: replace the .StringData/hider thing with this.
	|Object?|			IsLookupOnly
	|string|			StringData		// 3 special objects. Aren't they exclusive? Write some code to see if they are.
	|SCDecl?|			Internal		// only for pointers :)
	
	//|SCDecl|			NextContains // for multiple contains
	|SCDecl?|			Contains
	|Message?|			Default
	|SCClass|			Type
	|SCDeclInfo|		Info
	|Datatypecode|		DType
	|Byte|				PointerCount
	|NilState|			NilDeclared
	|byte| 				NilReg
	|byte| 				NilAllocDepth

	
	constructor (|scclass| type)
		.type = type
		.NilDeclared = NilState.Either
		.info = scdeclinfo.altered

	setter Name (|string|)
		super.exportname = value
		super.name = value
	
	function Project (|scimport!|)
		opt norefcounts
		return (.MemoryLayer.obj as SCImport)!
	
	function Reg (|asmreg|)
		return .DType|asmreg|
	
	syntax append (|SCDeclInfo| d)
		.info |= d

	function IsTypeImprove (assigns:|bool|)
		.info = .info.set(SCDeclInfo.TypeImprove, Value)		
		
	syntax is (|SCDeclInfo| d, |bool|)
		if self
			return .info & d

	syntax is (|SCDeclInfo| d, assigns:|bool|)
		.info = .info.set(d, Value)


	function IsNil (|bool|)
		return self == typenil
	
	function IsLib (|bool|)
		opt norefcounts
		return .project.isstdlib


	function Found (|bool|)
		opt	norefcounts
		if self
			if .type != TypeVoid_
				return true
			if .PointerCount
				return true


	function IsVoidPtr (|bool|) 
		return (.pointercount == 1 and .type == typevoid_)


	function IsRegister (|bool|)
		return (self is local) and !(.IsBareStruct or .IsCArray)


	function CopyDeclsStructFixer (|message| src, |declmode| mode, |SCDecl|)
		if (mode is funcparam)
			check (!.iscarray) (src, "No c-arrays in function parameters")
			if (.isbarestruct)
				return .getaddress
		if .refcount == 1
			return self // nice
		return .copydecl
	
	
	function CopyDecl (|bool| ForNewVariable = false, |SCDecl|)
		opt norefcounts
		|| dcl = SCDecl(.type)
		
		.CopyTypeInfoTo( dcl )
		
		// why not copy the whole info?
		dcl.Name     = .Name
		dcl.Default  = .Default
		(dcl Is Borrowed) = !ForNewVariable and (self Is Borrowed)
		Return dcl

	
	function Better_Numeric (|scdecl| o, |opmode| Mode=0, |message| where = nil, |scdecl|)
		opt norefcounts
										// int+float-->float
										// int+double-->double
		|| S =  .type.typeinfo
		|| T = o.type.typeinfo
		if mode isnt MakesSigned
			if (s &~ datatypecode.sign) == (t &~ datatypecode.sign)
				return self
		|| cls = s.better_numeric_sub(t, Mode, where)!
		if cls.typeinfo == s
			return self					// in case of: || x = (date(), 0)(test)
		if cls.typeinfo == t
			return o
		return cls.typenormal


	function SCDecl.IsFloat (|bool|)
		return .type.typeinfo.isfloat
	function SCDecl.IsInt (|bool|)
		return .type.typeinfo.isint

//	function asdasd_bad
//		|int|  x
//		|uint| y
//		if x > y
//		
//	function asdasd_bad
//		|char| x
//		|uint| y
//		if x > y

	function asdasd_bad
		|uint64| V
		|| signed2 = (v < 1)|int|
//		|| signed  = (v < 0)|int|
//			v = ~v
		
	function asdasd_OK
		|int|  x
		|byte| y
		if x > y


	function datatypecode.Better_Numeric_Sub (|datatypecode| t, |opmode| Op, |message| where, |SCClass|)
		|| bme = .itembitcount
		|| bt = t.itembitcount
		|| bits	= bme max bt
		// what about a float + an int? f64 right?
		if .isfloat or t.isfloat
			if bits > 32
				return typef64
			if bits >= 16
				return typefloat
			return typehfloat
		
		if Op
			if Op is MakesSigned				// -
				|| bits2 = (bme + !.issigned) max (bt + !t.issigned)
				if bits2 > 32
					return typeint64
				return typeint
			if Op is LoseBits					// &
				bits = bme min bt
			  elseif Op is ShiftOnly			// >>, rotr, rotl
				bits = bme
			  elseif Op is NoExtraBits			// (xor, <<) can add bits
				0
			  elseif (Op is mathlike) and bits < 32
				bits = 32
		
		|| Signed = .issigned
		if Op isnt ShiftOnly
			 signed := t.issigned
		if bits > 32
			return (typeint64, typeuint64)(signed)
		if bits > 16
			return (typeint  , typeuint  )(signed)
		if bits >  8
			return (typeint16, typeuint16)(signed)
		return TypeByte


	function PointeryMatch (|scdecl| O, |bool|)
		if (o.PointerCount == .PointerCount)
			return (o.IsCArray == .IsCArray)


	function PointeryMatchSub (|SCDecl| O, |int| TypeCast, |int|)
		opt norefcounts
		|| OType = O.Type
		|| t = .type
		|| tica = t.IsRole
		if tica == otype.IsRole
			//
		  elseif tica
			while t.IsRole
				t = t.super$
		  else
			while otype.IsRole
				otype = otype.super$
		
		|| dist = 0
		for (CurrSuper.Upwards in OType)
			if (t == CurrSuper)
				// OK... so what about the distance?
				if (o.AllocSource or .ContainsMatch(o, TypeCast))
					if !dist
						Return kSimpleMatch
					if typecast & ktypecastwantsuperdistance
						return kSuperClassMatch ||| dist 
					return kSuperClassMatch
			dist++

	
	function CopyTypeInfoTo (|SCDecl| Dcl)
		dcl.Type		= .Type
		dcl.PointerCount= .PointerCount
		dcl.Contains	= .Contains
		dcl.internal	= .Internal
		|| cpyflags		= scdeclinfo.DclCopied
		dcl.info &= ~cpyflags
		dcl.Info |= .info & cpyflags
		dcl.C_array		= .C_array
		dcl.NilDeclared = .NilDeclared
			

	function GetAddress (|declmode| Purpose=declmode.always, |SCDecl|)
		rz = SCDecl(.type)
		.CopyTypeInfoTo(rz)
		rz.internal = self
		rz.PointerCount++
		rz.c_array = 0
		|| ns = nilstate.realish
		if purpose == declmode.globals
			ns = nilstate.optional
		  elseif purpose isnt FuncParam
			ns |= nilstate.stated
		rz.NilDeclared = ns
		check (rz.pointercount <= 4) (.source, "Too much abstraction")
	
	
	function GetCArray (|int| Amount, |SCDecl|)
		rz = SCDecl(.type)
		.CopyTypeInfoTo(rz)
		rz.iscarray(amount, self)
	
	
	function IsCarray (|int| Size, |scdecl| Of)
		.pointercount = 0
		.C_Array = size
		.NilDeclared = nilstate.real
		.Internal = of
		.nildeclared = nilstate.realish


	function DeReference (|message| brel, |SCNode|name_space,  |bool| IsAccess,  |scdecl|)
		opt norefcounts
		|| c = .DeReferenceSub(brel, name_space, isaccess)
			return c
		error (brel.first, "Can't dereference this.")
		
	
	function DeReferenceSub (|message| brel, |SCNode| name_space,  |bool| IsAccess, |scdecl|)
		opt norefcounts
		if .IsCArray
			check (IsAccess) (brel, "Use [0] instead.")
			|| i = .Internal$				
			if i.TypeSuffers
				return i.MakeNewOptional
			return i
		
		if .PointerCount > 0
			brel.ASMType = ASMtmp.kPointer
			return .internal
		
		if !isaccess and .isnormalobject
			brel.become(@dot, "first")
			brel<~(@prm)
			return typeofexpr(brel, name_space)
		

	render
		if self
			.WriteDeclFull("", 2).Render(fs)


	function WriteDeclFull (|String| DeclName = "", |int| minimal = 0, |Message|)
		DeclName := .Name
		expect DeclName or !.default
		
		if DeclName
			return .WriteDeclSub(DeclName, minimal)
		return «decl, .WriteType(minimal) »
	

	function RenderTypeAndName (|int| minimal, |string|)
		return .WriteDeclTypeAndName("", minimal).render
	
	
	function WriteDeclTypeAndName (|String| Name, |int| minimal, |Message|)
		name := .Name
		return « decl,  .WriteType(minimal),  «Thg name » »
	
	
	function WriteDeclSub (|String| Name, |int| minimal, |Message|)
		|| dcl = «decl, .WriteType(minimal) »
		|| def = .Default
		if !def and minimal >= 2
			dcl.msg(@Thg, name)
			return dcl
		def := .Type.defawlt

		if !def or (.pointercount and minimal < 2)
			def = «thg "nil"»
		  else
			def = def.copy
		
		|| c = .Contains
			def = «type ":)"
				def
				«rel // seems OK :P
					«Thg .Type.Name »
					«opp "of"»
					«Thg c.Type.Name »
				»
			»
		
		dcl <~ NewEqRel(«Thg name », def)
	
		Return dcl
	

	function IsBareStruct (|bool|)
		return .Type.IsStruct and !.PointerCount and !.IsCArray

	function IsStruct (|bool|)
		disabled "Use .IsBareStruct"

	function IsReg (|bool|)
		require !.IsCArray
		if .pointercount
			return true
		return !.Type.IsStruct


	function IsInteger (|bool|)
		return .isnormal and .type.TypeInfo.isint


	function IsDataTypeOnly (|bool|)
		return .Type.IsdatatypeOnly and !.PointerCount and !.IsCArray


	function message.GetFunctionPointer (|scfunction|)
		opt norefcounts
		|| d = .obj as scdecl		#require
		if d.isnormal
			|| t = d.type
			return t.funcproto


	function IsObject (|bool|)
		return .Type.IsObject and !.IsCArray
	
		
	function IsNormalObject (|bool|)
		return (!.PointerCount) and (!.IsNil) and .IsObject


	function IsNormalNumber (|bool|)
		require (!.IsCArray) and (!.PointerCount)
		if (.Type.NumericCount == 1)
			return true
		if scnode.ConstantsLoadingOverride and (self is const) and .typeinfo.count == 1 
			return true

	
	
	function IsNormalBool (|bool|)
		return (!.IsCArray) and (!.PointerCount) and (.Type == typebool) 


	function IsNumeric (|int|)
		opt norefcounts
		if (!.IsCArray) and (!.PointerCount)
			return .Type.NumericCount


	function TypeInfo (|DataTypeCode|)
		opt norefcounts
		if (!.IsCArray) and (!.PointerCount)
			return .Type.typeinfo


	function MiniMatch (|SCDecl| O, |int| TypeCast = 0, |bool|)
		Return .TypeMatch( o, TypeCast, nil )

	
	function CanWrap (|bool|)
		if (.pointercount or .type.funcproto)
			return true

		require !.IsBareStruct and !.IsCArray
		require .type.TypeInfo!=DataTypeCode.UnusedType
		return true


	function MakeContainedObject (|message| ErrPlace)
		opt norefcounts
		|| c = .Contains
			.contains = c.MakeAsObject(self, ErrPlace)

	
	function NewWrapper (|scdecl| CastTo, |scdecl|)
		opt norefcounts
		|| IsNormal = castto and CastTo.isnormal
			|| it = .type.DataObject
				return it.ForContained
		|| dcl = SCDecl(TypeWrapper!)
		dcl.contains = castto.ForContained
		if IsNormal
			.type.DataObject = dcl
		return dcl
	
	
	function MakeAsObject (|SCDecl| Container, |Message| ErrPlace, |scdecl|)
		|| NormalContained = container.type.contained			#require
		if (.IsNormalObject)
			check (NormalContained.isnormalobject) (errplace, "This doesn't contain objects.")
			return self

		  elseif !NormalContained.isnormalobject
			return self // yeah not very precise, but good enough for now!
		
		check .CanWrap (ErrPlace, "Can't store this type as an object (in this version of speedie).")
		return .NewWrapper(self)
	
	
	function SCClass.GoUpTo (|int|d, |SCClass|)
		opt norefcounts
		|| s = self
		while (s and s.depth > d)
			s = s.super
		return s
	

	function HighestArrayContainMatch (|SCDecl| Other, |Message| exp, |SCDecl|)
		rz = .highestmatch(other, exp)
		rz := self
	
	
	function HighestMatch (|SCDecl| Other, |Message| exp, |SCDecl|)
		opt norefcounts
		require Other
		|| M = .type
		|| o = other.type

		require !(o == m)

		if (o.depth > m.depth)
			o = o.GoUpTo(m.depth)!
		  elseif (o.depth < m.depth)
			m = m.GoUpTo(o.depth)!

		while (o != m)
			|| o2 = o.super		#loop
			o = o2
			m = m.super			#require
		return o.typenormal


	function Message.ExpectClass (|SCDecl| slf, |SCClass| Cls, |bool|)
		return slf.expectmatch(cls.typenormal, 0, self, self) 
	

	function SCDecl.ExpectFail  (|scdecl| o, |message?| errnode, |message?| backup)
		|| fs = faststring()
		fs <~ "Type mismatch, expected '"
		.RenderTypeName(fs)
		fs <~ "' but found '"
		o.RenderTypeNameNicer(fs)
		fs <~ "'."
		ErrNode := backup
		error ( ErrNode, fs )

		
	function ExpectMatch (|SCDecl| O, |int| TypeCast, |Message?| exp, |Message?| ErrNode = nil, |Message|)
		if exp and exp.IsSmallInt(O)
			typecast |= kTypeCastFromZero

		|| Matched = .TypeMatch(O, TypeCast, exp)
		if (Matched == kCastedMatch or kLossyCastedMatch)
			return exp!.CastedParent

		if (Matched == kNoMatch)
			.ExpectFail(o, ErrNode, exp)
			.TypeMatch(O, TypeCast, exp)

		return exp

	
	operator matches (|SCDecl!| O, |bool|)
		cpp_part MatchesDecl
		// should disable/deprecate this
		return .matchC(O)


	operator exact_isa (|scclass| v, |bool|)
		Return .IsNormal and (.type == v)

	operator matches (|SCClass| O, |bool|)
		if o and self
			return self matches O.TypeNormal
	
	
	function IsUintLike (|bool|)
		|| t = .type.typeinfo
		if .isnormal and t.isint
			return !t.IsSigned

		
	
	function MatchC (|SCDecl?| O, |bool|)
		Return .TypeMatch( o, kTypeCastTrue, nil )

		
	function ContainedReplace (|SCDecl| contains, |bool| NeedsName,  |SCDecl|)
		opt NoRefCounts
		// handles   " ...  --> string "     (.iscontained)
		//    or     "[...] -->[string]"     (.contains.iscontained)
		
		if self Is UpgradeableContained
			if  (!needsname or !.name) and .SameForReplace(contains)
				return contains				// we are missing UpgradeableContained?
			
			|| CType = contains.type
			|| SameType = CType == .type
				if .SameForReplace(contains) 
					return self
			
			|| C = .copydecl
			c.type = ctype
			c.contains = contains.contains
			//ifn c.pointercount == contains.pointercount
			//ifn c.c_array == contains.c_array // why cant we just return contains? i tried but it doesnt work
			(C is UpgradeableContained) = !sameType
			
			Return C

		|| inside = .contains
		if inside  and  inside != contains  and  inside Is UpgradeableContained
			self = .copydecl
			.Contains = contains
		return self
		
	
	function SameForReplace (|SCDecl| c, |bool|)
		require (c is borrowed) == (self is borrowed) 
		require c.PointerCount == .PointerCount
		if .nildeclared != c.nildeclared
			return false
		return c.C_array      == .C_array

	function IsNormal (|bool|)
		return !.PointerCount and !.IsNil and !.IsCArray

	function IsMostlyNormal (|bool|)
		require !.IsNil and !.IsCArray
		if !.PointerCount
			return true
		if .Type.IsStruct
			return .PointerCount == 1

	function AlreadyContains (|bool|)
		opt norefcounts
		|| ty = .type.contained
		|| c = .Contains
		if ty and c
			return c.MiniMatch(ty)
		
		
	function WriteType (|int| minimal = 0, |Message!|)
		opt norefcounts
		|| simple = .WriteSimpleType
		|| c = .Contains
		if !c or (minimal and .AlreadyContains)
			return simple
		
		rz = @rel.msg
		rz <~ simple
		rz <~ (@opp, "of")
		rz <~ c.writetype(minimal)
		

	function WriteSimpleType (|Message|)
		opt norefcounts
		rz = .writeverysimpletype
		if self is borrowed
			rz = rz.wrapwith(@arel, "--")
		if .TypeSuffers and .nilstated
			if .StatedOptional
				rz = rz.wrapwith(@brel, "?")  // «brel "?", rz »
			  elseif .StatedReal and platform.isdebug
				rz = rz.wrapwith(@brel, "!")  // «brel "!", rz »


	function WriteVerySimpleType (|Message|)
		rz = @Thg + .type.Name
		for (.pointercount|int|)
			rz = rz.wrapwith(@Brel, "&")

		if (.IsCArray)
			rz = rz.wrapwith(@acc)
			rz.msg(@arr) <~ .c_array


	function CreateSimpleTypeCast (|Message!| exp, |Message|)
		|| Curr = exp
		While (curr == @bra)
			Curr.obj = self
			curr = curr.first

		rz = @type.msg(":)")
		// (s) --> (s|bool|)
		
		exp.prev = rz
		
		rz <~ exp
		rz <~ .WriteType
		rz.obj = self


	function CantBeNilInCpp (|bool|)
		require !.pointercount
		return (.IsCArray) or (.type.IsStruct) or (.isnumeric > 1) 


	function CreateStructNil (|message| where, |Message!|)
		using where
		rz = .CreateStructNilsub()
		rz.obj = self
	
		
	function CreateStructNilSub (|Message!|)
		if .IsCArray
			return @arg.msg
		
		rz = @type + ":)"
		rz <~ @Arg
		rz <~ .WriteType
	

	function message.CreateNil (|message|)
		using (self)
		rz = «Thg "nil"»
		rz.Obj = TypeNil


	function CreateDefault (|message| errs, |bool|isfunc=true, |Message|)
		if (.CantBeNilInCpp) // in case we are storing objects... need to have non-corrupt data.
			if isfunc
				return .CreateStructNil(errs)
			return nil

		if (.PointerCount)
			if isfunc
				return errs.CreateNil
			return nil
	
		|| d = .type.Defawlt
			return d.copy(errs)


	function CanUseDefault (|bool|)
		if .IsNil
			debugger
			return false

		if (.Type.IsStruct and !.PointerCount)
			return (.IsBareStruct)
		return true


	function IsReffable (|bool| SetOnly, |bool|)
		opt norefcounts
		require (!.PointerCount) and (self is altered)
		require !(SetOnly and (self Is Borrowed))
		return .type.IsObject


	function HasStruct (|bool|)
		opt norefcounts
		return !.PointerCount and .type.isstruct
	
	
	function HasStructDestructor (|SCFunction|)
		if .HasStruct
			return .type.destructorfunc


	function ReallyContains (|scdecl|)
		opt norefcounts
		|| c = .contains ?? .type.contained
		if c and c.type != .type
			return c
	
	
	function ContainsMatch (|SCDecl| o, |int| TypeCast, |bool|)
		opt norefcounts
		if (TypeCast & kTypeCastIgnoreContained)
			return true

		|| oc = o.ReallyContains
		|| sc =  .ReallyContains
		if (oc == sc) or !(sc and oc) or !o.contains
			return true
		Return sc.TypeMatch( oc, 0 ).IsNormalMatch


	function MakeBorrowed (|bool| StayBorrowed=false, |SCDecl|)
		if self Is Borrowed
			Return self
		
		rz = .copydecl				// only used in extractdecl. Avoids modifying original.
		(rz Is Borrowed)
		if stayborrowed
			(rz is StayBorrowed)


	function MakeNewOptional (|SCDecl|)
		// this becomes declared optional...
		// the default state is "either" (undeclared)
		return .MakeExistance(nilstate.optional, .type.typeOptional)

	
	function MakeContainedOptional (|scdecl|)
		if .nilstated
			return self
		return .MakeExistance(nilstate.optional, .type.TypeOptional)
	
	
	function MakeNewReal (|SCDecl|)
		if .PointerCount
			.NilDeclared = NilState.real
			return self
		return .makereal

	
	function MakeReal (|scdecl|)
		return .MakeExistance(nilstate.real,  .type.TypeReal)
	
	
	function MakeNewNil (|SCDecl|)
		if .PointerCount
			.NilDeclared = NilState.actuallynil
			return self
		return .MakeExistance(NilState.actuallynil,  nil)


	function BecomeReal
		if .NilDeclared isnt Stated
			.NilDeclared = NilState.Real


	function DefaultToReal (|scdecl|)
		return .MakeExistance(nilstate.real)


	function MakeExistance (|nilstate| type, |scdecl| Default=nil, |scdecl|)
		opt norefcounts
		if .nildeclared == type
			Return self
		
		if (Default and self == .type.typenormal)
			return Default
		
		rz = .copydecl
		rz.NilDeclared = type


	function CanNilCheck (|bool|)
		opt norefcounts
		require self
		if .PointerCount
			return true
		if .IsCArray
			return false
		return (.type is HasNilChecker)
	

	function NilConstructor (|nilstate| type,  |scdecl|)
		opt norefcounts
		if Type == 0
			return self
		rz = .CopyDecl
		rz.NilDeclared = type

	function StatedReal (|nilstate|)
		return .NilDeclared.statedreal

	function StatedOptional (|nilstate|)
		if .NilDeclared&nilstate.optional == NilState.optional
			return NilState.optional

	function RefineDecl (|message| list, |SCDecl|)
		opt norefcounts
		rz = .copydecl
		for p in list
			if p.expect(@thg)
				|| n = p.name
				if (n ~= "tag")
					(rz is borrowed) = options.ProjectIsLibrary
				  elseif (n ~= "api")
					(rz is api)
				  elseif (n ~= "const")
					(rz is const)
				  else
					error p


	function Message.WrapExpr (|scdecl| src, |int|)
		if !self
			Return kNeedsTypeCast

		|| W = «dot "new"
			«thg "dataobject"»
			«emb »
		»
		if src.isfloat
			w.name = "newfloat" // sigh
		.ReplaceWith(W)
		W.last <~ self
		TypeOfExpr(W, compiler.program)
		|| D = .AsDecl
			w.obj = D.NewWrapper(D)
		  else
			debugger
		
		return kCastedmatch
		
	
	function Message.CastToBool (|SCNode|name_space=nil, |int|)
		return .castToType("bool", TypeBool!, name_space, kLossycastedmatch)


	function Message.CastFPToVoidPtr (|int|)
		|| cst = @type + ":)"
		.prev = cst
		cst <~ self
		cst.msg(@emb).obj = typevoidptr
		
		cst.obj = typevoidptr	 // hmmm.... why not do it anyhow?
		return kCastedMatch


	function Message.CastToClass (|scclass|type, |SCNode|name_space=nil, |int|)
		return .CastToType(type.name, type, name_space)


	function Message.CastToType (|string| TypeName, |SCClass| type, |SCNode| name_space, |int| loss = kCastedMatch, |int|)
		if (!self)
			// its not "loss" here? or else we get kcastedmatch on things that
			// aren't casted.
			Return kNeedsTypeCast ||| loss

		if (name_Space)
			TypeOfExpr(self, name_space)
		  elseif (.obj)
			|| FoundType = TypeOfExpr(self, name_Space)
			if FoundType and FoundType.type.isstruct
				expect FoundType.PointerCount (self, "Can't typecast a struct!")

		|| cst = «type ":)" »
		.prev = cst
		cst <~ self
		cst.msg(@thg, typeName).obj = Type.TypeNormal 
		cst.obj = Type.TypeNormal	 // hmmm.... why not do it anyhow?
		Return loss	

	
	function Message.GetAddressOf (|SCDecl| Type, |bool| WasCArray = false, |int|)
		if !self
			Return kNeedsAddressOf
		
		|| Addr = «brel "&"»
		.ReplaceWith( Addr )

		|| inside = self
		if WasCArray
			inside = «acc 
				self
				«arr 
					«num "0"»
				»
			»
		
		Addr <~ inside
		Addr.obj = Type
		Return kAddressOfMatch
	
	
	function Message.MakeDereference (|SCDecl| Type, |int|)
		if !self
			Return kNeedsAddressOf
		
		|| Addr = @acc.msg
		.next = addr
		Addr <~ self
		addr.msg(@arr) <~ 0
		Addr.obj = Type
		Return kAddressOfMatch
	

	function MakeAccess0 (|message|)
		opt norefcounts
		|| l = @thg + .name
		return l.MakeAccess0
	
	function message.MakeAccess0 (|message|)
		opt norefcounts
		rz = .wrapwith(@acc)
		rz.msg(@arr) <~ 0
	
	
	function ExpectRelMatch (|SCDecl| O,  |Message| exp,  |Message?| side,  |Message?| ErrNode = nil)
		opt norefcounts
		// Just like ExpectMatch, except always does type-casting. and returns nothing.
		
		|| Cast = kTypeCastTrue
		if !side
			Cast |= kTypeCastBothWays
		
		.ExpectMatch( O, Cast, exp, ErrNode )
				
		if (self is self) and (scfunction.currfunc is Destructor) 
			error (exp, "You can’t modify 'self' in a constructor or destructor.")
		  elseif side and (self is local)
			.MarkAsRefAltered
						

	function WriteNilRel (|Message|)
		return NeweqRel( .Name, "nil" )

	
	function WriteNilDecl (|Message|)
		opt norefcounts
		|| l = .WriteNilRel
		|| dcl = «decl
			.WriteType
			l
		»
		dcl.obj = self
		l.obj = self
		l.First!.Obj = self
		Return dcl


	function WriteTypeCast (|Message| msg, |Message|)
		|| TheType = «type ":)"
			msg
			.WriteType
		»

		TheType.Obj = self // Does InitRootDecl actually want this?
		return TheType


	render RenderTypeNameNicer
		opt norefcounts
		return .DownGrade.RenderTypeName(fs_in)

	render RenderTypeName 
		if !self
			fs <~ "(nil!)"
		  else 
			if (.IsNil) 
				fs <~ "nil"
			  else 
				fs <~ ( '&', .PointerCount )
				fs <~ .Type.Name
			
			if .IsCArray
				fs <~ '['
				fs <~ .c_Array
				fs <~ ']'
			
			|| c = .Contains
			if c and !c.minimatch(.type.contained, 0) 
				fs <~ " of "
				fs <~ c.type.name

	function AllocatedSize (|int|)
		return .varsizesub(false)

	function DeclSizeSort (|int|)
		if self is biggest
			return 1K
		return .varsizesub(true)


	function DeclSize (|int|)
		return .VarSizeSub(true)


	function RegType (|datatypecode|)
		opt norefcounts
		if self
			|| Ty = .type
			debug_require !(.c_array ||| ty.IsStruct)
			
			if ty.IsObject
				return datatypecode.cstring
			rz = ty.typeinfo
			if .pointercount
				rz &=~ datatypecode.numeric

	function VarSizeSub (|bool| TheVarItself, |int|)
		opt norefcounts
		|| n = Platform.PointerBytes
		ifn .PointerCount or (TheVarItself and .isobject)
			n = .type.Size
		if .IsCArray
			n *= .C_Array
		return N
		
	function PointerIncrement (|int|)
		// only called on pointers
		if .pointercount > 1
			rz = Platform.PointerBytes
		  else
			rz = .type.size
		if .IsCArray
			rz *= .C_Array
		

}


function IsPointerMath (|SCDecl|L, |SCDecl|R, |SCOperator| opp, |Message|exp, |SCDecl|)
	require (opp is Addition)
	if (L.PointerCount) and (R.IsNumeric == 1)
		return L
	if (R.PointerCount) and (L.IsNumeric == 1)
		return R
	if (R.PointerCount) and (L.PointerCount) and (opp.name == "-")
		L.ExpectMatch(R, 0, exp)
		return TypeInt!.TypeNormal


function scdecl.CheckMath (|message| exp, |scdecl|)
	if .PointerCount == 1
		check (.type != TypeVoid_) (exp, "Can't do math on pointer-to-nil")
	return self


function Message.RenderType (|string|)
	opt norefcounts
	|| D = .obj
	if (D isa SCDecl)
		return D.WriteSimpleType.Render
	if (D isa scmodule)
		return d.name
	return .Render


function scdecl.TypeIsReached (|bool|)
	return .type.MyReacher


function int64.MsgForConst (|bool| AllowShift, |message|)
	opt norefcounts
	if !AllowShift or (self <= 1) or !.IsPow2
		return .msg

	rz = @rel.msg
	rz <~ newdeclnum(nil, 1)
	|| op = rz.msg(@opp, "<<")
	op.obj = scoperator.lookup(op) 
	rz <~ newdeclnum(nil, .Log2)



