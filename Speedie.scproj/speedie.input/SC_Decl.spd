
/*
	Speedie Internals. By Theodore H. Smith...
*/

// scdecl is actually not bad.

constants
	// worse errors are higher numbers
	// don't go to 1024 << 22 ! even 512 risks negative ints.
	kNeedsAddressOfButAlsoNeedsSuperMatch  = 64 << 22
	kNeedsAddressOf				= 32 << 22
	kNeedsTypeCast				= 16 << 22
	kNeeds						= kNeedsTypeCast ||| kNeedsAddressOf ||| kNeedsAddressOfButAlsoNeedsSuperMatch 

	kUseDefaultParams  			= 8 << 22
	kLossyCastedMatch			= 7 << 22
	kCastedMatch				= 6 << 22
	kVoidPtrMatch				= 5 << 22
	kSuperClassMatch			= 4 << 22
	kAddressOfMatch				= 3 << 22
	kNumericMatch				= 2 << 22
	kSimpleMatch				= 1 << 22
	kMultipleErrors				= 1 << 21
	kNoMatch					= 0

	kTypeCastMost				= 1
	kTypeCastNumbers			= 2
	kTypeCastIgnoreContained	= 4
	kTypeCastIgnoreAddressOf	= 8
	kTypeCastBothWays			= 16
	kTypeCastTrue				= kTypeCastMost ||| kTypeCastNumbers   // the default case
	kNoBoolTypeCast				= 32
	kTypeCastAssigns			= 64
	kTypeCastWantSuperDistance	= 128
	kTypeCastDescribeErrors		= 256
	kTypeCastForSetRel			= 512
	kTypeCastSetToMemory		= 1K
	kTypeCastFromZero			= 2K
	kTypeCastFromSmallInt		= 4K
	kTypeCastForRelSet			= 8K
	kTypeCastForParams			= 16K
	kActualTypecasts			= ~(kTypeCastWantSuperDistance ||| kNoBoolTypeCast ||| kTypeCastForParams)  
	kTypeCastFalse				= 0



datatype SCDeclInfo (uint)
	flags
		// could look for other exclusive flags
		// consts can't be borrowed.
		
		|SCDeclInfo|
		Borrowed
		StayBorrowed
		DirectNumber						// Eg: 7, 1, 100
		Const
		UnknownConst
		NumberConst = DirectNumber + Const	// const: x = 7
		UpgradeableContained
		TypeImprove
		UsedByCode
		API
		ClassObj
		CompilerCreated
		PropertyWasConstructed
		
		///
		Param // exclusive. Could be... combined
		Body
		Property
		Global
		///
		
		Return
		Altered
		AlteredInBranch
		Reference
		ExistanceAltered
		Task
		Self
		ReadFrom
		SetTo					// a var sets it... like: rz = obj
		Hidden					// internal global... should not be exposed to non-lib stuff
		Grabbed
		PostIncremented
		VarThatGotReturned
		ReturnedStruct
		IntendedAsReturn
//		ASMInnerParam
		
		VarType			= Param ||| Body ||| Global ||| Property
		Local			= Body  ||| Param
		SelfImplicit	= Self  ||| local // local is set by CollectOneParam, anyhow?
		DclCopied		= altered ||| stayborrowed ||| api ||| UpgradeableContained ||| CompilerCreated ||| body ||| return // need more too? do later


	function CheckHighestValue
		|| x = IntendedAsReturn
	
	
	syntax is (|scdeclinfo| d, |bool|)
		return self & d // for debug
	
	
	function Set (|SCDeclInfo| d, |bool| b, |SCDeclInfo|)
		if b
			return self ||| d
		return self &~ d
		
	

class SCDecl (SCObject) {
	linkage
		cpp_part			Decl

	//|SCDecl|			NextContains // for multiple contains

	|int|				C_Array
	
	|SCFunction--?|		HiderFunc
	|Object?|			IsLookupOnly

	|SCDecl?|			Internal		// pointers
	|scdecl?|			LocalVarList
	|SCDecl?|			Contains

	|Message?|			Default
	|SCClass|			Type
	|NilState|			NilDeclared
	|Byte|				PointerCount
	|byte|				NilReg
	|uint16| 			ModuleNum
	|byte| 				NilAllocDepth
	|byte|				DepthOfBranch
	|DeclAlterable|		au // The ASM can alter these, and needs to restore them too.

	
	constructor (|scclass| type)
		opt norefcounts
		.type = type
		.NilDeclared = NilState.Either
		.au.info = scdeclinfo.altered // why? surely it should only be if its ACTUALLY altered??? sigh.
		.au.datatype = 0//datatypecode.UnusedType
		|| m = SCModule.curr
			.ModuleNum = m.ModuleNum

	setter Name (|string|)
		super.exportname = value
		super.name = value
	
	function Project (|scimport!|)
		opt norefcounts
		return (.MemoryLayer.obj as SCImport)!
	
	function TypeOnly (|datatypecode|)
		return .au.DataType & datatypecode.possiblebits
	
	setter WholeType (|asmreg|)
		value.tmpcheck
		.au.DataType = value|datatypecode|
	
	function WholeType (|asmreg|)
		return .au.DataType|asmreg|
	
	syntax append (|SCDeclInfo| d)
		.au.info |= d

	function IsTypeImprove (assigns:|bool|)
		.au.info = .au.info.set(SCDeclInfo.TypeImprove, Value)
	
	
	syntax Compare (|string| s, |bool| aware, |int|)
		return .name.syntaxcompare(s, aware)

	syntax equals (|string| s, |bool| aware, |bool|)
		return .name.syntaxequals(s, aware)
		
		
	syntax is (|SCDeclInfo| d, |bool|)
		if self
			return .au.info & d

	syntax is (|SCDeclInfo| d, assigns:|bool|)
		.au.info = .au.info.set(d, Value)	

	function Sanity 
		// if .name ~= "&JB_ListData"

	function IsNil (|bool|)
		return self == typenil
	
	function IsLib (|bool|)
		opt norefcounts
		return .project.isstdlib


	function Found (|bool|)
		opt	norefcounts
		if self
			if .type != TypeVoid_
				return true
			if .PointerCount
				return true


	function IsVoidPtr (|bool|) 
		return (.pointercount == 1 and .type == typevoid_)


	function IsRegister (|bool|)
		return (self is local) and !(.IsBareStruct or .IsCArray)
	
	function SpecialRegs (|bool|)
		return self and !.au.DataType.IsIntReg
	
	function IntRegs (|bool|)
		return !.SpecialRegs 
		

	function CopyDeclsStructFixer (|message| src, |declmode| mode, |message| Type, |SCDecl|)
		opt norefcounts
		if mode is funcparam
			check (!.IsCarray) (Src, "No c-arrays in function parameters")
			if .IsBareStruct
				return .GetAddress
		  elseif type == @emb
			if .IsBareStruct
				|| V = src.last.last // right?
				|| ty2 = .GetAddress
				V.GetAddressOf(ty2)
				return ty2
	
		if .RefCount == 1
			return self // nice
		return .CopyDecl
	
	
	function CopyDecl (|bool| ForNewVariable = false, |SCDecl|)
		opt norefcounts
		|| dcl = SCDecl(.type)
		
		.CopyTypeInfoTo( dcl )
		
		// why not copy the whole info?
		dcl.Name     = .Name
		dcl.Default  = .Default
		(dcl Is Borrowed) = !ForNewVariable and (self Is Borrowed)
		Return dcl

	
	function Better_Numeric (|SCDecl| o, |opmode| Mode=0, |message| Left, |message| Right, |scdecl|)
		opt norefcounts
										// int+float-->float
										// int+double-->double
		|| S =  .type.typeinfo
		|| T = o.type.typeinfo
		if mode isnt MakesSigned
			if (mode is losebits)
				if (s.basictype == t.basictype)
					if s.bytecount < T.bytecount
						return self
					return o // seems simple?
				
			if (s &~ datatypecode.unsigned) == (t &~ datatypecode.unsigned)
				return self
		|| cls = .better_numeric_sub(o, Mode, left, right)!
		if cls.typeinfo == s
			return self					// in case of: || x = (date(), 0)(test)
		if cls.typeinfo == t
			return o
		return cls.typenormal


	function IsFloat (|bool|)
		return .type.typeinfo.isfloat

	function IsInt (|bool|)
		return .type.typeinfo.isint


	function BestFloat (|scdecl| OT, |int|)
		|| t = ot.type.typeinfo
		|| bt = t.itembitcount
		if self is const
			return bt
		
		|| s = .type.typeinfo
		|| bme = s.itembitcount
		if ot is const
			return bme
		
		return bme max bt		// what about a float + an int? f64 right?


	function Better_Numeric_Sub (|scdecl| ot, |opmode| Op, |message!| Left, |message!| Right, |SCClass|)
		opt norefcounts
		|| s = .type.typeinfo
		|| t = ot.type.typeinfo
			
		if .isfloat or t.isfloat
//			|| KS = self is const
//			|| KO = ot is const
//			if KS and KO
//				if s.itembitcount <= t.itembitcount
//					return .type
//				return ot.type
//			if KS != KO
//				if KO
//					return .type
//				  else
//					return ot.type

			|| bits = .bestfloat(ot)
			|| FF = (datatypecode.double.floatness, datatypecode.float.floatness)(bits > 32)
			|| dest = (TypeFloat64!, TypeFloat!)(bits > 32)
			if s.floatness != FF
				left.CastToClass(dest)
			if t.floatness != FF
				right.CastToClass(dest)
			return dest
		
		|| bme = s.ItemBitCount
		|| bt = t.ItemBitCount
		|| bits	= bme max bt		// what about a float + an int? f64 right?
		if Op
			if Op is MakesSigned				// -
				if bme == 32 and bt == 32		// int - uint should stay as int. Or else its surprising! 
					return typeint
				// 
				|| bits2 = (bme + !s.IsSigned) max (bt + !t.IsSigned)
				if bits2 > 32
					return TypeInt64
				return TypeInt
			if Op is LoseBits					// &
				bits = bme min bt
			  elseif Op is ShiftOnly			// >>, rotr, rotl
				bits = bme
			  elseif Op is NoExtraBits			// (xor, <<) can add bits
				0
			  elseif (Op is mathlike) and bits < 32
				bits = 32
		
		|| Signed = s.IsSigned
		if Op isnt ShiftOnly
			 signed ?= t.IsSigned
		if bits > 32
			return (typeint64, typeuint64)(signed)
		if bits > 16
			return (typeint  , typeuint  )(signed)
		if bits >  8
			return (typeint16, typeuint16)(signed)
		return (typechar, TypeByte)(signed)


	function PointeryMatch (|scdecl| O, |bool|)
		if (o.PointerCount == .PointerCount)
			return (o.IsCArray == .IsCArray)


	function PointeryMatchSub (|SCDecl| O, |int| TypeCast, |int|)
		opt norefcounts
		|| OType = O.Type
		|| t = .type
		|| tica = t.IsRole
		if tica == otype.IsRole
			//
		  elseif tica
			while t.IsRole
				t = t.super$
		  else
			while otype.IsRole
				otype = otype.super$
		
		|| dist = 0
		for (CurrSuper.Upwards in OType)
			if (t == CurrSuper)
				// OK... so what about the distance?
				if (o.AllocSource or .ContainsMatch(o, TypeCast))
					if !dist
						Return kSimpleMatch
					if typecast & ktypecastwantsuperdistance
						return kSuperClassMatch ||| dist 
					return kSuperClassMatch
			dist++

	
	function CopyTypeInfoTo (|SCDecl| Dcl)
		dcl.Type		= .Type
		dcl.PointerCount= .PointerCount
		dcl.Contains	= .Contains
		dcl.internal	= .Internal
		|| cpyflags		= scdeclinfo.DclCopied
		dcl.au.info &= ~cpyflags
		dcl.au.info |= .au.info & cpyflags
		dcl.C_array		= .C_array
		dcl.NilDeclared = .NilDeclared
		
	
	function GetAddress (|declmode| Purpose=declmode.always, |SCDecl|)
		rz = SCDecl(.type)
		.CopyTypeInfoTo(rz)
		rz.internal = self
		rz.PointerCount++
		rz.c_array = 0
		|| ns = nilstate.realish
		if purpose == declmode.globals
			ns = nilstate.optional
		  elseif purpose isnt FuncParam
			ns |= nilstate.stated
		rz.NilDeclared = ns
		check (rz.pointercount <= 4) (.source, "Too much abstraction")
	
	
	function GetCArray (|int| Amount, |SCDecl|)
		rz = SCDecl(.type)
		.CopyTypeInfoTo(rz)
		rz.iscarray(amount, self)
	
	
	function IsCarray (|int| Size, |scdecl| Of)
		.pointercount = 0
		.C_Array = size
		.NilDeclared = nilstate.real
		.Internal = of
		.nildeclared = nilstate.realish


	function WriteDeclFull (|String| DeclName = "", |int| minimal = 0, |Message|)
		DeclName ?= .Name
		expect DeclName or !.default
		
		if DeclName
			return .WriteDeclSub(DeclName, minimal)
		return «decl, .WriteType(minimal) »
	

	render RenderTypeAndName (|int| minimal)
		.WriteDeclTypeAndName("", minimal).Render(fs)
	
	
	function WriteDeclTypeAndName (|String| Name, |int| minimal, |Message|)
		name ?= .Name
		return « decl,  .WriteType(minimal),  «Thg name » »
	
	
	function WriteDeclSub (|String| Name, |int| minimal, |Message|)
		|| dcl = «decl, .WriteType(minimal) »
		|| def = .Default
		if !def and minimal >= 2
			dcl.msg(@Thg, name)
			return dcl
		def ?= .Type.defawlt

		if !def or (.pointercount and minimal < 2)
			def = «thg "nil"»
		  else
			def = def.copy(.source)
		
		|| c = .Contains
			def = «type ":)"
				def
				«rel // seems OK :P
					«Thg .Type.Name »
					«opp "of"»
					«Thg c.Type.Name »
				»
			»
		
		dcl <~ NewEqRel(«Thg name », def)
	
		Return dcl
	

	function IsBareStruct (|bool|)
		return .Type.IsStruct and !.PointerCount and !.IsCArray

	function IsStruct (|bool|)
		disabled "Use .IsBareStruct"

	function IsReg (|bool|)
		require !.IsCArray
		if .pointercount
			return true
		return !.Type.IsStruct


	function IsInteger (|bool|)
		return .isnormal and .type.TypeInfo.isint


	function IsDataTypeOnly (|bool|)
		return .Type.IsdatatypeOnly and !.PointerCount and !.IsCArray


	function message.GetFunctionPointer (|scfunction|)
		opt norefcounts
		|| d = .obj as scdecl		#require
		if d.isnormal
			|| t = d.type
			return t.funcproto


	function IsObject (|bool|)
		return .Type.IsObject and !.IsCArray
	
		
	function IsNormalObject (|bool|)
		return (!.PointerCount) and (!.IsNil) and .IsObject


	function IsNormalNumber (|bool|)
		require (!.IsCArray) and (!.PointerCount)
		if (.Type.NumericCount == 1)
			return true
		if scnode.ConstantsLoadingOverride and (self is const) and .typeinfo.VecCount == 1 
			return true

	function IsNearlyNormalNumber (|bool|)
		require (!.IsCArray) and (!.PointerCount)
		return .Type.NumericCount > 0
	
	
	function IsNormalBool (|bool|)
		return (!.IsCArray) and (!.PointerCount) and (.Type == typebool) 


	function IsNumeric (|int|)
		opt norefcounts
		if (!.IsCArray) and (!.PointerCount)
			return .Type.NumericCount

	function MiniMatch (|scdecl?| self, |SCDecl?| O, |int| TypeCast = 0, |bool|)
		if self
			return .TypeMatch( O, TypeCast, nil )

	function IsBool (|bool|)
		if self and .isnormal
			return .type == typebool
	
	function CanWrap (|bool|)
		if (.pointercount or .type.funcproto)
			return true

		require !.IsBareStruct and !.IsCArray
		require .type.TypeInfo!=0//DataTypeCode.UnusedType
		return true


	function MakeContainedObject (|message| ErrPlace)
		opt norefcounts
		|| c = .Contains
			.contains = c.MakeAsObject(self, ErrPlace)

	
	function NewWrapper (|scdecl!| CastTo, |scdecl|)
		opt norefcounts
		|| IsNormal = CastTo.isnormal
			|| it = .type.DataObject
				return it.ForContained
		|| dcl = SCDecl(TypeWrapper!)
		dcl.contains = castto.ForContained
		if IsNormal
			.type.DataObject = dcl
		return dcl
	
	
	function MakeAsObject (|SCDecl| Container, |Message| ErrPlace, |scdecl|)
		|| NormalContained = container.type.contained			#require
		if (.IsNormalObject)
			check (NormalContained.isnormalobject) (errplace, "This doesn't contain objects.")
			return self

		  elseif !NormalContained.isnormalobject
			return self // yeah not very precise, but good enough for now!
		
		check .CanWrap (ErrPlace, "Can't store this type as an object (in this version of speedie).")
		return .NewWrapper(self)
	
	
	function SCClass.GoUpTo (|int| d, |SCClass|)
		opt norefcounts
		real self
		while (self and .depth > d)
			self = .super
		return self
	

	function HighestArrayContainMatch (|SCDecl| Other, |SCDecl|)
		rz = .highestmatch(other)
		rz ?= self
	
	
	function HighestMatch (|SCDecl| Other, |SCDecl|)
		opt norefcounts
		require Other
		|| M = .type
		|| o = other.type

		require !(o == m)

		if (o.depth > m.depth)
			o = o.GoUpTo(m.depth)!
		  elseif (o.depth < m.depth)
			m = m.GoUpTo(o.depth)!

		while (o != m)
			|| o2 = o.super		#loop
			o = o2
			m = m.super			#require
		return o.typenormal


	function Message.ExpectClass (|SCDecl| slf, |SCClass| Cls, |bool|)
		return slf.expectmatch(cls.TypeNormal, 0, self, self) 
	

	syntax expect (|string?| Reason=nil)
		disabled ".Source can be nil sometimes"
	

	function SCDecl.ExpectFail  (|scdecl| o, |message?| errnode, |message?| backup=nil)
		|| fs = faststring()
		fs <~ "Type mismatch, expected '"
		.RenderTypeName(fs)
		fs <~ "' but found '"
		o.RenderTypeNameNicer(fs)
		fs <~ "'."
		ErrNode ?= backup
		error ( ErrNode, fs )


//ExpectMatch( DefaultDcl, kTypeCastTrue, default )		
	function ExpectMatchForDecl (|SCDecl| O, |Message?| exp, |Message|)
		opt norefcounts
		rz = .ExpectMatchSub(o, ktypecasttrue|||kTypeCastForSetRel, exp, nil)
		if !rz
			rz = exp
		
	function ExpectMatch (|SCDecl| O, |int| TypeCast, |Message?| exp, |Message?| ErrNode = nil, |Message|)
		opt norefcounts
		rz = .ExpectMatchSub(o, typecast, exp, errnode)
		if !rz
			rz = exp
	
	
	function ExpectMatchSub (|SCDecl| O, |int| TypeCast, |Message?| exp, |Message?| ErrNode = nil, |Message|)
		typecast |= exp.IntSmallness(O)
		
		|| Matched = .TypeMatch(O, TypeCast, exp)
		if (Matched == kCastedMatch or kLossyCastedMatch)
			return exp!.CastedParent

		if (Matched == kNoMatch)
			.ExpectFail(o, ErrNode, exp)
			.TypeMatch(O, TypeCast, exp)

	
	operator matches (|SCDecl!| O, |bool|)
		cpp_part MatchesDecl
		// should disable/deprecate this
		return .matchC(O)


	operator exact_isa (|scclass| v, |bool|)
		Return .IsNormal and (.type == v)

	operator matches (|SCClass| O, |bool|)
		if o and self
			return self matches O.TypeNormal
	
	
	function IsUintLike (|bool|)
		|| t = .type.typeinfo
		if .isnormal and t.isint
			return !t.IsSigned

		
	
	function MatchC (|SCDecl?| O, |bool|)
		Return .TypeMatch( o, kTypeCastTrue, nil )


	function ActualReplace (|scdecl| New, |scdecl!|)
		opt norefcounts
		
		.type = new.type
		.contains = new.contains
		
		|| p = .pointercount
		if !p
			return self

		if new.pointercount
			error (.source, errorreceiver.NonFatal + ": Not sure what to do about this?")
		  else
			|| last = self
			while --p > 0
				|| nl = last.copydecl
				last.internal = nl
				last = nl
			
			last.internal = new
		Return self
	
		
	function ContainedReplace (|SCDecl| contains, |bool| NeedsName,  |SCDecl|)
		opt NoRefCounts
		// handles   " ...  --> string "     (.iscontained)
		//    or     "[...] -->[string]"     (.contains.iscontained)
		
		if self Is UpgradeableContained
			if  (!needsname or !.name) and .SameForReplace(contains)
				return contains				// we are missing UpgradeableContained?
			
			|| SameType = contains.type == .type
				if .SameForReplace(contains) 
					return self
			
			|| C = .copydecl
			(C is UpgradeableContained) = !sameType
			return C.ActualReplace(contains)

		|| inside = .contains
		if inside  and  inside != contains  and  inside Is UpgradeableContained
			self = .copydecl
			.Contains = contains
		return self
		
	
	function SameForReplace (|SCDecl| c, |bool|)
		require (c is borrowed) == (self is borrowed) 
		require c.PointerCount == .PointerCount
		if .nildeclared != c.nildeclared
			return false
		return c.C_array == .C_array

//	function IsVeryNormal (|bool|)
//		return .IsNormal and !.Type.IsStruct
	
	function IsMemoryOnly (|bool|)
		if .pointercount
			return false
		return .iscarray or .Type.IsStruct
		
	function IsNormal (|bool|)
		return !.PointerCount and !.IsNil and !.IsCArray

	function IsMostlyNormal (|bool|)
		require !.IsNil and !.IsCArray
		if !.PointerCount
			return true
		if .Type.IsStruct
			return .PointerCount == 1

	function AlreadyContains (|bool|)
		opt norefcounts
		|| ty = .type.contained
			return .Contains.MiniMatch(ty)
		
		
	function WriteType (|int| minimal = 0, |bool| Optionals=true,  |Message!|)
		opt norefcounts
		|| simple = .WriteSimpleType(optionals)
		|| c = .Contains
		if !c or (minimal and .AlreadyContains)
			return simple
		
		rz = @rel.msg
		rz <~ simple
		rz <~ (@opp, "of")
		rz <~ c.writetype(minimal, optionals)
		

	function WriteSimpleType (|bool| optionals, |Message|)
		opt norefcounts
		rz = .WriteVerySimpleType
		if self is borrowed
			rz = rz.wrapwith(@arel, "--")
		if !optionals
			rz = rz.wrapwith(@brel, "!")
		  elseif .TypeSuffers and .nilstated
			if .StatedOptional
				rz = rz.wrapwith(@brel, "?")
			  elseif .StatedReal //and platform.isdebug
				rz = rz.wrapwith(@brel, "!")
			


	function WriteVerySimpleType (|Message|)
		rz = @Thg + .type.Name
		for (.pointercount|int|)
			rz = rz.wrapwith(@Brel, "&")

		if (.IsCArray)
			rz = rz.wrapwith(@acc)
			rz.msg(@arr) <~ .c_array


	function CreateSimpleTypeCast (|Message!| exp, |Message|)
		|| Curr = exp
		While (curr == @bra)
			Curr.obj = self
			curr = curr.first!

		using curr
		rz = @type.msg(":)")
		// (s) --> (s|bool|)
		
		exp.prev = rz
		
		rz <~ exp
		rz <~ .WriteType
		rz.obj = self


	function CantBeNilInCpp (|bool|)
		require !.pointercount
		return (.IsCArray) or (.type.IsStruct) or (.isnumeric > 1) 


	function CreateStructNil (|message| where, |Message!|)
		using where
		rz = .CreateStructNilsub()
		rz.obj = self
	
		
	function CreateStructNilSub (|Message!|)
		if .IsCArray
			return @arg.msg
		
		rz = @type + ":)"
		rz <~ @Arg
		rz <~ .WriteType
	

	function message.CreateNil (|message|)
		using (self)
		rz = «Thg "nil"»
		rz.Obj = TypeNil


	function CreateDefault (|message| errs, |bool|isfunc=true, |Message|)
		if (.CantBeNilInCpp) // in case we are storing objects... need to have non-corrupt data.
			if isfunc
				return .CreateStructNil(errs)
			return nil

		if (.PointerCount)
			if isfunc
				return errs.CreateNil
			return nil
	
		|| d = .type.Defawlt
			return d.copy(errs)


	function CanUseDefault (|bool|)
		if .IsNil
			debugger
			return false

		if (.Type.IsStruct and !.PointerCount)
			return (.IsBareStruct)
		return true


	function IsReffable (|bool| SetOnly, |bool|)
		opt norefcounts
		// we want to refcount all local vars...
		require !.PointerCount and (self is altered or body)
		require !(SetOnly and (self Is Borrowed))
		return .type.IsObject


	function HasStruct (|bool|)
		opt norefcounts
		return !.PointerCount and .type.isstruct
	
	
	function HasStructDestructor (|SCFunction|)
		if .HasStruct
			return .type.destructorfunc


	function ReallyContains (|scdecl|)
		opt norefcounts
		|| c = .contains ?? .type.contained
		if c and c.type != .type
			return c
	
	
	function ContainsMatch (|SCDecl| o, |int| TypeCast, |bool|)
		opt norefcounts
		if (TypeCast & kTypeCastIgnoreContained)
			return true

		|| oc = o.ReallyContains
		|| sc =  .ReallyContains
		if (oc == sc) or !(sc and oc) or !o.contains
			return true
		Return sc.TypeMatch( oc, 0 ).IsNormalMatch


	function MakeBorrowed (|bool| StayBorrowed=false, |SCDecl|)
		if self Is Borrowed
			Return self
		
		rz = .copydecl				// only used in extractdecl. Avoids modifying original.
		(rz Is Borrowed)
		if stayborrowed
			(rz is StayBorrowed)


	function MakeNewOptional (|SCDecl|)
		// this becomes declared optional...
		// the default state is "either" (undeclared)
		return .MakeExistance(nilstate.optional, .type.typeOptional)

	
	function MakeContainedOptional (|scdecl|)
		if .nilstated
			return self
		return .MakeExistance(nilstate.optional, .type.TypeOptional)
	
	
	function MakeNewReal (|SCDecl|)
		if .PointerCount
			.NilDeclared = NilState.real
			return self
		return .makereal

	
	function MakeReal (|scdecl|)
		return .MakeExistance(nilstate.real,  .type.TypeReal)
	
	
	function MakeNewNil (|SCDecl|)
		if .PointerCount
			.NilDeclared = NilState.actuallynil
			return self
		return .MakeExistance(NilState.actuallynil,  nil)


	function BecomeReal
		if .NilDeclared isnt Stated
			.NilDeclared = NilState.Real


	function MakeReference (|SCDecl|)
		opt norefcounts
		// if .refcount > 1 // could just alter the original, if it were unshared?
		|| ref = .copydecl
		ref.BecomeReal
		(ref is reference)
		return ref


	function MakeExistance (|nilstate| type, |scdecl| Default=nil, |scdecl|)
		opt norefcounts
		if .NilDeclared == type
			Return self
		
		if (Default and self == .type.typenormal)
			return Default
		
		// About the exportposition for ASM globals:
		is ExistanceAltered // just for debugging the compiler.
		
		rz = .CopyDecl
		rz.au.info |= .au.info & scdeclinfo.VarType
		rz.NilDeclared = type

		
	
	function CanNilCheck (|bool|)
		opt norefcounts
		require self
		if .PointerCount
			return true
		if .IsCArray
			return false
		return (.type is HasNilChecker)
	

	function NilConstructor (|nilstate| type,  |scdecl|)
		opt norefcounts
		if Type == 0
			return self
		rz = .CopyDecl
		rz.NilDeclared = type

	function StatedReal (|nilstate|)
		return .NilDeclared.statedreal

	function StatedOptional (|nilstate|)
		if .NilDeclared&nilstate.optional == NilState.optional
			return NilState.optional

	function RefineDecl (|message| list, |SCDecl|)
		opt norefcounts
		rz = .copydecl
		for p in list
			if p.expect(@thg)
				|| n = p.name
				if (n ~= "tag")
					(rz is borrowed) = options.ProjectIsLibrary
				  elseif (n ~= "api")
					(rz is api)
				  elseif (n ~= "const")
					(rz is const)
					"is this ever used??"
				  else
					error p

	function MakeAccess0 (|message|)
		opt norefcounts
		|| l = @thg + .name
		return l.MakeAccess0
	
	function message.MakeAccess0 (|message|)
		opt norefcounts
		rz = .wrapwith(@acc)
		rz.msg(@arr) <~ 0
	
	
	function ExpectRelMatch (|SCDecl| O,  |Message| exp,  |Message?| side,  |Message?| ErrNode = nil, |bool|)
		opt norefcounts
		// Just like ExpectMatch, except always does type-casting.
		
		|| Cast = kTypeCastTrue
		if !side
			cast |= kTypeCastBothWays
		  else
			cast |= kTypeCastForRelSet
			if  self isnt local  or  o isnt local
				cast |= kTypeCastSetToMemory // float conversion...
		
		rz = .ExpectMatchSub( O, Cast, exp, ErrNode )
		
		if side
			if (self is local)
				.MarkAsAltered
			if (self is self) and (scfunction.currfunc is Destructor) 
				error (exp, "You can’t modify 'self' in a constructor or destructor.")


	function WriteNilRel (|Message|)
		return NeweqRel( .Name, "nil" )

	
	function WriteNilDecl (|Message|)
		opt norefcounts
		|| l = .WriteNilRel
		|| dcl = «decl
			.WriteType
			l
		»
		dcl.obj = self
		l.obj = self
		l.First!.Obj = self
		Return dcl


	function WriteTypeCast (|Message| msg, |Message|)
		|| TheType = «type ":)"
			msg
			.WriteType
		»

		TheType.Obj = self // Does InitRootDecl actually want this?
		return TheType


	render
		if self
			fs <~ "|"
			.rendertypename(fs)
			fs <~ "|"
			fs <~ " "
			fs <~ .name


	render RenderTypeNameNicer
		opt norefcounts
		return .DownGrade.RenderTypeName(fs_in)


	render RenderTypeName 
		if !self
			fs <~ "(nil!)"
		  else 
			if self is reference
				fs <~ "$"
			|| c = .Contains
				if c.minimatch(.type.contained, 0)
					c = nil
				  else
					fs <~ "("
			if (.IsNil) 
				fs <~ "nil"
			  elseif .IsCArray
				.internal!.rendertypename(fs)
				fs <~ '['
				fs <~ .c_Array
				fs <~ ']'
			  else 
				fs <~ ( '&', .PointerCount )
				if .pointercount
					|scdecl--| i = .internal!
					if i.internal
						fs <~ '('
					i.rendertypename(fs)
					if i.internal
						fs <~ ')'
				  else
					fs <~ .Type.Name
			
			if c 
				fs <~ " of "
				fs <~ c.type.name
				fs <~ ")"
			if self is borrowed
				fs <~ "--"
			if .TypeSuffers and .nilstated
				if .StatedOptional
					fs <~ "?"
				  elseif .StatedReal
					fs <~ "!"


	function SizeOfQuery (|int|)
		opt norefcounts
		|| n = Platform.PointerBytes
		if !.PointerCount
			n = .type.Size
		if .IsCArray
			n *= .CArrayTotal
		return N


	function CArrayTotal (|int|)
		opt norefcounts
		rz = 1
		while (|| m = .c_Array)
			rz *= m
			self = .internal #loop
			

	function CArrayInner (|scdecl|)
		opt norefcounts
		while (.iscarray)
			self = .internal
		return self
			

	function CArraySize (|int|)
		opt norefcounts
		description "The size of the variable itself, in memory. Default carray size is 1. Objects use the pointer-size."
		|| mul = 1
		if .iscarray
			mul = .CArrayTotal
		|| T = .type
		if T.IsObject or .PointerCount// or t.FuncProto
			return platform.PointerBytes * mul
		return T.size * mul


	function TypeInfo (|DataTypeCode|)
		opt norefcounts
		if .pointercount					// what about objects?
			return datatypecode._voidptr
		if .iscarray
			return .internal!.typeinfo
		return .Type.typeinfo				// perhaps this is already set correctly.
	
	
	function GlobInfo (|DataTypeCode|)
		opt norefcounts
		if .pointercount
			return datatypecode._voidptr
		return .Type.typeinfo
		
		
	function Alignment (|bool| PutStructsAfter=false, |int|)
		opt norefcounts
		if .IsObject or .PointerCount
			return platform.pointerbytes
		if .IsCarray
			return .internal!.Alignment
		|| T = .type
		if T.isstruct
			if PutStructsAfter
				return 32
			|| al = t.Alignment
				return al
			return 32 // sigh // fallback
		// CalculateSizeRaw sets function prototype sizes to platform.pointerbytes
		return t.size
	

	function RegType (|datatypecode|)
		opt norefcounts
		if !self
			return 0//datatypecode._void
		
		|| Ty = .type
		if ty.IsObject
			return datatypecode.cstring
		rz = ty.typeinfo
		if .pointercount
			rz = datatypecode._voidptr // what about carrays?
		  else
			DEBUG_REQUIRE !(.c_array ||| ty.IsStruct)
		
		
	function PointerIncrement (|int|)
		// only called on pointers
		if .pointercount > 1
			rz = Platform.PointerBytes
		  else
			rz = .type.size
		if .IsCArray
			// not true for carrays of carrays.
			rz *= .CArrayTotal
}


function IsPointerMath (|SCDecl| L, |SCDecl| R, |SCOperator| opp, |Message| exp, |SCDecl|)
	require (opp isnt custom)
	if (opp is addition)  
		if (L.PointerCount) and (R.IsNumeric == 1) // ptr - a,  ptr + a
			return L
		if (R.PointerCount) and (L.IsNumeric == 1) // a - ptr,  a + ptr
			expect (opp isnt MakesSigned) (exp, "Can't subtract a pointer from a number.")
			return R
		if (R.PointerCount) and (L.PointerCount) and (opp == scoperator.subtract)
			L.ExpectMatch(R, 0, exp)
			return TypeInt!.TypeNormal


function scdecl.CheckMath (|message| exp, |scdecl|)
	if .PointerCount == 1
		check (.type != TypeVoid_) (exp, "Can't do math on pointer-to-nil")
	return self


function Message.RenderType (|string|)
	|| D = .obj|object--|
	if (D isa SCDecl)
		return D.WriteSimpleType(true).Render
	if (D isa scmodule)
		return d.name
	return .Render


function scdecl.TypeIsReached (|bool|)
	return .type.MyReacher


function int64.MsgForConst (|bool| AllowShift, |message|)
	opt norefcounts
	if !AllowShift or (self <= 1) or !.IsPow2
		return .msg

	rz = @rel.msg
	rz <~ newdeclnum(nil, 1)
	|| op = rz.msg(@opp, "<<")
	op.obj = SCOperator.lookup(op) 
	rz <~ NewDeclNum(nil, .Log2)


function GlobalsSorter (SorterComparer of scdecl)
	opt norefcounts
	rz = b.carraysize - .carraysize
	if !rz
		rz = (b.type == typejbclass) - (.type == typejbclass)
	if !rz
		rz = b.ModuleNum - .ModuleNum // keep commonly accessed stuff together
	if !rz
		rz = b.name.SyntaxCompare(.name, true)
	

function scdecl.Complexity (|int|)
	opt norefcounts
	|| T = .type
	rz += T.IsObject
	rz += (T.baseType is funcproto) << 1
	rz += T.IsStruct << 2
	rz += .IsCarray << 3

function SimplestFirst (SorterComparer of scdecl)
	|| BComp = b.Complexity - .Complexity
		return BComp
	return b.carraysize - .carraysize

function SmallestAlignedFirst (SorterComparer of scdecl)
	return b.Alignment(true) - .alignment(True)


function array.CArraySize (|[scdecl]| self, |int| size, |int|)
	opt norefcounts
	for p in self
		size = size align p.alignment
		size += p.carraysize
	return size

|scdecl| argh
