
// Auto-generated file, by speedie.

/* jeebox-licence:
    By Theodore H. Smith, 2019, theo@jeebox.org
	
    This software is provided 'as-is', without any warranty.
    In no event will the author be held liable for any damages
    arising from the use of this software.

    Permission is granted to anyone to use this software for any purpose,
    including commercially, and to alter it and redistribute it
    freely, subject to the following restrictions:

    1. The origin of this software must not be misrepresented; you must not
        claim that you wrote the original software.
    2. If you use this software or portions of this software in a product, you
        are required to acknowledge this in at least one of:
        About-window / launch-screen / help-files / read-me-file
    3. Altered source vershions must be plainly marked as such, and must not be
        misrepresented as being the original software.
    4. Any jeebox-licence note may not be removed/altered from any source distribution.
*/
#include "JB_Umbrella.hpp"
#include "JB.h"
#pragma GCC visibility push(hidden) // hidden

extern "C" {

extern JB_StringC* JB_LUB[2182];

extern Object_Behaviour JB_Object_FuncTable_;
void JB_InitClassList(SaverLoadClass fn);

int SC_ASMExamples__Init_() {
	{
	}
	;
	return 0;
}


JB_String* JB_App__AppName() {
	JB_String* _tmPf0 = JB_App__AppPath();
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_Str_Name(_tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_App__AppPath() {
	if (JB_Platform__OSX()) {
		JB_String* _tmPf0 = JB_App__OrigPath();
		JB_Incr(_tmPf0);
		JB_String* _tmPf1 = JB_Str_BackToApp(_tmPf0);
		JB_Incr(_tmPf1);
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return JB_App__OrigPath();
}

JB_String* JB_App__BuildConfig(JB_String* Name) {
	Message* _tmPf0 = JB_Msg_GetConf(JB__App__Conf, Name, false);
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_Msg_Value(_tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void JB_App__ConfigureSet(JB_String* Value) {
	JB_Error* Err = nil;
	JB_Incr(Err);
	JB_SetRef(JB__App__Conf, JB_Str_ParseWithError(Value, (&Err)));
	if (Err) {
		JB_String* _tmPf0 = JB_Err_Render(Err, nil);
		JB_Incr(_tmPf0);
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Err);
	if (!JB__App__Conf) {
		JB_SetRef(JB__App__Conf, JB_Msg_ConstructorEmpty(nil));
	}
}

void JB_App__Crash(JB_String* Reason) {
	if (JB_Str_Exists(Reason)) {
		JB_PrintLine(Reason);
	}
	JB_Rec__CrashLog(JB_Str_SyntaxCast(JB_Str_MakeC(JB_LUB[112])));
	((byte*)-1)[0] = 0;
	JB_PrintLine(JB_LUB[113]);
	JB_App__Quit(nil, -1);
}

ErrorInt JB_App__CWDSet(JB_String* Value) {
	JB_String* _tmPf0 = JB_Str_ResolvePath(Value, false);
	JB_Incr(_tmPf0);
	ErrorInt _tmPf1 = JB_File__chdir(_tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

JB_String* JB_App__FileName() {
	JB_String* _tmPf0 = JB_App__OrigPath();
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_Str_Name(_tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_App__Init_() {
	{
		JB_SetRef(JB__App_Usage, JB_LUB[0]);
		JB_SetRef(JB__App__Path, JB_LUB[0]);
	}
	;
	return 0;
}

bool JB_App__IsMainThread() {
	return (!JB_LibIsThreaded());
}

bool JB_App__No(JB_String* Name) {
	return (!JB_App__Yes(Name));
}

SpdProcess* JB_App__Parent(PicoComms* Comms, bool Expect) {
	if (JB__Proc_CheckedParent) {
		return JB__Proc__Parent;
	}
	JB__Proc_CheckedParent = true;
	if (PicoHasParentSocket() and (!Comms)) {
		Comms = JB_Pico__New(JB_LUB[0], 0);
	}
	if (Comms) {
		if (!PicoCompleteExec(Comms)) {
			return nil;
		}
		SpdProcess* P = JB_Proc_Constructor(nil, JB_LUB[0], nil, Comms, nil, kJB__ProcessMode_AutoPrintErrors);
		JB_SetRef(JB__Proc__Parent, P);
		return P;
	}
	if (Expect) {
		if (true) {
			JB_Str_Fail(JB_LUB[966]);
		}
	}
	return nil;
}

JB_String* JB_App__OrigPath() {
	//visible;
	JB_String* P = JB__App__Path;
	JB_Incr(P);
	if (JB_Str_Exists(P)) {
		JB_SafeDecr(P);
		return P;
	}
	Dictionary* _tmPf0 = JB_App__Env();
	JB_Incr(_tmPf0);
	JB_SetRef(P, ((JB_String*)JB_Dict_Value0(_tmPf0, JB_LUB[114])));
	JB_Decr(_tmPf0);
	if (JB_Str_Exists(P)) {
		JB_SetRef(JB__App__Path, P);
		JB_SafeDecr(P);
		return P;
	}
	JB_SetRef(P, JB_App__Path());
	if (JB_Str_Exists(P)) {
		JB_SetRef(JB__App__Path, P);
		JB_SafeDecr(P);
		return P;
	}
	JB_Decr(P);
	return JB_LUB[0];
}

Message* JB_App__Prefs() {
	return ({
		Message* _X = JB__App__Prefs;
		if (!_X) {
			_X = JB_config__Create(JB_App__PrefsPath());
			JB_SetRef(JB__App__Prefs, _X);
		}
		 _X;
	});
}

JB_String* JB_App__PrefsPath() {
	return JB_config__ConfigPath(JB_App__BuildConfig(JB_LUB[1068]));
}

void JB_App__PrefsSave() {
	{
		Message* _t = JB__App__Prefs;
		if (_t) {
			JB_config_Save(_t);
		}
	};
}

void JB_PrintStackTrace() {
	//visible;
	JB_String* _tmPf0 = JB_App__StackTrace(2, nil);
	JB_Incr(_tmPf0);
	JB_Print(_tmPf0);
	JB_Decr(_tmPf0);
}

ExitCode JB_App__Say(JB_String* S, bool Print) {
	if (Print) {
		JB_PrintLine(S);
	}
	Array* _tmPf0 = (JB_Array_Constructor0(nil));
	JB_Incr(_tmPf0);
	JB_Array_SyntaxAppend(_tmPf0, S);
	ExitCode _tmPf1 = JB_Str_Execute(JB_LUB[115], _tmPf0, nil, nil, kJB__PIDM_StdOutPassThru, 0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

JB_String* JB_App__StackTrace(int Skip, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	void* Arr[128] = {
	};
	int Size = (128);
	_cstring* Strs = JB_App__BackTrace((&Arr[0]), (&Size));
	{
		IntRange _LoopSrcf2 = JB_int_OperatorTo(Skip, Size - 1);
		int __Endf0 = _LoopSrcf2[1];
		int I = _LoopSrcf2[0];
		while (I < __Endf0) {
			JB_FS_AppendCString(Fs, Strs[I]);
			JB_FS_AppendByte(Fs, '\n');
			(++I);
		};
	}
	;
	JB_free(Strs);
	JB_String* _tmPf3 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf3);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

JB_String* JB_App__SyntaxAccess(JB_String* Name) {
	JB_String* Rz = JB_LUB[0];
	{
		Array* _LoopSrcf2 = JB_App__Args();
		int _if0 = 0;
		while (true) {
			JB_String* R = ((JB_String*)JB_Array_Value(_LoopSrcf2, _if0));
			if (R == nil) {
				break;
			}
			if (JB_Str_Equals(JB_Str_ArgName(R), Name, true)) {
				Rz = JB_Str_ArgValue(R);
				break;
			}
			(++_if0);
		};
	}
	;
	return Rz;
}

bool JB_App__Yes(JB_String* Name) {
	JB_String* _tmPf0 = JB_App__SyntaxAccess(Name);
	JB_Incr(_tmPf0);
	bool _tmPf1 = JB_Str_Yes(_tmPf0, nil);
	JB_Decr(_tmPf0);
	return _tmPf1;
}


int SC_AutoComplete__Init_() {
	{
		JB_SetRef(SC__AutoComplete_Owner, JB_Str_Dict(JB_LUB[523], '/'));
		JB_SetRef(SC__AutoComplete_function_names, JB_LUB[524]);
		JB_SetRef(SC__AutoComplete_Functions, JB_Str_Dict(SC__AutoComplete_function_names, '/'));
	}
	;
	return 0;
}

bool SC_AutoComplete__IsAFunc(JB_String* S) {
	return JB_FreeIfDead(JB_Dict_Value0(SC__AutoComplete_Functions, S)) != nil;
}


SortComparison SC_CodeSorter__LeafFunctionsSorter(SCFunction* Self, SCFunction* B) {
	int X = ((int)Self->LinkDepth) - ((int)B->LinkDepth);
	if (X < 0) {
		return ((SortComparison)1);
	}
	if (X == 0) {
		return ((SortComparison)(JB_Str_CompareStr(Self->ExportName, B->ExportName, false) <= -1));
	}
	return ((SortComparison)0);
}

void SC_CodeSorter__LeafsFirst() {
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			SC_Func_FindDepths(F);
			(++_if0);
		};
	}
	;
	JB_Array_Sort(SC__Comp_FuncList, ((FP_SorterComparer)(SC_CodeSorter__LeafFunctionsSorter)));
}


void SC_Comp__AddFunny(Message* Msg) {
	if (SC__Comp_HasFunny) {
		return;
	}
	SC__Comp_HasFunny = true;
	Message* _tmPf0 = JB_Msg_Msg(Msg, kJB_SyxTmp, JB_LUB[561]);
	JB_Incr(_tmPf0);
	JB_Msg_AppendString(_tmPf0, JB_LUB[562]);
	JB_Decr(_tmPf0);
}

SCDecl* SC_Comp__AddGlobalConst(JB_String* Name, SCClass* C, uint /*NilState*/ Dcl) {
	SCDecl* D = SC_Decl_Constructor(nil, C);
	(SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_Const, true));
	(SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_NumberConst, true));
	D->NilDeclared = Dcl;
	JB_SetRef(D->IsLookupOnly, JB_LUB[0]);
	(SC_Decl_NameSet(D, Name));
	JB_SetRef(D->Default, (JB_Syx_Msg(kJB_SyxThg, Name)));
	SC_Base_TryAdd(SC__Comp_program, nil, D, Name);
	return D;
}

void SC_Comp__AddGlobalConstFloat(JB_String* Name, SCClass* C, JB_String* Value) {
	SCDecl* D = SC_Comp__AddGlobalConst(Name, C, kSC__NilState_Real);
	JB_Incr(D);
	JB_SetRef(D->IsLookupOnly, JB_Syx_OperatorPlus(kJB_SyxNum, Value));
	(SC_Decl_NumberConstSet(D, JB_dbl_AsInt(JB_Str_Float(Value))));
	JB_Decr(D);
}

void SC_Comp__AddGlobalConstNum(JB_String* Name, SCClass* C, int64 Value) {
	SCDecl* D = SC_Comp__AddGlobalConst(Name, C, kSC__NilState_Real);
	JB_Incr(D);
	JB_String* _tmPf0 = JB_int64_Render(Value, nil);
	JB_Incr(_tmPf0);
	JB_SetRef(D->IsLookupOnly, JB_Syx_OperatorPlus(kJB_SyxNum, _tmPf0));
	JB_Decr(_tmPf0);
	(SC_Decl_NumberConstSet(D, Value));
	JB_Decr(D);
}

bool SC_Comp__AddMain(int Mark) {
	Message* M = SC_Comp__MakeMainFunc();
	JB_Incr(M);
	SCDecl* B = ((SCDecl*)JB_Ternary(SC__Options_ProjectIsLibrary, SC_TrueBool, SC_FalseBool));
	JB_Incr(B);
	if (M and SC__Comp_ConfMsg) {
		Message* _tmPf0 = JB_Str_ParseJbin(((JB_LUB[2040])), 1073741824);
		JB_Incr(_tmPf0);
		(JB_Ring_FirstSet(M, _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_Decr(M);
	SC_Base_TryAdd(SC__Comp_program, nil, B, JB_LUB[2041]);
	JB_Decr(B);
	JB_StdErr->LowerErrorsTo = 0;
	return Mark == JB_StdErr->ErrorCount;
}

JB_String* SC_Comp__AddSCProj(JB_String* Path) {
	JB_String* _tmPf0 = JB_Str_Name(Path);
	JB_Incr(_tmPf0);
	if (JB_Str_ContainsByte(_tmPf0, '.')) {
		JB_Decr(_tmPf0);
		return Path;
	}
	JB_Decr(_tmPf0);
	return JB_Str_OperatorPlus(Path, JB_LUB[528]);
}

Dictionary* SC_Comp__Adj(Message* F) {
	Dictionary* D = SC__Comp_AdjDicts;
	if (JB_Msg_EqualsSyx(F, kJB_SyxThg, false)) {
		return ((Dictionary*)JB_Dict_Expect(D, F));
	}
	return ((Dictionary*)JB_Dict_Value0(D, JB_LUB[999]));
}

void SC_Comp__AppBuildLibs(JB_File* Inner) {
	{
		Message* _LoopSrcf2 = SC__Linkage_OSXFrameworks;
		Message* Lib = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Lib) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Lib));
			if (JB_Msg_Expect(Lib, kJB_SyxStr, nil)) {
				SC_Comp__AppBuildOneLib(Inner, Lib->Name);
			}
			Lib = _Nf1;
		};
		;
	};
}

void SC_Comp__AppBuildOneLib(JB_File* Inner, JB_String* Name) {
	JB_File* _tmPf0 = JB_File_Parent(Inner);
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_Str_OperatorPlus(JB_LUB[768], Name);
	JB_Incr(_tmPf1);
	JB_File* Ldest = JB_File_Sibling(_tmPf0, _tmPf1);
	JB_Incr(Ldest);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	if (JB_File_Exists(Ldest)) {
		JB_File_Delete(Ldest);
	}
	JB_String* _tmPf2 = JB_File__SpeedieDir();
	JB_Incr(_tmPf2);
	JB_String* Prefered = JB_Str_Child(_tmPf2, JB_LUB[769]);
	JB_Incr(Prefered);
	JB_Decr(_tmPf2);
	if (!SC_Comp__TryCopyLib(Ldest, Name, Prefered)) {
		SC_Comp__TryCopyLib(Ldest, Name, JB_LUB[770]);
	}
	JB_Decr(Ldest);
	JB_Decr(Prefered);
}

void SC_Comp__AppendCompilerTime(JB_String* S, int Durr) {
	SC_FS_AppendWidth(SC__Comp_TimerOutput, S, kSC__Comp_kTimeWidth);
	if (SC_Options__Color()) {
		JB_FS_AppendString(SC__Comp_TimerOutput, kJB__ErrorColors_good);
	}
	JB_FS_AppendDurr(SC__Comp_TimerOutput, Durr);
	if (SC_Options__Color()) {
		JB_FS_AppendString(SC__Comp_TimerOutput, kJB__ErrorColors_normal);
	}
	JB_FS_AppendByte(SC__Comp_TimerOutput, '\n');
}

void SC_Comp__AppleBuildApp(JB_File* Product, JB_File* Project) {
	JB_String* Dest = JB_File_LinkToGet(Product);
	JB_Incr(Dest);
	if ((((JB_String*)JB_Str_Exists(Dest)))) {
		JB_Object_FailStr(Dest, JB_LUB[1889]);
		JB_Decr(Dest);
		return;
	}
	JB_Decr(Dest);
	SC_Comp__Stage(JB_LUB[1890]);
	JB_String* Name = SC_Comp__IdealName();
	JB_Incr(Name);
	JB_String* Prefered_name = JB_Str_OperatorPlus(Name, JB_LUB[1891]);
	JB_Incr(Prefered_name);
	JB_File* Final_app = JB_File_Sibling(Product, Prefered_name);
	JB_Incr(Final_app);
	JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[1892], Prefered_name);
	JB_Incr(_tmPf0);
	JB_Decr(Prefered_name);
	JB_File* Copy_from = JB_File_Child(Project, _tmPf0);
	JB_Incr(Copy_from);
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_Str_OperatorPlus(JB_LUB[1893], Name);
	JB_Incr(_tmPf1);
	JB_Decr(Name);
	JB_File* Inner = JB_File_SyntaxAccess(Final_app, _tmPf1);
	JB_Incr(Inner);
	JB_Decr(_tmPf1);
	if (JB_File_Exists(Copy_from)) {
		JB_File_CopyAll(Copy_from, Final_app, false);
	}
	JB_Decr(Copy_from);
	if (JB_ErrorInt_SyntaxCast(JB_File_MoveTo(Product, Inner))) {
		JB_SetRef(SC__Options_exe_path, Inner);
		SC_Comp__AppBuildLibs(Inner);
		SC_Comp__CodeSign(Final_app);
		JB_SetRef(SC__Options_output_path, Final_app);
		JB_File_Touch(Final_app);
	}
	JB_Decr(Final_app);
	JB_Decr(Inner);
}

bool SC_Comp__Banned(JB_String* Name) {
	Dictionary* B = SC__Options_BannedClasses;
	if (B) {
		return ((bool)JB_Dict_ValueLower(B, Name));
	}
	return false;
}

JB_File* SC_Comp__BuildFolder() {
	JB_File* B = SC__Comp__BuildFolder;
	if (!JB_File_Exists(B)) {
		JB_Str_MakeDir(B);
	}
	return B;
}

void SC_Comp__Bundle() {
	if (!((!SC_Comp__IsTest()) and (!SC__Options_ExternalCompile))) {
		return;
	}
	if (!SC_SC_Targets__SyntaxAccess(JB_LUB[1172])) {
		return;
	}
	JB_File* Pd = SC_Comp__ProductFile();
	JB_Incr(Pd);
	JB_File* Pj = SC__Comp_BaseProjectPath;
	JB_Incr(Pj);
	if (Pj) {
		SC_Comp__AppleBuildApp(Pd, Pj);
	}
	JB_Decr(Pd);
	JB_Decr(Pj);
}

JB_File* SC_Comp__CanTryModes() {
	JB_File* Rz = nil;
	if (JB_App__Parent(nil, false)) {
		return nil;
	}
	if (!((!JB_Str_Exists(JB_App__SyntaxAccess(JB_LUB[1089]))) and (!JB_Str_Exists(JB_App__SyntaxAccess(JB_LUB[1090]))))) {
		return nil;
	}
	JB_String* P = ((JB_String*)JB_Array_Value(JB_App__Args(), 0));
	if (JB_Str_Exists(P) and (!JB_Str_Exists(JB_Str_ArgName(P)))) {
		Rz = JB_Str_AsFile(P);
	}
	return Rz;
}

void SC_Comp__CheckIsGoodLibrary() {
	if (SC__Options_ProjectIsLibrary) {
		if (!SC__Comp_API_Place) {
			JB_Str_Fail(JB_LUB[857]);
			return;
		}
	}
}

SortComparison SC_Comp__ClassSorter(SCClass* Self, SCClass* B) {
	return SC_Comp__ModulesSorter(Self->Modul, B->Modul);
}

void SC_Comp__ClearEnvs() {
	Array* Allowed = JB_Str_OperatorDivide(JB_LUB[563], ' ');
	JB_Incr(Allowed);
	{
		Dictionary* _LoopSrcf2 = JB_App__Env();
		JB_Incr(_LoopSrcf2);
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf2);
		JB_Incr(_navf0);
		JB_Decr(_LoopSrcf2);
		while (true) {
			JB_String* V = ((JB_String*)JB_DictionaryReader_NextValue(_navf0));
			JB_Incr(V);
			if (V == nil) {
				JB_Decr(V);
				break;
			}
			JB_Decr(V);
			JB_String* K = JB_Nav_Name(_navf0);
			JB_Incr(K);
			if (!JB_Ind_SyntaxCast(JB_Str_OpInList(K, Allowed))) {
				JB_StringC* _tmPf3 = JB_Str_CastZero(K);
				JB_Incr(_tmPf3);
				(JB_App__SetEnv(_tmPf3, nil));
				JB_Decr(_tmPf3);
			}
			JB_Decr(K);
		};
		JB_Decr(_navf0);
	}
	;
	JB_Decr(Allowed);
}

void SC_Comp__CodeSign(JB_File* Gui_exe) {
	Message* _tmPf0 = JB_App__Prefs();
	JB_Incr(_tmPf0);
	Message* Sign = JB_Msg_GetConf(_tmPf0, kJB_codesign_native, false);
	JB_Incr(Sign);
	if (Sign) {
		JB_String* _tmPf1 = JB_config_AsString(Sign);
		JB_Incr(_tmPf1);
		SC_File_CodeSign(Gui_exe, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else {
		JB_String* _tmPf3 = JB_File_Path(Gui_exe);
		JB_Incr(_tmPf3);
		JB_String* _tmPf2 = JB_Str_OperatorPlus(JB_LUB[1864], _tmPf3);
		JB_Incr(_tmPf2);
		JB_Decr(_tmPf3);
		JB_Rec__NewWarning(nil, _tmPf2, nil);
		JB_Decr(_tmPf2);
	}
	JB_Decr(Sign);
	JB_Decr(_tmPf0);
}

void SC_Comp__CollectConstants() {
	{
		Message* _LoopSrcf2 = SC__Comp_ConstantsList;
		Message* Ch = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			SCNode* B = ((SCNode*)JB_Object_As(Ch->Obj, &SCNodeData));
			if (B) {
				SC_Base_CollectOneConstants(B, Ch);
			}
			Ch = _Nf1;
		};
		;
	};
}

bool SC_Comp__CollectIsaTests(Message* S) {
	S = SC_Msg_UnBra(S);
	if (JB_Msg_EqualsSyx(S, kJB_SyxRel, false)) {
		Message* L = ((Message*)JB_Ring_First(S));
		Message* Op = ((Message*)JB_Ring_NextSib(L));
		if (!(L and Op)) {
			JB_Msg_Fail(S, JB_LUB[742]);
			return nil;
		}
		if (JB_Msg_SyntaxEquals(Op, JB_LUB[267], false)) {
			Message* R2 = ((Message*)JB_Ring_Last(S));
			bool A2 = SC_Comp__CollectIsaTests(L);
			bool B2 = SC_Comp__CollectIsaTests(R2);
			return A2 or B2;
		}
		return ((!JB_Msg_SyntaxEquals(Op, JB_LUB[251], false)));
	}
	if (!JB_Msg_EqualsSyx(S, kJB_SyxFunc, false)) {
		return true;
	}
	Message* List = ((Message*)JB_Ring_Last(S));
	SCFunction* F = SC_Msg_AsFunc(List);
	if (!((JB_Object_Isa(F, &SCFunctionData)) and (SC_Func_SyntaxIs(F, kSC__FunctionType_TypeTest)))) {
		return true;
	}
	Message* L1 = ((Message*)JB_Ring_First(List));
	if (L1) {
		Message* R1 = ((Message*)JB_Ring_NextSib(L1));
		if (R1) {
			SCClass* Cls = SC_Msg_ObjCls(R1);
			if (Cls) {
				if (F == SC__Comp_fnIsa) {
					if (!SC_Class_SyntaxIs(Cls, kSC__ClassInfo_HasSubClass)) {
						JB_SetRef(List->Obj, SC__Comp_fnFastIsa);
					}
				}
				if (JB_Msg_EqualsSyx(L1, kJB_SyxThg, false)) {
					SC_IsaTester__SyntaxAppend(S);
					return true;
				}
			}
		}
	}
	return false;
}

bool SC_Comp__CompileAll() {
	if (!SC_Comp__Stage(JB_LUB[2145])) {
		return nil;
	}
	SC_Comp__InitCompiler();
	SC_Comp__ImportAll();
	SC_Rec_ReturnErrors(SC_ErrorDelayer, JB_StdErr);
	if (!SC__Comp_InitedOK) {
		return nil;
	}
	SC_Comp__CheckIsGoodLibrary();
	if (SC_Comp__Stage(JB_LUB[2146])) {
		SC_Comp__DeadStrip();
	}
	if (SC_Comp__Stage(JB_LUB[2147])) {
		SC_Comp__Timer(JB_LUB[2147]);
		SC_nil__LaunchMothership();
	}
	if (!SC_Comp__Stage(JB_LUB[2148])) {
		return nil;
	}
	SC_Comp__Timer(JB_LUB[2148]);
	SC_Comp__DoRefAnalysis();
	if (!SC_Comp__Stage(JB_LUB[2149])) {
		return nil;
	}
	SC_Crkt__CorrectConsts();
	if (SC__Comp_InPerry or SC__Options_ModePack) {
		SC_Comp__Timer(JB_LUB[2150]);
		SC_PackMaker__MakePack();
	}
	if (!SC__Comp_InPerry) {
		if (SC__Options_ModeCpp) {
			SC_Comp__Timer(JB_LUB[2151]);
			SC_Cpp__ExportAllSource();
		}
		SC_Imp__ExportShaders();
	}
	if (!SC_Comp__Stage(JB_LUB[2152])) {
		return nil;
	}
	SC_Comp__TimerSub(JB_LUB[2153], SC__Comp_stParseTimeTotal);
	SC_Comp__Timer(JB_LUB[0]);
	return JB_Rec_OK(JB_StdErr);
}

void SC_Comp__CompileTime() {
	if ((!JB_Str_Exists(SC__Options_output_path)) and SC__Options_UseScriptLoc) {
		JB_FreeIfDead(SC_Comp__ScriptLoc(SC__Comp_OriginalInputPath));
	}
	if (!SC__Options_Scripting) {
		if (SC__Options_SelfReplacement) {
			SC_Comp__FileSanityTests();
		}
		SC_Comp__VariousSelfTests();
		({
			JB_Flow__DisabledIncr(1);
			(SC_Sav__TestSaver());
			JB_Flow__DisabledIncr(-1);
			 0;
		});
	}
	JB_Duration Elapsed = ({
		Date Starttime = JB_Date__Now();
		(SC_Comp__CompileAll());
		 (JB_Date_Ago(Starttime));
	});
	SC_Comp__PrintCompileTime(Elapsed);
	if (JB_Rec_OK(JB_StdErr)) {
		SC_Ext__ExportAndInstall(Elapsed);
		if ((!SC__Options_Scripting) and JB_Rec_OK(JB_StdErr)) {
			SC_Crkt__CorrectStrings();
		}
	}
}

bool SC_Comp__ConfBool(JB_String* Name, bool Default) {
	Message* _tmPf0 = JB_Msg_GetConf(SC__Comp_ConfMsg, Name, false);
	JB_Incr(_tmPf0);
	bool _tmPf1 = JB_Msg_Yes(_tmPf0, Default);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

void SC_Comp__CreateDisambiguation() {
	JB_SetRef(SC__Comp_DisamClasses, SC_Mod__NewContainer(JB_LUB[1351]));
	JB_SetRef(SC__Comp_DisamModules, SC_Mod__NewContainer(JB_LUB[1352]));
}

SCFunction* SC_Comp__CreateFuncFromSource(JB_String* Src) {
	SCFunction* Rz = nil;
	JB_Incr(Rz);
	Message* Msg = SC_Str_ParseClean(Src);
	JB_Incr(Msg);
	if (Msg) {
		JB_SetRef(Rz, ((SCFunction*)SC_Func__NewFunc(Msg, nil, Msg)));
		if (Rz) {
			(SC_SCObject_IsVisibleSet(Rz, false));
		}
	}
	JB_Decr(Msg);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Comp__CreateRoot() {
	SCModule* M = SC__Comp_InternalFile->Proj->Mod;
	JB_Incr(M);
	JB_SetRef(SC__Comp_program, M);
	JB_SetRef(M->ExportName, JB_LUB[6]);
	JB_SetRef(M->Name, JB_LUB[7]);
	M->Parent = nil;
	JB_Decr(M);
}

void SC_Comp__DeadStrip() {
	{
		SCFunction* _t = SC__Comp_MainFunc;
		if (_t) {
			SC_Func_ReachedDetect(_t);
		}
	}
	;
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			SC_Func_ReachedDetect(F);
			(++_if0);
		};
	}
	;
	if (SC__Options_MakeInterpreter) {
		{
			Array* _LoopSrcf5 = SC__Comp_ClassList;
			int _if3 = 0;
			while (true) {
				SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf5, _if3));
				if (C == nil) {
					break;
				}
				SC_Class_Reach(C, SC__Comp_Interpreter, nil);
				(++_if3);
			};
		};
	}
	{
		Array* _LoopSrcf8 = SC__Comp_ClassList;
		int _if6 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf8, _if6));
			if (C == nil) {
				break;
			}
			if (C->MyReacher) {
				SC_Class_ReachBehaviours(C);
			}
			(++_if6);
		};
	}
	;
	SC_CodeSorter__LeafsFirst();
}

void SC_Comp__DoRefAnalysis() {
	Array* List = JB_Array_Constructor0(nil);
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			if (SC_Func_IsARealSpdFunc(F)) {
				JB_Array_Clear(List);
				SC_Func_AnalyseRefs(F, List);
			}
			(++_if0);
		};
	}
	;
	(SC_Func__CurrFuncSet(nil));
}

void SC_Comp__DoSavers(int Stage) {
	{
		int _if0 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(SC__Comp_ClassList, _if0));
			if (C == nil) {
				break;
			}
			if (SC_Class_IsSaveableObject(C) or SC_Class_IsSaveableStruct(C)) {
				SCFunction* First = SC_Class_DoSaver(C, JB_LUB[1816], Stage);
				SCFunction* Second = SC_Class_DoSaver(C, JB_LUB[1817], Stage);
				if (((bool)First) != ((bool)Second)) {
					if (!First) {
						First = Second;
					}
					if (true) {
						JB_Msg_Fail(First->Source, JB_LUB[1818]);
					}
				}
			}
			(++_if0);
		};
	};
}

bool SC_Comp__EnterCompile() {
	if (!SC_Comp__TryVariousStartModes()) {
		if (SC_FB__ParseArgs()) {
			if (!SC_AC__EnterAutoComplete()) {
				return true;
			}
		}
	}
	return false;
}

JB_String* SC_Comp__exe() {
	JB_String* _tmP0 = SC__Options_exe_path;
	if (!JB_Str_Exists(_tmP0)) {
		_tmP0 = SC__Options_output_path;
	}
	return _tmP0;
}

void SC_Comp__FileSanityTests() {
	JB_File* A = JB_Str_AsFile(JB_LUB[1626]);
	JB_Incr(A);
	JB_File* B = JB_Str_AsFile(JB_LUB[1627]);
	JB_Incr(B);
	JB_String* _tmPf1 = JB_File_Path(A);
	JB_Incr(_tmPf1);
	JB_String* C = JB_Str_Child(_tmPf1, JB_LUB[1628]);
	JB_Incr(C);
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_File_Path(B);
	JB_Incr(_tmPf2);
	JB_String* D = JB_Str_Child(_tmPf2, JB_LUB[1628]);
	JB_Incr(D);
	{
		int I = 0;
		while (I < 3) {
			if (JB_Rec_OK(JB_StdErr)) {
				SC_Comp__FileTestsSub(A, B, C, D);
			}
			(++I);
		};
		JB_Decr(_tmPf2);
	}
	;
	JB_Decr(C);
	JB_Decr(D);
	JB_File_DeleteAll(A, false);
	JB_Decr(A);
	JB_File_DeleteAll(B, false);
	JB_Decr(B);
}

void SC_Comp__FileTestsSub(JB_File* Dest, JB_File* Src, JB_String* A, JB_String* B) {
	JB_File_DeleteAll(Dest, false);
	JB_File_DeleteAll(Src, false);
	JB_String* Q = JB_LUB[1585];
	JB_Incr(Q);
	if (!((!JB_File_Exists(Dest)) and (!JB_File_Exists(Src)))) {
		JB_Str_Fail(Q);
		JB_Decr(Q);
		return;
	}
	JB_File_LinkToSet(Src, Dest);
	JB_Str_SyntaxAppend(A, Q);
	JB_File* _tmPf0 = JB_Str_AsFile(B);
	JB_Incr(_tmPf0);
	JB_String* ReadBack = JB_File_ReadAll(_tmPf0, 134217728, true);
	JB_Incr(ReadBack);
	JB_Decr(_tmPf0);
	if ((!JB_Str_Equals(ReadBack, Q, false))) {
		JB_String* _tmPf1 = JB_Str_OperatorPlus(JB_LUB[1586], ReadBack);
		JB_Incr(_tmPf1);
		JB_Str_Fail(_tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(Q);
	JB_Decr(ReadBack);
}

Macro* SC_Comp__FindAdj(Message* Exp, Array* Prms) {
	Message* F = JB_Msg_NeedFirst(Exp);
	if (!F) {
		return nil;
	}
	Dictionary* D = SC_Comp__Adj(F);
	if (!D) {
		return nil;
	}
	Message* Name = JB_Msg_NeedSyxInt(Exp, kJB_SyxThg, 1);
	if (!Name) {
		return nil;
	}
	JB_SetRef(Name->Name, JB_Str_LowerCase(Name->Name));
	if ((Prms != nil) and ((!JB_Msg_EqualsSyx(F, kJB_SyxThg, false)))) {
		JB_Array_SyntaxAppend(Prms, F);
	}
	return ((Macro*)JB_Dict_Expect(D, Name));
}

SCDecl* SC_Comp__FindClassType(Message* N) {
	SCModule* M = SC__Mod_Curr;
	if (!M) {
		M = SC__Comp_program;
	}
	SCClass* C = SC_Base_FindClassMsg(M, N, kSC__SCNodeFindMode_WantAType);
	if (C) {
		return C->TypeNormal;
	}
	return nil;
}

SCFunction* SC_Comp__FindFunction(JB_String* Name) {
	return SC_Base_FindFunction(SC__Comp_program, Name);
}

SCModule* SC_Comp__FindModuleMsg(Message* Where, SCNodeFindMode Mode) {
	return SC_Base_FindModuleMsg(SC__Comp_program, Where, Mode);
}

SCNode* SC_Comp__FindModuleOrClass(Message* Mod, bool Retry) {
	SCNode* Rz = nil;
	if ((JB_Msg_EqualsSyx(Mod, kJB_SyxName, false)) and (JB_Msg_SyntaxEquals(Mod, JB_LUB[7], false))) {
		return SC__Comp_program;
	}
	SCModule* Module = SC_Comp__FindModuleMsg(Mod, kSC__SCNodeFindMode_NoErrors);
	if (!Module) {
		return nil;
	}
	if ((JB_Msg_EqualsSyx(Mod, kJB_SyxThg, false))) {
		Rz = Module->Cls;
		if (!(Rz or Retry)) {
			return nil;
		}
	}
	if (!Rz) {
		Rz = Module;
	}
	return Rz;
}

JB_File* SC_Comp__FindProject(JB_String* Path) {
	JB_File* P = JB_File_Parent(SC__Comp_BaseProjectPath);
	JB_Incr(P);
	JB_File* B = SC_Comp__FindProjectSub(P, Path);
	JB_Incr(B);
	JB_Decr(P);
	if (B) {
		JB_SafeDecr(B);
		return B;
	}
	JB_Decr(B);
	JB_String* _tmPf0 = SC_Comp__Projects();
	JB_Incr(_tmPf0);
	JB_File* A = SC_Comp__FindProjectSub(_tmPf0, Path);
	JB_Incr(A);
	JB_Decr(_tmPf0);
	if (A) {
		JB_SafeDecr(A);
		return A;
	}
	JB_Decr(A);
	return nil;
}

JB_File* SC_Comp__FindProjectSub(JB_String* Base, JB_String* Path) {
	JB_File* Rz = nil;
	JB_Incr(Rz);
	if (JB_Str_First(Path) == '/') {
		JB_Decr(Rz);
		return JB_Str_FileThatExists(Path, JB_LUB[1069]);
	}
	JB_String* First = Path;
	JB_Incr(First);
	Ind SlashPos = JB_Str_FindByte(Path, '/', 0, JB_int__Max());
	if (JB_Ind_SyntaxCast(SlashPos)) {
		JB_SetRef(First, JB_Str_Range(Path, 0, SlashPos));
	}
	JB_SetRef(First, SC_Comp__AddSCProj(First));
	if (JB_Ind_SyntaxCast(SlashPos)) {
		JB_String* _tmPf0 = JB_Str_Range(Path, (SlashPos), JB_int__Max());
		JB_Incr(_tmPf0);
		JB_SetRef(First, JB_Str_OperatorPlus(First, _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_SetRef(Rz, JB_Str_ChildFile(Base, First));
	JB_Decr(First);
	if (!JB_File_Exists(Rz)) {
		JB_SetRef(Rz, nil);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* SC_Comp__FindProjNoSuffix(JB_String* Path) {
	JB_String* Spd = JB_Str_OperatorPlus(Path, JB_LUB[529]);
	JB_Incr(Spd);
	if (JB_Str_FileExists(Spd)) {
		JB_SafeDecr(Spd);
		return Spd;
	}
	JB_Decr(Spd);
	return JB_Str_OperatorPlus(Path, JB_LUB[528]);
}

JB_File* SC_Comp__GeneratedCppsFolder() {
	if (!SC__Options_ExternalCompile) {
		return SC__Comp_TempFolder;
	}
	if (SC__Options_SelfReplacement) {
		return SC_Comp__BuildFolder();
	}
	return JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, JB_LUB[1091]);
}

SCDecl* SC_Comp__GetTypeVoid() {
	SCDecl* Rz = nil;
	Rz = SC_TypeVoid;
	if (Rz) {
		return Rz;
	}
	Message* Msg = JB_Str_ParseJbin(((JB_LUB[1384])), 1073741824);
	SC_Base_CollectOne(SC__Comp_program, Msg, false);
	SCClass* Vc = SC_Comp__FindClassName(JB_LUB[406], 0);
	SC_TypeVoid_ = Vc;
	if (!Vc) {
		JB_App__Quit(JB_LUB[1385], -1);
		return nil;
	}
	Rz = Vc->TypeNormal;
	SC_TypeVoid = Rz;
	Vc->LinkedFrom = JB_int__Max();
	SC_TypeVoidPtr = SC_Decl_GetAddress(Rz, kSC__DeclMode_Always);
	return Rz;
}

JB_String* SC_Comp__IdealName() {
	if (JB_Str_Exists(SC__Options_output_path)) {
		return JB_Str_TrimExtAndPath(SC__Options_output_path, true);
	}
	Message* S = JB_Msg_GetConf(SC__Comp_ConfMsg, JB_LUB[658], false);
	JB_Incr(S);
	if (S) {
		JB_String* _tmPf2 = S->Name;
		JB_Incr(_tmPf2);
		JB_Decr(S);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_String* _tmPf0 = SC_Ext__ProductBaseName();
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_Str_TrimExtAndPath(_tmPf0, true);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_Decr(S);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Comp__ImportAll() {
	SC_Comp__Timer(JB_LUB[2116]);
	if (!SC_Comp__Stage(JB_LUB[2117])) {
		return;
	}
	SC_Comp__ImportLibs();
	SC_Comp__ImportProj();
	JB_Array_Sort(SC__Imp_AllFiles, ((FP_SorterComparer)((&SC_Imp__Sorter))));
	SC_Comp__PrepareAST();
	if (SC__Options_SelfReplacement) {
		if (!SC_VM_Builder__MakeTheVM()) {
			return;
		}
	}
	if (!SC_Comp__Stage(JB_LUB[2118])) {
		return;
	}
	SC_Comp__Timer(JB_LUB[2118]);
	{
		Array* _LoopSrcf2 = SC__Imp_AllFiles;
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			SCFile* L = ((SCFile*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(L);
			if (L == nil) {
				JB_Decr(L);
				break;
			}
			SC_Imp_Use(L->Proj);
			SC_Base_ImportFile(SC__Comp_program, L);
			JB_Decr(L);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	SC_Comp__Stage(JB_LUB[2119]);
	int Mark = SC_Comp__InitBasicStuff();
	if (!(SC_Comp__AddMain(Mark) and SC__Comp_InitedOK)) {
		return;
	}
	JB__Tk_Using.Flags = kJB__MsgParseFlags_Inserted;
	SC_Imp__NoProj();
	SC_SCTasks__CollectAll();
	{
		Array* _LoopSrcf5 = SC__Comp_ClassList;
		JB_Incr(_LoopSrcf5);
		int _if3 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf5, _if3));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_TryAddToProject(C);
			JB_Decr(C);
			(++_if3);
		};
		JB_Decr(_LoopSrcf5);
	}
	;
	if (!SC_Comp__Stage(JB_LUB[2120])) {
		return;
	}
	{
		Message* _LoopSrcf8 = SC__Comp_ExtendList;
		JB_Incr(_LoopSrcf8);
		Message* L = ((Message*)JB_Ring_First(_LoopSrcf8));
		JB_Incr(L);
		while (L) {
			Message* _Nf7 = ((Message*)JB_Ring_NextSib(L));
			JB_Incr(_Nf7);
			JB_FreeIfDead(SC_Class__ProcessExtend(L, true, nil));
			JB_SetRef(L, _Nf7);
			JB_Decr(_Nf7);
		};
		JB_Decr(L);
		;
		JB_Decr(_LoopSrcf8);
	}
	;
	{
		Array* _LoopSrcf11 = SC__Comp_ExtendModuleList;
		JB_Incr(_LoopSrcf11);
		int _if9 = 0;
		while (true) {
			Message* L = ((Message*)JB_Array_Value(_LoopSrcf11, _if9));
			JB_Incr(L);
			if (L == nil) {
				JB_Decr(L);
				break;
			}
			JB_FreeIfDead(SC_Class__ProcessExtend(L, false, nil));
			JB_Decr(L);
			(++_if9);
		};
		JB_Decr(_LoopSrcf11);
	}
	;
	if (!SC_Comp__InitBasicFuncs()) {
		return;
	}
	if (!SC_Comp__Stage(JB_LUB[2121])) {
		return;
	}
	{
		Array* _LoopSrcf14 = SC__Comp_ClassList;
		JB_Incr(_LoopSrcf14);
		int _if12 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf14, _if12));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_CreateBehaviour(C);
			JB_Decr(C);
			(++_if12);
		};
		JB_Decr(_LoopSrcf14);
	}
	;
	if (!SC_Comp__Stage(JB_LUB[2122])) {
		return;
	}
	SC_Comp__LoadSuperClasses();
	if (!SC_Comp__Stage(JB_LUB[2123])) {
		return;
	}
	if (!SC_Comp__SortModulesAndClasses()) {
		return;
	}
	if (!SC_Comp__Stage(JB_LUB[2124])) {
		return;
	}
	{
		Array* _LoopSrcf17 = SC__Comp_ClassList;
		JB_Incr(_LoopSrcf17);
		int _if15 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf17, _if15));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_DataTypePostLoad(C);
			JB_Decr(C);
			(++_if15);
		};
		JB_Decr(_LoopSrcf17);
	}
	;
	if (!SC_Comp__Stage(JB_LUB[2125])) {
		return;
	}
	{
		Array* _LoopSrcf20 = SC__Comp_ClassList;
		JB_Incr(_LoopSrcf20);
		int _if18 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf20, _if18));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_LoadSaver(C);
			JB_Decr(C);
			(++_if18);
		};
		JB_Decr(_LoopSrcf20);
	}
	;
	SC_Comp__DoSavers(0);
	{
		Array* _LoopSrcf23 = SC__Comp_ClassList;
		JB_Incr(_LoopSrcf23);
		int _if21 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf23, _if21));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_ProcessBehaviours(C);
			JB_Decr(C);
			(++_if21);
		};
		JB_Decr(_LoopSrcf23);
	}
	;
	if (!JB_Rec_OK(JB_StdErr)) {
		return;
	}
	{
		Array* _LoopSrcf26 = SC__Comp_ClassList;
		JB_Incr(_LoopSrcf26);
		int _if24 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf26, _if24));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_LoadClassType(C);
			SC_Class_ProcessInterfaces(C);
			JB_Decr(C);
			(++_if24);
		};
		JB_Decr(_LoopSrcf26);
	}
	;
	if (!SC_Comp__Stage(JB_LUB[2126])) {
		return;
	}
	{
		Array* _LoopSrcf29 = SC__Comp_ClassList;
		JB_Incr(_LoopSrcf29);
		int _if27 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf29, _if27));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_ContainedTypeLoad(C);
			JB_Decr(C);
			(++_if27);
		};
		JB_Decr(_LoopSrcf29);
	}
	;
	if (!SC_Comp__Stage(JB_LUB[2127])) {
		return;
	}
	{
		Array* _LoopSrcf32 = SC__Comp_ClassList;
		JB_Incr(_LoopSrcf32);
		int _if30 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf32, _if30));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_CollectProperties(C);
			JB_Decr(C);
			if (SC_Rec_TooMany(JB_StdErr)) {
				JB_Decr(_LoopSrcf32);
				return;
			}
			(++_if30);
		};
		JB_Decr(_LoopSrcf32);
	}
	;
	if (!SC_Comp__SortModulesAndClasses()) {
		return;
	}
	{
		Array* _LoopSrcf35 = SC__Comp_ClassList;
		JB_Incr(_LoopSrcf35);
		int _if33 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf35, _if33));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_CalculateSize(C, 0);
			SC_Class_LoadConstructors(C);
			JB_Decr(C);
			(++_if33);
		};
		JB_Decr(_LoopSrcf35);
	}
	;
	if (!SC_Comp__Stage(JB_LUB[2128])) {
		return;
	}
	SC_Comp__CollectConstants();
	JB_ClassData_Restore((&MessageData));
	SC_Imp__NoProj();
	if (SC__Comp_API_Place) {
		Message* Proj = JB_Msg_NeedSyx(SC__Comp_API_Place, kJB_SyxThg);
		JB_Incr(Proj);
		if (Proj) {
			{
				Array* _LoopSrcf38 = SC__Comp_API_List;
				JB_Incr(_LoopSrcf38);
				int _if36 = 0;
				while (true) {
					Message* M = ((Message*)JB_Array_Value(_LoopSrcf38, _if36));
					JB_Incr(M);
					if (M == nil) {
						JB_Decr(M);
						break;
					}
					SC_SC_API__DelayedClassAPI(M, Proj->Name);
					JB_Decr(M);
					(++_if36);
				};
				JB_Decr(_LoopSrcf38);
			};
		}
		JB_Decr(Proj);
	}
	SC_Comp__DoSavers(1);
	if (!SC_Comp__Stage(JB_LUB[2129])) {
		return;
	}
	{
		Array* _LoopSrcf41 = SC__Comp_ClassList;
		JB_Incr(_LoopSrcf41);
		int _if39 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf41, _if39));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Base_LoadExportName(C);
			JB_Decr(C);
			(++_if39);
		};
		JB_Decr(_LoopSrcf41);
	}
	;
	if (!SC_Comp__Stage(JB_LUB[2130])) {
		return;
	}
	SC_Comp__LoadInitsAndMore();
	SC_Imp__NoProj();
	if (!SC_Comp__Stage(JB_LUB[2131])) {
		return;
	}
	{
		Array* _LoopSrcf44 = SC__Comp_ProtoTypes;
		JB_Incr(_LoopSrcf44);
		int _if42 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf44, _if42));
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			SC_Func_ProtoExportName(F);
			SC_Func_FuncParamsLoad(F);
			SC_Func_MakeParamsReal(F);
			JB_Decr(F);
			(++_if42);
		};
		JB_Decr(_LoopSrcf44);
	}
	;
	(SC_Func__CurrFuncSet(nil));
	if (!JB_Rec_OK(JB_StdErr)) {
		return;
	}
	SC_Comp__DoSavers(2);
	if (!SC_Comp__Stage(JB_LUB[2132])) {
		return;
	}
	{
		Array* _LoopSrcf47 = SC__Comp_FuncList;
		JB_Incr(_LoopSrcf47);
		int _if45 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf47, _if45));
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			SC_Func_FuncParamsLoad(F);
			SC_Base_LoadExportName(F);
			SC_Func_CheckOofifier(F);
			JB_Decr(F);
			if (SC_Rec_TooMany(JB_StdErr)) {
				JB_Decr(_LoopSrcf47);
				return;
			}
			(++_if45);
		};
		JB_Decr(_LoopSrcf47);
	}
	;
	(SC_Func__CurrFuncSet(nil));
	SCFunction* Fn = SC_Comp__XFunc(JB_LUB[2133], nil);
	JB_Incr(Fn);
	if (Fn) {
		(SC_Func_SyntaxIsSet(Fn, kSC__FunctionType_Killer, true));
	}
	JB_Decr(Fn);
	if (!SC_Comp__Stage(JB_LUB[2134])) {
		return;
	}
	{
		Array* _LoopSrcf50 = SC__Comp_ClassList;
		JB_Incr(_LoopSrcf50);
		int _if48 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf50, _if48));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			JB_SetRef(C->ExportName, SC_Class_StructName(C));
			SC_Class_AfterFuncsDecled(C);
			JB_Decr(C);
			(++_if48);
		};
		JB_Decr(_LoopSrcf50);
	}
	;
	if (!SC_Comp__Stage(JB_LUB[2135])) {
		return;
	}
	{
		Array* _LoopSrcf53 = SC__Comp_ClassList;
		JB_Incr(_LoopSrcf53);
		int _if51 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf53, _if51));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_AfterAfterFuncs(C);
			JB_Decr(C);
			(++_if51);
		};
		JB_Decr(_LoopSrcf53);
	}
	;
	if (!SC_Comp__Stage(JB_LUB[2136])) {
		return;
	}
	{
		Array* _LoopSrcf56 = SC__Comp_ModuleList;
		JB_Incr(_LoopSrcf56);
		int _if54 = 0;
		while (true) {
			SCModule* M = ((SCModule*)JB_Array_Value(_LoopSrcf56, _if54));
			JB_Incr(M);
			if (M == nil) {
				JB_Decr(M);
				break;
			}
			SC_Mod_InitDecls(M);
			JB_Decr(M);
			(++_if54);
		};
		JB_Decr(_LoopSrcf56);
	}
	;
	{
		Array* _LoopSrcf59 = SC__Imp_AllFiles;
		JB_Incr(_LoopSrcf59);
		int _if57 = 0;
		while (true) {
			SCFile* F = ((SCFile*)JB_Array_Value(_LoopSrcf59, _if57));
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			SC_File_CollectGlobals(F, SC__Comp_program);
			JB_Decr(F);
			(++_if57);
		};
		JB_Decr(_LoopSrcf59);
	}
	;
	SC_Imp__NoProj();
	JB_ClassData_Restore((&MessageData));
	{
		Array* _LoopSrcf62 = SC__Comp_ModuleList;
		JB_Incr(_LoopSrcf62);
		int _if60 = 0;
		while (true) {
			SCModule* M = ((SCModule*)JB_Array_Value(_LoopSrcf62, _if60));
			JB_Incr(M);
			if (M == nil) {
				JB_Decr(M);
				break;
			}
			if (M != SC__Comp_program) {
				SC_Mod_BaseDecls(M);
			}
			SC_Mod_GlobalsFix(M);
			SCClass* C = M->Cls;
			JB_Incr(C);
			JB_Decr(M);
			if (C) {
				SC_Class_RenameInterfaces(C);
			}
			JB_Decr(C);
			(++_if60);
		};
		JB_Decr(_LoopSrcf62);
	}
	;
	{
		Array* _LoopSrcf65 = SC_SortInitOrder(SC__Comp_ModuleList);
		JB_Incr(_LoopSrcf65);
		int _if63 = 0;
		while (true) {
			SCModule* M = ((SCModule*)JB_Array_Value(_LoopSrcf65, _if63));
			JB_Incr(M);
			if (M == nil) {
				JB_Decr(M);
				break;
			}
			SC_Mod_DelayedInitFuncTransform(M);
			JB_Decr(M);
			(++_if63);
		};
		JB_Decr(_LoopSrcf65);
	}
	;
	SC_Comp__PostInitCodeCall();
	JB_Array_Sort(SC__PackMaker_LibGlobs, ((FP_SorterComparer)(SC_SimplestFirst)));
	SC_Comp__Stage(JB_LUB[2137]);
	{
		Array* _LoopSrcf68 = SC__Comp_FuncList;
		JB_Incr(_LoopSrcf68);
		int _if66 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf68, _if66));
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			SCDecl* P = F->HasProto;
			JB_Incr(P);
			if (P) {
				(SC_Decl_NameSet(P, F->ExportName));
			}
			 else {
				SC_Func_AddConstructorReturn2(F);
			}
			JB_Decr(F);
			JB_Decr(P);
			(++_if66);
		};
		JB_Decr(_LoopSrcf68);
	}
	;
	SC_Comp__Stage(JB_LUB[2138]);
	{
		Array* _LoopSrcf71 = SC__Comp_ClassList;
		JB_Incr(_LoopSrcf71);
		int _if69 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf71, _if69));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_CheckIterator(C);
			JB_Decr(C);
			(++_if69);
		};
		JB_Decr(_LoopSrcf71);
	}
	;
	SC_Comp__Timer(JB_LUB[2139]);
	SC_Comp__Stage(JB_LUB[2140]);
	JB_String* _tmPf72 = SC_Func__NameList();
	JB_Incr(_tmPf72);
	JB_Flow__InputLine(_tmPf72, JB_LUB[2141]);
	JB_Decr(_tmPf72);
	SC_Func__TransformAll();
	SC_Comp__Stage(JB_LUB[2142]);
	SC_LinkMap__CollectAll();
	(SC_Func__CurrFuncSet(nil));
}

void SC_Comp__ImportLibs() {
	SC__Imp_STDLibTime = true;
	JB_File* _tmPf0 = SC_Comp__Library();
	JB_Incr(_tmPf0);
	JB_FreeIfDead(SC_Imp__ImportPath(JB_LUB[595], _tmPf0, 1, true));
	JB_Decr(_tmPf0);
	JB_File* _tmPf1 = SC_Comp__Jeebox();
	JB_Incr(_tmPf1);
	JB_FreeIfDead(SC_Imp__ImportPath(JB_LUB[1722], _tmPf1, 1, true));
	JB_Decr(_tmPf1);
	SC_Mod_LoadInitFuncSub(SC__Comp_program, SC__Comp_AppInitGlobals, JB_LUB[2069]);
	SC_Mod_LoadInitFuncSub(SC__Comp_program, SC__Comp_AppInitCode, JB_LUB[2070]);
}

void SC_Comp__ImportProj() {
	SC__Imp_STDLibTime = false;
	JB_File* ToUse = ((JB_File*)JB_Ternary(JB_Str_Exists(SC__Options_SingleFileInput), JB_Str_AsFile(SC__Options_SingleFileInput), SC__Comp_BaseProjectPath));
	JB_Incr(ToUse);
	JB_SetRef(SC__Comp_Project, SC_Imp__ImportPath(JB_LUB[0], ToUse, 0, false));
	JB_Decr(ToUse);
	if (!SC__Comp_Project) {
		JB_Str_Fail(JB_LUB[2071]);
		return;
	}
	if (!SC__Comp_ConfMsg) {
		Message* Conf = JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[2045]);
		JB_Incr(Conf);
		JB_String* _tmPf0 = JB_Str_OperatorPlus(SC__Comp_ProjectName, JB_LUB[557]);
		JB_Incr(_tmPf0);
		(JB_Msg_SetStr(Conf, JB_LUB[1068], _tmPf0));
		JB_Decr(_tmPf0);
		SC_Comp__SetConf(Conf);
		JB_Decr(Conf);
	}
}

int SC_Comp__Init_() {
	{
		JB_SetRef(SC__Comp_VisibleFuncs, SC_Base_ConstructorStr(nil, JB_LUB[1671]));
		JB_SetRef(SC__Comp_Interpreter, SC_Base_ConstructorStr(nil, JB_LUB[1672]));
		JB_SetRef(SC__Comp_OriginalInputPath, JB_LUB[0]);
		JB_SetRef(SC__Comp__Projects, JB_LUB[0]);
		JB_SetRef(SC__Comp__SpeedieProj, JB_LUB[0]);
		SCImport* _tmPf0 = SC_Imp_Constructor(nil, nil, true);
		JB_Incr(_tmPf0);
		JB_SetRef(SC__Comp_InternalFile, SC_File_Constructor(nil, nil, _tmPf0));
		JB_Decr(_tmPf0);
		JB_SetRef(SC__Comp_ProjectName, JB_LUB[0]);
		JB_SetRef(SC__Comp_ReportedName, JB_LUB[0]);
		JB_SetRef(SC__Comp_Numbers, JB_Dict_Constructor(nil));
		JB_SetRef(SC__Comp_TodoList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ImportedList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ImportedNames, JB_Dict_Constructor(nil));
		JB_SetRef(SC__Comp_program, SC__Comp_InternalFile->Proj->Mod);
		JB_SetRef(SC__Comp_AppInitCode, JB_Str_ParseJbin(((JB_LUB[1673])), 1073741824));
		JB_SetRef(SC__Comp_AppInitGlobals, JB_Str_ParseJbin(((JB_LUB[1674])), 1073741824));
		JB_SetRef(SC__Comp_ClassList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ModuleList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_FuncList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ProtoTypes, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ActualSyxes, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ExportNames, JB_Dict_Constructor(nil));
		JB_SetRef(SC__Comp_AdjDicts, JB_Dict_Constructor(nil));
		JB_SetRef(SC__Comp_SyxArray, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ExtendList, JB_Msg_ConstructorEmpty(nil));
		JB_SetRef(SC__Comp_ConstantsList, JB_Msg_ConstructorEmpty(nil));
		JB_SetRef(SC__Comp_DeclConstants, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_TasksList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_TasksTodo, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ExtendModuleList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_API_List, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_API_Funcs, JB_Array_Constructor0(nil));
		SC__Comp_InitedOK = true;
		JB_SetRef(SC__Comp_StageName, JB_LUB[0]);
		JB_SetRef(SC__Comp_LastTimeName, JB_LUB[0]);
		JB_SetRef(SC__Comp_TimerOutput, JB_FS_Constructor(nil));
	}
	;
	return 0;
}

bool SC_Comp__InitBasicFuncs() {
	JB_SetRef(SC__Comp_RefSetRef, SC_Comp__LoadRefFunc(JB_LUB[1546]));
	JB_SetRef(SC__Comp_RefIncr, SC_Comp__LoadRefFunc(JB_LUB[2016]));
	JB_SetRef(SC__Comp_RefIncr2, SC_Comp__LoadRefFunc(JB_LUB[584]));
	JB_SetRef(SC__Comp_RefDecr, SC_Comp__LoadRefFunc(JB_LUB[737]));
	JB_SetRef(SC__Comp_RefClear, SC_Comp__LoadRefFunc(JB_LUB[736]));
	JB_SetRef(SC__Comp_RefDecrMulti, SC_Comp__LoadRefFunc(JB_LUB[2017]));
	JB_SetRef(SC__Comp_RefFreeIfDead, SC_Comp__LoadRefFunc(JB_LUB[1344]));
	JB_SetRef(SC__Comp_RefSafeDecr, SC_Comp__LoadRefFunc(JB_LUB[738]));
	JB_SetRef(SC__Comp_SwapFunc, SC_Comp__FindFunction(JB_LUB[774]));
	JB_SetRef(SC__Comp_NewFunc, SC_Comp__FindFunction(JB_LUB[2018]));
	JB_SetRef(SC__Comp_TernaryFunc, SC_Comp__FindFunction(JB_LUB[1363]));
	JB_SetRef(SC__Comp_fnAs, SC_Comp__LoadTypeTest(JB_LUB[2019]));
	JB_SetRef(SC__Comp_fnFastAs, SC_Comp__LoadTypeTest(JB_LUB[2020]));
	JB_SetRef(SC__Comp_fnFastIsa, SC_Comp__LoadTypeTest(JB_LUB[2021]));
	JB_SetRef(SC__Comp_fnIsa, SC_Comp__LoadTypeTest(JB_LUB[2022]));
	JB_SetRef(SC__Comp_fnMustbe, SC_Comp__LoadTypeTest(JB_LUB[470]));
	JB_SetRef(SC__Comp_fnOpMustBe, SC_Comp__LoadTypeTest(JB_LUB[2023]));
	JB_SetRef(SC__Comp_PrivateProperty, SC_Comp__CreateFuncFromSource(JB_LUB[2024]));
	return JB_Rec_OK(JB_StdErr);
}

int SC_Comp__InitBasicStuff() {
	int Rz = 0;
	Rz = JB_StdErr->ErrorCount;
	if (Rz > 0) {
		JB_StdErr->LowerErrorsTo = kJB__ErrorSeverity_Warning;
		SC__Comp_InitedOK = false;
	}
	JB_ClassData_Restore((&MessageData));
	JB_Array_SyntaxAppend(SC__Comp_ModuleList, SC__Comp_program);
	if (!SC_Comp__InitTypes()) {
		SC__Comp_InitedOK = false;
	}
	SC_TypeNil = SC_Comp__AddGlobalConst(JB_LUB[36], SC_TypeObject, kSC__NilState_ActuallyNil);
	SC_TrueBool = SC_Comp__AddGlobalConst(JB_LUB[31], SC_TypeBool, kSC__NilState_Real | kSC__NilState_TrueValue);
	SC_FalseBool = SC_Comp__AddGlobalConst(JB_LUB[32], SC_TypeBool, kSC__NilState_Real | kSC__NilState_FalseValue);
	(SC_Decl_NumberConstSet(SC_TrueBool, 1));
	SC_Comp__AddGlobalConstNum(JB_LUB[1587], SC_TypeInt, JB_Date_TimeID(SC__Imp_Recent));
	SC_Comp__AddGlobalConstNum(JB_LUB[1588], SC_TypeDate, JB_Date__Now());
	SC_Comp__AddGlobalConstNum(JB_LUB[1589], SC_TypeDate, SC__Imp_Recent);
	SC_Comp__AddGlobalConstFloat(JB_LUB[1219], SC_TypeFloat64, JB_LUB[1590]);
	SC_Comp__AddGlobalConstFloat(JB_LUB[1220], SC_TypeFloat64, JB_LUB[1591]);
	if (JB_StdErr->ErrorCount > Rz) {
		SC__Comp_InitedOK = false;
	}
	return Rz;
}

void SC_Comp__InitCompiler() {
	if (!((({
		JB_String* _tmPf2 = SC_Comp__Projects();
		JB_Incr(_tmPf2);
		JB_File* _tmPf1 = JB_Str_ChildFile(_tmPf2, JB_LUB[595]);
		JB_Incr(_tmPf1);
		JB_Decr(_tmPf2);
		bool _tmPf0 = JB_File_MustExist(_tmPf1, JB_LUB[0]);
		JB_Decr(_tmPf1);
		 _tmPf0;
	})) and JB_Rec_OK(JB_StdErr))) {
		return;
	}
	SC_Opp__Init();
	SC_Cpp__Init();
	if (!SC__Comp_Files) {
		JB_SetRef(SC__Comp_Files, JB_Dict_Constructor(nil));
	}
	JB_FS_AppendByte(SC__Comp_TimerOutput, '\n');
	Message* _tmPf3 = JB_Syx_Msg(kJB_SyxStr, JB_LUB[0]);
	JB_Incr(_tmPf3);
	SC_Crkt__CollectString(_tmPf3, true);
	JB_Decr(_tmPf3);
	SC__Comp_CurrStage = 1;
	SC__SC_UniqueNum = 100;
	if (JB_Str_Exists(SC__Options_SingleFileInput)) {
		if (JB_FreeIfDead(JB_App__Parent(nil, false))) {
			JB_String* _tmPf4 = SC_Str_ScriptContainer(SC__Comp_OriginalInputPath, JB_LUB[1894]);
			JB_Incr(_tmPf4);
			JB_SetRef(SC__Comp__BuildFolder, JB_Str_AsFile(_tmPf4));
			JB_Decr(_tmPf4);
		}
		 else {
			JB_SetRef(SC__Comp__BuildFolder, SC__Comp_BaseProjectPath);
		}
	}
	 else {
		JB_String* _tmPf6 = SC_Comp__VariantSuffix();
		JB_Incr(_tmPf6);
		JB_String* _tmPf5 = JB_Str_OperatorPlus(JB_LUB[1100], _tmPf6);
		JB_Incr(_tmPf5);
		JB_Decr(_tmPf6);
		JB_SetRef(SC__Comp__BuildFolder, JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, _tmPf5));
		JB_Decr(_tmPf5);
	}
	JB_String* _tmPf7 = SC_Ext__ProjTmpPath();
	JB_Incr(_tmPf7);
	JB_File* T = JB_Str_AsFile(_tmPf7);
	JB_Incr(T);
	JB_Decr(_tmPf7);
	JB_SetRef(SC__Comp_TempFolder, T);
	JB_Str_MakeEntirePath(T, true);
	JB_Decr(T);
	JB_File* _tmPf8 = SC_Comp__GeneratedCppsFolder();
	JB_Incr(_tmPf8);
	JB_Str_MakeEntirePath(_tmPf8, true);
	JB_Decr(_tmPf8);
	SC_Comp__CreateRoot();
	SC_Comp__CreateDisambiguation();
	JB_Array_SyntaxAppend(SC__Imp_AllFiles, SC__Comp_InternalFile);
}

bool SC_Comp__InitTypes() {
	JB_SetRef(SC_TypeInt, SC_Comp__FindClassName(JB_LUB[152], 0));
	JB_SetRef(SC_TypeInt16, SC_Comp__FindClassName(JB_LUB[382], 0));
	JB_SetRef(SC_TypeInt64, SC_Comp__FindClassName(JB_LUB[153], 0));
	JB_SetRef(SC_TypeuInt, SC_Comp__FindClassName(JB_LUB[395], 0));
	JB_SetRef(SC_TypeuInt16, SC_Comp__FindClassName(JB_LUB[381], 0));
	JB_SetRef(SC_TypeuInt64, SC_Comp__FindClassName(JB_LUB[386], 0));
	JB_SetRef(SC_TypeFloat16, SC_Comp__FindClassName(JB_LUB[390], 0));
	JB_SetRef(SC_Typefloat, SC_Comp__FindClassName(JB_LUB[154], 0));
	JB_SetRef(SC_TypeFloat64, SC_Comp__FindClassName(JB_LUB[1561], 0));
	JB_SetRef(SC_TypeBool, SC_Comp__FindClassName(JB_LUB[147], 0));
	JB_SetRef(SC_TypeString, SC_Comp__FindClassName(JB_LUB[102], 0));
	JB_SetRef(SC_TypeStringZero, SC_Comp__FindClassName(JB_LUB[1562], 0));
	JB_SetRef(SC_TypeByte, SC_Comp__FindClassName(JB_LUB[149], 0));
	JB_SetRef(SC_TypeChar, SC_Comp__FindClassName(JB_LUB[402], 0));
	JB_SetRef(SC_TypeCodePoint, SC_Comp__FindClassName(JB_LUB[1563], 0));
	JB_SetRef(SC_TypeCharSet, SC_Comp__FindClassName(JB_LUB[1564], 0));
	JB_SetRef(SC_TypeVec2, SC_Comp__FindClassName(JB_LUB[392], 0));
	JB_SetRef(SC_TypeVec3, SC_Comp__FindClassName(JB_LUB[393], 0));
	JB_SetRef(SC_TypeVec4, SC_Comp__FindClassName(JB_LUB[394], 0));
	JB_SetRef(SC_TypeiVec2, SC_Comp__FindClassName(JB_LUB[387], 0));
	JB_SetRef(SC_TypeiVec3, SC_Comp__FindClassName(JB_LUB[388], 0));
	JB_SetRef(SC_TypeiVec4, SC_Comp__FindClassName(JB_LUB[389], 0));
	JB_SetRef(SC_TypeDate, SC_Comp__FindClassName(JB_LUB[1565], 0));
	JB_SetRef(SC_TypeDuration, SC_Comp__FindClassName(JB_LUB[1566], 0));
	JB_SetRef(SC_TypeJBClass, SC_Comp__FindClassName(JB_LUB[1567], 0));
	JB_SetRef(SC_TypeTask, SC_Comp__FindClassName(JB_LUB[1055], 0));
	JB_SetRef(SC_TypeObject, SC_Comp__FindClassName(JB_LUB[435], 0));
	JB_SetRef(SC_TypeSyntax, SC_Comp__FindClassName(JB_LUB[544], 0));
	JB_SetRef(SC_TypeWrapper, SC_Comp__FindClassName(JB_LUB[1299], 0));
	JB_SetRef(SC_TypeDictionary, SC_Comp__FindClassName(JB_LUB[1568], 0));
	JB_SetRef(SC_TypeFastString, SC_Comp__FindClassName(JB_LUB[1569], 0));
	JB_SetRef(SC_TypeArray, SC_Comp__FindClassName(JB_LUB[1570], 0));
	JB_SetRef(SC_TypeSaveable, SC_Comp__FindClassName(JB_LUB[1571], 0));
	if (!(JB_Rec_OK(JB_StdErr) and SC_Comp__GetTypeVoid())) {
		return nil;
	}
	JB_SetRef(SC_TypeStringZero->DowngradeTo, SC_TypeString);
	(SC_Class_SyntaxIsSet(SC_TypeString, kSC__ClassInfo_HasSubClass, true));
	{
		Array* _LoopSrcf2 = SC__Comp_ActualSyxes;
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			SCDecl* S = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(S);
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			JB_SetRef(S->Type, SC_TypeSyntax);
			JB_Decr(S);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	return JB_Rec_OK(JB_StdErr);
}

JB_File* SC_Comp__InputFile(JB_String* S, Message* Where) {
	if ((JB_Str_ContainsString(S, JB_LUB[1159]))) {
		JB_Msg_Fail(Where, JB_LUB[1160]);
		return nil;
	}
	return SC_Comp__InputFileAlways(S);
}

JB_File* SC_Comp__InputFileAlways(JB_String* S) {
	JB_File* Rz = nil;
	SCImport* C = SC__Imp_Curr;
	if (C) {
		JB_File* Found = ((JB_File*)JB_Dict_ValueLower(C->Resources, S));
		if (Found) {
			return Found;
		}
	}
	int Best = JB_int__Max();
	{
		Array* _LoopSrcf2 = SC__Comp_ImportedList;
		int _if0 = 0;
		while (true) {
			SCImport* Imp = ((SCImport*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Imp == nil) {
				break;
			}
			if (Imp->Depth < Best) {
				JB_File* F = ((JB_File*)JB_Dict_ValueLower(Imp->Resources, S));
				if (F) {
					Rz = F;
					Best = Imp->Depth;
				}
			}
			(++_if0);
		};
	}
	;
	if (!Rz) {
		Rz = JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, S);
	}
	return Rz;
}

bool SC_Comp__IsTest() {
	JB_String* _tmPf0 = JB_App__FileName();
	JB_Incr(_tmPf0);
	bool _tmPf1 = (JB_Str_ContainsString(_tmPf0, JB_LUB[40]));
	JB_Decr(_tmPf0);
	return _tmPf1;
}

JB_File* SC_Comp__Jeebox() {
	JB_String* _tmPf0 = SC_Comp__Projects();
	JB_Incr(_tmPf0);
	JB_File* _tmPf1 = JB_Str_ChildFile(_tmPf0, JB_LUB[594]);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_File* SC_Comp__Library() {
	JB_String* _tmPf0 = SC_Comp__Projects();
	JB_Incr(_tmPf0);
	JB_File* _tmPf1 = JB_Str_ChildFile(_tmPf0, JB_LUB[595]);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Comp__LoadInitsAndMore() {
	{
		Array* _LoopSrcf2 = SC__Comp_ModuleList;
		int _if0 = 0;
		while (true) {
			SCModule* M = ((SCModule*)JB_Array_Value(_LoopSrcf2, _if0));
			if (M == nil) {
				break;
			}
			SC_Base_Use(M);
			SC_Base_LoadExportName(M);
			SC_Mod_LoadInitFunc(M);
			(++_if0);
		};
	};
}

SCFunction* SC_Comp__LoadRefFunc(JB_String* Name) {
	SCFunction* O = SC_Comp__FindFunction(Name);
	if (O) {
		(SC_Func_SyntaxIsSet(O, kSC__FunctionType_Reffer, true));
		return O;
	}
	return nil;
}

void SC_Comp__LoadSuperClasses() {
	{
		Array* _LoopSrcf2 = SC__Comp_ClassList;
		int _if0 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf2, _if0));
			if (C == nil) {
				break;
			}
			SC_Class_LoadSuperClass(C);
			(++_if0);
		};
	}
	;
	{
		Array* _LoopSrcf5 = SC__Comp_ClassList;
		int _if3 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf5, _if3));
			if (C == nil) {
				break;
			}
			SC_Class_LoadSuperBehaviours(C);
			(++_if3);
		};
	};
}

SCFunction* SC_Comp__LoadTypeTest(JB_String* S) {
	SCObject* F = SC_Base_SyntaxAccessWithStr(SC_TypeObject, S);
	if (JB_Object_FastIsa(F, &SCFunctionData)) {
		(SC_Func_SyntaxIsSet(((SCFunction*)F), kSC__FunctionType_TypeTest, true));
		return ((SCFunction*)F);
	}
	return nil;
}

void SC_Comp__Main() {
	if (SC_Comp__EnterCompile()) {
		if (true) {
			JB_String* _tmPf2 = JB_Str_OperatorPlus(JB_LUB[1573], SC__Options_Variant);
			JB_Incr(_tmPf2);
			FlowControlStopper __varf1 = JB_Flow__Attempt(_tmPf2);
			JB_Decr(_tmPf2);
			FlowControlStopper _usingf0 = JB_FlowControlStopper_SyntaxUsing(__varf1);
			SC_Comp__CompileTime();
			DTWrap* _tmPf3 = JB_Wrap_ConstructorInt(nil, __varf1);
			JB_Incr(_tmPf3);
			JB_FlowControlStopper_SyntaxUsingComplete(_usingf0, _tmPf3);
			JB_Decr(_tmPf3);
		}
	}
}

Message* SC_Comp__MakeMainFunc() {
	SCFunction* F = SC__Comp_MainFunc;
	JB_Incr(F);
	if (F) {
		F->BlindCasts = kJB__ErrorSeverity_Error;
		Message* _tmPf2 = SC_Func_SourceArg(F);
		JB_Incr(_tmPf2);
		JB_Decr(F);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_Decr(F);
	JB_PrintLine(JB_LUB[2025]);
	SC__Options_ProjectIsLibrary = true;
	Message* _tmPf0 = SC_Base_CollectStr(SC__Comp_program, JB_LUB[2026]);
	JB_Incr(_tmPf0);
	Message* _tmPf1 = ((Message*)JB_Ring_Last(_tmPf0));
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Comp__MiniTests() {
	SC_Comp__TestDate();
	SC_Comp__TestTask();
}

SortComparison SC_Comp__ModulesSorter(SCModule* Self, SCModule* B) {
	SCClass* Ca = Self->Cls;
	SCClass* Cb = B->Cls;
	if ((!Ca) or (!Cb)) {
		if (Ca or Cb) {
			return (((SortComparison)(Cb != nil)));
		}
	}
	 else {
		SCNodeType Tt = Ca->BaseType;
		int D = ((int)Cb->BaseType) - ((int)Tt);
		if (D) {
			return ((SortComparison)D);
		}
		D = (Cb->Depth - Ca->Depth);
		if (D) {
			return ((SortComparison)D);
		}
	}
	return ((SortComparison)(JB_Str_CompareStr(Self->Name, B->Name, false) <= -1));
}

void SC_Comp__NewConst(SCDecl* D) {
	D->NilDeclared = kSC__NilState_Real;
	SC_Decl_SyntaxAppend(D, kSC__SCDeclInfo_Const | kSC__SCDeclInfo_Global);
	JB_Array_SyntaxAppend(SC__Comp_DeclConstants, D);
}

void SC_Comp__PostInitCodeCall() {
	Message* _tmPf0 = JB_Str_ParseJbin(((JB_LUB[1386])), 1073741824);
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(SC__Comp_program->InitVarsArg, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_Comp__PrepareAST() {
	{
		Array* _LoopSrcf2 = SC__Comp_ImportedList;
		int _if0 = 0;
		while (true) {
			SCImport* Rz = ((SCImport*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Rz == nil) {
				break;
			}
			SC_Imp_PrepareAll(Rz);
			(++_if0);
		};
	};
}

void SC_Comp__PrintCompileErrors() {
	if (SC__Options_Warnings) {
		if (!JB_Rec_HasAnything(JB_StdErr)) {
			return;
		}
	}
	 else {
		if (!JB_Rec_HasProblems(JB_StdErr)) {
			return;
		}
	}
	SC_Rec_PrePrintErrors(JB_StdErr);
	if (SC__Func_DisabledPoints) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[1819]);
		JB_FS_AppendInt32(_fsf0, SC__Func_DisabledPoints);
		JB_FS_AppendString(_fsf0, JB_LUB[1820]);
		JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf1);
		JB_Decr(_fsf0);
		JB_Str_PrintlineColor(_tmPf1, kJB__ErrorColors_error);
		JB_Decr(_tmPf1);
	}
	uint MinSev = ((ErrorSeverity)JB_Ternary(SC__Options_Warnings, kJB__ErrorSeverity_Warning, ((ErrorSeverity)kJB__ErrorSeverity_Problem)));
	SC_Comp__PrintErrors(MinSev);
	JB_Rec_Clear(JB_StdErr);
}

void SC_Comp__PrintCompileTime(Date Durr) {
	if (!(JB_Rec_OK(JB_StdErr) and (!SC__Options_Silent))) {
		return;
	}
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	JB_FS_Normal(Fs, JB_LUB[564]);
	JB_FS_AppendInt32(Fs, SC__Comp_CurrStage);
	JB_FS_Normal(Fs, JB_LUB[565]);
	JB_FS_AppendInt32(Fs, SC_Comp__ReachedClassCount());
	JB_FS_Normal(Fs, JB_LUB[566]);
	//;
	JB_FS_AppendInt32(Fs, SC__Comp_stReachedFunc);
	JB_FS_AppendString(Fs, JB_LUB[425]);
	JB_FS_AppendInt32(Fs, JB_Array_Size(SC__Comp_FuncList));
	JB_FS_AppendString(Fs, JB_LUB[567]);
	JB_FS_AppendInt32(Fs, SC__Comp_stLibFuncs);
	JB_FS_AppendString(Fs, JB_LUB[568]);
	//;
	JB_FS_Normal(Fs, JB_LUB[569]);
	//;
	JB_FS_AppendUint(Fs, JB__Tk_CountStats);
	//;
	JB_FS_Normal(Fs, JB_LUB[570]);
	float Avg = JB_int_OperatorDiv(SC__Crkt_TotalSize, JB_Array_Size(SC__Crkt_List));
	//;
	JB_FS_AppendInt32(Fs, JB_Array_Size(SC__Crkt_List));
	JB_FS_AppendString(Fs, JB_LUB[425]);
	//;
	JB_FreeIfDead(JB_int_RenderSize(SC__Crkt_TotalSize, Fs));
	JB_FS_AppendString(Fs, JB_LUB[571]);
	JB_FS_AppendFloat(Fs, Avg, 1, false, false);
	JB_FS_AppendByte(Fs, ')');
	if (SC__VM_Builder_Total) {
		JB_FS_Normal(Fs, JB_LUB[572]);
		JB_FS_AppendInt32(Fs, SC__VM_Builder_Total);
	}
	JB_FS_Normal(Fs, JB_LUB[573]);
	JB_FreeIfDead(JB_Date_RenderDurr(Durr, Fs));
	JB_FS_AppendByte(Fs, 's');
	JB_FS_Normal(Fs, JB_LUB[574]);
	JB_FreeIfDead(JB_int_RenderSize(SC__Comp_stTotalSourceSize, Fs));
	if (SC_Options__Color()) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_normal);
	}
	JB_String* _tmPf3 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf3);
	JB_Decr(Fs);
	JB_PrintLine(_tmPf3);
	JB_Decr(_tmPf3);
}

void SC_Comp__PrintErrors(uint /*ErrorSeverity*/ MinSev) {
	JB_StdErr->BlockErrors = true;
	JB_String* S = SC_Comp__RenderErrors(JB_StdErr, MinSev);
	JB_Incr(S);
	JB_StdErr->BlockErrors = false;
	if (SC__Options_PerryOutput == 2) {
		JB_SetRef(S, JB_Str_Digest(S));
	}
	if (JB_StdErr->ErrorCount) {
		JB_Str_PrintError(S);
	}
	 else {
		JB_Print(S);
	}
	JB_Decr(S);
}

void SC_Comp__PrintResults() {
	bool OK = JB_Rec_OK(JB_StdErr);
	SC_Comp__PrintStats();
	SC_Comp__PrintCompileErrors();
	if (JB_FreeIfDead(JB_App__Parent(nil, false)) != nil) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[1847]);
		JB_FS_AppendInt32(_fsf0, JB_App__ID());
		JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf1);
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
	if (SC__Options_SelfReplacement and JB_IsTerminal(kJB__FileDes_StdOut)) {
		JB_String* _tmPf2 = SC_Comp__VariantSuffix();
		JB_Incr(_tmPf2);
		if (JB_Str_Equals(_tmPf2, JB_LUB[40], true)) {
			JB_String* Msg = ((JB_StringC*)JB_Ternary(OK, JB_LUB[1848], JB_LUB[1849]));
			JB_Incr(Msg);
			JB_App__Say(Msg, false);
			JB_Decr(Msg);
		}
		JB_Decr(_tmPf2);
	}
	if (SC__Options_Beep) {
		JB_PrintLine(JB_LUB[155]);
	}
}

void SC_Comp__PrintStats() {
	if (!SC__Options_ArgStats) {
		return;
	}
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, JB_LUB[530]);
	{
		int I = 0;
		while (I < 12) {
			int C = SC__Func_FuncStats[I];
			if (C) {
				if (I) {
					JB_FS_AppendString(Fs, JB_LUB[10]);
				}
				JB_FS_AppendInt32(Fs, I);
				JB_FS_AppendByte(Fs, ':');
				JB_FS_AppendInt32(Fs, C);
			}
			(++I);
		};
	}
	;
	SC_Func__PrintStats(Fs);
	JB_String* _tmPf1 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf1);
	JB_Decr(Fs);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
}

JB_File* SC_Comp__ProductFile() {
	JB_String* _tmPf0 = SC_Comp__ProductPath();
	JB_Incr(_tmPf0);
	JB_File* _tmPf1 = JB_Str_AsFile(_tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Comp__ProductPath() {
	if (JB_Str_Exists(SC__Options_output_path)) {
		return SC__Options_output_path;
	}
	JB_String* Prod = SC_Ext__ProductNameFull();
	JB_Incr(Prod);
	if (SC__Options_SelfReplacement) {
		JB_String* _tmPf0 = SC_Comp__Projects();
		JB_Incr(_tmPf0);
		JB_String* _tmPf1 = JB_Str_OperatorPlus(JB_LUB[1000], Prod);
		JB_Incr(_tmPf1);
		JB_String* _tmPf4 = JB_Str_Child(_tmPf0, _tmPf1);
		JB_Incr(_tmPf4);
		JB_Decr(_tmPf0);
		JB_Decr(_tmPf1);
		JB_Decr(Prod);
		JB_SafeDecr(_tmPf4);
		return _tmPf4;
	}
	JB_File* _tmPf2 = SC_Comp__BuildFolder();
	JB_Incr(_tmPf2);
	JB_File* _tmPf3 = JB_File_Child(_tmPf2, Prod);
	JB_Incr(_tmPf3);
	JB_Decr(Prod);
	JB_Decr(_tmPf2);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

JB_String* SC_Comp__Projects() {
	return ({
		JB_String* _X = SC__Comp__Projects;
		JB_Incr(_X);
		if (!JB_Str_Exists(_X)) {
			JB_SetRef(_X, JB_File__SpeedieDir());
			JB_SetRef(SC__Comp__Projects, _X);
		}
		JB_SafeDecr(_X);
		 _X;
	});
}

bool SC_Comp__Reached(JB_String* S) {
	//;
	SCClass* Obj = SC_Comp__SoftClass(S);
	JB_Incr(Obj);
	if (Obj) {
		bool _tmPf0 = ((bool)(Obj->MyReacher));
		JB_Decr(Obj);
		return _tmPf0;
	}
	JB_Decr(Obj);
	return false;
}

int SC_Comp__ReachedClassCount() {
	int Rz = 0;
	{
		Array* _LoopSrcf2 = SC__Comp_ClassList;
		int _if0 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf2, _if0));
			if (C == nil) {
				break;
			}
			Rz = (Rz + ((C->MyReacher) and SC_Class_IsObject(C)));
			(++_if0);
		};
	}
	;
	return Rz;
}

JB_String* SC_Comp__RenderErrors(JB_ErrorReceiver* Stderr, uint /*ErrorSeverity*/ MinSev) {
	int Printable = Stderr->ProblemCount + Stderr->ErrorCount;
	if (Printable and (MinSev < kJB__ErrorSeverity_Problem)) {
		MinSev = kJB__ErrorSeverity_Problem;
	}
	int Count = 0;
	FastString* Msg = JB_FS_Constructor(nil);
	JB_Incr(Msg);
	{
		JB_Error* Err = ((JB_Error*)JB_Ring_First(Stderr->Errors));
		JB_Incr(Err);
		while (Err) {
			JB_Error* _Nf1 = ((JB_Error*)JB_Ring_NextSib(Err));
			JB_Incr(_Nf1);
			if (Err->Severity >= MinSev) {
				(++Count);
				JB_FreeIfDead(SC_Err_SCRender(Err, Msg));
			}
			JB_SetRef(Err, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(Err);
	}
	;
	if (!Count) {
		int Problems = 0;
		{
			JB_Error* Err = ((JB_Error*)JB_Ring_First(Stderr->Errors));
			JB_Incr(Err);
			while (Err) {
				JB_Error* _Nf3 = ((JB_Error*)JB_Ring_NextSib(Err));
				JB_Incr(_Nf3);
				if (Err->Severity == kJB__ErrorSeverity_Problem) {
					if ((++Problems) <= 10) {
						JB_FreeIfDead(SC_Err_SCRender(Err, Msg));
					}
				}
				JB_SetRef(Err, _Nf3);
				JB_Decr(_Nf3);
			};
			JB_Decr(Err);
		};
	}
	 else if (!SC__Options_PerryOutput) {
		JB_FS_ProblemsFound(Msg, Count);
	}
	JB_String* _tmPf4 = JB_FS_SyntaxCast(Msg);
	JB_Incr(_tmPf4);
	JB_Decr(Msg);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_File* SC_Comp__ScriptLoc(JB_String* F) {
	JB_File* Rz = nil;
	JB_Incr(Rz);
	JB_String* _tmPf1 = SC_FB__TryUseProject(F, true);
	JB_Incr(_tmPf1);
	JB_String* _tmPf0 = SC_Str_ScriptLocation(_tmPf1, JB_LUB[1894]);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_SetRef(Rz, JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SetRef(SC__Options_output_path, Rz);
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Comp__ScriptRecompile(JB_File* F, JB_File* Script_build) {
	if (!JB_File_Exists(Script_build)) {
		return true;
	}
	if (JB_File_Modified(Script_build) < JB_File_Modified(F)) {
		return true;
	}
	return false;
}

void SC_Comp__SetConf(Message* Conf) {
	Message* Arg = JB_Msg_NeedSyx(Conf, kJB_SyxArg);
	JB_Incr(Arg);
	if (Arg) {
		JB_Tree_Remove(Arg);
		JB_SetRef(SC__Comp_ConfMsg, Arg);
		JB_String* Str = ((JB_String*)JB_Ternary(SC__Options_SelfReplacement, JB_Msg_Render(Arg, nil), JB_Msg_RenderJbin(Arg, JB_LUB[0], nil)));
		JB_Incr(Str);
		Message* _tmPf0 = JB_Syx_OperatorPlus(kJB_SyxStr, Str);
		JB_Incr(_tmPf0);
		JB_Decr(Str);
		Message* X = SC_MakeDecl(JB_LUB[0], JB_LUB[1161], _tmPf0, 0);
		JB_Incr(X);
		JB_Decr(_tmPf0);
		JB_Msg_BecomeMsg(Conf, X);
		JB_Decr(X);
		SC_Mod_MoveToInitFunc(SC__Comp_program, Conf);
	}
	JB_Decr(Arg);
}

void SC_Comp__SetupEnv() {
	JB_FreeIfDead(JB_App__Parent(nil, false));
	SC_Comp__ClearEnvs();
	SC__Options_Dev = JB_Msg_Int(JB_Msg_GetConf(JB_App__Prefs(), JB_LUB[1865], false), 0);
	if (!JB_App__IsMainThread()) {
		(JB_App__SetThreadName(JB_LUB[1866]));
	}
	JB_ErrorColors__DisableIfNoTerminal();
	JB__Err_AutoPrint = 1;
	PicoGlobalConf()->DesiredThreadCount = 1;
	if (JB_App__Parent(nil, false)) {
		JB__Err_AutoPrint = 0;
		JB__ErrorColors_Enabled = false;
	}
}

SCClass* SC_Comp__SoftClass(JB_String* Name) {
	return SC_Comp__FindClassName(Name, kSC__SCNodeFindMode_NoErrors);
}

bool SC_Comp__SortModulesAndClasses() {
	{
		Array* _LoopSrcf2 = SC__Comp_ClassList;
		int _if0 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf2, _if0));
			if (C == nil) {
				break;
			}
			C->Depth = 0;
			(++_if0);
		};
	}
	;
	{
		Array* _LoopSrcf5 = SC__Comp_ClassList;
		int _if3 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf5, _if3));
			if (C == nil) {
				break;
			}
			SC_Class_GetDepth(C);
			(++_if3);
		};
	}
	;
	JB_Array_Sort(SC__Comp_ModuleList, ((FP_SorterComparer)(SC_Comp__ModulesSorter)));
	JB_Array_Sort(SC__Comp_ClassList, ((FP_SorterComparer)(SC_Comp__ClassSorter)));
	return JB_Rec_OK(JB_StdErr);
}

JB_File* SC_Comp__Speedie() {
	JB_String* _tmPf0 = SC_Comp__Projects();
	JB_Incr(_tmPf0);
	JB_File* _tmPf1 = JB_Str_ChildFile(_tmPf0, JB_LUB[596]);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_File* SC_Comp__SpeedieDir(JB_String* S) {
	JB_String* _tmPf1 = JB_File__SpeedieDir();
	JB_Incr(_tmPf1);
	JB_String* _tmPf0 = JB_Str_Child(_tmPf1, S);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_File* _tmPf2 = JB_Str_AsFile(_tmPf0);
	JB_Incr(_tmPf2);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_String* SC_Comp__SpeedieProj() {
	return ({
		JB_String* _X = SC__Comp__SpeedieProj;
		JB_Incr(_X);
		if (!JB_Str_Exists(_X)) {
			JB_String* _tmPf0 = SC_Comp__Projects();
			JB_Incr(_tmPf0);
			JB_SetRef(_X, JB_Str_SyntaxAccess(_tmPf0, JB_LUB[596]));
			JB_Decr(_tmPf0);
			JB_SetRef(SC__Comp__SpeedieProj, _X);
		}
		JB_SafeDecr(_X);
		 _X;
	});
}

bool SC_Comp__Stage(JB_String* Name) {
	if (!JB_Rec_OK(JB_StdErr)) {
		return nil;
	}
	if (SC__Options_PrintStages) {
		JB_String* Space = JB_Str_MulBool(JB_LUB[27], (SC__Comp_CurrStage <= 9));
		JB_Incr(Space);
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendByte(_fsf0, ' ');
		JB_FS_AppendInt32(_fsf0, SC__Comp_CurrStage);
		JB_FS_AppendString(_fsf0, Space);
		JB_Decr(Space);
		JB_FS_AppendString(_fsf0, JB_LUB[171]);
		JB_FS_AppendString(_fsf0, Name);
		JB_FS_AppendString(_fsf0, JB_LUB[172]);
		JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf1);
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
	(++SC__Comp_CurrStage);
	JB_SetRef(SC__Comp_StageName, Name);
	return true;
}

SCClass* SC_Comp__FindClassName(JB_String* Name, SCNodeFindMode Mode) {
	return SC_Base_FindClass(SC__Comp_program, Name, nil, Mode);
}

SCClass* SC_Comp__SyntaxAccess(Message* Name) {
	if (Name) {
		return SC_Base_FindClassMsg(SC__Comp_program, Name, 0);
	}
	return nil;
}

void SC_Comp__SyntaxAppend(Message* M) {
	JB_Tree_SyntaxAppend(SC__Comp_InternalFile->LiveAST, M);
}

void SC_Comp__TestDate() {
	int64 Day = 5662310400;
	int64 Hour = 235929600;
	int64 Min = 3932160;
	int64 Sec = 64 * 1024;
	if (Sec != 65536) {
	}
	if (Min != 3932160) {
	}
	if (Hour != 235929600) {
	}
	if (Day != 5662310400) {
	}
}

void SC_Comp__TestTask() {
	LessThan3* Xxx = JB_Task_LessThan3_Constructor(nil, JB_LUB[441], 5, JB_LUB[442]);
	JB_Incr(Xxx);
	bool Z = JB_Task_LessThan3_interface_SyntaxCall((Xxx), 8);
	JB_Decr(Xxx);
}

void SC_Comp__Timer(JB_String* Name) {
	Date Curr = JB_Date__Now();
	if (SC__Comp_LastTime) {
		SC_Comp__TimerSub(SC__Comp_LastTimeName, ((int)(JB_Date_OperatorMinus(Curr, SC__Comp_LastTime))));
	}
	if ((!JB_Str_Exists(Name)) and (!SC__Options_Silent)) {
		JB_Obj_Print(SC__Comp_TimerOutput);
	}
	JB_SetRef(SC__Comp_LastTimeName, Name);
	SC__Comp_LastTime = JB_Date__Now();
}

void SC_Comp__TimerSub(JB_String* S, int Durr) {
	Durr = (Durr - SC__Comp_stParseTime);
	SC__Comp_stParseTimeTotal = (SC__Comp_stParseTimeTotal + SC__Comp_stParseTime);
	SC__Comp_stParseTime = 0;
	SC_Comp__AppendCompilerTime(S, Durr);
}

bool SC_Comp__TimeTest(Date Elapsed) {
	//;
	bool CanInstall = true;
	JB_Flow__DisabledIncr(1);
	if ((SC__Options_SelfReplacement) and (((JB_Str_Equals(SC__Options_Variant, JB_LUB[40], true))) and (JB_Platform__Release()))) {
		int ReliableTime = ((int)(64.0f * (1024.0f * 2.5f)));
		CanInstall = (Elapsed < ReliableTime);
		if ((!CanInstall)) {
			JB_Str_Fail(JB_LUB[858]);
		}
	}
	JB_Flow__DisabledIncr(-1);
	return CanInstall;
}

bool SC_Comp__TryCopyLib(JB_File* Ldest, JB_String* Name, JB_String* Base) {
	bool Rz = false;
	JB_String* _tmPf0 = JB_Str_Child(Base, Name);
	JB_Incr(_tmPf0);
	JB_File* Lib = JB_Str_AsFile(_tmPf0);
	JB_Incr(Lib);
	JB_Decr(_tmPf0);
	if (JB_File_Exists(Lib)) {
		JB_StringC* _tmPf1 = JB_Str_CastZero(Ldest);
		JB_Incr(_tmPf1);
		JB_File_HardLinkTo(Lib, _tmPf1);
		JB_Decr(_tmPf1);
		Rz = true;
	}
	JB_Decr(Lib);
	return Rz;
}

bool SC_Comp__TryVariousStartModes() {
	bool Rz = false;
	JB_File* F = SC_Comp__CanTryModes();
	JB_Incr(F);
	if (!F) {
		JB_Decr(F);
		return nil;
	}
	JB_File* It = SC_Comp__UsingScript(F);
	JB_Incr(It);
	if (It) {
		JB_String* Cwd = JB_File__CWD();
		JB_Incr(Cwd);
		if (SC_Comp__ScriptRecompile(F, It)) {
			SC_Comp__CompileTime();
		}
		if (JB_Rec_OK(JB_StdErr)) {
			(JB_App__CWDSet(Cwd));
			JB_StringC* _tmPf0 = JB_Str_CastZero(F);
			JB_Incr(_tmPf0);
			(JB_App__SetEnv(JB_LUB[114], _tmPf0));
			JB_Decr(_tmPf0);
			JB_String* _tmPf1 = SC_Comp__exe();
			JB_Incr(_tmPf1);
			Array* _tmPf2 = JB_App__Args();
			JB_Incr(_tmPf2);
			JB_App__TurnInto(_tmPf1, _tmPf2);
			JB_Decr(_tmPf1);
			JB_Decr(_tmPf2);
		}
		JB_Decr(Cwd);
		Rz = true;
	}
	JB_Decr(F);
	JB_Decr(It);
	return Rz;
}

JB_File* SC_Comp__UsingScript(JB_File* F) {
	JB_File* Rz = nil;
	JB_Incr(Rz);
	if (!(SC__Options_Compile and (!JB_File_IsDir(F)))) {
		JB_Decr(Rz);
		return nil;
	}
	JB_String* _tmPf0 = JB_File_Read(F, 16, true);
	JB_Incr(_tmPf0);
	if (!JB_Str_OperatorStarts(_tmPf0, JB_LUB[1943])) {
		JB_Decr(_tmPf0);
		JB_Decr(Rz);
		return nil;
	}
	JB_Decr(_tmPf0);
	JB_SetRef(Rz, SC_Comp__ScriptLoc(F));
	if (JB__Err_AutoPrint == kJB__ErrorFlags_PrintAndKeep) {
		JB__Err_AutoPrint = 0;
	}
	SC__Options_Scripting = true;
	SC__Options_Silent = true;
	SC__Options_PrintCompileString = false;
	(++SC__Options_OperationCount);
	Array* _tmPf1 = JB_App__Args();
	JB_Incr(_tmPf1);
	JB_Array_Remove(_tmPf1, 0);
	JB_Decr(_tmPf1);
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* SC_Comp__VariantSuffix() {
	if ((SC__Options_SelfReplacement) and SC__Options_Compile) {
		return JB_Str_OperatorPlus(JB_LUB[40], SC__Options_Variant);
	}
	return SC__Options_Variant;
}

void SC_Comp__VariousSelfTests() {
	JB_String* T = JB_Constants__TestJB();
	JB_Incr(T);
	JB_Decr(T);
	if ((SC__Options_PerryOutput < 2) and ((!SC__Options_Scripting) and (!JB_FreeIfDead(JB_App__Parent(nil, false))))) {
		if (({
			JB_String* _tmPf1 = (JB_Str_OperatorMul(SC__Cpp_FindGlobalsCpp, 12));
			JB_Incr(_tmPf1);
			bool _tmPf0 = JB_Str_CompressTest(_tmPf1, false, 3);
			JB_Decr(_tmPf1);
			 _tmPf0;
		}) and SC__Options_PrintLibraries) {
			JB_PrintLine(JB_LUB[1850]);
		}
	}
}

SCNode* SC_Comp__WrongConf(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if ((SC__Comp_ConfMsg)) {
		JB_Msg_Fail(Node, JB_LUB[859]);
		return nil;
	}
	if (true) {
		JB_Msg_Fail(Node, JB_LUB[860]);
	}
	return nil;
}

SCFunction* SC_Comp__XFunc(JB_String* Name, Message* M) {
	SCNode* Fn = ((SCNode*)JB_Dict_Value0(SC__Comp_ExportNames, Name));
	if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
		return ((SCFunction*)Fn);
	}
	if (M) {
		if (Fn) {
			if (true) {
				JB_Msg_Fail(M, JB_LUB[861]);
			}
		}
		 else {
			if (true) {
				JB_Msg_Fail(M, JB_LUB[862]);
			}
		}
	}
	return nil;
}



void JB_ErrorColors__DisableIfNoTerminal() {
	JB__ErrorColors_Enabled = JB_IsTerminal(kJB__FileDes_StdOut);
}

int JB_ErrorColors__Init_() {
	{
	}
	;
	return 0;
}


void SC_FastStringOpts__FS(Message* Exp, Message* Getresult) {
	Message* Fs2 = ((Message*)JB_Ring_First(((Message*)JB_Ring_Last(Getresult))));
	SCDecl* T2 = SC_TypeOfExpr(Fs2, nil, nil);
	if (!SC_Decl_SyntaxIs(T2, kSC__SCDeclInfo_CompilerCreated)) {
		return;
	}
	Message* Place = SC_Msg_ParentPoint(T2->Default);
	Message* Arg = ((Message*)JB_Ring_Parent(Place));
	if (!JB_Msg_Expect(Arg, kJB_SyxArg, nil)) {
		return;
	}
	Message* Fs1 = ((Message*)JB_Ring_PrevSib(Getresult));
	JB_String* Name2 = Fs2->Name;
	{
		Message* Ch = Arg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Arg));
		while ((Ch) and (Ch != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Ch));
			if (SC_Msg_OperatorIsThing(Ch, Name2)) {
				JB_SetRef(Ch->Name, Fs1->Name);
				JB_SetRef(Ch->Obj, Fs1->Obj);
			}
			Ch = _N_f2;
		};
		;
	}
	;
	SC_Msg_SafeRemove(Place, kJB_SyxSheb);
	SC_Msg_SafeRemove(Exp, kJB_SyxSheb);
	(++SC__FastStringOpts_FSRemoved);
}

int SC_FastStringOpts__Init_() {
	{
	}
	;
	return 0;
}

void SC_FastStringOpts__String(Message* Str) {
	if (!(((JB_Msg_EqualsSyx(Str, kJB_SyxStr, false)) or ((JB_Msg_EqualsSyx(Str, kJB_SyxSStr, false)) or (JB_Msg_EqualsSyx(Str, kJB_SyxBack, false)))) and ((JB_Str_EqualsInt(Str->Name, 1, false))))) {
		return;
	}
	JB_SetRef(Str->Obj, SC_TypeByte->TypeNormal);
	SCFunction* B = ({
		SCFunction* _X = SC__FastStringOpts__ByteFunc;
		if (!_X) {
			_X = SC_Comp__XFunc(JB_LUB[1018], nil);
			JB_SetRef(SC__FastStringOpts__ByteFunc, _X);
		}
		 _X;
	});
	JB_SetRef(((Message*)JB_Ring_Parent(Str))->Obj, B);
	Str->Func = kJB_SyxChar;
	JB_FreeIfDead(SC_TypeOfChar(Str, nil, nil));
	(++SC__FastStringOpts_StrRemoved);
}


bool SC_FB__AppOptions_alive(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[0])) {
		return nil;
	}
	JB_PrintLine(JB_LUB[194]);
	return true;
}

bool SC_FB__AppOptions_arch(JB_String* Name, JB_String* Value, FastString* Purpose) {
	JB_String* Str = JB_LUB[580];
	JB_Incr(Str);
	JB_String* _tmPf3 = JB_Str_OperatorPlus(JB_LUB[581], Str);
	JB_Incr(_tmPf3);
	SC_FB__Explain(Purpose, _tmPf3);
	{
		Array* _LoopSrcf2 = JB_Str_OperatorDivide(Str, '/');
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			JB_String* V = ((JB_String*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(V);
			if (V == nil) {
				JB_Decr(V);
				break;
			}
			if (JB_Str_Equals(V, Value, true)) {
				JB_SetRef(SC__Options_Arch, V);
			}
			JB_Decr(V);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
		JB_Decr(_tmPf3);
	}
	;
	JB_Decr(Str);
	return false;
}

bool SC_FB__AppOptions_beep(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[195])) {
		return nil;
	}
	SC__Options_Beep = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_breakonerr(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[0])) {
		return nil;
	}
	JB__Err_AutoPrint = SC_Str_OptionInt(Value);
	return false;
}

bool SC_FB__AppOptions_check(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[196])) {
		return nil;
	}
	SC__Options_Compile = false;
	SC__Options_ModeCpp = false;
	return false;
}

bool SC_FB__AppOptions_clean(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[1637])) {
		return nil;
	}
	if (SC_Ext__Clean()) {
		JB_PrintLine(JB_LUB[1638]);
	}
	return true;
}

bool SC_FB__AppOptions_codesign(JB_String* Name, JB_String* Value, FastString* Purpose) {
	JB_Incr(Value);
	if (!SC_FB__Explain(Purpose, JB_LUB[1867])) {
		JB_Decr(Value);
		return nil;
	}
	if ((JB_Str_Equals(Value, JB_LUB[0], true)) or (JB_Str_Equals(Value, JB_LUB[31], true))) {
		Message* _tmPf3 = JB_App__Prefs();
		JB_Incr(_tmPf3);
		Message* _tmPf2 = JB_Msg_GetConf(_tmPf3, kJB_codesign_native, false);
		JB_Incr(_tmPf2);
		JB_String* _tmPf1 = JB_config_AsString(_tmPf2);
		JB_Incr(_tmPf1);
		JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[1868], _tmPf1);
		JB_Incr(_tmPf0);
		JB_Decr(_tmPf1);
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
		JB_Decr(Value);
		JB_Decr(_tmPf2);
		JB_Decr(_tmPf3);
		return true;
	}
	if ((JB_Str_Equals(Value, JB_LUB[1869], false)) or ((JB_Str_Equals(Value, JB_LUB[36], false)) or (JB_Str_Equals(Value, JB_LUB[518], false)))) {
		JB_SetRef(Value, JB_LUB[0]);
	}
	Message* _tmPf4 = JB_App__Prefs();
	JB_Incr(_tmPf4);
	(JB_Msg_SetStr(_tmPf4, kJB_codesign_native, Value));
	JB_App__PrefsSave();
	JB_String* _tmPf5 = JB_Str_OperatorPlus(JB_LUB[1870], Value);
	JB_Incr(_tmPf5);
	JB_Decr(Value);
	JB_PrintLine(_tmPf5);
	JB_Decr(_tmPf5);
	JB_Decr(_tmPf4);
	return true;
}

bool SC_FB__AppOptions_cpp(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[606])) {
		return nil;
	}
	SC__Options_ModeCpp = SC_Str_OptionBool(Value);
	if (SC__Options_ModeCpp) {
		SC__Options_ModePack = false;
		(SC_SC_Targets__SyntaxAccessSet(JB_LUB[607], false));
	}
	return false;
}

bool SC_FB__AppOptions_crash(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[450])) {
		return nil;
	}
	JB_App__Crash(JB_LUB[0]);
	return nil;
}

bool SC_FB__AppOptions_directtest(JB_String* Name, JB_String* Value, FastString* Purpose) {
	SC_FB__Explain(Purpose, JB_LUB[608]);
	SC__Options_IsDirectTest = SC_Str_OptionBool(Value);
	(SC_SC_Targets__SyntaxAccessSet(JB_LUB[609], SC__Options_IsDirectTest));
	return false;
}

bool SC_FB__AppOptions_dosign(JB_String* Name, JB_String* Value, FastString* Purpose) {
	SC_FB__Explain(Purpose, JB_LUB[197]);
	return true;
}

bool SC_FB__AppOptions_elf(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[883])) {
		return nil;
	}
	JB_App__Say(JB_LUB[884], true);
	if (true) {
		JB_Str_Fail(JB_LUB[885]);
	}
	return true;
}

bool SC_FB__AppOptions_env(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[198])) {
		return nil;
	}
	{
		Dictionary* _LoopSrcf2 = JB_App__Env();
		JB_Incr(_LoopSrcf2);
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf2);
		JB_Incr(_navf0);
		JB_Decr(_LoopSrcf2);
		while (true) {
			JB_String* S = ((JB_String*)JB_DictionaryReader_NextValue(_navf0));
			JB_Incr(S);
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			JB_String* K = JB_Nav_Name(_navf0);
			JB_Incr(K);
			JB_String* _tmPf4 = JB_Str_OperatorPlus(JB_LUB[77], S);
			JB_Incr(_tmPf4);
			JB_Decr(S);
			JB_String* _tmPf3 = JB_Str_OperatorPlus(K, _tmPf4);
			JB_Incr(_tmPf3);
			JB_Decr(K);
			JB_Decr(_tmPf4);
			JB_PrintLine(_tmPf3);
			JB_Decr(_tmPf3);
		};
		JB_Decr(_navf0);
	}
	;
	return true;
}

bool SC_FB__AppOptions_errortest(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[199])) {
		return nil;
	}
	JB_Str_PrintError(JB_LUB[200]);
	return true;
}

bool SC_FB__AppOptions_flow(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[610])) {
		return nil;
	}
	bool B = SC_Str_OptionBool(Value);
	SC__Options_GenFlowControlCode = B;
	(SC_SC_Targets__SyntaxAccessSet(JB_LUB[611], B));
	return false;
}

bool SC_FB__AppOptions_flowmode(JB_String* Name, JB_String* Value, FastString* Purpose) {
	0;
	return false;
}

bool SC_FB__AppOptions_force(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[201])) {
		return nil;
	}
	SC__Options_ForceRecompile = true;
	return false;
}

bool SC_FB__AppOptions_gcc(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[202])) {
		return nil;
	}
	JB_SetRef(SC__Ext_CppCompilerPath, Value);
	return false;
}

bool SC_FB__AppOptions_help(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[775])) {
		return nil;
	}
	SC_FB__Help();
	return true;
}

bool SC_FB__AppOptions_ignorecantsave(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[0])) {
		return nil;
	}
	SC__Options_IgnoreCantSaveErrors = true;
	return false;
}

bool SC_FB__AppOptions_keepallerrors(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[203])) {
		return nil;
	}
	SC__Options_KeepAllErrors = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_maxvars(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[204])) {
		return nil;
	}
	SC__Options_CheckMaxVars = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_nocolor(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[205])) {
		return nil;
	}
	(SC_Options__ColorSet(false));
	return false;
}

bool SC_FB__AppOptions_nocompile(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[206])) {
		return nil;
	}
	SC__Options_Compile = false;
	return false;
}

bool SC_FB__AppOptions_noisy(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[207])) {
		return nil;
	}
	JB_PrintLine(JB_LUB[208]);
	SC__Options_PrintCompileString = true;
	JB__File_DebugExecute = true;
	SC__Options_PrintLibraries = true;
	SC__Options_ArgStats = true;
	return false;
}

bool SC_FB__AppOptions_optimise(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[209])) {
		return nil;
	}
	SC__Options_Optimise = JB_Str_TextIntegerValid(Value, nil);
	return false;
}

bool SC_FB__AppOptions_output_path(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[1017])) {
		return nil;
	}
	JB_SetRef(SC__Options_output_path, JB_File_PathFix_(Value));
	JB_String* _tmPf1 = JB_Str_Parent(SC__Options_output_path);
	JB_Incr(_tmPf1);
	JB_File* _tmPf0 = JB_Str_AsFile(_tmPf1);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_File_MustExist(_tmPf0, JB_LUB[0]);
	JB_Decr(_tmPf0);
	SC__Options_ForceRecompile = true;
	return false;
}

bool SC_FB__AppOptions_pack(JB_String* Name, JB_String* Value, FastString* Purpose) {
	SC__Options_ModePack = SC_Str_OptionBool(Value);
	if (SC__Options_ModePack) {
		SC__Options_ModeCpp = false;
	}
	(SC_SC_Targets__SyntaxAccessSet(JB_LUB[607], SC__Options_ModePack));
	return false;
}

bool SC_FB__AppOptions_path(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[0])) {
		return nil;
	}
	JB_String* _tmPf0 = JB_App__Path();
	JB_Incr(_tmPf0);
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
	return false;
}

bool SC_FB__AppOptions_perry(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[0])) {
		return nil;
	}
	SC__Options_PerryOutput = 1;
	bool RealPerry = (JB_Str_Equals(Value, JB_LUB[535], true));
	SC__Options_PerryOutput = (SC__Options_PerryOutput + RealPerry);
	JB_File* _tmPf1 = JB_File__Prefs(JB_LUB[536]);
	JB_Incr(_tmPf1);
	JB_String* _tmPf0 = JB_File_ReadAll(_tmPf1, 134217728, true);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_SetRef(SC__Comp_InsecureWords, JB_Str_Dict(_tmPf0, '\n'));
	JB_Decr(_tmPf0);
	return false;
}

bool SC_FB__AppOptions_print(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[0])) {
		return nil;
	}
	JB_Print(Value);
	return true;
}

bool SC_FB__AppOptions_quiet(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[210])) {
		return nil;
	}
	SC__Options_PrintCompileString = false;
	return false;
}

bool SC_FB__AppOptions_self(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[1914])) {
		return nil;
	}
	if (JB_App__No(JB_LUB[1090])) {
		SC__Options_PerryOutput = 1;
	}
	JB_String* _tmPf0 = SC_Comp__SpeedieProj();
	JB_Incr(_tmPf0);
	JB_FreeIfDead(SC_FB__TryUseProject(_tmPf0, false));
	JB_Decr(_tmPf0);
	return true;
}

bool SC_FB__AppOptions_silent(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[211])) {
		return nil;
	}
	SC__Options_PrintCompileString = false;
	SC__Options_Silent = true;
	return false;
}

bool SC_FB__AppOptions_single(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[0])) {
		return nil;
	}
	SC__Options_SingleCppOutput = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_stages(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[212])) {
		return nil;
	}
	SC__Options_PrintStages = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_target(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[886])) {
		return nil;
	}
	if (JB_Str_Equals(Value, JB_LUB[351], true)) {
		if (true) {
			JB_Str_Fail(JB_LUB[887]);
		}
	}
	(SC_SC_Targets__SyntaxAccessSet(Value, true));
	return false;
}

bool SC_FB__AppOptions_targetdebug(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[0])) {
		return nil;
	}
	SC__Options_TargetDebug = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_usescriptloc(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[0])) {
		return nil;
	}
	SC__Options_UseScriptLoc = JB_MaybeBool__Known(true);
	return false;
}

bool SC_FB__AppOptions_variant(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[0])) {
		return nil;
	}
	JB_SetRef(SC__Options_Variant, JB_int_RenderFS(((int)JB_Str_TextIntegerValid(Value, nil)), nil));
	SC__Options_PerryOutput = 1;
	(SC_Options__ColorSet(false));
	if (SC__Options_Optimise < 0) {
		SC__Options_Optimise = 1;
	}
	return false;
}

bool SC_FB__AppOptions_warn(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[213])) {
		return nil;
	}
	SC__Options_Warnings = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppTransCompile(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[214])) {
		return nil;
	}
	SC__Options_ExternalCompile = true;
	(SC_Options__ColorSet(false));
	return false;
}

bool SC_FB__AppVersionNumber(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if (!SC_FB__Explain(Purpose, JB_LUB[451])) {
		return nil;
	}
	return SC_FB__CompilerInfo();
}

void SC_FB__CheckSelfModifying() {
	int T2 = SC_FB__CheckSelfModifying2();
	if (T2 == 1) {
		SC__Options_SelfReplacement = true;
		SC__Options_ExternalCompile = true;
		SC__Options_ForceRecompile = true;
		SC_FB__SetFlow();
		(SC_SC_Targets__SyntaxAccessSet(JB_LUB[180], true));
	}
	 else if (T2 == 2) {
		SC__Options_ProjectIsMiniLib = true;
	}
}

int SC_FB__CheckSelfModifying2() {
	int Rz = 0;
	if (((JB_String*)JB_Str_Exists(SC__Options_SingleFileInput))) {
		return 0;
	}
	JB_File* Bpp = SC__Comp_BaseProjectPath;
	JB_Incr(Bpp);
	if (!Bpp) {
		JB_Decr(Bpp);
		return 0;
	}
	JB_String* P = JB_Str_TrimSlashes(Bpp, true);
	JB_Incr(P);
	JB_Decr(Bpp);
	JB_File* _tmPf0 = SC_Comp__Speedie();
	JB_Incr(_tmPf0);
	JB_String* Spd = JB_Str_TrimSlashes(_tmPf0, true);
	JB_Incr(Spd);
	JB_Decr(_tmPf0);
	JB_File* _tmPf1 = SC_Comp__Jeebox();
	JB_Incr(_tmPf1);
	JB_String* Jb = JB_Str_TrimSlashes(_tmPf1, true);
	JB_Incr(Jb);
	JB_Decr(_tmPf1);
	if (JB_Str_Equals(P, Spd, true)) {
		if (SC__Options_SelfReplacement) {
			Rz = 0;
		}
		 else {
			Rz = 1;
		}
	}
	 else if (JB_Str_Equals(P, Jb, true)) {
		Rz = 2;
	}
	JB_Decr(P);
	JB_Decr(Spd);
	JB_Decr(Jb);
	return Rz;
}

bool SC_FB__CompilerInfo() {
	FastString* _fsf0 = JB_FS_Constructor(nil);
	JB_Incr(_fsf0);
	JB_FS_AppendString(_fsf0, JB_LUB[215]);
	JB_FS_AppendInt32(_fsf0, (2025032820));
	JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
	JB_Incr(_tmPf1);
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
	return true;
}

bool SC_FB__Explain(FastString* Purpose, JB_String* Name) {
	if (!Purpose) {
		return true;
	}
	JB_FS_AppendString(Purpose, Name);
	return false;
}

void SC_FB__Help() {
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	FastString* Fs_tester = JB_FS_Constructor(nil);
	JB_Incr(Fs_tester);
	JB_FS_AppendString(Fs, JB_LUB[727]);
	JB_String* _tmPf6 = JB_App__FileName();
	JB_Incr(_tmPf6);
	JB_FS_AppendString(Fs, _tmPf6);
	JB_Decr(_tmPf6);
	JB_FS_AppendString(Fs, JB_LUB[728]);
	//;
	JB_FS_AppendString(Fs, JB_LUB[729]);
	JB_String* _tmPf8 = SC_Comp__SpeedieProj();
	JB_Incr(_tmPf8);
	JB_String* _tmPf7 = JB_Str_Parent(_tmPf8);
	JB_Incr(_tmPf7);
	JB_Decr(_tmPf8);
	JB_FS_AppendString(Fs, _tmPf7);
	JB_Decr(_tmPf7);
	//;
	//;
	JB_FS_AppendString(Fs, JB_LUB[730]);
	JB_String* _tmPf9 = JB_Platform();
	JB_Incr(_tmPf9);
	JB_FS_AppendString(Fs, _tmPf9);
	JB_Decr(_tmPf9);
	JB_FS_AppendByte(Fs, '+');
	JB_String* _tmPf10 = JB_Platform__CPU_Name();
	JB_Incr(_tmPf10);
	JB_FS_AppendString(Fs, _tmPf10);
	JB_Decr(_tmPf10);
	//;
	//;
	JB_FS_AppendString(Fs, JB_LUB[731]);
	JB_FS_AppendBool(Fs, false);
	//;
	//;
	JB_FS_AppendString(Fs, JB_LUB[732]);
	JB_FS_AppendInt32(Fs, ((int)kJB_Syxmax));
	//;
	{
		DictionaryReader* _navf4 = JB_Dict_Navigate(SC__FB_AppOptions);
		JB_Incr(_navf4);
		while (true) {
			DTWrap* V = ((DTWrap*)JB_DictionaryReader_NextValue(_navf4));
			JB_Incr(V);
			if (V == nil) {
				JB_Decr(V);
				break;
			}
			JB_String* K = JB_Nav_Name(_navf4);
			JB_Incr(K);
			(((FP_ShellOption)JB_Wrap_SyntaxAccess(V)))(JB_LUB[0], JB_LUB[0], Fs_tester);
			FP_ShellOption Val = ((FP_ShellOption)JB_Wrap_Value(V));
			JB_Decr(V);
			if (Val and Fs_tester->Length) {
				(JB_FS_LengthSet(Fs_tester, 0));
				JB_FS_AppendString(Fs, JB_LUB[733]);
				JB_FS_AppendString(Fs, K);
				JB_FS_AppendMultiByte(Fs, ' ', 17 - JB_Str_LengthUTF8(K));
				(Val)(JB_LUB[0], JB_LUB[0], Fs);
			}
			JB_Decr(K);
		};
		JB_Decr(_navf4);
	}
	;
	JB_Decr(Fs_tester);
	JB_String* _tmPf11 = JB_FS_GetResult(Fs);
	JB_Incr(_tmPf11);
	JB_Decr(Fs);
	JB_PrintLine(_tmPf11);
	JB_Decr(_tmPf11);
}

int SC_FB__Init_() {
	{
		JB_SetRef(SC__FB_AppOptions, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf0 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_nocompile)));
		JB_Incr(_tmPf0);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1090], _tmPf0));
		JB_Decr(_tmPf0);
		DTWrap* _tmPf1 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_breakonerr)));
		JB_Incr(_tmPf1);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1944], _tmPf1));
		JB_Decr(_tmPf1);
		DTWrap* _tmPf2 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_path)));
		JB_Incr(_tmPf2);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1723], _tmPf2));
		JB_Decr(_tmPf2);
		DTWrap* _tmPf3 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_beep)));
		JB_Incr(_tmPf3);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1945], _tmPf3));
		JB_Decr(_tmPf3);
		DTWrap* _tmPf4 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_keepallerrors)));
		JB_Incr(_tmPf4);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1946], _tmPf4));
		JB_Decr(_tmPf4);
		DTWrap* _tmPf5 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_env)));
		JB_Incr(_tmPf5);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1947], _tmPf5));
		JB_Decr(_tmPf5);
		DTWrap* _tmPf6 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_FB__AppTransCompile))));
		JB_Incr(_tmPf6);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[370], _tmPf6));
		JB_Decr(_tmPf6);
		DTWrap* _tmPf7 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_arch)));
		JB_Incr(_tmPf7);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1948], _tmPf7));
		JB_Decr(_tmPf7);
		DTWrap* _tmPf8 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_gcc)));
		JB_Incr(_tmPf8);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1949], _tmPf8));
		JB_Decr(_tmPf8);
		DTWrap* _tmPf9 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_perry)));
		JB_Incr(_tmPf9);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1089], _tmPf9));
		JB_Decr(_tmPf9);
		DTWrap* _tmPf10 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_usescriptloc)));
		JB_Incr(_tmPf10);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1950], _tmPf10));
		JB_Decr(_tmPf10);
		DTWrap* _tmPf11 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_check)));
		JB_Incr(_tmPf11);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[249], _tmPf11));
		JB_Decr(_tmPf11);
		DTWrap* _tmPf12 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_errortest)));
		JB_Incr(_tmPf12);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1951], _tmPf12));
		JB_Decr(_tmPf12);
		DTWrap* _tmPf13 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_flowmode)));
		JB_Incr(_tmPf13);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[554], _tmPf13));
		JB_Decr(_tmPf13);
		DTWrap* _tmPf14 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_flow)));
		JB_Incr(_tmPf14);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[611], _tmPf14));
		JB_Decr(_tmPf14);
		DTWrap* _tmPf15 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_noisy)));
		JB_Incr(_tmPf15);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1952], _tmPf15));
		JB_Decr(_tmPf15);
		DTWrap* _tmPf16 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_alive)));
		JB_Incr(_tmPf16);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1953], _tmPf16));
		JB_Decr(_tmPf16);
		DTWrap* _tmPf17 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_ignorecantsave)));
		JB_Incr(_tmPf17);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1954], _tmPf17));
		JB_Decr(_tmPf17);
		DTWrap* _tmPf18 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_quiet)));
		JB_Incr(_tmPf18);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1955], _tmPf18));
		JB_Decr(_tmPf18);
		DTWrap* _tmPf19 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_silent)));
		JB_Incr(_tmPf19);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1956], _tmPf19));
		JB_Decr(_tmPf19);
		DTWrap* _tmPf20 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_stages)));
		JB_Incr(_tmPf20);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1957], _tmPf20));
		JB_Decr(_tmPf20);
		DTWrap* _tmPf21 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_print)));
		JB_Incr(_tmPf21);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1958], _tmPf21));
		JB_Decr(_tmPf21);
		DTWrap* _tmPf22 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_directtest)));
		JB_Incr(_tmPf22);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1959], _tmPf22));
		JB_Decr(_tmPf22);
		DTWrap* _tmPf23 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_single)));
		JB_Incr(_tmPf23);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1960], _tmPf23));
		JB_Decr(_tmPf23);
		DTWrap* _tmPf24 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_elf)));
		JB_Incr(_tmPf24);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1961], _tmPf24));
		JB_Decr(_tmPf24);
		DTWrap* _tmPf25 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_self)));
		JB_Incr(_tmPf25);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[180], _tmPf25));
		JB_Decr(_tmPf25);
		DTWrap* _tmPf26 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_crash)));
		JB_Incr(_tmPf26);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1962], _tmPf26));
		JB_Decr(_tmPf26);
		DTWrap* _tmPf27 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_pack)));
		JB_Incr(_tmPf27);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[607], _tmPf27));
		JB_Decr(_tmPf27);
		DTWrap* _tmPf28 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_targetdebug)));
		JB_Incr(_tmPf28);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1963], _tmPf28));
		JB_Decr(_tmPf28);
		DTWrap* _tmPf29 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_target)));
		JB_Incr(_tmPf29);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1343], _tmPf29));
		JB_Decr(_tmPf29);
		DTWrap* _tmPf30 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_warn)));
		JB_Incr(_tmPf30);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[247], _tmPf30));
		JB_Decr(_tmPf30);
		DTWrap* _tmPf31 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_maxvars)));
		JB_Incr(_tmPf31);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1964], _tmPf31));
		JB_Decr(_tmPf31);
		DTWrap* _tmPf32 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_nocolor)));
		JB_Incr(_tmPf32);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1965], _tmPf32));
		JB_Decr(_tmPf32);
		DTWrap* _tmPf33 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_optimise)));
		JB_Incr(_tmPf33);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1966], _tmPf33));
		JB_Decr(_tmPf33);
		DTWrap* _tmPf34 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_cpp)));
		JB_Incr(_tmPf34);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[105], _tmPf34));
		JB_Decr(_tmPf34);
		DTWrap* _tmPf35 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_output_path)));
		JB_Incr(_tmPf35);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1967], _tmPf35));
		JB_Decr(_tmPf35);
		DTWrap* _tmPf36 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_force)));
		JB_Incr(_tmPf36);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1968], _tmPf36));
		JB_Decr(_tmPf36);
		DTWrap* _tmPf37 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_variant)));
		JB_Incr(_tmPf37);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1969], _tmPf37));
		JB_Decr(_tmPf37);
		DTWrap* _tmPf38 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_codesign)));
		JB_Incr(_tmPf38);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1970], _tmPf38));
		JB_Decr(_tmPf38);
		DTWrap* _tmPf39 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_dosign)));
		JB_Incr(_tmPf39);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1971], _tmPf39));
		JB_Decr(_tmPf39);
		DTWrap* _tmPf40 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_clean)));
		JB_Incr(_tmPf40);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1972], _tmPf40));
		JB_Decr(_tmPf40);
		DTWrap* _tmPf41 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_FB__AppVersionNumber))));
		JB_Incr(_tmPf41);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1973], _tmPf41));
		JB_Decr(_tmPf41);
		DTWrap* _tmPf42 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_FB__AppVersionNumber))));
		JB_Incr(_tmPf42);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1974], _tmPf42));
		JB_Decr(_tmPf42);
		DTWrap* _tmPf43 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_help)));
		JB_Incr(_tmPf43);
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1975], _tmPf43));
		JB_Decr(_tmPf43);
	}
	;
	return 0;
}

bool SC_FB__ParseArgs() {
	Array* _tmPf0 = JB_App__Args();
	JB_Incr(_tmPf0);
	bool _tmPf1 = SC_FB__ParseArgsSub(_tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool SC_FB__ParseArgsSub(Array* Args) {
	SC_FB__StopStripping();
	if (!JB_Array_SyntaxCast(Args)) {
		SC_FB__CompilerInfo();
		SC_FB__Help();
		return false;
	}
	JB_Object* AskSelf = nil;
	JB_Incr(AskSelf);
	{
		int _if0 = 0;
		while (true) {
			JB_Object* S = JB_Array_Value(Args, _if0);
			JB_Incr(S);
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			JB_String* _tmPf2 = JB_AppArgument_Name(((JB_Object*)S));
			JB_Incr(_tmPf2);
			if (!JB_Str_Equals(_tmPf2, JB_LUB[180], false)) {
				SC_FB__ParseOption(S);
			}
			 else {
				JB_SetRef(AskSelf, S);
			}
			JB_Decr(S);
			JB_Decr(_tmPf2);
			(++_if0);
		};
	}
	;
	if (AskSelf) {
		SC_FB__ParseOption(AskSelf);
	}
	JB_Decr(AskSelf);
	if (SC__Options_OperationCount <= 0) {
		JB_Rec__NewErrorWithNode(nil, JB_LUB[1976], nil);
	}
	 else if (SC__Options_OperationCount >= 2) {
		JB_Rec__NewErrorWithNode(nil, JB_LUB[1977], nil);
	}
	return JB_Rec_OK(JB_StdErr) and JB_File_Exists(SC__Comp_BaseProjectPath);
}

void SC_FB__ParseOption(JB_Object* Obj) {
	JB_String* Name = JB_AppArgument_Name(Obj);
	JB_Incr(Name);
	JB_String* Value = JB_AppArgument_Value(Obj);
	JB_Incr(Value);
	if (JB_Str_Exists(Name)) {
		DTWrap* Opt = ((DTWrap*)JB_Dict_Value0(SC__FB_AppOptions, Name));
		JB_Incr(Opt);
		if (Opt) {
			SC__Options_OperationCount = (SC__Options_OperationCount + ((((FP_ShellOption)JB_Wrap_SyntaxAccess(Opt)))(Name, Value, nil)));
		}
		 else {
			FastString* _fsf0 = JB_FS_Constructor(nil);
			JB_Incr(_fsf0);
			JB_FS_AppendString(_fsf0, JB_LUB[1915]);
			JB_FS_AppendString(_fsf0, Name);
			JB_FS_AppendString(_fsf0, JB_LUB[1916]);
			JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
			JB_Incr(_tmPf1);
			JB_Decr(_fsf0);
			JB_App__Quit(_tmPf1, 0);
			JB_Decr(_tmPf1);
		}
		JB_Decr(Opt);
	}
	 else if (JB_Ind_SyntaxCast(JB_Str_IsJbin(Value))) {
		0;
	}
	 else if (SC__Options_OperationCount == 1) {
		if (true) {
			JB_String* _tmPf2 = JB_Str_OperatorPlus(JB_LUB[1917], Value);
			JB_Incr(_tmPf2);
			JB_Str_Fail(_tmPf2);
			JB_Decr(_tmPf2);
		}
	}
	 else {
		JB_FreeIfDead(SC_FB__TryUseProject(Value, false));
		(++SC__Options_OperationCount);
	}
	JB_Decr(Name);
	JB_Decr(Value);
}

void SC_FB__SetFlow() {
	JB_String* _tmPf0 = JB_App__SyntaxAccess(JB_LUB[611]);
	JB_Incr(_tmPf0);
	if (JB_Str_Exists(_tmPf0)) {
		JB_String* V = JB_bool_Render0(SC__Options_GenFlowControlCode);
		JB_Incr(V);
		Message* _tmPf2 = JB_App__Prefs();
		JB_Incr(_tmPf2);
		Message* _tmPf1 = JB_Msg_GetConf(_tmPf2, JB_LUB[1871], false);
		JB_Incr(_tmPf1);
		if (!JB_Msg_SyntaxEquals(_tmPf1, V, false)) {
			Message* _tmPf3 = JB_App__Prefs();
			JB_Incr(_tmPf3);
			(JB_Msg_SetStr(_tmPf3, JB_LUB[1871], V));
			JB_App__PrefsSave();
			JB_Decr(_tmPf3);
		}
		JB_Decr(V);
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf2);
	}
	 else {
		Message* _tmPf5 = JB_App__Prefs();
		JB_Incr(_tmPf5);
		Message* _tmPf4 = JB_Msg_GetConf(_tmPf5, JB_LUB[1871], false);
		JB_Incr(_tmPf4);
		SC__Options_GenFlowControlCode = JB_Msg_Yes(_tmPf4, false);
		JB_Decr(_tmPf4);
		JB_Decr(_tmPf5);
	}
	JB_Decr(_tmPf0);
	(SC_SC_Targets__SyntaxAccessSet(JB_LUB[611], SC__Options_GenFlowControlCode));
}

void SC_FB__StopStripping() {
}

JB_String* SC_FB__TryUseProject(JB_String* Path, bool IsScript) {
	JB_Incr(Path);
	if (!(JB_Str_ContainsByte(Path, '/') or (JB_Str_ContainsByte(Path, '.') or JB_Str_ContainsByte(Path, '~')))) {
		JB_SetRef(Path, SC_Comp__FindProjNoSuffix(Path));
	}
	JB_String* Path2 = SC_Str_ResolveSpd(Path);
	JB_Incr(Path2);
	if (JB_Str_Exists(Path2)) {
		JB_SetRef(Path, Path2);
	}
	JB_Decr(Path2);
	JB_File* F = JB_Str_AsFile(Path);
	JB_Incr(F);
	if ((({
		JB_File* _tmPf1 = SC_Comp__Library();
		JB_Incr(_tmPf1);
		bool _tmPf0 = JB_File_OperatorInside(F, _tmPf1);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}) or ({
		JB_File* _tmPf3 = SC_Comp__Jeebox();
		JB_Incr(_tmPf3);
		bool _tmPf2 = JB_File_OperatorInside(F, _tmPf3);
		JB_Decr(_tmPf3);
		 _tmPf2;
	}))) {
		JB_File_Fail(F, JB_LUB[1896]);
		JB_Decr(Path);
		JB_Decr(F);
		return JB_LUB[0];
	}
	JB_SetRef(SC__Comp_OriginalInputPath, Path);
	JB_SetRef(SC__Comp_BaseProjectPath, F);
	JB_SetRef(SC__Comp_ProjectName, JB_Str_TrimExtAndPath(F, true));
	JB_SetRef(SC__Comp_ReportedName, SC__Comp_ProjectName);
	bool Exists = JB_File_Exists(F);
	bool IsSpd = ({
		JB_String* _tmPf5 = JB_Str_Name(F);
		JB_Incr(_tmPf5);
		bool _tmPf4 = SC_Str_IsSpeedieSrc(_tmPf5);
		JB_Decr(_tmPf5);
		 _tmPf4;
	}) or IsScript;
	if ((Exists and (!JB_File_IsDir(F))) or ((!Exists) and IsSpd)) {
		JB_SetRef(SC__Options_SingleFileInput, JB_File_Path(F));
		if (!JB_File_MustExist(F, JB_LUB[0])) {
			JB_Decr(Path);
			JB_Decr(F);
			return JB_LUB[0];
		}
		JB_SetRef(F, JB_File_Parent(F));
		JB_SetRef(SC__Comp_BaseProjectPath, F);
	}
	SC_FB__CheckSelfModifying();
	JB_String* _tmPf7 = JB_Str_OperatorPlus(SC__Comp_ProjectName, JB_LUB[143]);
	JB_Incr(_tmPf7);
	JB_String* _tmPf6 = JB_Str_OperatorPlus(JB_LUB[1897], _tmPf7);
	JB_Incr(_tmPf6);
	JB_Decr(_tmPf7);
	(SC_SC_Targets__SyntaxAccessSet(_tmPf6, true));
	JB_Decr(_tmPf6);
	if (!JB_Str_Exists(SC__Options_SingleFileInput)) {
		JB_File_MustExist(F, JB_LUB[0]);
	}
	JB_Decr(F);
	if (Exists and (IsSpd and JB_Rec_OK(JB_StdErr))) {
		JB_SafeDecr(Path);
		return Path;
	}
	JB_Decr(Path);
	return JB_LUB[0];
}


JB_String* JB_ImageHelper__ConvertPNGToVOI(JB_String* P) {
	JB_String* Rz = JB_LUB[0];
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Str__Error());
	int X = 0;
	int Y = 0;
	int Comp = 0;
	byte* Img = JB_Img__LoadPNG(P->Addr, JB_Str_Length(P), (&X), (&Y), (&Comp));
	if (Img) {
		int N = 0;
		byte* Qoi = JB_Img__WriteQOI(Img, X, Y, (&N));
		if (Qoi) {
			JB_String* _tmPf0 = JB_Str__Freeable(Qoi, N);
			JB_Incr(_tmPf0);
			JB_SetRef(Rz, JB_Str_Compress(_tmPf0, kJB__MZLab_Fast, nil));
			JB_Decr(_tmPf0);
		}
	}
	JB_free(Img);
	JB_SafeDecr(Rz);
	return Rz;
}


SCNode* SC_InbuiltShellArgs__Collect(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (Name_space != SC__Comp_program) {
		JB_Msg_Fail(Node, JB_LUB[1117]);
		return nil;
	}
	Message* _tmPf0 = JB_Msg_NeedSyx(Node, kJB_SyxList);
	JB_Incr(_tmPf0);
	Array* ShellArgs = SC_Msg_ListAll(_tmPf0);
	JB_Incr(ShellArgs);
	JB_Decr(_tmPf0);
	SC_FB__ParseArgsSub(ShellArgs);
	JB_Decr(ShellArgs);
	return SC__Comp_program;
}


bool SC_AC__Active() {
	return SC__AC_total < SC__AC_max_total;
}

void SC_AC__ActualDefine(Message* Rz, Message* S) {
	JB_String* F = JB_Msg_FilePath(S);
	JB_Incr(F);
	if (!JB_Str_Exists(F)) {
		JB_Str_Fail(JB_LUB[829]);
		JB_Decr(F);
		return;
	}
	JB_Msg_AppendSyx(Rz, kJB_SyxSStr, F);
	JB_Decr(F);
	JB_Msg_AppendNum(Rz, S->Position);
}

Message* SC_AC__AllTmps() {
	Message* Rz = nil;
	Macro* X = SC__AC_all_tmp_src;
	if (X->Cleaned) {
		return JB_Macro_Source(X);
	}
	X->Cleaned = true;
	Rz = JB_Macro_Source(X);
	int State = 0;
	{
		Message* Ch = ((Message*)JB_Ring_First(Rz));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			if (JB_Msg_EqualsSyx(Ch, kJB_SyxName, false)) {
				State = SC_Msg_Autocomplete_State(Ch);
				JB_Tree_Remove(Ch);
			}
			 else {
				Ch->Tag = State;
			}
			Ch = _Nf1;
		};
		;
	}
	;
	return Rz;
}

void SC_AC__ASM(Message* Rz, SCFunction* Fn) {
	SC_Pac_PackMakerInit((&SC__Pac_Sh));
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	if (!SC_AC__ASMSub(Rz, Fn, Fs)) {
		JB_Error* Err = JB_Rec_LastError(JB_StdErr);
		JB_Incr(Err);
		if (Err) {
			JB_Msg_AppendString(Rz, Err->Name);
			Message* Errtmp = JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[249]);
			JB_Incr(Errtmp);
			Message* _tmPf0 = SC_AC__MiniErrors(JB_StdErr);
			JB_Incr(_tmPf0);
			JB_Tree_SyntaxAppend(Errtmp, _tmPf0);
			JB_Decr(_tmPf0);
			SpdProcess* _tmPf1 = JB_App__Parent(nil, false);
			JB_Incr(_tmPf1);
			JB_Proc_Send(_tmPf1, Errtmp);
			JB_Decr(Errtmp);
			JB_Decr(_tmPf1);
		}
		JB_Decr(Err);
	}
	JB_Decr(Fs);
}

bool SC_AC__ASMSub(Message* Rz, SCFunction* Fn, FastString* Fs) {
	MWrap* J = SC__Pac_Sh.JSM;
	if (J) {
		JB_Mrap_Zero(J);
		(JB_Mrap_LengthSet(J, 0));
	}
	if (!SC_SpdAssembler__GenerateASM(Fn)) {
		return nil;
	}
	int Bb = 0;
	Message* Path = nil;
	int Lp = 0;
	Message* Top = SC_Func_SourceArg(Fn);
	{
		FatASM* _FirstInstf0 = SC_Func_IR(Fn);
		FatASM* Fat = _FirstInstf0;
		FatASM* _AfterInstf2 = Fat + Fn->xC2xB5Length;
		while (Fat < _AfterInstf2) {
			if (SC__Options_ASMRenderBlocks and (Fat->BlockNum != Bb)) {
				Bb = Fat->BlockNum;
				JB_Msg_AppendNum(Rz, Bb);
			}
			JB_FS_AppendMultiByte(Fs, ' ', SC_Msg_AsmIndent(Fat->Msg, Top) * 2);
			SC_FAT_Renda(Fat, Fs, true);
			Message* Tmp = JB_Msg_Msg(Rz, kJB_SyxTmp, JB_FS_GetResult(Fs));
			Ind P = Fat->Msg->Position;
			if (P <= 0) {
				P = Lp;
			}
			JB_Msg_AppendNum(Tmp, P);
			Lp = P;
			Path = SC_Msg_NextPath(Fat->Msg, Tmp, Path);
			(++Fat);
		};
	}
	;
	return true;
}

Message* SC_AC__AutoComplete(Message* Ff, JB_String* Name, JB_String* Purpose) {
	Message* Rz = nil;
	JB_Incr(Rz);
	if (!Ff) {
		JB_Decr(Rz);
		return nil;
	}
	Syntax F = Ff->Func;
	if (!((F != kJB_SyxBra) and ((F != kJB_SyxPrm) and ((F != kJB_SyxList) and ((F != kJB_SyxArg) and ((F != kJB_SyxArr) and ((F != kJB_SyxAcc) and ((F != kJB_SyxDecl) and (F != kJB_SyxRel))))))))) {
		JB_Decr(Rz);
		return nil;
	}
	SC__AC_total = 0;
	int Types = -1;
	SCNode* Scope = SC_AC__GetScope(Ff, (&Types));
	JB_Incr(Scope);
	if (!Scope) {
		JB_Decr(Scope);
		JB_Decr(Rz);
		return nil;
	}
	Message* NeedTypeLimit = SC_Msg_GetTypeLimiter(Ff);
	JB_Incr(NeedTypeLimit);
	Array* Arr = JB_Array_Constructor0(nil);
	JB_Incr(Arr);
	while (Scope and SC_AC__Active()) {
		SC_AC__AutoSub(Scope, Name, Arr, Types, NeedTypeLimit);
		if ((!JB_Str_Exists(Name)) and JB_Object_FastIsa(Scope, &SCArgData)) {
			break;
		}
		JB_SetRef(Scope, SC_Base_UpClass(Scope, Ff));
	};
	JB_Decr(Scope);
	JB_Decr(NeedTypeLimit);
	JB_Array_Sort(Arr, ((FP_SorterComparer)(SC_AC__AutoCompleteSorter)));
	JB_SetRef(Rz, JB_Syx_Msg(kJB_SyxTmp, Purpose));
	Message* Arg = JB_Msg_Msg(Rz, kJB_SyxArg, Name);
	JB_Incr(Arg);
	autoitem* Prev = nil;
	JB_Incr(Prev);
	{
		int _if0 = 0;
		while (true) {
			autoitem* I = ((autoitem*)JB_Array_Value(Arr, _if0));
			JB_Incr(I);
			if (I == nil) {
				JB_Decr(I);
				break;
			}
			if (SC_autoitem_OKBy(I, Prev)) {
				Message* Tmp = JB_Msg_Msg(Arg, kJB_SyxTmp, I->Insert);
				JB_Incr(Tmp);
				JB_Msg_AppendSyx(Tmp, kJB_SyxStr, I->Display);
				JB_Decr(Tmp);
				JB_SetRef(Prev, I);
			}
			JB_Decr(I);
			(++_if0);
		};
	}
	;
	JB_Decr(Arr);
	JB_Decr(Arg);
	JB_Decr(Prev);
	JB_SafeDecr(Rz);
	return Rz;
}

SortComparison SC_AC__AutoCompleteSorter(autoitem* Self, autoitem* B) {
	int Type = Self->type - B->type;
	if (Type) {
		return ((SortComparison)(Type < 0));
	}
	int Depth = SC_autoitem_Depth(Self) - SC_autoitem_Depth(B);
	if (Depth) {
		return ((SortComparison)(Depth < 0));
	}
	return ((SortComparison)(JB_Str_CompareStr(Self->Sort, B->Sort, false) <= -1));
}

Message* SC_AC__AutoJump(Message* Cmd) {
	Message* C = ((Message*)JB_Ring_Last(Cmd));
	if (JB_Msg_EqualsSyx(C, kJB_SyxName, false)) {
		if (JB_Msg_OperatorStarts(Cmd, JB_LUB[2051])) {
			return SC_AC__AutoComplete(((Message*)JB_Ring_First(C)), C->Name, Cmd->Name);
		}
		 else {
			return SC_AC__DefineOrCall(C, Cmd->Name, nil);
		}
	}
	if (JB_Msg_OperatorStarts(Cmd, JB_LUB[2051])) {
		return SC_AC__RootTmpComplete(Cmd);
	}
	if (JB_Msg_SyntaxEquals(C, JB_LUB[561], true)) {
		return SC_AC__JumpImport(Cmd);
	}
	return nil;
}

void SC_AC__AutoSub(SCNode* Scope, JB_String* Name, Array* Found, int Types, Message* NeedTypeLimit) {
	SCDecl* TypeLimiter = nil;
	JB_Incr(TypeLimiter);
	if (NeedTypeLimit) {
		JB_SetRef(TypeLimiter, SC_TypeOfExpr(NeedTypeLimit, Scope, nil));
	}
	{
		Dictionary* _LoopSrcf2 = Scope->Access;
		JB_Incr(_LoopSrcf2);
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf2);
		JB_Incr(_navf0);
		JB_Decr(_LoopSrcf2);
		while (true) {
			SCObject* Value = ((SCObject*)JB_DictionaryReader_NextValue(_navf0));
			JB_Incr(Value);
			if (Value == nil) {
				JB_Decr(Value);
				break;
			}
			JB_String* Key = JB_Nav_Name(_navf0);
			JB_Incr(Key);
			JB_String* Orig = SC_SCObject_CanAuto(Value, Name);
			JB_Incr(Orig);
			if (JB_Str_Exists(Orig) and ((!JB_Str_Exists(Name)) or JB_Str_OperatorStarts(Orig, Name))) {
				SC_AC__AutoSub2(Value, Key, Orig, Found, (JB_Str_Equals(Orig, Name, true)), Types, TypeLimiter);
			}
			JB_Decr(Value);
			JB_Decr(Key);
			JB_Decr(Orig);
		};
		JB_Decr(_navf0);
	}
	;
	JB_Decr(TypeLimiter);
}

void SC_AC__AutoSub2(SCObject* Value, JB_String* Key, JB_String* Src_name, Array* Found, bool Exact, int Types, SCDecl* TypeLimiter) {
	JB_Incr(Value);
	while (Value and SC_AC__Active()) {
		if (!(((JB_Str_Equals(Key, JB_LUB[180], true))) and (JB_Object_Isa(Value, &SCModuleData)))) {
			if (Types & SC_SCObject_AutoCompleteType(Value)) {
				bool OK = true;
				if (TypeLimiter) {
					SCDecl* Mine = SC_Object_AsDecl(Value);
					JB_Incr(Mine);
					if (Mine) {
						OK = SC_Decl_MiniMatch(Mine, TypeLimiter, 0);
					}
					JB_Decr(Mine);
				}
				if (OK) {
					JB_String* Sub_name = SC_SCObject_Display(Value, Exact);
					JB_Incr(Sub_name);
					if (JB_Str_Exists(Sub_name)) {
						(++SC__AC_total);
						JB_String* _tmPf0 = SC_SCObject_BaseIcon(Value);
						JB_Incr(_tmPf0);
						JB_String* _tmPf1 = JB_Str_OperatorPlus(JB_LUB[27], Sub_name);
						JB_Incr(_tmPf1);
						JB_SetRef(Sub_name, JB_Str_OperatorPlus(_tmPf0, _tmPf1));
						JB_Decr(_tmPf0);
						JB_Decr(_tmPf1);
						autoitem* _tmPf2 = SC_autoitem_ConstructorAuto(nil, Key, Src_name, Value, Sub_name, Exact, SC_SCObject_Auto_Type(Value));
						JB_Incr(_tmPf2);
						JB_Array_SyntaxAppend(Found, _tmPf2);
						JB_Decr(_tmPf2);
					}
					JB_Decr(Sub_name);
				}
			}
		}
		JB_SetRef(Value, SC_SCObject_NextDisplay(Value, Exact));
	};
	JB_Decr(Value);
}

Message* SC_AC__CallFrom(Message* Msg, JB_Object* Found) {
	Message* Rz = nil;
	SCFunction* Fn = SC_Msg_AutoMsgFuncFn(Msg);
	if (Fn) {
		Rz = SC_AC__CallFromDefine(Msg, Fn, Found);
		SC_AC__CallFromSub(((Message*)JB_Ring_First(Rz)), Fn);
	}
	return Rz;
}

Message* SC_AC__CallFromDefine(Message* Msg, SCFunction* Fn, JB_Object* Found) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[1860]));
	Message* Arg = JB_Msg_Msg(Rz, kJB_SyxArg, JB_LUB[0]);
	JB_Incr(Arg);
	Message* Define = SC_AC__Define(Msg, JB_LUB[1812], Found);
	JB_Incr(Define);
	if (!Define) {
		JB_SetRef(Define, JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[1861]));
	}
	JB_Msg_AppendString(Define, Fn->Name);
	JB_Tree_SyntaxAppend(Arg, Define);
	JB_Decr(Arg);
	JB_Decr(Define);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_AC__CallFromSub(Message* Arg, SCFunction* Fn) {
	{
		Array* _LoopSrcf2 = Fn->LinkFrom;
		int _if0 = 0;
		while (true) {
			SCNode* Call_point = ((SCNode*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Call_point == nil) {
				break;
			}
			Message* S = Call_point->Source;
			if (S) {
				JB_String* F = JB_Msg_FilePath(S);
				if (JB_Str_Exists(F)) {
					Message* Item = JB_Msg_Msg(Arg, kJB_SyxTmp, JB_LUB[88]);
					JB_Msg_AppendSyx(Item, kJB_SyxSStr, F);
					JB_Msg_AppendString(Item, SC_SCObject_CallFromName(Call_point));
					JB_Msg_AppendNum(Item, SC_Msg_FuncPos(S, Fn));
				}
			}
			(++_if0);
		};
	};
}

bool SC_AC__CanUseName(SCNode* L) {
	if (JB_Object_FastIsa(L, &SCModuleData)) {
		return (!((SCModule*)L)->IsImport);
	}
	return true;
}

Message* SC_AC__Check(Message* Cmd) {
	if (Cmd) {
		return SC_AC__CheckSub(Cmd);
	}
	Message* _tmPf0 = JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[249]);
	JB_Incr(_tmPf0);
	Message* _tmPf1 = SC_AC__CheckSub(_tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* SC_AC__CheckSub(Message* Cmd) {
	if (JB_Rec_HasProblems(SC__AC_Errors)) {
		return SC_Msg_SendPerryErrors(Cmd);
	}
	JB_SetRef(Cmd->Name, JB_LUB[249]);
	JB_Msg_AppendSyx(Cmd, kJB_SyxThg, JB_LUB[1844]);
	return Cmd;
}

Message* SC_AC__CmdCleanUp(Message* Arg) {
	JB_Incr(Arg);
	if (!JB_Msg_EqualsSyx(Arg, kJB_SyxArg, false)) {
		JB_PrintLine(JB_LUB[519]);
		Message* Tmp = JB_Syx_OperatorPlus(kJB_SyxArg, JB_LUB[520]);
		JB_Incr(Tmp);
		JB_Tree_SyntaxAppend(Tmp, Arg);
		JB_SetRef(Arg, Tmp);
		JB_Decr(Tmp);
	}
	Message* Date = ((Message*)JB_Ring_First(Arg));
	JB_Incr(Date);
	if (!JB_Msg_EqualsSyx(Date, kJB_SyxNum, false)) {
		JB_PrintLine(JB_LUB[521]);
		JB_SetRef(Date, JB_Syx_PlusNum(kJB_SyxNum, 0));
		(JB_Ring_FirstSet(Arg, Date));
	}
	Message* Cmd = ((Message*)JB_Tree_Second(Arg));
	JB_Incr(Cmd);
	JB_Decr(Arg);
	if (!JB_Msg_EqualsSyx(Cmd, kJB_SyxTmp, false)) {
		JB_PrintLine(JB_LUB[522]);
		JB_SetRef(Cmd, JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[248]));
		(JB_Ring_NextSibSet(Date, Cmd));
	}
	JB_Decr(Date);
	JB_Tree_RemoveAfter(Cmd);
	JB_SafeDecr(Cmd);
	return Cmd;
}

Message* SC_AC__CmdResponse(Message* Cmd) {
	Message* Rz = nil;
	JB_Incr(Rz);
	if (!JB_Msg_SyntaxEquals(Cmd, JB_LUB[248], false)) {
		JB_SetRef(Rz, SC_AC__DoCmd(Cmd));
	}
	if (!Rz) {
		JB_SetRef(Rz, SC_AC__WriteError(Cmd->Name));
	}
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_AC__CmdWrap(Message* Arg) {
	if (JB_Msg_ContainsStr(Arg, SC__AC_TestCrash)) {
		JB_App__Crash(JB_LUB[0]);
		return nil;
	}
	Message* Cmd = SC_AC__CmdCleanUp(Arg);
	JB_Incr(Cmd);
	Message* Response = SC_AC__CmdResponse(Cmd);
	JB_Incr(Response);
	if (Cmd != Response) {
		JB_FreeIfDead(SC_Msg_ReplaceWith(Cmd, Response));
	}
	JB_Decr(Cmd);
	JB_Decr(Response);
	SpdProcess* _tmPf0 = JB_App__Parent(nil, false);
	JB_Incr(_tmPf0);
	JB_Proc_Send(_tmPf0, Arg);
	JB_Decr(_tmPf0);
	JB_Rec_Clear(JB_StdErr);
	return (!SC__AC_WillExit);
}

void SC_AC__Cpp(Message* Rz, SCFunction* Found) {
	Message* Msg = JB_Msg_Copy(Found->Source, nil);
	JB_Incr(Msg);
	JB_Tree_SyntaxAppend(Rz, Msg);
	SC_Msg_AddLinePositions(Msg);
	JB_Decr(Msg);
}

Message* SC_AC__CppASM(Message* Msg, SCFunction* Fn) {
	Message* Rz = nil;
	if (!JB_Rec_OK(JB_StdErr)) {
		return nil;
	}
	Message* Src = Fn->Source;
	if (!Src) {
		JB_Object_Fail(Fn);
		return nil;
	}
	SCFile* Path = SC_Msg_File(Src);
	if (!Path) {
		JB_Msg_Fail(Src, nil);
		return nil;
	}
	Rz = JB_Syx_Msg(kJB_SyxTmp, Msg->Name);
	JB_FreeIfDead(JB_Msg_Msg(Rz, kJB_SyxThg, Fn->Name));
	Message* Rzarg = JB_Msg_Msg(Rz, kJB_SyxArg, JB_LUB[0]);
	if (!SC_Func_HasProperSpeedieCode(Fn)) {
		SC_AC__Nothing(Rzarg, Fn);
	}
	 else if (JB_Msg_SyntaxEquals(Msg, JB_LUB[105], true)) {
		SC_AC__Cpp(Rzarg, Fn);
	}
	 else {
		SC_AC__ASM(Rzarg, Fn);
	}
	return Rz;
}

Message* SC_AC__Define(Message* Msg, JB_String* Purpose, JB_Object* Found) {
	JB_Incr(Found);
	bool IsDisplay = JB_Str_OperatorStarts(Purpose, JB_LUB[1782]);
	bool IsDefine = JB_Str_OperatorStarts(Purpose, JB_LUB[1812]);
	if (!(IsDisplay or IsDefine)) {
		JB_Str_Fail(JB_LUB[1845]);
		JB_Decr(Found);
		return nil;
	}
	if (!JB_Object_Isa(Found, &SCObjectData)) {
		JB_SetRef(Found, nil);
	}
	if (JB_Msg_EqualsSyx(Msg, kJB_SyxPrm, false)) {
		Msg = ((Message*)JB_Ring_Parent(Msg));
	}
	Message* S = SC_AC__LocateDefinition(Msg, ((SCObject*)Found), IsDisplay);
	JB_Incr(S);
	JB_Decr(Found);
	if (S) {
		Message* _tmPf0 = SC_AC__RespondDefine(Msg, S, Purpose);
		JB_Incr(_tmPf0);
		JB_Decr(S);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(S);
	if (true) {
		JB_Str_Fail(JB_LUB[1846]);
	}
	return nil;
}

Message* SC_AC__Define_Behaviour(SCFunction* Fn, JB_String* Purpose) {
	Message* Rz = nil;
	JB_Incr(Rz);
	SCClass* Cls = Fn->Cls;
	JB_Incr(Cls);
	if (!Cls) {
		JB_Decr(Cls);
		JB_Decr(Rz);
		return nil;
	}
	JB_String* Name = JB_Str_Moat(Fn->Name);
	JB_Incr(Name);
	SCObject* Found = SC_Base_UpCheck(Cls, Name, true);
	JB_Incr(Found);
	JB_Decr(Cls);
	JB_Decr(Name);
	if (JB_Object_FastIsa(Found, &SCFunctionData)) {
		JB_SetRef(Rz, SC_AC__DefineOrCall(((SCFunction*)Found)->Source, Purpose, ((SCFunction*)Found)));
	}
	JB_Decr(Found);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_AC__Define_Something(SCFile* Myfile, int F, Message* Thg, JB_String* Purpose) {
	if (!Thg) {
		Thg = SC_File_GetMsg(Myfile, F);
	}
	if (!Thg) {
		JB_Str_Fail(JB_LUB[2052]);
		return nil;
	}
	Thg = SC_Msg_CmdImprove(Thg);
	return SC_AC__DefineOrCall(Thg, Purpose, Myfile);
}

Message* SC_AC__DefineOrCall(Message* Msg, JB_String* Purpose, JB_Object* Found) {
	if (JB_Str_OperatorStarts(Purpose, JB_LUB[1860])) {
		return SC_AC__CallFrom(Msg, Found);
	}
	return SC_AC__Define(Msg, Purpose, Found);
}

Message* SC_AC__Diissplay(Message* Msg, Message* S, JB_String* Purpose) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Syx_Msg(kJB_SyxArg, JB_LUB[0]));
	uint X = kJB__TaskState_Finished;
	SCFunction* Fn = SC_Msg_IdentifyFunc(S);
	JB_Incr(Fn);
	if (JB_Msg_EqualsSyx(Msg, kJB_SyxName, false)) {
		if ((JB_Str_Equals(Purpose, JB_LUB[1782], false)) and SC_Msg_OperatorIsTmp(S, JB_LUB[1037])) {
			JB_Decr(Fn);
			JB_Decr(Rz);
			return S;
		}
		Msg->Func = kJB_SyxThg;
		SCNode* Obj = SC_Comp__FindModuleOrClass(Msg, true);
		JB_Incr(Obj);
		if (Obj) {
			Message* _tmPf4 = SC_Base_DiissplayObj(Obj, Rz);
			JB_Incr(_tmPf4);
			JB_Decr(Obj);
			JB_Decr(Fn);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf4);
			return _tmPf4;
		}
		JB_Decr(Obj);
	}
	if (((JB_Msg_EqualsSyx(S, kJB_SyxDecl, false))) and ((!Fn) or ({
		Message* _tmPf1 = SC_Msg_DeclName(S);
		JB_Incr(_tmPf1);
		bool _tmPf0 = JB_Msg_DeepEquals(Msg, _tmPf1, false);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}))) {
		JB_String* _tmPf2 = SC_Msg_AutoCompleteDecl(S);
		JB_Incr(_tmPf2);
		JB_Msg_AppendSyx(Rz, kJB_SyxEmb, _tmPf2);
		JB_Decr(_tmPf2);
		JB_Decr(Fn);
		JB_SafeDecr(Rz);
		return Rz;
	}
	if (!Fn) {
		JB_Object* Obj = S->Obj;
		JB_Incr(Obj);
		if (JB_Object_Isa(Obj, &SCNodeData)) {
			Message* _tmPf3 = SC_Base_DiissplayObj(((SCNode*)Obj), Rz);
			JB_Incr(_tmPf3);
			JB_Decr(Obj);
			JB_Decr(Fn);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf3);
			return _tmPf3;
		}
		JB_Decr(Obj);
	}
	if (JB_Str_Equals(Purpose, JB_LUB[1783], true)) {
		if (Fn and ((!Fn->NextFunc) and (!JB_Array_SyntaxCast(Fn->Args)))) {
			JB_Decr(Fn);
			JB_SafeDecr(Rz);
			return Rz;
		}
	}
	if (!Fn) {
		JB_Decr(Fn);
		JB_Decr(Rz);
		return JB_Msg_Copy(S, nil);
	}
	while (Fn) {
		Message* Copy = SC_Msg_CutifyCopy(Fn->Source);
		JB_Incr(Copy);
		JB_Tree_SyntaxAppend(Rz, Copy);
		JB_String* Desc = Fn->Description;
		JB_Incr(Desc);
		if (JB_Str_Exists(Desc)) {
			JB_Msg_AppendSyx(Rz, kJB_SyxEmb, JB_LUB[0]);
			JB_Msg_AppendSyx(Rz, kJB_SyxBack, Desc);
			if (Fn->NextFunc) {
				JB_Msg_AppendSyx(Rz, kJB_SyxEmb, JB_LUB[0]);
			}
		}
		JB_Decr(Desc);
		SCNode* L = Fn->Parent;
		JB_Incr(L);
		if (L) {
			if (SC_AC__CanUseName(L)) {
				SC_AC__IdentifyBetter(Copy, L->Name);
			}
		}
		 else {
			JB_Decr(L);
			JB_Decr(Copy);
			break;
		}
		JB_Decr(Copy);
		JB_Decr(L);
		if (!JB_Str_OperatorStarts(Purpose, JB_LUB[1783])) {
			break;
		}
		JB_SetRef(Fn, Fn->NextFunc);
	};
	JB_Decr(Fn);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_AC__DoCmd(Message* Cmd) {
	Message* Rz = nil;
	JB_Incr(Rz);
	if (!JB_Msg_EqualsSyx(Cmd, kJB_SyxTmp, false)) {
		JB_Decr(Rz);
		return nil;
	}
	if (!SC_AC__InitedOK()) {
		JB_Decr(Rz);
		return SC_Msg_SendPerryErrors(Cmd);
	}
	if (JB_Msg_SyntaxEquals(Cmd, JB_LUB[2157], true)) {
		JB_Decr(Rz);
		return SC_AC__UnusedFuncs(Cmd);
	}
	if (JB_Msg_SyntaxEquals(Cmd, JB_LUB[249], true)) {
		JB_Decr(Rz);
		return SC_AC__Check(Cmd);
	}
	if (JB_Msg_SyntaxEquals(Cmd, JB_LUB[2158], true)) {
		JB_Decr(Rz);
		return SC_AC__ReportMemory(Cmd);
	}
	if ((JB_Tree_SyntaxEquals(Cmd, 1, false)) or (({
		Message* _tmPf1 = ((Message*)JB_Ring_Last(Cmd));
		JB_Incr(_tmPf1);
		bool _tmPf0 = JB_Msg_EqualsSyx(_tmPf1, kJB_SyxName, false);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}))) {
		JB_Decr(Rz);
		return SC_AC__AutoJump(Cmd);
	}
	Message* _tmPf2 = JB_Msg_NeedSyx(Cmd, kJB_SyxStr);
	JB_Incr(_tmPf2);
	JB_String* Req = JB_Msg_Name(_tmPf2);
	JB_Incr(Req);
	JB_Decr(_tmPf2);
	SCFile* My_file = ((SCFile*)JB_Dict_ValueLower(SC__Comp_Files, Req));
	JB_Incr(My_file);
	JB_Decr(Req);
	if (My_file) {
		JB_SetRef(Rz, SC_AC__MainAct(Cmd, My_file));
	}
	 else {
		if (true) {
			JB_Str_Fail(JB_LUB[2159]);
		}
	}
	JB_Decr(My_file);
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_AC__EnterAutoComplete() {
	SpdProcess* Perry = JB_App__Parent(nil, false);
	JB_Incr(Perry);
	if (!JB_Rec_OK(JB_StdErr)) {
		JB_Decr(Perry);
		return nil;
	}
	if (!Perry) {
	}
	 else {
	}
	if (!JB_Proc_IsOpen(Perry)) {
		JB_Decr(Perry);
		return nil;
	}
	(JB_App__CrashOnInterupt(false));
	JB_PrintLine(JB_LUB[2166]);
	if (!JB_App__IsMainThread()) {
		JB_PrintLine(JB_LUB[2167]);
	}
	JB_App__ClearCaches(0);
	if (SC__Options_PrintLibraries) {
		JB_PrintLine(JB_LUB[2168]);
		PicoCommsConf(Perry->Pico)->Noise = -1;
	}
	PicoGlobalConfig* Realm = PicoGlobalConf();
	Realm->TimeOut = 1966080;
	Realm->Name = JB_Str_SyntaxCast(JB_LUB[1573]);
	SC__Comp_InPerry = true;
	SC_AC__PerryTalk(Perry);
	JB_Decr(Perry);
	JB_PrintLine(JB_LUB[2169]);
	return true;
}

Message* SC_AC__ErrorsToPerry() {
	if (!SC__AC_Cleaned) {
		SC_Rec_PrePrintErrors(SC__AC_Errors);
		SC__AC_Cleaned = true;
	}
	return SC_AC__MiniErrors(SC__AC_Errors);
}

Message* SC_AC__FindAdj(Message* Msg) {
	Message* Adj = Msg;
	if (JB_Msg_OperatorIn(Msg, kJB_SyxAdj)) {
		Adj = ((Message*)JB_Ring_Parent(Msg));
	}
	if (!JB_Msg_OperatorIn(Adj, kJB_SyxDecl)) {
		Macro* Found = SC_Comp__FindAdj(Adj, nil);
		if (Found) {
			return Found->_Parsed;
		}
	}
	return nil;
}

Message* SC_AC__FuncTmps() {
	Message* Rz = nil;
	JB_Incr(Rz);
	if (SC__AC_func_tmp_src->Cleaned) {
		JB_Decr(Rz);
		return JB_Macro_Source(SC__AC_func_tmp_src);
	}
	SC__AC_func_tmp_src->Cleaned = true;
	JB_SetRef(Rz, JB_Macro_Source(SC__AC_func_tmp_src));
	{
		Message* Ch = ((Message*)JB_Ring_First(Rz));
		JB_Incr(Ch);
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			JB_Incr(_Nf1);
			if (!JB_Msg_EqualsSyx(Ch, kJB_SyxDot, false)) {
				JB_Msg_AppendSyx(Ch, kJB_SyxStr, Ch->Name);
			}
			if (!JB_Msg_EqualsSyx(Ch, kJB_SyxStr, false)) {
				Message* F = ((Message*)JB_Ring_First(Ch));
				JB_Incr(F);
				if (F) {
					if (JB_Str_Last(F->Name, 0) != '.') {
						JB_SetRef(F->Name, JB_Str_OperatorPlus(F->Name, JB_LUB[27]));
					}
				}
				JB_Decr(F);
			}
			Ch->Func = kJB_SyxDot;
			JB_SetRef(Ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(Ch);
		;
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}

SCFunction* SC_AC__GetFunc(Message* Cmd, SCFile* Myfile, int Ff, int N) {
	Message* Src = ((Message*)JB_Ring_Last(Cmd));
	if (!JB_Msg_EqualsSyx(Src, kJB_SyxDot, false)) {
		return SC_AC__GetFunc2(Myfile, Ff, N);
	}
	SCFunction* Fn = ({
		SCFunction* _X = SC__AC_AnonFn;
		if (!_X) {
			_X = SC_Func_Constructor(nil, nil);
			JB_SetRef(SC__AC_AnonFn, _X);
		}
		 _X;
	});
	Message* Prm = ((Message*)JB_Tree_Second(Src));
	Message* Mpos = ((Message*)JB_Ring_First(Prm));
	Message* Str = ((Message*)JB_Tree_Second(Prm));
	if (!(Mpos and Str)) {
		JB_Str_Fail(JB_LUB[2114]);
		return nil;
	}
	Message* F = ((Message*)JB_Ring_First(Src));
	SCNode* Parent = SC_Comp__FindModuleOrClass(F, false);
	if (!Parent) {
		F->Func = kJB_SyxName;
		Parent = SC_Comp__FindModuleOrClass(F, true);
	}
	if (!Parent) {
		if (true) {
			JB_Str_Fail(JB_LUB[2115]);
		}
		return nil;
	}
	if ((Parent == SC__AC_AnonParent) and (JB_Msg_SyntaxEquals(Str, SC__AC_AnonText, false))) {
		return Fn;
	}
	SCObject* Orig = SC_Func_InsertIn(Fn, Parent, Src->Name);
	int64 Pos = JB_Msg_Int(Mpos, 0);
	JB__Tk__DotInsertAllow = true;
	if (SC_Func_Update_Source(Fn, Pos, Str->Name, Orig)) {
		JB_SetRef(SC__AC_AnonParent, Parent);
		JB_SetRef(SC__AC_AnonText, Str->Name);
		return Fn;
	}
	return nil;
}

SCFunction* SC_AC__GetFunc2(SCFile* Myfile, int F, int N) {
	Message* Ast = SC_File_AST(Myfile);
	if (Ast) {
		Message* Src = SC_Msg_FindPos(Ast, F, N);
		if (Src) {
			return SC_Msg_InsideFunc(Src);
		}
	}
	return nil;
}

SCNode* SC_AC__GetScope(Message* Orig, int* Types) {
	if (!Orig) {
		return SC__Comp_program;
	}
	if (JB_Msg_EqualsSyx(Orig, kJB_SyxAsk, false)) {
		Types[0] = 8;
		return SC__Comp_program;
	}
	Message* F = SC_Msg_CutifyCopy(Orig);
	JB_Incr(F);
	SCArg* Arg = SC_Msg_MsgArg(Orig);
	JB_Incr(Arg);
	Syntax Fn = F->Func;
	if (Arg and (Fn == kJB_SyxDot)) {
		Message* _tmPf1 = ((Message*)JB_Ring_First(F));
		JB_Incr(_tmPf1);
		SCObject* Decl = SC_TypeOfExprModulesOK(_tmPf1, Arg, nil);
		JB_Incr(Decl);
		JB_Decr(_tmPf1);
		if (!Decl) {
			if (true) {
				JB_Str_Fail(JB_LUB[2009]);
			}
			JB_Decr(Decl);
			JB_Decr(Arg);
			JB_Decr(F);
			return nil;
		}
		if (JB_Object_Isa(Decl, &SCNodeData)) {
			JB_Decr(Arg);
			JB_Decr(F);
			JB_SafeDecr(Decl);
			return ((SCNode*)Decl);
		}
		if (JB_Object_FastIsa(Decl, &SCDeclData)) {
			SCClass* _tmPf2 = ((SCDecl*)Decl)->Type;
			JB_Incr(_tmPf2);
			JB_Decr(Decl);
			JB_Decr(Arg);
			JB_Decr(F);
			JB_SafeDecr(_tmPf2);
			return _tmPf2;
		}
		JB_Decr(Decl);
	}
	JB_Decr(F);
	if (SC_Msg_ACInIsa(Orig)) {
		Types[0] = 1;
		JB_Decr(Arg);
		return SC__Comp_program;
	}
	if (Arg) {
		JB_SafeDecr(Arg);
		return Arg;
	}
	JB_Decr(Arg);
	if (JB_Msg_IsTypeOfDecl(Orig)) {
		Types[0] = 1;
		return SC__Comp_program;
	}
	SCArg* _tmPf0 = SC_Msg_MsgArg(Orig);
	JB_Incr(_tmPf0);
	if (!_tmPf0) {
		JB_Str_Fail(JB_LUB[2010]);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_AC__IdentifyBetter(Message* Node, JB_String* Name) {
	JB_Msg_BecomeStr(Node, kJB_SyxEmb, JB_LUB[0]);
	Node = ((Message*)JB_Ring_First(Node));
	Node->Func = kJB_SyxDot;
	JB_Msg_AppendSyx(Node, kJB_SyxThg, Name);
	JB_Msg_AppendSyx(Node, kJB_SyxEmb, JB_LUB[0]);
}

int SC_AC__Init_() {
	{
		JB_SetRef(SC__AC_AnonText, JB_LUB[0]);
		JB_SetRef(SC__AC_func_tmp_src, JB_Macro_ConstructorStr(nil, (JB_LUB[159])));
		JB_SetRef(SC__AC_all_tmp_src, JB_Macro_ConstructorStr(nil, (JB_LUB[160])));
		JB_SetRef(SC__AC_TestCrash, JB_Str_OperatorPlus(JB_LUB[161], JB_LUB[162]));
		SC__AC_max_total = 400;
	}
	;
	return 0;
}

bool SC_AC__InitedOK() {
	if (SC__Comp_InitedOK) {
		return true;
	}
	if (JB_Rec_OK(SC__AC_Errors)) {
		if (true) {
			JB_Str_Fail(JB_LUB[830]);
		}
	}
	return false;
}

Message* SC_AC__JumpImport(Message* Cmd) {
	Message* _tmPf0 = JB_Msg_NeedSyx(Cmd, kJB_SyxArg);
	JB_Incr(_tmPf0);
	Message* F = ((Message*)JB_Tree_Get(_tmPf0, 0));
	JB_Incr(F);
	JB_Decr(_tmPf0);
	if (F) {
		JB_Tree_Clear(Cmd);
		JB_File* Proj = SC_Comp__FindProject(F->Name);
		JB_Incr(Proj);
		if (!JB_File_Exists(Proj)) {
			JB_Decr(Proj);
			JB_Decr(F);
			return nil;
		}
		JB_String* _tmPf1 = JB_File_Path(Proj);
		JB_Incr(_tmPf1);
		JB_Decr(Proj);
		JB_Msg_AppendSyx(Cmd, kJB_SyxSStr, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Msg_AppendNum(Cmd, 0);
		JB_Decr(F);
		return Cmd;
	}
	JB_Decr(F);
	return nil;
}

Message* SC_AC__LocateDefinition(Message* Msg, SCObject* Already_defined, bool DisplayOnly) {
	Message* Rz = nil;
	if ((JB_Msg_OperatorIn(Msg, kJB_SyxAdj)) or ((JB_Msg_EqualsSyx(Msg, kJB_SyxAdj, false)))) {
		Rz = SC_AC__FindAdj(Msg);
		if (Rz) {
			return Rz;
		}
	}
	SCDecl* Ty = SC_TypeOfExpr(Msg, SC_Msg_MsgArg(Msg), nil);
	Rz = SC_AC__LocateDefinitionSub(Msg, Already_defined, Ty, DisplayOnly);
	if (JB_Msg_EqualsSyx(Rz, kJB_SyxArg, false)) {
		Message* P = ((Message*)JB_Ring_Parent(Rz));
		if (P) {
			Rz = P;
		}
	}
	if (JB_Msg_OperatorIn(Msg, kJB_SyxTmp)) {
		Msg = ((Message*)JB_Ring_Parent(Msg));
	}
	if ((JB_Msg_EqualsSyx(Msg, kJB_SyxTmp, false))) {
		JB_Object* Fn = Msg->Obj;
		if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
			return ((SCFunction*)Fn)->Source;
		}
	}
	return Rz;
}

Message* SC_AC__LocateDefinitionSub(Message* Msg, SCObject* Already_defined, SCDecl* Ty, bool DisplayOnly) {
	if (Already_defined) {
		return Already_defined->Source;
	}
	if ((JB_Msg_EqualsSyx(Msg, kJB_SyxThg, false)) and JB_Msg_OperatorIn(Msg, kJB_SyxFunc)) {
		Msg = ((Message*)JB_Ring_Parent(Msg));
	}
	SCFunction* Fn = SC_Msg_MsgFunc(Msg);
	if (Fn) {
		Message* It = Fn->Source;
		if (It) {
			return It;
		}
	}
	if (!Ty) {
		return SC_Msg_ModuleSrc(Msg);
	}
	if (SC_Class_EqualsType(Ty->Type, kSC__SCNodeType_FuncProto, false)) {
		JB_Object* L = Ty->IsLookupOnly;
		if (JB_Object_FastIsa(L, &SCFunctionData)) {
			return ((SCFunction*)L)->Source;
		}
	}
	if ((!DisplayOnly) and (JB_Msg_EqualsSyx(Msg, kJB_SyxDecl, false))) {
		return SC_Base_SourceArg(Ty->Type);
	}
	Message* Src = Ty->Source;
	if (Src) {
		if (DisplayOnly and SC_Decl_SyntaxIs(Ty, kSC__SCDeclInfo_Const)) {
			(SC_Decl_NameSet(Ty, Msg->Name));
			return SC_Decl_WriteDeclFull(Ty, JB_LUB[0], 1);
		}
		if ((JB_Msg_EqualsSyx(Src, kJB_SyxDecl, false)) and (JB_Msg_EqualsSyx(((Message*)JB_Ring_Last(Src)), kJB_SyxRel, false))) {
			Src = JB_Msg_Copy(Src, nil);
			Message* L = ((Message*)JB_Ring_Last(Src));
			JB_FreeIfDead(SC_Msg_ReplaceWith(L, ((Message*)JB_Ring_First(L))));
		}
		return Src;
	}
	if (DisplayOnly) {
		SCClass* T = Ty->Type;
		Message* _tmP0 = T->TypeNormal->Source;
		if (!_tmP0) {
			_tmP0 = T->Source;
		}
		return _tmP0;
	}
	SCNode* Found = SC_Object_ClassOrModule(Msg->Obj);
	if (Found) {
		return Found->Source;
	}
	return nil;
}

Message* SC_AC__MainAct(Message* Cmd, SCFile* My_file) {
	Message* Rz = nil;
	int F = ((int)JB_Msg_Int(JB_Msg_NeedSyxInt(Cmd, kJB_SyxNum, 1), 0));
	int N = ((int)JB_Msg_Int(JB_Msg_NeedSyxInt(Cmd, kJB_SyxNum, 2), 0));
	if (!N) {
		JB_Str_Fail(JB_LUB[2143]);
		return nil;
	}
	JB_FreeIfDead(SC_File_Use(My_file));
	SCFunction* Fn = SC_AC__GetFunc(Cmd, My_file, F, N);
	JB_ClassData_Restore((&MessageData));
	if (!Fn) {
		return nil;
	}
	Message* Thg = SC_Msg_FindPos(Fn->Source, F, N);
	if ((!Thg) and (JB_Msg_SyntaxEquals(Cmd, JB_LUB[1860], false))) {
		Thg = Fn->Source;
	}
	if ((JB_Msg_EqualsSyx(Thg, kJB_SyxThg, false)) and (SC_Msg_IsBehaviour(Fn->Source) and JB_Tree_OperatorIn(Thg, Fn->Source))) {
		return SC_AC__Define_Behaviour(Fn, Cmd->Name);
	}
	if (JB_Msg_OperatorStarts(Cmd, JB_LUB[1701]) or JB_Msg_OperatorStarts(Cmd, JB_LUB[105])) {
		return SC_AC__CppASM(Cmd, Fn);
	}
	if (JB_Msg_OperatorStarts(Cmd, JB_LUB[1812]) or (JB_Msg_OperatorStarts(Cmd, JB_LUB[1782]) or JB_Msg_OperatorStarts(Cmd, JB_LUB[1860]))) {
		return SC_AC__Define_Something(My_file, F, Thg, Cmd->Name);
	}
	if ((!Thg)) {
		JB_Str_Fail(JB_LUB[2052]);
		return nil;
	}
	if (!JB_Msg_OperatorStarts(Cmd, JB_LUB[2051])) {
		JB_Str_Fail(JB_LUB[1845]);
		return nil;
	}
	Message* Stuff = JB_Msg_NeedSyxInt(Cmd, kJB_SyxStr, 3);
	Message* Auto = SC_AC__MainActAutoComplete(Thg, JB_Msg_Name(Stuff), Cmd);
	if (Auto) {
		Rz = JB_Syx_OperatorPlus(kJB_SyxArg, JB_LUB[2144]);
		JB_Tree_SyntaxAppend(Rz, ((Message*)JB_Tree_Get(Stuff, 0)));
		JB_Tree_SyntaxAppend(Rz, Auto);
	}
	return Rz;
}

Message* SC_AC__MainActAutoComplete(Message* Thg, JB_String* Str, Message* Cmd) {
	if (JB_Msg_EqualsSyx(Thg, kJB_SyxTmp, false)) {
		return SC_AC__TmpAutoComplete(Thg, Str, Cmd->Name);
	}
	return SC_AC__AutoComplete(Thg, Str, Cmd->Name);
}

Message* SC_AC__MiniErrors(JB_ErrorReceiver* L) {
	JB_String* _tmPf0 = SC_Comp__RenderErrors(L, kJB__ErrorSeverity_Warning);
	JB_Incr(_tmPf0);
	Message* _tmPf1 = JB_Str_Parse(_tmPf0, kJB_SyxArg, true);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_AC__Nothing(Message* Rz, SCFunction* Fn) {
	if (Fn->IsMacro) {
		JB_Msg_AppendString(Rz, JB_LUB[558]);
	}
	 else if (SC_Func_SyntaxIs(Fn, kSC__FunctionType_Wrapper)) {
		JB_Msg_AppendString(Rz, JB_LUB[559]);
	}
	 else if (SC_Func_SyntaxIs(Fn, kSC__FunctionType_Disabled)) {
		JB_Msg_AppendString(Rz, JB_LUB[560]);
	}
}

void SC_AC__ParserRestore() {
	JB_SetRef(SC__AC_Errors, JB_StdErr);
	JB_SetRef(JB_StdErr, JB_Rec_Constructor(nil));
	JB_ClassData_Restore((&MessageData));
	JB__Tk_Using.Position = -1;
}

void SC_AC__PerryTalk(SpdProcess* Perry) {
	SC__AC_CompiledOK = SC_Comp__CompileAll();
	SC_AC__ParserRestore();
	Message* _tmPf1 = SC_AC__Check(nil);
	JB_Incr(_tmPf1);
	JB_Proc_Send(Perry, _tmPf1);
	{
		while (PicoCanGet(Perry->Pico)) {
			Message* Cmd = JB_Proc_Get(Perry, 1000.0f);
			JB_Incr(Cmd);
			if (Cmd and (!SC_AC__CmdWrap(Cmd))) {
				JB_Decr(Cmd);
				break;
			}
			JB_Decr(Cmd);
		};
		JB_Decr(_tmPf1);
	}
	;
	JB_PrintLine(JB_LUB[2165]);
	JB_Proc_Disconnect(Perry, JB_LUB[0]);
}

Message* SC_AC__ReportMemory(Message* Cmd) {
	JB_Tree_Clear(Cmd);
	Message* Arg = JB_Msg_Msg(Cmd, kJB_SyxArg, JB_LUB[0]);
	JB_Incr(Arg);
	JB_Msg_AppendNum(Arg, JB_MemCount());
	JB_Msg_AppendNum(Arg, JB_MemUsedString());
	JB_Decr(Arg);
	return Cmd;
}

Message* SC_AC__RespondDefine(Message* Msg, Message* S, JB_String* Purpose) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Syx_Msg(kJB_SyxTmp, Purpose));
	if (JB_Str_OperatorStarts(Purpose, JB_LUB[1812])) {
		SC_AC__ActualDefine(Rz, S);
	}
	 else {
		Message* _tmPf0 = SC_AC__Diissplay(Msg, S, Purpose);
		JB_Incr(_tmPf0);
		JB_Tree_SyntaxAppend(Rz, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_AC__RootTmpComplete(Message* Cmd) {
	Message* Rz = nil;
	Message* F = ((Message*)JB_Tree_Get(((Message*)JB_Tree_Get(Cmd, 0)), 0));
	JB_String* Req = JB_Msg_Name(((Message*)JB_Ring_NextSib(F)));
	int Flags = 0;
	Flags = (Flags + (SC_Msg_IsModuleType(F) << 1));
	Flags = (Flags + (SC_Msg_IsClassType(F) << 2));
	Flags = (Flags + (SC_Msg_IsLinkageType(F) << 3));
	if (!Flags) {
		Flags = 1;
	}
	Rz = JB_Syx_Msg(kJB_SyxTmp, Cmd->Name);
	Message* Arg = JB_Msg_Msg(Rz, kJB_SyxArg, Req);
	{
		Message* _LoopSrcf2 = SC_AC__AllTmps();
		Message* Ch = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			JB_String* Found = Ch->Name;
			if ((Ch->Tag & Flags) and (JB_Str_OperatorStarts(Found, Req))) {
				Message* Tmp = JB_Msg_Msg(Arg, kJB_SyxTmp, Found);
				JB_Msg_AppendSyx(Tmp, kJB_SyxStr, JB_Str_Before(Found, JB_LUB[260]));
			}
			Ch = _Nf1;
		};
		;
	}
	;
	return Rz;
}

Message* SC_AC__TmpAutoComplete(Message* F, JB_String* Name, JB_String* Type) {
	Message* Rz = nil;
	JB_Incr(Rz);
	bool Finished = false;
	JB_SetRef(Rz, JB_Syx_OperatorPlus(kJB_SyxTmp, Type));
	if (!JB_Str_Equals(Name, JB_LUB[2053], true)) {
		{
			Message* _LoopSrcf2 = SC_AC__FuncTmps();
			JB_Incr(_LoopSrcf2);
			Message* Ch = ((Message*)JB_Ring_First(_LoopSrcf2));
			JB_Incr(Ch);
			while (Ch) {
				Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
				JB_Incr(_Nf1);
				if (JB_Msg_OperatorStarts(Ch, Name)) {
					if ((JB_Str_CompareInt(Ch->Name, 2, false) >= 1) and (JB_Str_Equals(Ch->Name, Name, true))) {
						Finished = true;
					}
					 else {
						Message* Cf = ((Message*)JB_Ring_First(Ch));
						JB_Incr(Cf);
						if (Cf) {
							Message* Arg = JB_Msg_Msg(Rz, kJB_SyxArg, Name);
							JB_Incr(Arg);
							Message* _tmPf3 = JB_Msg_Msg(Arg, kJB_SyxTmp, Cf->Name);
							JB_Incr(_tmPf3);
							JB_Decr(Arg);
							JB_Msg_AppendSyx(_tmPf3, kJB_SyxStr, Cf->Name);
							JB_Decr(_tmPf3);
						}
						JB_Decr(Cf);
					}
				}
				JB_SetRef(Ch, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(Ch);
			;
			JB_Decr(_LoopSrcf2);
		};
	}
	if (JB_Ring_HasChildren(Rz)) {
		0;
	}
	 else if (F) {
		JB_SetRef(Rz, SC_AC__AutoComplete(F, Name, Type));
	}
	 else {
		JB_SetRef(Rz, nil);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_AC__UnusedFuncs(Message* Cmd) {
	Message* Path = JB_Msg_NeedSyx(Cmd, kJB_SyxStr);
	if (!Path) {
		return nil;
	}
	SCFile* Scf = ((SCFile*)JB_Dict_ValueLower(SC__Comp_Files, Path->Name));
	if (!Scf) {
		JB_Str_Fail(JB_Str_OperatorPlus(JB_LUB[1073], Path->Name));
		return nil;
	}
	Message* Unused_libs = ((Message*)JB_Ring_NextSib(Path));
	if (Unused_libs) {
		{
			Message* Lib = ((Message*)JB_Ring_First(Unused_libs));
			while (Lib) {
				Message* _Nf1 = ((Message*)JB_Ring_NextSib(Lib));
				if (JB_Msg_ExpectString(Lib)) {
					SC_Msg_HateUnusedFuncs(Lib);
				}
				Lib = _Nf1;
			};
			;
		};
	}
	JB_Tree_Clear(Cmd);
	if (SC__AC_CompiledOK) {
		Message* Arg = JB_Msg_GiveArg(Cmd);
		{
			Array* _LoopSrcf4 = SC__Comp_FuncList;
			int _if2 = 0;
			while (true) {
				SCFunction* Fn = ((SCFunction*)JB_Array_Value(_LoopSrcf4, _if2));
				if (Fn == nil) {
					break;
				}
				if (JB_File_SyntaxEquals(SC_SCObject_File(Fn), Scf, false)) {
					SC_Func_CheckUnused(Fn, Arg);
				}
				(++_if2);
			};
		};
	}
	return Cmd;
}

Message* SC_AC__WriteError(JB_String* Name) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[248]));
	JB_Error* Err = JB_Rec_Pop(JB_StdErr);
	JB_Incr(Err);
	if (Err) {
		JB_Msg_AppendString(Rz, Err->Name);
	}
	 else {
		JB_Msg_AppendString(Rz, JB_LUB[248]);
	}
	JB_Decr(Err);
	JB_Msg_AppendString(Rz, Name);
	JB_SafeDecr(Rz);
	return Rz;
}


int JB_API__Init_() {
	{
	}
	;
	return 0;
}

void JB_API__NilCallBack(JB_String* ErrorMessage) {
	JB_PrintLine(ErrorMessage);
}

bool JB_API__NilHandler() {
	if (!JB_Rec_OK(JB_StdErr)) {
		return nil;
	}
	if ((++JB__API_NilHappened_) < 16) {
		JB_API__NilCallBack(JB_LUB[305]);
	}
	 else if (JB__API_NilHappened_ == 16) {
		JB_API__NilCallBack(JB_LUB[306]);
	}
	return false;
}


void JB_Constants__AddEscape(uint /*byte*/ I, FastString* Fs) {
	JB_String* F = JB_Str__Byte(I);
	if (!((!JB_Str_Exists(((JB_StringC*)JB_Dict_Value0(JB__Constants_EscapeStr, F)))) or (!JB_Str_Exists(((JB_String*)JB_Dict_Value0(JB__Constants_EscapeChr, F)))))) {
		return;
	}
	JB_FS_AppendByte(Fs, '\\');
	JB_FS_AppendHex(Fs, I, 2);
	JB_String* T = JB_FS_GetResult(Fs);
	if (!JB_Str_Exists(((JB_StringC*)JB_Dict_Value0(JB__Constants_EscapeStr, F)))) {
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, F, JB_Str_CastZero(T)));
	}
	if (!JB_Str_Exists(((JB_String*)JB_Dict_Value0(JB__Constants_EscapeChr, F)))) {
		(JB_Dict_ValueSet(JB__Constants_EscapeChr, F, T));
	}
}

int JB_Constants__Init_() {
	{
		JB_SetRef(JB__Constants__SyxDict, JB_Dict_Constructor(nil));
		JB_SetRef(JB__Constants_EscapeStr, (JB_Dict_Constructor(nil)));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[320], JB_LUB[321]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[125], JB_LUB[124]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[322], JB_LUB[219]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[128], JB_LUB[218]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[314], JB_LUB[323]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[317], JB_LUB[324]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[316], JB_LUB[217]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[325], JB_LUB[326]));
		JB_SetRef(JB__Constants_XML_EscapeStr, (JB_Dict_Constructor(nil)));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[48], JB_LUB[327]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[317], JB_LUB[328]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[314], JB_LUB[329]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[260], JB_LUB[330]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[263], JB_LUB[331]));
		JB_SetRef(JB__Constants_JS_EscapeStr, (JB_Dict_Constructor(nil)));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[332], JB_LUB[333]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[334], JB_LUB[335]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[125], JB_LUB[124]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[322], JB_LUB[219]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[128], JB_LUB[218]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[314], JB_LUB[323]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[316], JB_LUB[217]));
		JB_SetRef(JB__Constants_CSWordMiddle, JB_Str_UniCS(JB_LUB[336]));
		JB_SetRef(JB__Constants_CSLettersOnly, JB_Str_UniCS(JB_LUB[337]));
		JB_SetRef(JB__Constants_CSWordStart, JB_Str_UniCS(JB_LUB[338]));
		JB_SetRef(JB__Constants_XMLWordMiddle, JB_Str_UniCS(JB_LUB[339]));
		JB_SetRef(JB__Constants_CSNum, JB__Constants_CSWordMiddle);
		JB_SetRef(JB__Constants_CSLine, JB_Str_CharSetWithBool(JB_LUB[340], false));
		JB_SetRef(JB__Constants_CSAfterDot, JB_Str_CharSetWithBool(JB_LUB[341], false));
		JB_SetRef(JB__Constants_CSAfterStatement, JB_Str_CharSetWithBool(JB_LUB[342], false));
		JB_SetRef(JB__Constants_CSLineBlack, JB_Str_CharSetWithBool(JB_LUB[343], false));
		JB_SetRef(JB__Constants_CSWrapSplit, JB_Str_CharSetWithBool(JB_LUB[344], false));
		JB_SetRef(JB__Constants_FFUUU, JB_LUB[345]);
	}
	;
	return 0;
}

int JB_Constants__InitCode_() {
	{
	}
	;
	JB_Constants__InitConstants();
	return 0;
}

void JB_Constants__InitConstants() {
	JB_Array_Constructor0(nil);
	JB_SetRef(JB__Constants_EscapeChr, JB_Dict__Copy(JB__Constants_EscapeStr));
	(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[242], JB_LUB[313]));
	JB_SetRef(JB__Constants_UnEscapeStr, JB_Dict__Reverse(JB__Constants_EscapeStr));
	JB_SetRef(JB__Constants_JS_UnEscapeStr, JB_Dict__Reverse(JB__Constants_JS_EscapeStr));
	JB_SetRef(JB__Constants_XML_UnEscapeStr, JB_Dict__Reverse(JB__Constants_XML_EscapeStr));
	(JB_Dict_ValueSet(JB__Constants_EscapeChr, JB_LUB[314], ((JB_String*)nil)));
	(JB_Dict_ValueSet(JB__Constants_EscapeChr, JB_LUB[242], ((JB_String*)nil)));
	(JB_Dict_ValueSet(JB__Constants_UnEscapeStr, JB_LUB[315], ((JB_String*)nil)));
	(JB_Dict_ValueSet(JB__Constants_UnEscapeStr, JB_LUB[316], JB_LUB[0]));
	(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[317], ((JB_StringC*)nil)));
	FastString* Tfs = JB_FS_Constructor(nil);
	JB_Incr(Tfs);
	{
		int I = 0;
		while (I < 256) {
			if ((I <= 31) or (((I == 127) or ((I == 192) or (I == 193))) or (I >= 245))) {
				JB_Constants__AddEscape(I, Tfs);
			}
			(++I);
		};
	}
	;
	JB_Decr(Tfs);
	JB_MSR_EscapeCodeSet(JB__Constants_UnEscapeStr, true);
	JB_MSR_DecodeEntitySet(JB__Constants_UnEscapeStr, true);
	JB_MSR_DecodeEntitySet(JB__Constants_XML_UnEscapeStr, true);
	(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[318], JB_LUB[319]));
}

JB_String* JB_Constants__TestJB() {
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	{
		int C = 0;
		while (C < 256) {
			JB_FS_AppendByte(Fs, ((byte)C));
			(++C);
		};
	}
	;
	JB_String* Str = JB_FS_GetResult(Fs);
	JB_Incr(Str);
	JB_Decr(Fs);
	if (!JB_Str_EscapeTest(Str)) {
		JB_Decr(Str);
		return JB_LUB[0];
	}
	JB_Decr(Str);
	JB_String* Natural_input = JB_LUB[1585];
	JB_Incr(Natural_input);
	JB_String* Jbin_input = JB_LUB[1585];
	JB_Incr(Jbin_input);
	JB_FreeIfDead(JB_Str_UpperCase(JB_LUB[1809]));
	LeakTester* LKT = JB_Lk_Constructor(nil, JB_LUB[1810]);
	JB_Incr(LKT);
	JB_FreeIfDead(JB_EntityTest());
	JB_Lk_FinalTest(LKT);
	JB_Decr(LKT);
	if (!JB_Rec_OK(JB_StdErr)) {
		JB_Decr(Jbin_input);
		JB_Decr(Natural_input);
		return JB_LUB[0];
	}
	Message* Root = JB_Str_Parse(Natural_input, kJB_SyxArg, true);
	JB_Incr(Root);
	JB_Decr(Natural_input);
	if (!Root) {
		JB_Decr(Root);
		JB_Decr(Jbin_input);
		return JB_LUB[0];
	}
	JB_Msg_jbinTest(Root);
	if (((JB_String*)JB_Str_Exists(Jbin_input))) {
		Message* _tmPf1 = JB_Msg_Copy(Root, nil);
		JB_Incr(_tmPf1);
		JB_Msg__TreeCompare(Root, _tmPf1, false);
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Str_Parse(Jbin_input, kJB_SyxArg, true);
		JB_Incr(_tmPf2);
		JB_Msg__TreeCompare(Root, _tmPf2, false);
		JB_String* _tmPf3 = JB_Msg_Render(Root, nil);
		JB_Incr(_tmPf3);
		JB_Msg_Test(Root, _tmPf3, JB_LUB[1809]);
		JB_Decr(_tmPf3);
		JB_String* _tmPf4 = JB_Msg_RenderJbin(Root, JB_LUB[0], nil);
		JB_Incr(_tmPf4);
		JB_Msg_Test(Root, _tmPf4, JB_LUB[1811]);
		JB_Decr(_tmPf4);
		JB_Decr(_tmPf2);
	}
	JB_Decr(Jbin_input);
	if (!JB_Rec_OK(JB_StdErr)) {
		JB_Decr(Root);
		return JB_LUB[0];
	}
	JB_Decr(Root);
	return JB_EntityTest();
}


void SC_LinkMap__Collect(SCFunction* Self) {
	(SC_Func__CurrFuncSet(Self));
	(++SC__LinkMap_CurrID);
	{
		Array* _LoopSrcf2 = Self->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (D == nil) {
				break;
			}
			SC_Func_CollectLinks(Self, D);
			(++_if0);
		};
	}
	;
	SCDecl* R = Self->ReturnType;
	if (R) {
		SC_Func_CollectLinks(Self, R);
	}
	SC_LinkMap__CollectFromSource(Self, SC_Func_SourceArg(Self), false);
}

void SC_LinkMap__CollectAll() {
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* S = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (S == nil) {
				break;
			}
			SC_LinkMap__Collect(S);
			(++_if0);
		};
	};
}

void SC_LinkMap__CollectFromSource(SCFunction* Self, Message* Src, bool InBranch) {
	{
		Message* Msg = ((Message*)JB_Ring_First(Src));
		while (Msg) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Msg));
			JB_Object* O = Msg->Obj;
			if (O) {
				SC_Func_CollectLinks(Self, O);
			}
			if (JB_Ring_HasChildren(Msg)) {
				if (!InBranch) {
					uint T = SC_Msg_ASMType(Msg);
					InBranch = ((T == kSC__ASMType_kIf) or ((T == kSC__ASMType_kWhile) or (T == kSC__ASMType_kTern)));
				}
				SC_LinkMap__CollectFromSource(Self, Msg, InBranch);
			}
			Msg = _Nf1;
		};
		;
	};
}

int SC_LinkMap__Init_() {
	{
	}
	;
	return 0;
}

void SC_LinkMap__Store(Array** Darr, SCObject* Obj) {
	Array* Arr = Darr[0];
	if (Arr == nil) {
		Arr = (JB_Array_Constructor0(nil));
		JB_SetRef(Darr[0], Arr);
	}
	JB_Array_SyntaxAppend(Arr, Obj);
}


JB_String* SC_Linkage__CombineFlags(JB_String* Name) {
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	JB_FreeIfDead(SC_Linkage__GetFlag(Name, Fs));
	JB_String* _tmPf0 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Linkage__CompilerCollect(Message* S) {
	JB_FreeIfDead(SC_Linkage__LinkCollect(S, SC__Comp_program, nil));
	SC__Options_MakeInterpreter = SC_Linkage__Interpreter();
	JB_Tree_Remove(S);
}

JB_String* SC_Linkage__GetFlag(JB_String* Name, FastString* Fs) {
	{
		Message* _LoopSrcf2 = SC__Linkage_Flagz;
		Message* Ch = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			if (JB_Msg_SyntaxEquals(Ch, Name, true)) {
				if (!Fs) {
					return JB_Msg_FirstName(Ch);
				}
				JB_String* Str = JB_Msg_FirstName(Ch);
				if (JB_Str_Exists(Str)) {
					if (Fs->Length) {
						JB_FS_AppendByte(Fs, ' ');
					}
					JB_FS_AppendString(Fs, Str);
				}
			}
			Ch = _Nf1;
		};
		;
	}
	;
	return JB_LUB[0];
}

int SC_Linkage__Init_() {
	{
		JB_SetRef(SC__Linkage_OSXFrameworks, JB_Msg_ConstructorEmpty(nil));
		JB_SetRef(SC__Linkage_Flagz, JB_Msg_ConstructorEmpty(nil));
	}
	;
	return 0;
}

bool SC_Linkage__Interpreter() {
	return SC_Linkage__SyntaxAccess(JB_LUB[1116]);
}

SCNode* SC_Linkage__LinkCollect(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (Name_space != SC__Comp_program) {
		JB_Msg_Fail(Node, JB_LUB[1117]);
		return nil;
	}
	Message* Arg = JB_Msg_NeedSyx(Node, kJB_SyxArg);
	if (Arg) {
		SC_Msg_ConfTake(Arg, SC__Linkage_Flagz, JB_LUB[1079]);
		SC_Msg_ConfTake(Arg, SC__Linkage_OSXFrameworks, JB_LUB[1118]);
		{
			Message* Ch = ((Message*)JB_Ring_First(Arg));
			while (Ch) {
				Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
				if (true) {
					JB_Msg_Fail(Ch, nil);
				}
				Ch = _Nf1;
			};
			;
		}
		;
		return SC__Comp_program;
	}
	if (true) {
		JB_Msg_Fail(ErrPlace, JB_LUB[1119]);
	}
	return nil;
}

bool SC_Linkage__SyntaxAccess(JB_String* Name) {
	JB_String* _tmPf0 = SC_Linkage__GetFlag(Name, nil);
	JB_Incr(_tmPf0);
	bool _tmPf1 = JB_Str_Yes(_tmPf0, nil);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool SC_Linkage__VM() {
	return SC_Linkage__SyntaxAccess(JB_LUB[1120]);
}



int SC_Macros__Init_() {
	{
		JB_SetRef(SC__Macros_FS, JB_Macro_ConstructorStr(nil, (JB_LUB[224])));
		JB_SetRef(SC__Macros_InitExpand, JB_Macro_ConstructorStr(nil, (JB_LUB[225])));
		JB_SetRef(SC__Macros_WhileDecl, JB_Macro_ConstructorStr(nil, (JB_LUB[226])));
		JB_SetRef(SC__Macros_MultiDecr, JB_Macro_ConstructorStr(nil, (JB_LUB[227])));
		JB_SetRef(SC__Macros_ConstructorNew, JB_Macro_ConstructorStr(nil, (JB_LUB[228])));
		JB_SetRef(SC__Macros_ConstructorNewTask, JB_Macro_ConstructorStr(nil, (JB_LUB[229])));
		JB_SetRef(SC__Macros_MainArgBasic, JB_Macro_ConstructorStr(nil, (JB_LUB[230])));
		JB_SetRef(SC__Macros_MainArgBasicReq, JB_Macro_ConstructorStr(nil, (JB_LUB[231])));
		JB_SetRef(SC__Macros_MainArgDefault, JB_Macro_ConstructorStr(nil, (JB_LUB[232])));
		JB_SetRef(SC__Macros_MainArgArray, JB_Macro_ConstructorStr(nil, (JB_LUB[233])));
		JB_SetRef(SC__Macros_MainArgNoNE, JB_Macro_ConstructorStr(nil, (JB_LUB[234])));
	}
	;
	return 0;
}



void SC_Options__ColorSet(bool Value) {
	JB__ErrorColors_Enabled = Value;
}

bool SC_Options__Color() {
	return JB__ErrorColors_Enabled;
}

int SC_Options__Init_() {
	{
		JB_SetRef(SC__Options_BannedClasses, ((Dictionary*)nil));
		JB_SetRef(SC__Options_exe_path, JB_LUB[0]);
		JB_SetRef(SC__Options_output_path, JB_LUB[0]);
		JB_SetRef(SC__Options_SingleFileInput, JB_LUB[0]);
		JB_SetRef(SC__Options_Variant, JB_LUB[0]);
		JB_SetRef(SC__Options_Arch, JB_LUB[0]);
		SC__Options_SingleCppOutput = true;
		SC__Options_NilTestAllocNeverFails = true;
		SC__Options_ModeCpp = true;
		SC__Options_Compile = true;
		SC__Options_Optimise = 1;
		SC__Options_SelfReplacement = ((bool)0);
		SC__Options_NilStrength = kJB__ErrorSeverity_Error;
	}
	;
	return 0;
}


int SC_PackMaker__AddAll() {
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			if (SC_Func_CanLibLoad(F)) {
				SC_PackMaker__AddFunc(F);
			}
			(++_if0);
		};
	}
	;
	return 0;
}

void SC_PackMaker__AddFunc(SCFunction* F) {
	if (SC_Base_IsLibrary(F)) {
		if (SC_Base_NeedsExport(F) or SC__Options_MakeInterpreter) {
			JB_Array_SyntaxAppend(SC__PackMaker_LibFuncs, F);
		}
	}
	 else if (SC_Base_NeedsExport(F) or (SC_Func_operatorin(F, JB_LUB[221]))) {
		JB_Array_SyntaxAppend(SC__PackMaker_PackFuncs, F);
	}
}

JB_String* SC_PackMaker__BuildInterpreter() {
	FastString* Pack = JB_bin_Constructor(nil, kJB_SyxArg, JB_LUB[0]);
	JB_Incr(Pack);
	SC_PackMaker__WriteLibFuncs(Pack);
	JB_DoAt(1);
	SC_PackMaker__DoLibGlobs(Pack);
	JB_String* _tmPf0 = JB_FS_SyntaxCast(Pack);
	JB_Incr(_tmPf0);
	JB_Decr(Pack);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_PackMaker__DoLibGlobs(FastString* Lib) {
	JB_Array_Sort(SC__PackMaker_LibGlobs, ((FP_SorterComparer)(SC_GlobalsSorter)));
	JB_DoAt(1);
	JB_bin_Enter(Lib, kJB_SyxArr, JB_LUB[0]);
	{
		int _if0 = 0;
		while (true) {
			SCDecl* F = ((SCDecl*)JB_Array_Value(SC__PackMaker_LibGlobs, _if0));
			if (F == nil) {
				break;
			}
			JB_bin_Add(Lib, kJB_SyxThg, F->ExportName, false);
			(++_if0);
		};
	}
	;
	JB_bin_Exit0(Lib);
}

int SC_PackMaker__Init_() {
	{
		JB_SetRef(SC__PackMaker_LibFuncs, JB_Array_Constructor0(nil));
		JB_SetRef(SC__PackMaker_LibGlobs, JB_Array_Constructor0(nil));
		JB_SetRef(SC__PackMaker_PackFuncs, JB_Array_Constructor0(nil));
		JB_SetRef(SC__PackMaker_PackGlobs, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

void SC_PackMaker__MakePack() {
	if (((64)) != 64) {
	}
	SC_Pac_PackMakerInit((&SC__Pac_Sh));
	SC_PackMaker__AddAll();
	int Pg = SC_PackMaker__SortFuncsAndBuildGlobs();
}

int SC_PackMaker__OrderGlobals(Array* List) {
	int Rz = 0;
	JB_Array_Sort(List, ((FP_SorterComparer)(SC_GlobalsSorter)));
	Rz = 1;
	{
		int _if0 = 0;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(List, _if0));
			if (D == nil) {
				break;
			}
			int S = SC_Decl_CArraySize(D);
			int S16 = JB_int_OperatorMin(S, 16);
			Rz = JB_int_OperatorAlign(Rz, S16);
			D->ExportPosition = Rz;
			Rz = (Rz + S);
			(++_if0);
		};
	}
	;
	return Rz;
}

void SC_PackMaker__SortASMFuncs(Array* List, void** Table) {
	JB_Array_Sort(List, ((FP_SorterComparer)(SC_SCFuncSorter)));
	int ID = 0;
	while (true) {
		SCFunction* F = ((SCFunction*)JB_Array_Value(List, ID));
		if (!F) {
			break;
		}
		F->TableId = (++ID);
	};
}

int SC_PackMaker__SortFuncsAndBuildGlobs() {
	int Rz = 0;
	SCFunction* FnInit = SC_Comp__XFunc(JB_LUB[1544], nil);
	SCFunction* FnMain = SC_Comp__XFunc(JB_LUB[1545], nil);
	if (!(FnInit and FnMain)) {
		return 0;
	}
	FnInit->TableId = 1;
	FnMain->TableId = 2;
	SC_PackMaker__SortASMFuncs(SC__PackMaker_PackFuncs, nil);
	SC_Class_PackClassChildren(SC_TypeObject, nil);
	Rz = SC_PackMaker__OrderGlobals(SC__PackMaker_PackGlobs);
	SC_PackMaker__SortLibStuff(Rz);
	return Rz;
}

void SC_PackMaker__SortLibStuff(int Pg) {
	void** Table = nil;
	if (JB_IsDebug() and Pg) {
		Table = JB_ASM_InitTable(JB_ASM__VM(), JB_Array_Size(SC__PackMaker_LibFuncs) + 31, Pg);
	}
	SC_PackMaker__SortASMFuncs(SC__PackMaker_LibFuncs, Table);
	JB_Array_Sort(SC__PackMaker_LibGlobs, ((FP_SorterComparer)(SC_GlobalsSorter)));
	{
		Array* _LoopSrcf2 = SC__PackMaker_LibGlobs;
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			SCDecl* G = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(G);
			if (G == nil) {
				JB_Decr(G);
				break;
			}
			int I = _if0;
			G->ExportPosition = (I + 1);
			JB_Decr(G);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	};
}

void SC_PackMaker__WriteLibFuncs(FastString* J) {
	JB_bin_Enter(J, kJB_SyxPrm, JB_LUB[0]);
	{
		Array* _LoopSrcf2 = SC__PackMaker_LibFuncs;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			JB_bin_Add(J, kJB_SyxThg, F->ExportName, false);
			(++_if0);
		};
	}
	;
	JB_bin_Exit0(J);
}



bool JB_Platform__CPU_ARM() {
	return ((bool)(JB_Platform__CPU() & 2));
}

bool JB_Platform__CPU_Intel() {
	return ((bool)(JB_Platform__CPU() & 4));
}

JB_String* JB_Platform__CPU_Name() {
	if (JB_Platform__CPU_Intel()) {
		return JB_LUB[137];
	}
	if (JB_Platform__CPU_ARM()) {
		return JB_LUB[138];
	}
	if (JB_Platform__CPU_PPC()) {
		return JB_LUB[139];
	}
	if (JB_Platform__CPU_Spd()) {
		return JB_LUB[140];
	}
	return JB_LUB[0];
}

bool JB_Platform__CPU_PPC() {
	return ((bool)(JB_Platform__CPU() & 8));
}

bool JB_Platform__CPU_Spd() {
	return ((bool)(JB_Platform__CPU() & 1));
}

int JB_Platform__Init_() {
	{
	}
	;
	return 0;
}

void JB_Platform__Log(JB_String* S) {
	//visible;
	JB_File* L = ({
		JB_File* _X = JB__Platform_Logger_;
		if (!_X) {
			_X = JB_Platform__OpenLog();
			JB_SetRef(JB__Platform_Logger_, _X);
		}
		 _X;
	});
	JB_File_SyntaxAppend(L, S);
	JB_File_SyntaxAppend(L, JB_LUB[125]);
}

JB_File* JB_Platform__OpenLog() {
	JB_File* Rz = nil;
	JB_Incr(Rz);
	JB_File* _tmPf0 = JB_File__Logs();
	JB_Incr(_tmPf0);
	JB_String* _tmPf2 = JB_App__AppName();
	JB_Incr(_tmPf2);
	JB_String* _tmPf1 = JB_Str_OperatorPlus(_tmPf2, JB_LUB[1070]);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf2);
	JB_SetRef(Rz, JB_File_SyntaxAccess(_tmPf0, _tmPf1));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_SetRef(JB__Platform_Logger_, Rz);
	JB_File_OpenBlank(Rz);
	JB_SafeDecr(Rz);
	return Rz;
}

int JB_Platform__PointerBytes() {
	return JB_PointerSize() >> 3;
}

bool JB_Platform__Release() {
	return (!JB_IsDebug());
}


void SC_PostIncrementNil__Check(Message* Ch) {
	SCDecl* D = SC_Msg_FastDecl(Ch);
	if (SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_PostIncremented)) {
		JB_Msg_Fail(Ch, JB_LUB[1625]);
	}
	(SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_PostIncremented, true));
	SC_PostIncrementNil__SyntaxAppend(Ch);
}

void SC_PostIncrementNil__Clear() {
	{
		int _LoopSrcf1 = SC__PostIncrementNil_Size;
		int I = 0;
		while (I < _LoopSrcf1) {
			SCDecl* D = SC_Msg_FastDecl(SC__PostIncrementNil_Msgs[I]);
			JB_Incr(D);
			(SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_PostIncremented, (!true)));
			JB_Decr(D);
			(++I);
		};
	}
	;
	SC__PostIncrementNil_Msgs[0] = nil;
	SC__PostIncrementNil_Size = 0;
	SC__PostIncrementNil_Sync = false;
}

int SC_PostIncrementNil__Init_() {
	{
	}
	;
	return 0;
}

void SC_PostIncrementNil__SyntaxAppend(Message* Ch) {
	int S = SC__PostIncrementNil_Size;
	if (S >= 32) {
		JB_Msg_Fail(Ch, JB_LUB[938]);
		return;
	}
	SC__PostIncrementNil_Msgs[S] = Ch;
	SC__PostIncrementNil_Size = (S + 1);
}


int SC_SCGame3D__Init_() {
	{
		JB_SetRef(SC__SCGame3D_Types, (JB_Dict_Constructor(nil)));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[82], JB_LUB[83]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[84], JB_LUB[85]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[86], JB_LUB[87]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[88], JB_LUB[89]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[90], JB_LUB[91]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[92], JB_LUB[93]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[94], JB_LUB[95]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[96], JB_LUB[97]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[98], JB_LUB[99]));
	}
	;
	return 0;
}

SCNode* SC_SCGame3D__Love(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (JB_Rnd_SyntaxAccess((&JB__Rnd_Shared)) > (1.0f / 12.0f)) {
		JB_String* _tmPf1 = JB_Msg_Render(Node, nil);
		JB_Incr(_tmPf1);
		JB_String* _tmPf0 = JB_Str_Range(_tmPf1, (5), JB_int__Max());
		JB_Incr(_tmPf0);
		JB_Decr(_tmPf1);
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return SC__Comp_program;
}

bool SC_SCGame3D__NeedShader(JB_String* Name) {
	if ((JB_Str_Equals(Name, JB_LUB[944], true)) or (JB_Str_Equals(Name, JB_LUB[945], true))) {
		return true;
	}
	JB_Object* F = JB_Dict_Value0(SC__Imp_Shaders, Name);
	JB_Incr(F);
	if (!JB_Object_Isa(F, &JB_StringData)) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[946]);
		JB_FS_AppendString(_fsf0, Name);
		JB_FS_AppendByte(_fsf0, '\n');
		JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf1);
		JB_Decr(_fsf0);
		JB_Str_Fail(_tmPf1);
		JB_Decr(_tmPf1);
		JB_Decr(F);
		return nil;
	}
	JB_Decr(F);
	return true;
}

SCNode* SC_SCGame3D__NeuModel(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	Message* Inst = SC_Msg_TranModel(Node);
	JB_Incr(Inst);
	if (!Inst) {
		JB_Msg_Fail(Node, JB_LUB[1842]);
		JB_Decr(Inst);
		return nil;
	}
	SCNode* M = SC_Class__NewStruct(Node, Name_space, ErrPlace);
	JB_Incr(M);
	if (JB_Object_FastIsa(M, &SCModuleData)) {
		JB_SetRef(((SCModule*)M)->Cls->IsModel, Inst);
	}
	JB_Decr(Inst);
	JB_SafeDecr(M);
	return M;
}


int SC__Init_() {
	{
	}
	;
	return 0;
}


void SC_Refs__DeclInit(Message* Dcl, SCFunction* Fn, bool IsJustAnArg) {
	int Basis = SC_Refs__RefBasis(Dcl, true);
	if (SC_Func_DoRefs(Fn)) {
		if (!Basis) {
			return;
		}
	}
	 else {
		if (!(Basis & kSC__Refs_kBasisDeSTRUCTable)) {
			return;
		}
	}
	Message* Arg = ((Message*)JB_Ring_Parent(Dcl));
	Message* Name = SC_Msg_DeclName(Dcl);
	Message* LastPlace = nil;
	if (Basis & kSC__Refs_kBasisObj) {
		LastPlace = SC_Refs__LastUsedRefPlace(Name, Arg);
	}
	Message* Blocker = SC_Msg_CausesUnReachable(Arg, Arg, Dcl, LastPlace);
	if (Basis == kSC__Refs_kBasisObj) {
		if (IsJustAnArg) {
			SC_Refs__RefIncr(Name, Dcl, IsJustAnArg);
		}
		 else {
			SC_Refs__RealRefIncr(Name, Dcl);
		}
	}
	if (!Blocker) {
		Blocker = LastPlace;
	}
	SC_Refs__ReturnHandle(Blocker, Arg, Name, Basis);
	Message* Curr = Dcl;
	Message* After = ((Message*)JB_Ring_FlatAfter(Arg));
	while ((Curr != After) and (Curr != LastPlace)) {
		if ((JB_Msg_EqualsSyx(Curr, kJB_SyxArg, false))) {
			Message* Block2 = SC_Msg_CausesUnReachable(Curr, Arg, nil, nil);
			if (Block2) {
				SC_Refs__ReturnHandle(Block2, nil, Name, Basis);
			}
		}
		Curr = ((Message*)JB_Ring_FlatNext0(Curr));
	};
}

Message* SC_Refs__DecrMulti(SCDecl* D, Message* M) {
	Message* Rz = nil;
	Message* Int = JB_int_Msg(D->C_Array);
	JB_SetRef(Int->Obj, SC_TypeInt->TypeNormal);
	Rz = JB_Macro_CallFast(SC__Macros_MultiDecr, M, Int);
	(SC_Msg_ASMTypeSet(Rz, kSC__ASMType_kRefCount));
	Message* Prm = ((Message*)JB_Tree_Second(Rz));
	if (Prm) {
		JB_SetRef(Prm->Obj, SC__Comp_RefDecrMulti);
		JB_SetRef(Rz->Obj, SC_TypeVoid);
	}
	return Rz;
}

void SC_Refs__Destructable(Message* Blocker, Message* Arg, Message* Name) {
	SCDecl* Type = SC_TypeOfExpr(Name, nil, nil);
	if (!JB_Object_Isa(Type, &SCDeclData)) {
		return;
	}
	SCFunction* Fn = Type->Type->DestructorFunc;
	Message* FnMsg = SC_Refs__RefMsg0(Fn->ExportName, Fn);
	Message* Brel = JB_Msg_Msg(((Message*)JB_Ring_Last(FnMsg)), kJB_SyxBRel, JB_LUB[48]);
	Message* NewThg = JB_Msg_Msg(Brel, kJB_SyxThg, Name->Name);
	JB_SetRef(NewThg->Obj, Name->Obj);
	if (Blocker) {
		(JB_Ring_PrevSibSet(Blocker, FnMsg));
	}
	 else {
		JB_Tree_SyntaxAppend(Arg, FnMsg);
	}
}

bool SC_Refs__ExitHitsOrGoesPast(Message* Curr, Message* Arg) {
	while (true) {
		Curr = ((Message*)JB_Ring_Parent(Curr));
		if (Curr == Arg) {
			return true;
		}
		if (SC_Msg_OperatorIsTmp(Curr, JB_LUB[176])) {
			return false;
		}
	};
}

bool SC_Refs__ExprNeedsTemping(Message* Child, Message* Name) {
	if (SC_Refs__RefBasis(Name, false) != kSC__Refs_kBasisObj) {
		return nil;
	}
	{
		Message* S = Child;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Child));
		while ((S) and (S != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(S));
			if (SC_Msg_OperatorIsThing(S, Name->Name)) {
				return true;
			}
			S = _N_f2;
		};
		;
	}
	;
	return false;
}

Message* SC_Refs__LastUsedRefPlace(Message* Name, Message* Arg) {
	SCDecl* D = SC_Msg_AsDecl(Name);
	if (!D) {
		JB_Object_Fail(nil);
		return nil;
	}
	SCClass* Type = D->Type;
	if (SC_Class_SyntaxIs(Type, kSC__ClassInfo_NoEarlyFree)) {
		return nil;
	}
	JB_String* S = Name->Name;
	Message* Found = Name;
	{
		Message* C = Arg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Arg));
		while ((C) and (C != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(C));
			if (SC_Msg_OperatorIsThing(C, S)) {
				Found = C;
			}
			C = _N_f2;
		};
		;
	}
	;
	Message* Curr = Found;
	while (Found != Arg) {
		Curr = Found;
		Found = ((Message*)JB_Ring_Parent(Found));
	};
	return SC_Msg_LastUsedFix(Curr);
}

void SC_Refs__RC_CheckFuncAllocOK(SCFunction* Self, Message* Dot) {
	if (!(JB_Msg_OperatorIn(Dot, kJB_SyxBra) and JB_Msg_OperatorIn(((Message*)JB_Ring_Parent(Dot)), kJB_SyxBra))) {
		SCFunction* Fn = SC_Msg_AsFunc(((Message*)JB_Ring_Last(Dot)));
		if (Fn) {
			if ((SC_Func_SyntaxIs(Fn, kSC__FunctionType_Destructor)) and (!SC_Func_SyntaxIs(Self, kSC__FunctionType_Destructor))) {
				if (true) {
					JB_Msg_Fail(Dot, JB_LUB[939]);
				}
			}
		}
	}
}

void SC_Refs__RC_CheckNoObjPms(Message* Msg) {
	SCFunction* Fn = SC_Msg_MsgFunc(Msg);
	if (Fn) {
		{
			Array* _LoopSrcf2 = Fn->Args;
			int _if0 = 0;
			while (true) {
				SCDecl* I = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
				if (I == nil) {
					break;
				}
				if (I->PointerCount) {
					if ((SC_Class_IsObject(I->Type))) {
						JB_Msg_Fail(Msg, JB_LUB[940]);
						return;
					}
				}
				(++_if0);
			};
		};
	}
}

void SC_Refs__RC_DeclArg(SCDecl* AR, SCFunction* Fn) {
	Message* Src = AR->Source;
	if (!Src) {
		Src = SC_Func_SourceArg(Fn);
	}
	if (Src) {
		JB__Tk_Using.Position = Src->Position;
	}
	Message* Dcl = SC_Decl_WriteNilDecl(AR);
	(JB_Ring_FirstSet(SC_Func_SourceArg(Fn), Dcl));
	SC_Refs__DeclInit(Dcl, Fn, true);
	JB_Tree_Remove(Dcl);
}

void SC_Refs__RC_HandleDisappearing(Message* Msg, int Basis) {
	JB__Tk_Using.Position = Msg->Position;
	SC_Refs__RC_HandleDisappearingSub(Msg, Basis);
	JB__Tk_Using.Position = -1;
}

void SC_Refs__RC_HandleDisappearingSub(Message* Msg, int Basis) {
	Message* Ch = SC_Msg_UseNonRefChangers(Msg, false);
	JB_Incr(Ch);
	if ((Basis & kSC__Refs_kBasisDeSTRUCTable) or (Basis & kSC__Refs_kBasisTempStruct)) {
		if (!JB_Msg_EqualsSyx(Msg, kJB_SyxFunc, false)) {
		}
		if (!(SC_Msg_IsSetIntoPlace(Msg) or ({
			Message* _tmPf1 = ((Message*)JB_Ring_Parent(Ch));
			JB_Incr(_tmPf1);
			bool _tmPf0 = SC_Msg_IsReturnOrRejoin(_tmPf1);
			JB_Decr(_tmPf1);
			 _tmPf0;
		}))) {
			JB_FreeIfDead(SC_Func__TypedTempMoveOut(Msg, JB_LUB[0], nil));
		}
		JB_Decr(Ch);
		return;
	}
	if (!((Basis == kSC__Refs_kBasisObj) and ((!SC_Msg_IsProperty(Msg))))) {
		JB_Decr(Ch);
		return;
	}
	Message* Parent = SC_Msg_NiceParent(Ch);
	JB_Incr(Parent);
	if (!(((!JB_Msg_EqualsSyx(Parent, kJB_SyxArg, false))) and ((!(SC_Msg_IsReturnOrRejoin(Parent) and JB_Tree_IsOnlyChild(Ch))) and (!JB_FreeIfDead(SC_Msg_IsSetIntoPlace(Ch)))))) {
		JB_Decr(Parent);
		JB_Decr(Ch);
		return;
	}
	if (SC_Msg_RefDisappears(Ch)) {
		Message* Fnc = SC_Refs__RefMsg0(JB_LUB[1344], SC__Comp_RefFreeIfDead);
		JB_Incr(Fnc);
		(JB_Ring_PrevSibSet(Msg, Fnc));
		SC_Msg_CheckFreeIfDeadValid(Msg);
		Message* _tmPf2 = ((Message*)JB_Ring_Last(Fnc));
		JB_Incr(_tmPf2);
		JB_Decr(Fnc);
		JB_Tree_SyntaxAppend(_tmPf2, Msg);
		JB_Decr(_tmPf2);
		JB_Decr(Parent);
		JB_Decr(Ch);
		return;
	}
	if ((JB_Msg_EqualsSyx(Parent, kJB_SyxPrm, false))) {
		if (Parent->Obj == SC__Comp_TernaryFunc) {
			if (JB_FreeIfDead(SC_Msg_UseNonRefChangers(Ch, false)) != JB_FreeIfDead(((Message*)JB_Ring_First(Parent)))) {
				JB_Decr(Parent);
				JB_Decr(Ch);
				return;
			}
		}
		if (Parent->Obj == SC__Comp_RefFreeIfDead) {
			JB_Decr(Parent);
			JB_Decr(Ch);
			return;
		}
	}
	JB_Decr(Parent);
	Message* Pp = SC_Msg_ParentPoint(Ch);
	JB_Incr(Pp);
	if (SC_Refs__RC_NeedsOwnBlock(Ch, Pp)) {
		JB_FreeIfDead(SC_Msg_TempIntoBlock(Ch, Pp));
	}
	 else {
		JB_FreeIfDead(SC_Func__TypedTempMoveOut(Msg, JB_LUB[0], nil));
	}
	JB_Decr(Ch);
	JB_Decr(Pp);
}

void SC_Refs__RC_IgnoreReturn(Message* Msg) {
	if (SC_Refs__RefBasis(Msg, false) != kSC__Refs_kBasisObj) {
		return;
	}
	if (Msg->Func != kJB_SyxFunc) {
		return;
	}
	SCFunction* Fn = ((SCFunction*)((Message*)JB_Ring_Last(Msg))->Obj);
	if (!SC_Func_SyntaxIs(Fn, kSC__FunctionType_Constructor)) {
		JB__Tk_Using.Position = Msg->Position;
		Message* Free_if_dead = SC_Refs__RefMsg0(JB_LUB[1344], SC__Comp_RefFreeIfDead);
		SC_Msg_FuncWrap(Msg, Free_if_dead);
		JB__Tk_Using.Position = -1;
	}
}

bool SC_Refs__RC_NeedsOwnBlock(Message* Msg, Message* Pp) {
	bool HitArg = false;
	{
		Message* Ch = Msg;
		while (Ch) {
			if (JB_Msg_EqualsSyx(Ch, kJB_SyxArg, false)) {
				HitArg = true;
			}
			 else if (JB_Msg_EqualsSyx(Ch, kJB_SyxRel, false)) {
				Message* Opp = ((Message*)JB_Tree_Second(Ch));
				if (((JB_Msg_EqualsSyx(Opp, kJB_SyxOpp, false))) and ((JB_Msg_SyntaxEquals(Opp, JB_LUB[251], false)) or (JB_Msg_SyntaxEquals(Opp, JB_LUB[267], false)))) {
					return true;
				}
			}
			 else if (SC_Msg_OperatorIsTmp(Ch, JB_LUB[176])) {
				if (!HitArg) {
					return true;
				}
			}
			if (Ch == Pp) {
				break;
			}
			Ch = ((Message*)JB_Ring_Parent(Ch));
		};
		;
	}
	;
	return false;
}

void SC_Refs__RC_Rel(Message* Rel) {
	Message* First = SC_Msg_UnBra(((Message*)JB_Ring_First(Rel)));
	if (!SC_Refs__RelNeedsRef(First)) {
		return;
	}
	Message* Last = ((Message*)JB_Ring_Last(Rel));
	if ((First->Func == kJB_SyxThg) and (First->Obj == Last->Obj)) {
		return;
	}
	JB__Tk_Using.Position = Rel->Position;
	Message* Result = SC_Refs__RefMsg0(JB_LUB[1546], SC__Comp_RefSetRef);
	Message* Lst = ((Message*)JB_Ring_Last(Result));
	JB_Tree_SyntaxAppend(Lst, First);
	JB_Tree_SyntaxAppend(Lst, Last);
	JB_FreeIfDead(SC_Msg_ReplaceWith(Rel, Result));
}

void SC_Refs__RC_RelConstructor(Message* Rel) {
	Message* _tmPf0 = ((Message*)JB_Ring_First(Rel));
	JB_Incr(_tmPf0);
	if (SC_Refs__RelNeedsRef(_tmPf0)) {
		Message* _tmPf1 = ((Message*)JB_Ring_Last(Rel));
		JB_Incr(_tmPf1);
		if (!SC_Msg_OperatorIsThing(_tmPf1, JB_LUB[36])) {
			SC_Refs__RC_RelInit(Rel);
		}
		JB_Decr(_tmPf1);
	}
	JB_Decr(_tmPf0);
}

void SC_Refs__RC_RelInit(Message* Rel) {
	Message* Func = SC_Msg_WrapWith(Rel, kJB_SyxFunc, JB_LUB[0]);
	(JB_Ring_FirstSet(Func, JB_Syx_OperatorPlus(kJB_SyxThg, JB_LUB[584])));
	JB_Tree_Remove(((Message*)JB_Tree_Second(Rel)));
	Rel->Func = kJB_SyxPrm;
	SC_Msg_BecomeWithFunc(Func, SC__Comp_RefIncr2);
}

void SC_Refs__RealRefIncr(Message* Name, Message* Dcl) {
	SC_Func_RefFunc(SC__Comp_RefIncr, JB_Msg_Copy(Name, nil), Dcl);
}

int SC_Refs__RefBasis(Message* Msg, bool SetOnly) {
	return SC_Refs__RefBasisStruct(Msg, SetOnly) & (~kSC__Refs_kBasisTempStruct);
}

int SC_Refs__RefBasisStruct(Message* Msg, bool SetOnly) {
	SCDecl* Type = SC_Msg_AsDecl(Msg);
	if (!JB_Object_Isa(Type, &SCDeclData)) {
		Type = SC_TypeOfExpr(Msg, nil, nil);
		if (!Type) {
			return 0;
		}
	}
	if (SC_Decl_IsReffable(Type, SetOnly)) {
		if (SC_Decl_IsCArray(Type)) {
			return kSC__Refs_kBasisCArray | kSC__Refs_kBasisObj;
		}
		if (SC_Decl_SyntaxIs(Type, kSC__SCDeclInfo_Self) and SC_Func_SyntaxIs(SC_Func__CurrFunc(), kSC__FunctionType_Constructor)) {
			return 0;
		}
		return kSC__Refs_kBasisObj;
	}
	if (SC_Decl_HasStruct(Type) and (!SC_Decl_SyntaxIs(Type, kSC__SCDeclInfo_ReturnedStruct))) {
		SCFunction* Fn = Type->Type->DestructorFunc;
		if (Fn) {
			return kSC__Refs_kBasisDeSTRUCTable;
		}
		Message* P = SC_Msg_NiceParent(Msg);
		if (SC_Msg_OperatorIsBRel(P, JB_LUB[48])) {
			return kSC__Refs_kBasisTempStruct;
		}
	}
	return 0;
}

Message* SC_Refs__RefClearMsg(Message* Msg) {
	return SC_Refs__RefMsg(Msg, JB_LUB[736], SC__Comp_RefClear);
}

void SC_Refs__RefDecr(Message* Msg, Message* Place, int Basis) {
	Message* OldPrev = ((Message*)JB_Ring_PrevSib(Place));
	if ((OldPrev) and (((JB_Msg_EqualsSyx(OldPrev, kJB_SyxFunc, false))) and ((JB_Msg_SyntaxEquals(((Message*)JB_Ring_First(OldPrev)), JB_LUB[738], true))))) {
		Place = OldPrev;
	}
	Message* What = nil;
	if (Basis & kSC__Refs_kBasisCArray) {
		What = SC_Refs__DecrMulti(SC_Msg_AsDecl(((Message*)JB_Ring_Parent(Msg))), JB_Msg_Copy(Msg, nil));
	}
	 else {
		What = SC_Refs__RefDecrMsg(Msg);
	}
	if (JB_Msg_EqualsSyx(Place, kJB_SyxArg, false)) {
		JB_Tree_SyntaxAppend(Place, What);
	}
	 else {
		(JB_Ring_PrevSibSet(Place, What));
	}
}

Message* SC_Refs__RefDecrMsg(Message* Msg) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB__Tk_Using.Position = -2;
	JB_SetRef(Rz, SC_Refs__RefMsg(Msg, JB_LUB[737], SC__Comp_RefDecr));
	JB__Tk_Using.Position = -1;
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Refs__RefDestructorMsg(Message* Msg, SCFunction* Fn) {
	return SC_Refs__RefMsg(Msg, Fn->ExportName, Fn);
}

void SC_Refs__RefIncr(Message* Msg, Message* Place, bool IsJustAnArg) {
	if (IsJustAnArg) {
		Place = ((Message*)JB_Ring_Parent(((Message*)JB_Ring_Parent(Msg))));
	}
	 else {
		if ((JB_Msg_EqualsSyx(Place, kJB_SyxDecl, false))) {
			Msg = ((Message*)JB_Ring_Last(Place));
			if ((JB_Msg_EqualsSyx(Msg, kJB_SyxRel, false))) {
				Msg = ((Message*)JB_Ring_Last(Msg));
				if (SC_Msg_IsStatementExpr(Msg)) {
					return SC_Msg_AvoidSafeDecr(Msg);
				}
			}
		}
		if ((SC_Msg_OperatorIsThing(SC_Msg_UnBra(Msg), JB_LUB[36]))) {
			return;
		}
		Place = Msg;
	}
	SC_Func_RefFunc(SC__Comp_RefIncr, Msg, Place);
}

Message* SC_Refs__RefMsg(Message* Msg, JB_String* Name, SCFunction* Func) {
	Message* Rz = nil;
	Rz = SC_Refs__RefMsg0(Name, Func);
	JB_Tree_SyntaxAppend(((Message*)JB_Ring_Last(Rz)), JB_Msg_Copy(Msg, nil));
	JB_SetRef(Rz->Obj, Func->ReturnType);
	if (!Rz->Obj) {
		JB_SetRef(Rz->Obj, SC_TypeVoid);
	}
	return Rz;
}

Message* SC_Refs__RefMsg0(JB_String* Name, SCFunction* Func) {
	Message* Rz = nil;
	Rz = SC_NewFnc(Name);
	SC_Msg_BecomeWithFunc(Rz, Func);
	return Rz;
}

void SC_Refs__RefSafeDecr(Message* Msg, Message* Place) {
	JB__Tk_Using.Position = Msg->Position;
	if ((JB_Msg_EqualsSyx(Place, kJB_SyxArg, false))) {
		Message* _tmPf0 = SC_Refs__SafeDecrMsg(Msg);
		JB_Incr(_tmPf0);
		JB_Tree_SyntaxAppend(Place, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		Message* _tmPf1 = SC_Refs__SafeDecrMsg(Msg);
		JB_Incr(_tmPf1);
		(JB_Ring_PrevSibSet(Place, _tmPf1));
		JB_Decr(_tmPf1);
	}
}

bool SC_Refs__RelNeedsRef(Message* First) {
	if (SC_Refs__RefBasis(First, true) != kSC__Refs_kBasisObj) {
		return nil;
	}
	if ((JB_Msg_EqualsSyx(First, kJB_SyxDot, false))) {
		return true;
	}
	return true;
}

void SC_Refs__ReturnHandle(Message* Blocker, Message* Arg, Message* Name, int Basis) {
	if (Basis & kSC__Refs_kBasisDeSTRUCTable) {
		if ((!Blocker)) {
			return SC_Refs__Destructable(Blocker, Arg, Name);
		}
		Message* Ch = ((Message*)JB_Ring_First(Blocker));
		JB_Incr(Ch);
		if ((SC_Msg_IsReturnOrRejoin(Blocker) and SC_Msg_OperatorIsThing(Ch, Name->Name)) or (SC_Msg_OperatorIsThing(Blocker, Name->Name))) {
			JB_Decr(Ch);
			return;
		}
		if (((JB_Msg_SyntaxEquals(Blocker, JB_LUB[239], false))) and (SC_Msg_DoesAnything(Ch))) {
			Message* NeedsMoreTemping = SC_Func__TempMoveOut(Ch, Blocker);
			JB_Incr(NeedsMoreTemping);
			SC_Refs__Destructable(Blocker, Arg, Name);
			SC_Refs__ReturnTempMoveOutSub(Ch, Blocker, NeedsMoreTemping);
			JB_Decr(NeedsMoreTemping);
		}
		 else {
			SC_Refs__Destructable(Blocker, Arg, Name);
		}
		JB_Decr(Ch);
		return;
	}
	if (Basis & kSC__Refs_kBasisTempStruct) {
		return;
	}
	if ((!Blocker)) {
		SC_Refs__RefDecr(Name, Arg, Basis);
		return;
	}
	bool IsReturn = SC_Msg_IsReturnOrRejoin(Blocker);
	Message* Child = ((Message*)JB_Ring_First(Blocker));
	JB_Incr(Child);
	if (Child) {
		if (IsReturn and (({
			Message* _tmPf1 = SC_Msg_UnBraType(Child);
			JB_Incr(_tmPf1);
			bool _tmPf0 = SC_Msg_OperatorIsThing(_tmPf1, Name->Name);
			JB_Decr(_tmPf1);
			 _tmPf0;
		}))) {
			SC_Refs__RefSafeDecr(Name, Blocker);
			JB_Decr(Child);
			return;
		}
		if (IsReturn and SC_Refs__ExprNeedsTemping(Child, Name)) {
			SC_Refs__ReturnTempMoveOut(Child, Blocker);
		}
	}
	JB_Decr(Child);
	SC_Refs__RefDecr(Name, Blocker, Basis);
}

void SC_Refs__ReturnTempMoveOut(Message* Child, Message* Blocker) {
	Message* Temp = SC_Func__TempMoveOut(Child, Blocker);
	JB_Incr(Temp);
	SC_Refs__ReturnTempMoveOutSub(Child, Blocker, Temp);
	JB_Decr(Temp);
}

void SC_Refs__ReturnTempMoveOutSub(Message* Child, Message* Blocker, Message* Temp) {
	if (SC_Refs__RefBasis(Child, false) == kSC__Refs_kBasisObj) {
		Message* _tmPf0 = ((Message*)JB_Ring_Parent(Child));
		JB_Incr(_tmPf0);
		Message* Dcl = ((Message*)JB_Ring_Parent(_tmPf0));
		JB_Incr(Dcl);
		JB_Decr(_tmPf0);
		Message* _tmPf1 = JB_Msg_Copy(Temp, nil);
		JB_Incr(_tmPf1);
		SC_Func_RefFunc(SC__Comp_RefIncr, _tmPf1, Dcl);
		JB_Decr(Dcl);
		JB_Decr(_tmPf1);
		SC_Refs__RefSafeDecr(Temp, Blocker);
	}
}

Message* SC_Refs__SafeDecrMsg(Message* Msg) {
	return SC_Refs__RefMsg(Msg, JB_LUB[738], SC__Comp_RefSafeDecr);
}


SCNode* SC_SCSelector__Build(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	Message* Arg = JB_Msg_Last(Node, kJB_SyxArg);
	JB_Incr(Arg);
	Message* Name = JB_Msg_NeedSyx(Node, kJB_SyxThg);
	JB_Incr(Name);
	Message* Items = SC_SCSelector__FindItems(Arg);
	JB_Incr(Items);
	Message* ActualNames = JB_Msg_NeedSyx(Items, kJB_SyxList);
	JB_Incr(ActualNames);
	if (!(Arg and (Name and (Items and ActualNames)))) {
		JB_Decr(ActualNames);
		JB_Decr(Items);
		JB_Decr(Name);
		JB_Decr(Arg);
		return nil;
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Node, (&_usingf0));
	bool IsClass = SC_SCSelector__HasClassStuff(Arg);
	JB_String* Type = ((JB_String*)JB_Ternary(IsClass, ((JB_String*)Name->Name), ((JB_String*)JB_LUB[1803])));
	JB_Incr(Type);
	Message* ClassCode = SC_SCSelector__BuildClassCode(Name->Name, Type);
	JB_Incr(ClassCode);
	if (!ClassCode) {
		JB_Decr(ClassCode);
		JB_Decr(Type);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(ActualNames);
		JB_Decr(Items);
		JB_Decr(Name);
		JB_Decr(Arg);
		return nil;
	}
	Message* Dot3 = JB_Msg_FindNested(ClassCode, kJB_SyxSThg, JB_LUB[26], true);
	JB_Incr(Dot3);
	JB_Tree_Remove(Items);
	{
		Message* _Valuef4 = ((Message*)JB_Ring_First(ActualNames));
		JB_Incr(_Valuef4);
		while (_Valuef4) {
			Message* _Nf3 = ((Message*)JB_Ring_NextSib(_Valuef4));
			JB_Incr(_Nf3);
			Message* Line = _Valuef4;
			JB_Incr(Line);
			Message* Init = nil;
			JB_Incr(Init);
			if (JB_Msg_EqualsSyx(Line, kJB_SyxItem, false)) {
				JB_SetRef(Line, ((Message*)JB_Ring_First(Line)));
				JB_SetRef(Init, ((Message*)JB_Ring_NextSib(Line)));
				if (JB_Msg_EqualsSyx(Init, kJB_SyxList, false)) {
					Init->Func = kJB_SyxPrm;
				}
			}
			if (!JB_Msg_Expect(Line, kJB_SyxThg, nil)) {
				JB_Decr(Init);
				JB_Decr(Line);
				JB_Decr(_Nf3);
				break;
			}
			//using;
			MessagePosition _usingf1 = ((MessagePosition){});
			JB_Msg_SyntaxUsing(Line, (&_usingf1));
			SC_SCSelector__DeclareOneSel(Line->Name, Type, Dot3);
			SC_SCSelector__LoadOneSel(Line->Name, Name->Name, Dot3, Init);
			JB_Decr(Init);
			JB_MsgPos_SyntaxUsingComplete((&_usingf1), Line);
			JB_Decr(Line);
			JB_SetRef(_Valuef4, _Nf3);
			JB_Decr(_Nf3);
			JB_MsgPos_Destructor((&_usingf1));
		};
		JB_Decr(_Valuef4);
		;
		JB_Decr(Items);
	}
	;
	{
		Message* Ch = ((Message*)JB_Ring_Last(Arg));
		JB_Incr(Ch);
		while (Ch) {
			Message* _tmPf6 = ((Message*)JB_Tree_Get(ClassCode, -1));
			JB_Incr(_tmPf6);
			(JB_Ring_FirstSet(_tmPf6, Ch));
			JB_Decr(_tmPf6);
			JB_SetRef(Ch, ((Message*)JB_Ring_PrevSib(Ch)));
		};
		JB_Decr(Ch);
		;
		JB_Decr(Type);
		JB_Decr(ActualNames);
		JB_Decr(Name);
	}
	;
	JB_Decr(Arg);
	if (!IsClass) {
		Message* _tmPf7 = ((Message*)JB_Ring_Parent(Dot3));
		JB_Incr(_tmPf7);
		JB_SetRef(ClassCode, ((Message*)JB_Ring_Parent(_tmPf7)));
		JB_Decr(_tmPf7);
	}
	JB_Tree_Remove(Dot3);
	JB_Decr(Dot3);
	JB_FreeIfDead(SC_Base_CollectSub(Name_space, ClassCode));
	JB_Decr(ClassCode);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
	JB_MsgPos_Destructor((&_usingf0));
	return nil;
}

Message* SC_SCSelector__BuildClassCode(JB_String* Name, JB_String* Type) {
	FastString* _fsf0 = JB_FS_Constructor(nil);
	JB_Incr(_fsf0);
	JB_FS_AppendString(_fsf0, JB_LUB[1765]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[1766]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[1767]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[1768]);
	JB_FS_AppendString(_fsf0, Type);
	JB_FS_AppendString(_fsf0, JB_LUB[1769]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[1770]);
	JB_FS_AppendString(_fsf0, Type);
	JB_FS_AppendString(_fsf0, JB_LUB[1771]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[1772]);
	JB_FS_AppendString(_fsf0, Type);
	JB_FS_AppendString(_fsf0, JB_LUB[1773]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[1774]);
	JB_String* _tmPf2 = JB_FS_GetResult(_fsf0);
	JB_Incr(_tmPf2);
	JB_Decr(_fsf0);
	Message* _tmPf1 = JB_Str_Parse((_tmPf2), kJB_SyxArg, true);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf2);
	Message* _tmPf3 = ((Message*)JB_Ring_First(_tmPf1));
	JB_Incr(_tmPf3);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

void SC_SCSelector__DeclareOneSel(JB_String* Sel_name, JB_String* Type, Message* Place) {
	Message* _tmPf0 = SC_NewDeclWithStrStr(Type, Sel_name);
	JB_Incr(_tmPf0);
	(JB_Ring_PrevSibSet(Place, _tmPf0));
	JB_Decr(_tmPf0);
}

Message* SC_SCSelector__FindItems(Message* Arg) {
	return JB_Msg_FindSyxName(Arg, kJB_SyxTmp, JB_LUB[948], true);
}

bool SC_SCSelector__HasClassStuff(Message* Self) {
	bool Rz = false;
	{
		Message* S = ((Message*)JB_Ring_First(Self));
		JB_Incr(S);
		while (S) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(S));
			JB_Incr(_Nf1);
			if (!((SC_Msg_OperatorIsTmp(S, JB_LUB[166])) or (SC_Msg_OperatorIsTmp(S, JB_LUB[948])))) {
				if ((SC_Msg_OperatorIsTmp(S, JB_LUB[949]))) {
					JB_Msg_Fail(S, JB_LUB[950]);
					JB_Decr(_Nf1);
					JB_Decr(S);
					return nil;
				}
				Rz = true;
			}
			JB_SetRef(S, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(S);
		;
	}
	;
	return Rz;
}

void SC_SCSelector__LoadOneSel(JB_String* Sel_name, JB_String* Module_name, Message* LoaderPlace, Message* Prms) {
	JB_Incr(Prms);
	Message* Line = (JB_Syx_Msg(kJB_SyxSDot, JB_LUB[476]));
	JB_Incr(Line);
	Message* _tmPf5 = ({
		Message* __imPf0 = (JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0]));
		JB_Incr(__imPf0);
		Message* _tmPf6 = ({
			Message* __imPf1 = (JB_Syx_Msg(kJB_SyxBRel, JB_LUB[48]));
			JB_Incr(__imPf1);
			Message* _tmPf7 = ({
				Message* __imPf2 = (JB_Syx_Msg(kJB_SyxDot, Sel_name));
				JB_Incr(__imPf2);
				Message* _tmPf8 = JB_Syx_Msg(kJB_SyxThg, Module_name);
				JB_Incr(_tmPf8);
				JB_Tree_SyntaxAppend(__imPf2, (_tmPf8));
				JB_Decr(_tmPf8);
				Message* _tmPf9 = JB_Syx_Msg(kJB_SyxEmb, JB_LUB[0]);
				JB_Incr(_tmPf9);
				JB_Tree_SyntaxAppend(__imPf2, (_tmPf9));
				JB_Decr(_tmPf9);
				JB_SafeDecr(__imPf2);
				 __imPf2;
			});
			JB_Incr(_tmPf7);
			JB_Tree_SyntaxAppend(__imPf1, _tmPf7);
			JB_Decr(_tmPf7);
			JB_SafeDecr(__imPf1);
			 __imPf1;
		});
		JB_Incr(_tmPf6);
		JB_Tree_SyntaxAppend(__imPf0, _tmPf6);
		JB_Decr(_tmPf6);
		Message* _tmPf10 = JB_Syx_Msg(kJB_SyxStr, Sel_name);
		JB_Incr(_tmPf10);
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf10));
		JB_Decr(_tmPf10);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	});
	JB_Incr(_tmPf5);
	JB_Tree_SyntaxAppend(Line, _tmPf5);
	JB_Decr(_tmPf5);
	(JB_Ring_NextSibSet(LoaderPlace, Line));
	if (Prms) {
		if (!JB_Msg_EqualsSyx(Prms, kJB_SyxPrm, false)) {
			JB_SetRef(Prms, ({
				Message* __imPf3 = (JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0]));
				JB_Incr(__imPf3);
				JB_Tree_SyntaxAppend(__imPf3, Prms);
				JB_SafeDecr(__imPf3);
				 __imPf3;
			}));
		}
		Message* Line2 = (JB_Syx_Msg(kJB_SyxDot, JB_LUB[477]));
		JB_Incr(Line2);
		Message* _tmPf11 = ({
			Message* __imPf4 = (JB_Syx_Msg(kJB_SyxDot, Sel_name));
			JB_Incr(__imPf4);
			Message* _tmPf12 = JB_Syx_Msg(kJB_SyxThg, Module_name);
			JB_Incr(_tmPf12);
			JB_Tree_SyntaxAppend(__imPf4, (_tmPf12));
			JB_Decr(_tmPf12);
			Message* _tmPf13 = JB_Syx_Msg(kJB_SyxEmb, JB_LUB[0]);
			JB_Incr(_tmPf13);
			JB_Tree_SyntaxAppend(__imPf4, (_tmPf13));
			JB_Decr(_tmPf13);
			JB_SafeDecr(__imPf4);
			 __imPf4;
		});
		JB_Incr(_tmPf11);
		JB_Tree_SyntaxAppend(Line2, _tmPf11);
		JB_Decr(_tmPf11);
		JB_Tree_SyntaxAppend(Line2, Prms);
		Message* _tmPf14 = ((Message*)JB_Ring_Parent(Line));
		JB_Incr(_tmPf14);
		JB_Tree_SyntaxAppend(_tmPf14, Line2);
		JB_Decr(Line2);
		JB_Decr(_tmPf14);
	}
	JB_Decr(Line);
	JB_Decr(Prms);
}

SCNode* SC_SCSelector__Neu(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_FreeIfDead(SC_SCSelector__Build(Node, Name_space, ErrPlace));
	JB_SetRef(Node->Name, JB_LUB[1843]);
	return SC__Comp_program;
}


int SC_SCStrings__Init_() {
	{
	}
	;
	return 0;
}


void SC_SCTasks__CollectAll() {
	SCClass* T = SC_TypeTask;
	if (!T) {
		return;
	}
	{
		Array* _LoopSrcf2 = SC__Comp_TasksTodo;
		int _if0 = 0;
		while (true) {
			Message* Ch = ((Message*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Ch == nil) {
				break;
			}
			SCNode* P = ((SCNode*)Ch->Obj);
			if (P == SC__Comp_program) {
				P = T->Modul;
			}
			 else if (JB_Object_FastIsa(P, &SCClassData)) {
				P = ((SCClass*)((SCClass*)P)->Modul);
			}
			SC_SCTasks__NewTaskActual(Ch, P);
			(++_if0);
		};
	};
}

int SC_SCTasks__Init_() {
	{
		JB_SetRef(SC__SCTasks_tmp, JB_Msg_ConstructorEmpty(nil));
		JB_SetRef(SC__SCTasks_TaskMacro, JB_Macro_ConstructorStr(nil, (JB_LUB[282])));
	}
	;
	return 0;
}

SCNode* SC_SCTasks__NewTask(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_SetRef(Node->Obj, Name_space);
	JB_Array_SyntaxAppend(SC__Comp_TasksTodo, Node);
	return SC__Comp_program;
}

void SC_SCTasks__NewTaskActual(Message* Node, SCNode* Name_space) {
	Message* Name = JB_Msg_NeedSyxOK(Node, kJB_SyxThg, kJB_SyxDot);
	if (!Name) {
		return;
	}
	Message* Fields = ((Message*)JB_Ring_NextSib(Name));
	if ((JB_Msg_EqualsSyx(Fields, kJB_SyxBra, false)) or (JB_Msg_EqualsSyx(Fields, kJB_SyxList, false))) {
		Fields->Func = kJB_SyxBra;
	}
	 else {
		Fields = JB_Syx_Msg(kJB_SyxBra, JB_LUB[0]);
		(JB_Ring_NextSibSet(Name, Fields));
	}
	Message* Arg = ((Message*)JB_Ring_NextSib(Fields));
	if (!JB_Msg_Expect(Arg, kJB_SyxArg, nil)) {
		Arg = JB_Msg_Msg(Node, kJB_SyxArg, JB_LUB[0]);
	}
	Message* With = ((Message*)JB_Ring_NextSib(Arg));
	if (With) {
		Message* NewRunArg = JB_Msg_NeedSyx(With, kJB_SyxArg);
		if (!(JB_Msg_Expect(With, kJB_SyxTmp, JB_LUB[1298]) and (JB_Msg_ExpectLast(With, JB_LUB[0]) and JB_Msg_ExpectLast(NewRunArg, JB_LUB[0])))) {
			return;
		}
		JB_Tree_SyntaxAppend(Arg, With);
		JB_SetRef(With->Name, JB_LUB[1829]);
		SC_Msg_MoveAllAfter(NewRunArg, With);
		while (true) {
			Message* F = ((Message*)JB_Ring_First(Arg));
			if (!(F and (F != With))) {
				break;
			}
			JB_Tree_SyntaxAppend(NewRunArg, F);
		};
	}
	Message* Supper = ((Message*)JB_Ring_First(Fields));
	while (true) {
		Message* L = ((Message*)JB_Ring_Last(Fields));
		if ((!L)) {
			break;
		}
		(JB_Msg_SyntaxIsSet(L, kJB__MsgParseFlags_Special, true));
		(JB_Ring_FirstSet(SC__SCTasks_tmp, L));
	};
	int Level = 2;
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Node, (&_usingf0));
	if ((JB_Msg_EqualsSyx(Supper, kJB_SyxThg, false)) or (JB_Msg_EqualsSyx(Supper, kJB_SyxDot, false))) {
		JB_Tree_SyntaxAppend(Fields, Supper);
		Level = 3;
	}
	 else {
		JB_Msg_AppendSyx(Fields, kJB_SyxSDot, JB_LUB[1158]);
	}
	SC_Msg_BuildTask(Arg, Fields, Level);
	JB_Tree_TakeAllFrom(Arg, SC__SCTasks_tmp);
	JB_SetRef(Node->Name, JB_LUB[236]);
	if (JB_Msg_EqualsSyx(Name, kJB_SyxDot, false)) {
		SCModule* P = SC_Base_FindModuleMsg(Name_space, ((Message*)JB_Ring_First(Name)), 0);
		if (P) {
			Name_space = P;
		}
	}
	SC_Base_Use(Name_space);
	SCModule* Task = ((SCModule*)SC_Class__NeuRole(Node, Name_space, Node));
	if (Task) {
		JB_Array_SyntaxAppend(SC__Comp_TasksList, Task->Cls);
		Task->Cls->IsRole = Level;
		Task->Parent = Name_space;
		SC_Base_TryAdd(Name_space, Node, Task, Task->Name);
	}
	SC__Imp_Curr = nil;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
	JB_MsgPos_Destructor((&_usingf0));
}


SCNode* SC_SCThe__NewInsertion(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	Message* Name = ((Message*)JB_Tree_Get(Node, 0));
	if (JB_Msg_EqualsSyx(Name, kJB_SyxArg, false)) {
		Name = JB_Syx_OperatorPlus(kJB_SyxThg, JB_LUB[999]);
		(JB_Ring_FirstSet(Node, Name));
	}
	if (!JB_Msg_Expect(Name, kJB_SyxThg, nil)) {
		return nil;
	}
	if (!((JB_Msg_SyntaxEquals(Name, JB_LUB[1141], false)) or (JB_Msg_SyntaxEquals(Name, JB_LUB[999], false)))) {
		JB_Msg_Fail(Name, nil);
		return nil;
	}
	Dictionary* D = ({
		Dictionary* _X = ((Dictionary*)JB_Dict_Value0(SC__Comp_AdjDicts, Name->Name));
		if (!_X) {
			_X = JB_Dict_Constructor(nil);
			(JB_Dict_ValueSet(SC__Comp_AdjDicts, Name->Name, _X));
		}
		 _X;
	});
	{
		Message* _LoopSrcf2 = JB_Msg_NextOf(Name, kJB_SyxArg);
		Message* Line = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Line));
			JB_Msg_Expect(Line, kJB_SyxTmp, nil);
			Message* Value = JB_Msg_NeedFirst(Line);
			JB_Msg_ExpectLast(Value, JB_LUB[0]);
			Macro* Old = ((Macro*)JB_Dict_Value0(D, Line->Name));
			if (Old) {
				if (true) {
					JB_Msg_Fail(Line, JB_LUB[1142]);
				}
			}
			 else {
				(JB_Dict_ValueSet(D, Line->Name, JB_Macro_ConstructorMsg(nil, Value)));
			}
			Line = _Nf1;
		};
		;
	}
	;
	JB_Tree_Remove(Node);
	return SC__Comp_program;
}


void SC_SC_API__DelayedClassAPI(Message* Node, JB_String* Proj) {
	if ((JB_Msg_SyntaxEquals(Node, JB_LUB[1014], false))) {
		SC_SC_API__NewAPI(Node, JB_LUB[0], SC__Comp_program, Proj);
		return;
	}
	Message* Name = JB_Msg_NeedSyx(Node, kJB_SyxThg);
	JB_Incr(Name);
	if (!Name) {
		JB_Decr(Name);
		return;
	}
	Message* _tmPf2 = JB_Msg_NextOf(Name, kJB_SyxBra);
	JB_Incr(_tmPf2);
	Message* Partname = JB_Msg_NeedSyx(_tmPf2, kJB_SyxThg);
	JB_Incr(Partname);
	JB_Decr(_tmPf2);
	if (!Partname) {
		JB_Decr(Partname);
		JB_Decr(Name);
		return;
	}
	Message* Arg = JB_Msg_Last(Node, kJB_SyxArg);
	JB_Incr(Arg);
	if (!Arg) {
		JB_Decr(Arg);
		JB_Decr(Partname);
		JB_Decr(Name);
		return;
	}
	SCClass* Cls = SC_Comp__SyntaxAccess(Name);
	JB_Incr(Cls);
	JB_Decr(Name);
	if (!Cls) {
		JB_Decr(Cls);
		JB_Decr(Arg);
		JB_Decr(Partname);
		return;
	}
	Message* _tmPf3 = ((Message*)JB_Ring_Parent(Partname));
	JB_Incr(_tmPf3);
	JB_Tree_Remove(_tmPf3);
	{
		Message* Ch = ((Message*)JB_Ring_First(Arg));
		JB_Incr(Ch);
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			JB_Incr(_Nf1);
			if (!JB_Msg_Expect(Ch, kJB_SyxTmp, JB_LUB[1014])) {
				JB_Decr(_Nf1);
				JB_Decr(Ch);
				JB_Decr(Cls);
				JB_Decr(Arg);
				JB_Decr(Partname);
				return;
			}
			SC_SC_API__NewAPI(Ch, Partname->Name, Cls, Proj);
			JB_SetRef(Ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(Ch);
		;
		JB_Decr(_tmPf3);
	}
	;
	JB_Decr(Partname);
	JB_Decr(Arg);
	JB_Decr(Cls);
}

void SC_SC_API__NewAPI(Message* Api, JB_String* Part, SCNode* Parent, JB_String* Proj) {
	JB_Incr(Proj);
	JB_Incr(Part);
	JB_SetRef(Proj, JB_Str_OperatorPlus(Proj, JB_LUB[162]));
	Message* Name = JB_Msg_NeedSyx(Api, kJB_SyxThg);
	JB_Incr(Name);
	if (!Name) {
		JB_Decr(Part);
		JB_Decr(Proj);
		JB_Decr(Name);
		return;
	}
	Message* Arg = JB_Msg_Last(Api, kJB_SyxArg);
	JB_Incr(Arg);
	if (!Arg) {
		JB_Decr(Part);
		JB_Decr(Proj);
		JB_Decr(Arg);
		JB_Decr(Name);
		return;
	}
	Message* Cpp = JB_Msg_FindSyxName(Arg, kJB_SyxTmp, JB_LUB[1235], false);
	JB_Incr(Cpp);
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Arg, (&_usingf0));
		if ((!Cpp)) {
			JB_SetRef(Cpp, (JB_Syx_Msg(kJB_SyxTmp, JB_LUB[1235])));
			(JB_Ring_FirstSet(Arg, Cpp));
		}
		if (JB_Str_Exists(Part)) {
			JB_SetRef(Part, JB_Str_OperatorPlus(Part, JB_LUB[162]));
		}
		JB_String* _tmPf3 = JB_Str_OperatorPlus(Part, Name->Name);
		JB_Incr(_tmPf3);
		JB_String* _tmPf2 = JB_Str_OperatorPlus(Proj, _tmPf3);
		JB_Incr(_tmPf2);
		JB_Decr(_tmPf3);
		Message* _tmPf1 = JB_Syx_Msg(kJB_SyxThg, _tmPf2);
		JB_Incr(_tmPf1);
		JB_Decr(_tmPf2);
		JB_Tree_SyntaxAppend(Cpp, (_tmPf1));
		JB_Decr(_tmPf1);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Arg);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Name);
	JB_Decr(Arg);
	JB_Decr(Cpp);
	JB_Decr(Proj);
	JB_Decr(Part);
	SCNode* Fn = SC_Func__NewFunc(Api, Parent, Api);
	JB_Incr(Fn);
	if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
		(SC_SCObject_IsVisibleSet(((SCFunction*)Fn), true));
		JB_Array_SyntaxAppend(SC__Comp_API_Funcs, ((SCFunction*)Fn));
	}
	JB_Decr(Fn);
}

SCNode* SC_SC_API__NewExportAPI(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (Name_space != SC__Comp_program) {
		JB_Msg_Fail(ErrPlace, nil);
		return nil;
	}
	SC_SC_API__NewExportAPISub(Node, Name_space);
	JB_Tree_Remove(Node);
	return SC__Comp_program;
}

void SC_SC_API__NewExportAPISub(Message* Node, SCObject* Parent) {
	Message* Name = JB_Msg_NeedSyx(Node, kJB_SyxThg);
	JB_Incr(Name);
	if (!Name) {
		JB_Decr(Name);
		return;
	}
	Message* Arg = JB_Msg_NextOf(Name, kJB_SyxArg);
	JB_Incr(Arg);
	JB_Decr(Name);
	if (!Arg) {
		JB_Decr(Arg);
		return;
	}
	Message* Lib_tmp = JB_Msg_FindSyxName(Arg, kJB_SyxTmp, JB_LUB[1058], true);
	JB_Incr(Lib_tmp);
	if (!Lib_tmp) {
		JB_Decr(Lib_tmp);
		JB_Decr(Arg);
		return;
	}
	Message* Lib_name = JB_Msg_NeedSyx(Lib_tmp, kJB_SyxStr);
	JB_Incr(Lib_name);
	JB_Decr(Lib_tmp);
	if (!Lib_name) {
		JB_Decr(Lib_name);
		JB_Decr(Arg);
		return;
	}
	if (!(JB_Msg_SyntaxEquals(Lib_name, SC__Comp_ProjectName, true))) {
		JB_Decr(Lib_name);
		JB_Decr(Arg);
		return;
	}
	{
		Message* C = ((Message*)JB_Ring_First(Arg));
		JB_Incr(C);
		while (C) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(C));
			JB_Incr(_Nf1);
			if ((JB_Msg_SyntaxEquals(C, JB_LUB[1014], false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[1059], false))) {
				JB_SetRef(C->Obj, Parent);
				JB_Array_SyntaxAppend(SC__Comp_API_List, C);
			}
			 else if ((JB_Msg_SyntaxEquals(C, JB_LUB[1060], false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[1058], false))) {
				if (!JB_FreeIfDead(JB_Msg_NeedSyx(C, kJB_SyxStr))) {
					JB_Decr(_Nf1);
					JB_Decr(C);
					JB_Decr(Arg);
					return;
				}
			}
			 else {
				if (true) {
					JB_Msg_Fail(C, nil);
				}
			}
			JB_SetRef(C, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(C);
		;
		JB_Decr(Lib_name);
	}
	;
	JB_Decr(Arg);
	JB_SetRef(SC__Comp_API_Place, Node);
}


JB_Error* SC_Errors__AlreadyIgnored(Message* F, SCFunction* Fn) {
	JB_Error* E = ((JB_Error*)JB_Dict_Obj(SC__Errors_IgnoredBranches, F));
	if (E) {
		return E;
	}
	Message* RipRoot = SC_Func_SourceArg(Fn);
	{
		Message* Curr = F;
		while (Curr) {
			if ((JB_Msg_EqualsSyx(Curr, kJB_SyxArg, false))) {
				JB_Error* E2 = ((JB_Error*)JB_Dict_Obj(SC__Errors_IgnoredBranches, Curr));
				if (E2) {
					return E2;
				}
			}
			if (Curr == RipRoot) {
				return nil;
			}
			Curr = ((Message*)JB_Ring_Parent(Curr));
		};
		;
	}
	;
	return nil;
}

bool SC_Errors__CanKeep(JB_Error* Err) {
	if (JB_Err_SyntaxIs(Err, kJB__ErrorFlags_DontStrip)) {
		return true;
	}
	if ((!Err->Node) or JB_Err_IsWarning(Err)) {
		return true;
	}
	Message* A = Err->Node;
	if (A) {
		if (!JB_Object_Isa(A->Obj, &SCFunctionData)) {
			A = JB_Msg_Ancestor(A, kJB_SyxArg);
		}
	}
	if (A) {
		SCFunction* Fn = SC_Msg_MsgOwningFunc(A);
		if (Fn) {
			JB_Error* OldErr = SC_Errors__AlreadyIgnored(A, Fn);
			if (OldErr and (OldErr->Severity >= Err->Severity)) {
				return false;
			}
			(JB_Dict_ObjSet(SC__Errors_IgnoredBranches, A, Err));
		}
	}
	return true;
}

int SC_Errors__Init_() {
	{
		JB_SetRef(SC__Errors_IgnoredBranches, JB_Dict_Constructor(nil));
	}
	;
	return 0;
}


void SC_Sav__BugWorkAround() {
	//visible;
	FP_SaverLoadClass Whatever = nil;
}

void SC_Sav__TestSaver() {
	if (!JB_Rec_OK(JB_StdErr)) {
		return;
	}
	Array* R = JB_Array_Constructor0(nil);
	JB_Incr(R);
	int N = 5;
	{
		int I = 0;
		while (I < N) {
			SavingTest* S = SC_SavingTest_Constructor(nil, I);
			JB_Incr(S);
			if (!I) {
				JB_SetRef(S->Name, JB_LUB[0]);
			}
			JB_Array_SyntaxAppend(R, S);
			JB_Array_SyntaxAppend(R, S);
			JB_Decr(S);
			(++I);
		};
	}
	;
	JB_Array_SyntaxAppend(R, JB_LUB[1804]);
	JB_String* Path = SC_Ext__TmpBase(JB_LUB[1805]);
	JB_Incr(Path);
	JB_File* F = JB_Str_AsFile(Path);
	JB_Incr(F);
	JB_Decr(Path);
	JB_Sav_SaveToFile(R, F);
	Message* _tmPf2 = JB_File_Parse(F, 16777216, false);
	JB_Incr(_tmPf2);
	JB_Decr(F);
	JB_Object* R2 = JB_Msg_RestoreLoad(_tmPf2);
	JB_Incr(R2);
	if (JB_Object_Isa(R2, &ArrayData)) {
		JB_FreeIfDead(JB_Array_Pop(R));
		JB_Object* Last = JB_Array_Pop(((Array*)R2));
		JB_Incr(Last);
		if (!(Last and ((JB_Object_Isa(Last, &JB_StringData)) and ((JB_Str_Equals(((JB_String*)Last), JB_LUB[1804], false)))))) {
			JB_Object_Fail(nil);
			JB_Decr(Last);
			JB_Decr(R2);
			JB_Decr(_tmPf2);
			JB_Decr(R);
			return;
		}
		JB_Decr(Last);
		if (JB_Array_Size(((Array*)R2)) != JB_Array_Size(R)) {
			JB_Object_Fail(nil);
			JB_Decr(R2);
			JB_Decr(_tmPf2);
			JB_Decr(R);
			return;
		}
		{
			int I = 0;
			while (I < N) {
				JB_Object* _tmPf3 = JB_Array_Value(R, I);
				JB_Incr(_tmPf3);
				JB_Object* _tmPf4 = JB_Array_Value(((Array*)R2), I);
				JB_Incr(_tmPf4);
				if (!SC_SavingTest__IsEqual(_tmPf3, _tmPf4)) {
					JB_Object_Fail(nil);
					JB_Decr(_tmPf4);
					JB_Decr(_tmPf3);
					JB_Decr(R2);
					JB_Decr(_tmPf2);
					JB_Decr(R);
					return;
				}
				JB_Decr(_tmPf3);
				JB_Decr(_tmPf4);
				(++I);
			};
		};
	}
	 else {
		if (true) {
			JB_Str_Fail(JB_LUB[1806]);
		}
	}
	JB_Decr(R);
	JB_Decr(R2);
	JB_Decr(_tmPf2);
}


int SC_SC_Targets__Init_() {
	{
		JB_SetRef(SC__SC_Targets_Items, JB_Dict_Constructor(nil));
	}
	;
	return 0;
}

bool SC_SC_Targets__SyntaxAccess(JB_String* Name) {
	JB_String* _tmPf0 = ((JB_String*)JB_Dict_ValueLower(SC__SC_Targets_Items, Name));
	JB_Incr(_tmPf0);
	bool _tmPf1 = JB_Str_Yes(_tmPf0, nil);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

void SC_SC_Targets__SyntaxAccessSet(JB_String* Name, bool Value) {
	JB_String* _tmPf0 = JB_bool_Render0(Value);
	JB_Incr(_tmPf0);
	(JB_Dict_ValueLowerSet(SC__SC_Targets_Items, Name, _tmPf0));
	JB_Decr(_tmPf0);
}


bool SC_SpdAssembler__GenerateASM(SCFunction* Fn) {
	if (SC_Func_SyntaxEquals(Fn, JB_LUB[1775], true)) {
	}
	if (!SC_Pac_InitAndStartFunc((&SC__Pac_Sh), Fn)) {
		return nil;
	}
	SC_Func_GenASM(Fn);
	SC_Pac_FinishASM((&SC__Pac_Sh));
	if (JB_Rec_OK(JB_StdErr)) {
		return true;
	}
	return false;
}

int SC_SpdAssembler__Init_() {
	{
		JB_SetRef(SC__SpdAssembler_PackFuncs, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

SCFunction* SC_SpdAssembler__AccessStr(Message* M) {
	SCFunction* _tmPf0 = SC_Comp__XFunc(M->Name, M);
	if (!_tmPf0) {
		JB_Msg_Fail(M, JB_LUB[1061]);
		return nil;
	}
	return _tmPf0;
}


ErrorInt JB_Main() {
	(JB_App__ConfigureSet(SC___AppConfString));
	//visible;
	SC_Comp__SetupEnv();
	SC_Comp__MiniTests();
	SC_Comp__Main();
	SC_Comp__PrintResults();
	return 0;
}


void SC_Crkt__CollectString(Message* M, bool StdLib) {
	if (SC__Options_ModePack and (!SC__Options_ModeCpp)) {
		if (StdLib) {
			return;
		}
	}
	MessageID** P = ((MessageID**)JB_Dict_MakePlace(SC__Crkt_Table2, M->Name));
	MessageID* I = ((MessageID*)(P[0]));
	if (I == nil) {
		I = SC_Crkt__NewID(M->Name);
		JB_SetRef(P[0], I);
	}
	JB_SetRef(M->Name, I);
}

void SC_Crkt__CorrectConsts() {
	{
		Array* _LoopSrcf2 = SC__Comp_DeclConstants;
		int _if0 = 0;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (D == nil) {
				break;
			}
			Message* Def = D->Default;
			if (JB_Msg_IsString(Def)) {
				SC_Crkt__CollectString(Def, SC_Decl_IsLib(D));
			}
			(++_if0);
		};
	};
}

void SC_Crkt__CorrectFile(JB_File* Where) {
	if (SC__Options_PrintCompileString) {
		JB_PrintLine(Where);
	}
	bool HasAnything = false;
	Message* M = JB_File_Parse(Where, 4194304, true);
	JB_Incr(M);
	if (M) {
		HasAnything = JB_Ring_HasChildren(M);
		Dictionary* _tmPf0 = JB_Msg_Dict(M, false, true);
		JB_Incr(_tmPf0);
		SC_Crkt__MergeTable(M, _tmPf0);
		JB_Decr(_tmPf0);
	}
	SC_Crkt__IDSort(HasAnything);
	FastString* Fs = JB_Str_Out(Where, true);
	JB_Incr(Fs);
	if (Fs) {
		SC_Crkt__WriteTable(Fs);
	}
	JB_Decr(Fs);
	JB_Decr(M);
}

void SC_Crkt__CorrectStrings() {
	JB_File* F = ((JB_File*)JB_Ternary(JB_Str_Exists(SC__Options_SingleFileInput), SC_Comp__GeneratedCppsFolder(), SC__Comp_BaseProjectPath));
	JB_Incr(F);
	JB_File* Strs = JB_File_SyntaxAccess(F, JB_LUB[1821]);
	JB_Incr(Strs);
	JB_Decr(F);
	SC_Crkt__CorrectFile(Strs);
	JB_Decr(Strs);
}

int SC_Crkt__Count() {
	return JB_Array_Size(SC__Crkt_List);
}

void SC_Crkt__IDSort(bool IDOrder) {
	if (IDOrder) {
		JB_SorterComparer_Sort(((FP_SorterComparer)(((&JB_ID__ByID)))), SC__Crkt_List);
	}
	 else {
		JB_Array_Sort(SC__Crkt_List, ((FP_SorterComparer)((&JB_Str__Sorter))));
		{
			Array* _LoopSrcf2 = SC__Crkt_List;
			int _if0 = 0;
			while (true) {
				MessageID* S = ((MessageID*)JB_Array_Value(_LoopSrcf2, _if0));
				if (S == nil) {
					break;
				}
				int I = _if0;
				S->ID = I;
				(++_if0);
			};
		};
	}
}

int SC_Crkt__Init_() {
	{
		JB_SetRef(SC__Crkt_Table2, JB_Dict_Constructor(nil));
		JB_SetRef(SC__Crkt_List, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

void SC_Crkt__MergeTable(Message* Disk, Dictionary* D3) {
	//visible;
	int NextID = 0;
	Message* Dl = ((Message*)JB_Ring_Last(Disk));
	if (Dl) {
		NextID = (Dl->Position + 1);
	}
	if (JB_Ring_HasChildren(Disk)) {
		{
			Array* _LoopSrcf2 = SC__Crkt_List;
			int _if0 = 0;
			while (true) {
				MessageID* S = ((MessageID*)JB_Array_Value(_LoopSrcf2, _if0));
				if (S == nil) {
					break;
				}
				SC_Crkt__UseID(S, ((Message*)JB_Dict_Value0(D3, S)));
				(++_if0);
			};
		};
	}
	{
		Array* _LoopSrcf5 = SC__Crkt_List;
		int _if3 = 0;
		while (true) {
			MessageID* S = ((MessageID*)JB_Array_Value(_LoopSrcf5, _if3));
			if (S == nil) {
				break;
			}
			if ((S->Func != kJB_SyxNum) and (!SC_Crkt__UseID(S, ((Message*)JB_Ring_First(Disk))))) {
				S->ID = NextID++;
			}
			(++_if3);
		};
	};
}

MessageID* SC_Crkt__NewID(JB_String* Name) {
	MessageID* Rz = ((MessageID*)nil);
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_ID_Constructor(nil, Name, kJB_SyxStr, SC_Crkt__Count()));
	JB_Array_SyntaxAppend(SC__Crkt_List, Rz);
	SC__Crkt_TotalSize = (SC__Crkt_TotalSize + (JB_Str_Length(Name) + 1));
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Crkt__UseID(MessageID* S, Message* Old) {
	if (!Old) {
		return nil;
	}
	int OldID = Old->Position;
	if (OldID >= SC_Crkt__Count()) {
		return nil;
	}
	if ((!JB_Msg_Length(Old)) != (!OldID)) {
		JB_Msg_Fail(Old, JB_LUB[867]);
		return nil;
	}
	S->ID = OldID;
	S->Func = kJB_SyxNum;
	JB_Tree_Remove(Old);
	return true;
}

void SC_Crkt__WriteTable(FastString* Fs) {
	{
		Array* _LoopSrcf2 = SC__Crkt_List;
		int _if0 = 0;
		while (true) {
			MessageID* S = ((MessageID*)JB_Array_Value(_LoopSrcf2, _if0));
			if (S == nil) {
				break;
			}
			JB_FS_AppendQuotedEscape(Fs, S);
			JB_FS_AppendByte(Fs, '\n');
			(++_if0);
		};
	};
}


void JB_Terminal__Display() {
	Date Now = JB_Date__Now();
	if (JB__Terminal_LastDisplay) {
		JB_Date__Sleep(JB_Date_OperatorMinus((JB__Terminal_LastDisplay + (65536 / 60)), Now));
	}
	 else {
		JB_PrintLine(JB_LUB[413]);
	}
	JB__Terminal_LastDisplay = Now;
	JB_PrintLine(JB_LUB[414]);
	JB_String* _tmPf0 = JB_Terminal__Flat();
	JB_Incr(_tmPf0);
	JB_Print(_tmPf0);
	JB_Decr(_tmPf0);
}

void JB_Terminal__DrawRect(ivec4 Rect, JB_String* Inside, TerminalColor Colors) {
	ivec4 R2 = Rect + ivec4{1, 1, -2, -2};
	{
		ivec2 S = ivec2{Rect[0], Rect[1]};
		while (S[1] < Rect[3]) {
			while (S[0] < Rect[2]) {
				JB_String* C = Inside;
				JB_Incr(C);
				bool X = JB_ivec2_OperatorContains(ivec2{R2[0], R2[2]}, S[0]);
				bool Y = JB_ivec2_OperatorContains(ivec2{R2[1], R2[3]}, S[1]);
				if ((!X) and (!Y)) {
					JB_SetRef(C, JB_LUB[517]);
				}
				 else if ((!X) and Y) {
					JB_SetRef(C, JB_LUB[285]);
				}
				 else if ((!Y) and X) {
					JB_SetRef(C, JB_LUB[518]);
				}
				JB_Terminal__SyntaxAppend(C, S, 0);
				JB_Decr(C);
				(++S[0]);
			};
			S = ivec2{Rect[0], S[1] + 1};
		};
	};
}

JB_String* JB_Terminal__Flat() {
	FastString* F = ({
		FastString* _X = JB__Terminal_fs;
		if (!_X) {
			_X = JB_FS_Constructor(nil);
			JB_SetRef(JB__Terminal_fs, _X);
		}
		 _X;
	});
	int PrevCol = 0;
	{
		Array* _LoopSrcf3 = JB__Terminal_TermScreen;
		int _if1 = 0;
		while (true) {
			Array* Line = ((Array*)JB_Array_Value(_LoopSrcf3, _if1));
			if (Line == nil) {
				break;
			}
			{
				Array* _LoopSrcf6 = ((Array*)Line);
				int _if4 = 0;
				while (true) {
					TerminalCell* Cell = ((TerminalCell*)JB_Array_Value(_LoopSrcf6, _if4));
					if (Cell == nil) {
						break;
					}
					int CCol = Cell->Color;
					if (PrevCol != CCol) {
						PrevCol = CCol;
						//;
						JB_FS_AppendString(F, JB_LUB[156]);
						JB_FS_AppendInt32(F, CCol);
						JB_FS_AppendByte(F, 'm');
						//;
					}
					JB_FS_AppendString(F, Cell->Text);
					JB_SetRef(Cell->Text, JB_LUB[27]);
					(++_if4);
				};
			}
			;
			JB_FS_AppendByte(F, '\n');
			(++_if1);
		};
	}
	;
	return JB_FS_GetResult(F);
}

void JB_Terminal__FrameText(JB_String* S, ivec4 Frame, TerminalColor FrameCol, TerminalColor TextCol) {
	JB_Incr(S);
	JB_Terminal__init();
	JB_SetRef(S, JB_Str_Wrap(S, JB_ivec4_Width(Frame) - 2, nil));
	ivec2 P = ivec2{Frame[0], Frame[1]} + 1;
	{
		ivec4 _LoopSrcf1 = JB_ivec4_Shrink(Frame, 1);
		ivec2 I = ivec2{_LoopSrcf1[0], _LoopSrcf1[1]};
		while (I[1] < _LoopSrcf1[3]) {
			while (I[0] < _LoopSrcf1[2]) {
				Array* Row = ((Array*)JB_Array_Value(JB__Terminal_TermScreen, I[1]));
				JB_Incr(Row);
				if (JB_Array_SyntaxCast(Row)) {
					TerminalCell* _tmPf5 = JB_TerminalCell_ConstructorAuto(nil, 0, JB_LUB[27]);
					JB_Incr(_tmPf5);
					(JB_Array_ValueSet(Row, I[0], _tmPf5));
					JB_Decr(_tmPf5);
				}
				JB_Decr(Row);
				(++I[0]);
			};
			I = ivec2{_LoopSrcf1[0], I[1] + 1};
		};
	}
	;
	{
		int _Prevf2 = 0;
		while (((JB_String*)JB_Str_Exists((S)))) {
			Ind _Curr_f3 = JB_Str_Find(S, JB__Constants_CSLine, _Prevf2, JB_int__Max());
			JB_String* L = JB_Str_Range(S, _Prevf2, _Curr_f3);
			JB_Incr(L);
			JB_Terminal__SyntaxAppend(L, P, TextCol);
			JB_Decr(L);
			(++P[1]);
			_Prevf2 = (_Curr_f3 + 1);
			if (!JB_Ind_SyntaxCast(_Curr_f3)) {
				break;
			}
		};
	}
	;
	JB_Decr(S);
	JB_Terminal__DrawRect(Frame, JB_LUB[0], FrameCol);
}

void JB_Terminal__init() {
	if (((Array*)JB_Array_SyntaxCast(JB__Terminal_TermScreen))) {
		return;
	}
	{
		int _Valuef1 = 0;
		while (_Valuef1 < kJB__Terminal_h) {
			Array* S = (JB_Array_Constructor0(nil));
			JB_Incr(S);
			JB_Array_SyntaxAppend(JB__Terminal_TermScreen, S);
			{
				int _Valuef3 = 0;
				while (_Valuef3 < kJB__Terminal_w) {
					TerminalCell* _tmPf4 = JB_TerminalCell_ConstructorAuto(nil, 0, JB_LUB[27]);
					JB_Incr(_tmPf4);
					JB_Array_SyntaxAppend(S, _tmPf4);
					JB_Decr(_tmPf4);
					(++_Valuef3);
				};
			}
			;
			JB_Decr(S);
			(++_Valuef1);
		};
	};
}

int JB_Terminal__Init_() {
	{
		JB_SetRef(JB__Terminal_TermScreen, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

ivec2 JB_Terminal__Size() {
	return ivec2{kJB__Terminal_w, kJB__Terminal_h};
}

void JB_Terminal__SyntaxAppend(JB_String* Text, ivec2 V, TerminalColor Colors) {
	JB_Terminal__init();
	int X0 = V[0];
	{
		byte* _Startf0 = Text->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(Text);
		while (_Startf0 < _Endf1) {
			Codepoint _cf2 = JB_u8p_Read((&_Startf0));
			Codepoint C = (_cf2);
			if ((C == 10) or (C == 13)) {
				(++V[1]);
				V[0] = X0;
			}
			 else if (C == ' ') {
				(++V[0]);
			}
			 else if (JB_ivec2_OperatorInrange(V, JB_Terminal__Size()) and (C != ' ')) {
				if (C == 127) {
					C = ' ';
				}
				Array* Row = ((Array*)JB_Array_Value(JB__Terminal_TermScreen, V[1]));
				JB_Incr(Row);
				if (JB_Array_SyntaxCast(Row)) {
					JB_String* _tmPf5 = JB_CP_SyntaxCast(C);
					JB_Incr(_tmPf5);
					TerminalCell* _tmPf4 = JB_TerminalCell_ConstructorAuto(nil, Colors, _tmPf5);
					JB_Incr(_tmPf4);
					JB_Decr(_tmPf5);
					(JB_Array_ValueSet(Row, V[0], _tmPf4));
					JB_Decr(_tmPf4);
				}
				JB_Decr(Row);
				(++V[0]);
			}
		};
	};
}

void JB_Terminal__Fail(JB_String* Msg) {
	JB_PrintLine(JB_LUB[155]);
	if (JB_Str_Exists(Msg)) {
		JB_PrintLine(Msg);
	}
}


void SC_TextAssembler__Assemble(Message* Msg) {
	{
		Message* Ch = ((Message*)JB_Ring_First(Msg));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			if (SC_Msg_OperatorIsTmp(Ch, JB_LUB[1701])) {
				SC_TextAssembler__TextFunc(Ch);
			}
			 else if (SC_Msg_OperatorIsTmp(Ch, JB_LUB[587])) {
				SC_TextAssembler__TextData(Ch);
			}
			Ch = _Nf1;
		};
		;
	};
}

bool SC_TextAssembler__GetLabel(FatASM* Jumper) {
	uint I = Jumper->JumpReg;
	if (!I) {
		return true;
	}
	(--I);
	Message* Name = ((Message*)JB_Tree_Get(((Message*)JB_Ring_First(Jumper->Msg)), I));
	if (Name) {
		DTWrap* Dest_index = ((DTWrap*)JB_Dict_ValueLower(SC__TextAssembler_Labels, Name->Name));
		if (!Dest_index) {
			JB_Msg_Fail(Name, JB_LUB[622]);
			return nil;
		}
		Jumper->R[I] = (((uint64)JB_Wrap_SyntaxAccess(Dest_index)) - SC_FAT_Index(Jumper));
		return true;
	}
	if (true) {
		SC_FAT_SyntaxExpect(Jumper, JB_LUB[1379]);
	}
	return false;
}

int SC_TextAssembler__Init_() {
	{
	}
	;
	return 0;
}

void SC_TextAssembler__TextData(Message* Msg) {
}

bool SC_TextAssembler__TextFunc(Message* Msg) {
	SCFunction* Fn = SC_Func_Constructor(nil, nil);
	JB_Incr(Fn);
	JB_SetRef(Fn->Source, Msg);
	if (!SC_Pac_InitAndStartFunc((&SC__Pac_Sh), Fn)) {
		JB_Decr(Fn);
		return nil;
	}
	SC_Pac_TextFuncSub((&SC__Pac_Sh), Msg);
	(JB_Dict_ValueSet(SC__Comp_ExportNames, Fn->ExportName, Fn));
	JB_Decr(Fn);
	SC_Pac_FinishASM((&SC__Pac_Sh));
	SC_Pac_LoadLabelJumps((&SC__Pac_Sh));
	JB_Dict_Dispose(SC__TextAssembler_Labels);
	return false;
}


bool SC_Ext__AllowedThisFile(JB_String* Name) {
	if (!SC__Options_ProjectIsMiniLib) {
		return true;
	}
	if ((JB_Str_Equals(Name, JB_LUB[55], true)) or ((JB_Str_Equals(Name, JB_LUB[56], true)) or ((JB_Str_Equals(Name, JB_LUB[57], true)) or ((JB_Str_Equals(Name, JB_LUB[58], true)) or ((JB_Str_Equals(Name, JB_LUB[59], true)) or (JB_Str_Equals(Name, JB_LUB[60], true))))))) {
		return false;
	}
	return true;
}

bool SC_Ext__BackupCompiler() {
	JB_File* Product = SC_Comp__ProductFile();
	JB_Incr(Product);
	JB_String* _tmPf0 = SC_Ext__BackupPath();
	JB_Incr(_tmPf0);
	JB_File* B = JB_Str_AsFile(_tmPf0);
	JB_Incr(B);
	JB_Decr(_tmPf0);
	JB_Str_MakeEntirePath(B, true);
	JB_File* Backup1 = JB_File_SyntaxAccess(B, JB_LUB[1615]);
	JB_Incr(Backup1);
	if (JB_File_FileCompare(Backup1, Product, JB_LUB[0])) {
		JB_Decr(Backup1);
		JB_Decr(B);
		JB_Decr(Product);
		return true;
	}
	SC_Ext__ReplaceOld(Product, B);
	JB_File_Copy(Product, Backup1, false);
	JB_Decr(Backup1);
	JB_String* DailyProduct = SC_Ext__MakeDailyProductPath(B);
	JB_Incr(DailyProduct);
	JB_Decr(B);
	JB_String* Path = JB_Str_TrimExtAndPath(DailyProduct, true);
	JB_Incr(Path);
	JB_File* _tmPf1 = JB_Str_AsFile(DailyProduct);
	JB_Incr(_tmPf1);
	JB_Decr(DailyProduct);
	JB_File_Copy(Product, _tmPf1, false);
	JB_Decr(Product);
	JB_Decr(_tmPf1);
	JB_File* _tmPf2 = SC_Cpp__CppProduct();
	JB_Incr(_tmPf2);
	JB_String* _tmPf3 = JB_Str_OperatorPlus(Path, JB_LUB[1616]);
	JB_Incr(_tmPf3);
	JB_File_CopyAll(_tmPf2, _tmPf3, false);
	JB_Decr(_tmPf2);
	JB_Decr(_tmPf3);
	JB_File* _tmPf4 = SC_Cpp__HProduct();
	JB_Incr(_tmPf4);
	JB_String* _tmPf5 = JB_Str_OperatorPlus(Path, JB_LUB[1260]);
	JB_Incr(_tmPf5);
	JB_Decr(Path);
	JB_File_CopyAll(_tmPf4, _tmPf5, false);
	JB_Decr(_tmPf4);
	JB_Decr(_tmPf5);
	return JB_Rec_OK(JB_StdErr);
}

JB_String* SC_Ext__BackupPath() {
	JB_String* _tmPf0 = SC_Comp__Projects();
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_Str_Child(_tmPf0, JB_LUB[604]);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool SC_Ext__CanCompile(JB_String* Name) {
	return ({
		JB_String* _tmPf1 = JB_Str_Ext(Name);
		JB_Incr(_tmPf1);
		bool _tmPf0 = SC_Str_isCLike(_tmPf1);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}) and SC_Ext__AllowedThisFile(Name);
}

bool SC_Ext__Clean() {
	JB_String* _tmPf3 = JB_File__SpeedieDir();
	JB_Incr(_tmPf3);
	JB_String* Paths = JB_Str_ReplaceAll(JB_LUB[1617], JB_LUB[1618], _tmPf3, false, nil);
	JB_Incr(Paths);
	{
		int _Prevf0 = 0;
		while (((JB_String*)JB_Str_Exists((Paths)))) {
			Ind _Curr_f1 = JB_Str_Find(Paths, JB__Constants_CSLine, _Prevf0, JB_int__Max());
			JB_String* L = JB_Str_Range(Paths, _Prevf0, _Curr_f1);
			JB_Incr(L);
			if (JB_Str_Exists(L)) {
				JB_File* _tmPf4 = JB_Str_AsFile(L);
				JB_Incr(_tmPf4);
				JB_File_DeleteAll(_tmPf4, false);
				JB_Decr(_tmPf4);
			}
			JB_Decr(L);
			_Prevf0 = (_Curr_f1 + 1);
			if (!JB_Ind_SyntaxCast(_Curr_f1)) {
				break;
			}
		};
		JB_Decr(_tmPf3);
	}
	;
	JB_Decr(Paths);
	return JB_Rec_OK(JB_StdErr);
}

void SC_Ext__ClearThis() {
	if (JB_Rec_OK(JB_StdErr)) {
		{
			Array* _LoopSrcf2 = SC__Ext_Cleanup;
			JB_Incr(_LoopSrcf2);
			int _if0 = 0;
			while (true) {
				JB_File* F = ((JB_File*)JB_Array_Value(_LoopSrcf2, _if0));
				JB_Incr(F);
				if (F == nil) {
					JB_Decr(F);
					break;
				}
				JB_File_DeleteAll(F, false);
				JB_Decr(F);
				(++_if0);
			};
			JB_Decr(_LoopSrcf2);
		};
	}
	JB_Array_Clear(SC__Ext_Cleanup);
	JB_Array_Clear(SC__Ext_FoundObjects);
}

bool SC_Ext__CollectAndCompile(JB_File* Input, JB_String* Output) {
	JB_File* TmpFol = SC_Str_MakeAndGoInto(Output);
	JB_Incr(TmpFol);
	Array* Cpps = SC_Ext__CollectCppsInto(Input, TmpFol);
	JB_Incr(Cpps);
	JB_Decr(TmpFol);
	bool _tmPf0 = SC_Ext__TransCompileWrap(Cpps);
	JB_Decr(Cpps);
	return _tmPf0;
}

Array* SC_Ext__CollectCppsInto(JB_File* Fol, JB_File* Objects) {
	Array* Cpps = JB_Array_Constructor0(nil);
	JB_Incr(Cpps);
	{
		Array* _LoopSrcf2 = JB_File_List(Fol, false, false);
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			JB_String* Name = ((JB_String*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(Name);
			if (Name == nil) {
				JB_Decr(Name);
				break;
			}
			if (SC_Ext__CanCompile(Name)) {
				JB_String* _tmPf4 = JB_File_Path(Fol);
				JB_Incr(_tmPf4);
				JB_String* _tmPf3 = JB_Str_Child(_tmPf4, Name);
				JB_Incr(_tmPf3);
				JB_Decr(_tmPf4);
				JB_Array_SyntaxAppend(Cpps, _tmPf3);
				JB_Decr(_tmPf3);
			}
			JB_Decr(Name);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	Array* _tmPf5 = SC_Ext__FilterCppsIfAlreadyDone(Cpps, Objects);
	JB_Incr(_tmPf5);
	JB_Decr(Cpps);
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

void SC_Ext__CollectPico(JB_String* Lib) {
	JB_File* OfficialLocation = JB_Str_AsFile(JB_LUB[447]);
	JB_Incr(OfficialLocation);
	if (!JB_File_Exists(OfficialLocation)) {
		JB_Decr(OfficialLocation);
		return;
	}
	JB_String* _tmPf0 = JB_Str_OperatorPlus(Lib, JB_LUB[448]);
	JB_Incr(_tmPf0);
	JB_File* SpdLocation = JB_Str_AsFile((_tmPf0));
	JB_Incr(SpdLocation);
	JB_Decr(_tmPf0);
	if (JB_File_Exists(SpdLocation)) {
		JB_File_Delete(SpdLocation);
	}
	JB_StringC* _tmPf1 = JB_Str_CastZero(SpdLocation);
	JB_Incr(_tmPf1);
	JB_Decr(SpdLocation);
	JB_File_HardLinkTo(OfficialLocation, _tmPf1);
	JB_Decr(OfficialLocation);
	JB_Decr(_tmPf1);
}

JB_File* SC_Ext__CppLib() {
	JB_String* _tmPf0 = SC_Comp__Projects();
	JB_Incr(_tmPf0);
	JB_File* _tmPf1 = JB_Str_ChildFile(_tmPf0, JB_LUB[605]);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Array* SC_Ext__CreateCompileString(Array* FileList, JB_String* Product, JB_String* Type) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	JB_Incr(Rz);
	if (!SC_Ext__HasType(FileList, Type)) {
		JB_Decr(Rz);
		return nil;
	}
	SC_Array_AppendWords(Rz, Product);
	{
		int _if3 = 0;
		while (true) {
			JB_File* F = ((JB_File*)JB_Array_Value(FileList, _if3));
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			if (JB_Str_OperatorIsa(F, Type)) {
				JB_Array_SyntaxAppend(Rz, F);
				JB_File_RelaxPath(F, true);
			}
			JB_Decr(F);
			(++_if3);
		};
	}
	;
	JB_String* Cmode = JB_LUB[1164];
	JB_Incr(Cmode);
	if ((JB_Str_Equals(Type, JB_LUB[107], false)) or ((JB_Str_Equals(Type, JB_LUB[1165], false)) or (JB_Str_Equals(Type, JB_LUB[108], false)))) {
		if (JB_Str_Equals(Type, JB_LUB[108], false)) {
			JB_SetRef(Cmode, JB_Str_OperatorPlus(Cmode, JB_LUB[1166]));
		}
		 else {
			JB_SetRef(Cmode, JB_LUB[0]);
		}
		if (JB_Platform__OSX()) {
			JB_SetRef(Cmode, JB_Str_OperatorPlus(Cmode, JB_LUB[1167]));
		}
	}
	SC_Array_AppendWords(Rz, Cmode);
	JB_Decr(Cmode);
	JB_String* Spdroot = JB_File__SpeedieDir();
	JB_Incr(Spdroot);
	FastString* _fsf0 = JB_FS_Constructor(nil);
	JB_Incr(_fsf0);
	JB_FS_AppendString(_fsf0, JB_LUB[1168]);
	JB_FS_AppendString(_fsf0, Spdroot);
	JB_FS_AppendString(_fsf0, JB_LUB[769]);
	JB_String* _tmPf5 = JB_FS_GetResult(_fsf0);
	JB_Incr(_tmPf5);
	JB_Decr(_fsf0);
	SC_Array_AppendWords(Rz, _tmPf5);
	JB_Decr(_tmPf5);
	SC_Array_AppendWords(Rz, JB_LUB[1169]);
	SC_Array_AppendWords(Rz, JB_LUB[1170]);
	if (JB_Platform__OSX()) {
		SC_Array_AppendWords(Rz, JB_LUB[1171]);
		if (SC_SC_Targets__SyntaxAccess(JB_LUB[1172]) or SC_Linkage__Interpreter()) {
			SC_Array_AppendWords(Rz, JB_LUB[1173]);
		}
		FastString* _fsf1 = JB_FS_Constructor(nil);
		JB_Incr(_fsf1);
		JB_FS_AppendString(_fsf1, JB_LUB[1174]);
		JB_FS_AppendString(_fsf1, Spdroot);
		JB_FS_AppendString(_fsf1, JB_LUB[1175]);
		JB_String* _tmPf6 = JB_FS_GetResult(_fsf1);
		JB_Incr(_tmPf6);
		JB_Decr(_fsf1);
		SC_Array_AppendWords(Rz, _tmPf6);
		JB_Decr(_tmPf6);
	}
	JB_Decr(Spdroot);
	SC_Array_AppendWords(Rz, JB_LUB[1176]);
	SC_Array_AppendWords(Rz, JB_LUB[1177]);
	SC_Array_AppendWords(Rz, JB_LUB[1178]);
	JB_String* _tmPf8 = JB_Platform();
	JB_Incr(_tmPf8);
	JB_String* _tmPf7 = SC_Linkage__CombineFlags(_tmPf8);
	JB_Incr(_tmPf7);
	JB_Decr(_tmPf8);
	SC_Array_AppendWords(Rz, _tmPf7);
	JB_Decr(_tmPf7);
	if (JB_Platform__Lin()) {
		SC_Array_AppendWords(Rz, JB_LUB[1179]);
	}
	SC_Array_AppendWords(Rz, JB_LUB[1180]);
	if (JB_Str_Equals(SC__Options_Arch, JB_LUB[137], true)) {
		SC_Array_AppendWords(Rz, JB_LUB[1181]);
		if (SC__Options_Optimise >= 3) {
			SC_Array_AppendWords(Rz, JB_LUB[1182]);
		}
	}
	 else if (JB_Platform__CPU_ARM()) {
		SC_Array_AppendWords(Rz, JB_LUB[1183]);
	}
	if (JB_Platform__OSX()) {
		SC_Array_AppendWords(Rz, JB_LUB[1184]);
	}
	 else {
		SC_Array_AppendWords(Rz, JB_LUB[1185]);
	}
	SC_Array_AppendWords(Rz, JB_LUB[1186]);
	uint Opt = SC__Options_Optimise;
	bool Aslib = SC__Options_MakeLib or SC__Options_ProjectIsLibrary;
	if (Aslib) {
		SC_Array_AppendWords(Rz, JB_LUB[1187]);
		Opt = 3;
	}
	if (SC__Options_SelfReplacement or Aslib) {
		SC_Array_AppendWords(Rz, JB_LUB[1188]);
	}
	if (Opt < 0) {
		SC_Array_AppendWords(Rz, JB_LUB[1189]);
	}
	 else {
		if (SC__Options_SelfReplacement or (Opt >= 1)) {
			SC_Array_AppendWords(Rz, JB_LUB[1190]);
		}
		if (Opt >= 1) {
			if (JB_Str_Equals(SC__Options_Arch, JB_LUB[137], true)) {
				SC_Array_AppendWords(Rz, JB_LUB[1191]);
			}
			if (Opt >= 2) {
				SC_Array_AppendWords(Rz, JB_LUB[1192]);
			}
		}
	}
	if (SC__Options_ProjectIsMiniLib) {
		SC_Array_AppendWords(Rz, JB_LUB[1193]);
	}
	JB_File* Cppl = SC_Ext__CppLib();
	JB_Incr(Cppl);
	JB_File* Cbf = SC_Comp__BuildFolder();
	JB_Incr(Cbf);
	JB_File* Cgcf = SC_Comp__GeneratedCppsFolder();
	JB_Incr(Cgcf);
	FastString* _fsf2 = JB_FS_Constructor(nil);
	JB_Incr(_fsf2);
	JB_FS_AppendString(_fsf2, JB_LUB[1194]);
	JB_FS_AppendString(_fsf2, Cppl);
	JB_Decr(Cppl);
	JB_FS_AppendString(_fsf2, JB_LUB[1195]);
	JB_FS_AppendString(_fsf2, Cbf);
	JB_Decr(Cbf);
	JB_FS_AppendString(_fsf2, JB_LUB[1196]);
	JB_FS_AppendString(_fsf2, Cgcf);
	JB_Decr(Cgcf);
	JB_FS_AppendString(_fsf2, JB_LUB[496]);
	JB_String* _tmPf9 = JB_FS_GetResult(_fsf2);
	JB_Incr(_tmPf9);
	JB_Decr(_fsf2);
	SC_Array_AppendWords(Rz, _tmPf9);
	JB_Decr(_tmPf9);
	if (SC_Linkage__VM()) {
		SC_Array_AppendWords(Rz, JB_LUB[1197]);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Ext__ExecuteGCC(Array* Commands) {
	ExitCode Result = JB_Str_Execute(SC__Ext_CppCompilerPath, Commands, nil, nil, kJB__PIDM_StdOutPassThru, 0);
	if (JB_ExitCode_Successful(Result)) {
		return true;
	}
	JB_String* _tmPf0 = JB_Str_OperatorPlus(SC__Ext_CppCompilerPath, JB_LUB[27]);
	JB_Incr(_tmPf0);
	JB_String* Start = JB_Str_OperatorPlus(JB_LUB[882], _tmPf0);
	JB_Incr(Start);
	JB_Decr(_tmPf0);
	if (true) {
		JB_String* _tmPf2 = JB_Array_join(Commands, JB_LUB[27]);
		JB_Incr(_tmPf2);
		JB_String* _tmPf1 = JB_Str_OperatorPlus(Start, _tmPf2);
		JB_Incr(_tmPf1);
		JB_Decr(_tmPf2);
		JB_Str_Fail(_tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(Start);
	JB_Str_Execute(SC__Ext_CppCompilerPath, Commands, nil, nil, kJB__PIDM_StdOutPassThru, 0);
	return false;
}

void SC_Ext__ExportAndInstall(Date Elapsed) {
	bool ActualCompile = SC_Ext__ShouldTransComp() and SC__Options_ModeCpp;
	if (ActualCompile) {
		if (SC__Options_ModeCpp) {
			({
				JB_Flow__DisabledIncr(1);
				(SC_Ext__RunCppCompile());
				JB_Flow__DisabledIncr(-1);
				 0;
			});
			bool CanInstall = SC_Comp__TimeTest(Elapsed);
			if (CanInstall and SC_Ext__IsCompilerAndNeedsInstall()) {
				SC_Ext__InstallCompiler();
			}
		}
		({
			JB_Flow__DisabledIncr(1);
			(SC_Ext__ClearThis());
			JB_Flow__DisabledIncr(-1);
			 0;
		});
		if (JB_Rec_OK(JB_StdErr)) {
			SC_Comp__Bundle();
		}
	}
	if (JB_Rec_OK(JB_StdErr) and (!SC__Options_Scripting)) {
		SC_Ext__PrintProduct(JB_LUB[1913], ActualCompile or SC__Options_Compile);
	}
}

Array* SC_Ext__FilterCppsIfAlreadyDone(Array* List, JB_File* Objects) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	JB_Incr(Rz);
	{
		int _if0 = 0;
		while (true) {
			JB_String* Cpp = ((JB_String*)JB_Array_Value(List, _if0));
			JB_Incr(Cpp);
			if (Cpp == nil) {
				JB_Decr(Cpp);
				break;
			}
			int Reason = SC_Ext__NeedNewObjForSrc(Cpp, Objects);
			if (Reason) {
				JB_File* _tmPf2 = JB_Str_AsFile(Cpp);
				JB_Incr(_tmPf2);
				JB_Array_SyntaxAppend(Rz, _tmPf2);
				JB_Decr(_tmPf2);
			}
			JB_Decr(Cpp);
			(++_if0);
		};
	}
	;
	if (JB_Array_SyntaxCast(Rz) and SC__Options_PrintCompileString) {
		JB_Print(JB_LUB[466]);
		JB_String* _tmPf3 = JB_Array_Render(Rz, nil);
		JB_Incr(_tmPf3);
		JB_Str_PrintLine(_tmPf3);
		JB_Decr(_tmPf3);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Ext__HasType(Array* CppList, JB_String* Type) {
	{
		int _if0 = 0;
		while (true) {
			JB_File* F = ((JB_File*)JB_Array_Value(CppList, _if0));
			if (F == nil) {
				break;
			}
			if (JB_Str_OperatorIsa(F, Type)) {
				return true;
			}
			(++_if0);
		};
	}
	;
	return false;
}

int SC_Ext__Init_() {
	{
		JB_SetRef(SC__Ext_FoundObjects, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Ext_Cleanup, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Ext_CppCompilerPath, JB_LUB[61]);
		SC__Ext_LatestLibDate = kJB__Date_Highest;
	}
	;
	return 0;
}

void SC_Ext__InstallCompiler() {
	FastString* _fsf0 = JB_FS_Constructor(nil);
	JB_Incr(_fsf0);
	JB_FS_AppendString(_fsf0, JB_LUB[1691]);
	JB_FS_AppendInt32(_fsf0, (2025032820));
	JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
	JB_Incr(_tmPf1);
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
	JB_String* OldProd = SC_Comp__ProductPath();
	JB_Incr(OldProd);
	JB_String* _tmPf2 = SC_Comp__Projects();
	JB_Incr(_tmPf2);
	JB_SetRef(SC__Options_output_path, JB_Str_Child(_tmPf2, JB_LUB[1692]));
	JB_Decr(_tmPf2);
	JB_File* _tmPf3 = JB_Str_AsFile(OldProd);
	JB_Incr(_tmPf3);
	JB_Decr(OldProd);
	JB_File_MoveTo(_tmPf3, SC__Options_output_path);
	JB_Decr(_tmPf3);
	JB_Flow__DisabledIncr(1);
	JB_File* _tmPf4 = SC_Cpp__CppProduct();
	JB_Incr(_tmPf4);
	SC_Ext__InstallOne(_tmPf4);
	JB_Decr(_tmPf4);
	JB_File* _tmPf5 = SC_Cpp__HProduct();
	JB_Incr(_tmPf5);
	SC_Ext__InstallOne(_tmPf5);
	JB_Decr(_tmPf5);
	JB_File* _tmPf7 = SC_Cpp__HProduct();
	JB_Incr(_tmPf7);
	JB_File* _tmPf6 = JB_File_Sibling(_tmPf7, JB_LUB[1358]);
	JB_Incr(_tmPf6);
	JB_Decr(_tmPf7);
	SC_Ext__InstallOne(_tmPf6);
	JB_Decr(_tmPf6);
	JB_Flow__DisabledIncr(-1);
	if (SC__Options_MakeLib) {
		SC_Ext__MakeLib();
	}
}

void SC_Ext__InstallOne(JB_File* Test) {
	JB_File* _tmPf0 = JB_File_Parent(Test);
	JB_Incr(_tmPf0);
	JB_Str_MakeDir(_tmPf0);
	JB_Decr(_tmPf0);
	JB_String* _tmPf2 = JB_File_Path(Test);
	JB_Incr(_tmPf2);
	JB_String* _tmPf1 = JB_Str_ReplacePathComponent(_tmPf2, -2, JB_LUB[1100]);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf2);
	JB_File* F0 = JB_Str_AsFile(_tmPf1);
	JB_Incr(F0);
	JB_Decr(_tmPf1);
	if (!JB_File_FileCompare(Test, F0, JB_LUB[0])) {
		JB_File_Copy(Test, F0, false);
	}
	JB_Decr(F0);
}

bool SC_Ext__IsCompilerAndNeedsInstall() {
	bool Rz = false;
	if (!SC__Options_SelfReplacement) {
		return nil;
	}
	if (!(JB_Rec_OK(JB_StdErr) and (!SC_Comp__IsTest()))) {
		return nil;
	}
	JB_Flow__DisabledIncr(1);
	Rz = (SC_Ext__TestNewCompiler() and SC_Ext__BackupCompiler());
	JB_Flow__DisabledIncr(-1);
	return Rz;
}

JB_String* SC_Ext__LibSuff() {
	if (SC__Options_ProjectIsMiniLib) {
		return JB_LUB[8];
	}
	return JB_LUB[0];
}

JB_String* SC_Ext__LibTmpPath() {
	JB_String* _tmPf0 = SC_Ext__TmpBase(JB_LUB[186]);
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = SC_Ext__LibSuff();
	JB_Incr(_tmPf1);
	JB_String* _tmPf2 = JB_Str_OperatorPlus(_tmPf0, _tmPf1);
	JB_Incr(_tmPf2);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_File* SC_Ext__LinkOK(JB_File* P) {
	if (!JB_File_Exists(P)) {
		return nil;
	}
	JB_String* Lto = JB_File_LinkToGet(P);
	JB_Incr(Lto);
	if (!JB_Str_Exists(Lto)) {
		JB_Decr(Lto);
		return P;
	}
	JB_String* _tmPf0 = JB_Str_ResolvePath(Lto, kJB__FileResolveMode_AllowMissing);
	JB_Incr(_tmPf0);
	JB_Decr(Lto);
	JB_File* Tof = JB_Str_AsFile(_tmPf0);
	JB_Incr(Tof);
	JB_Decr(_tmPf0);
	if (JB_File_Exists(Tof) and (!({
		JB_String* _tmPf2 = JB_File_LinkToGet(Tof);
		JB_Incr(_tmPf2);
		bool _tmPf1 = JB_Str_Exists(_tmPf2);
		JB_Decr(_tmPf2);
		 _tmPf1;
	}))) {
		JB_SafeDecr(Tof);
		return Tof;
	}
	JB_File_Delete(Tof);
	JB_Decr(Tof);
	return nil;
}

JB_String* SC_Ext__MakeDailyProductPath(JB_File* B) {
	int D = JB_Date_DayOfWeekApprox(JB_Date__Now());
	uint X = 'A' + D;
	JB_String* _tmPf0 = JB_File_Path(B);
	JB_Incr(_tmPf0);
	JB_String* _tmPf2 = JB_int_RenderFS(D, nil);
	JB_Incr(_tmPf2);
	JB_String* _tmPf1 = JB_Str_OperatorPlus(_tmPf2, JB_LUB[449]);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf2);
	JB_String* _tmPf3 = JB_Str_Child(_tmPf0, _tmPf1);
	JB_Incr(_tmPf3);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

void SC_Ext__MakeLib() {
	JB_String* _tmPf1 = SC_Comp__ProductPath();
	JB_Incr(_tmPf1);
	JB_String* N = JB_Str_Sibling(_tmPf1, JB_LUB[1633]);
	JB_Incr(N);
	JB_Decr(_tmPf1);
	if (!SC__Options_Silent) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[1634]);
		JB_FS_AppendString(_fsf0, N);
		JB_String* _tmPf2 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf2);
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf2);
		JB_Decr(_tmPf2);
	}
	(++SC__Ext_CompilingLibFiles);
	JB_String* _tmPf3 = JB_Str_OperatorPlus(JB_LUB[1635], N);
	JB_Incr(_tmPf3);
	JB_Decr(N);
	SC_Ext__TransCompile(SC__Ext_FoundObjects, _tmPf3, JB_LUB[1165], nil);
	JB_Decr(_tmPf3);
	(--SC__Ext_CompilingLibFiles);
}

int SC_Ext__NeedNewObjForSrc(JB_String* Cpp, JB_File* Objects) {
	JB_Flow__Input(Cpp, JB_LUB[1257]);
	bool Aslib = SC__Options_MakeLib or SC__Options_ProjectIsLibrary;
	if ((Aslib and (JB_Str_ContainsString(Cpp, JB_LUB[1258])))) {
		return 0;
	}
	if (((!(SC_SC_Targets__SyntaxAccess(JB_LUB[1172]) or SC_Linkage__Interpreter())) and JB_Str_ContainsString(Cpp, JB_LUB[1259]))) {
		return 0;
	}
	JB_String* Name = JB_Str_Name(Cpp);
	JB_Incr(Name);
	JB_String* Prefix = JB_Str_TrimExtAndPath(Name, true);
	JB_Incr(Prefix);
	JB_Decr(Name);
	JB_String* _tmPf1 = JB_Str_OperatorPlus(Prefix, JB_LUB[1260]);
	JB_Incr(_tmPf1);
	JB_String* _tmPf0 = JB_Str_Sibling(Cpp, _tmPf1);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_File* H = JB_Str_AsFile(_tmPf0);
	JB_Incr(H);
	JB_Decr(_tmPf0);
	JB_String* _tmPf2 = JB_Str_OperatorPlus(Prefix, JB_LUB[1261]);
	JB_Incr(_tmPf2);
	JB_Decr(Prefix);
	JB_File* O = JB_File_SyntaxAccess(Objects, _tmPf2);
	JB_Incr(O);
	JB_Decr(_tmPf2);
	JB_Array_SyntaxAppend(SC__Ext_FoundObjects, O);
	int _tmPf3 = SC_Ext__NoGoodObject(Cpp, H, O);
	JB_Decr(H);
	JB_Decr(O);
	return _tmPf3;
}

int SC_Ext__NoGoodObject(JB_String* Cpp, JB_File* H, JB_File* O) {
	if (JB_File_Exists(H) and JB_File_NewerThanFile(H, O)) {
		return 4;
	}
	if (!JB_File_Exists(O)) {
		return 1;
	}
	JB_File* _tmPf0 = JB_Str_AsFile(Cpp);
	JB_Incr(_tmPf0);
	Date Cpd = JB_File_Modified(_tmPf0);
	JB_Decr(_tmPf0);
	Date Od = JB_File_Modified(O);
	if ((Cpd > Od) or (SC__Ext_LatestLibDate > Od)) {
		return 2;
	}
	return 0;
}

void SC_Ext__PrintProduct(JB_String* S, bool ActualCompile) {
	JB_Print(S);
	JB_Print(JB_LUB[1262]);
	if (ActualCompile) {
		JB_String* _tmPf0 = SC_Comp__ProductPath();
		JB_Incr(_tmPf0);
		JB_Print(_tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_File* _tmPf1 = SC_Cpp__CppProduct();
		JB_Incr(_tmPf1);
		JB_Print(_tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_PrintLine(JB_LUB[23]);
}

JB_String* SC_Ext__ProductBaseName() {
	JB_String* _tmPf0 = SC_Comp__VariantSuffix();
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_Str_OperatorPlus(SC__Comp_ProjectName, _tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Ext__ProductNameFull() {
	JB_String* _tmPf0 = SC_Ext__ProductBaseName();
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = SC_Ext__ProductSuffix();
	JB_Incr(_tmPf1);
	JB_String* _tmPf2 = JB_Str_OperatorPlus(_tmPf0, _tmPf1);
	JB_Incr(_tmPf2);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_String* SC_Ext__ProductSuffix() {
	if (SC__Options_ModePack) {
		return JB_LUB[62];
	}
	if (!SC__Options_ProjectIsLibrary) {
		return JB_LUB[0];
	}
	if (JB_Platform__OSX()) {
		return JB_LUB[63];
	}
	if (JB_Platform__Win()) {
		return JB_LUB[64];
	}
	return JB_LUB[65];
}

JB_String* SC_Ext__ProjTmpPath() {
	JB_String* _tmPf0 = SC_Ext__ProductBaseName();
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = SC_Ext__TmpBase(_tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Ext__ReplaceOld(JB_File* Input, JB_File* Backs) {
	JB_File* Oldest = nil;
	JB_Incr(Oldest);
	int Score = 0;
	{
		Array* _LoopSrcf2 = JB_File_ListFiles(Backs, false);
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			JB_File* F = ((JB_File*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			JB_String* Name = JB_Str_Name(F);
			JB_Incr(Name);
			if ((JB_Str_OperatorEndsWith(Name, JB_LUB[1573])) and (JB_byte_IsLetter(JB_Str_First(Name)))) {
				int64 S = JB_Date_Days(JB_Date_Ago(JB_File_Modified(F)));
				if (S > Score) {
					Score = S;
					JB_SetRef(Oldest, F);
				}
			}
			JB_Decr(F);
			JB_Decr(Name);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	if (Oldest != nil) {
		JB_File_CopyAll(Input, Oldest, false);
	}
	JB_Decr(Oldest);
}

void SC_Ext__RunCppCompile() {
	if (!JB_Rec_OK(JB_StdErr)) {
		return;
	}
	if (!SC__Options_Silent) {
		SC_Ext__PrintProduct(JB_LUB[1706], true);
	}
	JB_File* CppLib = SC_Comp__SpeedieDir(JB_LUB[1707]);
	JB_Incr(CppLib);
	SC_Ext__TestNewestLib(CppLib);
	SC_Ext__CollectPico(CppLib);
	JB_Decr(CppLib);
	(++SC__Ext_CompilingLibFiles);
	JB_File* _tmPf0 = SC_Ext__CppLib();
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = SC_Ext__LibTmpPath();
	JB_Incr(_tmPf1);
	if (!SC_Ext__CollectAndCompile(_tmPf0, _tmPf1)) {
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf0);
		return;
	}
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	(--SC__Ext_CompilingLibFiles);
	JB_File* _tmPf2 = SC_Comp__GeneratedCppsFolder();
	JB_Incr(_tmPf2);
	JB_String* _tmPf3 = SC_Ext__ProjTmpPath();
	JB_Incr(_tmPf3);
	if (!SC_Ext__CollectAndCompile(_tmPf2, _tmPf3)) {
		JB_Decr(_tmPf3);
		JB_Decr(_tmPf2);
		return;
	}
	JB_Decr(_tmPf2);
	JB_Decr(_tmPf3);
	JB_String* _tmPf4 = SC_Ext__ProjTmpPath();
	JB_Incr(_tmPf4);
	if (!SC_Ext__UseAndCompile(SC__Cpp_Cpp_Input, _tmPf4)) {
		JB_Decr(_tmPf4);
		return;
	}
	JB_Decr(_tmPf4);
	JB_String* P = SC_Comp__ProductPath();
	JB_Incr(P);
	JB_String* _tmPf5 = JB_Str_OperatorPlus(JB_LUB[1635], P);
	JB_Incr(_tmPf5);
	JB_File* _tmPf6 = JB_Str_AsFile(P);
	JB_Incr(_tmPf6);
	JB_Decr(P);
	SC_Ext__TransCompile(SC__Ext_FoundObjects, _tmPf5, JB_LUB[1165], _tmPf6);
	JB_Decr(_tmPf5);
	JB_Decr(_tmPf6);
}

void SC_Ext__SayTest(JB_String* N) {
	JB_Print(JB_LUB[187]);
	JB_Print(N);
	JB_PrintLine(JB_LUB[188]);
}

bool SC_Ext__ShouldTransComp() {
	if (SC__Options_Scripting) {
		return true;
	}
	if (!SC__Options_Compile) {
		return nil;
	}
	if (SC__Options_ForceRecompile) {
		return true;
	}
	JB_File* _tmPf0 = SC_Comp__ProductFile();
	JB_Incr(_tmPf0);
	JB_File* P = SC_Ext__LinkOK(_tmPf0);
	JB_Incr(P);
	JB_Decr(_tmPf0);
	if ((!P) or (JB_File_Modified(P) < SC__Imp_Recent)) {
		JB_Decr(P);
		return true;
	}
	JB_Decr(P);
	if (!SC__Options_Silent) {
		JB_PrintLine(JB_LUB[1198]);
	}
	return false;
}

bool SC_Ext__TestNewCompiler() {
	JB_File* S = SC_Comp__ProductFile();
	JB_Incr(S);
	JB_File* Test1 = S;
	JB_Incr(Test1);
	JB_File* Test2 = JB_File_OperatorPlus(S, JB_LUB[1619]);
	JB_Incr(Test2);
	JB_File* Test3 = JB_File_OperatorPlus(S, JB_LUB[1620]);
	JB_Incr(Test3);
	JB_Decr(S);
	JB_File* Cpp1 = SC_Cpp__CppProduct();
	JB_Incr(Cpp1);
	JB_String* _tmPf1 = JB_File_Path(Cpp1);
	JB_Incr(_tmPf1);
	JB_String* _tmPf0 = JB_Str_ReplacePathComponent(_tmPf1, -2, JB_LUB[1621]);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_File* Cpp2 = JB_Str_AsFile(_tmPf0);
	JB_Incr(Cpp2);
	JB_Decr(_tmPf0);
	JB_String* _tmPf3 = JB_File_Path(Cpp1);
	JB_Incr(_tmPf3);
	JB_Decr(Cpp1);
	JB_String* _tmPf2 = JB_Str_ReplacePathComponent(_tmPf3, -2, JB_LUB[1622]);
	JB_Incr(_tmPf2);
	JB_Decr(_tmPf3);
	JB_File* Cpp3 = JB_Str_AsFile(_tmPf2);
	JB_Incr(Cpp3);
	JB_Decr(_tmPf2);
	JB_Array_SyntaxAppend(SC__Ext_Cleanup, Test2);
	JB_Array_SyntaxAppend(SC__Ext_Cleanup, Test3);
	JB_Decr(Test3);
	SC_Ext__SayTest(JB_LUB[264]);
	if (!SC_File_TestSpeedie(Test1, JB_LUB[1619])) {
		JB_Decr(Cpp3);
		JB_Decr(Cpp2);
		JB_Decr(Test2);
		JB_Decr(Test1);
		return nil;
	}
	JB_Decr(Test1);
	SC_Ext__SayTest(JB_LUB[1619]);
	if (!SC_File_TestSpeedie(Test2, JB_LUB[1620])) {
		JB_Decr(Cpp3);
		JB_Decr(Cpp2);
		JB_Decr(Test2);
		return nil;
	}
	SC_Ext__SayTest(JB_LUB[1620]);
	JB_PrintLine(JB_LUB[0]);
	if (!(JB_File_MustExist(Cpp2, JB_LUB[0]) and JB_File_MustExist(Cpp3, JB_LUB[0]))) {
		JB_Decr(Cpp3);
		JB_Decr(Cpp2);
		JB_Decr(Test2);
		return nil;
	}
	if (SC_Comp__ConfBool(JB_LUB[1623], true)) {
		if (!JB_File_FileCompare(Cpp2, Cpp3, Cpp3)) {
			JB_Decr(Cpp3);
			JB_Decr(Cpp2);
			JB_Decr(Test2);
			return nil;
		}
	}
	JB_Decr(Cpp2);
	JB_Decr(Cpp3);
	bool _tmPf4 = SC_File_TestBatch(Test2) and JB_Rec_OK(JB_StdErr);
	JB_Decr(Test2);
	return _tmPf4;
}

void SC_Ext__TestNewestLib(JB_File* Cpplib) {
	SC__Ext_LatestLibDate = 0;
	{
		Array* _LoopSrcf2 = JB_File_ListFiles(Cpplib, false);
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			JB_File* S = ((JB_File*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(S);
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			if (JB_Str_Visible(S) and (!JB_File_IsDir(S))) {
				(SC__Ext_LatestLibDate = JB_int64_OperatorMax(SC__Ext_LatestLibDate, JB_File_Modified(S)));
			}
			JB_Decr(S);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	};
}

JB_String* SC_Ext__TmpBase(JB_String* V) {
	return JB_Str_OperatorPlus(JB_LUB[66], V);
}

JB_String* SC_Ext__TmpErr(JB_String* V) {
	JB_String* _tmPf1 = JB_Str_OperatorPlus(V, JB_LUB[190]);
	JB_Incr(_tmPf1);
	JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[189], _tmPf1);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = SC_Ext__TmpBase(_tmPf0);
	JB_Incr(_tmPf2);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_String* SC_Ext__TmpOut(JB_String* V) {
	JB_String* _tmPf1 = JB_Str_OperatorPlus(V, JB_LUB[190]);
	JB_Incr(_tmPf1);
	JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[191], _tmPf1);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = SC_Ext__TmpBase(_tmPf0);
	JB_Incr(_tmPf2);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

bool SC_Ext__TransCompile(Array* Files, JB_String* Dest, JB_String* Type, JB_File* ToDelete) {
	if (!JB_Array_SyntaxCast(Files)) {
		return true;
	}
	Array* CompileString = SC_Ext__CreateCompileString(Files, Dest, Type);
	JB_Incr(CompileString);
	if (!JB_Array_SyntaxCast(CompileString)) {
		JB_Decr(CompileString);
		return true;
	}
	if (SC__Options_PrintCompileString) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[1624]);
		JB_FS_AppendString(_fsf0, SC__Ext_CppCompilerPath);
		JB_FS_AppendByte(_fsf0, ' ');
		JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf1);
		JB_Decr(_fsf0);
		JB_Print(_tmPf1);
		JB_Decr(_tmPf1);
		JB_String* _tmPf2 = JB_Array_join(CompileString, JB_LUB[27]);
		JB_Incr(_tmPf2);
		JB_PrintLine(_tmPf2);
		JB_Decr(_tmPf2);
	}
	if (ToDelete) {
		JB_File_DeleteAll(ToDelete, false);
	}
	JB_Date__Sleep(3276);
	bool _tmPf3 = SC_Ext__ExecuteGCC(CompileString);
	JB_Decr(CompileString);
	return _tmPf3;
}

bool SC_Ext__TransCompileWrap(Array* Cpps) {
	bool Rz = false;
	Rz = SC_Ext__TransCompile(Cpps, JB_LUB[1636], JB_LUB[105], nil);
	if (Rz) {
		Rz = SC_Ext__TransCompile(Cpps, JB_LUB[1636], JB_LUB[106], nil);
	}
	if (JB_Platform__OSX()) {
		if (Rz) {
			Rz = SC_Ext__TransCompile(Cpps, JB_LUB[1636], JB_LUB[107], nil);
		}
		if (Rz) {
			Rz = SC_Ext__TransCompile(Cpps, JB_LUB[1636], JB_LUB[108], nil);
		}
	}
	return Rz;
}

bool SC_Ext__UseAndCompile(Array* Input, JB_String* Output) {
	JB_File* TmpFol = SC_Str_MakeAndGoInto(Output);
	JB_Incr(TmpFol);
	Array* Cpps = SC_Ext__FilterCppsIfAlreadyDone(Input, TmpFol);
	JB_Incr(Cpps);
	JB_Decr(TmpFol);
	bool _tmPf0 = SC_Ext__TransCompileWrap(Cpps);
	JB_Decr(Cpps);
	return _tmPf0;
}


xC2xB5Form* SC_VM_Builder__AddForm(Message* Form) {
	xC2xB5Form* Rz = nil;
	Rz = SC_xC2xB5Form_Constructor(nil, Form);
	(JB_Dict_ValueLowerSet(SC__xC2xB5Form_Forms, Form->Name, Rz));
	return Rz;
}

void SC_VM_Builder__AddxC2xB5Op(JB_String* Name, int Id) {
	Message* Msg = JB_int_Msg(Id);
	Message* Thg = JB_Syx_OperatorPlus(kJB_SyxThg, Name);
	JB_Tree_SyntaxAppend(SC__VM_Builder_ModuleArg, SC_NewEqRelWithMsgMsg(Thg, Msg));
}

ASM* SC_VM_Builder__BadEncoder(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	return nil;
}

bool SC_VM_Builder__BuildFiles() {
	Message* VMDef = SC_VM_Builder__VMBox();
	JB_Incr(VMDef);
	if (!VMDef) {
		JB_Decr(VMDef);
		return nil;
	}
	JB_File* _tmPf0 = SC_Comp__InputFileAlways(JB_LUB[2036]);
	JB_Incr(_tmPf0);
	JB_SetRef(SC__VM_Builder_FatFile, JB_Str_Out(_tmPf0, true));
	JB_Decr(_tmPf0);
	Message* Forms = JB_Msg_FindName(VMDef, JB_LUB[1939]);
	JB_Incr(Forms);
	JB_Tree_Remove(Forms);
	FastString* Code = JB_FS_Constructor(nil);
	JB_Incr(Code);
	FastString* Jump = JB_FS_Constructor(nil);
	JB_Incr(Jump);
	SC_VM_Builder__Clean(VMDef);
	SC_VM_Builder__DataTypeModule();
	SC_VM_Builder__GenerateForms(Forms, true);
	JB_Decr(Forms);
	SC_VM_Builder__FillEncoders(VMDef, true);
	JB_Decr(VMDef);
	SC_VM_Builder__VMCpp(Code, Jump);
	FastString* Fs = SC__VM_Builder_FatFile;
	JB_Incr(Fs);
	if (Fs) {
		JB_FS_Flush(Fs);
	}
	JB_Decr(Fs);
	SC_VM_Builder__SafeWrite(JB_LUB[2037], SC__VM_Builder_form_h);
	SC_VM_Builder__SafeWrite(JB_LUB[2038], Code);
	JB_Decr(Code);
	SC_VM_Builder__SafeWrite(JB_LUB[2039], Jump);
	JB_Decr(Jump);
	(JB_FS_SizeSet(SC__VM_Builder_form_h, 0));
	return true;
}

bool SC_VM_Builder__BuildInstructions(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (JB_Ring_HasChildren(Node)) {
		JB_Msg_Fail(((Message*)JB_Ring_First(Node)), nil);
		return nil;
	}
	Message* After = Node;
	{
		Array* _LoopSrcf2 = SC__VM_Builder_NameList;
		int _if0 = 0;
		while (true) {
			Message* Tmp = ((Message*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Tmp == nil) {
				break;
			}
			int Pos = _if0;
			JB_String* Form = JB_Msg_Name(((Message*)JB_Tree_Get(((Message*)JB_Tree_Get(Tmp, 0)), 0)));
			if (JB_Str_Exists(Form)) {
				Message* Fnc = JB_Syx_OperatorPlus(kJB_SyxSDot, JB_LUB[959]);
				Message* List = JB_Msg_Msg(Fnc, kJB_SyxList, JB_LUB[0]);
				JB_Msg_AppendSyx(List, kJB_SyxStr, JB_Str_LowerCase(Form));
				JB_Msg_AppendSyx(List, kJB_SyxStr, Tmp->Name);
				JB_Msg_AppendNum(List, Pos);
				(JB_Ring_NextSibSet(After, Fnc));
				After = Fnc;
			}
			(++_if0);
		};
	}
	;
	SC_Msg_SafeRemove(Node, kJB_SyxSheb);
	return false;
}

void SC_VM_Builder__Clean(Message* Msg) {
	{
		Message* Ch = Msg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Msg));
		while ((Ch) and (Ch != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Ch));
			if (JB_Msg_OperatorIn(Ch, kJB_SyxArg)) {
				Ch->Indent = (Ch->Indent + 4);
			}
			if (JB_Msg_EqualsSyx(Ch, kJB_SyxOpp, false)) {
				if (JB_Msg_SyntaxEquals(Ch, JB_LUB[51], false)) {
					JB_SetRef(Ch->Name, JB_LUB[283]);
				}
				 else if (JB_Msg_SyntaxEquals(Ch, JB_LUB[284], false)) {
					JB_SetRef(Ch->Name, JB_LUB[285]);
				}
			}
			Ch = _N_f2;
		};
		;
	};
}

JB_File* SC_VM_Builder__CppLibFile(JB_String* Ch) {
	JB_File* _tmPf0 = SC_Ext__CppLib();
	JB_Incr(_tmPf0);
	JB_File* _tmPf1 = JB_File_SyntaxAccess(_tmPf0, Ch);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* SC_VM_Builder__DataTypeCreate(Message* Form, int Fnum) {
	Message* Rz = nil;
	JB_String* Name = JB_Str_OperatorPlus(JB_LUB[1887], Form->Name);
	Message* Sigh = JB_Macro_CallFast(SC__VM_Builder_ASM_Datatype, JB_Syx_OperatorPlus(kJB_SyxThg, Name), JB_int_Msg(Fnum));
	Rz = JB_Msg_FindNested(Sigh, kJB_SyxList, nil, false);
	Rz = ((Message*)JB_Ring_NextSib(Rz));
	//"This would be better if speedie grouped these, rather than spamming JB_InitCode_";
	while (JB_Ring_HasChildren(Sigh)) {
		SC_Comp__SyntaxAppend(((Message*)JB_Ring_First(Sigh)));
	};
	return Rz;
}

void SC_VM_Builder__DataTypeModule() {
	Message* Module = JB_Str_ParseJbin(((JB_LUB[1551])), 1073741824);
	SC_Comp__SyntaxAppend(Module);
	JB_SetRef(SC__VM_Builder_ModuleArg, ((Message*)JB_Ring_Last(((Message*)JB_Ring_Last(((Message*)JB_Ring_Last(Module)))))));
}

Message* SC_VM_Builder__DefineGet(JB_String* Fname, int Up, int Down) {
	SC_VM_Builder__DefineGetSub(Fname, Up, Down, 'i', ' ');
	SC_VM_Builder__DefineGetSub(Fname, Up, Down, 'u', 'u');
	Array* Arr = JB_Array_Constructor0(nil);
	JB_Incr(Arr);
	Message* _tmPf0 = JB_Syx_OperatorPlus(kJB_SyxThg, Fname);
	JB_Incr(_tmPf0);
	JB_Array_SyntaxAppend(Arr, _tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_int_Msg(Up);
	JB_Incr(_tmPf1);
	JB_Array_SyntaxAppend(Arr, _tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_int_Msg(Down);
	JB_Incr(_tmPf2);
	JB_Array_SyntaxAppend(Arr, _tmPf2);
	JB_Decr(_tmPf2);
	Message* _tmPf3 = JB_Macro_Run(SC__VM_Builder_Ugh, Arr);
	JB_Incr(_tmPf3);
	JB_Decr(Arr);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

void SC_VM_Builder__DefineGetSub(JB_String* Fname, int Up, int Down, uint /*byte*/ C, uint /*byte*/ C2) {
	//;
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[286]);
	JB_FS_AppendString(SC__VM_Builder_form_h, Fname);
	JB_FS_AppendByte(SC__VM_Builder_form_h, C);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[287]);
	JB_FS_AppendByte(SC__VM_Builder_form_h, C2);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[288]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, Down);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[289]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, Up);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[290]);
	JB_FS_AppendString(SC__VM_Builder_form_h, Fname);
	JB_FS_AppendByte(SC__VM_Builder_form_h, C);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[291]);
	JB_FS_AppendByte(SC__VM_Builder_form_h, C2);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[292]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, Down);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[289]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, Up);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[293]);
	//;
}

Message* SC_VM_Builder__FatCreatorSub(JB_String* Name, xC2xB5Form* Form) {
	Message* _tmPf2 = JB_Syx_OperatorPlus(kJB_SyxThg, Name);
	JB_Incr(_tmPf2);
	Message* Fn = JB_Macro_CallFast(SC__VM_Builder_icecream, _tmPf2, nil);
	JB_Incr(Fn);
	JB_Decr(_tmPf2);
	Message* Arg = ((Message*)JB_Ring_Last(Fn));
	JB_Incr(Arg);
	Message* Prm = ((Message*)JB_Ring_PrevSib(Arg));
	JB_Incr(Prm);
	Message* FatDecl = ((Message*)JB_Ring_Last(Prm));
	JB_Incr(FatDecl);
	JB_Decr(Prm);
	Array* R = (JB_Array_Constructor0(nil));
	JB_Incr(R);
	JB_Array_SyntaxAppend(R, Arg);
	JB_Array_SyntaxAppend(R, Arg);
	Message* _tmPf3 = ((Message*)JB_Ring_First(Form->src));
	JB_Incr(_tmPf3);
	Message* F = ((Message*)JB_Ring_First(_tmPf3));
	JB_Incr(F);
	{
		int _if0 = 0;
		while (_if0 < Form->Count) {
			int I = _if0;
			uint P = SC_xC2xB5Form_AccessInt(Form, _if0);
			JB_String* Ty = ((JB_StringC*)JB_Ternary(SC_xC2xB5Param_IsReg(P), JB_LUB[1888], JB_LUB[152]));
			JB_Incr(Ty);
			JB_String* Pname = SC_Msg_VMMsgArgName(F, I);
			JB_Incr(Pname);
			Message* Dcl = SC_NewDeclWithStrStr(Ty, Pname);
			JB_Incr(Dcl);
			JB_Decr(Ty);
			(JB_Ring_PrevSibSet(FatDecl, Dcl));
			JB_Decr(Dcl);
			Message* _tmPf4 = JB_int_Msg(I);
			JB_Incr(_tmPf4);
			(JB_Array_ValueSet(R, 0, _tmPf4));
			JB_Decr(_tmPf4);
			Message* _tmPf5 = JB_Syx_OperatorPlus(kJB_SyxThg, Pname);
			JB_Incr(_tmPf5);
			(JB_Array_ValueSet(R, 1, _tmPf5));
			JB_Decr(_tmPf5);
			Macro* _tmPf7 = SC_xC2xB5Param_Which(P);
			Message* _tmPf6 = JB_Macro_Run(_tmPf7, R);
			JB_Incr(_tmPf6);
			JB_Tree_SyntaxAppend(Arg, _tmPf6);
			JB_Decr(_tmPf6);
			if (SC_xC2xB5Param_SyntaxIs(P, kSC__xC2xB5Param_Jump)) {
				Message* _tmPf8 = JB_Syx_OperatorPlus(kJB_SyxThg, Pname);
				JB_Incr(_tmPf8);
				(JB_Array_ValueSet(R, 0, _tmPf8));
				JB_Decr(_tmPf8);
				int Size = 32 - SC_xC2xB5Param_BitSize(P);
				Message* _tmPf9 = JB_Syx_PlusNum(kJB_SyxNum, Size);
				JB_Incr(_tmPf9);
				(JB_Array_ValueSet(R, 1, _tmPf9));
				JB_Decr(_tmPf9);
				Message* _tmPf10 = JB_Macro_Run(SC__VM_Builder_ohio, R);
				JB_Incr(_tmPf10);
				JB_Tree_SyntaxAppend(Arg, _tmPf10);
				JB_Decr(_tmPf10);
			}
			JB_Decr(Pname);
			JB_SetRef(F, ((Message*)JB_Ring_NextSib(F)));
			(++_if0);
		};
		JB_Decr(_tmPf3);
	}
	;
	JB_Decr(Arg);
	JB_Decr(FatDecl);
	JB_Decr(R);
	JB_Decr(F);
	JB_SafeDecr(Fn);
	return Fn;
}

void SC_VM_Builder__FillEncoders(Message* List, bool ActuallyMakeTheVM) {
	Array* R = nil;
	if (ActuallyMakeTheVM) {
		R = (JB_Array_Constructor0(nil));
		JB_SetRef(SC__VM_Builder_NameList, R);
		JB_Array_AppendCount(R, JB_Syx_OperatorPlus(kJB_SyxThg, JB_LUB[1413]), 256);
	}
	SC_VM_Builder__VM_FillPos(List, R);
	SC_VM_Builder__VM_NewInstructions(List, false, R);
	SC_VM_Builder__VM_NewInstructions(List, true, R);
	{
		int I = 0;
		while (I < 256) {
			if (!SC__ASM_Encoders[I]) {
				SC__ASM_Encoders[I] = SC_VM_Builder__BadEncoder;
			}
			(++I);
		};
	};
}

void SC_VM_Builder__FillTypePrm(JB_String* Fname, int Pname) {
	Message* Prop = JB_Syx_OperatorPlus(kJB_SyxThg, Fname);
	JB_Incr(Prop);
	Message* _tmPf1 = JB_int_Msg(Pname);
	JB_Incr(_tmPf1);
	Message* _tmPf0 = JB_Macro_CallFast(SC__VM_Builder_Ooof, Prop, _tmPf1);
	JB_Incr(_tmPf0);
	JB_Decr(Prop);
	JB_Decr(_tmPf1);
	JB_Tree_SyntaxAppend(SC__VM_Builder_dt_prm, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_VM_Builder__FinishAcc() {
	Message* S = SC__VM_Builder_dt_prm;
	if (S) {
		int X = SC__VM_Builder_XType;
		if (X) {
			JB_Array_SyntaxAppend(JB__Macro_TmpPrms_, JB_int_Msg(X));
		}
		Macro* M = ((Macro*)JB_Ternary(X, SC__VM_Builder_double_rizzler, SC__VM_Builder_rizzler));
		JB_Msg_AppendMacro(S, M, JB__Macro_TmpPrms_);
		JB_Array_Clear(JB__Macro_TmpPrms_);
	}
	SC__VM_Builder_XType = 0;
}

int SC_VM_Builder__FreeID(Message* M, int Ask) {
	if (Ask <= 1) {
		int N = SC__VM_Builder_NormalPos;
		if (!N) {
			N = 32;
		}
		SC__VM_Builder_NormalPos = (N + 1);
		if (N >= 256) {
			JB_Msg_Fail(M, JB_LUB[960]);
			return 0;
		}
		return N;
	}
	uint F = SC__VM_Builder_FreeMultiASM;
	{
		int I = 0;
		while (I < 16) {
			if ((F & Ask) == Ask) {
				SC__VM_Builder_FreeMultiASM = (F & (~Ask));
				return I << 2;
			}
			Ask = (Ask << 4);
			(++I);
		};
	}
	;
	if (true) {
		JB_Msg_Fail(M, JB_LUB[961]);
	}
	return 0;
}

int SC_VM_Builder__GenAcc(Message* Line, int Bit_pos, int Pname, int Max) {
	int N = Max - Bit_pos;
	JB_String* Lname = JB_LUB[1935];
	if (Line) {
		Message* F = JB_Msg_NeedFirst(Line);
		if (!F) {
			return 0;
		}
		uint F0 = JB_Str_First(F->Name);
		if ((F0 == 'x') and (Bit_pos == 32)) {
			SC__VM_Builder_XType = Pname;
			return JB_int__Max();
		}
		if ((F0 == 'r') or (F0 == 'R')) {
			SC_VM_Builder__FillTypePrm(Line->Name, Pname);
			return 5 + Bit_pos;
		}
		if (JB_byte_IsInt(F0)) {
			N = JB_Msg_Int(F, 0);
		}
		if (N < 1) {
			JB_Msg_Fail(Line, JB_LUB[1936]);
			return 0;
		}
		if (N > (Max - 8)) {
			JB_Msg_Fail(Line, JB_Str_OperatorPlus(JB_LUB[1937], JB_int_RenderFS(N, nil)));
			return 0;
		}
		Lname = JB_Str_OperatorPlus(JB_LUB[162], Line->Name);
	}
	Lname = JB_Str_OperatorPlus(SC__VM_Builder_parent, Lname);
	Message* Fnc_src = SC_VM_Builder__DefineGet(Lname, Max - N, Bit_pos);
	JB_FreeIfDead(SC_Func__NewFunc(Fnc_src, nil, Line));
	SC_VM_Builder__FillTypePrm(Lname, Pname);
	if (((Bit_pos + N) > Max) or (N > (Max - 8))) {
		if (true) {
			JB_Msg_Fail(Line, JB_LUB[1936]);
		}
	}
	return N + Bit_pos;
}

void SC_VM_Builder__GenerateForms(Message* Forms, bool DoMore) {
	int F = 0;
	{
		Message* _LoopSrcf4 = JB_Msg_NeedSyx(Forms, kJB_SyxArg);
		Message* Form_msg = ((Message*)JB_Ring_First(_LoopSrcf4));
		while (Form_msg) {
			Message* _Nf3 = ((Message*)JB_Ring_NextSib(Form_msg));
			bool _tmPf0 = (F < 128);
			if (!_tmPf0) {
				JB_Msg_Fail(Form_msg, JB_LUB[2008]);
			}
			if (_tmPf0) {
				//using;
				MessagePosition _usingf1 = ((MessagePosition){});
				JB_Msg_SyntaxUsing(Form_msg, (&_usingf1));
				JB_FreeIfDead(SC_VM_Builder__AddForm(Form_msg));
				(++F);
				if (DoMore) {
					SC_VM_Builder__GenerateOne(Form_msg, F);
				}
				JB_MsgPos_SyntaxUsingComplete((&_usingf1), Form_msg);
				JB_MsgPos_Destructor((&_usingf1));
			}
			Form_msg = _Nf3;
		};
		;
	};
}

void SC_VM_Builder__GenerateOne(Message* Form_msg, int F) {
	JB_SetRef(SC__VM_Builder_dt_prm, SC_VM_Builder__DataTypeCreate(Form_msg, F));
	JB_SetRef(SC__VM_Builder_parent, Form_msg->Name);
	int Bit_pos = 8;
	int P = -1;
	Message* Arg = JB_Msg_NeedSyxInt(Form_msg, kJB_SyxArg, -1);
	if (!Arg) {
		return;
	}
	{
		Message* L = ((Message*)JB_Ring_First(Arg));
		while (L) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(L));
			Bit_pos = SC_VM_Builder__GenAcc(L, Bit_pos, (++P), 32);
			if (Bit_pos > 32) {
				break;
			}
			L = _Nf1;
		};
		;
	}
	;
	if ((Bit_pos < 32) and (P < 5)) {
		SC_VM_Builder__GenAcc(nil, Bit_pos, 5, 32);
	}
	SC_VM_Builder__FinishAcc();
	JB_FS_AppendByte(SC__VM_Builder_form_h, '\n');
}

int SC_VM_Builder__Init_() {
	{
		JB_SetRef(SC__VM_Builder_NameList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__VM_Builder_form_h, JB_FS_Constructor(nil));
		JB_SetRef(SC__VM_Builder_parent, JB_LUB[0]);
		SC__VM_Builder_FreeMultiASM = (~1);
		JB_SetRef(SC__VM_Builder_icecream, JB_Macro_ConstructorStr(nil, (JB_LUB[294])));
		JB_SetRef(SC__VM_Builder_rizzler, JB_Macro_ConstructorStr(nil, (JB_LUB[295])));
		JB_SetRef(SC__VM_Builder_double_rizzler, JB_Macro_ConstructorStr(nil, (JB_LUB[296])));
		JB_SetRef(SC__VM_Builder_Ooof, JB_Macro_ConstructorStr(nil, (JB_LUB[297])));
		JB_SetRef(SC__VM_Builder_Ugh, JB_Macro_ConstructorStr(nil, (JB_LUB[298])));
		JB_SetRef(SC__VM_Builder_ohio, JB_Macro_ConstructorStr(nil, (JB_LUB[299])));
		JB_SetRef(SC__VM_Builder_gyatt, JB_Macro_ConstructorStr(nil, (JB_LUB[300])));
		JB_SetRef(SC__VM_Builder_legs, JB_Macro_ConstructorStr(nil, (JB_LUB[301])));
		JB_SetRef(SC__VM_Builder_arms, JB_Macro_ConstructorStr(nil, (JB_LUB[302])));
		JB_SetRef(SC__VM_Builder_skibidy, JB_Macro_ConstructorStr(nil, (JB_LUB[303])));
		JB_SetRef(SC__VM_Builder_ASM_Datatype, JB_Macro_ConstructorStr(nil, (JB_LUB[304])));
	}
	;
	return 0;
}

bool SC_VM_Builder__JustDefineInstructions() {
	if (SC__VM_Builder_ModuleArg) {
		return nil;
	}
	Message* Vmdef = SC_VM_Builder__VMBox();
	JB_Incr(Vmdef);
	if (Vmdef) {
		Message* Forms = JB_Msg_FindName(Vmdef, JB_LUB[1939]);
		JB_Incr(Forms);
		SC_VM_Builder__GenerateForms(Forms, false);
		JB_Decr(Forms);
		SC_VM_Builder__FillEncoders(Vmdef, false);
	}
	JB_Decr(Vmdef);
	return false;
}

void SC_VM_Builder__MakeFatCreator(JB_String* Name, xC2xB5Form* Form) {
	Message* Fn = SC_VM_Builder__FatCreatorSub(Name, Form);
	FastString* Fs = SC__VM_Builder_FatFile;
	if (Fs) {
		JB_FS_AppendByte(Fs, '\n');
		JB_FreeIfDead(JB_Msg_Render(Fn, Fs));
		JB_FS_AppendByte(Fs, '\n');
	}
}

void SC_VM_Builder__MakeJump(Message* Msg, FastString* Jump) {
	//;
	JB_FS_AppendString(Jump, JB_LUB[109]);
	JB_FS_AppendString(Jump, Msg->Name);
	JB_FS_AppendString(Jump, JB_LUB[70]);
	//;
}

bool SC_VM_Builder__MakeTheVM() {
	SC_Imp_Use(SC__Comp_Project);
	if (SC_VM_Builder__BuildFiles()) {
		SC_ASM__TestASM();
	}
	return JB_Rec_OK(JB_StdErr);
}

void SC_VM_Builder__MakeVM(Message* Tmp, FastString* Vm) {
	if (!JB_Msg_EqualsSyx(Tmp, kJB_SyxTmp, false)) {
		return;
	}
	Message* P = ((Message*)JB_Ring_PrevSib(Tmp));
	if (JB_Msg_EqualsSyx(P, kJB_SyxSheb, false)) {
		//;
		JB_FS_AppendString(Vm, JB_LUB[545]);
		JB_FS_AppendString(Vm, P->Name);
		JB_FS_AppendByte(Vm, '\n');
		//;
	}
	if (JB_Msg_SyntaxIs(Tmp, kJB__MsgParseFlags_Special)) {
		return;
	}
	(JB_Msg_SyntaxIsSet(Tmp, kJB__MsgParseFlags_Special, true));
	Message* Arg = ((Message*)JB_Ring_Last(Tmp));
	//;
	JB_FS_AppendString(Vm, JB_LUB[1067]);
	JB_FS_AppendString(Vm, Tmp->Name);
	JB_FS_AppendString(Vm, JB_LUB[77]);
	//;
	if (!JB_Msg_FindSyxName(Arg, kJB_SyxTmp, JB_LUB[143], false)) {
		JB_FS_AppendByte(Vm, '_');
	}
	JB_FS_AppendByte(Vm, '\n');
	{
		Message* Line = ((Message*)JB_Ring_First(Arg));
		while (Line) {
			Message* _Nf3 = ((Message*)JB_Ring_NextSib(Line));
			SC_VM_Builder__VMLine(Line, Vm);
			Line = _Nf3;
		};
		;
	};
}

bool SC_VM_Builder__OKBoomer(Message* Tmp, int X, ASM_Encoder Formenc, Array* R) {
	if ((SC__ASM_Encoders[X])) {
		JB_Msg_Fail(Tmp, JB_LUB[962]);
	}
	SC__ASM_Encoders[X] = Formenc;
	if (R != nil) {
		(JB_Array_ValueSet(R, X, Tmp));
		return true;
	}
	return false;
}

void SC_VM_Builder__SafeWrite(JB_String* Name, FastString* Data) {
	if (Data->Length < 1024) {
	}
	 else {
		JB_File* _tmPf0 = SC_VM_Builder__CppLibFile(Name);
		JB_Incr(_tmPf0);
		JB_String* _tmPf1 = JB_FS_SyntaxCast(Data);
		JB_Incr(_tmPf1);
		(JB_File_SmartDataSet(_tmPf0, _tmPf1));
		JB_Decr(_tmPf0);
		JB_Decr(_tmPf1);
	}
}

void SC_VM_Builder__VM_FillPos(Message* List, Array* Rz) {
	{
		Message* Ch = ((Message*)JB_Ring_First(List));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			if (JB_Msg_SyntaxEquals(Ch, JB_LUB[1938], true)) {
				Message* F = ((Message*)JB_Ring_First(Ch));
				if (JB_Msg_EqualsSyx(F, kJB_SyxNum, false)) {
					Ch->Flags = (Ch->Flags | 32768);
					int64 I = JB_Msg_Int(F, 0);
					Message* Arg = JB_Msg_Last(Ch, kJB_SyxArg);
					Message* Item = ((Message*)JB_Ring_First(Arg));
					if (Item) {
						SC_VM_Builder__VM_MakeInstructionSub(Item, false, Rz, I);
					}
				}
			}
			Ch = _Nf1;
		};
		;
	};
}

void SC_VM_Builder__VM_MakeInstructionSub(Message* Tmp, bool Ask, Array* ActuallyMakeTheVM, int ForceID) {
	Message* Prms = ((Message*)JB_Ring_First(Tmp));
	int FoundBits = SC_Msg_VMBits(Prms);
	if (Ask) {
		if (!(FoundBits & 1)) {
			return;
		}
	}
	Tmp->Flags = (Tmp->Flags | 32768);
	Message* P1 = ((Message*)JB_Ring_First(Prms));
	JB_String* Name = JB_Msg_Name(P1);
	xC2xB5Form* Form = SC_xC2xB5Form__NeedForm(Name, P1);
	ASM_Encoder FormEnc = SC__ASM_Forms[Form->Index];
	Name = JB_Str_OperatorPlus(JB_LUB[1887], Name);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Tmp, (&_usingf0));
	if (ActuallyMakeTheVM != nil) {
		JB_Tree_SyntaxAppend(SC__VM_Builder_ModuleArg, SC_NewDeclWithStrStr(Name, JB_LUB[0]));
	}
	(++SC__VM_Builder_Total);
	SC_VM_Builder__MakeFatCreator(Tmp->Name, Form);
	if (ForceID) {
		SC__VM_Builder_FreeMultiASM = (SC__VM_Builder_FreeMultiASM & (~(1 << ForceID)));
		if (SC_VM_Builder__OKBoomer(Tmp, ForceID, ((ASM_Encoder)(FormEnc)), ActuallyMakeTheVM)) {
			SC_VM_Builder__AddxC2xB5Op(Tmp->Name, ForceID);
		}
		JB_MsgPos_Destructor((&_usingf0));
		return;
	}
	int Id = 0;
	if (Ask) {
		Id = SC_VM_Builder__FreeID(Tmp, FoundBits);
	}
	bool Done = false;
	{
		int _currf1 = ((int)FoundBits);
		while (_currf1) {
			int B = JB_int_LowestBit(_currf1);
			int Extra = JB_Int_Log2(B);
			int X = Id + Extra;
			if (SC_VM_Builder__OKBoomer(Tmp, X, ((ASM_Encoder)(FormEnc)), ActuallyMakeTheVM) and (!Done)) {
				SC_VM_Builder__AddxC2xB5Op(Tmp->Name, X);
				Done = true;
			}
			_currf1 = (_currf1 & (~B));
		};
	}
	;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Tmp);
	JB_MsgPos_Destructor((&_usingf0));
}

bool SC_VM_Builder__VM_NewIns(Message* Tmp, bool Ask, Array* ActuallyMakeTheVM) {
	if (((JB_Msg_EqualsSyx(Tmp, kJB_SyxTmp, false))) and (!(Tmp->Flags & 32768))) {
		if ((!JB_Msg_SyntaxEquals(Tmp, JB_LUB[1939], false)) and (!JB_Msg_SyntaxEquals(Tmp, JB_LUB[467], false))) {
			SC_VM_Builder__VM_MakeInstructionSub(Tmp, Ask, ActuallyMakeTheVM, 0);
			if (!Ask) {
				return nil;
			}
		}
	}
	return true;
}

void SC_VM_Builder__VM_NewInstructions(Message* List, bool Amount, Array* Rz) {
	{
		Message* Ch = ((Message*)JB_Ring_First(List));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			if (!SC_VM_Builder__VM_NewIns(Ch, Amount, Rz)) {
				return;
			}
			Ch = _Nf1;
		};
		;
	};
}

Message* SC_VM_Builder__VMBox() {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_File* V = SC_Comp__InputFile(JB_LUB[1807], nil);
	JB_Incr(V);
	if (V) {
		JB_SetRef(SC__VM_Builder_vm_file, V);
		JB_SetRef(Rz, JB_File_Parse(V, 16777216, false));
		if (Rz) {
			SC_Msg_TranAllTargets(Rz);
		}
	}
	 else {
		if (true) {
			JB_Str_Fail(JB_LUB[1808]);
		}
	}
	JB_Decr(V);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_VM_Builder__VMCpp(FastString* Vm, FastString* Jump) {
	{
		Array* _LoopSrcf2 = SC__VM_Builder_NameList;
		int _if0 = 0;
		while (true) {
			Message* Tmp = ((Message*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Tmp == nil) {
				break;
			}
			SC_VM_Builder__MakeVM(Tmp, Vm);
			SC_VM_Builder__MakeJump(Tmp, Jump);
			(++_if0);
		};
	}
	;
	JB_FS_AppendString(Vm, JB_LUB[1144]);
}

void SC_VM_Builder__VMLine(Message* Line, FastString* Vm) {
	if (JB_Msg_EqualsSyx(Line, kJB_SyxSheb, false)) {
		//;
		JB_FS_AppendString(Vm, JB_LUB[545]);
		JB_FS_AppendString(Vm, Line->Name);
		JB_FS_AppendByte(Vm, '\n');
		//;
	}
	 else {
		JB_FS_AppendByte(Vm, '\t');
		JB_FreeIfDead(JB_Msg_Render(Line, Vm));
		JB_FS_AppendByte(Vm, ';');
	}
	JB_FS_AppendByte(Vm, '\n');
}




void SC_AddToStaticSection(Message* Arg, Message* ToAdd) {
	Message* Static = JB_Msg_FindSyxName(Arg, kJB_SyxTmp, JB_LUB[166], false);
	if (Static) {
		Arg = ((Message*)JB_Ring_Last(Static));
		if ((!JB_Msg_EqualsSyx(Arg, kJB_SyxArg, false))) {
			JB_Msg_Fail(Static, JB_LUB[987]);
			return;
		}
	}
	 else {
		Static = (JB_Syx_Msg(kJB_SyxTmp, JB_LUB[166]));
		JB_Tree_SyntaxAppend(Arg, Static);
		Arg = JB_Msg_Msg(Static, kJB_SyxArg, JB_LUB[0]);
	}
	JB_Tree_SyntaxAppend(Arg, ToAdd);
}

int SC_ArrayInOrderCheck(int InOrder, Message* Msg) {
	if ((InOrder >= 0) and (JB_Msg_EqualsSyx(Msg, kJB_SyxNum, false))) {
		if (JB_Msg_Int(Msg, 0) == InOrder) {
			return InOrder + 1;
		}
	}
	return -1;
}

bool SC_ClassLinkageTable_cpp_class(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	return false;
}

bool SC_ClassLinkageTable_cpp_part(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	JB_FreeIfDead(SC_Base__LoadCppPart(Node, Name_space, Node));
	return false;
}

bool SC_ClassLinkageTable_cpp_wrapper(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	return false;
}

bool SC_ClassLinkageTable_datatype(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		if (!SC_Class_IsStruct(((SCClass*)Name_space))) {
			JB_Msg_Fail(Node, JB_LUB[995]);
			return nil;
		}
		Message* Value = JB_Msg_NeedSyx(Node, kJB_SyxThg);
		JB_Incr(Value);
		if (Value) {
			JB_Msg_ExpectLast(Value, JB_LUB[0]);
		}
		JB_Decr(Value);
	}
	return false;
}

bool SC_ClassLinkageTable_ignore(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	return false;
}

bool SC_ClassLinkageTable_noearlyfree(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	return false;
}

bool SC_ClassLinkageTable_numeric(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (JB_Object_MustBe(Name_space, &SCClassData, Node)) {
		if (!SC_Class_IsDataTypeOnly(((SCClass*)Name_space))) {
			JB_Msg_Fail(Node, JB_LUB[1076]);
			return nil;
		}
		Message* Type = JB_Msg_NeedSyx(Node, kJB_SyxThg);
		JB_Incr(Type);
		if (!Type) {
			JB_Decr(Type);
			return nil;
		}
		((SCClass*)Name_space)->TypeInfo = kJB__TC_UnusedType;
		if ((JB_Msg_SyntaxEquals(Type, JB_LUB[32], false)) or (JB_Msg_SyntaxEquals(Type, JB_LUB[1077], false))) {
			(SC_Class_SyntaxIsSet(((SCClass*)Name_space), kSC__ClassInfo_Symbol, true));
		}
		 else if (JB_Msg_SyntaxEquals(Type, JB_LUB[1078], false)) {
			(SC_Class_SyntaxIsSet(((SCClass*)Name_space), kSC__ClassInfo_Fixed, true));
		}
		 else if (JB_Msg_SyntaxEquals(Type, JB_LUB[1079], false)) {
			(SC_Class_SyntaxIsSet(((SCClass*)Name_space), kSC__ClassInfo_Flags, true));
		}
		 else {
			if (true) {
				JB_Msg_Fail(Type, nil);
			}
		}
		JB_Decr(Type);
	}
	return false;
}

bool SC_ClassLinkageTable_sort_properties(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		Message* _tmPf0 = ((Message*)JB_Ring_First(Node));
		JB_Incr(_tmPf0);
		((SC_Class_SyntaxIsSet(((SCClass*)Name_space), kSC__ClassInfo_SortsProperties, JB_Msg_Yes(_tmPf0, true))));
		JB_Decr(_tmPf0);
	}
	return false;
}

bool SC_ClassLinkageTable_stateful(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		(SC_Class_SyntaxIsSet(((SCClass*)Name_space), kSC__ClassInfo_Stateful, true));
		SC_Class_CheckStateful(((SCClass*)Name_space), Node);
	}
	return false;
}

bool SC_ClassLinkageTable_stateless(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		(SC_Class_SyntaxIsSet(((SCClass*)Name_space), kSC__ClassInfo_Stateless, true));
		SC_Class_CheckStateful(((SCClass*)Name_space), Node);
	}
	return false;
}

bool SC_ClassLinkageTable_tighten(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		if (!(SC_Class_IsObject(((SCClass*)Name_space)) or SC_Class_IsStruct(((SCClass*)Name_space)))) {
			SC_SCObject_Fail(((SCClass*)Name_space), JB_LUB[1080]);
			return nil;
		}
		if ((((SCClass*)Name_space)->IsWrapper)) {
			SC_SCObject_Fail(((SCClass*)Name_space), JB_LUB[1081]);
			return nil;
		}
		Message* _tmPf0 = ((Message*)JB_Ring_First(Node));
		JB_Incr(_tmPf0);
		bool Yes = JB_Msg_Yes(_tmPf0, true);
		JB_Decr(_tmPf0);
		((SC_Class_SyntaxIsSet(((SCClass*)Name_space), kSC__ClassInfo_SortsProperties, Yes)));
	}
	return false;
}

bool SC_ClassLinkageTable_visible(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	return false;
}

bool SC_ClassLinkageTable_wrapper(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		((SCClass*)Name_space)->IsWrapper = 1;
		Message* F = ((Message*)JB_Ring_First(Node));
		JB_Incr(F);
		if (F) {
			JB_Msg_Expect(F, kJB_SyxThg, nil);
			JB_Msg_ExpectLast(F, JB_LUB[0]);
			if (JB_Msg_SyntaxEquals(F, JB_LUB[996], false)) {
				((SCClass*)Name_space)->IsWrapper = 2;
			}
			 else {
				if (true) {
					JB_Msg_Fail(F, nil);
				}
			}
		}
		JB_Decr(F);
	}
	return false;
}

SCClass* SC_ClassOfObjForC(Message* Curr) {
	if (JB_Msg_EqualsSyx(Curr, kJB_SyxFunc, false)) {
		SCFunction* Fnc = SC_Msg_MsgFunc(Curr);
		if (Fnc) {
			SCDecl* Rt = Fnc->ReturnType;
			if (Rt) {
				return Rt->Type;
			}
		}
		return nil;
	}
	JB_Object* Obj = Curr->Obj;
	if (JB_Object_FastIsa(Obj, &SCDeclData)) {
		return ((SCDecl*)Obj)->Type;
	}
	if (JB_Object_FastIsa(Obj, &SCClassData)) {
		return ((SCClass*)Obj);
	}
	if (JB_Object_FastIsa(Obj, &SCModuleData)) {
		if (((SCModule*)Obj)->Cls) {
			return SC_TypeJBClass;
		}
	}
	return nil;
}

SCNode* SC_ClsCollectTable_description(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (JB_Object_Isa(Name_space, &SCBetterNodeData)) {
		SC_SCBetterNode_ReadDescription(((SCBetterNode*)Name_space), Node);
	}
	return nil;
}

void SC_CollectDeclsFuncBodyJustWhatWeNewlyMade(Message* Arg, SCNode* Scarg) {
	{
		Message* Item = ((Message*)JB_Ring_First(Arg));
		while (Item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Item));
			if (JB_Msg_EqualsSyx(Item, kJB_SyxDecl, false)) {
				SC_Msg_CollectFromBody(Item, Scarg);
			}
			Item = _Nf1;
		};
		;
	};
}

void SC_CollectDeclsFuncBodyUnsureHowToRemove(Message* Arg, SCNode* Scarg) {
	SC_CollectDeclsFuncBodyJustWhatWeNewlyMade(Arg, Scarg);
}

void SC_CollectDeclsGlobals(Message* Arg, SCNode* Scarg) {
	{
		Message* Item = ((Message*)JB_Ring_First(Arg));
		while (Item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Item));
			if (JB_Msg_EqualsSyx(Item, kJB_SyxDecl, false)) {
				if (!SC_Msg_CollectAGlobalDecl(Item, Scarg)) {
					return;
				}
			}
			Item = _Nf1;
		};
		;
	};
}

bool JB_CompareError(Message* Expected, Message* Found) {
	JB_Incr(Found);
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	//;
	JB_FS_AppendString(Fs, JB_LUB[426]);
	JB_String* _tmPf3 = JB_Msg_Locate(Expected);
	JB_Incr(_tmPf3);
	JB_FS_AppendString(Fs, _tmPf3);
	JB_Decr(_tmPf3);
	JB_FS_AppendString(Fs, JB_LUB[740]);
	JB_String* _tmPf4 = JB_Msg_Locate(Found);
	JB_Incr(_tmPf4);
	JB_FS_AppendString(Fs, _tmPf4);
	JB_Decr(_tmPf4);
	JB_FS_AppendByte(Fs, '\n');
	//;
	//;
	JB_FS_AppendString(Fs, JB_LUB[778]);
	JB_String* _tmPf5 = JB_Msg_plocate(Expected);
	JB_Incr(_tmPf5);
	JB_FS_AppendString(Fs, _tmPf5);
	JB_Decr(_tmPf5);
	JB_FS_AppendByte(Fs, '\n');
	//;
	if (Found) {
		//;
		JB_FS_AppendString(Fs, JB_LUB[779]);
		JB_String* _tmPf6 = JB_Msg_plocate(Found);
		JB_Incr(_tmPf6);
		JB_FS_AppendString(Fs, _tmPf6);
		JB_Decr(_tmPf6);
		JB_FS_AppendByte(Fs, '\n');
		//;
	}
	 else {
		JB_SetRef(Found, Expected);
	}
	JB_String* _tmPf7 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf7);
	JB_Decr(Fs);
	JB_PrintLine(_tmPf7);
	JB_Decr(_tmPf7);
	JB_Msg_Fail(Found, nil);
	JB_Decr(Found);
	return false;
}

int64 SC_ConstifyBitAnd(ASMReg L, ASMReg R) {
	return SC_Reg_Const(L) & SC_Reg_Const(R);
}

int64 SC_ConstifyBitNot(ASMReg L, ASMReg R) {
	return (~SC_Reg_Const(L));
}

int64 SC_ConstifyBitOr(ASMReg L, ASMReg R) {
	return SC_Reg_Const(L) | SC_Reg_Const(R);
}

int64 SC_ConstifyBitSHL(ASMReg L, ASMReg R) {
	return ((uint64)SC_Reg_Const(L)) << ((uint64)SC_Reg_Const(R));
}

int64 SC_ConstifyBitSHR(ASMReg L, ASMReg R) {
	return ((uint64)SC_Reg_Const(L)) >> ((uint64)SC_Reg_Const(R));
}

int64 SC_ConstifyBitSHS(ASMReg L, ASMReg R) {
	return SC_Reg_Const(L) >> SC_Reg_Const(R);
}

int64 SC_ConstifyBitXor(ASMReg L, ASMReg R) {
	return SC_Reg_Const(L) ^ SC_Reg_Const(R);
}

int64 SC_ConstifyBoolMul(ASMReg L, ASMReg R) {
	return ((bool)SC_Reg_Const(L)) * ((uint64)SC_Reg_Const(R));
}

int64 SC_ConstifyFloatDiv(ASMReg L, ASMReg R) {
	if (SC_Reg_FourBytes(L)) {
		return JB_f_AsInt((SC_Reg_F32(L) / SC_Reg_F32(R)));
	}
	return JB_dbl_AsInt((SC_Reg_F64(L) / SC_Reg_F64(R)));
}

int64 SC_ConstifyFloatMod(ASMReg L, ASMReg R) {
	if (SC_Reg_FourBytes(L)) {
		return JB_f_AsInt((std::fmod(SC_Reg_F32(L), SC_Reg_F32(R))));
	}
	 else {
		return JB_dbl_AsInt((std::fmod(SC_Reg_F64(L), SC_Reg_F64(R))));
	}
}

int64 SC_ConstifyFloatMul(ASMReg L, ASMReg R) {
	if (SC_Reg_FourBytes(L)) {
		return JB_f_AsInt((SC_Reg_F32(L) * SC_Reg_F32(R)));
	}
	return JB_dbl_AsInt((SC_Reg_F64(L) * SC_Reg_F64(R)));
}

int64 SC_ConstifyFloatPlus(ASMReg L, ASMReg R) {
	if (SC_Reg_FourBytes(L)) {
		float Rf = SC_Reg_F32(R);
		float Lf = SC_Reg_F32(L);
		if (SC_Reg_SyntaxIs(L, kSC__Reg_Alternate)) {
			Lf = (Lf - Rf);
		}
		 else {
			Lf = (Lf + Rf);
		}
		return JB_f_AsInt(Lf);
	}
	 else {
		Float64 Rf = SC_Reg_F64(R);
		Float64 Lf = SC_Reg_F64(L);
		if (SC_Reg_SyntaxIs(L, kSC__Reg_Alternate)) {
			Lf = (Lf - Rf);
		}
		 else {
			Lf = (Lf + Rf);
		}
		return JB_dbl_AsInt(Lf);
	}
}

int64 SC_ConstifyIntDiv(ASMReg L, ASMReg R) {
	if (SC_Reg_FourBytes(L)) {
		if (SC_Reg_Signed(L)) {
			return ((int)SC_Reg_Const(L)) / ((int)SC_Reg_Const(R));
		}
		return ((uint)SC_Reg_Const(L)) / ((uint)SC_Reg_Const(R));
	}
	if (SC_Reg_Signed(L)) {
		return ((int64)SC_Reg_Const(L)) / ((int64)SC_Reg_Const(R));
	}
	return ((uint64)SC_Reg_Const(L)) / ((uint64)SC_Reg_Const(R));
}

int64 SC_ConstifyIntMod(ASMReg L, ASMReg R) {
	if (SC_Reg_FourBytes(L)) {
		if (SC_Reg_Signed(L)) {
			return ((int)SC_Reg_Const(L)) % ((int)SC_Reg_Const(R));
		}
		return ((uint)SC_Reg_Const(L)) % ((uint)SC_Reg_Const(R));
	}
	if (SC_Reg_Signed(L)) {
		return ((int64)SC_Reg_Const(L)) % ((int64)SC_Reg_Const(R));
	}
	return ((uint64)SC_Reg_Const(L)) % ((uint64)SC_Reg_Const(R));
}

int64 SC_ConstifyIntMul(ASMReg L, ASMReg R) {
	if (SC_Reg_FourBytes(L)) {
		return ((int)SC_Reg_Const(L)) * ((int)SC_Reg_Const(R));
	}
	return ((int64)SC_Reg_Const(L)) * ((int64)SC_Reg_Const(R));
}

int64 SC_ConstifyIntPlus(ASMReg L, ASMReg R) {
	if (SC_Reg_SyntaxIs(L, kSC__Reg_Alternate)) {
		return SC_Reg_Const(L) - SC_Reg_Const(R);
	}
	return SC_Reg_Const(L) + SC_Reg_Const(R);
}

bool SC_CppRefTable_disowns(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	return false;
}

bool SC_CppRefTable_disturbs(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	return false;
}

void SC_Create_JeeboxTest(Message* Msg) {
	if (true) {
		JB_ErrorReceiver* __varf1 = JB_Rec_Constructor(nil);
		JB_Incr(__varf1);
		JB_ErrorReceiver* _usingf0 = JB_Rec_SyntaxUsing(__varf1);
		JB_Incr(_usingf0);
		JB_File* F = SC_Comp__InputFile(JB_LUB[1787], nil);
		JB_Incr(F);
		if (F == nil) {
			JB_Str_Fail(JB_LUB[1788]);
			JB_Decr(F);
			JB_Decr(_usingf0);
			JB_Decr(__varf1);
			return;
		}
		JB_String* S = JB_File_ReadAll(F, 134217728, true);
		JB_Incr(S);
		JB_Decr(F);
		if (JB_Msg_SyntaxEquals(Msg, JB_LUB[1789], true)) {
			//using;
			MessagePosition _usingf2 = ((MessagePosition){});
			JB_Msg_SyntaxUsing(Msg, (&_usingf2));
			JB_SetRef(S, JB_Str_Digest(S));
			JB_MsgPos_SyntaxUsingComplete((&_usingf2), Msg);
			JB_MsgPos_Destructor((&_usingf2));
		}
		JB_Msg_BecomeStr(Msg, kJB_SyxStr, S);
		JB_Decr(S);
		JB_Rec_SyntaxUsingComplete(_usingf0, __varf1);
		JB_Decr(__varf1);
		JB_Decr(_usingf0);
	}
}

SCDecl* SC_CustomFuncOp(Message* Exp, SCOperator* Comp, SCNode* Name_space, Message* RN) {
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Exp, (&_usingf0));
	JB_Msg_BecomeStr(Exp, kJB_SyxDot, Comp->FuncName);
	Message* Prm = (JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Prm, RN);
	JB_Tree_SyntaxAppend(Exp, Prm);
	JB_Tree_Remove(((Message*)JB_Tree_Second(Exp)));
	SCDecl* Ty = SC_TypeOfExpr(Exp, Name_space, nil);
	if (Ty and (RN and (Prm->Obj == SC__Comp_fnAs))) {
		SCClass* Cls = SC_Msg_ObjCls(RN);
		if (Cls) {
			if (!SC_Class_SyntaxIs(Cls, kSC__ClassInfo_HasSubClass)) {
				JB_SetRef(Prm->Obj, SC__Comp_fnFastAs);
			}
			Ty = Cls->TypeNormal;
		}
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Exp);
	JB_MsgPos_Destructor((&_usingf0));
	return Ty;
}

void SC_dbg_decl_layer() {
	JB_MemoryLayer* _tmPf0 = JB_Class_Layer((&SCDeclData));
	JB_Incr(_tmPf0);
	if (!_tmPf0->Obj) {
		if (SC__Imp_Curr) {
		}
	}
	JB_Decr(_tmPf0);
}

SCDecl* SC_DeclOfObjForC(Message* Curr) {
	if (JB_Msg_EqualsSyx(Curr, kJB_SyxFunc, false)) {
		SCFunction* Fnc = SC_Msg_MsgFunc(Curr);
		if (Fnc) {
			return Fnc->ReturnType;
		}
	}
	JB_Object* Obj = Curr->Obj;
	if (JB_Object_FastIsa(Obj, &SCDeclData)) {
		return ((SCDecl*)Obj);
	}
	if (JB_Object_FastIsa(Obj, &SCClassData)) {
		return ((SCClass*)Obj)->TypeNormal;
	}
	if (JB_Object_FastIsa(Obj, &SCFunctionData)) {
		return ((SCFunction*)Obj)->ReturnType;
	}
	if (JB_Object_FastIsa(Obj, &SCModuleData)) {
		SCClass* Cls = ((SCModule*)Obj)->Cls;
		if (Cls) {
			return Cls->ClassType;
		}
	}
	return nil;
}

Message* SC_DeclsDefault(Message* Def) {
	if (SC_Msg_IsSetRel(Def)) {
		return ((Message*)JB_Ring_Last(Def));
	}
	return nil;
}

Message* SC_DefaultStitch(Message* Default, Message* Dcl) {
	Message* Rz = nil;
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Dcl, (&_usingf0));
	Rz = JB_Msg_Msg(Dcl, kJB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Rz, ((Message*)JB_Tree_Second(Dcl)));
	JB_Msg_AppendSyx(Rz, kJB_SyxOpp, JB_LUB[241]);
	JB_Tree_SyntaxAppend(Rz, Default);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Dcl);
	JB_MsgPos_Destructor((&_usingf0));
	return Rz;
}

SCObject* SC_DollaDolla(Message* Exp, SCNode* Name_space) {
	int Strength = 0;
	Message* Ch = Exp;
	while (JB_Msg_EqualsSyx(Ch, kJB_SyxBRel, false)) {
		JB_String* N = Ch->Name;
		if (JB_Str_Equals(N, JB_LUB[174], false)) {
			(++Strength);
		}
		 else if (!JB_Str_Equals(N, JB_LUB[242], false)) {
			break;
		}
		JB_Msg_BecomeStr(Ch, kJB_SyxBra, JB_LUB[0]);
		Ch = ((Message*)JB_Ring_First(Ch));
	};
	JB_Msg_BecomeStr(Exp, kJB_SyxBra, JB_LUB[0]);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Exp, (&_usingf0));
	Message* Fnc = JB_Str_ParseJbin(((JB_LUB[1395])), 1073741824);
	Message* Prm = ((Message*)JB_Ring_Last(Fnc));
	JB_Tree_SyntaxAppend(Prm, ((Message*)JB_Ring_First(Exp)));
	if (Strength > 0) {
		JB_Msg_AppendNum(Prm, Strength);
	}
	if (JB_Msg_OperatorIn(Exp, kJB_SyxArg)) {
		Message* Say = JB_Str_ParseJbin(((JB_LUB[1396])), 1073741824);
		JB_Tree_SyntaxAppend(((Message*)JB_Ring_Last(Say)), Fnc);
		Fnc = Say;
	}
	JB_Tree_SyntaxAppend(Exp, Fnc);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Exp);
	SCDecl* _tmPf1 = SC_TypeOfExpr(Exp, Name_space, nil);
	JB_Incr(_tmPf1);
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCNode* SC_DontRemove(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	return SC__Comp_program;
}

SCDecl* SC_DoOpCompare(Message* Exp, SCDecl* Lc, SCDecl* Rc, SCOperator* Comp, SCNode* Name_space) {
	SCDecl* Rz = nil;
	JB_Incr(Rz);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Exp, (&_usingf0));
	Message* Dot = (JB_Syx_Msg(kJB_SyxDot, JB_LUB[0]));
	JB_Incr(Dot);
	Message* _tmPf2 = ((Message*)JB_Ring_First(Exp));
	JB_Incr(_tmPf2);
	JB_Tree_SyntaxAppend(Dot, _tmPf2);
	JB_Decr(_tmPf2);
	Message* _tmPf3 = ({
		Message* __imPf1 = (JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0]));
		JB_Incr(__imPf1);
		Message* _tmPf4 = ((Message*)JB_Ring_Last(Exp));
		JB_Incr(_tmPf4);
		JB_Tree_SyntaxAppend(__imPf1, _tmPf4);
		JB_Decr(_tmPf4);
		JB_String* _tmPf6 = SC_Opp_CaseAwareStr(Comp);
		JB_Incr(_tmPf6);
		Message* _tmPf5 = JB_Syx_Msg(kJB_SyxThg, _tmPf6);
		JB_Incr(_tmPf5);
		JB_Decr(_tmPf6);
		JB_Tree_SyntaxAppend(__imPf1, (_tmPf5));
		JB_Decr(_tmPf5);
		JB_SafeDecr(__imPf1);
		 __imPf1;
	});
	JB_Incr(_tmPf3);
	JB_Tree_SyntaxAppend(Dot, _tmPf3);
	JB_Decr(_tmPf3);
	(JB_Ring_FirstSet(Exp, Dot));
	if (SC_Opp_SyntaxIs(Comp, kSC__OpMode_EqualOrNot)) {
		Message* _tmPf7 = ((Message*)JB_Ring_Last(Exp));
		JB_Incr(_tmPf7);
		JB_Tree_Remove(_tmPf7);
		JB_Decr(_tmPf7);
		JB_SetRef(Dot->Name, JB_LUB[1630]);
		if ((JB_Str_Equals(Comp->CompOp, JB_LUB[1204], false))) {
			JB_Msg_BecomeStr(Exp, kJB_SyxBRel, JB_LUB[174]);
			JB_Tree_SyntaxAppend(Exp, Dot);
		}
		 else {
			JB_Msg_BecomeStr(Exp, kJB_SyxBra, JB_LUB[0]);
		}
	}
	 else {
		JB_SetRef(Dot->Name, JB_LUB[1631]);
		Message* _tmPf8 = ((Message*)JB_Ring_Last(Exp));
		JB_Incr(_tmPf8);
		JB_SetRef(_tmPf8->Name, Comp->CompOp);
		JB_Decr(_tmPf8);
		JB_Msg_AppendSyx(Exp, kJB_SyxNum, Comp->CompParam);
	}
	JB_SetRef(Rz, SC_TypeOfExpr(Dot, Name_space, nil));
	JB_Decr(Dot);
	if (!Rz) {
		JB_Error* _tmPf9 = JB_Rec_LastError(JB_StdErr);
		JB_Incr(_tmPf9);
		if (SC_Err_FromSamePlace(_tmPf9, Exp)) {
			JB_FreeIfDead(JB_Rec_Pop(JB_StdErr));
		}
		JB_Decr(_tmPf9);
		if (((JB_Str_Equals(Comp->Name, JB_LUB[475], false))) and SC_Decl_MiniMatch(Lc, Rc, 0)) {
			if (true) {
				JB_Msg_Fail(Exp, JB_LUB[1632]);
			}
		}
		 else {
			SC_Decl_ExpectFail(Lc, Rc, Exp, nil);
		}
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Exp);
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* JB_EntityTest() {
	JB_String* Replicate = JB_LUB[123];
	JB_Incr(Replicate);
	Dictionary* Repl = JB_Dict_Constructor(nil);
	JB_Incr(Repl);
	(JB_Dict_ValueSet(Repl, JB_LUB[124], JB_LUB[125]));
	JB_MSR_DecodeEntitySet(Repl, true);
	JB_MSR_EscapeCodeSet(Repl, true);
	JB_String* S3 = JB_Str_Unescape(Replicate);
	JB_Incr(S3);
	JB_Decr(S3);
	JB_SetRef(Replicate, JB_Str_MultiReplaceAll(Replicate, Repl, JB_StdErr));
	JB_Decr(Repl);
	JB_String* Jb = JB_LUB[126];
	JB_Incr(Jb);
	JB_Decr(Jb);
	JB_String* _tmPf0 = JB_Str_LowerCase(Replicate);
	JB_Incr(_tmPf0);
	JB_Decr(Replicate);
	JB_String* _tmPf1 = JB_Str_OperatorPlus(_tmPf0, JB_LUB[127]);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCDecl* SC_ExtractDecl(Message* C, SCNode* Name_space, DeclMode Purpose, int Depth) {
	SCDecl* Rz = nil;
	JB_Incr(Rz);
	Syntax F = C->Func;
	if (F == kJB_SyxThg) {
		if (JB_Msg_SyntaxEquals(C, JB_LUB[36], false)) {
			JB_Decr(Rz);
			return SC_TypeVoid;
		}
		JB_Decr(Rz);
		return SC_Comp__FindClassType(C);
	}
	(++Depth);
	if (F == kJB_SyxDecl) {
		Message* _tmPf0 = ((Message*)JB_Ring_First(C));
		JB_Incr(_tmPf0);
		SCDecl* Ty = SC_ExtractDecl(_tmPf0, Name_space, Purpose, Depth);
		JB_Incr(Ty);
		JB_Decr(_tmPf0);
		if (Ty) {
			if (Purpose == kSC__DeclMode_ProtoParam) {
				Message* _tmPf2 = SC_Msg_DeclName(C);
				JB_Incr(_tmPf2);
				JB_String* _tmPf1 = JB_Msg_Name(_tmPf2);
				JB_Incr(_tmPf1);
				JB_Decr(_tmPf2);
				(SC_Decl_NameSet(Ty, _tmPf1));
				JB_Decr(_tmPf1);
			}
		}
		JB_Decr(Rz);
		JB_SafeDecr(Ty);
		return Ty;
	}
	if (F == kJB_SyxEmb) {
		SC_Msg_ExpectEmpty(C);
		JB_Decr(Rz);
		return nil;
	}
	if (F == kJB_SyxBra) {
		Message* _tmPf3 = ((Message*)JB_Ring_First(C));
		JB_Incr(_tmPf3);
		SCDecl* _tmPf21 = SC_ExtractDecl(_tmPf3, Name_space, Purpose, Depth);
		JB_Incr(_tmPf21);
		JB_Decr(_tmPf3);
		JB_Decr(Rz);
		JB_SafeDecr(_tmPf21);
		return _tmPf21;
	}
	if ((F == kJB_SyxSThg) and ((JB_Msg_SyntaxEquals(C, JB_LUB[26], false)))) {
		JB_Decr(Rz);
		return SC_Base_RequireContained(Name_space, C);
	}
	if ((F == kJB_SyxList) and (!JB_Ring_HasChildren(C))) {
		Message* P = SC_Msg_UpToType(C);
		JB_Incr(P);
		if (P) {
			Message* _tmPf4 = ((Message*)JB_Ring_First(P));
			JB_Incr(_tmPf4);
			SCDecl* _tmPf20 = SC_TypeOfExpr(_tmPf4, Name_space, nil);
			JB_Incr(_tmPf20);
			JB_Decr(_tmPf4);
			JB_Decr(P);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf20);
			return _tmPf20;
		}
		JB_Decr(P);
	}
	if ((JB_Msg_EqualsSyx(C, kJB_SyxAcc, false))) {
		Message* Prms = ((Message*)JB_Tree_Second(C));
		JB_Incr(Prms);
		if (JB_Ring_HasChildren(Prms)) {
			Message* _tmPf5 = ((Message*)JB_Ring_First(C));
			JB_Incr(_tmPf5);
			SCDecl* R = SC_ExtractDecl(_tmPf5, Name_space, Purpose, Depth);
			JB_Incr(R);
			JB_Decr(_tmPf5);
			if (!R) {
				JB_Decr(R);
				JB_Decr(Prms);
				JB_Decr(Rz);
				return nil;
			}
			SCDecl* _tmPf19 = SC_Decl_ExtractAmount(R, Prms);
			JB_Incr(_tmPf19);
			JB_Decr(R);
			JB_Decr(Prms);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf19);
			return _tmPf19;
		}
		JB_Decr(Prms);
		F = kJB_SyxRel;
		C->Func = F;
		Message* Fi = ((Message*)JB_Ring_First(C));
		JB_Incr(Fi);
		JB_Tree_Clear(C);
		JB_Msg_AppendSyx(C, kJB_SyxThg, JB_LUB[1284]);
		JB_Msg_AppendSyx(C, kJB_SyxOpp, JB_LUB[1125]);
		JB_Tree_SyntaxAppend(C, Fi);
		JB_Decr(Fi);
	}
	if (F == kJB_SyxFunc) {
		Message* _tmPf6 = ((Message*)JB_Ring_First(C));
		JB_Incr(_tmPf6);
		SCDecl* R = SC_ExtractDecl(_tmPf6, Name_space, Purpose, Depth);
		JB_Incr(R);
		JB_Decr(_tmPf6);
		if (!R) {
			JB_Decr(R);
			JB_Decr(Rz);
			return nil;
		}
		Message* _tmPf7 = ((Message*)JB_Ring_Last(C));
		JB_Incr(_tmPf7);
		SCDecl* _tmPf18 = SC_Decl_RefineDecl(R, _tmPf7);
		JB_Incr(_tmPf18);
		JB_Decr(R);
		JB_Decr(_tmPf7);
		JB_Decr(Rz);
		JB_SafeDecr(_tmPf18);
		return _tmPf18;
	}
	if ((F == kJB_SyxARel) or (F == kJB_SyxBRel)) {
		Message* _tmPf8 = ((Message*)JB_Ring_First(C));
		JB_Incr(_tmPf8);
		SCDecl* R = SC_ExtractDecl(_tmPf8, Name_space, Purpose, Depth);
		JB_Incr(R);
		JB_Decr(_tmPf8);
		if (!R) {
			JB_Decr(R);
			JB_Decr(Rz);
			return nil;
		}
		if (JB_Msg_SyntaxEquals(C, JB_LUB[50], false)) {
			SCDecl* _tmPf13 = SC_Decl_MakeDataObject(R, Name_space, Purpose);
			JB_Incr(_tmPf13);
			JB_Decr(R);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf13);
			return _tmPf13;
		}
		if ((JB_Msg_SyntaxEquals(C, JB_LUB[48], false))) {
			SCDecl* _tmPf14 = SC_Decl_GetAddress(R, Purpose);
			JB_Incr(_tmPf14);
			JB_Decr(R);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf14);
			return _tmPf14;
		}
		if ((JB_Msg_SyntaxEquals(C, JB_LUB[603], false))) {
			SCDecl* _tmPf15 = SC_Decl_MakeNewOptional(R);
			JB_Incr(_tmPf15);
			JB_Decr(R);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf15);
			return _tmPf15;
		}
		if ((JB_Msg_SyntaxEquals(C, JB_LUB[174], false))) {
			if (SC_Decl_StatedReal(R) and (!JB_Msg_SyntaxIs(C, kJB__MsgParseFlags_Inserted))) {
				(JB_Msg_SyntaxProblem(C, JB_LUB[1714]));
			}
			SCDecl* _tmPf16 = SC_Decl_MakeNewReal(R);
			JB_Incr(_tmPf16);
			JB_Decr(R);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf16);
			return _tmPf16;
		}
		if ((JB_Msg_SyntaxEquals(C, JB_LUB[185], false))) {
			SCDecl* _tmPf17 = SC_Decl_MakeBorrowed(R, JB_FreeIfDead(SC_Msg_UpToType(C)) != nil);
			JB_Incr(_tmPf17);
			JB_Decr(R);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf17);
			return _tmPf17;
		}
		if (((JB_String*)JB_Str_Exists(C->Name))) {
			if (true) {
				JB_Msg_Fail(C, nil);
			}
		}
		JB_Decr(Rz);
		JB_SafeDecr(R);
		return R;
	}
	if (F == kJB_SyxName) {
		C->Func = kJB_SyxThg;
		SCDecl* D = SC_ExtractDecl(C, Name_space, Purpose, Depth);
		JB_Incr(D);
		if (!D) {
			JB_Decr(D);
			JB_Decr(Rz);
			return nil;
		}
		(SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_CompilerCreated, true));
		JB_Decr(Rz);
		JB_SafeDecr(D);
		return D;
	}
	if (F == kJB_SyxArg) {
		Message* _tmPf9 = ((Message*)JB_Ring_First(C));
		JB_Incr(_tmPf9);
		SCDecl* D = SC_ExtractDecl(_tmPf9, Name_space, Purpose, Depth);
		JB_Incr(D);
		JB_Decr(_tmPf9);
		if (!D) {
			JB_Decr(D);
			JB_Decr(Rz);
			return nil;
		}
		(SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_CompilerCreated, true));
		JB_Decr(Rz);
		JB_SafeDecr(D);
		return D;
	}
	if (F == kJB_SyxDot) {
		JB_Decr(Rz);
		return SC_Comp__FindClassType(C);
	}
	JB_SetRef(Rz, SC_Decl_Constructor(nil, SC_TypeVoid_));
	int ErrCount = JB_StdErr->ErrorCount;
	if (F == kJB_SyxArr) {
		Message* Ch = ((Message*)JB_Ring_First(C));
		JB_Incr(Ch);
		if (!Ch) {
			JB_Decr(Ch);
			JB_Decr(Rz);
			return SC_TypeArray->TypeNormal;
		}
		if ((JB_Msg_EqualsSyx(Ch, kJB_SyxItem, false))) {
			JB_Msg_Fail(C, nil);
			JB_Decr(Ch);
			JB_Decr(Rz);
			return nil;
		}
		SCDecl* Dcl = SC_ExtractDecl(Ch, Name_space, Purpose, Depth);
		JB_Incr(Dcl);
		JB_Decr(Ch);
		if (Dcl) {
			JB_SetRef(Rz->Contains, SC_Decl_MakeContainedOptional(Dcl));
			JB_SetRef(Rz->Type, SC_TypeArray);
		}
		JB_Decr(Dcl);
	}
	 else if (F == kJB_SyxAdj) {
		(JB_Msg_SyntaxProblem(C, JB_LUB[1715]));
		Message* _tmPf10 = ((Message*)JB_Ring_First(C));
		JB_Incr(_tmPf10);
		Message* _tmPf11 = ((Message*)JB_Ring_Last(C));
		JB_Incr(_tmPf11);
		if (!SC_Decl_LoadContained(Rz, _tmPf10, _tmPf11, Name_space, Purpose)) {
			JB_Decr(_tmPf11);
			JB_Decr(_tmPf10);
			JB_Decr(Rz);
			return nil;
		}
		JB_Decr(_tmPf10);
		JB_Decr(_tmPf11);
	}
	 else if (F == kJB_SyxRel) {
		Message* Op = JB_Msg_NeedSyxInt(C, kJB_SyxOpp, 1);
		JB_Incr(Op);
		if (!Op) {
			JB_Decr(Op);
			JB_Decr(Rz);
			return nil;
		}
		JB_Msg_Expect(Op, kJB_SyxOpp, JB_LUB[1125]);
		JB_Decr(Op);
		Message* Contained = JB_Msg_NeedSyxInt(C, kJB_SyxNil, 2);
		JB_Incr(Contained);
		if (!Contained) {
			JB_Decr(Contained);
			JB_Decr(Rz);
			return nil;
		}
		Message* _tmPf12 = ((Message*)JB_Ring_First(C));
		JB_Incr(_tmPf12);
		if (!SC_Decl_LoadContained(Rz, Contained, _tmPf12, Name_space, Purpose)) {
			JB_Decr(_tmPf12);
			JB_Decr(Contained);
			JB_Decr(Rz);
			return nil;
		}
		JB_Decr(Contained);
		JB_Decr(_tmPf12);
	}
	 else if (ErrCount == JB_StdErr->ErrorCount) {
		if (true) {
			JB_Msg_Fail(C, nil);
		}
	}
	SC_Decl_MakeContainedObject(Rz, C);
	if (ErrCount != JB_StdErr->ErrorCount) {
		JB_SetRef(Rz, nil);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

void fdb(Array* R) {
	//visible;
	{
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(R, _if0));
			if (F == nil) {
				break;
			}
			JB_PrintLine(F->ExportName);
			(++_if0);
		};
	};
}

Message* SC_FindBytePos(Message* Node) {
	Message* First = SC_FindBytePosSub(Node);
	JB_Incr(First);
	if (First) {
		JB_SafeDecr(First);
		return First;
	}
	JB_Decr(First);
	Message* _tmPf0 = ((Message*)JB_Ring_Parent(Node));
	JB_Incr(_tmPf0);
	Message* Msg = SC_FindBytePosSub(_tmPf0);
	JB_Incr(Msg);
	JB_Decr(_tmPf0);
	if (Msg) {
		JB_SafeDecr(Msg);
		return Msg;
	}
	JB_Decr(Msg);
	SCFunction* Fn = SC_Msg_MsgOwningFunc(Node);
	JB_Incr(Fn);
	if (Fn) {
		Message* _tmPf1 = SC_FindBytePosSub(Fn->Source);
		JB_Incr(_tmPf1);
		JB_Decr(Fn);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	JB_Decr(Fn);
	return nil;
}

Message* SC_FindBytePosSub(Message* Node) {
	if ((!Node) or JB_Msg_HasPosition(Node)) {
		return Node;
	}
	{
		Message* M = Node;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Node));
		while ((M) and (M != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(M));
			if (JB_Msg_HasPosition(M)) {
				return M;
			}
			M = _N_f2;
		};
		;
	}
	;
	return nil;
}

ASMReg SC_fn_asm_table_LIST(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	return ((ASMReg)0);
}

bool SC_FuncLinkageTable_cpp_part(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	JB_FreeIfDead(SC_Base__LoadCppPart(Node, Name_space, Node));
	return false;
}

bool SC_FuncLinkageTable_cpp_wrapper(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	return false;
}

bool SC_FuncLinkageTable_ignore(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	return false;
}

bool SC_FuncLinkageTable_inline(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	return false;
}

bool SC_FuncLinkageTable_visible(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	return false;
}

bool SC_FuncPreReader_description(SCFunction* Self, Message* Msg) {
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Disabled)) {
		JB_Msg_Fail(Msg, JB_LUB[1101]);
		return nil;
	}
	SC_SCBetterNode_ReadDescription(Self, Msg);
	return false;
}

bool SC_FuncPreReader_disabled(SCFunction* Self, Message* Msg) {
	(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_Disabled, true));
	JB_SetRef(Self->Description, JB_LUB[1027]);
	Message* S = ((Message*)JB_Ring_First(Msg));
	if (S) {
		JB_Msg_ExpectString(S);
		JB_SetRef(Self->Description, S->Name);
	}
	return false;
}

bool SC_FuncPreReader_nil(SCFunction* Self, Message* Msg) {
	Message* F = JB_Msg_NeedSyx(Msg, kJB_SyxThg);
	if (!F) {
		return nil;
	}
	if (JB_Msg_SyntaxEquals(F, JB_LUB[180], true)) {
		SC_Func_NilSelff(Self, Msg, kSC__NilState_Optional);
	}
	 else if (JB_Msg_SyntaxEquals(F, JB_LUB[1102], true)) {
		SC_Func_MakeNilChecker(Self, Msg);
	}
	 else if (JB_Msg_SyntaxEquals(F, JB_LUB[1103], true)) {
		SC_Func_MakeNilChecker(Self, Msg);
		(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_HidesProperties, true));
		(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_Inline, true));
		(SC_SCObject_IsVisibleSet(Self, true));
	}
	 else {
		if (true) {
			JB_Msg_Fail(F, nil);
		}
	}
	return false;
}

bool SC_FuncPreReader_numeric(SCFunction* Self, Message* Msg) {
	Message* F = ((Message*)JB_Ring_First(Msg));
	if (F) {
		if (true) {
			JB_Msg_Fail(F, nil);
		}
	}
	(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_NumberCreator, true));
	return false;
}

bool SC_FuncPreReader_opt(SCFunction* Self, Message* Msg) {
	Message* F = JB_Msg_NeedSyx(Msg, kJB_SyxThg);
	if (F) {
		if (JB_Msg_SyntaxEquals(F, JB_LUB[1028], true)) {
			Message* Min = JB_Msg_NextOf(F, kJB_SyxNum);
			if (Min) {
				Self->MinOpt = JB_Msg_Int(Min, 0);
			}
		}
		 else {
			JB_Msg_ExpectLast(F, JB_LUB[0]);
			if (JB_Msg_SyntaxEquals(F, JB_LUB[1029], true)) {
				(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_NotRefCounted, true));
			}
			 else if (JB_Msg_SyntaxEquals(F, JB_LUB[1030], true)) {
				(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_Inline, true));
			}
			 else {
				if (true) {
					JB_Msg_Fail(F, nil);
				}
			}
		}
	}
	return false;
}

bool SC_FuncPreReader_real(SCFunction* Self, Message* Msg) {
	Message* F = JB_Msg_NeedSyx(Msg, kJB_SyxThg);
	if (!F) {
		return nil;
	}
	if (JB_Msg_SyntaxEquals(F, JB_LUB[180], true)) {
		SC_Func_NilSelff(Self, Msg, kSC__NilState_Real);
	}
	 else {
		if (true) {
			JB_Msg_Fail(F, nil);
		}
	}
	return false;
}

bool SC_FuncPreReader_todo(SCFunction* Self, Message* Msg) {
	JB_Msg_ExpectLast(JB_Msg_NeedSyx(Msg, kJB_SyxNil), JB_LUB[0]);
	JB_Array_SyntaxAppend(SC__Comp_TodoList, Msg);
	return false;
}

SortComparison SC_GlobalsSorter(SCDecl* Self, SCDecl* B) {
	SortComparison Rz = ((SortComparison)0);
	Rz = ((SortComparison)(SC_Decl_CArraySize(B) - SC_Decl_CArraySize(Self)));
	if (!Rz) {
		Rz = ((SortComparison)((B->Type == SC_TypeJBClass) - (Self->Type == SC_TypeJBClass)));
	}
	if (!Rz) {
		Rz = ((SortComparison)JB_Str_CompareStr(B->Name, Self->Name, true));
	}
	return Rz;
}

int JB_Init_() {
	{
		JB_SetRef(SC___AppConfString, JB_LUB[2079]);
		JB_SetRef(JB_StdErr, JB_Rec_Constructor(nil));
		JB_SetRef(JB__JbinHeader, JB_LUB[2080]);
		JB_SetRef(JB__jBinNotJbin, JB_LUB[2081]);
		SC_fn_asm_table[1] = (&SC_ASMType__Arg);
		SC_fn_asm_table[4] = (&SC_ASMType__Decl);
		SC_fn_asm_table[14] = (&SC_ASMType__Num);
		SC_fn_asm_table[17] = (&SC_ASMType__Char);
		SC_fn_asm_table[37] = (&SC_ASMType__DoMath);
		SC_fn_asm_table[10] = (&SC_ASMType__Thg);
		SC_fn_asm_table[31] = (&SC_ASMType__First);
		SC_fn_asm_table[11] = (&SC_ASMType__Sheb);
		SC_fn_asm_table[15] = (&SC_Pac_Str);
		SC_fn_asm_table[32] = (&SC_fn_asm_table_LIST);
		SC_fn_asm_table[25] = (&SC_ASMType__ASMFunction);
		SC_fn_asm_table[23] = (&SC_ASMType__Dot);
		SC_fn_asm_table[29] = (&SC_ASMType__Access);
		SC_fn_asm_table[26] = (&SC_ASMType__BRel);
		SC_fn_asm_table[21] = (&SC_ASMType__ARel);
		SC_fn_asm_table[3] = (&SC_ASMType__TypeCast);
		SC_fn_asm_table[5] = (&SC_ASMType__Unexpected);
		SC_fn_asm_table[(kSC__ASMType_kIf)] = (&SC_Pac_If);
		SC_fn_asm_table[(kSC__ASMType_kWhile)] = (&SC_Pac_While);
		SC_fn_asm_table[(kSC__ASMType_kTern)] = (&SC_Pac_Ternary);
		SC_fn_asm_table[(kSC__ASMType_kContinue)] = (&SC_Pac_Continue);
		SC_fn_asm_table[(kSC__ASMType_kExit)] = (&SC_Pac_Exit);
		SC_fn_asm_table[(kSC__ASMType_kDebugger)] = (&SC_ASMType__Debugger);
		SC_fn_asm_table[(kSC__ASMType_kRejoin)] = (&SC_ASMType__First);
		SC_fn_asm_table[(kSC__ASMType_kReturn)] = (&SC_ASMType__Return);
		SC_fn_asm_table[(kSC__ASMType_kSetRel)] = (&SC_ASMType__SetRel);
		SC_fn_asm_table[(kSC__ASMType_kStatExpr)] = (&SC_ASMType__StatExpr);
		SC_fn_asm_table[(kSC__ASMType_kRefCount)] = (&SC_Pac_RefCount);
		SC_fn_asm_table[(kSC__ASMType_kIgnore)] = (&SC_ASMType__Ignore);
		SC_fn_asm_table[(kSC__ASMType_kFail)] = (&SC_ASMType__Ignore);
		SC_fn_asm_table[63] = (&SC_ASMType__Unexpected);
		//;
		JB_SetRef(SC_C_Letters, JB_Str_CharSetWithBool(JB_LUB[2082], true));
		JB_SetRef(SC_RootCollectTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf0 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCGame3D__Love)));
		JB_Incr(_tmPf0);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[2083], _tmPf0));
		JB_Decr(_tmPf0);
		DTWrap* _tmPf1 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc)));
		JB_Incr(_tmPf1);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[537], _tmPf1));
		JB_Decr(_tmPf1);
		DTWrap* _tmPf2 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc)));
		JB_Incr(_tmPf2);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[2084], _tmPf2));
		JB_Decr(_tmPf2);
		DTWrap* _tmPf3 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc)));
		JB_Incr(_tmPf3);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1014], _tmPf3));
		JB_Decr(_tmPf3);
		DTWrap* _tmPf4 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper)));
		JB_Incr(_tmPf4);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[73], _tmPf4));
		JB_Decr(_tmPf4);
		DTWrap* _tmPf5 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper)));
		JB_Incr(_tmPf5);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1153], _tmPf5));
		JB_Decr(_tmPf5);
		DTWrap* _tmPf6 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper)));
		JB_Incr(_tmPf6);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[72], _tmPf6));
		JB_Decr(_tmPf6);
		DTWrap* _tmPf7 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper)));
		JB_Incr(_tmPf7);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[71], _tmPf7));
		JB_Decr(_tmPf7);
		DTWrap* _tmPf8 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewHelper)));
		JB_Incr(_tmPf8);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1031], _tmPf8));
		JB_Decr(_tmPf8);
		DTWrap* _tmPf9 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewMacro)));
		JB_Incr(_tmPf9);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1873], _tmPf9));
		JB_Decr(_tmPf9);
		DTWrap* _tmPf10 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCThe__NewInsertion)));
		JB_Incr(_tmPf10);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[2085], _tmPf10));
		JB_Decr(_tmPf10);
		DTWrap* _tmPf11 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Comp__WrongConf)));
		JB_Incr(_tmPf11);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[2045], _tmPf11));
		JB_Decr(_tmPf11);
		DTWrap* _tmPf12 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_RootCollectTable_crash)));
		JB_Incr(_tmPf12);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1962], _tmPf12));
		JB_Decr(_tmPf12);
		DTWrap* _tmPf13 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Mod__NeuModule)));
		JB_Incr(_tmPf13);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[166], _tmPf13));
		JB_Decr(_tmPf13);
		DTWrap* _tmPf14 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_RootCollectTable_static)));
		JB_Incr(_tmPf14);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1705], _tmPf14));
		JB_Decr(_tmPf14);
		DTWrap* _tmPf15 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCSelector__Neu)));
		JB_Incr(_tmPf15);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1803], _tmPf15));
		JB_Decr(_tmPf15);
		DTWrap* _tmPf16 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NeuClass)));
		JB_Incr(_tmPf16);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[169], _tmPf16));
		JB_Decr(_tmPf16);
		DTWrap* _tmPf17 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCTasks__NewTask)));
		JB_Incr(_tmPf17);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1055], _tmPf17));
		JB_Decr(_tmPf17);
		DTWrap* _tmPf18 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NeuRole)));
		JB_Incr(_tmPf18);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[236], _tmPf18));
		JB_Decr(_tmPf18);
		DTWrap* _tmPf19 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SC_API__NewExportAPI)));
		JB_Incr(_tmPf19);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[2086], _tmPf19));
		JB_Decr(_tmPf19);
		DTWrap* _tmPf20 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCGame3D__NeuModel)));
		JB_Incr(_tmPf20);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[2087], _tmPf20));
		JB_Decr(_tmPf20);
		DTWrap* _tmPf21 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewProtoType)));
		JB_Incr(_tmPf21);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1037], _tmPf21));
		JB_Decr(_tmPf21);
		DTWrap* _tmPf22 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewRender)));
		JB_Incr(_tmPf22);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1106], _tmPf22));
		JB_Decr(_tmPf22);
		DTWrap* _tmPf23 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Imp__DoImport))));
		JB_Incr(_tmPf23);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[561], _tmPf23));
		JB_Decr(_tmPf23);
		DTWrap* _tmPf24 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_InbuiltShellArgs__Collect)));
		JB_Incr(_tmPf24);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[2088], _tmPf24));
		JB_Decr(_tmPf24);
		DTWrap* _tmPf25 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__LoadSyntax)));
		JB_Incr(_tmPf25);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[544], _tmPf25));
		JB_Decr(_tmPf25);
		DTWrap* _tmPf26 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefs__Linkage)));
		JB_Incr(_tmPf26);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[237], _tmPf26));
		JB_Decr(_tmPf26);
		DTWrap* _tmPf27 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NewStruct)));
		JB_Incr(_tmPf27);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[37], _tmPf27));
		JB_Decr(_tmPf27);
		DTWrap* _tmPf28 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NewDataType)));
		JB_Incr(_tmPf28);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[168], _tmPf28));
		JB_Decr(_tmPf28);
		DTWrap* _tmPf29 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__StoreExtend)));
		JB_Incr(_tmPf29);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1895], _tmPf29));
		JB_Decr(_tmPf29);
		DTWrap* _tmPf30 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__StoreExtendModule)));
		JB_Incr(_tmPf30);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[238], _tmPf30));
		JB_Decr(_tmPf30);
		DTWrap* _tmPf31 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_RootCollectTable_extends)));
		JB_Incr(_tmPf31);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[2089], _tmPf31));
		JB_Decr(_tmPf31);
		DTWrap* _tmPf32 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NeuMain)));
		JB_Incr(_tmPf32);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[7], _tmPf32));
		JB_Decr(_tmPf32);
		DTWrap* _tmPf33 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NeuLibrary)));
		JB_Incr(_tmPf33);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1108], _tmPf33));
		JB_Decr(_tmPf33);
		DTWrap* _tmPf34 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove))));
		JB_Incr(_tmPf34);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[467], _tmPf34));
		JB_Decr(_tmPf34);
		DTWrap* _tmPf35 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Base__LoadCppPart))));
		JB_Incr(_tmPf35);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1111], _tmPf35));
		JB_Decr(_tmPf35);
		DTWrap* _tmPf36 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__ConstantCollector))));
		JB_Incr(_tmPf36);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1933], _tmPf36));
		JB_Decr(_tmPf36);
		DTWrap* _tmPf37 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__ConstantCollector))));
		JB_Incr(_tmPf37);
		(JB_Dict_ValueSet(SC_RootCollectTable, JB_LUB[1079], _tmPf37));
		JB_Decr(_tmPf37);
		JB_SetRef(SC_ClsCollectTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf38 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewConstructor)));
		JB_Incr(_tmPf38);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[949], _tmPf38));
		JB_Decr(_tmPf38);
		DTWrap* _tmPf39 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewDestructor)));
		JB_Incr(_tmPf39);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[141], _tmPf39));
		JB_Decr(_tmPf39);
		DTWrap* _tmPf40 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewRender)));
		JB_Incr(_tmPf40);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1106], _tmPf40));
		JB_Decr(_tmPf40);
		DTWrap* _tmPf41 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc)));
		JB_Incr(_tmPf41);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[537], _tmPf41));
		JB_Decr(_tmPf41);
		DTWrap* _tmPf42 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc)));
		JB_Incr(_tmPf42);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[2084], _tmPf42));
		JB_Decr(_tmPf42);
		DTWrap* _tmPf43 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewHider)));
		JB_Incr(_tmPf43);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1032], _tmPf43));
		JB_Decr(_tmPf43);
		DTWrap* _tmPf44 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc)));
		JB_Incr(_tmPf44);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1014], _tmPf44));
		JB_Decr(_tmPf44);
		DTWrap* _tmPf45 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewMacro)));
		JB_Incr(_tmPf45);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1873], _tmPf45));
		JB_Decr(_tmPf45);
		DTWrap* _tmPf46 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewHelper)));
		JB_Incr(_tmPf46);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1031], _tmPf46));
		JB_Decr(_tmPf46);
		DTWrap* _tmPf47 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Beh__NewActual)));
		JB_Incr(_tmPf47);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[75], _tmPf47));
		JB_Decr(_tmPf47);
		DTWrap* _tmPf48 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Beh__NewActual)));
		JB_Incr(_tmPf48);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[76], _tmPf48));
		JB_Decr(_tmPf48);
		DTWrap* _tmPf49 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Beh__NewVirtual)));
		JB_Incr(_tmPf49);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[2090], _tmPf49));
		JB_Decr(_tmPf49);
		DTWrap* _tmPf50 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Iter__NeuIter)));
		JB_Incr(_tmPf50);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1872], _tmPf50));
		JB_Decr(_tmPf50);
		DTWrap* _tmPf51 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NeuSyx)));
		JB_Incr(_tmPf51);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1046], _tmPf51));
		JB_Decr(_tmPf51);
		DTWrap* _tmPf52 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper)));
		JB_Incr(_tmPf52);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1153], _tmPf52));
		JB_Decr(_tmPf52);
		DTWrap* _tmPf53 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper)));
		JB_Incr(_tmPf53);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[73], _tmPf53));
		JB_Decr(_tmPf53);
		DTWrap* _tmPf54 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewProtoType)));
		JB_Incr(_tmPf54);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1037], _tmPf54));
		JB_Decr(_tmPf54);
		DTWrap* _tmPf55 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__LoadSyntax)));
		JB_Incr(_tmPf55);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[544], _tmPf55));
		JB_Decr(_tmPf55);
		DTWrap* _tmPf56 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__LoadSyntax)));
		JB_Incr(_tmPf56);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1216], _tmPf56));
		JB_Decr(_tmPf56);
		DTWrap* _tmPf57 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__ProcessAs)));
		JB_Incr(_tmPf57);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[2091], _tmPf57));
		JB_Decr(_tmPf57);
		DTWrap* _tmPf58 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefs__ReadIntoCppRefs)));
		JB_Incr(_tmPf58);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[2092], _tmPf58));
		JB_Decr(_tmPf58);
		DTWrap* _tmPf59 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefs__Linkage)));
		JB_Incr(_tmPf59);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[237], _tmPf59));
		JB_Decr(_tmPf59);
		DTWrap* _tmPf60 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClsCollectTable_description)));
		JB_Incr(_tmPf60);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1791], _tmPf60));
		JB_Decr(_tmPf60);
		DTWrap* _tmPf61 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NewInnerClass)));
		JB_Incr(_tmPf61);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[169], _tmPf61));
		JB_Decr(_tmPf61);
		DTWrap* _tmPf62 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NewInnerClass)));
		JB_Incr(_tmPf62);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[236], _tmPf62));
		JB_Decr(_tmPf62);
		DTWrap* _tmPf63 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCTasks__NewTask)));
		JB_Incr(_tmPf63);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1055], _tmPf63));
		JB_Decr(_tmPf63);
		DTWrap* _tmPf64 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__DoInitAfter))));
		JB_Incr(_tmPf64);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[2093], _tmPf64));
		JB_Decr(_tmPf64);
		DTWrap* _tmPf65 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove))));
		JB_Incr(_tmPf65);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[467], _tmPf65));
		JB_Decr(_tmPf65);
		DTWrap* _tmPf66 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove))));
		JB_Incr(_tmPf66);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1240], _tmPf66));
		JB_Decr(_tmPf66);
		DTWrap* _tmPf67 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove))));
		JB_Incr(_tmPf67);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1111], _tmPf67));
		JB_Decr(_tmPf67);
		DTWrap* _tmPf68 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove))));
		JB_Incr(_tmPf68);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1236], _tmPf68));
		JB_Decr(_tmPf68);
		DTWrap* _tmPf69 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove))));
		JB_Incr(_tmPf69);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1235], _tmPf69));
		JB_Decr(_tmPf69);
		DTWrap* _tmPf70 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove))));
		JB_Incr(_tmPf70);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1154], _tmPf70));
		JB_Decr(_tmPf70);
		DTWrap* _tmPf71 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Class__GetDefault))));
		JB_Incr(_tmPf71);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1239], _tmPf71));
		JB_Decr(_tmPf71);
		DTWrap* _tmPf72 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Class__GetFalse))));
		JB_Incr(_tmPf72);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[32], _tmPf72));
		JB_Decr(_tmPf72);
		DTWrap* _tmPf73 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Class__SetSize))));
		JB_Incr(_tmPf73);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[967], _tmPf73));
		JB_Decr(_tmPf73);
		DTWrap* _tmPf74 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove))));
		JB_Incr(_tmPf74);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[166], _tmPf74));
		JB_Decr(_tmPf74);
		DTWrap* _tmPf75 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__ConstantCollector))));
		JB_Incr(_tmPf75);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1933], _tmPf75));
		JB_Decr(_tmPf75);
		DTWrap* _tmPf76 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__ConstantCollector))));
		JB_Incr(_tmPf76);
		(JB_Dict_ValueSet(SC_ClsCollectTable, JB_LUB[1079], _tmPf76));
		JB_Decr(_tmPf76);
		JB_SetRef(SC_CppRefTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf77 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefTable_disowns)));
		JB_Incr(_tmPf77);
		(JB_Dict_ValueSet(SC_CppRefTable, JB_LUB[1093], _tmPf77));
		JB_Decr(_tmPf77);
		DTWrap* _tmPf78 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefTable_disturbs)));
		JB_Incr(_tmPf78);
		(JB_Dict_ValueSet(SC_CppRefTable, JB_LUB[1092], _tmPf78));
		JB_Decr(_tmPf78);
		DTWrap* _tmPf79 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_CppRefs)));
		JB_Incr(_tmPf79);
		(JB_Dict_ValueSet(SC_CppRefTable, JB_LUB[2094], _tmPf79));
		JB_Decr(_tmPf79);
		JB_SetRef(SC_FuncLinkageTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf80 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_cpp_wrapper)));
		JB_Incr(_tmPf80);
		(JB_Dict_ValueSet(SC_FuncLinkageTable, JB_LUB[1153], _tmPf80));
		JB_Decr(_tmPf80);
		DTWrap* _tmPf81 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_cpp_part)));
		JB_Incr(_tmPf81);
		(JB_Dict_ValueSet(SC_FuncLinkageTable, JB_LUB[1111], _tmPf81));
		JB_Decr(_tmPf81);
		DTWrap* _tmPf82 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_CppRefs)));
		JB_Incr(_tmPf82);
		(JB_Dict_ValueSet(SC_FuncLinkageTable, JB_LUB[2092], _tmPf82));
		JB_Decr(_tmPf82);
		DTWrap* _tmPf83 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_visible)));
		JB_Incr(_tmPf83);
		(JB_Dict_ValueSet(SC_FuncLinkageTable, JB_LUB[1350], _tmPf83));
		JB_Decr(_tmPf83);
		DTWrap* _tmPf84 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_ignore)));
		JB_Incr(_tmPf84);
		(JB_Dict_ValueSet(SC_FuncLinkageTable, JB_LUB[467], _tmPf84));
		JB_Decr(_tmPf84);
		DTWrap* _tmPf85 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_inline)));
		JB_Incr(_tmPf85);
		(JB_Dict_ValueSet(SC_FuncLinkageTable, JB_LUB[1030], _tmPf85));
		JB_Decr(_tmPf85);
		JB_SetRef(SC_ClassLinkageTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf86 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_cpp_wrapper)));
		JB_Incr(_tmPf86);
		(JB_Dict_ValueSet(SC_ClassLinkageTable, JB_LUB[1153], _tmPf86));
		JB_Decr(_tmPf86);
		DTWrap* _tmPf87 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_cpp_part)));
		JB_Incr(_tmPf87);
		(JB_Dict_ValueSet(SC_ClassLinkageTable, JB_LUB[1111], _tmPf87));
		JB_Decr(_tmPf87);
		DTWrap* _tmPf88 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_CppRefs)));
		JB_Incr(_tmPf88);
		(JB_Dict_ValueSet(SC_ClassLinkageTable, JB_LUB[2092], _tmPf88));
		JB_Decr(_tmPf88);
		DTWrap* _tmPf89 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_cpp_class)));
		JB_Incr(_tmPf89);
		(JB_Dict_ValueSet(SC_ClassLinkageTable, JB_LUB[1236], _tmPf89));
		JB_Decr(_tmPf89);
		DTWrap* _tmPf90 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_visible)));
		JB_Incr(_tmPf90);
		(JB_Dict_ValueSet(SC_ClassLinkageTable, JB_LUB[1350], _tmPf90));
		JB_Decr(_tmPf90);
		DTWrap* _tmPf91 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_ignore)));
		JB_Incr(_tmPf91);
		(JB_Dict_ValueSet(SC_ClassLinkageTable, JB_LUB[467], _tmPf91));
		JB_Decr(_tmPf91);
		DTWrap* _tmPf92 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_noearlyfree)));
		JB_Incr(_tmPf92);
		(JB_Dict_ValueSet(SC_ClassLinkageTable, JB_LUB[2095], _tmPf92));
		JB_Decr(_tmPf92);
		DTWrap* _tmPf93 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_sort_properties)));
		JB_Incr(_tmPf93);
		(JB_Dict_ValueSet(SC_ClassLinkageTable, JB_LUB[2096], _tmPf93));
		JB_Decr(_tmPf93);
		DTWrap* _tmPf94 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_tighten)));
		JB_Incr(_tmPf94);
		(JB_Dict_ValueSet(SC_ClassLinkageTable, JB_LUB[2097], _tmPf94));
		JB_Decr(_tmPf94);
		DTWrap* _tmPf95 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_wrapper)));
		JB_Incr(_tmPf95);
		(JB_Dict_ValueSet(SC_ClassLinkageTable, JB_LUB[2098], _tmPf95));
		JB_Decr(_tmPf95);
		DTWrap* _tmPf96 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_stateless)));
		JB_Incr(_tmPf96);
		(JB_Dict_ValueSet(SC_ClassLinkageTable, JB_LUB[2099], _tmPf96));
		JB_Decr(_tmPf96);
		DTWrap* _tmPf97 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_stateful)));
		JB_Incr(_tmPf97);
		(JB_Dict_ValueSet(SC_ClassLinkageTable, JB_LUB[2100], _tmPf97));
		JB_Decr(_tmPf97);
		DTWrap* _tmPf98 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_datatype)));
		JB_Incr(_tmPf98);
		(JB_Dict_ValueSet(SC_ClassLinkageTable, JB_LUB[168], _tmPf98));
		JB_Decr(_tmPf98);
		DTWrap* _tmPf99 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_numeric)));
		JB_Incr(_tmPf99);
		(JB_Dict_ValueSet(SC_ClassLinkageTable, JB_LUB[411], _tmPf99));
		JB_Decr(_tmPf99);
		JB_SetRef(SC_ErrorDelayer, JB_Rec_Constructor(nil));
		JB_SetRef(SC_FuncPreReader, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf100 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_disabled)));
		JB_Incr(_tmPf100);
		(JB_Dict_ValueSet(SC_FuncPreReader, JB_LUB[1790], _tmPf100));
		JB_Decr(_tmPf100);
		DTWrap* _tmPf101 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_todo)));
		JB_Incr(_tmPf101);
		(JB_Dict_ValueSet(SC_FuncPreReader, JB_LUB[702], _tmPf101));
		JB_Decr(_tmPf101);
		DTWrap* _tmPf102 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_numeric)));
		JB_Incr(_tmPf102);
		(JB_Dict_ValueSet(SC_FuncPreReader, JB_LUB[411], _tmPf102));
		JB_Decr(_tmPf102);
		DTWrap* _tmPf103 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_opt)));
		JB_Incr(_tmPf103);
		(JB_Dict_ValueSet(SC_FuncPreReader, JB_LUB[1088], _tmPf103));
		JB_Decr(_tmPf103);
		DTWrap* _tmPf104 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_nil)));
		JB_Incr(_tmPf104);
		(JB_Dict_ValueSet(SC_FuncPreReader, JB_LUB[36], _tmPf104));
		JB_Decr(_tmPf104);
		DTWrap* _tmPf105 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_real)));
		JB_Incr(_tmPf105);
		(JB_Dict_ValueSet(SC_FuncPreReader, JB_LUB[79], _tmPf105));
		JB_Decr(_tmPf105);
		DTWrap* _tmPf106 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_description)));
		JB_Incr(_tmPf106);
		(JB_Dict_ValueSet(SC_FuncPreReader, JB_LUB[1791], _tmPf106));
		JB_Decr(_tmPf106);
		JB_SetRef(SC_fs_tmp_num, JB_FS_Constructor(nil));
		SC_ExprFuncs[37] = ((&SC_TypeOfRel));
		SC_ExprFuncs[26] = ((&SC_TypeOfBRel));
		SC_ExprFuncs[21] = ((&SC_TypeOfARel));
		SC_ExprFuncs[27] = ((&SC_TypeOfAdj));
		SC_ExprFuncs[25] = ((&SC_TypeOfFunc));
		SC_ExprFuncs[29] = ((&SC_TypeOfAccess));
		SC_ExprFuncs[46] = ((&SC_TypeOfMsg));
		SC_ExprFuncs[13] = ((&SC_TypeOfSthg));
		SC_ExprFuncs[23] = ((&SC_TypeOfDot));
		SC_ExprFuncs[22] = ((&SC_TypeOfSyx));
		SC_ExprFuncs[32] = ((&SC_TypeOfList));
		SC_ExprFuncs[34] = ((&SC_TypeOfArr));
		SC_ExprFuncs[1] = ((&SC_TypeOfArgArr));
		SC_ExprFuncs[17] = ((&SC_TypeOfChar));
		SC_ExprFuncs[15] = ((&SC_TypeOfSString));
		SC_ExprFuncs[30] = ((&SC_TypeOfLast));
		SC_ExprFuncs[31] = ((&SC_TypeOfBra));
		SC_ExprFuncs[19] = ((&SC_TypeOfStr));
		SC_ExprFuncs[16] = ((&SC_TypeOfStr));
		SC_ExprFuncs[14] = ((&SC_TypeOfNum));
		SC_ExprFuncs[20] = ((&SC_TypeOfUnit));
		SC_ExprFuncs[10] = ((&SC_TypeOfThg));
		SC_ExprFuncs[7] = ((&SC_TypeOfQues));
		SC_ExprFuncs[24] = ((&SC_TypeOfSDot));
		SC_ExprFuncs[3] = ((&SC_TypeOfType));
		SC_ExprFuncs[2] = ((&SC_TypeOfNothing));
		SC_ExprFuncs[11] = ((&SC_TypeOfNothing));
		SC_ExprFuncs[63] = ((&SC_TypeOfNothing));
		//;
		JB_SetRef(SC_CSHex, JB_Str_CharSetWithBool(JB_LUB[2101], true));
		JB_SetRef(SC_CSNum, JB_Str_CharSetWithBool(JB_LUB[2102], true));
	}
	;
	//// App;
	JB_App__Init_();
	//// Jeebox;
	JB_Constants__Init_();
	//// Terminal;
	JB_Terminal__Init_();
	//// parser;
	JB_Tk__Init_();
	//// zalgo;
	JB_zalgo__Init_();
	//// ErrorSeverity;
	JB_ErrorSeverity__Init_();
	//// CompressionStats;
	JB_MzSt__Init_();
	//// Random;
	JB_Rnd__Init_();
	//// FlowControl;
	JB_Flow__Init_();
	//// Macro;
	JB_Macro__Init_();
	//// File;
	JB_File__Init_();
	//// Error;
	JB_Err__Init_();
	JB_InitCode_();
	return 0;
}

int JB_SP_AppInit() {
	//// ArchonPurger;
	SC_nil__InitCode_();
	//// MaterialsLol;
	SC_MaterialsLol__InitCode_();
	//// SCIterator;
	SC_Iter__InitCode_();
	//// SCFunction;
	SC_Func__InitCode_();
	return JB_SP_AppInitSub_();
}

int JB_SP_AppInitSub_() {
	//// AutoComplete;
	SC_AutoComplete__Init_();
	//// Compiler;
	SC_Comp__Init_();
	//// Feedback;
	SC_FB__Init_();
	//// Interact;
	SC_AC__Init_();
	//// Linkage;
	SC_Linkage__Init_();
	//// Macros;
	SC_Macros__Init_();
	//// Options;
	SC_Options__Init_();
	//// PackMaker;
	SC_PackMaker__Init_();
	//// SCGame3D;
	SC_SCGame3D__Init_();
	//// SCTasks;
	SC_SCTasks__Init_();
	//// SC_Errors;
	SC_Errors__Init_();
	//// SC_Targets;
	SC_SC_Targets__Init_();
	//// SpdAssembler;
	SC_SpdAssembler__Init_();
	//// StringCorrector;
	SC_Crkt__Init_();
	//// TransCompiler;
	SC_Ext__Init_();
	//// VM_Builder;
	SC_VM_Builder__Init_();
	//// ASM;
	SC_ASM__Init_();
	//// NilReason;
	SC_NilReason__Init_();
	//// ArchonPurger;
	SC_nil__Init_();
	//// IsaTester;
	SC_IsaTester__Init_();
	//// ASMState;
	SC_Pac__Init_();
	//// Cpp_Export;
	SC_Cpp__Init_();
	//// SCImport;
	SC_Imp__Init_();
	//// SCOperator;
	SC_Opp__Init_();
	//// SCParamArray;
	SC_PA__Init_();
	//// µForm;
	SC_xC2xB5Form__Init_();
	//// SCNode;
	SC_Base__Init_();
	//// SCFunction;
	SC_Func__Init_();
	//// Instruction;
	SC_Instruction__Init_();
	return 0;
}

int JB_InitCode_() {
	{
	}
	;
	SC__ASM_Forms[1] = (&JB_ASM_U0__Encode);
	SC__ASM_Forms[2] = (&JB_ASM_U1__Encode);
	SC__ASM_Forms[3] = (&JB_ASM_U2__Encode);
	SC__ASM_Forms[4] = (&JB_ASM_U3__Encode);
	SC__ASM_Forms[5] = (&JB_ASM_U4__Encode);
	SC__ASM_Forms[6] = (&JB_ASM_Func__Encode);
	SC__ASM_Forms[7] = (&JB_ASM_ForeignFunc__Encode);
	SC__ASM_Forms[8] = (&JB_ASM_Tail__Encode);
	SC__ASM_Forms[9] = (&JB_ASM_Alloc__Encode);
	SC__ASM_Forms[10] = (&JB_ASM_Jump__Encode);
	SC__ASM_Forms[11] = (&JB_ASM_RotateConst__Encode);
	SC__ASM_Forms[12] = (&JB_ASM_JCmpEq__Encode);
	SC__ASM_Forms[13] = (&JB_ASM_HALT__Encode);
	SC__ASM_Forms[14] = (&JB_ASM_JCmpF__Encode);
	SC__ASM_Forms[15] = (&JB_ASM_JCmpI__Encode);
	SC__ASM_Forms[16] = (&JB_ASM_JCmpK__Encode);
	SC__ASM_Forms[17] = (&JB_ASM_BraBytes__Encode);
	SC__ASM_Forms[18] = (&JB_ASM_Bra__Encode);
	SC__ASM_Forms[19] = (&JB_ASM_Loop__Encode);
	SC__ASM_Forms[20] = (&JB_ASM_Table__Encode);
	SC__ASM_Forms[21] = (&JB_ASM_Read__Encode);
	SC__ASM_Forms[22] = (&JB_ASM_Write__Encode);
	SC__ASM_Forms[23] = (&JB_ASM_MemUtil__Encode);
	SC__ASM_Forms[24] = (&JB_ASM_CNTC__Encode);
	SC__ASM_Forms[25] = (&JB_ASM_BFLD__Encode);
	SC__ASM_Forms[26] = (&JB_ASM_CmpB__Encode);
	SC__ASM_Forms[27] = (&JB_ASM_Convert__Encode);
	SC__ASM_Forms[28] = (&JB_ASM_RET__Encode);
	SC__ASM_Forms[29] = (&JB_ASM_REQ__Encode);
	SC__ASM_Forms[30] = (&JB_ASM_Div__Encode);
	SC__ASM_Forms[31] = (&JB_ASM_Trap__Encode);
	SC__ASM_Forms[32] = (&JB_ASM_Float__Encode);
	SC__ASM_Forms[33] = (&JB_ASM_FloatConst__Encode);
	SC__ASM_Forms[34] = (&JB_ASM_ConstStretchy__Encode);
	SC__ASM_Forms[35] = (&JB_ASM_ConstGlobal__Encode);
	SC__ASM_Forms[36] = (&JB_ASM_AddK__Encode);
	SC__ASM_Forms[37] = (&JB_ASM_Div2__Encode);
	SC__ASM_Forms[38] = (&JB_ASM_Shift__Encode);
	SC__ASM_Forms[39] = (&JB_ASM_Swap__Encode);
	SC__ASM_Forms[40] = (&JB_ASM_RefSetCode__Encode);
	SC__ASM_Forms[41] = (&JB_ASM_RefSet1__Encode);
	SC__ASM_Forms[42] = (&JB_ASM_RefSetApart__Encode);
	SC__ASM_Forms[43] = (&JB_ASM_RefSet2__Encode);
	SC__ASM_Forms[44] = (&JB_ASM_RefSet3__Encode);
	SC__ASM_Forms[45] = (&JB_ASM_RefDecrMem__Encode);
	SC__ASM_Forms[46] = (&JB_ASM_VecMix__Encode);
	SC__ASM_Forms[47] = (&JB_ASM_VecGet__Encode);
	SC__ASM_Forms[48] = (&JB_ASM_VecBuild__Encode);
	SC__ASM_Forms[49] = (&JB_ASM_VecSwizzle__Encode);
	SC__ASM_Forms[50] = (&JB_ASM_VecConst__Encode);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Nil__)), JB_LUB[36], JB_LUB[621], 0);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Arg__)), JB_LUB[622], JB_LUB[623], 1);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Emb__)), JB_LUB[624], JB_LUB[625], 2);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Type__)), JB_LUB[626], JB_LUB[627], 3);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Decl__)), JB_LUB[628], JB_LUB[416], 4);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Tmp__)), JB_LUB[629], JB_LUB[417], 5);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Oat__)), JB_LUB[630], JB_LUB[631], 6);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Ques__)), JB_LUB[632], JB_LUB[633], 7);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Cnj__)), JB_LUB[634], JB_LUB[635], 8);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Opp__)), JB_LUB[636], JB_LUB[420], 9);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Thg__)), JB_LUB[637], JB_LUB[638], 10);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Sheb__)), JB_LUB[639], JB_LUB[640], 11);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_SCnj__)), JB_LUB[641], JB_LUB[642], 12);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_SThg__)), JB_LUB[643], JB_LUB[644], 13);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Num__)), JB_LUB[645], JB_LUB[646], 14);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_SStr__)), JB_LUB[647], JB_LUB[648], 15);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Back__)), JB_LUB[649], JB_LUB[650], 16);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Char__)), JB_LUB[150], JB_LUB[651], 17);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Bin__)), JB_LUB[535], JB_LUB[652], 18);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Str__)), JB_LUB[653], JB_LUB[654], 19);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Unit__)), JB_LUB[655], JB_LUB[0], 20);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_ARel__)), JB_LUB[656], JB_LUB[657], 21);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Name__)), JB_LUB[658], JB_LUB[0], 22);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Dot__)), JB_LUB[659], JB_LUB[660], 23);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_SDot__)), JB_LUB[661], JB_LUB[662], 24);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Func__)), JB_LUB[663], JB_LUB[664], 25);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_BRel__)), JB_LUB[665], JB_LUB[666], 26);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Adj__)), JB_LUB[667], JB_LUB[668], 27);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Badj__)), JB_LUB[669], JB_LUB[670], 28);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Acc__)), JB_LUB[671], JB_LUB[672], 29);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Item__)), JB_LUB[673], JB_LUB[0], 30);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Bra__)), JB_LUB[674], JB_LUB[675], 31);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_List__)), JB_LUB[676], JB_LUB[0], 32);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Prm__)), JB_LUB[677], JB_LUB[678], 33);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Arr__)), JB_LUB[679], JB_LUB[680], 34);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_File__)), JB_LUB[483], JB_LUB[681], 35);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Quot__)), JB_LUB[682], JB_LUB[683], 36);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Rel__)), JB_LUB[684], JB_LUB[685], 37);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_ERel__)), JB_LUB[686], JB_LUB[687], 38);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_TRel__)), JB_LUB[688], JB_LUB[689], 39);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Tril__)), JB_LUB[690], JB_LUB[691], 40);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_pinn__)), JB_LUB[692], JB_LUB[693], 41);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_binn__)), JB_LUB[694], JB_LUB[695], 42);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Ask__)), JB_LUB[696], JB_LUB[0], 43);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Yoda__)), JB_LUB[697], JB_LUB[698], 44);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_SCom__)), JB_LUB[699], JB_LUB[700], 45);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Msg__)), JB_LUB[479], JB_LUB[701], 46);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_Todo__)), JB_LUB[702], JB_LUB[703], 47);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_url__)), JB_LUB[704], JB_LUB[705], 48);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_XAtt__)), JB_LUB[706], JB_LUB[707], 49);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_XML__)), JB_LUB[708], JB_LUB[709], 50);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_XPI__)), JB_LUB[710], JB_LUB[711], 51);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_XCom__)), JB_LUB[712], JB_LUB[713], 52);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_XCDT__)), JB_LUB[714], JB_LUB[715], 53);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_XTxt__)), JB_LUB[716], JB_LUB[717], 54);
	JB_Syx__StdNew(((FP_fpMsgRender)(JB_Msg_max__)), JB_LUB[718], JB_LUB[719], 55);
	//// Jeebox;
	JB_Constants__InitCode_();
	//// parser;
	JB_Tk__InitCode_();
	//// Random;
	JB_Rnd__InitCode_();
	//// FlowControl;
	JB_Flow__InitCode_();
	return 0;
}

SCDecl* SC_IsPointerMath(SCDecl* L, SCDecl* R, SCOperator* Opp, Message* Exp) {
	if (((bool)SC_Opp_SyntaxIs(Opp, kSC__OpMode_Custom))) {
		return nil;
	}
	if (SC_Opp_SyntaxIs(Opp, kSC__OpMode_Addition)) {
		if ((L->PointerCount) and (SC_Decl_IsNumeric(R) == 1)) {
			return L;
		}
		if ((R->PointerCount) and (SC_Decl_IsNumeric(L) == 1)) {
			if (((bool)SC_Opp_SyntaxIs(Opp, kSC__OpMode_MakesSigned))) {
				JB_Msg_Fail(Exp, JB_LUB[1700]);
				return nil;
			}
			return R;
		}
		if ((R->PointerCount) and ((L->PointerCount) and (Opp == SC__Opp_Subtract))) {
			JB_FreeIfDead(SC_Decl_ExpectMatch(L, R, 0, Exp, nil));
			return SC_TypeInt->TypeNormal;
		}
	}
	return nil;
}

void SC_ListFunctionsSub(JB_Object* O, Array* Rz) {
	if (JB_Object_FastIsa(O, &SCDeclData)) {
		O = ((SCDecl*)((SCDecl*)O)->HiderFunc);
	}
	if (JB_Object_FastIsa(O, &SCFunctionData)) {
		{
			SCFunction* F = ((SCFunction*)O);
			while (F) {
				JB_Array_SyntaxAppend(Rz, F);
				F = F->NextFunc;
			};
		};
	}
}

SCDecl* SC_LowlevelArrayTransform(Message* Exp, SCClass* Cls) {
	Message* Ty = ((Message*)JB_Ring_First(Exp));
	JB_Incr(Ty);
	Message* Prms = ((Message*)JB_Ring_NextSib(Ty));
	JB_Incr(Prms);
	if (JB_Msg_EqualsSyx(Prms, kJB_SyxOpp, false)) {
		Message* _tmPf0 = ((Message*)JB_Ring_NextSib(Prms));
		JB_Incr(_tmPf0);
		JB_Tree_SyntaxAppend(Prms, _tmPf0);
		JB_Decr(_tmPf0);
		JB_SetRef(Prms->Name, JB_LUB[0]);
	}
	JB_Msg_BecomeStr(Exp, kJB_SyxDot, JB_LUB[435]);
	JB_SetRef(Ty->Name, JB_LUB[1284]);
	JB_Decr(Ty);
	Prms->Func = kJB_SyxPrm;
	JB_Msg_AppendNum(Prms, SC_Class_CalculateSize(Cls, 0));
	JB_Decr(Prms);
	SCDecl* MemWrapper = SC_TypeOfExpr(Exp, SC__Comp_program, nil);
	JB_Incr(MemWrapper);
	if (!MemWrapper) {
		JB_Decr(MemWrapper);
		return nil;
	}
	JB_SetRef(MemWrapper, SC_Decl_CopyDecl(MemWrapper, false));
	JB_SetRef(MemWrapper->Contains, Cls->TypeOptional);
	JB_SafeDecr(MemWrapper);
	return MemWrapper;
}

Message* SC_MakeDecl(JB_String* Type, JB_String* Name, Message* Value, SCDeclInfo Purpose) {
	Message* Rz = nil;
	Rz = (JB_Syx_Msg(kJB_SyxDecl, JB_LUB[0]));
	Message* F = JB_Msg_Msg(Rz, kJB_SyxArg, JB_LUB[0]);
	if (((JB_String*)JB_Str_Exists(Type))) {
		(JB_Msg_SyntaxIsSet(F, kJB__MsgParseFlags_Style2, true));
		JB_Msg_AppendSyx(F, kJB_SyxThg, Type);
	}
	 else {
		F->Func = kJB_SyxEmb;
	}
	if (!Value) {
		JB_Msg_AppendSyx(Rz, kJB_SyxThg, Name);
		return Rz;
	}
	Message* Rel = JB_Msg_Msg(Rz, kJB_SyxRel, JB_LUB[0]);
	Message* NameMsg = JB_Msg_Msg(Rel, kJB_SyxThg, Name);
	JB_Msg_AppendSyx(Rel, kJB_SyxOpp, JB_LUB[241]);
	JB_Tree_SyntaxAppend(Rel, Value);
	SCDecl* O = ((SCDecl*)JB_Object_FastAs(Value->Obj, &SCDeclData));
	if (O) {
		SCDecl* Dcl = SC_Decl_CopyDecl(O, true);
		Dcl->Info = (Dcl->Info | Purpose);
		(SC_Decl_NameSet(Dcl, Name));
		JB_SetRef(Dcl->Default, Value);
		JB_SetRef(NameMsg->Obj, Dcl);
		JB_SetRef(Rel->Obj, Dcl);
		JB_SetRef(Rz->Obj, Dcl);
		JB_SetRef(F->Obj, Dcl);
	}
	return Rz;
}

Message* SC_MakeDeclOrRel(Message* Into, Message* Namemsg, Message* Value) {
	JB_Incr(Value);
	Message* Rz = nil;
	JB_Incr(Rz);
	if (!Into) {
		JB_Decr(Value);
		JB_Decr(Rz);
		return nil;
	}
	JB_SetRef(Rz, ({
		Message* __imPf0 = (JB_Syx_Msg(kJB_SyxDecl, JB_LUB[0]));
		JB_Incr(__imPf0);
		Message* _tmPf1 = JB_Syx_Msg(kJB_SyxEmb, JB_LUB[0]);
		JB_Incr(_tmPf1);
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf1));
		JB_Decr(_tmPf1);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	if (Value) {
		JB_SetRef(Value, SC_NewEqRelWithMsgMsg(Namemsg, Value));
	}
	 else {
		JB_SetRef(Value, Namemsg);
	}
	JB_Tree_SyntaxAppend(Rz, Value);
	JB_Decr(Value);
	(JB_Ring_FirstSet(Into, Rz));
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_MoveFutureStaticsIn(Message* Msg) {
	if (!Msg) {
		return;
	}
	{
		Message* _LoopSrcf1 = ((Message*)JB_Ring_NextSib(Msg));
		Message* Ch = _LoopSrcf1;
		while (Ch) {
			if (SC_Msg_OperatorIsTmp(Ch, JB_LUB[166])) {
				SC_Msg_AppendAllInto(JB_Msg_Last(Ch, kJB_SyxArg), ((Message*)JB_Ring_Last(Msg)));
			}
			Ch = ((Message*)JB_Ring_NextSib(Ch));
		};
		;
	};
}

Message* SC_NewDeclWithStrStr(JB_String* Type, JB_String* Name) {
	Message* Msg = ((Message*)JB_Ternary(JB_Str_Exists(Name), JB_Syx_OperatorPlus(kJB_SyxThg, Name), nil));
	return SC_NewDeclWithStrMsg(Type, Msg);
}

Message* SC_NewDeclWithStrMsg(JB_String* Type, Message* RelOrName) {
	Message* Rz = nil;
	Rz = JB_Syx_Msg(kJB_SyxDecl, JB_LUB[0]);
	if (JB_Str_Exists(Type)) {
		JB_Msg_AppendSyx(Rz, kJB_SyxThg, Type);
	}
	 else {
		JB_Msg_AppendSyx(Rz, kJB_SyxEmb, JB_LUB[0]);
	}
	JB_Tree_SyntaxAppend(Rz, RelOrName);
	return Rz;
}

Message* SC_NewDeclNum(SCDecl* D, int64 N, JB_String* VarName, bool Shifts) {
	Message* Rz = nil;
	if (!D) {
		D = SC_Decl_Constructor(nil, SC_TypeInt);
	}
	Rz = SC_int64_MsgForConst(N, Shifts);
	JB_SetRef(Rz->Obj, D);
	if ((N < JB_int__Min()) or (N > JB_int__Max())) {
		JB_SetRef(D->Type, SC_TypeInt64);
	}
	(SC_Decl_NameSet(D, VarName));
	(SC_Decl_NumberConstSet(D, N));
	if (JB_Str_Exists(VarName)) {
		JB_SetRef(D->Default, Rz);
	}
	return Rz;
}

Message* SC_NewEqRelWithMsgMsg(Message* L, Message* R) {
	Message* Rz = nil;
	Rz = JB_Syx_Msg(kJB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Rz, L);
	Message* Op = JB_Msg_Msg(Rz, kJB_SyxOpp, JB_LUB[241]);
	JB_SetRef(Op->Obj, SC__Opp_Assigns);
	JB_Tree_SyntaxAppend(Rz, R);
	(SC_Msg_ASMTypeSet(Rz, kSC__ASMType_kSetRel));
	return Rz;
}

Message* SC_NewEqRelWithStrStr(JB_String* L, JB_String* R) {
	return SC_NewEqRelWithMsgMsg(JB_Syx_OperatorPlus(kJB_SyxThg, L), JB_Syx_OperatorPlus(kJB_SyxThg, R));
}

Message* SC_NewFnc(JB_String* Name) {
	Message* Rz = nil;
	Rz = JB_Syx_Msg(kJB_SyxFunc, JB_LUB[0]);
	JB_Msg_AppendSyx(Rz, kJB_SyxThg, Name);
	JB_Msg_AppendSyx(Rz, kJB_SyxPrm, JB_LUB[0]);
	return Rz;
}

Message* SC_NewRejoin() {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[240]));
	(SC_Msg_ASMTypeSet(Rz, kSC__ASMType_kRejoin));
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_NewRel(Message* L, Message* R, JB_String* Op) {
	Message* Rz = nil;
	Rz = JB_Syx_Msg(kJB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Rz, L);
	JB_Msg_AppendSyx(Rz, kJB_SyxOpp, Op);
	JB_Tree_SyntaxAppend(Rz, R);
	return Rz;
}

SCDecl* SC_Or_And_Expansion(SCDecl* LC, SCDecl* RC, Message* Exp, SCNode* Name_space) {
	bool LBool = SC_Decl_MiniMatch(LC, SC_TypeBool->TypeNormal, 0);
	bool RBool = SC_Decl_MiniMatch(RC, SC_TypeBool->TypeNormal, 0);
	if (RBool and LBool) {
		return LC;
	}
	Message* Ch0 = ((Message*)JB_Ring_First(Exp));
	JB_Incr(Ch0);
	Message* _tmPf0 = ((Message*)JB_Ring_NextSib(Ch0));
	JB_Incr(_tmPf0);
	Message* Ch2 = ((Message*)JB_Ring_NextSib(_tmPf0));
	JB_Incr(Ch2);
	JB_Decr(_tmPf0);
	if ((!LBool) and LC->Type->TheBoolFunc) {
		JB_FreeIfDead(SC_Msg_ExpandToBool(Ch0, Name_space));
	}
	JB_Decr(Ch0);
	if ((!RBool) and RC->Type->TheBoolFunc) {
		JB_FreeIfDead(SC_Msg_ExpandToBool(Ch2, Name_space));
	}
	JB_Decr(Ch2);
	return SC_TypeBool->TypeNormal;
}

void JB_Print(JB_String* Data) {
	JB_Str_Print(Data);
}

void JB_Obj_Print(JB_Object* O) {
	JB_String* _tmPf0 = JB_ObjRender(O, nil);
	JB_Incr(_tmPf0);
	JB_Print(_tmPf0);
	JB_Decr(_tmPf0);
}

void JB_PrintLine(JB_String* Data) {
	JB_Str_PrintLine(Data);
}

void SC_RelSetOrExpansion(Message* Exp) {
	Message* L = ((Message*)JB_Ring_First(Exp));
	JB_Incr(L);
	Message* R = ((Message*)JB_Ring_Last(Exp));
	JB_Incr(R);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Exp, (&_usingf0));
	JB_Tree_Clear(Exp);
	SC_Msg_AppendAllInto(L, Exp);
	JB_Decr(L);
	Message* _tmPf2 = ((Message*)JB_Ring_First(R));
	JB_Incr(_tmPf2);
	Message* Cond = JB_Msg_Copy(_tmPf2, nil);
	JB_Incr(Cond);
	JB_Decr(_tmPf2);
	Message* Tmp = (JB_Syx_Msg(kJB_SyxTmp, JB_LUB[175]));
	JB_Incr(Tmp);
	Message* _tmPf3 = SC_Msg_Negate(Cond);
	JB_Incr(_tmPf3);
	JB_Decr(Cond);
	JB_Tree_SyntaxAppend(Tmp, _tmPf3);
	JB_Decr(_tmPf3);
	Message* _tmPf4 = ({
		Message* __imPf1 = (JB_Syx_Msg(kJB_SyxArg, JB_LUB[0]));
		JB_Incr(__imPf1);
		JB_Tree_SyntaxAppend(__imPf1, R);
		JB_SafeDecr(__imPf1);
		 __imPf1;
	});
	JB_Incr(_tmPf4);
	JB_Decr(R);
	JB_Tree_SyntaxAppend(Tmp, _tmPf4);
	JB_Decr(_tmPf4);
	Message* P = ((Message*)JB_Ring_Parent(Exp));
	JB_Incr(P);
	Message* _tmPf5 = ((Message*)JB_Ternary((JB_Msg_EqualsSyx(P, kJB_SyxDecl, false)), P, Exp));
	JB_Incr(_tmPf5);
	JB_Decr(P);
	(JB_Ring_NextSibSet((_tmPf5), Tmp));
	JB_Decr(Tmp);
	JB_Decr(_tmPf5);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Exp);
	JB_MsgPos_Destructor((&_usingf0));
}

SCNode* SC_RootCollectTable_crash(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_String* _tmPf0 = JB_Msg_FirstName(Node);
	JB_Incr(_tmPf0);
	JB_App__Crash(_tmPf0);
	JB_Decr(_tmPf0);
	return nil;
}

SCNode* SC_RootCollectTable_extends(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (true) {
		JB_Msg_Fail(Node, JB_LUB[942]);
	}
	return SC__Comp_program;
}

SCNode* SC_RootCollectTable_static(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (true) {
		JB_Msg_Fail(Node, JB_LUB[943]);
	}
	return nil;
}

SCDecl* SC_SameTypeSub(Message* First, Message* Second, SCNode* Name_space) {
	SCDecl* Rz = nil;
	JB_Incr(Rz);
	SCDecl* T1 = SC_TypeOfExpr(First, Name_space, nil);
	JB_Incr(T1);
	SCDecl* T2 = SC_TypeOfExpr(Second, Name_space, nil);
	JB_Incr(T2);
	if (!(T1 and T2)) {
		JB_Decr(T2);
		JB_Decr(T1);
		JB_Decr(Rz);
		return nil;
	}
	if (SC_Decl_IsNil(T1)) {
		SC_Decl_TypeMatch(T2, T1, kJB_kTypeCastTrue, First);
		JB_Decr(T1);
		JB_Decr(Rz);
		JB_SafeDecr(T2);
		return T2;
	}
	if (SC_Decl_IsNil(T2)) {
		SC_Decl_TypeMatch(T1, T2, kJB_kTypeCastTrue, Second);
		JB_Decr(T2);
		JB_Decr(Rz);
		JB_SafeDecr(T1);
		return T1;
	}
	bool Obj1 = SC_Decl_IsNormalObject(T1);
	bool Obj2 = SC_Decl_IsNormalObject(T2);
	if (Obj1 and Obj2) {
		0;
	}
	 else if ((!Obj1) and (!Obj2)) {
		JB_SetRef(Rz, SC_Decl_Better_Numeric(T1, T2, 0, First, Second));
	}
	 else if (Obj1) {
		JB_SetRef(T2, SC_Decl_NewWrapper(T2, T2));
	}
	 else {
		JB_SetRef(T1, SC_Decl_NewWrapper(T1, T1));
	}
	if (!Rz) {
		JB_SetRef(Rz, SC_Decl_HighestMatch(T1, T2));
		if (!Rz) {
			JB_Decr(T2);
			JB_Decr(Rz);
			JB_SafeDecr(T1);
			return T1;
		}
	}
	if (Rz != T2) {
		JB_FreeIfDead(SC_Decl_CreateSimpleTypeCast(Rz, Second));
	}
	JB_Decr(T2);
	if (Rz != T1) {
		JB_FreeIfDead(SC_Decl_CreateSimpleTypeCast(Rz, First));
	}
	JB_Decr(T1);
	JB_SafeDecr(Rz);
	return Rz;
}

SortComparison SC_SCFuncSorter(SCFunction* Self, SCFunction* B) {
	int fA = ((int)Self->TableId);
	int fB = ((int)B->TableId);
	int D = fB - fA;
	if (D) {
		return ((SortComparison)D);
	}
	return ((SortComparison)(JB_Str_CompareStr(Self->ExportName, B->ExportName, false) <= -1));
}

Message* SC_SettingAProperty(Message* Rel) {
	if (!SC_Msg_IsSetRel(Rel)) {
		return nil;
	}
	Message* F = ((Message*)JB_Ring_First(Rel));
	if (F and SC_Msg_DotType(F)) {
		return F;
	}
	return nil;
}

bool SC_SettingMemory(Message* Rel) {
	if (!SC_Msg_IsSetRel(Rel)) {
		return nil;
	}
	Message* F = ((Message*)JB_Ring_First(Rel));
	if (F) {
		DotUseType D = SC_Msg_SetType(F);
		if (D) {
			return true;
		}
	}
	return false;
}

bool SC_SettingSelfProperty(Message* Rel) {
	Message* Dot = SC_SettingAProperty(Rel);
	if (Dot) {
		return (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(Dot)), JB_LUB[180]));
	}
	return false;
}

SortComparison SC_SimplestFirst(SCDecl* Self, SCDecl* B) {
	int BComp = SC_Decl_Complexity(B) - SC_Decl_Complexity(Self);
	if (BComp) {
		return ((SortComparison)BComp);
	}
	return ((SortComparison)(SC_Decl_CArraySize(B) - SC_Decl_CArraySize(Self)));
}

SortComparison SC_SmallestAlignedFirst(SCDecl* Self, SCDecl* B) {
	return ((SortComparison)(SC_Decl_Alignment(B) - SC_Decl_Alignment(Self)));
}

Array* SC_SortInitOrder(Array* Mods) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	JB_Incr(Rz);
	while (SC_SortInitOrderSub(Mods, Rz)) {
		0;
	};
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_SortInitOrderSub(Array* Mods, Array* Out) {
	SCModule* Failed = nil;
	bool GotAny = false;
	{
		int _if0 = 0;
		while (true) {
			SCModule* M = ((SCModule*)JB_Array_Value(Mods, _if0));
			if (M == nil) {
				break;
			}
			if (!JB_Rec_OK(JB_StdErr)) {
				return nil;
			}
			if (M->Inited) {
			}
			 else if (SC_Mod_TryInit(M, Out)) {
				GotAny = true;
			}
			 else {
				Failed = M;
			}
			(++_if0);
		};
	}
	;
	if (!(GotAny or (!Failed))) {
		JB_Msg_Fail(Failed->Source, JB_LUB[1305]);
		return nil;
	}
	return ((bool)Failed);
}

Message* SC_SpellOutMsg(Message* Type, Message* Exp, Message* Namemsg) {
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Exp, (&_usingf0));
	Message* Result = (JB_Syx_Msg(kJB_SyxDot, JB_LUB[479]));
	JB_Incr(Result);
	JB_Tree_SyntaxAppend(Result, Type);
	Message* _tmPf2 = ({
		Message* __imPf1 = (JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0]));
		JB_Incr(__imPf1);
		JB_Tree_SyntaxAppend(__imPf1, Namemsg);
		JB_SafeDecr(__imPf1);
		 __imPf1;
	});
	JB_Incr(_tmPf2);
	JB_Tree_SyntaxAppend(Result, _tmPf2);
	JB_Decr(_tmPf2);
	JB_String* _tmPf3 = JB_Str_OperatorPlus(JB_LUB[480], Type->Name);
	JB_Incr(_tmPf3);
	JB_Msg_BecomeStr(Type, kJB_SyxThg, _tmPf3);
	JB_Decr(_tmPf3);
	Exp->Func = kJB_SyxBra;
	(JB_Ring_FirstSet(Exp, Result));
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Exp);
	JB_SafeDecr(Result);
	JB_MsgPos_Destructor((&_usingf0));
	return Result;
}

bool SC_TemporalStatements_alert(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (true) {
		JB_Msg_Fail(Node, JB_LUB[954]);
	}
	return false;
}

bool SC_TemporalStatements_break(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (true) {
		JB_Msg_Fail(Node, JB_LUB[955]);
	}
	return false;
}

bool SC_TemporalStatements_crash(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	JB_String* _tmPf0 = JB_Msg_FirstName(Node);
	JB_Incr(_tmPf0);
	JB_App__Crash(_tmPf0);
	JB_Decr(_tmPf0);
	return nil;
}

bool SC_TemporalStatements_do(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (true) {
		JB_Msg_Fail(Node, JB_LUB[956]);
	}
	return false;
}

bool SC_TemporalStatements_ignore(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	(JB_Tree_Remove(Node));
	return false;
}

void SC_Tran_ArgArray(Message* Exp, SCNode* Name_space, SCDecl* Decl) {
	//visible;
	Message* Thg = SC_Msg_IsSetIntoVar(Exp);
	JB_Incr(Thg);
	if ((!Thg)) {
		if (!JB_Msg_OperatorIn(Exp, kJB_SyxSheb)) {
			JB_Msg_Fail(Exp, nil);
		}
		JB_Decr(Thg);
		return;
	}
	Message* Rel = SC_Msg_NiceParent(Exp);
	JB_Incr(Rel);
	JB_Msg_Expect(Rel, kJB_SyxRel, nil);
	Message* Place = SC_Msg_ParentPoint(Rel);
	JB_Incr(Place);
	SCDecl* D = SC_Msg_AsDecl(Thg);
	JB_Incr(D);
	if (D) {
		JB_SetRef(D->Default, nil);
	}
	JB_Decr(D);
	Rel->Func = kJB_SyxSheb;
	(SC_Msg_ASMTypeSet(Rel, kSC__ASMType_kIgnore));
	if (Place == Rel) {
		(JB_Ring_NextSibSet(Rel, Thg));
		JB_SetRef(Place, Thg);
	}
	 else {
		JB_FreeIfDead(SC_Msg_ReplaceWith(Rel, Thg));
		(JB_Ring_NextSibSet(Place, Rel));
		Exp->Func = kJB_SyxStr;
	}
	JB_Decr(Rel);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Exp, (&_usingf0));
	ArgArrayCounter Counter = ((ArgArrayCounter){});
	{
		Message* Itm = ((Message*)JB_Ring_First(Exp));
		JB_Incr(Itm);
		while (Itm) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(Itm));
			JB_Incr(_Nf2);
			Message* Rel2 = SC_ArgArrayCounter_Do((&Counter), Thg->Name, Itm, Name_space);
			JB_Incr(Rel2);
			(JB_Ring_NextSibSet(Place, Rel2));
			JB_SetRef(Place, Rel2);
			JB_Decr(Rel2);
			JB_SetRef(Itm, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(Itm);
		;
	}
	;
	JB_Decr(Thg);
	JB_Decr(Place);
	SC_ArgArrayCounter_Check((&Counter), Exp);
	if (Counter.IsItem) {
		int C = Counter.max + 1;
		if (C >= 16384) {
			JB_Msg_Fail(Exp, JB_LUB[1380]);
		}
		Decl->C_Array = C;
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Exp);
	JB_MsgPos_Destructor((&_usingf0));
}

bool SC_Tran_Flow(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if ((!Fn)) {
		JB_Msg_Fail(Node, JB_LUB[901]);
		return nil;
	}
	Message* Msg = JB_Msg_NeedSyx(Node, kJB_SyxThg);
	JB_Incr(Msg);
	if (!Msg) {
		JB_Decr(Msg);
		return nil;
	}
	JB_Msg_ExpectLast(Msg, JB_LUB[0]);
	SC_Msg_SafeRemove(Node, kJB_SyxSheb);
	if ((!JB_Msg_SyntaxEquals(Msg, JB_LUB[813], false))) {
		JB_Msg_Fail(Msg, JB_LUB[1062]);
	}
	JB_Decr(Msg);
	(SC_Func_SyntaxIsSet(Fn, kSC__FunctionType_FlowDisabled, true));
	return false;
}

void SC_Tran_Msg(SCFunction* Fn, Message* Exp, SCNode* Name_space) {
	JB_Incr(Name_space);
	Message* Type = ((Message*)JB_Ring_First(Exp));
	JB_Incr(Type);
	Message* NameMsg = ((Message*)JB_Ring_First(Type));
	JB_Incr(NameMsg);
	if (JB_Tree_OperatorLessOrEqual(Exp, 1)) {
		Message* Mini = SC_SpellOutMsg(Type, Exp, NameMsg);
		JB_Incr(Mini);
		JB_FreeIfDead(SC_TypeOfExpr(Mini, Name_space, nil));
		JB_Decr(Mini);
		JB_Decr(Name_space);
		JB_Decr(NameMsg);
		JB_Decr(Type);
		return;
	}
	Message* Itm = ((Message*)JB_Ring_NextSib(Type));
	JB_Incr(Itm);
	Message* P = ((Message*)JB_Ring_Parent(Exp));
	JB_Incr(P);
	JB_Decr(P);
	NameAndMsg Place = ((NameAndMsg){});
	SC_Msg_IntoVariable(Exp, Name_space, (&Place));
	if (Place.Arg) {
		JB_SetRef(Name_space, SC_Msg_SCArg(Place.Arg, Name_space, nil));
		if (Name_space) {
			Message* Result = SC_SpellOutMsg(Type, Exp, NameMsg);
			JB_Incr(Result);
			while (Itm) {
				Message* NextItm = ((Message*)JB_Ring_NextSib(Itm));
				JB_Incr(NextItm);
				//using;
				MessagePosition _usingf0 = ((MessagePosition){});
				JB_Msg_SyntaxUsing(Itm, (&_usingf0));
				Message* Line = (JB_Syx_Msg(kJB_SyxDot, JB_LUB[1278]));
				JB_Incr(Line);
				Message* _tmPf2 = JB_Syx_Msg(kJB_SyxThg, Place.Name);
				JB_Incr(_tmPf2);
				JB_Tree_SyntaxAppend(Line, (_tmPf2));
				JB_Decr(_tmPf2);
				Message* _tmPf3 = ({
					Message* __imPf1 = (JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0]));
					JB_Incr(__imPf1);
					JB_Tree_SyntaxAppend(__imPf1, Itm);
					JB_SafeDecr(__imPf1);
					 __imPf1;
				});
				JB_Incr(_tmPf3);
				JB_Tree_SyntaxAppend(Line, _tmPf3);
				JB_Decr(_tmPf3);
				SC_NameAndMsg_SyntaxAppend((&Place), Line);
				JB_FreeIfDead(SC_TypeOfExpr(Line, Name_space, nil));
				SC_Func__Tran_All(Fn, Line, Name_space);
				JB_Decr(Line);
				JB_SetRef(Itm, NextItm);
				JB_Decr(NextItm);
				JB_MsgPos_SyntaxUsingComplete((&_usingf0), Itm);
				JB_MsgPos_Destructor((&_usingf0));
			};
			JB_FreeIfDead(SC_TypeOfExpr(Result, Name_space, nil));
			JB_Decr(Result);
		}
	}
	JB_Decr(Type);
	JB_Decr(NameMsg);
	JB_Decr(Itm);
	JB_Decr(Name_space);
	SC_NameAndMsg_Destructor((&Place));
}

void SC_Tran_MsgList(Message* Exp) {
	if (true) {
		JB_Msg_Fail(Exp, JB_LUB[957]);
	}
	(++SC__Func_DisabledPoints);
}

SCObject* SC_TranNegate(Message* F, SCNode* Name_space) {
	F = SC_Msg_ExpandToBool(F, Name_space);
	if (!F) {
		return nil;
	}
	JB_Object* D = F->Obj;
	if (JB_Object_FastIsa(D, &SCDeclData)) {
		if (SC_Decl_IsConstOf(((SCDecl*)D), SC_FalseBool)) {
			return SC_TrueBool;
		}
		if (SC_Decl_IsConstOf(((SCDecl*)D), SC_TrueBool)) {
			return SC_FalseBool;
		}
	}
	return SC_TypeBool->TypeNormal;
}

SCObject* SC_TypeOfAccess(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* Ch = ((Message*)JB_Ring_First(Exp));
	SCObject* Ty0 = SC_TypeOfExprModulesOK(Ch, Name_space, nil);
	Message* Arr = ((Message*)JB_Ring_Last(Exp));
	if (!Arr) {
		return nil;
	}
	Message* Index = ((Message*)JB_Ring_First(Arr));
	if (JB_Object_FastIsa(Ty0, &SCModuleData)) {
		SCClass* Cls = ((SCModule*)Ty0)->Cls;
		if (Cls and (SC_Class_IsMArray(Cls, Arr) and SC_Msg_ExpectMatch(Index, Name_space, SC_TypeInt))) {
			return SC_LowlevelArrayTransform(Exp, Cls);
		}
	}
	 else if ((JB_Object_FastIsa(Ty0, &SCDeclData)) and (!((Message*)JB_Ring_NextSib(Index)))) {
		SCDecl* Access = SC_TypeOfExpr(Index, Name_space, nil);
		int Oof = SC_Decl_AccessType(((SCDecl*)Ty0), Access, Ch);
		if (Oof) {
			if (!Index) {
				//using;
				MessagePosition _usingf0 = ((MessagePosition){});
				JB_Msg_SyntaxUsing(Arr, (&_usingf0));
				Index = JB_Msg_Msg(Arr, kJB_SyxNum, JB_LUB[266]);
				Access = SC_TypeOfExpr(Index, Name_space, nil);
				JB_MsgPos_SyntaxUsingComplete((&_usingf0), Arr);
				JB_MsgPos_Destructor((&_usingf0));
			}
			if (Access and SC_Msg_ExpectInt(Index, Access)) {
				if (Oof == 1) {
					return SC_TypeOfVecAccess(Index, ((SCDecl*)Ty0), SC_Decl_IsNumeric(((SCDecl*)Ty0)));
				}
				return SC_Decl_MemAccess(((SCDecl*)Ty0), Exp, Side);
			}
		}
	}
	Arr->Func = kJB_SyxPrm;
	JB_Msg_BecomeStr(Exp, kJB_SyxDot, JB_LUB[2066]);
	(JB_Msg_RangeSet(Exp, JB_Msg_Range(Arr)));
	return SC_TypeOfDot(Exp, Name_space, Side);
}

SCObject* SC_TypeOfAdj(Message* Exp, SCNode* Name_space, Message* Side) {
	Array* Args = JB_Array_Constructor0(nil);
	JB_Incr(Args);
	Macro* Found = SC_Comp__FindAdj(Exp, Args);
	JB_Incr(Found);
	if (Found) {
		JB_Msg_BecomeMacro(Exp, Found, Args);
		JB_Decr(Found);
		JB_Decr(Args);
		return SC_TypeOfExpr(Exp, Name_space, Side);
	}
	JB_Decr(Args);
	JB_Decr(Found);
	return nil;
}

SCObject* SC_TypeOfARel(Message* Exp, SCNode* Name_space, Message* Side) {
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[174], false)) {
		return SC_TypeOfReal(Exp, Name_space, Side);
	}
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[26], false)) {
		return SC_TypeOfDotDotDot(Exp, Name_space, nil);
	}
	Message* _tmPf0 = SC_Msg_NiceParent(Exp);
	JB_Incr(_tmPf0);
	bool Brel = (JB_Msg_EqualsSyx(_tmPf0, kJB_SyxArg, false));
	JB_Decr(_tmPf0);
	if (Brel) {
		Exp->Func = kJB_SyxBRel;
	}
	return SC_Func__Tran_AfterRel(Exp, Name_space, Side);
}

SCObject* SC_TypeOfArgArr(Message* Exp, SCNode* Name_space, Message* Side) {
	SCDecl* Result = nil;
	JB_Incr(Result);
	int Count = 0;
	{
		Message* Itm = ((Message*)JB_Ring_First(Exp));
		JB_Incr(Itm);
		while (Itm) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Itm));
			JB_Incr(_Nf1);
			if (JB_Msg_EqualsSyx(Itm, kJB_SyxTmp, false)) {
				Itm->Func = kJB_SyxThg;
			}
			SCDecl* Contained = SC_TypeOfExpr(Itm, Name_space, nil);
			JB_Incr(Contained);
			if (Contained) {
				if (!(SC_Class_IsDataTypeOrFP(Contained->Type) or Contained->PointerCount)) {
					JB_Msg_Fail(Itm, JB_LUB[1547]);
				}
				if (Result) {
					SCDecl* Oof = SC_Decl_HighestArrayContainMatch(Contained, Result->Type->TypeNormal);
					JB_Incr(Oof);
					JB_SetRef(Result->Type, Oof->Type);
					JB_Decr(Oof);
				}
				 else {
					JB_SetRef(Result, SC_Decl_Constructor(nil, Contained->Type));
				}
				(++Count);
			}
			JB_Decr(Contained);
			JB_SetRef(Itm, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(Itm);
		;
	}
	;
	if (!Result) {
		JB_Msg_Fail(Exp, JB_LUB[1548]);
		JB_Decr(Result);
		return nil;
	}
	JB_SetRef(Exp->Obj, Result);
	JB_SetRef(Result, SC_Decl_GetCArray(Result, Count));
	SC_Tran_ArgArray(Exp, Name_space, Result);
	JB_SafeDecr(Result);
	return Result;
}

SCObject* SC_TypeOfArr(Message* Exp, SCNode* Name_space, Message* Side) {
	int IsDispatch = ((int)((JB_Msg_SyntaxEquals(Exp, JB_LUB[1038], true))));
	int InOrder = 0;
	SCDecl* Result = SC_Decl_Constructor(nil, SC_TypeVoid_);
	JB_Incr(Result);
	Result->NilDeclared = kSC__NilState_Real;
	JB_SetRef(Exp->Obj, Result);
	{
		Message* _Valuef2 = ((Message*)JB_Ring_First(Exp));
		JB_Incr(_Valuef2);
		while (_Valuef2) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(_Valuef2));
			JB_Incr(_Nf1);
			Message* Itm = _Valuef2;
			JB_Incr(Itm);
			SCClass* NewArrCls = SC_TypeArray;
			JB_Incr(NewArrCls);
			if ((JB_Msg_EqualsSyx(Itm, kJB_SyxItem, false))) {
				Message* _tmPf3 = ((Message*)JB_Ring_First(Itm));
				JB_Incr(_tmPf3);
				SCDecl* IdxType = SC_TypeOfExpr(_tmPf3, Name_space, nil);
				JB_Incr(IdxType);
				JB_Decr(_tmPf3);
				if (SC_Decl_OperatorMatches(IdxType, SC_TypeString)) {
					JB_SetRef(NewArrCls, SC_TypeDictionary);
				}
				 else if (SC_Decl_OperatorMatches(IdxType, SC_TypeInt)) {
					if (!IsDispatch) {
						Message* _tmPf4 = ((Message*)JB_Ring_First(Itm));
						JB_Incr(_tmPf4);
						InOrder = SC_ArrayInOrderCheck(InOrder, _tmPf4);
						JB_Decr(_tmPf4);
						if (InOrder <= 0) {
							JB_SetRef(NewArrCls, SC_TypeDictionary);
						}
					}
				}
				 else if (!(SC_Decl_OperatorMatches(IdxType, SC_TypeSyntax))) {
					if (true) {
						JB_Msg_Fail(Exp, JB_LUB[1549]);
					}
					JB_SetRef(Itm, nil);
				}
				JB_Decr(IdxType);
				JB_SetRef(Itm, ((Message*)JB_Ring_Last(Itm)));
			}
			if (Itm) {
				Message* _tmPf5 = SC_Msg_TypeOfArrItem(Itm);
				JB_Incr(_tmPf5);
				SCDecl* Contained = SC_TypeOfExpr(_tmPf5, Name_space, nil);
				JB_Incr(Contained);
				JB_Decr(_tmPf5);
				if (Contained) {
					JB_SetRef(Itm, SC_Msg_Resync(Itm, Exp));
					if (SC_Class_IsObject(Contained->Type)) {
						JB_SetRef(Contained, Contained->Type->TypeNormal);
					}
					 else if (IsDispatch) {
						(++IsDispatch);
					}
					if (Result->Contains) {
						JB_SetRef(Result->Contains, SC_Decl_HighestArrayContainMatch(Contained, Result->Contains));
					}
					 else {
						JB_SetRef(Result->Contains, Contained);
					}
					if (Result->Type == SC_TypeVoid_) {
						JB_SetRef(Result->Type, NewArrCls);
					}
					 else {
						if (Result->Type != NewArrCls) {
							JB_Msg_Fail(Exp, JB_LUB[1550]);
							JB_Decr(Contained);
							JB_Decr(NewArrCls);
							JB_Decr(Itm);
							JB_Decr(_Nf1);
							JB_Decr(_Valuef2);
							JB_Decr(Result);
							return nil;
						}
					}
				}
				JB_Decr(Contained);
			}
			JB_Decr(Itm);
			JB_Decr(NewArrCls);
			JB_SetRef(_Valuef2, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(_Valuef2);
		;
	}
	;
	SCDecl* C = Result->Contains;
	JB_Incr(C);
	if (C) {
		JB_SetRef(C, SC_Decl_ForContained(C));
		if (IsDispatch and (Result->Type != SC_TypeDictionary)) {
			JB_SetRef(Result->Type, C->Type);
			JB_SetRef(Result->Contains, nil);
			SC_Decl_IsCarray(Result, IsDispatch - 1, C);
			Exp->Func = kJB_SyxArg;
			SC_Tran_ArgArray(Exp, Name_space, Result);
		}
		 else if (!SC_Class_IsObject(C->Type)) {
			JB_SetRef(Result->Contains, SC_Decl_NewWrapper(C, C));
		}
		 else {
			JB_SetRef(Result->Contains, SC_Decl_MakeContainedOptional(C));
		}
	}
	JB_Decr(C);
	if (Result->Type == SC_TypeVoid_) {
		JB_SetRef(Result->Type, SC_TypeArray);
	}
	JB_SafeDecr(Result);
	return Result;
}

SCObject* SC_TypeOfBlock(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* Last = JB_Msg_NeedSyxInt(Exp, kJB_SyxNil, -1);
	JB_Incr(Last);
	if (!Last) {
		JB_Decr(Last);
		return nil;
	}
	if (!SC_Msg_OperatorIsTmp(Last, JB_LUB[240])) {
		if (true) {
			MessagePosition _usingf0 = ((MessagePosition){});
			JB_Msg_SyntaxUsing(Last, (&_usingf0));
			Message* _tmPf3 = SC_NewRejoin();
			JB_Incr(_tmPf3);
			JB_SetRef(Last, ((Message*)JB_Tree_WrapWith(Last, _tmPf3)));
			JB_Decr(_tmPf3);
			JB_MsgPos_SyntaxUsingComplete((&_usingf0), Last);
			JB_MsgPos_Destructor((&_usingf0));
		}
	}
	SCArg* P = SC_Msg_SCArg(Exp, Name_space, nil);
	JB_Incr(P);
	Message* _tmPf4 = ((Message*)JB_Ring_Parent(Exp));
	JB_Incr(_tmPf4);
	(SC_Msg_StatementExprSet(_tmPf4, P));
	JB_Decr(_tmPf4);
	SCFunction* Fn = SC_Base_OwningFunc(P);
	JB_Incr(Fn);
	SC_CollectDeclsFuncBodyUnsureHowToRemove(Exp, P);
	{
		Message* Ch = ((Message*)JB_Ring_First(Exp));
		JB_Incr(Ch);
		while (Ch) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(Ch));
			JB_Incr(_Nf2);
			if (JB_Msg_EqualsSyx(Ch, kJB_SyxArg, false)) {
				SCArg* _tmPf5 = SC_Msg_SCArg(Ch, P, nil);
				JB_Incr(_tmPf5);
				SC_Func__Tran_All(Fn, Ch, _tmPf5);
				JB_Decr(_tmPf5);
			}
			 else {
				SC_Func__Tran_All(Fn, Ch, P);
			}
			JB_SetRef(Ch, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(Ch);
		;
	}
	;
	JB_Decr(Fn);
	Message* Val = JB_Msg_NeedFirst(Last);
	JB_Incr(Val);
	JB_Decr(Last);
	if (JB_Msg_ExpectLast(Val, JB_LUB[0])) {
		SCDecl* _tmPf6 = SC_TypeOfExpr(Val, P, nil);
		JB_Incr(_tmPf6);
		JB_Decr(Val);
		JB_Decr(P);
		JB_SafeDecr(_tmPf6);
		return _tmPf6;
	}
	JB_Decr(P);
	JB_Decr(Val);
	return nil;
}

SCObject* SC_TypeOfBra(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* C0 = ((Message*)JB_Ring_First(Exp));
	if ((JB_Msg_EqualsSyx(C0, kJB_SyxArg, false))) {
		return SC_TypeOfBlock(C0, Name_space, Side);
	}
	 else {
		return SC_TypeOfExpr(C0, Name_space, Side);
	}
}

SCObject* SC_TypeOfBRel(Message* Exp, SCNode* Name_space, Message* Side) {
	JB_String* Name = Exp->Name;
	uint N = JB_Str_First(Name);
	Message* F = ((Message*)JB_Ring_First(Exp));
	if (!F) {
		return nil;
	}
	if ((N == '$') or ((N == '!') and SC_Msg_OperatorIsBRel(F, JB_LUB[242]))) {
		return SC_DollaDolla(Exp, Name_space);
	}
	SCDecl* SubType = SC_TypeOfExpr(F, Name_space, nil);
	if (!SubType) {
		return nil;
	}
	if ((N == '-') and (JB_Str_EqualsInt(Name, 1, false))) {
		if (!(SC_Decl_IsNearlyNormalNumber(SubType) or SC_Decl_IsBool(SubType))) {
			JB_Msg_Fail(Exp, JB_LUB[2078]);
			return nil;
		}
		return SubType;
	}
	if (N == '&') {
		if (SubType->Type->FuncProto) {
			return SC_TypeOfFuncPointer(F, Name_space, Side);
		}
		SC_Decl_MarkAsAltered(SubType);
		if (!SC_Msg_CanGetAddress(F, Name_space)) {
			return nil;
		}
		return SC_Decl_GetAddress(SubType, kSC__DeclMode_Always);
	}
	if (N == '!') {
		return SC_TranNegate(F, Name_space);
	}
	if (N == '~') {
		if (!SC_Decl_IsInteger(SubType)) {
			JB_Msg_Fail(Exp, JB_LUB[918]);
		}
		return SubType;
	}
	JB_FreeIfDead(SC_Func__Tran_AfterRel(Exp, Name_space, Side));
	return SubType;
}

SCObject* SC_TypeOfChar(Message* Exp, SCNode* Name_space, Message* Side) {
	Ind Cp = -1;
	bool IsByte = (JB_Str_EqualsInt(Exp->Name, 1, false));
	if (IsByte) {
		Cp = JB_Str_First(Exp->Name);
	}
	 else {
		Cp = ((Ind)JB_Str_UTF8Value(Exp->Name, true));
		if (!JB_Ind_SyntaxCast(Cp)) {
			JB_Msg_Fail(Exp, JB_LUB[958]);
			return nil;
		}
	}
	Dictionary* D = ({
		Dictionary* _X = SC_CodePointTable;
		JB_Incr(_X);
		if (!_X) {
			JB_SetRef(_X, JB_Dict_Constructor(nil));
			JB_SetRef(SC_CodePointTable, _X);
		}
		JB_SafeDecr(_X);
		 _X;
	});
	JB_Incr(D);
	JB_String* Str = JB_int_RenderFS(Cp, nil);
	JB_Incr(Str);
	SCDecl** Place = ((SCDecl**)JB_Dict_MakePlace(D, Str));
	JB_Decr(D);
	SCDecl* Char_decl = Place[0];
	JB_Incr(Char_decl);
	if (!Char_decl) {
		SCClass* Type = ((SCClass*)JB_Ternary(IsByte, SC_TypeByte, SC_TypeCodePoint));
		JB_Incr(Type);
		JB_SetRef(Char_decl, SC_Decl_CopyDecl(Type->TypeNormal, false));
		JB_Decr(Type);
		JB_SetRef(Place[0], Char_decl);
		(SC_Decl_SyntaxIsSet(Char_decl, kSC__SCDeclInfo_Const, true));
		Char_decl->ExportPosition = Cp;
	}
	if (!IsByte) {
		Exp->Func = kJB_SyxNum;
		JB_SetRef(Exp->Name, Str);
	}
	JB_Decr(Str);
	JB_SetRef(Exp->Obj, Char_decl);
	JB_SafeDecr(Char_decl);
	return Char_decl;
}

SCObject* SC_TypeOfDot(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* L = ((Message*)JB_Ring_Last(Exp));
	JB_Incr(L);
	if (!L) {
		JB_Decr(L);
		return nil;
	}
	if (L->Obj) {
		JB_Decr(L);
		return nil;
	}
	JB_Decr(L);
	Message* _tmPf0 = ((Message*)JB_Ring_First(Exp));
	JB_Incr(_tmPf0);
	SCNode* DotVar = ((SCNode*)SC_Msg_DotSpace(_tmPf0, Name_space));
	JB_Incr(DotVar);
	JB_Decr(_tmPf0);
	if (!DotVar) {
		JB_Msg_Fail(Exp, JB_LUB[2049]);
		JB_Decr(DotVar);
		return nil;
	}
	SCDecl* Contains = nil;
	JB_Incr(Contains);
	bool DotVarIsaDecl = (JB_Object_Isa(DotVar, &SCDeclData));
	if (DotVarIsaDecl) {
		SCDecl* Swiz = SC_TypeOfSwiz(Exp, Name_space, Side, ((SCDecl*)DotVar));
		JB_Incr(Swiz);
		if (Swiz) {
			JB_Decr(Contains);
			JB_Decr(DotVar);
			JB_SafeDecr(Swiz);
			return Swiz;
		}
		JB_Decr(Swiz);
		JB_SetRef(Contains, ((SCDecl*)DotVar)->Contains);
		SCClass* Ty = ((SCDecl*)DotVar)->Type;
		JB_SetRef(DotVar, Ty);
		if (!Contains) {
			JB_SetRef(Contains, Ty->Contained);
		}
	}
	 else {
		if (!(JB_Object_Isa(DotVar, &SCClassData) or JB_Object_Isa(DotVar, &SCModuleData))) {
			JB_Msg_Fail(Exp, JB_LUB[2050]);
			JB_Decr(Contains);
			JB_Decr(DotVar);
			return nil;
		}
	}
	JB_Object* O = SC_Base_LookUpDot(DotVar, Exp->Name, Exp, Name_space, Contains, Side);
	JB_Incr(O);
	if (!O) {
		JB_Decr(O);
		JB_Decr(Contains);
		JB_Decr(DotVar);
		return nil;
	}
	if (JB_Object_FastIsa(O, &SCModuleData)) {
		Message* F = ((Message*)JB_Ring_First(Exp));
		JB_Incr(F);
		if (JB_Msg_EqualsSyx(F, kJB_SyxThg, false)) {
			Exp->Func = kJB_SyxThg;
			JB_Tree_Remove(F);
			if (JB_Msg_SyntaxEquals(F, JB_LUB[1351], false)) {
				SCClass* Cls = ((SCModule*)O)->Cls;
				JB_Incr(Cls);
				if (Cls) {
					SCDecl* T = Cls->ClassType;
					JB_Incr(T);
					if (T) {
						JB_SetRef(Exp->Name, T->Name);
						JB_Decr(Cls);
						JB_Decr(F);
						JB_Decr(O);
						JB_Decr(Contains);
						JB_Decr(DotVar);
						JB_SafeDecr(T);
						return T;
					}
					JB_Decr(T);
				}
				JB_Decr(Cls);
			}
		}
		JB_Decr(F);
		JB_Decr(Contains);
		JB_Decr(DotVar);
		JB_SafeDecr(O);
		return ((SCModule*)O);
	}
	SCDecl* Decl = SC_Object_BaseAsDecl(O);
	JB_Incr(Decl);
	JB_Decr(O);
	if (Decl) {
		if (Contains) {
			if ((JB_Object_FastIsa(DotVar, &SCClassData)) and (!SC_Msg_IsSettablePlace(Exp))) {
				JB_SetRef(Decl, SC_Decl_ContainedReplace(Decl, Contains, true));
			}
		}
		if (SC_Decl_SyntaxIs(Decl, kSC__SCDeclInfo_Task)) {
			JB_Decr(Contains);
			JB_Decr(DotVar);
			JB_SafeDecr(Decl);
			return Decl;
		}
	}
	 else {
		JB_SetRef(Decl, SC_TypeVoid);
	}
	JB_Decr(DotVar);
	JB_Decr(Contains);
	Message* _tmPf1 = ((Message*)JB_Ring_Last(Exp));
	JB_Incr(_tmPf1);
	SCFunction* Fn = SC_Msg_AsFunc(_tmPf1);
	JB_Incr(Fn);
	JB_Decr(_tmPf1);
	if (Fn) {
		JB_SetRef(Exp->Obj, Decl);
		if (!JB_Msg_EqualsSyx(Exp, kJB_SyxFunc, false)) {
			SC_Func_DotFuncToNormalFunc(Fn, Exp);
		}
	}
	JB_Decr(Fn);
	SC_Decl_CheckLibGlob(Decl);
	JB_SafeDecr(Decl);
	return Decl;
}

SCObject* SC_TypeOfDotDotDot(Message* Exp, SCNode* Name_space, Message* Side) {
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Exp, (&_usingf0));
		JB_Msg_BecomeStr(Exp, kJB_SyxBra, JB_LUB[0]);
		Message* P = ((Message*)JB_Ring_Parent(Exp));
		JB_Incr(P);
		Message* C = Exp;
		JB_Incr(C);
		while ((!JB_Msg_EqualsSyx(P, kJB_SyxPrm, false)) and (!JB_Msg_EqualsSyx(P, kJB_SyxArr, false))) {
			if (!(P and (!JB_Msg_EqualsSyx(P, kJB_SyxArg, false)))) {
				JB_Msg_Fail(Exp, JB_LUB[1306]);
				JB_Decr(C);
				JB_Decr(P);
				JB_MsgPos_Destructor((&_usingf0));
				return nil;
			}
			JB_SetRef(C, P);
			JB_SetRef(P, ((Message*)JB_Ring_Parent(P)));
		};
		JB_Decr(P);
		Message* _tmPf2 = ({
			Message* __imPf1 = (JB_Syx_Msg(kJB_SyxDot, JB_LUB[718]));
			JB_Incr(__imPf1);
			Message* _tmPf3 = JB_Syx_Msg(kJB_SyxThg, JB_LUB[152]);
			JB_Incr(_tmPf3);
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf3));
			JB_Decr(_tmPf3);
			Message* _tmPf4 = JB_Syx_Msg(kJB_SyxEmb, JB_LUB[0]);
			JB_Incr(_tmPf4);
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf4));
			JB_Decr(_tmPf4);
			JB_SafeDecr(__imPf1);
			 __imPf1;
		});
		JB_Incr(_tmPf2);
		(JB_Ring_NextSibSet(C, _tmPf2));
		JB_Decr(C);
		JB_Decr(_tmPf2);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Exp);
		JB_MsgPos_Destructor((&_usingf0));
	}
	Message* _tmPf5 = ((Message*)JB_Ring_First(Exp));
	JB_Incr(_tmPf5);
	SCDecl* _tmPf6 = SC_TypeOfExpr(_tmPf5, Name_space, nil);
	JB_Incr(_tmPf6);
	JB_Decr(_tmPf5);
	JB_SafeDecr(_tmPf6);
	return _tmPf6;
}

SCDecl* SC_TypeOfExpr(Message* Exp, SCNode* Name_space, Message* Side) {
	if (Exp) {
		SCObject* Obj = ((SCObject*)Exp->Obj);
		if (!Obj) {
			Obj = SC_TypeOfExprSub(Exp, Name_space, Side);
		}
		if (JB_Object_FastIsa(Obj, &SCDeclData)) {
			return ((SCDecl*)Obj);
		}
	}
	return nil;
}

SCObject* SC_TypeOfExprModulesOK(Message* Exp, SCNode* Name_space, Message* Side) {
	JB_Object* Obj = Exp->Obj;
	if (Obj) {
		return ((SCObject*)Obj);
	}
	if ((JB_Msg_EqualsSyx(Exp, kJB_SyxThg, false))) {
		Obj = SC_Base_LookUpVar(Name_space, Exp->Name, Exp, Side);
		if ((!Side) and JB_Object_FastIsa(Obj, &SCDeclData)) {
			(SC_Decl_SyntaxIsSet(((SCDecl*)Obj), kSC__SCDeclInfo_ReadFrom, true));
		}
		JB_SetRef(Exp->Obj, Obj);
		return ((SCObject*)Obj);
	}
	return SC_TypeOfExprSub(Exp, Name_space, Side);
}

SCDecl* SC_TypeOfExprNeeded(Message* Exp, SCNode* Name_space) {
	int OldCount = JB_StdErr->ErrorCount;
	SCDecl* Result = SC_TypeOfExpr(Exp, Name_space, nil);
	if (SC_Decl_Found(Result)) {
		return Result;
	}
	if (OldCount == JB_StdErr->ErrorCount) {
		if (true) {
			JB_Msg_Fail(Exp, JB_LUB[1307]);
		}
		SCFunction* It = SC_Msg_ExpFunc(Exp);
		if (It) {
			(JB_Msg_SyntaxProblem(It->Source, kJB_kUsingStr));
		}
	}
	return nil;
}

SCObject* SC_TypeOfExprSub(Message* Exp, SCNode* Name_space, Message* Side) {
	if (JB_Msg_EqualsSyx(Exp, kJB_SyxDecl, false)) {
		JB_Object* D = ((Message*)JB_Ring_Last(Exp))->Obj;
		if (JB_Object_FastIsa(D, &SCDeclData)) {
			return ((SCDecl*)D);
		}
	}
	if (Name_space) {
		FP_ExprResolver F = SC_ExprFuncs[((int)Exp->Func)];
		if (!F) {
			JB_Msg_Fail(Exp, nil);
			return nil;
		}
		SCObject* Obj = (F)(Exp, Name_space, Side);
		if (Obj) {
			JB_SetRef(Exp->Obj, Obj);
		}
		return ((SCObject*)Obj);
	}
	if (!JB_App__Parent(nil, false)) {
		if (true) {
			JB_Msg_Fail(Exp, JB_LUB[1143]);
		}
	}
	return nil;
}

SCObject* SC_TypeOfFunc(Message* Exp, SCNode* Name_space, Message* Side) {
	if (SC_Msg_IsTern(Exp)) {
		return SC_TypeOfTernary(Exp, Name_space, Side);
	}
	SCObject* Fn = SC_TypeOfFuncSub(Exp, Name_space, Side);
	if (!Fn) {
		JB_Msg_Fail(Exp, JB_LUB[2035]);
		return nil;
	}
	if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
		SCDecl* Obj = ((SCFunction*)Fn)->ReturnType;
		if (!Obj) {
			JB_SetRef(Exp->Obj, SC_TypeVoid);
		}
		if (SC_Func_SyntaxIs(((SCFunction*)Fn), kSC__FunctionType_Killer)) {
			SC_Msg_LastInBlock(Exp, kSC__SCBlockage_Quit);
		}
		return Obj;
	}
	return Fn;
}

SCObject* SC_TypeOfFuncPointer(Message* Exp, SCNode* Name_space, Message* Side) {
	SCObject* Rz = nil;
	JB_Incr(Rz);
	Message* Ch = SC_Msg_UnBra(Exp);
	JB_Incr(Ch);
	if (JB_Msg_EqualsSyx(Ch, kJB_SyxDot, false)) {
		JB_SetRef(Rz, SC_TypeOfDot(Ch, Name_space, Side));
	}
	 else if ((JB_Msg_EqualsSyx(Ch, kJB_SyxThg, false))) {
		JB_SetRef(Rz, SC_Base_LookUpVar(Name_space, Ch->Name, Ch, Side));
	}
	 else {
		if (true) {
			JB_Msg_Fail(Exp, nil);
		}
	}
	JB_SetRef(Ch->Obj, Rz);
	JB_Decr(Ch);
	JB_SafeDecr(Rz);
	return Rz;
}

SCObject* SC_TypeOfFuncSub(Message* Exp, SCNode* Name_space, Message* Side) {
	SCFunction* Fn = SC_Msg_MsgFunc(Exp);
	JB_Incr(Fn);
	if (Fn) {
		JB_SafeDecr(Fn);
		return Fn;
	}
	Message* Ch = ((Message*)JB_Ring_First(Exp));
	JB_Incr(Ch);
	Message* Params = ((Message*)JB_Ring_NextSib(Ch));
	JB_Incr(Params);
	SCDecl* Thgdecl = nil;
	JB_Incr(Thgdecl);
	if (JB_Msg_EqualsSyx(Ch, kJB_SyxThg, false)) {
		JB_SetRef(Thgdecl, ((SCDecl*)SC_Base_LookUpFunc(Name_space, Ch->Name, Exp)));
		if (!JB_Object_Isa(Thgdecl, &SCDeclData)) {
			JB_Decr(Params);
			JB_Decr(Ch);
			JB_Decr(Fn);
			JB_SafeDecr(Thgdecl);
			return Thgdecl;
		}
	}
	 else {
		JB_SetRef(Thgdecl, SC_TypeOfExpr(Ch, Name_space, nil));
		if (!Thgdecl) {
			JB_Decr(Thgdecl);
			JB_Decr(Params);
			JB_Decr(Ch);
			JB_Decr(Fn);
			return nil;
		}
	}
	JB_Decr(Ch);
	JB_SetRef(Fn, Thgdecl->Type->FuncProto);
	JB_Decr(Thgdecl);
	if (!Fn) {
		JB_SetRef(Fn, SC_Msg_PrmFunc(Exp));
		if (Fn) {
			JB_Decr(Params);
			JB_SafeDecr(Fn);
			return Fn;
		}
		JB_Decr(Params);
		JB_Decr(Fn);
		return SC_TypeOfSyntaxCall(Exp, Name_space, Side);
	}
	SCParamArray* PList = SC_PA_Constructor(nil, Exp);
	JB_Incr(PList);
	if (!SC_PA_PreReadTypes(PList, Name_space, Params, Side)) {
		JB_Decr(PList);
		JB_Decr(Params);
		JB_Decr(Fn);
		return nil;
	}
	JB_Decr(Params);
	SCFunction* Fn2 = SC_Func_ArgsMatch(Fn, nil, Name_space, PList, 0);
	JB_Incr(Fn2);
	if (Fn2) {
		if (!Fn2->ReturnType) {
			JB_SetRef(Exp->Obj, SC_TypeVoid);
		}
	}
	 else {
		JB_FreeIfDead(SC_Func_ArgsMatch(Fn, nil, Name_space, PList, kJB_kTypeCastDescribeErrors));
	}
	JB_Decr(Fn);
	JB_Decr(PList);
	JB_SafeDecr(Fn2);
	return Fn2;
}

SCObject* SC_TypeOfLast(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* _tmPf0 = ((Message*)JB_Ring_Last(Exp));
	JB_Incr(_tmPf0);
	SCDecl* _tmPf1 = SC_TypeOfExpr(_tmPf0, Name_space, nil);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCObject* SC_TypeOfList(Message* Exp, SCNode* Name_space, Message* Side) {
	int FoundType = 0;
	int AllowType = 0;
	int Count = 0;
	bool HasBig = false;
	bool Numeric = true;
	{
		Message* S = ((Message*)JB_Ring_First(Exp));
		JB_Incr(S);
		while (S) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(S));
			JB_Incr(_Nf2);
			SCDecl* Typ = SC_TypeOfExpr(S, Name_space, nil);
			JB_Incr(Typ);
			if (!Typ) {
				JB_Decr(Typ);
				JB_Decr(_Nf2);
				JB_Decr(S);
				return nil;
			}
			int N = SC_Decl_IsNumeric(Typ);
			if (!N) {
				Numeric = false;
			}
			 else if (Numeric) {
				if (N > 1) {
					HasBig = true;
				}
				if (JB_Object_MustBe(Typ, &SCDeclData, S)) {
					uint T = ((SCDecl*)Typ)->Type->TypeInfo;
					if (SC_Msg_IsZero(S)) {
						AllowType = SC_TC_FloatIntMerge(T, AllowType, S);
					}
					 else {
						FoundType = SC_TC_FloatIntMerge(T, FoundType, S);
						SC_Msg_WrapFloatOrInt(S, T, N, ((SCDecl*)Typ));
					}
				}
				Count = (Count + N);
				if (Count > 4) {
					JB_Msg_Fail(Exp, JB_LUB[1308]);
					JB_Decr(Typ);
					JB_Decr(_Nf2);
					JB_Decr(S);
					return nil;
				}
			}
			JB_Decr(Typ);
			JB_SetRef(S, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(S);
		;
	}
	;
	if (!Numeric) {
		JB_Msg_Fail(Exp, JB_LUB[1309]);
		return nil;
	}
	if (Count < 2) {
		JB_Msg_Fail(Exp, JB_LUB[1310]);
		return nil;
	}
	if (!FoundType) {
		FoundType = AllowType;
	}
	bool IsFloat = (FoundType == 2);
	SCClass* _tmPf3 = SC_VecType(IsFloat, Count);
	JB_Incr(_tmPf3);
	SCDecl* Cns = SC_Class_NotConst(_tmPf3);
	JB_Incr(Cns);
	JB_Decr(_tmPf3);
	if (!HasBig) {
		JB_SetRef(Exp->Obj, Cns);
		JB_SafeDecr(Cns);
		return Cns;
	}
	JB_Decr(Cns);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Exp, (&_usingf0));
	JB_String* Name = ((JB_StringC*)JB_Ternary(IsFloat, JB_LUB[1311], JB_LUB[1312]));
	JB_Incr(Name);
	Message* List = (JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0]));
	JB_Incr(List);
	SC_Msg_AppendAllInto(Exp, List);
	JB_Msg_AppendSyx(Exp, kJB_SyxThg, Name);
	JB_Decr(Name);
	JB_Tree_SyntaxAppend(Exp, List);
	JB_Decr(List);
	Exp->Func = kJB_SyxFunc;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Exp);
	SCDecl* _tmPf4 = SC_TypeOfExpr(Exp, Name_space, nil);
	JB_Incr(_tmPf4);
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

SCObject* SC_TypeOfMsg(Message* Exp, SCNode* Name_space, Message* Side) {
	SCObject* Rz = nil;
	JB_Incr(Rz);
	Message* Type = ((Message*)JB_Ring_First(Exp));
	JB_Incr(Type);
	if (!Type) {
		JB_Decr(Type);
		JB_Decr(Rz);
		return nil;
	}
	Message* Name = ((Message*)JB_Ring_First(Type));
	JB_Incr(Name);
	if (Name) {
		JB_FreeIfDead(SC_TypeOfExpr(Name, Name_space, nil));
	}
	{
		Message* _LoopSrcf1 = ((Message*)JB_Ring_NextSib(Type));
		JB_Incr(_LoopSrcf1);
		Message* Ch = _LoopSrcf1;
		JB_Incr(Ch);
		while (Ch) {
			JB_FreeIfDead(SC_TypeOfExpr(Ch, Name_space, nil));
			JB_SetRef(Ch, ((Message*)JB_Ring_NextSib(Ch)));
		};
		JB_Decr(Ch);
		;
		JB_Decr(_LoopSrcf1);
		JB_Decr(Name);
	}
	;
	JB_Decr(Type);
	SCClass* Msg = SC_Comp__FindClassName(JB_LUB[1313], 0);
	JB_Incr(Msg);
	if (Msg) {
		JB_SetRef(Rz, Msg->TypeNormal);
	}
	JB_Decr(Msg);
	JB_SafeDecr(Rz);
	return Rz;
}

SCObject* SC_TypeOfNothing(Message* Exp, SCNode* Name_space, Message* Side) {
	return nil;
}

SCObject* SC_TypeOfNum(Message* Exp, SCNode* Name_space, Message* Side) {
	SCObject* Rz = nil;
	SCDecl** P = ((SCDecl**)JB_Dict_MakePlace(SC__Comp_Numbers, Exp->Name));
	SCDecl* Y = P[0];
	if (Y) {
		return ((SCDecl*)Y);
	}
	Rz = SC_TypeOfNumSub(Exp, Name_space, Side);
	if (JB_Object_FastIsa(Rz, &SCDeclData)) {
		JB_SetRef(P[0], Rz);
	}
	 else {
	}
	return Rz;
}

SCObject* SC_TypeOfNumSub(Message* Exp, SCNode* Name_space, Message* Side) {
	JB_String* N = Exp->Name;
	JB_Incr(N);
	if (JB_Str_ContainsString(N, JB_LUB[25])) {
		SCDecl* D = SC_Decl_CopyDecl(SC_Typefloat->TypeNormal, false);
		JB_Incr(D);
		Float64 F8 = JB_Msg_Float(Exp);
		uint64 V = 0;
		if ((SC_Decl_CArraySize(D) == 4) and (!Side)) {
			V = JB_f_AsInt(((float)F8));
		}
		 else {
			V = JB_dbl_AsInt(F8);
		}
		(SC_Decl_NumberConstSet(D, V));
		JB_Decr(N);
		JB_SafeDecr(D);
		return D;
	}
	JB_Decr(N);
	int64 Val = JB_Msg_Int(Exp, 0);
	SCDecl* D2 = SC_Decl_CopyDecl(SC_TypeInt->TypeNormal, false);
	JB_Incr(D2);
	if ((((Val << 32) >> 32) != Val) or Side) {
		JB_SetRef(D2->Type, SC_TypeInt64);
	}
	(SC_Decl_NumberConstSet(D2, Val));
	JB_SafeDecr(D2);
	return D2;
}

SCObject* SC_TypeOfQues(Message* Exp, SCNode* Name_space, Message* Side) {
	SCObject* Type = nil;
	Message* Prm = ((Message*)JB_Ring_First(Exp));
	if (!JB_Str_Exists(Exp->Name)) {
		Prm = ((Message*)JB_Ring_NextSib(Prm));
	}
	if (Prm) {
		Type = SC_TypeOfExprModulesOK(Prm, Name_space, nil);
	}
	Message* M = SC_Msg_ReplaceInbuiltSub(Exp, SC_Object_AsDecl(Type));
	if (M) {
		SC_Msg_SafeReplaceWith(Exp, M);
	}
	if (!JB_Msg_EqualsSyx(Exp, kJB_SyxQues, false)) {
		return SC_TypeOfExpr(Exp, Name_space, nil);
	}
	return nil;
}

SCObject* SC_TypeOfReal(Message* Exp, SCNode* Name_space, Message* Side) {
	SCDecl* _tmPf0 = SC_TypeOfExpr(((Message*)JB_Ring_First(Exp)), Name_space, nil);
	if (!_tmPf0) {
		return nil;
	}
	return SC_Decl_MakeReal(_tmPf0);
}

SCObject* SC_TypeOfRel(Message* Exp, SCNode* Name_space, Message* Side) {
	JB_Incr(Side);
	Message* Opch = ((Message*)JB_Tree_Second(Exp));
	SCOperator* Comp = SC_Opp__Lookup(Opch);
	Message* RN = ((Message*)JB_Ring_NextSib(Opch));
	JB_Incr(RN);
	if (!RN) {
		JB_Msg_Fail(Exp, JB_LUB[1716]);
		JB_Decr(Side);
		JB_Decr(RN);
		return nil;
	}
	Message* LN = ((Message*)JB_Ring_First(Exp));
	JB_Incr(LN);
	if ((JB_Msg_SyntaxEquals(Opch, JB_LUB[1293], false)) or (JB_Msg_SyntaxEquals(Opch, JB_LUB[1296], false))) {
		SCDecl* _tmPf1 = SC_Msg_NiceIsFlagSyntax(LN, Opch, RN, Name_space, Side);
		JB_Incr(_tmPf1);
		JB_Decr(Side);
		JB_Decr(LN);
		JB_Decr(RN);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	JB_SetRef(Side, nil);
	Message* P = SC_Msg_NiceParent(Exp);
	JB_Incr(P);
	Syntax ParentFunc = P->Func;
	JB_Decr(P);
	bool ShouldBeSet = ((ParentFunc == kJB_SyxArg) or (ParentFunc == kJB_SyxDecl));
	if ((!SC_Opp_SyntaxEquals(Comp, JB_LUB[241], false))) {
		if (ShouldBeSet) {
			if (SC_Opp_SyntaxEquals(Comp, JB_LUB[259], false)) {
				if (true) {
					JB_Msg_Fail(Opch, JB_LUB[1717]);
				}
			}
			 else {
				if (true) {
					JB_Msg_Fail(Opch, JB_LUB[1718]);
				}
			}
		}
	}
	 else if (ShouldBeSet) {
		JB_SetRef(Side, RN);
		(SC_Msg_ASMTypeSet(Exp, kSC__ASMType_kSetRel));
	}
	 else {
		if (true) {
			JB_Msg_Fail(Opch, JB_LUB[1719]);
		}
	}
	SCDecl* RC = nil;
	SCDecl* LC = nil;
	if (Side) {
		RC = SC_TypeOfExprNeeded(RN, Name_space);
		if (RC) {
			LC = SC_TypeOfExpr(LN, Name_space, Side);
			if (((JB_Msg_EqualsSyx(Exp, kJB_SyxRel, false))) and (LN == JB_FreeIfDead(((Message*)JB_Ring_Last(Exp))))) {
				SCObject* _tmPf2 = SC_TypeOfRel(Exp, Name_space, Side);
				JB_Incr(_tmPf2);
				JB_Decr(Side);
				JB_Decr(LN);
				JB_Decr(RN);
				JB_SafeDecr(_tmPf2);
				return _tmPf2;
			}
		}
	}
	 else {
		LC = SC_TypeOfExpr(LN, Name_space, nil);
		RC = SC_TypeOfExprNeeded(RN, Name_space);
	}
	if ((!RC) or ((!LC) or (((!JB_Msg_EqualsSyx(Exp, kJB_SyxRel, false))) or (Side and (!SC_Decl_AssignabilityCheck(LC, LN, RN, RC, false)))))) {
		if (RC and (!LC)) {
			if (true) {
				JB_Msg_Fail(LN, JB_LUB[1720]);
			}
		}
		JB_Decr(Side);
		JB_Decr(LN);
		JB_Decr(RN);
		return nil;
	}
	JB_SetRef(Opch->Obj, Comp);
	if (SC_Opp_SyntaxIs(Comp, kSC__OpMode_AndOr)) {
		JB_Decr(Side);
		JB_Decr(LN);
		JB_Decr(RN);
		return SC_Or_And_Expansion(LC, RC, Exp, Name_space);
	}
	if (RC != SC_TypeNil) {
		SCDecl* IPM = SC_IsPointerMath(LC, RC, Comp, Exp);
		JB_Incr(IPM);
		if (IPM) {
			JB_Decr(Side);
			SCDecl* _tmPf3 = SC_Decl_CheckMath(IPM, Exp);
			JB_Incr(_tmPf3);
			JB_Decr(IPM);
			JB_Decr(LN);
			JB_Decr(RN);
			JB_SafeDecr(_tmPf3);
			return _tmPf3;
		}
		JB_Decr(IPM);
	}
	int Custom = SC_UseCustomOperators(LC, RC, Comp, Exp);
	if (Custom == kSC__CustomOps_Needed) {
		if (!SC_Opp_IsCompOrSet(Comp)) {
			JB_Decr(Side);
			JB_Decr(LN);
			SCDecl* _tmPf4 = SC_CustomFuncOp(Exp, Comp, Name_space, RN);
			JB_Incr(_tmPf4);
			JB_Decr(RN);
			JB_SafeDecr(_tmPf4);
			return _tmPf4;
		}
		if (RC != SC_TypeNil) {
			if ((SC_Opp_SyntaxIs(Comp, kSC__OpMode_CaseAware)) or SC_Opp_CanOpCompare(Comp, LC, RC, Exp)) {
				JB_Decr(Side);
				JB_Decr(LN);
				JB_Decr(RN);
				return SC_DoOpCompare(Exp, LC, RC, Comp, Name_space);
			}
		}
	}
	 else if (SC_Opp_SyntaxIs(Comp, kSC__OpMode_Bit)) {
		if (!(SC_Decl_IntsOnly(RC, RN) and SC_Decl_IntsOnly(LC, LN))) {
			JB_Decr(Side);
			JB_Decr(LN);
			JB_Decr(RN);
			return nil;
		}
	}
	if ((!Side) and (Custom & kSC__CustomOps_TypeCastFromBool)) {
		LC = SC_TypeInt->TypeNormal;
		RC = LC;
	}
	if (Custom > kSC__CustomOps_Needed) {
		SCDecl* _tmPf0 = ((SCDecl*)JB_Ternary(Custom == kSC__CustomOps_OnlyLeftIsVector, LC, RC));
		JB_Decr(Side);
		JB_Decr(LN);
		JB_Decr(RN);
		return SC_Decl_NotLocal((_tmPf0));
	}
	if (SC_Decl_SyntaxIs(LC, kSC__SCDeclInfo_IntendedAsReturn)) {
		JB_SetRef(LN, SC_Msg_MakeAccess0(LN));
		LC = LC->Internal;
		JB_SetRef(LN->Obj, LC);
	}
	if (SC_Decl_ExpectRelMatch(LC, RC, RN, Side, Exp)) {
		JB_SetRef(LN, ((Message*)JB_Ring_First(Exp)));
		JB_SetRef(RN, ((Message*)JB_Ring_Last(Exp)));
		RC = SC_Msg_FastDecl(RN);
		LC = SC_Msg_FastDecl(LN);
	}
	if ((!Side) and (SC_Opp_SyntaxIs(Comp, kSC__OpMode_Compare))) {
		JB_Decr(Side);
		JB_Decr(LN);
		JB_Decr(RN);
		return SC_TypeBool->TypeNormal;
	}
	JB_Decr(Side);
	if (Custom & kSC__CustomOps_RecheckType) {
		LC = ((SCDecl*)Exp->Obj);
	}
	 else {
		if (Custom & (kSC__CustomOps_TypeCastToBetter | kSC__CustomOps_TypeCastToSmaller)) {
			SCDecl* Pc = SC_Decl_Better_Numeric(LC, RC, Comp->Kind, LN, RN);
			JB_Incr(Pc);
			if (SC_Decl_SyntaxIs(Pc, kSC__SCDeclInfo_Const) and (!SC_Decl_SyntaxIs(LC, kSC__SCDeclInfo_Const))) {
				LC = Pc->Type->TypeNormal;
			}
			 else {
				LC = Pc;
			}
			JB_Decr(Pc);
		}
		if (SC_Decl_SyntaxIs(LC, kSC__SCDeclInfo_Const)) {
			if ((SC_Decl_SyntaxIs(RC, kSC__SCDeclInfo_Const)) and (SC_Opp_SyntaxIs(Comp, kSC__OpMode_MathLike))) {
				LC = SC_Decl_CopyDecl(LC, false);
				(SC_Decl_SyntaxIsSet(LC, kSC__SCDeclInfo_Const, true));
				(SC_Decl_SyntaxIsSet(LC, kSC__SCDeclInfo_UnknownConst, true));
			}
			 else {
				LC = LC->Type->TypeNormal;
			}
		}
	}
	JB_Decr(RN);
	JB_Decr(LN);
	return SC_Decl_NotLocal(LC);
}

SCObject* SC_TypeOfSDot(Message* Exp, SCNode* Name_space, Message* Side) {
	SC_Func__Tran_Sdt(Exp);
	return SC_TypeOfDot(Exp, Name_space, Side);
}

SCObject* SC_TypeOfSString(Message* Exp, SCNode* Name_space, Message* Side) {
	return SC_TypeStringZero->TypeReal;
}

SCObject* SC_TypeOfSthg(Message* Exp, SCNode* Name_space, Message* Side) {
	SC_Msg_MakeComment(Exp);
	return nil;
}

SCObject* SC_TypeOfStr(Message* Exp, SCNode* Name_space, Message* Side) {
	SC_Func__String_Expand(Exp, SC_Msg_MsgOwningFunc(Exp));
	return SC_TypeStringZero->TypeReal;
}

SCDecl* SC_TypeOfSwizzle(Message* Exp, SCDecl* Type, SCNode* Name_space, Message* Side, int Swiz) {
	int Count = Swiz >> 16;
	int W = SC_Class_NumericCount(Type->Type);
	if (!((Count == 1) or (Side == nil))) {
		JB_Msg_Fail(Exp, JB_LUB[1858]);
		return nil;
	}
	if (Count > 4) {
		JB_Msg_Fail(Exp, JB_LUB[1859]);
		return nil;
	}
	if (W == 3) {
		W = 4;
	}
	Message* Prms = ((Message*)JB_Ring_Last(Exp));
	JB_Incr(Prms);
	SCClass* _tmPf3 = SC_VecType((!SC_Decl_IsInteger(Type)), Count);
	JB_Incr(_tmPf3);
	SCDecl* T = SC_Class_NotConst(_tmPf3);
	JB_Decr(_tmPf3);
	if (Count == 1) {
		Swiz = (Swiz & 7);
		if (Swiz >= W) {
			JB_Msg_Fail(Prms, JB_LUB[1063]);
			JB_Decr(Prms);
			return nil;
		}
		JB_Msg_BecomeStr(Exp, kJB_SyxAcc, JB_LUB[0]);
		Prms->Func = kJB_SyxArr;
		SC_Msg_DeclAddNumbInt(Prms, Swiz, Name_space);
	}
	 else {
		JB_Tree_Remove(Prms);
		Message* Oof = ((Message*)JB_Ring_First(Exp));
		JB_Incr(Oof);
		JB_String* Tmp = Oof->Name;
		JB_Incr(Tmp);
		if ((JB_Msg_EqualsSyx(Oof, kJB_SyxThg, false))) {
			JB_Tree_Remove(Oof);
		}
		 else {
			NameAndMsg What = ((NameAndMsg){});
			SC_Msg_IntoVariable(Oof, Name_space, (&What));
			JB_SetRef(Oof, What.Arg);
			if (!Oof) {
				SC_NameAndMsg_Destructor((&What));
				JB_Decr(Tmp);
				JB_Decr(Oof);
				JB_Decr(Prms);
				return nil;
			}
			Message* _tmPf4 = ((Message*)JB_Ring_Parent(Oof));
			JB_Incr(_tmPf4);
			JB_SetRef(_tmPf4->Obj, T);
			JB_Decr(_tmPf4);
			Name_space = SC_Msg_AsArg(Oof);
			JB_Msg_BecomeStr(Exp, kJB_SyxBra, JB_LUB[0]);
			Message* _tmPf5 = ((Message*)JB_Ring_Last(Oof));
			JB_Incr(_tmPf5);
			Exp = ((Message*)JB_Ring_Last(_tmPf5));
			JB_Decr(_tmPf5);
			JB_SetRef(Tmp, Exp->Name);
			JB_SetRef(Exp->Obj, T);
			SC_NameAndMsg_Destructor((&What));
		}
		JB_Decr(Oof);
		JB_Msg_BecomeStr(Exp, kJB_SyxList, JB_LUB[0]);
		{
			int I = 0;
			while (I < Count) {
				int Field = (Swiz >> (I * 3)) & 7;
				Message* Item = nil;
				if (Field == 4) {
					Item = JB_Msg_Msg(Exp, kJB_SyxNum, JB_LUB[266]);
				}
				 else {
					if (Field >= W) {
						JB_Msg_Fail(Exp, JB_LUB[1063]);
						JB_Decr(Tmp);
						JB_Decr(Prms);
						return nil;
					}
					Message* Thg = (JB_Syx_Msg(kJB_SyxThg, Tmp));
					JB_Incr(Thg);
					Item = ({
						Message* __imPf1 = (JB_Syx_Msg(kJB_SyxAcc, JB_LUB[0]));
						JB_Incr(__imPf1);
						JB_Tree_SyntaxAppend(__imPf1, Thg);
						Message* _tmPf6 = ({
							Message* __imPf2 = (JB_Syx_Msg(kJB_SyxArr, JB_LUB[0]));
							JB_Incr(__imPf2);
							Message* _tmPf7 = JB_Syx_IntMsg(kJB_SyxNum, Field);
							JB_Incr(_tmPf7);
							JB_Tree_SyntaxAppend(__imPf2, (_tmPf7));
							JB_Decr(_tmPf7);
							JB_SafeDecr(__imPf2);
							 __imPf2;
						});
						JB_Incr(_tmPf6);
						JB_Tree_SyntaxAppend(__imPf1, _tmPf6);
						JB_Decr(_tmPf6);
						JB_SafeDecr(__imPf1);
						 __imPf1;
					});
					JB_Decr(Thg);
					JB_Tree_SyntaxAppend(Exp, Item);
				}
				JB_FreeIfDead(SC_TypeOfExpr(Item, Name_space, nil));
				(++I);
			};
		}
		;
		JB_Decr(Tmp);
	}
	JB_Decr(Prms);
	return T;
}

SCDecl* SC_TypeOfSyntaxCall(Message* Exp, SCNode* Name_space, Message* Side) {
	JB_Msg_BecomeStr(Exp, kJB_SyxDot, JB_LUB[1314]);
	return SC_TypeOfExpr(Exp, Name_space, Side);
}

SCObject* SC_TypeOfSyx(Message* Exp, SCNode* Name_space, Message* Side) {
	Exp->Func = kJB_SyxThg;
	JB_SetRef(Exp->Name, JB_Str_OperatorPlus(JB_LUB[1046], Exp->Name));
	return SC_TypeOfThg(Exp, Name_space, Side);
}

SCObject* SC_TypeOfTernary(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* List = ((Message*)JB_Ring_First(Exp));
	JB_Incr(List);
	Message* Params = ((Message*)JB_Ring_NextSib(List));
	JB_Incr(Params);
	if (!(JB_Ring_HasChildren(List) and JB_Ring_HasChildCount(Params, 1))) {
		JB_Msg_Fail(Exp, JB_LUB[1776]);
		JB_Decr(Params);
		JB_Decr(List);
		return nil;
	}
	Message* First = ((Message*)JB_Ring_First(List));
	JB_Incr(First);
	Message* Second = ((Message*)JB_Ring_NextSib(First));
	JB_Incr(Second);
	if (Second) {
		if (!JB_Msg_ExpectLast(Second, JB_LUB[0])) {
			JB_Decr(Second);
			JB_Decr(First);
			JB_Decr(Params);
			JB_Decr(List);
			return nil;
		}
	}
	 else {
		JB_SetRef(Second, SC_Msg_CreateNil(Exp));
		(JB_Ring_NextSibSet(First, Second));
	}
	Message* Test = JB_Msg_NeedSyx(Params, kJB_SyxNil);
	JB_Incr(Test);
	if (!Test) {
		JB_Decr(Test);
		JB_Decr(Second);
		JB_Decr(First);
		JB_Decr(Params);
		JB_Decr(List);
		return nil;
	}
	SCDecl* Result = SC_SameTypeSub(First, Second, Name_space);
	JB_Incr(Result);
	JB_Decr(First);
	JB_Decr(Second);
	if (Result and SC_Msg_ExpandToBool(Test, Name_space)) {
		Message* _tmPf0 = ((Message*)JB_Ring_First(List));
		JB_Incr(_tmPf0);
		JB_Tree_SyntaxAppend(Params, _tmPf0);
		JB_Decr(_tmPf0);
		JB_Msg_BecomeStr(List, kJB_SyxThg, JB_LUB[1363]);
		JB_SetRef(Params->Obj, SC__Comp_TernaryFunc);
		Message* _tmPf1 = ((Message*)JB_Ring_First(List));
		JB_Incr(_tmPf1);
		JB_Tree_SyntaxAppend(Params, _tmPf1);
		JB_Decr(_tmPf1);
		(SC_Msg_ASMTypeSet(Exp, kSC__ASMType_kTern));
		JB_Decr(Test);
		JB_Decr(Params);
		JB_Decr(List);
		JB_SafeDecr(Result);
		return Result;
	}
	JB_Decr(List);
	JB_Decr(Params);
	JB_Decr(Test);
	JB_Decr(Result);
	return nil;
}

SCObject* SC_TypeOfThg(Message* Exp, SCNode* Name_space, Message* Side) {
	SCObject* R = SC_Base_LookUpVar(Name_space, Exp->Name, Exp, Side);
	if (JB_Object_FastIsa(R, &SCModuleData)) {
		SCClass* Cls = ((SCModule*)R)->Cls;
		if (!Cls) {
			JB_Msg_Fail(Exp, JB_LUB[2006]);
			return nil;
		}
		if (Cls->IsModel) {
			return SC_Class_GetFlyingMemory(Cls, Exp);
		}
		if (SC_Class_IsObject(Cls)) {
			SCDecl* T = Cls->ClassType;
			if (T) {
				JB_SetRef(Exp->Name, T->Name);
				return T;
			}
			if (true) {
				JB_Msg_Fail(Exp, nil);
			}
		}
		if (true) {
			JB_Msg_Fail(Exp, JB_LUB[2007]);
			return nil;
		}
	}
	 else if (JB_Object_FastIsa(R, &SCDeclData)) {
		if (Side) {
			(SC_Decl_SyntaxIsSet(((SCDecl*)R), kSC__SCDeclInfo_SetTo, true));
		}
		 else {
			(SC_Decl_SyntaxIsSet(((SCDecl*)R), kSC__SCDeclInfo_ReadFrom, true));
		}
		JB_Object* O = ((SCDecl*)R)->IsLookupOnly;
		if (JB_Object_Isa(O, &MessageData)) {
			SC_Msg_SafeReplaceWith(Exp, JB_Msg_Copy(((Message*)O), Exp));
		}
		SC_Decl_CheckLibGlob(((SCDecl*)R));
	}
	return R;
}

SCObject* SC_TypeOfType(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* _tmPf0 = ((Message*)JB_Ring_First(Exp));
	JB_Incr(_tmPf0);
	Message* Exp0 = SC_Msg_UnBra(_tmPf0);
	JB_Incr(Exp0);
	JB_Decr(_tmPf0);
	SCDecl* Old = SC_TypeOfExpr(Exp0, Name_space, Side);
	JB_Incr(Old);
	Message* _tmPf1 = ((Message*)JB_Ring_Last(Exp));
	JB_Incr(_tmPf1);
	SCDecl* New = SC_ExtractDecl(_tmPf1, Name_space, kSC__DeclMode_TypeCast, 0);
	JB_Incr(New);
	JB_Decr(_tmPf1);
	if ((!New) or (!Old)) {
		0;
	}
	 else if (SC_Decl_NoStructOrCArrayCasts(Old, Exp0) or SC_Decl_NoStructOrCArrayCasts(New, Exp0)) {
		if (true) {
			JB_Msg_Fail(Exp, JB_LUB[1777]);
		}
	}
	 else if (SC_Decl_NumericCountWithBools(Old) != SC_Decl_NumericCountWithBools(New)) {
		int O = SC_Decl_NumericCountWithBools(Old);
		int N = SC_Decl_NumericCountWithBools(New);
		if (!(((O == 3) or (O == 4)) and ((N == 3) or (N == 4)))) {
			if (true) {
				JB_Msg_Fail(Exp, JB_LUB[1778]);
			}
		}
	}
	 else {
		if (SC_Msg_IsInt(Exp0) and SC_Decl_TypeSuffers(New)) {
			if (SC_Msg_IsZero(Exp0) or SC_Decl_IsNil(Old)) {
				JB_SetRef(New, SC_Decl_MakeNewNil(New));
			}
			 else {
				JB_SetRef(New, SC_Decl_MakeNewReal(New));
			}
		}
		SC_Decl_NoBlindCasts(New, Old, Exp);
	}
	JB_Decr(Exp0);
	JB_Decr(Old);
	JB_SafeDecr(New);
	return New;
}

SCObject* SC_TypeOfUnit(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* It = ((Message*)JB_Ring_First(Exp));
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[91], false)) {
		JB_Msg_BecomeStr(Exp, kJB_SyxBra, JB_LUB[0]);
		It->Func = kJB_SyxNum;
		return SC_TypeOfNum(It, Name_space, Exp);
	}
	Float64 Mul = 0.0f;
	SCClass* Type = SC_TypeInt;
	JB_String* Unit = Exp->Name;
	if ((JB_Str_Equals(Unit, JB_LUB[430], false)) or (JB_Str_Equals(Unit, JB_LUB[800], false))) {
		Mul = ((Float64)(1 << 10));
	}
	 else if ((JB_Str_Equals(Unit, JB_LUB[431], false)) or (JB_Str_Equals(Unit, JB_LUB[801], false))) {
		Mul = ((Float64)(1 << 20));
	}
	 else if ((JB_Str_Equals(Unit, JB_LUB[432], false)) or (JB_Str_Equals(Unit, JB_LUB[802], false))) {
		Mul = ((Float64)(1 << 30));
	}
	 else if ((JB_Str_Equals(Unit, JB_LUB[433], false)) or (JB_Str_Equals(Unit, JB_LUB[85], false))) {
		Mul = ((Float64)(((int64)1) << ((int64)40)));
	}
	 else if (JB_Str_Equals(Unit, JB_LUB[1218], false)) {
		Mul = 0;
	}
	 else {
		Type = SC_TypeDuration;
		Float64 S4 = ((Float64)(64.0f * 1024.0f));
		if (JB_Str_Equals(Unit, JB_LUB[106], false)) {
			Mul = S4;
		}
		 else if (JB_Str_Equals(Unit, JB_LUB[122], false)) {
			Mul = ((Float64)64.0f);
		}
		 else if (JB_Str_Equals(Unit, JB_LUB[1219], false)) {
			Mul = (3.1415926535897932f);
			Type = SC_TypeFloat64;
		}
		 else if (JB_Str_Equals(Unit, JB_LUB[1220], false)) {
			Mul = (6.2831853071795864f);
			Type = SC_TypeFloat64;
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[1221], JB_LUB[1222])) {
			Mul = (86400.0f * S4);
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[1223], JB_LUB[1224])) {
			Mul = (604800.0f * S4);
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[1225], JB_LUB[1226])) {
			Mul = (31536000.0f * S4);
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[1227], JB_LUB[1028])) {
			Mul = (60.0f * S4);
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[1228], JB_LUB[1229])) {
			Mul = (3600.0f * S4);
		}
		 else {
			if (true) {
				JB_Msg_Fail(Exp, JB_LUB[1230]);
			}
		}
	}
	Float64 Val = JB_Msg_Float(It);
	if (!Mul) {
		Val = (1.0f / Val);
		Type = SC_Typefloat;
	}
	 else {
		Val = (Val * Mul);
	}
	JB_String* Str = JB_LUB[0];
	JB_Incr(Str);
	SCDecl* D = SC_Decl_CopyDecl(Type->TypeNormal, false);
	JB_Incr(D);
	uint64 X = ((uint64)Val);
	bool CanFloat = JB_TC_IsFloat(Type->TypeInfo);
	if (!CanFloat) {
		CanFloat = JB_Str_ContainsByte(It->Name, '.');
	}
	if (Type == SC_TypeDuration) {
		JB_SetRef(Str, JB_int64_Render(((int64)Val), nil));
	}
	 else if (CanFloat) {
		JB_SetRef(Str, JB_dbl_Render(Val, 24, nil));
		Float64 Big = ((Float64)(16.0f * (1024.0f * 1024.0f)));
		if ((Val >= Big) or (Val < (-Big))) {
			JB_SetRef(D->Type, SC_TypeFloat64);
			X = JB_dbl_AsInt(Val);
		}
		 else {
			JB_SetRef(D->Type, SC_Typefloat);
			X = JB_f_AsInt(((float)Val));
		}
	}
	 else {
		JB_SetRef(Str, JB_int64_Render(((int64)Val), nil));
		Float64 Big = ((Float64)(((int64)1) << ((int64)31)));
		if ((Val >= Big) or (Val < (-Big))) {
			JB_SetRef(D->Type, SC_TypeInt64);
		}
		if (Mul == ((Float64)1)) {
			X = JB_Msg_Int(It, 0);
		}
	}
	(SC_Decl_NumberConstSet(D, X));
	if (JB_Msg_SyntaxEquals(It, Str, false)) {
		JB_SetRef(Str, It->Name);
	}
	JB_Msg_BecomeStr(Exp, kJB_SyxNum, Str);
	JB_Decr(Str);
	JB_Tree_Clear(Exp);
	JB_SafeDecr(D);
	return D;
}

SCDecl* SC_TypeOfVecAccess(Message* Index, SCDecl* Ty0, int W) {
	if (JB_Msg_EqualsSyx(Index, kJB_SyxNum, false)) {
		if (!JB_int64_OperatorInRange(JB_Msg_Int(Index, 0), W)) {
			JB_Msg_Fail(Index, JB_LUB[1063]);
			return nil;
		}
	}
	if (JB_TC_IsFloat(Ty0->Type->TypeInfo)) {
		return SC_Class_NotConst(SC_Typefloat);
	}
	return SC_Class_NotConst(SC_TypeInt);
}

JB_String* SC_UniqueTmpVar(SCNode* Base, JB_String* Name) {
	JB_FS_AppendByte(SC_fs_tmp_num, '_');
	JB_FS_AppendString(SC_fs_tmp_num, Name);
	if (Base) {
		SCFunction* FN = SC_Base_OwningFunc(Base);
		if (FN) {
			JB_FS_AppendByte(SC_fs_tmp_num, 'f');
			JB_FS_AppendInt32(SC_fs_tmp_num, ((int)FN->TmpCounter++));
		}
	}
	 else {
		JB_FS_AppendInt32(SC_fs_tmp_num, SC__SC_UniqueNum++);
	}
	return JB_FS_SyntaxCast(SC_fs_tmp_num);
}

int SC_UseCustomOperators(SCDecl* LC, SCDecl* RC, SCOperator* Comp, Message* MsgRel) {
	if (SC_Opp_SyntaxIs(Comp, kSC__OpMode_Custom) or SC_Opp_SyntaxIs(Comp, kSC__OpMode_CaseAware)) {
		return kSC__CustomOps_Needed;
	}
	bool CompOrSet = SC_Opp_IsCompOrSet(Comp);
	uint LNT = SC_Decl_TypeInfo(LC);
	uint RNT = SC_Decl_TypeInfo(RC);
	int LN = SC_TC_NumericCountBoolsToo(LNT, LC);
	int RN = SC_TC_NumericCountBoolsToo(RNT, RC);
	if (JB_TC_SyntaxIs(LNT, kJB__TC_Numeric) and JB_TC_SyntaxIs(RNT, kJB__TC_Numeric)) {
		if ((SC_Opp_SyntaxIs(Comp, kSC__OpMode_Comparison)) and (JB_TC_IsSigned(LNT) != JB_TC_IsSigned(RNT))) {
			if (SC_Decl_CompareUnclear(LC, RC, ((bool)(SC_Opp_SyntaxIs(Comp, kSC__OpMode_Less)))) or SC_Decl_CompareUnclear(RC, LC, ((bool)(SC_Opp_SyntaxIs(Comp, kSC__OpMode_More))))) {
				if (true) {
					JB_Msg_Fail(MsgRel, JB_LUB[1064]);
				}
			}
		}
	}
	if (!(LN and (LN == RN))) {
		if (LN and (RN and ((LN == 1) or (RN == 1)))) {
			if (CompOrSet) {
				return kSC__CustomOps_Needed;
			}
			if (SC_Opp_SyntaxIs(Comp, kSC__OpMode_Multiply)) {
				SCClass* B = SC_TypeBool;
				if (SC_Decl_OperatorExact_isa(LC, B)) {
					return kSC__CustomOps_OnlyRightIsVector;
				}
				if (SC_Decl_OperatorExact_isa(RC, B)) {
					return kSC__CustomOps_OnlyLeftIsVector;
				}
			}
			if (!JB_TC_SameBasicType(LNT, RNT)) {
				JB_Msg_Fail(MsgRel, JB_LUB[1065]);
				return 0;
			}
			if (LN > RN) {
				return kSC__CustomOps_OnlyLeftIsVector;
			}
			 else {
				return kSC__CustomOps_OnlyRightIsVector;
			}
		}
		return kSC__CustomOps_Needed;
	}
	int Extra = 0;
	if (LN and RN) {
		bool GotABool = ((kJB__TC_bool == LNT) or (kJB__TC_bool == RNT));
		if (LNT != RNT) {
			if ((GotABool and SC_Opp_SyntaxIs(Comp, kSC__OpMode_Compare))) {
				JB_Msg_Fail(MsgRel, JB_LUB[1066]);
				return 0;
			}
			if (SC_Opp_SyntaxIs(Comp, kSC__OpMode_MathLike)) {
				if (SC_Opp_SyntaxIs(Comp, kSC__OpMode_NoExtraBits)) {
					if (SC_Opp_SyntaxIs(Comp, kSC__OpMode_LoseBits)) {
						Extra = kSC__CustomOps_TypeCastToSmaller;
					}
				}
				 else if ((SC_Opp_SyntaxIs(Comp, kSC__OpMode_ShiftOnly)) and ((JB_TC_IsFloat(LNT)) and (JB_TC_IsInt(RNT)))) {
					Extra = kSC__CustomOps_Needed;
				}
				 else {
					Extra = kSC__CustomOps_TypeCastToBetter;
				}
			}
		}
		 else {
			if (GotABool and (!((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_Compare)))) {
				Extra = kSC__CustomOps_TypeCastFromBool;
			}
			 else if ((SC_Opp_SyntaxIs(Comp, kSC__OpMode_MakesSigned)) and SC_Decl_IsUintLike(LC)) {
				Extra = kSC__CustomOps_TypeCastToBetter;
			}
		}
	}
	if ((!SC__Base_ConstantsLoadingOverride) and SC_Class_SyntaxIs(LC->Type, kSC__ClassInfo_TreatAsBaseType)) {
		return kSC__CustomOps_Needed | Extra;
	}
	if ((LN > 1) and CompOrSet) {
		return kSC__CustomOps_Needed | Extra;
	}
	if (!Extra) {
		SCClass* T = LC->Type;
		if (T->Super and SC_Class_HasOperator(T, Comp->FuncName)) {
			return kSC__CustomOps_Needed;
		}
	}
	if (SC_Opp_SyntaxIs(Comp, kSC__OpMode_ShiftOnly) and SC_Decl_SyntaxIs(RC, kSC__SCDeclInfo_Const)) {
		bool IsLeft = Comp == SC__Opp_LeftShift;
		if (!SC_Decl_SyntaxIs(LC, kSC__SCDeclInfo_Const)) {
			SC_Msg_CheckConstShift(MsgRel, LC, RC, IsLeft);
		}
		if ((IsLeft) and (SC_Decl_SyntaxIs(LC, kSC__SCDeclInfo_Const))) {
			Extra = (Extra | SC_Msg_TryImproveShiftConstants(MsgRel, LC, RC));
		}
	}
	return Extra;
}

SCClass* SC_VecType(bool Isfloat, int Count) {
	if (Isfloat) {
		if (Count == 2) {
			return SC_TypeVec2;
		}
		if (Count == 3) {
			return SC_TypeVec3;
		}
		if (Count == 4) {
			return SC_TypeVec4;
		}
		return SC_Typefloat;
	}
	if (Count == 2) {
		return SC_TypeiVec2;
	}
	if (Count == 3) {
		return SC_TypeiVec3;
	}
	if (Count == 4) {
		return SC_TypeiVec4;
	}
	return SC_TypeInt;
}


Message* JB_Tk__AddToOutput(Message* Output, Message* Curr, Message* Prev, int Pos) {
	if (Prev) {
		int Extra = JB_Msg_PrevIndentCheck(Curr, Prev);
		if (Extra < 0) {
			return JB_Tk__LoweredIndent(Output, Curr);
		}
		if (Extra > 0) {
			if ((Extra == 2) and (JB_int_OperatorIsa(((int)Prev->Indent), 4))) {
				return JB_Tk__ElseIfAdder(Prev, Curr);
			}
			return JB_Msg_GoIntoInvisArg(Curr, Prev, Pos);
		}
	}
	JB_Tree_SyntaxAppend(Output, Curr);
	return Output;
}

void JB_Tk__AddXMLText(Message* XML, JB_String* S, int Start, int I) {
	Ind A = JB_Str_OutWhite(S, Start, JB_int__Max());
	if (A >= I) {
		return;
	}
	JB_String* Str = JB_Str_Range(S, Start, I);
	JB_Incr(Str);
	JB_String* Str2 = JB_Str_Trim(Str, nil);
	JB_Incr(Str2);
	JB_Decr(Str);
	JB_String* Str3 = JB_Str_MultiReplaceAll(Str2, JB__Constants_XML_UnEscapeStr, JB_StdErr);
	JB_Incr(Str3);
	JB_Decr(Str2);
	JB_FreeIfDead(JB_Tk__NewParentName(XML, kJB_SyxXTxt, Start, Str3));
	JB_Decr(Str3);
}

Message* JB_Tk__BarThings(int Start, Syntax Syx) {
	Message* Rz = nil;
	JB_Incr(Rz);
	if (JB_Tk__NextByte() == '=') {
		JB_Decr(Rz);
		return nil;
	}
	JB__Tk__StopBars = (kJB__Tk_kTemporalSyx | kJB__Tk_kFuncAfterBar);
	Message* Item = JB_Tk__ProcessThingNoBar(kJB__Tk_kOppNoBar, false);
	JB_Incr(Item);
	if (Item) {
		JB_SetRef(Item, JB_Tk__ParseItem(Item, 0, kJB__Tk_kOppNoBar));
	}
	 else {
		JB_SetRef(Item, JB_Tk__NewEmpty(nil, kJB_SyxEmb, Start, Start));
	}
	JB__Tk__StopBars = 0;
	if (!JB_Tk__ExpectEndChar(JB_Tk__NextStart(), JB_LUB[285], true)) {
		JB_Decr(Item);
		JB_Decr(Rz);
		return nil;
	}
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, Syx, Start, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Rz, Item);
	JB_Decr(Item);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__BeforeRelSub(int Start, bool Mode) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Tk__NewParent(nil, kJB_SyxBRel, Start, JB_Tk__NextStart()));
	Message* _tmPf0 = JB_Tk__ProcessThing(0, Mode);
	JB_Incr(_tmPf0);
	if (!_tmPf0) {
		JB_Decr(_tmPf0);
		JB_Decr(Rz);
		return nil;
	}
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(Rz);
	return Rz;
}

bool JB_Tk__CanDot() {
	return JB_CS_HasChar(JB__Constants_CSAfterDot, JB_Tk__NextByte());
}

bool JB_Tk__CanStatement() {
	return JB_CS_HasChar(JB__Constants_CSAfterStatement, JB_Tk__NextByte());
}

Message* JB_Tk__ChainTemporalRels(Message* FirstThing, Message* Opp) {
	Message* Rz = nil;
	JB_Incr(Rz);
	if (JB_Msg_EqualsSyx(Opp, kJB_SyxSCom, false)) {
		JB_Tree_SyntaxAppend(Opp, FirstThing);
		JB_Decr(Rz);
		return Opp;
	}
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, kJB_SyxTRel, FirstThing->Position, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Rz, FirstThing);
	JB_Tree_SyntaxAppend(Rz, Opp);
	if (!JB_Tk__WillEnd()) {
		Message* Last = JB_Tk__ProcessThingOrTmp(kJB__Tk_kOpp);
		JB_Incr(Last);
		if (Last) {
			Message* _tmPf0 = JB_Tk__FixTRels(Rz, Last);
			JB_Incr(_tmPf0);
			JB_Decr(Last);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(Last);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* JB_Tk__CharName(int Start, uint /*byte*/ Find) {
	JB_String* _tmPf0 = JB_Tk__GetData();
	Ind After = JB_Str_JBFind(_tmPf0, Find, Start + 1, JB_int__Max());
	if (JB_Ind_SyntaxCast(After)) {
		(JB_Tk__NextStartSet(After + 1));
		JB_String* _tmPf1 = JB_Tk__SyntaxAccess(Start + 1, After, kJB_SyxChar);
		JB_Incr(_tmPf1);
		JB_String* _tmPf2 = JB_Str_Unescape(_tmPf1);
		JB_Incr(_tmPf2);
		JB_Decr(_tmPf1);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	return nil;
}

Message* JB_Tk__CloseXML(Message* XML, int I, JB_String* S) {
	Ind CloseEnd = JB_Str_FindByte(S, '>', I + 2, JB_int__Max());
	if ((!JB_Ind_SyntaxCast(CloseEnd))) {
		return JB_Tk__ErrorAdd(JB_LUB[746], I);
	}
	JB_String* CloseName = JB_Str_Range(S, I + 2, CloseEnd);
	JB_Incr(CloseName);
	if ((!JB_Str_Equals(CloseName, XML->Name, false))) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[747]);
		JB_FS_AppendString(_fsf0, CloseName);
		JB_FS_AppendString(_fsf0, JB_LUB[748]);
		JB_FS_AppendString(_fsf0, XML->Name);
		JB_FS_AppendByte(_fsf0, '>');
		JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf1);
		JB_Decr(_fsf0);
		Message* _tmPf2 = JB_Tk__ErrorAdd(_tmPf1, I);
		JB_Incr(_tmPf2);
		JB_Decr(_tmPf1);
		JB_Decr(CloseName);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_Decr(CloseName);
	(JB_Tk__NextStartSet((++CloseEnd)));
	XML->RangeLength = (XML->Position - CloseEnd);
	return XML;
}

Message* JB_Tk__DecorateThing(Message* R, int Ops) {
	JB_Incr(R);
	JB_SetRef(R, JB_Tk__GetFuncAfter(R));
	if (JB_Tk__WillEnd()) {
		JB_SafeDecr(R);
		return R;
	}
	int NotTemp = Ops & (~kJB__Tk_kOppTemporal);
	if (NotTemp and (!JB_Msg_EqualsSyx(R, kJB_SyxArg, false))) {
		JB_SetRef(R, JB_Tk__MakeRel(R, NotTemp));
	}
	if (Ops & kJB__Tk_kOppTemporal) {
		Message* Opp = JB_Tk__Process(kJB__Tk_kOppTemporal, false, nil);
		JB_Incr(Opp);
		if (Opp) {
			if (JB_Msg_SyntaxEquals(Opp, JB_LUB[818], false)) {
				Message* A = JB_Tk__PostInnerAdj(R, Opp);
				JB_Incr(A);
				if (!A) {
					JB_Decr(A);
					JB_Decr(Opp);
					JB_SafeDecr(R);
					return R;
				}
				JB_Decr(R);
				Message* _tmPf1 = JB_Tk__DecorateThing(A, Ops);
				JB_Incr(_tmPf1);
				JB_Decr(A);
				JB_Decr(Opp);
				JB_SafeDecr(_tmPf1);
				return _tmPf1;
			}
			Message* _tmPf0 = JB_Tk__ChainTemporalRels(R, Opp);
			JB_Incr(_tmPf0);
			JB_Decr(R);
			JB_Decr(Opp);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(Opp);
	}
	JB_SafeDecr(R);
	return R;
}

Message* JB_Tk__DotSub(Syntax Fn, int Start, Message* Parent) {
	Message* Rz = nil;
	int After = JB_Tk__Byte((++Start));
	if (JB_CS_HasChar(JB__Constants_CSWordStart, After)) {
		After = JB_Tk__WordAfter(Start);
		if (!After) {
			return nil;
		}
	}
	 else if (JB__Tk__DotInsertAllow) {
		After = Start;
		JB__Tk__DotInsertAllow = false;
	}
	 else {
		return JB_Tk__ErrorAdd(JB_LUB[1583], Start);
	}
	Rz = JB_Tk__NewSkip(nil, Fn, Start - 1, Start, After);
	if (JB_Tk__EatString(JB_LUB[1584])) {
		JB_Tk__Params(Rz, After);
	}
	 else {
		Message* Prms = JB_Tk__NewEmpty(Rz, kJB_SyxEmb, After, After);
		if (((JB_Msg_EqualsSyx(Parent, kJB_SyxArg, false))) and JB_Tk__CanDot()) {
			Message* P = JB_Tk__ProcessThingParent(Prms, kJB__Tk_kOpp, kJB__Tk_kThing);
			if (P) {
				JB_Tree_SyntaxAppend(Prms, P);
				Prms->Func = kJB_SyxPrm;
			}
		}
	}
	return Rz;
}

Message* JB_Tk__ElseIfAdder(Message* Prev, Message* Curr) {
	Syntax Cf = Curr->Func;
	if ((Prev->Func != kJB_SyxTmp) or ((Cf != kJB_SyxTmp) and (Cf != kJB_SyxBra))) {
		return JB_Tk__UnexpectedSyntax(Curr);
	}
	if (Curr->Indent & 1) {
		return JB_Tk__ErrorAdd(JB_LUB[819], Curr->Position);
	}
	JB_FreeIfDead(JB_Tk__NewParentName(Prev, kJB_SyxArg, Curr->Position, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Prev, Curr);
	return Prev;
}

int JB_Tk__EmbeddedCode(JB_String* Close, Message* Dest, int TmpFlags) {
	JB_String* _tmPf2 = JB_Tk__GetData();
	Ind Result = JB_Str_InStr(_tmPf2, Close, JB_Tk__NextStart(), JB_int__Max(), false);
	if (!JB_Ind_SyntaxCast(Result)) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[1381]);
		JB_FS_AppendString(_fsf0, Close);
		JB_String* _tmPf3 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf3);
		JB_Decr(_fsf0);
		JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf3, JB_Tk__NextStart()));
		JB_Decr(_tmPf3);
		return Result;
	}
	JB_Tk__ParseLoop(Dest, TmpFlags);
	if (JB_Tk__NextStart() > Result) {
		FastString* _fsf1 = JB_FS_Constructor(nil);
		JB_Incr(_fsf1);
		JB_FS_AppendString(_fsf1, JB_LUB[1382]);
		JB_FS_AppendString(_fsf1, Close);
		JB_FS_AppendString(_fsf1, JB_LUB[1383]);
		JB_String* _tmPf4 = JB_FS_GetResult(_fsf1);
		JB_Incr(_tmPf4);
		JB_Decr(_fsf1);
		JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf4, Result));
		JB_Decr(_tmPf4);
		return Result;
	}
	Result = (Result + JB_Str_Length(Close));
	(JB_Tk__NextStartSet(Result));
	return Result;
}

Message* JB_Tk__ErrorAdd(JB_String* S, Ind Start) {
	if (JB_Tk__OK()) {
		return JB_Tk__ErrorAlwaysAdd(S, Start);
	}
	return nil;
}

Message* JB_Tk__ErrorAlwaysAdd(JB_String* S, Ind Start) {
	(JB_Tk__ErrorStartSet(Start));
	Message* _tmPf0 = JB_Msg_ConstructorEmpty(nil);
	JB_Incr(_tmPf0);
	JB_Error* Err = JB_Err_Constructor(nil, _tmPf0, JB_LUB[0], kJB__ErrorSeverity_Error, JB_LUB[0]);
	JB_Incr(Err);
	JB_Decr(_tmPf0);
	Err->Position = Start;
	(JB_Err_SyntaxIsSet(Err, kJB__ErrorFlags_DontStrip, true));
	(JB_Err_SyntaxIsSet(Err, kJB__ErrorFlags_Parse, true));
	JB_SetRef(Err->Name, S);
	JB_SetRef(Err->OriginalData, JB_Tk__GetData());
	JB_Rec_AppendErr(((JB_ErrorReceiver*)nil), Err);
	JB_Decr(Err);
	return nil;
}

void JB_Tk__ErrorEvent(int Start, int ExpectedBits, int RealBits) {
	//visible;
	FastString* Err = JB_FS_Constructor(nil);
	JB_Incr(Err);
	if (!(RealBits & kJB__Tk_kIllegalChar)) {
		if (!(ExpectedBits and (RealBits and JB_Tk__FindError(ExpectedBits)))) {
			JB_FS_AppendString(Err, JB_LUB[592]);
		}
		 else {
			{
				int _Valuef1 = 0;
				while (_Valuef1 < 5) {
					ExpectedBits = JB_Tk__MessageErrorSub(Err, ExpectedBits);
					(++_Valuef1);
					if ((!ExpectedBits)) {
						break;
					}
				};
			}
			;
			JB_FS_AppendString(Err, JB_LUB[740]);
		}
	}
	if (RealBits == kJB__Tk_kEndOfLine) {
		JB_FS_AppendString(Err, JB_LUB[749]);
	}
	 else if (!RealBits) {
		JB_FS_AppendString(Err, JB_LUB[750]);
	}
	 else {
		if (JB_Tk__NextStart() <= Start) {
			(JB_Tk__NextStartSet(Start + 1));
		}
		if (RealBits & kJB__Tk_kIllegalChar) {
			JB_FS_AppendString(Err, JB_LUB[751]);
			uint Illegal = JB_Tk__Byte(Start);
			if (JB_byte_CanPrintAsNormalChar(Illegal)) {
				JB_FS_AppendByte(Err, '\'');
				JB_FS_AppendByte(Err, JB_Tk__Byte(Start));
				JB_FS_AppendByte(Err, '\'');
			}
			 else {
				JB_FS_AppendString(Err, JB_LUB[429]);
				JB_FS_AppendHex(Err, Illegal, 2);
				JB_FS_AppendByte(Err, ' ');
			}
		}
		 else {
			JB_FS_AppendByte(Err, '\'');
			Ind N = JB_int_OperatorMin(JB_Tk__NextStart(), (Start + 100));
			JB_String* _tmPf3 = JB_Tk__SyntaxAccess(Start, N, kJB_SyxNil);
			JB_Incr(_tmPf3);
			JB_String* _tmPf2 = JB_Str_Escape(_tmPf3);
			JB_Incr(_tmPf2);
			JB_Decr(_tmPf3);
			JB_FS_AppendString(Err, _tmPf2);
			JB_Decr(_tmPf2);
			JB_FS_AppendByte(Err, '\'');
		}
	}
	JB_String* _tmPf4 = JB_FS_SyntaxCast(Err);
	JB_Incr(_tmPf4);
	JB_Decr(Err);
	JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf4, Start));
	JB_Decr(_tmPf4);
}

void JB_Tk__ErrorLetter(int Start) {
	JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[752], Start));
}

bool JB_Tk__ExpectEndChar(int Start, JB_String* S, bool Expect) {
	JB_Tk__CleanSpaces();
	if (JB_Tk__EatString(S)) {
		return true;
	}
	if (Expect) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[753]);
		JB_FS_AppendString(_fsf0, S);
		JB_FS_AppendByte(_fsf0, '\'');
		JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf1);
		JB_Decr(_fsf0);
		JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf1, Start));
		JB_Decr(_tmPf1);
	}
	return false;
}

Message* JB_Tk__fAccess(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	Ind Pos = ((Ind)JB_Ternary(Parent, Parent->Position, ((Ind)Start)));
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, kJB_SyxAcc, Pos, JB_LUB[0]));
	Message* Prms = JB_Tk__NewParentName(Rz, kJB_SyxArr, Start, JB_LUB[0]);
	JB_Incr(Prms);
	JB_Tk__ParseLoopFlags(Prms, JB_LUB[1556], 0);
	(JB_Msg_AfterSet(Rz, JB_Msg_After(Prms)));
	JB_Decr(Prms);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fAdjectiveOp(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, kJB_SyxAdj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Tk__Process(kJB__Tk_kOppChain, kJB__Tk_kExpect, nil);
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fAdjectiveThing(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, kJB_SyxAdj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Tk__ProcessThing(0, kJB__Tk_kExpect);
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fAfterRel(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, kJB_SyxARel, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fArgColon(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, kJB_SyxArg, Start, JB_LUB[0]));
	Rz->RangeLength = 1;
	while (true) {
		Message* Item = JB_Tk__Process(kJB__Tk_kTemporal, false, Rz);
		JB_Incr(Item);
		if (!Item) {
			JB_SetRef(Item, JB_Tk__ProcessThing(kJB__Tk_kOpp, false));
		}
		JB_Tree_SyntaxAppend(Rz, Item);
		if (!(Item and JB_Tk__Allow(kJB__Tk_kComma))) {
			JB_Decr(Item);
			break;
		}
		JB_Decr(Item);
	};
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fArgName(int Start, Message* Parent) {
	if (Parent) {
		Syntax F = Parent->Func;
		if ((F == kJB_SyxArg) or ((F == kJB_SyxList) or ((F == kJB_SyxBra) or (F == kJB_SyxArr)))) {
			JB_String* Name = JB_Tk__CharName(Start + 1, '"');
			JB_Incr(Name);
			if (Name != nil) {
				JB_SetRef(Parent->Name, Name);
				JB_Decr(Name);
				return Parent;
			}
			JB_Decr(Name);
		}
	}
	return nil;
}

Message* JB_Tk__fArgOpen(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, kJB_SyxArg, Start, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(Rz, JB_LUB[1557], kJB__Tk_kTemporal);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fArray(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, kJB_SyxArr, Start, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(Rz, JB_LUB[1556], kJB__Tk_kTemporalSyxNoBar);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fAsk(int Start, Message* Parent) {
	return JB_Tk__fAskSub(Start, Parent, kJB_SyxAsk);
}

Message* JB_Tk__fAskSub(int Start, Message* Parent, Syntax F) {
	Message* Rz = nil;
	JB_Incr(Rz);
	Message* Opp = JB_Tk__Process(kJB__Tk_kOpp, kJB__Tk_kExpect, nil);
	JB_Incr(Opp);
	Message* First = JB_Tk__ProcessThing(kJB__Tk_kOppSyx, kJB__Tk_kExpect);
	JB_Incr(First);
	if (!(First and Opp)) {
		JB_Decr(First);
		JB_Decr(Opp);
		JB_Decr(Rz);
		return nil;
	}
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, F, Start, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Rz, First);
	JB_Decr(First);
	Message* NeedsAdj = JB_Tk__Process(kJB__Tk_kOpp, kJB__Tk_kAllow, nil);
	JB_Incr(NeedsAdj);
	if (!NeedsAdj) {
		JB_Tree_SyntaxAppend(Rz, Opp);
	}
	 else {
		Message* Adj = JB_Tk__NewParentName(Rz, kJB_SyxAdj, NeedsAdj->Position, JB_LUB[0]);
		JB_Incr(Adj);
		JB_Tree_SyntaxAppend(Adj, Opp);
		JB_Tree_SyntaxAppend(Adj, NeedsAdj);
		JB_Decr(Adj);
		Message* _tmPf0 = JB_Tk__ProcessThingParent(Rz, kJB__Tk_kOppSyx, kJB__Tk_kThing);
		JB_Incr(_tmPf0);
		JB_Tree_SyntaxAppend(Rz, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Opp);
	JB_Decr(NeedsAdj);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fAtName(int Start, Message* Parent) {
	return JB_Tk__NewWord(nil, kJB_SyxName, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fAtNamedExp(int Start, Message* Parent) {
	if (!(Parent and JB_Tk__NeedName(Parent))) {
		return nil;
	}
	Parent->Func = kJB_SyxName;
	Message* _tmPf0 = JB_Tk__ProcessThing(0, kJB__Tk_kExpect);
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(Parent, _tmPf0);
	JB_Decr(_tmPf0);
	return Parent;
}

Message* JB_Tk__fBackTick(int Start, Message* Parent) {
	JB_String* _tmPf0 = JB_Tk__GetData();
	Ind After = JB_Str_FindByte(_tmPf0, '`', JB_Tk__NextStart(), JB_int__Max());
	if (!JB_Ind_SyntaxCast(After)) {
		return JB_Tk__ErrorAdd(JB_LUB[762], Start);
	}
	(JB_Tk__NextStartSet(After + 1));
	return JB_Tk__NewSkip(nil, kJB_SyxBack, Start, Start + 1, After);
}

Message* JB_Tk__fBAdjectiveOp(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, kJB_SyxBadj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Tk__Process(kJB__Tk_kOppChain, kJB__Tk_kExpect, nil);
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Tree_SyntaxAppend(Rz, Parent);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fBAdjectiveThing(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, kJB_SyxBadj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Tk__ProcessThing(0, kJB__Tk_kExpect);
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Tree_SyntaxAppend(Rz, Parent);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fBeforeRel(int Start, Message* Parent) {
	return JB_Tk__BeforeRelSub(Start, kJB__Tk_kAllow);
}

Message* JB_Tk__fBeforeRelMinus(int Start, Message* Parent) {
	uint C = JB_Tk__Byte(Start + 1);
	if (JB_byte_IsInt(C) and (JB_Tk__Byte(Start) == '-')) {
		return JB_Tk__NumberSub(Start + 1, Start);
	}
	return JB_Tk__BeforeRelSub(Start, kJB__Tk_kAllow);
}

Message* JB_Tk__fBinary(int Start, Message* Parent) {
	JB_String* _tmPf0 = JB_Tk__GetData();
	Ind End = JB_Str_InStr(_tmPf0, JB_LUB[130], Start + 2, JB_int__Max(), false);
	if (JB_Ind_SyntaxCast(End)) {
		JB_String* S = JB_Tk__SyntaxAccess(Start + 2, End, kJB_SyxBin);
		JB_Incr(S);
		(JB_Tk__NextStartSet(End + 2));
		JB_String* _tmPf1 = JB_Str_UnHex(S, nil);
		JB_Incr(_tmPf1);
		JB_Decr(S);
		Message* _tmPf2 = JB_Tk__NewParentName(nil, kJB_SyxBin, Start, _tmPf1);
		JB_Incr(_tmPf2);
		JB_Decr(_tmPf1);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	return JB_Tk__ErrorAdd(JB_LUB[763], Start);
}

Message* JB_Tk__fBracket(int Start, Message* Parent) {
	Message* Rz = nil;
	Rz = JB_Tk__NewParentName(nil, kJB_SyxList, Start, JB_LUB[0]);
	bool Lines = JB_Tk__ParseLoopFlags(Rz, JB_LUB[821], kJB__Tk_kTemporalSyxNoBar);
	if ((!Lines) and JB_Ring_HasChildCount(Rz, 1)) {
		JB_Msg_BecomeStr(Rz, kJB_SyxBra, JB_LUB[0]);
	}
	return Rz;
}

Message* JB_Tk__fChar(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Tk__fCharSub(Start, Start, '\''));
	if (!Rz) {
		JB_Decr(Rz);
		return JB_Tk__ErrorAdd(JB_LUB[764], JB_Tk__NextStart());
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fCharSub(int Pos, int Start, uint /*byte*/ Find) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_String* Name = JB_Tk__CharName(Start, Find);
	JB_Incr(Name);
	if (Name != nil) {
		JB_SetRef(Rz, JB_Tk__NewParentName(nil, kJB_SyxChar, Pos, Name));
	}
	JB_Decr(Name);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fComment(int Start, Message* Parent) {
	int Count = 1;
	Ind I = JB_Tk__NextStart();
	JB_String* D = JB_Tk__GetData();
	JB_Incr(D);
	while (true) {
		I = JB_Str_FindByte(D, '/', I + 1, JB_int__Max());
		if (!JB_Ind_SyntaxCast(I)) {
			JB_Decr(D);
			return JB_Tk__ErrorAdd(JB_LUB[765], Start);
		}
		 else if (JB_Str_ByteValue(D, I - 1) == '*') {
			(--Count);
		}
		 else if (JB_Str_ByteValue(D, I + 1) == '*') {
			(++Count);
			I = (I + 2);
		}
		if ((!Count)) {
			break;
		}
	};
	JB_Decr(D);
	(JB_Tk__NextStartSet(I + 1));
	return JB__Tk__EndOfLineMarker;
}

Message* JB_Tk__fCommentLine(int Start, Message* Parent) {
	JB_Tk__GotoEndOfLine(JB_Tk__NextStart());
	return JB__Tk__EndOfLineMarker;
}

Message* JB_Tk__fDecl(int Start, Message* Parent) {
	Message* Result = JB_Tk__BarThings(Start, kJB_SyxDecl);
	JB_Incr(Result);
	if (Result and (!JB_Tk__WillEnd())) {
		Message* Curr = JB_Tk__ProcessThing(kJB__Tk_kOppSyx | kJB__Tk_kOppTemporal, false);
		JB_Incr(Curr);
		if (Curr) {
			JB_Tree_SyntaxAppend(Result, Curr);
		}
		JB_Decr(Curr);
	}
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fDot(int Start, Message* Parent) {
	Message* _tmPf0 = ((Message*)JB_Ring_Parent(Parent));
	JB_Incr(_tmPf0);
	Message* _tmPf1 = JB_Tk__DotSub(kJB_SyxDot, Start, _tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Tk__fDotAccess(int Start, Message* Parent) {
	Message* Rz = nil;
	int N = JB_Tk__NextStart();
	Message* Name = JB_Tk__NewWord(nil, kJB_SyxStr, N, N);
	int After = JB_Tk__NextStart();
	JB_SetRef(Name->Name, JB_Str_ReplaceAll(Name->Name, JB_LUB[362], JB_LUB[27], false, nil));
	Rz = JB_Tk__NewEmpty(nil, kJB_SyxAcc, Start, After);
	Message* Prms = JB_Tk__NewEmpty(Rz, kJB_SyxArr, Start, Start);
	JB_Tree_SyntaxAppend(Prms, Name);
	return Rz;
}

Message* JB_Tk__fEndOfLine(int Start, Message* Parent) {
	return JB__Tk__EndOfLineMarker;
}

Message* JB_Tk__fError(int Start, Message* Parent) {
	return nil;
}

Message* JB_Tk__fError2(int Start, Message* Parent) {
	return JB_Tk__ErrorAdd(JB_LUB[758], Start);
}

Message* JB_Tk__fFuncCall(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, kJB_SyxFunc, Parent->Position, JB_LUB[0]));
	JB_Tk__Params(Rz, Start);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__FillXML(Message* XML, Ind I) {
	JB_String* S = JB_Tk__GetData();
	JB_Incr(S);
	if (JB_Str_ByteValue(S, I - 1) == '/') {
		(JB_Tk__NextStartSet(I + 1));
		JB_Decr(S);
		return XML;
	}
	(JB_Tk__NextStartSet(I));
	while (true) {
		int Prev = JB_Tk__NextStart();
		I = JB_Str_FindByte(S, '<', Prev, JB_int__Max());
		if (!JB_Ind_SyntaxCast(I)) {
			JB_Decr(S);
			return JB_Tk__ErrorAdd(JB_LUB[820], XML->Position);
		}
		JB_Tk__AddXMLText(XML, S, Prev, I);
		(JB_Tk__NextStartSet(I));
		uint Next = JB_Str_ByteValue(S, I + 1);
		if (Next == '/') {
			Message* _tmPf3 = JB_Tk__CloseXML(XML, I, S);
			JB_Incr(_tmPf3);
			JB_Decr(S);
			JB_SafeDecr(_tmPf3);
			return _tmPf3;
		}
		if (Next != '!') {
			Message* _tmPf0 = JB_Tk__fXML(I, nil);
			JB_Incr(_tmPf0);
			if (!_tmPf0) {
				JB_Decr(_tmPf0);
				JB_Decr(S);
				return nil;
			}
			JB_Tree_SyntaxAppend(XML, _tmPf0);
			JB_Decr(_tmPf0);
		}
		 else if (JB_Str_MidEquals(S, I, JB_LUB[19], false)) {
			Message* _tmPf1 = JB_Tk__XMLWhatever(I, 4, JB_LUB[20], kJB_SyxXCom);
			JB_Incr(_tmPf1);
			if (!_tmPf1) {
				JB_Decr(_tmPf1);
				JB_Decr(S);
				return nil;
			}
			JB_Tree_SyntaxAppend(XML, _tmPf1);
			JB_Decr(_tmPf1);
		}
		 else if (JB_Str_MidEquals(S, I, JB_LUB[17], false)) {
			Message* _tmPf2 = JB_Tk__XMLWhatever(I, 9, JB_LUB[18], kJB_SyxXCDT);
			JB_Incr(_tmPf2);
			if (!_tmPf2) {
				JB_Decr(_tmPf2);
				JB_Decr(S);
				return nil;
			}
			JB_Tree_SyntaxAppend(XML, _tmPf2);
			JB_Decr(_tmPf2);
		}
		 else {
			JB_Decr(S);
			return JB_Tk__ErrorAdd(JB_LUB[0], I);
		}
	};
	JB_Decr(S);
}

int JB_Tk__FindError(int Num) {
	if (Num == kJB__Tk_kThing) {
		return kJB__Tk_kThing;
	}
	{
		DictionaryReader* _navf0 = JB_Dict_Navigate(JB__Tk__ErrorNames);
		JB_Incr(_navf0);
		while (true) {
			JB_String* _Valuef2 = ((JB_String*)JB_DictionaryReader_NextValue(_navf0));
			JB_Incr(_Valuef2);
			if (_Valuef2 == nil) {
				JB_Decr(_Valuef2);
				break;
			}
			JB_Decr(_Valuef2);
			JB_String* Key = JB_Nav_Name(_navf0);
			JB_Incr(Key);
			int I = ((int)JB_Str_TextIntegerValid(Key, nil));
			JB_Decr(Key);
			if ((Num & I) == I) {
				JB_Decr(_navf0);
				return I;
			}
		};
		JB_Decr(_navf0);
	}
	;
	return 0;
}

int JB_Tk__FinishParseLoop(int Lines, Message* Output, int After) {
	if ((Output->Func == kJB_SyxArg) and JB_Msg_SyntaxIs(Output, kJB__MsgParseFlags_Style2)) {
		(JB_Msg_AfterSet(Output, After));
		while (true) {
			Output = ((Message*)JB_Ring_Parent(Output));
			if (!Output) {
				break;
			}
			if (Output->Func == kJB_SyxArg) {
				if (!JB_Msg_SyntaxIs(Output, kJB__MsgParseFlags_Style2)) {
					break;
				}
				(JB_Msg_AfterSet(Output, After));
			}
		};
	}
	return Lines;
}

Message* JB_Tk__fInnerNiceAdj(int Start, Message* Parent) {
	return JB_Tk__fAskSub(Start, Parent, kJB_Syxbinn);
}

Message* JB_Tk__FixTRels(Message* Self, Message* Last) {
	if ((!Last)) {
		0;
	}
	 else if (!JB_Msg_EqualsSyx(Last, kJB_SyxTRel, false)) {
		JB_Tree_SyntaxAppend(Self, Last);
	}
	 else {
		Message* _tmPf0 = ((Message*)JB_Ring_First(Last));
		JB_Incr(_tmPf0);
		JB_Tree_SyntaxAppend(Self, _tmPf0);
		JB_Decr(_tmPf0);
		(JB_Ring_FirstSet(Last, Self));
		return Last;
	}
	return Self;
}

Message* JB_Tk__fMsgList(int Start, Message* Parent) {
	Message* Result = JB_Tk__NewParentName(nil, kJB_SyxMsg, Start, JB_LUB[0]);
	JB_Incr(Result);
	Message* Name = JB_Tk__Process(kJB__Tk_kTemporalWord, true, Result);
	JB_Incr(Name);
	if (!Name) {
		JB_Decr(Name);
		JB_Decr(Result);
		return nil;
	}
	Message* It = ((Message*)JB_Tree_Second(Name));
	JB_Incr(It);
	JB_Decr(Name);
	if (It) {
		Message* _tmPf1 = JB_Tk__UnexpectedSyntax(It);
		JB_Incr(_tmPf1);
		JB_Decr(It);
		JB_Decr(Result);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	JB_Decr(It);
	int Ops = kJB__Tk_kOppSyx | (kJB__Tk_kOppTemporal | kJB__Tk_kOppYoda);
	while (JB_Tk__NextLineAndIndent(Result)[0]) {
		Message* Item = JB_Tk__ProcessThing(Ops, false);
		JB_Incr(Item);
		if (!Item) {
			JB_Decr(Item);
			break;
		}
		if (JB_Str_OperatorEndsWith(Item->Name, JB_LUB[358])) {
			Message* _tmPf0 = JB_Tk__ErrorAdd(JB_LUB[1152], Item->Position);
			JB_Incr(_tmPf0);
			JB_Decr(Item);
			JB_Decr(Result);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Tree_SyntaxAppend(Result, Item);
		JB_Decr(Item);
	};
	JB_Tk__ExpectEndChar(Start, JB_LUB[358], true);
	(JB_Msg_AfterSet(Result, JB_Tk__NextStart()));
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fNumber(int Start, Message* Parent) {
	return JB_Tk__NumberSub(Start, Start);
}

Message* JB_Tk__fOpAsThing(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, kJB_SyxOat, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Tk__Process(kJB__Tk_kOpp, false, nil);
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Tk__ProcessThing(kJB__Tk_kOpp, false);
	JB_Incr(_tmPf1);
	JB_Tree_SyntaxAppend(Rz, _tmPf1);
	JB_Decr(_tmPf1);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fOppBracket(int Start, Message* Parent) {
	Message* Result = JB_Tk__NewParentName(nil, kJB_SyxBra, Start, JB_LUB[0]);
	JB_Incr(Result);
	Message* Opp1 = JB_Tk__Process(kJB__Tk_kOppChain, false, nil);
	JB_Incr(Opp1);
	Message* Opp2 = JB_Tk__Process(kJB__Tk_kOpp, false, nil);
	JB_Incr(Opp2);
	if (!Opp2) {
		JB_Tree_SyntaxAppend(Result, Opp1);
	}
	 else {
		Message* Rel = JB_Tk__NewParentName(Result, kJB_SyxRel, JB_Tk__NextStart() - 1, JB_LUB[0]);
		JB_Incr(Rel);
		JB_Tree_SyntaxAppend(Rel, Opp1);
		JB_Tree_SyntaxAppend(Rel, Opp2);
		Message* _tmPf0 = JB_Tk__Process(kJB__Tk_kOppChain, false, nil);
		JB_Incr(_tmPf0);
		JB_Tree_SyntaxAppend(Rel, _tmPf0);
		JB_Decr(Rel);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Opp1);
	JB_Decr(Opp2);
	JB_Tk__ExpectEndChar(Start, JB_LUB[821], true);
	Message* _tmPf1 = JB_Tk__OppChain(Result);
	JB_Incr(_tmPf1);
	JB_Decr(Result);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Tk__fOppSyx(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, kJB_SyxOpp, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fOppSyxNeq(int Start, Message* Parent) {
	Message* Result = JB_Tk__fOppSyx(Start, nil);
	JB_Incr(Result);
	if ('=' == JB_Tk__NextByte()) {
		JB_Decr(Result);
		return JB_Tk__ErrorAdd(JB_LUB[766], JB_Tk__NextStart());
	}
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fOppWord(int Start, Message* Parent) {
	int After = JB_Tk__WordAfter(Start);
	if (JB_Tk__Byte(After) != '.') {
		Message* Opp = JB_Tk__NewParent(nil, kJB_SyxOpp, Start, After);
		JB_Incr(Opp);
		Message* _tmPf0 = JB_Tk__OppChain(Opp);
		JB_Incr(_tmPf0);
		JB_Decr(Opp);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	return nil;
}

Message* JB_Tk__fQuestion(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Tk__NewWord(nil, kJB_SyxQues, Start, JB_Tk__NextStart()));
	Message* _tmPf0 = JB_Tk__ProcessThing(kJB__Tk_kOpp, false);
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fQuoteLang(int Start, Message* Parent) {
	Message* Rz = nil;
	Rz = JB_Tk__NewParentName(nil, kJB_SyxQuot, Start, JB_LUB[0]);
	JB_Tk__ParseLoopFlags(Rz, JB_LUB[360], kJB__Tk_kTemporalSyxNoBar);
	return Rz;
}

Message* JB_Tk__fSDot(int Start, Message* Parent) {
	if (Start > 0) {
		uint C = JB_Tk__Byte(Start - 1);
		if (JB_CS_HasChar(JB__Constants_CSWordMiddle, C)) {
			return nil;
		}
	}
	return JB_Tk__DotSub(kJB_SyxSDot, Start, Parent);
}

Message* JB_Tk__fShebang(int Start, Message* Parent) {
	Ind S = JB_Tk__NextStart();
	JB_String* _tmPf0 = JB_Tk__GetData();
	Ind S2 = JB_Str_Find(_tmPf0, JB__Constants_CSLine, S, JB_int__Max());
	(JB_Tk__NextStartSet(S2));
	return JB_Tk__NewSkip(Parent, kJB_SyxSheb, Start, S, S2);
}

Message* JB_Tk__fStatement(int Start, Message* Parent) {
	Message* Tmp = JB_Tk__fTmp(Start, kJB__Tk_kOpp & (~kJB__Tk_kOppBra), kJB__Tk_kThing, Parent);
	JB_Incr(Tmp);
	if (!JB_Msg_EqualsSyx(Tmp, kJB_SyxThg, false)) {
		JB_SafeDecr(Tmp);
		return Tmp;
	}
	JB_Tree_Remove(Tmp);
	JB_Decr(Tmp);
	(JB_Tk__NextStartSet(Start));
	return JB_Tk__ProcessThing(kJB__Tk_kOpp, false);
}

Message* JB_Tk__fStatementColon(int Start, Message* Parent) {
	return JB_Tk__fTmp(Start, kJB__Tk_kOpp & (~kJB__Tk_kOppBra), kJB__Tk_kThing | kJB__Tk_kColonArg, Parent);
}

Message* JB_Tk__fString(int Start, Message* Parent) {
	JB_String* _tmPf0 = JB_Tk__GetData();
	Ind After = JB_Str_JBFind(_tmPf0, '"', (JB_Tk__NextStart()), JB_int__Max());
	if (!JB_Ind_SyntaxCast(After)) {
		return JB_Tk__ErrorAdd(JB_LUB[1558], JB_Tk__NextStart());
	}
	Ind StrPos = Start + 1;
	Message* Result = JB_Tk__NewParentName(nil, kJB_SyxStr, Start, JB_LUB[0]);
	JB_Incr(Result);
	while (JB_Ind_SyntaxCast((StrPos))) {
		JB_String* _tmPf1 = JB_Tk__GetData();
		Ind NewStrPos = JB_Str_JBFind(_tmPf1, '$', StrPos, After);
		if (!JB_Ind_SyntaxCast(NewStrPos)) {
			NewStrPos = After;
		}
		if (NewStrPos > StrPos) {
			Message* Str = JB_Tk__NewParent(Result, kJB_SyxEmb, StrPos, NewStrPos);
			JB_Incr(Str);
			JB_SetRef(Str->Name, JB_Str_Unescape(Str->Name));
			JB_Decr(Str);
		}
		if (NewStrPos >= After) {
			break;
		}
		(++NewStrPos);
		uint C0 = JB_Tk__Byte(NewStrPos);
		NewStrPos = (NewStrPos + (C0 == '{'));
		(JB_Tk__NextStartSet(NewStrPos));
		if (C0 == '{') {
			StrPos = JB_Tk__EmbeddedCode(JB_LUB[1557], Result, kJB__Tk_kTemporalSyx);
		}
		 else {
			Syntax Type = kJB_SyxThg;
			if (C0 == '.') {
				Type = kJB_SyxSDot;
				(++NewStrPos);
			}
			JB_String* _tmPf2 = JB_Tk__GetData();
			StrPos = JB_Str_OutCharSet(_tmPf2, JB__Constants_CSWordMiddle, NewStrPos + 1, After);
			if (!JB_Ind_SyntaxCast(StrPos)) {
				StrPos = After;
			}
			Message* Rr = JB_Tk__NewParent(Result, Type, NewStrPos, StrPos);
			JB_Incr(Rr);
			if (C0 == '.') {
				JB_FreeIfDead(JB_Tk__NewParentName(Rr, kJB_SyxEmb, NewStrPos - 1, JB_LUB[0]));
			}
			JB_Decr(Rr);
		}
		if (StrPos > After) {
			JB_Decr(Result);
			return JB_Tk__ErrorAdd(JB_LUB[1559], NewStrPos);
		}
	};
	(JB_Tk__NextStartSet((++After)));
	Result->RangeLength = (After - Start);
	JB_Msg_UnEmbedStr(Result);
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fSuperStr(int Start, Message* Parent) {
	JB_String* D = JB_Tk__GetData();
	int Nest = 1;
	while (true) {
		Ind After = JB_Str_FindByte(D, '`', JB_Tk__NextStart(), JB_int__Max());
		if (!JB_Ind_SyntaxCast(After)) {
			break;
		}
		(JB_Tk__NextStartSet(After + 3));
		if (JB_Str_MidEquals(D, After - 2, JB_LUB[14], false)) {
			(++Nest);
		}
		 else if (JB_Str_MidEquals(D, After, JB_LUB[15], false)) {
			(--Nest);
			if (!Nest) {
				return JB_Tk__NewSkip(nil, kJB_SyxSStr, Start, Start + 3, After);
			}
		}
	};
	return JB_Tk__ErrorAdd(JB_LUB[762], Start);
}

Message* JB_Tk__fSyntacticComment(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, kJB_SyxList, Start, JB_LUB[0]));
	bool Lines = JB_Tk__ParseLoopFlags(Rz, JB_LUB[1560], kJB__Tk_kTemporalSyxNoBar);
	Rz->Func = kJB_SyxSCom;
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fTemporalHashThing(int Start, Message* Parent) {
	Message* Result = JB_Tk__NewParentName(Parent, kJB_SyxTril, Start, JB_LUB[0]);
	JB_Incr(Result);
	Ind S = JB_Tk__NextStart();
	JB_FreeIfDead(JB_Tk__NewParent(Result, kJB_SyxCnj, S, JB_Tk__WordAfter(S)));
	Message* X = JB_Tk__ProcessThingOrTmp(kJB__Tk_kOpp & (~kJB__Tk_kOppBra));
	JB_Incr(X);
	if (X) {
		JB_Tree_SyntaxAppend(Result, X);
		Message* _tmPf0 = JB_Tk__ProcessThing(kJB__Tk_kOpp, false);
		JB_Incr(_tmPf0);
		JB_Tree_SyntaxAppend(Result, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(X);
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fTemporalRel(int Start, Message* Parent) {
	return JB_Tk__NewWord(nil, kJB_SyxCnj, Start, JB_Tk__CleanSpaces());
}

Message* JB_Tk__fTemporalRelSyx(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, kJB_SyxSCnj, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fThingSyx(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, kJB_SyxSThg, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fThingWord(int Start, Message* Parent) {
	int Name = JB_Tk__WordAfter(Start);
	return JB_Tk__NewParent(nil, kJB_SyxThg, Start, Name);
}

Message* JB_Tk__fTmp(int Start, int OpFlags, int ThingFlags, Message* Parent) {
	Message* Result = JB_Tk__NewWord(Parent, kJB_SyxTmp, Start, Start);
	return JB_Tk__fTmpSub(Result, OpFlags, ThingFlags);
}

Message* JB_Tk__fTmpPlus(int Start, Message* Parent) {
	int C = JB_Tk__NextByte();
	if ((C == '"') or (C == '\'')) {
		Message* Tmp = JB_Tk__fCharSub(Start, Start + 1, C);
		if (Tmp) {
			Tmp->Func = kJB_SyxTmp;
			Tmp = JB_Tk__fTmpSub(Tmp, kJB__Tk_kOpp & (~kJB__Tk_kOppBra), kJB__Tk_kThing);
			if (!JB_Msg_EqualsSyx(Tmp, kJB_SyxThg, false)) {
				return Tmp;
			}
		}
	}
	return JB_Tk__fError2(Start, nil);
}

Message* JB_Tk__fTmpSub(Message* Result, int OpFlags, int ThingFlags) {
	JB_Incr(Result);
	if (JB_Tk__WillEnd()) {
		JB_SafeDecr(Result);
		return Result;
	}
	if (JB_Tk__CanStatement()) {
		while (true) {
			Message* Item = JB_Tk__ProcessThingParent(Result, OpFlags, ThingFlags);
			JB_Incr(Item);
			if (!Item) {
				JB_Decr(Item);
				break;
			}
			JB_Tree_SyntaxAppend(Result, Item);
			if (JB_Tk__WillEnd()) {
				JB_Decr(Item);
				JB_SafeDecr(Result);
				return Result;
			}
			if (JB_Msg_EqualsSyx(Item, kJB_SyxArg, false)) {
				Message* _tmPf0 = JB_Tk__UnTmpPlace(Result);
				JB_Incr(_tmPf0);
				Message* SubTmp = JB_Tk__Process(kJB__Tk_kTemporalWordColon, false, _tmPf0);
				JB_Incr(SubTmp);
				JB_Decr(_tmPf0);
				if (SubTmp or (JB_Msg_SyntaxEquals(Item, JB_LUB[1318], false))) {
					JB_Decr(SubTmp);
					JB_Decr(Item);
					JB_SafeDecr(Result);
					return Result;
				}
				JB_Decr(SubTmp);
			}
			JB_Decr(Item);
			ThingFlags = (ThingFlags | kJB__Tk_kColonArg);
		};
	}
	Result->Func = kJB_SyxThg;
	if (JB_Ring_HasChildren(Result)) {
		JB_SafeDecr(Result);
		return Result;
	}
	JB_SetRef(Result, JB_Tk__DecorateThing(Result, kJB__Tk_kOpp));
	Message* _tmPf1 = JB_Tk__ParseItem(Result, kJB__Tk_kTemporalSyx, kJB__Tk_kOpp);
	JB_Incr(_tmPf1);
	JB_Decr(Result);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Tk__fTypeCast(int Start, Message* Parent) {
	Message* _tmPf0 = JB_Tk__BarThings(Start, kJB_SyxType);
	JB_Incr(_tmPf0);
	if (!_tmPf0) {
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* JB_Tk__fURL(int Start, Message* Parent) {
	if (!JB_Tk__NeedName(Parent)) {
		return nil;
	}
	JB_String* _tmPf0 = JB_Tk__GetData();
	(JB_Tk__NextStartSet(JB_Str_InWhite(_tmPf0, Start, JB_int__Max())));
	Parent->Func = kJB_Syxurl;
	Parent->RangeLength = (Parent->RangeLength + 3);
	Message* _tmPf1 = JB_Tk__NewParent(nil, kJB_SyxStr, Start + 3, JB_Tk__NextStart());
	JB_Incr(_tmPf1);
	JB_Tree_SyntaxAppend(Parent, _tmPf1);
	JB_Decr(_tmPf1);
	return Parent;
}

Message* JB_Tk__fXML(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	Ind EndPos = JB_Tk__XMLWordEnd(Start + 1);
	if (JB_Ind_SyntaxCast(EndPos)) {
		Message* XML = JB_Tk__NewSkip(nil, kJB_SyxXML, Start, Start + 1, EndPos);
		JB_Incr(XML);
		EndPos = JB_Tk__XMLAttribs(XML, EndPos);
		if (EndPos > 0) {
			JB_SetRef(Rz, JB_Tk__FillXML(XML, EndPos + 1));
			if (Rz) {
				(JB_Msg_AfterSet(Rz, JB_Tk__NextStart()));
			}
		}
		JB_Decr(XML);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fXML_Comment(int Start, Message* Parent) {
	return JB_Tk__XMLWhatever(Start, 4, JB_LUB[20], kJB_SyxXCom);
}

Message* JB_Tk__fXML_DocType(int Start, Message* Parent) {
	{
		JB_String* _tmPf4 = JB_Tk__GetData();
		IntRange _LoopSrcf2 = JB_int_OperatorTo(JB_Tk__NextStart(), JB_Str_Length(_tmPf4) - 1);
		int __Endf0 = _LoopSrcf2[1];
		int _Valuef3 = _LoopSrcf2[0];
		while (_Valuef3 < __Endf0) {
			int I = _Valuef3;
			JB_String* _tmPf5 = JB_Tk__GetData();
			uint C = JB_Str_ByteValue(_tmPf5, I);
			if (C == '[') {
				JB_String* _tmPf6 = JB_Tk__GetData();
				I = JB_Str_FindByte(_tmPf6, ']', I, JB_int__Max());
				if (!I) {
					return JB_Tk__ErrorAdd(JB_LUB[767], Start);
				}
			}
			 else if (C == '>') {
				(JB_Tk__NextStartSet(I + 1));
				JB_String* _tmPf8 = JB_Tk__GetData();
				JB_String* _tmPf7 = JB_Str_Range(_tmPf8, Start + 9, I);
				JB_Incr(_tmPf7);
				Message* _tmPf9 = JB_Tk__NewParentName(nil, kJB_SyxXCom, Start, _tmPf7);
				JB_Incr(_tmPf9);
				JB_Decr(_tmPf7);
				JB_SafeDecr(_tmPf9);
				return _tmPf9;
			}
			(++_Valuef3);
		};
	}
	;
	return nil;
}

Message* JB_Tk__fXML_PI(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, kJB_SyxXPI, Start, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(Rz, JB_LUB[506], kJB__Tk_kTemporal);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fYoda(int Start, Message* Parent) {
	Message* Last = JB_Tk__ProcessThing(kJB__Tk_kOppSyx, true);
	JB_Incr(Last);
	Message* First = JB_Tk__ProcessThing(kJB__Tk_kOppSyx, true);
	JB_Incr(First);
	Message* Opp = JB_Tk__Process(kJB__Tk_kOpp, true, nil);
	JB_Incr(Opp);
	Message* Rel = JB_Tk__NewParentName(Parent, kJB_SyxYoda, Start, JB_LUB[0]);
	JB_Incr(Rel);
	JB_Tree_SyntaxAppend(Rel, First);
	JB_Decr(First);
	JB_Tree_SyntaxAppend(Rel, Opp);
	JB_Decr(Opp);
	JB_Tree_SyntaxAppend(Rel, Last);
	JB_Decr(Last);
	JB_SafeDecr(Rel);
	return Rel;
}

Message* JB_Tk__GetFuncAfter(Message* Result) {
	JB_Incr(Result);
	while (true) {
		uint ThisAfter = kJB__Tk_kFuncAfterAny & (~JB__Tk__StopBars);
		if (JB_Tk__NoFuncAfter(JB_Tk__NextByte())) {
			ThisAfter = (ThisAfter & (~kJB__Tk_kFuncAfterNoSpace));
		}
		Message* D = JB_Tk__Process(ThisAfter, false, Result);
		JB_Incr(D);
		if (!D) {
			JB_Decr(D);
			break;
		}
		Syntax Fn = D->Func;
		if ((Fn != kJB_SyxName) and ((Fn != kJB_SyxBadj) and (Fn != kJB_Syxurl))) {
			(JB_Ring_PrevSibSet(Result, D));
			(JB_Ring_FirstSet(D, Result));
		}
		JB_SetRef(Result, D);
		JB_Decr(D);
	};
	JB_SafeDecr(Result);
	return Result;
}

int JB_Tk__GotoEndOfLine(int From) {
	JB_String* _tmPf0 = JB_Tk__GetData();
	(JB_Tk__NextStartSet(JB_Str_Find(_tmPf0, JB__Constants_CSLine, From, JB_int__Max())));
	return JB_Tk__NextStart();
}

Message* JB_Tk__IndentBug(Message* Curr) {
	return JB_Tk__ErrorAlwaysAdd(JB_LUB[723], Curr->Position);
}

void JB_Tk__Init() {
	JB_Tk__TokenzFn(JB_LUB[1645], kJB__Tk_kEndOfLine, ((FP_ParseHandler)(JB_Tk__fEndOfLine)));
	TokHan* _tmPf1 = JB_Tk__Handler(kJB__Tk_kComma | kJB__Tk_kEndOfLine, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fEndOfLine))));
	JB_Incr(_tmPf1);
	(JB_Tk__TokenSet(JB_LUB[1646], _tmPf1));
	JB_Decr(_tmPf1);
	TokHan* _tmPf3 = JB_Tk__Handler(kJB__Tk_kColon, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fEndOfLine))));
	JB_Incr(_tmPf3);
	TokHan* _tmPf2 = JB_TH_Link(_tmPf3, kJB__Tk_kColonArg, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fArgColon))));
	JB_Incr(_tmPf2);
	JB_Decr(_tmPf3);
	(JB_Tk__TokenSet(JB_LUB[1318], _tmPf2));
	JB_Decr(_tmPf2);
	JB_SetRef(JB__Tk__EndOfLineMarker, JB_Msg_ConstructorNormal(nil, kJB_SyxNil, JB_LUB[125]));
	Array* Numb = JB_Str_ByteSplit(JB_LUB[1647]);
	JB_Incr(Numb);
	JB_String* Op_comp = JB_LUB[1648];
	JB_Incr(Op_comp);
	JB_String* Op_math = JB_LUB[1649];
	JB_Incr(Op_math);
	JB_String* PFix = JB_LUB[1650];
	JB_Incr(PFix);
	TokHan* _tmPf6 = JB_Tk__Handler(kJB__Tk_kThingWord, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fThingWord))));
	JB_Incr(_tmPf6);
	TokHan* _tmPf5 = JB_TH_Link(_tmPf6, kJB__Tk_kTemporalWord, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fStatement))));
	JB_Incr(_tmPf5);
	JB_Decr(_tmPf6);
	TokHan* _tmPf4 = JB_TH_Link(_tmPf5, kJB__Tk_kTemporalWordColon, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fStatementColon))));
	JB_Incr(_tmPf4);
	JB_Decr(_tmPf5);
	TokHan* H = JB_TH_Link(_tmPf4, kJB__Tk_kOppWord, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fOppWord))));
	JB_Incr(H);
	JB_Decr(_tmPf4);
	Array* _tmPf7 = JB_CS_Bytes(JB__Constants_CSWordStart);
	JB_Incr(_tmPf7);
	JB_Tk__TokensHan(_tmPf7, H);
	JB_Decr(H);
	JB_Decr(_tmPf7);
	TokHan* _tmPf10 = JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fFuncCall))));
	JB_Incr(_tmPf10);
	TokHan* _tmPf9 = JB_TH_Link(_tmPf10, kJB__Tk_kThingSyx, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fBracket))));
	JB_Incr(_tmPf9);
	JB_Decr(_tmPf10);
	TokHan* _tmPf8 = JB_TH_Link(_tmPf9, kJB__Tk_kOppBra, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fOppBracket))));
	JB_Incr(_tmPf8);
	JB_Decr(_tmPf9);
	(JB_Tk__TokenSet(JB_LUB[1584], _tmPf8));
	JB_Decr(_tmPf8);
	TokHan* _tmPf12 = JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fAccess))));
	JB_Incr(_tmPf12);
	TokHan* _tmPf11 = JB_TH_Link(_tmPf12, kJB__Tk_kThingSyx, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fArray))));
	JB_Incr(_tmPf11);
	JB_Decr(_tmPf12);
	(JB_Tk__TokenSet(JB_LUB[1651], _tmPf11));
	JB_Decr(_tmPf11);
	TokHan* _tmPf13 = JB_Tk__Handler(kJB__Tk_kThingSyx, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fMsgList))));
	JB_Incr(_tmPf13);
	(JB_Tk__TokenSet(JB_LUB[357], _tmPf13));
	JB_Decr(_tmPf13);
	TokHan* _tmPf15 = JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fDot))));
	JB_Incr(_tmPf15);
	TokHan* _tmPf14 = JB_TH_Link(_tmPf15, kJB__Tk_kThingSyx, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fSDot))));
	JB_Incr(_tmPf14);
	JB_Decr(_tmPf15);
	(JB_Tk__TokenSet(JB_LUB[25], _tmPf14));
	JB_Decr(_tmPf14);
	TokHan* _tmPf16 = JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fDotAccess))));
	JB_Incr(_tmPf16);
	(JB_Tk__TokenSet(JB_LUB[1652], _tmPf16));
	JB_Decr(_tmPf16);
	TokHan* _tmPf17 = JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fURL))));
	JB_Incr(_tmPf17);
	(JB_Tk__TokenSet(JB_LUB[21], _tmPf17));
	JB_Decr(_tmPf17);
	TokHan* _tmPf20 = JB_Tk__Handler(kJB__Tk_kTemporalBar, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fDecl))));
	JB_Incr(_tmPf20);
	TokHan* _tmPf19 = JB_TH_Link(_tmPf20, kJB__Tk_kFuncAfterBar, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fTypeCast))));
	JB_Incr(_tmPf19);
	JB_Decr(_tmPf20);
	TokHan* _tmPf18 = JB_TH_Link(_tmPf19, kJB__Tk_kThingBar, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fDecl))));
	JB_Incr(_tmPf18);
	JB_Decr(_tmPf19);
	(JB_Tk__TokenSet(JB_LUB[285], _tmPf18));
	JB_Decr(_tmPf18);
	TokHan* _tmPf21 = JB_Tk__Handler(kJB__Tk_kThingSyx, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fArgName))));
	JB_Incr(_tmPf21);
	(JB_Tk__TokenSet(JB_LUB[1653], _tmPf21));
	JB_Decr(_tmPf21);
	TokHan* _tmPf22 = JB_Tk__Handler(kJB__Tk_kTemporalSyx, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fTmpPlus))));
	JB_Incr(_tmPf22);
	(JB_Tk__TokenSet(JB_LUB[517], _tmPf22));
	JB_Decr(_tmPf22);
	TokHan* _tmPf24 = JB_Tk__Handler(kJB__Tk_kThingSyx, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fAtName))));
	JB_Incr(_tmPf24);
	TokHan* _tmPf23 = JB_TH_Link(_tmPf24, kJB__Tk_kFuncAfterNormal, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fAtNamedExp))));
	JB_Incr(_tmPf23);
	JB_Decr(_tmPf24);
	(JB_Tk__TokenSet(JB_LUB[1654], _tmPf23));
	JB_Decr(_tmPf23);
	TokHan* _tmPf26 = JB_Tk__Handler(kJB__Tk_kFuncAfterNormal, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fAdjectiveThing))));
	JB_Incr(_tmPf26);
	TokHan* _tmPf25 = JB_TH_Link(_tmPf26, kJB__Tk_kAdjectiveOp, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fAdjectiveOp))));
	JB_Incr(_tmPf25);
	JB_Decr(_tmPf26);
	(JB_Tk__TokenSet(JB_LUB[50], _tmPf25));
	JB_Decr(_tmPf25);
	JB_Tk__TokenzFn(JB_LUB[1655], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fBeforeRelMinus)));
	JB_Tk__TokenzFn(PFix, kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fBeforeRel)));
	JB_Tk__TokenzFn(PFix, kJB__Tk_kFuncAfterNormal, ((FP_ParseHandler)(JB_Tk__fAfterRel)));
	JB_Decr(PFix);
	JB_Tk__TokenzFn(JB_LUB[48], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fBeforeRel)));
	JB_Tk__TokenzFn(JB_LUB[1656], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fArgOpen)));
	JB_Tk__TokenzFn(JB_LUB[1657], kJB__Tk_kTmpOpp, ((FP_ParseHandler)(JB_Tk__fTemporalRelSyx)));
	JB_Tk__TokenzFn(JB_LUB[1658], kJB__Tk_kTmpOpp, ((FP_ParseHandler)(JB_Tk__fSyntacticComment)));
	JB_Tk__TokenzFn(JB_LUB[283], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fOpAsThing)));
	JB_Tk__TokensFn(Numb, kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fNumber)));
	JB_Decr(Numb);
	JB_Tk__TokenzFn(JB_LUB[16], kJB__Tk_kTemporalSyxNoBar, ((FP_ParseHandler)(JB_Tk__fShebang)));
	JB_Tk__TokenzFn(JB_LUB[52], kJB__Tk_kEndOfLine, ((FP_ParseHandler)(JB_Tk__fCommentLine)));
	JB_Tk__TokenzFn(JB_LUB[579], kJB__Tk_kEndOfLine, ((FP_ParseHandler)(JB_Tk__fComment)));
	JB_Tk__TokenzFn(Op_comp, kJB__Tk_kOppSNB, ((FP_ParseHandler)(JB_Tk__fOppSyxNeq)));
	JB_Decr(Op_comp);
	JB_Tk__TokenzFn(Op_math, kJB__Tk_kOppSNB, ((FP_ParseHandler)(JB_Tk__fOppSyx)));
	JB_Decr(Op_math);
	JB_Tk__TokenzFn(JB_LUB[285], kJB__Tk_kOppBar, ((FP_ParseHandler)(JB_Tk__fOppSyx)));
	JB_Tk__TokenzFn(JB_LUB[26], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fThingSyx)));
	JB_Tk__TokenzFn(JB_LUB[314], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fString)));
	JB_Tk__TokenzFn(JB_LUB[317], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fChar)));
	JB_Tk__TokenzFn(JB_LUB[23], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fBackTick)));
	JB_Tk__TokenzFn(JB_LUB[14], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fSuperStr)));
	JB_Tk__TokenzFn(JB_LUB[129], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fBinary)));
	TokHan* _tmPf28 = JB_Tk__Handler(kJB__Tk_kFuncAfterNormal, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fBAdjectiveThing))));
	JB_Incr(_tmPf28);
	TokHan* _tmPf27 = JB_TH_Link(_tmPf28, kJB__Tk_kAdjectiveOp, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fBAdjectiveOp))));
	JB_Incr(_tmPf27);
	JB_Decr(_tmPf28);
	(JB_Tk__TokenSet(JB_LUB[1659], _tmPf27));
	JB_Decr(_tmPf27);
	TokHan* _tmPf30 = JB_Tk__Handler(kJB__Tk_kTmpOpp, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fTemporalRel))));
	JB_Incr(_tmPf30);
	TokHan* _tmPf29 = JB_TH_Link(_tmPf30, kJB__Tk_kTemporalSyxNoBar, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fTemporalHashThing))));
	JB_Incr(_tmPf29);
	JB_Decr(_tmPf30);
	(JB_Tk__TokenSet(JB_LUB[1660], _tmPf29));
	JB_Decr(_tmPf29);
	JB_Tk__TokenzFn(JB_LUB[1661], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fInnerNiceAdj)));
	JB_Tk__TokenzFn(JB_LUB[1662], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fYoda)));
	JB_Tk__TokenzFn(JB_LUB[363], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fQuoteLang)));
	JB_Tk__TokenzFn(JB_LUB[362], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fQuestion)));
	JB_Tk__TokenzFn(JB_LUB[500], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fAsk)));
	JB_Tk__TokenzFn(JB_LUB[260], kJB__Tk_kTemporalSyx, ((FP_ParseHandler)(JB_Tk__fXML)));
	JB_Tk__TokenzFn(JB_LUB[505], kJB__Tk_kTemporalSyx, ((FP_ParseHandler)(JB_Tk__fXML_PI)));
	JB_Tk__TokenzFn(JB_LUB[19], kJB__Tk_kTemporalSyx, ((FP_ParseHandler)(JB_Tk__fXML_Comment)));
	JB_Tk__TokenzFn(JB_LUB[1663], kJB__Tk_kTemporalSyx, ((FP_ParseHandler)(JB_Tk__fXML_DocType)));
	JB_Tk__TokenzFn(JB_LUB[1664], kJB__Tk_kEndContainer, ((FP_ParseHandler)(JB_Tk__fEndOfLine)));
	JB_Tk__TokenzFn(JB_LUB[1665], kJB__Tk_kThingSyx, ((FP_ParseHandler)(JB_Tk__fError)));
	JB_Tk__TokenzFn(JB_LUB[1666], kJB__Tk_kOppSyx, ((FP_ParseHandler)(JB_Tk__fError2)));
	TokHan* IllegalHandler = JB_Tk__Handler(-1, ((TokenHandler_fp)(((TokenHandler_fp)JB_Tk__fError))));
	JB_Incr(IllegalHandler);
	{
		int I = 0;
		while (I < 256) {
			JB_String* _tmPf31 = JB_Str__Byte(I);
			JB_Incr(_tmPf31);
			(JB_Tk__TokenNilSet(_tmPf31, IllegalHandler));
			JB_Decr(_tmPf31);
			(++I);
		};
	}
	;
	JB_Decr(IllegalHandler);
}

int JB_Tk__Init_() {
	{
		JB__Tk_Splitter = (&JB_Tk__Range);
		JB__Tk_Using = ((MessagePosition){});
	}
	;
	return 0;
}

int JB_Tk__InitCode_() {
	{
	}
	;
	JB__Tk_Using.Position = -1;
	return 0;
}

Message* JB_Tk__LoweredIndent(Message* Output, Message* Curr) {
	Ind BackPos = JB_Str_Find(JB_Tk__GetData(), JB__Constants_CSLine, Curr->Position, 0);
	int Chin = JB_Msg_CleanIndent(Curr);
	while (JB_Msg_IndentScore(Output) > Chin) {
		if (JB_Msg_EqualsSyx(Output, kJB_SyxArg, false)) {
			if (!JB_Msg_SyntaxIs(Output, kJB__MsgParseFlags_Style2)) {
				return JB_Tk__IndentBug(Curr);
			}
			if (BackPos > 0) {
				(JB_Msg_AfterSet(Output, BackPos));
			}
		}
		Output = ((Message*)JB_Ring_Parent(Output));
		if (!Output) {
			return JB_Tk__IndentBug(Curr);
		}
		if (JB_Msg_EqualsSyx(Output, kJB_SyxDecl, false)) {
			Output = ((Message*)JB_Ring_Parent(Output));
		}
	};
	JB_Tree_SyntaxAppend(Output, Curr);
	if (JB_Msg_CleanIndent(Curr) % 4) {
		return Curr;
	}
	return Output;
}

Message* JB_Tk__MakeInvisArg(Message* Tmp, int Indent) {
	Message* Rz = nil;
	if ((JB_Msg_EqualsSyx(Tmp, kJB_SyxItem, false))) {
		Message* Last = ((Message*)JB_Ring_Last(Tmp));
		if (!JB_Msg_EqualsSyx(Last, kJB_SyxEmb, false)) {
			return JB_Tk__UnexpectedSyntax(Last);
		}
		Last->Func = kJB_SyxArg;
		(JB_Msg_SyntaxIsSet(Last, kJB__MsgParseFlags_Style2, true));
		return Last;
	}
	Rz = JB_Tk__NewParentName(Tmp, kJB_SyxArg, Tmp->Position, JB_LUB[0]);
	(JB_Msg_SyntaxIsSet(Rz, kJB__MsgParseFlags_Style2, true));
	return Rz;
}

Message* JB_Tk__MakeRel(Message* First, int Bits) {
	Message* Opp = JB_Tk__Process(Bits, false, nil);
	if (!Opp) {
		return First;
	}
	Message* Rel = JB_Tk__NewParentName(nil, kJB_SyxRel, First->Position, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Rel, First);
	JB_Tree_SyntaxAppend(Rel, Opp);
	if (JB_Tk__EatString(JB_LUB[241])) {
		Rel->Func = kJB_SyxERel;
		(++Opp->RangeLength);
	}
	bool Mode = kJB__Tk_kAllow;
	if (!JB_byte_IsLetter((JB_Str_First(Opp->Name)))) {
		Bits = (Bits | kJB__Tk_kOppWord);
	}
	JB_Tree_SyntaxAppend(Rel, JB_Tk__ProcessThing(Bits, Mode));
	(JB_Msg_AfterSet(Rel, JB_Msg_After(((Message*)JB_Ring_Last(Rel)))));
	return Rel;
}

int JB_Tk__MessageErrorSub(FastString* Fs, int Num) {
	Dictionary* E = JB__Tk__ErrorNames;
	JB_Incr(E);
	if (!E) {
		JB_SetRef(E, JB_Dict_Constructor(nil));
		JB_SetRef(JB__Tk__ErrorNames, E);
		(JB_Dict_SetInt(E, kJB__Tk_kTemporal, JB_LUB[415]));
		(JB_Dict_SetInt(E, kJB__Tk_kTemporalSyx, JB_LUB[416]));
		(JB_Dict_SetInt(E, kJB__Tk_kTemporalWord, JB_LUB[417]));
		(JB_Dict_SetInt(E, kJB__Tk_kEndOfLine, JB_LUB[418]));
		(JB_Dict_SetInt(E, kJB__Tk_kColon, JB_LUB[419]));
		(JB_Dict_SetInt(E, kJB__Tk_kOppSyx, JB_LUB[420]));
		(JB_Dict_SetInt(E, kJB__Tk_kOppWord, JB_LUB[420]));
		(JB_Dict_SetInt(E, kJB__Tk_kOpp, JB_LUB[420]));
		(JB_Dict_SetInt(E, kJB__Tk_kOppTemporal, JB_LUB[421]));
		(JB_Dict_SetInt(E, kJB__Tk_kThing, JB_LUB[422]));
		(JB_Dict_SetInt(E, kJB__Tk_kThingWord, JB_LUB[422]));
		(JB_Dict_SetInt(E, kJB__Tk_kThingSyx, JB_LUB[423]));
		(JB_Dict_SetInt(E, kJB__Tk_kIllegalChar, JB_LUB[424]));
	}
	if (Fs->Length) {
		JB_FS_AppendString(Fs, JB_LUB[425]);
	}
	 else {
		JB_FS_AppendString(Fs, JB_LUB[426]);
	}
	int BestValue = JB_Tk__FindError(Num);
	if (BestValue) {
		JB_String* S = ((JB_String*)JB_Dict_ValueInt(E, BestValue));
		JB_Incr(S);
		if (JB_Str_Exists(S)) {
			JB_FS_AppendString(Fs, S);
		}
		 else {
			JB_FS_AppendString(Fs, JB_LUB[427]);
		}
		JB_Decr(S);
		JB_Decr(E);
		return Num & (~BestValue);
	}
	JB_Decr(E);
	JB_FS_AppendString(Fs, JB_LUB[428]);
	return 0;
}

bool JB_Tk__NeedName(Message* Thg) {
	if ((JB_Msg_EqualsSyx(Thg, kJB_SyxThg, false))) {
		return true;
	}
	return ((bool)JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[754], Thg->Position)));
}

Message* JB_Tk__NewParentName(Message* Parent, Syntax Func, int Start, JB_String* Name) {
	Message* Rz = nil;
	Rz = JB_Msg_ConstructorRange(nil, Parent, Func, Start, Name, JB_Tk__NextStart() - Start);
	return Rz;
}

Message* JB_Tk__NewParent(Message* Parent, Syntax Func, int Start, int End) {
	Message* Rz = nil;
	JB_String* Name = JB_Tk__SyntaxAccess(Start, End, Func);
	Rz = JB_Msg_ConstructorRange(nil, Parent, Func, Start, Name, End - Start);
	return Rz;
}

Message* JB_Tk__NewEmpty(Message* P, Syntax F, int Start, int After) {
	Message* Rz = nil;
	Rz = JB_Msg_ConstructorRange(nil, P, F, Start, JB_LUB[0], After - Start);
	return Rz;
}

Message* JB_Tk__NewSkip(Message* P, Syntax F, int Start, int NameStart, int NameEnd) {
	Message* Rz = nil;
	JB_String* Name = JB_Tk__SyntaxAccess(NameStart, NameEnd, F);
	Rz = JB_Msg_ConstructorRange(nil, P, F, Start, Name, JB_Tk__NextStart() - Start);
	return Rz;
}

Message* JB_Tk__NewWord(Message* P, Syntax F, int Start, int SearchFrom) {
	Message* Rz = nil;
	int After = JB_Tk__WordAfter(SearchFrom);
	JB_String* Name = JB_Tk__SyntaxAccess(SearchFrom, After, F);
	Rz = JB_Msg_ConstructorRange(nil, P, F, Start, Name, After - Start);
	return Rz;
}

ParserLineAndIndent JB_Tk__NextLineAndIndent(Message* Parent) {
	ParserLineAndIndent Rz = ((ParserLineAndIndent){});
	int First = JB_Tk__NextStart();
	int N = First;
	JB_String* D = JB_Tk__GetData();
	int End = JB_Str_Length(D);
	byte* Addr = D->Addr;
	int State = 0;
	int Commas = 0;
	while (N < End) {
		uint C = Addr[N++];
		if (C == '\t') {
			Rz[2] = ((Rz[2] & (~3)) + (((!Commas)) << 2));
			if ((State & 1) and Rz[0]) {
				JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[755], N - 1));
			}
		}
		 else if (C == ',') {
			(++Commas);
			Message* L = ((Message*)JB_Ring_Last(Parent));
			if (L) {
				Rz[2] = L->Indent;
			}
			 else {
				Rz[2] = 0;
			}
			State = 0;
		}
		 else if (C == ' ') {
			State = (State | 1);
			if (Rz[3] != 3) {
				Rz[2] = (Rz[2] + (!Commas));
			}
			 else {
				if (Rz[2] < 4) {
					Rz[2] = (Rz[2] + (!Commas));
				}
				Rz[3] = 2;
			}
		}
		 else if (C == '/') {
			uint C2 = JB_Str_ByteValue(D, N);
			if ((C2 != '/') and (C2 != '*')) {
				if (State & 2) {
					if (Rz[3] > 1) {
						JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[756], N - 1));
					}
					Rz[3] = 3;
					Rz[2] = (Rz[2] + (!Commas));
					continue;
				}
				(--N);
				break;
			}
			State = 2;
			if (C2 != '*') {
				N = JB_Tk__GotoEndOfLine(N + 1);
				continue;
			}
			(++Rz[0]);
			Rz[2] = 0;
			(JB_Tk__NextStartSet(N - 1));
			Message* Line = JB_Tk__Process(kJB__Tk_kEndOfLine, kJB__Tk_kAllow, Parent);
			N = JB_Tk__NextStart();
			if (Line != JB__Tk__EndOfLineMarker) {
				break;
			}
		}
		 else {
			if ((C != '\n') and ((C != '\x0D') and (C != ';'))) {
				(--N);
				break;
			}
			(++Rz[0]);
			Rz[1] = (N - 1);
			Rz[2] = 0;
			Rz[3] = 0;
			Commas = 0;
			State = 2;
			if (Parent->Func == kJB_SyxList) {
				(JB_Msg_SyntaxIsSet(Parent, kJB__MsgParseFlags_Style2, true));
			}
		}
	};
	Rz[0] = (Rz[0] + Commas);
	(JB_Tk__NextStartSet(N));
	Rz[2] = (Rz[2] & (~1));
	if (((First > 0) and (!Rz[0])) or (Rz[2] < 0)) {
		Rz[2] = -1;
	}
	return Rz;
}

bool JB_Tk__NoFuncAfter(uint /*byte*/ B) {
	return (B == '\t') or ((B == ' ') or (B == '\\'));
}

Message* JB_Tk__NumberSub(int Start, int RealStart) {
	Message* Rz = nil;
	int After = JB_Tk__NumEnd(JB_Tk__GetData(), Start);
	(JB_Tk__NextStartSet(After));
	int StartAt = JB_Str_IsHexLike(JB_Tk__GetData(), Start);
	Ind UnitPos2 = -1;
	if (StartAt == 0) {
		UnitPos2 = JB_Str_OutCharSet(JB_Tk__GetData(), JB__Constants_CSLettersOnly, After, Start + StartAt);
	}
	if (!JB_Ind_SyntaxCast(UnitPos2)) {
		UnitPos2 = (After - 1);
	}
	(++UnitPos2);
	Message* Num = JB_Tk__NewParent(nil, kJB_SyxNum, RealStart, UnitPos2);
	if (After <= UnitPos2) {
		return Num;
	}
	Rz = JB_Tk__NewSkip(nil, kJB_SyxUnit, RealStart, UnitPos2, After);
	JB_Tree_SyntaxAppend(Rz, Num);
	return Rz;
}

int JB_Tk__NumEnd(JB_String* NumStr, int Start) {
	int Rz = 0;
	Ind Dot = JB_Str_OutCharSet(NumStr, JB__Constants_CSNum, Start, JB_int__Max());
	if (!JB_Ind_SyntaxCast(Dot)) {
		return JB_Str_Length(NumStr);
	}
	if (JB_Str_ByteValue(NumStr, Dot) != '.') {
		return Dot;
	}
	uint AfterDot = JB_Str_ByteValue(NumStr, Dot + 1);
	if (!JB_byte_IsInt(AfterDot)) {
		return Dot;
	}
	Rz = JB_Str_OutCharSet(NumStr, JB__Constants_CSNum, Dot + 1, JB_int__Max());
	if (!Rz) {
		Rz = JB_Str_Length(NumStr);
	}
	return Rz;
}

bool JB_Tk__OK() {
	return (!JB_Ind_SyntaxCast(JB_Tk__ErrorStart()));
}

Message* JB_Tk__OppChain(Message* Opp) {
	Message* Result = JB_Tk__Process(kJB__Tk_kAdjectiveOp, false, Opp);
	JB_Incr(Result);
	if (Result) {
		if (!JB_FreeIfDead(((Message*)JB_Ring_Parent(Opp)))) {
			(JB_Ring_FirstSet(Result, Opp));
		}
		JB_SafeDecr(Result);
		return Result;
	}
	JB_Decr(Result);
	return Opp;
}

void JB_Tk__Params(Message* Parent, int N) {
	Message* Result = JB_Tk__NewParentName(Parent, kJB_SyxPrm, N, JB_LUB[0]);
	JB_Incr(Result);
	JB_Tk__ParseLoopFlags(Result, JB_LUB[821], kJB__Tk_kTemporalSyxNoBar);
	JB_Decr(Result);
}

Message* JB_Tk__ParseItem(Message* Ch, int TemporalFlags, int Ops) {
	int Ns = JB_Tk__NextStart();
	if (!JB_Tk__Allow(kJB__Tk_kColon)) {
		return Ch;
	}
	if (JB_Msg_OperatorIn(Ch, kJB_SyxArg)) {
		if (JB_Msg_EqualsSyx(Ch, kJB_SyxThg, false)) {
			Ch->Func = kJB_SyxTmp;
			Message* _tmPf0 = JB_Tk__fArgColon(Ns, Ch);
			JB_Incr(_tmPf0);
			JB_Tree_SyntaxAppend(Ch, _tmPf0);
			JB_Decr(_tmPf0);
		}
		return Ch;
	}
	Message* Result = JB_Tk__NewParentName(nil, kJB_SyxItem, Ch->Position, JB_LUB[0]);
	JB_Incr(Result);
	JB_Tree_SyntaxAppend(Result, Ch);
	Message* Ch2 = JB_Tk__Process(TemporalFlags, false, Result);
	JB_Incr(Ch2);
	if (!Ch2) {
		JB_SetRef(Ch2, JB_Tk__ProcessThing(Ops, false));
	}
	if (!Ch2) {
		JB_SetRef(Ch2, JB_Tk__NewParentName(Result, kJB_SyxEmb, Ns, JB_LUB[0]));
	}
	JB_Tree_SyntaxAppend(Result, Ch2);
	(JB_Msg_AfterSet(Result, JB_Msg_After(Ch2)));
	JB_Decr(Ch2);
	JB_SafeDecr(Result);
	return Result;
}

int JB_Tk__ParseLoop(Message* Output, int TmpoFlags) {
	Message* Prev = nil;
	int LC = 0;
	while (Output) {
		ParserLineAndIndent Info = JB_Tk__NextLineAndIndent(Output);
		LC = (LC + Info[0]);
		if (JB_Tk__WillEnd()) {
			int Nxt = JB_Tk__NextStart();
			if (!JB_Tk__Running()) {
				Nxt = JB_Str_Length(JB_Tk__GetData());
			}
			return JB_Tk__FinishParseLoop(LC, Output, Nxt);
		}
		if (Prev and (!Info[0])) {
			return JB_Tk__FinishParseLoop(LC, Output, JB_Tk__NextStart() - 1);
		}
		Message* Ch = JB_Tk__ParseLoopItem(Output, TmpoFlags, Prev, Info[2]);
		if (!Ch) {
			return JB_Tk__FinishParseLoop(LC, Output, JB_Tk__NextStart() - 1);
		}
		if (Ch != Output) {
			LC = (LC + ((JB_Msg_EqualsSyx(Ch, kJB_SyxItem, false))));
			if (Info[3]) {
				(JB_Msg_SyntaxIsSet(Ch, kJB__MsgParseFlags_BreakPoint, true));
			}
			Output = JB_Tk__AddToOutput(Output, Ch, Prev, Info[1]);
			Prev = Ch;
		}
	};
	return LC;
}

bool JB_Tk__ParseLoopFlags(Message* Output, JB_String* Ender, int TmpFlags) {
	bool Rz = false;
	Ind Err = JB_Tk__NextStart();
	Rz = ((bool)JB_Tk__ParseLoop(Output, TmpFlags & (~JB__Tk__StopBars)));
	if (JB_Str_Exists(Ender)) {
		JB_Tk__ExpectEndChar(Err, Ender, true);
		(JB_Msg_AfterSet(Output, JB_Tk__NextStart()));
	}
	return Rz;
}

Message* JB_Tk__ParseLoopItem(Message* Output, int TmpoFlags, Message* Prev, int Indent) {
	Message* Ch = JB_Tk__Process(kJB__Tk_kTemporal & TmpoFlags, false, Output);
	JB_Incr(Ch);
	if ((!Ch)) {
		Message* Item = JB_Tk__ProcessThingParent(Output, kJB__Tk_kOpp, kJB__Tk_kThing);
		JB_Incr(Item);
		if ((!Item) or (Item == Output)) {
			JB_Decr(Ch);
			JB_SafeDecr(Item);
			return Item;
		}
		TmpoFlags = (TmpoFlags & (kJB__Tk_kTemporal & (~kJB__Tk_kTemporalWord)));
		JB_SetRef(Ch, JB_Tk__ParseItem(Item, TmpoFlags, kJB__Tk_kOpp));
		JB_Decr(Item);
	}
	 else if ((JB_Msg_EqualsSyx(Ch, kJB_SyxCnj, false)) or (JB_Msg_EqualsSyx(Ch, kJB_SyxSCnj, false))) {
		JB_SetRef(Ch, JB_Tk__ReRoute(Output, Ch, Prev));
		if (!Ch) {
			JB_Decr(Ch);
			return nil;
		}
		Message* _tmPf0 = ((Message*)JB_Ring_First(Ch));
		JB_Incr(_tmPf0);
		Indent = _tmPf0->Indent;
		JB_Decr(_tmPf0);
	}
	Ch->Indent = Indent;
	JB_SafeDecr(Ch);
	return Ch;
}

Message* JB_Tk__PostInnerAdj(Message* Rel, Message* Opp) {
	JB_Incr(Rel);
	Message* F = ((Message*)JB_Ring_First(Rel));
	JB_Incr(F);
	if ((!((JB_Msg_EqualsSyx(Rel, kJB_SyxRel, false)))) and (!((JB_Msg_EqualsSyx(Rel, kJB_SyxBra, false)) and (JB_Msg_EqualsSyx(F, kJB_SyxRel, false))))) {
		Message* _tmPf1 = JB_Tk__ErrorAdd(JB_LUB[757], Rel->Position);
		JB_Incr(_tmPf1);
		JB_Decr(Rel);
		JB_Decr(F);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	if (JB_Msg_EqualsSyx(Rel, kJB_SyxBra, false)) {
		JB_SetRef(Rel, F);
		JB_SetRef(F, ((Message*)JB_Ring_First(F)));
	}
	Message* Adverb = JB_Tk__Process(kJB__Tk_kOppWord | kJB__Tk_kOppBra, kJB__Tk_kExpect, nil);
	JB_Incr(Adverb);
	if (!Adverb) {
		JB_Decr(Rel);
		JB_Decr(Adverb);
		JB_Decr(F);
		return nil;
	}
	Message* Adj = JB_Syx_Msg(kJB_SyxAdj, JB_LUB[0]);
	JB_Incr(Adj);
	(JB_Ring_NextSibSet(F, Adj));
	JB_Decr(F);
	JB_Tree_SyntaxAppend(Adj, Adverb);
	JB_Decr(Adverb);
	Message* _tmPf0 = ((Message*)JB_Ring_NextSib(Adj));
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(Adj, _tmPf0);
	JB_Decr(Adj);
	JB_Decr(_tmPf0);
	Rel->Func = kJB_Syxpinn;
	JB_SafeDecr(Rel);
	return Rel;
}

Message* JB_Tk__ProcessThing(int Ops, bool Expect) {
	return JB_Tk__ProcessThingSub(nil, Ops, kJB__Tk_kThing, Expect);
}

Message* JB_Tk__ProcessThingNoBar(int Ops, bool Expect) {
	return JB_Tk__ProcessThingSub(nil, Ops, kJB__Tk_kThingSyx | kJB__Tk_kThingWord, Expect);
}

Message* JB_Tk__ProcessThingOrTmp(int Opps) {
	return JB_Tk__ProcessThingSub(nil, Opps, kJB__Tk_kThingSyx | (kJB__Tk_kThingWord | kJB__Tk_kTemporalSyx), false);
}

Message* JB_Tk__ProcessThingParent(Message* Parent, int Ops, int ThingFlags) {
	return JB_Tk__ProcessThingSub(Parent, Ops, ThingFlags, false);
}

Message* JB_Tk__ProcessThingSub(Message* Parent, int Ops, int KindOfThing, bool Expect) {
	Message* Result = JB_Tk__Process(KindOfThing, Expect, Parent);
	JB_Incr(Result);
	if ((!Result) or ((Result == Parent) or JB_Tk__WillEnd())) {
		JB_SafeDecr(Result);
		return Result;
	}
	Message* _tmPf0 = JB_Tk__DecorateThing(Result, Ops);
	JB_Incr(_tmPf0);
	JB_Decr(Result);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* JB_Tk__ReRoute(Message* Output, Message* Cnj, Message* F) {
	Message* Rz = nil;
	JB_Incr(Rz);
	if ((!F)) {
		JB_Decr(Rz);
		return JB_Tk__ErrorAdd(JB_LUB[1151], JB_Tk__NextStart());
	}
	JB_SetRef(Rz, JB_Tk__ChainTemporalRels(F, Cnj));
	if (JB_Ring_HasChildCount(Rz, 2) and JB_Tk__Allow(kJB__Tk_kEndOfLine)) {
		Message* _tmPf0 = JB_Tk__ProcessThing(kJB__Tk_kOpp, false);
		JB_Incr(_tmPf0);
		JB_Tree_SyntaxAppend(Rz, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Tree_SyntaxAppend(Output, Rz);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__ThingXMLAtt(int Start, Message* Parent) {
	int Name = JB_Tk__WordAfterSub(Start, JB__Constants_XMLWordMiddle);
	return JB_Tk__NewParent(Parent, kJB_SyxXAtt, Start, Name);
}

void JB_Tk__TokensFn(Array* Arr, int Bits, FP_ParseHandler Func) {
	TokHan* _tmPf0 = JB_Tk__Handler(Bits, ((TokenHandler_fp)(((TokenHandler_fp)Func))));
	JB_Incr(_tmPf0);
	JB_Tk__TokensHan(Arr, _tmPf0);
	JB_Decr(_tmPf0);
}

void JB_Tk__TokensHan(Array* Arr, TokHan* H) {
	{
		int _if0 = 0;
		while (true) {
			JB_String* S = ((JB_String*)JB_Array_Value(Arr, _if0));
			JB_Incr(S);
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			(JB_Tk__TokenSet(S, H));
			JB_Decr(S);
			(++_if0);
		};
	};
}

void JB_Tk__TokenzFn(JB_String* S, int Bits, FP_ParseHandler Func) {
	if (JB_Str_ContainsString(S, JB_LUB[27])) {
		Array* _tmPf0 = JB_Str_Words(S);
		JB_Incr(_tmPf0);
		JB_Tk__TokensFn(_tmPf0, Bits, ((FP_ParseHandler)(Func)));
		JB_Decr(_tmPf0);
	}
	 else {
		TokHan* _tmPf1 = JB_Tk__Handler(Bits, ((TokenHandler_fp)(((TokenHandler_fp)Func))));
		JB_Incr(_tmPf1);
		(JB_Tk__TokenSet(S, _tmPf1));
		JB_Decr(_tmPf1);
	}
}

Message* JB_Tk__UnexpectedSyntax(Message* Bad) {
	return JB_Tk__ErrorAdd(JB_LUB[758], Bad->Position);
}

Message* JB_Tk__UnTmpPlace(Message* R) {
	Message* P = ((Message*)JB_Ring_Parent(R));
	return ((Message*)JB_Ternary((JB_Msg_EqualsSyx(P, kJB_SyxTmp, false)), P, R));
}

bool JB_Tk__WillEnd() {
	return JB_Tk__CheckEnded(kJB__Tk_kEnd);
}

int JB_Tk__WordAfter(int Start) {
	return JB_Tk__WordAfterSub(Start, JB__Constants_CSWordMiddle);
}

int JB_Tk__WordAfterSub(int Start, CharSet* Cs) {
	int N = JB_Str_Length(JB_Tk__GetData());
	if (Start < N) {
		Ind After = JB_Str_OutCharSet(JB_Tk__GetData(), Cs, Start, JB_int__Max());
		if (!JB_Ind_SyntaxCast(After)) {
			After = N;
		}
		if (After > Start) {
			(JB_Tk__NextStartSet(After));
			return After;
		}
	}
	JB_Tk__ErrorLetter(Start);
	return 0;
}

int JB_Tk__XMLAttribs(Message* XML, int Start) {
	Message* AllAtts = JB_Tk__NewParentName(XML, kJB_SyxList, Start, JB_LUB[0]);
	JB_Incr(AllAtts);
	JB_String* S = JB_Tk__GetData();
	JB_Incr(S);
	while (true) {
		Ind I = JB_Str_OutWhite(S, JB_Tk__NextStart(), JB_int__Max());
		if (!JB_Ind_SyntaxCast(I)) {
			break;
		}
		uint C = JB_Str_ByteValue(S, I);
		if ((C == '>') or ((C == '/') and (JB_Str_ByteValue(S, I + 1) == '>'))) {
			JB_Decr(S);
			JB_Decr(AllAtts);
			return I;
		}
		if (!JB_CS_HasChar(JB__Constants_CSWordStart, C)) {
			break;
		}
		Message* Attr = JB_Tk__ThingXMLAtt(I, AllAtts);
		JB_Incr(Attr);
		if (!JB_Tk__ExpectEndChar(JB_Tk__NextStart(), JB_LUB[241], true)) {
			JB_Decr(Attr);
			JB_Decr(S);
			JB_Decr(AllAtts);
			return 0;
		}
		I = JB_Tk__CleanSpaces();
		C = JB_Str_ByteValue(S, I);
		if (!((C == '\'') or (C == '"'))) {
			JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[1071], I));
			JB_Decr(Attr);
			JB_Decr(S);
			JB_Decr(AllAtts);
			return nil;
		}
		Ind After = JB_Str_FindByte(S, C, I + 1, JB_int__Max());
		Message* Txt = JB_Tk__NewParentName(Attr, kJB_SyxXTxt, Start, JB_LUB[0]);
		JB_Incr(Txt);
		JB_Decr(Attr);
		JB_String* _tmPf0 = JB_Str_Range(S, I + 1, After);
		JB_Incr(_tmPf0);
		JB_SetRef(Txt->Name, JB_Str_MultiReplaceAll(_tmPf0, JB__Constants_XML_UnEscapeStr, JB_StdErr));
		JB_Decr(Txt);
		JB_Decr(_tmPf0);
		(JB_Tk__NextStartSet(After + 1));
	};
	JB_Decr(AllAtts);
	JB_Decr(S);
	JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[1072], JB_Tk__NextStart()));
	return 0;
}

Message* JB_Tk__XMLWhatever(int S, int Skip, JB_String* Ender, Syntax Fn) {
	Message* Rz = nil;
	JB_Incr(Rz);
	int I = S + Skip;
	JB_String* _tmPf0 = JB_Tk__GetData();
	Ind EndPos = JB_Str_InStr(_tmPf0, Ender, I, JB_int__Max(), false);
	if ((!JB_Ind_SyntaxCast(EndPos))) {
		JB_Decr(Rz);
		return JB_Tk__ErrorAdd(JB_LUB[759], I);
	}
	(JB_Tk__NextStartSet(EndPos + JB_Str_Length(Ender)));
	if (Fn) {
		JB_String* _tmPf2 = JB_Tk__GetData();
		JB_String* _tmPf1 = JB_Str_Range(_tmPf2, I, EndPos);
		JB_Incr(_tmPf1);
		JB_SetRef(Rz, JB_Tk__NewParentName(nil, Fn, I, _tmPf1));
		JB_Decr(_tmPf1);
		Rz->Position = S;
		(JB_Msg_AfterSet(Rz, JB_Tk__NextStart()));
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Ind JB_Tk__XMLWordEnd(int From) {
	Ind Rz = -1;
	JB_String* _tmPf0 = JB_Tk__GetData();
	uint B = JB_Str_ByteValue(_tmPf0, From);
	if (!JB_CS_HasChar(JB__Constants_CSWordStart, B)) {
		JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[760], From));
	}
	 else {
		JB_String* _tmPf1 = JB_Tk__GetData();
		Rz = JB_Str_OutCharSet(_tmPf1, JB__Constants_XMLWordMiddle, From + 1, JB_int__Max());
		if (Rz == -1) {
			JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[761], JB_Tk__NextStart()));
		}
		(JB_Tk__NextStartSet(Rz));
	}
	return Rz;
}


int JB_zalgo__Init_() {
	{
		JB__zalgo_R = ((Random){});
	}
	;
	return 0;
}



void JB_bool_Append(bool Self, FastString* Fs_in) {
	JB_FS_AppendString(Fs_in, JB_bool_Render0(Self));
}

JB_String* JB_bool_Render0(bool Self) {
	return ((JB_StringC*)JB_Ternary(Self, JB_LUB[31], JB_LUB[32]));
}


bool JB_byte_CanPrintAsNormalChar(uint /*byte*/ Self) {
	return ((Self < 127) and (Self >= 32));
}

bool JB_byte_In(uint /*byte*/ Self, uint A, uint B) {
	return (Self >= A) and (Self <= B);
}

bool JB_byte_IsHex(uint /*byte*/ Self) {
	return JB_byte_IsInt(Self) or (JB_byte_In(Self, 'a', 'f') or JB_byte_In(Self, 'A', 'F'));
}

bool JB_byte_IsInt(uint /*byte*/ Self) {
	return ((uint)(((int)Self) - '0')) <= 9;
}

bool JB_byte_IsLetter(uint /*byte*/ Self) {
	return JB_CP_IsLetter(((Codepoint)Self));
}

bool JB_byte_IsLower(uint /*byte*/ Self) {
	return JB_CP_IsLower(((Codepoint)Self));
}

bool JB_byte_IsTextLine(uint /*byte*/ Self) {
	return (Self == '\n') or (Self == '\x0D');
}

bool JB_byte_IsUpper(uint /*byte*/ Self) {
	return JB_CP_IsUpper(((Codepoint)Self));
}

bool JB_byte_IsWhite(uint /*byte*/ Self) {
	return JB_CP_IsWhite(((Codepoint)Self));
}

byte JB_byte_LowerCase(uint /*byte*/ Self) {
	if (JB_byte_IsUpper(Self)) {
		return Self + 32;
	}
	return Self;
}

JB_String* JB_byte_Render(uint /*byte*/ Self, FastString* Fs_in) {
	if ((!Fs_in)) {
		return JB_Str__Byte(Self);
	}
	JB_FS_AppendByte(Fs_in, ((byte)Self));
	return JB_LUB[0];
}

byte JB_byte_UpperCase(uint /*byte*/ Self) {
	if (JB_byte_IsLower(Self)) {
		return Self - 32;
	}
	return Self;
}


JB_String* JB_cstring_Str(_cstring Self) {
	return JB_Str__Wrap(Self);
}

void JB_cstring_temp(_cstring Self, FakeJBString* Rz) {
	Rz->Refcount = 0;
	Rz->Length = strlen(Self);
	Rz->Addr = ((byte*)Self);
}


JB_String* JB_dbl_Render(double Self, int Dp, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendDoubleAsText(Fs, Self, Dp, true, true);
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}


float JB_f_RoundTo(float Self, int To) {
	float V = ((float)(JB_int_OperatorPow(10, To)));
	return roundf((Self * V)) / V;
}

float JB_f_Fract(float Self) {
	return Self - floorf(Self);
}

float JB_f_Pow(float Self, int N) {
	float Rz = 0.0f;
	//visible;
	Rz = Self;
	{
		int _Valuef1 = 0;
		while (_Valuef1 < N) {
			Rz = (Rz * Self);
			(++_Valuef1);
		};
	}
	;
	return Rz;
}

bool JB_f_SyntaxAccess(float Self) {
	return JB_Rnd_Float((&JB__Rnd_Shared)) < Self;
}



ASMReg SC_int_ToASM(int Self) {
	ASMReg Rz = ((ASMReg)0);
	Rz = SC_Reg_RegSet(Rz, Self);
	return Rz;
}

bool SC_int_IsNormalMatch(int Self) {
	return ((Self == kJB_kSimpleMatch) or ((Self == kJB_kNumericMatch) or (Self == kJB_kSuperClassMatch)));
}

bool SC_int_IsSimpleOrPointerCast(int Self) {
	return (Self == kJB_kSimpleMatch) or ((Self == kJB_kNumericMatch) or (Self == kJB_kNeedsAddressOf));
}

int JB_int_LowestBit(int Self) {
	return Self & (-Self);
}

Message* JB_int_Msg(int Self) {
	JB_String* _tmPf0 = JB_int_RenderFS(Self, nil);
	JB_Incr(_tmPf0);
	Message* _tmPf1 = JB_Syx_OperatorPlus(kJB_SyxNum, _tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_int_OperatorAlign(int Self, int To) {
	if (To) {
		int Missing = (Self % To);
		if (Missing) {
			return Self + (To - Missing);
		}
		return Self;
	}
	return Self;
}

bool JB_int_OperatorIsa(int Self, uint N) {
	return (!(Self % N));
}

int JB_int_OperatorMax(int Self, int Other) {
	if (Self > Other) {
		return Self;
	}
	return Other;
}

int JB_int_OperatorMin(int Self, int Other) {
	if (Self < Other) {
		return Self;
	}
	return Other;
}

JB_String* JB_int_operatorof(int Self, JB_String* Type, JB_String* Nothing) {
	return JB_Str_Pluralize(Type, Self, Nothing);
}

int JB_int_OperatorPow(int Self, int A) {
	int Rz = 0;
	if (A == 2) {
		return Self * Self;
	}
	if (Self >= 0) {
		Rz = 1;
		{
			int _Valuef1 = 0;
			while (_Valuef1 < A) {
				Rz = (Rz * Self);
				(++_Valuef1);
			};
		};
	}
	return Rz;
}

IntRange JB_int_OperatorTo(int Self, int Other) {
	return ((IntRange)ivec2{Self, Other + 1});
}

JB_String* JB_int_RenderFS(int Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendInt32(Fs, Self);
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_int_RenderSize(int Self, FastString* Fs_in) {
	return JB_int64_StrSize(((int64)Self), Fs_in);
}

bool JB_int_SyntaxAccess(int Self, int Bit) {
	return ((bool)(Self & (1 << Bit)));
}

int JB_int_SyntaxAccessSet(int Self, int Bit, bool Value) {
	int Mask = 1 << Bit;
	return (Self & (~Mask)) | (((int)Value) << Bit);
}

int JB_int_TabsWidth(int Self) {
	return 4 - (Self & 3);
}

ASMReg SC_int_TextASM(int Self) {
	ASMReg Rz = ((ASMReg)0);
	Rz = SC_Reg_RegSet(Rz, Self);
	Rz = SC_Reg_SyntaxIsSet(Rz, kSC__Reg_Textual, true);
	return Rz;
}

int JB_int__Max() {
	return 2147483647;
}

int JB_int__Min() {
	return 2147483648;
}



int64 JB_int64_Abs(int64 Self) {
	return ((int64)JB_Ternary(Self < 0, (-Self), Self));
}

bool SC_int64_CanStoreAsIntImmediate(int64 Self) {
	return ((Self << 50) >> 50) == Self;
}

bool SC_int64_Fits(int64 Self, int Amount, bool Signed) {
	int Sh = 64 - Amount;
	int64 X = Self << Sh;
	if (Signed) {
		X = (X >> Sh);
	}
	 else {
		X = (((uint64)Self) >> Sh);
	}
	return X == Self;
}

int64 JB_int64_Log2(int64 Self) {
	return JB_u64_Log2(((uint64)Self));
}

Message* JB_int64_Msg(int64 Self) {
	JB_String* _tmPf0 = JB_int64_Render(Self, nil);
	JB_Incr(_tmPf0);
	Message* _tmPf1 = JB_Syx_OperatorPlus(kJB_SyxNum, _tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* SC_int64_MsgForConst(int64 Self, bool AllowShift) {
	Message* Rz = nil;
	if ((!AllowShift) or ((Self <= 1) or (!JB_int64_IsPow2(Self)))) {
		return JB_int64_Msg(Self);
	}
	Rz = JB_Syx_Msg(kJB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Rz, SC_NewDeclNum(nil, 1, JB_LUB[0], false));
	Message* Op = JB_Msg_Msg(Rz, kJB_SyxOpp, JB_LUB[739]);
	JB_SetRef(Op->Obj, SC_Opp__Lookup(Op));
	JB_Tree_SyntaxAppend(Rz, SC_NewDeclNum(nil, JB_int64_Log2(Self), JB_LUB[0], false));
	return Rz;
}

Float64 JB_int64_OperatorDiv(int64 Self, int64 D) {
	return ((Float64)Self) / ((Float64)D);
}

int64 JB_int64_OperatorMax(int64 Self, int64 D) {
	if (D > Self) {
		return D;
	}
	return Self;
}

int64 JB_int64_OperatorMin(int64 Self, int64 D) {
	if (D < Self) {
		return D;
	}
	return Self;
}

JB_String* JB_int64_Render(int64 Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendInt64(Fs, Self);
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_int64_RenderSizePart(int64 Self, FastString* Fs, int Size, JB_String* Suff) {
	float F = JB_f_RoundTo(((float)(JB_int64_OperatorDiv(Self, Size))), 1);
	JB_FS_AppendInt32(Fs, ((int)F));
	if (F < 120.0f) {
		int Frac = ((int)(JB_f_Fract(F) * 10.0f));
		JB_FS_AppendByte(Fs, '.');
		JB_FS_AppendInt32(Fs, Frac);
	}
	JB_FS_AppendString(Fs, Suff);
}

JB_String* JB_int64_StrSize(int64 Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	if (Self <= 512) {
		JB_FS_AppendInt64(Fs, Self);
	}
	 else if (Self <= 921600) {
		JB_int64_RenderSizePart(Self, Fs, 1024, JB_LUB[430]);
	}
	 else if (Self < 943718400) {
		JB_int64_RenderSizePart(Self, Fs, 1048576, JB_LUB[431]);
	}
	 else if (Self < 966367641600) {
		JB_int64_RenderSizePart(Self, Fs, 1073741824, JB_LUB[432]);
	}
	 else {
		JB_int64_RenderSizePart(Self, Fs, 1099511627776, JB_LUB[433]);
	}
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

int64 SC_int64_ValueTrap(int64 Self, int64 L, int64 H) {
	if (Self < L) {
		return L;
	}
	if (Self > H) {
		return H;
	}
	return 0;
}



bool JB_ivec2_OperatorContains(ivec2 Self, int X) {
	return (X >= Self[0]) and (X <= Self[1]);
}

bool JB_ivec2_OperatorInrange(ivec2 Self, ivec2 P) {
	return JB_int_OperatorInRange(Self[0], P[0]) and JB_int_OperatorInRange(Self[1], P[1]);
}



ivec4 JB_ivec4_Shrink(ivec4 Self, int I) {
	return ivec4{Self[0] + I, Self[1] + I, Self[2] - I, Self[3] - I};
}

int JB_ivec4_Width(ivec4 Self) {
	return Self[2] - Self[0];
}


bool SC_uint_IsTemp(uint Self) {
	return ((bool)(Self & (1 << 31)));
}

bool SC_uint_OperatorSameReg(uint Self, uint R) {
	return (Self & 31) == (R & 31);
}



uint64 JB_uint64_Trim(uint64 Self, int B) {
	B = (64 - B);
	return (Self << B) >> B;
}





ASM SC_ASM_AddK_KSet(ASM Self, uint Value) {
	return Self | ((Value << 18) >> 18);
}

ASM SC_ASM_Alloc_AlignSet(ASM Self, uint Value) {
	return Self | ((Value << 29) >> 13);
}

ASM SC_ASM_Alloc_AmountSet(ASM Self, uint Value) {
	return Self | ((Value << 16) >> 16);
}

ASM SC_ASM_BFLD_downSet(ASM Self, uint Value) {
	return Self | ((Value << 26) >> 24);
}

ASM SC_ASM_BFLD_LSet(ASM Self, uint Value) {
	return Self | ((Value << 31) >> 31);
}

ASM SC_ASM_BFLD_signSet(ASM Self, uint Value) {
	return Self | ((Value << 31) >> 30);
}

ASM SC_ASM_BFLD_upSet(ASM Self, uint Value) {
	return Self | ((Value << 26) >> 18);
}

ASM SC_ASM_Bra_JmpSet(ASM Self, uint Value) {
	return Self | ((Value << 13) >> 13);
}

ASM SC_ASM_BraBytes_BytesSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 13);
}

ASM SC_ASM_BraBytes_JmpSet(ASM Self, uint Value) {
	return Self | ((Value << 15) >> 15);
}

ASM SC_ASM_CmpB_InvSet(ASM Self, uint Value) {
	return Self | ((Value << 29) >> 23);
}

ASM SC_ASM_CmpB_LSet(ASM Self, uint Value) {
	return Self | ((Value << 26) >> 26);
}

ASM SC_ASM_CNTC_cnstSet(ASM Self, uint Value) {
	return Self | ((Value << 25) >> 23);
}

ASM SC_ASM_CNTC_offsetSet(ASM Self, uint Value) {
	return Self | ((Value << 27) >> 18);
}

ASM SC_ASM_CNTC_sizeSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 30);
}

ASM SC_ASM_ConstGlobal_LSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 30);
}

ASM SC_ASM_ConstGlobal_ValueSet(ASM Self, uint Value) {
	return Self | ((Value << 15) >> 13);
}

ASM SC_ASM_ConstStretchy_CondSet(ASM Self, uint Value) {
	return Self | ((Value << 31) >> 13);
}

ASM SC_ASM_ConstStretchy_InvSet(ASM Self, uint Value) {
	return Self | ((Value << 31) >> 14);
}

ASM SC_ASM_ConstStretchy_ValueSet(ASM Self, uint Value) {
	return Self | ((Value << 15) >> 15);
}

ASM SC_ASM_Convert_LSet(ASM Self, uint Value) {
	return Self | ((Value << 22) >> 22);
}

ASM SC_ASM_Convert_ModeSet(ASM Self, uint Value) {
	return Self | ((Value << 28) >> 18);
}

ASM SC_ASM_Div2_AddSet(ASM Self, uint Value) {
	return Self | ((Value << 26) >> 24);
}

ASM SC_ASM_Div2_LSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 30);
}

ASM SC_ASM_Div2_ShSet(ASM Self, uint Value) {
	return Self | ((Value << 26) >> 18);
}

ASM SC_ASM_Div_KindSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 28);
}

ASM SC_ASM_Div_LSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 30);
}

ASM SC_ASM_Float_DSet(ASM Self, uint Value) {
	return Self | ((Value << 31) >> 28);
}

ASM SC_ASM_Float_LSet(ASM Self, uint Value) {
	return Self | ((Value << 29) >> 29);
}

ASM SC_ASM_FloatConst_HighSet(ASM Self, uint Value) {
	return Self | ((Value << 18) >> 18);
}

ASM SC_ASM_ForeignFunc_TableSet(ASM Self, uint Value) {
	return Self | ((Value << 13) >> 13);
}

ASM SC_ASM_Func_JUMPSet(ASM Self, uint Value) {
	return Self | ((Value << 13) >> 13);
}

ASM SC_ASM_HALT_IsOKSet(ASM Self, uint Value) {
	return Self | ((Value << 28) >> 28);
}

ASM SC_ASM_JCmpEq_JmpSet(ASM Self, uint Value) {
	return Self | ((Value << 18) >> 18);
}

ASM SC_ASM_JCmpF_CmpSet(ASM Self, uint Value) {
	return Self | ((Value << 29) >> 18);
}

ASM SC_ASM_JCmpF_JmpSet(ASM Self, uint Value) {
	return Self | ((Value << 21) >> 21);
}

ASM SC_ASM_JCmpI_CmpSet(ASM Self, uint Value) {
	return Self | ((Value << 29) >> 18);
}

ASM SC_ASM_JCmpI_JmpSet(ASM Self, uint Value) {
	return Self | ((Value << 21) >> 21);
}

ASM SC_ASM_JCmpK_JmpSet(ASM Self, uint Value) {
	return Self | ((Value << 22) >> 22);
}

ASM SC_ASM_JCmpK_KSet(ASM Self, uint Value) {
	return Self | ((Value << 23) >> 13);
}

ASM SC_ASM_Jump_JUMPSet(ASM Self, uint Value) {
	return Self | ((Value << 8) >> 8);
}

ASM SC_ASM_Loop_JmpSet(ASM Self, uint Value) {
	return Self | ((Value << 18) >> 18);
}

ASM SC_ASM_MemUtil_NSet(ASM Self, uint Value) {
	return Self | ((Value << 21) >> 21);
}

ASM SC_ASM_MemUtil_OpSet(ASM Self, uint Value) {
	return Self | ((Value << 29) >> 18);
}

void ASMPrint(ASM Self) {
	//visible;
}

ASM SC_ASM_R1Set(ASM Self, uint Value) {
	return Self | ((Value << 27) >> 8);
}

ASM SC_ASM_R2Set(ASM Self, uint Value) {
	return Self | ((Value << 27) >> 13);
}

ASM SC_ASM_R3Set(ASM Self, uint Value) {
	return Self | ((Value << 27) >> 18);
}

ASM SC_ASM_R4Set(ASM Self, uint Value) {
	return Self | ((Value << 27) >> 23);
}

ASM SC_ASM_Read_moveSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 30);
}

ASM SC_ASM_Read_OffsetSet(ASM Self, uint Value) {
	return Self | ((Value << 25) >> 23);
}

ASM SC_ASM_RefDecrMem_CountSet(ASM Self, uint Value) {
	return Self | ((Value << 25) >> 13);
}

ASM SC_ASM_RefDecrMem_OffsetSet(ASM Self, uint Value) {
	return Self | ((Value << 20) >> 20);
}

ASM SC_ASM_RefSet1_LSet(ASM Self, uint Value) {
	return Self | ((Value << 18) >> 18);
}

ASM SC_ASM_RefSet2_DecrSet(ASM Self, uint Value) {
	return Self | ((Value << 31) >> 18);
}

ASM SC_ASM_RefSet2_OffsetSet(ASM Self, uint Value) {
	return Self | ((Value << 19) >> 19);
}

ASM SC_ASM_RefSet3_DecrSet(ASM Self, uint Value) {
	return Self | ((Value << 31) >> 18);
}

ASM SC_ASM_RefSet3_OffsetSet(ASM Self, uint Value) {
	return Self | ((Value << 19) >> 19);
}

ASM SC_ASM_RefSetApart_LSet(ASM Self, uint Value) {
	return Self | ((Value << 23) >> 23);
}

ASM SC_ASM_RefSetCode_CodeSet(ASM Self, uint Value) {
	return Self | ((Value << 28) >> 18);
}

ASM SC_ASM_RefSetCode_LSet(ASM Self, uint Value) {
	return Self | ((Value << 22) >> 22);
}

ASM SC_ASM_REQ_ModeSet(ASM Self, uint Value) {
	return Self | ((Value << 28) >> 18);
}

ASM SC_ASM_REQ_ValSet(ASM Self, uint Value) {
	return Self | ((Value << 22) >> 22);
}

ASM SC_ASM_RET_SafeDecrSet(ASM Self, uint Value) {
	return Self | ((Value << 31) >> 23);
}

ASM SC_ASM_RET_ValueSet(ASM Self, uint Value) {
	return Self | ((Value << 24) >> 24);
}

ASM SC_ASM_RotateConst_InvSet(ASM Self, uint Value) {
	return Self | ((Value << 31) >> 19);
}

ASM SC_ASM_RotateConst_RotSet(ASM Self, uint Value) {
	return Self | ((Value << 26) >> 13);
}

ASM SC_ASM_RotateConst_ValueSet(ASM Self, uint Value) {
	return Self | ((Value << 20) >> 20);
}

ASM SC_ASM_Shift_ShSet(ASM Self, uint Value) {
	return Self | ((Value << 23) >> 23);
}

ASM SC_ASM_Swap_LSet(ASM Self, uint Value) {
	return Self | ((Value << 28) >> 28);
}

ASM SC_ASM_Table_AddSet(ASM Self, uint Value) {
	return Self | ((Value << 14) >> 14);
}

ASM SC_ASM_Table_ModeSet(ASM Self, uint Value) {
	return Self | ((Value << 31) >> 13);
}

ASM SC_ASM_Tail_JUMPSet(ASM Self, uint Value) {
	return Self | ((Value << 8) >> 8);
}

ASM SC_ASM_Trap_LSet(ASM Self, uint Value) {
	return Self | ((Value << 21) >> 21);
}

ASM SC_ASM_Trap_ModeSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 13);
}

ASM SC_ASM_Trap_SignalSet(ASM Self, uint Value) {
	return Self | ((Value << 26) >> 15);
}

ASM SC_ASM_U0_LSet(ASM Self, uint Value) {
	return Self | ((Value << 8) >> 8);
}

ASM SC_ASM_U1_LSet(ASM Self, uint Value) {
	return Self | ((Value << 13) >> 13);
}

ASM SC_ASM_U2_LSet(ASM Self, uint Value) {
	return Self | ((Value << 18) >> 18);
}

ASM SC_ASM_U3_LSet(ASM Self, uint Value) {
	return Self | ((Value << 23) >> 23);
}

ASM SC_ASM_U4_LSet(ASM Self, uint Value) {
	return Self | ((Value << 28) >> 28);
}

ASM SC_ASM_VecBuild_r5Set(ASM Self, uint Value) {
	return Self | ((Value << 28) >> 28);
}

ASM SC_ASM_VecConst_K1Set(ASM Self, uint Value) {
	return Self | ((Value << 13) >> 13);
}

ASM SC_ASM_VecGet_IndSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 23);
}

ASM SC_ASM_VecGet_LSet(ASM Self, uint Value) {
	return Self | ((Value << 25) >> 25);
}

ASM SC_ASM_VecMix_LSet(ASM Self, uint Value) {
	return Self | ((Value << 31) >> 31);
}

ASM SC_ASM_VecMix_ModeSet(ASM Self, uint Value) {
	return Self | ((Value << 29) >> 28);
}

ASM SC_ASM_VecSwizzle_ClearSet(ASM Self, uint Value) {
	return Self | ((Value << 28) >> 26);
}

ASM SC_ASM_VecSwizzle_FieldsSet(ASM Self, uint Value) {
	return Self | ((Value << 24) >> 18);
}

ASM SC_ASM_VecSwizzle_LSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 30);
}

ASM SC_ASM_Write_moveSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 30);
}

ASM SC_ASM_Write_OffsetSet(ASM Self, uint Value) {
	return Self | ((Value << 25) >> 23);
}

int SC_ASM__Init_() {
	{
		SC__ASM_NoisyASM = 1;
	}
	;
	return 0;
}

void SC_ASM__TestASM() {
	if (!SC__Options_ModePack) {
		return;
	}
	SC__ASM_NoisyASM = 3;
	if (SC__Options_Dev <= 0) {
		return;
	}
	//using;
	uint __varf1 = kJB__ErrorSeverity_Warning;
	uint _usingf0 = JB_ErrorSeverity_SyntaxUsing(__varf1);
	Message* _tmPf2 = JB_Str_Parse((JB_LUB[2067]), kJB_SyxArg, true);
	JB_Incr(_tmPf2);
	Message* T = JB_Msg_NeedSyxName(_tmPf2, kJB_SyxTmp, JB_LUB[2068]);
	JB_Incr(T);
	if (T) {
		SC_ASM__TestASMSub(T);
	}
	JB_Decr(T);
	DTWrap* _tmPf3 = JB_Wrap_ConstructorInt(nil, __varf1);
	JB_Incr(_tmPf3);
	JB_ErrorSeverity_SyntaxUsingComplete(_usingf0, _tmPf3);
	JB_Decr(_tmPf3);
	JB_Decr(_tmPf2);
}

void SC_ASM__TestASMSub(Message* Tests) {
	SC_Pac_PackMakerInit((&SC__Pac_Sh));
	Message* List = JB_Msg_Last(Tests, kJB_SyxArg);
	Message* TestName = JB_Msg_NeedSyx(Tests, kJB_SyxThg);
	if (!(List and TestName)) {
		return;
	}
	SC_TextAssembler__Assemble(List);
	SCFunction* Fn = SC_SpdAssembler__AccessStr(TestName);
	if (Fn) {
		MWrap* Ff = SC_Func_xC2xB5Test(Fn);
		JB_ASM_Registers(JB_ASM__VM(), true);
		ivec4* Result = JB_ASM__Run(((ASM*)JB_Mrap_Ptr(Ff)), Ff->Length);
	}
}


int SC_Reg_BitCount(ASMReg Self) {
	return JB_TC_BitCount(SC_Reg_xC2xB5Type(Self));
}

ASMReg SC_Reg_BoolAnswer(ASMReg Self) {
	Self = SC_Reg_xC2xB5TypeSet(Self, kJB__TC_bool);
	Self = SC_Reg_SyntaxIsSet(Self, kSC__Reg_AlreadyNegated, true);
	Self = SC_Reg_SyntaxIsSet(Self, kSC__Reg_Negate, (!true));
	if (SC_Reg_SyntaxIs(Self, kSC__Reg_CondRequest)) {
		Self = SC_Reg_SyntaxIsSet(Self, kSC__Reg_CondRequest, (!true));
		Self = SC_Reg_SyntaxIsSet(Self, kSC__Reg_CondAnswer, true);
	}
	return Self;
}

bool SC_Reg_CanAddK(ASMReg Self, int64 T) {
	if ((SC_Reg_SyntaxIs(Self, kSC__Reg_RealConst)) and SC_Reg_IsInt(Self)) {
		return SC_int64_CanStoreAsIntImmediate(T);
	}
	return false;
}

int64 SC_Reg_Const(ASMReg Self) {
	FatASM* F = SC_Reg_FAT(Self);
	if (F) {
		return SC_FAT_Const(F);
	}
	if (!SC_Reg_SyntaxIs(Self, kSC__Reg_Param)) {
		SC_Reg_NeedFAT(Self);
	}
	return 0;
}

bool SC_Reg_ConstEnough(ASMReg Self) {
	return ((bool)(((uint64)Self) & ((uint64)kSC__Reg_NotUnConst)));
}

ASMReg SC_Reg_ConstInputFromMath(ASMReg Self, ASMReg L, ASMReg R) {
	if (SC_Reg_SyntaxIs(Self, kSC__Reg_ConstOutput)) {
		Self = (SC_Reg_SyntaxIsSet(Self, kSC__Reg_ConstInput, ((bool)(SC_Reg_ConstEnough(L) & SC_Reg_ConstEnough(R)))));
	}
	return Self;
}

ASMReg SC_Reg_CopyConst(ASMReg Self, ASMReg Src) {
	return SC_Reg_OperatorAs((SC_Reg_OperatorBitand(Self, (~kSC__Reg_RealConst))), (SC_Reg_OperatorBitand(Src, kSC__Reg_RealConst)));
}

float SC_Reg_F32(ASMReg Self) {
	if (SC_Reg_Reg(Self)) {
		return SC_FAT_F32(SC_Reg_NeedFAT(Self));
	}
	return 0.0f;
}

Float64 SC_Reg_F64(ASMReg Self) {
	if (SC_Reg_Reg(Self)) {
		return SC_FAT_F64(SC_Reg_NeedFAT(Self));
	}
	return 0.0f;
}

FatASM* SC_Reg_FAT(ASMReg Self) {
	uint I = SC_Reg_FatIndex(Self);
	if (I) {
		return SC_uint_FAT(I);
	}
	return nil;
}

uint SC_Reg_FatIndex(ASMReg Self) {
	return ((uint64)Self) >> 48;
}

ASMReg SC_Reg_FatIndexSet(ASMReg Self, uint Value) {
	return ((ASMReg)(((((uint64)Self) << 16) >> 16) | (((uint64)Value) << 48)));
}

Float64 SC_Reg_float(ASMReg Self) {
	if (SC_Reg_Reg(Self)) {
		FatASM* F = SC_Reg_NeedFAT(Self);
		if (SC_Reg_IsBig(Self)) {
			return SC_FAT_F64(F);
		}
		return ((Float64)SC_FAT_F32(F));
	}
	return 0.0f;
}

ASMReg SC_Reg_HaveAddr(ASMReg Self) {
	ASMReg Rz = ((ASMReg)0);
	Rz = SC_Reg_OperatorAsnt(Self, kSC__Reg_AddrNeed);
	Rz = SC_Reg_OperatorAs(Rz, kSC__Reg_ContainsAddr);
	return Rz;
}

int SC_Reg_IntDivType(ASMReg Self) {
	int Rz = 0;
	bool FourBytes = JB_TC__Shift(SC_Reg_xC2xB5Type(Self)) == 2;
	if (FourBytes) {
		Rz = 2;
	}
	Rz = (Rz + (!SC_Reg_Signed(Self)));
	return Rz;
}

bool SC_Reg_IsBoolV(ASMReg Self) {
	return SC_Reg_IsBool(Self) and ((!SC_Reg_SyntaxIs(Self, kSC__Reg_RealConst)));
}

bool SC_Reg_IsConst(ASMReg Self, int64 Val) {
	return (SC_Reg_SyntaxIs(Self, kSC__Reg_ConstOutput)) and (SC_Reg_Const(Self) == Val);
}

int SC_Reg_LeftScore(ASMReg Self) {
	return (SC_Reg_SomePointer(Self) << 1) + ((!SC_Reg_SyntaxIs(Self, kSC__Reg_RealConst)));
}

FatASM* SC_Reg_NeedFAT(ASMReg Self) {
	uint I = SC_Reg_FatIndex(Self);
	if (I) {
		return SC_uint_FAT(I);
	}
	if (true) {
		JB_Str_Fail(JB_LUB[941]);
	}
	return (&SC__Pac_Sh.Zero);
}

ASMReg SC_Reg_Negate(ASMReg Self, bool Neg) {
	return ((ASMReg)(((uint64)Self) ^ ((uint64)(Neg << 16))));
}

ASMReg SC_Reg_OperatorAs(ASMReg Self, ASMReg A) {
	return ((ASMReg)(((int64)Self) | ((int64)A)));
}

ASMReg SC_Reg_OperatorAsnt(ASMReg Self, ASMReg A) {
	return ((ASMReg)(((int64)Self) & (~((int64)A))));
}

ASMReg SC_Reg_OperatorBitand(ASMReg Self, ASMReg A) {
	return ((ASMReg)(((int64)Self) & ((int64)A)));
}

bool SC_Reg_OperatorIsa(ASMReg Self, uint /*DataTypeCode*/ M) {
	return SC_Reg_xC2xB5Type(Self) == M;
}

ASMReg SC_Reg_OperatorMul(ASMReg Self, bool B) {
	return ((ASMReg)JB_Ternary(B, Self, nil));
}

ASMReg SC_Reg_OperatorWith(ASMReg Self, ASMReg Dest) {
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_Declaration)) {
		Self = SC_Reg_RegSet(Self, SC_Reg_Reg(Dest));
		Self = (SC_Reg_SyntaxIsSet(Self, kSC__Reg_Temp, (SC_Reg_SyntaxIs(Dest, kSC__Reg_Temp))));
	}
	return Self;
}

ASMReg SC_Reg_OperatorxE2x80xA2(ASMReg Self, ASMReg Dest) {
	if (SC_Reg_Reg(Self) == SC_Reg_Reg(Dest)) {
		return SC_TC_zero(SC_Reg_xC2xB5Type(Dest));
	}
	return Dest;
}

int SC_Reg_PointerMul(ASMReg Self, Message* Exp, int Swapped) {
	Syntax Fn = Exp->Func;
	if (Fn == kJB_SyxOpp) {
		if (Swapped) {
			Exp = ((Message*)JB_Ring_NextSib(Exp));
		}
		 else {
			Exp = ((Message*)JB_Ring_PrevSib(Exp));
		}
	}
	 else if ((Fn == kJB_SyxARel) or (Fn == kJB_SyxBRel)) {
		JB_DoAt(1);
		Exp = ((Message*)JB_Ring_First(Exp));
	}
	 else if (Fn == kJB_SyxAcc) {
		Exp = ((Message*)JB_Ring_First(Exp));
	}
	 else if (Fn == kJB_SyxDot) {
		JB_DoAt(1);
	}
	 else {
		if (true) {
			JB_Str_Fail(JB_LUB[1641]);
		}
	}
	SCDecl* D = SC_Msg_ASMDecl(Exp)->Internal;
	if (D) {
		return SC_Decl_CArraySize(D);
	}
	return 0;
}

ASMReg SC_Reg_ReallySimplify(ASMReg Self) {
	return ((ASMReg)((u16)Self));
}

int SC_Reg_Reg(ASMReg Self) {
	return (((uint64)Self) >> 11) & 31;
}

ASMReg SC_Reg_RegSet(ASMReg Self, int Value) {
	Self = SC_Reg_OperatorBitand(Self, (~((ASMReg)(31 << 11))));
	(Self = SC_Reg_OperatorAs(Self, ((ASMReg)((Value & 31) << 11))));
	Self = (SC_Reg_SyntaxIsSet(Self, kSC__Reg_Temp, ((bool)(Value >> 31))));
	return Self;
}

bool SC_Reg_Signed(ASMReg Self) {
	return JB_TC_IsSigned(((DataTypeCode)Self));
}

ASMReg SC_Reg_Simplify(ASMReg Self) {
	return SC_Reg_OperatorAs(SC_Reg_ReallySimplify(Self), (SC_Reg_OperatorBitand(Self, kSC__Reg_Temp)));
}

bool SC_Reg_SomePointer(ASMReg Self) {
	return (SC_Reg_SyntaxIs(Self, kSC__Reg_ContainsAddr)) or JB_TC_IsPointer(SC_Reg_xC2xB5Type(Self));
}

bool SC_Reg_SyntaxIs(ASMReg Self, ASMReg R) {
	return (SC_Reg_OperatorBitand(Self, R)) == R;
}

ASMReg SC_Reg_SyntaxIsSet(ASMReg Self, ASMReg R, bool Value) {
	if (Value) {
		return SC_Reg_OperatorAs(Self, R);
	}
	 else {
		return SC_Reg_OperatorAsnt(Self, R);
	}
}

uint SC_Reg_treg(ASMReg Self) {
	return SC_Reg_Reg(Self) | ((SC_Reg_SyntaxIs(Self, kSC__Reg_Temp)) << 31);
}

ASMReg SC_Reg_with(ASMReg Self, ASMReg Dest, ASMReg InUse) {
	if (SC_Reg_Reg(InUse) == SC_Reg_Reg(Dest)) {
		Self = SC_Reg_RegSet(Self, 0);
		Self = SC_Reg_SyntaxIsSet(Self, kSC__Reg_Temp, (!true));
		return Self;
	}
	Self = SC_Reg_RegSet(Self, SC_Reg_Reg(Dest));
	Self = (SC_Reg_SyntaxIsSet(Self, kSC__Reg_Temp, (SC_Reg_SyntaxIs(Dest, kSC__Reg_Temp))));
	return Self;
}

ASMReg SC_Reg_xC2xB5TypeSet(ASMReg Self, uint /*DataTypeCode*/ Value) {
	uint64 Mask = ((uint64)kJB__TC_PossibleBits);
	return ((ASMReg)((((uint64)Self) & (~Mask)) | (Value & Mask)));
}

ASMReg SC_Reg__New() {
	return kSC__Reg_Zero;
}


bool SC_ASMType_SyntaxIs(uint /*ASMType*/ Self, uint /*ASMType*/ T) {
	return Self == T;
}

ASMReg SC_ASMType__Access(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_Set)) {
		Dest = SC_Pac_TempTypedWithMsgReg(Self, Exp, Dest);
	}
	Message* F = ((Message*)JB_Ring_First(Exp));
	SCDecl* D = SC_Msg_ASMDecl(F);
	if (JB_TC_VecCount(SC_Decl_TypeInfo(D)) > 1) {
		JB_PrintLine(JB_LUB[1813]);
		return SC_Reg__New();
	}
	ASMReg Base = SC_Pac_GetASM(Self, F, kSC__Reg_WithinAccess);
	Message* Sc = ((Message*)JB_Ring_First(((Message*)JB_Tree_Second(Exp))));
	if (SC_Reg_SyntaxIs(Base, kSC__Reg_InlinedAccess)) {
		JB_DoAt(1);
		return Base;
	}
	ASMReg Vara = SC_Pac_GetASM(Self, Sc, SC_Reg__New());
	if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_AddrRequest)) {
		Dest = SC_Reg_xC2xB5TypeSet(Dest, SC_Msg_ASMDecl(Exp)->DataType);
		return SC_Pac_ReadOrWrite(Self, Dest, Exp, Base, Vara, D, 0);
	}
	Dest = SC_Reg_HaveAddr(Dest);
	Base = SC_Reg_HaveAddr(Base);
	Dest = SC_Reg_xC2xB5TypeSet(Dest, kJB__TC__voidptr);
	return SC_Pac_Plus(Self, Dest, Base, Vara, Exp);
}

ASMReg SC_ASMType__AddressOf(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	ASMReg Rz = ((ASMReg)0);
	Rz = SC_Pac_GetASM(Self, Exp, SC_Reg_OperatorAs(Dest, kSC__Reg_AddrNeed));
	if (SC_Reg_SyntaxIs(Rz, kSC__Reg_ContainsAddr)) {
		return Rz;
	}
	if (true) {
		JB_Msg_Fail(Exp, JB_LUB[831]);
	}
	SC_Pac_GetASM(Self, Exp, SC_Reg_OperatorAs(Dest, kSC__Reg_AddrNeed));
	return Rz;
}

ASMReg SC_ASMType__ARel(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	uint F = JB_Str_First(Exp->Name);
	if ((F == '?') or (F == '!')) {
		return SC_Pac_GetASM(Self, ((Message*)JB_Ring_First(Exp)), Dest);
	}
	int M = ((int)(F == '+'));
	if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_Discard)) {
		M = (M + kSC__ASMType_IncrAfter);
	}
	return SC_ASMType__Incrementatulatorifier(Self, ((Message*)JB_Ring_First(Exp)), Dest, M);
}

ASMReg SC_ASMType__Arg(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	return SC_ASMType__ArgSub(Self, Exp, nil);
}

ASMReg SC_ASMType__ArgSub(ASMState* Self, Message* Exp, SC_Hoister* H) {
	ASMReg Rz = ((ASMReg)0);
	uint OV = SC_Pac_OpenVars(Self);
	{
		Message* Ch = ((Message*)JB_Ring_First(Exp));
		while (Ch) {
			if (H) {
				SC_Hoi_HoistNormal(H, Ch);
			}
			if (Ch->Func == kJB_SyxDecl) {
				SC_ASMType__Decl(Self, Ch, kSC__Reg_RealDiscard, 0);
			}
			 else {
				ASMReg What = SC_Pac_xC2xB5(Self, Ch, kSC__Reg_RealDiscard);
				if (SC_Reg_OperatorBitand(What, kSC__Reg_Exit)) {
					Rz = What;
					break;
				}
			}
			Ch = ((Message*)JB_Ring_NextSib(Ch));
		};
		;
	}
	;
	SC_Pac_CloseVars(Self, OV);
	return Rz;
}

ASMReg SC_ASMType__ASMConst(ASMState* Self, Message* Exp, ASMReg Dest, SCDecl* D) {
	Dest = SC_Reg_SyntaxIsSet(Dest, kSC__Reg_RealConst, true);
	if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstRequest)) {
		if (!SC_NilReg_SyntaxIs(D->NilReg, kSC__NilReg_Hoisted)) {
			return SC_Pac_NumToReg(Self, Exp, D->ExportPosition, Dest, SC_Reg_xC2xB5Type(Dest));
		}
		Dest = SC_Reg_FatIndexSet(Dest, D->FatConstIndex);
		Dest = SC_Reg_RegSet(Dest, D->NilReg & 31);
	}
	return Dest;
}

ASMReg SC_ASMType__ASMFunction(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	Message* Prms = ((Message*)JB_Ring_Last(Exp));
	int TableID = 0;
	SCFunction* Fn = SC_Msg_AsFunc(Prms);
	if (Fn) {
		ASMReg MiniDest = SC_Pac_AskForInline(Self, Prms, Dest, Fn);
		if (MiniDest) {
			return MiniDest;
		}
	}
	 else {
		Message* F = ((Message*)JB_Ring_First(Exp));
		TableID = SC_Reg_Reg(SC_Pac_xC2xB5(Self, F, SC_Reg__New()));
		SCDecl* Dcl = SC_Msg_ASMDecl(F);
		Fn = Dcl->Type->FuncProto;
		if (!Fn) {
			JB_Msg_Fail(Exp, nil);
			return nil;
		}
	}
	Dest = SC_Pac_CallFunc(Self, Exp, Dest, Fn);
	if (!Fn->ReturnType) {
		Dest = SC_Reg_SyntaxIsSet(Dest, kSC__Reg_ConstOutput, true);
	}
	uint Closer = SC_Pac_OpenVars(Self);
	uint RegAddrs = 0;
	uint64 P = SC_Pac_PrmCollect(Self, Prms, Fn, (&RegAddrs));
	SC_Pac_CloseVars(Self, Closer);
	if (!TableID) {
		TableID = Fn->TableId;
		if (!TableID) {
			TableID = 65535;
		}
		TableID = (TableID + 31);
	}
	uint64 PExt = P >> 32;
	FatASM* Fat = SC_Msg_FNC(Prms, Dest, TableID, P, PExt);
	if (SC_Func_HasCVersion(Fn)) {
		Fat->_Op = kSC__ASM_FNCX;
	}
	Fat->_Op = (Fat->_Op + (PExt > 0));
	if (RegAddrs) {
		SC_Pac_RegsBitClear(Self, Exp, RegAddrs, Fn);
	}
	Fat->xC2xB5RefCount = (Fat->xC2xB5RefCount + ((!SC_Func_SyntaxIs(Fn, kSC__FunctionType_Stateless))));
	Dest = (SC_Reg_SyntaxIsSet(Dest, kSC__Reg_Exit, SC_Func_SyntaxIs(Fn, kSC__FunctionType_Killer)));
	return SC_FAT_AsReg(Fat, Dest);
}

ASMReg SC_ASMType__BoolNot(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	Dest = SC_Reg_Negate(Dest, true);
	ASMReg Src = SC_Pac_GetASM(Self, Exp, Dest);
	if (SC_Reg_SyntaxIs(Src, kSC__Reg_AlreadyNegated)) {
		return Src;
	}
	return SC_Pac_Exists(Self, Dest, Src, Exp);
}

ASMReg SC_ASMType__BRel(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	JB_String* S = Exp->Name;
	uint N = JB_Str_First(S);
	if (N == '~') {
		return SC_Pac_DoMathSub(Self, Exp, Dest, ((fn_OpASM)(((fn_OpASM)(SC__Opp_Bnot->ASM)))));
	}
	if ((N == '-') and (JB_Str_EqualsInt(S, 1, false))) {
		return SC_Pac_DoMathSub(Self, Exp, Dest, ((fn_OpASM)(((fn_OpASM)(SC__Opp_Negative->ASM)))));
	}
	Message* F = ((Message*)JB_Ring_First(Exp));
	if (N == '!') {
		return SC_ASMType__BoolNot(Self, F, Dest, 0);
	}
	if (N == '&') {
		return SC_ASMType__AddressOf(Self, F, Dest, 0);
	}
	bool IsPlusPlus = N == '+';
	return SC_ASMType__Incrementatulatorifier(Self, F, Dest, ((int)IsPlusPlus));
}

ASMReg SC_ASMType__Char(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	return SC_ASMType__Num(Self, Exp, Dest, Mode);
}

ASMReg SC_ASMType__ConstConvert(ASMState* Self, Message* Exp, ASMReg Dest, ASMReg From, uint /*DataTypeCode*/ Old, uint /*DataTypeCode*/ New) {
	FatASM* Srf = SC_Reg_NeedFAT(From);
	int NC = JB_TC_BitCount(New);
	int64 K = 0;
	if (JB_TC_IsInt(Old) != JB_TC_IsInt(New)) {
		K = SC_FAT_FloatIntConvConst(Srf, Old, New);
	}
	 else if (JB_TC_IsFloat(New)) {
		K = SC_FAT_FloatConvConst(Srf, NC);
	}
	 else {
		int Sh = 64 - NC;
		int64 Oof = SC_FAT_Const(Srf) << Sh;
		K = ((int64)JB_Ternary(SC_Reg_Signed(Dest), ((int64)Oof) >> Sh, ((int64)(((uint64)Oof) >> Sh))));
	}
	SC_Pac_NopConst(Self, From);
	return SC_Pac_NumToReg(Self, Exp, K, Dest, New);
}

ASMReg SC_ASMType__Debugger(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	if (SC__Options_TargetDebug) {
		return SC_FAT_AsReg(SC_Msg_TRAP(Exp, SC_Reg__New(), 0, 2), SC_Reg__New());
	}
	return SC_Reg__New();
}

ASMReg SC_ASMType__Decl(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	ASMReg Rz = ((ASMReg)0);
	Rz = SC_ASMType__DeclSub(Self, Exp, SC_Reg__New(), 0);
	if (SC__Options_Optimise < 4) {
		FatASM* Fat = SC_Reg_FAT(Rz);
		if (Fat) {
			(++Fat->xC2xB5RefCount);
		}
	}
	return Rz;
}

ASMReg SC_ASMType__DeclSub(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	Message* Rel = ((Message*)JB_Ring_Last(Exp));
	SCDecl* Ty = SC_Msg_FastDecl(Exp);
	if (!Exp->Obj) {
		Ty = SC_Msg_FastDecl(((Message*)JB_Ring_First(Rel)));
	}
	Ty->BranchDepth = Self->State.BranchDepth;
	Dest = SC_Pac_DeclareMe(Self, Rel, Ty);
	Message* Item = ((Message*)JB_Ring_Last(Rel));
	if (!SC_Decl_SyntaxIs(Ty, kSC__SCDeclInfo_Local)) {
	}
	if ((SC_Decl_SyntaxIs(Ty, kSC__SCDeclInfo_AlteredInBranch)) or ((!SC_Decl_SyntaxIs(Ty, kSC__SCDeclInfo_Local)))) {
		return SC_Pac_xC2xB5Into(Self, Item, Dest);
	}
	ASMReg K = SC_Pac_xC2xB5Into(Self, Item, Dest);
	if (SC_Reg_SyntaxIs(K, kSC__Reg_ConstOutput)) {
		SC_Pac_MakeConstFromASM(Self, Ty, K, nil);
	}
	return K;
}

ASMReg SC_ASMType__DoGlobal(ASMState* Self, Message* Exp, ASMReg Dest, SCDecl* D) {
	if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_Set)) {
		Dest = SC_Pac_TempTypedWithMsgReg(Self, Exp, Dest);
	}
	ASMReg Addr = SC_ASMType__GlobAddr(D, Exp, Dest);
	if (Addr) {
		if (SC_Reg_SyntaxIs(Dest, kSC__Reg_AddrRequest)) {
			Addr = SC_Reg_xC2xB5TypeSet(Addr, D->DataType);
			return SC_Reg_HaveAddr(Addr);
		}
		Dest = SC_Reg_xC2xB5TypeSet(Dest, D->DataType);
		Dest = SC_Reg_OperatorAsnt(Dest, kSC__Reg_ContainsAddr);
		return SC_Pac_ReadOrWrite(Self, Dest, Exp, Addr, SC_Reg__New(), D, 0);
	}
	return ((ASMReg)0);
}

ASMReg SC_ASMType__DoMath(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	Message* Op = ((Message*)JB_Tree_Second(Exp));
	SCOperator* Scop = ((SCOperator*)Op->Obj);
	if (Scop) {
		if (SC_Opp_SyntaxIs(Scop, kSC__OpMode_AndOr)) {
			return SC_Pac_ASMBoolBadnessMadness(Self, Exp, Dest, Scop->Kind);
		}
		fn_OpASM Fn = ((fn_OpASM)(Scop->ASM));
		if (Fn) {
			return SC_Pac_DoMathSub(Self, Exp, Dest, ((fn_OpASM)(Fn)));
		}
	}
	if (true) {
		JB_Msg_Fail(Op, JB_LUB[1814]);
	}
	return ((ASMReg)0);
}

ASMReg SC_ASMType__Dot(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	ASMReg SubDest = ((ASMReg)0);
	if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_Set)) {
		Dest = SC_Pac_TempTypedWithMsgReg(Self, Exp, Dest);
		SubDest = Dest;
	}
	SCDecl* Prop = SC_Msg_ASMDecl(Exp);
	if (SC_Decl_SyntaxIs(Prop, kSC__SCDeclInfo_Const)) {
		return SC_ASMType__ASMConst(Self, Exp, Dest, Prop);
	}
	if (SC_Decl_SyntaxIs(Prop, kSC__SCDeclInfo_Global)) {
		return SC_ASMType__DoGlobal(Self, Exp, Dest, Prop);
	}
	Message* F = ((Message*)JB_Ring_First(Exp));
	ASMReg Obj = SC_Pac_GetASM(Self, F, SubDest);
	uint T = SC_Decl_TypeInfo(Prop);
	Dest = SC_Reg_xC2xB5TypeSet(Dest, T);
	int64 Pos = Prop->ExportPosition;
	if ((Pos < 0) or (Pos > 1024)) {
	}
	if ((SC_Reg_SyntaxIs(Dest, kSC__Reg_AddrRequest)) or SC_Decl_IsCArray(Prop)) {
		Pos = (Pos * JB_TC_ByteCount(T));
		if (SC_Decl_IsCArray(Prop)) {
			Dest = SC_Reg_xC2xB5TypeSet(Dest, kJB__TC__voidptr);
		}
		Dest = SC_Reg_HaveAddr(Dest);
		return SC_Pac_AddToReg(Self, Exp, Dest, SC_Reg_OperatorAs(Obj, kSC__Reg_NoScale), Pos);
	}
	return SC_Pac_ReadOrWrite(Self, Dest, Exp, Obj, SC_Reg__New(), Prop, Pos);
}

ASMReg SC_ASMType__First(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	return SC_Pac_GetASM(Self, ((Message*)JB_Ring_First(Exp)), Dest);
}

ASMReg SC_ASMType__GlobAddr(SCDecl* D, Message* Exp, ASMReg Dest) {
	if (SC_NilReg_SyntaxIs(D->NilReg, kSC__NilReg_Hoisted)) {
		Dest = SC_int_ToASM(((int)D->NilReg));
	}
	 else {
		int64 iTable = D->ExportPosition;
		if (iTable <= 0) {
			JB_Msg_Fail(Exp, SC_Str_internal(JB_LUB[1232]));
			return nil;
		}
		if (iTable > ((1 << 18) - 1)) {
			JB_Msg_Fail(Exp, JB_LUB[1233]);
			return nil;
		}
		Dest = SC_FAT_AsReg(SC_Msg_GTAB(Exp, Dest, ((int)(SC_Decl_IsLib(D))), iTable), Dest);
	}
	Dest = SC_Reg_xC2xB5TypeSet(Dest, kJB__TC__voidptr);
	return SC_Reg_HaveAddr(Dest);
}

ASMReg SC_ASMType__Ignore(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	return SC_Reg__New();
}

int64 SC_ASMType__IncrAmount(ASMReg Upon, int IsPlus, SCDecl* D) {
	int64 Rz = 0;
	Rz = JB_Ternary(IsPlus & 1, 1, ((int)-1));
	if (SC_Reg_IsFloat(Upon)) {
		if (SC_Reg_FourBytes(Upon)) {
			Rz = JB_f_AsInt(((float)Rz));
		}
		 else {
			Rz = JB_dbl_AsInt(((Float64)Rz));
		}
	}
	 else if (SC_Decl_TypeSuffers(D)) {
		Rz = (Rz * SC_Decl_PointerIncrement(D));
	}
	return Rz;
}

ASMReg SC_ASMType__Incrementatulatorifier(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	//visible;
	ASMReg Src = SC_Pac_GetASM(Self, Exp, SC_Reg_OperatorAs(Dest, kSC__Reg_AddrRequest));
	int64 Amount = SC_ASMType__IncrAmount(Src, Mode, SC_Msg_ASMDecl(Exp));
	if ((!SC_Reg_Reg(Dest)) and (!SC_Reg_SyntaxIs(Dest, kSC__Reg_Discard))) {
		Dest = SC_Pac_TempTypedWithMsgReg(Self, Exp, Dest);
	}
	Message* P = ((Message*)JB_Ring_Parent(Exp));
	if (SC_Reg_SyntaxIs(Src, kSC__Reg_ContainsAddr)) {
		Dest = SC_Reg_xC2xB5TypeSet(Dest, SC_Reg_xC2xB5Type(Src));
		return SC_ASMType__IncrOnAddr(Self, P, Dest, Mode, Src, Amount);
	}
	if (SC_Reg_SyntaxIs(Src, kSC__Reg_Temp)) {
		JB_Msg_Fail(P, JB_LUB[1862]);
	}
	if (Mode & kSC__ASMType_IncrAfter) {
		return SC_Pac_IncrPost(Self, P, Dest, Src, Amount);
	}
	return SC_Pac_IncrPre(Self, P, Dest, Src, Amount);
}

ASMReg SC_ASMType__IncrOnAddr(ASMState* Self, Message* F, ASMReg Dest, int Mode, ASMReg Addr, int64 Amount) {
	if (!(SC_Reg_IsInt(Dest) and SC_int64_Fits(Amount, 7, true))) {
		return SC_ASMType__IncrSlowOnAddr(Self, F, Dest, Mode, Addr, Amount);
	}
	int Bc = JB_Int_Log2(JB_TC_ByteCount(SC_Reg_xC2xB5Type(Dest)));
	int Offset = 0;
	Addr = SC_Pac_InlineOffsetOpt(Self, Addr, Bc, (&Offset), ((1 << 5) - 1));
	FatASM* Fat = SC_Msg_CNTC(F, Addr, Dest, Offset, Amount, Bc);
	if (Mode & kSC__ASMType_IncrAfter) {
		Fat->_Op = kSC__ASM_CNTD;
	}
	return SC_FAT_AsReg(Fat, Dest);
}

ASMReg SC_ASMType__IncrSlowOnAddr(ASMState* Self, Message* F, ASMReg Dest, int Mode, ASMReg Addr, int64 Amount) {
	uint TmpCloser = SC_Pac_OpenVars(Self);
	SC_Pac_Read(Self, Dest, F, Dest, Addr, 0);
	ASMReg NewValue = ((ASMReg)JB_Ternary(Mode & kSC__ASMType_IncrAfter, SC_Pac_TempTypedWithMsgReg(Self, F, kSC__Reg_Temp), ((ASMReg)Dest)));
	SC_Pac_IncrPre(Self, F, NewValue, Dest, Amount);
	FatASM* Fat = SC_Pac_Write(Self, Dest, F, NewValue, Addr, 0);
	SC_Pac_CloseVars(Self, TmpCloser);
	return SC_FAT_AsReg(Fat, Dest);
}

int SC_ASMType__Init_() {
	{
	}
	;
	return 0;
}

void SC_ASMType__InitAccess() {
	ASM_Read* R = (&SC__ASMType_ReadASM[0]);
	ASM_Write* W = (&SC__ASMType_WriteASM[0]);
	R++[0] = kSC__ASM_RD1U;
	R++[0] = kSC__ASM_RD1S;
	R++[0] = kSC__ASM_RD2U;
	R++[0] = kSC__ASM_RD2S;
	R++[0] = kSC__ASM_RD4U;
	R++[0] = kSC__ASM_RD4S;
	R++[0] = kSC__ASM_RD8U;
	R++[0] = kSC__ASM_RD8U;
	R++[0] = kSC__ASM_RD16;
	R++[0] = kSC__ASM_RD16;
	//Write	;
	W++[0] = kSC__ASM_WR1U;
	W++[0] = kSC__ASM_WR2U;
	W++[0] = kSC__ASM_WR4U;
	W++[0] = kSC__ASM_WR8U;
	W++[0] = kSC__ASM_WR16;
}

ASMReg SC_ASMType__InlinedReturn(ASMState* Self, Message* Exp, ASMReg Dest) {
	Dest = SC_Reg_OperatorAs(Dest, SC_Reg_OperatorMul(kSC__Reg_ExitFunction, Self->TailInlineable));
	Dest = SC_Reg_OperatorAs(Dest, kSC__Reg_ExitAtAll);
	Message* F = ((Message*)JB_Ring_First(Exp));
	if (F) {
		Dest = SC_Pac_xC2xB5Into(Self, F, Dest);
	}
	if (Self->TailInlineable and SC_ASMType__TryTail(Self, Dest)) {
		return Dest;
	}
	FatASM* Fat = SC_Msg_RET(Exp, Dest, SC_Reg__New(), SC_Reg__New(), 0, 0);
	Fat->xC2xB5RefCount = 1;
	(SC_FAT_SyntaxIsSet(Fat, kSC__Reg_CondAnswer, true));
	return SC_FAT_AsReg(Fat, Dest);
}

ASMReg SC_ASMType__Num(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	SCDecl* D = SC_Msg_ASMDecl(Exp);
	uint T = SC_Decl_TypeOnly(D);
	Dest = SC_Reg_xC2xB5TypeSet(Dest, T);
	Dest = SC_Reg_SyntaxIsSet(Dest, kSC__Reg_RealConst, true);
	if (SC_NilReg_SyntaxIs(D->NilReg, kSC__NilReg_Hoisted)) {
		Dest = SC_Reg_RegSet(Dest, D->NilReg & 31);
		Dest = SC_Reg_FatIndexSet(Dest, D->FatConstIndex);
		return Dest;
	}
	return SC_Pac_NumToReg(Self, Exp, D->ExportPosition, Dest, T);
}

ASMReg SC_ASMType__Return(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	ASMReg L = Self->State.Return;
	if (L) {
		return SC_ASMType__InlinedReturn(Self, Exp, L);
	}
	ASMReg V = ((ASMReg)0);
	Message* F = ((Message*)JB_Ring_First(Exp));
	if (F) {
		V = SC_Pac_ExistingVar(Self, F, kSC__VarUseMode_Return);
		if (!V) {
			V = SC_Pac_GetASM(Self, F, kSC__Reg_ExitFunction);
		}
	}
	if (SC_ASMType__TryTail(Self, Dest)) {
		return kSC__Reg_Exit;
	}
	int Amount = ((int)(F != nil));
	ASMReg D0 = SC_Pac_SafeDecr(Self);
	if (D0) {
		if (SC_Reg_Reg(D0) != SC_Reg_Reg(V)) {
		}
	}
	ASMReg D1 = SC_Pac_DecrWith0(Self);
	ASMReg D2 = SC_Pac_DecrWith0(Self);
	Ind K = -1;
	if (!D0) {
		K = SC_Pac_Const(Self, V, 8, true);
	}
	bool HasK = K >= 0;
	FatASM* Fat = SC_Msg_RET(Exp, SC_Reg_OperatorMul(V, (!HasK)), D1, D2, ((int)(D0 != nil)), K * HasK);
	(++Fat->xC2xB5RefCount);
	return SC_FAT_AsReg(Fat, kSC__Reg_Exit);
}

ASMReg SC_ASMType__SetRel(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	Message* A = SC_Msg_ASMUnbra(((Message*)JB_Ring_First(Exp)));
	Message* B = ((Message*)JB_Ring_Last(Exp));
	ASMReg X = SC_Pac_ExistingVar(Self, A, kSC__VarUseMode_Set);
	if (X) {
		Dest = SC_Pac_xC2xB5Into(Self, B, X);
		SCDecl* D = SC_Msg_ASMDecl(A);
		SC_Pac_MakeConstFromASM(Self, D, nil, Dest);
		return Dest;
	}
	Dest = SC_Pac_GetASM(Self, B, SC_Reg__New());
	Dest = SC_Reg_OperatorAs((SC_Reg_OperatorAsnt(Dest, kSC__Reg_RealConst)), kSC__Reg_Set);
	return SC_Pac_xC2xB5(Self, A, SC_Reg_OperatorAs(Dest, kSC__Reg_AlwaysSet));
}

ASMReg SC_ASMType__Sheb(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	SC__ASMType_LastDebugMark = Exp;
	return SC_FAT_AsReg(SC_Msg_NOOP(Exp), SC_Reg__New());
}

ASMReg SC_ASMType__StatExpr(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	{
		Message* Ch = ((Message*)JB_Ring_First(Exp));
		while (Ch) {
			if (JB_Tree_IsLast(Ch)) {
				return SC_Pac_GetASM(Self, Ch, Dest);
			}
			SC_Pac_xC2xB5(Self, Ch, kSC__Reg_Discard);
			Ch = ((Message*)JB_Ring_NextSib(Ch));
		};
		;
	}
	;
	return ((ASMReg)0);
}

ASMReg SC_ASMType__Thg(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	ASMReg Thg = SC_ASMType__ThgSub(Self, Exp, Dest);
	int Reg = SC_Reg_Reg(Thg);
	if (((uint)(Reg - 1)) < 31) {
		return Thg;
	}
	if ((Reg == 0) and SC_Reg_SyntaxIs(Thg, kSC__Reg_RealConst)) {
		return Thg;
	}
	if (true) {
		JB_Msg_Fail(Exp, JB_LUB[1863]);
	}
	return ((ASMReg)0);
}

ASMReg SC_ASMType__ThgSub(ASMState* Self, Message* Exp, ASMReg Dest) {
	SCDecl* D = SC_Msg_ASMDecl(Exp);
	if (SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Local)) {
		ASMReg T = SC_Pac_ThgASM(Self, D);
		if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_AddrNeed)) {
			return T;
		}
		if (SC_Reg_SyntaxIs(Dest, kSC__Reg_DeclareInlineParam)) {
			T = SC_Reg_SyntaxIsSet(T, kSC__Reg_InlinedAccess, true);
			return T;
		}
		return SC_FAT_AsReg(SC_Msg_GRAB(Exp, Dest, T, Dest, T), SC_Reg_HaveAddr(Dest));
	}
	if (SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Const)) {
		return SC_ASMType__ASMConst(Self, Exp, Dest, D);
	}
	if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstRequest)) {
		if (!SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Global)) {
			JB_Msg_Fail(Exp, nil);
		}
		return SC_ASMType__DoGlobal(Self, Exp, Dest, D);
	}
	return ((ASMReg)0);
}

bool SC_ASMType__TryTail(ASMState* Self, ASMReg Dest) {
	if (SC_Str_trap(JB_LUB[163], nil)) {
	}
	FatASM* L = SC_Pac_LastWith0(Self);
	if (!(SC_FAT_OperatorIsa(L, kSC__ASM_FNC) or SC_FAT_OperatorIsa(L, kSC__ASM_FNC3))) {
		return nil;
	}
	if (L->R[3]) {
		return nil;
	}
	L->R[0] = L->R[1];
	L->R[1] = L->R[2];
	L->_Op = kSC__ASM_TAIL;
	L->Outputs = 0;
	L->Info = Dest;
	return L->BlockNum == Self->BasicBlock;
}

ASMReg SC_ASMType__TypeCast(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	Message* F = ((Message*)JB_Ring_First(Exp));
	Dest = SC_Reg_xC2xB5TypeSet(Dest, SC_Msg_ASMDecl(Exp)->DataType);
	ASMReg Freg = SC_Pac_GetASM(Self, F, Dest);
	if (SC_Reg_xC2xB5Type(Freg) == SC_Reg_xC2xB5Type(Dest)) {
		return Freg;
	}
	return SC_ASMType__TypeCastSub(Self, Exp, Dest, Freg);
}

ASMReg SC_ASMType__TypeCastSub(ASMState* Self, Message* Exp, ASMReg Dest, ASMReg From) {
	SCDecl* NewDecl = SC_Msg_ASMDecl(Exp);
	if (SC_Decl_IsBareStruct(NewDecl)) {
		Message* Inner = ((Message*)JB_Ring_First(Exp));
		if (!(((JB_Msg_EqualsSyx(Inner, kJB_SyxArg, false))) and (!JB_Ring_HasChildren(Inner)))) {
			JB_Msg_Fail(Exp, nil);
			return nil;
		}
		return SC_Reg_OperatorAs(SC_Reg__New(), kSC__Reg_FromZeroMemory);
	}
	uint NewType = SC_Decl_RegType(NewDecl);
	if (!SC_Reg_Reg(From)) {
		From = SC_Reg_xC2xB5TypeSet(From, NewType);
		return From;
	}
	uint OldType = SC_Reg_xC2xB5Type(From);
	if (JB_TC_SyntaxIs(NewType, kJB__TC_bool)) {
		if ((JB_TC_SyntaxIs(OldType, kJB__TC_bool)) and ((!SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate)))) {
			return From;
		}
		return SC_Pac_NotEq(Self, Dest, SC_Reg__New(), From, Exp);
	}
	int OC = JB_TC_BitCount(OldType);
	int NC = JB_TC_BitCount(NewType);
	bool IsInt = JB_TC_IsInt(NewType);
	uint Floatness = (JB_TC_IsFloat(NewType) << 1) + JB_TC_IsFloat(OldType);
	if ((Floatness == 0) or (Floatness == 3)) {
		if ((NC == OC) and (JB_TC_IsSigned(OldType) == JB_TC_IsSigned(NewType))) {
			From = SC_Reg_xC2xB5TypeSet(From, NewType);
			return From;
		}
		if (IsInt and ((NC > OC) or (OC == 64))) {
			From = SC_Reg_xC2xB5TypeSet(From, NewType);
			return From;
		}
	}
	Dest = SC_Pac_TempOnly(Self, Exp, Dest);
	Dest = SC_Reg_xC2xB5TypeSet(Dest, NewType);
	if (SC_Reg_SyntaxIs(From, kSC__Reg_ConstOutput)) {
		return SC_ASMType__ConstConvert(Self, Exp, Dest, From, OldType, NewType);
	}
	if (JB_TC_IsFloat(OldType) or JB_TC_IsFloat(NewType)) {
		return SC_FAT_AsReg(SC_Msg_CONV(Exp, Dest, From, SC_TC_ASMConv(OldType, NewType)), Dest);
	}
	int Sh2 = 64 - OC;
	return SC_FAT_AsReg(SC_Msg_BFLG(Exp, Dest, From, Sh2, Sh2, ((int)SC_Reg_Signed(From))), Dest);
}

ASMReg SC_ASMType__Unexpected(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	if (!SC_Msg_ASMType(Exp)) {
		int F = ((int)Exp->Func);
		if (F) {
			(SC_Msg_ASMTypeSet(Exp, F));
			return SC_Pac_GetASM(Self, Exp, Dest);
		}
	}
	if (true) {
		JB_Msg_Fail(Exp, JB_LUB[832]);
	}
	return ((ASMReg)0);
}


int JB_CharProp__Init_() {
	{
	}
	;
	return 0;
}



bool JB_CP_In(Codepoint Self, int A, int B) {
	return ((uint)(Self - A)) <= ((uint)(B - A));
}

bool JB_CP_IsHigher(Codepoint Self) {
	return JB_CP_In(Self, 128, 1114111);
}

bool JB_CP_IsLetter(Codepoint Self) {
	return JB_CP_IsUpper(Self) or (JB_CP_IsLower(Self) or JB_CP_IsHigher(Self));
}

bool JB_CP_IsLower(Codepoint Self) {
	return JB_CP_In(Self, 'a', 'z');
}

bool JB_CP_IsUpper(Codepoint Self) {
	return JB_CP_In(Self, 'A', 'Z');
}

bool JB_CP_IsWhite(Codepoint Self) {
	return (Self == ' ') or ((Self == '\n') or ((Self == '\x0D') or (Self == '\t')));
}






int JB_TC__Shift(uint /*DataTypeCode*/ Self) {
	return (Self >> 4) & 3;
}

int SC_TC_ASMConv(uint /*DataTypeCode*/ Self, uint /*DataTypeCode*/ To) {
	return (SC_TC_ASMPart(To) << 2) | SC_TC_ASMPart(Self);
}

int SC_TC_ASMPart(uint /*DataTypeCode*/ Self) {
	if (JB_TC_IsFloat(Self)) {
		return 0 + (JB_TC_BitCount(Self) > 32);
	}
	return 2 + JB_TC_IsSigned(Self);
}

bool JB_TC_ASMUseIntRegs(uint /*DataTypeCode*/ Self) {
	if (JB_TC_IsPointer(Self)) {
		return true;
	}
	if (JB_TC_IsInt(Self) and (JB_TC_VecCount(Self) <= 1)) {
		return true;
	}
	return false;
}

DataTypeCode JB_TC_Basictype(uint /*DataTypeCode*/ Self) {
	return Self & (128 + (8 + 3));
}

int JB_TC_BitCount(uint /*DataTypeCode*/ Self) {
	return (JB_TC_VecCount(Self) << JB_TC__Shift(Self)) << 3;
}

int JB_TC_ByteCount(uint /*DataTypeCode*/ Self) {
	return JB_TC_VecCount(Self) << JB_TC__Shift(Self);
}

int SC_TC_FloatIntMerge(uint /*DataTypeCode*/ Self, int Old, Message* S) {
	if (JB_TC_IsFloat(Self)) {
		Old = (Old | 2);
	}
	 else if (JB_TC_IsInt(Self)) {
		Old = (Old | 1);
	}
	if (Old == 3) {
		JB_Msg_Fail(S, JB_LUB[953]);
		return 0;
	}
	return Old;
}

int JB_TC_Floatness(uint /*DataTypeCode*/ Self) {
	if (JB_TC_IsInt(Self)) {
		return 0;
	}
	return JB_TC_ByteCount(Self);
}

bool JB_TC_IsFloat(uint /*DataTypeCode*/ Self) {
	return ((bool)((Self >> 7) & 1));
}

bool JB_TC_IsInt(uint /*DataTypeCode*/ Self) {
	return (!JB_TC_IsFloat(Self));
}

bool JB_TC_IsNumeric(uint /*DataTypeCode*/ Self) {
	return ((bool)(Self & kJB__TC_Numeric));
}

bool JB_TC_IsPointer(uint /*DataTypeCode*/ Self) {
	return (!JB_TC_IsNumeric(Self)) and ((!JB_TC_SyntaxIs(Self, kJB__TC_bool)));
}

bool JB_TC_IsSigned(uint /*DataTypeCode*/ Self) {
	return ((bool)((Self >> 6) & 1));
}

int JB_TC_ItemBitCount(uint /*DataTypeCode*/ Self) {
	return 8 << JB_TC__Shift(Self);
}

int JB_TC_NumericCount(uint /*DataTypeCode*/ Self) {
	if (Self & kJB__TC_Numeric) {
		return JB_TC_VecCount(Self);
	}
	return 0;
}

int SC_TC_NumericCountBoolsToo(uint /*DataTypeCode*/ Self, SCDecl* D) {
	if (Self & kJB__TC_Numeric) {
		return JB_TC_VecCount(Self);
	}
	if (Self & kJB__TC_bool) {
		return 1;
	}
	if (SC__Base_ConstantsLoadingOverride and SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Const)) {
		return JB_TC_VecCount(Self);
	}
	return 0;
}

bool JB_TC_SameBasicType(uint /*DataTypeCode*/ Self, uint /*DataTypeCode*/ B) {
	return (JB_TC_IsFloat(Self) == JB_TC_IsFloat(B));
}

DataTypeCode JB_TC_SetSigned(uint /*DataTypeCode*/ Self, bool B) {
	if (B) {
		return (Self) | (1 << 6);
	}
	 else {
		return (Self) & (~(1 << 6));
	}
}

SCClass* SC_TC_SignedStuffClass(uint /*DataTypeCode*/ Self) {
	uint S = JB_TC_SetSigned(Self, (!JB_TC_IsSigned(Self)));
	Message* Keymsg = JB_Msg_ConstructorNormal(nil, kJB_SyxThg, JB_LUB[0]);
	{
		Dictionary* _LoopSrcf2 = JB_TC__Types();
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf2);
		while (true) {
			DTWrap* C = ((DTWrap*)JB_DictionaryReader_NextValue(_navf0));
			if (C == nil) {
				break;
			}
			JB_String* Key = JB_Nav_Name(_navf0);
			if (C == JB_Wrap_ConstructorInt(nil, S)) {
				JB_SetRef(Keymsg->Name, Key);
				return SC_Comp__SyntaxAccess(Keymsg);
			}
		};
	}
	;
	return nil;
}

int JB_TC_VecCount(uint /*DataTypeCode*/ Self) {
	return (Self & 3) + 1;
}

ASMReg SC_TC_zero(uint /*DataTypeCode*/ Self) {
	ASMReg K = kSC__Reg_RealConst;
	K = SC_Reg_xC2xB5TypeSet(K, Self);
	return K;
}

Dictionary* JB_TC__Types() {
	//visible;
	Dictionary* _T = JB__TC_Types_Dict;
	JB_Incr(_T);
	if (_T) {
		JB_SafeDecr(_T);
		return _T;
	}
	JB_SetRef(_T, JB_Dict_Constructor(nil));
	JB_SetRef(JB__TC_Types_Dict, _T);
	JB_Dict_SetValue(_T, JB_LUB[373], kJB__TC_sign);
	JB_Dict_SetValue(_T, JB_LUB[149], kJB__TC_byte);
	JB_Dict_SetValue(_T, JB_LUB[150], kJB__TC_char);
	JB_Dict_SetValue(_T, JB_LUB[374], kJB__TC_Byte2);
	JB_Dict_SetValue(_T, JB_LUB[375], kJB__TC_Byte3);
	JB_Dict_SetValue(_T, JB_LUB[376], kJB__TC_Byte4);
	JB_Dict_SetValue(_T, JB_LUB[377], kJB__TC_SByte);
	JB_Dict_SetValue(_T, JB_LUB[378], kJB__TC_SByte2);
	JB_Dict_SetValue(_T, JB_LUB[379], kJB__TC_SByte3);
	JB_Dict_SetValue(_T, JB_LUB[380], kJB__TC_SByte4);
	JB_Dict_SetValue(_T, JB_LUB[381], kJB__TC_uint16);
	JB_Dict_SetValue(_T, JB_LUB[382], kJB__TC_int16);
	JB_Dict_SetValue(_T, JB_LUB[383], kJB__TC_s16x2);
	JB_Dict_SetValue(_T, JB_LUB[384], kJB__TC_s16x3);
	JB_Dict_SetValue(_T, JB_LUB[385], kJB__TC_s16x4);
	JB_Dict_SetValue(_T, JB_LUB[153], kJB__TC_int64);
	JB_Dict_SetValue(_T, JB_LUB[386], kJB__TC_uint64);
	JB_Dict_SetValue(_T, JB_LUB[387], kJB__TC_iVec2);
	JB_Dict_SetValue(_T, JB_LUB[388], kJB__TC_iVec3);
	JB_Dict_SetValue(_T, JB_LUB[389], kJB__TC_iVec4);
	JB_Dict_SetValue(_T, JB_LUB[390], kJB__TC_Float16);
	JB_Dict_SetValue(_T, JB_LUB[154], kJB__TC_Float);
	JB_Dict_SetValue(_T, JB_LUB[391], kJB__TC_Double);
	JB_Dict_SetValue(_T, JB_LUB[392], kJB__TC_Vec2);
	JB_Dict_SetValue(_T, JB_LUB[393], kJB__TC_Vec3);
	JB_Dict_SetValue(_T, JB_LUB[394], kJB__TC_Vec4);
	JB_Dict_SetValue(_T, JB_LUB[152], kJB__TC_Int);
	JB_Dict_SetValue(_T, JB_LUB[395], kJB__TC_UInt);
	JB_Dict_SetValue(_T, JB_LUB[147], kJB__TC_bool);
	JB_Dict_SetValue(_T, JB_LUB[396], kJB__TC_u32);
	JB_Dict_SetValue(_T, JB_LUB[397], kJB__TC_HFloat);
	JB_Dict_SetValue(_T, JB_LUB[398], kJB__TC_s64);
	JB_Dict_SetValue(_T, JB_LUB[399], kJB__TC_u64);
	JB_Dict_SetValue(_T, JB_LUB[400], kJB__TC_f64);
	JB_Dict_SetValue(_T, JB_LUB[401], kJB__TC_f16);
	JB_Dict_SetValue(_T, JB_LUB[402], kJB__TC_int8);
	JB_Dict_SetValue(_T, JB_LUB[403], kJB__TC_uint8);
	JB_Dict_SetValue(_T, JB_LUB[404], kJB__TC_u16);
	JB_Dict_SetValue(_T, JB_LUB[405], kJB__TC_s16);
	JB_Dict_SetValue(_T, JB_LUB[406], kJB__TC__void);
	JB_Dict_SetValue(_T, JB_LUB[407], kJB__TC__voidptr);
	JB_Dict_SetValue(_T, JB_LUB[408], kJB__TC_cstring);
	JB_Dict_SetValue(_T, JB_LUB[409], kJB__TC_Failed);
	JB_Dict_SetValue(_T, JB_LUB[410], kJB__TC_PossibleBits);
	JB_Dict_SetValue(_T, JB_LUB[411], kJB__TC_Numeric);
	JB_Dict_SetValue(_T, JB_LUB[412], kJB__TC_UnusedType);
	JB_SafeDecr(_T);
	return _T;
}


JB_Duration JB_Date_Ago(Date Self) {
	if (Self) {
		return JB_Date_OperatorMinus(JB_Date__Now(), Self);
	}
	return 0;
}

int JB_Date_DayOfWeekApprox(Date Self) {
	return JB_Date_Days(Self) % 7;
}

int64 JB_Date_Days(Date Self) {
	return (JB_Date_WholeSeconds(Self) / kJB__Date_kSecondsPerDay);
}

Float64 JB_Date_Float64(Date Self) {
	return ((Float64)Self) * kJB__Date_kOneStep;
}

JB_Duration JB_Date_OperatorMinus(Date Self, Date D) {
	return ((int64)Self) - ((int64)D);
}

JB_String* JB_Date_RenderDurr(Date Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendDurr(Fs, Self);
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

int64 JB_Date_WholeSeconds(Date Self) {
	return Self >> 16;
}


bool SC_DeclMode_SyntaxIs(DeclMode Self, DeclMode O) {
	return Self == O;
}


bool SC_DotUseType_SyntaxIs(DotUseType Self, DotUseType D) {
	return Self == D;
}





JB_String* JB_ErrorSeverity_Render(uint /*ErrorSeverity*/ Self, FastString* Fs_in) {
	if (Self < kJB__ErrorSeverity_MaxError) {
		Array* _tmPf0 = JB_ErrorSeverity__InitNames();
		JB_Incr(_tmPf0);
		JB_String* Name = ((JB_String*)JB_Array_Value(_tmPf0, ((int)Self)));
		JB_Incr(Name);
		JB_Decr(_tmPf0);
		if (!Fs_in) {
			if (Name != nil) {
				JB_SafeDecr(Name);
				return Name;
			}
			JB_Decr(Name);
			return JB_LUB[0];
		}
		if (JB_Str_Exists(Name)) {
			JB_FS_AppendString(Fs_in, Name);
		}
		JB_Decr(Name);
	}
	return JB_LUB[0];
}

bool JB_ErrorSeverity_SyntaxIs(uint /*ErrorSeverity*/ Self, uint /*ErrorSeverity*/ E) {
	return Self == E;
}

ErrorSeverity JB_ErrorSeverity_SyntaxUsing(uint /*ErrorSeverity*/ Self) {
	uint Rz = 0;
	Rz = JB_StdErr->LowerErrorsTo;
	JB_StdErr->LowerErrorsTo = Self;
	return Rz;
}

void JB_ErrorSeverity_SyntaxUsingComplete(uint /*ErrorSeverity*/ Self, JB_Object* Idk) {
	JB_StdErr->LowerErrorsTo = Self;
}

ErrorSeverity JB_ErrorSeverity__Find(JB_String* Name, Message* Err) {
	{
		Array* _LoopSrcf2 = JB_ErrorSeverity__InitNames();
		int _if0 = 0;
		while (true) {
			JB_String* N = ((JB_String*)JB_Array_Value(_LoopSrcf2, _if0));
			if (N == nil) {
				break;
			}
			int I = _if0;
			if (JB_Str_Equals(N, Name, true)) {
				return I;
			}
			(++_if0);
		};
	}
	;
	if (Err) {
		if (true) {
			JB_Msg_Fail(Err, nil);
		}
	}
	return 0;
}

int JB_ErrorSeverity__Init_() {
	{
		JB_SetRef(JB__ErrorSeverity__names, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

Array* JB_ErrorSeverity__InitNames() {
	return ({
		Array* _X = JB__ErrorSeverity__names;
		if (!JB_Array_SyntaxCast(_X)) {
			_X = JB_Str_Words(JB_LUB[546]);
			JB_SetRef(JB__ErrorSeverity__names, _X);
		}
		 _X;
	});
}


bool JB_ExitCode_IsRunning(ExitCode Self) {
	return Self == -1;
}

bool JB_ExitCode_Successful(ExitCode Self) {
	return Self == 0;
}











FlowControlStopper JB_FlowControlStopper_SyntaxUsing(FlowControlStopper Self) {
	//;
	return 0;
}

void JB_FlowControlStopper_SyntaxUsingComplete(FlowControlStopper Self, JB_Object* Dummy) {
	//;
	JB_Flow__Stop();
}




bool JB_Rg_Contains1(IntRange Self, int I) {
	return (I >= Self[0]) and (I < Self[1]);
}

int JB_Rg_Width(IntRange Self) {
	return Self[1] - Self[0];
}


bool JB_MaybeBool_Default(MaybeBool Self) {
	return ((bool)(((byte)Self) & 1));
}

bool JB_MaybeBool_IsKnown(MaybeBool Self) {
	return ((byte)Self) <= 1;
}

bool JB_MaybeBool_KnownFalse(MaybeBool Self) {
	return ((byte)Self) == 0;
}

bool JB_MaybeBool_KnownTrue(MaybeBool Self) {
	return ((byte)Self) == 1;
}

MaybeBool JB_MaybeBool_Negate(MaybeBool Self) {
	return ((MaybeBool)(((byte)Self) ^ 1));
}

MaybeBool JB_MaybeBool__Default(bool Default) {
	return ((MaybeBool)(8 + Default));
}

MaybeBool JB_MaybeBool__Known(bool As) {
	return ((MaybeBool)(As));
}




NilCheckMode SC_khalai_Activate(NilCheckMode Self) {
	if (SC_khalai_SyntaxIs(Self, kSC__khalai_Active)) {
		return SC_khalai_Normal(Self);
	}
	bool Rev = (SC_khalai_SyntaxIs(Self, kSC__khalai_Reversed));
	return Self | (kSC__khalai_Positive + Rev);
}

NilCheckMode SC_khalai_Negate(NilCheckMode Self) {
	NilCheckMode P = (Self & kSC__khalai_Positive) >> 1;
	P = (P | ((Self & kSC__khalai_Negative) << 1));
	return P | (Self & (~kSC__khalai_Active));
}

NilCheckMode SC_khalai_Normal(NilCheckMode Self) {
	if (SC_khalai_SyntaxIs(Self, kSC__khalai_Reversed)) {
		return SC_khalai_Negate(Self) & (~kSC__khalai_Reversed);
	}
	return Self;
}

bool SC_khalai_SyntaxIs(NilCheckMode Self, NilCheckMode Other) {
	return ((bool)(Self & Other));
}

NilCheckMode SC_khalai_SyntaxIsSet(NilCheckMode Self, NilCheckMode Other, bool Value) {
	if (Value) {
		return Self | Other;
	}
	 else {
		return Self & (~Other);
	}
}


bool SC_NilReason_SyntaxIs(uint /*NilReason*/ Self, uint /*NilReason*/ X) {
	return X == Self;
}

int SC_NilReason__Init_() {
	{
		JB_SetRef(SC__NilReason_values, (JB_Array_Constructor0(nil)));
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[253]);
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[254]);
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[255]);
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[256]);
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[257]);
	}
	;
	return 0;
}


int SC_NRD_DepthOfVars(NilRecord Self) {
	if (Self) {
		return ((int)JB_u64_Log2(Self)) >> 1;
	}
	return 0;
}

NilState SC_NRD_SyntaxAccess(NilRecord Self, int Item) {
	Item = (Item << 1);
	return (Self >> Item) & kSC__NilState_Either;
}


bool SC_NilReg_SyntaxIs(uint /*NilReg*/ Self, uint /*NilReg*/ Type) {
	return ((bool)(Self & Type));
}


JB_String* SC_NilState_RawName(uint /*NilState*/ Self) {
	if (SC_NilState_SyntaxIs(Self, kSC__NilState_Either)) {
		return JB_LUB[78];
	}
	if (SC_NilState_SyntaxIs(Self, kSC__NilState_Nilish)) {
		return JB_LUB[36];
	}
	if (SC_NilState_SyntaxIs(Self, kSC__NilState_Realish)) {
		return JB_LUB[79];
	}
	return JB_LUB[80];
}

NilState SC_NilState_StatedReal(uint /*NilState*/ Self) {
	if ((Self & kSC__NilState_Optional) == kSC__NilState_Real) {
		return kSC__NilState_Real;
	}
	return 0;
}

bool SC_NilState_SyntaxIs(uint /*NilState*/ Self, uint /*NilState*/ Type) {
	return (Self & Type) == Type;
}


bool SC_OpMode_SyntaxIs(OpMode Self, OpMode X) {
	return (Self & X) == X;
}





bool JB_ProcessMode_SyntaxIs(uint /*ProcessMode*/ Self, uint /*ProcessMode*/ M) {
	return ((bool)(Self & M));
}



int SC_SCBlockage_BlockCombine(SCBlockage Self, SCBlockage B) {
	if (B == Self) {
		return Self;
	}
	if (SC_SCBlockage_SyntaxIs(Self, kSC__SCBlockage_Return)) {
		return B;
	}
	if (SC_SCBlockage_SyntaxIs(B, kSC__SCBlockage_Return)) {
		return Self;
	}
	//would this even happen ever???;
	return kSC__SCBlockage_Continue;
}

bool SC_SCBlockage_SyntaxIs(SCBlockage Self, SCBlockage B) {
	return Self == B;
}


SCDeclInfo SC_SCDeclInfo_Set(SCDeclInfo Self, SCDeclInfo D, bool B) {
	if (B) {
		return Self | D;
	}
	return Self & (~D);
}


bool SC_SCNodeFindMode_SyntaxIs(SCNodeFindMode Self, SCNodeFindMode M) {
	return ((bool)(Self & M));
}



bool SC_SCNodeType_HasPtrs(SCNodeType Self) {
	return ((bool)(((int)Self) & 1));
}

bool SC_SCNodeType_SyntaxIs(SCNodeType Self, SCNodeType D) {
	return Self == D;
}




void JB_Syx_ExportAddrSet(Syntax Self, FP_fpMsgRender Value) {
	JB_Syx_Obj(Self)->ExportAddr = Value;
}

FP_fpMsgRender JB_Syx_ExportAddr(Syntax Self) {
	return ((FP_fpMsgRender)(JB_Syx_Obj(Self)->ExportAddr));
}

bool JB_Syx_IsString(Syntax Self) {
	return (Self >= kJB_SyxSStr) and (Self <= kJB_SyxStr);
}

bool JB_Syx_ListViewable(Syntax Self) {
	return JB_Syx_Translateable(Self) or JB_Syx_IsString(Self);
}

JB_String* JB_Syx_LongName(Syntax Self) {
	if (Self) {
		SyntaxObj* O = JB_Syx_Obj(Self);
		if (O) {
			return O->LongName;
		}
	}
	return JB_LUB[30];
}

Message* JB_Syx_Msg(Syntax Self, JB_String* Name) {
	return JB_Msg_ConstructorRange(nil, nil, Self, JB__Tk_Using.Position, Name, JB_Str_Length(Name));
}

Message* JB_Syx_IntMsg(Syntax Self, int64 Name) {
	JB_String* _tmPf0 = JB_int64_Render(Name, nil);
	JB_Incr(_tmPf0);
	Message* _tmPf1 = JB_Syx_Msg(Self, _tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Syx_Name(Syntax Self) {
	if (Self) {
		SyntaxObj* O = JB_Syx_Obj(Self);
		if (O) {
			return O->Name;
		}
	}
	return JB_LUB[30];
}

SyntaxObj* JB_Syx_Obj(Syntax Self) {
	return JB__Constants__FuncArray[((int)Self)];
}

Message* JB_Syx_OperatorPlus(Syntax Self, JB_String* M) {
	return JB_Syx_Msg(Self, M);
}

Message* JB_Syx_PlusNum(Syntax Self, int M) {
	return JB_Syx_Msg(Self, JB_int_RenderFS(M, nil));
}

FP_fpMsgRender JB_Syx_RenderAddr(Syntax Self) {
	return ((FP_fpMsgRender)(JB_Syx_Obj(Self)->RenderAddr));
}

bool JB_Syx_Translateable(Syntax Self) {
	return (Self <= kJB_SyxThg) and (Self >= kJB_SyxTmp);
}

Syntax JB_Syx__Func(JB_String* Name, Message* Where) {
	//visible;
	if (Name != nil) {
		SyntaxObj* Obj = ((SyntaxObj*)JB_Dict_ValueLower(JB__Constants__SyxDict, Name));
		JB_Incr(Obj);
		if (!Obj) {
			JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[817], Name);
			JB_Incr(_tmPf0);
			JB_Msg_Fail(Where, _tmPf0);
			JB_Decr(_tmPf0);
			JB_Decr(Obj);
			return nil;
		}
		Syntax _tmPf1 = Obj->ID;
		JB_Decr(Obj);
		return _tmPf1;
	}
	return nil;
}

int JB_Syx__Init_() {
	{
	}
	;
	return 0;
}

Syntax JB_Syx__StdNew(FP_fpMsgRender Msg, JB_String* Name, JB_String* LongName, int ID) {
	SyntaxObj* Result = JB_Fn_Constructor(nil, ((FP_fpMsgRender)(Msg)), Name, ID);
	JB_Incr(Result);
	(JB_Dict_ValueSet(JB__Constants__SyxDict, Name, Result));
	JB_SetRef(JB__Constants__FuncArray[ID], Result);
	if (((JB_String*)JB_Str_Exists(LongName))) {
		(JB_Dict_ValueSet(JB__Constants__SyxDict, LongName, Result));
		JB_SetRef(Result->LongName, LongName);
	}
	 else {
		JB_SetRef(Result->LongName, Name);
	}
	JB_Decr(Result);
	return ((Syntax)ID);
}




bool SC_VarUseMode_SyntaxIs(VarUseMode Self, VarUseMode V) {
	return ((bool)(Self & V));
}




int SC_xC2xB5Param_BitSize(uint /*ASMParam*/ Self) {
	return (Self & 31) + 1;
}

bool SC_xC2xB5Param_IsReg(uint /*ASMParam*/ Self) {
	return (!SC_xC2xB5Param_SyntaxIs(Self, kSC__xC2xB5Param_NonReg));
}

bool SC_xC2xB5Param_SyntaxIs(uint /*ASMParam*/ Self, uint /*ASMParam*/ P) {
	return ((bool)(Self & P));
}

Macro* SC_xC2xB5Param_Which(uint /*ASMParam*/ Self) {
	if (SC_xC2xB5Param_SyntaxIs(Self, kSC__xC2xB5Param_Jump)) {
		return SC__VM_Builder_gyatt;
	}
	if (SC_xC2xB5Param_SyntaxIs(Self, kSC__xC2xB5Param_Number)) {
		return SC__VM_Builder_legs;
	}
	if (SC_xC2xB5Param_SyntaxIs(Self, kSC__xC2xB5Param_Output)) {
		return SC__VM_Builder_skibidy;
	}
	return SC__VM_Builder_arms;
}


ASM* JB_ASM_AddK__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_AddK_KSet(Rz, Self->R[2]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_Alloc__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_Alloc_AlignSet(Rz, Self->R[1]);
	Rz = SC_ASM_Alloc_AmountSet(Rz, Self->R[2]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_BFLD__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_BFLD_upSet(Rz, Self->R[2]);
	Rz = SC_ASM_BFLD_downSet(Rz, Self->R[3]);
	Rz = SC_ASM_BFLD_signSet(Rz, Self->R[4]);
	Rz = SC_ASM_BFLD_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_Bra__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_Bra_JmpSet(Rz, Self->R[1]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_BraBytes__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_BraBytes_BytesSet(Rz, Self->R[1]);
	Rz = SC_ASM_BraBytes_JmpSet(Rz, Self->R[2]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_CNTC__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_CNTC_offsetSet(Rz, Self->R[2]);
	Rz = SC_ASM_CNTC_cnstSet(Rz, Self->R[3]);
	Rz = SC_ASM_CNTC_sizeSet(Rz, Self->R[4]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_CmpB__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_CmpB_InvSet(Rz, Self->R[3]);
	Rz = SC_ASM_CmpB_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_ConstGlobal__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_ConstGlobal_ValueSet(Rz, Self->R[1]);
	Rz = SC_ASM_ConstGlobal_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_ConstStretchy__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_ConstStretchy_CondSet(Rz, Self->R[1]);
	Rz = SC_ASM_ConstStretchy_InvSet(Rz, Self->R[2]);
	Rz = SC_ASM_ConstStretchy_ValueSet(Rz, Self->R[3]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_Convert__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_Convert_ModeSet(Rz, Self->R[2]);
	Rz = SC_ASM_Convert_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_Div__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_R4Set(Rz, Self->R[3]);
	Rz = SC_ASM_Div_KindSet(Rz, Self->R[4]);
	Rz = SC_ASM_Div_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_Div2__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_Div2_ShSet(Rz, Self->R[2]);
	Rz = SC_ASM_Div2_AddSet(Rz, Self->R[3]);
	Rz = SC_ASM_Div2_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_Float__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_R4Set(Rz, Self->R[3]);
	Rz = SC_ASM_Float_DSet(Rz, Self->R[4]);
	Rz = SC_ASM_Float_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_FloatConst__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_FloatConst_HighSet(Rz, Self->R[2]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_ForeignFunc__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_ForeignFunc_TableSet(Rz, Self->R[1]);
	if (Curr < (After + 2)) {
		Curr++[0] = Rz;
		Curr++[0] = Self->R[2];
		uint P2 = Self->R[2 + 1];
		if (P2) {
			Curr++[0] = P2;
		}
	}
	return Curr;
}


ASM* JB_ASM_Func__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_Func_JUMPSet(Rz, Self->R[1]);
	if (Curr < (After + 2)) {
		Curr++[0] = Rz;
		Curr++[0] = Self->R[2];
		uint P2 = Self->R[2 + 1];
		if (P2) {
			Curr++[0] = P2;
		}
	}
	return Curr;
}


ASM* JB_ASM_HALT__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_R4Set(Rz, Self->R[3]);
	Rz = SC_ASM_HALT_IsOKSet(Rz, Self->R[4]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_JCmpEq__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_JCmpEq_JmpSet(Rz, Self->R[2]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_JCmpF__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_JCmpF_CmpSet(Rz, Self->R[2]);
	Rz = SC_ASM_JCmpF_JmpSet(Rz, Self->R[3]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_JCmpI__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_JCmpI_CmpSet(Rz, Self->R[2]);
	Rz = SC_ASM_JCmpI_JmpSet(Rz, Self->R[3]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_JCmpK__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_JCmpK_KSet(Rz, Self->R[1]);
	Rz = SC_ASM_JCmpK_JmpSet(Rz, Self->R[2]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_Jump__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_Jump_JUMPSet(Rz, Self->R[0]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_Loop__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_Loop_JmpSet(Rz, Self->R[2]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_MemUtil__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_MemUtil_OpSet(Rz, Self->R[2]);
	Rz = SC_ASM_MemUtil_NSet(Rz, Self->R[3]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_REQ__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_REQ_ModeSet(Rz, Self->R[2]);
	Rz = SC_ASM_REQ_ValSet(Rz, Self->R[3]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_RET__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_RET_SafeDecrSet(Rz, Self->R[3]);
	Rz = SC_ASM_RET_ValueSet(Rz, Self->R[4]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_Read__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_Read_OffsetSet(Rz, Self->R[3]);
	Rz = SC_ASM_Read_moveSet(Rz, Self->R[4]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_RefDecrMem__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_RefDecrMem_CountSet(Rz, Self->R[1]);
	Rz = SC_ASM_RefDecrMem_OffsetSet(Rz, Self->R[2]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_RefSet1__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_RefSet1_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_RefSet2__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_RefSet2_DecrSet(Rz, Self->R[2]);
	Rz = SC_ASM_RefSet2_OffsetSet(Rz, Self->R[3]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_RefSet3__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_RefSet3_DecrSet(Rz, Self->R[2]);
	Rz = SC_ASM_RefSet3_OffsetSet(Rz, Self->R[3]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_RefSetApart__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_RefSetApart_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_RefSetCode__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_RefSetCode_CodeSet(Rz, Self->R[2]);
	Rz = SC_ASM_RefSetCode_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_RotateConst__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_RotateConst_RotSet(Rz, Self->R[1]);
	Rz = SC_ASM_RotateConst_InvSet(Rz, Self->R[2]);
	Rz = SC_ASM_RotateConst_ValueSet(Rz, Self->R[3]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_Shift__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_Shift_ShSet(Rz, Self->R[3]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_Swap__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_R4Set(Rz, Self->R[3]);
	Rz = SC_ASM_Swap_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_Table__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_Table_ModeSet(Rz, Self->R[1]);
	Rz = SC_ASM_Table_AddSet(Rz, Self->R[2]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_Tail__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_Tail_JUMPSet(Rz, Self->R[0]);
	if (Curr < (After + 2)) {
		Curr++[0] = Rz;
		Curr++[0] = Self->R[1];
		uint P2 = Self->R[1 + 1];
		if (P2) {
			Curr++[0] = P2;
		}
	}
	return Curr;
}


ASM* JB_ASM_Trap__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_Trap_ModeSet(Rz, Self->R[1]);
	Rz = SC_ASM_Trap_SignalSet(Rz, Self->R[2]);
	Rz = SC_ASM_Trap_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_U0__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_U0_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_U1__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_U1_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_U2__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_U2_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_U3__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_U3_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_U4__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_R4Set(Rz, Self->R[3]);
	Rz = SC_ASM_U4_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_VecBuild__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_R4Set(Rz, Self->R[3]);
	Rz = SC_ASM_VecBuild_r5Set(Rz, Self->R[4]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_VecConst__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_VecConst_K1Set(Rz, Self->R[1]);
	if (Curr < (After + 2)) {
		Curr++[0] = Rz;
		Curr++[0] = Self->R[2];
		uint P2 = Self->R[2 + 1];
		if (P2) {
			Curr++[0] = P2;
		}
	}
	return Curr;
}


ASM* JB_ASM_VecGet__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_VecGet_IndSet(Rz, Self->R[3]);
	Rz = SC_ASM_VecGet_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_VecMix__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_R4Set(Rz, Self->R[3]);
	Rz = SC_ASM_VecMix_ModeSet(Rz, Self->R[4]);
	Rz = SC_ASM_VecMix_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_VecSwizzle__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_VecSwizzle_FieldsSet(Rz, Self->R[2]);
	Rz = SC_ASM_VecSwizzle_ClearSet(Rz, Self->R[3]);
	Rz = SC_ASM_VecSwizzle_LSet(Rz, Self->R[5]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


ASM* JB_ASM_Write__Encode(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	//visible;
	ASM Rz = ((ASM)SC_FAT_Op(Self)) << 24;
	Rz = SC_ASM_R1Set(Rz, Self->R[0]);
	Rz = SC_ASM_R2Set(Rz, Self->R[1]);
	Rz = SC_ASM_R3Set(Rz, Self->R[2]);
	Rz = SC_ASM_Write_OffsetSet(Rz, Self->R[3]);
	Rz = SC_ASM_Write_moveSet(Rz, Self->R[4]);
	if (Curr < After) {
		Curr++[0] = Rz;
	}
	return Curr;
}


float JB_Duration_Float(JB_Duration Self) {
	return ((float)JB_Date_Float64(Self));
}











void JB_SorterComparer_Sort(FP_SorterComparer Self, Array* Items) {
	JB_Array_Sort(Items, ((FP_SorterComparer)(Self)));
}


























void SC_nil_BecomeRealSub(ArchonPurger* Self, SCDecl* V) {
	V->NilDeclared = kSC__NilState_Real;
	if (SC_Decl_SyntaxIs(V, kSC__SCDeclInfo_Self)) {
		Self->FnAbleToNilCheck = false;
	}
	if (SC_nil_NestDepth(Self) > 0) {
		Self->Realnesses = (Self->Realnesses & (~(kSC__NilState_Nilish << (V->NilReg << 1))));
	}
}

NilRecord SC_nil_BranchEnter(ArchonPurger* Self, Message* Where) {
	if (Self->Neel < Self->RowEnd) {
		NilRecord N = Self->Neel++[0];
		Self->Neel[0] = N;
		return N;
	}
	if (true) {
		JB_Msg_Fail(Where, JB_LUB[963]);
	}
	return 0;
}

NilState SC_nil_BranchExit(ArchonPurger* Self, NilRecord A) {
	NilRecord B = SC_nil__Value();
	Self->Neel--[0] = 0;
	(SC_nil_ValueSet((&SC__nil_T), A | B));
	if (SC_nil_NestDepth(Self) == 0) {
		Self->Realnesses = -1;
	}
	return kSC__NilState_Real;
}

NilState SC_nil_BranchExitBool(ArchonPurger* Self, NilRecord A, NilCheckMode Test, NilRecord Orig) {
	if (SC_khalai_SyntaxIs(Test, kSC__khalai_ForBools)) {
		return SC_nil_BranchExit(Self, A);
	}
	Self->Neel[0] = 0;
	return SC_nil_BranchRestore(Self, Orig);
}

NilState SC_nil_BranchRestore(ArchonPurger* Self, NilRecord A) {
	Self->Neel--[0] = 0;
	(SC_nil_ValueSet((&SC__nil_T), A));
	if (SC_nil_NestDepth(Self) == 0) {
		Self->Realnesses = -1;
	}
	return kSC__NilState_Real;
}

NilRecord SC_nil_BranchSwap(ArchonPurger* Self, NilRecord A) {
	NilRecord Rz = 0;
	Rz = SC_nil__Value();
	(SC_nil_ValueSet(Self, A));
	return Rz;
}

void SC_nil_CheckNilCheck(ArchonPurger* Self, SCFunction* F) {
	Self->FnAbleToNilCheck = false;
	JB_SetRef(Self->Return, F->ReturnType);
	SCDecl* S = ((SCDecl*)JB_Array_First(F->Args));
	if (S) {
		if ((SC_NilState_SyntaxIs(S->NilDeclared, kSC__NilState_Nilish)) and (SC_Decl_TypeSuffers(S) and SC_Decl_CanNilCheck(Self->Return))) {
			Self->FnAbleToNilCheck = true;
		}
	}
}

NilState SC_nil_Declare(ArchonPurger* Self, SCDecl* D, uint /*NilState*/ Nd) {
	uint Rz = 0;
	Rz = SC_nil_DeclareSub(Self, D, Nd);
	return Rz;
}

NilState SC_nil_DeclareSub(ArchonPurger* Self, SCDecl* D, uint /*NilState*/ Nd) {
	Nd = (Nd & kSC__NilState_Either);
	int N = SC_NRD_DepthOfVars(SC_nil_Value(Self)) + 1;
	if (N >= 31) {
		SC_SCObject_Fail(D, JB_LUB[964]);
		return 0;
	}
	Self->Decls[N] = D;
	D->NilReg = (N * SC_Decl_TypeSuffers(D));
	D->NilAllocDepth = SC_nil_NestDepth(Self);
	NilRecorder* P = ((NilRecorder*)(Self->Neel));
	(SC_NRC_SyntaxCallSet((P), N, Nd));
	return Nd;
}

void SC_nil_Destructor(ArchonPurger* Self) {
	JB_Clear(Self->Return);
}

void SC_nil_FinishNil(ArchonPurger* Self, SCFunction* F) {
	SCDecl* R = F->ReturnType;
	if (R) {
		R->NilDeclared = (R->NilDeclared | kSC__NilState_Stated);
	}
	{
		Array* _LoopSrcf2 = F->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* A = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (A == nil) {
				break;
			}
			A->NilDeclared = (A->NilDeclared | kSC__NilState_Stated);
			(++_if0);
		};
	};
}

int SC_nil_NestDepth(ArchonPurger* Self) {
	return ((int)(Self->Neel - (&Self->Rows[0])));
}

NilState SC_nil_Self(ArchonPurger* Self) {
	return SC_NRD_SyntaxAccess((SC_nil_Value(Self)), 1);
}

Message* SC_nil_StartNil(ArchonPurger* Self, SCFunction* F) {
	if (!SC_Func_HasProperSpeedieCode(F)) {
		return nil;
	}
	(SC_Func__CurrFuncSet(F));
	Self->Rows[0] = kSC__NilState_Basic;
	Self->InsideBoolLogic = 0;
	Self->Neel = (&Self->Rows[0]);
	Self->RowEnd = (Self->Neel + 63);
	Self->Realnesses = -1;
	SC__nil_Loops = ((LoopInfo){});
	Self->AnyReturns = false;
	Self->RootReturned = false;
	SC_nil_CheckNilCheck(Self, F);
	{
		Array* _LoopSrcf2 = F->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (D == nil) {
				break;
			}
			SC_Decl_Paramfix(D);
			SC_nil_DeclareSub(Self, D, D->NilDeclared);
			(++_if0);
		};
	}
	;
	SCDecl* R = F->ReturnType;
	if (R) {
		if (!SC_Decl_NilStated(R)) {
			R->NilDeclared = 0;
		}
	}
	return SC_Func_SourceArg(F);
}

NilState SC_nil__Access(Message* Msg, NilCheckMode Test) {
	Message* Index = SC_Msg_UnBra(((Message*)JB_Ring_First(((Message*)JB_Tree_Second(Msg)))));
	SC_nil__FlowJump(Index, 0);
	uint Mode = kSC__NilReason_Accessing * ((JB_Msg_EqualsSyx(Index, kJB_SyxNum, false)) and (JB_Msg_SyntaxEquals(Index, JB_LUB[266], false)));
	return SC_nil__UseChildAsReal(Msg, Test, Mode);
}

NilState SC_nil__arel(Message* Msg, NilCheckMode Test) {
	uint Rz = 0;
	Message* Ch = ((Message*)JB_Ring_First(Msg));
	if (Ch) {
		Rz = SC_nil__FlowJump(Ch, Test);
		uint B = JB_Str_First(Msg->Name);
		if (B == '!') {
			Rz = (Rz & (~kSC__NilState_Nilish));
			Rz = (Rz | kSC__NilState_Realish);
		}
		 else if (B == '?') {
			0;
		}
		 else {
			if (SC__PostIncrementNil_Sync) {
				SC_PostIncrementNil__Check(Ch);
			}
			if (SC__nil_T.InsideBoolLogic) {
				if (true) {
					JB_Msg_Fail(Ch, JB_LUB[1642]);
				}
			}
		}
	}
	return Rz;
}

NilState SC_nil__Argument(Message* Msg, NilCheckMode Test) {
	uint Rz = 0;
	int V = SC_NRD_DepthOfVars(SC_nil__Value()) + 1;
	{
		Message* S = ((Message*)JB_Ring_First(Msg));
		while (S) {
			int T = Test & (-JB_Tree_IsLast(S));
			if ((SC_NilState_SyntaxIs(Rz, kSC__NilState_Borked)) and (!JB_Rec_OK(JB_StdErr))) {
				break;
			}
			uint Prev = Rz;
			Rz = SC_nil__SyncJump(S, T | kSC__khalai_Disappears);
			if (SC_NilState_SyntaxIs(Prev, kSC__NilState_Borked)) {
				JB__Err_AutoPrint = SC__nil_OldPrint;
				if ((JB_Rec_OK(JB_StdErr))) {
					JB_Msg_Fail(S, JB_LUB[1702]);
					return 0;
				}
				JB_Rec_Clear(JB_StdErr);
			}
			if (SC_NilState_SyntaxIs(Rz, kSC__NilState_Killer)) {
				break;
			}
			S = ((Message*)JB_Ring_NextSib(S));
		};
		;
	}
	;
	int64 Allowed = (((uint64)1) << (V << 1)) - ((uint64)1);
	(SC_nil_ValueSet((&SC__nil_T), SC_nil__Value() & Allowed));
	return Rz;
}

NilState SC_nil__BecomeReal(SCDecl* Sent, Message* Where, uint /*NilReason*/ Reason, SCDecl* Recv, SCFunction* To) {
	uint Curr = SC_Decl_NilCurr(Sent);
	if (Curr == kSC__NilState_Realish) {
		return Curr;
	}
	return SC_nil__BecomeRealSub(Sent, Where, Reason, Recv, To, Curr);
}

NilState SC_nil__BecomeRealSub(SCDecl* Sent, Message* Where, uint /*NilReason*/ Reason, SCDecl* Recv, SCFunction* To, uint /*NilState*/ Curr) {
	if ((Curr == kSC__NilState_Either) and SC_Decl_IsUnknownParam(Sent)) {
		SC_nil_BecomeRealSub((&SC__nil_T), Sent);
		return SC_nil_SetNilness((&SC__nil_T), Sent, kSC__NilState_Real);
	}
	if (Recv and (!SC_Decl_TypeSuffers(Recv))) {
		return kSC__NilState_Real;
	}
	return SC_nil__FailedReal(To, Where, Reason, Curr);
}

NilState SC_nil__BooleanLogic(Message* Msg, NilCheckMode Test) {
	Message* AA = ((Message*)JB_Ring_First(Msg));
	Message* BB = ((Message*)JB_Ring_Last(Msg));
	bool IsAnd = SC_khalai_SyntaxIs(Test, kSC__khalai_And);
	Test = (SC_khalai_SyntaxIsSet(Test, kSC__khalai_And, false));
	NilRecord Orig = SC_nil_BranchEnter((&SC__nil_T), AA);
	if (!Orig) {
		return 0;
	}
	if (IsAnd == (SC_khalai_SyntaxIs(Test, kSC__khalai_Positive))) {
		uint NC = SC_nil__FlowJump(AA, Test | kSC__khalai_ForBools);
		NC = (NC | SC_nil__JumpWithinBool(BB, Test));
		SC_nil_BranchExitBool((&SC__nil_T), SC_nil__Value(), Test, Orig);
		return kSC__NilState_Real | (NC & kSC__NilState_FnBecomesNilCh);
	}
	//"test A+";
	SC_nil__FlowJump(AA, Test);
	NilRecord First = SC_nil_BranchSwap((&SC__nil_T), Orig);
	//"test A-B+";
	SC_nil__FlowJump(AA, SC_khalai_Negate(Test) | kSC__khalai_ForBools);
	SC_nil__JumpWithinBool(BB, Test);
	return SC_nil_BranchExitBool((&SC__nil_T), First, Test, Orig);
}

NilState SC_nil__Bracket(Message* Msg, NilCheckMode Test) {
	if (JB_Msg_Length(Msg)) {
		Test = (Test | kSC__khalai_Soft);
	}
	return SC_nil__FlowJump(((Message*)JB_Ring_First(Msg)), Test);
}

NilState SC_nil__Brel(Message* Msg, NilCheckMode Test) {
	uint B = JB_Str_First(Msg->Name);
	if (B == '*') {
		if (true) {
			JB_Msg_Fail(Msg, JB_LUB[832]);
		}
	}
	Message* Ch = ((Message*)JB_Ring_First(Msg));
	if ((B == '-') or (B == '+')) {
		return SC_nil__FlowJump(Ch, Test);
	}
	if (B == '!') {
		return SC_nil__Not(Ch, Test);
	}
	SC_nil__FlowJump(Ch, Test);
	return kSC__NilState_Real;
}

NilState SC_nil__Char(Message* Msg, NilCheckMode Test) {
	return SC_nil__RealBool(SC_Str_Isnull(Msg->Name));
}

NilState SC_nil__CompareObjs(Message* Ll, Message* Rr, NilCheckMode Test, SCOperator* Scop) {
	int LNil = SC_Msg_IsNowNil(Ll);
	int RNil = SC_Msg_IsNowNil(Rr);
	if ((!LNil) and (!RNil)) {
		return SC_nil__SuperSmartMagicCompare(Ll, Rr, Test, Scop);
	}
	if (LNil and RNil) {
		SCDecl* Lld = SC_Msg_FastDecl(Ll);
		if (Lld->NilAllocDepth >= SC__nil_Loops.NestDepth) {
			return SC_Msg_RedundantVar(Ll, Lld, Test);
		}
		if ((LNil + RNil) != 3) {
			return kSC__NilState_Real;
		}
	}
	 else if (2 == (LNil + RNil)) {
		SC_nil__FlowJump(Ll, 0);
		SC_nil__FlowJump(Rr, 0);
		return kSC__NilState_Real;
	}
	if (SC_Opp_SyntaxIs(Scop, kSC__OpMode_NilTest)) {
		Message* Side = ((Message*)JB_Ternary(LNil == 1, Rr, Ll));
		if (SC_khalai_SyntaxIs(Test, kSC__khalai_Active)) {
			Test = (SC_khalai_SyntaxIsSet(Test, kSC__khalai_Reversed, ((bool)SC_Opp_SyntaxIs(Scop, kSC__OpMode_ExactlyEquals))));
			Test = SC_khalai_Activate(Test);
		}
		return SC_nil__FlowJump(Side, Test);
	}
	if (true) {
		JB_Msg_Fail(((Message*)JB_Ring_NextSib(Ll)), JB_LUB[2113]);
	}
	return 0;
}

NilState SC_nil__Continue(Message* Msg, NilCheckMode Test) {
	SC__nil_Loops.ContRecord = (SC__nil_Loops.ContRecord | SC_nil__EndBlock());
	return 0;
}

NilState SC_nil__Declaration(Message* Msg, NilCheckMode Test) {
	Message* Rel = ((Message*)JB_Ring_Last(Msg));
	Message* Thg = ((Message*)JB_Ring_First(Rel));
	if (Thg) {
		SCDecl* D = SC_Msg_FastDecl(Thg);
		uint J = SC_nil__FlowJump(((Message*)JB_Ring_Last(Rel)), 0);
		if (SC_Decl_IsReg(D)) {
			return SC_nil_Declare((&SC__nil_T), D, J);
		}
	}
	 else {
		SCDecl* D = SC_Msg_FastDecl(Rel);
		if (SC_Decl_IsReg(D)) {
			return SC_nil_Declare((&SC__nil_T), D, kSC__NilState_Real);
		}
	}
	return 0;
}

NilState SC_nil__DetectStillChecks(Message* First) {
	uint Rz = 0;
	if (!First) {
		return 0;
	}
	Rz = SC_nil__FlowJump(First, 0);
	if ((!SC__nil_T.FnAbleToNilCheck) or (SC_NilState_SyntaxIs(Rz, kSC__NilState_FnBecomesNilCh))) {
		return Rz;
	}
	MaybeBool F = SC_Msg_Trueness(First, Rz);
	bool SelfNil = SC_NilState_SyntaxIs(SC_nil_Self((&SC__nil_T)), kSC__NilState_Nilish);
	if (JB_MaybeBool_KnownFalse(F)) {
		if (!SelfNil) {
			SC__nil_T.FnAbleToNilCheck = false;
		}
	}
	 else if (SC_NilState_SyntaxIs(Rz, kSC__NilState_FnBecomesNilCh)) {
		0;
	}
	 else if (SelfNil) {
		SC__nil_T.FnAbleToNilCheck = false;
	}
	return Rz;
}

NilState SC_nil__Dummy(Message* Msg, NilCheckMode Test) {
	return 0;
}

NilState SC_nil__Exit(Message* Msg, NilCheckMode Test) {
	SC__nil_Loops.ExitRecord = (SC__nil_Loops.ExitRecord | SC_nil__EndBlock());
	SC__nil_Loops.HasEscape = true;
	return 0;
}

void SC_nil__ExterminateZergBugs(SCFunction* F) {
	Message* Arg = SC_nil_StartNil((&SC__nil_T), F);
	if (Arg) {
		SC_nil__Argument(Arg, 0);
		if (SC__nil_T.FnAbleToNilCheck and (!F->IsNilChecker)) {
			F->IsNilChecker = 1;
		}
	}
	SC_nil_FinishNil((&SC__nil_T), F);
}

NilState SC_nil__Fail(Message* Msg, NilCheckMode Test) {
	SC__nil_OldPrint = JB__Err_AutoPrint;
	JB__Err_AutoPrint = 0;
	return kSC__NilState_Borked;
}

NilState SC_nil__FailedReal(SCFunction* To, Message* Where, uint /*NilReason*/ Reason, uint /*NilState*/ State) {
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	JB_StringC* _tmPf0 = ((JB_StringC*)JB_Array_Value(SC__NilReason_values, Reason));
	JB_Incr(_tmPf0);
	JB_FS_AppendString(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_String* Raw = SC_NilState_RawName(State);
	JB_Incr(Raw);
	if (!SC_Msg_OperatorIsThing(Where, Raw)) {
		JB_FS_AppendByte(Fs, ' ');
		JB_FS_AppendString(Fs, Raw);
	}
	JB_Decr(Raw);
	JB_FS_AppendByte(Fs, ':');
	JB_FS_AppendByte(Fs, ' ');
	JB_String* _tmPf1 = SC_Msg_OrigRender(Where, nil);
	JB_Incr(_tmPf1);
	JB_FS_AppendString(Fs, _tmPf1);
	JB_Decr(_tmPf1);
	if (To) {
		JB_FS_AppendString(Fs, JB_LUB[311]);
		if (JB_Tree_IsFirst(Where) and To->Cls) {
			JB_FS_AppendString(Fs, To->Name);
		}
		 else {
			JB_FreeIfDead(SC_Func_RenderTitle(To, true, Fs));
		}
		(JB_Msg_SyntaxProblem(To->Source, kJB_kUsingStr));
	}
	if (true) {
		JB_String* _tmPf2 = JB_FS_SyntaxCast(Fs);
		JB_Incr(_tmPf2);
		JB_Msg_Fail(Where, _tmPf2);
		JB_Decr(_tmPf2);
	}
	JB_Decr(Fs);
	return 0;
}

NilState SC_nil__If(Message* Msg, NilCheckMode Test) {
	Message* Cond = ((Message*)JB_Ring_First(Msg));
	Message* Arg1 = ((Message*)JB_Ring_NextSib(Cond));
	if ((!Arg1)) {
		JB_Msg_Fail(Msg, nil);
		return 0;
	}
	Message* Else = ((Message*)JB_Ring_NextSib(Arg1));
	Message* Arg2 = ((Message*)JB_Ring_First(Else));
	Message* ElseIfCond = nil;
	if (Arg2 and (!JB_Msg_EqualsSyx(Arg2, kJB_SyxArg, false))) {
		ElseIfCond = Arg2;
		Arg2 = ((Message*)JB_Ring_NextSib(Arg2));
	}
	NilRecord Orig = SC_nil_BranchEnter((&SC__nil_T), Msg);
	if (!Orig) {
		return 0;
	}
	//"First Branch";
	SC_nil__SyncJump(Cond, kSC__khalai_IfPos);
	SC_nil__Argument(Arg1, 0);
	NilRecord First = SC_nil_BranchSwap((&SC__nil_T), Orig);
	//"Second Branch";
	SC_nil__SyncJump(Cond, kSC__khalai_IfNeg);
	if (ElseIfCond) {
		SC_nil__If(Else, 0);
	}
	 else if (JB_Ring_HasChildren(Arg2)) {
		SC_nil__Argument(Arg2, 0);
	}
	return SC_nil_BranchExit((&SC__nil_T), First);
}

NilState SC_nil__Ignore(Message* Msg, NilCheckMode Test) {
	return 0;
}

int SC_nil__Init_() {
	{
		SC__nil_Loops = ((LoopInfo){});
		SC__nil_T = ((ArchonPurger){});
		SC__nil_NilTable[10] = (&SC_nil__Thing);
		SC__nil_NilTable[31] = (&SC_nil__Bracket);
		SC__nil_NilTable[3] = (&SC_nil__Type);
		SC__nil_NilTable[25] = (&SC_nil__NilFunction);
		SC__nil_NilTable[5] = (&SC_nil__StatementJump);
		SC__nil_NilTable[23] = (&SC_nil__Property);
		SC__nil_NilTable[29] = (&SC_nil__Access);
		SC__nil_NilTable[30] = (&SC_nil__Item);
		SC__nil_NilTable[26] = (&SC_nil__Brel);
		SC__nil_NilTable[21] = (&SC_nil__arel);
		SC__nil_NilTable[37] = (&SC_nil__Rel);
		SC__nil_NilTable[32] = (&SC_nil__List);
		SC__nil_NilTable[4] = (&SC_nil__Declaration);
		SC__nil_NilTable[1] = (&SC_nil__Argument);
		SC__nil_NilTable[11] = (&SC_nil__Ignore);
		SC__nil_NilTable[15] = (&SC_nil__String);
		SC__nil_NilTable[19] = (&SC_nil__String);
		SC__nil_NilTable[14] = (&SC_nil__Number);
		SC__nil_NilTable[17] = (&SC_nil__Char);
		SC__nil_NilTable[(kSC__ASMType_kIf)] = (&SC_nil__If);
		SC__nil_NilTable[(kSC__ASMType_kDebugger)] = (&SC_nil__Ignore);
		SC__nil_NilTable[(kSC__ASMType_kWhile)] = (&SC_nil__While);
		SC__nil_NilTable[(kSC__ASMType_kContinue)] = (&SC_nil__Continue);
		SC__nil_NilTable[(kSC__ASMType_kExit)] = (&SC_nil__Exit);
		SC__nil_NilTable[(kSC__ASMType_kSetRel)] = (&SC_nil__SetRel);
		SC__nil_NilTable[(kSC__ASMType_kSwap)] = (&SC_nil__Swap);
		SC__nil_NilTable[(kSC__ASMType_kReturn)] = (&SC_nil__Return);
		SC__nil_NilTable[(kSC__ASMType_kTern)] = (&SC_nil__Tern);
		SC__nil_NilTable[(kSC__ASMType_kStatExpr)] = (&SC_nil__StatExpr);
		SC__nil_NilTable[(kSC__ASMType_kIgnore)] = (&SC_nil__Ignore);
		SC__nil_NilTable[(kSC__ASMType_kRejoin)] = (&SC_nil__Rejoin);
		SC__nil_NilTable[(kSC__ASMType_kFail)] = (&SC_nil__Fail);
		SC__nil_NilTable[(kSC__ASMType_kRefCount)] = (&SC_nil__NilFunction);
		//;
	}
	;
	return 0;
}

int SC_nil__InitCode_() {
	{
	}
	;
	SC_nil__TrackerDummies();
	return 0;
}

NilState SC_nil__Item(Message* Msg, NilCheckMode Test) {
	Message* _tmPf0 = ((Message*)JB_Ring_Last(Msg));
	JB_Incr(_tmPf0);
	uint _tmPf1 = SC_nil__FlowJump(_tmPf0, Test);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

NilState SC_nil__FlowJump(Message* Msg, NilCheckMode Test) {
	return SC_nil__JumpSub(Msg, Test);
}

NilState SC_nil__JumpWithinBool(Message* Msg, NilCheckMode Test) {
	uint Rz = 0;
	(++SC__nil_T.InsideBoolLogic);
	Rz = SC_nil__FlowJump(Msg, Test | kSC__khalai_ForBools);
	(--SC__nil_T.InsideBoolLogic);
	return Rz;
}

void SC_nil__LaunchMothership() {
	JB_ErrorReceiver* Old = JB_StdErr;
	JB_Incr(Old);
	JB_ErrorReceiver* Rec = JB_Rec_Constructor(nil);
	JB_Incr(Rec);
	SC_nil__LaunchMothershipSub(Old, Rec);
	JB_Decr(Old);
	JB_Decr(Rec);
	(SC_Func__CurrFuncSet(nil));
}

void SC_nil__LaunchMothershipSub(JB_ErrorReceiver* Old, JB_ErrorReceiver* Rec) {
	if (!SC_Comp__ConfBool(JB_LUB[1721], true)) {
		Rec->LowerErrorsTo = kJB__ErrorSeverity_Warning;
	}
	if (true) {
		JB_ErrorReceiver* _usingf0 = JB_Rec_SyntaxUsing(Rec);
		{
			Array* _LoopSrcf3 = SC__Comp_FuncList;
			int _if1 = 0;
			while (true) {
				SCFunction* Xoxo = ((SCFunction*)JB_Array_Value(_LoopSrcf3, _if1));
				if (Xoxo == nil) {
					break;
				}
				int I = _if1;
				SC_nil__ExterminateZergBugs(Xoxo);
				SC_Rec_ReturnErrors(Rec, Old);
				(++_if1);
			};
		}
		;
		JB_Rec_SyntaxUsingComplete(_usingf0, Rec);
	}
}

NilState SC_nil__List(Message* Msg, NilCheckMode Test) {
	{
		Message* S = ((Message*)JB_Ring_First(Msg));
		while (S) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(S));
			SC_nil__FlowJump(S, 0);
			S = _Nf1;
		};
		;
	}
	;
	return kSC__NilState_Real;
}

NilState SC_nil__NilFunction(Message* Msg, NilCheckMode Test) {
	uint Rz = 0;
	Test = (Test & (~kSC__khalai_Disappears));
	Message* Fp = ((Message*)JB_Ring_First(Msg));
	Message* Prms = ((Message*)JB_Ring_NextSib(Fp));
	SCFunction* Fn = ((SCFunction*)Prms->Obj);
	if (!Fn) {
		Fn = SC_Msg_GetFunctionPointer(Fp);
		if (!Fn) {
			return 0;
		}
		Fp = SC_Msg_UnBra(Fp);
		if (!SC_nil__UseAsReal(Fp, 0, kSC__NilReason_Accessing)) {
			return 0;
		}
	}
	if (!((Fn != SC_Func__CurrFunc()) or (SC__nil_T.AnyReturns or (SC_nil_NestDepth((&SC__nil_T)) > 0)))) {
		JB_Msg_Fail(Msg, JB_LUB[2161]);
		return 0;
	}
	if ((SC_khalai_SyntaxIs(Test, kSC__khalai_Active)) and Fn->IsNilChecker) {
		if (Fn->IsNilChecker != 3) {
			Test = (Test | kSC__khalai_Soft);
		}
		if (SC__nil_T.FnAbleToNilCheck) {
			Rz = kSC__NilState_FnBecomesNilCh;
		}
	}
	 else {
		Test = 0;
	}
	Message* P = ((Message*)JB_Ring_First(Prms));
	bool HasAddrs = false;
	{
		Array* _LoopSrcf2 = Fn->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* Recv = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Recv == nil) {
				break;
			}
			SC_Decl_Paramfix(Recv);
			SC_Msg_VariableParamSafety(P);
			if ((SC_NilState_SyntaxIs(Recv->NilDeclared, kSC__NilState_Optional)) and (Fn->IsNilChecker != 3)) {
				Test = (Test | kSC__khalai_Soft);
			}
			if ((!P)) {
				JB_Msg_Fail(Msg, JB_LUB[2162]);
				return 0;
			}
			Test = (Test | kSC__khalai_AllowRegisterAddr);
			uint V = SC_nil__FlowJump(P, Test);
			if (Rz and ((!(SC_NilState_SyntaxIs(V, kSC__NilState_FnBecomesNilCh))) and JB_Tree_IsFirst(P))) {
				Rz = 0;
			}
			SCDecl* Sent = SC_Msg_FastDecl(P);
			SCDecl* Infernal = Sent->Internal;
			if (Infernal) {
				if (!HasAddrs) {
					HasAddrs = ((bool)SC_Decl_CanUpgradeInternalPointer(Sent));
				}
				if ((SC_Decl_IsProperlyLocal(Infernal)) and (SC_Decl_SyntaxIs(Recv, kSC__SCDeclInfo_NoRegAddrs))) {
					(JB_Msg_SyntaxProblem(P, JB_LUB[2163]));
				}
			}
			if (SC_NilState_SyntaxIs(V, kSC__NilState_Nilish)) {
				SC_nil__NilParamPass(Recv, Sent, P, Fn, V);
			}
			Test = 0;
			P = ((Message*)JB_Ring_NextSib(P));
			(++_if0);
		};
	}
	;
	if (HasAddrs) {
		P = ((Message*)JB_Ring_First(Prms));
		{
			Array* _LoopSrcf5 = Fn->Args;
			int _if3 = 0;
			while (true) {
				SCDecl* Recv = ((SCDecl*)JB_Array_Value(_LoopSrcf5, _if3));
				if (Recv == nil) {
					break;
				}
				SCDecl* Infernal = SC_Decl_CanUpgradeInternalPointer(SC_Msg_FastDecl(P));
				if (Infernal) {
					SCDecl* Ri = Recv->Internal;
					SC_nil__VariableSet(Infernal, Recv->Source, Ri, P, SC_Decl_NilCurr(Ri));
				}
				P = ((Message*)JB_Ring_NextSib(P));
				(++_if3);
			};
		};
	}
	if (SC_Func_SyntaxIs(Fn, kSC__FunctionType_Killer)) {
		SC_nil__DeclKill();
		if ((SC_nil_NestDepth((&SC__nil_T)) == 0) and (!SC__nil_T.AnyReturns)) {
			(SC_Func_SyntaxIsSet(SC_Func__CurrFunc(), kSC__FunctionType_Killer, true));
		}
		SC_Msg_LastInBlock(Msg, kSC__SCBlockage_Quit);
		return kSC__NilState_Killer;
	}
	SCDecl* Ret = Fn->ReturnType;
	if (Ret) {
		Rz = (Rz | Ret->NilDeclared);
		if (!((SC_NilState_SyntaxIs(Rz, kSC__NilState_Stated)) or (!SC_Decl_TypeSuffers(Ret)))) {
			JB_Msg_Fail(Msg, JB_Str_OperatorPlus(JB_LUB[2164], SC_Func_RenderName(Fn, nil)));
		}
	}
	return Rz;
}

void SC_nil__NilParamPass(SCDecl* Recv, SCDecl* Sent, Message* Where, SCFunction* F, uint /*NilState*/ V) {
	if (SC_Decl_StatedReal(Recv)) {
		SC_nil__BecomeRealSub(Sent, Where, kSC__NilReason_Passing, Recv, F, V);
	}
	 else if ((!SC_Decl_NilStated(Recv)) and (F != SC_Func__CurrFunc())) {
		SC_Decl_NilPrmFail(Recv, F);
	}
}

NilState SC_nil__Not(Message* Msg, NilCheckMode Test) {
	Test = SC_khalai_Activate((Test | kSC__khalai_Reversed));
	uint A = SC_nil__FlowJump(Msg, Test);
	return A & (~kSC__NilState_FnBecomesNilCh);
}

NilState SC_nil__Number(Message* Msg, NilCheckMode Test) {
	return SC_nil__RealBool(SC_Str_IsZero(Msg->Name));
}

NilState SC_nil__Property(Message* Msg, NilCheckMode Test) {
	return SC_nil__UseChildAsReal(Msg, Test, kSC__NilReason_Property);
}

NilState SC_nil__PropertyToFunc(Message* Dot, SCFunction* Fn) {
	Dot->Func = kJB_SyxFunc;
	(SC_Msg_ASMTypeSet(Dot, ((ASMType)(kJB_SyxFunc))));
	Message* Upon = ((Message*)JB_Ring_First(Dot));
	Message* Prms = ((Message*)JB_Ring_Last(Dot));
	JB_SetRef(Prms->Obj, Fn);
	Prms->Func = kJB_SyxPrm;
	(JB_Ring_FirstSet(Prms, Upon));
	JB_Mem_Use(JB_ObjLayer(Dot));
	(JB_Ring_FirstSet(Dot, JB_Msg_ConstructorRange(nil, nil, kJB_SyxThg, Dot->Position, Fn->ExportName, 0)));
	return kSC__NilState_Real;
}

NilState SC_nil__RealBool(bool B) {
	uint Rz = 0;
	Rz = kSC__NilState_Real;
	Rz = (Rz | (kSC__NilState_TrueValue >> B));
	return Rz;
}

NilState SC_nil__Rejoin(Message* Msg, NilCheckMode Test) {
	return SC_nil__FlowJump(((Message*)JB_Ring_First(Msg)), Test);
}

NilState SC_nil__Rel(Message* Msg, NilCheckMode Test) {
	Message* Ll = ((Message*)JB_Ring_First(Msg));
	Message* Op = ((Message*)JB_Ring_NextSib(Ll));
	SCOperator* Scop = ((SCOperator*)Op->Obj);
	Message* Rr = ((Message*)JB_Ring_NextSib(Op));
	if (SC_Opp_SyntaxIs(Scop, kSC__OpMode_Compare)) {
		return SC_nil__CompareObjs(Ll, Rr, Test, Scop);
	}
	OpMode AndOr = SC_Opp_SyntaxIs(Scop, kSC__OpMode_AndOr);
	if (AndOr) {
		Test = (SC_khalai_SyntaxIsSet(Test, kSC__khalai_And, (AndOr == kSC__OpMode_AND)));
		return SC_nil__BooleanLogic(Msg, SC_khalai_Activate(Test));
	}
	uint L = SC_nil__FlowJump(Ll, 0) & kSC__NilState_Either;
	uint R = SC_nil__FlowJump(Rr, 0) & kSC__NilState_Either;
	SCDecl* D = SC_Msg_FastDecl(Msg);
	if (!SC_Decl_TypeSuffers(D)) {
		return kSC__NilState_Real;
	}
	if ((kSC__NilState_Nilish == L) or (kSC__NilState_Nilish == R)) {
		return kSC__NilState_Nilish;
	}
	return L | R;
}

NilState SC_nil__Return(Message* Msg, NilCheckMode Test) {
	uint V = SC_nil__DetectStillChecks(((Message*)JB_Ring_First(Msg)));
	SC__nil_Loops.ExitRecord = (SC__nil_Loops.ExitRecord | kSC__NilState_Basic);
	SC_nil__DeclKill();
	SC__nil_T.AnyReturns = true;
	SCDecl* Ret = SC__nil_T.Return;
	if (!(Ret and SC_Decl_TypeSuffers(Ret))) {
		return 0;
	}
	if (SC_Decl_StatedReal(Ret)) {
		if (SC_NilState_SyntaxIs(V, kSC__NilState_Nilish)) {
			JB_Msg_Fail(Msg, JB_Str_OperatorPlus(JB_LUB[1703], SC_NilState_RawName(V)));
			return 0;
		}
	}
	Ret->NilDeclared = (Ret->NilDeclared | (V & kSC__NilState_Either));
	return 0;
}

NilState SC_nil__SetRel(Message* Msg, NilCheckMode Test) {
	Message* R = ((Message*)JB_Ring_Last(Msg));
	Message* L = ((Message*)JB_Ring_First(Msg));
	SCDecl* LD = SC_Msg_FastDecl(L);
	Test = ((kSC__khalai_Soft) * ((!SC_Decl_SyntaxIs(LD, kSC__SCDeclInfo_Local)) and (LD->NilDeclared == kSC__NilState_Optional)));
	uint RN = SC_nil__FlowJump(R, Test);
	SC_nil__FlowJump(L, kSC__khalai_Assigns);
	return SC_nil__VariableSet(LD, L, SC_Msg_FastDecl(R), R, RN);
}

NilState SC_nil__StatementJump(Message* Msg, NilCheckMode Test) {
	FP_NilTrackerFn Fn = SC__nil_NilTable[SC_Msg_ASMType(Msg)];
	if (Fn != SC_nil__StatementJump) {
		return (SC__nil_NilTable[SC_Msg_ASMType(Msg)])(Msg, 0);
	}
	if (JB_Rec_OK(JB_StdErr)) {
		if (true) {
			JB_String* _tmPf0 = SC_Str_internal(JB_LUB[0]);
			JB_Incr(_tmPf0);
			JB_Msg_Fail(Msg, _tmPf0);
			JB_Decr(_tmPf0);
		}
	}
	return 0;
}

NilState SC_nil__StatExpr(Message* Msg, NilCheckMode Test) {
	return SC_nil__Argument(((Message*)JB_Ring_First(Msg)), Test);
}

NilState SC_nil__String(Message* Msg, NilCheckMode Test) {
	SC_Crkt__CollectString(Msg, SC_Base_IsLibrary(SC_Func__CurrFunc()));
	return SC_nil__RealBool((!JB_Msg_Length(Msg)));
}

NilState SC_nil__SuperSmartMagicCompare(Message* Ll, Message* Rr, NilCheckMode Test, SCOperator* Scop) {
	int Todo = 3;
	if ((Ll->Func == kJB_SyxThg) and ((Rr->Func == kJB_SyxThg) and SC_khalai_SyntaxIs(Test, kSC__khalai_Active))) {
		if ((SC_Opp_SyntaxIs(Scop, kSC__OpMode_EqualOrNot)) and ((SC_khalai_SyntaxIs(Test, kSC__khalai_Positive)) == ((bool)(SC_Opp_SyntaxIs(Scop, kSC__OpMode_ExactlyEquals))))) {
			SCDecl* Ld = ((SCDecl*)Ll->Obj);
			SCDecl* Rd = ((SCDecl*)Rr->Obj);
			bool Ldl = SC_Decl_SyntaxIs(Ld, kSC__SCDeclInfo_Local);
			bool Rdl = SC_Decl_SyntaxIs(Rd, kSC__SCDeclInfo_Local);
			if (Ldl or Rdl) {
				if (Rdl and (SC_Decl_NilCurr(Ld) == kSC__NilState_Realish)) {
					SC_nil_SetNilness((&SC__nil_T), Rd, kSC__NilState_Real);
					Todo = (Todo & (~2));
				}
				if (Ldl and (SC_Decl_NilCurr(Rd) == kSC__NilState_Realish)) {
					SC_nil_SetNilness((&SC__nil_T), Ld, kSC__NilState_Real);
					Todo = (Todo & (~1));
				}
			}
		}
	}
	if (Todo & 1) {
		SC_nil__FlowJump(Ll, kSC__khalai_Soft);
	}
	if (Todo & 2) {
		SC_nil__FlowJump(Rr, kSC__khalai_Soft);
	}
	return kSC__NilState_Real;
}

NilState SC_nil__Swap(Message* Msg, NilCheckMode Test) {
	Message* P = ((Message*)JB_Ring_Last(Msg));
	Message* R = ((Message*)JB_Ring_Last(P));
	Message* L = ((Message*)JB_Ring_First(P));
	SCDecl* LD = SC_Msg_FastDecl(L);
	SCDecl* RD = SC_Msg_FastDecl(R);
	uint RN = SC_nil__FlowJump(R, 0);
	uint LN = SC_nil__FlowJump(L, 0);
	SC_nil__Swapity(LD, L, RD, R, RN);
	SC_nil__Swapity(RD, R, LD, L, LN);
	return 0;
}

NilState SC_nil__Swapity(SCDecl* LD, Message* L, SCDecl* RD, Message* R, uint /*NilState*/ RN) {
	Message* LL = SC_Msg_Unwrap(L);
	if (!JB_Msg_EqualsSyx(LL, kJB_SyxAcc, false)) {
		if (!SC_Decl_SyntaxIs(LD, kSC__SCDeclInfo_Swappable)) {
			JB_Msg_Fail(L, JB_Str_OperatorPlus(SC_Msg_OrigRender(L, nil), JB_LUB[2160]));
		}
	}
	return SC_nil__VariableSet(LD, L, RD, R, RN);
}

NilState SC_nil__SyncJump(Message* Msg, NilCheckMode Test) {
	uint Rz = 0;
	SC__PostIncrementNil_Sync = true;
	Rz = SC_nil__FlowJump(Msg, Test);
	SC_PostIncrementNil__Clear();
	return Rz;
}

NilState SC_nil__Tern(Message* Msg, NilCheckMode Test) {
	uint Rz = 0;
	Test = (Test & (~kSC__khalai_Disappears));
	Msg = ((Message*)JB_Tree_Second(Msg));
	NilRecord Orig = SC_nil_BranchEnter((&SC__nil_T), Msg);
	if (!Orig) {
		return 0;
	}
	Message* tC = ((Message*)JB_Ring_First(Msg));
	Message* tA = ((Message*)JB_Ring_NextSib(tC));
	Message* tB = ((Message*)JB_Ring_NextSib(tA));
	//"First Branch";
	SC_nil__FlowJump(tC, kSC__khalai_Positive);
	Rz = SC_nil__JumpWithinBool(tA, Test);
	NilRecord First = SC_nil_BranchSwap((&SC__nil_T), Orig);
	//"Second Branch";
	SC_nil__JumpWithinBool(tC, kSC__khalai_Negative);
	Rz = (Rz | SC_nil__JumpWithinBool(tB, Test));
	SC_nil_BranchExitBool((&SC__nil_T), First, Test, Orig);
	Rz = (Rz & (~kSC__NilState_FnBecomesNilCh));
	return Rz;
}

NilState SC_nil__Thing(Message* Msg, NilCheckMode Test) {
	uint Rz = 0;
	SCDecl* Dcl = SC_Msg_FastDecl(Msg);
	Rz = SC_nil__ThingSub(Msg, Test, Dcl);
	Msg->Indent = Rz;
	if (SC__nil_T.FnAbleToNilCheck and SC_Decl_SyntaxIs(Dcl, kSC__SCDeclInfo_Self)) {
		Rz = (Rz | kSC__NilState_FnBecomesNilCh);
	}
	return Rz;
}

NilState SC_nil__ThingSub(Message* Msg, NilCheckMode Test, SCDecl* Dcl) {
	if (!Dcl->NilReg) {
		return Dcl->NilDeclared;
	}
	bool Unknown = SC_Decl_IsUnknownParam(Dcl);
	if ((SC_Decl_SyntaxIs(Dcl, kSC__SCDeclInfo_Param)) and (((!SC_khalai_SyntaxIs(Test, kSC__khalai_AllowRegisterAddr))) and Dcl->PointerCount)) {
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_NoRegAddrs, true));
	}
	if (Unknown and ((!SC_khalai_SyntaxIs(Test, kSC__khalai_Soft)) and (!SC_khalai_SyntaxIs(Test, kSC__khalai_Disappears)))) {
		if (!SC_khalai_SyntaxIs(Test, kSC__khalai_Active)) {
			return SC_nil__BecomeReal(Dcl, Msg, kSC__NilReason_Reading, nil, nil);
		}
		Dcl->NilDeclared = kSC__NilState_Optional;
	}
	uint Y = SC_Decl_NilCurr(Dcl);
	if ((!SC_khalai_SyntaxIs(Test, kSC__khalai_Active)) or (SC_khalai_SyntaxIs(Test, kSC__khalai_Soft) and SC_khalai_SyntaxIs(Test, kSC__khalai_Negative))) {
		return Y;
	}
	if (Unknown or ((Y == kSC__NilState_Either) or (Y != (Test & kSC__NilState_Either)))) {
		return SC_nil_SetNilness((&SC__nil_T), Dcl, Test);
	}
	return SC_Msg_RedundantVar(Msg, Dcl, Test);
}

void SC_nil__TrackerDummies() {
	{
		int I = 0;
		while (I < 64) {
			if (!SC__nil_NilTable[I]) {
				SC__nil_NilTable[I] = (&SC_nil__Dummy);
			}
			if (!SC_fn_asm_table[I]) {
				SC_fn_asm_table[I] = (&SC_ASMType__Unexpected);
			}
			(++I);
		};
	};
}

NilState SC_nil__Type(Message* Msg, NilCheckMode Test) {
	Message* F = ((Message*)JB_Ring_First(Msg));
	uint Ns = SC_nil__FlowJump(F, Test) & (~kSC__NilState_FnBecomesNilCh);
	SCDecl* D = SC_Msg_FastDecl(Msg);
	if (!SC_Decl_TypeSuffers(D)) {
		return kSC__NilState_Real;
	}
	SCDecl* Fd = SC_Msg_FastDecl(F);
	if (SC_Decl_TypeSuffers(Fd)) {
		return Ns;
	}
	return D->NilDeclared;
}

NilState SC_nil__UseAsReal(Message* Msg, NilCheckMode Test, uint /*NilReason*/ Reason) {
	SCDecl* _tmPf0 = SC_Msg_FastDecl(Msg);
	JB_Incr(_tmPf0);
	uint _tmPf1 = SC_nil__UseAsRealSub(Msg, Test, Reason, _tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

NilState SC_nil__UseAsRealSub(Message* Ch, NilCheckMode Test, uint /*NilReason*/ Reason, SCDecl* Dcl) {
	NilCheckMode Chmode = kSC__khalai_AllowRegisterAddr * (SC_NilReason_SyntaxIs(Reason, kSC__NilReason_Accessing));
	uint Actual = SC_nil__FlowJump(Ch, Chmode);
	if (SC_NilState_SyntaxIs(Actual, kSC__NilState_Nilish)) {
		SCFunction* Ddd = Dcl->HiderFunc;
		if (Ddd and ((SC_NilReason_SyntaxIs(Reason, kSC__NilReason_Property)) and ((!Ddd->IsAssigns) and ((!SC_khalai_SyntaxIs(Test, kSC__khalai_Assigns)))))) {
			return SC_nil__PropertyToFunc(((Message*)JB_Ring_Parent(Ch)), Ddd);
		}
		SC_nil__BecomeReal(SC_Msg_FastDecl(Ch), Ch, Reason, nil, nil);
	}
	uint Nd = Dcl->NilDeclared;
	if ((!SC_khalai_SyntaxIs(Test, kSC__khalai_Active)) or SC_khalai_SyntaxIs(Test, kSC__khalai_Soft)) {
		return Nd;
	}
	if (SC_NilState_StatedReal(Nd) and SC_Decl_TypeSuffers(Dcl)) {
		return SC_Msg_RedundantDeclare(Ch, Nd);
	}
	return Nd;
}

NilState SC_nil__UseChildAsReal(Message* Msg, NilCheckMode Test, uint /*NilReason*/ Reason) {
	SCDecl* Dcl = SC_Msg_FastDecl(Msg);
	if (SC_Decl_SyntaxIs(Dcl, kSC__SCDeclInfo_Global)) {
		return Dcl->NilDeclared;
	}
	Message* Ch = ((Message*)JB_Ring_First(Msg));
	if (Ch) {
		return SC_nil__UseAsRealSub(Ch, Test, Reason, Dcl);
	}
	return 0;
}

NilState SC_nil__VariableSet(SCDecl* Recv, Message* RecvMsg, SCDecl* Sent, Message* SentMsg, uint /*NilState*/ SentState) {
	if (!SC_Decl_TypeSuffers(Recv)) {
		return kSC__NilState_Real;
	}
	if ((SC_Decl_IsUnknownParam(Recv))) {
		JB_Msg_Fail(RecvMsg, SC_Decl_PrmStateMsg(Recv, JB_LUB[2154], nil));
		return 0;
	}
	if (SC_Decl_StatedReal(Recv) and (!SC_Decl_SyntaxIs(Recv, kSC__SCDeclInfo_Local))) {
		if (!SC_NilState_SyntaxIs(SentState, kSC__NilState_Nilish)) {
			return SentState;
		}
		if (SC_NilState_SyntaxIs(SentState, kSC__NilState_Realish)) {
			return SC_nil__BecomeReal(Sent, SentMsg, kSC__NilReason_Using, nil, nil);
		}
		if ((SC_Decl_SyntaxIs(Recv, kSC__SCDeclInfo_Property)) and (RecvMsg->Func == kJB_SyxDot)) {
			if ((SC_Func_SyntaxIs(SC_Func__CurrFunc(), kSC__FunctionType_Constructor)) and (SC_Decl_SyntaxIs(SC_Msg_FastDecl(((Message*)JB_Ring_First(RecvMsg))), kSC__SCDeclInfo_Self))) {
				if (true) {
					JB_Msg_Fail(RecvMsg, JB_Str_OperatorPlus(JB_LUB[2155], Recv->Name));
				}
				return kSC__NilState_Real;
			}
		}
		if (true) {
			JB_Msg_Fail(RecvMsg, JB_Str_OperatorPlus(JB_LUB[2156], SC_Msg_OrigRender(RecvMsg, nil)));
		}
		return kSC__NilState_Real;
	}
	if (Recv->NilReg) {
		return SC_nil_SetNilness((&SC__nil_T), Recv, SentState);
	}
	return 0;
}

NilState SC_nil__While(Message* Msg, NilCheckMode Test) {
	Message* Cond = ((Message*)JB_Ring_First(Msg));
	MaybeBool CondTest = SC_Msg_IsAlwaysBool(Cond);
	if (!((!JB_MaybeBool_KnownFalse(CondTest)) and SC_nil_BranchEnter((&SC__nil_T), Msg))) {
		return 0;
	}
	LoopInfo W = ((LoopInfo){});
	SC_LoopInfo_BeginLoop((&SC__nil_Loops), (!JB_MaybeBool_KnownTrue(CondTest)), (&W));
	{
		int I = 0;
		while (I < 3) {
			SC_nil__SyncJump(Cond, kSC__khalai_WhilePos);
			SC_nil__Argument(((Message*)JB_Ring_NextSib(Cond)), 0);
			SC_LoopInfo_NextLoop((&SC__nil_Loops));
			(++I);
		};
	}
	;
	if (!JB_MaybeBool_KnownTrue(CondTest)) {
		SC_nil__SyncJump(Cond, kSC__khalai_WhileNeg);
		SC__nil_Loops.ExitRecord = (SC__nil_Loops.ExitRecord | SC_nil__Value());
	}
	SC_LoopInfo_FinishLoop((&SC__nil_Loops), Msg);
	SC__nil_Loops = W;
	return SC_nil_BranchExit((&SC__nil_T), 0);
}


void SC_ArgArrayCounter_Check(ArgArrayCounter* Self, Message* Exp) {
	if (Self->IsItem and Self->IsNotItem) {
		if (true) {
			JB_Msg_Fail(Exp, JB_LUB[833]);
		}
	}
}

Message* SC_ArgArrayCounter_Do(ArgArrayCounter* Self, JB_String* Name, Message* Item, SCNode* Name_space) {
	Message* Acc = (JB_Syx_Msg(kJB_SyxAcc, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Acc, (JB_Syx_Msg(kJB_SyxThg, Name)));
	Message* Arr = JB_Msg_Msg(Acc, kJB_SyxArr, JB_LUB[0]);
	Message* Value = Item;
	if (JB_Msg_EqualsSyx(Value, kJB_SyxItem, false)) {
		Self->IsItem = true;
		Message* Key = JB_Msg_NeedSyx(Item, kJB_SyxNil);
		if (Key) {
			int64 V = 0;
			bool _tmPf0 = SC_Msg_ConstIntValue(Key, Name_space, (&V));
			if (!_tmPf0) {
				JB_Msg_Fail(Item, JB_LUB[1319]);
			}
			if (_tmPf0) {
				(Self->max = JB_int_OperatorMax(Self->max, V));
			}
			JB_Tree_SyntaxAppend(Arr, Key);
			Value = ((Message*)JB_Ring_First(Item));
		}
	}
	 else {
		Self->IsNotItem = true;
		JB_Msg_AppendNum(Arr, (Self->i)++);
		Self->max = Self->i;
	}
	return SC_NewEqRelWithMsgMsg(Acc, Value);
}


JB_MemoryLayer* JB_ClassData_CreateUseLayer(JB_Class* Self, JB_Object* Obj, JB_Object* Obj2) {
	JB_MemoryLayer* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Mem_CreateLayer(Self, Obj));
	JB_Mem_Use(Rz);
	JB_SetRef(Rz->Obj2, Obj2);
	JB_SafeDecr(Rz);
	return Rz;
}

void JB_ClassData_Restore(JB_Class* Self) {
	JB_MemoryLayer* _tmPf0 = JB_Class_DefaultLayer(Self);
	JB_Incr(_tmPf0);
	JB_Mem_Use(_tmPf0);
	JB_Decr(_tmPf0);
}


JB_Duration JB_MzSt_Durr(CompressionStats* Self) {
	JB_Duration Rz = 0;
	Rz = Self->Duration;
	if (Rz < 0) {
		Rz = (Rz + JB_Date__Now());
	}
	return Rz;
}

void JB_MzSt_End(CompressionStats* Self) {
	Self->Duration = (Self->Duration + JB_Date__Now());
}

void JB_MzSt_LiveUpdate(CompressionStats* Self, int In, int Out, bool Compress) {
	Self->In = (Self->In + In);
	Self->Out = (Self->Out + Out);
	if (Self->Live) {
		JB_MzSt_Print(Self, Compress);
	}
}

void JB_MzSt_Print(CompressionStats* Self, bool Compression) {
	JB_String* _tmPf0 = JB_MzSt_Report(Self, Compression, nil);
	JB_Incr(_tmPf0);
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
}

JB_String* JB_MzSt_Report(CompressionStats* Self, bool Compression, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	int A = JB_Ternary(Compression, Self->In, ((int)Self->Out));
	int B = JB_Ternary((!Compression), Self->In, ((int)Self->Out));
	JB_FS_RenderSpeed(Fs, JB_LUB[0], A, JB_MzSt_Durr(Self), B);
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

CompressionStats* JB_MzSt_Start(CompressionStats* Self) {
	if (!Self) {
		Self = (&JB__MzSt_All);
	}
	Self->Duration = (Self->Duration - JB_Date__Now());
	return Self;
}

int JB_MzSt__Init_() {
	{
		JB__MzSt_All = ((CompressionStats){});
	}
	;
	return 0;
}




byte JB_FastBuff_Byte(FastBuff* Self) {
	return Self->Curr++[0];
}

byte* JB_FastBuff_Clip(FastBuff* Self, int V, int Reduce) {
	if (V <= 0) {
		return Self->Start;
	}
	V = JB_int_OperatorMin(V, (JB_FastBuff_Size(Self) - Reduce));
	return Self->Start + V;
}

int JB_FastBuff_CopyTo(FastBuff* Self, byte* Dest, int Length) {
	int Rz = 0;
	byte* A = Self->Curr;
	if (!((A < Self->End) and (Length > 0))) {
		return 0;
	}
	byte* B = A + Length;
	if (B > Self->End) {
		B = Self->End;
	}
	Rz = (B - A);
	Self->Curr = B;
	memcpy(Dest, A, Rz);
	return Rz;
}

void JB_FastBuff_Destructor(FastBuff* Self) {
	if (Self->Owns) {
		JB_free(Self->Start);
	}
	JB_Clear(Self->ReadFrom);
}

bool JB_FastBuff_Has(FastBuff* Self, int N) {
	return (Self->End - Self->Curr) >= N;
}

bool JB_FastBuff_HasAny(FastBuff* Self) {
	return Self->End > Self->Curr;
}

int JB_FastBuff_Length(FastBuff* Self) {
	if (Self) {
		return JB_FastBuff_Position(Self);
	}
	return 0;
}

int JB_FastBuff_Position(FastBuff* Self) {
	return ((int)(Self->Curr - Self->Start));
}

void JB_FastBuff_PositionSet(FastBuff* Self, int Value) {
	byte* C = Self->Start + Value;
	if ((C < Self->Start) or (C > Self->End)) {
		if (true) {
			JB_FastBuff_SyntaxExpect(Self, JB_LUB[971]);
		}
		C = Self->End;
	}
	Self->Curr = C;
}

void JB_FastBuff_ReadFromSet(FastBuff* Self, JB_String* Value) {
	JB_SetRef(Self->ReadFrom, Value);
	Self->Start = Value->Addr;
	Self->End = (Self->Start + JB_Str_Length(Value));
	Self->Curr = Self->Start;
}

int JB_FastBuff_Remaining(FastBuff* Self) {
	return ((int)(Self->End - Self->Curr));
}

int JB_FastBuff_Size(FastBuff* Self) {
	if (Self) {
		return Self->End - Self->Start;
	}
	return 0;
}

JB_String* JB_FastBuff_AccessStr(FastBuff* Self, int Pos, int After) {
	JB_String* R = Self->ReadFrom;
	if (R != nil) {
		return JB_Str_Range(R, Pos, After);
	}
	byte* A = JB_FastBuff_Clip(Self, Pos, 1);
	byte* B = JB_FastBuff_Clip(Self, After, 0);
	if (B >= A) {
		return JB_Str_CopyFromPtr(A, B - A);
	}
	return JB_LUB[0];
}

void JB_FastBuff_SyntaxExpect(FastBuff* Self, JB_String* S) {
	if (!Self->WentBad) {
		if (true) {
			JB_Str_Fail(S);
		}
	}
	Self->WentBad = true;
}


void SC_FAT_AddLabelRequest(FatASM* Self, Message* P, int Pos) {
	ASMReg X = Self->Info;
	X = SC_Reg_RegSet(X, Pos);
	Self->Info = X;
	int J = SC_FAT_Form(Self)->RegForJump;
	if (J) {
		if (J != (Pos + 1)) {
		}
	}
	Self->JumpReg = J;
}

void SC_FAT_AddRegParam(FatASM* Self, Message* Src, int Write) {
	if (((uint)Write) <= 6) {
		Self->R[Write] = SC_Msg_RegOrNum(Src);
	}
	 else {
	}
}

int SC_FAT_BaseOp(FatASM* Self) {
	int Rz = 0;
	Rz = SC_FAT_Op(Self);
	if (Rz == kSC__ASM_FNCX3) {
		JB_DoAt(1);
		Rz = kSC__ASM_FNCX;
	}
	 else if (Rz == kSC__ASM_FNC3) {
		JB_DoAt(1);
		Rz = kSC__ASM_FNC;
	}
	return Rz;
}

int SC_FAT_BytePos(FatASM* Self) {
	return Self->Msg->Position;
}

int64 SC_FAT_Const(FatASM* Self) {
	return Self->_Const;
}

void SC_FAT_ConstSet(FatASM* Self, int64 Value) {
	Self->_Const = Value;
}

void SC_FAT_CopyFrom(FatASM* Self, FatASM* D) {
	memcpy(((Self)), ((D)), 64);
	{
		uint _irf0 = Self->InputFats;
		int _if1 = 0;
		while (_if1 < (6)) {
			if (!(_irf0 & (1 << _if1))) {
				(++_if1);
				continue;
			}
			FatASM* I = (SC_FAT_Input(Self, _if1));
			if (I) {
				(++I->xC2xB5RefCount);
			}
			(++_if1);
		};
	};
}

void SC_FAT_DebugSet(FatASM* Self, Message* Value) {
	Self->Msg = Value;
}

void SC_FAT_DebugPrint(FatASM* Self) {
	//visible;
	if (SC__ASM_NoisyASM >= 3) {
		FastString* Fs = JB_FS_Constructor(nil);
		JB_Incr(Fs);
		SC_FAT_Renda(Self, Fs, false);
		JB_String* _tmPf0 = JB_FS_SyntaxCast(Fs);
		JB_Incr(_tmPf0);
		JB_Decr(Fs);
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
}

bool SC_FAT_Exists(FatASM* Self) {
	return SC_FAT_Op(Self) != kSC__ASM_NOOP;
}

float SC_FAT_F32(FatASM* Self) {
	float Rz = 0.0f;
	Rz = ((float*)((&Self->_Const)))[0];
	if (!Rz) {
		Rz = 0;
	}
	return Rz;
}

Float64 SC_FAT_F64(FatASM* Self) {
	Float64 Rz = 0.0f;
	Rz = ((double*)((&Self->_Const)))[0];
	if (!Rz) {
		Rz = 0;
	}
	return Rz;
}

JB_String* SC_FAT_File(FatASM* Self) {
	SCFile* S = ((SCFile*)JB_Array_Value(SC__Imp_AllFiles, SC_FAT_FileNum(Self)));
	if (S) {
		return S;
	}
	return JB_LUB[0];
}

int SC_FAT_FileNum(FatASM* Self) {
	return SC_Msg_FileNum(Self->Msg) & 16533;
}

void SC_FAT_FillLabelRequest(FatASM* Self, ASM* Start, ASM* After, int Reg) {
	ASM* SelfOut = Start + Self->ASMIndex;
	int J = Self->R[Reg];
	FatASM* OldDest = Self + (J + 1);
	uint DestOut = OldDest->ASMIndex;
	ASM* Dest = Start + DestOut;
	int J2 = (Dest - SelfOut) - 1;
	if (J2 == -1) {
		SC_FAT_SyntaxExpect(Self, JB_LUB[1374]);
	}
	Self->R[Reg] = J2;
	SC_FAT_xC2xB5RenderInto(Self, SelfOut, SelfOut + 1);
	Self->R[Reg] = J;
}

int64 SC_FAT_FloatConvConst(FatASM* Self, int DestBitSize) {
	uint64* F = (&Self->_Const);
	if (DestBitSize == 64) {
		return JB_dbl_AsInt(((Float64)((float*)F)[0]));
	}
	return JB_f_AsInt(((float)((double*)F)[0]));
}

int64 SC_FAT_FloatIntConvConst(FatASM* Self, uint /*DataTypeCode*/ Src, uint /*DataTypeCode*/ Dest) {
	int Dbc = JB_TC_ByteCount(Dest);
	void* F = ((void*)((&Self->_Const)));
	if (JB_TC_IsInt(Src)) {
		int64 V = SC_FAT_Const(Self);
		if (JB_TC_IsSigned(Src)) {
			if (Dbc == 4) {
				return JB_f_AsInt(((float)V));
			}
			return JB_dbl_AsInt(((Float64)V));
		}
		if (Dbc == 4) {
			return JB_f_AsInt(((float)((uint64)V)));
		}
		return JB_dbl_AsInt(((Float64)((uint64)V)));
	}
	if (JB_TC_ByteCount(Src) == 4) {
		float F32 = ((float*)F)[0];
		if (JB_TC_IsSigned(Dest)) {
			return ((int64)F32);
		}
		return ((uint64)F32);
	}
	double* F64 = ((double*)F);
	if (JB_TC_IsSigned(Dest)) {
		return ((int64)F64);
	}
	return ((uint64)F64);
}

xC2xB5Form* SC_FAT_Form(FatASM* Self) {
	Instruction* I = SC__Instruction_TypeList[SC_FAT_Op(Self)];
	JB_Incr(I);
	if (I) {
		xC2xB5Form* _tmPf0 = I->Sizes;
		JB_Incr(_tmPf0);
		JB_Decr(I);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(I);
	return SC__Instruction_TypeList[0]->Sizes;
}

uint SC_FAT_ID(FatASM* Self) {
	return Self - SC__Pac_Sh.Start;
}

FatASM* SC_FAT_Input(FatASM* Self, int I) {
	uint R = (Self->R[I] << 1) >> 16;
	if (R) {
		return SC_uint_FAT(R);
	}
	return nil;
}

bool SC_FAT_IsFinisher(FatASM* Self) {
	ASM O = ((ASM)SC_FAT_Op(Self));
	return (O == kSC__ASM_RET) or ((O == kSC__ASM_TRAP) or (O == kSC__ASM_TAIL));
}

bool SC_FAT_IsFunc(FatASM* Self) {
	int B = SC_FAT_BaseOp(Self);
	return (B == kSC__ASM_FNCX) or (B == kSC__ASM_FNC);
}

bool SC_FAT_IsUnused(FatASM* Self) {
	return Self->xC2xB5RefCount == 0;
}

bool SC_FAT_JumpImprove(FatASM* Self) {
	FatASM* D0 = SC_FAT_JumpTo(Self);
	FatASM* D = D0;
	int N = 0;
	while (SC_FAT_OperatorIsa(D, kSC__ASM_JUMP)) {
		D = SC_FAT_JumpTo(D);
		if ((++N) >= 30) {
			JB_Msg_Fail(Self->Msg, nil);
			return nil;
		}
	};
	if ((SC_FAT_OperatorIsa(D, kSC__ASM_RET) or SC_FAT_OperatorIsa(D, kSC__ASM_TAIL)) and (SC_FAT_OperatorIsa(Self, kSC__ASM_JUMP))) {
		SC_FAT_CopyFrom(Self, D);
		return true;
	}
	if (D != D0) {
		SC_FAT_JumpToSet(Self, D, (&SC__Pac_Sh));
		return true;
	}
	return false;
}

void SC_FAT_JumpInputSet(FatASM* Self, int A, int V) {
	Self->R[A] = V;
	Self->JumpReg = (A + 1);
	Self->xC2xB5RefCount = JB_int_OperatorMax(1, Self->xC2xB5RefCount);
	(++SC__Pac_Sh.BasicBlock);
}

FatASM* SC_FAT_JumpTo(FatASM* Self) {
	uint J = Self->JumpReg;
	if (J) {
		return Self + (1 + ((int)Self->R[J - 1]));
	}
	return nil;
}

void SC_FAT_JumpToSet(FatASM* Self, FatASM* Value, ASMState* A) {
	uint J = Self->JumpReg;
	if (J) {
		int D = (Value - Self) - 1;
		if (D == -1) {
			SC_FAT_SyntaxExpect(Self, JB_LUB[1375]);
		}
		Self->R[J - 1] = D;
		if (D == 0) {
			SC_Pac_Nop(A, Self, 0);
		}
	}
	 else {
		J = SC_FAT_ID(Self);
	}
}

ASM* SC_FAT_KNST_Encoder(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	if (Curr >= (After - 2)) {
		return Curr;
	}
	int64 V = SC_FAT_Const(Self);
	ASM* Orig = Curr++;
	int64 Inv = V >> 63;
	if (Inv) {
		V = (~V);
	}
	ASM Knst = 0;
	ASM_ConstStretchy Mode = kSC__ASM_KNST << 24;
	Knst = SC_ASM_R1Set(Knst, Self->R[0]);
	Knst = SC_ASM_ConstStretchy_InvSet(Knst, Inv);
	Knst = SC_ASM_ConstStretchy_ValueSet(Knst, V);
	V = (V >> 17);
	if (V) {
		Curr++[0] = V;
		Mode = (kSC__ASM_KNST2 << 24);
		V = (V >> 32);
		if (V) {
			Mode = (kSC__ASM_KNST3 << 24);
			Curr++[0] = V;
		}
	}
	Orig[0] = (Knst | Mode);
	return Curr;
}

void SC_FAT_MiniOpt(FatASM* Self, ASMState* A) {
	if (SC_FAT_OperatorIsa(Self, kSC__ASM_BOR)) {
		SC_FAT_OptBor(Self, A);
	}
}

ASM* SC_FAT_NOOP_Encoder(FatASM* Self, ASM* Curr, ASM* After, int64 ExtraInfo) {
	Curr[0] = (kSC__ASM_NOOP << 24);
	return Curr;
}

void SC_FAT_NumInputSet(FatASM* Self, int A, int V) {
	Self->R[A] = V;
}

byte SC_FAT_Op(FatASM* Self) {
	return Self->_Op;
}

bool SC_FAT_OperatorIsa(FatASM* Self, int M) {
	if (Self) {
		return M == SC_FAT_Op(Self);
	}
	return false;
}

ASMReg SC_FAT_AsReg(FatASM* Self, ASMReg Info) {
	Info = SC_Reg_FatIndexSet(Info, SC_FAT_Index(Self));
	Self->Info = Info;
	return Info;
}

void SC_FAT_OptBor(FatASM* Self, ASMState* A) {
	uint Dest = SC_FAT_r0(Self);
	uint Input = SC_FAT_r1(Self);
	if (!(SC_uint_IsTemp(Dest) and ((!SC_uint_IsTemp(Input)) and ((!SC_FAT_r2(Self)) and (!SC_FAT_r3(Self)))))) {
		return;
	}
	FatASM* P = SC_FAT_Prev(Self);
	FatASM* N = SC_FAT_Next(Self);
	if (!(P and N)) {
		return;
	}
	if (!SC_uint_OperatorSameReg(SC_FAT_Out(P), Input)) {
		return;
	}
	if (!SC_FAT_ReplaceReg(N, Dest, Input)) {
		return;
	}
	SC_Pac_SofterNop(A, Self);
	JB_Print(JB_LUB[1334]);
	SC_FAT_DebugPrint(Self);
}

uint SC_FAT_Out(FatASM* Self) {
	int A = JB_int_LowestBit(((int)Self->Outputs));
	if (A) {
		A = JB_Int_Log2(A);
		if (A != 0) {
		}
		return Self->R[A];
	}
	return 0;
}

int SC_FAT_PrmWithInt(FatASM* Self, int I) {
	return Self->R[I] & (~(1 << 31));
}

void SC_FAT_PrmCollectCounterPart(FatASM* Self, FastString* Fs) {
	SCFunction* Fn = ((SCFunction*)JB_Object_FastAs(Self->Msg->Obj, &SCFunctionData));
	if (!Fn) {
		return;
	}
	uint64 Regs = (((uint64)SC_FAT_r2(Self)) | (((uint64)SC_FAT_r3(Self)) << 32)) >> 12;
	JB_FS_AppendByte(Fs, '(');
	int N = JB_Array_Size(Fn->Args);
	while (N) {
		JB_FS_AppendByte(Fs, 'r');
		JB_FS_AppendInt32(Fs, (Regs >> (((--N)) * 5)) & 31);
		if (N > 0) {
			JB_FS_AppendString(Fs, JB_LUB[10]);
		}
	};
	JB_FS_AppendByte(Fs, ')');
}

uint SC_FAT_r0(FatASM* Self) {
	return Self->R[0];
}

void SC_FAT_r0SetWithUint(FatASM* Self, uint Value) {
	Self->R[0] = Value;
}

void SC_FAT_r0SetWithReg(FatASM* Self, ASMReg Value) {
	Self->R[0] = SC_Reg_treg(Value);
}

uint SC_FAT_r1(FatASM* Self) {
	return Self->R[1];
}

void SC_FAT_r1SetWithUint(FatASM* Self, uint Value) {
	Self->R[1] = Value;
}

uint SC_FAT_r2(FatASM* Self) {
	return Self->R[2];
}

void SC_FAT_r2SetWithUint(FatASM* Self, uint Value) {
	Self->R[2] = Value;
}

uint SC_FAT_r3(FatASM* Self) {
	return Self->R[3];
}

void SC_FAT_Renda(FatASM* Self, FastString* Fs, bool Simpler) {
	if (((!SC_FAT_Exists(Self))) and (Self->Msg->Func == kJB_SyxSheb)) {
		SC_FAT_RendaMsg(Self, Fs, 0);
		return;
	}
	int M = JB_FS_Mark(Fs);
	Instruction* Op = SC__Instruction_TypeList[SC_FAT_BaseOp(Self)];
	int NL = JB_Str_Length(Op->Name);
	if (SC_FAT_BaseOp(Self) == kSC__ASM_NOOP) {
		NL = -1;
	}
	 else {
		JB_FS_AppendString(Fs, Op->Name);
		JB_FS_AppendByte(Fs, ':');
	}
	JB_FS_AppendMultiByte(Fs, ' ', 5 - JB_Str_Length(Op->Name));
	JB_String* GotAny = JB_LUB[0];
	int Remain = 24;
	xC2xB5Form* F = Op->Sizes;
	{
		int _LoopSrcf1 = F->Count;
		int I = 0;
		while (I < _LoopSrcf1) {
			int Bs = SC_xC2xB5Param_BitSize(SC_xC2xB5Form_AccessInt(F, I));
			if (Bs and (Remain > 0)) {
				JB_FS_AppendString(Fs, GotAny);
				GotAny = JB_LUB[10];
				int V = Self->R[I];
				if (SC_FAT_IsFunc(Self) and ((I == 2) or (I == 3))) {
					if (I == 2) {
						SC_FAT_PrmCollectCounterPart(Self, Fs);
					}
					 else {
						(JB_FS_LengthSet(Fs, Fs->Length - 2));
					}
				}
				 else {
					if (SC_xC2xB5Param_IsReg(SC_xC2xB5Form_AccessInt(F, I))) {
						JB_FS_AppendByte(Fs, ((byte)('r' + (((uint)V) >> 30))));
						V = (V & 31);
					}
					JB_FS_AppendInt32(Fs, V);
				}
				Remain = (Remain + Bs);
			}
			if (SC_FAT_Op(Self) == kSC__ASM_KNST) {
				break;
			}
			(++I);
		};
	}
	;
	if (SC_FAT_OperatorIsa(Self, kSC__ASM_KNST) or SC_FAT_OperatorIsa(Self, kSC__ASM_KNSR)) {
		SC_FAT_RendaKnst(Self, Fs, JB_FS_Mark(Fs) - M);
		JB_FS_AppendByte(Fs, ' ');
	}
	int N = JB_FS_Mark(Fs) - M;
	if (N <= 2) {
		(JB_FS_LengthSet(Fs, Fs->Length - 1));
		JB_FS_AppendString(Fs, JB_LUB[26]);
		N = (N + 2);
	}
	if (!Simpler) {
		SC_FAT_RendaMsg(Self, Fs, N);
	}
}

void SC_FAT_RendaKnst(FatASM* Self, FastString* Fs, int Sofar) {
	uint Ty = SC_Reg_xC2xB5Type(Self->Info);
	JB_FS_AppendMultiByte(Fs, ' ', 26 - Sofar);
	JB_FS_AppendString(Fs, JB_LUB[192]);
	if (JB_TC_IsInt(Ty)) {
		JB_FS_AppendInt64(Fs, ((int64)SC_FAT_Const(Self)));
	}
	 else {
		Float64 Num = 0.0f;
		if (JB_TC_ByteCount(Ty) == 4) {
			Num = ((Float64)SC_FAT_F32(Self));
		}
		 else {
			Num = SC_FAT_F64(Self);
		}
		JB_FS_AppendDoubleAsText(Fs, Num, 9, true, true);
		if (JB_TC_ByteCount(Ty) == 4) {
			JB_FS_AppendByte(Fs, 'f');
		}
		 else {
			JB_FS_AppendByte(Fs, 'd');
		}
	}
	JB_FS_AppendString(Fs, JB_LUB[193]);
}

void SC_FAT_RendaMsg(FatASM* Self, FastString* Fs, int Sofar) {
	Message* Msg = Self->Msg;
	if (JB_Msg_EqualsSyx(Msg, kJB_SyxSheb, false)) {
		JB_FreeIfDead(JB_Msg_Render(Msg, Fs));
		return;
	}
	JB_FS_AppendMultiByte(Fs, ' ', 47 - Sofar);
	if (JB_Msg_EqualsSyx(Msg, kJB_SyxArg, false)) {
		return;
	}
	JB_FS_AppendString(Fs, JB_LUB[579]);
	JB_FS_AppendByte(Fs, ' ');
	if (JB_Msg_EqualsSyx(Msg, kJB_SyxPrm, false)) {
		Msg = ((Message*)JB_Ring_Parent(Msg));
	}
	 else {
		while ((JB_Msg_EqualsSyx(Msg, kJB_SyxNum, false)) or ((JB_Msg_EqualsSyx(Msg, kJB_SyxThg, false)) or ((JB_Msg_EqualsSyx(Msg, kJB_SyxOpp, false)) or ((JB_Msg_EqualsSyx(Msg, kJB_SyxBra, false)) or (JB_Msg_EqualsSyx(Msg, kJB_SyxChar, false)))))) {
			if ((JB_Msg_OperatorIn(Msg, kJB_SyxPrm))) {
				break;
			}
			Msg = ((Message*)JB_Ring_Parent(Msg));
		};
	}
	if ((JB_Msg_EqualsSyx(Msg, kJB_SyxTmp, false))) {
		SC_FAT_TmpRender(Self, Fs, Msg);
	}
	 else {
		JB_FreeIfDead(JB_Msg_Render(Msg, Fs));
	}
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_AppendString(Fs, JB_LUB[527]);
}

bool SC_FAT_ReplaceReg(FatASM* Self, uint Dest, uint New) {
	bool Rz = false;
	Dest = (Dest & 31);
	{
		uint _irf0 = Self->InputRegs;
		int I = 0;
		while (I < (6)) {
			if (!(_irf0 & (1 << I))) {
				(++I);
				(++I);
				continue;
			}
			if ((Self->R[I] & 31) == Dest) {
				Self->R[I] = New;
				Rz = true;
				Self->InputFats = (Self->InputFats & (~(1 << I)));
			}
			(++I);
		};
	}
	;
	return Rz;
}

bool SC_FAT_ResetFunctionCall(FatASM* Self, int Reg) {
	uint V = SC__Pac_Sh.VDecls;
	if ((V == Reg) and (V == (SC_FAT_r0(Self) - 1))) {
		Self->Outputs = JB_Int_Log2(((int)V));
		(SC_FAT_r0SetWithUint(Self, V));
		return true;
	}
	JB_DoAt(1);
	0;
	return false;
}

bool SC_FAT_ResetOutput(FatASM* Self, int Reg) {
	if (SC_FAT_IsFunc(Self)) {
		return SC_FAT_ResetFunctionCall(Self, Reg);
	}
	uint O = Self->Outputs;
	if ((O & 1) and Self->R[0]) {
		(SC_FAT_r0SetWithUint(Self, Reg));
		return true;
	}
	if ((O & 2) and Self->R[1]) {
		(SC_FAT_r1SetWithUint(Self, Reg));
		return true;
	}
	return false;
}

void SC_FAT_SetOpSet(FatASM* Self, uint /*byte*/ Value) {
	Self->InputFats = 0;
	Self->_Op = Value;
	Self->JumpReg = 0;
	Self->Outputs = 0;
	{
		int I = 0;
		while (I < 6) {
			Self->R[I] = 0;
			(++I);
		};
	}
	;
	Self->ASMIndex = 0;
	Self->BlockNum = 0;
	Self->xC2xB5RefCount = 0;
}

MaybeBool SC_FAT_SmartFatness(FatASM* Self, int Reg) {
	xC2xB5Form* F = SC_FAT_Form(Self);
	{
		int _LoopSrcf1 = F->Count;
		int I = 0;
		while (I < _LoopSrcf1) {
			if (SC_FAT_PrmWithInt(Self, I) == Reg) {
				uint P = F->Params[I];
				if (SC_xC2xB5Param_IsReg(P)) {
					return ((MaybeBool)(SC_xC2xB5Param_SyntaxIs(P, kSC__xC2xB5Param_Output)));
				}
			}
			(++I);
		};
	}
	;
	return ((MaybeBool)8);
}

FatASM* SC_FAT_Step(FatASM* Self, int Dir) {
	uint B = Self->BlockNum;
	while (true) {
		Self = (Self + Dir);
		if (SC_FAT_Op(Self) != kSC__ASM_NOOP) {
			return ((FatASM*)JB_Ternary(B == Self->BlockNum, Self, nil));
		}
	};
}

void SC_FAT_SyntaxExpect(FatASM* Self, JB_String* Error) {
	JB_File* F = ((JB_File*)SC_FAT_File(Self));
	JB_Error* Err = JB_Err_Constructor(nil, nil, Error, kJB__ErrorSeverity_Error, F);
	JB_Incr(Err);
	Err->Position = SC_FAT_BytePos(Self);
	JB_Rec_AppendErr(((JB_ErrorReceiver*)nil), Err);
	JB_Decr(Err);
	SC_FAT_DebugPrint(Self);
}

bool SC_FAT_SyntaxIs(FatASM* Self, ASMReg Flags) {
	if (Self) {
		return ((uint64)(SC_Reg_OperatorBitand(Self->Info, Flags))) != 0;
	}
	return false;
}

void SC_FAT_SyntaxIsSet(FatASM* Self, ASMReg Flags, bool Value) {
	if (Value) {
		(Self->Info = SC_Reg_OperatorAs(Self->Info, Flags));
	}
	 else {
		(Self->Info = SC_Reg_OperatorAsnt(Self->Info, Flags));
	}
}

void SC_FAT_TmpRender(FatASM* Self, FastString* Fs, Message* Msg) {
	Message* Arg = JB_Msg_FindSyx(Msg, kJB_SyxArg);
	JB_Incr(Arg);
	if (!Arg) {
		JB_FreeIfDead(JB_Msg_Render(Msg, Fs));
		JB_Decr(Arg);
		return;
	}
	Message* C = JB_Msg_Copy(Msg, nil);
	JB_Incr(C);
	JB_SetRef(Arg, JB_Msg_FindSyx(C, kJB_SyxArg));
	while (Arg) {
		JB_Tree_Remove(Arg);
		JB_SetRef(Arg, JB_Msg_FindSyx(C, kJB_SyxArg));
	};
	JB_Decr(Arg);
	JB_String* _tmPf1 = JB_Msg_Render(C, nil);
	JB_Incr(_tmPf1);
	JB_Decr(C);
	JB_String* _tmPf0 = JB_Str_ReplaceAll(_tmPf1, JB_LUB[125], JB_LUB[77], false, nil);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(Fs, _tmPf0);
	JB_Decr(_tmPf0);
}








int SC_IsaTester__Init_() {
	{
		SC__IsaTester_T = ((IsaTester){});
	}
	;
	return 0;
}

void SC_IsaTester__SyntaxAppend(Message* O) {
	if (SC__IsaTester_T.Count < 4) {
		SC__IsaTester_T.Items[SC__IsaTester_T.Count++] = O;
	}
}


void SC_LoopInfo_BeginLoop(LoopInfo* Self, bool HasExitCond, LoopInfo* Rz) {
	Rz[0] = (Self)[0];
	NilRecord V = SC_nil__Value();
	Self->ExitRecord = (((NilRecord)HasExitCond) * V);
	Self->HasEscape = HasExitCond;
	Self->ContRecord = V;
	Self->VarCount = SC_NRD_DepthOfVars(V);
	Self->NestDepth = SC_nil_NestDepth((&SC__nil_T));
}

void SC_LoopInfo_FinishLoop(LoopInfo* Self, Message* Msg) {
	NilRecord Ex = Self->ExitRecord;
	if (!Ex) {
		JB_Msg_Fail(Msg, JB_LUB[1043]);
	}
	if ((!Self->HasEscape) and (!JB_Tree_IsLast(Msg))) {
		SC_Msg_KinderRemoveAfter(Msg);
	}
	(SC_nil_ValueSet((&SC__nil_T), Ex));
}

void SC_LoopInfo_NextLoop(LoopInfo* Self) {
	Self->ContRecord = (Self->ContRecord | SC_nil__Value());
	(SC_nil_ValueSet((&SC__nil_T), Self->ContRecord));
}




void JB_MsgPos_Destructor(MessagePosition* Self) {
	JB__Tk_Using = (Self)[0];
	JB_Mem_Use(Self->Layer);
}

void JB_MsgPos_SyntaxUsingComplete(MessagePosition* Self, JB_Object* Idk) {
}



void SC_NameAndMsg_Destructor(NameAndMsg* Self) {
	JB_Clear(Self->Msg);
	JB_Clear(Self->Name);
	JB_Clear(Self->Arg);
}

void SC_NameAndMsg_SyntaxAppend(NameAndMsg* Self, Message* M) {
	Message* Msg = Self->Msg;
	if (Msg) {
		(JB_Ring_PrevSibSet(Msg, M));
	}
	 else {
		JB_Tree_SyntaxAppend(Self->Arg, M);
	}
}


void SC_NRC_SyntaxCallSet(NilRecorder* Self, uint64 Item, uint64 Value) {
	Value = (Value & kSC__NilState_Either);
	Item = (Item << 1);
	uint64 Mask = ((uint64)kSC__NilState_Either) << Item;
	NilRecord Prev = Self->Value;
	Self->Value = ((Prev & (~Mask)) | (Value << Item));
}


void JB_LD_Destructor(ObjectLoader* Self) {
	JB_Clear(Self->Result);
}

void JB_LD_Finish(ObjectLoader* Self) {
	JB_SetRef(Self->Result, nil);
	if (Self->NoClass) {
		JB_Msg_Fail(Self->DataError, JB_LUB[791]);
	}
	if (Self->DataError) {
		JB_Msg_Fail(Self->DataError, JB_LUB[792]);
	}
	if (Self->CouldntLoad) {
		JB_Object_FailStr(Self->CouldntLoad, JB_LUB[793]);
	}
}

JB_Class* JB_LD_GetClassOf(ObjectLoader* Self, Message* Msg) {
	DTWrap* Data = ((DTWrap*)JB_Dict_Value0(JB__LD_ClassList, Msg->Name));
	if (Data) {
		return ((JB_Class*)(JB_Wrap_SyntaxAccess(Data)));
	}
	Self->NoClass = Msg;
	return nil;
}

bool JB_LD_HasItem(ObjectLoader* Self) {
	return ((bool)Self->CurrItem);
}

int64 JB_LD_Int(ObjectLoader* Self) {
	Message* C = JB_LD_Next(Self);
	if (C) {
		return JB_Msg_Int(C, 0);
	}
	return 0;
}

int64 JB_LD_ItemInt(ObjectLoader* Self) {
	Message* C = Self->CurrItem;
	if (!C) {
		return 0;
	}
	Self->CurrItem = ((Message*)JB_Ring_NextSib(C));
	return JB_Msg_Int(((Message*)JB_Ring_Last(C)), 0);
}

bool JB_LD_ItemIsInt(ObjectLoader* Self) {
	Message* C = Self->CurrItem;
	return ((JB_Msg_EqualsSyx(((Message*)JB_Ring_Last(C)), kJB_SyxNum, false)));
}

JB_String* JB_LD_ItemName(ObjectLoader* Self) {
	Message* C = Self->CurrItem;
	return JB_Str_Unshare(JB_Msg_FirstName(C));
}

JB_Object* JB_LD_ItemObject(ObjectLoader* Self) {
	Message* C = Self->CurrItem;
	if (!C) {
		return nil;
	}
	Self->CurrItem = ((Message*)JB_Ring_NextSib(C));
	return JB_LD_ObjectSub(Self, ((Message*)JB_Ring_Last(C)));
}

void JB_LD_LoadClass(ObjectLoader* Self, Message* Msg, Dictionary* Dict) {
	JB_Class* Cls = JB_LD_GetClassOf(Self, Msg);
	if (!Cls) {
		return;
	}
	Message* Items = ((Message*)JB_Ring_Last(Msg));
	if ((!JB_Msg_EqualsSyx(Items, kJB_SyxList, false))) {
		JB_Msg_Fail(Items, nil);
		return;
	}
	{
		Message* Line = ((Message*)JB_Ring_First(Items));
		while (Line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Line));
			JB_LD_LoadObject(Self, Line, Dict, Cls);
			Line = _Nf1;
		};
		;
	};
}

void JB_LD_LoadForReal(ObjectLoader* Self, Message* Root, Dictionary* D) {
	Self->Dict = D;
	{
		Message* Cls = ((Message*)JB_Ring_First(Root));
		while (Cls) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Cls));
			if ((JB_Msg_EqualsSyx(Cls, kJB_SyxTmp, false))) {
				{
					Message* _LoopSrcf4 = ((Message*)JB_Ring_Last(Cls));
					Message* Line = ((Message*)JB_Ring_First(_LoopSrcf4));
					while (Line) {
						Message* _Nf3 = ((Message*)JB_Ring_NextSib(Line));
						Message* Name = ((Message*)JB_Ring_First(Line));
						if (Name) {
							Saveable* Result = ((Saveable*)JB_Dict_Value0(D, Name->Name));
							if (Result) {
								Self->CurrItem = ((Message*)JB_Ring_First(((Message*)JB_Ring_Last(Line))));
								JB_Sav___LoadProperties__(Result, Self);
							}
						}
						Line = _Nf3;
					};
					;
				};
			}
			 else if ((JB_Msg_EqualsSyx(Cls, kJB_SyxName, false))) {
				JB_SetRef(Self->Result, ((Saveable*)JB_Dict_Value0(D, Cls->Name)));
			}
			Cls = _Nf1;
		};
		;
	};
}

void JB_LD_LoadObject(ObjectLoader* Self, Message* Msg, Dictionary* Dict, JB_Class* Cls) {
	if ((!JB_Msg_EqualsSyx(Msg, kJB_SyxItem, false))) {
		return;
	}
	Message* Name = ((Message*)JB_Ring_First(Msg));
	if (!Name) {
		return;
	}
	Saveable* Result = ((Saveable*)((JB_Object*)JB_Ternary(((bool)Cls), JB_Class_AllocZeroed(Cls), nil)));
	if (Result) {
		(JB_Dict_ValueSet(Dict, Name->Name, Result));
	}
}

Message* JB_LD_Next(ObjectLoader* Self) {
	Message* C = Self->CurrItem;
	if (C) {
		Self->CurrItem = ((Message*)JB_Ring_NextSib(C));
		return C;
	}
	return nil;
}

JB_Object* JB_LD_Object(ObjectLoader* Self) {
	return JB_LD_ObjectSub(Self, JB_LD_Next(Self));
}

JB_Object* JB_LD_ObjectSub(ObjectLoader* Self, Message* C) {
	if ((JB_Msg_EqualsSyx(C, kJB_SyxThg, false))) {
		return JB_Dict_Value0(Self->Dict, C->Name);
	}
	 else if ((JB_Msg_EqualsSyx(C, kJB_SyxStr, false))) {
		return JB_Str_Unshare(C->Name);
	}
	return nil;
}

void JB_LD_Preload(ObjectLoader* Self, Message* Root, Dictionary* Dict) {
	{
		Message* Cls = ((Message*)JB_Ring_First(Root));
		while (Cls) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Cls));
			if ((JB_Msg_EqualsSyx(Cls, kJB_SyxTmp, false))) {
				JB_LD_LoadClass(Self, Cls, Dict);
			}
			Cls = _Nf1;
		};
		;
	};
}

JB_String* JB_LD_String(ObjectLoader* Self) {
	Message* C = JB_LD_Next(Self);
	if (!C) {
		return JB_LUB[0];
	}
	return JB_Str_Unshare(C->Name);
}

bool JB_LD_VerifyFormat(ObjectLoader* Self, Message* Root) {
	JB_LD__Init();
	Message* M1 = JB_Msg_NeedSyx(Root, kJB_SyxName);
	if (!M1) {
		return nil;
	}
	return true;
}

void JB_LD__Init() {
	if (JB__LD_ClassList) {
		return;
	}
	JB_SetRef(JB__LD_ClassList, JB_Dict_Constructor(nil));
	JB_InitClassList(((FP_SaverLoadClass)((&JB_LD__LoadOne))));
}

int JB_LD__Init_() {
	{
	}
	;
	return 0;
}

void JB_LD__LoadOne(JB_Class* Cls, int8* Data) {
	JB_StringC* _tmPf0 = JB_Str__Wrap(Cls->Name);
	JB_Incr(_tmPf0);
	JB_String* Name = JB_Str_LowerCase(_tmPf0);
	JB_Incr(Name);
	JB_Decr(_tmPf0);
	DTWrap* _tmPf1 = JB_Wrap_ConstructorInt(nil, ((int64)Cls));
	JB_Incr(_tmPf1);
	(JB_Dict_ValueSet(JB__LD_ClassList, Name, _tmPf1));
	JB_Decr(Name);
	JB_Decr(_tmPf1);
}


void JB_Saver_AppendInt(ObjectSaver* Self, int64 I) {
	JB_FS_AppendInt64(Self->Dest, I);
	JB_FS_AppendByte(Self->Dest, ',');
}

void JB_Saver_AppendObject(ObjectSaver* Self, JB_Object* O) {
	JB_FS_AppendObjectOrNil(Self->Dest, O);
	JB_FS_AppendByte(Self->Dest, ',');
}

void JB_Saver_AppendString(ObjectSaver* Self, JB_String* S) {
	JB_FS_AppendByte(Self->Dest, '`');
	JB_FreeIfDead(JB_Str_ReplaceAll(S, JB_LUB[23], JB_LUB[24], false, Self->Dest));
	JB_FS_AppendByte(Self->Dest, '`');
	JB_FS_AppendByte(Self->Dest, ',');
}

void JB_Saver_Constructor(ObjectSaver* Self) {
	Self->Dest = nil;
	Self->CantSaveThis = nil;
	Self->Root = nil;
}

void JB_Saver_Destructor(ObjectSaver* Self) {
	if (Self->CantSaveThis) {
		JB_Object_FailStr(Self->CantSaveThis, JB_LUB[812]);
	}
	JB_Clear(Self->Dest);
}

void JB_Saver_Finish(ObjectSaver* Self, Saveable* First) {
	FastString* Fs = Self->Dest;
	JB_FS_AppendByte(Fs, '\n');
	JB_FS_AppendByte(Fs, '@');
	JB_FS_AppendObjectID(Fs, First);
	JB_FS_AppendByte(Fs, '\n');
	JB_FS_AppendString(Fs, kJB_kSaverEnd);
}

void JB_Saver__Init() {
	if (((SaverClassInfo*)JB_Array_SyntaxCast(JB__Saver_SaveableList))) {
		return;
	}
	JB_InitClassList(((FP_SaverLoadClass)((&JB_Saver__LoadOne))));
}

int JB_Saver__Init_() {
	{
	}
	;
	return 0;
}

void JB_Saver__LoadOne(JB_Class* Cls, int8* Data) {
	SaverClassInfo* N = JB_sci_Constructor(nil, Cls, Data);
	JB_Incr(N);
	Cls->SaveInfo = ((byte*)N);
	JB_SetRef(N->NextInfo, JB__Saver_SaveableList);
	JB_SetRef(JB__Saver_SaveableList, N);
	JB_Decr(N);
}



JB_String* JB_Pico_Get(PicoComms* Self, float T) {
	if (PicoCanGet(Self)) {
		PicoMessage Msg = ((PicoMessage){});
		PicoGet(Self, (&Msg), T);
		return JB_Str__FromPico((&Msg));
	}
	return JB_LUB[0];
}

bool JB_Pico_SendMsg(PicoComms* Self, PicoMessage* A, bool Wait) {
	return PicoSend(Self, A->Data, A->Length, Wait);
}

bool JB_Pico_SendFS(PicoComms* Self, FastString* Fs, bool Wait) {
	bool Rz = false;
	PicoMessage _tmPf0 = ((PicoMessage){});
	JB_Pico__FromFS(Fs, (&_tmPf0));
	Rz = JB_Pico_SendMsg(Self, (&_tmPf0), Wait);
	(JB_FS_LengthSet(Fs, 0));
	return Rz;
}

PicoComms* JB_Pico__New(JB_StringC* Name, int Noise) {
	PicoComms* P = PicoCreate(JB_Str_SyntaxCast(Name));
	if (P) {
		PicoConfig* C = PicoCommsConf(P);
		C->Bits = 16;
		C->Noise = Noise;
		return P;
	}
	PicoGlobalStats St = ((PicoGlobalStats){});
	PicoStats((&St));
	if (true) {
		JB_String* _tmPf1 = JB_int_RenderFS(St.OpenPicos, nil);
		JB_Incr(_tmPf1);
		JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[808], _tmPf1);
		JB_Incr(_tmPf0);
		JB_Decr(_tmPf1);
		JB_Str_Fail(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return nil;
}





void JB_Pico__FromFS(FastString* Fs, PicoMessage* Rz) {
	Rz->Length = Fs->Length;
	Rz->Data = ((int8*)Fs->ResultPtr);
}


float JB_Rnd_Float(Random* Self) {
	uint I = ((uint)JB_Rnd_RndInt(Self));
	uint C[1] = {
	};
	float* F = ((float*)((&C[0])));
	C[0] = ((I >> 9) | (((1 << 7) - 1) << 23));
	return F[0] - 1.0f;
}

Float64 JB_Rnd_Float64(Random* Self) {
	uint64 I = ((uint64)JB_Rnd_RndInt(Self));
	uint64 C[1] = {
	};
	double* F = ((double*)((&C[0])));
	C[0] = ((I >> 12) | 4607182418800017408);
	return F[0] - 1.0f;
}

int64 JB_Rnd_RndInt(Random* Self) {
	int64 Rz = 0;
	uint64 S = (++Self->State);
	Rz = JB_uint64_hash((Self->Store + S));
	Self->Store = Rz;
	return Rz;
}

void JB_Rnd_LoadProperties(Random* Self, ObjectLoader* Loader) {
	//visible;
	Self->Store = ((uint64)JB_LD_Int(Loader));
	Self->State = ((uint64)JB_LD_Int(Loader));
}

void JB_Rnd_SaveWrite(Random* Self, ObjectSaver* Saver) {
	//visible;
	JB_Saver_AppendInt(Saver, Self->Store);
	JB_Saver_AppendInt(Saver, Self->State);
}

void JB_Rnd_SeedSet(Random* Self, uint64 Value) {
	Self->Store = Value;
	Self->State = 1;
}

Float64 JB_Rnd_SyntaxAccess(Random* Self) {
	return JB_Rnd_Float64(Self);
}

void JB_Rnd_TimeSeed(Random* Self) {
	(JB_Rnd_SeedSet(Self, JB_Date__Now()));
}

int JB_Rnd__Init_() {
	{
		JB__Rnd_Shared = ((Random){});
	}
	;
	return 0;
}

int JB_Rnd__InitCode_() {
	{
	}
	;
	JB_Rnd_TimeSeed((&JB__Rnd_Shared));
	return 0;
}



void SC_Hoi_Got(SC_Hoister* Self, ASMReg Dest, SCDecl* Decl, ASMReg K) {
	Decl->FatConstIndex = SC_Reg_FatIndex(K);
	Decl->NilReg = (SC_Reg_Reg(Dest) | kSC__NilReg_Hoisted);
	Self->Items[Self->Count++] = Decl;
	(--Self->Spare);
}

void SC_Hoi_GotGlobal(SC_Hoister* Self, Message* Prop, SCDecl* Decl) {
	ASMReg Dest = SC_Pac_DeclareMe((&SC__Pac_Sh), Prop, Decl);
	ASMReg Addr = SC_ASMType__GlobAddr(Decl, Prop, Dest);
	SC_Hoi_Got(Self, Dest, Decl, Addr);
}

void SC_Hoi_Hoist(SC_Hoister* Self, Message* Exp, int Score) {
	Syntax Fn = Exp->Func;
	if (Fn == kJB_SyxType) {
		Exp = ((Message*)JB_Ring_First(Exp));
		Fn = Exp->Func;
	}
	if (Fn == kJB_SyxFunc) {
		Exp = ((Message*)JB_Tree_Second(Exp));
		Fn = Exp->Func;
	}
	if (((Fn == kJB_SyxDot) or ((Fn == kJB_SyxThg) or (Fn == kJB_SyxNum))) and (Self->Spare > 0)) {
		SCDecl* Prop = SC_Msg_ASMDecl(Exp);
		if (Score >= 0) {
			SC_Hoi_TryHoist(Self, Exp, Score, Prop);
		}
		if (SC_Decl_SyntaxIs(Prop, kSC__SCDeclInfo_Const) or SC_Decl_SyntaxIs(Prop, kSC__SCDeclInfo_Global)) {
			return;
		}
	}
	{
		Message* Ch = ((Message*)JB_Ring_First(Exp));
		while (Ch) {
			int Add = 0;
			if (Ch->Func == kJB_SyxTmp) {
				uint Ty = SC_Msg_ASMType(Ch);
				Add = (Add + ((SC_ASMType_SyntaxIs(Ty, kSC__ASMType_kWhile)) * kSC__Hoi_MinHoistScore));
				Add = (Add - (SC_ASMType_SyntaxIs(Ty, kSC__ASMType_kIf)));
			}
			SC_Hoi_Hoist(Self, Ch, Add + Score);
			Ch = ((Message*)JB_Ring_NextSib(Ch));
		};
		;
	};
}

void SC_Hoi_HoistLoop(SC_Hoister* Self, Message* Exp) {
	Self->Spare = 2;
	SC_Hoi_Hoist(Self, Exp, 1 << 20);
}

void SC_Hoi_HoistNormal(SC_Hoister* Self, Message* Exp) {
	Self->Spare = (6);
	SC_Hoi_Hoist(Self, Exp, 0);
}

void SC_Hoi_ReuseConst(SC_Hoister* Self, Message* Prop, SCDecl* Decl) {
	uint64 K = Decl->ExportPosition;
	{
		uint _LoopSrcf1 = Self->Count;
		int I = 0;
		while (I < _LoopSrcf1) {
			SCDecl* Old = Self->Items[I];
			if (Old->ExportPosition == K) {
				(++SC_Decl_Fat(Old)->xC2xB5RefCount);
				Decl->FatConstIndex = Old->FatConstIndex;
				Decl->NilReg = Old->NilReg;
				return;
			}
		};
	}
	;
	SC_Hoi_WriteConst(Self, Prop, Decl);
}

void SC_Hoi_TryHoist(SC_Hoister* Self, Message* Exp, int Score, SCDecl* Prop) {
	if (!SC_NilReg_SyntaxIs(Prop->NilReg, kSC__NilReg_Hoisted)) {
		if (SC_Decl_SyntaxIs(Prop, kSC__SCDeclInfo_Const)) {
			if ((Score >= (1 << 20)) and Prop->ExportPosition) {
				SC_Hoi_ReuseConst(Self, Exp, Prop);
			}
		}
		 else if (SC_Decl_SyntaxIs(Prop, kSC__SCDeclInfo_Global)) {
			SC_Hoi_GotGlobal(Self, Exp, Prop);
		}
	}
	 else {
		FatASM* Fat = SC_Decl_Fat(Prop);
		if (Fat) {
			(++Fat->xC2xB5RefCount);
		}
	}
}

void SC_Hoi_WriteConst(SC_Hoister* Self, Message* Prop, SCDecl* Decl) {
	ASMReg Dest = SC_Pac_DeclareMe((&SC__Pac_Sh), Prop, Decl);
	ASMReg K = SC_Pac_NumToReg((&SC__Pac_Sh), Prop, Decl->ExportPosition, Dest, SC_Reg_xC2xB5Type(Dest));
	SC_Hoi_Got(Self, Dest, Decl, K);
}





void JB_StructSaveTest_Destructor(StructSaveTest* Self) {
	JB_Clear(Self->Sav);
	JB_Clear(Self->Str);
}

void JB_StructSaveTest_LoadProperties(StructSaveTest* Self, ObjectLoader* Loader) {
	//visible;
	JB_SetRef(Self->Sav, ((Saveable*)JB_LD_Object(Loader)));
	Self->Intt = ((int64)JB_LD_Int(Loader));
	JB_SetRef(Self->Str, ((JB_String*)JB_LD_String(Loader)));
}

void JB_StructSaveTest_SaveWrite(StructSaveTest* Self, ObjectSaver* Saver) {
	//visible;
	JB_Saver_AppendObject(Saver, Self->Sav);
	JB_Saver_AppendInt(Saver, Self->Intt);
	JB_Saver_AppendString(Saver, Self->Str);
}



ASMReg SC_Pac__Num(ASMState* Self, Message* Exp, int64 V, ASMReg Reg) {
	return SC_Pac_NumToFat(Self, Exp, V, Reg)->Info;
}

void SC_Pac_AddFuncParams(ASMState* Self, SCFunction* Fn) {
	{
		Array* _LoopSrcf2 = Fn->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* A = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (A == nil) {
				break;
			}
			(SC_Decl_SyntaxIsSet(A, kSC__SCDeclInfo_Param, true));
			SC_Pac_DeclareMe(Self, A->Source, A);
			(++_if0);
		};
	};
}

void SC_Pac_AddLabel(ASMState* Self, Message* Ch) {
	Dictionary* D = ({
		Dictionary* _X = SC__TextAssembler_Labels;
		if (!_X) {
			_X = JB_Dict_Constructor(nil);
			JB_SetRef(SC__TextAssembler_Labels, _X);
		}
		 _X;
	});
	(JB_Dict_ValueLowerSet(D, Ch->Name, JB_Wrap_ConstructorInt(nil, SC_FAT_Index(SC_Pac_Curr(Self)))));
}

ASMReg SC_Pac_AddToReg(ASMState* Self, Message* Exp, ASMReg Dest, ASMReg Orig, int64 Amount) {
	if ((!Dest) or (Dest == SC_Reg__New())) {
		Dest = SC_Reg_xC2xB5TypeSet(Dest, SC_Reg_xC2xB5Type(Orig));
	}
	Dest = SC_Pac_TempOnly(Self, Exp, Dest);
	ASMReg Where = SC_Reg_OperatorxE2x80xA2(Orig, Dest);
	Where = SC_Reg_SyntaxIsSet(Where, kSC__Reg_RealConst, true);
	ASMReg K = SC_Pac_NumToReg(Self, Exp, Amount, Where, SC_Reg_xC2xB5Type(Orig));
	return SC_Pac_Plus(Self, Dest, Orig, K, Exp);
}

void SC_Pac_AllJumpTo(ASMState* Self, FatRange* Range, FatASM* Curr) {
	{
		FatASM* S = Range->After;
		while (S > Range->Start) {
			(--S);
			if ((SC_FAT_SyntaxIs(S, kSC__Reg_CondAnswer)) and (!(SC_FAT_OperatorIsa(S, kSC__ASM_KNST)))) {
				SC_Pac_JumpFix(Self, S, Curr);
			}
		};
	};
}

ASMReg SC_Pac_AskForInline(ASMState* Self, Message* Prms, ASMReg Dest, SCFunction* Fn) {
	if (Self->State.InlineDepth >= Self->InlineLimit) {
		return nil;
	}
	if (!(Fn->xC2xB5Length and (!SC_Func_HasCVersion(Fn)))) {
		return nil;
	}
	int AllowedGain = 5 + ((SC_Func_SyntaxIs(Fn, kSC__FunctionType_Inline)) * 23);
	int Grace = 9;
	{
		Message* P = ((Message*)JB_Ring_First(Prms));
		while (P) {
			Grace = (Grace + (SC_Pac_IsASMConst(Self, P) << 2));
			P = ((Message*)JB_Ring_NextSib(P));
		};
		;
	}
	;
	if ((AllowedGain + Grace) <= Fn->xC2xB5Length) {
		return nil;
	}
	if (!Self->State.InlineDepth) {
		Self->InlineLimit = 8;
		Self->DeepestInline = 0;
	}
	ASMReg I = SC_Pac_TryInline(Self, Prms, Dest, Fn, AllowedGain);
	if (I) {
		return I;
	}
	if ((!Self->State.InlineDepth) and (Self->DeepestInline > 1)) {
		JB_DoAt(1);
		Self->InlineLimit = 1;
		I = SC_Pac_TryInline(Self, Prms, Dest, Fn, AllowedGain);
		if (I) {
			return I;
		}
	}
	return ((ASMReg)0);
}

void SC_Pac_AskNop(ASMState* Self, FatASM* F) {
	if (F->xC2xB5RefCount <= 0) {
		SC_Pac_Nop(Self, F, 0);
	}
}

ASMReg SC_Pac_ASMBoolBadnessMadness(ASMState* Self, Message* Exp, ASMReg Dest, OpMode Opp) {
	Dest = SC_Reg_xC2xB5TypeSet(Dest, kJB__TC_bool);
	Message* A = ((Message*)JB_Ring_First(Exp));
	Message* B = ((Message*)JB_Ring_Last(Exp));
	ASMReg Ml = SC_Pac_ExistingVar(Self, A, kSC__VarUseMode_Sometimes);
	ASMReg Mr = SC_Pac_ExistingVar(Self, B, kSC__VarUseMode_Sometimes);
	if (Ml and (SC_Reg_Reg(Ml) == SC_Reg_Reg(Mr))) {
		return SC_Pac_ASMBoolShrink(Self, Exp, Dest, Ml);
	}
	if (((!SC_Reg_SyntaxIs(Dest, kSC__Reg_CondRequest))) and (SC_Reg_IsBoolV(Ml) and SC_Reg_IsBoolV(Mr))) {
		return SC_Pac_BoolFromBools(Self, Exp, Dest, Opp, Ml, Mr);
	}
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate)) {
		(Opp = (Opp ^ kSC__OpMode_AndOr));
	}
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_CondRequest)) {
		if (SC_OpMode_SyntaxIs(Opp, kSC__OpMode_OR)) {
			return SC_Pac_BranchOr(Self, A, B, Dest);
		}
		return SC_Pac_BranchAnd(Self, A, B, Dest);
	}
	return SC_Pac_BoolValue(Self, A, Dest, Opp, B);
}

ASMReg SC_Pac_ASMBoolShrink(ASMState* Self, Message* Exp, ASMReg Dest, ASMReg BothSame) {
	if (SC_Reg_IsBool(BothSame) and ((!SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate)))) {
		if (SC_Reg_SyntaxIs(Dest, kSC__Reg_CondRequest)) {
			return SC_Reg_BoolAnswer(BothSame);
		}
		return BothSame;
	}
	return SC_Pac_Exists(Self, Dest, BothSame, Exp);
}

ASMReg SC_Pac_ASMLocal(ASMState* Self, Message* S, VarUseMode Mode) {
	ASMReg Rz = ((ASMReg)0);
	SCDecl* D = SC_Msg_ASMDecl(S);
	if (SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Local)) {
		if (SC_VarUseMode_SyntaxIs(Mode, kSC__VarUseMode_Return)) {
			SC_Func_TrackReturns(SC_Pac_fn(Self), D);
		}
		Rz = SC_Pac_ThgASM(Self, D);
	}
	return Rz;
}

ASMReg SC_Pac_Assign(ASMState* Self, ASMReg Dest, ASMReg Src, Message* Exp) {
	int Sr = SC_Reg_Reg(Src);
	int Dr = SC_Reg_Reg(Dest);
	if (!Dr) {
	}
	if (Sr == Dr) {
		return Dest;
	}
	if (!Sr) {
		return SC_Pac__Num(Self, Exp, 0, Dest);
	}
	if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_Temp)) {
		FatASM* Improve = SC_Pac_CanImproveAssign(Self, Dest, Src);
		if (Improve) {
			if (SC_FAT_ResetOutput(Improve, Dr)) {
				return Dest;
			}
		}
	}
	Dest = SC_Reg_CopyConst(Dest, Src);
	return SC_Pac_BitOr(Self, SC_Reg_OperatorAs(Dest, kSC__Reg_Textual), Src, SC_Reg__New(), Exp);
}

void SC_Pac_BackCond(ASMState* Self, FatASM* Start) {
	FatASM* L = SC_Pac_LastWith0(Self);
	if (L >= Start) {
		SC_Pac_Nop(Self, L, 0);
		if (((--L) >= Start) and SC_FAT_SyntaxIs(L, kSC__Reg_RealConst)) {
			SC_Pac_Nop(Self, L, 0);
		}
	}
}

ASMReg SC_Pac_BFLG_Const(ASMState* Self, Message* Exp, ASMReg Dest, ASMReg Src, uint Up, uint Down) {
	uint Srcbits = SC_Reg_BitCount(Src);
	if ((Up > Srcbits) or (Down > Srcbits)) {
		(JB_Msg_SyntaxProblem(Exp, JB_LUB[1580]));
	}
	if ((!Up) and (!Down)) {
		return SC_Pac_Assign(Self, Dest, Src, Exp);
	}
	int64 Extra = 64 - Srcbits;
	Up = (Up + Extra);
	Down = (Down + Extra);
	if ((!SC_Reg_Reg(Src)) or ((Up >= 64) or ((!SC_Reg_Signed(Src)) and (Down >= 64)))) {
		return SC_Pac_Zeros(Self, Dest);
	}
	return SC_FAT_AsReg(SC_Msg_BFLG(Exp, Dest, Src, Up, Down, ((int)SC_Reg_Signed(Src))), Dest);
}

ASMReg SC_Pac_BitAnd(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) {
		return SC_Pac_MakeConst2(Self, Dest, L, R, Exp, ((fn_ASMConstifier)(SC_ConstifyBitAnd)));
	}
	int Ll = SC_Reg_Reg(L);
	int Rr = SC_Reg_Reg(R);
	if (Ll == Rr) {
		return L;
	}
	if ((!Ll) or (!Rr)) {
		return SC_Pac_Zeros(Self, Dest);
	}
	if (SC_Pac_NopMinusOne(Self, L)) {
		return R;
	}
	if (SC_Pac_NopMinusOne(Self, R)) {
		return L;
	}
	return SC_Pac_BitMaker2(Self, Dest, L, R, Exp, kSC__ASM_BAND);
}

ASMReg SC_Pac_BitMaker(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp, ASM Op) {
	Ind K = SC_Pac_Const(Self, R, 9, Op != kSC__ASM_BOR);
	if (JB_Ind_SyntaxCast(K)) {
		R = SC_Reg__New();
	}
	 else {
		K = 0;
	}
	FatASM* Fat = SC_Msg_BAND(Exp, Dest, L, R, K);
	Fat->_Op = Op;
	return SC_FAT_AsReg(Fat, Dest);
}

ASMReg SC_Pac_BitMaker2(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp, ASM Op) {
	if (SC_Reg_SyntaxIs(L, kSC__Reg_ConstOutput)) {
		JB_Swap((L), (R));
	}
	return SC_Pac_BitMaker(Self, Dest, L, R, Exp, Op);
}

ASMReg SC_Pac_BitNot(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (SC_Reg_Reg(R)) {
	}
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) {
		return SC_Pac_MakeConst2(Self, Dest, L, SC_Reg__New(), Exp, ((fn_ASMConstifier)(SC_ConstifyBitNot)));
	}
	return SC_Pac_BitMaker(Self, Dest, L, SC_Reg__New(), Exp, kSC__ASM_BNOT);
}

ASMReg SC_Pac_BitOr(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (!SC_Reg_Reg(Dest)) {
	}
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) {
		return SC_Pac_MakeConst2(Self, Dest, L, R, Exp, ((fn_ASMConstifier)(SC_ConstifyBitOr)));
	}
	int Ll = SC_Reg_Reg(L);
	int Rr = SC_Reg_Reg(R);
	if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_Textual)) {
		if (Ll == Rr) {
			return L;
		}
		if (SC_Reg_SyntaxIs(L, kSC__Reg_ConstOutput)) {
			if (!SC_Reg_Reg(L)) {
				return R;
			}
			if (SC_Reg_IsConst(L, -1)) {
				return L;
			}
		}
		if (SC_Reg_SyntaxIs(R, kSC__Reg_ConstOutput)) {
			if (!SC_Reg_Reg(R)) {
				return L;
			}
			if (SC_Reg_IsConst(R, -1)) {
				return R;
			}
		}
	}
	return SC_Pac_BitMaker2(Self, Dest, L, R, Exp, kSC__ASM_BOR);
}

ASMReg SC_Pac_BitXor(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) {
		return SC_Pac_MakeConst2(Self, Dest, L, R, Exp, ((fn_ASMConstifier)(SC_ConstifyBitXor)));
	}
	if (SC_Reg_Reg(L) == SC_Reg_Reg(R)) {
		return SC_Pac_Zeros(Self, Dest);
	}
	if (!SC_Reg_Reg(L)) {
		return R;
	}
	if (!SC_Reg_Reg(R)) {
		return L;
	}
	return SC_Pac_BitMaker2(Self, Dest, L, R, Exp, kSC__ASM_BXOR);
}

ASMReg SC_Pac_BoolConst1(ASMState* Self, Message* B, ASMReg Dest, OpMode Opp, ASMReg Ml) {
	bool V = (SC_Reg_Const(Ml) != 0) != (SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate));
	bool Expect = SC_OpMode_SyntaxIs(Opp, kSC__OpMode_OR);
	if (V == Expect) {
		Ml = SC_Reg_xC2xB5TypeSet(Ml, kJB__TC_bool);
		return SC_Pac_SetConst(Self, B, ((int)V), Ml, Dest);
	}
	SC_Pac_NopReg(Self, Ml);
	ASMReg Mr = SC_Pac_xC2xB5(Self, B, Dest);
	if (SC_Reg_SyntaxIs(Mr, kSC__Reg_ConstOutput)) {
		Mr = SC_Reg_xC2xB5TypeSet(Mr, kJB__TC_bool);
		V = ((SC_Reg_Const(Mr) != 0) != (SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate)));
		return SC_Pac_SetConst(Self, B, ((int)V), Mr, Dest);
	}
	if (SC_Reg_IsBool(Mr)) {
		return Mr;
	}
	return SC_Pac_Exists(Self, Dest, Mr, B);
}

ASMReg SC_Pac_BoolConst2(ASMState* Self, ASMReg Mr, ASMReg Dest, OpMode Opp, Message* Exp, ASMReg Ml) {
	bool V = SC_Reg_Const(Mr) != 0;
	if (V == (SC_OpMode_SyntaxIs(Opp, kSC__OpMode_AND))) {
		SC_Pac_NopReg(Self, Mr);
		Ml = SC_Reg_xC2xB5TypeSet(Ml, kJB__TC_bool);
		return Ml;
	}
	if (SC_Reg_SyntaxIs(Ml, kSC__Reg_FromExistingVar)) {
		SC_Pac_NopReg(Self, Ml);
	}
	Mr = SC_Reg_xC2xB5TypeSet(Mr, kJB__TC_bool);
	return SC_Pac_SetConst(Self, Exp, ((int)V), Mr, Dest);
}

ASMReg SC_Pac_BoolFromBools(ASMState* Self, Message* Exp, ASMReg Dest, OpMode Opp, ASMReg Ml, ASMReg Mr) {
	ASMReg Rz = ((ASMReg)0);
	Dest = SC_Pac_TempTypedWithMsgReg(Self, Exp, Dest);
	if (SC_OpMode_SyntaxIs(Opp, kSC__OpMode_OR)) {
		Rz = SC_Pac_BitOr(Self, Dest, Ml, Mr, Exp);
	}
	 else {
		Rz = SC_Pac_BitAnd(Self, Dest, Ml, Mr, Exp);
	}
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate)) {
		Rz = SC_Pac_BitNot(Self, Rz, Dest, SC_Reg__New(), Exp);
		Rz = SC_Reg_SyntaxIsSet(Rz, kSC__Reg_AlreadyNegated, true);
	}
	return Rz;
}

ASMReg SC_Pac_BoolMul(ASMState* Self, ASMReg Dest, ASMReg Bule, ASMReg V, Message* Exp) {
	ASMReg Rz = ((ASMReg)0);
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) {
		return SC_Pac_MakeConst2(Self, Dest, Bule, V, Exp, ((fn_ASMConstifier)(SC_ConstifyBoolMul)));
	}
	Rz = SC_Pac_QuickIntMul(Self, Dest, Bule, V, Exp);
	if (!Rz) {
		JB_DoAt(1);
		Rz = SC_FAT_AsReg(SC_Msg_TERN(Exp, Dest, Bule, V, SC_Reg__New()), Dest);
	}
	return Rz;
}

FatASM* SC_Pac_BoolTestAndJump(ASMState* Self, Message* Exp, ASMReg Req, OpMode Opp) {
	ASMReg Mode = SC_Reg_Negate(kSC__Reg_CondRequest, SC_OpMode_SyntaxIs(Opp, kSC__OpMode_OR));
	return SC_Reg_FAT(SC_Pac_Exists(Self, Mode, Req, Exp));
}

ASMReg SC_Pac_BoolValue(ASMState* Self, Message* A, ASMReg Dest, OpMode Opp, Message* B) {
	Dest = SC_Pac_UniqueLocation(Self, A, Dest, B);
	ASMReg First = SC_Pac_xC2xB5BoolInto(Self, A, Dest);
	if (SC_Reg_SyntaxIs(First, kSC__Reg_ConstOutput)) {
		return SC_Reg_BoolAnswer(SC_Pac_BoolConst1(Self, B, Dest, Opp, First));
	}
	FatASM* JUMP = SC_Pac_BoolTestAndJump(Self, ((Message*)JB_Ring_NextSib(A)), Dest, Opp);
	ASMReg Second = SC_Pac_xC2xB5BoolInto(Self, B, Dest);
	if (SC_Reg_SyntaxIs(Second, kSC__Reg_ConstOutput)) {
		SC_Pac_Nop(Self, JUMP, 0);
		return SC_Reg_BoolAnswer(SC_Pac_BoolConst2(Self, Second, Dest, Opp, B, First));
	}
	SC_FAT_JumpToSet(JUMP, SC_Pac_Curr(Self), Self);
	if (SC_Reg_IsBool(First) and SC_Reg_IsBool(Second)) {
		return SC_Reg_BoolAnswer(Dest);
	}
	return SC_Pac_Exists(Self, Dest, Dest, ((Message*)JB_Ring_NextSib(A)));
}

ASMReg SC_Pac_Branch(ASMState* Self, Message* Cond, FatRange* Range, bool Neg) {
	ASMReg Rz = ((ASMReg)0);
	Range->Start = SC_Pac_Curr(Self);
	ASMReg Mode = SC_Reg_Negate(kSC__Reg_CondRequest, Neg);
	Rz = SC_Pac_xC2xB5(Self, Cond, Mode);
	if (!SC_Reg_SyntaxIs(Rz, kSC__Reg_CondAnswer)) {
		Rz = SC_Pac_Exists(Self, Mode, Rz, Cond);
	}
	if (SC_Reg_SyntaxIs(Rz, kSC__Reg_ConstOutput)) {
		Range->Constness = ((MaybeBool)(SC_Reg_Const(Rz) != 0));
		if (SC_Reg_SyntaxIs(Rz, kSC__Reg_RealConst)) {
			SC_Pac_BackCond(Self, Range->Start);
		}
	}
	 else {
		Range->Constness = JB_MaybeBool__Default(false);
	}
	Range->After = SC_Pac_Curr(Self);
	return Rz;
}

ASMReg SC_Pac_BranchAnd(ASMState* Self, Message* A, Message* B, ASMReg Dest) {
	FatRange AndTest = ((FatRange){});
	ASMReg First = SC_Pac_Branch(Self, A, (&AndTest), SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate));
	if (SC_FatRange_Never((&AndTest))) {
		return First;
	}
	ASMReg Second = SC_Pac_Branch(Self, B, (&AndTest), SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate));
	if (!SC_Reg_SyntaxIs(First, kSC__Reg_RealConst)) {
		return First;
	}
	return Second;
}

ASMReg SC_Pac_BranchOr(ASMState* Self, Message* A, Message* B, ASMReg Dest) {
	FatRange OrTest = ((FatRange){});
	ASMReg First = SC_Pac_Branch(Self, A, (&OrTest), (!SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate)));
	MaybeBool KF = JB_MaybeBool_Negate(OrTest.Constness);
	if (JB_MaybeBool_KnownTrue(KF)) {
		FatASM* Fake = SC_Msg_NOOP(A);
		(SC_FAT_ConstSet(Fake, ((int)KF)));
		First = SC_Reg_SyntaxIsSet(First, kSC__Reg_CondAnswer, true);
		return SC_FAT_AsReg(Fake, SC_Reg_BoolAnswer(First));
	}
	FatRange Br2 = ((FatRange){});
	ASMReg Second = SC_Pac_Branch(Self, B, (&Br2), SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate));
	SC_Pac_AllJumpTo(Self, (&OrTest), nil);
	if (SC_FatRange_Always((&Br2))) {
		return Second;
	}
	if (JB_MaybeBool_KnownFalse(KF)) {
		return Second;
	}
	return First;
}

ASMReg SC_Pac_CallFunc(ASMState* Self, Message* Exp, ASMReg Dest, SCFunction* Fn) {
	int V = SC_Pac_VDeclsExit(Self, Dest);
	V = (V + (SC_Reg_Reg(Dest) != V));
	Self->VDecls = V;
	if (V >= 32) {
		JB_Msg_Fail(Exp, JB_LUB[933]);
	}
	Dest = SC_Reg_RegSet(Dest, V);
	Dest = SC_Reg_xC2xB5TypeSet(Dest, SC_Func_RegType(Fn));
	return SC_Reg_ReallySimplify(Dest);
}

bool SC_Pac_CanReuseParam(ASMState* Self, Message* Prms, SCDecl* A, int Vr) {
	bool Rz = false;
	if (!SC_Decl_SyntaxIs(A, kSC__SCDeclInfo_Altered)) {
		return true;
	}
	if (SC_Reg_Reg(Self->State.Return) != Vr) {
		return nil;
	}
	{
		Message* P = ((Message*)JB_Ring_First(Prms));
		while (P) {
			if (SC_Reg_Reg(SC_Pac_ExistingVar(Self, P, 0)) == Vr) {
				if (Rz) {
					return nil;
				}
				Rz = true;
			}
			P = ((Message*)JB_Ring_NextSib(P));
		};
		;
	}
	;
	return Rz;
}

void SC_Pac_CloseVars(ASMState* Self, uint V) {
	uint Top = Self->VDecls;
	int D = (V >> 8) & 255;
	while (Top > D) {
		Self->Vars[Top] = nil;
		(--Top);
	};
	Self->VDecls = D;
	Self->VTmps = (V & 255);
}

ASMReg SC_Pac_Compare(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp, int Mode) {
	if (SC_Reg_IsInt(Dest)) {
		return SC_Pac_CompareInt(Self, Dest, L, R, Exp, Mode);
	}
	return SC_Pac_CompareFloat(Self, Dest, L, R, Exp, Mode);
}

ASMReg SC_Pac_CompareFloat(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp, int Mode) {
	Mode = (Mode | (SC_Reg_IsBig(R) << 2));
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate)) {
	}
	Mode = (Mode ^ (SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate)));
	Dest = SC_Reg_BoolAnswer(Dest);
	if (SC_Reg_SyntaxIs(L, kSC__Reg_ConstOutput) and SC_Reg_SyntaxIs(R, kSC__Reg_ConstOutput)) {
		return SC_Pac_ConstCompareFloat(Self, Dest, L, R, Exp, Mode);
	}
	if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_CondAnswer)) {
		return SC_FAT_AsReg(SC_Msg_CMPF(Exp, Dest, L, SC_Reg_ToInt(R), Mode), Dest);
	}
	return SC_FAT_AsReg(SC_Msg_JMPF(Exp, L, R, Mode, 0), Dest);
}

ASMReg SC_Pac_CompareInt(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp, int Mode) {
	Mode = (Mode | ((!SC_Reg_Signed(R)) << 2));
	Mode = (Mode ^ (SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate)));
	//do this AFTER? We lose CondAnswer otherwise;
	Dest = SC_Reg_BoolAnswer(Dest);
	if (SC_Reg_SyntaxIs(L, kSC__Reg_ConstOutput) and SC_Reg_SyntaxIs(R, kSC__Reg_ConstOutput)) {
		return SC_Pac_ConstCompareInt(Self, Dest, L, R, Exp, Mode);
	}
	if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_CondAnswer)) {
		return SC_FAT_AsReg(SC_Msg_CMPI(Exp, Dest, L, SC_Reg_ToInt(R), Mode), Dest);
	}
	if (((Mode <= 1) or ((SC_Reg_BitCount(L) >= 32) and (SC_Reg_BitCount(R) >= 32))) and (SC_Reg_SyntaxIs(L, kSC__Reg_RealConst) or SC_Reg_SyntaxIs(R, kSC__Reg_RealConst))) {
		ASMReg Kk = SC_Pac_KompareIntK(Self, Dest, L, R, Exp, Mode & (~4));
		if (Kk) {
			return Kk;
		}
	}
	return SC_FAT_AsReg(SC_Msg_JMPI(Exp, L, R, Mode, 0), Dest);
}

Ind SC_Pac_Const(ASMState* Self, ASMReg R, int Bits, bool Signed) {
	if (SC_Reg_SyntaxIs(R, kSC__Reg_ConstOutput)) {
		int64 K = SC_Reg_Const(R);
		if (SC_int64_Fits(K, Bits, Signed)) {
			SC_Pac_NopConst(Self, R);
			return JB_uint64_Trim(((uint64)K), Bits);
		}
	}
	return -1;
}

ASMReg SC_Pac_ConstCompareFloat(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp, int Mode) {
	SC_Pac_Nop2Consts(Self, R, L);
	bool Result = SC_Pac_ConstCompareFloatSub(Self, L, R, Mode);
	return SC_Pac_NumToReg(Self, Exp, ((int)Result), SC_Reg_BoolAnswer(Dest), kJB__TC_bool);
}

ASMReg SC_Pac_ConstCompareInt(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp, int Mode) {
	SC_Pac_Nop2Consts(Self, R, L);
	bool Result = SC_Pac_ConstCompareIntSub(Self, L, R, Mode);
	return SC_Pac_NumToReg(Self, Exp, ((int)Result), SC_Reg_BoolAnswer(Dest), kJB__TC_bool);
}

ASMReg SC_Pac_Continue(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	FatASM* J = SC_Msg_Jump(Exp);
	J->_Op = kSC__Pac_kContinue;
	return ((ASMReg)0);
}

FatASM* SC_Pac_Curr(ASMState* Self) {
	return Self->_Curr;
}

int SC_Pac_CurrGain(ASMState* Self, FatASM* Start) {
	int Rz = 0;
	FatASM* C = SC_Pac_Curr(Self);
	while (Start < C) {
		Rz = (Rz + SC_FAT_Exists(Start));
		(++Start);
	};
	return Rz;
}

ASMReg SC_Pac_DeclareMe(ASMState* Self, Message* Where, SCDecl* Type) {
	ASMReg T = SC_Decl_CalculateASMType(Type);
	if (Self->State.Return and ((SC_Decl_SyntaxIs(Type, kSC__SCDeclInfo_ReturnedVar)) and (Self->State.Fn->ReturnedVars == 1))) {
		T = Self->State.Return;
		(SC_Decl_WholeTypeSet(Type, ((DataTypeCode)T)));
		return T;
	}
	int D = ((int)Self->VDecls) + 1;
	T = SC_Reg_RegSet(T, D);
	(SC_Decl_WholeTypeSet(Type, ((DataTypeCode)T)));
	if (D < Self->VTmps) {
		Self->Vars[D] = Type;
		Self->VDecls = D;
		return T;
	}
	if (true) {
		SC_Pac_Fail(Self, Where, JB_LUB[934]);
	}
	return ((ASMReg)0);
}

void SC_Pac_DecrWithFatInt(ASMState* Self, FatASM* F, int Depth) {
	if (Depth > 5) {
	}
	if (F and ((--F->xC2xB5RefCount) <= 0)) {
		SC_Pac_Nop(Self, F, Depth + 1);
	}
}

ASMReg SC_Pac_DecrWith0(ASMState* Self) {
	ASMReg Rz = ((ASMReg)0);
	FatASM* Fat = SC_Pac_LastWithAsm(Self, kSC__ASM_RFST);
	if (Fat) {
		uint Upon = Fat->R[0];
		if (Upon) {
			if ((!Fat->R[1]) and (!Fat->R[2])) {
				SC_Pac_Nop(Self, Fat, 0);
				Rz = SC_Reg_RegSet(Rz, Upon);
			}
		}
	}
	return Rz;
}

void SC_Pac_Destructor(ASMState* Self) {
	JB_Clear(Self->Out);
	JB_Clear(Self->JSM);
}

ASMReg SC_Pac_DivFloat(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	ASMReg Rz = ((ASMReg)0);
	if ((SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) and ((!SC_Reg_SyntaxIs(L, kSC__Reg_Alternate)))) {
		return SC_Pac_MakeConst2(Self, Dest, L, R, Exp, ((fn_ASMConstifier)(SC_ConstifyFloatDiv)));
	}
	Rz = SC_Pac_QuickFloatDiv(Self, Dest, L, R, Exp);
	if (Rz == nil) {
		Rz = SC_FAT_AsReg(SC_Msg_FDIV(Exp, Dest, L, R, SC_Reg__New(), ((int)SC_Reg_IsBig(Dest))), Dest);
	}
	return Rz;
}

ASMReg SC_Pac_Divide(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (SC_Reg_Reg(R) == SC_Reg_Reg(L)) {
		return SC_Pac_SelfDivide(Self, Dest, Exp);
	}
	if (SC_Reg_IsInt(Dest)) {
		return SC_Pac_DivInt(Self, Dest, L, R, Exp);
	}
	return SC_Pac_DivFloat(Self, Dest, L, R, Exp);
}

ASMReg SC_Pac_DivInt(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) {
		return SC_Pac_MakeConst2(Self, Dest, L, R, Exp, ((fn_ASMConstifier)(SC_ConstifyIntDiv)));
	}
	ASMReg Q = SC_Pac_QuickIntDiv(Self, Dest, L, R, Exp);
	if (Q) {
		return Q;
	}
	return SC_FAT_AsReg(SC_Msg_DIVV(Exp, Dest, SC_Reg__New(), L, R, SC_Reg_IntDivType(Dest)), Dest);
}

ASMReg SC_Pac_DoMathSub(ASMState* Self, Message* Exp, ASMReg Dest, fn_OpASM Fn) {
	ASMReg Rz = ((ASMReg)0);
	ASMReg Ml = SC_Reg__New();
	ASMReg Mr = SC_Reg__New();
	Message* First = ((Message*)JB_Ring_First(Exp));
	if (JB_Tree_IsLast(First)) {
		Ml = SC_Pac_GetASM(Self, First, Dest);
	}
	 else {
		uint Closer = SC_Pac_OpenVars(Self);
		ASMReg Discardmode = SC_Reg_OperatorBitand(Dest, kSC__Reg_Discard);
		ASMReg Mode = SC_Reg_OperatorWith(Discardmode, Dest);
		Ml = SC_Pac_GetASM(Self, First, Mode);
		Mode = SC_Reg_with(Discardmode, Dest, Ml);
		Mr = SC_Pac_xC2xB5(Self, ((Message*)JB_Ring_Last(Exp)), Mode);
		SC_Pac_CloseVars(Self, Closer);
	}
	Dest = SC_Pac_TempTypedWithMsgReg(Self, Exp, Dest);
	Dest = (SC_Reg_SyntaxIsSet(Dest, kSC__Reg_ConstOutput, (SC_Reg_SyntaxIs(SC_Reg_OperatorBitand(Ml, Mr), kSC__Reg_ConstOutput))));
	Message* Op = ((Message*)JB_Tree_Second(Exp));
	if (!Op) {
		Op = Exp;
	}
	Rz = (Fn)(Self, Dest, Ml, Mr, Op);
	Rz = SC_Reg_ConstInputFromMath(Rz, Ml, Mr);
	Rz = SC_Reg_xC2xB5TypeSet(Rz, SC_Reg_xC2xB5Type(Dest));
	return Rz;
}

ASMReg SC_Pac_Else(ASMState* Self, Message* Other) {
	ASMReg Rz = ((ASMReg)0);
	Rz = SC_Pac_ElseSub(Self, Other);
	(++Self->BasicBlock);
	return Rz;
}

ASMReg SC_Pac_ElseSub(ASMState* Self, Message* Other) {
	if (!Other) {
		return SC_Reg__New();
	}
	uint T = SC_Msg_ASMType(Other);
	if (T == kSC__ASMType_kIf) {
		return SC_Pac_If(Self, Other, SC_Reg__New(), 0);
	}
	if (!JB_Msg_EqualsSyx(Other, kJB_SyxArg, false)) {
		Other = ((Message*)JB_Ring_First(Other));
	}
	 else {
	}
	return SC_ASMType__Arg(Self, Other, SC_Reg__New(), 0);
}

ASMReg SC_Pac_Equals(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	ASMReg Rz = ((ASMReg)0);
	int Rr = SC_Reg_Reg(R);
	int Ll = SC_Reg_Reg(L);
	if ((!Rr) and Ll) {
		JB_Swap((L), (R));
	}
	(Dest = SC_Reg_OperatorAs(Dest, (SC_Reg_OperatorBitand(L, SC_Reg_OperatorBitand(R, kSC__Reg_RealConst)))));
	if (Rr == Ll) {
		return SC_Pac_EqualsSame(Self, Dest, L, R, Exp);
	}
	if (SC_Reg_IsInt(Dest)) {
		Rz = SC_Pac_EqualsInt(Self, Dest, L, R, Exp);
	}
	 else {
		Rz = SC_Pac_CompareFloat(Self, Dest, L, R, Exp, 2);
	}
	Rz = SC_Reg_BoolAnswer(Rz);
	return Rz;
}

ASMReg SC_Pac_EqualsInt(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	bool Negate = SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate);
	ASMReg Res = SC_Reg_BoolAnswer(Dest);
	if (SC_Reg_SyntaxIs(L, kSC__Reg_ConstOutput) and SC_Reg_SyntaxIs(R, kSC__Reg_ConstOutput)) {
		SC_Pac_Nop2Consts(Self, R, L);
		int Num = ((int)((SC_Reg_Const(L) == SC_Reg_Const(R)) != Negate));
		return SC_Pac_NumToReg(Self, Exp, Num, Res, kJB__TC_bool);
	}
	if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_CondRequest)) {
		Dest = SC_Pac_TempTypedWithMsgRegDecl(Self, Exp, Dest, SC_TypeBool->TypeNormal);
		return SC_FAT_AsReg(SC_Msg_CMPB(Exp, Dest, L, R, ((int)Negate) ^ 1), Dest);
	}
	if (SC_Reg_Reg(L)) {
		if (Negate) {
			return SC_FAT_AsReg(SC_Msg_JMPN(Exp, R, L, 0), Res);
		}
		return SC_FAT_AsReg(SC_Msg_JMPE(Exp, R, L, 0), Res);
	}
	if (Negate) {
		return SC_FAT_AsReg(SC_Msg_JBAN(Exp, R, 0), Res);
	}
	return SC_FAT_AsReg(SC_Msg_JBOR(Exp, R, 0), Res);
}

ASMReg SC_Pac_EqualsSame(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	int Num = ((int)((!SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate))));
	return SC_Reg_BoolAnswer(SC_Pac_NumToReg(Self, Exp, Num, Dest, kJB__TC_bool));
}

ASMReg SC_Pac_ExistingVar(ASMState* Self, Message* M, VarUseMode Mode) {
	ASMReg Rz = ((ASMReg)0);
	M = SC_Msg_ASMUnbra(M);
	Syntax Fn = M->Func;
	if (Fn == kJB_SyxThg) {
		return SC_Pac_ASMLocal(Self, M, Mode);
	}
	if (Fn != kJB_SyxNum) {
		return nil;
	}
	SCDecl* D = SC_Msg_ASMDecl(M);
	if (SC_NilReg_SyntaxIs(D->NilReg, kSC__NilReg_Hoisted)) {
		Rz = SC_int_ToASM(((int)D->NilReg));
		Rz = SC_Reg_xC2xB5TypeSet(Rz, D->DataType);
	}
	return Rz;
}

ASMReg SC_Pac_Exit(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	FatASM* J = SC_Msg_Jump(Exp);
	J->_Op = kSC__Pac_kExit;
	return ((ASMReg)0);
}

void SC_Pac_FinishASM(ASMState* Self) {
	if (SC_FAT_Const((&Self->Zero))) {
	}
	FatASM* L = SC_Pac_LastWith0(Self);
	if (!SC_FAT_IsFinisher(L)) {
		SC_Msg_RET(SC_Func_SourceArg(SC_Pac_fn(Self)), SC_Reg__New(), SC_Reg__New(), SC_Reg__New(), 0, SC_Reg_ToInt(SC_Reg__New()));
	}
	SC_Pac_Optimise(Self);
	Self->Out->xC2xB5Length = (SC_Pac_Curr(Self) - Self->FuncStart);
	(JB_Mrap_LengthSet(Self->JSM, SC_Pac_Curr(Self) - Self->Start));
}

ASMReg SC_Pac_FloatMul(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	ASMReg Rz = ((ASMReg)0);
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) {
		return SC_Pac_MakeConst2(Self, Dest, L, R, Exp, ((fn_ASMConstifier)(SC_ConstifyFloatMul)));
	}
	Rz = SC_Pac_QuickFloatMul(Self, Dest, R, L, Exp);
	if (Rz == nil) {
		Rz = SC_Pac_QuickFloatMul(Self, Dest, L, R, Exp);
		if (Rz == nil) {
			Rz = SC_FAT_AsReg(SC_Msg_FMUL(Exp, Dest, L, R, SC_Reg__New(), ((int)SC_Reg_IsBig(L))), Dest);
		}
	}
	return Rz;
}

ASMReg SC_Pac_FloatPlus(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) {
		return SC_Pac_MakeConst2(Self, Dest, L, R, Exp, ((fn_ASMConstifier)(SC_ConstifyFloatPlus)));
	}
	bool IsF32 = SC_Reg_FourBytes(Dest);
	if (IsF32) {
		ASMReg Qq = SC_Pac_QuickFloat32Plus(Self, Dest, L, R, Exp);
		if (Qq) {
			return Qq;
		}
	}
	bool Ss = (SC_Reg_SyntaxIs(L, kSC__Reg_Alternate));
	int Rr = SC_Reg_Reg(R);
	return SC_FAT_AsReg(SC_Msg_FADD(Exp, Dest, L, SC_Reg_OperatorMul(R, (!Ss)), SC_Reg_OperatorMul(R, Ss), 1 - IsF32), Dest);
}

SCFunction* SC_Pac_fn(ASMState* Self) {
	return Self->State.Fn;
}

bool SC_Pac_FoundReg(ASMState* Self, Message* All, int R) {
	{
		Message* S = All;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(All));
		while ((S) and (S != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(S));
			if (((JB_Msg_EqualsSyx(S, kJB_SyxThg, false))) and (!(JB_Msg_OperatorIn(S, kJB_SyxFunc)))) {
				ASMReg A = SC_Pac_ASMLocal(Self, S, 0);
				int Sr = SC_Reg_Reg(A);
				if (Sr == R) {
					return true;
				}
			}
			S = _N_f2;
		};
		;
	}
	;
	return false;
}

void SC_Pac_Guard(ASMState* Self) {
	ASMReg A = SC_Reg__New();
	Message* Arg = SC_Func_SourceArg(SC_Pac_fn(Self));
	SC_Msg_EROR(Arg, A, A, A, A, 0);
}

ASMReg SC_Pac_If(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	ASMReg Rz = ((ASMReg)0);
	(++Self->State.BranchDepth);
	Rz = SC_Pac_IfSub(Self, Exp, Dest, Mode);
	(--Self->State.BranchDepth);
	return Rz;
}

ASMReg SC_Pac_IfSub(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	ASMReg Rz = ((ASMReg)0);
	Message* Cond = ((Message*)JB_Ring_First(Exp));
	Message* Arg1 = ((Message*)JB_Ring_NextSib(Cond));
	Message* Other = ((Message*)JB_Ring_NextSib(Arg1));
	FatASM* IfStart = SC_Pac_Curr(Self);
	FatRange B = ((FatRange){});
	SC_Pac_Branch(Self, Cond, (&B), false);
	FatASM* ArgStart = SC_Pac_Curr(Self);
	if (SC_FatRange_Never((&B))) {
		return SC_Pac_Else(Self, Other);
	}
	(++Self->BasicBlock);
	ASMReg Arg1Return = SC_ASMType__Arg(Self, Arg1, SC_Reg__New(), 0);
	if (SC_FatRange_Always((&B)) or (!SC_Msg_HasAsmStuff(Other))) {
		SC_Pac_AllJumpTo(Self, (&B), nil);
		(++Self->BasicBlock);
		return SC_Reg_OperatorMul(Arg1Return, SC_FatRange_Always((&B)));
	}
	if (ArgStart == SC_Pac_Curr(Self)) {
		JB_DoAt(1);
		SC_Pac_NopRange(Self, IfStart, ArgStart);
		SC_Pac_Branch(Self, Cond, (&B), true);
	}
	if (SC_FAT_Op(SC_Pac_Curr(Self)) != kSC__ASM_EROR) {
	}
	FatASM* AfterFirst = SC_Msg_Jump(Other);
	SC_Pac_AllJumpTo(Self, (&B), nil);
	Rz = SC_Reg_OperatorBitand(SC_Pac_Else(Self, Other), Arg1Return);
	SC_FAT_JumpToSet(AfterFirst, SC_Pac_Curr(Self), (&SC__Pac_Sh));
	return Rz;
}

ASMReg SC_Pac_IncrPost(ASMState* Self, Message* Exp, ASMReg Dest, ASMReg ToGrow, int64 Value) {
	ASMReg Rz = ((ASMReg)0);
	if (SC_Reg_IsInt(ToGrow) and SC_int64_CanStoreAsIntImmediate(Value)) {
		return SC_FAT_AsReg(SC_Msg_ADPK(Exp, Dest, ToGrow, Value), Dest);
	}
	SC_Pac_Assign(Self, Dest, ToGrow, Exp);
	Rz = SC_Pac_IncrPre(Self, Exp, ToGrow, ToGrow, Value);
	return Rz;
}

ASMReg SC_Pac_IncrPre(ASMState* Self, Message* Exp, ASMReg Dest, ASMReg Src, int64 Value) {
	if (!SC_Reg_Reg(Src)) {
	}
	if (!SC_Reg_Reg(Dest)) {
		Dest = Src;
	}
	Src = SC_Pac_AddToReg(Self, Exp, Src, Src, Value);
	if (SC_Reg_Reg(Dest) == SC_Reg_Reg(Src)) {
		return Src;
	}
	return SC_Pac_Assign(Self, Dest, Src, Exp);
}

int SC_Pac_Index(ASMState* Self) {
	return Self->_Curr - Self->Start;
}

bool SC_Pac_InitAndStartFunc(ASMState* Self, SCFunction* Fn) {
	JB_SetRef(Self->Out, Fn);
	Self->State.Fn = Fn;
	(SC_Func__CurrFuncSet(Fn));
	Self->State.Return = nil;
	Self->StackSize = 0;
	Self->State.InlineDepth = 0;
	Self->State.BranchDepth = 0;
	Self->TailInlineable = true;
	Self->InlineLimit = 8;
	Self->BasicBlock = 0;
	Self->VDecls = 0;
	Self->VTmps = 32;
	Self->Zero = ((FatASM){});
	Self->Zero.Info = SC_Reg__New();
	JB_Mrap__Fill(((byte*)((&Self->Vars[0]))), 32 * 8, 0);
	MWrap* J = ({
		MWrap* _X = Self->JSM;
		if (!_X) {
			_X = JB_Mrap__Object(262144, 64);
			JB_SetRef(Self->JSM, _X);
		}
		 _X;
	});
	if (!J) {
		return nil;
	}
	Self->End = ((FatASM*)JB_Mrap_NeedSpare(J, 65536, J->ItemCount));
	Self->Start = ((FatASM*)JB_Mrap_Ptr(J));
	Self->_Curr = (Self->Start + J->Length);
	SC_Pac_Guard(Self);
	SC_Func_StartASM(Fn);
	Self->LastDebug = SC_Pac_Curr(Self);
	Self->FuncStart = SC_Pac_Curr(Self);
	Self->ReturnASM = SC_Decl_RegType(Fn->ReturnType);
	SC_Pac_AddFuncParams(Self, Fn);
	return true;
}

bool SC_Pac_InlineAddK(ASMState* Self, ASMReg L, int64 R, ASMReg Dest) {
	if ((SC_Reg_SyntaxIs(L, kSC__Reg_Temp)) or (SC_Reg_Reg(Dest) == SC_Reg_Reg(L))) {
		FatASM* Fat = SC_Pac_SmartSecretFat(Self, L);
		if (SC_FAT_OperatorIsa(Fat, kSC__ASM_ADDK)) {
			int64 CC = SC_FAT_r2(Fat) + R;
			if (SC_int64_CanStoreAsIntImmediate(CC)) {
				(SC_FAT_r2SetWithUint(Fat, CC));
				(SC_FAT_r0SetWithReg(Fat, Dest));
				return true;
			}
		}
	}
	return false;
}

ASMReg SC_Pac_InlineFinishWithConsts(ASMState* Self, FatRange* R) {
	ASMReg Rz = ((ASMReg)0);
	{
		FatASM* S = R->After;
		while (S > R->Start) {
			(--S);
			if (SC_FAT_OperatorIsa(S, kSC__ASM_RET)) {
				if (Rz) {
					Rz = SC_Reg_Simplify(Rz);
				}
				 else {
					FatASM* Dest = SC_FAT_Input(S, 0);
					if (Dest) {
						Rz = Dest->Info;
					}
					 else {
						Rz = SC_int_ToASM(((int)S->R[0]));
					}
				}
				(SC_FAT_SetOpSet(S, kSC__ASM_JUMP));
				S->JumpReg = 1;
				SC_Pac_JumpFix(Self, S, nil);
			}
			 else if (SC_FAT_OperatorIsa(S, kSC__ASM_KNST)) {
				SC_Pac_AskNop((&SC__Pac_Sh), S);
			}
		};
	}
	;
	Rz = SC_Reg_OperatorBitand(Rz, (~kSC__Reg_Exit));
	(Rz = SC_Reg_OperatorAs(Rz, (SC_Reg_OperatorBitand(Self->State.Return, kSC__Reg_Exit))));
	return Rz;
}

ASMReg SC_Pac_InlineOffsetOpt(ASMState* Self, ASMReg Base, int Pow2, int* Index, int Maximum) {
	if (SC_Reg_SyntaxIs(Base, kSC__Reg_Temp)) {
		FatASM* Bs = SC_Reg_FAT(Base);
		if (SC_FAT_OperatorIsa(Bs, kSC__ASM_ADDK)) {
			uint CC = Bs->R[2];
			uint CC2 = CC >> Pow2;
			if ((CC2 <= Maximum) and ((CC2 << Pow2) == CC)) {
				Index[0] = (Index[0] + CC2);
				uint R = Bs->R[1];
				Base = SC_Reg_RegSet(Base, R);
				Base = (SC_Reg_SyntaxIsSet(Base, kSC__Reg_Temp, ((bool)(R >> 31))));
				Base = SC_Reg_FatIndexSet(Base, 0);
				SC_Pac_Nop(Self, Bs, 0);
			}
		}
	}
	return Base;
}

void SC_Pac_InlineParameters(ASMState* Self, Message* Prms) {
	Message* P = ((Message*)JB_Ring_First(Prms));
	{
		Array* _LoopSrcf2 = SC_Pac_fn(Self)->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* A = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (A == nil) {
				break;
			}
			ASMReg V = SC_Pac_ExistingVar(Self, P, 0);
			if (V) {
				int Vr = SC_Reg_Reg(V);
				if (SC_Pac_CanReuseParam(Self, Prms, A, Vr)) {
					FatASM* F = SC_Reg_FAT(V);
					ASMReg T = SC_Reg_RegSet(SC_Decl_WholeType(A), Vr);
					A->DataType = ((DataTypeCode)T);
					((SC_Decl_SyntaxIsSet(A, kSC__SCDeclInfo_Param, (SC_Reg_SyntaxIs(V, kSC__Reg_Param)))));
					((SC_Decl_SyntaxIsSet(A, kSC__SCDeclInfo_Body, ((!SC_Reg_SyntaxIs(V, kSC__Reg_Param))))));
				}
				 else {
					V = nil;
				}
			}
			if (!V) {
				V = SC_Pac_DeclareMe(Self, A->Source, A);
				V = SC_Pac_xC2xB5Into(Self, P, SC_Reg_OperatorAs(V, kSC__Reg_DeclareInlineParam));
			}
			SC_Pac_MakeConstFromASM(Self, A, V, nil);
			P = ((Message*)JB_Ring_NextSib(P));
			(++_if0);
		};
	};
}

ASMReg SC_Pac_IntMul(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	ASMReg Rz = ((ASMReg)0);
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) {
		return SC_Pac_MakeConst2(Self, Dest, L, R, Exp, ((fn_ASMConstifier)(SC_ConstifyIntMul)));
	}
	Rz = SC_Pac_QuickIntMul(Self, Dest, R, L, Exp);
	if (Rz == nil) {
		Rz = SC_Pac_QuickIntMul(Self, Dest, L, R, Exp);
		if (Rz == nil) {
			Rz = SC_FAT_AsReg(SC_Msg_MULT(Exp, Dest, L, R, SC_Reg__New()), Dest);
		}
	}
	return Rz;
}

ASMReg SC_Pac_IntPlus(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) {
		return SC_Pac_MakeConst2(Self, Dest, L, R, Exp, ((fn_ASMConstifier)(SC_ConstifyIntPlus)));
	}
	int Swapped = 0;
	if (SC_Reg_LeftScore(L) < SC_Reg_LeftScore(R)) {
		if (SC_Reg_SyntaxIs(L, kSC__Reg_Alternate)) {
		}
		 else {
			Swapped = 1;
			JB_Swap((L), (R));
		}
	}
	if (!SC_Reg_Reg(R)) {
		return SC_Pac_Assign(Self, Dest, L, Exp);
	}
	int Lmul = 1;
	if (((!SC_Reg_SyntaxIs(L, kSC__Reg_NoScale))) and SC_Reg_SomePointer(L)) {
		Lmul = SC_Reg_PointerMul(L, Exp, Swapped);
	}
	if (SC_Reg_SyntaxIs(R, kSC__Reg_ConstOutput)) {
		int64 RR = SC_Reg_Const(R);
		if (SC_Reg_SyntaxIs(L, kSC__Reg_Alternate)) {
			RR = (-RR);
		}
		RR = (RR * Lmul);
		if (SC_Reg_CanAddK(R, RR)) {
			SC_Pac_NopConst(Self, R);
			if (SC_Pac_InlineAddK(Self, L, RR, Dest)) {
				return Dest;
			}
			return SC_FAT_AsReg(SC_Msg_ADDK(Exp, Dest, L, RR), Dest);
		}
	}
	FatASM* Fat = nil;
	if (JB_int_IsPow2(Lmul)) {
		Fat = SC_Msg_ADD(Exp, Dest, L, R, JB_Int_Log2(Lmul));
		Fat->_Op = (Fat->_Op + (SC_Reg_SyntaxIs(L, kSC__Reg_Alternate)));
	}
	 else {
		ASMReg V = SC_Pac_NumToReg(Self, Exp, Lmul, SC_Reg__New(), kJB__TC_UInt);
		if (!SC_Reg_SyntaxIs(L, kSC__Reg_Alternate)) {
			Fat = SC_Msg_MULT(Exp, Dest, R, V, L);
		}
		 else {
			SC_Msg_SUB(Exp, Dest, L, R, SC_Reg_ToInt(SC_Reg__New()));
			int Uinttype = 0;
			Fat = SC_Msg_DIVV(Exp, Dest, SC_Reg__New(), Dest, V, Uinttype);
		}
	}
	return SC_FAT_AsReg(Fat, Dest);
}

FailableInt SC_Pac_IntPowerOfTwo(ASMState* Self, ASMReg R, int Sub) {
	int64 V = SC_Reg_Const(R);
	if (V == -1) {
		if (Sub) {
		}
		SC_Pac_NopConst(Self, R);
		return V;
	}
	V = (V - Sub);
	if (JB_int64_IsPow2(V)) {
		SC_Pac_NopConst(Self, R);
		if (!V) {
			return 0;
		}
		return JB_int64_Log2(V) + 1;
	}
	return kJB__FailableInt_Fail;
}

bool SC_Pac_IsASMConst(ASMState* Self, Message* Exp) {
	Syntax Fn = Exp->Func;
	if (Fn == kJB_SyxNum) {
		return true;
	}
	if (Fn == kJB_SyxThg) {
		return ((bool)SC_ASMType__ThgSub(Self, Exp, kSC__Reg_ConstRequest));
	}
	return false;
}

void SC_Pac_JumpFix(ASMState* Self, FatASM* S, FatASM* Curr) {
	(SC_FAT_SyntaxIsSet(S, kSC__Reg_CondAnswer, (!true)));
	if (!Curr) {
		Curr = SC_Pac_Curr(Self);
	}
	SC_FAT_JumpToSet(S, Curr, Self);
}

ASMReg SC_Pac_KompareIntK(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp, uint Mode) {
	if (Mode > 1) {
		return nil;
	}
	bool Swapped = SC_Reg_SyntaxIs(L, kSC__Reg_ConstOutput);
	if (Swapped) {
		JB_Swap((L), (R));
		Mode = (Mode ^ 1);
	}
	FatASM* F = SC_Reg_FAT(R);
	if (!F) {
		return nil;
	}
	int64 K = SC_FAT_Const(F) - Swapped;
	if (!SC_int64_Fits(K, 9, true)) {
		return nil;
	}
	SC_Pac_NopConst(Self, R);
	K = JB_uint64_Trim(((uint64)K), 9);
	FatASM* J = SC_Msg_JMPK(Exp, L, K, 0);
	if (Mode & 1) {
		J->_Op = kSC__ASM_JMPC;
	}
	return SC_FAT_AsReg(J, Dest);
}

FatASM* SC_Pac_LastWith0(ASMState* Self) {
	return Self->_Curr - 1;
}

FatASM* SC_Pac_LastWithAsm(ASMState* Self, ASM Type) {
	FatASM* L = Self->_Curr - 1;
	if (SC_FAT_OperatorIsa(L, Type)) {
		if (L->BlockNum == Self->BasicBlock) {
			return L;
		}
	}
	return nil;
}

ASMReg SC_Pac_Less(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	return SC_Pac_Compare(Self, Dest, R, L, Exp, 0);
}

ASMReg SC_Pac_LessEq(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	return SC_Pac_Compare(Self, Dest, L, R, Exp, 1);
}

bool SC_Pac_LoadLabelJumps(ASMState* Self) {
	{
		SCFunction* _LoopSrcf3 = Self->Out;
		FatASM* _FirstInstf0 = SC_Func_IR(_LoopSrcf3);
		FatASM* A = _FirstInstf0;
		FatASM* _AfterInstf2 = A + _LoopSrcf3->xC2xB5Length;
		while (A < _AfterInstf2) {
			if (!SC_TextAssembler__GetLabel(A)) {
				return nil;
			}
			(++A);
		};
	}
	;
	return true;
}

Message* SC_Pac_LoadTitle(ASMState* Self, Message* M) {
	Message* Rz = nil;
	Message* Name = JB_Msg_NeedSyx(M, kJB_SyxThg);
	if (!Name) {
		return nil;
	}
	JB_SetRef(SC_Pac_fn(Self)->ExportName, Name->Name);
	JB_SetRef(SC_Pac_fn(Self)->Name, Name->Name);
	Message* Bra = JB_Msg_NextOf(Name, kJB_SyxBra);
	if (!Bra) {
		return nil;
	}
	int64 N = JB_Msg_Int(JB_Msg_NeedSyx(Bra, kJB_SyxNum), 0);
	if (!((N >= 0) and (N <= 10))) {
		JB_Msg_Fail(M, JB_LUB[1056]);
		return nil;
	}
	{
		int64 _Valuef1 = 0;
		while (_Valuef1 < N) {
			JB_Array_SyntaxAppend(SC_Pac_fn(Self)->Args, SC_TypeInt64->TypeNormal);
			(++_Valuef1);
		};
	}
	;
	Rz = JB_Msg_NextOf(Bra, kJB_SyxArg);
	JB_Msg_ExpectLast(Rz, JB_LUB[0]);
	return Rz;
}

void SC_Pac_LoopFill(ASMState* Self, FatASM* C, FatASM* S, FatASM* A) {
	while (C < S) {
		//ClearExits;
		uint Op = SC_FAT_Op(C);
		if (Op >= kSC__Pac_kContinue) {
			C->_Op = kSC__ASM_JUMP;
			if (Op == kSC__Pac_kContinue) {
				SC_FAT_JumpToSet(C, S, Self);
			}
			 else {
				SC_FAT_JumpToSet(C, A, Self);
			}
		}
		(++C);
	};
}

ASMReg SC_Pac_MakeConst(ASMState* Self, FatASM* Fat, ASMReg Reg) {
	Reg = SC_Reg_SyntaxIsSet(Reg, kSC__Reg_RealConst, true);
	return SC_FAT_AsReg(Fat, Reg);
}

ASMReg SC_Pac_MakeConst2(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp, fn_ASMConstifier Fn) {
	int64 K = (Fn)(L, R);
	SC_Pac_Nop2Consts(Self, R, L);
	return SC_Pac_NumToReg(Self, Exp, K, Dest, SC_Reg_xC2xB5Type(Dest));
}

void SC_Pac_MakeConstFromASM(ASMState* Self, SCDecl* Decl, ASMReg Initial, ASMReg NewValue) {
	FatASM* F = SC_Reg_FAT(Initial);
	if (Initial) {
		if (SC_Pac_SetDeclToConst(Self, Decl, Initial, F)) {
			return;
		}
	}
	if (SC_Decl_SyntaxIs(Decl, kSC__SCDeclInfo_Const)) {
		(SC_Decl_SyntaxIsSet(Decl, kSC__SCDeclInfo_Const, (!true)));
		if (F) {
			SC_Pac_AskNop(Self, F);
		}
		Decl->ExportPosition = 0;
		FatASM* Fat = SC_Decl_Fat(Decl);
		if (Fat) {
			Decl->FatConstIndex = 0;
			SC_Pac_AskNop(Self, Fat);
		}
	}
	if (NewValue) {
		SC_Pac_SetDeclToConst(Self, Decl, NewValue, SC_Reg_FAT(NewValue));
	}
}

ASMReg SC_Pac_Minus(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (R != SC_Reg__New()) {
	}
	R = SC_Reg_SyntaxIsSet(R, kSC__Reg_Alternate, true);
	return SC_Pac_Plus(Self, Dest, R, L, Exp);
}

ASMReg SC_Pac_Mod(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (SC_Reg_IsInt(Dest)) {
		return SC_Pac_ModInt(Self, Dest, L, R, Exp);
	}
	return SC_Pac_ModFloat(Self, Dest, L, R, Exp);
}

ASMReg SC_Pac_ModFloat(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) {
		return SC_Pac_MakeConst2(Self, Dest, L, R, Exp, ((fn_ASMConstifier)(SC_ConstifyFloatMod)));
	}
	int Big = ((int)SC_Reg_IsBig(Dest));
	SC_Msg_FDIV(Exp, Dest, L, R, SC_Reg__New(), Big);
	return SC_FAT_AsReg(SC_Msg_FFRC(Exp, Dest, SC_Reg__New(), Dest, R, Big), Dest);
}

ASMReg SC_Pac_ModInt(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) {
		return SC_Pac_MakeConst2(Self, Dest, L, R, Exp, ((fn_ASMConstifier)(SC_ConstifyIntMod)));
	}
	return SC_FAT_AsReg(SC_Msg_DIVV(Exp, SC_Reg__New(), Dest, L, R, SC_Reg_IntDivType(Dest)), Dest);
}

ASMReg SC_Pac_More(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	return SC_Pac_Compare(Self, Dest, L, R, Exp, 0);
}

ASMReg SC_Pac_MoreEq(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	return SC_Pac_Compare(Self, Dest, R, L, Exp, 1);
}

ASMReg SC_Pac_Multiply(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (SC_Reg_OperatorIsa(L, kJB__TC_bool)) {
		return SC_Pac_BoolMul(Self, Dest, L, R, Exp);
	}
	if (SC_Reg_OperatorIsa(R, kJB__TC_bool)) {
		return SC_Pac_BoolMul(Self, Dest, R, L, Exp);
	}
	if (SC_Reg_SyntaxIs(L, kSC__Reg_ConstOutput)) {
		JB_Swap((L), (R));
	}
	if (SC_Reg_IsInt(L)) {
		return SC_Pac_IntMul(Self, Dest, R, L, Exp);
	}
	return SC_Pac_FloatMul(Self, Dest, L, R, Exp);
}

void SC_Pac_Nop(ASMState* Self, FatASM* Fat, int Depth) {
	if (Depth > 5) {
	}
	FatASM* C = SC_Pac_Curr(Self) - 1;
	if (Fat == C) {
		Self->_Curr = C;
	}
	return SC_Pac_SoftNop(Self, Fat, Depth + 1);
}

void SC_Pac_Nop2Consts(ASMState* Self, ASMReg A, ASMReg B) {
	SC_Pac_NopConst(Self, A);
	SC_Pac_NopConst(Self, B);
	SC_Pac_NopConst(Self, A);
}

void SC_Pac_NopConst(ASMState* Self, ASMReg R) {
	if ((SC_Reg_SyntaxIs(R, kSC__Reg_RemoveableOutput)) or (SC_Reg_SyntaxIs(R, kSC__Reg_RealConst))) {
		FatASM* F = SC_Reg_FAT(R);
		if (F) {
			SC_Pac_Nop(Self, F, 0);
		}
	}
}

bool SC_Pac_NopMinusOne(ASMState* Self, ASMReg R) {
	if (SC_Reg_IsConst(R, -1)) {
		SC_Pac_NopConst(Self, R);
		return true;
	}
	return false;
}

void SC_Pac_NopRange(ASMState* Self, FatASM* Start, FatASM* After) {
	while (Start < After) {
		SC_Pac_Nop(Self, (--After), 0);
	};
}

void SC_Pac_NopReg(ASMState* Self, ASMReg R) {
	FatASM* F = SC_Reg_FAT(R);
	if (F) {
		return SC_Pac_Nop(Self, F, 0);
	}
	if (SC_Reg_Reg(R) and (!SC_Reg_SyntaxIs(R, kSC__Reg_Param))) {
		JB_DoAt(1);
	}
}

ASMReg SC_Pac_NotEq(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	return SC_Pac_Equals(Self, SC_Reg_Negate(Dest, true), L, R, Exp);
}

FatASM* SC_Pac_NumToFat(ASMState* Self, Message* Exp, int64 V, ASMReg Dest) {
	Dest = SC_Pac_TempOnly(Self, Exp, Dest);
	if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_Textual)) {
		FatASM* K = SC_Pac_LastWithAsm(Self, kSC__ASM_KNST);
		if (K) {
			if (SC_FAT_r0(K) == SC_Reg_Reg(Dest)) {
				SC_Pac_Nop(Self, K, 0);
			}
		}
	}
	FatASM* Fat = SC_Msg_KNST(Exp, Dest, 0, 0, 0);
	(SC_FAT_ConstSet(Fat, V));
	Dest = SC_Reg_SyntaxIsSet(Dest, kSC__Reg_RealConst, true);
	SC_Pac_MakeConst(Self, Fat, Dest);
	return Fat;
}

ASMReg SC_Pac_NumToReg(ASMState* Self, Message* Exp, int64 V, ASMReg Reg, uint /*DataTypeCode*/ SrcType) {
	ASMReg Rz = ((ASMReg)0);
	if (V) {
		return SC_Pac__Num(Self, Exp, V, Reg);
	}
	Rz = SC_Reg_OperatorAs(kSC__Reg_ZeroParam, (SC_Reg_OperatorBitand(Reg, kSC__Reg_ConstInput)));
	Rz = SC_Reg_xC2xB5TypeSet(Rz, SrcType);
	return Rz;
}

uint SC_Pac_OpenVars(ASMState* Self) {
	uint Rz = 0;
	Rz = ((((uint)Self->VDecls) << 8) | (Self->VTmps << 0));
	return Rz;
}

void SC_Pac_Optimise(ASMState* Self) {
	FatASM* A = SC_Pac_Curr(Self);
	FatASM* S = Self->FuncStart;
	while (A > S) {
		if (S->JumpReg) {
			SC_FAT_JumpImprove(S);
		}
		 else {
			SC_FAT_MiniOpt(S, Self);
		}
		(++S);
	};
}

void SC_Pac_PackMakerInit(ASMState* Self) {
	if (Self->Inited) {
		return;
	}
	Self->Inited = true;
	SC_VM_Builder__JustDefineInstructions();
	SC_Instruction__InstructionInit();
	SC_ASMType__InitAccess();
	SC_Instruction_Const(SC_Instruction__SyntaxAccessWithInt(kSC__ASM_KNSR));
	SC_Instruction_Const(SC_Instruction__SyntaxAccessWithInt(kSC__ASM_KNST));
	SC__ASM_Encoders[kSC__ASM_KNST] = SC_FAT_KNST_Encoder;
	SC__ASM_Encoders[kSC__ASM_NOOP] = SC_FAT_NOOP_Encoder;
	return;
}

ASMReg SC_Pac_Plus(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	int Rr = SC_Reg_Reg(R);
	int Ll = SC_Reg_Reg(L);
	if (!Rr) {
		return L;
	}
	if (SC_Reg_SyntaxIs(L, kSC__Reg_Alternate)) {
		if (Rr == Ll) {
			return SC_Pac_Zeros(Self, Dest);
		}
	}
	 else {
		if (!Ll) {
			return R;
		}
	}
	if (SC_Reg_IsInt(L)) {
		return SC_Pac_IntPlus(Self, Dest, L, R, Exp);
	}
	return SC_Pac_FloatPlus(Self, Dest, L, R, Exp);
}

uint64 SC_Pac_PrmCollect(ASMState* Self, Message* Prms, SCFunction* Fn, uint* Addrs) {
	uint64 Rz = 0;
	if (SC_Func_HasCVersion(Fn)) {
		return SC_Pac_PrmCollectC(Self, Prms, Fn, Addrs);
	}
	int Sh = 7;
	Message* P = ((Message*)JB_Ring_First(Prms));
	{
		Array* _LoopSrcf2 = Fn->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* FnArg = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (FnArg == nil) {
				break;
			}
			int V = SC_Reg_Reg(SC_Pac_xC2xB5Reffed(Self, P, SC_Reg__New()));
			Rz = (Rz | (V << Sh));
			Sh = (Sh + 5);
			(++Rz);
			P = ((Message*)JB_Ring_NextSib(P));
			if (SC_FAT_OperatorIsa(SC_Pac_LastWith0(Self), kSC__ASM_GRAB)) {
				Addrs[0] = (Addrs[0] | JB_Int_Log2(V));
			}
			(++_if0);
		};
	}
	;
	return Rz;
}

uint64 SC_Pac_PrmCollectC(ASMState* Self, Message* Prms, SCFunction* Fn, uint* Addrs) {
	uint64 Rz = 0;
	int64 Sh = 64;
	int Fc = 0;
	int Ic = 0;
	int N = JB_Array_Size(Fn->Args);
	{
		int Ints = 0;
		while (Ints < 2) {
			Message* P = ((Message*)JB_Ring_First(Prms));
			while (P) {
				SCDecl* Ty = SC_Msg_ASMDecl(P);
				if (((int)SC_Decl_SpecialRegs(Ty)) != Ints) {
					int64 V = SC_Reg_Reg(SC_Pac_xC2xB5Reffed(Self, P, SC_Reg__New()));
					Sh = (Sh - 5);
					Rz = (Rz | (V << Sh));
					Ic = (Ic + Ints);
					Fc = (Fc + (!Ints));
					if (SC_FAT_OperatorIsa(SC_Pac_LastWith0(Self), kSC__ASM_GRAB)) {
						Addrs[0] = (Addrs[0] | JB_int64_Log2(V));
					}
				}
				P = ((Message*)JB_Ring_NextSib(P));
			};
			(++Ints);
		};
	}
	;
	Rz = (Rz >> (64 - ((N * 5) + 12)));
	if ((Fc > 8) or (Ic > 8)) {
	}
	Rz = (Rz | (SC_Decl_SpecialRegs(Fn->ReturnType) << 11));
	if (Fc) {
		Rz = (Rz | ((8 - Fc) << 6));
		Rz = (Rz | ((8 - Ic) << 0));
	}
	 else {
		Rz = (Rz | ((17 - Ic) << 6));
	}
	return Rz;
}

ASMReg SC_Pac_Quick1Or1Sub(ASMState* Self, ASMReg Dest, ASMReg L, int Ptoi, Message* Exp) {
	if (Ptoi == -1) {
		return SC_Pac_Subtract(Self, Dest, SC_Reg__New(), L, Exp);
	}
	if (Ptoi == 1) {
		return L;
	}
	return SC_TC_zero(SC_Reg_xC2xB5Type(Dest));
}

ASMReg SC_Pac_QuickFloat32Plus(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (SC_Reg_SyntaxIs(R, kSC__Reg_ConstOutput)) {
		ASMReg QQ = SC_Pac_QuickFloatPlusConstSub(Self, Dest, L, R, Exp);
		if (QQ) {
			return QQ;
		}
	}
	if (SC_Reg_SyntaxIs(L, kSC__Reg_ConstOutput) and (!SC_Reg_SyntaxIs(L, kSC__Reg_Alternate))) {
		return SC_Pac_QuickFloatPlusConstSub(Self, Dest, SC_Reg_OperatorAsnt(R, kSC__Reg_Alternate), L, Exp);
	}
	return ((ASMReg)0);
}

ASMReg SC_Pac_QuickFloatDiv(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (!SC_Reg_SyntaxIs(R, kSC__Reg_ConstOutput)) {
		return nil;
	}
	Float64 V = SC_Reg_float(R);
	Float64 V2 = fabs(V);
	if ((V2 == 1.0f) or (V2 == 0.0f)) {
		if (V2 == 0.0f) {
			SC_Msg_DivByZero(Exp);
		}
		SC_Pac_NopConst(Self, R);
		return SC_Pac_Quick1Or1Sub(Self, Dest, L, ((int)V), Exp);
	}
	return ((ASMReg)0);
}

ASMReg SC_Pac_QuickFloatMul(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (!SC_Reg_SyntaxIs(R, kSC__Reg_ConstOutput)) {
		return nil;
	}
	Float64 V = SC_Reg_float(R);
	if ((V == 1.0f) or ((V == 0.0f) or (V == -1.0f))) {
		SC_Pac_NopConst(Self, R);
		return SC_Pac_Quick1Or1Sub(Self, Dest, L, ((int)V), Exp);
	}
	if (V == 2.0f) {
		SC_Pac_NopConst(Self, R);
		return SC_Pac_Plus(Self, Dest, L, L, Exp);
	}
	if (SC_Reg_FourBytes(R)) {
		int64 X = SC_Reg_Const(R);
		int64 Y = X >> 18;
		if (X == (Y << 18)) {
			SC_Pac_NopReg(Self, R);
			return SC_FAT_AsReg(SC_Msg_FMLK(Exp, Dest, L, X), Dest);
		}
	}
	return ((ASMReg)0);
}

ASMReg SC_Pac_QuickFloatPlusConstSub(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	uint64 K = ((uint64)SC_Reg_Const(R));
	K = (K ^ ((SC_Reg_SyntaxIs(L, kSC__Reg_Alternate)) << 31));
	if (((K >> 18) << 18) != K) {
		return nil;
	}
	SC_Pac_NopConst(Self, R);
	return SC_FAT_AsReg(SC_Msg_FADK(Exp, Dest, L, K), Dest);
}

ASMReg SC_Pac_QuickIntDiv(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (!SC_Reg_SyntaxIs(R, kSC__Reg_ConstOutput)) {
		return nil;
	}
	FailableInt PToi = SC_Pac_IntPowerOfTwo(Self, R, 0);
	if (JB_FailableInt_SyntaxCast(PToi)) {
		if (PToi <= 1) {
			if (PToi == 0) {
				SC_Msg_DivByZero(Exp);
			}
			return SC_Pac_Quick1Or1Sub(Self, Dest, L, PToi, Exp);
		}
		if (!SC_Reg_Signed(L)) {
			return SC_FAT_AsReg(SC_Msg_BFLG(Exp, Dest, L, 0, PToi - 1, 0), Dest);
		}
		return SC_FAT_AsReg(SC_Msg_DIV2(Exp, Dest, L, PToi - 1, PToi - 1), Dest);
	}
	return ((ASMReg)0);
}

ASMReg SC_Pac_QuickIntMul(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (!SC_Reg_SyntaxIs(R, kSC__Reg_ConstOutput)) {
		return nil;
	}
	FailableInt Pow2 = SC_Pac_IntPowerOfTwo(Self, R, 0);
	if (JB_FailableInt_SyntaxCast(Pow2)) {
		if (Pow2 <= 1) {
			return SC_Pac_Quick1Or1Sub(Self, Dest, L, Pow2, Exp);
		}
		return SC_FAT_AsReg(SC_Msg_BFLG(Exp, Dest, L, Pow2 - 1, 0, 0), Dest);
	}
	FailableInt Five = SC_Pac_IntPowerOfTwo(Self, R, 1);
	if (JB_FailableInt_SyntaxCast(Five)) {
		return SC_FAT_AsReg(SC_Msg_ADD(Exp, Dest, L, L, Five - 1), Dest);
	}
	int64 RR = SC_Reg_Const(R);
	if (SC_Reg_CanAddK(R, RR)) {
		SC_Pac_NopConst(Self, R);
		return SC_FAT_AsReg(SC_Msg_MULK(Exp, Dest, L, RR), Dest);
	}
	return ((ASMReg)0);
}

ASMReg SC_Pac_ReadOrWrite(ASMState* Self, ASMReg Dest, Message* M, ASMReg Base, ASMReg VarAdd, SCDecl* Ty, int Index) {
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_FromZeroMemory) or SC_Reg_SyntaxIs(Dest, kSC__Reg_Set)) {
		Dest = SC_Reg_SyntaxIsSet(Dest, kSC__Reg_RealConst, true);
	}
	return SC_FAT_AsReg(SC_Pac_ReadOrWriteSub(Self, Dest, M, Base, VarAdd, Ty, Index), Dest);
}

FatASM* SC_Pac_ReadOrWriteSub(ASMState* Self, ASMReg Dest, Message* Exp, ASMReg Base, ASMReg VarAdd, SCDecl* D, int Index) {
	FatASM* Rz = nil;
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ContainsAddr)) {
		//wait?? this is meant to be an addrrequest? not a response.;
	}
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_FromZeroMemory)) {
		return SC_Pac_ZeroMemory(Self, Index, Exp, Base, VarAdd, D);
	}
	(Dest = SC_Reg_OperatorAsnt(Dest, kSC__Reg_AddrRequest));
	uint T = SC_Reg_xC2xB5Type(Dest);
	int Bytes = JB_Int_Log2(JB_TC_ByteCount(T));
	if (((uint)Bytes) > 4) {
		if (true) {
			JB_Msg_Fail(Exp, JB_LUB[1764]);
		}
		Bytes = 0;
	}
	if (SC_Reg_SyntaxIs(VarAdd, kSC__Reg_ConstOutput)) {
		FatASM* CC = SC_Reg_FAT(VarAdd);
		if (CC) {
			if (SC_Reg_SyntaxIs(VarAdd, kSC__Reg_RealConst)) {
				SC_Pac_Nop(Self, CC, 0);
			}
			Index = (Index + SC_FAT_Const(CC));
			VarAdd = SC_Reg__New();
		}
	}
	Base = SC_Pac_InlineOffsetOpt(Self, Base, Bytes, (&Index), 127);
	if (Index >= 128) {
		Index = (Index << Bytes);
		Base = SC_Pac_AddToReg(Self, Exp, SC_Reg__New(), SC_Reg_OperatorAs(Base, kSC__Reg_NoScale), Index);
		Index = 0;
	}
	Rz = SC_Msg_RD4U(Exp, Dest, Base, VarAdd, Index, 0);
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_Set)) {
		Rz->_Op = SC__ASMType_WriteASM[Bytes];
	}
	 else {
		int B = (Bytes << 1) + JB_TC_IsSigned(T);
		Rz->_Op = SC__ASMType_ReadASM[B];
	}
	return Rz;
}

ASMReg SC_Pac_RefCount(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	Message* Prms = ((Message*)JB_Ring_Last(Exp));
	SCFunction* Fn = ((SCFunction*)Prms->Obj);
	if (Fn != SC__Comp_RefFreeIfDead) {
		FatASM* Fat = SC_Pac_RefCountSub(Self, Exp, Prms, Fn);
		if (Fat) {
			return SC_FAT_AsReg(Fat, SC_Reg__New());
		}
		return nil;
	}
	ASMReg A = SC_Pac_xC2xB5(Self, ((Message*)JB_Ring_First(Prms)), SC_Reg__New());
	// Disallow: if obj.X(),   when obj.X() is a disowner;
	// Then we will never freeifdead within if-branch or other tests.;
	// needs understanding of disowners!;
	SC_Msg_RFAP(Exp, A, SC_Reg__New(), SC_Reg__New());
	return A;
}

FatASM* SC_Pac_RefCountSub(ASMState* Self, Message* Exp, Message* Prms, SCFunction* Fn) {
	if (Fn == SC__Comp_RefClear) {
		int Offset = 0;
		ASMReg A = SC_Pac_xC2xB5(Self, ((Message*)JB_Ring_First(Prms)), kSC__Reg_AddrRequest);
		return SC_Msg_RFWR(Exp, A, nil, 1, Offset);
	}
	if (Fn == SC__Comp_RefSetRef) {
		ASMReg Out = SC_Pac_GetASM(Self, ((Message*)JB_Ring_First(Prms)), kSC__Reg_AddrRequest);
		ASMReg From = SC_Pac_xC2xB5(Self, ((Message*)JB_Tree_Second(Prms)), kSC__Reg_AddrRequest);
		if (SC_Reg_Reg(Out) == SC_Reg_Reg(From)) {
			return SC_Msg_NOOP(Exp);
		}
		int Offset = 0;
		if (!SC_Reg_SyntaxIs(Out, kSC__Reg_ContainsAddr)) {
			if (SC_Reg_SyntaxIs(From, kSC__Reg_ContainsAddr)) {
				From = SC_Pac_InlineOffsetOpt(Self, From, 2, (&Offset), ((1 << 13) - 1));
				return SC_Msg_RFRD(Exp, Out, From, 1, Offset);
			}
			return SC_Msg_RFST(Exp, Out, From);
		}
		if (SC_Reg_SyntaxIs(From, kSC__Reg_ContainsAddr)) {
			Message* P = ((Message*)JB_Tree_Second(Prms));
			ASMReg Where = SC_Pac_TempOnly(Self, P, kSC__Reg_Temp);
			Where = SC_Reg_xC2xB5TypeSet(Where, kJB__TC__voidptr);
			From = SC_FAT_AsReg(SC_Pac_Read(Self, Where, P, From, nil, 0), Where);
		}
		Out = SC_Pac_InlineOffsetOpt(Self, Out, 2, (&Offset), ((1 << 13) - 1));
		return SC_Msg_RFWR(Exp, Out, From, 1, Offset);
	}
	if (Fn == SC__Comp_RefIncr2) {
		ASMReg A = SC_Pac_xC2xB5(Self, ((Message*)JB_Ring_First(Prms)), kSC__Reg_AddrRequest);
		int Offset = 0;
		A = SC_Pac_InlineOffsetOpt(Self, A, 2, (&Offset), ((1 << 13) - 1));
		ASMReg B = SC_Pac_xC2xB5(Self, ((Message*)JB_Tree_Second(Prms)), SC_Reg__New());
		return SC_Msg_RFWR(Exp, A, B, 0, Offset);
	}
	 else {
		ASMReg A = SC_Pac_xC2xB5(Self, ((Message*)JB_Ring_First(Prms)), SC_Reg__New());
		if (Fn == SC__Comp_RefIncr) {
			FatASM* P = SC_Pac_LastWithAsm(Self, kSC__ASM_GSTR);
			if (P) {
				if ((SC_uint_OperatorSameReg(SC_FAT_r0(P), SC_Reg_Reg(A))) and (SC_FAT_r1(P) == 0)) {
					(SC_FAT_r1SetWithUint(P, 1));
					return P;
				}
			}
			return SC_Msg_RFST(Exp, SC_Reg__New(), A);
		}
		if (Fn == SC__Comp_RefDecr) {
			FatASM* P = SC_Pac_LastWith0(Self);
			// what;
			if (SC_FAT_OperatorIsa(P, kSC__ASM_RFST)) {
				if ((SC_uint_OperatorSameReg(SC_FAT_r1(P), SC_Reg_Reg(A))) and (SC_FAT_r0(P) == 0)) {
					P->_Op = kSC__ASM_RFAP;
					(SC_FAT_r0SetWithUint(P, P->R[1]));
					(SC_FAT_r1SetWithUint(P, 0));
					return P;
				}
			}
			 else if (SC_FAT_OperatorIsa(P, kSC__ASM_GSTR)) {
				if (SC_uint_OperatorSameReg(SC_FAT_r0(P), SC_Reg_Reg(A)) and (SC_FAT_r1(P) == 1)) {
					return nil;
				}
			}
			return SC_Msg_RFST(Exp, A, SC_Reg__New());
		}
		if (Fn == SC__Comp_RefSafeDecr) {
			return SC_Msg_RFAP(Exp, SC_Reg__New(), A, SC_Reg__New());
		}
	}
	return SC_Msg_EROR(Exp, SC_Reg__New(), SC_Reg__New(), SC_Reg__New(), SC_Reg__New(), 0);
}

void SC_Pac_RegsBitClear(ASMState* Self, Message* Exp, int RegAddrs, SCFunction* Fn) {
	{
		int _currf0 = ((int)RegAddrs);
		while (_currf0) {
			int B = JB_int_LowestBit(_currf0);
			int I = JB_Int_Log2(B);
			SCDecl* Arg = ((SCDecl*)JB_Array_Value(Fn->Args, I));
			if (Arg and (Arg->PointerCount == 1)) {
				SCDecl* In = Arg->Internal;
				if (In and (SC_Decl_IsNormal(In) and (!SC_Decl_IsFloat(In)))) {
					int S = 64 - SC_Decl_SizeOfQuery(In);
					if (S >= 0) {
						SC_Msg_BFLG(Exp, SC_int_ToASM(I), SC_int_ToASM(I), S, S, 0);
					}
				}
			}
			_currf0 = (_currf0 & (~B));
		};
	};
}

void SC_Pac_RestoreParameters(ASMState* Self) {
	{
		Array* _LoopSrcf2 = SC_Pac_fn(Self)->Args;
		int _if0 = JB_Array_Size(_LoopSrcf2) - 1;
		while (true) {
			SCDecl* A = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (A == nil) {
				break;
			}
			SC_Pac_MakeConstFromASM(Self, A, nil, nil);
			A->FatConstIndex = 0;
			SC_Decl_Paramfix(A);
			(--_if0);
		};
	};
}

void SC_Pac_Rewind(ASMState* Self, FatASM* Start) {
	SC_Pac_NopRange(Self, Start, SC_Pac_Curr(Self));
}

ASMReg SC_Pac_SafeDecr(ASMState* Self) {
	ASMReg Rz = ((ASMReg)0);
	FatASM* Fat = SC_Pac_LastWithAsm(Self, kSC__ASM_RFAP);
	if (Fat) {
		uint Upon = Fat->R[1];
		if (Upon and ((!Fat->R[0]) and (!Fat->R[2]))) {
			SC_Pac_Nop(Self, Fat, 0);
			Rz = SC_Reg_RegSet(Rz, Upon);
		}
	}
	return Rz;
}

ASMReg SC_Pac_SelfDivide(ASMState* Self, ASMReg Dest, Message* Exp) {
	if (SC_Reg_IsInt(Dest)) {
		return SC_Pac_NumToReg(Self, Exp, 1, Dest, kJB__TC_Int);
	}
	if (!SC_Reg_IsBig(Dest)) {
		return SC_Pac_NumToReg(Self, Exp, 1065353216, Dest, kJB__TC_Float);
	}
	return SC_Pac_NumToReg(Self, Exp, 4607182418800017408, Dest, kJB__TC_f64);
}

ASMReg SC_Pac_SetConst(ASMState* Self, Message* Exp, int64 Value, ASMReg Ml, ASMReg Dest) {
	FatASM* F = SC_Reg_FAT(Ml);
	if (F) {
		(SC_FAT_ConstSet(F, Value));
		return Ml;
	}
	if (!SC_Reg_Reg(Ml)) {
		if (!Value) {
			return Ml;
		}
		return SC_Pac_NumToReg(Self, Exp, Value, Dest, SC_Reg_xC2xB5Type(Ml));
	}
	SC_Reg_NeedFAT(Ml);
	return ((ASMReg)0);
}

bool SC_Pac_TextConst(ASMState* Self, Message* List, Message* Orig) {
	Message* RegMsg = JB_Msg_NeedSyx(List, kJB_SyxThg);
	Message* ValMsg = ((Message*)JB_Ring_NextSib(RegMsg));
	if (!ValMsg) {
		return nil;
	}
	uint64 Value = SC_Msg_ASMConst(ValMsg);
	SC_Pac_NumToReg(Self, Orig, Value, SC_int_TextASM(SC_Msg_Reg(RegMsg)), kJB__TC_uint64);
	return true;
}

bool SC_Pac_SetDeclToConst(ASMState* Self, SCDecl* Decl, ASMReg Initial, FatASM* F) {
	if ((SC_Reg_SyntaxIs(Initial, kSC__Reg_ConstOutput)) and ((!SC_Decl_SyntaxIs(Decl, kSC__SCDeclInfo_AlteredInBranch)))) {
		if (F) {
			(SC_Decl_SyntaxIsSet(Decl, kSC__SCDeclInfo_Const, true));
			Decl->ExportPosition = F->_Const;
			if (!SC_Reg_FatIndex(Initial)) {
			}
			Decl->FatConstIndex = SC_Reg_FatIndex(Initial);
			return true;
		}
	}
	return false;
}

ASMReg SC_Pac_SHL(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) {
		return SC_Pac_MakeConst2(Self, Dest, L, R, Exp, ((fn_ASMConstifier)(SC_ConstifyBitSHL)));
	}
	Ind K = SC_Pac_Const(Self, R, 6, false);
	if (JB_Ind_SyntaxCast(K)) {
		return SC_Pac_BFLG_Const(Self, Exp, Dest, L, K, 0);
	}
	return SC_Pac_BitMaker(Self, Dest, L, R, Exp, kSC__ASM_BSHL);
}

ASMReg SC_Pac_SHR(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	if (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstOutput)) {
		return SC_Pac_MakeConst2(Self, Dest, L, R, Exp, ((fn_ASMConstifier)(((fn_ASMConstifier)JB_Ternary(SC_Reg_Signed(L), ((fn_ASMConstifier)(SC_ConstifyBitSHS)), ((fn_ASMConstifier)(((fn_ASMConstifier)SC_ConstifyBitSHR))))))));
	}
	Ind K = SC_Pac_Const(Self, R, 6, false);
	if (JB_Ind_SyntaxCast(K)) {
		return SC_Pac_BFLG_Const(Self, Exp, Dest, L, 0, K);
	}
	ASM_Shift Op = ((ASM_Shift)JB_Ternary(SC_Reg_Signed(L), kSC__ASM_BSHS, ((ASM_Shift)kSC__ASM_BSHR)));
	return SC_Pac_BitMaker(Self, Dest, L, R, Exp, Op);
}

ASMReg SC_Pac_SimpleTernary(ASMState* Self, ASMReg Dest, ASMReg Ma, ASMReg Mb, Message* Cond) {
	int Dr = SC_Reg_Reg(Dest);
	ASMReg Mc = ((ASMReg)JB_Ternary((Dr == SC_Reg_Reg(Ma)) or (Dr == SC_Reg_Reg(Mb)), SC_Reg__New(), ((ASMReg)Dest)));
	ASMReg xC2xB5 = SC_Pac_xC2xB5(Self, Cond, Mc);
	return SC_FAT_AsReg(SC_Msg_TERN(Cond, Dest, xC2xB5, Ma, Mb), Dest);
}

FatASM* SC_Pac_SmartSecretFat(ASMState* Self, ASMReg Thg) {
	FatASM* F = SC_Reg_FAT(Thg);
	if (F) {
		return F;
	}
	FatASM* Where = SC_Pac_LastWith0(Self);
	FatASM* Start = Self->FuncStart;
	int Reg = SC_Reg_Reg(Thg);
	while (Where >= Start) {
		if (Where->BlockNum != Self->BasicBlock) {
			return nil;
		}
		MaybeBool X = SC_FAT_SmartFatness(Where, Reg);
		if (JB_MaybeBool_KnownFalse(X)) {
			return nil;
		}
		if (JB_MaybeBool_KnownTrue(X)) {
			return Where;
		}
		(--Where);
	};
	return nil;
}

void SC_Pac_SofterNop(ASMState* Self, FatASM* Fat) {
	(SC_FAT_SetOpSet(Fat, kSC__ASM_NOOP));
}

void SC_Pac_SoftNop(ASMState* Self, FatASM* Fat, int Depth) {
	if (Depth > 5) {
	}
	{
		uint _irf0 = Fat->InputFats;
		int _if1 = 0;
		while (_if1 < (6)) {
			if (!(_irf0 & (1 << _if1))) {
				(++_if1);
				continue;
			}
			FatASM* F = (SC_FAT_Input(Fat, _if1));
			SC_Pac_DecrWithFatInt(Self, F, Depth + 1);
			(++_if1);
		};
	}
	;
	(SC_FAT_SetOpSet(Fat, kSC__ASM_NOOP));
}

ASMReg SC_Pac_Str(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	Dest = SC_Pac_TempOnly(Self, Exp, Dest);
	MessageID* Real = ((MessageID*)Exp->Name);
	Dest = SC_Reg_xC2xB5TypeSet(Dest, kJB__TC__voidptr);
	return SC_FAT_AsReg(SC_Msg_GSTR(Exp, Dest, 0, Real->ID), Dest);
}

ASMReg SC_Pac_Subtract(ASMState* Self, ASMReg Dest, ASMReg L, ASMReg R, Message* Exp) {
	L = SC_Reg_SyntaxIsSet(L, kSC__Reg_Alternate, true);
	return SC_Pac_Plus(Self, Dest, L, R, Exp);
}

FatASM* SC_Pac_RequestOp(ASMState* Self, ASM Code, Message* Dbg) {
	return SC_Msg_RequestOp(Dbg, Code);
}

void SC_Pac_Fail(ASMState* Self, Message* Where, JB_String* Msg) {
	SCFunction* F = SC_Func__CurrFunc();
	JB_Incr(F);
	F->xC2xB5Length = (SC_Pac_Curr(Self) - Self->FuncStart);
	JB_String* _tmPf0 = SC_Func_xC2xB5Render(F, nil);
	JB_Incr(_tmPf0);
	JB_Decr(F);
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
	if (true) {
		JB_Msg_Fail(Where, Msg);
	}
}

ASMReg SC_Pac_TempOnly(ASMState* Self, Message* Where, ASMReg T) {
	if (SC_Reg_Reg(T)) {
		return T;
	}
	int R = Self->VTmps - 1;
	if (R <= Self->VDecls) {
		JB_Msg_Fail(Where, JB_LUB[934]);
	}
	T = SC_Reg_RegSet(T, R);
	Self->VTmps = R;
	T = SC_Reg_SyntaxIsSet(T, kSC__Reg_RealConst, (!true));
	T = SC_Reg_SyntaxIsSet(T, kSC__Reg_Temp, true);
	return T;
}

ASMReg SC_Pac_TempTypedWithMsgRegDecl(ASMState* Self, Message* Where, ASMReg T, SCDecl* Type) {
	T = SC_Reg_xC2xB5TypeSet(T, Type->DataType);
	return SC_Pac_TempOnly(Self, Where, T);
}

ASMReg SC_Pac_TempTypedWithMsgReg(ASMState* Self, Message* Where, ASMReg T) {
	if (!SC_Reg_SyntaxIs(T, kSC__Reg_Textual)) {
		T = SC_Reg_xC2xB5TypeSet(T, SC_Msg_ASMDecl(Where)->DataType);
	}
	return SC_Pac_TempOnly(Self, Where, T);
}

ASMReg SC_Pac_Ternary(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	ASMReg Rz = ((ASMReg)0);
	Message* Prms = ((Message*)JB_Tree_Second(Exp));
	Message* Cond = ((Message*)JB_Ring_First(Prms));
	Message* A = ((Message*)JB_Ring_NextSib(Cond));
	Message* B = ((Message*)JB_Ring_NextSib(A));
	uint DestType = SC_Decl_TypeOnly(SC_Msg_ASMDecl(Exp));
	ASMReg mA = SC_Pac_ExistingVar(Self, A, kSC__VarUseMode_Sometimes);
	ASMReg mB = SC_Pac_ExistingVar(Self, B, kSC__VarUseMode_Sometimes);
	if ((SC_Reg_OperatorIsa(mA, DestType)) and ((SC_Reg_OperatorIsa(mB, DestType)) and (!JB_TC_IsFloat(DestType)))) {
		return SC_Pac_SimpleTernary(Self, Dest, mA, mB, Cond);
	}
	Dest = SC_Pac_TempTypedWithMsgReg(Self, Exp, Dest);
	FatRange TernTest = ((FatRange){});
	ASMReg TT = SC_Pac_Branch(Self, Cond, (&TernTest), false);
	MaybeBool KK = TernTest.Constness;
	if (JB_MaybeBool_IsKnown(KK)) {
		Message* Which = ((Message*)JB_Ternary(JB_MaybeBool_Default(KK), A, B));
		Rz = SC_Pac_xC2xB5Into(Self, Which, Dest);
	}
	 else {
		ASMReg xC2xB5A = SC_Pac_xC2xB5Into(Self, A, Dest);
		FatASM* Exit = SC_Msg_Jump(Exp);
		SC_Pac_AllJumpTo(Self, (&TernTest), nil);
		Rz = SC_Pac_xC2xB5Into(Self, B, Dest);
		FatASM* Fa = SC_Reg_FAT(xC2xB5A);
		FatASM* fB = SC_Reg_FAT(Rz);
		if (fB) {
			SC_FAT_PrmWithIntReg(fB, 5, xC2xB5A);
		}
		 else if (((bool)Fa)) {
			JB_DoAt(1);
			(++Fa->xC2xB5RefCount);
		}
		SC_FAT_JumpToSet(Exit, SC_Pac_Curr(Self), Self);
	}
	return Rz;
}

void SC_Pac_TextFuncSub(ASMState* Self, Message* M) {
	Self->VDecls = 31;
	{
		Message* _LoopSrcf2 = SC_Pac_LoadTitle(Self, M);
		Message* Ch = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			if (JB_Msg_EqualsSyx(Ch, kJB_SyxName, false)) {
				SC_Pac_AddLabel(Self, Ch);
			}
			 else {
				SC_Pac_TextOp(Self, Ch);
			}
			Ch = _Nf1;
		};
		;
	};
}

void SC_Pac_TextOp(ASMState* Self, Message* M) {
	if (!SC_Pac_TextOpSub(Self, M)) {
		JB_DoAt(1);
		SC_Pac_TextOpSub(Self, M);
	}
}

bool SC_Pac_TextOpSub(ASMState* Self, Message* M) {
	if (JB_Msg_EqualsSyx(M, kJB_SyxRel, false)) {
		Message* Dest = JB_Msg_NeedSyx(M, kJB_SyxThg);
		if (!Dest) {
			return nil;
		}
		Message* funcMsg = SC_Msg_GetASMFunc(Dest);
		if (!funcMsg) {
			return nil;
		}
	}
	if (!JB_Msg_Expect(M, kJB_SyxTmp, nil)) {
		return nil;
	}
	Instruction* Op = SC_Instruction__SyntaxAccessWithMsg(M);
	if (!Op) {
		return nil;
	}
	Message* List = ((Message*)JB_Ring_First(M));
	if (!((List == nil) or ((JB_Msg_EqualsSyx(List, kJB_SyxList, false)) or (JB_Msg_EqualsSyx(List, kJB_SyxBra, false))))) {
		JB_Msg_Fail(M, nil);
		return nil;
	}
	if (SC_Instruction_IsSetConst(Op)) {
		return SC_Pac_TextConst(Self, List, M);
	}
	FatASM* A = SC_Pac_RequestOp(Self, Op->OpCode, M);
	M->RangeLength = SC_FAT_Index(A);
	int Pos = 0;
	{
		Message* P = ((Message*)JB_Ring_First(List));
		while (P) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(P));
			if (!JB_Msg_EqualsSyx(P, kJB_SyxName, false)) {
				SC_FAT_AddRegParam(A, P, Pos);
			}
			 else {
				SC_FAT_AddLabelRequest(A, P, Pos);
			}
			if ((++Pos) > Op->PCount) {
				JB_Msg_Fail(List, JB_LUB[1377]);
				return nil;
			}
			P = _Nf2;
		};
		;
	}
	;
	bool _tmPf0 = (Op->PCount == Pos);
	if (!_tmPf0) {
		JB_Msg_Fail(List, JB_LUB[1378]);
		return nil;
	}
	return _tmPf0;
}

ASMReg SC_Pac_ThgASM(ASMState* Self, SCDecl* D) {
	ASMReg T = SC_Reg_OperatorAs(SC_Decl_WholeType(D), kSC__Reg_FromExistingVar);
	T = (SC_Reg_SyntaxIsSet(T, kSC__Reg_Param, (SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Param))));
	if ((!SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_AlteredInBranch))) {
		int Fi = D->FatConstIndex;
		if (Fi) {
			FatASM* F = SC_uint_FAT(((uint)Fi));
			if (SC_FAT_SyntaxIs(F, kSC__Reg_ConstOutput)) {
				T = SC_Reg_SyntaxIsSet(T, kSC__Reg_ConstOutput, true);
				T = SC_Reg_FatIndexSet(T, Fi);
			}
		}
	}
	int Rr = SC_Reg_Reg(T);
	if (Rr) {
		ASMReg Ret = Self->State.Return;
		if (Rr and (Rr == SC_Reg_Reg(Ret))) {
			(T = SC_Reg_SyntaxIsSet(T, kSC__Reg_Temp, SC_Reg_SyntaxIs(Ret, kSC__Reg_Temp)));
		}
	}
	return T;
}

ASMReg SC_Pac_TryInline(ASMState* Self, Message* Prms, ASMReg Dest, SCFunction* Fn, int AllowedGain) {
	ASMReg Rz = ((ASMReg)0);
	FatASM* Start = SC_Pac_Curr(Self);
	InlineBlock Old = Self->State;
	if ((!SC_Reg_Reg(Dest)) and Fn->ReturnType) {
		if (SC_Reg_SyntaxIs(Dest, kSC__Reg_Discard)) {
		}
		 else {
			Dest = SC_Pac_TempOnly(Self, Prms, Dest);
		}
	}
	if (!SC_Reg_SyntaxIs(Dest, kSC__Reg_ExitFunction)) {
		Self->TailInlineable = false;
	}
	 else if (Self->State.InlineDepth == 0) {
		Self->TailInlineable = true;
	}
	int D = (++Self->State.InlineDepth);
	Self->DeepestInline = JB_int_OperatorMax(D, Self->DeepestInline);
	Self->State.Fn = Fn;
	Dest = SC_Reg_Simplify(Dest);
	Dest = SC_Reg_xC2xB5TypeSet(Dest, SC_Func_RegType(Fn));
	Self->State.Return = Dest;
	Self->State.VDecls = Self->VDecls;
	Self->State.BranchDepth = 0;
	Rz = SC_Pac_TryInlineSub(Self, Prms, Fn, AllowedGain);
	Self->State = Old;
	if (!Rz) {
		SC_Pac_Rewind(Self, Start);
	}
	return Rz;
}

ASMReg SC_Pac_TryInlineSub(ASMState* Self, Message* Prms, SCFunction* Fn, int AllowedGain) {
	FatRange LL = ((FatRange){});
	LL.Start = SC_Pac_Curr(Self);
	SC_Pac_InlineParameters(Self, Prms);
	FatASM* RealStart = SC_Pac_Curr(Self);
	SC_Func_GenASM(Fn);
	SC_Pac_RestoreParameters(Self);
	LL.After = SC_Pac_Curr(Self);
	ASMReg Result = SC_Pac_InlineFinishWithConsts(Self, (&LL));
	int Grown = SC_Pac_CurrGain(Self, RealStart);
	if (Grown <= AllowedGain) {
		return Result;
	}
	return ((ASMReg)0);
}

bool SC_Pac_Unchanged(ASMState* Self, Message* A, ASMReg Dest, Message* B) {
	int Dr = SC_Reg_Reg(Dest);
	return (!SC_Pac_FoundReg(Self, A, Dr)) or (!SC_Pac_FoundReg(Self, B, Dr));
}

ASMReg SC_Pac_Unhoist(ASMState* Self, SC_Hoister* H) {
	{
		SCDecl** _firstf0 = (&H->Items[0]);
		int _if1 = 0;
		while (_if1 < (6)) {
			SCDecl* D = _firstf0[_if1];
			if (!D) {
				break;
			}
			D->NilReg = 0;
			FatASM* F = SC_Decl_Fat(D);
			if (F) {
				if (SC_FAT_IsUnused(F)) {
					SC_Pac_Nop(Self, F, 0);
				}
			}
			(++_if1);
		};
	}
	;
	return ((ASMReg)0);
}

ASMReg SC_Pac_UniqueLocation(ASMState* Self, Message* A, ASMReg Dest, Message* B) {
	ASMReg Rz = ((ASMReg)0);
	if (SC_Reg_Reg(Dest)) {
		if ((SC_Reg_SyntaxIs(Dest, kSC__Reg_Declaration)) or SC_Pac_Unchanged(Self, A, Dest, B)) {
			return Dest;
		}
	}
	Rz = SC_Pac_TempOnly(Self, A, kSC__Reg_Temp);
	Rz = (SC_Reg_SyntaxIsSet(Rz, kSC__Reg_Negate, (SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate))));
	Rz = SC_Reg_xC2xB5TypeSet(Rz, SC_Reg_xC2xB5Type(Dest));
	return Rz;
}

int SC_Pac_VDeclsExit(ASMState* Self, ASMReg Dest) {
	if ((SC_Reg_SyntaxIs(Dest, kSC__Reg_ExitAtAll)) and Self->State.Return) {
		return Self->State.VDecls;
	}
	return Self->VDecls;
}

ASMReg SC_Pac_While(ASMState* Self, Message* Exp, ASMReg Dest, int Mode) {
	ASMReg Rz = ((ASMReg)0);
	SC_Hoister H = ((SC_Hoister){});
	uint OV = SC_Pac_OpenVars(Self);
	SC_Hoi_HoistLoop((&H), ((Message*)JB_Ring_First(Exp)));
	(++Self->State.BranchDepth);
	Rz = SC_Pac_WhileSub(Self, Exp);
	(--Self->State.BranchDepth);
	SC_Pac_CloseVars(Self, OV);
	SC_Pac_Unhoist(Self, (&H));
	return Rz;
}

ASMReg SC_Pac_WhileSub(ASMState* Self, Message* Exp) {
	FatASM* InitialJump = SC_Msg_Jump(Exp);
	ASMReg Returns = SC_ASMType__ArgSub(Self, ((Message*)JB_Tree_Second(Exp)), nil);
	FatRange Loop_test = ((FatRange){});
	ASMReg LT = SC_Pac_Branch(Self, ((Message*)JB_Ring_First(Exp)), (&Loop_test), false);
	if (SC_FatRange_Never((&Loop_test))) {
		SC_Pac_NopRange(Self, InitialJump, Loop_test.Start);
		return SC_Reg__New();
	}
	if (SC_FatRange_Always((&Loop_test))) {
		SC_Pac_Nop(Self, InitialJump, 0);
		if (Loop_test.After != Loop_test.Start) {
			SC_Pac_NopRange(Self, Loop_test.Start, Loop_test.After);
		}
		SC_FAT_JumpToSet(SC_Msg_Jump(Exp), InitialJump + 1, Self);
		(++Loop_test.After);
	}
	 else {
		SC_FAT_JumpToSet(InitialJump, Loop_test.Start, Self);
		SC_Pac_AllJumpTo(Self, (&Loop_test), InitialJump + 1);
	}
	SC_Pac_LoopFill(Self, InitialJump + 1, Loop_test.Start, Loop_test.After);
	return SC_Reg_OperatorMul(Returns, SC_FatRange_Always((&Loop_test)));
}

FatASM* SC_Pac_ZeroMemory(ASMState* Self, int Index, Message* Exp, ASMReg Base, ASMReg VarAdd, SCDecl* D) {
	if (!(D and ((!Index) and (!SC_Reg_Reg(VarAdd))))) {
		JB_Msg_Fail(Exp, nil);
	}
	if (D) {
		Index = SC_Decl_SizeOfQuery(D);
		if (!((Index < 524288) and (Index > 0))) {
			JB_Msg_Fail(Exp, JB_LUB[1140]);
		}
	}
	return SC_Msg_MEMZ(Exp, Base, Index);
}

ASMReg SC_Pac_Zeros(ASMState* Self, ASMReg Dest) {
	ASMReg Rz = ((ASMReg)0);
	Rz = SC_Reg__New();
	Rz = (SC_Reg_SyntaxIsSet(Rz, kSC__Reg_ConstInput, (SC_Reg_SyntaxIs(Dest, kSC__Reg_ConstInput))));
	Rz = SC_Reg_xC2xB5TypeSet(Rz, SC_Reg_xC2xB5Type(Dest));
	return Rz;
}

ASMReg SC_Pac_xC2xB5(ASMState* Self, Message* Exp, ASMReg Dest) {
	ASMReg Rz = ((ASMReg)0);
	uint Closer = SC_Pac_OpenVars(Self);
	Rz = SC_Pac_GetASM(Self, Exp, Dest);
	SC_Pac_CloseVars(Self, Closer);
	return Rz;
}

ASMReg SC_Pac_xC2xB5BoolInto(ASMState* Self, Message* Exp, ASMReg Dest) {
	ASMReg X = SC_Pac_ExistingVar(Self, Exp, 0);
	if (!X) {
		X = SC_Pac_xC2xB5Into(Self, Exp, Dest);
	}
	if (((!JB_TC_SyntaxIs(SC_Reg_xC2xB5Type(X), kJB__TC_bool))) or (SC_Reg_SyntaxIs(Dest, kSC__Reg_Negate) and (!SC_Reg_SyntaxIs(X, kSC__Reg_AlreadyNegated)))) {
		return SC_Pac_Exists(Self, SC_Reg_OperatorAs(Dest, (SC_Reg_OperatorBitand(X, kSC__Reg_FromExistingVar))), X, Exp);
	}
	return SC_Pac_Assign(Self, Dest, X, Exp);
}

ASMReg SC_Pac_xC2xB5Into(ASMState* Self, Message* Exp, ASMReg Dest) {
	ASMReg R = SC_Pac_xC2xB5(Self, Exp, Dest);
	if (SC_Reg_Reg(R) == SC_Reg_Reg(Dest)) {
		return R;
	}
	ASMReg Dest2 = SC_Reg_RegSet(R, SC_Reg_ToInt(Dest));
	Dest2 = (SC_Reg_SyntaxIsSet(Dest2, kSC__Reg_Temp, (SC_Reg_SyntaxIs(Dest, kSC__Reg_Temp))));
	return SC_Pac_Assign(Self, Dest2, R, Exp);
}

ASMReg SC_Pac_xC2xB5Reffed(ASMState* Self, Message* Exp, ASMReg Dest) {
	ASMReg Rz = ((ASMReg)0);
	Rz = SC_Pac_GetASM(Self, Exp, Dest);
	FatASM* F = SC_Reg_FAT(Rz);
	if (F) {
		(++F->xC2xB5RefCount);
	}
	return Rz;
}

int SC_Pac__Init_() {
	{
		SC__Pac_Sh = ((ASMState){});
	}
	;
	return 0;
}

void adb(Message* Exp) {
	//visible;
	JB_PrintLine(JB_LUB[1345]);
	JB_Str_PrintLine(SC_Func_Render(SC_Func__CurrFunc(), nil));
	ASMState* S = (&SC__Pac_Sh);
	if (Exp) {
		JB_Str_PrintLine(JB_Msg_Render(Exp, nil));
	}
	 else {
		S->LastDebug = S->FuncStart;
	}
	FatASM* Curr = S->LastDebug;
	while (Curr < SC_Pac_Curr(S)) {
		SC_FAT_DebugPrint(Curr);
		(++Curr);
	};
	S->LastDebug = Curr;
}






























































SCDecl* SC_Object_AsDecl(JB_Object* Self) {
	if (JB_Object_FastIsa(Self, &SCClassData)) {
		return ((SCClass*)Self)->TypeNormal;
	}
	 else if (JB_Object_FastIsa(Self, &SCModuleData)) {
		SCClass* C = ((SCModule*)Self)->Cls;
		if (C) {
			return C->TypeNormal;
		}
	}
	 else {
		return SC_Object_BaseAsDecl(Self);
	}
	return nil;
}

SCDecl* SC_Object_BaseAsDecl(JB_Object* Self) {
	if (JB_Object_FastIsa(Self, &SCDeclData)) {
		return ((SCDecl*)Self);
	}
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		return ((SCFunction*)Self)->ReturnType;
	}
	return nil;
}

SCNode* SC_Object_ClassOrModule(JB_Object* Self) {
	if (JB_Object_FastIsa(Self, &SCModuleData)) {
		SCClass* C = ((SCModule*)Self)->Cls;
		if (C) {
			return C;
		}
		return ((SCModule*)Self);
	}
	return nil;
}

__lib__ void jdb(JB_Object* Self) {
	//visible;
	if (Self) {
		JB_StringC* _tmPf0 = JB_Str__Wrap(JB_ObjClass(Self)->Name);
		JB_Incr(_tmPf0);
		JB_Print(_tmPf0);
		JB_Decr(_tmPf0);
		JB_Print(JB_LUB[77]);
	}
	JB_String* _tmPf1 = JB_ObjRender(Self, nil);
	JB_Incr(_tmPf1);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
}

bool JB_Object_MustBe(JB_Object* Self, JB_Class* X, Message* ErrNode) {
	if (JB_Object_Isa(Self, X)) {
		return true;
	}
	if (Self) {
		JB_FreeIfDead(JB_Object_TypeFailed(Self, X, ErrNode));
	}
	return false;
}

JB_Object* JB_Object_As(JB_Object* Self, JB_Class* X) {
	if (JB_Object_Isa(Self, X)) {
		return Self;
	}
	if (Self) {
		return JB_Object_TypeFailed(Self, X, nil);
	}
	return nil;
}

JB_Object* JB_Object_FastAs(JB_Object* Self, JB_Class* X) {
	if (Self) {
		if (JB_ObjClass(Self) == X) {
			return Self;
		}
		return JB_Object_TypeFailed(Self, X, nil);
	}
	return nil;
}

bool JB_Object_FastIsa(JB_Object* Self, JB_Class* X) {
	return (Self) and (JB_ObjClass(Self) == X);
}

bool JB_Object_Isa(JB_Object* Self, JB_Class* Cls) {
	if (Self) {
		JB_Class* P = JB_ObjClass(Self);
		while (P) {
			if (P == Cls) {
				return true;
			}
			P = P->Parent;
		};
	}
	return false;
}

bool JB_Object_OperatorMustBe(JB_Object* Self, JB_Class* X) {
	return JB_Object_MustBe(Self, X, nil);
}

void JB_Object_SaveTryCollect(JB_Object* Self, ObjectSaver* Saver) {
	if (JB_Object_Isa(Self, &SaveableData)) {
		if (!JB_Sav_SaveMark(((Saveable*)Self))) {
			return;
		}
		JB_Array_SyntaxAppend(JB_Sav_SaverInfo(((Saveable*)Self)), ((Saveable*)Self));
		JB_Sav___SaveCollect__(((Saveable*)Self), Saver);
	}
	 else if (Self) {
		if (!JB_Object_Isa(Self, &JB_StringData)) {
			Saver->CantSaveThis = Self;
		}
	}
}

void JB_Object_FailStr(JB_Object* Self, JB_String* Error) {
	//visible;
	if (JB_Object_Isa(Self, &MessageData)) {
		JB_Rec__NewErrorWithNode(((Message*)Self), Error, nil);
	}
	 else {
		JB_Rec__NewErrorWithNode(nil, Error, nil);
	}
}

void JB_Object_Fail(JB_Object* Self) {
	JB_PrintLine(kJB__Rec_NonFatal);
	JB_CrashTracer();
	FastString* _fsf0 = JB_FS_Constructor(nil);
	JB_Incr(_fsf0);
	JB_String* _tmPf1 = JB_int64_StrSize(JB_MemCount(), nil);
	JB_Incr(_tmPf1);
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(_fsf0, JB_LUB[743]);
	JB_String* _tmPf2 = JB_FS_GetResult(_fsf0);
	JB_Incr(_tmPf2);
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf2);
	JB_Decr(_tmPf2);
	JB_Rec__NewErrorWithNode(nil, kJB__Rec_NonFatal, nil);
}

JB_Object* JB_Object_TypeFailed(JB_Object* Self, JB_Class* Cls, Message* Where) {
	JB_String* Name = JB_cstring_Str(JB_ObjClass(Self)->Name);
	JB_Incr(Name);
	if (true) {
		JB_String* _tmPf1 = JB_Str_OperatorPlusWithCstring(JB_LUB[807], Cls->Name);
		JB_Incr(_tmPf1);
		JB_String* _tmPf0 = JB_Str_OperatorPlus(Name, _tmPf1);
		JB_Incr(_tmPf0);
		JB_Decr(_tmPf1);
		JB_Msg_Fail(Where, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Name);
	return nil;
}


JB_String* JB_AppArgument_Name(JB_Object* Self) {
	if (JB_Object_Isa(Self, &JB_StringData)) {
		return JB_Str_ArgName(((JB_String*)Self));
	}
	if (JB_Object_Isa(Self, &MessageData)) {
		return JB_Msg_ArgName(((Message*)Self));
	}
	return JB_LUB[0];
}

JB_String* JB_AppArgument_Value(JB_Object* Self) {
	if (JB_Object_Isa(Self, &JB_StringData)) {
		return JB_Str_ArgValue(((JB_String*)Self));
	}
	if (JB_Object_Isa(Self, &MessageData)) {
		return JB_Msg_ArgValue(((Message*)Self));
	}
	return JB_LUB[0];
}



Array* JB_CS_Bytes(CharSet* Self) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	{
		int _if0 = -1;
		while (JB_CS_NextInCharset(Self, (&_if0))) {
			uint B = ((byte)_if0);
			JB_Array_SyntaxAppend(Rz, JB_byte_Render(B, nil));
		};
	}
	;
	return Rz;
}

bool JB_CS_NextInCharset(CharSet* Self, int* P) {
	int I = P[0];
	while ((++I) < 256) {
		if (JB_CS_HasChar(Self, I)) {
			P[0] = I;
			return true;
		}
	};
	return false;
}

bool JB_CS_OperatorContains(CharSet* Self, JB_String* Data) {
	return (!JB_Ind_SyntaxCast(JB_Str_OutCharSet(Data, Self, 0, JB_int__Max())));
}


void SC_CppRefs_AddOne(CppRefs* Self, Message* C) {
	if ((JB_Msg_SyntaxEquals(C, JB_LUB[36], true))) {
	}
	 else if ((JB_Msg_SyntaxEquals(C, JB_LUB[180], true))) {
		Self->DisturbParams = (Self->DisturbParams | 1);
	}
	 else if ((JB_Msg_EqualsSyx(C, kJB_SyxNum, false))) {
		Self->DisturbParams = (Self->DisturbParams | (JB_Msg_Int(C, 0) << 1));
	}
	 else {
		JB_Array_SyntaxAppend(SC_CppRefs_DisturbsGet(Self), C->Name);
	}
}

CppRefs* SC_CppRefs_Constructor(CppRefs* Self, Message* S) {
	if (Self == nil) {
		Self = ((CppRefs*)JB_NewClass(&CppRefsData));
	}
	Self->DisturbParams = 0;
	Self->Owned = false;
	JB_Incr2(Self->Disturbs, JB_Array_Constructor0(nil));
	if (S) {
		SC_CppRefs_Read(Self, S);
	}
	return Self;
}

void SC_CppRefs_Destructor(CppRefs* Self) {
	JB_Clear(Self->Disturbs);
}

Array* SC_CppRefs_DisturbsGet(CppRefs* Self) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	JB_Incr(Rz);
	Array* Ds = Self->Disturbs;
	JB_Incr(Ds);
	if (JB_Array_SyntaxCast(Ds)) {
		JB_Decr(Rz);
		JB_SafeDecr(Ds);
		return Ds;
	}
	JB_SetRef(Rz, JB_Array_Constructor0(nil));
	JB_SetRef(Self->Disturbs, Ds);
	JB_Decr(Ds);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_CppRefs_Read(CppRefs* Self, Message* Node) {
	SC_CppRefs_SetDefaultRefStatus(Self);
	Message* Arg = JB_Msg_NeedSyx(Node, kJB_SyxArg);
	JB_Incr(Arg);
	if (!Arg) {
		JB_Decr(Arg);
		return;
	}
	JB_Msg_ExpectLast(Arg, JB_LUB[0]);
	{
		Message* C = ((Message*)JB_Ring_First(Arg));
		JB_Incr(C);
		while (C) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(C));
			JB_Incr(_Nf1);
			JB_Msg_Expect(C, kJB_SyxTmp, nil);
			if (!((JB_Msg_SyntaxEquals(C, JB_LUB[1092], false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[1093], false)))) {
				JB_Msg_Fail(C, JB_LUB[1094]);
				JB_Decr(_Nf1);
				JB_Decr(C);
				JB_Decr(Arg);
				return;
			}
			Message* Ch = ((Message*)JB_Ring_First(C));
			JB_Incr(Ch);
			if ((JB_Msg_EqualsSyx(Ch, kJB_SyxBra, false))) {
				Ch->Func = kJB_SyxPrm;
			}
			if (!((JB_Msg_EqualsSyx(Ch, kJB_SyxThg, false)) or ((JB_Msg_EqualsSyx(Ch, kJB_SyxPrm, false)) or (JB_Msg_EqualsSyx(Ch, kJB_SyxNum, false))))) {
				JB_Msg_Fail(Ch, nil);
				JB_Decr(Ch);
				JB_Decr(_Nf1);
				JB_Decr(C);
				JB_Decr(Arg);
				return;
			}
			JB_Msg_ExpectLast(Ch, JB_LUB[0]);
			JB_Decr(Ch);
			JB_SetRef(C, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(C);
		;
	}
	;
	if (!JB_Rec_OK(JB_StdErr)) {
		JB_Decr(Arg);
		return;
	}
	Message* _tmPf4 = JB_Msg_FindSyxName(Arg, kJB_SyxTmp, JB_LUB[1095], false);
	JB_Incr(_tmPf4);
	Message* Disown = ((Message*)JB_Tree_Get(_tmPf4, 0));
	JB_Incr(Disown);
	JB_Decr(_tmPf4);
	if (Disown) {
		Self->Owned = (!SC_Msg_TrueOrFalse(Disown));
	}
	JB_Decr(Disown);
	Message* _tmPf5 = JB_Msg_FindSyxName(Arg, kJB_SyxTmp, JB_LUB[1092], false);
	JB_Incr(_tmPf5);
	JB_Decr(Arg);
	Message* Stuff = ((Message*)JB_Tree_Get(_tmPf5, 0));
	JB_Incr(Stuff);
	JB_Decr(_tmPf5);
	if (Stuff) {
		JB_Array_Clear(Self->Disturbs);
		Self->DisturbParams = 0;
		if ((!JB_Msg_EqualsSyx(Stuff, kJB_SyxList, false))) {
			SC_CppRefs_AddOne(Self, Stuff);
		}
		 else {
			{
				Message* C = ((Message*)JB_Ring_First(Stuff));
				JB_Incr(C);
				while (C) {
					Message* _Nf3 = ((Message*)JB_Ring_NextSib(C));
					JB_Incr(_Nf3);
					SC_CppRefs_AddOne(Self, C);
					JB_SetRef(C, _Nf3);
					JB_Decr(_Nf3);
				};
				JB_Decr(C);
				;
			};
		}
	}
	JB_Decr(Stuff);
}

void SC_CppRefs_SetDefaultRefStatus(CppRefs* Self) {
	Self->Owned = false;
	JB_SetRef(Self->Disturbs, JB_Array_Constructor0(nil));
	Self->DisturbParams = -1;
	Array* _tmPf0 = SC_CppRefs_DisturbsGet(Self);
	JB_Incr(_tmPf0);
	JB_Array_SyntaxAppend(_tmPf0, JB_LUB[435]);
	JB_Decr(_tmPf0);
}

SCNode* SC_CppRefs__Linkage(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	Message* _tmPf0 = JB_Msg_NeedSyx(Node, kJB_SyxArg);
	JB_Incr(_tmPf0);
	SCNode* _tmPf1 = SC_Base_ProcessLinkage(Name_space, _tmPf0, SC_ClassLinkageTable);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCNode* SC_CppRefs__ReadIntoCppRefs(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCModule* _tmPf0 = SC_Base_SpaceModule(Name_space, nil);
	JB_Incr(_tmPf0);
	if (!_tmPf0) {
		JB_Decr(_tmPf0);
		return nil;
	}
	SC_CppRefs_Read(_tmPf0->DefaultRefs, Node);
	JB_Decr(_tmPf0);
	return SC__Comp_program;
}


void SC_Cpp_AppendCppField(Cpp_Export* Self, JB_String* Prop, FastStringCpp* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[41]);
	JB_FS_AppendString(Fs, Prop);
	JB_FS_AppendByte(Fs, ';');
}

void SC_Cpp_AppendPropField(Cpp_Export* Self, SCDecl* Prop, FastStringCpp* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[41]);
	SC_Cpp__WriteDecl(Prop, Fs, nil);
	JB_FS_AppendByte(Fs, ';');
}

bool SC_Cpp_CanExportFunc(Cpp_Export* Self, SCFunction* F) {
	if (!(F->MyReacher or SC_Func_SyntaxIs(F, kSC__FunctionType_API))) {
		return nil;
	}
	if (SC_Func_SyntaxIs(F, kSC__FunctionType_Disabled)) {
		return nil;
	}
	if (!SC_Func_SyntaxIs(F, kSC__FunctionType_ExternalLib)) {
		if (!(((!SC_Func_SyntaxIs(F, kSC__FunctionType_Wrapper))) and (!F->IsMacro))) {
			return nil;
		}
	}
	return (!SC_Func_SyntaxIs(F, kSC__FunctionType_NewStruct)) and (!SC_Func_SyntaxIs(F, kSC__FunctionType_AlreadyExported));
}

bool SC_Cpp_CanOpt(Cpp_Export* Self, bool Force) {
	if (Force) {
		return true;
	}
	SCClass* C = SC__Cpp_CurrClass;
	if (C) {
		return (!C->MinOpt);
	}
	return false;
}

void SC_Cpp_Codify(Cpp_Export* Self, SCModule* Scb, JB_String* fName) {
	JB_Incr(fName);
	SCClass* Cls = Scb->Cls;
	JB_Incr(Cls);
	if (!JB_Str_Exists(fName)) {
		JB_SetRef(fName, ((JB_String*)JB_Ternary(Cls, Cls->ExportName, Scb->ExportName)));
	}
	if (Scb == SC__Comp_program) {
		JB_SetRef(fName, JB_LUB[7]);
	}
	Array* ModuleFuncs = SC_Base_ListFunctions(Scb);
	JB_Incr(ModuleFuncs);
	if (!(Cls or (JB_Array_SyntaxCast(ModuleFuncs) or Scb->Access))) {
		JB_Decr(fName);
		JB_Decr(ModuleFuncs);
		JB_Decr(Cls);
		return;
	}
	JB_SetRef(SC__Cpp_CurrClass, Cls);
	JB_String* _tmPf0 = JB_Str_OperatorPlus(fName, JB_LUB[1616]);
	JB_Incr(_tmPf0);
	FastStringCpp* File = SC_Cpp_StreamChild(Self, _tmPf0);
	JB_Incr(File);
	JB_Decr(_tmPf0);
	JB_FS_AppendString(Self->HeaderProj, JB_LUB[1675]);
	JB_FS_AppendString(Self->HeaderProj, fName);
	JB_Decr(fName);
	JB_FS_AppendByte(Self->HeaderProj, '\n');
	SC_Cpp_ExportModuleProperties(Self, Scb, Self->ModuleProperties);
	if (Cls and SC_Class_NeedsExport(Cls)) {
		SC_Cpp_ExportClass(Self, Cls, Self->ModuleProperties);
		SC_Cpp_OptStart(Self, File, Cls->MinOpt, true);
		Array* _tmPf1 = SC_Base_ListFunctions(Cls);
		JB_Incr(_tmPf1);
		SC_Cpp_CodifyFuncs(Self, File, _tmPf1);
		JB_Decr(_tmPf1);
		SC_Cpp_OptEnd(Self, File, Cls->MinOpt, true);
	}
	JB_Decr(Cls);
	SC_Cpp_CodifyFuncs(Self, File, ModuleFuncs);
	JB_Decr(ModuleFuncs);
	JB_Decr(File);
	JB_SetRef(SC__Cpp_CurrClass, nil);
}

void SC_Cpp_CodifyFuncs(Cpp_Export* Self, FastStringCpp* File, Array* List) {
	{
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(List, _if0));
			if (F == nil) {
				break;
			}
			if (((!SC_Func_SyntaxIs(F, kSC__FunctionType_Inline))) and SC_Cpp_CanExportFunc(Self, F)) {
				SC_Cpp_CppFunc(Self, File, F);
			}
			(++_if0);
		};
	}
	;
	(SC_Func__CurrFuncSet(nil));
}

void SC_Cpp_CodifyInlines(Cpp_Export* Self) {
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			if ((SC_Func_SyntaxIs(F, kSC__FunctionType_Inline)) and SC_Cpp_CanExportFunc(Self, F)) {
				SC_Cpp_CppFunc(Self, Self->Inlines, F);
			}
			(++_if0);
		};
	}
	;
	(SC_Func__CurrFuncSet(nil));
}

Cpp_Export* SC_Cpp_Constructor(Cpp_Export* Self) {
	if (Self == nil) {
		Self = ((Cpp_Export*)JB_NewClass(&Cpp_ExportData));
	}
	Array* _tmPf0 = (JB_Array_Constructor0(nil));
	JB_Incr(_tmPf0);
	JB_Incr2(Self->Outputs_cpp, _tmPf0);
	JB_Decr(_tmPf0);
	Array* _tmPf1 = (JB_Array_Constructor0(nil));
	JB_Incr(_tmPf1);
	JB_Incr2(Self->Outputs_h, _tmPf1);
	JB_Decr(_tmPf1);
	JB_Incr2(Self->T, SC_FastStringCpp_Constructor(nil, JB_LUB[0]));
	JB_Incr2(Self->AllTypes, SC_Cpp_StreamChild(Self, JB_LUB[1676]));
	JB_Incr2(Self->Syxes, SC_Cpp_StreamChild(Self, JB_LUB[1677]));
	JB_Incr2(Self->TypesProj, SC_Cpp_StreamChild(Self, JB_LUB[1678]));
	JB_Incr2(Self->LibGlobs, SC_Cpp_StreamChild(Self, JB_LUB[1679]));
	JB_Incr2(Self->HeaderProj, SC_Cpp_StreamChild(Self, JB_LUB[1163]));
	JB_Incr2(Self->Inlines, SC_Cpp_StreamChild(Self, JB_LUB[1680]));
	JB_Incr2(Self->ModuleProperties, SC_Cpp_StreamChild(Self, JB_LUB[1681]));
	SC_Cpp__Init();
	return Self;
}

void SC_Cpp_CppFunc(Cpp_Export* Self, FastStringCpp* Fs, SCFunction* F) {
	(SC_Func__CurrFuncSet(F));
	(SC_Func_SyntaxIsSet(F, kSC__FunctionType_AlreadyExported, true));
	JB_String* FuncHeader = SC_Cpp_FuncHeader(Self, F);
	if (!JB_Str_Exists(FuncHeader)) {
		return;
	}
	SC_Cpp_SetupFlow(Self, F);
	SC_Cpp_FuncStart(Self, Fs, F, FuncHeader);
	JB_Msg_Export(SC_Func_SourceArg(F), Fs);
	SC_Cpp_OptEnd(Self, Fs, F->MinOpt, 0);
	JB_FS_AppendString(Fs, JB_LUB[1592]);
}

void SC_Cpp_Destructor(Cpp_Export* Self) {
	JB_Clear(Self->Outputs_cpp);
	JB_Clear(Self->ModuleProperties);
	JB_Clear(Self->Inlines);
	JB_Clear(Self->Syxes);
	JB_Clear(Self->LibGlobs);
	JB_Clear(Self->HeaderProj);
	JB_Clear(Self->TypesProj);
	JB_Clear(Self->AllTypes);
	JB_Clear(Self->T);
	JB_Clear(Self->Outputs_h);
}

void SC_Cpp_ExportBehaviourHeader(Cpp_Export* Self, SCClass* Cls) {
	if (Cls->IsRole) {
		return;
	}
	SCBehaviour* B = Cls->Behaviour;
	JB_Incr(B);
	if (B) {
		SC_Cpp_ExportStruct(Self, B->FuncTable->Cls, true);
	}
	JB_Decr(B);
}

bool SC_Cpp_ExportBehaviourInstance(Cpp_Export* Self, SCClass* Cls, FastStringCpp* Fs) {
	SCBehaviour* B = Cls->Behaviour;
	JB_Incr(B);
	if (!B) {
		JB_Decr(B);
		return nil;
	}
	SCClass* TableCls = B->FuncTable->Cls;
	JB_Incr(TableCls);
	JB_String* N = SC_Class_CStructName(TableCls);
	JB_Incr(N);
	JB_Decr(TableCls);
	JB_String* CN = SC_Class_CStructName(Cls);
	JB_Incr(CN);
	JB_FS_AppendString(Fs, N);
	JB_FS_AppendString(Fs, JB_LUB[1246]);
	JB_FS_AppendString(Fs, CN);
	JB_FS_AppendString(Fs, JB_LUB[1247]);
	JB_FS_AppendString(Fs, N);
	JB_FS_AppendString(Fs, JB_LUB[1248]);
	SC_FastStringCpp_AppendBehaviour(Fs, JB_LUB[0], Cls->DestructorFunc, nil);
	while (B) {
		{
			Dictionary* _LoopSrcf3 = B->Interfaces;
			JB_Incr(_LoopSrcf3);
			DictionaryReader* _navf1 = JB_Dict_Navigate(_LoopSrcf3);
			JB_Incr(_navf1);
			JB_Decr(_LoopSrcf3);
			while (true) {
				SCModule* M = ((SCModule*)JB_DictionaryReader_NextValue(_navf1));
				JB_Incr(M);
				if (M == nil) {
					JB_Decr(M);
					break;
				}
				JB_String* S = SC_Str_InterfaceToBehaviour(M->Name);
				JB_Incr(S);
				SCFunction* Fn = SC_Class_BestBehaviourFor(Cls, S);
				JB_Incr(Fn);
				if (Fn) {
					SCClass* BaseClass = SC_Class_InterfaceForBehaviour(Cls, Fn);
					JB_Incr(BaseClass);
					if (BaseClass) {
						if (M->IsRequiredInterface and (!JB_FreeIfDead(SC_Base_SyntaxAccessWithStr(Cls->Behaviour, S)))) {
							JB_String* Msg = JB_Str_OperatorPlus(JB_LUB[1249], Cls->Name);
							JB_Incr(Msg);
							if (true) {
								JB_Msg_Fail(Cls->Source, Msg);
							}
							if (true) {
								JB_Msg_Fail(BaseClass->FuncProto->Source, Msg);
							}
							JB_Decr(Msg);
						}
						SC_FastStringCpp_AppendBehaviour(Fs, S, Fn, BaseClass);
					}
					JB_Decr(BaseClass);
				}
				 else {
					if (true) {
						JB_String* _tmPf4 = JB_Str_OperatorPlus(JB_LUB[1249], S);
						JB_Incr(_tmPf4);
						JB_Msg_Fail(Cls->Source, _tmPf4);
						JB_Decr(_tmPf4);
					}
				}
				JB_Decr(M);
				JB_Decr(S);
				JB_Decr(Fn);
			};
			JB_Decr(_navf1);
		}
		;
		JB_SetRef(B, SC_Beh_Upwards(B));
	};
	JB_Decr(B);
	JB_FS_AppendString(Fs, JB_LUB[1250]);
	//;
	JB_FS_AppendString(Fs, N);
	JB_Decr(N);
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_AppendString(Fs, CN);
	JB_FS_AppendString(Fs, JB_LUB[1251]);
	JB_FS_AppendString(Fs, CN);
	JB_Decr(CN);
	JB_FS_AppendString(Fs, JB_LUB[1252]);
	//;
	return true;
}

void SC_Cpp_ExportClass(Cpp_Export* Self, SCClass* Cls, FastStringCpp* CppFile) {
	JB_Incr(Cls);
	if (SC_Class_IsDataTypeOrFP(Cls)) {
		JB_Decr(Cls);
		return;
	}
	if (SC_Class_IsBehaviourTable(Cls)) {
		JB_Decr(Cls);
		return;
	}
	if (Cls->IsRole == 1) {
		JB_Decr(Cls);
		return;
	}
	if (Cls->IsRole != 2) {
		if (Cls->IsWrapper) {
			SC_Cpp_ExportBehaviourHeader(Self, Cls);
		}
		if (Cls->IsWrapper) {
			JB_Decr(Cls);
			return;
		}
		if (SC_Class_IsStruct(Cls)) {
			SC_Cpp_ExportStruct(Self, Cls, false);
			JB_Decr(Cls);
			return;
		}
	}
	FastStringCpp* HFile = Self->TypesProj;
	JB_Incr(HFile);
	if (!Cls->IsRole) {
		SC_Cpp_ExportBehaviourHeader(Self, Cls);
	}
	JB_FS_AppendString(HFile, JB_LUB[1593]);
	JB_String* _tmPf4 = SC_Class_CStructName(Cls);
	JB_Incr(_tmPf4);
	JB_FS_AppendString(HFile, _tmPf4);
	JB_Decr(_tmPf4);
	JB_FS_AppendString(HFile, JB_LUB[1594]);
	if (Cls->Super) {
		JB_String* _tmPf5 = SC_Class_CStructName(Cls->Super);
		JB_Incr(_tmPf5);
		JB_FS_AppendString(HFile, _tmPf5);
		JB_Decr(_tmPf5);
	}
	 else {
		JB_FS_AppendString(HFile, JB_LUB[1595]);
	}
	JB_FS_AppendString(HFile, JB_LUB[1594]);
	{
		Array* _LoopSrcf3 = Cls->Properties;
		JB_Incr(_LoopSrcf3);
		int _if1 = 0;
		while (true) {
			SCDecl* Prop = ((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1));
			JB_Incr(Prop);
			if (Prop == nil) {
				JB_Decr(Prop);
				break;
			}
			JB_FS_AppendString(HFile, JB_LUB[41]);
			SC_Cpp__WriteDecl(Prop, HFile, nil);
			JB_Decr(Prop);
			JB_FS_AppendByte(HFile, ';');
			(++_if1);
		};
		JB_Decr(_LoopSrcf3);
	}
	;
	JB_FS_AppendString(HFile, JB_LUB[1596]);
	JB_Decr(HFile);
	if (!Cls->IsRole) {
		bool HasTable = SC_Cpp_ExportBehaviourInstance(Self, Cls, CppFile);
		//;
		JB_FS_AppendString(CppFile, JB_LUB[1597]);
		JB_String* _tmPf6 = SC_Class_CStructName(Cls);
		JB_Incr(_tmPf6);
		JB_FS_AppendString(CppFile, _tmPf6);
		JB_Decr(_tmPf6);
		JB_FS_AppendString(CppFile, JB_LUB[10]);
		JB_String* _tmPf7 = SC_Class_CSuperStructName(Cls);
		JB_Incr(_tmPf7);
		JB_FS_AppendString(CppFile, _tmPf7);
		JB_Decr(_tmPf7);
		JB_FS_AppendString(CppFile, JB_LUB[10]);
		//;
		if ((!HasTable)) {
			JB_SetRef(Cls, SC_TypeObject);
		}
		JB_String* _tmPf8 = SC_Class_CStructName(Cls);
		JB_Incr(_tmPf8);
		JB_FS_AppendString(CppFile, _tmPf8);
		JB_Decr(_tmPf8);
		JB_FS_AppendString(CppFile, JB_LUB[1598]);
	}
	JB_Decr(Cls);
}

void SC_Cpp_ExportModuleProperties(Cpp_Export* Self, SCModule* Modl, FastStringCpp* IntoModule) {
	FastStringCpp* Fs = ((FastStringCpp*)JB_Ternary(IntoModule, IntoModule, Self->TypesProj));
	JB_Incr(Fs);
	{
		DictionaryReader* _df0 = JB_Dict_Navigate(Modl->Access);
		JB_Incr(_df0);
		while (JB_Nav_MoveNext(_df0)) {
			SCDecl* Prop = SC_DictionaryReader_ValueDecl(_df0);
			JB_Incr(Prop);
			if (Prop) {
				SC_FastStringCpp_AddProperty(Fs, Prop, IntoModule != nil);
				JB_FS_AppendByte(Fs, '\n');
			}
			JB_Decr(Prop);
		};
		JB_Decr(_df0);
	}
	;
	JB_Decr(Fs);
}

bool SC_Cpp_ExportOneProperty(Cpp_Export* Self, SCClass* Cls, FastStringCpp* Fs, JB_String* Only) {
	{
		Array* _LoopSrcf2 = Cls->Properties;
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			SCDecl* Prop = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(Prop);
			if (Prop == nil) {
				JB_Decr(Prop);
				break;
			}
			if (JB_Str_Equals(Prop->Name, Only, false)) {
				SC_Cpp_AppendPropField(Self, Prop, Fs);
				JB_Decr(Prop);
				JB_Decr(_LoopSrcf2);
				return true;
			}
			JB_Decr(Prop);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	return false;
}

void SC_Cpp_ExportProperties(Cpp_Export* Self, SCClass* Cls, FastStringCpp* Fs, JB_String* Ignore) {
	{
		Array* _LoopSrcf2 = Cls->Properties;
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			SCDecl* Prop = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(Prop);
			if (Prop == nil) {
				JB_Decr(Prop);
				break;
			}
			if (!JB_Str_Equals(Prop->Name, Ignore, false)) {
				SC_Cpp_AppendPropField(Self, Prop, Fs);
			}
			JB_Decr(Prop);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	};
}

void SC_Cpp_ExportStruct(Cpp_Export* Self, SCClass* Cls, bool IsBehaviour) {
	FastStringCpp* Fs = Self->TypesProj;
	JB_Incr(Fs);
	SC_Class_WriteStructOrUnion(Cls, Fs);
	if (Cls->IsModel) {
		JB_FS_AppendString(Fs, JB_LUB[1387]);
	}
	JB_String* _tmPf0 = SC_Class_CStructName(Cls);
	JB_Incr(_tmPf0);
	JB_FS_AppendString(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	if (Cls->Super) {
		JB_FS_AppendString(Fs, JB_LUB[77]);
		JB_String* _tmPf1 = SC_Class_CStructName(Cls->Super);
		JB_Incr(_tmPf1);
		JB_FS_AppendString(Fs, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_FS_AppendString(Fs, JB_LUB[1388]);
	if (IsBehaviour) {
		if ((!Cls->Super)) {
			SC_Cpp_AppendCppField(Self, JB_LUB[1389], Fs);
			SC_Cpp_ExportOneProperty(Self, Cls, Fs, JB_LUB[1106]);
		}
		SC_Cpp_ExportProperties(Self, Cls, Fs, JB_LUB[1106]);
	}
	 else {
		SC_Cpp_ExportProperties(Self, Cls, Fs, nil);
	}
	JB_FS_AppendString(Fs, JB_LUB[1390]);
	JB_Decr(Fs);
}

void SC_Cpp_ExportSyx(Cpp_Export* Self) {
	if (!JB_Array_SyntaxCast(SC__Comp_SyxArray)) {
		return;
	}
	FastStringCpp* Fs = Self->Syxes;
	JB_Incr(Fs);
	{
		Array* _LoopSrcf3 = SC__Comp_SyxArray;
		JB_Incr(_LoopSrcf3);
		int _if1 = 0;
		while (true) {
			JB_String* Syx = ((JB_String*)JB_Array_Value(_LoopSrcf3, _if1));
			JB_Incr(Syx);
			if (Syx == nil) {
				JB_Decr(Syx);
				break;
			}
			int I = _if1;
			//;
			JB_FS_AppendString(Fs, JB_LUB[173]);
			JB_FS_AppendString(Fs, Syx);
			JB_Decr(Syx);
			JB_FS_AppendByte(Fs, ' ');
			JB_FS_AppendInt32(Fs, I);
			JB_FS_AppendByte(Fs, '\n');
			//;
			(++_if1);
		};
		JB_Decr(_LoopSrcf3);
	}
	;
	JB_Decr(Fs);
}

void SC_Cpp_FillInterpreter(Cpp_Export* Self) {
	JB_String* Lib_pack = SC_PackMaker__BuildInterpreter();
	JB_Incr(Lib_pack);
	SC_Cpp_ListAllFuncs(Self, Self->ModuleProperties, Lib_pack);
	JB_Decr(Lib_pack);
}

void SC_Cpp_FillLibGlobs(Cpp_Export* Self, FastStringCpp* Fs, bool Simple) {
	JB_FS_AppendString(Fs, JB_LUB[1321]);
	{
		Array* _LoopSrcf2 = SC__PackMaker_LibGlobs;
		int _if0 = 0;
		while (true) {
			SCDecl* Prop = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Prop == nil) {
				break;
			}
			if (Simple and (SC_Decl_Complexity(Prop) > 1)) {
				break;
			}
			if (Simple and SC_Decl_IsObject(Prop)) {
				JB_FS_AppendString(Fs, JB_LUB[1322]);
				SC_FastStringCpp_AppendLibGlob(Fs, Prop);
			}
			 else {
				SC_Cpp__WriteDecl(Prop, Fs, nil);
			}
			JB_FS_AppendString(Fs, JB_LUB[1323]);
			(++_if0);
		};
	}
	;
	(JB_FS_LengthSet(Fs, Fs->Length - 1));
	JB_FS_AppendString(Fs, JB_LUB[1324]);
}

void SC_Cpp_FinalMergeOutputIntoACpp(Cpp_Export* Self) {
	FastStringCpp* Fs = SC_FastStringCpp_Constructor(nil, JB_LUB[0]);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, JB_LUB[1353]);
	JB_String* _tmPf10 = SC_Cpp__CppLicence();
	JB_Incr(_tmPf10);
	JB_FS_AppendString(Fs, _tmPf10);
	JB_Decr(_tmPf10);
	SC_FS_IncludeH(Fs, JB_LUB[1354]);
	SC_FS_IncludeH(Fs, JB_LUB[1163]);
	{
		Array* _LoopSrcf3 = SC__Cpp_H_PostInput;
		JB_Incr(_LoopSrcf3);
		int _if1 = 0;
		while (true) {
			JB_String* H = ((JB_String*)JB_Array_Value(_LoopSrcf3, _if1));
			JB_Incr(H);
			if (H == nil) {
				JB_Decr(H);
				break;
			}
			SC_FS_IncludeH(Fs, H);
			JB_Decr(H);
			(++_if1);
		};
		JB_Decr(_LoopSrcf3);
	}
	;
	if (!SC__Options_TargetDebug) {
		JB_FS_AppendString(Fs, JB_LUB[1355]);
	}
	JB_FS_AppendString(Fs, JB_LUB[1356]);
	JB_FS_AppendString(Fs, JB_LUB[1336]);
	SC_Cpp__GenLub(Fs);
	//;
	JB_FS_AppendString(Fs, JB_LUB[1336]);
	JB_String* _tmPf11 = SC_Class_CStructName(SC_TypeObject->Behaviour->FuncTable->Cls);
	JB_Incr(_tmPf11);
	JB_FS_AppendString(Fs, _tmPf11);
	JB_Decr(_tmPf11);
	JB_FS_AppendString(Fs, JB_LUB[1357]);
	//;
	if (SC_Cpp__DoSavers()) {
		SC_Cpp__CreateClassListHeader(Fs, JB_LUB[576]);
	}
	SC_Cpp__GenStrings(Self->ModuleProperties);
	JB_String* _tmPf12 = JB_FS_SyntaxCast(Self->ModuleProperties);
	JB_Incr(_tmPf12);
	JB_File* _tmPf13 = SC_Cpp__Product(JB_LUB[1358]);
	JB_Incr(_tmPf13);
	SC_Cpp__SmartWrite(_tmPf12, _tmPf13);
	JB_Decr(_tmPf12);
	JB_Decr(_tmPf13);
	(JB_FS_LengthSet(Self->ModuleProperties, 0));
	{
		Array* _LoopSrcf6 = Self->Outputs_cpp;
		JB_Incr(_LoopSrcf6);
		int _if4 = 0;
		while (true) {
			FastStringCpp* F = ((FastStringCpp*)JB_Array_Value(_LoopSrcf6, _if4));
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			JB_String* _tmPf14 = SC_Cpp__SplitCpp(F, F->Cpp_Name);
			JB_Incr(_tmPf14);
			JB_Decr(F);
			JB_FS_AppendString(Fs, _tmPf14);
			JB_Decr(_tmPf14);
			(++_if4);
		};
		JB_Decr(_LoopSrcf6);
	}
	;
	if (SC_Cpp__DoSavers()) {
		SC_Cpp__CreateClassListFunc(Fs);
	}
	JB_FS_AppendString(Fs, JB_LUB[1359]);
	{
		Array* _LoopSrcf9 = SC__Cpp_Cpp_Includes;
		JB_Incr(_LoopSrcf9);
		int _if7 = 0;
		while (true) {
			JB_String* I = ((JB_String*)JB_Array_Value(_LoopSrcf9, _if7));
			JB_Incr(I);
			if (I == nil) {
				JB_Decr(I);
				break;
			}
			JB_FS_AppendByte(Fs, ' ');
			JB_FS_AppendString(Fs, I);
			JB_Decr(I);
			(++_if7);
		};
		JB_Decr(_LoopSrcf9);
	}
	;
	JB_String* _tmPf15 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf15);
	JB_Decr(Fs);
	JB_File* _tmPf16 = SC_Cpp__CppProduct();
	JB_Incr(_tmPf16);
	SC_Cpp__SmartWrite(_tmPf15, _tmPf16);
	JB_Decr(_tmPf15);
	JB_Decr(_tmPf16);
}

JB_String* SC_Cpp_FuncHeader(Cpp_Export* Self, SCFunction* F) {
	JB_String* Rz = JB_LUB[0];
	JB_Incr(Rz);
	SC_Cpp__WriteFunctionHeader(F, Self->T);
	JB_SetRef(Rz, JB_FS_GetResult(Self->T));
	JB_FS_AppendString(Self->HeaderProj, Rz);
	JB_FS_AppendString(Self->HeaderProj, JB_LUB[1572]);
	if (SC_Func_SyntaxIs(F, kSC__FunctionType_ExternalLib)) {
		JB_SetRef(Rz, JB_LUB[0]);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Cpp_FuncStart(Cpp_Export* Self, FastStringCpp* Fs, SCFunction* F, JB_String* Funcheader) {
	if (SC_Func_SyntaxIs(F, kSC__FunctionType_API)) {
		JB_FS_AppendString(Fs, JB_LUB[531]);
	}
	SC_Cpp_OptStart(Self, Fs, F->MinOpt, 0);
	JB_FS_AppendString(Fs, Funcheader);
	(JB_FS_LengthSet(Self->T, 0));
	JB_FS_AppendByte(Fs, ' ');
}

void SC_Cpp_LibAPI_Cpp(Cpp_Export* Self) {
	JB_File* WriteTo = SC_Cpp__APIHeader();
	JB_Incr(WriteTo);
	if (WriteTo) {
		FastStringCpp* File = SC_Cpp_StreamChild(Self, JB_LUB[1682]);
		JB_Incr(File);
		JB_FS_AppendString(File, JB_LUB[1683]);
		JB_FS_AppendString(File, JB_LUB[1684]);
		SC_Cpp_CodifyFuncs(Self, File, SC__Comp_API_Funcs);
		JB_FS_AppendString(File, JB_LUB[1685]);
		JB_FS_AppendString(File, JB_LUB[1686]);
		JB_Decr(File);
		SC_Cpp_WriteAPIHeader(Self, WriteTo);
	}
	JB_Decr(WriteTo);
}

void SC_Cpp_ListAllFuncs(Cpp_Export* Self, FastStringCpp* Fs, JB_String* Lib_pack) {
	JB_FS_AppendString(Fs, JB_LUB[1733]);
	{
		Array* _LoopSrcf3 = SC__PackMaker_LibFuncs;
		JB_Incr(_LoopSrcf3);
		int _if1 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf3, _if1));
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			if (F->IsCppInBuilt == 1) {
				SC_Cpp_MakeWrapperFor(Self, Fs, F);
			}
			JB_Decr(F);
			(++_if1);
		};
		JB_Decr(_LoopSrcf3);
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[1734]);
	{
		Array* _LoopSrcf6 = SC__PackMaker_LibFuncs;
		JB_Incr(_LoopSrcf6);
		int _if4 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf6, _if4));
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			JB_String* _tmPf10 = SC_Func_WrappedName(F);
			JB_Incr(_tmPf10);
			JB_Decr(F);
			SC_FS_appendvoid(Fs, _tmPf10, 0);
			JB_Decr(_tmPf10);
			(++_if4);
		};
		JB_Decr(_LoopSrcf6);
	}
	;
	SC_FS_appendvoid(Fs, JB_LUB[266], 0);
	{
		Array* _LoopSrcf9 = SC__PackMaker_LibGlobs;
		JB_Incr(_LoopSrcf9);
		int _if7 = 0;
		while (true) {
			SCDecl* G = ((SCDecl*)JB_Array_Value(_LoopSrcf9, _if7));
			JB_Incr(G);
			if (G == nil) {
				JB_Decr(G);
				break;
			}
			SC_FS_appendvoid(Fs, G->ExportName, '&');
			JB_Decr(G);
			(++_if7);
		};
		JB_Decr(_LoopSrcf9);
	}
	;
	SC_FS_appendvoid(Fs, JB_LUB[266], 0);
	JB_FS_AppendString(Fs, JB_LUB[1735]);
	JB_String* Pack_str = JB_Str_Compress(Lib_pack, kJB__MZLab_Default, nil);
	JB_Incr(Pack_str);
	if (!JB_FreeIfDead(JB_Str_Parse(Pack_str, kJB_SyxArg, true))) {
		JB_Str_Fail(JB_LUB[1736]);
	}
	JB_FS_AppendString(Fs, JB_LUB[1737]);
	SC_FS_AppendCpp(Fs, Pack_str);
	//;
	JB_FS_AppendString(Fs, JB_LUB[1738]);
	JB_FS_AppendInt32(Fs, JB_Str_Length(Pack_str));
	JB_Decr(Pack_str);
	JB_FS_AppendString(Fs, JB_LUB[1739]);
	//;
}

void SC_Cpp_MakeWrapperFor(Cpp_Export* Self, FastStringCpp* Fs, SCFunction* F) {
	JB_String* N = SC_Func_WrappedName(F);
	JB_Incr(N);
	SC_Cpp__WriteFuncSub(F, N, Fs);
	JB_Decr(N);
	JB_FS_AppendString(Fs, JB_LUB[1391]);
	if (F->ReturnType) {
		JB_FS_AppendString(Fs, JB_LUB[1392]);
	}
	JB_FS_AppendString(Fs, F->ExportName);
	SC_Cpp__WriteFuncArgs(F, Fs, true);
	JB_FS_AppendString(Fs, JB_LUB[1393]);
}

void SC_Cpp_OptEnd(Cpp_Export* Self, FastStringCpp* Fs, int M, bool Force) {
	if (M and SC_Cpp_CanOpt(Self, Force)) {
		JB_FS_AppendString(Fs, JB_LUB[42]);
	}
}

#pragma GCC optimize ("O3")
void SC_Cpp_OptStart(Cpp_Export* Self, FastStringCpp* Fs, int M, bool Force) {
	if (M and SC_Cpp_CanOpt(Self, Force)) {
		JB_String* S = JB_LUB[106];
		JB_Incr(S);
		if (M <= 3) {
			JB_SetRef(S, JB_int_RenderFS(M, nil));
		}
		//;
		JB_FS_AppendString(Fs, JB_LUB[443]);
		JB_FS_AppendString(Fs, S);
		JB_Decr(S);
		JB_FS_AppendString(Fs, JB_LUB[444]);
		//;
	}
}
#pragma GCC reset_options



void SC_Cpp_PreRun(Cpp_Export* Self) {
	JB_FS_AppendString(Self->AllTypes, JB_LUB[43]);
	JB_FS_AppendByte(Self->HeaderProj, '\n');
	FastStringCpp* Fs = Self->ModuleProperties;
	JB_FS_AppendString(Fs, JB_LUB[44]);
	JB_FS_AppendString(Fs, SC__Comp_ProjectName);
	JB_FS_AppendString(Fs, JB_LUB[45]);
	if (!SC__Options_TargetDebug) {
		JB_FS_AppendString(Fs, JB_LUB[46]);
	}
}

void SC_Cpp_Run(Cpp_Export* Self) {
	{
		Array* _LoopSrcf2 = SC__Comp_ClassList;
		int _if0 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf2, _if0));
			if (C == nil) {
				break;
			}
			if (!SC_Class_IsFunc(C)) {
				SC_Cpp__WriteType(C, Self->AllTypes, true);
			}
			(++_if0);
		};
	}
	;
	{
		Array* _LoopSrcf5 = SC__Comp_ClassList;
		int _if3 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf5, _if3));
			if (C == nil) {
				break;
			}
			if (SC_Class_IsFunc(C)) {
				SC_Cpp__WriteType(C, Self->AllTypes, false);
			}
			(++_if3);
		};
	}
	;
	{
		Array* _LoopSrcf8 = SC__Comp_ModuleList;
		int _if6 = 0;
		while (true) {
			SCModule* C = ((SCModule*)JB_Array_Value(_LoopSrcf8, _if6));
			if (C == nil) {
				break;
			}
			SC_Cpp_Codify(Self, C, JB_LUB[0]);
			(++_if6);
		};
	}
	;
	{
		Array* _LoopSrcf11 = SC__Comp_ModuleList;
		int _if9 = 0;
		while (true) {
			SCModule* C = ((SCModule*)JB_Array_Value(_LoopSrcf11, _if9));
			if (C == nil) {
				break;
			}
			SC_Cpp_ExportModuleProperties(Self, C, nil);
			(++_if9);
		};
	}
	;
	SC_Cpp_CodifyInlines(Self);
	if (SC__Options_ProjectIsLibrary) {
		SC_Cpp_LibAPI_Cpp(Self);
	}
}

void SC_Cpp_SetupFlow(Cpp_Export* Self, SCFunction* F) {
	(SC_Func__CurrFuncSet(F));
	if (SC__Options_GenFlowControlCode and ((!SC_Func_SyntaxIs(F, kSC__FunctionType_FlowDisabled)))) {
		JB_SetRef(SC__Cpp_IfName, JB_LUB[1360]);
		JB_SetRef(SC__Cpp_WhileName, JB_LUB[1361]);
		JB_SetRef(SC__Comp_TernaryFunc->ExportName, JB_LUB[1362]);
	}
	 else {
		JB_SetRef(SC__Cpp_IfName, JB_LUB[175]);
		JB_SetRef(SC__Cpp_WhileName, JB_LUB[176]);
		JB_SetRef(SC__Comp_TernaryFunc->ExportName, JB_LUB[1363]);
	}
}

FastStringCpp* SC_Cpp_StreamChild(Cpp_Export* Self, JB_String* S) {
	FastStringCpp* Rz = nil;
	JB_Incr(Rz);
	JB_String* _tmPf0 = JB_Str_TrimExtAndPath(S, true);
	JB_Incr(_tmPf0);
	JB_SetRef(Rz, SC_FastStringCpp_Constructor(nil, _tmPf0));
	JB_Decr(_tmPf0);
	if (JB_Str_OperatorIsa(S, JB_LUB[532])) {
		JB_Array_SyntaxAppend(Self->Outputs_h, Rz);
		JB_FS_AppendString(Rz, JB_LUB[533]);
		JB_FS_AppendString(Rz, S);
	}
	 else {
		JB_Array_SyntaxAppend(Self->Outputs_cpp, Rz);
	}
	JB_FS_AppendByte(Rz, '\n');
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Cpp_WriteAPIFuncHeader(Cpp_Export* Self, SCFunction* F, FastStringCpp* Fs) {
	SC__Cpp_WriteAPI = true;
	SC_Cpp__WriteFunctionHeader(F, Fs);
	SC__Cpp_WriteAPI = false;
}

void SC_Cpp_WriteAPIHeader(Cpp_Export* Self, JB_File* Destfile) {
	if (Destfile == nil) {
		return;
	}
	FastStringCpp* Fs = SC_FastStringCpp_Constructor(nil, JB_LUB[0]);
	JB_Incr(Fs);
	JB_String* _tmPf14 = SC_Cpp__CppLicence();
	JB_Incr(_tmPf14);
	JB_FS_AppendString(Fs, _tmPf14);
	JB_Decr(_tmPf14);
	JB_FS_AppendString(Fs, JB_LUB[1599]);
	{
		Array* _LoopSrcf7 = SC__Comp_API_List;
		JB_Incr(_LoopSrcf7);
		int _if5 = 0;
		while (true) {
			Message* M = ((Message*)JB_Array_Value(_LoopSrcf7, _if5));
			JB_Incr(M);
			if (M == nil) {
				JB_Decr(M);
				break;
			}
			if ((JB_Msg_SyntaxEquals(M, JB_LUB[1059], false))) {
				Message* F = ((Message*)JB_Ring_First(M));
				JB_Incr(F);
				SCClass* Cls = SC_Comp__SyntaxAccess(F);
				JB_Incr(Cls);
				JB_Decr(F);
				if (!Cls) {
					JB_Decr(Cls);
					JB_Decr(M);
					JB_Decr(_LoopSrcf7);
					JB_Decr(Fs);
					return;
				}
				if (SC_Class_IsObject(Cls)) {
					//;
					JB_FS_AppendString(Fs, JB_LUB[1600]);
					JB_String* _tmPf15 = SC_Class_APIStructName(Cls);
					JB_Incr(_tmPf15);
					JB_FS_AppendString(Fs, _tmPf15);
					JB_Decr(_tmPf15);
					JB_FS_AppendString(Fs, JB_LUB[1601]);
					//;
				}
				 else if (SC_Class_IsDataTypeOrFP(Cls)) {
					//;
					JB_FS_AppendString(Fs, JB_LUB[1602]);
					JB_String* _tmPf16 = SC_Class_CStructName(Cls->Super);
					JB_Incr(_tmPf16);
					JB_FS_AppendString(Fs, _tmPf16);
					JB_Decr(_tmPf16);
					JB_FS_AppendByte(Fs, ' ');
					JB_String* _tmPf17 = SC_Class_APIStructName(Cls);
					JB_Incr(_tmPf17);
					JB_FS_AppendString(Fs, _tmPf17);
					JB_Decr(_tmPf17);
					JB_FS_AppendString(Fs, JB_LUB[576]);
					//;
				}
				 else {
					if (true) {
						JB_Msg_Fail(M, JB_LUB[1603]);
					}
				}
				JB_Decr(Cls);
			}
			JB_Decr(M);
			(++_if5);
		};
		JB_Decr(_LoopSrcf7);
	}
	;
	SCClass* PrevCls = nil;
	JB_Incr(PrevCls);
	{
		Array* _LoopSrcf10 = SC__Comp_API_Funcs;
		JB_Incr(_LoopSrcf10);
		int _if8 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf10, _if8));
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			if (F->Cls != PrevCls) {
				JB_SetRef(PrevCls, F->Cls);
				JB_FS_AppendString(Fs, JB_LUB[1604]);
				if (PrevCls) {
					JB_FS_AppendString(Fs, PrevCls->Name);
				}
				 else {
					JB_FS_AppendString(Fs, JB_LUB[1605]);
				}
				JB_FS_AppendString(Fs, JB_LUB[1606]);
			}
			if ((!SC_Func_SyntaxIs(F, kSC__FunctionType_Wrapper))) {
				SC_Cpp_WriteAPIFuncHeader(Self, F, Fs);
			}
			JB_FS_AppendByte(Fs, ';');
			if (((JB_String*)JB_Str_Exists(F->Description))) {
				//;
				JB_FS_AppendString(Fs, JB_LUB[1607]);
				JB_FS_AppendString(Fs, F->Description);
				JB_FS_AppendString(Fs, JB_LUB[1608]);
				//;
			}
			JB_Decr(F);
			JB_FS_AppendByte(Fs, '\n');
			(++_if8);
		};
		JB_Decr(_LoopSrcf10);
	}
	;
	JB_Decr(PrevCls);
	if (((Array*)JB_Array_SyntaxCast(SC__Comp_SyxArray))) {
		JB_FS_AppendString(Fs, JB_LUB[1609]);
		{
			Array* _LoopSrcf13 = SC__Comp_SyxArray;
			JB_Incr(_LoopSrcf13);
			int _if11 = 0;
			while (true) {
				JB_String* S = ((JB_String*)JB_Array_Value(_LoopSrcf13, _if11));
				JB_Incr(S);
				if (S == nil) {
					JB_Decr(S);
					break;
				}
				JB_String* Slower = JB_Str_LowerCase(S);
				JB_Incr(Slower);
				SyntaxObj* _tmPf18 = ((SyntaxObj*)JB_Dict_Value0(JB__Constants__SyxDict, Slower));
				JB_Incr(_tmPf18);
				int Id = ((int)_tmPf18->ID);
				JB_Decr(_tmPf18);
				//;
				JB_FS_AppendString(Fs, JB_LUB[1610]);
				JB_FS_AppendString(Fs, S);
				JB_Decr(S);
				JB_FS_AppendByte(Fs, ' ');
				JB_FS_AppendInt32(Fs, Id);
				JB_FS_AppendString(Fs, JB_LUB[576]);
				//;
				//;
				JB_FS_AppendString(Fs, JB_LUB[1611]);
				JB_FS_AppendString(Fs, Slower);
				JB_Decr(Slower);
				JB_FS_AppendByte(Fs, ' ');
				JB_FS_AppendInt32(Fs, Id);
				JB_FS_AppendByte(Fs, '\n');
				//;
				(++_if11);
			};
			JB_Decr(_LoopSrcf13);
		};
	}
	JB_FS_AppendString(Fs, JB_LUB[1612]);
	JB_String* _tmPf19 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf19);
	JB_Decr(Fs);
	SC_Cpp__SmartWrite(_tmPf19, Destfile);
	JB_Decr(_tmPf19);
}

void SC_Cpp_WriteHeader(Cpp_Export* Self) {
	FastStringCpp* Fs = SC_FastStringCpp_Constructor(nil, JB_LUB[0]);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, JB_LUB[1364]);
	JB_String* _tmPf6 = SC_Cpp__CppLicence();
	JB_Incr(_tmPf6);
	JB_FS_AppendString(Fs, _tmPf6);
	JB_Decr(_tmPf6);
	if (SC_Linkage__VM()) {
		JB_FS_AppendString(Fs, JB_LUB[1365]);
	}
	JB_FS_AppendString(Fs, JB_LUB[1366]);
	{
		Array* _LoopSrcf2 = SC__Cpp_H_Input;
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			JB_String* H = ((JB_String*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(H);
			if (H == nil) {
				JB_Decr(H);
				break;
			}
			SC_FS_IncludeH(Fs, H);
			JB_Decr(H);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[1367]);
	{
		Array* _LoopSrcf5 = Self->Outputs_h;
		JB_Incr(_LoopSrcf5);
		int _if3 = 0;
		while (true) {
			FastStringCpp* F = ((FastStringCpp*)JB_Array_Value(_LoopSrcf5, _if3));
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			JB_FS_AppendFastString(Fs, F);
			JB_Decr(F);
			JB_FS_AppendByte(Fs, '\n');
			(++_if3);
		};
		JB_Decr(_LoopSrcf5);
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[1368]);
	JB_FS_AppendString(Fs, JB_LUB[1369]);
	SC_Cpp_FillLibGlobs(Self, Fs, true);
	JB_FS_AppendByte(Fs, '\n');
	JB_FS_AppendString(Fs, JB_LUB[1370]);
	JB_String* _tmPf7 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf7);
	JB_Decr(Fs);
	JB_File* _tmPf8 = SC_Cpp__HProduct();
	JB_Incr(_tmPf8);
	SC_Cpp__SmartWrite(_tmPf7, _tmPf8);
	JB_Decr(_tmPf7);
	JB_Decr(_tmPf8);
}

JB_File* SC_Cpp__APIHeader() {
	JB_File* Rz = nil;
	JB_Incr(Rz);
	Message* Arg = JB_Msg_Last(SC__Comp_API_Place, kJB_SyxArg);
	JB_Incr(Arg);
	Message* _tmPf1 = JB_Msg_FindSyxName(Arg, kJB_SyxTmp, JB_LUB[1058], false);
	JB_Incr(_tmPf1);
	Message* ForLib = JB_Msg_NeedSyx(_tmPf1, kJB_SyxStr);
	JB_Incr(ForLib);
	JB_Decr(_tmPf1);
	if (ForLib) {
		Message* _tmPf2 = JB_Msg_FindSyxName(Arg, kJB_SyxTmp, JB_LUB[1060], false);
		JB_Incr(_tmPf2);
		Message* FolName = JB_Msg_NeedSyx(_tmPf2, kJB_SyxStr);
		JB_Incr(FolName);
		JB_Decr(_tmPf2);
		if (FolName) {
			JB_File* Fol = JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, FolName->Name);
			JB_Incr(Fol);
			FastString* _fsf0 = JB_FS_Constructor(nil);
			JB_Incr(_fsf0);
			JB_FS_AppendString(_fsf0, JB_LUB[1096]);
			SCFile* _tmPf3 = SC_Msg_File(Arg);
			JB_Incr(_tmPf3);
			JB_FS_AppendString(_fsf0, _tmPf3);
			JB_Decr(_tmPf3);
			JB_String* _tmPf4 = JB_FS_GetResult(_fsf0);
			JB_Incr(_tmPf4);
			JB_Decr(_fsf0);
			if (JB_File_MustExist(Fol, _tmPf4)) {
				JB_String* _tmPf5 = JB_Str_OperatorPlus(SC__Comp_ProjectName, JB_LUB[1097]);
				JB_Incr(_tmPf5);
				JB_SetRef(Rz, JB_File_SyntaxAccess(Fol, _tmPf5));
				JB_Decr(_tmPf5);
			}
			JB_Decr(Fol);
			JB_Decr(_tmPf4);
		}
		JB_Decr(FolName);
	}
	JB_Decr(Arg);
	JB_Decr(ForLib);
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Cpp__C_OneParamType(FastStringCpp* Fs, Message* Curr, SCDecl* D) {
	if (!D) {
		return nil;
	}
	SCClass* ActualType = SC_ClassOfObjForC(Curr);
	JB_Incr(ActualType);
	if (!ActualType) {
		JB_Decr(ActualType);
		return nil;
	}
	if (ActualType != D->Type) {
		JB_FS_AppendByte(Fs, '(');
		JB_FS_AppendByte(Fs, '(');
		SC_Cpp__WriteDeclNoName(D, Fs);
		JB_FS_AppendByte(Fs, ')');
		JB_Decr(ActualType);
		return true;
	}
	JB_Decr(ActualType);
	return false;
}

void SC_Cpp__C_ParamsRender(Message* Self, FastStringCpp* Fs) {
	JB_FS_AppendByte(Fs, '(');
	{
		Message* Item = ((Message*)JB_Ring_First(Self));
		Message* _firstf2 = Item;
		while (Item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Item));
			if (_firstf2 != Item) {
				JB_FS_AppendString(Fs, JB_LUB[10]);
			}
			//start;
			SCDecl* Ty2 = ((SCDecl*)Item->Obj);
			JB_String* CloseStr = SC_Cpp__CDotType(Self, Ty2, Fs, false);
			JB_Msg_Export(Item, Fs);
			JB_FS_AppendString(Fs, CloseStr);
			Item = _Nf1;
		};
		;
	}
	;
	JB_FS_AppendByte(Fs, ')');
}

void SC_Cpp__C_RenderAcc(Message* Self, FastStringCpp* Fs) {
	JB_Msg_Export(((Message*)JB_Ring_First(Self)), Fs);
	JB_FS_AppendByte(Fs, '[');
	JB_Msg_Export(((Message*)JB_Ring_First(((Message*)JB_Tree_Second(Self)))), Fs);
	JB_FS_AppendByte(Fs, ']');
}

void SC_Cpp__C_RenderArel(Message* Self, FastStringCpp* Fs) {
	JB_Msg_Export(((Message*)JB_Ring_First(Self)), Fs);
	uint S = JB_Str_First(Self->Name);
	if ((S != '&') and (S != '!')) {
		JB_FS_AppendString(Fs, Self->Name);
	}
}

void SC_Cpp__C_RenderArg(Message* Self, FastStringCpp* Fs) {
	JB_FS_AppendByte(Fs, '{');
	(++Fs->Indent);
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			JB_FS_LineIndent(Fs);
			JB_Msg_Export(Ch, Fs);
			if (!(SC_Msg_OperatorIsTmp(Ch, JB_LUB[175]) or (SC_Msg_OperatorIsTmp(Ch, JB_LUB[445]) or SC_Msg_OperatorIsTmp(Ch, JB_LUB[446])))) {
				JB_FS_AppendByte(Fs, ';');
			}
			Ch = _Nf1;
		};
		;
	}
	;
	(--Fs->Indent);
	JB_FS_LineIndent(Fs);
	JB_FS_AppendByte(Fs, '}');
	if (((Message*)JB_Ring_NextSib(Self))) {
		JB_FS_LineIndent(Fs);
	}
}

void SC_Cpp__C_RenderBak(Message* Self, FastStringCpp* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
}

void SC_Cpp__C_RenderBra(Message* Self, FastStringCpp* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if (!(JB_Msg_OperatorIn(Self, kJB_SyxArg) and (JB_Msg_EqualsSyx(F, kJB_SyxThg, false)))) {
		JB_FS_AppendByte(Fs, '(');
		JB_Msg_Export(F, Fs);
		JB_FS_AppendByte(Fs, ')');
	}
}

void SC_Cpp__C_RenderBrel(Message* Self, FastStringCpp* Fs) {
	if (JB_Str_Equals(Self->Name, JB_LUB[48], false)) {
		SCDecl* Type = ((SCDecl*)Self->Obj);
		if (Type and SC_Decl_NeedsCppCarrayFix(Type)) {
			SC_Cpp__WriteDeclBrackets(Self, Fs);
		}
	}
	JB_FS_AppendByte(Fs, '(');
	JB_FS_AppendString(Fs, Self->Name);
	SC_Cpp__RenderInBracketsIfRel(((Message*)JB_Ring_First(Self)), Fs);
	JB_FS_AppendByte(Fs, ')');
}

void SC_Cpp__C_RenderChr(Message* Self, FastStringCpp* Fs) {
	JB_FS_AppendByte(Fs, '\'');
	uint B = JB_Str_First(Self->Name);
	if ((B < 32) and ((B != 9) and (B != 10))) {
		JB_FS_AppendString(Fs, JB_LUB[67]);
		JB_FS_AppendHex(Fs, B, 2);
	}
	 else {
		JB_String* _tmPf0 = JB_Str_EscapeChr(Self->Name);
		JB_Incr(_tmPf0);
		JB_FS_AppendString(Fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_FS_AppendByte(Fs, '\'');
}

void SC_Cpp__C_RenderDcl(Message* Self, FastStringCpp* Fs) {
	Message* Name = SC_Msg_GetDclName(Self, false);
	SCDecl* D = SC_Msg_AsDecl(Name);
	if (!D) {
		JB_Object_Fail(nil);
		return;
	}
	SC_Cpp__WriteDecl(D, Fs, SC_DeclsDefault(((Message*)JB_Ring_Last(Self))));
}

void SC_Cpp__C_RenderDot(Message* Self, FastStringCpp* Fs) {
	SCDecl* Type = SC_Msg_DotMustBeProperty(Self);
	if (!Type) {
		return;
	}
	Message* Ch = ((Message*)JB_Ring_First(Self));
	if (JB_Object_FastIsa(Ch->Obj, &SCModuleData)) {
		SC_Str_Safe(Type->ExportName, Fs, false);
	}
	 else {
		JB_String* CloseStr = SC_Cpp__CDotType(Self, Type, Fs, SC_Decl_SyntaxIs(Type, kSC__SCDeclInfo_UpgradeableContained));
		JB_Msg_Export(Ch, Fs);
		SCDecl* Ch_decl = SC_DeclOfObjForC(Ch);
		if (Ch_decl) {
			if (SC_Cpp__NeedsDotForC(Ch_decl)) {
				JB_FS_AppendByte(Fs, '.');
			}
			 else {
				JB_FS_AppendString(Fs, JB_LUB[1253]);
			}
		}
		SC_Str_Safe(Type->ExportName, Fs, false);
		JB_FS_AppendString(Fs, CloseStr);
	}
}

void SC_Cpp__C_RenderFnc(Message* Self, FastStringCpp* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	Message* Ch1 = ((Message*)JB_Ring_NextSib(F));
	SCFunction* Fn = ((SCFunction*)Ch1->Obj);
	bool PostBracket = false;
	if ((JB_Object_FastIsa(Fn, &SCFunctionData)) and (!Fn->ProtoType)) {
		if (((SCFunction*)Fn)->ReturnType and ((!JB_Msg_EqualsSyx(((Message*)JB_Ring_Parent(Self)), kJB_SyxArg, false)))) {
			PostBracket = SC_Cpp__C_OneParamType(Fs, Self, SC_Msg_BraDeclfind(Self));
		}
		JB_FS_AppendString(Fs, ((SCFunction*)Fn)->ExportName);
	}
	 else {
		JB_Msg_Export(F, Fs);
	}
	SC_Cpp__C_ParamsRender(Ch1, Fs);
	if (PostBracket) {
		JB_FS_AppendByte(Fs, ')');
	}
}

void SC_Cpp__C_RenderItem(Message* Self, FastStringCpp* Fs) {
	JB_Msg_Export(((Message*)JB_Tree_Second(Self)), Fs);
}

void SC_Cpp__C_RenderList(Message* Self, FastStringCpp* Fs) {
	JB_Object* D = Self->Obj;
	if (JB_Object_FastIsa(D, &SCDeclData)) {
		JB_FS_AppendString(Fs, ((SCDecl*)D)->Type->Name);
		SC_Msg_MiniArgCpp(Self, Fs);
	}
}

void SC_Cpp__C_RenderNum(Message* Self, FastStringCpp* Fs) {
	SCDecl* D = SC_Msg_FastDecl(Self);
	int64 Num = ((int64)D->ExportPosition);
	if (SC_Decl_IsFloat(D)) {
		JB_FS_AppendString(Fs, Self->Name);
		JB_FS_AppendByte(Fs, 'f');
	}
	 else if (Num) {
		JB_FS_AppendInt64(Fs, Num);
	}
	 else {
		JB_FS_AppendString(Fs, Self->Name);
	}
}

void SC_Cpp__C_RenderOpp(Message* Self, FastStringCpp* Fs) {
	JB_String* S = Self->Name;
	if (JB_Str_Equals(S, JB_LUB[47], false)) {
		JB_FS_AppendByte(Fs, '|');
	}
	 else if (JB_Str_Equals(S, JB_LUB[48], false)) {
		JB_FS_AppendByte(Fs, '&');
	}
	 else if (JB_Str_Equals(S, JB_LUB[49], false)) {
		JB_FS_AppendByte(Fs, '^');
	}
	 else if (JB_Str_Equals(S, JB_LUB[50], false)) {
		JB_FS_AppendByte(Fs, '~');
	}
	 else if (JB_Str_Equals(S, JB_LUB[51], false)) {
		JB_FS_AppendByte(Fs, '%');
	}
	 else {
		JB_FS_AppendString(Fs, S);
	}
}

void SC_Cpp__C_RenderRel(Message* Self, FastStringCpp* Fs) {
	Message* First = ((Message*)JB_Ring_First(Self));
	Message* Op = ((Message*)JB_Ring_NextSib(First));
	Message* Last = ((Message*)JB_Ring_NextSib(Op));
	SCOperator* Scop = ((SCOperator*)Op->Obj);
	if (!Scop) {
		JB_Msg_Fail(Op, SC_Str_internal(JB_LUB[1613]));
		return;
	}
	if (SC_Opp_SyntaxIs(Scop, kSC__OpMode_NeedsCppFuncOnFloats)) {
		if (SC_Decl_IsFloat(SC_Msg_FastDecl(First))) {
			JB_FS_AppendString(Fs, JB_LUB[1614]);
			JB_Msg_Export(First, Fs);
			JB_FS_AppendString(Fs, JB_LUB[10]);
			JB_Msg_Export(Last, Fs);
			JB_FS_AppendByte(Fs, ')');
			return;
		}
	}
	SC_Cpp__RenderInBracketsIfRel(First, Fs);
	JB_FS_AppendByte(Fs, ' ');
	JB_Msg_Export(Op, Fs);
	JB_FS_AppendByte(Fs, ' ');
	SC_Cpp__RenderInBracketsIfRel(Last, Fs);
}

void SC_Cpp__C_RenderShe(Message* Self, FastStringCpp* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[52]);
	JB_FS_AppendString(Fs, Self->Name);
}

void SC_Cpp__C_RenderSStr(Message* Self, FastStringCpp* Fs) {
	JB_String* N = Self->Name;
	if (!JB_Str_Exists(N)) {
		JB_FS_AppendString(Fs, JB_LUB[863]);
	}
	 else {
		JB_FS_AppendString(Fs, JB_LUB[864]);
		uint ID = 0;
		if (JB_Object_FastIsa(N, &MessageIDData)) {
			ID = (((MessageID*)((MessageID*)N))->ID + 1);
			if (ID > ((uint)SC_Crkt__Count())) {
				ID = 0;
				if (true) {
					JB_Msg_Fail(Self, SC_Str_internal(JB_LUB[865]));
				}
			}
		}
		 else {
			if (true) {
				JB_Msg_Fail(Self, SC_Str_internal(JB_LUB[866]));
			}
		}
		JB_FS_AppendUint(Fs, ID);
		JB_FS_AppendByte(Fs, ']');
	}
}

void SC_Cpp__C_RenderStr(Message* Self, FastStringCpp* Fs) {
	SC_FS_AppendCpp(Fs, Self->Name);
}

void SC_Cpp__C_RenderThg(Message* Self, FastStringCpp* Fs) {
	JB_Object* O = Self->Obj;
	if (JB_Object_FastIsa(O, &SCDeclData)) {
		SC_Cpp__WriteThgMaybeTypeToo(Self, ((SCDecl*)O), Fs);
		return;
	}
	JB_PrintLine(JB_Str_OperatorPlus(JB_LUB[1001], JB_int_RenderFS(JB_ObjectID(Self), nil)));
	SC_Msg_Safe(Self, Fs);
}

void SC_Cpp__C_RenderTmp(Message* Self, FastStringCpp* Fs) {
	JB_String* Name = Self->Name;
	bool Needbra = false;
	if ((JB_Str_Equals(Name, JB_LUB[473], false))) {
		JB_FS_AppendString(Fs, JB_LUB[771]);
	}
	 else if ((JB_Str_Equals(Name, JB_LUB[175], false))) {
		JB_FS_AppendString(Fs, SC__Cpp_IfName);
		Needbra = true;
	}
	 else if ((JB_Str_Equals(Name, JB_LUB[176], false))) {
		if (SC_Msg_OperatorIsThing(SC_Msg_UnBra(((Message*)JB_Ring_First(Self))), JB_LUB[31])) {
			JB_FS_AppendString(Fs, JB_LUB[176]);
		}
		 else {
			JB_FS_AppendString(Fs, SC__Cpp_WhileName);
		}
		Needbra = true;
	}
	 else if ((JB_Str_Equals(Name, JB_LUB[445], false))) {
		JB_FS_AppendString(Fs, JB_LUB[772]);
		JB_FS_AppendString(Fs, SC__Cpp_IfName);
		Needbra = true;
	}
	 else if ((JB_Str_Equals(Name, JB_LUB[467], false))) {
		return;
	}
	 else if ((JB_Str_Equals(Name, JB_LUB[240], false))) {
		0;
	}
	 else if ((JB_Str_Equals(Name, JB_LUB[773], false))) {
		JB_FS_AppendString(Fs, JB_LUB[774]);
		JB_DoAt(1);
		SC_Cpp__C_ParamsRender(Self, Fs);
		return;
	}
	 else {
		JB_FS_AppendString(Fs, Name);
	}
	if (Needbra) {
		Message* F = ((Message*)JB_Ring_First(Self));
		Needbra = ((!JB_Msg_EqualsSyx(F, kJB_SyxBra, false)) and (!JB_Msg_EqualsSyx(F, kJB_SyxBRel, false)));
	}
	{
		Message* Mv = ((Message*)JB_Ring_First(Self));
		while (Mv) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Mv));
			JB_FS_AppendByte(Fs, ' ');
			if (Needbra) {
				JB_FS_AppendByte(Fs, '(');
			}
			JB_Msg_Export(Mv, Fs);
			if (Needbra) {
				JB_FS_AppendByte(Fs, ')');
			}
			Needbra = false;
			Mv = _Nf1;
		};
		;
	};
}

void SC_Cpp__C_RenderTyp(Message* Self, FastStringCpp* Fs) {
	int Saveness = SC_Cpp__DontNeedMoreBrackets(Self);
	Message* Fc = ((Message*)JB_Ring_First(Self));
	JB_Incr(Fc);
	if (Saveness == kSC__Cpp_kNeedsNoBrackets) {
		JB_Msg_Export(Fc, Fs);
		JB_Decr(Fc);
		return;
	}
	if (Saveness == kSC__Cpp_kNeedsOuterBrackets) {
		JB_FS_AppendByte(Fs, '(');
	}
	SC_Cpp__WriteDeclBrackets(Self, Fs);
	if ((JB_Msg_EqualsSyx(Fc, kJB_SyxRel, false))) {
		JB_FS_AppendByte(Fs, '(');
	}
	if ((JB_Msg_EqualsSyx(Fc, kJB_SyxArg, false))) {
		SC_Msg_MiniArgCpp(Fc, Fs);
	}
	 else {
		JB_Msg_Export(Fc, Fs);
	}
	if ((JB_Msg_EqualsSyx(Fc, kJB_SyxRel, false))) {
		JB_FS_AppendByte(Fs, ')');
	}
	JB_Decr(Fc);
	if (Saveness == kSC__Cpp_kNeedsOuterBrackets) {
		JB_FS_AppendByte(Fs, ')');
	}
}

void SC_Cpp__C_RenderUnt(Message* Self, FastStringCpp* Fs) {
	if ((!JB_Msg_SyntaxEquals(Self, JB_LUB[370], false))) {
		JB_Object_Fail(nil);
		return;
	}
	Message* Num = ((Message*)JB_Ring_First(Self));
	JB_Incr(Num);
	JB_String* S = JB_Str_ReplaceAll(Num->Name, JB_LUB[162], JB_LUB[0], false, nil);
	JB_Incr(S);
	JB_Decr(Num);
	JB_FS_AppendString(Fs, JB_LUB[429]);
	if ((JB_Str_Length(S) % 2) and JB_byte_IsLetter((JB_Str_First(S)))) {
		JB_FS_AppendByte(Fs, '0');
	}
	JB_FS_AppendString(Fs, S);
	JB_Decr(S);
}

JB_String* SC_Cpp__CDotType(Message* Msg, SCDecl* Type, FastStringCpp* Fs, bool DoIt) {
	if (!(Type and (DoIt or Type->Type->FuncProto))) {
		return JB_LUB[0];
	}
	if (SC_Msg_IsFirstOfSetRel(Msg)) {
		return JB_LUB[0];
	}
	Message* P = ((Message*)JB_Ring_Parent(Msg));
	if (P) {
		JB_Object* Fn = P->Obj;
		if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
			if (SC_Func_SyntaxIs(((SCFunction*)Fn), kSC__FunctionType_Reffer)) {
				return JB_LUB[0];
			}
		}
	}
	JB_FS_AppendString(Fs, JB_LUB[597]);
	SC_Cpp__WriteDeclNoName(Type, Fs);
	JB_FS_AppendString(Fs, JB_LUB[598]);
	return JB_LUB[599];
}

JB_String* SC_Cpp__CppLicence() {
	if (!JB_Str_Exists(SC__Cpp_CppLicenceStr)) {
		JB_File* F = SC_Comp__InputFile(JB_LUB[1254], nil);
		JB_Incr(F);
		if (F) {
			JB_SetRef(SC__Cpp_CppLicenceStr, JB_File_ReadAll(F, 16384, true));
		}
		JB_Decr(F);
		if (!JB_Str_Exists(SC__Cpp_CppLicenceStr)) {
			JB_SetRef(SC__Cpp_CppLicenceStr, JB_LUB[27]);
		}
	}
	return SC__Cpp_CppLicenceStr;
}

JB_File* SC_Cpp__CppProduct() {
	JB_File* _tmPf0 = SC_Comp__GeneratedCppsFolder();
	JB_Incr(_tmPf0);
	JB_File* _tmPf1 = JB_File_SyntaxAccess(_tmPf0, JB_LUB[1162]);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Cpp__CreateClassListFunc(FastString* Dest) {
	FastStringCpp* Fs = SC_FastStringCpp_Constructor(nil, JB_LUB[0]);
	JB_Incr(Fs);
	SC_Cpp__CreateClassListHeader(Fs, JB_LUB[1325]);
	{
		Array* _LoopSrcf2 = SC__Comp_ClassList;
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			if (SC_Class_IsSaveableObject(C) and C->MyReacher) {
				JB_FS_AppendString(Fs, JB_LUB[1326]);
				JB_String* _tmPf3 = SC_Class_CStructName(C);
				JB_Incr(_tmPf3);
				JB_FS_AppendString(Fs, _tmPf3);
				JB_Decr(_tmPf3);
				JB_FS_AppendString(Fs, JB_LUB[1327]);
				SC_Class_RenderSaveable(C, Fs);
				JB_FS_AppendString(Fs, JB_LUB[1328]);
			}
			JB_Decr(C);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[1329]);
	JB_String* _tmPf4 = SC_Cpp__SplitCpp(Fs, JB_LUB[1330]);
	JB_Incr(_tmPf4);
	JB_Decr(Fs);
	JB_FS_AppendString(Dest, _tmPf4);
	JB_Decr(_tmPf4);
}

void SC_Cpp__CreateClassListHeader(FastString* Fs, JB_String* S) {
	JB_FS_AppendString(Fs, JB_LUB[53]);
	JB_FS_AppendString(Fs, S);
}

int SC_Cpp__DontNeedMoreBrackets(Message* Msg) {
	if (JB_Msg_EqualsSyx(((Message*)JB_Ring_First(Msg)), kJB_SyxRel, false)) {
		return kSC__Cpp_kNeedsOuterBrackets;
	}
	Message* P = ((Message*)JB_Ring_Parent(Msg));
	int Result = kSC__Cpp_kNeedsOuterBrackets;
	while (JB_Msg_EqualsSyx(P, kJB_SyxBra, false)) {
		P = ((Message*)JB_Ring_Parent(P));
		Result = kSC__Cpp_kNeedsInnerBrackets;
	};
	if (SC_Msg_OperatorIsBRel(P, JB_LUB[174])) {
		return kSC__Cpp_kNeedsNoBrackets;
	}
	if (SC_Msg_OperatorIsTmp(P, JB_LUB[175]) or SC_Msg_OperatorIsTmp(P, JB_LUB[176])) {
		return kSC__Cpp_kNeedsNoBrackets;
	}
	return Result;
}

bool SC_Cpp__DoSavers() {
	return SC_Comp__Reached(JB_LUB[1331]) and SC_Comp__Reached(JB_LUB[1332]);
}

void SC_Cpp__ExportAllSource() {
	if (!JB_Rec_OK(JB_StdErr)) {
		return;
	}
	Cpp_Export* Exp = SC_Cpp_Constructor(nil);
	JB_Incr(Exp);
	SC_Cpp_PreRun(Exp);
	SC_Cpp_ExportSyx(Exp);
	SC_Cpp_FillLibGlobs(Exp, Exp->LibGlobs, false);
	SC_Cpp_Run(Exp);
	SC_Cpp_WriteHeader(Exp);
	if (SC__Options_MakeInterpreter) {
		SC_Cpp_FillInterpreter(Exp);
	}
	SC_Cpp_FinalMergeOutputIntoACpp(Exp);
	JB_Decr(Exp);
}

void SC_Cpp__GenLub(FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[177]);
	JB_FS_AppendInt32(Fs, SC_Crkt__Count() + 1);
	JB_FS_AppendString(Fs, JB_LUB[178]);
}

void SC_Cpp__GenStrings(FastString* Fs) {
	FastString* Sl2 = JB_FS_Constructor(nil);
	JB_Incr(Sl2);
	JB_String* Blob = SC_Cpp__WriteStrings(Sl2);
	JB_Incr(Blob);
	JB_String* Lengths = JB_FS_GetResult(Sl2);
	JB_Incr(Lengths);
	JB_Decr(Sl2);
	SC_Cpp__GenLub(Fs);
	FastString* Blob2 = JB_FS_Constructor(nil);
	JB_Incr(Blob2);
	JB_FS_EncodeLength(Blob2, JB_Str_Length(Lengths));
	JB_FS_EncodeLength(Blob2, JB_Str_Length(Blob));
	JB_FS_EncodeLength(Blob2, SC_Crkt__Count());
	JB_FS_AppendString(Blob2, Lengths);
	JB_Decr(Lengths);
	JB_FS_AppendString(Blob2, Blob);
	JB_SetRef(Blob, JB_FS_GetResult(Blob2));
	JB_Decr(Blob2);
	SC__Cpp_LubHash = JB_Str_CRC(Blob, 0);
	//;
	JB_FS_AppendString(Fs, JB_LUB[575]);
	JB_FS_AppendInt64(Fs, ((int64)SC__Cpp_LubHash));
	JB_FS_AppendString(Fs, JB_LUB[576]);
	//;
	JB_FS_AppendString(Fs, JB_LUB[577]);
	SC_FS_AppendCppAll(Fs, Blob);
	JB_Decr(Blob);
	JB_FS_AppendString(Fs, JB_LUB[576]);
	JB_String* FlowStr = JB_bool_Render0(SC__Options_GenFlowControlCode);
	JB_Incr(FlowStr);
	JB_String* _tmPf1 = JB_Str_ReplaceAll(SC__Cpp_FindGlobalsCpp, JB_LUB[578], FlowStr, false, nil);
	JB_Incr(_tmPf1);
	JB_Decr(FlowStr);
	JB_FS_AppendString(Fs, _tmPf1);
	JB_Decr(_tmPf1);
}

JB_File* SC_Cpp__HProduct() {
	JB_File* _tmPf0 = SC_Comp__GeneratedCppsFolder();
	JB_Incr(_tmPf0);
	JB_File* _tmPf1 = JB_File_SyntaxAccess(_tmPf0, JB_LUB[1163]);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Cpp__Init() {
	SC__Cpp_WroteAny = false;
	JB_SetRef(SC__Cpp_Cpp_Includes, (JB_Array_Constructor0(nil)));
	(JB_Syx_ExportAddrSet(kJB_SyxAcc, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderAcc)))));
	(JB_Syx_ExportAddrSet(kJB_SyxItem, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderItem)))));
	(JB_Syx_ExportAddrSet(kJB_SyxList, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderList)))));
	(JB_Syx_ExportAddrSet(kJB_SyxPrm, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderList)))));
	(JB_Syx_ExportAddrSet(kJB_SyxArg, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderArg)))));
	(JB_Syx_ExportAddrSet(kJB_SyxDot, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderDot)))));
	(JB_Syx_ExportAddrSet(kJB_SyxDecl, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderDcl)))));
	(JB_Syx_ExportAddrSet(kJB_SyxFunc, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderFnc)))));
	(JB_Syx_ExportAddrSet(kJB_SyxThg, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderThg)))));
	(JB_Syx_ExportAddrSet(kJB_SyxType, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderTyp)))));
	(JB_Syx_ExportAddrSet(kJB_SyxTmp, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderTmp)))));
	(JB_Syx_ExportAddrSet(kJB_SyxOpp, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderOpp)))));
	(JB_Syx_ExportAddrSet(kJB_SyxBRel, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderBrel)))));
	(JB_Syx_ExportAddrSet(kJB_SyxRel, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderRel)))));
	(JB_Syx_ExportAddrSet(kJB_SyxNum, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderNum)))));
	(JB_Syx_ExportAddrSet(kJB_SyxUnit, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderUnt)))));
	(JB_Syx_ExportAddrSet(kJB_SyxBra, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderBra)))));
	(JB_Syx_ExportAddrSet(kJB_SyxARel, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderArel)))));
	(JB_Syx_ExportAddrSet(kJB_SyxChar, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderChr)))));
	(JB_Syx_ExportAddrSet(kJB_SyxStr, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderStr)))));
	(JB_Syx_ExportAddrSet(kJB_SyxSStr, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderSStr)))));
	(JB_Syx_ExportAddrSet(kJB_SyxBack, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderBak)))));
	(JB_Syx_ExportAddrSet(kJB_SyxSheb, ((FP_fpMsgRender)(((FP_fpMsgRender)SC_Cpp__C_RenderShe)))));
}

int SC_Cpp__Init_() {
	{
		JB_SetRef(SC__Cpp_H_Input, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Cpp_H_PostInput, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Cpp_Cpp_Input, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Cpp_Cpp_Includes, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Cpp_IfName, JB_LUB[0]);
		JB_SetRef(SC__Cpp_WhileName, JB_LUB[0]);
		JB_SetRef(SC__Cpp_FindGlobalsCpp, (JB_LUB[54]));
		JB_SetRef(SC__Cpp_CppLicenceStr, JB_LUB[0]);
	}
	;
	return 0;
}

bool SC_Cpp__MsgOKToImprove(Message* Msg) {
	Message* P = ((Message*)JB_Ring_Parent(Msg));
	if ((JB_Msg_EqualsSyx(P, kJB_SyxPrm, false))) {
		return (SC_Msg_AsFunc(P) != SC__Comp_RefSetRef);
	}
	if ((JB_Msg_EqualsSyx(P, kJB_SyxRel, false)) and (Msg == ((Message*)JB_Ring_First(P)))) {
		return false;
	}
	return true;
}

bool SC_Cpp__NeedsDotForC(SCDecl* D) {
	if (D->PointerCount) {
		return nil;
	}
	if (SC_Class_IsStruct(D->Type)) {
		return true;
	}
	return false;
}

JB_File* SC_Cpp__Product(JB_String* Name) {
	JB_File* _tmPf0 = SC_Comp__GeneratedCppsFolder();
	JB_Incr(_tmPf0);
	JB_File* _tmPf1 = JB_File_SyntaxAccess(_tmPf0, Name);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Cpp__RenderInBracketsIfRel(Message* Self, FastStringCpp* Fs) {
	if (JB_Msg_EqualsSyx(Self, kJB_SyxRel, false)) {
		JB_FS_AppendByte(Fs, '(');
	}
	JB_Msg_Export(Self, Fs);
	if (JB_Msg_EqualsSyx(Self, kJB_SyxRel, false)) {
		JB_FS_AppendByte(Fs, ')');
	}
}

void SC_Cpp__SmartWrite(JB_String* S, JB_File* F) {
	//;
	JB_Flow__DisabledIncr(1);
	JB_String* _tmPf0 = JB_int64_Render(((int64)JB_Str_CRC(S, 0)), nil);
	JB_Incr(_tmPf0);
	JB_Array_SyntaxAppend(SC__Cpp_Cpp_Includes, _tmPf0);
	JB_Decr(_tmPf0);
	if (((bool)F) and (!JB_File_CompareData(F, S, JB_LUB[0]))) {
		SC__Cpp_WroteAny = true;
		(JB_File_DataSet(F, S));
	}
	JB_Flow__DisabledIncr(-1);
}

JB_String* SC_Cpp__SplitCpp(FastStringCpp* Fs, JB_String* Name) {
	JB_Incr(Name);
	if (SC__Options_SingleCppOutput) {
		JB_Decr(Name);
		return JB_FS_SyntaxCast(Fs);
	}
	if (Fs->Length <= 1) {
		JB_Decr(Name);
		return JB_LUB[0];
	}
	JB_SetRef(Name, JB_Str_OperatorPlus(Name, JB_LUB[1255]));
	JB_String* _tmPf0 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf0);
	JB_File* _tmPf1 = SC_Cpp__Product(Name);
	JB_Incr(_tmPf1);
	SC_Cpp__SmartWrite(_tmPf0, _tmPf1);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	SC_FS_IncludeH(Fs, Name);
	JB_Decr(Name);
	return JB_FS_SyntaxCast(Fs);
}

void SC_Cpp__WriteConst(SCDecl* D, FastStringCpp* T) {
	JB_FS_AppendString(T, JB_LUB[600]);
	SC_Str_Safe(D->ExportName, T, false);
	JB_FS_AppendString(T, JB_LUB[164]);
	if (SC_Decl_IsInt(D)) {
		JB_FS_AppendByte(T, '(');
		SC_Cpp__WriteDeclNoName(D, T);
		JB_FS_AppendByte(T, ')');
	}
	if (D->ExportPosition and SC_Decl_IsInt(D)) {
		JB_FS_AppendInt64(T, ((int64)D->ExportPosition));
	}
	 else {
		JB_Msg_Export(D->Default, T);
	}
	JB_FS_AppendByte(T, ')');
}

void SC_Cpp__WriteDecl(SCDecl* D, FastStringCpp* T, Message* Equality) {
	if ((!D)) {
		JB_FS_AppendString(T, JB_LUB[1256]);
		return;
	}
	if (SC_Decl_IsCArray(D)) {
		SC_Cpp__WriteDeclNoName(D->Internal, T);
	}
	 else {
		SC_Cpp__WriteDeclNoName(D, T);
	}
	if (((JB_String*)JB_Str_Exists(D->ExportName))) {
		JB_FS_AppendByte(T, ' ');
		if (SC_Decl_IsLib(D) and SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Global)) {
			SC_FastStringCpp_AppendLibGlob(T, D);
		}
		 else {
			SC_Str_Safe(D->ExportName, T, SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Local));
		}
		if (SC_Decl_IsCArray(D)) {
			JB_FS_AppendByte(T, '[');
			JB_FS_AppendInt32(T, D->C_Array);
			JB_FS_AppendByte(T, ']');
		}
	}
	if (Equality) {
		JB_FS_AppendString(T, JB_LUB[890]);
		JB_Msg_Export(Equality, T);
	}
}

void SC_Cpp__WriteDeclBrackets(Message* Self, FastStringCpp* Fs) {
	JB_FS_AppendByte(Fs, '(');
	SCDecl* D = SC_Msg_AsDecl(Self);
	JB_Incr(D);
	if (D) {
		SC_Cpp__WriteDeclNoName(D, Fs);
	}
	 else {
		Message* _tmPf0 = ((Message*)JB_Tree_Second(Self));
		JB_Incr(_tmPf0);
		JB_Msg_Export(_tmPf0, Fs);
		JB_Decr(_tmPf0);
	}
	JB_Decr(D);
	JB_FS_AppendByte(Fs, ')');
}

void SC_Cpp__WriteDeclNoName(SCDecl* D, FastStringCpp* T) {
	SCClass* C = D->Type;
	uint Ptrs = SC_Class_IsObject(C) + D->PointerCount;
	if (SC__Cpp_WriteAPI) {
		JB_FS_AppendString(T, SC_Class_APIStructName(C));
	}
	 else if ((!Ptrs) and SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Local)) {
		SC_Class_SimplerDataTypes(C, T, D);
	}
	 else {
		JB_FS_AppendString(T, SC_Class_CStructName(C));
	}
	JB_FS_AppendMultiByte(T, '*', Ptrs);
}

void SC_Cpp__WriteFuncArgs(SCFunction* F, FastStringCpp* T, bool Names_only) {
	JB_FS_AppendByte(T, '(');
	bool N = false;
	{
		Array* _LoopSrcf2 = F->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (D == nil) {
				break;
			}
			if (N) {
				JB_FS_AppendString(T, JB_LUB[10]);
			}
			N = true;
			if (Names_only) {
				SC_Str_Safe(D->ExportName, T, true);
			}
			 else {
				SC_Cpp__WriteDecl(D, T, nil);
			}
			(++_if0);
		};
	}
	;
	JB_FS_AppendByte(T, ')');
}

void SC_Cpp__WriteFuncSub(SCFunction* F, JB_String* E, FastStringCpp* T) {
	if (F->StructReturnPos) {
		JB_FS_AppendString(T, JB_LUB[1256]);
	}
	 else {
		SC_Cpp__WriteDecl(F->ReturnType, T, nil);
	}
	JB_FS_AppendByte(T, ' ');
	JB_FS_AppendString(T, E);
	SC_Cpp__WriteFuncArgs(F, T, false);
}

void SC_Cpp__WriteFunctionHeader(SCFunction* F, FastStringCpp* T) {
	if (SC_Func_SyntaxIs(F, kSC__FunctionType_Inline)) {
		JB_FS_AppendString(T, JB_LUB[1394]);
	}
	SC_Cpp__WriteFuncSub(F, F->ExportName, T);
}

void SC_Cpp__WriteName(JB_String* Name, FastString* Blob, FastString* Lengths) {
	JB_FS_AppendString(Blob, Name);
	JB_FS_AppendByte(Blob, ((byte)0));
	JB_FS_EncodeLength(Lengths, JB_Str_Length(Name));
}

JB_String* SC_Cpp__WriteStrings(FastString* Lengths) {
	FastString* Fs = JB_FS_Constructor(nil);
	{
		Array* _LoopSrcf2 = SC__Crkt_List;
		int _if0 = 0;
		while (true) {
			MessageID* S = ((MessageID*)JB_Array_Value(_LoopSrcf2, _if0));
			if (S == nil) {
				break;
			}
			SC_Cpp__WriteName(S, Fs, Lengths);
			(++_if0);
		};
	}
	;
	return JB_FS_SyntaxCast(Fs);
}

void SC_Cpp__WriteThgMaybeTypeToo(Message* Msg, SCDecl* D, FastStringCpp* Fs) {
	if (!JB_Str_Exists(D->ExportName)) {
		if (true) {
			JB_Msg_Fail(Msg, kJB__Rec_NonFatal);
		}
		SC_Msg_Safe(Msg, Fs);
	}
	 else if ((SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_TypeImprove)) and (SC_Cpp__MsgOKToImprove(Msg))) {
		JB_FS_AppendByte(Fs, '(');
		SC_Cpp__WriteDeclBrackets(Msg, Fs);
		SC_Str_Safe(D->ExportName, Fs, SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Local));
		JB_FS_AppendByte(Fs, ')');
	}
	 else {
		SC_Str_Safe(D->ExportName, Fs, SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Local));
	}
}

void SC_Cpp__WriteType(SCClass* C, FastStringCpp* Fs, bool Always) {
	if (SC_Class_SyntaxIs(C, kSC__ClassInfo_Builtin)) {
		return;
	}
	if (!Always) {
		if (!SC_Class_NeedsExport(C)) {
			return;
		}
	}
	SCFunction* F = C->FuncProto;
	JB_Incr(F);
	if (F) {
		JB_FS_AppendString(Fs, JB_LUB[1371]);
		SC_Cpp__WriteDecl(F->ReturnType, Fs, nil);
		//;
		JB_FS_AppendString(Fs, JB_LUB[1372]);
		JB_String* _tmPf2 = SC_Class_CStructName(C);
		JB_Incr(_tmPf2);
		JB_FS_AppendString(Fs, _tmPf2);
		JB_Decr(_tmPf2);
		JB_FS_AppendByte(Fs, ')');
		//;
		SC_Cpp__WriteFuncArgs(F, Fs, false);
	}
	 else {
		if (SC_Class_IsDataTypeOrFP(C)) {
			JB_String* Name = SC_Class_CStructName(C->Super);
			JB_Incr(Name);
			if (!JB_Str_Exists(Name)) {
				JB_Decr(Name);
				JB_Decr(F);
				return;
			}
			//;
			JB_FS_AppendString(Fs, JB_LUB[1371]);
			JB_FS_AppendString(Fs, Name);
			JB_Decr(Name);
			JB_FS_AppendByte(Fs, ' ');
			//;
		}
		 else {
			if (C->IsWrapper) {
				JB_Decr(F);
				return;
			}
			SC_Class_WriteStructOrUnion(C, Fs);
		}
		JB_String* _tmPf3 = SC_Class_CStructName(C);
		JB_Incr(_tmPf3);
		JB_FS_AppendString(Fs, _tmPf3);
		JB_Decr(_tmPf3);
	}
	JB_Decr(F);
	JB_FS_AppendString(Fs, JB_LUB[576]);
}


DTWrap* JB_Wrap_ConstructorInt(DTWrap* Self, int64 V) {
	if (Self == nil) {
		Self = ((DTWrap*)JB_NewClass(&DTWrapData));
	}
	Self->DeathAction = 0;
	Self->DataType = kJB__TC_s64;
	Self->PrivValue = V;
	return Self;
}

DTWrap* JB_Wrap_ConstructorVoidPtr(DTWrap* Self, void* P) {
	if (Self == nil) {
		Self = ((DTWrap*)JB_NewClass(&DTWrapData));
	}
	Self->DeathAction = 0;
	Self->DataType = kJB__TC_UnusedType;
	Self->PrivValue = ((int64)P);
	return Self;
}

void JB_Wrap_Destructor(DTWrap* Self) {
	if (Self->DeathAction == kJB__Wrap_kFree) {
		JB_free(((void*)Self->PrivValue));
	}
}

Float64 JB_Wrap_FloatValue(DTWrap* Self) {
	if (Self) {
		return JB_int64_AsFloat(Self->PrivValue);
	}
	return 0.0f;
}

JB_String* JB_Wrap_Render(DTWrap* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	//visible;
	if (JB_TC_IsFloat(Self->DataType)) {
		JB_FS_AppendDoubleAsText0(Fs, JB_Wrap_FloatValue(Self));
	}
	 else if (Self->DataType == kJB__TC_bool) {
		JB_bool_Append(((bool)Self->PrivValue), Fs);
	}
	 else if (!JB_TC_IsNumeric(Self->DataType)) {
		JB_FS_AppendString(Fs, JB_LUB[429]);
		JB_FS_AppendHex(Fs, Self->PrivValue, 2);
	}
	 else {
		JB_FS_AppendInt64(Fs, Self->PrivValue);
	}
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

int64 JB_Wrap_SyntaxAccess(DTWrap* Self) {
	return Self->PrivValue;
}

int64 JB_Wrap_Value(DTWrap* Self) {
	if (Self) {
		return Self->PrivValue;
	}
	return 0;
}


JB_Object* JB_DictionaryReader_NextValue(DictionaryReader* Self) {
	if (JB_Nav_MoveNext(Self)) {
		return JB_Nav_Value(Self);
	}
	return nil;
}

SCDecl* SC_DictionaryReader_ValueDecl(DictionaryReader* Self) {
	JB_Object* T = JB_Nav_Value(Self);
	if (JB_Object_FastIsa(T, &SCDeclData)) {
		if (!((SCDecl*)T)->IsLookupOnly) {
			return ((SCDecl*)T);
		}
	}
	return nil;
}


int JB_Rec_BadCount(JB_ErrorReceiver* Self) {
	//visible;
	return Self->ErrorCount + Self->ProblemCount;
}

bool JB_Rec_CanAddMore(JB_ErrorReceiver* Self, uint /*ErrorSeverity*/ Level) {
	if (!((!Self->BlockErrors) and (!JB_OutOfMemoryOccurred()))) {
		return nil;
	}
	if (Level == kJB__ErrorSeverity_Problem) {
		return (Self->ProblemCount < Self->MaxProblems);
	}
	if (Level >= kJB__ErrorSeverity_Error) {
		return (Self->ErrorCount < Self->MaxErrors);
	}
	return (Self->WarnCount < Self->MaxErrors);
}

void JB_Rec_Clear(JB_ErrorReceiver* Self) {
	JB_Tree_Clear(Self->Errors);
	Self->ErrorCount = 0;
	Self->WarnCount = 0;
	Self->ProblemCount = 0;
}

JB_ErrorReceiver* JB_Rec_Constructor(JB_ErrorReceiver* Self) {
	if (Self == nil) {
		Self = ((JB_ErrorReceiver*)JB_NewClass(&JB_ErrorReceiverData));
	}
	Self->_LogObj = nil;
	JB_Incr2(Self->Source, JB_LUB[0]);
	Self->_LogFunc = nil;
	Self->WarnCount = 0;
	Self->ProblemCount = 0;
	Self->ErrorCount = 0;
	Self->BlockErrors = false;
	Self->LowerErrorsTo = 0;
	JB_Incr2(Self->Errors, JB_Err_ConstructorNothing(nil));
	Self->MaxErrors = 512;
	Self->MaxProblems = 64;
	JB__API_NilHappened_ = nil;
	return Self;
}

void JB_Rec_Destructor(JB_ErrorReceiver* Self) {
	JB_Clear(Self->_LogObj);
	JB_Clear(Self->Source);
	JB_Clear(Self->Errors);
}

bool JB_Rec_HasAnything(JB_ErrorReceiver* Self) {
	if (!Self) {
		Self = JB_StdErr;
	}
	return ((bool)(Self->ErrorCount | (Self->ProblemCount | Self->WarnCount)));
}

bool JB_Rec_HasProblems(JB_ErrorReceiver* Self) {
	if (!Self) {
		Self = JB_StdErr;
	}
	return ((bool)(Self->ErrorCount | Self->ProblemCount));
}

void JB_Rec_Incr(JB_ErrorReceiver* Self, JB_Error* Err, bool Add) {
	int N = JB_Ternary(Add, 1, ((int)-1));
	if (Err->Severity == kJB__ErrorSeverity_Problem) {
		Self->ProblemCount = (Self->ProblemCount + N);
	}
	 else if (JB_Err_IsError(Err)) {
		Self->ErrorCount = (Self->ErrorCount + N);
	}
	 else if (JB_Err_IsWarning(Err)) {
		Self->WarnCount = (Self->WarnCount + N);
	}
}

JB_Error* JB_Rec_LastError(JB_ErrorReceiver* Self) {
	//visible;
	{
		JB_Error* _LoopSrcf1 = Self->Errors;
		JB_Error* Err = ((JB_Error*)JB_Ring_Last(_LoopSrcf1));
		while (Err) {
			if (JB_Err_IsError(Err)) {
				return Err;
			}
			Err = ((JB_Error*)JB_Ring_PrevSib(Err));
		};
		;
	}
	;
	return nil;
}

void JB_Rec_LogFileWriter(JB_ErrorReceiver* Self, JB_String* Data) {
	//visible;
	JB_Object* F = Self->_LogObj;
	if (JB_Object_Isa(F, &JB_FileData)) {
		if (!JB_File_Opened(((JB_File*)F))) {
			JB_File_OpenBlank(((JB_File*)F));
		}
		JB_File_SyntaxAppend(((JB_File*)F), Data);
	}
}

ErrorMarker JB_Rec_Mark(JB_ErrorReceiver* Self) {
	return Self->ErrorCount;
}

bool JB_Rec_OK(JB_ErrorReceiver* Self) {
	if (Self) {
		return (!Self->ErrorCount);
	}
	return (!JB_StdErr->ErrorCount);
}

JB_Error* JB_Rec_Pop(JB_ErrorReceiver* Self) {
	JB_Error* Err = ((JB_Error*)JB_Tree_Pop(Self->Errors));
	if (Err) {
		JB_Rec_Incr(Self, Err, false);
		return Err;
	}
	return nil;
}

void SC_Rec_PrePrintErrors(JB_ErrorReceiver* Self) {
	{
		JB_Error* _LoopSrcf2 = Self->Errors;
		JB_Incr(_LoopSrcf2);
		JB_Error* Err = ((JB_Error*)JB_Ring_First(_LoopSrcf2));
		JB_Incr(Err);
		while (Err) {
			JB_Error* _Nf1 = ((JB_Error*)JB_Ring_NextSib(Err));
			JB_Incr(_Nf1);
			SC_Err_Improve(Err);
			JB_SetRef(Err, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(Err);
		;
		JB_Decr(_LoopSrcf2);
	}
	;
	if (!SC__Options_KeepAllErrors) {
		{
			JB_Error* _LoopSrcf5 = Self->Errors;
			JB_Incr(_LoopSrcf5);
			JB_Error* Err = ((JB_Error*)JB_Ring_First(_LoopSrcf5));
			JB_Incr(Err);
			while (Err) {
				JB_Error* _Nf4 = ((JB_Error*)JB_Ring_NextSib(Err));
				JB_Incr(_Nf4);
				if (!SC_Errors__CanKeep(Err)) {
					JB_Tree_Remove(Err);
				}
				JB_SetRef(Err, _Nf4);
				JB_Decr(_Nf4);
			};
			JB_Decr(Err);
			;
			JB_Decr(_LoopSrcf5);
		};
	}
}

int JB_Rec_PrintErrorsMain(JB_ErrorReceiver* Self, uint /*ErrorSeverity*/ Level, bool PrintCount, bool Shell) {
	JB_ErrorReceiver* Rec = JB_StdErr;
	JB_Incr(Rec);
	if (Self) {
		JB_SetRef(Rec, Self);
	}
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	int Count = JB_Rec_RenderErrors(Rec, Fs, Level, Shell);
	JB_Decr(Rec);
	if (!Count) {
		JB_Decr(Fs);
		return 0;
	}
	JB_String* _tmPf0 = JB_FS_GetResult(Fs);
	JB_Incr(_tmPf0);
	JB_Str_PrintError(_tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_ProblemsFound(Fs, Count);
	JB_String* _tmPf1 = JB_FS_GetResult(Fs);
	JB_Incr(_tmPf1);
	JB_Decr(Fs);
	JB_Str_PrintError(_tmPf1);
	JB_Decr(_tmPf1);
	if (Count) {
		return -1;
	}
	return 0;
}

JB_String* JB_Rec_Render(JB_ErrorReceiver* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_Rec_RenderErrors(Self, Fs, 0, false);
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

int JB_Rec_RenderErrors(JB_ErrorReceiver* Self, FastString* Fs, uint /*ErrorSeverity*/ Level, bool Shell) {
	int Rz = 0;
	if (!Self) {
		return 0;
	}
	{
		JB_Error* Err = ((JB_Error*)JB_Ring_First(Self->Errors));
		while (Err) {
			JB_Error* _Nf1 = ((JB_Error*)JB_Ring_NextSib(Err));
			if (Err->Severity >= Level) {
				(++Rz);
				if (Shell) {
					JB_FreeIfDead(JB_Err_RenderUnix(Err, Fs));
				}
				 else {
					JB_FreeIfDead(JB_Err_Render(Err, Fs));
				}
				JB_FS_AppendByte(Fs, '\n');
			}
			Err = _Nf1;
		};
	}
	;
	return Rz;
}

int SC_Rec_ReturnErrors(JB_ErrorReceiver* Self, JB_ErrorReceiver* To) {
	int Rz = 0;
	{
		JB_Error* E = ((JB_Error*)JB_Ring_First(Self->Errors));
		while (E) {
			JB_Error* _Nf1 = ((JB_Error*)JB_Ring_NextSib(E));
			JB_Rec_AppendErr(To, E);
			(++Rz);
			E = _Nf1;
		};
	}
	;
	return Rz;
}

int JB_Rec_ShellPrintErrors(JB_ErrorReceiver* Self) {
	//visible;
	return JB_Rec_PrintErrorsMain(Self, kJB__ErrorSeverity_Problem, false, true);
}

void JB_Rec_AppendErr(JB_ErrorReceiver* Self, JB_Error* Err) {
	if (!Self) {
		Self = JB_StdErr;
	}
	bool CanPrint = false;
	//"Speedie" // useful marker for debugging...;
	JB_Rec_Incr(Self, Err, true);
	if (!JB_Str_Exists(Err->Path)) {
		JB_SetRef(Err->Path, Self->Source);
	}
	if (JB__Err_KeepStackTrace) {
		if (!JB_Str_Exists(Err->StackTrace)) {
			JB_SetRef(Err->StackTrace, JB_App__StackTrace(2, nil));
		}
	}
	FP_fnErrorLogger Log = ((FP_fnErrorLogger)(Self->_LogFunc));
	if (Log) {
		JB_String* _tmPf0 = JB_Err_Render(Err, nil);
		JB_Incr(_tmPf0);
		(Log)(Self, _tmPf0);
		JB_Decr(_tmPf0);
	}
	if (CanPrint and JB_Err_IsBad(Err)) {
		JB_String* _tmPf1 = JB_Err_Render(Err, nil);
		JB_Incr(_tmPf1);
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
	if (JB__Err_AutoPrint and (Err->Severity > kJB__ErrorSeverity_Problem)) {
		JB_DoAt(1);
	}
	if (JB__Err_AutoPrint != kJB__ErrorFlags_PrintAndRemove) {
		JB_Tree_SyntaxAppend(Self->Errors, Err);
	}
}

JB_ErrorReceiver* JB_Rec_SyntaxUsing(JB_ErrorReceiver* Self) {
	JB_ErrorReceiver* Old = JB_StdErr;
	JB_Incr(Old);
	JB_SetRef(JB_StdErr, Self);
	JB_SafeDecr(Old);
	return Old;
}

void JB_Rec_SyntaxUsingComplete(JB_ErrorReceiver* Self, JB_Object* Idk) {
	JB_SetRef(JB_StdErr, Self);
}

bool SC_Rec_TooMany(JB_ErrorReceiver* Self) {
	return Self->ErrorCount >= 50;
}

int JB_Rec__Init_() {
	{
	}
	;
	return 0;
}

void JB_Rec__NewErrorWithNode(Message* Node, JB_String* Desc, JB_String* Path) {
	JB_Rec__NewErrorSub(Node, Desc, Path, kJB__ErrorSeverity_Error);
}

void JB_Rec__NewErrorSub(Message* Node, JB_String* Desc, JB_String* Path, uint /*ErrorSeverity*/ Sev) {
	uint Lower = JB_StdErr->LowerErrorsTo;
	if (Lower) {
		Sev = JB_int_OperatorMin(((int)Lower), Sev);
	}
	if (JB_Rec_CanAddMore(JB_StdErr, Sev)) {
		if (Desc == nil) {
			Desc = JB_Msg_MiniName(Node, JB_LUB[592]);
		}
		JB_Rec_AppendErr(((JB_ErrorReceiver*)nil), JB_Err_Constructor(nil, JB_Msg_FindNotInserted(Node), Desc, Sev, ((JB_String*)JB_Ternary(JB_Str_Exists(Path), ((JB_String*)Path), ((JB_String*)JB_LUB[0])))));
	}
}

void JB_Rec__NewProblem(Message* Node, JB_String* Desc, JB_String* Path) {
	JB_Rec__NewErrorSub(Node, Desc, Path, kJB__ErrorSeverity_Problem);
}

void JB_Rec__NewWarning(Message* Node, JB_String* Desc, JB_String* Path) {
	JB_Rec__NewErrorSub(Node, Desc, Path, kJB__ErrorSeverity_Warning);
}


void SC_FS_AppendCpp(FastString* Self, JB_String* S) {
	JB_FS_AppendByte(Self, '"');
	{
		byte* _Startf0 = JB_Str_Address(S);
		byte* _Endf1 = _Startf0 + JB_Str_Length(S);
		while (_Startf0 < _Endf1) {
			int I = _Startf0 - S->Addr;
			uint C = _Startf0[0];
			if (C == '?') {
				JB_FS_AppendString(Self, JB_LUB[216]);
			}
			 else if (C == '\\') {
				JB_FS_AppendString(Self, JB_LUB[217]);
			}
			 else if (C == 9) {
				JB_FS_AppendString(Self, JB_LUB[218]);
			}
			 else if (C == 10) {
				JB_FS_AppendString(Self, JB_LUB[124]);
			}
			 else if (C == 13) {
				JB_FS_AppendString(Self, JB_LUB[219]);
			}
			 else if ((C >= 32) and ((C != '"') and (C <= 127))) {
				JB_FS_AppendByte(Self, C);
			}
			 else {
				JB_FS_AppendString(Self, JB_LUB[67]);
				JB_FS_AppendHex(Self, C, 2);
				if (JB_byte_IsHex(JB_Str_ByteValue(S, I + 1))) {
					JB_FS_AppendString(Self, JB_LUB[220]);
				}
			}
			(++_Startf0);
		};
	}
	;
	JB_FS_AppendByte(Self, '"');
}

void SC_FS_AppendCppAll(FastString* Self, JB_String* S) {
	JB_FS_AppendByte(Self, '"');
	{
		byte* _Startf0 = JB_Str_Address(S);
		byte* _Endf1 = _Startf0 + JB_Str_Length(S);
		while (_Startf0 < _Endf1) {
			int I = _Startf0 - S->Addr;
			uint C = _Startf0[0];
			JB_FS_AppendString(Self, JB_LUB[67]);
			JB_FS_AppendHex(Self, C, 2);
			(++_Startf0);
		};
	}
	;
	JB_FS_AppendByte(Self, '"');
}

void JB_FS_AppendEscape(FastString* Self, JB_String* S) {
	JB_FS_AppendMultiReplace(Self, S, JB__Constants_EscapeStr, JB_StdErr);
}

void JB_FS_AppendHexStr(FastString* Self, JB_String* Data) {
	if (JB_Str_Exists(Data)) {
		JB_FS_AppendHexData(Self, Data->Addr, JB_Str_Length(Data), 0);
	}
}

void JB_FS_AppendObjectID(FastString* Self, Saveable* O) {
	JB_FS_AppendHex3(Self, JB_ObjectID(O));
}

void JB_FS_AppendObjectOrNil(FastString* Self, JB_Object* O) {
	if (JB_Object_Isa(O, &SaveableData)) {
		if (JB_Sav_IsSaveMarked(((Saveable*)O))) {
			JB_FS_AppendObjectID(Self, ((Saveable*)O));
		}
		 else {
			//"Valid behaviour! For example we save a level, but we don't save the player along with the level. Like terraria.";
			JB_FS_AppendString(Self, JB_LUB[36]);
		}
	}
	 else if (JB_Object_Isa(O, &JB_StringData)) {
		JB_FreeIfDead(JB_ObjRender(((JB_String*)O), Self));
	}
	 else {
		JB_FS_AppendString(Self, JB_LUB[36]);
	}
}

void JB_FS_AppendQuotedEscape(FastString* Self, JB_String* S) {
	JB_FS_AppendByte(Self, '"');
	JB_FS_AppendEscape(Self, S);
	JB_FS_AppendByte(Self, '"');
}

void SC_FS_appendvoid(FastString* Self, JB_String* S, uint /*byte*/ Extra) {
	JB_FS_AppendString(Self, JB_LUB[69]);
	if (Extra) {
		JB_FS_AppendByte(Self, Extra);
	}
	JB_FS_AppendString(Self, S);
	JB_FS_AppendString(Self, JB_LUB[70]);
}

void SC_FS_AppendWidth(FastString* Self, JB_String* S, int Width) {
	JB_FS_AppendString(Self, S);
	JB_FS_AppendMultiByte(Self, ' ', Width - JB_Str_Length(S));
}

void SC_FS_CArrayAdd(FastString* Self, JB_String* S) {
	{
		byte* _Startf0 = JB_Str_Address(S);
		byte* _Endf1 = _Startf0 + JB_Str_Length(S);
		while (_Startf0 < _Endf1) {
			uint B = _Startf0[0];
			SC_FS_CArrayAddB(Self, B);
			(++_Startf0);
		};
	}
	;
	SC_FS_CArrayAddB(Self, 0);
}

void SC_FS_CArrayAddB(FastString* Self, uint /*byte*/ B) {
	if (!B) {
		JB_FS_AppendByte(Self, '0');
	}
	 else {
		JB_FS_AppendByte(Self, '\'');
		if (JB_CS_HasChar(SC_C_Letters, B)) {
			JB_FS_AppendByte(Self, B);
		}
		 else {
			JB_FS_AppendString(Self, JB_LUB[67]);
			JB_FS_AppendHex(Self, B, 2);
		}
		JB_FS_AppendByte(Self, '\'');
	}
	JB_FS_AppendString(Self, JB_LUB[10]);
}

void SC_FS_CArrayAddB0(FastString* Self, uint /*byte*/ B) {
	SC_FS_CArrayAddB(Self, B);
	SC_FS_CArrayAddB(Self, 0);
}

void JB_FS_EncodeLength(FastString* Self, uint64 N) {
	uint L2 = ((byte)N);
	if (N >= 248) {
		L2 = (248 + JB_uint64_LELength(N));
	}
	JB_FS_AppendByte(Self, ((byte)L2));
	if (N >= 248) {
		JB_FS_lInt(Self, N);
	}
}

void JB_FS_AppendInfo(FastString* Self, JB_String* Name, JB_String* Data) {
	if (JB_Str_Exists(Data)) {
		JB_FS_FieldStart(Self, Name);
		JB_FS_AppendQuotedEscape(Self, Data);
	}
}

void JB_FS_AppendInfoNum(FastString* Self, JB_String* Name, int64 Data) {
	if (Data) {
		JB_FS_FieldStart(Self, Name);
		JB_FS_AppendInt64(Self, Data);
	}
}

void JB_FS_AppendInfoFloat(FastString* Self, JB_String* Name, Float64 Data) {
	if (Data) {
		JB_FS_FieldStart(Self, Name);
		JB_FS_AppendDoubleAsText0(Self, Data);
	}
}

void JB_FS_FieldStart(FastString* Self, JB_String* Name) {
	JB_FS_LineIndent(Self);
	if (JB_Str_Exists(Name)) {
		JB_FS_AppendString(Self, Name);
		JB_FS_AppendByte(Self, ' ');
	}
}

void JB_FS_hInt(FastString* Self, uint64 N) {
	while (true) {
		if (N <= 127) {
			JB_FS_AppendByte(Self, ((byte)(N)));
			break;
		}
		JB_FS_AppendByte(Self, ((byte)(N | 128)));
		N = (N >> 7);
	};
}

void SC_FS_IncludeH(FastString* Self, JB_String* Name) {
	JB_FS_AppendString(Self, JB_LUB[68]);
	JB_FS_AppendString(Self, Name);
	JB_FS_AppendByte(Self, '"');
	JB_FS_AppendByte(Self, '\n');
}

void JB_FS_lInt(FastString* Self, uint64 N) {
	while (N) {
		JB_FS_AppendByte(Self, ((byte)N));
		N = (N >> 8);
	};
}

void JB_FS_MsgErrorName(FastString* Self, JB_String* Name) {
	if (((JB_String*)JB_Str_Exists(Name))) {
		JB_FS_AppendString(Self, JB_LUB[11]);
		JB_FS_AppendString(Self, Name);
		JB_FS_AppendString(Self, JB_LUB[12]);
	}
}

void JB_FS_Normal(FastString* Self, JB_String* S) {
	if (JB__ErrorColors_Enabled) {
		JB_FS_AppendString(Self, kJB__ErrorColors_normal);
	}
	JB_FS_AppendByte(Self, '\n');
	JB_FS_AppendString(Self, S);
	JB_FS_AppendByte(Self, ':');
	JB_FS_AppendMultiByte(Self, ' ', 18 - JB_Str_LengthUTF8(S));
	if (JB__ErrorColors_Enabled) {
		JB_FS_AppendString(Self, kJB__ErrorColors_good);
	}
}

void JB_FS_PrintNicely(FastString* Self, JB_String* S) {
	int Cause = JB_Str_UnPrintable(S);
	if (Cause < 0) {
		//;
		JB_FS_AppendString(Self, JB_LUB[129]);
		JB_String* _tmPf1 = JB_Str_Hex(S, 0, nil);
		JB_Incr(_tmPf1);
		JB_FS_AppendString(Self, _tmPf1);
		JB_Decr(_tmPf1);
		JB_FS_AppendString(Self, JB_LUB[130]);
		//;
	}
	 else if (Cause == '\n') {
		JB_FreeIfDead(JB_Str_ReplaceAll(S, JB_LUB[125], JB_LUB[124], false, Self));
	}
	 else {
		JB_FS_AppendString(Self, S);
	}
}

void SC_FS_PrintStatType(FastString* Self, JB_String* Name, int Count) {
	if (Count) {
		JB_FS_AppendByte(Self, '\n');
		JB_FS_AppendString(Self, Name);
		JB_FS_AppendByte(Self, ' ');
		JB_FS_AppendInt32(Self, Count);
	}
}

void JB_FS_ProblemsFound(FastString* Self, int Count) {
	JB_String* _tmPf0 = JB_int_operatorof(Count, JB_LUB[488], JB_LUB[0]);
	JB_Incr(_tmPf0);
	JB_FS_AppendString(Self, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendString(Self, JB_LUB[489]);
}

JB_String* JB_FS_Render(FastString* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendFastString(Fs, Self);
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_FS_RenderSpeed(FastString* Self, JB_String* Name, int64 BytesIn, JB_Duration Duration, int64 BytesOut) {
	if (JB_Str_Exists(Name)) {
		JB_FS_AppendString(Self, Name);
		JB_FS_AppendString(Self, JB_LUB[77]);
	}
	JB_FreeIfDead(JB_int64_StrSize(BytesIn, Self));
	if (BytesOut) {
		JB_FS_AppendString(Self, JB_LUB[311]);
		JB_FreeIfDead(JB_int64_StrSize(BytesOut, Self));
		JB_FS_AppendString(Self, JB_LUB[164]);
		float Ratio = (((float)(JB_int64_OperatorDiv(BytesOut, BytesIn))) * 100.0f);
		JB_FS_AppendFloat(Self, Ratio, 1, false, false);
		JB_FS_AppendString(Self, JB_LUB[490]);
	}
	JB_FS_AppendString(Self, JB_LUB[491]);
	float Seconds = JB_Duration_Float(Duration);
	bool Small = Seconds < 0.01f;
	if (Small) {
		Seconds = (Seconds * 1000.0f);
	}
	JB_FS_AppendFloat(Self, Seconds, 2, false, false);
	if (Small) {
		JB_FS_AppendByte(Self, 'm');
	}
	JB_FS_AppendByte(Self, 's');
	if (!Seconds) {
		return;
	}
	float Scale = 1048576.0f;
	uint Unit = 'M';
	float Rate = ((float)BytesIn) / (Scale * Seconds);
	if (Rate >= 1024.0f) {
		Rate = (Rate / 1024.0f);
		Unit = 'G';
	}
	 else if (Rate <= 1.0f) {
		Rate = (Rate * 1024.0f);
		Unit = 'K';
	}
	int Dp = JB_Ternary(Rate <= 0.01f, 5, ((int)2));
	JB_FS_AppendString(Self, JB_LUB[492]);
	JB_FS_AppendFloat(Self, Rate, Dp, false, false);
	JB_FS_AppendByte(Self, Unit);
	JB_FS_AppendByte(Self, 'B');
	JB_FS_AppendString(Self, JB_LUB[493]);
}

void JB_FS_AppendMultiStr(FastString* Self, JB_String* Data, int Count) {
	int Needed = JB_Str_Length(Data) * Count;
	if (JB_FS_FreeSize(Self) < Needed) {
		(JB_FS_NeedSpare(Self, Needed));
	}
	{
		int _Valuef1 = 0;
		while (_Valuef1 < Count) {
			JB_FS_AppendString(Self, Data);
			(++_Valuef1);
		};
	};
}

void JB_FS_AppendFastString(FastString* Self, FastString* Fs) {
	JB_FS_AppendMem_(Self, Fs->ResultPtr, Fs->Length);
}

void JB_FS_AppendUint(FastString* Self, uint Data) {
	JB_FS_AppendIntegerAsText(Self, Data, 1);
}

void JB_FS_AppendInt32(FastString* Self, int Data) {
	JB_FS_AppendIntegerAsText(Self, Data, 1);
}

void JB_FS_AppendBool(FastString* Self, bool B) {
	JB_String* _tmPf0 = JB_bool_Render0(B);
	JB_Incr(_tmPf0);
	JB_FS_AppendString(Self, _tmPf0);
	JB_Decr(_tmPf0);
}

void JB_FS_AppendBuff(FastString* Self, FastBuff* B) {
	JB_FS_AppendMem_(Self, B->Start, JB_FastBuff_Length(B));
}

void JB_FS_SyntaxAppend(FastString* Self, Message* Msg) {
	if (Msg) {
		(JB_Syx_RenderAddr(Msg->Func))(Msg, Self);
	}
}

FastString* JB_FS__Use(JB_Object* Other) {
	if (JB_Object_Isa(Other, &FastStringData)) {
		return ((FastString*)Other);
	}
	if (JB_Object_Isa(Other, &JB_StringData)) {
		return JB_Str_Out(((JB_String*)Other), true);
	}
	if (Other) {
		if (true) {
			JB_Object_FailStr(Other, JB_LUB[783]);
		}
	}
	return nil;
}



void JB_Flow_AddByte(FlowControl* Self, uint /*byte*/ Value) {
	//;
	if (JB_FastBuff_AppendU8((&Self->Buff), Value)) {
		JB_Flow_Flush(Self);
	}
}

void JB_Flow_Destructor(FlowControl* Self) {
	//;
	(JB_Flow__DisabledSet(JB_int__Max()));
	JB_Flow_Flush(Self);
	if (Self->ReadInput != nil) {
		JB_PrintLine(JB_LUB[499]);
	}
	JB_Clear(Self->Write);
	JB_FastBuff_Destructor((&Self->Buff));
	JB_Clear(Self->ReadInput);
}

void JB_Flow_Fail(FlowControl* Self, JB_String* Found, JB_String* Expected, JB_String* InputName) {
	//;
	JB_SetRef(Self->ReadInput, Self->ReadInput);
	if (!Self->CanDoErrors) {
		return;
	}
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	if (JB_Str_Exists(InputName)) {
		//;
		JB_FS_AppendString(Fs, JB_LUB[549]);
		JB_FS_AppendString(Fs, InputName);
		JB_FS_AppendString(Fs, JB_LUB[550]);
		//;
	}
	if (!JB_SS_HasAny(Self->ReadInput)) {
		JB_FS_AppendString(Fs, JB_LUB[551]);
	}
	 else {
		JB_FS_AppendString(Fs, JB_LUB[552]);
		JB_FS_PrintNicely(Fs, Expected);
		JB_FS_AppendString(Fs, JB_LUB[553]);
		JB_FS_PrintNicely(Fs, Found);
	}
	JB_FS_AppendByte(Fs, '\n');
	JB_FreeIfDead(JB_App__StackTrace(3, Fs));
	JB_String* _tmPf1 = JB_FS_GetResult(Fs);
	JB_Incr(_tmPf1);
	JB_Decr(Fs);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
	Self->CanDoErrors = false;
	JB_SetRef(Self->ReadInput, nil);
	if (JB__Flow_BreakOnFail) {
	}
}

void JB_Flow_Flush(FlowControl* Self) {
	//;
	FastString* W = Self->Write;
	JB_Incr(W);
	if (W) {
		JB_FS_AppendBuff(W, (&Self->Buff));
	}
	JB_Decr(W);
	Self->Buff.Curr = Self->Buff.Start;
}

bool JB_Flow_TestByte(FlowControl* Self, uint /*byte*/ Value) {
	//;
	//visible;
	JB_Flow_AddByte(Self, Value);
	StringReader* R = Self->ReadInput;
	if (R == nil) {
		return true;
	}
	int B = JB_SS_Byte(R);
	if (B == Value) {
		return true;
	}
	JB_Flow_Fail(Self, JB_Str__Byte(Value), JB_Str__Byte(B), JB_LUB[0]);
	return false;
}

FlowControlStopper JB_Flow__Attempt(JB_String* Name) {
	//;
	return 0;
}

bool JB_Flow__Cond(bool Value) {
	//visible;
	//;
	JB_Flow__SyntaxAppend(((byte)('A' + Value)));
	return Value;
}

void JB_Flow__GetActiveFlow() {
	JB_String* Str = JB_App__SyntaxAccess(JB_LUB[554]);
	JB_Incr(Str);
	if (JB_Str_Equals(Str, JB_LUB[555], true)) {
		JB__Flow_Active = kJB__Flow_Validate;
	}
	 else if (JB_Str_Equals(Str, JB_LUB[556], true)) {
		JB__Flow_Active = kJB__Flow_Log;
	}
	JB_Decr(Str);
}

int JB_Flow__Init_() {
	{
		JB__Flow_AlwaysMove = true;
	}
	;
	return 0;
}

int JB_Flow__InitCode_() {
	{
	}
	;
	JB_Flow__GetActiveFlow();
	return 0;
}

void JB_Flow__InputStrings(Array* Lines, JB_String* Name) {
	//;
	JB_String* _tmPf0 = JB_Array_join(Lines, JB_LUB[125]);
	JB_Incr(_tmPf0);
	JB_Flow__InputLine(_tmPf0, Name);
	JB_Decr(_tmPf0);
}

void JB_Flow__Input(JB_String* Data, JB_String* Name) {
	//visible;
	//;
	if (JB_Flow__IsDisabled()) {
		return;
	}
	(JB_Flow__DisabledSet(1));
	FlowControl* F = JB__Flow_Flow;
	StringReader* R = F->ReadInput;
	if (R != nil) {
		JB_String* Str = JB_SS_Str(R, JB_Str_Length(Data), 0);
		JB_Incr(Str);
		if (!JB_Str_Equals(Str, Data, false)) {
			JB_Flow_Fail(F, Str, Data, Name);
		}
		JB_Decr(Str);
	}
	{
		byte* _Startf0 = JB_Str_Address(Data);
		byte* _Endf1 = _Startf0 + JB_Str_Length(Data);
		while (_Startf0 < _Endf1) {
			uint C = _Startf0[0];
			JB_Flow_AddByte(F, C);
			(++_Startf0);
		};
	}
	;
	(JB_Flow__DisabledSet(0));
}

void JB_Flow__InputLine(JB_String* Data, JB_String* Name) {
	JB_Flow__Input(Data, Name);
	JB_Flow__SyntaxAppend('\n');
}

void JB_Flow__Stop() {
	//;
	(JB_Flow__DisabledSet(JB_int__Max()));
	JB_SetRef(JB__Flow_Flow, nil);
}

void JB_Flow__SyntaxAppend(uint /*byte*/ Value) {
	//visible;
	//;
	if (!JB_Flow__IsDisabled()) {
		(JB_Flow__DisabledSet(1));
		JB_Flow_TestByte(JB__Flow_Flow, Value);
		(JB_Flow__DisabledSet(0));
	}
}

bool JB_Flow__Cond2(bool Value) {
	//visible;
	//;
	if (Value) {
		return true;
	}
	JB_Flow__SyntaxAppend('W');
	return false;
}


void SC_Instruction_Const(Instruction* Self) {
	if (Self) {
		Self->aType = kSC__Instruction_kTypeConst;
	}
}

Instruction* SC_Instruction_Constructor(Instruction* Self, JB_String* FormName, JB_String* Name, int Pos) {
	if (Self == nil) {
		Self = ((Instruction*)JB_NewClass(&InstructionData));
	}
	Self->aType = 0;
	JB_Incr2(Self->FormName, FormName);
	Self->OpCode = Pos;
	JB_Incr2(Self->Name, Name);
	JB_Incr2(Self->Sizes, SC_xC2xB5Form__NeedForm(Self->FormName, nil));
	Self->PCount = Self->Sizes->Count;
	return Self;
}

void SC_Instruction_Destructor(Instruction* Self) {
	JB_Clear(Self->Sizes);
	JB_Clear(Self->Name);
	JB_Clear(Self->FormName);
}

bool SC_Instruction_IsSetConst(Instruction* Self) {
	return Self->aType == kSC__Instruction_kTypeConst;
}

JB_String* SC_Instruction_Render(Instruction* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendByte(Fs, '\n');
	JB_FreeIfDead(SC_xC2xB5Form_Render(Self->Sizes, Fs));
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Instruction__Add(JB_String* FormName, JB_String* Name, int Pos) {
	Instruction* Ins = ((Instruction*)JB_Dict_ValueLower(SC__Instruction_OpDict, Name));
	if (!Ins) {
		Ins = SC_Instruction_Constructor(nil, FormName, Name, Pos);
		(JB_Dict_ValueLowerSet(SC__Instruction_OpDict, Name, Ins));
	}
	JB_SetRef(SC__Instruction_TypeList[Pos], Ins);
}

int SC_Instruction__Init_() {
	{
		JB_SetRef(SC__Instruction_OpDict, JB_Dict_Constructor(nil));
	}
	;
	return 0;
}

void SC_Instruction__InstructionInit() {
	//;
	SC_Instruction__Add(JB_LUB[1412], JB_LUB[1413], 0);
	SC_Instruction__Add(JB_LUB[163], JB_LUB[1414], 2);
	SC_Instruction__Add(JB_LUB[1415], JB_LUB[1416], 4);
	SC_Instruction__Add(JB_LUB[1415], JB_LUB[1417], 5);
	SC_Instruction__Add(JB_LUB[1418], JB_LUB[1419], 6);
	SC_Instruction__Add(JB_LUB[663], JB_LUB[1420], 24);
	SC_Instruction__Add(JB_LUB[663], JB_LUB[1421], 25);
	SC_Instruction__Add(JB_LUB[1422], JB_LUB[1423], 26);
	SC_Instruction__Add(JB_LUB[1422], JB_LUB[1424], 27);
	SC_Instruction__Add(JB_LUB[1425], JB_LUB[1426], 32);
	SC_Instruction__Add(JB_LUB[1427], JB_LUB[1428], 33);
	SC_Instruction__Add(JB_LUB[1429], JB_LUB[1430], 34);
	SC_Instruction__Add(JB_LUB[1431], JB_LUB[1432], 35);
	SC_Instruction__Add(JB_LUB[1433], JB_LUB[1434], 36);
	SC_Instruction__Add(JB_LUB[773], JB_LUB[1435], 37);
	SC_Instruction__Add(JB_LUB[1436], JB_LUB[1437], 38);
	SC_Instruction__Add(JB_LUB[1438], JB_LUB[1439], 39);
	SC_Instruction__Add(JB_LUB[1440], JB_LUB[1441], 40);
	SC_Instruction__Add(JB_LUB[1442], JB_LUB[1443], 41);
	SC_Instruction__Add(JB_LUB[1415], JB_LUB[1444], 42);
	SC_Instruction__Add(JB_LUB[1445], JB_LUB[1446], 43);
	SC_Instruction__Add(JB_LUB[1445], JB_LUB[1447], 44);
	SC_Instruction__Add(JB_LUB[1445], JB_LUB[1448], 45);
	SC_Instruction__Add(JB_LUB[1449], JB_LUB[1450], 46);
	SC_Instruction__Add(JB_LUB[1449], JB_LUB[1451], 47);
	SC_Instruction__Add(JB_LUB[1429], JB_LUB[1452], 48);
	SC_Instruction__Add(JB_LUB[1453], JB_LUB[1454], 49);
	SC_Instruction__Add(JB_LUB[1455], JB_LUB[1456], 50);
	SC_Instruction__Add(JB_LUB[154], JB_LUB[1457], 51);
	SC_Instruction__Add(JB_LUB[1449], JB_LUB[1458], 52);
	SC_Instruction__Add(JB_LUB[1449], JB_LUB[1459], 53);
	SC_Instruction__Add(JB_LUB[1449], JB_LUB[1460], 54);
	SC_Instruction__Add(JB_LUB[1449], JB_LUB[1461], 55);
	SC_Instruction__Add(JB_LUB[1449], JB_LUB[1462], 56);
	SC_Instruction__Add(JB_LUB[1449], JB_LUB[1463], 57);
	SC_Instruction__Add(JB_LUB[1449], JB_LUB[1464], 58);
	SC_Instruction__Add(JB_LUB[1449], JB_LUB[1465], 59);
	SC_Instruction__Add(JB_LUB[1449], JB_LUB[1466], 60);
	SC_Instruction__Add(JB_LUB[1467], JB_LUB[1468], 61);
	SC_Instruction__Add(JB_LUB[1429], JB_LUB[1469], 62);
	SC_Instruction__Add(JB_LUB[1470], JB_LUB[1471], 63);
	SC_Instruction__Add(JB_LUB[1429], JB_LUB[1472], 64);
	SC_Instruction__Add(JB_LUB[1473], JB_LUB[1474], 65);
	SC_Instruction__Add(JB_LUB[1475], JB_LUB[1476], 66);
	SC_Instruction__Add(JB_LUB[1477], JB_LUB[1478], 67);
	SC_Instruction__Add(JB_LUB[1479], JB_LUB[1480], 68);
	SC_Instruction__Add(JB_LUB[1473], JB_LUB[1481], 69);
	SC_Instruction__Add(JB_LUB[1475], JB_LUB[1482], 70);
	SC_Instruction__Add(JB_LUB[1477], JB_LUB[1483], 71);
	SC_Instruction__Add(JB_LUB[1477], JB_LUB[1484], 72);
	SC_Instruction__Add(JB_LUB[1485], JB_LUB[1486], 73);
	SC_Instruction__Add(JB_LUB[1485], JB_LUB[1487], 74);
	SC_Instruction__Add(JB_LUB[674], JB_LUB[1488], 75);
	SC_Instruction__Add(JB_LUB[674], JB_LUB[1489], 76);
	SC_Instruction__Add(JB_LUB[250], JB_LUB[1490], 77);
	SC_Instruction__Add(JB_LUB[250], JB_LUB[1491], 78);
	SC_Instruction__Add(JB_LUB[1492], JB_LUB[1493], 79);
	SC_Instruction__Add(JB_LUB[1494], JB_LUB[1495], 80);
	SC_Instruction__Add(JB_LUB[1496], JB_LUB[1497], 81);
	SC_Instruction__Add(JB_LUB[1498], JB_LUB[1499], 82);
	SC_Instruction__Add(JB_LUB[1500], JB_LUB[1501], 83);
	SC_Instruction__Add(JB_LUB[1438], JB_LUB[1502], 84);
	SC_Instruction__Add(JB_LUB[1503], JB_LUB[1504], 85);
	SC_Instruction__Add(JB_LUB[1503], JB_LUB[1505], 86);
	SC_Instruction__Add(JB_LUB[1506], JB_LUB[1507], 87);
	SC_Instruction__Add(JB_LUB[1506], JB_LUB[1508], 88);
	SC_Instruction__Add(JB_LUB[1506], JB_LUB[1509], 89);
	SC_Instruction__Add(JB_LUB[1506], JB_LUB[1510], 90);
	SC_Instruction__Add(JB_LUB[1506], JB_LUB[1511], 91);
	SC_Instruction__Add(JB_LUB[1506], JB_LUB[1512], 92);
	SC_Instruction__Add(JB_LUB[1506], JB_LUB[1513], 93);
	SC_Instruction__Add(JB_LUB[1506], JB_LUB[1514], 94);
	SC_Instruction__Add(JB_LUB[1515], JB_LUB[1516], 95);
	SC_Instruction__Add(JB_LUB[1515], JB_LUB[1517], 96);
	SC_Instruction__Add(JB_LUB[1515], JB_LUB[1518], 97);
	SC_Instruction__Add(JB_LUB[1515], JB_LUB[1519], 98);
	SC_Instruction__Add(JB_LUB[1515], JB_LUB[1520], 99);
	SC_Instruction__Add(JB_LUB[1521], JB_LUB[1522], 100);
	SC_Instruction__Add(JB_LUB[1521], JB_LUB[1523], 101);
	SC_Instruction__Add(JB_LUB[1418], JB_LUB[1524], 102);
	SC_Instruction__Add(JB_LUB[154], JB_LUB[1525], 103);
	SC_Instruction__Add(JB_LUB[1526], JB_LUB[1527], 104);
	SC_Instruction__Add(JB_LUB[154], JB_LUB[1528], 105);
	SC_Instruction__Add(JB_LUB[1526], JB_LUB[1529], 106);
	SC_Instruction__Add(JB_LUB[154], JB_LUB[1530], 107);
	SC_Instruction__Add(JB_LUB[154], JB_LUB[1531], 108);
	SC_Instruction__Add(JB_LUB[154], JB_LUB[1532], 109);
	SC_Instruction__Add(JB_LUB[1533], JB_LUB[1534], 110);
	SC_Instruction__Add(JB_LUB[1533], JB_LUB[1535], 111);
	SC_Instruction__Add(JB_LUB[1536], JB_LUB[1537], 112);
	SC_Instruction__Add(JB_LUB[1538], JB_LUB[1539], 113);
	Instruction* ERR = SC__Instruction_TypeList[0];
	JB_Incr(ERR);
	if (ERR) {
		{
			int I = 0;
			while (I < 256) {
				if (!SC__Instruction_TypeList[I]) {
					JB_SetRef(SC__Instruction_TypeList[I], ERR);
				}
				(++I);
			};
		};
	}
	 else {
	}
	JB_Decr(ERR);
	Instruction* _tmPf1 = ((Instruction*)JB_Dict_Value0(SC__Instruction_OpDict, JB_LUB[1540]));
	JB_Incr(_tmPf1);
	(JB_Dict_ValueSet(SC__Instruction_OpDict, JB_LUB[674], _tmPf1));
	JB_Decr(_tmPf1);
	Instruction* _tmPf2 = ((Instruction*)JB_Dict_Value0(SC__Instruction_OpDict, JB_LUB[1541]));
	JB_Incr(_tmPf2);
	(JB_Dict_ValueSet(SC__Instruction_OpDict, JB_LUB[1412], _tmPf2));
	JB_Decr(_tmPf2);
}

Instruction* SC_Instruction__SyntaxAccessWithMsg(Message* M) {
	Instruction* _tmPf0 = ((Instruction*)JB_Dict_ValueLower(SC__Instruction_OpDict, M->Name));
	if (!_tmPf0) {
		JB_Msg_Fail(M, JB_LUB[907]);
		return nil;
	}
	return _tmPf0;
}

Instruction* SC_Instruction__SyntaxAccessWithInt(int Pos) {
	return SC__Instruction_TypeList[Pos];
}


LeakTester* JB_Lk_Constructor(LeakTester* Self, JB_String* Name) {
	if (Self == nil) {
		Self = ((LeakTester*)JB_NewClass(&LeakTesterData));
	}
	Self->MemUsedStart = JB_MemCount();
	JB_Incr2(Self->Name, Name);
	JB_Mem_Mark();
	return Self;
}

void JB_Lk_Destructor(LeakTester* Self) {
	JB_Clear(Self->Name);
}

void JB_Lk_FinalTest(LeakTester* Self) {
	JB_Lk_Test2(Self);
	Self->MemUsedStart = nil;
	JB_Mem_Unmark();
}

void JB_Lk_Test2(LeakTester* Self) {
	if (!Self->MemUsedStart) {
		return;
	}
	int NewAmount = JB_MemCount();
	int Diff = NewAmount - Self->MemUsedStart;
	if (Diff > 0) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[134]);
		JB_FS_AppendInt32(_fsf0, Diff);
		JB_FS_AppendString(_fsf0, JB_LUB[135]);
		JB_FS_AppendString(_fsf0, Self->Name);
		JB_FS_AppendString(_fsf0, JB_LUB[136]);
		JB_FS_AppendInt32(_fsf0, NewAmount);
		JB_FS_AppendByte(_fsf0, '.');
		JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf1);
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
}


Macro* SC_Macro_clean(Macro* Self) {
	if (!Self->Cleaned) {
		Self->Cleaned = true;
		Message* S = JB_Macro_Source(Self);
		JB_Incr(S);
		if (S) {
			SC_Msg_Clean(S, false);
		}
		JB_Decr(S);
	}
	return Self;
}

Macro* JB_Macro_ConstructorStr(Macro* Self, JB_String* S) {
	if (Self == nil) {
		Self = ((Macro*)JB_NewClass(&MacroData));
	}
	Self->Cleaned = false;
	Self->_Parsed = nil;
	JB_Incr2(Self->Input, S);
	return Self;
}

Macro* JB_Macro_ConstructorMsg(Macro* Self, Message* S) {
	if (Self == nil) {
		Self = ((Macro*)JB_NewClass(&MacroData));
	}
	Self->Cleaned = false;
	JB_Incr2(Self->Input, JB_LUB[0]);
	JB_Incr2(Self->_Parsed, S);
	return Self;
}

void JB_Macro_Destructor(Macro* Self) {
	JB_Clear(Self->Input);
	JB_Clear(Self->_Parsed);
}

Message* JB_Macro_Run(Macro* Self, Array* Prms) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Msg_ConstructorEmpty(nil));
	JB_Msg_BecomeMacro(Rz, Self, Prms);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Macro_CallFast(Macro* Self, Message* Prm1, Message* Prm2) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Msg_ConstructorEmpty(nil));
	JB_Array_SyntaxAppend(JB__Macro_TmpPrms_, Prm1);
	JB_Array_SyntaxAppend(JB__Macro_TmpPrms_, Prm2);
	JB_Msg_BecomeMacro(Rz, Self, JB__Macro_TmpPrms_);
	JB_Array_Clear(JB__Macro_TmpPrms_);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Macro_Source(Macro* Self) {
	Message* Rz = nil;
	Rz = Self->_Parsed;
	if (!Rz) {
		Rz = JB_Str_Parse(Self->Input, kJB_SyxArg, true);
		if (Rz) {
			JB_Msg_WipePositions(Rz);
			JB_SetRef(Self->_Parsed, Rz);
		}
	}
	return Rz;
}

int JB_Macro__Init_() {
	{
		JB_SetRef(JB__Macro_TmpPrms_, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}


MWrap* JB_Mrap_ConstructorPtr(MWrap* Self, int ItemCount, int ItemSize, byte* Ptr, uint /*byte*/ DeathAction) {
	if (Self == nil) {
		Self = ((MWrap*)JB_NewClass(&MWrapData));
	}
	Self->ItemSize = ItemSize;
	Self->ItemCount = ItemCount;
	Self->DeathAction = DeathAction;
	Self->Length = 0;
	Self->_Ptr = Ptr;
	return Self;
}

void JB_Mrap_Destructor(MWrap* Self) {
	if (Self->DeathAction == kJB__Wrap_kFree) {
		JB_free(Self->_Ptr);
	}
}

void JB_Mrap_ItemCountSet(MWrap* Self, int Value) {
	JB_Mrap_SetCount(Self, Value);
}

void JB_Mrap_LengthSet(MWrap* Self, int Value) {
	if (Value > Self->ItemCount) {
		Value = Self->ItemCount;
	}
	 else if (Value < 0) {
		Value = 0;
	}
	Self->Length = Value;
}

byte* JB_Mrap_NeedSpare(MWrap* Self, int ReqItems, int Extra) {
	int Q = Self->Length + ReqItems;
	if (Self->ItemCount < Q) {
		JB_DoAt(1);
		if (!JB_Mrap_SetCount(Self, Q + Extra)) {
			return nil;
		}
	}
	return ((byte*)(JB_Mrap_Ptr(Self) + (Self->ItemCount * Self->ItemSize)));
}

byte* JB_Mrap_Ptr(MWrap* Self) {
	return ((byte*)Self->_Ptr);
}

bool JB_Mrap_SetCount(MWrap* Self, int ItemCount) {
	if (ItemCount == Self->ItemCount) {
		return true;
	}
	if (Self->DeathAction != kJB__Wrap_kFree) {
		return nil;
	}
	int S = ((int)Self->ItemSize);
	int Old = S * Self->ItemCount;
	int New = S * ItemCount;
	byte* Mem = JB_realloc(Self->_Ptr, New);
	if (Mem) {
		Self->_Ptr = Mem;
		Self->ItemCount = ItemCount;
		if (ItemCount < Self->Length) {
			Self->Length = ItemCount;
		}
		if (New > Old) {
			memzero(Mem + Old, New - Old);
		}
		return true;
	}
	if (true) {
		JB_String* _tmPf1 = JB_int_RenderFS(New, nil);
		JB_Incr(_tmPf1);
		JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[794], _tmPf1);
		JB_Incr(_tmPf0);
		JB_Decr(_tmPf1);
		JB_Object_FailStr(Self, _tmPf0);
		JB_Decr(_tmPf0);
	}
	return false;
}

void JB_Mrap_Zero(MWrap* Self) {
	memzero(Self->_Ptr, Self->Length * Self->ItemSize);
}

Array* JB_Mrap__CollectLeaks_(JB_Object* Self) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	JB_Incr(Rz);
	JB_FindLeakedObject(Self, Rz);
	JB_SafeDecr(Rz);
	return Rz;
}

void JB_Mrap__Fill(byte* P, int N, uint /*byte*/ B) {
	memset(P, B, N);
}

int JB_Mrap__Init_() {
	{
	}
	;
	return 0;
}

MWrap* JB_Mrap__Object(int Count, int ItemSize) {
	//visible;
	byte* P = JB_zalloc(Count * ItemSize);
	if (P) {
		return JB_Mrap_ConstructorPtr(nil, Count, ItemSize, P, kJB__Wrap_kFree);
	}
	return nil;
}

void jbl(JB_Object* Self) {
	//visible;
	{
		Array* _LoopSrcf2 = JB_Mrap__CollectLeaks_(Self);
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			JB_Object* Bad = JB_Array_Value(_LoopSrcf2, _if0);
			JB_Incr(Bad);
			if (Bad == nil) {
				JB_Decr(Bad);
				break;
			}
			jdb(Bad);
			JB_Decr(Bad);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	};
}




RefTest* SC_RefTest_Constructor(RefTest* Self) {
	if (Self == nil) {
		Self = ((RefTest*)JB_NewClass(&RefTestData));
	}
	//visible;
	JB_Incr2(Self->s, JB_LUB[81]);
	return Self;
}

void SC_RefTest_Destructor(RefTest* Self) {
	JB_Clear(Self->s);
}


bool SC_Imp_CanBan(SCImport* Self, SCFile* Scf) {
	bool Rz = false;
	if (!SC__Imp_STDLibTime) {
		return true;
	}
	if (SC__Options_ProjectIsMiniLib) {
		JB_File* P = SC__Comp_BaseProjectPath;
		JB_Incr(P);
		if (P) {
			JB_String* _tmPf0 = JB_File_Path(Scf);
			JB_Incr(_tmPf0);
			Rz = JB_File_DirectoryContains(P, _tmPf0);
			JB_Decr(_tmPf0);
		}
		JB_Decr(P);
	}
	return Rz;
}

SCImport* SC_Imp_Constructor(SCImport* Self, JB_File* F, bool Builtin) {
	if (Self == nil) {
		Self = ((SCImport*)JB_NewClass(&SCImportData));
	}
	Self->Depth = 0;
	JB_Incr2(Self->Files, JB_Array_Constructor0(nil));
	Self->Conf = nil;
	Self->IsSTDLib = (SC__Imp_STDLibTime or (F == nil));
	Self->WarnUnusedFuncs = (!Self->IsSTDLib);
	JB_Incr2(Self->Resources, JB_Dict_Constructor(nil));
	Self->BlindCast = JB_Ternary(Builtin, 0, ((int)kJB__ErrorSeverity_Error));
	JB_Incr2(Self->DeclLayer, JB_Mem_CreateLayer((&SCDeclData), Self));
	SCModule* M = ((SCModule*)SC_Mod__NeuModule(nil, SC__Comp_program, nil));
	JB_Incr(M);
	JB_Incr2(Self->Mod, M);
	M->Project = Self;
	M->IsImport = true;
	JB_Incr2(Self->Where, F);
	if (F != nil) {
		JB_SetRef(M->Name, JB_Str_Name(F));
		(SC__Imp_Recent = JB_int64_OperatorMax(SC__Imp_Recent, JB_File_Modified(F)));
	}
	JB_Decr(M);
	return Self;
}

void SC_Imp_Destructor(SCImport* Self) {
	JB_Clear(Self->Where);
	JB_Clear(Self->Resources);
	JB_Clear(Self->Mod);
	JB_Clear(Self->DeclLayer);
	JB_Clear(Self->Files);
	JB_Clear(Self->Conf);
}

SCFile* SC_Imp_ImportDir(SCImport* Self, JB_File* F) {
	SCFile* Rz = nil;
	JB_Incr(Rz);
	Array* Flist = JB_File_List(F, false, false);
	JB_Incr(Flist);
	{
		int _if0 = 0;
		while (true) {
			JB_String* cName = ((JB_String*)JB_Array_Value(Flist, _if0));
			JB_Incr(cName);
			if (cName == nil) {
				JB_Decr(cName);
				break;
			}
			JB_File* C = JB_File_SyntaxAccess(F, cName);
			JB_Incr(C);
			JB_String* Ext = JB_Str_Ext(cName);
			JB_Incr(Ext);
			if (JB_Str_ContainsString(cName, JB_LUB[1403])) {
				0;
			}
			 else if (JB_File_IsDir(C)) {
				JB_FreeIfDead(SC_Imp_ImportDir(Self, C));
			}
			 else if (SC_Str_IsSpeedieSrc(cName)) {
				SCFile* B = SC_Imp_ImportSpd(Self, C);
				JB_Incr(B);
				if (JB_Str_Equals(cName, JB_LUB[1404], true)) {
					JB_SetRef(Rz, B);
				}
				JB_Decr(B);
			}
			 else if ((JB_Str_Equals(Ext, JB_LUB[1405], false)) or ((JB_Str_Equals(Ext, JB_LUB[1406], false)) or ((JB_Str_Equals(Ext, JB_LUB[1407], false)) or (JB_Str_Equals(Ext, JB_LUB[98], false))))) {
				if (!SC__Imp_Shaders) {
					JB_SetRef(SC__Imp_Shaders, JB_Dict_Constructor(nil));
				}
				(JB_Dict_ValueSet(SC__Imp_Shaders, cName, C));
			}
			 else if (SC_Str_isCLike(Ext)) {
				JB_String* _tmPf2 = JB_File_Path(C);
				JB_Incr(_tmPf2);
				JB_Array_SyntaxAppend(SC__Cpp_Cpp_Input, _tmPf2);
				JB_Decr(_tmPf2);
			}
			 else {
				(JB_Dict_ValueLowerSet(Self->Resources, cName, C));
			}
			JB_Decr(cName);
			JB_Decr(C);
			JB_Decr(Ext);
			(++_if0);
		};
	}
	;
	JB_Decr(Flist);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Imp_ImportMsg(SCImport* Self, Message* J) {
	JB_Err__SourceAdd(J);
	SC_Imp_ImportMsgSub(Self, J);
	JB_Err__SourceRemove();
}

void SC_Imp_ImportMsgSub(SCImport* Self, Message* J) {
	Message* L = JB_Msg_Last(J, kJB_SyxStr);
	JB_Incr(L);
	if (!L) {
		JB_Decr(L);
		return;
	}
	JB_String* Name = L->Name;
	JB_Incr(Name);
	JB_Decr(L);
	JB_File* P = SC_Comp__FindProject(Name);
	JB_Incr(P);
	if (!P) {
		if (JB_Str_ByteValue(Name, 0) != '/') {
			JB_String* _tmPf2 = SC_Comp__Projects();
			JB_Incr(_tmPf2);
			JB_String* _tmPf1 = JB_Str_SyntaxAccess(_tmPf2, Name);
			JB_Incr(_tmPf1);
			JB_Decr(_tmPf2);
			JB_SetRef(P, JB_Str_FileThatExists(_tmPf1, JB_LUB[1069]));
			JB_Decr(_tmPf1);
		}
		 else {
			JB_SetRef(P, JB_Str_FileThatExists(Name, JB_LUB[1069]));
		}
	}
	if (!P) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[1283]);
		JB_FS_AppendString(_fsf0, Name);
		JB_FS_AppendByte(_fsf0, '\'');
		JB_String* _tmPf3 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf3);
		JB_Decr(_fsf0);
		JB_Msg_Fail(J, _tmPf3);
		JB_Decr(_tmPf3);
		JB_Decr(P);
		JB_Decr(Name);
		return;
	}
	(++SC__Imp_CurrIsManuallyImported);
	JB_FreeIfDead(SC_Imp__ImportPath(Name, P, Self->Depth + 1, false));
	JB_Decr(Name);
	JB_Decr(P);
	(--SC__Imp_CurrIsManuallyImported);
}

SCFile* SC_Imp_ImportSpd(SCImport* Self, JB_File* C) {
	SCFile* Rz = nil;
	JB_Incr(Rz);
	if (JB_Array_SyntaxCompare(SC__Imp_AllFiles, 65536, false) >= 0) {
		JB_File_Fail(C, JB_LUB[905]);
		JB_Decr(Rz);
		return nil;
	}
	JB_String* Path = JB_Str_LowerCase(C);
	JB_Incr(Path);
	if (JB_FreeIfDead(((SCFile*)JB_Dict_Value0(SC__Comp_Files, Path)))) {
		JB_File_Fail(C, JB_LUB[906]);
	}
	JB_SetRef(Rz, SC_File_Constructor(nil, C, Self));
	(JB_Dict_ValueSet(SC__Comp_Files, Path, Rz));
	JB_Decr(Path);
	JB_Array_SyntaxAppend(SC__Imp_AllFiles, Rz);
	JB_Array_SyntaxAppend(Self->Files, Rz);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Imp_IncludeCHeaders(SCImport* Self, JB_File* F, Array* Output) {
	{
		Array* _LoopSrcf2 = JB_File_ListFiles(F, false);
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			JB_File* C = ((JB_File*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			if (((!JB_File_IsDir(C))) and (JB_Str_OperatorIsa(C, JB_LUB[532]))) {
				JB_Array_SyntaxAppend(Output, C);
			}
			JB_Decr(C);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	};
}

void SC_Imp_IndexLinkage(SCImport* Self, Message* Link, SCFile* Scf) {
	Message* _tmPf0 = JB_Msg_GetConf(Link, JB_LUB[626], false);
	JB_Incr(_tmPf0);
	if (JB_Msg_SyntaxEquals(_tmPf0, JB_LUB[1108], true)) {
		Self->IsSTDLib = true;
		Self->WarnUnusedFuncs = false;
	}
	Message* _tmPf1 = JB_Msg_GetConf(Link, JB_LUB[1109], false);
	JB_Incr(_tmPf1);
	if (JB_Msg_Yes(_tmPf1, false)) {
		JB_String* _tmPf2 = JB_File__Applications();
		JB_Incr(_tmPf2);
		JB_String* _tmPf4 = SC_Comp__ProductPath();
		JB_Incr(_tmPf4);
		JB_String* _tmPf3 = JB_Str_Name(_tmPf4);
		JB_Incr(_tmPf3);
		JB_Decr(_tmPf4);
		JB_SetRef(SC__Options_output_path, JB_Str_SyntaxAccess(_tmPf2, _tmPf3));
		JB_Decr(_tmPf2);
		JB_Decr(_tmPf3);
	}
	if (SC_Imp_CanBan(Self, Scf)) {
		Message* _tmPf5 = JB_Msg_GetConf(Link, JB_LUB[1110], false);
		JB_Incr(_tmPf5);
		SC_Imp_LoadBanned(Self, _tmPf5);
		JB_Decr(_tmPf5);
	}
	Message* Arg = JB_Msg_NeedSyx(Link, kJB_SyxArg);
	JB_Incr(Arg);
	Message* Name = JB_Msg_GetConf(Arg, JB_LUB[1111], false);
	JB_Incr(Name);
	if (Name) {
		JB_SetRef(Scf->ExportName, Name->Name);
		JB_SetRef(Self->Mod->ExportName, Name->Name);
	}
	Message* Blind = JB_Msg_GetConf(Arg, JB_LUB[1112], false);
	JB_Incr(Blind);
	JB_Decr(Arg);
	if (Blind) {
		Self->BlindCast = SC_Msg_Blind(Blind);
	}
	 else if (SC__Options_SelfReplacement) {
		Self->BlindCast = 0;
	}
	JB_Tree_Remove(Link);
	JB_Decr(Blind);
	JB_Decr(Name);
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
}

void SC_Imp_IndexTargets(SCImport* Self, Message* Tar) {
	{
		Message* _LoopSrcf2 = JB_Msg_Arg(Tar);
		Message* T = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (T) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(T));
			if (JB_Msg_Expect(T, kJB_SyxTmp, nil)) {
				Message* Ch = ((Message*)JB_Ring_First(T));
				if (Ch) {
					if (true) {
						JB_Msg_Fail(Ch, nil);
					}
				}
				 else {
					(SC_SC_Targets__SyntaxAccessSet(T->Name, true));
				}
			}
			T = _Nf1;
		};
		;
	}
	;
	JB_Tree_Remove(Tar);
}

void SC_Imp_LoadBanned(SCImport* Self, Message* List) {
	if (!JB_Msg_Expect(List, kJB_SyxList, nil)) {
		return;
	}
	Dictionary* X = ({
		Dictionary* _X = SC__Options_BannedClasses;
		if (!_X) {
			_X = JB_Dict_Constructor(nil);
			JB_SetRef(SC__Options_BannedClasses, _X);
		}
		 _X;
	});
	{
		Message* Item = ((Message*)JB_Ring_First(List));
		while (Item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Item));
			JB_Msg_Expect(Item, kJB_SyxThg, nil);
			(JB_Dict_ValueLowerSet(X, Item->Name, JB_LUB[370]));
			Item = _Nf1;
		};
		;
	};
}

void SC_Imp_LoadConf(SCImport* Self, SCFile* Scf) {
	JB_SetRef(Self->Mod->ExportName, JB_LUB[2043]);
	if (!Scf) {
		return;
	}
	JB_SetRef(Self->Conf, Scf);
	{
		Message* _LoopSrcf2 = SC_File_AST(Scf);
		Message* S = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (S) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(S));
			if (!JB_Msg_EqualsSyx(S, kJB_SyxTmp, false)) {
				0;
			}
			 else if (JB_Msg_SyntaxEquals(S, JB_LUB[237], true)) {
				SC_Imp_IndexLinkage(Self, S, Scf);
			}
			 else if (JB_Msg_SyntaxEquals(S, JB_LUB[2044], true)) {
				SC_Linkage__CompilerCollect(S);
			}
			 else if (JB_Msg_SyntaxEquals(S, JB_LUB[2045], true)) {
				SC_Comp__SetConf(S);
			}
			 else if (JB_Msg_SyntaxEquals(S, JB_LUB[2046], true)) {
				SC_Imp_IndexTargets(Self, S);
			}
			S = _Nf1;
		};
		;
	};
}

void SC_Imp_PrepareAll(SCImport* Self) {
	{
		Array* _LoopSrcf2 = Self->Files;
		int _if0 = 0;
		while (true) {
			SCFile* F = ((SCFile*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			JB_FreeIfDead(SC_File_AST(F));
			(++_if0);
		};
	};
}

void SC_Imp_ReloadImports(SCImport* Self, SCFile* Index) {
	{
		Message* _LoopSrcf2 = SC_File_AST(Index);
		Message* J = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (J) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(J));
			if (SC_Msg_OperatorIsTmp(J, JB_LUB[561])) {
				SC_Imp_ImportMsg(Self, J);
			}
			J = _Nf1;
		};
		;
	};
}

JB_String* SC_Imp_Render(SCImport* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, Self->Mod->Name);
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Imp_Use(SCImport* Self) {
	if (Self) {
		JB_Mem_Use(Self->DeclLayer);
		SC__Imp_Curr = Self;
	}
}

SCNode* SC_Imp__DoImport(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCImport* C = SC__Imp_Curr;
	JB_Incr(C);
	if (C) {
		SC_Imp_ImportMsg(C, Node);
	}
	 else {
		if (true) {
			JB_Msg_Fail(Node, JB_LUB[1376]);
		}
	}
	JB_Decr(C);
	return SC__Comp_program;
}

void SC_Imp__ExportShaders() {
	if (!SC__Imp_Shaders) {
		return;
	}
	SC_Comp__Stage(JB_LUB[1113]);
	SC_Comp__Timer(JB_LUB[1113]);
	JB_File* _tmPf2 = SC_Comp__BuildFolder();
	JB_Incr(_tmPf2);
	JB_File* P = JB_File_SyntaxAccess(_tmPf2, JB_LUB[1114]);
	JB_Incr(P);
	JB_Decr(_tmPf2);
	JB_FreeIfDead(SC_Str_MakeAndGoInto(P));
	{
		DictionaryReader* _navf0 = JB_Dict_Navigate(SC__Imp_Shaders);
		JB_Incr(_navf0);
		while (true) {
			JB_Object* F = JB_DictionaryReader_NextValue(_navf0);
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			JB_String* Sh_name = JB_Nav_Name(_navf0);
			JB_Incr(Sh_name);
			if (JB_Object_Isa(F, &JB_FileData)) {
				JB_String* Name = JB_Str_Name(((JB_File*)F));
				JB_Incr(Name);
				JB_File* Dest = JB_File_SyntaxAccess(P, Name);
				JB_Incr(Dest);
				JB_Decr(Name);
				JB_String* _tmPf4 = JB_File_ReadAll(((JB_File*)F), 134217728, true);
				JB_Incr(_tmPf4);
				JB_String* _tmPf3 = JB_Str_OperatorPlus(JB_LUB[1115], _tmPf4);
				JB_Incr(_tmPf3);
				JB_Decr(_tmPf4);
				(JB_File_DataSet(Dest, _tmPf3));
				JB_Decr(Dest);
				JB_Decr(_tmPf3);
			}
			 else if (JB_Object_Isa(F, &JB_StringData)) {
				JB_File* Dest = JB_File_SyntaxAccess(P, Sh_name);
				JB_Incr(Dest);
				(JB_File_DataSet(Dest, ((JB_String*)F)));
				JB_Decr(Dest);
			}
			JB_Decr(F);
			JB_Decr(Sh_name);
		};
		JB_Decr(_navf0);
	}
	;
	JB_Decr(P);
}

SCImport* SC_Imp__FindImport(JB_String* S) {
	{
		Array* _LoopSrcf2 = SC__Comp_ImportedList;
		int _if0 = 0;
		while (true) {
			SCImport* Imp = ((SCImport*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Imp == nil) {
				break;
			}
			if (JB_Str_Equals(S, Imp->Where, true)) {
				return Imp;
			}
			(++_if0);
		};
	}
	;
	return nil;
}

JB_File* SC_Imp__FindInputFolder(JB_File* F) {
	JB_String* FirstName = JB_LUB[0];
	JB_Incr(FirstName);
	{
		Array* _LoopSrcf4 = JB_File_List(F, false, false);
		JB_Incr(_LoopSrcf4);
		int _if2 = 0;
		while (true) {
			JB_String* Name = ((JB_String*)JB_Array_Value(_LoopSrcf4, _if2));
			JB_Incr(Name);
			if (Name == nil) {
				JB_Decr(Name);
				break;
			}
			if (SC_Imp__IsInputName(Name)) {
				if (!JB_Str_Exists(FirstName)) {
					JB_SetRef(FirstName, Name);
				}
				 else {
					if (true) {
						FastString* _fsf0 = JB_FS_Constructor(nil);
						JB_Incr(_fsf0);
						JB_FS_AppendString(_fsf0, JB_LUB[1408]);
						JB_FS_AppendString(_fsf0, Name);
						JB_FS_AppendString(_fsf0, JB_LUB[1409]);
						JB_FS_AppendString(_fsf0, FirstName);
						JB_FS_AppendByte(_fsf0, '\'');
						JB_String* _tmPf5 = JB_FS_GetResult(_fsf0);
						JB_Incr(_tmPf5);
						JB_Decr(_fsf0);
						JB_Object_FailStr(nil, _tmPf5);
						JB_Decr(_tmPf5);
					}
				}
			}
			JB_Decr(Name);
			(++_if2);
		};
		JB_Decr(_LoopSrcf4);
	}
	;
	if ((!JB_Str_Exists(FirstName))) {
		FastString* _fsf1 = JB_FS_Constructor(nil);
		JB_Incr(_fsf1);
		JB_FS_AppendString(_fsf1, JB_LUB[1410]);
		JB_FS_AppendString(_fsf1, F);
		JB_FS_AppendString(_fsf1, JB_LUB[1411]);
		JB_String* _tmPf6 = JB_FS_GetResult(_fsf1);
		JB_Incr(_tmPf6);
		JB_Decr(_fsf1);
		JB_File_Fail(F, _tmPf6);
		JB_Decr(_tmPf6);
		JB_Decr(FirstName);
		return nil;
	}
	JB_File* _tmPf7 = JB_File_SyntaxAccess(F, FirstName);
	JB_Incr(_tmPf7);
	JB_Decr(FirstName);
	JB_SafeDecr(_tmPf7);
	return _tmPf7;
}

SCImport* SC_Imp__ImportPath(JB_String* Path, JB_File* F, int ImportDepth, bool Builtin) {
	JB_Incr(F);
	SCImport* Rz = nil;
	JB_Incr(Rz);
	if (!(JB_File_MustExist(F, JB_LUB[0]) and SC_Str_IsOKForImport(Path))) {
		JB_Decr(F);
		JB_Decr(Rz);
		return nil;
	}
	JB_String* _tmPf0 = JB_File_Path(F);
	JB_Incr(_tmPf0);
	JB_String* Fpl = JB_Str_LowerCase(_tmPf0);
	JB_Incr(Fpl);
	JB_Decr(_tmPf0);
	SCImport* Old = ((SCImport*)JB_Dict_Value0(SC__Comp_ImportedNames, Fpl));
	JB_Incr(Old);
	if (Old) {
		JB_Decr(F);
		JB_Decr(Fpl);
		JB_Decr(Rz);
		JB_SafeDecr(Old);
		return Old;
	}
	JB_Decr(Old);
	JB_SetRef(Rz, SC_Imp_Constructor(nil, F, Builtin));
	JB_Array_SyntaxAppend(SC__Comp_ImportedList, Rz);
	Rz->Depth = ImportDepth;
	(JB_Dict_ValueSet(SC__Comp_ImportedNames, Fpl, Rz));
	JB_Decr(Fpl);
	SCFile* Conf = nil;
	JB_Incr(Conf);
	if (JB_Str_Exists(SC__Options_SingleFileInput) and (!JB_Str_Exists(Path))) {
		JB_File* _tmPf1 = JB_Str_AsFile(SC__Options_SingleFileInput);
		JB_Incr(_tmPf1);
		JB_SetRef(Conf, SC_Imp_ImportSpd(Rz, _tmPf1));
		JB_Decr(_tmPf1);
	}
	 else if (!JB_File_IsDir(F)) {
		JB_SetRef(Conf, SC_Imp_ImportSpd(Rz, F));
	}
	 else {
		if (!((JB_Str_ContainsString(Path, JB_LUB[4])) and (JB_Str_ByteValue(Path, 0) != '/'))) {
			JB_SetRef(F, SC_Imp__FindInputFolder(F));
			if (!(((bool)F) and JB_File_MustExist(F, JB_LUB[0]))) {
				JB_Decr(F);
				JB_Decr(Conf);
				JB_Decr(Rz);
				return nil;
			}
		}
		JB_SetRef(Conf, SC_Imp_ImportDir(Rz, F));
	}
	SC_Imp_LoadConf(Rz, Conf);
	JB_File* _tmPf2 = JB_File_SyntaxAccess(F, JB_LUB[2064]);
	JB_Incr(_tmPf2);
	SC_Imp_IncludeCHeaders(Rz, _tmPf2, SC__Cpp_H_Input);
	JB_Decr(_tmPf2);
	JB_File* _tmPf3 = JB_File_SyntaxAccess(F, JB_LUB[2065]);
	JB_Incr(_tmPf3);
	JB_Decr(F);
	SC_Imp_IncludeCHeaders(Rz, _tmPf3, SC__Cpp_H_PostInput);
	JB_Decr(_tmPf3);
	if (Conf) {
		SC_Imp_ReloadImports(Rz, Conf);
	}
	JB_Decr(Conf);
	JB_SafeDecr(Rz);
	return Rz;
}

int SC_Imp__Init_() {
	{
		JB_SetRef(SC__Imp_AllFiles, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

bool SC_Imp__IsInputName(JB_String* Name) {
	if ((JB_Str_Equals(Name, JB_LUB[538], true)) or JB_Str_OperatorIsa(Name, JB_LUB[538])) {
		return true;
	}
	return false;
}

void SC_Imp__NoProj() {
	SC__Imp_Curr = nil;
	JB_ClassData_Restore((&SCDeclData));
}

SortComparison SC_Imp__Sorter(SCFile* Self, SCFile* B) {
	int Lib = Self->Proj->IsSTDLib - B->Proj->IsSTDLib;
	if (Lib) {
		return ((SortComparison)Lib);
	}
	return ((SortComparison)(JB_Str_CompareStr(Self, B, false) <= -1));
}


void SC_NR_Collect(SCNodeRenamer* Self, Message* Msg, JB_String* Name, Message* After) {
	JB_Incr(Msg);
	JB_SetRef(Self->Name, Name);
	while (Msg != After) {
		if (SC_Msg_OperatorIsThing(Msg, Name)) {
			JB_Array_SyntaxAppend(Self->Nodes, Msg);
		}
		JB_SetRef(Msg, ((Message*)JB_Ring_FlatNext0(Msg)));
	};
	JB_Decr(Msg);
}

void SC_NR_CollectDclThg(SCNodeRenamer* Self, Message* DclThg) {
	Message* Dcl = JB_Msg_Ancestor(DclThg, kJB_SyxDecl);
	if (!(Dcl and (JB_Msg_EqualsSyx(DclThg, kJB_SyxThg, false)))) {
		JB_Msg_Fail(DclThg, nil);
		return;
	}
	SC_NR_Collect(Self, DclThg, DclThg->Name, SC_Msg_FullAfter(Dcl));
}

void SC_NR_CollectSelfs(SCNodeRenamer* Self, Message* Root) {
	{
		Message* Msg = Root;
		JB_Incr(Msg);
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Root));
		JB_Incr(_afterf1);
		while ((Msg) and (Msg != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Msg));
			JB_Incr(_N_f2);
			if (JB_Msg_EqualsSyx(Msg, kJB_SyxSDot, false)) {
				SC_Func__Tran_Sdt(Msg);
			}
			JB_SetRef(Msg, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(Msg);
		JB_Decr(_afterf1);
		;
	}
	;
	Message* _tmPf3 = ((Message*)JB_Ring_FlatAfter(Root));
	JB_Incr(_tmPf3);
	SC_NR_Collect(Self, Root, JB_LUB[180], _tmPf3);
	JB_Decr(_tmPf3);
}

SCNodeRenamer* SC_NR_Constructor(SCNodeRenamer* Self) {
	if (Self == nil) {
		Self = ((SCNodeRenamer*)JB_NewClass(&SCNodeRenamerData));
	}
	JB_Incr2(Self->Nodes, JB_Array_Constructor0(nil));
	JB_Incr2(Self->Name, JB_LUB[0]);
	return Self;
}

void SC_NR_Destructor(SCNodeRenamer* Self) {
	JB_Clear(Self->Nodes);
	JB_Clear(Self->Name);
}

void SC_NR_Rename(SCNodeRenamer* Self, Message* Name) {
	if ((JB_Ring_HasChildren(Name))) {
		JB_Msg_Fail(Name, JB_LUB[929]);
		return;
	}
	{
		Array* _LoopSrcf2 = Self->Nodes;
		int _if0 = 0;
		while (true) {
			Message* N = ((Message*)JB_Array_Value(_LoopSrcf2, _if0));
			if (N == nil) {
				break;
			}
			N->Func = Name->Func;
			JB_SetRef(N->Name, Name->Name);
			N->Position = Name->Position;
			(++_if0);
		};
	};
}

void SC_NR_Uniqueify(SCNodeRenamer* Self, SCNode* P) {
	JB_String* _tmPf1 = SC_UniqueTmpVar(P, Self->Name);
	JB_Incr(_tmPf1);
	Message* _tmPf0 = JB_Syx_OperatorPlus(kJB_SyxThg, _tmPf1);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	SC_NR_Rename(Self, _tmPf0);
	JB_Decr(_tmPf0);
}


int SC_SCObject_Auto_Type(SCObject* Self) {
	if (JB_Object_FastIsa(Self, &SCDeclData)) {
		if (SC_Decl_SyntaxIs(((SCDecl*)Self), kSC__SCDeclInfo_Property)) {
			return -2;
		}
		if (SC_Decl_SyntaxIs(((SCDecl*)Self), kSC__SCDeclInfo_Const)) {
			return 5;
		}
		return 0;
	}
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		if (SC_Func_SyntaxIs(((SCFunction*)Self), kSC__FunctionType_VirtualCaller)) {
			return 4;
		}
		return 1;
	}
	if (JB_Object_Isa(Self, &SCClassData) or JB_Object_Isa(Self, &SCModuleData)) {
		return 2;
	}
	return 3;
}

int SC_SCObject_AutoCompleteType(SCObject* Self) {
	if (JB_Object_FastIsa(Self, &SCModuleData)) {
		if (((SCModule*)Self)->Cls) {
			int R = 1;
			if (SC_Class_EqualsType(((SCModule*)Self)->Cls, kSC__SCNodeType_FuncProto, false)) {
				R = (R | 8);
			}
			return R;
		}
		return 2;
	}
	return 4;
}

JB_String* SC_SCObject_BaseIcon(SCObject* Self) {
	if (JB_Object_FastIsa(Self, &SCModuleData)) {
		if (((SCModule*)Self)->Cls) {
			return JB_LUB[272];
		}
		return JB_LUB[273];
	}
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		if (SC_Func_IsBehaviour(((SCFunction*)Self))) {
			return JB_LUB[274];
		}
		if (SC_Func_SyntaxIs(((SCFunction*)Self), kSC__FunctionType_VirtualCaller)) {
			return JB_LUB[275];
		}
		return JB_LUB[276];
	}
	if (JB_Object_FastIsa(Self, &SCClassData)) {
		return JB_LUB[277];
	}
	if (JB_Object_FastIsa(Self, &SCDeclData)) {
		if (SC_Decl_SyntaxIs(((SCDecl*)Self), kSC__SCDeclInfo_Property)) {
			return JB_LUB[278];
		}
		if (SC_Decl_SyntaxIs(((SCDecl*)Self), kSC__SCDeclInfo_Const)) {
			return JB_LUB[279];
		}
	}
	if (JB_Object_FastIsa(Self, &SCIteratorData)) {
		return JB_LUB[280];
	}
	return JB_LUB[281];
}

JB_String* SC_SCObject_CallFromName(SCObject* Self) {
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		return SC_Func_RenderName(((SCFunction*)Self), nil);
	}
	if (JB_Object_FastIsa(Self, &SCDeclData)) {
		return SC_Decl_AutoCompleteName(((SCDecl*)Self));
	}
	if (JB_Object_Isa(Self, &SCNamedData)) {
		return ((SCNamed*)Self)->Name;
	}
	return JB_LUB[0];
}

JB_String* SC_SCObject_CanAuto(SCObject* Self, JB_String* Search) {
	JB_String* Rz = JB_LUB[0];
	Rz = SC_SCObject_CanAutoSub(Self, Search);
	if (JB_Str_Exists(Rz)) {
		bool IsExact = (JB_Str_Equals(Rz, Search, true));
		if (JB_Object_FastIsa(Self, &SCFunctionData)) {
			if (SC_Func_VisibleArgs(((SCFunction*)Self))) {
				Rz = JB_Str_OperatorPlus(Rz, JB_LUB[1304]);
			}
		}
		if ((!IsExact) and Self->NoAutoComplete) {
			Rz = JB_LUB[0];
		}
	}
	return Rz;
}

JB_String* SC_SCObject_CanAutoSub(SCObject* Self, JB_String* Search) {
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		if (!((!((SCFunction*)Self)->NoAutoComplete) or ((JB_Str_Equals(((SCFunction*)Self)->Name, Search, true))))) {
			return JB_LUB[0];
		}
		if ((JB_Str_OperatorStarts(((SCFunction*)Self)->Name, JB_LUB[1216])) and (!(JB_Str_OperatorStarts(Search, JB_LUB[1217])))) {
			return JB_LUB[0];
		}
	}
	 else if (JB_Object_FastIsa(Self, &SCDeclData)) {
		return SC_Decl_RealName(((SCDecl*)Self));
	}
	 else if (JB_Object_FastIsa(Self, &SCModuleData)) {
		SCClass* Cls = ((SCModule*)Self)->Cls;
		if (Cls) {
			if ((Cls->NoAutoComplete or SC_Class_IsBehaviourTable(Cls))) {
				return JB_LUB[0];
			}
		}
	}
	if (JB_Object_Isa(Self, &SCNamedData)) {
		return ((SCNamed*)Self)->Name;
	}
	return JB_LUB[0];
}

bool SC_SCObject_CanLinkTo(SCObject* Self, SCObject* To) {
	if (To->LinkedFrom < SC__LinkMap_CurrID) {
		To->LinkedFrom = SC__LinkMap_CurrID;
		return true;
	}
	return false;
}

SCObject* SC_SCObject_Constructor(SCObject* Self) {
	if (Self == nil) {
		Self = ((SCObject*)JB_NewClass(&SCObjectData));
	}
	Self->LinkedFrom = 0;
	Self->Source = nil;
	Self->NodeInfo = 0;
	Self->AllocSource = 0;
	Self->NoAutoComplete = 0;
	Self->LinkFrom = nil;
	return Self;
}

void SC_SCObject_Destructor(SCObject* Self) {
	JB_Clear(Self->Source);
	JB_Clear(Self->LinkFrom);
}

SCFunction* SC_SCObject_Disambiguate(SCObject* Self, Message* Src) {
	SCFunction* Rz = nil;
	if (JB_Object_FastIsa(Self, &SCDeclData)) {
		Rz = ((SCDecl*)Self)->HiderFunc;
	}
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		Rz = ((SCFunction*)Self);
	}
	Rz = SC_Func_Disambiguate(Rz, Src);
	return Rz;
}

JB_String* SC_SCObject_Display(SCObject* Self, bool Exact) {
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		if (SC_Func_IsAllocOrNew(((SCFunction*)Self)) or (SC_Func_SyntaxIs(((SCFunction*)Self), kSC__FunctionType_Disabled))) {
			return JB_LUB[0];
		}
		return ((JB_String*)JB_Ternary(Exact, SC_Func_RenderTitle(((SCFunction*)Self), false, nil), ((SCFunction*)Self)->Name));
	}
	if (JB_Object_FastIsa(Self, &SCDeclData)) {
		return SC_Decl_AutoCompleteName(((SCDecl*)Self));
	}
	if (JB_Object_FastIsa(Self, &SCIteratorData)) {
		return JB_LUB[0];
	}
	if (JB_Object_Isa(Self, &SCNamedData)) {
		return ((SCNamed*)Self)->Name;
	}
	return JB_LUB[0];
}

SCFile* SC_SCObject_File(SCObject* Self) {
	Message* Src = Self->Source;
	if (Src) {
		return SC_Msg_File(Src);
	}
	if (JB_Object_FastIsa(Self, &SCModuleData)) {
		return ({
			SCClass* _t = ((SCModule*)Self)->Cls;
			 ((SCFile*)JB_Ternary(_t, SC_SCObject_File(_t), nil));
		});
	}
	return nil;
}

bool SC_SCObject_IsVisible(SCObject* Self) {
	return SC_SCObject_SyntaxIs(Self, kSC__SCNodeInfo_Visible);
}

void SC_SCObject_IsVisibleSet(SCObject* Self, bool Value) {
	((SC_SCObject_SyntaxIsSet(Self, kSC__SCNodeInfo_Visible, Value)));
}

void SC_SCObject_NameConflict(SCObject* Self, SCObject* Old, JB_String* Name) {
	JB_String* Msg = JB_Str_OperatorPlus(JB_LUB[947], Name);
	JB_Incr(Msg);
	if (true) {
		JB_Msg_Fail(Self->Source, Msg);
	}
	JB_Error* _tmPf0 = JB_Rec_LastError(JB_StdErr);
	JB_Incr(_tmPf0);
	(JB_Err_SyntaxIsSet(_tmPf0, kJB__ErrorFlags_DontStrip, true));
	JB_Decr(_tmPf0);
	if (true) {
		JB_Msg_Fail(Old->Source, Msg);
	}
	JB_Decr(Msg);
	JB_Error* _tmPf1 = JB_Rec_LastError(JB_StdErr);
	JB_Incr(_tmPf1);
	(JB_Err_SyntaxIsSet(_tmPf1, kJB__ErrorFlags_DontStrip, true));
	JB_Decr(_tmPf1);
}

SCObject* SC_SCObject_NextDisplay(SCObject* Self, bool Exact) {
	if (Exact) {
		if (JB_Object_FastIsa(Self, &SCFunctionData)) {
			return ((SCFunction*)Self)->NextFunc;
		}
		if (JB_Object_FastIsa(Self, &SCDeclData)) {
			return ((SCDecl*)Self)->HiderFunc;
		}
	}
	return nil;
}

void SC_SCObject_Fail(SCObject* Self, JB_String* Error) {
	JB_Rec__NewErrorWithNode(Self->Source, Error, nil);
}

bool SC_SCObject_SyntaxIs(SCObject* Self, SCNodeInfo I) {
	return JB_int_SyntaxAccess(Self->NodeInfo, I);
}

void SC_SCObject_SyntaxIsSet(SCObject* Self, SCNodeInfo I, bool Value) {
	int X = Self->NodeInfo;
	X = JB_int_SyntaxAccessSet(X, I, Value);
	Self->NodeInfo = X;
}


bool SC_Opp_CanOpCompare(SCOperator* Self, SCDecl* Lc, SCDecl* Rc, Message* Exp) {
	if (!JB_Msg_OperatorIn(Exp, kJB_SyxArg)) {
		bool Eq = ((bool)(SC_Opp_SyntaxIs(Self, kSC__OpMode_EqualOrNot)));
		if (SC_Decl_CanCompare(Lc, Rc, Eq)) {
			return true;
		}
	}
	return false;
}

JB_String* SC_Opp_CaseAwareStr(SCOperator* Self) {
	return JB_bool_Render0(((bool)(SC_Opp_SyntaxIs(Self, kSC__OpMode_CaseAware))));
}

SCOperator* SC_Opp_Constructor(SCOperator* Self, JB_String* Name, fn_OpASM ASM, OpMode Mode) {
	if (Self == nil) {
		Self = ((SCOperator*)JB_NewClass(&SCOperatorData));
	}
	Self->Score = 0;
	JB_Incr2(Self->CompOp, JB_LUB[0]);
	Self->Opposite = nil;
	JB_Incr2(Self->FuncName, JB_LUB[0]);
	JB_Incr2(Self->CompParam, JB_LUB[0]);
	JB_Incr2(Self->Name, Name);
	Self->Kind = Mode;
	Self->ASM = ASM;
	if (JB_Str_Exists(Name)) {
		(JB_Dict_ValueSet(SC__Opp_Dict, Name, Self));
	}
	return Self;
}

void SC_Opp_Destructor(SCOperator* Self) {
	JB_Clear(Self->CompOp);
	JB_Clear(Self->Name);
	JB_Clear(Self->FuncName);
	JB_Clear(Self->CompParam);
}

void SC_Opp_InitComp(SCOperator* Self, JB_String* Name_) {
	if (JB_Str_First(Name_) == '~') {
		Self->Kind = (Self->Kind | kSC__OpMode_CaseAware);
	}
	Self->Kind = (Self->Kind | kSC__OpMode_Compare);
	JB_SetRef(Self->FuncName, JB_LUB[258]);
	JB_String* S = SC_Opp_SimpleName(Self);
	JB_Incr(S);
	if (JB_Str_Length(S) == 2) {
		JB_SetRef(Self->CompOp, S);
	}
	 else {
		JB_SetRef(Self->CompOp, JB_LUB[259]);
	}
	if ((JB_Str_Equals(S, JB_LUB[260], false))) {
		JB_SetRef(Self->CompParam, JB_LUB[261]);
		JB_SetRef(Self->CompOp, JB_LUB[262]);
	}
	 else if ((JB_Str_Equals(S, JB_LUB[263], false))) {
		JB_SetRef(Self->CompParam, JB_LUB[264]);
		JB_SetRef(Self->CompOp, JB_LUB[265]);
	}
	 else if (((JB_Str_Equals(S, JB_LUB[262], false))) or ((JB_Str_Equals(S, JB_LUB[265], false)))) {
		JB_SetRef(Self->CompParam, JB_LUB[266]);
	}
	 else {
		JB_SetRef(Self->CompParam, JB_LUB[266]);
	}
	JB_Decr(S);
}

bool SC_Opp_IsCompOrSet(SCOperator* Self) {
	return ((bool)SC_Opp_SyntaxIs(Self, kSC__OpMode_CompOrSet));
}

JB_String* SC_Opp_Render(SCOperator* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, Self->Name);
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Opp_SetFuncNameSet(SCOperator* Self, JB_String* S) {
	JB_String* _tmPf0 = JB_Str_UpperFirst(S);
	JB_Incr(_tmPf0);
	JB_SetRef(Self->FuncName, JB_Str_OperatorPlus(JB_LUB[420], _tmPf0));
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_Str_LowerCase(S);
	JB_Incr(_tmPf1);
	(JB_Dict_ValueSet(SC__Opp_Dict, _tmPf1, Self));
	JB_Decr(_tmPf1);
}

JB_String* SC_Opp_SimpleName(SCOperator* Self) {
	JB_String* N = Self->Name;
	if (SC_Opp_SyntaxIs(Self, kSC__OpMode_CaseAware)) {
		return JB_Str_Range(N, (1), JB_int__Max());
	}
	return N;
}

bool SC_Opp_SyntaxEquals(SCOperator* Self, JB_String* S, bool Aware) {
	return JB_Str_Equals(Self->Name, S, Aware);
}

OpMode SC_Opp_SyntaxIs(SCOperator* Self, OpMode X) {
	return Self->Kind & X;
}

void SC_Opp__AddBasic() {
	JB_SetRef(SC__Opp_Assigns, SC_Opp_Constructor(nil, JB_LUB[241], nil, kSC__OpMode_Assigns));
	JB_SetRef(SC__Opp_And, SC_Opp_Constructor(nil, JB_LUB[267], nil, kSC__OpMode_AND));
	JB_SetRef(SC__Opp_Or, SC_Opp_Constructor(nil, JB_LUB[251], nil, kSC__OpMode_OR));
}

SCOperator* SC_Opp__AddBit(JB_String* S, JB_String* FuncName, fn_OpASM ASM, OpMode Mode) {
	SCOperator* Opp = SC_Opp_Constructor(nil, S, ((fn_OpASM)(ASM)), Mode | kSC__OpMode_Bit);
	JB_Incr(Opp);
	(SC_Opp_SetFuncNameSet(Opp, FuncName));
	JB_SafeDecr(Opp);
	return Opp;
}

void SC_Opp__AddComp(JB_String* S, fn_OpASM ASM, OpMode Mode) {
	SCOperator* Opp = SC_Opp_Constructor(nil, S, ((fn_OpASM)(ASM)), Mode | kSC__OpMode_Compare);
	JB_Incr(Opp);
	SC_Opp_InitComp(Opp, S);
	JB_Decr(Opp);
	JB_String* Newname = ((JB_String*)JB_Ternary((!JB_Str_Equals(S, JB_LUB[259], false)), ((JB_String*)JB_Str_OperatorPlus(JB_LUB[50], S)), ((JB_String*)JB_LUB[475])));
	JB_Incr(Newname);
	Mode = (Mode & (~kSC__OpMode_NilTest));
	SCOperator* _tmPf0 = SC_Opp_Constructor(nil, Newname, nil, Mode | kSC__OpMode_Custom);
	JB_Incr(_tmPf0);
	SC_Opp_InitComp(_tmPf0, Newname);
	JB_Decr(Newname);
	JB_Decr(_tmPf0);
}

SCOperator* SC_Opp__AddCustom(JB_String* S) {
	SCOperator* Opp = SC_Opp_Constructor(nil, S, nil, kSC__OpMode_Custom);
	JB_Incr(Opp);
	Opp->Score = SC__Opp_CustomOperatorScore;
	(SC_Opp_SetFuncNameSet(Opp, S));
	JB_SafeDecr(Opp);
	return Opp;
}

void SC_Opp__AddMath(JB_String* S, JB_String* FuncName, fn_OpASM ASM, OpMode Mode) {
	SCOperator* Opp = SC_Opp_Constructor(nil, S, ((fn_OpASM)(ASM)), Mode | kSC__OpMode_Math);
	JB_Incr(Opp);
	(SC_Opp_SetFuncNameSet(Opp, FuncName));
	JB_Decr(Opp);
}

void SC_Opp__BuildOrder() {
	JB_String* Strs = JB_LUB[734];
	JB_Incr(Strs);
	Array* Order = JB_Str_Split(Strs, '\n');
	JB_Incr(Order);
	JB_Decr(Strs);
	Message* Fake = (JB_Syx_Msg(kJB_SyxOpp, JB_LUB[0]));
	JB_Incr(Fake);
	{
		int _if0 = 0;
		while (true) {
			JB_String* Wi = ((JB_String*)JB_Array_Value(Order, _if0));
			JB_Incr(Wi);
			if (Wi == nil) {
				JB_Decr(Wi);
				break;
			}
			int I = _if0;
			{
				Array* _LoopSrcf4 = JB_Str_Words(Wi);
				JB_Incr(_LoopSrcf4);
				int _if2 = 0;
				while (true) {
					JB_String* S2 = ((JB_String*)JB_Array_Value(_LoopSrcf4, _if2));
					JB_Incr(S2);
					if (S2 == nil) {
						JB_Decr(S2);
						break;
					}
					if (JB_Str_Exists(S2)) {
						JB_SetRef(Fake->Name, S2);
						SCOperator* _tmPf5 = SC_Opp__Lookup(Fake);
						JB_Incr(_tmPf5);
						_tmPf5->Score = I;
						JB_Decr(_tmPf5);
					}
					JB_Decr(S2);
					(++_if2);
				};
				JB_Decr(_LoopSrcf4);
			}
			;
			JB_Decr(Wi);
			(++_if0);
		};
	}
	;
	JB_Decr(Order);
	JB_Decr(Fake);
	SCOperator* _tmPf6 = ((SCOperator*)JB_Dict_Value0(SC__Opp_Dict, JB_LUB[241]));
	JB_Incr(_tmPf6);
	_tmPf6->Score = 100;
	JB_Decr(_tmPf6);
	SCOperator* _tmPf7 = ((SCOperator*)JB_Dict_Value0(SC__Opp_Dict, JB_LUB[735]));
	JB_Incr(_tmPf7);
	SC__Opp_CustomOperatorScore = _tmPf7->Score;
	JB_Decr(_tmPf7);
}

void SC_Opp__Init() {
	JB_SetRef(SC__Opp_Negative->Name, JB_LUB[518]);
	JB_SetRef(SC__Opp_Bnot->Name, JB_LUB[50]);
	SC_Opp__AddComp(JB_LUB[259], ((fn_OpASM)((&SC_Pac_Equals))), kSC__OpMode_ExactEquals);
	SC_Opp__AddComp(JB_LUB[260], ((fn_OpASM)((&SC_Pac_Less))), kSC__OpMode_Comparison + kSC__OpMode_Less);
	SC_Opp__AddComp(JB_LUB[263], ((fn_OpASM)((&SC_Pac_More))), kSC__OpMode_Comparison + kSC__OpMode_More);
	SC_Opp__AddComp(JB_LUB[262], ((fn_OpASM)((&SC_Pac_LessEq))), kSC__OpMode_Comparison);
	SC_Opp__AddComp(JB_LUB[265], ((fn_OpASM)((&SC_Pac_MoreEq))), kSC__OpMode_Comparison);
	SC_Opp__AddComp(JB_LUB[1204], ((fn_OpASM)((&SC_Pac_NotEq))), kSC__OpMode_ExactNotEquals);
	SC_Opp__OppositeComp(JB_LUB[259], JB_LUB[1204]);
	SC_Opp__OppositeComp(JB_LUB[260], JB_LUB[265]);
	SC_Opp__OppositeComp(JB_LUB[263], JB_LUB[262]);
	SC_Opp__AddBasic();
	SC_Opp__AddMath(JB_LUB[51], JB_LUB[51], ((fn_OpASM)((&SC_Pac_Mod))), kSC__OpMode_NeedsCppFuncOnFloats);
	SC_Opp__AddMath(JB_LUB[517], JB_LUB[1874], ((fn_OpASM)((&SC_Pac_Plus))), kSC__OpMode_Addition);
	SC_Opp__AddMath(JB_LUB[518], JB_LUB[1875], ((fn_OpASM)((&SC_Pac_Subtract))), kSC__OpMode_Subtraction);
	SC_Opp__AddMath(JB_LUB[1876], JB_LUB[1877], ((fn_OpASM)((&SC_Pac_Multiply))), kSC__OpMode_Multiply);
	SC_Opp__AddMath(JB_LUB[4], JB_LUB[1878], ((fn_OpASM)((&SC_Pac_Divide))), 0);
	JB_FreeIfDead(SC_Opp__AddBit(JB_LUB[1879], JB_LUB[1880], ((fn_OpASM)((&SC_Pac_SHR))), kSC__OpMode_Shift));
	SC__Opp_LeftShift = SC_Opp__AddBit(JB_LUB[739], JB_LUB[1881], ((fn_OpASM)((&SC_Pac_SHL))), kSC__OpMode_ShiftOnly);
	JB_FreeIfDead(SC_Opp__AddBit(JB_LUB[47], JB_LUB[1882], ((fn_OpASM)((&SC_Pac_BitOr))), 0));
	JB_FreeIfDead(SC_Opp__AddBit(JB_LUB[48], JB_LUB[1883], ((fn_OpASM)((&SC_Pac_BitAnd))), kSC__OpMode_SameOrLessBits));
	JB_FreeIfDead(SC_Opp__AddBit(JB_LUB[49], JB_LUB[1884], ((fn_OpASM)((&SC_Pac_BitXor))), kSC__OpMode_NoExtraBits));
	SC__Opp_Subtract = ((SCOperator*)JB_Dict_Value0(SC__Opp_Dict, JB_LUB[518]));
	SCOperator* BitOr = ((SCOperator*)JB_Dict_Value0(SC__Opp_Dict, JB_LUB[47]));
	(JB_Dict_ValueSet(SC__Opp_Dict, JB_LUB[285], BitOr));
	(JB_Dict_ValueSet(SC__Opp_Dict, JB_LUB[284], BitOr));
	(JB_Dict_ValueSet(SC__Opp_Dict, JB_LUB[1885], ((SCOperator*)JB_Dict_Value0(SC__Opp_Dict, JB_LUB[1886]))));
	JB_FreeIfDead(SC_Opp__AddBit(JB_LUB[1293], JB_LUB[1293], nil, 0));
	JB_FreeIfDead(SC_Opp__AddBit(JB_LUB[1296], JB_LUB[1296], nil, 0));
	SC_Opp__BuildOrder();
}

int SC_Opp__Init_() {
	{
		JB_SetRef(SC__Opp_Dict, JB_Dict_Constructor(nil));
		JB_SetRef(SC__Opp_Negative, SC_Opp_Constructor(nil, JB_LUB[0], ((fn_OpASM)((&SC_Pac_Minus))), kSC__OpMode_Subtraction));
		JB_SetRef(SC__Opp_Bnot, SC_Opp_Constructor(nil, JB_LUB[0], ((fn_OpASM)((&SC_Pac_BitNot))), kSC__OpMode_Bit));
	}
	;
	return 0;
}

SCOperator* SC_Opp__Lookup(Message* Opch) {
	SCOperator* Result = ((SCOperator*)Opch->Obj);
	if (Result) {
		if ((!((bool)SC_Opp_SyntaxIs(Result, kSC__OpMode_Custom)))) {
			JB_SetRef(Opch->Name, Result->Name);
		}
		return Result;
	}
	JB_String* Op = Opch->Name;
	Result = ((SCOperator*)JB_Dict_Value0(SC__Opp_Dict, Op));
	if ((!Result)) {
		Result = SC_Opp__AddCustom(Op);
	}
	 else if ((!JB_Str_Equals(Op, Result->Name, false))) {
		if ((!((bool)SC_Opp_SyntaxIs(Result, kSC__OpMode_Custom)))) {
			JB_SetRef(Opch->Name, Result->Name);
		}
	}
	return Result;
}

void SC_Opp__OppositeComp(JB_String* A, JB_String* B) {
	SCOperator* pA = ((SCOperator*)JB_Dict_Value0(SC__Opp_Dict, A));
	SCOperator* pB = ((SCOperator*)JB_Dict_Value0(SC__Opp_Dict, B));
	if (pA and pB) {
		pA->Opposite = pB;
		pB->Opposite = pA;
	}
}


void SC_PA_AddParam(SCParamArray* Self, Message* Item) {
	SC_PA_AddSub(Self, Item);
	Self->HasProperParams = true;
}

void SC_PA_AddSub(SCParamArray* Self, Message* M) {
	if (Self->Size >= 8) {
		return;
	}
	int I = Self->Size++;
	Self->Items[I] = M;
}

Message* SC_PA_AddTestedParam(SCParamArray* Self, Message* Item, SCNode* Name_space) {
	Message* Nxt = ((Message*)JB_Ring_NextSib(Item));
	Message* Pr = ((Message*)JB_Ring_Parent(Item));
	if (!SC_TypeOfExpr(Item, Name_space, nil)) {
		JB_Msg_Fail(Item, JB_LUB[1301]);
		return nil;
	}
	if (JB_Tree_OperatorIn(Item, Pr)) {
		SC_PA_AddParam(Self, Item);
		return ((Message*)JB_Ring_NextSib(Item));
	}
	if (Nxt) {
		SC_PA_AddParam(Self, ((Message*)JB_Ring_PrevSib(Nxt)));
	}
	 else {
		SC_PA_AddParam(Self, ((Message*)JB_Ring_Last(Pr)));
	}
	return Nxt;
}

SCParamArray* SC_PA_Constructor(SCParamArray* Self, Message* Exp) {
	if (Self == nil) {
		Self = ((SCParamArray*)JB_NewClass(&SCParamArrayData));
	}
	Self->Size = 0;
	Self->Cls = nil;
	Self->AllowSelfToConstructor = false;
	Self->Found = false;
	Self->IsSuper = false;
	Self->IsSelf = false;
	Self->IsNotModule = false;
	Self->HasProperParams = false;
	Self->HasSide = false;
	Self->FailedAt = 0;
	Self->Exp = Exp;
	Self->IsDot = ((JB_Msg_EqualsSyx(Exp, kJB_SyxDot, false)));
	Self->IsAddress = (Exp and SC_Msg_OperatorIsBRel(SC_Msg_NiceParent(Exp), JB_LUB[48]));
	Self->ErrCount = JB_StdErr->ErrorCount;
	return Self;
}

SCNode* SC_PA_DetectDotSuper(SCParamArray* Self, SCNode* Curr, SCNode* Arg_space) {
	Self->IsNotModule = (!SC_Base_IsModuleFunc(Curr));
	if (Self->IsDot) {
		Message* Exp0 = ((Message*)JB_Ring_First(Self->Exp));
		if (Exp0) {
			Self->IsSelf = ((JB_Msg_SyntaxEquals(Exp0, JB_LUB[180], true)));
			if (Self->IsNotModule) {
				SCDecl* Ty = SC_TypeOfExpr(Exp0, Arg_space, nil);
				if (Ty) {
					Self->Cls = Ty->Type;
				}
				SC_PA_AddSub(Self, Exp0);
				if (SC_Msg_OperatorIsThing(Exp0, JB_LUB[913])) {
					Self->IsSuper = true;
					JB_SetRef(Exp0->Name, JB_LUB[180]);
					return Curr->Parent;
				}
			}
		}
	}
	return Curr;
}

int SC_PA_IgnoreSelfContain(SCParamArray* Self) {
	int Rz = 0;
	SCClass* Cls = Self->Cls;
	if (Cls) {
		if (Self->IsDot and Self->IsNotModule) {
			if (SC_Class_IsStruct(Cls)) {
				Rz = (Rz | kJB_kTypeCastIgnoreAddressOf);
			}
			if (SC_Class_SyntaxIs(Cls, kSC__ClassInfo_IgnoreContainedSelf)) {
				Rz = (Rz | kJB_kTypeCastIgnoreContained);
			}
		}
	}
	return Rz;
}

bool SC_PA_IsModule(SCParamArray* Self) {
	return (!Self->IsNotModule);
}

bool SC_PA_IsSelfCon(SCParamArray* Self) {
	return (Self->IsSelf or Self->IsSuper) and (({
		SCFunction* _tmPf1 = SC_Func__CurrFunc();
		JB_Incr(_tmPf1);
		bool _tmPf0 = SC_Func_SyntaxIs(_tmPf1, kSC__FunctionType_Constructor);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}));
}

Array* SC_PA_MacroCopyArgs(SCParamArray* Self) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	int N2 = Self->Size - 1;
	{
		int _nf0 = Self->Size;
		int _if1 = 0;
		while (_if1 < _nf0) {
			int I = _if1;
			Message* S = Self->Items[_if1];
			if ((I == N2) and Self->HasSide) {
				0;
			}
			 else {
				JB_Array_SyntaxAppend(Rz, S);
			}
			(++_if1);
		};
	}
	;
	return Rz;
}

int SC_PA_MacroSize(SCParamArray* Self) {
	return Self->Size - Self->HasSide;
}

bool SC_PA_MadeError(SCParamArray* Self) {
	return JB_StdErr->ErrorCount > Self->ErrCount;
}

JB_String* SC_PA_ModuleName(SCParamArray* Self) {
	JB_String* Rz = JB_LUB[0];
	JB_Incr(Rz);
	Message* P = SC_PA_SyntaxAccess(Self, 0);
	JB_Incr(P);
	if (!Self->IsNotModule) {
		JB_SetRef(P, ((Message*)JB_Ring_First(Self->Exp)));
	}
	if (P) {
		JB_String* _tmPf0 = SC_Msg_RenderType(P);
		JB_Incr(_tmPf0);
		JB_SetRef(Rz, SC_Str_NicerClassName(_tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_Decr(P);
	JB_SafeDecr(Rz);
	return Rz;
}

SCFunction* SC_PA_MultipleMatchingFunctions(SCParamArray* Self, int TypeCast, SCFunction* F, SCFunction* R) {
	if (!SC_PA_MadeError(Self)) {
		if (true) {
			JB_String* _tmPf0 = SC_Str_ArgsMatchError(JB_LUB[930], TypeCast != 0);
			JB_Incr(_tmPf0);
			JB_Msg_Fail(Self->Exp, _tmPf0);
			JB_Decr(_tmPf0);
		}
		if (true) {
			JB_Msg_Fail(F->Source, JB_LUB[931]);
		}
		if (true) {
			JB_Msg_Fail(R->Source, JB_LUB[932]);
		}
	}
	return nil;
}

bool SC_PA_PreReadTypes(SCParamArray* Self, SCNode* Name_Space, Message* P, Message* Side) {
	if (P and (!Self->Exp)) {
		Self->Exp = P;
	}
	Message* Item = ((Message*)JB_Ring_First(P));
	JB_Incr(Item);
	while (Item) {
		JB_SetRef(Item, SC_PA_AddTestedParam(Self, Item, Name_Space));
	};
	JB_Decr(Item);
	(SC_PA_SideSet(Self, Side));
	return true;
}

JB_String* SC_PA_Render(SCParamArray* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	{
		int _LoopSrcf1 = ((int)Self->Size);
		int I = 0;
		int _firstf2 = I;
		while (I < _LoopSrcf1) {
			if (_firstf2 != I) {
				JB_FS_AppendByte(Fs, ' ');
				JB_FS_AppendByte(Fs, ',');
			}
			//start;
			Message* Obj = Self->Items[I];
			JB_Incr(Obj);
			JB_FreeIfDead(JB_Msg_Render(Obj, Fs));
			SCDecl* Ty = SC_TypeOfExpr(Obj, nil, nil);
			JB_Incr(Ty);
			JB_Decr(Obj);
			if (Ty) {
				JB_FreeIfDead(SC_Decl_Render(Ty, Fs));
			}
			JB_Decr(Ty);
			(++I);
		};
	}
	;
	JB_String* _tmPf3 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf3);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

JB_String* SC_PA_RenderKind(SCParamArray* Self) {
	if ((!Self->IsNotModule)) {
		return JB_LUB[166];
	}
	SCClass* C = Self->Cls;
	JB_Incr(C);
	if (C) {
		JB_String* _tmPf0 = SC_Base_AutoCompleteKind(C);
		JB_Incr(_tmPf0);
		JB_Decr(C);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(C);
	return JB_LUB[169];
}

void SC_PA_SideSet(SCParamArray* Self, Message* Value) {
	if (Value) {
		SC_PA_AddSub(Self, Value);
		Self->HasSide = true;
	}
}

void SC_PA_StructExtract(SCParamArray* Self, SCDecl* Type) {
	JB_DoAt(1);
	Message* S = Self->Exp;
	JB_Incr(S);
	if (S) {
		Message* Where = SC_Msg_UseNonRefChangers(S, true);
		JB_Incr(Where);
		Syntax Fn = Where->Func;
		JB_Decr(Where);
		if (Fn != kJB_SyxRel) {
			JB_FreeIfDead(SC_Func__TypedTempMoveOut(S, JB_LUB[0], Type));
		}
	}
	JB_Decr(S);
}

void SC_PA_StructReturner(SCParamArray* Self, SCDecl* Type, SCFunction* Fn) {
	Message* S = Self->Exp;
	JB_Incr(S);
	if (!S) {
		JB_Decr(S);
		return;
	}
	Message* Rel = SC_Msg_UseNonRefChangers(S, true);
	JB_Incr(Rel);
	Syntax F = Rel->Func;
	if ((F == kJB_SyxPrm) or ((F == kJB_SyxRel) and (!SC_Msg_SecondIs(Rel, kJB_SyxOpp, JB_LUB[241])))) {
		Message* Tmped = SC_Func__TypedTempMoveOut(S, JB_LUB[0], Type->Internal);
		JB_Incr(Tmped);
		SCDecl* Dcl2 = ((SCDecl*)Tmped->Obj);
		JB_Incr(Dcl2);
		Message* _tmPf0 = ((Message*)JB_Ring_Parent(Tmped));
		JB_Incr(_tmPf0);
		SCNode* Name_space = ((SCNode*)JB_Object_As(_tmPf0->Obj, &SCNodeData));
		JB_Incr(Name_space);
		JB_Decr(_tmPf0);
		if (Name_space) {
			JB_String* _tmPf1 = SC_Named_Name(Dcl2);
			JB_Incr(_tmPf1);
			SC_Base_TryAdd(Name_space, Rel, Dcl2, _tmPf1);
			JB_Decr(_tmPf1);
		}
		JB_Decr(Dcl2);
		JB_Decr(Name_space);
		JB_SetRef(Rel, ((Message*)JB_Tree_Second(Tmped)));
		JB_Decr(Tmped);
		F = Rel->Func;
	}
	 else if (SC_ASMType_SyntaxIs(SC_Msg_ASMType(Rel), kSC__ASMType_kReturn)) {
		Message* Prm = ((Message*)JB_Ring_Last(S));
		JB_Incr(Prm);
		if (Prm) {
			Prm->Func = kJB_SyxPrm;
			Message* Subrz = JB_Msg_Msg(Prm, kJB_SyxThg, JB_LUB[1302]);
			JB_Incr(Subrz);
			SCFunction* _tmPf2 = SC_Func__CurrFunc();
			JB_Incr(_tmPf2);
			JB_SetRef(Subrz->Obj, SC_Func_StructReturned(_tmPf2));
			JB_Decr(Subrz);
			JB_Decr(_tmPf2);
			Message* _tmPf3 = ((Message*)JB_Ring_First(Rel));
			JB_Incr(_tmPf3);
			(JB_Ring_PrevSibSet(Rel, _tmPf3));
			JB_Decr(_tmPf3);
			F = kJB_SyxNil;
		}
		 else {
		}
		JB_Decr(Prm);
	}
	if (F == kJB_SyxRel) {
		Message* Name = ((Message*)JB_Ring_First(Rel));
		JB_Incr(Name);
		Message* Op = ((Message*)JB_Ring_NextSib(Name));
		JB_Incr(Op);
		if (JB_Msg_OperatorIn(Rel, kJB_SyxDecl)) {
			JB_Msg_BecomeStr(Op, kJB_SyxThg, Name->Name);
			Message* Dcl = ((Message*)JB_Ring_Parent(Rel));
			JB_Incr(Dcl);
			Message* Dcltype = ((Message*)JB_Ring_First(Dcl));
			JB_Incr(Dcltype);
			if (Dcltype) {
				JB_Msg_BecomeStr(Dcltype, kJB_SyxThg, Type->Type->Name);
			}
			JB_Decr(Dcltype);
			(JB_Ring_NextSibSet(Dcl, S));
			Message* _tmPf5 = SC_Decl_CreateStructNil(Type->Internal, Name);
			JB_Incr(_tmPf5);
			Message* _tmPf4 = SC_NewEqRelWithMsgMsg(Name, _tmPf5);
			JB_Incr(_tmPf4);
			JB_Decr(_tmPf5);
			JB_Tree_SyntaxAppend(Dcl, _tmPf4);
			JB_Decr(Dcl);
			JB_Decr(_tmPf4);
		}
		 else {
			JB_Msg_BecomeStr(Op, kJB_SyxBra, JB_LUB[0]);
			JB_SetRef(Op->Obj, nil);
			JB_Tree_SyntaxAppend(Op, Name);
			JB_SetRef(Op, Name);
			(JB_Ring_NextSibSet(Rel, S));
		}
		Message* Prm = ((Message*)JB_Ring_Last(S));
		JB_Incr(Prm);
		if (Fn->StructReturnPos == 1) {
			(JB_Ring_FirstSet(Prm, Rel));
		}
		 else {
			(JB_Ring_LastSet(Prm, Rel));
		}
		Prm->Func = kJB_SyxPrm;
		JB_Decr(Prm);
		JB_Msg_BecomeStr(Rel, kJB_SyxBRel, JB_LUB[48]);
		JB_SetRef(Rel->Obj, Type);
		if (Op != Name) {
			JB_SetRef(Op->Obj, Name->Obj);
			if (!Op->Obj) {
				JB_SetRef(Op->Obj, Name);
				JB_Array_SyntaxAppend(SC__PA_FixMe, Op);
			}
		}
		JB_Decr(Name);
		JB_Decr(Op);
	}
	 else if (F) {
		if (true) {
			JB_Msg_Fail(S, JB_LUB[1303]);
		}
	}
	JB_Decr(S);
	JB_Decr(Rel);
}

Message* SC_PA_SyntaxAccess(SCParamArray* Self, int I) {
	if (I < Self->Size) {
		return Self->Items[I];
	}
	return nil;
}

int SC_PA__Init_() {
	{
		JB_SetRef(SC__PA_FixMe, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

void SC_PA__PostStructFix() {
	{
		Array* _LoopSrcf2 = SC__PA_FixMe;
		int _if0 = 0;
		while (true) {
			Message* S = ((Message*)JB_Array_Value(_LoopSrcf2, _if0));
			if (S == nil) {
				break;
			}
			Message* Orig = ((Message*)JB_Object_As(S->Obj, &MessageData));
			if (Orig) {
				JB_SetRef(S->Obj, Orig->Obj);
			}
			(++_if0);
		};
	}
	;
	JB_Array_Clear(SC__PA_FixMe);
}


bool JB_Sav_IsSaveMarked(Saveable* Self) {
	int* P = ((int*)Self);
	return ((bool)(P[0] & kJB__Saver_RefMark));
}

void JB_Sav_LoadProperties(Saveable* Self, ObjectLoader* Loader) {
	Loader->CouldntLoad = Self;
}

void JB_Sav_SaveCollect(Saveable* Self, ObjectSaver* Saver) {
}

bool JB_Sav_SaveMark(Saveable* Self) {
	int* P = ((int*)Self);
	int Rc = P[0];
	if ((Rc & kJB__Saver_RefMark)) {
		return nil;
	}
	P[0] = (Rc | kJB__Saver_RefMark);
	return true;
}

SaverClassInfo* JB_Sav_SaverInfo(Saveable* Self) {
	return ((SaverClassInfo*)JB_ObjClass(Self)->SaveInfo);
}

void JB_Sav_SaveToFile(Saveable* Self, JB_File* F) {
	FastString* It = JB_Str_Out(F, true);
	JB_Incr(It);
	if (It) {
		JB_FreeIfDead(JB_Sav_SaveTo(Self, It));
	}
	JB_Decr(It);
}

JB_String* JB_Sav_SaveTo(Saveable* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_Saver__Init();
	ObjectSaver Saver = ((ObjectSaver){});
	JB_Saver_Constructor((&Saver));
	JB_SetRef(Saver.Dest, Fs);
	Saver.Root = Self;
	JB_FS_AppendString(Fs, kJB_kSaverStart1);
	JB_Object_SaveTryCollect(Self, (&Saver));
	SaverClassInfo* Sci = JB__Saver_SaveableList;
	while (Sci != nil) {
		JB_sci_Output(Sci, (&Saver));
		Sci = Sci->NextInfo;
	};
	Sci = JB__Saver_SaveableList;
	while (Sci != nil) {
		JB_sci_Clear(Sci);
		Sci = Sci->NextInfo;
	};
	JB_Saver_Finish((&Saver), Self);
	JB_String* Result = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(Result);
	JB_Decr(Fs);
	JB_SetRef(Saver.Dest, nil);
	Saver.CantSaveThis = nil;
	JB_SafeDecr(Result);
	JB_Saver_Destructor((&Saver));
	return Result;
}

void JB_Sav_SaveUnMark(Saveable* Self) {
	int* P = ((int*)Self);
	P[0] = (P[0] & (~kJB__Saver_RefMark));
}

void JB_Sav_SaveWrite(Saveable* Self, ObjectSaver* Saver) {
	Saver->CantSaveThis = Self;
	JB_FS_AppendString(Saver->Dest, JB_LUB[22]);
}


Selector* JB_Sel_Constructor(Selector* Self, Selector* Next, Selector** Place, JB_String* Name) {
	if (Self == nil) {
		Self = ((Selector*)JB_NewClass(&SelectorData));
	}
	Self->ID = 0;
	JB_Incr2(Self->Name, Name);
	JB_Incr2(Self->Next, Next);
	JB_SetRef(Place[0], Self);
	return Self;
}

void JB_Sel_Destructor(Selector* Self) {
	JB_Clear(Self->Name);
	JB_Clear(Self->Next);
}

void JB_Sel_GiveIDs(Selector* Self) {
	int ID = 0;
	{
		Selector* Curr = Self;
		while (Curr) {
			Curr->ID = ID;
			(++ID);
			Curr = ((Selector*)(Curr->Next));
		};
	};
}


JB_String* JB_Str_AfterByte(JB_String* Self, uint /*byte*/ B, int Last) {
	Ind Start = JB_Str_FindByte(Self, B, Last, 0);
	return JB_Str_Range(Self, Start + 1, Last);
}

JB_String* JB_Str_ArgName(JB_String* Self) {
	if (JB_Str_First(Self) == '-') {
		Ind I = JB_Str_FindByte(Self, '=', 0, JB_int__Max());
		if (!JB_Ind_SyntaxCast(I)) {
			I = JB_int__Max();
		}
		JB_String* S = JB_Str_Range(Self, 0, I);
		JB_Incr(S);
		JB_SetRef(S, JB_Str_TrimFirst(S, '-'));
		JB_String* _tmPf0 = JB_Str_LowerCase(S);
		JB_Incr(_tmPf0);
		JB_Decr(S);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	return JB_LUB[0];
}

JB_String* SC_Str_ArgsMatchError(JB_String* Self, bool TypeCast) {
	if (!TypeCast) {
		return Self;
	}
	return JB_Str_OperatorPlus(Self, JB_LUB[100]);
}

JB_String* JB_Str_ArgValue(JB_String* Self) {
	if (JB_Str_ByteValue(Self, 0) != '-') {
		return Self;
	}
	Ind It = JB_Str_FindByte(Self, '=', 0, JB_int__Max());
	if (JB_Ind_SyntaxCast(It)) {
		return JB_Str_Range(Self, It + (1), JB_int__Max());
	}
	return JB_LUB[31];
}

JB_String* JB_Str_BackToApp(JB_String* Self) {
	JB_String* Rz = JB_LUB[0];
	JB_Incr(Rz);
	JB_String* S = JB_Str_TrimSlashes(Self, false);
	JB_Incr(S);
	JB_String* _tmPf0 = JB_Str_Name(Self);
	JB_Incr(_tmPf0);
	JB_String* Final = JB_Str_OperatorPlus(JB_LUB[593], _tmPf0);
	JB_Incr(Final);
	JB_Decr(_tmPf0);
	if (JB_Str_OperatorEndsWith(S, Final)) {
		JB_SetRef(Rz, JB_Str_Range(S, 0, 4 + (JB_Str_OperatorMinus(S, Final))));
	}
	 else {
		JB_SetRef(Rz, Self);
	}
	JB_Decr(S);
	JB_Decr(Final);
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* JB_Str_Before(JB_String* Self, JB_String* S) {
	Ind F = JB_Str_InStr(Self, S, 0, JB_int__Max(), false);
	if (JB_Ind_SyntaxCast(F)) {
		return JB_Str_Range(Self, 0, F);
	}
	return Self;
}

JB_String* JB_Str_BeforeLastByte(JB_String* Self, uint /*byte*/ B, int Fudge) {
	int Last = JB_Str_TrimLastSub(Self, B);
	Ind Start = JB_Str_FindByte(Self, B, Last, 0);
	return JB_Str_Range(Self, 0, Start + Fudge);
}

Array* JB_Str_ByteSplit(JB_String* Self) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	JB_Incr(Rz);
	{
		int _LoopSrcf1 = JB_Str_Length(Self);
		int N = 0;
		while (N < _LoopSrcf1) {
			JB_String* _tmPf2 = JB_Str__Byte(JB_Str_ByteValue(Self, N));
			JB_Incr(_tmPf2);
			JB_Array_SyntaxAppend(Rz, _tmPf2);
			JB_Decr(_tmPf2);
			(++N);
		};
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}

CharSet* JB_Str_CharSetWithBool(JB_String* Self, bool Range) {
	return JB_CS_Constructor(nil, Self, Range);
}

JB_String* JB_Str_Child(JB_String* Self, JB_String* Cname) {
	if (!JB_Str_Exists(Self)) {
		return Cname;
	}
	int C = ((int)(JB_Str_Last(Self, 0) == '/'));
	C = (C + (JB_Str_First(Cname) == '/'));
	if (C == 1) {
		return JB_Str_OperatorPlus(Self, Cname);
	}
	if (C == 0) {
		JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[4], Cname);
		JB_Incr(_tmPf0);
		JB_String* _tmPf3 = JB_Str_OperatorPlus(Self, _tmPf0);
		JB_Incr(_tmPf3);
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	JB_String* _tmPf1 = JB_Str_Range(Cname, 1, JB_int__Max());
	JB_Incr(_tmPf1);
	JB_String* _tmPf2 = JB_Str_OperatorPlus(Self, _tmPf1);
	JB_Incr(_tmPf2);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

Array* JB_Str_Components(JB_String* Self) {
	JB_String* _tmPf0 = JB_Str_TrimSlashes(Self, false);
	JB_Incr(_tmPf0);
	Array* _tmPf1 = JB_Str_Split(_tmPf0, '/');
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Str_Compress(JB_String* Self, int Strength, CompressionStats* St) {
	FastString* J = JB_bin_Constructor0(nil, 0);
	JB_Incr(J);
	JB_Str_CompressInto(Self, J, Strength, St);
	JB_String* _tmPf0 = JB_FS_SyntaxCast(J);
	JB_Incr(_tmPf0);
	JB_Decr(J);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_Str_CompressInto(JB_String* Self, JB_Object* Fs, int Strength, CompressionStats* St) {
	StringReader* _tmPf0 = JB_Str_Stream(Self);
	JB_Incr(_tmPf0);
	JB_SS_CompressInto(_tmPf0, Fs, Strength, St);
	JB_Decr(_tmPf0);
}

bool JB_Str_CompressTest(JB_String* Self, bool Report, int Which) {
	if (Which & 1) {
		if (!JB_Str_CompressTestSub(Self, kJB__MZLab_Strong, Report)) {
			return nil;
		}
	}
	if (Which & 2) {
		if (!JB_Str_CompressTestSub(Self, kJB__MZLab_Fast, Report)) {
			return nil;
		}
	}
	return true;
}

bool JB_Str_CompressTestSub(JB_String* Self, int Strength, bool Report) {
	bool Rz = false;
	CompressionStats Stats = ((CompressionStats){});
	JB_String* C = JB_Str_Compress(Self, Strength, (&Stats));
	JB_Incr(C);
	if (Report) {
		JB_MzSt_Print((&Stats), true);
	}
	Stats = ((CompressionStats){});
	JB_String* Decomp = JB_Str_Decompress(C, JB_int__Max(), (&Stats));
	JB_Incr(Decomp);
	Rz = (JB_Str_Equals(Self, Decomp, false));
	if (!Rz) {
		if (true) {
			JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[1582], Self);
			JB_Incr(_tmPf0);
			JB_Str_Fail(_tmPf0);
			JB_Decr(_tmPf0);
		}
		JB_SetRef(Decomp, JB_Str_Decompress(C, JB_int__Max(), nil));
	}
	 else if (Report) {
		JB_MzSt_Print((&Stats), false);
	}
	JB_Decr(C);
	JB_Decr(Decomp);
	return Rz;
}

JB_String* SC_Str_ContainerName(JB_String* Self, JB_String* Ext) {
	JB_String* _tmPf0 = JB_Str_PathDir(Ext);
	JB_Incr(_tmPf0);
	Ind After = JB_Str_InStr(Self, _tmPf0, 0, JB_int__Max(), false);
	JB_Decr(_tmPf0);
	if (JB_Ind_SyntaxCast(After)) {
		JB_String* _tmPf1 = JB_Str_Range(Self, 0, After);
		JB_Incr(_tmPf1);
		JB_String* _tmPf2 = JB_Str_Name(_tmPf1);
		JB_Incr(_tmPf2);
		JB_Decr(_tmPf1);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	return JB_LUB[0];
}

int JB_Str_Count(JB_String* Self, uint /*byte*/ B) {
	int Rz = 0;
	{
		byte* _Startf0 = JB_Str_Address(Self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			uint C = _Startf0[0];
			Rz = (Rz + (C == B));
			(++_Startf0);
		};
	}
	;
	return Rz;
}

ExitCode SC_Str_DebugExecute(JB_String* Self, Array* Args, FastString* Out, FastString* Errs) {
	if (JB__File_DebugExecute) {
		JB_Print(Self);
		JB_Print(JB_LUB[27]);
		JB_String* _tmPf0 = JB_Array_Render(Args, nil);
		JB_Incr(_tmPf0);
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return JB_Str_Execute(Self, Args, Out, Errs, kJB__PIDM_StdOutPassThru, 0);
}

JB_String* JB_Str_Decompress(JB_String* Self, int Lim, CompressionStats* St) {
	StringReader* _tmPf0 = JB_Str_Stream(Self);
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_SS_Decompress(_tmPf0, Lim, St, true);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Dictionary* JB_Str_Dict(JB_String* Self, uint /*byte*/ Sep) {
	Dictionary* Rz = ((Dictionary*)nil);
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Dict_Constructor(nil));
	if (JB_Str_Exists(Self)) {
		{
			StringFields* _LoopSrcf2 = JB_FI_Constructor(nil, Self, Sep);
			JB_Incr(_LoopSrcf2);
			int _Prevf0 = 0;
			while (true) {
				Ind _Curr_f1 = JB_FI_NextSep(_LoopSrcf2, _Prevf0);
				JB_String* L = JB_FI_Field(_LoopSrcf2, _Prevf0, _Curr_f1);
				JB_Incr(L);
				(JB_Dict_ValueSet(Rz, L, JB_LUB[370]));
				JB_Decr(L);
				_Prevf0 = (_Curr_f1 + 1);
				if (!JB_Ind_SyntaxCast(_Curr_f1)) {
					break;
				}
			};
			JB_Decr(_LoopSrcf2);
		};
	}
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* JB_Str_Digest(JB_String* Self) {
	if (JB_Ind_SyntaxCast(JB_Str_IsJbin(Self))) {
		return Self;
	}
	Message* _tmPf0 = JB_Str_Parse(Self, kJB_SyxArg, true);
	JB_Incr(_tmPf0);
	if (!_tmPf0) {
		JB_Decr(_tmPf0);
		return JB_LUB[0];
	}
	JB_String* _tmPf1 = JB_Msg_RenderJbin(_tmPf0, JB_LUB[0], nil);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool JB_Str_EndsWith(JB_String* Self, JB_String* S, bool Aware) {
	int N = JB_Str_Length(S);
	int L = JB_Str_Length(Self);
	{
		IntRange _LoopSrcf2 = JB_int_OperatorTo(1, N);
		int __Endf0 = _LoopSrcf2[1];
		int I = _LoopSrcf2[0];
		while (I < __Endf0) {
			uint A = JB_Str_ByteValue(Self, L - I);
			uint B = JB_Str_ByteValue(S, N - I);
			if (Aware) {
				A = JB_byte_LowerCase(A);
				B = JB_byte_LowerCase(B);
			}
			if (A != B) {
				return nil;
			}
			(++I);
		};
	}
	;
	return true;
}

JB_String* JB_Str_Escape(JB_String* Self) {
	return JB_Str_MultiReplaceAll(Self, JB__Constants_EscapeStr, JB_StdErr);
}

JB_String* JB_Str_EscapeChr(JB_String* Self) {
	return JB_Str_MultiReplaceAll(Self, JB__Constants_EscapeChr, JB_StdErr);
}

bool JB_Str_EscapeTest(JB_String* Self) {
	JB_String* Esc = JB_Str_Escape(Self);
	JB_Incr(Esc);
	JB_String* Back = JB_Str_Unescape(Esc);
	JB_Incr(Back);
	JB_Decr(Esc);
	bool _tmPf0 = ((JB_Str_Equals(Back, Self, false)));
	JB_Decr(Back);
	return _tmPf0;
}

JB_String* JB_Str_Ext(JB_String* Self) {
	Ind I = JB_Str_FindByte(Self, '.', JB_int__Max(), 0);
	if (!JB_Ind_SyntaxCast(I)) {
		return JB_LUB[0];
	}
	Ind N = JB_Str_OutByteWithByteIntInt(Self, '/', JB_int__Max(), 0);
	if (!JB_Ind_SyntaxCast(N)) {
		N = JB_Str_Length(Self);
	}
	return JB_Str_Range(Self, I + 1, N + 1);
}

JB_File* JB_Str_AsFile(JB_String* Self) {
	if (JB_Object_Isa(Self, &JB_FileData)) {
		return ((JB_File*)Self);
	}
	return JB_Str_File(Self);
}

JB_File* JB_Str_ChildFile(JB_String* Self, JB_String* Ch) {
	JB_String* _tmPf0 = JB_Str_Child(Self, Ch);
	JB_Incr(_tmPf0);
	JB_File* _tmPf1 = JB_Str_AsFile(_tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool JB_Str_FileExists(JB_String* Self) {
	JB_File* F = JB_Str_AsFile(Self);
	JB_Incr(F);
	bool _tmPf0 = JB_File_Exists(F);
	JB_Decr(F);
	return _tmPf0;
}

JB_File* JB_Str_FileThatExists(JB_String* Self, JB_String* Operation) {
	JB_File* F = JB_Str_AsFile(Self);
	JB_Incr(F);
	if (JB_File_MustExist(F, Operation)) {
		JB_SafeDecr(F);
		return F;
	}
	JB_Decr(F);
	return nil;
}

Ind JB_Str_FindByte(JB_String* Self, uint /*byte*/ Find, int Start, int After) {
	return JB_Str_InByte(Self, Start, After, Find);
}

Ind JB_Str_Find(JB_String* Self, CharSet* Cs, int Start, int After) {
	return JB_Str_CharSet(Self, Start, After, Cs, true);
}

Ind JB_Str_FindSlash(JB_String* Self, int From) {
	Ind Rz = -1;
	if (From < JB_Str_Length(Self)) {
		Rz = JB_Str_FindByte(Self, '/', From, JB_int__Max());
		if (!JB_Ind_SyntaxCast(Rz)) {
			Rz = JB_Str_Length(Self);
		}
	}
	return Rz;
}

int JB_Str_FindTrailingSlashes(JB_String* Self) {
	int Rz = 0;
	Rz = JB_Str_Length(Self);
	while (JB_Str_ByteValue(Self, Rz - 1) == '/') {
		(--Rz);
	};
	return Rz;
}

Float64 JB_Str_Float(JB_String* Self) {
	return JB_Str_TextDouble(Self, nil);
}

int64 JB_Str_Int(JB_String* Self) {
	return JB_Str_TextIntegerValid(Self, nil);
}

JB_String* SC_Str_InterfaceToBehaviour(JB_String* Self) {
	JB_String* _tmPf0 = JB_Str_Range(Self, 2, JB_Str_Length(Self) - 2);
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_Str_LowerCase(_tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Str_internal(JB_String* Self) {
	return JB_Str_OperatorPlus(JB_LUB[104], Self);
}

Ind JB_Str_InWhite(JB_String* Self, int Start, int After) {
	return JB_Str_WhiteSpace(Self, Start, After, true);
}

bool SC_Str_isCLike(JB_String* Self) {
	if ((JB_Str_Equals(Self, JB_LUB[105], true)) or (JB_Str_Equals(Self, JB_LUB[106], true))) {
		return true;
	}
	if (JB_Platform__OSX()) {
		return ((JB_Str_Equals(Self, JB_LUB[107], true)) or (JB_Str_Equals(Self, JB_LUB[108], true)));
	}
	return false;
}

bool JB_Str_IsCompressed(JB_String* Self) {
	return JB_Ind_SyntaxCast(JB_Str_IsJbin(Self)) and JB_Str_MidEquals(Self, JB_Str_Length(JB__JbinHeader), JB_LUB[371], false);
}

int JB_Str_IsHexLike(JB_String* Self, int N) {
	if (JB_Str_ByteValue(Self, N + 0x0) == '0') {
		uint X = JB_Str_ByteValue(Self, N + 1);
		if (JB_byte_IsLetter(X)) {
			return 2;
		}
	}
	return 0;
}

bool JB_Str_IsInt(JB_String* Self) {
	return JB_Str_IsIntFrom(Self, 0);
}

bool JB_Str_IsIntFrom(JB_String* Self, int I) {
	if (!JB_Str_Exists(Self)) {
		return nil;
	}
	while (I < JB_Str_Length(Self)) {
		if (!JB_byte_IsInt(JB_Str_ByteValue(Self, I++))) {
			return nil;
		}
	};
	return true;
}

Ind JB_Str_IsJbin(JB_String* Self) {
	if ((JB_Str_First(Self) == '#') and (JB_Str_ByteValue(Self, 1) == '!')) {
		Ind Nl = JB_Str_FindByte(Self, '\n', 0, JB_int__Max());
		if (JB_Ind_SyntaxCast(Nl)) {
			(++Nl);
			if (JB_Str_MidEquals(Self, Nl, JB__JbinHeader, false)) {
				return Nl;
			}
		}
	}
	 else if (JB_Str_MidEquals(Self, 0, JB__JbinHeader, false)) {
		return 0;
	}
	return -1;
}

bool JB_Str_IsLower(JB_String* Self) {
	{
		byte* _Startf0 = JB_Str_Address(Self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			uint S = _Startf0[0];
			if (JB_byte_IsUpper(S)) {
				return nil;
			}
			(++_Startf0);
		};
	}
	;
	return true;
}

bool SC_Str_Isnull(JB_String* Self) {
	{
		byte* _Startf0 = JB_Str_Address(Self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			uint C = _Startf0[0];
			if (C != '\x00') {
				return nil;
			}
			(++_Startf0);
		};
	}
	;
	return true;
}

bool JB_Str_IsOK(JB_String* Self) {
	return (Self != nil) and (((JB_Object*)Self) != ((JB_Object*)JB_Str__Error()));
}

bool SC_Str_IsOKForImport(JB_String* Self) {
	JB_String* X = Self;
	JB_Incr(X);
	if (JB_Str_OperatorStarts(Self, JB_LUB[951])) {
		JB_String* _tmPf0 = JB_Str_Range(Self, (6), JB_int__Max());
		JB_Incr(_tmPf0);
		bool _tmPf1 = SC_Str_IsOKForImport(_tmPf0);
		JB_Decr(_tmPf0);
		JB_Decr(X);
		return _tmPf1;
	}
	while (JB_Str_First(X) == '/') {
		JB_SetRef(X, JB_Str_Range(X, (1), JB_int__Max()));
	};
	if ((!JB_Str_Exists(X)) or JB_CS_HasChar(JB__Constants_CSWordStart, JB_Str_First(X))) {
		JB_Decr(X);
		return true;
	}
	if (true) {
		JB_Object_FailStr(X, JB_LUB[952]);
	}
	JB_Decr(X);
	return false;
}

bool SC_Str_IsSpeedieSrc(JB_String* Self) {
	return (JB_Str_OperatorIsa(Self, JB_LUB[140]));
}

bool JB_Str_IsStatementName(JB_String* Self) {
	return (JB_CS_OperatorContains(JB__Constants_CSWordMiddle, Self)) and ((!JB_byte_IsInt(JB_Str_First(Self))));
}

int SC_Str_IsSwizzle(JB_String* Self, int Width) {
	int N = JB_Str_Length(Self);
	int Total = 0;
	int I = 0;
	int Shift = 0;
	int C = 0;
	int Dold = 0;
	if (N > 8) {
		return 0;
	}
	bool HasLetter = false;
	while (I < N) {
		uint D = JB_byte_LowerCase(JB_Str_ByteValue(Self, I++));
		if (D != '_') {
			HasLetter = true;
			if (!(((!C)) or (((D >= 'w') == (Dold >= 'w')) or (Dold == '_')))) {
				return 0;
			}
		}
		C = D;
		Dold = D;
		if ((C == 'r') or (C == 'x')) {
			C = 0;
		}
		 else if ((C == 'g') or (C == 'y')) {
			C = 1;
		}
		 else if ((C == 'b') or (C == 'z')) {
			C = 2;
		}
		 else if ((C == 'a') or (C == 'w')) {
			C = 3;
		}
		 else if (C == '_') {
			C = 4;
		}
		if (I < N) {
			int C2 = JB_byte_LowerCase(JB_Str_ByteValue(Self, I));
			if (C2 == '1') {
				(++I);
			}
			 else if (C2 == '2') {
				(++I);
				if (Width == 3) {
					return 0;
				}
				C = (C + (Width >> 1));
			}
		}
		if (!((C <= 4) and (C >= 0))) {
			return 0;
		}
		Total = (Total | (C << (Shift++ * 3)));
	};
	if (HasLetter) {
		return Total | (Shift << 16);
	}
	return 0;
}

bool SC_Str_IsZero(JB_String* Self) {
	{
		byte* _Startf0 = JB_Str_Address(Self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			uint C = _Startf0[0];
			if (!((C == '.') or (C == '0'))) {
				return nil;
			}
			(++_Startf0);
		};
	}
	;
	return true;
}

Ind JB_Str_JBFind(JB_String* Self, uint /*byte*/ Find, int Off, int After) {
	After = JB_int_OperatorMin(After, JB_Str_Length(Self));
	while (Off < After) {
		uint C = JB_Str_ByteValue(Self, Off++);
		if (C == '\\') {
			(++Off);
		}
		 else if (C == Find) {
			if (Find == '$') {
				if (Off >= After) {
					break;
				}
				uint Nxt = JB_Str_ByteValue(Self, Off);
				if (!(((Nxt == '{') or (Nxt == '.')) or JB_CS_HasChar(JB__Constants_CSWordStart, Nxt))) {
					continue;
				}
			}
			return Off - 1;
		}
	};
	return -1;
}

byte JB_Str_Last(JB_String* Self, int Minus) {
	return JB_Str_ByteValue(Self, JB_Str_Length(Self) - (1 + Minus));
}

int JB_Str_LineCount(JB_String* Self) {
	if (!JB_Str_Exists(Self)) {
		return 1;
	}
	return JB_Str_Count(Self, '\n') + 1;
}

JB_File* SC_Str_MakeAndGoInto(JB_String* Self) {
	JB_File* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Str_AsFile(Self));
	JB_Str_MakeEntirePath(Rz, true);
	(JB_App__CWDSet(Self));
	JB_SafeDecr(Rz);
	return Rz;
}

ErrorInt JB_Str_MakeEntirePath(JB_String* Self, bool Last) {
	ErrorInt Rz = 0;
	//visible;
	JB_String* P = ((JB_String*)JB_Ternary(Last, Self, JB_Str_Parent(Self)));
	JB_Incr(P);
	{
		JB_String* _Pf0 = JB_Str_TrimSlashes(P, true);
		JB_Incr(_Pf0);
		Ind _if1 = JB_Str_FindSlash(_Pf0, 1);
		while (_if1 > 0) {
			JB_String* S = JB_Str_Range(_Pf0, 0, _if1);
			JB_Incr(S);
			int Err = ((int)JB_Str_MakeDir(S));
			JB_Decr(S);
			if (Err) {
				Rz = Err;
				break;
			}
			_if1 = JB_Str_FindSlash(_Pf0, _if1 + 1);
		};
		JB_Decr(_Pf0);
	}
	;
	JB_Decr(P);
	return Rz;
}

JB_String* JB_Str_Moat(JB_String* Self) {
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	(JB_FS_SizeSet(Fs, JB_Str_Length(Self) + 4));
	JB_FS_AppendString(Fs, JB_LUB[143]);
	JB_FS_AppendString(Fs, Self);
	JB_FS_AppendString(Fs, JB_LUB[143]);
	JB_String* _tmPf0 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* JB_Str_Msg(JB_String* Self) {
	return JB_Syx_OperatorPlus(kJB_SyxStr, Self);
}

JB_String* JB_Str_Name(JB_String* Self) {
	int Last = JB_Str_TrimLastSub(Self, '/');
	return JB_Str_AfterByte(Self, '/', Last);
}

JB_String* SC_Str_NicerClassName(JB_String* Self) {
	if (JB_Str_Equals(Self, JB_LUB[101], true)) {
		return JB_LUB[102];
	}
	return Self;
}

bool JB_Str_ContainsString(JB_String* Self, JB_String* S) {
	return JB_Ind_SyntaxCast(JB_Str_InStr(Self, S, 0, JB_int__Max(), true));
}

bool JB_Str_ContainsAny(JB_String* Self, CharSet* S) {
	return JB_Ind_SyntaxCast(JB_Str_Find(Self, S, 0, JB_int__Max()));
}

bool JB_Str_ContainsByte(JB_String* Self, uint /*byte*/ B) {
	return JB_Ind_SyntaxCast(JB_Str_FindByte(Self, B, 0, JB_int__Max()));
}

Array* JB_Str_OperatorDivide(JB_String* Self, uint /*byte*/ Sep) {
	return JB_Str_Split(Self, Sep);
}

bool JB_Str_OperatorEndsWith(JB_String* Self, JB_String* S) {
	return JB_Str_EndsWith(Self, S, true);
}

Ind JB_Str_OpInList(JB_String* Self, Array* List) {
	{
		int _if0 = 0;
		while (true) {
			JB_String* Item = ((JB_String*)JB_Array_Value(List, _if0));
			if (Item == nil) {
				break;
			}
			int I = _if0;
			if (JB_Str_Equals(Item, Self, false)) {
				return I;
			}
			(++_if0);
		};
	}
	;
	return -1;
}

bool JB_Str_OperatorIsa(JB_String* Self, JB_String* S) {
	if (JB_Str_Exists(Self)) {
		JB_String* _tmPf0 = JB_Str_Ext(Self);
		JB_Incr(_tmPf0);
		bool _tmPf1 = (JB_Str_Equals(_tmPf0, S, true));
		JB_Decr(_tmPf0);
		return _tmPf1;
	}
	return false;
}

int JB_Str_OperatorMinus(JB_String* Self, JB_String* S) {
	return JB_Str_Length(Self) - JB_Str_Length(S);
}

JB_String* JB_Str_MulBool(JB_String* Self, bool B) {
	return ((JB_String*)JB_Ternary(B, ((JB_String*)Self), ((JB_String*)JB_LUB[0])));
}

JB_String* JB_Str_OperatorMul(JB_String* Self, int N) {
	if (N <= 1) {
		return JB_Str_MulBool(Self, N == 1);
	}
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	(JB_FS_SizeSet(Fs, N * JB_Str_Length(Self)));
	JB_FS_AppendMultiStr(Fs, Self, N);
	JB_String* _tmPf0 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Str_OperatorPlusWithCstring(JB_String* Self, _cstring C) {
	if (JB_Str_Exists(Self)) {
		FakeJBString Tmp = ((FakeJBString){});
		JB_cstring_temp(C, (&Tmp));
		return JB_Str_OperatorPlus(Self, ((JB_String*)((&Tmp))));
	}
	return JB_cstring_Str(C);
}

bool JB_Str_OperatorStarts(JB_String* Self, JB_String* S) {
	return JB_Str_MidEquals(Self, 0, S, true);
}

bool SC_Str_OptionBool(JB_String* Self) {
	return ((JB_Str_Equals(Self, JB_LUB[0], true)) or ((JB_Str_Equals(Self, JB_LUB[31], true)) or (JB_Str_Equals(Self, JB_LUB[103], true))));
}

int SC_Str_OptionInt(JB_String* Self) {
	if (SC_Str_OptionBool(Self)) {
		return 1;
	}
	return JB_Str_Int(Self);
}

FastString* JB_Str_Out(JB_String* Self, bool Clear) {
	FastString* Rz = nil;
	JB_Incr(Rz);
	JB_File* F = JB_Str_AsFile(Self);
	JB_Incr(F);
	if (Clear and (!JB_File_IsPipe(F))) {
		JB_File_Close(F);
		if (!JB_File_OpenBlank(F)) {
			JB_Decr(F);
			JB_Decr(Rz);
			return nil;
		}
	}
	JB_SetRef(Rz, JB_FS_Constructor(nil));
	(JB_FS_FileSet(Rz, F));
	JB_Decr(F);
	JB_SafeDecr(Rz);
	return Rz;
}

Ind JB_Str_OutByteWithByteIntInt(JB_String* Self, uint /*byte*/ Find, int Start, int After) {
	return JB_Str_OutByte(Self, Start, After, Find);
}

Ind JB_Str_OutCharSet(JB_String* Self, CharSet* Cs, int Start, int After) {
	return JB_Str_CharSet(Self, Start, After, Cs, false);
}

Ind JB_Str_OutWhite(JB_String* Self, int Start, int After) {
	return JB_Str_WhiteSpace(Self, Start, After, false);
}

JB_String* JB_Str_Parent(JB_String* Self) {
	if (!JB_Str_Equals(Self, JB_LUB[4], false)) {
		JB_String* _tmPf0 = JB_Str_TrimSlashes(Self, false);
		JB_Incr(_tmPf0);
		JB_String* _tmPf1 = JB_Str_BeforeLastByte(_tmPf0, '/', 1);
		JB_Incr(_tmPf1);
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return JB_LUB[0];
}

Message* JB_Str_Parse(JB_String* Self, Syntax Owner, bool AllowDecomp) {
	Message* Rz = ((Message*)nil);
	JB_Incr(Rz);
	JB_String* Data = JB_Str_Range(Self, JB_int_OperatorMax(JB_Str_IsJbin(Self), 0), JB_int__Max());
	JB_Incr(Data);
	if (AllowDecomp and JB_Str_IsCompressed(Data)) {
		JB_SetRef(Data, JB_Str_Decompress(Data, JB_int__Max(), nil));
	}
	Ind J2 = JB_Str_IsJbin(Data);
	if (JB_Ind_SyntaxCast(J2)) {
		JB_SetRef(Data, JB_Str_Range(Data, J2, JB_int__Max()));
		JB_SetRef(Rz, JB_Str_ParseJbin(Data, 1073741824));
	}
	 else {
		JB_SetRef(Rz, JB_Str_ParseSub(Data, Owner));
	}
	JB_Decr(Data);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Str_ParseClean(JB_String* Self) {
	Message* Rz = nil;
	JB_Incr(Rz);
	SC__Comp_stTotalSourceSize = (SC__Comp_stTotalSourceSize + JB_Str_Length(Self));
	Date P1 = JB_Date__Now();
	JB_Flow__DisabledIncr(1);
	JB_SetRef(Rz, JB_Str_Parse(Self, kJB_SyxArg, true));
	JB_Flow__DisabledIncr(-1);
	if (Rz) {
		SC__Comp_stParseTime = (SC__Comp_stParseTime + ((int)(JB_Date_OperatorMinus(JB_Date__Now(), P1))));
		SC_Msg_Clean(Rz, true);
		SC_Msg_PrepareAST(Rz);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Str_ParseCleanWipe(JB_String* Self) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, SC_Str_ParseClean(Self));
	if (Rz) {
		JB_Msg_WipePositions(Rz);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Str_ParseJbin(JB_String* Self, int64 Max) {
	StringReader* _tmPf0 = JB_Str_Stream(Self);
	JB_Incr(_tmPf0);
	Message* _tmPf1 = JB_SS_ParseJbin(_tmPf0, Max);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Str_ParseSub(JB_String* Self, Syntax Owner) {
	if (!JB_Tk__CppInited()) {
		JB_Tk__Init();
	}
	JB_Tk__StartParse(Self);
	JB__Tk__StopBars = 0;
	ErrorMarker OK = JB_Rec_Mark(JB_StdErr);
	int Flags = kJB__Tk_kTemporal;
	Message* Into = JB_Msg_ConstructorRange(nil, nil, Owner, 0, JB_LUB[0], 0);
	JB_Incr(Into);
	if (Owner == kJB_SyxArg) {
		(JB_Msg_SyntaxIsSet(Into, kJB__MsgParseFlags_Style2, true));
	}
	bool Lines = JB_Tk__ParseLoopFlags(Into, JB_LUB[0], Flags);
	if ((!Lines) and JB_Ring_HasChildCount(Into, 1)) {
		JB_SetRef(Into, ((Message*)JB_Ring_First(Into)));
	}
	JB_Tk__CleanSpaces();
	if (JB_Tk__Running()) {
		JB_Tk__Expect(0);
	}
	JB_Tk__StartParse(nil);
	if (!JB_ErrorMarker_SyntaxCast(OK)) {
		JB_SetRef(Into, nil);
	}
	JB_SafeDecr(Into);
	return ((Message*)Into);
}

Message* JB_Str_ParseWithError(JB_String* Self, JB_Error** Rec) {
	Message* Rz = ((Message*)nil);
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Str_Parse(Self, kJB_SyxArg, true));
	if (!Rz) {
		JB_Error* R = JB_Rec_Pop(JB_StdErr);
		JB_Incr(R);
		if (Rec) {
			JB_SetRef(Rec[0], R);
		}
		JB_Decr(R);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* JB_Str_PathDir(JB_String* Self) {
	if (JB_Str_Exists(Self) and (JB_Str_Last(Self, 0) != '/')) {
		return JB_Str_OperatorPlus(Self, JB_LUB[4]);
	}
	return Self;
}

JB_String* JB_Str_Pluralize(JB_String* Self, int Amount, JB_String* Nothing) {
	if ((!Amount) and JB_Str_Exists(Nothing)) {
		return Nothing;
	}
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	if (Amount) {
		JB_FS_AppendInt32(Fs, Amount);
	}
	 else {
		JB_FS_AppendString(Fs, JB_LUB[145]);
	}
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_AppendString(Fs, Self);
	if (Amount != 1) {
		if (JB_Str_Last(Self, 0) == 's') {
			JB_FS_AppendByte(Fs, 'e');
		}
		JB_FS_AppendByte(Fs, 's');
	}
	JB_String* _tmPf0 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Str_Preview(JB_String* Self, int N) {
	//visible;
	if (JB_Str_Length(Self) <= N) {
		return Self;
	}
	JB_String* _tmPf1 = JB_Str_Range(Self, 0, N);
	JB_Incr(_tmPf1);
	JB_String* _tmPf0 = JB_Str_UnicodeSync(_tmPf1);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Str_OperatorPlus(_tmPf0, JB_LUB[26]);
	JB_Incr(_tmPf2);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void JB_Str_PrintlineColor(JB_String* Self, JB_String* Color) {
	if (JB__ErrorColors_Enabled) {
		JB_Print(Color);
	}
	JB_PrintLine(Self);
	if (JB__ErrorColors_Enabled) {
		JB_Print(kJB__ErrorColors_normal);
	}
}

JB_String* JB_Str_ReadFile(JB_String* Self, int Lim, bool AllowMissing) {
	JB_File* _tmPf0 = JB_Str_AsFile(Self);
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_File_ReadAll(_tmPf0, Lim, AllowMissing);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Str_ReplacePathComponent(JB_String* Self, int Num, JB_String* With) {
	Array* R = JB_Str_Components(Self);
	JB_Incr(R);
	if (Num < 0) {
		Num = (Num + JB_Array_Size(R));
	}
	(JB_Array_ValueSet(R, Num, With));
	JB_String* _tmPf0 = JB_Array_join(R, JB_LUB[4]);
	JB_Incr(_tmPf0);
	JB_Decr(R);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Str_ResolveSpd(JB_String* Self) {
	if (JB_Str_MidEquals(Self, 0, JB_LUB[585], false)) {
		JB_String* _tmPf1 = JB_File__SpeedieDir();
		JB_Incr(_tmPf1);
		JB_String* _tmPf2 = JB_Str_Range(Self, (5), JB_int__Max());
		JB_Incr(_tmPf2);
		JB_String* _tmPf0 = JB_Str_OperatorPlus(_tmPf1, _tmPf2);
		JB_Incr(_tmPf0);
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf2);
		JB_String* _tmPf3 = JB_Str_ResolvePath((_tmPf0), kJB__FileResolveMode_AllowMissing);
		JB_Incr(_tmPf3);
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	return JB_Str_ResolvePath(Self, kJB__FileResolveMode_AllowMissing);
}

void SC_Str_Safe(JB_String* Self, FastString* Fs, bool Local) {
	if (JB_Str_IsASCII(Self)) {
		if (Local and JB_Str_IsLower(Self)) {
			JB_FS_AppendByte(Fs, JB_byte_UpperCase(JB_Str_First(Self)));
			JB_FS_AppendRange(Fs, Self, 1, JB_int__Max());
		}
		 else {
			JB_FS_AppendString(Fs, Self);
		}
		return;
	}
	{
		byte* _Startf0 = JB_Str_Address(Self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			uint S = _Startf0[0];
			if (JB_byte_IsUpper(S) or (JB_byte_IsLower(S) or (JB_byte_IsInt(S) or (S == '_')))) {
				JB_FS_AppendByte(Fs, S);
			}
			 else {
				JB_FS_AppendByte(Fs, 'x');
				JB_FS_AppendHex(Fs, S, 2);
			}
			(++_Startf0);
		};
	};
}

JB_String* SC_Str_ScriptContainer(JB_String* Self, JB_String* Container) {
	JB_String* _tmPf0 = JB_int64_Render(JB_int64_Abs(((int64)JB_Str_CRC(Self, 0))), nil);
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_Str_SyntaxAccess(Container, _tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Str_ScriptLocation(JB_String* Self, JB_String* Container) {
	JB_String* Full = JB_Str_ResolvePath(Self, false);
	JB_Incr(Full);
	if (!JB_Str_Exists(Full)) {
		JB_SetRef(Full, Self);
	}
	JB_String* Dest = SC_Str_ScriptContainer(Full, Container);
	JB_Incr(Dest);
	JB_Str_MakeEntirePath(Dest, true);
	JB_String* _tmPf0 = SC_Str_SpdScriptName(Full);
	JB_Incr(_tmPf0);
	JB_Decr(Full);
	JB_String* _tmPf1 = JB_Str_SyntaxAccess(Dest, _tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(Dest);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Str_Shorten(JB_String* Self, int N) {
	return JB_Str_Range(Self, 0, JB_Str_Length(Self) - N);
}

JB_String* JB_Str_Sibling(JB_String* Self, JB_String* Name) {
	return JB_Str_ReplacePathComponent(Self, -1, Name);
}

ExitCode JB_Str_SilentExecute(JB_String* Self, Array* Args, FastString* Out, FastString* Errs, Date Timeout) {
	return JB_Str_Execute(Self, Args, Out, Errs, kJB__PIDM_Silence, Timeout);
}

JB_String* SC_Str_SpdScriptName(JB_String* Self) {
	JB_String* Rz = JB_LUB[0];
	JB_Incr(Rz);
	JB_SetRef(Rz, SC_Str_ContainerName(Self, JB_LUB[528]));
	if (!JB_Str_Exists(Rz)) {
		JB_SetRef(Rz, SC_Str_ContainerName(Self, JB_LUB[586]));
	}
	if (!JB_Str_Exists(Rz)) {
		JB_String* _tmPf0 = JB_Str_Name(Self);
		JB_Incr(_tmPf0);
		JB_SetRef(Rz, JB_Str_TrimExtAndPath(_tmPf0, true));
		JB_Decr(_tmPf0);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Array* JB_Str_Split(JB_String* Self, uint /*byte*/ Sep) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	JB_Incr(Rz);
	{
		StringFields* _LoopSrcf2 = JB_FI_Constructor(nil, Self, Sep);
		JB_Incr(_LoopSrcf2);
		int _Prevf0 = 0;
		while (true) {
			Ind _Curr_f1 = JB_FI_NextSep(_LoopSrcf2, _Prevf0);
			JB_String* Field = JB_FI_Field(_LoopSrcf2, _Prevf0, _Curr_f1);
			JB_Incr(Field);
			JB_Array_SyntaxAppend(Rz, Field);
			JB_Decr(Field);
			_Prevf0 = (_Curr_f1 + 1);
			if (!JB_Ind_SyntaxCast(_Curr_f1)) {
				break;
			}
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* JB_Str_Squeeze(JB_String* Self) {
	//visible;
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	bool Broken = false;
	{
		byte* _Startf0 = JB_Str_Address(Self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			uint C = _Startf0[0];
			if (JB_byte_IsWhite(C)) {
				Broken = ((bool)Fs->Length);
			}
			 else {
				if (Broken) {
					JB_FS_AppendByte(Fs, ' ');
				}
				JB_FS_AppendByte(Fs, C);
				Broken = false;
			}
			(++_Startf0);
		};
	}
	;
	JB_String* _tmPf3 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf3);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

StringReader* JB_Str_Stream(JB_String* Self) {
	return JB_SS_Constructor(nil, Self);
}

JB_String* JB_Str_SyntaxAccess(JB_String* Self, JB_String* S) {
	return JB_Str_Child(Self, S);
}

bool JB_Str_SyntaxAppend(JB_String* Self, JB_String* S) {
	return JB_Str_WriteSet(Self, S);
}

int JB_Str_CompareStr(JB_String* Self, JB_String* Other, bool Aware) {
	return JB_Str_Compare(Self, Other, Aware);
}

int JB_Str_CompareInt(JB_String* Self, int Other, bool Aware) {
	return JB_Str_Length(Self) - Other;
}

bool JB_Str_EqualsInt(JB_String* Self, int Other, bool Aware) {
	return JB_Str_Length(Self) == Other;
}

void JB_Str_Fail(JB_String* Self) {
	//visible;
	JB_Rec__NewErrorWithNode(nil, Self, nil);
}

JB_String* JB_Str_TitleCase(JB_String* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendByte(Fs, JB_byte_UpperCase((JB_Str_First(Self))));
	JB_String* _tmPf1 = JB_Str_Range(Self, 1, JB_int__Max());
	JB_Incr(_tmPf1);
	JB_String* _tmPf0 = JB_Str_LowerCase(_tmPf1);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_String* _tmPf2 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf2);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

bool SC_Str_trap(JB_String* Self, Message* Msg) {
	;
	//visible;
	return false;
}

JB_String* JB_Str_TrimExtAndPath(JB_String* Self, bool KeepPath) {
	int N = JB_Str_FindTrailingSlashes(Self);
	Ind Slash = JB_Str_FindByte(Self, '/', N - 1, 0) + 1;
	Ind Dot = JB_Str_FindByte(Self, '.', N - 1, Slash);
	if (!JB_Ind_SyntaxCast(Dot)) {
		Dot = N;
	}
	if (!KeepPath) {
		Slash = 0;
	}
	return JB_Str_Range(Self, Slash, Dot);
}

JB_String* JB_Str_TrimFirst(JB_String* Self, uint /*byte*/ B) {
	Ind S = JB_Str_OutByteWithByteIntInt(Self, B, 0, JB_int__Max());
	return JB_Str_Range(Self, (S), JB_int__Max());
}

int JB_Str_TrimLastSub(JB_String* Self, uint /*byte*/ B) {
	int N = JB_Str_Length(Self);
	while (JB_Str_ByteValue(Self, N - 1) == B) {
		(--N);
	};
	return N;
}

JB_String* JB_Str_TrimSlashes(JB_String* Self, bool Pathfix) {
	JB_String* Rz = JB_LUB[0];
	JB_Incr(Rz);
	JB_String* P = ((JB_String*)JB_Ternary(Pathfix, JB_File_PathFix_(Self), Self));
	JB_Incr(P);
	if (!((JB_Str_Last(P, 0) == '/') or JB_Str_ContainsString(P, JB_LUB[52]))) {
		JB_Decr(Rz);
		JB_SafeDecr(P);
		return P;
	}
	JB_Decr(P);
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	int Prev = 0;
	{
		byte* _Startf0 = JB_Str_Address(Self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			uint C = _Startf0[0];
			if ((C != '/') or (Prev != '/')) {
				JB_FS_AppendByte(Fs, C);
			}
			Prev = C;
			(++_Startf0);
		};
	}
	;
	if (Prev == '/') {
		(JB_FS_LengthSet(Fs, Fs->Length - 1));
	}
	JB_SetRef(Rz, JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	if ((!JB_Str_Exists(Rz)) and JB_Str_Exists(Self)) {
		JB_SetRef(Rz, JB_LUB[4]);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Str_UnderScoreAtAnyEnd(JB_String* Self) {
	return (JB_Str_First(Self) == '_') or (JB_Str_ByteValue(Self, -1) == '_');
}

JB_String* JB_Str_Unescape(JB_String* Self) {
	return JB_Str_MultiReplaceAll(Self, JB__Constants_UnEscapeStr, JB_StdErr);
}

JB_String* SC_Str_UnicodeSafeName(JB_String* Self, FastString* Fs_in) {
	if (JB_Str_IsASCII(Self)) {
		if (Fs_in) {
			JB_FS_AppendString(Fs_in, Self);
		}
		return Self;
	}
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	{
		byte* _Startf0 = JB_Str_Address(Self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			uint S = _Startf0[0];
			if (JB_CS_HasChar(SC_C_Letters, S)) {
				JB_FS_AppendByte(Fs, S);
			}
			 else {
				JB_FS_AppendByte(Fs, 'x');
				JB_FS_AppendHex(Fs, S, 2);
			}
			(++_Startf0);
		};
	}
	;
	JB_String* _tmPf3 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf3);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

CharSet* JB_Str_UniCS(JB_String* Self) {
	JB_String* _tmPf0 = JB_Str_OperatorPlus(Self, JB_LUB[146]);
	JB_Incr(_tmPf0);
	CharSet* _tmPf1 = JB_Str_CharSetWithBool((_tmPf0), true);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_Str_UnPrintable(JB_String* Self) {
	if (JB_Ind_SyntaxCast(JB_Str_BadUTF8(Self, 0))) {
		return -1;
	}
	{
		byte* _Startf0 = JB_Str_Address(Self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			uint C = _Startf0[0];
			if (!((C >= ' ') or (C == 9))) {
				if (JB_byte_IsTextLine(C)) {
					return '\n';
				}
				return -2;
			}
			(++_Startf0);
		};
	}
	;
	return 0;
}

JB_String* JB_Str_UpperFirst(JB_String* Self) {
	if (JB_byte_IsUpper(JB_Str_First(Self))) {
		return Self;
	}
	JB_String* _tmPf1 = JB_Str_Range(Self, 0, 1);
	JB_Incr(_tmPf1);
	JB_String* _tmPf0 = JB_Str_UpperCase(_tmPf1);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Str_Range(Self, (1), JB_int__Max());
	JB_Incr(_tmPf2);
	JB_String* _tmPf3 = JB_Str_OperatorPlus(_tmPf0, _tmPf2);
	JB_Incr(_tmPf3);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf2);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

bool JB_Str_Visible(JB_String* Self) {
	JB_String* _tmPf0 = JB_Str_Name(Self);
	JB_Incr(_tmPf0);
	bool _tmPf1 = JB_Str_First(_tmPf0) != '.';
	JB_Decr(_tmPf0);
	return _tmPf1;
}

Array* JB_Str_Words(JB_String* Self) {
	return JB_Str_Split(Self, ' ');
}

JB_String* JB_Str_Wrap(JB_String* Self, int MaxWidth, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	int P = 0;
	while (true) {
		int I = P;
		P = JB_Str_WrapSub(Self, MaxWidth, false, P);
		JB_String* _tmPf0 = JB_Str_Range(Self, I, P - 1);
		JB_Incr(_tmPf0);
		JB_FS_AppendString(Fs, _tmPf0);
		JB_Decr(_tmPf0);
		if (JB_Str_CompareInt(Self, P, false) <= 0) {
			break;
		}
		JB_FS_AppendByte(Fs, '\n');
	};
	JB_String* _tmPf1 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf1);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_Str_WrapSub(JB_String* Self, int MaxWidth, bool IsInline, int P) {
	int I = P;
	int ParaMax = 1024;
	MaxWidth = JB_int_OperatorMin(MaxWidth, ParaMax);
	int Orig = MaxWidth;
	ParaMax = (ParaMax + P);
	while (true) {
		int C = JB_Str_ByteValue2(Self, I, -1);
		if (C < 0) {
			return I;
		}
		if (JB_byte_IsTextLine(((byte)C))) {
			if (!IsInline) {
				return I + 1;
			}
			C = ' ';
		}
		if ((I >= ParaMax) or (MaxWidth <= 0)) {
			return I;
		}
		if (C == '\t') {
			(++I);
			MaxWidth = (MaxWidth - JB_int_TabsWidth((Orig - MaxWidth)));
		}
		 else if (IsInline) {
			(++I);
		}
		 else if (JB_CS_HasChar(JB__Constants_CSWrapSplit, C)) {
			(++I);
			(--MaxWidth);
		}
		 else {
			Ind WordEnd = JB_Str_Find(Self, JB__Constants_CSWrapSplit, I, ParaMax);
			if (JB_Ind_SyntaxCast(WordEnd)) {
				WordEnd = (WordEnd + (JB_Str_ByteValue(Self, WordEnd) > 32));
			}
			 else {
				WordEnd = JB_int_OperatorMin(JB_Str_Length(Self), ParaMax);
			}
			int MW2 = MaxWidth - JB_Str_CharCount(Self, I, WordEnd);
			if (MW2 < 0) {
				if (I == P) {
					I = (P + MaxWidth);
				}
				return I;
			}
			MaxWidth = MW2;
			I = WordEnd;
		}
	};
}

bool JB_Str_WriteSet(JB_String* Self, JB_String* Value) {
	JB_File* _tmPf0 = JB_Str_AsFile(Self);
	JB_Incr(_tmPf0);
	bool _tmPf1 = JB_File_DataSet(_tmPf0, Value);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool JB_Str_Yes(JB_String* Self, Message* Where) {
	if (!JB_Str_Exists(Self)) {
		return false;
	}
	if ((JB_Str_Equals(Self, JB_LUB[145], true)) or ((JB_Str_Equals(Self, JB_LUB[32], true)) or ((JB_Str_Equals(Self, JB_LUB[813], true)) or ((JB_Str_Equals(Self, JB_LUB[266], true)) or (JB_Str_Equals(Self, JB_LUB[0], true)))))) {
		return false;
	}
	if ((JB_Str_Equals(Self, JB_LUB[103], true)) or ((JB_Str_Equals(Self, JB_LUB[31], true)) or ((JB_Str_Equals(Self, JB_LUB[814], true)) or (JB_Str_Equals(Self, JB_LUB[264], true))))) {
		return true;
	}
	if (true) {
		JB_String* _tmPf1 = JB_Str_OperatorPlus(Self, JB_LUB[317]);
		JB_Incr(_tmPf1);
		JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[815], _tmPf1);
		JB_Incr(_tmPf0);
		JB_Decr(_tmPf1);
		JB_Msg_Fail(Where, _tmPf0);
		JB_Decr(_tmPf0);
	}
	return false;
}

JB_String* JB_Str__FromPico(PicoMessage* M) {
	byte* X = ((byte*)M->Data);
	if (X) {
		return JB_Str__Freeable(X, M->Length);
	}
	return JB_LUB[0];
}

SortComparison JB_Str__Sorter(JB_String* Self, JB_String* B) {
	return ((SortComparison)JB_Str_CompareStr(B, Self, false));
}

JB_StringC* JB_Str__Wrap(_cstring Addr) {
	return JB_StrC(Addr);
}


StringFields* JB_FI_Constructor(StringFields* Self, JB_String* Source, uint /*byte*/ Sep) {
	if (Self == nil) {
		Self = ((StringFields*)JB_NewClass(&StringFieldsData));
	}
	JB_Incr2(Self->Data, Source);
	Self->Sep = Sep;
	return Self;
}

void JB_FI_Destructor(StringFields* Self) {
	JB_Clear(Self->Data);
}

JB_String* JB_FI_Field(StringFields* Self, Ind Prev, Ind Curr) {
	if (!JB_Ind_SyntaxCast(Curr)) {
		Curr = JB_Str_Length(Self->Data);
	}
	return JB_Str_Range(Self->Data, Prev, Curr);
}

Ind JB_FI_NextSep(StringFields* Self, int Prev) {
	return JB_Str_FindByte(Self->Data, Self->Sep, Prev, JB_int__Max());
}


int JB_SS_Byte(StringReader* Self) {
	if (JB_FastBuff_HasAny((&Self->Data))) {
		return JB_FastBuff_Byte((&Self->Data));
	}
	if (JB_SS_NextChunk(Self)) {
		return JB_FastBuff_Byte((&Self->Data));
	}
	return -1;
}

void JB_SS_CompressInto(StringReader* Self, JB_Object* Dest, int Strength, CompressionStats* St) {
	if (Self == nil) {
		JB_Str_Fail(JB_LUB[1147]);
		return;
	}
	FastString* J = JB_FS__Use(Dest);
	JB_Incr(J);
	if (!J) {
		JB_Decr(J);
		return;
	}
	St = JB_MzSt_Start(St);
	;
	JB_FS_AppendString(J, JB__JbinHeader);
	JB_bin_Enter(J, kJB_SyxTmp, JB_LUB[1148]);
	JB_bin_AddInt(J, Self->Length);
	JB_bin_Enter(J, kJB_SyxArg, JB_LUB[0]);
	while (JB_SS_HasAny(Self)) {
		JB_String* Str = JB_SS_Str(Self, 1048576, 0);
		JB_Incr(Str);
		ivec2 Place = JB_bin_OpenSection(J);
		JB_Str_CompressChunk(J, Str);
		JB_bin_CloseSection(J, Place[0], Place[1], kJB_SyxBin);
		JB_MzSt_LiveUpdate(St, JB_Str_Length(Str), J->Length - Place[0], true);
		JB_Decr(Str);
		if (!JB_SS_NoMoreChunks(Self)) {
			JB_FS_Flush(J);
		}
	};
	JB_bin_Exit(J, 2);
	JB_FS_Flush(J);
	JB_Str_CompressChunk(J, nil);
	JB_Decr(J);
	JB_MzSt_End(St);
}

StringReader* JB_SS_Constructor(StringReader* Self, JB_String* Data) {
	if (Self == nil) {
		Self = ((StringReader*)JB_NewClass(&StringReaderData));
	}
	Self->StartFrom = 0;
	Self->File = nil;
	Self->Data = ((FastBuff){});
	Self->CallBack = nil;
	Self->_Object = nil;
	Self->Length = 0;
	Self->ChunkSize = 0;
	Self->_NoMoreChunks = false;
	JB_SS_Reset(Self, Data);
	return Self;
}

JB_String* JB_SS_Decompress(StringReader* Self, int Lim, CompressionStats* St, bool Multi) {
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	while (JB_SS_HasAny(Self)) {
		if (!JB_SS_DecompressInto(Self, Fs, Lim, St)) {
			JB_Decr(Fs);
			return JB_Str__Error();
		}
		if (!Multi) {
			break;
		}
	};
	JB_String* _tmPf0 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

bool JB_SS_DecompressInto(StringReader* Self, JB_Object* Dest, int Lim, CompressionStats* St) {
	FastString* Fs = JB_FS__Use(Dest);
	JB_Incr(Fs);
	if (!Fs) {
		JB_Decr(Fs);
		return nil;
	}
	if (!JB_SS_IsCompressed(Self)) {
		JB_String* _tmPf0 = JB_SS_ReadAll(Self);
		JB_Incr(_tmPf0);
		JB_FS_AppendString(Fs, _tmPf0);
		JB_Decr(_tmPf0);
		JB_Decr(Fs);
		return true;
	}
	JB_SS_ExpectJbin(Self);
	Message* Mz = JB_SS_NextMsgExpect(Self, nil, kJB_SyxTmp, nil);
	JB_Incr(Mz);
	Message* _tmPf1 = JB_SS_NextMsgExpect(Self, Mz, kJB_SyxNum, nil);
	JB_Incr(_tmPf1);
	int64 Remaining = JB_Msg_Int(_tmPf1, 0);
	JB_Decr(_tmPf1);
	Message* Arg = JB_SS_NextMsgExpect(Self, Mz, kJB_SyxArg, nil);
	JB_Incr(Arg);
	JB_Decr(Mz);
	if (!((Remaining > 0) and ((Remaining <= Lim) and (Arg)))) {
		if (true) {
			JB_StringC* _tmPf2 = ((JB_StringC*)JB_Ternary(Remaining > Lim, JB_LUB[1348], JB_LUB[1349]));
			JB_Incr(_tmPf2);
			JB_SS_Fail(Self, _tmPf2);
			JB_Decr(_tmPf2);
		}
	}
	 else {
		St = JB_MzSt_Start(St);
		while (true) {
			Message* C = JB_SS_NextMsgExpect(Self, Arg, kJB_SyxBin, nil);
			JB_Incr(C);
			if ((!C)) {
				JB_Decr(C);
				break;
			}
			int64 Expected = JB_int64_OperatorMin(Remaining, 1048576);
			if (!JB_Str_DecompressChunk(Fs, C->Name, Expected)) {
				JB_Decr(C);
				break;
			}
			Remaining = (Remaining - Expected);
			JB_FS_Flush(Fs);
			JB_MzSt_LiveUpdate(St, JB_Msg_Length(C), Expected, false);
			JB_Tree_Remove(C);
			JB_Decr(C);
		};
		JB_MzSt_End(St);
	}
	JB_Decr(Fs);
	JB_Decr(Arg);
	return (!Self->Data.WentBad);
}

void JB_SS_Destructor(StringReader* Self) {
	JB_Clear(Self->File);
	JB_FastBuff_Destructor((&Self->Data));
	JB_Clear(Self->CallBack);
}

bool JB_SS_ExpectJbin(StringReader* Self) {
	if (JB_SS_IsJBin(Self)) {
		return true;
	}
	if (true) {
		JB_SS_Fail(Self, JB__jBinNotJbin);
	}
	return false;
}

bool JB_SS_HasAny(StringReader* Self) {
	if (Self == nil) {
		return nil;
	}
	if (JB_FastBuff_HasAny((&Self->Data))) {
		return true;
	}
	return JB_SS_NextChunk(Self);
}

int64 JB_SS_hInt(StringReader* Self) {
	int Sh = 0;
	int V = 0;
	while (true) {
		int B = JB_SS_Byte(Self);
		if (B < 0) {
			break;
		}
		V = (V | ((B & 127) << Sh));
		if (B <= 127) {
			return V;
		}
		Sh = (Sh + 7);
		if (Sh > 57) {
			JB_SS_Fail(Self, JB_LUB[811]);
			return 0;
		}
	};
	return 0;
}

bool JB_SS_IsCompressed(StringReader* Self) {
	JB_String* Str = JB_SS_StrNoAdvance(Self, 16);
	JB_Incr(Str);
	bool _tmPf0 = JB_Str_IsCompressed(Str);
	JB_Decr(Str);
	return _tmPf0;
}

bool JB_SS_IsJBin(StringReader* Self) {
	JB_String* _tmPf0 = JB_SS_Str(Self, 4, 0);
	JB_Incr(_tmPf0);
	bool _tmPf1 = JB_Ind_SyntaxCast(JB_Str_IsJbin(_tmPf0));
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool JB_SS_NextChunk(StringReader* Self) {
	JB_File* F = Self->File;
	if (F) {
		Self->StartFrom = (Self->StartFrom + JB_FastBuff_Size((&Self->Data)));
		if (JB_SS_ReadChunk(Self, F)) {
			return true;
		}
		JB_SetRef(Self->File, nil);
	}
	return false;
}

Message* JB_SS_NextMsgExpect(StringReader* Self, Message* Parent, Syntax Fn, JB_String* Name) {
	Message* Rz = nil;
	Rz = JB_SS_NextMsg(Self);
	if (!Rz) {
		return nil;
	}
	if (!(JB_Msg_Expect(Rz, Fn, Name) and (JB_Tree_OperatorIn(Rz, Parent)))) {
		JB_Msg_Fail(Rz, nil);
		return nil;
	}
	return Rz;
}

Message* JB_SS_NextMsg(StringReader* Self) {
	return ((Message*)JB_SS_NextMsgInfo(Self));
}

uint64 JB_SS_NextMsgInfo(StringReader* Self) {
	Message* Msg = ((Message*)Self->_Object);
	int Info = 0;
	while (true) {
		Info = JB_SS_NonZeroByte(Self);
		if (Info <= 239) {
			break;
		}
		Msg = ((Message*)JB_Tree_Upward(Msg, Info - 239));
		Self->_Object = Msg;
		if (!Msg) {
			return 0;
		}
	};
	Syntax T = ((Syntax)(Info >> 1));
	if ((T < kJB_Syxmax) and (T > kJB_SyxNil)) {
		Msg = JB_Msg_Msg(Msg, T, JB_SS_Str(Self, JB_SS_hInt(Self), 0));
		if (Info & 1) {
			Self->_Object = Msg;
		}
		ParserCallBack* Cb = Self->CallBack;
		if (Cb) {
			JB_SS_ParserCallBack_interface_SyntaxCall((Cb), Msg);
		}
		return ((uint64)Msg);
	}
	Self->_Object = nil;
	if (Info >= 0) {
		if (T <= kJB_SyxNil) {
			JB_SS_Fail(Self, JB_LUB[1149]);
			return 0;
		}
		if (true) {
			JB_SS_Fail(Self, JB_LUB[1150]);
		}
	}
	return 0;
}

bool JB_SS_NoMoreChunks(StringReader* Self) {
	if (Self->_NoMoreChunks) {
		return true;
	}
	if (JB_FastBuff_Remaining((&Self->Data)) <= 0) {
		if (!Self->File) {
			return true;
		}
		if (Self->Length <= Self->StartFrom) {
			return true;
		}
	}
	return false;
}

int JB_SS_NonZeroByte(StringReader* Self) {
	while (true) {
		int B = JB_SS_Byte(Self);
		if (B) {
			return B;
		}
	};
}

Message* JB_SS_ParseJbin(StringReader* Self, int64 Remain) {
	Message* Rz = ((Message*)nil);
	JB_Incr(Rz);
	if (!JB_SS_ExpectJbin(Self)) {
		JB_Decr(Rz);
		return nil;
	}
	Self->_Object = nil;
	JB_SetRef(Rz, JB_SS_NextMsg(Self));
	while ((--Remain) > 0) {
		if (!JB_SS_NextMsgInfo(Self)) {
			break;
		}
	};
	if (Self->Data.WentBad) {
		JB_SetRef(Rz, nil);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

ParserCallBack* JB_SS_ParserCallBack_Constructor(ParserCallBack* Self, StringReader* Upon) {
	if (Self == nil) {
		Self = ((ParserCallBack*)JB_Task_Constructor(nil, 256, ((void*)(&JB_SS_ParserCallBack_run))));
	}
	JB_Incr2(Self->Upon, Upon);
	//task;
	return Self;
}

int64 JB_SS_Position(StringReader* Self) {
	return JB_FastBuff_Position((&Self->Data)) + Self->StartFrom;
}

void JB_SS_PositionSet(StringReader* Self, int64 Value) {
	(JB_FastBuff_PositionSet((&Self->Data), Value - Self->StartFrom));
}

JB_String* JB_SS_ReadAll(StringReader* Self) {
	return JB_SS_Str(Self, Self->Length - Self->StartFrom, 0);
}

bool JB_SS_ReadChunk(StringReader* Self, JB_File* F) {
	JB_String* _tmPf0 = JB_File_Read(F, Self->ChunkSize, true);
	JB_Incr(_tmPf0);
	(JB_FastBuff_ReadFromSet((&Self->Data), _tmPf0));
	JB_Decr(_tmPf0);
	if (JB_Str_Length(Self->Data.ReadFrom) < Self->ChunkSize) {
		Self->_NoMoreChunks = true;
	}
	return JB_Str_Exists(Self->Data.ReadFrom);
}

int JB_SS_Remaining(StringReader* Self) {
	return Self->Length - JB_SS_Position(Self);
}

void JB_SS_Reset(StringReader* Self, JB_String* Data) {
	(JB_FastBuff_ReadFromSet((&Self->Data), Data));
	Self->Length = JB_Str_Length(Data);
	Self->_NoMoreChunks = true;
}

JB_String* JB_SS_Str(StringReader* Self, int N, int Skip) {
	if (!((N > 0) and (Skip < N))) {
		return JB_LUB[0];
	}
	if ((JB_FastBuff_Has((&Self->Data), N)) or (JB_SS_NoMoreChunks(Self))) {
		(N = JB_int_OperatorMin(N, JB_SS_Remaining(Self)));
		int Pos = JB_FastBuff_Position((&Self->Data));
		(JB_FastBuff_PositionSet((&Self->Data), N + Pos));
		return JB_FastBuff_AccessStr((&Self->Data), Pos + Skip, JB_FastBuff_Position((&Self->Data)));
	}
	int Remaining = N - Skip;
	JB_String* R = JB_Str_New(Remaining);
	JB_Incr(R);
	if (!JB_Str_Exists(R)) {
		JB_Decr(R);
		return JB_LUB[0];
	}
	byte* Dest = R->Addr;
	while (true) {
		int Copied = JB_FastBuff_CopyTo((&Self->Data), Dest, JB_int_OperatorMin(JB_FastBuff_Remaining((&Self->Data)), Remaining));
		Remaining = (Remaining - Copied);
		Dest = (Dest + Copied);
		if (Remaining <= 0) {
			break;
		}
		if (!JB_SS_NextChunk(Self)) {
			JB_String* _tmPf0 = JB_Str_Range(R, 0, JB_Str_Length(R) - Remaining);
			JB_Incr(_tmPf0);
			JB_SetRef(R, JB_Str_Copy(_tmPf0));
			JB_Decr(_tmPf0);
			break;
		}
	};
	JB_SafeDecr(R);
	return R;
}

JB_String* JB_SS_StrNoAdvance(StringReader* Self, int N) {
	JB_String* Rz = JB_LUB[0];
	JB_Incr(Rz);
	int64 P = JB_SS_Position(Self);
	JB_SetRef(Rz, JB_SS_Str(Self, N, 0));
	(JB_SS_PositionSet(Self, P));
	JB_SafeDecr(Rz);
	return Rz;
}

void JB_SS_Fail(StringReader* Self, JB_String* Error) {
	Self->_Object = nil;
	if (Self->Data.WentBad) {
		return;
	}
	Self->Data.WentBad = true;
	if (!JB_Str_Exists(Error)) {
		if (Self->File) {
			Error = JB_LUB[744];
		}
		 else {
			Error = JB_LUB[745];
		}
	}
	JB_Rec__NewErrorWithNode(nil, Error, Self->File);
}


SyntaxObj* JB_Fn_Constructor(SyntaxObj* Self, FP_fpMsgRender Msg, JB_String* Name, int ID) {
	if (Self == nil) {
		Self = ((SyntaxObj*)JB_NewClass(&SyntaxObjData));
	}
	JB_Incr2(Self->LongName, JB_LUB[0]);
	Self->RenderAddr = Msg;
	JB_Incr2(Self->Name, Name);
	Self->ID = ((Syntax)ID);
	Self->ExportAddr = JB_Msg_Dummy;
	return Self;
}

void JB_Fn_Destructor(SyntaxObj* Self) {
	JB_Clear(Self->LongName);
	JB_Clear(Self->Name);
}

JB_String* JB_Fn_Render(SyntaxObj* Self, FastString* Fs_in) {
	if (!Fs_in) {
		return JB_Str_LowerCase(Self->LongName);
	}
	JB_String* _tmPf0 = JB_Str_LowerCase(Self->LongName);
	JB_Incr(_tmPf0);
	JB_FS_AppendString(Fs_in, _tmPf0);
	JB_Decr(_tmPf0);
	return JB_LUB[0];
}


TerminalCell* JB_TerminalCell_ConstructorAuto(TerminalCell* Self, int Color, JB_String* Text) {
	if (Self == nil) {
		Self = ((TerminalCell*)JB_NewClass(&TerminalCellData));
	}
	Self->Color = Color;
	JB_Incr2(Self->Text, Text);
	return Self;
}

void JB_TerminalCell_Destructor(TerminalCell* Self) {
	JB_Clear(Self->Text);
}



autoitem* SC_autoitem_ConstructorAuto(autoitem* Self, JB_String* Sort, JB_String* Insert, SCObject* Value, JB_String* Display, bool Exact, int Type) {
	if (Self == nil) {
		Self = ((autoitem*)JB_NewClass(&autoitemData));
	}
	JB_Incr2(Self->Sort, Sort);
	JB_Incr2(Self->Insert, Insert);
	JB_Incr2(Self->Value, Value);
	JB_Incr2(Self->Display, Display);
	Self->Exact = Exact;
	Self->type = Type;
	return Self;
}

int SC_autoitem_Depth(autoitem* Self) {
	SCObject* V = Self->Value;
	if (JB_Object_FastIsa(V, &SCClassData)) {
		return ((SCClass*)V)->Depth;
	}
	return 0;
}

void SC_autoitem_Destructor(autoitem* Self) {
	JB_Clear(Self->Sort);
	JB_Clear(Self->Insert);
	JB_Clear(Self->Value);
	JB_Clear(Self->Display);
}

bool SC_autoitem_OKBy(autoitem* Self, autoitem* Prev) {
	if (!Prev) {
		return true;
	}
	if (!JB_Str_Equals(Self->Insert, Prev->Insert, true)) {
		return true;
	}
	if (Self->Exact != Prev->Exact) {
		return true;
	}
	return false;
}


void SC_xC2xB5Form_AddP(xC2xB5Form* Self, int Size, uint /*ASMParam*/ P) {
	if ((Size <= 0) or (Size > 32)) {
	}
	int I = Self->Count++;
	Self->TotalBits = (Self->TotalBits + Size);
	if (I >= (6)) {
		JB_Str_Fail(JB_LUB[965]);
		return;
	}
	P = (P | (Size - 1));
	Self->Params[I] = P;
	if (SC_xC2xB5Param_SyntaxIs(P, kSC__xC2xB5Param_Jump)) {
		if (Self->RegForJump) {
		}
		Self->RegForJump = (I + 1);
	}
}

void SC_xC2xB5Form_AddRemainder(xC2xB5Form* Self, int U) {
	SC_xC2xB5Form_AddP(Self, 24 - Self->TotalBits, kSC__xC2xB5Param_Number | U);
}

xC2xB5Form* SC_xC2xB5Form_Constructor(xC2xB5Form* Self, Message* Tmp) {
	if (Self == nil) {
		Self = ((xC2xB5Form*)JB_NewClass(&xC2xB5FormData));
	}
	Self->Count = 0;
	Self->RegForJump = 0;
	Self->RegsAltered = 0;
	Self->TotalBits = 0;
	JB_Incr2(Self->src, Tmp);
	JB_Incr2(Self->Name, Tmp->Name);
	{
		int I = 0;
		while (I < 6) {
			Self->Params[I] = 0;
			(++I);
		};
	}
	;
	{
		Message* _LoopSrcf3 = JB_Msg_Last(Tmp, kJB_SyxArg);
		Message* Line = ((Message*)JB_Ring_First(_LoopSrcf3));
		while (Line) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(Line));
			Message* F = JB_Msg_NeedFirst(Line);
			SC_xC2xB5Form_LoadParam(Self, JB_Msg_Name(F), F, JB_Tree_IsLast(Line));
			Line = _Nf2;
		};
		;
	}
	;
	Self->Index = (++SC__xC2xB5Form_Count);
	return Self;
}

void SC_xC2xB5Form_Destructor(xC2xB5Form* Self) {
	JB_Clear(Self->src);
	JB_Clear(Self->Name);
}

void SC_xC2xB5Form_LoadParam(xC2xB5Form* Self, JB_String* Pl, Message* Place, bool IsLast) {
	if (JB_Str_IsInt(Pl)) {
		int64 I = JB_Str_Int(Pl);
		if (!((I > 0) and (I <= 24))) {
			JB_Msg_Fail(Place, JB_LUB[1145]);
		}
		SC_xC2xB5Form_AddP(Self, I, kSC__xC2xB5Param_Number);
		return;
	}
	if ((!JB_Str_EqualsInt(Pl, 1, false))) {
		JB_Object_Fail(Self);
		return;
	}
	uint P = JB_Str_First(Pl);
	if (P == 'r') {
		SC_xC2xB5Form_AddP(Self, 5, 0);
	}
	 else if (P == 'R') {
		SC_xC2xB5Form_AddP(Self, 5, kSC__xC2xB5Param_Output);
		(++Self->RegsAltered);
	}
	 else if (P == 'x') {
		SC_xC2xB5Form_AddP(Self, 32, kSC__xC2xB5Param_Number);
	}
	 else if (P == 'n') {
		SC_xC2xB5Form_AddP(Self, 5, kSC__xC2xB5Param_Number);
	}
	 else if (P == 'l') {
		SC_xC2xB5Form_AddRemainder(Self, 0);
	}
	 else if (P == 'L') {
		SC_xC2xB5Form_AddRemainder(Self, kSC__xC2xB5Param_NoExpect);
	}
	 else if (P == 's') {
		SC_xC2xB5Form_AddRemainder(Self, kSC__xC2xB5Param_Signed);
	}
	 else if (P == 'S') {
		SC_xC2xB5Form_AddRemainder(Self, kSC__xC2xB5Param_Signed + kSC__xC2xB5Param_NoExpect);
	}
	 else if (P == 'j') {
		SC_xC2xB5Form_AddRemainder(Self, kSC__xC2xB5Param_Signed + kSC__xC2xB5Param_Jump);
	}
	 else if (Place) {
		if (true) {
			JB_Msg_Fail(Place, nil);
		}
	}
	 else {
		if (true) {
			JB_Object_Fail(Self);
		}
	}
}

JB_String* SC_xC2xB5Form_Render(xC2xB5Form* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, Self->Name);
	{
		int _LoopSrcf1 = Self->Count;
		int I = 0;
		while (I < _LoopSrcf1) {
			JB_FS_AppendByte(Fs, ' ');
			JB_FS_AppendInt32(Fs, SC_xC2xB5Param_BitSize(Self->Params[I]));
			(++I);
		};
	}
	;
	JB_String* _tmPf2 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf2);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

ASMParam SC_xC2xB5Form_AccessInt(xC2xB5Form* Self, int I) {
	return Self->Params[I];
}

int SC_xC2xB5Form__Init_() {
	{
		JB_SetRef(SC__xC2xB5Form_Forms, JB_Dict_Constructor(nil));
	}
	;
	return 0;
}

xC2xB5Form* SC_xC2xB5Form__NeedForm(JB_String* Form, Message* M) {
	xC2xB5Form* Rz = nil;
	Rz = ((xC2xB5Form*)JB_Dict_ValueLower(SC__xC2xB5Form_Forms, Form));
	if (!Rz) {
		if (true) {
			JB_Msg_Fail(M, JB_Str_OperatorPlus(JB_LUB[1315], Form));
		}
		Rz = SC_xC2xB5Form_Constructor(nil, JB_Syx_Msg(kJB_SyxArg, JB_LUB[0]));
	}
	return Rz;
}


void SC_Array_AddCStr(Array* Self, JB_String* S) {
	if (JB_Str_Exists(S)) {
		JB_Array_SyntaxAppend(Self, JB_Str_MakeC(S));
	}
}

void SC_Array_AppendWords(Array* Self, JB_String* R) {
	{
		Array* _LoopSrcf2 = JB_Str_OperatorDivide(R, ' ');
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			JB_String* S = ((JB_String*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(S);
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			SC_Array_AddCStr(Self, S);
			JB_Decr(S);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	};
}

int SC_Array_CArraySize(Array* Self, int Size) {
	{
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(Self, _if0));
			if (P == nil) {
				break;
			}
			Size = JB_int_OperatorAlign(Size, SC_Decl_Alignment(P));
			Size = (Size + SC_Decl_CArraySize(P));
			(++_if0);
		};
	}
	;
	return Size;
}

void JB_Array_Clear(Array* Self) {
	if (Self != nil) {
		(JB_Array_SizeSet(Self, 0));
	}
}

JB_Object* JB_Array_First(Array* Self) {
	return JB_Array_Value(Self, 0);
}

JB_String* JB_Array_join(Array* Self, JB_String* Sep) {
	//;
	int Sl = JB_Str_Length(Sep);
	int N = (-Sl);
	{
		int _if0 = 0;
		while (true) {
			JB_String* S = ((JB_String*)JB_Array_Value(Self, _if0));
			JB_Incr(S);
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			N = (N + (JB_Str_Length(S) + Sl));
			JB_Decr(S);
			(++_if0);
		};
	}
	;
	FastString* Fs = JB_FS_ConstructorSize(nil, N);
	JB_Incr(Fs);
	{
		int _if2 = 0;
		int _firstf4 = _if2;
		while (true) {
			JB_String* S = ((JB_String*)JB_Array_Value(Self, _if2));
			JB_Incr(S);
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			if (_firstf4 != _if2) {
				JB_FS_AppendString(Fs, Sep);
			}
			//start;
			JB_FS_AppendString(Fs, S);
			JB_Decr(S);
			(++_if2);
		};
	}
	;
	JB_String* _tmPf5 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf5);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

JB_Object* JB_Array_Last(Array* Self) {
	return JB_Array_Value(Self, JB_Array_Size(Self) - 1);
}

void JB_Array_LoadProperties(Array* Self, ObjectLoader* Loader) {
	while (JB_LD_HasItem(Loader)) {
		JB_Array_SyntaxAppend(Self, JB_LD_Object(Loader));
	};
}

void JB_Array_SaveCollect(Array* Self, ObjectSaver* Saver) {
	{
		int _if0 = 0;
		while (true) {
			JB_Object* V = JB_Array_Value(Self, _if0);
			if (V == nil) {
				break;
			}
			JB_Object_SaveTryCollect(V, Saver);
			(++_if0);
		};
	};
}

void JB_Array_SaveWrite(Array* Self, ObjectSaver* Saver) {
	FastString* D = Saver->Dest;
	{
		int _if0 = 0;
		int _firstf2 = _if0;
		while (true) {
			JB_Object* V = JB_Array_Value(Self, _if0);
			if (V == nil) {
				break;
			}
			if (_firstf2 != _if0) {
				JB_FS_AppendString(D, JB_LUB[10]);
			}
			//start;
			JB_FS_AppendObjectOrNil(D, V);
			(++_if0);
		};
	};
}

void JB_Array_SyntaxAppend(Array* Self, JB_Object* Item) {
	JB_Array_AppendCount(Self, Item, 1);
}

int JB_Array_SyntaxCompare(Array* Self, int N, bool Aware) {
	return JB_Array_Size(Self) - N;
}

bool JB_Array_SyntaxEquals(Array* Self, int N, bool Aware) {
	return JB_Array_Size(Self) == N;
}


JB_Object* JB_Dict_Expect(Dictionary* Self, Message* M) {
	JB_Object* _tmPf0 = JB_Dict_Value0(Self, M->Name);
	JB_Incr(_tmPf0);
	if (!_tmPf0) {
		JB_Msg_Fail(M, nil);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_Dict_LoadProperties(Dictionary* Self, ObjectLoader* Loader) {
	while (JB_LD_HasItem(Loader)) {
		JB_String* Name = JB_LD_ItemName(Loader);
		if (JB_LD_ItemIsInt(Loader)) {
			(JB_Dict_ValueSet(Self, Name, JB_Wrap_ConstructorInt(nil, JB_LD_ItemInt(Loader))));
		}
		 else {
			(JB_Dict_ValueSet(Self, Name, JB_LD_ItemObject(Loader)));
		}
	};
}

JB_Object* JB_Dict_Obj(Dictionary* Self, JB_Object* Prm) {
	return JB_Dict_Value0(Self, JB_Obj_DictName(Prm));
}

void JB_Dict_ObjSet(Dictionary* Self, JB_Object* Prm, JB_Object* Value) {
	(JB_Dict_ValueSet(Self, JB_Obj_DictName(Prm), Value));
}

void JB_Dict_SaveCollect(Dictionary* Self, ObjectSaver* Saver) {
	{
		DictionaryReader* _navf0 = JB_Dict_Navigate(Self);
		while (true) {
			JB_Object* V = JB_DictionaryReader_NextValue(_navf0);
			if (V == nil) {
				break;
			}
			JB_Object_SaveTryCollect(V, Saver);
		};
	};
}

void JB_Dict_SaveWrite(Dictionary* Self, ObjectSaver* Saver) {
	FastString* D = Saver->Dest;
	DictionaryReader* L = JB_Dict_Navigate(Self);
	while (JB_Nav_MoveNext(L)) {
		JB_FS_AppendString(D, JB_Nav_Name(L));
		JB_FS_AppendString(D, JB_LUB[77]);
		JB_FS_AppendObjectOrNil(D, JB_Nav_Value(L));
		JB_FS_AppendByte(D, ',');
	};
}

void JB_Dict_SetValue(Dictionary* Self, JB_String* Key, int64 Value) {
	DTWrap* _tmPf0 = JB_Wrap_ConstructorInt(nil, Value);
	JB_Incr(_tmPf0);
	(JB_Dict_ValueSet(Self, Key, _tmPf0));
	JB_Decr(_tmPf0);
}

JB_Object* JB_Dict_Value0(Dictionary* Self, JB_String* Key) {
	return JB_Dict_Value(Self, Key, nil);
}

void JB_Dict_SetInt(Dictionary* Self, uint64 Key, JB_Object* Value) {
	(JB_Dict_ValueSet(Self, JB_int64_DictName(((int64)Key)), Value));
}

JB_Object* JB_Dict_ValueInt(Dictionary* Self, uint64 Key) {
	return JB_Dict_Value0(Self, JB_int64_DictName(((int64)Key)));
}

JB_Object* JB_Dict_ValueLower(Dictionary* Self, JB_String* S) {
	if (JB_Str_IsLower(S)) {
		return JB_Dict_Value0(Self, S);
	}
	JB_String* _tmPf0 = JB_Str_LowerCase(S);
	JB_Incr(_tmPf0);
	JB_Object* _tmPf1 = JB_Dict_Value0(Self, _tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void JB_Dict_ValueLowerSet(Dictionary* Self, JB_String* S, JB_Object* Value) {
	if (JB_Str_IsLower(S)) {
		(JB_Dict_ValueSet(Self, S, Value));
	}
	 else {
		JB_String* _tmPf0 = JB_Str_LowerCase(S);
		JB_Incr(_tmPf0);
		(JB_Dict_ValueSet(Self, _tmPf0, Value));
		JB_Decr(_tmPf0);
	}
}

Dictionary* JB_Dict__Copy(Dictionary* Dict) {
	Dictionary* Rz = ((Dictionary*)nil);
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Dict_Constructor(nil));
	{
		DictionaryReader* _navf0 = JB_Dict_Navigate(Dict);
		JB_Incr(_navf0);
		while (true) {
			JB_String* Value = ((JB_String*)JB_DictionaryReader_NextValue(_navf0));
			JB_Incr(Value);
			if (Value == nil) {
				JB_Decr(Value);
				break;
			}
			JB_String* Key = JB_Nav_Name(_navf0);
			JB_Incr(Key);
			(JB_Dict_ValueSet(Rz, Key, Value));
			JB_Decr(Value);
			JB_Decr(Key);
		};
		JB_Decr(_navf0);
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}

Dictionary* JB_Dict__Reverse(Dictionary* Dict) {
	Dictionary* Rz = ((Dictionary*)nil);
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Dict_Constructor(nil));
	{
		DictionaryReader* _navf0 = JB_Dict_Navigate(Dict);
		JB_Incr(_navf0);
		while (true) {
			JB_String* Value = ((JB_String*)JB_DictionaryReader_NextValue(_navf0));
			JB_Incr(Value);
			if (Value == nil) {
				JB_Decr(Value);
				break;
			}
			JB_String* Key = JB_Nav_Name(_navf0);
			JB_Incr(Key);
			(JB_Dict_ValueSet(Rz, Value, Key));
			JB_Decr(Value);
			JB_Decr(Key);
		};
		JB_Decr(_navf0);
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}


void SC_FastStringCpp_AddProperty(FastStringCpp* Self, SCDecl* Prop, bool Intomodule) {
	if (SC_Decl_SyntaxIs(Prop, kSC__SCDeclInfo_Const)) {
		if (!Intomodule) {
			SC_Cpp__WriteConst(Prop, Self);
			JB_FS_AppendByte(Self, '\n');
		}
	}
	 else if (SC_Decl_TypeIsReached(Prop)) {
		if (SC_Decl_IsLib(Prop) and SC_Decl_SyntaxIs(Prop, kSC__SCDeclInfo_Global)) {
			if (!Intomodule) {
				JB_FS_AppendString(Self, JB_LUB[600]);
				JB_FS_AppendString(Self, Prop->ExportName);
				JB_FS_AppendString(Self, JB_LUB[1335]);
				SC_FastStringCpp_AppendLibGlob(Self, Prop);
				return;
			}
		}
		 else {
			if (!Intomodule) {
				JB_FS_AppendString(Self, JB_LUB[1336]);
			}
			 else if (SC_Decl_SyntaxIs(Prop, kSC__SCDeclInfo_API)) {
				JB_FS_AppendString(Self, JB_LUB[531]);
			}
			if (Intomodule and SC_Decl_SyntaxIs(Prop, kSC__SCDeclInfo_GameFlyingMem)) {
				JB_FreeIfDead(JB_Str_ReplaceAll(Prop->StringData, JB_LUB[1337], Prop->Name, false, Self));
			}
			 else {
				SC_Cpp__WriteDecl(Prop, Self, nil);
			}
		}
		JB_FS_AppendByte(Self, ';');
	}
}

void SC_FastStringCpp_AppendBehaviour(FastStringCpp* Self, JB_String* Name, SCFunction* Fn, SCClass* Type) {
	JB_FS_AppendString(Self, JB_LUB[888]);
	if (JB_Str_Exists(Name)) {
		JB_FS_AppendString(Self, Name);
	}
	 else {
		JB_FS_AppendString(Self, JB_LUB[889]);
	}
	JB_FS_AppendString(Self, JB_LUB[890]);
	if (!Fn) {
		JB_FS_AppendString(Self, JB_LUB[36]);
	}
	 else {
		JB_FS_AppendByte(Self, '(');
		if (Type) {
			JB_String* _tmPf0 = SC_Class_CStructName(Type);
			if (!JB_Str_Exists(_tmPf0)) {
				JB_Object_Fail(nil);
				return;
			}
			JB_FS_AppendString(Self, (_tmPf0));
		}
		 else {
			JB_FS_AppendString(Self, JB_LUB[891]);
		}
		JB_FS_AppendByte(Self, ')');
		JB_FS_AppendString(Self, Fn->ExportName);
	}
	JB_FS_AppendString(Self, JB_LUB[576]);
}

void SC_FastStringCpp_AppendLibGlob(FastStringCpp* Self, SCDecl* D) {
	uint X = JB_Str_ByteValue(D->ExportName, 3);
	int I = 3 + (X == '_');
	JB_FS_AppendRange(Self, D->ExportName, I, JB_int__Max());
}

FastStringCpp* SC_FastStringCpp_Constructor(FastStringCpp* Self, JB_String* Name) {
	if (Self == nil) {
		Self = ((FastStringCpp*)JB_NewClass(&FastStringCppData));
	}
	JB_FS_Constructor(Self);
	JB_Incr2(Self->Cpp_Name, Name);
	return Self;
}

void SC_FastStringCpp_Destructor(FastStringCpp* Self) {
	JB_Clear(Self->Cpp_Name);
	JB_FS_Destructor(Self);
}


JB_File* JB_File_Child(JB_File* Self, JB_String* Name) {
	if ((!JB_Str_Exists(Name))) {
		JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[785], Self);
		JB_Incr(_tmPf0);
		JB_File_Fail(Self, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_String* _tmPf1 = JB_Str_Child(((JB_String*)Self), Name);
	JB_Incr(_tmPf1);
	JB_File* _tmPf2 = JB_File_Constructor(nil, _tmPf1);
	JB_Incr(_tmPf2);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

ExitCode SC_File_CodeSign(JB_File* Self, JB_String* Sign) {
	ExitCode Rz = 0;
	if (!JB_Platform__OSX()) {
		return 45;
	}
	//using;
	uint __varf1 = kJB__ErrorSeverity_Warning;
	uint _usingf0 = JB_ErrorSeverity_SyntaxUsing(__varf1);
	Array* Args = (JB_Array_Constructor0(nil));
	JB_Incr(Args);
	JB_Array_SyntaxAppend(Args, JB_LUB[452]);
	JB_Array_SyntaxAppend(Args, JB_LUB[453]);
	if (SC__Options_PrintCompileString) {
		JB_Array_SyntaxAppend(Args, JB_LUB[454]);
	}
	JB_Array_SyntaxAppend(Args, JB_LUB[455]);
	JB_StringC* _tmPf2 = JB_Str_MakeC(Sign);
	JB_Incr(_tmPf2);
	JB_Array_SyntaxAppend(Args, _tmPf2);
	JB_Decr(_tmPf2);
	JB_StringC* _tmPf3 = JB_Str_MakeC(Self);
	JB_Incr(_tmPf3);
	JB_Array_SyntaxAppend(Args, _tmPf3);
	JB_Decr(_tmPf3);
	Rz = SC_Str_DebugExecute(JB_LUB[456], Args, nil, nil);
	JB_SetRef(Args, (JB_Array_Constructor0(nil)));
	JB_Array_SyntaxAppend(Args, JB_LUB[457]);
	if (SC__Options_PrintCompileString) {
		JB_Array_SyntaxAppend(Args, JB_LUB[454]);
	}
	JB_Array_SyntaxAppend(Args, Self);
	if (JB_ExitCode_Successful(Rz)) {
		Rz = SC_Str_DebugExecute(JB_LUB[456], Args, nil, nil);
	}
	if (JB_ExitCode_Successful(Rz)) {
		(JB_Array_ValueSet(Args, 0, JB_LUB[458]));
		Rz = SC_Str_DebugExecute(JB_LUB[459], Args, nil, nil);
	}
	JB_Decr(Args);
	DTWrap* _tmPf4 = JB_Wrap_ConstructorInt(nil, __varf1);
	JB_Incr(_tmPf4);
	JB_ErrorSeverity_SyntaxUsingComplete(_usingf0, _tmPf4);
	JB_Decr(_tmPf4);
	return Rz;
}

bool JB_File_CompareData(JB_File* Self, JB_String* A, JB_String* Error) {
	//;
	int Code = 0;
	JB_String* _tmPf0 = JB_File_ReadAll(Self, 134217728, true);
	JB_Incr(_tmPf0);
	if (JB_File_Size(Self) != JB_Str_Length(A)) {
		Code = 1;
	}
	 else if ((!JB_Str_Equals(_tmPf0, A, false))) {
		Code = 2;
	}
	JB_Decr(_tmPf0);
	return JB_File_CompareMsg(Self, Code, Error);
}

bool JB_File_FileCompare(JB_File* Self, JB_File* A, JB_String* Error) {
	bool Rz = false;
	JB_Flow__DisabledIncr(1);
	ErrorInt Code = JB_File_FileCompareSub(Self, A);
	JB_File_Close(Self);
	JB_File_Close(A);
	Rz = JB_File_CompareMsg(Self, Code, Error);
	JB_Flow__DisabledIncr(-1);
	return Rz;
}

bool JB_File_CompareMsg(JB_File* Self, ErrorInt Code, JB_String* Error) {
	//;
	if ((Code == 0) or (!JB_Str_Exists(Error))) {
		return Code == 0;
	}
	JB_String* Msg = Self;
	JB_Incr(Msg);
	if (Code == 1) {
		JB_SetRef(Msg, JB_Str_OperatorPlus(Msg, JB_LUB[786]));
	}
	 else {
		JB_SetRef(Msg, JB_Str_OperatorPlus(Msg, JB_LUB[787]));
	}
	JB_SetRef(Msg, JB_Str_OperatorPlus(Msg, Error));
	if (true) {
		JB_Str_Fail(Msg);
	}
	JB_Decr(Msg);
	return false;
}

ErrorInt JB_File_FileCompareSub(JB_File* Self, JB_File* A) {
	ErrorInt Rz = 0;
	//;
	if (JB_File_Size(Self) != JB_File_Size(A)) {
		return 1;
	}
	JB_File_Close(A);
	JB_File_Close(Self);
	JB_File_Open(Self, kJB__File_O_RDONLY, false);
	JB_File_Open(A, kJB__File_O_RDONLY, false);
	while (true) {
		JB_String* S_ = JB_File_Read(Self, 65536, true);
		JB_Incr(S_);
		JB_String* SA = JB_File_Read(A, 65536, true);
		JB_Incr(SA);
		if (!JB_Str_Equals(S_, SA, false)) {
			Rz = 2;
			JB_Decr(SA);
			JB_Decr(S_);
			break;
		}
		JB_Decr(SA);
		if ((!JB_Str_Exists(S_))) {
			JB_Decr(S_);
			break;
		}
		JB_Decr(S_);
	};
	return Rz;
}

Message* JB_File_Config(JB_File* Self, int Lim) {
	Message* Rz = ((Message*)nil);
	if (JB_File_Exists(Self)) {
		Rz = ((Message*)JB_File_Parse(Self, Lim, false));
	}
	if (!Rz) {
		Rz = JB_Msg_ConstructorEmpty(nil);
	}
	JB_SetRef(Rz->Obj, Self);
	return Rz;
}

ErrorInt JB_File_CopyAll(JB_File* Self, JB_String* Dest, bool AttrOnly) {
	ErrorInt Rz = 0;
	if (!JB_File_IsDir(Self)) {
		JB_File* _tmPf3 = JB_Str_AsFile(Dest);
		JB_Incr(_tmPf3);
		ErrorInt _tmPf6 = JB_File_Copy(Self, _tmPf3, AttrOnly);
		JB_Decr(_tmPf3);
		return _tmPf6;
	}
	{
		Array* _LoopSrcf2 = JB_File_List(Self, false, false);
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			JB_String* F = ((JB_String*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			JB_File* _tmPf4 = JB_File_Child(Self, F);
			JB_Incr(_tmPf4);
			JB_String* _tmPf5 = JB_Str_SyntaxAccess(Dest, F);
			JB_Incr(_tmPf5);
			JB_Decr(F);
			Rz = JB_File_CopyAll(_tmPf4, _tmPf5, false);
			JB_Decr(_tmPf4);
			JB_Decr(_tmPf5);
			if (!JB_ErrorInt_SyntaxCast(Rz)) {
				break;
			}
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	return Rz;
}

ErrorInt JB_File_DeleteAll(JB_File* Self, bool KeepSelf) {
	ErrorInt Rz = 0;
	if ((JB_Str_Equals(Self, JB_LUB[4], false)) or (JB_Str_Equals(Self, JB_LUB[0], false))) {
		return -1;
	}
	if (JB_File_IsDir(Self)) {
		{
			Array* _LoopSrcf2 = JB_File_ListFiles(Self, true);
			JB_Incr(_LoopSrcf2);
			int _if0 = 0;
			while (true) {
				JB_File* C = ((JB_File*)JB_Array_Value(_LoopSrcf2, _if0));
				JB_Incr(C);
				if (C == nil) {
					JB_Decr(C);
					break;
				}
				ErrorInt Tmp = JB_File_DeleteAll(C, false);
				JB_Decr(C);
				if (Rz == 0) {
					Rz = Tmp;
				}
				(++_if0);
			};
			JB_Decr(_LoopSrcf2);
		};
	}
	if ((!KeepSelf) and (Rz == 0)) {
		Rz = JB_File_Delete(Self);
	}
	return Rz;
}

bool JB_File_DirectoryContains(JB_File* Self, JB_String* Path) {
	JB_String* _tmPf0 = JB_File_PathFix_(Path);
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_Str_PathDir(Self);
	JB_Incr(_tmPf1);
	bool _tmPf2 = JB_Str_OperatorStarts(_tmPf0, _tmPf1);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	return _tmPf2;
}

ErrorInt JB_File_LinkToSet(JB_File* Self, JB_String* Value) {
	JB_StringC* _tmPf0 = JB_Str_MakeC(Value);
	JB_Incr(_tmPf0);
	ErrorInt _tmPf1 = JB_Str_SymLink(_tmPf0, Self);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

Array* JB_File_List(JB_File* Self, bool Invis, bool AsFile) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	JB_Incr(Rz);
	//;
	{
		JB_File_ListStart(Self);
		while (JB_File_MoveNext(Self)) {
			JB_String* Name = JB_File_CurrChild(Self);
			JB_Incr(Name);
			if ((Invis) or (JB_Str_First(Name) != '.')) {
				if (AsFile) {
					JB_File* _tmPf1 = JB_File_Child(Self, Name);
					JB_Incr(_tmPf1);
					JB_Array_SyntaxAppend(Rz, _tmPf1);
					JB_Decr(_tmPf1);
				}
				 else {
					JB_Array_SyntaxAppend(Rz, Name);
				}
			}
			JB_Decr(Name);
		};
		JB_File_ListEnd(Self);
	}
	;
	JB_Array_Sort(Rz, ((FP_SorterComparer)((&JB_Str__Sorter))));
	if (!JB_Flow__IsDisabled()) {
		JB_Flow__InputStrings(Rz, Self);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Array* JB_File_ListFiles(JB_File* Self, bool Invis) {
	return ((Array*)JB_File_List(Self, Invis, true));
}

bool JB_File_MustExist(JB_File* Self, JB_String* Operation) {
	if (JB_File_Exists(Self)) {
		return true;
	}
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, JB_LUB[788]);
	if (JB_Str_First(Self) != '/') {
		JB_FS_AppendString(Fs, JB_LUB[789]);
		JB_String* _tmPf0 = JB_File__CWD();
		JB_Incr(_tmPf0);
		JB_FS_AppendString(Fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	if (JB_Str_Exists(Operation)) {
		JB_FS_AppendString(Fs, JB_LUB[790]);
		JB_FS_AppendString(Fs, Operation);
	}
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_AppendString(Fs, Self);
	if (true) {
		JB_String* _tmPf1 = JB_FS_SyntaxCast(Fs);
		JB_Incr(_tmPf1);
		JB_File_Fail(Self, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(Fs);
	return false;
}

bool JB_File_Opened(JB_File* Self) {
	return Self->Descriptor >= 0;
}

bool JB_File_OperatorInside(JB_File* Self, JB_File* F) {
	JB_String* Fp = JB_Str_PathDir(F);
	JB_Incr(Fp);
	JB_String* _tmPf0 = JB_Str_Range(Self, 0, JB_Str_Length(Fp));
	JB_Incr(_tmPf0);
	bool _tmPf1 = (JB_Str_Equals(_tmPf0, Fp, false));
	JB_Decr(Fp);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool JB_File_NewerThanFile(JB_File* Self, JB_File* F) {
	return JB_File_OperatorIsNewerThan(Self, JB_File_Modified(F));
}

bool JB_File_OperatorIsNewerThan(JB_File* Self, Date F) {
	return (JB_File_Modified(Self) > F);
}

JB_File* JB_File_OperatorPlus(JB_File* Self, JB_String* S) {
	JB_String* _tmPf0 = JB_Str_OperatorPlus(Self, S);
	JB_Incr(_tmPf0);
	JB_File* _tmPf1 = JB_Str_AsFile((_tmPf0));
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_File* JB_File_Parent(JB_File* Self) {
	JB_String* _tmPf0 = JB_Str_Parent(Self);
	JB_Incr(_tmPf0);
	JB_File* _tmPf1 = JB_File_Constructor(nil, _tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_File_Parse(JB_File* Self, int Lim, bool AllowMissing) {
	Message* Rz = ((Message*)nil);
	JB_Incr(Rz);
	JB_String* _tmPf0 = JB_Str_ResolvePath(Self, AllowMissing);
	JB_Incr(_tmPf0);
	JB_File* F = JB_Str_AsFile(_tmPf0);
	JB_Incr(F);
	JB_Decr(_tmPf0);
	JB_String* S = JB_File_ReadAll(F, Lim, AllowMissing);
	JB_Incr(S);
	if (JB_Str_IsCompressed(S)) {
		JB_SetRef(S, JB_Str_Decompress(S, Lim, nil));
	}
	if (JB_Safe_SyntaxCast(S)) {
		JB_MemoryLayer* L = JB_ClassData_CreateUseLayer((&MessageData), F, S);
		JB_SetRef(Rz, JB_Str_Parse(S, kJB_SyxArg, false));
		JB_ClassData_Restore((&MessageData));
	}
	JB_Decr(F);
	JB_Decr(S);
	JB_SafeDecr(Rz);
	return Rz;
}

JB_File* JB_File_Sibling(JB_File* Self, JB_String* Name) {
	JB_String* _tmPf0 = JB_Str_Sibling(Self, Name);
	JB_Incr(_tmPf0);
	JB_File* _tmPf1 = JB_Str_AsFile(_tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool JB_File_SmartDataSet(JB_File* Self, JB_String* Nieu) {
	if ((JB_File_Size(Self) != JB_Str_Length(Nieu)) or ((!({
		JB_String* _tmPf1 = JB_File_ReadAll(Self, 134217728, true);
		JB_Incr(_tmPf1);
		bool _tmPf0 = JB_Str_Equals(_tmPf1, Nieu, false);
		JB_Decr(_tmPf1);
		 _tmPf0;
	})))) {
		return JB_File_DataSet(Self, Nieu);
	}
	return false;
}

JB_File* JB_File_SyntaxAccess(JB_File* Self, JB_String* Name) {
	return JB_File_Child(Self, Name);
}

void JB_File_SyntaxAppend(JB_File* Self, JB_String* Data) {
	JB_File_Write(Self, Data);
}

bool JB_File_SyntaxEquals(JB_File* Self, JB_String* S, bool Aware) {
	return JB_Str_Equals(Self, S, Aware);
}

void JB_File_Fail(JB_File* Self, JB_String* Error) {
	JB_Rec__NewErrorWithNode(nil, Error, ((JB_String*)JB_Ternary(((bool)Self), ((JB_String*)JB_File_Path(Self)), ((JB_String*)JB_LUB[0]))));
}

bool SC_File_TestBatch(JB_File* Self) {
	JB_File* Batch = JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, JB_LUB[1574]);
	JB_Incr(Batch);
	bool Printed = false;
	JB_Print(JB_LUB[1575]);
	{
		Array* _LoopSrcf2 = JB_File_ListFiles(Batch, false);
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			JB_File* C = ((JB_File*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			if (JB_Str_Visible(C) and JB_Str_OperatorIsa(C, JB_LUB[140])) {
				if (Printed) {
					JB_Print(JB_LUB[10]);
				}
				Array* _tmPf3 = (JB_Array_Constructor0(nil));
				JB_Incr(_tmPf3);
				JB_Array_SyntaxAppend(_tmPf3, C);
				JB_Array_SyntaxAppend(_tmPf3, JB_LUB[1576]);
				JB_Array_SyntaxAppend(_tmPf3, JB_LUB[1577]);
				JB_Str_SilentExecute(Self, _tmPf3, nil, nil, 0);
				JB_Decr(_tmPf3);
				Printed = true;
				JB_String* _tmPf7 = JB_Str_Name(C);
				JB_Incr(_tmPf7);
				JB_Print(_tmPf7);
				JB_Decr(_tmPf7);
			}
			JB_Decr(C);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_PrintLine(JB_LUB[0]);
	{
		Array* _LoopSrcf6 = JB_File_ListFiles(Batch, false);
		JB_Incr(_LoopSrcf6);
		int _if4 = 0;
		while (true) {
			JB_File* C = ((JB_File*)JB_Array_Value(_LoopSrcf6, _if4));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			if (JB_Str_OperatorIsa(C, JB_LUB[105]) or (JB_Str_OperatorIsa(C, JB_LUB[532]) or JB_Str_OperatorIsa(C, JB_LUB[106]))) {
				JB_Print(JB_LUB[1578]);
				JB_PrintLine(C);
			}
			JB_Decr(C);
			(++_if4);
		};
		JB_Decr(_LoopSrcf6);
	}
	;
	JB_Decr(Batch);
	return JB_Rec_OK(JB_StdErr);
}

bool SC_File_TestSpeedie(JB_File* Self, JB_String* V) {
	if (!JB_File_MustExist(Self, JB_LUB[0])) {
		return nil;
	}
	JB_String* _tmPf0 = JB_File_Path(Self);
	JB_Incr(_tmPf0);
	if ((JB_Str_ContainsString(_tmPf0, JB_LUB[27]))) {
		JB_String* _tmPf2 = JB_File_Path(Self);
		JB_Incr(_tmPf2);
		JB_String* _tmPf1 = JB_Str_OperatorPlus(JB_LUB[1019], _tmPf2);
		JB_Incr(_tmPf1);
		JB_Decr(_tmPf2);
		JB_Str_Fail(_tmPf1);
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_Decr(_tmPf0);
	JB_String* Variant = JB_Str_OperatorPlus(JB_LUB[1020], V);
	JB_Incr(Variant);
	Array* Cmd_args = (JB_Array_Constructor0(nil));
	JB_Incr(Cmd_args);
	JB_Array_SyntaxAppend(Cmd_args, JB_LUB[1021]);
	JB_Array_SyntaxAppend(Cmd_args, JB_LUB[1022]);
	JB_Array_SyntaxAppend(Cmd_args, Variant);
	JB_Decr(Variant);
	if (JB_Str_Exists(SC__Options_Arch)) {
		JB_String* _tmPf3 = JB_Str_OperatorPlus(JB_LUB[1023], SC__Options_Arch);
		JB_Incr(_tmPf3);
		JB_Array_SyntaxAppend(Cmd_args, _tmPf3);
		JB_Decr(_tmPf3);
	}
	if (SC__Options_PrintCompileString) {
		JB_Array_SyntaxAppend(Cmd_args, JB_LUB[1024]);
		JB_String* _tmPf4 = JB_File_Path(Self);
		JB_Incr(_tmPf4);
		JB_PrintLine(_tmPf4);
		JB_Decr(_tmPf4);
		JB_String* _tmPf5 = JB_Array_Render(Cmd_args, nil);
		JB_Incr(_tmPf5);
		JB_Str_PrintLine(_tmPf5);
		JB_Decr(_tmPf5);
	}
	JB_String* _tmPf6 = JB_File_Path(Self);
	JB_Incr(_tmPf6);
	JB_Str_Execute(_tmPf6, Cmd_args, nil, nil, kJB__PIDM_StdOutPassThru, 0);
	JB_Decr(Cmd_args);
	JB_Decr(_tmPf6);
	JB_String* _tmPf7 = JB_Str_OperatorPlus(JB_LUB[1025], V);
	JB_Incr(_tmPf7);
	JB_File* TestProd = SC_Comp__SpeedieDir(_tmPf7);
	JB_Incr(TestProd);
	JB_Decr(_tmPf7);
	JB_File_MustExist(TestProd, JB_LUB[1026]);
	JB_Decr(TestProd);
	JB_String* _tmPf9 = SC_Ext__TmpOut(V);
	JB_Incr(_tmPf9);
	JB_String* _tmPf8 = JB_Str_ReadFile(_tmPf9, 16777216, true);
	JB_Incr(_tmPf8);
	JB_Decr(_tmPf9);
	JB_Print(_tmPf8);
	JB_Decr(_tmPf8);
	JB_String* _tmPf10 = SC_Ext__TmpErr(V);
	JB_Incr(_tmPf10);
	JB_String* Test_err = JB_Str_ReadFile(_tmPf10, 16777216, true);
	JB_Incr(Test_err);
	JB_Decr(_tmPf10);
	if (JB_Str_Length(Test_err)) {
		if (true) {
			JB_Str_Fail(Test_err);
		}
	}
	JB_Decr(Test_err);
	return JB_Rec_OK(JB_StdErr);
}

ExitCode JB_File_Touch(JB_File* Self) {
	Array* _tmPf0 = (JB_Array_Constructor0(nil));
	JB_Incr(_tmPf0);
	JB_Array_SyntaxAppend(_tmPf0, Self);
	ExitCode _tmPf1 = JB_Str_SilentExecute(JB_LUB[131], _tmPf0, nil, nil, 0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

JB_String* JB_File__Applications() {
	return JB_LUB[2];
}

int JB_File__Init_() {
	{
		JB_SetRef(JB__File__Speedie, JB_LUB[0]);
	}
	;
	return 0;
}

JB_File* JB_File__Logs() {
	return JB_Str_AsFile(JB_LUB[348]);
}

JB_String* JB_File__PrefPath() {
	return JB_LUB[3];
}

JB_File* JB_File__Prefs(JB_String* Name) {
	JB_String* _tmPf1 = JB_File__PrefPath();
	JB_Incr(_tmPf1);
	JB_String* _tmPf0 = JB_Str_Child(_tmPf1, Name);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_File* _tmPf2 = JB_Str_AsFile(_tmPf0);
	JB_Incr(_tmPf2);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_String* JB_File__SpeedieDir() {
	if (!JB_Str_Exists(JB__File__Speedie)) {
		JB_String* _tmPf1 = JB_App__Path();
		JB_Incr(_tmPf1);
		JB_String* _tmPf0 = JB_Str_ResolvePath(_tmPf1, false);
		JB_Incr(_tmPf0);
		JB_Decr(_tmPf1);
		JB_String* Paths = JB_Str_Parent(_tmPf0);
		JB_Incr(Paths);
		JB_Decr(_tmPf0);
		JB_String* Srch = JB_LUB[497];
		JB_Incr(Srch);
		Ind Found = JB_Str_InStr(Paths, Srch, 0, JB_int__Max(), true);
		if (JB_Ind_SyntaxCast(Found)) {
			JB_SetRef(JB__File__Speedie, JB_Str_Range(Paths, 0, Found + JB_Str_Length(Srch)));
		}
		 else {
			JB_SetRef(JB__File__Speedie, JB_Str_ResolvePath(JB_LUB[498], false));
		}
		JB_Decr(Paths);
		JB_Decr(Srch);
	}
	return JB__File__Speedie;
}


jbinLeaver JB_bin_Add(FastString* Self, Syntax Type, JB_String* Name, bool Into) {
	return JB_bin_AddMemory(Self, Type, JB_Str_Length(Name), Into, Name->Addr);
}

void JB_bin_AddInt(FastString* Self, int64 Name) {
	JB_String* _tmPf0 = JB_int64_Render(Name, nil);
	JB_Incr(_tmPf0);
	JB_bin_Add(Self, kJB_SyxNum, _tmPf0, false);
	JB_Decr(_tmPf0);
}

jbinLeaver JB_bin_AddMemory(FastString* Self, Syntax Type, uint64 L, bool GoIn, byte* Data) {
	int T = (((int)Type) << 1) | (GoIn);
	JB_FS_AppendByte(Self, ((byte)T));
	JB_FS_hInt(Self, L);
	if (Data) {
		JB_FS_AppendMem_(Self, Data, ((int)L));
	}
	Self->Indent = (Self->Indent + ((int)GoIn));
	return ((int)GoIn);
}

void JB_bin_CloseSection(FastString* Self, int C, int R, Syntax Type) {
	int CurrLen = Self->Length;
	if (CurrLen < C) {
		JB_Object_FailStr(Self, JB_LUB[822]);
		return;
	}
	Self->Length = (C - 6);
	int Blen = 5;
	C = (CurrLen - C);
	int Actual = C;
	while (true) {
		Actual = (Actual >> 7);
		(--Blen);
		if ((!Actual)) {
			break;
		}
	};
	JB_FS_AppendMultiByte(Self, ((byte)0), Blen);
	JB_FS_AppendByte(Self, ((byte)(((int)Type) << 1)));
	JB_FS_hInt(Self, C);
	Self->Length = CurrLen;
	int Nf = (--Self->NoFlush);
	if ((!Nf) and (Self->Length >= (R >> 1))) {
		JB_FS_Flush(Self);
	}
}

FastString* JB_bin_Constructor(FastString* Self, Syntax Type, JB_String* Name) {
	if (Self == nil) {
		Self = ((FastString*)JB_NewClass(&FastStringData));
	}
	JB_FS_Constructor(Self);
	JB_FS_AppendString(Self, JB__JbinHeader);
	JB_bin_Enter(Self, Type, Name);
	return Self;
}

FastString* JB_bin_Constructor0(FastString* Self, int N) {
	if (Self == nil) {
		Self = ((FastString*)JB_NewClass(&FastStringData));
	}
	JB_FS_Constructor(Self);
	if (N) {
	}
	return Self;
}

jbinLeaver JB_bin_Enter(FastString* Self, Syntax Type, JB_String* Name) {
	return JB_bin_Add(Self, Type, Name, true);
}

void JB_bin_Exit0(FastString* Self) {
	uint N = Self->Indent;
	Self->Indent = 0;
	JB_bin_Exit(Self, N);
}

void JB_bin_Exit(FastString* Self, int Amount) {
	int Add = 239;
	while (Amount > 0) {
		int B = JB_int_OperatorMin((Add + Amount), (255));
		JB_FS_AppendByte(Self, ((byte)B));
		Amount = (Amount - (B - Add));
	};
}

ivec2 JB_bin_OpenSection(FastString* Self) {
	(++Self->NoFlush);
	Self->Length = (Self->Length + 6);
	return ivec2{Self->Length, Self->Reserved};
}

void JB_bin_Sheb(FastString* Self, JB_String* Name) {
	JB_FS_AppendByte(Self, '#');
	JB_FS_AppendByte(Self, '!');
	JB_FS_AppendString(Self, Name);
	JB_FS_AppendByte(Self, '\n');
}


MaterialsLol* SC_MaterialsLol_Constructor(MaterialsLol* Self, Selector* Next, Selector** Place, JB_String* Name1) {
	JB_Incr(Name1);
	if (Self == nil) {
		Self = ((MaterialsLol*)JB_NewClass(&MaterialsLolData));
	}
	JB_Sel_Constructor(Self, Next, Place, Name1);
	JB_Decr(Name1);
	JB_Incr2(Self->oof, JB_LUB[0]);
	return Self;
}

void SC_MaterialsLol_Destructor(MaterialsLol* Self) {
	JB_Clear(Self->oof);
	JB_Sel_Destructor(Self);
}

void SC_MaterialsLol____LoadSel(MaterialsLol** Place, JB_String* Name) {
	//visible;
	JB_SetRef(SC__MaterialsLol___First, SC_MaterialsLol_Constructor(nil, SC__MaterialsLol___First, ((Selector**)Place), Name));
}

int SC_MaterialsLol__Init_() {
	{
	}
	;
	return 0;
}

int SC_MaterialsLol__InitCode_() {
	{
	}
	;
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_WierdBlock), JB_LUB[539]);
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_Iron), JB_LUB[540]);
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_Wood), JB_LUB[541]);
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_Pellets), JB_LUB[542]);
	JB_Sel_GiveIDs(SC__MaterialsLol___First);
	return 0;
}



JB_String* JB_Sh_Render(ShellStream* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	//;
	JB_FS_AppendString(Fs, JB_LUB[142]);
	JB_FS_AppendInt32(Fs, Self->PID);
	JB_FS_AppendByte(Fs, '\n');
	JB_FS_AppendString(Fs, Self->Path);
	JB_FS_AppendByte(Fs, ' ');
	JB_FreeIfDead(JB_Array_Render(Self->Args, Fs));
	//;
	JB_String* _tmPf1 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf1);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}


SCNamed* SC_Named_Constructor(SCNamed* Self) {
	if (Self == nil) {
		Self = ((SCNamed*)JB_NewClass(&SCNamedData));
	}
	SC_SCObject_Constructor(Self);
	JB_Incr2(Self->ExportName, JB_LUB[0]);
	JB_Incr2(Self->Name, JB_LUB[0]);
	return Self;
}

void SC_Named_Destructor(SCNamed* Self) {
	JB_Clear(Self->ExportName);
	JB_Clear(Self->Name);
	SC_SCObject_Destructor(Self);
}

JB_String* SC_Named_Render(SCNamed* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	_cstring Cname = ((_cstring)(((uint64)JB_ObjClass(Self)->Name) + 2));
	JB_FS_AppendCString(Fs, Cname);
	JB_FS_AppendString(Fs, JB_LUB[77]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}


SavingTest* SC_SavingTest_Constructor(SavingTest* Self, int N) {
	if (Self == nil) {
		Self = ((SavingTest*)JB_NewClass(&SavingTestData));
	}
	JB_Sav_Constructor(Self);
	JB_String* _tmPf0 = JB_int_RenderFS(N, nil);
	JB_Incr(_tmPf0);
	JB_Incr2(Self->Name, JB_Str_OperatorPlus(JB_LUB[478], _tmPf0));
	JB_Decr(_tmPf0);
	Self->Value = (1000 + N);
	return Self;
}

void SC_SavingTest_Destructor(SavingTest* Self) {
	JB_Clear(Self->Name);
}

void SC_SavingTest_LoadProperties(SavingTest* Self, ObjectLoader* Loader) {
	JB_SetRef(Self->Name, ((JB_String*)JB_LD_String(Loader)));
	{
		int I = 0;
		while (I < 1) {
			Self->ABC[I] = ((int)JB_LD_Int(Loader));
			(++I);
		};
	}
	;
	Self->Value = ((int)JB_LD_Int(Loader));
}

void SC_SavingTest_SaveWrite(SavingTest* Self, ObjectSaver* Saver) {
	JB_Saver_AppendString(Saver, Self->Name);
	{
		int I = 0;
		while (I < 1) {
			JB_Saver_AppendInt(Saver, Self->ABC[I]);
			(++I);
		};
	}
	;
	JB_Saver_AppendInt(Saver, Self->Value);
}

bool SC_SavingTest__IsEqual(JB_Object* A, JB_Object* B) {
	if (!(A and B)) {
		return (B == A);
	}
	if (JB_Object_FastIsa(A, &SavingTestData)) {
		if (JB_Object_FastIsa(B, &SavingTestData)) {
			return (((SavingTest*)A)->Value == ((SavingTest*)B)->Value) and ((JB_Str_Equals(((SavingTest*)A)->Name, ((SavingTest*)B)->Name, false)));
		}
	}
	return false;
}




_cstring JB_Str_CString(JB_StringC* Self) {
	return ((_cstring)Self->Addr);
}


void JB_Tree_AppendAfter(JB_List* Self, JB_List* Item, JB_List* After) {
	if (After) {
		(JB_Ring_NextSibSet(After, Item));
	}
	 else {
		(JB_Ring_FirstSet(Self, Item));
	}
}

void JB_Tree_AppendBefore(JB_List* Self, JB_List* Item, JB_List* Before) {
	if (Before) {
		(JB_Ring_PrevSibSet(Before, Item));
	}
	 else {
		(JB_Ring_LastSet(Self, Item));
	}
}

void JB_Tree_Clear(JB_List* Self) {
	while (true) {
		JB_List* F = JB_Ring_First(Self);
		if (!F) {
			return;
		}
		JB_Tree_Remove(F);
	};
}

JB_List* JB_Tree_FlatLast(JB_List* Self) {
	JB_List* Rz = nil;
	Rz = Self;
	while (true) {
		JB_List* _tmPf0 = JB_Ring_Last(Rz);
		if (!_tmPf0) {
			break;
		}
		Rz = _tmPf0;
	};
	return Rz;
}

bool JB_Tree_HasOneChild(JB_List* Self) {
	return JB_Ring_HasChildCount(Self, 1);
}

bool JB_Tree_IsFirst(JB_List* Self) {
	return JB_Ring_PrevSib(Self) == nil;
}

bool JB_Tree_IsLast(JB_List* Self) {
	return JB_Ring_NextSib(Self) == nil;
}

bool JB_Tree_IsOnlyChild(JB_List* Self) {
	return JB_Tree_IsLast(Self) and JB_Tree_IsFirst(Self);
}

void jdb2(JB_List* Self) {
	//visible;
	if (Self) {
		JB_String* _tmPf0 = JB_Msg_JDB_(((Message*)Self), nil, 1);
		JB_Incr(_tmPf0);
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_PrintLine(JB_LUB[9]);
	}
}

void jdb3(JB_List* Self) {
	//visible;
	if (Self) {
		JB_String* _tmPf0 = JB_Msg_JDB_(((Message*)Self), nil, 3);
		JB_Incr(_tmPf0);
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_PrintLine(JB_LUB[9]);
	}
}

bool JB_Tree_OperatorIn(JB_List* Self, JB_List* F) {
	return JB_Ring_Parent(Self) == F;
}

bool JB_Tree_OperatorLessOrEqual(JB_List* Self, int N) {
	JB_List* C = JB_Ring_First(Self);
	while (C) {
		if (N <= 0) {
			return nil;
		}
		(--N);
		C = JB_Ring_NextSib(C);
	};
	return true;
}

JB_List* JB_Tree_Pop(JB_List* Self) {
	JB_List* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Ring_Last(Self));
	if (Rz) {
		JB_Tree_Remove(Rz);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

void JB_Tree_Remove(JB_List* Self) {
	(JB_Ring_ParentSet(Self, nil));
}

void JB_Tree_RemoveAfter(JB_List* Self) {
	while (true) {
		JB_List* X = JB_Ring_NextSib(Self);
		if ((!X)) {
			break;
		}
		JB_Tree_Remove(X);
	};
}

JB_String* JB_List_Render(JB_List* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	//visible;
	JB_FS_AppendInt32(Fs, Self->Position);
	JB_FS_AppendByte(Fs, ':');
	JB_FS_AppendByte(Fs, '(');
	{
		JB_List* F = JB_Ring_First(Self);
		JB_Incr(F);
		while (F) {
			JB_List* _Nf1 = (JB_Ring_NextSib(F));
			JB_Incr(_Nf1);
			JB_FreeIfDead(JB_Object___Render__(F, Fs));
			JB_FS_AppendByte(Fs, ',');
			JB_FS_AppendByte(Fs, ' ');
			JB_SetRef(F, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(F);
		;
	}
	;
	JB_FS_AppendByte(Fs, ')');
	JB_String* _tmPf2 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf2);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_List* JB_Tree_Second(JB_List* Self) {
	JB_List* X = JB_Ring_First(Self);
	if (X) {
		return JB_Ring_NextSib(X);
	}
	return nil;
}

JB_List* JB_Tree_Get(JB_List* Self, int N) {
	JB_List* Rz = nil;
	if (Self) {
		if (N >= 0) {
			Rz = JB_Ring_First(Self);
			while (Rz and ((--N) >= 0)) {
				Rz = JB_Ring_NextSib(Rz);
			};
		}
		 else {
			Rz = JB_Ring_Last(Self);
			while (Rz and ((++N) < 0)) {
				Rz = JB_Ring_PrevSib(Rz);
			};
		}
	}
	return Rz;
}

void JB_Tree_SyntaxAppend(JB_List* Self, JB_List* Last) {
	(JB_Ring_LastSet(Self, Last));
}

bool JB_Tree_SyntaxEquals(JB_List* Self, int N, bool Aware) {
	return JB_Ring_HasChildCount(Self, N);
}

void JB_Tree_TakeAllFrom(JB_List* Self, JB_List* Src) {
	while (true) {
		JB_List* L = JB_Ring_Last(Src);
		if ((!L)) {
			break;
		}
		(JB_Ring_FirstSet(Self, L));
	};
}

JB_List* JB_Tree_Upward(JB_List* Self, int N) {
	while (Self and ((--N) >= 0)) {
		Self = JB_Ring_Parent(Self);
	};
	return Self;
}

JB_List* JB_Tree_WrapWith(JB_List* Self, JB_List* W) {
	(JB_Ring_PrevSibSet(Self, W));
	(JB_Ring_FirstSet(W, Self));
	return W;
}




void JB_Msg_Acc__(Message* Self, FastString* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	JB_Incr(F);
	if (F) {
		JB_FS_SyntaxAppend(Fs, F);
		JB_SetRef(F, ((Message*)JB_Ring_NextSib(F)));
		if (F) {
			JB_Msg_RenderPrm(F, Fs, '[', ']');
		}
	}
	JB_Decr(F);
}

Message* JB_Msg_AccessAdd(Message* Self, JB_String* Key) {
	Message* L = Self;
	if (JB_Msg_EqualsSyx(Self, kJB_SyxTmp, false)) {
		L = ((Message*)JB_Ring_Last(Self));
		if (!JB_Msg_EqualsSyx(L, kJB_SyxArg, false)) {
			L = JB_Msg_Msg(Self, kJB_SyxArg, JB_LUB[0]);
		}
	}
	{
		Message* Tmp = ((Message*)JB_Ring_First(L));
		while (Tmp) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Tmp)));
			if ((JB_Msg_SyntaxEquals(Tmp, Key, true))) {
				{
					Message* _t = ((Message*)JB_Ring_Last(Tmp));
					if (_t) {
						JB_Tree_Remove(_t);
					}
				}
				;
				return Tmp;
			}
			Tmp = _Nf1;
		};
		;
	}
	;
	return JB_Msg_Msg(L, kJB_SyxTmp, Key);
}

void JB_Msg_CantFind(Message* Self, Syntax S, JB_String* Name, Message* Found) {
	JB_Incr(Found);
	if (!Self) {
		JB_API__NilHandler();
		JB_Decr(Found);
		return;
	}
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	if (Found) {
		JB_FS_AppendString(Fs, JB_LUB[426]);
		JB_FS_MsgErrorName(Fs, Name);
		JB_String* _tmPf0 = JB_Syx_LongName(S);
		JB_Incr(_tmPf0);
		JB_FS_AppendString(Fs, _tmPf0);
		JB_Decr(_tmPf0);
		JB_FS_AppendString(Fs, JB_LUB[740]);
		JB_String* _tmPf1 = JB_Syx_LongName(Found->Func);
		JB_Incr(_tmPf1);
		JB_FS_AppendString(Fs, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else {
		if (S) {
			JB_FS_AppendString(Fs, JB_LUB[741]);
			JB_String* _tmPf2 = JB_Syx_LongName(S);
			JB_Incr(_tmPf2);
			JB_FS_AppendString(Fs, _tmPf2);
			JB_Decr(_tmPf2);
		}
		 else {
			JB_FS_AppendString(Fs, JB_LUB[742]);
		}
		JB_FS_MsgErrorName(Fs, Name);
		JB_SetRef(Found, Self);
	}
	JB_String* _tmPf3 = JB_FS_GetResult(Fs);
	JB_Incr(_tmPf3);
	JB_Decr(Fs);
	JB_Rec__NewErrorWithNode(Found, _tmPf3, nil);
	JB_Decr(_tmPf3);
	JB_Decr(Found);
}

bool SC_Msg_ACInIsa(Message* Self) {
	if (!(((JB_Msg_EqualsSyx(Self, kJB_SyxThg, false))) and JB_Tree_IsLast(Self))) {
		return nil;
	}
	Message* P = ((Message*)JB_Ring_Parent(Self));
	if (!P) {
		return nil;
	}
	if ((JB_Msg_EqualsSyx(P, kJB_SyxRel, false))) {
		Message* Pr = ((Message*)JB_Ring_PrevSib(Self));
		if ((JB_Msg_SyntaxEquals(Pr, JB_LUB[468], true)) or ((JB_Msg_SyntaxEquals(Pr, JB_LUB[469], true)) or (JB_Msg_SyntaxEquals(Pr, JB_LUB[470], true)))) {
			return true;
		}
	}
	SCFunction* Pfn = SC_Msg_AsFunc(P);
	if (Pfn) {
		if (JB_Str_Equals(Pfn->Name, JB_LUB[468], true)) {
			return true;
		}
	}
	return false;
}

FatASM* SC_Msg_ADD(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Sh) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_ADD);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Sh));
	return Rz;
}

void SC_Msg_AddBefore(Message* Self, Message* Before, Message* NewItem) {
	if (Before) {
		(JB_Ring_PrevSibSet(Before, NewItem));
	}
	 else {
		JB_Tree_SyntaxAppend(Self, NewItem);
	}
}

FatASM* SC_Msg_ADDK(Message* Self, ASMReg R1, ASMReg R2, int K) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_ADDK);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, K));
	return Rz;
}

void SC_Msg_AddLinePositions(Message* Self) {
	Message* Path = nil;
	{
		Message* S = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while ((S) and (S != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(S)));
			if (JB_Msg_OperatorIn(S, kJB_SyxArg)) {
				Path = SC_Msg_NextPath(S, S, Path);
				(JB_Ring_PrevSibSet(S, JB_int_Msg(S->Position)));
			}
			S = _N_f2;
		};
		;
	};
}

void JB_Msg_Adj__(Message* Self, FastString* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if (F) {
		Message* L = ((Message*)JB_Ring_NextSib(F));
		if (L) {
			JB_FS_SyntaxAppend(Fs, F);
			JB_FS_AppendString(Fs, JB_LUB[354]);
			JB_FS_SyntaxAppend(Fs, L);
		}
	}
}

FatASM* SC_Msg_ADPK(Message* Self, ASMReg R1, ASMReg R2, int K) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_ADPK);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, K));
	return Rz;
}

int JB_Msg_After(Message* Self) {
	return Self->Position + Self->RangeLength;
}

void JB_Msg_AfterSet(Message* Self, int Value) {
	Self->RangeLength = (Value - Self->Position);
}

FatASM* SC_Msg_ALLO(Message* Self, ASMReg R1, int Align, int Amount) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_ALLO);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_NumInputSet(Rz, 1, Align));
	(SC_FAT_NumInputSet(Rz, 2, Amount));
	return Rz;
}

bool SC_Msg_AllowedMoveToInit(Message* Self) {
	Syntax Type = Self->Func;
	if ((Type == kJB_SyxDot) or ((Type == kJB_SyxSDot) or ((Type == kJB_SyxFunc) or ((Type == kJB_SyxRel) or (Type == kJB_SyxDecl))))) {
		return true;
	}
	if (SC_Msg_OperatorIsTmp(Self, JB_LUB[235])) {
		return true;
	}
	return false;
}

void SC_Msg_AlmostAppend(Message* Self, Message* V) {
	Message* S = ((Message*)JB_Ring_Last(Self));
	if (JB_Msg_EqualsSyx(S, kJB_SyxTmp, false)) {
		(JB_Ring_PrevSibSet(S, V));
	}
	 else {
		JB_Tree_SyntaxAppend(Self, V);
	}
}

Message* JB_Msg_Ancestor(Message* Self, Syntax F) {
	{
		Message* _LoopSrcf1 = ((Message*)JB_Ring_Parent(Self));
		Message* Ch = _LoopSrcf1;
		while (Ch) {
			if (JB_Msg_EqualsSyx(Ch, F, false)) {
				return Ch;
			}
			Ch = ((Message*)JB_Ring_Parent(Ch));
		};
		;
	}
	;
	return nil;
}

int SC_Msg_AndOrExpansionTest(Message* Self) {
	Message* Ln = ((Message*)JB_Ring_First(Self));
	if (JB_Msg_EqualsSyx(Self, kJB_SyxBra, false)) {
		return SC_Msg_AndOrExpansionTest(Ln);
	}
	if (!JB_Msg_EqualsSyx(Self, kJB_SyxRel, false)) {
		return 0;
	}
	Message* Op = ((Message*)JB_Ring_NextSib(Ln));
	if (JB_Msg_SyntaxEquals(Op, JB_LUB[241], false)) {
		return 0;
	}
	Message* Rn = ((Message*)JB_Ring_NextSib(Op));
	if (!Rn) {
		return 0;
	}
	int Ls = SC_Msg_AndOrExpansionTest(Ln);
	int Rs = SC_Msg_AndOrExpansionTest(Rn);
	int Bs = Ls | Rs;
	int Orand = 1;
	if ((JB_Msg_SyntaxEquals(Op, JB_LUB[251], false)) or (JB_Msg_SyntaxEquals(Op, JB_LUB[267], false))) {
		return Orand | Bs;
	}
	if (((Ls == 2) or (Ls == 0)) and (Rs == Orand)) {
		SC_Msg_BunchlessFix(Self);
		return -1;
	}
	return 2 + Bs;
}

bool SC_Msg_AOrBExpand(Message* Self) {
	if (!JB_Msg_OperatorIn(Self, kJB_SyxRel)) {
		return true;
	}
	JB_SetRef(Self->Name, JB_LUB[251]);
	Message* Rel = ((Message*)JB_Ring_Parent(Self));
	JB_Incr(Rel);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Rel, (&_usingf0));
	Message* F = ((Message*)JB_Ring_First(Rel));
	JB_Incr(F);
	Syntax Fn = F->Func;
	if (!JB_Ring_HasChildren(F)) {
		Message* List = JB_Msg_Msg(Rel, kJB_SyxList, JB_LUB[0]);
		JB_Incr(List);
		JB_Tree_SyntaxAppend(Rel, Self);
		Rel->Func = kJB_SyxFunc;
		JB_Msg_BecomeStr(Self, kJB_SyxPrm, JB_LUB[0]);
		JB_FreeIfDead(JB_Msg_Msg(Self, F->Func, F->Name));
		JB_Tree_SyntaxAppend(List, F);
		Message* _tmPf1 = ((Message*)JB_Ring_First(Rel));
		JB_Incr(_tmPf1);
		JB_Tree_SyntaxAppend(List, _tmPf1);
		JB_Decr(List);
		JB_Decr(_tmPf1);
	}
	 else {
		Message* P = SC_Msg_BunchFixPrepare(Rel);
		JB_Incr(P);
		Message* Subject = ((Message*)JB_Ring_First(P));
		JB_Incr(Subject);
		Message* Multi_opp = ((Message*)JB_Ring_NextSib(Subject));
		JB_Incr(Multi_opp);
		if (Multi_opp) {
			SC_Msg_RelFix(Rel, false);
			JB_FreeIfDead(SC_Msg_ReplaceWith(P, Rel));
			SC_Msg_BunchFixSub(Multi_opp, Subject, Rel);
		}
		JB_Decr(P);
		JB_Decr(Subject);
		JB_Decr(Multi_opp);
	}
	JB_Decr(F);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Rel);
	JB_Decr(Rel);
	JB_MsgPos_Destructor((&_usingf0));
	return true;
}

JB_String* SC_Msg_APICppProject(Message* Self) {
	SCFile* F = SC_Msg_File(Self);
	if (F) {
		JB_String* It = F->ExportName;
		if (JB_Str_Exists(It)) {
			return JB_Str_LowerCase(It);
		}
		SCImport* A = F->Proj;
		SCModule* B = A->Mod;
		JB_String* C = B->ExportName;
		if (JB_Str_Exists(C)) {
			return JB_Str_LowerCase(C);
		}
	}
	return JB_LUB[471];
}

void SC_Msg_AppendAllInto(Message* Self, Message* Dest) {
	while (JB_Ring_HasChildren(Self)) {
		(JB_Ring_LastSet(Dest, ((Message*)JB_Ring_First(Self))));
	};
}

void JB_Msg_AppendMacro(Message* Self, Macro* M, Array* Prms) {
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Self, (&_usingf0));
	{
		int _if1 = 0;
		while (true) {
			Message* R = ((Message*)JB_Array_Value(Prms, _if1));
			if (R == nil) {
				break;
			}
			(JB_Msg_SyntaxIsSet(R, kJB__MsgParseFlags_MacroMade, (!true)));
			(++_if1);
		};
	}
	;
	JB_Msg_MacroCopy(JB_Macro_Source(M), Self, Prms, Self);
	{
		int _if3 = 0;
		while (true) {
			Message* R = ((Message*)JB_Array_Value(Prms, _if3));
			if (R == nil) {
				break;
			}
			if (!JB_Msg_SyntaxIs(R, kJB__MsgParseFlags_MacroMade)) {
				JB_Msg_Fail(R, JB_LUB[1779]);
			}
			(++_if3);
		};
	}
	;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
	JB_MsgPos_Destructor((&_usingf0));
}

void JB_Msg_ARel__(Message* Self, FastString* Fs) {
	Message* _tmPf0 = ((Message*)JB_Ring_First(Self));
	JB_Incr(_tmPf0);
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendString(Fs, Self->Name);
}

Message* JB_Msg_Arg(Message* Self) {
	return JB_Msg_Last(Self, kJB_SyxArg);
}

void JB_Msg_Arg__(Message* Self, FastString* Fs) {
	bool Braces = (((Message*)JB_Ring_Parent(Self)) and (!JB_Msg_SyntaxIs(Self, kJB__MsgParseFlags_Style2))) or ((!JB_Ring_HasChildren(Self)) or (JB_Str_Exists(Self->Name) or (JB_Msg_OperatorIn(Self, kJB_SyxArg))));
	if (Braces) {
		JB_FS_AppendByte(Fs, '{');
	}
	JB_Msg_FSListArg(Self, Fs, Braces);
	if (Braces) {
		JB_FS_AppendIndent(Fs);
		JB_FS_AppendByte(Fs, '}');
		if (JB_Msg_EqualsSyx(((Message*)JB_Ring_Parent(Self)), kJB_SyxTmp, false)) {
			JB_FS_AppendByte(Fs, '\n');
		}
	}
	 else if (!((Message*)JB_Ring_Parent(Self))) {
		JB_FS_AppendByte(Fs, '\n');
	}
}

JB_String* JB_Msg_ArgName(Message* Self) {
	if (!JB_Msg_EqualsSyx(Self, kJB_SyxItem, false)) {
		return JB_LUB[0];
	}
	return JB_Str_LowerCase(JB_Msg_FirstName(Self));
}

JB_String* JB_Msg_ArgValue(Message* Self) {
	if ((JB_Msg_EqualsSyx(Self, kJB_SyxItem, false))) {
		JB_String* _tmP0 = JB_Msg_Name(((Message*)JB_Tree_Second(Self)));
		if (!JB_Str_Exists(_tmP0)) {
			_tmP0 = JB_LUB[31];
		}
		return _tmP0;
	}
	return Self->Name;
}

void JB_Msg_Arr__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '[');
	JB_Msg_FSListSep(Self, Fs, JB_LUB[10]);
	JB_FS_AppendByte(Fs, ']');
}

SCArg* SC_Msg_AsArg(Message* Self) {
	JB_Object* Obj = Self->Obj;
	if (JB_Object_FastIsa(Obj, &SCArgData)) {
		return ((SCArg*)Obj);
	}
	return nil;
}

SCDecl* SC_Msg_AsDecl(Message* Self) {
	JB_Object* Obj = Self->Obj;
	if (JB_Object_FastIsa(Obj, &SCDeclData)) {
		return ((SCDecl*)Obj);
	}
	return nil;
}

SCFunction* SC_Msg_AsFunc(Message* Self) {
	JB_Object* Obj = Self->Obj;
	if (JB_Object_FastIsa(Obj, &SCFunctionData)) {
		return ((SCFunction*)Obj);
	}
	return nil;
}

void JB_Msg_Ask__(Message* Self, FastString* Fs) {
	JB_Msg_BinnRender(Self, Fs, JB_LUB[500], JB_LUB[0]);
}

uint64 SC_Msg_ASMConst(Message* Self) {
	if ((JB_Msg_EqualsSyx(Self, kJB_SyxUnit, false))) {
		if (!JB_Msg_Expect(Self, kJB_SyxNil, JB_LUB[1044])) {
			return 0;
		}
		return JB_dbl_AsInt(JB_Msg_Float(((Message*)JB_Ring_First(Self))));
	}
	if (!JB_Msg_Expect(Self, kJB_SyxNum, nil)) {
		return 0;
	}
	if (JB_Str_ContainsByte(Self->Name, '.')) {
		return JB_f_AsInt(JB_Msg_Float32(Self));
	}
	return JB_Msg_Int(Self, 0);
}

SCDecl* SC_Msg_ASMDecl(Message* Self) {
	SCDecl* Rz = nil;
	Rz = SC_Msg_FastDecl(Self);
	if (SC_Decl_TypeOnly(Rz) == kJB__TC_UnusedType) {
		(SC_Decl_WholeTypeSet(Rz, ((DataTypeCode)SC_Decl_CalculateASMType(Rz))));
	}
	return Rz;
}

int SC_Msg_AsmIndent(Message* Self, Message* Top) {
	int Rz = 0;
	while (Self and (Self != Top)) {
		Rz = (Rz + ((JB_Msg_EqualsSyx(Self, kJB_SyxArg, false))));
		Self = ((Message*)JB_Ring_Parent(Self));
	};
	return Rz;
}

ASMType SC_Msg_ASMType(Message* Self) {
	return Self->Flags & 63;
}

void SC_Msg_ASMTypeSet(Message* Self, uint /*ASMType*/ Value) {
	Value = ((Self->Flags & (~63)) | Value);
	Self->Flags = Value;
}

Message* SC_Msg_ASMUnbra(Message* Self) {
	Syntax Fn = Self->Func;
	while ((Fn == kJB_SyxBra) or ((Fn == kJB_SyxType) and SC_Msg_TypeCastDoesNothing(Self))) {
		Self = ((Message*)JB_Ring_First(Self));
		Fn = Self->Func;
	};
	return Self;
}

void SC_Msg_AssignsFix(Message* Self, SCFunction* F) {
	Message* RP = SC_Msg_NiceParent(Self);
	JB_Incr(RP);
	Message* RightSide = ((Message*)JB_Ring_Last(RP));
	JB_Incr(RightSide);
	Message* List = ((Message*)JB_Ring_Last(Self));
	JB_Incr(List);
	Message* Upon = ((Message*)JB_Ring_First(Self));
	JB_Incr(Upon);
	JB_Tree_SyntaxAppend(List, RightSide);
	JB_Decr(RightSide);
	List->Func = kJB_SyxPrm;
	JB_Decr(List);
	Message* L = ((Message*)JB_Ring_Last(RP));
	JB_Incr(L);
	JB_Tree_Remove(L);
	SCClass* C = F->Cls;
	JB_Incr(C);
	if (F->ReturnType and (C and SC_Class_IsDataTypeOrFP(C))) {
		//using;
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Self, (&_usingf0));
		(JB_Ring_FirstSet(RP, L));
		Message* _tmPf1 = SC_Msg_FailOrCopy(Upon, RP);
		JB_Incr(_tmPf1);
		(JB_Ring_FirstSet(RP, _tmPf1));
		JB_Decr(_tmPf1);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
		JB_MsgPos_Destructor((&_usingf0));
	}
	 else {
		(SC_Msg_SpdFuncSet(RP, kJB_SyxBra));
	}
	JB_Decr(RP);
	JB_Decr(Upon);
	JB_Decr(L);
	JB_Decr(C);
}

int SC_Msg_Autocomplete_State(Message* Self) {
	int Rz = 0;
	JB_String* S = Self->Name;
	JB_Incr(S);
	Rz = (Rz + ((JB_Str_ContainsByte(S, 'R')) << 0));
	Rz = (Rz + ((JB_Str_ContainsByte(S, 'M')) << 1));
	Rz = (Rz + ((JB_Str_ContainsByte(S, 'C')) << 2));
	Rz = (Rz + ((JB_Str_ContainsByte(S, 'L')) << 3));
	JB_Decr(S);
	return Rz;
}

JB_String* SC_Msg_AutoCompleteDecl(Message* Self) {
	SCDecl* D = SC_Msg_MsgDecl(Self);
	if (D) {
		return SC_Decl_RenderTypeAndName(D, 1, nil);
	}
	return JB_Msg_Render(Self, nil);
}

SCFunction* SC_Msg_AutoMsgFuncFn(Message* Self) {
	SCFunction* Rz = nil;
	if (JB_Msg_EqualsSyx(Self, kJB_SyxName, false)) {
		SCClass* Cls = SC_Comp__SyntaxAccess(Self);
		if (Cls) {
			return Cls->ConstructorFunc;
		}
	}
	Message* Tmp = Self;
	if (!JB_Msg_EqualsSyx(Tmp, kJB_SyxTmp, false)) {
		Tmp = ((Message*)JB_Ring_Parent(Self));
		if (JB_Msg_EqualsSyx(Tmp, kJB_SyxDot, false)) {
			Tmp = ((Message*)JB_Ring_Parent(Tmp));
		}
	}
	if (JB_Msg_EqualsSyx(Tmp, kJB_SyxTmp, false)) {
		SCFunction* Fn = SC_Msg_AsFunc(Tmp);
		if (Fn) {
			return Fn;
		}
	}
	Rz = SC_Msg_MsgFunc(Self);
	if (!Rz) {
		Rz = SC_Msg_MsgFunc(((Message*)JB_Ring_Parent(Self)));
	}
	return Rz;
}

void SC_Msg_AvoidSafeDecr(Message* Self) {
	Message* Arg = ((Message*)JB_Ring_First(Self));
	Message* Decr = ((Message*)JB_Ring_PrevSib(((Message*)JB_Ring_Last(Arg))));
	Message* Prms = ((Message*)JB_Ring_Last(Decr));
	if (Prms) {
		if (Prms->Obj == SC__Comp_RefSafeDecr) {
			{
				Message* _t = ((Message*)JB_Ring_First(Prms));
				if (_t) {
					SC_Msg_BecomeNil(_t);
				}
			};
		}
	}
}

void JB_Msg_Back__(Message* Self, FastString* Fs) {
	if (JB_Ind_SyntaxCast(JB_Str_FindByte(Self->Name, '`', 0, JB_int__Max()))) {
		JB_Msg_Str__(Self, Fs);
	}
	 else {
		JB_FS_AppendByte(Fs, '`');
		JB_FS_AppendString(Fs, Self->Name);
		JB_FS_AppendByte(Fs, '`');
	}
}

void JB_Msg_Badj__(Message* Self, FastString* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if (F) {
		Message* L = ((Message*)JB_Ring_NextSib(F));
		if (L) {
			JB_FS_SyntaxAppend(Fs, L);
			JB_FS_AppendString(Fs, JB_LUB[355]);
			JB_FS_SyntaxAppend(Fs, F);
		}
	}
}

FatASM* SC_Msg_BAND(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Sh) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_BAND);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Sh));
	return Rz;
}

void JB_Msg_BecomeStr(Message* Self, Syntax Fn, JB_String* Name) {
	Self->Func = Fn;
	JB_SetRef(Self->Name, Name);
}

void JB_Msg_BecomeNum(Message* Self, int64 Num) {
	JB_Tree_Clear(Self);
	Self->Func = kJB_SyxNum;
	JB_SetRef(Self->Name, JB_int64_Render(Num, nil));
}

void JB_Msg_BecomeMsg(Message* Self, Message* Src) {
	JB_Msg_BecomeSub(Self, Src);
	JB_Tree_TakeAllFrom(Self, Src);
}

void SC_Msg_BecomeWithOpp(Message* Self, SCOperator* Op) {
	JB_SetRef(Self->Obj, Op);
	JB_SetRef(Self->Name, Op->Name);
}

void SC_Msg_BecomeWithFunc(Message* Self, SCFunction* Func) {
	Message* _tmPf0 = ((Message*)JB_Tree_Second(Self));
	JB_Incr(_tmPf0);
	JB_SetRef(_tmPf0->Obj, Func);
	JB_Decr(_tmPf0);
	JB_SetRef(Self->Obj, Func->ReturnType);
	(SC_Msg_ASMTypeSet(Self, kSC__ASMType_kRefCount));
}

void SC_Msg_BecomeAppend(Message* Self, JB_String* S) {
	Message* P = ((Message*)JB_Ring_Parent(Self));
	if (!JB_Msg_Expect(P, kJB_SyxRel, nil)) {
		return;
	}
	JB_Msg_BecomeStr(P, kJB_SyxDot, S);
	Self->Func = kJB_SyxPrm;
	Message* N = ((Message*)JB_Ring_NextSib(Self));
	if (JB_Msg_EqualsSyx(N, kJB_SyxList, false)) {
		JB_FreeIfDead(SC_Msg_ReplaceWith(Self, N));
		N->Func = kJB_SyxPrm;
	}
	 else {
		(JB_Ring_LastSet(Self, N));
	}
}

void JB_Msg_BecomeCopy(Message* Self, Message* Src) {
	JB_Msg_BecomeSub(Self, Src);
	JB_Msg_CopyAllInto(Src, Self);
}

void JB_Msg_BecomeMacro(Message* Self, Macro* M, Array* Prms) {
	Message* S = JB_Macro_Source(M);
	if (S) {
		JB_Tree_Clear(Self);
		Self->Func = S->Func;
		JB_SetRef(Self->Name, S->Name);
		JB_Msg_AppendMacro(Self, M, Prms);
	}
}

void SC_Msg_BecomeNil(Message* Self) {
	JB_SetRef(Self->Name, JB_LUB[36]);
	JB_SetRef(Self->Obj, SC_TypeNil);
	JB_Tree_Clear(Self);
}

void SC_Msg_BecomeSetRel(Message* Self) {
	Self->Func = kJB_SyxRel;
	(SC_Msg_ASMTypeSet(Self, kSC__ASMType_kSetRel));
}

void JB_Msg_BecomeSub(Message* Self, Message* Src) {
	Self->Func = Src->Func;
	JB_SetRef(Self->Name, Src->Name);
	JB_Tree_Clear(Self);
}

void SC_Msg_BecomeTarget(Message* Self) {
	Message* S = JB_Msg_NeedSyxInt(Self, kJB_SyxNil, 1);
	if (!S) {
		return;
	}
	JB_String* B = JB_bool_Render0(SC_Msg_TargetTest(S));
	JB_Msg_BecomeStr(Self, kJB_SyxThg, B);
}

FatASM* SC_Msg_BFLG(Message* Self, ASMReg R1, ASMReg R2, int Up, int Down, int Sign) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_BFLG);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, Up));
	(SC_FAT_NumInputSet(Rz, 3, Down));
	(SC_FAT_NumInputSet(Rz, 4, Sign));
	return Rz;
}

void JB_Msg_Bin__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[129]);
	JB_FS_AppendHexStr(Fs, Self->Name);
	JB_FS_AppendString(Fs, JB_LUB[130]);
}

void JB_Msg_binn__(Message* Self, FastString* Fs) {
	JB_Msg_BinnRender(Self, Fs, JB_LUB[509], JB_LUB[0]);
}

void JB_Msg_BinnRender(Message* Self, FastString* Fs, JB_String* Sepa, JB_String* Sepb) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if (!F) {
		return;
	}
	Message* Opp = ((Message*)JB_Ring_NextSib(F));
	if (!Opp) {
		return;
	}
	Message* L = ((Message*)JB_Ring_NextSib(Opp));
	Message* OF = ((Message*)JB_Ring_First(Opp));
	JB_FS_AppendString(Fs, Sepa);
	JB_FS_SyntaxAppend(Fs, ((Message*)JB_Ternary(OF, OF, Opp)));
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_SyntaxAppend(Fs, F);
	if ((!OF)) {
		return;
	}
	Message* ON = ((Message*)JB_Ring_NextSib(OF));
	if (ON) {
		JB_FS_AppendByte(Fs, ' ');
		JB_FS_SyntaxAppend(Fs, ON);
	}
	if (L) {
		JB_FS_AppendByte(Fs, ' ');
		JB_FS_SyntaxAppend(Fs, L);
	}
}

ErrorSeverity SC_Msg_Blind(Message* Self) {
	return JB_ErrorSeverity__Find(Self->Name, Self);
}

SCBlockage SC_Msg_Blocks(Message* Self) {
	if (Self) {
		return Self->Tag & kSC__SCBlockage_Bits;
	}
	return 0;
}

void SC_Msg_BlocksSet(Message* Self, int Value) {
	Self->Tag = ((Self->Tag & (~kSC__SCBlockage_Bits)) | Value);
}

FatASM* SC_Msg_BNAN(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Sh) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_BNAN);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Sh));
	return Rz;
}

FatASM* SC_Msg_BNOR(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Sh) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_BNOR);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Sh));
	return Rz;
}

FatASM* SC_Msg_BNOT(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Sh) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_BNOT);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Sh));
	return Rz;
}

FatASM* SC_Msg_BOR(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Sh) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_BOR);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Sh));
	return Rz;
}

void JB_Msg_Bra__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '(');
	Message* _tmPf0 = ((Message*)JB_Ring_First(Self));
	JB_Incr(_tmPf0);
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(Fs, ')');
}

SCDecl* SC_Msg_BraDeclfind(Message* Self) {
	SCDecl* Rz = nil;
	while (true) {
		SCDecl* D = SC_Msg_AsDecl(Self);
		if (D) {
			Rz = D;
		}
		Self = ((Message*)JB_Ring_Parent(Self));
		if (!JB_Msg_EqualsSyx(Self, kJB_SyxBra, false)) {
			break;
		}
	};
	return Rz;
}

void JB_Msg_BRel__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
	Message* _tmPf0 = ((Message*)JB_Ring_First(Self));
	JB_Incr(_tmPf0);
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
}

FatASM* SC_Msg_BSHL(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Sh) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_BSHL);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Sh));
	return Rz;
}

FatASM* SC_Msg_BSHR(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Sh) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_BSHR);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Sh));
	return Rz;
}

FatASM* SC_Msg_BSHS(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Sh) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_BSHS);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Sh));
	return Rz;
}

FatASM* SC_Msg_BSTT(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, ASMReg R4) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_BSTT);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_PrmWithIntReg(Rz, 3, R4));
	return Rz;
}

bool SC_Msg_BuildRunTask(Message* Self, Message* Fields, int Level) {
	Message* Prms = ((Message*)JB_Ring_First(Self));
	bool NoPrms = (!Prms) or (JB_Msg_EqualsSyx(Prms, kJB_SyxArg, false));
	if (NoPrms) {
		Prms = JB_Syx_Msg(kJB_SyxList, JB_LUB[0]);
		(JB_Ring_FirstSet(Self, Prms));
		if (Level == 3) {
			Message* Ss = ((Message*)JB_Ring_First(Fields));
			if (Ss) {
				JB_Tree_SyntaxAppend(Prms, JB_Msg_Copy(Ss, nil));
			}
		}
	}
	 else {
		Syntax Pf = JB_Msg_Func(Prms);
		if (!((Pf == kJB_SyxBra) or (Pf == kJB_SyxList))) {
			JB_Msg_Fail(Prms, nil);
			return nil;
		}
	}
	Message* Arg = ((Message*)JB_Ring_NextSib(Prms));
	if (Arg) {
		JB_Msg_Expect(Arg, kJB_SyxArg, nil);
		if (!JB_Msg_ExpectLast(Arg, JB_LUB[0])) {
			return nil;
		}
	}
	 else {
		Arg = JB_Msg_Msg(Self, kJB_SyxArg, JB_LUB[0]);
	}
	Message* P1 = ((Message*)JB_Ring_First(Prms));
	Message* Ff = ((Message*)JB_Ring_First(Fields));
	if (((JB_Msg_EqualsSyx(P1, kJB_SyxThg, false)) or (JB_Msg_EqualsSyx(P1, kJB_SyxDot, false))) and (JB_Msg_EqualsSyx(Ff, kJB_SyxSDot, false))) {
		JB_SetRef(Ff->Name, JB_LUB[1055]);
		Ff->Func = kJB_SyxThg;
	}
	Syntax F = JB_Msg_Func(P1);
	if (!((F == kJB_SyxThg) or (F == kJB_SyxDot))) {
		Message* Brah = JB_Syx_Msg(kJB_SyxBra, JB_LUB[0]);
		JB_Msg_AppendSyx(Brah, kJB_SyxThg, JB_LUB[1158]);
		(JB_Ring_FirstSet(Self, Brah));
		Message* Pr = ((Message*)JB_Ring_Parent(Self));
		Array* _tmPf0 = (JB_Array_Constructor0(nil));
		JB_Array_SyntaxAppend(_tmPf0, Prms);
		JB_Msg_AppendMacro(Pr, SC__SCTasks_TaskMacro, _tmPf0);
		Message* CallPrms = ((Message*)JB_Tree_FlatLast(Pr));
		JB_Msg_AppendSyx(CallPrms, kJB_SyxThg, JB_LUB[180]);
		{
			Message* P = ((Message*)JB_Ring_First(Prms));
			while (P) {
				Message* _Nf2 = ((Message*)JB_Ring_NextSib(P));
				Message* Ty = ((Message*)JB_Tree_Second(P));
				if (Ty) {
					JB_Tree_SyntaxAppend(CallPrms, JB_Msg_Copy(Ty, nil));
				}
				P = _Nf2;
			};
			;
		};
	}
	JB_SetRef(Self->Name, JB_LUB[537]);
	(JB_Ring_FirstSet(Self, JB_Syx_OperatorPlus(kJB_SyxThg, JB_LUB[1829])));
	return true;
}

void SC_Msg_BuildTask(Message* Self, Message* Fields, int Level) {
	Array* Runs = JB_Msg_FindAll(Self, kJB_SyxTmp, JB_LUB[1829]);
	JB_Incr(Runs);
	Message* Run = ((Message*)JB_Array_Value(Runs, 0));
	JB_Incr(Run);
	if (JB_Array_SyntaxCompare(Runs, 1, false) >= 1) {
		JB_Msg_Fail(Run, JB_LUB[1852]);
	}
	JB_Decr(Runs);
	if ((!Run)) {
		JB_Msg_Fail(Self, JB_LUB[1853]);
		JB_Decr(Run);
		return;
	}
	if (SC_Msg_BuildRunTask(Run, Fields, Level) and (!({
		Array* _tmPf1 = JB_Msg_FindAll(Self, kJB_SyxTmp, JB_LUB[949]);
		JB_Incr(_tmPf1);
		bool _tmPf0 = JB_Array_SyntaxCast(_tmPf1);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}))) {
		Message* _tmPf2 = JB_Str_ParseJbin(((JB_LUB[1854])), 1073741824);
		JB_Incr(_tmPf2);
		(JB_Ring_PrevSibSet(Run, _tmPf2));
		JB_Decr(_tmPf2);
	}
	JB_Decr(Run);
}

Message* SC_Msg_BunchFixPrepare(Message* Self) {
	Message* P = SC_Msg_NiceParent(Self);
	if (JB_Msg_EqualsSyx(P, kJB_SyxRel, false)) {
		return P;
	}
	return ((Message*)JB_Ring_Last(SC_Func__TypedTempMoveOut(Self, JB_LUB[0], nil)));
}

void SC_Msg_BunchFixSub(Message* Self, Message* Subject, Message* Stuff) {
	JB_Incr(Stuff);
	JB_Incr(Subject);
	while (Stuff) {
		Message* Test = (JB_Syx_Msg(kJB_SyxRel, JB_LUB[0]));
		JB_Incr(Test);
		JB_Tree_SyntaxAppend(Test, Subject);
		Message* _tmPf0 = JB_Msg_Copy(Self, nil);
		JB_Incr(_tmPf0);
		JB_Tree_SyntaxAppend(Test, _tmPf0);
		JB_Decr(_tmPf0);
		if (!JB_Msg_EqualsSyx(Stuff, kJB_SyxRel, false)) {
			JB_FreeIfDead(JB_Msg_ReplaceInto(Stuff, Test));
			JB_Decr(Test);
			break;
		}
		Message* R = ((Message*)JB_Tree_Get(Stuff, 2));
		JB_Incr(R);
		if (!R) {
			JB_Msg_Fail(Stuff, JB_LUB[908]);
			JB_Decr(Subject);
			JB_Decr(Stuff);
			JB_Decr(R);
			JB_Decr(Test);
			return;
		}
		Message* _tmPf1 = ((Message*)JB_Ring_First(Stuff));
		JB_Incr(_tmPf1);
		JB_FreeIfDead(JB_Msg_ReplaceInto(_tmPf1, Test));
		JB_Decr(Test);
		JB_Decr(_tmPf1);
		JB_SetRef(Stuff, R);
		JB_Decr(R);
		JB_SetRef(Subject, JB_Msg_Copy(Subject, nil));
	};
	JB_Decr(Stuff);
	JB_Decr(Subject);
}

void SC_Msg_BunchlessFix(Message* Self) {
	Message* Subject = ((Message*)JB_Ring_First(Self));
	JB_Incr(Subject);
	Message* Multi_opp = ((Message*)JB_Ring_NextSib(Subject));
	JB_Incr(Multi_opp);
	if (!Multi_opp) {
		JB_Decr(Multi_opp);
		JB_Decr(Subject);
		return;
	}
	Message* C = ((Message*)JB_Ring_NextSib(Multi_opp));
	JB_Incr(C);
	if (!C) {
		JB_Decr(C);
		JB_Decr(Multi_opp);
		JB_Decr(Subject);
		return;
	}
	JB_Msg_BecomeMsg(Self, C);
	JB_Decr(C);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Self, (&_usingf0));
	SC_Msg_BunchFixSub(Multi_opp, Subject, Self);
	JB_Decr(Subject);
	JB_Decr(Multi_opp);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
	JB_MsgPos_Destructor((&_usingf0));
}

FatASM* SC_Msg_BXOR(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Sh) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_BXOR);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Sh));
	return Rz;
}

bool SC_Msg_CanGetAddress(Message* Self, SCNode* Name_space) {
	Message* Curr = SC_Msg_UnBra(Self);
	if ((JB_Msg_EqualsSyx(Curr, kJB_SyxAcc, false))) {
		Message* F = ((Message*)JB_Ring_First(Curr));
		SCDecl* T = SC_TypeOfExpr(F, Name_space, nil);
		if (!T) {
			return nil;
		}
		bool _tmPf0 = (SC_Decl_IsNumeric(T) <= 1);
		if (!_tmPf0) {
			JB_Msg_Fail(Curr, JB_LUB[1285]);
			return nil;
		}
		return _tmPf0;
	}
	SCDecl* T2 = SC_TypeOfExpr(Curr, Name_space, nil);
	if (!T2) {
		return nil;
	}
	if (!((JB_Msg_EqualsSyx(Curr, kJB_SyxThg, false)) or (JB_Msg_EqualsSyx(Curr, kJB_SyxDot, false)))) {
		JB_Msg_Fail(Curr, JB_LUB[1286]);
		return nil;
	}
	if (SC_Decl_SyntaxIs(T2, kSC__SCDeclInfo_NumberConst)) {
		JB_Msg_Fail(Curr, JB_LUB[1287]);
		return nil;
	}
	if (((JB_Msg_EqualsSyx(Curr, kJB_SyxThg, false))) and SC_Decl_IsRegister(T2)) {
		Syntax F = SC_Msg_ParentForAddress(Self);
		if (!((F == kJB_SyxPrm) or (F == kJB_SyxDot))) {
			JB_Msg_Fail(Curr, JB_LUB[1288]);
			return nil;
		}
	}
	return true;
}

Message* SC_Msg_CastedParent(Message* Self) {
	Message* Rz = nil;
	Rz = ((Message*)JB_Ring_Parent(SC_Msg_UnBra(Self)));
	if (JB_Msg_EqualsSyx(Rz, kJB_SyxPrm, false)) {
		Rz = ((Message*)JB_Ring_Parent(Rz));
	}
	return Rz;
}

int SC_Msg_CastFPToVoidPtr(Message* Self) {
	Message* Cst = JB_Syx_OperatorPlus(kJB_SyxType, JB_LUB[534]);
	JB_Incr(Cst);
	(JB_Ring_PrevSibSet(Self, Cst));
	JB_Tree_SyntaxAppend(Cst, Self);
	Message* _tmPf0 = JB_Msg_Msg(Cst, kJB_SyxEmb, JB_LUB[0]);
	JB_Incr(_tmPf0);
	JB_SetRef(_tmPf0->Obj, SC_TypeVoidPtr);
	JB_Decr(_tmPf0);
	JB_SetRef(Cst->Obj, SC_TypeVoidPtr);
	JB_Decr(Cst);
	return kJB_kCastedMatch;
}

int SC_Msg_CastToBool(Message* Self, SCNode* Name_space) {
	return SC_Msg_CastToType(Self, JB_LUB[147], SC_TypeBool, Name_space, kJB_kLossyCastedMatch);
}

int SC_Msg_CastToClass(Message* Self, SCClass* Type, SCNode* Name_space) {
	return SC_Msg_CastToType(Self, Type->Name, Type, Name_space, kJB_kCastedMatch);
}

int SC_Msg_CastToType(Message* Self, JB_String* TypeName, SCClass* Type, SCNode* Name_space, int Loss) {
	if ((!Self)) {
		return kJB_kNeedsTypeCast | Loss;
	}
	SCDecl* FoundType = SC_TypeOfExpr(Self, Name_space, nil);
	JB_Incr(FoundType);
	if (FoundType) {
		if (SC_Class_IsStruct(FoundType->Type)) {
			if (!FoundType->PointerCount) {
				JB_Msg_Fail(Self, JB_LUB[1289]);
				JB_Decr(FoundType);
				return 0;
			}
		}
		if (((JB_Msg_EqualsSyx(Self, kJB_SyxType, false))) and (SC_Decl_IsNormal(FoundType) and (FoundType->Type == Type))) {
			JB_Decr(FoundType);
			return kJB_kSimpleMatch;
		}
	}
	JB_Decr(FoundType);
	Message* Cst = (JB_Syx_Msg(kJB_SyxType, JB_LUB[534]));
	JB_Incr(Cst);
	(JB_Ring_PrevSibSet(Self, Cst));
	JB_Tree_SyntaxAppend(Cst, Self);
	Message* _tmPf0 = JB_Msg_Msg(Cst, kJB_SyxThg, TypeName);
	JB_Incr(_tmPf0);
	JB_SetRef(_tmPf0->Obj, Type->TypeNormal);
	JB_Decr(_tmPf0);
	JB_SetRef(Cst->Obj, Type->TypeNormal);
	JB_Decr(Cst);
	return Loss;
}

Message* SC_Msg_CausesUnReachable(Message* Self, Message* Arg, Message* Dcl, Message* LastPlace) {
	Message* Curr = ((Message*)JB_Ternary(Dcl, Dcl, ((Message*)JB_Ring_First(Self))));
	while (Curr and (Curr != LastPlace)) {
		if ((JB_Msg_EqualsSyx(Curr, kJB_SyxTmp, false))) {
			JB_String* S = Curr->Name;
			if ((JB_Str_Equals(S, JB_LUB[239], false))) {
				return Curr;
			}
			if ((JB_Str_Equals(S, JB_LUB[473], false)) or (JB_Str_Equals(S, JB_LUB[474], false))) {
				if (SC_Refs__ExitHitsOrGoesPast(Curr, Arg)) {
					return Curr;
				}
			}
			 else if (((JB_Str_Equals(S, JB_LUB[240], false))) and (Self == Arg)) {
				return Curr;
			}
		}
		Curr = ((Message*)JB_Ring_NextSib(Curr));
	};
	return nil;
}

void JB_Msg_Char__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '\'');
	JB_String* _tmPf0 = JB_Str_EscapeChr(Self->Name);
	JB_Incr(_tmPf0);
	JB_FS_AppendString(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(Fs, '\'');
}

void SC_Msg_CheckConstShift(Message* Self, SCDecl* LC, SCDecl* RC, bool Bigger) {
	int64 Rk = RC->ExportPosition;
	if (Rk < 0) {
		JB_Msg_Fail(Self, JB_LUB[909]);
		return;
	}
	uint T = SC_Decl_TypeInfo(LC);
	int BC = JB_TC_BitCount(T);
	if (T == kJB__TC_bool) {
		if (Bigger) {
			BC = 32;
		}
		 else {
			BC = 1;
		}
	}
	if (Rk >= BC) {
		JB_Msg_Fail(Self, JB_LUB[910]);
		return;
	}
}

void SC_Msg_CheckContinuesAndExits(Message* Self) {
	{
		Message* Msg = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while ((Msg) and (Msg != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(Msg)));
			if ((JB_Msg_EqualsSyx(Msg, kJB_SyxTmp, false))) {
				if ((JB_Msg_SyntaxEquals(Msg, JB_LUB[252], false)) or (JB_Msg_SyntaxEquals(Msg, JB_LUB[176], false))) {
					Msg = ((Message*)JB_Ring_FlatAfter(Msg));
					continue;
				}
				 else if ((JB_Msg_SyntaxEquals(Msg, JB_LUB[474], false))) {
					SC_Msg_LoopContinue(Msg);
				}
				 else if ((JB_Msg_SyntaxEquals(Msg, JB_LUB[473], false))) {
					SC_Msg_LoopExit(Msg);
				}
			}
			Msg = _N_f2;
		};
		;
	};
}

void SC_Msg_CheckNotInStateExpr(Message* Self, Message* Top) {
	Message* Node = Self;
	while (Node and (Node != Top)) {
		if ((SC_Msg_IsStatementExpr(Node))) {
			JB_Msg_Fail(Self, JB_Str_OperatorPlus(JB_LUB[912], Self->Name));
		}
		Node = ((Message*)JB_Ring_Parent(Node));
	};
}

void SC_Msg_CheckSuperDotSave(Message* Self, JB_String* Name, bool ShouldBe) {
	bool Match = ((SC_Msg_OperatorIsDot(Self, Name)) and (({
		Message* _tmPf2 = ((Message*)JB_Ring_First(Self));
		JB_Incr(_tmPf2);
		bool _tmPf1 = SC_Msg_OperatorIsThing(_tmPf2, JB_LUB[913]);
		JB_Decr(_tmPf2);
		 _tmPf1;
	})));
	if (Match != ShouldBe) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[914]);
		JB_FS_AppendString(_fsf0, Name);
		JB_String* _tmPf3 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf3);
		JB_Decr(_fsf0);
		JB_Msg_SyntaxWarn(Self, _tmPf3);
		JB_Decr(_tmPf3);
	}
}

FatASM* SC_Msg_CLAM(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, ASMReg R4, int D) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_CLAM);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_PrmWithIntReg(Rz, 3, R4));
	(SC_FAT_NumInputSet(Rz, 4, D));
	return Rz;
}

void SC_Msg_Clean(Message* Self, bool Erl) {
	int Pos = JB__Tk_Using.Position;
	int Len = JB__Tk_Using.Length;
	uint Tag = JB__Tk_Using.Tag;
	Message* QEscape = nil;
	Message* IgnoreArg = nil;
	JB_Incr(IgnoreArg);
	if (JB_FreeIfDead(JB_Class_Layer((&MessageData))) == JB_FreeIfDead(JB_Class_DefaultLayer((&MessageData)))) {
		Pos = -1;
	}
	{
		Message* Curr = Self;
		JB_Incr(Curr);
		Message* _afterf2 = ((Message*)JB_Ring_FlatAfter(Self));
		JB_Incr(_afterf2);
		while ((Curr) and (Curr != _afterf2)) {
			Message* _N_f3 = (((Message*)JB_Ring_FlatNext0(Curr)));
			JB_Incr(_N_f3);
			if (Pos >= 0) {
				Curr->Position = Pos;
				Curr->RangeLength = Len;
				Curr->Tag = Tag;
			}
			if (Curr == QEscape) {
				QEscape = nil;
			}
			Syntax F = Curr->Func;
			if ((F != kJB_SyxBack) and ((F != kJB_SyxStr) and ((F != kJB_SyxSStr) and (F != kJB_SyxBin)))) {
				if ((JB_Str_ContainsString(Curr->Name, JB_LUB[1922]))) {
					JB_Msg_Fail(Curr, JB_LUB[1923]);
					JB_Decr(_N_f3);
					JB_Decr(_afterf2);
					JB_Decr(Curr);
					JB_Decr(IgnoreArg);
					return;
				}
			}
			if (F == kJB_SyxArg) {
				JB_SetRef(Curr->Name, JB_LUB[0]);
			}
			 else if ((F == kJB_SyxBack) or ((F == kJB_SyxSStr) or (F == kJB_SyxBin))) {
				Curr->Func = kJB_SyxStr;
			}
			 else if (F == kJB_SyxRel) {
				SC_Msg_RelFix(Curr, false);
			}
			 else if (Erl and (F == kJB_SyxERel)) {
				JB_SetRef(Curr->Name, JB_Str_LowerCase(Curr->Name));
				SC_Msg_FixErl(Curr);
			}
			 else if (F == kJB_SyxARel) {
				if ((!QEscape) and (JB_Msg_SyntaxEquals(Curr, JB_LUB[603], false))) {
					SC_Msg_Tran_QMark(Curr);
					JB_SetRef(Curr, ((Message*)JB_Ring_FlatNext0(Curr)));
					JB_Decr(_N_f3);
					continue;
				}
			}
			 else if (F == kJB_SyxBRel) {
				if (JB_Msg_SyntaxEquals(Curr, JB_LUB[242], false)) {
					SC_Comp__AddFunny(Self);
				}
			}
			 else if (F == kJB_SyxDecl) {
				Message* L = ((Message*)JB_Ring_Last(Curr));
				JB_Incr(L);
				if (JB_Msg_EqualsSyx(L, kJB_SyxArg, false)) {
					Message* Types = ((Message*)JB_Ring_First(Curr));
					JB_Incr(Types);
					Message* Names = ((Message*)JB_Ring_NextSib(Types));
					JB_Incr(Names);
					if (Types and (Names and (JB_FreeIfDead(((Message*)JB_Ring_NextSib(Names))) == L))) {
						SC_Msg_WithDeclTransform(L, Curr, Names, L);
					}
					JB_Decr(Types);
					JB_Decr(Names);
				}
				JB_Decr(L);
				Message* _tmPf4 = ((Message*)JB_Ring_First(Curr));
				JB_Incr(_tmPf4);
				QEscape = ((Message*)JB_Ring_FlatAfter(_tmPf4));
				JB_Decr(_tmPf4);
			}
			 else if ((F == kJB_SyxOpp) or ((F == kJB_SyxCnj) or (F == kJB_SyxERel))) {
				if (JB_Msg_SyntaxEquals(Curr, JB_LUB[1924], false)) {
					(JB_Msg_SyntaxProblem(Curr, JB_LUB[1925]));
					JB_SetRef(Curr->Name, JB_LUB[1204]);
				}
				 else if (JB_Msg_SyntaxEquals(Curr, JB_LUB[1926], false)) {
					(JB_Msg_SyntaxProblem(Curr, JB_LUB[1927]));
					JB_SetRef(Curr->Name, JB_LUB[1928]);
				}
				 else if (JB_Msg_SyntaxEquals(Curr, JB_LUB[1929], false)) {
					SC_Msg_BecomeAppend(Curr, JB_LUB[1278]);
				}
				 else if (JB_Msg_SyntaxEquals(Curr, JB_LUB[1930], false)) {
					SC_Msg_BecomeAppend(Curr, JB_LUB[1931]);
				}
				 else if (SC_Msg_OppExpand(Curr)) {
					0;
				}
				 else if (JB_CS_HasChar(JB__Constants_CSWordStart, JB_Str_First(Curr->Name))) {
					JB_SetRef(Curr->Name, JB_Str_LowerCase(Curr->Name));
				}
			}
			 else if (F == kJB_SyxAdj) {
				Message* _tmPf5 = ((Message*)JB_Ring_First(Curr));
				JB_Incr(_tmPf5);
				if (JB_Msg_SyntaxEquals(_tmPf5, JB_LUB[1343], true)) {
					SC_Msg_BecomeTarget(Curr);
				}
				JB_Decr(_tmPf5);
			}
			 else if (F == kJB_SyxTmp) {
				if (JB_FreeIfDead(((Message*)JB_Ring_Parent(Curr))) != IgnoreArg) {
					JB_String* S = JB_Str_LowerCase(Curr->Name);
					JB_Incr(S);
					JB_SetRef(Curr->Name, S);
					if ((JB_Str_Equals(S, JB_LUB[175], false)) or ((JB_Str_Equals(S, JB_LUB[445], false)) or (JB_Str_Equals(S, JB_LUB[1932], false)))) {
						SC_Msg_FixElseif(Curr);
					}
					 else if (JB_Str_Equals(S, JB_LUB[1343], false)) {
						JB_SetRef(Curr, SC_Msg_Tran_Target(Curr));
						JB_Decr(S);
						JB_Decr(_N_f3);
						continue;
					}
					 else if ((JB_Str_Equals(S, JB_LUB[1293], false)) or (JB_Str_Equals(S, JB_LUB[1296], false))) {
						SC_Msg_Tran_Isnt(Curr, JB_LUB[180]);
					}
					 else if (SC__SC_UniqueNum and SC_AutoComplete__IsAFunc(S)) {
						SC__SC_UniqueNum = 0;
					}
					 else if ((JB_Str_Equals(S, JB_LUB[1038], false)) or ((JB_Str_Equals(S, JB_LUB[1123], false)) or ((JB_Str_Equals(S, JB_LUB[1079], false)) or (JB_Str_Equals(S, JB_LUB[1933], false))))) {
						JB_SetRef(IgnoreArg, ((Message*)JB_Ring_Last(Curr)));
					}
					 else if (JB_Str_Equals(S, JB_LUB[1298], false)) {
						SC_Msg_Tran_With(Curr);
					}
					 else if (JB_Str_Equals(S, JB_LUB[1934], false)) {
						if (SC__Options_IsDirectTest) {
							JB_SetRef(Curr->Name, JB_LUB[175]);
							//using;
							MessagePosition _usingf0 = ((MessagePosition){});
							JB_Msg_SyntaxUsing(Curr, (&_usingf0));
							Message* _tmPf6 = JB_Syx_Msg(kJB_SyxThg, JB_LUB[31]);
							JB_Incr(_tmPf6);
							(JB_Ring_FirstSet(Curr, (_tmPf6)));
							JB_Decr(_tmPf6);
							JB_MsgPos_SyntaxUsingComplete((&_usingf0), Curr);
							JB_MsgPos_Destructor((&_usingf0));
						}
						 else {
							JB_SetRef(Curr->Name, JB_LUB[467]);
						}
					}
					JB_Decr(S);
				}
			}
			JB_SetRef(Curr, _N_f3);
			JB_Decr(_N_f3);
		};
		JB_Decr(Curr);
		JB_Decr(_afterf2);
		;
	}
	;
	JB_Decr(IgnoreArg);
}

int JB_Msg_CleanIndent(Message* Self) {
	return Self->Indent & (~1);
}

Message* SC_Msg_CmdImprove(Message* Self) {
	if (!JB_Msg_EqualsSyx(Self, kJB_SyxRel, false)) {
		return Self;
	}
	Message* Ch = ((Message*)JB_Ring_First(Self));
	if (JB_Msg_EqualsSyx(Ch, kJB_SyxFunc, false)) {
		return Ch;
	}
	return Self;
}

FatASM* SC_Msg_CMPB(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Inv) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_CMPB);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Inv));
	return Rz;
}

FatASM* SC_Msg_CMPF(Message* Self, ASMReg R1, ASMReg R2, int Cmp, int Jmp) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_CMPF);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, Cmp));
	(SC_FAT_JumpInputSet(Rz, 3, Jmp));
	if (((Jmp << 21) >> 21) != Jmp) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1045]);
		}
	}
	return Rz;
}

FatASM* SC_Msg_CMPI(Message* Self, ASMReg R1, ASMReg R2, int Cmp, int Jmp) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_CMPI);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, Cmp));
	(SC_FAT_JumpInputSet(Rz, 3, Jmp));
	if (((Jmp << 21) >> 21) != Jmp) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1045]);
		}
	}
	return Rz;
}

void JB_Msg_Cnj__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '#');
	JB_FS_AppendString(Fs, Self->Name);
}

FatASM* SC_Msg_CNTC(Message* Self, ASMReg R1, ASMReg R2, int Offset, int Cnst, int Size) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_CNTC);
	SC_FAT_Dest(Rz, 0, R1);
	SC_FAT_Dest(Rz, 1, R2);
	(SC_FAT_NumInputSet(Rz, 2, Offset));
	(SC_FAT_NumInputSet(Rz, 3, Cnst));
	(SC_FAT_NumInputSet(Rz, 4, Size));
	return Rz;
}

FatASM* SC_Msg_CNTD(Message* Self, ASMReg R1, ASMReg R2, int Offset, int Cnst, int Size) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_CNTD);
	SC_FAT_Dest(Rz, 0, R1);
	SC_FAT_Dest(Rz, 1, R2);
	(SC_FAT_NumInputSet(Rz, 2, Offset));
	(SC_FAT_NumInputSet(Rz, 3, Cnst));
	(SC_FAT_NumInputSet(Rz, 4, Size));
	return Rz;
}

bool SC_Msg_CollectAGlobalDecl(Message* Self, SCNode* Scarg) {
	SCFile* F = SC_Msg_File(Self);
	if (F) {
		JB_Mem_Use(F->Proj->DeclLayer);
	}
	SCDecl* Dcl = SC_Msg_CollectDecl(Self, Scarg, Scarg, kSC__DeclMode_Globals, nil, nil);
	if (!Dcl) {
		return nil;
	}
	Message* Def = Dcl->Default;
	if (Def and (!SC_Decl_NilStated(Dcl))) {
		SCDecl* D = SC_Msg_MsgDecl(Def);
		if (D and SC_Decl_StatedReal(D)) {
			Dcl->NilDeclared = kSC__NilState_Real;
		}
	}
	(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Property, true));
	(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Global, true));
	bool B = '_' == JB_Str_First(Dcl->Name);
	bool C = '_' == JB_Str_Last(Dcl->Name, 0);
	if (B | C) {
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Hidden, true));
	}
	if (SC_Decl_IsLib(Dcl)) {
		JB_Array_SyntaxAppend(SC__PackMaker_LibGlobs, Dcl);
	}
	 else {
		if (SC__Options_ModePack or SC__Comp_InPerry) {
			JB_Array_SyntaxAppend(SC__PackMaker_PackGlobs, Dcl);
		}
	}
	return true;
}

Message* SC_Msg_CollectDclName(Message* Self) {
	if (Self) {
		Message* Thg = Self;
		if (JB_Msg_EqualsSyx(Thg, kJB_SyxRel, false)) {
			Thg = ((Message*)JB_Ring_First(Thg));
		}
		if (JB_Msg_EqualsSyx(Thg, kJB_SyxThg, false)) {
			return Thg;
		}
		if (true) {
			JB_Msg_Fail(Self, nil);
		}
	}
	return nil;
}

SCDecl* SC_Msg_CollectDecl(Message* Self, SCNode* P, SCNode* Recv, DeclMode Mode, SCClass* Cls, SCFunction* FuncPrmz) {
	Message* Type = ((Message*)JB_Ring_First(Self));
	Message* Name = ((Message*)JB_Ring_NextSib(Type));
	if (!(FuncPrmz or Name)) {
		JB_Msg_Fail(Self, JB_LUB[1755]);
		return nil;
	}
	Message* Default = SC_DeclsDefault(Name);
	JB_Incr(Default);
	SCDecl* Sdcl = SC_ExtractDecl(Type, P, Mode, 0);
	JB_Incr(Sdcl);
	if ((!Sdcl) and ((!Default) and (JB_Object_FastIsa(P, &SCArgData)))) {
		JB_SetRef(Sdcl, ((SCArg*)P)->ParentFunc->ReturnType);
	}
	Message* NameItm = SC_Msg_CollectDclName(Name);
	SCDecl* DefaultDcl = nil;
	if (FuncPrmz) {
		0;
	}
	 else if (Default and (!SC_DeclMode_SyntaxIs(Mode, kSC__DeclMode_Properties))) {
		DefaultDcl = SC_TypeOfExprNeeded(Default, P);
		if (!DefaultDcl) {
			JB_Decr(Sdcl);
			JB_Decr(Default);
			return nil;
		}
		DefaultDcl = SC_Decl_DownGrade(DefaultDcl);
		if (Sdcl) {
			JB_SetRef(Default, SC_Decl_ExpectMatchForDecl(Sdcl, DefaultDcl, Default));
		}
	}
	 else if (((!Cls)) and ((Sdcl) and (SC_Decl_CanUseDefault(Sdcl)))) {
		JB_SetRef(Default, SC_Decl_CreateDefault(Sdcl, Type, Mode >= 4));
		if (Default) {
			JB_FreeIfDead(SC_TypeOfExpr(Default, P, nil));
			Name = SC_DefaultStitch(Default, Self);
		}
	}
	bool NoOriginalDcl = false;
	if (!Sdcl) {
		NoOriginalDcl = true;
		if ((Cls) and (Cls->Contained)) {
			JB_SetRef(Sdcl, Cls->Contained);
		}
		 else {
			if (!((!FuncPrmz) and DefaultDcl)) {
				JB_StringC* _tmPf0 = ((JB_StringC*)JB_Ternary((!FuncPrmz), JB_LUB[1756], JB_LUB[1757]));
				JB_Incr(_tmPf0);
				JB_Msg_Fail(Self, _tmPf0);
				JB_Decr(_tmPf0);
				JB_Decr(Sdcl);
				JB_Decr(Default);
				return nil;
			}
			JB_SetRef(Sdcl, DefaultDcl);
		}
	}
	if (SC_Decl_NeedsContainedfix(Sdcl)) {
		JB_SetRef(Sdcl, SC_Decl_Containedfix(Sdcl));
	}
	SCDecl* Dcl = SC_Decl_CopyDeclsStructFixer(Sdcl, Self, Mode * (NameItm != nil), Type);
	JB_Incr(Dcl);
	JB_SetRef(Dcl->Source, Self);
	if (!NameItm) {
		if (!JB_Tree_IsLast(Self)) {
			JB_Msg_Fail(Self, JB_LUB[1758]);
		}
		if (!FuncPrmz) {
			JB_Decr(Dcl);
			JB_Decr(Sdcl);
			JB_Decr(Default);
			return nil;
		}
		if (SC_Func_CollectReturnAsReal(FuncPrmz)) {
			Dcl->NilDeclared = kSC__NilState_Real;
		}
		if (SC_Decl_IsCArray(Dcl)) {
			JB_Msg_Fail(Self, JB_LUB[1759]);
		}
		JB_SetRef(FuncPrmz->ReturnType, Dcl);
		if ((!SC_Decl_IsBareStruct(Dcl)) or SC_Func_SyntaxIs(FuncPrmz, kSC__FunctionType_Constructor)) {
			SC_Func_AddTypeInfo(FuncPrmz, Dcl);
			JB_Decr(Dcl);
			JB_Decr(Sdcl);
			JB_Decr(Default);
			return nil;
		}
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_ReturnedStruct, true));
		JB_SetRef(Dcl, SC_Decl_GetAddress(Dcl, kSC__DeclMode_Always));
		NameItm = JB_Msg_Msg(Self, kJB_SyxThg, JB_LUB[1302]);
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_IntendedAsReturn, true));
		FuncPrmz->StructReturnPos = (JB_Array_Size(FuncPrmz->Args) + 1);
	}
	if (!Default) {
		JB_Msg_ExpectLast(Name, JB_LUB[0]);
	}
	if (!SC_DeclMode_SyntaxIs(Mode, kSC__DeclMode_Properties)) {
		JB_SetRef(NameItm->Obj, Dcl);
	}
	if ((Mode & 8) and NoOriginalDcl) {
		if (!SC_Decl_SyntaxIs(Sdcl, kSC__SCDeclInfo_StayBorrowed)) {
			(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Borrowed, (!true)));
		}
		Dcl->NilDeclared = (kSC__NilState_Real >> SC_Decl_TypeSuffers(Dcl));
	}
	JB_Decr(Sdcl);
	if (JB_Msg_OperatorIn(NameItm, kJB_SyxRel)) {
		Message* _tmPf1 = ((Message*)JB_Ring_Parent(NameItm));
		JB_Incr(_tmPf1);
		JB_SetRef(_tmPf1->Obj, Dcl);
		JB_Decr(_tmPf1);
	}
	JB_SetRef(Self->Obj, Dcl);
	JB_SetRef(Type->Obj, Dcl);
	JB_SetRef(Dcl->Default, Default);
	(SC_Decl_NameSet(Dcl, NameItm->Name));
	(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Const, (!true)));
	if (Default and DefaultDcl) {
		SC_Decl_AssignabilityCheck(Dcl, nil, Default, DefaultDcl, false);
	}
	JB_Decr(Default);
	if (Recv) {
		SC_Base_TryAdd(Recv, Self, Dcl, Dcl->Name);
	}
	JB_SafeDecr(Dcl);
	return Dcl;
}

void SC_Msg_CollectFromBody(Message* Self, SCNode* SCArg) {
	if (Self->Obj) {
		return;
	}
	SCDecl* Dcl = SC_Msg_CollectDecl(Self, SCArg, SCArg, kSC__DeclMode_FunctionBody, nil, nil);
	if (Dcl) {
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Body, true));
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Altered, (!true)));
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_NumberConst, (!true)));
		SC_PA__PostStructFix();
		Message* Def = Dcl->Default;
		if (Def) {
			if (!((!JB_Msg_EqualsSyx(Def, kJB_SyxThg, false)) or (!JB_Str_Equals(Def->Name, Dcl->Name, true)))) {
				JB_Msg_Fail(Def, JB_LUB[1799]);
			}
		}
	}
}

JB_String* SC_Msg_CollectFuncTableName(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, kJB_SyxName, false)) {
		return JB_Str_UpperCase(Self->Name);
	}
	if (JB_Str_Exists(Self->Name) and (!JB_Msg_EqualsSyx(Self, kJB_SyxDot, false))) {
		return Self->Name;
	}
	return JB_Msg_FirstName(Self);
}

Message* SC_Msg_CollectionPlace(Message* Self) {
	Message* Msg = Self;
	JB_Incr(Msg);
	while (Msg) {
		Message* P = ((Message*)JB_Ring_Parent(Msg));
		JB_Incr(P);
		if ((JB_Msg_EqualsSyx(Msg, kJB_SyxArg, false))) {
			if (!P) {
				JB_Decr(P);
				JB_SafeDecr(Msg);
				return Msg;
			}
			if (SC_Msg_OperatorIsTmp(P, JB_LUB[169]) or SC_Msg_OperatorIsTmp(P, JB_LUB[166])) {
				JB_Decr(P);
				JB_SafeDecr(Msg);
				return Msg;
			}
		}
		JB_SetRef(Msg, P);
		JB_Decr(P);
	};
	JB_Decr(Msg);
	return nil;
}

bool SC_Msg_CollectOneParam(Message* Self, SCFunction* Func, SCNode* Recv, SCClass* Cls) {
	if ((Func->IsAssigns == 2) and JB_Tree_IsLast(Self)) {
		if (!Cls) {
			if (true) {
				JB_Msg_Fail(Self, JB_LUB[1800]);
			}
		}
		 else {
			Func->IsAssigns = 3;
			if (SC_Class_IsDataTypeOrFP(Cls)) {
				(JB_Ring_NextSibSet(Self, JB_Msg_Copy(Self, nil)));
			}
			SC_Msg_AddValue(Self, Func);
		}
	}
	if ((JB_Msg_EqualsSyx(Self, kJB_SyxItem, false)) and (JB_Msg_SyntaxEquals(((Message*)JB_Ring_First(Self)), JB_LUB[1801], false))) {
		Self = ((Message*)JB_Ring_Last(Self));
		Func->IsAssigns = 1;
		SC_Msg_AddValue(Self, Func);
	}
	if (!JB_Msg_Expect(Self, kJB_SyxDecl, nil)) {
		return nil;
	}
	SCDecl* Dcl = SC_Msg_CollectDecl(Self, Func, Recv, kSC__DeclMode_FuncParam, Cls, Func);
	if (!Dcl) {
		return nil;
	}
	if (SC_Msg_OperatorIsThing(Dcl->Default, JB_LUB[36])) {
		Dcl->NilDeclared = kSC__NilState_Optional;
	}
	if (Dcl->PointerCount) {
		int N = (JB_Array_Size(Func->Args) + (SC_Func_SyntaxIs(Func, kSC__FunctionType_Constructor)));
		Func->AltersParams = (Func->AltersParams | (1 << N));
	}
	JB_Array_SyntaxAppend(Func->Args, Dcl);
	if (JB_Array_SyntaxCompare(Func->Args, 8, false) >= 1) {
		JB_Msg_Fail(Self, JB_LUB[1802]);
	}
	if (JB_Str_Exists(Dcl->Name)) {
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Param, true));
	}
	 else {
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Return, true));
	}
	(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Altered, (!true)));
	(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_NumberConst, (!true)));
	SC_Func_AddTypeInfo(Func, Dcl);
	return true;
}

JB_String* SC_Msg_CollectUsage(Message* Self) {
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, JB_LUB[1121]);
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		JB_Incr(Ch);
		while (Ch) {
			Message* _Nf2 = (((Message*)JB_Ring_NextSib(Ch)));
			JB_Incr(_Nf2);
			if (JB_Msg_Expect(Ch, kJB_SyxDecl, nil)) {
				if (!JB_Tree_IsFirst(Ch)) {
					JB_FS_AppendString(Fs, JB_LUB[281]);
				}
				Message* Name = SC_Msg_DeclName(Ch);
				JB_Incr(Name);
				Message* _tmPf3 = ((Message*)JB_Ring_First(Ch));
				JB_Incr(_tmPf3);
				bool Optional = ((JB_Msg_EqualsSyx(_tmPf3, kJB_SyxRel, false)));
				JB_Decr(_tmPf3);
				if (Optional) {
					JB_FS_AppendByte(Fs, '[');
				}
				Message* Ty = ((Message*)JB_Ring_First(Ch));
				JB_Incr(Ty);
				JB_FS_SyntaxAppend(Fs, Name);
				JB_Decr(Name);
				Syntax Tyfn = Ty->Func;
				if (Tyfn == kJB_SyxArr) {
					JB_SetRef(Ty, ((Message*)JB_Ring_First(Ty)));
				}
				JB_String* Type = JB_Msg_Name(Ty);
				JB_Incr(Type);
				JB_Decr(Ty);
				if (JB_Str_ContainsString(Type, JB_LUB[483])) {
					JB_SetRef(Type, JB_LUB[978]);
				}
				 else if (!JB_Str_Equals(Type, JB_LUB[102], true)) {
					//;
					JB_FS_AppendString(Fs, JB_LUB[164]);
					JB_FS_AppendString(Fs, Type);
					JB_FS_AppendByte(Fs, ')');
					//;
				}
				JB_Decr(Type);
				if (Optional) {
					JB_FS_AppendByte(Fs, ']');
				}
				if (Tyfn == kJB_SyxArr) {
					JB_FS_AppendString(Fs, JB_LUB[1122]);
				}
			}
			JB_SetRef(Ch, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(Ch);
		;
	}
	;
	JB_String* _tmPf4 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf4);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

Message* JB_Msg_ConfArg(Message* Self) {
	if ((JB_Msg_EqualsSyx(Self, kJB_SyxArg, false)) or (Self == nil)) {
		return Self;
	}
	Message* W = ((Message*)JB_Ternary((JB_Msg_EqualsSyx(Self, kJB_SyxTmp, false)), ((Message*)JB_Ring_Last(Self)), ((Message*)JB_Ring_NextSib(Self))));
	if (JB_Msg_EqualsSyx(W, kJB_SyxArg, false)) {
		return W;
	}
	return nil;
}

void SC_Msg_ConfTake(Message* Self, Message* Dest, JB_String* Name) {
	Message* F = JB_Msg_GetConf(Self, Name, false);
	if (F) {
		JB_Tree_TakeAllFrom(Dest, F);
		JB_Tree_Remove(((Message*)JB_Ring_Parent(F)));
	}
}

Message* SC_Msg_ConstantExpandSub(Message* Self) {
	Message* Rz = nil;
	JB_Incr(Rz);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Self, (&_usingf0));
	{
		Message* Item = ((Message*)JB_Ring_First(Self));
		JB_Incr(Item);
		while (Item) {
			Message* _Nf2 = (((Message*)JB_Ring_NextSib(Item)));
			JB_Incr(_Nf2);
			if (Rz) {
				Message* _tmPf3 = JB_Msg_Copy(Item, nil);
				JB_Incr(_tmPf3);
				JB_SetRef(Rz, SC_NewRel(Rz, _tmPf3, JB_LUB[284]));
				JB_Decr(_tmPf3);
			}
			 else {
				JB_SetRef(Rz, JB_Msg_Copy(Item, nil));
			}
			JB_SetRef(Item, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(Item);
		;
	}
	;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Msg_ConstIntValue(Message* Self, SCNode* Name_space, int64* V) {
	if (SC_Msg_ConstIntValueSub(Self, V)) {
		return true;
	}
	SCDecl* T = SC_TypeOfExpr(Self, Name_space, nil);
	if (T) {
		Message* D = T->Default;
		if (D) {
			return SC_Msg_ConstIntValueSub(D, V);
		}
	}
	return false;
}

bool SC_Msg_ConstIntValueSub(Message* Self, int64* V) {
	Message* S = Self;
	while (JB_Msg_EqualsSyx(S, kJB_SyxBra, false)) {
		S = ((Message*)JB_Ring_First(S));
	};
	if (JB_Msg_EqualsSyx(S, kJB_SyxNum, false)) {
		V[0] = JB_Msg_Int(S, 0);
		return true;
	}
	if (((JB_Msg_EqualsSyx(S, kJB_SyxThg, false))) and JB_Str_MidEquals(S->Name, 0, JB_LUB[1046], false)) {
		SyntaxObj* Find = ((SyntaxObj*)JB_Dict_ValueLower(JB__Constants__SyxDict, JB_Str_Range(S->Name, (3), JB_int__Max())));
		if (Find) {
			V[0] = ((int64)Find->ID);
			JB_Msg_BecomeStr(S, kJB_SyxNum, JB_int64_Render(V[0], nil));
			return true;
		}
	}
	return false;
}

Message* JB_Msg_ConstructorCopy(Message* Self, Message* Other) {
	if (Self == nil) {
		Self = ((Message*)JB_NewClass(&MessageData));
	}
	JB_Ring_Constructor0(Self);
	(++JB__Tk_CountStats);
	Self->Position = Other->Position;
	JB_Incr2(Self->Name, Other->Name);
	Self->Func = Other->Func;
	JB_Incr2(Self->Obj, Other->Obj);
	Self->Indent = Other->Indent;
	Self->Flags = (Other->Flags | JB__Tk_Using.Flags);
	Self->RangeLength = Other->RangeLength;
	Self->Tag = Other->Tag;
	return Self;
}

Message* JB_Msg_ConstructorEmpty(Message* Self) {
	if (Self == nil) {
		Self = ((Message*)JB_NewClass(&MessageData));
	}
	JB_Ring_Constructor0(Self);
	JB_Incr2(Self->Name, JB_LUB[0]);
	Self->Indent = 0;
	(++JB__Tk_CountStats);
	Self->Func = kJB_SyxArg;
	Self->Position = JB__Tk_Using.Position;
	Self->Flags = JB__Tk_Using.Flags;
	Self->RangeLength = JB__Tk_Using.Length;
	Self->Tag = JB__Tk_Using.Tag;
	return Self;
}

Message* JB_Msg_ConstructorNormal(Message* Self, Syntax Func, JB_String* Name) {
	if (Self == nil) {
		Self = ((Message*)JB_NewClass(&MessageData));
	}
	JB_Ring_Constructor0(Self);
	Self->Indent = 0;
	(++JB__Tk_CountStats);
	JB_Incr2(Self->Name, Name);
	Self->Func = Func;
	Self->Position = JB__Tk_Using.Position;
	Self->Flags = JB__Tk_Using.Flags;
	Self->RangeLength = JB__Tk_Using.Length;
	Self->Tag = JB__Tk_Using.Tag;
	return Self;
}

Message* JB_Msg_ConstructorRange(Message* Self, Message* Parent, Syntax Func, int BytePos, JB_String* Name, int RangeLength) {
	if (Self == nil) {
		Self = ((Message*)JB_NewClass(&MessageData));
	}
	JB_Ring_Constructor(Self, Parent);
	Self->Indent = 0;
	(++JB__Tk_CountStats);
	JB_Incr2(Self->Name, Name);
	Self->Position = BytePos;
	Self->Func = Func;
	Self->RangeLength = RangeLength;
	Self->Flags = JB__Tk_Using.Flags;
	Self->Tag = JB__Tk_Using.Tag;
	return Self;
}

void SC_Msg_ConstructorAddNil(Message* Self, bool Isdot) {
	if (Isdot) {
		Message* P = ((Message*)JB_Ring_Parent(Self));
		(JB_Ring_FirstSet(Self, ((Message*)JB_Ring_First(P))));
		Self = P;
	}
	(JB_Ring_FirstSet(Self, SC_Msg_CreateNil(Self)));
}

bool JB_Msg_ContainsInd(Message* Self, Ind P, bool AllowJustAfter) {
	return (Self->Position <= P) and ((JB_Msg_After(Self) + AllowJustAfter) > P);
}

FatASM* SC_Msg_CONV(Message* Self, ASMReg R1, ASMReg R2, int Mode) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_CONV);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, Mode));
	return Rz;
}

Message* JB_Msg_Copy(Message* Self, Message* Pos_msg) {
	Message* Rz = nil;
	Rz = ((Message*)JB_Ternary(Pos_msg, Pos_msg, Self));
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Rz, (&_usingf0));
		Rz = JB_Msg_CopySub(Self, Pos_msg);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Rz);
		JB_MsgPos_Destructor((&_usingf0));
	}
	return Rz;
}

void SC_Msg_CopyAllAfter(Message* Self, Message* After, Message* Copylayer) {
	Message* Curr = ((Message*)JB_Ring_NextSib(Self));
	while (Curr) {
		Message* Cpy = JB_Msg_Copy(Curr, Copylayer);
		(JB_Ring_NextSibSet(After, Cpy));
		After = Cpy;
		Curr = ((Message*)JB_Ring_NextSib(Curr));
	};
}

void SC_Msg_CopyAllAfterBefore(Message* Self, Message* Before, Message* Copylayer) {
	Message* Exp = ((Message*)JB_Ring_NextSib(Self));
	while (Exp) {
		(JB_Ring_PrevSibSet(Before, JB_Msg_Copy(Exp, Copylayer)));
		Exp = ((Message*)JB_Ring_NextSib(Exp));
	};
}

void SC_Msg_CopyAllAfterInto(Message* Self, Message* Into, Message* Copylayer) {
	Message* Curr = ((Message*)JB_Ring_NextSib(Self));
	while (Curr) {
		JB_Tree_SyntaxAppend(Into, JB_Msg_Copy(Curr, Copylayer));
		Curr = ((Message*)JB_Ring_NextSib(Curr));
	};
}

void SC_Msg_CopyAllBefore(Message* Self, Message* Before, Message* Copylayer) {
	Message* Curr = ((Message*)JB_Ring_PrevSib(Self));
	while (Curr) {
		Message* Cpy = JB_Msg_Copy(Curr, Copylayer);
		(JB_Ring_PrevSibSet(Before, Cpy));
		Before = Cpy;
		Curr = ((Message*)JB_Ring_PrevSib(Curr));
	};
}

void SC_Msg_CopyAllBeforeInto(Message* Self, Message* Into, Message* Copylayer) {
	Message* Curr = ((Message*)JB_Ring_PrevSib(Self));
	while (Curr) {
		(JB_Ring_FirstSet(Into, JB_Msg_Copy(Curr, Copylayer)));
		Curr = ((Message*)JB_Ring_PrevSib(Curr));
	};
}

void JB_Msg_CopyAllInto(Message* Self, Message* J) {
	{
		Message* C = ((Message*)JB_Ring_First(Self));
		while (C) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(C)));
			JB_Tree_SyntaxAppend(J, JB_Msg_Copy(C, J));
			C = _Nf1;
		};
		;
	};
}

JB_String* JB_Msg_CopyID(Message* Self) {
	return JB_LUB[0];
}

Message* JB_Msg_CopySub(Message* Self, Message* P) {
	Message* Rz = nil;
	Rz = JB_Msg_ConstructorCopy(nil, Self);
	if (P) {
		Rz->Position = P->Position;
		Rz->RangeLength = P->RangeLength;
	}
	{
		Message* V = ((Message*)JB_Ring_First(Self));
		while (V) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(V)));
			JB_Tree_SyntaxAppend(Rz, JB_Msg_CopySub(V, P));
			V = _Nf1;
		};
		;
	}
	;
	return Rz;
}

JB_String* SC_Msg_Cpp_Wrapper(Message* Self) {
	if (Self) {
		if (JB_Msg_EqualsSyx(Self, kJB_SyxBra, false)) {
			return JB_Msg_FirstName(Self);
		}
		return Self->Name;
	}
	return JB_LUB[0];
}

Message* SC_Msg_CreateNil(Message* Self) {
	Message* Rz = nil;
	JB_Incr(Rz);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Self, (&_usingf0));
	JB_SetRef(Rz, (JB_Syx_Msg(kJB_SyxThg, JB_LUB[36])));
	JB_SetRef(Rz->Obj, SC_TypeNil);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Msg_CreateOwnBlock(Message* Self) {
	Message* Rz = nil;
	JB_Incr(Rz);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Self, (&_usingf0));
	Message* Bra = JB_Syx_Msg(kJB_SyxBra, JB_LUB[0]);
	JB_Incr(Bra);
	JB_SetRef(Bra->Obj, Self->Obj);
	JB_SetRef(Rz, JB_Msg_Msg(Bra, kJB_SyxArg, JB_LUB[0]));
	JB_FreeIfDead(SC_Msg_ReplaceWith(Self, Bra));
	SCArg* NewObj = SC_Msg_SCArg(Rz, nil, nil);
	JB_Incr(NewObj);
	if (NewObj) {
		JB_SetRef(NewObj->TmpMovedOutFor, Self);
		(SC_Msg_StatementExprSet(Bra, NewObj));
	}
	JB_Decr(Bra);
	JB_Decr(NewObj);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Msg_CutifyCopy(Message* Self) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Msg_ConstructorCopy(nil, Self));
	{
		Message* V = ((Message*)JB_Ring_First(Self));
		JB_Incr(V);
		while (V) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(V)));
			JB_Incr(_Nf1);
			if (JB_Msg_EqualsSyx(V, kJB_SyxArg, false)) {
				0;
			}
			 else if (SC_Msg_IsReffer(V)) {
				Message* _tmPf2 = ((Message*)JB_Ring_Last(V));
				JB_Incr(_tmPf2);
				Message* Vll = ((Message*)JB_Ring_Last(_tmPf2));
				JB_Incr(Vll);
				JB_Decr(_tmPf2);
				if (Vll) {
					Message* _tmPf3 = SC_Msg_CutifyCopy(Vll);
					JB_Incr(_tmPf3);
					JB_Tree_SyntaxAppend(Rz, _tmPf3);
					JB_Decr(_tmPf3);
				}
				 else {
				}
				JB_Decr(Vll);
			}
			 else {
				Message* _tmPf4 = SC_Msg_CutifyCopy(V);
				JB_Incr(_tmPf4);
				JB_Tree_SyntaxAppend(Rz, _tmPf4);
				JB_Decr(_tmPf4);
			}
			JB_SetRef(V, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(V);
		;
	}
	;
	SCFunction* Fn = SC_Msg_MsgFunc(Rz);
	JB_Incr(Fn);
	if (Fn) {
		SCClass* Cls = Fn->Cls;
		JB_Incr(Cls);
		JB_String* Modname = JB_LUB[0];
		JB_Incr(Modname);
		SCNode* Space = Fn->Parent;
		JB_Incr(Space);
		if (JB_Object_FastIsa(Space, &SCModuleData)) {
			JB_SetRef(Modname, ((SCModule*)Space)->Name);
		}
		if (Cls or JB_Str_Exists(Modname)) {
			Message* Name = ((Message*)JB_Ring_First(Rz));
			JB_Incr(Name);
			if (JB_Msg_EqualsSyx(Name, kJB_SyxThg, false)) {
				Message* Prm = ((Message*)JB_Ring_NextSib(Name));
				JB_Incr(Prm);
				JB_Msg_BecomeStr(Rz, kJB_SyxDot, Fn->Name);
				if (Cls) {
					Message* _tmPf5 = ((Message*)JB_Ring_First(Prm));
					JB_Incr(_tmPf5);
					(JB_Ring_FirstSet(Rz, _tmPf5));
					JB_Decr(_tmPf5);
				}
				 else if (Space != SC__Comp_program) {
					Message* Mod = JB_Syx_Msg(kJB_SyxThg, Modname);
					JB_Incr(Mod);
					JB_SetRef(Mod->Obj, Space);
					(JB_Ring_FirstSet(Rz, Mod));
					JB_Decr(Mod);
				}
				if (!JB_Ring_HasChildren(Prm)) {
					Prm->Func = kJB_SyxEmb;
				}
				JB_Decr(Prm);
				JB_Tree_Remove(Name);
			}
			JB_Decr(Name);
		}
		JB_Decr(Cls);
		JB_Decr(Modname);
		JB_Decr(Space);
	}
	JB_Decr(Fn);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Msg_DclExp(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, kJB_SyxDecl, false)) {
		return ((Message*)JB_Tree_Second(Self));
	}
	return Self;
}

void JB_Msg_Decl__(Message* Self, FastString* Fs) {
	Message* Ch = ((Message*)JB_Ring_First(Self));
	JB_Incr(Ch);
	if (!Ch) {
		JB_Decr(Ch);
		return;
	}
	JB_FS_AppendByte(Fs, '|');
	JB_FS_SyntaxAppend(Fs, Ch);
	JB_FS_AppendByte(Fs, '|');
	JB_SetRef(Ch, ((Message*)JB_Ring_NextSib(Ch)));
	while (Ch) {
		JB_FS_AppendByte(Fs, ' ');
		JB_FS_SyntaxAppend(Fs, Ch);
		JB_SetRef(Ch, ((Message*)JB_Ring_NextSib(Ch)));
	};
	JB_Decr(Ch);
}

void SC_Msg_DeclAddNumbInt(Message* Self, int64 Num, SCNode* Name_space) {
	Message* Numb = JB_Msg_Msg(Self, kJB_SyxNum, JB_int64_Render(Num, nil));
	JB_SetRef(Numb->Obj, SC_TypeOfNum(Numb, Name_space, nil));
}

Message* SC_Msg_DeclName(Message* Self) {
	Message* Name = SC_Msg_DclExp(Self);
	if (JB_Msg_EqualsSyx(Name, kJB_SyxRel, false)) {
		return JB_Msg_NeedSyx(Name, kJB_SyxThg);
	}
	if (JB_Msg_EqualsSyx(Name, kJB_SyxThg, false)) {
		return Name;
	}
	if (((JB_Msg_EqualsSyx(Name, kJB_SyxEmb, false)))) {
		JB_Msg_Fail(Self, nil);
		return nil;
	}
	return nil;
}

bool JB_Msg_DeepEquals(Message* Self, Message* B, bool Aware) {
	Message* A = Self;
	Message* A2 = ((Message*)JB_Ring_FlatAfter(Self));
	Message* B2 = ((Message*)JB_Ring_FlatAfter(B));
	while (true) {
		bool ADone = A == A2;
		bool BDone = B == B2;
		if (ADone and BDone) {
			return true;
		}
		if ((ADone != BDone) or ((!JB_Msg_ShallowEquals(A, B, Aware)))) {
			return false;
		}
		A = ((Message*)JB_Ring_FlatNext0(A));
		B = ((Message*)JB_Ring_FlatNext0(B));
	};
}

Message* SC_Msg_Deepest(Message* Self, Syntax Tmp, JB_String* Name) {
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			Message* Best = SC_Msg_Deepest(Ch, Tmp, Name);
			if (Best) {
				return Best;
			}
			Ch = _Nf1;
		};
		;
	}
	;
	if ((JB_Msg_EqualsSyx(Self, kJB_SyxTmp, false)) and (JB_Msg_SyntaxEquals(Self, Name, false))) {
		return Self;
	}
	return nil;
}

Message* SC_Msg_DeepLast(Message* Self) {
	while (true) {
		Message* L = ((Message*)JB_Ring_Last(Self));
		if (!L) {
			break;
		}
		Self = L;
	};
	return Self;
}

void SC_Msg_DenyPreviousUse(Message* Self, Message* Msg) {
	Message* Thg = SC_Msg_UnBra(((Message*)JB_Ring_First(Msg)));
	if (Thg->Func != kJB_SyxThg) {
		return;
	}
	JB_Object* Decl = Thg->Obj;
	if (!Decl) {
		return;
	}
	{
		Message* _LoopSrcf3 = ((Message*)JB_Ring_Parent(Self));
		Message* Ch = _LoopSrcf3;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(_LoopSrcf3));
		while ((Ch) and (Ch != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Ch));
			if (Ch == Self) {
				return;
			}
			if (Ch->Obj == Decl) {
				if (true) {
					JB_Msg_Fail(Ch, JB_LUB[915]);
				}
			}
			Ch = _N_f2;
		};
		;
	};
}

int SC_Msg_DeprecatedClassOption(Message* Self, JB_String* Name, JB_String* Kind) {
	Message* Place = JB_Msg_FindSyxName(Self, kJB_SyxTmp, Name, false);
	JB_Incr(Place);
	if (!Place) {
		JB_Decr(Place);
		return 0;
	}
	int Num = 1;
	if (!JB_Str_Equals(Kind, JB_LUB[174], false)) {
		Message* Ch = ((Message*)JB_Ring_First(Place));
		JB_Incr(Ch);
		if (!(Ch and (JB_Msg_Expect(Ch, kJB_SyxThg, nil) and (JB_Msg_SyntaxEquals(Ch, Kind, true))))) {
			JB_Decr(Ch);
			JB_Decr(Place);
			return 0;
		}
		Message* Num_msg = ((Message*)JB_Ring_NextSib(Ch));
		JB_Incr(Num_msg);
		JB_Decr(Ch);
		if (Num_msg) {
			JB_Msg_Expect(Num_msg, kJB_SyxNum, nil);
			Num = JB_Msg_Int(Num_msg, 0);
		}
		JB_Decr(Num_msg);
	}
	JB_Tree_Remove(Place);
	JB_Decr(Place);
	return Num;
}

void JB_Msg_Destructor(Message* Self) {
	JB_Clear(Self->Name);
	JB_Ring_Destructor(Self);
}

Dictionary* JB_Msg_Dict(Message* Self, bool DoLower, bool DoCount) {
	Dictionary* Rz = ((Dictionary*)nil);
	Rz = JB_Dict_Constructor(nil);
	int I = 0;
	{
		Message* S = ((Message*)JB_Ring_First(Self));
		while (S) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(S)));
			if (DoLower) {
				(JB_Dict_ValueLowerSet(Rz, S->Name, S));
			}
			 else {
				(JB_Dict_ValueSet(Rz, S->Name, S));
			}
			if (DoCount) {
				S->Position = I++;
			}
			S = _Nf1;
		};
		;
	}
	;
	return Rz;
}

FatASM* SC_Msg_DIV2(Message* Self, ASMReg R1, ASMReg R2, int Sh, int Add) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_DIV2);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, Sh));
	(SC_FAT_NumInputSet(Rz, 3, Add));
	return Rz;
}

void SC_Msg_DivByZero(Message* Self) {
	(JB_Msg_SyntaxProblem(Self, JB_LUB[916]));
}

FatASM* SC_Msg_DIVV(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, ASMReg R4, int Kind) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_DIVV);
	SC_FAT_Dest(Rz, 0, R1);
	SC_FAT_Dest(Rz, 1, R2);
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_PrmWithIntReg(Rz, 3, R4));
	(SC_FAT_NumInputSet(Rz, 4, Kind));
	return Rz;
}

bool SC_Msg_DoesAnything(Message* Self) {
	if (Self) {
		if (!((!JB_Msg_EqualsSyx(Self, kJB_SyxThg, false)) and ((!JB_Msg_EqualsSyx(Self, kJB_SyxNum, false)) and ((!JB_Msg_EqualsSyx(Self, kJB_SyxStr, false)) and (!JB_Msg_EqualsSyx(Self, kJB_SyxChar, false)))))) {
			return nil;
		}
		return true;
	}
	return false;
}

void JB_Msg_Dot__(Message* Self, FastString* Fs) {
	Message* Ch = ((Message*)JB_Ring_First(Self));
	JB_Incr(Ch);
	if (Ch) {
		JB_FS_SyntaxAppend(Fs, Ch);
	}
	JB_FS_AppendByte(Fs, '.');
	JB_FS_AppendString(Fs, Self->Name);
	if (Ch) {
		Message* _tmPf0 = ((Message*)JB_Ring_NextSib(Ch));
		JB_Incr(_tmPf0);
		JB_FS_SyntaxAppend(Fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Ch);
}

SCDecl* SC_Msg_DotMustBeProperty(Message* Self) {
	JB_Object* Obj = Self->Obj;
	if (JB_Object_OperatorMustBe(Obj, &SCDeclData)) {
		if (JB_Str_Exists(((SCDecl*)Obj)->Name)) {
			return ((SCDecl*)Obj);
		}
		SCDecl* Backup = ((SCDecl*)JB_Object_FastAs(((Message*)JB_Ring_Last(Self))->Obj, &SCDeclData));
		if (Backup) {
			if (JB_Str_Exists(Backup->Name)) {
				return Backup;
			}
		}
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1213]);
		}
	}
	return nil;
}

SCObject* SC_Msg_DotSpace(Message* Self, SCNode* Name_space) {
	SCObject* Rz = nil;
	if (!JB_Msg_EqualsSyx(Self, kJB_SyxThg, false)) {
		return SC_TypeOfExprModulesOK(Self, Name_space, nil);
	}
	Rz = SC_Base_LookUpVar(Name_space, Self->Name, Self, nil);
	if (JB_Object_FastIsa(Rz, &SCDeclData)) {
		(SC_Decl_SyntaxIsSet(((SCDecl*)Rz), kSC__SCDeclInfo_ReadFrom, true));
	}
	JB_SetRef(Self->Obj, Rz);
	return Rz;
}

DotUseType SC_Msg_DotType(Message* Self) {
	if (Self->Func == kJB_SyxDot) {
		JB_Object* D = Self->Obj;
		if (JB_Object_FastIsa(D, &SCDeclData)) {
			return (SC_Decl_SyntaxIs(((SCDecl*)D), kSC__SCDeclInfo_Property)) * kSC__DotUseType_Property;
		}
	}
	return 0;
}

void JB_Msg_Dummy(Message* Self, FastString* Fs) {
}

void SC_Msg_ElseNeverFires(Message* Self) {
	Message* Arg = ((Message*)JB_Ring_NextSib(Self));
	Message* After = ((Message*)JB_Ring_NextSib(Arg));
	if (!After) {
		Message* P = ((Message*)JB_Ring_Parent(Self));
		if (P) {
			SC_Msg_SafeRemove(P, kJB_SyxSheb);
		}
		return;
	}
	if (JB_Msg_EqualsSyx(Arg, kJB_SyxArg, false)) {
		JB_Tree_Clear(Arg);
		Arg->Tag = (Arg->Tag | kSC__SCBlockage_Return);
	}
	JB_FreeIfDead(SC_Msg_NeedBra(Self));
}

void JB_Msg_Emb__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
	if (!JB_Ring_HasChildren(Self)) {
		return;
	}
	JB_Msg_RenderWithSpaces(Self, Fs, nil);
}

void JB_Msg_ERel__(Message* Self, FastString* Fs) {
	Message* Ch = ((Message*)JB_Ring_First(Self));
	JB_Incr(Ch);
	if (!Ch) {
		JB_Decr(Ch);
		return;
	}
	JB_FS_SyntaxAppend(Fs, Ch);
	JB_FS_AppendByte(Fs, ' ');
	JB_SetRef(Ch, ((Message*)JB_Ring_NextSib(Ch)));
	if (!Ch) {
		JB_Decr(Ch);
		return;
	}
	JB_FS_SyntaxAppend(Fs, Ch);
	JB_FS_AppendString(Fs, JB_LUB[356]);
	JB_SetRef(Ch, ((Message*)JB_Ring_NextSib(Ch)));
	if (!Ch) {
		JB_Decr(Ch);
		return;
	}
	JB_FS_SyntaxAppend(Fs, Ch);
	JB_Decr(Ch);
}

FatASM* SC_Msg_EROR(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, ASMReg R4, int IsOK) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_EROR);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_PrmWithIntReg(Rz, 3, R4));
	(SC_FAT_NumInputSet(Rz, 4, IsOK));
	return Rz;
}

Message* SC_Msg_ExpandToBool(Message* Self, SCNode* Name_space) {
	Message* Rz = nil;
	SCDecl* Decl = SC_TypeOfExpr(Self, Name_space, nil);
	if (Decl) {
		if (SC_Decl_IsNormal(Decl) and (!Decl->Type->TheBoolFunc)) {
			return Self;
		}
		Message* Upon = SC_Msg_UnBra(Self);
		Rz = SC_Decl_ExpectMatch(SC_TypeBool->TypeNormal, Decl, kJB_kTypeCastTrue, Upon, nil);
		while (((JB_Msg_EqualsSyx(Rz, kJB_SyxBra, false))) and ((JB_Msg_EqualsSyx(((Message*)JB_Ring_First(Rz)), kJB_SyxBra, false)))) {
			Rz = SC_Msg_ReplaceWithChild(Rz);
		};
	}
	return Rz;
}

bool JB_Msg_Expect(Message* Self, Syntax Type, JB_String* Name) {
	if (!Self) {
		return nil;
	}
	if ((!Type) or (Self->Func == Type)) {
		if ((Name == nil) or ((JB_Str_Equals(Self->Name, Name, true)))) {
			return true;
		}
	}
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, JB_LUB[426]);
	if (Type) {
		JB_String* _tmPf0 = JB_Syx_LongName(Type);
		JB_Incr(_tmPf0);
		JB_FS_AppendString(Fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_FS_MsgErrorName(Fs, Name);
	JB_FS_AppendString(Fs, JB_LUB[795]);
	JB_String* _tmPf1 = JB_Syx_LongName(Self->Func);
	JB_Incr(_tmPf1);
	JB_FS_AppendString(Fs, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_MsgErrorName(Fs, Self->Name);
	if (true) {
		JB_String* _tmPf2 = JB_FS_SyntaxCast(Fs);
		JB_Incr(_tmPf2);
		JB_Msg_Fail(Self, _tmPf2);
		JB_Decr(_tmPf2);
	}
	JB_Decr(Fs);
	return false;
}

bool SC_Msg_ExpectClass(Message* Self, SCDecl* Slf, SCClass* Cls) {
	return ((bool)JB_FreeIfDead(SC_Decl_ExpectMatch(Slf, Cls->TypeNormal, 0, Self, Self)));
}

void SC_Msg_ExpectEmpty(Message* Self) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if (F) {
		if (true) {
			JB_Msg_Fail(F, nil);
		}
	}
}

bool SC_Msg_ExpectInt(Message* Self, SCDecl* Type) {
	uint Ty = Type->Type->TypeInfo;
	if (JB_TC_ByteCount(Ty) > 4) {
		JB_Msg_Fail(Self, JB_LUB[917]);
		return nil;
	}
	if (!(JB_TC_IsInt(Ty) and ((!JB_TC_SyntaxIs(Ty, kJB__TC_bool))))) {
		JB_Msg_Fail(Self, JB_LUB[918]);
		return nil;
	}
	return true;
}

bool JB_Msg_ExpectLast(Message* Self, JB_String* Err) {
	if (Self) {
		Message* N = ((Message*)JB_Ring_NextSib(Self));
		if (N) {
			JB_Msg_Fail(N, Err);
		}
		 else {
			return true;
		}
	}
	return false;
}

bool SC_Msg_ExpectMatch(Message* Self, SCNode* Name_space, SCClass* With) {
	SCDecl* T = SC_TypeOfExprNeeded(Self, Name_space);
	if (T) {
		return SC_Msg_ExpectClass(Self, T, With);
	}
	return false;
}

Message* SC_Msg_ExpectParamsTransform(Message* Self, int P, Message* Errnode, JB_String* Type) {
	JB_Incr(Type);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Errnode, (&_usingf0));
	Message* L = Self;
	JB_Incr(L);
	Message* On = L;
	JB_Incr(On);
	if (!JB_Str_Equals(Type, JB_LUB[247], false)) {
		JB_SetRef(Type, JB_LUB[244]);
	}
	if ((!L)) {
		JB_SetRef(On, JB_Syx_OperatorPlus(kJB_SyxThg, JB_LUB[36]));
	}
	 else if ((JB_Msg_EqualsSyx(L, kJB_SyxList, false)) or ((JB_Msg_EqualsSyx(L, kJB_SyxBra, false)) or (JB_Msg_EqualsSyx(L, kJB_SyxPrm, false)))) {
		L->Func = kJB_SyxPrm;
		JB_SetRef(On, ((Message*)JB_Ring_First(L)));
	}
	 else {
		JB_SetRef(L, nil);
	}
	Message* L2 = L;
	JB_Incr(L2);
	if ((!JB_Msg_EqualsSyx(L, kJB_SyxPrm, false))) {
		JB_SetRef(L2, JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0]));
		JB_Tree_SyntaxAppend(L2, L);
	}
	JB_String* _tmPf1 = JB_Str_OperatorPlus(JB_LUB[544], Type);
	JB_Incr(_tmPf1);
	JB_Decr(Type);
	Message* Tmp = JB_Syx_OperatorPlus(kJB_SyxDot, (_tmPf1));
	JB_Incr(Tmp);
	JB_Decr(_tmPf1);
	JB_Tree_SyntaxAppend(Tmp, On);
	JB_Decr(On);
	JB_Tree_SyntaxAppend(Tmp, L2);
	JB_Decr(L2);
	JB_SetRef(L, Tmp);
	JB_Decr(Tmp);
	L->Position = P;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Errnode);
	JB_SafeDecr(L);
	JB_MsgPos_Destructor((&_usingf0));
	return L;
}

bool JB_Msg_ExpectString(Message* Self) {
	if (JB_Msg_IsString(Self)) {
		return true;
	}
	if (true) {
		JB_Msg_Fail(Self, JB_LUB[796]);
	}
	return false;
}

SCFunction* SC_Msg_ExpFunc(Message* Self) {
	Message* It = ((Message*)JB_Ring_Last(SC_Msg_UnBra(Self)));
	if (It) {
		JB_Object* Fn = It->Obj;
		if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
			return ((SCFunction*)Fn);
		}
	}
	return nil;
}

void JB_Msg_Export(Message* Self, FastString* Fs) {
	FP_fpMsgRender Fn = (JB_Syx_ExportAddr(Self->Func));
	(Fn)(Self, Fs);
}

FatASM* SC_Msg_FADD(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, ASMReg R4, int D) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_FADD);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_PrmWithIntReg(Rz, 3, R4));
	(SC_FAT_NumInputSet(Rz, 4, D));
	return Rz;
}

FatASM* SC_Msg_FADK(Message* Self, ASMReg R1, ASMReg R2, int High) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_FADK);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, High));
	return Rz;
}

Message* SC_Msg_FailOrCopy(Message* Self, Message* P) {
	Syntax F = Self->Func;
	if (F == kJB_SyxThg) {
		return JB_Msg_Copy(Self, nil);
	}
	Message* Ch = ((Message*)JB_Ring_First(Self));
	if (Ch) {
		if (JB_Msg_EqualsSyx(Ch, kJB_SyxThg, false)) {
			if ((SC_Msg_OperatorIsBRel(Self, JB_LUB[48])) or (F == kJB_SyxAcc)) {
				return JB_Msg_Copy(Self, nil);
			}
		}
	}
	if (true) {
		JB_Msg_Fail(P, JB_LUB[919]);
	}
	return nil;
}

Message* SC_Msg_FalsifyNil(Message* Self) {
	SCDecl* Ret = SC_Func__CurrFunc()->ReturnType;
	if (Ret and SC_Decl_IsNormal(Ret)) {
		return SC_Class_Falsify(Ret->Type, Self);
	}
	Self->Func = kJB_SyxThg;
	JB_SetRef(Self->Obj, SC_TypeNil);
	return nil;
}

SCDecl* SC_Msg_FastDecl(Message* Self) {
	JB_Object* Obj = Self->Obj;
	if (JB_Object_FastIsa(Obj, &SCDeclData)) {
		JB_Object* L = ((SCDecl*)Obj)->IsLookupOnly;
		if (!L) {
			return ((SCDecl*)Obj);
		}
		if (JB_Object_FastIsa(L, &SCDeclData)) {
			return ((SCDecl*)L);
		}
		return ((SCDecl*)Obj);
	}
	if (true) {
		JB_Msg_Fail(Self, SC_Str_internal(JB_LUB[1579]));
	}
	return SC_Comp__GetTypeVoid();
}

FatASM* SC_Msg_FCLM(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, ASMReg R4, int D) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_FCLM);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_PrmWithIntReg(Rz, 3, R4));
	(SC_FAT_NumInputSet(Rz, 4, D));
	return Rz;
}

FatASM* SC_Msg_FDIV(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, ASMReg R4, int D) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_FDIV);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_PrmWithIntReg(Rz, 3, R4));
	(SC_FAT_NumInputSet(Rz, 4, D));
	return Rz;
}

FatASM* SC_Msg_FFRC(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, ASMReg R4, int D) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_FFRC);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_PrmWithIntReg(Rz, 3, R4));
	(SC_FAT_NumInputSet(Rz, 4, D));
	return Rz;
}

SCFile* SC_Msg_File(Message* Self) {
	{
		Message* S = Self;
		while (S) {
			JB_Object* R = JB_ObjLayer(S)->Obj;
			if (JB_Object_FastIsa(R, &SCFileData)) {
				return ((SCFile*)R);
			}
			if (JB_Msg_EqualsSyx(S, kJB_SyxArg, false)) {
				return nil;
			}
			S = ((Message*)JB_Ring_Parent(S));
		};
		;
	}
	;
	return nil;
}

void JB_Msg_File__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
	(++Self->Indent);
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			JB_FS_LineIndent(Fs);
			JB_FS_SyntaxAppend(Fs, Ch);
			Ch = _Nf1;
		};
		;
	}
	;
	(--Self->Indent);
}

Message* SC_Msg_FileMark(Message* Self) {
	Message* Rz = nil;
	SCFile* Path = SC_Msg_File(Self);
	if (Path) {
		Rz = JB_Msg_Msg(Self, kJB_SyxTmp, JB_LUB[483]);
		JB_Msg_AppendString(Rz, Path);
	}
	return Rz;
}

int SC_Msg_FileNum(Message* Self) {
	return JB_ObjLayer(Self)->Num3;
}

JB_String* JB_Msg_FilePath(Message* Self) {
	JB_Object* O = JB_ObjLayer(Self)->Obj;
	if ((!false) and (JB_Object_Isa(O, &JB_FileData))) {
		return JB_File_Path(((JB_File*)O));
	}
	if (JB_Object_Isa(O, &JB_StringData)) {
		return ((JB_String*)O);
	}
	return JB_LUB[0];
}

Message* JB_Msg_FindSyx(Message* Self, Syntax S) {
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if (JB_Msg_EqualsSyx(Ch, S, false)) {
				return Ch;
			}
			Ch = _Nf1;
		};
		;
	}
	;
	return nil;
}

Message* JB_Msg_FindSyxName(Message* Self, Syntax S, JB_String* Name, bool Err) {
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if ((JB_Msg_EqualsSyx(Ch, S, false)) and (JB_Msg_SyntaxEquals(Ch, Name, true))) {
				return Ch;
			}
			Ch = _Nf1;
		};
		;
	}
	;
	if (Err) {
		JB_Msg_CantFind(Self, S, Name, nil);
	}
	return nil;
}

Message* JB_Msg_FindName(Message* Self, JB_String* Name) {
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if (JB_Msg_SyntaxEquals(Ch, Name, true)) {
				return Ch;
			}
			Ch = _Nf1;
		};
		;
	}
	;
	return nil;
}

Array* JB_Msg_FindAll(Message* Self, Syntax Fn, JB_String* Name) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	{
		Message* S = ((Message*)JB_Ring_First(Self));
		while (S) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(S)));
			if ((S->Func == Fn) and (JB_Str_Equals(S->Name, Name, false))) {
				JB_Array_SyntaxAppend(Rz, S);
			}
			S = _Nf1;
		};
		;
	}
	;
	return Rz;
}

JB_String* SC_Msg_FindAndRemove(Message* Self, JB_String* Name, bool NothingOK, bool IsClass) {
	Message* _tmPf0 = SC_Msg_FindAndRemoveSub(Self, Name, NothingOK, IsClass);
	JB_Incr(_tmPf0);
	if (!_tmPf0) {
		JB_Decr(_tmPf0);
		return JB_LUB[0];
	}
	JB_String* _tmPf1 = _tmPf0->Name;
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* SC_Msg_FindAndRemove2(Message* Self, Message* Place, bool NothingOK, bool IsClass) {
	JB_Tree_Remove(Place);
	Message* Ch = ((Message*)JB_Ring_First(Place));
	JB_Incr(Ch);
	if (NothingOK and (!Ch)) {
		JB_SetRef(Place->Name, JB_LUB[0]);
		JB_Decr(Ch);
		return Place;
	}
	if ((JB_Msg_EqualsSyx(Ch, kJB_SyxThg, false)) or (JB_Msg_EqualsSyx(Ch, kJB_SyxBra, false))) {
		if (IsClass) {
			Message* _tmPf0 = ((Message*)JB_Ring_Parent(Self));
			JB_Incr(_tmPf0);
			if (!SC_Msg_OperatorIsTmp(_tmPf0, JB_LUB[237])) {
				JB_Msg_Fail(Ch, JB_LUB[1047]);
				JB_Decr(_tmPf0);
				JB_Decr(Ch);
				return nil;
			}
			JB_Decr(_tmPf0);
		}
		JB_SafeDecr(Ch);
		return Ch;
	}
	JB_Decr(Ch);
	JB_FreeIfDead(JB_Msg_NeedSyx(Place, kJB_SyxThg));
	return nil;
}

Message* SC_Msg_FindAndRemoveSub(Message* Self, JB_String* Name, bool NothingOK, bool IsClass) {
	Message* Place = JB_Msg_FindSyxName(Self, kJB_SyxTmp, Name, false);
	JB_Incr(Place);
	if (Place) {
		Message* _tmPf0 = SC_Msg_FindAndRemove2(Self, Place, NothingOK, IsClass);
		JB_Incr(_tmPf0);
		JB_Decr(Place);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(Place);
	return nil;
}

Message* SC_Msg_FindDestructor(Message* Self) {
	{
		Message* C = ((Message*)JB_Ring_First(Self));
		while (C) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(C)));
			if (JB_Msg_EqualsSyx(C, kJB_SyxFunc, false)) {
				Message* Cl = ((Message*)JB_Ring_Last(C));
				if (Cl) {
					if (SC_Func_SyntaxIs(SC_Msg_AsFunc(Cl), kSC__FunctionType_Destructor)) {
						return C;
					}
				}
			}
			C = _Nf1;
		};
		;
	}
	;
	return nil;
}

Message* JB_Msg_FindNested(Message* Self, Syntax Fn, JB_String* Name, bool Err) {
	{
		Message* Curr = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while ((Curr) and (Curr != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(Curr)));
			if ((JB_Msg_EqualsSyx(Curr, Fn, false)) or (Fn == nil)) {
				if ((Name == nil) or (JB_Msg_SyntaxEquals(Curr, Name, true))) {
					return Curr;
				}
			}
			Curr = _N_f2;
		};
		;
	}
	;
	if (Err) {
		JB_Msg_CantFind(Self, Fn, Name, nil);
	}
	return nil;
}

Message* JB_Msg_FindNotInserted(Message* Self) {
	{
		Message* C = Self;
		while (C) {
			if (C->Position > -1) {
				return C;
			}
			C = ((Message*)JB_Ring_Parent(C));
		};
		;
	}
	;
	return Self;
}

Message* SC_Msg_FindPos(Message* Self, int Fr, int Len) {
	Message* _tmP0 = SC_Msg_FindPosSub(Self, Fr, Len, true);
	JB_Incr(_tmP0);
	if (!_tmP0) {
		JB_SetRef(_tmP0, SC_Msg_FindPosSub(Self, Fr, Len, false));
	}
	JB_SafeDecr(_tmP0);
	return _tmP0;
}

Message* SC_Msg_FindPosSub(Message* Self, int Fr, int Len, bool Exact) {
	Message* Rz = nil;
	int Strength = 1;
	{
		Message* Ch = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while ((Ch) and (Ch != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(Ch)));
			if (Ch->Position == Fr) {
				int CurrStrength = (Ch->RangeLength == Len) + (!Exact);
				if (CurrStrength >= Strength) {
					if (!JB_Msg_SyntaxIs(Ch, kJB__MsgParseFlags_Inserted)) {
						return SC_Msg_UnBra(Ch);
					}
					Strength = CurrStrength;
					Rz = Ch;
				}
			}
			Ch = _N_f2;
		};
		;
	}
	;
	return Rz;
}

Message* SC_Msg_FindRef(Message* Self, SCFunction* Fn, JB_String* Name) {
	{
		Message* Curr = Self;
		while (Curr) {
			if ((JB_Msg_EqualsSyx(Curr, kJB_SyxFunc, false))) {
				Message* Prms = ((Message*)JB_Ring_Last(Curr));
				if ((Prms) and ((Prms->Obj == Fn) and (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(Prms)), Name)))) {
					return Curr;
				}
			}
			Curr = ((Message*)JB_Ring_NextSib(Curr));
		};
		;
	}
	;
	return nil;
}

Message* SC_Msg_FindShader(Message* Self, JB_String* TypeName) {
	Message* U = JB_Msg_FindSyxName(Self, kJB_SyxTmp, JB_LUB[626], false);
	JB_Incr(U);
	if (!U) {
		JB_Decr(U);
		return nil;
	}
	Message* _tmPf0 = ((Message*)JB_Ring_First(U));
	JB_Incr(_tmPf0);
	Message* C = SC_Msg_ModelType(_tmPf0);
	JB_Incr(C);
	JB_Decr(_tmPf0);
	if (!C) {
		JB_Decr(C);
		JB_Decr(U);
		return nil;
	}
	JB_String* N = JB_Str_LowerCase(C->Name);
	JB_Incr(N);
	if (JB_Str_Last(N, 0) == 's') {
		JB_SetRef(N, JB_Str_Range(N, 0, JB_Str_Length(N) - 1));
	}
	JB_String* F = ((JB_StringC*)JB_Dict_Value0(SC__SCGame3D_Types, N));
	JB_Incr(F);
	JB_Decr(N);
	if ((!JB_Str_Exists(F))) {
		JB_Msg_Fail(U, JB_LUB[1048]);
		JB_Decr(F);
		JB_Decr(C);
		JB_Decr(U);
		return nil;
	}
	JB_String* _tmPf1 = JB_Str_OperatorPlus(TypeName, JB_LUB[1049]);
	JB_Incr(_tmPf1);
	if (!SC_SCGame3D__NeedShader(_tmPf1)) {
		JB_Decr(_tmPf1);
		JB_Decr(F);
		JB_Decr(C);
		JB_Decr(U);
		return nil;
	}
	JB_Decr(_tmPf1);
	if (JB_Str_Length(F) >= 2) {
		JB_SetRef(F, JB_Str_Range(F, 0, 1));
	}
	 else {
		JB_String* _tmPf2 = JB_Str_OperatorPlus(TypeName, JB_LUB[1050]);
		JB_Incr(_tmPf2);
		if (!SC_SCGame3D__NeedShader(_tmPf2)) {
			JB_Decr(_tmPf2);
			JB_Decr(F);
			JB_Decr(C);
			JB_Decr(U);
			return nil;
		}
		JB_Decr(_tmPf2);
	}
	JB_SetRef(C->Name, F);
	JB_Decr(F);
	JB_SetRef(C, ((Message*)JB_Tree_Get(U, 0)));
	JB_Tree_Remove(U);
	JB_Decr(U);
	JB_SafeDecr(C);
	return C;
}

Message* JB_Msg_FindTightest(Message* Self, int Pos, bool Named, bool SamePosition) {
	Message* Rz = nil;
	int Size = JB_int__Max();
	{
		Message* Ch = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while ((Ch) and (Ch != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(Ch)));
			uint R = Ch->RangeLength;
			if (!R) {
				0;
			}
			 else if ((JB_Msg_ContainsInd(Ch, Pos, true)) and ((!Named) or (JB_Str_Exists(Ch->Name) or ((JB_Msg_EqualsSyx(Ch, kJB_SyxDot, false)) or (JB_Msg_EqualsSyx(Ch, kJB_SyxSDot, false)))))) {
				if (SamePosition and (Ch->Position != Pos)) {
					0;
				}
				 else if ((R < Size) or ((Rz != nil) and ((Pos == Rz->Position) and (Pos == JB_Msg_After(Ch))))) {
					Rz = Ch;
					Size = R;
				}
			}
			Ch = _N_f2;
		};
		;
	}
	;
	return Rz;
}

JB_String* JB_Msg_FirstName(Message* Self) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if (F) {
		return F->Name;
	}
	return JB_LUB[0];
}

void SC_Msg_FixElseif(Message* Self) {
	Message* Curr = ((Message*)JB_Ring_NextSib(Self));
	JB_Incr(Curr);
	Message* F = ((Message*)JB_Ring_First(Self));
	JB_Incr(F);
	bool Needarg = F and ((!({
		Message* _tmPf2 = ((Message*)JB_Ring_NextSib(F));
		JB_Incr(_tmPf2);
		bool _tmPf1 = JB_Msg_EqualsSyx(_tmPf2, kJB_SyxArg, false);
		JB_Decr(_tmPf2);
		 _tmPf1;
	})));
	JB_Decr(F);
	while (SC_Msg_OperatorIsTmp(Curr, JB_LUB[446]) or SC_Msg_OperatorIsTmp(Curr, JB_LUB[445])) {
		Message* N = ((Message*)JB_Ring_NextSib(Curr));
		JB_Incr(N);
		if (Needarg) {
			if (true) {
				MessagePosition _usingf0 = ((MessagePosition){});
				JB_Msg_SyntaxUsing(Self, (&_usingf0));
				JB_Msg_AppendSyx(Self, kJB_SyxArg, JB_LUB[0]);
				Needarg = false;
				JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
				JB_MsgPos_Destructor((&_usingf0));
			}
		}
		JB_Tree_SyntaxAppend(Self, Curr);
		JB_SetRef(Curr, N);
		JB_Decr(N);
	};
	JB_Decr(Curr);
}

void SC_Msg_FixErl(Message* Self) {
	Message* Ch = ((Message*)JB_Ring_First(Self));
	JB_Incr(Ch);
	Message* Opp = ((Message*)JB_Ring_NextSib(Ch));
	JB_Incr(Opp);
	Message* Last = ((Message*)JB_Ring_NextSib(Opp));
	JB_Incr(Last);
	JB_String* Name = Opp->Name;
	JB_Incr(Name);
	if (JB_Str_Equals(Name, JB_LUB[1855], false)) {
		(JB_Msg_SyntaxProblem(Opp, JB_LUB[1856]));
	}
	if (((JB_Str_Equals(Name, JB_LUB[1855], false)) or (JB_Str_Equals(Name, JB_LUB[1857], false))) and ((!({
		Message* _tmPf3 = SC_Msg_NiceParent(Self);
		JB_Incr(_tmPf3);
		bool _tmPf2 = JB_Msg_EqualsSyx(_tmPf3, kJB_SyxArg, false);
		JB_Decr(_tmPf3);
		 _tmPf2;
	})))) {
		Array* _tmPf1 = (JB_Array_Constructor0(nil));
		JB_Incr(_tmPf1);
		JB_Array_SyntaxAppend(_tmPf1, Ch);
		Message* _tmPf4 = ((Message*)JB_Ring_Last(Self));
		JB_Incr(_tmPf4);
		JB_Array_SyntaxAppend(_tmPf1, _tmPf4);
		JB_Decr(_tmPf4);
		JB_Msg_BecomeMacro(Self, SC__Macros_InitExpand, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else {
		//using;
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Opp, (&_usingf0));
		bool IsNilOr = ((JB_Str_Equals(Name, JB_LUB[1855], false)) or (JB_Str_Equals(Name, JB_LUB[1857], false)));
		Self->Func = kJB_SyxRel;
		JB_SetRef(Opp->Name, JB_LUB[241]);
		JB_SetRef(Ch, JB_Msg_Copy(Ch, nil));
		if (IsNilOr) {
			Message* New_if = JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[175]);
			JB_Incr(New_if);
			Message* _tmPf5 = SC_Msg_WrapWith(Ch, kJB_SyxBRel, JB_LUB[174]);
			JB_Incr(_tmPf5);
			JB_Tree_SyntaxAppend(New_if, _tmPf5);
			JB_Decr(_tmPf5);
			(JB_Ring_PrevSibSet(Self, New_if));
			Message* _tmPf6 = JB_Msg_Msg(New_if, kJB_SyxArg, JB_LUB[0]);
			JB_Incr(_tmPf6);
			JB_Decr(New_if);
			JB_Tree_SyntaxAppend(_tmPf6, Self);
			JB_Decr(_tmPf6);
		}
		 else {
			if (JB_Msg_EqualsSyx(Last, kJB_SyxRel, false)) {
				JB_SetRef(Last, SC_Msg_WrapWith(Last, kJB_SyxBra, JB_LUB[0]));
			}
			Message* Rel = JB_Syx_Msg(kJB_SyxRel, JB_LUB[0]);
			JB_Incr(Rel);
			(JB_Ring_NextSibSet(Opp, Rel));
			JB_Tree_SyntaxAppend(Rel, Ch);
			JB_FreeIfDead(JB_Msg_Msg(Rel, kJB_SyxOpp, Name));
			JB_Tree_SyntaxAppend(Rel, Last);
			JB_Decr(Rel);
		}
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Opp);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Ch);
	JB_Decr(Opp);
	JB_Decr(Last);
	JB_Decr(Name);
}

void SC_Msg_FixMultiArr(Message* Self) {
	{
		Message* Item = ((Message*)JB_Ring_First(Self));
		while (Item) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Item)));
			Message* Kkey = ((Message*)JB_Ring_First(Item));
			if (JB_Msg_EqualsSyx(Kkey, kJB_SyxList, false)) {
				Message* Val = ((Message*)JB_Ring_NextSib(Kkey));
				if (Val) {
					while (true) {
						Message* C = ((Message*)JB_Ring_First(Kkey));
						if ((!C)) {
							break;
						}
						Message* I2 = JB_Syx_Msg(kJB_SyxItem, JB_LUB[0]);
						JB_Tree_SyntaxAppend(I2, C);
						JB_Tree_SyntaxAppend(I2, JB_Msg_Copy(Val, nil));
						(JB_Ring_PrevSibSet(Item, I2));
					};
				}
				JB_Tree_Remove(Item);
			}
			Item = _Nf1;
		};
		;
	};
}

Float64 JB_Msg_Float(Message* Self) {
	if (Self) {
		return JB_Str_TextDouble(Self->Name, Self);
	}
	return 0.0f;
}

float JB_Msg_Float32(Message* Self) {
	float D = ((float)JB_Msg_Float(Self));
	if (fabsf(D) > JB_f__max()) {
		JB_Str_Fail(JB_LUB[797]);
		return 0;
	}
	return D;
}

FatASM* SC_Msg_FMLK(Message* Self, ASMReg R1, ASMReg R2, int High) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_FMLK);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, High));
	return Rz;
}

FatASM* SC_Msg_FMUL(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, ASMReg R4, int D) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_FMUL);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_PrmWithIntReg(Rz, 3, R4));
	(SC_FAT_NumInputSet(Rz, 4, D));
	return Rz;
}

FatASM* SC_Msg_FNC(Message* Self, ASMReg R1, int JUMP, int Prm1, int Prm2) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_FNC);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_NumInputSet(Rz, 1, JUMP));
	(SC_FAT_NumInputSet(Rz, 2, Prm1));
	(SC_FAT_NumInputSet(Rz, 3, Prm2));
	return Rz;
}

FatASM* SC_Msg_FNC3(Message* Self, ASMReg R1, int JUMP, int Prm1, int Prm2) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_FNC3);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_NumInputSet(Rz, 1, JUMP));
	(SC_FAT_NumInputSet(Rz, 2, Prm1));
	(SC_FAT_NumInputSet(Rz, 3, Prm2));
	return Rz;
}

FatASM* SC_Msg_FNCX(Message* Self, ASMReg R1, int Table, int Prm1, int Prm2) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_FNCX);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_NumInputSet(Rz, 1, Table));
	(SC_FAT_NumInputSet(Rz, 2, Prm1));
	(SC_FAT_NumInputSet(Rz, 3, Prm2));
	return Rz;
}

FatASM* SC_Msg_FNCX3(Message* Self, ASMReg R1, int Table, int Prm1, int Prm2) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_FNCX3);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_NumInputSet(Rz, 1, Table));
	(SC_FAT_NumInputSet(Rz, 2, Prm1));
	(SC_FAT_NumInputSet(Rz, 3, Prm2));
	return Rz;
}

void JB_Msg_FSListArg(Message* Self, FastString* Fs, bool AddLine) {
	bool Hasp = ((Message*)JB_Ring_Parent(Self)) != nil;
	Fs->Indent = (Fs->Indent + Hasp);
	AddLine = ((bool)(AddLine | Hasp));
	if (JB_Str_Exists(Self->Name)) {
		AddLine = true;
		JB_FS_LineIndent(Fs);
		JB_FS_AppendByte(Fs, '^');
		JB_FS_AppendQuotedEscape(Fs, Self->Name);
	}
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if (AddLine) {
				JB_FS_LineIndent(Fs);
			}
			JB_FS_SyntaxAppend(Fs, Ch);
			AddLine = true;
			Ch = _Nf1;
		};
		;
	}
	;
	Fs->Indent = (Fs->Indent - Hasp);
	if (Hasp and (JB_FS_Last(Fs, 0) != '\n')) {
		JB_FS_AppendByte(Fs, '\n');
	}
}

void JB_Msg_FSListSep(Message* Self, FastString* Fs, JB_String* Sep) {
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		Message* _firstf2 = Ch;
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if (_firstf2 != Ch) {
				JB_FS_AppendString(Fs, Sep);
			}
			//start;
			JB_FS_SyntaxAppend(Fs, Ch);
			Ch = _Nf1;
		};
		;
	};
}

Message* SC_Msg_FullAfter(Message* Self) {
	Message* P = ((Message*)JB_Ring_Parent(Self));
	Message* N = ((Message*)JB_Ring_NextSib(P));
	while (N) {
		P = N;
		N = ((Message*)JB_Ring_NextSib(P));
	};
	return ((Message*)JB_Ring_FlatAfter(P));
}

void JB_Msg_Func__(Message* Self, FastString* Fs) {
	Message* Ch = ((Message*)JB_Ring_First(Self));
	JB_Incr(Ch);
	if (!Ch) {
		JB_Decr(Ch);
		return;
	}
	JB_FS_SyntaxAppend(Fs, Ch);
	Message* _tmPf0 = ((Message*)JB_Ring_NextSib(Ch));
	JB_Incr(_tmPf0);
	JB_Decr(Ch);
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
}

JB_String* JB_Msg_FuncName(Message* Self) {
	JB_String* _tmPf0 = JB_Syx_LongName(Self->Func);
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_Str_LowerCase(_tmPf0);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int SC_Msg_FuncPos(Message* Self, SCFunction* Fn) {
	{
		Message* Ss = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while ((Ss) and (Ss != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(Ss)));
			if (Ss->Obj == Fn) {
				return Ss->Position;
			}
			Ss = _N_f2;
		};
		;
	}
	;
	return Self->Position;
}

void SC_Msg_FuncWrap(Message* Self, Message* Fnc) {
	(JB_Ring_PrevSibSet(Self, Fnc));
	JB_Tree_SyntaxAppend(((Message*)JB_Ring_Last(Fnc)), Self);
}

Message* SC_Msg_GetAddrButNicer(Message* Self) {
	Message* Rz = nil;
	if (Self->Func == kJB_SyxAcc) {
		Message* L = ((Message*)JB_Ring_Last(Self));
		Message* Num = ((Message*)JB_Ring_First(L));
		if ((JB_Msg_EqualsSyx(Num, kJB_SyxNum, false)) and (JB_Msg_SyntaxEquals(Num, JB_LUB[266], false))) {
			Self->Func = kJB_SyxBra;
			JB_Tree_Remove(L);
			return Self;
		}
	}
	Rz = JB_Syx_OperatorPlus(kJB_SyxBRel, JB_LUB[48]);
	(JB_Ring_NextSibSet(Self, Rz));
	JB_Tree_SyntaxAppend(Rz, Self);
	return Rz;
}

int SC_Msg_GetAddressOf(Message* Self, SCDecl* Type, bool WasCArray) {
	if (!Self) {
		return kJB_kNeedsAddressOf;
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Self, (&_usingf0));
	Message* Addr = JB_Syx_OperatorPlus(kJB_SyxBRel, JB_LUB[48]);
	JB_Incr(Addr);
	JB_SetRef(Addr->Obj, Type);
	JB_FreeIfDead(SC_Msg_ReplaceWith(Self, Addr));
	if (WasCArray) {
		Message* Acc = JB_Msg_Msg(Addr, kJB_SyxAcc, JB_LUB[0]);
		JB_Incr(Acc);
		JB_Tree_SyntaxAppend(Acc, Self);
		Message* _tmPf2 = ({
			Message* __imPf1 = (JB_Syx_Msg(kJB_SyxArr, JB_LUB[0]));
			JB_Incr(__imPf1);
			Message* _tmPf3 = JB_Syx_Msg(kJB_SyxNum, JB_LUB[266]);
			JB_Incr(_tmPf3);
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf3));
			JB_Decr(_tmPf3);
			JB_SafeDecr(__imPf1);
			 __imPf1;
		});
		JB_Incr(_tmPf2);
		JB_Tree_SyntaxAppend(Acc, _tmPf2);
		JB_Decr(Acc);
		JB_Decr(_tmPf2);
	}
	 else {
		JB_Tree_SyntaxAppend(Addr, Self);
	}
	JB_Decr(Addr);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
	JB_MsgPos_Destructor((&_usingf0));
	return kJB_kAddressOfMatch;
}

Message* SC_Msg_GetASMFunc(Message* Self) {
	Message* Op = JB_Msg_NextOfName(Self, kJB_SyxOpp, JB_LUB[241]);
	Message* Adj = JB_Msg_NextOf(Op, kJB_SyxAdj);
	if (Adj) {
		return JB_Msg_NeedSyx(Adj, kJB_SyxFunc);
	}
	return nil;
}

Message* SC_Msg_GetDclName(Message* Self, bool IsConstructor) {
	Message* Rz = nil;
	if (IsConstructor) {
		if ((!JB_Tree_SyntaxEquals(Self, 2, false))) {
			JB_Msg_Fail(Self, JB_LUB[1051]);
			return nil;
		}
	}
	Rz = JB_Msg_NeedSyxInt(Self, kJB_SyxNil, 1);
	if (JB_Msg_EqualsSyx(Rz, kJB_SyxRel, false)) {
		Rz = JB_Msg_NeedSyx(Rz, kJB_SyxThg);
	}
	if (!Rz) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1052]);
		}
	}
	return Rz;
}

SCFunction* SC_Msg_GetFunctionPointer(Message* Self) {
	SCDecl* D = ((SCDecl*)JB_Object_FastAs(Self->Obj, &SCDeclData));
	if (!D) {
		return nil;
	}
	if (SC_Decl_IsNormal(D)) {
		SCClass* T = D->Type;
		return T->FuncProto;
	}
	return nil;
}

Message* SC_Msg_GetMarker(Message* Self, JB_String* S) {
	{
		Message* A = ((Message*)JB_Ring_First(Self));
		while (A) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(A)));
			if (SC_Msg_OperatorIsTmp(A, S)) {
				return A;
			}
			A = _Nf1;
		};
		;
	}
	;
	return nil;
}

Message* SC_Msg_GetTypeLimiter(Message* Self) {
	if (!Self) {
		return nil;
	}
	Message* Rel = ((Message*)JB_Ring_Parent(Self));
	if (((JB_Msg_EqualsSyx(Rel, kJB_SyxRel, false))) and (JB_Tree_IsLast(Self) and (!(JB_Msg_OperatorIn(Rel, kJB_SyxDecl))))) {
		return Rel;
	}
	return nil;
}

Message* JB_Msg_GiveArg(Message* Self) {
	Message* R = ((Message*)JB_Ring_Last(Self));
	if (JB_Msg_EqualsSyx(R, kJB_SyxArg, false)) {
		return R;
	}
	return JB_Msg_Msg(Self, kJB_SyxArg, JB_LUB[0]);
}

FatASM* SC_Msg_GMEM(Message* Self, ASMReg R1, int Value) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_GMEM);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_NumInputSet(Rz, 1, Value));
	return Rz;
}

Message* JB_Msg_GoIntoInvisArg(Message* Self, Message* Tmp, int Pos) {
	int I = JB_int_OperatorAlign(((int)Self->Indent), 4);
	Syntax F = Tmp->Func;
	if (!((F == kJB_SyxTmp) or ((F == kJB_SyxItem) or (F == kJB_SyxDecl)))) {
		return JB_Tk__ErrorAdd(JB_LUB[979], Tmp->Position);
	}
	Message* It = JB_Tk__MakeInvisArg(Tmp, I);
	if (It) {
		It->Indent = I;
		(JB_Msg_RangeSet(It, ((IntRange)ivec2{Pos, Pos})));
		JB_Tree_SyntaxAppend(It, Self);
		return It;
	}
	return nil;
}

FatASM* SC_Msg_GRAB(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, ASMReg R4) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_GRAB);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_PrmWithIntReg(Rz, 3, R4));
	return Rz;
}

FatASM* SC_Msg_GSTR(Message* Self, ASMReg R1, int Mode, int Add) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_GSTR);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_NumInputSet(Rz, 1, Mode));
	(SC_FAT_NumInputSet(Rz, 2, Add));
	return Rz;
}

FatASM* SC_Msg_GTAB(Message* Self, ASMReg R1, int Mode, int Add) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_GTAB);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_NumInputSet(Rz, 1, Mode));
	(SC_FAT_NumInputSet(Rz, 2, Add));
	return Rz;
}

bool SC_Msg_HasAsmStuff(Message* Self) {
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			Message* Chh = SC_Msg_ASMUnbra(Ch);
			Syntax Fn = Chh->Func;
			if ((Fn != kJB_SyxSheb) and ((Fn != kJB_SyxNum) and (Fn != kJB_SyxChar))) {
				return true;
			}
			Ch = _Nf1;
		};
		;
	}
	;
	return false;
}

Message* SC_Msg_HasOwnBlock(Message* Self) {
	Message* Arg = ((Message*)JB_Ring_Parent(Self));
	if ((!JB_Msg_EqualsSyx(Arg, kJB_SyxRel, false))) {
		return nil;
	}
	Arg = ((Message*)JB_Ring_Parent(Arg));
	if ((!JB_Msg_EqualsSyx(Arg, kJB_SyxDecl, false))) {
		return nil;
	}
	Arg = ((Message*)JB_Ring_Parent(Arg));
	if ((!JB_Msg_EqualsSyx(Arg, kJB_SyxArg, false))) {
		return nil;
	}
	SCArg* Obj = SC_Msg_AsArg(Arg);
	if (Obj and (Obj->TmpMovedOutFor == Self)) {
		return Arg;
	}
	return nil;
}

bool JB_Msg_HasPosition(Message* Self) {
	return Self->Position >= 0;
}

bool SC_Msg_HasSelfAsFirst(Message* Self) {
	Message* D = ((Message*)JB_Ring_First(Self));
	if (D) {
		Message* Msg = SC_Msg_DeclName(D);
		if (Msg) {
			return (JB_Str_Equals(Msg->Name, JB_LUB[180], true));
		}
	}
	return false;
}

void SC_Msg_HateUnusedFuncs(Message* Self) {
	SCImport* Imp = SC_Imp__FindImport(Self->Name);
	if (Imp) {
		Imp->WarnUnusedFuncs = true;
	}
	 else {
		JB_Msg_Expect(Self, Self->Func, JB_LUB[1053]);
	}
}

SCFunction* SC_Msg_IdentifyFunc(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, kJB_SyxTmp, false)) {
		if (!((!JB_Msg_SyntaxEquals(Self, JB_LUB[169], false)) and (!JB_Msg_SyntaxEquals(Self, JB_LUB[166], false)))) {
			return nil;
		}
	}
	JB_Object* Obj = Self->Obj;
	if (JB_Object_FastIsa(Obj, &SCFunctionData)) {
		return ((SCFunction*)Obj);
	}
	return nil;
}

Message* SC_Msg_InBuiltContained(Message* Self, SCDecl* Dcl) {
	SCDecl* Cnt = Dcl->Contains;
	if (!Cnt) {
		JB_Msg_Fail(Self, JB_LUB[920]);
		return nil;
	}
	return JB_Syx_OperatorPlus(kJB_SyxThg, Cnt->Type->Name);
}

Message* SC_Msg_InBuiltSizeOf(Message* Self, SCDecl* Sulf) {
	SCDecl* _tmPf0 = SC_Decl_Constructor(nil, SC_TypeInt);
	JB_Incr(_tmPf0);
	Message* _tmPf1 = SC_NewDeclNum(_tmPf0, SC_Decl_SizeOfQuery(Sulf), JB_LUB[0], false);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* SC_Msg_InBuiltTypeOf(Message* Self, SCDecl* Dcl) {
	return JB_Syx_OperatorPlus(kJB_SyxThg, Dcl->Type->Name);
}

int JB_Msg_IndentScore(Message* Self) {
	int Ind = JB_Msg_CleanIndent(Self);
	if ((JB_Msg_EqualsSyx(Self, kJB_SyxTmp, false)) or (JB_Msg_EqualsSyx(Self, kJB_SyxItem, false))) {
		return Ind + 2;
	}
	if (JB_Msg_EqualsSyx(Self, kJB_SyxArg, false)) {
		return Ind;
	}
	return JB_Msg_CleanIndent(Self);
}

bool JB_Msg_InInvisArg(Message* Self) {
	Message* P = ((Message*)JB_Ring_Parent(Self));
	return ((JB_Msg_EqualsSyx(P, kJB_SyxArg, false))) and (JB_Msg_SyntaxIs(P, kJB__MsgParseFlags_Style2));
}

bool SC_Msg_InitExpand(Message* Self) {
	Message* Rel = ((Message*)JB_Ring_Parent(Self));
	JB_SetRef(Self->Name, JB_LUB[1857]);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Self, (&_usingf0));
	SC_Msg_FixErl(Rel);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
	JB_MsgPos_Destructor((&_usingf0));
	return true;
}

bool SC_Msg_InitRootDecl(Message* Self, Message* Before, SCNode* Name_space) {
	if (!JB_Msg_Expect(Self, kJB_SyxThg, nil)) {
		return nil;
	}
	Message* P = ((Message*)JB_Ring_Parent(Self));
	JB_Incr(P);
	Message* NewDefault = ((Message*)JB_Ternary((JB_Msg_EqualsSyx(P, kJB_SyxRel, false)), ((Message*)JB_Ring_Last(P)), nil));
	JB_Incr(NewDefault);
	JB_Decr(P);
	SCObject* O = SC_Base_LookUpVarRootDecl(Name_space, Self->Name, Self);
	JB_Incr(O);
	if (!JB_Object_Isa(O, &SCDeclData)) {
		JB_Decr(O);
		JB_Decr(NewDefault);
		return nil;
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Self, (&_usingf0));
	SCDecl* Decl = ((SCDecl*)O);
	JB_Incr(Decl);
	JB_Decr(O);
	if (!NewDefault) {
		if (!SC_Decl_IsNormal(Decl)) {
			JB_Decr(Decl);
			JB_MsgPos_Destructor((&_usingf0));
			JB_Decr(NewDefault);
			return true;
		}
		JB_SetRef(NewDefault, SC_Decl_CreateDefault(Decl, Self, true));
		if (NewDefault and Decl->Contains) {
			JB_SetRef(NewDefault, SC_Decl_WriteTypeCast(Decl, NewDefault));
			JB_SetRef(NewDefault->Obj, nil);
		}
	}
	JB_Decr(Decl);
	if (NewDefault) {
		if (!SC_Msg_IsNilOrZero(NewDefault)) {
			Message* _tmPf2 = JB_Syx_Msg(kJB_SyxThg, Self->Name);
			JB_Incr(_tmPf2);
			Message* _tmPf1 = SC_NewRel((_tmPf2), NewDefault, JB_LUB[241]);
			JB_Incr(_tmPf1);
			JB_Decr(_tmPf2);
			(JB_Ring_PrevSibSet(Before, _tmPf1));
			JB_Decr(_tmPf1);
		}
	}
	JB_Decr(NewDefault);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
	JB_MsgPos_Destructor((&_usingf0));
	return true;
}

void SC_Msg_InsertAfter(Message* Self, Message* Ins, Message* After) {
	if (After) {
		(JB_Ring_NextSibSet(After, Ins));
	}
	 else {
		(JB_Ring_FirstSet(Self, Ins));
	}
}

void SC_Msg_InsertBefore(Message* Self, Message* J, Message* Ch) {
	if (JB_Tree_OperatorIn(Ch, Self)) {
		(JB_Ring_PrevSibSet(Ch, J));
	}
	 else {
		(JB_Ring_LastSet(Self, J));
	}
}

void SC_Msg_InsertMainArgs(Message* Self, Message* Prms) {
	JB_String* Usage = SC_Msg_CollectUsage(Prms);
	Macro* FirstArg = JB_Macro_ConstructorStr(nil, (JB_LUB[2033]));
	if (SC_Msg_MainArgsCanBeZero(Prms)) {
		JB_Tree_Remove(((Message*)JB_Ring_Last(JB_Macro_Source(FirstArg))));
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Prms, (&_usingf0));
	Array* _tmPf1 = (JB_Array_Constructor0(nil));
	JB_Array_SyntaxAppend(_tmPf1, JB_Str_Msg(Usage));
	JB_Msg_AppendMacro(Self, FirstArg, _tmPf1);
	int I = 0;
	int Found = 0;
	{
		Message* Ch = ((Message*)JB_Ring_First(Prms));
		while (Ch) {
			Message* _Nf3 = ((Message*)JB_Ring_NextSib(Ch));
			Found = (Found | SC_Msg_MainOneArg(Ch, Self, I++, Found));
			Ch = _Nf3;
		};
		;
	}
	;
	if (!(Found & 1)) {
		JB_FreeIfDead(SC_Macro_clean(SC__Macros_MainArgNoNE));
		Array* _tmPf4 = (JB_Array_Constructor0(nil));
		JB_Array_SyntaxAppend(_tmPf4, JB_int_Msg(I));
		JB_Msg_AppendMacro(Self, SC__Macros_MainArgNoNE, _tmPf4);
	}
	JB_Tree_SyntaxAppend(Self, JB_Str_ParseJbin(((JB_LUB[2034])), 1073741824));
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Prms);
	JB_MsgPos_Destructor((&_usingf0));
}

SCFunction* SC_Msg_InsideFunc(Message* Self) {
	{
		Message* Ch = Self;
		while (Ch) {
			if (JB_Msg_EqualsSyx(Ch, kJB_SyxTmp, false)) {
				SCFunction* Fn = SC_Msg_AsFunc(Ch);
				if (Fn) {
					return Fn;
				}
			}
			Ch = ((Message*)JB_Ring_Parent(Ch));
		};
		;
	}
	;
	return nil;
}

int64 JB_Msg_IntRange(Message* Self, int StrStart, int64 Low, int64 High) {
	int64 I = JB_Msg_Int(Self, StrStart);
	if ((I >= Low) and (I <= High)) {
		return I;
	}
	if (true) {
		JB_Msg_Fail(Self, JB_LUB[981]);
	}
	return 0;
}

int64 JB_Msg_Int(Message* Self, int StrStart) {
	if (Self) {
		Message* F = ((Message*)JB_Ring_First(Self));
		if ((!F) or (!JB_Msg_EqualsSyx(Self, kJB_SyxUnit, false))) {
			return JB_Str_TextIntegerSection(Self->Name, StrStart, Self);
		}
		if (JB_Msg_SyntaxEquals(Self, JB_LUB[370], false)) {
			return JB_Str_HexIntegerSection(F->Name, StrStart, F);
		}
		Float64 Mul = JB_Str_TextDouble(F->Name, nil);
		if (JB_Msg_SyntaxEquals(Self, JB_LUB[800], false)) {
			Mul = (Mul * ((Float64)1024));
		}
		 else if (JB_Msg_SyntaxEquals(Self, JB_LUB[801], false)) {
			Mul = (Mul * ((Float64)1048576));
		}
		 else if (JB_Msg_SyntaxEquals(Self, JB_LUB[802], false)) {
			Mul = (Mul * ((Float64)1073741824));
		}
		 else {
			if (true) {
				JB_Msg_Fail(Self, JB_LUB[803]);
			}
			Mul = 0.0f;
		}
		return ((int64)Mul);
	}
	return 0;
}

void SC_Msg_IntoVariable(Message* Self, SCNode* Name_space, NameAndMsg* Rz) {
	Message* P = SC_Msg_NiceParent(Self);
	JB_Incr(P);
	Message* Place = SC_Msg_IsInDeclInBlock(P);
	JB_Incr(Place);
	if (Place) {
		Message* _tmPf0 = ((Message*)JB_Ring_First(P));
		JB_Incr(_tmPf0);
		Message* NameMsg = SC_Msg_UseNonRefChangers(_tmPf0, false);
		JB_Incr(NameMsg);
		JB_Decr(_tmPf0);
		if ((JB_Msg_EqualsSyx(NameMsg, kJB_SyxThg, false))) {
			JB_SetRef(Rz->Name, NameMsg->Name);
			JB_SetRef(Rz->Arg, JB_Msg_Ancestor(Place, kJB_SyxArg));
			JB_SetRef(Rz->Msg, ((Message*)JB_Ring_NextSib(Place)));
			JB_Decr(NameMsg);
			JB_Decr(Place);
			JB_Decr(P);
			return;
		}
		JB_Decr(NameMsg);
	}
	JB_Decr(Place);
	Message* Block = SC_Msg_CreateOwnBlock(Self);
	JB_Incr(Block);
	if (!Block) {
		memzero((Rz), 24);
		JB_Decr(Block);
		JB_Decr(P);
		return;
	}
	JB_String* Name = SC_UniqueTmpVar(Name_space, JB_LUB[1830]);
	JB_Incr(Name);
	Message* _tmPf1 = JB_Syx_Msg(kJB_SyxThg, Name);
	JB_Incr(_tmPf1);
	JB_SetRef(P, SC_NewEqRelWithMsgMsg(_tmPf1, Self));
	JB_Decr(_tmPf1);
	SCArg* Arg = SC_Msg_AsArg(Block);
	JB_Incr(Arg);
	Message* Decl = JB_Msg_Msg(Block, kJB_SyxDecl, JB_LUB[0]);
	JB_Incr(Decl);
	JB_Msg_AppendSyx(Decl, kJB_SyxEmb, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Decl, P);
	SC_Msg_CollectFromBody(Decl, Arg);
	JB_Decr(Decl);
	Message* _tmPf2 = ((Message*)JB_Ring_Parent(Block));
	JB_Incr(_tmPf2);
	JB_SetRef(_tmPf2->Obj, SC_Base_SyntaxAccessWithStr(Arg, Name));
	JB_Decr(Arg);
	JB_Decr(_tmPf2);
	Message* Last = SC_NewRejoin();
	JB_Incr(Last);
	Message* RetVal = JB_Msg_Msg(Last, kJB_SyxThg, Name);
	JB_Incr(RetVal);
	JB_SetRef(RetVal->Obj, P->Obj);
	JB_Decr(P);
	JB_Decr(RetVal);
	JB_Tree_SyntaxAppend(Block, Last);
	JB_SetRef(Rz->Msg, Last);
	JB_Decr(Last);
	JB_SetRef(Rz->Arg, Block);
	JB_Decr(Block);
	JB_SetRef(Rz->Name, Name);
	JB_Decr(Name);
}

int SC_Msg_IntSmallness(Message* Self, SCDecl* T) {
	int Rz = 0;
	if (Self and (T and (Self->Func == kJB_SyxNum))) {
		if (JB_Str_ContainsString(Self->Name, JB_LUB[25])) {
			if (SC_Str_IsZero(Self->Name)) {
				return kJB_kTypeCastFromZero;
			}
			return 0;
		}
		int64 I = JB_Msg_Int(Self, 0);
		if ((I <= 16777216) and (I >= -16777216)) {
			Rz = (Rz | kJB_kTypeCastFromSmallInt);
		}
		if (!I) {
			Rz = (Rz | kJB_kTypeCastFromZero);
		}
	}
	return Rz;
}

bool SC_Msg_IsAddr(Message* Self) {
	return (Self) and ((Self->Func == kJB_SyxBRel) and ((JB_Str_Equals(Self->Name, JB_LUB[48], false))));
}

MaybeBool SC_Msg_IsAlwaysBool(Message* Self) {
	SCDecl* D = ((SCDecl*)JB_Object_FastAs(Self->Obj, &SCDeclData));
	if (D) {
		if (SC_Decl_IsConstOf(D, SC_FalseBool)) {
			return ((MaybeBool)false);
		}
		if (SC_Decl_IsConstOf(D, SC_TrueBool)) {
			return ((MaybeBool)true);
		}
	}
	return ((MaybeBool)8);
}

bool SC_Msg_IsAlwaysFalse(Message* Self) {
	return JB_MaybeBool_KnownFalse(SC_Msg_IsAlwaysBool(Self));
}

bool SC_Msg_IsAssignable(Message* Self) {
	Syntax F = Self->Func;
	return (F != kJB_SyxFunc) and ((F != kJB_SyxType) and (F != kJB_SyxNum));
}

bool SC_Msg_IsBehaviour(Message* Self) {
	return (JB_Str_Equals(Self->Name, JB_LUB[75], false)) or (JB_Str_Equals(Self->Name, JB_LUB[76], false));
}

bool SC_Msg_IsClassType(Message* Self) {
	return (JB_Msg_SyntaxEquals(Self, JB_LUB[169], true)) or ((JB_Msg_SyntaxEquals(Self, JB_LUB[168], true)) or ((JB_Msg_SyntaxEquals(Self, JB_LUB[37], true)) or (JB_Msg_SyntaxEquals(Self, JB_LUB[236], true))));
}

bool SC_Msg_IsFirstOfSetRel(Message* Self) {
	return JB_Tree_IsFirst(Self) and SC_Msg_IsSetRel(((Message*)JB_Ring_Parent(Self)));
}

bool SC_Msg_IsFuncDot(Message* Self) {
	Message* L = ((Message*)JB_Ring_Last(Self));
	return L and (L->Func == kJB_SyxPrm);
}

Message* SC_Msg_IsInDeclInBlock(Message* Self) {
	if ((JB_Msg_EqualsSyx(Self, kJB_SyxRel, false))) {
		Message* P = SC_Msg_NiceParent(Self);
		if (((JB_Msg_EqualsSyx(P, kJB_SyxDecl, false))) and (JB_Msg_OperatorIn(P, kJB_SyxArg))) {
			return P;
		}
	}
	return nil;
}

bool SC_Msg_IsInt(Message* Self) {
	return ((JB_Msg_EqualsSyx(Self, kJB_SyxNum, false))) and (!JB_Ind_SyntaxCast(JB_Str_FindByte(Self->Name, '.', 0, JB_int__Max())));
}

bool SC_Msg_IsLinkageType(Message* Self) {
	return (JB_Msg_SyntaxEquals(Self, JB_LUB[237], true));
}

bool SC_Msg_IsModuleType(Message* Self) {
	return (JB_Msg_SyntaxEquals(Self, JB_LUB[166], true)) or (JB_Msg_SyntaxEquals(Self, JB_LUB[238], true));
}

bool SC_Msg_IsNilOrZero(Message* Self) {
	Syntax F = Self->Func;
	JB_String* N = Self->Name;
	if (F == kJB_SyxThg) {
		if ((Self->Obj == SC_TypeNil) or (Self->Obj == SC_FalseBool)) {
			return true;
		}
		if ((JB_Str_Equals(N, JB_LUB[36], false)) or (JB_Str_Equals(N, JB_LUB[32], false))) {
		}
	}
	if (F == kJB_SyxNum) {
		return SC_Msg_IsZero(Self);
	}
	if (F == kJB_SyxArg) {
		return (!JB_Ring_HasChildren(Self));
	}
	return false;
}

int SC_Msg_IsNowNil(Message* Self) {
	SCDecl* D = ((SCDecl*)Self->Obj);
	if (D) {
		if (D == SC_TypeNil) {
			return 1;
		}
		if (SC_Decl_NilCurr(D) == kSC__NilState_Nilish) {
			return 2;
		}
	}
	return 0;
}

SCFunction* SC_Msg_IsParentConCall(Message* Self) {
	if ((!JB_Msg_EqualsSyx(Self, kJB_SyxFunc, false))) {
		return nil;
	}
	SCFunction* F = SC_Msg_MsgFunc(Self);
	if (F and SC_Func_SyntaxIs(F, kSC__FunctionType_ConOrDes)) {
		return F;
	}
	return nil;
}

bool SC_Msg_IsProperty(Message* Self) {
	return SC_DotUseType_SyntaxIs(SC_Msg_DotType(Self), kSC__DotUseType_Property);
}

bool SC_Msg_IsReffer(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, kJB_SyxFunc, false)) {
		Message* L = ((Message*)JB_Ring_Last(Self));
		if (L) {
			SCFunction* Fn = SC_Msg_AsFunc(L);
			if (Fn) {
				return SC_Func_SyntaxIs(Fn, kSC__FunctionType_Reffer);
			}
		}
	}
	return false;
}

bool SC_Msg_IsReturnOrRejoin(Message* Self) {
	return ((JB_Msg_EqualsSyx(Self, kJB_SyxTmp, false))) and ((JB_Msg_SyntaxEquals(Self, JB_LUB[239], false)) or (JB_Msg_SyntaxEquals(Self, JB_LUB[240], false)));
}

Message* SC_Msg_IsSetIntoPlace(Message* Self) {
	Message* P = SC_Msg_NiceParent(Self);
	if (SC_Msg_IsSetRel(P)) {
		return ((Message*)JB_Ring_First(P));
	}
	return nil;
}

Message* SC_Msg_IsSetIntoVar(Message* Self) {
	Message* Thg = SC_Msg_IsSetIntoPlace(Self);
	if ((JB_Msg_EqualsSyx(Thg, kJB_SyxThg, false))) {
		return Thg;
	}
	return nil;
}

bool SC_Msg_IsSetRel(Message* Self) {
	if ((!JB_Msg_EqualsSyx(Self, kJB_SyxRel, false))) {
		return nil;
	}
	Message* S = ((Message*)JB_Tree_Second(Self));
	if (S) {
		return ((JB_Str_Equals(S->Name, JB_LUB[241], false)));
	}
	return false;
}

bool SC_Msg_IsSettablePlace(Message* Self) {
	Message* P = ((Message*)JB_Ring_Parent(Self));
	while (JB_Msg_EqualsSyx(P, kJB_SyxBra, false)) {
		Self = P;
		P = ((Message*)JB_Ring_Parent(P));
	};
	return SC_Msg_IsFirstOfSetRel(Self);
}

bool SC_Msg_IsStatementExpr(Message* Self) {
	return SC_Msg_ASMType(Self) == kSC__ASMType_kStatExpr;
}

bool JB_Msg_IsString(Message* Self) {
	if (Self) {
		return JB_Syx_IsString(Self->Func);
	}
	return false;
}

bool SC_Msg_IsTern(Message* Self) {
	return (JB_Msg_EqualsSyx(Self, kJB_SyxFunc, false)) and (JB_Msg_EqualsSyx(((Message*)JB_Ring_First(Self)), kJB_SyxList, false));
}

bool JB_Msg_IsTypeOfDecl(Message* Self) {
	return JB_Msg_WithinType(Self, 1);
}

bool SC_Msg_IsVarAltered(Message* Self, JB_String* Name) {
	{
		Message* Msg = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while ((Msg) and (Msg != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(Msg)));
			if (((JB_Msg_EqualsSyx(Msg, kJB_SyxRel, false))) and ((JB_Msg_OperatorIn(Msg, kJB_SyxArg)) and (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(Msg)), Name)))) {
				return true;
			}
			Msg = _N_f2;
		};
		;
	}
	;
	return false;
}

bool SC_Msg_IsVarUseableInLoop(Message* Self, JB_String* Name) {
	if (JB_Str_Equals(Name, JB_LUB[180], false)) {
		return false;
	}
	return SC_Msg_IsVarAltered(Self, Name);
}

bool SC_Msg_IsZero(Message* Self) {
	return ((JB_Msg_EqualsSyx(Self, kJB_SyxNum, false))) and (SC_Str_IsZero(Self->Name));
}

void JB_Msg_Item__(Message* Self, FastString* Fs) {
	Message* Ch = ((Message*)JB_Ring_First(Self));
	JB_Incr(Ch);
	if (!Ch) {
		JB_Decr(Ch);
		return;
	}
	JB_FS_SyntaxAppend(Fs, Ch);
	JB_FS_AppendString(Fs, JB_LUB[77]);
	Message* _tmPf0 = ((Message*)JB_Ring_NextSib(Ch));
	JB_Incr(_tmPf0);
	JB_Decr(Ch);
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
}

FatASM* SC_Msg_JBAN(Message* Self, ASMReg R1, int Jmp) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_JBAN);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_JumpInputSet(Rz, 1, Jmp));
	if (((Jmp << 13) >> 13) != Jmp) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1045]);
		}
	}
	return Rz;
}

bool JB_Msg_jbinTest(Message* Self) {
	JB_String* _tmPf0 = JB_Msg_RenderJbin(Self, JB_LUB[0], nil);
	JB_Incr(_tmPf0);
	Message* Msg = JB_Str_ParseJbin(_tmPf0, 1073741824);
	JB_Incr(Msg);
	JB_Decr(_tmPf0);
	bool _tmPf1 = JB_Msg__TreeCompare(Self, Msg, false);
	JB_Decr(Msg);
	return _tmPf1;
}

FatASM* SC_Msg_JBOR(Message* Self, ASMReg R1, int Jmp) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_JBOR);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_JumpInputSet(Rz, 1, Jmp));
	if (((Jmp << 13) >> 13) != Jmp) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1045]);
		}
	}
	return Rz;
}

JB_String* JB_Msg_JDB2_(Message* Self, int Flags, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	if (Flags & 1) {
		JB_FS_AppendString(Fs, JB_LUB[357]);
	}
	JB_String* _tmPf2 = JB_Syx_Name(Self->Func);
	JB_Incr(_tmPf2);
	JB_FS_AppendString(Fs, _tmPf2);
	JB_Decr(_tmPf2);
	JB_FS_AppendByte(Fs, ' ');
	if (((JB_String*)JB_Str_Exists(Self->Name))) {
		JB_String* _tmPf3 = ((JB_String*)JB_Ternary(Flags & 2, JB_Str_Range(Self->Name, 0, 32), Self->Name));
		JB_Incr(_tmPf3);
		JB_FS_AppendQuotedEscape(Fs, _tmPf3);
		JB_Decr(_tmPf3);
	}
	if (JB_Ring_HasChildren(Self)) {
		(++Fs->Indent);
		{
			Message* Ch = ((Message*)JB_Ring_First(Self));
			JB_Incr(Ch);
			while (Ch) {
				Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
				JB_Incr(_Nf1);
				JB_FS_LineIndent(Fs);
				JB_FreeIfDead(JB_Msg_JDB2_(Ch, Flags, Fs));
				JB_SetRef(Ch, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(Ch);
			;
		}
		;
		(--Fs->Indent);
		if (Flags & 1) {
			JB_FS_LineIndent(Fs);
		}
	}
	if (Flags & 1) {
		JB_FS_AppendString(Fs, JB_LUB[358]);
	}
	JB_String* _tmPf4 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf4);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

__lib__ JB_String* jdb4(Message* Self) {
	//visible;
	JB_String* _tmPf0 = SC_Msg_JDB4_(Self, nil);
	JB_Incr(_tmPf0);
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
	return JB_LUB[0];
}

JB_String* SC_Msg_JDB4_(Message* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_String* _tmPf2 = JB_Syx_Name(Self->Func);
	JB_Incr(_tmPf2);
	JB_FS_AppendString(Fs, _tmPf2);
	JB_Decr(_tmPf2);
	JB_FS_AppendByte(Fs, ' ');
	if (((JB_String*)JB_Str_Exists(Self->Name))) {
		JB_FS_AppendByte(Fs, '"');
		JB_String* _tmPf3 = JB_Str_Range(Self->Name, 0, 32);
		JB_Incr(_tmPf3);
		JB_FS_AppendEscape(Fs, _tmPf3);
		JB_Decr(_tmPf3);
		JB_FS_AppendByte(Fs, '"');
	}
	if (Self->Obj) {
		if (!JB_Object_Isa(Self->Obj, &MessageData)) {
			JB_FS_AppendByte(Fs, ' ');
			JB_FreeIfDead(JB_ObjRender(Self->Obj, Fs));
		}
	}
	if (JB_Ring_HasChildren(Self)) {
		(++Fs->Indent);
		{
			Message* Ch = ((Message*)JB_Ring_First(Self));
			JB_Incr(Ch);
			while (Ch) {
				Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
				JB_Incr(_Nf1);
				JB_FS_LineIndent(Fs);
				JB_FreeIfDead(SC_Msg_JDB4_(Ch, Fs));
				JB_SetRef(Ch, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(Ch);
			;
		}
		;
		(--Fs->Indent);
		JB_FS_LineIndent(Fs);
	}
	JB_String* _tmPf4 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf4);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_String* JB_Msg_JDB_(Message* Self, FastString* Fs_in, int Flags) {
	return JB_Msg_JDB2_(Self, Flags, Fs_in);
}

FatASM* SC_Msg_JMPC(Message* Self, ASMReg R1, int K, int Jmp) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_JMPC);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_NumInputSet(Rz, 1, K));
	(SC_FAT_JumpInputSet(Rz, 2, Jmp));
	if (((Jmp << 22) >> 22) != Jmp) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1045]);
		}
	}
	return Rz;
}

FatASM* SC_Msg_JMPE(Message* Self, ASMReg R1, ASMReg R2, int Jmp) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_JMPE);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_JumpInputSet(Rz, 2, Jmp));
	if (((Jmp << 18) >> 18) != Jmp) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1045]);
		}
	}
	return Rz;
}

FatASM* SC_Msg_JMPF(Message* Self, ASMReg R1, ASMReg R2, int Cmp, int Jmp) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_JMPF);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, Cmp));
	(SC_FAT_JumpInputSet(Rz, 3, Jmp));
	if (((Jmp << 21) >> 21) != Jmp) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1045]);
		}
	}
	return Rz;
}

FatASM* SC_Msg_JMPI(Message* Self, ASMReg R1, ASMReg R2, int Cmp, int Jmp) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_JMPI);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, Cmp));
	(SC_FAT_JumpInputSet(Rz, 3, Jmp));
	if (((Jmp << 21) >> 21) != Jmp) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1045]);
		}
	}
	return Rz;
}

FatASM* SC_Msg_JMPK(Message* Self, ASMReg R1, int K, int Jmp) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_JMPK);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_NumInputSet(Rz, 1, K));
	(SC_FAT_JumpInputSet(Rz, 2, Jmp));
	if (((Jmp << 22) >> 22) != Jmp) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1045]);
		}
	}
	return Rz;
}

FatASM* SC_Msg_JMPN(Message* Self, ASMReg R1, ASMReg R2, int Jmp) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_JMPN);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_JumpInputSet(Rz, 2, Jmp));
	if (((Jmp << 18) >> 18) != Jmp) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1045]);
		}
	}
	return Rz;
}

FatASM* SC_Msg_JSWI(Message* Self, ASMReg R1, ASMReg R2, int Jmp) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_JSWI);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_JumpInputSet(Rz, 2, Jmp));
	if (((Jmp << 18) >> 18) != Jmp) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1045]);
		}
	}
	return Rz;
}

FatASM* SC_Msg_JUMP(Message* Self, int JUMP) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_JUMP);
	(SC_FAT_JumpInputSet(Rz, 0, JUMP));
	if (((JUMP << 8) >> 8) != JUMP) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1045]);
		}
	}
	return Rz;
}

FatASM* SC_Msg_Jump(Message* Self) {
	return SC_Msg_JUMP(Self, 0);
}

void SC_Msg_KinderRemoveAfter(Message* Self) {
	while (true) {
		Message* X = ((Message*)JB_Ring_NextSib(Self));
		if ((!X)) {
			break;
		}
		if (!JB_Msg_SyntaxIs(X, kJB__MsgParseFlags_Inserted)) {
			JB_Msg_Fail(X, JB_LUB[921]);
		}
		JB_Tree_Remove(X);
	};
}

FatASM* SC_Msg_KNSR(Message* Self, ASMReg R1, int Rot, int Inv, int Value) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_KNSR);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_NumInputSet(Rz, 1, Rot));
	(SC_FAT_NumInputSet(Rz, 2, Inv));
	(SC_FAT_NumInputSet(Rz, 3, Value));
	return Rz;
}

FatASM* SC_Msg_KNST(Message* Self, ASMReg R1, int Cond, int Inv, int Value) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_KNST);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_NumInputSet(Rz, 1, Cond));
	(SC_FAT_NumInputSet(Rz, 2, Inv));
	(SC_FAT_NumInputSet(Rz, 3, Value));
	return Rz;
}

FatASM* SC_Msg_KNST2(Message* Self, ASMReg R1, int Cond, int Inv, int Value) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_KNST2);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_NumInputSet(Rz, 1, Cond));
	(SC_FAT_NumInputSet(Rz, 2, Inv));
	(SC_FAT_NumInputSet(Rz, 3, Value));
	return Rz;
}

FatASM* SC_Msg_KNST3(Message* Self, ASMReg R1, int Cond, int Inv, int Value) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_KNST3);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_NumInputSet(Rz, 1, Cond));
	(SC_FAT_NumInputSet(Rz, 2, Inv));
	(SC_FAT_NumInputSet(Rz, 3, Value));
	return Rz;
}

Message* JB_Msg_Last(Message* Self, Syntax Need) {
	Message* Ch = ((Message*)JB_Ring_Last(Self));
	if (Ch and ((!Need) or (JB_Msg_EqualsSyx(Ch, Need, false)))) {
		return Ch;
	}
	JB_Msg_CantFind(Self, Need, nil, Ch);
	return nil;
}

void SC_Msg_LastInBlock(Message* Self, SCBlockage Reason) {
	JB_Tree_RemoveAfter(Self);
	Message* Arg = ((Message*)JB_Ring_Parent(Self));
	(SC_Msg_BlocksSet(Arg, Reason));
	(SC_Msg_BlocksSet(Self, Reason));
	Message* Test = ((Message*)JB_Ring_Parent(Arg));
	if (SC_Msg_OperatorIsTmp(Test, JB_LUB[446])) {
		while (Test) {
			Arg = ((Message*)JB_Ring_PrevSib(Test));
			SCBlockage B = SC_Msg_Blocks(Arg);
			if (!B) {
				return;
			}
			Reason = SC_SCBlockage_BlockCombine(Reason, B);
			Test = ((Message*)JB_Ring_Parent(Arg));
			if (SC_ASMType_SyntaxIs(SC_Msg_ASMType(Test), kSC__ASMType_kIf)) {
				return SC_Msg_LastInBlock(Test, Reason);
			}
			 else {
				(SC_Msg_BlocksSet(Test, Reason));
			}
		};
	}
	if ((Reason == kSC__SCBlockage_Quit) and (((JB_Msg_EqualsSyx(Self, kJB_SyxFunc, false))) and SC_Func__CurrFunc()->ReturnType)) {
		Message* Ret = JB_Msg_Msg(Arg, kJB_SyxTmp, JB_LUB[239]);
		(SC_Msg_ASMTypeSet(Ret, kSC__ASMType_kReturn));
		JB_Tree_SyntaxAppend(Ret, SC_Msg_CreateNil(Ret));
	}
}

void SC_Msg_LastTest(Message* Self) {
	//visible;
	if (JB_f_SyntaxAccess(0.5f)) {
		return;
	}
	 else {
		return;
	}
}

Message* SC_Msg_LastUsedFix(Message* Self) {
	if ((JB_Msg_EqualsSyx(Self, kJB_SyxDecl, false))) {
		Message* Ch = ((Message*)JB_Ring_First(((Message*)JB_Tree_Second(Self))));
		if ((!JB_Msg_EqualsSyx(Ch, kJB_SyxThg, false))) {
			JB_Object_Fail(nil);
			return nil;
		}
		if (SC_Refs__RefBasis(Ch, true) == kSC__Refs_kBasisObj) {
			Message* It = SC_Msg_FindRef(Self, SC__Comp_RefIncr, Ch->Name);
			if (It) {
				return ((Message*)JB_Ring_NextSib(It));
			}
		}
	}
	return ((Message*)JB_Ring_NextSib(Self));
}

int JB_Msg_Length(Message* Self) {
	return JB_Str_Length(Self->Name);
}

void JB_Msg_List__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '(');
	int Count = 0;
	JB_String* Sep = JB_LUB[10];
	if (JB_Msg_SyntaxIs(Self, kJB__MsgParseFlags_Style2)) {
		Sep = JB_LUB[125];
		JB_FS_AppendString(Fs, Sep);
	}
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if ((++Count) > 1) {
				JB_FS_AppendString(Fs, Sep);
			}
			JB_FS_SyntaxAppend(Fs, Ch);
			if (JB_Msg_EqualsSyx(Ch, kJB_SyxItem, false)) {
				(++Count);
			}
			Ch = _Nf1;
		};
		;
	}
	;
	if ((Count == 1) or JB_Msg_SyntaxIs(Self, kJB__MsgParseFlags_Style2)) {
		JB_FS_AppendString(Fs, Sep);
	}
	JB_FS_AppendByte(Fs, ')');
}

Array* SC_Msg_ListAll(Message* Self) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	{
		Message* A = ((Message*)JB_Ring_First(Self));
		while (A) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(A)));
			JB_Array_SyntaxAppend(Rz, A);
			A = _Nf1;
		};
		;
	}
	;
	return Rz;
}

bool JB_Msg_ListViewable(Message* Self) {
	return Self and JB_Syx_ListViewable(Self->Func);
}

JB_String* JB_Msg_Locate(Message* Self) {
	if ((!Self)) {
		return JB_LUB[9];
	}
	JB_String* S = JB_Msg_Render(Self, nil);
	JB_Incr(S);
	JB_String* Fname = JB_Syx_Name(Self->Func);
	JB_Incr(Fname);
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	JB_FreeIfDead(JB_ObjRender(Self->Name, Fs));
	JB_FS_AppendByte(Fs, '@');
	JB_FS_AppendString(Fs, Fname);
	JB_Decr(Fname);
	JB_FS_AppendString(Fs, JB_LUB[501]);
	JB_FS_AppendString(Fs, S);
	JB_Decr(S);
	JB_FS_AppendByte(Fs, '\'');
	if (Self->Position >= 0) {
		JB_FS_AppendString(Fs, JB_LUB[502]);
		JB_FS_AppendInt32(Fs, Self->Position);
		JB_MemoryLayer* _tmPf0 = JB_ObjLayer(Self);
		JB_Incr(_tmPf0);
		JB_Object* R = _tmPf0->Obj;
		JB_Incr(R);
		JB_Decr(_tmPf0);
		if (JB_Object_Isa(R, &JB_StringData)) {
			if (JB_Str_Length(((JB_String*)R))) {
				JB_FS_AppendString(Fs, JB_LUB[491]);
				JB_FS_AppendString(Fs, ((JB_String*)R));
			}
		}
		JB_Decr(R);
	}
	JB_FS_AppendByte(Fs, '\n');
	JB_String* _tmPf1 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf1);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Msg_LoopContinue(Message* Self) {
	SC_Msg_LoopExitter(Self, kSC__ASMType_kContinue, kSC__SCBlockage_Continue);
}

void SC_Msg_LoopExit(Message* Self) {
	SC_Msg_LoopExitter(Self, kSC__ASMType_kExit, kSC__SCBlockage_Exit);
}

void SC_Msg_LoopExitter(Message* Self, int ASMType, SCBlockage ExitCode) {
	SC_Msg_ExpectEmpty(Self);
	(SC_Msg_ASMTypeSet(Self, ASMType));
	SC_Msg_LastInBlock(Self, ExitCode);
}

FatASM* SC_Msg_LUPD(Message* Self, ASMReg R1, ASMReg R2, int Jmp) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_LUPD);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_JumpInputSet(Rz, 2, Jmp));
	if (((Jmp << 18) >> 18) != Jmp) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1045]);
		}
	}
	return Rz;
}

FatASM* SC_Msg_LUPU(Message* Self, ASMReg R1, ASMReg R2, int Jmp) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_LUPU);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_JumpInputSet(Rz, 2, Jmp));
	if (((Jmp << 18) >> 18) != Jmp) {
		if (true) {
			JB_Msg_Fail(Self, JB_LUB[1045]);
		}
	}
	return Rz;
}

Message* JB_Msg_MacroAvoidCopy(Message* Self) {
	if (!JB_Msg_SyntaxIs(Self, kJB__MsgParseFlags_MacroMade)) {
		(JB_Msg_SyntaxIsSet(Self, kJB__MsgParseFlags_MacroMade, true));
		return Self;
	}
	return JB_Msg_Copy(Self, nil);
}

void JB_Msg_MacroCopy(Message* Self, Message* Root, Array* Prms, Message* Dest) {
	{
		Message* V = ((Message*)JB_Ring_First(Self));
		while (V) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(V)));
			JB_Tree_SyntaxAppend(Dest, JB_Msg_MacroPrm(V, Root, Prms, Dest));
			V = _Nf1;
		};
		;
	};
}

void SC_Msg_MacroFixSub(Message* Self, SCDecl* Contains) {
	{
		Message* S = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while ((S) and (S != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(S)));
			if (((JB_Msg_EqualsSyx(S, kJB_SyxSThg, false)) and (JB_Msg_SyntaxEquals(S, JB_LUB[26], false))) and JB_Msg_WithinType(S, 3)) {
				if ((!Contains)) {
					JB_Msg_Fail(Self, JB_LUB[1709]);
					return;
				}
				JB_FreeIfDead(SC_Msg_ReplaceWith(S, SC_Decl_WriteType(Contains, 0, true)));
			}
			S = _N_f2;
		};
		;
	};
}

Message* JB_Msg_MacroPrm(Message* Self, Message* Root, Array* Prms, Message* Dest) {
	Message* Rz = nil;
	JB_String* N = Self->Name;
	uint C = JB_Str_First(N);
	if ((C == '*') and ((JB_Msg_EqualsSyx(Self, kJB_SyxBRel, false)))) {
		Message* F = ((Message*)JB_Ring_First(Self));
		if ((JB_Msg_SyntaxEquals(F, JB_LUB[162], false)) and (JB_Msg_EqualsSyx(F, kJB_SyxThg, false))) {
			{
				int _if0 = 0;
				while (true) {
					Message* P = ((Message*)JB_Array_Value(Prms, _if0));
					if (P == nil) {
						break;
					}
					if (!JB_Msg_SyntaxIs(P, kJB__MsgParseFlags_MacroMade)) {
						JB_Tree_SyntaxAppend(Dest, JB_Msg_MacroAvoidCopy(P));
					}
					(++_if0);
				};
			}
			;
			return nil;
		}
	}
	if (((C == '_') and (JB_Str_CompareInt(N, 1, false) >= 1)) and JB_Str_IsIntFrom(N, 1)) {
		Message* Oop = ((Message*)JB_Array_Value(Prms, ((int)JB_Str_Int(N))));
		if (!Oop) {
			JB_Msg_Fail(Root, JB_LUB[804]);
			return nil;
		}
		Syntax F = Self->Func;
		if ((F == kJB_SyxDot) or ((F == kJB_SyxSDot) or ((F == kJB_SyxStr) or ((F == kJB_SyxSStr) or (F == kJB_SyxChar))))) {
			return JB_Msg_MacroSame(Self, Oop);
		}
		return JB_Msg_MacroAvoidCopy(Oop);
	}
	Rz = JB_Msg_ConstructorCopy(nil, Self);
	Rz->Position = Root->Position;
	JB_Msg_MacroCopy(Self, Root, Prms, Rz);
	return Rz;
}

Message* JB_Msg_MacroSame(Message* Self, Message* Prm) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Msg_Copy(Self, nil));
	(JB_Msg_SyntaxIsSet(Prm, kJB__MsgParseFlags_MacroMade, true));
	JB_SetRef(Rz->Name, Prm->Name);
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Msg_MainArgsCanBeZero(Message* Self) {
	{
		Message* Dcl = ((Message*)JB_Ring_First(Self));
		while (Dcl) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Dcl)));
			if (!((JB_Msg_EqualsSyx(((Message*)JB_Tree_Second(Dcl)), kJB_SyxRel, false)) or (JB_Msg_EqualsSyx(((Message*)JB_Ring_First(Dcl)), kJB_SyxArr, false)))) {
				return nil;
			}
			Dcl = _Nf1;
		};
		;
	}
	;
	return true;
}

Message* SC_Msg_MainFix(Message* Self) {
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Self, (&_usingf0));
	Message* Prms = ((Message*)JB_Ring_First(Self));
	JB_Incr(Prms);
	if (!Prms) {
		JB_SetRef(Prms, JB_Msg_GiveArg(Self));
		JB_Msg_AppendString(Prms, JB_LUB[2047]);
	}
	JB_SetRef(Self->Name, JB_LUB[537]);
	Message* Fn_src = SC_Str_ParseClean(JB_LUB[2048]);
	JB_Incr(Fn_src);
	Message* Src_arg = ((Message*)JB_Ring_Last(Fn_src));
	JB_Incr(Src_arg);
	Syntax Fn = Prms->Func;
	Message* Inc_arg = nil;
	JB_Incr(Inc_arg);
	if ((Fn == kJB_SyxList) or (Fn == kJB_SyxBra)) {
		JB_SetRef(Inc_arg, JB_Msg_NextOf(Prms, kJB_SyxArg));
		Fn = kJB_SyxPrm;
	}
	 else {
		JB_SetRef(Inc_arg, JB_Msg_NeedSyx(Self, kJB_SyxArg));
	}
	if (Inc_arg) {
		if (Fn == kJB_SyxPrm) {
			SC_Msg_InsertMainArgs(Src_arg, Prms);
		}
		JB_Tree_SyntaxAppend(Fn_src, Inc_arg);
		JB_Msg_ExpectLast(Inc_arg, JB_LUB[0]);
		JB_Tree_Remove(Src_arg);
		JB_Tree_TakeAllFrom(Inc_arg, Src_arg);
	}
	 else {
		JB_SetRef(Fn_src, nil);
	}
	JB_Decr(Prms);
	JB_Decr(Src_arg);
	JB_Decr(Inc_arg);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
	JB_SafeDecr(Fn_src);
	JB_MsgPos_Destructor((&_usingf0));
	return Fn_src;
}

void SC_Msg_MainFix2(Message* Self) {
	Message* M = SC_Msg_MainFix(Self);
	JB_Incr(M);
	if (M) {
		JB_Msg_BecomeMsg(Self, M);
	}
	JB_Decr(M);
}

int SC_Msg_MainOneArg(Message* Self, Message* Arg, int I, int Found) {
	Message* Type = JB_Msg_NeedSyx(Self, kJB_SyxNil);
	Message* Name = JB_Msg_NextOf(Type, kJB_SyxNil);
	if (!Name) {
		return 0;
	}
	bool IsArray = (JB_Msg_EqualsSyx(Type, kJB_SyxArr, false));
	if (IsArray) {
		if (!JB_Msg_ExpectLast(Self, JB_LUB[0])) {
			return 0;
		}
		Type = ((Message*)JB_Ring_First(Type));
	}
	bool MaybeNil = SC_Msg_OperatorIsARel(Type, JB_LUB[603]);
	if (MaybeNil) {
		Type = ((Message*)JB_Ring_First(Type));
	}
	if (!JB_Msg_Expect(Type, kJB_SyxThg, nil)) {
		return 0;
	}
	SCClass* Cls = SC_Comp__SyntaxAccess(Type);
	if (!Cls) {
		return 0;
	}
	if (!MaybeNil) {
		MaybeNil = SC_Class_IsDataTypeOnly(Cls);
	}
	Array* Prms = (JB_Array_Constructor0(nil));
	JB_Array_SyntaxAppend(Prms, Name);
	JB_Array_SyntaxAppend(Prms, Type);
	JB_Array_SyntaxAppend(Prms, JB_int_Msg(I));
	if ((!JB_Array_SyntaxEquals(Prms, 3, false))) {
		return 0;
	}
	if ((Found & 1)) {
		JB_Msg_Fail(Arg, JB_LUB[2004]);
	}
	if (IsArray) {
		JB_Msg_AppendMacro(Arg, SC_Macro_clean(SC__Macros_MainArgArray), Prms);
		return 1;
	}
	if (!JB_Msg_EqualsSyx(Name, kJB_SyxRel, false)) {
		if ((Found & 4)) {
			JB_Msg_Fail(Arg, JB_LUB[2005]);
		}
		if (MaybeNil) {
			JB_Msg_AppendMacro(Arg, SC_Macro_clean(SC__Macros_MainArgBasic), Prms);
		}
		 else {
			JB_Msg_AppendMacro(Arg, SC_Macro_clean(SC__Macros_MainArgBasicReq), Prms);
		}
		return 2;
	}
	Name = JB_Msg_NeedSyx(Name, kJB_SyxThg);
	if (!Name) {
		return 0;
	}
	(JB_Array_ValueSet(Prms, 0, Name));
	Message* Opp = JB_Msg_NextOfName(Name, kJB_SyxOpp, JB_LUB[241]);
	Message* L = JB_Msg_NextOf(Opp, kJB_SyxNil);
	if (L) {
		JB_Array_SyntaxAppend(Prms, L);
	}
	if (!JB_Array_SyntaxEquals(Prms, 4, false)) {
		return 0;
	}
	JB_Msg_AppendMacro(Arg, SC_Macro_clean(SC__Macros_MainArgDefault), Prms);
	return 4;
}

Message* SC_Msg_MakeAccess0(Message* Self) {
	Message* Rz = nil;
	Rz = SC_Msg_WrapWith(Self, kJB_SyxAcc, JB_LUB[0]);
	JB_Msg_AppendNum(JB_Msg_Msg(Rz, kJB_SyxArr, JB_LUB[0]), 0);
	return Rz;
}

void SC_Msg_MakeComment(Message* Self) {
	(SC_Msg_ASMTypeSet(Self, kSC__ASMType_kIgnore));
	Self->Func = kJB_SyxSheb;
	JB_Tree_Clear(Self);
}

void SC_Msg_MakeTaskVar(Message* Self, Message* Con, Message* Before, bool First) {
	Message* Prm = ((Message*)JB_Tree_Second(Con));
	Message* Arg = ((Message*)JB_Ring_NextSib(Prm));
	JB_String* Name = SC_Msg_VarName(Self);
	if (JB_Str_Exists(Name)) {
		if (First) {
			(JB_Ring_PrevSibSet(Before, SC_NewEqRelWithMsgMsg(JB_Syx_OperatorPlus(kJB_SyxSDot, Name), JB_Syx_OperatorPlus(kJB_SyxThg, Name))));
		}
		JB_Tree_SyntaxAppend(Prm, JB_Msg_Copy(Self, nil));
	}
}

void JB_Msg_max__(Message* Self, FastString* Fs) {
	0;
}

FatASM* SC_Msg_MEMZ(Message* Self, ASMReg R1, int Value) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_MEMZ);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_NumInputSet(Rz, 1, Value));
	return Rz;
}

void SC_Msg_MiniArgCpp(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '{');
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		Message* _firstf2 = Ch;
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if (_firstf2 != Ch) {
				JB_FS_AppendString(Fs, JB_LUB[10]);
			}
			//start;
			JB_Msg_Export(Ch, Fs);
			Ch = _Nf1;
		};
		;
	}
	;
	JB_FS_AppendByte(Fs, '}');
}

JB_String* JB_Msg_MiniName(Message* Self, JB_String* Prefix) {
	if (!Self) {
		return JB_LUB[0];
	}
	FastString* _fsf0 = JB_FS_Constructor(nil);
	JB_Incr(_fsf0);
	JB_FS_AppendString(_fsf0, Prefix);
	JB_String* _tmPf1 = JB_Msg_FuncName(Self);
	JB_Incr(_tmPf1);
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(_fsf0, JB_LUB[359]);
	JB_String* _tmPf3 = JB_Str_Range(Self->Name, 0, 64);
	JB_Incr(_tmPf3);
	JB_String* _tmPf2 = JB_Str_UnicodeSync(_tmPf3);
	JB_Incr(_tmPf2);
	JB_Decr(_tmPf3);
	JB_FS_AppendString(_fsf0, _tmPf2);
	JB_Decr(_tmPf2);
	JB_FS_AppendString(_fsf0, JB_LUB[360]);
	JB_String* _tmPf4 = JB_FS_GetResult(_fsf0);
	JB_Incr(_tmPf4);
	JB_Decr(_fsf0);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

void SC_Msg_MiniTran(Message* Self, SCNode* Name_space, JB_String* On) {
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Self, (&_usingf0));
		Message* _tmPf2 = ({
			Message* __imPf1 = (JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0]));
			JB_Incr(__imPf1);
			Message* _tmPf3 = ((Message*)JB_Ring_First(Self));
			JB_Incr(_tmPf3);
			JB_Tree_SyntaxAppend(__imPf1, _tmPf3);
			JB_Decr(_tmPf3);
			JB_SafeDecr(__imPf1);
			 __imPf1;
		});
		JB_Incr(_tmPf2);
		JB_Tree_SyntaxAppend(Self, _tmPf2);
		JB_Decr(_tmPf2);
		Message* _tmPf4 = JB_Syx_Msg(kJB_SyxThg, On);
		JB_Incr(_tmPf4);
		(JB_Ring_FirstSet(Self, (_tmPf4)));
		JB_Decr(_tmPf4);
		Self->Func = kJB_SyxDot;
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_FreeIfDead(SC_TypeOfExpr(Self, Name_space, nil));
}

int SC_Msg_ModelMode(Message* Self) {
	int Rz = 0;
	if ((!JB_Msg_EqualsSyx(Self, kJB_SyxRel, false))) {
		return 0;
	}
	{
		Message* _LoopSrcf3 = ((Message*)JB_Ring_Last(Self));
		JB_Incr(_LoopSrcf3);
		Message* C = _LoopSrcf3;
		JB_Incr(C);
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(_LoopSrcf3));
		JB_Incr(_afterf1);
		while ((C) and (C != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(C));
			JB_Incr(_N_f2);
			if (SC_Msg_OperatorIsThing(C, JB_LUB[922])) {
				Rz = (Rz | 1);
			}
			 else if (SC_Msg_OperatorIsThing(C, JB_LUB[923])) {
				Rz = (Rz | 2);
			}
			 else {
				if (!((JB_Msg_EqualsSyx(C, kJB_SyxRel, false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[517], false)))) {
					JB_Msg_Fail(C, nil);
					JB_Decr(_N_f2);
					JB_Decr(_afterf1);
					JB_Decr(C);
					JB_Decr(_LoopSrcf3);
					return 0;
				}
			}
			JB_SetRef(C, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(C);
		JB_Decr(_afterf1);
		;
		JB_Decr(_LoopSrcf3);
	}
	;
	return Rz;
}

Message* SC_Msg_ModelType(Message* Self) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, Self);
	if (JB_Msg_EqualsSyx(Rz, kJB_SyxRel, false)) {
		JB_SetRef(Rz, ((Message*)JB_Ring_First(Rz)));
	}
	if ((!JB_Msg_EqualsSyx(Rz, kJB_SyxThg, false))) {
		JB_Msg_Fail(Self, nil);
		JB_Decr(Rz);
		return nil;
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Msg_ModuleSrc(Message* Self) {
	JB_String* Name = Self->Name;
	if (JB_Str_Exists(Name)) {
		SCModule* Found = SC_Base_FindModule(SC__Comp_program, Name, nil, 0);
		if (Found) {
			SCClass* C = Found->Cls;
			if (C) {
				SCFunction* Fp = C->FuncProto;
				if (Fp) {
					return Fp->Source;
				}
				return SC_Base_SourceArg(C);
			}
			return Found->Source;
		}
	}
	return nil;
}

void SC_Msg_Move(Message* Self, Message* Last, Message* Into) {
	Message* Curr = Self;
	while (Curr != Last) {
		Message* Next_ = ((Message*)JB_Ring_NextSib(Curr));
		(JB_Ring_FirstSet(Into, Curr));
		Curr = Next_;
	};
}

void SC_Msg_MoveAllAfter(Message* Self, Message* After) {
	while (JB_Ring_HasChildren(Self)) {
		(JB_Ring_NextSibSet(After, ((Message*)JB_Ring_Last(Self))));
	};
}

Message* JB_Msg_Msg(Message* Self, Syntax Fn, JB_String* Name) {
	return JB_Msg_ConstructorRange(nil, Self, Fn, JB__Tk_Using.Position, Name, JB_Str_Length(Name));
}

void JB_Msg_Msg__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[357]);
	JB_Msg_FSListSep(Self, Fs, JB_LUB[10]);
	JB_FS_AppendString(Fs, JB_LUB[503]);
}

SCArg* SC_Msg_MsgArg(Message* Self) {
	{
		Message* Ch = Self;
		while (Ch) {
			JB_Object* O = Ch->Obj;
			if (JB_Object_FastIsa(O, &SCArgData)) {
				return ((SCArg*)O);
			}
			Ch = ((Message*)JB_Ring_Parent(Ch));
		};
		;
	}
	;
	return nil;
}

SCDecl* SC_Msg_MsgDecl(Message* Self) {
	Message* D = SC_Msg_DclExp(Self);
	if (D) {
		return SC_Msg_AsDecl(D);
	}
	return nil;
}

SCFunction* SC_Msg_MsgFunc(Message* Self) {
	if ((JB_Msg_EqualsSyx(Self, kJB_SyxDot, false)) or (JB_Msg_EqualsSyx(Self, kJB_SyxFunc, false))) {
		Message* Sc = ((Message*)JB_Tree_Second(Self));
		if (Sc) {
			return SC_Msg_AsFunc(Sc);
		}
	}
	return nil;
}

SCFunction* SC_Msg_MsgOwningFunc(Message* Self) {
	{
		Message* Ch = Self;
		while (Ch) {
			JB_Object* O = Ch->Obj;
			if (JB_Object_FastIsa(O, &SCArgData)) {
				SCFunction* Pf = ((SCArg*)O)->ParentFunc;
				if (Pf) {
					return Pf;
				}
			}
			 else if ((JB_Object_FastIsa(O, &SCFunctionData)) and ((!JB_Msg_EqualsSyx(Ch, kJB_SyxPrm, false)))) {
				return ((SCFunction*)O);
			}
			Ch = ((Message*)JB_Ring_Parent(Ch));
		};
		;
	}
	;
	return nil;
}

FatASM* SC_Msg_MULK(Message* Self, ASMReg R1, ASMReg R2, int K) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_MULK);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, K));
	return Rz;
}

FatASM* SC_Msg_MULT(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, ASMReg R4) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_MULT);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_PrmWithIntReg(Rz, 3, R4));
	return Rz;
}

void JB_Msg_Name__(Message* Self, FastString* Fs) {
	Message* Ch = ((Message*)JB_Ring_First(Self));
	JB_Incr(Ch);
	if (Ch) {
		JB_FS_AppendString(Fs, Self->Name);
		JB_FS_AppendString(Fs, JB_LUB[361]);
		JB_FS_SyntaxAppend(Fs, Ch);
	}
	 else {
		JB_FS_AppendByte(Fs, '@');
		JB_FS_AppendString(Fs, Self->Name);
	}
	JB_Decr(Ch);
}

Message* SC_Msg_NeedBra(Message* Self) {
	if ((JB_Msg_EqualsSyx(Self, kJB_SyxBra, false)) or JB_Msg_OperatorIn(Self, kJB_SyxBra)) {
		return Self;
	}
	return SC_Msg_WrapWith(Self, kJB_SyxBra, JB_LUB[0]);
}

Message* JB_Msg_NeedFirst(Message* Self) {
	return JB_Msg_NeedSyx(Self, kJB_SyxNil);
}

Message* SC_Msg_NeedMarker(Message* Self, JB_String* S, bool B) {
	Message* Rz = nil;
	Message* F = JB_Msg_FindSyxName(Self, kJB_SyxTmp, S, false);
	if (F) {
		return F;
	}
	Rz = JB_Syx_Msg(kJB_SyxTmp, S);
	if (B) {
		(JB_Ring_LastSet(Self, Rz));
	}
	 else {
		(JB_Ring_FirstSet(Self, Rz));
	}
	return Rz;
}

bool SC_Msg_NeedsPreprocess(Message* Self) {
	if ((JB_Msg_EqualsSyx(Self, kJB_SyxTRel, false)) or SC_Msg_OperatorIsARel(Self, JB_LUB[242])) {
		return true;
	}
	if (JB_Msg_EqualsSyx(Self, kJB_SyxTmp, false)) {
		return (JB_Str_Equals(Self->Name, JB_LUB[243], false)) or ((JB_Str_Equals(Self->Name, JB_LUB[244], false)) or ((JB_Str_Equals(Self->Name, JB_LUB[245], false)) or ((JB_Str_Equals(Self->Name, JB_LUB[246], false)) or ((JB_Str_Equals(Self->Name, JB_LUB[247], false)) or ((JB_Str_Equals(Self->Name, JB_LUB[248], false)) or ((JB_Str_Equals(Self->Name, JB_LUB[249], false)) or (JB_Str_Equals(Self->Name, JB_LUB[250], false))))))));
	}
	if ((!JB_Msg_EqualsSyx(Self, kJB_SyxRel, false))) {
		return nil;
	}
	Message* L = ((Message*)JB_Ring_First(Self));
	if (((JB_Msg_EqualsSyx(L, kJB_SyxRel, false))) and ((JB_Msg_SyntaxEquals(((Message*)JB_Ring_NextSib(L)), JB_LUB[251], false)))) {
		return ((JB_Msg_SyntaxEquals(((Message*)JB_Tree_Second(L)), JB_LUB[241], false))) and ((JB_Msg_SyntaxEquals(((Message*)JB_Tree_Second(((Message*)JB_Ring_Last(Self)))), JB_LUB[241], false)));
	}
	return false;
}

Message* SC_Msg_Negate(Message* Self) {
	Message* Rz = nil;
	Message* Upon = Self;
	Syntax F = Self->Func;
	if (F == kJB_SyxThg) {
		return SC_Msg_NegateThg(Self);
	}
	if (F == kJB_SyxBra) {
		Upon = SC_Msg_UnBra(Self);
		if (Upon->Func == kJB_SyxThg) {
			JB_FreeIfDead(SC_Msg_NegateThg(Upon));
			JB_SetRef(Self->Obj, Upon->Obj);
			return Self;
		}
	}
	if (SC_Msg_OperatorIsBRel(Upon, JB_LUB[174])) {
		JB_Msg_BecomeStr(Upon, kJB_SyxBra, JB_LUB[0]);
		return Self;
	}
	if (Upon->Func == kJB_SyxRel) {
		Message* Opmsg = ((Message*)JB_Tree_Second(Upon));
		SCOperator* Op = ((SCOperator*)JB_Dict_Value0(SC__Opp_Dict, Opmsg->Name));
		if (Op) {
			SCOperator* Nega = Op->Opposite;
			if (Nega) {
				SC_Msg_BecomeWithOpp(Opmsg, Nega);
				return Self;
			}
		}
	}
	if (F == kJB_SyxBra) {
		JB_Msg_BecomeStr(Self, kJB_SyxBRel, JB_LUB[174]);
		return Self;
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Self, (&_usingf0));
	Rz = SC_Msg_WrapWith(Self, kJB_SyxBRel, JB_LUB[174]);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
	JB_MsgPos_Destructor((&_usingf0));
	return Rz;
}

Message* SC_Msg_NegateThg(Message* Self) {
	if (JB_Str_Equals(Self->Name, JB_LUB[31], false)) {
		JB_SetRef(Self->Name, JB_LUB[32]);
		JB_SetRef(Self->Obj, SC_FalseBool);
		return Self;
	}
	if (JB_Str_Equals(Self->Name, JB_LUB[32], false)) {
		JB_SetRef(Self->Name, JB_LUB[31]);
		JB_SetRef(Self->Obj, SC_TrueBool);
		return Self;
	}
	return SC_Msg_WrapWith(Self, kJB_SyxBRel, JB_LUB[174]);
}

Message* JB_Msg_NextOfName(Message* Self, Syntax Need, JB_String* Name) {
	Message* Ch = JB_Msg_NextOf(Self, Need);
	if (!Ch) {
		return nil;
	}
	if (JB_Msg_SyntaxEquals(Ch, Name, true)) {
		return Ch;
	}
	JB_Msg_CantFind(Self, Need, nil, Ch);
	return nil;
}

Message* JB_Msg_NextOf(Message* Self, Syntax Need) {
	if (Self) {
		Message* Ch = ((Message*)JB_Ring_NextSib(Self));
		if (Ch and ((!Need) or (JB_Msg_EqualsSyx(Ch, Need, false)))) {
			return Ch;
		}
		JB_Msg_CantFind(Self, Need, nil, Ch);
	}
	return nil;
}

void SC_Msg_Next_Index(Message* Self, SCIterator* Iter, Message* Node2) {
	Message* I = Iter->Index;
	JB_Incr(I);
	if (I) {
		Message* _tmPf1 = JB_Msg_Copy(I, Node2);
		JB_Incr(_tmPf1);
		Message* _tmPf2 = ((Message*)JB_Ring_Last(Self));
		JB_Incr(_tmPf2);
		Message* _tmPf0 = SC_NewEqRelWithMsgMsg(_tmPf1, _tmPf2);
		JB_Incr(_tmPf0);
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf2);
		(JB_Ring_PrevSibSet(Self, _tmPf0));
		JB_Decr(_tmPf0);
	}
	 else {
	}
	JB_Decr(I);
}

Message* SC_Msg_NextPath(Message* Self, Message* Before, Message* Path) {
	JB_String* Sp = SC_Msg_File(Self);
	if (!JB_Str_Equals(JB_Msg_FirstName(Path), Sp, false)) {
		Path = SC_Msg_FileMark(Self);
		(JB_Ring_PrevSibSet(Before, Path));
	}
	return Path;
}

SCDecl* SC_Msg_NiceIsFlagSyntax(Message* Self, Message* Opch, Message* RN, SCNode* Name_space, Message* Side) {
	JB_Incr(Side);
	SCDecl* Cls = SC_TypeOfExpr(Self, Name_space, nil);
	JB_Incr(Cls);
	if (!Cls) {
		JB_Decr(Side);
		JB_Decr(Cls);
		return nil;
	}
	if (!SC_Decl_IsMostlyNormal(Cls)) {
		JB_Msg_Fail(Self, JB_LUB[1290]);
		JB_Decr(Side);
		JB_Decr(Cls);
		return nil;
	}
	SCClass* Ty = Cls->Type;
	JB_Incr(Ty);
	JB_Decr(Cls);
	SCFunction* Fn = Ty->TheIsFunc;
	JB_Incr(Fn);
	if (!Fn) {
		FastString* _fsf1 = JB_FS_Constructor(nil);
		JB_Incr(_fsf1);
		JB_FS_AppendString(_fsf1, Ty->Name);
		JB_FS_AppendString(_fsf1, JB_LUB[1291]);
		JB_String* _tmPf2 = JB_FS_GetResult(_fsf1);
		JB_Incr(_tmPf2);
		JB_Decr(_fsf1);
		JB_Msg_Fail(Opch, _tmPf2);
		JB_Decr(_tmPf2);
		JB_Decr(Side);
		JB_Decr(Fn);
		JB_Decr(Ty);
		return nil;
	}
	JB_Decr(Ty);
	SCDecl* Arg1 = ((SCDecl*)JB_Array_Value(Fn->Args, 1));
	JB_Incr(Arg1);
	if (!Arg1) {
		JB_Msg_Fail(Fn->Source, JB_LUB[1292]);
		JB_Decr(Side);
		JB_Decr(Arg1);
		JB_Decr(Fn);
		return nil;
	}
	JB_Decr(Fn);
	SCClass* LookupType = Arg1->Type;
	JB_Incr(LookupType);
	JB_Decr(Arg1);
	if (!JB_Msg_Expect(RN, kJB_SyxThg, nil)) {
		JB_Decr(Side);
		JB_Decr(LookupType);
		return nil;
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(RN, (&_usingf0));
	Message* Exp = ((Message*)JB_Ring_Parent(Self));
	JB_Incr(Exp);
	if (!Side) {
		Message* Bra = ((Message*)JB_Ring_Parent(Exp));
		JB_Incr(Bra);
		if (!JB_Msg_EqualsSyx(Bra, kJB_SyxBra, false)) {
			JB_SetRef(Bra, Exp);
		}
		if (JB_Msg_OperatorIn(Bra, kJB_SyxArg)) {
			if (Bra == Exp) {
				JB_SetRef(Bra, SC_Msg_WrapWith(Exp, kJB_SyxBra, JB_LUB[0]));
			}
			SC_Msg_BecomeSetRel(Bra);
			Message* Eq = JB_Msg_Msg(Bra, kJB_SyxOpp, JB_LUB[241]);
			JB_Incr(Eq);
			JB_SetRef(Eq->Obj, SC__Opp_Assigns);
			JB_Decr(Eq);
			JB_Msg_AppendSyx(Bra, kJB_SyxThg, JB_LUB[31]);
			JB_SetRef(Side, ((Message*)JB_Ring_Last(Bra)));
		}
		JB_Decr(Bra);
	}
	(SC_Msg_SpdFuncSet(Exp, kJB_SyxDot));
	Message* Negate = SC_Msg_NiceParent(Exp);
	JB_Incr(Negate);
	if (!SC_Msg_OperatorIsBRel(Negate, JB_LUB[174])) {
		JB_SetRef(Negate, nil);
	}
	bool OpchIsnt = ((JB_Msg_SyntaxEquals(Opch, JB_LUB[1293], false))) == (Negate != nil);
	if (OpchIsnt) {
		JB_SetRef(Exp->Name, JB_LUB[1294]);
	}
	 else {
		JB_SetRef(Exp->Name, JB_LUB[1295]);
	}
	JB_Msg_BecomeStr(Opch, kJB_SyxPrm, JB_LUB[0]);
	JB_SetRef(Opch->Obj, nil);
	RN->Func = kJB_SyxDot;
	while (JB_Ring_HasChildren(RN)) {
		Message* _tmPf3 = ((Message*)JB_Ring_First(RN));
		JB_Incr(_tmPf3);
		JB_Tree_SyntaxAppend(Opch, _tmPf3);
		JB_Decr(_tmPf3);
	};
	JB_Msg_AppendSyx(RN, kJB_SyxThg, LookupType->Name);
	JB_Decr(LookupType);
	JB_Tree_SyntaxAppend(RN, Opch);
	Message* _tmPf4 = JB_Msg_Msg(Exp, kJB_SyxPrm, JB_LUB[0]);
	JB_Incr(_tmPf4);
	JB_Tree_SyntaxAppend(_tmPf4, RN);
	JB_Decr(_tmPf4);
	if (OpchIsnt) {
		JB_SetRef(Exp->Name, JB_LUB[1295]);
		if (!Side) {
			if (!Negate) {
				Message* NOT = JB_Syx_OperatorPlus(kJB_SyxBRel, JB_LUB[174]);
				JB_Incr(NOT);
				(JB_Ring_NextSibSet(Exp, NOT));
				JB_Tree_SyntaxAppend(NOT, Exp);
				JB_SetRef(Exp, NOT);
				JB_Decr(NOT);
			}
			 else {
				JB_SetRef(Exp, Negate);
			}
		}
		 else {
			if (!Negate) {
				Message* NOT = JB_Syx_OperatorPlus(kJB_SyxBRel, JB_LUB[174]);
				JB_Incr(NOT);
				(JB_Ring_NextSibSet(Side, NOT));
				JB_Tree_SyntaxAppend(NOT, Side);
				JB_SetRef(Side, NOT);
				JB_Decr(NOT);
			}
			 else {
				JB_SetRef(Side, Negate);
			}
			JB_FreeIfDead(SC_TypeOfExpr(Side, Name_space, nil));
		}
	}
	 else {
		if (Negate) {
			JB_Msg_BecomeStr(Negate, kJB_SyxBra, JB_LUB[0]);
		}
	}
	JB_Decr(Negate);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), RN);
	SCDecl* _tmPf5 = SC_TypeOfExpr(Exp, Name_space, Side);
	JB_Incr(_tmPf5);
	JB_Decr(Exp);
	JB_Decr(Side);
	JB_SafeDecr(_tmPf5);
	JB_MsgPos_Destructor((&_usingf0));
	return _tmPf5;
}

Message* SC_Msg_NiceParent(Message* Self) {
	return SC_Msg_UseNonRefChangers(Self, true);
}

void JB_Msg_Nil__(Message* Self, FastString* Fs) {
	JB_DoAt(1);
}

int SC_Msg_NilCheckMode(Message* Self, bool Ok) {
	int Rz = 0;
	Rz = (2 * Ok);
	if (Rz) {
		Message* F = ((Message*)JB_Ring_First(Self));
		if (F) {
			Rz = (Rz + JB_Msg_DeepEquals(F, SC_Msg__NilchCompare(), false));
		}
	}
	return Rz;
}

FatASM* SC_Msg_NOOP(Message* Self) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_NOOP);
	return Rz;
}

Message* SC_Msg_NormaliseFunc(Message* Self, SCClass* AddSelf) {
	Message* Rz = nil;
	Message* Name = JB_Msg_NeedSyx(Self, kJB_SyxThg);
	if (!Name) {
		return nil;
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Name, (&_usingf0));
	Message* Prm = ((Message*)JB_Ring_NextSib(Name));
	if (JB_Msg_EqualsSyx(Prm, kJB_SyxArg, false)) {
		Prm = JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0]);
		(JB_Ring_NextSibSet(Name, Prm));
	}
	 else if (!Prm) {
		Prm = JB_Msg_Msg(Self, kJB_SyxPrm, JB_LUB[0]);
	}
	 else {
		Syntax Fn = Prm->Func;
		if (!((Fn == kJB_SyxBra) or ((Fn == kJB_SyxList) or (Fn == kJB_SyxPrm)))) {
			JB_Msg_Fail(Prm, nil);
			JB_MsgPos_Destructor((&_usingf0));
			return nil;
		}
		Prm->Func = kJB_SyxPrm;
	}
	if (AddSelf) {
		Message* D = ((Message*)JB_Ring_First(Prm));
		if (!(((JB_Msg_EqualsSyx(D, kJB_SyxDecl, false))) and (SC_Msg_OperatorIsThing(((Message*)JB_Tree_Second(D)), JB_LUB[180])))) {
			D = JB_Syx_Msg(kJB_SyxDecl, JB_LUB[0]);
			JB_Msg_AppendSyx(D, kJB_SyxThg, AddSelf->Name);
			JB_Msg_AppendSyx(D, kJB_SyxThg, JB_LUB[180]);
			(JB_Ring_FirstSet(Prm, D));
		}
	}
	Rz = ((Message*)JB_Ring_NextSib(Prm));
	if (Rz) {
		JB_Msg_Expect(Rz, kJB_SyxArg, nil);
	}
	 else {
		Rz = JB_Msg_Msg(Self, kJB_SyxArg, JB_LUB[0]);
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Name);
	JB_MsgPos_Destructor((&_usingf0));
	return Rz;
}

void SC_Msg_NotNilRZ(Message* Self, SCDecl* Type, SCNode* Space) {
	Message* Rel = ((Message*)JB_Ring_Last(Self));
	if (!Rel) {
		return;
	}
	Message* Nel = ((Message*)JB_Ring_Last(Rel));
	if (!Nel) {
		return;
	}
	if (JB_Msg_EqualsSyx(Nel, kJB_SyxType, false)) {
		Nel = ((Message*)JB_Ring_First(Nel));
	}
	if ((SC_Msg_OperatorIsThing(Nel, JB_LUB[36])) and SC_Decl_IsNormalObject(Type)) {
		JB_Msg_BecomeStr(Nel, kJB_SyxDot, JB_LUB[602]);
		JB_Tree_SyntaxAppend(Nel, (JB_Syx_Msg(kJB_SyxThg, Type->Type->Name)));
		JB_Msg_AppendSyx(Nel, kJB_SyxPrm, JB_LUB[0]);
		JB_SetRef(Nel->Obj, nil);
		JB_FreeIfDead(SC_TypeOfExpr(Nel, Space, nil));
	}
}

void JB_Msg_Num__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
}

void JB_Msg_Oat__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '%');
	JB_Msg_RenderWithSpaces(Self, Fs, nil);
}

SCClass* SC_Msg_ObjCls(Message* Self) {
	SCDecl* O = ((SCDecl*)JB_Object_FastAs(Self->Obj, &SCDeclData));
	if (O) {
		if (SC_Decl_SyntaxIs(O, kSC__SCDeclInfo_ClassObj)) {
			return O->Contains->Type;
		}
	}
	return nil;
}

bool JB_Msg_ContainsStr(Message* Self, JB_String* S) {
	return ((bool)JB_Msg_FindNested(Self, kJB_SyxNil, S, false));
}

bool JB_Msg_OperatorIn(Message* Self, Syntax F) {
	Message* P = ((Message*)JB_Ring_Parent(Self));
	if (P) {
		return P->Func == F;
	}
	return false;
}

bool SC_Msg_OperatorIsARel(Message* Self, JB_String* Name) {
	return (Self) and ((Self->Func == kJB_SyxARel) and ((JB_Str_Equals(Self->Name, Name, false))));
}

bool SC_Msg_OperatorIsBRel(Message* Self, JB_String* Name) {
	return (Self) and ((Self->Func == kJB_SyxBRel) and ((JB_Str_Equals(Self->Name, Name, false))));
}

bool SC_Msg_OperatorIsDot(Message* Self, JB_String* Name) {
	return (Self) and ((Self->Func == kJB_SyxDot) and ((JB_Str_Equals(Self->Name, Name, true))));
}

bool SC_Msg_OperatorIsOpp(Message* Self, JB_String* Name) {
	return (Self) and ((Self->Func == kJB_SyxOpp) and ((JB_Str_Equals(Self->Name, Name, true))));
}

bool SC_Msg_OperatorIsThing(Message* Self, JB_String* Name) {
	return (Self) and ((Self->Func == kJB_SyxThg) and ((JB_Str_Equals(Self->Name, Name, true))));
}

bool SC_Msg_OperatorIsTmp(Message* Self, JB_String* Name) {
	return (Self) and ((Self->Func == kJB_SyxTmp) and ((JB_Str_Equals(Self->Name, Name, false))));
}

bool JB_Msg_OperatorMatches(Message* Self, Message* M) {
	return (Self->Func == M->Func) and (JB_Str_Equals(Self->Name, M->Name, true));
}

FatASM* SC_Msg_RequestOp(Message* Self, ASM Op) {
	ASMState* A = (&SC__Pac_Sh);
	FatASM* P = SC_Pac_Curr(A);
	if (P < A->End) {
		if ((Self->Position == -1) or (SC_FAT_ID(P) == 1146000)) {
		}
		memzero((P), 64);
		A->_Curr = (P + 1);
		P->_Op = Op;
		(SC_FAT_DebugSet(P, Self));
		P->BlockNum = A->BasicBlock;
		return P;
	}
	if (true) {
		JB_Msg_Fail(Self, JB_LUB[924]);
	}
	return A->Start;
}

bool JB_Msg_OperatorStarts(Message* Self, JB_String* S) {
	return JB_Str_MidEquals(Self->Name, 0, S, true);
}

void JB_Msg_Opp__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
}

bool SC_Msg_OppExpand(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, kJB_SyxOpp, false)) {
		if (JB_Msg_SyntaxEquals(Self, JB_LUB[1900], false)) {
			return SC_Msg_AOrBExpand(Self);
		}
		if (JB_Msg_SyntaxEquals(Self, JB_LUB[1901], false)) {
			return SC_Msg_InitExpand(Self);
		}
	}
	return false;
}

int SC_Msg_OpScore(Message* Self) {
	JB_Object* O = Self->Obj;
	if (O) {
		return ((SCOperator*)O)->Score;
	}
	SCOperator* Op = ((SCOperator*)JB_Dict_ValueLower(SC__Opp_Dict, Self->Name));
	if (Op) {
		JB_SetRef(Self->Obj, Op);
		return Op->Score;
	}
	return SC__Opp_CustomOperatorScore;
}

JB_String* JB_Msg_OriginalParseData(Message* Self) {
	JB_Object* D = JB_ObjLayer(Self)->Obj2;
	if (JB_Object_Isa(D, &JB_StringData)) {
		return ((JB_String*)D);
	}
	return JB_LUB[0];
}

Message* SC_Msg_OrigMsg(Message* Self) {
	SCFile* F = SC_Msg_File(Self);
	if (F) {
		return JB_Msg_FindTightest(SC_File_Orig(F), Self->Position, false, true);
	}
	return nil;
}

JB_String* SC_Msg_OrigRender(Message* Self, FastString* Fs_in) {
	Message* N = SC_Msg_OrigMsg(Self);
	FastString* Fs = JB_FS__FastNew(Fs_in);
	if (N and (N != Self)) {
		JB_FreeIfDead(JB_Msg_Render(N, Fs));
		N = Self;
		if (JB_Msg_SyntaxIs(Self, kJB__MsgParseFlags_Inserted)) {
			JB_FS_AppendString(Fs, JB_LUB[164]);
			JB_FreeIfDead(JB_Msg_Render(Self, Fs));
			JB_FS_AppendByte(Fs, ')');
		}
	}
	 else {
		JB_FreeIfDead(JB_Msg_Render(Self, Fs));
	}
	if (!Fs_in) {
		return JB_FS_SyntaxCast(Fs);
	}
	return JB_LUB[0];
}

Syntax SC_Msg_ParentForAddress(Message* Self) {
	int Gotaddr = 0;
	Message* P = ((Message*)JB_Ring_Parent(Self));
	while (P) {
		Syntax F = P->Func;
		if ((F != kJB_SyxBra) and (F != kJB_SyxType)) {
			if (SC_Msg_IsAddr(P)) {
				(++Gotaddr);
				if (Gotaddr > 1) {
					return nil;
				}
			}
			 else {
				return P->Func;
			}
		}
		P = ((Message*)JB_Ring_Parent(P));
	};
	return nil;
}

Message* SC_Msg_ParentPoint(Message* Self) {
	Message* Curr = Self;
	while (Curr) {
		Message* OldMsg = Curr;
		Curr = ((Message*)JB_Ring_Parent(Curr));
		if (JB_Msg_EqualsSyx(Curr, kJB_SyxArg, false)) {
			return OldMsg;
		}
	};
	return nil;
}

Message* SC_Msg_ParseShaderSub(Message* Self) {
	Message* Rz = nil;
	JB_Incr(Rz);
	Message* _tmPf2 = ((Message*)JB_Ring_Parent(Self));
	JB_Incr(_tmPf2);
	Message* _tmPf1 = ((Message*)JB_Ring_First(_tmPf2));
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf2);
	JB_String* Name = _tmPf1->Name;
	JB_Incr(Name);
	JB_Decr(_tmPf1);
	if (!JB_Str_Exists(Name)) {
		Message* _tmPf3 = ((Message*)JB_Ring_Parent(Self));
		JB_Incr(_tmPf3);
		JB_Msg_Fail(_tmPf3, JB_LUB[1760]);
		JB_Decr(_tmPf3);
		JB_Decr(Name);
		JB_Decr(Rz);
		return nil;
	}
	JB_SetRef(Rz, SC_Msg_FindShader(Self, Name));
	if (!Rz) {
		JB_Decr(Name);
		JB_Decr(Rz);
		return nil;
	}
	FastString* _fsf0 = JB_FS_Constructor(nil);
	JB_Incr(_fsf0);
	JB_FS_AppendString(_fsf0, JB_LUB[1761]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[1762]);
	JB_FS_AppendString(_fsf0, Name);
	JB_Decr(Name);
	JB_FS_AppendString(_fsf0, JB_LUB[1763]);
	JB_String* _tmPf4 = JB_FS_GetResult(_fsf0);
	JB_Incr(_tmPf4);
	JB_Decr(_fsf0);
	Message* StaticAdditions = JB_Str_Parse(_tmPf4, kJB_SyxArg, true);
	JB_Incr(StaticAdditions);
	JB_Decr(_tmPf4);
	SC_AddToStaticSection(Self, StaticAdditions);
	JB_Decr(StaticAdditions);
	JB_SafeDecr(Rz);
	return Rz;
}

void JB_Msg_pinn__(Message* Self, FastString* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	Message* Opp = ((Message*)JB_Ring_NextSib(F));
	Message* L = ((Message*)JB_Ring_NextSib(Opp));
	JB_FS_SyntaxAppend(Fs, F);
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_SyntaxAppend(Fs, ((Message*)JB_Ring_Last(Opp)));
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_SyntaxAppend(Fs, L);
	JB_FS_AppendString(Fs, JB_LUB[369]);
	JB_FS_SyntaxAppend(Fs, ((Message*)JB_Ring_First(Opp)));
}

JB_String* JB_Msg_plocate(Message* Self) {
	if (Self) {
		Message* _tmPf0 = ((Message*)JB_Ring_Parent(Self));
		JB_Incr(_tmPf0);
		JB_String* _tmPf1 = JB_Msg_Locate(_tmPf0);
		JB_Incr(_tmPf1);
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return JB_LUB[0];
}

void SC_Msg_PrepareAST(Message* Self) {
	Message* After = ((Message*)JB_Ring_FlatAfter(Self));
	Message* Msg = Self;
	while (Msg != After) {
		if (((JB_Msg_EqualsSyx(Msg, kJB_SyxTmp, false))) and ((JB_Msg_SyntaxEquals(Msg, JB_LUB[1123], false)) or (JB_Msg_SyntaxEquals(Msg, JB_LUB[1038], false)))) {
			SC_Func__Tran_FuncTable(Msg);
		}
		Msg = ((Message*)JB_Ring_FlatNext0(Msg));
	};
}

int JB_Msg_PrevIndentCheck(Message* Self, Message* Pr) {
	int Prin = JB_Msg_CleanIndent(Pr);
	int Chin = JB_Msg_CleanIndent(Self);
	if (!((Prin != Chin) and ((Prin != 254) and (Chin != 254)))) {
		return 0;
	}
	int IndExtra = Chin - Prin;
	if (JB_int_OperatorIsa(IndExtra, 2)) {
		if (IndExtra == 4) {
			return IndExtra;
		}
		if (IndExtra < 0) {
			if ((JB_int_OperatorIsa(IndExtra, 4)) or ((JB_int_OperatorIsa(Chin, 4)) or (JB_Msg_InInvisArg(Self)))) {
				return IndExtra;
			}
		}
		if ((IndExtra > 0) and ((JB_Msg_EqualsSyx(Pr, kJB_SyxTmp, false)))) {
			return IndExtra;
		}
	}
	FastString* _fsf0 = JB_FS_Constructor(nil);
	JB_FS_AppendString(_fsf0, JB_LUB[720]);
	JB_FS_AppendInt32(_fsf0, Prin);
	JB_FS_AppendString(_fsf0, JB_LUB[721]);
	JB_FS_AppendInt32(_fsf0, Chin);
	JB_FS_AppendString(_fsf0, JB_LUB[722]);
	JB_FreeIfDead(JB_Tk__ErrorAlwaysAdd(JB_FS_GetResult(_fsf0), Self->Position));
	return 0;
}

void JB_Msg_Prm__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '(');
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		Message* _firstf2 = Ch;
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if (_firstf2 != Ch) {
				JB_FS_AppendString(Fs, JB_LUB[10]);
			}
			//start;
			JB_FS_SyntaxAppend(Fs, Ch);
			Ch = _Nf1;
		};
		;
	}
	;
	JB_FS_AppendByte(Fs, ')');
}

SCFunction* SC_Msg_PrmFunc(Message* Self) {
	if (Self) {
		Message* S = ((Message*)JB_Tree_Second(Self));
		if (S) {
			return ((SCFunction*)JB_Object_FastAs(S->Obj, &SCFunctionData));
		}
	}
	return nil;
}

Message* SC_Msg_PrmFuncStructMsg(Message* Self) {
	SCFunction* List_fn = SC_Msg_PrmFunc(Self);
	if (List_fn) {
		return ((Message*)JB_Tree_Get(((Message*)JB_Ring_Last(Self)), List_fn->StructReturnPos - 1));
	}
	return nil;
}

FatASM* SC_Msg_PRNT(Message* Self, ASMReg R1) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_PRNT);
	SC_FAT_Dest(Rz, 0, R1);
	return Rz;
}

Message* SC_Msg_QMarkRel(Message* Self) {
	Message* X = Self;
	while (true) {
		Message* P = ((Message*)JB_Ring_Parent(X));
		if ((SC_Msg_IsSetRel(P)) and JB_Tree_IsFirst(X)) {
			if ((JB_Msg_OperatorIn(P, kJB_SyxDecl))) {
				JB_Msg_Fail(Self, nil);
				return nil;
			}
			return P;
		}
		X = P;
		if (!JB_Msg_EqualsSyx(X, kJB_SyxDot, false)) {
			return nil;
		}
	};
}

void JB_Msg_Ques__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[362]);
	JB_FS_AppendString(Fs, Self->Name);
	Message* N = ((Message*)JB_Ring_First(Self));
	JB_Incr(N);
	if (N) {
		JB_FS_AppendByte(Fs, ' ');
		JB_FS_SyntaxAppend(Fs, N);
	}
	JB_Decr(N);
}

void JB_Msg_Quot__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[363]);
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			JB_FS_SyntaxAppend(Fs, Ch);
			if (((Message*)JB_Ring_NextSib(Ch))) {
				JB_FS_AppendString(Fs, JB_LUB[10]);
			}
			Ch = _Nf1;
		};
		;
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[364]);
}

FatASM* SC_Msg_RALO(Message* Self, ASMReg R1, ASMReg R2) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RALO);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	return Rz;
}

IntRange JB_Msg_Range(Message* Self) {
	return ((IntRange)ivec2{Self->Position, Self->Position + Self->RangeLength});
}

void JB_Msg_RangeSet(Message* Self, IntRange R) {
	Self->Position = R[0];
	Self->RangeLength = JB_Rg_Width(R);
}

FatASM* SC_Msg_RARE(Message* Self, ASMReg R1, ASMReg R2) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RARE);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	return Rz;
}

int SC_Msg_RC_HasTemporary(Message* Self) {
	if (((JB_Msg_EqualsSyx(Self, kJB_SyxFunc, false))) or (SC_Msg_IsStatementExpr(Self))) {
		return SC_Refs__RefBasisStruct(Self, false);
	}
	return 0;
}

FatASM* SC_Msg_RD16(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Offset, int Move) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RD16);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	(SC_FAT_NumInputSet(Rz, 4, Move));
	return Rz;
}

FatASM* SC_Msg_RD1S(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Offset, int Move) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RD1S);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	(SC_FAT_NumInputSet(Rz, 4, Move));
	return Rz;
}

FatASM* SC_Msg_RD1U(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Offset, int Move) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RD1U);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	(SC_FAT_NumInputSet(Rz, 4, Move));
	return Rz;
}

FatASM* SC_Msg_RD2S(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Offset, int Move) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RD2S);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	(SC_FAT_NumInputSet(Rz, 4, Move));
	return Rz;
}

FatASM* SC_Msg_RD2U(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Offset, int Move) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RD2U);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	(SC_FAT_NumInputSet(Rz, 4, Move));
	return Rz;
}

FatASM* SC_Msg_RD4S(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Offset, int Move) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RD4S);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	(SC_FAT_NumInputSet(Rz, 4, Move));
	return Rz;
}

FatASM* SC_Msg_RD4U(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Offset, int Move) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RD4U);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	(SC_FAT_NumInputSet(Rz, 4, Move));
	return Rz;
}

FatASM* SC_Msg_RD8U(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Offset, int Move) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RD8U);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	(SC_FAT_NumInputSet(Rz, 4, Move));
	return Rz;
}

NilState SC_Msg_RedundantDeclare(Message* Self, uint /*NilState*/ D) {
	JB_String* _tmPf0 = SC_Msg_OrigRender(Self, nil);
	JB_Incr(_tmPf0);
	JB_String* Str = JB_Str_OperatorPlus(_tmPf0, JB_LUB[2073]);
	JB_Incr(Str);
	JB_Decr(_tmPf0);
	if (true) {
		JB_Msg_Fail(Self, Str);
	}
	JB_Decr(Str);
	return D;
}

NilState SC_Msg_RedundantVar(Message* Self, SCDecl* Dcl, NilCheckMode Test) {
	if (SC_khalai_SyntaxIs(Test, kSC__khalai_Soft) or SC_khalai_SyntaxIs(Test, kSC__khalai_While)) {
		return Test & kSC__NilState_Either;
	}
	if (SC__nil_Loops.NestDepth == 0) {
		FastString* Fs = JB_FS_Constructor(nil);
		JB_Incr(Fs);
		JB_String* Render = SC_Msg_OrigRender(Self, Fs);
		JB_Incr(Render);
		bool OOf = JB_Str_ContainsAny(Render, JB__Constants_CSLine);
		if (OOf) {
			JB_FS_AppendString(Fs, JB_LUB[2074]);
		}
		 else {
			//;
			JB_FS_AppendString(Fs, Render);
			JB_FS_AppendString(Fs, JB_LUB[2075]);
			//;
		}
		JB_FS_AppendString(Fs, JB_LUB[2076]);
		JB_String* _tmPf2 = SC_NilState_RawName(SC_Decl_NilCurr(Dcl));
		JB_Incr(_tmPf2);
		JB_FS_AppendString(Fs, _tmPf2);
		JB_Decr(_tmPf2);
		if (OOf) {
			//;
			JB_FS_AppendString(Fs, JB_LUB[2077]);
			JB_String* _tmPf3 = JB_Str_Trim(Render, nil);
			JB_Incr(_tmPf3);
			JB_FS_AppendString(Fs, _tmPf3);
			JB_Decr(_tmPf3);
			//;
		}
		JB_Decr(Render);
		if (true) {
			JB_String* _tmPf4 = JB_FS_SyntaxCast(Fs);
			JB_Incr(_tmPf4);
			JB_Msg_Fail(Self, _tmPf4);
			JB_Decr(_tmPf4);
		}
		JB_Decr(Fs);
	}
	return Test & kSC__NilState_Either;
}

bool SC_Msg_RefDisappears(Message* Self) {
	if (Self->Func == kJB_SyxFunc) {
		Self = ((Message*)JB_Ring_Parent(Self));
	}
	{
		Message* P = Self;
		while (P) {
			Syntax F = P->Func;
			if (F == kJB_SyxType) {
				SCDecl* D = SC_Msg_AsDecl(P);
				if (!D) {
					return nil;
				}
				if (!SC_Decl_IsNormalObject(D)) {
					return true;
				}
			}
			 else if (SC_Msg_RefTransparent(P)) {
				0;
			}
			 else if (F == kJB_SyxPrm) {
				return false;
			}
			 else if (F == kJB_SyxBRel) {
				return true;
			}
			 else if (F == kJB_SyxTmp) {
				uint T = SC_Msg_ASMType(P);
				return (T != kSC__ASMType_kReturn) and (T != kSC__ASMType_kRejoin);
			}
			 else if (F == kJB_SyxArg) {
				return true;
			}
			 else if (F == kJB_SyxRel) {
				JB_Object* Comp = ((Message*)JB_Tree_Second(P))->Obj;
				if (JB_Object_FastIsa(Comp, &SCOperatorData)) {
					return (SC_Opp_SyntaxIs(((SCOperator*)Comp), kSC__OpMode_Compare) and (!((bool)SC_Opp_SyntaxIs(((SCOperator*)Comp), kSC__OpMode_Custom))));
				}
				return false;
			}
			 else {
				return false;
			}
			P = ((Message*)JB_Ring_Parent(P));
		};
		;
	}
	;
	return false;
}

bool SC_Msg_RefTransparent(Message* Self) {
	Syntax F = Self->Func;
	if (F == kJB_SyxBra) {
		return true;
	}
	if (F == kJB_SyxType) {
		return true;
	}
	if (F == kJB_SyxARel) {
		uint N = JB_Str_First(Self->Name);
		return (N == '?') or (N == '!');
	}
	if (F == kJB_SyxBRel) {
		return JB_Str_First(Self->Name) == '?';
	}
	return false;
}

int SC_Msg_Reg(Message* Self) {
	int64 Reg = JB_Msg_Int(Self, 1);
	if (Reg <= 31) {
		return ((int)Reg);
	}
	if (true) {
		JB_Msg_Fail(Self, JB_LUB[1054]);
	}
	return 0;
}

int SC_Msg_RegOrNum(Message* Self) {
	if (JB_byte_LowerCase(JB_Str_First(Self->Name)) != 'r') {
		return JB_Msg_Int(Self, 0);
	}
	return SC_Msg_Reg(Self);
}

void JB_Msg_Rel__(Message* Self, FastString* Fs) {
	JB_Msg_RenderWithSpaces(Self, Fs, nil);
}

bool SC_Msg_RelFix(Message* Self, bool Force) {
	bool Rz = false;
	if (SC_Msg_AndOrExpansionTest(Self) == -1) {
		return nil;
	}
	Message* One = ((Message*)JB_Ring_First(Self));
	JB_Incr(One);
	Message* Plus = ((Message*)JB_Ring_NextSib(One));
	JB_Incr(Plus);
	if (Force or (!Plus->Obj)) {
		int PlusScore = SC_Msg_OpScore(Plus);
		Message* SubRel = ((Message*)JB_Ring_NextSib(Plus));
		JB_Incr(SubRel);
		if ((JB_Msg_SyntaxEquals(Plus, JB_LUB[1855], false)) or (JB_Msg_SyntaxEquals(Plus, JB_LUB[1857], false))) {
			SC_Msg_FixErl(Self);
		}
		 else if (JB_Msg_EqualsSyx(SubRel, kJB_SyxRel, false)) {
			Rz = SC_Msg_RelFix(SubRel, true);
			if (!(JB_Msg_OperatorIn(Self, kJB_SyxDecl) or JB_Msg_OperatorIn(Self, kJB_SyxArg))) {
				Message* Two = ((Message*)JB_Ring_First(SubRel));
				JB_Incr(Two);
				Message* LessThan = ((Message*)JB_Ring_NextSib(Two));
				JB_Incr(LessThan);
				JB_Decr(Two);
				Message* Last = ((Message*)JB_Ring_NextSib(LessThan));
				JB_Incr(Last);
				if (SC_Msg_OpScore(LessThan) > PlusScore) {
					JB_Tree_SyntaxAppend(Self, LessThan);
					JB_Tree_SyntaxAppend(Self, Last);
					(JB_Ring_FirstSet(SubRel, Plus));
					(JB_Ring_FirstSet(SubRel, One));
					SC_Msg_RelFix(SubRel, true);
					Rz = true;
				}
				JB_Decr(LessThan);
				JB_Decr(Last);
			}
		}
		JB_Decr(SubRel);
	}
	JB_Decr(One);
	JB_Decr(Plus);
	return Rz;
}

JB_String* JB_Msg_Render(Message* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_FS_SyntaxAppend(Fs, Self);
	return JB_FS_SmartResult(Fs, Fs_in);
}

void JB_Msg_render_jbin_sub(Message* Self, FastString* Js) {
	Message* Ch = Self;
	Message* After = ((Message*)JB_Ring_FlatAfter(Self));
	while (Ch and (Ch != After)) {
		int Depth = 0;
		Message* Curr = Ch;
		Ch = ((Message*)JB_Ring_FlatNextDepth(Curr, (&Depth), true));
		JB_bin_Add(Js, Curr->Func, Curr->Name, Depth > 0);
		JB_bin_Exit(Js, (-Depth));
	};
}

JB_String* JB_Msg_RenderJbin(Message* Self, JB_String* Shell_path, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	if (!Self) {
		return JB_LUB[0];
	}
	FastString* Js = ((FastString*)Fs);
	if (JB_Str_Exists(Shell_path)) {
		JB_bin_Sheb(Js, Shell_path);
	}
	JB_FS_AppendString(Js, JB__JbinHeader);
	JB_Msg_render_jbin_sub(Self, Js);
	return JB_FS_SmartResult(Fs, Fs_in);
}

void JB_Msg_RenderPrm(Message* Self, FastString* Fs, uint /*byte*/ B1, uint /*byte*/ B2) {
	JB_FS_AppendByte(Fs, B1);
	JB_Msg_FSListSep(Self, Fs, JB_LUB[10]);
	JB_FS_AppendByte(Fs, B2);
}

JB_String* SC_Msg_RenderType(Message* Self) {
	JB_Object* D = ((JB_Object*)Self->Obj);
	if (JB_Object_FastIsa(D, &SCDeclData)) {
		Message* _tmPf0 = SC_Decl_WriteSimpleType(((SCDecl*)D), true);
		JB_Incr(_tmPf0);
		JB_String* _tmPf1 = JB_Msg_Render(_tmPf0, nil);
		JB_Incr(_tmPf1);
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	if (JB_Object_FastIsa(D, &SCModuleData)) {
		return ((SCModule*)D)->Name;
	}
	return JB_Msg_Render(Self, nil);
}

void JB_Msg_RenderWithSpaces(Message* Self, FastString* Fs, Message* Ch) {
	if (!Ch) {
		Ch = ((Message*)JB_Ring_First(Self));
	}
	while (Ch) {
		JB_FS_SyntaxAppend(Fs, Ch);
		Ch = ((Message*)JB_Ring_NextSib(Ch));
		if (!Ch) {
			return;
		}
		JB_FS_AppendByte(Fs, ' ');
	};
}

Message* SC_Msg_ReplaceInbuiltSub(Message* Self, SCDecl* Self_decl) {
	if ((JB_Msg_SyntaxEquals(Self, JB_LUB[36], false))) {
		return SC_Msg_FalsifyNil(Self);
	}
	 else if ((JB_Msg_SyntaxEquals(Self, JB_LUB[1831], false))) {
		if (!(Self_decl and SC_Decl_IsCArray(Self_decl))) {
			JB_Msg_Fail(Self, JB_LUB[1832]);
			return nil;
		}
		return JB_int_Msg(Self_decl->C_Array);
	}
	 else if ((JB_Msg_SyntaxEquals(Self, JB_LUB[1792], false))) {
		Message* F = JB_Msg_NeedSyx(Self, kJB_SyxSStr);
		if (F) {
			ErrorMarker IsOK = JB_Rec_Mark(JB_StdErr);
			if (true) {
				MessagePosition _usingf0 = ((MessagePosition){});
				JB_Msg_SyntaxUsing(Self, (&_usingf0));
				JB_SetRef(F->Name, JB_Str_Digest(F->Name));
				if ((!JB_ErrorMarker_SyntaxCast(IsOK)) and JB_Rec_CanAddMore(JB_StdErr, kJB__ErrorSeverity_Error)) {
					JB_Error* Err = ((JB_Error*)JB_Ring_Last(JB_StdErr->Errors));
					if (Err) {
						JB_Err_ShiftPosition(Err, F->Position);
					}
				}
				JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
				JB_MsgPos_Destructor((&_usingf0));
			}
		}
		JB_Msg_BecomeStr(Self, kJB_SyxBra, JB_LUB[0]);
	}
	 else if ((JB_Msg_SyntaxEquals(Self, JB_LUB[1833], false))) {
		Message* F = JB_Msg_NeedSyx(Self, kJB_SyxSStr);
		if (F) {
			JB_SetRef(F->Name, JB_Str_Compress(F->Name, kJB__MZLab_Default, nil));
		}
		JB_Msg_BecomeStr(Self, kJB_SyxBra, JB_LUB[0]);
	}
	 else if ((JB_Msg_SyntaxEquals(Self, JB_LUB[1834], false))) {
		SCClass* Cls = SC_Func__CurrFunc()->Cls;
		if (!Cls) {
			JB_Msg_Fail(Self, nil);
			return nil;
		}
		JB_Msg_BecomeNum(Self, Cls->TaskObjectCount);
	}
	 else if ((JB_Msg_SyntaxEquals(Self, JB_LUB[1835], false))) {
		if ((!Self_decl)) {
			JB_Msg_Fail(Self, JB_LUB[1836]);
			return nil;
		}
		return SC_Msg_InBuiltSizeOf(Self, Self_decl);
	}
	 else if ((JB_Msg_SyntaxEquals(Self, JB_LUB[1837], false)) or (JB_Msg_SyntaxEquals(Self, JB_LUB[1838], false))) {
		if ((!Self_decl)) {
			JB_Msg_Fail(Self, JB_LUB[1839]);
			return nil;
		}
		if (JB_Msg_SyntaxEquals(Self, JB_LUB[1837], true)) {
			return SC_Msg_InBuiltTypeOf(Self, Self_decl);
		}
		return SC_Msg_InBuiltContained(Self, Self_decl);
	}
	 else if ((JB_Msg_SyntaxEquals(Self, JB_LUB[1840], false)) or (JB_Msg_SyntaxEquals(Self, JB_LUB[1841], false))) {
		SC_Create_JeeboxTest(Self);
	}
	 else {
		if (true) {
			JB_Msg_Fail(Self, nil);
		}
	}
	return nil;
}

Message* JB_Msg_ReplaceInto(Message* Self, Message* W) {
	(JB_Ring_PrevSibSet(Self, W));
	JB_Tree_SyntaxAppend(W, Self);
	return W;
}

Message* SC_Msg_ReplaceWith(Message* Self, Message* J) {
	(JB_Ring_PrevSibSet(Self, J));
	JB_Tree_Remove(Self);
	return J;
}

Message* SC_Msg_ReplaceWithChild(Message* Self) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, ((Message*)JB_Ring_First(Self)));
	(JB_Ring_PrevSibSet(Self, Rz));
	JB_Tree_Remove(Self);
	JB_SafeDecr(Rz);
	return Rz;
}

JB_Object* JB_Msg_RestoreLoad(Message* Self) {
	JB_Object* Rz = nil;
	JB_Incr(Rz);
	ObjectLoader L = ((ObjectLoader){});
	if (!JB_LD_VerifyFormat((&L), Self)) {
		JB_LD_Destructor((&L));
		JB_Decr(Rz);
		return nil;
	}
	Dictionary* Objs = JB_Dict_Constructor(nil);
	JB_Incr(Objs);
	JB_LD_Preload((&L), Self, Objs);
	if (JB_Rec_OK(JB_StdErr)) {
		JB_LD_LoadForReal((&L), Self, Objs);
	}
	JB_SetRef(Rz, L.Result);
	JB_LD_Finish((&L));
	JB_ObjClass(Objs);
	JB_Decr(Objs);
	JB_LD_Destructor((&L));
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Msg_Resync(Message* Self, Message* Parent) {
	Message* Rz = nil;
	Rz = Self;
	while (Rz and (((Message*)JB_Ring_Parent(Rz)) != Parent)) {
		Rz = ((Message*)JB_Ring_Parent(Rz));
	};
	return Rz;
}

FatASM* SC_Msg_RET(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int SafeDecr, int Value) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RET);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, SafeDecr));
	(SC_FAT_NumInputSet(Rz, 4, Value));
	return Rz;
}

FatASM* SC_Msg_RFAP(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RFAP);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	return Rz;
}

FatASM* SC_Msg_RFDC(Message* Self, ASMReg R1, int Count, int Offset) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RFDC);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_NumInputSet(Rz, 1, Count));
	(SC_FAT_NumInputSet(Rz, 2, Offset));
	return Rz;
}

FatASM* SC_Msg_RFRD(Message* Self, ASMReg R1, ASMReg R2, int Decr, int Offset) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RFRD);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, Decr));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	return Rz;
}

FatASM* SC_Msg_RFST(Message* Self, ASMReg R1, ASMReg R2) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RFST);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	return Rz;
}

FatASM* SC_Msg_RFWR(Message* Self, ASMReg R1, ASMReg R2, int Decr, int Offset) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_RFWR);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, Decr));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	return Rz;
}

void SC_Msg_Safe(Message* Self, FastString* Fs) {
	SC_Str_Safe(Self->Name, Fs, false);
}

void SC_Msg_SafeRemove(Message* Self, Syntax T) {
	if (Self) {
		(SC_Msg_SpdFuncSet(Self, T));
		JB_SetRef(Self->Name, JB_LUB[0]);
		(JB_Msg_SyntaxIsSet(Self, kJB__MsgParseFlags_Inserted, true));
		{
			Message* C = ((Message*)JB_Ring_First(Self));
			JB_Incr(C);
			while (C) {
				Message* _Nf1 = (((Message*)JB_Ring_NextSib(C)));
				JB_Incr(_Nf1);
				JB_Tree_Remove(C);
				JB_SetRef(C, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(C);
			;
		};
	}
}

void SC_Msg_SafeReplaceWith(Message* Self, Message* Incoming) {
	SC_Msg_SafeRemove(Self, kJB_SyxBra);
	JB_Tree_SyntaxAppend(Self, Incoming);
}

SCArg* SC_Msg_SCArg(Message* Self, SCNode* P, Message* Avoid) {
	if (!Self) {
		return nil;
	}
	if (Avoid and ((!JB_Msg_EqualsSyx(Avoid, kJB_SyxArg, false)) and (!JB_Msg_EqualsSyx(Avoid, kJB_SyxTmp, false)))) {
		if (JB_Object_FastIsa(P, &SCArgData)) {
			return ((SCArg*)P);
		}
		return nil;
	}
	SCArg* R = SC_Msg_AsArg(Self);
	if (!P) {
		P = SC_Msg_MsgArg(Self);
	}
	if ((!R) and P) {
		R = SC_Arg_Constructor(nil, Self);
		if (JB_Object_FastIsa(P, &SCArgData)) {
			JB_SetRef(R->ParentFunc, ((SCArg*)P)->ParentFunc);
			R->IsClassArg = ((SCArg*)P)->IsClassArg;
			R->Parent = ((SCArg*)P);
		}
		 else if (JB_Object_FastIsa(P, &SCFunctionData)) {
			JB_SetRef(R->ParentFunc, P);
			R->IsClassArg = ((bool)((SCFunction*)P)->Cls);
			R->Parent = ((SCFunction*)P)->Parent;
		}
		JB_SetRef(Self->Obj, R);
	}
	if (P and R) {
		R->Project = P->Project;
	}
	return R;
}

SCArg* SC_Msg_SCArgNested(Message* Self, Message* Base, SCNode* P) {
	while (true) {
		Message* Cp = JB_Msg_Ancestor(Self, kJB_SyxArg);
		if (Cp == Base) {
			return SC_Msg_SCArg(Self, P, nil);
		}
		if (!Cp) {
			return nil;
		}
		Self = Cp;
	};
}

void JB_Msg_SCnj__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
}

void JB_Msg_SCom__(Message* Self, FastString* Fs) {
	Message* Ch = ((Message*)JB_Ring_First(Self));
	JB_Incr(Ch);
	if (!Ch) {
		JB_FS_AppendString(Fs, JB_LUB[504]);
		JB_Decr(Ch);
		return;
	}
	Message* _tmPf0 = ((Message*)JB_Ring_NextSib(Ch));
	JB_Incr(_tmPf0);
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendString(Fs, JB_LUB[504]);
	if (JB_Tree_HasOneChild(Ch)) {
		Message* _tmPf1 = ((Message*)JB_Ring_First(Ch));
		JB_Incr(_tmPf1);
		JB_FS_SyntaxAppend(Fs, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else {
		JB_Msg_FSListArg(Ch, Fs, false);
		JB_FS_AppendByte(Fs, '\n');
	}
	JB_Decr(Ch);
	JB_FS_AppendString(Fs, JB_LUB[193]);
}

void JB_Msg_SDot__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '.');
	JB_FS_AppendString(Fs, Self->Name);
	Message* _tmPf0 = ((Message*)JB_Ring_First(Self));
	JB_Incr(_tmPf0);
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
}

bool SC_Msg_SecondIs(Message* Self, Syntax Fn, JB_String* Name) {
	Message* S = ((Message*)JB_Tree_Second(Self));
	if (S) {
		return (JB_Msg_EqualsSyx(S, Fn, false)) and (JB_Msg_SyntaxEquals(S, Name, false));
	}
	return false;
}

int SC_Msg_SelfUsedForProperty(Message* Self) {
	Message* R = ((Message*)JB_Ring_Parent(Self));
	if (!(R and ((Self->Func == kJB_SyxDot) and (R->Func == kJB_SyxRel)))) {
		return 0;
	}
	if (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(Self)), JB_LUB[180])) {
		if (SC_Msg_DotType(Self)) {
			Message* Op = ((Message*)JB_Tree_Second(R));
			return 1 + (!(JB_Tree_IsFirst(Self) and (JB_Msg_SyntaxEquals(Op, JB_LUB[241], false))));
		}
	}
	return 0;
}

Message* SC_Msg_SendPerryErrors(Message* Self) {
	JB_Tree_Clear(Self);
	Message* _tmPf0 = SC_AC__ErrorsToPerry();
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(Self, _tmPf0);
	JB_Decr(_tmPf0);
	return Self;
}

bool SC_Msg_SettingToNil(Message* Self) {
	if ((JB_Msg_EqualsSyx(Self, kJB_SyxDecl, false))) {
		Message* D = ((Message*)JB_Ring_Last(Self));
		if (((JB_Msg_EqualsSyx(D, kJB_SyxRel, false))) and ((JB_Msg_SyntaxEquals(((Message*)JB_Ring_Last(D)), JB_LUB[36], true)))) {
			return true;
		}
	}
	return false;
}

DotUseType SC_Msg_SetType(Message* Self) {
	DotUseType D = SC_Msg_DotType(Self);
	if (D) {
		return D;
	}
	if (Self->Func == kJB_SyxAcc) {
		return kSC__DotUseType_Memory;
	}
	return 0;
}

bool JB_Msg_ShallowEquals(Message* Self, Message* B, bool Aware) {
	return (Self->Func == B->Func) and JB_Str_Equals(Self->Name, B->Name, Aware);
}

void JB_Msg_Sheb__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[16]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendByte(Fs, '\n');
}

void SC_Msg_SlidePositions(Message* Self, int Add) {
	{
		Message* S = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while ((S) and (S != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(S)));
			if (S->Position >= 0) {
				S->Position = (S->Position + Add);
			}
			S = _N_f2;
		};
		;
	};
}

void SC_Msg_SortImprove(Message* Self, SCNode* Name_space) {
	if (JB_Object_MustBe(Name_space, &SCClassData, Self)) {
		Message* L = JB_Msg_GiveArg(Self);
		if (!JB_Msg_ExpectLast(L, JB_LUB[0])) {
			return;
		}
		Message* Prm = JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0]);
		(JB_Ring_PrevSibSet(L, Prm));
		JB_Tree_SyntaxAppend(Prm, SC_NewRel(JB_Syx_OperatorPlus(kJB_SyxThg, JB_LUB[1124]), JB_Syx_OperatorPlus(kJB_SyxThg, ((SCClass*)Name_space)->Name), JB_LUB[1125]));
	}
}

void SC_Msg_SpdFuncSet(Message* Self, Syntax Value) {
	Self->Func = Value;
	(SC_Msg_ASMTypeSet(Self, 0));
}

void JB_Msg_SStr__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[14]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendString(Fs, JB_LUB[15]);
}

void SC_Msg_StartUsingAfter(Message* Self) {
	int Biggest = -1;
	JB_MemoryLayer* L = JB_ObjLayer(Self);
	JB_String* D = JB_Msg_OriginalParseData(Self);
	if (JB_Str_Exists(D)) {
		{
			Message* S = Self;
			Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
			while ((S) and (S != _afterf1)) {
				Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(S)));
				if ((S->Position >= 0) and (JB_ObjLayer(S) == L)) {
					(Biggest = JB_int_OperatorMax(Biggest, JB_Msg_After(S)));
				}
				S = _N_f2;
			};
			;
		}
		;
		Ind B2 = JB_Str_InStr(D, JB_LUB[125], Biggest, JB_int__Max(), false);
		if (JB_Ind_SyntaxCast(B2)) {
			Biggest = B2;
		}
		(++Biggest);
	}
	JB__Tk_Using.Position = Biggest;
	JB__Tk_Using.Flags = kJB__MsgParseFlags_Inserted;
	JB_Mem_Use(JB_ObjLayer(Self));
}

void SC_Msg_StatementExprSet(Message* Self, SCArg* Arg) {
	(SC_Msg_ASMTypeSet(Self, kSC__ASMType_kStatExpr));
	Arg->IsStatementExpr = true;
}

void JB_Msg_SThg__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
}

void JB_Msg_Str__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '"');
	JB_FS_AppendEscape(Fs, Self->Name);
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		JB_Incr(Ch);
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			JB_Incr(_Nf1);
			if ((JB_Msg_EqualsSyx(Ch, kJB_SyxEmb, false))) {
				JB_FS_AppendEscape(Fs, Ch->Name);
			}
			 else {
				JB_FS_AppendByte(Fs, '$');
				JB_FS_AppendByte(Fs, '{');
				JB_FS_SyntaxAppend(Fs, Ch);
				JB_FS_AppendByte(Fs, '}');
			}
			JB_SetRef(Ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(Ch);
		;
	}
	;
	JB_FS_AppendByte(Fs, '"');
}

void SC_Msg_StructReturnCleanup(Message* Self, SCFunction* Fn, SCNode* Name_space) {
	Message* R = ((Message*)JB_Ring_First(Self));
	JB_Incr(R);
	if (!R) {
		JB_Decr(R);
		return;
	}
	JB_FreeIfDead(SC_TypeOfExpr(R, Name_space, nil));
	if (!JB_Tree_OperatorIn(R, Self)) {
		JB_Decr(R);
		return;
	}
	SCDecl* Arg = ((SCDecl*)JB_Array_Value(Fn->Args, Fn->StructReturnPos - 1));
	JB_Incr(Arg);
	if (SC_Decl_CanRemoveArgOnReturn(Arg, R)) {
		JB_Tree_Remove(R);
	}
	 else {
		if (true) {
			MessagePosition _usingf0 = ((MessagePosition){});
			JB_Msg_SyntaxUsing(Self, (&_usingf0));
			Message* _tmPf1 = SC_Decl_MakeAccess0(Arg);
			JB_Incr(_tmPf1);
			Message* Rel = SC_NewEqRelWithMsgMsg(_tmPf1, R);
			JB_Incr(Rel);
			JB_Decr(_tmPf1);
			(JB_Ring_PrevSibSet(Self, Rel));
			JB_FreeIfDead(SC_TypeOfExpr(Rel, Name_space, nil));
			JB_Decr(Rel);
			JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
			JB_MsgPos_Destructor((&_usingf0));
		}
	}
	JB_Decr(R);
	JB_Decr(Arg);
}

FatASM* SC_Msg_SUB(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Sh) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_SUB);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Sh));
	return Rz;
}

FatASM* SC_Msg_SWAP(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, ASMReg R4) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_SWAP);
	SC_FAT_Dest(Rz, 0, R1);
	SC_FAT_Dest(Rz, 1, R2);
	SC_FAT_Dest(Rz, 2, R3);
	SC_FAT_Dest(Rz, 3, R4);
	return Rz;
}

Message* JB_Msg_NeedSyxOK(Message* Self, Syntax Need, Syntax OK) {
	if (Self) {
		Message* Found = ((Message*)JB_Ring_First(Self));
		if (Found) {
			if ((JB_Msg_EqualsSyx(Found, OK, false)) or ((JB_Msg_EqualsSyx(Found, Need, false)) or (OK == kJB_SyxNil))) {
				return Found;
			}
		}
		if (OK != kJB_SyxNil) {
			JB_Msg_CantFind(Self, Need, nil, Found);
		}
	}
	return nil;
}

Message* JB_Msg_NeedSyx(Message* Self, Syntax S) {
	Message* Found = ((Message*)JB_Ring_First(Self));
	if (Found) {
		if ((S == nil) or (Found->Func == S)) {
			return Found;
		}
	}
	if (Self) {
		JB_Msg_CantFind(Self, S, JB_LUB[0], Found);
	}
	return nil;
}

Message* JB_Msg_NeedSyxInt(Message* Self, Syntax S, int N) {
	Message* Ch = ((Message*)JB_Tree_Get(Self, N));
	if (Ch) {
		if ((!S) or (Ch->Func == S)) {
			return Ch;
		}
	}
	JB_Msg_CantFind(Self, S, nil, Ch);
	return nil;
}

Message* JB_Msg_NeedSyxName(Message* Self, Syntax S, JB_String* Name) {
	Message* F = JB_Msg_NeedSyx(Self, S);
	if (JB_Msg_Expect(F, kJB_SyxNil, Name)) {
		return F;
	}
	return nil;
}

void JB_Msg_SetStr(Message* Self, JB_String* Key, JB_String* Value) {
	Message* _tmPf0 = JB_Syx_Msg(kJB_SyxStr, Value);
	JB_Incr(_tmPf0);
	(JB_Msg_SetMsg(Self, Key, _tmPf0));
	JB_Decr(_tmPf0);
}

void JB_Msg_SetMsg(Message* Self, JB_String* Key, Message* Value) {
	JB_Tree_SyntaxAppend(JB_Msg_AccessAdd(Self, Key), Value);
}

Message* JB_Msg_GetConf(Message* Self, JB_String* Key, bool Err) {
	{
		Message* _LoopSrcf1 = JB_Msg_ConfArg(Self);
		Message* Item = JB_config_ConfFirst(_LoopSrcf1);
		while (Item) {
			if (JB_Msg_SyntaxEquals(Item, Key, true)) {
				Message* F = ((Message*)JB_Ring_First(Item));
				if (F) {
					return F;
				}
				return Item;
			}
			Item = ((Message*)JB_Ring_NextSib(Item));
		};
	}
	;
	if (Err) {
		if (true) {
			JB_Msg_Fail(Self, JB_Str_OperatorPlus(Key, JB_LUB[798]));
		}
	}
	return nil;
}

void JB_Msg_AppendString(Message* Self, JB_String* Key) {
	JB_Msg_AppendSyx(Self, kJB_SyxStr, Key);
}

void JB_Msg_AppendSyx(Message* Self, Syntax Fn, JB_String* Name) {
	JB_FreeIfDead(JB_Msg_Msg(Self, Fn, Name));
}

void JB_Msg_AppendNum(Message* Self, int64 Num) {
	JB_String* _tmPf0 = JB_int64_Render(Num, nil);
	JB_Incr(_tmPf0);
	JB_Msg_AppendSyx(Self, kJB_SyxNum, _tmPf0);
	JB_Decr(_tmPf0);
}

bool JB_Msg_SyntaxEquals(Message* Self, JB_String* Name, bool Aware) {
	return Self and JB_Str_Equals(Self->Name, Name, Aware);
}

bool JB_Msg_EqualsSyx(Message* Self, Syntax X, bool Aware) {
	return Self and (Self->Func == X);
}

void JB_Msg_Fail(Message* Self, JB_String* Error) {
	JB_Rec__NewErrorWithNode(Self, Error, nil);
}

bool JB_Msg_SyntaxIs(Message* Self, uint /*MsgParseFlags*/ F) {
	if (Self) {
		return ((bool)(Self->Flags & F));
	}
	return false;
}

void JB_Msg_SyntaxIsSet(Message* Self, uint /*MsgParseFlags*/ F, bool Value) {
	if (Self) {
		if (Value) {
			Self->Flags = (Self->Flags | F);
		}
		 else {
			Self->Flags = (Self->Flags & (~F));
		}
	}
}

void JB_Msg_SyntaxProblem(Message* Self, JB_String* Error) {
	JB_Rec__NewProblem(Self, Error, nil);
}

void JB_Msg_SyntaxUsing(Message* Self, MessagePosition* Rz) {
	Rz[0] = JB__Tk_Using;
	Rz->Layer = JB_Class_Layer((&MessageData));
	JB__Tk_Using.Position = Self->Position;
	JB__Tk_Using.Length = Self->RangeLength;
	JB__Tk_Using.Tag = Self->Tag;
	JB__Tk_Using.Flags = kJB__MsgParseFlags_Inserted;
	JB_Mem_Use(JB_ObjLayer(Self));
}

void JB_Msg_SyntaxWarn(Message* Self, JB_String* Error) {
	JB_Rec__NewWarning(Self, Error, nil);
}

FatASM* SC_Msg_TAIL(Message* Self, int JUMP, int Prm1) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_TAIL);
	(SC_FAT_NumInputSet(Rz, 0, JUMP));
	(SC_FAT_NumInputSet(Rz, 1, Prm1));
	return Rz;
}

bool SC_Msg_TargetTest(Message* Self) {
	JB_Msg_Expect(Self, kJB_SyxThg, nil);
	if (!((!JB_Msg_SyntaxEquals(Self, JB_LUB[1126], true)) or (!JB_Msg_SyntaxEquals(Self, JB_LUB[1127], true)))) {
		JB_Msg_Fail(Self, JB_LUB[1128]);
		return nil;
	}
	if (!(!JB_Msg_SyntaxEquals(Self, JB_LUB[1129], true))) {
		JB_Msg_Fail(Self, JB_LUB[1130]);
		return nil;
	}
	if (!(!JB_Msg_SyntaxEquals(Self, JB_LUB[1131], true))) {
		JB_Msg_Fail(Self, JB_LUB[1132]);
		return nil;
	}
	if (!(!JB_Msg_SyntaxEquals(Self, JB_LUB[561], true))) {
		JB_Msg_Fail(Self, JB_LUB[1133]);
		return nil;
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[351], true)) {
		return SC__Options_TargetDebug;
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1134], true)) {
		return (!SC__Options_TargetDebug);
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1089], true)) {
		return ((bool)SC__Options_PerryOutput);
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1135], true)) {
		return SC__Options_ProjectIsMiniLib;
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1136], true)) {
		return ((bool)SC__Imp_CurrIsManuallyImported);
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[31], true)) {
		return true;
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[32], true)) {
		return false;
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1137], true)) {
		return JB_Platform__OSX();
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1138], true)) {
		return JB_Platform__Win();
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1139], true)) {
		return JB_Platform__Lin();
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[609], true)) {
		return SC__Options_IsDirectTest;
	}
	return SC_SC_Targets__SyntaxAccess(Self->Name);
}

Message* SC_Msg_TaskConBefore(Message* Self) {
	Message* Marker = JB_Msg_FindSyxName(Self, kJB_SyxDot, JB_LUB[949], false);
	if (Marker) {
		Marker = ((Message*)JB_Ring_NextSib(Marker));
	}
	 else {
		Marker = ((Message*)JB_Ring_First(Self));
	}
	if (Marker) {
		return Marker;
	}
	return JB_Msg_Msg(Self, kJB_SyxSheb, JB_LUB[1055]);
}

Message* SC_Msg_TempIntoBlock(Message* Self, Message* ParentPlace) {
	Message* Rz = nil;
	JB_Incr(Rz);
	Message* FuncMsg = ((Message*)JB_Ring_Parent(Self));
	JB_Incr(FuncMsg);
	if (!(((JB_Msg_EqualsSyx(FuncMsg, kJB_SyxDot, false))) and (JB_FreeIfDead(((Message*)JB_Ring_First(FuncMsg))) == Self))) {
		if (!JB_Msg_EqualsSyx(FuncMsg, kJB_SyxPrm, false)) {
			SC_Msg_RefDisappears(Self);
			JB_Decr(FuncMsg);
			JB_Decr(Rz);
			return nil;
		}
		JB_SetRef(FuncMsg, ((Message*)JB_Ring_Parent(FuncMsg)));
	}
	SCFunction* Fn = SC_Msg_MsgFunc(FuncMsg);
	JB_Incr(Fn);
	if (!(((JB_Msg_EqualsSyx(FuncMsg, kJB_SyxFunc, false)) or (JB_Msg_EqualsSyx(FuncMsg, kJB_SyxDot, false))) and ((!Fn) or (JB_ObjClass(Fn) == &SCFunctionData)))) {
		JB_Decr(Fn);
		JB_Decr(FuncMsg);
		JB_Decr(Rz);
		return nil;
	}
	if (!(Fn and Fn->ReturnType)) {
		JB_FreeIfDead(SC_Func__TempMoveOut(Self, ParentPlace));
		JB_Decr(Fn);
		JB_Decr(FuncMsg);
		JB_Decr(Rz);
		return nil;
	}
	JB_Decr(Fn);
	MessagePosition Using = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Self, (&Using));
	Message* Arg = SC_Msg_HasOwnBlock(FuncMsg);
	JB_Incr(Arg);
	Message* TmpFuncThg = nil;
	JB_Incr(TmpFuncThg);
	Message* TmpFuncDecl = nil;
	JB_Incr(TmpFuncDecl);
	if (Arg) {
		Message* Rel = ((Message*)JB_Ring_Parent(FuncMsg));
		JB_Incr(Rel);
		JB_SetRef(TmpFuncDecl, ((Message*)JB_Ring_Parent(Rel)));
		JB_SetRef(TmpFuncThg, ((Message*)JB_Ring_First(Rel)));
		JB_Decr(Rel);
	}
	 else {
		JB_SetRef(Arg, SC_Msg_CreateOwnBlock(FuncMsg));
		if (!Arg) {
			JB_Decr(TmpFuncDecl);
			JB_Decr(TmpFuncThg);
			JB_Decr(Arg);
			JB_MsgPos_Destructor((&Using));
			JB_Decr(FuncMsg);
			JB_Decr(Rz);
			return nil;
		}
		SCFunction* _tmPf0 = SC_Func__CurrFunc();
		JB_Incr(_tmPf0);
		JB_String* TmpFuncVar = SC_UniqueTmpVar(_tmPf0, JB_LUB[1200]);
		JB_Incr(TmpFuncVar);
		JB_Decr(_tmPf0);
		JB_SetRef(TmpFuncDecl, SC_MakeDecl(JB_LUB[0], TmpFuncVar, FuncMsg, kSC__SCDeclInfo_Body));
		JB_SetRef(TmpFuncThg, (JB_Syx_Msg(kJB_SyxThg, TmpFuncVar)));
		JB_Decr(TmpFuncVar);
		JB_SetRef(TmpFuncThg->Obj, TmpFuncDecl->Obj);
		JB_Tree_SyntaxAppend(Arg, TmpFuncDecl);
		Message* Rej = SC_NewRejoin();
		JB_Incr(Rej);
		JB_Tree_SyntaxAppend(Rej, TmpFuncThg);
		JB_Tree_SyntaxAppend(Arg, Rej);
		JB_Decr(Rej);
	}
	JB_Decr(FuncMsg);
	JB_Decr(Arg);
	JB_Decr(TmpFuncThg);
	SCFunction* _tmPf1 = SC_Func__CurrFunc();
	JB_Incr(_tmPf1);
	JB_String* TmpParamName = SC_UniqueTmpVar(_tmPf1, JB_LUB[1200]);
	JB_Incr(TmpParamName);
	JB_Decr(_tmPf1);
	JB_SetRef(Rz, JB_Syx_OperatorPlus(kJB_SyxThg, TmpParamName));
	JB_FreeIfDead(SC_Msg_ReplaceWith(Self, Rz));
	Message* TmpParamDecl = SC_MakeDecl(JB_LUB[0], TmpParamName, Self, kSC__SCDeclInfo_Body);
	JB_Incr(TmpParamDecl);
	JB_Decr(TmpParamName);
	JB_SetRef(Rz->Obj, TmpParamDecl->Obj);
	(JB_Ring_PrevSibSet(TmpFuncDecl, TmpParamDecl));
	JB_Decr(TmpFuncDecl);
	JB_Decr(TmpParamDecl);
	JB_MsgPos_Destructor((&Using));
	JB_SafeDecr(Rz);
	return Rz;
}

FatASM* SC_Msg_TERN(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, ASMReg R4) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_TERN);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_PrmWithIntReg(Rz, 3, R4));
	return Rz;
}

void JB_Msg_Test(Message* Self, JB_String* New_render, JB_String* Name) {
	if (!JB_Msg_TestSub(Self, New_render, Name)) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[1780]);
		JB_FS_AppendString(_fsf0, Name);
		JB_FS_AppendString(_fsf0, JB_LUB[1781]);
		JB_FS_AppendString(_fsf0, New_render);
		JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf1);
		JB_Decr(_fsf0);
		JB_Print(_tmPf1);
		JB_Decr(_tmPf1);
		JB_Rec_Clear(JB_StdErr);
	}
}

void JB_Msg_test_style(Message* Self) {
	bool B = false;
	{
		Message* S = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while ((S) and (S != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(S)));
			if ((JB_Msg_EqualsSyx(S, kJB_SyxArg, false)) or (JB_Msg_EqualsSyx(S, kJB_SyxList, false))) {
				B = (!B);
				((JB_Msg_SyntaxIsSet(S, kJB__MsgParseFlags_Style2, B)));
			}
			S = _N_f2;
		};
		;
	};
}

bool SC_Msg_TestFuncName(Message* Self) {
	Syntax Fn = Self->Func;
	if (!((Fn != kJB_SyxFunc) and ((Fn != kJB_SyxPrm) and (Fn != kJB_SyxList)))) {
		JB_Msg_Fail(Self, JB_LUB[854]);
		return nil;
	}
	if (Fn != kJB_SyxThg) {
		JB_Msg_Fail(Self, JB_LUB[925]);
		return nil;
	}
	return true;
}

bool JB_Msg_TestSub(Message* Self, JB_String* New_render, JB_String* Name) {
	LeakTester* LKT = JB_Lk_Constructor(nil, Name);
	JB_Incr(LKT);
	{
		Message* Reparse = JB_Str_Parse(New_render, kJB_SyxArg, true);
		JB_Incr(Reparse);
		if (!Reparse) {
			JB_Decr(Reparse);
			JB_Decr(LKT);
			return nil;
		}
		JB_Msg_test_style(Reparse);
		JB_Msg_test_style(Self);
		if (!JB_Msg__TreeCompare(Self, Reparse, false)) {
			JB_Decr(Reparse);
			JB_Decr(LKT);
			return nil;
		}
		JB_String* Self_render = JB_Msg_Render(Self, nil);
		JB_Incr(Self_render);
		if (!JB_Str_Exists(Self_render)) {
			JB_Decr(Self_render);
			JB_Decr(Reparse);
			JB_Decr(LKT);
			return nil;
		}
		JB_String* Reparse_render = JB_Msg_Render(Reparse, nil);
		JB_Incr(Reparse_render);
		if (!JB_Str_Exists(Reparse_render)) {
			JB_Decr(Reparse_render);
			JB_Decr(Self_render);
			JB_Decr(Reparse);
			JB_Decr(LKT);
			return nil;
		}
		if (!(JB_Rec_OK(JB_StdErr) and ((JB_Str_Equals(Self_render, Reparse_render, false))))) {
			JB_Decr(Reparse_render);
			JB_Decr(Self_render);
			JB_Decr(Reparse);
			JB_Decr(LKT);
			return nil;
		}
		JB_Decr(Self_render);
		JB_Decr(Reparse_render);
		JB_Decr(Reparse);
	}
	;
	(JB_Lk_FinalTest(LKT));
	JB_Decr(LKT);
	return true;
}

JB_String* JB_Msg_Text(Message* Self, int I) {
	if (I == 0) {
		return JB_Msg_TextViewChild(Self)->Name;
	}
	return JB_LUB[0];
}

bool JB_Msg_TextSet(Message* Self, int I, JB_String* V) {
	if (I == 0) {
		JB_SetRef(JB_Msg_TextViewChild(Self)->Name, V);
		return true;
	}
	return false;
}

Message* JB_Msg_TextViewChild(Message* Self) {
	if (!JB_Msg_EqualsSyx(Self, kJB_SyxTmp, false)) {
		return Self;
	}
	Message* Ch = ((Message*)JB_Ring_First(Self));
	if (Ch) {
		Message* Ch2 = ((Message*)JB_Ring_NextSib(Ch));
		if (JB_Msg_ListViewable(Ch2)) {
			return Ch2;
		}
		if (JB_Msg_ListViewable(Ch)) {
			return Ch;
		}
	}
	return Self;
}

void JB_Msg_Thg__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
}

void JB_Msg_Tmp__(Message* Self, FastString* Fs) {
	if (JB_Str_IsStatementName(Self->Name)) {
		JB_FS_AppendString(Fs, Self->Name);
	}
	 else {
		JB_FS_AppendByte(Fs, '+');
		JB_FS_AppendQuotedEscape(Fs, Self->Name);
	}
	if (!JB_Ring_HasChildren(Self)) {
		return;
	}
	Message* Ch = ((Message*)JB_Ring_First(Self));
	bool HasArg = false;
	while (Ch) {
		if (HasArg) {
			JB_FS_LineIndent(Fs);
		}
		JB_FS_AppendByte(Fs, ' ');
		JB_FS_SyntaxAppend(Fs, Ch);
		if (JB_Msg_EqualsSyx(Ch, kJB_SyxArg, false)) {
			HasArg = true;
		}
		Ch = ((Message*)JB_Ring_NextSib(Ch));
	};
}

void JB_Msg_Todo__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
	JB_Msg_FSListSep(Self, Fs, JB_LUB[27]);
}

void SC_Msg_Tran_Isnt(Message* Self, JB_String* Name) {
	Message* Type = JB_Msg_NeedFirst(Self);
	JB_Incr(Type);
	if (!JB_Msg_ExpectLast(Type, JB_LUB[0])) {
		JB_Decr(Type);
		return;
	}
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Self, (&_usingf0));
		SC_Msg_BecomeSetRel(Self);
		Message* _tmPf1 = JB_Syx_Msg(kJB_SyxThg, Name);
		JB_Incr(_tmPf1);
		JB_Tree_SyntaxAppend(Self, (_tmPf1));
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Syx_Msg(kJB_SyxOpp, Self->Name);
		JB_Incr(_tmPf2);
		JB_Tree_SyntaxAppend(Self, (_tmPf2));
		JB_Decr(_tmPf2);
		JB_Tree_SyntaxAppend(Self, Type);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Type);
}

void SC_Msg_Tran_QMark(Message* Self) {
	Message* Thedot = ((Message*)JB_Ring_First(Self));
	JB_Incr(Thedot);
	if (!Thedot) {
		JB_Decr(Thedot);
		return;
	}
	bool IsNormal = ((JB_Msg_EqualsSyx(Thedot, kJB_SyxDot, false)) or ((JB_Msg_EqualsSyx(Thedot, kJB_SyxSDot, false)) or (JB_Msg_EqualsSyx(Thedot, kJB_SyxFunc, false))));
	if (!IsNormal) {
		if ((!JB_Msg_EqualsSyx(Thedot, kJB_SyxThg, false))) {
			JB_Msg_Fail(Thedot, JB_LUB[1214]);
			JB_Decr(Thedot);
			return;
		}
		Self->Func = kJB_SyxBra;
		JB_Decr(Thedot);
		return;
	}
	if (JB_Msg_EqualsSyx(Thedot, kJB_SyxSDot, false)) {
		SC_Func__Tran_Sdt(Thedot);
	}
	Message* Inside = ((Message*)JB_Ring_First(Thedot));
	JB_Incr(Inside);
	if (JB_Msg_EqualsSyx(Thedot, kJB_SyxFunc, false)) {
		if (!JB_Msg_Expect(Inside, kJB_SyxBra, nil)) {
			JB_Decr(Inside);
			JB_Decr(Thedot);
			return;
		}
		JB_SetRef(Inside, ((Message*)JB_Ring_First(Inside)));
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Self, (&_usingf0));
	Message* Rel = SC_Msg_QMarkRel(Self);
	JB_Incr(Rel);
	if (Rel) {
		(JB_Ring_PrevSibSet(Self, Thedot));
		(JB_Ring_NextSibSet(Rel, Self));
		JB_Msg_BecomeStr(Self, kJB_SyxArg, JB_LUB[0]);
		Message* _tmPf1 = JB_Syx_Msg(kJB_SyxThg, JB_LUB[1215]);
		JB_Incr(_tmPf1);
		JB_FreeIfDead(SC_Msg_ReplaceWith(Inside, _tmPf1));
		JB_Decr(_tmPf1);
		Message* Decl = SC_MakeDecl(JB_LUB[0], JB_LUB[1215], Inside, 0);
		JB_Incr(Decl);
		JB_Tree_SyntaxAppend(Self, Decl);
		Message* _tmPf2 = JB_Msg_Msg(Decl, kJB_SyxArg, JB_LUB[0]);
		JB_Incr(_tmPf2);
		JB_Decr(Decl);
		JB_Tree_SyntaxAppend(_tmPf2, Rel);
		JB_Decr(_tmPf2);
		JB_Decr(Rel);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(Inside);
		JB_Decr(Thedot);
		return;
	}
	JB_Decr(Rel);
	Message* Tern = Self;
	JB_Incr(Tern);
	if (JB_Msg_OperatorIn(Self, kJB_SyxArg)) {
		JB_Msg_BecomeStr(Self, kJB_SyxArg, JB_LUB[0]);
		(JB_Msg_SyntaxIsSet(Self, kJB__MsgParseFlags_Style2, true));
	}
	 else if ((JB_Msg_EqualsSyx(Inside, kJB_SyxThg, false))) {
		Self->Func = kJB_SyxFunc;
	}
	 else {
		Self->Func = kJB_SyxBra;
		JB_SetRef(Tern, JB_Msg_Msg(Self, kJB_SyxArg, JB_LUB[0]));
		(JB_Msg_SyntaxIsSet(Tern, kJB__MsgParseFlags_Style2, true));
		JB_SetRef(Tern, JB_Msg_Msg(Tern, kJB_SyxFunc, JB_LUB[0]));
	}
	Message* Cond = JB_Syx_OperatorPlus(kJB_SyxThg, Inside->Name);
	JB_Incr(Cond);
	if (JB_Msg_OperatorIn(Self, kJB_SyxArg)) {
		JB_SetRef(Tern, JB_Msg_Msg(Self, kJB_SyxTmp, JB_LUB[175]));
		JB_Tree_SyntaxAppend(Tern, Cond);
		Message* _tmPf3 = JB_Msg_Msg(Tern, kJB_SyxArg, JB_LUB[0]);
		JB_Incr(_tmPf3);
		JB_Tree_SyntaxAppend(_tmPf3, Thedot);
		JB_Decr(_tmPf3);
	}
	 else {
		Message* Options = JB_Msg_Msg(Tern, kJB_SyxList, JB_LUB[0]);
		JB_Incr(Options);
		Message* _tmPf4 = JB_Msg_Msg(Tern, kJB_SyxPrm, JB_LUB[0]);
		JB_Incr(_tmPf4);
		JB_Tree_SyntaxAppend(_tmPf4, Cond);
		JB_Decr(_tmPf4);
		JB_Tree_SyntaxAppend(Options, Thedot);
		JB_Msg_AppendSyx(Options, kJB_SyxThg, JB_LUB[36]);
		JB_Decr(Options);
	}
	JB_Decr(Thedot);
	if ((!JB_Msg_EqualsSyx(Inside, kJB_SyxThg, false))) {
		JB_SetRef(Cond->Name, JB_LUB[1215]);
		Message* _tmPf5 = JB_Syx_Msg(kJB_SyxThg, JB_LUB[1215]);
		JB_Incr(_tmPf5);
		JB_FreeIfDead(SC_Msg_ReplaceWith(Inside, _tmPf5));
		JB_Decr(_tmPf5);
		Message* _tmPf6 = SC_MakeDecl(JB_LUB[0], JB_LUB[1215], Inside, 0);
		JB_Incr(_tmPf6);
		(JB_Ring_PrevSibSet(Tern, _tmPf6));
		JB_Decr(_tmPf6);
	}
	JB_Decr(Inside);
	JB_Decr(Tern);
	JB_Decr(Cond);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Msg_Tran_Target(Message* Self) {
	Message* Rz = nil;
	JB_Incr(Rz);
	SC_Msg_Tran_TargetSub(Self);
	JB_SetRef(Rz, ((Message*)JB_Ring_NextSib(Self)));
	if (!Rz) {
		JB_SetRef(Rz, ((Message*)JB_Ring_FlatAfter(Self)));
	}
	JB_Tree_Remove(Self);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Msg_Tran_TargetSub(Message* Self) {
	Message* Value = JB_Msg_NeedFirst(Self);
	if (!Value) {
		return;
	}
	bool IsFalse = ((JB_Msg_EqualsSyx(Value, kJB_SyxBRel, false)) and (JB_Msg_SyntaxEquals(Value, JB_LUB[174], false)));
	if (IsFalse) {
		Value = ((Message*)JB_Ring_First(Value));
	}
	Message* Arg = JB_Msg_NeedSyxInt(Self, kJB_SyxArg, 1);
	if (!Arg) {
		return;
	}
	if (SC_Msg_TargetTest(Value) == IsFalse) {
		Arg = JB_Msg_NeedSyx(((Message*)JB_Tree_Get(Self, 2)), kJB_SyxArg);
	}
	while (JB_Ring_HasChildren(Arg)) {
		(JB_Ring_NextSibSet(Self, ((Message*)JB_Tree_Pop(Arg))));
	};
}

void SC_Msg_Tran_With(Message* Self) {
	Message* Obj = JB_Msg_NeedFirst(Self);
	JB_Incr(Obj);
	if (!(Obj and (!JB_Msg_EqualsSyx(Obj, kJB_SyxArg, false)))) {
		JB_Decr(Obj);
		return;
	}
	Message* Arg = JB_Msg_NextOf(Obj, kJB_SyxArg);
	JB_Incr(Arg);
	if (JB_Msg_EqualsSyx(Obj, kJB_SyxRel, false)) {
		if (true) {
			JB_Msg_Fail(Obj, nil);
		}
	}
	if (!(Arg and (!JB_Msg_EqualsSyx(Obj, kJB_SyxRel, false)))) {
		JB_Decr(Arg);
		JB_Decr(Obj);
		return;
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Obj, (&_usingf0));
	JB_String* Name = Obj->Name;
	JB_Incr(Name);
	Message* If = Self;
	JB_Incr(If);
	if (Obj->Func == kJB_SyxThg) {
		JB_SetRef(Self->Name, JB_LUB[175]);
	}
	 else {
		JB_Msg_BecomeStr(Self, kJB_SyxArg, JB_LUB[0]);
		JB_SetRef(If, JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[175]));
		(JB_Ring_FirstSet(Self, If));
		JB_Tree_SyntaxAppend(If, Obj);
		JB_Tree_SyntaxAppend(If, Arg);
		Message* Dcl = SC_Func__TypedTempMoveOut(Obj, JB_LUB[0], nil);
		JB_Incr(Dcl);
		Message* _tmPf4 = SC_Msg_DeclName(Dcl);
		JB_Incr(_tmPf4);
		JB_Decr(Dcl);
		JB_SetRef(Name, _tmPf4->Name);
		JB_Decr(_tmPf4);
	}
	Message* _tmPf5 = ((Message*)JB_Ring_First(If));
	JB_Incr(_tmPf5);
	JB_Decr(If);
	JB_FreeIfDead(SC_Msg_WrapWith(_tmPf5, kJB_SyxBra, JB_LUB[603]));
	{
		Message* Ch = Arg;
		JB_Incr(Ch);
		Message* _afterf2 = ((Message*)JB_Ring_FlatAfter(Arg));
		JB_Incr(_afterf2);
		while ((Ch) and (Ch != _afterf2)) {
			Message* _N_f3 = ((Message*)JB_Ring_FlatNext0(Ch));
			JB_Incr(_N_f3);
			if (JB_Msg_EqualsSyx(Ch, kJB_SyxTmp, false)) {
				if ((JB_Msg_SyntaxEquals(Ch, JB_LUB[1293], false)) or (JB_Msg_SyntaxEquals(Ch, JB_LUB[1296], false))) {
					SC_Msg_Tran_Isnt(Ch, JB_LUB[1297]);
					Ch = Ch;
					JB_Decr(_N_f3);
					continue;
				}
				 else if (JB_Msg_SyntaxEquals(Ch, JB_LUB[1298], false)) {
					JB_SetRef(Ch, ((Message*)JB_Ring_FlatAfter(Ch)));
					JB_Decr(_N_f3);
					continue;
				}
			}
			 else if (JB_Msg_EqualsSyx(Ch, kJB_SyxSDot, false)) {
				Ch->Func = kJB_SyxDot;
				Message* _tmPf6 = JB_Syx_Msg(kJB_SyxThg, Name);
				JB_Incr(_tmPf6);
				(JB_Ring_FirstSet(Ch, (_tmPf6)));
				JB_Decr(_tmPf6);
			}
			 else if (JB_Msg_EqualsSyx(Ch, kJB_SyxThg, false)) {
				if (JB_Msg_SyntaxEquals(Ch, JB_LUB[1297], false)) {
					JB_SetRef(Ch->Name, Name);
				}
			}
			JB_SetRef(Ch, _N_f3);
			JB_Decr(_N_f3);
		};
		JB_Decr(Ch);
		JB_Decr(_afterf2);
		;
		JB_Decr(_tmPf5);
	}
	;
	JB_Decr(Arg);
	JB_Decr(Name);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Obj);
	JB_Decr(Obj);
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Msg_TranAllTargets(Message* Self) {
	{
		Message* S = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while ((S) and (S != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(S)));
			if (JB_Msg_SyntaxEquals(S, JB_LUB[1343], false)) {
				S = SC_Msg_Tran_Target(S);
				continue;
			}
			S = _N_f2;
		};
		;
	};
}

Message* SC_Msg_TranModel(Message* Self) {
	Message* Arg = JB_Msg_Last(Self, kJB_SyxArg);
	JB_Incr(Arg);
	if (!Arg) {
		JB_Decr(Arg);
		return nil;
	}
	Message* Shader = SC_Msg_ParseShaderSub(Arg);
	JB_Incr(Shader);
	JB_Decr(Arg);
	if (!Shader) {
		JB_Decr(Shader);
		return nil;
	}
	JB_SetRef(Self->Name, JB_LUB[37]);
	JB_SafeDecr(Shader);
	return Shader;
}

FatASM* SC_Msg_TRAP(Message* Self, ASMReg R1, int Mode, int Signal) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_TRAP);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_NumInputSet(Rz, 1, Mode));
	(SC_FAT_NumInputSet(Rz, 2, Signal));
	return Rz;
}

void JB_Msg_TRel__(Message* Self, FastString* Fs) {
	JB_Msg_RenderWithSpaces(Self, Fs, nil);
}

void JB_Msg_Tril__(Message* Self, FastString* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if (!F) {
		return;
	}
	JB_FS_AppendByte(Fs, '#');
	JB_FS_SyntaxAppend(Fs, F);
	Message* S = ((Message*)JB_Ring_NextSib(F));
	if (!S) {
		return;
	}
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_SyntaxAppend(Fs, S);
	Message* L = ((Message*)JB_Ring_NextSib(S));
	if (!L) {
		return;
	}
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_SyntaxAppend(Fs, L);
}

MaybeBool SC_Msg_Trueness(Message* Self, uint /*NilState*/ Found) {
	SCDecl* D = SC_Msg_FastDecl(Self);
	SCDecl* Ret = SC__nil_T.Return;
	if (!Ret) {
		return nil;
	}
	if (SC_Decl_FastMatch(D, Ret)) {
		uint N = D->NilDeclared;
		if (N & kSC__NilState_KnownValue) {
			return JB_MaybeBool__Known(SC_NilState_SyntaxIs(N, kSC__NilState_TrueValue));
		}
		if (Found & kSC__NilState_KnownValue) {
			return JB_MaybeBool__Known(SC_NilState_SyntaxIs(Found, kSC__NilState_TrueValue));
		}
	}
	 else if (SC_Decl_IsDataTypeOnly(Ret) and SC_Decl_IsDataTypeOnly(D)) {
		while ((JB_Msg_EqualsSyx(Self, kJB_SyxArg, false)) or (JB_Msg_EqualsSyx(Self, kJB_SyxBra, false))) {
			Self = ((Message*)JB_Ring_Last(Self));
		};
		Message* Rtf = Ret->Type->False;
		if (Rtf and (Self and JB_Msg_OperatorMatches(Self, Rtf))) {
			return JB_MaybeBool__Known(false);
		}
	}
	return ((MaybeBool)8);
}

bool SC_Msg_TrueOrFalse(Message* Self) {
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[31], true)) {
		return true;
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[32], true)) {
		return false;
	}
	if (true) {
		JB_Msg_Fail(Self, JB_LUB[926]);
	}
	return false;
}

int SC_Msg_TryImproveShiftConstants(Message* Self, SCDecl* LC, SCDecl* RC) {
	uint64 Lk = LC->ExportPosition;
	bool Uk = SC_Decl_SyntaxIs(LC, kSC__SCDeclInfo_UnknownConst);
	uint64 Rk = RC->ExportPosition;
	if (!((Lk | Rk) or Uk)) {
		return 0;
	}
	uint64 Nk = Lk << Rk;
	int Size = ((int)JB_u64_Log2(Nk));
	if (!(Uk or (Size >= JB_TC_BitCount(SC_Decl_TypeInfo(LC))))) {
		return 0;
	}
	SCClass* Ty = ((SCClass*)JB_Ternary(Size >= 32, SC_TypeInt64, SC_TypeInt));
	if (Uk and (Rk >= 32)) {
		Ty = SC_TypeInt64;
	}
	SCDecl* Ty2 = SC_Decl_CopyDecl(Ty->TypeNormal, false);
	JB_SetRef(Self->Obj, Ty2);
	(SC_Decl_SyntaxIsSet(Ty2, kSC__SCDeclInfo_Const, true));
	if (Uk) {
		(SC_Decl_SyntaxIsSet(Ty2, kSC__SCDeclInfo_UnknownConst, true));
	}
	 else {
		Ty2->ExportPosition = Nk;
		JB_Msg_BecomeStr(Self, kJB_SyxNum, JB_int64_Render(((int64)Nk), nil));
		JB_Tree_Clear(Self);
	}
	return kSC__CustomOps_RecheckType;
}

void JB_Msg_Type__(Message* Self, FastString* Fs) {
	Message* Obj = ((Message*)JB_Ring_First(Self));
	JB_Incr(Obj);
	if (!Obj) {
		JB_Decr(Obj);
		return;
	}
	Message* Type = ((Message*)JB_Ring_NextSib(Obj));
	JB_Incr(Type);
	JB_FS_SyntaxAppend(Fs, Obj);
	JB_Decr(Obj);
	JB_FS_AppendByte(Fs, '|');
	if (Type) {
		JB_FS_SyntaxAppend(Fs, Type);
	}
	JB_Decr(Type);
	JB_FS_AppendByte(Fs, '|');
}

bool SC_Msg_TypeCastDoesNothing(Message* Self) {
	uint Output = SC_Decl_TypeOnly(SC_Msg_ASMDecl(Self));
	uint Input = SC_Decl_TypeOnly(SC_Msg_ASMDecl(((Message*)JB_Ring_First(Self))));
	if (JB_TC_VecCount(Output) != JB_TC_VecCount(Input)) {
		return nil;
	}
	if (JB_TC_IsFloat(Output) != JB_TC_IsFloat(Input)) {
		return nil;
	}
	bool BoolOut = JB_TC_SyntaxIs(Output, kJB__TC_bool);
	if ((BoolOut) != (JB_TC_SyntaxIs(Input, kJB__TC_bool))) {
		return nil;
	}
	int BytesLost = JB_TC_ByteCount(Input) - JB_TC_ByteCount(Output);
	if (JB_TC_IsFloat(Output)) {
		return BytesLost == 0;
	}
	if (BytesLost > 0) {
		return nil;
	}
	return false;
}

void SC_Msg_TypeExpect(Message* Self, DataTypeCode* Ty, uint /*DataTypeCode*/ In) {
	uint V = Ty[0];
	if (V) {
		if ((V != In) and (!JB_TC_SyntaxIs(V, kJB__TC_Failed))) {
			Ty[0] = kJB__TC_Failed;
			if (true) {
				JB_Msg_Fail(Self, JB_LUB[927]);
			}
		}
	}
	 else {
		Ty[0] = In;
	}
}

Message* SC_Msg_TypeOfArrItem(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, kJB_SyxList, false)) {
		return ((Message*)JB_Ring_First(Self));
	}
	if (((JB_Msg_EqualsSyx(Self, kJB_SyxRel, false))) and (SC_Msg_OperatorIsThing(((Message*)JB_Tree_Second(Self)), JB_LUB[252]))) {
		return ((Message*)JB_Ring_First(Self));
	}
	return Self;
}

Message* SC_Msg_UnBra(Message* Self) {
	while ((JB_Msg_EqualsSyx(Self, kJB_SyxBra, false)) and (!JB_Msg_EqualsSyx(((Message*)JB_Ring_First(Self)), kJB_SyxArg, false))) {
		Self = ((Message*)JB_Ring_First(Self));
	};
	return Self;
}

Message* SC_Msg_UnBraType(Message* Self) {
	while (((JB_Msg_EqualsSyx(Self, kJB_SyxType, false))) or ((JB_Msg_EqualsSyx(Self, kJB_SyxBra, false)) and (!JB_Msg_EqualsSyx(((Message*)JB_Ring_First(Self)), kJB_SyxArg, false)))) {
		Self = ((Message*)JB_Ring_First(Self));
	};
	return Self;
}

void JB_Msg_UnEmbedStr(Message* Self) {
	Message* S1 = ((Message*)JB_Ring_First(Self));
	JB_Incr(S1);
	if (((JB_Msg_EqualsSyx(S1, kJB_SyxEmb, false))) and (!JB_FreeIfDead(((Message*)JB_Ring_NextSib(S1))))) {
		JB_Tree_Remove(S1);
		JB_SetRef(Self->Name, S1->Name);
	}
	JB_Decr(S1);
}

void JB_Msg_Unit__(Message* Self, FastString* Fs) {
	JB_String* Num = JB_Msg_FirstName(Self);
	JB_Incr(Num);
	JB_FS_AppendString(Fs, Num);
	if ((JB_Str_IsHexLike(Num, 0)) and (JB_Str_Last(Num, 0) != '_')) {
		JB_FS_AppendByte(Fs, '_');
	}
	JB_Decr(Num);
	JB_FS_AppendString(Fs, Self->Name);
}

bool SC_Msg_UnitMatch(Message* Self, JB_String* A, JB_String* B) {
	JB_String* Unit = Self->Name;
	if (JB_Str_Equals(Unit, A, false)) {
		return true;
	}
	if (JB_Str_Equals(Unit, B, false)) {
		if (true) {
			JB_Msg_Fail(Self, JB_Str_OperatorPlus(JB_LUB[928], A));
		}
	}
	return false;
}

Message* SC_Msg_UnReachable(Message* Self) {
	return SC_Msg_CausesUnReachable(Self, Self, nil, nil);
}

Message* SC_Msg_Unwrap(Message* Self) {
	Message* Rz = nil;
	Rz = Self;
	while (SC_Msg_RefTransparent(Rz)) {
		Message* F = ((Message*)JB_Ring_First(Rz));
		if (!F) {
			break;
		}
		Rz = F;
	};
	return Rz;
}

Message* SC_Msg_UpToType(Message* Self) {
	Message* C = Self;
	while (C) {
		Message* P = ((Message*)JB_Ring_Parent(C));
		if (JB_Msg_EqualsSyx(P, kJB_SyxType, false)) {
			if (!JB_Tree_IsLast(C)) {
				return nil;
			}
			return P;
		}
		C = P;
	};
	return nil;
}

void JB_Msg_url__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendString(Fs, JB_LUB[21]);
	Message* F = ((Message*)JB_Ring_First(Self));
	JB_Incr(F);
	if (F) {
		JB_FS_AppendString(Fs, F->Name);
	}
	JB_Decr(F);
}

Message* SC_Msg_UseNonRefChangers(Message* Self, bool Parent) {
	Message* Last = Self;
	Message* Curr = Self;
	while (true) {
		Curr = ((Message*)JB_Ring_Parent(Curr));
		if (!Curr) {
			return Last;
		}
		Syntax F = Curr->Func;
		if (F == kJB_SyxType) {
			JB_Object* D = Curr->Obj;
			if (JB_Object_FastIsa(D, &SCDeclData)) {
				if (!SC_Decl_IsNormalObject(((SCDecl*)D))) {
					return ((Message*)JB_Ternary(Parent, Curr, Last));
				}
			}
		}
		 else if (!SC_Msg_RefTransparent(Curr)) {
			return ((Message*)JB_Ternary(Parent, Curr, Last));
		}
		Last = Curr;
	};
}

JB_String* JB_Msg_Value(Message* Self) {
	if (Self) {
		if ((JB_Msg_EqualsSyx(Self, kJB_SyxTmp, false)) and JB_Msg_OperatorIn(Self, kJB_SyxArg)) {
			return JB_Msg_FirstName(Self);
		}
		if (!JB_Msg_EqualsSyx(Self, kJB_SyxArg, false)) {
			return Self->Name;
		}
		return JB_Msg_FirstName(Self);
	}
	return JB_LUB[0];
}

void SC_Msg_VariableParamSafety(Message* Self) {
	if (!JB_Ring_HasChildren(Self)) {
		return;
	}
	Syntax Fn = Self->Func;
	if ((Fn == kJB_SyxBRel) or (Fn == kJB_SyxARel)) {
		uint S = JB_Str_First(Self->Name);
		if ((S == '-') or (S == '+')) {
			return SC_Msg_DenyPreviousUse(Self, Self);
		}
	}
	 else {
		{
			Message* Ch = Self;
			Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
			while ((Ch) and (Ch != _afterf1)) {
				Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(Ch)));
				Fn = Ch->Func;
				if ((Fn == kJB_SyxBRel) or (Fn == kJB_SyxARel)) {
					uint S = JB_Str_First(Ch->Name);
					if ((S == '&') or ((S == '-') or (S == '+'))) {
						SC_Msg_DenyPreviousUse(Self, Ch);
					}
				}
				Ch = _N_f2;
			};
			;
		};
	}
}

JB_String* SC_Msg_VarName(Message* Self) {
	Message* Ch = JB_Msg_NeedSyxInt(Self, kJB_SyxNil, 1);
	if (Ch) {
		Syntax F = Ch->Func;
		if (F == kJB_SyxRel) {
			Ch = ((Message*)JB_Ring_First(Ch));
			F = Ch->Func;
		}
		if (F == kJB_SyxThg) {
			return Ch->Name;
		}
		if (true) {
			JB_Msg_Fail(Ch, nil);
		}
	}
	return JB_LUB[0];
}

FatASM* SC_Msg_VBLD(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, ASMReg R4, int R5) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_VBLD);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_PrmWithIntReg(Rz, 3, R4));
	(SC_FAT_NumInputSet(Rz, 4, R5));
	return Rz;
}

FatASM* SC_Msg_VGET(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Ind) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_VGET);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Ind));
	return Rz;
}

bool SC_Msg_visible(Message* Self) {
	MaybeBool B = SC_Msg_visible2(Self);
	if (JB_MaybeBool_IsKnown(B)) {
		return JB_MaybeBool_KnownTrue(B);
	}
	return SC__Base_CurrVisibility;
}

void SC_Msg_visibleSet(Message* Self, bool Value) {
	Self->Indent = (255 - Value);
}

MaybeBool SC_Msg_visible2(Message* Self) {
	if (Self) {
		uint I = Self->Indent;
		if (I >= 254) {
			return ((MaybeBool)(I == 254));
		}
	}
	return ((MaybeBool)8);
}

int SC_Msg_VMBits(Message* Self) {
	int Rz = 0;
	{
		Message* S = ((Message*)JB_Ring_First(Self));
		while (S) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(S)));
			if (JB_Msg_EqualsSyx(S, kJB_SyxNum, false)) {
				Rz = (Rz | (1 << (JB_Msg_IntRange(S, 0, 1, 3) - 1)));
			}
			S = _Nf1;
		};
		;
	}
	;
	if (!Rz) {
		Rz = 1;
	}
	return Rz;
}

JB_String* SC_Msg_VMMsgArgName(Message* Self, int I) {
	if (Self) {
		return Self->Name;
	}
	return JB_Str__Byte('a' + I);
}

FatASM* SC_Msg_VSET(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Ind) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_VSET);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Ind));
	return Rz;
}

FatASM* SC_Msg_VSWZ(Message* Self, ASMReg R1, ASMReg R2, int Fields, int Clear) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_VSWZ);
	SC_FAT_Dest(Rz, 0, R1);
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_NumInputSet(Rz, 2, Fields));
	(SC_FAT_NumInputSet(Rz, 3, Clear));
	return Rz;
}

void JB_Msg_WipePositions(Message* Self) {
	{
		Message* V = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while ((V) and (V != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(V)));
			V->Position = -1;
			V = _N_f2;
		};
		;
	};
}

void SC_Msg_WithDeclTransform(Message* Self, Message* Decl, Message* Rel, Message* Arg) {
	if (!JB_Msg_Expect(Rel, kJB_SyxRel, nil)) {
		return;
	}
	Message* Name = JB_Msg_NeedSyx(Rel, kJB_SyxThg);
	JB_Incr(Name);
	if (Name) {
		//using;
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Arg, (&_usingf0));
		Message* IF = JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[175]);
		JB_Incr(IF);
		(JB_Ring_NextSibSet(Decl, IF));
		JB_Msg_AppendSyx(IF, kJB_SyxThg, Name->Name);
		JB_Tree_SyntaxAppend(IF, Arg);
		JB_Decr(IF);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Arg);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Name);
}

bool SC_Msg_WithinLoop(Message* Self, Message* Stop) {
	while ((Self != Stop) and Self) {
		if (SC_Msg_OperatorIsTmp(Self, JB_LUB[176]) or SC_Msg_OperatorIsTmp(Self, JB_LUB[252])) {
			return true;
		}
		Self = ((Message*)JB_Ring_Parent(Self));
	};
	return false;
}

bool JB_Msg_WithinType(Message* Self, int Allowed) {
	Message* P = ((Message*)JB_Ring_Parent(Self));
	Message* Msg = Self;
	while (P and (!JB_Msg_EqualsSyx(P, kJB_SyxArg, false))) {
		if ((Allowed & 1) and ((JB_Msg_EqualsSyx(P, kJB_SyxDecl, false)))) {
			return JB_Tree_IsFirst(Msg);
		}
		if ((Allowed & 2) and ((JB_Msg_EqualsSyx(P, kJB_SyxType, false)))) {
			return JB_Tree_IsLast(Msg);
		}
		Msg = P;
		P = ((Message*)JB_Ring_Parent(P));
	};
	return false;
}

FatASM* SC_Msg_WR16(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Offset, int Move) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_WR16);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	(SC_FAT_NumInputSet(Rz, 4, Move));
	return Rz;
}

FatASM* SC_Msg_WR1U(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Offset, int Move) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_WR1U);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	(SC_FAT_NumInputSet(Rz, 4, Move));
	return Rz;
}

FatASM* SC_Msg_WR2U(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Offset, int Move) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_WR2U);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	(SC_FAT_NumInputSet(Rz, 4, Move));
	return Rz;
}

FatASM* SC_Msg_WR4U(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Offset, int Move) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_WR4U);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	(SC_FAT_NumInputSet(Rz, 4, Move));
	return Rz;
}

FatASM* SC_Msg_WR8U(Message* Self, ASMReg R1, ASMReg R2, ASMReg R3, int Offset, int Move) {
	FatASM* Rz = nil;
	//visible;
	Rz = SC_Msg_RequestOp(Self, kSC__ASM_WR8U);
	(SC_FAT_PrmWithIntReg(Rz, 0, R1));
	(SC_FAT_PrmWithIntReg(Rz, 1, R2));
	(SC_FAT_PrmWithIntReg(Rz, 2, R3));
	(SC_FAT_NumInputSet(Rz, 3, Offset));
	(SC_FAT_NumInputSet(Rz, 4, Move));
	return Rz;
}

int SC_Msg_WrapExpr(Message* Self, SCDecl* Src) {
	if (!Self) {
		return kJB_kNeedsTypeCast;
	}
	Message* W = (JB_Syx_Msg(kJB_SyxDot, JB_LUB[602]));
	JB_Incr(W);
	Message* _tmPf0 = JB_Syx_Msg(kJB_SyxThg, JB_LUB[1299]);
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(W, (_tmPf0));
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Syx_Msg(kJB_SyxEmb, JB_LUB[0]);
	JB_Incr(_tmPf1);
	JB_Tree_SyntaxAppend(W, (_tmPf1));
	JB_Decr(_tmPf1);
	if (SC_Decl_IsFloat(Src)) {
		JB_SetRef(W->Name, JB_LUB[1300]);
	}
	JB_FreeIfDead(SC_Msg_ReplaceWith(Self, W));
	Message* _tmPf2 = ((Message*)JB_Ring_Last(W));
	JB_Incr(_tmPf2);
	JB_Tree_SyntaxAppend(_tmPf2, Self);
	JB_Decr(_tmPf2);
	JB_FreeIfDead(SC_TypeOfExpr(W, SC__Comp_program, nil));
	SCDecl* D = SC_Msg_AsDecl(Self);
	JB_Incr(D);
	if (D) {
		JB_SetRef(W->Obj, SC_Decl_NewWrapper(D, D));
	}
	 else {
	}
	JB_Decr(W);
	JB_Decr(D);
	return kJB_kCastedMatch;
}

void SC_Msg_WrapFloatOrInt(Message* Self, uint /*DataTypeCode*/ T, int N, SCDecl* D) {
	if (!((!JB_TC_SyntaxIs(T, kJB__TC_Float)) and (!JB_TC_SyntaxIs(T, kJB__TC_Int)))) {
		return;
	}
	SCClass* V = SC_VecType(JB_TC_IsFloat(T), N);
	JB_Incr(V);
	if (!SC_Decl_OperatorExact_isa(D, V)) {
		//using;
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Self, (&_usingf0));
		Message* W = JB_Syx_Msg(kJB_SyxType, JB_LUB[0]);
		JB_Incr(W);
		Message* Thg = JB_Msg_Msg(W, kJB_SyxThg, V->Name);
		JB_Incr(Thg);
		JB_SetRef(Thg->Obj, V->TypeNormal);
		JB_Decr(Thg);
		JB_SetRef(W->Obj, V->TypeNormal);
		JB_FreeIfDead(((Message*)JB_Tree_WrapWith(Self, W)));
		JB_Decr(W);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Self);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(V);
}

Message* SC_Msg_WrapWith(Message* Self, Syntax F, JB_String* S) {
	Message* Rz = nil;
	Rz = JB_Syx_OperatorPlus(F, S);
	(JB_Ring_PrevSibSet(Self, Rz));
	JB_Tree_SyntaxAppend(Rz, Self);
	return Rz;
}

void JB_Msg_XAtt__(Message* Self, FastString* Fs) {
	//;
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendString(Fs, JB_LUB[365]);
	JB_FS_SyntaxAppend(Fs, ((Message*)JB_Ring_First(Self)));
	JB_FS_AppendByte(Fs, '"');
	//;
}

void JB_Msg_XCDT__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[17]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendString(Fs, JB_LUB[18]);
}

void JB_Msg_XCom__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[19]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendString(Fs, JB_LUB[20]);
}

void JB_Msg_XML__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '<');
	JB_FS_AppendString(Fs, Self->Name);
	Message* Atts = ((Message*)JB_Ring_First(Self));
	{
		Message* A = ((Message*)JB_Ring_First(Atts));
		while (A) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(A));
			JB_FS_SyntaxAppend(Fs, A);
			A = _Nf2;
		};
		;
	}
	;
	Message* Children = ((Message*)JB_Ternary(Atts, ((Message*)JB_Ring_NextSib(Atts)), nil));
	if (!Children) {
		JB_FS_AppendString(Fs, JB_LUB[366]);
		return;
	}
	JB_FS_AppendByte(Fs, '>');
	bool SingleText = ((JB_Msg_EqualsSyx(Children, kJB_SyxXTxt, false))) and ((!((Message*)JB_Ring_NextSib(Children))));
	if (SingleText) {
		JB_FS_SyntaxAppend(Fs, Children);
	}
	 else {
		(++Fs->Indent);
		{
			Message* Ch = Children;
			while (Ch) {
				JB_FS_LineIndent(Fs);
				JB_FS_SyntaxAppend(Fs, Ch);
				Ch = ((Message*)JB_Ring_NextSib(Ch));
			};
			;
		}
		;
		(--Fs->Indent);
		JB_FS_LineIndent(Fs);
	}
	//;
	JB_FS_AppendString(Fs, JB_LUB[367]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendByte(Fs, '>');
	//;
}

void JB_Msg_XPI__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[505]);
	if (JB_Ring_HasChildCount(Self, 1)) {
		Message* _tmPf0 = ((Message*)JB_Ring_First(Self));
		JB_Incr(_tmPf0);
		JB_FS_SyntaxAppend(Fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_Msg_FSListArg(Self, Fs, false);
		JB_FS_AppendByte(Fs, '\n');
	}
	JB_FS_AppendString(Fs, JB_LUB[506]);
}

void JB_Msg_XTxt__(Message* Self, FastString* Fs) {
	JB_FS_AppendMultiReplace(Fs, Self->Name, JB__Constants_XML_EscapeStr, JB_StdErr);
}

bool JB_Msg_Yes(Message* Self, bool Default) {
	if (Self) {
		return JB_Str_Yes(Self->Name, Self);
	}
	return Default;
}

void JB_Msg_Yoda__(Message* Self, FastString* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	Message* S = ((Message*)JB_Ring_NextSib(F));
	Message* L = ((Message*)JB_Ring_NextSib(S));
	JB_FS_AppendString(Fs, JB_LUB[368]);
	JB_FS_SyntaxAppend(Fs, L);
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_SyntaxAppend(Fs, F);
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_SyntaxAppend(Fs, S);
}

Message* SC_Msg__NilchCompare() {
	if (SC_ReturnSelfEqNil) {
		return SC_ReturnSelfEqNil;
	}
	JB_SetRef(SC_ReturnSelfEqNil, JB_Str_ParseJbin(((JB_LUB[1542])), 1073741824));
	return SC_ReturnSelfEqNil;
}

bool JB_Msg__TreeCompare(Message* Orig, Message* Reparse, bool PrintIfSame) {
	if (!(Orig and Reparse)) {
		return JB_CompareError(Orig, Reparse);
	}
	if ((Orig->Func != Reparse->Func) or ((!JB_Str_Equals(Orig->Name, Reparse->Name, false)))) {
		return JB_CompareError(Orig, Reparse);
	}
	Message* R1 = ((Message*)JB_Ring_First(Reparse));
	Message* S1 = ((Message*)JB_Ring_First(Orig));
	while (R1 or S1) {
		if (!JB_Msg__TreeCompare(S1, R1, false)) {
			return nil;
		}
		R1 = ((Message*)JB_Ring_NextSib(R1));
		S1 = ((Message*)JB_Ring_NextSib(S1));
	};
	if (PrintIfSame) {
		JB_Msg__TreeComparePrint(Orig);
	}
	return true;
}

void JB_Msg__TreeComparePrint(Message* Orig) {
	FastString* _fsf0 = JB_FS_Constructor(nil);
	JB_Incr(_fsf0);
	JB_FS_AppendString(_fsf0, JB_LUB[507]);
	JB_String* _tmPf1 = JB_Msg_MiniName(Orig, JB_LUB[0]);
	JB_Incr(_tmPf1);
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(_fsf0, JB_LUB[508]);
	JB_String* _tmPf2 = JB_FS_GetResult(_fsf0);
	JB_Incr(_tmPf2);
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf2);
	JB_Decr(_tmPf2);
}


MessageID* JB_ID_Constructor(MessageID* Self, JB_String* Name, Syntax Fn, uint64 ID) {
	if (Self == nil) {
		Self = ((MessageID*)JB_NewClass(&MessageIDData));
	}
	JB_Str_Clone(Self, Name);
	Self->Frequency = 0;
	Self->Position = 0;
	Self->Func = Fn;
	Self->Obj = nil;
	Self->ID = ID;
	return Self;
}

void JB_ID_Destructor(MessageID* Self) {
	JB_Clear(Self->Obj);
}

JB_String* JB_ID_Render(MessageID* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_String* _tmPf0 = JB_Syx_Name(Self->Func);
	JB_Incr(_tmPf0);
	JB_FS_AppendString(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(Fs, '@');
	JB_FS_AppendQuotedEscape(Fs, Self);
	JB_String* _tmPf1 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf1);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SortComparison JB_ID__ByID(MessageID* Self, MessageID* B) {
	int64 Diff = B->ID - Self->ID;
	if (Diff) {
		return Diff;
	}
	return ((uint64)B) - ((uint64)Self);
}



SCDecl* SC_Decl_AccessToMemCpy(SCDecl* Self, Message* Exp, Message* Side, SCDecl* Type) {
	SCDecl* Internal = Type->Internal;
	Message* Rel = JB_Msg_Ancestor(Exp, kJB_SyxRel);
	if (!(Rel and Internal)) {
		JB_Msg_Fail(Rel, JB_LUB[1002]);
		return nil;
	}
	Message* F = ((Message*)JB_Ring_First(Rel));
	Rel->Func = kJB_SyxFunc;
	Message* Name = JB_Syx_OperatorPlus(kJB_SyxThg, JB_LUB[1003]);
	(JB_Ring_FirstSet(Rel, Name));
	JB_SetRef(Rel->Obj, SC_TypeVoid);
	(SC_Msg_ASMTypeSet(Rel, 0));
	Message* Prms = ((Message*)JB_Ring_NextSib(F));
	Prms->Func = kJB_SyxPrm;
	JB_Tree_SyntaxAppend(Prms, F);
	if (Side->Obj == SC_TypeNil) {
		JB_SetRef(Name->Name, JB_LUB[1004]);
	}
	 else {
		JB_Tree_SyntaxAppend(Prms, ((Message*)JB_Ring_NextSib(Prms)));
	}
	JB_SetRef(Prms->Obj, SC_Comp__XFunc(Name->Name, nil));
	Message* Msg = JB_int_Msg(SC_Decl_SizeOfQuery(Internal));
	JB_SetRef(Msg->Obj, SC_TypeInt->TypeNormal);
	JB_Tree_SyntaxAppend(Prms, Msg);
	return Type;
}

int SC_Decl_AccessType(SCDecl* Self, SCDecl* Access, Message* Ch) {
	int W = SC_Decl_IsNumeric(Self);
	if (W > 1) {
		return 1;
	}
	if (SC_Decl_IsCArray(Self)) {
		return 2;
	}
	if (Self->PointerCount) {
		if (!Access) {
			if (SC_Class_IsStruct(Self->Type)) {
				return 0;
			}
			return 2;
		}
		if (SC_Decl_OperatorMatches(Access, SC_TypeInt)) {
			if (!((JB_Msg_EqualsSyx(Ch, kJB_SyxBra, false)) and (JB_Msg_EqualsSyx(((Message*)JB_Ring_First(Ch)), kJB_SyxBra, false)))) {
				return 2;
			}
		}
	}
	return 0;
}

SCDecl* SC_Decl_ActualReplace(SCDecl* Self, SCDecl* New) {
	JB_SetRef(Self->Type, New->Type);
	JB_SetRef(Self->Contains, New->Contains);
	uint P = Self->PointerCount;
	if (!P) {
		return Self;
	}
	if (New->PointerCount) {
		if (true) {
			JB_Msg_Fail(Self->Source, JB_Str_OperatorPlus(kJB__Rec_NonFatal, JB_LUB[868]));
		}
	}
	 else {
		SCDecl* Last = Self;
		while ((--P) > 0) {
			SCDecl* Nl = SC_Decl_CopyDecl(Last, false);
			JB_SetRef(Last->Internal, Nl);
			Last = Nl;
		};
		JB_SetRef(Last->Internal, New);
	}
	return Self;
}

int SC_Decl_Alignment(SCDecl* Self) {
	if (SC_Decl_IsObject(Self) or Self->PointerCount) {
		return JB_Platform__PointerBytes();
	}
	if (SC_Decl_IsCArray(Self)) {
		return SC_Decl_Alignment(Self->Internal);
	}
	SCClass* T = Self->Type;
	JB_Incr(T);
	if (SC_Class_IsStruct(T)) {
		JB_Decr(T);
		return 32;
	}
	uint _tmPf0 = T->Size;
	JB_Decr(T);
	return _tmPf0;
}

bool SC_Decl_AlreadyContains(SCDecl* Self) {
	SCDecl* Ty = Self->Type->Contained;
	if (Ty) {
		return SC_Decl_MiniMatch(Self->Contains, Ty, 0);
	}
	return false;
}

uint64 SC_Decl_AsConst(SCDecl* Self, Message* Value, DataTypeCode* Ty) {
	if (!SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Const)) {
		JB_Msg_Fail(Value, JB_LUB[1005]);
		return 0;
	}
	if (SC_Decl_IsFloat(Self)) {
		SC_Msg_TypeExpect(Value, Ty, kJB__TC_Float);
	}
	 else if (SC_Decl_IsInt(Self)) {
		SC_Msg_TypeExpect(Value, Ty, kJB__TC_Int);
	}
	 else {
		if (true) {
			JB_Msg_Fail(Value, JB_LUB[1006]);
		}
	}
	return Self->ExportPosition;
}

SCDecl* SC_Decl_AsLocal(SCDecl* Self) {
	SCDecl* Rz = nil;
	JB_Incr(Rz);
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Local)) {
		JB_Decr(Rz);
		return Self;
	}
	JB_SetRef(Rz, SC_Decl_CopyDecl(Self, false));
	(SC_Decl_NameSet(Rz, JB_LUB[0]));
	(SC_Decl_SyntaxIsSet(Rz, kSC__SCDeclInfo_Local, true));
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Decl_AssignabilityCheck(SCDecl* Self, Message* Ln, Message* RN, SCDecl* Rc, bool WasHex) {
	if (!(Self and Rc)) {
		return nil;
	}
	if (Ln) {
		if (!((SC_Msg_IsAssignable(Ln)) and ((!SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Const))))) {
			JB_Msg_Fail(Ln, JB_LUB[1098]);
			return nil;
		}
	}
	if (SC_Decl_IsNil(Rc)) {
		return true;
	}
	if (SC_Decl_IsCArray(Self) or SC_Decl_IsCArray(Rc)) {
		if (Self->C_Array != Rc->C_Array) {
			JB_Msg_Fail(RN, JB_LUB[1099]);
			return nil;
		}
		if (JB_Msg_OperatorIn(RN, kJB_SyxSheb)) {
			return true;
		}
		if (true) {
			JB_Msg_Fail(RN, JB_LUB[1098]);
		}
	}
	if (SC_Decl_SyntaxIs(Rc, kSC__SCDeclInfo_Const)) {
		SC_Decl_ConstInRange(Self, RN, Rc, WasHex);
	}
	return true;
}

JB_String* SC_Decl_AutoCompleteName(SCDecl* Self) {
	JB_String* N = SC_Decl_RealName(Self);
	JB_Incr(N);
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, N);
	JB_FS_AppendMultiByte(Fs, ' ', JB_int_OperatorMax((32 - JB_Str_LengthUTF8(N)), 1));
	JB_Decr(N);
	JB_FS_AppendByte(Fs, '|');
	Message* _tmPf0 = SC_Decl_WriteType(Self, 0, true);
	JB_Incr(_tmPf0);
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(Fs, '|');
	JB_String* _tmPf1 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf1);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Decl_BecomeReal(SCDecl* Self) {
	if (!SC_NilState_SyntaxIs(Self->NilDeclared, kSC__NilState_Stated)) {
		Self->NilDeclared = kSC__NilState_Real;
	}
}

int SC_Decl_BestFloat(SCDecl* Self, SCDecl* OT) {
	uint T = OT->Type->TypeInfo;
	int Bt = JB_TC_ItemBitCount(T);
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Const)) {
		return Bt;
	}
	uint S = Self->Type->TypeInfo;
	int Bme = JB_TC_ItemBitCount(S);
	if (SC_Decl_SyntaxIs(OT, kSC__SCDeclInfo_Const)) {
		return Bme;
	}
	return JB_int_OperatorMax(Bme, Bt);
}

SCDecl* SC_Decl_Better_Numeric(SCDecl* Self, SCDecl* O, OpMode Mode, Message* Left, Message* Right) {
	uint S = Self->Type->TypeInfo;
	uint T = O->Type->TypeInfo;
	if (!SC_OpMode_SyntaxIs(Mode, kSC__OpMode_MakesSigned)) {
		if (SC_OpMode_SyntaxIs(Mode, kSC__OpMode_LoseBits)) {
			if (JB_TC_Basictype(S) == JB_TC_Basictype(T)) {
				if (JB_TC_ByteCount(S) < JB_TC_ByteCount(T)) {
					return Self;
				}
				return O;
			}
		}
		if ((S & (~kJB__TC_sign)) == (T & (~kJB__TC_sign))) {
			return Self;
		}
	}
	SCClass* Cls = SC_Decl_Better_Numeric_Sub(Self, O, Mode, Left, Right);
	if (Cls->TypeInfo == S) {
		return Self;
	}
	if (Cls->TypeInfo == T) {
		return O;
	}
	return Cls->TypeNormal;
}

SCClass* SC_Decl_Better_Numeric_Sub(SCDecl* Self, SCDecl* Ot, OpMode Op, Message* Left, Message* Right) {
	uint S = Self->Type->TypeInfo;
	uint T = Ot->Type->TypeInfo;
	if (SC_Decl_IsFloat(Self) or JB_TC_IsFloat(T)) {
		bool KS = SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Const);
		bool OS = SC_Decl_SyntaxIs(Ot, kSC__SCDeclInfo_Const);
		if (KS and OS) {
			if (JB_TC_ItemBitCount(S) <= JB_TC_ItemBitCount(T)) {
				return Self->Type;
			}
			return Ot->Type;
		}
		if (KS != OS) {
			if (OS) {
				return Self->Type;
			}
			 else {
				return Ot->Type;
			}
		}
		int Bits = SC_Decl_BestFloat(Self, Ot);
		int FF = JB_Ternary(Bits > 32, JB_TC_Floatness(kJB__TC_Double), JB_TC_Floatness(kJB__TC_Float));
		SCClass* Dest = ((SCClass*)JB_Ternary(Bits > 32, SC_TypeFloat64, SC_Typefloat));
		if (JB_TC_Floatness(S) != FF) {
			SC_Msg_CastToClass(Left, Dest, nil);
		}
		if (JB_TC_Floatness(T) != FF) {
			SC_Msg_CastToClass(Right, Dest, nil);
		}
		return Dest;
	}
	int Bme = JB_TC_ItemBitCount(S);
	int Bt = JB_TC_ItemBitCount(T);
	int Bits = JB_int_OperatorMax(Bme, Bt);
	if (Op) {
		if (SC_OpMode_SyntaxIs(Op, kSC__OpMode_MakesSigned)) {
			int Bits2 = JB_int_OperatorMax((Bme + (!JB_TC_IsSigned(S))), (Bt + (!JB_TC_IsSigned(T))));
			if (Bits2 > 32) {
				return SC_TypeInt64;
			}
			return SC_TypeInt;
		}
		if (SC_OpMode_SyntaxIs(Op, kSC__OpMode_LoseBits)) {
			Bits = JB_int_OperatorMin(Bme, Bt);
		}
		 else if (SC_OpMode_SyntaxIs(Op, kSC__OpMode_ShiftOnly)) {
			Bits = Bme;
		}
		 else if (SC_OpMode_SyntaxIs(Op, kSC__OpMode_NoExtraBits)) {
			0;
		}
		 else if ((SC_OpMode_SyntaxIs(Op, kSC__OpMode_MathLike)) and (Bits < 32)) {
			Bits = 32;
		}
	}
	bool Signed = JB_TC_IsSigned(S);
	if (!SC_OpMode_SyntaxIs(Op, kSC__OpMode_ShiftOnly)) {
		if (!Signed) {
			Signed = JB_TC_IsSigned(T);
		}
	}
	if (Bits > 32) {
		return ((SCClass*)JB_Ternary(Signed, SC_TypeInt64, SC_TypeuInt64));
	}
	if (Bits > 16) {
		return ((SCClass*)JB_Ternary(Signed, SC_TypeInt, SC_TypeuInt));
	}
	if (Bits > 8) {
		return ((SCClass*)JB_Ternary(Signed, SC_TypeInt16, SC_TypeuInt16));
	}
	return ((SCClass*)JB_Ternary(Signed, SC_TypeChar, SC_TypeByte));
}

ASMReg SC_Decl_CalculateASMType(SCDecl* Self) {
	if (Self->PointerCount or SC_Decl_IsCArray(Self)) {
		return ((ASMReg)kJB__TC__voidptr);
	}
	SCClass* T = Self->Type;
	SCNodeType B = T->BaseType;
	if (B > kSC__SCNodeType_DataType) {
		return ((ASMReg)kJB__TC__voidptr);
	}
	uint I = T->TypeInfo;
	if (I == kJB__TC_UnusedType) {
	}
	return ((ASMReg)I);
}

int SC_Decl_CalculateSize(SCDecl* Self, int Depth) {
	if (SC_Class_IsObject(Self->Type) or Self->PointerCount) {
		return JB_Platform__PointerBytes();
	}
	(++Depth);
	if (SC_Decl_IsCArray(Self)) {
		SCDecl* I = Self->Internal;
		if (I) {
			return SC_Decl_CalculateSize(I, Depth);
		}
	}
	return SC_Class_CalculateSize(Self->Type, Depth);
}

bool SC_Decl_CanCompare(SCDecl* Self, SCDecl* Against, bool AsEquals) {
	SCClass* T = Self->Type;
	bool CanUseEquals = AsEquals and (SC_Class_SyntaxIs(T, kSC__ClassInfo_HasEqualsFunc));
	if (((!SC_Class_SyntaxIs(T, kSC__ClassInfo_HasCompareFunc))) and (!CanUseEquals)) {
		return false;
	}
	if (CanUseEquals and SC_Class_CanCompareSub(T, JB_LUB[1687], Against)) {
		return true;
	}
	if (SC_Class_SyntaxIs(T, kSC__ClassInfo_HasCompareFunc)) {
		return SC_Class_CanCompareSub(T, JB_LUB[1688], Against);
	}
	return false;
}

bool SC_Decl_CanNilCheck(SCDecl* Self) {
	if (!Self) {
		return nil;
	}
	if (Self->PointerCount) {
		return true;
	}
	if (SC_Decl_IsCArray(Self)) {
		return false;
	}
	return (SC_Class_SyntaxIs(Self->Type, kSC__ClassInfo_HasNilChecker));
}

bool SC_Decl_CanRemoveArgOnReturn(SCDecl* Self, Message* R) {
	if (!Self) {
		return true;
	}
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_IntendedAsReturn)) {
		return Self == SC_Msg_FastDecl(R);
	}
	return false;
}

bool SC_Decl_CantBeNilInCpp(SCDecl* Self) {
	if (Self->PointerCount) {
		return nil;
	}
	return (SC_Decl_IsCArray(Self)) or ((SC_Class_IsStruct(Self->Type)) or (SC_Decl_IsNumeric(Self) > 1));
}

SCDecl* SC_Decl_CanUpgradeInternalPointer(SCDecl* Self) {
	SCDecl* Infernal = Self->Internal;
	if ((SC_Decl_SyntaxIs(Infernal, kSC__SCDeclInfo_Local)) and Infernal->NilReg) {
		return Infernal;
	}
	return nil;
}

bool SC_Decl_CanUseDefault(SCDecl* Self) {
	if (SC_Decl_IsNil(Self)) {
		return false;
	}
	if (SC_Class_IsStruct(Self->Type) and (!Self->PointerCount)) {
		return (SC_Decl_IsBareStruct(Self));
	}
	return true;
}

bool SC_Decl_CanWrap(SCDecl* Self) {
	if (Self->PointerCount or Self->Type->FuncProto) {
		return true;
	}
	if (!((!SC_Decl_IsBareStruct(Self)) and (!SC_Decl_IsCArray(Self)))) {
		return nil;
	}
	if (Self->Type->TypeInfo == kJB__TC_UnusedType) {
		return nil;
	}
	return true;
}

SCDecl* SC_Decl_CArrayInner(SCDecl* Self) {
	while (SC_Decl_IsCArray(Self)) {
		Self = Self->Internal;
	};
	return Self;
}

int SC_Decl_CArraySize(SCDecl* Self) {
	int Mul = 1;
	if (SC_Decl_IsCArray(Self)) {
		Mul = SC_Decl_CArrayTotal(Self);
	}
	SCClass* T = Self->Type;
	if (SC_Class_IsObject(T) or Self->PointerCount) {
		return JB_Platform__PointerBytes() * Mul;
	}
	return T->Size * Mul;
}

int SC_Decl_CArrayTotal(SCDecl* Self) {
	int Rz = 0;
	Rz = 1;
	while (true) {
		int M = Self->C_Array;
		if ((!M)) {
			break;
		}
		Rz = (Rz * M);
		SCDecl* _tmPf0 = Self->Internal;
		if (!_tmPf0) {
			break;
		}
		Self = _tmPf0;
	};
	return Rz;
}

void SC_Decl_CheckLibGlob(SCDecl* Self) {
}

SCDecl* SC_Decl_CheckMath(SCDecl* Self, Message* Exp) {
	if (Self->PointerCount == 1) {
		if (Self->Type == SC_TypeVoid_) {
			JB_Msg_Fail(Exp, JB_LUB[869]);
		}
	}
	return Self;
}

bool SC_Decl_CompareUnclear(SCDecl* Self, SCDecl* D, bool MakesSenseVsZero) {
	uint L = SC_Decl_TypeInfo(Self);
	uint R = SC_Decl_TypeInfo(D);
	int Bitdiff = JB_TC_BitCount(L) - JB_TC_BitCount(R);
	if (JB_TC_IsSigned(L) and (Bitdiff <= 0)) {
		if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_DirectNumber)) {
			uint64 X = Self->ExportPosition;
			if (X) {
				return ((int64)X) < 0;
			}
			return (!MakesSenseVsZero);
		}
		return true;
	}
	return false;
}

int SC_Decl_Complexity(SCDecl* Self) {
	int Rz = 0;
	SCClass* T = Self->Type;
	Rz = (Rz + SC_Class_IsObject(T));
	Rz = (Rz + ((SC_SCNodeType_SyntaxIs(T->BaseType, kSC__SCNodeType_FuncProto)) << 1));
	Rz = (Rz + (SC_Class_IsStruct(T) << 2));
	Rz = (Rz + (SC_Decl_IsCArray(Self) << 3));
	return Rz;
}

void SC_Decl_ConstInRange(SCDecl* Self, Message* RN, SCDecl* Rt, bool WasHex) {
	int64 N = 0;
	if (JB_Msg_EqualsSyx(RN, kJB_SyxNum, false)) {
		if (SC_Msg_IsInt(RN)) {
			N = JB_Msg_Int(RN, 0);
		}
	}
	 else if (((JB_Msg_EqualsSyx(RN, kJB_SyxThg, false))) and ((SC_Decl_SyntaxIs(Rt, kSC__SCDeclInfo_NumberConst)) and (SC_Decl_IsNormalNumber(Rt) and SC_Decl_IsInteger(Rt)))) {
		N = Rt->ExportPosition;
	}
	if (N) {
		int64 Bad = SC_Decl_ConstInRangeSub(Self, N, WasHex);
		if (Bad) {
			if (true) {
				FastString* _fsf0 = JB_FS_Constructor(nil);
				JB_FS_AppendString(_fsf0, JB_LUB[1007]);
				JB_FS_AppendInt64(_fsf0, N);
				JB_FS_AppendString(_fsf0, JB_LUB[1008]);
				JB_FS_AppendInt64(_fsf0, Bad);
				JB_Msg_Fail(RN, JB_FS_GetResult(_fsf0));
			}
		}
	}
}

int64 SC_Decl_ConstInRangeSub(SCDecl* Self, int64 Value, bool WasHex) {
	uint T = Self->Type->TypeInfo;
	if (!JB_TC_IsInt(T)) {
		return 0;
	}
	int S = JB_TC_ByteCount(T);
	bool Sign = JB_TC_IsSigned(T);
	if (S == 4) {
		if (Sign and (!WasHex)) {
			return SC_int64_ValueTrap(Value, JB_int__Min(), JB_int__Max());
		}
		return SC_int64_ValueTrap(Value, -1, 4294967295);
	}
	if (S == 2) {
		if (Sign and (!WasHex)) {
			return SC_int64_ValueTrap(Value, kJB__int16_min, kJB__int16_max);
		}
		return SC_int64_ValueTrap(Value, -1, 65535);
	}
	if (S == 1) {
		if (Sign and (!WasHex)) {
			return SC_int64_ValueTrap(Value, kJB__int8_min, kJB__int8_max);
		}
		return SC_int64_ValueTrap(Value, -1, 255);
	}
	return 0;
}

SCDecl* SC_Decl_Constructor(SCDecl* Self, SCClass* Type) {
	if (Self == nil) {
		Self = ((SCDecl*)JB_NewClass(&SCDeclData));
	}
	SC_Named_Constructor(Self);
	Self->PointerCount = 0;
	Self->NilReg = 0;
	Self->NilAllocDepth = 0;
	Self->BranchDepth = 0;
	Self->DataType = kJB__TC_UnusedType;
	Self->C_Array = 0;
	Self->FatConstIndex = 0;
	Self->ExportPosition = 0;
	Self->HiderFunc = nil;
	Self->IsLookupOnly = nil;
	JB_Incr2(Self->StringData, JB_LUB[0]);
	Self->Internal = nil;
	Self->Contains = nil;
	Self->Default = nil;
	JB_Incr2(Self->Type, Type);
	Self->NilDeclared = kSC__NilState_Either;
	Self->Info = kSC__SCDeclInfo_Altered;
	return Self;
}

SCDecl* SC_Decl_Containedfix(SCDecl* Self) {
	SCDecl* Rz = nil;
	SCClass* T = Self->Type;
	Rz = ((SCDecl*)JB_Ternary(T->TypeNormal == Self, SC_Decl_CopyDecl(Self, false), Self));
	JB_SetRef(Rz->Contains, T->SelfDecl->Contains);
	return Rz;
}

SCDecl* SC_Decl_ContainedReplace(SCDecl* Self, SCDecl* Contains, bool NeedsName) {
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_UpgradeableContained)) {
		if (((!NeedsName) or (!JB_Str_Exists(Self->Name))) and SC_Decl_SameForReplace(Self, Contains)) {
			return Contains;
		}
		bool SameType = Contains->Type == Self->Type;
		if (SameType) {
			if (SC_Decl_SameForReplace(Self, Contains)) {
				return Self;
			}
		}
		SCDecl* C = SC_Decl_CopyDecl(Self, false);
		((SC_Decl_SyntaxIsSet(C, kSC__SCDeclInfo_UpgradeableContained, (!SameType))));
		return SC_Decl_ActualReplace(C, Contains);
	}
	SCDecl* Inside = Self->Contains;
	if (Inside and ((Inside != Contains) and SC_Decl_SyntaxIs(Inside, kSC__SCDeclInfo_UpgradeableContained))) {
		Self = SC_Decl_CopyDecl(Self, false);
		JB_SetRef(Self->Contains, Contains);
	}
	return Self;
}

bool SC_Decl_ContainsMatch(SCDecl* Self, SCDecl* O, int TypeCast) {
	if (TypeCast & kJB_kTypeCastIgnoreContained) {
		return true;
	}
	SCDecl* Oc = SC_Decl_ReallyContains(O);
	SCDecl* Sc = SC_Decl_ReallyContains(Self);
	if ((Oc == Sc) or ((!(Sc and Oc)) or (!O->Contains))) {
		return true;
	}
	return SC_int_IsNormalMatch(SC_Decl_TypeMatch(Sc, Oc, 0, nil));
}

SCDecl* SC_Decl_CopyDecl(SCDecl* Self, bool ForNewVariable) {
	SCDecl* Dcl = SC_Decl_Constructor(nil, Self->Type);
	SC_Decl_CopyTypeInfoTo(Self, Dcl);
	(SC_Decl_NameSet(Dcl, Self->Name));
	JB_SetRef(Dcl->Default, Self->Default);
	((SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Borrowed, (!ForNewVariable) and (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Borrowed)))));
	return Dcl;
}

SCDecl* SC_Decl_CopyDeclsStructFixer(SCDecl* Self, Message* Src, DeclMode Mode, Message* Type) {
	if (SC_DeclMode_SyntaxIs(Mode, kSC__DeclMode_FuncParam)) {
		if ((SC_Decl_IsCArray(Self))) {
			JB_Msg_Fail(Src, JB_LUB[1009]);
		}
		if (SC_Decl_IsBareStruct(Self)) {
			return SC_Decl_GetAddress(Self, kSC__DeclMode_Always);
		}
	}
	 else if (JB_Msg_EqualsSyx(Type, kJB_SyxEmb, false)) {
		if (SC_Decl_IsBareStruct(Self)) {
			Message* V = ((Message*)JB_Ring_Last(((Message*)JB_Ring_Last(Src))));
			SCDecl* Ty2 = SC_Decl_GetAddress(Self, kSC__DeclMode_Always);
			SC_Msg_GetAddressOf(V, Ty2, false);
			return Ty2;
		}
	}
	if (JB_RefCount(Self) == 1) {
		return Self;
	}
	return SC_Decl_CopyDecl(Self, false);
}

void SC_Decl_CopyTypeInfoTo(SCDecl* Self, SCDecl* Dcl) {
	JB_SetRef(Dcl->Type, Self->Type);
	Dcl->PointerCount = Self->PointerCount;
	JB_SetRef(Dcl->Contains, Self->Contains);
	JB_SetRef(Dcl->Internal, Self->Internal);
	SCDeclInfo Cpyflags = kSC__SCDeclInfo_DclCopied;
	Dcl->Info = (Dcl->Info & (~Cpyflags));
	Dcl->Info = (Dcl->Info | (Self->Info & Cpyflags));
	Dcl->C_Array = Self->C_Array;
	Dcl->NilDeclared = Self->NilDeclared;
}

bool SC_Decl_CouldUpgradeToReal(SCDecl* Self) {
	return SC_Decl_TypeSuffers(Self) and (!SC_Decl_NilStated(Self));
}

Message* SC_Decl_CreateDefault(SCDecl* Self, Message* Errs, bool Isfunc) {
	if (SC_Decl_CantBeNilInCpp(Self)) {
		if (Isfunc) {
			return SC_Decl_CreateStructNil(Self, Errs);
		}
		return nil;
	}
	if (Self->PointerCount) {
		if (Isfunc) {
			return SC_Msg_CreateNil(Errs);
		}
		return nil;
	}
	Message* D = Self->Type->Defawlt;
	JB_Incr(D);
	if (D) {
		Message* _tmPf0 = JB_Msg_Copy(D, Errs);
		JB_Incr(_tmPf0);
		JB_Decr(D);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(D);
	return nil;
}

Message* SC_Decl_CreateSimpleTypeCast(SCDecl* Self, Message* Exp) {
	Message* Rz = nil;
	JB_Incr(Rz);
	Message* Curr = Exp;
	JB_Incr(Curr);
	while ((JB_Msg_EqualsSyx(Curr, kJB_SyxBra, false))) {
		JB_SetRef(Curr->Obj, Self);
		JB_SetRef(Curr, ((Message*)JB_Ring_First(Curr)));
	};
	JB_Decr(Curr);
	JB_SetRef(Rz, JB_Syx_Msg(kJB_SyxType, JB_LUB[534]));
	(JB_Ring_PrevSibSet(Exp, Rz));
	JB_Tree_SyntaxAppend(Rz, Exp);
	Message* _tmPf0 = SC_Decl_WriteType(Self, 0, true);
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SetRef(Rz->Obj, Self);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Decl_CreateStructNil(SCDecl* Self, Message* Where) {
	Message* Rz = nil;
	JB_Incr(Rz);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Where, (&_usingf0));
	JB_SetRef(Rz, SC_Decl_CreateStructNilSub(Self));
	JB_SetRef(Rz->Obj, Self);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Where);
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Decl_CreateStructNilSub(SCDecl* Self) {
	Message* Rz = nil;
	JB_Incr(Rz);
	if (SC_Decl_IsCArray(Self)) {
		JB_Decr(Rz);
		return JB_Syx_Msg(kJB_SyxArg, JB_LUB[0]);
	}
	JB_SetRef(Rz, JB_Syx_OperatorPlus(kJB_SyxType, JB_LUB[534]));
	JB_Msg_AppendSyx(Rz, kJB_SyxArg, JB_LUB[0]);
	Message* _tmPf0 = SC_Decl_WriteType(Self, 0, true);
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Decl_DeclToAddr(SCDecl* Self, SCDecl* P0) {
	Message* Rz = nil;
	Rz = JB_Syx_OperatorPlus(kJB_SyxBRel, JB_LUB[48]);
	JB_Tree_SyntaxAppend(Rz, SC_Decl_DeclToDot(Self, P0));
	JB_SetRef(Rz->Obj, SC_Decl_GetAddress(Self, kSC__DeclMode_Always));
	return Rz;
}

Message* SC_Decl_DeclToDot(SCDecl* Self, SCDecl* P0) {
	Message* Rz = nil;
	Rz = JB_Syx_OperatorPlus(kJB_SyxDot, Self->Name);
	Message* Thg = JB_Msg_Msg(Rz, kJB_SyxThg, JB_LUB[180]);
	JB_SetRef(Thg->Obj, P0);
	JB_Msg_AppendSyx(Rz, kJB_SyxEmb, JB_LUB[0]);
	JB_SetRef(Rz->Obj, Self);
	return Rz;
}

SCDecl* SC_Decl_DefaultToReal(SCDecl* Self) {
	return SC_Decl_MakeExistance(Self, kSC__NilState_Real, nil);
}

void SC_Decl_Destructor(SCDecl* Self) {
	JB_Clear(Self->IsLookupOnly);
	JB_Clear(Self->StringData);
	JB_Clear(Self->Internal);
	JB_Clear(Self->Contains);
	JB_Clear(Self->Default);
	JB_Clear(Self->Type);
	SC_Named_Destructor(Self);
}

SCDecl* SC_Decl_DownGrade(SCDecl* Self) {
	if (!SC_Decl_IsNormalObject(Self)) {
		return Self;
	}
	SCClass* Y = Self->Type->DowngradeTo;
	if (Y) {
		return Y->TypeNormal;
	}
	return Self;
}

void SC_Decl_ExpectFail(SCDecl* Self, SCDecl* O, Message* Errnode, Message* Backup) {
	JB_Incr(Errnode);
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, JB_LUB[870]);
	JB_FreeIfDead(SC_Decl_RenderTypeName(Self, Fs));
	JB_FS_AppendString(Fs, JB_LUB[871]);
	JB_FreeIfDead(SC_Decl_RenderTypeNameNicer(O, Fs));
	JB_FS_AppendString(Fs, JB_LUB[872]);
	if (!Errnode) {
		JB_SetRef(Errnode, Backup);
	}
	if (true) {
		JB_String* _tmPf0 = JB_FS_SyntaxCast(Fs);
		JB_Incr(_tmPf0);
		JB_Msg_Fail(Errnode, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Fs);
	JB_Decr(Errnode);
}

Message* SC_Decl_ExpectMatch(SCDecl* Self, SCDecl* O, int TypeCast, Message* Exp, Message* ErrNode) {
	Message* Rz = nil;
	Rz = SC_Decl_ExpectMatchSub(Self, O, TypeCast, Exp, ErrNode);
	if (!Rz) {
		Rz = Exp;
	}
	return Rz;
}

Message* SC_Decl_ExpectMatchForDecl(SCDecl* Self, SCDecl* O, Message* Exp) {
	Message* Rz = nil;
	Rz = SC_Decl_ExpectMatchSub(Self, O, kJB_kTypeCastTrue | kJB_kTypeCastForSetRel, Exp, nil);
	if (!Rz) {
		Rz = Exp;
	}
	return Rz;
}

Message* SC_Decl_ExpectMatchSub(SCDecl* Self, SCDecl* O, int TypeCast, Message* Exp, Message* ErrNode) {
	TypeCast = (TypeCast | SC_Msg_IntSmallness(Exp, O));
	int Matched = SC_Decl_TypeMatch(Self, O, TypeCast, Exp);
	if ((Matched == kJB_kCastedMatch) or (Matched == kJB_kLossyCastedMatch)) {
		return SC_Msg_CastedParent(Exp);
	}
	if (Matched == kJB_kNoMatch) {
		SC_Decl_ExpectFail(Self, O, ErrNode, Exp);
		SC_Decl_TypeMatch(Self, O, TypeCast, Exp);
	}
	return nil;
}

bool SC_Decl_ExpectRelMatch(SCDecl* Self, SCDecl* O, Message* Exp, Message* Side, Message* ErrNode) {
	bool Rz = false;
	int Cast = kJB_kTypeCastTrue;
	if (!Side) {
		Cast = (Cast | kJB_kTypeCastBothWays);
	}
	 else {
		Cast = (Cast | kJB_kTypeCastForRelSet);
		if ((!SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Local)) or (!SC_Decl_SyntaxIs(O, kSC__SCDeclInfo_Local))) {
			Cast = (Cast | kJB_kTypeCastSetToMemory);
		}
	}
	Rz = ((bool)SC_Decl_ExpectMatchSub(Self, O, Cast, Exp, ErrNode));
	if (Side) {
		if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Local)) {
			SC_Decl_MarkAsAltered(Self);
		}
		if ((SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Self)) and (SC_Func_SyntaxIs(SC_Func__CurrFunc(), kSC__FunctionType_Destructor))) {
			if (true) {
				JB_Msg_Fail(Exp, JB_LUB[1629]);
			}
		}
	}
	return Rz;
}

SCDecl* SC_Decl_ExtractAmount(SCDecl* Self, Message* Prms) {
	SCDecl* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, SC_Decl_ExtractAmountSub(Self, Prms));
	if ((!Rz)) {
		JB_Msg_Fail(Prms, JB_LUB[1333]);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

SCDecl* SC_Decl_ExtractAmountSub(SCDecl* Self, Message* Prms) {
	SCDecl* Rz = nil;
	JB_Incr(Rz);
	Message* Num = ((Message*)JB_Ring_First(Prms));
	JB_Incr(Num);
	if (JB_Msg_EqualsSyx(Num, kJB_SyxUnit, false)) {
		JB_FreeIfDead(SC_TypeOfUnit(Num, nil, nil));
	}
	if (JB_Msg_Expect(Num, kJB_SyxNum, nil) and JB_Msg_ExpectLast(Num, JB_LUB[0])) {
		JB_SetRef(Rz, SC_Decl_CopyDecl(Self, false));
		SC_Decl_IsCarray(Rz, JB_Msg_Int(Num, 0), Self);
		JB_SetRef(Rz->Default, JB_Syx_Msg(kJB_SyxArg, JB_LUB[0]));
	}
	JB_Decr(Num);
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Decl_FastMatch(SCDecl* Self, SCDecl* O) {
	if (O->Type != Self->Type) {
		return nil;
	}
	if (O->PointerCount != Self->PointerCount) {
		return nil;
	}
	return O->C_Array == Self->C_Array;
}

FatASM* SC_Decl_Fat(SCDecl* Self) {
	uint K = ((uint)Self->FatConstIndex);
	if (K) {
		return SC_uint_FAT(K);
	}
	return nil;
}

int SC_Decl_FloatCast(SCDecl* Self, SCDecl* Orig, Message* Exp) {
	if (SC_Decl_IsNormal(Self)) {
		return SC_Msg_CastToClass(Exp, Self->Type, nil);
	}
	SC_Decl_ExpectFail(Self, Orig, Exp, nil);
	return 0;
}

SCDecl* SC_Decl_ForContained(SCDecl* Self) {
	SCDecl* Rz = nil;
	JB_Incr(Rz);
	bool Strong = ((!SC_NilState_SyntaxIs(Self->NilDeclared, kSC__NilState_Nilish))) and SC_Decl_TypeSuffers(Self);
	if (((!SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Global))) and ((!JB_Str_Exists(Self->Name)) and (!Strong))) {
		JB_Decr(Rz);
		return Self;
	}
	JB_SetRef(Rz, SC_Decl_CopyDecl(Self, false));
	(SC_Decl_NameSet(Rz, JB_LUB[0]));
	Rz->NilDeclared = (Rz->NilDeclared | kSC__NilState_Nilish);
	(SC_Decl_SyntaxIsSet(Rz, kSC__SCDeclInfo_Global, (!true)));
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Decl_Found(SCDecl* Self) {
	if (Self) {
		if (Self->Type != SC_TypeVoid_) {
			return true;
		}
		if (Self->PointerCount) {
			return true;
		}
	}
	return false;
}

DataTypeCode SC_Decl_GameType(SCDecl* Self) {
	if ((Self->PointerCount)) {
		JB_Msg_Fail(Self->Source, JB_LUB[873]);
		return 0;
	}
	SCClass* T = Self->Type;
	JB_Incr(T);
	uint Ti = T->TypeInfo;
	if (!JB_TC_IsNumeric(Ti)) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[874]);
		JB_FS_AppendString(_fsf0, T->Name);
		JB_FS_AppendString(_fsf0, JB_LUB[872]);
		JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf1);
		JB_Decr(_fsf0);
		JB_Msg_Fail(Self->Source, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(T);
	return Ti;
}

SCDecl* SC_Decl_GetAddress(SCDecl* Self, DeclMode Purpose) {
	SCDecl* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, SC_Decl_Constructor(nil, Self->Type));
	SC_Decl_CopyTypeInfoTo(Self, Rz);
	JB_SetRef(Rz->Internal, Self);
	(++Rz->PointerCount);
	Rz->C_Array = 0;
	uint Ns = kSC__NilState_Realish;
	if (Purpose == kSC__DeclMode_Globals) {
		Ns = kSC__NilState_Optional;
	}
	 else if (!SC_DeclMode_SyntaxIs(Purpose, kSC__DeclMode_FuncParam)) {
		Ns = (Ns | kSC__NilState_Stated);
	}
	Rz->NilDeclared = Ns;
	if (Rz->PointerCount > 4) {
		JB_Msg_Fail(Self->Source, JB_LUB[875]);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

SCDecl* SC_Decl_GetCArray(SCDecl* Self, int Amount) {
	SCDecl* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, SC_Decl_Constructor(nil, Self->Type));
	SC_Decl_CopyTypeInfoTo(Self, Rz);
	SC_Decl_IsCarray(Rz, Amount, Self);
	JB_SafeDecr(Rz);
	return Rz;
}

SCIterator* SC_Decl_GetIteratorAny(SCDecl* Self, JB_String* Name, Message* Node) {
	if (SC_Decl_IsCArray(Self)) {
		return SC__Iter_carray;
	}
	if (Self->PointerCount) {
		SCDecl* I = Self->Internal;
		if (SC_Decl_IsCArray(I)) {
			return SC__Iter_carray;
		}
	}
	return SC_Class_GetIteratorAny(Self->Type, Name, Node);
}

bool SC_Decl_HasStruct(SCDecl* Self) {
	return (!Self->PointerCount) and SC_Class_IsStruct(Self->Type);
}

SCFunction* SC_Decl_HasStructDestructor(SCDecl* Self) {
	if (SC_Decl_HasStruct(Self)) {
		return Self->Type->DestructorFunc;
	}
	return nil;
}

SCDecl* SC_Decl_HighestArrayContainMatch(SCDecl* Self, SCDecl* Other) {
	SCDecl* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, SC_Decl_HighestMatch(Self, Other));
	if (!Rz) {
		JB_SetRef(Rz, Self);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

SCDecl* SC_Decl_HighestMatch(SCDecl* Self, SCDecl* Other) {
	if (!Other) {
		return nil;
	}
	SCClass* M = Self->Type;
	SCClass* O = Other->Type;
	if ((O == M)) {
		return nil;
	}
	if (O->Depth > M->Depth) {
		O = SC_Class_GoUpTo(O, M->Depth);
	}
	 else if (O->Depth < M->Depth) {
		M = SC_Class_GoUpTo(M, O->Depth);
	}
	while (O != M) {
		SCClass* O2 = O->Super;
		if (!O2) {
			break;
		}
		O = O2;
		M = M->Super;
		if (!M) {
			return nil;
		}
	};
	return O->TypeNormal;
}

bool SC_Decl_IntRegs(SCDecl* Self) {
	return (!SC_Decl_SpecialRegs(Self));
}

bool SC_Decl_IntsOnly(SCDecl* Self, Message* Exp) {
	uint T = Self->Type->TypeInfo;
	if (SC_Decl_IsNormalNumber(Self) and JB_TC_IsInt(T)) {
		return true;
	}
	if (!(JB_TC_IsNumeric(T) or JB_TC_SyntaxIs(T, kJB__TC_bool))) {
		JB_Msg_Fail(Exp, JB_LUB[876]);
		return nil;
	}
	if ((JB_TC_IsFloat(T))) {
		JB_Msg_Fail(Exp, JB_LUB[877]);
		return nil;
	}
	return true;
}

bool SC_Decl_IsBareStruct(SCDecl* Self) {
	return SC_Class_IsStruct(Self->Type) and ((!Self->PointerCount) and (!SC_Decl_IsCArray(Self)));
}

bool SC_Decl_IsBool(SCDecl* Self) {
	if (Self and SC_Decl_IsNormal(Self)) {
		return Self->Type == SC_TypeBool;
	}
	return false;
}

void SC_Decl_IsCarray(SCDecl* Self, int Size, SCDecl* Of) {
	Self->PointerCount = 0;
	Self->C_Array = Size;
	Self->NilDeclared = kSC__NilState_Real;
	JB_SetRef(Self->Internal, Of);
	Self->NilDeclared = kSC__NilState_Realish;
}

bool SC_Decl_IsCArray(SCDecl* Self) {
	return Self->C_Array > 0;
}

bool SC_Decl_IsConstOf(SCDecl* Self, SCDecl* B) {
	if (!SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Const)) {
		return nil;
	}
	if (Self == B) {
		return true;
	}
	Message* _tmPf0 = Self->Default;
	if (!_tmPf0) {
		return nil;
	}
	return _tmPf0->Obj == B;
}

bool SC_Decl_IsDataTypeOnly(SCDecl* Self) {
	return SC_Class_IsDataTypeOnly(Self->Type) and ((!Self->PointerCount) and (!SC_Decl_IsCArray(Self)));
}

bool SC_Decl_IsFloat(SCDecl* Self) {
	return JB_TC_IsFloat(Self->Type->TypeInfo);
}

bool SC_Decl_IsInt(SCDecl* Self) {
	return JB_TC_IsInt(Self->Type->TypeInfo);
}

bool SC_Decl_IsInteger(SCDecl* Self) {
	return SC_Decl_IsNormal(Self) and JB_TC_IsInt(Self->Type->TypeInfo);
}

bool SC_Decl_IsLib(SCDecl* Self) {
	return SC_Decl_Project(Self)->IsSTDLib;
}

bool SC_Decl_IsMemoryOnly(SCDecl* Self) {
	if (Self->PointerCount) {
		return false;
	}
	return SC_Decl_IsCArray(Self) or SC_Class_IsStruct(Self->Type);
}

bool SC_Decl_IsMostlyNormal(SCDecl* Self) {
	if (!((!SC_Decl_IsNil(Self)) and (!SC_Decl_IsCArray(Self)))) {
		return nil;
	}
	if (!Self->PointerCount) {
		return true;
	}
	if (SC_Class_IsStruct(Self->Type)) {
		return Self->PointerCount == 1;
	}
	return false;
}

bool SC_Decl_IsNearlyNormalNumber(SCDecl* Self) {
	if (!(((!SC_Decl_IsCArray(Self))) and ((!Self->PointerCount)))) {
		return nil;
	}
	return SC_Class_NumericCount(Self->Type) > 0;
}

bool SC_Decl_IsNil(SCDecl* Self) {
	return Self == SC_TypeNil;
}

bool SC_Decl_IsNormal(SCDecl* Self) {
	return (!Self->PointerCount) and ((!SC_Decl_IsNil(Self)) and (!SC_Decl_IsCArray(Self)));
}

bool SC_Decl_IsNormalBool(SCDecl* Self) {
	return ((!SC_Decl_IsCArray(Self))) and (((!Self->PointerCount)) and (Self->Type == SC_TypeBool));
}

bool SC_Decl_IsNormalNumber(SCDecl* Self) {
	if (!(((!SC_Decl_IsCArray(Self))) and ((!Self->PointerCount)))) {
		return nil;
	}
	if (SC_Class_NumericCount(Self->Type) == 1) {
		return true;
	}
	if (SC__Base_ConstantsLoadingOverride and ((SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Const)) and (JB_TC_VecCount(SC_Decl_TypeInfo(Self)) == 1))) {
		return true;
	}
	return false;
}

bool SC_Decl_IsNormalObject(SCDecl* Self) {
	return ((!Self->PointerCount)) and (((!SC_Decl_IsNil(Self))) and SC_Decl_IsObject(Self));
}

int SC_Decl_IsNumeric(SCDecl* Self) {
	if (((!SC_Decl_IsCArray(Self))) and ((!Self->PointerCount))) {
		return SC_Class_NumericCount(Self->Type);
	}
	return 0;
}

bool SC_Decl_IsObject(SCDecl* Self) {
	return SC_Class_IsObject(Self->Type) and (!SC_Decl_IsCArray(Self));
}

bool SC_Decl_IsProperlyLocal(SCDecl* Self) {
	if (!SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Local)) {
		return nil;
	}
	if (SC_Decl_IsBareStruct(Self)) {
		return false;
	}
	return true;
}

bool SC_Decl_IsReffable(SCDecl* Self, bool SetOnly) {
	if (!((!Self->PointerCount) and (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Altered) or SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Body)))) {
		return nil;
	}
	if ((SetOnly and (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Borrowed)))) {
		return nil;
	}
	return SC_Class_IsObject(Self->Type);
}

bool SC_Decl_IsReg(SCDecl* Self) {
	if (SC_Decl_IsCArray(Self)) {
		return nil;
	}
	if (Self->PointerCount) {
		return true;
	}
	return (!SC_Class_IsStruct(Self->Type));
}

bool SC_Decl_IsRegister(SCDecl* Self) {
	return (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Local)) and (!(SC_Decl_IsBareStruct(Self) or SC_Decl_IsCArray(Self)));
}

JB_String* SC_Decl_IsSaveable(SCDecl* Self) {
	if (Self->PointerCount) {
		return JB_LUB[0];
	}
	return Self->Type->SaveAs;
}

void SC_Decl_IsTypeImproveSet(SCDecl* Self, bool Value) {
	Self->Info = SC_SCDeclInfo_Set(Self->Info, kSC__SCDeclInfo_TypeImprove, Value);
}

bool SC_Decl_IsUintLike(SCDecl* Self) {
	uint T = Self->Type->TypeInfo;
	if (SC_Decl_IsNormal(Self) and JB_TC_IsInt(T)) {
		return (!JB_TC_IsSigned(T));
	}
	return false;
}

bool SC_Decl_IsVoidPtr(SCDecl* Self) {
	return ((Self->PointerCount == 1) and (Self->Type == SC_TypeVoid_));
}

bool SC_Decl_LoadContained(SCDecl* Self, Message* Contained, Message* Wrap, SCNode* Name_Space, DeclMode Purpose) {
	if ((JB_Msg_EqualsSyx(Contained, kJB_SyxThg, false)) and (JB_Msg_SyntaxEquals(Contained, JB_LUB[1705], false))) {
		return SC_Decl_MakeStatic(Self, Wrap, Name_Space, Purpose);
	}
	SCDecl* Cont = SC_ExtractDecl(Contained, Name_Space, Purpose, 0);
	JB_Incr(Cont);
	if (Cont) {
		bool _tmPf0 = SC_Decl_LoadContainedSub(Self, Cont, Wrap, Name_Space, Purpose);
		JB_Decr(Cont);
		return _tmPf0;
	}
	JB_Decr(Cont);
	return false;
}

bool SC_Decl_LoadContainedSub(SCDecl* Self, SCDecl* Cont, Message* Wrap, SCNode* Name_Space, DeclMode Purpose) {
	SCDecl* R = SC_ExtractDecl(Wrap, Name_Space, Purpose, 0);
	JB_Incr(R);
	if (!R) {
		JB_Decr(R);
		return nil;
	}
	SC_Decl_CopyTypeInfoTo(R, Self);
	JB_SetRef(Self->Contains, SC_Decl_MakeContainedOptional(Cont));
	if (SC_int_IsNormalMatch(SC_Decl_TypeMatch(SC_TypeWrapper->TypeNormal, R, kJB_kTypeCastFalse, nil))) {
		if ((SC_Decl_IsNormalObject(Cont))) {
			JB_Msg_Fail(Wrap, JB_LUB[1689]);
		}
	}
	 else {
		SCDecl* RCont = R->Type->Contained;
		JB_Incr(RCont);
		if (!RCont) {
			JB_Msg_Fail(Wrap, JB_LUB[1690]);
			JB_Decr(RCont);
			JB_Decr(R);
			return nil;
		}
		if ((RCont->Type != SC_TypeObject) and SC_Decl_IsNormalObject(RCont)) {
			JB_FreeIfDead(SC_Decl_ExpectMatch(RCont, Cont, 0, nil, Wrap));
		}
		JB_Decr(RCont);
	}
	JB_Decr(R);
	return true;
}

Message* SC_Decl_MakeAccess0(SCDecl* Self) {
	Message* L = JB_Syx_OperatorPlus(kJB_SyxThg, Self->Name);
	return SC_Msg_MakeAccess0(L);
}

SCDecl* SC_Decl_MakeAsObject(SCDecl* Self, SCDecl* Container, Message* ErrPlace) {
	SCDecl* NormalContained = Container->Type->Contained;
	JB_Incr(NormalContained);
	if (!NormalContained) {
		JB_Decr(NormalContained);
		return nil;
	}
	if (SC_Decl_IsNormalObject(Self)) {
		if (!SC_Decl_IsNormalObject(NormalContained)) {
			JB_Msg_Fail(ErrPlace, JB_LUB[878]);
		}
		JB_Decr(NormalContained);
		return Self;
	}
	 else if (!SC_Decl_IsNormalObject(NormalContained)) {
		JB_Decr(NormalContained);
		return Self;
	}
	JB_Decr(NormalContained);
	if (!SC_Decl_CanWrap(Self)) {
		JB_Msg_Fail(ErrPlace, JB_LUB[879]);
	}
	return SC_Decl_NewWrapper(Self, Self);
}

SCDecl* SC_Decl_MakeBorrowed(SCDecl* Self, bool StayBorrowed) {
	SCDecl* Rz = nil;
	JB_Incr(Rz);
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Borrowed)) {
		JB_Decr(Rz);
		return Self;
	}
	JB_SetRef(Rz, SC_Decl_CopyDecl(Self, false));
	(SC_Decl_SyntaxIsSet(Rz, kSC__SCDeclInfo_Borrowed, true));
	if (StayBorrowed) {
		(SC_Decl_SyntaxIsSet(Rz, kSC__SCDeclInfo_StayBorrowed, true));
	}
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Decl_MakeContainedObject(SCDecl* Self, Message* ErrPlace) {
	SCDecl* C = Self->Contains;
	if (C) {
		JB_SetRef(Self->Contains, SC_Decl_MakeAsObject(C, Self, ErrPlace));
	}
}

SCDecl* SC_Decl_MakeContainedOptional(SCDecl* Self) {
	if (SC_Decl_NilStated(Self)) {
		return Self;
	}
	return SC_Decl_MakeExistance(Self, kSC__NilState_Optional, Self->Type->TypeOptional);
}

SCDecl* SC_Decl_MakeDataObject(SCDecl* Self, SCNode* Name_Space, DeclMode Purpose) {
	SCDecl* Rz = nil;
	JB_Incr(Rz);
	Message* Wrapp = (JB_Syx_Msg(kJB_SyxThg, JB_LUB[1299]));
	JB_Incr(Wrapp);
	JB_SetRef(Rz, SC_Decl_Constructor(nil, Self->Type));
	SC_Decl_LoadContainedSub(Rz, Self, Wrapp, Name_Space, Purpose);
	JB_Decr(Wrapp);
	JB_SafeDecr(Rz);
	return Rz;
}

SCDecl* SC_Decl_MakeExistance(SCDecl* Self, uint /*NilState*/ Type, SCDecl* Default) {
	SCDecl* Rz = nil;
	if (Self->NilDeclared == Type) {
		return Self;
	}
	if (Default and (Self == Self->Type->TypeNormal)) {
		return Default;
	}
	Rz = SC_Decl_CopyDecl(Self, false);
	Rz->NilDeclared = Type;
	return Rz;
}

void SC_Decl_MakeGameFlying(SCDecl* Self, SCClass* Oof, Message* M) {
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, JB_LUB[1010]);
	SC_FS_CArrayAdd(Fs, Oof->Name);
	Message* _tmPf3 = SC_Msg_ModelType(M);
	JB_Incr(_tmPf3);
	SC_FS_CArrayAddB(Fs, JB_Str_First(_tmPf3->Name));
	JB_Decr(_tmPf3);
	SC_FS_CArrayAddB0(Fs, 8);
	SC_FS_CArrayAddB0(Fs, SC_Msg_ModelMode(M));
	{
		Array* _LoopSrcf2 = Oof->Properties;
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(P);
			if (P == nil) {
				JB_Decr(P);
				break;
			}
			SC_FS_CArrayAddB(Fs, ((byte)SC_Decl_GameType(P)));
			JB_String* _tmPf4 = JB_Str_OperatorPlus(JB_LUB[162], P->Name);
			JB_Incr(_tmPf4);
			JB_Decr(P);
			SC_FS_CArrayAdd(Fs, _tmPf4);
			JB_Decr(_tmPf4);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[1011]);
	JB_FS_AppendString(Fs, JB_LUB[1012]);
	(SC_Decl_SyntaxIsSet(Self, kSC__SCDeclInfo_GameFlyingMem, true));
	JB_SetRef(Self->StringData, JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
}

SCDecl* SC_Decl_MakeNewNil(SCDecl* Self) {
	if (Self->PointerCount) {
		Self->NilDeclared = kSC__NilState_ActuallyNil;
		return Self;
	}
	return SC_Decl_MakeExistance(Self, kSC__NilState_ActuallyNil, nil);
}

SCDecl* SC_Decl_MakeNewOptional(SCDecl* Self) {
	return SC_Decl_MakeExistance(Self, kSC__NilState_Optional, Self->Type->TypeOptional);
}

SCDecl* SC_Decl_MakeNewReal(SCDecl* Self) {
	if (Self->PointerCount) {
		Self->NilDeclared = kSC__NilState_Real;
		return Self;
	}
	return SC_Decl_MakeReal(Self);
}

SCDecl* SC_Decl_MakeReal(SCDecl* Self) {
	return SC_Decl_MakeExistance(Self, kSC__NilState_Real, Self->Type->TypeReal);
}

bool SC_Decl_MakeStatic(SCDecl* Self, Message* Wrap, SCNode* Name_Space, DeclMode Purpose) {
	SCDecl* R = SC_ExtractDecl(Wrap, Name_Space, Purpose, 0);
	JB_Incr(R);
	if (R) {
		SC_Decl_CopyTypeInfoTo(R, Self);
		JB_Decr(R);
		return true;
	}
	JB_Decr(R);
	return false;
}

void SC_Decl_MarkAsAltered(SCDecl* Self) {
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Local)) {
		(SC_Decl_SyntaxIsSet(Self, kSC__SCDeclInfo_Altered, true));
		if (SC__Func_InBranch) {
			(SC_Decl_SyntaxIsSet(Self, kSC__SCDeclInfo_AlteredInBranch, true));
		}
		if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_TypeImprove)) {
			JB_Object* Orig = Self->IsLookupOnly;
			if (JB_Object_FastIsa(Orig, &SCDeclData)) {
				(SC_Decl_SyntaxIsSet(((SCDecl*)Orig), kSC__SCDeclInfo_Altered, true));
				if (SC__Func_InBranch) {
					(SC_Decl_SyntaxIsSet(((SCDecl*)Orig), kSC__SCDeclInfo_AlteredInBranch, true));
				}
			}
		}
	}
}

bool SC_Decl_MatchC(SCDecl* Self, SCDecl* O) {
	return ((bool)SC_Decl_TypeMatch(Self, O, kJB_kTypeCastTrue, nil));
}

SCDecl* SC_Decl_MemAccess(SCDecl* Self, Message* Access, Message* Side) {
	SCDecl* C = SC_Decl_MemAccessSub(Self, Access, Side);
	if (C) {
		return C;
	}
	if (true) {
		JB_Msg_Fail(((Message*)JB_Ring_First(Access)), JB_LUB[1373]);
	}
	return nil;
}

SCDecl* SC_Decl_MemAccessNonStorable(SCDecl* Self, Message* Exp, Message* Side) {
	if (SC_Decl_TypeSuffers(Self)) {
		return SC_Decl_MakeNewOptional(Self);
	}
	if (SC_Decl_IsMemoryOnly(Self)) {
		Message* P = SC_Msg_NiceParent(Exp);
		if (SC_Msg_IsAddr(P)) {
			return Self;
		}
		bool IsAcc = (JB_Msg_EqualsSyx(P, kJB_SyxAcc, false));
		if (IsAcc and SC_Decl_IsCArray(Self)) {
			return Self;
		}
		Message* NewExp = SC_Msg_GetAddrButNicer(Exp);
		SCDecl* I = SC_Decl_GetAddress(Self, kSC__DeclMode_Always);
		JB_SetRef(NewExp->Obj, I);
		if (Side) {
			return SC_Decl_AccessToMemCpy(Self, NewExp, Side, I);
		}
		if (IsAcc) {
			JB_FreeIfDead(SC_Func__TypedTempMoveOut(NewExp, JB_LUB[0], I));
		}
		return I;
	}
	return Self;
}

SCDecl* SC_Decl_MemAccessSub(SCDecl* Self, Message* Exp, Message* Side) {
	;
	SCDecl* I = Self->Internal;
	if (!I) {
		return nil;
	}
	if (SC_Decl_IsCArray(Self) or SC_Decl_IsBareStruct(I)) {
		return SC_Decl_MemAccessNonStorable(I, Exp, Side);
	}
	if (Self->PointerCount <= 0) {
		return nil;
	}
	if (!SC_Decl_IsCArray(I)) {
		return I;
	}
	return SC_Decl_MemAccessNonStorable(I, Exp, Side);
}

bool SC_Decl_MiniMatch(SCDecl* Self, SCDecl* O, int TypeCast) {
	if (Self) {
		return ((bool)SC_Decl_TypeMatch(Self, O, TypeCast, nil));
	}
	return false;
}

void SC_Decl_NameSet(SCDecl* Self, JB_String* Value) {
	JB_SetRef(Self->ExportName, Value);
	JB_SetRef(Self->Name, Value);
}

bool SC_Decl_NeedsContainedfix(SCDecl* Self) {
	if ((!Self->AllocSource) and (!Self->Contains)) {
		return ((bool)SC_Decl_ReallyContains(Self));
	}
	return false;
}

bool SC_Decl_NeedsCppCarrayFix(SCDecl* Self) {
	return Self->PointerCount and SC_Decl_IsCArray(Self->Internal);
}

SCDecl* SC_Decl_NewWrapper(SCDecl* Self, SCDecl* CastTo) {
	bool IsNormal = SC_Decl_IsNormal(CastTo);
	if (IsNormal) {
		SCDecl* It = Self->Type->DataObject;
		if (It) {
			return SC_Decl_ForContained(It);
		}
	}
	SCDecl* Dcl = SC_Decl_Constructor(nil, SC_TypeWrapper);
	JB_SetRef(Dcl->Contains, SC_Decl_ForContained(CastTo));
	if (IsNormal) {
		JB_SetRef(Self->Type->DataObject, Dcl);
	}
	return Dcl;
}

SCDecl* SC_Decl_NilConstructor(SCDecl* Self, uint /*NilState*/ Type) {
	SCDecl* Rz = nil;
	if (Type == 0) {
		return Self;
	}
	Rz = SC_Decl_CopyDecl(Self, false);
	Rz->NilDeclared = Type;
	return Rz;
}

NilState SC_Decl_NilCurr(SCDecl* Self) {
	if (!SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Local)) {
		return Self->NilDeclared & kSC__NilState_Either;
	}
	return SC_NRD_SyntaxAccess((SC_nil__Value()), Self->NilReg);
}

void SC_Decl_NilPrmFail(SCDecl* Self, SCFunction* F) {
	if (true) {
		JB_String* _tmPf0 = SC_Decl_PrmStateMsg(Self, JB_LUB[0], F);
		JB_Incr(_tmPf0);
		JB_Msg_Fail(F->Source, _tmPf0);
		JB_Decr(_tmPf0);
	}
}

bool SC_Decl_NilStated(SCDecl* Self) {
	return SC_NilState_SyntaxIs(Self->NilDeclared, kSC__NilState_Stated);
}

void SC_Decl_NoBlindCasts(SCDecl* Self, SCDecl* Old, Message* Exp) {
	SCFunction* Fn = SC_Func__CurrFunc();
	if (Fn and (((!SC_Func_SyntaxIs(Fn, kSC__FunctionType_Constructor))) and Fn->BlindCasts)) {
		if (SC_Decl_IsNormalObject(Old) and SC_Decl_IsNormalObject(Self)) {
			if (!SC_Class_Real_Isa2(Old->Type, Self->Type)) {
				JB_Rec_AppendErr(((JB_ErrorReceiver*)nil), JB_Err_Constructor(nil, Exp, JB_LUB[601], Fn->BlindCasts, JB_LUB[0]));
			}
		}
	}
}

bool SC_Decl_NoStructOrCArrayCasts(SCDecl* Self, Message* Side) {
	if (!((SC_Class_IsStruct(Self->Type) or SC_Decl_IsCArray(Self)) and ((!Self->PointerCount)))) {
		return nil;
	}
	if (!Side) {
		return true;
	}
	Message* _tmPf0 = SC_Msg_Unwrap(Side);
	JB_Incr(_tmPf0);
	bool _tmPf1 = (!JB_Msg_EqualsSyx(_tmPf0, kJB_SyxArg, false));
	JB_Decr(_tmPf0);
	return _tmPf1;
}

SCDecl* SC_Decl_NotLocal(SCDecl* Self) {
	SCDecl* Rz = nil;
	JB_Incr(Rz);
	if (((!SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Local))) and (!JB_Str_Exists(Self->Name))) {
		JB_Decr(Rz);
		return Self;
	}
	JB_SetRef(Rz, SC_Decl_CopyDecl(Self, false));
	(SC_Decl_NameSet(Rz, JB_LUB[0]));
	(SC_Decl_SyntaxIsSet(Rz, kSC__SCDeclInfo_Local, (!true)));
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Decl_NumberConstSet(SCDecl* Self, uint64 V) {
	Self->ExportPosition = V;
	(SC_Decl_SyntaxIsSet(Self, kSC__SCDeclInfo_NumberConst, true));
}

int SC_Decl_NumericCountWithBools(SCDecl* Self) {
	if (Self->PointerCount) {
		return 1;
	}
	if (SC_Decl_IsCArray(Self)) {
		return SC_Decl_NumericCountWithBools(Self->Internal);
	}
	if (Self->DataType & kJB__TC_bool) {
		return 1;
	}
	return JB_TC_VecCount(Self->Type->TypeInfo);
}

bool SC_Decl_OperatorExact_isa(SCDecl* Self, SCClass* V) {
	return SC_Decl_IsNormal(Self) and (Self->Type == V);
}

bool SC_Decl_MatchesDecl(SCDecl* Self, SCDecl* O) {
	return SC_Decl_MatchC(Self, O);
}

bool SC_Decl_OperatorMatches(SCDecl* Self, SCClass* O) {
	if (O and Self) {
		return SC_Decl_MatchesDecl(Self, O->TypeNormal);
	}
	return false;
}

void SC_Decl_Paramfix(SCDecl* Self) {
	(SC_Decl_SyntaxIsSet(Self, kSC__SCDeclInfo_Param, true));
	(SC_Decl_SyntaxIsSet(Self, kSC__SCDeclInfo_Body, (!true)));
}

int SC_Decl_PointerIncrement(SCDecl* Self) {
	int Rz = 0;
	if (Self->PointerCount > 1) {
		Rz = JB_Platform__PointerBytes();
	}
	 else {
		Rz = Self->Type->Size;
	}
	if (SC_Decl_IsCArray(Self)) {
		Rz = (Rz * SC_Decl_CArrayTotal(Self));
	}
	return Rz;
}

bool SC_Decl_PointeryMatch(SCDecl* Self, SCDecl* O) {
	if (O->PointerCount == Self->PointerCount) {
		return (SC_Decl_IsCArray(O) == SC_Decl_IsCArray(Self));
	}
	return false;
}

int SC_Decl_PointeryMatchSub(SCDecl* Self, SCDecl* O, int TypeCast) {
	SCClass* OType = O->Type;
	SCClass* T = Self->Type;
	uint Tica = T->IsRole;
	if (Tica == OType->IsRole) {
	}
	 else if (Tica) {
		while (T->IsRole) {
			T = T->Super;
			if (!T) {
				return 0;
			}
		};
	}
	 else {
		while (OType->IsRole) {
			OType = OType->Super;
			if (!OType) {
				return 0;
			}
		};
	}
	int Dist = 0;
	{
		SCClass* CurrSuper = OType;
		while (CurrSuper) {
			if (T == CurrSuper) {
				if (O->AllocSource or SC_Decl_ContainsMatch(Self, O, TypeCast)) {
					if (!Dist) {
						return kJB_kSimpleMatch;
					}
					if (TypeCast & kJB_kTypeCastWantSuperDistance) {
						return kJB_kSuperClassMatch | Dist;
					}
					return kJB_kSuperClassMatch;
				}
			}
			(++Dist);
			CurrSuper = CurrSuper->Super;
		};
	}
	;
	return 0;
}

void SC_Decl_PrefixedName(SCDecl* Self, FastString* Fs, SCModule* M) {
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Const)) {
		JB_FS_AppendByte(Fs, 'k');
	}
	JB_FS_AppendString(Fs, SC_Decl_Project(Self)->Mod->ExportName);
	JB_FS_AppendByte(Fs, '_');
	if (JB_Str_Exists(M->CppPart)) {
		JB_FS_AppendByte(Fs, '_');
		JB_FS_AppendString(Fs, M->CppPart);
		JB_FS_AppendByte(Fs, '_');
	}
	JB_FreeIfDead(SC_Str_UnicodeSafeName(Self->Name, Fs));
	JB_SetRef(Self->ExportName, JB_FS_SyntaxCast(Fs));
}

JB_String* SC_Decl_PrmStateMsg(SCDecl* Self, JB_String* Needed, SCFunction* F) {
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, JB_LUB[179]);
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Self)) {
		JB_FS_AppendString(Fs, JB_LUB[180]);
	}
	 else {
		JB_FS_AppendString(Fs, JB_LUB[181]);
		JB_FS_AppendString(Fs, Self->Name);
	}
	JB_FS_AppendString(Fs, JB_LUB[182]);
	JB_FS_AppendString(Fs, Needed);
	JB_String* _tmPf0 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

SCDecl* SC_Decl_ProcessAs(SCDecl* Self, Message* Msg) {
	Message* _tmPf0 = ((Message*)JB_Ring_Parent(Msg));
	JB_Incr(_tmPf0);
	Message* P = SC_Msg_UnBra(_tmPf0);
	JB_Incr(P);
	JB_Decr(_tmPf0);
	if (SC_Msg_OperatorIsBRel(P, JB_LUB[48])) {
		JB_Decr(P);
		return Self;
	}
	JB_Decr(P);
	SCDecl* T = Self->Type->ProcessAs->TypeNormal;
	JB_Incr(T);
	JB_FreeIfDead(SC_Decl_CreateSimpleTypeCast(T, Msg));
	Message* L = ((Message*)JB_Ring_Last(Msg));
	JB_Incr(L);
	if (L) {
		JB_SetRef(L->Obj, Self);
	}
	 else {
		if (true) {
			JB_Msg_Fail(Msg, nil);
		}
	}
	JB_Decr(L);
	JB_SafeDecr(T);
	return T;
}

SCImport* SC_Decl_Project(SCDecl* Self) {
	return (((SCImport*)JB_Object_FastAs(JB_ObjLayer(Self)->Obj, &SCImportData)));
}

SCDecl* SC_Decl_ReallyContains(SCDecl* Self) {
	SCDecl* C = Self->Contains;
	if (!C) {
		C = Self->Type->Contained;
	}
	if (C and (C->Type != Self->Type)) {
		return C;
	}
	return nil;
}

JB_String* SC_Decl_RealName(SCDecl* Self) {
	JB_Object* L = Self->IsLookupOnly;
	if (JB_Object_Isa(L, &SCObjectData)) {
		return JB_LUB[0];
	}
	Message* S = Self->Source;
	if ((JB_Msg_EqualsSyx(S, kJB_SyxThg, false)) and JB_Msg_OperatorIn(S, kJB_SyxRel)) {
		S = ((Message*)JB_Ring_Parent(S));
	}
	if ((JB_Msg_EqualsSyx(S, kJB_SyxRel, false)) or (JB_Msg_EqualsSyx(S, kJB_SyxDecl, false))) {
		return JB_Msg_Name(SC_Msg_DeclName(S));
	}
	return Self->Name;
}

Message* SC_Decl_RefDestructor(SCDecl* Self) {
	Message* M = SC_Decl_DeclToDot(Self, SC_Func_Self(SC_Func__CurrFunc()));
	if (SC_Decl_IsCArray(Self)) {
		return SC_Refs__DecrMulti(Self, M);
	}
	return SC_Refs__RefClearMsg(M);
}

SCDecl* SC_Decl_RefineDecl(SCDecl* Self, Message* List) {
	SCDecl* Rz = nil;
	Rz = SC_Decl_CopyDecl(Self, false);
	{
		Message* P = ((Message*)JB_Ring_First(List));
		while (P) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(P));
			if (JB_Msg_Expect(P, kJB_SyxThg, nil)) {
				JB_String* N = P->Name;
				if ((JB_Str_Equals(N, JB_LUB[1013], true))) {
					((SC_Decl_SyntaxIsSet(Rz, kSC__SCDeclInfo_Borrowed, SC__Options_ProjectIsLibrary)));
				}
				 else if ((JB_Str_Equals(N, JB_LUB[1014], true))) {
					(SC_Decl_SyntaxIsSet(Rz, kSC__SCDeclInfo_API, true));
				}
				 else if ((JB_Str_Equals(N, JB_LUB[1015], true))) {
					(SC_Decl_SyntaxIsSet(Rz, kSC__SCDeclInfo_Const, true));
					JB_PrintLine(JB_LUB[1016]);
				}
				 else {
					if (true) {
						JB_Msg_Fail(P, nil);
					}
				}
			}
			P = _Nf1;
		};
		;
	}
	;
	return Rz;
}

DataTypeCode SC_Decl_RegType(SCDecl* Self) {
	uint Rz = kJB__TC_UnusedType;
	if (!Self) {
		return kJB__TC__void;
	}
	SCClass* Ty = Self->Type;
	if (SC_Class_IsObject(Ty)) {
		return kJB__TC_cstring;
	}
	Rz = Ty->TypeInfo;
	if (Self->PointerCount) {
		Rz = kJB__TC__voidptr;
	}
	 else {
		if ((Self->C_Array | SC_Class_IsStruct(Ty))) {
			return 0;
		}
	}
	return Rz;
}

JB_String* SC_Decl_Render(SCDecl* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	if (Self) {
		JB_FS_AppendByte(Fs, '|');
		JB_FreeIfDead(SC_Decl_RenderTypeName(Self, Fs));
		JB_FS_AppendByte(Fs, '|');
		JB_FS_AppendByte(Fs, ' ');
		JB_FS_AppendString(Fs, Self->Name);
	}
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Decl_RenderTypeAndName(SCDecl* Self, int Minimal, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	Message* _tmPf0 = SC_Decl_WriteDeclTypeAndName(Self, JB_LUB[0], Minimal);
	JB_Incr(_tmPf0);
	JB_FreeIfDead(JB_Msg_Render(_tmPf0, Fs));
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf1);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Decl_RenderTypeName(SCDecl* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	if (!Self) {
		JB_FS_AppendString(Fs, JB_LUB[183]);
	}
	 else {
		if (SC_Decl_IsNil(Self)) {
			JB_FS_AppendString(Fs, JB_LUB[36]);
		}
		 else if (SC_Decl_IsCArray(Self)) {
			JB_FreeIfDead(SC_Decl_RenderTypeName(Self->Internal, Fs));
			JB_FS_AppendByte(Fs, '[');
			JB_FS_AppendInt32(Fs, Self->C_Array);
			JB_FS_AppendByte(Fs, ']');
		}
		 else {
			JB_FS_AppendMultiByte(Fs, '&', Self->PointerCount);
			if (Self->PointerCount) {
				SCDecl* I = Self->Internal;
				if (I->Internal) {
					JB_FS_AppendByte(Fs, '(');
				}
				JB_FreeIfDead(SC_Decl_RenderTypeName(I, Fs));
				if (I->Internal) {
					JB_FS_AppendByte(Fs, ')');
				}
			}
			 else {
				JB_FS_AppendString(Fs, Self->Type->Name);
			}
		}
		SCDecl* C = Self->Contains;
		JB_Incr(C);
		if (C and (!SC_Decl_MiniMatch(C, Self->Type->Contained, 0))) {
			JB_FS_AppendString(Fs, JB_LUB[184]);
			JB_FS_AppendString(Fs, C->Type->Name);
		}
		JB_Decr(C);
		if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Borrowed)) {
			JB_FS_AppendString(Fs, JB_LUB[185]);
		}
		if (SC_Decl_TypeSuffers(Self) and SC_Decl_NilStated(Self)) {
			if (SC_Decl_StatedOptional(Self)) {
				JB_FS_AppendByte(Fs, '?');
			}
			 else if (SC_Decl_StatedReal(Self)) {
				JB_FS_AppendByte(Fs, '!');
			}
		}
	}
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Decl_RenderTypeNameNicer(SCDecl* Self, FastString* Fs_in) {
	return SC_Decl_RenderTypeName(SC_Decl_DownGrade(Self), Fs_in);
}

bool SC_Decl_SafelyWrappable(SCDecl* Self) {
	int N = SC_Decl_IsNumeric(Self);
	if ((N <= 1) or (SC_Decl_IsBool(Self))) {
		return true;
	}
	SCFunction* Fns = ((SCFunction*)SC_Base_SyntaxAccessWithStr(SC_TypeWrapper->Modul, JB_LUB[602]));
	if (!JB_Object_Isa(Fns, &SCFunctionData)) {
		return nil;
	}
	{
		SCFunction* F = Fns;
		while (F) {
			Array* P = F->Args;
			if ((JB_Array_Size(P) == 1) and SC_Decl_TypeMatch(((SCDecl*)JB_Array_Value(P, 0)), Self, 0, nil)) {
				return true;
			}
			F = F->NextFunc;
		};
	}
	;
	return false;
}

bool SC_Decl_SameForReplace(SCDecl* Self, SCDecl* C) {
	if ((SC_Decl_SyntaxIs(C, kSC__SCDeclInfo_Borrowed)) != (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Borrowed))) {
		return nil;
	}
	if (C->PointerCount != Self->PointerCount) {
		return nil;
	}
	if (Self->NilDeclared != C->NilDeclared) {
		return false;
	}
	return C->C_Array == Self->C_Array;
}

int SC_Decl_SizeOfQuery(SCDecl* Self) {
	int N = JB_Platform__PointerBytes();
	if (!Self->PointerCount) {
		N = Self->Type->Size;
	}
	if (SC_Decl_IsCArray(Self)) {
		N = (N * SC_Decl_CArrayTotal(Self));
	}
	return N;
}

bool SC_Decl_SpecialRegs(SCDecl* Self) {
	return Self and (!JB_TC_ASMUseIntRegs(Self->DataType));
}

NilState SC_Decl_StatedOptional(SCDecl* Self) {
	if ((Self->NilDeclared & kSC__NilState_Optional) == kSC__NilState_Optional) {
		return kSC__NilState_Optional;
	}
	return 0;
}

NilState SC_Decl_StatedReal(SCDecl* Self) {
	return SC_NilState_StatedReal(Self->NilDeclared);
}

void SC_Decl_SyntaxAppend(SCDecl* Self, SCDeclInfo D) {
	Self->Info = (Self->Info | D);
}

bool SC_Decl_SyntaxIs(SCDecl* Self, SCDeclInfo D) {
	if (Self) {
		return ((bool)(Self->Info & D));
	}
	return false;
}

void SC_Decl_SyntaxIsSet(SCDecl* Self, SCDeclInfo D, bool Value) {
	Self->Info = SC_SCDeclInfo_Set(Self->Info, D, Value);
}

int SC_Decl_TryTypeCast(SCDecl* Self, SCDecl* O, Message* OExp, int TypeCast) {
	SCClass* T = Self->Type;
	SCClass* Ot = O->Type;
	if (Self->PointerCount == (O->PointerCount + 1)) {
		int Found = SC_Decl_TryTypeCastPointer(Self, O, OExp, TypeCast, false);
		if (Found) {
			return Found;
		}
	}
	if ((SC_Decl_IsCArray(O)) and (Self->PointerCount == 1)) {
		int Found = SC_Decl_TryTypeCastCarray(Self, O, OExp);
		if (Found) {
			return Found;
		}
	}
	if (!(TypeCast & kJB_kNoBoolTypeCast)) {
		if ((T == SC_TypeBool) and ((SC_Decl_IsNormal(Self)) and (O->PointerCount))) {
			return SC_Msg_CastToBool(OExp, nil);
		}
	}
	if ((Self->PointerCount + 1) == O->PointerCount) {
		int Found = SC_Decl_TryTypeCastDeref(Self, O, OExp, TypeCast);
		if (Found) {
			return Found;
		}
	}
	if (TypeCast & (kJB_kTypeCastMost | kJB_kTypeCastNumbers)) {
		SCDecl* CounterPart = T->Signed;
		if (CounterPart) {
			if ((CounterPart->Type == Ot) and (SC_int_IsNormalMatch(SC_Decl_TypeMatch(CounterPart, O, TypeCast, OExp)))) {
				return kJB_kSimpleMatch;
			}
		}
	}
	bool NoBools = (TypeCast & kJB_kTypeCastBothWays) or (TypeCast & kJB_kNoBoolTypeCast);
	if (TypeCast & kJB_kTypeCastMost) {
		{
			SCClass* B = Ot;
			while (B) {
				{
					Array* _LoopSrcf3 = B->Casts;
					int _if1 = JB_Array_Size(_LoopSrcf3) - 1;
					while (true) {
						SCFunction* C = ((SCFunction*)JB_Array_Value(_LoopSrcf3, _if1));
						if (C == nil) {
							break;
						}
						if (!(NoBools and (SC_Decl_IsBool(C->ReturnType)))) {
							int Loss = SC_Decl_TypeMatch(Self, C->ReturnType, kJB_kTypeCastNumbers, nil);
							if (SC_int_IsNormalMatch(Loss)) {
								if ((Loss == kJB_kSimpleMatch) or (!SC_Class_IsDataTypeOnly(Self->Type))) {
									// sigh;
									// If theres one that doesnt need numeric cast... that should be considered a stronger match;
									// C.CreateTypeCast should return the result, bitored with needscast.;
									return SC_Func_CreateTypeCast(C, O, OExp, Loss);
								}
							}
						}
						(--_if1);
					};
				}
				;
				B = B->Super;
			};
		}
		;
		bool IsaBool = (T == SC_TypeBool) and (SC_Decl_IsNormal(Self));
		if (((!NoBools)) and IsaBool) {
			return SC_Msg_CastToBool(OExp, nil);
		}
		if (((!IsaBool) or (!NoBools)) and SC_Decl_CanWrap(O)) {
			if (SC_int_IsNormalMatch(SC_Decl_TypeMatch(SC_TypeWrapper->TypeNormal, Self, 0, nil))) {
				SCDecl* It = Self->Contains;
				if (It) {
					if (!SC_Decl_TypeMatch(It, O, kJB_kTypeCastNumbers, nil)) {
						return 0;
					}
					return SC_Msg_WrapExpr(OExp, O);
				}
			}
			if (SC_int_IsNormalMatch(SC_Decl_TypeMatch(Self, SC_TypeWrapper->TypeNormal, 0, nil)) and SC_Decl_SafelyWrappable(O)) {
				return SC_Msg_WrapExpr(OExp, O);
			}
		}
	}
	if (TypeCast & kJB_kTypeCastNumbers) {
		bool OIsNum = SC_Decl_IsNormalNumber(O);
		bool SIsNum = SC_Decl_IsNormalNumber(Self);
		if (SIsNum and (SC_Decl_IsNil(O) or (TypeCast & kJB_kTypeCastFromZero))) {
			return kJB_kNumericMatch;
		}
		if (OIsNum and SIsNum) {
			int Ff = SC_Decl_IsFloat(O) + SC_Decl_IsFloat(Self);
			if (Ff == 0) {
				return kJB_kNumericMatch;
			}
			if (Ff == 2) {
				uint L = SC_Decl_TypeInfo(Self);
				uint R = SC_Decl_TypeInfo(O);
				if (JB_TC_ByteCount(L) == JB_TC_ByteCount(R)) {
					return kJB_kNumericMatch;
				}
				if (TypeCast & kJB_kTypeCastSetToMemory) {
					return SC_Decl_FloatCast(Self, O, OExp);
				}
				if ((SC_Decl_SyntaxIs(O, kSC__SCDeclInfo_Const)) and (TypeCast & kJB_kTypeCastForSetRel)) {
					return SC_Msg_CastToClass(OExp, Self->Type, nil);
				}
				if ((SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Const)) or (SC_Decl_SyntaxIs(O, kSC__SCDeclInfo_Const))) {
					if (TypeCast & kJB_kTypeCastForSetRel) {
						return SC_Msg_CastToClass(OExp, Self->Type, nil);
					}
					return kJB_kNumericMatch;
				}
			}
			 else if (TypeCast & kJB_kTypeCastFromSmallInt) {
				return SC_Msg_CastToClass(OExp, Self->Type, nil);
			}
		}
		if (TypeCast & kJB_kTypeCastBothWays) {
			if (OIsNum and SC_Decl_IsNormalBool(Self)) {
				return kJB_kNumericMatch;
			}
			if (SIsNum and SC_Decl_IsNormalBool(O)) {
				return kJB_kNumericMatch;
			}
		}
	}
	if (SC_Func_EqualOrMoreSpecific(Ot->FuncProto, T->FuncProto) and SC_Decl_PointeryMatch(Self, O)) {
		return SC_Msg_CastToClass(OExp, T, nil);
	}
	return 0;
}

int SC_Decl_TryTypeCastCarray(SCDecl* Self, SCDecl* O, Message* Exp) {
	SCDecl* Si = Self->Internal;
	SCDecl* Oi = O->Internal;
	if (SC_Decl_MiniMatch(Si, Oi, 0)) {
		if (!Exp) {
			return kJB_kNeedsTypeCast;
		}
		return kJB_kCastedMatch;
	}
	return 0;
}

int SC_Decl_TryTypeCastDeref(SCDecl* Self, SCDecl* O, Message* Exp, int TypeCast) {
	SCDecl* I = O->Internal;
	if (!SC_Decl_MiniMatch(Self, I, TypeCast)) {
		return 0;
	}
	if (!Exp) {
		return kJB_kNeedsAddressOf;
	}
	Message* Addr = JB_Syx_Msg(kJB_SyxAcc, JB_LUB[0]);
	(JB_Ring_NextSibSet(Exp, Addr));
	JB_Tree_SyntaxAppend(Addr, Exp);
	JB_Msg_AppendNum(JB_Msg_Msg(Addr, kJB_SyxArr, JB_LUB[0]), 0);
	JB_SetRef(Addr->Obj, I);
	return kJB_kAddressOfMatch;
}

int SC_Decl_TryTypeCastPointer(SCDecl* Self, SCDecl* O, Message* Exp, int TypeCast, bool CArray) {
	int Rz = 0;
	if (SC_Decl_MiniMatch(Self->Internal, O, 0)) {
		SCDecl* OAddr = SC_Decl_GetAddress(O, kSC__DeclMode_Always);
		if (CArray) {
			OAddr->C_Array = 0;
		}
		if (SC_Decl_MiniMatch(Self, OAddr, TypeCast) and ((!Exp) or SC_Msg_CanGetAddress(Exp, nil))) {
			Rz = SC_Msg_GetAddressOf(Exp, OAddr, CArray);
		}
	}
	return Rz;
}

JB_String* SC_Decl_TryUseSaveable(SCDecl* Self, bool IsSave, SCClass* Cls) {
	JB_String* Type = SC_Decl_IsSaveable(Self);
	JB_Incr(Type);
	if ((!JB_Str_Exists(Type)) or (JB_Str_Equals(Type, JB_LUB[880], false))) {
		if (!SC__Options_IgnoreCantSaveErrors) {
			if (!IsSave) {
				FastString* _fsf0 = JB_FS_Constructor(nil);
				JB_Incr(_fsf0);
				JB_FS_AppendString(_fsf0, JB_LUB[881]);
				JB_FS_AppendString(_fsf0, Self->Name);
				JB_FS_AppendString(_fsf0, JB_LUB[164]);
				JB_FS_AppendString(_fsf0, Self->Type->Name);
				JB_FS_AppendByte(_fsf0, ')');
				JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
				JB_Incr(_tmPf1);
				JB_Decr(_fsf0);
				JB_Msg_Fail(Self->Source, _tmPf1);
				JB_Decr(_tmPf1);
				JB_Decr(Type);
				return JB_LUB[0];
			}
		}
		JB_SafeDecr(Type);
		return Type;
	}
	if ((JB_Str_Equals(Type, JB_LUB[36], false))) {
		JB_Decr(Type);
		return JB_LUB[0];
	}
	if (SC_Class_SyntaxIs(Self->Type, kSC__ClassInfo_SavingCanSkip)) {
		SCDecl* Con = Self->Contains;
		JB_Incr(Con);
		if (Con) {
			JB_String* _tmPf2 = SC_Decl_TryUseSaveable(Con, true, Cls);
			JB_Incr(_tmPf2);
			if (!JB_Str_Exists(_tmPf2)) {
				JB_Decr(_tmPf2);
				JB_Decr(Con);
				JB_Decr(Type);
				return JB_LUB[0];
			}
			JB_Decr(_tmPf2);
		}
		JB_Decr(Con);
	}
	JB_SafeDecr(Type);
	return Type;
}

DataTypeCode SC_Decl_TypeInfo(SCDecl* Self) {
	if (Self->PointerCount) {
		return kJB__TC__voidptr;
	}
	if (SC_Decl_IsCArray(Self)) {
		return SC_Decl_TypeInfo(Self->Internal);
	}
	return Self->Type->TypeInfo;
}

bool SC_Decl_TypeIsReached(SCDecl* Self) {
	return ((bool)Self->Type->MyReacher);
}

int SC_Decl_TypeMatch(SCDecl* Self, SCDecl* O, int TypeCast, Message* Exp) {
	if (O == nil) {
		if (!Self->Default) {
			return 0;
		}
		return kJB_kUseDefaultParams;
	}
	if (O == Self) {
		return kJB_kSimpleMatch;
	}
	if (SC_Decl_IsNil(O) and (TypeCast & kJB_kTypeCastTrue)) {
		if (SC_Decl_CantBeNilInCpp(Self)) {
			if (!Exp) {
				return kJB_kNeedsTypeCast;
			}
			Message* NilStruct = SC_Decl_CreateStructNil(Self, Exp);
			JB_Incr(NilStruct);
			JB_FreeIfDead(SC_Msg_ReplaceWith(Exp, NilStruct));
			JB_Decr(NilStruct);
			return kJB_kCastedMatch;
		}
		return kJB_kSimpleMatch;
	}
	if (SC_Decl_PointeryMatch(O, Self)) {
		int Ooop = SC_Decl_PointeryMatchSub(Self, O, TypeCast);
		if ((!Ooop) and ((TypeCast & kJB_kTypeCastBothWays) and (SC_Decl_IsNormalObject(O) and SC_Decl_IsNormalObject(Self)))) {
			Ooop = SC_Decl_PointeryMatchSub(O, Self, TypeCast);
		}
		if (Ooop) {
			return Ooop;
		}
	}
	if ((TypeCast & kJB_kTypeCastTrue) and ((SC_Decl_IsVoidPtr(Self)) and (O->PointerCount or O->Type->FuncProto))) {
		if ((!Exp)) {
			return kJB_kNeedsTypeCast | kJB_kVoidPtrMatch;
		}
		if (O->Type->FuncProto) {
			return SC_Msg_CastFPToVoidPtr(Exp);
		}
		return kJB_kCastedMatch;
	}
	if (TypeCast & kJB_kActualTypecasts) {
		return SC_Decl_TryTypeCast(Self, O, Exp, TypeCast);
	}
	return 0;
}

DataTypeCode SC_Decl_TypeOnly(SCDecl* Self) {
	return Self->DataType & kJB__TC_PossibleBits;
}

void SC_Decl_TypeReach(SCDecl* Self, SCNode* From, Message* Src) {
	//;
	if (Self) {
		return SC_Class_Reach(Self->Type, From, Src);
	}
}

bool SC_Decl_TypeSuffers(SCDecl* Self) {
	if (SC_Decl_IsCArray(Self)) {
		return false;
	}
	if (Self->PointerCount) {
		return true;
	}
	SCNodeType D = Self->Type->BaseType;
	return (D == kSC__SCNodeType_FuncProto) or (D == kSC__SCNodeType_Object);
}

void SC_Decl_WholeTypeSet(SCDecl* Self, uint /*DataTypeCode*/ Value) {
	Self->DataType = Value;
}

ASMReg SC_Decl_WholeType(SCDecl* Self) {
	return ((ASMReg)Self->DataType);
}

Message* SC_Decl_WriteDeclFull(SCDecl* Self, JB_String* DeclName, int Minimal) {
	JB_Incr(DeclName);
	if (!JB_Str_Exists(DeclName)) {
		JB_SetRef(DeclName, Self->Name);
	}
	if (!(JB_Str_Exists(DeclName) or (!Self->Default))) {
		JB_Object_Fail(nil);
		JB_Decr(DeclName);
		return nil;
	}
	if (JB_Str_Exists(DeclName)) {
		Message* _tmPf2 = SC_Decl_WriteDeclSub(Self, DeclName, Minimal);
		JB_Incr(_tmPf2);
		JB_Decr(DeclName);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_Decr(DeclName);
	return ({
		Message* __imPf0 = (JB_Syx_Msg(kJB_SyxDecl, JB_LUB[0]));
		JB_Incr(__imPf0);
		Message* _tmPf1 = SC_Decl_WriteType(Self, Minimal, true);
		JB_Incr(_tmPf1);
		JB_Tree_SyntaxAppend(__imPf0, _tmPf1);
		JB_Decr(_tmPf1);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	});
}

Message* SC_Decl_WriteDeclSub(SCDecl* Self, JB_String* Name, int Minimal) {
	Message* Dcl = (JB_Syx_Msg(kJB_SyxDecl, JB_LUB[0]));
	JB_Incr(Dcl);
	Message* _tmPf2 = SC_Decl_WriteType(Self, Minimal, true);
	JB_Incr(_tmPf2);
	JB_Tree_SyntaxAppend(Dcl, _tmPf2);
	JB_Decr(_tmPf2);
	Message* Def = Self->Default;
	JB_Incr(Def);
	if ((!Def) and (Minimal >= 2)) {
		JB_FreeIfDead(JB_Msg_Msg(Dcl, kJB_SyxThg, Name));
		JB_Decr(Def);
		JB_SafeDecr(Dcl);
		return Dcl;
	}
	if (!Def) {
		JB_SetRef(Def, Self->Type->Defawlt);
	}
	if ((!Def) or (Self->PointerCount and (Minimal < 2))) {
		JB_SetRef(Def, (JB_Syx_Msg(kJB_SyxThg, JB_LUB[36])));
	}
	 else {
		JB_SetRef(Def, JB_Msg_Copy(Def, Self->Source));
	}
	SCDecl* C = Self->Contains;
	JB_Incr(C);
	if (C) {
		JB_SetRef(Def, ({
			Message* __imPf0 = (JB_Syx_Msg(kJB_SyxType, JB_LUB[534]));
			JB_Incr(__imPf0);
			JB_Tree_SyntaxAppend(__imPf0, Def);
			Message* _tmPf3 = ({
				Message* __imPf1 = (JB_Syx_Msg(kJB_SyxRel, JB_LUB[0]));
				JB_Incr(__imPf1);
				Message* _tmPf4 = JB_Syx_Msg(kJB_SyxThg, Self->Type->Name);
				JB_Incr(_tmPf4);
				JB_Tree_SyntaxAppend(__imPf1, (_tmPf4));
				JB_Decr(_tmPf4);
				Message* _tmPf5 = JB_Syx_Msg(kJB_SyxOpp, JB_LUB[1125]);
				JB_Incr(_tmPf5);
				JB_Tree_SyntaxAppend(__imPf1, (_tmPf5));
				JB_Decr(_tmPf5);
				Message* _tmPf6 = JB_Syx_Msg(kJB_SyxThg, C->Type->Name);
				JB_Incr(_tmPf6);
				JB_Tree_SyntaxAppend(__imPf1, (_tmPf6));
				JB_Decr(_tmPf6);
				JB_SafeDecr(__imPf1);
				 __imPf1;
			});
			JB_Incr(_tmPf3);
			JB_Tree_SyntaxAppend(__imPf0, _tmPf3);
			JB_Decr(_tmPf3);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
	}
	JB_Decr(C);
	Message* _tmPf8 = JB_Syx_Msg(kJB_SyxThg, Name);
	JB_Incr(_tmPf8);
	Message* _tmPf7 = SC_NewEqRelWithMsgMsg((_tmPf8), Def);
	JB_Incr(_tmPf7);
	JB_Decr(Def);
	JB_Decr(_tmPf8);
	JB_Tree_SyntaxAppend(Dcl, _tmPf7);
	JB_Decr(_tmPf7);
	JB_SafeDecr(Dcl);
	return Dcl;
}

Message* SC_Decl_WriteDeclTypeAndName(SCDecl* Self, JB_String* Name, int Minimal) {
	JB_Incr(Name);
	if (!JB_Str_Exists(Name)) {
		JB_SetRef(Name, Self->Name);
	}
	Message* _tmPf3 = ({
		Message* __imPf0 = (JB_Syx_Msg(kJB_SyxDecl, JB_LUB[0]));
		JB_Incr(__imPf0);
		Message* _tmPf1 = SC_Decl_WriteType(Self, Minimal, true);
		JB_Incr(_tmPf1);
		JB_Tree_SyntaxAppend(__imPf0, _tmPf1);
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Syx_Msg(kJB_SyxThg, Name);
		JB_Incr(_tmPf2);
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf2));
		JB_Decr(_tmPf2);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	});
	JB_Incr(_tmPf3);
	JB_Decr(Name);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

Message* SC_Decl_WriteNilDecl(SCDecl* Self) {
	Message* L = SC_Decl_WriteNilRel(Self);
	Message* Dcl = (JB_Syx_Msg(kJB_SyxDecl, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Dcl, SC_Decl_WriteType(Self, 0, true));
	JB_Tree_SyntaxAppend(Dcl, L);
	JB_SetRef(Dcl->Obj, Self);
	JB_SetRef(L->Obj, Self);
	JB_SetRef(((Message*)JB_Ring_First(L))->Obj, Self);
	return Dcl;
}

Message* SC_Decl_WriteNilRel(SCDecl* Self) {
	return SC_NewEqRelWithStrStr(Self->Name, JB_LUB[36]);
}

Message* SC_Decl_WriteSimpleType(SCDecl* Self, bool Optionals) {
	Message* Rz = nil;
	Rz = SC_Decl_WriteVerySimpleType(Self);
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Borrowed)) {
		Rz = SC_Msg_WrapWith(Rz, kJB_SyxARel, JB_LUB[185]);
	}
	if (!Optionals) {
		Rz = SC_Msg_WrapWith(Rz, kJB_SyxBRel, JB_LUB[174]);
	}
	 else if (SC_Decl_TypeSuffers(Self) and SC_Decl_NilStated(Self)) {
		if (SC_Decl_StatedOptional(Self)) {
			Rz = SC_Msg_WrapWith(Rz, kJB_SyxBRel, JB_LUB[603]);
		}
		 else if (SC_Decl_StatedReal(Self)) {
			Rz = SC_Msg_WrapWith(Rz, kJB_SyxBRel, JB_LUB[174]);
		}
	}
	return Rz;
}

Message* SC_Decl_WriteType(SCDecl* Self, int Minimal, bool Optionals) {
	Message* Rz = nil;
	Message* Simple = SC_Decl_WriteSimpleType(Self, Optionals);
	SCDecl* C = Self->Contains;
	if ((!C) or (Minimal and SC_Decl_AlreadyContains(Self))) {
		return Simple;
	}
	Rz = JB_Syx_Msg(kJB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Rz, Simple);
	JB_Msg_AppendSyx(Rz, kJB_SyxOpp, JB_LUB[1125]);
	JB_Tree_SyntaxAppend(Rz, SC_Decl_WriteType(C, Minimal, Optionals));
	return Rz;
}

Message* SC_Decl_WriteTypeCast(SCDecl* Self, Message* Msg) {
	Message* TheType = (JB_Syx_Msg(kJB_SyxType, JB_LUB[534]));
	JB_Incr(TheType);
	JB_Tree_SyntaxAppend(TheType, Msg);
	Message* _tmPf0 = SC_Decl_WriteType(Self, 0, true);
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(TheType, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SetRef(TheType->Obj, Self);
	JB_SafeDecr(TheType);
	return TheType;
}

Message* SC_Decl_WriteVerySimpleType(SCDecl* Self) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Syx_OperatorPlus(kJB_SyxThg, Self->Type->Name));
	{
		int _LoopSrcf1 = ((int)Self->PointerCount);
		int _Valuef2 = 0;
		while (_Valuef2 < _LoopSrcf1) {
			JB_SetRef(Rz, SC_Msg_WrapWith(Rz, kJB_SyxBRel, JB_LUB[48]));
			(++_Valuef2);
		};
	}
	;
	if (SC_Decl_IsCArray(Self)) {
		JB_SetRef(Rz, SC_Msg_WrapWith(Rz, kJB_SyxAcc, JB_LUB[0]));
		Message* _tmPf3 = JB_Msg_Msg(Rz, kJB_SyxArr, JB_LUB[0]);
		JB_Incr(_tmPf3);
		JB_Msg_AppendNum(_tmPf3, Self->C_Array);
		JB_Decr(_tmPf3);
	}
	JB_SafeDecr(Rz);
	return Rz;
}


Message* SC_File_AST(SCFile* Self) {
	return ({
		Message* _X = Self->LiveAST;
		if (!_X) {
			_X = SC_File_ASTSub(Self, false);
			JB_SetRef(Self->LiveAST, _X);
		}
		 _X;
	});
}

Message* SC_File_ASTSub(SCFile* Self, bool Orig) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_Flow__Input(Self, JB_LUB[1997]);
	JB_Flow__DisabledIncr(1);
	JB_String* _tmPf0 = JB_File_ReadAll(Self, 134217728, true);
	JB_Incr(_tmPf0);
	JB_String* Str = JB_Str_Decompress(_tmPf0, 268435456, nil);
	JB_Incr(Str);
	JB_Decr(_tmPf0);
	JB_Flow__DisabledIncr(-1);
	if (JB_Safe_SyntaxCast(Str)) {
		JB_MemoryLayer* Layer = JB_ClassData_CreateUseLayer((&MessageData), Self, Str);
		JB_Incr(Layer);
		Layer->Num3 = Self->FileNum;
		JB_Decr(Layer);
		JB_SetRef(Self->FData, Str);
		JB_SetRef(JB_StdErr->Source, JB_File_Path(Self));
		JB__Tk__DotInsertAllow = true;
		uint Oldimp = SC__Imp_CurrIsManuallyImported;
		SC__Imp_CurrIsManuallyImported = Self->Proj->Depth;
		JB__Tk_Using.Tag = 0;
		if (!Orig) {
			JB_SetRef(Rz, SC_Str_ParseClean(Self->FData));
		}
		 else {
			JB_SetRef(Rz, JB_Str_Parse(Self->FData, kJB_SyxArg, true));
		}
		SC__Imp_CurrIsManuallyImported = Oldimp;
		SC_File_DetectInsecureWords(Self);
		JB__Tk_Using.Tag = 0;
		JB__Tk__DotInsertAllow = false;
		JB_SetRef(JB_StdErr->Source, JB_LUB[0]);
	}
	JB_Decr(Str);
	JB_ClassData_Restore((&MessageData));
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_File_CollectGlobals(SCFile* Self, SCNode* P) {
	SC_Imp_Use(Self->Proj);
	SC_CollectDeclsGlobals(Self->LiveAST, P);
}

SCFile* SC_File_Constructor(SCFile* Self, JB_File* F, SCImport* P) {
	if (Self == nil) {
		Self = ((SCFile*)JB_NewClass(&SCFileData));
	}
	//;
	JB_Flow__DisabledIncr(1);
	JB_String* _tmPf0 = ((JB_String*)JB_Ternary(F != nil, ((JB_String*)JB_File_Path(F)), ((JB_String*)JB_LUB[0])));
	JB_Incr(_tmPf0);
	JB_File_Constructor(Self, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Incr2(Self->ExportName, JB_LUB[0]);
	JB_Incr2(Self->FData, JB_LUB[0]);
	Self->OrigAST = nil;
	JB_Incr2(Self->Proj, P);
	Self->FileNum = JB_Array_Size(SC__Imp_AllFiles);
	Self->IsInternal = (F == nil);
	JB_Incr2(Self->LiveAST, SC_File_Start_AST(Self));
	SC__Comp_stTotalFileCount = (SC__Comp_stTotalFileCount + Self->IsInternal);
	(SC__Imp_Recent = JB_int64_OperatorMax(SC__Imp_Recent, JB_File_Modified(F)));
	JB_Flow__DisabledIncr(-1);
	return Self;
}

void SC_File_Destructor(SCFile* Self) {
	JB_Clear(Self->ExportName);
	JB_Clear(Self->Proj);
	JB_Clear(Self->FData);
	JB_Clear(Self->LiveAST);
	JB_Clear(Self->OrigAST);
	JB_File_Destructor(Self);
}

void SC_File_DetectInsecureWords(SCFile* Self) {
	if (!SC__Options_PerryOutput) {
		return;
	}
	Dictionary* Words = SC__Comp_InsecureWords;
	if (!Words) {
		return;
	}
	ivec2 Where = ivec2{0, 0};
	JB_Object* Found = JB_Dict_FindStr(Words, Self->FData, (&Where));
	if (Found) {
		Message* Place = JB_Syx_OperatorPlus(kJB_SyxThg, JB_LUB[0]);
		(JB_Msg_RangeSet(Place, ((IntRange)Where)));
		JB_Rec__NewErrorWithNode(Place, JB_LUB[776], JB_File_Path(Self));
	}
}

Message* SC_File_GetMsg(SCFile* Self, int Pos) {
	{
		Message* _LoopSrcf3 = SC_File_Orig(Self);
		Message* F = _LoopSrcf3;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(_LoopSrcf3));
		while ((F) and (F != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(F));
			if (JB_Str_Exists(F->Name) and JB_Rg_Contains1(JB_Msg_Range(F), Pos)) {
				return F;
			}
			F = _N_f2;
		};
		;
	}
	;
	return nil;
}

Message* SC_File_Orig(SCFile* Self) {
	if (!Self->OrigAST) {
		JB_SetRef(Self->OrigAST, SC_File_ASTSub(Self, true));
	}
	return Self->OrigAST;
}

Message* SC_File_Start_AST(SCFile* Self) {
	Message* Rz = nil;
	JB_Incr(Rz);
	if (Self->IsInternal) {
		JB_MemoryLayer* _tmPf0 = JB_Mem_CreateLayer((&MessageData), Self);
		JB_Incr(_tmPf0);
		JB_Mem_Use(_tmPf0);
		JB_Decr(_tmPf0);
		JB_SetRef(Rz, JB_Msg_ConstructorNormal(nil, kJB_SyxArg, JB_LUB[0]));
		JB_ClassData_Restore((&MessageData));
	}
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_File_Stop(SCFile* Self, SCImport* Old) {
	SC__Imp_Curr = nil;
	SC__Imp_CurrIsManuallyImported = 0;
}

SCImport* SC_File_Use(SCFile* Self) {
	SCImport* Rz = nil;
	Rz = SC__Imp_Curr;
	SC__Imp_Curr = Self->Proj;
	SC__Imp_CurrIsManuallyImported = Self->Proj->Depth;
	Message* L = Self->LiveAST;
	if (L) {
		JB_Mem_Use(JB_ObjLayer(L));
	}
	return Rz;
}


void SC_Iter_Check(SCIterator* Self, SCClass* Cls) {
	//using;
	Message* __varf1 = Self->Source;
	JB_Incr(__varf1);
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(__varf1, (&_usingf0));
	JB_String* Dot = ((JB_String*)JB_Ternary(JB_Str_Exists(Self->Name), ((JB_String*)JB_Str_OperatorPlus(JB_LUB[25], Self->Name)), ((JB_String*)JB_LUB[0])));
	JB_Incr(Dot);
	FastString* _fsf2 = JB_FS_Constructor(nil);
	JB_Incr(_fsf2);
	JB_FS_AppendString(_fsf2, JB_LUB[2000]);
	JB_FS_AppendString(_fsf2, Dot);
	JB_Decr(Dot);
	JB_FS_AppendString(_fsf2, JB_LUB[2001]);
	JB_String* _tmPf3 = JB_FS_GetResult(_fsf2);
	JB_Incr(_tmPf3);
	JB_Decr(_fsf2);
	Message* Msg = SC_Str_ParseClean(_tmPf3);
	JB_Incr(Msg);
	JB_Decr(_tmPf3);
	SCFunction* Fnc = ((SCFunction*)SC_Func__NewFunc(Msg, Cls, Self->Source));
	JB_Incr(Fnc);
	JB_Decr(Msg);
	if (Fnc) {
		SC_Func_FuncParamsLoad(Fnc);
		SC_Func_Transform(Fnc);
	}
	JB_Decr(Fnc);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), __varf1);
	JB_Decr(__varf1);
	JB_MsgPos_Destructor((&_usingf0));
}

SCIterator* SC_Iter_Constructor(SCIterator* Self, SCClass* Parent, Message* Msg) {
	if (Self == nil) {
		Self = ((SCIterator*)JB_NewClass(&SCIteratorData));
	}
	SC_Named_Constructor(Self);
	Self->ValueRenamer = nil;
	JB_Incr2(Self->Parent, Parent);
	Message* Thg = ((Message*)JB_Ring_First(Msg));
	JB_Incr(Thg);
	JB_String* X = JB_Msg_Name(Thg);
	JB_Incr(X);
	JB_Decr(Thg);
	if (!JB_Str_Exists(X)) {
		JB_SetRef(X, JB_LUB[998]);
	}
	JB_Incr2(Self->Name, X);
	JB_Decr(X);
	ErrorMarker M = JB_Rec_Mark(JB_StdErr);
	Message* Src = JB_Msg_Last(Msg, kJB_SyxArg);
	JB_Incr(Src);
	if (!Src) {
		JB_Msg_Fail(Msg, nil);
	}
	JB_Incr2(Self->Source, Src);
	Message* _tmPf0 = JB_Msg_FindSyxName(Self->Source, kJB_SyxTmp, JB_LUB[176], false);
	JB_Incr(_tmPf0);
	if (!_tmPf0) {
		JB_Msg_Fail(Msg, JB_LUB[1208]);
	}
	JB_Incr2(Self->WhileLoop, _tmPf0);
	JB_Decr(_tmPf0);
	Message* WhileArg = JB_Msg_FindSyx(Self->WhileLoop, kJB_SyxArg);
	JB_Incr(WhileArg);
	if (!WhileArg) {
		JB_Msg_Fail(Self->WhileLoop, JB_LUB[1209]);
	}
	Message* _tmPf2 = ((Message*)JB_Ring_NextSib(WhileArg));
	JB_Incr(_tmPf2);
	JB_Incr2(Self->LoopEndCond, ((Message*)JB_Ring_First(_tmPf2)));
	JB_Decr(_tmPf2);
	Message* Cond = ((Message*)JB_Ring_First(Self->WhileLoop));
	JB_Incr(Cond);
	if (Cond == WhileArg) {
		JB_SetRef(Cond, (JB_Syx_Msg(kJB_SyxThg, JB_LUB[31])));
	}
	JB_Incr2(Self->LoopCond, Cond);
	JB_Decr(Cond);
	Message* W = nil;
	JB_Incr(W);
	if (WhileArg) {
		JB_SetRef(W, JB_Msg_FindNested(WhileArg, kJB_SyxTmp, JB_LUB[1210], false));
		if (!W) {
			JB_Msg_Fail(WhileArg, JB_LUB[1211]);
		}
	}
	JB_Decr(WhileArg);
	JB_Incr2(Self->Yield, W);
	JB_Decr(W);
	Message* _tmPf1 = ((Message*)JB_Ring_First(Self->Yield));
	JB_Incr(_tmPf1);
	if (!_tmPf1) {
		JB_Msg_Fail(Self->Yield, JB_LUB[1212]);
	}
	JB_Incr2(Self->Value, _tmPf1);
	JB_Decr(_tmPf1);
	Message* I = ((Message*)JB_Tree_Second(Self->Yield));
	JB_Incr(I);
	if (I) {
		JB_Msg_Expect(I, kJB_SyxBra, nil);
		JB_SetRef(I, ((Message*)JB_Ring_First(I)));
	}
	JB_Incr2(Self->Index, I);
	JB_Decr(I);
	SCNodeRenamer* Sn = SC_NR_Constructor(nil);
	JB_Incr(Sn);
	JB_Incr2(Self->selfs, Sn);
	if (Src) {
		SC_NR_CollectSelfs(Sn, Src);
	}
	JB_Decr(Sn);
	JB_Incr2(Self->Names, SC_Iter_Uniqueify(Self, Src));
	JB_Decr(Src);
	Self->OK = JB_ErrorMarker_SyntaxCast(M);
	return Self;
}

void SC_Iter_Destructor(SCIterator* Self) {
	JB_Clear(Self->Parent);
	JB_Clear(Self->Yield);
	JB_Clear(Self->WhileLoop);
	JB_Clear(Self->Value);
	JB_Clear(Self->LoopEndCond);
	JB_Clear(Self->LoopCond);
	JB_Clear(Self->Index);
	JB_Clear(Self->ValueRenamer);
	JB_Clear(Self->selfs);
	JB_Clear(Self->Names);
	SC_Named_Destructor(Self);
}

Message* SC_Iter_MakeWhile(SCIterator* Self, Message* Arg, Message* Postcond) {
	Message* Result = JB_Msg_Copy(Self->WhileLoop, Arg);
	JB_Incr(Result);
	Message* Loop = SC_Msg_Deepest(Result, kJB_SyxTmp, JB_LUB[176]);
	JB_Incr(Loop);
	if (!Loop) {
		JB_Decr(Loop);
		JB_Decr(Result);
		return nil;
	}
	Message* Larg = JB_Msg_FindSyx(Loop, kJB_SyxArg);
	JB_Incr(Larg);
	if (!Larg) {
		JB_Decr(Larg);
		JB_Decr(Loop);
		JB_Decr(Result);
		return nil;
	}
	Message* It = ((Message*)JB_Ring_NextSib(Larg));
	JB_Incr(It);
	if (It) {
		JB_Tree_Remove(It);
	}
	JB_Decr(It);
	JB_FreeIfDead(SC_Msg_ReplaceWith(Larg, Arg));
	JB_Decr(Larg);
	JB_Tree_SyntaxAppend(Loop, Postcond);
	JB_Decr(Loop);
	JB_SafeDecr(Result);
	return Result;
}

void SC_Iter_RenameSelf(SCIterator* Self, Message* Name) {
	SC_NR_Rename(Self->selfs, Name);
}

void SC_Iter_RenameValue(SCIterator* Self, Message* S) {
	SCNodeRenamer* V = Self->ValueRenamer;
	JB_Incr(V);
	if (!V) {
		JB_SetRef(V, SC_NR_Constructor(nil));
		JB_SetRef(Self->ValueRenamer, V);
		Message* _tmPf0 = ((Message*)JB_Ring_FlatAfter(Self->Source));
		JB_Incr(_tmPf0);
		SC_NR_Collect(V, Self->Source, Self->Value->Name, _tmPf0);
		JB_Decr(_tmPf0);
	}
	SC_NR_Rename(V, S);
	JB_Decr(V);
}

void SC_Iter_Renuqify(SCIterator* Self, SCNode* P) {
	{
		Array* _LoopSrcf2 = Self->Names;
		int _if0 = 0;
		while (true) {
			SCNodeRenamer* N = ((SCNodeRenamer*)JB_Array_Value(_LoopSrcf2, _if0));
			if (N == nil) {
				break;
			}
			SC_NR_Uniqueify(N, P);
			(++_if0);
		};
	};
}

Array* SC_Iter_Uniqueify(SCIterator* Self, Message* Msg) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	{
		Message* Dcl = Msg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Msg));
		while ((Dcl) and (Dcl != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Dcl));
			if (JB_Msg_EqualsSyx(Dcl, kJB_SyxDecl, false)) {
				Message* CurrName = SC_Msg_GetDclName(Dcl, false);
				if (CurrName) {
					SCNodeRenamer* Ren = SC_NR_Constructor(nil);
					SC_NR_CollectDclThg(Ren, CurrName);
					JB_Array_SyntaxAppend(Rz, Ren);
				}
			}
			Dcl = _N_f2;
		};
		;
	}
	;
	return Rz;
}

int SC_Iter__Init_() {
	{
	}
	;
	return 0;
}

int SC_Iter__InitCode_() {
	{
	}
	;
	JB_SetRef(SC__Iter_carray, SC_Iter__SimpleIter(JB_LUB[1798]));
	return 0;
}

SCNode* SC_Iter__NeuIter(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (JB_Object_MustBe(Name_space, &SCClassData, Node)) {
		SCIterator* It = SC_Iter_Constructor(nil, ((SCClass*)Name_space), Node);
		JB_Incr(It);
		if (It->OK) {
			SC_Base_TryAdd(((SCClass*)Name_space), Node, It, It->Name);
			JB_Decr(It);
			return SC__Comp_program;
		}
		JB_Decr(It);
	}
	return nil;
}

SCIterator* SC_Iter__SimpleIter(JB_String* Src) {
	SCIterator* Rz = nil;
	JB_Incr(Rz);
	Message* _tmPf0 = JB_Str_Parse(Src, kJB_SyxArg, true);
	JB_Incr(_tmPf0);
	Message* S = ((Message*)JB_Ring_First(_tmPf0));
	JB_Incr(S);
	SCIterator* It = SC_Iter_Constructor(nil, nil, S);
	JB_Incr(It);
	JB_Decr(S);
	if (It->OK) {
		JB_SetRef(Rz, It);
	}
	JB_Decr(It);
	JB_Decr(_tmPf0);
	JB_SafeDecr(Rz);
	return Rz;
}


SCDecl* SC_Base_AddNumericConst(SCNode* Self, JB_String* Name, int64 Value, Message* Where) {
	SCDecl* SyxConst = SC_Decl_Constructor(nil, SC_TypeSyntax);
	SC_Comp__NewConst(SyxConst);
	JB_FreeIfDead(SC_NewDeclNum(SyxConst, Value, Name, false));
	SC_Base_TryAdd(Self, Where, SyxConst, SyxConst->Name);
	return SyxConst;
}

JB_String* SC_Base_AutoCompleteKind(SCNode* Self) {
	if (JB_Object_FastIsa(Self, &SCModuleData)) {
		return JB_LUB[166];
	}
	if (JB_Object_FastIsa(Self, &SCClassData)) {
		if (((SCClass*)Self)->FuncProto) {
			return JB_LUB[167];
		}
		if (SC_Class_IsDataTypeOnly(((SCClass*)Self))) {
			return JB_LUB[168];
		}
		if (SC_Class_IsStruct(((SCClass*)Self))) {
			return JB_LUB[37];
		}
		if (SC_Class_IsObject(((SCClass*)Self))) {
			return JB_LUB[169];
		}
	}
	return JB_LUB[170];
}

uint64 SC_Base_CalculateConst(SCNode* Self, Message* Value) {
	DataTypeCode Ty[1] = {
	};
	return SC_Base_CalculateConstSub(Self, Value, (&Ty[0]));
}

uint64 SC_Base_CalculateConstRel(SCNode* Self, Message* Value, DataTypeCode* Ty) {
	Message* A = ((Message*)JB_Ring_First(Value));
	uint64 L = SC_Base_CalculateConstSub(Self, A, Ty);
	if (JB_TC_SyntaxIs(Ty[0], kJB__TC_Failed)) {
		return 0;
	}
	Message* B = ((Message*)JB_Ring_NextSib(A));
	Message* C = ((Message*)JB_Ring_NextSib(B));
	if (JB_Msg_EqualsSyx(Value, kJB_SyxBRel, false)) {
		if (!JB_TC_SyntaxIs(Ty[0], kJB__TC_Int)) {
			JB_Msg_Fail(Value, JB_LUB[834]);
			return 0;
		}
		return (~L);
	}
	SCOperator* Op = SC_Opp__Lookup(B);
	uint64 R = SC_Base_CalculateConstSub(Self, C, Ty);
	if (!((bool)SC_Opp_SyntaxIs(Op, kSC__OpMode_MathLike))) {
		JB_Msg_Fail(B, nil);
		return 0;
	}
	uint N = JB_Str_First(B->Name);
	int Lg = JB_Str_Length(B->Name);
	bool Ints = JB_TC_IsInt((Ty[0]));
	if (N == '+') {
		if (Ints) {
			return L + R;
		}
		 else {
			return JB_dbl_AsInt((JB_int64_AsFloat(((int64)L)) + JB_int64_AsFloat(((int64)R))));
		}
	}
	if (N == '-') {
		if (Ints) {
			return L - R;
		}
		 else {
			return JB_dbl_AsInt((JB_int64_AsFloat(((int64)L)) - JB_int64_AsFloat(((int64)R))));
		}
	}
	if (N == '/') {
		if (Ints) {
			return L / R;
		}
		 else {
			return JB_dbl_AsInt((JB_int64_AsFloat(((int64)L)) / JB_int64_AsFloat(((int64)R))));
		}
	}
	if (N == 'm') {
		if (Ints) {
			return L % R;
		}
		 else {
			return JB_dbl_AsInt((std::fmod(JB_int64_AsFloat(((int64)L)), JB_int64_AsFloat(((int64)R)))));
		}
	}
	if (N == '*') {
		if (Ints) {
			return L * R;
		}
		 else {
			return JB_dbl_AsInt((JB_int64_AsFloat(((int64)L)) * JB_int64_AsFloat(((int64)R))));
		}
	}
	if ((!Ints)) {
		JB_Msg_Fail(Value, JB_LUB[834]);
		return 0;
	}
	if (N == '&') {
		return L & R;
	}
	if ((N == '|') or (N == '(')) {
		return L | R;
	}
	if (Lg == 2) {
		if (N == '<') {
			uint64 T = L << R;
			if ((T >> R) != L) {
				JB_Msg_Fail(Value, JB_LUB[835]);
				return 0;
			}
			return T;
		}
		if (N == '>') {
			uint64 T = L >> R;
			if ((T << R) != L) {
				JB_Msg_Fail(Value, JB_LUB[835]);
				return 0;
			}
			return T;
		}
	}
	if (true) {
		JB_Msg_Fail(Value, nil);
	}
	return 0;
}

uint64 SC_Base_CalculateConstSub(SCNode* Self, Message* Value, DataTypeCode* Ty) {
	Syntax F = Value->Func;
	if (F == kJB_SyxNum) {
		if (JB_Str_ContainsByte(Value->Name, '.')) {
			SC_Msg_TypeExpect(Value, Ty, kJB__TC_Float);
			return JB_dbl_AsInt(JB_Msg_Float(Value));
		}
		SC_Msg_TypeExpect(Value, Ty, kJB__TC_Int);
		return JB_Msg_Int(Value, 0);
	}
	if (F == kJB_SyxBra) {
		return SC_Base_CalculateConstSub(Self, ((Message*)JB_Ring_First(Value)), Ty);
	}
	if (F == kJB_SyxThg) {
		if (JB_Msg_SyntaxEquals(Value, JB_LUB[31], true)) {
			SC_Msg_TypeExpect(Value, Ty, kJB__TC_bool);
			return 1;
		}
		if (JB_Msg_SyntaxEquals(Value, JB_LUB[32], true)) {
			SC_Msg_TypeExpect(Value, Ty, kJB__TC_bool);
			return 0;
		}
		SCObject* D = SC_Base_SyntaxAccessWithMsg(Self, Value);
		if (JB_Object_FastIsa(D, &SCDeclData)) {
			return SC_Decl_AsConst(((SCDecl*)D), Value, Ty);
		}
		if (true) {
			JB_Msg_Fail(Value, nil);
		}
		return 0;
	}
	if (F == kJB_SyxRel) {
		return SC_Base_CalculateConstRel(Self, Value, Ty);
	}
	if (F == kJB_SyxChar) {
		return JB_Str_UTF8Value(Value->Name, true);
	}
	if (SC_Msg_OperatorIsBRel(Value, JB_LUB[50])) {
		return SC_Base_CalculateConstRel(Self, Value, Ty);
	}
	if (true) {
		JB_Msg_Fail(Value, nil);
	}
	return 0;
}

void SC_Base_CollectConstantsSub(SCNode* Self, Message* Ch) {
	Message* FuncName = ((Message*)JB_Ring_First(Ch));
	JB_Incr(FuncName);
	if (!FuncName) {
		JB_Decr(FuncName);
		return;
	}
	Message* Arg = ((Message*)JB_Tree_Get(Ch, -1));
	JB_Incr(Arg);
	Message* Vs = FuncName;
	JB_Incr(Vs);
	if (JB_Msg_EqualsSyx(FuncName, kJB_SyxThg, false)) {
		JB_SetRef(Vs, ((Message*)JB_Ring_NextSib(FuncName)));
	}
	 else {
		JB_SetRef(FuncName, nil);
	}
	if (!((Arg == Vs) and ((JB_Msg_EqualsSyx(Arg, kJB_SyxArg, false)) or (JB_Msg_EqualsSyx(Arg, kJB_SyxList, false))))) {
		JB_Msg_Fail(Vs, nil);
		JB_Decr(Vs);
		JB_Decr(Arg);
		JB_Decr(FuncName);
		return;
	}
	JB_Decr(Vs);
	uint64 NextNum = 0 + ((JB_Msg_SyntaxEquals(Ch, JB_LUB[1079], false)));
	uint64 StartNum = NextNum;
	uint64 LastFlag = 0;
	Array* FixLater = JB_Array_Constructor0(nil);
	JB_Incr(FixLater);
	Array* NameList = JB_Array_Constructor0(nil);
	JB_Incr(NameList);
	SCDecl* CurrType = nil;
	JB_Incr(CurrType);
	{
		Message* Line = ((Message*)JB_Ring_First(Arg));
		JB_Incr(Line);
		while (Line) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(Line));
			JB_Incr(_Nf2);
			Message* _tmPf7 = ((Message*)JB_Ring_First(Line));
			JB_Incr(_tmPf7);
			Syntax LF = JB_Msg_Func(_tmPf7);
			JB_Decr(_tmPf7);
			Message* _tmPf8 = ((Message*)JB_Ring_Last(Line));
			JB_Incr(_tmPf8);
			Syntax LL = JB_Msg_Func(_tmPf8);
			JB_Decr(_tmPf8);
			if ((((JB_Msg_EqualsSyx(Line, kJB_SyxRel, false))) and (LF == kJB_SyxArr)) or (LL == kJB_SyxArr)) {
				SC_Base_ConstantExpand(Self, Line);
			}
			 else if ((JB_Msg_EqualsSyx(Line, kJB_SyxTmp, false))) {
				if (JB_Ring_HasChildren(Line)) {
					JB_Msg_Fail(Line, nil);
					JB_Decr(_Nf2);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(Arg);
					JB_Decr(FuncName);
					return;
				}
				Line->Func = kJB_SyxThg;
			}
			JB_SetRef(Line, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(Line);
		;
	}
	;
	{
		Message* Line = ((Message*)JB_Ring_First(Arg));
		JB_Incr(Line);
		while (Line) {
			Message* _Nf4 = ((Message*)JB_Ring_NextSib(Line));
			JB_Incr(_Nf4);
			if ((JB_Msg_EqualsSyx(Line, kJB_SyxDecl, false))) {
				Message* _tmPf9 = ((Message*)JB_Ring_First(Line));
				JB_Incr(_tmPf9);
				JB_SetRef(CurrType, SC_ExtractDecl(_tmPf9, Self, kSC__DeclMode_Globals, 0));
				JB_Decr(_tmPf9);
				if (!CurrType) {
					JB_Msg_Fail(Line, nil);
					JB_Decr(_Nf4);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(Arg);
					JB_Decr(FuncName);
					return;
				}
				JB_Tree_Remove(Line);
				JB_SetRef(Line, _Nf4);
				JB_Decr(_Nf4);
				continue;
			}
			if ((JB_Msg_SyntaxEquals(Line, JB_LUB[26], false))) {
				NextNum = StartNum;
				JB_SetRef(Line, _Nf4);
				JB_Decr(_Nf4);
				continue;
			}
			SCDecl* NewItem = nil;
			JB_Incr(NewItem);
			if ((JB_Msg_EqualsSyx(Line, kJB_SyxThg, false))) {
				//using;
				MessagePosition _usingf0 = ((MessagePosition){});
				JB_Msg_SyntaxUsing(Line, (&_usingf0));
				JB_SetRef(NewItem, SC_Decl_Constructor(nil, SC_TypeInt));
				Message* NewNum = SC_NewDeclNum(NewItem, NextNum, Line->Name, true);
				JB_Incr(NewNum);
				JB_SetRef(NewItem->Source, Line);
				if ((JB_Msg_SyntaxEquals(Ch, JB_LUB[1079], false))) {
					(++LastFlag);
					NextNum = (NextNum << 1);
				}
				 else {
					(++NextNum);
				}
				if (CurrType) {
					SC_Decl_AssignabilityCheck(CurrType, nil, NewNum, CurrType, false);
					SC_Decl_CopyTypeInfoTo(CurrType, NewItem);
				}
				JB_Decr(NewNum);
				JB_MsgPos_SyntaxUsingComplete((&_usingf0), Line);
				JB_MsgPos_Destructor((&_usingf0));
			}
			 else if (JB_Msg_EqualsSyx(Line, kJB_SyxBra, false)) {
				Message* _tmPf10 = ((Message*)JB_Ring_First(Line));
				JB_Incr(_tmPf10);
				NextNum = SC_Base_CalculateConst(Self, _tmPf10);
				JB_Decr(_tmPf10);
			}
			 else {
				Message* ValueNode = ((Message*)JB_Ring_Last(Line));
				JB_Incr(ValueNode);
				Message* Thg = JB_Msg_NeedSyx(Line, kJB_SyxThg);
				JB_Incr(Thg);
				if (!(JB_Msg_Expect(Line, kJB_SyxRel, nil) and (({
					Message* _tmPf12 = JB_Msg_NeedSyxInt(Line, kJB_SyxOpp, 1);
					JB_Incr(_tmPf12);
					bool _tmPf11 = JB_Msg_Expect(_tmPf12, kJB_SyxOpp, JB_LUB[241]);
					JB_Decr(_tmPf12);
					 _tmPf11;
				}) and (ValueNode and Thg)))) {
					JB_Decr(Thg);
					JB_Decr(ValueNode);
					JB_Decr(NewItem);
					JB_Decr(_Nf4);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(Arg);
					JB_Decr(FuncName);
					return;
				}
				SCDecl* OMGType = SC_TypeOfExpr(ValueNode, Self, nil);
				JB_Incr(OMGType);
				if (!OMGType) {
					JB_Decr(OMGType);
					JB_Decr(Thg);
					JB_Decr(ValueNode);
					JB_Decr(NewItem);
					JB_Decr(_Nf4);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(Arg);
					JB_Decr(FuncName);
					return;
				}
				SCDecl* NewType = ((SCDecl*)JB_Ternary(CurrType, CurrType, OMGType));
				JB_Incr(NewType);
				JB_SetRef(NewItem, SC_Decl_Constructor(nil, NewType->Type));
				if ((JB_Msg_EqualsSyx(ValueNode, kJB_SyxStr, false)) or (JB_Msg_EqualsSyx(ValueNode, kJB_SyxSStr, false))) {
					SC_Func__ObjectifyString(ValueNode);
					JB_SetRef(ValueNode->Obj, SC_TypeString->TypeNormal);
				}
				 else if ((SC_Msg_IsInt(ValueNode)) or ((JB_Msg_EqualsSyx(ValueNode, kJB_SyxUnit, false)))) {
					bool WasHex = JB_Str_MidEquals(ValueNode->Name, 0, JB_LUB[429], false) or JB_Str_MidEquals(ValueNode->Name, 0, JB_LUB[2011], false);
					SC_Decl_AssignabilityCheck(NewType, nil, ValueNode, OMGType, WasHex);
					NextNum = JB_Msg_Int(ValueNode, 0);
					if (WasHex and (((NextNum >= 2147483648) and (NextNum <= 4294967295)) and (!CurrType))) {
						if (true) {
							JB_Msg_Fail(ValueNode, JB_LUB[2012]);
						}
					}
					(SC_Decl_NumberConstSet(NewItem, NextNum));
					(++NextNum);
				}
				 else {
					(SC_Decl_NumberConstSet(NewItem, SC_Base_CalculateConst(Self, ValueNode)));
				}
				JB_Decr(OMGType);
				JB_Array_SyntaxAppend(FixLater, NewItem);
				SC_Decl_CopyTypeInfoTo(NewType, NewItem);
				JB_Decr(NewType);
				(SC_Decl_NameSet(NewItem, Thg->Name));
				JB_SetRef(NewItem->Default, ValueNode);
				JB_Decr(ValueNode);
				JB_SetRef(NewItem->Source, Thg);
				JB_Decr(Thg);
			}
			if (NewItem) {
				SC_Comp__NewConst(NewItem);
				JB_Array_SyntaxAppend(NameList, NewItem->Source);
				SC_Base_TryAdd(Self, Line, NewItem, NewItem->Name);
			}
			JB_Decr(NewItem);
			JB_SetRef(Line, _Nf4);
			JB_Decr(_Nf4);
		};
		JB_Decr(Line);
		;
	}
	;
	{
		int _if5 = 0;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(FixLater, _if5));
			JB_Incr(D);
			if (D == nil) {
				JB_Decr(D);
				break;
			}
			SC_Base_Tran_Const(Self, D, Self);
			JB_Decr(D);
			(++_if5);
		};
		JB_Decr(CurrType);
		JB_Decr(Arg);
	}
	;
	JB_Decr(FixLater);
	if (FuncName) {
		SC_Base_CreateNameDict(Self, FuncName, NameList);
	}
	JB_Decr(FuncName);
	JB_Decr(NameList);
}

void SC_Base_CollectFromNode(SCNode* Self, Message* AST, bool Visible, Message* Dest) {
	if (!Self->Source) {
		JB_SetRef(Self->Source, AST);
	}
	Array* R = SC_Msg_ListAll(AST);
	JB_Incr(R);
	bool Old = SC__Base_CurrVisibility;
	SC__Base_CurrVisibility = Visible;
	{
		int _if0 = 0;
		while (true) {
			Message* C = ((Message*)JB_Array_Value(R, _if0));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			Visible = SC_Base_CollectOne(Self, C, Visible);
			JB_Decr(C);
			(++_if0);
		};
	}
	;
	SC__Base_CurrVisibility = Old;
	if (!Dest) {
		JB_Decr(R);
		return;
	}
	{
		int _if2 = 0;
		while (true) {
			Message* C = ((Message*)JB_Array_Value(R, _if2));
			JB_Incr(C);
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			if (JB_Tree_OperatorIn(C, AST)) {
				JB_Tree_SyntaxAppend(Dest, C);
			}
			JB_Decr(C);
			(++_if2);
		};
	}
	;
	JB_Decr(R);
}

bool SC_Base_CollectOne(SCNode* Self, Message* C, bool Visible) {
	if (SC_Msg_OperatorIsTmp(C, JB_LUB[1350])) {
		Visible = SC_Base_LoadVisibility(Self, C);
		JB_Tree_Remove(C);
		return Visible;
	}
	(SC_Msg_visibleSet(C, Visible));
	if ((!JB_FreeIfDead(SC_Base_CollectSub(Self, C))) and (JB_Object_FastIsa(Self, &SCModuleData))) {
		SC_Mod_MoveToInitFunc(((SCModule*)Self), C);
	}
	return Visible;
}

void SC_Base_CollectOneConstants(SCNode* Self, Message* Ch) {
	SC__Base_ConstantsLoadingOverride = true;
	SC_Imp_Use(Self->Project);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Ch, (&_usingf0));
	SC_Base_CollectConstantsSub(Self, Ch);
	SC__Base_ConstantsLoadingOverride = false;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Ch);
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Base_CollectStr(SCNode* Self, JB_String* S) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, SC_Str_ParseClean(S));
	SC_Base_CollectFromNode(Self, Rz, false, nil);
	JB_SafeDecr(Rz);
	return Rz;
}

SCNode* SC_Base_CollectSub(SCNode* Self, Message* C) {
	Dictionary* T = SC_ClsCollectTable;
	JB_Incr(T);
	if ((Self == SC__Comp_program) or JB_Object_Isa(Self, &SCModuleData)) {
		JB_SetRef(T, SC_RootCollectTable);
	}
	if (!JB_Msg_EqualsSyx(C, kJB_SyxTmp, false)) {
		if (JB_Object_FastIsa(Self, &SCClassData)) {
			JB_Msg_Expect(C, kJB_SyxDecl, nil);
		}
		JB_Decr(T);
		return nil;
	}
	DTWrap* FnObj = ((DTWrap*)JB_Dict_Value0(T, C->Name));
	JB_Incr(FnObj);
	JB_Decr(T);
	if (!FnObj) {
		JB_Msg_Fail(C, nil);
		JB_Decr(FnObj);
		return nil;
	}
	SCNode* Base = (((FP_CollectFunc)JB_Wrap_SyntaxAccess(FnObj)))(C, Self, C);
	JB_Incr(Base);
	JB_Decr(FnObj);
	if (!Base) {
		JB_Decr(Base);
		return nil;
	}
	if (Base != SC__Comp_program) {
		SC_Base_TryAdd(Self, C, Base, Base->Name);
	}
	JB_SafeDecr(Base);
	return Base;
}

void SC_Base_ConstantExpand(SCNode* Self, Message* Ch) {
	Message* L = ((Message*)JB_Ring_First(Ch));
	JB_Incr(L);
	Message* Op = ((Message*)JB_Ring_NextSib(L));
	JB_Incr(Op);
	Message* R = ((Message*)JB_Ring_NextSib(Op));
	JB_Incr(R);
	if (!(((JB_Msg_SyntaxEquals(Op, JB_LUB[241], false))) and ((JB_Msg_EqualsSyx(L, kJB_SyxThg, false))))) {
		JB_Msg_Fail(Op, JB_LUB[836]);
		JB_Decr(R);
		JB_Decr(Op);
		JB_Decr(L);
		return;
	}
	JB_Decr(Op);
	Message* Rel = (JB_Syx_Msg(kJB_SyxRel, JB_LUB[0]));
	JB_Incr(Rel);
	JB_Tree_SyntaxAppend(Rel, L);
	JB_Decr(L);
	Message* _tmPf0 = JB_Syx_Msg(kJB_SyxOpp, JB_LUB[241]);
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(Rel, (_tmPf0));
	JB_Decr(_tmPf0);
	Message* _tmPf1 = SC_Msg_ConstantExpandSub(R);
	JB_Incr(_tmPf1);
	JB_Tree_SyntaxAppend(Rel, _tmPf1);
	JB_Decr(_tmPf1);
	(JB_Ring_NextSibSet(Ch, Rel));
	JB_Decr(Rel);
	SC_Msg_MoveAllAfter(R, Ch);
	JB_Decr(R);
	JB_Tree_Remove(Ch);
}

SCNode* SC_Base_Constructor0(SCNode* Self) {
	if (Self == nil) {
		Self = ((SCNode*)JB_NewClass(&SCNodeData));
	}
	SC_Named_Constructor(Self);
	Self->MyReacher = nil;
	Self->Parent = nil;
	Self->Access = nil;
	Self->Project = SC__Imp_Curr;
	(SC_SCObject_IsVisibleSet(Self, SC__Base_CurrVisibility));
	return Self;
}

SCNode* SC_Base_ConstructorStr(SCNode* Self, JB_String* Name) {
	if (Self == nil) {
		Self = ((SCNode*)JB_NewClass(&SCNodeData));
	}
	SC_Named_Constructor(Self);
	Self->MyReacher = nil;
	Self->Parent = nil;
	Self->Access = nil;
	Self->Project = SC__Imp_Curr;
	JB_Incr2(Self->Name, Name);
	return Self;
}

SCNode* SC_Base_ConstructorMsg(SCNode* Self, Message* Node) {
	if (Self == nil) {
		Self = ((SCNode*)JB_NewClass(&SCNodeData));
	}
	SC_Named_Constructor(Self);
	Self->MyReacher = nil;
	Self->Parent = nil;
	Self->Access = nil;
	Self->Project = SC__Imp_Curr;
	JB_Incr2(Self->Source, Node);
	(SC_SCObject_IsVisibleSet(Self, SC_Msg_visible(Node)));
	return Self;
}

void SC_Base_CreateNameDict(SCNode* Self, Message* FuncName, Array* NameList) {
	if ((!JB_Msg_EqualsSyx(FuncName, kJB_SyxThg, false))) {
		JB_Msg_Fail(FuncName, JB_LUB[1978]);
		return;
	}
	JB_String* AllSameType = JB_LUB[0];
	JB_Incr(AllSameType);
	{
		int _if2 = 0;
		while (true) {
			Message* N = ((Message*)JB_Array_Value(NameList, _if2));
			JB_Incr(N);
			if (N == nil) {
				JB_Decr(N);
				break;
			}
			SCDecl* Type = SC_TypeOfExpr(N, Self, nil);
			JB_Incr(Type);
			if (!Type) {
				JB_Decr(Type);
				JB_Decr(N);
				JB_Decr(AllSameType);
				return;
			}
			if (!SC_Decl_IsNormal(Type)) {
				JB_Msg_Fail(N, JB_LUB[1979]);
				JB_Decr(Type);
				JB_Decr(N);
				JB_Decr(AllSameType);
				return;
			}
			JB_Decr(N);
			JB_String* NewType = Type->Type->Name;
			JB_Incr(NewType);
			JB_Decr(Type);
			if ((JB_Str_Equals(AllSameType, NewType, false)) or (JB_Str_Equals(AllSameType, JB_LUB[0], false))) {
				JB_SetRef(AllSameType, NewType);
			}
			 else {
				JB_SetRef(AllSameType, JB_LUB[435]);
			}
			JB_Decr(NewType);
			(++_if2);
		};
	}
	;
	if (!JB_Str_Exists(AllSameType)) {
		JB_SetRef(AllSameType, JB_LUB[435]);
	}
	JB_String* Name = FuncName->Name;
	JB_Incr(Name);
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	//;
	JB_FS_AppendString(Fs, JB_LUB[1980]);
	JB_FS_AppendString(Fs, Name);
	JB_FS_AppendString(Fs, JB_LUB[1981]);
	JB_FS_AppendString(Fs, AllSameType);
	JB_FS_AppendString(Fs, JB_LUB[1982]);
	JB_FS_AppendString(Fs, Name);
	JB_FS_AppendString(Fs, JB_LUB[1983]);
	JB_FS_AppendString(Fs, Name);
	JB_FS_AppendString(Fs, JB_LUB[1984]);
	//;
	{
		int _if4 = 0;
		while (true) {
			Message* S = ((Message*)JB_Array_Value(NameList, _if4));
			JB_Incr(S);
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			JB_FS_AppendString(Fs, JB_LUB[1985]);
			JB_String* _tmPf6 = JB_Str_LowerCase(S->Name);
			JB_Incr(_tmPf6);
			JB_FS_AppendString(Fs, _tmPf6);
			JB_Decr(_tmPf6);
			JB_FS_AppendString(Fs, JB_LUB[1986]);
			JB_FS_SyntaxAppend(Fs, S);
			JB_Decr(S);
			JB_FS_AppendString(Fs, JB_LUB[293]);
			(++_if4);
		};
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[1987]);
	JB_String* FuncSrc = JB_FS_GetResult(Fs);
	JB_Incr(FuncSrc);
	JB_Decr(Fs);
	Message* _tmPf7 = SC_Str_ParseClean(FuncSrc);
	JB_Incr(_tmPf7);
	JB_Decr(FuncSrc);
	Message* Msg = ((Message*)JB_Tree_Get(_tmPf7, 0));
	JB_Incr(Msg);
	JB_Decr(_tmPf7);
	if (!Msg) {
		JB_Object_Fail(nil);
		JB_Decr(Msg);
		JB_Decr(Name);
		JB_Decr(AllSameType);
		return;
	}
	JB_FreeIfDead(SC_Base_CollectSub(Self, Msg));
	JB_Decr(Msg);
	FastString* _fsf1 = JB_FS_Constructor(nil);
	JB_Incr(_fsf1);
	JB_FS_AppendString(_fsf1, JB_LUB[1988]);
	JB_FS_AppendString(_fsf1, AllSameType);
	JB_Decr(AllSameType);
	JB_FS_AppendString(_fsf1, JB_LUB[1989]);
	JB_FS_AppendString(_fsf1, Name);
	JB_Decr(Name);
	JB_FS_AppendString(_fsf1, JB_LUB[1990]);
	JB_String* DclSrc = JB_FS_GetResult(_fsf1);
	JB_Incr(DclSrc);
	JB_Decr(_fsf1);
	Message* DclMsg = SC_Str_ParseClean(DclSrc);
	JB_Incr(DclMsg);
	JB_Decr(DclSrc);
	if (DclMsg) {
		SC_Msg_CollectFromBody(DclMsg, Self);
	}
	JB_Decr(DclMsg);
}

void SC_Base_Destructor(SCNode* Self) {
	JB_Clear(Self->Access);
	SC_Named_Destructor(Self);
}

Message* SC_Base_DiissplayObj(SCNode* Self, Message* Rz) {
	JB_String* _tmPf1 = SC_Base_AutoCompleteKind(Self);
	JB_Incr(_tmPf1);
	JB_String* _tmPf2 = JB_Str_OperatorPlus(JB_LUB[27], Self->Name);
	JB_Incr(_tmPf2);
	JB_String* _tmPf0 = JB_Str_OperatorPlus(_tmPf1, _tmPf2);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf2);
	JB_Msg_AppendSyx(Rz, kJB_SyxEmb, _tmPf0);
	JB_Decr(_tmPf0);
	return Rz;
}

bool SC_Base_ExpectModule(SCNode* Self, Message* Errplace) {
	if (!JB_Object_Isa(Self, &SCModuleData)) {
		JB_Msg_Fail(Errplace, JB_LUB[837]);
		return nil;
	}
	return true;
}

SCClass* SC_Base_FindClass(SCNode* Self, JB_String* Name, Message* Where, SCNodeFindMode Mode) {
	SCModule* Mod = SC_Base_FindModule(Self, Name, Where, Mode | kSC__SCNodeFindMode_ForClass);
	if (Mod) {
		if (Mod->Cls) {
			return Mod->Cls;
		}
		if (!SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_NoErrors)) {
			if (true) {
				JB_Msg_Fail(Where, JB_LUB[988]);
			}
		}
		return nil;
	}
	if (!SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_NoErrors)) {
		if (true) {
			JB_Msg_Fail(Where, JB_Str_OperatorPlus(JB_LUB[989], Name));
		}
	}
	return nil;
}

SCClass* SC_Base_FindClassMsg(SCNode* Self, Message* Where, SCNodeFindMode Mode) {
	SCModule* Mod = SC_Base_FindModuleMsg(Self, Where, Mode | kSC__SCNodeFindMode_ForClass);
	if (Mod) {
		SCClass* C = Mod->Cls;
		if (C) {
			return C;
		}
		if (!SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_NoErrors)) {
			if (true) {
				JB_Msg_Fail(Where, JB_LUB[988]);
			}
		}
	}
	return nil;
}

Message* SC_Base_FindCppWrapper(SCNode* Self, Message* Place, bool Isclass) {
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		Message* Pl = SC_Func_FindCppWrapperFunc(((SCFunction*)Self), Place);
		JB_Incr(Pl);
		if (Pl) {
			Message* _tmPf0 = SC_Msg_FindAndRemove2(Place, Pl, true, false);
			JB_Incr(_tmPf0);
			JB_Decr(Pl);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(Pl);
	}
	return SC_Msg_FindAndRemoveSub(Place, JB_LUB[1153], true, Isclass);
}

SCFunction* SC_Base_FindFunction(SCNode* Self, JB_String* Name) {
	SCObject* O = SC_Base_SyntaxAccessWithStr(Self, Name);
	if (JB_Object_FastIsa(O, &SCFunctionData)) {
		SC_Func_Reach(((SCFunction*)O));
		return ((SCFunction*)O);
	}
	if (true) {
		JB_Object_FailStr(nil, JB_Str_OperatorPlus(JB_LUB[1234], Name));
	}
	return nil;
}

SCModule* SC_Base_FindModule(SCNode* Self, JB_String* Name, Message* Where, SCNodeFindMode Mode) {
	SCNode* Upon = Self;
	while (Upon) {
		if (JB_Str_Equals(Name, Upon->Name, true)) {
			if (JB_Object_FastIsa(Upon, &SCModuleData)) {
				return ((SCModule*)Upon);
			}
		}
		SCObject* Obj = SC_Base_SyntaxAccessWithStr(Upon, Name);
		if (JB_Object_FastIsa(Obj, &SCModuleData)) {
			return ((SCModule*)Obj);
		}
		if (SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_DontGoUp)) {
			break;
		}
		Upon = SC_Base_FindModuleParent(Upon, Mode);
	};
	if (Where and ((!SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_NoErrors)))) {
		if (SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_ForClass)) {
			if (true) {
				JB_Msg_Fail(Where, JB_Str_OperatorPlus(JB_LUB[838], Name));
			}
		}
		 else {
			if (true) {
				JB_Msg_Fail(Where, JB_Str_OperatorPlus(JB_LUB[839], Name));
			}
		}
	}
	return nil;
}

SCModule* SC_Base_FindModuleMsg(SCNode* Self, Message* Where, SCNodeFindMode Mode) {
	Syntax Fn = Where->Func;
	if (Fn == kJB_SyxDot) {
		Message* F = ((Message*)JB_Ring_First(Where));
		JB_Msg_Expect(((Message*)JB_Ring_NextSib(F)), kJB_SyxEmb, nil);
		Self = SC_Base_FindModuleMsg(Self, F, Mode);
		if (!Self) {
			return nil;
		}
	}
	 else {
		if (!((Fn == kJB_SyxThg) or (Fn == kJB_SyxName))) {
			JB_Msg_Fail(Where, nil);
			return nil;
		}
	}
	return SC_Base_FindModule(Self, Where->Name, Where, Mode);
}

SCNode* SC_Base_FindModuleParent(SCNode* Self, SCNodeFindMode Mode) {
	if (SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_WantAType)) {
		SCClass* Cls = ((SCModule*)Self)->Cls;
		if (Cls) {
			SCClass* P = ((SCClass*)Cls->Parent);
			if (P) {
				SCModule* Mod = P->Modul;
				if (Mod->Parent != Self) {
					return Mod;
				}
			}
		}
	}
	return Self->Parent;
}

bool SC_Base_FindVis(SCNode* Self, Message* C) {
	if (!C) {
		return true;
	}
	if (JB_Msg_EqualsSyx(C, kJB_SyxThg, false)) {
		return SC_Msg_TrueOrFalse(C);
	}
	if (JB_Msg_EqualsSyx(C, kJB_SyxAdj, false)) {
		Message* First = JB_Msg_NeedSyxName(C, kJB_SyxThg, JB_LUB[169]);
		JB_String* Name = JB_Msg_Name(JB_Msg_NeedSyxInt(C, kJB_SyxThg, 1));
		SCClass* Cls = SC_Comp__SoftClass(Name);
		return Cls and (!SC_Class_SyntaxIs(Cls, kSC__ClassInfo_Banned));
	}
	if (true) {
		JB_Msg_Fail(C, nil);
	}
	return false;
}

Message* SC_Base_FuncSrc(SCNode* Self) {
	SCFunction* _tmPf0 = SC_Base_OwningFunc(Self);
	if (!_tmPf0) {
		return nil;
	}
	return _tmPf0->Source;
}

void SC_Base_ImportFile(SCNode* Self, SCFile* File) {
	Message* AST = SC_File_AST(File);
	JB_Incr(AST);
	if (!AST) {
		JB_Decr(AST);
		return;
	}
	SCImport* Old = SC_File_Use(File);
	JB_Incr(Old);
	JB_SetRef(SC__Comp_Project, File->Proj);
	bool V = File->Proj->IsSTDLib and SC__Options_MakeInterpreter;
	SC_Base_CollectFromNode(SC__Comp_program, AST, V, nil);
	JB_Decr(AST);
	SC_File_Stop(File, Old);
	JB_Decr(Old);
}

bool SC_Base_IsLibrary(SCNode* Self) {
	return ({
		SCImport* _t = Self->Project;
		 ((bool)JB_Ternary(_t, _t->IsSTDLib, nil));
	});
}

bool SC_Base_IsModuleFunc(SCNode* Self) {
	if (JB_Object_FastIsa(Self, &SCArgData)) {
		return (!((SCArg*)Self)->IsClassArg);
	}
	return (JB_Object_Isa(Self, &SCModuleData));
}

SCClass* SC_Base_IsNormalObject(SCNode* Self) {
	if (JB_Object_FastIsa(Self, &SCClassData)) {
		if (SC_Class_IsObject(((SCClass*)Self))) {
			return ((SCClass*)Self);
		}
	}
	return nil;
}

bool SC_Base_IsReached(SCNode* Self) {
	return ((bool)Self->MyReacher);
}

JB_String* SC_Base_LateAddTempory(SCNode* Self, JB_String* Type, JB_String* Name1, Message* Value, Message* Err) {
	JB_String* Name = SC_UniqueTmpVar(SC__Comp_program, Name1);
	JB_Incr(Name);
	JB_FreeIfDead(SC_TypeOfExpr(Value, Self, nil));
	Message* Msg = SC_MakeDecl(Type, Name, Value, kSC__SCDeclInfo_Body);
	JB_Incr(Msg);
	SCDecl* D = SC_TypeOfExpr(Msg, Self, nil);
	JB_Incr(D);
	if (!D) {
		JB_Decr(D);
		JB_Decr(Msg);
		JB_Decr(Name);
		return JB_LUB[0];
	}
	((SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_NumberConst, false)));
	JB_Tree_SyntaxAppend(Self->Source, Msg);
	JB_Decr(Msg);
	SC_Base_TryAdd(Self, Err, D, Name);
	JB_Decr(D);
	JB_SafeDecr(Name);
	return Name;
}

Message* SC_Base_LinkagePlace(SCNode* Self) {
	Message* Place = SC_Base_SourceArg(Self);
	Message* Link = JB_Msg_FindSyxName(Place, kJB_SyxTmp, JB_LUB[237], false);
	Message* _tmP0 = JB_Msg_NeedSyx(Link, kJB_SyxArg);
	if (!_tmP0) {
		_tmP0 = Place;
	}
	return _tmP0;
}

Array* SC_Base_ListFunctions(SCNode* Self) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	JB_Incr(Rz);
	if (!Self->Access) {
		Array* _tmPf0 = (JB_Array_Constructor0(nil));
		JB_Incr(_tmPf0);
		JB_Decr(Rz);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	{
		Dictionary* _LoopSrcf3 = Self->Access;
		JB_Incr(_LoopSrcf3);
		DictionaryReader* _navf1 = JB_Dict_Navigate(_LoopSrcf3);
		JB_Incr(_navf1);
		JB_Decr(_LoopSrcf3);
		while (true) {
			SCObject* O = ((SCObject*)JB_DictionaryReader_NextValue(_navf1));
			JB_Incr(O);
			if (O == nil) {
				JB_Decr(O);
				break;
			}
			SC_ListFunctionsSub(O, Rz);
			JB_Decr(O);
		};
		JB_Decr(_navf1);
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Base_LoadExportName(SCNode* Self) {
	if (((JB_String*)JB_Str_Exists(Self->ExportName))) {
		return;
	}
	Message* Place = SC_Base_LinkagePlace(Self);
	JB_Incr(Place);
	bool IsClass = (JB_Object_Isa(Self, &SCClassData));
	Message* CW = SC_Base_FindCppWrapper(Self, Place, IsClass);
	JB_Incr(CW);
	JB_String* CppName = SC_Msg_FindAndRemove(Place, JB_LUB[1235], false, IsClass);
	JB_Incr(CppName);
	JB_String* CppPart = SC_Msg_FindAndRemove(Place, JB_LUB[1111], false, IsClass);
	JB_Incr(CppPart);
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		if (!((SCFunction*)Self)->IsCppInBuilt) {
			(SC_Func_IsCppInBuiltSet(((SCFunction*)Self), ((int)((JB_Msg_EqualsSyx(CW, kJB_SyxBra, false))))));
		}
		((SC_Func_SyntaxIsSet(((SCFunction*)Self), kSC__FunctionType_Cpp, ((bool)CW))));
		JB_String* CppWrapper = SC_Msg_Cpp_Wrapper(CW);
		JB_Incr(CppWrapper);
		if (JB_Str_Exists(CppWrapper)) {
			SC_Func_MakeParamsReal(((SCFunction*)Self));
		}
		if (!((!SC_Func_UseExportWrapper(((SCFunction*)Self), CppWrapper)) and ((!SC_Func_UseCppName(((SCFunction*)Self), CppName)) and ((!SC_Func_SyntaxIs(((SCFunction*)Self), kSC__FunctionType_Disabled)))))) {
			JB_Decr(CppWrapper);
			JB_Decr(CppPart);
			JB_Decr(CppName);
			JB_Decr(CW);
			JB_Decr(Place);
			return;
		}
		JB_Decr(CppWrapper);
		JB_SetRef(CppName, SC_Func_ExportNameBuilder(((SCFunction*)Self), CppPart));
		((SC_Func_SyntaxIsSet(((SCFunction*)Self), kSC__FunctionType_Wrapper, CW != nil)));
	}
	 else {
		if (!JB_Str_Exists(CppPart)) {
			JB_SetRef(CppPart, Self->Name);
		}
		if (!JB_Str_Exists(CppName)) {
			JB_SetRef(CppName, CppPart);
		}
		if (JB_Object_FastIsa(Self, &SCModuleData)) {
			JB_SetRef(((SCModule*)Self)->CppPart, CppPart);
		}
		 else if (JB_Object_FastIsa(Self, &SCClassData)) {
			JB_SetRef(((SCClass*)Self)->Modul->CppPart, CppPart);
			JB_String* E = SC_Msg_FindAndRemove(Place, JB_LUB[1236], false, true);
			JB_Incr(E);
			if (JB_Str_Exists(E)) {
				JB_SetRef(((SCClass*)Self)->CppClass, SC_Str_UnicodeSafeName(E, nil));
			}
			JB_Decr(E);
			JB_String* _tmPf0 = JB_Str_OperatorPlus(CppPart, JB_LUB[162]);
			JB_Incr(_tmPf0);
			SC_Base_SetExportName(((SCClass*)Self)->Modul, _tmPf0, false);
			JB_Decr(_tmPf0);
		}
	}
	JB_Decr(Place);
	JB_Decr(CW);
	JB_Decr(CppPart);
	SC_Base_SetExportName(Self, CppName, false);
	JB_Decr(CppName);
}

bool SC_Base_LoadVisibility(SCNode* Self, Message* P) {
	bool Rz = false;
	Rz = SC_Base_FindVis(Self, ((Message*)JB_Ring_First(P)));
	(SC_SCObject_IsVisibleSet(Self, Rz));
	SC__Base_CurrVisibility = Rz;
	SC_Msg_MakeComment(P);
	return Rz;
}

JB_Object* SC_Base_LookUpDot(SCNode* Self, JB_String* Name, Message* Exp, SCNode* Arg_space, SCDecl* Contains, Message* Side) {
	return SC_Base_LookUpSub(Self, Name, Exp, Arg_space, Contains, Side, kSC__Base_kPurposeDot);
}

SCObject* SC_Base_LookUpFunc(SCNode* Self, JB_String* Name, Message* Exp) {
	return SC_Base_LookUpSub(Self, Name, Exp, Self, nil, nil, kSC__Base_kPurposeFunc);
}

SCObject* SC_Base_LookUpSub(SCNode* Self, JB_String* OrigName, Message* Exp, SCNode* Arg_Space, SCDecl* Contains, Message* Side, int Purpose) {
	SCParamArray* ParamsArray = SC_PA_Constructor(nil, Exp);
	JB_Incr(ParamsArray);
	SCNode* Curr = SC_PA_DetectDotSuper(ParamsArray, Self, Arg_Space);
	JB_Incr(Curr);
	Message* Paramshere = ((Message*)JB_Ring_Last(Exp));
	JB_Incr(Paramshere);
	SC_PA_PreReadTypes(ParamsArray, Arg_Space, Paramshere, Side);
	bool CanFunction = (Paramshere) and ((!ParamsArray->IsAddress));
	SCFunction* Missing = nil;
	JB_Incr(Missing);
	SCFunction* F = nil;
	JB_Incr(F);
	SCClass* Owning_cls = nil;
	JB_Incr(Owning_cls);
	bool AllowSelfToConstructor = false;
	if (JB_FreeIfDead(SC_Func__CurrFunc())) {
		SCFunction* _tmPf4 = SC_Func__CurrFunc();
		JB_Incr(_tmPf4);
		JB_SetRef(Owning_cls, _tmPf4->Cls);
		JB_Decr(_tmPf4);
		if (Owning_cls) {
			AllowSelfToConstructor = SC_PA_IsSelfCon(ParamsArray);
		}
	}
	{
		SCNode* B = Curr;
		JB_Incr(B);
		while (B) {
			SCObject* O = SC_Base_SyntaxAccessWithStr(B, OrigName);
			JB_Incr(O);
			if ((!O)) {
				JB_SetRef(B, B->Parent);
				JB_Decr(O);
				continue;
			}
			if ((ParamsArray->IsDot) and ((SC_PA_IsModule(ParamsArray)) and (B == SC__Comp_program))) {
				JB_Decr(O);
				break;
			}
			if (JB_Object_FastIsa(O, &SCDeclData)) {
				if (((Owning_cls != Curr) or SC_Msg_IsFuncDot(Exp)) and SC_Func_HiderMatch(((SCDecl*)O)->HiderFunc, ParamsArray->HasSide)) {
					JB_SetRef(O, ((SCDecl*)((SCDecl*)O)->HiderFunc));
				}
				 else {
					if (((SCDecl*)O)->Type->FuncProto) {
						if (!((ParamsArray->IsDot or (!Paramshere)) and ((!SC_PA_SyntaxCast(ParamsArray))))) {
							JB_Msg_Fail(Exp, JB_LUB[1902]);
							JB_Decr(O);
							JB_Decr(B);
							JB_Decr(Owning_cls);
							JB_Decr(F);
							JB_Decr(Missing);
							JB_Decr(Paramshere);
							JB_Decr(Curr);
							JB_Decr(ParamsArray);
							return nil;
						}
						JB_Decr(B);
						JB_Decr(Owning_cls);
						JB_Decr(F);
						JB_Decr(Missing);
						JB_Decr(Paramshere);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(O);
						return ((SCDecl*)O);
					}
					if ((!Side) and (ParamsArray->IsDot and ((SCDecl*)O)->Type->ProcessAs)) {
						if (!Exp) {
							JB_Decr(O);
							JB_Decr(B);
							JB_Decr(Owning_cls);
							JB_Decr(F);
							JB_Decr(Missing);
							JB_Decr(Paramshere);
							JB_Decr(Curr);
							JB_Decr(ParamsArray);
							return nil;
						}
						SCDecl* _tmPf7 = SC_Decl_ProcessAs(((SCDecl*)O), Exp);
						JB_Incr(_tmPf7);
						JB_Decr(O);
						JB_Decr(B);
						JB_Decr(Owning_cls);
						JB_Decr(F);
						JB_Decr(Missing);
						JB_Decr(Paramshere);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(_tmPf7);
						return _tmPf7;
					}
				}
			}
			ParamsArray->AllowSelfToConstructor = AllowSelfToConstructor;
			if ((Paramshere and (Paramshere->Func == kJB_SyxPrm)) and (JB_Object_FastIsa(O, &SCModuleData))) {
				JB_SetRef(O, ((SCModule*)SC_Mod_GetTheNewer(((SCModule*)O))));
				ParamsArray->AllowSelfToConstructor = false;
			}
			if (CanFunction and (JB_Object_FastIsa(O, &SCFunctionData))) {
				JB_SetRef(F, O);
				JB_SetRef(O, SC_Func_ArgsMatch(F, Contains, Arg_Space, ParamsArray, 0));
				if (!((SCFunction*)O)) {
					0;
				}
				 else if (((SCFunction*)O)->IsMacro) {
					if (((SCFunction*)O)->IsMacro) {
						JB_SetRef(Missing, O);
					}
					JB_SetRef(O, nil);
				}
				 else {
					if (SC_Func_SyntaxIs(((SCFunction*)O), kSC__FunctionType_Disabled)) {
						if (true) {
							JB_Msg_Fail(Exp, ((SCFunction*)O)->Description);
						}
						if (true) {
							JB_Msg_Fail(((SCFunction*)O)->Source, JB_LUB[1903]);
						}
					}
					if (Paramshere) {
						JB_SetRef(Paramshere->Obj, O);
						if ((!ParamsArray->AllowSelfToConstructor) and (SC_Func_SyntaxIs(((SCFunction*)O), kSC__FunctionType_Constructor))) {
							if (SC_Func_ReturnsObject(((SCFunction*)O))) {
								SC_Msg_ConstructorAddNil(Paramshere, ParamsArray->IsDot and (!(JB_Object_Isa(Self, &SCModuleData))));
							}
						}
					}
					JB_Decr(B);
					JB_Decr(Owning_cls);
					JB_Decr(F);
					JB_Decr(Missing);
					JB_Decr(Paramshere);
					JB_Decr(Curr);
					JB_Decr(ParamsArray);
					JB_SafeDecr(O);
					return ((SCFunction*)O);
				}
			}
			if (O) {
				ParamsArray->Found = true;
				if (!SC_PA_SyntaxCast(ParamsArray)) {
					if ((Purpose == kSC__Base_kPurposeDot) and ((!ParamsArray->IsAddress) and (JB_Object_FastIsa(O, &SCDeclData)))) {
						JB_Decr(B);
						JB_Decr(Owning_cls);
						JB_Decr(F);
						JB_Decr(Missing);
						JB_Decr(Paramshere);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(O);
						return ((SCDecl*)O);
					}
					if (!JB_Object_Isa(O, &SCFunctionData)) {
						JB_Decr(B);
						JB_Decr(Owning_cls);
						JB_Decr(F);
						JB_Decr(Missing);
						JB_Decr(Paramshere);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(O);
						return O;
					}
					if (!JB_Msg_OperatorIn(Exp, kJB_SyxDot)) {
						JB_String* Err = JB_LUB[1904];
						JB_Incr(Err);
						if (Side and (!SC_PA_MacroSize(ParamsArray))) {
							JB_SetRef(Err, JB_LUB[1098]);
						}
						if (!((SCFunction*)O)->HasProto) {
							JB_Msg_Fail(Exp, Err);
						}
						JB_Decr(Err);
						SCDecl* _tmPf8 = ((SCFunction*)O)->HasProto;
						JB_Incr(_tmPf8);
						JB_Decr(O);
						JB_Decr(B);
						JB_Decr(Owning_cls);
						JB_Decr(F);
						JB_Decr(Missing);
						JB_Decr(Paramshere);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(_tmPf8);
						return _tmPf8;
					}
				}
			}
			JB_Decr(O);
			JB_SetRef(B, B->Parent);
		};
		JB_Decr(B);
	}
	;
	JB_Decr(Curr);
	JB_Decr(Owning_cls);
	if (Missing) {
		JB_Decr(F);
		SCDecl* _tmPf9 = SC_Func_MacroFix(Missing, Contains, Arg_Space, ParamsArray);
		JB_Incr(_tmPf9);
		JB_Decr(Missing);
		JB_Decr(Paramshere);
		JB_Decr(ParamsArray);
		JB_SafeDecr(_tmPf9);
		return _tmPf9;
	}
	JB_Decr(Missing);
	if ((!Exp)) {
		JB_Decr(F);
		JB_Decr(Paramshere);
		JB_Decr(ParamsArray);
		return nil;
	}
	if (F) {
		if (SC_Func_SyntaxIs(F, kSC__FunctionType_Disabled)) {
			if (true) {
				JB_Msg_Fail(Exp, F->Description);
			}
		}
		 else if (!SC_PA_MadeError(ParamsArray)) {
			JB_FreeIfDead(SC_Func_ArgsMatch(F, Contains, Arg_Space, ParamsArray, kJB_kTypeCastDescribeErrors));
		}
		if (Paramshere) {
			JB_SetRef(Paramshere->Obj, F);
		}
		JB_Decr(Paramshere);
		JB_Decr(ParamsArray);
		JB_SafeDecr(F);
		return F;
	}
	JB_Decr(F);
	JB_String* ErrMsg = JB_LUB[0];
	JB_Incr(ErrMsg);
	if (ParamsArray->Found) {
		JB_SetRef(ErrMsg, JB_LUB[1905]);
	}
	 else if ((!Paramshere)) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[1906]);
		JB_FS_AppendString(_fsf0, OrigName);
		JB_FS_AppendString(_fsf0, JB_LUB[1907]);
		JB_SetRef(ErrMsg, JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
	}
	 else if (ParamsArray->IsDot) {
		FastString* _fsf1 = JB_FS_Constructor(nil);
		JB_Incr(_fsf1);
		JB_FS_AppendString(_fsf1, JB_LUB[1908]);
		JB_FS_AppendString(_fsf1, OrigName);
		JB_FS_AppendString(_fsf1, JB_LUB[1909]);
		JB_String* _tmPf5 = SC_PA_RenderKind(ParamsArray);
		JB_Incr(_tmPf5);
		JB_FS_AppendString(_fsf1, _tmPf5);
		JB_Decr(_tmPf5);
		JB_FS_AppendString(_fsf1, JB_LUB[359]);
		JB_String* _tmPf6 = SC_PA_ModuleName(ParamsArray);
		JB_Incr(_tmPf6);
		JB_FS_AppendString(_fsf1, _tmPf6);
		JB_Decr(_tmPf6);
		JB_FS_AppendString(_fsf1, JB_LUB[1907]);
		JB_SetRef(ErrMsg, JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		if (JB_Object_FastIsa(Self, &SCModuleData)) {
			SCClass* Cls = ((SCModule*)Self)->Cls;
			JB_Incr(Cls);
			if (Cls) {
				SCObject* Found = SC_Base_UpCheck(Cls, OrigName, true);
				JB_Incr(Found);
				if (Found) {
					JB_SetRef(ErrMsg, JB_Str_OperatorPlus(ErrMsg, JB_LUB[1910]));
				}
				JB_Decr(Found);
			}
			JB_Decr(Cls);
		}
	}
	 else {
		FastString* _fsf2 = JB_FS_Constructor(nil);
		JB_Incr(_fsf2);
		JB_FS_AppendString(_fsf2, JB_LUB[1911]);
		JB_FS_AppendString(_fsf2, OrigName);
		JB_FS_AppendString(_fsf2, JB_LUB[1907]);
		JB_SetRef(ErrMsg, JB_FS_GetResult(_fsf2));
		JB_Decr(_fsf2);
	}
	JB_Decr(ParamsArray);
	JB_Decr(Paramshere);
	if (true) {
		JB_Msg_Fail(Exp, ErrMsg);
	}
	JB_Decr(ErrMsg);
	return nil;
}

SCObject* SC_Base_LookUpVar(SCNode* Self, JB_String* Name, Message* Exp, Message* Side) {
	SCObject* Rz = nil;
	if (JB_Str_Equals(Name, JB_LUB[913], true)) {
		Name = JB_LUB[180];
	}
	Rz = SC_Base_LookUpSub(Self, Name, Exp, Self, nil, Side, kSC__Base_kPurposeVar);
	if (JB_Object_FastIsa(Rz, &SCDeclData)) {
		(SC_Decl_SyntaxIsSet(((SCDecl*)Rz), kSC__SCDeclInfo_UsedByCode, true));
	}
	return Rz;
}

SCDecl* SC_Base_LookUpVarDecl(SCNode* Self, JB_String* Name) {
	SCObject* Result = SC_Base_LookUpSub(Self, Name, nil, Self, nil, nil, kSC__Base_kPurposeVarDecl);
	JB_Incr(Result);
	if (JB_Object_FastIsa(Result, &SCDeclData)) {
		JB_SafeDecr(Result);
		return ((SCDecl*)Result);
	}
	JB_Decr(Result);
	return nil;
}

SCObject* SC_Base_LookUpVarRootDecl(SCNode* Self, JB_String* Name, Message* Exp) {
	return SC_Base_LookUpSub(Self, Name, Exp, Self, nil, nil, kSC__Base_kPurposeVarDecl);
}

bool SC_Base_NeedsExport(SCNode* Self) {
	return ((bool)(Self->MyReacher));
}

SCFunction* SC_Base_OwningFunc(SCNode* Self) {
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		return ((SCFunction*)Self);
	}
	if (JB_Object_FastIsa(Self, &SCArgData)) {
		return ((SCArg*)Self)->ParentFunc;
	}
	return nil;
}

SCNode* SC_Base_ProcessLinkage(SCNode* Self, Message* Node, Dictionary* Table) {
	SCFunction* Fn = SC_Base_OwningFunc(Self);
	{
		Message* Ch = ((Message*)JB_Ring_First(Node));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			if (!JB_Msg_Expect(Ch, kJB_SyxTmp, nil)) {
				return nil;
			}
			DTWrap* Linker = ((DTWrap*)JB_Dict_Value0(Table, Ch->Name));
			if (!Linker) {
				JB_Msg_Fail(Ch, nil);
				return nil;
			}
			(((FP_TranFunc)JB_Wrap_SyntaxAccess(Linker)))(Fn, Ch, Self);
			Ch = _Nf1;
		};
		;
	}
	;
	return SC__Comp_program;
}

SCNode* SC_Base_ProjectFix(SCNode* Self) {
	if (Self == SC__Comp_program) {
		SCImport* C = SC__Imp_Curr;
		if (C) {
			return C->Mod;
		}
	}
	return Self;
}

JB_String* SC_Base_ReachedName(SCNode* Self) {
	JB_String* Rz = JB_LUB[0];
	SCNode* C = Self->MyReacher;
	Rz = JB_Str_OperatorPlus(JB_LUB[33], Self->Name);
	if (JB_ObjClass(C) == &SCNodeData) {
		Rz = JB_Str_OperatorPlus(Rz, JB_LUB[34]);
	}
	return Rz;
}

bool SC_Base_RehomeExport(SCNode* Self) {
	if ((SC_Base_IsLibrary(Self))) {
		SC_SCObject_Fail(Self, JB_LUB[840]);
	}
	JB_String* Newhome = SC_Base_UniquifyExport(Self, Self->ExportName);
	JB_Incr(Newhome);
	if (!JB_Str_Exists(Newhome)) {
		JB_Decr(Newhome);
		return nil;
	}
	(JB_Dict_ValueSet(SC__Comp_ExportNames, Self->ExportName, nil));
	(JB_Dict_ValueSet(SC__Comp_ExportNames, Newhome, Self));
	JB_SetRef(Self->ExportName, Newhome);
	JB_Decr(Newhome);
	return true;
}

SCDecl* SC_Base_RequireContained(SCNode* Self, Message* Errplace) {
	SCClass* Cls = nil;
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		Cls = ((SCFunction*)Self)->Cls;
		if (!Cls) {
			Cls = ((SCFunction*)Self)->ProtoType;
			if (!Cls) {
				SCModule* P = ((SCModule*)JB_Object_FastAs(((SCFunction*)Self)->Parent, &SCModuleData));
				if (P) {
					Cls = P->Cls;
				}
			}
		}
	}
	 else if (JB_Object_FastIsa(Self, &SCClassData)) {
		Cls = ((SCClass*)Self);
	}
	 else if (JB_Object_FastIsa(Self, &SCModuleData)) {
		Cls = ((SCModule*)Self)->Cls;
	}
	 else if (JB_Object_FastIsa(Self, &SCArgData)) {
		SCFunction* F = ((SCArg*)Self)->ParentFunc;
		if (F) {
			Cls = F->Cls;
		}
	}
	if (!(Cls and Cls->Contained)) {
		JB_Msg_Fail(Errplace, JB_LUB[1074]);
		return nil;
	}
	return Cls->Contained;
}

Message* SC_Base_Route(SCNode* Self, JB_String* Name) {
	Message* Rz = nil;
	Rz = JB_Syx_Msg(kJB_SyxDot, Name);
	Message* Curr = Rz;
	while (Self) {
		SCModule* Next = ((SCModule*)Self->Parent);
		if ((!Next) or ((Next == SC__Comp_program) or Next->IsImport)) {
			JB_Msg_AppendSyx(Curr, kJB_SyxThg, Self->Name);
			break;
		}
		Curr = JB_Msg_Msg(Curr, kJB_SyxDot, Self->Name);
		Self = Next;
	};
	return Rz;
}

void SC_Base_SetExportName(SCNode* Self, JB_String* S, bool Explicit) {
	JB_Incr(S);
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		if (((SCFunction*)Self)->IsMacro) {
			JB_Decr(S);
			return;
		}
	}
	JB_SetRef(S, SC_Str_UnicodeSafeName(S, nil));
	if (!((JB_Object_Isa(Self, &SCModuleData)) or (JB_Object_Isa(Self, &SCClassData)))) {
		JB_SetRef(S, SC_Base_TestExportName(Self, S, Explicit));
		if (!JB_Str_Exists(S)) {
			JB_Decr(S);
			return;
		}
		(JB_Dict_ValueSet(SC__Comp_ExportNames, S, Self));
	}
	((SC_SCObject_SyntaxIsSet(Self, kSC__SCNodeInfo_ExplicitExport, Explicit)));
	JB_SetRef(Self->ExportName, S);
	JB_Decr(S);
}

SCClass* SC_Base_ShouldBeClass(SCNode* Self, Message* Errplace) {
	SCClass* _tmPf0 = SC_Base_IsNormalObject(Self);
	JB_Incr(_tmPf0);
	if (!_tmPf0) {
		JB_Msg_Fail(Errplace, JB_LUB[841]);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* SC_Base_SourceArg(SCNode* Self) {
	Message* P = Self->Source;
	if (P) {
		if (JB_Msg_EqualsSyx(P, kJB_SyxArg, false)) {
			return P;
		}
		return JB_Msg_FindSyx(P, kJB_SyxArg);
	}
	return nil;
}

SCModule* SC_Base_SpaceModule(SCNode* Self, Message* Errplace) {
	if (JB_Object_FastIsa(Self, &SCModuleData)) {
		return ((SCModule*)Self);
	}
	if (JB_Object_FastIsa(Self, &SCClassData)) {
		return ((SCClass*)Self)->Modul;
	}
	if (true) {
		JB_Msg_Fail(Errplace, JB_LUB[842]);
	}
	return nil;
}

JB_String* SC_Base_SubProjName(SCNode* Self) {
	return SC__Comp_program->ExportName;
}

SCObject* SC_Base_SyntaxAccessWithMsg(SCNode* Self, Message* S) {
	SCObject* Rz = nil;
	Rz = SC_Base_SyntaxAccessWithStr(Self, S->Name);
	if (!Rz) {
		JB_Msg_Fail(S, JB_Str_OperatorPlus(JB_LUB[843], S->Name));
		return nil;
	}
	return Rz;
}

SCObject* SC_Base_SyntaxAccessWithStr(SCNode* Self, JB_String* S) {
	Dictionary* A = Self->Access;
	if (A) {
		return ((SCObject*)JB_Dict_ValueLower(A, S));
	}
	return nil;
}

JB_String* SC_Base_TestExportName(SCNode* Self, JB_String* S, bool Explicit) {
	SCNode* O = ((SCNode*)JB_Dict_Value0(SC__Comp_ExportNames, S));
	JB_Incr(O);
	if (!O) {
		JB_Decr(O);
		return S;
	}
	if (!Explicit) {
		if ((!SC_SCObject_SyntaxIs(O, kSC__SCNodeInfo_ExplicitExport))) {
			SC_Base_RehomeExport(O);
		}
		JB_String* It = SC_Base_UniquifyExport(Self, S);
		JB_Incr(It);
		if (JB_Str_Exists(It)) {
			JB_Decr(O);
			JB_SafeDecr(It);
			return It;
		}
		JB_Decr(It);
	}
	 else if (!SC_SCObject_SyntaxIs(O, kSC__SCNodeInfo_ExplicitExport)) {
		if (SC_Base_RehomeExport(O)) {
			JB_Decr(O);
			return S;
		}
	}
	JB_String* Err = JB_Str_OperatorPlus(JB_LUB[990], S);
	JB_Incr(Err);
	if (true) {
		JB_Msg_Fail(O->Source, Err);
	}
	JB_Decr(O);
	if (true) {
		JB_Msg_Fail(Self->Source, Err);
	}
	JB_Decr(Err);
	return JB_LUB[0];
}

void SC_Base_Tran_Const(SCNode* Self, SCDecl* D, SCNode* Base) {
	Message* Root = D->Default;
	JB_Incr(Root);
	MessagePosition Using = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Root, (&Using));
	{
		Message* Curr = Root;
		JB_Incr(Curr);
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Root));
		JB_Incr(_afterf1);
		while ((Curr) and (Curr != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Curr));
			JB_Incr(_N_f2);
			if (JB_Msg_EqualsSyx(Curr, kJB_SyxThg, false)) {
				if (!JB_FreeIfDead(SC_TypeOfExpr(Curr, Base, nil))) {
					JB_Decr(_N_f2);
					JB_Decr(_afterf1);
					JB_Decr(Curr);
					JB_MsgPos_Destructor((&Using));
					JB_Decr(Root);
					return;
				}
				SCObject* Actual = SC_Base_SyntaxAccessWithStr(Base, Curr->Name);
				JB_Incr(Actual);
				if (JB_Object_FastIsa(Actual, &SCDeclData)) {
					Message* BetterVersion = JB_Msg_Copy(((SCDecl*)Actual)->Default, Curr);
					JB_Incr(BetterVersion);
					JB_FreeIfDead(SC_Msg_ReplaceWith(Curr, BetterVersion));
					JB_Decr(BetterVersion);
				}
				 else {
					if (!((Curr->Obj == SC_TypeString->TypeNormal) or (((JB_Msg_SyntaxEquals(Curr, JB_LUB[31], true))) or ((JB_Msg_SyntaxEquals(Curr, JB_LUB[32], true)))))) {
						JB_Msg_Fail(Curr, JB_LUB[1237]);
						JB_Decr(Actual);
						JB_Decr(_N_f2);
						JB_Decr(_afterf1);
						JB_Decr(Curr);
						JB_MsgPos_Destructor((&Using));
						JB_Decr(Root);
						return;
					}
				}
				JB_Decr(Actual);
			}
			 else if (JB_Msg_EqualsSyx(Curr, kJB_SyxUnit, false)) {
				if (!JB_FreeIfDead(SC_TypeOfExpr(Curr, Base, nil))) {
					JB_Decr(_N_f2);
					JB_Decr(_afterf1);
					JB_Decr(Curr);
					JB_MsgPos_Destructor((&Using));
					JB_Decr(Root);
					return;
				}
			}
			 else if (((JB_Msg_EqualsSyx(Curr, kJB_SyxStr, false))) or (((JB_Msg_EqualsSyx(Curr, kJB_SyxNum, false))) and (!(JB_Msg_OperatorIn(Curr, kJB_SyxUnit))))) {
				if (!JB_FreeIfDead(SC_TypeOfExpr(Curr, Base, nil))) {
					JB_Decr(_N_f2);
					JB_Decr(_afterf1);
					JB_Decr(Curr);
					JB_MsgPos_Destructor((&Using));
					JB_Decr(Root);
					return;
				}
			}
			JB_SetRef(Curr, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(Curr);
		JB_Decr(_afterf1);
		;
	}
	;
	JB_Decr(Root);
	JB_MsgPos_Destructor((&Using));
}

void SC_Base_TryAdd(SCNode* Self, Message* ErrPlace, SCObject* IncObj, JB_String* Name) {
	JB_Incr(Self);
	if (!IncObj) {
		JB_Decr(Self);
		return;
	}
	if (!JB_int_OperatorInRange(JB_Str_Length(Name), 64)) {
		JB_Msg_Fail(ErrPlace, JB_LUB[1075]);
		JB_Decr(Self);
		return;
	}
	if (JB_Object_FastIsa(Self, &SCClassData)) {
		JB_Class* Scls = JB_ObjClass(IncObj);
		if ((Scls == &SCClassData) or (Scls == &SCModuleData)) {
			JB_SetRef(Self, ((SCClass*)((SCClass*)Self)->Modul));
		}
	}
	if (!Self->Access) {
		JB_SetRef(Self->Access, JB_Dict_Constructor(nil));
	}
	JB_String* _tmPf0 = JB_Str_LowerCase(Name);
	JB_Incr(_tmPf0);
	SC_Base_TryAddSub(Self, ErrPlace, IncObj, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Decr(Self);
}

void SC_Base_TryAddBase(SCNode* Self, Message* C, SCNode* Neu) {
	SC_Base_TryAdd(Self, C, Neu, Neu->Name);
}

void SC_Base_TryAddSub(SCNode* Self, Message* ErrPlace, SCObject* IncObj, JB_String* Name) {
	SCObject* Old = SC_Base_UpCheck(Self, Name, (!(JB_Object_Isa(IncObj, &SCFunctionData))));
	if ((!Old)) {
		(JB_Dict_ValueSet(Self->Access, Name, IncObj));
		return;
	}
	if (Old == IncObj) {
		return;
	}
	if (JB_Object_FastIsa(Old, &SCFunctionData)) {
		if (JB_Object_FastIsa(IncObj, &SCFunctionData)) {
			if ((((SCFunction*)Old)->Cls == ((SCFunction*)IncObj)->Cls) or SC_Func_IsConstructorOnModule(((SCFunction*)IncObj), ((SCFunction*)Old))) {
				JB_SetRef(SC_Func_Last(((SCFunction*)Old))->NextFunc, IncObj);
				return;
			}
		}
		 else if (JB_Object_FastIsa(IncObj, &SCDeclData)) {
			if (SC_Func_SyntaxIs(((SCFunction*)Old), kSC__FunctionType_HidesProperties)) {
				if ((((SCDecl*)IncObj)->HiderFunc)) {
					JB_Msg_Fail(ErrPlace, JB_LUB[991]);
					return;
				}
				((SCDecl*)IncObj)->HiderFunc = ((SCFunction*)Old);
				(JB_Dict_ValueSet(Self->Access, Name, ((SCDecl*)IncObj)));
				return;
			}
		}
	}
	if (((JB_Str_Equals(Name, JB_LUB[180], false))) and SC_Func__InType(kSC__SCNodeType_Object)) {
		if (true) {
			JB_Msg_Fail(ErrPlace, JB_LUB[992]);
		}
	}
	 else {
		SC_SCObject_NameConflict(IncObj, Old, Name);
	}
}

JB_String* SC_Base_UniquifyExport(SCNode* Self, JB_String* S) {
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		JB_String* S2 = SC_Func_ParamUniquer(((SCFunction*)Self), S);
		JB_Incr(S2);
		if (!JB_FreeIfDead(((SCNode*)JB_Dict_Value0(SC__Comp_ExportNames, S2)))) {
			JB_SafeDecr(S2);
			return S2;
		}
		JB_Decr(S2);
	}
	int U = SC__SC_UniqueNum++;
	JB_String* _tmPf0 = JB_int_RenderFS(U, nil);
	JB_Incr(_tmPf0);
	JB_String* S3 = JB_Str_OperatorPlus(S, _tmPf0);
	JB_Incr(S3);
	JB_Decr(_tmPf0);
	if (!JB_FreeIfDead(((SCNode*)JB_Dict_Value0(SC__Comp_ExportNames, S3)))) {
		JB_SafeDecr(S3);
		return S3;
	}
	JB_Decr(S3);
	return JB_LUB[0];
}

SCObject* SC_Base_UpCheck(SCNode* Self, JB_String* Name, bool LookUp) {
	if (LookUp and (JB_Object_FastIsa(Self, &SCClassData))) {
		{
			SCClass* C = ((SCClass*)Self);
			while (C) {
				SCObject* It = SC_Base_SyntaxAccessWithStr(C, Name);
				if (It) {
					return It;
				}
				C = C->Super;
			};
		};
	}
	if (!JB_Object_Isa(Self, &SCArgData)) {
		return SC_Base_SyntaxAccessWithStr(Self, Name);
	}
	SCNode* Curr = Self;
	while (JB_Object_FastIsa(Curr, &SCArgData)) {
		SCObject* Found = SC_Base_SyntaxAccessWithStr(((SCArg*)Curr), Name);
		if (Found) {
			return Found;
		}
		if (!LookUp) {
			return nil;
		}
		Curr = ((SCArg*)((SCArg*)Curr)->Parent);
	};
	return nil;
}

SCNode* SC_Base_UpClass(SCNode* Self, Message* F) {
	SCNode* Rz = nil;
	Rz = Self->Parent;
	if ((JB_Msg_EqualsSyx(F, kJB_SyxDot, false)) and JB_Object_FastIsa(Rz, &SCModuleData)) {
		if (((SCModule*)Rz)->IsImport) {
			return nil;
		}
	}
	return Rz;
}

void SC_Base_Use(SCNode* Self) {
	Message* S = Self->Source;
	if (S) {
		JB_Mem_Use(JB_ObjLayer(S));
	}
	SC_Imp_Use(Self->Project);
}

int SC_Base__Init_() {
	{
		SC__Base_CurrVisibility = true;
	}
	;
	return 0;
}

SCNode* SC_Base__LoadCppPart(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (!((JB_Object_Isa(Name_space, &SCClassData)) or (JB_Object_Isa(Name_space, &SCModuleData)))) {
		return nil;
	}
	if (Name_space == SC__Comp_program) {
		SCFile* File = SC_Msg_File(Node);
		if (File) {
			Message* _tmPf0 = JB_Msg_NeedSyx(Node, kJB_SyxThg);
			if (!_tmPf0) {
				return nil;
			}
			JB_SetRef(File->ExportName, _tmPf0->Name);
		}
		JB_Tree_Remove(Node);
	}
	return SC__Comp_program;
}


void JB_sci_Clear(SaverClassInfo* Self) {
	if (!JB_Array_SyntaxCast(Self)) {
		return;
	}
	{
		int _if0 = 0;
		while (true) {
			Saveable* Obj = ((Saveable*)JB_Array_Value(Self, _if0));
			if (Obj == nil) {
				break;
			}
			JB_Sav_SaveUnMark(Obj);
			(++_if0);
		};
	}
	;
	JB_Array_Clear(Self);
}

SaverClassInfo* JB_sci_Constructor(SaverClassInfo* Self, JB_Class* Cls, int8* Data) {
	if (Self == nil) {
		Self = ((SaverClassInfo*)JB_NewClass(&SaverClassInfoData));
	}
	JB_Array_Constructor0(Self);
	Self->NextInfo = nil;
	Self->Cls = Cls;
	Self->Data = Data;
	return Self;
}

void JB_sci_Destructor(SaverClassInfo* Self) {
	JB_Clear(Self->NextInfo);
	JB_Array_Destructor(Self);
}

bool JB_sci_HasData(SaverClassInfo* Self) {
	return ((bool)Self->Data[0]);
}

void JB_sci_Output(SaverClassInfo* Self, ObjectSaver* Saver) {
	FastString* D = Saver->Dest;
	if (!(D and JB_Array_SyntaxCast(Self))) {
		return;
	}
	JB_FS_AppendByte(D, '\n');
	JB_FS_AppendString(D, JB_Str_LowerCase(JB_Str__Wrap(Self->Cls->Name)));
	JB_FS_AppendByte(D, ' ');
	if (JB_sci_HasData(Self)) {
		JB_FS_AppendByte(D, '(');
		JB_FS_AppendCString(D, ((_cstring)Self->Data));
		JB_FS_AppendByte(D, ')');
		JB_FS_AppendByte(D, ' ');
	}
	JB_FS_AppendString(D, JB_LUB[158]);
	{
		int _if0 = 0;
		while (true) {
			Saveable* Obj = ((Saveable*)JB_Array_Value(Self, _if0));
			if (Obj == nil) {
				break;
			}
			JB_FS_AppendByte(D, '\t');
			JB_FS_AppendObjectID(D, Obj);
			JB_FS_AppendByte(D, ':');
			JB_FS_AppendByte(D, '(');
			JB_Sav___SaveWrite__(Obj, Saver);
			JB_FS_RemoveByte(D, ',');
			JB_FS_AppendByte(D, ')');
			JB_FS_AppendByte(D, '\n');
			(++_if0);
		};
	}
	;
	JB_FS_AppendByte(D, ')');
	JB_FS_AppendByte(D, '\n');
}



bool JB_Proc_Alive(SpdProcess* Self) {
	if (Self != nil) {
		return ((bool)JB_Ternary(Self->WeAreParent, JB_Proc_ChildAlive(Self), ((bool)JB_Proc_ParentAlive(Self))));
	}
	return false;
}

bool JB_Proc_ChildAlive(SpdProcess* Self) {
	if (((SpdProcess_ThreadAsProcess)(Self->SubProcess))) {
		return JB_Proc_CommsOpen(Self);
	}
	if (JB_ExitCode_IsRunning(JB_PID_Status(Self))) {
		return true;
	}
	return false;
}

bool JB_Proc_CommsOpen(SpdProcess* Self) {
	if (Self) {
		return PicoError(Self->Pico) == 0;
	}
	return false;
}

SpdProcess* JB_Proc_Constructor(SpdProcess* Self, JB_String* Path, SpdProcess_ThreadAsProcess Fn, PicoComms* Pico, Array* Params, uint /*ProcessMode*/ Mode) {
	if (Self == nil) {
		Self = ((SpdProcess*)JB_NewClass(&SpdProcessData));
	}
	JB_Sh_Constructor(Self, Path);
	Self->DiedCount = 0;
	Self->AlreadyWarnedDied = false;
	Self->DeathLimit = 12;
	JB_Incr2(Self->DebugName, JB_Str_CastZero(Path));
	Self->WeAreParent = ((!JB_Str_Equals(Path, JB_LUB[0], false)) or (Fn != nil));
	JB_Incr2(Self->Args, Params);
	Self->SubProcess = Fn;
	Self->Mode = Mode;
	JB_Incr2(Self->Output, ((FastString*)JB_Ternary(JB_ProcessMode_SyntaxIs(Self->Mode, kJB__ProcessMode_CaptureStdOut), JB_FS_Constructor(nil), nil)));
	JB_Incr2(Self->ErrorOutput, ((FastString*)JB_Ternary(JB_ProcessMode_SyntaxIs(Self->Mode, kJB__ProcessMode_CaptureOrPrintErrors), JB_FS_Constructor(nil), nil)));
	JB_Incr2(Self->Writer, JB_FS_Constructor(nil));
	Self->Pico = Pico;
	return Self;
}

void JB_Proc_Destructor(SpdProcess* Self) {
	PicoDestroy((&Self->Pico), JB_Str_SyntaxCast(JB_LUB[141]));
	JB_Clear(Self->DebugName);
	JB_Clear(Self->Writer);
	JB_Sh_Destructor(Self);
}

void JB_Proc_Disconnect(SpdProcess* Self, JB_StringC* Why) {
	JB_Sh_UpdatePipes(Self);
	JB_PID_UnRegister(Self);
	JB_Sh_ClosePipes(Self);
	if (JB_Proc_Alive(Self) and ((!JB_Str_Exists(Why)) and JB_Proc_CommsOpen(Self))) {
		Why = JB_LUB[510];
	}
	PicoClose(Self->Pico, JB_Str_SyntaxCast(Why));
}

Message* JB_Proc_Get(SpdProcess* Self, float T) {
	Message* Rz = nil;
	if (Self) {
		JB_Sh_UpdatePipes(Self);
		JB_String* Str = JB_Pico_Get(Self->Pico, T);
		if (JB_Str_Exists(Str)) {
			Rz = JB_Str_Parse(Str, kJB_SyxArg, true);
		}
	}
	return Rz;
}

bool JB_Proc_IsOpen(SpdProcess* Self) {
	if (!JB_Proc_CommsOpen(Self)) {
		return nil;
	}
	if (Self->WeAreParent) {
		return ((SpdProcess_ThreadAsProcess)(Self->SubProcess)) or JB_ExitCode_IsRunning(JB_PID_Status(Self));
	}
	return JB_App__ParentID() > 1;
}

bool JB_Proc_ParentAlive(SpdProcess* Self) {
	if (JB_App__ParentID() > 1) {
		return true;
	}
	return false;
}

bool JB_Proc_Send(SpdProcess* Self, Message* Msg) {
	PicoComms* P = Self->Pico;
	if (JB_ErrorInt_SyntaxCast(PicoError(P))) {
		JB_FreeIfDead(JB_Msg_RenderJbin(Msg, JB_LUB[0], Self->Writer));
		JB_Pico_SendFS(P, Self->Writer, false);
		JB_Sh_UpdatePipes(Self);
	}
	return false;
}

int JB_Proc__Init_() {
	{
	}
	;
	return 0;
}


JB_Task* JB_Task_Constructor(JB_Task* Self, uint Obj, void* Func) {
	if (Self == nil) {
		Self = ((JB_Task*)JB_NewClass(&JB_TaskData));
	}
	JB_Ring_Constructor0(Self);
	Self->_State = 0;
	Self->_Object = Obj;
	Self->_func = Func;
	return Self;
}

void JB_Task_Destructor(JB_Task* Self) {
	//visible;
	JB_Object** Curr = ((JB_Object**)Self);
	int O = Self->_Object;
	while (O) {
		int I = JB_int_LowestBit(O);
		O = (O & (~I));
		I = JB_Int_Log2(((int)I));
		JB_Decr(Curr[I]);
	};
	JB_Ring_Destructor(Self);
}

LessThan3* JB_Task_LessThan3_Constructor(LessThan3* Self, JB_String* A, int B, JB_String* C) {
	if (Self == nil) {
		Self = ((LessThan3*)JB_Task_Constructor(nil, 1280, ((void*)(&JB_Task_LessThan3_run))));
	}
	JB_Incr2(Self->a, A);
	Self->b = B;
	JB_Incr2(Self->c, C);
	//task;
	return Self;
}

void JB_Task_SyntaxIsSet(JB_Task* Self, uint /*TaskState*/ S, bool Value) {
	if (Value) {
		Self->_State = (Self->_State | S);
	}
	 else {
		Self->_State = (Self->_State & (~S));
	}
}

Task2* JB_Task_Task2_Constructor(Task2* Self, JB_String* A, int B, JB_String* C, vec2 V, float Strength) {
	if (Self == nil) {
		Self = ((Task2*)JB_Task_Constructor(nil, 1280, ((void*)(&JB_Task_Task2_run))));
	}
	JB_Task_LessThan3_Constructor(Self, A, B, C);
	Self->V = V;
	Self->Strength = Strength;
	(JB_Task_SyntaxIsSet(Self, kJB__TaskState_Animation, true));
	return Self;
}


JB_Error* JB_Err_Constructor(JB_Error* Self, Message* Node, JB_String* Desc, uint /*ErrorSeverity*/ Level, JB_String* Path) {
	if (Self == nil) {
		Self = ((JB_Error*)JB_NewClass(&JB_ErrorData));
	}
	//visible;
	JB_Msg_ConstructorEmpty(Self);
	JB_Incr2(Self->OriginalData, JB_LUB[0]);
	JB_Incr2(Self->StackTrace, JB_LUB[0]);
	Self->ErrorFlags = 0;
	Self->Position = -1;
	JB_Incr2(Self->Node, Node);
	Self->Severity = Level;
	Self->Progress = JB__Rec_Progress;
	JB_Incr2(Self->Name, Desc);
	JB_Incr2(Self->Path, Path);
	Self->When = JB_Date__Now();
	Self->Func = kJB_SyxSStr;
	JB_Err_UpgradeWithNode(Self);
	return Self;
}

JB_Error* JB_Err_ConstructorNothing(JB_Error* Self) {
	if (Self == nil) {
		Self = ((JB_Error*)JB_NewClass(&JB_ErrorData));
	}
	JB_Msg_ConstructorEmpty(Self);
	JB_Incr2(Self->OriginalData, JB_LUB[0]);
	JB_Incr2(Self->Path, JB_LUB[0]);
	Self->Node = nil;
	Self->Progress = 0.0f;
	JB_Incr2(Self->StackTrace, JB_LUB[0]);
	Self->ErrorFlags = 0;
	Self->Position = -1;
	Self->Severity = kJB__ErrorSeverity_OK;
	Self->When = JB_Date__Now();
	Self->Func = kJB_SyxArg;
	return Self;
}

void JB_Err_Destructor(JB_Error* Self) {
	JB_Clear(Self->OriginalData);
	JB_Clear(Self->Path);
	JB_Clear(Self->Node);
	JB_Clear(Self->StackTrace);
	JB_Msg_Destructor(Self);
}

void JB_Err_Fill(JB_Error* Self, JB_String* Path, JB_String* Desc) {
	//visible;
	JB_SetRef(Self->Path, Path);
	((JB_Err_SyntaxIsSet(Self, kJB__ErrorFlags_PreferNoRenderPath, JB_Str_ContainsString(Desc, Path))));
	JB_SetRef(Self->Name, Desc);
}

bool SC_Err_FromSamePlace(JB_Error* Self, Message* S) {
	if (Self) {
		if (S->Position == Self->Position) {
			if (JB_Str_Equals(Self->Path, ((JB_String*)SC_Msg_File(S)), false)) {
				return true;
			}
		}
	}
	return false;
}

void JB_Err_GrabLine(JB_Error* Self, FastString* Fs, bool Usecolor) {
	if (Usecolor) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_normal);
	}
	JB_String* D = Self->OriginalData;
	JB_Incr(D);
	if (!(JB_Str_Exists(D) and JB_Err_HasPosition(Self))) {
		JB_Decr(D);
		return;
	}
	JB_FS_AppendByte(Fs, '\n');
	Ind Start = JB_Str_Find(D, JB__Constants_CSLine, Self->Position, 0) + 1;
	Ind Finish = JB_Str_Find(D, JB__Constants_CSLine, (Self->Position), JB_int__Max());
	if (Finish == -1) {
		Finish = (JB_Str_Length(D) + 1);
	}
	JB_String* _tmPf1 = JB_Str_Range(D, Start, Finish);
	JB_Incr(_tmPf1);
	JB_Decr(D);
	JB_String* _tmPf0 = JB_Str_ReplaceAll(_tmPf1, JB_LUB[128], JB_LUB[27], false, nil);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	Ind Spaces = (Self->Position - Start);
	if (Spaces > 200) {
		Spaces = 0;
	}
	JB_FS_AppendByte(Fs, '\n');
	if (Usecolor) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_underline);
	}
	JB_FS_AppendMultiByte(Fs, ' ', Spaces);
	JB_FS_AppendByte(Fs, '^');
}

bool JB_Err_HasPosition(JB_Error* Self) {
	return Self->Position >= 0;
}

void SC_Err_Improve(JB_Error* Self) {
	Message* Node = SC_FindBytePos(Self->Node);
	if (!Node) {
		return;
	}
	if (!JB_Err_HasPosition(Self)) {
		Self->Position = Node->Position;
	}
	if (!JB_Str_Exists(Self->Path)) {
		SCFile* SC = SC_Msg_File(Node);
		if (!SC) {
			return;
		}
		if (!JB_File_SyntaxEquals(SC, SC_Msg_File(Self->Node), false)) {
			JB_SetRef(Self->Node, Node);
		}
		if (JB_File_Exists(SC)) {
			JB_SetRef(Self->Path, JB_File_Path(SC));
		}
	}
}

bool JB_Err_IsBad(JB_Error* Self) {
	return (Self->Severity >= kJB__ErrorSeverity_Problem);
}

bool JB_Err_IsError(JB_Error* Self) {
	return (Self->Severity >= kJB__ErrorSeverity_Error);
}

bool JB_Err_IsWarning(JB_Error* Self) {
	return (Self->Severity <= kJB__ErrorSeverity_Warning);
}

bool JB_Err_LineIdentifiers(JB_Error* Self, FastString* Fs, JB_String* Path) {
	if (!JB_Err_HasPosition(Self)) {
		return nil;
	}
	JB_String* D = Self->OriginalData;
	JB_Incr(D);
	if (!JB_Str_Exists(D)) {
		JB_Decr(D);
		return nil;
	}
	if (!JB_Str_Exists(Path)) {
		JB_FS_AppendString(Fs, JB_LUB[481]);
	}
	JB_FS_AppendInt32(Fs, JB_Err_LinePos(Self, D));
	JB_FS_AppendByte(Fs, ':');
	Ind Start = JB_Str_Find(D, JB__Constants_CSLine, Self->Position, 0);
	JB_Decr(D);
	JB_FS_AppendInt32(Fs, Self->Position - Start);
	JB_FS_AppendByte(Fs, ':');
	return true;
}

int JB_Err_LinePos(JB_Error* Self, JB_String* Data) {
	if (JB_Err_HasPosition(Self)) {
		JB_String* _tmPf0 = JB_Str_Range(Data, 0, Self->Position);
		JB_Incr(_tmPf0);
		int _tmPf1 = JB_Str_LineCount(_tmPf0);
		JB_Decr(_tmPf0);
		return _tmPf1;
	}
	return 0;
}

JB_String* JB_Err_Render(JB_Error* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, JB_LUB[248]);
	(++Fs->Indent);
	JB_FS_AppendInfo(Fs, JB_LUB[0], Self->Name);
	if (Self->Position >= 0) {
		JB_FS_AppendInfoNum(Fs, JB_LUB[482], Self->Position);
	}
	JB_FS_AppendInfo(Fs, JB_LUB[483], Self->Path);
	JB_FS_AppendInfoNum(Fs, JB_LUB[484], Self->Severity);
	if (Self->Progress) {
		JB_FS_AppendInfoFloat(Fs, JB_LUB[485], Self->Progress);
	}
	if (JB_Str_Exists(Self->StackTrace)) {
		JB_FS_AppendInfo(Fs, JB_LUB[486], JB_LUB[0]);
		(++Fs->Indent);
		{
			JB_String* _LoopSrcf2 = Self->StackTrace;
			JB_Incr(_LoopSrcf2);
			int _Prevf0 = 0;
			while (((JB_String*)JB_Str_Exists((_LoopSrcf2)))) {
				Ind _Curr_f1 = JB_Str_Find(_LoopSrcf2, JB__Constants_CSLine, _Prevf0, JB_int__Max());
				JB_String* Fn = JB_Str_Range(_LoopSrcf2, _Prevf0, _Curr_f1);
				JB_Incr(Fn);
				JB_FS_AppendInfo(Fs, JB_LUB[487], Fn);
				JB_Decr(Fn);
				_Prevf0 = (_Curr_f1 + 1);
				if (!JB_Ind_SyntaxCast(_Curr_f1)) {
					break;
				}
			};
			JB_Decr(_LoopSrcf2);
		}
		;
		(--Fs->Indent);
	}
	JB_FS_AppendByte(Fs, '\n');
	(--Fs->Indent);
	JB_String* _tmPf4 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf4);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_String* SC_Err_Render_Unix(JB_Error* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	if (SC_Options__Color()) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_bold);
	}
	Message* Node = Self->Node;
	JB_Incr(Node);
	JB_String* Data = SC_Err_SCOriginalData(Self);
	JB_Incr(Data);
	if (JB_Str_Exists(Data)) {
		JB_String* P = SC_Err_SCOriginalPath(Self);
		JB_Incr(P);
		if (!JB_Str_Exists(P)) {
			JB_SetRef(P, JB_LUB[724]);
		}
		JB_FS_AppendString(Fs, P);
		JB_Decr(P);
		JB_FS_AppendByte(Fs, ':');
		SC_Err_SCLineIdentifiers(Self, Fs, Data);
	}
	 else if (Node) {
		JB_FreeIfDead(JB_Msg_Render(Node, Fs));
		SCFunction* Fn = SC_Msg_MsgOwningFunc(Node);
		JB_Incr(Fn);
		if (Fn) {
			JB_FS_AppendString(Fs, JB_LUB[725]);
			JB_FreeIfDead(SC_Func_Render(Fn, Fs));
		}
		JB_Decr(Fn);
	}
	JB_Decr(Node);
	JB_Decr(Data);
	JB_FS_AppendByte(Fs, ' ');
	if (SC_Options__Color()) {
		if (JB_Err_IsWarning(Self)) {
			JB_FS_AppendString(Fs, kJB__ErrorColors_warn);
		}
		 else {
			JB_FS_AppendString(Fs, kJB__ErrorColors_error);
		}
	}
	if (JB_ErrorSeverity_SyntaxIs(Self->Severity, kJB__ErrorSeverity_Problem)) {
		JB_FS_AppendString(Fs, JB_LUB[726]);
	}
	 else {
		JB_FreeIfDead(JB_ErrorSeverity_Render(Self->Severity, Fs));
	}
	JB_FS_AppendString(Fs, JB_LUB[77]);
	if (SC_Options__Color()) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_bold);
	}
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendByte(Fs, '\n');
	SC_Err_SCGrabLine(Self, Fs, SC_Options__Color());
	JB_FS_AppendByte(Fs, '\n');
	if (SC_Options__Color()) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_normal);
	}
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Err_RenderUnix(JB_Error* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	int M = JB_FS_Mark(Fs);
	JB_String* P = Self->Path;
	JB_Incr(P);
	if (((!JB_Err_SyntaxIs(Self, kJB__ErrorFlags_PreferNoRenderPath))) and JB_Str_Exists(P)) {
		JB_FS_AppendString(Fs, Self->Path);
		JB_FS_AppendByte(Fs, ':');
	}
	if ((!JB_Err_LineIdentifiers(Self, Fs, P)) and Self->Node) {
		JB_FreeIfDead(JB_Msg_Render(Self->Node, Fs));
	}
	JB_Decr(P);
	if (JB_FS_Mark(Fs) > M) {
		JB_FS_AppendByte(Fs, ' ');
	}
	JB_FreeIfDead(JB_ErrorSeverity_Render(Self->Severity, Fs));
	JB_FS_AppendString(Fs, JB_LUB[77]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_Err_GrabLine(Self, Fs, false);
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Err_SCGrabLine(JB_Error* Self, FastString* Fs, bool Usecolor) {
	if (Usecolor) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_normal);
	}
	JB_String* D = SC_Err_SCOriginalData(Self);
	JB_Incr(D);
	if (!JB_Str_Exists(D)) {
		JB_Decr(D);
		return;
	}
	if (!JB_Err_HasPosition(Self)) {
		JB_Decr(D);
		return;
	}
	Ind Start = JB_Str_Find(D, JB__Constants_CSLine, Self->Position, 0) + 1;
	Ind Finish = JB_Str_Find(D, JB__Constants_CSLine, (Self->Position), JB_int__Max());
	if (Finish == -1) {
		Finish = (JB_Str_Length(D) + 1);
	}
	JB_String* Line = JB_Str_Range(D, Start, Finish);
	JB_Incr(Line);
	JB_Decr(D);
	JB_SetRef(Line, JB_Str_ReplaceAll(Line, JB_LUB[128], JB_LUB[27], false, nil));
	JB_FS_AppendString(Fs, Line);
	JB_Decr(Line);
	Ind Spaces = (Self->Position - Start);
	JB_FS_AppendByte(Fs, '\n');
	if (Usecolor) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_underline);
	}
	JB_FS_AppendMultiByte(Fs, ' ', JB_int_OperatorMin(Spaces, 100));
	JB_FS_AppendByte(Fs, '^');
}

int SC_Err_SCLineCount(JB_Error* Self) {
	JB_String* F = SC_Err_SCOriginalData(Self);
	JB_Incr(F);
	if (!JB_Str_Exists(F)) {
		JB_Decr(F);
		return 0;
	}
	int _tmPf0 = JB_Err_LinePos(Self, F);
	JB_Decr(F);
	return _tmPf0;
}

void SC_Err_SCLineIdentifiers(JB_Error* Self, FastString* Fs, JB_String* Data) {
	if ((!JB_Err_HasPosition(Self))) {
		SCFunction* Fn = SC_Msg_MsgOwningFunc(Self->Node);
		JB_Incr(Fn);
		if (!Fn) {
			JB_Decr(Fn);
			return;
		}
		JB_FS_AppendString(Fs, Fn->ExportName);
		JB_Decr(Fn);
	}
	 else {
		int _tmPf0 = SC_Err_SCLineCount(Self);
		if (!_tmPf0) {
			return;
		}
		JB_FS_AppendInt32(Fs, (_tmPf0));
		JB_FS_AppendByte(Fs, ':');
		Ind Start = JB_Str_Find(Data, JB__Constants_CSLine, Self->Position, 0);
		JB_FS_AppendInt32(Fs, Self->Position - Start);
		JB_FS_AppendByte(Fs, ':');
	}
}

JB_String* SC_Err_SCOriginalData(JB_Error* Self) {
	JB_String* P = SC_Err_SCOriginalPath(Self);
	JB_Incr(P);
	if (JB_Str_Exists(P)) {
		JB_File* F = JB_Str_AsFile(P);
		JB_Incr(F);
		if (JB_File_Exists(F) and (!JB_File_IsDir(F))) {
			JB_String* _tmPf0 = JB_File_ReadAll(F, 134217728, true);
			JB_Incr(_tmPf0);
			JB_Decr(F);
			JB_Decr(P);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(F);
	}
	JB_Decr(P);
	return Self->OriginalData;
}

JB_String* SC_Err_SCOriginalPath(JB_Error* Self) {
	JB_String* Str = SC_Msg_File(Self->Node);
	JB_Incr(Str);
	if (!JB_Str_Exists(Str)) {
		JB_SetRef(Str, Self->Path);
	}
	JB_SafeDecr(Str);
	return Str;
}

JB_String* SC_Err_SCRender(JB_Error* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	if (!JB_Str_Exists(Self->Path)) {
		JB_SetRef(Self->Path, SC_Err_SCOriginalPath(Self));
	}
	if (!JB_Str_Exists(Self->Path)) {
		JB_SetRef(Self->Path, JB_LUB[724]);
	}
	if (SC__Options_PerryOutput) {
		JB_FreeIfDead(JB_Err_Render(Self, Fs));
	}
	 else {
		JB_FreeIfDead(SC_Err_Render_Unix(Self, Fs));
	}
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_Err_ShiftPosition(JB_Error* Self, int I) {
	Self->Position = (Self->Position + I);
	Message* Node = Self->Node;
	if (Node) {
		Node->Position = (Node->Position + I);
	}
}

bool JB_Err_SyntaxIs(JB_Error* Self, uint /*ErrorFlags*/ F) {
	return Self and (Self->ErrorFlags & F);
}

void JB_Err_SyntaxIsSet(JB_Error* Self, uint /*ErrorFlags*/ F, bool Value) {
	if (Value) {
		Self->ErrorFlags = (Self->ErrorFlags | F);
	}
	 else {
		Self->ErrorFlags = (Self->ErrorFlags & (~F));
	}
}

void JB_Err_UpgradeWithNode(JB_Error* Self) {
	Message* Node = Self->Node;
	if (!Node) {
		Node = ((Message*)JB_Array_Last(JB__Err_CurrSource_));
		if (!Node) {
			return;
		}
		JB_SetRef(Self->Node, Node);
	}
	Self->Position = Node->Position;
	if (!JB_Str_Exists(Self->Path)) {
		JB_SetRef(Self->Path, JB_Msg_FilePath(Node));
	}
	JB_SetRef(Self->OriginalData, JB_Msg_OriginalParseData(Node));
}

void JB_Err__CantParseNum(Message* Where, JB_String* Num, int Pos, bool Overflow) {
	//visible;
	JB_String* Str = JB_LUB[590];
	JB_Incr(Str);
	if (!Overflow) {
		JB_String* _tmPf0 = JB_byte_Render(JB_Str_ByteValue(Num, Pos), nil);
		JB_Incr(_tmPf0);
		JB_SetRef(Str, JB_Str_OperatorPlus(JB_LUB[591], _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_Error* _tmPf1 = JB_Err_Constructor(nil, Where, Str, kJB__ErrorSeverity_Error, JB_LUB[0]);
	JB_Incr(_tmPf1);
	JB_Decr(Str);
	JB_Rec_AppendErr(((JB_ErrorReceiver*)nil), _tmPf1);
	JB_Decr(_tmPf1);
}

int JB_Err__Init_() {
	{
		JB_SetRef(JB__Err_CurrSource_, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

void JB_Err__SourceAdd(Message* M) {
	JB_Array_SyntaxAppend(JB__Err_CurrSource_, M);
}

void JB_Err__SourceRemove() {
	JB_FreeIfDead(((Message*)JB_Array_Pop(JB__Err_CurrSource_)));
}




SCArg* SC_Arg_Constructor(SCArg* Self, Message* Node) {
	if (Self == nil) {
		Self = ((SCArg*)JB_NewClass(&SCArgData));
	}
	SC_Base_ConstructorMsg(Self, Node);
	Self->ParentFunc = nil;
	Self->TmpMovedOutFor = nil;
	Self->IsStatementExpr = false;
	Self->IsClassArg = false;
	return Self;
}

void SC_Arg_Destructor(SCArg* Self) {
	JB_Clear(Self->ParentFunc);
	JB_Clear(Self->TmpMovedOutFor);
	SC_Base_Destructor(Self);
}

JB_String* SC_Arg_Render(SCArg* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, JB_LUB[434]);
	JB_FS_SyntaxAppend(Fs, Self->Source);
	JB_FS_AppendString(Fs, JB_LUB[293]);
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}


void SC_Beh_Add(SCBehaviour* Self, SCNode* Fn) {
	if (Fn) {
		SC_Base_TryAdd(Self, Fn->Source, Fn, Fn->Name);
	}
}

SCClass* SC_Beh_Cls(SCBehaviour* Self) {
	return ((SCClass*)Self->Parent);
}

SCBehaviour* SC_Beh_Constructor(SCBehaviour* Self, SCClass* Parent) {
	if (Self == nil) {
		Self = ((SCBehaviour*)JB_NewClass(&SCBehaviourData));
	}
	SC_Base_Constructor0(Self);
	JB_Incr2(Self->WrapperFuncs, JB_Array_Constructor0(nil));
	Self->FuncTable = nil;
	Self->Project = Parent->Project;
	Self->Parent = Parent;
	JB_Incr2(Self->Interfaces, JB_Dict_Constructor(nil));
	return Self;
}

void SC_Beh_CreateFuncTable(SCBehaviour* Self, Message* ErrPlace) {
	if (Self->FuncTable) {
		JB_Object_Fail(nil);
		return;
	}
	SCClass* _tmPf1 = SC_Beh_Cls(Self);
	JB_Incr(_tmPf1);
	JB_String* Name = SC_Class_BehaviourName(_tmPf1);
	JB_Incr(Name);
	JB_Decr(_tmPf1);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(ErrPlace, (&_usingf0));
	Message* Msg = JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[37]);
	JB_Incr(Msg);
	JB_Msg_AppendSyx(Msg, kJB_SyxThg, Name);
	JB_Decr(Name);
	JB_Msg_AppendSyx(Msg, kJB_SyxArg, JB_LUB[0]);
	SC_Imp_Use(Self->Project);
	SCModule* F = ((SCModule*)SC_Class__NewStruct(Msg, SC__Comp_program, ErrPlace));
	JB_Incr(F);
	JB_Decr(Msg);
	if (F) {
		F->Cls->Behaviourness = kSC__Beh_kBehaviourTable;
		SCClass* _tmPf2 = SC_Beh_Cls(Self);
		JB_Incr(_tmPf2);
		F->Cls->IsRole = _tmPf2->IsRole;
		JB_Decr(_tmPf2);
		SC_Base_TryAddBase(SC__Comp_program, ErrPlace, F);
		JB_SetRef(Self->FuncTable, F);
		SC_Imp__NoProj();
	}
	JB_Decr(F);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), ErrPlace);
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Beh_Destructor(SCBehaviour* Self) {
	JB_Clear(Self->WrapperFuncs);
	JB_Clear(Self->Interfaces);
	JB_Clear(Self->FuncTable);
	SC_Base_Destructor(Self);
}

SCBehaviour* SC_Beh_Upwards(SCBehaviour* Self) {
	SCClass* Curr = SC_Beh_Cls(Self);
	while (Curr) {
		Curr = Curr->Super;
		if (!Curr) {
			return nil;
		}
		SCBehaviour* B = Curr->Behaviour;
		if (B) {
			return B;
		}
	};
	return nil;
}

SCFunction* SC_Beh__MakeVirtualCaller(SCModule* Mod, SCClass* Cls, Message* ErrPlace) {
	SCFunction* Rz = nil;
	JB_Incr(Rz);
	JB_String* InterName = Mod->Name;
	JB_Incr(InterName);
	JB_String* Type = SC_Class_BehaviourName(Cls);
	JB_Incr(Type);
	JB_String* FuncName = SC_Str_InterfaceToBehaviour(InterName);
	JB_Incr(FuncName);
	FastString* _fsf1 = JB_FS_Constructor(nil);
	JB_Incr(_fsf1);
	JB_FS_AppendString(_fsf1, JB_LUB[1980]);
	JB_FS_AppendString(_fsf1, InterName);
	JB_FS_AppendString(_fsf1, JB_LUB[1991]);
	JB_FS_AppendString(_fsf1, InterName);
	JB_Decr(InterName);
	JB_FS_AppendString(_fsf1, JB_LUB[1992]);
	JB_FS_AppendString(_fsf1, Type);
	JB_Decr(Type);
	JB_FS_AppendString(_fsf1, JB_LUB[1993]);
	JB_FS_AppendString(_fsf1, FuncName);
	JB_Decr(FuncName);
	JB_FS_AppendString(_fsf1, JB_LUB[1994]);
	JB_String* FNStr = JB_FS_GetResult(_fsf1);
	JB_Incr(FNStr);
	JB_Decr(_fsf1);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(ErrPlace, (&_usingf0));
	Message* FNSrc = SC_Str_ParseClean(FNStr);
	JB_Incr(FNSrc);
	JB_Decr(FNStr);
	if (FNSrc) {
		Message* _tmPf2 = ((Message*)JB_Ring_First(FNSrc));
		JB_Incr(_tmPf2);
		JB_SetRef(Rz, ((SCFunction*)SC_Func__NewFunc(_tmPf2, Cls, ErrPlace)));
		JB_Decr(_tmPf2);
		if (Rz) {
			(SC_Func_SyntaxIsSet(Rz, kSC__FunctionType_Behaviour, true));
			(SC_Func_SyntaxIsSet(Rz, kSC__FunctionType_ExpectsRealVars, true));
			JB_Array_SyntaxAppend(Cls->Behaviour->WrapperFuncs, Rz);
		}
	}
	JB_Decr(FNSrc);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), ErrPlace);
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(Rz);
	return Rz;
}

SCNode* SC_Beh__NewActual(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCClass* Cls = SC_Base_ShouldBeClass(Name_space, ErrPlace);
	JB_Incr(Cls);
	if (Cls and SC_Beh__Tran_Behaviour(Node, Cls)) {
		SCFunction* Fn = ((SCFunction*)SC_Func__NewFunc(Node, Cls, Node));
		JB_Incr(Fn);
		if (Fn) {
			SC_Class_AddBehaviourOrInterface(Cls, Fn);
			(SC_Func_SyntaxIsSet(Fn, kSC__FunctionType_Behaviour, true));
			(SC_Func_SyntaxIsSet(Fn, kSC__FunctionType_ExpectsRealVars, true));
			JB_Decr(Cls);
			JB_SafeDecr(Fn);
			return Fn;
		}
		JB_Decr(Fn);
	}
	JB_Decr(Cls);
	return nil;
}

SCNode* SC_Beh__NewVirtual(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (!ErrPlace) {
		return nil;
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(ErrPlace, (&_usingf0));
	SCClass* Cls = SC_Base_ShouldBeClass(Name_space, ErrPlace);
	JB_Incr(Cls);
	if (Cls) {
		Message* Arg = JB_Msg_FindSyx(Node, kJB_SyxArg);
		JB_Incr(Arg);
		if (Arg) {
			Message* Beh = (JB_Syx_Msg(kJB_SyxTmp, JB_LUB[75]));
			JB_Incr(Beh);
			Message* _tmPf2 = ((Message*)JB_Ring_First(Node));
			JB_Incr(_tmPf2);
			Message* _tmPf1 = JB_Msg_Copy(_tmPf2, nil);
			JB_Incr(_tmPf1);
			JB_Decr(_tmPf2);
			JB_Tree_SyntaxAppend(Beh, _tmPf1);
			JB_Decr(_tmPf1);
			JB_Tree_SyntaxAppend(Beh, Arg);
			(JB_Ring_NextSibSet(Node, Beh));
			SC_Base_CollectOne(Name_space, Beh, true);
			JB_Decr(Beh);
		}
		JB_Decr(Arg);
		SCModule* Mod = SC_Beh__NewVirtualSub(Node, Cls, ErrPlace);
		JB_Incr(Mod);
		if (Mod) {
			SCFunction* _tmPf3 = SC_Beh__MakeVirtualCaller(Mod, Cls, ErrPlace);
			JB_Incr(_tmPf3);
			JB_Decr(Mod);
			JB_Decr(Cls);
			JB_SafeDecr(_tmPf3);
			JB_MsgPos_Destructor((&_usingf0));
			return _tmPf3;
		}
		JB_Decr(Mod);
	}
	JB_Decr(Cls);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), ErrPlace);
	JB_MsgPos_Destructor((&_usingf0));
	return nil;
}

SCModule* SC_Beh__NewVirtualSub(Message* Node, SCClass* Cls, Message* ErrPlace) {
	Message* Thg = ((Message*)JB_Ring_First(Node));
	JB_Incr(Thg);
	bool Required = (SC_Msg_OperatorIsARel(Thg, JB_LUB[1272]));
	if (Required) {
		Message* _tmPf0 = ((Message*)JB_Ring_First(Thg));
		JB_Incr(_tmPf0);
		JB_SetRef(Thg, SC_Msg_ReplaceWith(Thg, _tmPf0));
		JB_Decr(_tmPf0);
	}
	if ((!JB_Msg_EqualsSyx(Thg, kJB_SyxThg, false))) {
		JB_Msg_Fail(Node, JB_LUB[1940]);
		JB_Decr(Thg);
		return nil;
	}
	JB_String* S = Thg->Name;
	JB_Incr(S);
	if ((SC_Str_UnderScoreAtAnyEnd(S))) {
		JB_Msg_Fail(Thg, JB_LUB[1941]);
		JB_Decr(S);
		JB_Decr(Thg);
		return nil;
	}
	if (!(!JB_Str_Equals(S, JB_LUB[141], true))) {
		JB_Msg_Fail(Thg, JB_LUB[1942]);
		JB_Decr(S);
		JB_Decr(Thg);
		return nil;
	}
	JB_SetRef(Thg->Name, JB_Str_Moat(S));
	JB_Decr(Thg);
	SCModule* Mod = SC_Func__NewProtoTypeSub(Node, Cls, ErrPlace, S);
	JB_Incr(Mod);
	JB_Decr(S);
	if (!Mod) {
		JB_Decr(Mod);
		return nil;
	}
	Mod->IsRequiredInterface = Required;
	SC_Class_AddBehaviourOrInterface(Cls, Mod);
	SCClass* Mcls = Mod->Cls;
	JB_Incr(Mcls);
	if (Mcls) {
		Mcls->Behaviourness = kSC__Beh_kBehaviourProto;
		if (Required) {
			Mcls->Behaviourness = kSC__Beh_kBehaviourProtoRequired;
		}
	}
	JB_Decr(Mcls);
	JB_SafeDecr(Mod);
	return Mod;
}

bool SC_Beh__Tran_Behaviour(Message* Node, SCClass* Cls) {
	if (!Node) {
		return nil;
	}
	if (Cls->IsRole) {
		JB_Msg_Fail(Node, JB_LUB[993]);
		return nil;
	}
	Message* Name = JB_Msg_NeedSyx(Node, kJB_SyxThg);
	JB_Incr(Name);
	if (!Name) {
		JB_Decr(Name);
		return nil;
	}
	Message* Lst = ((Message*)JB_Ring_NextSib(Name));
	JB_Incr(Lst);
	if (Lst) {
		if (!((!JB_Msg_EqualsSyx(Lst, kJB_SyxBra, false)) and ((!JB_Msg_EqualsSyx(Lst, kJB_SyxPrm, false)) and (!JB_Msg_EqualsSyx(Lst, kJB_SyxList, false))))) {
			JB_Msg_Fail(Lst, JB_LUB[994]);
			JB_Decr(Lst);
			JB_Decr(Name);
			return nil;
		}
	}
	JB_Decr(Lst);
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Node, (&_usingf0));
		Message* It = ((Message*)JB_Ring_NextSib(Name));
		JB_Incr(It);
		if (It) {
			JB_Msg_Expect(It, kJB_SyxArg, nil);
		}
		 else {
			Message* _tmPf2 = JB_Syx_Msg(kJB_SyxArg, JB_LUB[0]);
			JB_Incr(_tmPf2);
			JB_Tree_SyntaxAppend(Node, (_tmPf2));
			JB_Decr(_tmPf2);
		}
		JB_Decr(It);
		Message* _tmPf3 = ({
			Message* __imPf1 = (JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0]));
			JB_Incr(__imPf1);
			JB_String* _tmPf5 = JB_Str_Moat(Name->Name);
			JB_Incr(_tmPf5);
			Message* _tmPf4 = JB_Syx_Msg(kJB_SyxThg, _tmPf5);
			JB_Incr(_tmPf4);
			JB_Decr(_tmPf5);
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf4));
			JB_Decr(_tmPf4);
			JB_SafeDecr(__imPf1);
			 __imPf1;
		});
		JB_Incr(_tmPf3);
		(JB_Ring_NextSibSet(Name, _tmPf3));
		JB_Decr(_tmPf3);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Name);
	return true;
}


SCBetterNode* SC_SCBetterNode_ConstructorWith0(SCBetterNode* Self) {
	if (Self == nil) {
		Self = ((SCBetterNode*)JB_NewClass(&SCBetterNodeData));
	}
	SC_Base_Constructor0(Self);
	JB_Incr2(Self->Description, JB_LUB[0]);
	return Self;
}

SCBetterNode* SC_SCBetterNode_ConstructorWithMsg(SCBetterNode* Self, Message* Msg) {
	if (Self == nil) {
		Self = ((SCBetterNode*)JB_NewClass(&SCBetterNodeData));
	}
	SC_Base_ConstructorMsg(Self, Msg);
	JB_Incr2(Self->Description, JB_LUB[0]);
	return Self;
}

void SC_SCBetterNode_Destructor(SCBetterNode* Self) {
	JB_Clear(Self->Description);
	SC_Base_Destructor(Self);
}

void SC_SCBetterNode_ReadDescription(SCBetterNode* Self, Message* Msg) {
	Message* Str = JB_Msg_NeedSyx(Msg, kJB_SyxStr);
	JB_Incr(Str);
	if (Str) {
		if (((JB_String*)JB_Str_Exists(Self->Description))) {
			JB_Msg_Fail(Msg, JB_LUB[1057]);
		}
		JB_SetRef(Self->Description, Str->Name);
	}
	JB_Decr(Str);
}


Message* JB_config_ConfFirst(Message* Self) {
	Message* L = JB_Msg_ConfArg(Self);
	JB_Incr(L);
	if (L) {
		Message* _tmPf0 = ((Message*)JB_Ring_First(((Message*)L)));
		JB_Incr(_tmPf0);
		JB_Decr(L);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(L);
	return nil;
}

JB_File* JB_config_Path(Message* Self) {
	return ((JB_File*)JB_Object_As(Self->Obj, &JB_FileData));
}

bool JB_config_Save(Message* Self) {
	JB_File* F = JB_config_Path(Self);
	JB_Incr(F);
	if (F) {
		JB_String* P = JB_Msg_Render(Self, nil);
		JB_Incr(P);
		if (JB_FreeIfDead(JB_Str_ParseWithError(P, nil))) {
			bool _tmPf0 = JB_File_SmartDataSet(F, P);
			JB_Decr(P);
			JB_Decr(F);
			return _tmPf0;
		}
		JB_Decr(P);
	}
	JB_Decr(F);
	return false;
}

JB_String* JB_config__ConfigPath(JB_String* Path) {
	uint F = JB_Str_First(Path);
	if (F == '~') {
		return JB_File_PathFix_(Path);
	}
	if (F == '/') {
		return Path;
	}
	if (!F) {
		JB_String* _tmPf1 = JB_App__FileName();
		JB_Incr(_tmPf1);
		JB_String* _tmPf0 = JB_Str_LowerCase(_tmPf1);
		JB_Incr(_tmPf0);
		JB_Decr(_tmPf1);
		JB_String* _tmPf2 = JB_Str_OperatorPlus(_tmPf0, JB_LUB[557]);
		JB_Incr(_tmPf2);
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	return JB_File__Prefs(Path);
}

Message* JB_config__Create(JB_String* Path) {
	JB_String* _tmPf1 = JB_config__ConfigPath(Path);
	JB_Incr(_tmPf1);
	JB_File* _tmPf0 = JB_Str_AsFile(_tmPf1);
	JB_Incr(_tmPf0);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_File_Config(_tmPf0, 1048576);
	JB_Incr(_tmPf2);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}


void JB_SS_ParserCallBack_interface_SyntaxCall(JB_Task* Self, Message* Msg) {
	return ((StringReader_ParserCallBack_interface_prototype)Self->_func)(Self, Msg);
}


bool JB_Task_LessThan3_interface_SyntaxCall(JB_Task* Self, int I) {
	return ((Task_LessThan3_interface_prototype)Self->_func)(Self, I);
}


bool JB_Task_LessThan3_run(LessThan3* Self, int I) {
	return I < Self->b;
}


void JB_SS_ParserCallBack_run(ParserCallBack* Self, Message* Msg) {
}


void SC_Class_AddBehaviourOrInterface(SCClass* Self, SCNode* M) {
	SCBehaviour* B = Self->Behaviour;
	JB_Incr(B);
	if ((!B)) {
		JB_SetRef(B, SC_Beh_Constructor(nil, Self));
		JB_SetRef(Self->Behaviour, B);
	}
	if (JB_Object_FastIsa(M, &SCModuleData)) {
		(JB_Dict_ValueLowerSet(B->Interfaces, ((SCModule*)M)->Name, ((SCModule*)M)));
	}
	 else {
		SC_Beh_Add(B, M);
	}
	JB_Decr(B);
}

void SC_Class_AfterAfterFuncs(SCClass* Self) {
	SCClass* S = Self->Super;
	JB_Incr(S);
	if (S) {
		if (SC_Class_SyntaxIs(S, kSC__ClassInfo_HasCompareFunc)) {
			(SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_HasCompareFunc, true));
		}
		if (SC_Class_SyntaxIs(S, kSC__ClassInfo_HasEqualsFunc)) {
			(SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_HasEqualsFunc, true));
		}
	}
	JB_Decr(S);
	Message* Def = Self->Defawlt;
	JB_Incr(Def);
	if (Def) {
		SCDecl* D = SC_TypeOfExpr(Def, Self->Modul, nil);
		JB_Incr(D);
		if (D) {
			if (SC_Class_SyntaxIs(Self, kSC__ClassInfo_DefaultsToReal)) {
				if (!SC_Decl_StatedReal(D)) {
					JB_Msg_Fail(Def, JB_LUB[1238]);
				}
			}
		}
		JB_Decr(D);
	}
	JB_Decr(Def);
	SC_Class_DeclModel(Self);
}

void SC_Class_AfterFuncsDecled(SCClass* Self) {
	SC_Class_OverrideSyntax(Self);
	SCFunction* C = Self->ConstructorFunc;
	JB_Incr(C);
	if (C) {
		SC_Class_CheckAllocVsWrapper(Self, C, true);
	}
	JB_Decr(C);
	SCFunction* D = Self->DestructorFunc;
	JB_Incr(D);
	if (D) {
		if ((D->NextFunc)) {
			JB_Msg_Fail(D->Source, JB_LUB[1710]);
		}
		if ((!JB_Array_SyntaxEquals(D->Args, 1, false))) {
			JB_Msg_Fail(D->Source, JB_LUB[1711]);
		}
		if ((D->ReturnType)) {
			JB_Msg_Fail(D->Source, JB_LUB[1712]);
		}
		SC_Class_CheckAllocVsWrapper(Self, D, false);
	}
	JB_Decr(D);
	SCDecl* Cls = Self->ClassType;
	JB_Incr(Cls);
	if (Cls) {
		JB_String* _tmPf2 = SC_Class_CStructName(Self);
		JB_Incr(_tmPf2);
		JB_String* _tmPf1 = JB_Str_OperatorPlus(_tmPf2, JB_LUB[1713]);
		JB_Incr(_tmPf1);
		JB_Decr(_tmPf2);
		JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[48], _tmPf1);
		JB_Incr(_tmPf0);
		JB_Decr(_tmPf1);
		(SC_Decl_NameSet(Cls, _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_Decr(Cls);
}

void SC_Class_AlignProperties(SCClass* Self) {
	if (!((SC_Class_SyntaxIs(Self, kSC__ClassInfo_SortsProperties)) and (((!Self->IsWrapper)) and (!Self->IsRole)))) {
		return;
	}
	JB_Array_Sort(Self->Properties, ((FP_SorterComparer)(SC_SmallestAlignedFirst)));
	int ParentSize = 4;
	SCClass* Sp = Self->Super;
	if (Sp and (Sp != SC_TypeObject)) {
		ParentSize = Sp->SizeRaw;
	}
	int LargeSize = SC_Array_CArraySize(Self->Properties, ParentSize);
	if (LargeSize > 128) {
		Self->SizeRaw = LargeSize;
		return;
	}
	Self->SizeRaw = ParentSize;
	Array* Sorted = JB_Array_Constructor0(nil);
	SC_Class_AlignTo(Self, Sorted, 3);
	SC_Class_AlignTo(Self, Sorted, 4);
	SC_Class_GrabRemaining(Self, Sorted);
	JB_SetRef(Self->Properties, Sorted);
}

bool SC_Class_AlignSub(SCClass* Self, Array* Dest, SCDecl* D) {
	JB_Array_SyntaxAppend(Dest, D);
	int Al = SC_Decl_Alignment(D);
	int Size = JB_int_OperatorAlign(((int)Self->SizeRaw), Al);
	Size = (Size + SC_Decl_CArraySize(D));
	Self->SizeRaw = Size;
	return true;
}

void SC_Class_AlignTo(SCClass* Self, Array* Dest, int Bits) {
	int AlignBits = (1 << Bits) - 1;
	if (!(Self->SizeRaw & AlignBits)) {
		return;
	}
	while (Bits-- > 0) {
		while (Self->SizeRaw & AlignBits) {
			SCDecl* D = SC_Class_FindPropAlignedTo(Self, 1 << Bits, Dest);
			JB_Incr(D);
			if (D) {
				SC_Class_AlignSub(Self, Dest, D);
			}
			 else {
				JB_Decr(D);
				break;
			}
			JB_Decr(D);
		};
	};
}

JB_String* SC_Class_APIStructName(SCClass* Self) {
	if (SC_Class_IsObject(Self) or Self->Super) {
		Message* _tmPf1 = SC_Base_SourceArg(Self);
		JB_Incr(_tmPf1);
		JB_String* _tmPf0 = SC_Msg_APICppProject(_tmPf1);
		JB_Incr(_tmPf0);
		JB_Decr(_tmPf1);
		JB_String* _tmPf2 = JB_Str_LowerCase(Self->Name);
		JB_Incr(_tmPf2);
		JB_String* _tmPf3 = JB_Str_OperatorPlus(_tmPf0, _tmPf2);
		JB_Incr(_tmPf3);
		JB_Decr(_tmPf0);
		JB_Decr(_tmPf2);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	return SC_Class_CStructName(Self);
}

void SC_Class_BannedCheck(SCClass* Self, Message* Src) {
	if (!SC_Class_TestBanned(Self)) {
		return;
	}
	if (true) {
		SC_SCObject_Fail(Self, JB_Str_OperatorPlus(JB_LUB[844], Self->Name));
	}
	SCNode* Curr = Self->MyReacher;
	{
		int _Valuef1 = 0;
		while (_Valuef1 < 16) {
			if ((!Curr) or (JB_ObjClass(Curr) == &SCNodeData)) {
				break;
			}
			if (Src) {
				if (true) {
					JB_Msg_Fail(Src, SC_Base_ReachedName(Curr));
				}
				Src = nil;
			}
			 else {
				if (true) {
					SC_SCObject_Fail(Curr, SC_Base_ReachedName(Curr));
				}
			}
			Curr = Curr->MyReacher;
			(++_Valuef1);
		};
	};
}

JB_String* SC_Class_BehaviourName(SCClass* Self) {
	return JB_Str_OperatorPlus(Self->Name, JB_LUB[35]);
}

SCFunction* SC_Class_BestBehaviourFor(SCClass* Self, JB_String* Name) {
	SCBehaviour* B = Self->Behaviour;
	while (B) {
		SCObject* Fn = SC_Base_SyntaxAccessWithStr(B, Name);
		if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
			return ((SCFunction*)Fn);
		}
		B = SC_Beh_Upwards(B);
	};
	return nil;
}

int SC_Class_CalculateSize(SCClass* Self, int Depth) {
	SC_Class_CalculateSizeRaw(Self, Depth);
	return Self->Size;
}

int SC_Class_CalculateSizeRaw(SCClass* Self, int Depth) {
	int Rz = 0;
	uint Si = Self->Size;
	if (Si) {
		return Si;
	}
	if (SC_Class_IsFunc(Self)) {
		Self->Size = JB_Platform__PointerBytes();
		Self->Alignment = JB_Platform__PointerBytes();
		return Self->Size;
	}
	if (SC_Class_IsDataTypeOnly(Self)) {
		Self->Size = JB_TC_ByteCount(Self->TypeInfo);
		Self->Alignment = Self->Size;
		return Self->Size;
	}
	if (Depth >= 16) {
		Message* _tmPf3 = SC_Base_SourceArg(Self);
		JB_Incr(_tmPf3);
		JB_Msg_Fail(_tmPf3, JB_LUB[845]);
		JB_Decr(_tmPf3);
		return 0;
	}
	int Align = 1;
	if (Self == SC_TypeObject) {
		Align = 4;
		Rz = 4;
	}
	SCClass* S = Self->Super;
	JB_Incr(S);
	if (S) {
		Rz = SC_Class_CalculateSizeRaw(S, 0);
		if (!Rz) {
			JB_Decr(S);
			return 0;
		}
		Align = JB_int_OperatorMax(Align, S->Alignment);
	}
	JB_Decr(S);
	int Bits = 0;
	{
		Array* _LoopSrcf2 = Self->Properties;
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(P);
			if (P == nil) {
				JB_Decr(P);
				break;
			}
			int Curr = SC_Decl_CalculateSize(P, Depth);
			if (!Curr) {
				JB_Decr(P);
				break;
			}
			Align = JB_int_OperatorMin((JB_int_OperatorMax(Align, Curr)), 16);
			if ((SC_Decl_SyntaxIs(P, kSC__SCDeclInfo_Task)) and SC_Decl_IsObject(P)) {
				Bits = JB_int_SyntaxAccessSet(Bits, (Rz + (JB_Platform__PointerBytes() - 1)) >> 3, true);
			}
			Rz = JB_int_OperatorAlign(Rz, Curr);
			P->ExportPosition = (Rz / Curr);
			int Mul = P->C_Array;
			JB_Decr(P);
			if (!Mul) {
				Mul = 1;
			}
			Rz = (Rz + (Curr * Mul));
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	Self->SizeRaw = Rz;
	Self->Size = JB_int_OperatorAlign(Rz, Align);
	if (SC_Class_IsTask(Self)) {
		Self->TaskObjectCount = (Self->Super->TaskObjectCount | Bits);
		if (Self->Size > 128) {
			JB_Msg_Fail(Self->Source, JB_LUB[846]);
		}
	}
	return Rz;
}

bool SC_Class_CanCompareSub(SCClass* Self, JB_String* S, SCDecl* Against) {
	{
		SCClass* B = Self;
		while (B) {
			SCObject* O = ((SCObject*)JB_Dict_Value0(B->Access, S));
			if (JB_Object_FastIsa(O, &SCFunctionData)) {
				if (SC_Func_CanCompareAgainst(((SCFunction*)O), Against)) {
					return true;
				}
			}
			B = B->Super;
		};
	}
	;
	return false;
}

bool SC_Class_CanHaveEmptyConstructor(SCClass* Self) {
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (P == nil) {
				break;
			}
			if (SC_Decl_TypeSuffers(P) and SC_Decl_StatedReal(P)) {
				if (!SC_Class_SyntaxIs(P->Type, kSC__ClassInfo_DefaultsToReal)) {
					return nil;
				}
			}
			(++_if0);
		};
	}
	;
	return true;
}

void SC_Class_CheckAllocVsWrapper(SCClass* Self, SCFunction* F, bool IsConstructor) {
	if (!(Self->IsWrapper and (SC_Class_IsObject(Self) and Self->Super))) {
		return;
	}
	if ((!F) != IsConstructor) {
		return;
	}
	if (!IsConstructor) {
		if (!JB_FreeIfDead(SC_Class_FirstDestructor(Self))) {
			return;
		}
	}
	if ((!SC_Func_SyntaxIs(F, kSC__FunctionType_Wrapper))) {
		if (true) {
			JB_Msg_Fail(Self->Source, JB_LUB[847]);
		}
	}
}

void SC_Class_CheckIterator(SCClass* Self) {
	{
		Dictionary* _LoopSrcf2 = Self->Access;
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf2);
		while (true) {
			SCObject* I = ((SCObject*)JB_DictionaryReader_NextValue(_navf0));
			if (I == nil) {
				break;
			}
			if (JB_Object_FastIsa(I, &SCIteratorData)) {
				SC_Iter_Check(((SCIterator*)I), Self);
			}
		};
	};
}

void SC_Class_CheckStateful(SCClass* Self, Message* Node) {
	if (!((!SC_Class_SyntaxIs(Self, kSC__ClassInfo_Stateful)) or (!SC_Class_SyntaxIs(Self, kSC__ClassInfo_Stateless)))) {
		JB_Msg_Fail(Node, JB_LUB[848]);
		return;
	}
}

void SC_Class_ClassCollect(SCClass* Self) {
	Message* _tmPf0 = SC_Base_SourceArg(Self);
	JB_Incr(_tmPf0);
	SC_Base_CollectFromNode(Self, _tmPf0, SC_SCObject_IsVisible(Self), nil);
	JB_Decr(_tmPf0);
}

bool SC_Class_CollectProp(SCClass* Self, Message* Msg) {
	SCDecl* Dcl = SC_Msg_CollectDecl(Msg, Self->Modul, Self, kSC__DeclMode_Properties, Self, nil);
	if (Dcl) {
		JB_Array_SyntaxAppend(Self->Properties, Dcl);
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Property, true));
		SC_Decl_BecomeReal(Dcl);
		return true;
	}
	return false;
}

void SC_Class_CollectProperties(SCClass* Self) {
	if (SC_Class_IsBehaviourTable(Self)) {
		return;
	}
	SC__Mod_Curr = Self->Modul;
	{
		Message* _LoopSrcf2 = SC_Base_SourceArg(Self);
		Message* Item = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Item));
			if (JB_Msg_EqualsSyx(Item, kJB_SyxDecl, false)) {
				SC_Class_CollectProp(Self, Item);
			}
			Item = _Nf1;
		};
		;
	}
	;
	if (SC_Class_IsTask(Self)) {
		SC_Class_TaskProperties(Self);
	}
	 else {
		SCDecl* It = ((SCDecl*)JB_Array_First(Self->Properties));
		if (It) {
			SC_Class_AlignProperties(Self);
			if ((Self->IsRole)) {
				JB_Msg_Fail(It->Source, JB_LUB[1815]);
			}
		}
	}
	if (Self->IsModel) {
		SC_Class_ModelDecls(Self);
	}
}

SCFunction* SC_Class_ConOrDesForCall(SCClass* Self, bool IsConstructor, int Task) {
	if (!IsConstructor) {
		return SC_Class_FirstDestructor(Self);
	}
	if (Task <= 1) {
		return SC_Func_ParamlessConstructor(Self->ConstructorFunc);
	}
	return Self->ConstructorFunc;
}

SCClass* SC_Class_Constructor(SCClass* Self, Message* Node, bool HasPtrs, SCModule* M) {
	if (Self == nil) {
		Self = ((SCClass*)JB_NewClass(&SCClassData));
	}
	SC_SCBetterNode_ConstructorWith0(Self);
	Self->Depth = 0;
	Self->Alignment = 0;
	Self->MinOpt = 0;
	Self->Behaviourness = 0;
	Self->IsWrapper = 0;
	Self->IsRole = 0;
	Self->BaseType = kSC__SCNodeType_Nil;
	Self->SizeRaw = 0;
	Self->Size = 0;
	Self->TaskObjectCount = 0;
	Self->Flags = 0;
	Self->DataObject = nil;
	Self->DowngradeTo = nil;
	Self->ProcessAs = nil;
	Self->Behaviour = nil;
	Self->IsModel = nil;
	Self->ClassType = nil;
	JB_Incr2(Self->CppClass, JB_LUB[0]);
	Self->DestructorFunc = nil;
	Self->ConstructorFunc = nil;
	Self->TheBoolFunc = nil;
	Self->TheIsFunc = nil;
	Self->FuncProto = nil;
	Self->_NotConst = nil;
	Self->Signed = nil;
	JB_Incr2(Self->Casts, JB_Array_Constructor0(nil));
	JB_Incr2(Self->Children, JB_Array_Constructor0(nil));
	Self->Contained = nil;
	Self->Super = nil;
	Self->Defawlt = nil;
	Self->False = nil;
	JB_Incr2(Self->Properties, JB_Array_Constructor0(nil));
	(++SC__Comp_stClasses);
	JB_SetRef(Node->Obj, Self);
	JB_Incr2(Self->Name, SC_Class__LoadClassName(Node));
	JB_Incr2(Self->Source, Node);
	JB_Incr2(Self->Modul, M);
	(SC_SCObject_IsVisibleSet(Self, SC__Base_CurrVisibility));
	JB_Incr2(Self->SaveAs, JB_LUB[0]);
	Self->TypeInfo = kJB__TC_UnusedType;
	((SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_Banned, SC_Class_TestBanned(Self))));
	SCDecl* T = SC_Decl_Constructor(nil, Self);
	JB_Incr(T);
	T->NilDeclared = (kSC__NilState_Real >> HasPtrs);
	JB_Incr2(Self->TypeNormal, T);
	JB_Incr2(Self->TypeOptional, SC_Decl_NilConstructor(T, kSC__NilState_Optional * HasPtrs));
	JB_Incr2(Self->TypeReal, SC_Decl_NilConstructor(T, kSC__NilState_Real * HasPtrs));
	if (JB_Msg_SyntaxEquals(Node, JB_LUB[37], false)) {
		JB_SetRef(T, SC_Decl_GetAddress(T, kSC__DeclMode_FuncParam));
	}
	 else {
		JB_SetRef(T, SC_Decl_CopyDecl(T, false));
	}
	JB_Incr2(Self->SelfDecl, T);
	(SC_Decl_NameSet(T, JB_LUB[180]));
	(SC_Decl_SyntaxIsSet(T, kSC__SCDeclInfo_SelfImplicit, true));
	(SC_Decl_SyntaxIsSet(T, kSC__SCDeclInfo_Altered, (!true)));
	JB_Decr(T);
	return Self;
}

void SC_Class_ContainedTypeLoad(SCClass* Self) {
	SC_Base_Use(Self);
	SCClass* Sup = Self->Super;
	JB_Incr(Sup);
	if (Sup) {
		JB_SetRef(Self->Contained, Sup->Contained);
		JB_SetRef(Self->SelfDecl->Contains, Sup->SelfDecl->Contains);
		if (SC_Class_NumericReduction(Self) == SC_Class_NumericReduction(Sup)) {
			SC_Class_NeedsDefaultValue(Self, Sup->Defawlt, (&Self->Defawlt), JB_LUB[1239]);
			SC_Class_NeedsDefaultValue(Self, Sup->False, (&Self->False), JB_LUB[32]);
		}
		if (SC_Class_SyntaxIs(Sup, kSC__ClassInfo_IgnoreContainedSelf)) {
			(SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_IgnoreContainedSelf, true));
		}
		((SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_ContainsParentClass, (SC_Class_SyntaxIs(Sup, kSC__ClassInfo_ContainsParentClass)))));
	}
	JB_Decr(Sup);
	if (!Self->Defawlt) {
		JB_SetRef(Self->Defawlt, (JB_Syx_Msg(kJB_SyxThg, JB_LUB[36])));
	}
	if (Self->False) {
	}
	 else if (SC_Class_NumericCount(Self) == 1) {
		JB_SetRef(Self->False, (JB_Syx_Msg(kJB_SyxNum, JB_LUB[266])));
	}
	 else {
		JB_SetRef(Self->False, (JB_Syx_Msg(kJB_SyxThg, JB_LUB[36])));
	}
	SCClass* Cls = SC_Class_FindContainedClass(Self);
	JB_Incr(Cls);
	if (!Cls) {
		JB_Decr(Cls);
		return;
	}
	SCDecl* TN = Cls->TypeOptional;
	JB_Incr(TN);
	SCDecl* Cont = SC_Decl_CopyDecl(TN, false);
	JB_Incr(Cont);
	(SC_Decl_SyntaxIsSet(Cont, kSC__SCDeclInfo_UpgradeableContained, true));
	JB_SetRef(Self->Contained, Cont);
	JB_Decr(Cont);
	if (SC_Class_IsDataTypeOrFP(Cls)) {
		(SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_IgnoreContainedSelf, true));
	}
	JB_Decr(Cls);
	JB_SetRef(Self->SelfDecl->Contains, TN);
	JB_Decr(TN);
}

SCFunction* SC_Class_CreateAutoConstructor(SCClass* Self) {
	SCFunction* Rz = nil;
	Rz = SC_Class_CreateEmptyFunc(Self, JB_LUB[617], JB_LUB[2013]);
	if (!Rz) {
		return nil;
	}
	Message* Node = Rz->Source;
	Message* Prms = ((Message*)JB_Tree_Second(Node));
	Message* Arg = ((Message*)JB_Ring_NextSib(Prms));
	{
		Message* _LoopSrcf2 = SC_Base_SourceArg(Self);
		Message* Prop = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Prop) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Prop));
			if (JB_Msg_EqualsSyx(Prop, kJB_SyxDecl, false)) {
				JB_String* Name = JB_Msg_Name(SC_Msg_DeclName(Prop));
				if ((JB_Str_Equals(Name, JB_LUB[2014], false))) {
					JB_Msg_Fail(Prop, JB_LUB[2015]);
				}
				JB_Tree_SyntaxAppend(Prms, JB_Msg_Copy(Prop, nil));
				Message* Rel = JB_Msg_Msg(Arg, kJB_SyxRel, JB_LUB[0]);
				JB_Msg_AppendSyx(Rel, kJB_SyxSDot, Name);
				JB_Msg_AppendSyx(Rel, kJB_SyxOpp, JB_LUB[241]);
				JB_Msg_AppendSyx(Rel, kJB_SyxThg, Name);
			}
			Prop = _Nf1;
		};
		;
	}
	;
	return Rz;
}

void SC_Class_CreateBehaviour(SCClass* Self) {
	if (!(SC_Class_IsObject(Self) and (!Self->IsRole))) {
		return;
	}
	if (!Self->Behaviour) {
		JB_SetRef(Self->Behaviour, SC_Beh_Constructor(nil, Self));
	}
	Message* _tmPf0 = SC_Base_SourceArg(Self);
	JB_Incr(_tmPf0);
	SC_Beh_CreateFuncTable(Self->Behaviour, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_Class_CreateConstructors(SCClass* Self) {
	if (SC_Class_IsObject(Self) or (SC_Class_IsStruct(Self) and ((!Self->Behaviourness) and (!Self->IsModel)))) {
		SCFunction* Con = SC_Class_FindAllocFunc(Self, JB_LUB[617], true);
		JB_Incr(Con);
		if (Self->IsRole) {
			SCClass* S = Self->Super;
			JB_Incr(S);
			if (!((!Con) or S->ConstructorFunc)) {
				JB_Msg_Fail(Con->Source, JB_LUB[2054]);
			}
			if (!Con) {
				JB_SetRef(Con, S->ConstructorFunc);
			}
			JB_SetRef(Self->DestructorFunc, S->DestructorFunc);
			JB_Decr(S);
			if (!Con) {
				JB_Decr(Con);
				return;
			}
		}
		//using;
		Message* __varf1 = Self->Source;
		JB_Incr(__varf1);
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(__varf1, (&_usingf0));
		if ((!Con) and (!Self->IsWrapper)) {
			JB_SetRef(Con, SC_Class_CreateEmptyConstructors(Self));
		}
		JB_SetRef(Self->ConstructorFunc, Con);
		if (Con) {
			SC_Base_TryAdd(Self->Modul, Con->Source, Con, JB_LUB[602]);
			SC_Class_FillRoleConstructor(Self, Con);
		}
		JB_Decr(Con);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), __varf1);
		JB_Decr(__varf1);
		JB_MsgPos_Destructor((&_usingf0));
	}
	if (!Self->IsRole) {
		bool NeedsDestructor = SC_Class_IsObject(Self) or (SC_Class_IsStruct(Self) and SC_Class_HasObjectProperties(Self));
		JB_SetRef(Self->DestructorFunc, SC_Class_FindAllocFunc(Self, JB_LUB[1919], (!NeedsDestructor)));
	}
	 else if (Self->IsRole == 3) {
		if (Self->Super->IsRole != 2) {
			SC_SCObject_Fail(Self, JB_LUB[2055]);
		}
	}
}

SCFunction* SC_Class_CreateEmptyConstructors(SCClass* Self) {
	SCFunction* Rz = nil;
	JB_Incr(Rz);
	if (SC_Class_CanHaveEmptyConstructor(Self)) {
		JB_SetRef(Rz, SC_Class_CreateEmptyFunc(Self, JB_LUB[617], JB_LUB[0]));
		if (!Rz) {
			JB_Decr(Rz);
			return nil;
		}
		(SC_Func_SyntaxIsSet(Rz, kSC__FunctionType_EmptyConstructor, true));
	}
	int Pc = SC_Class_PassableCount(Self);
	SCClass* S = Self->Super;
	JB_Incr(S);
	if (S and (Rz and (S != SC_TypeObject))) {
		Message* L = SC_Func_Prms(S->ConstructorFunc);
		JB_Incr(L);
		if (JB_Ring_HasChildren(L)) {
			SC_Func_CopyParams(Rz, L);
			Pc = 0;
		}
		JB_Decr(L);
	}
	JB_Decr(S);
	if (SC_Class_IsObject(Self)) {
		if ((Pc >= 1) and (Pc <= 7)) {
			SCFunction* F2 = SC_Class_CreateAutoConstructor(Self);
			JB_Incr(F2);
			if (!Rz) {
				JB_SetRef(Rz, F2);
			}
			JB_Decr(F2);
		}
	}
	JB_SafeDecr(Rz);
	return Rz;
}

SCFunction* SC_Class_CreateEmptyFunc(SCClass* Self, JB_String* Fname, JB_String* Cpp_name) {
	JB_Incr(Cpp_name);
	SCFunction* Rz = nil;
	JB_Incr(Rz);
	SC__Base_CurrVisibility = SC_SCObject_IsVisible(Self);
	if (!JB_Str_Exists(Cpp_name)) {
		JB_SetRef(Cpp_name, Fname);
	}
	FastString* _fsf0 = JB_FS_Constructor(nil);
	JB_Incr(_fsf0);
	JB_FS_AppendString(_fsf0, JB_LUB[460]);
	JB_FS_AppendString(_fsf0, Fname);
	JB_FS_AppendString(_fsf0, JB_LUB[1995]);
	JB_FS_AppendString(_fsf0, Cpp_name);
	JB_Decr(Cpp_name);
	JB_FS_AppendString(_fsf0, JB_LUB[1996]);
	JB_String* E = JB_FS_GetResult(_fsf0);
	JB_Incr(E);
	JB_Decr(_fsf0);
	Message* Msg = SC_Str_ParseClean(E);
	JB_Incr(Msg);
	JB_Decr(E);
	JB_SetRef(Rz, ((SCFunction*)SC_Func__NewFunc(Msg, Self, Self->Source)));
	if (Rz) {
		SC_Base_TryAdd(Self, Msg, Rz, Fname);
		(SC_SCObject_IsVisibleSet(Rz, false));
	}
	JB_Decr(Msg);
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* SC_Class_CStructName(SCClass* Self) {
	if (!Self) {
		return JB_LUB[0];
	}
	if (Self->IsRole == 1) {
		return SC_Class_CStructNameSub(SC_Class_RealClass(Self));
	}
	return SC_Class_CStructNameSub(Self);
}

JB_String* SC_Class_CStructNameSub(SCClass* Self) {
	return ({
		JB_String* _X = Self->CppClass;
		if (!JB_Str_Exists(_X)) {
			_X = SC_Str_UnicodeSafeName(Self->Name, nil);
			JB_SetRef(Self->CppClass, _X);
		}
		 _X;
	});
}

JB_String* SC_Class_CSuperStructName(SCClass* Self) {
	SCClass* Sup = SC_Class_RealSuper(Self);
	JB_Incr(Sup);
	if ((!Sup)) {
		JB_Decr(Sup);
		return JB_LUB[266];
	}
	FastString* _fsf0 = JB_FS_Constructor(nil);
	JB_Incr(_fsf0);
	JB_FS_AppendString(_fsf0, JB_LUB[525]);
	JB_String* _tmPf1 = SC_Class_CStructName(Sup);
	JB_Incr(_tmPf1);
	JB_Decr(Sup);
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendByte(_fsf0, ')');
	JB_String* _tmPf2 = JB_FS_GetResult(_fsf0);
	JB_Incr(_tmPf2);
	JB_Decr(_fsf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void SC_Class_DataTypePostLoad(SCClass* Self) {
	if (!SC_Class_IsDataTypeOnly(Self)) {
		return;
	}
	if (SC_Class_EqualsName(Self, JB_LUB[406], true)) {
		Self->TypeInfo = kJB__TC__void;
		return;
	}
	Message* Node = Self->Source;
	JB_Incr(Node);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Node, (&_usingf0));
	SCClass* Sup = Self->Super;
	JB_Incr(Sup);
	if (Sup) {
		Self->Size = Sup->Size;
		Self->TypeInfo = Sup->TypeInfo;
		ClassInfo Nr = SC_Class_NumericReduction(Self);
		if (Nr) {
			if (Nr & kSC__ClassInfo_Symbol) {
				Self->TypeInfo = (Self->TypeInfo & (~kJB__TC_Numeric));
			}
		}
		 else {
			if (!Self->Defawlt) {
				JB_SetRef(Self->Defawlt, Sup->Defawlt);
			}
		}
	}
	JB_String* N = JB_Str_LowerCase(Self->Name);
	JB_Incr(N);
	Dictionary* _tmPf1 = JB_TC__Types();
	JB_Incr(_tmPf1);
	DTWrap* Td = ((DTWrap*)JB_Dict_Value0(_tmPf1, N));
	JB_Incr(Td);
	JB_Decr(N);
	JB_Decr(_tmPf1);
	if (Td) {
		uint T = ((DataTypeCode)JB_Wrap_SyntaxAccess(Td));
		if (T != 255) {
			Self->Size = JB_TC_ByteCount(T);
			if ((T == kJB__TC_Vec3) or (T == kJB__TC_iVec3)) {
				Self->Size = 16;
			}
			Self->TypeInfo = T;
			(SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_Builtin, true));
			if (!(JB_TC_IsInt(T) and (!Self->Signed))) {
				JB_Decr(Td);
				JB_Decr(Sup);
				JB_MsgPos_Destructor((&_usingf0));
				JB_Decr(Node);
				return;
			}
			SCClass* S2 = SC_TC_SignedStuffClass(T);
			JB_Incr(S2);
			if (S2) {
				JB_SetRef(Self->Signed, S2->TypeNormal);
				JB_SetRef(S2->Signed, Self->TypeNormal);
			}
			JB_Decr(S2);
		}
		 else {
		}
	}
	 else {
		if ((!Sup)) {
			JB_Msg_Fail(Node, JB_LUB[1320]);
		}
	}
	JB_Decr(Sup);
	JB_Decr(Td);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
	JB_Decr(Node);
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Class_DeclModel(SCClass* Self) {
	Message* M = Self->IsModel;
	if (!M) {
		return;
	}
	if (!JB_Array_SyntaxCast(Self->Properties)) {
		JB_Msg_Fail(Self->Source, JB_LUB[1082]);
		return;
	}
	SCObject* Dcl = SC_Base_SyntaxAccessWithStr(Self->Modul, JB_LUB[997]);
	if (JB_Object_FastIsa(Dcl, &SCDeclData)) {
		SC_Decl_MakeGameFlying(((SCDecl*)Dcl), Self, M);
	}
	 else {
	}
}

void SC_Class_DescribeInPack(SCClass* Self, FastString* J) {
	int Sz = JB_Ternary(Self->IsWrapper, 0, ((int)Self->Size));
	JB_bin_AddInt(J, Sz);
	Array* Fn_list = Self->Behaviour->WrapperFuncs;
	JB_bin_Enter(J, kJB_SyxList, JB_LUB[0]);
	JB_String* Name = JB_LUB[266];
	SCFunction* Df = Self->DestructorFunc;
	if (Df) {
		Name = Df->ExportName;
	}
	JB_bin_Add(J, kJB_SyxThg, Name, false);
	SCBehaviour* B = Self->Behaviour;
	while (B) {
		{
			Dictionary* _LoopSrcf2 = B->Interfaces;
			DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf2);
			while (true) {
				SCModule* M = ((SCModule*)JB_DictionaryReader_NextValue(_navf0));
				if (M == nil) {
					break;
				}
				SCFunction* Fn = SC_Class_BestBehaviourFor(Self, SC_Str_InterfaceToBehaviour(M->Name));
				if (Fn) {
					SCClass* BaseClass = SC_Class_InterfaceForBehaviour(Self, Fn);
					if (BaseClass) {
						JB_bin_Add(J, kJB_SyxThg, Fn->ExportName, false);
					}
				}
			};
		}
		;
		B = SC_Beh_Upwards(B);
	};
	JB_bin_Exit0(J);
}

void SC_Class_Destructor(SCClass* Self) {
	JB_Clear(Self->DataObject);
	JB_Clear(Self->DowngradeTo);
	JB_Clear(Self->ProcessAs);
	JB_Clear(Self->SaveAs);
	JB_Clear(Self->Behaviour);
	JB_Clear(Self->IsModel);
	JB_Clear(Self->SelfDecl);
	JB_Clear(Self->ClassType);
	JB_Clear(Self->CppClass);
	JB_Clear(Self->DestructorFunc);
	JB_Clear(Self->ConstructorFunc);
	JB_Clear(Self->TheBoolFunc);
	JB_Clear(Self->TheIsFunc);
	JB_Clear(Self->FuncProto);
	JB_Clear(Self->_NotConst);
	JB_Clear(Self->Signed);
	JB_Clear(Self->TypeReal);
	JB_Clear(Self->Casts);
	JB_Clear(Self->Children);
	JB_Clear(Self->Contained);
	JB_Clear(Self->Super);
	JB_Clear(Self->Defawlt);
	JB_Clear(Self->False);
	JB_Clear(Self->Modul);
	JB_Clear(Self->Properties);
	JB_Clear(Self->TypeNormal);
	JB_Clear(Self->TypeOptional);
	SC_SCBetterNode_Destructor(Self);
}

SCFunction* SC_Class_DoSaver(SCClass* Self, JB_String* Name, int Stage) {
	if ((SC_Class_IsA(Self, SC_TypeString))) {
		return nil;
	}
	SCObject* Fn = SC_Base_SyntaxAccessWithStr(Self, Name);
	JB_Incr(Fn);
	if ((!Stage) and (!Fn)) {
		SC_Class_StartupSaver(Self, Name);
	}
	 else if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
		if (Stage == 1) {
			SC_Func_FillInSaver(((SCFunction*)Fn), Name);
		}
		if (Stage == 2) {
			SC_Func_ValidateSaver(((SCFunction*)Fn), Name);
		}
		JB_SafeDecr(Fn);
		return ((SCFunction*)Fn);
	}
	 else if (Stage == 2) {
		if (true) {
			FastString* _fsf0 = JB_FS_Constructor(nil);
			JB_Incr(_fsf0);
			JB_FS_AppendString(_fsf0, JB_LUB[1784]);
			JB_FS_AppendString(_fsf0, Name);
			JB_FS_AppendString(_fsf0, JB_LUB[1785]);
			JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
			JB_Incr(_tmPf1);
			JB_Decr(_fsf0);
			JB_Msg_Fail(Self->Source, _tmPf1);
			JB_Decr(_tmPf1);
		}
	}
	JB_Decr(Fn);
	return nil;
}

Message* SC_Class_Falsify(SCClass* Self, Message* Ques) {
	Message* F = Self->False;
	if (!F) {
		return nil;
	}
	if (JB_Ring_HasChildren(F)) {
		return JB_Msg_Copy(F, nil);
	}
	Ques->Func = F->Func;
	if (SC_Msg_OperatorIsThing(F, JB_LUB[36])) {
		JB_SetRef(Ques->Obj, SC_TypeNil);
	}
	 else {
		JB_SetRef(Ques->Name, F->Name);
	}
	return nil;
}

void SC_Class_FillInterFaceIn(SCClass* Self, SCFunction* Fn, bool Late) {
	SCClass* Interface = SC_Class_InterfaceForBehaviour(Self, Fn);
	JB_Incr(Interface);
	if (!Interface) {
		JB_Decr(Interface);
		return;
	}
	Message* Prm = JB_Msg_FindSyx(Fn->Source, kJB_SyxPrm);
	JB_Incr(Prm);
	if (!Prm) {
		JB_Msg_Fail(Fn->Source, JB_LUB[1786]);
		JB_Decr(Prm);
		JB_Decr(Interface);
		return;
	}
	Message* F = ((Message*)JB_Ring_First(Prm));
	JB_Incr(F);
	JB_Decr(Prm);
	if (F) {
		SC_Func_DeclsPrototypeInterface(Fn, F, Interface, Late);
	}
	JB_Decr(Interface);
	JB_Decr(F);
}

void SC_Class_FillInterFaceWrapper(SCClass* Self, SCFunction* Fn) {
	SCClass* Interface = SC_Class_InterfaceForBehaviour(Self, Fn);
	JB_Incr(Interface);
	if (!Interface) {
		JB_Decr(Interface);
		return;
	}
	Message* Prm = JB_Msg_FindSyx(Fn->Source, kJB_SyxPrm);
	JB_Incr(Prm);
	if (!Prm) {
		JB_Msg_Fail(Fn->Source, JB_LUB[1786]);
		JB_Decr(Prm);
		JB_Decr(Interface);
		return;
	}
	Message* F = ((Message*)JB_Ring_First(Prm));
	JB_Incr(F);
	JB_Decr(Prm);
	if (!F) {
		JB_Decr(F);
		JB_Decr(Interface);
		return;
	}
	SC_Func_DeclsProtoCleanup(Fn, Interface, F, true, false, nil);
	JB_Decr(Interface);
	JB_Decr(F);
	if (!JB_Rec_OK(JB_StdErr)) {
		return;
	}
	Message* Prms = JB_Msg_FindNested(Fn->Source, kJB_SyxSThg, JB_LUB[26], false);
	JB_Incr(Prms);
	if (!Prms) {
		JB_Object_Fail(nil);
		JB_Decr(Prms);
		return;
	}
	Message* WriteTo = ((Message*)JB_Ring_Parent(Prms));
	JB_Incr(WriteTo);
	WriteTo->Func = kJB_SyxPrm;
	JB_Tree_Remove(Prms);
	JB_Decr(Prms);
	MessagePosition Using = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Fn->Source, (&Using));
	Message* CopyFrom = ((Message*)JB_Tree_Second(Fn->Source));
	JB_Incr(CopyFrom);
	JB_Msg_AppendSyx(WriteTo, kJB_SyxThg, JB_LUB[180]);
	{
		Message* C = ((Message*)JB_Ring_First(CopyFrom));
		JB_Incr(C);
		while (C) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(C));
			JB_Incr(_Nf1);
			if (JB_Msg_EqualsSyx(C, kJB_SyxDecl, false)) {
				Message* It = SC_Msg_DeclName(C);
				JB_Incr(It);
				if (It) {
					JB_Msg_AppendSyx(WriteTo, kJB_SyxThg, It->Name);
				}
				JB_Decr(It);
			}
			JB_SetRef(C, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(C);
		;
	}
	;
	JB_Decr(WriteTo);
	JB_Decr(CopyFrom);
	JB_MsgPos_Destructor((&Using));
}

void SC_Class_FillRoleConstructor(SCClass* Self, SCFunction* Con) {
	{
		SCFunction* F = Con;
		while (F) {
			(SC_Func_SyntaxIsSet(F, kSC__FunctionType_Constructor, true));
			if (SC_Class_IsTask(Self)) {
				SC_Class_FillTaskConstructor(Self, F);
			}
			F = F->NextFunc;
		};
	};
}

void SC_Class_FillTaskConstructor(SCClass* Self, SCFunction* Con) {
	Message* Src = Con->Source;
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Src, (&_usingf0));
	SC_Class_FillTaskConstructorSub(Self, Src, SC_Msg_TaskConBefore(((Message*)JB_Ring_Last(Src))), 0);
	SCModule* P = ((SCModule*)JB_Object_FastAs(Self->Modul->Parent, &SCModuleData));
	if (P) {
		SCClass* C = P->Cls;
		if (C) {
			SC_Base_TryAdd(C, Src, Con, Self->Name);
		}
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Src);
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Class_FillTaskConstructorSub(SCClass* Self, Message* Con, Message* Before, int Depth) {
	if (Depth > 16) {
		JB_Object_Fail(nil);
		return;
	}
	SCClass* Pr = Self->Super;
	if (SC_Class_IsTask(Pr)) {
		SC_Class_FillTaskConstructorSub(Pr, Con, Before, Depth + 1);
	}
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (P == nil) {
				break;
			}
			Message* S = P->Source;
			if (S) {
				if (JB_Msg_SyntaxIs(S, kJB__MsgParseFlags_Special)) {
					SC_Msg_MakeTaskVar(S, Con, Before, Depth == 0);
				}
			}
			(++_if0);
		};
	};
}

SCFunction* SC_Class_FindAllocFunc(SCClass* Self, JB_String* Fname, bool DontCreate) {
	SCFunction* It = SC_Class_FindSpecialFunc(Self, Fname, false);
	if (It) {
		return It;
	}
	if ((!DontCreate) and (!Self->IsWrapper)) {
		return SC_Class_CreateEmptyFunc(Self, Fname, JB_LUB[0]);
	}
	return nil;
}

SCClass* SC_Class_FindContainedClass(SCClass* Self) {
	Message* C = JB_Msg_NeedSyx(JB_Msg_FindSyxName(SC_Base_SourceArg(Self), kJB_SyxTmp, JB_LUB[1154], false), kJB_SyxNil);
	if (!C) {
		if (SC_Class_SyntaxIs(Self, kSC__ClassInfo_ContainsParentClass)) {
			SCNode* P = Self->Modul->Parent;
			if (JB_Object_FastIsa(P, &SCModuleData)) {
				return ((SCModule*)P)->Cls;
			}
		}
		return nil;
	}
	SCModule* M = Self->Modul;
	if (JB_Msg_EqualsSyx(C, kJB_SyxQues, false)) {
		if ((!JB_Msg_SyntaxEquals(C, JB_LUB[1155], false))) {
			JB_Msg_Fail(C, nil);
			return nil;
		}
		SCModule* P = ((SCModule*)M->Parent);
		if (!(P and P->Cls)) {
			JB_Msg_Fail(C, JB_LUB[1156]);
			return nil;
		}
		(SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_ContainsParentClass, true));
		return P->Cls;
	}
	SCClass* Cls = SC_Base_FindClassMsg(M, C, kSC__SCNodeFindMode_WantAType);
	if (Cls) {
		(SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_ContainsParentClass, (!true)));
		return Cls;
	}
	return nil;
}

SCFunction* SC_Class_FindFunc(SCClass* Self, JB_String* Keyword, bool CheckParents, bool DoError) {
	{
		SCClass* B = Self;
		while (B) {
			SCFunction* Fn = SC_Class_GetFunc(B, Keyword, DoError);
			if (Fn) {
				return Fn;
			}
			if (!CheckParents) {
				break;
			}
			B = B->Super;
		};
	}
	;
	return nil;
}

void SC_Class_FindNilChecker(SCClass* Self) {
	SCFunction* Cast = SC_Class_FindSpecialFunc(Self, JB_LUB[1667], false);
	JB_Incr(Cast);
	if (!SC_Class_IsStruct(Self)) {
		(SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_HasNilChecker, true));
	}
	SCClass* S = Self->Super;
	JB_Incr(S);
	if (S) {
		((SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_HasNilChecker, (SC_Class_SyntaxIs(S, kSC__ClassInfo_HasNilChecker)))));
		JB_SetRef(Self->TheBoolFunc, S->TheBoolFunc);
		JB_SetRef(Self->Casts, JB_Array_Copy(S->Casts));
	}
	 else {
		JB_SetRef(Self->Casts, JB_Array_Constructor0(nil));
	}
	{
		SCFunction* F = Cast;
		JB_Incr(F);
		while (F) {
			(SC_Func_SyntaxIsSet(F, kSC__FunctionType_Inline, true));
			if ((!JB_Array_SyntaxEquals(F->Args, 1, false))) {
				JB_Msg_Fail(F->Source, JB_LUB[1668]);
			}
			SC_Func_DontWantSameReturnType(F->NextFunc, F);
			JB_Array_SyntaxAppend(Self->Casts, F);
			SCDecl* Ret = F->ReturnType;
			JB_Incr(Ret);
			if (!Ret) {
				if (true) {
					JB_Msg_Fail(F->Source, JB_LUB[1669]);
				}
			}
			 else if (SC_Decl_IsNormalBool(Ret)) {
				bool OK = ((!SC_Func_SyntaxIs(F, kSC__FunctionType_Disabled)));
				if (OK) {
					SCDecl* _tmPf1 = ((SCDecl*)JB_Array_First(F->Args));
					JB_Incr(_tmPf1);
					_tmPf1->NilDeclared = kSC__NilState_Optional;
					JB_Decr(_tmPf1);
				}
				Message* _tmPf2 = SC_Func_SourceArg(F);
				JB_Incr(_tmPf2);
				int Mode = SC_Msg_NilCheckMode(_tmPf2, OK);
				JB_Decr(_tmPf2);
				F->IsNilChecker = Mode;
				(SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_HasNilChecker, true));
				JB_SetRef(Self->TheBoolFunc, F);
			}
			JB_Decr(Ret);
			JB_SetRef(F, F->NextFunc);
		};
		JB_Decr(F);
		JB_Decr(S);
	}
	;
	JB_Decr(Cast);
}

SCDecl* SC_Class_FindPropAlignedTo(SCClass* Self, int Align, Array* Dest) {
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* S = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (S == nil) {
				break;
			}
			if (((!SC_Decl_SyntaxIs(S, kSC__SCDeclInfo_Grabbed))) and (Align == SC_Decl_Alignment(S))) {
				(SC_Decl_SyntaxIsSet(S, kSC__SCDeclInfo_Grabbed, true));
				return S;
			}
			(++_if0);
		};
	}
	;
	return nil;
}

SCFunction* SC_Class_FindSpecialFunc(SCClass* Self, JB_String* Keyword, bool CheckParents) {
	JB_String* _tmPf0 = JB_Str_LowerCase(Keyword);
	JB_Incr(_tmPf0);
	SCFunction* _tmPf1 = SC_Class_FindFunc(Self, _tmPf0, CheckParents, true);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCFunction* SC_Class_FirstDestructor(SCClass* Self) {
	{
		SCClass* P = Self;
		while (P) {
			SCFunction* Fn = P->DestructorFunc;
			if (!Fn) {
				int A = 1;
			}
			 else if (P->IsWrapper and P->Super) {
				return Fn;
			}
			 else if (SC_Class_HasStuffToHandleInDestructor(P) or JB_Ring_HasChildren(SC_Func_SourceArg(Fn))) {
				return Fn;
			}
			P = P->Super;
		};
	}
	;
	return nil;
}

int SC_Class_GetDepth(SCClass* Self) {
	int Rz = 0;
	uint D = Self->Depth;
	if (D) {
		if (D == 255) {
			SC_SCObject_Fail(Self, JB_LUB[849]);
			return 0;
		}
		return D;
	}
	Self->Depth = 255;
	Rz = 1;
	SCClass* S = Self->Super;
	if (S) {
		(Rz = JB_int_OperatorMax(Rz, (SC_Class_GetDepth(S) + 1)));
	}
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (P == nil) {
				break;
			}
			SCDecl* T = SC_Decl_CArrayInner(P);
			if ((SC_Class_IsStruct(T->Type)) and (T->PointerCount == 0)) {
				(Rz = JB_int_OperatorMax(Rz, (SC_Class_GetDepth(T->Type) + 1)));
			}
			(++_if0);
		};
	}
	;
	if (Rz >= 64) {
		SC_SCObject_Fail(Self, JB_LUB[845]);
	}
	Self->Depth = Rz;
	Message* Msg = Self->Defawlt;
	if (Msg) {
		if (SC_Class_IsObject(Self) and (!(SC_Msg_OperatorIsThing(Msg, JB_LUB[36])))) {
			(SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_DefaultsToReal, true));
			Self->TypeNormal->NilDeclared = kSC__NilState_Real;
		}
	}
	return Rz;
}

SCClass* SC_Class_GetFlyingMemClass(SCClass* Self) {
	return SC_Comp__FindClassName(JB_LUB[1157], 0);
}

SCDecl* SC_Class_GetFlyingMemory(SCClass* Self, Message* Exp) {
	SCObject* Decl = SC_Base_SyntaxAccessWithStr(Self->Modul, JB_LUB[997]);
	JB_Incr(Decl);
	if (JB_Object_FastIsa(Decl, &SCDeclData)) {
		if ((!JB_Msg_EqualsSyx(Exp, kJB_SyxThg, false))) {
			JB_Object_Fail(nil);
			JB_Decr(Decl);
			return nil;
		}
		Message* Thg = (JB_Syx_Msg(kJB_SyxThg, Exp->Name));
		JB_Incr(Thg);
		JB_SetRef(Thg->Obj, Decl);
		JB_Tree_SyntaxAppend(Exp, Thg);
		JB_Decr(Thg);
		JB_Msg_BecomeStr(Exp, kJB_SyxBRel, JB_LUB[48]);
		if (!((SCDecl*)Decl)->PointerCount) {
			JB_SetRef(Decl, SC_Decl_GetAddress(((SCDecl*)Decl), kSC__DeclMode_Always));
		}
		JB_SafeDecr(Decl);
		return ((SCDecl*)Decl);
	}
	JB_Decr(Decl);
	return nil;
}

SCFunction* SC_Class_GetFunc(SCClass* Self, JB_String* Keyword, bool DoError) {
	SCObject* O = ((SCObject*)JB_Dict_Value0(Self->Access, Keyword));
	if (O) {
		if (JB_Object_FastIsa(O, &SCFunctionData)) {
			return ((SCFunction*)O);
		}
		if (!((!SC_Class_IsObject(Self)) or (!DoError))) {
			JB_Msg_Fail(Self->Source, JB_Str_OperatorPlus(Keyword, JB_LUB[850]));
		}
	}
	return nil;
}

SCIterator* SC_Class_GetIteratorAny(SCClass* Self, JB_String* Name, Message* Node) {
	if (!JB_Str_Exists(Name)) {
		Name = JB_LUB[998];
	}
	{
		SCClass* C = Self;
		while (C) {
			SCObject* R = SC_Base_SyntaxAccessWithStr(C, Name);
			if (JB_Object_FastIsa(R, &SCIteratorData)) {
				return ((SCIterator*)R);
			}
			C = C->Super;
		};
	}
	;
	SC_Class_Iterfailed(Self, Name, Node);
	return nil;
}

SCClass* SC_Class_GoUpTo(SCClass* Self, int D) {
	SCClass* S = Self;
	while (S and (S->Depth > D)) {
		S = S->Super;
	};
	return S;
}

void SC_Class_GrabRemaining(SCClass* Self, Array* Dest) {
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = JB_Array_Size(_LoopSrcf2) - 1;
		while (true) {
			SCDecl* S = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (S == nil) {
				break;
			}
			if (!SC_Decl_SyntaxIs(S, kSC__SCDeclInfo_Grabbed)) {
				SC_Class_AlignSub(Self, Dest, S);
			}
			(--_if0);
		};
	};
}

bool SC_Class_HasObjectProperties(SCClass* Self) {
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (P == nil) {
				break;
			}
			if (SC_Decl_IsNormalObject(P)) {
				return true;
			}
			(++_if0);
		};
	}
	;
	return false;
}

bool SC_Class_HasOperator(SCClass* Self, JB_String* Op) {
	SCObject* Obj = SC_Base_SyntaxAccessWithStr(Self, Op);
	if (JB_Object_FastIsa(Obj, &SCFunctionData)) {
		return true;
	}
	return false;
}

bool SC_Class_HasPackChildren(SCClass* Self) {
	{
		Array* _LoopSrcf2 = Self->Children;
		int _if0 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf2, _if0));
			if (C == nil) {
				break;
			}
			if ((!C->IsRole) and (!SC_Base_IsLibrary(C))) {
				return true;
			}
			if (SC_Class_HasPackChildren(C)) {
				return true;
			}
			(++_if0);
		};
	}
	;
	return false;
}

bool SC_Class_HasStuffToHandleInDestructor(SCClass* Self) {
	{
		SCClass* P = Self;
		while (P) {
			{
				Array* _LoopSrcf3 = P->Properties;
				int _if1 = 0;
				while (true) {
					SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1));
					if (D == nil) {
						break;
					}
					if (SC_Decl_HasStructDestructor(D)) {
						return true;
					}
					if (SC_Decl_IsReffable(D, true)) {
						return true;
					}
					(++_if1);
				};
			}
			;
			P = P->Super;
		};
	}
	;
	return false;
}

SCClass* SC_Class_InterfaceFor(SCClass* Self, JB_String* Name, Message* Errplace) {
	SCModule* Result = nil;
	{
		SCClass* C = Self;
		while (C) {
			SCBehaviour* B = C->Behaviour;
			if (B) {
				SCModule* I = ((SCModule*)JB_Dict_Value0(B->Interfaces, Name));
				if (I) {
					Result = SC_Mod_OneOrOther(Result, I, Name);
				}
			}
			C = C->Super;
		};
	}
	;
	if (!Result) {
		JB_Msg_Fail(Errplace, JB_LUB[1083]);
		return nil;
	}
	return Result->Cls;
}

SCClass* SC_Class_InterfaceForBehaviour(SCClass* Self, SCFunction* Fn) {
	JB_String* Name = JB_Str_LowerCase(Fn->Name);
	JB_Incr(Name);
	if (SC_Str_UnderScoreAtAnyEnd(Name)) {
		JB_SetRef(Name, SC_Str_InterfaceToBehaviour(Name));
	}
	if (JB_Str_Last(Name, 0) == '0') {
		JB_SetRef(Name, JB_Str_Range(Name, 0, JB_Str_Length(Name) - 1));
	}
	if ((!SC_Str_UnderScoreAtAnyEnd(Name))) {
		JB_SetRef(Name, JB_Str_Moat(Name));
	}
	SCClass* _tmPf0 = SC_Class_InterfaceFor(Self, Name, Fn->Source);
	JB_Incr(_tmPf0);
	JB_Decr(Name);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

bool SC_Class_IsA(SCClass* Self, SCClass* S) {
	{
		SCClass* P = Self;
		while (P) {
			if (P == S) {
				return true;
			}
			P = P->Super;
		};
	}
	;
	return false;
}

bool SC_Class_IsBehaviourTable(SCClass* Self) {
	if (!Self) {
		return nil;
	}
	return Self->Behaviourness == kSC__Beh_kBehaviourTable;
}

bool SC_Class_IsDataTypeOnly(SCClass* Self) {
	return SC_SCNodeType_SyntaxIs(Self->BaseType, kSC__SCNodeType_DataType);
}

bool SC_Class_IsDataTypeOrFP(SCClass* Self) {
	return SC_SCNodeType_SyntaxIs(Self->BaseType, kSC__SCNodeType_DataType) or SC_SCNodeType_SyntaxIs(Self->BaseType, kSC__SCNodeType_FuncProto);
}

bool SC_Class_IsFunc(SCClass* Self) {
	return ((bool)Self->FuncProto);
}

bool SC_Class_IsInterface(SCClass* Self) {
	if (Self) {
		return ((bool)(Self->Behaviourness & kSC__Beh_kBehaviourProto));
	}
	return false;
}

bool SC_Class_IsMArray(SCClass* Self, Message* Arr) {
	if ((!Arr) or JB_Tree_HasOneChild(Arr)) {
		return SC_Class_IsDataTypeOrFP(Self) or SC_Class_IsStruct(Self);
	}
	return false;
}

bool SC_Class_IsObject(SCClass* Self) {
	return SC_SCNodeType_SyntaxIs(Self->BaseType, kSC__SCNodeType_Object);
}

bool SC_Class_IsSaveableObject(SCClass* Self) {
	if (!SC_Class_IsObject(Self)) {
		return nil;
	}
	if (Self->IsRole) {
		return nil;
	}
	JB_String* S = Self->SaveAs;
	JB_Incr(S);
	bool _tmPf0 = JB_Str_Exists(S) and ((!JB_Str_Equals(S, JB_LUB[36], false)));
	JB_Decr(S);
	return _tmPf0;
}

bool SC_Class_IsSaveableStruct(SCClass* Self) {
	if (!SC_Class_IsStruct(Self)) {
		return nil;
	}
	return ((JB_Str_Equals(Self->SaveAs, JB_LUB[37], false)));
}

bool SC_Class_IsStruct(SCClass* Self) {
	return SC_SCNodeType_SyntaxIs(Self->BaseType, kSC__SCNodeType_Struct);
}

bool SC_Class_IsTask(SCClass* Self) {
	return Self and (Self->IsRole & 2);
}

void SC_Class_Iterfailed(SCClass* Self, JB_String* Name, Message* Node) {
	if (true) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[851]);
		JB_FS_AppendString(_fsf0, Name);
		JB_FS_AppendString(_fsf0, JB_LUB[852]);
		JB_FS_AppendString(_fsf0, Self->Name);
		JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
		JB_Incr(_tmPf1);
		JB_Decr(_fsf0);
		JB_Msg_Fail(Node, _tmPf1);
		JB_Decr(_tmPf1);
	}
}

void SC_Class_LoadClassType(SCClass* Self) {
	if (SC_Class_IsObject(Self)) {
		JB_SetRef(Self->ClassType, SC_Class_MakeClassType(Self, Self->TypeNormal));
	}
}

void SC_Class_LoadConstructors(SCClass* Self) {
	SC_Base_Use(Self);
	SC_Class_CreateConstructors(Self);
	SCClass* S = Self->Super;
	JB_Incr(S);
	if (S) {
		if (SC_Class_SyntaxIs(S, kSC__ClassInfo_NoEarlyFree)) {
			(SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_NoEarlyFree, true));
		}
	}
	JB_Decr(S);
	JB_ClassData_Restore((&MessageData));
}

void SC_Class_LoadLinkage(SCClass* Self) {
	Message* Arg = SC_Base_LinkagePlace(Self);
	if (!Arg) {
		return;
	}
	Self->NoAutoComplete = SC_Msg_DeprecatedClassOption(Arg, JB_LUB[1084], JB_LUB[174]);
	((SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_NoEarlyFree, ((bool)SC_Msg_DeprecatedClassOption(Arg, JB_LUB[1085], JB_LUB[1086])))));
	((SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_TreatAsBaseType, ((bool)SC_Msg_DeprecatedClassOption(Arg, JB_LUB[1085], JB_LUB[1087])))));
	Self->MinOpt = SC_Msg_DeprecatedClassOption(Arg, JB_LUB[1088], JB_LUB[1028]);
}

void SC_Class_LoadModuleForCls(SCClass* Self, Message* Node, SCNode* P) {
	SCModule* M = Self->Modul;
	JB_Incr(M);
	M->Project = SC__Imp_Curr;
	M->Parent = P;
	JB_SetRef(M->Cls, Self);
	JB_SetRef(M->Name, Self->Name);
	if (Node) {
		SC_MoveFutureStaticsIn(Node);
		SC_Mod_LoadModule(M, Node);
	}
	 else {
		JB_SetRef(M->Source, Self->Source);
	}
	JB_Decr(M);
}

void SC_Class_LoadSaver(SCClass* Self) {
	while (true) {
		Message* _tmPf1 = SC_Base_SourceArg(Self);
		JB_Incr(_tmPf1);
		Message* Msg = JB_Msg_FindSyxName(_tmPf1, kJB_SyxTmp, JB_LUB[1240], false);
		JB_Incr(Msg);
		JB_Decr(_tmPf1);
		if (!Msg) {
			JB_Decr(Msg);
			break;
		}
		Message* _tmPf0 = JB_Msg_NeedSyx(Msg, kJB_SyxThg);
		JB_Incr(_tmPf0);
		if (!_tmPf0) {
			JB_Decr(_tmPf0);
			JB_Decr(Msg);
			return;
		}
		JB_String* S = JB_Str_LowerCase(_tmPf0->Name);
		JB_Incr(S);
		JB_Decr(_tmPf0);
		if ((JB_Str_Equals(S, JB_LUB[36], false)) or ((JB_Str_Equals(S, JB_LUB[880], false)) or (JB_Str_Equals(S, JB_LUB[37], false)))) {
			JB_SetRef(Self->SaveAs, S);
		}
		 else if ((JB_Str_Equals(S, JB_LUB[1241], false))) {
			(SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_SavingCanSkip, true));
		}
		 else {
			JB_SetRef(Self->SaveAs, S);
			if (!JB_FreeIfDead(SC_Comp__SyntaxAccess(Msg))) {
				JB_Decr(S);
				JB_Decr(Msg);
				return;
			}
		}
		JB_Decr(S);
		JB_Tree_Remove(Msg);
		JB_Decr(Msg);
	};
	if (!JB_Str_Exists(Self->SaveAs)) {
		JB_SetRef(Self->SaveAs, SC_Class_LoadSaverSub(Self));
	}
}

JB_String* SC_Class_LoadSaverSub(SCClass* Self) {
	if (Self == SC_TypeBool) {
		return JB_LUB[147];
	}
	 else if (SC_Class_NumericCount(Self) == 1) {
		if (SC_Class_IsA(Self, SC_Typefloat)) {
			return JB_LUB[154];
		}
		 else if (SC_Class_IsA(Self, SC_TypeFloat64)) {
			return JB_LUB[400];
		}
		 else {
			return JB_LUB[152];
		}
	}
	 else if (SC_Class_NumericCount(Self)) {
		uint D = Self->TypeInfo;
		if (JB_TC_IsFloat(D)) {
			if (JB_TC_ItemBitCount(D) == 32) {
				return JB_LUB[154];
			}
		}
		 else {
			if (JB_TC_ItemBitCount(D) == 32) {
				return JB_LUB[152];
			}
		}
		return JB_LUB[0];
	}
	 else if (SC_Class_IsObject(Self)) {
		if (Self == SC_TypeString) {
			return JB_LUB[102];
		}
		 else if (Self == SC_TypeSaveable) {
			return JB_LUB[435];
		}
	}
	SCClass* S = Self->Super;
	if (S) {
		return S->SaveAs;
	}
	return JB_LUB[0];
}

void SC_Class_LoadSuperBehaviours(SCClass* Self) {
	SCClass* S = Self->Super;
	SCBehaviour* B = Self->Behaviour;
	if (B) {
		while (S and (!S->Behaviour)) {
			S = S->Super;
		};
		if (S) {
			JB_SetRef(B->FuncTable->Cls->Super, S->Behaviour->FuncTable->Cls);
		}
	}
}

void SC_Class_LoadSuperClass(SCClass* Self) {
	SCNode* OldMod = Self->Modul->Parent;
	if (!OldMod) {
		Self->Modul->Parent = SC__Comp_program;
	}
	Message* P = Self->Source;
	if (!P) {
		return;
	}
	Message* Supc = ((Message*)JB_Tree_Second(P));
	SCClass* S = nil;
	if ((!JB_Msg_EqualsSyx(Supc, kJB_SyxBra, false))) {
		if (Supc) {
			if ((!JB_Msg_EqualsSyx(Supc, kJB_SyxArg, false))) {
				JB_Msg_Fail(Supc, nil);
				return;
			}
		}
		if ((SC_Class_IsObject(Self)) and (Self != SC_TypeObject)) {
			S = SC_TypeObject;
		}
	}
	 else {
		Message* Thg = JB_Msg_NeedSyx(Supc, kJB_SyxNil);
		if (!Thg) {
			return;
		}
		if (JB_Msg_EqualsSyx(Thg, kJB_SyxSDot, false)) {
			Thg->Func = kJB_SyxThg;
			S = SC_Base_FindClassMsg(Self->Modul, Thg, 0);
		}
		 else if (OldMod) {
			S = SC_Base_FindClassMsg(OldMod, Thg, kSC__SCNodeFindMode_WantAType);
		}
		 else {
			S = SC_Comp__SyntaxAccess(Thg);
		}
		if (!S) {
			0;
		}
		 else if (Self->FuncProto) {
			if (true) {
				JB_Msg_Fail(Supc, JB_LUB[1242]);
			}
		}
		 else if (SC_Class_IsDataTypeOnly(Self)) {
			if (!SC_Class_IsDataTypeOnly(S)) {
				JB_Msg_Fail(Supc, JB_LUB[1243]);
			}
		}
		 else if (SC_Class_IsStruct(Self)) {
			if (!SC_Class_IsStruct(S)) {
				JB_Msg_Fail(Supc, JB_LUB[1244]);
			}
		}
		 else {
			if (!SC_Class_IsObject(S)) {
				JB_Msg_Fail(Supc, JB_LUB[1245]);
			}
		}
	}
	if (S) {
		JB_SetRef(Self->Super, S);
		if (SC__Options_MakeInterpreter or (SC__Options_ModePack or SC__Comp_InPerry)) {
			JB_Array_SyntaxAppend(S->Children, Self);
		}
		if (!Self->IsRole) {
			(SC_Class_SyntaxIsSet(S, kSC__ClassInfo_HasSubClass, true));
		}
		 else if (!OldMod) {
			Self->Modul->Parent = S->Modul;
		}
		Self->Parent = S;
	}
}

SCDecl* SC_Class_MakeClassType(SCClass* Self, SCDecl* D) {
	SCDecl* C = SC_Decl_Constructor(nil, SC_TypeJBClass);
	SCDecl* I = SC_Decl_Constructor(nil, SC_TypeJBClass);
	JB_SetRef(C->Internal, I);
	(SC_Decl_NameSet(C, JB_Str_LowerCase(Self->Name)));
	(SC_Decl_NameSet(I, C->Name));
	JB_SetRef(C->Source, Self->Source);
	JB_SetRef(I->Source, C->Source);
	C->PointerCount = 1;
	C->NilDeclared = kSC__NilState_Real;
	I->NilDeclared = kSC__NilState_Real;
	JB_SetRef(C->Contains, D);
	(SC_Decl_SyntaxIsSet(C, kSC__SCDeclInfo_ClassObj, true));
	(SC_Decl_SyntaxIsSet(C, kSC__SCDeclInfo_Global, true));
	return C;
}

void SC_Class_ModelDecls(SCClass* Self) {
	SCClass* M = SC_Class_GetFlyingMemClass(Self);
	JB_Incr(M);
	if (M) {
		SC_Class_NewDeclInClassModule(Self, JB_LUB[997], M);
	}
	JB_Decr(M);
}

void SC_Class_NeedsDefaultValue(SCClass* Self, Message* Def, Message** Place, JB_String* Name) {
	if (Place[0]) {
		return;
	}
	if (SC_Class_IsObject(Self) and (!Self->IsRole)) {
		if (Def and (!(SC_Msg_OperatorIsThing(Def, JB_LUB[36])))) {
			if (true) {
				JB_String* _tmPf2 = JB_Str_OperatorPlus(JB_LUB[853], Self->Name);
				JB_Incr(_tmPf2);
				JB_String* _tmPf1 = JB_Str_OperatorPlus(Name, _tmPf2);
				JB_Incr(_tmPf1);
				JB_Decr(_tmPf2);
				JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[741], _tmPf1);
				JB_Incr(_tmPf0);
				JB_Decr(_tmPf1);
				SC_SCObject_Fail(Self, _tmPf0);
				JB_Decr(_tmPf0);
			}
		}
	}
	JB_SetRef(Place[0], Def);
}

bool SC_Class_NeedsExport(SCClass* Self) {
	return SC_Base_NeedsExport(Self) or SC_Class_IsBehaviourTable(Self);
}

void SC_Class_NewDeclInClassModule(SCClass* Self, JB_String* S, SCClass* T) {
	SCDecl* Dcl = SC_Decl_Constructor(nil, T);
	JB_Incr(Dcl);
	(SC_Decl_NameSet(Dcl, S));
	SC_Base_TryAdd(Self->Modul, Self->IsModel, Dcl, S);
	JB_Decr(Dcl);
}

SCDecl* SC_Class_NotConst(SCClass* Self) {
	if (!Self) {
		return nil;
	}
	SCDecl* D = Self->_NotConst;
	if (D) {
		return D;
	}
	D = Self->TypeNormal;
	if (SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_NumberConst)) {
		D = SC_Decl_CopyDecl(D, false);
		(SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_NumberConst, (!true)));
	}
	JB_SetRef(Self->_NotConst, D);
	return D;
}

int SC_Class_NumericCount(SCClass* Self) {
	if (Self) {
		return JB_TC_NumericCount(Self->TypeInfo);
	}
	return 0;
}

ClassInfo SC_Class_NumericReduction(SCClass* Self) {
	return Self->Flags & kSC__ClassInfo_NumericReduction;
}

void SC_Class_OverrideSyntax(SCClass* Self) {
	if (!JB_Rec_OK(JB_StdErr)) {
		return;
	}
	SC_Class_FindNilChecker(Self);
	((SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_HasCompareFunc, JB_FreeIfDead(SC_Class_FindSpecialFunc(Self, JB_LUB[1631], true)) != nil)));
	((SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_HasEqualsFunc, JB_FreeIfDead(SC_Class_FindSpecialFunc(Self, JB_LUB[1630], true)) != nil)));
	JB_SetRef(Self->TheIsFunc, SC_Class_FindSpecialFunc(Self, JB_LUB[1704], true));
}

void SC_Class_PackClassChildren(SCClass* Self, FastString* J) {
	if (!SC_Class_HasPackChildren(Self)) {
		return;
	}
	if (J) {
		JB_bin_Enter(J, kJB_SyxArg, JB_LUB[0]);
	}
	{
		Array* _LoopSrcf2 = Self->Children;
		int _if0 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf2, _if0));
			if (C == nil) {
				break;
			}
			if (!C->IsRole) {
				SC_Class_PackExport(C, J);
			}
			(++_if0);
		};
	}
	;
	if (J) {
		JB_bin_Exit0(J);
	}
}

void SC_Class_PackExport(SCClass* Self, FastString* J) {
	bool Output = (!SC_Base_IsLibrary(Self)) or SC_Base_IsReached(Self);
	if (!(Output or SC_Class_HasPackChildren(Self))) {
		return;
	}
	if (J) {
		JB_bin_Enter(J, kJB_SyxTmp, Self->Name);
		if (!SC_Base_IsLibrary(Self)) {
			SC_Class_DescribeInPack(Self, J);
		}
		SC_Class_PackClassChildren(Self, J);
		JB_bin_Exit0(J);
	}
	 else {
		if (Output) {
			JB_Array_SyntaxAppend(SC__PackMaker_PackGlobs, Self->ClassType);
		}
		SC_Class_PackClassChildren(Self, J);
	}
}

int SC_Class_PassableCount(SCClass* Self) {
	int Rz = 0;
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (P == nil) {
				break;
			}
			Rz = (Rz + (!SC_Decl_IsCArray(P)));
			(++_if0);
		};
	}
	;
	return Rz;
}

void SC_Class_ProcessBehaviours(SCClass* Self) {
	SC_Imp_Use(Self->Project);
	SC_Class_ProcessBehavioursSub(Self);
	SC__Imp_Curr = nil;
}

void SC_Class_ProcessBehavioursSub(SCClass* Self) {
	SC_dbg_decl_layer();
	SCBehaviour* B = Self->Behaviour;
	JB_Incr(B);
	if (!B) {
		JB_Decr(B);
		return;
	}
	SCModule* Table = B->FuncTable;
	JB_Incr(Table);
	if (!Table) {
		JB_Decr(Table);
		JB_Decr(B);
		return;
	}
	SCClass* TableCls = Table->Cls;
	JB_Incr(TableCls);
	JB_Decr(Table);
	if (!TableCls) {
		JB_Decr(TableCls);
		JB_Decr(B);
		return;
	}
	SC_dbg_decl_layer();
	{
		DictionaryReader* _FnListf0 = JB_Dict_Navigate(B->Access);
		JB_Incr(_FnListf0);
		while (true) {
			SCObject* _valuef1 = ((SCObject*)JB_DictionaryReader_NextValue(_FnListf0));
			JB_Incr(_valuef1);
			if ((!_valuef1)) {
				JB_Decr(_valuef1);
				break;
			}
			SCFunction* Fn = ((SCFunction*)_valuef1);
			JB_Incr(Fn);
			JB_Decr(_valuef1);
			SC_Class_FillInterFaceIn(Self, Fn, false);
			JB_Decr(Fn);
		};
		JB_Decr(_FnListf0);
	}
	;
	SC_dbg_decl_layer();
	{
		Array* _LoopSrcf5 = B->WrapperFuncs;
		JB_Incr(_LoopSrcf5);
		int _if3 = 0;
		while (true) {
			SCFunction* W = ((SCFunction*)JB_Array_Value(_LoopSrcf5, _if3));
			JB_Incr(W);
			if (W == nil) {
				JB_Decr(W);
				break;
			}
			SC_Class_FillInterFaceWrapper(Self, W);
			JB_Decr(W);
			(++_if3);
		};
		JB_Decr(_LoopSrcf5);
	}
	;
	SC_dbg_decl_layer();
	{
		Dictionary* _LoopSrcf8 = B->Interfaces;
		JB_Incr(_LoopSrcf8);
		DictionaryReader* _navf6 = JB_Dict_Navigate(_LoopSrcf8);
		JB_Incr(_navf6);
		JB_Decr(_LoopSrcf8);
		while (true) {
			SCModule* Interface = ((SCModule*)JB_DictionaryReader_NextValue(_navf6));
			JB_Incr(Interface);
			if (Interface == nil) {
				JB_Decr(Interface);
				break;
			}
			SC_Mod_AddInterfaceToTable(Interface, TableCls);
			JB_Decr(Interface);
		};
		JB_Decr(_navf6);
	}
	;
	JB_Decr(B);
	JB_Decr(TableCls);
}

void SC_Class_ProcessInterfaces(SCClass* Self) {
	if (!SC_Class_IsInterface(Self)) {
		return;
	}
	SCFunction* Fn = Self->FuncProto;
	JB_Incr(Fn);
	if (!Fn) {
		JB_Decr(Fn);
		return;
	}
	SCNode* L = Fn->Parent;
	JB_Incr(L);
	if (JB_Object_FastIsa(L, &SCModuleData)) {
		SCClass* Cls = ((SCModule*)L)->Cls;
		JB_Incr(Cls);
		if (Cls) {
			SC_Func_AddSelfPrm(Fn, Cls);
		}
		JB_Decr(Cls);
	}
	JB_Decr(Fn);
	JB_Decr(L);
}

void SC_Class_Reach(SCClass* Self, SCNode* From, Message* Src) {
	//;
	if (Self->MyReacher) {
		return;
	}
	Self->MyReacher = From;
	(++SC__Comp_stReachedClass);
	if (SC__Options_BannedClasses) {
		SC_Class_BannedCheck(Self, Src);
	}
	SCClass* S = Self->Super;
	if (S) {
		SC_Class_Reach(S, Self, nil);
	}
	SCBehaviour* B = Self->Behaviour;
	if (B) {
		SC_Class_Reach(B->FuncTable->Cls, Self, nil);
	}
	SCFunction* Df = Self->DestructorFunc;
	if (Df) {
		SC_Func_ReachFunc(Df, Self);
	}
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (D == nil) {
				break;
			}
			SC_Decl_TypeReach(D, Self, D->Source);
			SC_Decl_TypeReach(D->Contains, Self, D->Source);
			(++_if0);
		};
	}
	;
	SC_Class_ReachBehaviours(Self);
}

void SC_Class_ReachBehaviours(SCClass* Self) {
	//;
	{
		Dictionary* _LoopSrcf2 = Self->Access;
		JB_Incr(_LoopSrcf2);
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf2);
		JB_Incr(_navf0);
		JB_Decr(_LoopSrcf2);
		while (true) {
			SCObject* F = ((SCObject*)JB_DictionaryReader_NextValue(_navf0));
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			if (JB_Object_FastIsa(F, &SCFunctionData)) {
				if (SC_Func_IsBehaviour(((SCFunction*)F))) {
					SC_Func_ReachFunc(((SCFunction*)F), Self);
				}
			}
			JB_Decr(F);
		};
		JB_Decr(_navf0);
	};
}

bool SC_Class_Real_Isa(SCClass* Self, SCClass* Cls) {
	return SC_Class_IsA(SC_Class_RealClass(Self), Cls);
}

bool SC_Class_Real_Isa2(SCClass* Self, SCClass* Cls) {
	return SC_Class_IsA(SC_Class_RealClass(Self), SC_Class_RealClass(Cls));
}

SCClass* SC_Class_RealClass(SCClass* Self) {
	SCClass* S = Self;
	while (S and S->IsRole) {
		S = S->Super;
	};
	return S;
}

SCClass* SC_Class_RealSuper(SCClass* Self) {
	SCClass* S = Self->Super;
	if (S) {
		return SC_Class_RealClass(S);
	}
	return nil;
}

void SC_Class_RenameInterfaces(SCClass* Self) {
	SCBehaviour* B = Self->Behaviour;
	JB_Incr(B);
	if (!B) {
		JB_Decr(B);
		return;
	}
	{
		Dictionary* _LoopSrcf2 = B->Interfaces;
		JB_Incr(_LoopSrcf2);
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf2);
		JB_Incr(_navf0);
		JB_Decr(_LoopSrcf2);
		while (true) {
			SCModule* F = ((SCModule*)JB_DictionaryReader_NextValue(_navf0));
			JB_Incr(F);
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			SCClass* It = F->Cls;
			JB_Incr(It);
			JB_Decr(F);
			if (It) {
				JB_SetRef(It->Name, JB_Str_OperatorPlus(It->CppClass, It->Name));
			}
			JB_Decr(It);
		};
		JB_Decr(_navf0);
	}
	;
	JB_Decr(B);
}

JB_String* SC_Class_Render(SCClass* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FreeIfDead(SC_Named_Render(Self, Fs));
	if (SC_Class_IsStruct(Self)) {
		JB_FS_AppendString(Fs, JB_LUB[436]);
	}
	if (SC_Class_NumericCount(Self)) {
		JB_FS_AppendString(Fs, JB_LUB[437]);
	}
	if (Self->FuncProto) {
		JB_FS_AppendString(Fs, JB_LUB[438]);
	}
	 else if (SC_Class_IsDataTypeOnly(Self)) {
		JB_FS_AppendString(Fs, JB_LUB[439]);
	}
	if (Self->IsModel) {
		JB_FS_AppendString(Fs, JB_LUB[440]);
	}
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Class_RenderSaveable(SCClass* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '"');
	SC_Class_RenderSaveableSub(Self, Fs);
	JB_FS_RemoveByte(Fs, ' ');
	JB_FS_RemoveByte(Fs, ',');
	JB_FS_AppendByte(Fs, '"');
}

bool SC_Class_RenderSaveableSub(SCClass* Self, FastString* Fs) {
	SCClass* S = Self->Super;
	JB_Incr(S);
	if (S) {
		if (!(SC_Class_RenderSaveableSub(S, Fs) or true)) {
			JB_Decr(S);
			return nil;
		}
	}
	{
		Array* _LoopSrcf2 = Self->Properties;
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(P);
			if (P == nil) {
				JB_Decr(P);
				break;
			}
			JB_String* ST = SC_Decl_IsSaveable(P);
			JB_Incr(ST);
			if (JB_Str_Exists(ST) and (!JB_Str_Equals(ST, JB_LUB[36], false))) {
				if ((JB_Str_Equals(ST, JB_LUB[37], false))) {
					JB_SetRef(ST, P->Type->Name);
				}
				JB_FS_AppendByte(Fs, '|');
				JB_FS_AppendString(Fs, ST);
				JB_FS_AppendByte(Fs, '|');
				JB_FS_AppendByte(Fs, ' ');
				JB_FS_AppendString(Fs, P->Name);
				JB_FS_AppendByte(Fs, ',');
				JB_FS_AppendByte(Fs, ' ');
			}
			JB_Decr(P);
			JB_Decr(ST);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
		JB_Decr(S);
	}
	;
	return true;
}

void SC_Class_SimplerDataTypes(SCClass* Self, FastString* Fs, SCDecl* D) {
	if (SC_Class_IsDataTypeOnly(Self)) {
		uint T = Self->TypeInfo;
		if ((JB_TC_VecCount(T) <= 1) and ((JB_TC_IsNumeric(T)) and (JB_TC_ByteCount(T) < 4))) {
			if (JB_TC_IsFloat(T)) {
			}
			if (JB_TC_IsSigned(T)) {
				JB_FS_AppendString(Fs, JB_LUB[152]);
			}
			 else {
				JB_FS_AppendString(Fs, JB_LUB[395]);
			}
			if (SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Param)) {
				JB_FS_AppendString(Fs, JB_LUB[526]);
				JB_String* _tmPf0 = SC_Class_CStructName(Self);
				JB_Incr(_tmPf0);
				JB_FS_AppendString(Fs, _tmPf0);
				JB_Decr(_tmPf0);
				JB_FS_AppendString(Fs, JB_LUB[527]);
			}
			return;
		}
	}
	JB_String* _tmPf1 = SC_Class_CStructName(Self);
	JB_Incr(_tmPf1);
	JB_FS_AppendString(Fs, _tmPf1);
	JB_Decr(_tmPf1);
}

void SC_Class_StartupSaver(SCClass* Self, JB_String* Name) {
	FastString* Dest = JB_FS_Constructor(nil);
	JB_Incr(Dest);
	bool IsStruct = ((JB_Str_Equals(Self->SaveAs, JB_LUB[37], false)));
	bool IsSave = (JB_Str_ContainsString(Name, JB_LUB[1724]));
	MessagePosition Using = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Self->Source, (&Using));
	if (IsStruct) {
		JB_FS_AppendString(Dest, JB_LUB[460]);
	}
	 else {
		JB_FS_AppendString(Dest, JB_LUB[1725]);
	}
	JB_FS_AppendString(Dest, Name);
	if (IsStruct) {
		if (IsSave) {
			JB_FS_AppendString(Dest, JB_LUB[1726]);
		}
		 else {
			JB_FS_AppendString(Dest, JB_LUB[1727]);
		}
	}
	JB_FS_AppendString(Dest, JB_LUB[1325]);
	if (IsStruct) {
		JB_FS_AppendString(Dest, JB_LUB[1728]);
	}
	 else if (Self->Super != SC_TypeSaveable) {
		JB_FS_AppendString(Dest, JB_LUB[1729]);
		JB_FS_AppendString(Dest, Name);
		JB_FS_AppendByte(Dest, '(');
		if (IsSave) {
			JB_FS_AppendString(Dest, JB_LUB[1730]);
		}
		 else {
			JB_FS_AppendString(Dest, JB_LUB[1731]);
		}
		JB_FS_AppendByte(Dest, ')');
	}
	JB_FS_AppendString(Dest, JB_LUB[1732]);
	JB_String* Str = JB_FS_GetResult(Dest);
	JB_Incr(Str);
	JB_Decr(Dest);
	Message* Src = JB_Str_Parse(Str, kJB_SyxArg, true);
	JB_Incr(Src);
	JB_Decr(Str);
	SCNode* Fn = SC_Base_CollectSub(Self, Src);
	JB_Incr(Fn);
	if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
		(SC_Func_SyntaxIsSet(((SCFunction*)Fn), kSC__FunctionType_AutoGeneratedSaver, true));
		(SC_Class_SyntaxIsSet(Self, kSC__ClassInfo_AutoGeneratedSavers, true));
	}
	JB_Decr(Fn);
	JB_Decr(Src);
	JB_MsgPos_Destructor((&Using));
}

JB_String* SC_Class_StructName(SCClass* Self) {
	if (SC_Class_IsDataTypeOrFP(Self)) {
		return Self->Name;
	}
	JB_String* _tmPf0 = SC_Base_SubProjName(Self);
	JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_Str_OperatorPlus(JB_LUB[162], Self->Name);
	JB_Incr(_tmPf1);
	JB_String* _tmPf2 = JB_Str_OperatorPlus(_tmPf0, _tmPf1);
	JB_Incr(_tmPf2);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

bool SC_Class_EqualsName(SCClass* Self, JB_String* Name, bool Aware) {
	if (Self) {
		return (JB_Str_Equals(Self->Name, Name, true));
	}
	return false;
}

bool SC_Class_EqualsType(SCClass* Self, SCNodeType D, bool Aware) {
	if (Self and (D > kSC__SCNodeType_Nil)) {
		return Self->BaseType == D;
	}
	return false;
}

bool SC_Class_SyntaxIs(SCClass* Self, ClassInfo Cls) {
	return ((bool)(Self->Flags & Cls));
}

void SC_Class_SyntaxIsSet(SCClass* Self, ClassInfo Cls, bool Value) {
	if (Value) {
		Self->Flags = (Self->Flags | Cls);
	}
	 else {
		Self->Flags = (Self->Flags & (~Cls));
	}
}

void SC_Class_TaskProperties(SCClass* Self) {
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (P == nil) {
				break;
			}
			int I = _if0;
			(SC_Decl_SyntaxIsSet(P, kSC__SCDeclInfo_Task, true));
			(++_if0);
		};
	};
}

bool SC_Class_TestBanned(SCClass* Self) {
	return SC_Comp__Banned(Self->Name);
}

void SC_Class_TryAddToProject(SCClass* Self) {
	if (Self->FuncProto) {
		return;
	}
	Message* NameNode = ((Message*)JB_Ring_First(Self->Source));
	SCModule* Mod = SC__Comp_DisamClasses;
	if (JB_Msg_EqualsSyx(NameNode, kJB_SyxDot, false)) {
		Mod = SC_Comp__FindModuleMsg(((Message*)JB_Ring_First(NameNode)), 0);
		if (!Mod) {
			return;
		}
	}
	 else {
		if ((JB_Str_Equals(Self->Name, JB_LUB[1158], false)) and JB_Object_FastIsa(Self, &SCClassData)) {
			if (((SCClass*)Self)->IsRole == 1) {
				return;
			}
		}
	}
	SC_Base_TryAdd(Mod, SC_Base_SourceArg(Self), Self->Modul, Self->Name);
}

void SC_Class_WriteStructOrUnion(SCClass* Self, FastStringCpp* Fs) {
	if (Self->IsWrapper == 2) {
		JB_FS_AppendString(Fs, JB_LUB[38]);
	}
	 else {
		JB_FS_AppendString(Fs, JB_LUB[39]);
	}
}

SCModule* SC_Class__DataTypeSub(Message* Node, SCNode* Parent, Message* ErrPlace, JB_String* ForInterface, SCNodeType BaseType) {
	if (Node->Obj) {
		return SC__Comp_program;
	}
	JB_FreeIfDead(JB_Msg_GiveArg(Node));
	SCClass* It = SC_Class__NeuClassSub(Node, Parent, ErrPlace, ForInterface, BaseType);
	JB_Incr(It);
	if (It) {
		SC_Class_ClassCollect(It);
		if ((((Array*)JB_Array_SyntaxCast(It->Properties)))) {
			JB_Msg_Fail(It->Source, JB_LUB[1670]);
			JB_Decr(It);
			return nil;
		}
		SCModule* M = It->Modul;
		JB_Incr(M);
		JB_SetRef(Node->Obj, M);
		JB_Decr(It);
		JB_SafeDecr(M);
		return M;
	}
	JB_Decr(It);
	return nil;
}

SCNode* SC_Class__ExtendOneFunc(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_Tree_SyntaxAppend(SC__Comp_ExtendList, Node);
	JB_SetRef(Node->Obj, SC__Imp_Curr);
	Message* Dot = ((Message*)JB_Ring_First(Node));
	JB_Incr(Dot);
	Message* Name = ((Message*)JB_Ring_First(Dot));
	JB_Incr(Name);
	JB_Decr(Dot);
	if (!((JB_Msg_EqualsSyx(Name, kJB_SyxThg, false)) or ((JB_Msg_EqualsSyx(Name, kJB_SyxName, false)) or (JB_Msg_EqualsSyx(Name, kJB_SyxBra, false))))) {
		JB_Msg_Fail(Name, nil);
	}
	Message* Emb = ((Message*)JB_Ring_NextSib(Name));
	JB_Incr(Emb);
	JB_Decr(Name);
	if (Emb) {
		if ((JB_Msg_EqualsSyx(Emb, kJB_SyxPrm, false))) {
			JB_Msg_Fail(Emb, JB_LUB[854]);
		}
		JB_Tree_Remove(Emb);
	}
	JB_Decr(Emb);
	return SC__Comp_program;
}

SCNode* SC_Class__GetDefault(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCClass* Cls = ((SCClass*)JB_Object_FastAs(Name_space, &SCClassData));
	JB_Incr(Cls);
	if (Cls) {
		JB_SetRef(Cls->Defawlt, JB_Msg_NeedFirst(Node));
	}
	JB_Decr(Cls);
	return nil;
}

SCNode* SC_Class__GetFalse(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		JB_SetRef(((SCClass*)Name_space)->False, JB_Msg_NeedFirst(Node));
	}
	return nil;
}

JB_String* SC_Class__LoadClassName(Message* Node) {
	Message* S = ((Message*)JB_Ring_First(Node));
	if ((JB_Msg_EqualsSyx(S, kJB_SyxThg, false)) or (JB_Msg_EqualsSyx(S, kJB_SyxDot, false))) {
		return S->Name;
	}
	if (JB_Msg_EqualsSyx(S, kJB_SyxRel, false)) {
		if (true) {
			JB_Msg_Fail(Node, JB_LUB[855]);
		}
	}
	 else {
		if (true) {
			JB_Msg_Fail(Node, JB_LUB[856]);
		}
	}
	return JB_LUB[0];
}

SCNode* SC_Class__LoadSyntax(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_String* Name = JB_Str_UpperFirst(Node->Name);
	JB_Incr(Name);
	Message* AlreadyName = JB_Msg_NeedSyx(Node, kJB_SyxThg);
	JB_Incr(AlreadyName);
	if (!AlreadyName) {
		JB_Decr(AlreadyName);
		JB_Decr(Name);
		return nil;
	}
	JB_SetRef(Node->Name, JB_LUB[537]);
	if (JB_Msg_SyntaxEquals(AlreadyName, JB_LUB[1912], true)) {
		SC_Msg_SortImprove(Node, Name_space);
	}
	JB_String* _tmPf0 = JB_Str_UpperFirst(AlreadyName->Name);
	JB_Incr(_tmPf0);
	JB_SetRef(AlreadyName->Name, JB_Str_OperatorPlus(Name, _tmPf0));
	JB_Decr(Name);
	JB_Decr(AlreadyName);
	JB_Decr(_tmPf0);
	return SC_Func__NewFunc(Node, Name_space, ErrPlace);
}

SCNode* SC_Class__NeuClass(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCNode* Rz = nil;
	JB_Incr(Rz);
	SCClass* Cls = SC_Class__NeuClassSub(Node, Name_space, ErrPlace, JB_LUB[0], kSC__SCNodeType_Object);
	JB_Incr(Cls);
	if (Cls) {
		SC_Class_ClassCollect(Cls);
		JB_SetRef(Rz, Cls->Modul);
	}
	JB_Decr(Cls);
	JB_SafeDecr(Rz);
	return Rz;
}

SCClass* SC_Class__NeuClassSub(Message* Node, SCNode* Parent, Message* ErrPlace, JB_String* ForInterface, SCNodeType Base) {
	if (!JB_Str_Exists(ForInterface)) {
		if (!SC_Base_ExpectModule(Parent, ErrPlace)) {
			return nil;
		}
	}
	Message* Arg = JB_Msg_GiveArg(Node);
	JB_Incr(Arg);
	SCModule* _tmPf1 = SC_Mod_Constructor(nil);
	JB_Incr(_tmPf1);
	SCClass* Cls = SC_Class_Constructor(nil, Node, SC_SCNodeType_HasPtrs(Base), _tmPf1);
	JB_Incr(Cls);
	JB_Decr(_tmPf1);
	Cls->BaseType = Base;
	if (SC_SCNodeType_SyntaxIs(Base, kSC__SCNodeType_Object)) {
		(SC_Class_SyntaxIsSet(Cls, kSC__ClassInfo_SortsProperties, true));
		Cls->TypeInfo = kJB__TC__voidptr;
	}
	if (SC_Class_IsDataTypeOrFP(Cls)) {
		(SC_Class_SyntaxIsSet(Cls, kSC__ClassInfo_Stateless, true));
	}
	Cls->IsRole = ((int)((JB_Msg_SyntaxEquals(Node, JB_LUB[236], true))));
	Message* SA = SC_Base_SourceArg(Cls);
	JB_Incr(SA);
	JB_Decr(SA);
	SC_Class_LoadLinkage(Cls);
	JB_Array_SyntaxAppend(SC__Comp_ClassList, Cls);
	Message* Module = JB_Msg_FindSyxName(Arg, kJB_SyxTmp, JB_LUB[166], false);
	JB_Incr(Module);
	JB_Decr(Arg);
	SC_Class_LoadModuleForCls(Cls, Module, Parent);
	JB_Decr(Module);
	if (JB_Str_Exists(ForInterface) and JB_Object_FastIsa(Parent, &SCModuleData)) {
		FastString* _fsf0 = JB_FS_Constructor(nil);
		JB_Incr(_fsf0);
		JB_FS_AppendString(_fsf0, JB_LUB[143]);
		JB_String* _tmPf2 = SC_Str_UnicodeSafeName(((SCModule*)Parent)->Cls->Name, nil);
		JB_Incr(_tmPf2);
		JB_FS_AppendString(_fsf0, _tmPf2);
		JB_Decr(_tmPf2);
		JB_FS_AppendByte(_fsf0, '_');
		JB_String* _tmPf3 = SC_Str_UnicodeSafeName(ForInterface, nil);
		JB_Incr(_tmPf3);
		JB_FS_AppendString(_fsf0, _tmPf3);
		JB_Decr(_tmPf3);
		JB_FS_AppendString(_fsf0, JB_LUB[143]);
		JB_SetRef(Cls->CppClass, JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
	}
	JB_SafeDecr(Cls);
	return Cls;
}

SCNode* SC_Class__NeuRole(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCModule* Mod = ((SCModule*)SC_Class__NeuClass(Node, Name_space, ErrPlace));
	JB_Incr(Mod);
	if (!Mod) {
		JB_Decr(Mod);
		return nil;
	}
	SCClass* Cls = Mod->Cls;
	JB_Incr(Cls);
	if (!Cls) {
		JB_Decr(Cls);
		JB_Decr(Mod);
		return nil;
	}
	Cls->IsRole = 1;
	if (!(((Array*)JB_Array_SyntaxCast(Cls->Properties)))) {
		JB_Decr(Cls);
		JB_SafeDecr(Mod);
		return Mod;
	}
	JB_Decr(Mod);
	JB_Decr(Cls);
	return nil;
}

SCNode* SC_Class__NewDataType(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	return SC_Class__DataTypeSub(Node, Name_space, ErrPlace, JB_LUB[0], kSC__SCNodeType_DataType);
}

SCNode* SC_Class__NewInnerClass(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		return SC_Class__NeuClass(Node, ((SCClass*)Name_space)->Modul, ErrPlace);
	}
	return nil;
}

SCNode* SC_Class__NewStruct(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCClass* It = SC_Class__NeuClassSub(Node, Name_space, ErrPlace, JB_LUB[0], kSC__SCNodeType_Struct);
	JB_Incr(It);
	if (It) {
		It->BaseType = kSC__SCNodeType_Struct;
		SC_Class_ClassCollect(It);
		SCModule* _tmPf0 = It->Modul;
		JB_Incr(_tmPf0);
		JB_Decr(It);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(It);
	return nil;
}

SCNode* SC_Class__ProcessAs(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	Message* Name = JB_Msg_NeedSyx(Node, kJB_SyxThg);
	JB_Incr(Name);
	if (!Name) {
		JB_Decr(Name);
		return nil;
	}
	SCClass* Cls = SC_Comp__SyntaxAccess(Name);
	JB_Incr(Cls);
	JB_Decr(Name);
	if (!Cls) {
		JB_Decr(Cls);
		return nil;
	}
	if (JB_Object_MustBe(Name_space, &SCClassData, Node)) {
		JB_SetRef(((SCClass*)Name_space)->ProcessAs, Cls);
	}
	JB_Decr(Cls);
	return SC__Comp_program;
}

SCFunction* SC_Class__ProcessExtend(Message* C, bool PreferClass, SCModule* M) {
	JB_Incr(M);
	if ((JB_Msg_EqualsSyx(C, kJB_SyxTmp, false)) and ((JB_Msg_SyntaxEquals(C, JB_LUB[238], false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[1895], false)))) {
		SC_Class__ProcessExtendOld(C, PreferClass);
		JB_Decr(M);
		return nil;
	}
	Message* Dot = JB_Msg_NeedSyx(C, kJB_SyxDot);
	JB_Incr(Dot);
	if (!Dot) {
		JB_Decr(M);
		JB_Decr(Dot);
		return nil;
	}
	Message* Name = JB_Msg_NeedSyx(Dot, kJB_SyxNil);
	JB_Incr(Name);
	if (!Name) {
		JB_Decr(M);
		JB_Decr(Name);
		JB_Decr(Dot);
		return nil;
	}
	if (!((JB_Msg_EqualsSyx(Name, kJB_SyxThg, false)) or (JB_Msg_EqualsSyx(Name, kJB_SyxName, false)))) {
		JB_Msg_Fail(Name, nil);
		JB_Decr(M);
		JB_Decr(Name);
		JB_Decr(Dot);
		return nil;
	}
	if (!M) {
		JB_SetRef(M, SC_Comp__FindModuleMsg(Name, 0));
	}
	if (!M) {
		JB_Decr(M);
		JB_Decr(Name);
		JB_Decr(Dot);
		return nil;
	}
	JB_Tree_Clear(Dot);
	Dot->Func = kJB_SyxThg;
	JB_Decr(Dot);
	SCNode* B = M;
	JB_Incr(B);
	if (JB_Msg_EqualsSyx(Name, kJB_SyxName, false)) {
		PreferClass = false;
	}
	SCClass* Mcls = M->Cls;
	JB_Incr(Mcls);
	JB_Decr(M);
	if (PreferClass and Mcls) {
		JB_SetRef(B, Mcls);
	}
	JB_Decr(Mcls);
	Name->Func = kJB_SyxThg;
	JB_Decr(Name);
	SCImport* Imp = ((SCImport*)JB_Object_FastAs(C->Obj, &SCImportData));
	JB_Incr(Imp);
	if (Imp) {
		SC_Imp_Use(Imp);
	}
	 else {
		SC_Imp_Use(B->Project);
	}
	JB_Decr(Imp);
	SCFunction* Fn = SC_Func__NewFuncSub(C, B);
	JB_Incr(Fn);
	SC_Func_TryAdd(Fn, B);
	JB_Decr(B);
	JB_SafeDecr(Fn);
	return Fn;
}

void SC_Class__ProcessExtendOld(Message* C, bool PreferClass) {
	Message* Name = JB_Msg_NeedSyx(C, kJB_SyxThg);
	JB_Incr(Name);
	if (Name) {
		Message* Arg = JB_Msg_Last(C, kJB_SyxArg);
		JB_Incr(Arg);
		SCModule* M = SC_Comp__FindModuleMsg(Name, 0);
		JB_Incr(M);
		if (M and Arg) {
			SCNode* B = M;
			JB_Incr(B);
			SCClass* Cls = M->Cls;
			JB_Incr(Cls);
			if (PreferClass and Cls) {
				JB_SetRef(B, Cls);
			}
			JB_Decr(Cls);
			SCImport* Imp = ((SCImport*)JB_Object_FastAs(C->Obj, &SCImportData));
			JB_Incr(Imp);
			if (Imp) {
				SC_Imp_Use(Imp);
			}
			 else {
				SC_Imp_Use(B->Project);
			}
			JB_Decr(Imp);
			Message* _tmPf0 = SC_Base_SourceArg(M);
			JB_Incr(_tmPf0);
			SC_Base_CollectFromNode(B, Arg, SC_Msg_visible(C), _tmPf0);
			JB_Decr(B);
			JB_Decr(_tmPf0);
		}
		JB_Decr(Arg);
		JB_Decr(M);
	}
	JB_Decr(Name);
}

SCNode* SC_Class__SetSize(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		Message* _tmPf0 = ((Message*)JB_Ring_First(Node));
		JB_Incr(_tmPf0);
		((SCClass*)Name_space)->Size = JB_Msg_Int(_tmPf0, 0);
		JB_Decr(_tmPf0);
	}
	return SC__Comp_program;
}

SCNode* SC_Class__StoreExtend(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	(SC_Msg_visibleSet(Node, SC__Base_CurrVisibility));
	JB_Tree_SyntaxAppend(SC__Comp_ExtendList, Node);
	JB_SetRef(Node->Obj, SC__Imp_Curr);
	return SC__Comp_program;
}

SCNode* SC_Class__StoreExtendModule(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_Array_SyntaxAppend(SC__Comp_ExtendModuleList, Node);
	JB_SetRef(Node->Obj, SC__Imp_Curr);
	return SC__Comp_program;
}


void SC_Func_AddConstructorReturn(SCFunction* Self, Message* Prms) {
	SCClass* C = Self->Cls;
	if (!C) {
		return;
	}
	(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_NewNew, true));
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Prms, (&_usingf0));
	Message* Dcl = JB_Msg_Msg(Prms, kJB_SyxDecl, JB_LUB[0]);
	JB_Msg_AppendSyx(JB_Msg_Msg(Dcl, kJB_SyxARel, JB_LUB[174]), kJB_SyxThg, C->Name);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Prms);
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_AddConstructorReturn2(SCFunction* Self) {
	SCClass* C = Self->Cls;
	JB_Incr(C);
	if (!(C and ((!SC_Func_SyntaxIs(Self, kSC__FunctionType_Wrapper)) and SC_Func_SyntaxIs(Self, kSC__FunctionType_NewNew)))) {
		JB_Decr(C);
		return;
	}
	Message* Args = JB_Msg_NeedSyxInt(Self->Source, kJB_SyxArg, 2);
	JB_Incr(Args);
	//using;
	Message* __varf1 = Self->Source;
	JB_Incr(__varf1);
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(__varf1, (&_usingf0));
	if (SC_Class_IsObject(C)) {
		Message* Type = JB_Msg_ConstructorNormal(nil, kJB_SyxThg, C->Name);
		JB_Incr(Type);
		if (SC_Class_IsTask(C)) {
			Message* _tmPf2 = JB_Macro_CallFast(SC__Macros_ConstructorNewTask, Type, nil);
			JB_Incr(_tmPf2);
			(JB_Ring_FirstSet(Args, _tmPf2));
			JB_Decr(_tmPf2);
		}
		 else {
			Message* _tmPf3 = JB_Macro_CallFast(SC__Macros_ConstructorNew, Type, nil);
			JB_Incr(_tmPf3);
			(JB_Ring_FirstSet(Args, _tmPf3));
			JB_Decr(_tmPf3);
		}
		JB_Decr(Type);
		Message* _tmPf4 = JB_Msg_Msg(Args, kJB_SyxTmp, JB_LUB[239]);
		JB_Incr(_tmPf4);
		JB_Msg_AppendSyx(_tmPf4, kJB_SyxThg, JB_LUB[180]);
		JB_Decr(_tmPf4);
	}
	 else {
		SCDecl* Ret = ((SCDecl*)JB_Array_First(Self->Args));
		JB_Incr(Ret);
		if (Ret) {
			Self->StructReturnPos = 1;
			(SC_Decl_SyntaxIsSet(Ret, kSC__SCDeclInfo_IntendedAsReturn, true));
		}
		JB_Decr(Ret);
	}
	JB_Decr(C);
	JB_Decr(Args);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), __varf1);
	JB_Decr(__varf1);
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_AddSelfPrm(SCFunction* Self, SCClass* Cls) {
	Message* Prms = JB_Msg_FindSyx(Self->Source, kJB_SyxPrm);
	JB_Incr(Prms);
	Message* Name = ((Message*)JB_Ring_First(Self->Source));
	JB_Incr(Name);
	if (!Name) {
		JB_Msg_Fail(Self->Source, JB_LUB[980]);
		JB_Decr(Name);
		JB_Decr(Prms);
		return;
	}
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Name, (&_usingf0));
		if (!Prms) {
			JB_SetRef(Prms, (JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0])));
			(JB_Ring_NextSibSet(Name, Prms));
		}
		Message* _tmPf1 = SC_MakeDecl(Cls->Name, JB_LUB[180], nil, 0);
		JB_Incr(_tmPf1);
		(JB_Ring_FirstSet(Prms, _tmPf1));
		JB_Decr(_tmPf1);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Name);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Prms);
	JB_Decr(Name);
}

void SC_Func_AddSelfToFunc(SCFunction* Self, SCClass* Cls, SCNode* Space) {
	SCDecl* Sl = Cls->SelfDecl;
	if (SC_Decl_TypeSuffers(Sl)) {
		Sl = SC_Decl_CopyDecl(Sl, false);
		if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Destructor)) {
			Sl = SC_Decl_MakeNewReal(Sl);
		}
		 else if ((SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor)) and SC_Class_IsObject(Cls)) {
			Sl = SC_Decl_MakeNewOptional(Sl);
		}
		(SC_Decl_SyntaxIsSet(Sl, kSC__SCDeclInfo_SelfImplicit, true));
	}
	SC_Base_TryAdd(Space, SC_Base_FuncSrc(Space), Sl, JB_LUB[180]);
	JB_Array_SyntaxAppend(Self->Args, Sl);
}

void SC_Func_AddTypeInfo(SCFunction* Self, SCDecl* Dcl) {
	if (SC_Decl_IntRegs(Dcl)) {
		Self->IntPrmCount = (Self->IntPrmCount + ((!SC_Decl_SyntaxIs(Dcl, kSC__SCDeclInfo_Return))));
	}
	 else if (SC_Decl_SyntaxIs(Dcl, kSC__SCDeclInfo_Return)) {
		(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_ReturnASMFloats, true));
	}
}

void SC_Func_AnalyseRefs(SCFunction* Self, Array* List) {
	Message* Root = SC_Func_SourceArg(Self);
	JB_Incr(Root);
	bool IsConstructor = SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor);
	{
		Message* Msg = Root;
		JB_Incr(Msg);
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Root));
		JB_Incr(_afterf1);
		while ((Msg) and (Msg != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Msg));
			JB_Incr(_N_f2);
			int It = SC_Msg_RC_HasTemporary(Msg);
			if (It) {
				if (SC_Func_DoRefs(Self) or (It != kSC__Refs_kBasisObj)) {
					SC_Refs__RC_HandleDisappearing(Msg, It);
				}
			}
			JB_SetRef(Msg, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(Msg);
		JB_Decr(_afterf1);
		;
	}
	;
	{
		Message* Msg = ((Message*)JB_Ring_First(Root));
		JB_Incr(Msg);
		Message* _After_f4 = ((Message*)JB_Ring_FlatAfter(Root));
		JB_Incr(_After_f4);
		while (Msg and (Msg != _After_f4)) {
			if (!(JB_Msg_OperatorIn(Msg, kJB_SyxArg))) {
				JB_SetRef(Msg, ((Message*)JB_Ring_FlatNext0(Msg)));
				continue;
			}
			JB_Array_SyntaxAppend(List, Msg);
			JB_SetRef(Msg, ((Message*)JB_Ring_FlatNext0(Msg)));
		};
		JB_Decr(Msg);
		JB_Decr(_After_f4);
	}
	;
	JB_Decr(Root);
	if (SC_Func_DoRefs(Self)) {
		{
			Array* _LoopSrcf7 = Self->Args;
			JB_Incr(_LoopSrcf7);
			int _if5 = 0;
			while (true) {
				SCDecl* Ar = ((SCDecl*)JB_Array_Value(_LoopSrcf7, _if5));
				JB_Incr(Ar);
				if (Ar == nil) {
					JB_Decr(Ar);
					break;
				}
				if ((SC_Decl_SyntaxIs(Ar, kSC__SCDeclInfo_Altered)) and (SC_Decl_IsNormalObject(Ar))) {
					SC_Refs__RC_DeclArg(Ar, Self);
				}
				JB_Decr(Ar);
				(++_if5);
			};
			JB_Decr(_LoopSrcf7);
		};
	}
	{
		int _if8 = JB_Array_Size(List) - 1;
		while (true) {
			Message* Msg = ((Message*)JB_Array_Value(List, _if8));
			JB_Incr(Msg);
			if (Msg == nil) {
				JB_Decr(Msg);
				break;
			}
			Syntax F = Msg->Func;
			if (F == kJB_SyxRel) {
				if (IsConstructor and SC_SettingSelfProperty(Msg)) {
					SC_Refs__RC_RelConstructor(Msg);
				}
				 else if (SC_Func_DoRefs(Self) or SC_SettingMemory(Msg)) {
					SC_Refs__RC_Rel(Msg);
				}
			}
			 else if (F == kJB_SyxDot) {
				SC_Refs__RC_IgnoreReturn(Msg);
			}
			 else if (F == kJB_SyxFunc) {
				if (!SC_Func_DoRefs(Self)) {
					SC_Refs__RC_CheckNoObjPms(Msg);
				}
				SC_Refs__RC_CheckFuncAllocOK(Self, Msg);
				SC_Refs__RC_IgnoreReturn(Msg);
			}
			 else if (SC_Msg_IsStatementExpr(Msg)) {
				SC_Refs__RC_IgnoreReturn(Msg);
			}
			 else if (F == kJB_SyxDecl) {
				SC_Refs__DeclInit(Msg, Self, false);
			}
			JB_Decr(Msg);
			(--_if8);
		};
	};
}

int SC_Func_ApparantArgCount(SCFunction* Self) {
	int A = JB_Array_Size(Self->Args);
	A = (A - ((bool)Self->Cls));
	A = (A - Self->IsAssigns);
	return A;
}

SCFunction* SC_Func_ArgsMatch(SCFunction* Self, SCDecl* Base, SCNode* Name_space, SCParamArray* Incoming, int Failed) {
	SCFunction* Rz = nil;
	Rz = SC_Func_ArgsMatch1(Self, Base, Name_space, Incoming, Failed);
	if (!Rz) {
		Rz = SC_Func_ArgsMatch1(Self, Base, Name_space, Incoming, kJB_kTypeCastAssigns | Failed);
	}
	if (Failed and (!SC_PA_MadeError(Incoming))) {
		if (true) {
			JB_Msg_Fail(Incoming->Exp, JB_Str_OperatorPlus(JB_LUB[1898], SC_Func_RenderTitle(Self, true, nil)));
		}
	}
	 else if (Rz) {
		int Altered = ((int)Rz->AltersParams) & ((1 << ((int)Incoming->Size)) - 1);
		if (Altered) {
			{
				int _currf0 = ((int)Altered);
				while (_currf0) {
					int B = JB_int_LowestBit(_currf0);
					int I = JB_Int_Log2(B);
					Message* M = Incoming->Items[I];
					if (M) {
						SCDecl* D = ((SCDecl*)JB_Object_FastAs(M->Obj, &SCDeclData));
						SC_Decl_MarkAsAltered(D);
					}
					_currf0 = (_currf0 & (~B));
				};
			};
		}
		SCDecl* Ft = SC_Func_StructReturned(Rz);
		if (Ft) {
			SC_PA_StructReturner(Incoming, SC_Decl_AsLocal(Ft), Self);
		}
		 else if (SC_Decl_SyntaxIs(Rz->ReturnType, kSC__SCDeclInfo_ReturnedStruct)) {
			SC_PA_StructExtract(Incoming, Rz->ReturnType);
		}
	}
	return Rz;
}

SCFunction* SC_Func_ArgsMatch1(SCFunction* Self, SCDecl* Base, SCNode* Name_space, SCParamArray* Incoming, int Cast) {
	SCFunction* F = SC_Func_ArgsMatch2(Self, Base, kJB_kTypeCastFalse | Cast, Name_space, Incoming);
	SCFunction* Macro = F;
	if (!SC_Func_IsReal(F)) {
		F = SC_Func_ArgsMatch2(Self, Base, kJB_kTypeCastNumbers | Cast, Name_space, Incoming);
		if (F) {
			Macro = F;
		}
		if (!SC_Func_IsReal(F)) {
			F = SC_Func_ArgsMatch2(Self, Base, kJB_kTypeCastTrue | Cast, Name_space, Incoming);
		}
	}
	if (SC_Func_IsReal(F) and Incoming->HasSide) {
		SC_Msg_AssignsFix(Incoming->Exp, F);
	}
	if (F) {
		return F;
	}
	return Macro;
}

SCFunction* SC_Func_ArgsMatch2(SCFunction* Self, SCDecl* Base, int TypeCast, SCNode* Name_space, SCParamArray* Incoming) {
	bool NeedsAlter = false;
	int OldMatch = 0;
	SCFunction* Result = nil;
	JB_Incr(Result);
	SCFunction* Missing = nil;
	JB_Incr(Missing);
	{
		SCFunction* F = Self;
		JB_Incr(F);
		while (F) {
			if (F->IsMacro) {
				JB_SetRef(Missing, F);
				JB_SetRef(F, F->NextFunc);
				continue;
			}
			int Match = SC_Func_ArgsMatch3(F, TypeCast, Base, false, Name_space, Incoming);
			if (Match) {
				if (Result) {
					SCFunction* CanKeepBetter = SC_Func_TryKeepBetter(Result, OldMatch, F, Match);
					JB_Incr(CanKeepBetter);
					if ((!CanKeepBetter)) {
						JB_Decr(CanKeepBetter);
						SCFunction* _tmPf2 = SC_PA_MultipleMatchingFunctions(Incoming, TypeCast, F, Result);
						JB_Incr(_tmPf2);
						JB_Decr(F);
						JB_Decr(Missing);
						JB_Decr(Result);
						JB_SafeDecr(_tmPf2);
						return _tmPf2;
					}
					JB_SetRef(Result, CanKeepBetter);
					JB_Decr(CanKeepBetter);
				}
				if (Match & (kJB_kNeeds | kJB_kUseDefaultParams)) {
					NeedsAlter = ((bool)Match);
				}
				if (!Result) {
					JB_SetRef(Result, F);
				}
				OldMatch = Match;
			}
			JB_SetRef(F, F->NextFunc);
		};
		JB_Decr(F);
	}
	;
	if (NeedsAlter) {
		Message* _tmPf1 = ((Message*)JB_Ring_Last(Incoming->Exp));
		JB_Incr(_tmPf1);
		_tmPf1->Func = kJB_SyxPrm;
		JB_Decr(_tmPf1);
		SC_Func_ArgsMatch3(Result, TypeCast, Base, true, Name_space, Incoming);
	}
	if (Result) {
		JB_Decr(Missing);
		JB_SafeDecr(Result);
		return Result;
	}
	JB_Decr(Result);
	JB_SafeDecr(Missing);
	return Missing;
}

int SC_Func_ArgsMatch3(SCFunction* Self, int TypeCast, SCDecl* Base, bool ThisAlter, SCNode* Name_space, SCParamArray* Incoming) {
	if (Self->IsAssigns and Self->ReturnType) {
		SCDecl* A = ((SCDecl*)JB_Array_Value(Self->Args, 0));
		JB_Incr(A);
		Message* _tmPf0 = SC_PA_SyntaxAccess(Incoming, 0);
		JB_Incr(_tmPf0);
		SCDecl* I = SC_TypeOfExpr(_tmPf0, Name_space, nil);
		JB_Incr(I);
		JB_Decr(_tmPf0);
		if (!(I and A)) {
			JB_Decr(I);
			JB_Decr(A);
			return 0;
		}
		if (!((TypeCast & kJB_kTypeCastAssigns) or ((!A->PointerCount) and SC_Decl_SyntaxIs(I, kSC__SCDeclInfo_Local)))) {
			JB_Decr(I);
			JB_Decr(A);
			return 0;
		}
		JB_Decr(A);
		JB_Decr(I);
	}
	if ((Self->IsAssigns != 0) != Incoming->HasSide) {
		if (!((TypeCast & kJB_kTypeCastAssigns) and ((!Incoming->HasSide)))) {
			return 0;
		}
	}
	int Pos = 0;
	int Result = kJB_kSimpleMatch;
	int SelfCast = SC_PA_IgnoreSelfContain(Incoming);
	TypeCast = (TypeCast | (kJB_kNoBoolTypeCast | kJB_kTypeCastWantSuperDistance));
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_NumberCreator)) {
		TypeCast = (TypeCast | kJB_kTypeCastFromSmallInt);
	}
	int Fin = JB_Array_Size(Self->Args);
	int Fi = ((int)((SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor)) and (!Incoming->AllowSelfToConstructor)));
	Fi = (Fi + ((Fi + 1) == Self->StructReturnPos));
	while (Fi < Fin) {
		SCDecl* FuncArg = ((SCDecl*)JB_Array_Value(Self->Args, Fi++));
		JB_Incr(FuncArg);
		Message* PArg_Ch = SC_PA_SyntaxAccess(Incoming, Pos);
		JB_Incr(PArg_Ch);
		SCDecl* PArg_Type = SC_TypeOfExpr(PArg_Ch, Name_space, nil);
		JB_Incr(PArg_Type);
		if (Base) {
			JB_SetRef(FuncArg, SC_Decl_ContainedReplace(FuncArg, Base, false));
		}
		Message* LArg_ch = ((Message*)JB_Ternary(ThisAlter, PArg_Ch, nil));
		JB_Incr(LArg_ch);
		int Cast = TypeCast | SelfCast;
		Cast = (Cast | SC_Msg_IntSmallness(PArg_Ch, PArg_Type));
		if ((Incoming->HasSide) and (Fi == Fin)) {
			Cast = (Cast & (~kJB_kNoBoolTypeCast));
		}
		int Matched = SC_Decl_TypeMatch(FuncArg, PArg_Type, Cast, LArg_ch);
		JB_Decr(PArg_Type);
		JB_Decr(LArg_ch);
		SelfCast = 0;
		if ((Matched != kJB_kNoMatch) and (!((Matched == kJB_kUseDefaultParams) and ThisAlter))) {
			if ((Result > kJB_kSimpleMatch) and ((Matched != kJB_kUseDefaultParams) and (Matched != kJB_kSimpleMatch))) {
				Result = (Result | kJB_kMultipleErrors);
				Matched = (Matched | kJB_kMultipleErrors);
			}
			if (Matched > Result) {
				Result = Matched;
			}
			(++Pos);
			Incoming->FailedAt = 0;
		}
		 else if ((!FuncArg->Default)) {
			if (TypeCast & kJB_kTypeCastDescribeErrors) {
				SC_Func_DescribeParamFail(Self, Incoming, Fi);
			}
			JB_Decr(PArg_Ch);
			JB_Decr(FuncArg);
			return kJB_kNoMatch;
		}
		 else if (ThisAlter) {
			Message* Prms = ((Message*)JB_Ring_Last(Incoming->Exp));
			JB_Incr(Prms);
			Message* Def = JB_Msg_Copy(FuncArg->Default, Prms);
			JB_Incr(Def);
			SC_Msg_InsertBefore(Prms, Def, PArg_Ch);
			JB_Decr(Prms);
			JB_FreeIfDead(SC_TypeOfExpr(Def, Name_space, nil));
			JB_Decr(Def);
		}
		 else {
			if (!Incoming->FailedAt) {
				Incoming->FailedAt = Fi;
			}
			Result = kJB_kUseDefaultParams;
		}
		JB_Decr(FuncArg);
		JB_Decr(PArg_Ch);
		Fi = (Fi + ((Fi + 1) == Self->StructReturnPos));
	};
	if (Pos >= Incoming->Size) {
		return Result;
	}
	if ((TypeCast & kJB_kTypeCastDescribeErrors) and (!SC_PA_MadeError(Incoming))) {
		int First = Incoming->FailedAt;
		if (First) {
			SC_Func_DescribeParamFail(Self, Incoming, First);
		}
		 else {
			if (true) {
				JB_String* _tmPf2 = SC_Func_RenderTitle(Self, true, nil);
				JB_Incr(_tmPf2);
				JB_String* _tmPf1 = JB_Str_OperatorPlus(JB_LUB[1851], _tmPf2);
				JB_Incr(_tmPf1);
				JB_Decr(_tmPf2);
				JB_Msg_Fail(Incoming->Exp, _tmPf1);
				JB_Decr(_tmPf1);
			}
			(JB_Msg_SyntaxProblem(Self->Source, kJB_kUsingStr));
		}
	}
	return 0;
}

bool SC_Func_Borked(SCFunction* Self) {
	return ((bool)(Self->Badness & 128));
}

void SC_Func_BuildConstructorDestructor(SCFunction* Self) {
	if (!Self) {
		return;
	}
	Message* TheCall = SC_Func_FindCallParents(Self);
	bool IsConstructor = SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor);
	Message* Root = SC_Func_SourceArg(Self);
	if (!Root) {
		return;
	}
	SC_Func_CheckConstructorAndDestructor(Self, Root, IsConstructor);
	if (IsConstructor) {
		if (!TheCall) {
			TheCall = ((Message*)JB_Ring_First(Root));
		}
		SC_Func_FillInMissingConstructorDefaults(Self, Root, TheCall);
	}
	if (!(JB_Rec_OK(JB_StdErr) and (!IsConstructor))) {
		return;
	}
	SCClass* C = Self->Cls;
	if (!C) {
		return;
	}
	if (!SC_Class_HasStuffToHandleInDestructor(C)) {
		if (!JB_Ring_HasChildren(Root)) {
			JB_SetRef(C->DestructorFunc, nil);
		}
	}
	 else if (!C->IsWrapper) {
		SC_Func_FillInDestructor(Self);
	}
}

void SC_Func_CallParents(SCFunction* Self) {
	if (!(SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor) or SC_Func_SyntaxIs(Self, kSC__FunctionType_Destructor))) {
		return;
	}
	if (!(SC_Func_IsARealSpdFunc(Self) and (!SC_Func_FindCallParents(Self)))) {
		return;
	}
	SCClass* C = Self->Cls;
	if (!C) {
		return;
	}
	SCClass* Parent = SC_Class_RealSuper(C);
	if (!(Parent and (Parent != SC_TypeObject))) {
		return;
	}
	uint T = C->IsRole;
	if (T == 2) {
		return;
	}
	SCFunction* Fn = SC_Func_ConOrDesForCall(Self, C, SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor), T);
	if (Fn) {
		SC_Func_CallSuperMem(Self, Fn);
	}
}

void SC_Func_CallSuperMem(SCFunction* Self, SCFunction* Fn) {
	Message* Root = SC_Func_SourceArg(Self);
	if (!Root) {
		return;
	}
	Array* Fnargs = Fn->Args;
	if (!(((JB_Array_SyntaxEquals(Fnargs, 1, false))) or SC_Class_IsTask(Self->Cls))) {
		JB_Msg_Fail(Root, JB_LUB[892]);
		return;
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Root, (&_usingf0));
	Message* PCon = SC_NewFnc(Fn->ExportName);
	Message* Lst = ((Message*)JB_Ring_Last(PCon));
	JB_SetRef(Lst->Obj, Fn);
	{
		int _if1 = 0;
		while (true) {
			SCDecl* A = ((SCDecl*)JB_Array_Value(Fnargs, _if1));
			if (A == nil) {
				break;
			}
			int I = _if1;
			Message* Msg = JB_Msg_Msg(Lst, kJB_SyxThg, A->Name);
			JB_SetRef(Msg->Obj, ((SCDecl*)JB_Array_Value(Self->Args, I)));
			(++_if1);
		};
	}
	;
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor)) {
		JB_SetRef(PCon->Obj, Fn->ReturnType);
		Message* F = ((Message*)JB_Ring_First(Root));
		if (F) {
			(JB_Ring_NextSibSet(F, PCon));
		}
		 else {
			JB_Tree_SyntaxAppend(Root, PCon);
		}
	}
	 else {
		JB_SetRef(PCon->Obj, SC_TypeVoid);
		JB_Tree_SyntaxAppend(Root, PCon);
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Root);
	JB_MsgPos_Destructor((&_usingf0));
}

bool SC_Func_CanBuildConstructor(SCFunction* Self) {
	return (SC_Func_SyntaxIs(Self, kSC__FunctionType_ConOrDes)) and SC_Func_IsARealSpdFunc(Self);
}

bool SC_Func_CanCompareAgainst(SCFunction* Self, SCDecl* Against) {
	{
		SCFunction* F = Self;
		while (F) {
			SCDecl* Arg = ((SCDecl*)JB_Array_Value(F->Args, 1));
			if (SC_Decl_TypeMatch(Arg, Against, kJB_kTypeCastNumbers, nil)) {
				return true;
			}
			F = F->NextFunc;
		};
	}
	;
	return false;
}

bool SC_Func_CanLibLoad(SCFunction* Self) {
	if ((!Self->IsMacro) and (((!SC_Func_SyntaxIs(Self, kSC__FunctionType_Disabled))) and (Self->IsCppInBuilt != 2))) {
		return true;
	}
	return false;
}

void SC_Func_CheckConstructorAndDestructor(SCFunction* Self, Message* Root, bool IsConstructor) {
	if (Self->Badness) {
		return;
	}
	bool GotSuperConstructor = false;
	SCClass* _tmPf0 = Self->Cls;
	if (!_tmPf0) {
		return;
	}
	SCClass* Sooper = _tmPf0->Super;
	if (Sooper) {
		GotSuperConstructor = ((Sooper == SC_TypeObject) or ((SC_TypeTask == Sooper->Parent) or (SC_TypeTask == Sooper)));
	}
	JB_String* NoNesting = JB_LUB[1263];
	{
		Message* Dot = Root;
		Message* _afterf2 = ((Message*)JB_Ring_FlatAfter(Root));
		while ((Dot) and (Dot != _afterf2)) {
			Message* _N_f3 = ((Message*)JB_Ring_FlatNext0(Dot));
			if (JB_Msg_EqualsSyx(Dot, kJB_SyxFunc, false)) {
				Message* Prms = ((Message*)JB_Ring_Last(Dot));
				if (Prms) {
					SCFunction* Fn = ((SCFunction*)JB_Object_FastAs(Prms->Obj, &SCFunctionData));
					Message* Pf = ((Message*)JB_Ring_First(Prms));
					if (Pf) {
						SCDecl* Pfdecl = ((SCDecl*)JB_Object_FastAs(Pf->Obj, &SCDeclData));
						if (SC_Func_SyntaxIs(Fn, kSC__FunctionType_Constructor) and SC_Decl_SyntaxIs(Pfdecl, kSC__SCDeclInfo_Self)) {
							GotSuperConstructor = true;
							if (!JB_Tree_OperatorIn(Dot, Root)) {
								JB_Msg_Fail(Dot, NoNesting);
							}
						}
					}
				}
			}
			int UsedAtAll = SC_Msg_SelfUsedForProperty(Dot);
			if (UsedAtAll) {
				SCDecl* T = SC_TypeOfExpr(Dot, nil, nil);
				if (T) {
					bool IsSet = UsedAtAll == 1;
					if (!SC_Decl_IsNormalObject(T)) {
						if (!JB_Tree_OperatorIn(((Message*)JB_Ring_Parent(Dot)), Root)) {
							Dot = _N_f3;
							continue;
						}
					}
					 else if (IsConstructor) {
						if ((!GotSuperConstructor)) {
							JB_Msg_Fail(Dot, JB_LUB[1264]);
						}
						if (!(JB_Tree_IsFirst(Dot) and IsSet)) {
							if (!SC_Decl_SyntaxIs(T, kSC__SCDeclInfo_PropertyWasConstructed)) {
								JB_Msg_Fail(Dot, JB_LUB[1265]);
							}
						}
						if (IsSet) {
							SC_Msg_SelfUsedForProperty(Dot);
							if (SC_Decl_SyntaxIs(T, kSC__SCDeclInfo_PropertyWasConstructed)) {
								JB_Msg_Fail(Dot, JB_LUB[1266]);
							}
							if (!JB_Tree_OperatorIn(((Message*)JB_Ring_Parent(Dot)), Root)) {
								JB_Msg_Fail(Dot, NoNesting);
							}
						}
					}
					 else {
						if (!(JB_Tree_IsLast(Dot) or (!IsSet))) {
							JB_Msg_Fail(Dot, JB_LUB[1267]);
						}
					}
					if (IsConstructor) {
						(SC_Decl_SyntaxIsSet(T, kSC__SCDeclInfo_PropertyWasConstructed, true));
					}
				}
			}
			Dot = _N_f3;
		};
		;
	};
}

void SC_Func_CheckNotBadName(SCFunction* Self) {
	if ((!SC_Func_ApparantArgCount(Self)) and Self->Cls) {
		int W = SC_Class_NumericCount(Self->Cls);
		if ((W > 1) and SC_Str_IsSwizzle(Self->Name, W)) {
			if (true) {
				JB_Msg_Fail(Self->Source, JB_LUB[893]);
			}
		}
	}
}

void SC_Func_CheckOofifier(SCFunction* Self) {
	if (!SC_Func_SyntaxIs(Self, kSC__FunctionType_Cpp)) {
		return;
	}
	SCClass* C = Self->Cls;
	if (!(C and SC_Class_SyntaxIs(C, kSC__ClassInfo_Stateless))) {
		return;
	}
	{
		Array* _LoopSrcf2 = Self->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (P == nil) {
				break;
			}
			if (!SC_Class_SyntaxIs(P->Type, kSC__ClassInfo_Stateless)) {
				return;
			}
			(++_if0);
		};
	}
	;
	(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_Stateless, true));
}

void SC_Func_CheckReturnValue(SCFunction* Self, Message* Msg, SCNode* Name_space) {
	(++Self->ReturnCount);
	Message* C = ((Message*)JB_Ring_First(Msg));
	JB_Incr(C);
	if ((!C)) {
		SCDecl* T = Self->ReturnType;
		JB_Incr(T);
		if (T) {
			if (!SC_Decl_SyntaxIs(T, kSC__SCDeclInfo_ReturnedStruct)) {
				JB_Msg_Fail(Msg, JB_LUB[1693]);
			}
		}
		JB_Decr(T);
		JB_Decr(C);
		return;
	}
	if (!JB_Tree_IsOnlyChild(C)) {
		JB_Msg_Fail(Msg, JB_LUB[1694]);
		JB_Decr(C);
		return;
	}
	if ((!Self->ReturnType) and (((JB_Msg_SyntaxEquals(C, JB_LUB[36], false))) and ((JB_Msg_EqualsSyx(C, kJB_SyxThg, false)) or (JB_Msg_EqualsSyx(C, kJB_SyxQues, false))))) {
		JB_Tree_Remove(C);
		JB_Decr(C);
		return;
	}
	SCDecl* FoundReturnType = SC_TypeOfExpr(C, Name_space, nil);
	JB_Incr(FoundReturnType);
	if (FoundReturnType == SC_TypeVoid) {
		JB_SetRef(FoundReturnType, nil);
	}
	SCDecl* R = Self->ReturnType;
	JB_Incr(R);
	if (R) {
		if (!FoundReturnType) {
			JB_Msg_Fail(Msg, JB_LUB[1695]);
			JB_Decr(R);
			JB_Decr(FoundReturnType);
			JB_Decr(C);
			return;
		}
		if ((FoundReturnType == SC_TypeNil) and (SC_Decl_CantBeNilInCpp(R))) {
			Message* Def = SC_Decl_CreateDefault(R, C, true);
			JB_Incr(Def);
			if (Def) {
				JB_FreeIfDead(SC_Msg_ReplaceWith(C, Def));
			}
			 else {
				if (true) {
					JB_Msg_Fail(Msg, JB_LUB[1696]);
				}
			}
			JB_Decr(Def);
		}
		 else {
			JB_FreeIfDead(SC_Decl_ExpectMatch(R, FoundReturnType, kJB_kTypeCastTrue, C, nil));
		}
	}
	 else {
		if ((FoundReturnType)) {
			JB_Msg_Fail(Msg, JB_LUB[1697]);
		}
	}
	JB_Decr(C);
	JB_Decr(FoundReturnType);
	JB_Decr(R);
}

void SC_Func_CheckUnused(SCFunction* Self, Message* Feedback) {
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Disabled)) {
		return;
	}
	if (SC_Func_IsUnused(Self)) {
		Message* Src = Self->Source;
		if (Src) {
			JB_String* Str = JB_LUB[612];
			if (Self->LinkFrom != nil) {
				Str = JB_LUB[613];
			}
			JB_Msg_AppendNum(JB_Msg_Msg(Feedback, kJB_SyxTmp, JB_Str_OperatorPlus(Self->Name, Str)), Src->Position);
		}
	}
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Cpp)) {
		return;
	}
	SC_Func_CheckUnusedCode(Self, Feedback);
	if (Self->HasProto) {
		return;
	}
	Message* ErrName = nil;
	{
		Array* _LoopSrcf2 = Self->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* Arg = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Arg == nil) {
				break;
			}
			if (!SC_Decl_SyntaxIs(Arg, kSC__SCDeclInfo_ReadFrom)) {
				Message* Src = Arg->Source;
				if (Src and (!JB_Msg_SyntaxIs(Src, kJB__MsgParseFlags_Inserted))) {
					if (ErrName) {
						JB_SetRef(ErrName->Name, JB_Str_OperatorPlus(Arg->Name, JB_Str_OperatorPlus(JB_LUB[10], ErrName->Name)));
					}
					 else {
						ErrName = JB_Msg_Msg(Feedback, kJB_SyxTmp, JB_Str_OperatorPlus(Arg->Name, JB_LUB[614]));
						JB_Msg_AppendNum(ErrName, Src->Position);
					}
				}
			}
			(++_if0);
		};
	};
}

void SC_Func_CheckUnusedCode(SCFunction* Self, Message* Feedback) {
	{
		FatASM* _FirstInstf0 = SC_Func_IR(Self);
		FatASM* F = _FirstInstf0;
		FatASM* _AfterInstf2 = F + Self->xC2xB5Length;
		while (F < _AfterInstf2) {
			if (SC_FAT_IsUnused(F)) {
				Message* _tmPf3 = JB_Msg_Msg(Feedback, kJB_SyxTmp, JB_LUB[582]);
				JB_Incr(_tmPf3);
				JB_Msg_AppendNum(_tmPf3, F->Msg->Position);
				JB_Decr(_tmPf3);
			}
			(++F);
		};
	};
}

void SC_Func_Cleanupfunc(SCFunction* Self, Message* S) {
	JB_String* N = S->Name;
	JB_Incr(N);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(S, (&_usingf0));
	SCClass* Cls = SC_Base_IsNormalObject(Self->Cls);
	JB_Incr(Cls);
	if ((JB_Msg_SyntaxEquals(S, JB_LUB[949], true)) or (JB_Msg_SyntaxEquals(S, JB_LUB[141], true))) {
		JB_SetRef(S->Name, JB_LUB[537]);
		Message* _tmPf1 = JB_Syx_OperatorPlus(kJB_SyxThg, N);
		JB_Incr(_tmPf1);
		(JB_Ring_FirstSet(S, _tmPf1));
		JB_Decr(_tmPf1);
	}
	 else if (JB_Msg_SyntaxEquals(S, JB_LUB[1106], true)) {
		if (SC_Func__Tran_Render(S, Cls)) {
			JB_SetRef(S->Name, JB_LUB[75]);
		}
	}
	JB_Decr(N);
	if (SC_Msg_IsBehaviour(S) and Cls) {
		SC_Beh__Tran_Behaviour(S, Cls);
		SC_Class_FillInterFaceIn(Cls, Self, true);
	}
	JB_Decr(Cls);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), S);
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_CollectDeclsParams(SCFunction* Self, Message* Prms, SCNode* AddToSpace) {
	SC__Mod_Curr = ((SCModule*)Self->Parent);
	SCClass* Cls = Self->Cls;
	if (!Cls) {
		Cls = ((SCModule*)Self->Parent)->Cls;
	}
	 else if (!SC_Msg_HasSelfAsFirst(Prms)) {
		if ((!AddToSpace)) {
			JB_Msg_Fail(Prms, nil);
			return;
		}
		SC_Func_AddSelfToFunc(Self, Cls, AddToSpace);
	}
	{
		Message* Item = ((Message*)JB_Ring_First(Prms));
		while (Item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Item));
			SC_Msg_CollectOneParam(Item, Self, AddToSpace, Cls);
			Item = _Nf1;
		};
		;
	}
	;
	uint Ns = Self->NilSelf;
	if (Ns) {
		SC_Func_WantAs(Self, Ns);
	}
	SCDecl* R = Self->ReturnType;
	if (R) {
		if (SC_Decl_IsBareStruct(R)) {
			(SC_Decl_SyntaxIsSet(R, kSC__SCDeclInfo_ReturnedStruct, true));
		}
		if (SC_Func_SyntaxIs(Self, kSC__FunctionType_HidesProperties)) {
			JB_SetRef(Self->ReturnType, SC_Decl_MakeReal(R));
		}
	}
}

void SC_Func_CollectLinks(SCFunction* Self, JB_Object* Obj) {
	while (true) {
		if (JB_Object_FastIsa(Obj, &SCFunctionData)) {
			if (!SC__Comp_InPerry) {
				return SC_Func_DoLinkTo(Self, ((SCFunction*)Obj));
			}
			return SC_Func_DoLinkBoth(Self, ((SCFunction*)Obj));
		}
		if (JB_Object_FastIsa(Obj, &SCClassData)) {
			return SC_Func_DoLinkTo(Self, ((SCClass*)Obj));
		}
		if (JB_Object_FastIsa(Obj, &SCDeclData)) {
			SC_Func_DoLinkTo(Self, ((SCDecl*)Obj)->Type);
			if (SC__Comp_InPerry) {
				SC_Func_DoLinkFrom(Self, ((SCDecl*)Obj));
			}
			Obj = ((SCDecl*)((SCDecl*)Obj)->IsLookupOnly);
			if (!((SCDecl*)Obj)) {
				return;
			}
		}
		 else {
			return;
		}
	};
}

bool SC_Func_CollectReturnAsReal(SCFunction* Self) {
	if (SC_Func_IsAllocOrNew(Self) and SC__Options_NilTestAllocNeverFails) {
		return true;
	}
	return false;
}

void SC_Func_CollectStats(SCFunction* Self) {
	(++SC__Func_FuncStats[JB_int_OperatorMin(JB_Array_Size(Self->Args), 11)]);
}

SCFunction* SC_Func_ConOrDesForCall(SCFunction* Self, SCClass* C, bool IsConstructor, int Task) {
	SCClass* Parent = C->Super;
	if (!Parent) {
		return nil;
	}
	SCFunction* Fn = SC_Class_ConOrDesForCall(Parent, IsConstructor, Task);
	if (Fn) {
		return Fn;
	}
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor)) {
		if (!((Self->Cls == SC_TypeObject) or (Self->Cls->Super == SC_TypeObject))) {
			SC_SCObject_Fail(Self, JB_LUB[1199]);
			return nil;
		}
	}
	return nil;
}

SCFunction* SC_Func_Constructor(SCFunction* Self, Message* Msg) {
	if (Self == nil) {
		Self = ((SCFunction*)JB_NewClass(&SCFunctionData));
	}
	SC_SCBetterNode_ConstructorWithMsg(Self, Msg);
	Self->NilSelf = 0;
	Self->ReturnedVars = 0;
	Self->MinOpt = 0;
	Self->IsAssigns = 0;
	Self->IsCppInBuilt = 0;
	Self->CantBeInlined = 0;
	Self->BlindCasts = 0;
	Self->IsNilChecker = 0;
	Self->Badness = 0;
	Self->StructReturnPos = 0;
	Self->OptCounts = 0;
	Self->IntPrmCount = 0;
	Self->TableId = 0;
	Self->AltersParams = 0;
	Self->ReturnCount = 0;
	Self->LinkDepth = 0;
	Self->TmpCounter = 0;
	Self->xC2xB5Start = 0;
	Self->xC2xB5Length = 0;
	Self->FuncInfo = 0;
	Self->IsMacro = nil;
	Self->DepthFinder = nil;
	Self->ReturnType = nil;
	Self->ProtoType = nil;
	JB_Incr2(Self->Args, JB_Array_Constructor0(nil));
	Self->Cls = nil;
	Self->Refs = nil;
	Self->CounterPart = nil;
	Self->NextFunc = nil;
	Self->HasProto = nil;
	Self->LinkTo = nil;
	if (Msg) {
		(++SC__Comp_stFuncs);
	}
	return Self;
}

Message* SC_Func_ConstructorLinePlace(SCFunction* Self) {
	Message* S = Self->Source;
	if (S) {
		if (JB_Msg_HasPosition(S)) {
			return S;
		}
	}
	SCClass* C = Self->Cls;
	if (C) {
		return C->Source;
	}
	return nil;
}

void SC_Func_CopyParams(SCFunction* Self, Message* List) {
	Message* P = SC_Func_Prms(Self);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(List, (&_usingf0));
	Message* A = JB_Msg_GiveArg(Self->Source);
	Message* Dot = JB_Syx_Msg(kJB_SyxDot, JB_LUB[617]);
	(JB_Ring_FirstSet(A, Dot));
	Message* Name = JB_Msg_Msg(Dot, kJB_SyxThg, JB_LUB[913]);
	Message* SubPrms = JB_Msg_Msg(Dot, kJB_SyxPrm, JB_LUB[0]);
	{
		Message* S = ((Message*)JB_Ring_First(List));
		while (S) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(S));
			JB_Tree_SyntaxAppend(P, JB_Msg_Copy(S, nil));
			Message* C = SC_Msg_DeclName(S);
			if (C) {
				JB_Tree_SyntaxAppend(SubPrms, JB_Msg_Copy(C, nil));
			}
			S = _Nf2;
		};
		;
	}
	;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), List);
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Func_CountCallsToParentAlloc(SCFunction* Self, Message* Root) {
	Message* Rz = nil;
	int FoundCount = 0;
	SCClass* C = Self->Cls;
	if (!C) {
		return nil;
	}
	{
		Message* Curr = ((Message*)JB_Ring_First(Root));
		while (Curr) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Curr));
			SCFunction* F = SC_Msg_IsParentConCall(Curr);
			if (F) {
				SCClass* Fcls = F->Cls;
				if (!SC_Func_IsOKConstructorCall(F, C)) {
					JB_Msg_Fail(Curr, JB_LUB[894]);
					return nil;
				}
				if (!Rz) {
					Rz = Curr;
				}
				(++FoundCount);
				if (FoundCount >= 2) {
					JB_Msg_Fail(Curr, JB_LUB[895]);
					return nil;
				}
			}
			Curr = _Nf1;
		};
		;
	}
	;
	return Rz;
}

int SC_Func_CreateTypeCast(SCFunction* Self, SCDecl* MyType, Message* Exp, int Loss) {
	JB_Incr(Exp);
	if (!Exp) {
		JB_Decr(Exp);
		return kJB_kNeedsTypeCast | Loss;
	}
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Disabled)) {
		JB_Msg_Fail(Exp, Self->Description);
		JB_Decr(Exp);
		return 0;
	}
	while ((JB_Msg_EqualsSyx(Exp, kJB_SyxBra, false))) {
		JB_SetRef(Exp->Obj, Self->ReturnType);
		JB_SetRef(Exp, ((Message*)JB_Ring_First(Exp)));
		if (JB_Msg_EqualsSyx(Exp, kJB_SyxArg, false)) {
			JB_SetRef(Exp, ((Message*)JB_Ring_Parent(Exp)));
			break;
		}
	};
	MessagePosition Using = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Exp, (&Using));
	Message* Cst = SC_Func_IsSimpleCast(Self);
	JB_Incr(Cst);
	if (Cst) {
		JB_SetRef(Cst, JB_Msg_Copy(Cst, nil));
		JB_FreeIfDead(SC_Msg_ReplaceWith(Exp, Cst));
		Message* _tmPf0 = ((Message*)JB_Ring_First(Cst));
		JB_Incr(_tmPf0);
		JB_FreeIfDead(SC_Msg_ReplaceWith(_tmPf0, Exp));
		JB_Decr(_tmPf0);
	}
	 else {
		Message* _tmPf1 = JB_Syx_OperatorPlus(kJB_SyxThg, Self->ExportName);
		JB_Incr(_tmPf1);
		JB_SetRef(Cst, SC_Msg_WrapWith((_tmPf1), kJB_SyxFunc, JB_LUB[0]));
		JB_Decr(_tmPf1);
		(JB_Ring_NextSibSet(Exp, Cst));
		Message* _tmPf2 = JB_Msg_Msg(Cst, kJB_SyxPrm, JB_LUB[0]);
		JB_Incr(_tmPf2);
		JB_Tree_SyntaxAppend(_tmPf2, Exp);
		JB_Decr(_tmPf2);
		if (SC_Decl_IsBareStruct(MyType)) {
			SC_Msg_GetAddressOf(Exp, MyType, false);
		}
		Message* _tmPf3 = ((Message*)JB_Ring_Last(Cst));
		JB_Incr(_tmPf3);
		JB_SetRef(_tmPf3->Obj, Self);
		JB_Decr(_tmPf3);
	}
	JB_Decr(Exp);
	JB_SetRef(Cst->Obj, Self->ReturnType);
	JB_Decr(Cst);
	JB_MsgPos_Destructor((&Using));
	return Loss;
}

void SC_Func_DeclsProtoCleanup(SCFunction* Self, SCClass* fpType, Message* Ch0, bool AssumeSelf, bool Late, Message* Route) {
	SCFunction* Proto = fpType->FuncProto;
	JB_Incr(Proto);
	if (!Proto) {
		JB_Msg_Fail(Ch0, JB_LUB[1740]);
		JB_Decr(Proto);
		return;
	}
	Message* fProtoParams = JB_Msg_NeedSyxInt(Proto->Source, kJB_SyxPrm, 1);
	JB_Incr(fProtoParams);
	JB_Decr(Proto);
	if (!fProtoParams) {
		JB_Decr(fProtoParams);
		return;
	}
	Message* P = ((Message*)JB_Ring_Parent(Ch0));
	JB_Incr(P);
	P->Func = kJB_SyxPrm;
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Ch0, (&_usingf0));
		JB_Msg_CopyAllInto(fProtoParams, P);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Ch0);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(fProtoParams);
	if (Route) {
		Message* Nxt = ((Message*)JB_Ring_NextSib(Ch0));
		JB_Incr(Nxt);
		Message* First = ((Message*)JB_Ring_First(Nxt));
		JB_Incr(First);
		JB_Decr(Nxt);
		Message* _tmPf1 = ((Message*)JB_Ring_NextSib(First));
		JB_Incr(_tmPf1);
		if (SC_Msg_OperatorIsThing(_tmPf1, JB_LUB[180])) {
			JB_FreeIfDead(SC_Msg_ReplaceWith(First, Route));
		}
		JB_Decr(First);
		JB_Decr(_tmPf1);
	}
	SC_Func_DeclsProtoCleanUpContainedness(Self, P, Ch0, fpType);
	SCClass* C = Self->Cls;
	JB_Incr(C);
	if (!C) {
		JB_Decr(C);
		JB_Decr(P);
		return;
	}
	if (Late) {
		Message* _tmPf2 = ((Message*)JB_Ring_First(P));
		JB_Incr(_tmPf2);
		JB_Tree_Remove(_tmPf2);
		JB_Decr(_tmPf2);
	}
	if (!AssumeSelf) {
		Message* D = JB_Msg_NeedSyx(P, kJB_SyxDecl);
		JB_Incr(D);
		if (D) {
			SCDecl* Decl = SC_ExtractDecl(D, nil, kSC__DeclMode_ProtoParam, 0);
			JB_Incr(Decl);
			if (Decl) {
				if (!SC_Decl_MatchesDecl(Decl, C->TypeNormal)) {
					SC_SCObject_Fail(Self, JB_LUB[1741]);
				}
				if (!(JB_Str_Equals(Decl->Name, JB_LUB[180], true))) {
					SC_SCObject_Fail(Self, JB_LUB[1742]);
				}
				(SC_Decl_NameSet(Decl, JB_LUB[0]));
				JB_Tree_Remove(D);
			}
			JB_Decr(Decl);
		}
		JB_Decr(D);
	}
	JB_Decr(P);
	JB_Decr(C);
}

void SC_Func_DeclsProtoCleanUpContainedness(SCFunction* Self, Message* P, Message* Ch0, SCClass* fpType) {
	{
		Message* S = ((Message*)JB_Ring_First(P));
		while (S) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(S));
			if (JB_Msg_EqualsSyx(S, kJB_SyxDecl, false)) {
				Message* Ty = ((Message*)JB_Ring_First(S));
				if (Ty->Func == kJB_SyxSThg) {
					//using;
					MessagePosition _usingf0 = ((MessagePosition){});
					JB_Msg_SyntaxUsing(S, (&_usingf0));
					if (JB_Msg_EqualsSyx(Ch0, kJB_SyxRel, false)) {
						JB_Msg_BecomeCopy(Ty, ((Message*)JB_Ring_Last(Ch0)));
					}
					 else {
						SCDecl* Ty2 = SC_Base_RequireContained(fpType, S);
						if (Ty2) {
							(JB_Ring_PrevSibSet(Ty, SC_Decl_WriteType(Ty2, 0, false)));
							JB_Tree_Remove(Ty);
						}
					}
					JB_MsgPos_SyntaxUsingComplete((&_usingf0), S);
					JB_MsgPos_Destructor((&_usingf0));
				}
			}
			S = _Nf2;
		};
		;
	}
	;
	JB_Tree_Remove(Ch0);
}

SCDecl* SC_Func_DeclsProtoTypeAdd(SCFunction* Self, SCClass* fpType) {
	SCDecl* Dcl = SC_Decl_Constructor(nil, fpType);
	JB_Incr(Dcl);
	JB_SetRef(Dcl->Source, Self->Source);
	JB_SetRef(Dcl->IsLookupOnly, Self);
	(SC_Decl_NameSet(Dcl, Self->Name));
	SC_Comp__NewConst(Dcl);
	JB_SetRef(Self->HasProto, Dcl);
	if (Self->Cls) {
		SC_Base_TryAdd(Self->Parent, Self->Source, Dcl, Self->Name);
	}
	JB_SafeDecr(Dcl);
	return Dcl;
}

void SC_Func_DeclsPrototypeClass(SCFunction* Self, Message* Ch0) {
	Message* Ty = Ch0;
	if (JB_Msg_EqualsSyx(Ty, kJB_SyxRel, false)) {
		Ty = ((Message*)JB_Ring_First(Ty));
	}
	SCModule* P = ((SCModule*)JB_Object_FastAs(Self->Parent, &SCModuleData));
	if (!P) {
		return;
	}
	SCClass* fpType = SC_Base_FindClassMsg(P, Ty, kSC__SCNodeFindMode_WantAType);
	if (!fpType) {
		return;
	}
	Message* Route = nil;
	if (!fpType->FuncProto) {
		SCClass* Task = SC_Base_FindClass(fpType->Modul, JB_LUB[1158], nil, kSC__Base_DontGoUp);
		if (Task) {
			fpType = Task;
			Route = SC_Base_Route(fpType->Modul->Parent, JB_LUB[1158]);
		}
		SCClass* Task_proto = SC_Base_FindClass(fpType->Modul, JB_LUB[1037], nil, kSC__Base_DontGoUp);
		if (Task_proto) {
			fpType = Task_proto;
		}
	}
	SC_Func_DeclsProtoCleanup(Self, fpType, Ch0, false, false, Route);
	JB_FreeIfDead(SC_Func_DeclsProtoTypeAdd(Self, fpType));
}

void SC_Func_DeclsPrototypeInterface(SCFunction* Self, Message* Ch0, SCClass* fpType, bool Late) {
	SC_Func_DeclsProtoCleanup(Self, fpType, Ch0, true, Late, nil);
	if (!Late) {
		JB_FreeIfDead(SC_Func_DeclsProtoTypeAdd(Self, fpType));
	}
}

JB_String* SC_Func_Describe(SCFunction* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, JB_LUB[460]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendByte(Fs, ' ');
	Message* _tmPf0 = ((Message*)JB_Tree_Second(Self->Source));
	JB_Incr(_tmPf0);
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf1);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Func_DescribeParamFail(SCFunction* Self, SCParamArray* Params, int Bad) {
	if (SC_PA_MadeError(Params)) {
		return;
	}
	bool UsesSelf = Params->IsDot and Params->IsNotModule;
	int Num = Bad - UsesSelf;
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	SCDecl* Badarg = ((SCDecl*)JB_Array_Value(Self->Args, Bad - 1));
	JB_Incr(Badarg);
	Message* P = SC_PA_SyntaxAccess(Params, Bad - 1);
	JB_Incr(P);
	if (P) {
		if (UsesSelf and (Bad == 1)) {
			JB_FS_AppendString(Fs, JB_LUB[1822]);
		}
		 else {
			//;
			JB_FS_AppendString(Fs, JB_LUB[1823]);
			JB_FS_AppendInt32(Fs, Num);
			JB_FS_AppendString(Fs, JB_LUB[1824]);
			//;
		}
		SCDecl* Type = SC_TypeOfExpr(P, nil, nil);
		JB_Incr(Type);
		if (Type) {
			JB_FreeIfDead(SC_Decl_RenderTypeName(Type, Fs));
			if (JB_Str_Exists(Type->Name) and (!JB_Str_Equals(Type->Name, JB_LUB[36], false))) {
				JB_FS_AppendByte(Fs, ' ');
				JB_FS_AppendString(Fs, Type->Name);
			}
		}
		 else {
			JB_FS_AppendString(Fs, JB_LUB[1825]);
		}
		JB_Decr(Type);
	}
	 else {
		JB_SetRef(P, Params->Exp);
		//;
		JB_FS_AppendString(Fs, JB_LUB[1826]);
		JB_FS_AppendInt32(Fs, Num);
		JB_FS_AppendString(Fs, JB_LUB[164]);
		JB_String* _tmPf2 = SC_Named_Name(Badarg);
		JB_Incr(_tmPf2);
		JB_FS_AppendString(Fs, _tmPf2);
		JB_Decr(_tmPf2);
		JB_FS_AppendByte(Fs, ')');
		//;
	}
	JB_FS_AppendString(Fs, JB_LUB[1827]);
	JB_FreeIfDead(SC_Decl_RenderTypeName(Badarg, Fs));
	JB_Decr(Badarg);
	if (true) {
		JB_String* _tmPf3 = JB_FS_SyntaxCast(Fs);
		JB_Incr(_tmPf3);
		JB_Msg_Fail(P, _tmPf3);
		JB_Decr(_tmPf3);
	}
	JB_Decr(P);
	JB_FS_AppendString(Fs, JB_LUB[1828]);
	JB_FreeIfDead(SC_Func_RenderTitle(Self, true, Fs));
	JB_String* _tmPf4 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf4);
	JB_Decr(Fs);
	(JB_Msg_SyntaxProblem(Self->Source, _tmPf4));
	JB_Decr(_tmPf4);
}

void SC_Func_Destructor(SCFunction* Self) {
	JB_Clear(Self->IsMacro);
	JB_Clear(Self->ReturnType);
	JB_Clear(Self->ProtoType);
	JB_Clear(Self->LinkTo);
	JB_Clear(Self->Args);
	JB_Clear(Self->Cls);
	JB_Clear(Self->Refs);
	JB_Clear(Self->CounterPart);
	JB_Clear(Self->NextFunc);
	JB_Clear(Self->HasProto);
	SC_SCBetterNode_Destructor(Self);
}

SCFunction* SC_Func_Disambiguate(SCFunction* Self, Message* Src) {
	if ((!Self) or (!Self->NextFunc)) {
		return Self;
	}
	{
		SCFunction* Curr = Self;
		while (Curr) {
			Message* S = Curr->Source;
			if (JB_Msg_DeepEquals(S, Src, false)) {
				return Curr;
			}
			Message* Ss = ((Message*)JB_Tree_Second(S));
			if (Ss) {
				if (JB_Msg_DeepEquals(Ss, ((Message*)JB_Tree_Second(Src)), false)) {
					return Curr;
				}
			}
			Curr = Curr->NextFunc;
		};
	}
	;
	return Self;
}

void SC_Func_DoLinkBoth(SCFunction* Self, SCObject* To) {
	if (SC_SCObject_CanLinkTo(Self, To)) {
		SC_LinkMap__Store((&Self->LinkTo), To);
		if (SC__Comp_InPerry) {
			SC_LinkMap__Store((&To->LinkFrom), Self);
		}
	}
}

void SC_Func_DoLinkFrom(SCFunction* Self, SCObject* To) {
	if (SC__Comp_InPerry and SC_SCObject_CanLinkTo(Self, To)) {
		SC_LinkMap__Store((&To->LinkFrom), Self);
	}
}

void SC_Func_DoLinkTo(SCFunction* Self, SCObject* To) {
	if (SC_SCObject_CanLinkTo(Self, To)) {
		SC_LinkMap__Store((&Self->LinkTo), To);
	}
}

void SC_Func_DontWantSameReturnType(SCFunction* Self, SCFunction* F) {
	if (!Self) {
		return;
	}
	if (SC_Decl_MiniMatch(F->ReturnType, Self->ReturnType, 0)) {
		if (true) {
			JB_Msg_Fail(Self->Source, JB_LUB[1639]);
		}
		if (true) {
			JB_Msg_Fail(F->Source, JB_LUB[1640]);
		}
	}
}

bool SC_Func_DoRefs(SCFunction* Self) {
	return (!SC_Func_SyntaxIs(Self, kSC__FunctionType_NotRefCounted));
}

void SC_Func_DotFuncToNormalFunc(SCFunction* Self, Message* Dot) {
	JB_Msg_BecomeStr(Dot, kJB_SyxFunc, JB_LUB[0]);
	Message* First = ((Message*)JB_Ring_First(Dot));
	JB_Incr(First);
	Message* L = ((Message*)JB_Ring_Last(Dot));
	JB_Incr(L);
	JB_SetRef(L->Obj, Self);
	L->Func = kJB_SyxPrm;
	if (JB_Object_FastIsa(First->Obj, &SCModuleData)) {
		JB_Tree_Remove(First);
	}
	 else {
		(JB_Ring_FirstSet(L, First));
	}
	JB_Decr(First);
	JB_Decr(L);
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Dot, (&_usingf0));
		Message* _tmPf1 = JB_Syx_Msg(kJB_SyxThg, Self->ExportName);
		JB_Incr(_tmPf1);
		(JB_Ring_FirstSet(Dot, (_tmPf1)));
		JB_Decr(_tmPf1);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Dot);
		JB_MsgPos_Destructor((&_usingf0));
	}
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Killer)) {
		SC_Msg_LastInBlock(Dot, kSC__SCBlockage_Quit);
	}
}

bool SC_Func_EqualOrMoreSpecific(SCFunction* Self, SCFunction* F) {
	if (!(Self and F)) {
		return nil;
	}
	if (((bool)(F->ReturnType)) != ((bool)(Self->ReturnType))) {
		return nil;
	}
	if (JB_Array_Size(F->Args) != JB_Array_Size(Self->Args)) {
		return nil;
	}
	SCDecl* R = F->ReturnType;
	if (R) {
		if (!SC_Decl_MatchesDecl(R, Self->ReturnType)) {
			return nil;
		}
	}
	{
		Array* _LoopSrcf2 = Self->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* A = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (A == nil) {
				break;
			}
			int I = _if0;
			if (!SC_Decl_MatchesDecl(((SCDecl*)JB_Array_Value(F->Args, I)), A)) {
				return nil;
			}
			(++_if0);
		};
	}
	;
	return true;
}

JB_String* SC_Func_ExportNameBuilder(SCFunction* Self, JB_String* CppPart) {
	JB_Incr(CppPart);
	JB_String* Rz = JB_LUB[0];
	JB_Incr(Rz);
	if (!JB_Str_Exists(CppPart)) {
		JB_SetRef(CppPart, Self->Name);
		if (Self->IsAssigns and (!(JB_Str_OperatorEndsWith(CppPart, JB_LUB[615])))) {
			JB_SetRef(CppPart, JB_Str_OperatorPlus(CppPart, JB_LUB[616]));
		}
	}
	JB_String* SubSection = JB_LUB[0];
	JB_Incr(SubSection);
	JB_String* AfterSub = JB_LUB[0];
	JB_Incr(AfterSub);
	SCClass* C = Self->Cls;
	JB_Incr(C);
	if (C) {
		JB_SetRef(SubSection, SC_Mod_CppPath(C->Modul));
		JB_SetRef(AfterSub, JB_LUB[162]);
		if ((SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor)) and (!(JB_Str_ContainsString(CppPart, JB_LUB[617])))) {
			JB_SetRef(CppPart, JB_Str_OperatorPlus(JB_LUB[617], CppPart));
		}
	}
	 else {
		SCNode* L = Self->Parent;
		JB_Incr(L);
		if (JB_Object_FastIsa(L, &SCModuleData)) {
			if (JB_Str_Exists(((SCModule*)L)->CppPart)) {
				JB_SetRef(SubSection, SC_Mod_CppPath(((SCModule*)L)));
				JB_SetRef(AfterSub, JB_LUB[143]);
			}
		}
		JB_Decr(L);
	}
	JB_Decr(C);
	SCImport* P = Self->Project;
	JB_Incr(P);
	if (P) {
		JB_String* Wanted = P->Mod->ExportName;
		JB_Incr(Wanted);
		if (!JB_Str_Equals(Wanted, SubSection, false)) {
			JB_SetRef(Rz, (JB_Str_OperatorPlus(Wanted, JB_LUB[162])));
		}
		JB_Decr(Wanted);
	}
	JB_Decr(P);
	JB_String* _tmPf1 = JB_Str_OperatorPlus(AfterSub, CppPart);
	JB_Incr(_tmPf1);
	JB_Decr(AfterSub);
	JB_Decr(CppPart);
	JB_String* _tmPf0 = JB_Str_OperatorPlus(SubSection, _tmPf1);
	JB_Incr(_tmPf0);
	JB_Decr(SubSection);
	JB_Decr(_tmPf1);
	JB_SetRef(Rz, JB_Str_OperatorPlus(Rz, (_tmPf0)));
	JB_Decr(_tmPf0);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Func_FillInDestructor(SCFunction* Self) {
	Message* S = SC_Func_SourceArg(Self);
	if (!S) {
		return;
	}
	SCClass* C = Self->Cls;
	if (!C) {
		return;
	}
	Message* First = SC_Msg_FindDestructor(S);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(S, (&_usingf0));
	{
		Array* _LoopSrcf3 = C->Properties;
		int _if1 = 0;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1));
			if (D == nil) {
				break;
			}
			if (SC_Decl_IsReffable(D, true)) {
				SC_Msg_AddBefore(S, First, SC_Decl_RefDestructor(D));
			}
			 else {
				SCFunction* Destr = SC_Decl_HasStructDestructor(D);
				if (Destr) {
					Message* Addr = SC_Decl_DeclToAddr(D, SC_Func_Self(Self));
					SC_Msg_AddBefore(S, First, SC_Refs__RefDestructorMsg(Addr, Destr));
				}
			}
			(++_if1);
		};
	}
	;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), S);
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_FillInMissingConstructorDefaults(SCFunction* Self, Message* Root, Message* AfterHere) {
	SCClass* Cls = Self->Cls;
	if (!Cls) {
		return;
	}
	Message* Oof = SC_Func_ConstructorLinePlace(Self);
	if (!Oof) {
		return;
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Oof, (&_usingf0));
	{
		Array* _LoopSrcf3 = Cls->Properties;
		int _if1 = JB_Array_Size(_LoopSrcf3) - 1;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1));
			if (D == nil) {
				break;
			}
			if (!SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_PropertyWasConstructed)) {
				Message* Made = SC_Func_NewDefaultRel(Self, Oof, D);
				SC_Msg_InsertAfter(Root, Made, AfterHere);
			}
			(--_if1);
		};
	}
	;
	while (Cls) {
		{
			Array* _LoopSrcf6 = Cls->Properties;
			int _if4 = 0;
			while (true) {
				SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf6, _if4));
				if (D == nil) {
					break;
				}
				(SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_PropertyWasConstructed, (!true)));
				(++_if4);
			};
		}
		;
		Cls = Cls->Super;
	};
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Oof);
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_FillInSaver(SCFunction* Self, JB_String* Name) {
	if (!SC_Func_SyntaxIs(Self, kSC__FunctionType_AutoGeneratedSaver)) {
		return;
	}
	SCClass* Cls = Self->Cls;
	JB_Incr(Cls);
	bool IsSave = (JB_Str_ContainsString(Name, JB_LUB[1724]));
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	Self->BlindCasts = 0;
	{
		Array* _LoopSrcf3 = Cls->Properties;
		JB_Incr(_LoopSrcf3);
		int _if1 = 0;
		while (true) {
			SCDecl* Item = ((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1));
			JB_Incr(Item);
			if (Item == nil) {
				JB_Decr(Item);
				break;
			}
			JB_String* Type = SC_Decl_TryUseSaveable(Item, IsSave, Cls);
			JB_Incr(Type);
			if ((!JB_Str_Exists(Type))) {
				(++_if1);
				JB_Decr(Type);
				JB_Decr(Item);
				continue;
			}
			JB_FS_AppendString(Fs, JB_LUB[41]);
			int Count = Item->C_Array;
			uint T = Item->Type->TypeInfo;
			bool AppendAsData = (JB_TC__Shift(T) and JB_TC_IsFloat(T));
			if ((!AppendAsData) and Count) {
				//;
				JB_FS_AppendString(Fs, JB_LUB[1743]);
				JB_FS_AppendInt32(Fs, Count);
				JB_FS_AppendString(Fs, JB_LUB[1744]);
				//;
			}
			if (AppendAsData) {
				JB_SetRef(Type, JB_LUB[1745]);
				if (!Count) {
					Count = 1;
				}
			}
			if (IsSave) {
				if ((JB_Str_Equals(Type, JB_LUB[37], false))) {
					JB_FS_AppendByte(Fs, '.');
					JB_FS_AppendString(Fs, Item->Name);
					JB_FS_AppendString(Fs, JB_LUB[1746]);
					if (Count) {
						JB_FS_AppendString(Fs, JB_LUB[1747]);
					}
				}
				 else {
					JB_FS_AppendString(Fs, JB_LUB[1748]);
					JB_FS_AppendString(Fs, Type);
					JB_FS_AppendByte(Fs, '(');
					if (AppendAsData) {
						JB_FS_AppendString(Fs, JB_LUB[1749]);
					}
					JB_FS_AppendByte(Fs, '.');
					JB_FS_AppendString(Fs, Item->Name);
					if (AppendAsData) {
						JB_FS_AppendString(Fs, JB_LUB[1750]);
						JB_FS_AppendInt32(Fs, JB_TC_ByteCount(T) * Count);
					}
					 else if (Count) {
						JB_FS_AppendString(Fs, JB_LUB[1747]);
					}
					JB_FS_AppendByte(Fs, ')');
				}
			}
			 else if (AppendAsData) {
				JB_FS_AppendString(Fs, JB_LUB[1751]);
				JB_FS_AppendString(Fs, Item->Name);
				JB_FS_AppendString(Fs, JB_LUB[1750]);
				JB_FS_AppendInt32(Fs, JB_TC_ByteCount(T) * Count);
				JB_FS_AppendString(Fs, JB_LUB[293]);
			}
			 else {
				JB_FS_AppendByte(Fs, '.');
				JB_FS_AppendString(Fs, Item->Name);
				if (Count) {
					JB_FS_AppendString(Fs, JB_LUB[1747]);
				}
				if ((JB_Str_Equals(Type, JB_LUB[37], false))) {
					JB_FS_AppendString(Fs, JB_LUB[1752]);
				}
				 else {
					JB_FS_AppendString(Fs, JB_LUB[890]);
					JB_FS_AppendString(Fs, JB_LUB[1753]);
					JB_FS_AppendString(Fs, Type);
					SCClass* It = Item->Type;
					JB_Incr(It);
					if ((SC_Class_NumericCount(It) <= 1) and ((!JB_Str_Equals(Type, Self->Name, false)))) {
						JB_FS_AppendByte(Fs, '|');
						JB_FS_AppendString(Fs, It->Name);
						JB_FS_AppendByte(Fs, '|');
					}
					JB_Decr(It);
				}
			}
			JB_Decr(Item);
			JB_Decr(Type);
			if ((!AppendAsData) and Count) {
				JB_FS_AppendString(Fs, JB_LUB[1754]);
			}
			(++_if1);
		};
		JB_Decr(_LoopSrcf3);
	}
	;
	JB_Decr(Cls);
	MessagePosition Using = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Self->Source, (&Using));
	JB_String* SrcStr = JB_FS_GetResult(Fs);
	JB_Incr(SrcStr);
	JB_Decr(Fs);
	Message* Msg = JB_Str_Parse(SrcStr, kJB_SyxArg, true);
	JB_Incr(Msg);
	JB_Decr(SrcStr);
	Message* Dest = SC_Func_SourceArg(Self);
	JB_Incr(Dest);
	{
		Message* Line = ((Message*)JB_Ring_First(Msg));
		JB_Incr(Line);
		while (Line) {
			Message* _Nf5 = (((Message*)JB_Ring_NextSib(Line)));
			JB_Incr(_Nf5);
			JB_Tree_SyntaxAppend(Dest, Line);
			JB_SetRef(Line, _Nf5);
			JB_Decr(_Nf5);
		};
		JB_Decr(Line);
		;
	}
	;
	JB_Decr(Dest);
	JB_Decr(Msg);
	JB_MsgPos_Destructor((&Using));
}

Message* SC_Func_FindCallParents(SCFunction* Self) {
	Message* Rz = nil;
	Message* S = SC_Func_SourceArg(Self);
	if (S) {
		Rz = SC_Func_CountCallsToParentAlloc(Self, S);
	}
	return Rz;
}

Message* SC_Func_FindCppWrapperFunc(SCFunction* Self, Message* Place) {
	{
		Message* Cpp = ((Message*)JB_Ring_First(Place));
		while (Cpp) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Cpp));
			if ((JB_Str_OperatorStarts(Cpp->Name, JB_LUB[222])) and SC_Func_FoundOneCpp(Self, Cpp->Name)) {
				return Cpp;
			}
			Cpp = _Nf1;
		};
		;
	}
	;
	return nil;
}

int SC_Func_FindDepths(SCFunction* Self) {
	int Rz = 0;
	//;
	if (Self->LinkDepth) {
		return Self->LinkDepth;
	}
	Rz = 1;
	{
		Array* _LoopSrcf2 = Self->LinkTo;
		int _if0 = 0;
		while (true) {
			SCNode* F = ((SCNode*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			if (JB_Object_FastIsa(F, &SCFunctionData)) {
				if ((F == Self) or ((SCFunction*)F)->DepthFinder) {
					SC_Func_MarkRecursive(Self, ((SCFunction*)F));
				}
				 else {
					((SCFunction*)F)->DepthFinder = Self;
					int D = SC_Func_FindDepths(((SCFunction*)F)) + 1;
					(Rz = JB_int_OperatorMax(Rz, D));
					((SCFunction*)F)->DepthFinder = nil;
				}
			}
			(++_if0);
		};
	}
	;
	Self->LinkDepth = Rz;
	return Rz;
}

void SC_Func_FixCnj(SCFunction* Self, Message* Exp) {
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Exp, (&_usingf0));
	SC_Func_FixCnjSub(Self, Exp);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Exp);
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_FixCnjSub(SCFunction* Self, Message* Exp) {
	if (JB_Msg_EqualsSyx(Exp, kJB_SyxARel, false)) {
		JB_Msg_BecomeStr(Exp, kJB_SyxTRel, JB_LUB[0]);
		JB_Msg_AppendSyx(Exp, kJB_SyxOpp, JB_LUB[245]);
	}
	Message* Ch = ((Message*)JB_Ring_First(Exp));
	JB_Incr(Ch);
	Message* _tmPf1 = ((Message*)JB_Ring_NextSib(Ch));
	JB_Incr(_tmPf1);
	JB_String* Name = _tmPf1->Name;
	JB_Incr(Name);
	JB_Decr(_tmPf1);
	bool CreatesError = ((JB_Str_Equals(Name, JB_LUB[244], false)) or (JB_Str_Equals(Name, JB_LUB[249], false)));
	bool DoesReturn = ((!JB_Str_Equals(Name, JB_LUB[250], false)) and ((!JB_Str_Equals(Name, JB_LUB[249], false)) and (!JB_Str_Equals(Name, JB_LUB[1268], false))));
	if (!(CreatesError or ((JB_Str_Equals(Name, JB_LUB[246], false)) or ((JB_Str_Equals(Name, JB_LUB[245], false)) or ((JB_Str_Equals(Name, JB_LUB[474], false)) or ((JB_Str_Equals(Name, JB_LUB[250], false)) or (JB_Str_Equals(Name, JB_LUB[1268], false)))))))) {
		if (true) {
			JB_Msg_Fail(Exp, JB_LUB[1269]);
		}
		JB_SetRef(Ch->Name, JB_LUB[245]);
		JB_SetRef(Name, JB_LUB[245]);
	}
	Message* Nxt = ((Message*)JB_Ring_NextSib(Ch));
	JB_Incr(Nxt);
	Message* _tmPf2 = ((Message*)JB_Tree_Second(Ch));
	JB_Incr(_tmPf2);
	if (((JB_Msg_EqualsSyx(Ch, kJB_SyxRel, false))) and ((JB_Msg_OperatorIn(Exp, kJB_SyxArg) or JB_Msg_OperatorIn(Exp, kJB_SyxDecl)) and ((JB_Str_Equals(_tmPf2->Name, JB_LUB[241], false))))) {
		Message* _tmPf3 = ((Message*)JB_Ring_First(Ch));
		JB_Incr(_tmPf3);
		if (!SC_Msg_IsAssignable(_tmPf3)) {
			FastString* _fsf0 = JB_FS_Constructor(nil);
			JB_Incr(_fsf0);
			JB_FS_AppendString(_fsf0, JB_LUB[1270]);
			JB_FS_SyntaxAppend(_fsf0, Ch);
			JB_FS_AppendString(_fsf0, JB_LUB[1271]);
			JB_FS_AppendString(_fsf0, Name);
			JB_FS_AppendString(_fsf0, JB_LUB[360]);
			JB_String* _tmPf4 = JB_FS_GetResult(_fsf0);
			JB_Incr(_tmPf4);
			JB_Decr(_fsf0);
			JB_Msg_Fail(Exp, _tmPf4);
			JB_Decr(_tmPf4);
			JB_Decr(_tmPf3);
			JB_Decr(_tmPf2);
			JB_Decr(Nxt);
			JB_Decr(Name);
			JB_Decr(Ch);
			return;
		}
		JB_Decr(_tmPf3);
		JB_FreeIfDead(SC_Msg_ReplaceWith(Exp, Ch));
		Message* RightSide = ((Message*)JB_Ring_Last(Ch));
		JB_Incr(RightSide);
		Message* Bra = JB_Syx_Msg(kJB_SyxBra, JB_LUB[0]);
		JB_Incr(Bra);
		JB_FreeIfDead(SC_Msg_ReplaceWith(RightSide, Bra));
		JB_Tree_SyntaxAppend(Bra, RightSide);
		JB_Decr(RightSide);
		JB_FreeIfDead(((Message*)JB_Tree_WrapWith(Bra, Exp)));
		Message* _tmPf5 = ((Message*)JB_Ring_First(Bra));
		JB_Incr(_tmPf5);
		JB_FreeIfDead(SC_Msg_ReplaceWith(Bra, _tmPf5));
		JB_Decr(Bra);
		JB_Decr(_tmPf5);
	}
	JB_Decr(_tmPf2);
	if (JB_Str_Equals(Name, JB_LUB[245], false)) {
		JB_SetRef(Nxt->Name, JB_LUB[239]);
		JB_SetRef(Name, JB_LUB[239]);
	}
	JB_Decr(Nxt);
	JB_SetRef(Ch, ((Message*)JB_Ring_First(Exp)));
	JB_Tree_Remove(Ch);
	JB_FreeIfDead(SC_Msg_ReplaceWith(Exp, Ch));
	Message* Thg = nil;
	JB_Incr(Thg);
	Message* Pp = nil;
	JB_Incr(Pp);
	Message* RemoveMe = nil;
	JB_Incr(RemoveMe);
	bool UsePrev = false;
	if ((SC_Msg_OperatorIsBRel(Ch, JB_LUB[1272])) and ((JB_Msg_OperatorIn(Ch, kJB_SyxArg)) and ((({
		Message* _tmPf7 = ((Message*)JB_Ring_First(Ch));
		JB_Incr(_tmPf7);
		bool _tmPf6 = JB_Msg_EqualsSyx(_tmPf7, kJB_SyxThg, false);
		JB_Decr(_tmPf7);
		 _tmPf6;
	}))))) {
		Message* _tmPf8 = ((Message*)JB_Ring_First(Ch));
		JB_Incr(_tmPf8);
		JB_SetRef(Thg, JB_Syx_OperatorPlus(kJB_SyxThg, _tmPf8->Name));
		JB_Decr(_tmPf8);
		JB_SetRef(Pp, Ch);
	}
	 else {
		JB_SetRef(Pp, SC_Msg_NiceParent(Ch));
		bool Done = false;
		if ((((({
			Message* _tmPf10 = SC_Msg_UnBra(Ch);
			JB_Incr(_tmPf10);
			bool _tmPf9 = JB_Msg_EqualsSyx(_tmPf10, kJB_SyxThg, false);
			JB_Decr(_tmPf10);
			 _tmPf9;
		})))) or (((JB_Msg_EqualsSyx(Pp, kJB_SyxArg, false))) and (!CreatesError))) {
			JB_SetRef(Thg, JB_Msg_Copy(Ch, nil));
			if ((JB_Msg_EqualsSyx(Pp, kJB_SyxArg, false))) {
				JB_SetRef(RemoveMe, Ch);
			}
			JB_SetRef(Pp, SC_Msg_ParentPoint(Ch));
			UsePrev = true;
			Done = ((bool)1);
		}
		 else if (SC_Msg_IsSetRel(Pp) and (({
			Message* _tmPf12 = ((Message*)JB_Ring_First(Pp));
			JB_Incr(_tmPf12);
			bool _tmPf11 = JB_Msg_EqualsSyx(_tmPf12, kJB_SyxThg, false);
			JB_Decr(_tmPf12);
			 _tmPf11;
		}))) {
			bool IsDecl = (JB_Msg_OperatorIn(Pp, kJB_SyxDecl));
			if (IsDecl or ((!JB_Str_Equals(Name, JB_LUB[250], false)))) {
				Done = ((bool)1);
				Message* _tmPf13 = ((Message*)JB_Ring_First(Pp));
				JB_Incr(_tmPf13);
				JB_SetRef(Thg, JB_Syx_OperatorPlus(kJB_SyxThg, _tmPf13->Name));
				JB_Decr(_tmPf13);
				if (IsDecl) {
					JB_SetRef(Pp, ((Message*)JB_Ring_Parent(Pp)));
				}
			}
		}
		if (!Done) {
			JB_SetRef(Pp, SC_Func__TypedTempMoveOut(Ch, JB_LUB[0], nil));
			Message* _tmPf14 = SC_Msg_DeclName(Pp);
			JB_Incr(_tmPf14);
			JB_SetRef(Thg, JB_Syx_OperatorPlus(kJB_SyxThg, _tmPf14->Name));
			JB_Decr(_tmPf14);
		}
	}
	JB_Decr(Ch);
	Message* Arg = JB_Syx_Msg(kJB_SyxArg, JB_LUB[0]);
	JB_Incr(Arg);
	if (CreatesError) {
		Message* _tmPf15 = ((Message*)JB_Ring_First(Exp));
		JB_Incr(_tmPf15);
		Message* L = ((Message*)JB_Ring_NextSib(_tmPf15));
		JB_Incr(L);
		JB_Decr(_tmPf15);
		if ((!JB_Str_Equals(Name, JB_LUB[1273], false))) {
			JB_SetRef(L, SC_Msg_ExpectParamsTransform(L, Exp->Position, Exp, JB_LUB[0]));
		}
		 else {
			if (true) {
				JB_Msg_Fail(Exp, nil);
			}
		}
		JB_Tree_SyntaxAppend(Arg, L);
		JB_Decr(L);
	}
	if ((JB_Str_Equals(Name, JB_LUB[246], false))) {
		JB_Msg_AppendSyx(Arg, kJB_SyxTmp, JB_LUB[1274]);
	}
	if ((JB_Str_Equals(Name, JB_LUB[474], false))) {
		Message* _tmPf16 = SC_Func_SourceArg(Self);
		JB_Incr(_tmPf16);
		if (SC_Msg_WithinLoop(Pp, _tmPf16)) {
			JB_Msg_AppendSyx(Arg, kJB_SyxTmp, JB_LUB[474]);
		}
		JB_Decr(_tmPf16);
	}
	 else if ((JB_Str_Equals(Name, JB_LUB[250], false))) {
		Message* _tmPf17 = SC_Func_SourceArg(Self);
		JB_Incr(_tmPf17);
		if (SC_Msg_WithinLoop(Pp, _tmPf17)) {
			JB_Msg_AppendSyx(Arg, kJB_SyxTmp, JB_LUB[473]);
		}
		JB_Decr(_tmPf17);
	}
	 else if (JB_Str_Equals(Name, JB_LUB[1268], false)) {
		Message* Q = JB_Msg_Msg(Arg, kJB_SyxDot, JB_LUB[1268]);
		JB_Incr(Q);
		JB_Msg_AppendSyx(Q, kJB_SyxThg, JB_LUB[471]);
		JB_Msg_AppendSyx(Q, kJB_SyxPrm, JB_LUB[0]);
		JB_Decr(Q);
	}
	 else if (DoesReturn) {
		Message* _tmPf18 = JB_Msg_Msg(Arg, kJB_SyxTmp, JB_LUB[239]);
		JB_Incr(_tmPf18);
		JB_Msg_AppendSyx(_tmPf18, kJB_SyxQues, JB_LUB[36]);
		JB_Decr(_tmPf18);
	}
	JB_Decr(Name);
	JB_SetRef(Thg, SC_Msg_Negate(Thg));
	Message* If_ = JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[175]);
	JB_Incr(If_);
	JB_Tree_SyntaxAppend(If_, Thg);
	JB_Decr(Thg);
	JB_Tree_SyntaxAppend(If_, Arg);
	JB_Decr(Arg);
	if (UsePrev) {
		(JB_Ring_PrevSibSet(Pp, If_));
	}
	 else {
		(JB_Ring_NextSibSet(Pp, If_));
	}
	JB_Decr(Pp);
	JB_Decr(If_);
	JB_Tree_Remove(RemoveMe);
	JB_Decr(RemoveMe);
}

void SC_Func_FLookupSet(SCFunction* Self, SCNode* Value) {
	if (JB_Object_FastIsa(Value, &SCClassData)) {
		JB_SetRef(Self->Cls, Value);
		Self->Parent = ((SCClass*)Value)->Modul;
	}
	 else {
		Self->Parent = SC_Base_ProjectFix(Value);
	}
	if (SC__Imp_Curr) {
		Self->Project = SC__Imp_Curr;
		return;
	}
	Message* S = Self->Source;
	if (S) {
		SCFile* F = SC_Msg_File(S);
		if (F) {
			Self->Project = F->Proj;
		}
	}
}

bool SC_Func_FoundOneCpp(SCFunction* Self, JB_String* N) {
	if (JB_Str_Equals(N, JB_LUB[71], false)) {
		Self->NoAutoComplete = 1;
		Self->IsCppInBuilt = 2;
		return true;
	}
	if (JB_Str_Equals(N, JB_LUB[72], false)) {
		Self->NoAutoComplete = 1;
		Self->IsCppInBuilt = 1;
		return true;
	}
	if (JB_Str_Equals(N, JB_LUB[73], false)) {
		Self->NoAutoComplete = 1;
		(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_ExternalLib, true));
		return true;
	}
	return false;
}

void SC_Func_FuncParamsLoad(SCFunction* Self) {
	(SC_Func__CurrFuncSet(Self));
	SCImport* Old = SC__Imp_Curr;
	SC_Imp_Use(Self->Project);
	JB_Array_Clear(Self->Args);
	Message* P = ((Message*)JB_Tree_Second(Self->Source));
	if (P) {
		SC_Func_SubFuncParamsLoad(Self, P);
	}
	SC__Imp_Curr = Old;
}

void SC_Func_GenASM(SCFunction* Self) {
	SC_Hoister H = ((SC_Hoister){});
	SC_ASMType__ArgSub((&SC__Pac_Sh), SC_Func_SourceArg(Self), (&H));
	SC_Pac_Unhoist((&SC__Pac_Sh), (&H));
}

bool SC_Func_HasCVersion(SCFunction* Self) {
	if (SC_Base_IsLibrary(Self)) {
		return true;
	}
	if (!SC_Func_SyntaxIs(Self, kSC__FunctionType_Wrapper)) {
		return nil;
	}
	if (Self->IsCppInBuilt == 1) {
		JB_DoAt(1);
		return true;
	}
	if (Self->IsCppInBuilt == 2) {
		JB_DoAt(1);
		return false;
	}
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_ExternalLib)) {
		JB_DoAt(1);
		return false;
	}
	return true;
}

bool SC_Func_HasProperSpeedieCode(SCFunction* Self) {
	if ((Self->Badness != 0) and (Self->Badness != 128)) {
		return false;
	}
	return (!Self->IsMacro) and (((!SC_Func_SyntaxIs(Self, kSC__FunctionType_Wrapper))) and ((!SC_Func_SyntaxIs(Self, kSC__FunctionType_Disabled))));
}

bool SC_Func_HiderMatch(SCFunction* Self, bool IsAssigns) {
	if (Self and Self->IsAssigns) {
		return IsAssigns;
	}
	return false;
}

void SC_Func_Init_Sub(SCFunction* Self, Message* Node, SCNode* Name_space) {
	Message* Arg = SC_Msg_NormaliseFunc(Node, nil);
	JB_Incr(Arg);
	JB_SetRef(Node->Obj, Self);
	if (Name_space) {
		if (!JB_Msg_SyntaxEquals(Node, JB_LUB[1872], false)) {
			JB_Array_SyntaxAppend(SC__Comp_FuncList, Self);
		}
		(SC_Func_FLookupSet(Self, Name_space));
		SCModule* _tmPf0 = SC_Base_SpaceModule(Name_space, nil);
		JB_Incr(_tmPf0);
		if (!_tmPf0) {
			JB_Decr(_tmPf0);
			JB_Decr(Arg);
			return;
		}
		JB_SetRef(Self->Refs, _tmPf0->DefaultRefs);
		JB_Decr(_tmPf0);
		(SC_Func__CurrFuncSet(Self));
	}
	SC_Func_ParseName(Self, Node);
	if (true) {
		JB_ErrorReceiver* _usingf1 = JB_Rec_SyntaxUsing(SC_ErrorDelayer);
		JB_Incr(_usingf1);
		SC_Func_PreProcessExpects(Self);
		SC_Func_TranStrings(Self);
		JB_Rec_SyntaxUsingComplete(_usingf1, SC_ErrorDelayer);
		JB_Decr(_usingf1);
	}
	SC_Func_PreRead(Self, Arg);
	SC_Func_SetBlindCasts(Self, Name_space);
	if ((JB_Msg_SyntaxEquals(Node, JB_LUB[1873], false))) {
		SC_Func_MakeMacro(Self, Arg);
	}
	JB_Decr(Arg);
}

SCObject* SC_Func_InsertIn(SCFunction* Self, SCNode* Parent, JB_String* Name) {
	JB_SetRef(Self->Name, Name);
	if (JB_Object_FastIsa(Parent, &SCClassData)) {
		JB_SetRef(Self->Cls, Parent);
		Self->Parent = ((SCClass*)Parent)->Modul;
	}
	 else {
		JB_SetRef(Self->Cls, nil);
		Self->Parent = Parent;
	}
	return SC_Base_SyntaxAccessWithStr(Parent, Name);
}

FatASM* SC_Func_IR(SCFunction* Self) {
	return SC__Pac_Sh.Start + Self->xC2xB5Start;
}

bool SC_Func_IsAllocOrNew(SCFunction* Self) {
	return SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor);
}

bool SC_Func_IsARealSpdFunc(SCFunction* Self) {
	if ((SC_Func_SyntaxIs(Self, kSC__FunctionType_Wrapper)) or Self->IsMacro) {
		return false;
	}
	(SC_Func__CurrFuncSet(Self));
	return true;
}

bool SC_Func_IsBehaviour(SCFunction* Self) {
	SCDecl* _tmPf0 = Self->HasProto;
	if (!_tmPf0) {
		return nil;
	}
	return SC_Class_IsInterface(_tmPf0->Type);
}

bool SC_Func_IsConstructorOnModule(SCFunction* Self, SCFunction* Old) {
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor)) {
		SCNode* P = Old->Parent;
		return P == Self->Cls->Modul;
	}
	return false;
}

void SC_Func_IsCppInBuiltSet(SCFunction* Self, int Value) {
	if (Value and (!Self->IsCppInBuilt)) {
		SC_Func_MakeParamsReal(Self);
	}
	Self->IsCppInBuilt = Value;
}

bool SC_Func_IsOKConstructorCall(SCFunction* Self, SCClass* C) {
	SCClass* Fc = Self->Cls;
	if (Fc == C->Super) {
		return true;
	}
	if (Fc == SC_Class_RealSuper(C)) {
		return true;
	}
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Wrapper)) {
		return true;
	}
	return false;
}

bool SC_Func_IsReal(SCFunction* Self) {
	return (Self != nil) and (!Self->IsMacro);
}

Message* SC_Func_IsSimpleCast(SCFunction* Self) {
	if (!Self->Source) {
		JB_Object_Fail(nil);
		return nil;
	}
	Message* Found = ((Message*)JB_Ring_First(JB_Msg_Last(Self->Source, kJB_SyxArg)));
	if (!(Found and (JB_Tree_IsLast(Found) and (SC_Msg_OperatorIsTmp(Found, JB_LUB[239]))))) {
		return nil;
	}
	Found = ((Message*)JB_Ring_First(Found));
	if (!((JB_Tree_IsLast(Found)) and (((JB_Msg_EqualsSyx(Found, kJB_SyxType, false))) and (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(Found)), JB_LUB[180]))))) {
		return nil;
	}
	return Found;
}

bool SC_Func_IsUnused(SCFunction* Self) {
	SCImport* P = Self->Project;
	if (P) {
		if (!P->WarnUnusedFuncs) {
			return nil;
		}
	}
	if (!Self->MyReacher) {
		return (!SC_SCObject_IsVisible(Self)) and (((!SC_Func_SyntaxIs(Self, kSC__FunctionType_ConOrDes))) and (!SC_Func_IsAllocOrNew(Self)));
	}
	return false;
}

SCFunction* SC_Func_Last(SCFunction* Self) {
	SCFunction* Rz = nil;
	Rz = Self;
	while (true) {
		SCFunction* _tmPf0 = Rz->NextFunc;
		if (!_tmPf0) {
			break;
		}
		Rz = _tmPf0;
	};
	return Rz;
}

SCDecl* SC_Func_MacroFix(SCFunction* Self, SCDecl* Contains, SCNode* Name_space, SCParamArray* Incoming) {
	SCDecl* Rz = nil;
	JB_Incr(Rz);
	Message* Orig = Incoming->Exp;
	JB_Incr(Orig);
	if (Orig) {
		Array* R = SC_PA_MacroCopyArgs(Incoming);
		JB_Incr(R);
		JB_Msg_BecomeMacro(Orig, Self->IsMacro, R);
		JB_Decr(R);
		SC_Msg_MacroFixSub(Orig, Contains);
		JB_SetRef(Rz, SC_TypeOfExpr(Orig, Name_space, nil));
		if (!Rz) {
			JB_SetRef(Rz, SC_TypeVoid);
		}
	}
	 else {
	}
	JB_Decr(Orig);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Func_MakeMacro(SCFunction* Self, Message* Arg) {
	Message* C = ((Message*)JB_Ring_First(Arg));
	Message* Prm = ((Message*)JB_Ring_PrevSib(Arg));
	if (!(C and (!((Message*)JB_Ring_NextSib(C))))) {
		SC_SCObject_Fail(Self, JB_LUB[896]);
	}
	if ((JB_Ring_HasChildren(Prm))) {
		JB_Str_Fail(JB_LUB[897]);
	}
	JB_SetRef(Self->IsMacro, JB_Macro_ConstructorMsg(nil, C));
}

void SC_Func_MakeNilChecker(SCFunction* Self, Message* Msg) {
	SC_Func_NilSelff(Self, Msg, kSC__NilState_Optional);
	Self->IsNilChecker = 1;
}

void SC_Func_MakeParamsReal(SCFunction* Self) {
	{
		Array* _LoopSrcf2 = Self->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* A = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (A == nil) {
				break;
			}
			int I = _if0;
			if (SC_Decl_CouldUpgradeToReal(A)) {
				(JB_Array_ValueSet(Self->Args, I, SC_Decl_DefaultToReal(A)));
			}
			(++_if0);
		};
	}
	;
	SCDecl* R = Self->ReturnType;
	if (R) {
		if (SC_Decl_CouldUpgradeToReal(R)) {
			JB_SetRef(Self->ReturnType, SC_Decl_DefaultToReal(R));
		}
	}
}

JB_String* SC_Func_MakeProtoClassName(SCFunction* Self, JB_String* Start) {
	JB_String* Name = Start;
	JB_Incr(Name);
	SCNode* P = Self->Parent;
	while (P) {
		if (JB_Object_FastIsa(P, &SCModuleData)) {
			SCClass* CurrCls = ((SCModule*)P)->Cls;
			if (!CurrCls) {
				break;
			}
			JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[162], Name);
			JB_Incr(_tmPf0);
			JB_SetRef(Name, JB_Str_OperatorPlus(CurrCls->Name, _tmPf0));
			JB_Decr(_tmPf0);
		}
		P = P->Parent;
	};
	if (!JB_Ind_SyntaxCast(JB_Str_FindByte(Name, '_', 0, JB_int__Max()))) {
		JB_SetRef(Name, JB_Str_OperatorPlus(JB_LUB[223], Name));
	}
	JB_SafeDecr(Name);
	return Name;
}

void SC_Func_MarkRecursive(SCFunction* Self, SCFunction* EndAt) {
	SCFunction* S = Self;
	while (true) {
		(SC_Func_SyntaxIsSet(S, kSC__FunctionType_Recursive, true));
		if (S == EndAt) {
			return;
		}
		S = S->DepthFinder;
		if (!((S != nil) and (S != EndAt))) {
			return;
		}
	};
}

ASM* SC_Func_MuRender(SCFunction* Self, ASM* Where, ASM* After) {
	ASM* Rz = nil;
	uint64 HasLabel = 0;
	Rz = Where;
	{
		FatASM* _FirstInstf0 = SC_Func_IR(Self);
		FatASM* Fat = _FirstInstf0;
		FatASM* _AfterInstf2 = Fat + Self->xC2xB5Length;
		while (Fat < _AfterInstf2) {
			int I = Fat - _FirstInstf0;
			HasLabel = (HasLabel | (Fat->JumpReg << (I & 63)));
			int N = Rz - Where;
			if (N >= 65536) {
				if (true) {
					JB_Msg_Fail(Self->Source, JB_LUB[1397]);
				}
			}
			Fat->ASMIndex = N;
			SC_FAT_CheckHasOutput(Fat);
			Rz = SC_FAT_xC2xB5RenderInto(Fat, Rz, After);
			(++Fat);
		};
	}
	;
	if (HasLabel) {
		{
			FatASM* _FirstInstf3 = SC_Func_IR(Self);
			FatASM* Fat = _FirstInstf3;
			FatASM* _AfterInstf5 = Fat + Self->xC2xB5Length;
			while (Fat < _AfterInstf5) {
				uint R = Fat->JumpReg;
				if (R) {
					SC_FAT_FillLabelRequest(Fat, Where, Rz, R - 1);
				}
				(++Fat);
			};
		};
	}
	return Rz;
}

Message* SC_Func_NewDefaultRel(SCFunction* Self, Message* Place, SCDecl* D) {
	if (!SC_Decl_IsCArray(D)) {
		Message* Def = D->Default;
		if (!Def) {
			Def = SC_Decl_CreateDefault(D, Place, true);
		}
		return SC_NewEqRelWithMsgMsg(SC_Decl_DeclToDot(D, SC_Func_Self(Self)), Def);
	}
	return nil;
}

void SC_Func_NilSelff(SCFunction* Self, Message* Where, uint /*NilState*/ V) {
	if ((Self->NilSelf)) {
		JB_Msg_Fail(Where, JB_LUB[898]);
		return;
	}
	Self->NilSelf = V;
}

bool SC_Func_operatorin(SCFunction* Self, JB_String* S) {
	return (JB_Str_Equals(SC_Named_Name(Self->Parent), S, true));
}

SCFunction* SC_Func_ParamlessConstructor(SCFunction* Self) {
	{
		SCFunction* F = Self;
		while (F) {
			Message* Prm = JB_Msg_NeedSyxInt(F->Source, kJB_SyxPrm, 1);
			Message* Last = ((Message*)JB_Ring_Last(Prm));
			if (!Last) {
				return F;
			}
			if ((JB_Msg_EqualsSyx(Last, kJB_SyxDecl, false)) and (JB_Tree_SyntaxEquals(Last, 1, false))) {
				return F;
			}
			F = F->NextFunc;
		};
	}
	;
	return nil;
}

JB_String* SC_Func_ParamUniquer(SCFunction* Self, JB_String* S) {
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, S);
	JB_FS_AppendString(Fs, JB_LUB[583]);
	int First = 0 + (Self->Cls != nil);
	int Last = JB_Array_Size(Self->Args) - 1;
	if (Last < First) {
		JB_FS_AppendByte(Fs, '0');
	}
	 else {
		{
			IntRange _LoopSrcf2 = JB_int_OperatorTo(First, Last);
			int __Endf0 = _LoopSrcf2[1];
			int I = _LoopSrcf2[0];
			while (I < __Endf0) {
				SCDecl* A = ((SCDecl*)JB_Array_Value(Self->Args, I));
				JB_Incr(A);
				if (A) {
					JB_String* _tmPf3 = JB_Str_TitleCase(A->Type->Modul->CppPart, nil);
					JB_Incr(_tmPf3);
					JB_FS_AppendString(Fs, _tmPf3);
					JB_Decr(_tmPf3);
				}
				JB_Decr(A);
				(++I);
			};
		};
	}
	JB_String* _tmPf4 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf4);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_String* SC_Func_ParentName(SCFunction* Self) {
	SCClass* C = Self->Cls;
	if (C) {
		return C->Name;
	}
	SCNode* Mod = Self->Parent;
	if (JB_Object_FastIsa(Mod, &SCModuleData)) {
		if (!((SCModule*)Mod)->IsImport) {
			return ((SCModule*)Mod)->Name;
		}
	}
	return JB_LUB[0];
}

bool SC_Func_ParseName(SCFunction* Self, Message* Node) {
	JB_String* fType = Node->Name;
	Message* Cname = ((Message*)JB_Ring_First(Node));
	if (!Cname) {
		return nil;
	}
	Cname->Func = kJB_SyxThg;
	JB_SetRef(Self->Name, Cname->Name);
	if (JB_Str_Equals(fType, JB_LUB[1031], false)) {
		Self->NoAutoComplete = 2;
	}
	 else if (JB_Str_Equals(fType, JB_LUB[1014], false)) {
		(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_API, true));
	}
	 else if (JB_Str_Equals(fType, JB_LUB[1032], false)) {
		Self->IsAssigns = 2;
		(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_HidesProperties, true));
	}
	 else if (JB_Str_Equals(fType, JB_LUB[1033], false)) {
		(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_HidesProperties, true));
	}
	if (!Self->Cls) {
		0;
	}
	 else if (JB_Msg_SyntaxEquals(Cname, JB_LUB[949], true)) {
		(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_Constructor, true));
	}
	 else if (JB_Msg_SyntaxEquals(Cname, JB_LUB[141], true)) {
		(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_Destructor, true));
	}
	return SC_Msg_TestFuncName(Cname);
}

void SC_Func_PreProcessExpects(SCFunction* Self) {
	Array* List = nil;
	JB_Incr(List);
	{
		Message* _LoopSrcf3 = SC_Func_SourceArg(Self);
		JB_Incr(_LoopSrcf3);
		Message* Ch = _LoopSrcf3;
		JB_Incr(Ch);
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(_LoopSrcf3));
		JB_Incr(_afterf1);
		while ((Ch) and (Ch != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Ch));
			JB_Incr(_N_f2);
			if (SC_Msg_NeedsPreprocess(Ch)) {
				if (!JB_Array_SyntaxCast(List)) {
					JB_SetRef(List, JB_Array_Constructor0(nil));
				}
				JB_Array_SyntaxAppend(List, Ch);
			}
			JB_SetRef(Ch, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(Ch);
		JB_Decr(_afterf1);
		;
		JB_Decr(_LoopSrcf3);
	}
	;
	if (List == nil) {
		JB_Decr(List);
		return;
	}
	{
		int _if4 = 0;
		while (true) {
			Message* Ch = ((Message*)JB_Array_Value(List, _if4));
			JB_Incr(Ch);
			if (Ch == nil) {
				JB_Decr(Ch);
				break;
			}
			if ((JB_Msg_EqualsSyx(Ch, kJB_SyxTRel, false)) or (JB_Msg_EqualsSyx(Ch, kJB_SyxARel, false))) {
				SC_Func_FixCnj(Self, Ch);
			}
			 else if (JB_Msg_EqualsSyx(Ch, kJB_SyxRel, false)) {
				SC_RelSetOrExpansion(Ch);
			}
			 else if (!JB_Msg_SyntaxEquals(Ch, JB_LUB[243], false)) {
				SC_Func__Tran_Expect(Self, Ch, nil);
			}
			JB_Decr(Ch);
			(++_if4);
		};
	}
	;
	{
		int _if6 = 0;
		while (true) {
			Message* Ch = ((Message*)JB_Array_Value(List, _if6));
			JB_Incr(Ch);
			if (Ch == nil) {
				JB_Decr(Ch);
				break;
			}
			if (JB_Msg_SyntaxEquals(Ch, JB_LUB[243], false)) {
				SC_Func__Tran_Using(Self, Ch, nil);
			}
			JB_Decr(Ch);
			(++_if6);
		};
	}
	;
	JB_Decr(List);
}

void SC_Func_PreRead(SCFunction* Self, Message* Arg) {
	{
		Message* S = ((Message*)JB_Ring_First(Arg));
		while (S) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(S));
			if (JB_Msg_EqualsSyx(S, kJB_SyxTmp, false)) {
				DTWrap* Fn = ((DTWrap*)JB_Dict_Value0(SC_FuncPreReader, S->Name));
				if (Fn) {
					(((FP_fnPreReader)JB_Wrap_SyntaxAccess(Fn)))(Self, S);
					JB_Tree_Remove(S);
				}
			}
			S = _Nf1;
		};
		;
	};
}

Message* SC_Func_Prms(SCFunction* Self) {
	return JB_Msg_FindSyx(Self->Source, kJB_SyxPrm);
}

void SC_Func_ProtoExportName(SCFunction* Self) {
	SCClass* Cls = Self->ProtoType;
	if (Cls and (!JB_Str_Exists(Cls->CppClass))) {
		JB_SetRef(Cls->CppClass, SC_Func_MakeProtoClassName(Self, Cls->Name));
	}
}

bool SC_Func_Reach(SCFunction* Self) {
	return SC_Func_ReachFunc(Self, SC__Comp_VisibleFuncs);
}

void SC_Func_ReachedDetect(SCFunction* Self) {
	SCNode* Base = SC__Comp_VisibleFuncs;
	if (!SC_SCObject_IsVisible(Self)) {
		if (!(SC__Options_MakeInterpreter and ((!SC_Func_SyntaxIs(Self, kSC__FunctionType_Disabled))))) {
			return;
		}
		Base = SC__Comp_Interpreter;
	}
	SC_Func_ReachFunc(Self, Base);
}

bool SC_Func_ReachFunc(SCFunction* Self, SCNode* From) {
	bool Rz = false;
	//;
	if (SC_Func_Borked(Self)) {
		if (true) {
			JB_Msg_Fail(Self->Source, JB_LUB[1104]);
		}
		if (true) {
			JB_Msg_Fail(From->Source, SC_Base_ReachedName(From));
		}
	}
	if (Self->MyReacher) {
		return nil;
	}
	Self->MyReacher = From;
	(++SC__Comp_stReachedFunc);
	if (SC_Base_IsLibrary(Self)) {
		(++SC__Comp_stLibFuncs);
	}
	{
		SCClass* _t = Self->Cls;
		if (_t) {
			SC_Class_Reach(_t, Self, nil);
		}
	}
	;
	{
		Array* _LoopSrcf2 = Self->LinkTo;
		int _if0 = 0;
		while (true) {
			SCNode* O = ((SCNode*)JB_Array_Value(_LoopSrcf2, _if0));
			if (O == nil) {
				break;
			}
			if (O->MyReacher) {
			}
			 else if (JB_Object_FastIsa(O, &SCFunctionData)) {
				SC_Func_ReachFunc(((SCFunction*)O), Self);
				Rz = true;
			}
			 else if (JB_Object_FastIsa(O, &SCClassData)) {
				SC_Class_Reach(((SCClass*)O), Self, nil);
			}
			(++_if0);
		};
	}
	;
	return Rz;
}

void SC_Func_RefFunc(SCFunction* Self, Message* Prm, Message* After) {
	JB__Tk_Using.Position = After->Position;
	Message* Rz = SC_Refs__RefMsg0(Self->ExportName, SC__Comp_RefIncr);
	(JB_Ring_NextSibSet(After, Rz));
	JB_Tree_SyntaxAppend(((Message*)JB_Ring_Last(Rz)), Prm);
	JB_SetRef(Rz->Obj, Prm->Obj);
	JB__Tk_Using.Position = -1;
}

DataTypeCode SC_Func_RegType(SCFunction* Self) {
	if (Self) {
		return SC_Decl_RegType(Self->ReturnType);
	}
	return kJB__TC_UnusedType;
}

JB_String* SC_Func_Render(SCFunction* Self, FastString* Fs_in) {
	Message* It = Self->Source;
	if (It) {
		return JB_Msg_Render(It, Fs_in);
	}
	return SC_Func_Describe(Self, Fs_in);
}

JB_String* SC_Func_RenderName(SCFunction* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_String* Pname = SC_Func_ParentName(Self);
	JB_Incr(Pname);
	if (JB_Str_Exists(Pname)) {
		JB_FS_AppendString(Fs, Pname);
		JB_FS_AppendByte(Fs, '.');
	}
	JB_Decr(Pname);
	JB_FS_AppendString(Fs, Self->Name);
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Func_RenderParams(SCFunction* Self, bool ForErrors, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendByte(Fs, '(');
	JB_String* Sep = JB_LUB[0];
	JB_Incr(Sep);
	{
		Array* _LoopSrcf2 = Self->Args;
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			SCDecl* A = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(A);
			if (A == nil) {
				JB_Decr(A);
				break;
			}
			if (A->Source) {
				JB_FS_AppendString(Fs, Sep);
				JB_SetRef(Sep, JB_LUB[10]);
				if (JB_Msg_ContainsStr(A->Source, JB_LUB[26])) {
					JB_FreeIfDead(SC_Decl_RenderTypeAndName(A, 1, Fs));
				}
				 else {
					JB_FS_SyntaxAppend(Fs, A->Source);
				}
			}
			JB_Decr(A);
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	if ((!ForErrors) and Self->ReturnType) {
		JB_FS_AppendString(Fs, Sep);
		JB_FreeIfDead(SC_Decl_Render(Self->ReturnType, Fs));
	}
	JB_Decr(Sep);
	JB_FS_AppendByte(Fs, ')');
	JB_String* _tmPf3 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf3);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

JB_String* SC_Func_RenderTitle(SCFunction* Self, bool ForErrors, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	JB_FS_AppendString(Fs, Self->Name);
	if (JB_Array_SyntaxCast(Self->Args) or ((!ForErrors) and Self->ReturnType)) {
		JB_FS_AppendByte(Fs, ' ');
		JB_FreeIfDead(SC_Func_RenderParams(Self, ForErrors, Fs));
	}
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

bool SC_Func_ReturnsObject(SCFunction* Self) {
	SCDecl* R = Self->ReturnType;
	if (R) {
		return SC_Decl_IsObject(R);
	}
	return false;
}

SCDecl* SC_Func_Self(SCFunction* Self) {
	return ((SCDecl*)JB_Array_Value(Self->Args, 0));
}

void SC_Func_SetBlindCasts(SCFunction* Self, SCNode* Name_space) {
	if (Name_space) {
		SCImport* P = Name_space->Project;
		if (P) {
			Self->BlindCasts = P->BlindCast;
		}
	}
	 else {
		SCImport* C = SC__Imp_Curr;
		if (C) {
			Self->BlindCasts = C->BlindCast;
		}
	}
}

Message* SC_Func_SourceArg(SCFunction* Self) {
	Message* Arg = ((Message*)JB_Ring_Last(Self->Source));
	if (JB_Msg_EqualsSyx(Arg, kJB_SyxArg, false)) {
		return Arg;
	}
	return nil;
}

void SC_Func_StartASM(SCFunction* Self) {
	Self->xC2xB5Start = SC_Pac_Index((&SC__Pac_Sh));
}

SCDecl* SC_Func_StructReturned(SCFunction* Self) {
	uint P = Self->StructReturnPos;
	if (P) {
		SCDecl* F = ((SCDecl*)JB_Array_Value(Self->Args, P - 1));
		if (SC_Decl_SyntaxIs(F, kSC__SCDeclInfo_IntendedAsReturn)) {
			return F;
		}
	}
	return nil;
}

void SC_Func_SubFuncParamsLoad(SCFunction* Self, Message* P) {
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor)) {
		SC_Func_AddConstructorReturn(Self, P);
	}
	Message* Fc = ((Message*)JB_Ring_First(P));
	JB_Incr(Fc);
	if (Fc) {
		if ((Fc->Func == kJB_SyxThg) or ((Fc->Func == kJB_SyxDot) or (Fc->Func == kJB_SyxRel))) {
			SC_Func_DeclsPrototypeClass(Self, Fc);
		}
	}
	JB_Decr(Fc);
	Message* A = SC_Func_SourceArg(Self);
	JB_Incr(A);
	SCArg* Space = SC_Msg_SCArg(A, Self, nil);
	JB_Incr(Space);
	JB_Decr(A);
	if ((JB_Msg_EqualsSyx(P, kJB_SyxList, false)) or ((JB_Msg_EqualsSyx(P, kJB_SyxBra, false)) or (JB_Msg_EqualsSyx(P, kJB_SyxPrm, false)))) {
		P->Func = kJB_SyxPrm;
		SC_Func_CollectDeclsParams(Self, P, Space);
	}
	SC_Func_CollectStats(Self);
	if (Space and (!Self->Cls)) {
		SCNode* L = Self->Parent;
		JB_Incr(L);
		if (JB_Object_FastIsa(L, &SCModuleData)) {
			if (SC_Mod_IsProperModule(((SCModule*)L))) {
				SC_Mod_AddModuleToFunc(((SCModule*)L), Space);
			}
		}
		JB_Decr(L);
	}
	JB_Decr(Space);
	if (Self->FuncInfo) {
		SCDecl* R = Self->ReturnType;
		JB_Incr(R);
		if (R) {
			if (R == R->Type->TypeNormal) {
				JB_SetRef(R, SC_Decl_CopyDecl(R, false));
				JB_SetRef(Self->ReturnType, R);
			}
			R->AllocSource = Self->FuncInfo;
		}
		JB_Decr(R);
	}
}

bool SC_Func_SyntaxEquals(SCFunction* Self, JB_String* Name, bool Aware) {
	;
	if ((!Self)) {
		return nil;
	}
	if (JB_Str_Equals(Self->Name, Name, true)) {
		return true;
	}
	JB_String* X = Self->ExportName;
	if (JB_Str_Equals(X, Name, true)) {
		return true;
	}
	if (JB_Str_EndsWith(X, Name, true) and (JB_Str_ByteValue(X, JB_Str_Length(X) - (JB_Str_Length(Name) + 1)) == '_')) {
		return true;
	}
	return false;
}

bool SC_Func_SyntaxIs(SCFunction* Self, FunctionType K) {
	if (Self) {
		return ((bool)(Self->FuncInfo & K));
	}
	return false;
}

void SC_Func_SyntaxIsSet(SCFunction* Self, FunctionType K, bool Value) {
	if (Value) {
		Self->FuncInfo = (Self->FuncInfo | K);
	}
	 else {
		Self->FuncInfo = (Self->FuncInfo & (~K));
	}
}

void SC_Func_TrackReturns(SCFunction* Self, SCDecl* D) {
	if (!SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_ReturnedVar)) {
		(++Self->ReturnedVars);
		(SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_ReturnedVar, true));
	}
}

void SC_Func_Transform(SCFunction* Self) {
	SC_Func_CheckNotBadName(Self);
	if (Self->IsMacro) {
		return;
	}
	(SC_Func__CurrFuncSet(Self));
	SC__Mod_Curr = ((SCModule*)JB_Object_FastAs(Self->Parent, &SCModuleData));
	Self->Badness = 0;
	ErrorMarker StillOK = JB_Rec_Mark(JB_StdErr);
	Message* N = SC_Func_SourceArg(Self);
	if (!N) {
		return;
	}
	SCArg* Space = SC_Msg_SCArg(N, Self, nil);
	if (!Space) {
		return;
	}
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Wrapper)) {
		JB_FreeIfDead(SC_Base_ProcessLinkage(Space, N, SC_FuncLinkageTable));
	}
	 else {
		Message* R_z = SC_Func__Tran_Result(Self);
		SC_Func__Tran_All(Self, N, Space);
		if (R_z) {
			SC_Func__Tran_ResultFinish(Self, R_z, Space);
		}
		JB__Tk_Using.Flags = 0;
	}
	if (!JB_ErrorMarker_SyntaxCast(StillOK)) {
		Self->Badness = (Self->Badness | 1);
	}
	 else {
		SC_Func_CallParents(Self);
		if (SC_Func_CanBuildConstructor(Self)) {
			SC_Func_BuildConstructorDestructor(Self);
			SC_Func__Tran_All(Self, N, Space);
		}
	}
	(SC_Func__CurrFuncSet(nil));
	SC__Mod_Curr = nil;
}

void SC_Func_TranStrings(SCFunction* Self) {
	Message* S = SC_Func_SourceArg(Self);
	JB_Incr(S);
	if (S) {
		if (!SC_Func_SyntaxIs(Self, kSC__FunctionType_Wrapper)) {
			Message* _tmPf0 = ((Message*)JB_Ring_Parent(S));
			JB_Incr(_tmPf0);
			SC_Func__Tran_Strings(_tmPf0, Self);
			JB_Decr(_tmPf0);
		}
	}
	JB_Decr(S);
}

void SC_Func_TryAdd(SCFunction* Self, SCNode* B) {
	SC_Base_TryAdd(B, Self->Source, Self, Self->Name);
}

SCFunction* SC_Func_TryKeepBetter(SCFunction* Self, int OldMatch, SCFunction* F, int Match) {
	if ((OldMatch & kJB_kSuperClassMatch) and (SC_int_IsSimpleOrPointerCast(Match))) {
		return F;
	}
	if ((Match & kJB_kSuperClassMatch) and (SC_int_IsSimpleOrPointerCast(OldMatch))) {
		return Self;
	}
	if ((OldMatch & kJB_kTypeCastBothWays) and (!(Match & kJB_kTypeCastBothWays))) {
		return Self;
	}
	if ((Match & kJB_kTypeCastBothWays) and (!(OldMatch & kJB_kTypeCastBothWays))) {
		return F;
	}
	if ((OldMatch == kJB_kSimpleMatch) and (Match != kJB_kSimpleMatch)) {
		return Self;
	}
	if ((Match == kJB_kSimpleMatch) and (OldMatch != kJB_kSimpleMatch)) {
		return F;
	}
	if (OldMatch < Match) {
		return Self;
	}
	if (Match < OldMatch) {
		return F;
	}
	return nil;
}

bool SC_Func_Update_Source(SCFunction* Self, int Start, JB_String* Text, SCObject* Orig) {
	bool Rz = false;
	(SC_Func__CurrFuncSet(Self));
	JB__Tk_Using.Position = -1;
	JB__Tk_Using.Flags = 0;
	JB__Tk_Using.Tag = 0;
	Message* Source = SC_Str_ParseClean(Text);
	JB_Incr(Source);
	if (Source and (!JB_Msg_EqualsSyx(Source, kJB_SyxTmp, false))) {
		JB_SetRef(Source, JB_Msg_NeedSyx(Source, kJB_SyxTmp));
	}
	if (Source) {
		SC_Msg_SlidePositions(Source, Start);
		JB_SetRef(Self->Source, Source);
		SC_Func_Cleanupfunc(Self, Source);
		JB__Tk_Using.Flags = kJB__MsgParseFlags_Inserted;
		Array* List = JB_Array_Constructor0(nil);
		JB_Incr(List);
		Rz = SC_Func_UpdateSourceSub(Self, Source, List);
		JB_Decr(List);
		JB_SetRef(Source->Obj, SC_SCObject_Disambiguate(Orig, Source));
	}
	JB_Decr(Source);
	JB__Tk_Using.Flags = 0;
	JB__Tk_Using.Tag = 0;
	return Rz;
}

bool SC_Func_UpdateSourceSub(SCFunction* Self, Message* Src, Array* List) {
	bool Rz = false;
	if ((JB_Msg_EqualsSyx(Src, kJB_SyxTmp, true)) and (JB_Msg_SyntaxEquals(Src, JB_LUB[7], true))) {
		SC_Msg_MainFix2(Src);
	}
	Message* F = ((Message*)JB_Ring_First(Src));
	if (!F) {
		return nil;
	}
	if (JB_Msg_EqualsSyx(F, kJB_SyxDot, false)) {
		F->Func = kJB_SyxThg;
		JB_Tree_Clear(F);
	}
	Rz = JB_Rec_OK(JB_StdErr);
	SC_Func_Init_Sub(Self, Src, nil);
	Rz = JB_Rec_OK(JB_StdErr);
	if (Rz) {
		SC_Func_FuncParamsLoad(Self);
		SC_Func_Transform(Self);
		SC_nil__ExterminateZergBugs(Self);
		JB_Array_Clear(List);
		SC_Func_AnalyseRefs(Self, List);
		JB_Rec_Clear(JB_StdErr);
	}
	return Rz;
}

bool SC_Func_UseCppName(SCFunction* Self, JB_String* CppName) {
	if (!JB_Str_Exists(CppName)) {
		return nil;
	}
	SC_Base_SetExportName(Self, CppName, true);
	return true;
}

bool SC_Func_UseExportWrapper(SCFunction* Self, JB_String* CppWrapper) {
	if (JB_Str_Exists(CppWrapper)) {
		(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_Wrapper, true));
		SC_Base_SetExportName(Self, CppWrapper, true);
		return true;
	}
	return false;
}

void SC_Func_ValidateSaver(SCFunction* Self, JB_String* Name) {
	if (true) {
		Message* __varf1 = Self->Source;
		JB_Incr(__varf1);
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(__varf1, (&_usingf0));
		SC_Func_ValidateSaverSub(Self, Name);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), __varf1);
		JB_Decr(__varf1);
		JB_MsgPos_Destructor((&_usingf0));
	}
}

void SC_Func_ValidateSaverSub(SCFunction* Self, JB_String* Name) {
	SCClass* Cls = Self->Cls;
	if (!Cls) {
		JB_Object_Fail(nil);
		return;
	}
	if (Cls == SC_TypeSaveable) {
		return;
	}
	Message* First = ((Message*)JB_Ring_First(SC_Func_SourceArg(Self)));
	if (!First) {
		JB_Msg_SyntaxWarn(Self->Source, JB_LUB[1034]);
	}
	{
		Message* _LoopSrcf2 = SC_Func_SourceArg(Self);
		Message* Line = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Line));
			if (Cls->Super != SC_TypeSaveable) {
				SC_Msg_CheckSuperDotSave(Line, Name, First == Line);
			}
			if (!JB_Rec_OK(JB_StdErr)) {
				return;
			}
			Line = _Nf1;
		};
		;
	};
}

int SC_Func_VisibleArgs(SCFunction* Self) {
	int Rz = 0;
	{
		Array* _LoopSrcf2 = Self->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* S = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (S == nil) {
				break;
			}
			if (!S->Default) {
				(++Rz);
			}
			(++_if0);
		};
	}
	;
	Rz = (Rz - (Self->Cls != nil));
	return Rz;
}

void SC_Func_WantAs(SCFunction* Self, uint /*NilState*/ NS) {
	SCDecl* Dcl = ((SCDecl*)JB_Array_First(Self->Args));
	if (!(Dcl and (SC_Decl_TypeSuffers(Dcl) and Self->Cls))) {
		JB_Msg_Fail(Self->Source, JB_LUB[899]);
		return;
	}
	Dcl->NilDeclared = NS;
}

JB_String* SC_Func_WrappedName(SCFunction* Self) {
	if (!Self->IsCppInBuilt) {
		return Self->ExportName;
	}
	return JB_Str_OperatorPlus(Self->ExportName, JB_LUB[74]);
}

JB_String* SC_Func_xC2xB5Render(SCFunction* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	//;
	JB_FS_AppendString(Fs, JB_LUB[1282]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendByte(Fs, '\n');
	//;
	int Bb = 0;
	{
		FatASM* _FirstInstf2 = SC_Func_IR(Self);
		FatASM* xC2xB5 = _FirstInstf2;
		FatASM* _AfterInstf4 = xC2xB5 + Self->xC2xB5Length;
		while (xC2xB5 < _AfterInstf4) {
			if (SC__Options_ASMRenderBlocks and (xC2xB5->BlockNum != Bb)) {
				Bb = xC2xB5->BlockNum;
				//;
				JB_FS_AppendString(Fs, JB_LUB[52]);
				JB_FS_AppendInt32(Fs, Bb);
				JB_FS_AppendByte(Fs, '\n');
				//;
			}
			JB_FS_AppendByte(Fs, '\t');
			SC_FAT_Renda(xC2xB5, Fs, false);
			JB_FS_AppendByte(Fs, '\n');
			(++xC2xB5);
		};
	}
	;
	JB_String* _tmPf5 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf5);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

MWrap* SC_Func_xC2xB5Test(SCFunction* Self) {
	MWrap* Rz = ((MWrap*)nil);
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Mrap__Object(Self->xC2xB5Length * 3, 4));
	ASM* P = ((ASM*)JB_Mrap_Ptr(Rz));
	ASM* After = SC_Func_MuRender(Self, P, P + Rz->ItemCount);
	(JB_Mrap_ItemCountSet(Rz, After - P));
	(JB_Mrap_LengthSet(Rz, Rz->ItemCount));
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Func__AlterPostCond(Message* PostCond, Message* IterPostCond, Message* NodeSrc) {
	if (!IterPostCond) {
		return PostCond;
	}
	IterPostCond = JB_Msg_Copy(IterPostCond, NodeSrc);
	if ((!PostCond)) {
		return IterPostCond;
	}
	return SC_NewRel(({
		Message* __imPf0 = (JB_Syx_Msg(kJB_SyxBra, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf0, PostCond);
		 __imPf0;
	}), ({
		Message* __imPf1 = (JB_Syx_Msg(kJB_SyxBra, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf1, IterPostCond);
		 __imPf1;
	}), JB_LUB[251]);
}

Message* SC_Func__ArgToFunc(JB_String* NewName, Message* Params, Message* Arg) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[537]));
	JB_Msg_AppendSyx(Rz, kJB_SyxThg, NewName);
	if ((JB_Msg_EqualsSyx(Params, kJB_SyxPrm, false))) {
		JB_Tree_SyntaxAppend(Rz, Params);
	}
	 else if ((JB_Msg_EqualsSyx(Params, kJB_SyxThg, false))) {
		Message* _tmPf0 = JB_Msg_Msg(Rz, kJB_SyxBra, JB_LUB[0]);
		JB_Incr(_tmPf0);
		JB_Tree_SyntaxAppend(_tmPf0, Params);
		JB_Decr(_tmPf0);
	}
	 else {
	}
	JB_Tree_SyntaxAppend(Rz, Arg);
	Rz->Position = Arg->Position;
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Func__CanKeepAsSource(Message* List, Message* Arg, SCDecl* D) {
	if (((JB_Msg_EqualsSyx(List, kJB_SyxThg, false))) and (!SC_Msg_IsVarUseableInLoop(Arg, List->Name))) {
		return true;
	}
	if (JB_Msg_EqualsSyx(List, kJB_SyxNum, false)) {
		return true;
	}
	if (SC_Decl_IsCArray(D)) {
		return true;
	}
	return false;
}

bool SC_Func__CanKeepAsValue(SCIterator* Iter, Message* Arg, SCDecl* Dcl, Message* Value) {
	if ((!JB_Msg_EqualsSyx(Iter->Value, kJB_SyxThg, false))) {
		return nil;
	}
	if (!Value) {
		return nil;
	}
	if ((SC_Msg_IsVarUseableInLoop(Arg, Value->Name))) {
		return nil;
	}
	if (SC_Decl_IsCArray(Dcl)) {
		return nil;
	}
	return true;
}

void SC_Func__CurrFuncSet(SCFunction* Value) {
	JB_SetRef(SC__Func__CurrFunc, Value);
	if (JB__Flow_Active) {
		JB_String* _tmPf0 = SC_Named_Name(Value);
		JB_Incr(_tmPf0);
		JB_Flow__InputLine(JB_LUB[1338], _tmPf0);
		JB_Decr(_tmPf0);
		JB_Flow__InputLine(JB_LUB[1339], SC__Comp_StageName);
	}
}

SCFunction* SC_Func__CurrFunc() {
	return SC__Func__CurrFunc;
}

void SC_Func__FastStringOpt(Message* S) {
	SCFunction* Fn = SC_Msg_MsgFunc(S);
	Message* Prms = ((Message*)JB_Tree_Second(S));
	if (!(Prms and Fn)) {
		return;
	}
	if (!JB_Str_Equals(Fn->ExportName, JB_LUB[1340], false)) {
		return;
	}
	Message* Item = ((Message*)JB_Ring_Last(Prms));
	if (SC_Func_SyntaxEquals(SC_Msg_MsgFunc(Item), JB_LUB[1341], false)) {
		SC_FastStringOpts__FS(S, Item);
	}
	 else {
		SC_FastStringOpts__String(Item);
	}
}

Message* SC_Func__GetFileString(Message* Msg, JB_String* Name) {
	JB_Incr(Name);
	if (!((JB_Msg_SyntaxEquals(Msg, JB_LUB[483], true)) or (JB_Msg_SyntaxEquals(Msg, JB_LUB[1398], true)))) {
		JB_Msg_Fail(Msg, nil);
		JB_Decr(Name);
		return nil;
	}
	bool OK = JB_Str_Last(Name, 0) == '?';
	if (OK) {
		JB_SetRef(Name, JB_Str_Shorten(Name, 1));
	}
	JB_String* Data = JB_LUB[0];
	JB_Incr(Data);
	JB_File* F = SC_Comp__InputFile(Name, Msg);
	JB_Incr(F);
	JB_Decr(Name);
	if (F) {
		JB_SetRef(Data, JB_File_ReadAll(F, 134217728, true));
		if (JB_Msg_SyntaxEquals(Msg, JB_LUB[1398], true)) {
			JB_SetRef(Data, JB_ImageHelper__ConvertPNGToVOI(Data));
		}
		OK = JB_Str_Exists(Data);
	}
	if (OK) {
		JB_Msg_BecomeStr(Msg, kJB_SyxStr, Data);
		(SC__Imp_Recent = JB_int64_OperatorMax(SC__Imp_Recent, JB_File_Modified(F)));
		JB_Tree_Clear(Msg);
		SC_Func__ObjectifyString(Msg);
		JB_Decr(F);
		JB_Decr(Data);
		return Msg;
	}
	JB_Decr(Data);
	JB_Decr(F);
	if (true) {
		JB_Msg_Fail(Msg, JB_LUB[788]);
	}
	return nil;
}

bool SC_Func__InBuiltFunc(Message* Self, JB_String* Name) {
	if (!JB_Msg_OperatorIn(Self, kJB_SyxQues)) {
		return nil;
	}
	if (JB_Msg_SyntaxEquals(Self, Name, false)) {
		Message* F = ((Message*)JB_Ring_First(Self));
		if (F) {
			if (true) {
				JB_Msg_Fail(F, nil);
			}
		}
		JB_Msg_BecomeStr(Self, kJB_SyxBra, JB_LUB[0]);
		return true;
	}
	return false;
}

int SC_Func__Init_() {
	{
		JB_SetRef(SC__Func_TemporalStatements, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf0 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_CppRefs))));
		JB_Incr(_tmPf0);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2092], _tmPf0));
		JB_Decr(_tmPf0);
		DTWrap* _tmPf1 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_For))));
		JB_Incr(_tmPf1);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[252], _tmPf1));
		JB_Decr(_tmPf1);
		DTWrap* _tmPf2 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Swap))));
		JB_Incr(_tmPf2);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[773], _tmPf2));
		JB_Decr(_tmPf2);
		DTWrap* _tmPf3 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_While))));
		JB_Incr(_tmPf3);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[176], _tmPf3));
		JB_Decr(_tmPf3);
		DTWrap* _tmPf4 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Description))));
		JB_Incr(_tmPf4);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1791], _tmPf4));
		JB_Decr(_tmPf4);
		DTWrap* _tmPf5 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_If))));
		JB_Incr(_tmPf5);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[175], _tmPf5));
		JB_Decr(_tmPf5);
		DTWrap* _tmPf6 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Else))));
		JB_Incr(_tmPf6);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[445], _tmPf6));
		JB_Decr(_tmPf6);
		DTWrap* _tmPf7 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Else))));
		JB_Incr(_tmPf7);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[446], _tmPf7));
		JB_Decr(_tmPf7);
		DTWrap* _tmPf8 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Once))));
		JB_Incr(_tmPf8);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[235], _tmPf8));
		JB_Decr(_tmPf8);
		DTWrap* _tmPf9 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Ifn))));
		JB_Incr(_tmPf9);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1932], _tmPf9));
		JB_Decr(_tmPf9);
		DTWrap* _tmPf10 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Debugger))));
		JB_Incr(_tmPf10);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1274], _tmPf10));
		JB_Decr(_tmPf10);
		DTWrap* _tmPf11 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_crash)));
		JB_Incr(_tmPf11);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1962], _tmPf11));
		JB_Decr(_tmPf11);
		DTWrap* _tmPf12 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Deprecate))));
		JB_Incr(_tmPf12);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2103], _tmPf12));
		JB_Decr(_tmPf12);
		DTWrap* _tmPf13 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Problem))));
		JB_Incr(_tmPf13);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2104], _tmPf13));
		JB_Decr(_tmPf13);
		DTWrap* _tmPf14 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Fails))));
		JB_Incr(_tmPf14);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2105], _tmPf14));
		JB_Decr(_tmPf14);
		DTWrap* _tmPf15 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_BlindCasts))));
		JB_Incr(_tmPf15);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2106], _tmPf15));
		JB_Decr(_tmPf15);
		DTWrap* _tmPf16 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_DebugAt))));
		JB_Incr(_tmPf16);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2107], _tmPf16));
		JB_Decr(_tmPf16);
		DTWrap* _tmPf17 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Visible))));
		JB_Incr(_tmPf17);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1350], _tmPf17));
		JB_Decr(_tmPf17);
		DTWrap* _tmPf18 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Tran_Flow))));
		JB_Incr(_tmPf18);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[611], _tmPf18));
		JB_Decr(_tmPf18);
		DTWrap* _tmPf19 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Print))));
		JB_Incr(_tmPf19);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1958], _tmPf19));
		JB_Decr(_tmPf19);
		DTWrap* _tmPf20 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Print))));
		JB_Incr(_tmPf20);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1793], _tmPf20));
		JB_Decr(_tmPf20);
		DTWrap* _tmPf21 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Print))));
		JB_Incr(_tmPf21);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2108], _tmPf21));
		JB_Decr(_tmPf21);
		DTWrap* _tmPf22 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Print))));
		JB_Incr(_tmPf22);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2109], _tmPf22));
		JB_Decr(_tmPf22);
		DTWrap* _tmPf23 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Log))));
		JB_Incr(_tmPf23);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[556], _tmPf23));
		JB_Decr(_tmPf23);
		DTWrap* _tmPf24 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Beep))));
		JB_Incr(_tmPf24);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1945], _tmPf24));
		JB_Decr(_tmPf24);
		DTWrap* _tmPf25 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_ignore)));
		JB_Incr(_tmPf25);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[467], _tmPf25));
		JB_Decr(_tmPf25);
		DTWrap* _tmPf26 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_alert)));
		JB_Incr(_tmPf26);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2110], _tmPf26));
		JB_Decr(_tmPf26);
		DTWrap* _tmPf27 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_break)));
		JB_Incr(_tmPf27);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[771], _tmPf27));
		JB_Decr(_tmPf27);
		DTWrap* _tmPf28 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_do)));
		JB_Incr(_tmPf28);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2111], _tmPf28));
		JB_Decr(_tmPf28);
		DTWrap* _tmPf29 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_VM_Builder__BuildInstructions))));
		JB_Incr(_tmPf29);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2112], _tmPf29));
		JB_Decr(_tmPf29);
		DTWrap* _tmPf30 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_NotAllowed)));
		JB_Incr(_tmPf30);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[474], _tmPf30));
		JB_Decr(_tmPf30);
		DTWrap* _tmPf31 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_NotAllowed)));
		JB_Incr(_tmPf31);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[473], _tmPf31));
		JB_Decr(_tmPf31);
		DTWrap* _tmPf32 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Quit))));
		JB_Incr(_tmPf32);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1268], _tmPf32));
		JB_Decr(_tmPf32);
		DTWrap* _tmPf33 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Return))));
		JB_Incr(_tmPf33);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[239], _tmPf33));
		JB_Decr(_tmPf33);
		DTWrap* _tmPf34 = JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Rejoin))));
		JB_Incr(_tmPf34);
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[240], _tmPf34));
		JB_Decr(_tmPf34);
	}
	;
	return 0;
}

int SC_Func__InitCode_() {
	{
	}
	;
	JB_SetRef(SC__SCStrings_RenderInsides, SC_Str_ParseCleanWipe(JB_LUB[2027]));
	JB_SetRef(SC__SCStrings_RenderNewParams, SC_Str_ParseCleanWipe(JB_LUB[2028]));
	JB_SetRef(SC__SCStrings_RenderFinish, JB_Msg_FindSyxName(SC__SCStrings_RenderInsides, kJB_SyxTmp, JB_LUB[2029], false));
	return 0;
}

bool SC_Func__InType(SCNodeType Ty) {
	SCFunction* Fn = SC_Func__CurrFunc();
	if (Fn) {
		SCClass* Cls = Fn->Cls;
		if (Cls) {
			return SC_SCNodeType_SyntaxIs(Cls->BaseType, Ty);
		}
	}
	return false;
}

JB_String* SC_Func__NameList() {
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		JB_Incr(_LoopSrcf2);
		int _if0 = 0;
		while (true) {
			SCFunction* Fn = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			JB_Incr(Fn);
			if (Fn == nil) {
				JB_Decr(Fn);
				break;
			}
			JB_FS_AppendString(Fs, Fn->ExportName);
			JB_Decr(Fn);
			JB_FS_AppendByte(Fs, '\n');
			(++_if0);
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_String* _tmPf3 = JB_FS_SyntaxCast(Fs);
	JB_Incr(_tmPf3);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

SCNode* SC_Func__NeuLibrary(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (true) {
		JB_Msg_Fail(Node, JB_LUB[2072]);
	}
	SC__Options_ProjectIsLibrary = true;
	return SC_Func__NeuMain(Node, Name_space, ErrPlace);
}

SCNode* SC_Func__NeuMain(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCNode* Rz = nil;
	JB_Incr(Rz);
	if (Name_space != SC__Comp_program) {
		JB_Msg_Fail(Node, JB_LUB[2056]);
		JB_Decr(Rz);
		return nil;
	}
	if (SC__Imp_CurrIsManuallyImported) {
		JB_Decr(Rz);
		return SC__Comp_program;
	}
	Message* Fn_src = SC_Msg_MainFix(Node);
	JB_Incr(Fn_src);
	if (Fn_src) {
		SC__Comp_HasMainFunc = true;
		SCModule* M = SC__Comp_Project->Mod;
		JB_Incr(M);
		JB_SetRef(Rz, SC_Func__NewFunc(Fn_src, M, ErrPlace));
		if (JB_Object_FastIsa(Rz, &SCModuleData)) {
			JB_SetRef(SC__Comp_MainFunc, SC_Class__ProcessExtend(Fn_src, false, M));
			JB_Tree_Remove(Fn_src);
		}
		JB_Decr(M);
	}
	JB_Decr(Fn_src);
	JB_SafeDecr(Rz);
	return Rz;
}

SCNode* SC_Func__NeuSyx(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCNode* Rz = nil;
	JB_Incr(Rz);
	MessagePosition Using = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Node, (&Using));
	Message* NewNode = SC_Func__Tran_Syx(Node);
	JB_Incr(NewNode);
	if (NewNode) {
		JB_SetRef(Rz, SC_Func__NewHelper(NewNode, Name_space, ErrPlace));
	}
	JB_Decr(NewNode);
	JB_MsgPos_Destructor((&Using));
	JB_SafeDecr(Rz);
	return Rz;
}

SCNode* SC_Func__NewConstructor(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_SetRef(Node->Name, JB_LUB[537]);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Node, (&_usingf0));
	Message* _tmPf1 = JB_Syx_OperatorPlus(kJB_SyxThg, JB_LUB[617]);
	JB_Incr(_tmPf1);
	(JB_Ring_FirstSet(Node, _tmPf1));
	JB_Decr(_tmPf1);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
	SCNode* _tmPf2 = SC_Func__NewFunc(Node, Name_space, ErrPlace);
	JB_Incr(_tmPf2);
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

SCNode* SC_Func__NewCppWrapper(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCNode* Rz = nil;
	JB_Incr(Rz);
	Message* Name = JB_Msg_NeedSyx(Node, kJB_SyxThg);
	JB_Incr(Name);
	if (!Name) {
		JB_Decr(Name);
		JB_Decr(Rz);
		return nil;
	}
	Message* Prm = ((Message*)JB_Ring_NextSib(Name));
	JB_Incr(Prm);
	if (!Prm) {
		JB_Decr(Prm);
		JB_Decr(Name);
		JB_Decr(Rz);
		return nil;
	}
	if (!JB_Tree_IsLast(Prm)) {
		JB_Msg_Fail(Prm, nil);
		JB_Decr(Prm);
		JB_Decr(Name);
		JB_Decr(Rz);
		return nil;
	}
	JB_Decr(Prm);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Name, (&_usingf0));
	Message* Thg = JB_Syx_OperatorPlus(kJB_SyxThg, Name->Name);
	JB_Incr(Thg);
	if (JB_Msg_SyntaxEquals(Node, JB_LUB[72], false)) {
		JB_SetRef(Thg, SC_Msg_WrapWith(Thg, kJB_SyxBra, JB_LUB[0]));
	}
	bool IsNothing = (JB_Msg_SyntaxEquals(Node, JB_LUB[71], false));
	bool IsLib = (JB_Msg_SyntaxEquals(Node, JB_LUB[73], false));
	JB_SetRef(Node->Name, JB_LUB[537]);
	Message* _tmPf2 = JB_Msg_Msg(Node, kJB_SyxArg, JB_LUB[0]);
	JB_Incr(_tmPf2);
	Message* _tmPf1 = JB_Msg_Msg(_tmPf2, kJB_SyxTmp, JB_LUB[1153]);
	JB_Incr(_tmPf1);
	JB_Decr(_tmPf2);
	JB_Tree_SyntaxAppend(_tmPf1, Thg);
	JB_Decr(Thg);
	JB_Decr(_tmPf1);
	JB_SetRef(Rz, SC_Func__NewFunc(Node, Name_space, ErrPlace));
	if (JB_Object_FastIsa(Rz, &SCFunctionData)) {
		((SCFunction*)Rz)->NoAutoComplete = 1;
		if (IsNothing) {
			(SC_Func_IsCppInBuiltSet(((SCFunction*)Rz), 2));
		}
		 else if (JB_Msg_SyntaxEquals(Node, JB_LUB[72], false)) {
			(SC_Func_IsCppInBuiltSet(((SCFunction*)Rz), 1));
		}
		((SC_Func_SyntaxIsSet(((SCFunction*)Rz), kSC__FunctionType_ExternalLib, IsLib)));
		SC_Func_MakeParamsReal(((SCFunction*)Rz));
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Name);
	JB_Decr(Name);
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(Rz);
	return Rz;
}

SCNode* SC_Func__NewDestructor(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		if ((((SCClass*)Name_space)->IsRole)) {
			JB_Msg_Fail(Node, JB_LUB[1918]);
			return nil;
		}
		JB_SetRef(Node->Name, JB_LUB[537]);
		if (true) {
			MessagePosition _usingf0 = ((MessagePosition){});
			JB_Msg_SyntaxUsing(Node, (&_usingf0));
			Message* _tmPf1 = JB_Syx_OperatorPlus(kJB_SyxThg, JB_LUB[1919]);
			JB_Incr(_tmPf1);
			(JB_Ring_FirstSet(Node, _tmPf1));
			JB_Decr(_tmPf1);
			JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
			JB_MsgPos_Destructor((&_usingf0));
		}
		return SC_Func__NewFunc(Node, ((SCClass*)Name_space), ErrPlace);
	}
	return nil;
}

SCNode* SC_Func__NewFunc(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (!Node) {
		return nil;
	}
	Message* Name = ((Message*)JB_Ring_First(Node));
	JB_Incr(Name);
	if (!Name) {
		JB_Msg_Fail(Node, JB_LUB[1899]);
		JB_Decr(Name);
		return nil;
	}
	if (JB_Msg_EqualsSyx(Name, kJB_SyxDot, false)) {
		JB_Decr(Name);
		return SC_Class__ExtendOneFunc(Node, nil, ErrPlace);
	}
	JB_Decr(Name);
	return SC_Func__NewFuncSub(Node, Name_space);
}

SCFunction* SC_Func__NewFuncSub(Message* Node, SCNode* Name_space) {
	SCFunction* Fn = SC_Func_Constructor(nil, Node);
	JB_Incr(Fn);
	SC_Func_Init_Sub(Fn, Node, Name_space);
	JB_SafeDecr(Fn);
	return Fn;
}

SCNode* SC_Func__NewHelper(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCNode* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, SC_Func__NewFunc(Node, Name_space, ErrPlace));
	if (Rz) {
		(SC_SCObject_SyntaxIsSet(Rz, kSC__SCNodeInfo_Visible, (!true)));
	}
	JB_SafeDecr(Rz);
	return Rz;
}

SCNode* SC_Func__NewHider(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (!JB_Object_Isa(Name_space, &SCClassData)) {
		JB_Msg_Fail(ErrPlace, JB_LUB[1920]);
		return nil;
	}
	return SC_Func__NewFunc(Node, Name_space, ErrPlace);
}

SCNode* SC_Func__NewMacro(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	return SC_Func__NewFunc(Node, Name_space, ErrPlace);
}

SCNode* SC_Func__NewProtoType(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	return SC_Func__NewProtoTypeSub(Node, Name_space, ErrPlace, JB_LUB[0]);
}

SCModule* SC_Func__NewProtoTypeSub(Message* Node, SCNode* Parent, Message* ErrPlace, JB_String* ForInterface) {
	JB_Incr(Parent);
	if (JB_Object_FastIsa(Parent, &SCClassData)) {
		if (!JB_Str_Exists(ForInterface)) {
			JB_FreeIfDead(SC_Msg_NormaliseFunc(Node, ((SCClass*)Parent)));
		}
		JB_SetRef(Parent, ((SCClass*)((SCClass*)Parent)->Modul));
	}
	 else {
		if (!SC_Base_ExpectModule(Parent, Node)) {
			JB_Decr(Parent);
			return nil;
		}
	}
	SCFunction* F = ((SCFunction*)SC_Func__NewFunc(Node, Parent, ErrPlace));
	JB_Incr(F);
	if (!JB_Object_Isa(F, &SCFunctionData)) {
		JB_Msg_Fail(Node, JB_LUB[1921]);
		JB_Decr(Parent);
		JB_Decr(F);
		return nil;
	}
	JB_FreeIfDead(((SCFunction*)JB_Array_Pop(SC__Comp_FuncList)));
	MessagePosition Using = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Node, (&Using));
	Message* Tmp = JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[168]);
	JB_Incr(Tmp);
	JB_Msg_AppendSyx(Tmp, kJB_SyxThg, F->Name);
	Message* _tmPf0 = ((Message*)JB_Ring_Last(Node));
	JB_Incr(_tmPf0);
	JB_Tree_SyntaxAppend(Tmp, _tmPf0);
	JB_Decr(_tmPf0);
	SCModule* Modul = SC_Class__DataTypeSub(Tmp, Parent, Node, ForInterface, kSC__SCNodeType_FuncProto);
	JB_Incr(Modul);
	JB_Decr(Tmp);
	if (Modul) {
		SCClass* Clss = Modul->Cls;
		JB_Incr(Clss);
		Clss->BaseType = kSC__SCNodeType_FuncProto;
		(SC_Class_SyntaxIsSet(Clss, kSC__ClassInfo_Builtin, (!true)));
		JB_SetRef(Clss->FuncProto, F);
		Clss->Size = JB_Platform__PointerBytes();
		JB_SetRef(F->ProtoType, Clss);
		JB_Decr(Clss);
		JB_Array_SyntaxAppend(SC__Comp_ProtoTypes, F);
		SC_Base_TryAdd(Parent, Node, Modul, Modul->Name);
		if (!JB_Str_Exists(ForInterface)) {
			JB_SetRef(Modul, SC__Comp_program);
		}
	}
	JB_Decr(F);
	JB_Decr(Parent);
	JB_SafeDecr(Modul);
	JB_MsgPos_Destructor((&Using));
	return Modul;
}

SCNode* SC_Func__NewRender(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCNode* Rz = nil;
	JB_Incr(Rz);
	SCClass* Cls = SC_Base_IsNormalObject(Name_space);
	JB_Incr(Cls);
	if (SC_Func__Tran_Render(Node, Cls)) {
		JB_SetRef(Rz, SC_Beh__NewActual(Node, Name_space, ErrPlace));
	}
	 else {
		JB_SetRef(Rz, SC_Func__NewFunc(Node, Name_space, ErrPlace));
	}
	JB_Decr(Cls);
	if (Rz) {
		(SC_Func_SyntaxIsSet(((SCFunction*)Rz), kSC__FunctionType_Render, true));
	}
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Func__ObjectifyString(Message* Msg) {
	Msg->Func = kJB_SyxSStr;
}

void SC_Func__PrintStats(FastString* Fs) {
	SC_FS_PrintStatType(Fs, JB_LUB[152], SC__Func_FuncArgAndReturnTypes[1] + SC__Func_FuncArgAndReturnTypes[0]);
	SC_FS_PrintStatType(Fs, JB_LUB[154], SC__Func_FuncArgAndReturnTypes[2]);
	SC_FS_PrintStatType(Fs, JB_LUB[461], SC__Func_FuncArgAndReturnTypes[3]);
	SC_FS_PrintStatType(Fs, JB_LUB[462], SC__Func_FuncArgAndReturnTypes[4]);
	SC_FS_PrintStatType(Fs, JB_LUB[463], SC__Func_FuncArgAndReturnTypes[5]);
	SC_FS_PrintStatType(Fs, JB_LUB[464], SC__Func_FuncArgAndReturnTypes[6]);
	SC_FS_PrintStatType(Fs, JB_LUB[465], SC__Func_FuncArgAndReturnTypes[7]);
}

void SC_Func__String_Expand(Message* Msg, SCFunction* Fn) {
	JB_Incr(Msg);
	Message* P = ((Message*)JB_Ring_Parent(Msg));
	JB_Incr(P);
	if (SC_Msg_OperatorIsTmp(P, JB_LUB[1790]) or SC_Msg_OperatorIsTmp(P, JB_LUB[1791])) {
		Msg->Func = kJB_SyxStr;
		JB_Decr(Msg);
		JB_Decr(P);
		return;
	}
	bool URL = JB_Msg_OperatorIn(Msg, kJB_Syxurl);
	if (URL) {
		JB_FreeIfDead(SC_Func__GetFileString(P, Msg->Name));
		JB_SetRef(Msg, P);
	}
	if (SC_Func__InBuiltFunc(Msg, JB_LUB[1792])) {
		JB_SetRef(Msg->Name, JB_Str_Digest(Msg->Name));
	}
	 else if (JB_Msg_EqualsSyx(P, kJB_SyxArg, false)) {
		JB_FreeIfDead(SC_Msg_WrapWith(Msg, kJB_SyxTmp, JB_LUB[1793]));
	}
	JB_Decr(P);
	if (!JB_FreeIfDead(((Message*)JB_Ring_First(Msg)))) {
		SC_Func__ObjectifyString(Msg);
		JB_Decr(Msg);
		return;
	}
	if (!Fn) {
		JB_Decr(Msg);
		return;
	}
	Message* Point = SC_Msg_ParentPoint(Msg);
	JB_Incr(Point);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Msg, (&_usingf0));
	JB_String* FSName = SC_UniqueTmpVar(Fn, JB_LUB[1107]);
	JB_Incr(FSName);
	JB_String* StrName = JB_Str_OperatorPlus(FSName, JB_LUB[1794]);
	JB_Incr(StrName);
	JB_Decr(StrName);
	Message* Dot = (JB_Syx_Msg(kJB_SyxDot, JB_LUB[602]));
	JB_Incr(Dot);
	Message* _tmPf7 = JB_Syx_Msg(kJB_SyxThg, JB_LUB[1795]);
	JB_Incr(_tmPf7);
	JB_Tree_SyntaxAppend(Dot, (_tmPf7));
	JB_Decr(_tmPf7);
	Message* _tmPf8 = JB_Syx_Msg(kJB_SyxEmb, JB_LUB[0]);
	JB_Incr(_tmPf8);
	JB_Tree_SyntaxAppend(Dot, (_tmPf8));
	JB_Decr(_tmPf8);
	Message* Decl = SC_MakeDecl(JB_LUB[1795], FSName, Dot, 0);
	JB_Incr(Decl);
	JB_Decr(Dot);
	(JB_Ring_PrevSibSet(Point, Decl));
	Message* Errpos = Msg;
	JB_Incr(Errpos);
	{
		Message* Item = ((Message*)JB_Ring_First(Msg));
		JB_Incr(Item);
		while (Item) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(Item));
			JB_Incr(_Nf2);
			Syntax Syx = Item->Func;
			if ((Syx == kJB_SyxEmb) or (Syx == kJB_SyxStr)) {
				if (Syx == kJB_SyxEmb) {
					JB_SetRef(Errpos, Item);
				}
				SC_Func__ObjectifyString(Item);
			}
			JB_SetRef(Item, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(Item);
		;
	}
	;
	if ((SC__Mod_Curr)) {
		JB_Msg_Fail(Errpos, JB_LUB[1796]);
	}
	{
		Message* Item = ((Message*)JB_Ring_First(Msg));
		JB_Incr(Item);
		while (Item) {
			Message* _Nf4 = ((Message*)JB_Ring_NextSib(Item));
			JB_Incr(_Nf4);
			Message* _tmPf9 = ({
				Message* __imPf5 = (JB_Syx_Msg(kJB_SyxDot, JB_LUB[1278]));
				JB_Incr(__imPf5);
				Message* _tmPf10 = JB_Syx_Msg(kJB_SyxThg, FSName);
				JB_Incr(_tmPf10);
				JB_Tree_SyntaxAppend(__imPf5, (_tmPf10));
				JB_Decr(_tmPf10);
				Message* _tmPf11 = ({
					Message* __imPf6 = (JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0]));
					JB_Incr(__imPf6);
					JB_Tree_SyntaxAppend(__imPf6, Item);
					JB_SafeDecr(__imPf6);
					 __imPf6;
				});
				JB_Incr(_tmPf11);
				JB_Tree_SyntaxAppend(__imPf5, _tmPf11);
				JB_Decr(_tmPf11);
				JB_SafeDecr(__imPf5);
				 __imPf5;
			});
			JB_Incr(_tmPf9);
			(JB_Ring_PrevSibSet(Point, _tmPf9));
			JB_Decr(_tmPf9);
			JB_SetRef(Item, _Nf4);
			JB_Decr(_Nf4);
		};
		JB_Decr(Item);
		;
		JB_Decr(Errpos);
	}
	;
	JB_Decr(Point);
	bool WeAreAppending = false;
	Message* Fnc = ((Message*)JB_Ring_Parent(Msg));
	JB_Incr(Fnc);
	if (JB_Msg_EqualsSyx(Fnc, kJB_SyxPrm, false)) {
		JB_SetRef(Fnc, ((Message*)JB_Ring_Parent(Fnc)));
		if ((JB_Msg_EqualsSyx(Fnc, kJB_SyxDot, true)) and (JB_Msg_SyntaxEquals(Fnc, JB_LUB[1278], true))) {
			WeAreAppending = true;
		}
	}
	JB_Decr(Fnc);
	JB_Msg_BecomeStr(Msg, kJB_SyxDot, JB_LUB[1797]);
	Message* _tmPf12 = JB_Syx_Msg(kJB_SyxThg, FSName);
	JB_Incr(_tmPf12);
	JB_Decr(FSName);
	JB_Tree_SyntaxAppend(Msg, (_tmPf12));
	JB_Decr(_tmPf12);
	Message* _tmPf13 = JB_Syx_Msg(kJB_SyxEmb, JB_LUB[0]);
	JB_Incr(_tmPf13);
	JB_Tree_SyntaxAppend(Msg, (_tmPf13));
	JB_Decr(_tmPf13);
	;
	JB_Decr(Decl);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Msg);
	JB_Decr(Msg);
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Func__TypedTempMoveOut(Message* Msg, JB_String* Name, SCDecl* Type) {
	JB_Incr(Name);
	MessagePosition Using = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Msg, (&Using));
	if (!JB_Str_Exists(Name)) {
		SCFunction* _tmPf1 = SC_Msg_MsgOwningFunc(Msg);
		JB_Incr(_tmPf1);
		JB_SetRef(Name, SC_UniqueTmpVar(_tmPf1, JB_LUB[1200]));
		JB_Decr(_tmPf1);
	}
	Message* Repl = (JB_Syx_Msg(kJB_SyxThg, Name));
	JB_Incr(Repl);
	Message* Insert = Msg;
	JB_Incr(Insert);
	JB_FreeIfDead(SC_Msg_ReplaceWith(Msg, Repl));
	Message* P = SC_Msg_ParentPoint(Repl);
	JB_Incr(P);
	if ((JB_Msg_EqualsSyx(Msg, kJB_SyxRel, false))) {
		JB_SetRef(Insert, ({
			Message* __imPf0 = (JB_Syx_Msg(kJB_SyxBra, JB_LUB[0]));
			JB_Incr(__imPf0);
			JB_Tree_SyntaxAppend(__imPf0, (Msg));
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
	}
	Message* Dcl = SC_MakeDecl(JB_LUB[0], Name, Insert, 0);
	JB_Incr(Dcl);
	(JB_Ring_PrevSibSet(P, Dcl));
	JB_Decr(P);
	if (JB_Msg_OperatorIn(Repl, kJB_SyxArg)) {
		JB_Tree_Remove(Repl);
	}
	if (Type) {
		JB_SetRef(Msg->Obj, Type);
	}
	SCDecl* OldDcl = SC_Msg_AsDecl(Msg);
	JB_Incr(OldDcl);
	if (OldDcl) {
		JB_SetRef(Insert->Obj, OldDcl);
		SCDecl* Dcl2 = SC_Decl_CopyDecl(OldDcl, false);
		JB_Incr(Dcl2);
		(SC_Decl_NameSet(Dcl2, Name));
		Message* _tmPf2 = ((Message*)JB_Ring_Last(Dcl));
		JB_Incr(_tmPf2);
		Message* Relname = ((Message*)JB_Ring_First(_tmPf2));
		JB_Incr(Relname);
		JB_Decr(_tmPf2);
		if (Relname) {
			JB_SetRef(Relname->Obj, Dcl2);
		}
		JB_Decr(Relname);
		JB_SetRef(Repl->Obj, Dcl2);
		JB_SetRef(Dcl->Obj, Dcl2);
		JB_Decr(Dcl2);
	}
	JB_Decr(Repl);
	JB_Decr(Insert);
	JB_Decr(OldDcl);
	JB_Decr(Name);
	JB_SafeDecr(Dcl);
	JB_MsgPos_Destructor((&Using));
	return Dcl;
}

Message* SC_Func__TempMoveOut(Message* Msg, Message* Place) {
	SCDecl* OldDecl = SC_Msg_AsDecl(Msg);
	JB_Incr(OldDecl);
	if (!OldDecl) {
		(JB_Ring_PrevSibSet(Place, Msg));
		JB_Decr(OldDecl);
		return Msg;
	}
	JB_Decr(OldDecl);
	MessagePosition Using = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Msg, (&Using));
	SCFunction* _tmPf0 = SC_Msg_MsgOwningFunc(Msg);
	JB_Incr(_tmPf0);
	JB_String* Name = SC_UniqueTmpVar(_tmPf0, JB_LUB[1200]);
	JB_Incr(Name);
	JB_Decr(_tmPf0);
	Message* NameThing = JB_Syx_OperatorPlus(kJB_SyxThg, Name);
	JB_Incr(NameThing);
	JB_FreeIfDead(SC_Msg_ReplaceWith(Msg, NameThing));
	Message* Declmsg = SC_MakeDecl(JB_LUB[0], Name, Msg, kSC__SCDeclInfo_Body);
	JB_Incr(Declmsg);
	JB_Decr(Name);
	(JB_Ring_PrevSibSet(Place, Declmsg));
	SCDecl* D = ((SCDecl*)Declmsg->Obj);
	JB_Incr(D);
	JB_Decr(Declmsg);
	JB_SetRef(NameThing->Obj, D);
	JB_Decr(D);
	JB_SafeDecr(NameThing);
	JB_MsgPos_Destructor((&Using));
	return NameThing;
}

SCDecl* SC_Func__Tran_AfterRel(Message* Msg, SCNode* Name_space, Message* Side) {
	Message* Exp = ((Message*)JB_Ring_First(Msg));
	JB_Incr(Exp);
	if (JB_Msg_SyntaxEquals(Msg, JB_LUB[174], false)) {
		SCDecl* Ty = SC_TypeOfExpr(Exp, Name_space, Side);
		JB_Incr(Ty);
		if (!Ty) {
			JB_Decr(Ty);
			JB_Decr(Exp);
			return nil;
		}
		SCDecl* _tmPf5 = SC_Decl_MakeReal(Ty);
		JB_Incr(_tmPf5);
		JB_Decr(Ty);
		JB_Decr(Exp);
		JB_SafeDecr(_tmPf5);
		return _tmPf5;
	}
	if (!((JB_Msg_SyntaxEquals(Msg, JB_LUB[185], false)) or (JB_Msg_SyntaxEquals(Msg, JB_LUB[1272], false)))) {
		JB_Msg_Fail(Msg, nil);
		JB_Decr(Exp);
		return nil;
	}
	Message* P = ((Message*)JB_Ring_Parent(Msg));
	JB_Incr(P);
	JB_Decr(P);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Exp, (&_usingf0));
	Message* Exp_copy = nil;
	JB_Incr(Exp_copy);
	if (!JB_Msg_EqualsSyx(Exp, kJB_SyxThg, false)) {
		JB_SetRef(Exp_copy, JB_Msg_Copy(Exp, nil));
	}
	SCDecl* Type = SC_TypeOfExpr(Exp, Name_space, nil);
	JB_Incr(Type);
	if (!Type) {
		JB_Decr(Type);
		JB_Decr(Exp_copy);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(Exp);
		return nil;
	}
	if (SC_Decl_SyntaxIs(Type, kSC__SCDeclInfo_Const)) {
		JB_Msg_Fail(Msg, JB_LUB[1098]);
	}
	if (Type->PointerCount > 0) {
		if ((Side)) {
			JB_Msg_Fail(Msg, JB_LUB[1098]);
		}
		SC_Decl_MarkAsAltered(Type);
		SCDecl* _tmPf3 = SC_Decl_CheckMath(Type, Msg);
		JB_Incr(_tmPf3);
		JB_Decr(Type);
		JB_Decr(Exp_copy);
		JB_SafeDecr(_tmPf3);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(Exp);
		return _tmPf3;
	}
	if ((SC_Decl_IsBool(Type))) {
		JB_Msg_Fail(Msg, JB_LUB[1275]);
	}
	int Numc = SC_Class_NumericCount(Type->Type);
	if ((!SC_Class_IsObject(Type->Type)) and ((!Type->HiderFunc) and (Numc <= 1))) {
		SC_Decl_MarkAsAltered(Type);
		if ((Side)) {
			JB_Msg_Fail(Msg, JB_LUB[1098]);
		}
		JB_Decr(Exp_copy);
		JB_SafeDecr(Type);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(Exp);
		return Type;
	}
	Message* R = nil;
	JB_Incr(R);
	if (Numc or Type->HiderFunc) {
		Message* _tmPf1 = JB_Syx_OperatorPlus(kJB_SyxNum, JB_LUB[264]);
		JB_Incr(_tmPf1);
		JB_String* _tmPf2 = JB_Str_Range(Msg->Name, 0, 1);
		JB_Incr(_tmPf2);
		JB_SetRef(R, SC_NewRel(Exp, _tmPf1, _tmPf2));
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf2);
	}
	 else {
		JB_String* Name = ((JB_StringC*)JB_Ternary((JB_Msg_SyntaxEquals(Msg, JB_LUB[1272], false)), JB_LUB[1276], JB_LUB[1277]));
		JB_Incr(Name);
		JB_SetRef(R, JB_Syx_OperatorPlus(kJB_SyxDot, Name));
		JB_Decr(Name);
		JB_Tree_SyntaxAppend(R, Exp);
		JB_Msg_AppendSyx(R, kJB_SyxEmb, JB_LUB[0]);
	}
	JB_Decr(Type);
	if (!Exp_copy) {
		JB_SetRef(Exp_copy, JB_Msg_Copy(Exp, nil));
	}
	JB_Msg_BecomeStr(Msg, kJB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Msg, Exp_copy);
	JB_Decr(Exp_copy);
	JB_Msg_AppendSyx(Msg, kJB_SyxOpp, JB_LUB[241]);
	JB_Tree_SyntaxAppend(Msg, R);
	JB_Decr(R);
	JB_SetRef(Msg->Obj, nil);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Exp);
	JB_Decr(Exp);
	SCDecl* _tmPf4 = SC_TypeOfExpr(Msg, Name_space, nil);
	JB_Incr(_tmPf4);
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

void SC_Func__Tran_All(SCFunction* Fn, Message* S, SCNode* P) {
	if (SC_Rec_TooMany(JB_StdErr)) {
		return;
	}
	Syntax F = S->Func;
	if (F == kJB_SyxArg) {
		Message* Pr = ((Message*)JB_Ring_Parent(S));
		if (!((!JB_Msg_EqualsSyx(Pr, kJB_SyxBra, false)) and (!JB_Msg_EqualsSyx(Pr, kJB_SyxType, false)))) {
			return;
		}
	}
	 else if (F == kJB_SyxDecl) {
		Message* Arg = ((Message*)JB_Ring_Parent(S));
		if (!(JB_Msg_OperatorIn(Arg, kJB_SyxBra) or JB_Msg_OperatorIn(Arg, kJB_SyxType))) {
			SC_Msg_CollectFromBody(S, P);
			S = SC_DeclsDefault(((Message*)JB_Ring_Last(S)));
			if (S) {
				SC_Func__Tran_All(Fn, S, P);
			}
		}
		return;
	}
	 else if (F == kJB_SyxArr) {
		SC_Func__Tran_Array(S, P);
	}
	 else if (F == kJB_SyxType) {
		SC_Func__Tran_All(Fn, ((Message*)JB_Ring_First(S)), P);
		return;
	}
	 else if (F == kJB_SyxTmp) {
		if (SC_Func__Tran_Temporal(Fn, S, P) or ((JB_Msg_SyntaxEquals(S, JB_LUB[467], false)))) {
			return;
		}
	}
	 else if (F == kJB_SyxList) {
		if ((JB_Msg_EqualsSyx(((Message*)JB_Ring_First(S)), kJB_SyxItem, false))) {
			SC_Tran_MsgList(S);
		}
	}
	 else if (F == kJB_SyxMsg) {
		SC_Tran_Msg(Fn, S, P);
	}
	 else if (!((F == kJB_SyxThg) or ((F == kJB_SyxOpp) or ((F == kJB_SyxItem) or (F == kJB_SyxPrm))))) {
		JB_FreeIfDead(SC_TypeOfExpr(S, P, nil));
		if (JB_Msg_EqualsSyx(S, kJB_SyxFunc, false)) {
			SC_Func__FastStringOpt(S);
		}
	}
	 else if (F == kJB_SyxUnit) {
		return;
	}
	SC_Func__Tran_All_Final(Fn, S, P, F);
}

void SC_Func__Tran_All_Final(SCFunction* Fn, Message* S, SCNode* P, Syntax F) {
	JB_Incr(P);
	if (((JB_Msg_EqualsSyx(S, kJB_SyxArg, false))) and (F != kJB_SyxArg)) {
		JB_SetRef(P, SC_Msg_SCArg(S, P, nil));
	}
	Message* Ch = ((Message*)JB_Ring_First(S));
	JB_Incr(Ch);
	while (Ch) {
		if (JB_Msg_SyntaxIs(Ch, kJB__MsgParseFlags_BreakPoint) and JB_Msg_OperatorIn(Ch, kJB_SyxArg)) {
			SC_Func__Tran_BreakPoint(Fn, P, Ch);
		}
		Message* N = ((Message*)JB_Ring_NextSib(Ch));
		JB_Incr(N);
		if ((JB_Msg_EqualsSyx(Ch, kJB_SyxArg, false))) {
			SCArg* _tmPf0 = SC_Msg_SCArg(Ch, P, S);
			JB_Incr(_tmPf0);
			SC_Func__Tran_All(Fn, Ch, _tmPf0);
			JB_Decr(_tmPf0);
		}
		 else {
			SC_Func__Tran_All(Fn, Ch, P);
		}
		JB_SetRef(Ch, ((Message*)JB_Ring_NextSib(Ch)));
		if ((!Ch) and (N and ((Message*)JB_Ring_Parent(N)))) {
			JB_SetRef(Ch, N);
		}
		JB_Decr(N);
	};
	JB_Decr(Ch);
	JB_Decr(P);
}

void SC_Func__Tran_Array(Message* S, SCNode* Name_space) {
	SCDecl* Type = SC_Msg_AsDecl(S);
	JB_Incr(Type);
	if (!Type) {
		JB_Decr(Type);
		return;
	}
	Message* Thg = SC_Msg_IsSetIntoVar(S);
	JB_Incr(Thg);
	if ((!Thg)) {
		Message* _tmPf6 = SC_Msg_ParentPoint(S);
		JB_Incr(_tmPf6);
		JB_SetRef(Thg, SC_Func__TempMoveOut(S, _tmPf6));
		JB_Decr(_tmPf6);
		SCDecl* _tmPf7 = SC_Msg_AsDecl(Thg);
		JB_Incr(_tmPf7);
		SC_Base_TryAdd(Name_space, Thg, _tmPf7, Thg->Name);
		JB_Decr(_tmPf7);
	}
	Message* P = SC_Msg_NiceParent(S);
	JB_Incr(P);
	Message* Place = SC_Msg_ParentPoint(P);
	JB_Incr(Place);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(S, (&_usingf0));
	Message* DotNew = (JB_Syx_Msg(kJB_SyxDot, JB_LUB[602]));
	JB_Incr(DotNew);
	Message* _tmPf8 = JB_Syx_Msg(kJB_SyxThg, Type->Type->Name);
	JB_Incr(_tmPf8);
	JB_Decr(Type);
	JB_Tree_SyntaxAppend(DotNew, (_tmPf8));
	JB_Decr(_tmPf8);
	Message* _tmPf9 = JB_Syx_Msg(kJB_SyxEmb, JB_LUB[0]);
	JB_Incr(_tmPf9);
	JB_Tree_SyntaxAppend(DotNew, (_tmPf9));
	JB_Decr(_tmPf9);
	if (JB_Msg_OperatorIn(P, kJB_SyxDecl)) {
		SCDecl* D = SC_Msg_AsDecl(P);
		JB_Incr(D);
		if (!D) {
			JB_Decr(D);
			JB_Decr(DotNew);
			JB_MsgPos_Destructor((&_usingf0));
			JB_Decr(Place);
			JB_Decr(P);
			JB_Decr(Thg);
			return;
		}
		JB_SetRef(D->Default, DotNew);
		JB_Decr(D);
	}
	JB_Decr(P);
	SC_Msg_FixMultiArr(S);
	{
		Message* Item = ((Message*)JB_Ring_First(S));
		JB_Incr(Item);
		while (Item) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(Item));
			JB_Incr(_Nf2);
			Message* Rel = nil;
			JB_Incr(Rel);
			if (JB_Msg_EqualsSyx(Item, kJB_SyxItem, false)) {
				JB_Tree_Remove(Item);
				JB_SetRef(Rel, ({
					Message* __imPf3 = (JB_Syx_Msg(kJB_SyxRel, JB_LUB[0]));
					JB_Incr(__imPf3);
					Message* _tmPf10 = ({
						Message* __imPf4 = (JB_Syx_Msg(kJB_SyxAcc, JB_LUB[0]));
						JB_Incr(__imPf4);
						Message* _tmPf11 = JB_Syx_Msg(kJB_SyxThg, Thg->Name);
						JB_Incr(_tmPf11);
						JB_Tree_SyntaxAppend(__imPf4, (_tmPf11));
						JB_Decr(_tmPf11);
						Message* _tmPf12 = ({
							Message* __imPf5 = (JB_Syx_Msg(kJB_SyxArr, JB_LUB[0]));
							JB_Incr(__imPf5);
							Message* _tmPf13 = ((Message*)JB_Ring_First(Item));
							JB_Incr(_tmPf13);
							JB_Tree_SyntaxAppend(__imPf5, _tmPf13);
							JB_Decr(_tmPf13);
							JB_SafeDecr(__imPf5);
							 __imPf5;
						});
						JB_Incr(_tmPf12);
						JB_Tree_SyntaxAppend(__imPf4, _tmPf12);
						JB_Decr(_tmPf12);
						JB_SafeDecr(__imPf4);
						 __imPf4;
					});
					JB_Incr(_tmPf10);
					JB_Tree_SyntaxAppend(__imPf3, _tmPf10);
					JB_Decr(_tmPf10);
					Message* _tmPf14 = JB_Syx_Msg(kJB_SyxOpp, JB_LUB[241]);
					JB_Incr(_tmPf14);
					JB_Tree_SyntaxAppend(__imPf3, (_tmPf14));
					JB_Decr(_tmPf14);
					Message* _tmPf15 = ((Message*)JB_Ring_Last(Item));
					JB_Incr(_tmPf15);
					JB_Tree_SyntaxAppend(__imPf3, _tmPf15);
					JB_Decr(_tmPf15);
					JB_SafeDecr(__imPf3);
					 __imPf3;
				}));
			}
			 else {
				JB_SetRef(Rel, JB_Syx_Msg(kJB_SyxDot, JB_LUB[1278]));
				JB_Msg_AppendSyx(Rel, kJB_SyxThg, Thg->Name);
				Message* _tmPf16 = JB_Msg_Msg(Rel, kJB_SyxPrm, JB_LUB[0]);
				JB_Incr(_tmPf16);
				JB_Tree_SyntaxAppend(_tmPf16, Item);
				JB_Decr(_tmPf16);
			}
			(JB_Ring_NextSibSet(Place, Rel));
			JB_SetRef(Place, Rel);
			JB_FreeIfDead(SC_TypeOfExpr(Rel, Name_space, nil));
			JB_Decr(Rel);
			JB_SetRef(Item, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(Item);
		;
	}
	;
	JB_Decr(Thg);
	JB_Decr(Place);
	JB_FreeIfDead(SC_TypeOfExpr(DotNew, Name_space, nil));
	SC_Msg_SafeReplaceWith(S, DotNew);
	JB_Decr(DotNew);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), S);
	JB_MsgPos_Destructor((&_usingf0));
}

bool SC_Func__Tran_Beep(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	SC_Msg_MiniTran(Node, Name_space, JB_LUB[471]);
	return false;
}

bool SC_Func__Tran_BlindCasts(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if ((!Fn)) {
		JB_Msg_Fail(Node, JB_LUB[901]);
		return nil;
	}
	Message* Thg = JB_Msg_NeedSyx(Node, kJB_SyxThg);
	JB_Incr(Thg);
	if (Thg) {
		JB_Tree_Remove(Node);
		Fn->BlindCasts = SC_Msg_Blind(Thg);
	}
	JB_Decr(Thg);
	return false;
}

void SC_Func__Tran_BreakPoint(SCFunction* Fn, SCNode* P, Message* Ch) {
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Ch, (&_usingf0));
		Message* Dbg = JB_Syx_OperatorPlus(kJB_SyxTmp, JB_LUB[1279]);
		(JB_Ring_PrevSibSet(Ch, Dbg));
		SC_Func__Tran_DebugAt(Fn, Dbg, P);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Ch);
		JB_MsgPos_Destructor((&_usingf0));
	}
}

bool SC_Func__Tran_CppRefs(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if ((!Fn)) {
		JB_Msg_Fail(Node, JB_LUB[901]);
		return nil;
	}
	JB_SetRef(Fn->Refs, SC_CppRefs_Constructor(nil, Node));
	JB_Tree_Remove(Node);
	return false;
}

bool SC_Func__Tran_DebugAt(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* Ch = ((Message*)JB_Ring_First(Node));
	JB_Incr(Ch);
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Node, (&_usingf0));
		JB_Msg_BecomeStr(Node, kJB_SyxFunc, JB_LUB[0]);
		JB_FreeIfDead(JB_Msg_Msg(Node, kJB_SyxThg, JB_LUB[1279]));
		Message* _tmPf1 = JB_Msg_Msg(Node, kJB_SyxPrm, JB_LUB[0]);
		JB_Incr(_tmPf1);
		JB_Tree_SyntaxAppend(_tmPf1, Ch);
		JB_Decr(_tmPf1);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Ch);
	JB_FreeIfDead(SC_TypeOfExpr(Node, Name_space, nil));
	return false;
}

bool SC_Func__Tran_Debugger(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (!SC__Options_TargetDebug) {
		JB_Tree_Remove(Node);
		return false;
	}
	Message* Ch = ((Message*)JB_Ring_First(Node));
	JB_Incr(Ch);
	if (!Ch) {
		JB_SetRef(Node->Name, JB_LUB[1274]);
		(SC_Msg_ASMTypeSet(Node, kSC__ASMType_kDebugger));
		JB_Decr(Ch);
		return false;
	}
	if (!(((JB_Msg_SyntaxEquals(Node, JB_LUB[1274], false))) and ((!JB_FreeIfDead(((Message*)JB_Ring_NextSib(Ch))))))) {
		JB_Msg_Fail(Node, nil);
		JB_Decr(Ch);
		return nil;
	}
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Node, (&_usingf0));
		JB_FreeIfDead(SC_Msg_ExpandToBool(Ch, Name_space));
		Message* _tmPf1 = ((Message*)JB_Ring_First(Node));
		JB_Incr(_tmPf1);
		JB_FreeIfDead(SC_Msg_Negate(_tmPf1));
		JB_Decr(_tmPf1);
		JB_SetRef(Node->Name, JB_LUB[175]);
		Message* _tmPf2 = JB_Msg_Msg(Node, kJB_SyxArg, JB_LUB[0]);
		JB_Incr(_tmPf2);
		Message* Dbg = JB_Msg_Msg(_tmPf2, kJB_SyxTmp, JB_LUB[1274]);
		JB_Incr(Dbg);
		JB_Decr(_tmPf2);
		(SC_Msg_ASMTypeSet(Dbg, kSC__ASMType_kDebugger));
		JB_Decr(Dbg);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Ch);
	SC_Func__Tran_If(Fn, Node, Name_space);
	return false;
}

bool SC_Func__Tran_Deprecate(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	(JB_Msg_SyntaxProblem(Node, JB_LUB[1342]));
	return SC_Func__Tran_Problem(Fn, Node, Name_space);
}

bool SC_Func__Tran_Description(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if ((!Fn)) {
		JB_Msg_Fail(Node, JB_LUB[901]);
		return nil;
	}
	Message* Str = JB_Msg_NeedSyx(Node, kJB_SyxStr);
	JB_Incr(Str);
	if (Str) {
		if (!SC_Func_SyntaxIs(Fn, kSC__FunctionType_Disabled)) {
			if (((JB_String*)JB_Str_Exists(Fn->Description))) {
				JB_Msg_Fail(Node, JB_LUB[1035]);
			}
			JB_SetRef(Fn->Description, Str->Name);
		}
		JB_Tree_Remove(Node);
	}
	JB_Decr(Str);
	return false;
}

bool SC_Func__Tran_Else(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* P = ((Message*)JB_Ring_Parent(Node));
	if (!((JB_Msg_EqualsSyx(P, kJB_SyxTmp, false)) and ((JB_Msg_SyntaxEquals(P, JB_LUB[175], false)) or (JB_Msg_SyntaxEquals(P, JB_LUB[445], false))))) {
		JB_Msg_Fail(Node, JB_LUB[900]);
		return nil;
	}
	return false;
}

bool SC_Func__Tran_Expect(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* Ch = JB_Msg_NeedFirst(Node);
	JB_Incr(Ch);
	if (!Ch) {
		JB_Decr(Ch);
		return nil;
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Node, (&_usingf0));
	Message* Ch1 = ((Message*)JB_Ring_NextSib(Ch));
	JB_Incr(Ch1);
	JB_String* N = Node->Name;
	JB_Incr(N);
	JB_SetRef(Node->Name, JB_LUB[175]);
	if (JB_Str_Equals(N, JB_LUB[248], false)) {
		JB_SetRef(N, JB_LUB[249]);
		JB_Msg_ExpectLast(Ch, JB_LUB[0]);
	}
	bool NewStyle = ((JB_Str_Equals(N, JB_LUB[249], false)) or (JB_Str_Equals(N, JB_LUB[247], false)));
	if (NewStyle and (!Ch1)) {
		JB_SetRef(Ch1, Ch);
		JB_SetRef(Ch, JB_Syx_OperatorPlus(kJB_SyxThg, JB_LUB[32]));
		(JB_Ring_PrevSibSet(Ch1, Ch));
	}
	if (Name_space) {
		JB_FreeIfDead(SC_TypeOfExpr(Ch, Name_space, nil));
	}
	JB_SetRef(Ch, SC_Msg_Negate(Ch));
	Message* Arg = JB_Msg_Msg(Node, kJB_SyxArg, JB_LUB[0]);
	JB_Incr(Arg);
	if (((JB_Str_Equals(N, JB_LUB[244], false))) or (NewStyle)) {
		Message* _tmPf1 = SC_Msg_ExpectParamsTransform(Ch1, Node->Position, Ch, N);
		JB_Incr(_tmPf1);
		JB_Tree_SyntaxAppend(Arg, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else if ((JB_Str_Equals(N, JB_LUB[246], false))) {
		JB_Msg_AppendSyx(Arg, kJB_SyxTmp, JB_LUB[1274]);
	}
	JB_Decr(Ch);
	JB_Decr(Ch1);
	if ((!NewStyle)) {
		if (JB_Str_Equals(N, JB_LUB[250], false)) {
			JB_Msg_AppendSyx(Arg, kJB_SyxTmp, JB_LUB[473]);
		}
		 else {
			Message* _tmPf2 = JB_Msg_Msg(Arg, kJB_SyxTmp, JB_LUB[239]);
			JB_Incr(_tmPf2);
			JB_Msg_AppendSyx(_tmPf2, kJB_SyxQues, JB_LUB[36]);
			JB_Decr(_tmPf2);
		}
	}
	JB_Decr(N);
	JB_Decr(Arg);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
	JB_MsgPos_Destructor((&_usingf0));
	return false;
}

bool SC_Func__Tran_Fails(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if ((!Fn)) {
		JB_Msg_Fail(Node, JB_LUB[901]);
		return nil;
	}
	(SC_Msg_ASMTypeSet(Node, kSC__ASMType_kFail));
	Fn->Badness = (Fn->Badness | 128);
	if ((JB_Tree_IsLast(Node))) {
		JB_Msg_Fail(Node, JB_LUB[902]);
		return nil;
	}
	return false;
}

bool SC_Func__Tran_For(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	JB_Incr(Name_space);
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Node, (&_usingf0));
		JB_SetRef(Name_space, SC_Msg_SCArg(Node, Name_space, nil));
		(++SC__Func_InBranch);
		SC_Func__Tran_ForSub(Fn, Node, Name_space);
		(--SC__Func_InBranch);
		SC_Func__Tran_All_Final(Fn, Node, Name_space, kJB_SyxArg);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Name_space);
	return true;
}

void SC_Func__Tran_ForStart(Message* Arg, Message* Index, SCNode* P) {
	Message* Start = SC_Msg_GetMarker(Arg, JB_LUB[1201]);
	JB_Incr(Start);
	if (!Start) {
		JB_Decr(Start);
		return;
	}
	if ((!Index)) {
		JB_Msg_Fail(Arg, JB_LUB[1202]);
		JB_Decr(Start);
		return;
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Arg, (&_usingf0));
	JB_String* CondName = SC_UniqueTmpVar(P, JB_LUB[1203]);
	JB_Incr(CondName);
	Message* _tmPf3 = ((Message*)JB_Ring_Parent(Arg));
	JB_Incr(_tmPf3);
	Message* _tmPf5 = JB_Msg_Copy(Index, Arg);
	JB_Incr(_tmPf5);
	Message* _tmPf4 = SC_MakeDecl(JB_LUB[0], CondName, _tmPf5, 0);
	JB_Incr(_tmPf4);
	JB_Decr(_tmPf5);
	(JB_Ring_PrevSibSet(_tmPf3, _tmPf4));
	JB_Decr(_tmPf3);
	JB_Decr(_tmPf4);
	Message* IfTest = (JB_Syx_Msg(kJB_SyxTmp, JB_LUB[175]));
	JB_Incr(IfTest);
	Message* _tmPf6 = ({
		Message* __imPf1 = (JB_Syx_Msg(kJB_SyxBra, JB_LUB[0]));
		JB_Incr(__imPf1);
		Message* _tmPf7 = ({
			Message* __imPf2 = (JB_Syx_Msg(kJB_SyxRel, JB_LUB[0]));
			JB_Incr(__imPf2);
			Message* _tmPf8 = JB_Syx_Msg(kJB_SyxThg, CondName);
			JB_Incr(_tmPf8);
			JB_Tree_SyntaxAppend(__imPf2, (_tmPf8));
			JB_Decr(_tmPf8);
			Message* _tmPf9 = JB_Syx_Msg(kJB_SyxOpp, JB_LUB[1204]);
			JB_Incr(_tmPf9);
			JB_Tree_SyntaxAppend(__imPf2, (_tmPf9));
			JB_Decr(_tmPf9);
			Message* _tmPf10 = JB_Msg_Copy(Index, Arg);
			JB_Incr(_tmPf10);
			JB_Tree_SyntaxAppend(__imPf2, _tmPf10);
			JB_Decr(_tmPf10);
			JB_SafeDecr(__imPf2);
			 __imPf2;
		});
		JB_Incr(_tmPf7);
		JB_Tree_SyntaxAppend(__imPf1, _tmPf7);
		JB_Decr(_tmPf7);
		JB_SafeDecr(__imPf1);
		 __imPf1;
	});
	JB_Incr(_tmPf6);
	JB_Decr(CondName);
	JB_Tree_SyntaxAppend(IfTest, _tmPf6);
	JB_Decr(_tmPf6);
	Message* _tmPf11 = JB_Syx_Msg(kJB_SyxArg, JB_LUB[0]);
	JB_Incr(_tmPf11);
	JB_Tree_SyntaxAppend(IfTest, (_tmPf11));
	JB_Decr(_tmPf11);
	(JB_Ring_FirstSet(Arg, IfTest));
	Message* _tmPf12 = ((Message*)JB_Ring_NextSib(IfTest));
	JB_Incr(_tmPf12);
	Message* _tmPf13 = ((Message*)JB_Ring_Last(IfTest));
	JB_Incr(_tmPf13);
	JB_Decr(IfTest);
	SC_Msg_Move(_tmPf12, Start, _tmPf13);
	JB_Decr(_tmPf12);
	JB_Decr(_tmPf13);
	SC_Msg_MakeComment(Start);
	JB_Decr(Start);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Arg);
	JB_MsgPos_Destructor((&_usingf0));
}

bool SC_Func__Tran_ForSub(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	bool Rz = false;
	Message* List = JB_Msg_NeedFirst(Node);
	JB_Incr(List);
	if (!List) {
		JB_Decr(List);
		return nil;
	}
	int Bad = 0;
	Message* Index = ((Message*)JB_Ring_NextSib(List));
	JB_Incr(Index);
	Message* Arg = nil;
	JB_Incr(Arg);
	if (JB_Msg_EqualsSyx(Index, kJB_SyxArg, false)) {
		JB_SetRef(Arg, Index);
		JB_SetRef(Index, nil);
	}
	 else {
		if (Index) {
			JB_SetRef(Arg, ((Message*)JB_Ring_NextSib(Index)));
		}
		if (Arg) {
			Bad = (Bad + (!JB_Msg_Expect(Arg, kJB_SyxArg, nil)));
		}
		 else {
			JB_SetRef(Arg, JB_Msg_Msg(Node, kJB_SyxArg, JB_LUB[0]));
		}
	}
	Message* Value = nil;
	JB_Incr(Value);
	JB_String* IterName = JB_LUB[0];
	JB_Incr(IterName);
	JB_SetRef(List, SC_Msg_UnBra(List));
	Message* Scnd = ((Message*)JB_Tree_Second(List));
	JB_Incr(Scnd);
	if ((JB_Msg_EqualsSyx(List, kJB_SyxRel, false)) and SC_Msg_OperatorIsOpp(Scnd, JB_LUB[2057])) {
		JB_SetRef(Value, ((Message*)JB_Ring_First(List)));
		JB_SetRef(List, JB_Msg_NextOf(Scnd, kJB_SyxNil));
		Bad = (Bad + (!List));
		if (JB_Msg_EqualsSyx(Value, kJB_SyxDot, false)) {
			JB_SetRef(IterName, Value->Name);
			JB_SetRef(Value, JB_Msg_NeedSyx(Value, kJB_SyxThg));
			Bad = (Bad + (!Value));
		}
	}
	JB_Decr(Scnd);
	SCIterator* Iter = nil;
	JB_Incr(Iter);
	SCDecl* Dcl = nil;
	JB_Incr(Dcl);
	if (!Bad) {
		JB_SetRef(Dcl, SC_TypeOfExpr(List, Name_space, nil));
		if (!Dcl) {
			JB_Msg_Fail(List, JB_LUB[2058]);
		}
		JB_SetRef(List, SC_Msg_UnBra(List));
	}
	if (Dcl) {
		JB_SetRef(Iter, SC_Decl_GetIteratorAny(Dcl, IterName, Node));
		if (Iter) {
			SC_Iter_Renuqify(Iter, Name_space);
			Message* _tmPf6 = ((Message*)JB_Ring_Parent(Iter->Yield));
			JB_Incr(_tmPf6);
			Bad = (Bad + (!JB_Msg_Expect(_tmPf6, kJB_SyxArg, nil)));
			JB_Decr(_tmPf6);
			if (Index == Arg) {
				JB_SetRef(Index, nil);
			}
			 else if (Index) {
				Bad = (Bad + (!JB_FreeIfDead(JB_Msg_NeedSyx(Index, kJB_SyxThg))));
			}
		}
	}
	JB_Decr(IterName);
	if (!(Dcl and ((!Bad) and (Iter and List)))) {
		JB_Decr(Dcl);
		JB_Decr(Iter);
		JB_Decr(Value);
		JB_Decr(Arg);
		JB_Decr(Index);
		JB_Decr(List);
		return nil;
	}
	JB_Msg_BecomeStr(Node, kJB_SyxArg, JB_LUB[0]);
	if (Index) {
		JB_Tree_Remove(Index);
		JB_SetRef(Index, ((Message*)JB_Ring_First(Index)));
	}
	Message* _tmPf7 = ((Message*)JB_Ring_First(Node));
	JB_Incr(_tmPf7);
	JB_Tree_Remove(_tmPf7);
	JB_Decr(_tmPf7);
	bool CanKeepSource = SC_Func__CanKeepAsSource(List, Arg, Dcl);
	int CanKeepValue = ((int)SC_Func__CanKeepAsValue(Iter, Arg, Dcl, Value));
	Message* ListName = List;
	JB_Incr(ListName);
	if (!CanKeepSource) {
		if (SC_Decl_SyntaxIs(Dcl, kSC__SCDeclInfo_ReturnedStruct)) {
			Message* List_msg = SC_Msg_PrmFuncStructMsg(List);
			JB_Incr(List_msg);
			if (List_msg) {
				JB_SetRef(ListName, ((Message*)JB_Ring_First(List_msg)));
			}
			JB_Decr(List_msg);
		}
		 else {
			JB_String* _tmPf8 = SC_UniqueTmpVar(Name_space, JB_LUB[2059]);
			JB_Incr(_tmPf8);
			JB_SetRef(ListName, (JB_Syx_Msg(kJB_SyxThg, _tmPf8)));
			JB_Decr(_tmPf8);
			JB_FreeIfDead(SC_MakeDeclOrRel(Node, ListName, List));
		}
	}
	 else if (SC_Decl_IsCArray(Dcl)) {
		JB_SetRef(ListName, (JB_Syx_Msg(kJB_SyxQues, JB_LUB[25])));
	}
	SC_Iter_RenameSelf(Iter, ListName);
	JB_Decr(ListName);
	if (CanKeepValue) {
		SC_Iter_RenameValue(Iter, Value);
	}
	 else {
		JB_String* _tmPf10 = SC_UniqueTmpVar(Name_space, JB_LUB[472]);
		JB_Incr(_tmPf10);
		Message* _tmPf9 = JB_Syx_OperatorPlus(kJB_SyxThg, _tmPf10);
		JB_Incr(_tmPf9);
		JB_Decr(_tmPf10);
		SC_Iter_RenameValue(Iter, _tmPf9);
		JB_Decr(_tmPf9);
	}
	Message* _tmPf11 = ((Message*)JB_Ring_NextSib(Arg));
	JB_Incr(_tmPf11);
	Message* PostCond = SC_Func__AlterPostCond(_tmPf11, Iter->LoopEndCond, Node);
	JB_Incr(PostCond);
	JB_Decr(_tmPf11);
	Message* Node2 = SC_Iter_MakeWhile(Iter, Arg, PostCond);
	JB_Incr(Node2);
	JB_Decr(PostCond);
	if (!Node2) {
		JB_Decr(Node2);
		JB_Decr(Dcl);
		JB_Decr(Iter);
		JB_Decr(Value);
		JB_Decr(Arg);
		JB_Decr(Index);
		JB_Decr(List);
		return nil;
	}
	JB_Tree_SyntaxAppend(Node, Node2);
	Message* Iterwhile = Iter->WhileLoop;
	JB_Incr(Iterwhile);
	SC_Msg_CopyAllBefore(Iterwhile, Node2, Node);
	SC_Msg_CopyAllAfter(Iterwhile, Node2, Node);
	JB_Decr(Iterwhile);
	SC_Func__Tran_ForStart(Arg, Iter->Index, Name_space);
	Message* FirstInLoop = ((Message*)JB_Ring_First(Arg));
	JB_Incr(FirstInLoop);
	if ((!FirstInLoop)) {
		JB_SetRef(FirstInLoop, (JB_Syx_Msg(kJB_SyxSheb, JB_LUB[2060])));
		JB_Tree_SyntaxAppend(Arg, FirstInLoop);
	}
	Message* EndLoopMarker = SC_Msg_NeedMarker(Arg, JB_LUB[2029], true);
	JB_Incr(EndLoopMarker);
	SC_Msg_CopyAllAfter(Iter->Yield, EndLoopMarker, Node);
	SC_Msg_CopyAllBeforeInto(Iter->Yield, Arg, Node);
	if (SC_Decl_IsCArray(Dcl)) {
		{
			Message* C = Node;
			JB_Incr(C);
			Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Node));
			JB_Incr(_afterf1);
			while ((C) and (C != _afterf1)) {
				Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(C));
				JB_Incr(_N_f2);
				if ((JB_Msg_EqualsSyx(C, kJB_SyxQues, false)) and (JB_Msg_SyntaxEquals(C, JB_LUB[25], false))) {
					Message* _tmPf12 = JB_Msg_Copy(List, nil);
					JB_Incr(_tmPf12);
					JB_FreeIfDead(SC_Msg_ReplaceWith(C, _tmPf12));
					JB_Decr(_tmPf12);
				}
				JB_SetRef(C, _N_f2);
				JB_Decr(_N_f2);
			};
			JB_Decr(C);
			JB_Decr(_afterf1);
			;
		};
	}
	{
		Message* Msg = Arg;
		JB_Incr(Msg);
		Message* _afterf4 = ((Message*)JB_Ring_FlatAfter(Arg));
		JB_Incr(_afterf4);
		while ((Msg) and (Msg != _afterf4)) {
			Message* _N_f5 = ((Message*)JB_Ring_FlatNext0(Msg));
			JB_Incr(_N_f5);
			if ((JB_Msg_EqualsSyx(Msg, kJB_SyxTmp, false))) {
				if ((JB_Msg_SyntaxEquals(Msg, JB_LUB[252], false)) or (JB_Msg_SyntaxEquals(Msg, JB_LUB[176], false))) {
					JB_SetRef(Msg, ((Message*)JB_Ring_FlatAfter(Msg)));
					JB_Decr(_N_f5);
					continue;
				}
				 else if ((JB_Msg_SyntaxEquals(Msg, JB_LUB[474], false))) {
					SC_Msg_ExpectEmpty(Msg);
					SC_Msg_CopyAllAfterBefore(Iter->Yield, Msg, Node);
				}
				 else if ((JB_Msg_SyntaxEquals(Msg, JB_LUB[2061], false))) {
					JB_SetRef(Msg->Name, JB_LUB[474]);
					SC_Msg_Next_Index(Msg, Iter, Node2);
					JB_SetRef(Msg, ((Message*)JB_Ring_FlatAfter(Msg)));
					JB_Decr(_N_f5);
					continue;
				}
			}
			 else if ((JB_Msg_EqualsSyx(Msg, kJB_SyxThg, false))) {
				if ((CanKeepValue == 1) and (JB_Msg_SyntaxEquals(Msg, Value->Name, false))) {
					JB_FreeIfDead(SC_Msg_ReplaceWith(Msg, Value));
					CanKeepValue = 2;
				}
			}
			 else if ((JB_Msg_EqualsSyx(Msg, kJB_SyxType, false))) {
				Message* Ty = ((Message*)JB_Ring_Last(Msg));
				JB_Incr(Ty);
				if ((JB_Msg_SyntaxEquals(Ty, JB_LUB[26], false))) {
					if (Dcl->Contains) {
						JB_Msg_BecomeStr(Msg, kJB_SyxBra, JB_LUB[0]);
						JB_SetRef(Msg->Obj, Dcl->Contains);
						JB_Tree_Remove(Ty);
					}
					 else {
						Message* _tmPf13 = ((Message*)JB_Ring_First(Msg));
						JB_Incr(_tmPf13);
						JB_FreeIfDead(SC_Msg_ReplaceWith(Msg, _tmPf13));
						JB_Decr(_tmPf13);
					}
				}
				JB_Decr(Ty);
			}
			JB_SetRef(Msg, _N_f5);
			JB_Decr(_N_f5);
		};
		JB_Decr(Msg);
		JB_Decr(_afterf4);
		;
		JB_Decr(List);
	}
	;
	JB_Decr(Dcl);
	SCArg* P2 = SC_Msg_SCArgNested(Arg, Node, Name_space);
	JB_Incr(P2);
	if (!P2) {
		JB_Tree_Remove(EndLoopMarker);
		if (true) {
			JB_Msg_Fail(Arg, JB_LUB[2062]);
		}
	}
	 else {
		if (Index) {
			Message* It_ind = Iter->Index;
			JB_Incr(It_ind);
			if (It_ind) {
				Message* _tmPf15 = JB_Msg_Copy(It_ind, Index);
				JB_Incr(_tmPf15);
				Message* _tmPf14 = SC_MakeDeclOrRel(Arg, Index, _tmPf15);
				JB_Incr(_tmPf14);
				JB_Decr(_tmPf15);
				(JB_Ring_PrevSibSet(FirstInLoop, _tmPf14));
				JB_Decr(_tmPf14);
			}
			 else {
				if (true) {
					JB_Msg_Fail(Index, JB_LUB[2063]);
				}
			}
			JB_Decr(It_ind);
		}
		if (Value and (!CanKeepValue)) {
			Message* _tmPf17 = JB_Msg_Copy(Iter->Value, Value);
			JB_Incr(_tmPf17);
			Message* _tmPf16 = SC_MakeDeclOrRel(Arg, Value, _tmPf17);
			JB_Incr(_tmPf16);
			JB_Decr(_tmPf17);
			(JB_Ring_PrevSibSet(FirstInLoop, _tmPf16));
			JB_Decr(_tmPf16);
		}
		SC_CollectDeclsFuncBodyJustWhatWeNewlyMade(Node, Name_space);
		JB_Tree_Remove(EndLoopMarker);
		Rz = SC_Func__Tran_WhileSub(Fn, Node2, P2);
	}
	JB_Decr(Index);
	JB_Decr(Arg);
	JB_Decr(Value);
	JB_Decr(Iter);
	JB_Decr(Node2);
	JB_Decr(FirstInLoop);
	JB_Decr(EndLoopMarker);
	JB_Decr(P2);
	return Rz;
}

bool SC_Func__Tran_FuncTable(Message* Msg) {
	Message* nameMsg = JB_Msg_NeedSyx(Msg, kJB_SyxThg);
	JB_Incr(nameMsg);
	if (!nameMsg) {
		JB_Decr(nameMsg);
		return nil;
	}
	Message* protoMsg = ((Message*)JB_Ring_NextSib(nameMsg));
	JB_Incr(protoMsg);
	if (!protoMsg) {
		JB_Decr(protoMsg);
		JB_Decr(nameMsg);
		return nil;
	}
	if (!((JB_Msg_EqualsSyx(protoMsg, kJB_SyxBra, false)) or ((JB_Msg_EqualsSyx(protoMsg, kJB_SyxPrm, false)) or (JB_Msg_EqualsSyx(protoMsg, kJB_SyxList, false))))) {
		JB_Msg_Fail(protoMsg, nil);
		JB_Decr(protoMsg);
		JB_Decr(nameMsg);
		return nil;
	}
	Message* Items = JB_Msg_NextOf(protoMsg, kJB_SyxArg);
	JB_Incr(Items);
	if (!Items) {
		JB_Decr(Items);
		JB_Decr(protoMsg);
		JB_Decr(nameMsg);
		return nil;
	}
	Message* ProtoFirst = ((Message*)JB_Ring_First(protoMsg));
	JB_Incr(ProtoFirst);
	JB_String* Name = nameMsg->Name;
	JB_Incr(Name);
	JB_Decr(nameMsg);
	JB_String* protoName = ProtoFirst->Name;
	JB_Incr(protoName);
	if ((!JB_Msg_EqualsSyx(ProtoFirst, kJB_SyxThg, false))) {
		//using;
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Msg, (&_usingf0));
		Message* _tmPf6 = JB_Syx_Msg(kJB_SyxThg, protoName);
		JB_Incr(_tmPf6);
		JB_FreeIfDead(SC_Msg_ReplaceWith(protoMsg, (_tmPf6)));
		JB_Decr(_tmPf6);
		JB_SetRef(protoName, JB_Str_OperatorPlus(JB_LUB[1036], Name));
		protoMsg->Func = kJB_SyxPrm;
		Message* protoMsg2 = (JB_Syx_Msg(kJB_SyxTmp, JB_LUB[1037]));
		JB_Incr(protoMsg2);
		Message* _tmPf7 = JB_Syx_Msg(kJB_SyxThg, protoName);
		JB_Incr(_tmPf7);
		JB_Tree_SyntaxAppend(protoMsg2, (_tmPf7));
		JB_Decr(_tmPf7);
		JB_Tree_SyntaxAppend(protoMsg2, protoMsg);
		(JB_Ring_NextSibSet(Msg, protoMsg2));
		JB_Decr(protoMsg2);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Msg);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(protoMsg);
	JB_Decr(ProtoFirst);
	JB_SetRef(Items->Name, JB_LUB[1038]);
	Items->Func = kJB_SyxArr;
	JB_Tree_Clear(Msg);
	Msg->Func = kJB_SyxDecl;
	Message* _tmPf8 = JB_Syx_Msg(kJB_SyxEmb, JB_LUB[0]);
	JB_Incr(_tmPf8);
	JB_Tree_SyntaxAppend(Msg, (_tmPf8));
	JB_Decr(_tmPf8);
	Message* _tmPf10 = JB_Syx_Msg(kJB_SyxThg, Name);
	JB_Incr(_tmPf10);
	Message* _tmPf9 = SC_NewEqRelWithMsgMsg((_tmPf10), Items);
	JB_Incr(_tmPf9);
	JB_Decr(_tmPf10);
	JB_Tree_SyntaxAppend(Msg, _tmPf9);
	{
		Message* _Valuef4 = ((Message*)JB_Ring_First(Items));
		JB_Incr(_Valuef4);
		while (_Valuef4) {
			Message* _Nf3 = ((Message*)JB_Ring_NextSib(_Valuef4));
			JB_Incr(_Nf3);
			Message* I = _Valuef4;
			JB_Incr(I);
			Message* Item_value = ((Message*)JB_Ring_Last(I));
			JB_Incr(Item_value);
			Message* Item_name = ((Message*)JB_Ring_First(I));
			JB_Incr(Item_name);
			Message* Table_name = Item_name;
			JB_Incr(Table_name);
			Message* Sigh = Item_name;
			JB_Incr(Sigh);
			bool ListOK = ((JB_Msg_EqualsSyx(Item_name, kJB_SyxPrm, false))) and ((JB_Msg_EqualsSyx(I, kJB_SyxItem, false)));
			if (ListOK) {
				JB_String* _tmPf11 = JB_Msg_FirstName(Item_name);
				JB_Incr(_tmPf11);
				JB_Msg_BecomeStr(I, kJB_SyxTmp, _tmPf11);
				JB_Decr(_tmPf11);
			}
			if ((JB_Msg_EqualsSyx(I, kJB_SyxTmp, false))) {
				if (JB_Msg_EqualsSyx(Table_name, kJB_SyxPrm, false)) {
					if ((!ListOK)) {
						JB_Msg_Fail(I, JB_LUB[1039]);
					}
					JB_SetRef(Table_name, ((Message*)JB_Ring_First(Table_name)));
					JB_Tree_Remove(Sigh);
				}
				 else {
					JB_SetRef(Table_name, I);
				}
				JB_SetRef(Item_name, I);
				if ((!Item_value)) {
					JB_Msg_Fail(I, JB_LUB[1040]);
				}
			}
			 else {
				JB_Msg_Expect(I, kJB_SyxItem, nil);
				if (Item_value == Item_name) {
					JB_Msg_Expect(I, kJB_SyxNil, nil);
				}
			}
			Message* ARel = nil;
			JB_Incr(ARel);
			JB_String* NewName = JB_LUB[0];
			JB_Incr(NewName);
			if (SC_Msg_OperatorIsBRel(Item_value, JB_LUB[48])) {
				JB_SetRef(ARel, Item_value);
				JB_SetRef(Item_value, ((Message*)JB_Ring_First(Item_value)));
			}
			while (Item_value) {
				//using;
				MessagePosition _usingf1 = ((MessagePosition){});
				JB_Msg_SyntaxUsing(Item_value, (&_usingf1));
				if ((JB_Msg_EqualsSyx(Item_value, kJB_SyxThg, false)) or ((JB_Msg_EqualsSyx(Item_value, kJB_SyxDot, false)) or (JB_Msg_EqualsSyx(Item_value, kJB_SyxBra, false)))) {
					if (!ARel) {
						JB_SetRef(ARel, (JB_Syx_Msg(kJB_SyxBRel, JB_LUB[48])));
					}
					 else {
						JB_SetRef(ARel, JB_Msg_Copy(ARel, nil));
					}
					Message* _tmPf12 = SC_Msg_UnBra(Item_value);
					JB_Incr(_tmPf12);
					JB_SetRef(Item_value, ((Message*)JB_Tree_WrapWith(_tmPf12, ARel)));
					JB_Decr(_tmPf12);
				}
				 else {
					if ((JB_Msg_EqualsSyx(Item_value, kJB_SyxEmb, false))) {
						JB_Msg_Fail(Item_value, JB_LUB[1041]);
					}
					if ((!JB_Msg_EqualsSyx(Item_value, kJB_SyxArg, false))) {
						Message* _tmPf13 = JB_Syx_Msg(kJB_SyxArg, JB_LUB[0]);
						JB_Incr(_tmPf13);
						JB_SetRef(Item_value, ((Message*)JB_Tree_WrapWith(Item_value, _tmPf13)));
						JB_Decr(_tmPf13);
					}
					if (!Item_name) {
						JB_Msg_Fail(I, JB_LUB[1042]);
					}
					if (Item_name) {
						if (!JB_Str_Exists(NewName)) {
							JB_String* _tmPf15 = SC_Msg_CollectFuncTableName(Item_name);
							JB_Incr(_tmPf15);
							JB_String* _tmPf14 = JB_Str_OperatorPlus(JB_LUB[162], _tmPf15);
							JB_Incr(_tmPf14);
							JB_Decr(_tmPf15);
							JB_SetRef(NewName, JB_Str_OperatorPlus(Name, _tmPf14));
							JB_Decr(_tmPf14);
							Message* _tmPf16 = SC_Msg_CollectionPlace(Msg);
							JB_Incr(_tmPf16);
							Message* _tmPf18 = JB_Syx_Msg(kJB_SyxThg, protoName);
							JB_Incr(_tmPf18);
							Message* _tmPf17 = SC_Func__ArgToFunc(NewName, (_tmPf18), Item_value);
							JB_Incr(_tmPf17);
							JB_Decr(_tmPf18);
							JB_Tree_SyntaxAppend(_tmPf16, _tmPf17);
							JB_Decr(_tmPf16);
							JB_Decr(_tmPf17);
						}
						Message* _tmPf19 = ({
							Message* __imPf5 = (JB_Syx_Msg(kJB_SyxBRel, JB_LUB[48]));
							JB_Incr(__imPf5);
							Message* _tmPf20 = JB_Syx_Msg(kJB_SyxThg, NewName);
							JB_Incr(_tmPf20);
							JB_Tree_SyntaxAppend(__imPf5, (_tmPf20));
							JB_Decr(_tmPf20);
							JB_SafeDecr(__imPf5);
							 __imPf5;
						});
						JB_Incr(_tmPf19);
						JB_Tree_SyntaxAppend(I, _tmPf19);
						JB_Decr(_tmPf19);
					}
				}
				JB_String* Iname = I->Name;
				JB_Incr(Iname);
				if (((JB_Msg_EqualsSyx(I, kJB_SyxTmp, false))) and Table_name) {
					Message* _tmPf21 = JB_Syx_Msg(kJB_SyxStr, Table_name->Name);
					JB_Incr(_tmPf21);
					(JB_Ring_FirstSet(I, (_tmPf21)));
					JB_Decr(_tmPf21);
					JB_Msg_BecomeStr(I, kJB_SyxItem, JB_LUB[0]);
				}
				if (((!JB_Msg_EqualsSyx(Sigh, kJB_SyxPrm, false))) or JB_Tree_IsLast(Table_name)) {
					JB_Decr(Iname);
					JB_MsgPos_Destructor((&_usingf1));
					break;
				}
				Message* Newi = (JB_Syx_Msg(kJB_SyxTmp, Iname));
				JB_Incr(Newi);
				JB_Decr(Iname);
				(JB_Ring_PrevSibSet(I, Newi));
				JB_SetRef(I, Newi);
				JB_Decr(Newi);
				JB_MsgPos_SyntaxUsingComplete((&_usingf1), Item_value);
				JB_MsgPos_Destructor((&_usingf1));
			};
			JB_Decr(I);
			JB_Decr(Item_value);
			JB_Decr(Item_name);
			JB_Decr(Table_name);
			JB_Decr(ARel);
			JB_Decr(NewName);
			;
			JB_Decr(Sigh);
			JB_SetRef(_Valuef4, _Nf3);
			JB_Decr(_Nf3);
		};
		JB_Decr(_Valuef4);
		;
		JB_Decr(_tmPf9);
	}
	;
	JB_Decr(Items);
	JB_Decr(Name);
	JB_Decr(protoName);
	return false;
}

bool SC_Func__Tran_If(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	(SC_Msg_ASMTypeSet(Node, kSC__ASMType_kIf));
	(++SC__Func_InBranch);
	SC_Func__Tran_IfSub(Node, Name_space);
	SC_Func__Tran_All_Final(Fn, Node, Name_space, kJB_SyxArg);
	(--SC__Func_InBranch);
	return true;
}

bool SC_Func__Tran_Ifn(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* F = JB_Msg_NeedFirst(Node);
	JB_Incr(F);
	if (F) {
		JB_SetRef(Node->Name, JB_LUB[175]);
		JB_FreeIfDead(SC_Msg_Negate(F));
		SC_Func__Tran_If(Fn, Node, Name_space);
	}
	JB_Decr(F);
	return false;
}

void SC_Func__Tran_IfSub(Message* Node, SCNode* Name_space) {
	Message* Cond = JB_Msg_NeedFirst(Node);
	if (!Cond) {
		return;
	}
	Message* Arg = ((Message*)JB_Ring_NextSib(Cond));
	if (Arg) {
		if (!JB_Msg_Expect(Arg, kJB_SyxArg, nil)) {
			return;
		}
	}
	 else {
		Arg = JB_Syx_Msg(kJB_SyxArg, JB_LUB[0]);
		if (JB_Msg_SyntaxEquals(Node, JB_LUB[175], false)) {
			JB_Msg_AppendSyx(Arg, kJB_SyxTmp, JB_LUB[1274]);
		}
		(JB_Ring_NextSibSet(Cond, Arg));
	}
	Message* SubTest = ((Message*)JB_Ring_NextSib(Arg));
	if (SubTest) {
		if (!(SC_Msg_OperatorIsTmp(SubTest, JB_LUB[445]) or SC_Msg_OperatorIsTmp(SubTest, JB_LUB[446]))) {
			JB_Msg_Fail(SubTest, nil);
			return;
		}
		JB_Msg_ExpectLast(SubTest, JB_LUB[0]);
		if (JB_Msg_SyntaxEquals(SubTest, JB_LUB[445], false)) {
			(SC_Msg_ASMTypeSet(SubTest, kSC__ASMType_kIf));
			SC_Func__Tran_IfSub(SubTest, Name_space);
		}
		 else {
			Message* ElseArg = ((Message*)JB_Ring_First(SubTest));
			if (ElseArg) {
				if (!(!JB_Msg_SyntaxEquals(ElseArg, JB_LUB[175], true))) {
					JB_Msg_Fail(ElseArg, JB_LUB[2042]);
				}
				JB_Msg_Expect(ElseArg, kJB_SyxArg, nil);
			}
			 else {
				JB_FreeIfDead(JB_Msg_Msg(SubTest, kJB_SyxArg, JB_LUB[0]));
			}
		}
	}
	Name_space = SC_Msg_SCArg(Arg, Name_space, nil);
	if (!Name_space) {
		return;
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Node, (&_usingf0));
	Cond = SC_Msg_ExpandToBool(Cond, Name_space);
	if (!Cond) {
		0;
	}
	 else if (SC_Msg_IsAlwaysFalse(Cond)) {
		SC_Msg_ElseNeverFires(Cond);
	}
	 else {
		if (JB_Msg_EqualsSyx(((Message*)JB_Ring_First(Cond)), kJB_SyxArg, false)) {
			JB_SetRef(SC_Msg_WrapWith(Cond, kJB_SyxBra, JB_LUB[0])->Obj, Cond->Obj);
		}
		SC_Func__Tran_Isa(Node, Name_space);
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__Tran_Isa(Message* S, SCNode* P) {
	if ((SC__IsaTester_T.InUse)) {
		JB_Msg_Fail(S, JB_LUB[2030]);
		return;
	}
	SC__IsaTester_T.InUse = true;
	Message* _tmPf1 = ((Message*)JB_Ring_First(S));
	JB_Incr(_tmPf1);
	if (SC_Comp__CollectIsaTests(_tmPf1)) {
		int N = SC__IsaTester_T.Count;
		{
			int I = 0;
			while (I < N) {
				Message* Isa_ = SC__IsaTester_T.Items[I];
				JB_Incr(Isa_);
				Message* _tmPf2 = JB_Msg_FindSyx(S, kJB_SyxArg);
				JB_Incr(_tmPf2);
				SC_Func__Tran_OneIsa(Isa_, _tmPf2, P);
				JB_Decr(Isa_);
				JB_Decr(_tmPf2);
				(++I);
			};
		};
	}
	JB_Decr(_tmPf1);
	SC__IsaTester_T.InUse = false;
	SC__IsaTester_T.Count = 0;
}

bool SC_Func__Tran_Log(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Node, (&_usingf0));
		Message* F = ((Message*)JB_Ring_First(Node));
		JB_Incr(F);
		JB_Msg_AppendSyx(Node, kJB_SyxThg, JB_LUB[1280]);
		Message* _tmPf1 = JB_Msg_Msg(Node, kJB_SyxPrm, JB_LUB[0]);
		JB_Incr(_tmPf1);
		JB_Tree_SyntaxAppend(_tmPf1, F);
		JB_Decr(F);
		JB_Decr(_tmPf1);
		Node->Func = kJB_SyxDot;
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_FreeIfDead(SC_TypeOfExpr(Node, Name_space, nil));
	return false;
}

bool SC_Func__Tran_NotAllowed(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (!SC_Msg_ASMType(Node)) {
		if (true) {
			JB_Msg_Fail(Node, nil);
		}
	}
	return false;
}

bool SC_Func__Tran_Once(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* Arg = JB_Msg_NeedSyx(Node, kJB_SyxArg);
	JB_Incr(Arg);
	if (!Arg) {
		JB_Decr(Arg);
		return nil;
	}
	if (!JB_Msg_ExpectLast(Arg, JB_LUB[0])) {
		JB_Decr(Arg);
		return nil;
	}
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Node, (&_usingf0));
		JB_SetRef(Node->Name, JB_LUB[175]);
		JB_String* _tmPf1 = JB_int_RenderFS(((++SC__Func_OnceCount)), nil);
		JB_Incr(_tmPf1);
		JB_String* Name = JB_Str_OperatorPlus(JB_LUB[235], _tmPf1);
		JB_Incr(Name);
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Syx_OperatorPlus(kJB_SyxThg, JB_LUB[32]);
		JB_Incr(_tmPf2);
		JB_String* Obj = SC_Base_LateAddTempory(SC__Comp_program, JB_LUB[147], Name, _tmPf2, Node);
		JB_Incr(Obj);
		JB_Decr(Name);
		JB_Decr(_tmPf2);
		Message* Rel = JB_Syx_OperatorPlus(kJB_SyxRel, JB_LUB[0]);
		JB_Incr(Rel);
		JB_Msg_AppendSyx(Rel, kJB_SyxThg, Obj);
		JB_Msg_AppendSyx(Rel, kJB_SyxOpp, JB_LUB[241]);
		JB_Msg_AppendSyx(Rel, kJB_SyxThg, JB_LUB[31]);
		(JB_Ring_FirstSet(Arg, Rel));
		JB_Decr(Rel);
		Message* Brel = JB_Syx_OperatorPlus(kJB_SyxBRel, JB_LUB[174]);
		JB_Incr(Brel);
		JB_Msg_AppendSyx(Brel, kJB_SyxThg, Obj);
		JB_Decr(Obj);
		(JB_Ring_FirstSet(Node, Brel));
		JB_Decr(Brel);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Arg);
	SC_Func__Tran_If(Fn, Node, Name_space);
	return false;
}

void SC_Func__Tran_OneIsa(Message* Isa_f, Message* Arg, SCNode* Space) {
	if ((!Arg)) {
		return;
	}
	Message* List = ((Message*)JB_Ring_Last(Isa_f));
	JB_Incr(List);
	Message* L = ((Message*)JB_Ring_First(List));
	JB_Incr(L);
	JB_Decr(List);
	Message* R = ((Message*)JB_Ring_NextSib(L));
	JB_Incr(R);
	SCClass* Cls = SC_Msg_ObjCls(R);
	JB_Incr(Cls);
	if ((!Cls)) {
		JB_Msg_Fail(R, JB_LUB[1998]);
		JB_Decr(Cls);
		JB_Decr(R);
		JB_Decr(L);
		return;
	}
	if ((Cls->IsRole)) {
		JB_Msg_Fail(R, JB_LUB[1999]);
		JB_Decr(Cls);
		JB_Decr(R);
		JB_Decr(L);
		return;
	}
	JB_Decr(R);
	SCDecl* OldDecl = SC_Base_LookUpVarDecl(Space, L->Name);
	JB_Incr(OldDecl);
	if (!OldDecl) {
		JB_Decr(OldDecl);
		JB_Decr(Cls);
		JB_Decr(L);
		return;
	}
	SCDecl* NewDecl = SC_Decl_CopyDecl(OldDecl, false);
	JB_Incr(NewDecl);
	(SC_Decl_SyntaxIsSet(NewDecl, kSC__SCDeclInfo_Body, true));
	(SC_Decl_IsTypeImproveSet(NewDecl, true));
	JB_SetRef(NewDecl->IsLookupOnly, OldDecl);
	JB_Decr(OldDecl);
	JB_SetRef(NewDecl->Type, Cls);
	SCDecl* Oldcont = NewDecl->Contains;
	JB_Incr(Oldcont);
	SCDecl* It = Cls->Contained;
	JB_Incr(It);
	JB_Decr(Cls);
	if (It) {
		if ((!Oldcont) or SC_Class_Real_Isa(It->Type, Oldcont->Type)) {
			JB_SetRef(NewDecl->Contains, It);
		}
	}
	JB_Decr(Oldcont);
	JB_Decr(It);
	if (!Space->Access) {
		JB_SetRef(Space->Access, JB_Dict_Constructor(nil));
	}
	JB_String* _tmPf0 = JB_Str_LowerCase(L->Name);
	JB_Incr(_tmPf0);
	JB_Decr(L);
	(JB_Dict_ValueSet(Space->Access, _tmPf0, NewDecl));
	JB_Decr(NewDecl);
	JB_Decr(_tmPf0);
}

bool SC_Func__Tran_Print(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	SC_Func__Tran_PrintSub(Fn, Node, Name_space);
	JB_FreeIfDead(SC_TypeOfExpr(Node, Name_space, nil));
	return false;
}

bool SC_Func__Tran_PrintSub(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Node, (&_usingf0));
		Message* Prm = JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0]);
		JB_Incr(Prm);
		JB_Tree_TakeAllFrom(Prm, Node);
		JB_Tree_SyntaxAppend(Node, Prm);
		JB_Decr(Prm);
		Message* _tmPf1 = JB_Syx_Msg(kJB_SyxThg, Node->Name);
		JB_Incr(_tmPf1);
		(JB_Ring_FirstSet(Node, (_tmPf1)));
		JB_Decr(_tmPf1);
		JB_Msg_BecomeStr(Node, kJB_SyxFunc, JB_LUB[0]);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
		JB_MsgPos_Destructor((&_usingf0));
	}
	return false;
}

bool SC_Func__Tran_Problem(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* Stuff = JB_Msg_NeedFirst(Node);
	JB_Incr(Stuff);
	if (!Stuff) {
		JB_Decr(Stuff);
		return nil;
	}
	if (!JB_Msg_ExpectLast(Stuff, JB_LUB[0])) {
		JB_Decr(Stuff);
		return nil;
	}
	if ((!JB_Msg_EqualsSyx(Stuff, kJB_SyxList, false)) and (!JB_Msg_EqualsSyx(Stuff, kJB_SyxBra, false))) {
		JB_SetRef(Stuff, SC_Msg_WrapWith(Stuff, kJB_SyxList, JB_LUB[0]));
	}
	if (true) {
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Node, (&_usingf0));
		Stuff->Func = kJB_SyxPrm;
		JB_Msg_BecomeStr(Node, kJB_SyxBra, JB_LUB[0]);
		Message* Dot = JB_Msg_Msg(Node, kJB_SyxDot, JB_LUB[1281]);
		JB_Incr(Dot);
		Message* _tmPf1 = ((Message*)JB_Ring_First(Stuff));
		JB_Incr(_tmPf1);
		JB_Tree_SyntaxAppend(Dot, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Tree_SyntaxAppend(Dot, Stuff);
		JB_Decr(Dot);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Stuff);
	JB_FreeIfDead(SC_TypeOfExpr(Node, Name_space, nil));
	return false;
}

bool SC_Func__Tran_Quit(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	SC_Msg_MiniTran(Node, Name_space, JB_LUB[471]);
	return false;
}

bool SC_Func__Tran_Rejoin(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	(SC_Msg_ASMTypeSet(Node, kSC__ASMType_kRejoin));
	Message* P = ((Message*)JB_Ring_First(Node));
	JB_Incr(P);
	if (JB_Msg_EqualsSyx(P, kJB_SyxArg, false)) {
		SCArg* Arg = SC_Msg_AsArg(P);
		JB_Incr(Arg);
		if (!(Arg and Arg->IsStatementExpr)) {
			JB_Msg_Fail(Node, JB_LUB[903]);
			JB_Decr(Arg);
			JB_Decr(P);
			return nil;
		}
		JB_Decr(Arg);
		Message* N = ((Message*)JB_Ring_NextSib(P));
		JB_Incr(N);
		if (N) {
			JB_Msg_Fail(Node, JB_LUB[904]);
			JB_Decr(N);
			JB_Decr(P);
			return nil;
		}
		JB_Decr(N);
	}
	JB_Decr(P);
	return false;
}

bool SC_Func__Tran_Render(Message* Msg, SCClass* Cls) {
	MessagePosition Using2 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Msg, (&Using2));
	bool _tmPf0 = SC_Func__Tran_RenderSub(Msg, Cls);
	JB_MsgPos_Destructor((&Using2));
	return _tmPf0;
}

bool SC_Func__Tran_RenderSub(Message* Msg, SCClass* Cls) {
	JB_SetRef(Msg->Name, JB_LUB[537]);
	Message* _tmPf0 = ((Message*)JB_Ring_First(Msg));
	JB_Incr(_tmPf0);
	bool IsPureRender = (!JB_Msg_EqualsSyx(_tmPf0, kJB_SyxThg, false));
	JB_Decr(_tmPf0);
	if (IsPureRender) {
		Message* _tmPf1 = JB_Syx_OperatorPlus(kJB_SyxThg, JB_LUB[1105]);
		JB_Incr(_tmPf1);
		(JB_Ring_FirstSet(Msg, _tmPf1));
		JB_Decr(_tmPf1);
		if (Cls) {
			JB_SetRef(Msg->Name, JB_LUB[75]);
		}
	}
	Message* Arg = SC_Msg_NormaliseFunc(Msg, nil);
	JB_Incr(Arg);
	Message* Name = ((Message*)JB_Ring_First(Msg));
	JB_Incr(Name);
	Message* Params = ((Message*)JB_Ring_NextSib(Name));
	JB_Incr(Params);
	JB_Decr(Name);
	if (SC_Msg_IsBehaviour(Msg)) {
		JB_Msg_AppendSyx(Params, kJB_SyxThg, JB_LUB[1106]);
	}
	 else {
		JB_Msg_CopyAllInto(SC__SCStrings_RenderNewParams, Params);
	}
	JB_Decr(Params);
	if (JB_FreeIfDead(JB_Msg_FindNested(Msg, kJB_SyxThg, JB_LUB[1107], false))) {
		SC_Msg_CopyAllBeforeInto(SC__SCStrings_RenderFinish, Arg, nil);
		SC_Msg_CopyAllAfterInto(SC__SCStrings_RenderFinish, Arg, nil);
	}
	JB_Decr(Arg);
	if (SC_Msg_IsBehaviour(Msg)) {
		Message* _tmPf2 = ((Message*)JB_Tree_Second(Msg));
		JB_Incr(_tmPf2);
		JB_Tree_Remove(_tmPf2);
		JB_Decr(_tmPf2);
		return true;
	}
	return false;
}

Message* SC_Func__Tran_Result(SCFunction* F) {
	SCDecl* Type = F->ReturnType;
	if (SC_Decl_SyntaxIs(Type, kSC__SCDeclInfo_ReturnedStruct)) {
		return nil;
	}
	Message* Src = SC_Func_SourceArg(F);
	if (!(Type and (Src and (!(SC_Msg_OperatorIsTmp(((Message*)JB_Ring_Last(Src)), JB_LUB[239])))))) {
		return nil;
	}
	Message* P = ((Message*)JB_Tree_FlatLast(Src));
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(P, (&_usingf0));
	JB__Tk_Using.Position = (JB_Msg_After(P) + 1);
	Message* Ret = SC_Decl_WriteDeclFull(Type, JB_LUB[1302], 0);
	(JB_Ring_FirstSet(Src, Ret));
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), P);
	JB_MsgPos_Destructor((&_usingf0));
	return Ret;
}

void SC_Func__Tran_ResultFinish(SCFunction* F, Message* R_z, SCNode* Space) {
	if (SC_Func_SyntaxIs(F, kSC__FunctionType_Constructor)) {
		if (!SC_Func_ReturnsObject(F)) {
			return;
		}
	}
	Message* Src = SC_Func_SourceArg(F);
	SCDecl* D = SC_Msg_MsgDecl(R_z);
	bool Used = (D and SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_UsedByCode));
	SC_Msg_StartUsingAfter(Src);
	if (!Used) {
		JB_Tree_Remove(R_z);
	}
	 else if (!SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_SetTo)) {
		SC_Msg_NotNilRZ(R_z, F->ReturnType, Space);
	}
	if (!((SC_SCBlockage_SyntaxIs(SC_Msg_Blocks(Src), kSC__SCBlockage_Return)) or (SC_Msg_OperatorIsTmp(((Message*)JB_Ring_Last(Src)), JB_LUB[239])))) {
		Message* Last = SC_Msg_DeepLast(Src);
		//using;
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Last, (&_usingf0));
		JB__Tk_Using.Position = (JB_Msg_After(Last) + 1);
		Message* Ret = JB_Msg_Msg(Src, kJB_SyxTmp, JB_LUB[239]);
		(SC_Msg_ASMTypeSet(Ret, kSC__ASMType_kReturn));
		if (Used) {
			JB_SetRef(JB_Msg_Msg(Ret, kJB_SyxThg, JB_LUB[1302])->Obj, D);
		}
		 else {
			JB_Tree_SyntaxAppend(Ret, SC_Decl_CreateDefault(F->ReturnType, Src, true));
		}
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Last);
		JB_MsgPos_Destructor((&_usingf0));
	}
}

bool SC_Func__Tran_Return(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (SC_Msg_ASMType(Node) == kSC__ASMType_kReturn) {
		return nil;
	}
	(SC_Msg_ASMTypeSet(Node, kSC__ASMType_kReturn));
	if ((!Fn)) {
		JB_Msg_Fail(Node, JB_LUB[901]);
		return nil;
	}
	JB_SetRef(Node->Obj, Fn->ReturnType);
	if (!(JB_Tree_IsLast(Node) and (JB_Tree_OperatorIn(Node, SC_Func_SourceArg(Fn))))) {
		if (SC_Func_SyntaxIs(Fn, kSC__FunctionType_ConOrDes)) {
			JB_Msg_Fail(Node, JB_LUB[1708]);
			return nil;
		}
	}
	if (Fn->StructReturnPos) {
		SC_Msg_StructReturnCleanup(Node, Fn, Name_space);
	}
	SC_Func_CheckReturnValue(Fn, Node, Name_space);
	SC_Msg_LastInBlock(Node, kSC__SCBlockage_Return);
	SC_Msg_CheckNotInStateExpr(Node, SC_Func_SourceArg(Fn));
	return false;
}

void SC_Func__Tran_Sdt(Message* Exp) {
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Exp, (&_usingf0));
	Message* F = (JB_Syx_Msg(kJB_SyxThg, JB_LUB[180]));
	JB_Incr(F);
	F->RangeLength = 1;
	(JB_Ring_FirstSet(Exp, F));
	JB_Decr(F);
	Exp->Func = kJB_SyxDot;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Exp);
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__Tran_Strings(Message* Start, SCFunction* Fn) {
	{
		Message* Msg = Start;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Start));
		while ((Msg) and (Msg != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Msg));
			Syntax F = Msg->Func;
			if (F == kJB_SyxStr) {
				SC_Func__String_Expand(Msg, Fn);
			}
			Msg = _N_f2;
		};
		;
	};
}

bool SC_Func__Tran_Swap(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	(SC_Msg_ASMTypeSet(Node, kSC__ASMType_kSwap));
	if ((!JB_Tree_SyntaxEquals(Node, 2, false))) {
		JB_Msg_Fail(Node, JB_LUB[1698]);
		return nil;
	}
	JB_SetRef(Node->Name, JB_LUB[774]);
	Message* Ln = ((Message*)JB_Ring_First(Node));
	Message* Rn = ((Message*)JB_Tree_Second(Node));
	SCDecl* Lc = SC_TypeOfExpr(Ln, Name_space, nil);
	SCDecl* Rc = SC_TypeOfExpr(Rn, Name_space, nil);
	if (SC_Decl_AssignabilityCheck(Lc, Ln, Rn, Rc, false) and SC_Decl_AssignabilityCheck(Rc, Rn, Ln, Lc, false)) {
		if (Lc->Type != Rc->Type) {
			JB_Msg_Fail(Node, JB_LUB[1699]);
			return nil;
		}
		SC_Decl_ExpectRelMatch(Lc, Rc, Rn, nil, Node);
		SC_Decl_ExpectRelMatch(Rc, Lc, Ln, nil, Node);
		SC_Func__Tran_PrintSub(Fn, Node, Name_space);
		JB_SetRef(((Message*)JB_Ring_Last(Node))->Obj, SC__Comp_SwapFunc);
		JB_SetRef(Node->Obj, SC_TypeVoidPtr);
		(SC_Msg_ASMTypeSet(Node, kSC__ASMType_kSwap));
	}
	return false;
}

Message* SC_Func__Tran_Syx(Message* Msg) {
	JB_SetRef(Msg->Name, JB_LUB[1031]);
	Message* Name = JB_Msg_NeedSyx(Msg, kJB_SyxThg);
	JB_Incr(Name);
	if (!Name) {
		JB_Decr(Name);
		return nil;
	}
	Message* Arg = JB_Msg_Last(Msg, kJB_SyxArg);
	JB_Incr(Arg);
	if (!Arg) {
		JB_Decr(Arg);
		JB_Decr(Name);
		return nil;
	}
	JB_Decr(Arg);
	if (JB_Msg_Length(Name) > 4) {
		JB_Msg_Fail(Msg, JB_LUB[1399]);
		JB_Decr(Name);
		return nil;
	}
	Message* _tmPf2 = JB_Msg_FindSyx(Msg, kJB_SyxBra);
	JB_Incr(_tmPf2);
	Message* Params = JB_Msg_FindSyx(_tmPf2, kJB_SyxThg);
	JB_Incr(Params);
	JB_Decr(_tmPf2);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Msg, (&_usingf0));
	if (!Params) {
		JB_SetRef(Params, (JB_Syx_Msg(kJB_SyxThg, JB_LUB[0])));
		Message* _tmPf3 = ({
			Message* __imPf1 = (JB_Syx_Msg(kJB_SyxBra, JB_LUB[0]));
			JB_Incr(__imPf1);
			JB_Tree_SyntaxAppend(__imPf1, Params);
			JB_SafeDecr(__imPf1);
			 __imPf1;
		});
		JB_Incr(_tmPf3);
		(JB_Ring_NextSibSet(Name, _tmPf3));
		JB_Decr(_tmPf3);
	}
	JB_String* OldName = Name->Name;
	JB_Incr(OldName);
	JB_String* SyxName = JB_Str_OperatorPlus(JB_LUB[480], OldName);
	JB_Incr(SyxName);
	JB_SetRef(Name->Name, JB_Str_OperatorPlus(OldName, JB_LUB[143]));
	JB_String* Longname = Params->Name;
	JB_Incr(Longname);
	JB_SetRef(Params->Name, JB_LUB[1400]);
	JB_Decr(Params);
	Message* _tmPf4 = JB_Msg_Ancestor(Msg, kJB_SyxArg);
	JB_Incr(_tmPf4);
	Message* ArgPlace = JB_Msg_Ancestor(_tmPf4, kJB_SyxArg);
	JB_Incr(ArgPlace);
	JB_Decr(_tmPf4);
	JB_Array_SyntaxAppend(SC__Comp_SyxArray, OldName);
	if (!SC__Options_ModePack) {
		Message* Dotnew = JB_Msg_Msg(ArgPlace, kJB_SyxDot, JB_LUB[1401]);
		JB_Incr(Dotnew);
		JB_Msg_AppendSyx(Dotnew, kJB_SyxThg, JB_LUB[544]);
		Message* Prm = JB_Msg_Msg(Dotnew, kJB_SyxPrm, JB_LUB[0]);
		JB_Incr(Prm);
		Message* Dot2 = JB_Msg_Msg(Prm, kJB_SyxDot, Name->Name);
		JB_Incr(Dot2);
		JB_Msg_AppendSyx(Dot2, kJB_SyxThg, JB_LUB[1402]);
		JB_Msg_AppendSyx(Dot2, kJB_SyxEmb, JB_LUB[0]);
		JB_Decr(Dot2);
		JB_String* _tmPf5 = JB_Str_LowerCase(OldName);
		JB_Incr(_tmPf5);
		JB_Msg_AppendString(Prm, _tmPf5);
		JB_Decr(_tmPf5);
		JB_Msg_AppendString(Prm, Longname);
		JB_Msg_AppendNum(Prm, SC__Func_SyxID);
		JB_Decr(Prm);
		SC_Base_CollectOne(SC__Comp_program, Dotnew, true);
		JB_Decr(Dotnew);
	}
	JB_Decr(Name);
	JB_Decr(OldName);
	JB_Decr(Longname);
	JB_Decr(ArgPlace);
	SCDecl* _tmPf6 = SC_Base_AddNumericConst(SC__Comp_program, SyxName, SC__Func_SyxID, Msg);
	JB_Incr(_tmPf6);
	JB_Decr(SyxName);
	JB_Array_SyntaxAppend(SC__Comp_ActualSyxes, _tmPf6);
	JB_Decr(_tmPf6);
	(++SC__Func_SyxID);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Msg);
	JB_MsgPos_Destructor((&_usingf0));
	return Msg;
}

bool SC_Func__Tran_Temporal(SCFunction* Fn, Message* S, SCNode* Name_space) {
	DTWrap* TmpInt = ((DTWrap*)JB_Dict_Value0(SC__Func_TemporalStatements, S->Name));
	if (TmpInt) {
		return (((FP_TranFunc)JB_Wrap_SyntaxAccess(TmpInt)))(Fn, S, Name_space);
	}
	if (true) {
		JB_Msg_Fail(S, nil);
	}
	return false;
}

bool SC_Func__Tran_Using(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* With = JB_Msg_NeedFirst(Node);
	JB_Incr(With);
	if (!With) {
		JB_Decr(With);
		return nil;
	}
	Message* Start = Node;
	JB_Incr(Start);
	Message* Arg = ((Message*)JB_Ring_NextSib(With));
	JB_Incr(Arg);
	if (Arg) {
		if (!(JB_Msg_Expect(Arg, kJB_SyxArg, nil) and JB_Msg_ExpectLast(Arg, JB_LUB[0]))) {
			JB_Decr(Arg);
			JB_Decr(Start);
			JB_Decr(With);
			return nil;
		}
		JB_SetRef(Start, nil);
	}
	 else {
		JB_SetRef(Arg, ((Message*)JB_Ring_Parent(Node)));
	}
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Node, (&_usingf0));
	SCFunction* _tmPf1 = SC_Func__CurrFunc();
	JB_Incr(_tmPf1);
	JB_String* Name = SC_UniqueTmpVar(_tmPf1, JB_LUB[243]);
	JB_Incr(Name);
	JB_Decr(_tmPf1);
	Message* WithFirst = ((Message*)JB_Ring_First(With));
	JB_Incr(WithFirst);
	if (!JB_Msg_EqualsSyx(With, kJB_SyxBra, false)) {
		JB_SetRef(WithFirst, With);
		JB_FreeIfDead(SC_Msg_WrapWith(With, kJB_SyxBra, JB_LUB[0]));
	}
	JB_Decr(With);
	if (!(((JB_Msg_EqualsSyx(WithFirst, kJB_SyxThg, false)) or (JB_Msg_EqualsSyx(WithFirst, kJB_SyxNum, false))) or JB_Msg_IsString(WithFirst))) {
		SCFunction* _tmPf2 = SC_Func__CurrFunc();
		JB_Incr(_tmPf2);
		JB_String* Declname = SC_UniqueTmpVar(_tmPf2, JB_LUB[1205]);
		JB_Incr(Declname);
		JB_Decr(_tmPf2);
		Message* ThgDecl = SC_MakeDecl(JB_LUB[0], Declname, WithFirst, kSC__SCDeclInfo_Body);
		JB_Incr(ThgDecl);
		Message* WithFirst2 = JB_Syx_OperatorPlus(kJB_SyxThg, Declname);
		JB_Incr(WithFirst2);
		JB_Decr(Declname);
		JB_SetRef(WithFirst2->Obj, WithFirst->Obj);
		JB_SetRef(WithFirst, WithFirst2);
		JB_Decr(WithFirst2);
		JB_Tree_AppendAfter(Arg, ThgDecl, Start);
		JB_SetRef(Start, ThgDecl);
		JB_Decr(ThgDecl);
	}
	Message* UsingObj = JB_Syx_OperatorPlus(kJB_SyxDot, JB_LUB[1206]);
	JB_Incr(UsingObj);
	JB_Tree_SyntaxAppend(UsingObj, WithFirst);
	JB_Msg_AppendSyx(UsingObj, kJB_SyxEmb, JB_LUB[0]);
	Message* Item = JB_Syx_OperatorPlus(kJB_SyxDot, JB_LUB[1207]);
	JB_Incr(Item);
	JB_Msg_AppendSyx(Item, kJB_SyxThg, Name);
	Message* _tmPf3 = JB_Msg_Msg(Item, kJB_SyxPrm, JB_LUB[0]);
	JB_Incr(_tmPf3);
	Message* _tmPf4 = JB_Msg_Copy(WithFirst, nil);
	JB_Incr(_tmPf4);
	JB_Decr(WithFirst);
	JB_Tree_SyntaxAppend(_tmPf3, _tmPf4);
	JB_Decr(_tmPf3);
	JB_Decr(_tmPf4);
	Message* Decl = SC_MakeDecl(JB_LUB[0], Name, UsingObj, 0);
	JB_Incr(Decl);
	JB_Decr(Name);
	JB_Decr(UsingObj);
	JB_Tree_AppendAfter(Arg, Decl, Start);
	JB_Decr(Start);
	JB_Decr(Decl);
	Message* _tmPf5 = SC_Msg_UnReachable(Arg);
	JB_Incr(_tmPf5);
	JB_Tree_AppendBefore(Arg, Item, _tmPf5);
	JB_Decr(Item);
	JB_Decr(_tmPf5);
	if (JB_Tree_OperatorIn(Arg, Node)) {
		JB_SetRef(Node->Name, JB_LUB[175]);
		Message* _tmPf6 = ((Message*)JB_Ring_First(Node));
		JB_Incr(_tmPf6);
		JB_Msg_AppendSyx(_tmPf6, kJB_SyxThg, JB_LUB[31]);
		JB_Decr(_tmPf6);
	}
	 else {
		SC_Msg_MakeComment(Node);
	}
	JB_Decr(Arg);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
	JB_MsgPos_Destructor((&_usingf0));
	return false;
}

bool SC_Func__Tran_Visible(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if ((!Fn)) {
		JB_Msg_Fail(Node, JB_LUB[901]);
		return nil;
	}
	SC_Base_LoadVisibility(Fn, Node);
	return false;
}

bool SC_Func__Tran_While(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	(++SC__Func_InBranch);
	SC_Func__Tran_WhileSub(Fn, Node, Name_space);
	SC_Func__Tran_All_Final(Fn, Node, Name_space, kJB_SyxArg);
	(--SC__Func_InBranch);
	return true;
}

bool SC_Func__Tran_WhileSub(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (SC_Msg_ASMType(Node) == kSC__ASMType_kWhile) {
		return false;
	}
	JB_SetRef(Node->Name, JB_LUB[176]);
	(SC_Msg_ASMTypeSet(Node, kSC__ASMType_kWhile));
	Message* Cond = JB_Msg_NeedFirst(Node);
	JB_Incr(Cond);
	if (!Cond) {
		JB_Decr(Cond);
		return nil;
	}
	Message* Arg = ((Message*)JB_Ring_NextSib(Cond));
	JB_Incr(Arg);
	//using;
	MessagePosition _usingf0 = ((MessagePosition){});
	JB_Msg_SyntaxUsing(Node, (&_usingf0));
	if ((JB_Msg_EqualsSyx(Cond, kJB_SyxArg, false))) {
		JB_SetRef(Cond, (JB_Syx_Msg(kJB_SyxThg, JB_LUB[31])));
		(JB_Ring_FirstSet(Node, Cond));
		JB_SetRef(Arg, ((Message*)JB_Ring_NextSib(Cond)));
	}
	 else {
		if (!Arg) {
			JB_SetRef(Arg, JB_Msg_GiveArg(Node));
		}
		Message* Decl = ((Message*)JB_Ring_First(Cond));
		JB_Incr(Decl);
		if ((JB_Msg_EqualsSyx(Decl, kJB_SyxDecl, false))) {
			Cond->Func = kJB_SyxBra;
			JB_SetRef(Cond, JB_Msg_Msg(Cond, kJB_SyxThg, JB_LUB[31]));
			(JB_Ring_FirstSet(Arg, Decl));
			Message* Dname = SC_Msg_DeclName(Decl);
			JB_Incr(Dname);
			if (Dname) {
				Message* _tmPf4 = JB_Msg_Copy(Dname, nil);
				JB_Incr(_tmPf4);
				Message* _tmPf3 = JB_Macro_CallFast(SC__Macros_WhileDecl, _tmPf4, nil);
				JB_Incr(_tmPf3);
				JB_Decr(_tmPf4);
				(JB_Ring_NextSibSet(Decl, _tmPf3));
				JB_Decr(_tmPf3);
			}
			JB_Decr(Dname);
		}
		 else {
			JB_SetRef(Cond, SC_Msg_ExpandToBool(Cond, Name_space));
			if (!Cond) {
				JB_Decr(Decl);
				JB_MsgPos_Destructor((&_usingf0));
				JB_Decr(Arg);
				JB_Decr(Cond);
				return nil;
			}
		}
		JB_Decr(Decl);
	}
	JB_FreeIfDead(SC_Msg_NeedBra(Cond));
	SC_Msg_CheckContinuesAndExits(Arg);
	SC_Func__Tran_Isa(Node, Name_space);
	Message* ExitCond = ((Message*)JB_Ring_NextSib(Arg));
	JB_Incr(ExitCond);
	if (ExitCond) {
		JB_Tree_Remove(ExitCond);
		JB_SetRef(ExitCond, SC_Msg_Negate(ExitCond));
		Message* Exit = (JB_Syx_Msg(kJB_SyxTmp, JB_LUB[473]));
		JB_Incr(Exit);
		Message* _tmPf5 = ({
			Message* __imPf1 = (JB_Syx_Msg(kJB_SyxTmp, JB_LUB[175]));
			JB_Incr(__imPf1);
			JB_Tree_SyntaxAppend(__imPf1, ExitCond);
			Message* _tmPf6 = ({
				Message* __imPf2 = (JB_Syx_Msg(kJB_SyxArg, JB_LUB[0]));
				JB_Incr(__imPf2);
				JB_Tree_SyntaxAppend(__imPf2, Exit);
				JB_SafeDecr(__imPf2);
				 __imPf2;
			});
			JB_Incr(_tmPf6);
			JB_Tree_SyntaxAppend(__imPf1, _tmPf6);
			JB_Decr(_tmPf6);
			JB_SafeDecr(__imPf1);
			 __imPf1;
		});
		JB_Incr(_tmPf5);
		JB_Tree_SyntaxAppend(Arg, _tmPf5);
		JB_Decr(_tmPf5);
		SC_Msg_LoopExit(Exit);
		JB_Decr(Exit);
		JB_SetRef(Cond, ExitCond);
	}
	JB_Decr(Cond);
	JB_Decr(Arg);
	JB_Decr(ExitCond);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0), Node);
	JB_MsgPos_Destructor((&_usingf0));
	return false;
}

void SC_Func__TransformAll() {
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			if (SC_Rec_TooMany(JB_StdErr)) {
				return;
			}
			SC_Func_Transform(F);
			(++_if0);
		};
	};
}


void SC_Mod_AddDelayedInit(SCModule* Self, Message* Src, Message* Dest, JB_String* Fn_name) {
	if (Src and (SC_Mod_HasActualCode(Self, Src) and (Self != SC__Comp_program))) {
		//using;
		MessagePosition _usingf0 = ((MessagePosition){});
		JB_Msg_SyntaxUsing(Src, (&_usingf0));
		SC_Msg_AlmostAppend(Dest, (JB_Syx_Msg(kJB_SyxSheb, JB_Str_OperatorPlus(JB_LUB[466], Self->Name))));
		SC_Msg_AlmostAppend(Dest, ({
			Message* __imPf1 = (JB_Syx_Msg(kJB_SyxDot, Fn_name));
			JB_Tree_SyntaxAppend(__imPf1, (JB_Syx_Msg(kJB_SyxThg, Self->Name)));
			JB_Tree_SyntaxAppend(__imPf1, (JB_Syx_Msg(kJB_SyxPrm, JB_LUB[0])));
			 __imPf1;
		}));
		JB_MsgPos_SyntaxUsingComplete((&_usingf0), Src);
		JB_MsgPos_Destructor((&_usingf0));
	}
}

void SC_Mod_AddInterfaceToTable(SCModule* Self, SCClass* TableCls) {
	SCDecl* D = SC_Decl_Constructor(nil, Self->Cls);
	JB_Incr(D);
	D->NilDeclared = kSC__NilState_Real;
	JB_String* _tmPf0 = SC_Str_InterfaceToBehaviour(Self->Name);
	JB_Incr(_tmPf0);
	(SC_Decl_NameSet(D, _tmPf0));
	JB_Decr(_tmPf0);
	JB_Array_SyntaxAppend(TableCls->Properties, D);
	SC_Base_TryAdd(TableCls, Self->Source, D, D->Name);
	JB_Decr(D);
}

void SC_Mod_AddModuleToFunc(SCModule* Self, SCNode* Space) {
	if (!JB_FreeIfDead(SC_Base_SyntaxAccessWithStr(Space, JB_LUB[180]))) {
		Message* _tmPf0 = SC_Base_FuncSrc(Space);
		JB_Incr(_tmPf0);
		SC_Base_TryAdd(Space, _tmPf0, Self, JB_LUB[180]);
		JB_Decr(_tmPf0);
	}
}

void SC_Mod_BaseDecls(SCModule* Self) {
	SC_Base_Use(Self);
	SC_CollectDeclsGlobals(Self->Source, Self);
}

Message* SC_Mod_BuildInitArg(SCModule* Self) {
	Message* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, ({
		Message* __imPf0 = (JB_Syx_Msg(kJB_SyxArg, JB_LUB[0]));
		JB_Incr(__imPf0);
		Message* _tmPf1 = JB_Syx_Msg(kJB_SyxArg, JB_LUB[0]);
		JB_Incr(_tmPf1);
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf1));
		JB_Decr(_tmPf1);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	if (Self->Source) {
		Message* Ig = (JB_Syx_Msg(kJB_SyxTmp, JB_LUB[467]));
		JB_Incr(Ig);
		JB_Tree_SyntaxAppend(Ig, Rz);
		JB_SetRef(Ig->Obj, Self);
		JB_Tree_SyntaxAppend(Self->Source, Ig);
		JB_Decr(Ig);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

SCModule* SC_Mod_Constructor(SCModule* Self) {
	if (Self == nil) {
		Self = ((SCModule*)JB_NewClass(&SCModuleData));
	}
	SC_SCBetterNode_ConstructorWith0(Self);
	Self->Grabbed = false;
	Self->IsImport = false;
	Self->Inited = false;
	Self->IsRequiredInterface = false;
	Self->InitAfter = nil;
	JB_Incr2(Self->SubsFrom, JB_LUB[0]);
	Self->Cls = nil;
	Self->InitVarsArg = nil;
	Self->InitCodeArg = nil;
	JB_Incr2(Self->CppPart, JB_LUB[0]);
	JB_Incr2(Self->DefaultRefs, SC_CppRefs_Constructor(nil, nil));
	Array* C = SC__Comp_ModuleList;
	JB_Incr(C);
	if ((C) != nil) {
		JB_Array_SyntaxAppend(SC__Comp_ModuleList, Self);
	}
	JB_Decr(C);
	return Self;
}

JB_String* SC_Mod_CppPath(SCModule* Self) {
	JB_Incr(Self);
	JB_String* F = Self->CppPart;
	JB_Incr(F);
	while (true) {
		SCNode* P = Self->Parent;
		JB_Incr(P);
		if (JB_Object_FastIsa(P, &SCModuleData)) {
			if (!((SCModule*)P)->IsImport) {
				JB_SetRef(Self, P);
				JB_String* _tmPf0 = JB_Str_OperatorPlus(JB_LUB[162], F);
				JB_Incr(_tmPf0);
				JB_SetRef(F, JB_Str_OperatorPlus(((SCModule*)P)->CppPart, _tmPf0));
				JB_Decr(_tmPf0);
				JB_Decr(P);
				continue;
			}
		}
		JB_Decr(P);
		break;
	};
	JB_Decr(Self);
	JB_SafeDecr(F);
	return F;
}

void SC_Mod_DelayedInitFuncTransform(SCModule* Self) {
	Message* V = Self->InitVarsArg;
	JB_Incr(V);
	Message* DestVars = ((Message*)JB_Ternary(SC_Base_IsLibrary(Self), SC__Comp_program->InitVarsArg, SC__Comp_AppInitGlobals));
	JB_Incr(DestVars);
	Message* DestCode = ((Message*)JB_Ternary(SC_Base_IsLibrary(Self), SC__Comp_program->InitCodeArg, SC__Comp_AppInitCode));
	JB_Incr(DestCode);
	Message* It = ((Message*)JB_Ring_First(V));
	JB_Incr(It);
	if (It) {
		{
			Message* Msg = ((Message*)JB_Ring_First(It));
			JB_Incr(Msg);
			while (Msg) {
				Message* _Nf1 = ((Message*)JB_Ring_NextSib(Msg));
				JB_Incr(_Nf1);
				if ((JB_Msg_EqualsSyx(Msg, kJB_SyxDecl, false))) {
					Message* Name = SC_Msg_GetDclName(Msg, false);
					JB_Incr(Name);
					if (Name) {
						if (SC_Msg_InitRootDecl(Name, Msg, Self)) {
							JB_Tree_Remove(Msg);
						}
					}
					JB_Decr(Name);
				}
				JB_SetRef(Msg, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(Msg);
			;
		}
		;
		SC_Mod_AddDelayedInit(Self, V, DestVars, JB_LUB[2031]);
	}
	JB_Decr(V);
	JB_Decr(DestVars);
	JB_Decr(It);
	SC_Mod_AddDelayedInit(Self, Self->InitCodeArg, DestCode, JB_LUB[2032]);
	JB_Decr(DestCode);
}

void SC_Mod_Destructor(SCModule* Self) {
	JB_Clear(Self->DefaultRefs);
	JB_Clear(Self->InitAfter);
	JB_Clear(Self->SubsFrom);
	JB_Clear(Self->Cls);
	JB_Clear(Self->InitVarsArg);
	JB_Clear(Self->InitCodeArg);
	JB_Clear(Self->CppPart);
	SC_SCBetterNode_Destructor(Self);
}

SCObject* SC_Mod_GetTheNewer(SCModule* Self) {
	while (Self) {
		SCObject* O2 = SC_Base_SyntaxAccessWithStr(Self, JB_LUB[602]);
		if (O2) {
			return O2;
		}
		SCClass* Cls = Self->Cls;
		if (!Cls) {
			return nil;
		}
		if (!Cls->IsRole) {
			return nil;
		}
		Self = SC_Mod_SuperMod(Self);
	};
	return nil;
}

void SC_Mod_GlobalsFix(SCModule* Self) {
	FastString* Fs = JB_FS_Constructor(nil);
	JB_Incr(Fs);
	{
		DictionaryReader* _df0 = JB_Dict_Navigate(Self->Access);
		JB_Incr(_df0);
		while (JB_Nav_MoveNext(_df0)) {
			SCDecl* Decl = SC_DictionaryReader_ValueDecl(_df0);
			JB_Incr(Decl);
			if (Decl) {
				SC_Decl_PrefixedName(Decl, Fs, Self);
			}
			JB_Decr(Decl);
		};
		JB_Decr(_df0);
	}
	;
	JB_Decr(Fs);
}

bool SC_Mod_HasActualCode(SCModule* Self, Message* Arg) {
	{
		Message* Curr = Arg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Arg));
		while ((Curr) and (Curr != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Curr));
			if ((JB_Msg_EqualsSyx(Curr, kJB_SyxDecl, false))) {
				Curr = ((Message*)JB_Ring_FlatAfter(Curr));
				continue;
			}
			 else if ((!JB_Msg_EqualsSyx(Curr, kJB_SyxArg, false))) {
				return true;
			}
			Curr = _N_f2;
		};
		;
	}
	;
	return false;
}

void SC_Mod_InitDecls(SCModule* Self) {
	Message* A = ((Message*)JB_Ring_First(Self->InitVarsArg));
	JB_Incr(A);
	if (JB_Ring_HasChildren(A)) {
		SC_Imp_Use(Self->Project);
		SC_CollectDeclsGlobals(A, Self);
	}
	JB_Decr(A);
}

bool SC_Mod_IsProperModule(SCModule* Self) {
	if (!Self->Parent) {
		return nil;
	}
	if ((Self->Parent == SC__Comp_program) and (Self->Source == nil)) {
		return false;
	}
	return true;
}

void SC_Mod_LoadInitFunc(SCModule* Self) {
	SC__Base_CurrVisibility = true;
	SC__Mod_Curr = Self;
	Message* Arg = Self->InitCodeArg;
	JB_Incr(Arg);
	if (Arg) {
		SC_Mod_LoadInitFuncSub(Self, Arg, JB_LUB[2032]);
	}
	JB_SetRef(Arg, Self->InitVarsArg);
	if (Arg) {
		SC_Mod_LoadInitFuncSub(Self, Arg, JB_LUB[2031]);
	}
	JB_Decr(Arg);
	SC__Mod_Curr = nil;
}

void SC_Mod_LoadInitFuncSub(SCModule* Self, Message* Init, JB_String* Name) {
	FastString* _fsf0 = JB_FS_Constructor(nil);
	JB_Incr(_fsf0);
	JB_FS_AppendString(_fsf0, JB_LUB[2002]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[2003]);
	JB_String* _tmPf1 = JB_FS_GetResult(_fsf0);
	JB_Incr(_tmPf1);
	JB_Decr(_fsf0);
	Message* Msg = SC_Str_ParseClean(_tmPf1);
	JB_Incr(Msg);
	JB_Decr(_tmPf1);
	JB_Tree_SyntaxAppend(Msg, Init);
	SCFunction* Fn = SC_Mod_NewModuleFunc(Self, Msg);
	JB_Incr(Fn);
	JB_Decr(Msg);
	if (Fn) {
		(SC_Func_SyntaxIsSet(Fn, kSC__FunctionType_InitFunc, true));
		Message* L = ((Message*)JB_Ring_Last(Init));
		JB_Incr(L);
		if (!JB_Ring_HasChildren(L)) {
			JB_Tree_Remove(L);
		}
		JB_Decr(L);
	}
	JB_Decr(Fn);
}

void SC_Mod_LoadModule(SCModule* Self, Message* Node) {
	JB_SetRef(Node->Obj, Self);
	Message* NameMsg = ((Message*)JB_Ring_First(Node));
	JB_Incr(NameMsg);
	if (!Self->Cls) {
		JB_Msg_Expect(NameMsg, kJB_SyxThg, nil);
	}
	Message* Arg = NameMsg;
	JB_Incr(Arg);
	if (JB_Msg_EqualsSyx(NameMsg, kJB_SyxThg, false)) {
		JB_SetRef(Self->Name, NameMsg->Name);
		Message* Sub = ((Message*)JB_Ring_NextSib(NameMsg));
		JB_Incr(Sub);
		JB_SetRef(Arg, Sub);
		if ((JB_Msg_EqualsSyx(Sub, kJB_SyxBra, false))) {
			Message* _tmPf0 = JB_Msg_NeedSyx(Sub, kJB_SyxThg);
			JB_Incr(_tmPf0);
			if (!_tmPf0) {
				JB_Decr(_tmPf0);
				JB_Decr(Sub);
				JB_Decr(Arg);
				JB_Decr(NameMsg);
				return;
			}
			JB_SetRef(Self->SubsFrom, _tmPf0->Name);
			JB_Decr(_tmPf0);
			JB_SetRef(Arg, ((Message*)JB_Ring_NextSib(Sub)));
		}
		JB_Decr(Sub);
	}
	JB_Decr(NameMsg);
	JB_Msg_Expect(Arg, kJB_SyxArg, nil);
	if (!JB_Msg_ExpectLast(Arg, JB_LUB[0])) {
		JB_Decr(Arg);
		return;
	}
	JB_SetRef(Self->Source, Arg);
	JB_Decr(Arg);
	JB_String* _tmPf1 = SC_Mod_SafeName(Self);
	JB_Incr(_tmPf1);
	SC_Base_TryAdd(SC__Comp_DisamModules, nil, Self, _tmPf1);
	JB_Decr(_tmPf1);
	SC_Base_CollectFromNode(Self, Self->Source, SC__Base_CurrVisibility, nil);
}

void SC_Mod_MoveToInitFunc(SCModule* Self, Message* C) {
	if ((JB_Msg_EqualsSyx(C, kJB_SyxSheb, false)) or (JB_Msg_EqualsSyx(C, kJB_Syxurl, false))) {
		JB_Tree_Remove(C);
		return;
	}
	if (!SC_Msg_AllowedMoveToInit(C)) {
		JB_Msg_Fail(C, nil);
		return;
	}
	if (JB_Msg_EqualsSyx(C, kJB_SyxDecl, false)) {
		if (SC_Msg_SettingToNil(C)) {
			return;
		}
	}
	if (JB_Msg_EqualsSyx(C, kJB_SyxDecl, false)) {
		if (!Self->InitVarsArg) {
			JB_SetRef(Self->InitVarsArg, SC_Mod_BuildInitArg(Self));
		}
		JB_Tree_SyntaxAppend(((Message*)JB_Ring_First(Self->InitVarsArg)), C);
	}
	 else {
		if (!Self->InitCodeArg) {
			JB_SetRef(Self->InitCodeArg, SC_Mod_BuildInitArg(Self));
		}
		JB_Tree_SyntaxAppend(Self->InitCodeArg, C);
	}
}

SCFunction* SC_Mod_NewModuleFunc(SCModule* Self, Message* Src) {
	SCFunction* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, ((SCFunction*)SC_Func__NewFunc(Src, Self, Src)));
	if (Rz) {
		SC_Base_TryAddBase(Self, Src, Rz);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

SCModule* SC_Mod_OneOrOther(SCModule* Self, SCModule* B, JB_String* Name) {
	if (Self and B) {
		SC_SCObject_NameConflict(Self, B, Name);
	}
	return B;
}

JB_String* SC_Mod_Render(SCModule* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_Incr(Fs);
	SCClass* C = Self->Cls;
	JB_Incr(C);
	if (C) {
		JB_FS_AppendString(Fs, JB_LUB[543]);
		JB_FreeIfDead(SC_Class_Render(C, Fs));
	}
	 else {
		JB_FreeIfDead(SC_Named_Render(Self, Fs));
	}
	JB_Decr(C);
	JB_String* _tmPf0 = JB_FS_SmartResult(Fs, Fs_in);
	JB_Incr(_tmPf0);
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Mod_SafeName(SCModule* Self) {
	JB_String* N = Self->Name;
	if (JB_Str_Exists(N)) {
		return N;
	}
	SCClass* C = Self->Cls;
	if (C) {
		return C->Name;
	}
	return JB_LUB[0];
}

SCModule* SC_Mod_SuperMod(SCModule* Self) {
	SCClass* C = Self->Cls;
	if (C) {
		SCClass* S = C->Super;
		if (S) {
			return S->Modul;
		}
	}
	return nil;
}

bool SC_Mod_TryInit(SCModule* Self, Array* Req) {
	{
		Message* _LoopSrcf2 = Self->InitAfter;
		Message* Name = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Name) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Name));
			if (!JB_Msg_Expect(Name, kJB_SyxThg, nil)) {
				return nil;
			}
			SCModule* M = SC_Comp__FindModuleMsg(Name, 0);
			if (!(M and M->Inited)) {
				return nil;
			}
			Name = _Nf1;
		};
		;
	}
	;
	Self->Inited = true;
	JB_Array_SyntaxAppend(Req, Self);
	return true;
}

SCNode* SC_Mod__ConstantCollector(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_Tree_SyntaxAppend(SC__Comp_ConstantsList, Node);
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		JB_SetRef(Node->Obj, ((SCClass*)Name_space)->Modul);
	}
	 else {
		JB_SetRef(Node->Obj, Name_space);
	}
	return SC__Comp_program;
}

SCNode* SC_Mod__DoInitAfter(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCModule* Mod = SC_Base_SpaceModule(Name_space, Node);
	if (!Mod) {
		return nil;
	}
	JB_SetRef(Mod->InitAfter, JB_Msg_NeedSyxOK(Node, kJB_SyxPrm, kJB_SyxBra));
	return SC__Comp_program;
}

int SC_Mod__Init_() {
	{
	}
	;
	return 0;
}

SCNode* SC_Mod__NeuModule(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCModule* M = SC_Mod_Constructor(nil);
	JB_Incr(M);
	M->Project = SC__Imp_Curr;
	M->Parent = SC_Base_ProjectFix(Name_space);
	if (Node) {
		SC_Mod_LoadModule(M, Node);
	}
	JB_SafeDecr(M);
	return M;
}

SCModule* SC_Mod__NewContainer(JB_String* S) {
	SCModule* Rz = nil;
	JB_Incr(Rz);
	JB_SetRef(Rz, SC_Mod_Constructor(nil));
	JB_SetRef(Rz->Name, S);
	SC_Base_TryAdd(SC__Comp_program, nil, Rz, S);
	JB_SafeDecr(Rz);
	return Rz;
}


bool JB_Task_Task2_run(Task2* Self, int I) {
	JB_Task_Task2_Stuff(Self);
	return false;
}

void JB_Task_Task2_Stuff(Task2* Self) {
}

void JB_InitClassList(SaverLoadClass fn) {
	fn(&SaveableData, (char*)"");
	fn(&JB_StringData, (char*)"|int| Length_");
	fn(&ArrayData, (char*)"|int| Marker");
	fn(&DictionaryData, (char*)"");
	fn(&JB_FileData, (char*)"|int| Length_, |int| Descriptor");
	fn(&SavingTestData, (char*)"|string| Name, |int| ABC, |int| Value");
	fn(&JB_StringSharedData, (char*)"|int| Length_");
	fn(&JB_StringCData, (char*)"|int| Length_");
	fn(&MessageIDData, (char*)"|int| Length_, |int| ID, |int| Frequency, |int| Position, |int| Func");
	fn(&SCFileData, (char*)"|int| Length_, |int| Descriptor, |string| ExportName, |string| FData, |int| FileNum, |bool| IsInternal");
}
}

// -7992609560086250770 7024139096273720205