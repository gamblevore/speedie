
// Auto-generated file, by speedie.

/* jeebox-licence:
    By Theodore H. Smith, 2019, theo@jeebox.org
	
    This software is provided 'as-is', without any warranty.
    In no event will the author be held liable for any damages
    arising from the use of this software.

    Permission is granted to anyone to use this software for any purpose,
    including commercially, and to alter it and redistribute it
    freely, subject to the following restrictions:

    1. The origin of this software must not be misrepresented; you must not
        claim that you wrote the original software.
    2. If you use this software or portions of this software in a product, you
        are required to acknowledge this in at least one of:
        About-window / launch-screen / help-files / read-me-file
    3. Altered source vershions must be plainly marked as such, and must not be
        misrepresented as being the original software.
    4. Any jeebox-licence note may not be removed/altered from any source distribution.
*/
#include "JB_Umbrella.hpp"
#include "JB.h"

#pragma GCC visibility push(hidden)
extern "C" {

extern JB_String* JB_LUB[1789];

extern Object_Behaviour JB_Object_FuncTable_;
void JB_InitClassList(SaverLoadClass fn);


void SC___junktest_5____abc(bool g) {
	//visible;
	if ((1234 == 1) or (1234 == 2)) {
		debugger;
	}
	DTWrap* _tmPf0 = JB_Incr(SC___junktest_6____abcvis());
	((int*)JB_Wrap_Value(_tmPf0));
	JB_Decr(_tmPf0);
	if (g) {
		if ((!_once1)) {
			_once1 = true;
			JB_PrintLine(JB_LUB[1]);
		}
	}
	 else {
		if ((!_once2)) {
			_once2 = true;
			JB_PrintLine(JB_LUB[2]);
		}
	}
}

int SC___junktest_5____Init_() {
	{
		SC____junktest_5___x[0] = kSC____junktest_5___a;
		SC____junktest_5___x[1] = kSC____junktest_5___b;
		SC____junktest_5___x[2] = kSC____junktest_5___c;
		//;
	}
	;
	return 0;
}

int SC___junktest_5____InitCode_() {
	return 0;
}



JB_String* JB_App__AppName() {
	JB_String* _tmPf0 = JB_Incr(JB_App__AppPath());
	JB_String* _tmPf1 = JB_Incr(JB_Str_Name(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_App__AppPath() {
	if (JB_Platform__OSX()) {
		JB_String* _tmPf0 = JB_Incr(JB_App__OrigPath());
		JB_String* _tmPf1 = JB_Incr(JB_Str_BackToApp(_tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return JB_App__OrigPath();
}

JB_String* JB_App__conf(JB_String* name) {
	Message* _tmPf0 = JB_Incr(JB_Msg_GetConf(JB__App__Conf, name, false));
	JB_String* _tmPf1 = JB_Incr(JB_Msg_Value(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void JB_App__configureSet(JB_String* Value) {
	JB_SetRef(JB__App__Conf, JB_Str_Parse(Value, JB_SyxArg, true));
	if ((!(JB__App__Conf))) {
		JB_SetRef(JB__App__Conf, JB_Msg__NewBasic());
	}
}

void JB_App__Crash(JB_String* reason) {
	if (JB_Str_Exists(reason)) {
		JB_PrintLine(reason);
	}
	JB_Rec__CrashLog(JB_Str_SyntaxCast(JB_Str_MakeC(JB_LUB[3])));
	(*((byte*)-1)) = 0;
}

JB_StringC* JB_App__CrashLogName() {
	if (JB_Str_Exists(JB__App__CLN)) {
		return JB_Str_CastZero(JB__App__CLN);
	}
	FastString* _fsf0 = JB_FS__New();
	JB_FS_AppendString(_fsf0, JB_LUB[4]);
	JB_FS_AppendString(_fsf0, JB_App__FileName());
	JB_FS_AppendString(_fsf0, JB_LUB[5]);
	return JB_Str_CastZero(JB_FS_GetResult(_fsf0));
}

ErrorInt JB_App__CWDSet(JB_String* Value) {
	return JB_File__chdir(Value);
}

void JB_App__Die(JB_String* Err, int code) {
	if (JB_Str_Exists(Err)) {
		JB_Str_PrintError(Err);
	}
	JB_App__Quit(code);
}

JB_String* JB_App__FileName() {
	JB_String* _tmPf0 = JB_Incr(JB_App__OrigPath());
	JB_String* _tmPf1 = JB_Incr(JB_Str_Name(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_App__Init_() {
	{
		JB__App_Unregistered = false;
		JB_SetRef(JB__App__CLN, JB_App__CrashLogName());
		JB_SetRef(JB__App__Path, JB_LUB[0]);
		JB_SetRef(JB__App_Usage, JB_LUB[6]);
		JB_SetRef(JB__App_codesign_native, JB_LUB[7]);
	}
	;
	return 0;
}

int JB_App__InitCode_() {
	return 0;
}

bool JB_App__IsMainThread() {
	return (!JB_LibIsThreaded());
}

int JB_Main() {
	(JB_App__configureSet(JB___AppConfString));
	//visible;
	JB__Err_AutoPrint = 1;
	SC_Comp__SetupEnv();
	SC_Comp__Main();
	if (SC__AC_Perry != nil) {
		JB_String* _tmPf1 = JB_Incr(JB_int_RenderFS(JB_App__ID(), nil));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[8], _tmPf1));
		JB_Decr(_tmPf1);
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return 0;
}

int64 JB_App__ObjMemory() {
	return JB_MemCount();
}

JB_String* JB_App__OrigPath() {
	//visible;
	if ((!(JB_Str_Exists(JB__App__Path)))) {
		Dictionary* _tmPf0 = JB_Incr(JB_App__Env());
		JB_SetRef(JB__App__Path, ((JB_String*)JB_Dict_ValueStr(_tmPf0, JB_LUB[9])));
		JB_Decr(_tmPf0);
	}
	if ((!(JB_Str_Exists(JB__App__Path)))) {
		JB_SetRef(JB__App__Path, JB_App__Path());
	}
	return JB__App__Path;
}

JB_String* JB_App__Pref(JB_String* s) {
	Message* _tmPf0 = JB_Incr(JB_Msg_GetConf(JB__App_Prefs, s, false));
	JB_String* _tmPf1 = JB_Incr(JB_Msg_Value(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void JB_App__PrefSet(JB_String* s, JB_String* Value) {
	(JB_Msg_SetStr(JB__App_Prefs, s, Value));
}

JB_String* JB_App__pref_path() {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	JB_SetRef(rz, JB_App__conf(JB_LUB[10]));
	if ((!JB_Str_Exists(rz))) {
		JB_Decr(rz);
		return nil;
	}
	if (JB_Str_ByteValue(rz, 0) == '~') {
		JB_SetRef(rz, JB_File_PathFix_(rz));
	}
	if (JB_Str_Equals(rz, JB_LUB[11], true)) {
		JB_SetRef(rz, JB_LUB[0]);
	}
	if (JB_Str_ByteValue(rz, 0) != '/') {
		JB_SetRef(rz, JB_File__AppPrefs(rz));
	}
	if ((!((JB_Str_ByteValue(rz, 0) == '/') or (JB_Str_ByteValue(rz, 0) == '~')))) {
		JB_Str_SyntaxExpect(JB_LUB[12]);
	}
	JB_SafeDecr(rz);
	return rz;
}

void JB_App__PrefsInit(Date when) {
	if (JB__App_Prefs) {
		return;
	}
	JB_String* pref_path = JB_Incr(JB_App__pref_path());
	if ((!JB_Str_Exists(pref_path))) {
		debugger;
		JB_Decr(pref_path);
		return;
	}
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(pref_path));
	JB_Decr(pref_path);
	JB_SetRef(JB__App_Prefs, JB_File_conf(_tmPf0, 1048576));
	JB_Decr(_tmPf0);
	if (when) {
		JB_String* _tmPf1 = JB_Incr(JB_App__Pref(JB_LUB[13]));
		if ((!(JB_Str_Exists(_tmPf1)))) {
			JB_String* _tmPf2 = JB_Incr(JB_Date_Render(when, nil));
			(JB_App__PrefSet(JB_LUB[13], _tmPf2));
			JB_Decr(_tmPf2);
		}
		JB_Decr(_tmPf1);
	}
}

void JB_App__Restart() {
	JB_String* _tmPf0 = JB_Incr(JB_App__OrigPath());
	Array* _tmPf1 = JB_Incr(JB_App__Args());
	JB_App__TurnInto(_tmPf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
}

void JB_App__SavePrefs() {
	if (JB__App_Prefs) {
		JB_config_Save(JB__App_Prefs);
	}
}

JB_String* JB_App__ArgValue(JB_String* name) {
	{
		Array* _LoopSrcf1 = JB_App__Args();
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			JB_String* R = ((JB_String*)JB_Array_Value(_LoopSrcf1, _if0));
			if (JB_Object_HasArgName(R, name)) {
				return JB_Str_ArgValue(R);
			}
			_if0++;
		};
	}
	;
	return JB_LUB[0];
}


AsmReg SC_asmOps__Assign(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_BOR, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 0);
	return dest;
}

AsmReg SC_asmOps__BitAnd(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_BAND, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__BitOr(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_BOR, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__BitXor(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_BXOR, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__Div(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_DIV, 31, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)));
	return dest;
}

AsmReg SC_asmOps__Equals(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_CMPE, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 1, 0);
	return dest;
}

AsmReg SC_asmOps__Less(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_CMPI, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 1);
	return dest;
}

AsmReg SC_asmOps__LessEq(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_CMPI, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 1);
	return dest;
}

AsmReg SC_asmOps__Minus(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_SUB, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__Mod(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_DIV, SC_Reg_ToInt((&dest)), 31, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)));
	return dest;
}

AsmReg SC_asmOps__More(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_CMPI, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 1);
	return dest;
}

AsmReg SC_asmOps__MoreEq(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_CMPI, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 1);
	return dest;
}

AsmReg SC_asmOps__Mul(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_MUL, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__NotEq(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_CMPN, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 1, 0);
	return dest;
}

AsmReg SC_asmOps__Plus(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_ADD, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__ROL(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_BROL, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__ROR(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_BROR, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__SHL(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_SHLS, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__SHR(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_SHRU, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}


AsmReg SC_ASMtmp__Debugger(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_ASMtmp__If(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_ASMtmp__Rejoin(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_ASMtmp__Return(ASMFuncState* self, Message* exp, AsmReg Reg) {
	AsmReg rz = ((AsmReg){});
	Message* f = ((Message*)JB_Ring_First(exp));
	if (f) {
		rz = SC_flat_Reg(self, f, JB_int_Reg(0));
	}
	SC_flat_AddASM(self, exp, kSC__ASM_RET, SC_Reg_ToInt((&rz)), 0, 0, 0);
	return rz;
}

AsmReg SC_ASMtmp__StateExpr(ASMFuncState* self, Message* exp, AsmReg Reg) {
	return ((AsmReg){});
}

AsmReg SC_ASMtmp__While(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}


SCDecl* SC_Comp__AddGlobalConst(JB_String* name, SCClass* c) {
	SCDecl* d = JB_Incr(SC_Decl__New());
	JB_SetRef(d->Type, c);
	(SC_Decl_IsConstSet(d, true));
	JB_SetRef(d->IsLookupOnly, JB_LUB[0]);
	JB_SetRef(d->Name, name);
	JB_SetRef(d->Default, (JB_Syx_Msg(JB_SyxThg, name)));
	SC_Base_TryAdd(SC__Comp_program, nil, d, name);
	JB_SafeDecr(d);
	return d;
}

void SC_Comp__AddMain() {
	Message* m = nil;
	SCFunction* f = JB_Incr(SC_Comp__GetMainFunc(nil));
	if (f) {
		JB_SetRef(m, SC_Base_SourceArg(f));
	}
	 else {
		JB_PrintLine(JB_LUB[14]);
		Message* _tmPf0 = JB_Incr(SC_Base_CollectString(SC__Comp_program, JB_LUB[15]));
		JB_SetRef(m, ((Message*)JB_Ring_Last(_tmPf0)));
		JB_Decr(_tmPf0);
	}
	SC__Options_ProjectIsLibrary = (!f);
	JB_Decr(f);
	if (((bool)m) and ((bool)SC__Comp_ConfMsg)) {
		Message* _tmPf1 = JB_Incr(JB_Str_Parse(JB_LUB[16], JB_SyxArg, true));
		(JB_Ring_FirstSet(m, _tmPf1));
		JB_Decr(_tmPf1);
	}
	JB_Decr(m);
	SCDecl* b = JB_Incr(((SCDecl*)JB_Ternary(SC__Options_ProjectIsLibrary, JB_TrueBool, JB_FalseBool)));
	SC_Base_TryAdd(SC__Comp_program, nil, b, JB_LUB[17]);
	JB_Decr(b);
}

JB_String* SC_Comp__AddSCProj(JB_String* Path) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Name(Path));
	if (JB_Str_ContainsByte(_tmPf0, '.')) {
		JB_Decr(_tmPf0);
		return Path;
	}
	JB_Decr(_tmPf0);
	return JB_Str_OperatorPlus(Path, JB_LUB[18]);
}

void SC_Comp__AddSubProjects(Array* Modules) {
	{
		Array* _LoopSrcf1 = JB_Incr(SC__Comp_ImportedList);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCImport* Imp = JB_Incr(((SCImport*)JB_Array_Value(_LoopSrcf1, _if0)));
			JB_Array_SyntaxAppend(Modules, Imp->Mod);
			JB_Decr(Imp);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	};
}

Dictionary* SC_Comp__Adj(Message* f) {
	Dictionary* d = SC__Comp_AdjDicts;
	if (JB_Msg_EqualsSyx(f, JB_SyxThg, false)) {
		return ((Dictionary*)JB_Dict_Expect(d, f));
	}
	return ((Dictionary*)JB_Dict_ValueStr(d, JB_LUB[19]));
}

void SC_Comp__AppBuildLibs(JB_File* inner) {
	Message* libs = SC_Linkage__conf(JB_LUB[20]);
	if (libs) {
		{
			Message* lib = ((Message*)JB_Tree_First_(libs));
			while (lib) {
				Message* _Nf1 = ((Message*)JB_Ring_NextSib(lib));
				if (JB_Msg_Expect(lib, JB_SyxStr, nil)) {
					SC_Comp__AppBuildOneLib(inner, lib);
				}
				lib = _Nf1;
			};
			(libs);
		};
	}
}

void SC_Comp__AppBuildOneLib(JB_File* inner, Message* lib) {
	JB_File* dir = JB_Incr(JB_Str_AsFile(JB_LUB[21]));
	JB_File* libf = JB_Incr(JB_File_SyntaxAccess(dir, lib->Name, false));
	JB_Decr(dir);
	JB_File* _tmPf1 = JB_Incr(JB_File_Parent(inner));
	JB_File* _tmPf0 = JB_Incr(JB_File_Parent(_tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf3 = JB_Incr(JB_Str_Name(libf));
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[22], _tmPf3));
	JB_Decr(_tmPf3);
	JB_File* ldest = JB_Incr(JB_File_SyntaxAccess(_tmPf0, _tmPf2, false));
	JB_Decr(_tmPf2);
	JB_Decr(_tmPf0);
	if ((!(JB_File_Exists(ldest, false)))) {
		JB_String* _tmPf5 = JB_Incr(JB_File_Path(ldest));
		JB_StringC* _tmPf4 = JB_Incr(JB_Str_CastZero(_tmPf5));
		JB_Decr(_tmPf5);
		JB_File_HardLinkTo(libf, _tmPf4);
		JB_Decr(_tmPf4);
	}
	JB_Decr(ldest);
	JB_Decr(libf);
}

void SC_Comp__AppendCompilerTime(JB_String* s, int Durr) {
	JB_FS_AppendWidth(SC__Comp_TimerOutput, s, kSC__Comp_TimeWidth);
	if (SC_Options__Color()) {
		JB_FS_AppendString(SC__Comp_TimerOutput, kJB__ErrorColors_good);
	}
	JB_FS_AppendDurr(SC__Comp_TimerOutput, Durr);
	if (SC_Options__Color()) {
		JB_FS_AppendString(SC__Comp_TimerOutput, kJB__ErrorColors_normal);
	}
	JB_FS_AppendByte(SC__Comp_TimerOutput, '\n');
}

void SC_Comp__AppleBuildApp(JB_File* project, JB_File* product) {
	JB_String* dest = JB_Incr(JB_File_LinkToGet(product));
	if (JB_Str_Exists(dest)) {
		if ((!false)) {
			JB_Object_Fail(dest, JB_LUB[23]);
		}
		JB_Decr(dest);
		return;
	}
	JB_Decr(dest);
	SC_Comp__Stage(JB_LUB[24]);
	JB_String* name = JB_Incr(SC_Comp__IdealName());
	JB_String* prefered_name = JB_Incr(JB_Str_OperatorPlus(name, JB_LUB[25]));
	JB_File* prefered_app = JB_Incr(JB_File_sibling(product, prefered_name));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[26], prefered_name));
	JB_Decr(prefered_name);
	JB_File* xcode_place = JB_Incr(JB_File_sibling(prefered_app, _tmPf0));
	JB_Decr(_tmPf0);
	JB_File* final_app = JB_Incr(((JB_File*)JB_Ternary(JB_Str_FileExists(xcode_place), xcode_place, prefered_app)));
	JB_Decr(xcode_place);
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[27], name));
	JB_Decr(name);
	JB_File* inner = JB_Incr(JB_File_SyntaxAccess(final_app, _tmPf1, false));
	JB_Decr(_tmPf1);
	if (JB_ErrorInt_SyntaxCast(JB_File_MoveTo(product, inner))) {
		SC_Comp__AppBuildLibs(inner);
		SC_Comp__CodeSign(final_app);
		if (prefered_app != final_app) {
			(JB_File_LinkToSet(prefered_app, final_app));
		}
		JB_SetRef(SC__Options_output_path, prefered_app);
		JB_File_touch(prefered_app);
	}
	JB_Decr(inner);
	JB_Decr(final_app);
	JB_Decr(prefered_app);
}

bool SC_Comp__Banned(JB_String* name) {
	return ((bool)JB_FreeIfDead(((SCClass*)JB_Dict_ValueLower(SC__Options_BannedClasses, name))));
}

JB_String* SC_Comp__BuildErrors(ErrorSeverity MinSev) {
	int Printable = JB_StdErr->ProblemCount + JB_StdErr->ErrorCount;
	if (((bool)Printable) and (MinSev < kJB__ErrorSeverity_Problem)) {
		MinSev = kJB__ErrorSeverity_Problem;
	}
	int Count = 0;
	FastString* msg = JB_Incr(JB_FS__New());
	{
		JB_Error* err = JB_Incr(((JB_Error*)JB_Ring_First(JB_StdErr->Errors)));
		while (err) {
			JB_Error* _Nf1 = JB_Incr(((JB_Error*)JB_Ring_NextSib(err)));
			if (err->Severity >= MinSev) {
				Count++;
				JB_FreeIfDead(JB_Err_SCRender(err, msg));
			}
			JB_SetRef(err, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(err);
	}
	;
	if ((!Count)) {
		int problems = 0;
		{
			JB_Error* err = JB_Incr(((JB_Error*)JB_Ring_First(JB_StdErr->Errors)));
			while (err) {
				JB_Error* _Nf3 = JB_Incr(((JB_Error*)JB_Ring_NextSib(err)));
				if (err->Severity == kJB__ErrorSeverity_Problem) {
					if ((++problems) <= 10) {
						JB_FreeIfDead(JB_Err_SCRender(err, msg));
					}
				}
				JB_SetRef(err, _Nf3);
				JB_Decr(_Nf3);
			};
			JB_Decr(err);
		};
	}
	 else if ((!SC__Options_Perry)) {
		JB_FS_ProblemsFound(msg, Count);
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SyntaxCast(msg));
	JB_Decr(msg);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_File* SC_Comp__BuildFolder() {
	if ((!(JB_File_Exists(SC__Comp__BuildFolder, false)))) {
		JB_Str_MakeDir(SC__Comp__BuildFolder);
	}
	return SC__Comp__BuildFolder;
}

void SC_Comp__CheckIsGoodLibrary() {
	if (SC__Options_ProjectIsLibrary) {
		if ((!SC__Comp_API_Place)) {
			JB_Str_SyntaxExpect(JB_LUB[28]);
			return;
		}
	}
}

void SC_Comp__CheckMaxVars() {
	if ((!SC__Options_CheckMaxVars)) {
		return;
	}
	int V = 0;
	int Used = 0;
	int Args = 0;
	int ArgVersions[10] = {
	};
	{
		Array* _LoopSrcf5 = JB_Incr(SC__Comp_FuncList);
		int _if4 = 0;
		while (_if4 < JB_Array_Size(_LoopSrcf5)) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf5, _if4)));
			if (f->CurrReacher) {
				int N = JB_Array_Size(f->Args);
				V = JB_int_OperatorMax(V, SC_Func_MaxVars(f));
				ArgVersions[JB_int_OperatorMin(N, 9)]++;
				Used++;
				int FP = SC_Func_HasFloatparams(f);
				int RP = SC_Func_HasFloatReturn(f);
				if (((bool)FP) or ((bool)RP)) {
					FastString* _fsf0 = JB_Incr(JB_FS__New());
					JB_String* _tmPf9 = JB_Incr(SC_Func_RenderName(f, nil));
					JB_FS_AppendString(_fsf0, _tmPf9);
					JB_Decr(_tmPf9);
					JB_FS_AppendString(_fsf0, JB_LUB[29]);
					JB_FS_AppendInt32(_fsf0, FP);
					JB_FS_AppendString(_fsf0, JB_LUB[30]);
					JB_FS_AppendInt32(_fsf0, RP);
					JB_FS_AppendString(_fsf0, JB_LUB[31]);
					JB_String* _tmPf10 = JB_Incr(JB_FS_GetResult(_fsf0));
					JB_Decr(_fsf0);
					JB_PrintLine(_tmPf10);
					JB_Decr(_tmPf10);
				}
			}
			JB_Decr(f);
			_if4++;
		};
		JB_Decr(_LoopSrcf5);
	}
	;
	{
		int _LoopSrcf8 = ((10));
		int i = 0;
		while (i < _LoopSrcf8) {
			if (ArgVersions[i]) {
				FastString* _fsf1 = JB_Incr(JB_FS__New());
				JB_FS_AppendInt32(_fsf1, ArgVersions[i]);
				JB_FS_AppendString(_fsf1, JB_LUB[32]);
				JB_FS_AppendInt32(_fsf1, i);
				JB_String* _tmPf11 = JB_Incr(JB_FS_GetResult(_fsf1));
				JB_Decr(_fsf1);
				JB_PrintLine(_tmPf11);
				JB_Decr(_tmPf11);
			}
			i++;
		};
	}
	;
	FastString* _fsf2 = JB_Incr(JB_FS__New());
	JB_FS_AppendInt32(_fsf2, V);
	JB_FS_AppendString(_fsf2, JB_LUB[33]);
	JB_String* _tmPf12 = JB_Incr(JB_FS_GetResult(_fsf2));
	JB_Decr(_fsf2);
	JB_PrintLine(_tmPf12);
	JB_Decr(_tmPf12);
	FastString* _fsf3 = JB_Incr(JB_FS__New());
	JB_FS_AppendInt32(_fsf3, Used);
	JB_FS_AppendString(_fsf3, JB_LUB[34]);
	JB_FS_AppendInt32(_fsf3, JB_Array_Size(SC__Comp_FuncList));
	JB_FS_AppendString(_fsf3, JB_LUB[35]);
	JB_String* _tmPf13 = JB_Incr(JB_FS_GetResult(_fsf3));
	JB_Decr(_fsf3);
	JB_PrintLine(_tmPf13);
	JB_Decr(_tmPf13);
}

void SC_Comp__CodeSign(JB_File* gui_exe) {
	JB_String* sign = JB_Incr(JB_App__Pref(JB_codesign_native));
	if (JB_Str_Exists(sign)) {
		JB_File_CodeSign(gui_exe, sign);
	}
	 else {
		JB_String* _tmPf1 = JB_Incr(JB_File_Path(gui_exe));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[36], _tmPf1));
		JB_Decr(_tmPf1);
		JB_Rec_NewProblem(JB_StdErr, nil, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(sign);
}

void SC_Comp__Collect(Message* m, bool visible) {
	SC_Base_CollectOne(SC__Comp_program, m, visible);
}

bool SC_Comp__CompileAll() {
	if ((!SC_Comp__Stage(JB_LUB[37]))) {
		return nil;
	}
	SC_Comp__InitCompiler();
	SC_Comp__testdate();
	SC_Comp__ImportAll();
	if ((!SC_Comp__Stage(JB_LUB[38]))) {
		return nil;
	}
	SC_Comp__PrepareInterpreter();
	SC_Comp__RefConstructors();
	SC_Comp__CheckIsGoodLibrary();
	if ((!SC_Comp__Stage(JB_LUB[39]))) {
		return nil;
	}
	SC_Comp__DeadCodeStrip();
	if (SC__Options_Cpp) {
		SC_Comp__Timer(JB_LUB[40]);
		if ((!SC_Comp__Stage(JB_LUB[41]))) {
			return nil;
		}
		SC_Comp__DoRefsB();
		SC_Comp__Timer(JB_LUB[42]);
		if (SC_Linkage__Interpreter()) {
			SC_ExecTable__Run();
		}
		SC_Cpp__ExportAllSource();
	}
	SC_Imp__ExportShaders();
	if ((!SC_Comp__Stage(JB_LUB[43]))) {
		return nil;
	}
	SC_Comp__TimerSub(JB_LUB[44], SC__Comp_stParseTimeTotal);
	SC_Comp__Timer(JB_LUB[0]);
	return true;
}

void SC_Comp__CompileTime() {
	if (SC__Options_SelfReplacement) {
		SC_Comp__FileSanityTests();
	}
	JB_File__testjb();
	SC_Sav__Test();
	SC_Comp__PrintCompileTime(({
		Date starttime = JB_Date__Now();
		(SC_Comp__CompileAll());
		 (JB_Date_ago(starttime));
	}));
	if (JB_Rec_OK(JB_StdErr)) {
		SC_Ext__ExtComp();
	}
}

SCClass* SC_Comp__Constpiler(JB_String* name) {
	SCClass* rz = nil;
	JB_SetRef(rz, SC_Comp__AccessStr(name, nil));
	if ((!rz)) {
		JB_Decr(rz);
		return nil;
	}
	(SC_Decl_IsConstSet(rz->TypeNormal, true));
	JB_SafeDecr(rz);
	return rz;
}

void SC_Comp__CreateDisambiguation() {
	JB_SetRef(SC__Comp_DisamClasses, SC_Mod__NewContainer(JB_LUB[45]));
	JB_SetRef(SC__Comp_DisamModules, SC_Mod__NewContainer(JB_LUB[46]));
}

SCFunction* SC_Comp__CreateFuncFromSource(JB_String* Src) {
	SCFunction* rz = nil;
	Message* msg = JB_Incr(JB_Str_ParseClean(Src));
	JB_SetRef(rz, ((SCFunction*)SC_Func__NewFunc(msg, nil, msg)));
	JB_Decr(msg);
	(SC_Base_IsVisibleSet(rz, false));
	JB_SafeDecr(rz);
	return rz;
}

void SC_Comp__CreateRoot() {
	SCImport* Prj = JB_Incr(SC_Imp__New(nil));
	JB_SetRef(SC__Comp_InternalFile->Proj, Prj);
	SCModule* M = JB_Incr(Prj->Mod);
	JB_Decr(Prj);
	JB_SetRef(SC__Comp_program, M);
	JB_SetRef(M->ExportName, JB_LUB[47]);
	JB_SetRef(M->Name, JB_LUB[48]);
	M->Lookup = nil;
	JB_Decr(M);
}

void SC_Comp__DeadCodeStrip() {
	JB_SetRef(SC__Comp_VisibleFuncs, SC_Base__NewStr(JB_LUB[49], false));
	JB_SetRef(SC__Comp_Interpreter, SC_Base__NewStr(JB_LUB[50], false));
	if (SC__Options_ListAllLib) {
		JB_Array_Sort(SC__Comp_FuncList, SC_funcsorter_fn, false);
	}
	{
		SCFunction* __INSID114 = SC_Comp__GetMainFunc(nil);
		if (__INSID114) {
			SC_Func_StripTest(__INSID114);
		}
	}
	;
	{
		Array* _LoopSrcf1 = SC__Comp_FuncList;
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(_LoopSrcf1, _if0));
			SC_Func_StripTest(f);
			_if0++;
		};
	}
	;
	if (SC__Options_ListAllLib) {
		{
			Array* _LoopSrcf4 = SC__Comp_ClassList;
			int _if3 = 0;
			while (_if3 < JB_Array_Size(_LoopSrcf4)) {
				SCClass* c = ((SCClass*)JB_Array_Value(_LoopSrcf4, _if3));
				SC_Class_Reach(c, SC__Comp_Interpreter, nil);
				_if3++;
			};
		};
	}
	{
		Array* _LoopSrcf7 = SC__Comp_ClassList;
		int _if6 = 0;
		while (_if6 < JB_Array_Size(_LoopSrcf7)) {
			SCClass* c = ((SCClass*)JB_Array_Value(_LoopSrcf7, _if6));
			if (c->CurrReacher) {
				SC_Class_ReachBehaviours(c);
			}
			_if6++;
		};
	};
}

void SC_Comp__DoRefsB() {
	{
		Array* _LoopSrcf1 = SC__Comp_FuncList;
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(_LoopSrcf1, _if0));
			if ((!(SC_Func_CanDoRefs(f)))) {
				SC_Func_AnalyseRefsB(f);
			}
			_if0++;
		};
	}
	;
	SC__Refs_ThisFunc = nil;
	SC_Comp__CheckMaxVars();
}

void SC_Comp__DoSavers(int Stage) {
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(SC__Comp_ClassList)) {
			SCClass* c = ((SCClass*)JB_Array_Value(SC__Comp_ClassList, _if0));
			if (SC_Class_IsSaveableObject(c) or SC_Class_IsSaveableStruct(c)) {
				SCFunction* First = SC_Class_DoSaver(c, JB_LUB[51], Stage);
				SCFunction* Second = SC_Class_DoSaver(c, JB_LUB[52], Stage);
				if (((bool)First) != ((bool)Second)) {
					if ((!(First))) {
						First = Second;
					}
					if ((!false)) {
						JB_Msg_SyntaxExpect(First->Source, JB_LUB[53]);
					}
				}
			}
			_if0++;
		};
	};
}

Message* SC_Comp__ErrorsToPerry() {
	SC_Comp__PrePrintErrors();
	JB_String* _tmPf0 = JB_Incr(SC_Comp__BuildErrors(kJB__ErrorSeverity_Problem));
	Message* _tmPf1 = JB_Incr(JB_Str_Parse(_tmPf0, JB_SyxArg, true));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Comp__FileSanityTests() {
	JB_File* A = JB_Incr(JB_Str_AsFile(JB_LUB[54]));
	JB_File* B = JB_Incr(JB_Str_AsFile(JB_LUB[55]));
	JB_String* _tmPf1 = JB_Incr(JB_File_Path(A));
	JB_String* C = JB_Incr(JB_Str_Child(_tmPf1, JB_LUB[56]));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(JB_File_Path(B));
	JB_String* D = JB_Incr(JB_Str_Child(_tmPf2, JB_LUB[56]));
	JB_Decr(_tmPf2);
	{
		int i = 0;
		while (i < 3) {
			if (JB_Rec_OK(JB_StdErr)) {
				SC_Comp__FileTestsSub(A, B, C, D);
			}
			i++;
		};
	}
	;
	JB_Decr(D);
	JB_Decr(C);
	JB_File_DeleteAll(A);
	JB_Decr(A);
	JB_File_DeleteAll(B);
	JB_Decr(B);
}

void SC_Comp__FileTestsSub(JB_File* Dest, JB_File* Src, JB_String* A, JB_String* B) {
	JB_File_DeleteAll(Dest);
	JB_File_DeleteAll(Src);
	if ((!((!JB_File_Exists(Dest, false)) and (!JB_File_Exists(Src, false))))) {
		JB_Str_SyntaxExpect(JB_LUB[57]);
		return;
	}
	JB_File_LinkToSet(Src, Dest);
	JB_Str_SyntaxAppend(A, JB__Constants_Name);
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(B));
	JB_String* ReadBack = JB_Incr(JB_File_ReadAll(_tmPf0, 134217728, true));
	JB_Decr(_tmPf0);
	if ((!(JB_Str_Equals(ReadBack, JB__Constants_Name, false)))) {
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[58], ReadBack));
		JB_Str_SyntaxExpect(_tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(ReadBack);
}

SCClass* SC_Comp__FindClass(JB_String* name, Message* where) {
	SCModule* Mod = JB_Incr(SC_Comp__FindModule(name, where, JB_LUB[59]));
	if ((!Mod)) {
		JB_Decr(Mod);
		return nil;
	}
	SCClass* _tmPf0 = JB_Incr(Mod->Cls);
	JB_Decr(Mod);
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(where, JB_LUB[60]);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

SCClass* SC_Comp__FindClassOK(JB_String* name) {
	SCObject* Obj = JB_Incr(((SCObject*)JB_Dict_ValueLower(SC__Comp_program->Access, name)));
	if (JB_Object_FastIsa(Obj, JB_AsClass(SCModule))) {
		SCClass* _tmPf0 = JB_Incr(((SCModule*)Obj)->Cls);
		JB_Decr(Obj);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(Obj);
	return nil;
}

SCFunction* SC_Comp__FindFunction(JB_String* Name) {
	SCObject* o = JB_Incr(SC_Base_SyntaxAccess(SC__Comp_program, Name));
	if (JB_Object_FastIsa(o, JB_AsClass(SCFunction))) {
		JB_SafeDecr(o);
		return ((SCFunction*)o);
	}
	JB_Decr(o);
	if ((!false)) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[61], Name));
		JB_Object_Fail(nil, _tmPf0);
		JB_Decr(_tmPf0);
	}
	return nil;
}

SCModule* SC_Comp__FindModule(JB_String* name, Message* where, JB_String* ErrMsg) {
	SCObject* Obj = JB_Incr(((SCObject*)JB_Dict_ValueLower(SC__Comp_program->Access, name)));
	if (JB_Object_FastIsa(Obj, JB_AsClass(SCModule))) {
		JB_SafeDecr(Obj);
		return ((SCModule*)Obj);
	}
	if (((bool)where) and (!Obj)) {
		if ((!false)) {
			JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[62], name));
			JB_Msg_SyntaxExpect(where, _tmPf0);
			JB_Decr(_tmPf0);
		}
	}
	 else if (JB_Str_Exists(ErrMsg)) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(where, ErrMsg);
		}
	}
	JB_Decr(Obj);
	return nil;
}

SCModule* SC_Comp__FindModuleMsg(Message* where) {
	return SC_Comp__FindModule(where->Name, where, JB_LUB[63]);
}

SCBase* SC_Comp__FindModuleOrClass(Message* mod, bool retry) {
	SCBase* rz = nil;
	if ((JB_Msg_EqualsSyx(mod, JB_SyxName, false)) and (JB_Msg_SyntaxEquals(mod, JB_LUB[48], false))) {
		return SC__Comp_program;
	}
	SCModule* Module = SC_Comp__FindModule(mod->Name, nil, JB_LUB[64]);
	if ((!Module)) {
		return nil;
	}
	if (JB_Msg_EqualsSyx(mod, JB_SyxThg, false)) {
		rz = Module->Cls;
		if ((!(((bool)rz) or retry))) {
			return nil;
		}
	}
	if ((!(rz))) {
		rz = Module;
	}
	return rz;
}

JB_File* SC_Comp__FindProject(JB_String* Path, bool error) {
	JB_File* p = JB_Incr(JB_File_Parent(SC__Comp_BaseProjectPath));
	JB_File* B = JB_Incr(SC_Comp__FindProjectSub(p, Path));
	JB_Decr(p);
	if (JB_File_SyntaxCast(B)) {
		JB_SafeDecr(B);
		return B;
	}
	JB_Decr(B);
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* A = JB_Incr(SC_Comp__FindProjectSub(_tmPf0, Path));
	JB_Decr(_tmPf0);
	if (JB_File_SyntaxCast(A)) {
		JB_SafeDecr(A);
		return A;
	}
	JB_Decr(A);
	return nil;
}

JB_File* SC_Comp__FindProjectSub(JB_String* base, JB_String* Path) {
	JB_File* rz = nil;
	if (JB_Str_ByteValue(Path, 0) == '/') {
		JB_Decr(rz);
		return JB_Str_ExistingFile(Path, JB_LUB[65]);
	}
	JB_String* First = JB_Incr(Path);
	Ind SlashPos = JB_Str_FindByte(Path, '/', 0, JB_int__max());
	if (JB_Ind_SyntaxCast(SlashPos)) {
		JB_SetRef(First, JB_Str_Range(Path, 0, SlashPos));
	}
	JB_SetRef(First, SC_Comp__AddSCProj(First));
	if (JB_Ind_SyntaxCast(SlashPos)) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(Path, (SlashPos), JB_int__max()));
		JB_SetRef(First, JB_Str_OperatorPlus(First, _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_SetRef(rz, JB_Str_ChildFile(base, First));
	JB_Decr(First);
	if ((!JB_File_Exists(rz, false))) {
		JB_SetRef(rz, nil);
	}
	JB_SafeDecr(rz);
	return rz;
}

JB_String* SC_Comp__FindProjNoSuffix(JB_String* Path) {
	JB_String* spd = JB_Incr(JB_Str_OperatorPlus(Path, JB_LUB[66]));
	if (JB_Str_FileExists(spd)) {
		JB_SafeDecr(spd);
		return spd;
	}
	JB_Decr(spd);
	return JB_Str_OperatorPlus(Path, JB_LUB[18]);
}

JB_String* SC_Comp__FindSpeedieRoot() {
	JB_String* _tmPf1 = JB_Incr(JB_App__Path());
	JB_String* _tmPf0 = JB_Incr(JB_Str_ResolvePath(_tmPf1, false));
	JB_Decr(_tmPf1);
	JB_String* paths = JB_Incr(JB_Str_Parent(_tmPf0));
	JB_Decr(_tmPf0);
	JB_String* srch = JB_Incr(JB_LUB[67]);
	Ind found = JB_Str_InStr(paths, srch, 0, JB_int__max(), true);
	if (JB_Ind_SyntaxCast(found)) {
		JB_String* _tmPf2 = JB_Incr(JB_Str_Range(paths, 0, found + JB_Str_Length(srch)));
		JB_Decr(paths);
		JB_Decr(srch);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_Decr(srch);
	JB_Decr(paths);
	return JB_LUB[68];
}

JB_File* SC_Comp__GeneratedCppsFolder() {
	if ((!SC__Options_ExternalCompile)) {
		return SC__Comp_TempFolder;
	}
	if (SC__Options_SelfReplacement) {
		return SC_Comp__BuildFolder();
	}
	return JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, JB_LUB[69], false);
}

SCFunction* SC_Comp__GetMainFunc(Message* where) {
	SCModule* mod = SC_Comp__FindModule(JB_LUB[70], where, JB_LUB[63]);
	if (mod) {
		SCObject* fn = SC_Base_SyntaxAccess(mod, JB_LUB[48]);
		if (JB_Object_FastIsa(fn, JB_AsClass(SCFunction))) {
			return ((SCFunction*)fn);
		}
	}
	return nil;
}

JB_String* SC_Comp__IdealName() {
	Message* s = JB_Incr(JB_Msg_GetConf(SC__Comp_ConfMsg, JB_LUB[71], false));
	if (s) {
		JB_String* _tmPf1 = JB_Incr(s->Name);
		JB_Decr(s);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	JB_String* _tmPf0 = JB_Incr(SC_Ext__ProductName());
	JB_Decr(s);
	JB_String* _tmPf2 = JB_Incr(JB_Str_TrimExtAndPath(_tmPf0, true));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void SC_Comp__ImportAll() {
	SC_Comp__Timer(JB_LUB[72]);
	if ((!SC_Comp__Stage(JB_LUB[73]))) {
		return;
	}
	SC_Comp__ImportLibs();
	SC_Comp__ImportProj();
	SC_VM_Builder__Run();
	if (JB_File_SyntaxCast(SC__VM_Builder_vm_file)) {
		SC_Instruction__InitAll();
	}
	Array* List = JB_Incr((JB_Array__New0()));
	JB_Array_SyntaxAppend(List, SC__Comp_InternalFile);
	{
		Array* _LoopSrcf1 = JB_Incr(SC__Comp_ImportedList);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCImport* Imp = JB_Incr(((SCImport*)JB_Array_Value(_LoopSrcf1, _if0)));
			{
				Array* _LoopSrcf4 = JB_Incr(Imp->Files);
				int _if3 = 0;
				while (_if3 < JB_Array_Size(_LoopSrcf4)) {
					SCFile* F = JB_Incr(((SCFile*)JB_Array_Value(_LoopSrcf4, _if3)));
					JB_Array_SyntaxAppend(List, F);
					JB_Decr(F);
					_if3++;
				};
				JB_Decr(_LoopSrcf4);
			}
			;
			JB_Decr(Imp);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[74]))) {
		JB_Decr(List);
		return;
	}
	SC_Comp__Timer(JB_LUB[74]);
	{
		int _if6 = 0;
		while (_if6 < JB_Array_Size(List)) {
			SCFile* L = JB_Incr(((SCFile*)JB_Array_Value(List, _if6)));
			SC_Imp_Use(L->Proj);
			SC_Base_ImportFile(SC__Comp_program, L);
			JB_Decr(L);
			if ((!JB_Rec_OK(JB_StdErr))) {
				JB_Decr(List);
				return;
			}
			_if6++;
		};
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[75]))) {
		JB_Decr(List);
		return;
	}
	if ((!SC_Comp__InitBasicStuff())) {
		JB_Decr(List);
		return;
	}
	SC_Comp__AddMain();
	JB__Tk_InsertedFlags = kJB__MsgUIFlags_Inserted;
	SC_Imp__NoProj();
	{
		Array* _LoopSrcf9 = JB_Incr(SC__Comp_ClassList);
		int _if8 = 0;
		while (_if8 < JB_Array_Size(_LoopSrcf9)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf9, _if8)));
			SC_Class_TryAddToProject(c);
			JB_Decr(c);
			SC_ASM__CreateASMProperties();
			_if8++;
		};
		JB_Decr(_LoopSrcf9);
	}
	;
	SC_ASM__TestASM();
	if ((!SC_Comp__Stage(JB_LUB[76]))) {
		JB_Decr(List);
		return;
	}
	{
		Message* _LoopSrcf13 = JB_Incr(SC__Comp_Extend_list);
		Message* l = JB_Incr(((Message*)JB_Tree_First_(_LoopSrcf13)));
		while (l) {
			Message* _Nf12 = JB_Incr(((Message*)JB_Ring_NextSib(l)));
			SC_Class__ProcessExtend(l, true);
			JB_SetRef(l, _Nf12);
			JB_Decr(_Nf12);
		};
		JB_Decr(l);
		(_LoopSrcf13);
		JB_Decr(_LoopSrcf13);
	}
	;
	{
		Array* _LoopSrcf15 = JB_Incr(SC__Comp_Extend_module_list);
		int _if14 = 0;
		while (_if14 < JB_Array_Size(_LoopSrcf15)) {
			Message* l = JB_Incr(((Message*)JB_Array_Value(_LoopSrcf15, _if14)));
			SC_Class__ProcessExtend(l, false);
			JB_Decr(l);
			_if14++;
		};
		JB_Decr(_LoopSrcf15);
	}
	;
	if ((!SC_Comp__InitBasicFuncs())) {
		JB_Decr(List);
		return;
	}
	JB_SetRef(SC__Comp_ModuleList, SC_ListModules(SC__Comp_program->Access));
	SC_Comp__AddSubProjects(SC__Comp_ModuleList);
	JB_Array_SyntaxAppend(SC__Comp_ModuleList, SC__Comp_program);
	if ((!SC_Comp__Stage(JB_LUB[77]))) {
		JB_Decr(List);
		return;
	}
	{
		Array* _LoopSrcf18 = JB_Incr(SC__Comp_ClassList);
		int _if17 = 0;
		while (_if17 < JB_Array_Size(_LoopSrcf18)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf18, _if17)));
			SC_Class_AddInterfacesTo(c, SC__Comp_ModuleList);
			JB_Decr(c);
			_if17++;
		};
		JB_Decr(_LoopSrcf18);
	}
	;
	{
		Array* _LoopSrcf21 = JB_Incr(SC__Comp_ClassList);
		int _if20 = 0;
		while (_if20 < JB_Array_Size(_LoopSrcf21)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf21, _if20)));
			SC_Class_CreateBehaviour(c);
			JB_Decr(c);
			_if20++;
		};
		JB_Decr(_LoopSrcf21);
	}
	;
	{
		Array* _LoopSrcf24 = JB_Incr(SC__Comp_ClassList);
		int _if23 = 0;
		while (_if23 < JB_Array_Size(_LoopSrcf24)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf24, _if23)));
			SC_Class_LoadSuperclass(c);
			JB_Decr(c);
			_if23++;
		};
		JB_Decr(_LoopSrcf24);
	}
	;
	if ((!JB_Rec_OK(JB_StdErr))) {
		JB_Decr(List);
		return;
	}
	SC_Comp__SortModules();
	SC_Comp__OrderClassList();
	{
		Array* _LoopSrcf27 = JB_Incr(SC__Comp_ClassList);
		int _if26 = 0;
		while (_if26 < JB_Array_Size(_LoopSrcf27)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf27, _if26)));
			SC_Class_DataTypePostLoad(c);
			JB_Decr(c);
			_if26++;
		};
		JB_Decr(_LoopSrcf27);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[78]))) {
		JB_Decr(List);
		return;
	}
	{
		Array* _LoopSrcf30 = JB_Incr(SC__Comp_ClassList);
		int _if29 = 0;
		while (_if29 < JB_Array_Size(_LoopSrcf30)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf30, _if29)));
			SC_Class_GetDepth(c);
			SC_Class_LoadSaver(c);
			JB_Decr(c);
			_if29++;
		};
		JB_Decr(_LoopSrcf30);
	}
	;
	SC_Comp__DoSavers(0);
	{
		Array* _LoopSrcf33 = JB_Incr(SC__Comp_ClassList);
		int _if32 = 0;
		while (_if32 < JB_Array_Size(_LoopSrcf33)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf33, _if32)));
			SC_Class_ProcessBehaviours(c);
			JB_Decr(c);
			_if32++;
		};
		JB_Decr(_LoopSrcf33);
	}
	;
	if ((!JB_Rec_OK(JB_StdErr))) {
		JB_Decr(List);
		return;
	}
	{
		Array* _LoopSrcf36 = JB_Incr(SC__Comp_ClassList);
		int _if35 = 0;
		while (_if35 < JB_Array_Size(_LoopSrcf36)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf36, _if35)));
			SC_Class_ProcessInterfaces(c);
			JB_Decr(c);
			_if35++;
		};
		JB_Decr(_LoopSrcf36);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[79]))) {
		JB_Decr(List);
		return;
	}
	{
		Array* _LoopSrcf39 = JB_Incr(SC__Comp_ClassList);
		int _if38 = 0;
		while (_if38 < JB_Array_Size(_LoopSrcf39)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf39, _if38)));
			SC_Class_LoadContainedType(c);
			JB_Decr(c);
			_if38++;
		};
		JB_Decr(_LoopSrcf39);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[80]))) {
		JB_Decr(List);
		return;
	}
	{
		Array* _LoopSrcf42 = JB_Incr(SC__Comp_ClassList);
		int _if41 = 0;
		while (_if41 < JB_Array_Size(_LoopSrcf42)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf42, _if41)));
			SC_Class_LoadProperties(c);
			JB_Decr(c);
			if (SC_TooManyErrors()) {
				JB_Decr(List);
				JB_Decr(_LoopSrcf42);
				return;
			}
			_if41++;
		};
		JB_Decr(_LoopSrcf42);
	}
	;
	SC_Comp__SortModules();
	{
		Array* _LoopSrcf45 = JB_Incr(SC__Comp_ClassList);
		int _if44 = 0;
		while (_if44 < JB_Array_Size(_LoopSrcf45)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf45, _if44)));
			SC_Class_CalculateSize(c, 0);
			JB_Decr(c);
			_if44++;
		};
		JB_Decr(_LoopSrcf45);
	}
	;
	{
		Array* _LoopSrcf48 = JB_Incr(SC__Comp_ClassList);
		int _if47 = 0;
		while (_if47 < JB_Array_Size(_LoopSrcf48)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf48, _if47)));
			SC_Imp_Use(c->Project);
			SC_Class_LoadConstructorsAndAllocators(c);
			JB_Decr(c);
			_if47++;
		};
		JB_Decr(_LoopSrcf48);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[81]))) {
		JB_Decr(List);
		return;
	}
	{
		Array* _LoopSrcf51 = JB_Incr(SC__Comp_ClassList);
		int _if50 = 0;
		while (_if50 < JB_Array_Size(_LoopSrcf51)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf51, _if50)));
			SC_Imp_Use(c->Project);
			SC_Class_MoreConstantCollection(c);
			JB_Decr(c);
			_if50++;
		};
		JB_Decr(_LoopSrcf51);
	}
	;
	SC_Imp__NoProj();
	{
		int _if53 = 0;
		while (_if53 < JB_Array_Size(List)) {
			SCFile* f = JB_Incr(((SCFile*)JB_Array_Value(List, _if53)));
			SC_SCFile_Use(f);
			SC_Base_CollectConstants(SC__Comp_program, f->LiveAST, f->Proj);
			JB_Decr(f);
			_if53++;
		};
	}
	;
	{
		Array* _LoopSrcf56 = JB_Incr(SC__Comp_ModuleList);
		int _if55 = 0;
		while (_if55 < JB_Array_Size(_LoopSrcf56)) {
			SCModule* m = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf56, _if55)));
			SC_Base_Use(m);
			SC_Base_CollectConstants(m, m->Source, m->Project);
			JB_Decr(m);
			_if55++;
		};
		JB_Decr(_LoopSrcf56);
	}
	;
	JB_ClassData_Restore((JB_AsClass(Message)));
	SC_Imp__NoProj();
	if (SC__Comp_API_Place) {
		Message* Proj = JB_Incr(JB_Msg_NeedSyx(SC__Comp_API_Place, JB_SyxThg));
		{
			Array* _LoopSrcf59 = JB_Incr(SC__Comp_API_List);
			int _if58 = 0;
			while (_if58 < JB_Array_Size(_LoopSrcf59)) {
				Message* m = JB_Incr(((Message*)JB_Array_Value(_LoopSrcf59, _if58)));
				SC_SC_API__DelayedClassAPI(m, Proj->Name);
				JB_Decr(m);
				_if58++;
			};
			JB_Decr(_LoopSrcf59);
		}
		;
		JB_Decr(Proj);
	}
	SC_Comp__DoSavers(1);
	if ((!SC_Comp__Stage(JB_LUB[82]))) {
		JB_Decr(List);
		return;
	}
	{
		Array* _LoopSrcf62 = JB_Incr(SC__Comp_ClassList);
		int _if61 = 0;
		while (_if61 < JB_Array_Size(_LoopSrcf62)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf62, _if61)));
			SC_Base_Use(c);
			SC_Base_LoadExportName(c);
			JB_Decr(c);
			_if61++;
		};
		JB_Decr(_LoopSrcf62);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[83]))) {
		JB_Decr(List);
		return;
	}
	SC_Comp__LoadInits();
	SC_Imp__NoProj();
	if ((!SC_Comp__Stage(JB_LUB[84]))) {
		JB_Decr(List);
		return;
	}
	{
		Array* _LoopSrcf65 = JB_Incr(SC__Comp_ProtoTypes);
		int _if64 = 0;
		while (_if64 < JB_Array_Size(_LoopSrcf65)) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf65, _if64)));
			JB_SetRef(SC__Func_CurrFunc, f);
			SC_Func_FuncDecls(f);
			JB_Decr(f);
			_if64++;
		};
		JB_Decr(_LoopSrcf65);
	}
	;
	JB_SetRef(SC__Func_CurrFunc, nil);
	if ((!JB_Rec_OK(JB_StdErr))) {
		JB_Decr(List);
		return;
	}
	if ((!JB_Rec_OK(JB_StdErr))) {
		JB_Decr(List);
		return;
	}
	SC_Comp__DoSavers(2);
	if ((!SC_Comp__Stage(JB_LUB[85]))) {
		JB_Decr(List);
		return;
	}
	{
		Array* _LoopSrcf68 = JB_Incr(SC__Comp_FuncList);
		int _if67 = 0;
		while (_if67 < JB_Array_Size(_LoopSrcf68)) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf68, _if67)));
			JB_SetRef(SC__Func_CurrFunc, f);
			SC_Func_FuncDecls(f);
			SC_Base_LoadExportName(f);
			JB_Decr(f);
			if (SC_TooManyErrors()) {
				JB_Decr(List);
				JB_Decr(_LoopSrcf68);
				return;
			}
			_if67++;
		};
		JB_Decr(_LoopSrcf68);
	}
	;
	JB_SetRef(SC__Func_CurrFunc, nil);
	if ((!SC_Comp__Stage(JB_LUB[86]))) {
		JB_Decr(List);
		return;
	}
	{
		Array* _LoopSrcf71 = JB_Incr(SC__Comp_ClassList);
		int _if70 = 0;
		while (_if70 < JB_Array_Size(_LoopSrcf71)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf71, _if70)));
			JB_SetRef(c->ExportName, SC_Class_JSStructName(c));
			SC_Class_AfterFuncsDecled(c);
			JB_Decr(c);
			_if70++;
		};
		JB_Decr(_LoopSrcf71);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[87]))) {
		JB_Decr(List);
		return;
	}
	{
		Array* _LoopSrcf74 = JB_Incr(SC__Comp_ModuleList);
		int _if73 = 0;
		while (_if73 < JB_Array_Size(_LoopSrcf74)) {
			SCModule* m = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf74, _if73)));
			SC_Mod_InitDecls(m);
			JB_Decr(m);
			_if73++;
		};
		JB_Decr(_LoopSrcf74);
	}
	;
	{
		int _if76 = 0;
		while (_if76 < JB_Array_Size(List)) {
			SCFile* F = JB_Incr(((SCFile*)JB_Array_Value(List, _if76)));
			SC_SCFile_Decls(F, SC__Comp_program);
			JB_Decr(F);
			_if76++;
		};
	}
	;
	JB_Decr(List);
	SC_Imp__NoProj();
	JB_ClassData_Restore((JB_AsClass(Message)));
	if ((!SC_Comp__Stage(JB_LUB[88]))) {
		return;
	}
	{
		Array* _LoopSrcf79 = JB_Incr(SC__Comp_ClassList);
		int _if78 = 0;
		while (_if78 < JB_Array_Size(_LoopSrcf79)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf79, _if78)));
			SC_Class_AfterAfterFuncs(c);
			JB_Decr(c);
			_if78++;
		};
		JB_Decr(_LoopSrcf79);
	}
	;
	SC_Comp__Stage(JB_LUB[89]);
	{
		Array* _LoopSrcf82 = JB_Incr(SC__Comp_ModuleList);
		int _if81 = 0;
		while (_if81 < JB_Array_Size(_LoopSrcf82)) {
			SCModule* m = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf82, _if81)));
			if (m != SC__Comp_program) {
				SC_Mod_BaseDecls(m);
				SC_Mod_FillDisposeFunc(m);
			}
			JB_Decr(m);
			_if81++;
		};
		JB_Decr(_LoopSrcf82);
	}
	;
	SC_Comp__Stage(JB_LUB[90]);
	{
		Array* _LoopSrcf85 = JB_Incr(SC__Comp_ModuleList);
		int _if84 = 0;
		while (_if84 < JB_Array_Size(_LoopSrcf85)) {
			SCModule* m = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf85, _if84)));
			SC_Mod_RenameVars(m);
			if (m->Cls) {
				SC_Class_RenameInterfaces(m->Cls);
			}
			JB_Decr(m);
			_if84++;
		};
		JB_Decr(_LoopSrcf85);
	}
	;
	{
		Array* _LoopSrcf88 = JB_Incr(SC_SortInitOrder(SC__Comp_ModuleList));
		int _if87 = 0;
		while (_if87 < JB_Array_Size(_LoopSrcf88)) {
			SCModule* m = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf88, _if87)));
			SC_Mod_DelayedInitFuncTransform(m);
			JB_Decr(m);
			_if87++;
		};
		JB_Decr(_LoopSrcf88);
	}
	;
	SC_Comp__PostInitCodeCall();
	SC_Comp__Stage(JB_LUB[91]);
	{
		Array* _LoopSrcf91 = JB_Incr(SC__Comp_FuncList);
		int _if90 = 0;
		while (_if90 < JB_Array_Size(_LoopSrcf91)) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf91, _if90)));
			if (f->ProtoDecl) {
				JB_SetRef(f->ProtoDecl->Name, f->ExportName);
			}
			JB_Decr(f);
			_if90++;
		};
		JB_Decr(_LoopSrcf91);
	}
	;
	SC_Comp__Stage(JB_LUB[92]);
	{
		Array* _LoopSrcf94 = JB_Incr(SC__Comp_ClassList);
		int _if93 = 0;
		while (_if93 < JB_Array_Size(_LoopSrcf94)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf94, _if93)));
			SC_Class_CheckIterator(c);
			JB_Decr(c);
			_if93++;
		};
		JB_Decr(_LoopSrcf94);
	}
	;
	SC_Comp__Timer(JB_LUB[93]);
	SC_Comp__Stage(JB_LUB[94]);
	{
		Array* _LoopSrcf97 = JB_Incr(SC__Comp_FuncList);
		int _if96 = 0;
		while (_if96 < JB_Array_Size(_LoopSrcf97)) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf97, _if96)));
			if (SC_TooManyErrors()) {
				JB_Decr(_LoopSrcf97);
				JB_Decr(f);
				return;
			}
			SC_Func_CheckNotBadName(f);
			SC_Func_Transform(f);
			JB_Decr(f);
			SC__Comp_stFunctionProgress++;
			_if96++;
		};
		JB_Decr(_LoopSrcf97);
	}
	;
	SC_Comp__Stage(JB_LUB[95]);
	{
		Array* _LoopSrcf100 = JB_Incr(SC__Comp_FuncList);
		int _if99 = 0;
		while (_if99 < JB_Array_Size(_LoopSrcf100)) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf100, _if99)));
			SC_Func_PostTransform(f);
			JB_Decr(f);
			_if99++;
		};
		JB_Decr(_LoopSrcf100);
	};
}

void SC_Comp__ImportLibs() {
	SC__Imp_STDLibTime = true;
	JB_File* _tmPf0 = JB_Incr(SC_Comp__Library());
	SC_Imp__ImportPath(JB_LUB[96], _tmPf0, 1);
	JB_Decr(_tmPf0);
	JB_File* _tmPf1 = JB_Incr(SC_Comp__Jeebox());
	SC_Imp__ImportPath(JB_LUB[97], _tmPf1, 1);
	JB_Decr(_tmPf1);
}

void SC_Comp__ImportProj() {
	SC__Imp_STDLibTime = false;
	SC_Imp__ImportPath(JB_LUB[0], SC__Comp_BaseProjectPath, 0);
}

int SC_Comp__Init_() {
	{
		JB_SetRef(SC__Comp_OriginalInputPath, JB_LUB[0]);
		JB_SetRef(SC__Comp__Projects, JB_LUB[0]);
		JB_SetRef(SC__Comp__SpeedieProj, JB_LUB[0]);
		JB_SetRef(SC__Comp_InternalFile, SC_SCFile__New(nil));
		JB_SetRef(SC__Comp_ProjectName, JB_LUB[0]);
		JB_SetRef(SC__Comp_ReportedName, JB_LUB[0]);
		JB_SetRef(SC__Comp_ImportedList, JB_Array__New0());
		JB_SetRef(SC__Comp_ClassList, JB_Array__New0());
		JB_SetRef(SC__Comp_ModuleList, JB_Array__New0());
		JB_SetRef(SC__Comp_FuncList, JB_Array__New0());
		JB_SetRef(SC__Comp_ProtoTypes, JB_Array__New0());
		JB_SetRef(SC__Comp_AdjDicts, JB_Dict__New());
		JB_SetRef(SC__Comp_SyxArray, JB_Array__New0());
		JB_SetRef(SC__Comp_API_List, JB_Array__New0());
		JB_SetRef(SC__Comp_API_Funcs, JB_Array__New0());
		JB_SetRef(SC__Comp_Extend_module_list, JB_Array__New0());
		SC__Comp_HasMainFunc = false;
		SC__Comp_stClasses = 0;
		SC__Comp_stFuncs = 0;
		SC__Comp_stReachedFunc = 0;
		SC__Comp_stReachedClass = 0;
		SC__Comp_stFunctionProgress = 0;
		SC__Comp_stParseTime = 0;
		SC__Comp_stTotalSourceSize = 0;
		SC__Comp_stTotalFileCount = 0;
		SC__Comp_stParseTimeTotal = 0;
		SC__Comp_CurrStage = 0;
		SC__Comp_LastTime = 0;
		JB_SetRef(SC__Comp_LastTimeName, JB_LUB[0]);
	}
	;
	return 0;
}

bool SC_Comp__InitBasicFuncs() {
	JB_SetRef(SC__Comp_RefSetRef, SC_Comp__LoadRefFunc(JB_LUB[98]));
	JB_SetRef(SC__Comp_RefIncr, SC_Comp__LoadRefFunc(JB_LUB[99]));
	JB_SetRef(SC__Comp_RefDecr, SC_Comp__LoadRefFunc(JB_LUB[100]));
	JB_SetRef(SC__Comp_RefFreeIfDead, SC_Comp__LoadRefFunc(JB_LUB[101]));
	JB_SetRef(SC__Comp_RefSafeDecr, SC_Comp__LoadRefFunc(JB_LUB[102]));
	JB_SetRef(SC__Comp_TernaryFunc, SC_Comp__FindFunction(JB_LUB[103]));
	JB_SetRef(SC__Comp_PrivateProperty, SC_Comp__CreateFuncFromSource(JB_LUB[104]));
	return JB_Rec_OK(JB_StdErr);
}

bool SC_Comp__InitBasicStuff() {
	JB_ClassData_Restore((JB_AsClass(Message)));
	if ((!(JB_Rec_OK(JB_StdErr)))) {
		JB_Str_SyntaxExpect(JB_LUB[105]);
		return nil;
	}
	SC_Cpp__SyntaxAccess(JB_LUB[0]);
	SC__Options_ListAllLib = SC_Linkage__Interpreter();
	SC_Comp__InitTypes();
	if ((!JB_Rec_OK(JB_StdErr))) {
		return nil;
	}
	JB_SetRef(JB_TypeNil, SC_Comp__AddGlobalConst(JB_LUB[106], JB_TypeObject));
	JB_SetRef(JB_TrueBool, SC_Comp__AddGlobalConst(JB_LUB[107], JB_TypeBool));
	JB_SetRef(JB_FalseBool, SC_Comp__AddGlobalConst(JB_LUB[108], JB_TypeBool));
	SCDecl* _tmPf0 = JB_Incr(SC_Comp__AddGlobalConst(JB_LUB[109], JB_TypeInt));
	JB_SetRef(_tmPf0->IsLookupOnly, (JB_Syx_IntMsg(JB_SyxNum, JB_Date__TimeID())));
	JB_Decr(_tmPf0);
	SCDecl* _tmPf1 = JB_Incr(SC_Comp__AddGlobalConst(JB_LUB[110], JB_TypeDate));
	JB_SetRef(_tmPf1->IsLookupOnly, (JB_Syx_IntMsg(JB_SyxNum, JB_Date__Now())));
	JB_Decr(_tmPf1);
	SCDecl* _tmPf2 = JB_Incr(SC_Comp__AddGlobalConst(JB_LUB[111], JB_Typef64));
	JB_SetRef(_tmPf2->IsLookupOnly, (JB_Syx_Msg(JB_SyxNum, JB_LUB[112])));
	JB_Decr(_tmPf2);
	SCDecl* _tmPf3 = JB_Incr(SC_Comp__AddGlobalConst(JB_LUB[113], JB_Typef64));
	JB_SetRef(_tmPf3->IsLookupOnly, (JB_Syx_Msg(JB_SyxNum, JB_LUB[114])));
	JB_Decr(_tmPf3);
	return JB_Rec_OK(JB_StdErr);
}

int SC_Comp__InitCode_() {
	return 0;
}

void SC_Comp__InitCompiler() {
	JB_String* _tmPf1 = JB_Incr(SC_Comp__Projects());
	JB_File* _tmPf0 = JB_Incr(JB_Str_ChildFile(_tmPf1, JB_LUB[96]));
	JB_Decr(_tmPf1);
	if ((!(JB_File_MustExist(_tmPf0, JB_LUB[0])))) {
		JB_Decr(_tmPf0);
		return;
	}
	JB_Decr(_tmPf0);
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	SC_Opp__Init();
	SC_Cpp__Init();
	if ((!(SC__Comp_Files))) {
		JB_SetRef(SC__Comp_Files, JB_Dict__New());
	}
	JB_SetRef(SC__Comp_ExportNames, JB_Dict__New());
	JB_SetRef(SC__Comp_TimerOutput, JB_FS__New());
	JB_FS_AppendByte(SC__Comp_TimerOutput, '\n');
	JB_SetRef(SC__Comp_ImportedNames, JB_Dict__New());
	SC__Comp_CurrStage = 1;
	SC__Comp_stReachedClass = 0;
	SC__Comp_stParseTimeTotal = 0;
	SC__Comp_stReachedFunc = 0;
	SC__SC_UniqueNum = 100;
	SC__Comp_stClasses = 0;
	SC__Comp_stFuncs = 0;
	SC__Comp_stFunctionProgress = 0;
	if (JB_Str_Exists(SC__Options_SingleFileInput)) {
		JB_SetRef(SC__Comp__BuildFolder, SC__Comp_BaseProjectPath);
	}
	 else {
		JB_String* _tmPf3 = JB_Incr(SC_Comp__VariantSuffix());
		JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[115], _tmPf3));
		JB_Decr(_tmPf3);
		JB_SetRef(SC__Comp__BuildFolder, JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, _tmPf2, false));
		JB_Decr(_tmPf2);
	}
	JB_String* _tmPf4 = JB_Incr(SC_Ext__ProjTmpPath());
	JB_SetRef(SC__Comp_TempFolder, JB_Str_AsFile(_tmPf4));
	JB_Decr(_tmPf4);
	JB_Str_MakeEntirePath(SC__Comp_TempFolder, true);
	JB_File* _tmPf5 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_Str_MakeEntirePath(_tmPf5, true);
	JB_Decr(_tmPf5);
	SC_Comp__CreateRoot();
	SC_Comp__CreateDisambiguation();
}

void SC_Comp__InitTypes() {
	JB_SetRef(JB_TypeInt, SC_Comp__Constpiler(JB_LUB[116]));
	JB_SetRef(JB_TypeInt16, SC_Comp__Constpiler(JB_LUB[117]));
	JB_SetRef(JB_TypeInt64, SC_Comp__Constpiler(JB_LUB[118]));
	JB_SetRef(JB_TypeuInt, SC_Comp__Constpiler(JB_LUB[119]));
	JB_SetRef(JB_TypeuInt16, SC_Comp__Constpiler(JB_LUB[120]));
	JB_SetRef(JB_TypeuInt64, SC_Comp__Constpiler(JB_LUB[121]));
	JB_SetRef(JB_Typef64, SC_Comp__Constpiler(JB_LUB[122]));
	JB_SetRef(JB_Typef32, SC_Comp__Constpiler(JB_LUB[123]));
	JB_SetRef(JB_Typehfloat, SC_Comp__Constpiler(JB_LUB[124]));
	JB_SetRef(JB_Typefloat, JB_Typef32);
	JB_SetRef(JB_TypeBool, SC_Comp__Constpiler(JB_LUB[125]));
	JB_SetRef(JB_TypeString, SC_Comp__Constpiler(JB_LUB[126]));
	JB_SetRef(JB_TypeByte, SC_Comp__Constpiler(JB_LUB[127]));
	JB_SetRef(JB_TypeCharSet, SC_Comp__Constpiler(JB_LUB[128]));
	JB_SetRef(JB_TypeVec2, SC_Comp__Constpiler(JB_LUB[129]));
	JB_SetRef(JB_TypeVec3, SC_Comp__Constpiler(JB_LUB[130]));
	JB_SetRef(JB_TypeVec4, SC_Comp__Constpiler(JB_LUB[131]));
	JB_SetRef(JB_TypeiVec2, SC_Comp__Constpiler(JB_LUB[132]));
	JB_SetRef(JB_TypeiVec3, SC_Comp__Constpiler(JB_LUB[133]));
	JB_SetRef(JB_TypeiVec4, SC_Comp__Constpiler(JB_LUB[134]));
	JB_SetRef(JB_TypeDate, SC_Comp__Constpiler(JB_LUB[135]));
	JB_SetRef(JB_TypeJBClass, SC_Comp__AccessStr(JB_LUB[136], nil));
	JB_SetRef(JB_TypeObject, SC_Comp__AccessStr(JB_LUB[137], nil));
	JB_SetRef(JB_TypeSyntax, SC_Comp__AccessStr(JB_LUB[138], nil));
	JB_SetRef(JB_TypeVoidPtr, SC_Comp__AccessStr(JB_LUB[139], nil));
	JB_SetRef(JB_TypeVoid_, SC_Comp__AccessStr(JB_LUB[140], nil));
	JB_SetRef(JB_TypeWrapper, SC_Comp__AccessStr(JB_LUB[141], nil));
	JB_SetRef(JB_TypeDictionary, SC_Comp__AccessStr(JB_LUB[142], nil));
	JB_SetRef(JB_TypeFastString, SC_Comp__AccessStr(JB_LUB[143], nil));
	JB_SetRef(JB_TypeArray, SC_Comp__AccessStr(JB_LUB[144], nil));
	JB_SetRef(JB_TypeSaveable, SC_Comp__AccessStr(JB_LUB[145], nil));
	JB_SetRef(JB_TypeVoid, JB_TypeVoid_->TypeNormal);
	JB_TypeString->HasSubClass = true;
}

JB_File* SC_Comp__InputFile(JB_File* Default, JB_String* s, Message* where) {
	JB_File* rz = nil;
	if (JB_Str_ContainsString(s, JB_LUB[146])) {
		JB_Msg_SyntaxExpect(where, JB_LUB[147]);
		return nil;
	}
	int best = JB_int__max();
	{
		Array* _LoopSrcf1 = SC__Comp_ImportedList;
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCImport* imp = ((SCImport*)JB_Array_Value(_LoopSrcf1, _if0));
			if (imp->Depth < best) {
				JB_File* f = JB_File_SyntaxAccess(imp->InputFolder, s, false);
				if (JB_File_Exists(f, false)) {
					rz = f;
					best = imp->Depth;
				}
			}
			_if0++;
		};
	}
	;
	if ((rz == nil) and (Default != nil)) {
		if ((!(JB_File_SyntaxCast(rz)))) {
			rz = JB_File_SyntaxAccess(Default, s, false);
		}
	}
	return rz;
}

bool SC_Comp__IsTest() {
	JB_String* _tmPf0 = JB_Incr(JB_App__FileName());
	bool _tmPf1 = JB_Str_ContainsString(_tmPf0, JB_LUB[148]);
	JB_Decr(_tmPf0);
	return (_tmPf1);
}

JB_File* SC_Comp__Jeebox() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* _tmPf1 = JB_Incr(JB_Str_ChildFile(_tmPf0, JB_LUB[149]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_File* SC_Comp__Library() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* _tmPf1 = JB_Incr(JB_Str_ChildFile(_tmPf0, JB_LUB[96]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Comp__LoadInits() {
	{
		Array* _LoopSrcf1 = JB_Incr(SC__Comp_ModuleList);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCModule* m = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf1, _if0)));
			SC_Base_Use(m);
			SC_Base_LoadExportName(m);
			SC_Mod_LoadInitFunc(m);
			JB_Decr(m);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	};
}

SCFunction* SC_Comp__LoadRefFunc(JB_String* name) {
	SCFunction* o = JB_Incr(SC_Comp__FindFunction(name));
	if ((!o)) {
		JB_Decr(o);
		return nil;
	}
	o->AllocCode = kSC_IsReffer;
	JB_SafeDecr(o);
	return o;
}

void SC_Comp__Main() {
	if ((!SC_Comp__TryVariousStartModes()) and SC_FB__ParseArgs()) {
		if ((!SC_AC__Enter())) {
			SC_Comp__CompileTime();
		}
	}
	SC_Comp__PrintStats();
	if ((!JB_Rec_OK(JB_StdErr))) {
		JB_String* _tmPf1 = JB_Incr(SC_Comp__Projects());
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[150], _tmPf1));
		JB_Decr(_tmPf1);
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	SC_Comp__PrintCompileErrors();
}

SCBase* SC_Comp__NewConf(Message* node, SCBase* name_space, Message* ErrPlace) {
	if (SC__Comp_ConfMsg) {
		JB_Msg_SyntaxExpect(node, JB_LUB[151]);
		return nil;
	}
	Message* conf = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxArg));
	if (conf) {
		JB_Tree_Remove(conf);
		JB_SetRef(SC__Comp_ConfMsg, conf);
		JB_String* _tmPf1 = JB_Incr(JB_Msg_Render(conf, nil));
		Message* _tmPf0 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxStr, _tmPf1));
		JB_Decr(_tmPf1);
		Message* x = JB_Incr(SC_MakeDecl(JB_LUB[0], JB_LUB[152], _tmPf0));
		JB_Decr(_tmPf0);
		JB_Msg_BecomeMsg(node, x);
		JB_Decr(x);
		SC_Mod_MoveToInitFunc(SC__Comp_program, node);
		JB_Decr(conf);
		return SC__Comp_program;
	}
	JB_Decr(conf);
	return nil;
}

void SC_Comp__OrderClassList() {
	JB_Array_Clear(SC__Comp_ClassList);
	{
		Array* _LoopSrcf2 = JB_Incr(SC__Comp_ModuleList);
		int _if1 = 0;
		while (_if1 < JB_Array_Size(_LoopSrcf2)) {
			SCModule* m = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf2, _if1)));
			SCClass* _tmPf0 = JB_Incr(m->Cls);
			JB_Decr(m);
			if ((!_tmPf0)) {
				_if1++;
				JB_Decr(_tmPf0);
				continue;
			}
			JB_Array_SyntaxAppend(SC__Comp_ClassList, (_tmPf0));
			JB_Decr(_tmPf0);
			_if1++;
		};
		JB_Decr(_LoopSrcf2);
	};
}

void SC_Comp__Package() {
	if ((!((!SC_Comp__IsTest()) and (!SC__Options_ExternalCompile)))) {
		return;
	}
	if ((!SC_Targets__SyntaxAccess(JB_LUB[153]))) {
		return;
	}
	JB_String* Pd = JB_Incr(SC_Ext__ProductPath());
	JB_String* Pj = JB_Incr(JB_File_Path(SC__Comp_BaseProjectPath));
	if (JB_Platform__OSX()) {
		JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(Pj));
		JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(Pd));
		SC_Comp__AppleBuildApp(_tmPf0, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Pj);
	JB_Decr(Pd);
}

void SC_Comp__PostInitCodeCall() {
	Message* _tmPf0 = JB_Incr(JB_Str_ParseClean(JB_LUB[154]));
	JB_Tree_SyntaxAppend(SC__Comp_program->InitVarsArg, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_Comp__PrepareInterpreter() {
	if ((!SC__Options_ListAllLib)) {
		return;
	}
}

void SC_Comp__PrePrintErrors() {
	{
		JB_Error* _LoopSrcf2 = JB_Incr(JB_StdErr->Errors);
		JB_Error* err = JB_Incr(((JB_Error*)JB_Tree_First_(_LoopSrcf2)));
		while (err) {
			JB_Error* _Nf1 = JB_Incr(((JB_Error*)JB_Ring_NextSib(err)));
			JB_Err_Improve(err);
			JB_SetRef(err, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(err);
		(_LoopSrcf2);
		JB_Decr(_LoopSrcf2);
	}
	;
	if ((!(SC__Options_KeepAllErrors))) {
		{
			JB_Error* _LoopSrcf5 = JB_Incr(JB_StdErr->Errors);
			JB_Error* err = JB_Incr(((JB_Error*)JB_Tree_First_(_LoopSrcf5)));
			while (err) {
				JB_Error* _Nf4 = JB_Incr(((JB_Error*)JB_Ring_NextSib(err)));
				if ((!(SC_Errors__SyntaxAccess(err)))) {
					JB_Tree_Remove(err);
				}
				JB_SetRef(err, _Nf4);
				JB_Decr(_Nf4);
			};
			JB_Decr(err);
			(_LoopSrcf5);
			JB_Decr(_LoopSrcf5);
		};
	}
}

void SC_Comp__PrintCompileErrors() {
	if ((!JB_Rec_Problems(JB_StdErr))) {
		return;
	}
	SC_Comp__PrePrintErrors();
	if (SC__Func_DisabledPoints) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[155]);
		JB_FS_AppendInt32(_fsf0, SC__Func_DisabledPoints);
		JB_FS_AppendString(_fsf0, JB_LUB[156]);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Str_PrintlineColor(_tmPf1, kJB__ErrorColors_error);
		JB_Decr(_tmPf1);
	}
	ErrorSeverity MinSev = ((ErrorSeverity)JB_Ternary(SC__Options_Warnings, kJB__ErrorSeverity_Warning, ((ErrorSeverity)kJB__ErrorSeverity_Problem)));
	SC_Comp__PrintErrors(MinSev);
	JB_Rec_Clear(JB_StdErr);
}

void SC_Comp__PrintCompileTime(Date durr) {
	if (JB_Rec_OK(JB_StdErr) and (!SC__Options_Silent)) {
		JB_Str_Print(JB_LUB[157]);
		JB_String* _tmPf2 = JB_Incr(JB_int_RenderFS(SC_Comp__ReachedClassCount(), nil));
		JB_Str_PrintlineColor(_tmPf2, kJB__ErrorColors_good);
		JB_Decr(_tmPf2);
		JB_Str_Print(JB_LUB[158]);
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendInt32(_fsf0, SC_Comp__Reachedfuncs());
		JB_FS_AppendString(_fsf0, JB_LUB[159]);
		JB_FS_AppendInt32(_fsf0, JB_Array_Size(SC__Comp_FuncList));
		JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Str_PrintlineColor(_tmPf3, kJB__ErrorColors_good);
		JB_Decr(_tmPf3);
		JB_Str_Print(JB_LUB[160]);
		JB_String* _tmPf4 = JB_Incr(JB_Date_RenderDurr(durr, nil));
		JB_Str_PrintlineColor(_tmPf4, kJB__ErrorColors_good);
		JB_Decr(_tmPf4);
		JB_Str_Print(JB_LUB[161]);
		FastString* _fsf1 = JB_Incr(JB_FS__New());
		JB_FS_AppendInt32(_fsf1, SC__Comp_stTotalSourceSize / 1024);
		JB_FS_AppendString(_fsf1, JB_LUB[162]);
		JB_String* _tmPf5 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		JB_Str_PrintColor(_tmPf5, kJB__ErrorColors_good);
		JB_Decr(_tmPf5);
	}
}

void SC_Comp__PrintErrors(ErrorSeverity MinSev) {
	JB_StdErr->BlockErrors = true;
	JB_String* s = JB_Incr(SC_Comp__BuildErrors(MinSev));
	JB_StdErr->BlockErrors = false;
	if (SC__Options_Perry == 2) {
		JB_SetRef(s, JB_Str_digest(s));
	}
	if (JB_StdErr->ErrorCount) {
		JB_Str_PrintError(s);
	}
	 else {
		JB_Str_Print(s);
	}
	JB_Decr(s);
}

void SC_Comp__PrintStats() {
	if ((!SC__Options_ArgStats)) {
		return;
	}
	FastString* fs = JB_Incr(JB_FS__New());
	JB_FS_AppendString(fs, JB_LUB[163]);
	{
		int i = 0;
		while (i < 12) {
			int c = SC__Func_FuncStats[i];
			if (c) {
				if (i) {
					JB_FS_AppendString(fs, JB_LUB[164]);
				}
				//;
				JB_FS_AppendInt32(fs, i);
				JB_FS_AppendByte(fs, ':');
				JB_FS_AppendInt32(fs, c);
				//;
			}
			i++;
		};
	}
	;
	JB_Obj_PrintLine(fs);
	JB_Decr(fs);
}

JB_String* SC_Comp__Projects() {
	return ({
		JB_String* _X = JB_Incr(SC__Comp__Projects);
		if ((!JB_Str_Exists(_X))) {
			JB_SetRef(_X, SC_Comp__FindSpeedieRoot());
			JB_SetRef(SC__Comp__Projects, _X);
		}
		JB_SafeDecr(_X);
		 _X;
	});
}

bool SC_Comp__Reached(JB_String* s) {
	SCClass* obj = JB_Incr(SC_Comp__AccessStr(s, nil));
	if (obj) {
		SCBase* _tmPf0 = JB_Incr(obj->CurrReacher);
		JB_Decr(obj);
		JB_SafeDecr(_tmPf0);
		return ((bool)_tmPf0);
	}
	JB_Decr(obj);
	return false;
}

int SC_Comp__ReachedClassCount() {
	int rz = 0;
	{
		Array* _LoopSrcf1 = SC__Comp_ClassList;
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf1, _if0));
			rz = (rz + (((bool)C->CurrReacher) and SC_Class_IsObject(C)));
			_if0++;
		};
	}
	;
	return rz;
}

int SC_Comp__Reachedfuncs() {
	int rz = 0;
	{
		Array* _LoopSrcf1 = SC__Comp_FuncList;
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(_LoopSrcf1, _if0));
			rz = (rz + (f->CurrReacher != nil));
			_if0++;
		};
	}
	;
	return rz;
}

void SC_Comp__RefConstructors() {
	{
		Array* _LoopSrcf1 = SC__Comp_FuncList;
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(_LoopSrcf1, _if0));
			if ((!(SC_Func_CanDoRefs(f)))) {
				SC_Func_AnalyseRefsConstructors(f);
			}
			_if0++;
		};
	}
	;
	SC__Refs_ThisFunc = nil;
}

bool SC_Comp__ScriptRecompile(JB_File* f, JB_File* script_build) {
	if ((!JB_File_Exists(script_build, false))) {
		return true;
	}
	if (JB_File_Modified(script_build) < JB_File_Modified(f)) {
		return true;
	}
	return false;
}

void SC_Comp__SetupEnv() {
	if ((!(JB_Str_Exists(JB_App__pref_path())))) {
		JB_Str_SyntaxExpect(JB_LUB[165]);
	}
	if (JB_Arg_SyntaxCast(JB_App__ArgValue(JB_LUB[166])) and JB_App__IsMainThread()) {
		JB_Pipe__Ignore(-1);
		(JB_App__CrashInstall((&JB_Proc__TellParentIDied)));
	}
	JB_App__PrefsInit(JB_Date__Now());
	JB_ErrorColors__DisableIfNoTerminal();
}

void SC_Comp__SortModules() {
	Array* NewList = JB_Incr(JB_Array__New0());
	{
		Array* _LoopSrcf1 = JB_Incr(SC__Comp_ModuleList);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCModule* m = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf1, _if0)));
			m->Grabbed = false;
			if ((!m->Cls)) {
				SCModule* _tmPf3 = JB_Incr(SC_Mod_Grab(m));
				JB_Array_SyntaxAppend(NewList, _tmPf3);
				JB_Decr(_tmPf3);
			}
			JB_Decr(m);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	SC_Comp__SortModulesSub(kSC__SCBaseType_DataType, NewList);
	SC_Comp__SortModulesSub(kSC__SCBaseType_FuncProto, NewList);
	SC_Comp__SortModulesSub(kSC__SCBaseType_Struct, NewList);
	SC_Comp__SortModulesBase(NewList);
	SC_Comp__SortModulesSub(kSC__SCBaseType_Object, NewList);
	if ((!(JB_Array_Size(SC__Comp_ModuleList) == JB_Array_Size(NewList)))) {
		JB_Str_SyntaxExpect(JB_LUB[167]);
		JB_Decr(NewList);
		return;
	}
	JB_SetRef(SC__Comp_ModuleList, NewList);
	JB_Decr(NewList);
}

void SC_Comp__SortModulesBase(Array* NewList) {
	SCModule* _tmPf3 = JB_Incr(SC_Mod_Grab(JB_TypeObject->Modul));
	JB_Array_SyntaxAppend(NewList, _tmPf3);
	JB_Decr(_tmPf3);
	{
		Array* _LoopSrcf1 = JB_Incr(SC__Comp_ModuleList);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCModule* m = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf1, _if0)));
			if (SC_Mod_CanGrabBase(m, false)) {
				SCModule* _tmPf4 = JB_Incr(SC_Mod_Grab(m));
				JB_Array_SyntaxAppend(NewList, _tmPf4);
				JB_Decr(_tmPf4);
			}
			JB_Decr(m);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	};
}

void SC_Comp__SortModulesSub(SCBaseType TypeWanted, Array* NewList) {
	int i = 0;
	bool TryAgain = false;
	int LoopCount = 0;
	while (JB_Array_Size(NewList) < JB_Array_Size(SC__Comp_ModuleList)) {
		if ((!((++LoopCount) < 2000))) {
			JB_Str_SyntaxExpect(JB_LUB[168]);
			return;
		}
		SCModule* m = JB_Incr(((SCModule*)JB_Array_Value(SC__Comp_ModuleList, i)));
		SCClass* c = JB_Incr(m->Cls);
		if (((!m->Grabbed)) and ((SC_Class_EqualsType(c, TypeWanted, false)))) {
			if (SC_Mod_OKToSort(m)) {
				JB_Array_SyntaxAppend(NewList, m);
			}
			 else {
				TryAgain = true;
			}
		}
		JB_Decr(c);
		JB_Decr(m);
		i++;
		if (i > (JB_Array_Size(SC__Comp_ModuleList) - 1)) {
			if ((!TryAgain)) {
				return;
			}
			TryAgain = false;
			i = 0;
		}
	};
}

JB_File* SC_Comp__Speedie() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* _tmPf1 = JB_Incr(JB_Str_ChildFile(_tmPf0, JB_LUB[169]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Comp__SpeedieProj() {
	return ({
		JB_String* _X = JB_Incr(SC__Comp__SpeedieProj);
		if ((!JB_Str_Exists(_X))) {
			JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
			JB_SetRef(_X, JB_Str_SyntaxAccess(_tmPf0, JB_LUB[169]));
			JB_Decr(_tmPf0);
			JB_SetRef(SC__Comp__SpeedieProj, _X);
		}
		JB_SafeDecr(_X);
		 _X;
	});
}

bool SC_Comp__Stage(JB_String* name) {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return nil;
	}
	if (SC__Options_PrintStages) {
		JB_String* space = JB_Incr(((JB_String*)JB_Ternary(SC__Comp_CurrStage <= 9, JB_LUB[170], JB_LUB[0])));
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendByte(_fsf0, ' ');
		JB_FS_AppendInt32(_fsf0, SC__Comp_CurrStage);
		JB_FS_AppendString(_fsf0, space);
		JB_Decr(space);
		JB_FS_AppendString(_fsf0, JB_LUB[171]);
		JB_FS_AppendString(_fsf0, name);
		JB_FS_AppendString(_fsf0, JB_LUB[172]);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
	SC__Comp_CurrStage++;
	return true;
}

SCClass* SC_Comp__AccessStr(JB_String* name, Message* where) {
	return SC_Comp__FindClass(name, where);
}

SCClass* SC_Comp__SyntaxAccess(Message* name) {
	if (name) {
		return SC_Comp__FindClass(name->Name, name);
	}
	return nil;
}

void SC_Comp__SyntaxAppend(Message* m) {
	JB_Tree_SyntaxAppend(SC__Comp_InternalFile->LiveAST, m);
}

void SC_Comp__testdate() {
	int64 day = 5662310400;
	int64 hour = 235929600;
	int64 min = 3932160;
	int64 sec = 64 * 1024;
	if (sec != 65536) {
		debugger;
	}
	if (min != 3932160) {
		debugger;
	}
	if (hour != 235929600) {
		debugger;
	}
	if (day != 5662310400) {
		debugger;
	}
}

void SC_Comp__Timer(JB_String* name) {
	Date Curr = JB_Date__Now();
	if (SC__Comp_LastTime) {
		SC_Comp__TimerSub(SC__Comp_LastTimeName, ((int)(Curr - SC__Comp_LastTime)));
	}
	if ((!JB_Str_Exists(name)) and (!SC__Options_Silent)) {
		JB_Obj_Print(SC__Comp_TimerOutput);
	}
	JB_SetRef(SC__Comp_LastTimeName, name);
	SC__Comp_LastTime = JB_Date__Now();
}

void SC_Comp__TimerSub(JB_String* s, int Durr) {
	Durr = (Durr - SC__Comp_stParseTime);
	SC__Comp_stParseTimeTotal = (SC__Comp_stParseTimeTotal + SC__Comp_stParseTime);
	SC__Comp_stParseTime = 0;
	SC_Comp__AppendCompilerTime(s, Durr);
}

bool SC_Comp__TryVariousStartModes() {
	if (SC__AC_ShouldEnter) {
		return nil;
	}
	Array* _tmPf0 = JB_Incr(JB_App__Args());
	JB_String* p = JB_Incr(((JB_String*)JB_Array_Value(_tmPf0, 0)));
	JB_Decr(_tmPf0);
	if ((!(JB_Str_Exists(p) and ((!({
		JB_String* _tmP271 = JB_Incr(JB_Str_ArgName(p));
		bool _tmP270 = JB_Str_Exists(_tmP271);
		JB_Decr(_tmP271);
		 _tmP270;
	})) and (!({
		JB_String* _tmP273 = JB_Incr(JB_App__ArgValue(JB_LUB[173]));
		bool _tmP272 = JB_Arg_SyntaxCast(_tmP273);
		JB_Decr(_tmP273);
		 _tmP272;
	})))))) {
		JB_Decr(p);
		return nil;
	}
	JB_File* f = JB_Incr(JB_Str_AsFile(p));
	JB_Decr(p);
	JB_File* it = JB_Incr(SC_Comp__usingScript(f));
	if ((!JB_File_SyntaxCast(it))) {
		JB_Decr(f);
		JB_Decr(it);
		return nil;
	}
	JB_String* cwd = JB_Incr(JB_File__CWD());
	if (SC_Comp__ScriptRecompile(f, it)) {
		SC_Comp__CompileTime();
	}
	if (JB_File_Exists(it, false) and JB_Rec_OK(JB_StdErr)) {
		(JB_App__CWDSet(cwd));
		JB_StringC* _tmPf1 = JB_Incr(JB_Str_CastZero(JB_LUB[9]));
		JB_StringC* _tmPf2 = JB_Incr(JB_Str_CastZero(f));
		(JB_App__SetEnv(_tmPf1, _tmPf2));
		JB_Decr(_tmPf2);
		JB_Decr(_tmPf1);
		JB_String* _tmPf3 = JB_Incr(JB_File_Path(it));
		Array* _tmPf4 = JB_Incr(JB_App__Args());
		JB_App__TurnInto(_tmPf3, _tmPf4);
		JB_Decr(_tmPf4);
		JB_Decr(_tmPf3);
	}
	JB_Decr(cwd);
	JB_Decr(it);
	JB_Decr(f);
	return true;
}

JB_File* SC_Comp__usingScript(JB_File* f) {
	JB_File* rz = nil;
	if (JB_File_IsDir(f)) {
		JB_Decr(rz);
		return nil;
	}
	JB_String* _tmPf0 = JB_Incr(JB_File_Read(f, 16, true));
	if ((!JB_Str_OperatorStarts(_tmPf0, JB_LUB[174]))) {
		JB_Decr(rz);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_Decr(_tmPf0);
	JB_String* _tmPf3 = JB_Incr(JB_File_Path(f));
	JB_String* _tmPf2 = JB_Incr(SC_FB__TryUseProject(_tmPf3, true));
	JB_Decr(_tmPf3);
	JB_String* _tmPf1 = JB_Incr(JB_Str_ScriptLocation(_tmPf2, JB_LUB[175]));
	JB_Decr(_tmPf2);
	JB_SetRef(rz, JB_Str_AsFile(_tmPf1));
	JB_Decr(_tmPf1);
	if ((!JB_File_SyntaxCast(rz))) {
		JB_Decr(rz);
		return nil;
	}
	JB__Err_AutoPrint = 0;
	SC__Options_Scripting = true;
	SC__Options_Silent = true;
	SC__Options_PrintCompileString = false;
	SC__Options_OperationCount++;
	Array* _tmPf4 = JB_Incr(JB_App__Args());
	JB_Array_Remove(_tmPf4, 0);
	JB_Decr(_tmPf4);
	JB_SafeDecr(rz);
	return rz;
}

JB_String* SC_Comp__VariantSuffix() {
	if ((SC__Options_SelfReplacement == kSC_SelfReplace) and SC__Options_Compile) {
		return JB_Str_OperatorPlus(JB_LUB[148], SC__Options_Variant);
	}
	return SC__Options_Variant;
}



void JB_ErrorColors__DisableIfNoTerminal() {
	JB__ErrorColors_Enabled = JB_Pipe__StdOutIsTerminal();
}

int JB_ErrorColors__Init_() {
	{
		JB__ErrorColors_Enabled = false;
	}
	;
	return 0;
}

int JB_ErrorColors__InitCode_() {
	return 0;
}



void SC_ExecTable__AddAll(Array* fl, bool WantLib) {
	{
		Array* _LoopSrcf1 = SC__Comp_FuncList;
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(_LoopSrcf1, _if0));
			if (SC_Func_CanLibLoad(f) == WantLib) {
				SC_Base_Addtotable(f, fl);
			}
			_if0++;
		};
	};
}

JB_File* SC_ExecTable__FuncFile() {
	JB_File* _tmPf0 = JB_Incr(SC_Comp__Library());
	JB_File* _tmPf1 = JB_Incr(JB_File_Child(_tmPf0, JB_LUB[176], false));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_ExecTable__FuncStr(FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	{
		Array* _LoopSrcf1 = JB_Incr(SC__ExecTable_Funcs);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf1, _if0)));
			JB_FS_AppendString(fs, f->ExportName);
			JB_Decr(f);
			JB_FS_AppendByte(fs, '\n');
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	JB_String* _tmPf3 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

int SC_ExecTable__Init_() {
	{
		JB_SetRef(SC__ExecTable_Funcs, JB_Array__New0());
		JB_SetRef(SC__ExecTable_Globs, JB_Array__New0());
	}
	;
	return 0;
}

int SC_ExecTable__InitCode_() {
	return 0;
}

void SC_ExecTable__Run() {
	SC_ExecTable__AddAll(SC__ExecTable_Funcs, true);
	JB_File* _tmPf0 = JB_Incr(SC_ExecTable__FuncFile());
	JB_String* _tmPf1 = JB_Incr(SC_ExecTable__FuncStr(nil));
	(JB_File_SmartDataSet(_tmPf0, _tmPf1));
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
}


bool SC_Ext__AllowedThisFile(JB_String* name) {
	if ((!SC__Options_ProjectIsMiniLib)) {
		return true;
	}
	if ((JB_Str_Equals(name, JB_LUB[177], true)) or ((JB_Str_Equals(name, JB_LUB[178], true)) or ((JB_Str_Equals(name, JB_LUB[179], true)) or ((JB_Str_Equals(name, JB_LUB[180], true)) or ((JB_Str_Equals(name, JB_LUB[181], true)) or ((JB_Str_Equals(name, JB_LUB[182], true)) or (JB_Str_Equals(name, JB_LUB[183], true)))))))) {
		return false;
	}
	return true;
}

bool SC_Ext__BackupCompiler() {
	JB_String* _tmPf0 = JB_Incr(SC_Ext__ProductPath());
	JB_File* Product = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_Incr(SC_Ext__BackupPath());
	JB_File* B = JB_Incr(JB_Str_AsFile(_tmPf1));
	JB_Decr(_tmPf1);
	JB_Str_MakeEntirePath(B, true);
	JB_File* backup1 = JB_Incr(JB_File_SyntaxAccess(B, JB_LUB[184], false));
	if (JB_File_MatchFile(backup1, Product)) {
		JB_Decr(Product);
		JB_Decr(B);
		JB_Decr(backup1);
		return true;
	}
	SC_Ext__ReplaceOld(Product, B);
	JB_Str_CopyFileTo(Product, backup1, false);
	JB_Decr(backup1);
	JB_String* DailyProduct = JB_Incr(SC_Ext__MakeDailyProductPath(B));
	JB_Decr(B);
	JB_String* path = JB_Incr(JB_Str_TrimExtAndPath(DailyProduct, true));
	JB_Str_CopyFileTo(Product, DailyProduct, false);
	JB_Decr(DailyProduct);
	JB_Decr(Product);
	JB_File* _tmPf2 = JB_Incr(SC_Cpp__CppProduct());
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(path, JB_LUB[185]));
	JB_File_CopyAll(_tmPf2, _tmPf3, false);
	JB_Decr(_tmPf3);
	JB_Decr(_tmPf2);
	JB_File* _tmPf4 = JB_Incr(SC_Cpp__HProduct());
	JB_String* _tmPf5 = JB_Incr(JB_Str_OperatorPlus(path, JB_LUB[186]));
	JB_Decr(path);
	JB_File_CopyAll(_tmPf4, _tmPf5, false);
	JB_Decr(_tmPf5);
	JB_Decr(_tmPf4);
	return JB_Rec_OK(JB_StdErr);
}

JB_String* SC_Ext__BackupPath() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_String* _tmPf1 = JB_Incr(JB_Str_Child(_tmPf0, JB_LUB[187]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool SC_Ext__CanCompile(JB_String* name) {
	return ({
		JB_String* _tmP243 = JB_Incr(JB_Str_Ext(name));
		bool _tmP242 = JB_Str_isCLike(_tmP243);
		JB_Decr(_tmP243);
		 _tmP242;
	}) and SC_Ext__AllowedThisFile(name);
}

bool SC_Ext__Clean() {
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(JB_LUB[188]));
	JB_File_DeleteAll(_tmPf0);
	JB_Decr(_tmPf0);
	JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(JB_LUB[189]));
	JB_File_DeleteAll(_tmPf1);
	JB_Decr(_tmPf1);
	return JB_Rec_OK(JB_StdErr);
}

void SC_Ext__ClearThis() {
	if (JB_Rec_OK(JB_StdErr)) {
		{
			Array* _LoopSrcf1 = JB_Incr(SC__Ext_Cleanup);
			int _if0 = 0;
			while (_if0 < JB_Array_Size(_LoopSrcf1)) {
				JB_File* F = JB_Incr(((JB_File*)JB_Array_Value(_LoopSrcf1, _if0)));
				JB_File_DeleteAll(F);
				JB_Decr(F);
				_if0++;
			};
			JB_Decr(_LoopSrcf1);
		};
	}
	JB_Array_Clear(SC__Ext_Cleanup);
	JB_Array_Clear(SC__Ext_FoundObjects);
}

bool SC_Ext__CollectAndCompile(JB_File* Input, JB_String* Output) {
	JB_File* TmpFol = JB_Incr(JB_Str_MakeAndGoInto(Output));
	Array* Cpps = JB_Incr(SC_Ext__CollectCppsInto(Input, TmpFol, nil));
	JB_Decr(TmpFol);
	bool _tmPf0 = SC_Ext__ExtCompile(Cpps, JB_LUB[190], JB_LUB[191]) and (SC_Ext__ExtCompile(Cpps, JB_LUB[190], JB_LUB[192]) and SC_Ext__ExtCompile(Cpps, JB_LUB[190], JB_LUB[193]));
	JB_Decr(Cpps);
	return _tmPf0;
}

Array* SC_Ext__CollectCppsInto(JB_File* Fol, JB_File* Objects, int* stdafx) {
	Array* Cpps = JB_Incr(JB_Array__New0());
	{
		JB_File_ListStart(Fol);
		while (JB_File_MoveNext(Fol)) {
			JB_String* name = JB_Incr(JB_File_CurrChild(Fol));
			if (SC_Ext__CanCompile(name)) {
				JB_String* _tmPf2 = JB_Incr(JB_File_Path(Fol));
				JB_String* _tmPf1 = JB_Incr(JB_Str_Child(_tmPf2, name));
				JB_Decr(_tmPf2);
				JB_Array_SyntaxAppend(Cpps, _tmPf1);
				JB_Decr(_tmPf1);
			}
			JB_Decr(name);
		};
		JB_File_ListEnd(Fol);
	}
	;
	Array* _tmPf3 = JB_Incr(SC_Ext__FilterCppsIfAlreadyDone(Cpps, Objects, stdafx));
	JB_Decr(Cpps);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

JB_File* SC_Ext__CppLib() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* _tmPf1 = JB_Incr(JB_Str_ChildFile(_tmPf0, JB_LUB[194]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Array* SC_Ext__CreateCompileString(Array* CppList, JB_String* Product, JB_String* Type) {
	Array* rz = JB_Incr(((Array*)JB_Array__New0()));
	JB_Array_AppendWords(rz, Product);
	JB_String* cmode = JB_Incr(JB_LUB[195]);
	if ((JB_Str_Equals(Type, JB_LUB[192], false)) or ((JB_Str_Equals(Type, JB_LUB[196], false)) or (JB_Str_Equals(Type, JB_LUB[193], false)))) {
		if (JB_Str_Equals(Type, JB_LUB[193], false)) {
			JB_SetRef(cmode, JB_Str_OperatorPlus(cmode, JB_LUB[197]));
		}
		 else {
			JB_SetRef(cmode, JB_LUB[0]);
		}
		JB_SetRef(cmode, JB_Str_OperatorPlus(cmode, JB_LUB[198]));
	}
	JB_String* _tmPf3 = JB_Incr(((JB_String*)JB_Ternary(SC__Options_Is32Bit, JB_LUB[199], JB_LUB[200])));
	JB_Array_AppendWords(rz, _tmPf3);
	JB_Decr(_tmPf3);
	JB_Array_AppendWords(rz, JB_LUB[201]);
	JB_Array_AppendWords(rz, JB_LUB[202]);
	JB_Array_AppendWords(rz, JB_LUB[203]);
	if (JB_Platform__OSX()) {
		JB_Array_AppendWords(rz, JB_LUB[204]);
		if (SC_Targets__SyntaxAccess(JB_LUB[153]) or SC_Linkage__Interpreter()) {
			JB_Array_AppendWords(rz, JB_LUB[205]);
		}
		JB_Array_AppendWords(rz, JB_LUB[206]);
	}
	JB_Array_AppendWords(rz, JB_LUB[207]);
	JB_Array_AppendWords(rz, JB_LUB[208]);
	JB_Array_AppendWords(rz, cmode);
	JB_Decr(cmode);
	JB_Array_AppendWords(rz, JB_LUB[209]);
	JB_String* _tmPf5 = JB_Incr(JB_Platform());
	JB_String* _tmPf4 = JB_Incr(SC_Linkage__SyntaxAccess(_tmPf5));
	JB_Decr(_tmPf5);
	JB_Array_AppendWords(rz, _tmPf4);
	JB_Decr(_tmPf4);
	JB_Array_AppendWords(rz, JB_LUB[210]);
	if (JB_Platform__OSX()) {
		if (SC__Ext_CompilingLibFiles) {
			SC_Ext__MacBothArch(rz);
		}
		 else if (JB_Str_Equals(SC__Options_Arch, JB_LUB[211], true)) {
			if (SC__Options_Optimise >= 3) {
				JB_Array_AppendWords(rz, JB_LUB[212]);
			}
		}
		 else {
			SC_Ext__MacBothArch(rz);
		}
	}
	JB_Array_AppendWords(rz, JB_LUB[213]);
	int opt = SC__Options_Optimise;
	bool aslib = SC__Options_MakeLib or SC__Options_ProjectIsLibrary;
	if (aslib) {
		JB_Array_AppendWords(rz, JB_LUB[214]);
		opt = 3;
	}
	if (((bool)SC__Options_SelfReplacement) or aslib) {
		JB_Array_AppendWords(rz, JB_LUB[215]);
	}
	if (opt < 0) {
		JB_Array_AppendWords(rz, JB_LUB[216]);
	}
	 else if (opt >= 1) {
		JB_Array_AppendWords(rz, JB_LUB[217]);
		if (JB_Str_Equals(SC__Options_Arch, JB_LUB[211], true)) {
			JB_Array_AppendWords(rz, JB_LUB[218]);
		}
		if (opt >= 2) {
			JB_Array_AppendWords(rz, JB_LUB[219]);
		}
	}
	JB_File* cppl = JB_Incr(SC_Ext__CppLib());
	if (SC__Options_ProjectIsMiniLib) {
		JB_Array_AppendWords(rz, JB_LUB[220]);
	}
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[221]);
	JB_FS_AppendString(_fsf0, cppl);
	JB_Decr(cppl);
	JB_FS_AppendString(_fsf0, JB_LUB[222]);
	JB_File* _tmPf6 = JB_Incr(SC_Comp__BuildFolder());
	JB_FS_AppendString(_fsf0, _tmPf6);
	JB_Decr(_tmPf6);
	JB_FS_AppendString(_fsf0, JB_LUB[223]);
	JB_File* _tmPf7 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_FS_AppendString(_fsf0, _tmPf7);
	JB_Decr(_tmPf7);
	JB_FS_AppendString(_fsf0, JB_LUB[224]);
	JB_String* _tmPf8 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_Array_AppendWords(rz, _tmPf8);
	JB_Decr(_tmPf8);
	bool NoASM = (!SC_ASM__Needed());
	bool GotAny = false;
	{
		int _if1 = 0;
		while (_if1 < JB_Array_Size(CppList)) {
			JB_File* f = JB_Incr(((JB_File*)JB_Array_Value(CppList, _if1)));
			if (JB_Str_OperatorIsa(f, Type)) {
				JB_Array_SyntaxAppend(rz, f);
				GotAny = true;
			}
			JB_Decr(f);
			_if1++;
		};
	}
	;
	if ((!GotAny)) {
		JB_Array_Clear(rz);
	}
	JB_SafeDecr(rz);
	return rz;
}

bool SC_Ext__ExecuteGCC(Array* Commands) {
	ErrorInt _tmPf0 = JB_Str_SilentExecute(JB_LUB[225], Commands, nil, nil);
	if ((!JB_ErrorInt_SyntaxCast(_tmPf0))) {
		JB_Str_SyntaxExpect(JB_LUB[226]);
		return nil;
	}
	return JB_ErrorInt_SyntaxCast(_tmPf0);
}

void SC_Ext__ExtComp() {
	if ((!SC_Ext__ShouldExtComp())) {
		return;
	}
	if (SC__Options_Products) {
		if (kSC__Options_pack) {
			SC_Flatten__BuildPack();
		}
		if (kSC__Options_native) {
			SC_Ext__RunCppCompile();
			if (SC_Ext__IsCompilerAndNeedsInstall()) {
				SC_Ext__InstallCompiler();
			}
		}
	}
	SC_Ext__ClearThis();
	if (JB_Rec_OK(JB_StdErr)) {
		SC_Comp__Package();
	}
}

bool SC_Ext__ExtCompile(Array* Files, JB_String* Dest, JB_String* Type) {
	if ((!JB_Array_SyntaxCast(Files))) {
		return true;
	}
	Array* CompileString = JB_Incr(SC_Ext__CreateCompileString(Files, Dest, Type));
	if ((!JB_Array_SyntaxCast(CompileString))) {
		JB_Decr(CompileString);
		return true;
	}
	if (SC__Options_PrintCompileString) {
		JB_Str_Print(JB_LUB[227]);
		JB_String* _tmPf0 = JB_Incr(JB_Join2(CompileString, JB_LUB[170]));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Date__Sleep(8192);
	bool _tmPf1 = SC_Ext__ExecuteGCC(CompileString);
	JB_Decr(CompileString);
	return _tmPf1;
}

Array* SC_Ext__FilterCppsIfAlreadyDone(Array* Cpps, JB_File* Objects, int* stdafx) {
	Array* rz = JB_Incr(((Array*)JB_Array__New0()));
	JB_File* wierd = JB_Incr(SC_Cpp__CppProduct());
	JB_Decr(wierd);
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(Cpps)) {
			JB_String* Cpp = JB_Incr(((JB_String*)JB_Array_Value(Cpps, _if0)));
			int reason = SC_Ext__NeedNewObjForSrc(Cpp, Objects);
			if (reason) {
				JB_File* _tmPf2 = JB_Incr(JB_Str_AsFile(Cpp));
				JB_Array_SyntaxAppend(rz, _tmPf2);
				JB_Decr(_tmPf2);
				if ((reason == 4) and ((bool)stdafx)) {
					(*stdafx) = 1;
				}
			}
			JB_Decr(Cpp);
			_if0++;
		};
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

int SC_Ext__Init_() {
	{
		JB_SetRef(SC__Ext_FoundObjects, JB_Array__New0());
		JB_SetRef(SC__Ext_Cleanup, JB_Array__New0());
		SC__Ext_CompilingLibFiles = 0;
	}
	;
	return 0;
}

int SC_Ext__InitCode_() {
	return 0;
}

void SC_Ext__InstallCompiler() {
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[228]);
	JB_FS_AppendInt32(_fsf0, (2023021921));
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
	JB_String* _tmPf3 = JB_Incr(SC_Ext__ProductPath());
	JB_File* _tmPf2 = JB_Incr(JB_Str_AsFile(_tmPf3));
	JB_Decr(_tmPf3);
	JB_String* _tmPf5 = JB_Incr(SC_Comp__Projects());
	JB_String* _tmPf4 = JB_Incr(JB_Str_Child(_tmPf5, JB_LUB[229]));
	JB_Decr(_tmPf5);
	JB_File_MoveTo(_tmPf2, _tmPf4);
	JB_Decr(_tmPf4);
	JB_Decr(_tmPf2);
	JB_File* CppTest = JB_Incr(SC_Cpp__CppProduct());
	JB_File* HTest = JB_Incr(SC_Cpp__HProduct());
	JB_String* _tmPf7 = JB_Incr(JB_File_Path(CppTest));
	JB_String* _tmPf6 = JB_Incr(JB_Str_ReplacePathComponent(_tmPf7, -2, JB_LUB[115]));
	JB_Decr(_tmPf7);
	JB_File* Cpp0 = JB_Incr(JB_Str_AsFile(_tmPf6));
	JB_Decr(_tmPf6);
	JB_String* _tmPf9 = JB_Incr(JB_File_Path(HTest));
	JB_String* _tmPf8 = JB_Incr(JB_Str_ReplacePathComponent(_tmPf9, -2, JB_LUB[115]));
	JB_Decr(_tmPf9);
	JB_File* H0 = JB_Incr(JB_Str_AsFile(_tmPf8));
	JB_Decr(_tmPf8);
	JB_File* _tmPf10 = JB_Incr(JB_File_Parent(Cpp0));
	JB_Str_MakeDir(_tmPf10);
	JB_Decr(_tmPf10);
	if ((!(JB_File_MatchFile(CppTest, Cpp0)))) {
		JB_File_Copy(CppTest, Cpp0, false);
	}
	JB_Decr(Cpp0);
	JB_Decr(CppTest);
	if ((!(JB_File_MatchFile(HTest, H0)))) {
		JB_File_Copy(HTest, H0, false);
	}
	JB_Decr(H0);
	JB_Decr(HTest);
	if (SC__Options_MakeLib) {
		SC_Ext__MakeLib();
	}
}

bool SC_Ext__IsCompilerAndNeedsInstall() {
	if ((!(SC__Options_SelfReplacement == kSC_SelfReplace))) {
		return nil;
	}
	if ((!(JB_Rec_OK(JB_StdErr) and (!SC_Comp__IsTest())))) {
		return nil;
	}
	if ((!(SC_Ext__TestNewCompiler() and SC_Ext__BackupCompiler()))) {
		return nil;
	}
	return true;
}

JB_String* SC_Ext__LibSuff() {
	if (SC__Options_ProjectIsMiniLib) {
		return JB_LUB[230];
	}
	return JB_LUB[0];
}

JB_String* SC_Ext__LibTmpPath() {
	JB_String* _tmPf0 = JB_Incr(SC_Ext__TmpBase(JB_LUB[231]));
	JB_String* _tmPf1 = JB_Incr(SC_Ext__LibSuff());
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf1));
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_File* SC_Ext__LinkOK(JB_File* p) {
	if ((!JB_File_Exists(p, false))) {
		return nil;
	}
	JB_String* lto = JB_Incr(JB_File_LinkToGet(p));
	if ((!JB_Str_Exists(lto))) {
		JB_Decr(lto);
		return p;
	}
	JB_String* _tmPf0 = JB_Incr(JB_Str_ResolvePath(lto, true));
	JB_Decr(lto);
	JB_File* tof = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	if (JB_File_Exists(tof, false) and (!({
		JB_String* _tmP245 = JB_Incr(JB_File_LinkToGet(tof));
		bool _tmP244 = JB_Str_Exists(_tmP245);
		JB_Decr(_tmP245);
		 _tmP244;
	}))) {
		JB_SafeDecr(tof);
		return tof;
	}
	JB_File_Delete(tof);
	JB_Decr(tof);
	return nil;
}

JB_String* SC_Ext__LogName() {
	JB_String* _tmPf0 = JB_Incr(SC_Ext__ProjTmpPath());
	JB_String* _tmPf1 = JB_Incr(JB_Str_Child(_tmPf0, JB_LUB[232]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Ext__MacBothArch(Array* r) {
	JB_Array_AppendWords(r, JB_LUB[233]);
}

JB_String* SC_Ext__MakeDailyProductPath(JB_File* B) {
	int D = JB_Date_DayOfWeek(JB_Date__Now());
	byte x = 'A' + D;
	JB_String* _tmPf0 = JB_Incr(JB_File_Path(B));
	JB_String* _tmPf2 = JB_Incr(JB_int_RenderFS(D, nil));
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(_tmPf2, JB_LUB[234]));
	JB_Decr(_tmPf2);
	JB_String* _tmPf3 = JB_Incr(JB_Str_Child(_tmPf0, _tmPf1));
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

void SC_Ext__MakeLib() {
	JB_String* _tmPf1 = JB_Incr(SC_Ext__ProductPath());
	JB_String* n = JB_Incr(JB_Str_Sibling(_tmPf1, JB_LUB[235]));
	JB_Decr(_tmPf1);
	if ((!SC__Options_Silent)) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[236]);
		JB_FS_AppendString(_fsf0, n);
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf2);
		JB_Decr(_tmPf2);
	}
	SC__Ext_CompilingLibFiles++;
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[237], n));
	JB_Decr(n);
	SC_Ext__ExtCompile(SC__Ext_FoundObjects, _tmPf3, JB_LUB[196]);
	JB_Decr(_tmPf3);
	SC__Ext_CompilingLibFiles--;
}

int SC_Ext__NeedNewObjForSrc(JB_String* cpp, JB_File* objects) {
	bool aslib = SC__Options_MakeLib or SC__Options_ProjectIsLibrary;
	if (aslib and (JB_Str_ContainsString(cpp, JB_LUB[238]))) {
		return nil;
	}
	if ((!SC_ASM__Needed()) and (JB_Str_ContainsString(cpp, JB_LUB[239]))) {
		return nil;
	}
	if ((!(SC_Targets__SyntaxAccess(JB_LUB[153]) or SC_Linkage__Interpreter())) and JB_Str_ContainsString(cpp, JB_LUB[240])) {
		return nil;
	}
	JB_String* name = JB_Incr(JB_Str_Name(cpp));
	JB_String* Prefix = JB_Incr(JB_Str_TrimExtAndPath(name, true));
	JB_Decr(name);
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(Prefix, JB_LUB[186]));
	JB_String* _tmPf0 = JB_Incr(JB_Str_Sibling(cpp, _tmPf1));
	JB_Decr(_tmPf1);
	JB_File* h = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(Prefix, JB_LUB[241]));
	JB_Decr(Prefix);
	JB_File* o = JB_Incr(JB_File_SyntaxAccess(objects, _tmPf2, false));
	JB_Decr(_tmPf2);
	JB_Array_SyntaxAppend(SC__Ext_FoundObjects, o);
	int _tmPf3 = SC_Ext__NoGoodObject(cpp, h, o);
	JB_Decr(o);
	JB_Decr(h);
	return _tmPf3;
}

int SC_Ext__NoGoodObject(JB_String* Cpp, JB_File* h, JB_File* o) {
	if ((JB_File_Exists(h, false)) and (JB_File_NewerThanFile(h, o))) {
		return 4;
	}
	if ((!(JB_File_Exists(o, false)))) {
		return 1;
	}
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(Cpp));
	if (JB_File_NewerThanFile(_tmPf0, o)) {
		JB_Decr(_tmPf0);
		return 2;
	}
	JB_Decr(_tmPf0);
	return 0;
}

JB_String* SC_Ext__ProductName() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__VariantSuffix());
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(SC__Comp_ProjectName, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Ext__ProductPath() {
	if (JB_Str_Exists(SC__Options_output_path)) {
		return SC__Options_output_path;
	}
	if (SC__Options_Scripting) {
		return JB_Str_ScriptLocation(SC__Comp_OriginalInputPath, JB_LUB[175]);
	}
	JB_String* _tmPf0 = JB_Incr(SC_Ext__ProductName());
	JB_String* _tmPf1 = JB_Incr(SC_Ext__ProductSuffix());
	JB_String* prod = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf1));
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
	if (SC__Options_SelfReplacement) {
		JB_String* _tmPf2 = JB_Incr(SC_Comp__Projects());
		JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[242], prod));
		JB_Decr(prod);
		JB_String* _tmPf7 = JB_Incr(JB_Str_Child(_tmPf2, _tmPf3));
		JB_Decr(_tmPf3);
		JB_Decr(_tmPf2);
		JB_SafeDecr(_tmPf7);
		return _tmPf7;
	}
	JB_File* _tmPf5 = JB_Incr(SC_Comp__BuildFolder());
	JB_String* _tmPf4 = JB_Incr(JB_File_Path(_tmPf5));
	JB_Decr(_tmPf5);
	JB_String* _tmPf6 = JB_Incr(JB_Str_SyntaxAccess(_tmPf4, prod));
	JB_Decr(_tmPf4);
	JB_Decr(prod);
	JB_SafeDecr(_tmPf6);
	return _tmPf6;
}

JB_String* SC_Ext__ProductSuffix() {
	if ((!SC__Options_ProjectIsLibrary)) {
		return nil;
	}
	return JB_LUB[243];
}

JB_String* SC_Ext__ProjTmpPath() {
	JB_String* _tmPf0 = JB_Incr(SC_Ext__ProductName());
	JB_String* _tmPf1 = JB_Incr(SC_Ext__TmpBase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Ext__ReplaceOld(JB_File* input, JB_File* Backs) {
	JB_File* oldest = nil;
	int score = 0;
	{
		JB_File_ListStart(Backs);
		while (JB_File_MoveNext(Backs)) {
			JB_String* _tmPf1 = JB_Incr(JB_File_CurrChild(Backs));
			JB_File* f = JB_Incr(JB_File_Child(Backs, _tmPf1, false));
			JB_Decr(_tmPf1);
			JB_String* name = JB_Incr(JB_Str_Name(f));
			if ((JB_Str_OperatorEndsWith(name, JB_LUB[244])) and (JB_byte_IsLetter(JB_Str_ByteValue(name, 0)))) {
				int64 s = JB_Date_Days(JB_Date_ago(JB_File_Modified(f)));
				if (s > score) {
					score = s;
					JB_SetRef(oldest, f);
				}
			}
			JB_Decr(name);
			JB_Decr(f);
		};
		JB_File_ListEnd(Backs);
	}
	;
	if (oldest != nil) {
		JB_File_CopyAll(input, oldest, false);
	}
	JB_Decr(oldest);
}

void SC_Ext__RunCppCompile() {
	if ((!(JB_Rec_OK(JB_StdErr)))) {
		return;
	}
	if ((!SC__Options_Silent)) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[245]);
		JB_String* _tmPf1 = JB_Incr(SC_Ext__ProductPath());
		JB_FS_AppendString(_fsf0, _tmPf1);
		JB_Decr(_tmPf1);
		JB_FS_AppendString(_fsf0, JB_LUB[246]);
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf2);
		JB_Decr(_tmPf2);
	}
	SC__Ext_CompilingLibFiles++;
	JB_File* _tmPf3 = JB_Incr(SC_Ext__CppLib());
	JB_String* _tmPf4 = JB_Incr(SC_Ext__LibTmpPath());
	if ((!SC_Ext__CollectAndCompile(_tmPf3, _tmPf4))) {
		JB_Decr(_tmPf3);
		JB_Decr(_tmPf4);
		return;
	}
	JB_Decr(_tmPf4);
	JB_Decr(_tmPf3);
	SC__Ext_CompilingLibFiles--;
	JB_File* _tmPf5 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_String* _tmPf6 = JB_Incr(SC_Ext__ProjTmpPath());
	if ((!SC_Ext__CollectAndCompile(_tmPf5, _tmPf6))) {
		JB_Decr(_tmPf5);
		JB_Decr(_tmPf6);
		return;
	}
	JB_Decr(_tmPf6);
	JB_Decr(_tmPf5);
	JB_String* _tmPf7 = JB_Incr(SC_Ext__ProjTmpPath());
	if ((!SC_Ext__UseAndCompile(SC__Cpp_Cpp_Input, _tmPf7))) {
		JB_Decr(_tmPf7);
		return;
	}
	JB_Decr(_tmPf7);
	JB_String* _tmPf9 = JB_Incr(SC_Ext__ProductPath());
	JB_String* _tmPf8 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[237], _tmPf9));
	JB_Decr(_tmPf9);
	if ((!SC_Ext__ExtCompile(SC__Ext_FoundObjects, _tmPf8, JB_LUB[196]))) {
		JB_Decr(_tmPf8);
		return;
	}
	JB_Decr(_tmPf8);
}

void SC_Ext__saytest(int n) {
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[247]);
	JB_FS_AppendInt32(_fsf0, n);
	JB_FS_AppendString(_fsf0, JB_LUB[248]);
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
}

bool SC_Ext__ShouldExtComp() {
	if (SC__Options_Scripting) {
		return true;
	}
	if ((!((!SC__Options_Final) and SC__Options_Compile))) {
		return nil;
	}
	if (SC__Options_ForceRecompile) {
		return true;
	}
	JB_String* _tmPf1 = JB_Incr(SC_Ext__ProductPath());
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(_tmPf1));
	JB_Decr(_tmPf1);
	JB_File* p = JB_Incr(SC_Ext__LinkOK(_tmPf0));
	JB_Decr(_tmPf0);
	if ((!JB_File_SyntaxCast(p)) or (JB_File_Modified(p) < SC__Imp_Recent)) {
		JB_Decr(p);
		return true;
	}
	JB_String* _tmPf3 = JB_Incr(JB_File_Path(p));
	JB_Decr(p);
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf3, JB_LUB[249]));
	JB_Decr(_tmPf3);
	JB_PrintLine(_tmPf2);
	JB_Decr(_tmPf2);
	return false;
}

bool SC_Ext__TestNewCompiler() {
	JB_String* S = JB_Incr(SC_Ext__ProductPath());
	JB_File* Test1 = JB_Incr(JB_Str_AsFile(S));
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, S);
	JB_FS_AppendByte(_fsf0, '2');
	JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_File* Test2 = JB_Incr(JB_Str_AsFile(_tmPf3));
	JB_Decr(_tmPf3);
	FastString* _fsf1 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf1, S);
	JB_Decr(S);
	JB_FS_AppendByte(_fsf1, '3');
	JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf1));
	JB_Decr(_fsf1);
	JB_File* Test3 = JB_Incr(JB_Str_AsFile(_tmPf4));
	JB_Decr(_tmPf4);
	JB_File* Cpp1 = JB_Incr(SC_Cpp__CppProduct());
	JB_String* _tmPf6 = JB_Incr(JB_File_Path(Cpp1));
	JB_String* _tmPf5 = JB_Incr(JB_Str_ReplacePathComponent(_tmPf6, -2, JB_LUB[250]));
	JB_Decr(_tmPf6);
	JB_File* Cpp2 = JB_Incr(JB_Str_AsFile(_tmPf5));
	JB_Decr(_tmPf5);
	JB_String* _tmPf8 = JB_Incr(JB_File_Path(Cpp1));
	JB_Decr(Cpp1);
	JB_String* _tmPf7 = JB_Incr(JB_Str_ReplacePathComponent(_tmPf8, -2, JB_LUB[251]));
	JB_Decr(_tmPf8);
	JB_File* Cpp3 = JB_Incr(JB_Str_AsFile(_tmPf7));
	JB_Decr(_tmPf7);
	JB_Array_SyntaxAppend(SC__Ext_Cleanup, Test2);
	JB_Array_SyntaxAppend(SC__Ext_Cleanup, Test3);
	JB_Decr(Test3);
	JB_File* _tmPf9 = JB_Incr(JB_File_Parent(Cpp3));
	JB_Array_SyntaxAppend(SC__Ext_Cleanup, _tmPf9);
	JB_Decr(_tmPf9);
	SC_Ext__saytest(1);
	if ((!JB_File_TestSpeedie(Test1, JB_LUB[252]))) {
		JB_Decr(Test1);
		JB_Decr(Test2);
		JB_Decr(Cpp2);
		JB_Decr(Cpp3);
		return nil;
	}
	JB_Decr(Test1);
	SC_Ext__saytest(2);
	if ((!JB_File_TestSpeedie(Test2, JB_LUB[253]))) {
		JB_Decr(Test2);
		JB_Decr(Cpp2);
		JB_Decr(Cpp3);
		return nil;
	}
	SC_Ext__saytest(3);
	JB_PrintLine(JB_LUB[0]);
	if ((!(JB_File_MustExist(Cpp2, JB_LUB[0]) and JB_File_MustExist(Cpp3, JB_LUB[0])))) {
		JB_Decr(Test2);
		JB_Decr(Cpp2);
		JB_Decr(Cpp3);
		return nil;
	}
	if ((!(JB_File_MatchFile(Cpp2, Cpp3)))) {
		FastString* _fsf2 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf2, Cpp2);
		JB_FS_AppendString(_fsf2, JB_LUB[254]);
		JB_FS_AppendString(_fsf2, Cpp3);
		JB_FS_AppendByte(_fsf2, '!');
		JB_String* _tmPf10 = JB_Incr(JB_FS_GetResult(_fsf2));
		JB_Decr(_fsf2);
		JB_Str_SyntaxExpect(_tmPf10);
		JB_Decr(_tmPf10);
		JB_Decr(Test2);
		JB_Decr(Cpp2);
		JB_Decr(Cpp3);
		return nil;
	}
	JB_Decr(Cpp3);
	JB_Decr(Cpp2);
	bool _tmPf11 = JB_File_TestBatch(Test2) and JB_Rec_OK(JB_StdErr);
	JB_Decr(Test2);
	return _tmPf11;
}

JB_String* SC_Ext__TmpBase(JB_String* V) {
	JB_String* s = ((JB_String*)JB_Ternary(SC__Options_Is32Bit, JB_LUB[255], JB_LUB[256]));
	return JB_Str_OperatorPlus(s, V);
}

JB_String* SC_Ext__TmpErr(JB_String* V) {
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(V, JB_LUB[257]));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[258], _tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(SC_Ext__TmpBase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_String* SC_Ext__TmpOut(JB_String* V) {
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(V, JB_LUB[257]));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[259], _tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(SC_Ext__TmpBase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

bool SC_Ext__UseAndCompile(Array* Input, JB_String* Output) {
	JB_File* TmpFol = JB_Incr(JB_Str_MakeAndGoInto(Output));
	Array* Cpps = JB_Incr(SC_Ext__FilterCppsIfAlreadyDone(Input, TmpFol, nil));
	JB_Decr(TmpFol);
	bool _tmPf0 = SC_Ext__ExtCompile(Cpps, JB_LUB[190], JB_LUB[191]) and (SC_Ext__ExtCompile(Cpps, JB_LUB[190], JB_LUB[192]) and SC_Ext__ExtCompile(Cpps, JB_LUB[190], JB_LUB[193]));
	JB_Decr(Cpps);
	return _tmPf0;
}


SCFunction* SC_FastStringOpts__ByteFunc() {
	return ({
		SCFunction* _X = JB_Incr(SC__FastStringOpts__ByteFunc);
		if ((!_X)) {
			JB_SetRef(_X, ((SCFunction*)((SCBase*)JB_Dict_ValueStr(SC__Comp_ExportNames, JB_LUB[260]))));
			JB_SetRef(SC__FastStringOpts__ByteFunc, _X);
		}
		JB_SafeDecr(_X);
		 _X;
	});
}

void SC_FastStringOpts__FS(Message* exp, Message* getresult) {
	Message* fs2 = ((Message*)JB_Ring_First(((Message*)JB_Ring_Last(getresult))));
	SCDecl* t2 = SC_TypeOfExpr(fs2, nil, nil);
	if ((!SC_Decl_SyntaxIs(t2, kSC__SCDeclInfo_compilercreated))) {
		return;
	}
	Message* Place = JB_Msg_ParentPoint(t2->Default);
	Message* arg = ((Message*)JB_Ring_Parent(Place));
	if ((!JB_Msg_Expect(arg, JB_SyxArg, nil))) {
		return;
	}
	Message* fs1 = ((Message*)JB_Ring_PrevSib(getresult));
	JB_String* name2 = fs2->Name;
	{
		Message* ch = arg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(arg));
		while (((bool)ch) and (ch != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(ch));
			if (JB_Msg_OperatorIsThing(ch, name2)) {
				JB_SetRef(ch->Name, fs1->Name);
				JB_SetRef(ch->Obj, fs1->Obj);
			}
			ch = _N_f2;
		};
		(arg);
	}
	;
	JB_Msg_SafeRemove(Place, JB_SyxSheb);
	JB_Msg_SafeRemove(exp, JB_SyxSheb);
	SC__FastStringOpts_FSRemoved++;
}

int SC_FastStringOpts__Init_() {
	{
		SC__FastStringOpts_FSRemoved = 0;
		SC__FastStringOpts_StrRemoved = 0;
	}
	;
	return 0;
}

int SC_FastStringOpts__InitCode_() {
	return 0;
}

void SC_FastStringOpts__String(Message* exp, Message* str) {
	if ((!(((JB_Msg_EqualsSyx(str, JB_SyxStr, false)) or ((JB_Msg_EqualsSyx(str, JB_SyxSStr, false)) or (JB_Msg_EqualsSyx(str, JB_SyxBack, false)))) and (JB_Str_EqualsInt(str->Name, 1, false))))) {
		return;
	}
	JB_SetRef(str->Obj, JB_TypeByte->TypeNormal);
	JB_SetRef(((Message*)JB_Ring_Parent(str))->Obj, SC_FastStringOpts__ByteFunc());
	str->Func = JB_SyxChar;
	SC__FastStringOpts_StrRemoved++;
}


bool SC_FB__AppExtCompile(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[261]))) {
		return nil;
	}
	SC__Options_ExternalCompile = true;
	(SC_Options__ColorSet(false));
	return false;
}

bool SC_FB__AppOptions_alive(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	JB_PrintLine(JB_LUB[262]);
	return true;
}

bool SC_FB__AppOptions_arch(JB_String* Name, JB_String* Value, FastString* purpose) {
	JB_String* str = JB_Incr(JB_LUB[263]);
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[264], str));
	SC_FB__Explain(purpose, _tmPf3);
	JB_Decr(_tmPf3);
	{
		Array* _LoopSrcf1 = JB_Incr(JB_Str_OperatorDivide(str, '/'));
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			JB_String* v = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf1, _if0)));
			if (JB_Str_Equals(v, Value, true)) {
				JB_SetRef(SC__Options_Arch, v);
			}
			JB_Decr(v);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	JB_Decr(str);
	return false;
}

bool SC_FB__AppOptions_argstats(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_ArgStats = true;
	return false;
}

bool SC_FB__AppOptions_breakonerr(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	JB__Err_AutoPrint = JB_Str_optionint(Value);
	return false;
}

bool SC_FB__AppOptions_check(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[265]))) {
		return nil;
	}
	SC__Options_Compile = false;
	SC__Options_Cpp = false;
	SC__Options_Products = 0;
	return false;
}

bool SC_FB__AppOptions_clean(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[266]))) {
		return nil;
	}
	if (SC_Ext__Clean()) {
		JB_PrintLine(JB_LUB[267]);
	}
	return true;
}

bool SC_FB__AppOptions_codesign(JB_String* Name, JB_String* Value, FastString* purpose) {
	JB_Incr(Value);
	if ((!SC_FB__Explain(purpose, JB_LUB[268]))) {
		JB_Decr(Value);
		return nil;
	}
	if (JB_Str_Equals(Value, JB_LUB[0], false)) {
		JB_String* _tmPf0 = JB_Incr(JB_App__Pref(JB_codesign_native));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
		JB_Decr(Value);
		return true;
	}
	if ((JB_Str_Equals(Value, JB_LUB[269], false)) or ((JB_Str_Equals(Value, JB_LUB[106], false)) or (JB_Str_Equals(Value, JB_LUB[270], false)))) {
		JB_SetRef(Value, JB_LUB[0]);
	}
	(JB_App__PrefSet(JB_codesign_native, Value));
	JB_App__SavePrefs();
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[271], Value));
	JB_Decr(Value);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
	return true;
}

bool SC_FB__AppOptions_cpp(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[272]))) {
		return nil;
	}
	SC__Options_Cpp = JB_Str_optionbool(Value);
	return false;
}

bool SC_FB__AppOptions_crash(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[273]))) {
		return nil;
	}
	JB_App__Crash(JB_LUB[0]);
	return false;
}

bool SC_FB__AppOptions_directtest(JB_String* Name, JB_String* Value, FastString* purpose) {
	SC_FB__Explain(purpose, JB_LUB[274]);
	SC__Options_IsDirectTest = JB_Str_optionbool(Value);
	SC_Targets__Set(JB_LUB[275]);
	return false;
}

bool SC_FB__AppOptions_dosign(JB_String* Name, JB_String* Value, FastString* purpose) {
	SC_FB__Explain(purpose, JB_LUB[276]);
	return true;
}

bool SC_FB__AppOptions_env(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[277]))) {
		return nil;
	}
	{
		Dictionary* _LoopSrcf1 = JB_Incr(JB_App__Env());
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf1));
		JB_Decr(_LoopSrcf1);
		while (JB_Nav_MoveNext(_navf0)) {
			JB_String* k = JB_Incr(JB_Nav_Name(_navf0));
			JB_String* s = JB_Incr(((JB_String*)JB_Nav_Value(_navf0)));
			JB_String* _tmPf4 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[278], s));
			JB_Decr(s);
			JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(k, _tmPf4));
			JB_Decr(_tmPf4);
			JB_Decr(k);
			JB_PrintLine(_tmPf3);
			JB_Decr(_tmPf3);
		};
		JB_Decr(_navf0);
	}
	;
	return true;
}

bool SC_FB__AppOptions_errortest(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[279]))) {
		return nil;
	}
	JB_Str_PrintError(JB_LUB[280]);
	return true;
}

bool SC_FB__AppOptions_final(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_Final = true;
	return false;
}

bool SC_FB__AppOptions_force(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[281]))) {
		return nil;
	}
	SC__Options_ForceRecompile = true;
	return false;
}

bool SC_FB__AppOptions_funccount(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[282]))) {
		return nil;
	}
	SC__Options_UseFuncCallCount = JB_Str_optionbool(Value);
	return false;
}

bool SC_FB__AppOptions_help(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[283]))) {
		return nil;
	}
	SC_FB__Help();
	return true;
}

bool SC_FB__AppOptions_ignorecantsave(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_IgnoreCantSaveErrors = true;
	return false;
}

bool SC_FB__AppOptions_keepallerrors(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[284]))) {
		return nil;
	}
	SC__Options_KeepAllErrors = JB_Str_optionbool(Value);
	return false;
}

bool SC_FB__AppOptions_m32(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[285]))) {
		return nil;
	}
	SC__Options_Is32Bit = true;
	return false;
}

bool SC_FB__AppOptions_m64(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[286]))) {
		return nil;
	}
	SC__Options_Is32Bit = false;
	return false;
}

bool SC_FB__AppOptions_maxvars(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[287]))) {
		return nil;
	}
	SC__Options_CheckMaxVars = JB_Str_optionbool(Value);
	return false;
}

bool SC_FB__AppOptions_nocolor(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[288]))) {
		return nil;
	}
	(SC_Options__ColorSet(false));
	return false;
}

bool SC_FB__AppOptions_nocompile(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[289]))) {
		return nil;
	}
	SC__Options_Compile = false;
	SC__Options_Products = (SC__Options_Products & (~(kSC__Options_pack + kSC__Options_native)));
	return false;
}

bool SC_FB__AppOptions_noisy(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[290]))) {
		return nil;
	}
	SC__Options_PrintCompileString = true;
	JB__File_DebugExecute = true;
	SC__Options_PrintLibraries = true;
	return false;
}

bool SC_FB__AppOptions_optimise(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[291]))) {
		return nil;
	}
	SC__Options_Optimise = JB_Str_TextIntegerValid(Value, nil);
	return false;
}

bool SC_FB__AppOptions_output_path(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[292]))) {
		return nil;
	}
	JB_SetRef(SC__Options_output_path, JB_File_PathFix_(Value));
	JB_String* _tmPf1 = JB_Incr(JB_Str_Parent(SC__Options_output_path));
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(_tmPf1));
	JB_Decr(_tmPf1);
	JB_File_MustExist(_tmPf0, JB_LUB[0]);
	JB_Decr(_tmPf0);
	SC__Options_ForceRecompile = true;
	return false;
}

bool SC_FB__AppOptions_path(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	JB_String* _tmPf0 = JB_Incr(JB_App__Path());
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
	return false;
}

bool SC_FB__AppOptions_perry(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_Perry = 1;
	JB_String* _tmPf0 = JB_Incr(JB_Str_ArgValue(Value));
	SC__Options_Perry = (SC__Options_Perry + ((JB_Str_Equals(_tmPf0, JB_LUB[293], false))));
	JB_Decr(_tmPf0);
	JB__Err_AutoPrint = 0;
	JB_File* _tmPf3 = JB_Incr(JB_File__PrefsFolder());
	JB_File* _tmPf2 = JB_Incr(JB_File_SyntaxAccess(_tmPf3, JB_LUB[294], false));
	JB_Decr(_tmPf3);
	JB_String* _tmPf1 = JB_Incr(JB_File_ReadAll(_tmPf2, 134217728, true));
	JB_Decr(_tmPf2);
	JB_SetRef(SC__Comp_InsecureWords, JB_Str_Dict(_tmPf1, '\n'));
	JB_Decr(_tmPf1);
	return false;
}

bool SC_FB__AppOptions_print(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	JB_Str_Print(Value);
	return true;
}

bool SC_FB__AppOptions_products(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[295]))) {
		return nil;
	}
	int P = 0;
	{
		Array* _LoopSrcf1 = JB_Incr((JB_Str_OperatorDivide(Value, '/')));
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			JB_String* item = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf1, _if0)));
			if (JB_Str_Equals(item, JB_LUB[296], true)) {
				P = (P | kSC__Options_native);
			}
			if (JB_Str_Equals(item, JB_LUB[191], true)) {
				P = (P | SC__Options_Cpp);
			}
			if (JB_Str_Equals(item, JB_LUB[297], true)) {
				P = (P | kSC__Options_pack);
			}
			JB_Decr(item);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	SC__Options_Products = P;
	return false;
}

bool SC_FB__AppOptions_quiet(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[298]))) {
		return nil;
	}
	SC__Options_PrintCompileString = false;
	return false;
}

bool SC_FB__AppOptions_self(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[299]))) {
		return nil;
	}
	JB_String* _tmPf0 = JB_Incr(SC_Comp__SpeedieProj());
	JB_FreeIfDead(SC_FB__TryUseProject(_tmPf0, false));
	JB_Decr(_tmPf0);
	return true;
}

bool SC_FB__AppOptions_selfdebug(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[300]))) {
		return nil;
	}
	SC__Options_SelfReplacement = kSC_SelfDebug;
	SC__Options_TargetDebug = true;
	SC__Options_Compile = false;
	SC__Options_Products = (SC__Options_Products & ((~kSC__Options_pack) + kSC__Options_native));
	SC__Options_ExternalCompile = true;
	JB_String* _tmPf0 = JB_Incr(SC_Comp__SpeedieProj());
	JB_FreeIfDead(SC_FB__TryUseProject(_tmPf0, false));
	JB_Decr(_tmPf0);
	return true;
}

bool SC_FB__AppOptions_single(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_SingleCppOutput = JB_Str_optionbool(Value);
	return false;
}

bool SC_FB__AppOptions_stages(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[301]))) {
		return nil;
	}
	SC__Options_PrintStages = JB_Str_optionbool(Value);
	return false;
}

bool SC_FB__AppOptions_target(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	if (JB_Str_Equals(Value, JB_LUB[302], false)) {
		if ((!false)) {
			JB_Str_SyntaxExpect(JB_LUB[303]);
		}
	}
	SC_Targets__Set(Value);
	return false;
}

bool SC_FB__AppOptions_targetdebug(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_TargetDebug = JB_Str_optionbool(Value);
	return false;
}

bool SC_FB__AppOptions_variant(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	JB_SetRef(SC__Options_Variant, JB_int_RenderFS(((int)JB_Str_TextIntegerValid(Value, nil)), nil));
	(SC_Options__ColorSet(false));
	SC__Options_Optimise = JB_int_OperatorMax(SC__Options_Optimise, 1);
	return false;
}

bool SC_FB__AppOptions_warn(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[304]))) {
		return nil;
	}
	SC__Options_Warnings = JB_Str_optionbool(Value);
	return false;
}

bool SC_FB__AppTalk(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__AC_ShouldEnter = 1;
	JB__ErrorColors_Enabled = false;
	return false;
}

bool SC_FB__AppVersionNumber(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[305]))) {
		return nil;
	}
	return SC_FB__CompilerInfo();
}

void SC_FB__CheckSelfModifying(JB_String* S) {
	int t2 = SC_FB__CheckSelfModifying2();
	if (t2 == 1) {
		SC__Options_SelfReplacement = kSC_SelfReplace;
		SC__Options_ExternalCompile = true;
		SC__Options_ForceRecompile = true;
		SC__Ext_CompilingLibFiles++;
	}
	 else if (t2 == 2) {
		SC__Options_ProjectIsMiniLib = true;
	}
}

int SC_FB__CheckSelfModifying2() {
	int rz = 0;
	if (JB_Str_Exists(SC__Options_SingleFileInput)) {
		return nil;
	}
	JB_File* _tmPf0 = JB_Incr(SC_Comp__Speedie());
	JB_File* _tmPf1 = JB_Incr(SC_Comp__Jeebox());
	if (JB_Str_OperatorPathMatch(SC__Comp_BaseProjectPath, _tmPf0)) {
		if (SC__Options_SelfReplacement) {
			JB_Decr(_tmPf0);
			JB_Decr(_tmPf1);
			return nil;
		}
		rz = 1;
	}
	 else if (JB_Str_OperatorPathMatch(SC__Comp_BaseProjectPath, _tmPf1)) {
		rz = 2;
	}
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
	return rz;
}

bool SC_FB__CompilerInfo() {
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[306]);
	JB_FS_AppendInt32(_fsf0, (2023021921));
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
	return true;
}

bool SC_FB__Explain(FastString* Purpose, JB_String* name) {
	if ((!(Purpose))) {
		return true;
	}
	JB_FS_AppendString(Purpose, name);
	return false;
}

void SC_FB__Help() {
	FastString* fs = JB_Incr(JB_FS__New());
	FastString* fs_tester = JB_Incr(JB_FS__New());
	JB_FS_AppendString(fs, JB_LUB[307]);
	JB_String* _tmPf3 = JB_Incr(JB_App__FileName());
	JB_FS_AppendString(fs, _tmPf3);
	JB_Decr(_tmPf3);
	JB_FS_AppendString(fs, JB_LUB[308]);
	//;
	JB_FS_AppendString(fs, JB_LUB[150]);
	JB_String* _tmPf5 = JB_Incr(SC_Comp__SpeedieProj());
	JB_String* _tmPf4 = JB_Incr(JB_Str_Parent(_tmPf5));
	JB_Decr(_tmPf5);
	JB_FS_AppendString(fs, _tmPf4);
	JB_Decr(_tmPf4);
	JB_FS_AppendString(fs, JB_LUB[309]);
	JB_String* _tmPf6 = JB_Incr(JB_Platform__CPU_Name());
	JB_FS_AppendString(fs, _tmPf6);
	JB_Decr(_tmPf6);
	//;
	{
		DictionaryReader* _navf1 = JB_Incr(JB_Dict_Navigate(SC__FB_AppOptions));
		while (JB_Nav_MoveNext(_navf1)) {
			JB_String* k = JB_Incr(JB_Nav_Name(_navf1));
			DTWrap* _tmPf7 = JB_Incr(((DTWrap*)JB_Nav_Value(_navf1)));
			ShellOption v = ((ShellOption)JB_Wrap_Value(_tmPf7));
			JB_Decr(_tmPf7);
			DTWrap* _tmPf8 = JB_Incr(((DTWrap*)JB_Dict_ValueStr(SC__FB_AppOptions, k)));
			((ShellOption)JB_Wrap_Value(_tmPf8))(JB_LUB[0], JB_LUB[0], fs_tester);
			JB_Decr(_tmPf8);
			if (fs_tester->Length) {
				(JB_FS_LengthSet(fs_tester, 0));
				JB_FS_AppendString(fs, JB_LUB[310]);
				JB_FS_AppendString(fs, k);
				JB_FS_AppendMultiByte(fs, ' ', 17 - JB_Str_Length(k));
				DTWrap* _tmPf9 = JB_Incr(((DTWrap*)JB_Dict_ValueStr(SC__FB_AppOptions, k)));
				((ShellOption)JB_Wrap_Value(_tmPf9))(JB_LUB[0], JB_LUB[0], fs);
				JB_Decr(_tmPf9);
			}
			JB_Decr(k);
		};
		JB_Decr(_navf1);
	}
	;
	JB_Decr(fs_tester);
	JB_String* _tmPf10 = JB_Incr(JB_FS_GetResult(fs));
	JB_Decr(fs);
	JB_PrintLine(_tmPf10);
	JB_Decr(_tmPf10);
}

int SC_FB__Init_() {
	{
		JB_SetRef(SC__FB_AppOptions, (JB_Dict__New()));
		DTWrap* _tmPf0 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_nocompile))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[311], _tmPf0));
		JB_Decr(_tmPf0);
		DTWrap* _tmPf1 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_breakonerr))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[312], _tmPf1));
		JB_Decr(_tmPf1);
		DTWrap* _tmPf2 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_path))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[313], _tmPf2));
		JB_Decr(_tmPf2);
		DTWrap* _tmPf3 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_keepallerrors))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[314], _tmPf3));
		JB_Decr(_tmPf3);
		DTWrap* _tmPf4 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_env))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[315], _tmPf4));
		JB_Decr(_tmPf4);
		DTWrap* _tmPf5 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_FB__AppExtCompile)))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[316], _tmPf5));
		JB_Decr(_tmPf5);
		DTWrap* _tmPf6 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_FB__AppExtCompile)))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[317], _tmPf6));
		JB_Decr(_tmPf6);
		DTWrap* _tmPf7 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_arch))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[318], _tmPf7));
		JB_Decr(_tmPf7);
		DTWrap* _tmPf8 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_perry))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[173], _tmPf8));
		JB_Decr(_tmPf8);
		DTWrap* _tmPf9 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_check))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[319], _tmPf9));
		JB_Decr(_tmPf9);
		DTWrap* _tmPf10 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_errortest))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[320], _tmPf10));
		JB_Decr(_tmPf10);
		DTWrap* _tmPf11 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_argstats))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[321], _tmPf11));
		JB_Decr(_tmPf11);
		DTWrap* _tmPf12 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_noisy))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[322], _tmPf12));
		JB_Decr(_tmPf12);
		DTWrap* _tmPf13 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_alive))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[323], _tmPf13));
		JB_Decr(_tmPf13);
		DTWrap* _tmPf14 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_products))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[324], _tmPf14));
		JB_Decr(_tmPf14);
		DTWrap* _tmPf15 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_ignorecantsave))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[325], _tmPf15));
		JB_Decr(_tmPf15);
		DTWrap* _tmPf16 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_quiet))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[326], _tmPf16));
		JB_Decr(_tmPf16);
		DTWrap* _tmPf17 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_stages))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[327], _tmPf17));
		JB_Decr(_tmPf17);
		DTWrap* _tmPf18 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_print))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[328], _tmPf18));
		JB_Decr(_tmPf18);
		DTWrap* _tmPf19 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_directtest))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[329], _tmPf19));
		JB_Decr(_tmPf19);
		DTWrap* _tmPf20 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_single))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[330], _tmPf20));
		JB_Decr(_tmPf20);
		DTWrap* _tmPf21 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_self))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[331], _tmPf21));
		JB_Decr(_tmPf21);
		DTWrap* _tmPf22 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_crash))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[332], _tmPf22));
		JB_Decr(_tmPf22);
		DTWrap* _tmPf23 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_FB__AppTalk)))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[333], _tmPf23));
		JB_Decr(_tmPf23);
		DTWrap* _tmPf24 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_FB__AppTalk)))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[166], _tmPf24));
		JB_Decr(_tmPf24);
		DTWrap* _tmPf25 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_targetdebug))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[334], _tmPf25));
		JB_Decr(_tmPf25);
		DTWrap* _tmPf26 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_target))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[335], _tmPf26));
		JB_Decr(_tmPf26);
		DTWrap* _tmPf27 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_m64))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[336], _tmPf27));
		JB_Decr(_tmPf27);
		DTWrap* _tmPf28 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_funccount))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[337], _tmPf28));
		JB_Decr(_tmPf28);
		DTWrap* _tmPf29 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_m32))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[338], _tmPf29));
		JB_Decr(_tmPf29);
		DTWrap* _tmPf30 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_warn))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[339], _tmPf30));
		JB_Decr(_tmPf30);
		DTWrap* _tmPf31 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_maxvars))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[340], _tmPf31));
		JB_Decr(_tmPf31);
		DTWrap* _tmPf32 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_nocolor))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[341], _tmPf32));
		JB_Decr(_tmPf32);
		DTWrap* _tmPf33 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_selfdebug))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[342], _tmPf33));
		JB_Decr(_tmPf33);
		DTWrap* _tmPf34 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_optimise))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[343], _tmPf34));
		JB_Decr(_tmPf34);
		DTWrap* _tmPf35 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_cpp))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[191], _tmPf35));
		JB_Decr(_tmPf35);
		DTWrap* _tmPf36 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_output_path))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[344], _tmPf36));
		JB_Decr(_tmPf36);
		DTWrap* _tmPf37 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_force))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[345], _tmPf37));
		JB_Decr(_tmPf37);
		DTWrap* _tmPf38 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_variant))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[346], _tmPf38));
		JB_Decr(_tmPf38);
		DTWrap* _tmPf39 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_final))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[347], _tmPf39));
		JB_Decr(_tmPf39);
		DTWrap* _tmPf40 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_codesign))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[348], _tmPf40));
		JB_Decr(_tmPf40);
		DTWrap* _tmPf41 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_dosign))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[349], _tmPf41));
		JB_Decr(_tmPf41);
		DTWrap* _tmPf42 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_clean))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[350], _tmPf42));
		JB_Decr(_tmPf42);
		DTWrap* _tmPf43 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_FB__AppVersionNumber)))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[351], _tmPf43));
		JB_Decr(_tmPf43);
		DTWrap* _tmPf44 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_FB__AppVersionNumber)))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[352], _tmPf44));
		JB_Decr(_tmPf44);
		DTWrap* _tmPf45 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FB__AppOptions_help))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[353], _tmPf45));
		JB_Decr(_tmPf45);
	}
	;
	return 0;
}

int SC_FB__InitCode_() {
	return 0;
}

bool SC_FB__ParseArgs() {
	Array* _tmPf0 = JB_Incr(JB_App__Args());
	bool _tmPf1 = SC_FB__ParseArgsSub(_tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool SC_FB__ParseArgsSub(Array* args) {
	if (JB_Str_Length(JB_LUB[0]) == 1) {
		jdb(JB_LUB[0]);
		jdb2(((Message*)nil));
		dbglineinfo(((Message*)nil));
		JB_Msg_LocateAll(((Message*)nil));
	}
	if ((!JB_Array_SyntaxCast(args))) {
		SC_FB__CompilerInfo();
		SC_FB__Help();
		return false;
	}
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(args)) {
			JB_Object* S = JB_Incr(JB_Array_Value(args, _if0));
			SC_FB__ParseOption(S);
			JB_Decr(S);
			_if0++;
		};
	}
	;
	if (SC__Options_OperationCount <= 0) {
		JB_Rec_NewErrorWithNode(JB_StdErr, nil, JB_LUB[354], nil);
	}
	 else if (SC__Options_OperationCount >= 2) {
		JB_Rec_NewErrorWithNode(JB_StdErr, nil, JB_LUB[355], nil);
	}
	return JB_Rec_OK(JB_StdErr) and JB_File_Exists(SC__Comp_BaseProjectPath, false);
}

void SC_FB__ParseOption(JB_Object* Obj) {
	JB_String* Name = JB_Incr(JB_Object_ArgName(Obj));
	JB_String* Value = JB_Incr(JB_Object_ArgValue(Obj));
	if (JB_Str_Exists(Name)) {
		DTWrap* _tmPf1 = JB_Incr(((DTWrap*)JB_Dict_ValueStr(SC__FB_AppOptions, Name)));
		ShellOption opt = ((ShellOption)JB_Wrap_Value(_tmPf1));
		JB_Decr(_tmPf1);
		if ((!(opt))) {
			FastString* _fsf0 = JB_Incr(JB_FS__New());
			JB_FS_AppendString(_fsf0, JB_LUB[356]);
			JB_FS_AppendString(_fsf0, Name);
			JB_FS_AppendString(_fsf0, JB_LUB[357]);
			JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
			JB_Decr(_fsf0);
			JB_App__Die(_tmPf2, -1);
			JB_Decr(_tmPf2);
		}
		 else {
			SC__Options_OperationCount = (SC__Options_OperationCount + ((opt)(Name, Value, nil)));
		}
	}
	 else if (JB_Str_IsJbin(Value)) {
		0;
	}
	 else if ((SC__Options_OperationCount == 1) and (!JB_Str_Exists(SC__Options_output_path))) {
		SC_FB__AppOptions_output_path(JB_LUB[344], Value, nil);
	}
	 else {
		JB_FreeIfDead(SC_FB__TryUseProject(Value, false));
		SC__Options_OperationCount++;
	}
	JB_Decr(Value);
	JB_Decr(Name);
}

JB_String* SC_FB__TryUseProject(JB_String* path, bool IsScript) {
	JB_Incr(path);
	if ((!(JB_Str_ContainsByte(path, '/') or (JB_Str_ContainsByte(path, '.') or JB_Str_ContainsByte(path, '~'))))) {
		JB_SetRef(path, SC_Comp__FindProjNoSuffix(path));
	}
	JB_String* path2 = JB_Incr(JB_Str_ResolvePath(path, true));
	if (JB_Str_Exists(path2)) {
		JB_SetRef(path, path2);
	}
	JB_Decr(path2);
	JB_File* F = JB_Incr(JB_Str_AsFile(path));
	if (({
		JB_File* _tmP261 = JB_Incr(SC_Comp__Library());
		bool _tmP260 = JB_File_OperatorInside(F, _tmP261);
		JB_Decr(_tmP261);
		 _tmP260;
	}) or ({
		JB_File* _tmP263 = JB_Incr(SC_Comp__Jeebox());
		bool _tmP262 = JB_File_OperatorInside(F, _tmP263);
		JB_Decr(_tmP263);
		 _tmP262;
	})) {
		JB_File_Fail(F, JB_LUB[358]);
		JB_Decr(path);
		JB_Decr(F);
		return nil;
	}
	JB_SetRef(SC__Comp_OriginalInputPath, path);
	JB_SetRef(SC__Comp_BaseProjectPath, F);
	JB_SetRef(SC__Comp_ProjectName, JB_Str_TrimExtAndPath(F, true));
	JB_SetRef(SC__Comp_ReportedName, SC__Comp_ProjectName);
	bool exists = JB_File_Exists(F, false);
	bool IsSpd = ({
		JB_String* _tmP265 = JB_Incr(JB_Str_Name(F));
		bool _tmP264 = JB_Str_IsSpeedieSrc(_tmP265);
		JB_Decr(_tmP265);
		 _tmP264;
	}) or IsScript;
	if ((exists and (!JB_File_IsDir(F))) or ((!exists) and IsSpd)) {
		JB_SetRef(SC__Options_SingleFileInput, JB_File_Path(F));
		if ((!JB_File_MustExist(F, JB_LUB[0]))) {
			JB_Decr(path);
			JB_Decr(F);
			return nil;
		}
		JB_SetRef(F, JB_File_Parent(F));
		JB_SetRef(SC__Comp_BaseProjectPath, F);
	}
	SC_FB__CheckSelfModifying(path);
	if ((!JB_Str_Exists(SC__Options_SingleFileInput))) {
		JB_File_MustExist(F, JB_LUB[359]);
	}
	JB_Decr(F);
	if (exists and (IsSpd and JB_Rec_OK(JB_StdErr))) {
		JB_SafeDecr(path);
		return path;
	}
	JB_Decr(path);
	return JB_LUB[0];
}


void SC_Flatten__BuildPack() {
	SC_fn_asm__inittable();
}

int SC_Flatten__Init_() {
	{
		SC__Flatten_StdState = ((ASMFuncState){});
		JB_SetRef(SC__Flatten_PackFuncs, JB_Array__New0());
	}
	;
	return 0;
}

void SC_Flatten__InitAsm() {
	SC_fn_asm__inittable();
	return;
}

int SC_Flatten__InitCode_() {
	return 0;
}


SCBase* SC_InbuiltShellArgs__Collect(Message* node, SCBase* name_space, Message* ErrPlace) {
	if ((!(name_space == SC__Comp_program))) {
		JB_Msg_SyntaxExpect(node, JB_LUB[360]);
		return nil;
	}
	Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxList));
	Array* ShellArgs = JB_Incr(JB_Msg_ListAll(_tmPf0));
	JB_Decr(_tmPf0);
	SC_FB__ParseArgsSub(ShellArgs);
	JB_Decr(ShellArgs);
	return SC__Comp_program;
}


bool SC_AC__active() {
	return SC__AC_total < SC__AC_max_total;
}

void SC_AC__ActualDefine(Message* rz, Message* s, JB_String* purpose) {
	JB_String* f = JB_Incr(JB_Msg_FilePath(s));
	if ((!JB_Str_Exists(f))) {
		JB_Str_SyntaxExpect(JB_LUB[361]);
		JB_Decr(f);
		return;
	}
	JB_FreeIfDead(JB_Msg_Msg(rz, JB_SyxSStr, f));
	JB_Decr(f);
	JB_Msg_AppendNum(rz, s->Position);
}

Message* SC_AC__AllTmps() {
	Message* rz = nil;
	if (SC__AC_all_tmp_src->Cleaned) {
		return JB_Macro_Pz(SC__AC_all_tmp_src);
	}
	SC__AC_all_tmp_src->Cleaned = true;
	rz = JB_Macro_Pz(SC__AC_all_tmp_src);
	int state = 0;
	{
		Message* ch = ((Message*)JB_Tree_First_(rz));
		while (ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(ch));
			if (JB_Msg_EqualsSyx(ch, JB_SyxName, false)) {
				state = JB_Msg_autocomplete_state(ch);
				JB_Tree_Remove(ch);
			}
			 else {
				ch->Flags = state;
			}
			ch = _Nf1;
		};
		(rz);
	}
	;
	return rz;
}

Message* SC_AC__AutoComplete(Message* ff, JB_String* name, JB_String* Purpose) {
	Message* rz = nil;
	if ((!ff)) {
		JB_Decr(rz);
		return nil;
	}
	Syntax f = ff->Func;
	if ((!((f != JB_SyxBra) and ((f != JB_SyxPrm) and ((f != JB_SyxList) and ((f != JB_SyxArg) and ((f != JB_SyxArr) and ((f != JB_SyxAcc) and ((f != JB_SyxDecl) and (f != JB_SyxRel)))))))))) {
		JB_Decr(rz);
		return nil;
	}
	SC__AC_total = 0;
	int Types = -1;
	SCBase* scope = JB_Incr(SC_AC__GetScope(ff, (&Types)));
	if ((!scope)) {
		JB_Decr(rz);
		JB_Decr(scope);
		return nil;
	}
	Message* NeedTypeLimit = JB_Incr(JB_Msg_GetTypeLimiter(ff));
	Array* arr = JB_Incr(JB_Array__New0());
	while (((bool)scope) and SC_AC__active()) {
		SC_AC__AutoSub(scope, name, arr, Types, NeedTypeLimit);
		if ((!JB_Str_Exists(name)) and JB_Object_FastIsa(scope, JB_AsClass(SCArg))) {
			break;
		}
		JB_SetRef(scope, SC_Base_UpClass(scope, ff));
	};
	JB_Decr(NeedTypeLimit);
	JB_Decr(scope);
	JB_Array_Sort(arr, ((SorterComparer)SC_AC__AutoCompleteSorter), false);
	JB_SetRef(rz, JB_Syx_Msg(JB_SyxTmp, Purpose));
	Message* arg = JB_Incr(JB_Msg_Msg(rz, JB_SyxArg, name));
	autoitem* Prev = nil;
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(arr)) {
			autoitem* i = JB_Incr(((autoitem*)JB_Array_Value(arr, _if0)));
			if (SC_autoitem_OKBy(i, Prev)) {
				Message* tmp = JB_Incr(JB_Syx_ParentMsg(JB_SyxTmp, arg, i->Insert));
				JB_Msg_AppendSyx(tmp, JB_SyxStr, i->Display);
				JB_Decr(tmp);
				JB_SetRef(Prev, i);
			}
			JB_Decr(i);
			_if0++;
		};
	}
	;
	JB_Decr(Prev);
	JB_Decr(arg);
	JB_Decr(arr);
	JB_SafeDecr(rz);
	return rz;
}

bool SC_AC__AutoCompleteSorter(autoitem* a, autoitem* b) {
	int type = a->type - b->type;
	if (type) {
		return type < 0;
	}
	return JB_Str_CompareStr(a->Sort, b->Sort, false) <= -1;
}

void SC_AC__AutoSub(SCBase* scope, JB_String* name, Array* found, int Types, Message* NeedTypeLimit) {
	SCDecl* TypeLimiter = nil;
	if (NeedTypeLimit) {
		JB_SetRef(TypeLimiter, SC_TypeOfExpr(NeedTypeLimit, scope, nil));
	}
	{
		Dictionary* _LoopSrcf1 = JB_Incr(scope->Access);
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf1));
		JB_Decr(_LoopSrcf1);
		while (JB_Nav_MoveNext(_navf0)) {
			JB_String* key = JB_Incr(JB_Nav_Name(_navf0));
			SCObject* value = JB_Incr(((SCObject*)JB_Nav_Value(_navf0)));
			JB_String* orig = JB_Incr(SC_SCObject_CanAuto(value, name));
			bool IsExact = (JB_Str_Equals(orig, name, true));
			if (JB_Str_Exists(orig) and ((!JB_Str_Exists(name)) or JB_Str_OperatorStarts(orig, name))) {
				SC_AC__AutoSub2(value, key, orig, found, IsExact, Types, TypeLimiter);
			}
			JB_Decr(orig);
			JB_Decr(value);
			JB_Decr(key);
		};
		JB_Decr(_navf0);
	}
	;
	JB_Decr(TypeLimiter);
}

void SC_AC__AutoSub2(SCObject* value, JB_String* key, JB_String* src_name, Array* found, bool exact, int Types, SCDecl* TypeLimiter) {
	JB_Incr(value);
	while (((bool)value) and SC_AC__active()) {
		if (((JB_Str_Equals(key, JB_LUB[331], true))) and (JB_Object_FastIsa(value, JB_AsClass(SCModule)))) {
		}
		 else if (SC_SCObject_CanAutoLimit(value, Types, TypeLimiter)) {
			JB_String* sub_name = JB_Incr(SC_SCObject_Display(value, exact));
			if (JB_Str_Exists(sub_name)) {
				SC__AC_total++;
				JB_String* _tmPf0 = JB_Incr(SC_SCObject_BaseIcon(value));
				JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[170], sub_name));
				JB_SetRef(sub_name, JB_Str_OperatorPlus(_tmPf0, _tmPf1));
				JB_Decr(_tmPf1);
				JB_Decr(_tmPf0);
				autoitem* _tmPf2 = JB_Incr(SC_autoitem__NewAuto(key, src_name, value, sub_name, exact, SC_SCObject_auto_type(value)));
				JB_Array_SyntaxAppend(found, _tmPf2);
				JB_Decr(_tmPf2);
			}
			JB_Decr(sub_name);
		}
		JB_SetRef(value, SC_SCObject_NextDisplay(value, exact));
	};
	JB_Decr(value);
}

Message* SC_AC__Backup_Define(SCFile* myfile, int f, Message* thg, JB_String* purpose) {
	if ((!(thg))) {
		thg = SC_SCFile_GetMsg(myfile, f, true);
	}
	if ((!thg)) {
		JB_Str_SyntaxExpect(JB_LUB[362]);
		return nil;
	}
	thg = JB_Msg_CmdImprove(thg);
	return SC_AC__DefineOrCall(thg, purpose, myfile);
}

Message* SC_AC__BuildError(JB_String* name) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[363]));
	JB_String* _tmPf0 = JB_Incr(SC_AC__ErrName());
	JB_Msg_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Msg_SyntaxAppend(rz, name);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_AC__CallFrom(Message* msg, JB_String* purpose, JB_Object* found) {
	Message* rz = nil;
	SCFunction* fn = JB_Msg_AutoMsgFuncFn(msg);
	if ((!(fn))) {
		fn = JB_Msg_AutoMsgFunc(msg);
	}
	if ((!fn)) {
		return nil;
	}
	rz = SC_AC__CallFromDefine(msg, fn, found);
	Message* arg = ((Message*)JB_Ring_First(rz));
	if ((!(SC_Func_OperatorIsa(fn, kSC_IsConstructor)))) {
		SC_AC__CallFromSub(arg, fn);
		return rz;
	}
	while (fn) {
		Array* arr = ((Array*)fn->CounterPart);
		if (JB_Object_Isa(arr, JB_AsClass(Array))) {
			{
				int _if0 = 0;
				while (_if0 < JB_Array_Size(((Array*)arr))) {
					JB_Object* fn2 = JB_Array_Value(((Array*)arr), _if0);
					SC_AC__CallFromSub(arg, ((SCFunction*)fn2));
					_if0++;
				};
			};
		}
		if ((!JB_Msg_EqualsSyx(msg, JB_SyxName, false))) {
			break;
		}
		fn = fn->NextFunc;
	};
	return rz;
}

Message* SC_AC__CallFromDefine(Message* msg, SCFunction* fn, JB_Object* found) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[364]));
	Message* arg = JB_Incr(JB_Msg_Msg(rz, JB_SyxArg, JB_LUB[0]));
	Message* define = JB_Incr(SC_AC__Define(msg, JB_LUB[365], found));
	if ((!(define))) {
		JB_SetRef(define, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[366]));
	}
	JB_Msg_SyntaxAppend(define, fn->Name);
	JB_Tree_SyntaxAppend(arg, define);
	JB_Decr(define);
	JB_Decr(arg);
	JB_SafeDecr(rz);
	return rz;
}

void SC_AC__CallFromSub(Message* arg, SCFunction* fn) {
	{
		Dictionary* _LoopSrcf1 = fn->LinkFrom;
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf1);
		while (JB_Nav_MoveNext(_navf0)) {
			SCBase* call_point = ((SCBase*)JB_Nav_Value(_navf0));
			Message* s = call_point->Source;
			if (s) {
				JB_String* f = JB_Msg_FilePath(s);
				if (JB_Str_Exists(f)) {
					Message* item = JB_Msg_Msg(arg, JB_SyxTmp, JB_LUB[367]);
					JB_Msg_AppendSyx(item, JB_SyxSStr, f);
					JB_Msg_SyntaxAppend(item, SC_SCObject_CallFromName(call_point));
					JB_Msg_AppendNum(item, JB_Msg_FuncPos(s, fn));
				}
			}
		};
	};
}

bool SC_AC__CanUseName(SCBase* l) {
	if (JB_Object_FastIsa(l, JB_AsClass(SCModule))) {
		return (!((SCModule*)l)->IsImport);
	}
	return true;
}

Message* SC_AC__CmdResponse(Message* cmd, Message* arg) {
	Message* rz = nil;
	if ((!JB_Msg_SyntaxEquals(cmd, JB_LUB[363], false))) {
		JB_SetRef(rz, SC_AC__DoCmd(cmd, arg));
	}
	if ((!(rz))) {
		JB_String* _tmPf0 = JB_Incr(JB_Msg_Nyme(cmd));
		JB_SetRef(rz, SC_AC__BuildError(_tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_SafeDecr(rz);
	return rz;
}

void SC_AC__CmdWrap(Message* arg) {
	JB_Incr(arg);
	if (SC__AC_Perry->CanPrint) {
		JB_Obj_PrintLine(arg);
	}
	if ((!JB_Msg_EqualsSyx(arg, JB_SyxArg, false))) {
		JB_PrintLine(JB_LUB[368]);
		Message* tmp = JB_Incr(JB_Syx_OperatorPlus(JB_SyxArg, JB_LUB[369]));
		JB_Tree_SyntaxAppend(tmp, arg);
		JB_SetRef(arg, tmp);
		JB_Decr(tmp);
	}
	Message* date = JB_Incr(((Message*)JB_Ring_First(arg)));
	if ((!JB_Msg_EqualsSyx(date, JB_SyxNum, false))) {
		JB_PrintLine(JB_LUB[370]);
		JB_SetRef(date, JB_Syx_PlusNum(JB_SyxNum, 0));
		(JB_Ring_FirstSet(arg, date));
	}
	Message* Cmd = JB_Incr(((Message*)JB_Tree_Get(arg, 1)));
	if ((!JB_Msg_EqualsSyx(Cmd, JB_SyxTmp, false))) {
		JB_PrintLine(JB_LUB[371]);
		JB_SetRef(Cmd, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[363]));
		(JB_Ring_NextSibSet(date, Cmd));
	}
	JB_Decr(date);
	JB_Tree_RemoveAfter(Cmd);
	Message* response = JB_Incr(SC_AC__CmdResponse(Cmd, arg));
	if (Cmd != response) {
		(JB_Ring_NextSibSet(Cmd, response));
		JB_Tree_Remove(Cmd);
	}
	JB_Decr(response);
	JB_Decr(Cmd);
	JB_Proc_Send(SC__AC_Perry, arg, 0);
	JB_Decr(arg);
	JB_Rec_Clear(JB_StdErr);
}

Message* SC_AC__Debug(Message* cmd) {
	if ((!false)) {
		JB_Str_SyntaxExpect(JB_LUB[372]);
	}
	return nil;
}

Message* SC_AC__Define(Message* msg, JB_String* purpose, JB_Object* found) {
	JB_Incr(found);
	bool IsDisplay = JB_Str_OperatorStarts(purpose, JB_LUB[373]);
	bool IsDefine = JB_Str_OperatorStarts(purpose, JB_LUB[365]);
	if ((!(IsDisplay or IsDefine))) {
		JB_Str_SyntaxExpect(JB_LUB[374]);
		JB_Decr(found);
		return nil;
	}
	if ((!(JB_Object_Isa(found, JB_AsClass(SCObject))))) {
		JB_SetRef(found, nil);
	}
	Message* s = JB_Incr(SC_AC__LocateDefinition(msg, ((SCObject*)found), IsDisplay));
	JB_Decr(found);
	if ((!s)) {
		JB_Str_SyntaxExpect(JB_LUB[375]);
		JB_Decr(s);
		return nil;
	}
	Message* _tmPf0 = JB_Incr(SC_AC__RespondDefine(msg, s, purpose));
	JB_Decr(s);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* SC_AC__Define_Behaviour(SCFunction* fn, JB_String* purpose) {
	SCClass* cls = JB_Incr(fn->Cls);
	if ((!cls)) {
		JB_Decr(cls);
		return nil;
	}
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(fn->Name, JB_LUB[376]));
	JB_String* name = JB_Incr(JB_Str_OperatorPlus(JB_LUB[376], _tmPf0));
	JB_Decr(_tmPf0);
	SCObject* found = JB_Incr(SC_Base_UpCheck(cls, name, true));
	JB_Decr(name);
	JB_Decr(cls);
	if (JB_Object_FastIsa(found, JB_AsClass(SCFunction))) {
		Message* _tmPf1 = JB_Incr(SC_AC__DefineOrCall(((SCFunction*)found)->Source, purpose, ((SCFunction*)found)));
		JB_Decr(found);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	JB_Decr(found);
	return nil;
}

Message* SC_AC__DefineOrCall(Message* msg, JB_String* purpose, JB_Object* found) {
	if (JB_Str_OperatorStarts(purpose, JB_LUB[364])) {
		return SC_AC__CallFrom(msg, purpose, found);
	}
	return SC_AC__Define(msg, purpose, found);
}

Message* SC_AC__Diissplay(Message* msg, Message* s, JB_String* purpose) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
	SCFunction* fn = JB_Incr(JB_Msg_IdentifyFunc(s));
	if (JB_Msg_EqualsSyx(msg, JB_SyxName, false)) {
		msg->Func = JB_SyxThg;
		SCBase* obj = JB_Incr(SC_Comp__FindModuleOrClass(msg, true));
		if (obj) {
			Message* _tmPf1 = JB_Incr(SC_Base_DiissplayObj(obj, rz));
			JB_Decr(rz);
			JB_Decr(fn);
			JB_Decr(obj);
			JB_SafeDecr(_tmPf1);
			return _tmPf1;
		}
		JB_Decr(obj);
	}
	if (((JB_Msg_EqualsSyx(s, JB_SyxDecl, false))) and ((!fn) or ({
		Message* _tmP237 = JB_Incr(JB_Msg_DeclName(s));
		bool _tmP236 = JB_Msg_DeepEquals(msg, _tmP237, false);
		JB_Decr(_tmP237);
		 _tmP236;
	}))) {
		JB_String* _tmPf0 = JB_Incr(JB_Msg_RenderTypeAndName(s));
		JB_FreeIfDead(JB_Syx_ParentMsg(JB_SyxEmb, rz, _tmPf0));
		JB_Decr(_tmPf0);
		JB_Decr(fn);
		JB_SafeDecr(rz);
		return rz;
	}
	if ((!fn)) {
		JB_Object* obj = JB_Incr(s->Obj);
		if (JB_Object_Isa(obj, JB_AsClass(SCBase))) {
			Message* _tmPf2 = JB_Incr(SC_Base_DiissplayObj(((SCBase*)obj), rz));
			JB_Decr(rz);
			JB_Decr(fn);
			JB_Decr(obj);
			JB_SafeDecr(_tmPf2);
			return _tmPf2;
		}
		JB_Decr(obj);
	}
	if (JB_Str_Equals(purpose, JB_LUB[377], true)) {
		if ((!fn->NextFunc) and (!JB_Array_SyntaxCast(fn->Args))) {
			JB_Decr(fn);
			JB_SafeDecr(rz);
			return rz;
		}
	}
	while (fn) {
		Message* copy = JB_Incr(JB_Msg_CutifyCopy(fn->Source));
		JB_Tree_SyntaxAppend(rz, copy);
		JB_String* desc = JB_Incr(fn->Description);
		if (JB_Str_Exists(desc)) {
			JB_Msg_AppendSyx(rz, JB_SyxEmb, JB_LUB[0]);
			JB_Msg_AppendSyx(rz, JB_SyxBack, desc);
			if (fn->NextFunc) {
				JB_Msg_AppendSyx(rz, JB_SyxEmb, JB_LUB[0]);
			}
		}
		JB_Decr(desc);
		SCBase* l = JB_Incr(fn->Lookup);
		if (l) {
			if (SC_AC__CanUseName(l)) {
				SC_AC__IdentifyBetter(copy, l->Name);
			}
		}
		 else {
			JB_Decr(copy);
			JB_Decr(l);
			break;
		}
		JB_Decr(l);
		JB_Decr(copy);
		if ((!(JB_Str_OperatorStarts(purpose, JB_LUB[377])))) {
			break;
		}
		JB_SetRef(fn, fn->NextFunc);
	};
	JB_Decr(fn);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_AC__DoCmd(Message* cmd, Message* arg) {
	Message* rz = nil;
	if ((!(JB_Msg_EqualsSyx(cmd, JB_SyxTmp, false)))) {
		JB_Decr(rz);
		return nil;
	}
	if (JB_Msg_SyntaxEquals(cmd, JB_LUB[332], false)) {
		JB_App__Crash(JB_LUB[0]);
	}
	if ((JB_Msg_SyntaxEquals(cmd, JB_LUB[378], false)) or (JB_Msg_SyntaxEquals(cmd, JB_LUB[319], false))) {
		JB_Decr(rz);
		return SC_AC__ReportBuildOrRestart(cmd, arg);
	}
	if (JB_Msg_SyntaxEquals(cmd, JB_LUB[302], false)) {
		JB_Decr(rz);
		return SC_AC__Debug(cmd);
	}
	if (JB_Tree_SyntaxEquals(cmd, 1, false)) {
		JB_Decr(rz);
		return SC_AC__Jump(cmd);
	}
	Message* _tmPf1 = JB_Incr(JB_Msg_NeedSyx(cmd, JB_SyxStr));
	JB_String* _tmPf0 = JB_Incr(JB_Msg_Nyme(_tmPf1));
	JB_Decr(_tmPf1);
	JB_String* req = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	SCFile* my_file = JB_Incr(((SCFile*)JB_Dict_ValueStr(SC__Comp_Files, req)));
	JB_Decr(req);
	if (JB_File_SyntaxCast(my_file)) {
		JB_SetRef(rz, SC_AC__MainAct(cmd, my_file));
	}
	 else {
		if ((!false)) {
			JB_Str_SyntaxExpect(JB_LUB[379]);
		}
	}
	JB_Decr(my_file);
	JB_SafeDecr(rz);
	return rz;
}

bool SC_AC__Enter() {
	if ((!(JB_Rec_OK(JB_StdErr) and ((bool)SC__AC_ShouldEnter)))) {
		return nil;
	}
	JB_SetRef(SC__AC_Perry, JB_Proc__Parent());
	if (JB_Proc_IsOpen(SC__AC_Perry)) {
		SC_AC__ReturnsWhenPerryClosesUs();
	}
	return true;
}

JB_String* SC_AC__ErrName() {
	JB_Error* err = JB_Rec_Pop(JB_StdErr);
	return ((JB_String*)JB_Ternary(((bool)err), err->Name, JB_LUB[363]));
}

Message* SC_AC__FuncTmps() {
	Message* rz = nil;
	if (SC__AC_func_tmp_src->Cleaned) {
		JB_Decr(rz);
		return JB_Macro_Pz(SC__AC_func_tmp_src);
	}
	SC__AC_func_tmp_src->Cleaned = true;
	JB_SetRef(rz, JB_Macro_Pz(SC__AC_func_tmp_src));
	{
		Message* ch = JB_Incr(((Message*)JB_Tree_First_(rz)));
		while (ch) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
			if ((!JB_Msg_EqualsSyx(ch, JB_SyxDot, false))) {
				JB_Msg_AppendSyx(ch, JB_SyxStr, ch->Name);
			}
			if ((!JB_Msg_EqualsSyx(ch, JB_SyxStr, false))) {
				Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(ch)));
				Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(ch)));
				JB_SetRef(_tmPf2->Name, JB_Str_OperatorPlus(_tmPf3->Name, JB_LUB[170]));
				JB_Decr(_tmPf3);
				JB_Decr(_tmPf2);
			}
			ch->Func = JB_SyxDot;
			JB_SetRef(ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(ch);
		(rz);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

SCFunction* SC_AC__GetFunc(Message* cmd, SCFile* myfile, int ff, int n) {
	Message* src = ((Message*)JB_Ring_Last(cmd));
	if ((!JB_Msg_EqualsSyx(src, JB_SyxDot, false))) {
		return SC_AC__GetFunc2(cmd, myfile, ff, n);
	}
	SCFunction* fn = ({
		SCFunction* _X = SC__AC_AnonFn;
		if ((!_X)) {
			_X = SC_Func__New(nil);
			JB_SetRef(SC__AC_AnonFn, _X);
		}
		 _X;
	});
	Message* prm = ((Message*)JB_Tree_Get(src, 1));
	Message* mpos = ((Message*)JB_Tree_Get(prm, 0));
	Message* str = ((Message*)JB_Tree_Get(prm, 1));
	if ((!(((bool)mpos) and ((bool)str)))) {
		JB_Str_SyntaxExpect(JB_LUB[380]);
		return nil;
	}
	Message* f = ((Message*)JB_Ring_First(src));
	SCBase* parent = SC_Comp__FindModuleOrClass(f, false);
	if ((!parent)) {
		f->Func = JB_SyxName;
		parent = SC_Comp__FindModuleOrClass(f, true);
	}
	if ((!parent)) {
		JB_Str_SyntaxExpect(JB_LUB[381]);
		return nil;
	}
	if ((parent == SC__AC_AnonParent) and (JB_Msg_SyntaxEquals(str, SC__AC_AnonText, false))) {
		return fn;
	}
	SCObject* orig = SC_Func_InsertIn(fn, parent, src->Name);
	int64 pos = JB_Msg_Int(mpos, 0);
	JB__Tk_DotInsertAllow = true;
	if (SC_Func_update_source(fn, pos, str->Name, myfile, orig)) {
		JB_SetRef(SC__AC_AnonParent, parent);
		JB_SetRef(SC__AC_AnonText, str->Name);
		return fn;
	}
	return nil;
}

SCFunction* SC_AC__GetFunc2(Message* cmd, SCFile* myfile, int f, int n) {
	Message* ast = SC_SCFile_AST(myfile);
	if (ast) {
		Message* src = JB_Msg_FindPos(ast, f, n);
		if (src) {
			return JB_Msg_InsideFunc(src);
		}
	}
	return nil;
}

SCBase* SC_AC__GetScope(Message* orig, int* types) {
	if ((!orig)) {
		return SC__Comp_program;
	}
	if (JB_Msg_EqualsSyx(orig, JB_SyxAsk, false)) {
		(*types) = 8;
		return SC__Comp_program;
	}
	Message* f = JB_Incr(JB_Msg_CutifyCopy(orig));
	SCArg* arg = JB_Incr(JB_Msg_MsgArg(orig));
	Syntax fn = f->Func;
	if (fn == JB_SyxDot) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(f)));
		SCObject* decl = JB_Incr(SC_TypeOfExprModulesOK(_tmPf1, arg, nil));
		JB_Decr(_tmPf1);
		if ((!decl)) {
			if ((!false)) {
				JB_Str_SyntaxExpect(JB_LUB[382]);
			}
			JB_Decr(f);
			JB_Decr(arg);
			JB_Decr(decl);
			return nil;
		}
		if (JB_Object_Isa(decl, JB_AsClass(SCBase))) {
			JB_Decr(f);
			JB_Decr(arg);
			JB_SafeDecr(decl);
			return ((SCBase*)decl);
		}
		if (JB_Object_FastIsa(decl, JB_AsClass(SCDecl))) {
			SCClass* type = JB_Incr(((SCDecl*)decl)->Type);
			if (type) {
				JB_Decr(f);
				JB_Decr(arg);
				JB_Decr(decl);
				JB_SafeDecr(type);
				return type;
			}
			JB_Decr(type);
		}
		JB_Decr(decl);
	}
	JB_Decr(f);
	if (arg) {
		JB_SafeDecr(arg);
		return arg;
	}
	JB_Decr(arg);
	if (JB_Msg_IsTypeOfDecl(orig)) {
		(*types) = 1;
		return SC__Comp_program;
	}
	SCArg* _tmPf0 = JB_Incr(JB_Msg_MsgArg(orig));
	if ((!_tmPf0)) {
		JB_Str_SyntaxExpect(JB_LUB[383]);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_AC__HandleRestartedCompile() {
	JB_PrintLine(JB_LUB[384]);
	Array* args = JB_Incr(JB_App__Args());
	JB_String* last = JB_Incr(((JB_String*)JB_Array_Last(args)));
	if (JB_Str_IsJbin(last)) {
		JB_PrintLine(JB_LUB[385]);
		JB_FreeIfDead(((JB_String*)JB_Array_Pop(args)));
		Message* _tmPf0 = JB_Incr(JB_Str_parse_jbin(last));
		SC_AC__CmdWrap(_tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(last);
	JB_Decr(args);
	JB_PrintLine(JB_LUB[386]);
}

void SC_AC__IdentifyBetter(Message* node, JB_String* name) {
	JB_Msg_BecomeStr(node, JB_SyxEmb, JB_LUB[0]);
	node = ((Message*)JB_Ring_First(node));
	node->Func = JB_SyxDot;
	JB_Msg_AppendSyx(node, JB_SyxThg, name);
	JB_Msg_AppendSyx(node, JB_SyxEmb, JB_LUB[0]);
}

int SC_AC__Init_() {
	{
		JB_SetRef(SC__AC_AnonText, JB_LUB[0]);
		SC__AC_CompileUpToDate = true;
		SC__AC_ShouldEnter = 0;
		JB_SetRef(SC__AC_func_tmp_src, JB_Str_macro(JB_LUB[387]));
		JB_SetRef(SC__AC_all_tmp_src, JB_Str_macro(JB_LUB[388]));
		SC__AC_max_total = 400;
		SC__AC_total = 0;
	}
	;
	return 0;
}

int SC_AC__InitCode_() {
	return 0;
}

Message* SC_AC__Jump(Message* cmd) {
	Message* c = ((Message*)JB_Ring_First(cmd));
	if ((!JB_Msg_EqualsSyx(c, JB_SyxName, false))) {
		0;
	}
	 else if (JB_Msg_OperatorStarts(cmd, JB_LUB[389])) {
		return SC_AC__AutoComplete(((Message*)JB_Ring_First(c)), c->Name, cmd->Name);
	}
	 else {
		return SC_AC__DefineOrCall(c, cmd->Name, nil);
	}
	if (JB_Msg_OperatorStarts(cmd, JB_LUB[389])) {
		return SC_AC__RootTmpComplete(cmd);
	}
	if (JB_Msg_SyntaxEquals(c, JB_LUB[390], true)) {
		return SC_AC__JumpImport(cmd);
	}
	return nil;
}

Message* SC_AC__JumpImport(Message* cmd) {
	Message* rz = nil;
	Message* arg = JB_Incr(JB_Msg_NeedSyx(cmd, JB_SyxArg));
	Message* f = JB_Incr(((Message*)JB_Tree_Get(arg, 0)));
	JB_Decr(arg);
	if (f) {
		JB_File* proj = JB_Incr(SC_Comp__FindProject(f->Name, false));
		if (JB_File_Exists(proj, false)) {
			JB_SetRef(rz, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[365]));
			JB_String* _tmPf0 = JB_Incr(JB_File_Path(proj));
			JB_Msg_AppendSyx(rz, JB_SyxSStr, _tmPf0);
			JB_Decr(_tmPf0);
			JB_Msg_AppendNum(rz, 0);
		}
		JB_Decr(proj);
	}
	JB_Decr(f);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_AC__LocateDefinition(Message* msg, SCObject* already_defined, bool DisplayOnly) {
	Message* rz = nil;
	JB_SetRef(rz, SC_AC__LocateDefinitionSub(msg, already_defined, DisplayOnly));
	if (JB_Msg_EqualsSyx(rz, JB_SyxArg, false)) {
		Message* p = JB_Incr(((Message*)JB_Ring_Parent(rz)));
		if (p) {
			JB_SetRef(rz, p);
		}
		JB_Decr(p);
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_AC__LocateDefinitionSub(Message* msg, SCObject* already_defined, bool DisplayOnly) {
	if (already_defined) {
		return already_defined->Source;
	}
	if ((JB_Msg_EqualsSyx(msg, JB_SyxThg, false)) and JB_Msg_OperatorIn(msg, JB_SyxFunc)) {
		msg = ((Message*)JB_Ring_Parent(msg));
	}
	SCFunction* fn = JB_Msg_MsgFunc(msg);
	if (fn) {
		Message* it = fn->Source;
		if (it) {
			return it;
		}
	}
	SCDecl* ty = SC_TypeOfExpr(msg, nil, nil);
	if ((!ty)) {
		return JB_Msg_ModuleSrc(msg);
	}
	if (SC_Class_EqualsType(ty->Type, kSC__SCBaseType_FuncProto, false)) {
		JB_Object* l = ty->IsLookupOnly;
		if (JB_Object_FastIsa(l, JB_AsClass(SCFunction))) {
			return ((SCFunction*)l)->Source;
		}
	}
	if ((!DisplayOnly) and (JB_Msg_EqualsSyx(msg, JB_SyxDecl, false))) {
		return ty->Type->Source;
	}
	Message* src = ty->Source;
	if (src) {
		if (DisplayOnly and SC_Decl_SyntaxIs(ty, kSC__SCDeclInfo_const)) {
			JB_SetRef(ty->Name, msg->Name);
			return SC_Decl_WriteDeclFull(ty, JB_LUB[0], true);
		}
		if ((JB_Msg_EqualsSyx(src, JB_SyxDecl, false)) and (JB_Msg_EqualsSyx(((Message*)JB_Ring_Last(src)), JB_SyxRel, false))) {
			src = JB_Msg_NiceCopy(src, nil);
			Message* L = ((Message*)JB_Ring_Last(src));
			JB_FreeIfDead(JB_Msg_ReplaceWith(L, ((Message*)JB_Ring_First(L))));
		}
		return src;
	}
	if (DisplayOnly) {
		SCClass* t = ty->Type;
		Message* _tmP113 = t->TypeNormal->Source;
		if ((!_tmP113)) {
			_tmP113 = t->SourceClass;
		}
		return _tmP113;
	}
	return nil;
}

Message* SC_AC__Log() {
	Message* rz = nil;
	JB_SetRef(rz, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[391]));
	JB_String* _tmPf0 = JB_Incr(SC_Ext__LogName());
	JB_Msg_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_AC__MainAct(Message* cmd, SCFile* my_file) {
	Message* rz = nil;
	int f = ((int)JB_Msg_Int(JB_Msg_NeedSyxInt(cmd, JB_SyxNum, 1), 0));
	int n = ((int)JB_Msg_Int(JB_Msg_NeedSyxInt(cmd, JB_SyxNum, 2), 0));
	if ((!n)) {
		JB_Str_SyntaxExpect(JB_LUB[392]);
		return nil;
	}
	SC_SCFile_Use(my_file);
	SCFunction* fn = SC_AC__GetFunc(cmd, my_file, f, n);
	JB_ClassData_Restore((JB_AsClass(Message)));
	if ((!fn)) {
		return nil;
	}
	Message* thg = JB_Msg_FindPos(fn->Source, f, n);
	if ((!thg) and (JB_Msg_SyntaxEquals(cmd, JB_LUB[364], false))) {
		thg = fn->Source;
	}
	if ((JB_Msg_EqualsSyx(thg, JB_SyxThg, false)) and ((JB_Msg_SyntaxEquals(fn->Source, JB_LUB[393], false)) and (((Message*)JB_Ring_Parent(thg)) == fn->Source))) {
		return SC_AC__Define_Behaviour(fn, cmd->Name);
	}
	if (JB_Msg_OperatorStarts(cmd, JB_LUB[365]) or (JB_Msg_OperatorStarts(cmd, JB_LUB[373]) or JB_Msg_OperatorStarts(cmd, JB_LUB[364]))) {
		return SC_AC__Backup_Define(my_file, f, thg, cmd->Name);
	}
	if ((!(thg))) {
		JB_Str_SyntaxExpect(JB_LUB[362]);
		return nil;
	}
	if ((!(JB_Msg_OperatorStarts(cmd, JB_LUB[389])))) {
		JB_Str_SyntaxExpect(JB_LUB[374]);
		return nil;
	}
	Message* stuff = JB_Msg_NeedSyxInt(cmd, JB_SyxStr, 3);
	Message* Auto = SC_AC__MainActAutoComplete(thg, JB_Msg_Nyme(stuff), cmd);
	if (Auto) {
		rz = JB_Syx_OperatorPlus(JB_SyxArg, JB_LUB[394]);
		JB_Tree_SyntaxAppend(rz, ((Message*)JB_Tree_Get(stuff, 0)));
		JB_Tree_SyntaxAppend(rz, Auto);
	}
	return rz;
}

Message* SC_AC__MainActAutoComplete(Message* thg, JB_String* str, Message* cmd) {
	if (JB_Msg_EqualsSyx(thg, JB_SyxTmp, false)) {
		return SC_AC__TmpAutoComplete(thg, str, cmd->Name);
	}
	return SC_AC__AutoComplete(thg, str, cmd->Name);
}

void SC_AC__ReInit() {
	JB_ClassData_Restore((JB_AsClass(Message)));
	JB__Tk_UsingPos = -1;
}

Message* SC_AC__ReportBuild(Message* cmd) {
	if (JB_Rec_OK(JB_StdErr) and (JB_Msg_SyntaxEquals(cmd, JB_LUB[378], false))) {
		Message* _tmPf0 = JB_Incr(SC_AC__Log());
		JB_Proc_Send(SC__AC_Perry, _tmPf0, 0);
		JB_Decr(_tmPf0);
		SC_Ext__ExtComp();
	}
	JB_Tree_Clear(cmd);
	if (JB_Rec_Problems(JB_StdErr)) {
		Message* _tmPf1 = JB_Incr(SC_Comp__ErrorsToPerry());
		JB_Tree_SyntaxAppend(cmd, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else if (JB_Msg_SyntaxEquals(cmd, JB_LUB[378], false)) {
		JB_String* _tmPf2 = JB_Incr(SC_Ext__ProductPath());
		JB_Msg_SyntaxAppend(cmd, _tmPf2);
		JB_Decr(_tmPf2);
	}
	 else {
		JB_Msg_AppendSyx(cmd, JB_SyxThg, JB_LUB[395]);
	}
	return cmd;
}

Message* SC_AC__ReportBuildOrRestart(Message* cmd, Message* arg) {
	if ((!SC__AC_CompileUpToDate)) {
		SC_AC__Restart(arg);
	}
	SC__AC_CompileUpToDate = false;
	return SC_AC__ReportBuild(cmd);
}

Message* SC_AC__RespondDefine(Message* msg, Message* s, JB_String* purpose) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Syx_Msg(JB_SyxTmp, purpose));
	if (JB_Str_OperatorStarts(purpose, JB_LUB[365])) {
		SC_AC__ActualDefine(rz, s, purpose);
	}
	 else {
		Message* _tmPf0 = JB_Incr(SC_AC__Diissplay(msg, s, purpose));
		JB_Tree_SyntaxAppend(rz, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_SafeDecr(rz);
	return rz;
}

void SC_AC__Restart(Message* arg) {
	Array* _tmPf0 = JB_Incr(JB_App__Args());
	JB_String* _tmPf1 = JB_Incr(JB_Msg_render_jbin(arg, JB_LUB[0], nil));
	JB_Array_SyntaxAppend(_tmPf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_App__Restart();
}

void SC_AC__ReturnsWhenPerryClosesUs() {
	SC_Comp__CompileAll();
	SC_AC__ReInit();
	SC_AC__HandleRestartedCompile();
	{
		Process* _LoopSrcf1 = JB_Incr(SC__AC_Perry);
		while (JB_Proc_IsOpen(_LoopSrcf1)) {
			Message* cmd = JB_Incr(JB_Proc_Get(_LoopSrcf1, 4133486592000));
			if ((!cmd)) {
				JB_Decr(cmd);
				break;
			}
			SC_AC__CmdWrap(cmd);
			JB_Decr(cmd);
		};
		JB_Decr(_LoopSrcf1);
	};
}

Message* SC_AC__RootTmpComplete(Message* cmd) {
	Message* rz = nil;
	Message* f = ((Message*)JB_Tree_Get(((Message*)JB_Tree_Get(cmd, 0)), 0));
	JB_String* req = JB_Msg_Nyme(((Message*)JB_Ring_NextSib(f)));
	int flags = 0;
	flags = (flags + (JB_Msg_IsModuleType(f) << 1));
	flags = (flags + (JB_Msg_IsClassType(f) << 2));
	flags = (flags + (JB_Msg_LinkageType(f) << 3));
	if ((!(flags))) {
		flags = 1;
	}
	rz = JB_Syx_Msg(JB_SyxTmp, cmd->Name);
	Message* arg = JB_Msg_Msg(rz, JB_SyxArg, req);
	{
		Message* _LoopSrcf2 = SC_AC__AllTmps();
		Message* ch = ((Message*)JB_Tree_First_(_LoopSrcf2));
		while (ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(ch));
			JB_String* found = ch->Name;
			if ((((bool)(ch->Flags & flags))) and (JB_Str_OperatorStarts(found, req))) {
				Message* tmp = JB_Syx_ParentMsg(JB_SyxTmp, arg, found);
				JB_Msg_AppendSyx(tmp, JB_SyxStr, JB_Str_Before(found, JB_LUB[396]));
			}
			ch = _Nf1;
		};
		(_LoopSrcf2);
	}
	;
	return rz;
}

Message* SC_AC__TmpAutoComplete(Message* f, JB_String* name, JB_String* type) {
	Message* rz = nil;
	bool finished = false;
	JB_SetRef(rz, JB_Syx_OperatorPlus(JB_SyxTmp, type));
	if ((!JB_Str_Equals(name, JB_LUB[397], true))) {
		{
			Message* _LoopSrcf2 = JB_Incr(SC_AC__FuncTmps());
			Message* ch = JB_Incr(((Message*)JB_Tree_First_(_LoopSrcf2)));
			while (ch) {
				Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
				if ((!(JB_Msg_OperatorStarts(ch, name)))) {
					0;
				}
				 else if ((JB_Str_CompareInt(ch->Name, 2, false) >= 1) and (JB_Str_Equals(ch->Name, name, true))) {
					finished = true;
				}
				 else {
					Message* arg = JB_Incr(JB_Msg_Msg(rz, JB_SyxArg, name));
					Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(ch)));
					JB_String* n = JB_Incr(_tmPf3->Name);
					JB_Decr(_tmPf3);
					Message* _tmPf4 = JB_Incr(JB_Syx_ParentMsg(JB_SyxTmp, arg, n));
					JB_Decr(arg);
					JB_Msg_AppendSyx(_tmPf4, JB_SyxStr, n);
					JB_Decr(_tmPf4);
					JB_Decr(n);
				}
				JB_SetRef(ch, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(ch);
			(_LoopSrcf2);
			JB_Decr(_LoopSrcf2);
		};
	}
	if (JB_Ring_HasChildren(rz)) {
		0;
	}
	 else if ((bool)f) {
		JB_SetRef(rz, SC_AC__AutoComplete(f, name, type));
	}
	 else {
		JB_SetRef(rz, nil);
	}
	JB_SafeDecr(rz);
	return rz;
}


int JB_API__Init_() {
	{
		JB__API_NilHappened = 0;
	}
	;
	return 0;
}

int JB_API__InitCode_() {
	return 0;
}

void JB_API__NilCallBack(JB_String* ErrorMessage) {
	JB_PrintLine(ErrorMessage);
}

bool JB_API__NilHandler() {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return nil;
	}
	debugger;
	if ((++JB__API_NilHappened) < 16) {
		JB_API__NilCallBack(JB_LUB[398]);
	}
	 else if (JB__API_NilHappened == 16) {
		JB_API__NilCallBack(JB_LUB[399]);
	}
	return false;
}


void JB_Constants__AddEscape(int i, FastString* fs) {
	JB_String* f = JB_Str__SyntaxAccess(i);
	if ((!((!JB_Str_Exists(((JB_String*)JB_Dict_ValueStr(JB__Constants_EscapeStr, f)))) or (!JB_Str_Exists(((JB_String*)JB_Dict_ValueStr(JB__Constants_EscapeChr, f))))))) {
		return;
	}
	JB_FS_AppendByte(fs, '\\');
	JB_FS_AppendHex(fs, i, 2);
	JB_String* t = JB_FS_GetResult(fs);
	if ((!(JB_Str_Exists(((JB_String*)JB_Dict_ValueStr(JB__Constants_EscapeStr, f)))))) {
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, f, t));
	}
	if ((!(JB_Str_Exists(((JB_String*)JB_Dict_ValueStr(JB__Constants_EscapeChr, f)))))) {
		(JB_Dict_ValueSet(JB__Constants_EscapeChr, f, t));
	}
}

int JB_Constants__Init_() {
	{
		JB_SetRef(JB__Constants_Name, JB_LUB[400]);
		JB_SetRef(JB__Constants_EscapeStr, (JB_Dict__New()));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[401], JB_LUB[402]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[403], JB_LUB[404]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[405], JB_LUB[406]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[407], JB_LUB[408]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[409], JB_LUB[410]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[411], JB_LUB[412]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[413], JB_LUB[414]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[415], JB_LUB[416]));
		JB_SetRef(JB__Constants_XML_EscapeStr, (JB_Dict__New()));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[417], JB_LUB[418]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[411], JB_LUB[419]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[409], JB_LUB[420]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[396], JB_LUB[421]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[422], JB_LUB[423]));
		JB_SetRef(JB__Constants_JS_EscapeStr, (JB_Dict__New()));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[424], JB_LUB[425]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[426], JB_LUB[427]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[403], JB_LUB[404]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[405], JB_LUB[406]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[407], JB_LUB[408]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[409], JB_LUB[410]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[413], JB_LUB[414]));
		JB_SetRef(JB__Constants_CSWordMiddle, JB_Str_UniCS(JB_LUB[428]));
		JB_SetRef(JB__Constants_CSLettersOnly, JB_Str_UniCS(JB_LUB[429]));
		JB_SetRef(JB__Constants_CSWordStart, JB_Str_UniCS(JB_LUB[430]));
		JB_SetRef(JB__Constants_CSNum, JB__Constants_CSWordMiddle);
		JB_SetRef(JB__Constants_CSLine, JB_Str_CharSetWithBool(JB_LUB[431], false));
		JB_SetRef(JB__Constants_CSAfterStatement, JB_Str_CharSetWithBool(JB_LUB[432], false));
		JB_SetRef(JB__Constants_CSLineBlack, JB_Str_CharSetWithBool(JB_LUB[433], false));
		JB_SetRef(JB__Constants_CSWrapSplit, JB_Str_CharSetWithBool(JB_LUB[434], false));
	}
	;
	return 0;
}

int JB_Constants__InitCode_() {
	{
	}
	;
	JB_Constants__InitConstants();
	return 0;
}

void JB_Constants__InitConstants() {
	JB_FreeIfDead(JB_Array__New0());
	JB_SetRef(JB__Constants_EscapeChr, JB_Dict__Copy(JB__Constants_EscapeStr));
	(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[435], JB_LUB[436]));
	JB_SetRef(JB__Constants_UnEscapeStr, JB_Dict__Reverse(JB__Constants_EscapeStr));
	JB_SetRef(JB__Constants_JS_UnEscapeStr, JB_Dict__Reverse(JB__Constants_JS_EscapeStr));
	JB_SetRef(JB__Constants_XML_UnEscapeStr, JB_Dict__Reverse(JB__Constants_XML_EscapeStr));
	(JB_Dict_ValueSet(JB__Constants_EscapeChr, JB_LUB[409], ((JB_String*)nil)));
	(JB_Dict_ValueSet(JB__Constants_EscapeChr, JB_LUB[435], ((JB_String*)nil)));
	(JB_Dict_ValueSet(JB__Constants_UnEscapeStr, JB_LUB[437], ((JB_String*)nil)));
	(JB_Dict_ValueSet(JB__Constants_UnEscapeStr, JB_LUB[413], JB_LUB[0]));
	(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[411], ((JB_String*)nil)));
	FastString* tfs = JB_Incr(JB_FS__New());
	{
		int i = 0;
		while (i < 256) {
			if ((i <= 31) or (((i == 127) or ((i == 192) or (i == 193))) or (i >= 245))) {
				JB_Constants__AddEscape(i, tfs);
			}
			i++;
		};
	}
	;
	JB_Decr(tfs);
	JB_MSR_EscapeCodeSet(JB__Constants_UnEscapeStr, true);
	JB_MSR_DecodeEntitySet(JB__Constants_UnEscapeStr, true);
	JB_MSR_DecodeEntitySet(JB__Constants_XML_UnEscapeStr, true);
	(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[438], JB_LUB[439]));
}

JB_String* JB_Constants__TestJB() {
	FastString* fs = JB_Incr(JB_FS__New());
	{
		int c = 0;
		while (c < 256) {
			JB_FS_AppendByte(fs, ((byte)c));
			c++;
		};
	}
	;
	JB_String* str = JB_Incr(JB_FS_GetResult(fs));
	JB_Decr(fs);
	if ((!JB_Str_EscapeTest(str))) {
		JB_Decr(str);
		return nil;
	}
	JB_Decr(str);
	JB_String* natural_input = JB_Incr(JB_LUB[440]);
	JB_String* jbin_input = JB_Incr(JB_LUB[441]);
	if ((!(JB_TestCasting()))) {
		debugger;
	}
	JB_FreeIfDead(JB_Str_UpperCase(JB_LUB[442]));
	LeakTester* LKT = JB_Incr(JB_Lk__New(JB_LUB[443]));
	JB_FreeIfDead(JB_EntityTest());
	JB_Lk_FinalTest(LKT);
	JB_Decr(LKT);
	if ((!JB_Rec_OK(JB_StdErr))) {
		JB_Decr(natural_input);
		JB_Decr(jbin_input);
		return nil;
	}
	Message* root = JB_Incr(JB_Str_Parse(natural_input, JB_SyxArg, true));
	JB_Decr(natural_input);
	if ((!root)) {
		JB_Decr(jbin_input);
		JB_Decr(root);
		return nil;
	}
	JB_Msg_jbinTest(root);
	if (JB_Str_Exists(jbin_input)) {
		Message* _tmPf1 = JB_Incr(JB_Msg_NiceCopy(root, nil));
		JB_Msg__TreeCompare(root, _tmPf1, false);
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(JB_Str_Parse(jbin_input, JB_SyxArg, true));
		JB_Msg__TreeCompare(root, _tmPf2, false);
		JB_String* _tmPf3 = JB_Incr(JB_Msg_Render(root, nil));
		JB_Msg_Test(root, _tmPf3, JB_LUB[442]);
		JB_Decr(_tmPf3);
		JB_String* _tmPf4 = JB_Incr(JB_Msg_render_jbin(root, JB_LUB[0], nil));
		JB_Msg_Test(root, _tmPf4, JB_LUB[444]);
		JB_Decr(_tmPf4);
		JB_Decr(_tmPf2);
	}
	JB_Decr(jbin_input);
	if ((!JB_Rec_OK(JB_StdErr))) {
		JB_Decr(root);
		return nil;
	}
	JB_Decr(root);
	return JB_EntityTest();
}


SCBase* SC_Linkage__Collect(Message* node, SCBase* name_space, Message* ErrPlace) {
	if ((!(name_space == SC__Comp_program))) {
		JB_Msg_SyntaxExpect(node, JB_LUB[360]);
		return nil;
	}
	SCBase* _tmPf0 = JB_Incr(SC_Linkage__LinkerSub(node, name_space, ErrPlace));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[445]);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* SC_Linkage__conf(JB_String* name) {
	return JB_Msg_GetConf(SC__Linkage_Dict, name, false);
}

int SC_Linkage__Init_() {
	{
		JB_SetRef(SC__Linkage_Dict, JB_Msg__NewBasic());
		JB_SetRef(SC__Linkage_Flags, JB_Msg__NewBasic());
	}
	;
	return 0;
}

int SC_Linkage__InitCode_() {
	return 0;
}

bool SC_Linkage__Interpreter() {
	JB_String* _tmPf0 = JB_Incr(SC_Linkage__SyntaxAccess(JB_LUB[446]));
	bool _tmPf1 = JB_Str_Yes(_tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

SCBase* SC_Linkage__LinkerSub(Message* node, SCBase* name_space, Message* ErrPlace) {
	Message* arg = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxArg));
	if (arg) {
		Message* cf = JB_Incr(JB_Msg_GetConf(arg, JB_LUB[447], false));
		if (cf) {
			JB_Tree_Remove(cf);
			JB_Tree_TakeAllFrom(SC__Linkage_Flags, cf);
		}
		JB_Tree_TakeAllFrom(SC__Linkage_Dict, arg);
		JB_Decr(arg);
		JB_Decr(cf);
		return SC__Comp_program;
	}
	JB_Decr(arg);
	return nil;
}

JB_String* SC_Linkage__SyntaxAccess(JB_String* name) {
	Message* _tmPf0 = JB_Incr(JB_Msg_GetConf(SC__Linkage_Flags, name, false));
	JB_String* _tmPf1 = JB_Incr(JB_Msg_Nyme(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}


int SC_Macros__Init_() {
	{
		JB_SetRef(SC__Macros_FS, JB_Str_macro(JB_LUB[448]));
		JB_SetRef(SC__Macros_InitExpand, JB_Str_macro(JB_LUB[449]));
		JB_SetRef(SC__Macros_MainArg2, JB_Str_macro(JB_LUB[450]));
		JB_SetRef(SC__Macros_MainArg1, JB_Str_macro(JB_LUB[451]));
		JB_SetRef(SC__Macros_Worked2, JB_Str_macro(JB_LUB[452]));
		JB_SetRef(SC__Macros_ASM_Datatype, JB_Str_macro(JB_LUB[453]));
		JB_SetRef(SC__Macros_Copier, JB_Str_macro(JB_LUB[454]));
		JB_SetRef(SC__Macros_Copier2, JB_Str_macro(JB_LUB[455]));
		JB_SetRef(SC__Macros_Setter, JB_Str_macro(JB_LUB[456]));
	}
	;
	return 0;
}

int SC_Macros__InitCode_() {
	return 0;
}




void SC_Options__ColorSet(bool Value) {
	JB__ErrorColors_Enabled = Value;
}

bool SC_Options__Color() {
	return JB__ErrorColors_Enabled;
}

int SC_Options__Init_() {
	{
		JB_SetRef(SC__Options_BannedClasses, ((Dictionary*)nil));
		JB_SetRef(SC__Options_output_path, JB_LUB[0]);
		JB_SetRef(SC__Options_SingleFileInput, JB_LUB[0]);
		JB_SetRef(SC__Options_Variant, JB_LUB[0]);
		JB_SetRef(SC__Options_Arch, JB_LUB[0]);
		SC__Options_SingleCppOutput = true;
		SC__Options_TargetDebug = false;
		SC__Options_PrintLibraries = false;
		SC__Options_HideMultipleErrors = true;
		SC__Options_Products = kSC__Options_native;
		SC__Options_Cpp = true;
		SC__Options_Compile = true;
		SC__Options_KeepAllErrors = false;
		SC__Options_Scripting = false;
		SC__Options_MakeLib = false;
		SC__Options_CheckMaxVars = false;
		SC__Options_ListAllLib = false;
		SC__Options_ForceRecompile = false;
		SC__Options_Silent = false;
		SC__Options_Is32Bit = false;
		SC__Options_IsDirectTest = false;
		SC__Options_ProjectIsLibrary = false;
		SC__Options_ProjectIsMiniLib = false;
		SC__Options_IgnoreCantSaveErrors = false;
		SC__Options_ArgStats = false;
		SC__Options_PrintCompileString = false;
		SC__Options_PrintFiles = false;
		SC__Options_Flow = false;
		SC__Options_PrintStages = false;
		SC__Options_Warnings = false;
		SC__Options_UseFuncCallCount = false;
		SC__Options_ExternalCompile = false;
		SC__Options_Final = false;
		SC__Options_Optimise = 1;
		SC__Options_SelfReplacement = 0;
		SC__Options_OperationCount = 0;
		SC__Options_Perry = 0;
	}
	;
	return 0;
}

int SC_Options__InitCode_() {
	return 0;
}



Message* JB_Tk__AddToOutput(Message* Output, Message* curr, Message* prev, int pos) {
	if (prev) {
		int Extra = JB_Msg_PrevIndentCheck(curr, prev);
		if (Extra < 0) {
			return JB_Tk__LoweredIndent(Output, curr);
		}
		if (Extra > 0) {
			if ((Extra == 2) and (JB_int_OperatorIsa(((int)prev->Indent), 4))) {
				Syntax cf = curr->Func;
				if ((prev->Func != JB_SyxTmp) or ((cf != JB_SyxTmp) and (cf != JB_SyxBra))) {
					return JB_Tk__UnexpectedSyntax(curr);
				}
				if (((bool)(curr->Indent & 1))) {
					return JB_Tk__ErrorAdd(JB_LUB[457], curr->Position);
				}
				JB_FreeIfDead(JB_Tk__NewParentName(prev, JB_SyxArg, curr->Position, JB_LUB[0]));
				JB_Tree_SyntaxAppend(prev, curr);
				return prev;
			}
			return JB_Msg_GoIntoInvisArg(curr, prev, pos);
		}
	}
	JB_Tree_SyntaxAppend(Output, curr);
	return Output;
}

void JB_Tk__AddXMLText(Message* XML, JB_String* s, int start, int i) {
	Ind a = JB_Str_OutWhite(s, start, JB_int__max());
	if ((!(a < i))) {
		return;
	}
	JB_String* str = JB_Incr(JB_Str_Range(s, start, i));
	JB_String* str2 = JB_Incr(JB_Str_Trim(str, nil));
	JB_Decr(str);
	JB_String* str3 = JB_Incr(JB_Str_MultiReplaceAll(str2, JB__Constants_XML_UnEscapeStr, JB_StdErr));
	JB_Decr(str2);
	JB_FreeIfDead(JB_Tk__NewParentName(XML, JB_SyxXTxt, start, str3));
	JB_Decr(str3);
}

Message* JB_Tk__BarThings(int Start, Syntax Syx) {
	Message* rz = nil;
	if ((!(JB_Tk__NextByte() != '='))) {
		JB_Decr(rz);
		return nil;
	}
	JB__Tk_StopBars = (kJB__Tk_TemporalSyx | kJB__Tk_FuncAfterBar);
	Message* item = JB_Incr(JB_Tk__ProcessThingNoBar(kJB__Tk_OppNoBar, false));
	if (item) {
		JB_SetRef(item, JB_Tk__ParseItem(item, 0, kJB__Tk_OppNoBar));
	}
	 else {
		JB_SetRef(item, JB_Tk__NewEmpty(nil, JB_SyxEmb, Start, Start));
	}
	JB__Tk_StopBars = 0;
	if ((!JB_Tk__ExpectEndChar(JB_Tk__NextStart(), JB_LUB[458], true))) {
		JB_Decr(rz);
		JB_Decr(item);
		return nil;
	}
	JB_SetRef(rz, JB_Tk__NewParentName(nil, Syx, Start, JB_LUB[0]));
	JB_Tree_SyntaxAppend(rz, item);
	JB_Decr(item);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__BeforeRelSub(int Start, bool Mode) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParent(nil, JB_SyxBRel, Start, JB_Tk__NextStart()));
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(0, Mode));
	if ((!_tmPf0)) {
		JB_Decr(rz);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(rz);
	return rz;
}

bool JB_Tk__CanStatement() {
	return JB_CS_HasChar(JB__Constants_CSAfterStatement, JB_Tk__NextByte());
}

Message* JB_Tk__ChainTemporalRels(Message* FirstThing, Message* opp) {
	Message* rz = nil;
	if (JB_Msg_EqualsSyx(opp, JB_SyxSCom, false)) {
		JB_Tree_SyntaxAppend(opp, FirstThing);
		JB_Decr(rz);
		return opp;
	}
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxTRel, FirstThing->Position, JB_LUB[0]));
	JB_Tree_SyntaxAppend(rz, FirstThing);
	JB_Tree_SyntaxAppend(rz, opp);
	if ((!JB_Tk__WillEnd())) {
		Message* Last = JB_Incr(JB_Tk__ProcessThingOrTmp(kJB__Tk_Opp));
		if (Last) {
			Message* _tmPf0 = JB_Incr(JB_Tk__FixTRels(rz, Last));
			JB_Decr(rz);
			JB_Decr(Last);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(Last);
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__CloseXML(Message* XML, int i, JB_String* s) {
	Ind CloseEnd = JB_Str_FindByte(s, '>', i + 2, JB_int__max());
	if ((!(JB_Ind_SyntaxCast(CloseEnd)))) {
		return JB_Tk__ErrorAdd(JB_LUB[459], i);
	}
	JB_String* CloseName = JB_Incr(JB_Str_Range(s, i + 2, CloseEnd));
	if ((!JB_Str_Equals(CloseName, XML->Name, false))) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[460]);
		JB_FS_AppendString(_fsf0, CloseName);
		JB_FS_AppendString(_fsf0, JB_LUB[461]);
		JB_FS_AppendString(_fsf0, XML->Name);
		JB_FS_AppendByte(_fsf0, '>');
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Decr(CloseName);
		Message* _tmPf2 = JB_Incr(JB_Tk__ErrorAdd(_tmPf1, i));
		JB_Decr(_tmPf1);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_Decr(CloseName);
	(JB_Tk__NextStartSet((++CloseEnd)));
	XML->Extra = ((XML->Position - CloseEnd) | JB__Tk_BaseExtra);
	return XML;
}

Message* JB_Tk__DecorateThing(Message* R, int Ops) {
	JB_Incr(R);
	JB_SetRef(R, JB_Tk__GetFuncAfter(R));
	if (JB_Tk__WillEnd()) {
		JB_SafeDecr(R);
		return R;
	}
	int NotTemp = Ops & (~kJB__Tk_OppTemporal);
	if (((bool)NotTemp) and (!JB_Msg_EqualsSyx(R, JB_SyxArg, false))) {
		JB_SetRef(R, JB_Tk__MakeRel(R, NotTemp));
	}
	if (((bool)(Ops & kJB__Tk_OppTemporal))) {
		Message* opp = JB_Incr(JB_Tk__Process(kJB__Tk_OppTemporal, false, nil));
		if (opp) {
			if (JB_Msg_SyntaxEquals(opp, JB_LUB[462], false)) {
				Message* A = JB_Incr(JB_Tk__PostInnerAdj(R, opp));
				JB_Decr(R);
				JB_Decr(opp);
				Message* _tmPf1 = JB_Incr(JB_Tk__DecorateThing(A, Ops));
				JB_Decr(A);
				JB_SafeDecr(_tmPf1);
				return _tmPf1;
			}
			Message* _tmPf0 = JB_Incr(JB_Tk__ChainTemporalRels(R, opp));
			JB_Decr(R);
			JB_Decr(opp);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(opp);
	}
	JB_SafeDecr(R);
	return R;
}

Message* JB_Tk__DotSub(Syntax fn, int Start, Message* parent) {
	Message* rz = nil;
	int after = JB_Tk__Byte((++Start));
	if (JB_CS_HasChar(JB__Constants_CSWordStart, after)) {
		after = JB_Tk__WordAfter(Start);
		if ((!after)) {
			return nil;
		}
	}
	 else if (JB__Tk_DotInsertAllow) {
		after = Start;
		JB__Tk_DotInsertAllow = false;
	}
	 else {
		return nil;
	}
	rz = JB_Tk__NewSkip(nil, fn, Start - 1, Start, after);
	if (JB_Tk__EatString(JB_LUB[463])) {
		JB_Tk__Params(rz, after);
	}
	 else {
		Message* prms = JB_Tk__NewEmpty(rz, JB_SyxEmb, after, after);
		if (((JB_Msg_EqualsSyx(parent, JB_SyxArg, false))) and JB_Tk__CanStatement()) {
			Message* p = JB_Tk__ProcessThingParent(prms, kJB__Tk_Opp, kJB__Tk_Thing);
			if (p) {
				JB_Tree_SyntaxAppend(prms, p);
				prms->Func = JB_SyxPrm;
			}
		}
	}
	return rz;
}

int JB_Tk__EmbeddedArg(JB_String* close, Message* R, int Flags) {
	Message* arg = JB_Incr(JB_Tk__NewParentName(R, JB_SyxArg, JB_Tk__NextStart(), JB_LUB[0]));
	int _tmPf0 = JB_Tk__EmbeddedCode(close, arg, Flags);
	JB_Decr(arg);
	return _tmPf0;
}

int JB_Tk__EmbeddedCode(JB_String* close, Message* dest, int TmpoFlags) {
	Ind result = JB_Str_InStr(JB__Tk_Data, close, JB_Tk__NextStart(), JB_int__max(), false);
	if ((!(JB_Ind_SyntaxCast(result)))) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[464]);
		JB_FS_AppendString(_fsf0, close);
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf2, JB_Tk__NextStart()));
		JB_Decr(_tmPf2);
		return result;
	}
	JB_Tk__ParseLoop(dest, TmpoFlags);
	if (JB_Tk__NextStart() > result) {
		FastString* _fsf1 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf1, JB_LUB[465]);
		JB_FS_AppendString(_fsf1, close);
		JB_FS_AppendString(_fsf1, JB_LUB[466]);
		JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf3, result));
		JB_Decr(_tmPf3);
		return result;
	}
	result = (result + JB_Str_Length(close));
	(JB_Tk__NextStartSet(result));
	return result;
}

Message* JB_Tk__ErrorAdd(JB_String* s, Ind Start) {
	if ((!JB_Tk__OK())) {
		return nil;
	}
	return JB_Tk__ErrorAlwaysAdd(s, Start);
}

Message* JB_Tk__ErrorAlwaysAdd(JB_String* s, Ind Start) {
	(JB_Tk__ErrorStartSet(Start));
	Message* _tmPf0 = JB_Incr(JB_Msg__NewBasic());
	JB_Error* err = JB_Incr(JB_Err__New(_tmPf0, JB_LUB[0], kJB__ErrorSeverity_Error, JB_LUB[0]));
	JB_Decr(_tmPf0);
	err->Position = Start;
	(JB_Err_SyntaxIsSet(err, kJB__ErrorFlags_dontstrip, true));
	(JB_Err_SyntaxIsSet(err, kJB__ErrorFlags_parse, true));
	JB_SetRef(err->Name, s);
	JB_SetRef(err->OriginalData, JB__Tk_Data);
	JB_Rec_SyntaxAppend(JB_StdErr, err);
	JB_Decr(err);
	return nil;
}

void JB_Tk__ErrorEvent(int Start, int ExpectedBits, int RealBits) {
	//visible;
	FastString* Err = JB_Incr(JB_FS__New());
	if ((!(((bool)(RealBits & kJB__Tk_illegalchar))))) {
		if ((!(((bool)ExpectedBits) and (((bool)RealBits) and ((bool)JB_Tk__FindError(ExpectedBits)))))) {
			JB_FS_AppendString(Err, JB_LUB[467]);
		}
		 else {
			{
				int _Valuef1 = 0;
				while (_Valuef1 < 5) {
					ExpectedBits = JB_Tk__MessageErrorSub(Err, ExpectedBits, RealBits);
					_Valuef1++;
					if ((!ExpectedBits)) {
						break;
					}
				};
			}
			;
			JB_FS_AppendString(Err, JB_LUB[468]);
		}
	}
	if (RealBits == kJB__Tk_EndOfLine) {
		JB_FS_AppendString(Err, JB_LUB[469]);
	}
	 else if ((!RealBits)) {
		JB_FS_AppendString(Err, JB_LUB[470]);
	}
	 else {
		if (JB_Tk__NextStart() <= Start) {
			(JB_Tk__NextStartSet(Start + 1));
		}
		if (((bool)(RealBits & kJB__Tk_illegalchar))) {
			JB_FS_AppendString(Err, JB_LUB[471]);
			byte illegal = JB_Tk__Byte(Start);
			if (JB_byte_CanPrintAsNormalChar(illegal)) {
				JB_FS_AppendByte(Err, '\'');
				JB_FS_AppendByte(Err, JB_Tk__Byte(Start));
				JB_FS_AppendByte(Err, '\'');
			}
			 else {
				JB_FS_AppendString(Err, JB_LUB[472]);
				JB_FS_AppendHex(Err, illegal, 2);
				JB_FS_AppendByte(Err, ' ');
			}
		}
		 else {
			JB_FS_AppendByte(Err, '\'');
			Ind N = JB_int_OperatorMin(JB_Tk__NextStart(), (Start + 100));
			JB_String* _tmPf3 = JB_Incr(JB_Tk__Range(Start, N));
			JB_String* _tmPf2 = JB_Incr(JB_Str_Escape(_tmPf3));
			JB_Decr(_tmPf3);
			JB_FS_AppendString(Err, _tmPf2);
			JB_Decr(_tmPf2);
			JB_FS_AppendByte(Err, '\'');
		}
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SyntaxCast(Err));
	JB_Decr(Err);
	JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf4, Start));
	JB_Decr(_tmPf4);
}

void JB_Tk__ErrorLetter(int Start) {
	JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[473], Start));
}

bool JB_Tk__ExpectEndChar(int start, JB_String* s, bool Expect) {
	JB_Tk__CleanSpaces();
	if (JB_Tk__EatString(s)) {
		return true;
	}
	if (Expect) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[474]);
		JB_FS_AppendString(_fsf0, s);
		JB_FS_AppendByte(_fsf0, '\'');
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf1, start));
		JB_Decr(_tmPf1);
	}
	return false;
}

Message* JB_Tk__fAccess(int Start, Message* Parent) {
	Message* rz = nil;
	Ind pos = ((Ind)JB_Ternary(((bool)Parent), Parent->Position, ((Ind)Start)));
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxAcc, pos, JB_LUB[0]));
	Message* prms = JB_Incr(JB_Tk__NewParentName(rz, JB_SyxArr, Start, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(prms, JB_LUB[475], 0);
	(JB_Msg_AfterSet(rz, JB_Msg_After(prms)));
	JB_Decr(prms);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fAdjectiveOp(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxAdj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__Process(kJB__Tk_OppChain, kJB__Tk_Expect, nil));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fAdjectiveThing(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxAdj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(0, kJB__Tk_Expect));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fAfterRel(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, JB_SyxARel, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fArgColon(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxArg, Start, JB_LUB[0]));
	(JB_Msg_SyntaxIsSet(rz, kJB__MsgUIFlags_Style2, true));
	rz->Extra = (1 | JB__Tk_BaseExtra);
	while (true) {
		Message* Item = JB_Incr(JB_Tk__Process(kJB__Tk_Temporal, false, rz));
		if ((!Item)) {
			JB_SetRef(Item, JB_Tk__ProcessThing(kJB__Tk_Opp, false));
		}
		JB_Tree_SyntaxAppend(rz, Item);
		if ((!(((bool)Item) and JB_Tk__Allow(kJB__Tk_Comma)))) {
			JB_Decr(Item);
			break;
		}
		JB_Decr(Item);
	};
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fArgOpen(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxArg, Start, JB_LUB[0]));
	(JB_Msg_SyntaxIsSet(rz, kJB__MsgUIFlags_Style2, true));
	JB_Tk__ParseLoopFlags(rz, JB_LUB[476], kJB__Tk_Temporal);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fArray(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxArr, Start, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(rz, JB_LUB[475], kJB__Tk_TemporalSyxNoBar);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fAsk(int Start, Message* Parent) {
	return JB_Tk__fAskSub(Start, Parent, JB_SyxAsk);
}

Message* JB_Tk__fAskSub(int Start, Message* Parent, Syntax f) {
	Message* rz = nil;
	Message* opp = JB_Incr(JB_Tk__Process(kJB__Tk_Opp, kJB__Tk_Expect, nil));
	Message* first = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_OppSyx, kJB__Tk_Expect));
	if ((!(((bool)first) and ((bool)opp)))) {
		JB_Decr(rz);
		JB_Decr(opp);
		JB_Decr(first);
		return nil;
	}
	JB_SetRef(rz, JB_Tk__NewParentName(nil, f, Start, JB_LUB[0]));
	JB_Tree_SyntaxAppend(rz, first);
	JB_Decr(first);
	Message* NeedsAdj = JB_Incr(JB_Tk__Process(kJB__Tk_Opp, kJB__Tk_Allow, nil));
	if ((!(NeedsAdj))) {
		JB_Tree_SyntaxAppend(rz, opp);
	}
	 else {
		Message* adj = JB_Incr(JB_Tk__NewParentName(rz, JB_SyxAdj, NeedsAdj->Position, JB_LUB[0]));
		JB_Tree_SyntaxAppend(adj, opp);
		JB_Tree_SyntaxAppend(adj, NeedsAdj);
		JB_Decr(adj);
		Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThingParent(rz, kJB__Tk_OppSyx, kJB__Tk_Thing));
		JB_Tree_SyntaxAppend(rz, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(NeedsAdj);
	JB_Decr(opp);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fAtName(int Start, Message* Parent) {
	return JB_Tk__NewWord(nil, JB_SyxName, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fAtNamedExp(int Start, Message* Parent) {
	if ((!Parent)) {
		debugger;
		return nil;
	}
	if ((!JB_Tk__NeedName(Parent))) {
		return nil;
	}
	Parent->Func = JB_SyxName;
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(0, kJB__Tk_Expect));
	JB_Tree_SyntaxAppend(Parent, _tmPf0);
	JB_Decr(_tmPf0);
	return Parent;
}

Message* JB_Tk__fBackTick(int Start, Message* Parent) {
	Ind After = JB_Str_FindByte(JB__Tk_Data, '`', JB_Tk__NextStart(), JB_int__max());
	if ((!JB_Ind_SyntaxCast(After))) {
		return JB_Tk__ErrorAdd(JB_LUB[477], Start);
	}
	(JB_Tk__NextStartSet(After + 1));
	return JB_Tk__NewSkip(nil, JB_SyxBack, Start, Start + 1, After);
}

Message* JB_Tk__fBAdjectiveOp(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxBadj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__Process(kJB__Tk_OppChain, kJB__Tk_Expect, nil));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Tree_SyntaxAppend(rz, Parent);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fBAdjectiveThing(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxBadj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(0, kJB__Tk_Expect));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Tree_SyntaxAppend(rz, Parent);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fBeforeRel(int Start, Message* Parent) {
	return JB_Tk__BeforeRelSub(Start, kJB__Tk_Allow);
}

Message* JB_Tk__fBeforeRelMinus(int Start, Message* Parent) {
	byte c = JB_Tk__Byte(Start + 1);
	if (JB_byte_IsInt(c) and (JB_Tk__Byte(Start) == '-')) {
		return JB_Tk__NumberSub(Start + 1, Start);
	}
	return JB_Tk__BeforeRelSub(Start, kJB__Tk_Allow);
}

Message* JB_Tk__fBinary(int Start, Message* Parent) {
	Ind End = JB_Str_InStr(JB__Tk_Data, JB_LUB[478], Start + 2, JB_int__max(), false);
	if (JB_Ind_SyntaxCast(End)) {
		JB_String* S = JB_Incr(JB_Tk__Range(Start + 2, End));
		(JB_Tk__NextStartSet(End + 2));
		JB_String* _tmPf0 = JB_Incr(JB_Str_UnHex(S, nil));
		JB_Decr(S);
		Message* _tmPf1 = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxBin, Start, _tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return JB_Tk__ErrorAdd(JB_LUB[479], Start);
}

Message* JB_Tk__fBracket(int Start, Message* Parent) {
	Message* rz = nil;
	rz = JB_Tk__NewParentName(nil, JB_SyxList, Start, JB_LUB[0]);
	bool Lines = JB_Tk__ParseLoopFlags(rz, JB_LUB[480], kJB__Tk_TemporalSyxNoBar);
	if ((!Lines) and JB_Ring_HasChildCount(rz, 1)) {
		JB_Msg_BecomeStr(rz, JB_SyxBra, JB_LUB[0]);
	}
	return rz;
}

Message* JB_Tk__fChar(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__fCharSub(Start, Start, '\''));
	if ((!(rz))) {
		JB_Decr(rz);
		return JB_Tk__ErrorAdd(JB_LUB[481], JB_Tk__NextStart());
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fCharSub(int pos, int start, byte find) {
	Message* rz = nil;
	Ind After = JB_Str_JBFind(JB__Tk_Data, find, start + 1, JB_int__max());
	if ((!JB_Ind_SyntaxCast(After))) {
		JB_Decr(rz);
		return nil;
	}
	(JB_Tk__NextStartSet(After + 1));
	JB_String* _tmPf0 = JB_Incr(JB_Tk__Range(start + 1, After));
	JB_String* name = JB_Incr(JB_Str_Unescape(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxChar, pos, name));
	JB_Decr(name);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fComment(int Start, Message* Parent) {
	int Count = 1;
	Ind i = JB_Tk__NextStart();
	JB_String* d = JB_Incr(JB__Tk_Data);
	while (true) {
		i = JB_Str_FindByte(d, '/', i + 1, JB_int__max());
		if ((!JB_Ind_SyntaxCast(i))) {
			JB_Decr(d);
			return JB_Tk__ErrorAdd(JB_LUB[482], Start);
		}
		 else if (JB_Str_ByteValue(d, i - 1) == '*') {
			Count--;
		}
		 else if (JB_Str_ByteValue(d, i + 1) == '*') {
			Count++;
			i = (i + 2);
		}
		if ((!Count)) {
			break;
		}
	};
	JB_Decr(d);
	(JB_Tk__NextStartSet(i + 1));
	return JB__Tk_EndOfLineMarker;
}

Message* JB_Tk__fCommentLine(int Start, Message* Parent) {
	(JB_Tk__NextStartSet(JB_Str_Find(JB__Tk_Data, JB__Constants_CSLine, JB_Tk__NextStart(), JB_int__max())));
	return JB__Tk_EndOfLineMarker;
}

Message* JB_Tk__fDecl(int Start, Message* Parent) {
	Message* Result = JB_Incr(JB_Tk__BarThings(Start, JB_SyxDecl));
	if (((bool)Result) and (!JB_Tk__WillEnd())) {
		Message* Curr = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_OppSyx | kJB__Tk_OppTemporal, false));
		if (Curr) {
			JB_Tree_SyntaxAppend(Result, Curr);
		}
		JB_Decr(Curr);
	}
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fDot(int Start, Message* Parent) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(Parent)));
	Message* _tmPf1 = JB_Incr(JB_Tk__DotSub(JB_SyxDot, Start, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Tk__fDotAccess(int Start, Message* Parent) {
	Message* rz = nil;
	int n = JB_Tk__NextStart();
	Message* name = JB_Tk__NewWord(nil, JB_SyxStr, n, n);
	if ((!name)) {
		return nil;
	}
	int after = JB_Tk__NextStart();
	JB_SetRef(name->Name, JB_Str_ReplaceAll(name->Name, JB_LUB[483], JB_LUB[170], false, nil));
	rz = JB_Tk__NewEmpty(nil, JB_SyxAcc, Start, after);
	Message* prms = JB_Tk__NewEmpty(rz, JB_SyxArr, Start, Start);
	JB_Tree_SyntaxAppend(prms, name);
	return rz;
}

Message* JB_Tk__fEndOfLine(int Start, Message* Parent) {
	return JB__Tk_EndOfLineMarker;
}

Message* JB_Tk__fError(int Start, Message* Parent) {
	return nil;
}

Message* JB_Tk__fError2(int Start, Message* Parent) {
	return JB_Tk__ErrorAdd(JB_LUB[484], Start);
}

Message* JB_Tk__fFuncCall(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxFunc, Parent->Position, JB_LUB[0]));
	JB_Tk__Params(rz, Start);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__FillXML(Message* XML, Ind i) {
	JB_String* s = JB_Incr(JB__Tk_Data);
	if (JB_Str_ByteValue(s, i - 1) == '/') {
		(JB_Tk__NextStartSet(i + 1));
		JB_Decr(s);
		return XML;
	}
	(JB_Tk__NextStartSet(i));
	while (true) {
		int Prev = JB_Tk__NextStart();
		i = JB_Str_FindByte(s, '<', Prev, JB_int__max());
		if ((!(JB_Ind_SyntaxCast(i)))) {
			JB_Decr(s);
			return JB_Tk__ErrorAdd(JB_LUB[485], XML->Position);
		}
		JB_Tk__AddXMLText(XML, s, Prev, i);
		(JB_Tk__NextStartSet(i));
		byte next = JB_Str_ByteValue(s, i + 1);
		if (next == '/') {
			Message* _tmPf3 = JB_Incr(JB_Tk__CloseXML(XML, i, s));
			JB_Decr(s);
			JB_SafeDecr(_tmPf3);
			return _tmPf3;
		}
		if (next != '!') {
			Message* _tmPf0 = JB_Incr(JB_Tk__fXML(i, nil));
			if ((!_tmPf0)) {
				JB_Decr(s);
				JB_Decr(_tmPf0);
				return nil;
			}
			JB_Tree_SyntaxAppend(XML, _tmPf0);
			JB_Decr(_tmPf0);
		}
		 else if (JB_Str_MidEquals(s, i, JB_LUB[486], false)) {
			Message* _tmPf1 = JB_Incr(JB_Tk__XMLWhatever(i, 4, JB_LUB[487], JB_SyxXCom));
			if ((!_tmPf1)) {
				JB_Decr(s);
				JB_Decr(_tmPf1);
				return nil;
			}
			JB_Tree_SyntaxAppend(XML, _tmPf1);
			JB_Decr(_tmPf1);
		}
		 else if (JB_Str_MidEquals(s, i, JB_LUB[488], false)) {
			Message* _tmPf2 = JB_Incr(JB_Tk__XMLWhatever(i, 9, JB_LUB[489], JB_SyxXCDT));
			if ((!_tmPf2)) {
				JB_Decr(s);
				JB_Decr(_tmPf2);
				return nil;
			}
			JB_Tree_SyntaxAppend(XML, _tmPf2);
			JB_Decr(_tmPf2);
		}
		 else {
			JB_Decr(s);
			return JB_Tk__ErrorAdd(JB_LUB[0], i);
		}
	};
	JB_Decr(s);
	return nil;
}

int JB_Tk__FindError(int num) {
	if (num == kJB__Tk_Thing) {
		return kJB__Tk_Thing;
	}
	{
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(JB__Tk_ErrorNames));
		while (JB_Nav_MoveNext(_navf0)) {
			JB_String* Key = JB_Incr(JB_Nav_Name(_navf0));
			int i = ((int)JB_Str_TextIntegerValid(Key, nil));
			JB_Decr(Key);
			if ((num & i) == i) {
				JB_Decr(_navf0);
				return i;
			}
		};
		JB_Decr(_navf0);
	}
	;
	return 0;
}

Message* JB_Tk__fInnerNiceAdj(int Start, Message* Parent) {
	return JB_Tk__fAskSub(Start, Parent, JB_Syxbinn);
}

Message* JB_Tk__FixTRels(Message* self, Message* Last) {
	if ((!Last)) {
		0;
	}
	 else if ((!JB_Msg_EqualsSyx(Last, JB_SyxTRel, false))) {
		JB_Tree_SyntaxAppend(self, Last);
	}
	 else {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Last)));
		JB_Tree_SyntaxAppend(self, _tmPf0);
		JB_Decr(_tmPf0);
		(JB_Ring_FirstSet(Last, self));
		self = Last;
	}
	return self;
}

Message* JB_Tk__fMsgList(int Start, Message* Parent) {
	Message* Result = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxMsg, Start, JB_LUB[0]));
	Message* name = JB_Incr(JB_Tk__Process(kJB__Tk_TemporalWord, true, Result));
	if ((!name)) {
		JB_Decr(Result);
		JB_Decr(name);
		return nil;
	}
	Message* it = JB_Incr(((Message*)JB_Tree_Second(name)));
	JB_Decr(name);
	if (it) {
		JB_Decr(Result);
		Message* _tmPf0 = JB_Incr(JB_Tk__UnexpectedSyntax(it));
		JB_Decr(it);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(it);
	int Ops = kJB__Tk_OppSyx | (kJB__Tk_OppTemporal | kJB__Tk_OppYoda);
	while (JB_Tk__NextLineAndIndent(Result).Lines) {
		Message* item = JB_Incr(JB_Tk__ProcessThing(Ops, false));
		if ((!item)) {
			JB_Decr(item);
			break;
		}
		if (JB_Str_OperatorEndsWith(item->Name, JB_LUB[490])) {
			JB_Decr(Result);
			Message* _tmPf1 = JB_Incr(JB_Tk__ErrorAdd(JB_LUB[491], item->Position));
			JB_Decr(item);
			JB_SafeDecr(_tmPf1);
			return _tmPf1;
		}
		JB_Tree_SyntaxAppend(Result, item);
		JB_Decr(item);
	};
	JB_Tk__ExpectEndChar(Start, JB_LUB[490], true);
	(JB_Msg_AfterSet(Result, JB_Tk__NextStart()));
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fNumber(int Start, Message* Parent) {
	return JB_Tk__NumberSub(Start, Start);
}

Message* JB_Tk__fOpAsThing(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxOat, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__Process(kJB__Tk_Opp, false, nil));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_Opp, false));
	JB_Tree_SyntaxAppend(rz, _tmPf1);
	JB_Decr(_tmPf1);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fOppBracket(int Start, Message* Parent) {
	Message* result = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxBra, Start, JB_LUB[0]));
	Message* opp1 = JB_Incr(JB_Tk__Process(kJB__Tk_OppChain, false, nil));
	Message* opp2 = JB_Incr(JB_Tk__Process(kJB__Tk_Opp, false, nil));
	if ((!opp2)) {
		JB_Tree_SyntaxAppend(result, opp1);
	}
	 else {
		Message* rel = JB_Incr(JB_Tk__NewParentName(result, JB_SyxRel, JB_Tk__NextStart() - 1, JB_LUB[0]));
		JB_Tree_SyntaxAppend(rel, opp1);
		JB_Tree_SyntaxAppend(rel, opp2);
		Message* _tmPf0 = JB_Incr(JB_Tk__Process(kJB__Tk_OppChain, false, nil));
		JB_Tree_SyntaxAppend(rel, _tmPf0);
		JB_Decr(_tmPf0);
		JB_Decr(rel);
	}
	JB_Decr(opp2);
	JB_Decr(opp1);
	JB_Tk__ExpectEndChar(Start, JB_LUB[480], true);
	Message* _tmPf1 = JB_Incr(JB_Tk__OppChain(result));
	JB_Decr(result);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Tk__fOppSyx(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, JB_SyxOpp, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fOppSyxNeq(int Start, Message* Parent) {
	Message* result = JB_Incr(JB_Tk__fOppSyx(Start, nil));
	if ('=' == JB_Tk__NextByte()) {
		JB_Decr(result);
		return JB_Tk__ErrorAdd(JB_LUB[492], JB_Tk__NextStart());
	}
	JB_SafeDecr(result);
	return result;
}

Message* JB_Tk__fOppWord(int Start, Message* Parent) {
	int After = JB_Tk__WordAfter(Start);
	if (JB_Tk__Byte(After) != '.') {
		Message* opp = JB_Incr(JB_Tk__NewParent(nil, JB_SyxOpp, Start, After));
		Message* _tmPf0 = JB_Incr(JB_Tk__OppChain(opp));
		JB_Decr(opp);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	return nil;
}

Message* JB_Tk__fQuestion(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxQues, Start, JB_LUB[0]));
	JB_FreeIfDead(JB_Tk__NewWord(rz, JB_SyxThg, Start, JB_Tk__NextStart()));
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_Opp, false));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fQuoteLang(int Start, Message* Parent) {
	Message* rz = nil;
	rz = JB_Tk__NewParentName(nil, JB_SyxQuot, Start, JB_LUB[0]);
	JB_Tk__ParseLoopFlags(rz, JB_LUB[493], kJB__Tk_TemporalSyxNoBar);
	return rz;
}

Message* JB_Tk__fSDot(int Start, Message* Parent) {
	if (Start > 0) {
		byte c = JB_Tk__Byte(Start - 1);
		if (JB_CS_HasChar(JB__Constants_CSWordMiddle, c)) {
			return nil;
		}
	}
	return JB_Tk__DotSub(JB_SyxSDot, Start, Parent);
}

Message* JB_Tk__fShebang(int Start, Message* Parent) {
	Ind S = JB_Tk__NextStart();
	Ind S2 = JB_Str_Find(JB__Tk_Data, JB__Constants_CSLine, S, JB_int__max());
	(JB_Tk__NextStartSet(S2));
	return JB_Tk__NewSkip(Parent, JB_SyxSheb, Start, S, S2);
}

Message* JB_Tk__fStatement(int Start, Message* Parent) {
	Message* tmp = JB_Incr(JB_Tk__fTmp(Start, kJB__Tk_Opp & (~kJB__Tk_OppBra), kJB__Tk_Thing, Parent));
	if ((!JB_Msg_EqualsSyx(tmp, JB_SyxThg, false))) {
		JB_SafeDecr(tmp);
		return tmp;
	}
	JB_Tree_Remove(tmp);
	JB_Decr(tmp);
	(JB_Tk__NextStartSet(Start));
	return JB_Tk__ProcessThing(kJB__Tk_Opp, false);
}

Message* JB_Tk__fStatementColon(int Start, Message* Parent) {
	return JB_Tk__fTmp(Start, kJB__Tk_Opp & (~kJB__Tk_OppBra), kJB__Tk_Thing | kJB__Tk_colonarg, Parent);
}

Message* JB_Tk__fString(int Start, Message* Parent) {
	Ind After = JB_Str_JBFind(JB__Tk_Data, '"', (JB_Tk__NextStart()), JB_int__max());
	if ((!(JB_Ind_SyntaxCast(After)))) {
		return JB_Tk__ErrorAdd(JB_LUB[494], JB_Tk__NextStart());
	}
	Ind StrPos = Start + 1;
	Message* result = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxStr, Start, JB_LUB[0]));
	while (JB_Ind_SyntaxCast(StrPos)) {
		Ind NewStrPos = JB_Str_JBFind(JB__Tk_Data, '$', StrPos, After);
		if ((!JB_Ind_SyntaxCast(NewStrPos))) {
			NewStrPos = After;
		}
		if (NewStrPos > StrPos) {
			Message* Str = JB_Incr(JB_Tk__NewParent(result, JB_SyxEmb, StrPos, NewStrPos));
			JB_SetRef(Str->Name, JB_Str_Unescape(Str->Name));
			JB_Decr(Str);
		}
		if (NewStrPos >= After) {
			break;
		}
		NewStrPos++;
		byte C0 = JB_Tk__Byte(NewStrPos);
		if (C0 == '{') {
			NewStrPos++;
		}
		(JB_Tk__NextStartSet(NewStrPos));
		if (C0 == '{') {
			StrPos = JB_Tk__EmbeddedCode(JB_LUB[476], result, kJB__Tk_TemporalSyx);
		}
		 else {
			Syntax type = JB_SyxThg;
			if (C0 == '.') {
				type = JB_SyxSDot;
				NewStrPos++;
			}
			StrPos = JB_Str_OutCharSet(JB__Tk_Data, JB__Constants_CSWordMiddle, NewStrPos + 1, After);
			if ((!(JB_Ind_SyntaxCast(StrPos)))) {
				StrPos = After;
			}
			Message* rr = JB_Incr(JB_Tk__NewParent(result, type, NewStrPos, StrPos));
			if (C0 == '.') {
				JB_FreeIfDead(JB_Tk__NewParentName(rr, JB_SyxEmb, NewStrPos - 1, JB_LUB[0]));
			}
			JB_Decr(rr);
		}
		if (StrPos > After) {
			JB_Decr(result);
			return JB_Tk__ErrorAdd(JB_LUB[495], NewStrPos);
		}
	};
	(JB_Tk__NextStartSet((++After)));
	result->Extra = ((After - Start) | JB__Tk_BaseExtra);
	JB_Msg_UnEmbed(result);
	JB_SafeDecr(result);
	return result;
}

Message* JB_Tk__fSuperStr(int Start, Message* Parent) {
	JB_String* d = JB__Tk_Data;
	int Nest = 1;
	while (true) {
		Ind After = JB_Str_FindByte(d, '`', JB_Tk__NextStart(), JB_int__max());
		if ((!JB_Ind_SyntaxCast(After))) {
			break;
		}
		(JB_Tk__NextStartSet(After + 3));
		if (JB_Str_MidEquals(d, After - 2, JB_LUB[496], false)) {
			Nest++;
		}
		 else if (JB_Str_MidEquals(d, After, JB_LUB[497], false)) {
			Nest--;
			if ((!Nest)) {
				return JB_Tk__NewSkip(nil, JB_SyxSStr, Start, Start + 3, After);
			}
		}
	};
	return JB_Tk__ErrorAdd(JB_LUB[477], Start);
}

Message* JB_Tk__fSyntacticComment(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxSCom, Start, JB_LUB[0]));
	JB_Tk__EmbeddedArg(JB_LUB[498], rz, kJB__Tk_TemporalSyx);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fTemporalHashThing(int Start, Message* Parent) {
	Message* Result = JB_Incr(JB_Tk__NewParentName(Parent, JB_SyxTril, Start, JB_LUB[0]));
	Ind S = JB_Tk__NextStart();
	JB_FreeIfDead(JB_Tk__NewParent(Result, JB_SyxCnj, S, JB_Tk__WordAfter(S)));
	Message* x = JB_Incr(JB_Tk__ProcessThingOrTmp(kJB__Tk_Opp & (~kJB__Tk_OppBra)));
	if (x) {
		JB_Tree_SyntaxAppend(Result, x);
		Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_Opp, false));
		JB_Tree_SyntaxAppend(Result, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(x);
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fTemporalRel(int Start, Message* Parent) {
	return JB_Tk__NewWord(nil, JB_SyxCnj, Start, JB_Tk__CleanSpaces());
}

Message* JB_Tk__fTemporalRelSyx(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, JB_SyxSCnj, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fThingSyx(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, JB_SyxSThg, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fThingWord(int Start, Message* Parent) {
	int name = JB_Tk__WordAfter(Start);
	return JB_Tk__NewParent(nil, JB_SyxThg, Start, name);
}

Message* JB_Tk__fTmp(int Start, int OpFlags, int ThingFlags, Message* parent) {
	Message* Result = JB_Tk__NewWord(parent, JB_SyxTmp, Start, Start);
	return JB_Tk__fTmpSub(Result, OpFlags, ThingFlags);
}

Message* JB_Tk__fTmpPlus(int Start, Message* Parent) {
	if (JB_Tk__NextByte() == '"') {
		Message* tmp = JB_Tk__fCharSub(Start, Start + 1, '"');
		if (tmp) {
			tmp->Func = JB_SyxTmp;
			tmp = JB_Tk__fTmpSub(tmp, kJB__Tk_Opp & (~kJB__Tk_OppBra), kJB__Tk_Thing);
			if ((!JB_Msg_EqualsSyx(tmp, JB_SyxThg, false))) {
				return tmp;
			}
		}
	}
	return JB_Tk__fError2(Start, nil);
}

Message* JB_Tk__fTmpSub(Message* result, int OpFlags, int ThingFlags) {
	JB_Incr(result);
	if (JB_Tk__WillEnd()) {
		JB_SafeDecr(result);
		return result;
	}
	if (JB_Tk__CanStatement()) {
		while (true) {
			Message* item = JB_Incr(JB_Tk__ProcessThingParent(result, OpFlags, ThingFlags));
			if ((!item)) {
				JB_Decr(item);
				break;
			}
			JB_Tree_SyntaxAppend(result, item);
			if (JB_Tk__WillEnd()) {
				JB_Decr(item);
				JB_SafeDecr(result);
				return result;
			}
			if (JB_Msg_EqualsSyx(item, JB_SyxArg, false)) {
				Message* _tmPf0 = JB_Incr(JB_Tk__UnTmpPlace(result));
				Message* SubTmp = JB_Incr(JB_Tk__Process(kJB__Tk_temporalwordcolon, false, _tmPf0));
				JB_Decr(_tmPf0);
				if (((bool)SubTmp) or (JB_Msg_SyntaxEquals(item, JB_LUB[499], false))) {
					JB_Decr(item);
					JB_Decr(SubTmp);
					JB_SafeDecr(result);
					return result;
				}
				JB_Decr(SubTmp);
			}
			JB_Decr(item);
			ThingFlags = (ThingFlags | kJB__Tk_colonarg);
		};
	}
	result->Func = JB_SyxThg;
	if (JB_Ring_HasChildren(result)) {
		JB_SafeDecr(result);
		return result;
	}
	JB_SetRef(result, JB_Tk__DecorateThing(result, kJB__Tk_Opp));
	Message* _tmPf1 = JB_Incr(JB_Tk__ParseItem(result, kJB__Tk_TemporalSyx, kJB__Tk_Opp));
	JB_Decr(result);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Tk__fTypeCast(int Start, Message* Parent) {
	Message* _tmPf0 = JB_Incr(JB_Tk__BarThings(Start, JB_SyxType));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* JB_Tk__fURL(int Start, Message* Parent) {
	if ((!JB_Tk__NeedName(Parent))) {
		return nil;
	}
	(JB_Tk__NextStartSet(JB_Str_InWhite(JB__Tk_Data, Start, JB_int__max())));
	Parent->Func = JB_Syxurl;
	Parent->Extra = (Parent->Extra + 3);
	Message* _tmPf0 = JB_Incr(JB_Tk__NewParent(nil, JB_SyxStr, Start + 3, JB_Tk__NextStart()));
	JB_Tree_SyntaxAppend(Parent, _tmPf0);
	JB_Decr(_tmPf0);
	return Parent;
}

Message* JB_Tk__fXML(int Start, Message* Parent) {
	Message* rz = nil;
	Message* XML = JB_Incr(JB_Tk__NewWord(nil, JB_SyxXML, Start, Start + 1));
	int endpos = Start + (1 + JB_Msg_Length(XML));
	endpos = JB_Tk__XMLAttribs(XML, endpos);
	if ((!endpos)) {
		JB_Decr(rz);
		JB_Decr(XML);
		return nil;
	}
	JB_SetRef(rz, JB_Tk__FillXML(XML, endpos + 1));
	JB_Decr(XML);
	if (rz) {
		(JB_Msg_AfterSet(rz, JB_Tk__NextStart()));
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fXML_Comment(int Start, Message* Parent) {
	return JB_Tk__XMLWhatever(Start, 4, JB_LUB[487], JB_SyxXCom);
}

Message* JB_Tk__fXML_DocType(int Start, Message* Parent) {
	{
		IntRange _LoopSrcf0 = JB_int_OperatorTo(JB_Tk__NextStart(), JB_Str_Length(JB__Tk_Data) - 1);
		while (_LoopSrcf0[0] < _LoopSrcf0[1]) {
			int i = _LoopSrcf0[0];
			byte c = JB_Str_ByteValue(JB__Tk_Data, i);
			if (c == '[') {
				i = JB_Str_FindByte(JB__Tk_Data, ']', i, JB_int__max());
				if ((!(i))) {
					return JB_Tk__ErrorAdd(JB_LUB[500], Start);
				}
			}
			 else if (c == '>') {
				(JB_Tk__NextStartSet(i + 1));
				JB_String* _tmPf2 = JB_Incr(JB_Str_Range(JB__Tk_Data, Start + 9, i));
				Message* _tmPf3 = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxXCom, Start, _tmPf2));
				JB_Decr(_tmPf2);
				JB_SafeDecr(_tmPf3);
				return _tmPf3;
			}
			_LoopSrcf0[0] = (_LoopSrcf0[0] + 1);
		};
	}
	;
	return nil;
}

Message* JB_Tk__fXML_PI(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxXPI, Start, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(rz, JB_LUB[501], kJB__Tk_Temporal);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fYoda(int Start, Message* Parent) {
	Message* last = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_OppSyx, true));
	Message* first = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_OppSyx, true));
	Message* opp = JB_Incr(JB_Tk__Process(kJB__Tk_Opp, true, nil));
	Message* rel = JB_Incr(JB_Tk__NewParentName(Parent, JB_SyxYoda, Start, JB_LUB[0]));
	JB_Tree_SyntaxAppend(rel, first);
	JB_Decr(first);
	JB_Tree_SyntaxAppend(rel, opp);
	JB_Decr(opp);
	JB_Tree_SyntaxAppend(rel, last);
	JB_Decr(last);
	JB_SafeDecr(rel);
	return rel;
}

Message* JB_Tk__GetFuncAfter(Message* result) {
	JB_Incr(result);
	while (true) {
		int ThisAfter = kJB__Tk_FuncAfterAny & (~JB__Tk_StopBars);
		if (JB_Tk__NoFuncAfter(JB_Tk__NextByte())) {
			ThisAfter = (ThisAfter & (~kJB__Tk_FuncAfterNoSpace));
		}
		Message* d = JB_Incr(JB_Tk__Process(ThisAfter, false, result));
		if ((!d)) {
			JB_Decr(d);
			break;
		}
		Syntax fn = d->Func;
		if ((fn != JB_SyxName) and ((fn != JB_SyxBadj) and (fn != JB_Syxurl))) {
			(JB_Ring_PrevSibSet(result, d));
			(JB_Ring_FirstSet(d, result));
		}
		JB_SetRef(result, d);
		JB_Decr(d);
	};
	JB_SafeDecr(result);
	return result;
}

Message* JB_Tk__IndentBug(Message* curr) {
	JB_DoAt(1);
	return JB_Tk__ErrorAlwaysAdd(JB_LUB[502], curr->Position);
}

void JB_Tk__Init() {
	if ((!(JB_Syx_Translateable(JB_SyxThg) and (JB_Syx_Translateable(JB_SyxOpp) and (JB_Syx_Translateable(JB_SyxCnj) and (JB_Syx_Translateable(JB_SyxTmp) and JB_Syx_Translateable(JB_SyxName))))))) {
		debugger;
	}
	JB_Tk__TokenzFn(JB_LUB[503], kJB__Tk_EndOfLine, JB_Tk__fEndOfLine);
	TokHan* _tmPf1 = JB_Incr(JB_Tk__Handler(kJB__Tk_Comma | kJB__Tk_EndOfLine, ((TokenHandler_fp)JB_Tk__fEndOfLine)));
	(JB_Tk__TokenSet(JB_LUB[504], _tmPf1));
	JB_Decr(_tmPf1);
	TokHan* _tmPf3 = JB_Incr(JB_Tk__Handler(kJB__Tk_colon, ((TokenHandler_fp)JB_Tk__fEndOfLine)));
	TokHan* _tmPf2 = JB_Incr(JB_TH_Link(_tmPf3, kJB__Tk_colonarg, ((TokenHandler_fp)JB_Tk__fArgColon)));
	JB_Decr(_tmPf3);
	(JB_Tk__TokenSet(JB_LUB[499], _tmPf2));
	JB_Decr(_tmPf2);
	JB_SetRef(JB__Tk_EndOfLineMarker, JB_Msg__NewNormal(nil, JB_LUB[505]));
	Array* numb = JB_Incr(JB_Str_ByteSplit(JB_LUB[506]));
	JB_String* op_comp = JB_Incr(JB_LUB[507]);
	JB_String* op_math = JB_Incr(JB_LUB[508]);
	JB_String* PFix = JB_Incr(JB_LUB[509]);
	TokHan* _tmPf6 = JB_Incr(JB_Tk__Handler(kJB__Tk_ThingWord, ((TokenHandler_fp)JB_Tk__fThingWord)));
	TokHan* _tmPf5 = JB_Incr(JB_TH_Link(_tmPf6, kJB__Tk_TemporalWord, ((TokenHandler_fp)JB_Tk__fStatement)));
	JB_Decr(_tmPf6);
	TokHan* _tmPf4 = JB_Incr(JB_TH_Link(_tmPf5, kJB__Tk_temporalwordcolon, ((TokenHandler_fp)JB_Tk__fStatementColon)));
	JB_Decr(_tmPf5);
	TokHan* H = JB_Incr(JB_TH_Link(_tmPf4, kJB__Tk_OppWord, ((TokenHandler_fp)JB_Tk__fOppWord)));
	JB_Decr(_tmPf4);
	Array* _tmPf7 = JB_Incr(JB_CS_Bytes(JB__Constants_CSWordStart));
	JB_Tk__TokensHan(_tmPf7, H);
	JB_Decr(_tmPf7);
	JB_Decr(H);
	TokHan* _tmPf10 = JB_Incr(JB_Tk__Handler(kJB__Tk_FuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fFuncCall)));
	TokHan* _tmPf9 = JB_Incr(JB_TH_Link(_tmPf10, kJB__Tk_ThingSyx, ((TokenHandler_fp)JB_Tk__fBracket)));
	JB_Decr(_tmPf10);
	TokHan* _tmPf8 = JB_Incr(JB_TH_Link(_tmPf9, kJB__Tk_OppBra, ((TokenHandler_fp)JB_Tk__fOppBracket)));
	JB_Decr(_tmPf9);
	(JB_Tk__TokenSet(JB_LUB[463], _tmPf8));
	JB_Decr(_tmPf8);
	TokHan* _tmPf12 = JB_Incr(JB_Tk__Handler(kJB__Tk_FuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fAccess)));
	TokHan* _tmPf11 = JB_Incr(JB_TH_Link(_tmPf12, kJB__Tk_ThingSyx, ((TokenHandler_fp)JB_Tk__fArray)));
	JB_Decr(_tmPf12);
	(JB_Tk__TokenSet(JB_LUB[510], _tmPf11));
	JB_Decr(_tmPf11);
	TokHan* _tmPf13 = JB_Incr(JB_Tk__Handler(kJB__Tk_ThingSyx, ((TokenHandler_fp)JB_Tk__fMsgList)));
	(JB_Tk__TokenSet(JB_LUB[511], _tmPf13));
	JB_Decr(_tmPf13);
	TokHan* _tmPf15 = JB_Incr(JB_Tk__Handler(kJB__Tk_FuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fDot)));
	TokHan* _tmPf14 = JB_Incr(JB_TH_Link(_tmPf15, kJB__Tk_ThingSyx, ((TokenHandler_fp)JB_Tk__fSDot)));
	JB_Decr(_tmPf15);
	(JB_Tk__TokenSet(JB_LUB[512], _tmPf14));
	JB_Decr(_tmPf14);
	TokHan* _tmPf16 = JB_Incr(JB_Tk__Handler(kJB__Tk_FuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fDotAccess)));
	(JB_Tk__TokenSet(JB_LUB[513], _tmPf16));
	JB_Decr(_tmPf16);
	TokHan* _tmPf17 = JB_Incr(JB_Tk__Handler(kJB__Tk_FuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fURL)));
	(JB_Tk__TokenSet(JB_LUB[514], _tmPf17));
	JB_Decr(_tmPf17);
	TokHan* _tmPf20 = JB_Incr(JB_Tk__Handler(kJB__Tk_TemporalBar, ((TokenHandler_fp)JB_Tk__fDecl)));
	TokHan* _tmPf19 = JB_Incr(JB_TH_Link(_tmPf20, kJB__Tk_FuncAfterBar, ((TokenHandler_fp)JB_Tk__fTypeCast)));
	JB_Decr(_tmPf20);
	TokHan* _tmPf18 = JB_Incr(JB_TH_Link(_tmPf19, kJB__Tk_ThingBar, ((TokenHandler_fp)JB_Tk__fDecl)));
	JB_Decr(_tmPf19);
	(JB_Tk__TokenSet(JB_LUB[458], _tmPf18));
	JB_Decr(_tmPf18);
	TokHan* _tmPf21 = JB_Incr(JB_Tk__Handler(kJB__Tk_TemporalSyx, ((TokenHandler_fp)JB_Tk__fTmpPlus)));
	(JB_Tk__TokenSet(JB_LUB[515], _tmPf21));
	JB_Decr(_tmPf21);
	TokHan* _tmPf23 = JB_Incr(JB_Tk__Handler(kJB__Tk_ThingSyx, ((TokenHandler_fp)JB_Tk__fAtName)));
	TokHan* _tmPf22 = JB_Incr(JB_TH_Link(_tmPf23, kJB__Tk_FuncAfterNormal, ((TokenHandler_fp)JB_Tk__fAtNamedExp)));
	JB_Decr(_tmPf23);
	(JB_Tk__TokenSet(JB_LUB[516], _tmPf22));
	JB_Decr(_tmPf22);
	TokHan* _tmPf25 = JB_Incr(JB_Tk__Handler(kJB__Tk_FuncAfterNormal, ((TokenHandler_fp)JB_Tk__fAdjectiveThing)));
	TokHan* _tmPf24 = JB_Incr(JB_TH_Link(_tmPf25, kJB__Tk_adjectiveop, ((TokenHandler_fp)JB_Tk__fAdjectiveOp)));
	JB_Decr(_tmPf25);
	(JB_Tk__TokenSet(JB_LUB[517], _tmPf24));
	JB_Decr(_tmPf24);
	JB_Tk__TokenzFn(JB_LUB[518], kJB__Tk_ThingSyx, JB_Tk__fBeforeRelMinus);
	JB_Tk__TokenzFn(PFix, kJB__Tk_ThingSyx, JB_Tk__fBeforeRel);
	JB_Tk__TokenzFn(PFix, kJB__Tk_FuncAfterNormal, JB_Tk__fAfterRel);
	JB_Decr(PFix);
	JB_Tk__TokenzFn(JB_LUB[417], kJB__Tk_ThingSyx, JB_Tk__fBeforeRel);
	JB_Tk__TokenzFn(JB_LUB[519], kJB__Tk_ThingSyx, JB_Tk__fArgOpen);
	JB_Tk__TokenzFn(JB_LUB[520], kJB__Tk_TmpOpp, JB_Tk__fTemporalRelSyx);
	JB_Tk__TokenzFn(JB_LUB[521], kJB__Tk_TmpOpp, JB_Tk__fSyntacticComment);
	JB_Tk__TokenzFn(JB_LUB[522], kJB__Tk_ThingSyx, JB_Tk__fOpAsThing);
	JB_Tk__TokensFn(numb, kJB__Tk_ThingSyx, JB_Tk__fNumber);
	JB_Decr(numb);
	JB_Tk__TokenzFn(JB_LUB[523], kJB__Tk_TemporalSyxNoBar, JB_Tk__fShebang);
	JB_Tk__TokenzFn(JB_LUB[524], kJB__Tk_EndOfLine, JB_Tk__fCommentLine);
	JB_Tk__TokenzFn(JB_LUB[525], kJB__Tk_EndOfLine, JB_Tk__fComment);
	JB_Tk__TokenzFn(op_comp, kJB__Tk_OppSNB, JB_Tk__fOppSyxNeq);
	JB_Decr(op_comp);
	JB_Tk__TokenzFn(op_math, kJB__Tk_OppSNB, JB_Tk__fOppSyx);
	JB_Decr(op_math);
	JB_Tk__TokenzFn(JB_LUB[458], kJB__Tk_OppBar, JB_Tk__fOppSyx);
	JB_Tk__TokenzFn(JB_LUB[526], kJB__Tk_ThingSyx, JB_Tk__fThingSyx);
	JB_Tk__TokenzFn(JB_LUB[409], kJB__Tk_ThingSyx, JB_Tk__fString);
	JB_Tk__TokenzFn(JB_LUB[411], kJB__Tk_ThingSyx, JB_Tk__fChar);
	JB_Tk__TokenzFn(JB_LUB[527], kJB__Tk_ThingSyx, JB_Tk__fBackTick);
	JB_Tk__TokenzFn(JB_LUB[496], kJB__Tk_ThingSyx, JB_Tk__fSuperStr);
	JB_Tk__TokenzFn(JB_LUB[528], kJB__Tk_ThingSyx, JB_Tk__fBinary);
	TokHan* _tmPf27 = JB_Incr(JB_Tk__Handler(kJB__Tk_FuncAfterNormal, ((TokenHandler_fp)JB_Tk__fBAdjectiveThing)));
	TokHan* _tmPf26 = JB_Incr(JB_TH_Link(_tmPf27, kJB__Tk_adjectiveop, ((TokenHandler_fp)JB_Tk__fBAdjectiveOp)));
	JB_Decr(_tmPf27);
	(JB_Tk__TokenSet(JB_LUB[529], _tmPf26));
	JB_Decr(_tmPf26);
	TokHan* _tmPf29 = JB_Incr(JB_Tk__Handler(kJB__Tk_TmpOpp, ((TokenHandler_fp)JB_Tk__fTemporalRel)));
	TokHan* _tmPf28 = JB_Incr(JB_TH_Link(_tmPf29, kJB__Tk_TemporalSyxNoBar, ((TokenHandler_fp)JB_Tk__fTemporalHashThing)));
	JB_Decr(_tmPf29);
	(JB_Tk__TokenSet(JB_LUB[530], _tmPf28));
	JB_Decr(_tmPf28);
	JB_Tk__TokenzFn(JB_LUB[531], kJB__Tk_ThingSyx, JB_Tk__fInnerNiceAdj);
	JB_Tk__TokenzFn(JB_LUB[532], kJB__Tk_ThingSyx, JB_Tk__fYoda);
	JB_Tk__TokenzFn(JB_LUB[533], kJB__Tk_ThingSyx, JB_Tk__fQuoteLang);
	JB_Tk__TokenzFn(JB_LUB[483], kJB__Tk_ThingSyx, JB_Tk__fQuestion);
	JB_Tk__TokenzFn(JB_LUB[534], kJB__Tk_ThingSyx, JB_Tk__fAsk);
	JB_Tk__TokenzFn(JB_LUB[396], kJB__Tk_TemporalSyx, JB_Tk__fXML);
	JB_Tk__TokenzFn(JB_LUB[535], kJB__Tk_TemporalSyx, JB_Tk__fXML_PI);
	JB_Tk__TokenzFn(JB_LUB[486], kJB__Tk_TemporalSyx, JB_Tk__fXML_Comment);
	JB_Tk__TokenzFn(JB_LUB[536], kJB__Tk_TemporalSyx, JB_Tk__fXML_DocType);
	JB_Tk__TokenzFn(JB_LUB[537], kJB__Tk_EndContainer, JB_Tk__fEndOfLine);
	JB_Tk__TokenzFn(JB_LUB[538], kJB__Tk_ThingSyx, JB_Tk__fError);
	JB_Tk__TokenzFn(JB_LUB[539], kJB__Tk_OppSyx, JB_Tk__fError2);
	TokHan* IllegalHandler = JB_Incr(JB_Tk__Handler(-1, ((TokenHandler_fp)JB_Tk__fError)));
	{
		int i = 0;
		while (i < 256) {
			JB_String* _tmPf30 = JB_Incr(JB_Str__SyntaxAccess(i));
			(JB_Tk__TokenNilSet(_tmPf30, IllegalHandler));
			JB_Decr(_tmPf30);
			i++;
		};
	}
	;
	JB_Decr(IllegalHandler);
}

int JB_Tk__Init_() {
	{
		JB_SetRef(JB__Tk_ErrorTabsAfterSpaces, JB_LUB[540]);
		JB_SetRef(JB__Tk_Data, JB_LUB[0]);
		JB__Tk_StopBars = 0;
		JB__Tk_BaseExtra = 0;
		JB__Tk_UsingPos = -1;
		JB__Tk_UsingExtra = -1;
		JB__Tk_InsertedFlags = 0;
		JB__Tk_DotInsertAllow = false;
	}
	;
	return 0;
}

int JB_Tk__InitCode_() {
	{
	}
	;
	JB_SetRef(JB_StdErr, JB_Rec__New());
	return 0;
}

Message* JB_Tk__LoweredIndent(Message* output, Message* curr) {
	int chin = JB_Msg_CleanIndent(curr);
	while (JB_Msg_IndentScore(output) > chin) {
		if ((JB_Msg_EqualsSyx(output, JB_SyxArg, false)) and JB_Msg_SyntaxIs(output, kJB__MsgUIFlags_Style2)) {
			return JB_Tk__IndentBug(curr);
		}
		output = ((Message*)JB_Ring_Parent(output));
		if ((!output)) {
			return JB_Tk__IndentBug(curr);
		}
		if (JB_Msg_EqualsSyx(output, JB_SyxDecl, false)) {
			output = ((Message*)JB_Ring_Parent(output));
		}
	};
	JB_Tree_SyntaxAppend(output, curr);
	if (((bool)(JB_Msg_CleanIndent(curr) % 4))) {
		return curr;
	}
	return output;
}

Message* JB_Tk__MakeInvisArg(Message* tmp, int indent) {
	if (JB_Msg_EqualsSyx(tmp, JB_SyxItem, false)) {
		Message* last = ((Message*)JB_Ring_Last(tmp));
		if ((!JB_Msg_EqualsSyx(last, JB_SyxEmb, false))) {
			return JB_Tk__UnexpectedSyntax(last);
		}
		last->Func = JB_SyxArg;
		return last;
	}
	return JB_Tk__NewParentName(tmp, JB_SyxArg, tmp->Position, JB_LUB[0]);
}

Message* JB_Tk__MakeRel(Message* first, int Bits) {
	Message* opp = JB_Tk__Process(Bits, false, nil);
	if ((!(opp))) {
		return first;
	}
	Message* Rel = JB_Tk__NewParentName(nil, JB_SyxRel, first->Position, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Rel, first);
	JB_Tree_SyntaxAppend(Rel, opp);
	if (JB_Tk__EatString(JB_LUB[541])) {
		Rel->Func = JB_SyxERel;
		opp->Extra++;
	}
	bool Mode = kJB__Tk_Allow;
	if ((!JB_byte_IsLetter(JB_Str_ByteValue(opp->Name, 0)))) {
		Bits = (Bits | kJB__Tk_OppWord);
	}
	JB_Tree_SyntaxAppend(Rel, JB_Tk__ProcessThing(Bits, Mode));
	(JB_Msg_AfterSet(Rel, JB_Msg_After(((Message*)JB_Ring_Last(Rel)))));
	return Rel;
}

int JB_Tk__MessageErrorSub(FastString* fs, int num, int ButFound) {
	if ((!JB__Tk_ErrorNames)) {
		JB_SetRef(JB__Tk_ErrorNames, JB_Dict__New());
		(JB_Dict_SetInt(JB__Tk_ErrorNames, kJB__Tk_Temporal, JB_LUB[542]));
		(JB_Dict_SetInt(JB__Tk_ErrorNames, kJB__Tk_TemporalSyx, JB_LUB[543]));
		(JB_Dict_SetInt(JB__Tk_ErrorNames, kJB__Tk_TemporalWord, JB_LUB[544]));
		(JB_Dict_SetInt(JB__Tk_ErrorNames, kJB__Tk_EndOfLine, JB_LUB[469]));
		(JB_Dict_SetInt(JB__Tk_ErrorNames, kJB__Tk_colon, JB_LUB[545]));
		(JB_Dict_SetInt(JB__Tk_ErrorNames, kJB__Tk_OppSyx, JB_LUB[546]));
		(JB_Dict_SetInt(JB__Tk_ErrorNames, kJB__Tk_OppWord, JB_LUB[546]));
		(JB_Dict_SetInt(JB__Tk_ErrorNames, kJB__Tk_Opp, JB_LUB[546]));
		(JB_Dict_SetInt(JB__Tk_ErrorNames, kJB__Tk_OppTemporal, JB_LUB[547]));
		(JB_Dict_SetInt(JB__Tk_ErrorNames, kJB__Tk_Thing, JB_LUB[548]));
		(JB_Dict_SetInt(JB__Tk_ErrorNames, kJB__Tk_ThingWord, JB_LUB[548]));
		(JB_Dict_SetInt(JB__Tk_ErrorNames, kJB__Tk_ThingSyx, JB_LUB[549]));
		(JB_Dict_SetInt(JB__Tk_ErrorNames, kJB__Tk_illegalchar, JB_LUB[550]));
	}
	if (fs->Length) {
		JB_FS_AppendString(fs, JB_LUB[159]);
	}
	 else {
		JB_FS_AppendString(fs, JB_LUB[551]);
	}
	int BestValue = JB_Tk__FindError(num);
	if (BestValue) {
		JB_String* _tmPf0 = JB_Incr(((JB_String*)JB_Dict_ValueInt(JB__Tk_ErrorNames, BestValue)));
		JB_FS_AppendString(fs, _tmPf0);
		JB_Decr(_tmPf0);
		return num & (~BestValue);
	}
	JB_FS_AppendString(fs, JB_LUB[552]);
	return 0;
}

bool JB_Tk__NeedName(Message* thg) {
	if (JB_Msg_EqualsSyx(thg, JB_SyxThg, false)) {
		return true;
	}
	return ((bool)JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[553], thg->Position)));
}

Message* JB_Tk__NewParentName(Message* Parent, Syntax Func, int Start, JB_String* name) {
	Message* rz = nil;
	rz = JB_Msg__NewRange(Parent, Func, Start, name, JB_Tk__NextStart() - Start);
	return rz;
}

Message* JB_Tk__NewParent(Message* Parent, Syntax Func, int Start, int End) {
	Message* rz = nil;
	JB_String* name = JB_Tk__Range(Start, End);
	rz = JB_Msg__NewRange(Parent, Func, Start, name, End - Start);
	return rz;
}

Message* JB_Tk__NewEmpty(Message* P, Syntax F, int Start, int After) {
	Message* rz = nil;
	rz = JB_Msg__NewRange(P, F, Start, JB_LUB[0], After - Start);
	return rz;
}

Message* JB_Tk__NewSkip(Message* P, Syntax F, int Start, int NameStart, int NameEnd) {
	Message* rz = nil;
	JB_String* name = JB_Tk__Range(NameStart, NameEnd);
	rz = JB_Msg__NewRange(P, F, Start, name, JB_Tk__NextStart() - Start);
	return rz;
}

Message* JB_Tk__NewWord(Message* P, Syntax F, int Start, int SearchFrom) {
	Message* rz = nil;
	int after = JB_Tk__WordAfter(SearchFrom);
	JB_String* name = JB_Tk__Range(SearchFrom, after);
	rz = JB_Msg__NewRange(P, F, Start, name, after - Start);
	return rz;
}

ParserLineAndIndent JB_Tk__NextLineAndIndent(Message* parent) {
	ParserLineAndIndent rz = ((ParserLineAndIndent){});
	int first = JB_Tk__NextStart();
	int n = first;
	JB_String* D = JB__Tk_Data;
	int end = JB_Str_Length(D);
	byte* addr = D->Addr;
	bool GotSpaces = false;
	while (n < end) {
		byte c = addr[n++];
		if (c == '\t') {
			if ((!rz.Commas)) {
				rz.Indent = (rz.Indent + 4);
			}
			if (GotSpaces and ((bool)rz.Lines)) {
				JB_FreeIfDead(JB_Tk__ErrorAdd(JB__Tk_ErrorTabsAfterSpaces, n - 1));
			}
		}
		 else if (c == ' ') {
			GotSpaces = true;
			if ((!rz.Commas)) {
				rz.Indent++;
			}
		}
		 else if ((c == '\n') or (c == '\x0D')) {
			rz.Lines++;
			rz.IsDebug = ((bool)((int)(c == '\x0D')));
			rz.Indent = 0;
			rz.Commas = 0;
			rz.Pos = (n - 1);
			GotSpaces = false;
			if (JB_Msg_EqualsSyx(parent, JB_SyxList, false)) {
				(JB_Msg_SyntaxIsSet(parent, kJB__MsgUIFlags_Style2, true));
			}
		}
		 else if (c == ',') {
			rz.Commas++;
			Message* l = ((Message*)JB_Ring_Last(parent));
			if (l) {
				rz.Indent = l->Indent;
			}
			 else {
				rz.Indent = 0;
			}
			GotSpaces = false;
		}
		 else {
			GotSpaces = false;
			n--;
			if (c != '/') {
				break;
			}
			if (addr[n + 1] == '*') {
				rz.Lines++;
				rz.Indent = 0;
			}
			(JB_Tk__NextStartSet(n));
			Message* line = JB_Tk__Process(kJB__Tk_EndOfLine, kJB__Tk_Allow, parent);
			n = JB_Tk__NextStart();
			if ((!(line == JB__Tk_EndOfLineMarker))) {
				break;
			}
		}
	};
	rz.Lines = (rz.Lines + rz.Commas);
	(JB_Tk__NextStartSet(n));
	if (((first > 0) and (!rz.Lines)) or (rz.Indent < 0)) {
		rz.Indent = -1;
	}
	return rz;
}

bool JB_Tk__NoFuncAfter(byte b) {
	return (b == '\t') or ((b == ' ') or (b == '\\'));
}

Message* JB_Tk__NumberSub(int Start, int RealStart) {
	Message* rz = nil;
	int After = JB_Tk__NumEnd(JB__Tk_Data, Start);
	(JB_Tk__NextStartSet(After));
	int StartAt = JB_Str_IsHexLike(JB__Tk_Data, Start);
	Ind UnitPos2 = -1;
	if (StartAt == 0) {
		UnitPos2 = JB_Str_OutCharSet(JB__Tk_Data, JB__Constants_CSLettersOnly, After, Start + StartAt);
	}
	if ((!(JB_Ind_SyntaxCast(UnitPos2)))) {
		UnitPos2 = (After - 1);
	}
	UnitPos2++;
	Message* Num = JB_Tk__NewParent(nil, JB_SyxNum, RealStart, UnitPos2);
	if (After <= UnitPos2) {
		return Num;
	}
	rz = JB_Tk__NewSkip(nil, JB_SyxUnit, RealStart, UnitPos2, After);
	JB_Tree_SyntaxAppend(rz, Num);
	return rz;
}

int JB_Tk__NumEnd(JB_String* NumStr, int Start) {
	int rz = 0;
	Ind Dot = JB_Str_OutCharSet(NumStr, JB__Constants_CSNum, Start, JB_int__max());
	if ((!(JB_Ind_SyntaxCast(Dot)))) {
		return JB_Str_Length(NumStr);
	}
	if ((!(JB_Str_ByteValue(NumStr, Dot) == '.'))) {
		return Dot;
	}
	byte AfterDot = JB_Str_ByteValue(NumStr, Dot + 1);
	if ((!(JB_byte_IsInt(AfterDot)))) {
		return Dot;
	}
	rz = JB_Str_OutCharSet(NumStr, JB__Constants_CSNum, Dot + 1, JB_int__max());
	if ((!(rz))) {
		rz = JB_Str_Length(NumStr);
	}
	return rz;
}

bool JB_Tk__OK() {
	return (!JB_Ind_SyntaxCast(JB_Tk__ErrorStart()));
}

Message* JB_Tk__OppChain(Message* opp) {
	Message* result = JB_Incr(JB_Tk__Process(kJB__Tk_adjectiveop, false, opp));
	if ((!result)) {
		JB_Decr(result);
		return opp;
	}
	if ((!(JB_FreeIfDead(((Message*)JB_Ring_Parent(opp)))))) {
		(JB_Ring_FirstSet(result, opp));
	}
	JB_SafeDecr(result);
	return result;
}

void JB_Tk__Params(Message* Parent, int N) {
	Message* Result = JB_Incr(JB_Tk__NewParentName(Parent, JB_SyxPrm, N, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(Result, JB_LUB[480], kJB__Tk_TemporalSyxNoBar);
	JB_Decr(Result);
}

Message* JB_Tk__ParseItem(Message* ch, int TemporalFlags, int ops) {
	int ns = JB_Tk__NextStart();
	if ((!(JB_Tk__Allow(kJB__Tk_colon)))) {
		return ch;
	}
	if (JB_Msg_OperatorIn(ch, JB_SyxArg)) {
		if (JB_Msg_EqualsSyx(ch, JB_SyxThg, false)) {
			ch->Func = JB_SyxTmp;
			Message* _tmPf0 = JB_Incr(JB_Tk__fArgColon(ns, ch));
			JB_Tree_SyntaxAppend(ch, _tmPf0);
			JB_Decr(_tmPf0);
		}
		return ch;
	}
	Message* Result = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxItem, ch->Position, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Result, ch);
	Message* ch2 = JB_Incr(JB_Tk__Process(TemporalFlags, false, Result));
	if ((!ch2)) {
		JB_SetRef(ch2, JB_Tk__ProcessThing(ops, false));
	}
	if ((!(ch2))) {
		JB_SetRef(ch2, JB_Tk__NewParentName(Result, JB_SyxEmb, ns, JB_LUB[0]));
	}
	JB_Tree_SyntaxAppend(Result, ch2);
	(JB_Msg_AfterSet(Result, JB_Msg_After(ch2)));
	JB_Decr(ch2);
	JB_SafeDecr(Result);
	return Result;
}

int JB_Tk__ParseLoop(Message* Output, int TmpoFlags) {
	int rz = 0;
	Message* prev = nil;
	while (Output) {
		ParserLineAndIndent Info = JB_Tk__NextLineAndIndent(Output);
		rz = (rz + Info.Lines);
		if (JB_Tk__WillEnd() or (((bool)prev) and (!Info.Lines))) {
			break;
		}
		Message* ch = JB_Tk__ParseLoopItem(Output, TmpoFlags, prev, Info.Indent);
		if ((!ch)) {
			break;
		}
		rz = (rz + ((JB_Msg_EqualsSyx(ch, JB_SyxItem, false))));
		if (Info.IsDebug) {
			ch->Flags = (ch->Flags | kJB__MsgUIFlags_BreakPoint);
		}
		Output = JB_Tk__AddToOutput(Output, ch, prev, Info.Pos);
		prev = ch;
	};
	return rz;
}

bool JB_Tk__ParseLoopFlags(Message* Output, JB_String* Ender, int TmpoFlags) {
	bool rz = false;
	Ind err = JB_Tk__NextStart();
	rz = ((bool)JB_Tk__ParseLoop(Output, TmpoFlags & (~JB__Tk_StopBars)));
	if (JB_Str_Exists(Ender)) {
		JB_Tk__ExpectEndChar(err, Ender, true);
		(JB_Msg_AfterSet(Output, JB_Tk__NextStart()));
	}
	return rz;
}

Message* JB_Tk__ParseLoopItem(Message* Output, int TmpoFlags, Message* Prev, int Indent) {
	Message* ch = JB_Incr(JB_Tk__Process(kJB__Tk_Temporal & TmpoFlags, false, Output));
	if ((!ch)) {
		Message* item = JB_Incr(JB_Tk__ProcessThingParent(Output, kJB__Tk_Opp, kJB__Tk_Thing));
		if ((!item)) {
			JB_Decr(ch);
			JB_Decr(item);
			return nil;
		}
		TmpoFlags = (TmpoFlags & (kJB__Tk_Temporal & (~kJB__Tk_TemporalWord)));
		JB_SetRef(ch, JB_Tk__ParseItem(item, TmpoFlags, kJB__Tk_Opp));
		JB_Decr(item);
	}
	 else if ((JB_Msg_EqualsSyx(ch, JB_SyxCnj, false)) or (JB_Msg_EqualsSyx(ch, JB_SyxSCnj, false))) {
		JB_SetRef(ch, JB_Tk__ReRoute(Output, ch, Prev));
		if ((!ch)) {
			JB_Decr(ch);
			return nil;
		}
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(ch)));
		Indent = _tmPf0->Indent;
		JB_Decr(_tmPf0);
	}
	ch->Indent = Indent;
	JB_SafeDecr(ch);
	return ch;
}

Message* JB_Tk__PostInnerAdj(Message* Rel, Message* opp) {
	JB_Incr(Rel);
	Message* f = JB_Incr(((Message*)JB_Ring_First(Rel)));
	if ((!(JB_Msg_EqualsSyx(Rel, JB_SyxRel, false))) and (!((JB_Msg_EqualsSyx(Rel, JB_SyxBra, false)) and (JB_Msg_EqualsSyx(f, JB_SyxRel, false))))) {
		Message* _tmPf1 = JB_Incr(JB_Tk__ErrorAdd(JB_LUB[554], Rel->Position));
		JB_Decr(Rel);
		JB_Decr(f);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	if (JB_Msg_EqualsSyx(Rel, JB_SyxBra, false)) {
		JB_SetRef(Rel, f);
		JB_SetRef(f, ((Message*)JB_Ring_First(f)));
	}
	Message* Adverb = JB_Incr(JB_Tk__Process(kJB__Tk_OppWord | kJB__Tk_OppBra, kJB__Tk_Expect, nil));
	if ((!Adverb)) {
		JB_Decr(Rel);
		JB_Decr(f);
		JB_Decr(Adverb);
		return nil;
	}
	Message* adj = JB_Incr(JB_Syx_Msg(JB_SyxAdj, JB_LUB[0]));
	(JB_Ring_NextSibSet(f, adj));
	JB_Decr(f);
	JB_Tree_SyntaxAppend(adj, Adverb);
	JB_Decr(Adverb);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(adj)));
	JB_Tree_SyntaxAppend(adj, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Decr(adj);
	Rel->Func = JB_Syxpinn;
	JB_SafeDecr(Rel);
	return Rel;
}

Message* JB_Tk__ProcessThing(int Ops, bool Expect) {
	return JB_Tk__ProcessThingSub(nil, Ops, kJB__Tk_Thing, Expect);
}

Message* JB_Tk__ProcessThingNoBar(int Ops, bool Expect) {
	return JB_Tk__ProcessThingSub(nil, Ops, kJB__Tk_ThingSyx | kJB__Tk_ThingWord, Expect);
}

Message* JB_Tk__ProcessThingOrTmp(int opps) {
	return JB_Tk__ProcessThingSub(nil, opps, kJB__Tk_ThingSyx | (kJB__Tk_ThingWord | kJB__Tk_TemporalSyx), false);
}

Message* JB_Tk__ProcessThingParent(Message* parent, int Ops, int ThingFlags) {
	return JB_Tk__ProcessThingSub(parent, Ops, ThingFlags, false);
}

Message* JB_Tk__ProcessThingSub(Message* Parent, int Ops, int KindOfThing, bool Expect) {
	Message* result = JB_Incr(JB_Tk__Process(KindOfThing, Expect, Parent));
	if ((!result)) {
		JB_Decr(result);
		return nil;
	}
	if (JB_Tk__WillEnd()) {
		JB_SafeDecr(result);
		return result;
	}
	Message* _tmPf0 = JB_Incr(JB_Tk__DecorateThing(result, Ops));
	JB_Decr(result);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* JB_Tk__ReRoute(Message* output, Message* cnj, Message* f) {
	Message* rz = nil;
	if ((!f)) {
		JB_Decr(rz);
		return JB_Tk__ErrorAdd(JB_LUB[555], JB_Tk__NextStart());
	}
	JB_SetRef(rz, JB_Tk__ChainTemporalRels(f, cnj));
	if ((!rz)) {
		JB_Decr(rz);
		return nil;
	}
	if (JB_Ring_HasChildCount(rz, 2) and JB_Tk__Allow(kJB__Tk_EndOfLine)) {
		Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_Opp, false));
		JB_Tree_SyntaxAppend(rz, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Tree_SyntaxAppend(output, rz);
	JB_SafeDecr(rz);
	return rz;
}

void JB_Tk__StopParse() {
	JB_Tk__StartParse(nil);
}

void JB_Tk__TokensFn(Array* arr, int bits, ParseHandler func) {
	TokHan* _tmPf0 = JB_Incr(JB_Tk__Handler(bits, ((TokenHandler_fp)func)));
	JB_Tk__TokensHan(arr, _tmPf0);
	JB_Decr(_tmPf0);
}

void JB_Tk__TokensHan(Array* arr, TokHan* H) {
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(arr)) {
			JB_String* s = JB_Incr(((JB_String*)JB_Array_Value(arr, _if0)));
			(JB_Tk__TokenSet(s, H));
			JB_Decr(s);
			_if0++;
		};
	};
}

void JB_Tk__TokenzFn(JB_String* s, int bits, ParseHandler func) {
	if (JB_Str_ContainsString(s, JB_LUB[170])) {
		Array* _tmPf0 = JB_Incr(JB_Str_Words(s));
		JB_Tk__TokensFn(_tmPf0, bits, func);
		JB_Decr(_tmPf0);
	}
	 else {
		TokHan* _tmPf1 = JB_Incr(JB_Tk__Handler(bits, ((TokenHandler_fp)func)));
		(JB_Tk__TokenSet(s, _tmPf1));
		JB_Decr(_tmPf1);
	}
}

Message* JB_Tk__UnexpectedSyntax(Message* bad) {
	return JB_Tk__ErrorAdd(JB_LUB[484], bad->Position);
}

Message* JB_Tk__UnTmpPlace(Message* R) {
	Message* p = ((Message*)JB_Ring_Parent(R));
	return ((Message*)JB_Ternary((JB_Msg_EqualsSyx(p, JB_SyxTmp, false)), p, R));
}

bool JB_Tk__WillEnd() {
	return JB_Tk__CheckEnded(kJB__Tk_End);
}

int JB_Tk__WordAfter(int Start) {
	int n = JB_Str_Length(JB__Tk_Data);
	if (Start < n) {
		Ind After = JB_Str_OutCharSet(JB__Tk_Data, JB__Constants_CSWordMiddle, Start, JB_int__max());
		if ((!JB_Ind_SyntaxCast(After))) {
			After = n;
		}
		if (After > Start) {
			(JB_Tk__NextStartSet(After));
			return After;
		}
	}
	JB_Tk__ErrorLetter(Start);
	return 0;
}

int JB_Tk__XMLAttribs(Message* XML, int start) {
	Message* AllAtts = JB_Incr(JB_Tk__NewParentName(XML, JB_SyxArg, start, JB_LUB[0]));
	JB_String* s = JB_Incr(JB__Tk_Data);
	while (true) {
		int i = JB_Tk__NextStart();
		byte c = 0;
		while (i < JB_Str_Length(s)) {
			c = JB_Str_ByteValue(s, i);
			if ((!JB_byte_IsWhite(c))) {
				break;
			}
			i++;
		};
		if ((c == '>') or ((c == '/') and (JB_Str_ByteValue(s, i + 1) == '>'))) {
			JB_Decr(AllAtts);
			JB_Decr(s);
			return i;
		}
		if ((!(JB_CS_HasChar(JB__Constants_CSWordStart, c)))) {
			break;
		}
		Message* Attr = JB_Incr(JB_Tk__fThingWord(i, nil));
		Attr->Func = JB_SyxXAtt;
		JB_Tree_SyntaxAppend(AllAtts, Attr);
		if ((!JB_Tk__ExpectEndChar(JB_Tk__NextStart(), JB_LUB[541], true))) {
			JB_Decr(AllAtts);
			JB_Decr(s);
			JB_Decr(Attr);
			return nil;
		}
		i = JB_Tk__CleanSpaces();
		c = JB_Str_ByteValue(s, i);
		if ((!((c == '\'') or (c == '"')))) {
			JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[556], i));
			JB_Decr(AllAtts);
			JB_Decr(s);
			JB_Decr(Attr);
			return nil;
		}
		Ind After = JB_Str_FindByte(s, c, i + 1, JB_int__max());
		Message* Txt = JB_Incr(JB_Tk__NewParentName(Attr, JB_SyxXTxt, start, JB_LUB[0]));
		JB_Decr(Attr);
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(s, i + 1, After));
		JB_SetRef(Txt->Name, JB_Str_MultiReplaceAll(_tmPf0, JB__Constants_XML_UnEscapeStr, JB_StdErr));
		JB_Decr(_tmPf0);
		JB_Decr(Txt);
		(JB_Tk__NextStartSet(After + 1));
	};
	JB_Decr(s);
	JB_Decr(AllAtts);
	JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[557], JB_Tk__NextStart()));
	return 0;
}

Message* JB_Tk__XMLWhatever(int s, int skip, JB_String* ender, Syntax fn) {
	Message* rz = nil;
	int i = s + skip;
	Ind EndPos = JB_Str_InStr(JB__Tk_Data, ender, i, JB_int__max(), false);
	if ((!JB_Ind_SyntaxCast(EndPos))) {
		JB_Decr(rz);
		return JB_Tk__ErrorAdd(JB_LUB[558], i);
	}
	(JB_Tk__NextStartSet(EndPos + JB_Str_Length(ender)));
	if (fn) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(JB__Tk_Data, i, EndPos));
		JB_SetRef(rz, JB_Tk__NewParentName(nil, fn, i, _tmPf0));
		JB_Decr(_tmPf0);
		rz->Position = s;
		(JB_Msg_AfterSet(rz, JB_Tk__NextStart()));
	}
	JB_SafeDecr(rz);
	return rz;
}


bool JB_Pipe__StdOutIsTerminal() {
	return JB_IsTerminal(kJB__Pipe_StdOut_);
}


bool JB_Platform__CPU_ARM() {
	return ((bool)(JB_Platform__CPU() & 2));
}

bool JB_Platform__CPU_Intel() {
	return ((bool)(JB_Platform__CPU() & 4));
}

JB_String* JB_Platform__CPU_Name() {
	if (JB_Platform__CPU_Intel()) {
		return JB_LUB[211];
	}
	if (JB_Platform__CPU_ARM()) {
		return JB_LUB[559];
	}
	if (JB_Platform__CPU_PPC()) {
		return JB_LUB[560];
	}
	if (JB_Platform__CPU_Spd()) {
		return JB_LUB[561];
	}
	return JB_LUB[0];
}

bool JB_Platform__CPU_PPC() {
	return ((bool)(JB_Platform__CPU() & 8));
}

bool JB_Platform__CPU_Spd() {
	return ((bool)(JB_Platform__CPU() & 1));
}

int JB_Platform__Init_() {
	{
	}
	;
	return 0;
}

int JB_Platform__InitCode_() {
	return 0;
}

bool JB_Platform__linux() {
	JB_String* _tmPf0 = JB_Incr(JB_Platform());
	bool _tmPf1 = JB_Str_Equals(_tmPf0, JB_LUB[562], false);
	JB_Decr(_tmPf0);
	return (_tmPf1);
}

void JB_Platform__Log(JB_String* s) {
	JB_PrintLine(s);
	if ((!JB_File_SyntaxCast(JB__Platform_Logger))) {
		JB_Platform__OpenLog(JB_LUB[0]);
	}
	JB_File_SyntaxAppend(JB__Platform_Logger, s);
	JB_File_SyntaxAppend(JB__Platform_Logger, JB_LUB[403]);
}

void JB_Platform__OpenLog(JB_String* name) {
	JB_Incr(name);
	if ((!(JB_Str_Exists(name)))) {
		JB_SetRef(name, JB_App__AppName());
	}
	JB_File* _tmPf0 = JB_Incr(JB_File__Logs());
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(name, JB_LUB[563]));
	JB_Decr(name);
	JB_File* path = JB_Incr(JB_File_SyntaxAccess(_tmPf0, _tmPf1, false));
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SetRef(JB__Platform_Logger, JB_Str_AsFile(path));
	JB_Decr(path);
	JB_File_OpenBlank(JB__Platform_Logger);
}

bool JB_Platform__OSX() {
	return (({
		JB_String* _tmP209 = JB_Incr(JB_Platform());
		bool _tmP208 = JB_Str_Equals(_tmP209, JB_LUB[564], false);
		JB_Decr(_tmP209);
		 _tmP208;
	})) or (({
		JB_String* _tmP211 = JB_Incr(JB_Platform());
		bool _tmP210 = JB_Str_Equals(_tmP211, JB_LUB[565], false);
		JB_Decr(_tmP211);
		 _tmP210;
	}));
}

int JB_Platform__PointerBytes() {
	return JB_PointerSize() >> 3;
}

bool JB_Platform__windows() {
	JB_String* _tmPf0 = JB_Incr(JB_Platform());
	bool _tmPf1 = JB_Str_Equals(_tmPf0, JB_LUB[566], false);
	JB_Decr(_tmPf0);
	return (_tmPf1);
}



void SC_SC_API__DelayedClassAPI(Message* node, JB_String* proj) {
	if (JB_Msg_SyntaxEquals(node, JB_LUB[567], false)) {
		SC_SC_API__NewAPI(node, JB_LUB[0], SC__Comp_program, proj);
		return;
	}
	Message* name = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	if ((!name)) {
		JB_Decr(name);
		return;
	}
	Message* _tmPf2 = JB_Incr(JB_Msg_NextOf2(name, JB_SyxBra, nil));
	Message* partname = JB_Incr(JB_Msg_NeedSyx(_tmPf2, JB_SyxThg));
	JB_Decr(_tmPf2);
	if ((!partname)) {
		JB_Decr(name);
		JB_Decr(partname);
		return;
	}
	Message* arg = JB_Incr(JB_Msg_NeedSyxInt(node, JB_SyxArg, -1));
	if ((!arg)) {
		JB_Decr(name);
		JB_Decr(partname);
		JB_Decr(arg);
		return;
	}
	SCClass* cls = JB_Incr(SC_Comp__SyntaxAccess(name));
	JB_Decr(name);
	if ((!cls)) {
		JB_Decr(partname);
		JB_Decr(arg);
		JB_Decr(cls);
		return;
	}
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Parent(partname)));
	JB_Tree_Remove(_tmPf3);
	JB_Decr(_tmPf3);
	{
		Message* ch = JB_Incr(((Message*)JB_Tree_First_(arg)));
		while (ch) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
			if ((!JB_Msg_Expect(ch, JB_SyxTmp, JB_LUB[567]))) {
				JB_Decr(partname);
				JB_Decr(arg);
				JB_Decr(cls);
				JB_Decr(ch);
				JB_Decr(_Nf1);
				return;
			}
			SC_SC_API__NewAPI(ch, partname->Name, cls, proj);
			JB_SetRef(ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(ch);
		(arg);
	}
	;
	JB_Decr(cls);
	JB_Decr(arg);
	JB_Decr(partname);
}

void SC_SC_API__NewAPI(Message* api, JB_String* part, SCBase* parent, JB_String* proj) {
	JB_Incr(proj);
	JB_Incr(part);
	JB_SetRef(proj, JB_Str_OperatorPlus(proj, JB_LUB[568]));
	Message* name = JB_Incr(JB_Msg_NeedSyx(api, JB_SyxThg));
	if ((!name)) {
		JB_Decr(part);
		JB_Decr(proj);
		JB_Decr(name);
		return;
	}
	Message* arg = JB_Incr(JB_Msg_NeedSyxInt(api, JB_SyxArg, -1));
	if ((!arg)) {
		JB_Decr(part);
		JB_Decr(proj);
		JB_Decr(name);
		JB_Decr(arg);
		return;
	}
	Message* cpp = JB_Incr(JB_Msg_FindFlat(arg, JB_SyxTmp, JB_LUB[569], false));
	if (true) {
		MessagePosition _using128 = JB_Msg_SyntaxUsing(arg);
		if ((!cpp)) {
			JB_SetRef(cpp, (JB_Syx_Msg(JB_SyxTmp, JB_LUB[569])));
			(JB_Ring_FirstSet(arg, cpp));
		}
		if (JB_Str_Exists(part)) {
			JB_SetRef(part, JB_Str_OperatorPlus(part, JB_LUB[568]));
		}
		JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(part, name->Name));
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(proj, _tmPf2));
		JB_Decr(_tmPf2);
		Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxThg, _tmPf1));
		JB_Decr(_tmPf1);
		JB_Tree_SyntaxAppend(cpp, (_tmPf0));
		JB_Decr(_tmPf0);
		JB_MsgPos_SyntaxUsingComplete((&_using128));
		JB_MsgPos_Destructor((&_using128));
	}
	JB_Decr(cpp);
	JB_Decr(arg);
	JB_Decr(name);
	JB_Decr(proj);
	JB_Decr(part);
	SCBase* Fn = JB_Incr(SC_Func__NewFunc(api, parent, api));
	if (JB_Object_FastIsa(Fn, JB_AsClass(SCFunction))) {
		(SC_Base_IsVisibleSet(((SCFunction*)Fn), true));
		JB_Array_SyntaxAppend(SC__Comp_API_Funcs, ((SCFunction*)Fn));
	}
	JB_Decr(Fn);
}

SCBase* SC_SC_API__NewExportAPI(Message* node, SCBase* name_space, Message* ErrPlace) {
	if ((!(name_space == SC__Comp_program))) {
		JB_Msg_SyntaxExpect(ErrPlace, nil);
		return nil;
	}
	SC_SC_API__NewExportAPISub(node, name_space);
	JB_Tree_Remove(node);
	return SC__Comp_program;
}

void SC_SC_API__NewExportAPISub(Message* node, SCObject* parent) {
	Message* name = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	if ((!name)) {
		JB_Decr(name);
		return;
	}
	Message* arg = JB_Incr(JB_Msg_NextOf2(name, JB_SyxArg, nil));
	JB_Decr(name);
	if ((!arg)) {
		JB_Decr(arg);
		return;
	}
	Message* lib_tmp = JB_Incr(JB_Msg_FindFlat(arg, JB_SyxTmp, JB_LUB[570], true));
	if ((!lib_tmp)) {
		JB_Decr(arg);
		JB_Decr(lib_tmp);
		return;
	}
	Message* lib_name = JB_Incr(JB_Msg_NeedSyx(lib_tmp, JB_SyxStr));
	JB_Decr(lib_tmp);
	if ((!lib_name)) {
		JB_Decr(arg);
		JB_Decr(lib_name);
		return;
	}
	if ((!(JB_Msg_SyntaxEquals(lib_name, SC__Comp_ProjectName, true)))) {
		JB_Decr(arg);
		JB_Decr(lib_name);
		return;
	}
	JB_Decr(lib_name);
	{
		Message* C = JB_Incr(((Message*)JB_Tree_First_(arg)));
		while (C) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(C)));
			if ((JB_Msg_SyntaxEquals(C, JB_LUB[567], false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[571], false))) {
				JB_SetRef(C->Obj, parent);
				JB_Array_SyntaxAppend(SC__Comp_API_List, C);
			}
			 else if ((JB_Msg_SyntaxEquals(C, JB_LUB[572], false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[570], false))) {
				if ((!JB_FreeIfDead(JB_Msg_NeedSyx(C, JB_SyxStr)))) {
					JB_Decr(arg);
					JB_Decr(C);
					JB_Decr(_Nf1);
					return;
				}
			}
			 else {
				if ((!false)) {
					JB_Msg_SyntaxExpect(C, nil);
				}
			}
			JB_SetRef(C, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(C);
		(arg);
	}
	;
	JB_Decr(arg);
	JB_SetRef(SC__Comp_API_Place, node);
}


bool SC_Errors__AlreadyIgnored(Message* F) {
	if ((!F)) {
		return nil;
	}
	SCFunction* _tmPf0 = JB_Incr(JB_Msg_MsgOwningFunc(F));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	Message* RipRoot = JB_Incr(SC_Base_SourceArg(_tmPf0));
	JB_Decr(_tmPf0);
	{
		Message* Curr = JB_Incr(F);
		while (Curr) {
			if (((JB_Msg_EqualsSyx(Curr, JB_SyxArg, false))) and ((bool)JB_FreeIfDead(({
				JB_String* _tmP249 = JB_Incr(JB_Obj_DictName(Curr));
				Message* _tmP248 = JB_Incr(((Message*)JB_Dict_ValueStr(SC__Errors_IgnoredBranches, _tmP249)));
				JB_Decr(_tmP249);
				JB_SafeDecr(_tmP248);
				 _tmP248;
			})))) {
				JB_Decr(RipRoot);
				JB_Decr(Curr);
				return true;
			}
			if ((!(Curr != RipRoot))) {
				JB_Decr(RipRoot);
				JB_Decr(Curr);
				return nil;
			}
			JB_SetRef(Curr, ((Message*)JB_Ring_Parent(Curr)));
		};
		JB_Decr(Curr);
		(F);
	}
	;
	JB_Decr(RipRoot);
	return false;
}

int SC_Errors__Init_() {
	{
		JB_SetRef(SC__Errors_IgnoredBranches, JB_Dict__New());
	}
	;
	return 0;
}

int SC_Errors__InitCode_() {
	return 0;
}

bool SC_Errors__SyntaxAccess(JB_Error* Err) {
	if (JB_Err_SyntaxIs(Err, kJB__ErrorFlags_dontstrip)) {
		return true;
	}
	if ((!Err->Node) or JB_Err_IsWarning(Err)) {
		return true;
	}
	Message* A = JB_Incr(JB_Msg_Ancestor(Err->Node, JB_SyxArg));
	if (SC__Options_HideMultipleErrors) {
		if (SC_Errors__AlreadyIgnored(A)) {
			JB_Decr(A);
			return nil;
		}
	}
	JB_String* _tmPf0 = JB_Incr(JB_Obj_DictName(A));
	(JB_Dict_ValueSet(SC__Errors_IgnoredBranches, _tmPf0, A));
	JB_Decr(_tmPf0);
	JB_Decr(A);
	return true;
}


void SC_Sav__BugWorkAround() {
	//visible;
	SaverLoadClass whatever = nil;
}

void SC_Sav__Test() {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	Array* R = JB_Incr(JB_Array__New0());
	int n = 5;
	{
		int i = 0;
		while (i < n) {
			SavingTest* s = JB_Incr(SC_SavingTest__New(i));
			if ((!i)) {
				JB_SetRef(s->Name, JB_LUB[0]);
			}
			JB_Array_SyntaxAppend(R, s);
			JB_Array_SyntaxAppend(R, s);
			JB_Decr(s);
			i++;
		};
	}
	;
	JB_Array_SyntaxAppend(R, JB_LUB[573]);
	JB_String* _tmPf2 = JB_Incr(SC_Ext__TmpBase(JB_LUB[574]));
	JB_File* F = JB_Incr(JB_Str_AsFile(_tmPf2));
	JB_Decr(_tmPf2);
	JB_Sav_SaveToFile(R, F);
	Message* _tmPf3 = JB_Incr(JB_File_Parse(F, 16777216, false));
	JB_Decr(F);
	JB_Object* R2 = JB_Incr(JB_Msg_RestoreLoad(_tmPf3));
	if (JB_Object_Isa(R2, JB_AsClass(Array))) {
		JB_FreeIfDead(JB_Array_Pop(R));
		JB_Object* last = JB_Incr(JB_Array_Pop(((Array*)R2)));
		if ((!(((bool)last) and ((JB_Object_Isa(last, JB_AsClass(JB_String))) and ((JB_Str_Equals(((JB_String*)last), JB_LUB[573], false))))))) {
			JB_Object_SyntaxExpect(nil);
			JB_Decr(R);
			JB_Decr(_tmPf3);
			JB_Decr(R2);
			JB_Decr(last);
			return;
		}
		JB_Decr(last);
		if ((!(JB_Array_Size(((Array*)R2)) == JB_Array_Size(R)))) {
			JB_Object_SyntaxExpect(nil);
			JB_Decr(R);
			JB_Decr(_tmPf3);
			JB_Decr(R2);
			return;
		}
		{
			int i = 0;
			while (i < n) {
				JB_Object* _tmPf4 = JB_Incr(JB_Array_Value(R, i));
				JB_Object* _tmPf5 = JB_Incr(JB_Array_Value(((Array*)R2), i));
				if ((!SC_SavingTest__IsEqual(_tmPf4, _tmPf5))) {
					JB_Object_SyntaxExpect(nil);
					JB_Decr(R);
					JB_Decr(_tmPf3);
					JB_Decr(R2);
					JB_Decr(_tmPf4);
					JB_Decr(_tmPf5);
					return;
				}
				JB_Decr(_tmPf5);
				JB_Decr(_tmPf4);
				i++;
			};
		};
	}
	 else {
		if ((!false)) {
			JB_Str_SyntaxExpect(JB_LUB[575]);
		}
	}
	JB_Decr(R2);
	JB_Decr(R);
	JB_Decr(_tmPf3);
}


int SC_SCGame3D__Init_() {
	{
		JB_SetRef(SC__SCGame3D_Types, (JB_Dict__New()));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[576], JB_LUB[577]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[578], JB_LUB[579]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[580], JB_LUB[581]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[367], JB_LUB[582]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[583], JB_LUB[584]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[585], JB_LUB[586]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[587], JB_LUB[588]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[589], JB_LUB[590]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[591], JB_LUB[592]));
	}
	;
	return 0;
}

int SC_SCGame3D__InitCode_() {
	return 0;
}

SCBase* SC_SCGame3D__Love(Message* node, SCBase* name_space, Message* ErrPlace) {
	if (JB_Rnd_SyntaxAccess((&JB__Rnd_Shared)) > (1.0f / 12.0f)) {
		JB_String* _tmPf1 = JB_Incr(JB_Msg_Render(node, nil));
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(_tmPf1, (5), JB_int__max()));
		JB_Decr(_tmPf1);
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return SC__Comp_program;
}

bool SC_SCGame3D__NeedShader(JB_String* Name) {
	if ((JB_Str_Equals(Name, JB_LUB[593], true)) or (JB_Str_Equals(Name, JB_LUB[594], true))) {
		return true;
	}
	JB_Object* F = JB_Incr(JB_Dict_ValueStr(SC__Imp_Shaders, Name));
	if ((!(JB_Object_Isa(F, JB_AsClass(JB_String))))) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[595]);
		JB_FS_AppendString(_fsf0, Name);
		JB_FS_AppendByte(_fsf0, '\n');
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Str_SyntaxExpect(_tmPf1);
		JB_Decr(_tmPf1);
		JB_Decr(F);
		return nil;
	}
	JB_Decr(F);
	return true;
}

SCBase* SC_SCGame3D__NeuModel(Message* node, SCBase* name_space, Message* ErrPlace) {
	Message* Inst = JB_Incr(JB_Msg_TranModel(node));
	if ((!Inst)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[596]);
		JB_Decr(Inst);
		return nil;
	}
	SCBase* M = JB_Incr(SC_Class__NewStruct(node, name_space, ErrPlace));
	if (JB_Object_FastIsa(M, JB_AsClass(SCModule))) {
		JB_SetRef(((SCModule*)M)->Cls->IsModel, Inst);
	}
	JB_Decr(Inst);
	JB_SafeDecr(M);
	return M;
}


int SC__Init_() {
	{
		SC__SC_UniqueNum = 0;
	}
	;
	return 0;
}

int SC__InitCode_() {
	return 0;
}


void SC_Refs__Destructable(Message* Blocker, Message* arg, Message* name) {
	SCDecl* type = JB_Incr(SC_TypeOfExpr(name, nil, nil));
	if ((!(JB_Object_Isa(type, JB_AsClass(SCDecl))))) {
		JB_Decr(type);
		return;
	}
	SCFunction* fn = JB_Incr(type->Type->DestructorFunc);
	JB_Decr(type);
	Message* FnMsg = JB_Incr(SC_Refs__RefMsg0(fn->ExportName, fn));
	JB_Decr(fn);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(FnMsg)));
	Message* _tmPf2 = JB_Incr(({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[417])));
		Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name->Name));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf3));
		JB_Decr(_tmPf3);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	JB_Tree_SyntaxAppend(_tmPf1, _tmPf2);
	JB_Decr(_tmPf2);
	JB_Decr(_tmPf1);
	if (Blocker) {
		(JB_Ring_PrevSibSet(Blocker, FnMsg));
	}
	 else {
		JB_Tree_SyntaxAppend(arg, FnMsg);
	}
	JB_Decr(FnMsg);
}

bool SC_Refs__ExitHitsOrGoesPast(Message* msg, Message* arg) {
	Message* curr = JB_Incr(msg);
	while (true) {
		JB_SetRef(curr, ((Message*)JB_Ring_Parent(curr)));
		if (curr == arg) {
			JB_Decr(curr);
			return true;
		}
		if (JB_Msg_OperatorIsTmp(curr, JB_LUB[597])) {
			JB_Decr(curr);
			return false;
		}
	};
	JB_Decr(curr);
	return false;
}

bool SC_Refs__ExprNeedsTemping(Message* child, Message* name) {
	if ((!(SC_Refs__RefBasis(name, false) == kSC__Refs_BasisObj))) {
		return nil;
	}
	{
		Message* s = child;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(child));
		while (((bool)s) and (s != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(s));
			if (JB_Msg_OperatorIsThing(s, name->Name)) {
				return true;
			}
			s = _N_f2;
		};
		(child);
	}
	;
	return false;
}

int SC_Refs__Init_() {
	{
	}
	;
	return 0;
}

int SC_Refs__InitCode_() {
	return 0;
}

Message* SC_Refs__LastUsedRefPlace(Message* name, Message* arg) {
	SCDecl* _tmPf3 = JB_Incr(JB_Msg_AsDecl(name));
	SCClass* Type = JB_Incr(_tmPf3->Type);
	JB_Decr(_tmPf3);
	if ((!Type)) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(Type);
		return nil;
	}
	if (Type->NoEarlyFree) {
		JB_Decr(Type);
		return nil;
	}
	JB_Decr(Type);
	JB_String* s = JB_Incr(name->Name);
	Message* found = JB_Incr(name);
	{
		Message* c = JB_Incr(arg);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(arg)));
		while (((bool)c) and (c != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(c)));
			if (JB_Msg_OperatorIsThing(c, s)) {
				JB_SetRef(found, c);
			}
			JB_SetRef(c, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(_afterf1);
		JB_Decr(c);
		(arg);
	}
	;
	JB_Decr(s);
	if ((!(found))) {
		JB_SetRef(found, name);
	}
	Message* curr = JB_Incr(found);
	while (found != arg) {
		JB_SetRef(curr, found);
		JB_SetRef(found, ((Message*)JB_Ring_Parent(found)));
	};
	JB_Decr(found);
	Message* _tmPf4 = JB_Incr(JB_Msg_LastUsedFix(curr));
	JB_Decr(curr);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

void SC_Refs__RC_CheckFuncAllocOK(SCFunction* self, Message* dot) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(dot)));
	JB_Object* fn = JB_Incr(_tmPf0->Obj);
	JB_Decr(_tmPf0);
	if (JB_Object_FastIsa(fn, JB_AsClass(SCFunction))) {
		if (SC_Func_OperatorIsa(((SCFunction*)fn), kSC_IsConstructor)) {
			bool ok = SC_Func_OperatorIsa(self, (kSC_IsConstructor | kSC_IsNew));
			if ((!(ok))) {
				JB_Msg_SyntaxExpect(dot, JB_LUB[598]);
				JB_Decr(fn);
				return;
			}
		}
		 else if (SC_Func_OperatorIsa(((SCFunction*)fn), kSC_IsDestructor)) {
			bool ok = SC_Func_OperatorIsa(self, kSC_IsDestructor);
			if ((!(ok))) {
				JB_Msg_SyntaxExpect(dot, JB_LUB[599]);
				JB_Decr(fn);
				return;
			}
		}
	}
	JB_Decr(fn);
}

void SC_Refs__RC_DeclArg(SCDecl* AR, SCFunction* fn) {
	Message* dcl = JB_Incr(SC_Decl_WriteNilDecl(AR));
	Message* _tmPf0 = JB_Incr(SC_Base_SourceArg(fn));
	(JB_Ring_FirstSet(_tmPf0, dcl));
	JB_Decr(_tmPf0);
	SC_Refs__RC_DeclInit(dcl, fn, true);
	JB_Tree_Remove(dcl);
	JB_Decr(dcl);
}

void SC_Refs__RC_DeclInit(Message* dcl, SCFunction* fn, bool IsJustAnArg) {
	int Basis = SC_Refs__RefBasis(dcl, true);
	if (SC_Func_doRefs(fn)) {
		if ((!Basis)) {
			return;
		}
	}
	 else {
		if ((!(Basis == kSC__Refs_BasisDeSTRUCTable))) {
			return;
		}
	}
	Message* arg = JB_Incr(((Message*)JB_Ring_Parent(dcl)));
	Message* name = JB_Incr(JB_Msg_DeclName(dcl));
	Message* LastPlace = nil;
	if (Basis == kSC__Refs_BasisObj) {
		JB_SetRef(LastPlace, SC_Refs__LastUsedRefPlace(name, arg));
	}
	Message* Blocker = JB_Incr(JB_Msg_CausesUnReachable(arg, arg, dcl, LastPlace));
	if (JB_Msg_NoPointlessBlockRefs(Blocker, dcl)) {
		if (Basis == kSC__Refs_BasisObj) {
			SC_Refs__RefIncr(name, dcl, IsJustAnArg);
		}
		if ((!(Blocker))) {
			JB_SetRef(Blocker, LastPlace);
		}
		SC_Refs__ReturnHandle(Blocker, arg, name, Basis);
	}
	Message* Curr = JB_Incr(dcl);
	Message* After = JB_Incr(((Message*)JB_Ring_FlatAfter(arg)));
	while ((Curr != After) and (Curr != LastPlace)) {
		if (JB_Msg_EqualsSyx(Curr, JB_SyxArg, false)) {
			JB_SetRef(Blocker, JB_Msg_CausesUnReachable(Curr, arg, nil, nil));
			if (Blocker) {
				SC_Refs__ReturnHandle(Blocker, nil, name, Basis);
			}
		}
		JB_SetRef(Curr, ((Message*)JB_Ring_FlatNext0(Curr)));
	};
	JB_Decr(After);
	JB_Decr(Curr);
	JB_Decr(Blocker);
	JB_Decr(LastPlace);
	JB_Decr(name);
	JB_Decr(arg);
}

void SC_Refs__RC_IgnoreReturn(Message* msg, bool DoRefs) {
	if ((!(SC_Refs__RefBasis(msg, false) == kSC__Refs_BasisObj))) {
		return;
	}
	//using;
	MessagePosition _using149 = JB_Msg_SyntaxUsing(msg);
	Message* free_if_dead = JB_Incr(SC_Refs__RefMsg0(JB_LUB[101], SC__Comp_RefFreeIfDead));
	JB_Msg_FuncWrap(msg, free_if_dead);
	JB_Decr(free_if_dead);
	JB_MsgPos_SyntaxUsingComplete((&_using149));
	JB_MsgPos_Destructor((&_using149));
}

bool SC_Refs__RC_NeedsOwnBlock(Message* msg, Message* pp) {
	bool HitArg = false;
	{
		Message* ch = msg;
		while (ch) {
			if (JB_Msg_EqualsSyx(ch, JB_SyxArg, false)) {
				HitArg = true;
			}
			 else if (JB_Msg_EqualsSyx(ch, JB_SyxRel, false)) {
				Message* opp = ((Message*)JB_Tree_Get(ch, 1));
				if (((JB_Msg_EqualsSyx(opp, JB_SyxOpp, false))) and ((JB_Msg_SyntaxEquals(opp, JB_LUB[600], false)) or (JB_Msg_SyntaxEquals(opp, JB_LUB[601], false)))) {
					return true;
				}
			}
			 else if (JB_Msg_OperatorIsTmp(ch, JB_LUB[597])) {
				if ((!HitArg)) {
					return true;
				}
			}
			if (ch == pp) {
				break;
			}
			ch = ((Message*)JB_Ring_Parent(ch));
		};
		(msg);
	}
	;
	return false;
}

void SC_Refs__RC_Rel(Message* rel) {
	Message* First = JB_Incr(((Message*)JB_Ring_First(rel)));
	if ((!SC_Refs__RelNeedsRef(rel, First))) {
		JB_Decr(First);
		return;
	}
	//using;
	MessagePosition _using148 = JB_Msg_SyntaxUsing(rel);
	Message* result = JB_Incr(SC_NewFnc(JB_LUB[98]));
	Message* lst = JB_Incr(((Message*)JB_Ring_Last(result)));
	JB_Tree_SyntaxAppend(lst, First);
	JB_Decr(First);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(rel)));
	JB_Tree_SyntaxAppend(lst, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SetRef(lst->Obj, SC__Comp_RefSetRef);
	JB_Decr(lst);
	JB_FreeIfDead(JB_Msg_ReplaceWith(rel, result));
	JB_Decr(result);
	JB_MsgPos_SyntaxUsingComplete((&_using148));
	JB_MsgPos_Destructor((&_using148));
}

void SC_Refs__RC_RelConstructor(Message* rel) {
	Message* First = JB_Incr(((Message*)JB_Ring_First(rel)));
	if ((!SC_Refs__RelNeedsRef(rel, First))) {
		JB_Decr(First);
		return;
	}
	JB_Decr(First);
	Message* Last = JB_Incr(((Message*)JB_Tree_Get(rel, 2)));
	if (JB_Msg_OperatorIsThing(Last, JB_LUB[106])) {
		JB_Decr(Last);
		return;
	}
	if ((!JB_Msg_EqualsSyx(Last, JB_SyxThg, false))) {
		JB_SetRef(Last, SC_Func__TempMoveOut(Last, rel));
	}
	SC_Refs__RefIncr(Last, rel, false);
	JB_Decr(Last);
}

void SC_Refs__RC_Temps(SCFunction* FN, Message* msg, int Basis) {
	Message* ch = JB_Incr(JB_Msg_UseNonRefChangers(msg, false));
	if ((Basis == kSC__Refs_BasisDeSTRUCTable) or (Basis == kSC__Refs_BasisTempStruct)) {
		if ((!JB_FreeIfDead(JB_Msg_IsSetIntoPlace(msg))) and (!({
			Message* _tmP241 = JB_Incr(((Message*)JB_Ring_Parent(ch)));
			bool _tmP240 = JB_Msg_IsReturnOrRejoin(_tmP241);
			JB_Decr(_tmP241);
			 _tmP240;
		}))) {
			JB_FreeIfDead(SC_Func__TypedTempMoveOut(msg, JB_LUB[0]));
		}
		JB_Decr(ch);
		return;
	}
	if ((!((Basis == kSC__Refs_BasisObj) and ((!JB_Msg_IsProperty(msg)))))) {
		JB_Decr(ch);
		return;
	}
	Message* parent = JB_Incr(JB_Msg_NiceParent(ch));
	if ((!((!JB_Msg_EqualsSyx(parent, JB_SyxArg, false))))) {
		JB_Decr(ch);
		JB_Decr(parent);
		return;
	}
	if (JB_Msg_IsReturnOrRejoin(parent) and JB_Tree_IsOnlyChild(ch)) {
		JB_Decr(ch);
		JB_Decr(parent);
		return;
	}
	if (JB_FreeIfDead(JB_Msg_IsSetIntoPlace(ch))) {
		JB_Decr(ch);
		JB_Decr(parent);
		return;
	}
	if ((!JB_Msg_RefDisappears(ch))) {
		if (((JB_Msg_EqualsSyx(parent, JB_SyxPrm, false))) and (parent->Obj == SC__Comp_TernaryFunc)) {
			if ((!(JB_FreeIfDead(JB_Msg_UseNonRefChangers(ch, false)) == JB_FreeIfDead(((Message*)JB_Ring_First(parent)))))) {
				JB_Decr(ch);
				JB_Decr(parent);
				return;
			}
		}
		Message* pp = JB_Incr(JB_Msg_ParentPoint(ch));
		if (SC_Refs__RC_NeedsOwnBlock(ch, pp)) {
			JB_FreeIfDead(JB_Msg_TempIntoBlock(ch, pp));
		}
		 else {
			JB_FreeIfDead(SC_Func__TypedTempMoveOut(msg, JB_LUB[0]));
		}
		JB_Decr(pp);
	}
	 else {
		//using;
		MessagePosition _using151 = JB_Msg_SyntaxUsing(msg);
		Message* fnc = JB_Incr(SC_NewFnc(JB_LUB[101]));
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(fnc)));
		JB_SetRef(_tmPf0->Obj, SC__Comp_RefFreeIfDead);
		JB_Decr(_tmPf0);
		JB_SetRef(fnc->Obj, SC__Comp_RefFreeIfDead->ReturnType);
		JB_FreeIfDead(JB_Msg_ReplaceWith(msg, fnc));
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(fnc)));
		JB_Decr(fnc);
		JB_Tree_SyntaxAppend(_tmPf1, msg);
		JB_Decr(_tmPf1);
		JB_MsgPos_SyntaxUsingComplete((&_using151));
		JB_MsgPos_Destructor((&_using151));
	}
	JB_Decr(parent);
	JB_Decr(ch);
}

int SC_Refs__RefBasis(Message* msg, bool SetOnly) {
	return SC_Refs__RefBasisStruct(msg, SetOnly) & (~kSC__Refs_BasisTempStruct);
}

int SC_Refs__RefBasisStruct(Message* msg, bool SetOnly) {
	SCDecl* type = JB_Msg_AsDecl(msg);
	if ((!(JB_Object_Isa(type, JB_AsClass(SCDecl))))) {
		type = SC_TypeOfExpr(msg, nil, nil);
		if ((!type)) {
			return nil;
		}
	}
	if (SC_Decl_IsReffable(type, SetOnly)) {
		return kSC__Refs_BasisObj;
	}
	if (SC_Decl_HasStruct(type)) {
		SCFunction* fn = type->Type->DestructorFunc;
		if (((bool)fn) and (!(((bool)(fn->AllocCode & kSC_DestructorNotFromLocalRefs))))) {
			return kSC__Refs_BasisDeSTRUCTable;
		}
		Message* p = JB_Msg_NiceParent(msg);
		if (JB_Msg_OperatorIsBRel(p, JB_LUB[417])) {
			return kSC__Refs_BasisTempStruct;
		}
	}
	return 0;
}

void SC_Refs__RefDecr(Message* msg, Message* place) {
	JB_Incr(place);
	JB_Incr(msg);
	JB_SetRef(msg, SC_Refs__RefDecrMsg(msg));
	Message* OldPrev = JB_Incr(((Message*)JB_Ring_PrevSib(place)));
	if (((bool)OldPrev) and (((JB_Msg_EqualsSyx(OldPrev, JB_SyxFunc, false))) and ((({
		Message* _tmP239 = JB_Incr(((Message*)JB_Ring_First(OldPrev)));
		bool _tmP238 = JB_Msg_SyntaxEquals(_tmP239, JB_LUB[102], true);
		JB_Decr(_tmP239);
		 _tmP238;
	}))))) {
		JB_SetRef(place, OldPrev);
	}
	JB_Decr(OldPrev);
	(JB_Ring_PrevSibSet(place, msg));
	JB_Decr(place);
	JB_Decr(msg);
}

void SC_Refs__RefDecrEnd(Message* msg, Message* place) {
	Message* _tmPf0 = JB_Incr(SC_Refs__RefDecrMsg(msg));
	JB_Tree_SyntaxAppend(place, _tmPf0);
	JB_Decr(_tmPf0);
}

Message* SC_Refs__RefDecrMsg(Message* msg) {
	return SC_Refs__RefMsg(msg, JB_LUB[100], SC__Comp_RefDecr);
}

Message* SC_Refs__RefDestructorMsg(Message* msg, SCFunction* fn) {
	return SC_Refs__RefMsg(msg, fn->ExportName, fn);
}

void SC_Refs__RefIncr(Message* msg, Message* Place, bool IsJustAnArg) {
	JB_Incr(Place);
	JB_Incr(msg);
	if (IsJustAnArg) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(msg)));
		JB_SetRef(Place, ((Message*)JB_Ring_Parent(_tmPf0)));
		JB_Decr(_tmPf0);
	}
	 else {
		if (JB_Msg_EqualsSyx(Place, JB_SyxDecl, false)) {
			JB_SetRef(msg, ((Message*)JB_Ring_Last(Place)));
			if (JB_Msg_EqualsSyx(msg, JB_SyxRel, false)) {
				JB_SetRef(msg, ((Message*)JB_Ring_Last(msg)));
			}
		}
		Message* _tmPf1 = JB_Incr(JB_Msg_UnBra(msg));
		if (JB_Msg_OperatorIsThing(_tmPf1, JB_LUB[106])) {
			JB_Decr(msg);
			JB_Decr(Place);
			JB_Decr(_tmPf1);
			return;
		}
		JB_Decr(_tmPf1);
		JB_SetRef(Place, msg);
	}
	SC_Func_RefFunc(SC__Comp_RefIncr, msg, Place);
	JB_Decr(Place);
	JB_Decr(msg);
}

Message* SC_Refs__RefMsg(Message* msg, JB_String* name, SCFunction* func) {
	Message* rz = nil;
	//using;
	MessagePosition _using150 = JB_Msg_SyntaxUsing(msg);
	JB_SetRef(rz, SC_NewFnc(name));
	Message* lst = JB_Incr(((Message*)JB_Ring_Last(rz)));
	Message* _tmPf0 = JB_Incr(JB_Msg_NiceCopy(msg, nil));
	JB_Tree_SyntaxAppend(lst, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SetRef(lst->Obj, func);
	JB_Decr(lst);
	rz->Position = -1;
	JB_SetRef(rz->Obj, func->ReturnType);
	if ((!rz->Obj)) {
		JB_SetRef(rz->Obj, JB_TypeVoid);
	}
	JB_MsgPos_SyntaxUsingComplete((&_using150));
	JB_SafeDecr(rz);
	JB_MsgPos_Destructor((&_using150));
	return rz;
}

Message* SC_Refs__RefMsg0(JB_String* name, SCFunction* func) {
	Message* rz = nil;
	JB_SetRef(rz, SC_NewFnc(name));
	rz->Position = -1;
	Message* _tmPf0 = JB_Incr(((Message*)JB_Tree_Get(rz, 1)));
	JB_SetRef(_tmPf0->Obj, func);
	JB_Decr(_tmPf0);
	JB_SafeDecr(rz);
	return rz;
}

void SC_Refs__RefSafeDecr(Message* msg, Message* place) {
	if (JB_Msg_EqualsSyx(place, JB_SyxArg, false)) {
		Message* _tmPf0 = JB_Incr(SC_Refs__SafeDecrMsg(msg));
		JB_Tree_SyntaxAppend(place, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		Message* _tmPf1 = JB_Incr(SC_Refs__SafeDecrMsg(msg));
		(JB_Ring_PrevSibSet(place, _tmPf1));
		JB_Decr(_tmPf1);
	}
}

bool SC_Refs__RelNeedsRef(Message* msg, Message* first) {
	if ((!(SC_Refs__RefBasis(first, true) == kSC__Refs_BasisObj))) {
		return nil;
	}
	if (JB_Msg_EqualsSyx(first, JB_SyxDot, false)) {
		return true;
	}
	return true;
}

void SC_Refs__ReturnHandle(Message* Blocker, Message* arg, Message* name, int Basis) {
	if (Basis == kSC__Refs_BasisDeSTRUCTable) {
		Message* NeedsMoreTemping = nil;
		Message* Ch = nil;
		if (Blocker) {
			JB_SetRef(Ch, ((Message*)JB_Ring_First(Blocker)));
			if ((JB_Msg_IsReturnOrRejoin(Blocker) and JB_Msg_OperatorIsThing(Ch, name->Name)) or (JB_Msg_OperatorIsThing(Blocker, name->Name))) {
				JB_Decr(NeedsMoreTemping);
				JB_Decr(Ch);
				return;
			}
			if (((JB_Msg_SyntaxEquals(Blocker, JB_LUB[602], false))) and (JB_Msg_DoesAnything(Ch))) {
				JB_SetRef(NeedsMoreTemping, SC_Func__TempMoveOut(Ch, Blocker));
			}
		}
		SC_Refs__Destructable(Blocker, arg, name);
		if (NeedsMoreTemping) {
			SC_Refs__ReturnTempMoveOutSub(Ch, Blocker, NeedsMoreTemping);
		}
		JB_Decr(Ch);
		JB_Decr(NeedsMoreTemping);
		return;
	}
	if (Basis == kSC__Refs_BasisTempStruct) {
		return;
	}
	if ((!Blocker)) {
		if ((!(arg))) {
			debugger;
			return;
		}
		SC_Refs__RefDecrEnd(name, arg);
		return;
	}
	bool IsReturn = JB_Msg_IsReturnOrRejoin(Blocker);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Blocker)));
	Message* Child = JB_Incr(JB_Msg_UnBraType(_tmPf0));
	JB_Decr(_tmPf0);
	if ((!Child)) {
		SC_Refs__RefDecr(name, Blocker);
	}
	 else if (IsReturn and (JB_Msg_OperatorIsThing(Child, name->Name))) {
		SC_Refs__RefSafeDecr(name, Blocker);
	}
	 else {
		if (IsReturn and SC_Refs__ExprNeedsTemping(Child, name)) {
			SC_Refs__ReturnTempMoveOut(Child, Blocker);
		}
		SC_Refs__RefDecr(name, Blocker);
	}
	JB_Decr(Child);
}

void SC_Refs__ReturnTempMoveOut(Message* Child, Message* blocker) {
	Message* Temp = JB_Incr(SC_Func__TempMoveOut(Child, blocker));
	SC_Refs__ReturnTempMoveOutSub(Child, blocker, Temp);
	JB_Decr(Temp);
}

void SC_Refs__ReturnTempMoveOutSub(Message* Child, Message* blocker, Message* temp) {
	if ((!(SC_Refs__RefBasis(Child, false) == kSC__Refs_BasisObj))) {
		return;
	}
	Message* _tmPf0 = JB_Incr(JB_Msg_ParentPoint(temp));
	SC_Refs__RefIncr(Child, _tmPf0, false);
	JB_Decr(_tmPf0);
	SC_Refs__RefSafeDecr(temp, blocker);
}

Message* SC_Refs__SafeDecrMsg(Message* msg) {
	return SC_Refs__RefMsg(msg, JB_LUB[102], SC__Comp_RefSafeDecr);
}


SCBase* SC_SCSelector__Build(Message* node, SCBase* name_space, Message* ErrPlace) {
	Message* arg = JB_Incr(JB_Msg_NeedSyxInt(node, JB_SyxArg, -1));
	if ((!arg)) {
		JB_Decr(arg);
		return nil;
	}
	Message* name = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	if ((!name)) {
		JB_Decr(arg);
		JB_Decr(name);
		return nil;
	}
	Message* items = JB_Incr(SC_SCSelector__FindItems(arg));
	if ((!items)) {
		JB_Decr(arg);
		JB_Decr(name);
		JB_Decr(items);
		return nil;
	}
	Message* ActualNames = JB_Incr(JB_Msg_NeedSyx(items, JB_SyxList));
	if ((!ActualNames)) {
		JB_Decr(arg);
		JB_Decr(name);
		JB_Decr(items);
		JB_Decr(ActualNames);
		return nil;
	}
	//using;
	MessagePosition _using152 = JB_Msg_SyntaxUsing(node);
	bool IsClass = SC_SCSelector__HasClassStuff(arg);
	JB_String* type = JB_Incr(((JB_String*)JB_Ternary(IsClass, name->Name, JB_LUB[603])));
	Message* ClassCode = JB_Incr(SC_SCSelector__BuildClassCode(name->Name, type));
	Message* dot3 = JB_Incr(JB_Msg_FindNested(ClassCode, JB_SyxSThg, JB_LUB[526], true));
	JB_Tree_Remove(items);
	JB_Decr(items);
	{
		Message* _Valuef2 = JB_Incr(((Message*)JB_Tree_First_(ActualNames)));
		while (_Valuef2) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(_Valuef2)));
			Message* line = JB_Incr(_Valuef2);
			Message* init = nil;
			if (JB_Msg_EqualsSyx(line, JB_SyxItem, false)) {
				JB_SetRef(line, ((Message*)JB_Ring_First(line)));
				JB_SetRef(init, ((Message*)JB_Ring_NextSib(line)));
				if (JB_Msg_EqualsSyx(init, JB_SyxList, false)) {
					init->Func = JB_SyxPrm;
				}
			}
			if ((!(JB_Msg_Expect(line, JB_SyxThg, nil)))) {
				JB_Decr(_Nf1);
				JB_Decr(line);
				JB_Decr(init);
				break;
			}
			//using;
			MessagePosition _using153 = JB_Msg_SyntaxUsing(line);
			SC_SCSelector__DeclareOneSel(line->Name, type, dot3);
			SC_SCSelector__LoadOneSel(line->Name, name->Name, dot3, init);
			JB_Decr(init);
			JB_Decr(line);
			JB_MsgPos_SyntaxUsingComplete((&_using153));
			JB_SetRef(_Valuef2, _Nf1);
			JB_Decr(_Nf1);
			JB_MsgPos_Destructor((&_using153));
		};
		JB_Decr(_Valuef2);
		(ActualNames);
	}
	;
	JB_Decr(type);
	JB_Decr(ActualNames);
	JB_Decr(name);
	{
		Message* ch = JB_Incr(((Message*)JB_Ring_Last(arg)));
		while (ch) {
			Message* _Nf4 = JB_Incr(((Message*)JB_Ring_PrevSib(ch)));
			Message* _tmPf5 = JB_Incr(((Message*)JB_Tree_Get(ClassCode, -1)));
			(JB_Ring_FirstSet(_tmPf5, ch));
			JB_Decr(_tmPf5);
			JB_SetRef(ch, _Nf4);
			JB_Decr(_Nf4);
		};
		JB_Decr(ch);
		(arg);
	}
	;
	JB_Decr(arg);
	if ((!(IsClass))) {
		Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_Parent(dot3)));
		JB_SetRef(ClassCode, ((Message*)JB_Ring_Parent(_tmPf6)));
		JB_Decr(_tmPf6);
	}
	JB_Tree_Remove(dot3);
	JB_Decr(dot3);
	JB_FreeIfDead(SC_Base_CollectSub(name_space, ClassCode));
	JB_Decr(ClassCode);
	JB_MsgPos_SyntaxUsingComplete((&_using152));
	JB_MsgPos_Destructor((&_using152));
	return nil;
}

Message* SC_SCSelector__BuildClassCode(JB_String* name, JB_String* type) {
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[604]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendString(_fsf0, JB_LUB[605]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendString(_fsf0, JB_LUB[606]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendString(_fsf0, JB_LUB[607]);
	JB_FS_AppendString(_fsf0, type);
	JB_FS_AppendString(_fsf0, JB_LUB[608]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendString(_fsf0, JB_LUB[609]);
	JB_FS_AppendString(_fsf0, type);
	JB_FS_AppendString(_fsf0, JB_LUB[610]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendString(_fsf0, JB_LUB[611]);
	JB_FS_AppendString(_fsf0, type);
	JB_FS_AppendString(_fsf0, JB_LUB[612]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendString(_fsf0, JB_LUB[613]);
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	Message* _tmPf1 = JB_Incr(JB_Str_Parse((_tmPf2), JB_SyxArg, true));
	JB_Decr(_tmPf2);
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(_tmPf1)));
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

void SC_SCSelector__DeclareOneSel(JB_String* sel_name, JB_String* type, Message* place) {
	Message* _tmPf0 = JB_Incr(SC_NewDeclWithStrStr(type, sel_name));
	(JB_Ring_PrevSibSet(place, _tmPf0));
	JB_Decr(_tmPf0);
}

Message* SC_SCSelector__FindItems(Message* arg) {
	Message* mu = JB_Msg_FindFlat(arg, JB_SyxTmp, JB_LUB[614], false);
	if (mu) {
		if (JB_Ring_HasChildren(mu)) {
			JB_Msg_SyntaxExpect(mu, JB_LUB[615]);
			return nil;
		}
		SC_VM_Builder__BuildInstructions(mu);
		return mu;
	}
	return JB_Msg_FindFlat(arg, JB_SyxTmp, JB_LUB[616], true);
}

bool SC_SCSelector__HasClassStuff(Message* self) {
	bool rz = false;
	{
		Message* s = JB_Incr(((Message*)JB_Tree_First_(self)));
		while (s) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(s)));
			if ((!((JB_Msg_OperatorIsTmp(s, JB_LUB[617])) or (JB_Msg_OperatorIsTmp(s, JB_LUB[616]))))) {
				if (JB_Msg_OperatorIsTmp(s, JB_LUB[618])) {
					JB_Msg_SyntaxExpect(s, JB_LUB[619]);
					JB_Decr(s);
					JB_Decr(_Nf1);
					return nil;
				}
				rz = true;
			}
			JB_SetRef(s, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(s);
		(self);
	}
	;
	return rz;
}

void SC_SCSelector__LoadOneSel(JB_String* sel_name, JB_String* module_name, Message* LoaderPlace, Message* Prms) {
	JB_Incr(Prms);
	Message* Line = JB_Incr((JB_Syx_Msg(JB_SyxSDot, JB_LUB[620])));
	Message* _tmPf5 = JB_Incr(({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		Message* _tmPf6 = JB_Incr(({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[417])));
			Message* _tmPf7 = JB_Incr(({
				Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxDot, sel_name)));
				Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxThg, module_name));
				JB_Tree_SyntaxAppend(__imPf2, (_tmPf8));
				JB_Decr(_tmPf8);
				Message* _tmPf9 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
				JB_Tree_SyntaxAppend(__imPf2, (_tmPf9));
				JB_Decr(_tmPf9);
				JB_SafeDecr(__imPf2);
				 __imPf2;
			}));
			JB_Tree_SyntaxAppend(__imPf1, _tmPf7);
			JB_Decr(_tmPf7);
			JB_SafeDecr(__imPf1);
			 __imPf1;
		}));
		JB_Tree_SyntaxAppend(__imPf0, _tmPf6);
		JB_Decr(_tmPf6);
		Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxStr, sel_name));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf10));
		JB_Decr(_tmPf10);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	JB_Tree_SyntaxAppend(Line, _tmPf5);
	JB_Decr(_tmPf5);
	(JB_Ring_NextSibSet(LoaderPlace, Line));
	if (Prms) {
		if ((!JB_Msg_EqualsSyx(Prms, JB_SyxPrm, false))) {
			if (JB_Msg_EqualsSyx(Prms, JB_SyxList, false)) {
				debugger;
			}
			JB_SetRef(Prms, ({
				Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
				JB_Tree_SyntaxAppend(__imPf3, Prms);
				JB_SafeDecr(__imPf3);
				 __imPf3;
			}));
		}
		Message* Line2 = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[621])));
		Message* _tmPf11 = JB_Incr(({
			Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxDot, sel_name)));
			Message* _tmPf12 = JB_Incr(JB_Syx_Msg(JB_SyxThg, module_name));
			JB_Tree_SyntaxAppend(__imPf4, (_tmPf12));
			JB_Decr(_tmPf12);
			Message* _tmPf13 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
			JB_Tree_SyntaxAppend(__imPf4, (_tmPf13));
			JB_Decr(_tmPf13);
			JB_SafeDecr(__imPf4);
			 __imPf4;
		}));
		JB_Tree_SyntaxAppend(Line2, _tmPf11);
		JB_Decr(_tmPf11);
		JB_Tree_SyntaxAppend(Line2, Prms);
		Message* _tmPf14 = JB_Incr(((Message*)JB_Ring_Parent(Line)));
		JB_Tree_SyntaxAppend(_tmPf14, Line2);
		JB_Decr(_tmPf14);
		JB_Decr(Line2);
	}
	JB_Decr(Line);
	JB_Decr(Prms);
}

SCBase* SC_SCSelector__Neu(Message* node, SCBase* name_space, Message* ErrPlace) {
	JB_FreeIfDead(SC_SCSelector__Build(node, name_space, ErrPlace));
	JB_SetRef(node->Name, JB_LUB[622]);
	return SC__Comp_program;
}


int SC_SCStrings__Init_() {
	{
	}
	;
	return 0;
}

int SC_SCStrings__InitCode_() {
	return 0;
}


SCBase* SC_SCThe__NewInsertion(Message* node, SCBase* name_space, Message* ErrPlace) {
	Message* name = JB_Msg_NeedSyx(node, JB_SyxThg);
	if ((!((JB_Msg_SyntaxEquals(name, JB_LUB[623], false)) or (JB_Msg_SyntaxEquals(name, JB_LUB[19], false))))) {
		JB_Msg_SyntaxExpect(name, nil);
		return nil;
	}
	Dictionary* d = ({
		Dictionary* _X = ((Dictionary*)JB_Dict_ValueStr(SC__Comp_AdjDicts, name->Name));
		if ((!_X)) {
			_X = JB_Dict__New();
			(JB_Dict_ValueSet(SC__Comp_AdjDicts, name->Name, _X));
		}
		 _X;
	});
	{
		Message* _LoopSrcf2 = JB_Msg_NextOf2(name, JB_SyxArg, nil);
		Message* line = ((Message*)JB_Tree_First_(_LoopSrcf2));
		while (line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(line));
			JB_Msg_Expect(line, JB_SyxTmp, nil);
			Message* value = JB_Msg_NeedSyxInt(line, JB_SyxNil, 0);
			JB_Msg_ExpectLast(value, JB_LUB[0]);
			JB_Object* old = JB_Dict_ValueStr(d, line->Name);
			if (old) {
				if ((!false)) {
					JB_Msg_SyntaxExpect(line, JB_kNameConf);
				}
			}
			 else {
				(JB_Dict_ValueSet(d, line->Name, JB_Macro__NewMsg(value)));
			}
			line = _Nf1;
		};
		(_LoopSrcf2);
	}
	;
	JB_Tree_Remove(node);
	return SC__Comp_program;
}


int SC_Targets__Init_() {
	{
		JB_SetRef(SC__Targets_Items, JB_Dict__New());
	}
	;
	return 0;
}

int SC_Targets__InitCode_() {
	return 0;
}

void SC_Targets__SetMsg(Message* thg) {
	SC_Targets__Set(thg->Name);
}

void SC_Targets__Set(JB_String* name) {
	(JB_Dict_ValueSet(SC__Targets_Items, name, JB_LUB[107]));
}

bool SC_Targets__SyntaxAccess(JB_String* name) {
	return ((bool)JB_FreeIfDead(JB_Dict_ValueStr(SC__Targets_Items, name)));
}


int SC_TextAssembler__Init_() {
	{
	}
	;
	return 0;
}

int SC_TextAssembler__InitCode_() {
	return 0;
}


xC2xB5Form* SC_VM_Builder__AddForm(Message* form) {
	xC2xB5Form* rz = nil;
	rz = SC_xC2xB5Form__NewWithMsg(form);
	(JB_Dict_ValueLowerSet(SC__xC2xB5Form_Forms, form->Name, rz));
	return rz;
}

void SC_VM_Builder__BuildInstructions(Message* mu) {
	JB_SetRef(mu->Name, JB_LUB[616]);
	Message* dest = JB_Msg_Msg(mu, JB_SyxList, JB_LUB[0]);
	(JB_Msg_SyntaxIsSet(dest, kJB__MsgUIFlags_Style2, true));
	{
		Message* _LoopSrcf2 = SC__VM_Builder_NameList;
		Message* tmp = ((Message*)JB_Tree_First_(_LoopSrcf2));
		while (tmp) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(tmp));
			if (JB_Msg_EqualsSyx(tmp, JB_SyxTmp, false)) {
				Message* item = JB_Msg_Msg(dest, JB_SyxItem, JB_LUB[0]);
				JB_FreeIfDead(JB_Msg_Msg(item, JB_SyxThg, tmp->Name));
				Message* prm = JB_Msg_NeedSyxOK(tmp, JB_SyxBra, JB_SyxList);
				if (prm) {
					Message* first = ((Message*)JB_Ring_First(prm));
					first->Func = JB_SyxStr;
					JB_Tree_SyntaxAppend(item, prm);
				}
				 else {
					if ((!false)) {
						JB_Msg_SyntaxExpect(tmp, JB_LUB[624]);
					}
				}
			}
			tmp = _Nf1;
		};
		(_LoopSrcf2);
	};
}

void SC_VM_Builder__Clean(Message* msg) {
	{
		Message* ch = msg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(msg));
		while (((bool)ch) and (ch != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(ch));
			if (JB_Msg_OperatorIn(ch, JB_SyxArg)) {
				ch->Indent = (ch->Indent + 4);
			}
			if (JB_Msg_EqualsSyx(ch, JB_SyxOpp, false)) {
				if (JB_Msg_SyntaxEquals(ch, JB_LUB[625], false)) {
					JB_SetRef(ch->Name, JB_LUB[522]);
				}
				 else if (JB_Msg_SyntaxEquals(ch, JB_LUB[626], false)) {
					JB_SetRef(ch->Name, JB_LUB[458]);
				}
			}
			ch = _N_f2;
		};
		(msg);
	};
}

Message* SC_VM_Builder__DataTypeCreate(Message* form, int fnum) {
	Message* rz = nil;
	JB_String* name = JB_Str_OperatorPlus(JB_LUB[627], form->Name);
	Array* _tmPf0 = (JB_Array__New0());
	JB_Array_SyntaxAppend(_tmPf0, JB_Syx_OperatorPlus(JB_SyxThg, name));
	JB_Array_SyntaxAppend(_tmPf0, JB_Syx_PlusNum(JB_SyxNum, fnum));
	Message* sigh = JB_Macro_SyntaxCall((SC__Macros_ASM_Datatype), _tmPf0);
	rz = JB_Msg_FindNested(sigh, JB_SyxList, nil, false);
	rz = ((Message*)JB_Ring_NextSib(rz));
	//"This would be better if speedie grouped these, rather than spamming JB_InitCode_";
	while (JB_Ring_HasChildren(sigh)) {
		SC_Comp__SyntaxAppend(((Message*)JB_Ring_First(sigh)));
	};
	return rz;
}

void SC_VM_Builder__DataTypeModule() {
	Message* module = JB_Str_Parse(JB_LUB[628], JB_SyxArg, true);
	SC_Comp__SyntaxAppend(module);
	JB_SetRef(SC__VM_Builder_ModuleArg, ((Message*)JB_Ring_Last(((Message*)JB_Ring_Last(((Message*)JB_Ring_Last(module)))))));
}

Array* SC_VM_Builder__DefineGet(JB_String* fname, int up, int down, bool last) {
	Array* rz = JB_Incr(((Array*)JB_Array__New0()));
	if (last) {
		SC_VM_Builder__DefineGetSub(fname, up, down, 'i', ' ');
	}
	SC_VM_Builder__DefineGetSub(fname, up, down, 'u', 'u');
	Message* _tmPf0 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, fname));
	JB_Array_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(JB_Syx_PlusNum(JB_SyxNum, up));
	JB_Array_SyntaxAppend(rz, _tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(JB_Syx_PlusNum(JB_SyxNum, down));
	JB_Array_SyntaxAppend(rz, _tmPf2);
	JB_Decr(_tmPf2);
	JB_SetRef(SC__VM_Builder_Builder, rz);
	JB_SafeDecr(rz);
	return rz;
}

void SC_VM_Builder__DefineGetSub(JB_String* fname, int up, int down, byte c, byte c2) {
	//;
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[629]);
	JB_FS_AppendString(SC__VM_Builder_form_h, fname);
	JB_FS_AppendByte(SC__VM_Builder_form_h, c);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[630]);
	JB_FS_AppendByte(SC__VM_Builder_form_h, c2);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[631]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, down);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[632]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, up);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[633]);
	JB_FS_AppendString(SC__VM_Builder_form_h, fname);
	JB_FS_AppendByte(SC__VM_Builder_form_h, c);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[634]);
	JB_FS_AppendByte(SC__VM_Builder_form_h, c2);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[635]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, down);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[632]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, up);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[636]);
	//;
}

void SC_VM_Builder__FillTypePrm(JB_String* fname, int pname) {
	Message* add = nil;
	Message* prop = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, fname));
	Array* r = JB_Incr((JB_Array__New0()));
	JB_Array_SyntaxAppend(r, prop);
	JB_Decr(prop);
	if (pname >= 4) {
		JB_SetRef(add, JB_Macro_SyntaxCall((SC__Macros_Copier2), r));
	}
	 else {
		Message* _tmPf0 = JB_Incr(JB_Syx_PlusNum(JB_SyxNum, pname));
		JB_Array_SyntaxAppend(r, _tmPf0);
		JB_Decr(_tmPf0);
		JB_SetRef(add, JB_Macro_SyntaxCall((SC__Macros_Copier), r));
	}
	JB_Decr(r);
	JB_Tree_SyntaxAppend(SC__VM_Builder_dt_prm, add);
	JB_Decr(add);
}

int SC_VM_Builder__GenAcc(Message* line, int bit_pos, int pname) {
	int n = 32 - bit_pos;
	JB_String* lname = JB_LUB[637];
	if (line) {
		Message* f = JB_Msg_NeedSyx(line, JB_SyxNil);
		if ((!f)) {
			return nil;
		}
		byte f0 = JB_Str_ByteValue(f->Name, 0);
		if (f0 == 'r') {
			SC_VM_Builder__FillTypePrm(line->Name, pname);
			return 5 + bit_pos;
		}
		if (JB_byte_IsInt(f0)) {
			n = JB_Msg_Int(f, 0);
		}
		if ((!(n >= 1))) {
			JB_Msg_SyntaxExpect(f, JB_LUB[638]);
			return nil;
		}
		if ((!(n <= 25))) {
			JB_Msg_SyntaxExpect(f, JB_Str_OperatorPlus(JB_LUB[639], JB_int_RenderFS(n, nil)));
			return nil;
		}
		lname = JB_Str_OperatorPlus(JB_LUB[568], line->Name);
	}
	lname = JB_Str_OperatorPlus(SC__VM_Builder_parent, lname);
	Array* arr = SC_VM_Builder__DefineGet(lname, 32 - n, bit_pos, (bit_pos + n) == 32);
	Message* fnc_src = JB_Macro_SyntaxCall((SC__Macros_Setter), arr);
	JB_FreeIfDead(SC_Func__NewFunc(fnc_src, nil, line));
	SC_VM_Builder__FillTypePrm(lname, pname);
	if (((bit_pos + n) > 32) or (n > 25)) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(SC__VM_Builder_dt_prm, JB_LUB[638]);
		}
	}
	return n + bit_pos;
}

void SC_VM_Builder__GenerateForms(Message* forms) {
	int f = 0;
	{
		Message* _LoopSrcf3 = JB_Msg_NeedSyx(forms, JB_SyxArg);
		Message* form_msg = ((Message*)JB_Tree_First_(_LoopSrcf3));
		while (form_msg) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(form_msg));
			bool _tmPf0 = (f < 32);
			if ((!_tmPf0)) {
				JB_Msg_SyntaxExpect(form_msg, JB_LUB[640]);
			}
			if (_tmPf0) {
				//using;
				MessagePosition _using160 = JB_Msg_SyntaxUsing(form_msg);
				SC_VM_Builder__GenerateOne(form_msg, (++f));
				JB_MsgPos_SyntaxUsingComplete((&_using160));
				JB_MsgPos_Destructor((&_using160));
			}
			form_msg = _Nf2;
		};
		(_LoopSrcf3);
	};
}

void SC_VM_Builder__GenerateOne(Message* form_msg, int f) {
	xC2xB5Form* frm = SC_VM_Builder__AddForm(form_msg);
	JB_SetRef(SC__VM_Builder_dt_prm, SC_VM_Builder__DataTypeCreate(form_msg, f));
	JB_SetRef(SC__VM_Builder_parent, form_msg->Name);
	int bit_pos = 7;
	int p = 0;
	Message* arg = JB_Msg_NeedSyxInt(form_msg, JB_SyxArg, -1);
	if ((!arg)) {
		return;
	}
	if (JB_Msg_SyntaxEquals(((Message*)JB_Ring_PrevSib(arg)), JB_LUB[526], false)) {
		frm->Varies = true;
	}
	{
		Message* l = ((Message*)JB_Tree_First_(arg));
		while (l) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(l));
			bit_pos = SC_VM_Builder__GenAcc(l, bit_pos, p++);
			l = _Nf1;
		};
		(arg);
	}
	;
	if ((bit_pos < 32) and (p < 5)) {
		SC_VM_Builder__GenAcc(nil, bit_pos, 5);
	}
	JB_FS_AppendByte(SC__VM_Builder_form_h, '\n');
}

int SC_VM_Builder__Init_() {
	{
		JB_SetRef(SC__VM_Builder_Builder, JB_Array__New0());
		JB_SetRef(SC__VM_Builder_parent, JB_LUB[0]);
		SC__VM_Builder_NormalPos = 0;
		SC__VM_Builder_HighPos = 112;
		JB_SetRef(SC__VM_Builder_Msgs, JB_Array__New0());
	}
	;
	return 0;
}

int SC_VM_Builder__InitCode_() {
	return 0;
}

void SC_VM_Builder__MakeJump(Message* msg, FastString* jump) {
	//;
	JB_FS_AppendString(jump, JB_LUB[641]);
	JB_FS_AppendString(jump, msg->Name);
	JB_FS_AppendString(jump, JB_LUB[642]);
	//;
}

void SC_VM_Builder__MakeVM(Message* tmp, FastString* vm) {
	if ((!(JB_Msg_EqualsSyx(tmp, JB_SyxTmp, false)))) {
		return;
	}
	Message* p = ((Message*)JB_Ring_PrevSib(tmp));
	if (JB_Msg_EqualsSyx(p, JB_SyxSheb, false)) {
		//;
		JB_FS_AppendString(vm, JB_LUB[643]);
		JB_FS_AppendString(vm, p->Name);
		JB_FS_AppendByte(vm, '\n');
		//;
	}
	Message* arg = ((Message*)JB_Ring_Last(tmp));
	//;
	JB_FS_AppendString(vm, JB_LUB[644]);
	JB_FS_AppendString(vm, tmp->Name);
	JB_FS_AppendString(vm, JB_LUB[278]);
	//;
	if ((!JB_Msg_FindSyxName(arg, JB_SyxTmp, JB_LUB[376]))) {
		JB_FS_AppendByte(vm, '_');
	}
	JB_FS_AppendByte(vm, '\n');
	{
		Message* line = ((Message*)JB_Tree_First_(arg));
		while (line) {
			Message* _Nf3 = ((Message*)JB_Ring_NextSib(line));
			SC_VM_Builder__VMLine(line, vm);
			line = _Nf3;
		};
		(arg);
	};
}

void SC_VM_Builder__Run() {
	if (SC__VM_Builder_NameList) {
		return;
	}
	JB_SetRef(SC__VM_Builder_NameList, JB_Msg__NewBasic());
	JB_File* _tmPf0 = JB_Incr(SC_Comp__InputFile(nil, JB_LUB[645], nil));
	if ((!JB_File_SyntaxCast(_tmPf0))) {
		JB_Decr(_tmPf0);
		return;
	}
	JB_SetRef(SC__VM_Builder_vm_file, _tmPf0);
	JB_Decr(_tmPf0);
	Message* x = JB_Incr(JB_File_Parse(SC__VM_Builder_vm_file, 16777216, false));
	if ((!x)) {
		JB_Decr(x);
		return;
	}
	Message* forms = JB_Incr(JB_Msg_FindName(x, JB_LUB[646]));
	JB_Tree_Remove(forms);
	JB_SetRef(SC__VM_Builder_NameList, x);
	FastString* code = JB_Incr(JB_FS__New());
	FastString* jump = JB_Incr(JB_FS__New());
	JB_SetRef(SC__VM_Builder_form_h, JB_FS__New());
	SC_VM_Builder__Clean(x);
	SC_VM_Builder__DataTypeModule();
	SC_VM_Builder__GenerateForms(forms);
	JB_Decr(forms);
	SC_VM_Builder__VMSpd(x);
	SC_VM_Builder__VMCpp(code, jump);
	JB_File* _tmPf1 = JB_Incr(SC_ASM__InstructionList(JB_LUB[647]));
	JB_String* _tmPf2 = JB_Incr(JB_FS_SyntaxCast(SC__VM_Builder_form_h));
	(JB_File_SmartDataSet(_tmPf1, _tmPf2));
	JB_Decr(_tmPf2);
	JB_Decr(_tmPf1);
	JB_File* _tmPf3 = JB_Incr(SC_ASM__InstructionList(JB_LUB[648]));
	JB_String* _tmPf4 = JB_Incr(JB_FS_SyntaxCast(code));
	JB_Decr(code);
	(JB_File_SmartDataSet(_tmPf3, _tmPf4));
	JB_Decr(_tmPf4);
	JB_Decr(_tmPf3);
	JB_File* _tmPf5 = JB_Incr(SC_ASM__InstructionList(JB_LUB[649]));
	JB_String* _tmPf6 = JB_Incr(JB_FS_SyntaxCast(jump));
	JB_Decr(jump);
	(JB_File_SmartDataSet(_tmPf5, _tmPf6));
	JB_Decr(_tmPf6);
	JB_Decr(_tmPf5);
	JB_SetRef(SC__VM_Builder_form_h, nil);
	JB_Decr(x);
}

void SC_VM_Builder__VMCpp(FastString* vm, FastString* jump) {
	{
		Array* _LoopSrcf1 = SC__VM_Builder_Msgs;
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			Message* tmp = ((Message*)JB_Array_Value(_LoopSrcf1, _if0));
			SC_VM_Builder__MakeVM(tmp, vm);
			SC_VM_Builder__MakeJump(tmp, jump);
			_if0++;
		};
	}
	;
	JB_FS_AppendString(vm, JB_LUB[650]);
}

void SC_VM_Builder__VMDecl(Message* tmp) {
	Message* arg = ((Message*)JB_Ring_Last(tmp));
	Message* prms = ((Message*)JB_Ring_First(tmp));
	JB_String* name = JB_Str_ASMNormalise(((Message*)JB_Ring_First(prms))->Name);
	xC2xB5Form* form = ((xC2xB5Form*)JB_Dict_ValueLower(SC__xC2xB5Form_Forms, name));
	if ((!form)) {
		return;
	}
	byte id = ((byte)JB_Ternary(form->Varies, SC__VM_Builder_HighPos++, ((byte)SC__VM_Builder_NormalPos++)));
	SC__ASM_Encoders[id] = SC__ASM_Forms[form->Index];
	(JB_Array_ValueSet(SC__VM_Builder_Msgs, id, tmp));
	name = JB_Str_OperatorPlus(JB_LUB[627], name);
	JB_Tree_SyntaxAppend(SC__VM_Builder_ModuleArg, SC_NewDeclWithStrStr(name, JB_LUB[0]));
	JB_Tree_SyntaxAppend(SC__VM_Builder_ModuleArg, SC_NewRel(JB_Syx_OperatorPlus(JB_SyxThg, tmp->Name), JB_LUB[541], JB_Syx_PlusNum(JB_SyxNum, id)));
}

void SC_VM_Builder__VMLine(Message* line, FastString* vm) {
	if (JB_Msg_EqualsSyx(line, JB_SyxSheb, false)) {
		//;
		JB_FS_AppendString(vm, JB_LUB[643]);
		JB_FS_AppendString(vm, line->Name);
		JB_FS_AppendByte(vm, '\n');
		//;
	}
	 else {
		JB_FS_AppendByte(vm, '\t');
		JB_FreeIfDead(JB_Msg_Render(line, vm));
		JB_FS_AppendByte(vm, ';');
	}
	JB_FS_AppendByte(vm, '\n');
}

void SC_VM_Builder__VMSpd(Message* list) {
	JB_Array_AppendCount(SC__VM_Builder_Msgs, JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[651]), 128);
	{
		Message* ch = ((Message*)JB_Tree_First_(list));
		while (ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(ch));
			SC_VM_Builder__VMTmp(ch);
			ch = _Nf1;
		};
		(list);
	};
}

void SC_VM_Builder__VMTmp(Message* tmp) {
	if ((JB_Msg_EqualsSyx(tmp, JB_SyxTmp, false)) and ((!JB_Msg_SyntaxEquals(tmp, JB_LUB[646], false)) and (!JB_Msg_SyntaxEquals(tmp, JB_LUB[652], false)))) {
		SC_VM_Builder__VMDecl(tmp);
	}
}


int JB_zalgo__Init_() {
	{
		JB__zalgo_R = ((Random){});
		JB_SetRef(JB__zalgo_up, JB_LUB[653]);
		JB_SetRef(JB__zalgo_mid, JB_LUB[654]);
		JB_SetRef(JB__zalgo_down, JB_LUB[655]);
	}
	;
	return 0;
}

int JB_zalgo__InitCode_() {
	return 0;
}


void SC___junktest_1__() {
	//visible;
	Array* r = JB_Incr((JB_Array__New0()));
	DTWrap* _tmPf0 = JB_Incr(JB_Wrap__NewInt(1));
	JB_Array_SyntaxAppend(r, _tmPf0);
	JB_Decr(_tmPf0);
	DTWrap* _tmPf1 = JB_Incr(JB_Wrap__NewInt(2));
	JB_Array_SyntaxAppend(r, _tmPf1);
	JB_Decr(_tmPf1);
	DTWrap* _tmPf2 = JB_Incr(JB_Wrap__NewInt(3));
	JB_Array_SyntaxAppend(r, _tmPf2);
	JB_Decr(_tmPf2);
	ErrorSeverity i = 2;
	DTWrap* _tmPf3 = JB_Incr(((DTWrap*)JB_Array_Value(r, ((int)i))));
	JB_Decr(r);
	int v = ((int)JB_Wrap_Value(_tmPf3));
	JB_Decr(_tmPf3);
}

void SC___junktest_2__() {
	//visible;
	RingTree* r1 = JB_Incr(JB_Ring__New0());
	RingTree* r2 = JB_Incr(JB_Ring__New0());
	int i2 = 0;
	int* i3 = (&i2);
	(*i3) = JB_Tree_dist(r1, r2);
	{
		if (r1) {
			(JB_Ring_ParentSet(r1, r2));
		}
	}
	;
	JB_Decr(r2);
	JB_Decr(r1);
}

bool SC___junktest_3__(IntRange data) {
	//visible;
	ivec4 x = ((ivec4){});
	x = JB_ivec4___junktest_4__Set(x, 1);
	return false;
}

void SC_abctest() {
	//visible;
	ASM2 Test = ((ASM2){});
	Test.Rest = 1;
}

void SC_AddToStaticSection(Message* arg, Message* ToAdd) {
	JB_Incr(arg);
	Message* Static = JB_Incr(JB_Msg_FindFlat(arg, JB_SyxTmp, JB_LUB[617], false));
	if (Static) {
		JB_SetRef(arg, ((Message*)JB_Ring_Last(Static)));
		if ((!(JB_Msg_EqualsSyx(arg, JB_SyxArg, false)))) {
			JB_Msg_SyntaxExpect(Static, JB_LUB[656]);
			JB_Decr(arg);
			JB_Decr(Static);
			return;
		}
	}
	 else {
		JB_SetRef(Static, (JB_Syx_Msg(JB_SyxTmp, JB_LUB[617])));
		JB_Tree_SyntaxAppend(arg, Static);
		JB_SetRef(arg, (JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
		JB_Tree_SyntaxAppend(Static, arg);
	}
	JB_Decr(Static);
	JB_Tree_SyntaxAppend(arg, ToAdd);
	JB_Decr(arg);
}

int SC_ArrayInOrderCheck(int InOrder, Message* msg) {
	if ((InOrder >= 0) and (JB_Msg_EqualsSyx(msg, JB_SyxNum, false))) {
		if (JB_Msg_Int(msg, 0) == InOrder) {
			return InOrder + 1;
		}
	}
	return -1;
}

bool SC_CanOpCompare(Message* exp, SCDecl* lc, SCDecl* rc, SCOperator* comp) {
	return ((!JB_Msg_EqualsSyx(((Message*)JB_Ring_Parent(exp)), JB_SyxArg, false))) and (SC_Class_CanCompare(lc->Type, rc, comp->IsEquals));
}

void SC_ClassLinkageTable_cpp_class(SCFunction* fn, Message* node, SCBase* name_space) {
}

void SC_ClassLinkageTable_cpp_part(SCFunction* fn, Message* node, SCBase* name_space) {
	JB_FreeIfDead(SC_Base__LoadCppPart(node, name_space, node));
}

void SC_ClassLinkageTable_cpp_wrapper(SCFunction* fn, Message* node, SCBase* name_space) {
}

void SC_ClassLinkageTable_datatype(SCFunction* fn, Message* node, SCBase* name_space) {
	if (JB_Object_MustBe(name_space, JB_AsClass(SCClass), node)) {
		if ((!(((SCClass*)name_space)->IsStruct))) {
			JB_Msg_SyntaxExpect(node, JB_LUB[657]);
			return;
		}
		Message* value = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
		if (value) {
			JB_Msg_ExpectLast(value, JB_LUB[0]);
			((SCClass*)name_space)->IsDataTypeLike = JB_Msg_TrueOrFalse(value);
		}
		JB_Decr(value);
	}
}

void SC_ClassLinkageTable_dontdestructlocally(SCFunction* fn, Message* node, SCBase* name_space) {
}

void SC_ClassLinkageTable_ignore(SCFunction* fn, Message* node, SCBase* name_space) {
}

void SC_ClassLinkageTable_noearlyfree(SCFunction* fn, Message* node, SCBase* name_space) {
}

void SC_ClassLinkageTable_numeric(SCFunction* fn, Message* node, SCBase* name_space) {
	if (JB_Object_MustBe(name_space, JB_AsClass(SCClass), node)) {
		if ((!(((SCClass*)name_space)->IsDataType))) {
			JB_Msg_SyntaxExpect(node, JB_LUB[658]);
			return;
		}
		Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
		if (JB_Msg_SyntaxEquals(_tmPf0, JB_LUB[108], false)) {
			((SCClass*)name_space)->TypeInfo = kJB__TC_UnusedType;
			((SCClass*)name_space)->IsNotNumeric = true;
		}
		JB_Decr(_tmPf0);
	}
}

void SC_ClassLinkageTable_visible(SCFunction* fn, Message* node, SCBase* name_space) {
}

void SC_ClassLinkageTable_wrapper(SCFunction* fn, Message* node, SCBase* name_space) {
}

SCClass* SC_ClassOfObjForC(Message* curr) {
	if (JB_Msg_EqualsSyx(curr, JB_SyxFunc, false)) {
		SCFunction* fnc = JB_Incr(JB_Msg_MsgFunc(curr));
		if (fnc) {
			SCClass* _tmPf0 = JB_Incr(fnc->ReturnType->Type);
			JB_Decr(fnc);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(fnc);
	}
	JB_Object* obj = JB_Incr(curr->Obj);
	if (JB_Object_FastIsa(obj, JB_AsClass(SCDecl))) {
		SCClass* _tmPf1 = JB_Incr(((SCDecl*)obj)->Type);
		JB_Decr(obj);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	if (JB_Object_FastIsa(obj, JB_AsClass(SCClass))) {
		JB_SafeDecr(obj);
		return ((SCClass*)obj);
	}
	if (JB_Object_FastIsa(obj, JB_AsClass(SCFunction))) {
		SCClass* _tmPf2 = JB_Incr(((SCFunction*)obj)->ReturnType->Type);
		JB_Decr(obj);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	if (JB_Object_FastIsa(obj, JB_AsClass(SCModule))) {
		if (((SCModule*)obj)->Cls) {
			JB_Decr(obj);
			return JB_TypeJBClass;
		}
	}
	JB_Decr(obj);
	return nil;
}

SCBase* SC_ClsCollectTable_linkage(Message* node, SCBase* name_space, Message* ErrPlace) {
	Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxArg));
	SCBase* _tmPf1 = JB_Incr(SC_Base_ProcessLinkage(name_space, _tmPf0, JB_ClassLinkageTable));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCBase* SC_ClsCollectTable_pragma(Message* node, SCBase* name_space, Message* ErrPlace) {
	if ((!false)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[659]);
	}
	return nil;
}

Array* SC_CollectDecls(Message* DeclList, SCBase* Name_Space, SCBase* AddToSpace, int PropertyMode) {
	Array* rz = JB_Incr(((Array*)JB_Array__New0()));
	if ((!DeclList)) {
		Array* _tmPf0 = JB_Incr((JB_Array__New0()));
		JB_Decr(rz);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	if ((!((JB_Msg_EqualsSyx(DeclList, JB_SyxPrm, false)) or (JB_Msg_EqualsSyx(DeclList, JB_SyxArg, false))))) {
		JB_Msg_SyntaxExpect(DeclList, nil);
		JB_Decr(rz);
		return nil;
	}
	int OriginalErrCount = JB_StdErr->ErrorCount;
	SCFunction* Func = nil;
	SCClass* Cls = nil;
	if ((JB_Object_FastIsa(Name_Space, JB_AsClass(SCFunction))) and ((JB_Msg_EqualsSyx(DeclList, JB_SyxPrm, false)))) {
		JB_SetRef(Func, Name_Space);
		JB_SetRef(Cls, Func->Cls);
		if (Cls) {
			JB_Array_SyntaxAppend(rz, Cls->SelfStrong);
		}
		 else {
			SCBase* L = JB_Incr(Func->Lookup);
			if (JB_Object_FastIsa(L, JB_AsClass(SCModule))) {
				JB_SetRef(Cls, ((SCModule*)L)->Cls);
			}
			JB_Decr(L);
		}
	}
	 else if (JB_Object_FastIsa(AddToSpace, JB_AsClass(SCClass))) {
		JB_SetRef(Cls, AddToSpace);
	}
	{
		Message* _Valuef3 = JB_Incr(((Message*)JB_Tree_First_(DeclList)));
		while (_Valuef3) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(_Valuef3)));
			Message* item = JB_Incr(_Valuef3);
			if ((((bool)Func) and (Func->IsAssigns == 2)) and JB_Msg_IsLast(item)) {
				if ((!Cls)) {
					if ((!false)) {
						JB_Msg_SyntaxExpect(item, JB_LUB[660]);
					}
				}
				 else {
					Func->IsAssigns = 3;
					if (Cls->IsDataType) {
						Message* _tmPf4 = JB_Incr(JB_Msg_NiceCopy(item, nil));
						(JB_Ring_NextSibSet(item, _tmPf4));
						JB_Decr(_tmPf4);
					}
					Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[661]));
					JB_Tree_SyntaxAppend(item, (_tmPf5));
					JB_Decr(_tmPf5);
				}
			}
			if (JB_Msg_EqualsSyx(item, JB_SyxItem, false)) {
				if ((!(Func))) {
					JB_Msg_SyntaxExpect(item, JB_LUB[660]);
					JB_Decr(rz);
					JB_Decr(Func);
					JB_Decr(Cls);
					JB_Decr(_Valuef3);
					JB_Decr(_Nf2);
					JB_Decr(item);
					return nil;
				}
				Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_First(item)));
				if (JB_Msg_SyntaxEquals(_tmPf6, JB_LUB[662], false)) {
					JB_SetRef(item, ((Message*)JB_Ring_Last(item)));
					Func->IsAssigns = 1;
					if ((!JB_Ring_HasChildCount(item, 2))) {
						Message* _tmPf7 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[661]));
						JB_Tree_SyntaxAppend(item, (_tmPf7));
						JB_Decr(_tmPf7);
					}
				}
				JB_Decr(_tmPf6);
			}
			if ((!JB_Msg_EqualsSyx(item, JB_SyxDecl, false))) {
				if (Func) {
					JB_Msg_SyntaxExpect(item, JB_LUB[663]);
					JB_Decr(rz);
					JB_Decr(Func);
					JB_Decr(Cls);
					JB_Decr(_Valuef3);
					JB_Decr(_Nf2);
					JB_Decr(item);
					return nil;
				}
				JB_SetRef(_Valuef3, _Nf2);
				JB_Decr(_Nf2);
				JB_Decr(item);
				continue;
			}
			Message* Types = JB_Incr(((Message*)JB_Ring_First(item)));
			Message* Names = JB_Incr(((Message*)JB_Ring_NextSib(Types)));
			if ((!(((bool)Func) or ((bool)Names)))) {
				JB_Msg_SyntaxExpect(item, JB_LUB[664]);
				JB_Decr(rz);
				JB_Decr(Func);
				JB_Decr(Cls);
				JB_Decr(_Valuef3);
				JB_Decr(_Nf2);
				JB_Decr(item);
				JB_Decr(Types);
				JB_Decr(Names);
				return nil;
			}
			if (((bool)(PropertyMode & 2))) {
				if ((!(JB_Msg_EqualsSyx(Names, JB_SyxThg, false)))) {
					JB_Msg_SyntaxExpect(Names, JB_LUB[665]);
					JB_Decr(rz);
					JB_Decr(Func);
					JB_Decr(Cls);
					JB_Decr(_Valuef3);
					JB_Decr(_Nf2);
					JB_Decr(item);
					JB_Decr(Types);
					JB_Decr(Names);
					return nil;
				}
			}
			Message* Default = JB_Incr(SC_DeclsDefault(Names));
			if (JB_Msg_SyntaxEquals(Names, JB_LUB[666], true)) {
				debugger;
			}
			SCDecl* Rdcl = JB_Incr(SC_ExtractDecl(Types, Name_Space));
			if ((!Rdcl) and ((!Default) and (JB_Object_FastIsa(Name_Space, JB_AsClass(SCArg))))) {
				JB_SetRef(Rdcl, ((SCArg*)Name_Space)->ParentFunc->ReturnType);
			}
			SCDecl* DefaultDcl = nil;
			if (((!Func)) and ((bool)Default)) {
				JB_SetRef(DefaultDcl, SC_TypeOfExprNeeded(Default, Name_Space));
				if ((!DefaultDcl)) {
					JB_Decr(rz);
					JB_Decr(Func);
					JB_Decr(Cls);
					JB_Decr(_Valuef3);
					JB_Decr(_Nf2);
					JB_Decr(item);
					JB_Decr(Types);
					JB_Decr(Names);
					JB_Decr(Default);
					JB_Decr(Rdcl);
					JB_Decr(DefaultDcl);
					return nil;
				}
				if (Rdcl) {
					JB_SetRef(Default, SC_Decl_ExpectMatch(Rdcl, DefaultDcl, kSC_TypeCastTrue, Default, nil));
				}
			}
			 else if (JB_Object_FastIsa(AddToSpace, JB_AsClass(SCClass))) {
				0;
			}
			 else if (((!Func)) and (((bool)Rdcl) and (((!Default)) and (SC_Decl_CanUseDefault(Rdcl))))) {
				JB_SetRef(Default, SC_Decl_CreateDefault(Rdcl, Types, JB_Object_Isa(AddToSpace, JB_AsClass(SCArg))));
				if (Default) {
					JB_FreeIfDead(SC_TypeOfExpr(Default, Name_Space, nil));
					SC_DefaultStitch(Default, item);
				}
			}
			JB_Decr(Types);
			if ((!(JB_StdErr->ErrorCount == OriginalErrCount))) {
				JB_Decr(rz);
				JB_Decr(Func);
				JB_Decr(Cls);
				JB_Decr(_Valuef3);
				JB_Decr(_Nf2);
				JB_Decr(item);
				JB_Decr(Names);
				JB_Decr(Default);
				JB_Decr(Rdcl);
				JB_Decr(DefaultDcl);
				return nil;
			}
			bool OriginalRdcl = ((bool)Rdcl);
			if ((!Rdcl)) {
				if (((bool)Cls) and ((bool)Cls->Contained)) {
					JB_SetRef(Rdcl, Cls->Contained);
				}
				 else {
					if (Func) {
						JB_Msg_SyntaxExpect(item, JB_LUB[667]);
						JB_Decr(rz);
						JB_Decr(Func);
						JB_Decr(Cls);
						JB_Decr(_Valuef3);
						JB_Decr(_Nf2);
						JB_Decr(item);
						JB_Decr(Names);
						JB_Decr(Default);
						JB_Decr(Rdcl);
						JB_Decr(DefaultDcl);
						return nil;
					}
					if ((!DefaultDcl)) {
						JB_Msg_SyntaxExpect(item, JB_LUB[668]);
						JB_Decr(rz);
						JB_Decr(Func);
						JB_Decr(Cls);
						JB_Decr(_Valuef3);
						JB_Decr(_Nf2);
						JB_Decr(item);
						JB_Decr(Names);
						JB_Decr(Default);
						JB_Decr(Rdcl);
						JB_Decr(DefaultDcl);
						return nil;
					}
					JB_SetRef(Rdcl, DefaultDcl);
				}
			}
			if (((bool)Func) and SC_Decl_SyntaxIs(Rdcl, kSC__SCDeclInfo_borrowed)) {
				JB_Msg_SyntaxExpect(item, JB_LUB[669]);
				JB_Decr(rz);
				JB_Decr(Func);
				JB_Decr(Cls);
				JB_Decr(_Valuef3);
				JB_Decr(_Nf2);
				JB_Decr(item);
				JB_Decr(Names);
				JB_Decr(Default);
				JB_Decr(Rdcl);
				JB_Decr(DefaultDcl);
				return nil;
			}
			if (SC_Decl_NeedsContainedfix(Rdcl)) {
				JB_SetRef(Rdcl, SC_Decl_ContainedNilfix(Rdcl));
			}
			if ((!Names)) {
				if ((!((((bool)Func) and (!Func->ReturnType)) and ((!JB_FreeIfDead(((Message*)JB_Ring_NextSib(item)))))))) {
					JB_Msg_SyntaxExpect(item, JB_LUB[670]);
					JB_Decr(rz);
					JB_Decr(Func);
					JB_Decr(Cls);
					JB_Decr(_Valuef3);
					JB_Decr(_Nf2);
					JB_Decr(item);
					JB_Decr(Names);
					JB_Decr(Default);
					JB_Decr(Rdcl);
					JB_Decr(DefaultDcl);
					return nil;
				}
				if (Func) {
					if (Rdcl->Default) {
						JB_Object_SyntaxExpect(nil);
						JB_Decr(rz);
						JB_Decr(Func);
						JB_Decr(Cls);
						JB_Decr(_Valuef3);
						JB_Decr(_Nf2);
						JB_Decr(item);
						JB_Decr(Names);
						JB_Decr(Default);
						JB_Decr(Rdcl);
						JB_Decr(DefaultDcl);
						return nil;
					}
					JB_SetRef(Func->ReturnType, Rdcl);
					if ((!SC_Decl_SyntaxIsnt(Rdcl, kSC__SCDeclInfo_borrowed))) {
						JB_Object_SyntaxExpect(nil);
						JB_Decr(rz);
						JB_Decr(Func);
						JB_Decr(Cls);
						JB_Decr(_Valuef3);
						JB_Decr(_Nf2);
						JB_Decr(item);
						JB_Decr(Names);
						JB_Decr(Default);
						JB_Decr(Rdcl);
						JB_Decr(DefaultDcl);
						return nil;
					}
				}
				JB_SetRef(_Valuef3, _Nf2);
				JB_Decr(_Nf2);
				JB_Decr(item);
				JB_Decr(Names);
				JB_Decr(Default);
				JB_Decr(Rdcl);
				JB_Decr(DefaultDcl);
				continue;
			}
			Message* NameItm = JB_Incr(JB_Msg_GetDclName(item));
			if ((!NameItm)) {
				JB_Decr(rz);
				JB_Decr(Func);
				JB_Decr(Cls);
				JB_Decr(_Valuef3);
				JB_Decr(_Nf2);
				JB_Decr(item);
				JB_Decr(Names);
				JB_Decr(Default);
				JB_Decr(Rdcl);
				JB_Decr(DefaultDcl);
				JB_Decr(NameItm);
				return nil;
			}
			SCDecl* dcl = JB_Incr(SC_Decl_Copy(Rdcl, false));
			JB_Decr(Rdcl);
			bool IsFunctionBody = (JB_Object_Isa(AddToSpace, JB_AsClass(SCArg)));
			if ((!OriginalRdcl) and IsFunctionBody) {
				(SC_Decl_IsBorrowedSet(dcl, false));
			}
			(SC_Decl_IsConstSet(dcl, false));
			if (((!Func)) and (dcl->Strength == kSC_StrSharedParams)) {
				dcl->Strength = 0;
			}
			JB_SetRef(NameItm->Obj, dcl);
			if (JB_Msg_OperatorIn(NameItm, JB_SyxRel)) {
				Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_Parent(NameItm)));
				JB_SetRef(_tmPf8->Obj, dcl);
				JB_Decr(_tmPf8);
			}
			JB_SetRef(dcl->Default, Default);
			JB_SetRef(dcl->Name, NameItm->Name);
			if (((bool)Names) and (!Default)) {
				Message* _tmPf9 = JB_Incr(((Message*)JB_Ring_NextSib(Names)));
				if (JB_Msg_EqualsSyx(_tmPf9, JB_SyxList, false)) {
					if ((!false)) {
						JB_Msg_SyntaxExpect(Names, nil);
					}
					dcl->Setter = SC__Comp_PrivateProperty;
				}
				 else {
					JB_Msg_ExpectLast(Names, JB_LUB[0]);
				}
				JB_Decr(_tmPf9);
			}
			JB_Decr(Names);
			if (((bool)Func) and ((!dcl->Strength) and SC_Decl_IsNormalObject(dcl))) {
				dcl->Strength = kSC_StrSharedParams;
			}
			if (((bool)(PropertyMode & 1))) {
				(SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_property, true));
			}
			JB_Array_SyntaxAppend(rz, dcl);
			JB_SetRef(NameItm->Obj, dcl);
			JB_SetRef(dcl->Source, item);
			JB_Decr(item);
			if (((bool)Default) and ((bool)DefaultDcl)) {
				SC_Decl_ConstCheck(dcl, nil, Default, DefaultDcl);
			}
			JB_Decr(DefaultDcl);
			JB_Decr(Default);
			if (AddToSpace) {
				SC_Base_TryAdd(AddToSpace, NameItm, dcl, dcl->Name);
			}
			JB_Decr(dcl);
			JB_Decr(NameItm);
			JB_SetRef(_Valuef3, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(_Valuef3);
		(DeclList);
	}
	;
	JB_Decr(Cls);
	JB_Decr(Func);
	JB_SafeDecr(rz);
	return rz;
}

bool JB_CompareError(Message* expected, Message* found) {
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[551]);
	JB_String* _tmPf3 = JB_Incr(JB_Msg_Locate(expected));
	JB_FS_AppendString(_fsf0, _tmPf3);
	JB_Decr(_tmPf3);
	JB_FS_AppendString(_fsf0, JB_LUB[468]);
	JB_String* _tmPf4 = JB_Incr(JB_Msg_Locate(found));
	JB_FS_AppendString(_fsf0, _tmPf4);
	JB_Decr(_tmPf4);
	JB_String* _tmPf5 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf5);
	JB_Decr(_tmPf5);
	FastString* _fsf1 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf1, JB_LUB[671]);
	Message* _tmPf7 = JB_Incr(JB_Msg_PoorAnt(expected));
	JB_String* _tmPf6 = JB_Incr(JB_Msg_Locate(_tmPf7));
	JB_Decr(_tmPf7);
	JB_FS_AppendString(_fsf1, _tmPf6);
	JB_Decr(_tmPf6);
	JB_String* _tmPf8 = JB_Incr(JB_FS_GetResult(_fsf1));
	JB_Decr(_fsf1);
	JB_PrintLine(_tmPf8);
	JB_Decr(_tmPf8);
	if (found) {
		FastString* _fsf2 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf2, JB_LUB[672]);
		Message* _tmPf10 = JB_Incr(JB_Msg_PoorAnt(found));
		JB_String* _tmPf9 = JB_Incr(JB_Msg_Locate(_tmPf10));
		JB_Decr(_tmPf10);
		JB_FS_AppendString(_fsf2, _tmPf9);
		JB_Decr(_tmPf9);
		JB_String* _tmPf11 = JB_Incr(JB_FS_GetResult(_fsf2));
		JB_Decr(_fsf2);
		JB_PrintLine(_tmPf11);
		JB_Decr(_tmPf11);
	}
	 else {
		found = expected;
	}
	JB_Msg_SyntaxExpect(found, nil);
	return false;
}

SCDecl* SC_CopyDecl(Message* CopyFrom, JB_String* name) {
	JB_Object* o = JB_Incr(CopyFrom->Obj);
	if (JB_Object_FastIsa(o, JB_AsClass(SCDecl))) {
		SCDecl* dcl = JB_Incr(SC_Decl_Copy(((SCDecl*)o), true));
		JB_SetRef(dcl->Name, name);
		JB_SetRef(dcl->Default, CopyFrom);
		JB_Decr(o);
		JB_SafeDecr(dcl);
		return dcl;
	}
	JB_Decr(o);
	return nil;
}

void SC_CppRefTable_disowns(SCFunction* fn, Message* node, SCBase* name_space) {
}

void SC_CppRefTable_disturbs(SCFunction* fn, Message* node, SCBase* name_space) {
}

void SC_Create_JeeboxTest(Message* msg) {
	if (true) {
		JB_ErrorReceiver* _tmPf0 = JB_Incr(JB_Rec__New());
		JB_ErrorReceiver* _using158 = JB_Incr(JB_Rec_SyntaxUsing(_tmPf0));
		JB_Decr(_tmPf0);
		JB_File* f = JB_Incr(SC_Comp__InputFile(nil, JB_LUB[673], nil));
		if ((!(f != nil))) {
			JB_Str_SyntaxExpect(JB_LUB[674]);
			JB_Decr(_using158);
			JB_Decr(f);
			return;
		}
		JB_String* s = JB_Incr(JB_File_ReadAll(f, 134217728, true));
		JB_Decr(f);
		if (JB_Msg_SyntaxEquals(msg, JB_LUB[675], true)) {
			//using;
			MessagePosition _using159 = JB_Msg_SyntaxUsing(msg);
			JB_SetRef(s, JB_Str_digest(s));
			JB_MsgPos_SyntaxUsingComplete((&_using159));
			JB_MsgPos_Destructor((&_using159));
		}
		JB_Msg_BecomeStr(msg, JB_SyxStr, s);
		JB_Decr(s);
		JB_Rec_SyntaxUsingComplete(_using158);
		JB_Decr(_using158);
	}
}

SCDecl* SC_CustomFuncOp(Message* exp, SCOperator* comp, SCBase* name_space, Message* RN) {
	JB_Msg_BecomeStr(exp, JB_SyxDot, comp->FuncName);
	Message* _tmPf1 = JB_Incr(({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		JB_Tree_SyntaxAppend(__imPf0, RN);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	JB_Tree_SyntaxAppend(exp, _tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Tree_Get(exp, 1)));
	JB_Tree_Remove(_tmPf2);
	JB_Decr(_tmPf2);
	return SC_TypeOfExpr(exp, name_space, nil);
}

SCDecl* SC_DeclOfObjForC(Message* curr) {
	if (JB_Msg_EqualsSyx(curr, JB_SyxFunc, false)) {
		SCFunction* fnc = JB_Incr(JB_Msg_MsgFunc(curr));
		if (fnc) {
			SCDecl* _tmPf0 = JB_Incr(fnc->ReturnType);
			JB_Decr(fnc);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(fnc);
	}
	JB_Object* obj = JB_Incr(curr->Obj);
	if (JB_Object_FastIsa(obj, JB_AsClass(SCDecl))) {
		JB_SafeDecr(obj);
		return ((SCDecl*)obj);
	}
	if (JB_Object_FastIsa(obj, JB_AsClass(SCClass))) {
		SCDecl* _tmPf1 = JB_Incr(((SCClass*)obj)->TypeNormal);
		JB_Decr(obj);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	if (JB_Object_FastIsa(obj, JB_AsClass(SCFunction))) {
		SCDecl* _tmPf2 = JB_Incr(((SCFunction*)obj)->ReturnType);
		JB_Decr(obj);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	if (JB_Object_FastIsa(obj, JB_AsClass(SCModule))) {
		SCClass* cls = JB_Incr(((SCModule*)obj)->Cls);
		if (cls) {
			JB_Decr(obj);
			SCDecl* _tmPf3 = JB_Incr(cls->ClassType);
			JB_Decr(cls);
			JB_SafeDecr(_tmPf3);
			return _tmPf3;
		}
		JB_Decr(cls);
	}
	JB_Decr(obj);
	return nil;
}

Message* SC_DeclsDefault(Message* def) {
	if ((!(((bool)def) and ((JB_Msg_EqualsSyx(def, JB_SyxRel, false)))))) {
		return nil;
	}
	Message* f = ((Message*)JB_Ring_First(def));
	Message* s = JB_Msg_NextOf(f, JB_SyxOpp, JB_LUB[541]);
	if ((!s)) {
		return nil;
	}
	Message* l = ((Message*)JB_Ring_NextSib(s));
	if ((JB_Msg_EqualsSyx(f, JB_SyxThg, false)) and (JB_Msg_EqualsSyx(l, JB_SyxThg, false))) {
		if (JB_Str_Equals(f->Name, l->Name, true)) {
			JB_Msg_SyntaxExpect(def, JB_LUB[676]);
			return nil;
		}
	}
	return l;
}

void SC_DefaultStitch(Message* Default, Message* args) {
	Message* name = JB_Incr(((Message*)JB_Tree_Get(args, 1)));
	//using;
	MessagePosition _using157 = JB_Msg_SyntaxUsing(args);
	Message* rel = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
	JB_FreeIfDead(JB_Msg_ReplaceWith(name, rel));
	JB_Tree_SyntaxAppend(rel, name);
	JB_Decr(name);
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[541]));
	JB_Tree_SyntaxAppend(rel, (_tmPf0));
	JB_Decr(_tmPf0);
	JB_Tree_SyntaxAppend(rel, Default);
	JB_Decr(rel);
	JB_MsgPos_SyntaxUsingComplete((&_using157));
	JB_MsgPos_Destructor((&_using157));
}

SCBase* SC_DontRemove(Message* node, SCBase* name_space, Message* ErrPlace) {
	return SC__Comp_program;
}

SCDecl* SC_DoOpCompare(Message* exp, SCDecl* lc, SCDecl* rc, SCOperator* comp, SCBase* name_space) {
	//using;
	MessagePosition _using164 = JB_Msg_SyntaxUsing(exp);
	Message* dot = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[0])));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(exp)));
	JB_Tree_SyntaxAppend(dot, _tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Last(exp)));
		JB_Tree_SyntaxAppend(__imPf0, _tmPf3);
		JB_Decr(_tmPf3);
		JB_String* _tmPf5 = JB_Incr(SC_Opp_CaseAwareStr(comp));
		Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, _tmPf5));
		JB_Decr(_tmPf5);
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf4));
		JB_Decr(_tmPf4);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	JB_Tree_SyntaxAppend(dot, _tmPf2);
	JB_Decr(_tmPf2);
	(JB_Ring_FirstSet(exp, dot));
	if (comp->IsEquals) {
		Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_Last(exp)));
		JB_Tree_Remove(_tmPf6);
		JB_Decr(_tmPf6);
		JB_SetRef(dot->Name, JB_LUB[677]);
		if (JB_Str_Equals(comp->CompOp, JB_LUB[678], false)) {
			JB_Msg_BecomeStr(exp, JB_SyxBRel, JB_LUB[679]);
			JB_Tree_SyntaxAppend(exp, dot);
		}
		 else {
			JB_Msg_BecomeStr(exp, JB_SyxBra, JB_LUB[0]);
		}
	}
	 else {
		JB_SetRef(dot->Name, JB_LUB[680]);
		Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_Last(exp)));
		JB_SetRef(_tmPf7->Name, comp->CompOp);
		JB_Decr(_tmPf7);
		Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxNum, comp->CompParam));
		JB_Tree_SyntaxAppend(exp, (_tmPf8));
		JB_Decr(_tmPf8);
	}
	JB_FreeIfDead(SC_TypeOfExpr(dot, name_space, nil));
	JB_Decr(dot);
	JB_MsgPos_SyntaxUsingComplete((&_using164));
	SCDecl* _tmPf9 = JB_Incr(JB_TypeBool->TypeNormal);
	JB_MsgPos_Destructor((&_using164));
	JB_SafeDecr(_tmPf9);
	return _tmPf9;
}

void SC_DotFuncToNormalFunc(Message* dot, SCFunction* fn) {
	JB_Msg_BecomeStr(dot, JB_SyxFunc, JB_LUB[0]);
	Message* first = JB_Incr(((Message*)JB_Ring_First(dot)));
	Message* L = JB_Incr(((Message*)JB_Ring_Last(dot)));
	JB_SetRef(L->Obj, fn);
	L->Func = JB_SyxPrm;
	if (JB_Object_FastIsa(first->Obj, JB_AsClass(SCModule))) {
		JB_Tree_Remove(first);
	}
	 else {
		(JB_Ring_FirstSet(L, first));
	}
	JB_Decr(L);
	JB_Decr(first);
	if (true) {
		MessagePosition _using166 = JB_Msg_SyntaxUsing(dot);
		Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxThg, fn->ExportName));
		(JB_Ring_FirstSet(dot, (_tmPf0)));
		JB_Decr(_tmPf0);
		JB_MsgPos_SyntaxUsingComplete((&_using166));
		JB_MsgPos_Destructor((&_using166));
	}
}

JB_String* JB_EntityTest() {
	JB_String* replicate = JB_Incr(JB_LUB[681]);
	Dictionary* repl = JB_Incr(JB_Dict__New());
	(JB_Dict_ValueSet(repl, JB_LUB[404], JB_LUB[403]));
	JB_MSR_DecodeEntitySet(repl, true);
	JB_MSR_EscapeCodeSet(repl, true);
	JB_String* s3 = JB_Incr(JB_Str_Unescape(replicate));
	JB_SetRef(replicate, JB_Str_MultiReplaceAll(replicate, repl, JB_StdErr));
	JB_Decr(repl);
	if ((!((JB_Str_Equals(JB__Constants_Name, replicate, false)) and (JB_Str_Equals(JB__Constants_Name, s3, false))))) {
		debugger;
	}
	JB_Decr(s3);
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(replicate));
	JB_Decr(replicate);
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, JB_LUB[682]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* SC_ExpandToBool(Message* inside, SCBase* name_space) {
	JB_Incr(inside);
	Message* rz = nil;
	SCDecl* decl = JB_Incr(SC_TypeOfExpr(inside, name_space, nil));
	if ((!decl)) {
		JB_Decr(inside);
		JB_Decr(rz);
		JB_Decr(decl);
		return nil;
	}
	JB_SetRef(rz, SC_Decl_ExpectMatch(JB_TypeBool->TypeNormal, decl, kSC_TypeCastTrue, inside, nil));
	JB_Decr(decl);
	JB_SetRef(inside, JB_Msg_UnBra(rz));
	JB_Decr(inside);
	while (((JB_Msg_EqualsSyx(rz, JB_SyxBra, false))) and ((({
		Message* _tmP221 = JB_Incr(((Message*)JB_Ring_First(rz)));
		bool _tmP220 = JB_Msg_EqualsSyx(_tmP221, JB_SyxBra, false);
		JB_Decr(_tmP221);
		 _tmP220;
	})))) {
		JB_SetRef(rz, JB_Msg_ReplaceWithChild(rz));
	};
	JB_SafeDecr(rz);
	return rz;
}

SCObject* SC_ExprFuncs_63(Message* Exp, SCBase* name_space, Message* side) {
	return nil;
}

SCObject* SC_ExprFuncs_Back(Message* Exp, SCBase* name_space, Message* side) {
	return JB_TypeString->TypeNormal;
}

SCObject* SC_ExprFuncs_Emb(Message* Exp, SCBase* name_space, Message* side) {
	return nil;
}

SCObject* SC_ExprFuncs_SDot(Message* Exp, SCBase* name_space, Message* side) {
	SC_Func__Tran_Sdt(Exp);
	return SC_TypeOfDot(Exp, name_space, side);
}

SCObject* SC_ExprFuncs_Sheb(Message* Exp, SCBase* name_space, Message* side) {
	return nil;
}

SCObject* SC_ExprFuncs_Str(Message* Exp, SCBase* name_space, Message* side) {
	return JB_TypeString->TypeNormal;
}

SCObject* SC_ExprFuncs_Type(Message* Exp, SCBase* name_space, Message* side) {
	return SC_TypeCastCheck(Exp, name_space, side);
}

bool SC_ExtractAmount(Message* Prms, SCBase* name_space, SCDecl* R) {
	Message* num = JB_Incr(((Message*)JB_Ring_First(Prms)));
	if (JB_Msg_EqualsSyx(num, JB_SyxUnit, false)) {
		JB_FreeIfDead(SC_TypeOfUnit(num, nil, nil));
	}
	if ((!(JB_Msg_Expect(num, JB_SyxNum, nil) and JB_Msg_ExpectLast(num, JB_LUB[0])))) {
		JB_Decr(num);
		return nil;
	}
	R->C_Array = JB_Str_TextIntegerValid(num->Name, nil);
	JB_Decr(num);
	JB_SetRef(R->Default, (JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
	return true;
}

SCDecl* SC_ExtractDecl(Message* c, SCBase* name_space) {
	JB_Incr(c);
	Syntax f = c->Func;
	if (f == JB_SyxDecl) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(c)));
		JB_Decr(c);
		SCDecl* _tmPf16 = JB_Incr(SC_ExtractDecl(_tmPf1, name_space));
		JB_Decr(_tmPf1);
		JB_SafeDecr(_tmPf16);
		return _tmPf16;
	}
	if (f == JB_SyxEmb) {
		if (JB_FreeIfDead(((Message*)JB_Ring_First(c)))) {
			JB_Msg_SyntaxExpect(c, nil);
			JB_Decr(c);
			return nil;
		}
		JB_Decr(c);
		return nil;
	}
	if (f == JB_SyxBra) {
		JB_SetRef(c, ((Message*)JB_Ring_First(c)));
		f = c->Func;
	}
	if ((f == JB_SyxSThg) and ((JB_Msg_SyntaxEquals(c, JB_LUB[526], false)))) {
		SCDecl* _tmPf15 = JB_Incr(SC_Base_RequireContained(name_space, c));
		JB_Decr(c);
		JB_SafeDecr(_tmPf15);
		return _tmPf15;
	}
	if (f == JB_SyxThg) {
		SCClass* _tmPf0 = JB_Incr(SC_Comp__AccessStr(c->Name, c));
		if ((!_tmPf0)) {
			JB_Decr(c);
			JB_Decr(_tmPf0);
			return nil;
		}
		JB_Decr(c);
		SCDecl* _tmPf17 = JB_Incr(_tmPf0->TypeNormal);
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf17);
		return _tmPf17;
	}
	if (JB_Msg_EqualsSyx(c, JB_SyxAcc, false)) {
		Message* Prms = JB_Incr(((Message*)JB_Tree_Get(c, 1)));
		if (JB_Ring_HasChildren(Prms)) {
			Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(c)));
			SCDecl* R = JB_Incr(SC_ExtractDecl(_tmPf2, name_space));
			JB_Decr(_tmPf2);
			if ((!R)) {
				JB_Decr(c);
				JB_Decr(Prms);
				JB_Decr(R);
				return nil;
			}
			JB_SetRef(R, SC_Decl_Copy(R, false));
			if ((!SC_ExtractAmount(Prms, name_space, R))) {
				JB_Msg_SyntaxExpect(c, JB_LUB[683]);
				JB_Decr(c);
				JB_Decr(Prms);
				JB_Decr(R);
				return nil;
			}
			JB_Decr(c);
			JB_Decr(Prms);
			JB_SafeDecr(R);
			return R;
		}
		JB_Decr(Prms);
		f = JB_SyxRel;
		c->Func = f;
		Message* fi = JB_Incr(((Message*)JB_Ring_First(c)));
		JB_Tree_Clear(c);
		Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[684]));
		JB_Tree_SyntaxAppend(c, (_tmPf3));
		JB_Decr(_tmPf3);
		Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[685]));
		JB_Tree_SyntaxAppend(c, (_tmPf4));
		JB_Decr(_tmPf4);
		JB_Tree_SyntaxAppend(c, fi);
		JB_Decr(fi);
	}
	if (f == JB_SyxFunc) {
		Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_First(c)));
		SCDecl* R = JB_Incr(SC_ExtractDecl(_tmPf5, name_space));
		JB_Decr(_tmPf5);
		if ((!R)) {
			JB_Decr(c);
			JB_Decr(R);
			return nil;
		}
		Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_Last(c)));
		JB_Decr(c);
		SCDecl* _tmPf18 = JB_Incr(SC_Decl_RefineDecl(R, _tmPf6));
		JB_Decr(_tmPf6);
		JB_Decr(R);
		JB_SafeDecr(_tmPf18);
		return _tmPf18;
	}
	if (f == JB_SyxARel) {
		if (JB_Msg_SyntaxEquals(c, JB_LUB[686], false)) {
			Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_First(c)));
			SCDecl* R = JB_Incr(SC_ExtractDecl(_tmPf7, name_space));
			JB_Decr(_tmPf7);
			if ((!R)) {
				JB_Decr(c);
				JB_Decr(R);
				return nil;
			}
			JB_Decr(c);
			SCDecl* _tmPf19 = JB_Incr(SC_Decl_MakeBorrowed(R));
			JB_Decr(R);
			JB_SafeDecr(_tmPf19);
			return _tmPf19;
		}
	}
	if (f == JB_SyxArg) {
		Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_First(c)));
		SCDecl* d = JB_Incr(SC_ExtractDecl(_tmPf8, name_space));
		JB_Decr(_tmPf8);
		if ((!d)) {
			JB_Decr(c);
			JB_Decr(d);
			return nil;
		}
		(SC_Decl_CompilerCreatedSet(d, true));
		JB_Decr(c);
		JB_SafeDecr(d);
		return d;
	}
	SCDecl* result = JB_Incr(SC_Decl__New());
	int ErrCount = JB_StdErr->ErrorCount;
	if (JB_Msg_OperatorIsBRel(c, JB_LUB[417])) {
		Message* _tmPf9 = JB_Incr(((Message*)JB_Ring_First(c)));
		SCDecl* R = JB_Incr(SC_ExtractDecl(_tmPf9, name_space));
		JB_Decr(_tmPf9);
		if (R) {
			SC_Decl_CopyTypeInfoTo(R, result);
			result->PointerCount++;
		}
		JB_Decr(R);
	}
	 else if (JB_Msg_OperatorIsBRel(c, JB_LUB[517])) {
		JB_SetRef(c->Name, JB_LUB[417]);
		Message* _tmPf10 = JB_Incr(((Message*)JB_Ring_First(c)));
		_tmPf10->Func = JB_SyxThg;
		JB_Decr(_tmPf10);
		Message* wrapp = JB_Incr((JB_Syx_Msg(JB_SyxThg, JB_LUB[141])));
		if ((!SC_Decl_LoadContained(result, c, wrapp, name_space))) {
			JB_Decr(c);
			JB_Decr(result);
			JB_Decr(wrapp);
			return nil;
		}
		JB_Decr(wrapp);
	}
	 else if (f == JB_SyxItem) {
		Message* _tmPf11 = JB_Incr(((Message*)JB_Ring_First(c)));
		SCDecl* R = JB_Incr(SC_ExtractDecl(_tmPf11, name_space));
		JB_Decr(_tmPf11);
		if ((!R)) {
			JB_Decr(c);
			JB_Decr(result);
			JB_Decr(R);
			return nil;
		}
		if ((!(((bool)SC_Decl_IsNumeric(R)) and ((({
			Message* _tmP253 = JB_Incr(((Message*)JB_Ring_Last(c)));
			bool _tmP252 = JB_Msg_EqualsSyx(_tmP253, JB_SyxNum, false);
			JB_Decr(_tmP253);
			 _tmP252;
		})))))) {
			JB_Msg_SyntaxExpect(c, JB_LUB[687]);
			JB_Decr(c);
			JB_Decr(result);
			JB_Decr(R);
			return nil;
		}
		(SC_Decl_TypeContainedSet(result, R->Type));
		JB_Decr(R);
	}
	 else if (f == JB_SyxArr) {
		Message* ch = JB_Incr(((Message*)JB_Ring_First(c)));
		if ((!(ch))) {
			JB_Decr(c);
			JB_Decr(result);
			JB_Decr(ch);
			return JB_TypeArray->TypeNormal;
		}
		if ((!((!JB_Msg_EqualsSyx(ch, JB_SyxItem, false))))) {
			JB_Msg_SyntaxExpect(c, nil);
			JB_Decr(c);
			JB_Decr(result);
			JB_Decr(ch);
			return nil;
		}
		JB_SetRef(result->Contains, SC_ExtractDecl(ch, name_space));
		JB_Decr(ch);
		(SC_Decl_TypeContainedSet(result, JB_TypeArray));
	}
	 else if (f == JB_SyxAdj) {
		Message* _tmPf12 = JB_Incr(((Message*)JB_Ring_First(c)));
		Message* _tmPf13 = JB_Incr(((Message*)JB_Ring_Last(c)));
		if ((!SC_Decl_LoadContained(result, _tmPf12, _tmPf13, name_space))) {
			JB_Decr(c);
			JB_Decr(result);
			JB_Decr(_tmPf12);
			JB_Decr(_tmPf13);
			return nil;
		}
		JB_Decr(_tmPf13);
		JB_Decr(_tmPf12);
	}
	 else if (f == JB_SyxRel) {
		Message* op = JB_Incr(JB_Msg_FindFlat(c, JB_SyxOpp, JB_LUB[685], true));
		if ((!op)) {
			JB_Decr(c);
			JB_Decr(result);
			JB_Decr(op);
			return nil;
		}
		JB_Decr(op);
		Message* contained = JB_Incr(JB_Msg_NeedSyxInt(c, nil, 2));
		if ((!contained)) {
			JB_Decr(c);
			JB_Decr(result);
			JB_Decr(contained);
			return nil;
		}
		Message* _tmPf14 = JB_Incr(((Message*)JB_Ring_First(c)));
		if ((!SC_Decl_LoadContained(result, contained, _tmPf14, name_space))) {
			JB_Decr(c);
			JB_Decr(result);
			JB_Decr(contained);
			JB_Decr(_tmPf14);
			return nil;
		}
		JB_Decr(_tmPf14);
		JB_Decr(contained);
	}
	 else if (ErrCount == JB_StdErr->ErrorCount) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(c, nil);
		}
	}
	JB_Decr(c);
	SC_Decl_MakeContainedObject(result);
	if (ErrCount == JB_StdErr->ErrorCount) {
		JB_SafeDecr(result);
		return result;
	}
	JB_Decr(result);
	return nil;
}

Array* SC_FindAllSyx(Message* msg, Syntax syx) {
	Array* rz = ((Array*)JB_Array__New0());
	{
		Message* c = msg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(msg));
		while (((bool)c) and (c != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(c));
			if (JB_Msg_EqualsSyx(c, syx, false)) {
				JB_Array_SyntaxAppend(rz, c);
			}
			c = _N_f2;
		};
		(msg);
	}
	;
	return rz;
}

Message* SC_FindBytePos(Message* Node, bool EndInside) {
	if ((!Node) or JB_Msg_HasPosition(Node)) {
		return Node;
	}
	{
		Message* m = Node;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Node));
		while (((bool)m) and (m != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(m));
			if (JB_Msg_HasPosition(m)) {
				return m;
			}
			m = _N_f2;
		};
		(Node);
	}
	;
	if (EndInside) {
		return nil;
	}
	Message* msg = SC_FindBytePos(((Message*)JB_Ring_Parent(Node)), true);
	if (msg) {
		return msg;
	}
	SCFunction* fn = JB_Msg_MsgOwningFunc(Node);
	if (fn) {
		return SC_FindBytePos(fn->Source, true);
	}
	return nil;
}

AsmReg SC_fn_asm_table_acc(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_arel(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_arg(ASMFuncState* self, Message* exp, AsmReg Reg) {
	uint64 OV = SC_flat_OpenVars(self);
	AsmReg garb = JB_int_Reg(31);
	{
		Message* ch = ((Message*)JB_Tree_First_(exp));
		while (ch) {
			SC_flat_Reg(self, ch, garb);
			ch = ((Message*)JB_Ring_NextSib(ch));
		};
		(exp);
	}
	;
	SC_flat_CloseVars(self, OV);
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_bra(ASMFuncState* self, Message* exp, AsmReg Reg) {
	Message* f = ((Message*)JB_Ring_First(exp));
	if ((!JB_Msg_EqualsSyx(f, JB_SyxArg, false))) {
		return SC_flat_Reg(self, f, Reg);
	}
	return SC_ASMtmp__StateExpr(self, f, JB_int_Reg(0));
}

AsmReg SC_fn_asm_table_brel(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_decl(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_func(ASMFuncState* self, Message* exp, AsmReg Reg) {
	AsmReg rz = ((AsmReg){});
	rz = SC_flat_DoFunc(self, ((Message*)JB_Ring_Last(exp)), Reg);
	return rz;
}

AsmReg SC_fn_asm_table_list(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_num(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_rel(ASMFuncState* self, Message* exp, AsmReg Reg) {
	AsmReg rz = ((AsmReg){});
	uint64 OV = SC_flat_OpenVars(self);
	rz = SC_flat_DoRels(self, ((Message*)JB_Ring_First(exp)), Reg);
	SC_flat_CloseVars(self, OV);
	return rz;
}

AsmReg SC_fn_asm_table_thg(ASMFuncState* self, Message* exp, AsmReg Reg) {
	SCDecl* d = JB_Msg_AsDecl(exp);
	if ((!d)) {
		debugger;
		return ((AsmReg){});
	}
	if (SC_Decl_SyntaxIs(d, kSC__SCDeclInfo_const)) {
		debugger;
	}
	AsmReg r = d->DRegister;
	if (r.Reg) {
		return r;
	}
	return SC_flat_AllocRegDecl(self, exp, d, Reg);
}

AsmReg SC_fn_asm_table_tmp(ASMFuncState* self, Message* exp, AsmReg Reg) {
	if (JB_Msg_SyntaxEquals(exp, JB_LUB[688], false)) {
		return SC_ASMtmp__Debugger(self, exp, JB_int_Reg(0));
	}
	if (JB_Msg_SyntaxEquals(exp, JB_LUB[689], false)) {
		return SC_ASMtmp__If(self, exp, JB_int_Reg(0));
	}
	if (JB_Msg_SyntaxEquals(exp, JB_LUB[690], false)) {
		return SC_ASMtmp__Rejoin(self, exp, JB_int_Reg(0));
	}
	if (JB_Msg_SyntaxEquals(exp, JB_LUB[602], false)) {
		return SC_ASMtmp__Return(self, exp, JB_int_Reg(0));
	}
	if (JB_Msg_SyntaxEquals(exp, JB_LUB[597], false)) {
		return SC_ASMtmp__While(self, exp, JB_int_Reg(0));
	}
	if ((!false)) {
		JB_Msg_SyntaxExpect(exp, JB_LUB[691]);
	}
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_type(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

void SC_FuncLinkageTable_cpp_part(SCFunction* fn, Message* node, SCBase* name_space) {
	JB_FreeIfDead(SC_Base__LoadCppPart(node, name_space, node));
}

void SC_FuncLinkageTable_cpp_wrapper(SCFunction* fn, Message* node, SCBase* name_space) {
}

void SC_FuncLinkageTable_ignore(SCFunction* fn, Message* node, SCBase* name_space) {
}

void SC_FuncLinkageTable_inline(SCFunction* fn, Message* node, SCBase* name_space) {
}

void SC_FuncLinkageTable_visible(SCFunction* fn, Message* node, SCBase* name_space) {
}

bool SC_funcsorter_fn(JB_Object* a, JB_Object* b) {
	return JB_Str_CompareStr(((SCFunction*)a)->ExportName, ((SCFunction*)b)->ExportName, false) <= -1;
}

int JB_Init_() {
	{
		JB_SetRef(JB__JbinHeader, JB_LUB[692]);
		JB_SetRef(JB__SyxDict_, JB_Dict__New());
		JB_SyxNil = JB_Syx__StdNew(JB_Msg_Nil__, JB_LUB[106], JB_LUB[693]);
		JB_SyxArg = JB_Syx__StdNew(JB_Msg_Arg__, JB_LUB[694], JB_LUB[695]);
		JB_SyxBra = JB_Syx__StdNew(JB_Msg_Bra__, JB_LUB[696], JB_LUB[697]);
		JB_SyxThg = JB_Syx__StdNew(JB_Msg_Thg__, JB_LUB[698], JB_LUB[699]);
		JB_SyxOpp = JB_Syx__StdNew(JB_Msg_Opp__, JB_LUB[700], JB_LUB[701]);
		JB_SyxCnj = JB_Syx__StdNew(JB_Msg_Cnj__, JB_LUB[702], JB_LUB[703]);
		JB_SyxTmp = JB_Syx__StdNew(JB_Msg_Tmp__, JB_LUB[704], JB_LUB[705]);
		JB_SyxName = JB_Syx__StdNew(JB_Msg_Name__, JB_LUB[71], JB_LUB[0]);
		JB_SyxQues = JB_Syx__StdNew(JB_Msg_Ques__, JB_LUB[706], JB_LUB[707]);
		JB_SyxBack = JB_Syx__StdNew(JB_Msg_Back__, JB_LUB[708], JB_LUB[709]);
		JB_SyxChar = JB_Syx__StdNew(JB_Msg_Char__, JB_LUB[710], JB_LUB[711]);
		JB_SyxSStr = JB_Syx__StdNew(JB_Msg_SStr__, JB_LUB[712], JB_LUB[713]);
		JB_SyxOat = JB_Syx__StdNew(JB_Msg_Oat__, JB_LUB[714], JB_LUB[715]);
		JB_SyxSheb = JB_Syx__StdNew(JB_Msg_Sheb__, JB_LUB[716], JB_LUB[717]);
		JB_SyxStr = JB_Syx__StdNew(JB_Msg_Str__, JB_LUB[718], JB_LUB[719]);
		JB_SyxSThg = JB_Syx__StdNew(JB_Msg_SThg__, JB_LUB[720], JB_LUB[721]);
		JB_SyxSCnj = JB_Syx__StdNew(JB_Msg_SCnj__, JB_LUB[722], JB_LUB[723]);
		JB_SyxNum = JB_Syx__StdNew(JB_Msg_Num__, JB_LUB[724], JB_LUB[725]);
		JB_SyxEmb = JB_Syx__StdNew(JB_Msg_Emb__, JB_LUB[726], JB_LUB[727]);
		JB_SyxUnit = JB_Syx__StdNew(JB_Msg_Unit__, JB_LUB[728], JB_LUB[0]);
		JB_SyxType = JB_Syx__StdNew(JB_Msg_Type__, JB_LUB[729], JB_LUB[730]);
		JB_SyxARel = JB_Syx__StdNew(JB_Msg_ARel__, JB_LUB[731], JB_LUB[732]);
		JB_SyxDot = JB_Syx__StdNew(JB_Msg_Dot__, JB_LUB[733], JB_LUB[734]);
		JB_SyxSDot = JB_Syx__StdNew(JB_Msg_SDot__, JB_LUB[735], JB_LUB[736]);
		JB_SyxFunc = JB_Syx__StdNew(JB_Msg_Func__, JB_LUB[737], JB_LUB[738]);
		JB_SyxBRel = JB_Syx__StdNew(JB_Msg_BRel__, JB_LUB[739], JB_LUB[740]);
		JB_SyxAdj = JB_Syx__StdNew(JB_Msg_Adj__, JB_LUB[741], JB_LUB[742]);
		JB_SyxBadj = JB_Syx__StdNew(JB_Msg_Badj__, JB_LUB[743], JB_LUB[744]);
		JB_SyxAcc = JB_Syx__StdNew(JB_Msg_Acc__, JB_LUB[745], JB_LUB[746]);
		JB_SyxArr = JB_Syx__StdNew(JB_Msg_Arr__, JB_LUB[747], JB_LUB[748]);
		JB_SyxItem = JB_Syx__StdNew(JB_Msg_Item__, JB_LUB[749], JB_LUB[0]);
		JB_SyxList = JB_Syx__StdNew(JB_Msg_List__, JB_LUB[750], JB_LUB[0]);
		JB_SyxPrm = JB_Syx__StdNew(JB_Msg_Prm__, JB_LUB[751], JB_LUB[752]);
		JB_SyxFile = JB_Syx__StdNew(JB_Msg_File__, JB_LUB[753], JB_LUB[754]);
		JB_SyxQuot = JB_Syx__StdNew(JB_Msg_Quot__, JB_LUB[755], JB_LUB[756]);
		JB_SyxDecl = JB_Syx__StdNew(JB_Msg_Decl__, JB_LUB[757], JB_LUB[758]);
		JB_SyxRel = JB_Syx__StdNew(JB_Msg_Rel__, JB_LUB[759], JB_LUB[760]);
		JB_SyxERel = JB_Syx__StdNew(JB_Msg_ERel__, JB_LUB[761], JB_LUB[762]);
		JB_SyxTRel = JB_Syx__StdNew(JB_Msg_TRel__, JB_LUB[763], JB_LUB[764]);
		JB_SyxTril = JB_Syx__StdNew(JB_Msg_Tril__, JB_LUB[765], JB_LUB[766]);
		JB_Syxpinn = JB_Syx__StdNew(JB_Msg_pinn__, JB_LUB[767], JB_LUB[768]);
		JB_Syxbinn = JB_Syx__StdNew(JB_Msg_binn__, JB_LUB[769], JB_LUB[770]);
		JB_SyxAsk = JB_Syx__StdNew(JB_Msg_Ask__, JB_LUB[771], JB_LUB[0]);
		JB_SyxYoda = JB_Syx__StdNew(JB_Msg_Yoda__, JB_LUB[772], JB_LUB[773]);
		JB_SyxSCom = JB_Syx__StdNew(JB_Msg_SCom__, JB_LUB[774], JB_LUB[775]);
		JB_SyxMsg = JB_Syx__StdNew(JB_Msg_Msg__, JB_LUB[776], JB_LUB[777]);
		JB_SyxTodo = JB_Syx__StdNew(JB_Msg_Todo__, JB_LUB[778], JB_LUB[779]);
		JB_Syxurl = JB_Syx__StdNew(JB_Msg_url__, JB_LUB[780], JB_LUB[781]);
		JB_SetRef(JB_RootCollectTable, (JB_Dict__New()));
		DTWrap* _tmPf0 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_SCGame3D__Love))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[782], _tmPf0));
		JB_Decr(_tmPf0);
		DTWrap* _tmPf1 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[783], _tmPf1));
		JB_Decr(_tmPf1);
		DTWrap* _tmPf2 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[784], _tmPf2));
		JB_Decr(_tmPf2);
		DTWrap* _tmPf3 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[567], _tmPf3));
		JB_Decr(_tmPf3);
		DTWrap* _tmPf4 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[785], _tmPf4));
		JB_Decr(_tmPf4);
		DTWrap* _tmPf5 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[786], _tmPf5));
		JB_Decr(_tmPf5);
		DTWrap* _tmPf6 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[787], _tmPf6));
		JB_Decr(_tmPf6);
		DTWrap* _tmPf7 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[788], _tmPf7));
		JB_Decr(_tmPf7);
		DTWrap* _tmPf8 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewHelper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[789], _tmPf8));
		JB_Decr(_tmPf8);
		DTWrap* _tmPf9 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewMissingFunc))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[790], _tmPf9));
		JB_Decr(_tmPf9);
		DTWrap* _tmPf10 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_SCThe__NewInsertion))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[791], _tmPf10));
		JB_Decr(_tmPf10);
		DTWrap* _tmPf11 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Comp__NewConf))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[792], _tmPf11));
		JB_Decr(_tmPf11);
		DTWrap* _tmPf12 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_RootCollectTable_crash))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[332], _tmPf12));
		JB_Decr(_tmPf12);
		DTWrap* _tmPf13 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Mod__Neu))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[617], _tmPf13));
		JB_Decr(_tmPf13);
		DTWrap* _tmPf14 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_RootCollectTable_static))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[793], _tmPf14));
		JB_Decr(_tmPf14);
		DTWrap* _tmPf15 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_SCSelector__Neu))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[603], _tmPf15));
		JB_Decr(_tmPf15);
		DTWrap* _tmPf16 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Class__NeuClass))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[794], _tmPf16));
		JB_Decr(_tmPf16);
		DTWrap* _tmPf17 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Class__NeuRole))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[795], _tmPf17));
		JB_Decr(_tmPf17);
		DTWrap* _tmPf18 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_SC_API__NewExportAPI))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[796], _tmPf18));
		JB_Decr(_tmPf18);
		DTWrap* _tmPf19 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_SCGame3D__NeuModel))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[797], _tmPf19));
		JB_Decr(_tmPf19);
		DTWrap* _tmPf20 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewProtoType))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[798], _tmPf20));
		JB_Decr(_tmPf20);
		DTWrap* _tmPf21 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewRender))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[799], _tmPf21));
		JB_Decr(_tmPf21);
		DTWrap* _tmPf22 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[390], _tmPf22));
		JB_Decr(_tmPf22);
		DTWrap* _tmPf23 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Linkage__Collect))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[800], _tmPf23));
		JB_Decr(_tmPf23);
		DTWrap* _tmPf24 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_InbuiltShellArgs__Collect))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[801], _tmPf24));
		JB_Decr(_tmPf24);
		DTWrap* _tmPf25 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Class__NewStruct))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[802], _tmPf25));
		JB_Decr(_tmPf25);
		DTWrap* _tmPf26 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Class__DataType))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[803], _tmPf26));
		JB_Decr(_tmPf26);
		DTWrap* _tmPf27 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Class__StoreExtend))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[804], _tmPf27));
		JB_Decr(_tmPf27);
		DTWrap* _tmPf28 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Class__StoreExtendModule))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[805], _tmPf28));
		JB_Decr(_tmPf28);
		DTWrap* _tmPf29 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_RootCollectTable_extends))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[806], _tmPf29));
		JB_Decr(_tmPf29);
		DTWrap* _tmPf30 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NeuMain))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[48], _tmPf30));
		JB_Decr(_tmPf30);
		DTWrap* _tmPf31 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NeuLibrary))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[807], _tmPf31));
		JB_Decr(_tmPf31);
		DTWrap* _tmPf32 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[652], _tmPf32));
		JB_Decr(_tmPf32);
		DTWrap* _tmPf33 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Base__LoadCppPart)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[808], _tmPf33));
		JB_Decr(_tmPf33);
		DTWrap* _tmPf34 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[809], _tmPf34));
		JB_Decr(_tmPf34);
		DTWrap* _tmPf35 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__DebugInsert)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[810], _tmPf35));
		JB_Decr(_tmPf35);
		DTWrap* _tmPf36 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_RootCollectTable_const))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[811], _tmPf36));
		JB_Decr(_tmPf36);
		JB_SetRef(JB_ClsCollectTable, (JB_Dict__New()));
		DTWrap* _tmPf37 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewConstructor))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[618], _tmPf37));
		JB_Decr(_tmPf37);
		DTWrap* _tmPf38 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewDestructor))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[812], _tmPf38));
		JB_Decr(_tmPf38);
		DTWrap* _tmPf39 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewRender))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[799], _tmPf39));
		JB_Decr(_tmPf39);
		DTWrap* _tmPf40 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[783], _tmPf40));
		JB_Decr(_tmPf40);
		DTWrap* _tmPf41 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[784], _tmPf41));
		JB_Decr(_tmPf41);
		DTWrap* _tmPf42 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewSetter))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[813], _tmPf42));
		JB_Decr(_tmPf42);
		DTWrap* _tmPf43 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[567], _tmPf43));
		JB_Decr(_tmPf43);
		DTWrap* _tmPf44 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewMissingFunc))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[790], _tmPf44));
		JB_Decr(_tmPf44);
		DTWrap* _tmPf45 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewHelper))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[789], _tmPf45));
		JB_Decr(_tmPf45);
		DTWrap* _tmPf46 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Class__NamedPropertyFields))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[814], _tmPf46));
		JB_Decr(_tmPf46);
		DTWrap* _tmPf47 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Beh__NewBehaviour))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[393], _tmPf47));
		JB_Decr(_tmPf47);
		DTWrap* _tmPf48 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Beh__NewInterface))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[815], _tmPf48));
		JB_Decr(_tmPf48);
		DTWrap* _tmPf49 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Iter__NeuIter))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[816], _tmPf49));
		JB_Decr(_tmPf49);
		DTWrap* _tmPf50 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NeuSyx))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[817], _tmPf50));
		JB_Decr(_tmPf50);
		DTWrap* _tmPf51 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[786], _tmPf51));
		JB_Decr(_tmPf51);
		DTWrap* _tmPf52 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[785], _tmPf52));
		JB_Decr(_tmPf52);
		DTWrap* _tmPf53 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__NewProtoType))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[798], _tmPf53));
		JB_Decr(_tmPf53);
		DTWrap* _tmPf54 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Class__LoadSyntax))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[138], _tmPf54));
		JB_Decr(_tmPf54);
		DTWrap* _tmPf55 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Class__LoadSyntax))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[546], _tmPf55));
		JB_Decr(_tmPf55);
		DTWrap* _tmPf56 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Class__ProcessAs))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[818], _tmPf56));
		JB_Decr(_tmPf56);
		DTWrap* _tmPf57 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Mod__ReadIntoCppRefs))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[819], _tmPf57));
		JB_Decr(_tmPf57);
		DTWrap* _tmPf58 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_ClsCollectTable_linkage))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[820], _tmPf58));
		JB_Decr(_tmPf58);
		DTWrap* _tmPf59 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_ClsCollectTable_pragma))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[821], _tmPf59));
		JB_Decr(_tmPf59);
		DTWrap* _tmPf60 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Mod__DoInitAfter)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[822], _tmPf60));
		JB_Decr(_tmPf60);
		DTWrap* _tmPf61 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[652], _tmPf61));
		JB_Decr(_tmPf61);
		DTWrap* _tmPf62 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[823], _tmPf62));
		JB_Decr(_tmPf62);
		DTWrap* _tmPf63 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[808], _tmPf63));
		JB_Decr(_tmPf63);
		DTWrap* _tmPf64 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[824], _tmPf64));
		JB_Decr(_tmPf64);
		DTWrap* _tmPf65 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[569], _tmPf65));
		JB_Decr(_tmPf65);
		DTWrap* _tmPf66 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[825], _tmPf66));
		JB_Decr(_tmPf66);
		DTWrap* _tmPf67 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[11], _tmPf67));
		JB_Decr(_tmPf67);
		DTWrap* _tmPf68 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[826], _tmPf68));
		JB_Decr(_tmPf68);
		DTWrap* _tmPf69 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[617], _tmPf69));
		JB_Decr(_tmPf69);
		DTWrap* _tmPf70 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[809], _tmPf70));
		JB_Decr(_tmPf70);
		DTWrap* _tmPf71 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[447], _tmPf71));
		JB_Decr(_tmPf71);
		JB_naawgr[0] = 12312398;
		JB_naawgr[0] = 12312398;
		JB_naawgr[0] = 12312398;
		//;
		JB_SetRef(JB_CppRefTable, (JB_Dict__New()));
		DTWrap* _tmPf72 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_CppRefTable_disowns))));
		(JB_Dict_ValueSet(JB_CppRefTable, JB_LUB[827], _tmPf72));
		JB_Decr(_tmPf72);
		DTWrap* _tmPf73 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_CppRefTable_disturbs))));
		(JB_Dict_ValueSet(JB_CppRefTable, JB_LUB[828], _tmPf73));
		JB_Decr(_tmPf73);
		DTWrap* _tmPf74 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__Tran_CppRefs))));
		(JB_Dict_ValueSet(JB_CppRefTable, JB_LUB[829], _tmPf74));
		JB_Decr(_tmPf74);
		JB_SetRef(JB_FuncLinkageTable, (JB_Dict__New()));
		DTWrap* _tmPf75 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FuncLinkageTable_cpp_wrapper))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[786], _tmPf75));
		JB_Decr(_tmPf75);
		DTWrap* _tmPf76 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FuncLinkageTable_cpp_part))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[808], _tmPf76));
		JB_Decr(_tmPf76);
		DTWrap* _tmPf77 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__Tran_CppRefs))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[819], _tmPf77));
		JB_Decr(_tmPf77);
		DTWrap* _tmPf78 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FuncLinkageTable_visible))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[830], _tmPf78));
		JB_Decr(_tmPf78);
		DTWrap* _tmPf79 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FuncLinkageTable_ignore))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[652], _tmPf79));
		JB_Decr(_tmPf79);
		DTWrap* _tmPf80 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_FuncLinkageTable_inline))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[831], _tmPf80));
		JB_Decr(_tmPf80);
		JB_SetRef(JB_ClassLinkageTable, (JB_Dict__New()));
		DTWrap* _tmPf81 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_ClassLinkageTable_cpp_wrapper))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[786], _tmPf81));
		JB_Decr(_tmPf81);
		DTWrap* _tmPf82 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_ClassLinkageTable_cpp_part))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[808], _tmPf82));
		JB_Decr(_tmPf82);
		DTWrap* _tmPf83 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__Tran_CppRefs))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[819], _tmPf83));
		JB_Decr(_tmPf83);
		DTWrap* _tmPf84 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_ClassLinkageTable_cpp_class))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[824], _tmPf84));
		JB_Decr(_tmPf84);
		DTWrap* _tmPf85 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_ClassLinkageTable_visible))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[830], _tmPf85));
		JB_Decr(_tmPf85);
		DTWrap* _tmPf86 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_ClassLinkageTable_ignore))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[652], _tmPf86));
		JB_Decr(_tmPf86);
		DTWrap* _tmPf87 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_ClassLinkageTable_noearlyfree))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[832], _tmPf87));
		JB_Decr(_tmPf87);
		DTWrap* _tmPf88 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_ClassLinkageTable_dontdestructlocally))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[833], _tmPf88));
		JB_Decr(_tmPf88);
		DTWrap* _tmPf89 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_ClassLinkageTable_wrapper))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[834], _tmPf89));
		JB_Decr(_tmPf89);
		DTWrap* _tmPf90 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_ClassLinkageTable_datatype))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[803], _tmPf90));
		JB_Decr(_tmPf90);
		DTWrap* _tmPf91 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_ClassLinkageTable_numeric))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[835], _tmPf91));
		JB_Decr(_tmPf91);
		JB_SetRef(JB_kNameConf, JB_LUB[836]);
		JB_SetRef(JB_C_Letters, JB_Str_CharSetWithBool(JB_LUB[837], true));
		JB_SetRef(JB_codesign_native, JB_LUB[7]);
		JB_SetRef(JB_file_read_test, JB_LUB[838]);
		JB_fn_asm_table[1] = (&SC_fn_asm_table_arg);
		JB_fn_asm_table[35] = (&SC_fn_asm_table_decl);
		JB_fn_asm_table[17] = (&SC_fn_asm_table_num);
		JB_fn_asm_table[36] = (&SC_fn_asm_table_rel);
		JB_fn_asm_table[3] = (&SC_fn_asm_table_thg);
		JB_fn_asm_table[2] = (&SC_fn_asm_table_bra);
		JB_fn_asm_table[31] = (&SC_fn_asm_table_list);
		JB_fn_asm_table[24] = (&SC_fn_asm_table_func);
		JB_fn_asm_table[28] = (&SC_fn_asm_table_acc);
		JB_fn_asm_table[25] = (&SC_fn_asm_table_brel);
		JB_fn_asm_table[21] = (&SC_fn_asm_table_arel);
		JB_fn_asm_table[20] = (&SC_fn_asm_table_type);
		JB_fn_asm_table[(kSC__ASMtmp_iDebugger)] = (&SC_ASMtmp__Debugger);
		JB_fn_asm_table[(kSC__ASMtmp_iIf)] = (&SC_ASMtmp__If);
		JB_fn_asm_table[(kSC__ASMtmp_iRejoin)] = (&SC_ASMtmp__Rejoin);
		JB_fn_asm_table[(kSC__ASMtmp_iReturn)] = (&SC_ASMtmp__Return);
		JB_fn_asm_table[(kSC__ASMtmp_iWhile)] = (&SC_ASMtmp__While);
		JB_fn_asm_table[6] = (&SC_fn_asm_table_tmp);
		//;
		JB_ExprFuncs[36] = ((&SC_TypeOfRel));
		JB_ExprFuncs[25] = ((&SC_TypeOfBRel));
		JB_ExprFuncs[21] = ((&SC_TypeOfARel));
		JB_ExprFuncs[26] = ((&SC_TypeOfAdj));
		JB_ExprFuncs[24] = ((&SC_TypeOfFunc));
		JB_ExprFuncs[28] = ((&SC_TypeOfAccess));
		JB_ExprFuncs[45] = ((&SC_TypeOfMsg));
		JB_ExprFuncs[15] = ((&SC_TypeOfSthg));
		JB_ExprFuncs[22] = ((&SC_TypeOfDot));
		JB_ExprFuncs[7] = ((&SC_TypeOfSyx));
		JB_ExprFuncs[47] = ((&SC_TypeOfURL));
		JB_ExprFuncs[31] = ((&SC_TypeOfList));
		JB_ExprFuncs[29] = ((&SC_TypeOfArr));
		JB_ExprFuncs[1] = ((&SC_TypeOfArgArr));
		JB_ExprFuncs[10] = ((&SC_TypeOfChar));
		JB_ExprFuncs[11] = ((&SC_TypeOfString));
		JB_ExprFuncs[30] = ((&SC_TypeOfLast));
		JB_ExprFuncs[2] = ((&SC_TypeOfBra));
		JB_ExprFuncs[14] = (&SC_ExprFuncs_Str);
		JB_ExprFuncs[9] = (&SC_ExprFuncs_Back);
		JB_ExprFuncs[17] = ((&SC_TypeOfNum));
		JB_ExprFuncs[19] = ((&SC_TypeOfUnit));
		JB_ExprFuncs[3] = ((&SC_TypeOfThg));
		JB_ExprFuncs[8] = ((&SC_TypeOfQues));
		JB_ExprFuncs[23] = (&SC_ExprFuncs_SDot);
		JB_ExprFuncs[20] = (&SC_ExprFuncs_Type);
		JB_ExprFuncs[18] = (&SC_ExprFuncs_Emb);
		JB_ExprFuncs[13] = (&SC_ExprFuncs_Sheb);
		JB_ExprFuncs[63] = (&SC_ExprFuncs_63);
		//;
		JB_SetRef(JB_CSHex, JB_Str_CharSetWithBool(JB_LUB[839], true));
		JB_SetRef(JB_CSNum, JB_Str_CharSetWithBool(JB_LUB[840], true));
		JB_SetRef(JB___AppConfString, JB_LUB[841]);
		JB_SyxXAtt = JB_Syx__StdNew(JB_Msg_XAtt__, JB_LUB[842], JB_LUB[843]);
		JB_SyxXML = JB_Syx__StdNew(JB_Msg_XML__, JB_LUB[844], JB_LUB[845]);
		JB_SyxXPI = JB_Syx__StdNew(JB_Msg_XPI__, JB_LUB[846], JB_LUB[847]);
		JB_SyxXCom = JB_Syx__StdNew(JB_Msg_XCom__, JB_LUB[848], JB_LUB[849]);
		JB_SyxXCDT = JB_Syx__StdNew(JB_Msg_XCDT__, JB_LUB[850], JB_LUB[851]);
		JB_SyxXTxt = JB_Syx__StdNew(JB_Msg_XTxt__, JB_LUB[852], JB_LUB[853]);
		JB_SyxBin = JB_Syx__StdNew(JB_Msg_Bin__, JB_LUB[293], JB_LUB[854]);
	}
	;
	//// __junktest_5__;
	SC___junktest_5____Init_();
	//// App;
	JB_App__Init_();
	//// Compiler;
	SC_Comp__Init_();
	//// ErrorColors;
	JB_ErrorColors__Init_();
	//// ExecTable;
	SC_ExecTable__Init_();
	//// ExternalCompiler;
	SC_Ext__Init_();
	//// FastStringOpts;
	SC_FastStringOpts__Init_();
	//// Feedback;
	SC_FB__Init_();
	//// Flatten;
	SC_Flatten__Init_();
	//// Interact;
	SC_AC__Init_();
	//// JB_API;
	JB_API__Init_();
	//// Jeebox;
	JB_Constants__Init_();
	//// Linkage;
	SC_Linkage__Init_();
	//// Macros;
	SC_Macros__Init_();
	//// Options;
	SC_Options__Init_();
	//// parser;
	JB_Tk__Init_();
	//// SC_Errors;
	SC_Errors__Init_();
	//// SCGame3D;
	SC_SCGame3D__Init_();
	//// SCGlobals;
	SC__Init_();
	//// Targets;
	SC_Targets__Init_();
	//// VM_Builder;
	SC_VM_Builder__Init_();
	//// zalgo;
	JB_zalgo__Init_();
	//// ErrorSeverity;
	JB_ErrorSeverity__Init_();
	//// Syntax;
	JB_Syx__Init_();
	//// ASM;
	SC_ASM__Init_();
	//// ASMFuncState;
	SC_flat__Init_();
	//// CompressionStats;
	JB_MzSt__Init_();
	//// Random;
	JB_Rnd__Init_();
	//// Cpp_Export;
	SC_Cpp__Init_();
	//// Process;
	JB_Proc__Init_();
	//// SCImport;
	SC_Imp__Init_();
	//// SCOperator;
	SC_Opp__Init_();
	//// µForm;
	SC_xC2xB5Form__Init_();
	//// File;
	JB_File__Init_();
	//// Instruction;
	SC_Instruction__Init_();
	//// SCBase;
	SC_Base__Init_();
	//// SCFunction;
	SC_Func__Init_();
	//// Error;
	JB_Err__Init_();
	JB_InitCode_();
	return 0;
}

int JB_InitCode_() {
	{
	}
	;
	SC__ASM_Forms[1] = (&JB_ASM_U0__Encode);
	SC__ASM_Forms[2] = (&JB_ASM_U1__Encode);
	SC__ASM_Forms[3] = (&JB_ASM_U2__Encode);
	SC__ASM_Forms[4] = (&JB_ASM_U3__Encode);
	SC__ASM_Forms[5] = (&JB_ASM_U4__Encode);
	SC__ASM_Forms[6] = (&JB_ASM_Func__Encode);
	SC__ASM_Forms[7] = (&JB_ASM_Cmp__Encode);
	SC__ASM_Forms[8] = (&JB_ASM_CmpEq__Encode);
	SC__ASM_Forms[9] = (&JB_ASM_Const__Encode);
	SC__ASM_Forms[10] = (&JB_ASM_Bra__Encode);
	SC__ASM_Forms[11] = (&JB_ASM_Mem__Encode);
	SC__ASM_Forms[12] = (&JB_ASM_Setn__Encode);
	SC__ASM_Forms[13] = (&JB_ASM_CNTR__Encode);
	SC__ASM_Forms[14] = (&JB_ASM_CNTC__Encode);
	SC__ASM_Forms[15] = (&JB_ASM_BFLD__Encode);
	SC__ASM_Forms[16] = (&JB_ASM_SWAP__Encode);
	//// Jeebox;
	JB_Constants__InitCode_();
	//// parser;
	JB_Tk__InitCode_();
	//// Random;
	JB_Rnd__InitCode_();
	//// Instruction;
	SC_Instruction__InitCode_();
	//// MaterialsLol;
	SC_MaterialsLol__InitCode_();
	//// SCClass;
	SC_Class__InitCode_();
	//// SCFunction;
	SC_Func__InitCode_();
	//// SCIterator;
	SC_Iter__InitCode_();
	return 0;
}

SCDecl* SC_IsPointerMath(SCDecl* L, SCDecl* R, SCOperator* opp, Message* exp) {
	if ((!((JB_Str_Equals(opp->Name, JB_LUB[515], false)) or (JB_Str_Equals(opp->Name, JB_LUB[270], false))))) {
		return nil;
	}
	if (((bool)L->PointerCount) and (SC_Decl_IsNumeric(R) == 1)) {
		return L;
	}
	if (((bool)R->PointerCount) and (SC_Decl_IsNumeric(L) == 1)) {
		return R;
	}
	if (((bool)R->PointerCount) and (((bool)L->PointerCount) and ((JB_Str_Equals(opp->Name, JB_LUB[270], false))))) {
		JB_FreeIfDead(SC_Decl_ExpectMatch(L, R, 0, exp, nil));
		return JB_TypeInt->TypeNormal;
	}
	return nil;
}

Message* SC_IsSelfOfSetter(Message* curr) {
	Message* dot = ((Message*)JB_Ring_Parent(curr));
	Message* P = ((Message*)JB_Ring_Parent(dot));
	if ((!(JB_Msg_OperatorIsRel(P, JB_LUB[541])))) {
		return nil;
	}
	if ((!(((Message*)JB_Ring_First(P)) == dot))) {
		return nil;
	}
	return P;
}

JB_String* JB_Join2(Array* R, JB_String* sep) {
	int n = (JB_Array_Size(R) - 1) * JB_Str_Length(sep);
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(R)) {
			JB_String* s = JB_Incr(((JB_String*)JB_Array_Value(R, _if0)));
			n = (n + JB_Str_Length(s));
			JB_Decr(s);
			_if0++;
		};
	}
	;
	FastString* fs = JB_Incr(JB_FS__NewSize(n));
	{
		int _if2 = 0;
		while (_if2 < JB_Array_Size(R)) {
			int i = _if2;
			JB_String* s = JB_Incr(((JB_String*)JB_Array_Value(R, _if2)));
			if (i > 0) {
				JB_FS_AppendString(fs, sep);
			}
			JB_FS_AppendString(fs, s);
			JB_Decr(s);
			_if2++;
		};
	}
	;
	JB_String* _tmPf4 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

void SC_ListFunctionsSub(JB_Object* o, Array* rz) {
	if (JB_Object_FastIsa(o, JB_AsClass(SCDecl))) {
		o = ((SCDecl*)((SCDecl*)o)->Setter);
	}
	if (JB_Object_FastIsa(o, JB_AsClass(SCFunction))) {
		{
			SCFunction* f = ((SCFunction*)o);
			while (f) {
				JB_Array_SyntaxAppend(rz, f);
				f = f->NextFunc;
			};
		};
	}
}

Array* SC_ListModules(Dictionary* access) {
	Array* rz = ((Array*)JB_Array__New0());
	{
		DictionaryReader* _navf0 = JB_Dict_Navigate(access);
		while (JB_Nav_MoveNext(_navf0)) {
			JB_Object* o = JB_Nav_Value(_navf0);
			if (JB_Object_FastIsa(o, JB_AsClass(SCModule))) {
				JB_Array_SyntaxAppend(rz, ((SCModule*)o));
			}
		};
	}
	;
	return rz;
}

SCDecl* SC_LowlevelArrayTransform(Message* exp, SCClass* Cls) {
	Message* ty = JB_Incr(((Message*)JB_Ring_First(exp)));
	Message* prms = JB_Incr(((Message*)JB_Ring_NextSib(ty)));
	if (JB_Msg_EqualsSyx(prms, JB_SyxOpp, false)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(prms)));
		JB_Tree_SyntaxAppend(prms, _tmPf0);
		JB_Decr(_tmPf0);
		JB_SetRef(prms->Name, JB_LUB[0]);
	}
	JB_Msg_BecomeStr(exp, JB_SyxDot, JB_LUB[137]);
	JB_SetRef(ty->Name, JB_LUB[684]);
	JB_Decr(ty);
	prms->Func = JB_SyxPrm;
	JB_Msg_AppendNum(prms, SC_Class_CalculateSize(Cls, 0));
	JB_Decr(prms);
	SCDecl* MemWrapper = JB_Incr(SC_TypeOfExpr(exp, SC__Comp_program, nil));
	if ((!MemWrapper)) {
		JB_Decr(MemWrapper);
		return nil;
	}
	JB_SetRef(MemWrapper, SC_Decl_Copy(MemWrapper, false));
	(SC_Decl_IsNewlyCreatedSet(MemWrapper, true));
	JB_SetRef(MemWrapper->Contains, Cls->TypeNormal);
	JB_SafeDecr(MemWrapper);
	return MemWrapper;
}

Message* SC_MakeDecl(JB_String* Type, JB_String* Name, Message* Value) {
	Message* rz = nil;
	JB_SetRef(rz, (JB_Syx_Msg(JB_SyxDecl, JB_LUB[0])));
	if (JB_Str_Exists(Type)) {
		Message* arg = JB_Incr(JB_Msg_Msg(rz, JB_SyxArg, JB_LUB[0]));
		(JB_Msg_SyntaxIsSet(arg, kJB__MsgUIFlags_Style2, true));
		JB_Msg_AppendSyx(arg, JB_SyxThg, Type);
		JB_Decr(arg);
	}
	 else {
		JB_Msg_AppendSyx(rz, JB_SyxEmb, JB_LUB[0]);
	}
	Message* NameMsg = JB_Incr((JB_Syx_Msg(JB_SyxThg, Name)));
	if (Value) {
		Message* Rel = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
		JB_Tree_SyntaxAppend(Rel, NameMsg);
		Message* _tmPf0 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxOpp, JB_LUB[541]));
		JB_Tree_SyntaxAppend(Rel, _tmPf0);
		JB_Decr(_tmPf0);
		JB_Tree_SyntaxAppend(Rel, Value);
		JB_SetRef(NameMsg->Obj, SC_CopyDecl(Value, Name));
		JB_SetRef(Rel->Obj, NameMsg->Obj);
		JB_SetRef(NameMsg, Rel);
		JB_Decr(Rel);
	}
	JB_Tree_SyntaxAppend(rz, NameMsg);
	JB_Decr(NameMsg);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_MakeDeclOrRel(Message* Into, Message* namemsg, Message* value) {
	JB_Incr(value);
	Message* rz = nil;
	if ((!Into)) {
		JB_Decr(value);
		JB_Decr(rz);
		return nil;
	}
	JB_SetRef(rz, ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxDecl, JB_LUB[0])));
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf1));
		JB_Decr(_tmPf1);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	if (value) {
		JB_SetRef(value, SC_NewRel(namemsg, JB_LUB[541], value));
	}
	 else {
		JB_SetRef(value, namemsg);
	}
	JB_Tree_SyntaxAppend(rz, value);
	JB_Decr(value);
	(JB_Ring_FirstSet(Into, rz));
	JB_SafeDecr(rz);
	return rz;
}

void SC_MatchBase() {
	//visible;
	AsmReg y = ((AsmReg)JB_Ternary(((bool)1), SC_xxx, ((AsmReg){})));
}

void SC_MoveFutureStaticsIn(Message* msg) {
	if ((!msg)) {
		return;
	}
	{
		Message* _LoopSrcf1 = JB_Incr(((Message*)JB_Ring_NextSib(msg)));
		Message* ch = JB_Incr(_LoopSrcf1);
		while (ch) {
			if (JB_Msg_OperatorIsTmp(ch, JB_LUB[617])) {
				Message* _tmPf2 = JB_Incr(JB_Msg_NeedSyxInt(ch, JB_SyxArg, -1));
				Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Last(msg)));
				JB_Msg_MoveAllIn(_tmPf2, _tmPf3);
				JB_Decr(_tmPf3);
				JB_Decr(_tmPf2);
			}
			JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
		};
		JB_Decr(ch);
		(_LoopSrcf1);
		JB_Decr(_LoopSrcf1);
	};
}

Message* SC_NewDeclWithStrStr(JB_String* type, JB_String* name) {
	Message* msg = ((Message*)JB_Ternary(JB_Str_Exists(name), (JB_Syx_Msg(JB_SyxThg, name)), nil));
	return SC_NewDeclWithStrMsg(type, msg);
}

Message* SC_NewDeclWithStrMsg(JB_String* type, Message* RelOrName) {
	Message* rz = nil;
	rz = (JB_Syx_Msg(JB_SyxDecl, JB_LUB[0]));
	if (JB_Str_Exists(type)) {
		JB_Msg_AppendSyx(rz, JB_SyxThg, type);
	}
	 else {
		JB_Msg_AppendSyx(rz, JB_SyxEmb, JB_LUB[0]);
	}
	JB_Tree_SyntaxAppend(rz, RelOrName);
	return rz;
}

Message* SC_NewDeclNum(SCDecl* D, int64 N, JB_String* VarName) {
	if (JB_Str_Exists(D->Name)) {
		JB_DoAt(1);
	}
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(N, nil));
	Message* NewNum = JB_Incr((JB_Syx_Msg(JB_SyxNum, _tmPf0)));
	JB_Decr(_tmPf0);
	JB_SetRef(NewNum->Obj, D);
	JB_SetRef(D->Type, JB_TypeInt);
	if ((N < JB_int__min()) or (N > JB_int__max())) {
		JB_SetRef(D->Type, JB_TypeInt64);
	}
	JB_SetRef(D->Name, VarName);
	if (JB_Str_Exists(VarName)) {
		JB_SetRef(D->Default, NewNum);
	}
	JB_SafeDecr(NewNum);
	return NewNum;
}

Message* SC_NewFnc(JB_String* name) {
	return ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxFunc, JB_LUB[0])));
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf1));
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxPrm, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf2));
		JB_Decr(_tmPf2);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	});
}

Message* SC_NewRelStr(JB_String* L, JB_String* op, JB_String* R) {
	return ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, L));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf1));
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, op));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf2));
		JB_Decr(_tmPf2);
		Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxThg, R));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf3));
		JB_Decr(_tmPf3);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	});
}

Message* SC_NewRel(Message* L, JB_String* op, Message* R) {
	return ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
		JB_Tree_SyntaxAppend(__imPf0, L);
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, op));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf1));
		JB_Decr(_tmPf1);
		JB_Tree_SyntaxAppend(__imPf0, R);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	});
}

SCDecl* SC_Or_And_Expansion(SCDecl* LC, SCDecl* RC, Message* exp, SCBase* name_space) {
	bool LBool = SC_Decl_MiniMatch(LC, JB_TypeBool->TypeNormal, kSC_TypeCastFalse);
	bool RBool = SC_Decl_MiniMatch(RC, JB_TypeBool->TypeNormal, kSC_TypeCastFalse);
	if (RBool and LBool) {
		return LC;
	}
	Message* ch0 = JB_Incr(((Message*)JB_Ring_First(exp)));
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(ch0)));
	Message* ch2 = JB_Incr(((Message*)JB_Ring_NextSib(_tmPf0)));
	JB_Decr(_tmPf0);
	if ((!LBool)) {
		JB_FreeIfDead(SC_ExpandToBool(ch0, name_space));
	}
	JB_Decr(ch0);
	if ((!RBool)) {
		JB_FreeIfDead(SC_ExpandToBool(ch2, name_space));
	}
	JB_Decr(ch2);
	return JB_TypeBool->TypeNormal;
}

void SC_ParamsFail(SCFunction* f, SCParamArray* params) {
	FastString* fs = JB_Incr(JB_FS__New());
	if ((!SC__AC_ShouldEnter)) {
		JB_DoAt(1);
	}
	{
		IntRange _LoopSrcf0 = SC_PA_Range(params);
		int _firstf2 = _LoopSrcf0[0];
		while (_LoopSrcf0[0] < _LoopSrcf0[1]) {
			int i = _LoopSrcf0[0];
			if (_firstf2 != _LoopSrcf0[0]) {
				JB_FS_AppendString(fs, JB_LUB[164]);
			}
			//start;
			Message* P = JB_Incr(SC_PA_SyntaxAccess(params, i));
			SCDecl* Type = JB_Incr(SC_TypeOfExpr(P, nil, nil));
			JB_Decr(P);
			JB_FreeIfDead(SC_Decl_RenderTypeName(Type, fs));
			JB_Decr(Type);
			_LoopSrcf0[0] = (_LoopSrcf0[0] + 1);
		};
	}
	;
	JB_String* str = JB_Incr(JB_FS_GetResult(fs));
	JB_Decr(fs);
	if (JB_Str_Exists(str)) {
		JB_SetRef(str, JB_Str_OperatorPlus(JB_LUB[855], str));
	}
	 else {
		JB_SetRef(str, JB_LUB[856]);
	}
	if ((!false)) {
		JB_Msg_SyntaxExpect(params->Exp, str);
	}
	JB_Decr(str);
	if ((!false)) {
		JB_String* _tmPf4 = JB_Incr(SC_Func_RenderTitle(f, true, nil));
		JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[857], _tmPf4));
		JB_Decr(_tmPf4);
		JB_Msg_SyntaxExpect(f->Source, _tmPf3);
		JB_Decr(_tmPf3);
	}
}

void JB_Obj_Print(JB_Object* o) {
	JB_String* _tmPf0 = JB_Incr(JB_ObjRender(o, nil));
	JB_Str_Print(_tmPf0);
	JB_Decr(_tmPf0);
}

void JB_PrintLine(JB_String* data) {
	JB_Str_PrintLine(data);
}

void JB_Obj_PrintLine(JB_Object* o) {
	JB_String* _tmPf0 = JB_Incr(JB_ObjRender(o, nil));
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
}

JB_String* SC_ProjName() {
	return SC__Comp_program->ExportName;
}

void SC_RelSetOrExpansion(Message* exp) {
	Message* L = JB_Incr(((Message*)JB_Ring_First(exp)));
	Message* R = JB_Incr(((Message*)JB_Ring_Last(exp)));
	//using;
	MessagePosition _using131 = JB_Msg_SyntaxUsing(exp);
	JB_Tree_Clear(exp);
	JB_Msg_MoveAllIn(L, exp);
	JB_Decr(L);
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(R)));
	Message* cond = JB_Incr(JB_Msg_NiceCopy(_tmPf3, nil));
	JB_Decr(_tmPf3);
	Message* tmp = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[689])));
	Message* _tmPf4 = JB_Incr(({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
		Message* _tmPf5 = JB_Incr(({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[679])));
			JB_Tree_SyntaxAppend(__imPf1, cond);
			JB_SafeDecr(__imPf1);
			 __imPf1;
		}));
		JB_Tree_SyntaxAppend(__imPf0, _tmPf5);
		JB_Decr(_tmPf5);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	JB_Decr(cond);
	JB_Tree_SyntaxAppend(tmp, _tmPf4);
	JB_Decr(_tmPf4);
	Message* _tmPf6 = JB_Incr(({
		Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
		JB_Tree_SyntaxAppend(__imPf2, R);
		JB_SafeDecr(__imPf2);
		 __imPf2;
	}));
	JB_Decr(R);
	JB_Tree_SyntaxAppend(tmp, _tmPf6);
	JB_Decr(_tmPf6);
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(exp)));
	Message* _tmPf7 = JB_Incr(((Message*)JB_Ternary((JB_Msg_EqualsSyx(P, JB_SyxDecl, false)), P, exp)));
	JB_Decr(P);
	(JB_Ring_NextSibSet((_tmPf7), tmp));
	JB_Decr(_tmPf7);
	JB_Decr(tmp);
	JB_MsgPos_SyntaxUsingComplete((&_using131));
	JB_MsgPos_Destructor((&_using131));
}

SCBase* SC_RootCollectTable_const(Message* node, SCBase* name_space, Message* ErrPlace) {
	if ((!false)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[858]);
	}
	return nil;
}

SCBase* SC_RootCollectTable_crash(Message* node, SCBase* name_space, Message* ErrPlace) {
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(node)));
	JB_String* _tmPf0 = JB_Incr(JB_Msg_Nyme(_tmPf1));
	JB_Decr(_tmPf1);
	JB_App__Crash(_tmPf0);
	JB_Decr(_tmPf0);
	return nil;
}

SCBase* SC_RootCollectTable_extends(Message* node, SCBase* name_space, Message* ErrPlace) {
	if ((!false)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[859]);
	}
	return SC__Comp_program;
}

SCBase* SC_RootCollectTable_static(Message* node, SCBase* name_space, Message* ErrPlace) {
	if ((!false)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[860]);
	}
	return nil;
}

SCDecl* SC_SameTypeSub(Message* first, Message* second, SCBase* name_space) {
	SCDecl* rz = nil;
	SCDecl* T1 = JB_Incr(SC_TypeOfExpr(first, name_space, nil));
	SCDecl* T2 = JB_Incr(SC_TypeOfExpr(second, name_space, nil));
	if ((!(((bool)T1) and ((bool)T2)))) {
		JB_Decr(rz);
		JB_Decr(T1);
		JB_Decr(T2);
		return nil;
	}
	if (SC_Decl_isnil(T1)) {
		SC_Decl_Match(T2, T1, kSC_TypeCastTrue, first);
		JB_Decr(rz);
		JB_Decr(T1);
		JB_SafeDecr(T2);
		return T2;
	}
	if (SC_Decl_isnil(T2)) {
		SC_Decl_Match(T1, T2, kSC_TypeCastTrue, second);
		JB_Decr(rz);
		JB_Decr(T2);
		JB_SafeDecr(T1);
		return T1;
	}
	bool Obj1 = SC_Decl_IsNormalObject(T1);
	bool Obj2 = SC_Decl_IsNormalObject(T2);
	if (Obj1 and Obj2) {
		0;
	}
	 else if ((!Obj1) and (!Obj2)) {
		JB_SetRef(rz, SC_Decl_better_numeric(T1, T2));
	}
	 else if (Obj1) {
		JB_SetRef(T2, SC_Decl_NewWrapper(T2, T2));
	}
	 else {
		JB_SetRef(T1, SC_Decl_NewWrapper(T1, T1));
	}
	if ((!rz)) {
		JB_SetRef(rz, SC_Decl_HighestMatch(T1, T2, first));
		if ((!rz)) {
			JB_Decr(rz);
			JB_Decr(T2);
			JB_SafeDecr(T1);
			return T1;
		}
	}
	if (rz != T2) {
		JB_FreeIfDead(SC_Decl_CreateSimpleTypeCast(rz, second));
	}
	JB_Decr(T2);
	if (rz != T1) {
		JB_FreeIfDead(SC_Decl_CreateSimpleTypeCast(rz, first));
	}
	JB_Decr(T1);
	JB_SafeDecr(rz);
	return rz;
}

void SC_SC_MakeComment(Message* msg) {
	if ((!(JB_Msg_EqualsSyx(msg, JB_SyxTmp, false)))) {
		JB_Object_SyntaxExpect(nil);
		return;
	}
	msg->Func = JB_SyxSheb;
	JB_Tree_Clear(msg);
}

int SC_SelfKindaUse(Message* curr) {
	Message* p = ((Message*)JB_Ring_Parent(curr));
	Message* R = ((Message*)JB_Ring_Parent(p));
	if (JB_Msg_EqualsSyx(R, JB_SyxRel, false)) {
		Message* Op = ((Message*)JB_Tree_Get(R, 1));
		if ((!(((JB_Msg_SyntaxEquals(Op, JB_LUB[541], false))) and ((bool)((Message*)JB_Ring_NextSib(Op)))))) {
			return nil;
		}
		return JB_Msg_DotType(p);
	}
	return 0;
}

Message* SC_SettingAProperty(Message* Rel) {
	if ((!(JB_Msg_OperatorIsRel(Rel, JB_LUB[541])))) {
		return nil;
	}
	Message* it = ((Message*)JB_Ring_First(Rel));
	if (it) {
		if (JB_Msg_DotType(it) == kSC_IsProperty) {
			return it;
		}
	}
	return nil;
}

bool SC_SettingMemory(Message* Rel) {
	if ((!(JB_Msg_OperatorIsRel(Rel, JB_LUB[541])))) {
		return nil;
	}
	Message* it = ((Message*)JB_Ring_First(Rel));
	if (it) {
		if ((JB_Msg_DotType(it) == kSC_IsProperty) or (JB_Msg_DotType(it) == kSC_IsMemory)) {
			return true;
		}
	}
	return false;
}

bool SC_SettingSelfProperty(Message* Rel) {
	Message* Dot = SC_SettingAProperty(Rel);
	if ((!Dot)) {
		return nil;
	}
	return (JB_Msg_OperatorIsThing(((Message*)JB_Ring_First(Dot)), JB_LUB[331]));
}

Array* SC_SortInitOrder(Array* mods) {
	Array* rz = JB_Incr(((Array*)JB_Array__New0()));
	while (SC_SortInitOrderSub(mods, rz)) {
		0;
	};
	JB_SafeDecr(rz);
	return rz;
}

bool SC_SortInitOrderSub(Array* mods, Array* out) {
	SCModule* failed = nil;
	bool GotAny = false;
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(mods)) {
			SCModule* m = ((SCModule*)JB_Array_Value(mods, _if0));
			if ((!JB_Rec_OK(JB_StdErr))) {
				return nil;
			}
			if ((!m->Inited)) {
				if (SC_Mod_TryInit(m, out)) {
					GotAny = true;
				}
				 else {
					failed = m;
				}
			}
			_if0++;
		};
	}
	;
	if ((!(GotAny or (!failed)))) {
		JB_Msg_SyntaxExpect(failed->Source, JB_LUB[861]);
		return nil;
	}
	return ((bool)failed);
}

__lib__ ErrorInt Speedie_Main(_cstring* args, int Mode) {
	return JB_SP_Run(args, Mode);
}

Message* SC_SpellOutMsg(Message* type, Message* Exp, Message* namemsg) {
	//using;
	MessagePosition _using162 = JB_Msg_SyntaxUsing(Exp);
	Message* Result = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[776])));
	JB_Tree_SyntaxAppend(Result, type);
	Message* _tmPf1 = JB_Incr(({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		JB_Tree_SyntaxAppend(__imPf0, namemsg);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	JB_Tree_SyntaxAppend(Result, _tmPf1);
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[862], type->Name));
	JB_Msg_BecomeStr(type, JB_SyxThg, _tmPf2);
	JB_Decr(_tmPf2);
	Exp->Func = JB_SyxBra;
	(JB_Ring_FirstSet(Exp, Result));
	JB_MsgPos_SyntaxUsingComplete((&_using162));
	JB_MsgPos_Destructor((&_using162));
	JB_SafeDecr(Result);
	return Result;
}

void SC_TemporalStatements_alert(SCFunction* fn, Message* node, SCBase* name_space) {
	if ((!false)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[863]);
	}
}

void SC_TemporalStatements_break(SCFunction* fn, Message* node, SCBase* name_space) {
	if ((!false)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[864]);
	}
}

void SC_TemporalStatements_crash(SCFunction* fn, Message* node, SCBase* name_space) {
	JB_App__Crash(JB_LUB[865]);
}

void SC_TemporalStatements_do(SCFunction* fn, Message* node, SCBase* name_space) {
	if ((!false)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[866]);
	}
}

void SC_TemporalStatements_ignore(SCFunction* fn, Message* node, SCBase* name_space) {
	(JB_Tree_Remove(node));
}

bool JB_TestCasting() {
	Dictionary* d2 = JB_Incr(JB_Dict__New());
	DTWrap* _tmPf1 = JB_Incr(((DTWrap*)JB_Dict_ValueStr(d2, JB_LUB[1])));
	DTWrap* _tmPf0 = JB_Incr(JB_Wrap__NewInt(((int)JB_Wrap_Value(_tmPf1)) + 1));
	JB_Decr(_tmPf1);
	(JB_Dict_ValueSet(d2, JB_LUB[1], _tmPf0));
	JB_Decr(_tmPf0);
	JB_Decr(d2);
	Dictionary* d = JB_Incr(JB_Dict__New());
	JB_String* str = JB_Incr(JB_LUB[867]);
	if ((!((!JB_Str_ByteValue(str, 0)) and ((!JB_Str_ByteValue(str, 1)) and ((!JB_Str_ByteValue(str, 2)) and ((!JB_Str_ByteValue(str, 3)) and (JB_Str_Length(str) == 6))))))) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(d);
		JB_Decr(str);
		return nil;
	}
	(JB_Dict_ValueSet(d, str, str));
	JB_Decr(str);
	JB_Decr(d);
	if ('\x00') {
		return nil;
	}
	JB_Class* x = JB_AsClass(Message);
	Message* y = JB_Incr(JB_Msg__NewNormal(JB_SyxBra, JB_LUB[0]));
	JB_SetRef(y->Name, JB_LUB[868]);
	JB_Object* yy = nil;
	JB_SetRef(yy, y);
	Array* arr = JB_Incr((JB_Array__New0()));
	JB_Array_SyntaxAppend(arr, JB_LUB[0]);
	JB_Decr(arr);
	if (JB_Object_Isa(yy, JB_AsClass(Message))) {
		if ((!(JB_Str_Equals(((Message*)yy)->Name, JB_LUB[868], false)))) {
			debugger;
		}
	}
	JB_Decr(yy);
	bool _tmPf2 = JB_Object_Isa(y, x);
	JB_Decr(y);
	return (_tmPf2);
}

bool SC_TooManyErrors() {
	return JB_StdErr->ErrorCount >= 50;
}

void SC_Tran_ArgArray(Message* Exp, SCBase* name_space) {
	//visible;
	Message* thg = JB_Incr(JB_Msg_IsSetIntoVar(Exp));
	if ((!thg)) {
		if (JB_Msg_OperatorIn(Exp, JB_SyxSheb)) {
			JB_Decr(thg);
			return;
		}
		if ((!(false))) {
			JB_Msg_SyntaxExpect(Exp, nil);
			JB_Decr(thg);
			return;
		}
	}
	Message* rel = JB_Incr(JB_Msg_NiceParent(Exp));
	JB_Msg_Expect(rel, JB_SyxRel, nil);
	Message* Place = JB_Incr(JB_Msg_ParentPoint(rel));
	SCDecl* d = JB_Incr(JB_Msg_AsDecl(thg));
	if (d) {
		JB_SetRef(d->Default, nil);
	}
	JB_Decr(d);
	rel->Func = JB_SyxSheb;
	if (Place == rel) {
		(JB_Ring_NextSibSet(rel, thg));
		JB_SetRef(Place, thg);
	}
	 else {
		JB_FreeIfDead(JB_Msg_ReplaceWith(rel, thg));
		(JB_Ring_NextSibSet(Place, rel));
		Exp->Func = JB_SyxStr;
	}
	JB_Decr(rel);
	//using;
	MessagePosition _using167 = JB_Msg_SyntaxUsing(Exp);
	ArgArrayCounter Counter = ((ArgArrayCounter){});
	{
		Message* itm = JB_Incr(((Message*)JB_Tree_First_(Exp)));
		while (itm) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(itm)));
			Message* rel2 = JB_Incr(SC_ArgArrayCounter_Do((&Counter), thg->Name, itm, name_space));
			(JB_Ring_NextSibSet(Place, rel2));
			JB_SetRef(Place, rel2);
			JB_Decr(rel2);
			JB_SetRef(itm, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(itm);
		(Exp);
	}
	;
	JB_Decr(Place);
	JB_Decr(thg);
	SC_ArgArrayCounter_check((&Counter), Exp);
	JB_Object* Already = JB_Incr(Exp->Obj);
	if (Counter.IsItem and JB_Object_MustBe(Already, JB_AsClass(SCDecl), nil)) {
		int c = Counter.max + 1;
		if ((!(c < 16384))) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[869]);
		}
		((SCDecl*)Already)->C_Array = c;
	}
	JB_Decr(Already);
	JB_MsgPos_SyntaxUsingComplete((&_using167));
	JB_MsgPos_Destructor((&_using167));
}

void SC_Tran_Msg(SCFunction* fn, Message* Exp, SCBase* name_space) {
	JB_Incr(name_space);
	Message* Type = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* NameMsg = JB_Incr(((Message*)JB_Ring_First(Type)));
	if (JB_Tree_OperatorLessOrEqual(Exp, 1)) {
		Message* Mini = JB_Incr(SC_SpellOutMsg(Type, Exp, NameMsg));
		JB_FreeIfDead(SC_TypeOfExpr(Mini, name_space, nil));
		JB_Decr(Mini);
		JB_Decr(name_space);
		JB_Decr(Type);
		JB_Decr(NameMsg);
		return;
	}
	Message* itm = JB_Incr(((Message*)JB_Ring_NextSib(Type)));
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(Exp)));
	JB_Decr(P);
	NameAndMsg Place = JB_Msg_IntoVariable(Exp, name_space);
	if ((!Place.Arg)) {
		JB_Decr(name_space);
		JB_Decr(Type);
		JB_Decr(NameMsg);
		JB_Decr(itm);
		SC_NameAndMsg_destructor((&Place));
		return;
	}
	JB_SetRef(name_space, JB_Msg_SCArg(Place.Arg, name_space, nil));
	Message* Result = JB_Incr(SC_SpellOutMsg(Type, Exp, NameMsg));
	JB_Decr(NameMsg);
	JB_Decr(Type);
	while (itm) {
		Message* NextItm = JB_Incr(((Message*)JB_Ring_NextSib(itm)));
		//using;
		MessagePosition _using163 = JB_Msg_SyntaxUsing(itm);
		Message* Line = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[870])));
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Place.Name));
		JB_Tree_SyntaxAppend(Line, (_tmPf1));
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf0, itm);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
		JB_Tree_SyntaxAppend(Line, _tmPf2);
		JB_Decr(_tmPf2);
		SC_NameAndMsg_SyntaxAppend((&Place), Line);
		JB_FreeIfDead(SC_TypeOfExpr(Line, name_space, nil));
		SC_Func__Tran_All(fn, Line, name_space);
		JB_Decr(Line);
		JB_SetRef(itm, NextItm);
		JB_Decr(NextItm);
		JB_MsgPos_SyntaxUsingComplete((&_using163));
		JB_MsgPos_Destructor((&_using163));
	};
	JB_Decr(itm);
	JB_FreeIfDead(SC_TypeOfExpr(Result, name_space, nil));
	JB_Decr(Result);
	JB_Decr(name_space);
	SC_NameAndMsg_destructor((&Place));
}

void SC_Tran_MsgList(SCFunction* fn, Message* Exp, SCBase* name_space) {
	if ((!false)) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[871]);
	}
	SC__Func_DisabledPoints++;
}

SCObject* SC_TypeCastCheck(Message* Exp, SCBase* name_space, Message* side) {
	Message* exp0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* N = JB_Incr(((Message*)JB_Ring_NextSib(exp0)));
	SCDecl* Old = JB_Incr(SC_TypeOfExpr(exp0, name_space, side));
	if ((!Old)) {
		JB_Decr(exp0);
		JB_Decr(N);
		JB_Decr(Old);
		return nil;
	}
	SCDecl* New = JB_Incr(SC_ExtractDecl(N, name_space));
	JB_Decr(N);
	if ((!New)) {
		JB_Decr(exp0);
		JB_Decr(Old);
		JB_Decr(New);
		return nil;
	}
	if (SC_Decl_IsntReallyCastable(Old, exp0) or SC_Decl_IsntReallyCastable(New, exp0)) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[872]);
		}
	}
	JB_Decr(Old);
	JB_Decr(exp0);
	JB_SafeDecr(New);
	return New;
}

SCObject* SC_TypeOfAccess(Message* Exp, SCBase* name_space, Message* side) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(Exp)));
	SCObject* Ty0 = JB_Incr(SC_TypeOfExprModulesOK(ch, name_space, nil));
	Message* arr = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	if ((JB_Object_FastIsa(Ty0, JB_AsClass(SCDecl))) and (JB_Tree_HasOneChild(arr))) {
		Message* Index = JB_Incr(((Message*)JB_Ring_First(arr)));
		SCDecl* Access = JB_Incr(SC_TypeOfExpr(Index, name_space, nil));
		if ((!Access)) {
			JB_Decr(ch);
			JB_Decr(Ty0);
			JB_Decr(arr);
			JB_Decr(Index);
			JB_Decr(Access);
			return nil;
		}
		int W = SC_Decl_IsNumeric(((SCDecl*)Ty0));
		if (W > 1) {
			if ((!JB_Msg_ExpectInt(Index, Access))) {
				JB_Decr(ch);
				JB_Decr(Ty0);
				JB_Decr(arr);
				JB_Decr(Index);
				JB_Decr(Access);
				return nil;
			}
			JB_Decr(ch);
			SCDecl* _tmPf0 = JB_Incr(SC_TypeOfVecAccess(Index, ((SCDecl*)Ty0), W));
			JB_Decr(Ty0);
			JB_Decr(arr);
			JB_Decr(Index);
			JB_Decr(Access);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		if (((SCDecl*)Ty0)->C_Array) {
			if ((!JB_Msg_ExpectInt(Index, Access))) {
				JB_Decr(ch);
				JB_Decr(Ty0);
				JB_Decr(arr);
				JB_Decr(Index);
				JB_Decr(Access);
				return nil;
			}
			JB_Decr(ch);
			SCDecl* _tmPf1 = JB_Incr(SC_TypeOfPointerAccess(((SCDecl*)Ty0)));
			JB_Decr(Ty0);
			JB_Decr(arr);
			JB_Decr(Index);
			JB_Decr(Access);
			JB_SafeDecr(_tmPf1);
			return _tmPf1;
		}
		if (((bool)((SCDecl*)Ty0)->PointerCount) and SC_Decl_OperatorIsa(Access, JB_TypeInt)) {
			if ((!((JB_Msg_EqualsSyx(ch, JB_SyxBra, false)) and (({
				Message* _tmP255 = JB_Incr(((Message*)JB_Ring_First(ch)));
				bool _tmP254 = JB_Msg_EqualsSyx(_tmP255, JB_SyxBra, false);
				JB_Decr(_tmP255);
				 _tmP254;
			}))))) {
				if ((!JB_Msg_ExpectInt(Index, Access))) {
					JB_Decr(ch);
					JB_Decr(Ty0);
					JB_Decr(arr);
					JB_Decr(Index);
					JB_Decr(Access);
					return nil;
				}
				JB_Decr(ch);
				SCDecl* _tmPf2 = JB_Incr(SC_TypeOfPointerAccess(((SCDecl*)Ty0)));
				JB_Decr(Ty0);
				JB_Decr(arr);
				JB_Decr(Index);
				JB_Decr(Access);
				JB_SafeDecr(_tmPf2);
				return _tmPf2;
			}
		}
		JB_Decr(Access);
		JB_Decr(Index);
	}
	if (JB_Object_FastIsa(Ty0, JB_AsClass(SCModule))) {
		if (SC_Mod_IsMArray(((SCModule*)Ty0), arr) and ({
			Message* _tmP257 = JB_Incr(((Message*)JB_Ring_First(arr)));
			bool _tmP256 = JB_Msg_expectmatch(_tmP257, name_space, JB_TypeInt);
			JB_Decr(_tmP257);
			 _tmP256;
		})) {
			JB_Decr(ch);
			SCDecl* _tmPf3 = JB_Incr(SC_LowlevelArrayTransform(Exp, ((SCModule*)Ty0)->Cls));
			JB_Decr(Ty0);
			JB_Decr(arr);
			JB_SafeDecr(_tmPf3);
			return _tmPf3;
		}
	}
	JB_Decr(Ty0);
	arr->Func = JB_SyxPrm;
	if (JB_Msg_OperatorIsARel(ch, JB_LUB[679])) {
		JB_Msg_BecomeStr(ch, JB_SyxBra, JB_LUB[0]);
		JB_Msg_BecomeStr(Exp, JB_SyxDot, JB_LUB[873]);
	}
	 else {
		JB_Msg_BecomeStr(Exp, JB_SyxDot, JB_LUB[874]);
	}
	JB_Decr(ch);
	(JB_Msg_rangeSet(Exp, JB_Msg_range(arr)));
	JB_Decr(arr);
	return SC_TypeOfDot(Exp, name_space, side);
}

SCObject* SC_TypeOfAddress(Message* Exp, SCBase* name_space, Message* side) {
	JB_Incr(Exp);
	SCObject* rz = nil;
	JB_SetRef(Exp, JB_Msg_UnBra(Exp));
	if (JB_Msg_EqualsSyx(Exp, JB_SyxDot, false)) {
		JB_SetRef(rz, SC_TypeOfDot(Exp, name_space, side));
	}
	 else if (JB_Msg_EqualsSyx(Exp, JB_SyxThg, false)) {
		JB_SetRef(rz, SC_Base_LookUpVar(name_space, Exp->Name, Exp, side));
	}
	 else {
		if ((!(false))) {
			JB_Msg_SyntaxExpect(Exp, nil);
			JB_Decr(Exp);
			JB_Decr(rz);
			return nil;
		}
	}
	JB_SetRef(Exp->Obj, rz);
	JB_Decr(Exp);
	JB_SafeDecr(rz);
	return rz;
}

SCObject* SC_TypeOfAdj(Message* Exp, SCBase* name_space, Message* side) {
	Message* f = JB_Msg_NeedSyxInt(Exp, JB_SyxNil, 0);
	if ((!f)) {
		return nil;
	}
	Dictionary* d = SC_Comp__Adj(f);
	if ((!d)) {
		return nil;
	}
	Message* name = JB_Msg_NeedSyxInt(Exp, JB_SyxThg, 1);
	if ((!name)) {
		return nil;
	}
	Macro* found = ((Macro*)JB_Dict_Expect(d, name));
	if ((!found)) {
		return nil;
	}
	Array* args = JB_Array__New0();
	if ((!JB_Msg_EqualsSyx(f, JB_SyxThg, false))) {
		JB_Array_SyntaxAppend(args, f);
	}
	JB_Msg_BecomeMacro(Exp, found, args);
	return SC_TypeOfExpr(Exp, name_space, side);
}

SCObject* SC_TypeOfARel(Message* Exp, SCBase* name_space, Message* side) {
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[417], false)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
		SCObject* _tmPf2 = JB_Incr(SC_TypeOfAddress(_tmPf0, name_space, side));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[679], false)) {
		JB_Msg_BecomeStr(Exp, JB_SyxBra, JB_LUB[0]);
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(Exp)));
		SCDecl* _tmPf3 = JB_Incr(SC_TypeOfExpr(_tmPf1, name_space, nil));
		JB_Decr(_tmPf1);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[526], false)) {
		return SC_TypeOfDotDotDot(Exp, name_space, nil);
	}
	return SC_Func__Tran_AfterRel(Exp, name_space, side);
}

SCObject* SC_TypeOfArgArr(Message* Exp, SCBase* name_space, Message* side) {
	SCDecl* result = JB_Incr(SC_Decl__New());
	{
		Message* itm = JB_Incr(((Message*)JB_Tree_First_(Exp)));
		while (itm) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(itm)));
			if (JB_Msg_EqualsSyx(itm, JB_SyxTmp, false)) {
				itm->Func = JB_SyxThg;
			}
			SCDecl* Contained = JB_Incr(SC_TypeOfExpr(itm, name_space, nil));
			if (Contained) {
				if ((!(Contained->Type->IsDataType or ((bool)Contained->PointerCount)))) {
					JB_Msg_SyntaxExpect(itm, JB_LUB[875]);
				}
				if (result->Type) {
					SCDecl* oof = JB_Incr(SC_Decl_HighestArrayContainMatch(Contained, result->Type->TypeNormal, itm));
					if (oof) {
						JB_SetRef(result->Type, oof->Type);
					}
					JB_Decr(oof);
				}
				 else {
					JB_SetRef(result->Type, Contained->Type);
				}
				result->C_Array++;
			}
			JB_Decr(Contained);
			JB_SetRef(itm, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(itm);
		(Exp);
	}
	;
	JB_SetRef(Exp->Obj, result);
	SC_Tran_ArgArray(Exp, name_space);
	JB_SafeDecr(result);
	return result;
}

SCObject* SC_TypeOfArr(Message* Exp, SCBase* name_space, Message* side) {
	int IsDispatch = ((int)((JB_Msg_SyntaxEquals(Exp, JB_LUB[876], true))));
	int InOrder = 0;
	SCDecl* result = JB_Incr(SC_Decl__New());
	JB_SetRef(Exp->Obj, result);
	{
		Message* _Valuef2 = JB_Incr(((Message*)JB_Tree_First_(Exp)));
		while (_Valuef2) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(_Valuef2)));
			Message* itm = JB_Incr(_Valuef2);
			SCClass* NewArrCls = JB_Incr(JB_TypeArray);
			if (JB_Msg_EqualsSyx(itm, JB_SyxItem, false)) {
				Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(itm)));
				SCDecl* IdxType = JB_Incr(SC_TypeOfExpr(_tmPf3, name_space, nil));
				JB_Decr(_tmPf3);
				if (SC_Decl_OperatorIsa(IdxType, JB_TypeString)) {
					JB_SetRef(NewArrCls, JB_TypeDictionary);
				}
				 else if (SC_Decl_OperatorIsa(IdxType, JB_TypeInt)) {
					if ((!IsDispatch)) {
						Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(itm)));
						InOrder = SC_ArrayInOrderCheck(InOrder, _tmPf4);
						JB_Decr(_tmPf4);
						if (InOrder <= 0) {
							JB_SetRef(NewArrCls, JB_TypeDictionary);
						}
					}
				}
				 else if ((!(SC_Decl_OperatorIsa(IdxType, JB_TypeSyntax)))) {
					if ((!false)) {
						JB_Msg_SyntaxExpect(Exp, JB_LUB[877]);
					}
					JB_SetRef(_Valuef2, _Nf1);
					JB_Decr(_Nf1);
					JB_Decr(itm);
					JB_Decr(NewArrCls);
					JB_Decr(IdxType);
					continue;
				}
				JB_Decr(IdxType);
				JB_SetRef(itm, ((Message*)JB_Ring_Last(itm)));
			}
			Message* _tmPf5 = JB_Incr(JB_Msg_TypeOfArrItem(itm));
			SCDecl* Contained = JB_Incr(SC_TypeOfExpr(_tmPf5, name_space, nil));
			JB_Decr(_tmPf5);
			if ((!Contained)) {
				JB_SetRef(_Valuef2, _Nf1);
				JB_Decr(_Nf1);
				JB_Decr(itm);
				JB_Decr(NewArrCls);
				JB_Decr(Contained);
				continue;
			}
			JB_SetRef(itm, JB_Msg_Resync(itm, Exp));
			if (SC_Class_IsObject(Contained->Type)) {
				JB_SetRef(Contained, Contained->Type->TypeNormal);
			}
			 else if ((bool)IsDispatch) {
				IsDispatch++;
			}
			if (result->Contains) {
				JB_SetRef(result->Contains, SC_Decl_HighestArrayContainMatch(Contained, result->Contains, itm));
			}
			 else {
				JB_SetRef(result->Contains, Contained);
			}
			JB_Decr(Contained);
			JB_Decr(itm);
			if (result->Type) {
				if ((!(result->Type == NewArrCls))) {
					JB_Msg_SyntaxExpect(Exp, JB_LUB[878]);
					JB_Decr(result);
					JB_Decr(_Valuef2);
					JB_Decr(_Nf1);
					JB_Decr(NewArrCls);
					return nil;
				}
			}
			 else {
				JB_SetRef(result->Type, NewArrCls);
			}
			JB_Decr(NewArrCls);
			JB_SetRef(_Valuef2, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(_Valuef2);
		(Exp);
	}
	;
	if (((bool)IsDispatch) and (result->Type != JB_TypeDictionary)) {
		JB_SetRef(result->Type, result->Contains->Type);
		JB_SetRef(result->Contains, nil);
		result->C_Array = (IsDispatch - 1);
		Exp->Func = JB_SyxArg;
		SC_Tran_ArgArray(Exp, name_space);
	}
	 else {
		if (((bool)result->Contains) and (!SC_Class_IsObject(result->Contains->Type))) {
			JB_SetRef(result->Contains, SC_Decl_NewWrapper(result->Contains, result->Contains));
		}
	}
	if ((!(result->Type))) {
		JB_SetRef(result->Type, JB_TypeArray);
	}
	JB_SafeDecr(result);
	return result;
}

SCObject* SC_TypeOfBlock(Message* Exp, SCBase* name_space, Message* side) {
	SCArg* p = JB_Incr(JB_Msg_SCArg(Exp, name_space, nil));
	p->IsStatementExpr = true;
	SCFunction* fn = JB_Incr(SC_Base_OwningFunc(p));
	JB_FreeIfDead(SC_CollectDecls(Exp, p, p, 0));
	{
		Message* ch = JB_Incr(((Message*)JB_Tree_First_(Exp)));
		while (ch) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
			if (JB_Msg_EqualsSyx(ch, JB_SyxArg, false)) {
				SCArg* _tmPf2 = JB_Incr(JB_Msg_SCArg(ch, p, nil));
				SC_Func__Tran_All(fn, ch, _tmPf2);
				JB_Decr(_tmPf2);
			}
			 else {
				SC_Func__Tran_All(fn, ch, p);
			}
			JB_SetRef(ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(ch);
		(Exp);
	}
	;
	JB_Decr(fn);
	Message* last = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	if ((!JB_Msg_Expect(last, JB_SyxTmp, JB_LUB[690]))) {
		JB_Decr(p);
		JB_Decr(last);
		return nil;
	}
	Message* val = JB_Incr(((Message*)JB_Ring_First(last)));
	if ((!val)) {
		JB_Msg_SyntaxExpect(last, JB_LUB[879]);
		JB_Decr(p);
		JB_Decr(last);
		JB_Decr(val);
		return nil;
	}
	JB_Decr(last);
	if ((!JB_Msg_ExpectLast(val, JB_LUB[0]))) {
		JB_Decr(p);
		JB_Decr(val);
		return nil;
	}
	SCDecl* _tmPf3 = JB_Incr(SC_TypeOfExpr(val, p, nil));
	JB_Decr(val);
	JB_Decr(p);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

SCObject* SC_TypeOfBra(Message* Exp, SCBase* name_space, Message* side) {
	SCObject* rz = nil;
	Message* c0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	if (JB_Msg_EqualsSyx(c0, JB_SyxArg, false)) {
		JB_SetRef(rz, SC_TypeOfBlock(c0, name_space, side));
	}
	 else {
		JB_SetRef(rz, SC_TypeOfExpr(c0, name_space, side));
	}
	JB_Decr(c0);
	JB_SafeDecr(rz);
	return rz;
}

SCObject* SC_TypeOfBRel(Message* Exp, SCBase* name_space, Message* side) {
	JB_String* name = JB_Incr(Exp->Name);
	Message* F = JB_Incr(((Message*)JB_Ring_First(Exp)));
	if ((!F)) {
		JB_Decr(name);
		JB_Decr(F);
		return nil;
	}
	SCDecl* SubType = JB_Incr(SC_TypeOfExpr(F, name_space, nil));
	if ((!SubType)) {
		JB_Decr(name);
		JB_Decr(F);
		JB_Decr(SubType);
		return nil;
	}
	if (((bool)SubType->Type->FuncProto) and ((JB_Str_Equals(name, JB_LUB[417], false)))) {
		JB_Decr(name);
		SCObject* _tmPf0 = JB_Incr(SC_TypeOfAddress(F, name_space, side));
		JB_Decr(F);
		JB_Decr(SubType);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	if (JB_Str_Equals(name, JB_LUB[880], false)) {
		SCDecl* Cpy = JB_Incr(SC_Decl_Copy(SubType, false));
		Cpy->PointerCount--;
		JB_Decr(name);
		JB_Decr(F);
		JB_Decr(SubType);
		JB_SafeDecr(Cpy);
		return Cpy;
	}
	 else if (JB_Str_Equals(name, JB_LUB[270], false)) {
		JB_Decr(name);
		JB_Decr(F);
		JB_SafeDecr(SubType);
		return SubType;
	}
	 else if (JB_Str_Equals(name, JB_LUB[417], false)) {
		if ((!JB_Msg_CanGetAddress(F, name_space, true))) {
			JB_Decr(name);
			JB_Decr(F);
			JB_Decr(SubType);
			return nil;
		}
		JB_Decr(name);
		JB_Decr(F);
		SCDecl* _tmPf1 = JB_Incr(SC_Decl_AsPointer(SubType));
		JB_Decr(SubType);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	 else if (JB_Str_Equals(name, JB_LUB[679], false)) {
		Message* cond = JB_Incr(SC_ExpandToBool(F, name_space));
		if ((!cond)) {
			JB_Decr(name);
			JB_Decr(F);
			JB_Decr(SubType);
			JB_Decr(cond);
			return nil;
		}
		JB_Object* d = JB_Incr(cond->Obj);
		JB_Decr(cond);
		if (JB_Object_FastIsa(d, JB_AsClass(SCDecl))) {
			if (SC_Decl_IsConstOf(((SCDecl*)d), JB_FalseBool)) {
				JB_Decr(name);
				JB_Decr(F);
				JB_Decr(SubType);
				JB_Decr(d);
				return JB_TrueBool;
			}
			if (SC_Decl_IsConstOf(((SCDecl*)d), JB_TrueBool)) {
				JB_Decr(name);
				JB_Decr(F);
				JB_Decr(SubType);
				JB_Decr(d);
				return JB_FalseBool;
			}
		}
		JB_Decr(d);
		JB_Decr(name);
		JB_Decr(F);
		JB_Decr(SubType);
		return JB_TypeBool->TypeNormal;
	}
	 else if ((JB_Str_Equals(name, kSC_BitNot, false)) or (JB_Str_Equals(name, JB_LUB[517], false))) {
		if ((!(SC_Decl_IsInteger(SubType)))) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[881]);
			JB_Decr(name);
			JB_Decr(F);
			JB_Decr(SubType);
			return nil;
		}
		JB_Decr(name);
		JB_Decr(F);
		JB_SafeDecr(SubType);
		return SubType;
	}
	JB_Decr(F);
	JB_Decr(name);
	JB_FreeIfDead(SC_Func__Tran_AfterRel(Exp, name_space, side));
	JB_SafeDecr(SubType);
	return SubType;
}

SCObject* SC_TypeOfChar(Message* Exp, SCBase* name_space, Message* side) {
	if ((!(JB_Msg_Length(Exp) == 1))) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[882]);
	}
	return JB_TypeByte->TypeNormal;
}

SCObject* SC_TypeOfDot(Message* Exp, SCBase* name_space, Message* side) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	if (_tmPf0->Obj) {
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_Decr(_tmPf0);
	JB_String* name = JB_Incr(Exp->Name);
	SCObject* Class_Space = nil;
	Message* ch = JB_Incr(((Message*)JB_Ring_First(Exp)));
	if (JB_Msg_EqualsSyx(ch, JB_SyxThg, false)) {
		JB_SetRef(Class_Space, SC_Base_LookUpVar(name_space, ch->Name, ch, nil));
		JB_SetRef(ch->Obj, Class_Space);
	}
	 else {
		JB_SetRef(Class_Space, SC_TypeOfExprModulesOK(ch, name_space, nil));
	}
	if ((!(Class_Space))) {
		JB_Msg_SyntaxExpect(ch, JB_LUB[883]);
		JB_Decr(name);
		JB_Decr(Class_Space);
		JB_Decr(ch);
		return nil;
	}
	SCDecl* contains = nil;
	if ((!(JB_Object_Isa(Class_Space, JB_AsClass(SCModule))))) {
		SCObject* DeclSpace = JB_Incr(Class_Space);
		if (JB_Object_FastIsa(DeclSpace, JB_AsClass(SCDecl))) {
			int W = SC_Class_NumericCount(((SCDecl*)DeclSpace)->Type);
			if ((W > 1) and (!({
				Message* _tmP259 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
				bool _tmP258 = JB_Ring_HasChildren(_tmP259);
				JB_Decr(_tmP259);
				 _tmP258;
			}))) {
				int swz = JB_Str_IsSwizzle(name, W);
				if (swz) {
					JB_Decr(name);
					JB_Decr(Class_Space);
					JB_Decr(ch);
					JB_Decr(contains);
					SCDecl* _tmPf2 = JB_Incr(SC_TypeOfSwizzle(Exp, ((SCDecl*)DeclSpace), name_space, side, swz));
					JB_Decr(DeclSpace);
					JB_SafeDecr(_tmPf2);
					return _tmPf2;
				}
			}
			JB_SetRef(contains, ((SCDecl*)DeclSpace)->Contains);
			SCClass* ContainsCls = JB_Incr(((SCDecl*)DeclSpace)->Type);
			if (((!contains)) and ((bool)ContainsCls)) {
				JB_SetRef(contains, ContainsCls->Contained);
			}
			JB_SetRef(Class_Space, ContainsCls);
			JB_Decr(ContainsCls);
		}
		JB_Decr(DeclSpace);
		if ((!(JB_Object_Isa(Class_Space, JB_AsClass(SCClass))))) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[884]);
			JB_Decr(name);
			JB_Decr(Class_Space);
			JB_Decr(ch);
			JB_Decr(contains);
			return nil;
		}
	}
	JB_Object* o = JB_Incr(SC_Base_LookUpDot(((SCBase*)Class_Space), name, Exp, name_space, contains, side));
	JB_Decr(name);
	if ((!o)) {
		JB_Decr(Class_Space);
		JB_Decr(ch);
		JB_Decr(contains);
		JB_Decr(o);
		return nil;
	}
	SCDecl* decl = nil;
	if (JB_Object_FastIsa(o, JB_AsClass(SCFunction))) {
		JB_SetRef(decl, ((SCFunction*)o)->ReturnType);
	}
	 else if (JB_Object_FastIsa(o, JB_AsClass(SCDecl))) {
		JB_SetRef(decl, o);
	}
	 else if (JB_Object_FastIsa(o, JB_AsClass(SCModule))) {
		if (JB_Msg_EqualsSyx(ch, JB_SyxThg, false)) {
			Exp->Func = JB_SyxThg;
			JB_Tree_Clear(Exp);
		}
		JB_Decr(Class_Space);
		JB_Decr(ch);
		JB_Decr(contains);
		JB_Decr(decl);
		JB_SafeDecr(o);
		return ((SCModule*)o);
	}
	JB_Decr(o);
	JB_Decr(ch);
	if (decl) {
		if (contains) {
			if (JB_Object_FastIsa(Class_Space, JB_AsClass(SCClass))) {
				JB_SetRef(decl, SC_Decl_ContainedReplace(decl, ((SCClass*)Class_Space), contains, true));
			}
		}
		 else if (JB_Object_FastIsa(Class_Space, JB_AsClass(SCModule))) {
			SCClass* cls = JB_Incr(((SCModule*)Class_Space)->Cls);
			if (((bool)cls) and cls->IsRole) {
				JB_SetRef(decl, SC_Decl_ClassActReplace(decl, cls));
			}
			JB_Decr(cls);
		}
	}
	JB_Decr(contains);
	JB_Decr(Class_Space);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	JB_Object* fn = JB_Incr(_tmPf1->Obj);
	JB_Decr(_tmPf1);
	if (JB_Object_FastIsa(fn, JB_AsClass(SCFunction))) {
		if ((!(decl))) {
			JB_SetRef(decl, JB_TypeVoid);
		}
		JB_SetRef(Exp->Obj, decl);
		SC_DotFuncToNormalFunc(Exp, ((SCFunction*)fn));
	}
	JB_Decr(fn);
	JB_SafeDecr(decl);
	return decl;
}

SCObject* SC_TypeOfDotDotDot(Message* Exp, SCBase* name_space, Message* side) {
	if (true) {
		MessagePosition _using126 = JB_Msg_SyntaxUsing(Exp);
		JB_Msg_BecomeStr(Exp, JB_SyxBra, JB_LUB[0]);
		Message* P = JB_Incr(((Message*)JB_Ring_Parent(Exp)));
		Message* c = JB_Incr(Exp);
		while ((!JB_Msg_EqualsSyx(P, JB_SyxPrm, false)) and (!JB_Msg_EqualsSyx(P, JB_SyxArr, false))) {
			if ((!(((bool)P) and (!JB_Msg_EqualsSyx(P, JB_SyxArg, false))))) {
				JB_Msg_SyntaxExpect(Exp, JB_LUB[885]);
				JB_MsgPos_Destructor((&_using126));
				JB_Decr(P);
				JB_Decr(c);
				return nil;
			}
			JB_SetRef(c, P);
			JB_SetRef(P, ((Message*)JB_Ring_Parent(P)));
		};
		JB_Decr(P);
		Message* _tmPf1 = JB_Incr(({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[886])));
			Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[116]));
			JB_Tree_SyntaxAppend(__imPf0, (_tmPf2));
			JB_Decr(_tmPf2);
			Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
			JB_Tree_SyntaxAppend(__imPf0, (_tmPf3));
			JB_Decr(_tmPf3);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
		(JB_Ring_NextSibSet(c, _tmPf1));
		JB_Decr(_tmPf1);
		JB_Decr(c);
		JB_MsgPos_SyntaxUsingComplete((&_using126));
		JB_MsgPos_Destructor((&_using126));
	}
	Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	SCDecl* _tmPf5 = JB_Incr(SC_TypeOfExpr(_tmPf4, name_space, nil));
	JB_Decr(_tmPf4);
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

SCDecl* SC_TypeOfExpr(Message* Exp, SCBase* name_space, Message* side) {
	SCObject* obj = JB_Incr(((SCObject*)Exp->Obj));
	if ((!obj)) {
		JB_SetRef(obj, SC_TypeOfExprSub2(Exp, name_space, side));
	}
	if (obj) {
		if (JB_Object_FastIsa(obj, JB_AsClass(SCDecl))) {
			JB_SafeDecr(obj);
			return ((SCDecl*)obj);
		}
		if (JB_Object_FastIsa(obj, JB_AsClass(SCModule))) {
			SCClass* cls = JB_Incr(((SCModule*)obj)->Cls);
			if ((!cls)) {
				JB_Msg_SyntaxExpect(Exp, JB_LUB[887]);
				JB_Decr(obj);
				JB_Decr(cls);
				return nil;
			}
			JB_Decr(obj);
			SCDecl* _tmPf0 = JB_Incr(SC_Decl_AsPointer(cls->ClassType));
			JB_Decr(cls);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
	}
	JB_Decr(obj);
	return nil;
}

SCDecl* SC_TypeOfExprMaybeNil(Message* Exp, SCBase* name_space) {
	if (Exp) {
		return SC_TypeOfExpr(Exp, name_space, nil);
	}
	return nil;
}

SCDecl* SC_TypeOfExprModulesNotOK(Message* Exp, SCBase* name_space, Message* side) {
	SCObject* dcl = JB_Incr(SC_TypeOfExprModulesOK(Exp, name_space, side));
	if (JB_Object_FastIsa(dcl, JB_AsClass(SCDecl))) {
		JB_SafeDecr(dcl);
		return ((SCDecl*)dcl);
	}
	JB_Decr(dcl);
	if ((!false)) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[888]);
	}
	return nil;
}

SCObject* SC_TypeOfExprModulesOK(Message* Exp, SCBase* name_space, Message* side) {
	if (Exp->Obj) {
		return ((SCObject*)Exp->Obj);
	}
	if (JB_Msg_EqualsSyx(Exp, JB_SyxThg, false)) {
		JB_SetRef(Exp->Obj, SC_Base_LookUpVar(name_space, Exp->Name, Exp, side));
		return ((SCObject*)Exp->Obj);
	}
	return SC_TypeOfExprSub2(Exp, name_space, side);
}

SCDecl* SC_TypeOfExprNeeded(Message* exp, SCBase* name_space) {
	int OldCount = JB_StdErr->ErrorCount;
	SCDecl* result = JB_Incr(SC_TypeOfExpr(exp, name_space, nil));
	if (((bool)result) and (result->Type != JB_TypeVoid_)) {
		JB_SafeDecr(result);
		return result;
	}
	JB_Decr(result);
	if (OldCount == JB_StdErr->ErrorCount) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(exp, JB_LUB[889]);
		}
		SCFunction* it = JB_Incr(JB_Msg_expfunc(exp));
		if (it) {
			if ((!false)) {
				JB_Msg_SyntaxExpect(it->Source, JB_LUB[890]);
			}
		}
		JB_Decr(it);
	}
	return nil;
}

SCObject* SC_TypeOfExprSub(Message* Exp, SCBase* name_space, Message* side) {
	SCObject* rz = nil;
	ExprResolver f = JB_ExprFuncs[((int)Exp->Func)];
	if ((!f)) {
		JB_Msg_SyntaxExpect(Exp, nil);
		return nil;
	}
	rz = (f)(Exp, name_space, side);
	if (SC_SCObject_ShouldUnWrap(rz)) {
		return SC_Decl_UnWrapDataType(((SCDecl*)rz), Exp, name_space);
	}
	return rz;
}

SCObject* SC_TypeOfExprSub2(Message* Exp, SCBase* name_space, Message* side) {
	if (JB_Msg_EqualsSyx(Exp, JB_SyxDecl, false)) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
		JB_Object* d = JB_Incr(_tmPf1->Obj);
		JB_Decr(_tmPf1);
		if (JB_Object_FastIsa(d, JB_AsClass(SCDecl))) {
			JB_SafeDecr(d);
			return ((SCDecl*)d);
		}
		JB_Decr(d);
	}
	if ((!(name_space))) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[891]);
		return nil;
	}
	SCObject* _tmPf0 = JB_Incr(SC_TypeOfExprSub(Exp, name_space, side));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SetRef(Exp->Obj, _tmPf0);
	JB_Decr(_tmPf0);
	return ((SCObject*)Exp->Obj);
}

SCObject* SC_TypeOfFunc(Message* Exp, SCBase* name_space, Message* side) {
	Message* f = ((Message*)JB_Ring_First(Exp));
	if (JB_Msg_EqualsSyx(f, JB_SyxList, false)) {
		return SC_TypeOfTernary(Exp, name_space, side);
	}
	SCObject* fn = SC_TypeOfFuncSub(Exp, name_space, side);
	if ((!fn)) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[892]);
		return nil;
	}
	if (JB_Object_FastIsa(fn, JB_AsClass(SCFunction))) {
		SCDecl* obj = ((SCFunction*)fn)->ReturnType;
		if ((!obj)) {
			JB_SetRef(Exp->Obj, JB_TypeVoid);
		}
		return obj;
	}
	return fn;
}

SCObject* SC_TypeOfFuncSub(Message* exp, SCBase* name_space, Message* side) {
	SCFunction* fn = JB_Incr(JB_Msg_MsgFunc(exp));
	if (fn) {
		JB_SafeDecr(fn);
		return fn;
	}
	Message* ch = JB_Incr(((Message*)JB_Ring_First(exp)));
	Message* params = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	if (JB_Msg_EqualsSyx(ch, JB_SyxThg, false)) {
		JB_Decr(fn);
		SCObject* _tmPf0 = JB_Incr(SC_Base_LookUpFunc(name_space, ch->Name, exp, params));
		JB_Decr(ch);
		JB_Decr(params);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	SCDecl* ThgDecl = JB_Incr(SC_TypeOfExpr(ch, name_space, nil));
	JB_Decr(ch);
	if ((!ThgDecl)) {
		JB_Decr(fn);
		JB_Decr(params);
		JB_Decr(ThgDecl);
		return nil;
	}
	JB_SetRef(fn, ThgDecl->Type->FuncProto);
	if ((!fn)) {
		JB_Decr(fn);
		JB_Decr(params);
		JB_Decr(ThgDecl);
		return SC_TypeOfSyntaxCall(exp, name_space, side);
	}
	SCParamArray* PList = JB_Incr(SC_PA__New(exp, nil));
	if ((!SC_PA_PreReadTypes(PList, name_space, params, side))) {
		JB_Decr(fn);
		JB_Decr(params);
		JB_Decr(ThgDecl);
		JB_Decr(PList);
		return nil;
	}
	JB_Decr(params);
	JB_SetRef(fn, SC_Func_ArgsMatch(fn, nil, name_space, PList));
	if ((!fn)) {
		SC_ParamsFail(ThgDecl->Type->FuncProto, PList);
	}
	 else if ((!fn->ReturnType)) {
		JB_SetRef(exp->Obj, JB_TypeVoid);
	}
	JB_Decr(PList);
	JB_Decr(ThgDecl);
	JB_SafeDecr(fn);
	return fn;
}

SCObject* SC_TypeOfLast(Message* Exp, SCBase* name_space, Message* side) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	SCDecl* _tmPf1 = JB_Incr(SC_TypeOfExpr(_tmPf0, name_space, nil));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCObject* SC_TypeOfList(Message* Exp, SCBase* name_space, Message* side) {
	int FoundType = 0;
	int AllowType = 0;
	int Count = 0;
	bool HasBig = false;
	bool Numeric = true;
	{
		Message* s = JB_Incr(((Message*)JB_Tree_First_(Exp)));
		while (s) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(s)));
			SCDecl* typ = JB_Incr(SC_TypeOfExpr(s, name_space, nil));
			if ((!typ)) {
				JB_Decr(s);
				JB_Decr(_Nf1);
				JB_Decr(typ);
				return nil;
			}
			int N = SC_Decl_IsNumeric(typ);
			if ((!N)) {
				Numeric = false;
			}
			if (Numeric) {
				if (N > 1) {
					HasBig = true;
				}
				if (JB_Object_MustBe(typ, JB_AsClass(SCDecl), s)) {
					DataTypeCode T = ((SCDecl*)typ)->Type->TypeInfo;
					if (JB_Msg_iszero(s)) {
						AllowType = JB_TC_FloatIntMerge(T, AllowType, s);
					}
					 else {
						FoundType = JB_TC_FloatIntMerge(T, FoundType, s);
						JB_Msg_WrapFloatOrInt(s, T, N, ((SCDecl*)typ));
					}
				}
				Count = (Count + N);
				if ((!(Count <= 4))) {
					JB_Msg_SyntaxExpect(Exp, JB_LUB[893]);
					JB_Decr(s);
					JB_Decr(_Nf1);
					JB_Decr(typ);
					return nil;
				}
			}
			JB_Decr(typ);
			JB_SetRef(s, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(s);
		(Exp);
	}
	;
	if ((!Numeric)) {
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(Exp)));
		SCDecl* _tmPf5 = JB_Incr(SC_TypeOfExpr(_tmPf2, name_space, nil));
		JB_Decr(_tmPf2);
		JB_SafeDecr(_tmPf5);
		return _tmPf5;
	}
	if ((!(Count >= 2))) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[894]);
		return nil;
	}
	if ((!(FoundType))) {
		FoundType = AllowType;
	}
	bool IsFloat = (FoundType == 2);
	SCClass* _tmPf3 = JB_Incr(SC_VecType(IsFloat, Count));
	SCDecl* cns = JB_Incr(SC_Class_NotConst(_tmPf3));
	JB_Decr(_tmPf3);
	if ((!HasBig)) {
		JB_SetRef(Exp->Obj, cns);
		JB_SafeDecr(cns);
		return cns;
	}
	JB_Decr(cns);
	//using;
	MessagePosition _using165 = JB_Msg_SyntaxUsing(Exp);
	JB_String* name = JB_Incr(((JB_String*)JB_Ternary(IsFloat, JB_LUB[895], JB_LUB[896])));
	Message* list = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
	JB_Msg_MoveAllIn(Exp, list);
	Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name));
	JB_Decr(name);
	JB_Tree_SyntaxAppend(Exp, (_tmPf4));
	JB_Decr(_tmPf4);
	JB_Tree_SyntaxAppend(Exp, list);
	JB_Decr(list);
	Exp->Func = JB_SyxFunc;
	JB_MsgPos_SyntaxUsingComplete((&_using165));
	SCDecl* _tmPf6 = JB_Incr(SC_TypeOfExpr(Exp, name_space, nil));
	JB_MsgPos_Destructor((&_using165));
	JB_SafeDecr(_tmPf6);
	return _tmPf6;
}

SCObject* SC_TypeOfMsg(Message* Exp, SCBase* name_space, Message* side) {
	Message* type = JB_Incr(((Message*)JB_Ring_First(Exp)));
	if ((!JB_FreeIfDead(JB_Msg__GetFunc(type)))) {
		JB_Decr(type);
		return nil;
	}
	Message* name = JB_Incr(((Message*)JB_Ring_First(type)));
	if (name) {
		JB_FreeIfDead(SC_TypeOfExpr(name, name_space, nil));
	}
	JB_Decr(name);
	{
		Message* _LoopSrcf1 = JB_Incr(((Message*)JB_Ring_NextSib(type)));
		Message* ch = JB_Incr(_LoopSrcf1);
		while (ch) {
			JB_FreeIfDead(SC_TypeOfExpr(ch, name_space, nil));
			JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
		};
		JB_Decr(ch);
		(_LoopSrcf1);
		JB_Decr(_LoopSrcf1);
	}
	;
	JB_Decr(type);
	SCClass* _tmPf2 = JB_Incr(SC_Comp__AccessStr(JB_LUB[897], nil));
	SCDecl* _tmPf3 = JB_Incr(_tmPf2->TypeNormal);
	JB_Decr(_tmPf2);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

SCObject* SC_TypeOfNum(Message* Exp, SCBase* name_space, Message* side) {
	if (JB_Str_ContainsString(Exp->Name, JB_LUB[512])) {
		JB_Msg_Float(Exp);
		return JB_Typefloat->TypeNormal;
	}
	int64 Val = JB_Msg_Int(Exp, 0);
	JB_Msg_BecomeNum(Exp, Val);
	if (((Val << 32) >> 32) != Val) {
		return JB_TypeInt64->TypeNormal;
	}
	return JB_TypeInt->TypeNormal;
}

SCDecl* SC_TypeOfPointerAccess(SCDecl* ty0) {
	SCDecl* Cpy = JB_Incr(SC_Decl_Copy(ty0, false));
	if (Cpy->C_Array) {
		Cpy->C_Array = nil;
	}
	 else {
		Cpy->PointerCount--;
	}
	JB_SafeDecr(Cpy);
	return Cpy;
}

SCObject* SC_TypeOfQues(Message* Exp, SCBase* name_space, Message* side) {
	SCObject* type = SC_TypeOfExprModulesOK(((Message*)JB_Ring_Last(Exp)), name_space, nil);
	if ((!type)) {
		return nil;
	}
	JB_Msg_ReplaceInbuilt(Exp, name_space, JB_Object_AsDecl(type), Exp);
	if ((!JB_Msg_EqualsSyx(Exp, JB_SyxQues, false))) {
		return SC_TypeOfExpr(Exp, name_space, nil);
	}
	return nil;
}

SCObject* SC_TypeOfRel(Message* Exp, SCBase* name_space, Message* side) {
	JB_Incr(side);
	Message* LN = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* opch = JB_Incr(((Message*)JB_Ring_NextSib(LN)));
	SCOperator* Comp = JB_Incr(SC_Opp__Lookup(opch));
	Message* RN = JB_Incr(((Message*)JB_Ring_NextSib(opch)));
	if ((JB_Msg_SyntaxEquals(opch, JB_LUB[898], false)) or (JB_Msg_SyntaxEquals(opch, JB_LUB[899], false))) {
		SCDecl* _tmPf0 = JB_Incr(JB_Msg_NiceIsFlagSyntax(LN, opch, RN, name_space, side));
		JB_Decr(side);
		JB_Decr(LN);
		JB_Decr(opch);
		JB_Decr(Comp);
		JB_Decr(RN);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	if ((!(((bool)RN) or Comp->IsCustom))) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[900]);
		JB_Decr(side);
		JB_Decr(LN);
		JB_Decr(opch);
		JB_Decr(Comp);
		JB_Decr(RN);
		return nil;
	}
	JB_SetRef(side, nil);
	Message* P = JB_Incr(JB_Msg_NiceParent(Exp));
	if (P) {
		Syntax ParentFunc = P->Func;
		bool ShouldBeSet = ((ParentFunc == JB_SyxArg) or (ParentFunc == JB_SyxDecl));
		if ((!SC_Opp_SyntaxEquals(Comp, JB_LUB[541], false))) {
			if (ShouldBeSet) {
				if ((!false)) {
					JB_Msg_SyntaxExpect(opch, JB_LUB[901]);
				}
			}
		}
		 else if (ShouldBeSet) {
			JB_SetRef(side, RN);
		}
		 else {
			if ((!false)) {
				JB_Msg_SyntaxExpect(opch, JB_LUB[902]);
			}
		}
	}
	JB_Decr(P);
	SCDecl* RC = nil;
	SCDecl* LC = nil;
	if (side) {
		JB_SetRef(RC, SC_TypeOfExprNeeded(RN, name_space));
		if ((!RC)) {
			JB_Decr(side);
			JB_Decr(LN);
			JB_Decr(opch);
			JB_Decr(Comp);
			JB_Decr(RN);
			JB_Decr(RC);
			JB_Decr(LC);
			return nil;
		}
		JB_SetRef(LC, SC_TypeOfExpr(LN, name_space, side));
		if (((JB_Msg_EqualsSyx(Exp, JB_SyxRel, false))) and (LN == JB_FreeIfDead(((Message*)JB_Ring_Last(Exp))))) {
			SCObject* _tmPf1 = JB_Incr(SC_TypeOfRel(Exp, name_space, side));
			JB_Decr(side);
			JB_Decr(LN);
			JB_Decr(opch);
			JB_Decr(Comp);
			JB_Decr(RN);
			JB_Decr(RC);
			JB_Decr(LC);
			JB_SafeDecr(_tmPf1);
			return _tmPf1;
		}
	}
	 else {
		JB_SetRef(LC, SC_TypeOfExpr(LN, name_space, nil));
		if (RN) {
			JB_SetRef(RC, SC_TypeOfExprNeeded(RN, name_space));
			if ((!RC)) {
				JB_Decr(side);
				JB_Decr(LN);
				JB_Decr(opch);
				JB_Decr(Comp);
				JB_Decr(RN);
				JB_Decr(RC);
				JB_Decr(LC);
				return nil;
			}
		}
	}
	if ((!(JB_Msg_EqualsSyx(Exp, JB_SyxRel, false)))) {
		JB_Decr(side);
		JB_Decr(LN);
		JB_Decr(opch);
		JB_Decr(Comp);
		JB_Decr(RN);
		JB_Decr(RC);
		JB_Decr(LC);
		return nil;
	}
	if ((!(LC))) {
		JB_Msg_SyntaxExpect(LN, JB_LUB[903]);
		JB_Decr(side);
		JB_Decr(LN);
		JB_Decr(opch);
		JB_Decr(Comp);
		JB_Decr(RN);
		JB_Decr(RC);
		JB_Decr(LC);
		return nil;
	}
	if ((!RN)) {
		JB_Decr(side);
		JB_Decr(LN);
		JB_Decr(opch);
		SCDecl* _tmPf2 = JB_Incr(SC_CustomFuncOp(Exp, Comp, name_space, RN));
		JB_Decr(Comp);
		JB_Decr(RN);
		JB_Decr(RC);
		JB_Decr(LC);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	if (side) {
		if ((!SC_Decl_ConstCheck(LC, LN, RN, RC))) {
			JB_Decr(side);
			JB_Decr(LN);
			JB_Decr(opch);
			JB_Decr(Comp);
			JB_Decr(RN);
			JB_Decr(RC);
			JB_Decr(LC);
			return nil;
		}
	}
	if ((SC_Opp_SyntaxEquals(Comp, JB_LUB[600], false)) or (SC_Opp_SyntaxEquals(Comp, JB_LUB[601], false))) {
		JB_Decr(side);
		JB_Decr(LN);
		JB_Decr(opch);
		JB_Decr(Comp);
		JB_Decr(RN);
		SCDecl* _tmPf5 = JB_Incr(SC_Or_And_Expansion(LC, RC, Exp, name_space));
		JB_Decr(RC);
		JB_Decr(LC);
		JB_SafeDecr(_tmPf5);
		return _tmPf5;
	}
	JB_SetRef(opch->Obj, Comp);
	JB_Decr(opch);
	int Custom = 0;
	if (RC != JB_TypeNil) {
		SCDecl* IPM = JB_Incr(SC_IsPointerMath(LC, RC, Comp, Exp));
		if (IPM) {
			JB_Decr(side);
			JB_Decr(LN);
			JB_Decr(Comp);
			JB_Decr(RN);
			JB_Decr(RC);
			JB_Decr(LC);
			JB_SafeDecr(IPM);
			return IPM;
		}
		JB_Decr(IPM);
		Custom = SC_UseCustomOperators(LC, RC, Comp, Exp);
		if (Custom == kSC__CustomOps_Needed) {
			if ((!SC_Opp_IsCompSet(Comp))) {
				JB_Decr(side);
				JB_Decr(LN);
				SCDecl* _tmPf3 = JB_Incr(SC_CustomFuncOp(Exp, Comp, name_space, RN));
				JB_Decr(Comp);
				JB_Decr(RN);
				JB_Decr(RC);
				JB_Decr(LC);
				JB_SafeDecr(_tmPf3);
				return _tmPf3;
			}
			 else if (Comp->IsCaseAware or SC_CanOpCompare(Exp, LC, RC, Comp)) {
				JB_Decr(side);
				JB_Decr(LN);
				SCDecl* _tmPf4 = JB_Incr(SC_DoOpCompare(Exp, LC, RC, Comp, name_space));
				JB_Decr(Comp);
				JB_Decr(RN);
				JB_Decr(RC);
				JB_Decr(LC);
				JB_SafeDecr(_tmPf4);
				return _tmPf4;
			}
		}
		 else if (Comp->AsBit) {
			if ((!(SC_Decl_NoFloat(RC, RN) and SC_Decl_NoFloat(LC, LN)))) {
				JB_Decr(side);
				JB_Decr(LN);
				JB_Decr(Comp);
				JB_Decr(RN);
				JB_Decr(RC);
				JB_Decr(LC);
				return nil;
			}
		}
	}
	JB_Decr(LN);
	if ((((bool)(Custom & kSC__CustomOps_TypeCastFromBool))) and ((!side) and ((bool)RN))) {
		JB_SetRef(LC, JB_TypeInt->TypeNormal);
		JB_SetRef(RC, LC);
	}
	if (Custom <= kSC__CustomOps_Needed) {
		SC_Decl_ExpectMatchRel(LC, RC, RN, side, Exp);
	}
	 else if (Custom == kSC__CustomOps_LeftOnlyIsVector) {
		JB_Decr(side);
		JB_Decr(Comp);
		JB_Decr(RN);
		JB_Decr(RC);
		JB_SafeDecr(LC);
		return LC;
	}
	 else {
		JB_Decr(side);
		JB_Decr(Comp);
		JB_Decr(RN);
		JB_Decr(LC);
		JB_SafeDecr(RC);
		return RC;
	}
	JB_Decr(RN);
	if (((bool)(Custom & kSC__CustomOps_TypeCastToBigger))) {
		JB_SetRef(LC, SC_Decl_better_numeric(LC, RC));
	}
	JB_Decr(RC);
	if (Comp->IsCompare and (!side)) {
		JB_Decr(side);
		JB_Decr(Comp);
		JB_Decr(LC);
		return JB_TypeBool->TypeNormal;
	}
	JB_Decr(side);
	if (Comp->MakesSigned and SC_Decl_isuintlike(LC)) {
		JB_Decr(Comp);
		SCDecl* _tmPf6 = JB_Incr(SC_Decl_MakeSignedIfPossible(LC));
		JB_Decr(LC);
		JB_SafeDecr(_tmPf6);
		return _tmPf6;
	}
	JB_Decr(Comp);
	JB_SafeDecr(LC);
	return LC;
}

SCObject* SC_TypeOfSthg(Message* Exp, SCBase* name_space, Message* side) {
	Exp->Func = JB_SyxSheb;
	//...;
	return nil;
}

SCObject* SC_TypeOfString(Message* Exp, SCBase* name_space, Message* side) {
	return JB_TypeString->TypeNormal;
}

SCDecl* SC_TypeOfSwizzle(Message* Exp, SCDecl* Type, SCBase* name_space, Message* side, int swiz) {
	JB_Incr(name_space);
	JB_Incr(Exp);
	int Count = swiz >> 16;
	int W = SC_Class_NumericCount(Type->Type);
	if ((!((Count == 1) or (side == nil)))) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[904]);
		JB_Decr(Exp);
		JB_Decr(name_space);
		return nil;
	}
	if ((!(Count <= 4))) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[905]);
		JB_Decr(Exp);
		JB_Decr(name_space);
		return nil;
	}
	Message* prms = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	SCClass* _tmPf3 = JB_Incr(SC_VecType((!SC_Decl_IsInteger(Type)), Count));
	SCDecl* T = JB_Incr(SC_Class_NotConst(_tmPf3));
	JB_Decr(_tmPf3);
	if (Count == 1) {
		swiz = (swiz & 7);
		if ((!(swiz < W))) {
			JB_Msg_SyntaxExpect(prms, JB_LUB[906]);
			JB_Decr(Exp);
			JB_Decr(name_space);
			JB_Decr(prms);
			JB_Decr(T);
			return nil;
		}
		JB_Msg_BecomeStr(Exp, JB_SyxAcc, JB_LUB[0]);
		prms->Func = JB_SyxArr;
		JB_Msg_AppendNum(prms, swiz);
	}
	 else {
		JB_Tree_Remove(prms);
		Message* oof = JB_Incr(((Message*)JB_Ring_First(Exp)));
		JB_String* tmp = JB_Incr(oof->Name);
		if (JB_Msg_EqualsSyx(oof, JB_SyxThg, false)) {
			JB_Tree_Remove(oof);
		}
		 else {
			NameAndMsg what = JB_Msg_IntoVariable(oof, name_space);
			JB_SetRef(oof, what.Arg);
			Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_Parent(oof)));
			JB_SetRef(_tmPf4->Obj, T);
			JB_Decr(_tmPf4);
			JB_SetRef(name_space, JB_Msg_AsArg(oof));
			JB_Msg_BecomeStr(Exp, JB_SyxBra, JB_LUB[0]);
			Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_Last(oof)));
			JB_SetRef(Exp, ((Message*)JB_Ring_Last(_tmPf5)));
			JB_Decr(_tmPf5);
			JB_SetRef(tmp, Exp->Name);
			JB_SetRef(Exp->Obj, T);
			SC_NameAndMsg_destructor((&what));
		}
		JB_Decr(oof);
		JB_Msg_BecomeStr(Exp, JB_SyxList, JB_LUB[0]);
		{
			int i = 0;
			while (i < Count) {
				int field = (swiz >> (i * 3)) & 7;
				Message* item = nil;
				if (field == 4) {
					JB_SetRef(item, (JB_Syx_Msg(JB_SyxNum, JB_LUB[907])));
				}
				 else {
					if ((!(field < W))) {
						JB_Msg_SyntaxExpect(Exp, JB_LUB[906]);
						JB_Decr(Exp);
						JB_Decr(name_space);
						JB_Decr(prms);
						JB_Decr(T);
						JB_Decr(tmp);
						JB_Decr(item);
						return nil;
					}
					Message* thg = JB_Incr((JB_Syx_Msg(JB_SyxThg, tmp)));
					JB_SetRef(item, ({
						Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxAcc, JB_LUB[0])));
						JB_Tree_SyntaxAppend(__imPf1, thg);
						Message* _tmPf6 = JB_Incr(({
							Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxArr, JB_LUB[0])));
							Message* _tmPf7 = JB_Incr(JB_Syx_IntMsg(JB_SyxNum, field));
							JB_Tree_SyntaxAppend(__imPf2, (_tmPf7));
							JB_Decr(_tmPf7);
							JB_SafeDecr(__imPf2);
							 __imPf2;
						}));
						JB_Tree_SyntaxAppend(__imPf1, _tmPf6);
						JB_Decr(_tmPf6);
						JB_SafeDecr(__imPf1);
						 __imPf1;
					}));
					JB_Decr(thg);
				}
				JB_FreeIfDead(SC_TypeOfExpr(item, name_space, nil));
				JB_Tree_SyntaxAppend(Exp, item);
				JB_Decr(item);
				i++;
			};
		}
		;
		JB_Decr(tmp);
	}
	JB_Decr(prms);
	JB_Decr(name_space);
	JB_Decr(Exp);
	JB_SafeDecr(T);
	return T;
}

SCDecl* SC_TypeOfSyntaxCall(Message* exp, SCBase* name_space, Message* side) {
	JB_Msg_BecomeStr(exp, JB_SyxDot, JB_LUB[908]);
	return SC_TypeOfExpr(exp, name_space, side);
}

SCObject* SC_TypeOfSyx(Message* Exp, SCBase* name_space, Message* side) {
	JB_Msg_BecomeSyx(Exp);
	return SC_TypeOfThg(Exp, name_space, side);
}

SCObject* SC_TypeOfTernary(Message* Exp, SCBase* name_space, Message* side) {
	Message* list = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* params = JB_Incr(((Message*)JB_Ring_NextSib(list)));
	if ((!(JB_Ring_HasChildren(list) and JB_Ring_HasChildCount(params, 1)))) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[909]);
		JB_Decr(list);
		JB_Decr(params);
		return nil;
	}
	Message* first = JB_Incr(((Message*)JB_Ring_First(list)));
	Message* second = JB_Incr(((Message*)JB_Ring_NextSib(first)));
	if (second) {
		if ((!JB_Msg_ExpectLast(second, JB_LUB[0]))) {
			JB_Decr(list);
			JB_Decr(params);
			JB_Decr(first);
			JB_Decr(second);
			return nil;
		}
	}
	 else {
		JB_SetRef(second, JB_Msg_createnil(Exp));
		(JB_Ring_NextSibSet(first, second));
	}
	Message* Test = JB_Incr(((Message*)JB_Ring_First(params)));
	SCDecl* result = JB_Incr(SC_SameTypeSub(first, second, name_space));
	JB_Decr(second);
	JB_Decr(first);
	if (((bool)result) and ((bool)JB_FreeIfDead(SC_ExpandToBool(Test, name_space)))) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(list)));
		JB_Tree_SyntaxAppend(params, _tmPf0);
		JB_Decr(_tmPf0);
		JB_Msg_BecomeStr(list, JB_SyxThg, JB_LUB[103]);
		JB_SetRef(params->Obj, SC__Comp_TernaryFunc);
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(list)));
		JB_Tree_SyntaxAppend(params, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Decr(list);
		JB_Decr(params);
		JB_Decr(Test);
		JB_SafeDecr(result);
		return result;
	}
	JB_Decr(result);
	JB_Decr(Test);
	JB_Decr(params);
	JB_Decr(list);
	return nil;
}

SCObject* SC_TypeOfThg(Message* Exp, SCBase* name_space, Message* side) {
	return SC_TypeOfThgSub(Exp, name_space, side, false);
}

SCObject* SC_TypeOfThgSub(Message* Exp, SCBase* name_space, Message* side, bool AllowAny) {
	SCObject* R = SC_Base_LookUpVar(name_space, Exp->Name, Exp, side);
	if (JB_Object_FastIsa(R, JB_AsClass(SCModule))) {
		SCClass* Cls = ((SCModule*)R)->Cls;
		if ((!Cls)) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[910]);
			return nil;
		}
		if ((!AllowAny)) {
			if (Cls->IsModel) {
				return SC_Class_GetFlyingMemory(Cls, Exp);
			}
			if ((!SC_Class_IsObject(Cls))) {
				FastString* _fsf0 = JB_FS__New();
				JB_FS_AppendString(_fsf0, JB_LUB[911]);
				JB_FS_AppendString(_fsf0, Exp->Name);
				JB_FS_AppendString(_fsf0, JB_LUB[912]);
				JB_Msg_SyntaxExpect(Exp, JB_FS_GetResult(_fsf0));
				return nil;
			}
			if (Cls->IsRole) {
				JB_Msg_SyntaxExpect(Exp, JB_LUB[913]);
				return nil;
			}
		}
	}
	if (JB_Object_FastIsa(R, JB_AsClass(SCDecl))) {
		if (side) {
			(SC_Decl_SyntaxIsSet(((SCDecl*)R), kSC__SCDeclInfo_setto, true));
		}
		JB_Object* O = ((SCDecl*)R)->IsLookupOnly;
		if (JB_Object_Isa(O, JB_AsClass(Message))) {
			JB_Msg_SafeReplaceWith(Exp, JB_Msg_NiceCopy(((Message*)O), Exp));
		}
	}
	return R;
}

SCObject* SC_TypeOfUnit(Message* Exp, SCBase* name_space, Message* side) {
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[584], false)) {
		//using;
		MessagePosition _using161 = JB_Msg_SyntaxUsing(Exp);
		JB_Msg_BecomeStr(Exp, JB_SyxType, JB_LUB[0]);
		JB_Msg_AppendSyx(Exp, JB_SyxThg, JB_LUB[584]);
		JB_MsgPos_SyntaxUsingComplete((&_using161));
		SCDecl* _tmPf0 = JB_Incr(JB_TypeInt64->TypeNormal);
		JB_MsgPos_Destructor((&_using161));
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	double Mul = 0.0f;
	SCDecl* Type = JB_Incr(JB_TypeInt->TypeNormal);
	JB_String* unit = JB_Incr(Exp->Name);
	if ((JB_Str_Equals(unit, JB_LUB[914], false)) or (JB_Str_Equals(unit, JB_LUB[915], false))) {
		Mul = (1 << 10);
	}
	 else if ((JB_Str_Equals(unit, JB_LUB[916], false)) or (JB_Str_Equals(unit, JB_LUB[917], false))) {
		Mul = (1 << 20);
	}
	 else if ((JB_Str_Equals(unit, JB_LUB[918], false)) or (JB_Str_Equals(unit, JB_LUB[919], false))) {
		Mul = (1 << 30);
	}
	 else if ((JB_Str_Equals(unit, JB_LUB[920], false)) or (JB_Str_Equals(unit, JB_LUB[579], false))) {
		Mul = (((int64)1) << ((int64)40));
	}
	 else if (JB_Str_Equals(unit, JB_LUB[921], false)) {
		Mul = 0;
	}
	 else {
		JB_SetRef(Type, JB_TypeDate->TypeNormal);
		if (JB_Str_Equals(unit, JB_LUB[922], false)) {
			Mul = 65536;
		}
		 else if (JB_Str_Equals(unit, JB_LUB[923], false)) {
			Mul = 64;
		}
		 else if (JB_Str_Equals(unit, JB_LUB[111], false)) {
			Mul = (3.1415926535897932f);
			JB_SetRef(Type, JB_Typef64->TypeNormal);
		}
		 else if (JB_Str_Equals(unit, JB_LUB[113], false)) {
			Mul = (6.2831853071795864f);
			JB_SetRef(Type, JB_Typef64->TypeNormal);
		}
		 else if (JB_Msg_unitmatch(Exp, JB_LUB[924], JB_LUB[925])) {
			Mul = (86400.0f * 65536);
		}
		 else if (JB_Msg_unitmatch(Exp, JB_LUB[926], JB_LUB[927])) {
			Mul = (604800.0f * 65536);
		}
		 else if (JB_Msg_unitmatch(Exp, JB_LUB[928], JB_LUB[929])) {
			Mul = (31536000.0f * 65536);
		}
		 else if (JB_Msg_unitmatch(Exp, JB_LUB[930], JB_LUB[931])) {
			Mul = (60 * 65536);
		}
		 else if (JB_Msg_unitmatch(Exp, JB_LUB[932], JB_LUB[933])) {
			Mul = (3600 * 65536);
		}
		 else {
			if ((!false)) {
				JB_Msg_SyntaxExpect(Exp, JB_LUB[934]);
			}
		}
	}
	JB_Decr(unit);
	Message* it = JB_Incr(((Message*)JB_Ring_First(Exp)));
	if (it) {
		JB_String* str = JB_Incr(JB_LUB[0]);
		double val = JB_Msg_Float(it);
		if ((!Mul)) {
			JB_SetRef(str, JB_dbl_Render((1.0f / val), nil, nil));
		}
		 else {
			val = (val * Mul);
			if (JB_TC_IsInt(SC_Decl_TypeInfo(Type))) {
				JB_SetRef(str, JB_int64_Render(((int64)val), nil));
				double big = ((int64)1) << ((int64)31);
				if ((val >= big) or (val < (-big))) {
					JB_SetRef(Type, JB_TypeInt64->TypeNormal);
				}
			}
			 else {
				JB_SetRef(str, JB_dbl_Render(val, nil, nil));
			}
		}
		JB_Msg_BecomeStr(Exp, JB_SyxNum, str);
		JB_Decr(str);
		JB_Tree_Remove(it);
	}
	JB_Decr(it);
	JB_SafeDecr(Type);
	return Type;
}

SCObject* SC_TypeOfURL(Message* Exp, SCBase* name_space, Message* side) {
	if ((!JB_Msg_Expect(Exp, JB_Syxurl, JB_LUB[753]))) {
		return nil;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* _tmPf1 = JB_Incr(SC_Func__GetFileString(Exp, _tmPf0->Name));
	JB_Decr(_tmPf0);
	if (JB_FreeIfDead(_tmPf1)) {
		JB_Decr(_tmPf1);
		return SC_TypeOfExpr(Exp, name_space, nil);
	}
	JB_Decr(_tmPf1);
	return nil;
}

SCDecl* SC_TypeOfVecAccess(Message* index, SCDecl* ty0, int w) {
	if (JB_Msg_EqualsSyx(index, JB_SyxNum, false)) {
		if ((!(JB_int64_OperatorInRange(JB_Msg_Int(index, 0), w)))) {
			JB_Msg_SyntaxExpect(index, JB_LUB[906]);
			return nil;
		}
	}
	if (JB_TC_IsFloat(ty0->Type->TypeInfo)) {
		return SC_Class_NotConst(JB_Typefloat);
	}
	return SC_Class_NotConst(JB_TypeInt);
}

int SC_UniqueNum() {
	return (++SC__SC_UniqueNum);
}

JB_String* SC_UniqueTmpVar(SCBase* base, JB_String* name) {
	FastString* fs = JB_Incr(JB_FS__New());
	JB_FS_AppendByte(fs, '_');
	JB_FS_AppendString(fs, name);
	if (base) {
		SCFunction* FN = JB_Incr(SC_Base_OwningFunc(base));
		if (FN) {
			JB_FS_AppendByte(fs, 'f');
			JB_FS_AppendInt32(fs, ((int)FN->TmpCounter++));
		}
		JB_Decr(FN);
	}
	 else {
		JB_FS_AppendInt32(fs, SC__SC_UniqueNum++);
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

int SC_UseCustomOperators(SCDecl* LC, SCDecl* RC, SCOperator* Comp, Message* ErrPlace) {
	if (Comp->IsCustom or Comp->IsCaseAware) {
		return kSC__CustomOps_Needed;
	}
	bool CompOrSet = (Comp->IsCompare or Comp->IsSet);
	DataTypeCode LNT = SC_Decl_TypeInfo(LC);
	DataTypeCode RNT = SC_Decl_TypeInfo(RC);
	int LN = JB_TC_NumericCountBoolsToo(LNT);
	int RN = JB_TC_NumericCountBoolsToo(RNT);
	if ((!(((bool)LN) and (LN == RN)))) {
		if (((bool)LN) and (((bool)RN) and ((LN == 1) or (RN == 1)))) {
			if (CompOrSet) {
				return kSC__CustomOps_Needed;
			}
			if ((!(JB_TC_SameBasicType(LNT, RNT)))) {
				JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[935]);
				return nil;
			}
			if (LN > RN) {
				return kSC__CustomOps_LeftOnlyIsVector;
			}
			 else {
				return kSC__CustomOps_RightOnlyIsVector;
			}
		}
		return kSC__CustomOps_Needed;
	}
	int extra = 0;
	if (((bool)LN) and ((bool)RN)) {
		bool GotABool = ((kJB__TC_bool == LNT) or (kJB__TC_bool == RNT));
		if (LNT != RNT) {
			if (GotABool and Comp->IsCompare) {
				JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[936]);
				return nil;
			}
			if ((!CompOrSet) and (!Comp->DoesntNeedExtraBits)) {
				extra = kSC__CustomOps_TypeCastToBigger;
			}
		}
		 else if (GotABool and (!Comp->IsBoolable)) {
			extra = kSC__CustomOps_TypeCastFromBool;
		}
	}
	if ((!SC__Base_ConstantsLoadingOverride) and LC->Type->TreatAsBaseType) {
		return kSC__CustomOps_Needed | extra;
	}
	if ((LN > 1) and CompOrSet) {
		return kSC__CustomOps_Needed | extra;
	}
	if ((!extra)) {
		SCClass* t = LC->Type;
		if (((bool)t->Super) and SC_Class_HasOperator(t, Comp->FuncName)) {
			return kSC__CustomOps_Needed;
		}
	}
	return extra;
}

SCClass* SC_VecType(bool isfloat, int count) {
	if (isfloat) {
		if (count == 2) {
			return JB_TypeVec2;
		}
		if (count == 3) {
			return JB_TypeVec3;
		}
		if (count == 4) {
			return JB_TypeVec4;
		}
		if (count == 1) {
			return JB_Typefloat;
		}
	}
	if (count == 2) {
		return JB_TypeiVec2;
	}
	if (count == 3) {
		return JB_TypeiVec3;
	}
	if (count == 4) {
		return JB_TypeiVec4;
	}
	if (count == 1) {
		return JB_TypeInt;
	}
	return nil;
}

void JB_ZalgoLine(JB_String* data) {
	JB_PrintLine(data);
}







int JB_bool_OperatorSign(bool self, int i) {
	return JB_Ternary(self, i, (-i));
}

JB_String* JB_bool_Render0(bool self) {
	return ((JB_String*)JB_Ternary(self, JB_LUB[107], JB_LUB[108]));
}


bool JB_byte_CanPrintAsNormalChar(byte self) {
	return ((self < 127) and (self >= 32));
}

bool JB_byte_In(byte self, uint a, uint b) {
	return (self >= a) and (self <= b);
}

bool JB_byte_IsHex(byte self) {
	return JB_byte_IsInt(self) or (JB_byte_In(self, 'a', 'f') or JB_byte_In(self, 'A', 'F'));
}

bool JB_byte_IsInt(byte self) {
	return JB_byte_In(self, '0', '9');
}

bool JB_byte_IsLetter(byte self) {
	return JB_CP_IsLetter(((Codepoint)self));
}

bool JB_byte_IsLower(byte self) {
	return JB_CP_IsLower(((Codepoint)self));
}

bool JB_byte_IsUpper(byte self) {
	return JB_CP_IsUpper(((Codepoint)self));
}

bool JB_byte_IsWhite(byte self) {
	return JB_CP_IsWhite(((Codepoint)self));
}

byte JB_byte_LowerCase(byte self) {
	if (JB_byte_IsUpper(self)) {
		return self + 32;
	}
	return self;
}

JB_String* JB_byte_Render(byte self, FastString* fs_in) {
	if ((!fs_in)) {
		return JB_Str__SyntaxAccess(self);
	}
	JB_FS_AppendByte(fs_in, ((byte)self));
	return nil;
}

byte JB_byte_UpperCase(byte self) {
	if (JB_byte_IsLower(self)) {
		return self - 32;
	}
	return self;
}





JB_String* JB_ErrorSeverity_Render(ErrorSeverity self, FastString* fs_in) {
	if (self < kJB__ErrorSeverity_MaxError) {
		if ((!(JB_Array_SyntaxCast(JB__ErrorSeverity_names)))) {
			JB_SetRef(JB__ErrorSeverity_names, JB_Str_Words(JB_LUB[937]));
		}
		JB_String* name = JB_Incr(((JB_String*)JB_Array_Value(JB__ErrorSeverity_names, ((int)self))));
		if ((!fs_in)) {
			JB_SafeDecr(name);
			return name;
		}
		JB_FS_AppendString(fs_in, name);
		JB_Decr(name);
	}
	return JB_LUB[0];
}

bool JB_ErrorSeverity_SyntaxIs(ErrorSeverity self, ErrorSeverity e) {
	return self == e;
}

int JB_ErrorSeverity__Init_() {
	{
		JB_SetRef(JB__ErrorSeverity_names, JB_Array__New0());
	}
	;
	return 0;
}

int JB_ErrorSeverity__InitCode_() {
	return 0;
}


JB_String* JB_dbl_Render(double self, JB_String* fmt, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendDoubleAsText(fs, self, JB_Str_Address(fmt));
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}


JB_String* JB_f_pc(float self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	if ((!self)) {
		JB_FS_AppendByte(fs, '0');
	}
	 else {
		self = (floorf((self * 1000)) / 10);
		if ((!self)) {
			JB_FS_AppendString(fs, JB_LUB[938]);
		}
		 else {
			JB_FS_AppendFloatAsText(fs, self);
		}
	}
	JB_FS_AppendByte(fs, '%');
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

float JB_f_powow(float self, int n) {
	float rz = 0;
	//visible;
	rz = self;
	{
		int _Valuef1 = 0;
		while (_Valuef1 < n) {
			rz = (rz * rz);
			_Valuef1++;
		};
	}
	;
	return rz;
}



int JB_int___junktest_8__(int self, int Inaaaadex, bool Create) {
	//visible;
	int doubleJunk2 = 0;
	{
		int _Valuef2 = 0;
		while (_Valuef2 < 0) {
			int _tmPf0 = JB_int___junktest_8__(1, 0, false);
			if ((!_tmPf0)) {
				break;
			}
			doubleJunk2 = _tmPf0;
			_Valuef2++;
		};
	}
	;
	return 0;
}

int JB_int_bits(int self) {
	return (1 << self) - 1;
}

bool JB_int_IsNormalMatch(int self) {
	return ((self == kSC_SimpleMatch) or ((self == kSC_NumericMatch) or (self == kSC_SuperClassMatch)));
}

bool JB_int_IsSimpleOrPointerCast(int self) {
	return (self == kSC_SimpleMatch) or ((self == kSC_NumericMatch) or (self == kSC_NeedsAddressOf));
}

int JB_int_OperatorAlign(int self, int To) {
	int Missing = (self % To);
	if (Missing) {
		return self + (To - Missing);
	}
	return self;
}

bool JB_int_OperatorIsa(int self, uint n) {
	return (!(((bool)(self % n))));
}

int JB_int_OperatorMax(int self, int other) {
	if (self > other) {
		return self;
	}
	return other;
}

int JB_int_OperatorMin(int self, int other) {
	if (self < other) {
		return self;
	}
	return other;
}

JB_String* JB_int_operatorpc(int self, int x) {
	return JB_f_pc((((float)self) / ((float)x)), nil);
}

IntRange JB_int_OperatorTo(int self, int other) {
	return ((IntRange)ivec2{self, other + 1});
}

AsmReg JB_int_Reg(int self) {
	AsmReg rz = ((AsmReg){});
	rz.AType = kJB__TC_int64;
	rz.Reg = self;
	return rz;
}

JB_String* JB_int_RenderFS(int self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendInt32(fs, self);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_int_RenderSize(int self, FastString* fs_in) {
	return JB_int64_strsize(((int64)self), fs_in);
}

bool JB_int_SyntaxAccess(int self, int bit) {
	return ((bool)(self & (1 << bit)));
}

int JB_int_SyntaxAccessSet(int self, int bit, bool Value) {
	int mask = 1 << bit;
	return (self & (~mask)) | (Value << bit);
}

int JB_int__max() {
	return 2147483647;
}

int JB_int__min() {
	return 2147483648;
}



int64 JB_int64_abs(int64 self) {
	return ((int64)JB_Ternary(self < 0, (-self), self));
}

double JB_int64_AsFloat(int64 self) {
	int64* Addr = (&self);
	double* Addr2 = ((double*)Addr);
	return Addr2[0];
}

int64 JB_int64_OperatorMax(int64 self, int64 d) {
	if (d > self) {
		return d;
	}
	return self;
}

JB_String* JB_int64_Render(int64 self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendInt64(fs, self);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_int64_RenderSizePart(int64 self, FastString* fs, int Size, JB_String* Suff) {
	int64 MB = self / Size;
	JB_FS_AppendInt64(fs, MB);
	int64 Extra = (((self + ((int64)(Size * 0.05f))) - (MB * Size)) * 10) / (Size);
	if (Extra) {
		JB_FS_AppendByte(fs, '.');
		JB_FS_AppendInt64(fs, Extra);
	}
	JB_FS_AppendString(fs, Suff);
}

JB_String* JB_int64_strsize(int64 self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	if (self <= 512) {
		JB_FS_AppendInt64(fs, self);
	}
	 else if (self <= 921600) {
		JB_int64_RenderSizePart(self, fs, 1024, JB_LUB[914]);
	}
	 else if (self < 943718400) {
		JB_int64_RenderSizePart(self, fs, 1048576, JB_LUB[916]);
	}
	 else if (self < 966367641600) {
		JB_int64_RenderSizePart(self, fs, 1073741824, JB_LUB[918]);
	}
	 else {
		JB_int64_RenderSizePart(self, fs, 1099511627776, JB_LUB[920]);
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}





ivec4 JB_ivec4___junktest_4__Set(ivec4 self, int Value) {
	self[2] = (Value + self[0]);
	return self;
}





bool SC_SCBaseType_SyntaxIs(SCBaseType self, SCBaseType d) {
	return self == d;
}



void JB_Syx_ExportAddrSet(Syntax self, fpMsgRender Value) {
	JB_Syx_Obj(self)->ExportAddr = Value;
}

fpMsgRender JB_Syx_ExportAddr(Syntax self) {
	return JB_Syx_Obj(self)->ExportAddr;
}

bool JB_Syx_ListViewable(Syntax self) {
	return (self >= JB_SyxThg) and (self <= JB_SyxEmb);
}

JB_String* JB_Syx_LongName(Syntax self) {
	if ((!self)) {
		return JB_LUB[939];
	}
	return JB_Syx_Obj(self)->LongName;
}

Message* JB_Syx_Msg(Syntax self, JB_String* name) {
	return JB_Msg__NewRange(nil, self, JB__Tk_UsingPos, name, JB_Str_Length(name));
}

Message* JB_Syx_ParentMsg(Syntax self, Message* parent, JB_String* name) {
	return JB_Msg__NewRange(parent, self, JB__Tk_UsingPos, name, JB_Str_Length(name));
}

Message* JB_Syx_IntMsg(Syntax self, int64 name) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(name, nil));
	Message* _tmPf1 = JB_Incr(JB_Syx_Msg(self, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Syx_Name(Syntax self) {
	if ((!self)) {
		return JB_LUB[939];
	}
	return JB_Syx_Obj(self)->Name;
}

SyntaxObj* JB_Syx_Obj(Syntax self) {
	return JB__FuncArray_[((int)self)];
}

Message* JB_Syx_OperatorPlus(Syntax self, JB_String* m) {
	return JB_Syx_Msg(self, m);
}

Message* JB_Syx_PlusNum(Syntax self, int m) {
	return JB_Syx_Msg(self, JB_int_RenderFS(m, nil));
}

fpMsgRender JB_Syx_RenderAddr(Syntax self) {
	return JB_Syx_Obj(self)->RenderAddr;
}

bool JB_Syx_Translateable(Syntax self) {
	return (self >= JB_SyxThg) and (self <= JB_SyxName);
}

int JB_Syx__Init_() {
	{
		JB__Syx_CurrFuncID = 0;
		JB__Syx_MaxFuncID = 0;
	}
	;
	return 0;
}

int JB_Syx__InitCode_() {
	return 0;
}

Syntax JB_Syx__StdNew(fpMsgRender msg, JB_String* name, JB_String* LongName) {
	int ID = JB__Syx_CurrFuncID++;
	SyntaxObj* result = JB_Incr(JB_Fn__New(msg, name, ID));
	JB__Syx_MaxFuncID = ID;
	(JB_Dict_ValueSet(JB__SyxDict_, name, result));
	JB_SetRef(JB__FuncArray_[ID], result);
	if (JB_Str_Exists(LongName)) {
		(JB_Dict_ValueSet(JB__SyxDict_, LongName, result));
		JB_SetRef(result->LongName, LongName);
	}
	 else {
		JB_SetRef(result->LongName, name);
	}
	JB_Decr(result);
	return ((Syntax)ID);
}




uint64 JB_uint64_LowestBit(uint64 self) {
	return self & (-self);
}





uint SC_xC2xB5Param_BitSize(ASMParam self) {
	return self & 31;
}

bool SC_xC2xB5Param_IsNumber(ASMParam self) {
	return ((bool)(self & 64));
}

bool SC_xC2xB5Param_IsReg(ASMParam self) {
	return (!SC_xC2xB5Param_IsNumber(self));
}



bool JB_CP_In(Codepoint self, int a, int b) {
	return ((Codepoint)(self - a)) <= ((Codepoint)(b - a));
}

bool JB_CP_IsHigher(Codepoint self) {
	return JB_CP_In(self, 128, 1114111);
}

bool JB_CP_IsLetter(Codepoint self) {
	return JB_CP_IsUpper(self) or (JB_CP_IsLower(self) or JB_CP_IsHigher(self));
}

bool JB_CP_IsLower(Codepoint self) {
	return JB_CP_In(self, 'a', 'z');
}

bool JB_CP_IsUpper(Codepoint self) {
	return JB_CP_In(self, 'A', 'Z');
}

bool JB_CP_IsWhite(Codepoint self) {
	return (self == ' ') or ((self == '\n') or ((self == '\x0D') or (self == '\t')));
}





int JB_TC__Shift(DataTypeCode self) {
	return (self >> 4) & 3;
}

SCClass* JB_TC_better_numeric_sub(DataTypeCode self, DataTypeCode t) {
	int bits = JB_int_OperatorMax(JB_TC_ItemBitCount(self), JB_TC_ItemBitCount(t));
	if (JB_TC_IsFloat(self) or JB_TC_IsFloat(t)) {
		if (bits > 32) {
			return JB_Typef64;
		}
		if (bits > 16) {
			return JB_Typefloat;
		}
		return JB_Typehfloat;
	}
	bool Signed = JB_TC_IsSigned(self) or JB_TC_IsSigned(t);
	if (bits > 32) {
		return ((SCClass*)JB_Ternary(Signed, JB_TypeInt64, JB_TypeuInt64));
	}
	if (bits > 16) {
		return ((SCClass*)JB_Ternary(Signed, JB_TypeInt, JB_TypeuInt));
	}
	if (bits > 8) {
		return ((SCClass*)JB_Ternary(Signed, JB_TypeInt16, JB_TypeuInt16));
	}
	return JB_TypeByte;
}

int JB_TC_ByteSize(DataTypeCode self) {
	return JB_TC_Count(self) << JB_TC__Shift(self);
}

int JB_TC_Count(DataTypeCode self) {
	return (self & 3) + 1;
}

SCClass* JB_TC_CreateSignedStuff(DataTypeCode self) {
	DataTypeCode s = JB_TC_SetSigned(self, (!JB_TC_IsSigned(self)));
	{
		Dictionary* _LoopSrcf1 = JB_TC__Types();
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf1);
		while (JB_Nav_MoveNext(_navf0)) {
			JB_String* key = JB_Nav_Name(_navf0);
			DataTypeCode c = ((DataTypeCode)JB_Wrap_Value(((DTWrap*)JB_Nav_Value(_navf0))));
			if (c == s) {
				SCObject* M = ((SCObject*)JB_Dict_ValueStr(SC__Comp_program->Access, key));
				if (JB_Object_FastIsa(M, JB_AsClass(SCModule))) {
					return ((SCModule*)M)->Cls;
				}
			}
		};
	}
	;
	return nil;
}

bool JB_TC_ExistsButBadlyNamedOrDesigned(DataTypeCode self) {
	return (((bool)JB_TC__Shift(self)) or (!JB_TC_IsFloat(self)));
}

int JB_TC_FloatIntMerge(DataTypeCode self, int old, Message* s) {
	if (JB_TC_IsFloat(self)) {
		old = (old | 2);
	}
	 else if (JB_TC_IsInt(self)) {
		old = (old | 1);
	}
	if ((!(old != 3))) {
		JB_Msg_SyntaxExpect(s, JB_LUB[940]);
		return nil;
	}
	return old;
}

bool JB_TC_IsFloat(DataTypeCode self) {
	return ((bool)((self >> 7) & 1));
}

bool JB_TC_IsInt(DataTypeCode self) {
	return (!JB_TC_IsFloat(self));
}

bool JB_TC_IsSigned(DataTypeCode self) {
	return ((bool)((self >> 6) & 1));
}

int JB_TC_ItemBitCount(DataTypeCode self) {
	return 8 << JB_TC__Shift(self);
}

int JB_TC_NumericCount(DataTypeCode self) {
	if (((bool)(self & 8))) {
		return JB_TC_Count(self);
	}
	return 0;
}

int JB_TC_NumericCountBoolsToo(DataTypeCode self) {
	if (((bool)(self & 8))) {
		return JB_TC_Count(self);
	}
	if ((!self)) {
		return 1;
	}
	return 0;
}

bool JB_TC_SameBasicType(DataTypeCode self, DataTypeCode b) {
	return (JB_TC_IsFloat(self) == JB_TC_IsFloat(b));
}

DataTypeCode JB_TC_SetSigned(DataTypeCode self, bool b) {
	if (b) {
		return (self) | (1 << 6);
	}
	 else {
		return (self) & (~(1 << 6));
	}
	return kJB__TC_UnusedType;
}

bool JB_TC_SyntaxIsnt(DataTypeCode self, DataTypeCode M) {
	return self != M;
}

Dictionary* JB_TC__Types() {
	//visible;
	if ((!(JB__TC_Types_Dict))) {
		JB_SetRef(JB__TC_Types_Dict, JB_Dict__New());
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[941], kJB__TC_sign);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[942], kJB__TC_u8);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[710], kJB__TC_char);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[943], kJB__TC_Byte2);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[944], kJB__TC_Byte3);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[945], kJB__TC_Byte4);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[946], kJB__TC_SByte);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[947], kJB__TC_SByte2);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[948], kJB__TC_SByte3);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[949], kJB__TC_SByte4);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[120], kJB__TC_uint16);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[117], kJB__TC_int16);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[950], kJB__TC_s16x2);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[951], kJB__TC_s16x3);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[952], kJB__TC_s16x4);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[118], kJB__TC_int64);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[121], kJB__TC_uint64);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[132], kJB__TC_iVec2);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[133], kJB__TC_iVec3);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[134], kJB__TC_iVec4);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[124], kJB__TC_HFloat);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[123], kJB__TC_Float);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[953], kJB__TC_Double);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[129], kJB__TC_Vec2);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[130], kJB__TC_Vec3);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[131], kJB__TC_Vec4);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[116], kJB__TC_Int);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[119], kJB__TC_UInt);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[125], kJB__TC_bool);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[954], kJB__TC_u32);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[955], kJB__TC_s64);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[956], kJB__TC_u64);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[122], kJB__TC_f64);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[957], kJB__TC_f16);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[958], kJB__TC_s8);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[127], kJB__TC_byte);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[959], kJB__TC_int8);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[960], kJB__TC_uint8);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[961], kJB__TC_u16);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[962], kJB__TC_s16);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[963], kJB__TC_atomic_int64);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[964], kJB__TC_atomic_uint64);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[965], kJB__TC_atomic_int);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[966], kJB__TC_atomic_uint);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[967], kJB__TC_atomic_byte);
		JB_Dict_SetValue(JB__TC_Types_Dict, JB_LUB[968], kJB__TC_UnusedType);
	}
	return JB__TC_Types_Dict;
}


Date JB_Date_ago(Date self) {
	if (self) {
		return JB_Date__Now() - self;
	}
	return 0;
}

int JB_Date_DayOfWeek(Date self) {
	return JB_Date_Days(self) % 7;
}

int64 JB_Date_Days(Date self) {
	return (JB_Date_WholeSeconds(self) / kJB__Date_SecondsPerDay);
}

JB_String* JB_Date_Render(Date self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendIntegerAsText(fs, self, 1);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Date_RenderDurr(Date self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendDurr(fs, self);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

double JB_Date_Seconds(Date self) {
	return ((double)self) / 65536;
}

int64 JB_Date_WholeSeconds(Date self) {
	return self >> kJB__Date_TickBits;
}

Date JB_Date__New0() {
	return JB_Date__Now();
}





bool JB_Rg_Contains1(IntRange self, int i) {
	return (i >= self[0]) and (i < self[1]);
}

int JB_Rg_Width(IntRange self) {
	return self[1] - self[0];
}





SCDeclInfo SC_SCDeclInfo_Set(SCDeclInfo self, SCDeclInfo d, bool b) {
	if (b) {
		return self | d;
	}
	return self & (~d);
}



ASM SC_ASM_BFLD_downSet(ASM self, uint Value) {
	return self | ((Value << 26) >> 23);
}

ASM SC_ASM_BFLD_signSet(ASM self, uint Value) {
	return self | ((Value << 29) >> 29);
}

ASM SC_ASM_BFLD_upSet(ASM self, uint Value) {
	return self | ((Value << 26) >> 17);
}

ASM SC_ASM_Bra_c1Set(ASM self, uint Value) {
	return self | ((Value << 30) >> 12);
}

ASM SC_ASM_Bra_jmpSet(ASM self, uint Value) {
	return self | ((Value << 14) >> 14);
}

ASM SC_ASM_Cmp_CmpSet(ASM self, uint Value) {
	return self | ((Value << 28) >> 17);
}

ASM SC_ASM_Cmp_LSet(ASM self, uint Value) {
	return self | ((Value << 21) >> 21);
}

ASM SC_ASM_CmpEq_bytesSet(ASM self, uint Value) {
	return self | ((Value << 30) >> 17);
}

ASM SC_ASM_CmpEq_JmpSet(ASM self, uint Value) {
	return self | ((Value << 19) >> 19);
}

ASM SC_ASM_CNTC_cnstSet(ASM self, uint Value) {
	return self | ((Value << 24) >> 12);
}

ASM SC_ASM_CNTC_LSet(ASM self, uint Value) {
	return self | ((Value << 22) >> 22);
}

ASM SC_ASM_CNTC_sizeSet(ASM self, uint Value) {
	return self | ((Value << 30) >> 20);
}

ASM SC_ASM_CNTR_incrSet(ASM self, uint Value) {
	return self | ((Value << 29) >> 17);
}

ASM SC_ASM_CNTR_LSet(ASM self, uint Value) {
	return self | ((Value << 22) >> 22);
}

ASM SC_ASM_CNTR_sizeSet(ASM self, uint Value) {
	return self | ((Value << 30) >> 20);
}

ASM SC_ASM_Const_LSet(ASM self, uint Value) {
	return self | ((Value << 18) >> 18);
}

ASM SC_ASM_Const_rotSet(ASM self, uint Value) {
	return self | ((Value << 26) >> 12);
}

ASM SC_ASM_Func_JUMPSet(ASM self, uint Value) {
	return self | ((Value << 9) >> 9);
}

ASM SC_ASM_Func_ModeSet(ASM self, uint Value) {
	return self | ((Value << 30) >> 7);
}

ASM SC_ASM_Mem_incrSet(ASM self, uint Value) {
	return self | ((Value << 30) >> 17);
}

ASM SC_ASM_Mem_LSet(ASM self, uint Value) {
	return self | ((Value << 19) >> 19);
}

void ASMPrint(ASM self) {
	//visible;
}

ASM SC_ASM_r1Set(ASM self, uint Value) {
	return self | ((Value << 27) >> 7);
}

ASM SC_ASM_r2Set(ASM self, uint Value) {
	return self | ((Value << 27) >> 12);
}

ASM SC_ASM_r3Set(ASM self, uint Value) {
	return self | ((Value << 27) >> 17);
}

ASM SC_ASM_r4Set(ASM self, uint Value) {
	return self | ((Value << 27) >> 22);
}

ASM SC_ASM_Setn_CondSet(ASM self, uint Value) {
	return self | ((Value << 30) >> 14);
}

ASM SC_ASM_Setn_DestSet(ASM self, uint Value) {
	return self | ((Value << 27) >> 9);
}

ASM SC_ASM_Setn_LSet(ASM self, uint Value) {
	return self | ((Value << 16) >> 16);
}

ASM SC_ASM_Setn_lenSet(ASM self, uint Value) {
	return self | ((Value << 30) >> 7);
}

ASM SC_ASM_SWAP_ASet(ASM self, uint Value) {
	return self | ((Value << 26) >> 7);
}

ASM SC_ASM_SWAP_BSet(ASM self, uint Value) {
	return self | ((Value << 26) >> 13);
}

ASM SC_ASM_SWAP_CSet(ASM self, uint Value) {
	return self | ((Value << 26) >> 19);
}

ASM SC_ASM_SWAP_DSet(ASM self, uint Value) {
	return self | ((Value << 26) >> 25);
}

ASM SC_ASM_SWAP_LSet(ASM self, uint Value) {
	return self | ((Value << 31) >> 31);
}

ASM SC_ASM_U0_LSet(ASM self, uint Value) {
	return self | ((Value << 7) >> 7);
}

ASM SC_ASM_U1_LSet(ASM self, uint Value) {
	return self | ((Value << 12) >> 12);
}

ASM SC_ASM_U2_LSet(ASM self, uint Value) {
	return self | ((Value << 17) >> 17);
}

ASM SC_ASM_U3_LSet(ASM self, uint Value) {
	return self | ((Value << 22) >> 22);
}

ASM SC_ASM_U4_LSet(ASM self, uint Value) {
	return self | ((Value << 27) >> 27);
}

JB_File* SC_ASM__AsmFile() {
	return SC_Comp__InputFile(nil, JB_LUB[969], nil);
}

void SC_ASM__CreateASMProperties() {
	if ((!SC__Options_SelfReplacement)) {
		return;
	}
	SC_Instruction_Const(SC__Instruction_SET1);
	SC_Instruction_Const(SC__Instruction_SETK);
	SC_Instruction_Const(SC__Instruction_SETN);
}

void SC_ASM__Enc1() {
	ASM2 R = ((ASM2){});
	R.Op = kSC__ASM_DSUB;
	R.r[0] = 3;
	R.r[1] = 2;
	R.r[2] = 1;
	R.Rest = 0;
	ASM oof = SC_ASM2_Encode((&R));
}

int SC_ASM__Init_() {
	{
		SC__ASM_NoisyASM = 1;
	}
	;
	return 0;
}

int SC_ASM__InitCode_() {
	return 0;
}

JB_File* SC_ASM__InstructionList(JB_String* ch) {
	JB_File* _tmPf0 = JB_Incr(SC_Ext__CppLib());
	JB_File* _tmPf1 = JB_Incr(JB_File_SyntaxAccess(_tmPf0, ch, false));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_ASM__ListInstructions() {
	FastString* fs = JB_Incr(JB_FS__New());
	JB_FS_AppendString(fs, JB_LUB[970]);
	{
		int _LoopSrcf2 = SC__Instruction_TypeListSize;
		int opcode = 0;
		while (opcode < _LoopSrcf2) {
			Instruction* inst = SC__Instruction_TypeList[opcode];
			//;
			JB_FS_AppendByte(fs, '\t');
			JB_FS_AppendInt32(fs, opcode);
			JB_FS_AppendString(fs, JB_LUB[971]);
			JB_FS_AppendString(fs, inst->Name);
			JB_FS_AppendByte(fs, '\n');
			//;
			opcode++;
		};
	}
	;
	JB_Obj_PrintLine(fs);
	JB_Decr(fs);
}

bool SC_ASM__Needed() {
	SCBase* fn = JB_Incr(((SCBase*)JB_Dict_ValueStr(SC__Comp_ExportNames, JB_LUB[972])));
	if (fn) {
		SCBase* _tmPf0 = JB_Incr(fn->CurrReacher);
		JB_Decr(fn);
		JB_SafeDecr(_tmPf0);
		return ((bool)_tmPf0);
	}
	JB_Decr(fn);
	return false;
}

void SC_ASM__SelfTest(Message* tests) {
	if (JB_Arg_SyntaxCast(JB_App__ArgValue(JB_LUB[166]))) {
		return;
	}
	if (true) {
		SC_ASM__Enc1();
	}
}

void SC_ASM__TestASM() {
	SC_Flatten__InitAsm();
	if (SC__ASM_NoisyASM >= 3) {
		SC_ASM__ListInstructions();
	}
	JB_File* _tmPf1 = JB_Incr(SC_ASM__AsmFile());
	Message* _tmPf0 = JB_Incr(JB_File_Parse(_tmPf1, 16777216, false));
	JB_Decr(_tmPf1);
	Message* T = JB_Incr(JB_Msg_NeedSyxName(_tmPf0, JB_SyxTmp, JB_LUB[973]));
	if (T) {
		SC_ASM__SelfTest(T);
	}
	JB_Decr(T);
	JB_Decr(_tmPf0);
}


ASM JB_ASM_BFLD__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_r1Set(rz, self->r[0]);
	rz = SC_ASM_r2Set(rz, self->r[1]);
	rz = SC_ASM_BFLD_upSet(rz, self->r[2]);
	rz = SC_ASM_BFLD_downSet(rz, self->r[3]);
	rz = SC_ASM_BFLD_signSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_Bra__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_r1Set(rz, self->r[0]);
	rz = SC_ASM_Bra_c1Set(rz, self->r[1]);
	rz = SC_ASM_Bra_jmpSet(rz, self->r[2]);
	return rz;
}


ASM JB_ASM_Cmp__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_r1Set(rz, self->r[0]);
	rz = SC_ASM_r2Set(rz, self->r[1]);
	rz = SC_ASM_Cmp_CmpSet(rz, self->r[2]);
	rz = SC_ASM_Cmp_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_CmpEq__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_r1Set(rz, self->r[0]);
	rz = SC_ASM_r2Set(rz, self->r[1]);
	rz = SC_ASM_CmpEq_bytesSet(rz, self->r[2]);
	rz = SC_ASM_CmpEq_JmpSet(rz, self->r[3]);
	return rz;
}


ASM JB_ASM_CNTC__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_r1Set(rz, self->r[0]);
	rz = SC_ASM_CNTC_cnstSet(rz, self->r[1]);
	rz = SC_ASM_CNTC_sizeSet(rz, self->r[2]);
	rz = SC_ASM_CNTC_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_CNTR__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_r1Set(rz, self->r[0]);
	rz = SC_ASM_r2Set(rz, self->r[1]);
	rz = SC_ASM_CNTR_incrSet(rz, self->r[2]);
	rz = SC_ASM_CNTR_sizeSet(rz, self->r[3]);
	rz = SC_ASM_CNTR_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_Const__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_r1Set(rz, self->r[0]);
	rz = SC_ASM_Const_rotSet(rz, self->r[1]);
	rz = SC_ASM_Const_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_Func__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_Func_ModeSet(rz, self->r[0]);
	rz = SC_ASM_Func_JUMPSet(rz, self->r[1]);
	return rz;
}


ASM JB_ASM_Mem__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_r1Set(rz, self->r[0]);
	rz = SC_ASM_r2Set(rz, self->r[1]);
	rz = SC_ASM_Mem_incrSet(rz, self->r[2]);
	rz = SC_ASM_Mem_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_Setn__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_Setn_lenSet(rz, self->r[0]);
	rz = SC_ASM_Setn_DestSet(rz, self->r[1]);
	rz = SC_ASM_Setn_CondSet(rz, self->r[2]);
	rz = SC_ASM_Setn_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_SWAP__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_SWAP_ASet(rz, self->r[0]);
	rz = SC_ASM_SWAP_BSet(rz, self->r[1]);
	rz = SC_ASM_SWAP_CSet(rz, self->r[2]);
	rz = SC_ASM_SWAP_DSet(rz, self->r[3]);
	rz = SC_ASM_SWAP_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_U0__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_U0_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_U1__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_r1Set(rz, self->r[0]);
	rz = SC_ASM_U1_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_U2__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_r1Set(rz, self->r[0]);
	rz = SC_ASM_r2Set(rz, self->r[1]);
	rz = SC_ASM_U2_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_U3__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_r1Set(rz, self->r[0]);
	rz = SC_ASM_r2Set(rz, self->r[1]);
	rz = SC_ASM_r3Set(rz, self->r[2]);
	rz = SC_ASM_U3_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_U4__Encode(ASM2* self) {
	ASM rz = 0;
	rz = (self->Op << 25);
	rz = SC_ASM_r1Set(rz, self->r[0]);
	rz = SC_ASM_r2Set(rz, self->r[1]);
	rz = SC_ASM_r3Set(rz, self->r[2]);
	rz = SC_ASM_r4Set(rz, self->r[3]);
	rz = SC_ASM_U4_LSet(rz, self->Rest);
	return rz;
}









AsmReg SC_fn_asm__default(ASMFuncState* self, Message* exp, AsmReg Reg) {
	return ((AsmReg){});
}

void SC_fn_asm__inittable() {
	if (JB_fn_asm_table[0]) {
		return;
	}
	{
		int i = 0;
		while (i < 64) {
			if ((!(JB_fn_asm_table[i]))) {
				JB_fn_asm_table[i] = (&SC_fn_asm__default);
			}
			i++;
		};
	};
}






















void SC_ArgArrayCounter_check(ArgArrayCounter* self, Message* exp) {
	if (self->IsItem and self->IsNotItem) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(exp, JB_LUB[974]);
		}
	}
}

Message* SC_ArgArrayCounter_Do(ArgArrayCounter* self, JB_String* name, Message* item, SCBase* name_space) {
	Message* acc = (JB_Syx_Msg(JB_SyxAcc, JB_LUB[0]));
	JB_Tree_SyntaxAppend(acc, (JB_Syx_Msg(JB_SyxThg, name)));
	Message* arr = JB_Msg_Msg(acc, JB_SyxArr, JB_LUB[0]);
	Message* value = item;
	if (JB_Msg_EqualsSyx(value, JB_SyxItem, false)) {
		self->IsItem = true;
		Message* key = ((Message*)JB_Ring_First(item));
		int64 v = 0;
		bool _tmPf0 = JB_Msg_ConstIntValue(key, name_space, (&v));
		if ((!_tmPf0)) {
			JB_Msg_SyntaxExpect(item, JB_LUB[975]);
		}
		if (_tmPf0) {
			self->max = JB_int_OperatorMax(self->max, v);
		}
		JB_Tree_SyntaxAppend(arr, key);
		value = ((Message*)JB_Ring_First(item));
	}
	 else {
		self->IsNotItem = true;
		JB_Msg_AppendNum(arr, (self->i)++);
		self->max = self->i;
	}
	return SC_NewRel(acc, JB_LUB[541], value);
}



void SC_asdas2_hhh(asdas2* self) {
	//visible;
	asdas* jjj = (&self->www);
}


ASM SC_ASM2_Encode(ASM2* self) {
	return (SC__ASM_Encoders[self->Op])(self);
}

void SC_ASM2_fs(ASM2* self, FastString* fs) {
	Instruction* op = SC__Instruction_TypeList[self->Op];
	JB_FS_AppendString(fs, op->Name);
	JB_FS_AppendByte(fs, ':');
	JB_FS_AppendMultiByte(fs, ' ', 5 - JB_Str_Length(op->Name));
	JB_String* gotany = JB_LUB[0];
	int remain = 25;
	xC2xB5Form* f = op->Sizes;
	{
		int i = 0;
		while (i < 5) {
			uint bs = SC_xC2xB5Param_BitSize(SC_xC2xB5Form_AccessInt(f, i));
			if ((remain > 0) and (remain > bs)) {
				JB_FS_AppendString(fs, gotany);
				gotany = JB_LUB[164];
				if (SC_xC2xB5Param_IsReg(SC_xC2xB5Form_AccessInt(f, i))) {
					JB_FS_AppendByte(fs, 'r');
				}
				if (i >= 4) {
					JB_FS_AppendInt32(fs, self->Rest);
				}
				 else {
					JB_FS_AppendByte(fs, self->r[i]);
				}
				remain = (remain + bs);
			}
			i++;
		};
	};
}

bool SC_ASM2_OperatorIsa(ASM2* self, int m) {
	return m == self->Op;
}

JB_String* SC_ASM2_Render(ASM2* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	SC_ASM2_fs(self, fs);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}


AsmReg SC_flat_AllocRegDecl(ASMFuncState* self, Message* exp, SCDecl* decl, AsmReg R) {
	SC_flat_NeedSomewhere(self, exp, (&decl->DRegister), SC_Decl_RegType(decl));
	return decl->DRegister;
}

void SC_flat_CloseVars(ASMFuncState* self, uint64 Old) {
	if ((!(((bool)(Old & 1))))) {
		debugger;
	}
	self->UsedRegs = Old;
}

void SC_flat_destructor(ASMFuncState* self) {
	JB_Decr(self->Out);
}

AsmReg SC_flat_DoFunc(ASMFuncState* self, Message* prms, AsmReg dest) {
	SCFunction* fn = JB_Msg_AsFunc(prms);
	if ((!fn)) {
		debugger;
		return ((AsmReg){});
	}
	SC_flat_NeedSomewhere(self, prms, (&dest), SC_Func_RegType(fn));
	SC_flat_AddASM(self, ((Message*)JB_Ring_Parent(prms)), kSC__ASM_FNC, 0, 0, 0, 0)->Rest = fn->TableId;
	uint64 OV = SC_flat_OpenVars(self);
	int64 Bits = (dest.Reg << 25) | (JB_u64_Log2(OV) << 20);
	int Remain = 20;
	Message* p = ((Message*)JB_Ring_First(prms));
	while (true) {
		Message* _tmPf0 = SC_flat_FuncPrms(self, p, Remain, Bits);
		if ((!_tmPf0)) {
			break;
		}
		p = _tmPf0;
		Remain = 31;
		Bits = 0;
	};
	SC_flat_CloseVars(self, OV);
	return dest;
}

AsmReg SC_flat_DoRels(ASMFuncState* self, Message* L, AsmReg dest) {
	Message* op = ((Message*)JB_Ring_NextSib(L));
	uint64 OV = SC_flat_OpenVars(self);
	AsmReg mL = SC_flat_RegSaved(self, L);
	AsmReg mR = SC_flat_Reg(self, ((Message*)JB_Ring_NextSib(op)), JB_int_Reg(0));
	SC_flat_CloseVars(self, OV);
	if ((!((bool)(mL.Reg | mR.Reg)))) {
		return ((AsmReg){});
	}
	SC_flat_NeedSomewhere(self, op, (&dest), mL.AType);
	SCOperator* scop = ((SCOperator*)op->Obj);
	if (scop) {
		fn_OpASM fn = scop->ASM;
		if (fn) {
			return (fn)(self, dest, mL, mR, op);
		}
	}
	if ((!false)) {
		JB_Msg_SyntaxExpect(op, JB_LUB[976]);
	}
	return ((AsmReg){});
}

Message* SC_flat_FuncPrms(ASMFuncState* self, Message* pr, int Remain, uint Bits) {
	while (pr) {
		AsmReg reg = SC_flat_RegSaved(self, pr);
		pr = ((Message*)JB_Ring_NextSib(pr));
		Remain = (Remain - 5);
		Bits = (Bits | (reg.Reg << Remain));
		if ((!(Remain >= 5))) {
			break;
		}
	};
	SC_flat_AddExtended(self, pr, Bits);
	return pr;
}

void SC_flat_NeedSomewhere(ASMFuncState* self, Message* err, AsmReg* dest, DataTypeCode T) {
	if (dest->Reg) {
		return;
	}
	uint64 B = JB_uint64_LowestBit(((~self->UsedRegs)));
	if ((!(B))) {
		JB_Msg_SyntaxExpect(err, JB_LUB[977]);
	}
	self->UsedRegs = (self->UsedRegs | B);
	dest->Reg = JB_u64_Log2(B);
	dest->AType = T;
}

uint64 SC_flat_OpenVars(ASMFuncState* self) {
	uint64 rz = 0;
	rz = self->UsedRegs;
	if ((!(((bool)(rz & 1))))) {
		debugger;
	}
	return rz;
}

ASM2* SC_flat_RequestOp(ASMFuncState* self) {
	if (self->Written < self->MaxLength) {
		return self->Start + self->Written++;
	}
	if (self->OK) {
		if ((!false)) {
			JB_Str_SyntaxExpect(JB_LUB[978]);
		}
		self->OK = false;
	}
	return (&SC__flat_Dummy);
}

AsmReg SC_flat_Reg(ASMFuncState* self, Message* exp, AsmReg reg) {
	fn_asm fn = JB_Msg_ASMFunc(exp);
	if (fn) {
		return (fn)(self, exp, reg);
	}
	debugger;
	return ((AsmReg){});
}

AsmReg SC_flat_RegSaved(ASMFuncState* self, Message* exp) {
	AsmReg rz = ((AsmReg){});
	rz = SC_flat_Reg(self, exp, JB_int_Reg(0));
	self->UsedRegs = (self->UsedRegs | (1 << rz.Reg));
	return rz;
}

int SC_flat__Init_() {
	{
		SC__flat_Dummy = ((ASM2){});
	}
	;
	return 0;
}

int SC_flat__InitCode_() {
	return 0;
}




void JB_ClassData_Restore(JB_Class* self) {
	JB_MemoryLayer* _tmPf0 = JB_Incr(JB_Class_DefaultLayer(self));
	JB_Mem_Use(_tmPf0);
	JB_Decr(_tmPf0);
}


float JB_MzSt_durr(CompressionStats* self) {
	Date d = self->Duration;
	if (d < 0) {
		d = (d + JB_Date__New0());
	}
	return JB_Date_Seconds(d);
}

void JB_MzSt_len(CompressionStats* self, int n) {
	if ((!(self->Duration))) {
		self->Duration = (-JB_Date__New0());
	}
	self->LastOut = n;
}

void JB_MzSt_liveupdate(CompressionStats* self, JB_String* s, int outt) {
	self->In = (self->In + JB_Str_Length(s));
	self->Out = (self->Out + (outt - self->LastOut));
	self->LastOut = self->Out;
	float d = JB_MzSt_durr(self);
	if (self->Live and (d > 1)) {
		JB_String* _tmPf0 = JB_Incr(JB_MzSt_Render(self, nil));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
}

JB_String* JB_MzSt_Render(CompressionStats* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	float durr = JB_MzSt_durr(self);
	int64 spd = (JB_int_OperatorMax(self->In, self->Out)) / durr;
	JB_String* pc = JB_Incr(JB_int_operatorpc(self->Out, self->In));
	//;
	JB_String* _tmPf1 = JB_Incr(JB_int_RenderSize(self->In, nil));
	JB_FS_AppendString(fs, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(fs, JB_LUB[979]);
	JB_String* _tmPf2 = JB_Incr(JB_int_RenderSize(self->Out, nil));
	JB_FS_AppendString(fs, _tmPf2);
	JB_Decr(_tmPf2);
	JB_FS_AppendString(fs, JB_LUB[980]);
	JB_FS_AppendString(fs, pc);
	JB_Decr(pc);
	JB_FS_AppendString(fs, JB_LUB[981]);
	JB_String* _tmPf3 = JB_Incr(JB_int64_strsize(spd, nil));
	JB_FS_AppendString(fs, _tmPf3);
	JB_Decr(_tmPf3);
	JB_FS_AppendString(fs, JB_LUB[982]);
	JB_FS_AppendFloatAsText(fs, durr);
	JB_FS_AppendString(fs, JB_LUB[983]);
	//;
	JB_String* _tmPf4 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

int JB_MzSt__Init_() {
	{
		JB__MzSt_All = ((CompressionStats){});
	}
	;
	return 0;
}

int JB_MzSt__InitCode_() {
	return 0;
}





bool JB_IPCMessage_Closed(IPCMessage* self) {
	return (!JB_IPCMessage_IsOpen(self));
}

byte* JB_IPCMessage_Data(IPCMessage* self) {
	return ((byte*)(self + 1));
}

bool JB_IPCMessage_IsOpen(IPCMessage* self) {
	return self->State < kJB__IPCState_closed;
}




void JB_MsgPos_Destructor(MessagePosition* self) {
	JB__Tk_UsingPos = self->OldPosition;
	JB__Tk_UsingExtra = self->OldExtra;
	JB_Mem_Use(self->OldLayer);
}

void JB_MsgPos_SyntaxUsingComplete(MessagePosition* self) {
}



void SC_NameAndMsg_destructor(NameAndMsg* self) {
	JB_Decr(self->Msg);
	JB_Decr(self->Name);
	JB_Decr(self->Arg);
}

void SC_NameAndMsg_SyntaxAppend(NameAndMsg* self, Message* m) {
	if (self->Msg) {
		(JB_Ring_PrevSibSet(self->Msg, m));
	}
	 else {
		JB_Tree_SyntaxAppend(self->Arg, m);
	}
}


void JB_LD_destructor(ObjectLoader* self) {
	JB_Decr(self->Result);
}

void JB_LD_Finish(ObjectLoader* self) {
	JB_SetRef(self->Result, nil);
	if (self->NoClass) {
		JB_Msg_SyntaxExpect(self->DataError, JB_LUB[984]);
	}
	if (self->DataError) {
		JB_Msg_SyntaxExpect(self->DataError, JB_LUB[985]);
	}
	if (self->CouldntLoad) {
		JB_Object_Fail(self->CouldntLoad, JB_LUB[986]);
	}
}

JB_Class* JB_LD_GetClassOf(ObjectLoader* self, Message* msg) {
	JB_Class* Data = ((JB_Class*)((int64)JB_Wrap_Value(((DTWrap*)JB_Dict_ValueStr(JB__LD_ClassList, msg->Name)))));
	if ((!Data)) {
		self->NoClass = msg;
	}
	return Data;
}

bool JB_LD_HasItem(ObjectLoader* self) {
	return ((bool)self->CurrItem);
}

int64 JB_LD_Int(ObjectLoader* self) {
	Message* C = JB_LD_Next(self);
	if ((!C)) {
		return nil;
	}
	return JB_Str_TextIntegerValid(C->Name, C);
}

int64 JB_LD_ItemInt(ObjectLoader* self) {
	Message* c = self->CurrItem;
	if ((!c)) {
		return nil;
	}
	self->CurrItem = ((Message*)JB_Ring_NextSib(c));
	return JB_Msg_Int(((Message*)JB_Ring_Last(c)), 0);
}

bool JB_LD_ItemIsInt(ObjectLoader* self) {
	Message* C = self->CurrItem;
	return ((JB_Msg_EqualsSyx(((Message*)JB_Ring_Last(C)), JB_SyxNum, false)));
}

JB_String* JB_LD_ItemName(ObjectLoader* self) {
	Message* c = self->CurrItem;
	return JB_Str_Unshare(JB_Msg_Nyme(((Message*)JB_Ring_First(c))));
}

JB_Object* JB_LD_ItemObject(ObjectLoader* self) {
	Message* c = self->CurrItem;
	if ((!c)) {
		return nil;
	}
	self->CurrItem = ((Message*)JB_Ring_NextSib(c));
	return JB_LD_ObjectSub(self, ((Message*)JB_Ring_Last(c)));
}

void JB_LD_LoadClass(ObjectLoader* self, Message* msg, Dictionary* dict) {
	JB_Class* Cls = JB_LD_GetClassOf(self, msg);
	if ((!Cls)) {
		return;
	}
	Message* items = ((Message*)JB_Ring_Last(msg));
	if ((!(JB_Msg_EqualsSyx(items, JB_SyxList, false)))) {
		JB_Msg_SyntaxExpect(items, nil);
		return;
	}
	{
		Message* line = ((Message*)JB_Tree_First_(items));
		while (line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(line));
			JB_LD_LoadObject(self, line, dict, Cls);
			line = _Nf1;
		};
		(items);
	};
}

void JB_LD_LoadForReal(ObjectLoader* self, Message* root, Dictionary* d) {
	self->Dict = d;
	{
		Message* Cls = ((Message*)JB_Tree_First_(root));
		while (Cls) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Cls));
			if (JB_Msg_EqualsSyx(Cls, JB_SyxTmp, false)) {
				{
					Message* _LoopSrcf4 = ((Message*)JB_Ring_Last(Cls));
					Message* line = ((Message*)JB_Tree_First_(_LoopSrcf4));
					while (line) {
						Message* _Nf3 = ((Message*)JB_Ring_NextSib(line));
						Message* name = ((Message*)JB_Ring_First(line));
						Saveable* result = ((Saveable*)JB_Dict_ValueStr(d, name->Name));
						if (result) {
							self->CurrItem = ((Message*)JB_Ring_First(((Message*)JB_Ring_Last(line))));
							JB_Sav___LoadProperties__(result, self);
						}
						line = _Nf3;
					};
					(_LoopSrcf4);
				};
			}
			 else if (JB_Msg_EqualsSyx(Cls, JB_SyxName, false)) {
				JB_SetRef(self->Result, ((Saveable*)JB_Dict_ValueStr(d, Cls->Name)));
			}
			Cls = _Nf1;
		};
		(root);
	};
}

void JB_LD_LoadObject(ObjectLoader* self, Message* msg, Dictionary* dict, JB_Class* Cls) {
	if ((!(JB_Msg_EqualsSyx(msg, JB_SyxItem, false)))) {
		return;
	}
	Message* name = ((Message*)JB_Ring_First(msg));
	Saveable* Result = ((Saveable*)JB_Class_AllocZeroed(Cls));
	if (Result) {
		(JB_Dict_ValueSet(dict, name->Name, Result));
	}
}

Message* JB_LD_Next(ObjectLoader* self) {
	Message* C = self->CurrItem;
	if (C) {
		self->CurrItem = ((Message*)JB_Ring_NextSib(C));
		return C;
	}
	return nil;
}

JB_Object* JB_LD_Object(ObjectLoader* self) {
	return JB_LD_ObjectSub(self, JB_LD_Next(self));
}

JB_Object* JB_LD_ObjectSub(ObjectLoader* self, Message* c) {
	if (JB_Msg_EqualsSyx(c, JB_SyxThg, false)) {
		return JB_Dict_ValueStr(self->Dict, c->Name);
	}
	 else if (JB_Msg_EqualsSyx(c, JB_SyxStr, false)) {
		return JB_Str_Unshare(c->Name);
	}
	return nil;
}

void JB_LD_Preload(ObjectLoader* self, Message* root, Dictionary* dict) {
	{
		Message* Cls = ((Message*)JB_Tree_First_(root));
		while (Cls) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Cls));
			if (JB_Msg_EqualsSyx(Cls, JB_SyxTmp, false)) {
				JB_LD_LoadClass(self, Cls, dict);
			}
			Cls = _Nf1;
		};
		(root);
	};
}

JB_String* JB_LD_String(ObjectLoader* self) {
	Message* C = JB_LD_Next(self);
	if ((!C)) {
		return nil;
	}
	return JB_Str_Unshare(C->Name);
}

bool JB_LD_VerifyFormat(ObjectLoader* self, Message* root) {
	JB_LD__Init();
	Message* m1 = JB_Msg_NeedSyx(root, JB_SyxName);
	if ((!m1)) {
		return nil;
	}
	return true;
}

void JB_LD__Init() {
	if (JB__LD_ClassList) {
		return;
	}
	JB_SetRef(JB__LD_ClassList, JB_Dict__New());
	JB_InitClassList((&JB_LD__LoadOne));
}

void JB_LD__LoadOne(JB_Class* cls, char* Data) {
	JB_String* _tmPf0 = JB_Incr(JB_Str__FromC(cls->Name));
	JB_String* naem = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	DTWrap* _tmPf1 = JB_Incr(JB_Wrap__NewInt(((int64)cls)));
	(JB_Dict_ValueSet(JB__LD_ClassList, naem, _tmPf1));
	JB_Decr(_tmPf1);
	JB_Decr(naem);
}


void JB_Saver_AppendInt(ObjectSaver* self, int64 i) {
	JB_FS_AppendInt64(self->Dest, i);
	JB_FS_AppendByte(self->Dest, ',');
}

void JB_Saver_AppendObject(ObjectSaver* self, JB_Object* o) {
	JB_FS_AppendObjectOrNil(self->Dest, o);
	JB_FS_AppendByte(self->Dest, ',');
}

void JB_Saver_AppendString(ObjectSaver* self, JB_String* s) {
	JB_FS_AppendByte(self->Dest, '`');
	JB_FreeIfDead(JB_Str_ReplaceAll(s, JB_LUB[527], JB_LUB[987], false, self->Dest));
	JB_FS_AppendByte(self->Dest, '`');
	JB_FS_AppendByte(self->Dest, ',');
}

void JB_Saver_Destructor(ObjectSaver* self) {
	if (self->CantSaveThis) {
		JB_Object_Fail(self->CantSaveThis, JB_LUB[988]);
	}
	JB_Decr(self->Dest);
}

void JB_Saver_Finish(ObjectSaver* self, Saveable* first) {
	FastString* fs = self->Dest;
	JB_FS_AppendByte(fs, '\n');
	JB_FS_AppendByte(fs, '@');
	JB_FS_AppendObjectID(fs, first);
	JB_FS_AppendByte(fs, '\n');
	JB_FS_AppendString(fs, kJB_SaverEnd);
}

void JB_Saver__Init() {
	if (JB_Array_SyntaxCast(JB__Saver_SaveableList)) {
		return;
	}
	JB_InitClassList((&JB_Saver__LoadOne));
}

int JB_Saver__Init_() {
	{
	}
	;
	return 0;
}

int JB_Saver__InitCode_() {
	return 0;
}

void JB_Saver__LoadOne(JB_Class* cls, char* Data) {
	SaverClassInfo* N = JB_Incr(JB_sci__New(cls, Data));
	cls->SaveInfo = ((byte*)N);
	JB_SetRef(N->NextInfo, JB__Saver_SaveableList);
	JB_SetRef(JB__Saver_SaveableList, N);
	JB_Decr(N);
}

ObjectSaver JB_Saver__New() {
	JB_Saver__Init();
	ObjectSaver Result = ((ObjectSaver){});
	return Result;
}



double JB_Rnd_Double(Random* self) {
	double rz = 0;
	rz = ((uint64)JB_Rnd_int(self));
	rz = (rz / 18446744073709551616.0f);
	return rz;
}

int64 JB_Rnd_int(Random* self) {
	int64 rz = 0;
	uint64 s = (++self->State);
	rz = JB_uint64_hash((self->Store + s));
	self->Store = rz;
	return rz;
}

void JB_Rnd_LoadProperties(Random* self, ObjectLoader* Loader) {
	//visible;
	self->Store = ((uint64)JB_LD_Int(Loader));
	self->State = ((uint64)JB_LD_Int(Loader));
}

void JB_Rnd_Reseed(Random* self) {
	(JB_Rnd_SeedSet(self, JB_Date__New0()));
}

void JB_Rnd_SaveWrite(Random* self, ObjectSaver* Saver) {
	//visible;
	JB_Saver_AppendInt(Saver, self->Store);
	JB_Saver_AppendInt(Saver, self->State);
}

void JB_Rnd_SeedSet(Random* self, uint64 Value) {
	self->Store = Value;
	self->State = 1;
}

double JB_Rnd_SyntaxAccess(Random* self) {
	return JB_Rnd_Double(self);
}

int JB_Rnd__Init_() {
	{
		JB__Rnd_Shared = ((Random){});
	}
	;
	return 0;
}

int JB_Rnd__InitCode_() {
	{
	}
	;
	JB_Rnd_Reseed((&JB__Rnd_Shared));
	return 0;
}






void JB_StructSaveTest_destructor(StructSaveTest* self) {
	JB_Decr(self->Sav);
	JB_Decr(self->Str);
}

void JB_StructSaveTest_LoadProperties(StructSaveTest* self, ObjectLoader* Loader) {
	//visible;
	JB_SetRef(self->Sav, ((Saveable*)JB_LD_Object(Loader)));
	self->Intt = ((int64)JB_LD_Int(Loader));
	JB_SetRef(self->Str, ((JB_String*)JB_LD_String(Loader)));
}

void JB_StructSaveTest_SaveWrite(StructSaveTest* self, ObjectSaver* Saver) {
	//visible;
	JB_Saver_AppendObject(Saver, self->Sav);
	JB_Saver_AppendInt(Saver, self->Intt);
	JB_Saver_AppendString(Saver, self->Str);
}






































































JB_String* JB_Object_ArgName(JB_Object* self) {
	if (JB_Object_Isa(self, JB_AsClass(JB_String))) {
		return JB_Str_ArgName(((JB_String*)self));
	}
	if (JB_Object_Isa(self, JB_AsClass(Message))) {
		return JB_Msg_ArgName(((Message*)self));
	}
	return JB_LUB[0];
}

JB_String* JB_Object_ArgValue(JB_Object* self) {
	if (JB_Object_Isa(self, JB_AsClass(JB_String))) {
		return JB_Str_ArgValue(((JB_String*)self));
	}
	if (JB_Object_Isa(self, JB_AsClass(Message))) {
		return JB_Msg_ArgValue(((Message*)self));
	}
	return JB_LUB[0];
}

SCDecl* JB_Object_AsDecl(JB_Object* self) {
	if (JB_Object_FastIsa(self, JB_AsClass(SCDecl))) {
		return ((SCDecl*)self);
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCClass))) {
		return ((SCClass*)self)->TypeNormal;
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCModule))) {
		if (((SCModule*)self)->Cls) {
			return ((SCModule*)self)->Cls->TypeNormal;
		}
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
		return ((SCFunction*)self)->ReturnType;
	}
	return nil;
}

Array* JB_Object_CollectLeaks_(JB_Object* self) {
	Array* rz = JB_Incr(((Array*)JB_Array__New0()));
	JB_FindLeakedObject(self, rz);
	JB_SafeDecr(rz);
	return rz;
}

__lib__ void jdb(JB_Object* self) {
	//visible;
	if (self) {
		JB_String* _tmPf0 = JB_Incr(JB_Str__FromC(JB_ObjClass(self)->Name));
		JB_Str_Print(_tmPf0);
		JB_Decr(_tmPf0);
		JB_Str_Print(JB_LUB[278]);
	}
	JB_String* _tmPf1 = JB_Incr(JB_ObjRender(self, nil));
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
}

bool JB_Object_HasArgName(JB_Object* self, JB_String* name) {
	JB_String* _tmPf0 = JB_Incr(JB_Object_ArgName(self));
	bool _tmPf1 = JB_Str_Equals(_tmPf0, name, true);
	JB_Decr(_tmPf0);
	return (_tmPf1);
}

bool JB_Object_MustBe(JB_Object* self, JB_Class* x, Message* ErrNode) {
	if (JB_Object_Isa(self, x)) {
		return true;
	}
	if ((!false)) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[989]);
		JB_FS_AppendCString(_fsf0, ((_cstring)x->Name));
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Msg_SyntaxExpect(ErrNode, _tmPf1);
		JB_Decr(_tmPf1);
	}
	return false;
}

bool JB_Object_FastIsa(JB_Object* self, JB_Class* x) {
	return ((bool)self) and (JB_ObjClass(self) == x);
}

bool JB_Object_Isa(JB_Object* self, JB_Class* x) {
	if (self) {
		JB_Class* P = JB_ObjClass(self);
		if (x == P) {
			return true;
		}
		if ((!x->HasSubclasses)) {
			return nil;
		}
		P = P->Parent;
		while (P) {
			if (P == x) {
				return true;
			}
			P = P->Parent;
		};
	}
	return false;
}

void jbl(JB_Object* self) {
	//visible;
	{
		Array* _LoopSrcf1 = JB_Incr(JB_Object_CollectLeaks_(self));
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			JB_Object* bad = JB_Incr(JB_Array_Value(_LoopSrcf1, _if0));
			jdb(bad);
			JB_Decr(bad);
			debugger;
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	};
}

void JB_Object_SaveTryCollect(JB_Object* self, ObjectSaver* Saver) {
	if (JB_Object_Isa(self, JB_AsClass(Saveable))) {
		if ((!JB_Sav_SaveMark(((Saveable*)self)))) {
			return;
		}
		JB_Array_SyntaxAppend(JB_Sav_SaverInfo(((Saveable*)self)), ((Saveable*)self));
		JB_Sav___SaveCollect__(((Saveable*)self), Saver);
	}
	 else if ((bool)self) {
		if ((!(JB_Object_Isa(self, JB_AsClass(JB_String))))) {
			Saver->CantSaveThis = self;
		}
	}
}

void JB_Object_Fail(JB_Object* self, JB_String* Error) {
	//visible;
	if (JB_Object_Isa(self, JB_AsClass(Message))) {
		JB_Rec_NewErrorWithNode(JB_StdErr, ((Message*)self), Error, nil);
	}
	 else {
		JB_Rec_NewErrorWithNode(JB_StdErr, nil, Error, nil);
	}
}

void JB_Object_SyntaxExpect(JB_Object* self) {
	JB_PrintStackTrace();
	JB_Rec_NewErrorWithNode(JB_StdErr, nil, JB_LUB[990], nil);
}


DTWrap* SC___junktest_6____abcvis() {
	//visible;
	int x = ({
		JB_String* __INSID116 = JB_Incr((JB_LUB[569]));
		int _tmPf0 = JB_Ternary(JB_Str_Exists(__INSID116), JB_Str_Length(__INSID116), nil);
		JB_Decr(__INSID116);
		 _tmPf0;
	});
	return nil;
}


void SC_autoitem_ConstructorAuto(autoitem* self, JB_String* Sort, JB_String* Insert, SCObject* Value, JB_String* Display, bool Exact, int type) {
	JB_String* _tmPf0 = JB_LUB[0];
	self->Sort = JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_LUB[0];
	self->Insert = JB_Incr(_tmPf1);
	self->Value = nil;
	JB_String* _tmPf2 = JB_LUB[0];
	self->Display = JB_Incr(_tmPf2);
	self->Exact = false;
	self->type = 0;
	JB_SetRef(self->Sort, Sort);
	JB_SetRef(self->Insert, Insert);
	JB_SetRef(self->Value, Value);
	JB_SetRef(self->Display, Display);
	self->Exact = Exact;
	self->type = type;
}

void SC_autoitem_destructor(autoitem* self) {
	JB_Decr(self->Sort);
	JB_Decr(self->Insert);
	JB_Decr(self->Value);
	JB_Decr(self->Display);
}

bool SC_autoitem_OKBy(autoitem* self, autoitem* prev) {
	if ((!prev)) {
		return true;
	}
	if ((!JB_Str_Equals(self->Insert, prev->Insert, true))) {
		return true;
	}
	if (self->Exact != prev->Exact) {
		return true;
	}
	return false;
}

autoitem* SC_autoitem__Alloc() {
	return ((autoitem*)JB_New(autoitem));
}

autoitem* SC_autoitem__NewAuto(JB_String* Sort, JB_String* Insert, SCObject* Value, JB_String* Display, bool Exact, int type) {
	autoitem* __rz__ = ((autoitem*)SC_autoitem__Alloc());
	if (__rz__) {
		SC_autoitem_ConstructorAuto(__rz__, Sort, Insert, Value, Display, Exact, type);
	}
	return __rz__;
}



Array* JB_CS_Bytes(CharSet* self) {
	Array* rz = ((Array*)JB_Array__New0());
	{
		int _if0 = 0;
		while (_if0 < 256) {
			if ((!JB_CS_HasChar(self, _if0))) {
				_if0++;
				continue;
			}
			byte b = ((byte)_if0);
			JB_Array_SyntaxAppend(rz, JB_byte_Render(b, nil));
			_if0++;
		};
	}
	;
	return rz;
}

bool JB_CS_OperatorContains(CharSet* self, JB_String* Data) {
	return (!JB_Ind_SyntaxCast(JB_Str_OutCharSet(Data, self, 0, JB_int__max())));
}

CharSet* JB_CS__Alloc() {
	return ((CharSet*)JB_New(CharSet));
}

CharSet* JB_CS__New(JB_String* Chars, bool UseRange) {
	CharSet* __rz__ = ((CharSet*)JB_CS__Alloc());
	if (__rz__) {
		JB_CS_Constructor(__rz__, Chars, UseRange);
	}
	return __rz__;
}


void SC_Cpp_AppendCppField(Cpp_Export* self, JB_String* prop, FastStringCpp* fs) {
	JB_FS_AppendString(fs, JB_LUB[991]);
	JB_FS_AppendString(fs, prop);
	JB_FS_AppendByte(fs, ';');
}

void SC_Cpp_AppendPropField(Cpp_Export* self, SCDecl* prop, FastStringCpp* fs) {
	JB_FS_AppendString(fs, JB_LUB[991]);
	SC_Cpp__WriteDecl(prop, fs, nil);
	JB_FS_AppendByte(fs, ';');
}

void SC_Cpp_Codify(Cpp_Export* self, SCModule* scb, JB_String* fName) {
	JB_Incr(fName);
	SCClass* cls = JB_Incr(scb->Cls);
	if ((!JB_Str_Exists(fName))) {
		if (cls) {
			JB_SetRef(fName, cls->ExportName);
		}
		 else {
			JB_SetRef(fName, scb->ExportName);
		}
	}
	if (scb == SC__Comp_program) {
		JB_SetRef(fName, JB_LUB[48]);
	}
	Array* ModuleFuncs = JB_Incr(SC_Base_ListFunctions(scb));
	if ((!(((bool)cls) or (JB_Array_SyntaxCast(ModuleFuncs) or ((bool)scb->Access))))) {
		JB_Decr(fName);
		JB_Decr(cls);
		JB_Decr(ModuleFuncs);
		return;
	}
	JB_SetRef(SC__Cpp_CurrClass, cls);
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(fName, JB_LUB[185]));
	FastStringCpp* File = JB_Incr(SC_Cpp_StreamChild(self, _tmPf1));
	JB_Decr(_tmPf1);
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[992]);
	JB_FS_AppendString(_fsf0, fName);
	JB_Decr(fName);
	JB_FS_AppendByte(_fsf0, '\n');
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_FS_AppendString(self->HeaderProj, (_tmPf2));
	JB_Decr(_tmPf2);
	SC_Cpp_ExportModuleProperties(self, scb, self->ModuleProperties);
	if (((bool)cls) and SC_Class_NeedsExport(cls)) {
		SC_Cpp_ExportClass(self, cls, self->ModuleProperties);
		SC_Cpp_OptStart(self, File, cls->MinOpt, true);
		Array* _tmPf3 = JB_Incr(SC_Base_ListFunctions(cls));
		SC_Cpp_CodifyFuncs(self, File, _tmPf3);
		JB_Decr(_tmPf3);
		SC_Cpp_OptEnd(self, File, cls->MinOpt, true);
	}
	JB_Decr(cls);
	SC_Cpp_CodifyFuncs(self, File, ModuleFuncs);
	JB_Decr(File);
	JB_Decr(ModuleFuncs);
	JB_SetRef(SC__Cpp_CurrClass, nil);
}

void SC_Cpp_CodifyFuncs(Cpp_Export* self, FastStringCpp* file, Array* list) {
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(list)) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(list, _if0)));
			if (SC_Func_NeedsExport(f)) {
				JB_SetRef(SC__Func_CurrFunc, f);
				SC_Cpp_Func(self, file, f, self->HeaderProj);
				JB_SetRef(SC__Func_CurrFunc, nil);
			}
			JB_Decr(f);
			_if0++;
		};
	};
}

void SC_Cpp_Constructor(Cpp_Export* self) {
	self->T = nil;
	Array* _tmPf0 = JB_Array__New0();
	self->Outputs_cpp = JB_Incr(_tmPf0);
	Array* _tmPf1 = JB_Array__New0();
	self->Outputs_h = JB_Incr(_tmPf1);
	self->Inlines = nil;
	self->TypesProj = nil;
	self->HeaderProj = nil;
	self->AllTypes = nil;
	self->ModuleProperties = nil;
	SC_Cpp__Init();
}

void SC_Cpp_destructor(Cpp_Export* self) {
	JB_Decr(self->T);
	JB_Decr(self->Outputs_cpp);
	JB_Decr(self->Outputs_h);
	JB_Decr(self->Inlines);
	JB_Decr(self->TypesProj);
	JB_Decr(self->HeaderProj);
	JB_Decr(self->AllTypes);
	JB_Decr(self->ModuleProperties);
}

void SC_Cpp_DoInterpreter(Cpp_Export* self) {
	if ((!SC__Options_ListAllLib)) {
		return;
	}
	FastStringCpp* fs = JB_Incr(self->ModuleProperties);
	SC_Cpp_ListAllFuncs(self, fs);
	SC_Cpp_ListAllClasses(self, fs);
	JB_Decr(fs);
}

void SC_Cpp_ExportBehaviourHeader(Cpp_Export* self, SCClass* cls) {
	if (cls->IsRole) {
		return;
	}
	SCBehaviour* b = JB_Incr(cls->Behaviour);
	if ((!b)) {
		JB_Decr(b);
		return;
	}
	SC_Cpp_ExportStruct(self, b->FuncTayble->Cls, true);
	JB_Decr(b);
}

bool SC_Cpp_ExportBehaviourInstance(Cpp_Export* self, SCClass* cls, FastStringCpp* fs) {
	SCBehaviour* b = JB_Incr(cls->Behaviour);
	if ((!b)) {
		JB_Decr(b);
		return nil;
	}
	SCClass* TableCls = JB_Incr(b->FuncTayble->Cls);
	JB_String* N = JB_Incr(SC_Class_CStructName(TableCls));
	JB_Decr(TableCls);
	JB_String* CN = JB_Incr(SC_Class_CStructName(cls));
	JB_FS_AppendString(fs, N);
	JB_FS_AppendString(fs, JB_LUB[993]);
	JB_FS_AppendString(fs, CN);
	JB_FS_AppendString(fs, JB_LUB[994]);
	JB_FS_AppendString(fs, N);
	JB_FS_AppendString(fs, JB_LUB[995]);
	SC_FastStringCpp_AppendBehaviour(fs, nil, cls->DestructorFunc, nil);
	while (b) {
		{
			Dictionary* _LoopSrcf4 = JB_Incr(b->Interfaces);
			DictionaryReader* _navf3 = JB_Incr(JB_Dict_Navigate(_LoopSrcf4));
			JB_Decr(_LoopSrcf4);
			while (JB_Nav_MoveNext(_navf3)) {
				SCModule* M = JB_Incr(((SCModule*)JB_Nav_Value(_navf3)));
				JB_String* s = JB_Incr(JB_Str_InterfaceToBehaviour(M->Name));
				SCFunction* fn = JB_Incr(SC_Class_BestBehaviourFor(cls, s));
				if ((!fn)) {
					FastString* _fsf0 = JB_Incr(JB_FS__New());
					JB_FS_AppendString(_fsf0, JB_LUB[996]);
					JB_FS_AppendString(_fsf0, s);
					JB_FS_AppendString(_fsf0, JB_LUB[997]);
					JB_FS_AppendString(_fsf0, cls->Name);
					JB_String* _tmPf6 = JB_Incr(JB_FS_GetResult(_fsf0));
					JB_Decr(_fsf0);
					JB_Msg_SyntaxExpect(cls->Source, _tmPf6);
					JB_Decr(_tmPf6);
					JB_Decr(b);
					JB_Decr(N);
					JB_Decr(CN);
					JB_Decr(_navf3);
					JB_Decr(M);
					JB_Decr(s);
					JB_Decr(fn);
					return nil;
				}
				SCClass* BaseClass = JB_Incr(SC_Class_InterfaceForBehaviour(cls, fn));
				if ((!BaseClass)) {
					JB_Decr(b);
					JB_Decr(N);
					JB_Decr(CN);
					JB_Decr(_navf3);
					JB_Decr(M);
					JB_Decr(s);
					JB_Decr(fn);
					JB_Decr(BaseClass);
					return nil;
				}
				if (M->IsRequiredInterface and (!JB_FreeIfDead(SC_Base_SyntaxAccess(cls->Behaviour, s)))) {
					FastString* _fsf1 = JB_Incr(JB_FS__New());
					JB_FS_AppendString(_fsf1, JB_LUB[998]);
					JB_FS_AppendString(_fsf1, cls->Name);
					JB_String* msg = JB_Incr(JB_FS_GetResult(_fsf1));
					JB_Decr(_fsf1);
					if ((!false)) {
						JB_Msg_SyntaxExpect(cls->Source, msg);
					}
					if ((!false)) {
						JB_Msg_SyntaxExpect(BaseClass->FuncProto->Source, msg);
					}
					JB_Decr(msg);
				}
				JB_Decr(M);
				SC_FastStringCpp_AppendBehaviour(fs, s, fn, BaseClass);
				JB_Decr(BaseClass);
				JB_Decr(fn);
				JB_Decr(s);
			};
			JB_Decr(_navf3);
		}
		;
		JB_SetRef(b, SC_Beh_Upwards(b));
	};
	JB_Decr(b);
	JB_FS_AppendString(fs, JB_LUB[999]);
	//;
	JB_FS_AppendString(fs, N);
	JB_Decr(N);
	JB_FS_AppendByte(fs, ' ');
	JB_FS_AppendString(fs, CN);
	JB_FS_AppendString(fs, JB_LUB[1000]);
	JB_FS_AppendString(fs, CN);
	JB_Decr(CN);
	JB_FS_AppendString(fs, JB_LUB[1001]);
	//;
	return true;
}

void SC_Cpp_ExportClass(Cpp_Export* self, SCClass* cls, FastStringCpp* CppFile) {
	JB_Incr(cls);
	if (cls->IsDataType) {
		JB_Decr(cls);
		return;
	}
	if (SC_Class_IsFunc(cls)) {
		JB_Decr(cls);
		return;
	}
	if (SC_Class_IsBehaviourTable(cls)) {
		JB_Decr(cls);
		return;
	}
	if (cls->IsRole) {
		JB_Decr(cls);
		return;
	}
	if (cls->IsWrapper) {
		SC_Cpp_ExportBehaviourHeader(self, cls);
	}
	if (cls->IsWrapper) {
		JB_Decr(cls);
		return;
	}
	if (cls->IsStruct) {
		SC_Cpp_ExportStruct(self, cls, false);
		JB_Decr(cls);
		return;
	}
	FastStringCpp* HFile = JB_Incr(self->TypesProj);
	SC_Cpp_ExportBehaviourHeader(self, cls);
	JB_FS_AppendString(HFile, JB_LUB[1002]);
	JB_String* _tmPf4 = JB_Incr(SC_Class_CStructName(cls));
	JB_FS_AppendString(HFile, _tmPf4);
	JB_Decr(_tmPf4);
	JB_FS_AppendString(HFile, JB_LUB[1003]);
	if (cls->Super) {
		JB_String* _tmPf5 = JB_Incr(SC_Class_CStructName(cls->Super));
		JB_FS_AppendString(HFile, _tmPf5);
		JB_Decr(_tmPf5);
	}
	 else {
		JB_FS_AppendString(HFile, JB_LUB[1004]);
	}
	JB_FS_AppendString(HFile, JB_LUB[1003]);
	{
		Array* _LoopSrcf2 = JB_Incr(cls->Properties);
		int _if1 = 0;
		while (_if1 < JB_Array_Size(_LoopSrcf2)) {
			SCDecl* prop = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if1)));
			JB_FS_AppendString(HFile, JB_LUB[991]);
			SC_Cpp__WriteDecl(prop, HFile, nil);
			JB_Decr(prop);
			JB_FS_AppendByte(HFile, ';');
			_if1++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_FS_AppendString(HFile, JB_LUB[1005]);
	JB_Decr(HFile);
	bool HasTable = SC_Cpp_ExportBehaviourInstance(self, cls, CppFile);
	//;
	JB_FS_AppendString(CppFile, JB_LUB[1006]);
	JB_String* _tmPf6 = JB_Incr(SC_Class_CStructName(cls));
	JB_FS_AppendString(CppFile, _tmPf6);
	JB_Decr(_tmPf6);
	JB_FS_AppendString(CppFile, JB_LUB[164]);
	JB_String* _tmPf7 = JB_Incr(SC_Class_CSuperStructName(cls));
	JB_FS_AppendString(CppFile, _tmPf7);
	JB_Decr(_tmPf7);
	JB_FS_AppendString(CppFile, JB_LUB[164]);
	//;
	if ((!HasTable)) {
		JB_SetRef(cls, JB_TypeObject);
	}
	JB_String* _tmPf8 = JB_Incr(SC_Class_CStructName(cls));
	JB_Decr(cls);
	JB_FS_AppendString(CppFile, _tmPf8);
	JB_Decr(_tmPf8);
	JB_FS_AppendString(CppFile, JB_LUB[1007]);
}

void SC_Cpp_ExportModuleProperties(Cpp_Export* self, SCModule* modl, FastStringCpp* IntoModule) {
	FastStringCpp* fs = JB_Incr(IntoModule);
	if ((!fs)) {
		JB_SetRef(fs, self->TypesProj);
	}
	{
		Array* _LoopSrcf1 = JB_Incr(SC_Mod_ListProperties(modl));
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* prop = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0)));
			if (SC_Decl_SyntaxIs(prop, kSC__SCDeclInfo_const)) {
				if (IntoModule) {
					_if0++;
					JB_Decr(prop);
					continue;
				}
				SC_Cpp__WriteConst(prop, fs);
			}
			 else if (SC_Decl_TypeIsReached(prop)) {
				if ((!IntoModule)) {
					JB_FS_AppendString(fs, JB_LUB[1008]);
				}
				 else if (SC_Decl_SyntaxIs(prop, kSC__SCDeclInfo_api)) {
					JB_FS_AppendString(fs, JB_LUB[1009]);
				}
				if (((bool)IntoModule) and SC_Decl_SyntaxIs(prop, kSC__SCDeclInfo_gameflyingmem)) {
					JB_FreeIfDead(JB_Str_ReplaceAll(prop->StringData, JB_LUB[1010], prop->Name, false, fs));
				}
				 else {
					SC_Cpp__WriteDecl(prop, fs, nil);
				}
				JB_FS_AppendByte(fs, ';');
			}
			JB_Decr(prop);
			JB_FS_AppendByte(fs, '\n');
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	JB_Decr(fs);
}

bool SC_Cpp_ExportOneProperty(Cpp_Export* self, SCClass* cls, FastStringCpp* fs, JB_String* Only) {
	{
		Array* _LoopSrcf1 = JB_Incr(cls->Properties);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* prop = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0)));
			if (JB_Str_Equals(prop->Name, Only, false)) {
				SC_Cpp_AppendPropField(self, prop, fs);
				JB_Decr(_LoopSrcf1);
				JB_Decr(prop);
				return true;
			}
			JB_Decr(prop);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	return false;
}

void SC_Cpp_ExportOneSyx(Cpp_Export* self, int i, FastStringCpp* fs) {
	JB_String* syx = JB_Incr(((JB_String*)JB_Array_Value(SC__Comp_SyxArray, i)));
	//;
	JB_FS_AppendString(fs, JB_LUB[1011]);
	JB_FS_AppendString(fs, syx);
	JB_Decr(syx);
	JB_FS_AppendByte(fs, ' ');
	JB_FS_AppendInt32(fs, i);
	JB_FS_AppendByte(fs, '\n');
	//;
}

void SC_Cpp_ExportProperties(Cpp_Export* self, SCClass* cls, FastStringCpp* fs, JB_String* Ignore) {
	{
		Array* _LoopSrcf1 = JB_Incr(cls->Properties);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* prop = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0)));
			if ((!JB_Str_Equals(prop->Name, Ignore, false))) {
				SC_Cpp_AppendPropField(self, prop, fs);
			}
			JB_Decr(prop);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	};
}

void SC_Cpp_ExportStruct(Cpp_Export* self, SCClass* cls, bool IsBehaviour) {
	FastStringCpp* fs = JB_Incr(self->TypesProj);
	SC_Class_WriteStructOrUnion(cls, fs);
	if (cls->IsModel) {
		JB_FS_AppendString(fs, JB_LUB[1012]);
	}
	JB_String* _tmPf0 = JB_Incr(SC_Class_CStructName(cls));
	JB_FS_AppendString(fs, _tmPf0);
	JB_Decr(_tmPf0);
	if (cls->Super) {
		JB_FS_AppendString(fs, JB_LUB[278]);
		JB_String* _tmPf1 = JB_Incr(SC_Class_CStructName(cls->Super));
		JB_FS_AppendString(fs, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_FS_AppendString(fs, JB_LUB[1013]);
	if (IsBehaviour) {
		if ((!cls->Super)) {
			SC_Cpp_AppendCppField(self, JB_LUB[1014], fs);
			SC_Cpp_ExportOneProperty(self, cls, fs, JB_LUB[799]);
		}
		SC_Cpp_ExportProperties(self, cls, fs, JB_LUB[799]);
	}
	 else {
		SC_Cpp_ExportProperties(self, cls, fs, nil);
	}
	JB_FS_AppendString(fs, JB_LUB[1015]);
	JB_Decr(fs);
}

void SC_Cpp_ExportSyx(Cpp_Export* self) {
	if ((!JB_Array_SyntaxCast(SC__Comp_SyxArray))) {
		return;
	}
	FastStringCpp* fs = JB_Incr(SC_Cpp_StreamChild(self, JB_LUB[1016]));
	{
		int _LoopSrcf1 = JB_Array_Size(SC__Comp_SyxArray);
		int i = 0;
		while (i < _LoopSrcf1) {
			SC_Cpp_ExportOneSyx(self, i, fs);
			i++;
		};
	}
	;
	JB_Decr(fs);
}

void SC_Cpp_FinalMergeOutputIntoACpp(Cpp_Export* self) {
	FastStringCpp* fs = JB_Incr(SC_FastStringCpp__New(JB_LUB[0]));
	JB_FS_AppendString(fs, JB_LUB[1017]);
	JB_String* _tmPf9 = JB_Incr(SC_Cpp__CppLicence());
	JB_FS_AppendString(fs, _tmPf9);
	JB_Decr(_tmPf9);
	JB_FS_includeh(fs, JB_LUB[1018]);
	JB_FS_includeh(fs, JB_LUB[1019]);
	{
		Array* _LoopSrcf2 = JB_Incr(SC__Cpp_H_PostInput);
		int _if1 = 0;
		while (_if1 < JB_Array_Size(_LoopSrcf2)) {
			JB_String* h = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf2, _if1)));
			JB_FS_includeh(fs, h);
			JB_Decr(h);
			_if1++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_FS_AppendString(fs, JB_LUB[1020]);
	JB_FS_AppendString(fs, JB_LUB[1008]);
	SC_Cpp__GenLub(fs);
	//;
	JB_FS_AppendString(fs, JB_LUB[1008]);
	JB_String* _tmPf10 = JB_Incr(SC_Class_CStructName(JB_TypeObject->Behaviour->FuncTayble->Cls));
	JB_FS_AppendString(fs, _tmPf10);
	JB_Decr(_tmPf10);
	JB_FS_AppendString(fs, JB_LUB[1021]);
	//;
	if (SC_Cpp__DoSavers()) {
		SC_Cpp__CreateClassListHeader(fs, JB_LUB[1022]);
	}
	SC_Cpp__GenStrings(self->ModuleProperties);
	JB_String* _tmPf11 = JB_Incr(JB_FS_SyntaxCast(self->ModuleProperties));
	JB_File* _tmPf12 = JB_Incr(SC_Cpp__Product(JB_LUB[1023]));
	SC_Cpp__SmartWrite(_tmPf11, _tmPf12);
	JB_Decr(_tmPf12);
	JB_Decr(_tmPf11);
	(JB_FS_LengthSet(self->ModuleProperties, 0));
	{
		Array* _LoopSrcf5 = JB_Incr(self->Outputs_cpp);
		int _if4 = 0;
		while (_if4 < JB_Array_Size(_LoopSrcf5)) {
			FastStringCpp* f = JB_Incr(((FastStringCpp*)JB_Array_Value(_LoopSrcf5, _if4)));
			JB_String* _tmPf13 = JB_Incr(SC_Cpp__SplitCpp(f, f->Cpp_Name));
			JB_Decr(f);
			JB_FS_AppendString(fs, _tmPf13);
			JB_Decr(_tmPf13);
			_if4++;
		};
		JB_Decr(_LoopSrcf5);
	}
	;
	if (SC_Cpp__DoSavers()) {
		SC_Cpp__CreateClassListFunc(fs);
	}
	JB_FS_AppendString(fs, JB_LUB[1024]);
	{
		int _if7 = 0;
		while (_if7 < JB_Array_Size(SC__Cpp_Cpp_Includes)) {
			JB_String* i = JB_Incr(((JB_String*)JB_Array_Value(SC__Cpp_Cpp_Includes, _if7)));
			JB_FS_AppendByte(fs, ' ');
			JB_FS_AppendString(fs, i);
			JB_Decr(i);
			_if7++;
		};
	}
	;
	JB_String* _tmPf14 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_File* _tmPf15 = JB_Incr(SC_Cpp__CppProduct());
	SC_Cpp__SmartWrite(_tmPf14, _tmPf15);
	JB_Decr(_tmPf15);
	JB_Decr(_tmPf14);
}

void SC_Cpp_Func(Cpp_Export* self, FastStringCpp* fs, SCFunction* F, FastStringCpp* H) {
	JB_Incr(fs);
	if ((!F->IsExternalLib)) {
		if ((!((!F->IsWrapper) and (!F->IsMacro)))) {
			JB_Decr(fs);
			return;
		}
	}
	if (SC_Func_OperatorIsa(F, kSC_IsNewStruct)) {
		JB_Decr(fs);
		return;
	}
	SC_Cpp__WriteFunctionHeader(F, self->T);
	if (F->IsInline) {
		JB_SetRef(fs, self->Inlines);
	}
	JB_String* FuncHeader = JB_Incr(JB_FS_GetResult(self->T));
	JB_FS_AppendString(H, FuncHeader);
	JB_FS_AppendString(H, JB_LUB[1025]);
	if (F->IsExternalLib) {
		JB_Decr(fs);
		JB_Decr(FuncHeader);
		return;
	}
	if (F->IsAPI) {
		JB_FS_AppendString(fs, JB_LUB[1009]);
	}
	SC_Cpp_OptStart(self, fs, F->MinOpt, 0);
	JB_FS_AppendString(fs, FuncHeader);
	JB_Decr(FuncHeader);
	(JB_FS_LengthSet(self->T, 0));
	JB_SetRef(fs->CurrFunc, F);
	JB_SetRef(fs->SrcEnd, SC_Base_SourceArg(F));
	JB_SetRef(fs->ExtraAfter, ((Message*)JB_Ring_FlatAfter(fs->SrcEnd)));
	JB_FS_AppendByte(fs, ' ');
	Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyxInt(F->Source, JB_SyxArg, -1));
	if ((!_tmPf0)) {
		JB_Decr(fs);
		JB_Decr(_tmPf0);
		return;
	}
	JB_Msg_Export(_tmPf0, fs);
	JB_Decr(_tmPf0);
	SC_Cpp_OptEnd(self, fs, F->MinOpt, 0);
	JB_FS_AppendString(fs, JB_LUB[1026]);
	JB_Decr(fs);
}

void SC_Cpp_ListAllClasses(Cpp_Export* self, FastStringCpp* fs) {
	FastString* j = JB_Incr(JB_bin__New(JB_SyxArg, JB_LUB[0]));
	{
		Array* _LoopSrcf2 = JB_Incr(SC__Comp_ClassList);
		int _if1 = 0;
		while (_if1 < JB_Array_Size(_LoopSrcf2)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf2, _if1)));
			if (SC_Class_IsSTDLib(c) and (!c->Super)) {
				SC_Class_LibExport(c, j);
			}
			JB_Decr(c);
			_if1++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(j));
	JB_Decr(j);
	JB_String* s = JB_Incr(JB_Str_Compress(_tmPf4, nil));
	JB_Decr(_tmPf4);
	JB_FS_AppendString(fs, JB_LUB[1027]);
	JB_FS_AppendCpp(fs, s);
	//;
	JB_FS_AppendString(fs, JB_LUB[1028]);
	JB_FS_AppendInt32(fs, JB_Str_Length(s));
	JB_Decr(s);
	JB_FS_AppendString(fs, JB_LUB[1029]);
	//;
}

void SC_Cpp_ListAllFuncs(Cpp_Export* self, FastStringCpp* fs) {
	JB_FS_AppendString(fs, JB_LUB[1030]);
	{
		Array* _LoopSrcf2 = JB_Incr(SC__ExecTable_Funcs);
		int _if1 = 0;
		while (_if1 < JB_Array_Size(_LoopSrcf2)) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf2, _if1)));
			if (SC_Base_IsSTDLib(f) and (f->IsCppInBuilt == 1)) {
				SC_Cpp_MakeWrapperFor(self, fs, f);
			}
			JB_Decr(f);
			_if1++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	FastString* bs = JB_Incr(JB_bin__New(JB_SyxArg, JB_LUB[0]));
	JB_FS_AppendString(fs, JB_LUB[1031]);
	{
		Array* _LoopSrcf5 = JB_Incr(SC__ExecTable_Funcs);
		int _if4 = 0;
		while (_if4 < JB_Array_Size(_LoopSrcf5)) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf5, _if4)));
			if (SC_Base_IsSTDLib(f)) {
				JB_FS_AppendString(fs, JB_LUB[1032]);
				JB_String* name = JB_Incr(SC_Func_WrapName(f));
				if (JB_Str_Exists(name)) {
					JB_bin_add(bs, JB_SyxTmp, name, false);
					JB_FS_AppendString(fs, name);
					JB_FS_AppendString(fs, JB_LUB[642]);
				}
				JB_Decr(name);
			}
			JB_Decr(f);
			_if4++;
		};
		JB_Decr(_LoopSrcf5);
	}
	;
	JB_FS_AppendString(fs, JB_LUB[1033]);
	JB_String* _tmPf7 = JB_Incr(JB_FS_GetResult(bs));
	JB_Decr(bs);
	JB_String* s = JB_Incr(JB_Str_Compress(_tmPf7, nil));
	JB_Decr(_tmPf7);
	JB_FS_AppendString(fs, JB_LUB[1034]);
	JB_FS_AppendCpp(fs, s);
	JB_FS_AppendString(fs, JB_LUB[1022]);
	//;
	JB_FS_AppendString(fs, JB_LUB[1035]);
	JB_FS_AppendInt32(fs, JB_Str_Length(s));
	JB_Decr(s);
	JB_FS_AppendString(fs, JB_LUB[1029]);
	//;
}

void SC_Cpp_MakeWrapperFor(Cpp_Export* self, FastStringCpp* fs, SCFunction* f) {
	JB_String* n = JB_Incr(SC_Func_WrapName(f));
	SC_Cpp__WriteFuncSub(f, n, fs);
	JB_Decr(n);
	JB_FS_AppendString(fs, JB_LUB[1036]);
	if (f->ReturnType) {
		JB_FS_AppendString(fs, JB_LUB[1037]);
	}
	JB_FS_AppendString(fs, f->ExportName);
	SC_Cpp__WriteFuncArgs(f, fs, true);
	JB_FS_AppendString(fs, JB_LUB[1038]);
}

void SC_Cpp_OptEnd(Cpp_Export* self, FastStringCpp* fs, int m, bool force) {
	if (((bool)m) and (force or (!SC__Cpp_CurrClass->MinOpt))) {
		JB_FS_AppendString(fs, JB_LUB[1039]);
	}
}

#pragma GCC optimize ("O3")
void SC_Cpp_OptStart(Cpp_Export* self, FastStringCpp* fs, int m, bool force) {
	if (((bool)m) and (force or (!SC__Cpp_CurrClass->MinOpt))) {
		JB_String* s = JB_Incr(JB_LUB[922]);
		if (m <= 3) {
			JB_SetRef(s, JB_int_RenderFS(m, nil));
		}
		//;
		JB_FS_AppendString(fs, JB_LUB[1040]);
		JB_FS_AppendString(fs, s);
		JB_Decr(s);
		JB_FS_AppendString(fs, JB_LUB[1041]);
		//;
	}
}
#pragma GCC reset_options



void SC_Cpp_PreRun(Cpp_Export* self) {
	JB_SetRef(SC__Cpp_StringBlob, SC_FastStringCpp__New(JB_LUB[0]));
	JB_SetRef(SC__Cpp_StringLengths, SC_FastStringCpp__New(JB_LUB[0]));
	JB_SetRef(SC__Cpp_StringDict, JB_Dict__New());
	JB_SetRef(self->AllTypes, SC_Cpp_StreamChild(self, JB_LUB[1042]));
	JB_SetRef(self->TypesProj, SC_Cpp_StreamChild(self, JB_LUB[1043]));
	JB_SetRef(self->HeaderProj, SC_Cpp_StreamChild(self, JB_LUB[1019]));
	JB_SetRef(self->Inlines, SC_Cpp_StreamChild(self, JB_LUB[1044]));
	JB_SetRef(self->ModuleProperties, SC_Cpp_StreamChild(self, JB_LUB[1045]));
	JB_FS_AppendString(self->AllTypes, JB_LUB[1046]);
	JB_FS_AppendByte(self->HeaderProj, '\n');
	JB_SetRef(self->T, SC_FastStringCpp__New(JB_LUB[0]));
	JB_FS_AppendString(self->ModuleProperties, JB_LUB[1047]);
}

void SC_Cpp_Run(Cpp_Export* self) {
	{
		Array* _LoopSrcf1 = JB_Incr(SC__Comp_ClassList);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf1, _if0)));
			if ((!SC_Class_IsFunc(c))) {
				SC_Cpp__WriteType(c, self->AllTypes, true);
			}
			JB_Decr(c);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	{
		Array* _LoopSrcf4 = JB_Incr(SC__Comp_ClassList);
		int _if3 = 0;
		while (_if3 < JB_Array_Size(_LoopSrcf4)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf4, _if3)));
			if (SC_Class_IsFunc(c)) {
				SC_Cpp__WriteType(c, self->AllTypes, false);
			}
			JB_Decr(c);
			_if3++;
		};
		JB_Decr(_LoopSrcf4);
	}
	;
	{
		Array* _LoopSrcf7 = JB_Incr(SC__Comp_ModuleList);
		int _if6 = 0;
		while (_if6 < JB_Array_Size(_LoopSrcf7)) {
			SCModule* c = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf7, _if6)));
			SC_Cpp_Codify(self, c, JB_LUB[0]);
			JB_Decr(c);
			_if6++;
		};
		JB_Decr(_LoopSrcf7);
	}
	;
	{
		Array* _LoopSrcf10 = JB_Incr(SC__Comp_ModuleList);
		int _if9 = 0;
		while (_if9 < JB_Array_Size(_LoopSrcf10)) {
			SCModule* c = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf10, _if9)));
			SC_Cpp_ExportModuleProperties(self, c, nil);
			JB_Decr(c);
			_if9++;
		};
		JB_Decr(_LoopSrcf10);
	}
	;
	if (SC__Options_ProjectIsLibrary) {
		JB_File* WriteTo = JB_Incr(SC_Cpp__APIHeader());
		if (JB_File_SyntaxCast(WriteTo)) {
			FastStringCpp* File = JB_Incr(SC_Cpp_StreamChild(self, JB_LUB[1048]));
			JB_FS_AppendString(File, JB_LUB[1049]);
			JB_FS_AppendString(File, JB_LUB[1050]);
			SC_Cpp_CodifyFuncs(self, File, SC__Comp_API_Funcs);
			JB_FS_AppendString(File, JB_LUB[1051]);
			JB_FS_AppendString(File, JB_LUB[1052]);
			JB_Decr(File);
			SC_Cpp_WriteAPIHeader(self, WriteTo);
		}
		JB_Decr(WriteTo);
	}
}

FastStringCpp* SC_Cpp_StreamChild(Cpp_Export* self, JB_String* s) {
	FastStringCpp* rz = nil;
	JB_String* _tmPf0 = JB_Incr(JB_Str_TrimExtAndPath(s, true));
	JB_SetRef(rz, SC_FastStringCpp__New(_tmPf0));
	JB_Decr(_tmPf0);
	if ((!rz)) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(rz);
		return nil;
	}
	if (JB_Str_OperatorIsa(s, JB_LUB[1053])) {
		JB_Array_SyntaxAppend(self->Outputs_h, rz);
		JB_FS_AppendString(rz, JB_LUB[1054]);
		JB_FS_AppendString(rz, s);
	}
	 else {
		JB_Array_SyntaxAppend(self->Outputs_cpp, rz);
	}
	JB_FS_AppendByte(rz, '\n');
	JB_SafeDecr(rz);
	return rz;
}

void SC_Cpp_WriteAPIFuncHeader(Cpp_Export* self, SCFunction* F, FastStringCpp* fs) {
	SC__Cpp_WriteAPI = true;
	SC_Cpp__WriteFunctionHeader(F, fs);
	SC__Cpp_WriteAPI = false;
}

void SC_Cpp_WriteAPIHeader(Cpp_Export* self, JB_File* destfile) {
	if ((!(destfile != nil))) {
		return;
	}
	FastStringCpp* fs = JB_Incr(SC_FastStringCpp__New(JB_LUB[0]));
	JB_String* _tmPf14 = JB_Incr(SC_Cpp__CppLicence());
	JB_FS_AppendString(fs, _tmPf14);
	JB_Decr(_tmPf14);
	JB_FS_AppendString(fs, JB_LUB[1055]);
	{
		Array* _LoopSrcf6 = JB_Incr(SC__Comp_API_List);
		int _if5 = 0;
		while (_if5 < JB_Array_Size(_LoopSrcf6)) {
			Message* m = JB_Incr(((Message*)JB_Array_Value(_LoopSrcf6, _if5)));
			if (JB_Msg_SyntaxEquals(m, JB_LUB[571], false)) {
				Message* f = JB_Incr(((Message*)JB_Ring_First(m)));
				SCClass* cls = JB_Incr(SC_Comp__SyntaxAccess(f));
				JB_Decr(f);
				if ((!cls)) {
					JB_Decr(fs);
					JB_Decr(_LoopSrcf6);
					JB_Decr(m);
					JB_Decr(cls);
					return;
				}
				if (SC_Class_IsObject(cls)) {
					//;
					JB_FS_AppendString(fs, JB_LUB[1056]);
					JB_String* _tmPf15 = JB_Incr(SC_Class_APIStructName(cls));
					JB_FS_AppendString(fs, _tmPf15);
					JB_Decr(_tmPf15);
					JB_FS_AppendString(fs, JB_LUB[1057]);
					//;
				}
				 else if (cls->IsDataType) {
					//;
					JB_FS_AppendString(fs, JB_LUB[1058]);
					JB_String* _tmPf16 = JB_Incr(SC_Class_CStructName(cls->Super));
					JB_FS_AppendString(fs, _tmPf16);
					JB_Decr(_tmPf16);
					JB_FS_AppendByte(fs, ' ');
					JB_String* _tmPf17 = JB_Incr(SC_Class_APIStructName(cls));
					JB_FS_AppendString(fs, _tmPf17);
					JB_Decr(_tmPf17);
					JB_FS_AppendString(fs, JB_LUB[1022]);
					//;
				}
				 else {
					if ((!false)) {
						JB_Msg_SyntaxExpect(m, JB_LUB[1059]);
					}
				}
				JB_Decr(cls);
			}
			JB_Decr(m);
			_if5++;
		};
		JB_Decr(_LoopSrcf6);
	}
	;
	SCClass* PrevCls = nil;
	{
		Array* _LoopSrcf9 = JB_Incr(SC__Comp_API_Funcs);
		int _if8 = 0;
		while (_if8 < JB_Array_Size(_LoopSrcf9)) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf9, _if8)));
			if (f->Cls != PrevCls) {
				JB_SetRef(PrevCls, f->Cls);
				JB_FS_AppendString(fs, JB_LUB[1060]);
				if (PrevCls) {
					JB_FS_AppendString(fs, PrevCls->Name);
				}
				 else {
					JB_FS_AppendString(fs, JB_LUB[1061]);
				}
				JB_FS_AppendString(fs, JB_LUB[1062]);
			}
			if ((!f->IsWrapper)) {
				SC_Cpp_WriteAPIFuncHeader(self, f, fs);
			}
			JB_FS_AppendByte(fs, ';');
			if (JB_Str_Exists(f->Description)) {
				//;
				JB_FS_AppendString(fs, JB_LUB[1063]);
				JB_FS_AppendString(fs, f->Description);
				JB_FS_AppendString(fs, JB_LUB[1064]);
				//;
			}
			JB_Decr(f);
			JB_FS_AppendByte(fs, '\n');
			_if8++;
		};
		JB_Decr(_LoopSrcf9);
	}
	;
	JB_Decr(PrevCls);
	if (JB_Array_SyntaxCast(SC__Comp_SyxArray)) {
		JB_FS_AppendString(fs, JB_LUB[1065]);
		{
			Array* _LoopSrcf12 = JB_Incr(SC__Comp_SyxArray);
			int _if11 = 0;
			while (_if11 < JB_Array_Size(_LoopSrcf12)) {
				JB_String* s = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf12, _if11)));
				JB_String* slower = JB_Incr(JB_Str_LowerCase(s));
				SyntaxObj* _tmPf18 = JB_Incr(((SyntaxObj*)JB_Dict_ValueStr(JB__SyxDict_, slower)));
				int id = ((int)_tmPf18->ID);
				JB_Decr(_tmPf18);
				//;
				JB_FS_AppendString(fs, JB_LUB[1066]);
				JB_FS_AppendString(fs, s);
				JB_Decr(s);
				JB_FS_AppendByte(fs, ' ');
				JB_FS_AppendInt32(fs, id);
				JB_FS_AppendString(fs, JB_LUB[1022]);
				//;
				//;
				JB_FS_AppendString(fs, JB_LUB[1067]);
				JB_FS_AppendString(fs, slower);
				JB_Decr(slower);
				JB_FS_AppendByte(fs, ' ');
				JB_FS_AppendInt32(fs, id);
				JB_FS_AppendByte(fs, '\n');
				//;
				_if11++;
			};
			JB_Decr(_LoopSrcf12);
		};
	}
	JB_FS_AppendString(fs, JB_LUB[1068]);
	JB_String* _tmPf19 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	SC_Cpp__SmartWrite(_tmPf19, destfile);
	JB_Decr(_tmPf19);
}

void SC_Cpp_WriteHeader(Cpp_Export* self) {
	FastStringCpp* fs = JB_Incr(SC_FastStringCpp__New(JB_LUB[0]));
	JB_FS_AppendString(fs, JB_LUB[1069]);
	JB_String* _tmPf6 = JB_Incr(SC_Cpp__CppLicence());
	JB_FS_AppendString(fs, _tmPf6);
	JB_Decr(_tmPf6);
	JB_FS_AppendString(fs, JB_LUB[1070]);
	{
		Array* _LoopSrcf1 = JB_Incr(SC__Cpp_H_Input);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			JB_String* h = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf1, _if0)));
			JB_FS_includeh(fs, h);
			JB_Decr(h);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	JB_FS_AppendString(fs, JB_LUB[1071]);
	{
		Array* _LoopSrcf4 = JB_Incr(self->Outputs_h);
		int _if3 = 0;
		while (_if3 < JB_Array_Size(_LoopSrcf4)) {
			FastStringCpp* f = JB_Incr(((FastStringCpp*)JB_Array_Value(_LoopSrcf4, _if3)));
			JB_FS_AppendFastString(fs, f);
			JB_Decr(f);
			JB_FS_AppendByte(fs, '\n');
			_if3++;
		};
		JB_Decr(_LoopSrcf4);
	}
	;
	JB_FS_AppendString(fs, JB_LUB[1072]);
	JB_String* _tmPf7 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_File* _tmPf8 = JB_Incr(SC_Cpp__HProduct());
	SC_Cpp__SmartWrite(_tmPf7, _tmPf8);
	JB_Decr(_tmPf8);
	JB_Decr(_tmPf7);
}

Cpp_Export* SC_Cpp__Alloc() {
	return ((Cpp_Export*)JB_New(Cpp_Export));
}

JB_File* SC_Cpp__APIHeader() {
	Message* arg = JB_Incr(JB_Msg_NeedSyxInt(SC__Comp_API_Place, JB_SyxArg, -1));
	Message* _tmPf1 = JB_Incr(JB_Msg_FindFlat(arg, JB_SyxTmp, JB_LUB[570], false));
	Message* ForLib = JB_Incr(JB_Msg_NeedSyx(_tmPf1, JB_SyxStr));
	JB_Decr(_tmPf1);
	if ((!ForLib)) {
		JB_Decr(arg);
		JB_Decr(ForLib);
		return nil;
	}
	JB_Decr(ForLib);
	Message* _tmPf2 = JB_Incr(JB_Msg_FindFlat(arg, JB_SyxTmp, JB_LUB[572], false));
	Message* FolName = JB_Incr(JB_Msg_NeedSyx(_tmPf2, JB_SyxStr));
	JB_Decr(_tmPf2);
	if ((!FolName)) {
		JB_Decr(arg);
		JB_Decr(FolName);
		return nil;
	}
	JB_File* Fol = JB_Incr(JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, FolName->Name, false));
	JB_Decr(FolName);
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[1073]);
	JB_String* _tmPf3 = JB_Incr(JB_Msg_FileLocation(arg));
	JB_Decr(arg);
	JB_FS_AppendString(_fsf0, _tmPf3);
	JB_Decr(_tmPf3);
	JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	if ((!JB_File_MustExist(Fol, _tmPf4))) {
		JB_Decr(Fol);
		JB_Decr(_tmPf4);
		return nil;
	}
	JB_Decr(_tmPf4);
	JB_String* _tmPf5 = JB_Incr(JB_Str_OperatorPlus(SC__Comp_ProjectName, JB_LUB[1074]));
	JB_File* _tmPf6 = JB_Incr(JB_File_SyntaxAccess(Fol, _tmPf5, false));
	JB_Decr(_tmPf5);
	JB_Decr(Fol);
	JB_SafeDecr(_tmPf6);
	return _tmPf6;
}

void SC_Cpp__C_FSListComma(Message* self, FastStringCpp* fs) {
	{
		Message* item = JB_Incr(((Message*)JB_Tree_First_(self)));
		Message* _firstf2 = JB_Incr(item);
		while (item) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(item)));
			if (_firstf2 != item) {
				JB_FS_AppendString(fs, JB_LUB[164]);
			}
			//start;
			JB_Msg_Export(item, fs);
			JB_SetRef(item, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(_firstf2);
		JB_Decr(item);
		(self);
	};
}

bool SC_Cpp__C_OneParamType(FastStringCpp* fs, Message* Curr, SCDecl* D) {
	SCClass* ActualType = JB_Incr(SC_ClassOfObjForC(Curr));
	if ((!ActualType)) {
		JB_Decr(ActualType);
		return nil;
	}
	if (ActualType != D->Type) {
		JB_FS_AppendByte(fs, '(');
		JB_FS_AppendByte(fs, '(');
		SC_Cpp__WriteDeclNoName(D, fs);
		JB_FS_AppendByte(fs, ')');
		JB_Decr(ActualType);
		return true;
	}
	JB_Decr(ActualType);
	return false;
}

void SC_Cpp__C_ParamsRender(Message* self, FastStringCpp* fs) {
	JB_FS_AppendByte(fs, '(');
	SC_Cpp__C_FSListComma(self, fs);
	JB_FS_AppendByte(fs, ')');
}

void SC_Cpp__C_RenderAcc(Message* self, FastStringCpp* fs) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_Msg_Export(_tmPf0, fs);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(fs, '[');
	Message* _tmPf2 = JB_Incr(((Message*)JB_Tree_Get(self, 1)));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(_tmPf2)));
	JB_Decr(_tmPf2);
	JB_Msg_Export(_tmPf1, fs);
	JB_Decr(_tmPf1);
	JB_FS_AppendByte(fs, ']');
}

void SC_Cpp__C_RenderArg(Message* self, FastStringCpp* fs) {
	JB_Object* d = self->Obj;
	JB_FS_AppendByte(fs, '{');
	fs->Indent++;
	{
		Message* ch = ((Message*)JB_Tree_First_(self));
		while (ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(ch));
			JB_FS_AppendIndent(fs);
			JB_Msg_Export(ch, fs);
			if ((!(JB_Msg_OperatorIsTmp(ch, JB_LUB[689]) or (JB_Msg_OperatorIsTmp(ch, JB_LUB[1075]) or JB_Msg_OperatorIsTmp(ch, JB_LUB[1076]))))) {
				JB_FS_AppendByte(fs, ';');
			}
			ch = _Nf1;
		};
		(self);
	}
	;
	fs->Indent--;
	JB_FS_AppendIndent(fs);
	JB_FS_AppendByte(fs, '}');
	if (((Message*)JB_Ring_NextSib(self))) {
		JB_FS_AppendIndent(fs);
	}
}

void SC_Cpp__C_RenderArl(Message* self, FastStringCpp* fs) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_Msg_Export(_tmPf0, fs);
	JB_Decr(_tmPf0);
	if ((!JB_Str_Equals(self->Name, JB_LUB[417], false))) {
		JB_FS_AppendString(fs, self->Name);
	}
}

void SC_Cpp__C_RenderBak(Message* self, FastStringCpp* fs) {
	JB_FS_AppendString(fs, self->Name);
}

void SC_Cpp__C_RenderBra(Message* self, FastStringCpp* fs) {
	JB_FS_AppendByte(fs, '(');
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_Msg_Export(_tmPf0, fs);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(fs, ')');
}

void SC_Cpp__C_RenderBrl(Message* self, FastStringCpp* fs) {
	JB_FS_AppendByte(fs, '(');
	JB_String* s = JB_Incr(self->Name);
	if (JB_Str_Equals(s, kSC_BitNot, false)) {
		JB_SetRef(s, JB_LUB[517]);
	}
	JB_FS_AppendString(fs, s);
	JB_Decr(s);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	SC_Cpp__RenderInBracketsIfRel(_tmPf0, fs);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(fs, ')');
}

void SC_Cpp__C_RenderChr(Message* self, FastStringCpp* fs) {
	JB_FS_AppendByte(fs, '\'');
	byte b = JB_Str_ByteValue(self->Name, 0);
	if ((b < 32) and ((b != 9) and (b != 10))) {
		JB_FS_AppendString(fs, JB_LUB[1077]);
		JB_FS_AppendHex(fs, b, 2);
	}
	 else {
		JB_String* _tmPf0 = JB_Incr(JB_Str_EscapeChr(self->Name));
		JB_FS_AppendString(fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_FS_AppendByte(fs, '\'');
}

void SC_Cpp__C_RenderDcl(Message* self, FastStringCpp* fs) {
	Message* name = JB_Incr(JB_Msg_GetDclName(self));
	SCDecl* d = JB_Incr(JB_Msg_AsDecl(name));
	JB_Decr(name);
	if ((!d)) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(d);
		return;
	}
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(self)));
	Message* _tmPf0 = JB_Incr(SC_DeclsDefault(_tmPf1));
	JB_Decr(_tmPf1);
	SC_Cpp__WriteDecl(d, fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Decr(d);
}

void SC_Cpp__C_RenderDot(Message* self, FastStringCpp* fs) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(self)));
	JB_Object* Backup = JB_Incr(_tmPf0->Obj);
	JB_Decr(_tmPf0);
	if (JB_Object_FastIsa(Backup, JB_AsClass(SCFunction))) {
		JB_Decr(Backup);
		return;
	}
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_Object* obj = JB_Incr(self->Obj);
	if (JB_Object_MustBe(obj, JB_AsClass(SCDecl), nil)) {
		if ((!JB_Str_Exists(((SCDecl*)obj)->Name))) {
			if ((!((JB_Object_Isa(Backup, JB_AsClass(SCDecl))) and JB_Str_Exists(((SCDecl*)Backup)->Name)))) {
				JB_Msg_SyntaxExpect(self, JB_LUB[1078]);
				JB_Decr(Backup);
				JB_Decr(ch);
				JB_Decr(obj);
				return;
			}
			JB_SetRef(obj, ((SCDecl*)Backup));
		}
		if (JB_Object_FastIsa(ch->Obj, JB_AsClass(SCModule))) {
			JB_Str_safe(((SCDecl*)obj)->Name, fs);
		}
		 else {
			JB_String* CloseStr = JB_Incr(SC_Cpp__CDotType(self, ((SCDecl*)obj), fs));
			JB_Msg_Export(ch, fs);
			SCDecl* ch_decl = JB_Incr(SC_DeclOfObjForC(ch));
			if (((bool)ch_decl) and SC_Cpp__NeedsDotForC(ch_decl)) {
				JB_FS_AppendByte(fs, '.');
			}
			 else {
				JB_FS_AppendString(fs, JB_LUB[1079]);
			}
			JB_Decr(ch_decl);
			JB_Str_safe(((SCDecl*)obj)->Name, fs);
			JB_FS_AppendString(fs, CloseStr);
			JB_Decr(CloseStr);
		}
	}
	JB_Decr(obj);
	JB_Decr(ch);
	JB_Decr(Backup);
}

void SC_Cpp__C_RenderFnc(Message* self, FastStringCpp* fs) {
	Message* F = ((Message*)JB_Ring_First(self));
	Message* ch1 = ((Message*)JB_Ring_NextSib(F));
	SCFunction* fn = ((SCFunction*)ch1->Obj);
	bool PostBracket = false;
	if ((JB_Object_FastIsa(fn, JB_AsClass(SCFunction))) and (!fn->ProtoType)) {
		if (((bool)((SCFunction*)fn)->ReturnType) and ((!JB_Msg_EqualsSyx(((Message*)JB_Ring_Parent(self)), JB_SyxArg, false)))) {
			PostBracket = SC_Cpp__C_OneParamType(fs, self, JB_Msg_AsDecl(self));
		}
		JB_FS_AppendString(fs, ((SCFunction*)fn)->ExportName);
	}
	 else {
		JB_Msg_Export(F, fs);
	}
	SC_Cpp__C_ParamsRender(ch1, fs);
	if (PostBracket) {
		JB_FS_AppendByte(fs, ')');
	}
}

void SC_Cpp__C_RenderItem(Message* self, FastStringCpp* fs) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Tree_Get(self, 1)));
	JB_Msg_Export(_tmPf0, fs);
	JB_Decr(_tmPf0);
}

void SC_Cpp__C_RenderList(Message* self, FastStringCpp* fs) {
	JB_Object* d = self->Obj;
	if (JB_Object_FastIsa(d, JB_AsClass(SCDecl))) {
		JB_FS_AppendString(fs, ((SCDecl*)d)->Type->Name);
		JB_Msg_MiniArgCpp(self, fs);
	}
}

void SC_Cpp__C_RenderNum(Message* self, FastStringCpp* fs) {
	JB_FS_AppendString(fs, self->Name);
	SCDecl* d = JB_Incr(JB_Msg_AsDecl(self));
	if ((!d)) {
		JB_Decr(d);
		return;
	}
	if (d->Type->TypeInfo == kJB__TC_Float) {
		JB_FS_AppendByte(fs, 'f');
	}
	JB_Decr(d);
}

void SC_Cpp__C_RenderOpp(Message* self, FastStringCpp* fs) {
	JB_String* s = JB_Incr(self->Name);
	if (JB_Str_Equals(s, kSC_BitOr, false)) {
		JB_FS_AppendByte(fs, '|');
	}
	 else if (JB_Str_Equals(s, kSC_BitAnd, false)) {
		JB_FS_AppendByte(fs, '&');
	}
	 else if (JB_Str_Equals(s, kSC_BitXor, false)) {
		JB_FS_AppendByte(fs, '^');
	}
	 else if (JB_Str_Equals(s, kSC_BitNot, false)) {
		JB_FS_AppendByte(fs, '~');
	}
	 else if (JB_Str_Equals(s, JB_LUB[625], false)) {
		JB_FS_AppendByte(fs, '%');
	}
	 else {
		JB_FS_AppendString(fs, s);
	}
	JB_Decr(s);
}

void SC_Cpp__C_RenderRel(Message* self, FastStringCpp* fs) {
	Message* first = JB_Incr(((Message*)JB_Ring_First(self)));
	Message* ch = JB_Incr(first);
	JB_Decr(first);
	SC_Cpp__RenderInBracketsIfRel(ch, fs);
	JB_FS_AppendByte(fs, ' ');
	JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
	JB_Msg_Export(ch, fs);
	JB_FS_AppendByte(fs, ' ');
	JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
	SC_Cpp__RenderInBracketsIfRel(ch, fs);
	JB_Decr(ch);
}

void SC_Cpp__C_RenderShe(Message* self, FastStringCpp* fs) {
	JB_FS_AppendString(fs, JB_LUB[524]);
	JB_FS_AppendString(fs, self->Name);
}

void SC_Cpp__C_RenderSStr(Message* self, FastStringCpp* fs) {
	JB_FS_AppendString(fs, JB_LUB[1080]);
	JB_FS_AppendInt32(fs, SC_Cpp__SyntaxAccess(self->Name));
	JB_FS_AppendByte(fs, ']');
}

void SC_Cpp__C_RenderStr(Message* self, FastStringCpp* fs) {
	JB_FS_AppendCpp(fs, self->Name);
}

void SC_Cpp__C_RenderThg(Message* self, FastStringCpp* fs) {
	JB_Object* o = JB_Incr(self->Obj);
	if (JB_Object_FastIsa(o, JB_AsClass(SCDecl))) {
		SC_Cpp__WriteThgMaybeTypeToo(self, ((SCDecl*)o), fs);
		JB_Decr(o);
		return;
	}
	if (JB_Object_FastIsa(o, JB_AsClass(SCModule))) {
		SCClass* cls = JB_Incr(((SCModule*)o)->Cls);
		if (cls) {
			bool InAlloc = SC_Func_OperatorIsa(SC__Func_CurrFunc, kSC_IsAlloc);
			if ((!InAlloc)) {
				JB_FS_AppendString(fs, JB_LUB[1081]);
			}
			JB_String* _tmPf0 = JB_Incr(SC_Class_CStructName(cls));
			JB_FS_AppendString(fs, _tmPf0);
			JB_Decr(_tmPf0);
			if ((!InAlloc)) {
				JB_FS_AppendByte(fs, ')');
			}
			JB_Decr(o);
			JB_Decr(cls);
			return;
		}
		JB_Decr(cls);
	}
	JB_Decr(o);
	JB_Msg_safe(self, fs);
}

void SC_Cpp__C_RenderTmp(Message* self, FastStringCpp* fs) {
	JB_String* name = self->Name;
	if (JB_Str_Equals(name, JB_LUB[1082], false)) {
		JB_FS_AppendString(fs, JB_LUB[1083]);
	}
	 else if (JB_Str_Equals(name, JB_LUB[1075], false)) {
		JB_FS_AppendString(fs, JB_LUB[1084]);
	}
	 else if (JB_Str_Equals(name, JB_LUB[652], false)) {
		return;
	}
	 else if (JB_Str_Equals(name, JB_LUB[690], false)) {
		0;
	}
	 else if (JB_Str_Equals(name, JB_LUB[1085], false)) {
		JB_FS_AppendString(fs, JB_LUB[1086]);
		JB_DoAt(1);
		SC_Cpp__C_ParamsRender(self, fs);
		return;
	}
	 else {
		JB_FS_AppendString(fs, name);
	}
	{
		Message* mv = ((Message*)JB_Tree_First_(self));
		while (mv) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(mv));
			JB_FS_AppendByte(fs, ' ');
			JB_Msg_Export(mv, fs);
			mv = _Nf1;
		};
		(self);
	};
}

void SC_Cpp__C_RenderTyp(Message* self, FastStringCpp* fs) {
	int Saveness = SC_Cpp__DontNeedMoreBrackets(self);
	Message* fc = JB_Incr(((Message*)JB_Ring_First(self)));
	if (Saveness == kSC__Cpp_NeedsNoBrackets) {
		JB_Msg_Export(fc, fs);
		JB_Decr(fc);
		return;
	}
	if (Saveness == kSC__Cpp_NeedsOuterBrackets) {
		JB_FS_AppendByte(fs, '(');
	}
	SC_Cpp__WriteDeclBrackets(self, fs);
	if (JB_Msg_EqualsSyx(fc, JB_SyxRel, false)) {
		JB_FS_AppendByte(fs, '(');
	}
	if (JB_Msg_EqualsSyx(fc, JB_SyxArg, false)) {
		JB_Msg_MiniArgCpp(fc, fs);
	}
	 else {
		JB_Msg_Export(fc, fs);
	}
	if (JB_Msg_EqualsSyx(fc, JB_SyxRel, false)) {
		JB_FS_AppendByte(fs, ')');
	}
	JB_Decr(fc);
	if (Saveness == kSC__Cpp_NeedsOuterBrackets) {
		JB_FS_AppendByte(fs, ')');
	}
}

void SC_Cpp__C_RenderUnt(Message* self, FastStringCpp* fs) {
	if ((!(JB_Msg_SyntaxEquals(self, JB_LUB[317], false)))) {
		JB_Object_SyntaxExpect(nil);
		return;
	}
	Message* num = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_String* s = JB_Incr(JB_Str_ReplaceAll(num->Name, JB_LUB[568], JB_LUB[0], false, nil));
	JB_Decr(num);
	JB_FS_AppendString(fs, JB_LUB[472]);
	if ((((bool)(JB_Str_Length(s) % 2))) and JB_byte_IsLetter(JB_Str_ByteValue(s, 0))) {
		JB_FS_AppendByte(fs, '0');
	}
	JB_FS_AppendString(fs, s);
	JB_Decr(s);
}

JB_String* SC_Cpp__CDotType(Message* msg, SCDecl* Type, FastStringCpp* fs) {
	if ((!SC_Decl_SyntaxIs(Type, kSC__SCDeclInfo_upgradeablecontained))) {
		return nil;
	}
	JB_FS_AppendByte(fs, '(');
	SC_Cpp__WriteDeclNoName(Type, fs);
	JB_FS_AppendString(fs, JB_LUB[1087]);
	return JB_LUB[480];
}

JB_String* SC_Cpp__CppLicence() {
	if ((!JB_Str_Exists(SC__Cpp_CppLicenceStr))) {
		JB_File* f = JB_Incr(SC_Comp__InputFile(nil, JB_LUB[1088], nil));
		JB_SetRef(SC__Cpp_CppLicenceStr, JB_File_ReadAll(f, 16384, true));
		JB_Decr(f);
		if ((!(JB_Str_Exists(SC__Cpp_CppLicenceStr)))) {
			JB_SetRef(SC__Cpp_CppLicenceStr, JB_LUB[170]);
		}
	}
	return SC__Cpp_CppLicenceStr;
}

JB_File* SC_Cpp__CppProduct() {
	JB_File* _tmPf0 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_File* _tmPf1 = JB_Incr(JB_File_SyntaxAccess(_tmPf0, JB_LUB[1089], false));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Cpp__CreateClassListFunc(FastString* dest) {
	FastStringCpp* fs = JB_Incr(SC_FastStringCpp__New(JB_LUB[0]));
	SC_Cpp__CreateClassListHeader(fs, JB_LUB[1090]);
	{
		Array* _LoopSrcf1 = JB_Incr(SC__Comp_ClassList);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf1, _if0)));
			if (SC_Class_IsSaveableObject(c) and ((bool)c->CurrReacher)) {
				JB_FS_AppendString(fs, JB_LUB[1091]);
				JB_String* _tmPf3 = JB_Incr(SC_Class_CStructName(c));
				JB_FS_AppendString(fs, _tmPf3);
				JB_Decr(_tmPf3);
				JB_FS_AppendString(fs, JB_LUB[1092]);
				SC_Class_RenderSaveable(c, fs);
				JB_FS_AppendString(fs, JB_LUB[1093]);
			}
			JB_Decr(c);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	JB_FS_AppendString(fs, JB_LUB[1094]);
	JB_String* _tmPf4 = JB_Incr(SC_Cpp__SplitCpp(fs, JB_LUB[1095]));
	JB_Decr(fs);
	JB_FS_AppendString(dest, _tmPf4);
	JB_Decr(_tmPf4);
}

void SC_Cpp__CreateClassListHeader(FastString* fs, JB_String* s) {
	JB_FS_AppendString(fs, JB_LUB[1096]);
	JB_FS_AppendString(fs, s);
}

int SC_Cpp__DontNeedMoreBrackets(Message* msg) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(msg)));
	if (JB_Msg_EqualsSyx(_tmPf0, JB_SyxRel, false)) {
		JB_Decr(_tmPf0);
		return kSC__Cpp_NeedsOuterBrackets;
	}
	JB_Decr(_tmPf0);
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(msg)));
	int Result = kSC__Cpp_NeedsOuterBrackets;
	while (JB_Msg_EqualsSyx(P, JB_SyxBra, false)) {
		JB_SetRef(P, ((Message*)JB_Ring_Parent(P)));
		Result = kSC__Cpp_NeedsInnerBrackets;
	};
	if (JB_Msg_OperatorIsBRel(P, JB_LUB[679])) {
		JB_Decr(P);
		return kSC__Cpp_NeedsNoBrackets;
	}
	if (JB_Msg_OperatorIsTmp(P, JB_LUB[689]) or JB_Msg_OperatorIsTmp(P, JB_LUB[597])) {
		JB_Decr(P);
		return kSC__Cpp_NeedsNoBrackets;
	}
	JB_Decr(P);
	return Result;
}

bool SC_Cpp__DoSavers() {
	return SC_Comp__Reached(JB_LUB[1097]) and SC_Comp__Reached(JB_LUB[1098]);
}

void SC_Cpp__ExportAllSource() {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	Cpp_Export* exp = JB_Incr(SC_Cpp__New());
	SC_Cpp_PreRun(exp);
	SC_Cpp_Run(exp);
	SC_Cpp_ExportSyx(exp);
	SC_Cpp_WriteHeader(exp);
	SC_Cpp_DoInterpreter(exp);
	SC_Cpp_FinalMergeOutputIntoACpp(exp);
	JB_Decr(exp);
}

void SC_Cpp__GenLub(FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[1099]);
	JB_FS_AppendInt32(fs, SC__Cpp_StringCount + 1);
	JB_FS_AppendString(fs, JB_LUB[1100]);
}

void SC_Cpp__GenStrings(FastString* fs) {
	SC_Cpp__GenLub(fs);
	JB_FS_AppendString(fs, JB_LUB[1101]);
	JB_FS_AppendFastString(fs, SC__Cpp_StringLengths);
	JB_FS_AppendString(fs, JB_LUB[1102]);
	JB_FS_AppendString(fs, JB_LUB[1103]);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(SC__Cpp_StringBlob));
	JB_FS_AppendCppAll(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendString(fs, JB_LUB[1104]);
	JB_SetRef(SC__Cpp_StringLengths, nil);
	JB_SetRef(SC__Cpp_StringBlob, nil);
	JB_SetRef(SC__Cpp_StringDict, nil);
}

JB_File* SC_Cpp__HProduct() {
	JB_File* _tmPf0 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_File* _tmPf1 = JB_Incr(JB_File_SyntaxAccess(_tmPf0, JB_LUB[1019], false));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Cpp__Init() {
	SC__Cpp_WroteAny = false;
	JB_SetRef(SC__Cpp_Cpp_Includes, (JB_Array__New0()));
	(JB_Syx_ExportAddrSet(JB_SyxAcc, ((fpMsgRender)SC_Cpp__C_RenderAcc)));
	(JB_Syx_ExportAddrSet(JB_SyxItem, ((fpMsgRender)SC_Cpp__C_RenderItem)));
	(JB_Syx_ExportAddrSet(JB_SyxList, ((fpMsgRender)SC_Cpp__C_RenderList)));
	(JB_Syx_ExportAddrSet(JB_SyxPrm, ((fpMsgRender)SC_Cpp__C_RenderList)));
	(JB_Syx_ExportAddrSet(JB_SyxArg, ((fpMsgRender)SC_Cpp__C_RenderArg)));
	(JB_Syx_ExportAddrSet(JB_SyxDot, ((fpMsgRender)SC_Cpp__C_RenderDot)));
	(JB_Syx_ExportAddrSet(JB_SyxDecl, ((fpMsgRender)SC_Cpp__C_RenderDcl)));
	(JB_Syx_ExportAddrSet(JB_SyxFunc, ((fpMsgRender)SC_Cpp__C_RenderFnc)));
	(JB_Syx_ExportAddrSet(JB_SyxThg, ((fpMsgRender)SC_Cpp__C_RenderThg)));
	(JB_Syx_ExportAddrSet(JB_SyxType, ((fpMsgRender)SC_Cpp__C_RenderTyp)));
	(JB_Syx_ExportAddrSet(JB_SyxTmp, ((fpMsgRender)SC_Cpp__C_RenderTmp)));
	(JB_Syx_ExportAddrSet(JB_SyxOpp, ((fpMsgRender)SC_Cpp__C_RenderOpp)));
	(JB_Syx_ExportAddrSet(JB_SyxBRel, ((fpMsgRender)SC_Cpp__C_RenderBrl)));
	(JB_Syx_ExportAddrSet(JB_SyxRel, ((fpMsgRender)SC_Cpp__C_RenderRel)));
	(JB_Syx_ExportAddrSet(JB_SyxNum, ((fpMsgRender)SC_Cpp__C_RenderNum)));
	(JB_Syx_ExportAddrSet(JB_SyxUnit, ((fpMsgRender)SC_Cpp__C_RenderUnt)));
	(JB_Syx_ExportAddrSet(JB_SyxBra, ((fpMsgRender)SC_Cpp__C_RenderBra)));
	(JB_Syx_ExportAddrSet(JB_SyxARel, ((fpMsgRender)SC_Cpp__C_RenderArl)));
	(JB_Syx_ExportAddrSet(JB_SyxChar, ((fpMsgRender)SC_Cpp__C_RenderChr)));
	(JB_Syx_ExportAddrSet(JB_SyxStr, ((fpMsgRender)SC_Cpp__C_RenderStr)));
	(JB_Syx_ExportAddrSet(JB_SyxSStr, ((fpMsgRender)SC_Cpp__C_RenderSStr)));
	(JB_Syx_ExportAddrSet(JB_SyxBack, ((fpMsgRender)SC_Cpp__C_RenderBak)));
	(JB_Syx_ExportAddrSet(JB_SyxSheb, ((fpMsgRender)SC_Cpp__C_RenderShe)));
}

int SC_Cpp__Init_() {
	{
		SC__Cpp_StringCount = 0;
		SC__Cpp_WriteAPI = false;
		SC__Cpp_WroteAny = false;
		JB_SetRef(SC__Cpp_H_Input, JB_Array__New0());
		JB_SetRef(SC__Cpp_H_PostInput, JB_Array__New0());
		JB_SetRef(SC__Cpp_Cpp_Input, JB_Array__New0());
		JB_SetRef(SC__Cpp_Cpp_Includes, JB_Array__New0());
		JB_SetRef(SC__Cpp_CppLicenceStr, JB_LUB[0]);
	}
	;
	return 0;
}

int SC_Cpp__InitCode_() {
	return 0;
}

bool SC_Cpp__MsgOKToImprove(Message* msg) {
	Message* p = ((Message*)JB_Ring_Parent(msg));
	if (JB_Msg_EqualsSyx(p, JB_SyxPrm, false)) {
		return (JB_Msg_AsFunc(p) != SC__Comp_RefSetRef);
	}
	if ((JB_Msg_EqualsSyx(p, JB_SyxRel, false)) and (msg == ((Message*)JB_Ring_First(p)))) {
		return false;
	}
	return true;
}

bool SC_Cpp__NeedsDotForC(SCDecl* d) {
	if (d->PointerCount) {
		return nil;
	}
	if (d->Type->IsStruct) {
		return true;
	}
	return false;
}

Cpp_Export* SC_Cpp__New() {
	Cpp_Export* __rz__ = ((Cpp_Export*)SC_Cpp__Alloc());
	if (__rz__) {
		SC_Cpp_Constructor(__rz__);
	}
	return __rz__;
}

JB_File* SC_Cpp__Product(JB_String* name) {
	JB_File* _tmPf0 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_File* _tmPf1 = JB_Incr(JB_File_SyntaxAccess(_tmPf0, name, false));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Cpp__RenderInBracketsIfRel(Message* self, FastStringCpp* fs) {
	if (JB_Msg_EqualsSyx(self, JB_SyxRel, false)) {
		JB_FS_AppendByte(fs, '(');
	}
	JB_Msg_Export(self, fs);
	if (JB_Msg_EqualsSyx(self, JB_SyxRel, false)) {
		JB_FS_AppendByte(fs, ')');
	}
}

void SC_Cpp__SmartWrite(JB_String* S, JB_File* F) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(((int64)JB_Str_CRC(S, 0)), nil));
	JB_Array_SyntaxAppend(SC__Cpp_Cpp_Includes, _tmPf0);
	JB_Decr(_tmPf0);
	if ((!(F != nil))) {
		return;
	}
	if (JB_File_StrMatch(F, S)) {
		return;
	}
	SC__Cpp_WroteAny = true;
	(JB_File_DataSet(F, S));
}

JB_String* SC_Cpp__SplitCpp(FastStringCpp* fs, JB_String* name) {
	JB_Incr(name);
	if (SC__Options_SingleCppOutput) {
		JB_Decr(name);
		return JB_FS_SyntaxCast(fs);
	}
	if ((!(fs->Length > 1))) {
		JB_Decr(name);
		return nil;
	}
	JB_SetRef(name, JB_Str_OperatorPlus(name, JB_LUB[1105]));
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_File* _tmPf1 = JB_Incr(SC_Cpp__Product(name));
	SC_Cpp__SmartWrite(_tmPf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_FS_includeh(fs, name);
	JB_Decr(name);
	return JB_FS_SyntaxCast(fs);
}

int SC_Cpp__SyntaxAccess(JB_String* name) {
	int rz = 0;
	if ((!JB_Str_Exists(name))) {
		return nil;
	}
	DTWrap* _tmPf0 = JB_Incr(((DTWrap*)JB_Dict_ValueStr(SC__Cpp_StringDict, name)));
	rz = ((int)JB_Wrap_Value(_tmPf0));
	JB_Decr(_tmPf0);
	if (rz) {
		return rz;
	}
	rz = (++SC__Cpp_StringCount);
	DTWrap* _tmPf1 = JB_Incr(JB_Wrap__NewInt(rz));
	(JB_Dict_ValueSet(SC__Cpp_StringDict, name, _tmPf1));
	JB_Decr(_tmPf1);
	JB_FS_AppendString(SC__Cpp_StringBlob, name);
	JB_FS_AppendByte(SC__Cpp_StringBlob, ((byte)0));
	JB_FS_AppendInt32(SC__Cpp_StringLengths, JB_Str_Length(name));
	JB_FS_AppendString(SC__Cpp_StringLengths, JB_LUB[164]);
	return rz;
}

void SC_Cpp__WriteClass(SCClass* C, FastStringCpp* T) {
	if (SC__Cpp_WriteAPI) {
		JB_String* _tmPf0 = JB_Incr(SC_Class_APIStructName(C));
		JB_FS_AppendString(T, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_String* _tmPf1 = JB_Incr(SC_Class_CStructName(C));
		JB_FS_AppendString(T, _tmPf1);
		JB_Decr(_tmPf1);
	}
	if (SC_Class_IsObject(C)) {
		JB_FS_AppendByte(T, '*');
	}
}

void SC_Cpp__WriteConst(SCDecl* D, FastStringCpp* T) {
	JB_FS_AppendString(T, JB_LUB[1106]);
	JB_Str_safe(D->Name, T);
	JB_FS_AppendString(T, JB_LUB[980]);
	JB_Msg_Export(D->Default, T);
	JB_FS_AppendByte(T, ')');
}

void SC_Cpp__WriteDecl(SCDecl* D, FastStringCpp* T, Message* equality) {
	if ((!D)) {
		JB_FS_AppendString(T, JB_LUB[1107]);
		return;
	}
	SC_Cpp__WriteDeclNoName(D, T);
	if (JB_Str_Exists(D->Name)) {
		JB_FS_AppendByte(T, ' ');
		JB_Str_safe(D->Name, T);
		if (D->C_Array) {
			JB_FS_AppendByte(T, '[');
			JB_FS_AppendInt32(T, ((int)D->C_Array));
			JB_FS_AppendByte(T, ']');
		}
	}
	if (equality) {
		JB_FS_AppendString(T, JB_LUB[971]);
		JB_Msg_Export(equality, T);
	}
}

void SC_Cpp__WriteDeclBrackets(Message* self, FastStringCpp* fs) {
	JB_FS_AppendByte(fs, '(');
	if (JB_Object_FastIsa(self->Obj, JB_AsClass(SCDecl))) {
		SCDecl* _tmPf0 = JB_Incr(JB_Msg_AsDecl(self));
		SC_Cpp__WriteDeclNoName(_tmPf0, fs);
		JB_Decr(_tmPf0);
	}
	 else {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Tree_Get(self, 1)));
		JB_Msg_Export(_tmPf1, fs);
		JB_Decr(_tmPf1);
	}
	JB_FS_AppendByte(fs, ')');
}

void SC_Cpp__WriteDeclNoName(SCDecl* D, FastStringCpp* T) {
	SC_Cpp__WriteClass(D->Type, T);
	JB_FS_AppendMultiByte(T, '*', D->PointerCount);
}

void SC_Cpp__WriteFuncArgs(SCFunction* F, FastStringCpp* T, bool names_only) {
	JB_FS_AppendByte(T, '(');
	bool N = false;
	{
		Array* _LoopSrcf1 = JB_Incr(F->Args);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* a = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0)));
			if (N) {
				JB_FS_AppendString(T, JB_LUB[164]);
			}
			N = true;
			if (names_only) {
				JB_FS_AppendString(T, a->Name);
			}
			 else {
				SC_Cpp__WriteDecl(a, T, nil);
			}
			JB_Decr(a);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	JB_FS_AppendByte(T, ')');
}

void SC_Cpp__WriteFuncSub(SCFunction* F, JB_String* E, FastStringCpp* T) {
	SC_Cpp__WriteDecl(F->ReturnType, T, nil);
	JB_FS_AppendByte(T, ' ');
	JB_FS_AppendString(T, E);
	SC_Cpp__WriteFuncArgs(F, T, false);
}

void SC_Cpp__WriteFunctionHeader(SCFunction* F, FastStringCpp* T) {
	if (F->IsInline) {
		JB_FS_AppendString(T, JB_LUB[1108]);
	}
	SC_Cpp__WriteFuncSub(F, F->ExportName, T);
}

void SC_Cpp__WriteThgMaybeTypeToo(Message* msg, SCDecl* d, FastStringCpp* fs) {
	if ((!JB_Str_Exists(d->Name))) {
		JB_Msg_safe(msg, fs);
	}
	 else if ((SC_Decl_SyntaxIs(d, kSC__SCDeclInfo_typeimprove)) and (SC_Cpp__MsgOKToImprove(msg))) {
		JB_FS_AppendByte(fs, '(');
		SC_Cpp__WriteDeclBrackets(msg, fs);
		JB_Str_safe(d->Name, fs);
		JB_FS_AppendByte(fs, ')');
	}
	 else {
		JB_Str_safe(d->Name, fs);
	}
}

void SC_Cpp__WriteType(SCClass* c, FastStringCpp* fs, bool always) {
	if (c->IsBuiltin) {
		return;
	}
	if ((!(always))) {
		if ((!SC_Class_NeedsExport(c))) {
			return;
		}
	}
	SCFunction* f = JB_Incr(c->FuncProto);
	if (f) {
		JB_FS_AppendString(fs, JB_LUB[1109]);
		SC_Cpp__WriteDecl(f->ReturnType, fs, nil);
		//;
		JB_FS_AppendString(fs, JB_LUB[1110]);
		JB_String* _tmPf2 = JB_Incr(SC_Class_CStructName(c));
		JB_FS_AppendString(fs, _tmPf2);
		JB_Decr(_tmPf2);
		JB_FS_AppendByte(fs, ')');
		//;
		SC_Cpp__WriteFuncArgs(f, fs, false);
	}
	 else {
		if (c->IsDataType) {
			JB_String* name = JB_Incr(SC_Class_CStructName(c->Super));
			if ((!JB_Str_Exists(name))) {
				JB_Decr(f);
				JB_Decr(name);
				return;
			}
			//;
			JB_FS_AppendString(fs, JB_LUB[1109]);
			JB_FS_AppendString(fs, name);
			JB_Decr(name);
			JB_FS_AppendByte(fs, ' ');
			//;
		}
		 else {
			if (c->IsWrapper) {
				JB_Decr(f);
				return;
			}
			SC_Class_WriteStructOrUnion(c, fs);
		}
		JB_String* _tmPf3 = JB_Incr(SC_Class_CStructName(c));
		JB_FS_AppendString(fs, _tmPf3);
		JB_Decr(_tmPf3);
	}
	JB_Decr(f);
	JB_FS_AppendString(fs, JB_LUB[1022]);
}


void SC_CppRefs_AddOne(CppRefs* self, Message* C) {
	if (JB_Msg_SyntaxEquals(C, JB_LUB[106], true)) {
	}
	 else if (JB_Msg_SyntaxEquals(C, JB_LUB[331], true)) {
		self->DisturbParams = (self->DisturbParams | 1);
	}
	 else if (JB_Msg_EqualsSyx(C, JB_SyxNum, false)) {
		self->DisturbParams = (self->DisturbParams | (JB_Msg_Int(C, 0) << 1));
	}
	 else {
		JB_Array_SyntaxAppend(self->Disturbs, C->Name);
	}
}

void SC_CppRefs_Constructor(CppRefs* self, Message* s) {
	self->DisturbParams = 0;
	self->Owned = false;
	Array* _tmPf0 = JB_Array__New0();
	self->Disturbs = JB_Incr(_tmPf0);
	if (s) {
		SC_CppRefs_Read(self, s);
	}
}

void SC_CppRefs_destructor(CppRefs* self) {
	JB_Decr(self->Disturbs);
}

void SC_CppRefs_Read(CppRefs* self, Message* node) {
	SC_CppRefs_SetDefaultRefStatus(self);
	Message* arg = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxArg));
	if ((!arg)) {
		JB_Decr(arg);
		return;
	}
	JB_Msg_ExpectLast(arg, JB_LUB[0]);
	{
		Message* c = JB_Incr(((Message*)JB_Tree_First_(arg)));
		while (c) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(c)));
			JB_Msg_Expect(c, JB_SyxTmp, nil);
			if ((!((JB_Msg_SyntaxEquals(c, JB_LUB[828], false)) or (JB_Msg_SyntaxEquals(c, JB_LUB[827], false))))) {
				JB_Msg_SyntaxExpect(c, JB_LUB[1111]);
				JB_Decr(arg);
				JB_Decr(c);
				JB_Decr(_Nf1);
				return;
			}
			Message* ch = JB_Incr(((Message*)JB_Ring_First(c)));
			if (JB_Msg_EqualsSyx(ch, JB_SyxBra, false)) {
				ch->Func = JB_SyxPrm;
			}
			if ((!((JB_Msg_EqualsSyx(ch, JB_SyxThg, false)) or ((JB_Msg_EqualsSyx(ch, JB_SyxPrm, false)) or (JB_Msg_EqualsSyx(ch, JB_SyxNum, false)))))) {
				JB_Msg_SyntaxExpect(ch, nil);
				JB_Decr(arg);
				JB_Decr(c);
				JB_Decr(_Nf1);
				JB_Decr(ch);
				return;
			}
			JB_Msg_ExpectLast(ch, JB_LUB[0]);
			JB_Decr(ch);
			JB_SetRef(c, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(c);
		(arg);
	}
	;
	if ((!JB_Rec_OK(JB_StdErr))) {
		JB_Decr(arg);
		return;
	}
	Message* _tmPf4 = JB_Incr(JB_Msg_FindFlat(arg, JB_SyxTmp, JB_LUB[1112], false));
	Message* Disown = JB_Incr(((Message*)JB_Tree_Get(_tmPf4, 0)));
	JB_Decr(_tmPf4);
	if (Disown) {
		self->Owned = (!JB_Msg_TrueOrFalse(Disown));
	}
	JB_Decr(Disown);
	Message* _tmPf5 = JB_Incr(JB_Msg_FindFlat(arg, JB_SyxTmp, JB_LUB[828], false));
	JB_Decr(arg);
	Message* Stuff = JB_Incr(((Message*)JB_Tree_Get(_tmPf5, 0)));
	JB_Decr(_tmPf5);
	if (Stuff) {
		JB_Array_Clear(self->Disturbs);
		self->DisturbParams = 0;
		if ((!JB_Msg_EqualsSyx(Stuff, JB_SyxList, false))) {
			SC_CppRefs_AddOne(self, Stuff);
		}
		 else {
			{
				Message* c = JB_Incr(((Message*)JB_Tree_First_(Stuff)));
				while (c) {
					Message* _Nf3 = JB_Incr(((Message*)JB_Ring_NextSib(c)));
					SC_CppRefs_AddOne(self, c);
					JB_SetRef(c, _Nf3);
					JB_Decr(_Nf3);
				};
				JB_Decr(c);
				(Stuff);
			};
		}
	}
	JB_Decr(Stuff);
}

void SC_CppRefs_SetDefaultRefStatus(CppRefs* self) {
	self->Owned = false;
	JB_SetRef(self->Disturbs, JB_Array__New0());
	self->DisturbParams = -1;
	JB_Array_SyntaxAppend(self->Disturbs, JB_LUB[137]);
}

CppRefs* SC_CppRefs__Alloc() {
	return ((CppRefs*)JB_New(CppRefs));
}

CppRefs* SC_CppRefs__New(Message* s) {
	CppRefs* __rz__ = ((CppRefs*)SC_CppRefs__Alloc());
	if (__rz__) {
		SC_CppRefs_Constructor(__rz__, s);
	}
	return __rz__;
}


void JB_Wrap_ConstructorInt(DTWrap* self, int64 v) {
	self->DeathAction = 0;
	self->DataType = kJB__TC_s64;
	self->PrivValue = v;
}

void JB_Wrap_Constructor(DTWrap* self, _voidptr p) {
	self->DeathAction = 0;
	self->DataType = kJB__TC_UnusedType;
	self->PrivValue = ((int64)p);
}

void JB_Wrap_Destructor(DTWrap* self) {
	if (self->DeathAction == kJB__Wrap_Free) {
		JB_free(((_voidptr)self->PrivValue));
	}
}

double JB_Wrap_FloatValue(DTWrap* self) {
	if (self) {
		return JB_int64_AsFloat(self->PrivValue);
	}
	return 0;
}

JB_String* JB_Wrap_Render(DTWrap* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	//visible;
	if (JB_TC_IsFloat(self->DataType)) {
		JB_FS_AppendDoubleAsText0(fs, JB_Wrap_FloatValue(self));
	}
	 else if (self->DataType == kJB__TC_UnusedType) {
		JB_FS_AppendString(fs, JB_LUB[472]);
		JB_FS_AppendHex(fs, self->PrivValue, 2);
	}
	 else if (self->DataType == kJB__TC_bool) {
		JB_String* _tmPf0 = JB_Incr(((JB_String*)JB_Ternary(((bool)self->PrivValue), JB_LUB[107], JB_LUB[108])));
		JB_FS_AppendString(fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_FS_AppendInt64(fs, self->PrivValue);
	}
	JB_String* _tmPf1 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int64 JB_Wrap_Value(DTWrap* self) {
	if (self) {
		return self->PrivValue;
	}
	return 0;
}

DTWrap* JB_Wrap__Alloc() {
	return ((DTWrap*)JB_New(DTWrap));
}

DTWrap* JB_Wrap__NewInt(int64 v) {
	DTWrap* __rz__ = ((DTWrap*)JB_Wrap__Alloc());
	if (__rz__) {
		JB_Wrap_ConstructorInt(__rz__, v);
	}
	return __rz__;
}

DTWrap* JB_Wrap__New(_voidptr p) {
	DTWrap* __rz__ = ((DTWrap*)JB_Wrap__Alloc());
	if (__rz__) {
		JB_Wrap_Constructor(__rz__, p);
	}
	return __rz__;
}



bool JB_Rec_CanAddMore(JB_ErrorReceiver* self, ErrorSeverity level) {
	if ((!((!self->BlockErrors) and (!JB_OutOfMemoryOccurred())))) {
		return nil;
	}
	if (level >= kJB__ErrorSeverity_Error) {
		return (self->ErrorCount < self->MaxErrors);
	}
	 else {
		return (self->WarnCount < self->MaxErrors);
	}
	return false;
}

void JB_Rec_Clear(JB_ErrorReceiver* self) {
	JB_Tree_Clear(self->Errors);
	self->ErrorCount = 0;
	self->WarnCount = 0;
	self->ProblemCount = 0;
}

void JB_Rec_Constructor(JB_ErrorReceiver* self) {
	self->LogFunc = nil;
	self->ErrorCount = 0;
	self->ProblemCount = 0;
	self->WarnCount = 0;
	self->ErrorsAreWarnings = 0;
	self->BlockErrors = false;
	JB_String* _tmPf0 = JB_LUB[0];
	self->Source = JB_Incr(_tmPf0);
	self->LogObj = nil;
	JB_Error* _tmPf1 = JB_Err__New(nil, JB_LUB[0], kJB__ErrorSeverity_Error, JB_LUB[0]);
	self->Errors = JB_Incr(_tmPf1);
	self->Errors->Func = JB_SyxArg;
	self->MaxErrors = 512;
	JB__API_NilHappened = nil;
}

void JB_Rec_destructor(JB_ErrorReceiver* self) {
	JB_Decr(self->Errors);
	JB_Decr(self->Source);
	JB_Decr(self->LogObj);
}

JB_Error* JB_Rec_FirstError(JB_ErrorReceiver* self) {
	//visible;
	{
		JB_Error* _LoopSrcf2 = self->Errors;
		JB_Error* err = ((JB_Error*)JB_Tree_First_(_LoopSrcf2));
		while (err) {
			JB_Error* _Nf1 = ((JB_Error*)JB_Ring_NextSib(err));
			if (JB_Err_IsError(err)) {
				return err;
			}
			err = _Nf1;
		};
		(_LoopSrcf2);
	}
	;
	return nil;
}

void JB_Rec_incr(JB_ErrorReceiver* self, JB_Error* err, bool add) {
	int n = JB_Ternary(add, 1, -1);
	if (err->Severity == kJB__ErrorSeverity_Problem) {
		debugger;
		self->ProblemCount = (self->ProblemCount + n);
	}
	 else if (JB_Err_IsError(err)) {
		self->ErrorCount = (self->ErrorCount + n);
	}
	 else if (JB_Err_IsWarning(err)) {
		self->WarnCount = (self->WarnCount + n);
	}
}

void JB_Rec_LogFileSet(JB_ErrorReceiver* self, JB_String* Value) {
	//visible;
	if ((!(JB_Str_ContainsString(Value, JB_LUB[1113])))) {
		Value = JB_File_SyntaxAccess(JB_File__Logs(), Value, false);
	}
	JB_SetRef(self->LogObj, JB_Str_AsFile(Value));
	self->LogFunc = JB_Rec_LogFileWriter;
}

void JB_Rec_LogFileWriter(JB_ErrorReceiver* self, JB_String* Data) {
	//visible;
	JB_Object* f = self->LogObj;
	if (JB_Object_Isa(f, JB_AsClass(JB_File))) {
		if ((!JB_File_Opened(((JB_File*)f)))) {
			JB_File_OpenBlank(((JB_File*)f));
		}
		JB_File_SyntaxAppend(((JB_File*)f), Data);
	}
}

void JB_Rec_NewErrorWithNode(JB_ErrorReceiver* self, Message* node, JB_String* Desc, JB_String* path) {
	ErrorSeverity sev = ((ErrorSeverity)JB_Ternary(self->ErrorsAreWarnings > 0, kJB__ErrorSeverity_Warning, ((ErrorSeverity)kJB__ErrorSeverity_Error)));
	JB_Error* _tmPf0 = JB_Incr(JB_Err__New(node, Desc, sev, path));
	JB_Rec_SyntaxAppend(self, _tmPf0);
	JB_Decr(_tmPf0);
}

void JB_Rec_NewItem(JB_ErrorReceiver* self, JB_Error* Err) {
	//visible;
	if (self) {
		JB_Rec_SyntaxAppend(self, Err);
	}
}

void JB_Rec_NewProblem(JB_ErrorReceiver* self, Message* node, JB_String* Desc) {
	JB_Error* _tmPf0 = JB_Incr(JB_Err__New(node, Desc, kJB__ErrorSeverity_Problem, JB_LUB[0]));
	JB_Rec_SyntaxAppend(self, _tmPf0);
	JB_Decr(_tmPf0);
}

void JB_Rec_NewWarning(JB_ErrorReceiver* self, Message* node, JB_String* Desc) {
	JB_Error* _tmPf0 = JB_Incr(JB_Err__New(node, Desc, kJB__ErrorSeverity_Warning, JB_LUB[0]));
	JB_Rec_SyntaxAppend(self, _tmPf0);
	JB_Decr(_tmPf0);
}

bool JB_Rec_OK(JB_ErrorReceiver* self) {
	return ((bool)self) and (!self->ErrorCount);
}

JB_Error* JB_Rec_Pop(JB_ErrorReceiver* self) {
	JB_Error* err = JB_Incr(((JB_Error*)JB_Tree_Pop(self->Errors)));
	if (err) {
		JB_Rec_incr(self, err, false);
		JB_SafeDecr(err);
		return err;
	}
	JB_Decr(err);
	return nil;
}

int JB_Rec_PrintErrors(JB_ErrorReceiver* self) {
	return JB_Rec_PrintErrorsMain(self, kJB__ErrorSeverity_Problem, false, false);
}

int JB_Rec_PrintErrorsMain(JB_ErrorReceiver* self, ErrorSeverity Level, bool PrintCount, bool shell) {
	JB_ErrorReceiver* rec = JB_Incr(self);
	if ((!rec)) {
		JB_SetRef(rec, JB_StdErr);
	}
	FastString* fs = JB_Incr(JB_FS__New());
	int Count = JB_Rec_RenderErrors(rec, fs, Level, shell);
	JB_Decr(rec);
	if ((!Count)) {
		JB_Decr(fs);
		return nil;
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_GetResult(fs));
	JB_Str_PrintError(_tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_ProblemsFound(fs, Count);
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(fs));
	JB_Decr(fs);
	JB_Str_PrintError(_tmPf1);
	JB_Decr(_tmPf1);
	if (Count) {
		return -1;
	}
	return 0;
}

bool JB_Rec_Problems(JB_ErrorReceiver* self) {
	return (((bool)self) and ((bool)self->ErrorCount)) or ((bool)self->ProblemCount);
}

JB_String* JB_Rec_Render(JB_ErrorReceiver* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_Rec_RenderErrors(self, fs, 0, false);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

int JB_Rec_RenderErrors(JB_ErrorReceiver* self, FastString* fs, ErrorSeverity Level, bool shell) {
	int rz = 0;
	if ((!self)) {
		return nil;
	}
	{
		JB_Error* err = ((JB_Error*)JB_Ring_First(self->Errors));
		while (err) {
			JB_Error* _Nf1 = ((JB_Error*)JB_Ring_NextSib(err));
			if (err->Severity >= Level) {
				rz++;
				if (shell) {
					JB_FreeIfDead(JB_Err_render_clang(err, fs));
				}
				 else {
					JB_FreeIfDead(JB_Err_render(err, fs));
				}
				JB_FS_AppendByte(fs, '\n');
			}
			err = _Nf1;
		};
	}
	;
	return rz;
}

int JB_Rec_ShellPrintErrors(JB_ErrorReceiver* self) {
	//visible;
	return JB_Rec_PrintErrorsMain(self, kJB__ErrorSeverity_Problem, false, true);
}

void JB_Rec_SyntaxAppend(JB_ErrorReceiver* self, JB_Error* Err) {
	bool CanPrint = (!self->ErrorCount) and ((bool)JB__Err_AutoPrint);
	JB_Rec_incr(self, Err, true);
	if ((!JB_Rec_CanAddMore(self, Err->Severity))) {
		return;
	}
	if ((!(JB_Str_Exists(Err->Path)))) {
		JB_SetRef(Err->Path, self->Source);
	}
	{
		fnErrorLogger __INSID102 = self->LogFunc;
		if (__INSID102) {
			JB_String* _tmPf0 = JB_Incr(JB_Err_render(Err, nil));
			(__INSID102)(self, _tmPf0);
			JB_Decr(_tmPf0);
		}
	}
	;
	if (CanPrint and JB_Err_NeedsPrint(Err)) {
		JB_String* _tmPf1 = JB_Incr(JB_Err_render(Err, nil));
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
	if (((bool)JB__Err_AutoPrint) and (Err->Severity >= kJB__ErrorSeverity_Error)) {
		JB_DoAt(1);
	}
	if (JB__Err_AutoPrint != kJB__ErrorFlags_PrintAndRemove) {
		JB_Tree_SyntaxAppend(self->Errors, Err);
	}
}

JB_ErrorReceiver* JB_Rec_SyntaxUsing(JB_ErrorReceiver* self) {
	JB_ErrorReceiver* old = JB_Incr(JB_StdErr);
	JB_SetRef(JB_StdErr, self);
	JB_SafeDecr(old);
	return old;
}

void JB_Rec_SyntaxUsingComplete(JB_ErrorReceiver* self) {
	JB_Rec_PrintErrors(JB_StdErr);
	JB_SetRef(JB_StdErr, self);
}

JB_ErrorReceiver* JB_Rec__Alloc() {
	return ((JB_ErrorReceiver*)JB_New(JB_ErrorReceiver));
}

JB_ErrorReceiver* JB_Rec__New() {
	JB_ErrorReceiver* __rz__ = ((JB_ErrorReceiver*)JB_Rec__Alloc());
	if (__rz__) {
		JB_Rec_Constructor(__rz__);
	}
	return __rz__;
}


void JB_FS_AppendCpp(FastString* self, JB_String* s) {
	JB_FS_AppendByte(self, '"');
	{
		byte* _Startf0 = JB_Str_Address(s);
		byte* _Endf1 = _Startf0 + JB_Str_Length(s);
		while (_Startf0 < _Endf1) {
			int i = _Startf0 - s->Addr;
			byte c = _Startf0[0];
			if (c == '?') {
				JB_FS_AppendString(self, JB_LUB[1114]);
			}
			 else if (c == '\\') {
				JB_FS_AppendString(self, JB_LUB[414]);
			}
			 else if (c == 9) {
				JB_FS_AppendString(self, JB_LUB[408]);
			}
			 else if (c == 10) {
				JB_FS_AppendString(self, JB_LUB[404]);
			}
			 else if (c == 13) {
				JB_FS_AppendString(self, JB_LUB[406]);
			}
			 else if ((c >= 32) and ((c != '"') and (c <= 127))) {
				JB_FS_AppendByte(self, c);
			}
			 else {
				JB_FS_AppendString(self, JB_LUB[1077]);
				JB_FS_AppendHex(self, c, 2);
				if (JB_byte_IsHex(JB_Str_ByteValue(s, i + 1))) {
					JB_FS_AppendString(self, JB_LUB[1115]);
				}
			}
			_Startf0++;
		};
	}
	;
	JB_FS_AppendByte(self, '"');
}

void JB_FS_AppendCppAll(FastString* self, JB_String* s) {
	JB_FS_AppendByte(self, '"');
	{
		byte* _Startf0 = JB_Str_Address(s);
		byte* _Endf1 = _Startf0 + JB_Str_Length(s);
		while (_Startf0 < _Endf1) {
			int i = _Startf0 - s->Addr;
			byte c = _Startf0[0];
			JB_FS_AppendString(self, JB_LUB[1077]);
			JB_FS_AppendHex(self, c, 2);
			_Startf0++;
		};
	}
	;
	JB_FS_AppendByte(self, '"');
}

void JB_FS_AppendEscape(FastString* self, JB_String* s) {
	JB_FS_AppendMultiReplace(self, s, JB__Constants_EscapeStr, JB_StdErr);
}

void JB_FS_AppendHexStr(FastString* self, JB_String* Data) {
	if (JB_Str_Exists(Data)) {
		JB_FS_AppendHexData(self, Data->Addr, JB_Str_Length(Data), 0);
	}
}

void JB_FS_AppendObjectID(FastString* self, Saveable* o) {
	JB_FS_AppendHex3(self, JB_ObjID(o));
}

void JB_FS_AppendObjectOrNil(FastString* self, JB_Object* o) {
	if (JB_Object_Isa(o, JB_AsClass(Saveable))) {
		if (JB_Sav_IsSaveMarked(((Saveable*)o))) {
			JB_FS_AppendObjectID(self, ((Saveable*)o));
		}
		 else {
			//"Valid behaviour! For example we save a level, but we don't save the player along with the level. Like terraria.";
			JB_FS_AppendString(self, JB_LUB[106]);
		}
	}
	 else if (JB_Object_Isa(o, JB_AsClass(JB_String))) {
		JB_FreeIfDead(JB_ObjRender(((JB_String*)o), self));
	}
	 else {
		JB_FS_AppendString(self, JB_LUB[106]);
	}
}

void JB_FS_AppendWidth(FastString* self, JB_String* s, int Width) {
	JB_FS_AppendString(self, s);
	JB_FS_AppendMultiByte(self, ' ', Width - JB_Str_Length(s));
}

void JB_FS_CArrayAdd(FastString* self, JB_String* s) {
	{
		byte* _Startf0 = JB_Str_Address(s);
		byte* _Endf1 = _Startf0 + JB_Str_Length(s);
		while (_Startf0 < _Endf1) {
			byte B = _Startf0[0];
			JB_FS_CArrayAddB(self, B);
			_Startf0++;
		};
	}
	;
	JB_FS_CArrayAddB(self, 0);
}

void JB_FS_CArrayAddB(FastString* self, byte B) {
	if ((!B)) {
		JB_FS_AppendByte(self, '0');
	}
	 else {
		JB_FS_AppendByte(self, '\'');
		if (JB_CS_HasChar(JB_C_Letters, B)) {
			JB_FS_AppendByte(self, B);
		}
		 else {
			JB_FS_AppendString(self, JB_LUB[1077]);
			JB_FS_AppendHex(self, B, 2);
		}
		JB_FS_AppendByte(self, '\'');
	}
	JB_FS_AppendString(self, JB_LUB[164]);
}

void JB_FS_CArrayAddB0(FastString* self, byte B) {
	JB_FS_CArrayAddB(self, B);
	JB_FS_CArrayAddB(self, 0);
}

void JB_FS_AppendInfo(FastString* self, JB_String* name, JB_String* data) {
	if (JB_Str_Exists(data)) {
		JB_FS_fieldstart(self, name);
		JB_FS_AppendByte(self, '"');
		JB_FS_AppendEscape(self, data);
		JB_FS_AppendByte(self, '"');
	}
}

void JB_FS_AppendInfoNum(FastString* self, JB_String* name, int64 data) {
	if (data) {
		JB_FS_fieldstart(self, name);
		JB_FS_AppendInt64(self, data);
	}
}

void JB_FS_fieldstart(FastString* self, JB_String* name) {
	JB_FS_AppendIndent(self);
	if (JB_Str_Exists(name)) {
		JB_FS_AppendString(self, name);
		JB_FS_AppendByte(self, ' ');
	}
}

void JB_FS_includeh(FastString* self, JB_String* name) {
	JB_FS_AppendString(self, JB_LUB[1116]);
	JB_FS_AppendString(self, name);
	JB_FS_AppendByte(self, '"');
	JB_FS_AppendByte(self, '\n');
}

void JB_FS_lint(FastString* self, uint64 n) {
	while (n) {
		JB_FS_AppendByte(self, ((byte)(n & 255)));
		n = (n >> 8);
	};
}

void JB_FS_MsgErrorName(FastString* self, JB_String* name) {
	if (JB_Str_Exists(name)) {
		JB_FS_AppendString(self, JB_LUB[1117]);
		JB_FS_AppendString(self, name);
		JB_FS_AppendString(self, JB_LUB[1118]);
	}
}

void JB_FS_ProblemsFound(FastString* self, int count) {
	JB_FS_AppendInt32(self, count);
	JB_FS_AppendString(self, JB_LUB[1119]);
	if (count > 1) {
		JB_FS_AppendByte(self, 's');
	}
	JB_FS_AppendString(self, JB_LUB[1120]);
}

JB_String* JB_FS_Render(FastString* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendFastString(fs, self);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_FS_AppendFastString(FastString* self, FastString* fs) {
	JB_FS_AppendMem_(self, fs->ResultPtr, fs->Length);
}

void JB_FS_AppendInt64(FastString* self, int64 data) {
	JB_FS_AppendIntegerAsText(self, data, 1);
}

void JB_FS_AppendInt32(FastString* self, int data) {
	JB_FS_AppendInt64(self, ((int64)data));
}

void JB_FS_AppendFloatAsText(FastString* self, float F) {
	JB_FS_AppendDoubleAsText0(self, ((double)F));
}

void JB_FS_SyntaxAppend(FastString* self, Message* msg) {
	if (msg) {
		(JB_Syx_RenderAddr(msg->Func))(msg, self);
	}
}

FastString* JB_FS__Alloc() {
	return ((FastString*)JB_New(FastString));
}

int JB_FS__Init_() {
	{
	}
	;
	return 0;
}

int JB_FS__InitCode_() {
	return 0;
}

FastString* JB_FS__New() {
	FastString* __rz__ = ((FastString*)JB_FS__Alloc());
	if (__rz__) {
		JB_FS_Constructor(__rz__);
	}
	return __rz__;
}

FastString* JB_FS__NewSize(int size) {
	FastString* __rz__ = ((FastString*)JB_FS__Alloc());
	if (__rz__) {
		JB_FS_ConstructorSize(__rz__, size);
	}
	return __rz__;
}



void JB_Lk_Constructor(LeakTester* self, JB_String* name) {
	self->MemUsedStart = JB_App__ObjMemory();
	self->Name = JB_Incr(name);
	JB_Mem_Mark();
}

void JB_Lk_destructor(LeakTester* self) {
	JB_Decr(self->Name);
}

void JB_Lk_FinalTest(LeakTester* self) {
	JB_Lk_Test2(self);
	self->MemUsedStart = nil;
	JB_Mem_Unmark();
}

void JB_Lk_Test1(LeakTester* self) {
	//visible;
	FastString* fs = JB_Incr(JB_FS__New());
	//;
	JB_FS_AppendByte(fs, 'a');
	JB_FS_AppendInt32(fs, 1);
	JB_FS_AppendByte(fs, 'b');
	JB_FS_AppendInt32(fs, 2);
	//;
	JB_Obj_PrintLine(fs);
	JB_Decr(fs);
}

void JB_Lk_Test2(LeakTester* self) {
	if ((!self->MemUsedStart)) {
		return;
	}
	int NewAmount = JB_App__ObjMemory();
	int Diff = NewAmount - self->MemUsedStart;
	if (Diff > 0) {
		debugger;
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[1121]);
		JB_FS_AppendInt32(_fsf0, Diff);
		JB_FS_AppendString(_fsf0, JB_LUB[1122]);
		JB_FS_AppendString(_fsf0, self->Name);
		JB_FS_AppendString(_fsf0, JB_LUB[1123]);
		JB_FS_AppendInt32(_fsf0, NewAmount);
		JB_FS_AppendByte(_fsf0, '.');
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
}

LeakTester* JB_Lk__Alloc() {
	return ((LeakTester*)JB_New(LeakTester));
}

LeakTester* JB_Lk__New(JB_String* name) {
	LeakTester* __rz__ = ((LeakTester*)JB_Lk__Alloc());
	if (__rz__) {
		JB_Lk_Constructor(__rz__, name);
	}
	return __rz__;
}


void JB_Macro_ConstructorStr(Macro* self, JB_String* s) {
	self->Cleaned = false;
	self->Parsed = nil;
	self->input = JB_Incr(s);
}

void JB_Macro_ConstructorMsg(Macro* self, Message* s) {
	self->Cleaned = false;
	JB_String* _tmPf0 = JB_LUB[0];
	self->input = JB_Incr(_tmPf0);
	self->Parsed = JB_Incr(s);
}

void JB_Macro_destructor(Macro* self) {
	JB_Decr(self->input);
	JB_Decr(self->Parsed);
}

Message* JB_Macro_Pz(Macro* self) {
	Message* rz = nil;
	rz = self->Parsed;
	if ((!rz)) {
		rz = JB_Str_Parse(self->input, JB_SyxArg, true);
		JB_Msg_WipePositions(rz);
		JB_SetRef(self->Parsed, rz);
	}
	return rz;
}

Message* JB_Macro_SyntaxCall(Macro* self, Array* prms) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Msg__NewBasic());
	JB_Msg_BecomeMacro(rz, self, prms);
	JB_SafeDecr(rz);
	return rz;
}

Macro* JB_Macro__Alloc() {
	return ((Macro*)JB_New(Macro));
}

Macro* JB_Macro__NewStr(JB_String* s) {
	Macro* __rz__ = ((Macro*)JB_Macro__Alloc());
	if (__rz__) {
		JB_Macro_ConstructorStr(__rz__, s);
	}
	return __rz__;
}

Macro* JB_Macro__NewMsg(Message* s) {
	Macro* __rz__ = ((Macro*)JB_Macro__Alloc());
	if (__rz__) {
		JB_Macro_ConstructorMsg(__rz__, s);
	}
	return __rz__;
}


void JB_Mrap_ConstructorDummy(MWrap* self, int ItemCount, uint ItemSize, bool DummyParam) {
	self->DataType = kJB__TC_UnusedType;
	int Request = ItemCount * ItemSize;
	self->ItemSize = ItemSize;
	self->Length = 0;
	self->_Ptr = JB_zalloc(Request);
	self->Capacity = JB_Ternary(((bool)self->_Ptr), ItemCount, ((int)0));
	self->DeathAction = kJB__Wrap_Free;
}

void JB_Mrap_Destructor(MWrap* self) {
	JB_Mrap_Free(self);
}

void JB_Mrap_Free(MWrap* self) {
	if (self->DeathAction == kJB__Wrap_Free) {
		JB_free(self->_Ptr);
	}
	self->_Ptr = nil;
	self->Capacity = 0;
}

byte* JB_Mrap_Ptr(MWrap* self) {
	return ((byte*)self->_Ptr);
}

MWrap* JB_Mrap__Alloc() {
	return ((MWrap*)JB_New(MWrap));
}

int JB_Mrap__Init_() {
	{
	}
	;
	return 0;
}

int JB_Mrap__InitCode_() {
	return 0;
}

MWrap* JB_Mrap__NewDummy(int ItemCount, uint ItemSize, bool DummyParam) {
	MWrap* __rz__ = ((MWrap*)JB_Mrap__Alloc());
	if (__rz__) {
		JB_Mrap_ConstructorDummy(__rz__, ItemCount, ItemSize, DummyParam);
	}
	return __rz__;
}

MWrap* JB_Mrap__Object(int ItemCount, int ItemSize) {
	MWrap* rz = JB_Incr(((MWrap*)nil));
	//visible;
	JB_SetRef(rz, JB_Mrap__NewDummy(ItemCount, ItemSize, false));
	if ((!rz->_Ptr)) {
		JB_Decr(rz);
		return nil;
	}
	JB_SafeDecr(rz);
	return rz;
}



bool JB_Proc_Alive(Process* self) {
	if (self != nil) {
		return ((bool)JB_Ternary(self->IsServer, JB_Proc_ChildAlive(self), JB_Proc_ParentAlive(self)));
	}
	return false;
}

bool JB_Proc_CanSend(Process* self) {
	return (self != nil) and (JB_Proc_Found(self, true) and JB_IPCMessage_IsOpen(self->Ours));
}

bool JB_Proc_ChildAlive(Process* self) {
	if (self->SubProcess) {
		return (!JB_Proc_Closed(self));
	}
	PID_Int lost = JB_App__LostChild();
	if (lost > 0) {
		{
			Process** _firstf0 = (&(JB__Proc_Children)[0]);
			int _if1 = 0;
			while (_if1 < (16)) {
				Process* ch = _firstf0[_if1];
				if ((ch != nil) and (ch->CID == lost)) {
					JB_Proc_Died(ch);
				}
				_if1++;
			};
		};
	}
	return self->CID > 0;
}

bool JB_Proc_Closed(Process* self) {
	if ((self == nil) or JB_IPCMessage_Closed(self->Ours)) {
		return true;
	}
	if (JB_IPCMessage_Closed(self->Theirs)) {
		(JB_Proc_SyntaxIsSet(self, kJB__IPCState_closed, true));
		return true;
	}
	return false;
}

void JB_Proc_Constructor(Process* self, JB_String* name, int n, Array* params, fn_subprocess sub, bool TrapStdOut) {
	JB_Incr(params);
	JB_Incr(name);
	JB_String* _tmPf2 = JB_LUB[0];
	self->Path = JB_Incr(_tmPf2);
	self->Orig = nil;
	self->Ours = nil;
	self->Theirs = nil;
	self->LastSend = 0;
	self->LogFile = nil;
	self->ChildStdOut = nil;
	self->Dummy = ((IPCMessage){});
	self->OrigSize = 0;
	self->Offset = 0;
	self->DiedCount = 0;
	self->CID = 0;
	self->TrapStdOut = false;
	self->CanPrint = 0;
	self->DeathLimit = 12;
	self->ProcPos = -1;
	self->IsServer = (n != 0);
	RingTree* _tmPf3 = JB_Ring__New0();
	self->SendQueue = JB_Incr(_tmPf3);
	FastString* _tmPf4 = JB_FS__New();
	self->Writer = JB_Incr(_tmPf4);
	self->SubProcess = sub;
	if ((!(JB_Str_Exists(name)))) {
		JB_SetRef(name, JB_App__ArgValue(JB_LUB[166]));
	}
	if (JB_Str_Exists(name)) {
		if (JB_Str_ByteValue(name, 0) != '/') {
			JB_SetRef(name, JB_Str_ipcPath(name));
		}
	}
	JB_String* _tmPf5 = JB_Str_ipcName(name);
	self->Name = JB_Incr(_tmPf5);
	JB_File* _tmPf6 = JB_Str_AsFile(name);
	self->Talker = JB_Incr(_tmPf6);
	if (self->IsServer) {
		if ((!(JB_Array_SyntaxCast(params)))) {
			JB_SetRef(params, (JB_Array__New0()));
		}
		JB_SetRef(params, JB_Array_Copy(params));
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1124], self->Talker));
		JB_StringC* _tmPf0 = JB_Incr(JB_Str_MakeC((_tmPf1)));
		JB_Decr(_tmPf1);
		JB_Array_SyntaxAppend(params, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_App__BelongsToParent();
	}
	self->Params = JB_Incr(params);
	JB_Decr(params);
	if (JB_Str_Exists(name)) {
		JB_Proc_OpenSharedMemory(self, n);
	}
	 else {
		if ((!false)) {
			JB_Proc_SyntaxExpect(self, JB_LUB[1125]);
		}
	}
	JB_Decr(name);
}

void JB_Proc_Destructor(Process* self) {
	JB_Proc_Release(self);
	JB_Proc_Disconnect(self);
	if (self->IsServer) {
		JB_Proc_Unmap(self);
		JB_Proc_Unlink(self);
	}
	JB_Decr(self->Talker);
	JB_Decr(self->Writer);
	JB_Decr(self->Name);
	JB_Decr(self->Path);
	JB_Decr(self->Params);
	JB_Decr(self->LogFile);
	JB_Decr(self->ChildStdOut);
	JB_Decr(self->SendQueue);
}

void JB_Proc_Died(Process* self) {
	self->DiedCount++;
	JB_Proc_Disconnect(self);
	self->Theirs->State = kJB__IPCState_dead;
	self->CID = 0;
	JB_Proc_Other(self, JB_LUB[1126], true);
	if ((!self->IsServer)) {
		JB_App__Die(JB_LUB[0], -1);
	}
}

void JB_Proc_Disconnect(Process* self) {
	JB_Tree_Clear(self->SendQueue);
	if (JB_Proc_SyntaxIsnt(self, kJB__IPCState_closed)) {
		JB_Proc_Self(self, JB_LUB[1127], false);
		self->Ours->State = kJB__IPCState_closed;
	}
	if (self->IsServer) {
		JB_Proc_UseDummy(self);
	}
	 else {
		JB_Proc_Unmap(self);
	}
}

void JB_Proc_Flush(Process* self) {
	if ((self != nil) and (JB_Ring_HasChildren(self->SendQueue) and JB_Proc_CanSend(self))) {
		JB_Proc_SendSub(self, nil);
	}
}

bool JB_Proc_Found(Process* self, bool send) {
	if (send) {
		return self->Theirs->ReadID == self->Ours->SendID;
	}
	return self->Theirs->SendID != self->Ours->ReadID;
}

Message* JB_Proc_Get(Process* self, Date TimeOut) {
	if ((!(self != nil))) {
		return nil;
	}
	if (TimeOut > 0) {
		JB_Proc_Self(self, JB_LUB[1128], false);
	}
	if ((!JB_Proc_WaitFor(self, TimeOut, false))) {
		return nil;
	}
	IPCMessage* sp = self->Theirs;
	uint len = sp->DataLength;
	if (len) {
		if ((!(len <= self->Writer->Reserved))) {
			JB_Proc_SyntaxExpect(self, JB_LUB[1129]);
			return nil;
		}
		JB_String* str = JB_Incr(JB_Str__NewCopy(JB_IPCMessage_Data(self->Theirs), len));
		self->Ours->ReadID = sp->SendID;
		Message* _tmPf0 = JB_Incr(JB_Str_parse_jbin(str));
		JB_Decr(str);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	self->Ours->ReadID = sp->SendID;
	JB_Proc_Self(self, JB_LUB[1130], false);
	return nil;
}

bool JB_Proc_IsOpen(Process* self) {
	return (!JB_Proc_Closed(self));
}

void JB_Proc_log(Process* self, JB_String* s) {
	JB_Str_Print(s);
	JB_Platform__Log(s);
}

void JB_Proc_LogMsg(Process* self, JB_String* msg) {
	JB_Proc_log(self, msg);
	JB_Proc_log(self, JB_LUB[403]);
}

void JB_Proc_logus(Process* self) {
	JB_String* _tmPf0 = JB_Incr(JB_Proc_OurName(self, true));
	JB_Proc_log(self, _tmPf0);
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_Incr(JB_int_RenderFS(JB_Proc_sideid(self), nil));
	JB_Proc_log(self, _tmPf1);
	JB_Decr(_tmPf1);
	JB_Proc_log(self, JB_LUB[278]);
}

void JB_Proc_OpenSharedMemory(Process* self, int n) {
	JB_Proc_UseDummy(self);
	n = JB_Proc_SetupAlloc(self, n);
	if ((!n)) {
		return;
	}
	JB_Proc_SetupAdjust(self, n / 2);
	JB_Proc_SetupServerState(self);
}

void JB_Proc_Other(Process* self, JB_String* msg, bool strong) {
	if (((bool)self->CanPrint) or strong) {
		JB_Proc_logus(self);
		JB_String* _tmPf0 = JB_Incr(JB_Proc_TheirName(self));
		JB_Proc_log(self, _tmPf0);
		JB_Decr(_tmPf0);
		JB_Proc_log(self, JB_LUB[170]);
		JB_Proc_LogMsg(self, msg);
	}
}

JB_String* JB_Proc_OurName(Process* self, bool us) {
	if (self->IsServer == us) {
		return JB_Str_OperatorPlus(JB_LUB[1131], self->Name);
	}
	 else {
		return JB_Str_OperatorPlus(JB_LUB[1132], self->Name);
	}
	return JB_LUB[0];
}

bool JB_Proc_ParentAlive(Process* self) {
	if (JB_App__ParentID() > 1) {
		return true;
	}
	JB_Proc_Other(self, JB_LUB[1126], false);
	JB_DoAt(1);
	return false;
}

void JB_Proc_RefillOpen(Process* self) {
	if (JB_IPCMessage_IsOpen(self->Theirs)) {
		(JB_Proc_SyntaxIsSet(self, kJB__IPCState_connected, true));
	}
}

void JB_Proc_Release(Process* self) {
	if (JB_Ind_SyntaxCast(self->ProcPos)) {
		JB__Proc_Children[self->ProcPos] = nil;
		self->ProcPos = -1;
	}
}

JB_String* JB_Proc_Render(Process* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FreeIfDead(JB_Proc_ReportConnection(self, JB_LUB[0], fs));
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Proc_ReportConnection(Process* self, JB_String* s, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendString(fs, JB_LUB[1133]);
	if (JB_Str_Exists(s)) {
		JB_FS_AppendString(fs, s);
		JB_FS_AppendByte(fs, '\n');
	}
	//;
	JB_FS_AppendString(fs, JB_LUB[1134]);
	JB_String* _tmPf2 = JB_Incr(JB_File_Path(self->Talker));
	JB_FS_AppendString(fs, _tmPf2);
	JB_Decr(_tmPf2);
	JB_FS_AppendString(fs, JB_LUB[1135]);
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendByte(fs, '\n');
	//;
	if (((bool)self->Orig) and (self->Orig != ((byte*)((&self->Dummy))))) {
		//;
		JB_FS_AppendString(fs, JB_LUB[1136]);
		JB_FS_AppendInt32(fs, self->OrigSize);
		JB_FS_AppendByte(fs, '\n');
		//;
	}
	 else {
		JB_FS_AppendString(fs, JB_LUB[1137]);
	}
	JB_String* _tmPf3 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

void JB_Proc_Self(Process* self, JB_String* msg, bool strong) {
	if (((bool)self->CanPrint) or strong) {
		JB_Proc_logus(self);
		JB_Proc_LogMsg(self, msg);
	}
}

void JB_Proc_SendCrashed(Process* self) {
	FastString* j = self->Writer;
	JB_Proc__StackTraceJbin(j, JB_LUB[1138], 4);
	JB_Proc_WriteSub(self);
}

void JB_Proc_SendSub(Process* self, Message* msg) {
	JB_Incr(msg);
	Message* p = JB_Incr(((Message*)JB_Tree_Pop(self->SendQueue)));
	if (p) {
		self->Ours->Queued = (self->Ours->Queued - (msg == nil));
		(JB_Ring_FirstSet(self->SendQueue, msg));
		JB_SetRef(msg, p);
	}
	JB_Decr(p);
	if ((!msg)) {
		JB_Decr(msg);
		return;
	}
	JB_FreeIfDead(JB_Msg_render_jbin(msg, JB_LUB[0], self->Writer));
	JB_Decr(msg);
	JB_Proc_WriteSub(self);
}

void JB_Proc_SetupAdjust(Process* self, int n) {
	self->Writer->Reserved = (n - ((16)));
	int64 b = ((int64)self->IsServer);
	self->Ours = ((IPCMessage*)(self->Orig + (n * b)));
	self->Theirs = ((IPCMessage*)(self->Orig + (n * (!b))));
	self->Writer->ResultPtr = JB_IPCMessage_Data(self->Ours);
}

int JB_Proc_SetupAlloc(Process* self, int n) {
	if (self->Orig) {
		return self->OrigSize;
	}
	self->OrigSize = n;
	self->Orig = ((byte*)JB_File_IPC(self->Talker, (&self->OrigSize)));
	if ((!self->Orig) or (((bool)(((uint64)self->Orig) & 31)))) {
		debugger;
		if ((!false)) {
			JB_Proc_SyntaxExpect(self, JB_LUB[1139]);
		}
		self->Orig = ((byte*)((&self->Dummy)));
		self->OrigSize = 0;
	}
	return self->OrigSize;
}

void JB_Proc_SetupServerState(Process* self) {
	if (self->IsServer) {
		memzero(self->Orig, self->OrigSize);
		(JB_Proc_SyntaxIsSet(self, kJB__IPCState_connecting, true));
		self->Ours->Special = JB__Proc_SpecialState;
	}
	 else {
		if ((!(JB_IPCState_SyntaxCast(self->Theirs->State)))) {
			JB_Proc_SyntaxExpect(self, JB_LUB[1140]);
			return;
		}
		(JB_Proc_SyntaxIsSet(self, kJB__IPCState_connected, true));
	}
}

PID_Int JB_Proc_sideid(Process* self) {
	return JB_bool_OperatorSign(self->IsServer, JB_App__ID());
}

bool JB_Proc_Send(Process* self, Message* msg, Date TimeOut) {
	if (JB_Proc_CanSend(self)) {
		JB_Proc_SendSub(self, msg);
		return (TimeOut > 0) and JB_Proc_WaitFor(self, TimeOut, true);
	}
	if ((!JB_Proc_Alive(self))) {
		JB_Proc_Disconnect(self);
	}
	 else if ((!msg)) {
		0;
	}
	 else if (JB_Proc_Closed(self)) {
		JB_Proc_Other(self, JB_LUB[1141], false);
	}
	 else if ((self->Ours->Queued < 255) and ((bool)self->SendQueue)) {
		JB_Ring_FirstSet(self->SendQueue, msg);
		self->Ours->Queued++;
	}
	 else {
		JB_Proc_Other(self, JB_LUB[1142], false);
	}
	return false;
}

void JB_Proc_SyntaxExpect(Process* self, JB_String* err) {
	if (JB_Proc_SyntaxIsnt(self, kJB__IPCState_invalid)) {
		JB_Proc_Self(self, err, true);
		(JB_Proc_SyntaxIsSet(self, kJB__IPCState_invalid, true));
		JB_String* _tmPf0 = JB_Incr(JB_File_Path(self->Talker));
		JB_Rec_NewErrorWithNode(JB_StdErr, nil, err, _tmPf0);
		JB_Decr(_tmPf0);
	}
}

void JB_Proc_SyntaxIsSet(Process* self, IPCState d, bool Value) {
	if ((!Value)) {
		return;
	}
	IPCState old = self->Ours->State;
	if (old >= kJB__IPCState_closed) {
		if ((!((d >= old) or (d <= kJB__IPCState_connected)))) {
			debugger;
			return;
		}
	}
	self->Ours->State = d;
}

bool JB_Proc_SyntaxIsnt(Process* self, IPCState d) {
	return self->Ours->State != d;
}

JB_String* JB_Proc_TheirName(Process* self) {
	return JB_Proc_OurName(self, false);
}

void JB_Proc_Unlink(Process* self) {
	JB_File_Delete(self->Talker);
}

void JB_Proc_Unmap(Process* self) {
	if ((!self->Orig)) {
		return;
	}
	JB_munmap(self->Orig, self->OrigSize);
	self->Orig = nil;
	self->OrigSize = 0;
	JB_Proc_UseDummy(self);
}

void JB_Proc_UseDummy(Process* self) {
	self->Theirs = (&self->Dummy);
	self->Ours = (&self->Dummy);
	(&self->Dummy)->State = kJB__IPCState_closed;
}

int JB_Proc_Wait(Process* self, int wait) {
	if (wait < 1) {
		return wait + 2;
	}
	wait = (wait << 1);
	if (wait > 3276) {
		wait = 3276;
		if ((!JB_Proc_Alive(self))) {
			JB_Proc_Self(self, JB_LUB[1143], false);
			return nil;
		}
	}
	JB_Date__Sleep(wait);
	return wait;
}

bool JB_Proc_WaitFor(Process* self, Date TimeOut, bool Send) {
	Date now = JB_Date__Now();
	Date FinalDate = now + TimeOut;
	Date print_time = now + (327680 + ((self->CanPrint < kJB__Proc_PrintWaiting) * 2066743296000000));
	int wait = 1 - 2048;
	while (wait) {
		if ((!Send)) {
			JB_Proc_Flush(self);
		}
		if (JB_Proc_Found(self, Send)) {
			JB_Proc_RefillOpen(self);
			return true;
		}
		if ((!JB_IPCMessage_IsOpen(self->Theirs))) {
			JB_Proc_Other(self, JB_LUB[1144], false);
			break;
		}
		if (wait > 0) {
			now = JB_Date__Now();
			if (((bool)TimeOut) and (now > FinalDate)) {
				if ((!Send)) {
					JB_Proc_Other(self, JB_LUB[1145], false);
					(JB_Proc_SyntaxIsSet(self, kJB__IPCState_timedout, true));
					debugger;
				}
				return false;
			}
			if (((bool)self->CID) and (now > print_time)) {
				JB_Proc_Self(self, JB_LUB[1146], false);
				print_time = (print_time + 327680);
			}
		}
		 else if (wait == (1 - 2048)) {
			JB_Proc_Alive(self);
			if ((!(TimeOut > 0))) {
				return nil;
			}
		}
		wait = JB_Proc_Wait(self, wait);
	};
	if (self->Ours->State < kJB__IPCState_closed) {
		(JB_Proc_SyntaxIsSet(self, kJB__IPCState_closed, true));
	}
	JB_Proc_Self(self, JB_LUB[1147], false);
	return false;
}

void JB_Proc_WriteSub(Process* self) {
	JB_Proc_Self(self, JB_LUB[1148], false);
	if (self->Writer->Failed) {
		JB_Proc_SyntaxExpect(self, JB_LUB[1149]);
		return;
	}
	IPCMessage* sp = self->Ours;
	sp->DataLength = self->Writer->Length;
	sp->SendID++;
	self->LastSend = JB_Date__Now();
	(JB_FS_LengthSet(self->Writer, 0));
}

Process* JB_Proc__Alloc() {
	return ((Process*)JB_New(Process));
}

int JB_Proc__Init_() {
	{
		JB__Proc_ClosePipesInstalled = 0;
		JB__Proc_SpecialState = 0;
		JB__Proc_IncID = 0;
	}
	;
	return 0;
}

int JB_Proc__InitCode_() {
	return 0;
}

Process* JB_Proc__New(JB_String* name, int n, Array* params, fn_subprocess sub, bool TrapStdOut) {
	Process* __rz__ = ((Process*)JB_Proc__Alloc());
	if (__rz__) {
		JB_Proc_Constructor(__rz__, name, n, params, sub, TrapStdOut);
	}
	return __rz__;
}

Process* JB_Proc__Parent() {
	if (JB__Proc_Owner_ == nil) {
		JB_SetRef(JB__Proc_Owner_, JB_Proc__New(JB_LUB[0], 0, nil, nil, false));
	}
	return JB__Proc_Owner_;
}

void JB_Proc__StackTraceJbin(FastString* j, JB_String* reason, int skip) {
	_voidptr arr[32] = {
	};
	int size = 32;
	_cstring* strs = JB_BackTrace((&arr[0]), (&size));
	JB_bin_jinit(j);
	JB_bin_enter(j, JB_SyxArg, reason);
	{
		IntRange _LoopSrcf0 = JB_int_OperatorTo(skip, size - 1);
		while (_LoopSrcf0[0] < _LoopSrcf0[1]) {
			int i = _LoopSrcf0[0];
			JB_bin_AddCstring(j, ((_cstring)(((byte*)strs[i]) + 59)), JB_SyxEmb);
			_LoopSrcf0[0] = (_LoopSrcf0[0] + 1);
		};
	};
}

void JB_Proc__TellParentIDied(int signal) {
	if ((!(signal))) {
		signal = 1;
	}
	JB__DefaultCrashHandler((-abs(signal)));
	(JB_App__CrashInstall(nil));
	Process* o = JB__Proc_Owner_;
	if ((!o)) {
		return;
	}
	if (signal != -1999) {
		o->Ours->State = JB_int_OperatorMax(((int)o->Ours->State), kJB__IPCState_crashed);
	}
	JB_Proc_SendCrashed(o);
}


bool JB_Sav_IsSaveMarked(Saveable* self) {
	int* p = ((int*)self);
	return (((bool)(p[0] & kJB__Saver_RefMark)));
}

void JB_Sav_LoadProperties(Saveable* self, ObjectLoader* Loader) {
	Loader->CouldntLoad = self;
}

void JB_Sav_SaveCollect(Saveable* self, ObjectSaver* Saver) {
}

bool JB_Sav_SaveMark(Saveable* self) {
	int* p = ((int*)self);
	int rc = p[0];
	if (((bool)(rc & kJB__Saver_RefMark))) {
		return nil;
	}
	p[0] = (rc | kJB__Saver_RefMark);
	return true;
}

SaverClassInfo* JB_Sav_SaverInfo(Saveable* self) {
	return ((SaverClassInfo*)JB_ObjClass(self)->SaveInfo);
}

void JB_Sav_SaveToFile(Saveable* self, JB_File* f) {
	FastString* it = JB_Incr(JB_File_writer(f));
	if (it) {
		JB_FreeIfDead(JB_Sav_SaveTo(self, it));
	}
	JB_Decr(it);
}

JB_String* JB_Sav_SaveTo(Saveable* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	if ((!fs)) {
		JB_Decr(fs);
		return nil;
	}
	ObjectSaver Saver = JB_Saver__New();
	JB_SetRef(Saver.Dest, fs);
	Saver.Root = self;
	JB_FS_AppendString(fs, kJB_SaverStart1);
	JB_Object_SaveTryCollect(self, (&Saver));
	SaverClassInfo* sci = JB__Saver_SaveableList;
	while (sci != nil) {
		JB_sci_Output(sci, (&Saver));
		sci = sci->NextInfo;
	};
	sci = JB__Saver_SaveableList;
	while (sci != nil) {
		JB_sci_Clear(sci);
		sci = sci->NextInfo;
	};
	JB_Saver_Finish((&Saver), self);
	JB_String* result = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SetRef(Saver.Dest, nil);
	Saver.CantSaveThis = nil;
	JB_Saver_Destructor((&Saver));
	JB_SafeDecr(result);
	return result;
}

void JB_Sav_SaveUnMark(Saveable* self) {
	int* p = ((int*)self);
	p[0] = (p[0] & (~kJB__Saver_RefMark));
}

void JB_Sav_SaveWrite(Saveable* self, ObjectSaver* Saver) {
	Saver->CantSaveThis = self;
	JB_FS_AppendString(Saver->Dest, JB_LUB[1150]);
}


bool SC_Imp_CanBan(SCImport* self, SCFile* scf) {
	if ((!SC__Imp_STDLibTime)) {
		return true;
	}
	if ((!SC__Options_ProjectIsMiniLib)) {
		return nil;
	}
	JB_String* _tmPf0 = JB_Incr(JB_File_Path(scf));
	bool _tmPf1 = JB_File_DirectoryContains(SC__Comp_BaseProjectPath, _tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

void SC_Imp_Constructor(SCImport* self, JB_File* F) {
	self->IsSTDLib = false;
	self->Depth = 0;
	Array* _tmPf0 = JB_Array__New0();
	self->Files = JB_Incr(_tmPf0);
	self->InputFolder = nil;
	self->Proj = JB_Incr(F);
	SCModule* M = JB_Incr(((SCModule*)SC_Mod__Neu(nil, SC__Comp_program, nil)));
	JB_MemoryLayer* _tmPf1 = JB_Mem_CreateLayer((JB_AsClass(SCDecl)), self);
	self->DeclLayer = JB_Incr(_tmPf1);
	M->Project = self;
	M->IsImport = true;
	if (F != nil) {
		JB_SetRef(M->Name, JB_Str_Name(F));
		SC__Imp_Recent = JB_int64_OperatorMax(SC__Imp_Recent, JB_File_Modified(F));
	}
	self->Mod = JB_Incr(M);
	JB_Decr(M);
}

void SC_Imp_destructor(SCImport* self) {
	JB_Decr(self->Files);
	JB_Decr(self->InputFolder);
	JB_Decr(self->Proj);
	JB_Decr(self->DeclLayer);
	JB_Decr(self->Mod);
}

SCFile* SC_Imp_ImportDir(SCImport* self, JB_File* f, JB_String* Path) {
	SCFile* rz = nil;
	{
		JB_File_ListStart(f);
		while (JB_File_MoveNext(f)) {
			JB_String* cName = JB_Incr(JB_File_CurrChild(f));
			if ((!(JB_Str_ByteValue(cName, 0) != '.'))) {
				JB_Decr(cName);
				continue;
			}
			JB_File* c = JB_Incr(JB_File_SyntaxAccess(f, cName, false));
			JB_String* CurrPath = JB_Incr(JB_Str_Child(Path, cName));
			JB_String* ext = JB_Incr(JB_Str_Ext(cName));
			if (JB_Str_ContainsString(cName, JB_LUB[1151])) {
				0;
			}
			 else if (JB_File_IsDir(c)) {
				JB_FreeIfDead(SC_Imp_ImportDir(self, c, CurrPath));
			}
			 else if (JB_Str_IsSpeedieSrc(cName)) {
				SCFile* B = JB_Incr(SC_Imp_ImportSpd(self, c, CurrPath));
				if (JB_Str_Equals(cName, JB_LUB[1152], true)) {
					JB_SetRef(rz, B);
				}
				JB_Decr(B);
			}
			 else if ((JB_Str_Equals(ext, JB_LUB[1153], false)) or ((JB_Str_Equals(ext, JB_LUB[1154], false)) or ((JB_Str_Equals(ext, JB_LUB[1155], false)) or (JB_Str_Equals(ext, JB_LUB[591], false))))) {
				if ((!(SC__Imp_Shaders))) {
					JB_SetRef(SC__Imp_Shaders, JB_Dict__New());
				}
				(JB_Dict_ValueSet(SC__Imp_Shaders, cName, c));
			}
			 else if (JB_Str_isCLike(ext)) {
				JB_String* _tmPf1 = JB_Incr(JB_File_Path(c));
				JB_Array_SyntaxAppend(SC__Cpp_Cpp_Input, _tmPf1);
				JB_Decr(_tmPf1);
			}
			JB_Decr(ext);
			JB_Decr(CurrPath);
			JB_Decr(c);
			JB_Decr(cName);
		};
		JB_File_ListEnd(f);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

void SC_Imp_ImportMsg(SCImport* self, Message* j) {
	Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyxInt(j, JB_SyxStr, -1));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return;
	}
	JB_String* Name = JB_Incr(_tmPf0->Name);
	JB_Decr(_tmPf0);
	JB_File* P = JB_Incr(SC_Comp__FindProject(Name, true));
	if ((!JB_File_SyntaxCast(P))) {
		FastString* _fsf1 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf1, JB_LUB[1156]);
		JB_FS_AppendString(_fsf1, Name);
		JB_FS_AppendByte(_fsf1, '\'');
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		JB_Msg_SyntaxExpect(j, _tmPf2);
		JB_Decr(_tmPf2);
		JB_Decr(Name);
		JB_Decr(P);
		return;
	}
	SC_Imp__ImportPath(Name, P, self->Depth + 1);
	JB_Decr(P);
	JB_Decr(Name);
}

SCFile* SC_Imp_ImportSpd(SCImport* self, JB_File* c, JB_String* CurrPath) {
	SCFile* rz = nil;
	JB_String* path = JB_Incr(JB_Str_LowerCase(c));
	SCFile* _tmPf0 = JB_Incr(((SCFile*)JB_Dict_ValueStr(SC__Comp_Files, path)));
	if (JB_File_SyntaxCast(_tmPf0)) {
		JB_DoAt(1);
		if ((!false)) {
			JB_Object_Fail(path, JB_LUB[1157]);
		}
	}
	JB_Decr(_tmPf0);
	JB_SetRef(rz, SC_SCFile__New(c));
	(JB_Dict_ValueSet(SC__Comp_Files, path, rz));
	JB_Decr(path);
	JB_SetRef(rz->Proj, self);
	JB_Array_SyntaxAppend(self->Files, rz);
	JB_Array_SyntaxAppend(SC__Imp_AllFiles, rz);
	rz->filenum = JB_Array_Size(SC__Imp_AllFiles);
	JB_SafeDecr(rz);
	return rz;
}

void SC_Imp_IncludeCHeaders(SCImport* self, JB_File* f, Array* output) {
	{
		JB_File_ListStart(f);
		while (JB_File_MoveNext(f)) {
			JB_String* cName = JB_Incr(JB_File_CurrChild(f));
			JB_File* c = JB_Incr(JB_File_SyntaxAccess(f, cName, false));
			if (((!JB_File_IsDir(c))) and (JB_Str_OperatorIsa(cName, JB_LUB[1053]))) {
				JB_String* _tmPf1 = JB_Incr(JB_File_Path(c));
				JB_Array_SyntaxAppend(output, _tmPf1);
				JB_Decr(_tmPf1);
			}
			JB_Decr(c);
			JB_Decr(cName);
		};
		JB_File_ListEnd(f);
	};
}

void SC_Imp_LoadBanned(SCImport* self, Message* list) {
	if ((!(((bool)list) and JB_Msg_Expect(list, JB_SyxList, nil)))) {
		return;
	}
	Dictionary* x = ({
		Dictionary* _X = SC__Options_BannedClasses;
		if ((!_X)) {
			_X = JB_Dict__New();
			JB_SetRef(SC__Options_BannedClasses, _X);
		}
		 _X;
	});
	{
		Message* item = ((Message*)JB_Tree_First_(list));
		while (item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(item));
			JB_Msg_Expect(item, JB_SyxThg, nil);
			(JB_Dict_ValueLowerSet(x, item->Name, JB_LUB[317]));
			item = _Nf1;
		};
		(list);
	};
}

void SC_Imp_LoadPrefix(SCImport* self, SCFile* scf, int depth) {
	JB_SetRef(self->Mod->ExportName, JB_LUB[1158]);
	if ((!JB_File_SyntaxCast(scf))) {
		return;
	}
	Message* root = JB_Incr(SC_SCFile_AST(scf));
	if ((!root)) {
		JB_Decr(root);
		return;
	}
	Message* link = JB_Incr(JB_Msg_FindFlat(root, JB_SyxTmp, JB_LUB[820], false));
	JB_Decr(root);
	if (link) {
		JB_Tree_Remove(link);
		self->IsSTDLib = (SC__Imp_STDLibTime or (({
			Message* _tmP251 = JB_Incr(JB_Msg_GetConf(link, JB_LUB[729], false));
			bool _tmP250 = JB_Msg_SyntaxEquals(_tmP251, JB_LUB[807], true);
			JB_Decr(_tmP251);
			 _tmP250;
		})));
		if (SC_Imp_CanBan(self, scf)) {
			Message* _tmPf0 = JB_Incr(JB_Msg_GetConf(link, JB_LUB[1159], false));
			SC_Imp_LoadBanned(self, _tmPf0);
			JB_Decr(_tmPf0);
		}
		Message* _tmPf2 = JB_Incr(JB_Msg_NeedSyx(link, JB_SyxArg));
		Message* _tmPf1 = JB_Incr(JB_Msg_FindFlat(_tmPf2, JB_SyxTmp, JB_LUB[808], false));
		JB_Decr(_tmPf2);
		Message* name = JB_Incr(JB_Msg_NeedSyx(_tmPf1, JB_SyxThg));
		JB_Decr(_tmPf1);
		if (name) {
			JB_SetRef(scf->ExportName, name->Name);
			JB_SetRef(self->Mod->ExportName, name->Name);
		}
		JB_Decr(name);
	}
	JB_Decr(link);
}

void SC_Imp_PrepareAll(SCImport* self) {
	{
		Array* _LoopSrcf1 = JB_Incr(self->Files);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCFile* f = JB_Incr(((SCFile*)JB_Array_Value(_LoopSrcf1, _if0)));
			JB_FreeIfDead(SC_SCFile_AST(f));
			JB_Decr(f);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	};
}

void SC_Imp_ReloadImports(SCImport* self) {
	{
		Array* _LoopSrcf1 = JB_Incr(self->Files);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCFile* f = JB_Incr(((SCFile*)JB_Array_Value(_LoopSrcf1, _if0)));
			{
				Message* _LoopSrcf5 = JB_Incr(SC_SCFile_AST(f));
				Message* j = JB_Incr(((Message*)JB_Tree_First_(_LoopSrcf5)));
				while (j) {
					Message* _Nf4 = JB_Incr(((Message*)JB_Ring_NextSib(j)));
					if (JB_Msg_OperatorIsTmp(j, JB_LUB[390])) {
						SC_Imp_ImportMsg(self, j);
					}
					JB_SetRef(j, _Nf4);
					JB_Decr(_Nf4);
				};
				JB_Decr(j);
				(_LoopSrcf5);
				JB_Decr(_LoopSrcf5);
			}
			;
			JB_Decr(f);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	};
}

JB_String* SC_Imp_Render(SCImport* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendString(fs, self->Mod->Name);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Imp_Use(SCImport* self) {
	if (self) {
		JB_Mem_Use(self->DeclLayer);
		SC__Imp_Curr = self;
	}
}

SCImport* SC_Imp__Alloc() {
	return ((SCImport*)JB_New(SCImport));
}

void SC_Imp__ExportShaders() {
	if ((!SC__Imp_Shaders)) {
		return;
	}
	SC_Comp__Timer(JB_LUB[1160]);
	JB_File* _tmPf2 = JB_Incr(SC_Comp__BuildFolder());
	JB_File* P = JB_Incr(JB_File_SyntaxAccess(_tmPf2, JB_LUB[1161], false));
	JB_Decr(_tmPf2);
	if ((!JB_File_SyntaxCast(P))) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(P);
		return;
	}
	JB_FreeIfDead(JB_Str_MakeAndGoInto(P));
	JB_String* _tmPf4 = JB_Incr(JB_File__CWD());
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1162], _tmPf4));
	JB_Decr(_tmPf4);
	JB_PrintLine(_tmPf3);
	JB_Decr(_tmPf3);
	{
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(SC__Imp_Shaders));
		while (JB_Nav_MoveNext(_navf0)) {
			JB_String* sh_name = JB_Incr(JB_Nav_Name(_navf0));
			JB_Object* f = JB_Incr(JB_Nav_Value(_navf0));
			if (JB_Object_Isa(f, JB_AsClass(JB_File))) {
				JB_String* name = JB_Incr(JB_Str_Name(((JB_File*)f)));
				JB_File* Dest = JB_Incr(JB_File_SyntaxAccess(P, name, false));
				JB_Decr(name);
				FastString* fs = JB_Incr(JB_File_writer(Dest));
				JB_Decr(fs);
				JB_String* _tmPf6 = JB_Incr(JB_File_ReadAll(((JB_File*)f), 134217728, true));
				JB_String* _tmPf5 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1163], _tmPf6));
				JB_Decr(_tmPf6);
				(JB_Str_WriteSet(Dest, _tmPf5));
				JB_Decr(_tmPf5);
				JB_Decr(Dest);
			}
			 else if (JB_Object_Isa(f, JB_AsClass(JB_String))) {
				JB_File* Dest = JB_Incr(JB_File_SyntaxAccess(P, sh_name, false));
				debugger;
				(JB_File_DataSet(Dest, ((JB_String*)f)));
				JB_Decr(Dest);
			}
			JB_Decr(f);
			JB_Decr(sh_name);
		};
		JB_Decr(_navf0);
	}
	;
	JB_Decr(P);
}

JB_File* SC_Imp__FindInputFolder(JB_File* f) {
	JB_String* FirstName = JB_Incr(JB_LUB[0]);
	{
		JB_File_ListStart(f);
		while (JB_File_MoveNext(f)) {
			JB_String* name = JB_Incr(JB_File_CurrChild(f));
			if (SC_Imp__IsInputName(name)) {
				if ((!(JB_Str_Exists(FirstName)))) {
					JB_SetRef(FirstName, name);
				}
				 else {
					if ((!false)) {
						FastString* _fsf0 = JB_Incr(JB_FS__New());
						JB_FS_AppendString(_fsf0, JB_LUB[1164]);
						JB_FS_AppendString(_fsf0, name);
						JB_FS_AppendString(_fsf0, JB_LUB[1165]);
						JB_FS_AppendString(_fsf0, FirstName);
						JB_FS_AppendByte(_fsf0, '\'');
						JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf0));
						JB_Decr(_fsf0);
						JB_Object_Fail(nil, _tmPf3);
						JB_Decr(_tmPf3);
					}
				}
			}
			JB_Decr(name);
		};
		JB_File_ListEnd(f);
	}
	;
	if ((!(JB_Str_Exists(FirstName)))) {
		FastString* _fsf1 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf1, JB_LUB[1166]);
		JB_FS_AppendString(_fsf1, f);
		JB_FS_AppendString(_fsf1, JB_LUB[1167]);
		JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		JB_File_Fail(f, _tmPf4);
		JB_Decr(_tmPf4);
		JB_Decr(FirstName);
		return nil;
	}
	JB_File* _tmPf5 = JB_Incr(JB_File_SyntaxAccess(f, FirstName, false));
	JB_Decr(FirstName);
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

void SC_Imp__ImportPath(JB_String* path, JB_File* f, int ImportDepth) {
	JB_Incr(f);
	if ((!(JB_File_MustExist(f, JB_LUB[0]) and JB_Str_IsOKForImport(path)))) {
		JB_Decr(f);
		return;
	}
	JB_String* _tmPf0 = JB_Incr(JB_File_Path(f));
	JB_String* fpl = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	if (JB_FreeIfDead(((SCImport*)JB_Dict_ValueStr(SC__Comp_ImportedNames, fpl)))) {
		JB_Decr(f);
		JB_Decr(fpl);
		return;
	}
	SCImport* rz = JB_Incr(SC_Imp__New(f));
	(JB_Dict_ValueSet(SC__Comp_ImportedNames, fpl, rz));
	JB_Decr(fpl);
	if ((JB_Str_ContainsString(path, JB_LUB[1113])) and (JB_Str_ByteValue(path, 0) != '/')) {
	}
	 else if (JB_Str_Exists(SC__Options_SingleFileInput) and (!JB_Str_Exists(path))) {
	}
	 else {
		JB_SetRef(f, SC_Imp__FindInputFolder(f));
		if ((!(JB_File_SyntaxCast(f) and JB_File_MustExist(f, JB_LUB[0])))) {
			JB_Decr(f);
			JB_Decr(rz);
			return;
		}
	}
	JB_SetRef(rz->InputFolder, f);
	SCFile* index = nil;
	if (JB_Str_Exists(SC__Options_SingleFileInput) and (!JB_Str_Exists(path))) {
		JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(SC__Options_SingleFileInput));
		JB_SetRef(index, SC_Imp_ImportSpd(rz, _tmPf1, path));
		JB_Decr(_tmPf1);
	}
	 else {
		JB_SetRef(index, SC_Imp_ImportDir(rz, f, path));
	}
	SC_Imp_LoadPrefix(rz, index, ImportDepth);
	JB_Decr(index);
	JB_File* _tmPf2 = JB_Incr(JB_File_SyntaxAccess(f, JB_LUB[1168], false));
	SC_Imp_IncludeCHeaders(rz, _tmPf2, SC__Cpp_H_Input);
	JB_Decr(_tmPf2);
	JB_File* _tmPf3 = JB_Incr(JB_File_SyntaxAccess(f, JB_LUB[1169], false));
	JB_Decr(f);
	SC_Imp_IncludeCHeaders(rz, _tmPf3, SC__Cpp_H_PostInput);
	JB_Decr(_tmPf3);
	rz->Depth = ImportDepth;
	SC_Imp_PrepareAll(rz);
	SC_Imp_ReloadImports(rz);
	JB_Array_SyntaxAppend(SC__Comp_ImportedList, rz);
	JB_Decr(rz);
}

int SC_Imp__Init_() {
	{
		JB_SetRef(SC__Imp_AllFiles, JB_Array__New0());
		SC__Imp_Recent = 0;
		SC__Imp_STDLibTime = false;
	}
	;
	return 0;
}

int SC_Imp__InitCode_() {
	return 0;
}

bool SC_Imp__IsInputName(JB_String* name) {
	if (JB_Str_Equals(name, JB_LUB[1170], true)) {
		return true;
	}
	if (JB_Str_OperatorIsa(name, JB_LUB[1170])) {
		return true;
	}
	return false;
}

SCImport* SC_Imp__New(JB_File* F) {
	SCImport* __rz__ = ((SCImport*)SC_Imp__Alloc());
	if (__rz__) {
		SC_Imp_Constructor(__rz__, F);
	}
	return __rz__;
}

void SC_Imp__NoProj() {
	SC__Imp_Curr = nil;
	JB_ClassData_Restore((JB_AsClass(SCDecl)));
}


void SC_NR_Collect(SCNodeRenamer* self, Message* msg, JB_String* name, Message* after) {
	JB_Incr(msg);
	JB_SetRef(self->Name, name);
	while (msg != after) {
		if (JB_Msg_OperatorIsThing(msg, name)) {
			JB_Array_SyntaxAppend(self->nodes, msg);
		}
		JB_SetRef(msg, ((Message*)JB_Ring_FlatNext0(msg)));
	};
	JB_Decr(msg);
}

void SC_NR_CollectDclThg(SCNodeRenamer* self, Message* DclThg) {
	Message* Dcl = JB_Incr(JB_Msg_Ancestor(DclThg, JB_SyxDecl));
	if ((!(((bool)Dcl) and (JB_Msg_EqualsSyx(DclThg, JB_SyxThg, false))))) {
		JB_Msg_SyntaxExpect(DclThg, nil);
		JB_Decr(Dcl);
		return;
	}
	Message* _tmPf0 = JB_Incr(JB_Msg_FullAfter(Dcl));
	JB_Decr(Dcl);
	SC_NR_Collect(self, DclThg, DclThg->Name, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_NR_CollectSelfs(SCNodeRenamer* self, Message* root) {
	{
		Message* Msg = JB_Incr(root);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(root)));
		while (((bool)Msg) and (Msg != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(Msg)));
			if (JB_Msg_EqualsSyx(Msg, JB_SyxSDot, false)) {
				SC_Func__Tran_Sdt(Msg);
			}
			JB_SetRef(Msg, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(_afterf1);
		JB_Decr(Msg);
		(root);
	}
	;
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_FlatAfter(root)));
	SC_NR_Collect(self, root, JB_LUB[331], _tmPf3);
	JB_Decr(_tmPf3);
}

void SC_NR_Constructor(SCNodeRenamer* self) {
	JB_String* _tmPf0 = JB_LUB[0];
	self->Name = JB_Incr(_tmPf0);
	Array* _tmPf1 = JB_Array__New0();
	self->nodes = JB_Incr(_tmPf1);
}

void SC_NR_destructor(SCNodeRenamer* self) {
	JB_Decr(self->Name);
	JB_Decr(self->nodes);
}

void SC_NR_Rename(SCNodeRenamer* self, Message* name) {
	if (JB_Ring_HasChildren(name)) {
		JB_Msg_SyntaxExpect(name, JB_LUB[1171]);
		return;
	}
	{
		Array* _LoopSrcf1 = self->nodes;
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			Message* n = ((Message*)JB_Array_Value(_LoopSrcf1, _if0));
			JB_Msg_BeLike(n, name);
			_if0++;
		};
	};
}

void SC_NR_RenameStr(SCNodeRenamer* self, JB_String* s, Syntax func) {
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(func, s));
	SC_NR_Rename(self, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_NR_Uniqueify(SCNodeRenamer* self, SCBase* p) {
	JB_String* _tmPf0 = JB_Incr(SC_UniqueTmpVar(p, self->Name));
	SC_NR_RenameStr(self, _tmPf0, JB_SyxThg);
	JB_Decr(_tmPf0);
}

SCNodeRenamer* SC_NR__Alloc() {
	return ((SCNodeRenamer*)JB_New(SCNodeRenamer));
}

SCNodeRenamer* SC_NR__New() {
	SCNodeRenamer* __rz__ = ((SCNodeRenamer*)SC_NR__Alloc());
	if (__rz__) {
		SC_NR_Constructor(__rz__);
	}
	return __rz__;
}


Message* SC_SCObject_AnySource(SCObject* self) {
	if (self->Source) {
		return self->Source;
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCModule))) {
		if (((SCModule*)self)->Cls) {
			return ((SCModule*)self)->Cls->Source;
		}
	}
	return nil;
}

int SC_SCObject_auto_type(SCObject* self) {
	if (JB_Object_FastIsa(self, JB_AsClass(SCDecl))) {
		if (SC_Decl_SyntaxIs(((SCDecl*)self), kSC__SCDeclInfo_property)) {
			return -2;
		}
		if (SC_Decl_SyntaxIs(((SCDecl*)self), kSC__SCDeclInfo_const)) {
			return 5;
		}
		return 0;
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
		if (SC_Func_OperatorIsa(((SCFunction*)self), kSC_IsVirtualCaller)) {
			return 4;
		}
		return 1;
	}
	if (JB_Object_Isa(self, JB_AsClass(SCClass)) or JB_Object_Isa(self, JB_AsClass(SCModule))) {
		return 2;
	}
	return 3;
}

int SC_SCObject_AutoCompleteType(SCObject* self) {
	if (JB_Object_FastIsa(self, JB_AsClass(SCModule))) {
		if (((SCModule*)self)->Cls) {
			int r = 1;
			if (SC_Class_EqualsType(((SCModule*)self)->Cls, kSC__SCBaseType_FuncProto, false)) {
				r = (r | 8);
			}
			return r;
		}
		return 2;
	}
	return 4;
}

JB_String* SC_SCObject_BaseIcon(SCObject* self) {
	if (JB_Object_FastIsa(self, JB_AsClass(SCModule))) {
		if (((SCModule*)self)->Cls) {
			return JB_LUB[1172];
		}
		return JB_LUB[1173];
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
		if (SC_Func_IsBehaviour(((SCFunction*)self))) {
			return JB_LUB[1174];
		}
		if (SC_Func_OperatorIsa(((SCFunction*)self), kSC_IsVirtualCaller)) {
			return JB_LUB[1175];
		}
		return JB_LUB[1176];
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCClass))) {
		return JB_LUB[1177];
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCDecl))) {
		if (SC_Decl_SyntaxIs(((SCDecl*)self), kSC__SCDeclInfo_property)) {
			return JB_LUB[1178];
		}
		if (SC_Decl_SyntaxIs(((SCDecl*)self), kSC__SCDeclInfo_const)) {
			return JB_LUB[1179];
		}
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCIterator))) {
		return JB_LUB[1180];
	}
	return JB_LUB[1181];
}

JB_String* SC_SCObject_CallFromName(SCObject* self) {
	if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
		return SC_Func_RenderName(((SCFunction*)self), nil);
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCDecl))) {
		return SC_Decl_AutoCompleteName(((SCDecl*)self));
	}
	return self->Name;
}

JB_String* SC_SCObject_CanAuto(SCObject* self, JB_String* search) {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	JB_SetRef(rz, SC_SCObject_CanAutoSub(self, search));
	if (JB_Str_Exists(rz)) {
		bool IsExact = (JB_Str_Equals(rz, search, true));
		if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
			if (SC_Func_VisibleArgs(((SCFunction*)self))) {
				JB_SetRef(rz, JB_Str_OperatorPlus(rz, JB_LUB[1182]));
			}
		}
		if ((!IsExact) and ((bool)self->NoAutoComplete)) {
			JB_SetRef(rz, JB_LUB[0]);
		}
	}
	JB_SafeDecr(rz);
	return rz;
}

bool SC_SCObject_CanAutoLimit(SCObject* self, int Type, SCDecl* Limiter) {
	int T = SC_SCObject_AutoCompleteType(self);
	if ((!((bool)(Type & T)))) {
		return nil;
	}
	if (Limiter) {
		SCDecl* mine = JB_Object_AsDecl(self);
		if ((!mine)) {
			return nil;
		}
		return SC_Decl_MiniMatch(mine, Limiter, 0);
	}
	return true;
}

JB_String* SC_SCObject_CanAutoSub(SCObject* self, JB_String* search) {
	if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
		if ((JB_Str_OperatorStarts(((SCFunction*)self)->Name, JB_LUB[546])) and (!(JB_Str_OperatorStarts(search, JB_LUB[1183])))) {
			return JB_LUB[0];
		}
		if (SC_Func_VisibleArgs(((SCFunction*)self))) {
			return ((SCFunction*)self)->Name;
		}
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCDecl))) {
		return SC_Decl_RealName(((SCDecl*)self));
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCModule))) {
		SCClass* cls = ((SCModule*)self)->Cls;
		if ((((bool)cls) and ((bool)cls->NoAutoComplete)) or SC_Class_IsBehaviourTable(cls)) {
			return JB_LUB[0];
		}
	}
	return self->Name;
}

void SC_SCObject_Constructor(SCObject* self) {
	self->LinkFrom = nil;
	JB_String* _tmPf0 = JB_LUB[0];
	self->Name = JB_Incr(_tmPf0);
	self->Source = nil;
	self->TableId = 0;
	self->NoAutoComplete = 0;
}

void SC_SCObject_destructor(SCObject* self) {
	JB_Decr(self->LinkFrom);
	JB_Decr(self->Name);
	JB_Decr(self->Source);
}

SCFunction* SC_SCObject_Disambiguate(SCObject* self, Message* src) {
	SCFunction* rz = nil;
	if (JB_Object_FastIsa(self, JB_AsClass(SCDecl))) {
		rz = ((SCDecl*)self)->Setter;
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
		rz = ((SCFunction*)self);
	}
	rz = SC_Func_Disambiguate(rz, src);
	return rz;
}

JB_String* SC_SCObject_Display(SCObject* self, bool exact) {
	if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
		if (SC_Func_IsAllocOrNew(((SCFunction*)self)) or JB_Str_Exists(((SCFunction*)self)->Disabled)) {
			return JB_LUB[0];
		}
		return ((JB_String*)JB_Ternary(exact, SC_Func_RenderTitle(((SCFunction*)self), false, nil), ((SCFunction*)self)->Name));
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCDecl))) {
		return SC_Decl_AutoCompleteName(((SCDecl*)self));
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCIterator))) {
		return JB_LUB[0];
	}
	return self->Name;
}

SCObject* SC_SCObject_NextDisplay(SCObject* self, bool exact) {
	if (exact) {
		if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
			return ((SCFunction*)self)->NextFunc;
		}
		if (JB_Object_FastIsa(self, JB_AsClass(SCDecl))) {
			return ((SCDecl*)self)->Setter;
		}
	}
	return nil;
}

JB_String* SC_SCObject_Render(SCObject* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_String* S = JB_Incr(JB_Str__FromC(JB_ObjClass(self)->Name));
	JB_String* _tmPf0 = JB_Incr(JB_Str_Range(S, (2), JB_int__max()));
	JB_Decr(S);
	JB_FS_AppendString(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendString(fs, JB_LUB[278]);
	JB_FS_AppendString(fs, self->Name);
	JB_String* _tmPf1 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool SC_SCObject_ShouldUnWrap(SCObject* self) {
	if (JB_Object_FastIsa(self, JB_AsClass(SCDecl))) {
		return ((bool)((SCDecl*)self)->AutoCastTo) and (SC_Decl_SyntaxIsnt(((SCDecl*)self), kSC__SCDeclInfo_newlycreated));
	}
	return false;
}

void SC_SCObject_Fail(SCObject* self, JB_String* Error) {
	JB_Rec_NewErrorWithNode(JB_StdErr, self->Source, Error, nil);
}


JB_String* SC_Opp_CaseAwareStr(SCOperator* self) {
	return JB_bool_Render0(self->IsCaseAware);
}

void SC_Opp_Constructor(SCOperator* self, fn_OpASM ASM) {
	self->Score = 0;
	JB_String* _tmPf0 = JB_LUB[0];
	self->Name = JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_LUB[0];
	self->CompOp = JB_Incr(_tmPf1);
	JB_String* _tmPf2 = JB_LUB[0];
	self->CompParam = JB_Incr(_tmPf2);
	JB_String* _tmPf3 = JB_LUB[0];
	self->FuncName = JB_Incr(_tmPf3);
	self->IsCaseAware = false;
	self->IsCompare = false;
	self->IsEquals = false;
	self->IsSet = false;
	self->AsBit = false;
	self->IsCustom = false;
	self->DoesntNeedExtraBits = false;
	self->MakesSigned = false;
	self->IsBoolable = false;
	self->ASM = ASM;
}

void SC_Opp_destructor(SCOperator* self) {
	JB_Decr(self->Name);
	JB_Decr(self->CompOp);
	JB_Decr(self->CompParam);
	JB_Decr(self->FuncName);
}

void SC_Opp_InitBit(SCOperator* self, JB_String* name_, JB_String* FuncName_) {
	JB_SetRef(self->Name, name_);
	JB_SetRef(self->FuncName, FuncName_);
	self->AsBit = true;
}

void SC_Opp_InitComp(SCOperator* self, JB_String* name_) {
	JB_SetRef(self->Name, name_);
	self->IsCaseAware = (JB_Str_ByteValue(name_, 0) == '~');
	self->IsCompare = true;
	JB_SetRef(self->FuncName, JB_LUB[1184]);
	JB_String* s = JB_Incr(SC_Opp_SimpleName(self));
	if (JB_Str_Length(s) == 2) {
		JB_SetRef(self->CompOp, s);
	}
	 else {
		JB_SetRef(self->CompOp, JB_LUB[1185]);
	}
	if (JB_Str_Equals(s, JB_LUB[396], false)) {
		JB_SetRef(self->CompParam, JB_LUB[1186]);
		JB_SetRef(self->CompOp, JB_LUB[1187]);
	}
	 else if (JB_Str_Equals(s, JB_LUB[422], false)) {
		JB_SetRef(self->CompParam, JB_LUB[1188]);
		JB_SetRef(self->CompOp, JB_LUB[1189]);
	}
	 else if (((JB_Str_Equals(s, JB_LUB[1187], false))) or ((JB_Str_Equals(s, JB_LUB[1189], false)))) {
		JB_SetRef(self->CompParam, JB_LUB[907]);
	}
	 else {
		self->IsEquals = true;
		JB_SetRef(self->CompParam, JB_LUB[907]);
	}
	JB_Decr(s);
}

void SC_Opp_InitNormal(SCOperator* self, JB_String* name_, JB_String* FuncName_) {
	JB_SetRef(self->Name, name_);
	JB_SetRef(self->FuncName, FuncName_);
}

bool SC_Opp_IsCompSet(SCOperator* self) {
	return self->IsCompare or self->IsSet;
}

JB_String* SC_Opp_SimpleName(SCOperator* self) {
	JB_String* n = JB_Incr(self->Name);
	if (self->IsCaseAware) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(n, (1), JB_int__max()));
		JB_Decr(n);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_SafeDecr(n);
	return n;
}

bool SC_Opp_SyntaxEquals(SCOperator* self, JB_String* s, bool aware) {
	return JB_Str_Equals(self->Name, s, aware);
}

void SC_Opp__AddBit(JB_String* s, JB_String* FuncName, fn_OpASM ASM) {
	SCOperator* opp = JB_Incr(SC_Opp__New(ASM));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[701], FuncName));
	SC_Opp_InitBit(opp, s, _tmPf0);
	JB_Decr(_tmPf0);
	(JB_Dict_ValueSet(SC__Opp_Dict, s, opp));
	JB_String* _tmPf1 = JB_Incr(JB_Str_LowerCase(FuncName));
	(JB_Dict_ValueSet(SC__Opp_Dict, _tmPf1, opp));
	JB_Decr(_tmPf1);
	JB_Decr(opp);
}

void SC_Opp__AddComp(JB_String* s, fn_OpASM ASM) {
	SC_Opp__AddCompSub(s, ASM);
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[517], s));
	SC_Opp__AddCompSub(_tmPf0, ASM);
	JB_Decr(_tmPf0);
}

void SC_Opp__AddComp2(JB_String* s, fn_OpASM ASM) {
	SCOperator* it = JB_Incr(SC_Opp__New(ASM));
	SC_Opp_InitComp(it, s);
	(JB_Dict_ValueSet(SC__Opp_Dict, s, it));
	it->IsCompare = false;
	it->IsSet = true;
	JB_Decr(it);
}

void SC_Opp__AddCompSub(JB_String* s, fn_OpASM fn) {
	SCOperator* opp = JB_Incr(SC_Opp__New(fn));
	SC_Opp_InitComp(opp, s);
	(JB_Dict_ValueSet(SC__Opp_Dict, s, opp));
	JB_Decr(opp);
}

SCOperator* SC_Opp__AddNormal(JB_String* s, JB_String* FuncName, fn_OpASM ASM) {
	SCOperator* opp = JB_Incr(SC_Opp__New(ASM));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[701], FuncName));
	SC_Opp_InitNormal(opp, s, _tmPf0);
	JB_Decr(_tmPf0);
	(JB_Dict_ValueSet(SC__Opp_Dict, s, opp));
	JB_String* _tmPf1 = JB_Incr(JB_Str_LowerCase(FuncName));
	(JB_Dict_ValueSet(SC__Opp_Dict, _tmPf1, opp));
	JB_Decr(_tmPf1);
	JB_SafeDecr(opp);
	return opp;
}

SCOperator* SC_Opp__Alloc() {
	return ((SCOperator*)JB_New(SCOperator));
}

void SC_Opp__BuildOrder() {
	JB_String* Strs = JB_Incr(JB_LUB[1190]);
	Array* order = JB_Incr(JB_Str_Split(Strs, '\n'));
	JB_Decr(Strs);
	Message* fake = JB_Incr((JB_Syx_Msg(JB_SyxOpp, JB_LUB[0])));
	{
		int _LoopSrcf1 = JB_Array_Size(order);
		int i = 0;
		while (i < _LoopSrcf1) {
			{
				JB_String* _tmPf5 = JB_Incr(((JB_String*)JB_Array_Value(order, i)));
				Array* _LoopSrcf3 = JB_Incr(JB_Str_Words(_tmPf5));
				JB_Decr(_tmPf5);
				int _if2 = 0;
				while (_if2 < JB_Array_Size(_LoopSrcf3)) {
					JB_String* s2 = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf3, _if2)));
					if (JB_Str_Exists(s2)) {
						JB_SetRef(fake->Name, s2);
						SCOperator* _tmPf6 = JB_Incr(SC_Opp__Lookup(fake));
						_tmPf6->Score = i;
						JB_Decr(_tmPf6);
					}
					JB_Decr(s2);
					_if2++;
				};
				JB_Decr(_LoopSrcf3);
			}
			;
			i++;
		};
	}
	;
	JB_Decr(fake);
	JB_Decr(order);
	SCOperator* _tmPf7 = JB_Incr(((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, JB_LUB[541])));
	_tmPf7->Score = 100;
	JB_Decr(_tmPf7);
	SCOperator* _tmPf8 = JB_Incr(((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, JB_LUB[1191])));
	SC__Opp_CustomOperatorScore = _tmPf8->Score;
	JB_Decr(_tmPf8);
}

void SC_Opp__Init() {
	JB_SetRef(SC__Opp_Dict, JB_Dict__New());
	SC_Opp__AddCompSub(JB_LUB[1192], (&SC_asmOps__Equals));
	SC_Opp__AddCompSub(JB_LUB[1185], (&SC_asmOps__Equals));
	SC_Opp__AddComp(JB_LUB[396], (&SC_asmOps__Less));
	SC_Opp__AddComp(JB_LUB[422], (&SC_asmOps__More));
	SC_Opp__AddComp(JB_LUB[1187], (&SC_asmOps__LessEq));
	SC_Opp__AddComp(JB_LUB[1189], (&SC_asmOps__MoreEq));
	SC_Opp__AddComp(JB_LUB[678], (&SC_asmOps__NotEq));
	JB_FreeIfDead(SC_Opp__AddNormal(JB_LUB[625], JB_LUB[1193], (&SC_asmOps__Mod)));
	JB_FreeIfDead(SC_Opp__AddNormal(JB_LUB[515], JB_LUB[1194], (&SC_asmOps__Plus)));
	SCOperator* _tmPf0 = JB_Incr(SC_Opp__AddNormal(JB_LUB[270], JB_LUB[1195], (&SC_asmOps__Minus)));
	_tmPf0->MakesSigned = true;
	JB_Decr(_tmPf0);
	JB_FreeIfDead(SC_Opp__AddNormal(JB_LUB[880], JB_LUB[1196], (&SC_asmOps__Mul)));
	JB_FreeIfDead(SC_Opp__AddNormal(JB_LUB[1113], JB_LUB[1197], (&SC_asmOps__Div)));
	SC_Opp__AddBit(kSC_BitAnd, JB_LUB[1198], (&SC_asmOps__BitAnd));
	SC_Opp__AddBit(kSC_BitOr, JB_LUB[1199], (&SC_asmOps__BitOr));
	SC_Opp__AddBit(kSC_BitXor, JB_LUB[1200], (&SC_asmOps__BitXor));
	SCOperator* _tmPf1 = JB_Incr(((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, JB_LUB[626])));
	(JB_Dict_ValueSet(SC__Opp_Dict, JB_LUB[458], _tmPf1));
	JB_Decr(_tmPf1);
	SC_Opp__AddBit(JB_LUB[1201], JB_LUB[1202], (&SC_asmOps__ROL));
	SC_Opp__AddBit(JB_LUB[1203], JB_LUB[1204], (&SC_asmOps__ROR));
	SC_Opp__AddBit(JB_LUB[1205], JB_LUB[1206], (&SC_asmOps__SHR));
	SC_Opp__AddBit(JB_LUB[1207], JB_LUB[1208], (&SC_asmOps__SHL));
	SC_Opp__AddComp2(JB_LUB[541], (&SC_asmOps__Assign));
	SC_Opp__AddBit(JB_LUB[898], JB_LUB[898], nil);
	SC_Opp__AddBit(JB_LUB[899], JB_LUB[899], nil);
	SC_Opp__BuildOrder();
}

int SC_Opp__Init_() {
	{
		SC__Opp_CustomOperatorScore = 0;
	}
	;
	return 0;
}

int SC_Opp__InitCode_() {
	return 0;
}

SCOperator* SC_Opp__Lookup(Message* opch) {
	SCOperator* result = ((SCOperator*)opch->Obj);
	if (result) {
		return result;
	}
	JB_String* op = opch->Name;
	result = ((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, op));
	if ((!result)) {
		result = SC_Opp__AddNormal(op, JB_Str_UpperFirst(op), nil);
		result->IsCustom = true;
		result->Score = SC__Opp_CustomOperatorScore;
	}
	 else if ((!JB_Str_Equals(op, result->Name, false))) {
		if ((!result->IsCustom)) {
			JB_SetRef(opch->Name, result->Name);
		}
	}
	result->IsBoolable = ((JB_Str_Equals(op, JB_LUB[600], false)) or ((JB_Str_Equals(op, JB_LUB[601], false)) or ((JB_Str_Equals(op, JB_LUB[541], false)) or ((JB_Str_Equals(op, JB_LUB[1185], false)) or ((JB_Str_Equals(op, JB_LUB[678], false)) or (JB_Str_Equals(op, JB_LUB[1209], false)))))));
	result->DoesntNeedExtraBits = ((JB_Str_Equals(op, JB_LUB[417], false)) or (JB_Str_Equals(op, JB_LUB[1205], false)));
	return result;
}

SCOperator* SC_Opp__New(fn_OpASM ASM) {
	SCOperator* __rz__ = ((SCOperator*)SC_Opp__Alloc());
	if (__rz__) {
		SC_Opp_Constructor(__rz__, ASM);
	}
	return __rz__;
}


void SC_PA_AddParam(SCParamArray* self, Message* item) {
	SC_PA_SyntaxAppend(self, item);
	self->HasProperParams = true;
}

bool SC_PA_AddTestedParam(SCParamArray* self, Message* item, SCBase* name_space) {
	SCDecl* P = JB_Incr(SC_TypeOfExpr(item, name_space, nil));
	if ((!(P))) {
		JB_Msg_SyntaxExpect(item, JB_LUB[1210]);
		JB_Decr(P);
		return nil;
	}
	JB_Decr(P);
	SC_PA_AddParam(self, item);
	return true;
}

SCFunction* SC_PA_ArgsMatchError(SCParamArray* self, int TypeCast, SCFunction* f, SCFunction* R) {
	if ((!SC_PA_MadeError(self))) {
		if ((!false)) {
			JB_String* _tmPf0 = JB_Incr(JB_Str_ArgsMatchError(JB_LUB[1211], TypeCast != 0));
			JB_Msg_SyntaxExpect(self->Exp, _tmPf0);
			JB_Decr(_tmPf0);
		}
		if ((!false)) {
			JB_Msg_SyntaxExpect(f->Source, JB_LUB[1212]);
		}
		if ((!false)) {
			JB_Msg_SyntaxExpect(R->Source, JB_LUB[1213]);
		}
	}
	return nil;
}

void SC_PA_Constructor(SCParamArray* self, Message* exp, Message* side) {
	self->Size = 0;
	self->IsAssigns = false;
	self->HasProperParams = false;
	self->IsForClass = false;
	self->IsSelf = false;
	self->IsSuper = false;
	self->Found = false;
	self->Exp = exp;
	(SC_PA_SideSet(self, side));
	self->IsDot = ((JB_Msg_EqualsSyx(exp, JB_SyxDot, false)));
	self->IsAddress = ((exp != nil) and (({
		Message* _tmP247 = JB_Incr(JB_Msg_NiceParent(exp));
		bool _tmP246 = JB_Msg_OperatorIsBRel(_tmP247, JB_LUB[417]);
		JB_Decr(_tmP247);
		 _tmP246;
	})));
	self->ErrCount = JB_StdErr->ErrorCount;
}

SCBase* SC_PA_DetectDotSuper(SCParamArray* self, SCBase* curr) {
	self->IsForClass = SC_Base_IsClassFunc(curr);
	if (self->IsDot) {
		Message* Exp0 = ((Message*)JB_Ring_First(self->Exp));
		self->IsSelf = ((JB_Msg_SyntaxEquals(Exp0, JB_LUB[331], true)));
		if (self->IsForClass) {
			SC_PA_SyntaxAppend(self, Exp0);
			if (JB_Msg_OperatorIsThing(Exp0, JB_LUB[1214])) {
				self->IsSuper = true;
				JB_SetRef(Exp0->Name, JB_LUB[331]);
				return curr->Lookup;
			}
		}
	}
	return curr;
}

int SC_PA_IgnoreSelf(SCParamArray* self) {
	if (self->IsDot and self->IsForClass) {
		return kSC_TypeCastIgnoreContained;
	}
	return 0;
}

bool SC_PA_IsModule(SCParamArray* self) {
	return (!self->IsForClass);
}

int SC_PA_MacroSize(SCParamArray* self) {
	if (self->IsAssigns) {
		return self->Size - 1;
	}
	return self->Size;
}

bool SC_PA_MadeError(SCParamArray* self) {
	return JB_StdErr->ErrorCount > self->ErrCount;
}

bool SC_PA_PreReadTypes(SCParamArray* self, SCBase* Name_Space, Message* P, Message* side) {
	if ((!(self->Exp))) {
		self->Exp = P;
	}
	{
		Message* Item = JB_Incr(((Message*)JB_Tree_First_(P)));
		while (Item) {
			if ((!SC_PA_AddTestedParam(self, Item, Name_Space))) {
				JB_Decr(Item);
				return nil;
			}
			JB_SetRef(Item, ((Message*)JB_Ring_NextSib(Item)));
		};
		JB_Decr(Item);
		(P);
	}
	;
	(SC_PA_SideSet(self, side));
	return true;
}

IntRange SC_PA_Range(SCParamArray* self) {
	s16 y = self->Size;
	int x = ((int)(self->IsDot and self->IsForClass));
	return ((IntRange)ivec2{x, y});
}

JB_String* SC_PA_RenderName(SCParamArray* self) {
	if (self->IsForClass) {
		Message* _tmPf0 = JB_Incr(SC_PA_SyntaxAccess(self, 0));
		JB_String* _tmPf2 = JB_Incr(JB_Msg_RenderType(_tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(self->Exp)));
	JB_String* _tmPf3 = JB_Incr(JB_Msg_Render(_tmPf1, nil));
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

JB_String* SC_PA_RenderType(SCParamArray* self) {
	if (self->IsForClass) {
		return JB_LUB[794];
	}
	return JB_LUB[617];
}

void SC_PA_SideSet(SCParamArray* self, Message* Value) {
	if (Value) {
		SC_PA_SyntaxAppend(self, Value);
		self->IsAssigns = true;
	}
}

Message* SC_PA_SyntaxAccess(SCParamArray* self, int i) {
	if (i < self->Size) {
		return self->Items[i];
	}
	return nil;
}

void SC_PA_SyntaxAppend(SCParamArray* self, Message* m) {
	if ((!(self->Size < 11))) {
		JB_Msg_SyntaxExpect(m, JB_LUB[1215]);
		return;
	}
	s16 i = self->Size++;
	self->Items[i] = m;
}

SCParamArray* SC_PA__Alloc() {
	return ((SCParamArray*)JB_New(SCParamArray));
}

SCParamArray* SC_PA__New(Message* exp, Message* side) {
	SCParamArray* __rz__ = ((SCParamArray*)SC_PA__Alloc());
	if (__rz__) {
		SC_PA_Constructor(__rz__, exp, side);
	}
	return __rz__;
}


void JB_Sel_Constructor(Selector* self, Selector* Next, Selector** Place, JB_String* namee) {
	self->ID = 0;
	self->Name = JB_Incr(namee);
	self->Next = JB_Incr(Next);
	JB_SetRef((*Place), self);
}

void JB_Sel_destructor(Selector* self) {
	JB_Decr(self->Name);
	JB_Decr((Selector*)(self->Next));
}

void JB_Sel_GiveIDs(Selector* self) {
	int ID = 0;
	{
		Selector* curr = self;
		while (curr) {
			curr->ID = ID;
			ID++;
			curr = curr->Next;
		};
	};
}



JB_String* JB_Str_AfterByte(JB_String* self, byte b, int Last) {
	Ind Start = JB_Str_FindByte(self, b, Last, 0);
	return JB_Str_Range(self, Start + 1, Last);
}

JB_String* JB_Str_ArgName(JB_String* self) {
	if (JB_Str_ByteValue(self, 0) == '-') {
		Ind i = JB_Str_FindByte(self, '=', 0, JB_int__max());
		if ((!JB_Ind_SyntaxCast(i))) {
			i = JB_int__max();
		}
		JB_String* S = JB_Incr(JB_Str_Range(self, 0, i));
		JB_SetRef(S, JB_Str_TrimFirst(S, '-'));
		JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(S));
		JB_Decr(S);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	return JB_LUB[0];
}

JB_String* JB_Str_ArgsMatchError(JB_String* self, bool TypeCast) {
	if ((!TypeCast)) {
		return self;
	}
	return JB_Str_OperatorPlus(self, JB_LUB[1216]);
}

JB_String* JB_Str_ArgValue(JB_String* self) {
	if (JB_Str_ByteValue(self, 0) != '-') {
		return self;
	}
	Ind it = JB_Str_FindByte(self, '=', 0, JB_int__max());
	if (JB_Ind_SyntaxCast(it)) {
		return JB_Str_Range(self, it + (1), JB_int__max());
	}
	return JB_LUB[107];
}

uint JB_Str_ASMint(JB_String* self) {
	uint rz = 0;
	rz = JB_Str_int(self);
	if ((!JB_int_OperatorInRange(((int)rz), 32))) {
		debugger;
		return nil;
	}
	return rz;
}

JB_String* JB_Str_ASMNormalise(JB_String* self) {
	int n = 0;
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte c = _Startf0[0];
			c = JB_byte_LowerCase(c);
			if ((c == 'r') or (c == 'n')) {
				n++;
			}
			 else if ((c == 'l') or ((c == 's') or (c == 'j'))) {
				0;
			}
			 else {
				return self;
			}
			_Startf0++;
		};
	}
	;
	return JB_Str_PlusByte(JB_LUB[1217], ('0' + n));
}

JB_String* JB_Str_BackToApp(JB_String* self) {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	JB_String* s = JB_Incr(JB_Str_TrimTrailingSlashes(self));
	JB_String* _tmPf0 = JB_Incr(JB_Str_Name(self));
	JB_String* Final = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1218], _tmPf0));
	JB_Decr(_tmPf0);
	if (JB_Str_OperatorEndsWith(s, Final)) {
		JB_SetRef(rz, JB_Str_Range(s, 0, 4 + (JB_Str_OperatorMinus(s, Final))));
	}
	 else {
		JB_SetRef(rz, self);
	}
	JB_Decr(Final);
	JB_Decr(s);
	JB_SafeDecr(rz);
	return rz;
}

JB_String* JB_Str_Before(JB_String* self, JB_String* s) {
	Ind it = JB_Str_InStr(self, s, 0, JB_int__max(), false);
	if (JB_Ind_SyntaxCast(it)) {
		return JB_Str_Range(self, 0, it);
	}
	return self;
}

JB_String* JB_Str_BeforeLastByte(JB_String* self, byte b, int fudge) {
	int Last = JB_Str_TrimLastSub(self, b);
	Ind Start = JB_Str_FindByte(self, b, Last, 0);
	return JB_Str_Range(self, 0, Start + fudge);
}

Array* JB_Str_ByteSplit(JB_String* self) {
	Array* rz = JB_Incr(((Array*)JB_Array__New0()));
	{
		int _LoopSrcf1 = JB_Str_Length(self);
		int n = 0;
		while (n < _LoopSrcf1) {
			JB_String* _tmPf2 = JB_Incr(JB_Str__SyntaxAccess(JB_Str_ByteValue(self, n)));
			JB_Array_SyntaxAppend(rz, _tmPf2);
			JB_Decr(_tmPf2);
			n++;
		};
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

CharSet* JB_Str_CharSetWithBool(JB_String* self, bool Range) {
	return JB_CS__New(self, Range);
}

JB_String* JB_Str_Child(JB_String* self, JB_String* cname) {
	if ((!JB_Str_Exists(self))) {
		return cname;
	}
	int C = ((int)(JB_Str_Last(self, 0) == '/'));
	C = (C + (JB_Str_ByteValue(cname, 0) == '/'));
	if (C == 1) {
		return JB_Str_OperatorPlus(self, cname);
	}
	if (C == 0) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1113], cname));
		JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(self, _tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(cname, 1, JB_int__max()));
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(self, _tmPf1));
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

Array* JB_Str_Chunk(JB_String* self, int n) {
	Array* rz = JB_Incr(((Array*)JB_Array__New0()));
	int i = 0;
	while (i < JB_Str_Length(self)) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(self, i, i + n));
		JB_Array_SyntaxAppend(rz, _tmPf0);
		JB_Decr(_tmPf0);
		i = (i + n);
	};
	JB_SafeDecr(rz);
	return rz;
}

JB_String* JB_Str_Compress(JB_String* self, CompressionStats* st) {
	FastString* j = JB_Incr(JB_bin__New0());
	JB_Str_CompressIntoSub(self, j, st);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(j));
	JB_Decr(j);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_Str_CompressIntoSub(JB_String* self, FastString* j, CompressionStats* st) {
	if ((!(st))) {
		st = (&JB__MzSt_All);
	}
	JB_MzSt_len(st, j->Length);
	JB_bin_jinit(j);
	JB_bin_enter(j, JB_SyxTmp, JB_LUB[1219]);
	JB_bin_addint(j, JB_Str_Length(self));
	JB_bin_enter(j, JB_SyxArg, JB_LUB[0]);
	{
		Array* _LoopSrcf1 = JB_Incr(JB_Str_Chunk(self, 1048576));
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			JB_String* s = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf1, _if0)));
			int ugh = JB_bin_OpenStream(j);
			JB_Str_CompressChunk(j, s);
			JB_bin_CloseStream(j, ugh);
			JB_MzSt_liveupdate(st, s, j->Length);
			JB_Decr(s);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	JB_bin_up(j, 2);
	JB_Str_CompressChunk(j, nil);
}

JB_String* JB_Str_ContainerName(JB_String* self, JB_String* ext) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_PathDir(ext));
	Ind After = JB_Str_InStr(self, _tmPf0, 0, JB_int__max(), false);
	JB_Decr(_tmPf0);
	if (JB_Ind_SyntaxCast(After)) {
		JB_String* _tmPf1 = JB_Incr(JB_Str_Range(self, 0, After));
		JB_String* _tmPf2 = JB_Incr(JB_Str_Name(_tmPf1));
		JB_Decr(_tmPf1);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	return JB_LUB[0];
}

ErrorInt JB_Str_CopyFileTo(JB_String* self, JB_String* Dest, bool AttrOnly) {
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(self));
	JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(Dest));
	ErrorInt _tmPf2 = JB_File_Copy(_tmPf0, _tmPf1, AttrOnly);
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
	return _tmPf2;
}

int JB_Str_Count(JB_String* self, byte b) {
	int rz = 0;
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte c = _Startf0[0];
			rz = (rz + (c == b));
			_Startf0++;
		};
	}
	;
	return rz;
}

ErrorInt JB_Str_DebugExecute(JB_String* self, Array* Args, FastString* Out, FastString* Errs) {
	if (JB__File_DebugExecute) {
		JB_Str_Print(self);
		JB_Str_Print(JB_LUB[170]);
		JB_String* _tmPf0 = JB_Incr(JB_Array_Render(Args, nil));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return JB_Str_Execute(self, Args, Out, Errs, false);
}

JB_String* JB_Str_Decompress(JB_String* self, CompressionStats* st, int lim) {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	if ((!JB_Str_IsCompressed(self))) {
		JB_Decr(rz);
		return self;
	}
	JB_SetRef(rz, JB_Str__Error());
	FastString* fs = JB_Incr(JB_FS__New());
	Message* _tmPf0 = JB_Incr(JB_Str_parse_jbin(self));
	if (JB_Str_DecompressSub(self, st, lim, _tmPf0, fs)) {
		JB_SetRef(rz, JB_FS_SyntaxCast(fs));
	}
	JB_Decr(_tmPf0);
	JB_Decr(fs);
	JB_SafeDecr(rz);
	return rz;
}

bool JB_Str_DecompressSub(JB_String* self, CompressionStats* st, int lim, Message* j, FastString* fs) {
	if ((!(st))) {
		st = (&JB__MzSt_All);
	}
	Message* L = ((Message*)JB_Ring_First(j));
	Message* arg = ((Message*)JB_Ring_NextSib(L));
	int64 total_size = JB_Msg_Int(L, 0);
	if ((!((JB_Msg_EqualsSyx(L, JB_SyxNum, false)) and (JB_Msg_EqualsSyx(arg, JB_SyxArg, false))))) {
		JB_Object_Fail(self, JB_LUB[1220]);
		return nil;
	}
	if ((!(total_size <= lim))) {
		JB_Object_Fail(self, JB_LUB[1221]);
		return nil;
	}
	JB_MzSt_len(st, JB_Msg_Length(j));
	{
		Message* _LoopSrcf2 = ((Message*)JB_Ring_NextSib(L));
		Message* C = ((Message*)JB_Tree_First_(_LoopSrcf2));
		while (C) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(C));
			if ((!JB_Str_DecompressChunk(fs, C->Name, total_size))) {
				return nil;
			}
			JB_MzSt_liveupdate(st, C->Name, fs->Length);
			C = _Nf1;
		};
		(_LoopSrcf2);
	}
	;
	return true;
}

Dictionary* JB_Str_Dict(JB_String* self, byte sep) {
	Dictionary* rz = JB_Incr(((Dictionary*)nil));
	JB_SetRef(rz, JB_Dict__New());
	if (JB_Str_Exists(self)) {
		{
			StringFields* _LoopSrcf2 = JB_Incr(JB_FI__New(self, sep));
			int _Prevf0 = 0;
			while (_LoopSrcf2->Data != nil) {
				Ind _Curr_f1 = JB_FI_NextSep(_LoopSrcf2, _Prevf0);
				JB_String* l = JB_Incr(JB_FI_Field(_LoopSrcf2, _Prevf0, _Curr_f1));
				(JB_Dict_ValueSet(rz, l, JB_LUB[317]));
				JB_Decr(l);
				_Prevf0 = (_Curr_f1 + 1);
				if ((!JB_Ind_SyntaxCast(_Curr_f1))) {
					break;
				}
			};
			JB_Decr(_LoopSrcf2);
		};
	}
	JB_SafeDecr(rz);
	return rz;
}

JB_String* JB_Str_digest(JB_String* self) {
	if ((!JB_Str_IsJbin(self))) {
		Message* p = JB_Incr(JB_Str_Parse(self, JB_SyxArg, true));
		if (p) {
			JB_String* _tmPf0 = JB_Incr(JB_Msg_render_jbin(p, JB_LUB[0], nil));
			JB_Decr(p);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(p);
	}
	return self;
}

bool JB_Str_EndsWith(JB_String* self, JB_String* s, bool aware) {
	int n = JB_Str_Length(s);
	int L = JB_Str_Length(self);
	{
		IntRange _LoopSrcf0 = JB_int_OperatorTo(1, n);
		while (_LoopSrcf0[0] < _LoopSrcf0[1]) {
			int i = _LoopSrcf0[0];
			byte a = JB_Str_ByteValue(self, L - i);
			byte b = JB_Str_ByteValue(s, n - i);
			if (aware) {
				a = JB_byte_LowerCase(a);
				b = JB_byte_LowerCase(b);
			}
			if ((!(a == b))) {
				return nil;
			}
			_LoopSrcf0[0] = (_LoopSrcf0[0] + 1);
		};
	}
	;
	return true;
}

JB_String* JB_Str_Escape(JB_String* self) {
	return JB_Str_MultiReplaceAll(self, JB__Constants_EscapeStr, JB_StdErr);
}

JB_String* JB_Str_EscapeChr(JB_String* self) {
	return JB_Str_MultiReplaceAll(self, JB__Constants_EscapeChr, JB_StdErr);
}

bool JB_Str_EscapeTest(JB_String* self) {
	JB_String* esc = JB_Incr(JB_Str_Escape(self));
	JB_String* back = JB_Incr(JB_Str_Unescape(esc));
	JB_Decr(esc);
	bool _tmPf0 = JB_Str_Equals(back, self, false);
	JB_Decr(back);
	return ((_tmPf0));
}

JB_File* JB_Str_ExistingFile(JB_String* self, JB_String* operation) {
	JB_File* f = JB_Incr(JB_Str_AsFile(self));
	if (JB_File_MustExist(f, operation)) {
		JB_SafeDecr(f);
		return f;
	}
	JB_Decr(f);
	return nil;
}

JB_String* JB_Str_Ext(JB_String* self) {
	Ind i = JB_Str_FindByte(self, '.', JB_int__max(), 0);
	Ind n = JB_Str_OutByteWithByteIntInt(self, '/', JB_int__max(), 0);
	if ((!(JB_Ind_SyntaxCast(n)))) {
		n = JB_Str_Length(self);
	}
	if (JB_Ind_SyntaxCast(i)) {
		return JB_Str_Range(self, i + 1, n + 1);
	}
	return JB_LUB[0];
}

JB_File* JB_Str_AsFile(JB_String* self) {
	if (JB_Object_Isa(self, JB_AsClass(JB_File))) {
		return ((JB_File*)self);
	}
	return JB_Str_File(self);
}

JB_File* JB_Str_ChildFile(JB_String* self, JB_String* ch) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Child(self, ch));
	JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool JB_Str_FileExists(JB_String* self) {
	JB_File* f = JB_Incr(JB_Str_AsFile(self));
	bool _tmPf0 = JB_File_Exists(f, false);
	JB_Decr(f);
	return _tmPf0;
}

Ind JB_Str_FindByte(JB_String* self, byte find, int Start, int After) {
	return JB_Str_InByte(self, Start, After, find);
}

Ind JB_Str_Find(JB_String* self, CharSet* cs, int Start, int After) {
	return JB_Str_CharSet(self, Start, After, cs, true);
}

int JB_Str_FindTrailingSlashes(JB_String* self) {
	int rz = 0;
	rz = JB_Str_Length(self);
	while (JB_Str_ByteValue(self, rz - 1) == '/') {
		rz--;
	};
	return rz;
}

byte JB_Str_First(JB_String* self) {
	return JB_Str_ByteValue(self, 0);
}

bool JB_Str_HasMoat(JB_String* self) {
	int n = JB_Str_Length(self) - 2;
	if ((!(n > 2))) {
		return nil;
	}
	byte u = '_';
	byte* d = self->Addr;
	return (u == d[0]) and ((u == d[1]) and ((u == d[n]) and (u == d[n + 1])));
}

Ind JB_Str_HiddenJBin(JB_String* self) {
	Ind nl = 0;
	if ((JB_Str_ByteValue(self, 0) == '#') and (JB_Str_ByteValue(self, 1) == '!')) {
		nl = (JB_Str_FindByte(self, '\n', 0, JB_int__max()) + 1);
		if (nl == 0) {
			return -1;
		}
	}
	if (JB_Str_IsJbin(self)) {
		return nl;
	}
	return -1;
}

int64 JB_Str_int(JB_String* self) {
	return JB_Str_TextIntegerValid(self, nil);
}

JB_String* JB_Str_InterfaceToBehaviour(JB_String* self) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Range(self, 2, JB_Str_Length(self) - 2));
	JB_String* _tmPf1 = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Ind JB_Str_InWhite(JB_String* self, int Start, int After) {
	return JB_Str_WhiteSpace(self, Start, After, true);
}

JB_String* JB_Str_ipcName(JB_String* self) {
	JB_String* n = JB_Incr(JB_Str_Name(self));
	Ind s = JB_Str_Find(n, JB__Constants_CSWordStart, 0, JB_int__max());
	Ind s2 = JB_Str_Find(n, JB__Constants_CSWordStart, JB_int__max(), 0);
	JB_String* _tmPf0 = JB_Incr(JB_Str_Range(n, s, s2 + 1));
	JB_Decr(n);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Str_ipcPath(JB_String* self) {
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[1222]);
	JB_FS_AppendInt32(_fsf0, JB_App__ID());
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(self, 0, 8));
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendInt32(_fsf0, JB__Proc_IncID++);
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

bool JB_Str_isCLike(JB_String* self) {
	return ((JB_Str_Equals(self, JB_LUB[191], true)) or ((JB_Str_Equals(self, JB_LUB[192], true)) or (JB_Str_Equals(self, JB_LUB[193], true))));
}

bool JB_Str_IsCompressed(JB_String* self) {
	return JB_Str_IsJbin(self) and JB_Str_MidEquals(self, 2, JB_LUB[1223], false);
}

int JB_Str_IsHexLike(JB_String* self, int N) {
	if (JB_Str_ByteValue(self, N + 0) == '0') {
		byte X = JB_Str_ByteValue(self, N + 1);
		if (JB_byte_IsLetter(X)) {
			return 2;
		}
	}
	return 0;
}

bool JB_Str_IsInt(JB_String* self) {
	return JB_Str_IsIntFrom(self, 0);
}

bool JB_Str_IsIntFrom(JB_String* self, int i) {
	if ((!JB_Str_Exists(self))) {
		return nil;
	}
	while (i < JB_Str_Length(self)) {
		if ((!JB_byte_IsInt(JB_Str_ByteValue(self, i++)))) {
			return nil;
		}
	};
	return true;
}

bool JB_Str_IsJbin(JB_String* self) {
	return JB_Str_OperatorStarts(self, JB__JbinHeader);
}

bool JB_Str_IsOKForImport(JB_String* self) {
	JB_String* X = JB_Incr(self);
	if (JB_Str_OperatorStarts(self, JB_LUB[1224])) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(self, (6), JB_int__max()));
		JB_Decr(X);
		bool _tmPf1 = JB_Str_IsOKForImport(_tmPf0);
		JB_Decr(_tmPf0);
		return _tmPf1;
	}
	while (JB_Str_ByteValue(X, 0) == '/') {
		JB_SetRef(X, JB_Str_Range(X, (1), JB_int__max()));
	};
	if ((!JB_Str_Exists(X)) or JB_CS_HasChar(JB__Constants_CSWordStart, JB_Str_ByteValue(X, 0))) {
		JB_Decr(X);
		return true;
	}
	if ((!false)) {
		JB_Object_Fail(X, JB_LUB[1225]);
	}
	JB_Decr(X);
	return false;
}

bool JB_Str_IsSpeedieSrc(JB_String* self) {
	return (JB_Str_OperatorIsa(self, JB_LUB[561]));
}

bool JB_Str_IsStatementName(JB_String* self) {
	return (JB_CS_OperatorContains(JB__Constants_CSWordMiddle, self)) and ((!JB_byte_IsInt(JB_Str_ByteValue(self, 0))));
}

int JB_Str_IsSwizzle(JB_String* self, int Width) {
	int N = JB_Str_Length(self);
	int Total = 0;
	int i = 0;
	int shift = 0;
	int c = 0;
	int dold = 0;
	if ((!(N <= 8))) {
		return nil;
	}
	bool HasLetter = false;
	while (i < N) {
		byte d = JB_byte_LowerCase(JB_Str_ByteValue(self, i++));
		if (d != '_') {
			HasLetter = true;
			if ((!(((!c)) or (((d >= 'w') == (dold >= 'w')) or (dold == '_'))))) {
				return nil;
			}
		}
		c = d;
		dold = d;
		if ((c == 'r') or (c == 'x')) {
			c = 0;
		}
		 else if ((c == 'g') or (c == 'y')) {
			c = 1;
		}
		 else if ((c == 'b') or (c == 'z')) {
			c = 2;
		}
		 else if ((c == 'a') or (c == 'w')) {
			c = 3;
		}
		 else if (c == '_') {
			c = 4;
		}
		if (i < N) {
			int c2 = JB_byte_LowerCase(JB_Str_ByteValue(self, i));
			if (c2 == '1') {
				i++;
			}
			 else if (c2 == '2') {
				i++;
				if ((!(Width != 3))) {
					return nil;
				}
				c = (c + (Width >> 1));
			}
		}
		if ((!((c <= 4) and (c >= 0)))) {
			return nil;
		}
		Total = (Total | (c << (shift++ * 3)));
	};
	if (HasLetter) {
		return Total | (shift << 16);
	}
	return 0;
}

bool JB_Str_IsZero(JB_String* self) {
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte c = _Startf0[0];
			if ((!((c == '.') or (c == '0')))) {
				return nil;
			}
			_Startf0++;
		};
	}
	;
	return true;
}

Ind JB_Str_JBFind(JB_String* self, byte find, int Off, int After) {
	After = JB_int_OperatorMin(After, JB_Str_Length(self));
	while (Off < After) {
		byte c = JB_Str_ByteValue(self, Off++);
		if (c == '\\') {
			Off++;
		}
		 else if (c == find) {
			if (find == '$') {
				if (Off >= After) {
					break;
				}
				byte nxt = JB_Str_ByteValue(self, Off);
				if ((!(((nxt == '{') or (nxt == '.')) or JB_CS_HasChar(JB__Constants_CSWordStart, nxt)))) {
					continue;
				}
			}
			return Off - 1;
		}
	};
	return -1;
}

byte JB_Str_Last(JB_String* self, int minus) {
	return JB_Str_ByteValue(self, JB_Str_Length(self) - (1 + minus));
}

int JB_Str_LineCount(JB_String* self) {
	if ((!JB_Str_Exists(self))) {
		return 1;
	}
	return JB_Str_Count(self, '\n') + 1;
}

Macro* JB_Str_macro(JB_String* self) {
	return JB_Macro__NewStr(self);
}

JB_File* JB_Str_MakeAndGoInto(JB_String* self) {
	JB_File* rz = nil;
	JB_SetRef(rz, JB_Str_AsFile(self));
	JB_Str_MakeEntirePath(rz, true);
	(JB_App__CWDSet(self));
	JB_SafeDecr(rz);
	return rz;
}

ErrorInt JB_Str_MakeEntirePath(JB_String* self, bool Last) {
	ErrorInt rz = 0;
	//visible;
	JB_String* p = JB_Incr(self);
	if ((!Last)) {
		JB_SetRef(p, JB_Str_Parent(self));
	}
	{
		JB_String* _tmPf4 = JB_Incr(JB_File_PathFix_(p));
		JB_String* _Pf0 = JB_Incr(JB_Str_TrimTrailingSlashes(_tmPf4));
		JB_Decr(_tmPf4);
		int _if1 = 1;
		int _Nf2 = JB_Str_Length(_Pf0);
		while (_if1 <= _Nf2) {
			if ((_if1 < _Nf2) and (JB_Str_ByteValue(_Pf0, _if1) != '/')) {
				_if1++;
				continue;
			}
			JB_String* S = JB_Incr(JB_Str_Range(_Pf0, 0, _if1));
			int err = ((int)JB_Str_MakeDir(S));
			JB_Decr(S);
			if (err) {
				rz = err;
				break;
			}
			_if1++;
		};
		JB_Decr(_Pf0);
	}
	;
	JB_Decr(p);
	return rz;
}

JB_String* JB_Str_Name(JB_String* self) {
	int Last = JB_Str_TrimLastSub(self, '/');
	return JB_Str_AfterByte(self, '/', Last);
}

JB_String* JB_Str_Normalise(JB_String* self) {
	JB_String* _tmPf1 = JB_Incr(JB_File_PathFix_(self));
	JB_String* _tmPf0 = JB_Incr(JB_Str_TrimTrailingSlashes(_tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

bool JB_Str_ContainsString(JB_String* self, JB_String* s) {
	return JB_Ind_SyntaxCast(JB_Str_InStr(self, s, 0, JB_int__max(), true));
}

bool JB_Str_ContainsByte(JB_String* self, byte b) {
	return JB_Ind_SyntaxCast(JB_Str_FindByte(self, b, 0, JB_int__max()));
}

Array* JB_Str_OperatorDivide(JB_String* self, byte sep) {
	return JB_Str_Split(self, sep);
}

bool JB_Str_OperatorEndsWith(JB_String* self, JB_String* s) {
	return JB_Str_EndsWith(self, s, true);
}

bool JB_Str_OperatorIsa(JB_String* self, JB_String* s) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Ext(self));
	bool _tmPf1 = JB_Str_Equals(_tmPf0, s, true);
	JB_Decr(_tmPf0);
	return (_tmPf1);
}

int JB_Str_OperatorMinus(JB_String* self, JB_String* s) {
	return JB_Str_Length(self) - JB_Str_Length(s);
}

bool JB_Str_OperatorPathMatch(JB_String* self, JB_String* path) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Normalise(self));
	JB_String* _tmPf1 = JB_Incr(JB_Str_Normalise(path));
	bool _tmPf2 = JB_Str_Equals(_tmPf0, _tmPf1, false);
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
	return (_tmPf2);
}

JB_String* JB_Str_PlusByte(JB_String* self, byte B) {
	return JB_Str_OperatorPlus(self, JB_Str__SyntaxAccess(B));
}

bool JB_Str_OperatorStarts(JB_String* self, JB_String* s) {
	return JB_Str_MidEquals(self, 0, s, true);
}

bool JB_Str_optionbool(JB_String* self) {
	return ((JB_Str_Equals(self, JB_LUB[0], true)) or ((JB_Str_Equals(self, JB_LUB[107], true)) or (JB_Str_Equals(self, JB_LUB[1226], true))));
}

int JB_Str_optionint(JB_String* self) {
	if (JB_Str_optionbool(self)) {
		return 1;
	}
	return JB_Str_int(self);
}

Ind JB_Str_OutByteWithByteIntInt(JB_String* self, byte find, int Start, int After) {
	return JB_Str_OutByte(self, Start, After, find);
}

Ind JB_Str_OutCharSet(JB_String* self, CharSet* cs, int Start, int After) {
	return JB_Str_CharSet(self, Start, After, cs, false);
}

Ind JB_Str_OutWhite(JB_String* self, int Start, int After) {
	return JB_Str_WhiteSpace(self, Start, After, false);
}

JB_String* JB_Str_Parent(JB_String* self) {
	if ((!JB_Str_Equals(self, JB_LUB[1113], false))) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_TrimTrailingSlashes(self));
		JB_String* _tmPf1 = JB_Incr(JB_Str_BeforeLastByte(_tmPf0, '/', 1));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return JB_LUB[0];
}

Message* JB_Str_Parse(JB_String* self, Syntax owner, bool AllowDecomp) {
	JB_String* data = JB_Incr(((JB_String*)JB_Ternary(AllowDecomp and JB_Str_IsCompressed(self), ((JB_String*)JB_Str_Decompress(self, nil, 268435456)), ((JB_String*)self))));
	Ind j = JB_Str_HiddenJBin(data);
	if (JB_Ind_SyntaxCast(j)) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(data, j, JB_int__max()));
		JB_Decr(data);
		Message* _tmPf1 = JB_Incr(JB_Str_parse_jbin(_tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	if ((!JB_Tk__CppInited())) {
		JB_Tk__Init();
	}
	JB_Tk__StartParse(data);
	JB_Decr(data);
	JB__Tk_StopBars = 0;
	int Count = JB_StdErr->ErrorCount;
	int Flags = kJB__Tk_Temporal;
	Message* into = JB_Incr(JB_Msg__NewRange(nil, owner, 0, JB_LUB[0], 0));
	bool lines = JB_Tk__ParseLoopFlags(into, JB_LUB[0], Flags);
	if ((!lines) and JB_Ring_HasChildCount(into, 1)) {
		JB_SetRef(into, ((Message*)JB_Ring_First(into)));
	}
	JB_Tk__CleanSpaces();
	if (JB_Tk__Running()) {
		JB_Tk__Expect(0);
	}
	JB_Tk__StopParse();
	if (Count != JB_StdErr->ErrorCount) {
		JB_SetRef(into, nil);
	}
	JB_SafeDecr(into);
	return ((Message*)into);
}

Message* JB_Str_parse_jbin(JB_String* self) {
	StringStream* _tmPf0 = JB_Incr(JB_Str_reader(self, JB_LUB[0]));
	Message* _tmPf1 = JB_Incr(JB_ss_Parse_Jbin(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Str_ParseClean(JB_String* self) {
	Message* rz = nil;
	SC__Comp_stTotalSourceSize = (SC__Comp_stTotalSourceSize + JB_Str_Length(self));
	Date P1 = JB_Date__Now();
	JB_SetRef(rz, JB_Str_Parse(self, JB_SyxArg, true));
	if ((!rz)) {
		JB_Decr(rz);
		return nil;
	}
	SC__Comp_stParseTime = (SC__Comp_stParseTime + ((int)(JB_Date__Now() - P1)));
	JB_Msg_Clean(rz, true);
	JB_Msg_PrepareAST(rz);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Str_ParseCleanWipe(JB_String* self) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Str_ParseClean(self));
	if (rz) {
		JB_Msg_WipePositions(rz);
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Str_ParseWithError(JB_String* self, JB_Error** rec) {
	Message* rz = ((Message*)nil);
	//visible;
	JB_ErrorReceiver* old = JB_StdErr;
	JB_StdErr = ({
		JB_ErrorReceiver* _X = JB__Constants_ParseProtector;
		if ((!_X)) {
			_X = JB_Rec__New();
			JB_SetRef(JB__Constants_ParseProtector, _X);
		}
		 _X;
	});
	JB_Rec_Clear(JB_StdErr);
	rz = JB_Str_Parse(self, JB_SyxArg, true);
	JB_SetRef((*rec), JB_Rec_Pop(JB_StdErr));
	JB_StdErr = old;
	return rz;
}

JB_String* JB_Str_PathDir(JB_String* self) {
	if (JB_Str_Exists(self) and (JB_Str_Last(self, 0) != '/')) {
		return JB_Str_OperatorPlus(self, JB_LUB[1113]);
	}
	return self;
}

JB_String* JB_Str_Preview(JB_String* self, int N) {
	//visible;
	if (JB_Str_Length(self) <= N) {
		return self;
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(self, 0, N));
	JB_String* _tmPf0 = JB_Incr(JB_Str_UnicodeSync(_tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, JB_LUB[526]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void JB_Str_PrintColor(JB_String* self, JB_String* color) {
	if (JB__ErrorColors_Enabled) {
		JB_Str_Print(color);
	}
	JB_Str_Print(self);
	if (JB__ErrorColors_Enabled) {
		JB_Str_Print(kJB__ErrorColors_normal);
	}
}

void JB_Str_PrintlineColor(JB_String* self, JB_String* color) {
	if (JB__ErrorColors_Enabled) {
		JB_Str_Print(color);
	}
	JB_PrintLine(self);
	if (JB__ErrorColors_Enabled) {
		JB_Str_Print(kJB__ErrorColors_normal);
	}
}

StringStream* JB_Str_reader(JB_String* self, JB_String* T) {
	StringStream* _tmPf0 = JB_Incr(JB_ss__New(self));
	StringStream* _tmPf1 = JB_Incr(JB_ss_test(_tmPf0, 0, T));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Str_ReadFile(JB_String* self, int lim, bool AllowMissing) {
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(self));
	JB_String* _tmPf1 = JB_Incr(JB_File_ReadAll(_tmPf0, lim, AllowMissing));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Str_ReplacePathComponent(JB_String* self, int num, JB_String* With) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_TrimTrailingSlashes(self));
	Array* R = JB_Incr(JB_Str_Split(_tmPf0, '/'));
	JB_Decr(_tmPf0);
	if (num < 0) {
		num = (num + JB_Array_Size(R));
	}
	(JB_Array_ValueSet(R, num, With));
	JB_String* _tmPf1 = JB_Incr(JB_Join2(R, JB_LUB[1113]));
	JB_Decr(R);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void JB_Str_safe(JB_String* self, FastString* fs) {
	if (JB_Str_IsASCII(self)) {
		JB_FS_AppendString(fs, self);
		return;
	}
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte s = _Startf0[0];
			if (JB_byte_IsUpper(s) or (JB_byte_IsLower(s) or (JB_byte_IsInt(s) or (s == '_')))) {
				JB_FS_AppendByte(fs, s);
			}
			 else {
				JB_FS_AppendByte(fs, 'x');
				JB_FS_AppendHex(fs, s, 2);
			}
			_Startf0++;
		};
	};
}

JB_String* JB_Str_ScriptLocation(JB_String* self, JB_String* container) {
	JB_Incr(container);
	JB_String* full = JB_Incr(JB_Str_ResolvePath(self, false));
	if ((!JB_Str_Exists(full))) {
		JB_SetRef(full, self);
	}
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(JB_int64_abs(((int64)JB_Str_CRC(full, 0))), nil));
	JB_SetRef(container, JB_Str_SyntaxAccess(container, _tmPf0));
	JB_Decr(_tmPf0);
	JB_Str_MakeEntirePath(container, true);
	JB_String* _tmPf1 = JB_Incr(JB_Str_SpdScriptName(full));
	JB_Decr(full);
	JB_String* _tmPf2 = JB_Incr(JB_Str_SyntaxAccess(container, _tmPf1));
	JB_Decr(_tmPf1);
	JB_Decr(container);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_String* JB_Str_Sibling(JB_String* self, JB_String* name) {
	return JB_Str_ReplacePathComponent(self, -1, name);
}

ErrorInt JB_Str_SilentExecute(JB_String* self, Array* Args, FastString* Out, FastString* Errs) {
	return JB_Str_Execute(self, Args, Out, Errs, false);
}

JB_String* JB_Str_SpdScriptName(JB_String* self) {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	JB_SetRef(rz, JB_Str_ContainerName(self, JB_LUB[18]));
	if ((!(JB_Str_Exists(rz)))) {
		JB_SetRef(rz, JB_Str_ContainerName(self, JB_LUB[1227]));
	}
	if ((!(JB_Str_Exists(rz)))) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Name(self));
		JB_SetRef(rz, JB_Str_TrimExtAndPath(_tmPf0, true));
		JB_Decr(_tmPf0);
	}
	JB_SafeDecr(rz);
	return rz;
}

Array* JB_Str_Split(JB_String* self, byte sep) {
	Array* rz = JB_Incr(((Array*)JB_Array__New0()));
	{
		StringFields* _LoopSrcf2 = JB_Incr(JB_FI__New(self, sep));
		int _Prevf0 = 0;
		while (_LoopSrcf2->Data != nil) {
			Ind _Curr_f1 = JB_FI_NextSep(_LoopSrcf2, _Prevf0);
			JB_String* field = JB_Incr(JB_FI_Field(_LoopSrcf2, _Prevf0, _Curr_f1));
			JB_Array_SyntaxAppend(rz, field);
			JB_Decr(field);
			_Prevf0 = (_Curr_f1 + 1);
			if ((!JB_Ind_SyntaxCast(_Curr_f1))) {
				break;
			}
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

JB_String* JB_Str_Squeeze(JB_String* self) {
	//visible;
	FastString* fs = JB_Incr(JB_FS__New());
	bool broken = false;
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte c = _Startf0[0];
			if (JB_byte_IsWhite(c)) {
				broken = ((bool)fs->Length);
			}
			 else {
				if (broken) {
					JB_FS_AppendByte(fs, ' ');
				}
				JB_FS_AppendByte(fs, c);
				broken = false;
			}
			_Startf0++;
		};
	}
	;
	JB_String* _tmPf3 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

JB_String* JB_Str_SyntaxAccess(JB_String* self, JB_String* s) {
	return JB_Str_Child(self, s);
}

bool JB_Str_SyntaxAppend(JB_String* self, JB_String* s) {
	return JB_Str_WriteSet(self, s);
}

int JB_Str_CompareStr(JB_String* self, JB_String* Other, bool Aware) {
	return JB_Str_Compare(self, Other, Aware);
}

int JB_Str_CompareInt(JB_String* self, int Other, bool Aware) {
	return JB_Str_Length(self) - Other;
}

bool JB_Str_EqualsInt(JB_String* self, int Other, bool Aware) {
	return JB_Str_Length(self) == Other;
}

void JB_Str_SyntaxExpect(JB_String* self) {
	//visible;
	JB_Rec_NewErrorWithNode(JB_StdErr, nil, self, nil);
}

JB_String* JB_Str_TitleCase(JB_String* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendByte(fs, JB_byte_UpperCase(JB_Str_ByteValue(self, 0)));
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(self, 1, JB_int__max()));
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(_tmPf1));
	JB_Decr(_tmPf1);
	JB_FS_AppendString(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_String* _tmPf2 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_String* JB_Str_TrimExtAndPath(JB_String* self, bool KeepPath) {
	int N = JB_Str_FindTrailingSlashes(self);
	Ind slash = JB_Str_FindByte(self, '/', N - 1, 0) + 1;
	Ind dot = JB_Str_FindByte(self, '.', N - 1, slash);
	if ((!(JB_Ind_SyntaxCast(dot)))) {
		dot = N;
	}
	if ((!KeepPath)) {
		slash = 0;
	}
	return JB_Str_Range(self, slash, dot);
}

JB_String* JB_Str_TrimFirst(JB_String* self, byte b) {
	Ind s = JB_Str_OutByteWithByteIntInt(self, b, 0, JB_int__max());
	return JB_Str_Range(self, (s), JB_int__max());
}

int JB_Str_TrimLastSub(JB_String* self, byte b) {
	int N = JB_Str_Length(self);
	while (JB_Str_ByteValue(self, N - 1) == b) {
		N--;
	};
	return N;
}

JB_String* JB_Str_TrimStart(JB_String* self, JB_String* s) {
	if (JB_Str_OperatorStarts(self, s)) {
		return JB_Str_Range(self, (JB_Str_Length(s)), JB_int__max());
	}
	return self;
}

JB_String* JB_Str_TrimTrailingSlashes(JB_String* self) {
	return JB_Str_Range(self, 0, JB_Str_FindTrailingSlashes(self));
}

bool JB_Str_UnderScoreAtAnyEnd(JB_String* self) {
	return (JB_Str_ByteValue(self, 0) == '_') or (JB_Str_ByteValue(self, -1) == '_');
}

JB_String* JB_Str_Unescape(JB_String* self) {
	return JB_Str_MultiReplaceAll(self, JB__Constants_UnEscapeStr, JB_StdErr);
}

JB_String* JB_Str_unicodesafename(JB_String* self) {
	if (JB_Str_IsASCII(self)) {
		return self;
	}
	FastString* fs = JB_Incr(JB_FS__New());
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte s = _Startf0[0];
			if (JB_CS_HasChar(JB_C_Letters, s)) {
				JB_FS_AppendByte(fs, s);
			}
			 else {
				JB_FS_AppendByte(fs, 'x');
				JB_FS_AppendHex(fs, s, 2);
			}
			_Startf0++;
		};
	}
	;
	JB_String* _tmPf3 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

CharSet* JB_Str_UniCS(JB_String* self) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(self, JB_LUB[1228]));
	CharSet* _tmPf1 = JB_Incr(JB_Str_CharSetWithBool((_tmPf0), true));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Str_UpperFirst(JB_String* self) {
	if (JB_byte_IsUpper(JB_Str_ByteValue(self, 0))) {
		return self;
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(self, 0, 1));
	JB_String* _tmPf0 = JB_Incr(JB_Str_UpperCase(_tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(JB_Str_Range(self, (1), JB_int__max()));
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf2));
	JB_Decr(_tmPf2);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

Array* JB_Str_Words(JB_String* self) {
	return JB_Str_Split(self, ' ');
}

bool JB_Str_WriteSet(JB_String* self, JB_String* Value) {
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(self));
	bool _tmPf1 = JB_File_DataSet(_tmPf0, Value);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool JB_Str_Yes(JB_String* self) {
	if (JB_Str_ByteValue(self, 0) == '0') {
		return false;
	}
	if ((JB_Str_Equals(self, JB_LUB[1229], true)) or ((JB_Str_Equals(self, JB_LUB[108], true)) or (JB_Str_Equals(self, JB_LUB[1230], true)))) {
		return false;
	}
	return JB_Str_Exists(self);
}

JB_String* JB_Str__NewCopy(byte* addr, int n) {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	JB_SetRef(rz, JB_Str_New(n));
	if (JB_Str_Exists(rz)) {
		memcpy(rz->Addr, addr, n);
	}
	JB_SafeDecr(rz);
	return rz;
}

JB_String* JB_Str__FromC(_cstring Addr) {
	return JB_StrC(Addr);
}

JB_String* JB_Str__Hex(int64 i) {
	FastString* fs = JB_Incr(JB_FS__New());
	JB_FS_AppendHex(fs, i, 2);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Str__SyntaxAccess(int b) {
	return JB_Str__Byte(b);
}



void JB_FI_Constructor(StringFields* self, JB_String* Source, byte Sep) {
	self->Data = JB_Incr(Source);
	self->Sep = Sep;
}

void JB_FI_destructor(StringFields* self) {
	JB_Decr(self->Data);
}

JB_String* JB_FI_Field(StringFields* self, Ind Prev, Ind Curr) {
	if ((!(JB_Ind_SyntaxCast(Curr)))) {
		Curr = JB_Str_Length(self->Data);
	}
	return JB_Str_Range(self->Data, Prev, Curr);
}

Ind JB_FI_NextSep(StringFields* self, int Prev) {
	return JB_Str_FindByte(self->Data, self->Sep, Prev, JB_int__max());
}

StringFields* JB_FI__Alloc() {
	return ((StringFields*)JB_New(StringFields));
}

StringFields* JB_FI__New(JB_String* Source, byte Sep) {
	StringFields* __rz__ = ((StringFields*)JB_FI__Alloc());
	if (__rz__) {
		JB_FI_Constructor(__rz__, Source, Sep);
	}
	return __rz__;
}



byte JB_ss_Byte(StringStream* self) {
	JB_ss_Need(self, 1);
	return JB_Str_ByteValue(self->Data, self->Position++);
}

void JB_ss_Constructor(StringStream* self, JB_String* d) {
	JB_Incr(d);
	JB_String* _tmPf0 = JB_LUB[0];
	self->FilePath = JB_Incr(_tmPf0);
	self->Position = 0;
	self->ChunkSize = 0;
	if ((!(JB_Str_Exists(d)))) {
		JB_SetRef(d, JB_LUB[0]);
	}
	self->Data = JB_Incr(d);
	self->Length = JB_Str_Length(d);
	JB_Decr(d);
}

void JB_ss_destructor(StringStream* self) {
	JB_Decr(self->Data);
	JB_Decr(self->FilePath);
}

int64 JB_ss_lint0(StringStream* self, int n) {
	int64 rz = 0;
	{
		int _LoopSrcf1 = n + 1;
		int i = 0;
		while (i < _LoopSrcf1) {
			rz = (rz | (JB_ss_Byte(self) << (i << 3)));
			i++;
		};
	}
	;
	return rz;
}

void JB_ss_Need(StringStream* self, int n) {
}

Message* JB_ss_parse_(StringStream* self) {
	Message* rz = JB_Incr(((Message*)nil));
	StringStream* _tmPf1 = JB_Incr(JB_ss_test(self, 0, JB__JbinHeader));
	if ((!JB_ss_SyntaxCast(_tmPf1))) {
		JB_Decr(rz);
		JB_Decr(_tmPf1);
		return nil;
	}
	JB_Decr(_tmPf1);
	Message* Curr = nil;
	while (JB_ss_SyntaxCast(self)) {
		uint info = JB_ss_Byte(self);
		uint L = info & 63;
		uint Dir = info >> 6;
		if (Dir == 3) {
			Message* _tmPf0 = JB_Incr(((Message*)JB_Tree_Upward(Curr, L)));
			if ((!_tmPf0)) {
				JB_Decr(_tmPf0);
				break;
			}
			JB_SetRef(Curr, _tmPf0);
			JB_Decr(_tmPf0);
		}
		 else {
			if (L >= 60) {
				L = JB_ss_lint0(self, L - 60);
			}
			byte type = JB_ss_Byte(self);
			JB_String* _tmPf2 = JB_Incr(JB_ss_Str(self, L, 0));
			Message* msg = JB_Incr(JB_Msg_Msg(Curr, ((Syntax)type), _tmPf2));
			JB_Decr(_tmPf2);
			if (msg->Func > JB_SyxBin) {
				if ((!false)) {
					JB_Msg_SyntaxExpect(msg, JB_LUB[1231]);
				}
				msg->Func = JB_SyxTmp;
			}
			if ((!(rz))) {
				JB_SetRef(rz, msg);
			}
			if ((!Curr) or (Dir == 1)) {
				JB_SetRef(Curr, msg);
			}
			JB_Decr(msg);
		}
	};
	JB_Decr(Curr);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_ss_Parse_Jbin(StringStream* self) {
	Message* _tmPf0 = JB_Incr(JB_ss_parse_(self));
	if ((!_tmPf0)) {
		JB_ss_SyntaxExpect(self, JB_LUB[1232]);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_ss_Str(StringStream* self, int n, int skip) {
	JB_ss_Need(self, n);
	int p = self->Position;
	int p2 = p + n;
	self->Position = p2;
	return JB_Str_Range(self->Data, p + skip, p2);
}

void JB_ss_SyntaxExpect(StringStream* self, JB_String* Error) {
	JB_DoAt(1);
	if (JB_Str_Exists(self->FilePath)) {
		JB_Rec_NewErrorWithNode(JB_StdErr, nil, JB_LUB[1233], self->FilePath);
	}
	 else {
		JB_Rec_NewErrorWithNode(JB_StdErr, nil, JB_LUB[1234], JB_LUB[0]);
	}
}

StringStream* JB_ss_test(StringStream* self, int a, JB_String* b) {
	if ((!JB_Str_Exists(b)) or (({
		JB_String* _tmP217 = JB_Incr(JB_ss_Str(self, JB_Str_Length(b), 0));
		bool _tmP216 = JB_Str_Equals(_tmP217, b, false);
		JB_Decr(_tmP217);
		 _tmP216;
	}))) {
		return self;
	}
	return nil;
}

StringStream* JB_ss__Alloc() {
	return ((StringStream*)JB_New(StringStream));
}

StringStream* JB_ss__New(JB_String* d) {
	StringStream* __rz__ = ((StringStream*)JB_ss__Alloc());
	if (__rz__) {
		JB_ss_Constructor(__rz__, d);
	}
	return __rz__;
}


void JB_Fn_Constructor(SyntaxObj* self, fpMsgRender msg, JB_String* name, int ID) {
	JB_String* _tmPf0 = JB_LUB[0];
	self->LongName = JB_Incr(_tmPf0);
	self->RenderAddr = msg;
	self->Name = JB_Incr(name);
	self->ID = ((Syntax)ID);
	self->ExportAddr = JB_Msg_Dummy;
}

void JB_Fn_destructor(SyntaxObj* self) {
	JB_Decr(self->Name);
	JB_Decr(self->LongName);
}

JB_String* JB_Fn_Render(SyntaxObj* self, FastString* fs_in) {
	if ((!(fs_in))) {
		return JB_Str_LowerCase(self->LongName);
	}
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(self->LongName));
	JB_FS_AppendString(fs_in, _tmPf0);
	JB_Decr(_tmPf0);
	return JB_LUB[0];
}

SyntaxObj* JB_Fn__Alloc() {
	return ((SyntaxObj*)JB_New(SyntaxObj));
}

SyntaxObj* JB_Fn__New(fpMsgRender msg, JB_String* name, int ID) {
	SyntaxObj* __rz__ = ((SyntaxObj*)JB_Fn__Alloc());
	if (__rz__) {
		JB_Fn_Constructor(__rz__, msg, name, ID);
	}
	return __rz__;
}



void SC_xC2xB5Form_AddRemainder(xC2xB5Form* self, uint U) {
	SC_xC2xB5Form_SyntaxAppend(self, kSC__ASM_Num | (kSC__ASM_Remainder | U));
}

void SC_xC2xB5Form_ConstructorWithStr(xC2xB5Form* self, JB_String* data) {
	self->Count = 0;
	self->Varies = false;
	self->Name = JB_Incr(data);
	{
		byte* _Startf0 = JB_Str_Address(data);
		byte* _Endf1 = _Startf0 + JB_Str_Length(data);
		while (_Startf0 < _Endf1) {
			byte param = _Startf0[0];
			SC_xC2xB5Form_LoadParam(self, JB_Str__SyntaxAccess(param), nil);
			_Startf0++;
		};
	}
	;
	SC_xC2xB5Form_Finish(self);
	self->Index = (++SC__xC2xB5Form_Count);
}

void SC_xC2xB5Form_ConstructorWithMsg(xC2xB5Form* self, Message* tmp) {
	self->Count = 0;
	self->Varies = false;
	JB_String* _tmPf3 = tmp->Name;
	self->Name = JB_Incr(_tmPf3);
	{
		Message* _LoopSrcf2 = JB_Msg_Last(tmp, JB_SyxArg);
		Message* line = ((Message*)JB_Tree_First_(_LoopSrcf2));
		while (line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(line));
			Message* f = JB_Msg_NeedSyx(line, JB_SyxNil);
			SC_xC2xB5Form_LoadParam(self, JB_Msg_Nyme(f), f);
			line = _Nf1;
		};
		(_LoopSrcf2);
	}
	;
	SC_xC2xB5Form_Finish(self);
	self->Index = (++SC__xC2xB5Form_Count);
}

void SC_xC2xB5Form_destructor(xC2xB5Form* self) {
	JB_Decr(self->Name);
}

void SC_xC2xB5Form_Finish(xC2xB5Form* self) {
	int total = 0;
	{
		int _if0 = 0;
		while (_if0 < self->Count) {
			int i = _if0;
			ASMParam s = SC_xC2xB5Form_AccessInt(self, _if0);
			if (((bool)(s & kSC__ASM_Remainder))) {
				s = (s | (25 - total));
			}
			(SC_xC2xB5Form_SyntaxAccessSet(self, i, s | (total << 11)));
			total = (total + SC_xC2xB5Param_BitSize(s));
			_if0++;
		};
	};
}

void SC_xC2xB5Form_LoadParam(xC2xB5Form* self, JB_String* pl, Message* place) {
	if (JB_Str_IsInt(pl)) {
		SC_xC2xB5Form_SyntaxAppend(self, JB_Str_ASMint(pl) | kSC__ASM_Num);
		return;
	}
	if ((!(JB_Str_EqualsInt(pl, 1, false)))) {
		JB_Object_SyntaxExpect(self);
		return;
	}
	byte p = JB_Str_ByteValue(pl, 0);
	if (p == 'r') {
		SC_xC2xB5Form_SyntaxAppend(self, 5);
	}
	 else if (p == 'n') {
		SC_xC2xB5Form_SyntaxAppend(self, 5 | kSC__ASM_Num);
	}
	 else if (p == 'l') {
		SC_xC2xB5Form_AddRemainder(self, 0);
	}
	 else if (p == 'L') {
		SC_xC2xB5Form_AddRemainder(self, kSC__ASM_NoExpect);
	}
	 else if (p == 's') {
		SC_xC2xB5Form_AddRemainder(self, kSC__ASM_Signed);
	}
	 else if (p == 'S') {
		SC_xC2xB5Form_AddRemainder(self, kSC__ASM_Signed + kSC__ASM_NoExpect);
	}
	 else if (p == 'j') {
		SC_xC2xB5Form_AddRemainder(self, kSC__ASM_Signed + kSC__ASM_Jump);
	}
	 else if ((bool)place) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(place, nil);
		}
	}
	 else {
		if ((!false)) {
			JB_Object_SyntaxExpect(self);
		}
	}
}

ASMParam SC_xC2xB5Form_AccessInt(xC2xB5Form* self, int i) {
	return self->Params[i];
}

void SC_xC2xB5Form_SyntaxAccessSet(xC2xB5Form* self, int i, ASMParam Value) {
	self->Params[i] = Value;
}

void SC_xC2xB5Form_SyntaxAppend(xC2xB5Form* self, ASMParam P) {
	int i = self->Count++;
	if (i < 8) {
		self->Params[i] = P;
	}
}

xC2xB5Form* SC_xC2xB5Form__Alloc() {
	return ((xC2xB5Form*)JB_New(xC2xB5Form));
}

int SC_xC2xB5Form__Init_() {
	{
		JB_SetRef(SC__xC2xB5Form_Forms, JB_Dict__New());
		SC__xC2xB5Form_Count = 0;
	}
	;
	return 0;
}

int SC_xC2xB5Form__InitCode_() {
	return 0;
}

xC2xB5Form* SC_xC2xB5Form__Needform(JB_String* Form) {
	return ({
		xC2xB5Form* _X = ((xC2xB5Form*)JB_Dict_ValueLower(SC__xC2xB5Form_Forms, Form));
		if ((!_X)) {
			_X = SC_xC2xB5Form__NewWithStr(Form);
			(JB_Dict_ValueLowerSet(SC__xC2xB5Form_Forms, Form, _X));
		}
		 _X;
	});
}

xC2xB5Form* SC_xC2xB5Form__NewWithStr(JB_String* data) {
	xC2xB5Form* __rz__ = ((xC2xB5Form*)SC_xC2xB5Form__Alloc());
	if (__rz__) {
		SC_xC2xB5Form_ConstructorWithStr(__rz__, data);
	}
	return __rz__;
}

xC2xB5Form* SC_xC2xB5Form__NewWithMsg(Message* tmp) {
	xC2xB5Form* __rz__ = ((xC2xB5Form*)SC_xC2xB5Form__Alloc());
	if (__rz__) {
		SC_xC2xB5Form_ConstructorWithMsg(__rz__, tmp);
	}
	return __rz__;
}


void SC_ASMFunc_destructor(ASMFunc* self) {
	JB_Decr(self->Fn);
}

JB_String* SC_ASMFunc_Render(ASMFunc* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	//;
	JB_FS_AppendString(fs, JB_LUB[1235]);
	JB_FS_AppendString(fs, self->Fn->Name);
	JB_FS_AppendByte(fs, '\n');
	//;
	{
		int _CurrInstf1 = 0;
		ASM2* _Addrf2 = ((ASM2*)JB_Mrap_Ptr(SC__flat_JSMSpace)) + self->Start;
		while (_CurrInstf1 < self->Length) {
			ASM2* xC2xB5 = _Addrf2 + _CurrInstf1;
			if ((!(SC_ASM2_OperatorIsa(xC2xB5, kSC__ASM_Extended)))) {
				JB_FS_AppendByte(fs, '\t');
				JB_FreeIfDead(SC_ASM2_Render(xC2xB5, fs));
				JB_FS_AppendByte(fs, '\n');
			}
			_CurrInstf1++;
		};
	}
	;
	JB_String* _tmPf4 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}


void JB_Array_AddCStr(Array* self, JB_String* s) {
	if (JB_Str_Exists(s)) {
		JB_Array_SyntaxAppend(self, JB_Str_MakeC(s));
	}
}

void JB_Array_AppendWords(Array* self, JB_String* R) {
	{
		Array* _LoopSrcf1 = JB_Incr(JB_Str_OperatorDivide(R, ' '));
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			JB_String* S = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf1, _if0)));
			JB_Array_AddCStr(self, S);
			JB_Decr(S);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	};
}

void JB_Array_Clear(Array* self) {
	(JB_Array_SizeSet(self, 0));
}

JB_Object* JB_Array_First(Array* self) {
	return JB_Array_Value(self, 0);
}

JB_Object* JB_Array_Last(Array* self) {
	return JB_Array_Value(self, JB_Array_Size(self) - 1);
}

void JB_Array_LoadProperties(Array* self, ObjectLoader* Loader) {
	while (JB_LD_HasItem(Loader)) {
		JB_Array_SyntaxAppend(self, JB_LD_Object(Loader));
	};
}

JB_Object* JB_Array_Pop(Array* self) {
	JB_Object* rz = nil;
	int n = JB_Array_Size(self);
	if ((!n)) {
		JB_Decr(rz);
		return nil;
	}
	n--;
	JB_SetRef(rz, JB_Array_Value(self, n));
	(JB_Array_SizeSet(self, n));
	JB_SafeDecr(rz);
	return rz;
}

void JB_Array_SaveCollect(Array* self, ObjectSaver* Saver) {
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(self)) {
			JB_Object* v = JB_Array_Value(self, _if0);
			JB_Object_SaveTryCollect(v, Saver);
			_if0++;
		};
	};
}

void JB_Array_SaveWrite(Array* self, ObjectSaver* Saver) {
	FastString* D = Saver->Dest;
	{
		int _if0 = 0;
		int _firstf2 = _if0;
		while (_if0 < JB_Array_Size(self)) {
			JB_Object* v = JB_Array_Value(self, _if0);
			if (_firstf2 != _if0) {
				JB_FS_AppendString(D, JB_LUB[164]);
			}
			//start;
			JB_FS_AppendObjectOrNil(D, v);
			_if0++;
		};
	};
}

void JB_Array_SyntaxAppend(Array* self, JB_Object* item) {
	JB_Array_AppendCount(self, item, 1);
}

bool JB_Array_SyntaxEquals(Array* self, int n, bool Aware) {
	return JB_Array_Size(self) == n;
}

Array* JB_Array__Alloc() {
	return ((Array*)JB_New(Array));
}

Array* JB_Array__New0() {
	Array* __rz__ = ((Array*)JB_Array__Alloc());
	if (__rz__) {
		JB_Array_Constructor0(__rz__);
	}
	return __rz__;
}


JB_Object* JB_Dict_Expect(Dictionary* self, Message* m) {
	JB_Object* _tmPf0 = JB_Incr(JB_Dict_ValueStr(self, m->Name));
	if ((!_tmPf0)) {
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1236], m->Name));
		JB_Msg_SyntaxExpect(m, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_Dict_LoadProperties(Dictionary* self, ObjectLoader* Loader) {
	while (JB_LD_HasItem(Loader)) {
		JB_String* name = JB_LD_ItemName(Loader);
		if (JB_LD_ItemIsInt(Loader)) {
			(JB_Dict_ValueSet(self, name, JB_Wrap__NewInt(JB_LD_ItemInt(Loader))));
		}
		 else {
			(JB_Dict_ValueSet(self, name, JB_LD_ItemObject(Loader)));
		}
	};
}

void JB_Dict_SaveCollect(Dictionary* self, ObjectSaver* Saver) {
	{
		DictionaryReader* _navf0 = JB_Dict_Navigate(self);
		while (JB_Nav_MoveNext(_navf0)) {
			JB_Object* v = JB_Nav_Value(_navf0);
			JB_Object_SaveTryCollect(v, Saver);
		};
	};
}

void JB_Dict_SaveWrite(Dictionary* self, ObjectSaver* Saver) {
	FastString* D = Saver->Dest;
	DictionaryReader* L = JB_Dict_Navigate(self);
	while (JB_DictionaryReader_SyntaxCast(L)) {
		JB_FS_AppendString(D, JB_Nav_Name(L));
		JB_FS_AppendString(D, JB_LUB[278]);
		JB_FS_AppendObjectOrNil(D, JB_Nav_Value(L));
		JB_FS_AppendByte(D, ',');
	};
}

void JB_Dict_SetValue(Dictionary* self, JB_String* key, int64 Value) {
	DTWrap* _tmPf0 = JB_Incr(JB_Wrap__NewInt(Value));
	(JB_Dict_ValueSet(self, key, _tmPf0));
	JB_Decr(_tmPf0);
}

JB_Object* JB_Dict_Syntax(Dictionary* self, JB_String* Key) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_FastLower(Key));
	JB_Object* _tmPf1 = JB_Incr(JB_Dict_ValueStr(self, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_Object* JB_Dict_ValueStr(Dictionary* self, JB_String* Key) {
	return JB_Dict_Value(self, Key, nil);
}

void JB_Dict_SetInt(Dictionary* self, uint64 Key, JB_Object* Value) {
	(JB_Dict_ValueSet(self, JB_int64_DictName(((int64)Key)), Value));
}

JB_Object* JB_Dict_ValueInt(Dictionary* self, uint64 Key) {
	return JB_Dict_ValueStr(self, JB_int64_DictName(((int64)Key)));
}

JB_Object* JB_Dict_ValueLower(Dictionary* self, JB_String* s) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(s));
	JB_Object* _tmPf1 = JB_Incr(JB_Dict_ValueStr(self, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void JB_Dict_ValueLowerSet(Dictionary* self, JB_String* s, JB_Object* Value) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(s));
	(JB_Dict_ValueSet(self, _tmPf0, Value));
	JB_Decr(_tmPf0);
}

Dictionary* JB_Dict__Alloc() {
	return ((Dictionary*)JB_New(Dictionary));
}

Dictionary* JB_Dict__Copy(Dictionary* Dict) {
	Dictionary* rz = JB_Incr(((Dictionary*)nil));
	JB_SetRef(rz, JB_Dict__New());
	{
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(Dict));
		while (JB_Nav_MoveNext(_navf0)) {
			JB_String* key = JB_Incr(JB_Nav_Name(_navf0));
			JB_String* value = JB_Incr(((JB_String*)JB_Nav_Value(_navf0)));
			(JB_Dict_ValueSet(rz, key, value));
			JB_Decr(value);
			JB_Decr(key);
		};
		JB_Decr(_navf0);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

Dictionary* JB_Dict__New() {
	Dictionary* __rz__ = ((Dictionary*)JB_Dict__Alloc());
	if (__rz__) {
		JB_Dict_Constructor(__rz__);
	}
	return __rz__;
}

Dictionary* JB_Dict__Reverse(Dictionary* Dict) {
	Dictionary* rz = JB_Incr(((Dictionary*)nil));
	JB_SetRef(rz, JB_Dict__New());
	{
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(Dict));
		while (JB_Nav_MoveNext(_navf0)) {
			JB_String* key = JB_Incr(JB_Nav_Name(_navf0));
			JB_String* value = JB_Incr(((JB_String*)JB_Nav_Value(_navf0)));
			(JB_Dict_ValueSet(rz, value, key));
			JB_Decr(value);
			JB_Decr(key);
		};
		JB_Decr(_navf0);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}


void SC_FastStringCpp_AppendBehaviour(FastStringCpp* self, JB_String* name, SCFunction* fn, SCClass* Type) {
	JB_FS_AppendString(self, JB_LUB[1237]);
	if (JB_Str_Exists(name)) {
		JB_FS_AppendString(self, name);
	}
	 else {
		JB_FS_AppendString(self, JB_LUB[1238]);
	}
	JB_FS_AppendString(self, JB_LUB[971]);
	if ((!(fn))) {
		JB_FS_AppendString(self, JB_LUB[106]);
	}
	 else {
		JB_FS_AppendByte(self, '(');
		if (Type) {
			JB_String* _tmPf0 = JB_Incr(SC_Class_CStructName(Type));
			if ((!JB_Str_Exists(_tmPf0))) {
				JB_Object_SyntaxExpect(nil);
				JB_Decr(_tmPf0);
				return;
			}
			JB_FS_AppendString(self, (_tmPf0));
			JB_Decr(_tmPf0);
		}
		 else {
			JB_FS_AppendString(self, JB_LUB[1239]);
		}
		JB_FS_AppendByte(self, ')');
		JB_FS_AppendString(self, fn->ExportName);
	}
	JB_FS_AppendString(self, JB_LUB[1022]);
}

void SC_FastStringCpp_Constructor(FastStringCpp* self, JB_String* name) {
	JB_FS_Constructor(self);
	self->ExtraAfter = nil;
	self->OrigFile = nil;
	JB_String* _tmPf0 = JB_LUB[0];
	self->OrigSrc = JB_Incr(_tmPf0);
	self->SrcEnd = nil;
	self->CurrFunc = nil;
	self->LastPos = 0;
	self->Cpp_Name = JB_Incr(name);
	self->LastLine = 1;
}

void SC_FastStringCpp_destructor(FastStringCpp* self) {
	JB_Decr(self->ExtraAfter);
	JB_Decr(self->OrigFile);
	JB_Decr(self->OrigSrc);
	JB_Decr(self->Cpp_Name);
	JB_Decr(self->SrcEnd);
	JB_Decr(self->CurrFunc);
	JB_FS_Destructor(self);
}

FastStringCpp* SC_FastStringCpp__Alloc() {
	return ((FastStringCpp*)JB_New(FastStringCpp));
}

FastStringCpp* SC_FastStringCpp__New(JB_String* name) {
	FastStringCpp* __rz__ = ((FastStringCpp*)SC_FastStringCpp__Alloc());
	if (__rz__) {
		SC_FastStringCpp_Constructor(__rz__, name);
	}
	return __rz__;
}


JB_File* JB_File_Child(JB_File* self, JB_String* name, bool errs) {
	if (JB_Str_Exists(name)) {
		JB_String* _tmPf2 = JB_Incr(JB_Str_PathDir(self));
		JB_String* _tmPf3 = JB_Incr(JB_Str_TrimStart(name, JB_LUB[1113]));
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(_tmPf2, _tmPf3));
		JB_Decr(_tmPf3);
		JB_Decr(_tmPf2);
		JB_File* f = JB_Incr(JB_File__New(_tmPf1));
		JB_Decr(_tmPf1);
		if ((!errs) or JB_File_Exists(f, false)) {
			JB_SafeDecr(f);
			return f;
		}
		JB_Decr(f);
		if ((!false)) {
			FastString* _fsf0 = JB_Incr(JB_FS__New());
			JB_FS_AppendString(_fsf0, JB_LUB[1240]);
			JB_FS_AppendString(_fsf0, name);
			JB_FS_AppendString(_fsf0, JB_LUB[1241]);
			JB_FS_AppendString(_fsf0, self);
			JB_FS_AppendString(_fsf0, JB_LUB[1242]);
			JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf0));
			JB_Decr(_fsf0);
			JB_File_Fail(self, _tmPf4);
			JB_Decr(_tmPf4);
		}
	}
	if ((!false)) {
		JB_String* _tmPf5 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1243], self));
		JB_File_Fail(self, _tmPf5);
		JB_Decr(_tmPf5);
	}
	return nil;
}

ErrorInt JB_File_CodeSign(JB_File* self, JB_String* sign) {
	ErrorInt rz = 0;
	JB_StdErr->ErrorsAreWarnings++;
	Array* args = JB_Incr((JB_Array__New0()));
	JB_Array_SyntaxAppend(args, JB_LUB[1244]);
	JB_Array_SyntaxAppend(args, JB_LUB[1245]);
	if (SC__Options_PrintCompileString) {
		JB_Array_SyntaxAppend(args, JB_LUB[1246]);
	}
	JB_Array_SyntaxAppend(args, JB_LUB[1247]);
	JB_StringC* _tmPf0 = JB_Incr(JB_Str_MakeC(sign));
	JB_Array_SyntaxAppend(args, _tmPf0);
	JB_Decr(_tmPf0);
	JB_StringC* _tmPf1 = JB_Incr(JB_Str_MakeC(self));
	JB_Array_SyntaxAppend(args, _tmPf1);
	JB_Decr(_tmPf1);
	rz = JB_Str_DebugExecute(JB_LUB[1248], args, nil, nil);
	JB_SetRef(args, (JB_Array__New0()));
	JB_Array_SyntaxAppend(args, JB_LUB[1249]);
	if (SC__Options_PrintCompileString) {
		JB_Array_SyntaxAppend(args, JB_LUB[1246]);
	}
	JB_Array_SyntaxAppend(args, self);
	if (JB_ErrorInt_SyntaxCast(rz)) {
		rz = JB_Str_DebugExecute(JB_LUB[1248], args, nil, nil);
	}
	if (JB_ErrorInt_SyntaxCast(rz)) {
		(JB_Array_ValueSet(args, 0, JB_LUB[1250]));
		rz = JB_Str_DebugExecute(JB_LUB[1251], args, nil, nil);
	}
	JB_Decr(args);
	JB_StdErr->ErrorsAreWarnings--;
	return rz;
}

bool JB_File_FileCompare(JB_File* self, JB_File* A) {
	if ((!(JB_File_Size(self) == JB_File_Size(A)))) {
		return nil;
	}
	JB_File_Open(self, kJB__File_O_RDONLY, false);
	JB_File_Open(A, kJB__File_O_RDONLY, false);
	while (true) {
		JB_String* S_ = JB_Incr(JB_File_Read(self, 65536, true));
		JB_String* SA = JB_Incr(JB_File_Read(A, 65536, true));
		if ((!(JB_Str_Equals(S_, SA, false)))) {
			JB_Decr(S_);
			JB_Decr(SA);
			return nil;
		}
		JB_Decr(SA);
		if ((!JB_Str_Exists(S_))) {
			JB_Decr(S_);
			break;
		}
		JB_Decr(S_);
	};
	JB_File_Close(self);
	JB_File_Close(A);
	return true;
}

bool JB_File_Compare(JB_File* self, JB_String* S) {
	return (JB_File_Size(self) == JB_Str_Length(S)) and ((({
		JB_String* _tmP215 = JB_Incr(JB_File_ReadAll(self, 134217728, true));
		bool _tmP214 = JB_Str_Equals(_tmP215, S, false);
		JB_Decr(_tmP215);
		 _tmP214;
	})));
}

Message* JB_File_conf(JB_File* self, int lim) {
	Message* rz = ((Message*)nil);
	if (JB_File_Exists(self, false)) {
		rz = ((Message*)JB_File_Parse(self, lim, false));
	}
	if ((!(rz))) {
		rz = JB_Msg__NewBasic();
	}
	JB_SetRef(rz->Obj, self);
	return rz;
}

ErrorInt JB_File_CopyAll(JB_File* self, JB_String* Dest, bool AttrOnly) {
	ErrorInt rz = 0;
	if ((!JB_File_IsDir(self))) {
		JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(Dest));
		ErrorInt _tmPf4 = JB_File_Copy(self, _tmPf1, AttrOnly);
		JB_Decr(_tmPf1);
		return _tmPf4;
	}
	{
		JB_File_ListStart(self);
		while (JB_File_MoveNext(self)) {
			JB_String* f = JB_Incr(JB_File_CurrChild(self));
			JB_File* _tmPf2 = JB_Incr(JB_File_Child(self, f, false));
			JB_String* _tmPf3 = JB_Incr(JB_Str_SyntaxAccess(Dest, f));
			JB_Decr(f);
			rz = JB_File_CopyAll(_tmPf2, _tmPf3, false);
			JB_Decr(_tmPf3);
			JB_Decr(_tmPf2);
			if ((!JB_ErrorInt_SyntaxCast(rz))) {
				break;
			}
		};
		JB_File_ListEnd(self);
	}
	;
	return rz;
}

ErrorInt JB_File_DeleteAll(JB_File* self) {
	ErrorInt rz = 0;
	if ((JB_Str_Equals(self, JB_LUB[1113], false)) or (JB_Str_Equals(self, JB_LUB[0], false))) {
		return -1;
	}
	if (JB_File_IsDir(self)) {
		{
			JB_File_ListStart(self);
			while (JB_File_MoveNext(self)) {
				JB_String* _tmPf1 = JB_Incr(JB_File_CurrChild(self));
				JB_File* C = JB_Incr(JB_File_Child(self, _tmPf1, false));
				JB_Decr(_tmPf1);
				ErrorInt tmp = JB_File_DeleteAll(C);
				JB_Decr(C);
				if (rz == 0) {
					rz = tmp;
				}
			};
			JB_File_ListEnd(self);
		};
	}
	if (rz == 0) {
		rz = JB_File_Delete(self);
	}
	return rz;
}

bool JB_File_DirectoryContains(JB_File* self, JB_String* path) {
	JB_String* _tmPf0 = JB_Incr(JB_File_PathFix_(path));
	JB_String* _tmPf1 = JB_Incr(JB_Str_PathDir(self));
	bool _tmPf2 = JB_Str_OperatorStarts(_tmPf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
	return _tmPf2;
}

ErrorInt JB_File_LinkToSet(JB_File* self, JB_String* Value) {
	JB_StringC* _tmPf0 = JB_Incr(JB_Str_MakeC(Value));
	ErrorInt _tmPf1 = JB_Str_SymLink(_tmPf0, self);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool JB_File_StrMatch(JB_File* self, JB_String* s) {
	return JB_File_Compare(self, s);
}

bool JB_File_MatchFile(JB_File* self, JB_File* f) {
	return JB_File_FileCompare(self, f);
}

bool JB_File_MustExist(JB_File* self, JB_String* operation) {
	if (JB_File_Exists(self, false)) {
		return true;
	}
	JB_String* eerr = JB_Incr(JB_LUB[1252]);
	if (self != nil) {
		JB_SetRef(eerr, JB_Str_OperatorPlus(eerr, self));
	}
	JB_SetRef(eerr, JB_Str_OperatorPlus(eerr, JB_LUB[411]));
	if (JB_File_SyntaxCast(self) and (JB_Str_ByteValue(self, 0) != '/')) {
		JB_SetRef(eerr, JB_Str_OperatorPlus(eerr, JB_LUB[1253]));
		JB_String* _tmPf0 = JB_Incr(JB_File__CWD());
		JB_SetRef(eerr, JB_Str_OperatorPlus(eerr, _tmPf0));
		JB_Decr(_tmPf0);
	}
	if (JB_Str_Exists(operation)) {
		JB_SetRef(eerr, JB_Str_OperatorPlus(eerr, JB_LUB[1254]));
		JB_SetRef(eerr, JB_Str_OperatorPlus(eerr, operation));
	}
	if ((!false)) {
		JB_File_Fail(self, eerr);
	}
	JB_Decr(eerr);
	return false;
}

bool JB_File_Opened(JB_File* self) {
	return self->Descriptor >= 0;
}

bool JB_File_OperatorInside(JB_File* self, JB_File* f) {
	JB_String* fp = JB_Incr(JB_Str_PathDir(f));
	JB_String* _tmPf0 = JB_Incr(JB_Str_Range(self, 0, JB_Str_Length(fp)));
	bool _tmPf1 = JB_Str_Equals(_tmPf0, fp, false);
	JB_Decr(_tmPf0);
	JB_Decr(fp);
	return (_tmPf1);
}

bool JB_File_NewerThanFile(JB_File* self, JB_File* F) {
	return JB_File_OperatorIsNewerThan(self, JB_File_Modified(F));
}

bool JB_File_OperatorIsNewerThan(JB_File* self, Date F) {
	return (JB_File_Modified(self) > F);
}

JB_File* JB_File_Parent(JB_File* self) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Parent(self));
	JB_File* _tmPf1 = JB_Incr(JB_File__New(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_File_Parse(JB_File* self, int lim, bool AllowMissing) {
	Message* rz = JB_Incr(((Message*)nil));
	JB_String* _tmPf0 = JB_Incr(JB_Str_ResolvePath(self, AllowMissing));
	JB_File* f = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	if (JB_File_SyntaxCast(f)) {
		JB_String* S = JB_Incr(JB_File_ReadSafely(f, lim, AllowMissing));
		if (JB_Str_IsCompressed(S)) {
			JB_SetRef(S, JB_Str_Decompress(S, nil, lim));
		}
		if (JB_Safe_SyntaxCast(S)) {
			JB_MemoryLayer* L = JB_Mem_CreateLayer((JB_AsClass(Message)), f);
			JB_Mem_Use(L);
			JB_SetRef(L->Obj2, S);
			JB_SetRef(rz, JB_Str_Parse(S, JB_SyxArg, false));
			JB_ClassData_Restore((JB_AsClass(Message)));
		}
		JB_Decr(S);
	}
	JB_Decr(f);
	JB_SafeDecr(rz);
	return rz;
}

JB_String* JB_File_ReadSafely(JB_File* self, int lim, bool AllowMissing) {
	return JB_File_ReadAll(self, lim, AllowMissing);
}

JB_File* JB_File_sibling(JB_File* self, JB_String* name) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Sibling(self, name));
	JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool JB_File_SmartDataSet(JB_File* self, JB_String* nieu) {
	if ((JB_File_Size(self) != JB_Str_Length(nieu)) or ((!({
		JB_String* _tmP213 = JB_Incr(JB_File_ReadAll(self, 134217728, true));
		bool _tmP212 = JB_Str_Equals(_tmP213, nieu, false);
		JB_Decr(_tmP213);
		 _tmP212;
	})))) {
		return JB_File_DataSet(self, nieu);
	}
	return false;
}

JB_File* JB_File_SyntaxAccess(JB_File* self, JB_String* name, bool Errs) {
	return JB_File_Child(self, name, Errs);
}

void JB_File_SyntaxAppend(JB_File* self, JB_String* data) {
	JB_File_Write(self, data);
}

void JB_File_Fail(JB_File* self, JB_String* Error) {
	JB_Rec_NewErrorWithNode(JB_StdErr, nil, Error, ((JB_String*)JB_Ternary(JB_File_SyntaxCast(self), JB_File_Path(self), JB_LUB[0])));
}

bool JB_File_TestBatch(JB_File* self) {
	JB_File* batch = JB_Incr(JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, JB_LUB[1255], false));
	JB_Str_Print(JB_LUB[1256]);
	JB_String* sep = JB_Incr(JB_LUB[0]);
	{
		JB_File_ListStart(batch);
		while (JB_File_MoveNext(batch)) {
			JB_String* _tmPf3 = JB_Incr(JB_File_CurrChild(batch));
			JB_File* c = JB_Incr(JB_File_Child(batch, _tmPf3, false));
			JB_Decr(_tmPf3);
			if (JB_File_visible(c) and JB_Str_OperatorIsa(c, JB_LUB[561])) {
				JB_Str_Print(sep);
				JB_SetRef(sep, JB_LUB[164]);
				JB_String* _tmPf4 = JB_Incr(JB_Str_Name(c));
				JB_Str_Print(_tmPf4);
				JB_Decr(_tmPf4);
				Array* _tmPf1 = JB_Incr((JB_Array__New0()));
				JB_Array_SyntaxAppend(_tmPf1, c);
				JB_Array_SyntaxAppend(_tmPf1, JB_LUB[1257]);
				JB_Str_SilentExecute(self, _tmPf1, nil, nil);
				JB_Decr(_tmPf1);
			}
			JB_Decr(c);
		};
		JB_File_ListEnd(batch);
	}
	;
	JB_Decr(sep);
	JB_PrintLine(JB_LUB[0]);
	{
		JB_File_ListStart(batch);
		while (JB_File_MoveNext(batch)) {
			JB_String* _tmPf5 = JB_Incr(JB_File_CurrChild(batch));
			JB_File* c = JB_Incr(JB_File_Child(batch, _tmPf5, false));
			JB_Decr(_tmPf5);
			if (JB_Str_OperatorIsa(c, JB_LUB[191]) or JB_Str_OperatorIsa(c, JB_LUB[1053])) {
				JB_String* _tmPf6 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1258], c));
				JB_PrintLine(_tmPf6);
				JB_Decr(_tmPf6);
				debugger;
			}
			JB_Decr(c);
		};
		JB_File_ListEnd(batch);
	}
	;
	JB_Decr(batch);
	return JB_Rec_OK(JB_StdErr);
}

bool JB_File_TestSpeedie(JB_File* self, JB_String* Variant) {
	JB_Incr(Variant);
	if ((!(JB_File_MustExist(self, JB_LUB[0])))) {
		JB_Decr(Variant);
		return nil;
	}
	JB_String* _tmPf1 = JB_Incr(JB_File_Path(self));
	if (JB_Str_ContainsString(_tmPf1, JB_LUB[170])) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[1259]);
		JB_String* _tmPf2 = JB_Incr(JB_File_Path(self));
		JB_FS_AppendString(_fsf0, _tmPf2);
		JB_Decr(_tmPf2);
		JB_FS_AppendString(_fsf0, JB_LUB[1260]);
		JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Str_SyntaxExpect(_tmPf3);
		JB_Decr(_tmPf3);
		JB_Decr(Variant);
		JB_Decr(_tmPf1);
		return nil;
	}
	JB_Decr(_tmPf1);
	JB_SetRef(Variant, JB_Str_OperatorPlus(JB_LUB[1261], Variant));
	Array* cmd_args = JB_Incr((JB_Array__New0()));
	JB_Array_SyntaxAppend(cmd_args, JB_LUB[1262]);
	JB_Array_SyntaxAppend(cmd_args, JB_LUB[1263]);
	JB_Array_SyntaxAppend(cmd_args, Variant);
	if (JB_Str_Equals(Variant, JB_LUB[253], false)) {
		JB_Array_SyntaxAppend(cmd_args, JB_LUB[1264]);
	}
	if (SC__Options_PrintCompileString) {
		JB_Array_SyntaxAppend(cmd_args, JB_LUB[1265]);
	}
	if (JB_Str_Exists(SC__Options_Arch)) {
		JB_String* _tmPf4 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1266], SC__Options_Arch));
		JB_Array_SyntaxAppend(cmd_args, _tmPf4);
		JB_Decr(_tmPf4);
	}
	FastString* result = JB_Incr(JB_FS__New());
	JB_String* _tmPf5 = JB_Incr(JB_File_Path(self));
	JB_Str_Execute(_tmPf5, cmd_args, result, nil, true);
	JB_Decr(_tmPf5);
	JB_Decr(cmd_args);
	JB_Obj_PrintLine(result);
	JB_Decr(result);
	JB_String* _tmPf7 = JB_Incr(SC_Ext__TmpOut(Variant));
	JB_String* _tmPf6 = JB_Incr(JB_Str_ReadFile(_tmPf7, 1073741824, true));
	JB_Decr(_tmPf7);
	JB_Str_Print(_tmPf6);
	JB_Decr(_tmPf6);
	JB_String* _tmPf8 = JB_Incr(SC_Ext__TmpErr(Variant));
	JB_Decr(Variant);
	JB_String* test_err = JB_Incr(JB_Str_ReadFile(_tmPf8, 1073741824, true));
	JB_Decr(_tmPf8);
	if (JB_Str_Exists(test_err)) {
		if ((!false)) {
			JB_Str_SyntaxExpect(test_err);
		}
	}
	JB_Decr(test_err);
	return JB_Rec_OK(JB_StdErr);
}

ErrorInt JB_File_touch(JB_File* self) {
	Array* _tmPf0 = JB_Incr((JB_Array__New0()));
	JB_Array_SyntaxAppend(_tmPf0, self);
	ErrorInt _tmPf1 = JB_Str_SilentExecute(JB_LUB[1267], _tmPf0, nil, nil);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool JB_File_visible(JB_File* self) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Name(self));
	bool _tmPf1 = JB_Str_ByteValue(_tmPf0, 0) != '.';
	JB_Decr(_tmPf0);
	return _tmPf1;
}

FastString* JB_File_writer(JB_File* self) {
	FastString* rz = nil;
	if (self != nil) {
		JB_File_Close(self);
		if ((!JB_Ind_SyntaxCast(JB_File_OpenBlank(self)))) {
			JB_Decr(rz);
			return nil;
		}
		JB_SetRef(rz, JB_FS__New());
		(JB_FS_FileSet(rz, self));
	}
	JB_SafeDecr(rz);
	return rz;
}

JB_File* JB_File__Alloc() {
	return ((JB_File*)JB_New(JB_File));
}

JB_String* JB_File__AppPrefs(JB_String* name) {
	JB_Incr(name);
	if ((!JB_Str_Exists(name))) {
		JB_String* _tmPf0 = JB_Incr(JB_App__FileName());
		JB_SetRef(name, JB_Str_LowerCase(_tmPf0));
		JB_Decr(_tmPf0);
		if ((!(JB_Str_Exists(name)))) {
			JB_SetRef(name, JB_App__conf(JB_LUB[71]));
		}
		JB_SetRef(name, JB_Str_OperatorPlus(name, JB_LUB[1268]));
	}
	JB_String* _tmPf1 = JB_Incr(JB_File__PreferencesPath());
	JB_String* _tmPf2 = JB_Incr(JB_Str_Child(_tmPf1, name));
	JB_Decr(_tmPf1);
	JB_Decr(name);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

int JB_File__Init_() {
	{
		JB__File_DebugExecute = false;
	}
	;
	return 0;
}

int JB_File__InitCode_() {
	return 0;
}

JB_File* JB_File__Logs() {
	return JB_Str_AsFile(JB_LUB[4]);
}

JB_File* JB_File__New(JB_String* path) {
	JB_File* __rz__ = ((JB_File*)JB_File__Alloc());
	if (__rz__) {
		JB_File_Constructor(__rz__, path);
	}
	return __rz__;
}

JB_String* JB_File__PreferencesPath() {
	if (JB_Platform__OSX()) {
		return JB_LUB[1269];
	}
	if (JB_Platform__windows()) {
		return JB_LUB[1270];
	}
	if (JB_Platform__linux()) {
		return JB_LUB[1271];
	}
	return JB_LUB[0];
}

JB_File* JB_File__PrefsFolder() {
	if (JB_Platform__OSX()) {
		return JB_Str_AsFile(JB_LUB[1269]);
	}
	return nil;
}

void JB_File__testjb() {
	JB_String* t = JB_Incr(JB_Constants__TestJB());
	if ((!SC__Options_Perry) and (!SC__Options_Scripting)) {
		JB_ZalgoLine(t);
	}
	JB_Decr(t);
}


void SC_Instruction_ActualInit(Instruction* self) {
	xC2xB5Form* _tmPf0 = JB_Incr(SC_xC2xB5Form__Needform(self->FormName));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return;
	}
	JB_SetRef(self->Sizes, _tmPf0);
	JB_Decr(_tmPf0);
	self->PCount = self->Sizes->Count;
	SC_Instruction__Store(self);
}

void SC_Instruction_Const(Instruction* self) {
	self->aType = kSC__Instruction_TypeConst;
}

void SC_Instruction_Constructor(Instruction* self, Selector* Next, Selector** Place, JB_String* name1) {
	JB_Sel_Constructor(self, Next, Place, name1);
	self->OpLength = 0;
	self->aType = 0;
	self->PCount = 0;
	self->Sizes = nil;
	JB_String* _tmPf0 = JB_LUB[0];
	self->FormName = JB_Incr(_tmPf0);
}

void SC_Instruction_destructor(Instruction* self) {
	JB_Decr(self->Sizes);
	JB_Decr(self->FormName);
	JB_Sel_destructor(self);
}

JB_String* SC_Instruction_Render(Instruction* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendString(fs, self->Name);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Instruction_selector_init(Instruction* self, JB_String* formName, int num) {
	self->OpLength = num;
	JB_SetRef(self->FormName, formName);
}

void SC_Instruction____LoadSel(Instruction** Place, JB_String* Name) {
	//visible;
	JB_SetRef(SC__Instruction___First, SC_Instruction__New(SC__Instruction___First, ((Selector**)Place), Name));
}

Instruction* SC_Instruction__Alloc() {
	return ((Instruction*)JB_New(Instruction));
}

int SC_Instruction__Init_() {
	{
		SC__Instruction_TypeListSize = 0;
	}
	;
	return 0;
}

void SC_Instruction__InitAll() {
	{
		Instruction* _LoopSrcf1 = SC__Instruction___First;
		Instruction* i = _LoopSrcf1;
		while (i) {
			SC_Instruction_ActualInit(i);
			i = (Instruction*)(i->Next);
		};
	};
}

int SC_Instruction__InitCode_() {
	{
	}
	;
	SC_Instruction____LoadSel((&SC__Instruction_PRNT), JB_LUB[1272]);
	SC_Instruction____LoadSel((&SC__Instruction_DDIV), JB_LUB[1273]);
	SC_Instruction____LoadSel((&SC__Instruction_DMUL), JB_LUB[1274]);
	SC_Instruction____LoadSel((&SC__Instruction_DSUB), JB_LUB[1275]);
	SC_Instruction____LoadSel((&SC__Instruction_DADD), JB_LUB[1276]);
	SC_Instruction____LoadSel((&SC__Instruction_FDIV), JB_LUB[1277]);
	SC_Instruction____LoadSel((&SC__Instruction_FMUL), JB_LUB[1278]);
	SC_Instruction____LoadSel((&SC__Instruction_FSUB), JB_LUB[1279]);
	SC_Instruction____LoadSel((&SC__Instruction_FADD), JB_LUB[1280]);
	SC_Instruction____LoadSel((&SC__Instruction_MEMM), JB_LUB[1281]);
	SC_Instruction____LoadSel((&SC__Instruction_CNTC), JB_LUB[1282]);
	SC_Instruction____LoadSel((&SC__Instruction_ST8U), JB_LUB[1283]);
	SC_Instruction____LoadSel((&SC__Instruction_ST4U), JB_LUB[1284]);
	SC_Instruction____LoadSel((&SC__Instruction_ST2U), JB_LUB[1285]);
	SC_Instruction____LoadSel((&SC__Instruction_ST1U), JB_LUB[1286]);
	SC_Instruction____LoadSel((&SC__Instruction_RD8U), JB_LUB[1287]);
	SC_Instruction____LoadSel((&SC__Instruction_RD4S), JB_LUB[1288]);
	SC_Instruction____LoadSel((&SC__Instruction_RD4U), JB_LUB[1289]);
	SC_Instruction____LoadSel((&SC__Instruction_RD2S), JB_LUB[1290]);
	SC_Instruction____LoadSel((&SC__Instruction_RD2U), JB_LUB[1291]);
	SC_Instruction____LoadSel((&SC__Instruction_RD1S), JB_LUB[1292]);
	SC_Instruction____LoadSel((&SC__Instruction_RD1U), JB_LUB[1293]);
	SC_Instruction____LoadSel((&SC__Instruction_RALO), JB_LUB[1294]);
	SC_Instruction____LoadSel((&SC__Instruction_RSET), JB_LUB[1295]);
	SC_Instruction____LoadSel((&SC__Instruction_RSDE), JB_LUB[1296]);
	SC_Instruction____LoadSel((&SC__Instruction_LUPD), JB_LUB[1297]);
	SC_Instruction____LoadSel((&SC__Instruction_LUPU), JB_LUB[1298]);
	SC_Instruction____LoadSel((&SC__Instruction_BRAN), JB_LUB[1299]);
	SC_Instruction____LoadSel((&SC__Instruction_BRA), JB_LUB[1300]);
	SC_Instruction____LoadSel((&SC__Instruction_CMPN), JB_LUB[1301]);
	SC_Instruction____LoadSel((&SC__Instruction_CMPE), JB_LUB[1302]);
	SC_Instruction____LoadSel((&SC__Instruction_CMPF), JB_LUB[1303]);
	SC_Instruction____LoadSel((&SC__Instruction_CMPI), JB_LUB[1304]);
	SC_Instruction____LoadSel((&SC__Instruction_BROR), JB_LUB[1305]);
	SC_Instruction____LoadSel((&SC__Instruction_BROL), JB_LUB[1306]);
	SC_Instruction____LoadSel((&SC__Instruction_BFLS), JB_LUB[1307]);
	SC_Instruction____LoadSel((&SC__Instruction_BFLG), JB_LUB[1308]);
	SC_Instruction____LoadSel((&SC__Instruction_BNOT), JB_LUB[1309]);
	SC_Instruction____LoadSel((&SC__Instruction_BXOR), JB_LUB[1310]);
	SC_Instruction____LoadSel((&SC__Instruction_BOR), JB_LUB[1311]);
	SC_Instruction____LoadSel((&SC__Instruction_BAND), JB_LUB[1312]);
	SC_Instruction____LoadSel((&SC__Instruction_SHLS), JB_LUB[1313]);
	SC_Instruction____LoadSel((&SC__Instruction_SHRU), JB_LUB[1314]);
	SC_Instruction____LoadSel((&SC__Instruction_SHRS), JB_LUB[1315]);
	SC_Instruction____LoadSel((&SC__Instruction_DIV), JB_LUB[1316]);
	SC_Instruction____LoadSel((&SC__Instruction_MUL), JB_LUB[1317]);
	SC_Instruction____LoadSel((&SC__Instruction_SUB), JB_LUB[1318]);
	SC_Instruction____LoadSel((&SC__Instruction_ADD), JB_LUB[1319]);
	SC_Instruction____LoadSel((&SC__Instruction_ADDC), JB_LUB[1320]);
	SC_Instruction____LoadSel((&SC__Instruction_SETN), JB_LUB[1321]);
	SC_Instruction____LoadSel((&SC__Instruction_SETK), JB_LUB[1322]);
	SC_Instruction____LoadSel((&SC__Instruction_SET1), JB_LUB[1323]);
	SC_Instruction____LoadSel((&SC__Instruction_CONV), JB_LUB[1324]);
	SC_Instruction____LoadSel((&SC__Instruction_RARE), JB_LUB[1325]);
	SC_Instruction____LoadSel((&SC__Instruction_RETL), JB_LUB[1326]);
	SC_Instruction____LoadSel((&SC__Instruction_LEAF), JB_LUB[1327]);
	SC_Instruction____LoadSel((&SC__Instruction_RET), JB_LUB[1328]);
	SC_Instruction____LoadSel((&SC__Instruction_FNCX), JB_LUB[1329]);
	SC_Instruction____LoadSel((&SC__Instruction_FNC), JB_LUB[1330]);
	SC_Instruction____LoadSel((&SC__Instruction_SWAP), JB_LUB[1331]);
	SC_Instruction____LoadSel((&SC__Instruction_STCK), JB_LUB[1332]);
	SC_Instruction____LoadSel((&SC__Instruction_HALT), JB_LUB[1333]);
	SC_Instruction____LoadSel((&SC__Instruction_EROR), JB_LUB[651]);
	JB_Sel_GiveIDs(SC__Instruction___First);
	SC_Instruction_selector_init(SC__Instruction_EROR, (JB_LUB[1334]), 1);
	SC_Instruction_selector_init(SC__Instruction_HALT, (JB_LUB[1334]), 1);
	SC_Instruction_selector_init(SC__Instruction_STCK, (JB_LUB[1334]), 1);
	SC_Instruction_selector_init(SC__Instruction_SWAP, (JB_LUB[1335]), 1);
	SC_Instruction_selector_init(SC__Instruction_FNC, (JB_LUB[1336]), 1);
	SC_Instruction_selector_init(SC__Instruction_FNCX, (JB_LUB[1336]), 1);
	SC_Instruction_selector_init(SC__Instruction_RET, (JB_LUB[1337]), 1);
	SC_Instruction_selector_init(SC__Instruction_LEAF, (JB_LUB[1338]), 1);
	SC_Instruction_selector_init(SC__Instruction_RETL, (JB_LUB[584]), 1);
	SC_Instruction_selector_init(SC__Instruction_RARE, (JB_LUB[1339]), 1);
	SC_Instruction_selector_init(SC__Instruction_CONV, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_SET1, (JB_LUB[1341]), 1);
	SC_Instruction_selector_init(SC__Instruction_SETK, (JB_LUB[1342]), 1);
	SC_Instruction_selector_init(SC__Instruction_SETN, (JB_LUB[1343]), 1);
	SC_Instruction_selector_init(SC__Instruction_ADDC, (JB_LUB[1344]), 1);
	SC_Instruction_selector_init(SC__Instruction_ADD, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_SUB, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_MUL, (JB_LUB[1345]), 1);
	SC_Instruction_selector_init(SC__Instruction_DIV, (JB_LUB[1345]), 1);
	SC_Instruction_selector_init(SC__Instruction_SHRS, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_SHRU, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_SHLS, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_BAND, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_BOR, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_BXOR, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_BNOT, (JB_LUB[1339]), 1);
	SC_Instruction_selector_init(SC__Instruction_BFLG, (JB_LUB[1346]), 1);
	SC_Instruction_selector_init(SC__Instruction_BFLS, (JB_LUB[1346]), 1);
	SC_Instruction_selector_init(SC__Instruction_BROL, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_BROR, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_CMPI, (JB_LUB[1347]), 1);
	SC_Instruction_selector_init(SC__Instruction_CMPF, (JB_LUB[1347]), 1);
	SC_Instruction_selector_init(SC__Instruction_CMPE, (JB_LUB[1348]), 1);
	SC_Instruction_selector_init(SC__Instruction_CMPN, (JB_LUB[1348]), 1);
	SC_Instruction_selector_init(SC__Instruction_BRA, (JB_LUB[1349]), 1);
	SC_Instruction_selector_init(SC__Instruction_BRAN, (JB_LUB[1342]), 1);
	SC_Instruction_selector_init(SC__Instruction_LUPU, (JB_LUB[1350]), 1);
	SC_Instruction_selector_init(SC__Instruction_LUPD, (JB_LUB[1350]), 1);
	SC_Instruction_selector_init(SC__Instruction_RSDE, (JB_LUB[1351]), 1);
	SC_Instruction_selector_init(SC__Instruction_RSET, (JB_LUB[1345]), 1);
	SC_Instruction_selector_init(SC__Instruction_RALO, (JB_LUB[1339]), 1);
	SC_Instruction_selector_init(SC__Instruction_RD1U, (JB_LUB[1352]), 1);
	SC_Instruction_selector_init(SC__Instruction_RD1S, (JB_LUB[1352]), 1);
	SC_Instruction_selector_init(SC__Instruction_RD2U, (JB_LUB[1352]), 1);
	SC_Instruction_selector_init(SC__Instruction_RD2S, (JB_LUB[1352]), 1);
	SC_Instruction_selector_init(SC__Instruction_RD4U, (JB_LUB[1352]), 1);
	SC_Instruction_selector_init(SC__Instruction_RD4S, (JB_LUB[1352]), 1);
	SC_Instruction_selector_init(SC__Instruction_RD8U, (JB_LUB[1352]), 1);
	SC_Instruction_selector_init(SC__Instruction_ST1U, (JB_LUB[1352]), 1);
	SC_Instruction_selector_init(SC__Instruction_ST2U, (JB_LUB[1352]), 1);
	SC_Instruction_selector_init(SC__Instruction_ST4U, (JB_LUB[1352]), 1);
	SC_Instruction_selector_init(SC__Instruction_ST8U, (JB_LUB[1352]), 1);
	SC_Instruction_selector_init(SC__Instruction_CNTC, (JB_LUB[1282]), 1);
	SC_Instruction_selector_init(SC__Instruction_MEMM, (JB_LUB[1344]), 1);
	SC_Instruction_selector_init(SC__Instruction_FADD, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_FSUB, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_FMUL, (JB_LUB[1345]), 1);
	SC_Instruction_selector_init(SC__Instruction_FDIV, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_DADD, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_DSUB, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_DMUL, (JB_LUB[1345]), 1);
	SC_Instruction_selector_init(SC__Instruction_DDIV, (JB_LUB[1340]), 1);
	SC_Instruction_selector_init(SC__Instruction_PRNT, (JB_LUB[1334]), 1);
	return 0;
}

Instruction* SC_Instruction__New(Selector* Next, Selector** Place, JB_String* name1) {
	Instruction* __rz__ = ((Instruction*)SC_Instruction__Alloc());
	if (__rz__) {
		SC_Instruction_Constructor(__rz__, Next, Place, name1);
	}
	return __rz__;
}

void SC_Instruction__Store(Instruction* i) {
	if (SC__Instruction_TypeListSize++ != i->ID) {
		JB_DoAt(1);
	}
	if ((!(SC__Instruction_TypeDict))) {
		JB_SetRef(SC__Instruction_TypeDict, JB_Dict__New());
	}
	JB_SetRef(SC__Instruction_TypeList[i->ID], i);
	(JB_Dict_ValueSet(SC__Instruction_TypeDict, i->Name, i));
}


void JB_bin_add(FastString* self, Syntax type, JB_String* data, bool into) {
	int L = JB_Str_Length(data);
	JB_bin_AddMemory(self, type, into, ((byte*)JB_Ternary(((bool)L), data->Addr, nil)), L);
}

void JB_bin_AddCstring(FastString* self, _cstring data, Syntax type) {
	JB_bin_AddMemory(self, type, false, ((byte*)data), strlen(data));
}

void JB_bin_addint(FastString* self, int64 data) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(data, nil));
	JB_bin_add(self, JB_SyxNum, _tmPf0, false);
	JB_Decr(_tmPf0);
}

void JB_bin_AddMemory(FastString* self, Syntax type, bool GoIn, byte* data, uint64 L) {
	uint info = 128 >> GoIn;
	int L2 = JB_Ternary(L < 60, ((int)L), 60 + JB_uint64_lelength(L));
	JB_FS_AppendByte(self, ((byte)(info | L2)));
	if (L >= 60) {
		JB_FS_lint(self, L);
	}
	JB_FS_AppendByte(self, ((byte)type));
	if (data) {
		JB_FS_AppendMem_(self, data, ((int)L));
	}
}

void JB_bin_CloseStream(FastString* self, int c) {
	int nwe = self->Length;
	self->Length = (c - 6);
	JB_FS_AppendByte(self, ((byte)191));
	JB_FS_AppendInteger(self, nwe - c);
	JB_FS_AppendByte(self, ((byte)(JB_SyxBin)));
	self->Length = nwe;
}

void JB_bin_Constructor(FastString* self, Syntax type, JB_String* data) {
	JB_FS_Constructor(self);
	JB_bin_jinit(self);
	JB_bin_enter(self, type, data);
}

void JB_bin_Constructor0(FastString* self) {
	JB_FS_Constructor(self);
}

void JB_bin_enter(FastString* self, Syntax type, JB_String* data) {
	JB_bin_add(self, type, data, true);
}

void JB_bin_jinit(FastString* self) {
	self->Length = 0;
	JB_FS_AppendString(self, JB__JbinHeader);
}

int JB_bin_OpenStream(FastString* self) {
	JB_bin_AddMemory(self, JB_SyxBin, false, nil, 1073741824);
	return self->Length;
}

void JB_bin_sheb(FastString* self, JB_String* data) {
	if (JB_Str_Exists(data)) {
		JB_FS_AppendByte(self, '#');
		JB_FS_AppendByte(self, '!');
		JB_FS_AppendString(self, data);
		JB_FS_AppendByte(self, '\n');
	}
}

void JB_bin_up(FastString* self, int amount) {
	while (amount > 0) {
		int less = JB_int_OperatorMin(amount, 63);
		JB_FS_AppendByte(self, ((byte)(less | 192)));
		amount = (amount - less);
	};
}

FastString* JB_bin__New(Syntax type, JB_String* data) {
	FastString* __rz__ = ((FastString*)JB_FS__Alloc());
	if (__rz__) {
		JB_bin_Constructor(__rz__, type, data);
	}
	return __rz__;
}

FastString* JB_bin__New0() {
	FastString* __rz__ = ((FastString*)JB_FS__Alloc());
	if (__rz__) {
		JB_bin_Constructor0(__rz__);
	}
	return __rz__;
}


void SC_MaterialsLol_Constructor(MaterialsLol* self, Selector* Next, Selector** Place, JB_String* name1) {
	JB_Sel_Constructor(self, Next, Place, name1);
	JB_String* _tmPf0 = JB_LUB[0];
	self->oof = JB_Incr(_tmPf0);
}

void SC_MaterialsLol_destructor(MaterialsLol* self) {
	JB_Decr(self->oof);
	JB_Sel_destructor(self);
}

void SC_MaterialsLol____LoadSel(MaterialsLol** Place, JB_String* Name) {
	//visible;
	JB_SetRef(SC__MaterialsLol___First, SC_MaterialsLol__New(SC__MaterialsLol___First, ((Selector**)Place), Name));
}

MaterialsLol* SC_MaterialsLol__Alloc() {
	return ((MaterialsLol*)JB_New(MaterialsLol));
}

int SC_MaterialsLol__Init_() {
	{
	}
	;
	return 0;
}

int SC_MaterialsLol__InitCode_() {
	{
	}
	;
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_WierdBlock), JB_LUB[1353]);
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_Iron), JB_LUB[1354]);
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_Wood), JB_LUB[1355]);
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_Pellets), JB_LUB[1356]);
	JB_Sel_GiveIDs(SC__MaterialsLol___First);
	return 0;
}

MaterialsLol* SC_MaterialsLol__New(Selector* Next, Selector** Place, JB_String* name1) {
	MaterialsLol* __rz__ = ((MaterialsLol*)SC_MaterialsLol__Alloc());
	if (__rz__) {
		SC_MaterialsLol_Constructor(__rz__, Next, Place, name1);
	}
	return __rz__;
}


void JB_Tree_AppendAfter(RingTree* self, RingTree* item, RingTree* after) {
	if (after) {
		(JB_Ring_NextSibSet(after, item));
	}
	 else {
		(JB_Ring_FirstSet(self, item));
	}
}

void JB_Tree_AppendBefore(RingTree* self, RingTree* item, RingTree* Before) {
	if (Before) {
		(JB_Ring_PrevSibSet(Before, item));
	}
	 else {
		(JB_Ring_LastSet(self, item));
	}
}

int JB_Tree_backdist(RingTree* self, RingTree* B) {
	int c = 0;
	while (B) {
		if (self == B) {
			return c;
		}
		B = JB_Ring_PrevSib(B);
		c--;
	};
	return 0;
}

void JB_Tree_Clear(RingTree* self) {
	while (true) {
		RingTree* _tmPf0 = JB_Ring_First(self);
		if ((!_tmPf0)) {
			return;
		}
		JB_Tree_Remove(_tmPf0);
	};
}

void dbglineinfo(RingTree* self) {
	if (JB_Object_Isa(self, JB_AsClass(Message))) {
		SCFile* f = JB_Incr(JB_Msg_SCFile(((Message*)self)));
		FastString* fs = JB_Incr(JB_FS__New());
		JB_FS_AppendString(fs, JB_LUB[1357]);
		JB_FS_AppendInt32(fs, ((Message*)self)->Position);
		if ((f != nil) and JB_Msg_HasPosition(((Message*)self))) {
			JB_String* _tmPf0 = JB_Incr(JB_Str_Range(f->FData, 0, ((Message*)self)->Position));
			int lines = JB_Str_Count(_tmPf0, '\n');
			JB_Decr(_tmPf0);
			JB_FS_AppendString(fs, JB_LUB[1358]);
			JB_FS_AppendInt32(fs, lines + 1);
			JB_FS_AppendByte(fs, ' ');
		}
		JB_Decr(f);
		JB_Obj_PrintLine(fs);
		JB_Decr(fs);
	}
}

int JB_Tree_dist(RingTree* self, RingTree* r) {
	if ((!(((bool)self) and ((bool)r)))) {
		return nil;
	}
	if ((!(JB_Ring_Parent(r) == JB_Ring_Parent(self)))) {
		debugger;
		return nil;
	}
	if (r != self) {
		int _tmP103 = JB_Tree_fwddist(self, r);
		if ((!_tmP103)) {
			_tmP103 = JB_Tree_backdist(self, r);
		}
		return _tmP103;
	}
	return 0;
}

RingTree* JB_Tree_First_(RingTree* self) {
	if (self) {
		return JB_Ring_First(self);
	}
	return nil;
}

RingTree* JB_Tree_FlatLast(RingTree* self) {
	RingTree* rz = nil;
	rz = self;
	while (true) {
		RingTree* _tmPf0 = JB_Ring_Last(rz);
		if ((!_tmPf0)) {
			break;
		}
		rz = _tmPf0;
	};
	return rz;
}

Array* JB_Tree_Flatten(RingTree* self) {
	Array* rz = ((Array*)JB_Array__New0());
	{
		RingTree* c = self;
		RingTree* _afterf1 = JB_Ring_FlatAfter(self);
		while (((bool)c) and (c != _afterf1)) {
			RingTree* _N_f2 = ((RingTree*)JB_Ring_FlatNext0(c));
			JB_Array_SyntaxAppend(rz, c);
			c = _N_f2;
		};
		(self);
	}
	;
	return rz;
}

int JB_Tree_fwddist(RingTree* self, RingTree* F) {
	int c = 0;
	while (F) {
		if (self == F) {
			return c;
		}
		F = JB_Ring_NextSib(F);
		c++;
	};
	return 0;
}

bool JB_Tree_HasOneChild(RingTree* self) {
	return JB_Ring_HasChildCount(self, 1);
}

bool JB_Tree_IsFirst(RingTree* self) {
	return JB_Ring_PrevSib(self) == nil;
}

bool JB_Tree_IsOnlyChild(RingTree* self) {
	if ((!JB_Ring_PrevSib(self))) {
		return (!JB_Ring_NextSib(self));
	}
	return false;
}

__lib__ void jdb2(RingTree* self) {
	//visible;
	if (self) {
		JB_String* _tmPf0 = JB_Incr(JB_Msg_jdb_(((Message*)self), nil, 1));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_PrintLine(JB_LUB[1359]);
	}
}

__lib__ void jdb3(RingTree* self) {
	//visible;
	if (self) {
		JB_String* _tmPf0 = JB_Incr(JB_Msg_jdb_(((Message*)self), nil, 3));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_PrintLine(JB_LUB[1359]);
	}
}

bool JB_Tree_OperatorLessOrEqual(RingTree* self, int N) {
	RingTree* c = JB_Ring_First(self);
	while (c) {
		if ((!(N > 0))) {
			return nil;
		}
		N--;
		c = JB_Ring_NextSib(c);
	};
	return true;
}

RingTree* JB_Tree_Pop(RingTree* self) {
	RingTree* rz = nil;
	JB_SetRef(rz, JB_Ring_Last(self));
	if (rz) {
		JB_Tree_Remove(rz);
	}
	JB_SafeDecr(rz);
	return rz;
}

void JB_Tree_Remove(RingTree* self) {
	(JB_Ring_ParentSet(self, nil));
}

void JB_Tree_RemoveAfter(RingTree* self) {
	while (true) {
		RingTree* x = JB_Ring_NextSib(self);
		if ((!x)) {
			break;
		}
		JB_Tree_Remove(x);
	};
}

JB_String* JB_Tree_Render(RingTree* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendByte(fs, '(');
	{
		RingTree* f = JB_Incr(JB_Tree_First_(self));
		while (f) {
			RingTree* _Nf1 = JB_Incr(((RingTree*)JB_Ring_NextSib(f)));
			JB_FreeIfDead(JB_Object___Render__(f, fs));
			JB_FS_AppendByte(fs, ',');
			JB_FS_AppendByte(fs, ' ');
			JB_SetRef(f, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(f);
		(self);
	}
	;
	JB_FS_AppendByte(fs, ')');
	JB_String* _tmPf2 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

RingTree* JB_Tree_Second(RingTree* self) {
	RingTree* x = JB_Ring_First(self);
	if (x) {
		return JB_Ring_NextSib(x);
	}
	return nil;
}

RingTree* JB_Tree_Get(RingTree* self, int n) {
	RingTree* rz = nil;
	if (self) {
		if (n >= 0) {
			rz = JB_Ring_First(self);
			while (((bool)rz) and ((--n) >= 0)) {
				rz = JB_Ring_NextSib(rz);
			};
		}
		 else {
			rz = JB_Ring_Last(self);
			while (((bool)rz) and ((++n) < 0)) {
				rz = JB_Ring_PrevSib(rz);
			};
		}
	}
	return rz;
}

void JB_Tree_SyntaxAppend(RingTree* self, RingTree* Last) {
	(JB_Ring_LastSet(self, Last));
}

bool JB_Tree_SyntaxEquals(RingTree* self, int n, bool Aware) {
	return JB_Ring_HasChildCount(self, n);
}

void JB_Tree_TakeAllFrom(RingTree* self, RingTree* src) {
	while (JB_Ring_HasChildren(src)) {
		(JB_Ring_FirstSet(self, JB_Ring_Last(src)));
	};
}

RingTree* JB_Tree_Upward(RingTree* self, int n) {
	RingTree* rz = nil;
	rz = self;
	while (((bool)rz) and (n-- >= 1)) {
		rz = JB_Ring_Parent(rz);
	};
	return rz;
}

RingTree* JB_Tree__Alloc() {
	return ((RingTree*)JB_New(RingTree));
}

RingTree* JB_Ring__New0() {
	RingTree* __rz__ = ((RingTree*)JB_Tree__Alloc());
	if (__rz__) {
		JB_Ring_Constructor0(__rz__);
	}
	return __rz__;
}


void JB_sci_Clear(SaverClassInfo* self) {
	if ((!JB_Array_SyntaxCast(self))) {
		return;
	}
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(self)) {
			Saveable* Obj = ((Saveable*)JB_Array_Value(self, _if0));
			JB_Sav_SaveUnMark(Obj);
			_if0++;
		};
	}
	;
	JB_Array_Clear(self);
}

void JB_sci_Constructor(SaverClassInfo* self, JB_Class* Cls, char* Data) {
	JB_Array_Constructor0(self);
	self->NextInfo = nil;
	self->Cls = Cls;
	self->Data = Data;
}

void JB_sci_destructor(SaverClassInfo* self) {
	JB_Decr(self->NextInfo);
	JB_Array_Destructor(self);
}

bool JB_sci_HasData(SaverClassInfo* self) {
	return (self->Data != nil) and ((bool)self->Data[0]);
}

void JB_sci_Output(SaverClassInfo* self, ObjectSaver* Saver) {
	if ((!JB_Array_SyntaxCast(self))) {
		return;
	}
	FastString* D = Saver->Dest;
	JB_FS_AppendByte(D, '\n');
	JB_FS_AppendString(D, JB_Str_LowerCase(JB_Str__FromC(self->Cls->Name)));
	JB_FS_AppendByte(D, ' ');
	if (JB_sci_HasData(self)) {
		JB_FS_AppendByte(D, '(');
		JB_FS_AppendCString(D, ((_cstring)self->Data));
		JB_FS_AppendByte(D, ')');
		JB_FS_AppendByte(D, ' ');
	}
	JB_FS_AppendString(D, JB_LUB[1360]);
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(self)) {
			Saveable* Obj = ((Saveable*)JB_Array_Value(self, _if0));
			JB_FS_AppendByte(D, '\t');
			JB_FS_AppendObjectID(D, Obj);
			JB_FS_AppendByte(D, ':');
			JB_FS_AppendByte(D, '(');
			JB_Sav___SaveWrite__(Obj, Saver);
			JB_FS_RemoveByte(D, ',');
			JB_FS_AppendByte(D, ')');
			JB_FS_AppendByte(D, '\n');
			_if0++;
		};
	}
	;
	JB_FS_AppendByte(D, ')');
	JB_FS_AppendByte(D, '\n');
}

SaverClassInfo* JB_sci__Alloc() {
	return ((SaverClassInfo*)JB_New(SaverClassInfo));
}

SaverClassInfo* JB_sci__New(JB_Class* Cls, char* Data) {
	SaverClassInfo* __rz__ = ((SaverClassInfo*)JB_sci__Alloc());
	if (__rz__) {
		JB_sci_Constructor(__rz__, Cls, Data);
	}
	return __rz__;
}


void SC_SavingTest_constructor(SavingTest* self, int n) {
	JB_Sav_Constructor(self);
	JB_String* _tmPf0 = JB_Incr(JB_int_RenderFS(n, nil));
	JB_String* _tmPf1 = JB_Str_OperatorPlus(JB_LUB[1361], _tmPf0);
	self->Name = JB_Incr(_tmPf1);
	JB_Decr(_tmPf0);
	self->Value = (1000 + n);
}

void SC_SavingTest_destructor(SavingTest* self) {
	JB_Decr(self->Name);
}

void SC_SavingTest_LoadProperties(SavingTest* self, ObjectLoader* Loader) {
	JB_SetRef(self->Name, ((JB_String*)JB_LD_String(Loader)));
	self->Value = ((int)JB_LD_Int(Loader));
	{
		int i = 0;
		while (i < 1) {
			self->ABC[i] = ((int)JB_LD_Int(Loader));
			i++;
		};
	};
}

void SC_SavingTest_SaveWrite(SavingTest* self, ObjectSaver* Saver) {
	JB_Saver_AppendString(Saver, self->Name);
	JB_Saver_AppendInt(Saver, self->Value);
	{
		int i = 0;
		while (i < 1) {
			JB_Saver_AppendInt(Saver, self->ABC[i]);
			i++;
		};
	};
}

SavingTest* SC_SavingTest__Alloc() {
	return ((SavingTest*)JB_New(SavingTest));
}

bool SC_SavingTest__IsEqual(JB_Object* A, JB_Object* B) {
	if ((!(((bool)A) and ((bool)B)))) {
		return (B == A);
	}
	if (JB_Object_FastIsa(A, JB_AsClass(SavingTest))) {
		if (JB_Object_FastIsa(B, JB_AsClass(SavingTest))) {
			return (((SavingTest*)A)->Value == ((SavingTest*)B)->Value) and ((JB_Str_Equals(((SavingTest*)A)->Name, ((SavingTest*)B)->Name, false)));
		}
	}
	return false;
}

SavingTest* SC_SavingTest__New(int n) {
	SavingTest* __rz__ = ((SavingTest*)SC_SavingTest__Alloc());
	if (__rz__) {
		SC_SavingTest_constructor(__rz__, n);
	}
	return __rz__;
}


void SC_Base_Addtotable(SCBase* self, Array* r) {
	JB_Array_SyntaxAppend(r, self);
	self->TableId = JB_Array_Size(r);
}

JB_String* SC_Base_AutoCompleteName(SCBase* self) {
	if (JB_Object_FastIsa(self, JB_AsClass(SCModule))) {
		return JB_LUB[617];
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCClass))) {
		if (((SCClass*)self)->IsDataType) {
			return JB_LUB[803];
		}
		if (((SCClass*)self)->IsStruct) {
			return JB_LUB[802];
		}
		if (SC_Class_IsObject(((SCClass*)self))) {
			return JB_LUB[794];
		}
		if (((SCClass*)self)->FuncProto) {
			return JB_LUB[1362];
		}
	}
	return JB_LUB[6];
}

SCClass* SC_Base_CodeCls(SCBase* self) {
	SCBase* s = self;
	while (s) {
		if (JB_Object_FastIsa(s, JB_AsClass(SCModule))) {
			if (((SCModule*)s)->Cls) {
				return ((SCModule*)s)->Cls;
			}
		}
		s = s->Lookup;
	};
	return nil;
}

void SC_Base_Collect(SCBase* self, Message* AST, bool Visible, Message* dest) {
	if ((!(self->Source))) {
		JB_SetRef(self->Source, AST);
	}
	Array* r = JB_Incr(JB_Msg_ListAll(AST));
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(r)) {
			Message* c = JB_Incr(((Message*)JB_Array_Value(r, _if0)));
			SC_Base_CollectOne(self, c, Visible);
			JB_Decr(c);
			_if0++;
		};
	}
	;
	if ((!dest)) {
		JB_Decr(r);
		return;
	}
	{
		int _if2 = 0;
		while (_if2 < JB_Array_Size(r)) {
			Message* c = JB_Incr(((Message*)JB_Array_Value(r, _if2)));
			if (JB_FreeIfDead(((Message*)JB_Ring_Parent(c))) == AST) {
				JB_Tree_SyntaxAppend(dest, c);
			}
			JB_Decr(c);
			_if2++;
		};
	}
	;
	JB_Decr(r);
}

void SC_Base_CollectConstants(SCBase* self, Message* src, SCImport* imp) {
	JB_Incr(src);
	if ((!imp)) {
		JB_Decr(src);
		return;
	}
	SC_Imp_Use(imp);
	if ((!(src))) {
		JB_SetRef(src, self->Source);
	}
	SC__Base_ConstantsLoadingOverride = true;
	{
		Message* ch = JB_Incr(((Message*)JB_Tree_First_(src)));
		while (ch) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
			if ((JB_Msg_OperatorIsTmp(ch, JB_LUB[809])) or (JB_Msg_OperatorIsTmp(ch, JB_LUB[447]))) {
				SC_Base_CollectConstantsSub(self, ch, imp);
			}
			JB_SetRef(ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(ch);
		(src);
	}
	;
	JB_Decr(src);
	SC__Base_ConstantsLoadingOverride = false;
}

void SC_Base_CollectConstantsSub(SCBase* self, Message* ch, SCImport* imp) {
	Message* FuncName = JB_Incr(JB_Msg_NeedSyx(ch, ((Syntax)nil)));
	if ((!FuncName)) {
		JB_Decr(FuncName);
		return;
	}
	Message* arg = JB_Incr(((Message*)JB_Tree_Get(ch, -1)));
	Message* vs = JB_Incr(FuncName);
	if (JB_Msg_EqualsSyx(FuncName, JB_SyxThg, false)) {
		JB_SetRef(vs, ((Message*)JB_Ring_NextSib(FuncName)));
	}
	 else {
		JB_SetRef(FuncName, nil);
	}
	if ((!(arg == vs))) {
		JB_Msg_SyntaxExpect(vs, nil);
		JB_Decr(FuncName);
		JB_Decr(arg);
		JB_Decr(vs);
		return;
	}
	JB_Decr(vs);
	if ((!((JB_Msg_EqualsSyx(arg, JB_SyxArg, false)) or (JB_Msg_EqualsSyx(arg, JB_SyxList, false))))) {
		JB_Msg_SyntaxExpect(arg, nil);
		JB_Decr(FuncName);
		JB_Decr(arg);
		return;
	}
	uint64 NextNum = 0 + ((JB_Msg_SyntaxEquals(ch, JB_LUB[447], false)));
	uint64 StartNum = NextNum;
	uint64 LastFlag = 0;
	Array* FixLater = JB_Incr(JB_Array__New0());
	Array* NameList = JB_Incr(JB_Array__New0());
	SCDecl* CurrType = nil;
	{
		Message* line = JB_Incr(((Message*)JB_Tree_First_(arg)));
		while (line) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(line)));
			if ((((JB_Msg_EqualsSyx(line, JB_SyxRel, false))) and ((({
				Message* _tmP275 = JB_Incr(((Message*)JB_Ring_First(line)));
				bool _tmP274 = JB_Msg_EqualsSyx(_tmP275, JB_SyxList, false);
				JB_Decr(_tmP275);
				 _tmP274;
			})))) or ((({
				Message* _tmP277 = JB_Incr(((Message*)JB_Ring_Last(line)));
				bool _tmP276 = JB_Msg_EqualsSyx(_tmP277, JB_SyxList, false);
				JB_Decr(_tmP277);
				 _tmP276;
			})))) {
				SC_Base_ConstantExpand(self, line);
			}
			 else if (JB_Msg_EqualsSyx(line, JB_SyxTmp, false)) {
				if (JB_Ring_HasChildren(line)) {
					JB_Msg_SyntaxExpect(line, nil);
					JB_Decr(FuncName);
					JB_Decr(arg);
					JB_Decr(FixLater);
					JB_Decr(NameList);
					JB_Decr(CurrType);
					JB_Decr(line);
					JB_Decr(_Nf1);
					return;
				}
				line->Func = JB_SyxThg;
			}
			JB_SetRef(line, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(line);
		(arg);
	}
	;
	{
		Message* Line = JB_Incr(((Message*)JB_Tree_First_(arg)));
		while (Line) {
			Message* _Nf3 = JB_Incr(((Message*)JB_Ring_NextSib(Line)));
			if (JB_Msg_EqualsSyx(Line, JB_SyxDecl, false)) {
				Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_First(Line)));
				JB_SetRef(CurrType, SC_ExtractDecl(_tmPf6, self));
				JB_Decr(_tmPf6);
				if ((!CurrType)) {
					JB_Msg_SyntaxExpect(Line, nil);
					JB_Decr(FuncName);
					JB_Decr(arg);
					JB_Decr(FixLater);
					JB_Decr(NameList);
					JB_Decr(CurrType);
					JB_Decr(Line);
					JB_Decr(_Nf3);
					return;
				}
				JB_Tree_Remove(Line);
				JB_SetRef(Line, _Nf3);
				JB_Decr(_Nf3);
				continue;
			}
			SCDecl* NewItem = JB_Incr(SC_Decl__New());
			SC_Decl_SyntaxAppend(NewItem, kSC__SCDeclInfo_const);
			if (JB_Msg_SyntaxEquals(Line, JB_LUB[526], false)) {
				NextNum = StartNum;
				JB_SetRef(Line, _Nf3);
				JB_Decr(_Nf3);
				JB_Decr(NewItem);
				continue;
			}
			 else if (JB_Msg_EqualsSyx(Line, JB_SyxThg, false)) {
				//using;
				MessagePosition _using172 = JB_Msg_SyntaxUsing(Line);
				Message* NewNum = JB_Incr(SC_NewDeclNum(NewItem, NextNum, Line->Name));
				JB_SetRef(NewItem->Source, Line);
				if (JB_Msg_SyntaxEquals(ch, JB_LUB[447], false)) {
					LastFlag++;
					NextNum = (NextNum << 1);
				}
				 else {
					NextNum++;
				}
				if (CurrType) {
					SC_Decl_ConstCheck(CurrType, nil, NewNum, CurrType);
					SC_Decl_CopyTypeInfoTo(CurrType, NewItem);
				}
				JB_Decr(NewNum);
				JB_MsgPos_SyntaxUsingComplete((&_using172));
				JB_MsgPos_Destructor((&_using172));
			}
			 else {
				if ((!(JB_Msg_Expect(Line, JB_SyxRel, nil) and ({
					Message* _tmP279 = JB_Incr(JB_Msg_NeedSyxInt(Line, JB_SyxOpp, 1));
					bool _tmP278 = JB_Msg_Expect(_tmP279, JB_SyxOpp, JB_LUB[541]);
					JB_Decr(_tmP279);
					 _tmP278;
				})))) {
					JB_Decr(FuncName);
					JB_Decr(arg);
					JB_Decr(FixLater);
					JB_Decr(NameList);
					JB_Decr(CurrType);
					JB_Decr(Line);
					JB_Decr(_Nf3);
					JB_Decr(NewItem);
					return;
				}
				Message* ValueNode = JB_Incr(((Message*)JB_Tree_Get(Line, 2)));
				if ((!ValueNode)) {
					JB_Msg_SyntaxExpect(Line, nil);
					JB_Decr(FuncName);
					JB_Decr(arg);
					JB_Decr(FixLater);
					JB_Decr(NameList);
					JB_Decr(CurrType);
					JB_Decr(Line);
					JB_Decr(_Nf3);
					JB_Decr(NewItem);
					JB_Decr(ValueNode);
					return;
				}
				Message* thg = JB_Incr(JB_Msg_NeedSyx(Line, JB_SyxThg));
				if ((!thg)) {
					JB_Decr(FuncName);
					JB_Decr(arg);
					JB_Decr(FixLater);
					JB_Decr(NameList);
					JB_Decr(CurrType);
					JB_Decr(Line);
					JB_Decr(_Nf3);
					JB_Decr(NewItem);
					JB_Decr(ValueNode);
					JB_Decr(thg);
					return;
				}
				SCDecl* OMGType = JB_Incr(SC_TypeOfExpr(ValueNode, self, nil));
				if ((!OMGType)) {
					JB_Decr(FuncName);
					JB_Decr(arg);
					JB_Decr(FixLater);
					JB_Decr(NameList);
					JB_Decr(CurrType);
					JB_Decr(Line);
					JB_Decr(_Nf3);
					JB_Decr(NewItem);
					JB_Decr(ValueNode);
					JB_Decr(thg);
					JB_Decr(OMGType);
					return;
				}
				SCDecl* NewType = JB_Incr(CurrType);
				if ((!NewType)) {
					JB_SetRef(NewType, OMGType);
				}
				if ((!(NewType))) {
					JB_Msg_SyntaxExpect(Line, nil);
					JB_Decr(FuncName);
					JB_Decr(arg);
					JB_Decr(FixLater);
					JB_Decr(NameList);
					JB_Decr(CurrType);
					JB_Decr(Line);
					JB_Decr(_Nf3);
					JB_Decr(NewItem);
					JB_Decr(ValueNode);
					JB_Decr(thg);
					JB_Decr(OMGType);
					JB_Decr(NewType);
					return;
				}
				if (JB_Msg_EqualsSyx(ValueNode, JB_SyxStr, false)) {
					SC_Func__ObjectifyString(ValueNode);
					JB_SetRef(ValueNode->Obj, JB_TypeString->TypeNormal);
				}
				 else if ((JB_Msg_isint(ValueNode)) or ((JB_Msg_EqualsSyx(ValueNode, JB_SyxUnit, false)))) {
					SC_Decl_ConstCheck(NewType, nil, ValueNode, OMGType);
					NextNum = (JB_Msg_Int(ValueNode, 0) + 1);
				}
				JB_Decr(OMGType);
				JB_Array_SyntaxAppend(FixLater, NewItem);
				SC_Decl_CopyTypeInfoTo(NewType, NewItem);
				JB_Decr(NewType);
				JB_SetRef(NewItem->Name, thg->Name);
				JB_SetRef(NewItem->Default, ValueNode);
				JB_Decr(ValueNode);
				JB_SetRef(NewItem->Source, thg);
				JB_Decr(thg);
			}
			JB_Array_SyntaxAppend(NameList, NewItem->Source);
			SC_Base_TryAdd(self, Line, NewItem, NewItem->Name);
			JB_Decr(NewItem);
			JB_SetRef(Line, _Nf3);
			JB_Decr(_Nf3);
		};
		JB_Decr(Line);
		(arg);
	}
	;
	JB_Decr(CurrType);
	JB_Decr(arg);
	if (JB_Msg_SyntaxEquals(ch, JB_LUB[447], false)) {
		SCDecl* NewItem = JB_Incr(SC_Decl__New());
		SC_Decl_SyntaxAppend(NewItem, kSC__SCDeclInfo_const);
		JB_String* s = JB_Incr(((JB_String*)JB_Ternary(((bool)FuncName), FuncName->Name, JB_LUB[1363])));
		JB_String* _tmPf7 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1364], s));
		JB_Decr(s);
		JB_FreeIfDead(SC_NewDeclNum(NewItem, JB_int_bits(((int)LastFlag)), _tmPf7));
		JB_Decr(_tmPf7);
		SC_Base_TryAdd(self, ch, NewItem, NewItem->Name);
		JB_Decr(NewItem);
	}
	{
		int _if4 = 0;
		while (_if4 < JB_Array_Size(FixLater)) {
			SCDecl* D = JB_Incr(((SCDecl*)JB_Array_Value(FixLater, _if4)));
			SC_Base_Tran_Const(self, D, self);
			JB_Decr(D);
			_if4++;
		};
	}
	;
	JB_Decr(FixLater);
	if (FuncName) {
		SC_Base_CreateNameDict(self, FuncName, NameList);
	}
	JB_Decr(NameList);
	JB_Decr(FuncName);
}

void SC_Base_CollectOne(SCBase* self, Message* c, bool Visible) {
	if (JB_Msg_OperatorIsTmp(c, JB_LUB[830])) {
		SC_Base_LoadVisibility(self, c);
		JB_Tree_Remove(c);
		return;
	}
	bool Old = SC__Base_CurrVisibility;
	SC__Base_CurrVisibility = Visible;
	if ((!JB_FreeIfDead(SC_Base_CollectSub(self, c))) and (JB_Object_FastIsa(self, JB_AsClass(SCModule)))) {
		SC_Mod_MoveToInitFunc(((SCModule*)self), c);
	}
	SC__Base_CurrVisibility = Old;
}

Message* SC_Base_CollectString(SCBase* self, JB_String* s) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Str_ParseClean(s));
	SC_Base_Collect(self, rz, false, nil);
	JB_SafeDecr(rz);
	return rz;
}

SCBase* SC_Base_CollectSub(SCBase* self, Message* c) {
	Dictionary* T = JB_Incr(JB_ClsCollectTable);
	if (self == SC__Comp_program) {
		JB_SetRef(T, JB_RootCollectTable);
	}
	if ((!JB_Msg_EqualsSyx(c, JB_SyxTmp, false))) {
		if (JB_Object_FastIsa(self, JB_AsClass(SCClass))) {
			JB_Msg_Expect(c, JB_SyxDecl, nil);
		}
		JB_Decr(T);
		return nil;
	}
	DTWrap* _tmPf0 = JB_Incr(((DTWrap*)JB_Dict_ValueStr(T, c->Name)));
	JB_Decr(T);
	CollectFunc FnInt = ((CollectFunc)JB_Wrap_Value(_tmPf0));
	JB_Decr(_tmPf0);
	if ((!FnInt)) {
		JB_Msg_SyntaxExpect(c, nil);
		return nil;
	}
	SCBase* base = JB_Incr((FnInt)(c, self, c));
	if ((!base)) {
		JB_Decr(base);
		return nil;
	}
	if (base != SC__Comp_program) {
		SC_Base_TryAdd(self, c, base, base->Name);
	}
	JB_SafeDecr(base);
	return base;
}

void SC_Base_ConstantExpand(SCBase* self, Message* ch) {
	Message* L = JB_Incr(((Message*)JB_Ring_First(ch)));
	Message* op = JB_Incr(((Message*)JB_Ring_NextSib(L)));
	Message* R = JB_Incr(((Message*)JB_Ring_NextSib(op)));
	if ((!(((JB_Msg_SyntaxEquals(op, JB_LUB[541], false))) and ((JB_Msg_EqualsSyx(L, JB_SyxThg, false)))))) {
		JB_Msg_SyntaxExpect(op, JB_LUB[1365]);
		JB_Decr(L);
		JB_Decr(op);
		JB_Decr(R);
		return;
	}
	JB_Decr(op);
	Message* Rel = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
	JB_Tree_SyntaxAppend(Rel, L);
	JB_Decr(L);
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[541]));
	JB_Tree_SyntaxAppend(Rel, (_tmPf0));
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(JB_Msg_ConstantExpandSub(R));
	JB_Tree_SyntaxAppend(Rel, _tmPf1);
	JB_Decr(_tmPf1);
	(JB_Ring_NextSibSet(ch, Rel));
	JB_Decr(Rel);
	JB_Msg_MoveAllAfter(R, ch);
	JB_Decr(R);
	JB_Tree_Remove(ch);
}

void SC_Base_Constructor0(SCBase* self) {
	SC_SCObject_Constructor(self);
	self->BaseInfo = 0;
	self->Access = nil;
	JB_String* _tmPf0 = JB_LUB[0];
	self->ExportName = JB_Incr(_tmPf0);
	self->Lookup = nil;
	self->CurrReacher = nil;
	self->Project = SC__Imp_Curr;
	(SC_Base_IsVisibleSet(self, SC__Base_CurrVisibility));
}

void SC_Base_ConstructorStr(SCBase* self, JB_String* Name, bool Dummy) {
	SC_SCObject_Constructor(self);
	self->BaseInfo = 0;
	self->Access = nil;
	JB_String* _tmPf0 = JB_LUB[0];
	self->ExportName = JB_Incr(_tmPf0);
	self->Lookup = nil;
	self->CurrReacher = nil;
	self->Project = nil;
	self->Name = JB_Incr(Name);
}

void SC_Base_ConstructorMsg(SCBase* self, Message* node) {
	SC_SCObject_Constructor(self);
	self->BaseInfo = 0;
	self->Access = nil;
	JB_String* _tmPf0 = JB_LUB[0];
	self->ExportName = JB_Incr(_tmPf0);
	self->Lookup = nil;
	self->CurrReacher = nil;
	self->Source = JB_Incr(node);
	(SC_Base_IsVisibleSet(self, SC__Base_CurrVisibility));
	self->Project = SC__Imp_Curr;
}

void SC_Base_CreateNameDict(SCBase* self, Message* FuncName, Array* NameList) {
	if ((!(JB_Msg_EqualsSyx(FuncName, JB_SyxThg, false)))) {
		JB_Msg_SyntaxExpect(FuncName, JB_LUB[1366]);
		return;
	}
	JB_String* AllSameType = JB_Incr(JB_LUB[0]);
	{
		int _if4 = 0;
		while (_if4 < JB_Array_Size(NameList)) {
			Message* n = JB_Incr(((Message*)JB_Array_Value(NameList, _if4)));
			SCDecl* Type = JB_Incr(SC_TypeOfExpr(n, self, nil));
			if ((!Type)) {
				JB_Decr(AllSameType);
				JB_Decr(n);
				JB_Decr(Type);
				return;
			}
			if ((!SC_Decl_IsNormal(Type))) {
				JB_Msg_SyntaxExpect(n, JB_LUB[1367]);
				JB_Decr(AllSameType);
				JB_Decr(n);
				JB_Decr(Type);
				return;
			}
			JB_Decr(n);
			JB_String* NewType = JB_Incr(Type->Type->Name);
			JB_Decr(Type);
			if ((JB_Str_Equals(AllSameType, NewType, false)) or (JB_Str_Equals(AllSameType, JB_LUB[0], false))) {
				JB_SetRef(AllSameType, NewType);
			}
			 else {
				JB_SetRef(AllSameType, JB_LUB[137]);
			}
			JB_Decr(NewType);
			_if4++;
		};
	}
	;
	if ((!(JB_Str_Exists(AllSameType)))) {
		JB_SetRef(AllSameType, JB_LUB[137]);
	}
	JB_String* Name = JB_Incr(FuncName->Name);
	FastString* fs = JB_Incr(JB_FS__New());
	//;
	JB_FS_AppendString(fs, JB_LUB[1368]);
	JB_FS_AppendString(fs, Name);
	JB_FS_AppendString(fs, JB_LUB[1369]);
	JB_FS_AppendString(fs, AllSameType);
	JB_FS_AppendString(fs, JB_LUB[1370]);
	JB_FS_AppendString(fs, Name);
	JB_FS_AppendString(fs, JB_LUB[1371]);
	JB_FS_AppendString(fs, Name);
	JB_FS_AppendString(fs, JB_LUB[1372]);
	//;
	{
		int _if6 = 0;
		while (_if6 < JB_Array_Size(NameList)) {
			Message* s = JB_Incr(((Message*)JB_Array_Value(NameList, _if6)));
			JB_FS_AppendMultiByte(fs, '\t', 2);
			JB_FS_AppendString(fs, Name);
			JB_FS_AppendString(fs, JB_LUB[1373]);
			JB_String* _tmPf8 = JB_Incr(JB_Str_LowerCase(s->Name));
			JB_FS_AppendString(fs, _tmPf8);
			JB_Decr(_tmPf8);
			JB_FS_AppendString(fs, JB_LUB[1374]);
			JB_FS_SyntaxAppend(fs, s);
			JB_Decr(s);
			JB_FS_AppendString(fs, JB_LUB[636]);
			_if6++;
		};
	}
	;
	//;
	JB_FS_AppendString(fs, JB_LUB[1375]);
	JB_FS_AppendString(fs, Name);
	JB_FS_AppendString(fs, JB_LUB[1376]);
	//;
	JB_String* FuncSrc = JB_Incr(JB_FS_GetResult(fs));
	JB_Decr(fs);
	Message* _tmPf9 = JB_Incr(JB_Str_ParseClean(FuncSrc));
	JB_Decr(FuncSrc);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Tree_Get(_tmPf9, 0)));
	JB_Decr(_tmPf9);
	if ((!_tmPf0)) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(AllSameType);
		JB_Decr(Name);
		JB_Decr(_tmPf0);
		return;
	}
	JB_FreeIfDead(SC_Base_CollectSub(self, _tmPf0));
	JB_Decr(_tmPf0);
	FastString* _fsf3 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf3, JB_LUB[1377]);
	JB_FS_AppendString(_fsf3, AllSameType);
	JB_Decr(AllSameType);
	JB_FS_AppendString(_fsf3, JB_LUB[1378]);
	JB_FS_AppendString(_fsf3, Name);
	JB_Decr(Name);
	JB_FS_AppendString(_fsf3, JB_LUB[1379]);
	JB_String* DclSrc = JB_Incr(JB_FS_GetResult(_fsf3));
	JB_Decr(_fsf3);
	Message* DclMsg = JB_Incr(JB_Str_ParseClean(DclSrc));
	JB_Decr(DclSrc);
	JB_FreeIfDead(SC_CollectDecls(DclMsg, self, self, 0));
	JB_Decr(DclMsg);
}

void SC_Base_destructor(SCBase* self) {
	JB_Decr(self->Access);
	JB_Decr(self->ExportName);
	SC_SCObject_destructor(self);
}

Message* SC_Base_DiissplayObj(SCBase* self, Message* rz) {
	JB_String* _tmPf1 = JB_Incr(SC_Base_AutoCompleteName(self));
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[170], self->Name));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(_tmPf1, _tmPf2));
	JB_Decr(_tmPf2);
	JB_Decr(_tmPf1);
	JB_FreeIfDead(JB_Syx_ParentMsg(JB_SyxEmb, rz, _tmPf0));
	JB_Decr(_tmPf0);
	return rz;
}

void SC_Base_DoLinkFrom(SCBase* self, SCBase* B) {
	if ((!SC__AC_ShouldEnter)) {
		return;
	}
	SC_Base_StoreLinkToMe(B, (&self->LinkFrom));
}

Message* SC_Base_FindCppWrapper(SCBase* self, Message* place, bool isclass) {
	if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
		Message* pl = JB_Incr(SC_Func_FindCppWrapperFunc(((SCFunction*)self), place));
		if (pl) {
			Message* _tmPf0 = JB_Incr(JB_Msg_FindAndRemove2(place, pl, true, false));
			JB_Decr(pl);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(pl);
	}
	return JB_Msg_FindAndRemoveSub(place, JB_LUB[786], true, isclass);
}

bool SC_Base_FindVis(SCBase* self, Message* c) {
	if ((!c)) {
		return true;
	}
	if (JB_Msg_EqualsSyx(c, JB_SyxThg, false)) {
		return JB_Msg_TrueOrFalse(c);
	}
	if (JB_Msg_EqualsSyx(c, JB_SyxAdj, false)) {
		Message* first = JB_Incr(JB_Msg_NeedSyx(c, JB_SyxThg));
		JB_Msg_Expect(first, JB_SyxThg, JB_LUB[794]);
		JB_Decr(first);
		Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyxInt(c, JB_SyxThg, 1));
		JB_String* name = JB_Incr(JB_Msg_Nyme(_tmPf0));
		JB_Decr(_tmPf0);
		SCClass* cls = JB_Incr(SC_Comp__FindClassOK(name));
		JB_Decr(name);
		bool _tmPf1 = ((bool)cls) and (!cls->Banned);
		JB_Decr(cls);
		return _tmPf1;
	}
	if ((!false)) {
		JB_Msg_SyntaxExpect(c, nil);
	}
	return false;
}

Message* SC_Base_FuncSrc(SCBase* self) {
	SCFunction* _tmPf0 = JB_Incr(SC_Base_OwningFunc(self));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	Message* _tmPf1 = JB_Incr(_tmPf0->Source);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCModule* SC_Base_GetAsModule(SCBase* self, Message* errplace) {
	if (JB_Object_FastIsa(self, JB_AsClass(SCModule))) {
		return ((SCModule*)self);
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCClass))) {
		return ((SCClass*)self)->Modul;
	}
	if ((!false)) {
		JB_Msg_SyntaxExpect(errplace, JB_LUB[1380]);
	}
	return nil;
}

void SC_Base_ImportFile(SCBase* self, SCFile* file) {
	Message* AST = JB_Incr(SC_SCFile_AST(file));
	if ((!AST)) {
		JB_Decr(AST);
		return;
	}
	SC__Base_CurrVisibility = false;
	SC_SCFile_Use(file);
	SC_Base_Collect(SC__Comp_program, AST, false, nil);
	JB_Decr(AST);
}

bool SC_Base_IsClassFunc(SCBase* self) {
	return (!SC_Base_IsModuleFunc(self));
}

bool SC_Base_IsModuleFunc(SCBase* self) {
	if (JB_Object_FastIsa(self, JB_AsClass(SCArg))) {
		return (!((SCArg*)self)->IsClassArg);
	}
	return (JB_Object_Isa(self, JB_AsClass(SCModule)));
}

SCClass* SC_Base_IsNormalObject(SCBase* self) {
	if (JB_Object_FastIsa(self, JB_AsClass(SCClass))) {
		if (SC_Class_IsObject(((SCClass*)self))) {
			return ((SCClass*)self);
		}
	}
	 else if (JB_Object_FastIsa(self, JB_AsClass(SCDecl))) {
		if (SC_Class_IsObject(((SCDecl*)self)->Type)) {
			JB_DoAt(1);
		}
	}
	return nil;
}

bool SC_Base_IsSTDLib(SCBase* self) {
	return ({
		SCImport* __INSID109 = self->Project;
		 ((bool)JB_Ternary(((bool)__INSID109), __INSID109->IsSTDLib, nil));
	});
}

bool SC_Base_IsVisible(SCBase* self) {
	return SC_Base_SyntaxIs(self, kSC__SCBaseInfo_visible);
}

void SC_Base_IsVisibleSet(SCBase* self, bool Value) {
	((SC_Base_SyntaxIsSet(self, kSC__SCBaseInfo_visible, Value)));
}

JB_String* SC_Base_LateAddTempory(SCBase* self, JB_String* type, JB_String* name1, Message* Value, Message* err) {
	JB_String* name = JB_Incr(SC_UniqueTmpVar(SC__Comp_program, name1));
	JB_FreeIfDead(SC_TypeOfExpr(Value, self, nil));
	Message* msg = JB_Incr(SC_MakeDecl(type, name, Value));
	SCDecl* D = JB_Incr(SC_TypeOfExpr(msg, self, nil));
	if ((!D)) {
		JB_Decr(name);
		JB_Decr(msg);
		JB_Decr(D);
		return nil;
	}
	((SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_const, false)));
	JB_Tree_SyntaxAppend(self->Source, msg);
	JB_Decr(msg);
	SC_Base_TryAdd(self, err, D, name);
	JB_Decr(D);
	JB_SafeDecr(name);
	return name;
}

Message* SC_Base_LinkagePlace(SCBase* self) {
	Message* Place = JB_Incr(SC_Base_SourceArg(self));
	Message* Link = JB_Incr(JB_Msg_FindFlat(Place, JB_SyxTmp, JB_LUB[820], false));
	Message* _tmP110 = JB_Incr(JB_Msg_NeedSyx(Link, JB_SyxArg));
	JB_Decr(Link);
	if ((!_tmP110)) {
		JB_SetRef(_tmP110, Place);
	}
	JB_Decr(Place);
	JB_SafeDecr(_tmP110);
	return _tmP110;
}

Array* SC_Base_ListFunctions(SCBase* self) {
	Array* rz = JB_Incr(((Array*)JB_Array__New0()));
	if ((!self->Access)) {
		JB_Decr(rz);
		return nil;
	}
	{
		Dictionary* _LoopSrcf1 = JB_Incr(self->Access);
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf1));
		JB_Decr(_LoopSrcf1);
		while (JB_Nav_MoveNext(_navf0)) {
			SCObject* o = JB_Incr(((SCObject*)JB_Nav_Value(_navf0)));
			SC_ListFunctionsSub(o, rz);
			JB_Decr(o);
		};
		JB_Decr(_navf0);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

void SC_Base_LoadExportName(SCBase* self) {
	if (JB_Str_Exists(self->ExportName)) {
		return;
	}
	Message* place = JB_Incr(SC_Base_LinkagePlace(self));
	bool IsClass = (JB_Object_Isa(self, JB_AsClass(SCClass)));
	Message* CW = JB_Incr(SC_Base_FindCppWrapper(self, place, IsClass));
	JB_String* CppName = JB_Incr(JB_Msg_FindAndRemove(place, JB_LUB[569], false, IsClass));
	JB_String* CppPart = JB_Incr(JB_Msg_FindAndRemove(place, JB_LUB[808], false, IsClass));
	if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
		if ((!(((SCFunction*)self)->IsCppInBuilt))) {
			((SCFunction*)self)->IsCppInBuilt = ((int)((JB_Msg_EqualsSyx(CW, JB_SyxBra, false))));
		}
		JB_String* CppWrapper = JB_Incr(JB_Msg_cpp_wrapper(CW));
		if ((!((!SC_Func_UseExportNameConstructor(((SCFunction*)self), CppPart, CppWrapper)) and ((!SC_Func_UseExportWrapper(((SCFunction*)self), CppWrapper)) and ((!SC_Func_UseCppName(((SCFunction*)self), CppName)) and (!JB_Str_Exists(((SCFunction*)self)->Disabled))))))) {
			JB_Decr(place);
			JB_Decr(CW);
			JB_Decr(CppName);
			JB_Decr(CppPart);
			JB_Decr(CppWrapper);
			return;
		}
		JB_Decr(CppWrapper);
		JB_SetRef(CppName, SC_Func_ExportNameBuilder(((SCFunction*)self), CppPart));
		((SCFunction*)self)->IsWrapper = ((bool)CW);
	}
	 else {
		if ((!(JB_Str_Exists(CppPart)))) {
			JB_SetRef(CppPart, self->Name);
		}
		if ((!(JB_Str_Exists(CppName)))) {
			JB_SetRef(CppName, CppPart);
		}
		if (JB_Object_FastIsa(self, JB_AsClass(SCModule))) {
			JB_SetRef(((SCModule*)self)->CppPart, CppPart);
		}
		 else if (JB_Object_FastIsa(self, JB_AsClass(SCClass))) {
			JB_SetRef(((SCClass*)self)->Modul->CppPart, CppPart);
			JB_String* e = JB_Incr(JB_Msg_FindAndRemove(place, JB_LUB[824], false, true));
			if (JB_Str_Exists(e)) {
				JB_SetRef(((SCClass*)self)->CppClass, JB_Str_unicodesafename(e));
			}
			JB_Decr(e);
			JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(CppPart, JB_LUB[568]));
			SC_Base_SetExportName(((SCClass*)self)->Modul, _tmPf0, false);
			JB_Decr(_tmPf0);
		}
	}
	JB_Decr(CppPart);
	JB_Decr(CW);
	JB_Decr(place);
	SC_Base_SetExportName(self, CppName, false);
	JB_Decr(CppName);
}

void SC_Base_LoadVisibility(SCBase* self, Message* p) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(p)));
	SC__Base_CurrVisibility = SC_Base_FindVis(self, _tmPf0);
	JB_Decr(_tmPf0);
	(SC_Base_IsVisibleSet(self, SC__Base_CurrVisibility));
	SC_SC_MakeComment(p);
}

JB_Object* SC_Base_LookUpDot(SCBase* self, JB_String* name, Message* exp, SCBase* arg_space, SCDecl* contains, Message* side) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(exp)));
	SCObject* _tmPf1 = JB_Incr(SC_Base_LookUpSub(self, name, exp, _tmPf0, arg_space, contains, side, kSC__Base_PurposeDot));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCObject* SC_Base_LookUpFunc(SCBase* self, JB_String* name, Message* exp, Message* ParamsHere) {
	if ((!(ParamsHere))) {
		JB_Object_SyntaxExpect(nil);
		return nil;
	}
	return SC_Base_LookUpSub(self, name, exp, ParamsHere, self, nil, nil, kSC__Base_PurposeFunc);
}

SCObject* SC_Base_LookUpSub(SCBase* self, JB_String* OrigName, Message* Exp, Message* ParamsHere, SCBase* arg_space, SCDecl* contains, Message* side, int Purpose) {
	JB_String* name = JB_Incr(JB_Str_LowerCase(OrigName));
	SCParamArray* ParamsArray = JB_Incr(SC_PA__New(Exp, nil));
	SCBase* Curr = JB_Incr(SC_PA_DetectDotSuper(ParamsArray, self));
	SC_PA_PreReadTypes(ParamsArray, arg_space, ParamsHere, side);
	bool CanFunction = ((bool)ParamsHere) and ((!ParamsArray->IsAddress));
	SCFunction* Missing = nil;
	SCFunction* f = nil;
	if (ParamsArray->IsSuper and (JB_Str_Equals(name, JB_LUB[618], false))) {
		Message* Prev = JB_Incr(((Message*)JB_Ring_PrevSib(Exp)));
		if (Prev) {
			JB_Msg_SyntaxExpect(Prev, JB_LUB[1381]);
			JB_Decr(name);
			JB_Decr(ParamsArray);
			JB_Decr(Curr);
			JB_Decr(Missing);
			JB_Decr(f);
			JB_Decr(Prev);
			return nil;
		}
		JB_Decr(Prev);
	}
	{
		SCBase* b = JB_Incr(Curr);
		while (b) {
			if ((ParamsArray->IsDot) and ((SC_PA_IsModule(ParamsArray)) and (b == SC__Comp_program))) {
				break;
			}
			SCObject* o = JB_Incr(SC_Base_SyntaxAccess(b, name));
			if ((!o)) {
				JB_SetRef(b, b->Lookup);
				JB_Decr(o);
				continue;
			}
			if (JB_Object_FastIsa(o, JB_AsClass(SCDecl))) {
				///struct question/;
				if ((!(ParamsArray->IsAssigns and (((bool)((SCDecl*)o)->Setter) and (JB_FreeIfDead(SC_Base_CodeCls(arg_space)) != Curr))))) {
					SCDecl* dcl = JB_Incr(((SCDecl*)o));
					if ((!(dcl->Type))) {
						JB_Decr(name);
						JB_Decr(ParamsArray);
						JB_Decr(Curr);
						JB_Decr(Missing);
						JB_Decr(f);
						JB_Decr(b);
						JB_Decr(o);
						SCDecl* _tmPf8 = JB_Incr(((SCDecl*)JB_Ternary(SC_Decl_isnil(dcl), dcl, nil)));
						JB_Decr(dcl);
						JB_SafeDecr(_tmPf8);
						return _tmPf8;
					}
					if (dcl->Type->FuncProto) {
						if ((!((ParamsArray->IsDot or (!ParamsHere)) and ((!SC_PA_SyntaxCast(ParamsArray)))))) {
							JB_Msg_SyntaxExpect(Exp, JB_LUB[1382]);
							JB_Decr(name);
							JB_Decr(ParamsArray);
							JB_Decr(Curr);
							JB_Decr(Missing);
							JB_Decr(f);
							JB_Decr(b);
							JB_Decr(o);
							JB_Decr(dcl);
							return nil;
						}
						JB_Decr(name);
						JB_Decr(ParamsArray);
						JB_Decr(Curr);
						JB_Decr(Missing);
						JB_Decr(f);
						JB_Decr(b);
						JB_Decr(dcl);
						JB_SafeDecr(o);
						return ((SCDecl*)o);
					}
					if ((!side) and (ParamsArray->IsDot and ((bool)dcl->Type->ProcessAs))) {
						JB_Decr(name);
						JB_Decr(ParamsArray);
						JB_Decr(Curr);
						JB_Decr(Missing);
						JB_Decr(f);
						JB_Decr(b);
						JB_Decr(o);
						SCDecl* _tmPf9 = JB_Incr(SC_Decl_ProcessAs(dcl, Exp));
						JB_Decr(dcl);
						JB_SafeDecr(_tmPf9);
						return _tmPf9;
					}
					JB_Decr(dcl);
				}
				 else {
					JB_SetRef(o, ((SCDecl*)((SCDecl*)o)->Setter));
				}
			}
			if (((bool)ParamsHere) and ((!ParamsArray->IsDot) and (JB_Object_FastIsa(o, JB_AsClass(SCModule))))) {
				while (true) {
					SCObject* o2 = JB_Incr(SC_Base_SyntaxAccess(((SCModule*)o), JB_LUB[1383]));
					if (o2) {
						JB_SetRef(o, ((SCModule*)o2));
						JB_Decr(o2);
						break;
					}
					JB_Decr(o2);
					if (((bool)((SCModule*)o)->Cls) and ((SCModule*)o)->Cls->IsRole) {
						JB_SetRef(o, SC_Mod_SuperMod(((SCModule*)o)));
						if ((!((SCModule*)o))) {
							break;
						}
					}
					 else {
						break;
					}
				};
			}
			if (CanFunction and (JB_Object_FastIsa(o, JB_AsClass(SCFunction)))) {
				JB_SetRef(f, o);
				JB_SetRef(o, SC_Func_ArgsMatch(f, contains, arg_space, ParamsArray));
				if (((SCFunction*)o)) {
					if (((SCFunction*)o)->IsMacro) {
						if (SC_Func_MacroGet(((SCFunction*)o), ParamsArray, Missing)) {
							JB_SetRef(Missing, o);
						}
						JB_SetRef(b, b->Lookup);
						JB_Decr(o);
						continue;
					}
					if (JB_Str_Exists(((SCFunction*)o)->Disabled)) {
						if ((!false)) {
							JB_Msg_SyntaxExpect(Exp, ((SCFunction*)o)->Disabled);
						}
						if ((!false)) {
							JB_Msg_SyntaxExpect(((SCFunction*)o)->Source, JB_LUB[1384]);
						}
					}
					JB_SetRef(ParamsHere->Obj, o);
					JB_Decr(name);
					JB_Decr(ParamsArray);
					JB_Decr(Curr);
					JB_Decr(Missing);
					JB_Decr(f);
					JB_Decr(b);
					JB_SafeDecr(o);
					return ((SCFunction*)o);
				}
			}
			if (o) {
				ParamsArray->Found = true;
				if ((!SC_PA_SyntaxCast(ParamsArray))) {
					if ((Purpose == kSC__Base_PurposeDot) and ((!ParamsArray->IsAddress) and (JB_Object_FastIsa(o, JB_AsClass(SCDecl))))) {
						if ((SC_Class_PreferAddress(((SCDecl*)o)->Type)) and (!((SCDecl*)o)->PointerCount)) {
							if (Exp) {
								JB_SetRef(o, SC_Decl_MakePointer(((SCDecl*)o)));
								JB_Msg_GetAddressOf2(Exp);
							}
							 else {
								JB_SetRef(o, nil);
								debugger;
							}
						}
						JB_Decr(name);
						JB_Decr(ParamsArray);
						JB_Decr(Curr);
						JB_Decr(Missing);
						JB_Decr(f);
						JB_Decr(b);
						JB_SafeDecr(o);
						return ((SCDecl*)o);
					}
					if ((!(JB_Object_Isa(o, JB_AsClass(SCFunction))))) {
						JB_Decr(name);
						JB_Decr(ParamsArray);
						JB_Decr(Curr);
						JB_Decr(Missing);
						JB_Decr(f);
						JB_Decr(b);
						JB_SafeDecr(o);
						return o;
					}
					if ((!(JB_Msg_OperatorIn(Exp, JB_SyxDot)))) {
						JB_String* err = JB_Incr(JB_LUB[1385]);
						if (((bool)side) and (!SC_PA_MacroSize(ParamsArray))) {
							JB_SetRef(err, JB_LUB[1386]);
						}
						SCDecl* _tmPf0 = JB_Incr(((SCFunction*)o)->ProtoDecl);
						if ((!_tmPf0)) {
							JB_Msg_SyntaxExpect(Exp, err);
							JB_Decr(name);
							JB_Decr(ParamsArray);
							JB_Decr(Curr);
							JB_Decr(Missing);
							JB_Decr(f);
							JB_Decr(b);
							JB_Decr(o);
							JB_Decr(err);
							JB_Decr(_tmPf0);
							return nil;
						}
						JB_Decr(err);
						JB_Decr(name);
						JB_Decr(ParamsArray);
						JB_Decr(Curr);
						JB_Decr(Missing);
						JB_Decr(f);
						JB_Decr(b);
						JB_Decr(o);
						JB_SafeDecr(_tmPf0);
						return _tmPf0;
					}
				}
			}
			JB_Decr(o);
			JB_SetRef(b, b->Lookup);
		};
		JB_Decr(b);
	}
	;
	JB_Decr(Curr);
	JB_Decr(name);
	if (Missing) {
		SCDecl* _tmPf7 = JB_Incr(SC_Func_MacroFix(Missing, contains, arg_space, ParamsArray));
		JB_Decr(ParamsArray);
		JB_Decr(Missing);
		JB_Decr(f);
		JB_SafeDecr(_tmPf7);
		return _tmPf7;
	}
	JB_Decr(Missing);
	if ((!(Exp))) {
		JB_Decr(ParamsArray);
		JB_Decr(f);
		return nil;
	}
	if (f) {
		if ((!SC_PA_MadeError(ParamsArray))) {
			if (SC_Func_Disablerizer(f)) {
				if ((!false)) {
					JB_Msg_SyntaxExpect(Exp, f->Disabled);
				}
			}
			 else {
				SC_ParamsFail(f, ParamsArray);
			}
		}
		JB_SetRef(ParamsHere->Obj, f);
		JB_Decr(ParamsArray);
		JB_SafeDecr(f);
		return f;
	}
	JB_Decr(f);
	JB_String* ErrMsg = JB_Incr(JB_LUB[0]);
	if (ParamsArray->Found) {
		JB_SetRef(ErrMsg, JB_LUB[1387]);
	}
	 else if ((!ParamsHere)) {
		FastString* _fsf1 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf1, JB_LUB[1388]);
		JB_FS_AppendString(_fsf1, OrigName);
		JB_FS_AppendString(_fsf1, JB_LUB[1389]);
		JB_SetRef(ErrMsg, JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
	}
	 else if (ParamsArray->IsDot) {
		FastString* _fsf2 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf2, JB_LUB[1390]);
		JB_FS_AppendString(_fsf2, OrigName);
		JB_FS_AppendString(_fsf2, JB_LUB[1391]);
		JB_String* _tmPf5 = JB_Incr(SC_PA_RenderType(ParamsArray));
		JB_FS_AppendString(_fsf2, _tmPf5);
		JB_Decr(_tmPf5);
		JB_FS_AppendString(_fsf2, JB_LUB[1392]);
		JB_String* _tmPf6 = JB_Incr(SC_PA_RenderName(ParamsArray));
		JB_FS_AppendString(_fsf2, _tmPf6);
		JB_Decr(_tmPf6);
		JB_FS_AppendString(_fsf2, JB_LUB[1389]);
		JB_SetRef(ErrMsg, JB_FS_GetResult(_fsf2));
		JB_Decr(_fsf2);
		if (JB_Object_FastIsa(self, JB_AsClass(SCModule))) {
			SCClass* cls = JB_Incr(((SCModule*)self)->Cls);
			if (cls) {
				SCObject* found = JB_Incr(SC_Base_UpCheck(cls, OrigName, true));
				if (found) {
					JB_SetRef(ErrMsg, JB_Str_OperatorPlus(ErrMsg, JB_LUB[1393]));
				}
				JB_Decr(found);
			}
			JB_Decr(cls);
		}
	}
	 else {
		FastString* _fsf3 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf3, JB_LUB[1394]);
		JB_FS_AppendString(_fsf3, OrigName);
		JB_FS_AppendString(_fsf3, JB_LUB[1389]);
		JB_SetRef(ErrMsg, JB_FS_GetResult(_fsf3));
		JB_Decr(_fsf3);
	}
	JB_Decr(ParamsArray);
	if ((!false)) {
		JB_Msg_SyntaxExpect(Exp, ErrMsg);
	}
	JB_Decr(ErrMsg);
	return nil;
}

SCObject* SC_Base_LookUpVar(SCBase* self, JB_String* name, Message* exp, Message* side) {
	SCObject* rz = nil;
	if (JB_Str_Equals(name, JB_LUB[1214], true)) {
		name = JB_LUB[331];
	}
	rz = SC_Base_LookUpSub(self, name, exp, nil, self, nil, side, kSC__Base_PurposeVar);
	if (JB_Object_FastIsa(rz, JB_AsClass(SCDecl))) {
		(SC_Decl_SyntaxIsSet(((SCDecl*)rz), kSC__SCDeclInfo_usedbycode, true));
	}
	return rz;
}

SCDecl* SC_Base_LookUpVarDecl(SCBase* self, JB_String* name) {
	SCObject* result = JB_Incr(SC_Base_LookUpSub(self, name, nil, nil, self, nil, nil, kSC__Base_PurposeVarDecl));
	if (JB_Object_FastIsa(result, JB_AsClass(SCDecl))) {
		JB_SafeDecr(result);
		return ((SCDecl*)result);
	}
	JB_Decr(result);
	return nil;
}

SCObject* SC_Base_LookUpVarRootDecl(SCBase* self, JB_String* name, Message* exp) {
	return SC_Base_LookUpSub(self, name, exp, nil, self, nil, nil, kSC__Base_PurposeVarDecl);
}

bool SC_Base_NeedsExport(SCBase* self) {
	return ((bool)self->CurrReacher);
}

SCFunction* SC_Base_OwningFunc(SCBase* self) {
	if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
		return ((SCFunction*)self);
	}
	if (JB_Object_FastIsa(self, JB_AsClass(SCArg))) {
		return ((SCArg*)self)->ParentFunc;
	}
	return nil;
}

SCBase* SC_Base_ProcessLinkage(SCBase* self, Message* node, Dictionary* Table) {
	SCFunction* fn = JB_Incr(SC_Base_OwningFunc(self));
	{
		Message* ch = JB_Incr(((Message*)JB_Tree_First_(node)));
		while (ch) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
			if ((!JB_Msg_Expect(ch, JB_SyxTmp, nil))) {
				JB_Decr(fn);
				JB_Decr(ch);
				JB_Decr(_Nf1);
				return nil;
			}
			DTWrap* _tmPf2 = JB_Incr(((DTWrap*)JB_Dict_ValueStr(Table, ch->Name)));
			TranFunc linker = ((TranFunc)JB_Wrap_Value(_tmPf2));
			JB_Decr(_tmPf2);
			if ((!linker)) {
				JB_Msg_SyntaxExpect(ch, nil);
				JB_Decr(fn);
				JB_Decr(ch);
				JB_Decr(_Nf1);
				return nil;
			}
			(linker)(fn, ch, self);
			JB_SetRef(ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(ch);
		(node);
	}
	;
	JB_Decr(fn);
	return SC__Comp_program;
}

SCBase* SC_Base_ProjectFix(SCBase* self) {
	if ((self == SC__Comp_program) and ((bool)SC__Imp_Curr)) {
		return SC__Imp_Curr->Mod;
	}
	return self;
}

JB_String* SC_Base_ReachedName(SCBase* self) {
	JB_String* rz = JB_LUB[0];
	SCBase* c = self->CurrReacher;
	rz = JB_Str_OperatorPlus(JB_LUB[1395], self->Name);
	if (JB_ObjClass(c) == JB_AsClass(SCBase)) {
		rz = JB_Str_OperatorPlus(rz, JB_LUB[1396]);
	}
	return rz;
}

bool SC_Base_RehomeExport(SCBase* self) {
	if (SC_Base_IsSTDLib(self)) {
		SC_SCObject_Fail(self, JB_LUB[1397]);
	}
	JB_String* newhome = JB_Incr(SC_Base_UniquifyExport(self, self->ExportName));
	if ((!JB_Str_Exists(newhome))) {
		JB_Decr(newhome);
		return nil;
	}
	(JB_Dict_ValueSet(SC__Comp_ExportNames, self->ExportName, nil));
	(JB_Dict_ValueSet(SC__Comp_ExportNames, newhome, self));
	JB_SetRef(self->ExportName, newhome);
	JB_Decr(newhome);
	return true;
}

SCDecl* SC_Base_RequireContained(SCBase* self, Message* exp) {
	SCClass* cls = nil;
	if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
		JB_SetRef(cls, ((SCFunction*)self)->Cls);
		if ((!cls)) {
			JB_SetRef(cls, ((SCModule*)((SCFunction*)self)->Lookup)->Cls);
		}
	}
	 else if (JB_Object_FastIsa(self, JB_AsClass(SCClass))) {
		JB_SetRef(cls, self);
	}
	 else if (JB_Object_FastIsa(self, JB_AsClass(SCModule))) {
		JB_SetRef(cls, ((SCModule*)self)->Cls);
	}
	 else if (JB_Object_FastIsa(self, JB_AsClass(SCArg))) {
		SCFunction* f = JB_Incr(((SCArg*)self)->ParentFunc);
		if (f) {
			JB_SetRef(cls, f->Cls);
		}
		JB_Decr(f);
	}
	if ((!(((bool)cls) and ((bool)cls->Contained)))) {
		JB_Msg_SyntaxExpect(exp, JB_LUB[1398]);
		JB_Decr(cls);
		return nil;
	}
	SCDecl* _tmPf0 = JB_Incr(cls->Contained);
	JB_Decr(cls);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Base_SetExportName(SCBase* self, JB_String* s, bool Explicit) {
	JB_Incr(s);
	if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
		if (((SCFunction*)self)->IsMacro) {
			JB_Decr(s);
			return;
		}
	}
	JB_SetRef(s, JB_Str_unicodesafename(s));
	if ((!((JB_Object_Isa(self, JB_AsClass(SCModule))) or (JB_Object_Isa(self, JB_AsClass(SCClass)))))) {
		JB_SetRef(s, SC_Base_TestExportName(self, s, Explicit));
		if ((!JB_Str_Exists(s))) {
			JB_Decr(s);
			return;
		}
		(JB_Dict_ValueSet(SC__Comp_ExportNames, s, self));
	}
	((SC_Base_SyntaxIsSet(self, kSC__SCBaseInfo_explicitexport, Explicit)));
	JB_SetRef(self->ExportName, s);
	JB_Decr(s);
}

SCClass* SC_Base_ShouldBeClass(SCBase* self, Message* errplace) {
	SCClass* _tmPf0 = JB_Incr(SC_Base_IsNormalObject(self));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(errplace, JB_LUB[1399]);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* SC_Base_SourceArg(SCBase* self) {
	Message* p = self->Source;
	if ((!p)) {
		return nil;
	}
	if (JB_Msg_EqualsSyx(p, JB_SyxArg, false)) {
		return p;
	}
	return JB_Msg_FindSyx(p, JB_SyxArg);
}

void SC_Base_StoreLinkToMe(SCBase* self, Dictionary** dp) {
	if ((!(self != JB_TypeVoid_))) {
		return;
	}
	Dictionary* d = ({
		Dictionary* _X = (*dp);
		if ((!_X)) {
			_X = JB_Dict__New();
			JB_SetRef((*dp), _X);
		}
		 _X;
	});
	(JB_Dict_ValueSet(d, JB_Obj_DictName(self), self));
}

JB_String* SC_Base_SubProjName(SCBase* self) {
	return SC_ProjName();
}

SCObject* SC_Base_SyntaxAccess(SCBase* self, JB_String* s) {
	if (self->Access) {
		return ((SCObject*)JB_Dict_ValueLower(self->Access, s));
	}
	return nil;
}

bool SC_Base_SyntaxIs(SCBase* self, SCBaseInfo i) {
	return JB_int_SyntaxAccess(self->BaseInfo, i);
}

void SC_Base_SyntaxIsSet(SCBase* self, SCBaseInfo i, bool Value) {
	int x = self->BaseInfo;
	x = JB_int_SyntaxAccessSet(x, i, Value);
	self->BaseInfo = x;
}

bool SC_Base_SyntaxIsnt(SCBase* self, SCBaseInfo i) {
	return (!JB_int_SyntaxAccess(self->BaseInfo, i));
}

JB_String* SC_Base_TestExportName(SCBase* self, JB_String* s, bool Explicit) {
	SCBase* o = JB_Incr(((SCBase*)JB_Dict_ValueStr(SC__Comp_ExportNames, s)));
	if ((!o)) {
		JB_Decr(o);
		return s;
	}
	if ((!Explicit)) {
		if (SC_Base_SyntaxIsnt(o, kSC__SCBaseInfo_explicitexport)) {
			SC_Base_RehomeExport(o);
		}
		JB_String* it = JB_Incr(SC_Base_UniquifyExport(self, s));
		if (JB_Str_Exists(it)) {
			JB_Decr(o);
			JB_SafeDecr(it);
			return it;
		}
		JB_Decr(it);
	}
	 else if (SC_Base_SyntaxIsnt(o, kSC__SCBaseInfo_explicitexport)) {
		if (SC_Base_RehomeExport(o)) {
			JB_Decr(o);
			return s;
		}
	}
	JB_DoAt(1);
	JB_String* Err = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1400], s));
	if ((!false)) {
		JB_Msg_SyntaxExpect(o->Source, Err);
	}
	JB_Decr(o);
	if ((!false)) {
		JB_Msg_SyntaxExpect(self->Source, Err);
	}
	JB_Decr(Err);
	return JB_LUB[0];
}

void SC_Base_Tran_Const(SCBase* self, SCDecl* D, SCBase* base) {
	Message* root = JB_Incr(D->Default);
	MessagePosition Using = JB_Msg_SyntaxUsing(root);
	{
		Message* curr = JB_Incr(root);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(root)));
		while (((bool)curr) and (curr != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(curr)));
			if (JB_Msg_EqualsSyx(curr, JB_SyxThg, false)) {
				if ((!JB_FreeIfDead(SC_TypeOfExpr(curr, base, nil)))) {
					JB_Decr(root);
					JB_MsgPos_Destructor((&Using));
					JB_Decr(curr);
					JB_Decr(_afterf1);
					JB_Decr(_N_f2);
					return;
				}
				SCObject* actual = JB_Incr(SC_Base_SyntaxAccess(base, curr->Name));
				if (JB_Object_FastIsa(actual, JB_AsClass(SCDecl))) {
					Message* BetterVersion = JB_Incr(JB_Msg_NiceCopy(((SCDecl*)actual)->Default, curr));
					JB_FreeIfDead(JB_Msg_ReplaceWith(curr, BetterVersion));
					JB_Decr(BetterVersion);
				}
				 else {
					if ((!((curr->Obj == JB_TypeString->TypeNormal) or (((JB_Msg_SyntaxEquals(curr, JB_LUB[107], true))) or ((JB_Msg_SyntaxEquals(curr, JB_LUB[108], true))))))) {
						JB_Msg_SyntaxExpect(curr, JB_LUB[1401]);
						JB_Decr(root);
						JB_MsgPos_Destructor((&Using));
						JB_Decr(curr);
						JB_Decr(_afterf1);
						JB_Decr(_N_f2);
						JB_Decr(actual);
						return;
					}
				}
				JB_Decr(actual);
			}
			 else if (JB_Msg_EqualsSyx(curr, JB_SyxUnit, false)) {
				if ((!JB_FreeIfDead(SC_TypeOfExpr(curr, base, nil)))) {
					JB_Decr(root);
					JB_MsgPos_Destructor((&Using));
					JB_Decr(curr);
					JB_Decr(_afterf1);
					JB_Decr(_N_f2);
					return;
				}
			}
			 else if (((JB_Msg_EqualsSyx(curr, JB_SyxStr, false))) or (((JB_Msg_EqualsSyx(curr, JB_SyxNum, false))) and (!({
				Message* _tmP281 = JB_Incr(((Message*)JB_Ring_Parent(curr)));
				bool _tmP280 = JB_Msg_EqualsSyx(_tmP281, JB_SyxUnit, false);
				JB_Decr(_tmP281);
				 _tmP280;
			})))) {
				if ((!JB_FreeIfDead(SC_TypeOfExpr(curr, base, nil)))) {
					JB_Decr(root);
					JB_MsgPos_Destructor((&Using));
					JB_Decr(curr);
					JB_Decr(_afterf1);
					JB_Decr(_N_f2);
					return;
				}
			}
			JB_SetRef(curr, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(_afterf1);
		JB_Decr(curr);
		(root);
	}
	;
	JB_Decr(root);
	JB_MsgPos_Destructor((&Using));
}

void SC_Base_TryAdd(SCBase* self, Message* ErrPlace, SCObject* IncObj, JB_String* name) {
	JB_Incr(name);
	if ((!(IncObj))) {
		JB_Decr(name);
		return;
	}
	JB_SetRef(name, JB_Str_LowerCase(name));
	if ((!(JB_Str_Exists(name)))) {
		JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1402]);
		JB_Decr(name);
		return;
	}
	if ((!(JB_Str_Length(name) <= 64))) {
		JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1403]);
		JB_Decr(name);
		return;
	}
	if ((!(self->Access))) {
		JB_SetRef(self->Access, JB_Dict__New());
	}
	SCObject* Old = JB_Incr(SC_Base_UpCheck(self, name, (!(JB_Object_Isa(IncObj, JB_AsClass(SCFunction))))));
	if ((!Old)) {
		(JB_Dict_ValueSet(self->Access, name, IncObj));
		JB_Decr(name);
		JB_Decr(Old);
		return;
	}
	if ((!(Old != IncObj))) {
		JB_Decr(name);
		JB_Decr(Old);
		return;
	}
	if (JB_Object_FastIsa(Old, JB_AsClass(SCFunction))) {
		if (JB_Object_FastIsa(IncObj, JB_AsClass(SCFunction))) {
			if (((SCFunction*)Old)->Cls == ((SCFunction*)IncObj)->Cls) {
				SCFunction* _tmPf0 = JB_Incr(SC_Func_Last(((SCFunction*)Old)));
				JB_SetRef(_tmPf0->NextFunc, IncObj);
				JB_Decr(_tmPf0);
				JB_Decr(name);
				JB_Decr(Old);
				return;
			}
		}
		 else if (JB_Object_FastIsa(IncObj, JB_AsClass(SCDecl)) and (((SCFunction*)Old)->IsAssigns == 2)) {
			if (((SCDecl*)IncObj)->Setter) {
				JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1404]);
				JB_Decr(name);
				JB_Decr(Old);
				return;
			}
			((SCDecl*)IncObj)->Setter = ((SCFunction*)Old);
			(JB_Dict_ValueSet(self->Access, name, ((SCDecl*)IncObj)));
			JB_Decr(name);
			JB_Decr(Old);
			return;
		}
	}
	if (JB_Str_Equals(name, JB_LUB[331], false)) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1405]);
		}
	}
	 else {
		if ((!false)) {
			JB_Msg_SyntaxExpect(ErrPlace, JB_kNameConf);
		}
	}
	JB_Decr(name);
	if (JB_Object_Isa(Old, JB_AsClass(SCObject))) {
		if ((!false)) {
			Message* _tmPf1 = JB_Incr(SC_SCObject_AnySource(((SCObject*)Old)));
			JB_Msg_SyntaxExpect(_tmPf1, JB_kNameConf);
			JB_Decr(_tmPf1);
		}
	}
	 else {
		if ((!false)) {
			JB_String* _tmPf2 = JB_Incr(SC_SCObject_Render(Old, nil));
			JB_Object_Fail(_tmPf2, JB_kNameConf);
			JB_Decr(_tmPf2);
		}
	}
	JB_Decr(Old);
}

void SC_Base_TryAddBase(SCBase* self, Message* c, SCBase* neu) {
	SC_Base_TryAdd(self, c, neu, neu->Name);
}

JB_String* SC_Base_UniquifyExport(SCBase* self, JB_String* s) {
	JB_Incr(s);
	if (JB_Object_FastIsa(self, JB_AsClass(SCFunction))) {
		JB_SetRef(s, SC_Func_ParamUniquer(((SCFunction*)self), s));
		if ((!(JB_FreeIfDead(((SCBase*)JB_Dict_ValueStr(SC__Comp_ExportNames, s)))))) {
			JB_SafeDecr(s);
			return s;
		}
	}
	JB_String* _tmPf0 = JB_Incr(JB_int_RenderFS(SC_UniqueNum(), nil));
	JB_SetRef(s, JB_Str_OperatorPlus(s, _tmPf0));
	JB_Decr(_tmPf0);
	if ((!(JB_FreeIfDead(((SCBase*)JB_Dict_ValueStr(SC__Comp_ExportNames, s)))))) {
		JB_SafeDecr(s);
		return s;
	}
	JB_Decr(s);
	return JB_LUB[0];
}

SCObject* SC_Base_UpCheck(SCBase* self, JB_String* name, bool LookUp) {
	if (LookUp and (JB_Object_FastIsa(self, JB_AsClass(SCClass)))) {
		return SC_Class_UpCheckSub(((SCClass*)self), name);
	}
	if ((!(JB_Object_Isa(self, JB_AsClass(SCArg))))) {
		return SC_Base_SyntaxAccess(self, name);
	}
	SCBase* curr = self;
	while (JB_Object_FastIsa(curr, JB_AsClass(SCArg))) {
		SCObject* found = SC_Base_SyntaxAccess(((SCArg*)curr), name);
		if (found) {
			return found;
		}
		if ((!LookUp)) {
			return nil;
		}
		curr = ((SCArg*)((SCArg*)curr)->Lookup);
	};
	return nil;
}

SCBase* SC_Base_UpClass(SCBase* self, Message* f) {
	SCBase* rz = nil;
	rz = self->Lookup;
	if ((JB_Msg_EqualsSyx(f, JB_SyxDot, false)) and JB_Object_FastIsa(rz, JB_AsClass(SCModule))) {
		if (((SCModule*)rz)->IsImport) {
			return nil;
		}
	}
	return rz;
}

void SC_Base_Use(SCBase* self) {
	if (self->Source) {
		JB_MemoryLayer* _tmPf0 = JB_Incr(JB_ObjLayer(self->Source));
		JB_Mem_Use(_tmPf0);
		JB_Decr(_tmPf0);
	}
	SC_Imp_Use(self->Project);
}

SCBase* SC_Base__Alloc() {
	return ((SCBase*)JB_New(SCBase));
}

int SC_Base__Init_() {
	{
		SC__Base_CurrVisibility = false;
		SC__Base_ConstantsLoadingOverride = false;
	}
	;
	return 0;
}

int SC_Base__InitCode_() {
	return 0;
}

SCBase* SC_Base__LoadCppPart(Message* node, SCBase* name_space, Message* ErrPlace) {
	if ((!((JB_Object_Isa(name_space, JB_AsClass(SCClass))) or (JB_Object_Isa(name_space, JB_AsClass(SCModule)))))) {
		return nil;
	}
	if (name_space == SC__Comp_program) {
		SCFile* file = JB_Incr(JB_Msg_SCFile(node));
		if (JB_File_SyntaxCast(file)) {
			Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
			if ((!_tmPf0)) {
				JB_Decr(file);
				JB_Decr(_tmPf0);
				return nil;
			}
			JB_SetRef(file->ExportName, _tmPf0->Name);
			JB_Decr(_tmPf0);
		}
		JB_Decr(file);
		JB_Tree_Remove(node);
	}
	return SC__Comp_program;
}

SCBase* SC_Base__NewStr(JB_String* Name, bool Dummy) {
	SCBase* __rz__ = ((SCBase*)SC_Base__Alloc());
	if (__rz__) {
		SC_Base_ConstructorStr(__rz__, Name, Dummy);
	}
	return __rz__;
}


void SC_Beh_Add(SCBehaviour* self, SCBase* fn) {
	if ((!(fn))) {
		return;
	}
	SCBase* Old = JB_Incr(((SCBase*)SC_Base_SyntaxAccess(self, fn->Name)));
	if (Old) {
		JB_Msg_SyntaxExpect(fn->Source, JB_kNameConf);
	}
	if (Old) {
		JB_Msg_SyntaxExpect(Old->Source, JB_kNameConf);
		JB_Decr(Old);
		return;
	}
	JB_Decr(Old);
	SC_Base_TryAdd(self, fn->Source, fn, fn->Name);
}

SCClass* SC_Beh_Cls(SCBehaviour* self) {
	return ((SCClass*)self->Lookup);
}

void SC_Beh_Constructor(SCBehaviour* self, SCClass* parent) {
	SC_Base_Constructor0(self);
	self->FuncTayble = nil;
	Array* _tmPf0 = JB_Array__New0();
	self->WrapperFuncs = JB_Incr(_tmPf0);
	self->Project = parent->Project;
	self->Lookup = parent;
	Dictionary* _tmPf1 = JB_Dict__New();
	self->Interfaces = JB_Incr(_tmPf1);
}

void SC_Beh_CreateFuncTable(SCBehaviour* self, Message* ErrPlace) {
	if (self->FuncTayble) {
		JB_Object_SyntaxExpect(nil);
		return;
	}
	SCClass* _tmPf0 = JB_Incr(SC_Beh_Cls(self));
	JB_String* name = JB_Incr(SC_Class_BehaviourName(_tmPf0));
	JB_Decr(_tmPf0);
	MessagePosition Using = JB_Msg_SyntaxUsing(ErrPlace);
	Message* msg = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[802])));
	Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name));
	JB_Decr(name);
	JB_Tree_SyntaxAppend(msg, (_tmPf1));
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
	JB_Tree_SyntaxAppend(msg, (_tmPf2));
	JB_Decr(_tmPf2);
	if ((!self->Project)) {
		debugger;
	}
	SC_Imp_Use(self->Project);
	SCModule* F = JB_Incr(((SCModule*)SC_Class__NewStruct(msg, SC__Comp_program, ErrPlace)));
	JB_Decr(msg);
	if ((!F)) {
		JB_MsgPos_Destructor((&Using));
		JB_Decr(F);
		return;
	}
	F->Cls->IsBehaviour = kSC__Beh_BehaviourTable;
	SCClass* _tmPf3 = JB_Incr(SC_Beh_Cls(self));
	F->Cls->IsRole = _tmPf3->IsRole;
	JB_Decr(_tmPf3);
	SC_Base_TryAddBase(SC__Comp_program, ErrPlace, F);
	JB_Array_SyntaxAppend(SC__Comp_ModuleList, F);
	JB_SetRef(self->FuncTayble, F);
	JB_Decr(F);
	SC_Imp__NoProj();
	JB_MsgPos_Destructor((&Using));
}

void SC_Beh_destructor(SCBehaviour* self) {
	JB_Decr(self->FuncTayble);
	JB_Decr(self->Interfaces);
	JB_Decr(self->WrapperFuncs);
	SC_Base_destructor(self);
}

SCBehaviour* SC_Beh_Upwards(SCBehaviour* self) {
	SCClass* _tmPf1 = JB_Incr(SC_Beh_Cls(self));
	SCClass* _tmPf0 = JB_Incr(_tmPf1->Super);
	JB_Decr(_tmPf1);
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	SCBehaviour* _tmPf2 = JB_Incr(_tmPf0->Behaviour);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

SCBehaviour* SC_Beh__Alloc() {
	return ((SCBehaviour*)JB_New(SCBehaviour));
}

SCFunction* SC_Beh__MakeCallerSub(JB_String* FnStr, SCClass* Cls, Message* ErrPlace) {
	MessagePosition Using = JB_Msg_SyntaxUsing(ErrPlace);
	Message* FNSrc = JB_Incr(JB_Str_ParseClean(FnStr));
	if ((!FNSrc)) {
		JB_MsgPos_Destructor((&Using));
		JB_Decr(FNSrc);
		return nil;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(FNSrc)));
	JB_Decr(FNSrc);
	SCFunction* FN = JB_Incr(((SCFunction*)SC_Func__NewFunc(_tmPf0, Cls, ErrPlace)));
	JB_Decr(_tmPf0);
	if ((!FN)) {
		JB_MsgPos_Destructor((&Using));
		JB_Decr(FN);
		return nil;
	}
	FN->AllocCode = (FN->AllocCode | kSC_IsVirtualCaller);
	JB_Array_SyntaxAppend(Cls->Behaviour->WrapperFuncs, FN);
	JB_MsgPos_Destructor((&Using));
	JB_SafeDecr(FN);
	return FN;
}

SCFunction* SC_Beh__MakeInterfaceCaller(SCModule* Mod, SCClass* Cls, Message* ErrPlace) {
	JB_String* InterName = JB_Incr(Mod->Name);
	JB_String* Type = JB_Incr(SC_Class_BehaviourName(Cls));
	JB_String* FuncName = JB_Incr(JB_Str_InterfaceToBehaviour(InterName));
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[1368]);
	JB_FS_AppendString(_fsf0, InterName);
	JB_FS_AppendString(_fsf0, JB_LUB[1406]);
	JB_FS_AppendString(_fsf0, InterName);
	JB_Decr(InterName);
	JB_FS_AppendString(_fsf0, JB_LUB[1407]);
	JB_FS_AppendString(_fsf0, Type);
	JB_Decr(Type);
	JB_FS_AppendString(_fsf0, JB_LUB[1408]);
	JB_FS_AppendString(_fsf0, FuncName);
	JB_Decr(FuncName);
	JB_FS_AppendString(_fsf0, JB_LUB[1409]);
	JB_String* FNStr = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	SCFunction* _tmPf1 = JB_Incr(SC_Beh__MakeCallerSub(FNStr, Cls, ErrPlace));
	JB_Decr(FNStr);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCBehaviour* SC_Beh__New(SCClass* parent) {
	SCBehaviour* __rz__ = ((SCBehaviour*)SC_Beh__Alloc());
	if (__rz__) {
		SC_Beh_Constructor(__rz__, parent);
	}
	return __rz__;
}

SCBase* SC_Beh__NewBehaviour(Message* node, SCBase* name_space, Message* ErrPlace) {
	SCClass* cls = JB_Incr(SC_Base_ShouldBeClass(name_space, ErrPlace));
	if (SC_Beh__Tran_Behaviour(node, cls)) {
		SCBase* fn = JB_Incr(SC_Func__NewFunc(node, cls, node));
		if (fn) {
			SC_Class_AddBehaviourOrInterface(cls, fn, ErrPlace);
			JB_Decr(cls);
			JB_SafeDecr(fn);
			return fn;
		}
		JB_Decr(fn);
	}
	JB_Decr(cls);
	return nil;
}

SCBase* SC_Beh__NewInterface(Message* node, SCBase* name_space, Message* ErrPlace) {
	//using;
	MessagePosition _using155 = JB_Msg_SyntaxUsing(ErrPlace);
	SCClass* cls = JB_Incr(SC_Base_ShouldBeClass(name_space, ErrPlace));
	if (cls) {
		Message* arg = JB_Incr(JB_Msg_FindSyx(node, JB_SyxArg));
		if (arg) {
			Message* Beh = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[393])));
			Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(node)));
			Message* _tmPf0 = JB_Incr(JB_Msg_NiceCopy(_tmPf1, nil));
			JB_Decr(_tmPf1);
			JB_Tree_SyntaxAppend(Beh, _tmPf0);
			JB_Decr(_tmPf0);
			JB_Tree_SyntaxAppend(Beh, arg);
			(JB_Ring_NextSibSet(node, Beh));
			SC_Base_CollectOne(name_space, Beh, true);
			JB_Decr(Beh);
		}
		JB_Decr(arg);
		SCModule* Mod = JB_Incr(SC_Beh__NewInterfaceSub(node, cls, ErrPlace));
		if (Mod) {
			SCFunction* _tmPf2 = JB_Incr(SC_Beh__MakeInterfaceCaller(Mod, cls, ErrPlace));
			JB_MsgPos_Destructor((&_using155));
			JB_Decr(cls);
			JB_Decr(Mod);
			JB_SafeDecr(_tmPf2);
			return _tmPf2;
		}
		JB_Decr(Mod);
	}
	JB_Decr(cls);
	JB_MsgPos_SyntaxUsingComplete((&_using155));
	JB_MsgPos_Destructor((&_using155));
	return nil;
}

SCModule* SC_Beh__NewInterfaceSub(Message* node, SCClass* cls, Message* ErrPlace) {
	Message* Thg = JB_Incr(((Message*)JB_Ring_First(node)));
	bool required = (JB_Msg_OperatorIsARel(Thg, JB_LUB[1410]));
	if (required) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Thg)));
		JB_SetRef(Thg, JB_Msg_ReplaceWith(Thg, _tmPf0));
		JB_Decr(_tmPf0);
	}
	if ((!(JB_Msg_EqualsSyx(Thg, JB_SyxThg, false)))) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1411]);
		JB_Decr(Thg);
		return nil;
	}
	JB_String* s = JB_Incr(Thg->Name);
	if (JB_Str_UnderScoreAtAnyEnd(s)) {
		JB_Msg_SyntaxExpect(Thg, JB_LUB[1412]);
		JB_Decr(Thg);
		JB_Decr(s);
		return nil;
	}
	if ((!((!JB_Str_Equals(s, JB_LUB[812], true))))) {
		JB_Msg_SyntaxExpect(Thg, JB_LUB[1413]);
		JB_Decr(Thg);
		JB_Decr(s);
		return nil;
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(s, JB_LUB[376]));
	JB_SetRef(Thg->Name, JB_Str_OperatorPlus(JB_LUB[376], _tmPf1));
	JB_Decr(_tmPf1);
	JB_Decr(Thg);
	SCModule* Mod = JB_Incr(SC_Func__NewProtoTypeSub(node, cls, ErrPlace, s));
	JB_Decr(s);
	if ((!Mod)) {
		JB_Decr(Mod);
		return nil;
	}
	Mod->IsRequiredInterface = required;
	SC_Class_AddBehaviourOrInterface(cls, Mod, ErrPlace);
	Mod->Cls->IsBehaviour = kSC__Beh_BehaviourProto;
	if (required) {
		Mod->Cls->IsBehaviour = kSC__Beh_BehaviourProtoRequired;
	}
	JB_SafeDecr(Mod);
	return Mod;
}

bool SC_Beh__Tran_Behaviour(Message* node, SCClass* cls) {
	if ((!(((bool)cls) and ((bool)node)))) {
		return nil;
	}
	if (cls->IsRole) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1414]);
		return nil;
	}
	Message* name = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	Message* lst = JB_Incr(((Message*)JB_Ring_NextSib(name)));
	if ((!((!JB_Msg_EqualsSyx(lst, JB_SyxBra, false)) and ((!JB_Msg_EqualsSyx(lst, JB_SyxPrm, false)) and (!JB_Msg_EqualsSyx(lst, JB_SyxList, false)))))) {
		JB_Msg_SyntaxExpect(lst, JB_LUB[1415]);
		JB_Decr(name);
		JB_Decr(lst);
		return nil;
	}
	JB_Decr(lst);
	if (true) {
		MessagePosition _using154 = JB_Msg_SyntaxUsing(node);
		Message* it = JB_Incr(((Message*)JB_Ring_NextSib(name)));
		if (it) {
			JB_Msg_Expect(it, JB_SyxArg, nil);
		}
		 else {
			Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
			JB_Tree_SyntaxAppend(node, (_tmPf1));
			JB_Decr(_tmPf1);
		}
		JB_Decr(it);
		Message* _tmPf2 = JB_Incr(({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			JB_String* _tmPf5 = JB_Incr(JB_Str_OperatorPlus(name->Name, JB_LUB[376]));
			JB_String* _tmPf4 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[376], _tmPf5));
			JB_Decr(_tmPf5);
			Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxThg, _tmPf4));
			JB_Decr(_tmPf4);
			JB_Tree_SyntaxAppend(__imPf0, (_tmPf3));
			JB_Decr(_tmPf3);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
		(JB_Ring_NextSibSet(name, _tmPf2));
		JB_Decr(_tmPf2);
		JB_MsgPos_SyntaxUsingComplete((&_using154));
		JB_MsgPos_Destructor((&_using154));
	}
	JB_Decr(name);
	return true;
}


void SC_Class_AddBehaviourOrInterface(SCClass* self, SCBase* M, Message* ErrPlace) {
	SCBehaviour* b = JB_Incr(self->Behaviour);
	if ((!b)) {
		JB_SetRef(b, SC_Beh__New(self));
		JB_SetRef(self->Behaviour, b);
	}
	if (JB_Object_FastIsa(M, JB_AsClass(SCModule))) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(((SCModule*)M)->Name));
		(JB_Dict_ValueSet(b->Interfaces, _tmPf0, ((SCModule*)M)));
		JB_Decr(_tmPf0);
	}
	 else {
		SC_Beh_Add(b, M);
	}
	JB_Decr(b);
}

void SC_Class_AddInterfacesTo(SCClass* self, Array* List) {
	SCBehaviour* B = JB_Incr(self->Behaviour);
	if ((!B)) {
		JB_Decr(B);
		return;
	}
	{
		Dictionary* _LoopSrcf1 = JB_Incr(B->Interfaces);
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf1));
		JB_Decr(_LoopSrcf1);
		while (JB_Nav_MoveNext(_navf0)) {
			SCModule* mod = JB_Incr(((SCModule*)JB_Nav_Value(_navf0)));
			JB_Array_SyntaxAppend(List, mod);
			JB_Decr(mod);
		};
		JB_Decr(_navf0);
	}
	;
	JB_Decr(B);
}

void SC_Class_AddSelfToFunc(SCClass* self, SCBase* space) {
	Message* _tmPf0 = JB_Incr(SC_Base_FuncSrc(space));
	SC_Base_TryAdd(space, _tmPf0, self->SelfStrong, JB_LUB[331]);
	JB_Decr(_tmPf0);
}

void SC_Class_AfterAfterFuncs(SCClass* self) {
	if (self->Super) {
		if ((!(self->HasCompareFunc))) {
			self->HasCompareFunc = self->Super->HasCompareFunc;
		}
	}
	if (self->Super) {
		if ((!(self->HasEqualsFunc))) {
			self->HasEqualsFunc = self->Super->HasEqualsFunc;
		}
	}
	if (self->Defawlt) {
		JB_FreeIfDead(SC_TypeOfExpr(self->Defawlt, self->Modul, nil));
	}
	if (self->IsModel) {
		SC_Class_DeclModel(self);
	}
}

void SC_Class_AfterFuncsDecled(SCClass* self) {
	SC_Class_OverrideSyntax(self);
	SCFunction* f = JB_Incr(self->ConstructorFunc);
	if (f) {
		if (f->ReturnType) {
			JB_Msg_SyntaxExpect(f->Source, JB_LUB[1416]);
			JB_Decr(f);
			return;
		}
		SC_Class_CheckAllocVsWrapper(self, f, true);
	}
	JB_SetRef(f, self->DestructorFunc);
	if (f) {
		if (f->NextFunc) {
			JB_Msg_SyntaxExpect(f->Source, JB_LUB[1417]);
			JB_Decr(f);
			return;
		}
		if ((!((!f->ReturnType) and (JB_Array_Size(f->Args) == 1)))) {
			JB_Msg_SyntaxExpect(f->Source, JB_LUB[1418]);
			JB_Decr(f);
			return;
		}
	}
	SC_Class_CheckAllocVsWrapper(self, f, false);
	JB_Decr(f);
	JB_SetRef(self->ClassType, SC_Decl_Copy(JB_TypeJBClass->TypeNormal, false));
	JB_SetRef(self->ClassType->Name, SC_Class_CStructName(self));
}

JB_String* SC_Class_AllocStr(SCClass* self) {
	JB_String* s0 = JB_Incr(self->Name);
	JB_String* s = JB_Incr(((JB_String*)JB_Ternary((!self->IsRole), s0, self->Super->Name)));
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[1419]);
	JB_FS_AppendString(_fsf0, s0);
	JB_FS_AppendString(_fsf0, JB_LUB[1420]);
	JB_FS_AppendString(_fsf0, s);
	JB_Decr(s);
	JB_FS_AppendString(_fsf0, JB_LUB[1421]);
	JB_FS_AppendString(_fsf0, s0);
	JB_Decr(s0);
	JB_FS_AppendString(_fsf0, JB_LUB[1422]);
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Class_AllocStrLayer(SCClass* self) {
	JB_String* s0 = JB_Incr(self->Name);
	JB_String* s = JB_Incr(((JB_String*)JB_Ternary((!self->IsRole), s0, self->Super->Name)));
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[1423]);
	JB_FS_AppendString(_fsf0, s0);
	JB_FS_AppendString(_fsf0, JB_LUB[1424]);
	JB_FS_AppendString(_fsf0, s);
	JB_Decr(s);
	JB_FS_AppendString(_fsf0, JB_LUB[1421]);
	JB_FS_AppendString(_fsf0, s0);
	JB_Decr(s0);
	JB_FS_AppendString(_fsf0, JB_LUB[1422]);
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Class_APIStructName(SCClass* self) {
	if (SC_Class_IsObject(self) or ((bool)self->Super)) {
		JB_String* _tmPf0 = JB_Incr(JB_Msg_APICppProject(self->Source));
		JB_String* _tmPf1 = JB_Incr(JB_Str_LowerCase(self->Name));
		JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf1));
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	return SC_Class_CStructName(self);
}

void SC_Class_AutoConstructor(SCClass* self) {
	SCFunction* fn = SC_Class_CreateEmptyFunc(self, JB_LUB[1425], JB_LUB[1426]);
	Message* node = fn->Source;
	Message* prms = ((Message*)JB_Tree_Get(node, 1));
	Message* arg = ((Message*)JB_Ring_NextSib(prms));
	{
		Array* _LoopSrcf1 = self->Properties;
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* prop = ((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0));
			if (SC_Decl_ispassable(prop)) {
				JB_String* name = prop->Name;
				if (JB_Str_Equals(name, JB_LUB[1214], true)) {
					name = JB_LUB[1427];
				}
				if ((!((!JB_Str_Equals(name, JB_LUB[1428], false))))) {
					JB_Msg_SyntaxExpect(prop->Source, JB_LUB[1429]);
				}
				JB_Tree_SyntaxAppend(prms, SC_Decl_WriteDeclTypeAndName(prop, name, false));
				JB_Tree_SyntaxAppend(arg, ({
					Message* __imPf3 = (JB_Syx_Msg(JB_SyxRel, JB_LUB[0]));
					JB_Tree_SyntaxAppend(__imPf3, (JB_Syx_Msg(JB_SyxSDot, name)));
					JB_Tree_SyntaxAppend(__imPf3, (JB_Syx_Msg(JB_SyxOpp, JB_LUB[541])));
					JB_Tree_SyntaxAppend(__imPf3, (JB_Syx_Msg(JB_SyxThg, name)));
					 __imPf3;
				}));
			}
			_if0++;
		};
	}
	;
	(fn);
}

void SC_Class_BannedCheck(SCClass* self, Message* src) {
	if ((!SC_Class_TestBanned(self))) {
		return;
	}
	if ((!false)) {
		SC_SCObject_Fail(self, JB_Str_OperatorPlus(JB_LUB[1430], self->Name));
	}
	SCBase* curr = self->CurrReacher;
	{
		int _Valuef1 = 0;
		while (_Valuef1 < 100) {
			if ((!curr) or (JB_ObjClass(curr) == JB_AsClass(SCBase))) {
				break;
			}
			if (src) {
				if ((!false)) {
					JB_Msg_SyntaxExpect(src, SC_Base_ReachedName(curr));
				}
				src = nil;
			}
			 else {
				if ((!false)) {
					SC_SCObject_Fail(curr, SC_Base_ReachedName(curr));
				}
			}
			curr = curr->CurrReacher;
			_Valuef1++;
		};
	};
}

JB_String* SC_Class_BehaviourName(SCClass* self) {
	return JB_Str_OperatorPlus(self->Name, JB_LUB[1431]);
}

SCFunction* SC_Class_BestBehaviourFor(SCClass* self, JB_String* name) {
	SCBehaviour* b = JB_Incr(self->Behaviour);
	while (b) {
		SCObject* fn = JB_Incr(SC_Base_SyntaxAccess(b, name));
		if (JB_Object_FastIsa(fn, JB_AsClass(SCFunction))) {
			JB_Decr(b);
			JB_SafeDecr(fn);
			return ((SCFunction*)fn);
		}
		 else if ((bool)fn) {
			debugger;
		}
		JB_Decr(fn);
		JB_SetRef(b, SC_Beh_Upwards(b));
	};
	JB_Decr(b);
	return nil;
}

int SC_Class_CalculateSize(SCClass* self, int Depth) {
	SC_Class_CalculateSizeRaw(self, Depth);
	return self->Size;
}

int SC_Class_CalculateSizeRaw(SCClass* self, int Depth) {
	if (self->Size) {
		return self->Size;
	}
	if (self->IsDataType) {
		self->Size = JB_TC_ByteSize(self->TypeInfo);
		return self->Size;
	}
	if ((!(Depth < 16))) {
		JB_Msg_SyntaxExpect(self->Source, JB_LUB[1432]);
		return nil;
	}
	int Count = 0;
	if (self == JB_TypeObject) {
		Count = 4;
	}
	if (self->Super) {
		Count = SC_Class_CalculateSizeRaw(self->Super, 0);
		if ((!Count)) {
			debugger;
			return nil;
		}
	}
	{
		Array* _LoopSrcf1 = JB_Incr(self->Properties);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* p = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0)));
			int Mul = p->C_Array;
			if ((!Mul)) {
				Mul = 1;
			}
			int curr = 0;
			if ((SC_Decl_IsNormalObject(p)) or ((bool)p->PointerCount)) {
				curr = JB_Platform__PointerBytes();
			}
			 else if ((bool)p) {
				curr = SC_Class_CalculateSize(p->Type, Depth + 1);
				if ((!curr)) {
					JB_Decr(_LoopSrcf1);
					JB_Decr(p);
					return nil;
				}
			}
			JB_Decr(p);
			Count = JB_int_OperatorAlign(Count, curr);
			Count = (Count + (curr * Mul));
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	self->Size = JB_int_OperatorAlign(Count, 4);
	return Count;
}

bool SC_Class_CanCompare(SCClass* self, SCDecl* Against, bool AsEquals) {
	bool CanUseEquals = AsEquals and self->HasEqualsFunc;
	if ((!self->HasCompareFunc) and (!CanUseEquals)) {
		return false;
	}
	if (CanUseEquals and SC_Class_CanCompareSub(self, JB_LUB[1433], Against)) {
		return true;
	}
	if (self->HasCompareFunc) {
		return SC_Class_CanCompareSub(self, JB_LUB[1434], Against);
	}
	return false;
}

bool SC_Class_CanCompareSub(SCClass* self, JB_String* s, SCDecl* against) {
	{
		SCClass* b = self;
		while (b) {
			SCObject* o = ((SCObject*)JB_Dict_ValueStr(b->Access, s));
			if (JB_Object_FastIsa(o, JB_AsClass(SCFunction))) {
				if (SC_Func_CanCompare(((SCFunction*)o), against)) {
					return true;
				}
			}
			b = b->Super;
		};
	}
	;
	return false;
}

void SC_Class_CheckAllocVsWrapper(SCClass* self, SCFunction* f, bool IsConstructor) {
	if ((!self->IsWrapper)) {
		return;
	}
	if ((!SC_Class_IsObject(self))) {
		return;
	}
	if ((!self->Super)) {
		return;
	}
	if ((!((!f) == IsConstructor))) {
		return;
	}
	if ((!IsConstructor)) {
		if ((!JB_FreeIfDead(SC_Class_FirstDestructor(self)))) {
			return;
		}
	}
	if (f->IsWrapper) {
		return;
	}
	if ((!false)) {
		JB_Msg_SyntaxExpect(self->Source, JB_LUB[1435]);
	}
}

void SC_Class_CheckIterator(SCClass* self) {
	{
		Dictionary* _LoopSrcf1 = self->Access;
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf1);
		while (JB_Nav_MoveNext(_navf0)) {
			SCObject* i = ((SCObject*)JB_Nav_Value(_navf0));
			if (JB_Object_FastIsa(i, JB_AsClass(SCIterator))) {
				SC_Iter_Check(((SCIterator*)i), self);
			}
		};
	};
}

void SC_Class_ClassCollect(SCClass* self) {
	SC_Base_Collect(self, self->Source, SC_Base_IsVisible(self), nil);
}

void SC_Class_Constructor(SCClass* self, Message* node, SCBase* parent) {
	SC_Base_Constructor0(self);
	self->Super = nil;
	self->Defawlt = nil;
	self->Modul = nil;
	Array* _tmPf1 = JB_Array__New0();
	self->Properties = JB_Incr(_tmPf1);
	Array* _tmPf2 = JB_Array__New0();
	self->Casts = JB_Incr(_tmPf2);
	Array* _tmPf3 = JB_Array__New0();
	self->Children = JB_Incr(_tmPf3);
	self->Contained = nil;
	self->Signed = nil;
	self->NotConstUwU = nil;
	self->FuncProto = nil;
	self->TheIsFunc = nil;
	self->ConstructorFunc = nil;
	self->DestructorFunc = nil;
	JB_String* _tmPf4 = JB_LUB[0];
	self->CppClass = JB_Incr(_tmPf4);
	self->ClassType = nil;
	self->IsModel = nil;
	self->Behaviour = nil;
	self->ProcessAs = nil;
	self->DataTypeWrapper = nil;
	self->Size = 0;
	self->HasCompareFunc = false;
	self->HasEqualsFunc = false;
	self->IsRole = false;
	self->IsBehaviour = 0;
	self->Depth = 0;
	self->MinOpt = 0;
	self->IsBuiltin = false;
	self->IsDataTypeLike = false;
	self->IsStruct = false;
	self->IsDataType = false;
	self->IsWrapper = 0;
	self->HasSubClass = false;
	self->NoEarlyFree = false;
	self->AutoGeneratedSavers = false;
	self->SavingCanSkip = false;
	self->TreatAsBaseType = false;
	self->IsNotNumeric = false;
	SC__Comp_stClasses++;
	JB_SetRef(node->Obj, self);
	JB_String* _tmPf5 = SC_Class__LoadClassName(node);
	self->Name = JB_Incr(_tmPf5);
	Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyxInt(node, JB_SyxArg, -1));
	if ((!_tmPf0)) {
		JB_Object_SyntaxExpect(nil);
	}
	self->Source = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	self->SourceClass = JB_Incr(node);
	(SC_Base_IsVisibleSet(self, SC__Base_CurrVisibility));
	SCDecl* T = JB_Incr(SC_Decl__New());
	JB_SetRef(T->Type, self);
	self->TypeNormal = JB_Incr(T);
	JB_SetRef(T, SC_Decl_Copy(T, false));
	JB_SetRef(T->Name, JB_LUB[331]);
	T->Strength = kSC_StrSharedParams;
	if (JB_Msg_SyntaxEquals(node, JB_LUB[802], false)) {
		T->PointerCount = 1;
	}
	self->SelfStrong = JB_Incr(T);
	JB_Decr(T);
	self->SaveAs = nil;
	self->TypeInfo = kJB__TC_UnusedType;
	self->Banned = SC_Class_TestBanned(self);
}

SCDecl* SC_Class_ContainedButNotUpgrade(SCClass* self) {
	return self->SelfStrong->Contains;
}

void SC_Class_CreateAlloc(SCClass* self, JB_String* ParseThing, int Extra) {
	if ((!(SC_Class_IsObject(self) and (!self->IsRole)))) {
		return;
	}
	Message* _tmPf0 = JB_Incr(JB_Str_ParseClean(ParseThing));
	Message* src = JB_Incr(((Message*)JB_Ring_First(_tmPf0)));
	JB_Decr(_tmPf0);
	SCFunction* fn = JB_Incr(SC_Mod_NewModuleFunc(self->Modul, src));
	JB_Decr(src);
	JB_SetRef(fn->Refs, SC_CppRefs__New(nil));
	JB_SetRef(fn->Refs->Disturbs, nil);
	fn->AllocCode = (kSC_IsAlloc | Extra);
	if (Extra) {
		(SC_Base_IsVisibleSet(fn, false));
	}
	JB_Decr(fn);
}

void SC_Class_CreateBehaviour(SCClass* self) {
	if ((!SC_Class_IsObject(self))) {
		return;
	}
	if ((!(self->Behaviour))) {
		JB_SetRef(self->Behaviour, SC_Beh__New(self));
	}
	Message* _tmPf0 = JB_Incr(SC_Base_SourceArg(self));
	SC_Beh_CreateFuncTable(self->Behaviour, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_Class_CreateConstructors(SCClass* self) {
	if (SC_Class_IsObject(self)) {
		SCFunction* Con = JB_Incr(SC_Class_FindAllocFunc(self, JB_LUB[1425], true));
		if (self->IsRole) {
			if ((!((!Con) or ((bool)self->Super->ConstructorFunc)))) {
				JB_Msg_SyntaxExpect(Con->Source, JB_LUB[1436]);
			}
			if ((!(Con))) {
				JB_SetRef(Con, self->Super->ConstructorFunc);
			}
			JB_SetRef(self->DestructorFunc, self->Super->DestructorFunc);
			if ((!Con)) {
				JB_Decr(Con);
				return;
			}
		}
		//using;
		MessagePosition _using130 = JB_Msg_SyntaxUsing(self->Source);
		if ((!Con) and (!self->IsWrapper)) {
			JB_SetRef(Con, SC_Class_CreateEmptyConstructors(self));
		}
		JB_SetRef(self->ConstructorFunc, Con);
		{
			SCFunction* f = JB_Incr(Con);
			while (f) {
				if (f->Cls == self) {
					Message* _tmPf1 = JB_Incr(JB_Msg_NiceCopy(SC__Class_ConstrNew, f->Source));
					SC_Class_NewClassNew(self, f, _tmPf1, 0);
					JB_Decr(_tmPf1);
					Message* _tmPf2 = JB_Incr(JB_Msg_NiceCopy(SC__Class_ConstrLayerNew2, f->Source));
					SC_Class_NewClassNew(self, f, _tmPf2, kSC_IsLayer);
					JB_Decr(_tmPf2);
				}
				JB_SetRef(f, f->NextFunc);
			};
			JB_Decr(f);
		}
		;
		JB_Decr(Con);
		JB_MsgPos_SyntaxUsingComplete((&_using130));
		JB_MsgPos_Destructor((&_using130));
	}
	if ((!self->IsRole)) {
		bool NeedsDestructor = SC_Class_IsObject(self) or (self->IsStruct and SC_Class_HasObjectProperties(self));
		JB_SetRef(self->DestructorFunc, SC_Class_FindAllocFunc(self, JB_LUB[812], (!NeedsDestructor)));
	}
}

SCFunction* SC_Class_CreateEmptyConstructors(SCClass* self) {
	SCFunction* f = JB_Incr(SC_Class_CreateEmptyFunc(self, JB_LUB[1425], JB_LUB[0]));
	int pc = SC_Class_PassableCount(self);
	f->AllocCode = (f->AllocCode | kSC_IsEmptyConstructor);
	SCClass* s = JB_Incr(self->Super);
	if (((bool)s) and (s != JB_TypeObject)) {
		Message* l = JB_Incr(SC_Func_prms(s->ConstructorFunc));
		if (JB_Ring_HasChildren(l)) {
			SC_Func_CopyParams(f, l);
			pc = 0;
		}
		JB_Decr(l);
	}
	JB_Decr(s);
	if ((pc >= 1) and (pc <= 8)) {
		SC_Class_AutoConstructor(self);
	}
	JB_SafeDecr(f);
	return f;
}

SCFunction* SC_Class_CreateEmptyFunc(SCClass* self, JB_String* fname, JB_String* cpp_name) {
	SCFunction* rz = nil;
	SC__Base_CurrVisibility = SC_Base_IsVisible(self);
	if ((!(JB_Str_Exists(cpp_name)))) {
		cpp_name = fname;
	}
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[1437]);
	JB_FS_AppendString(_fsf0, fname);
	JB_FS_AppendString(_fsf0, JB_LUB[1438]);
	JB_FS_AppendString(_fsf0, cpp_name);
	JB_FS_AppendString(_fsf0, JB_LUB[1439]);
	JB_String* e = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	Message* msg = JB_Incr(JB_Str_ParseClean(e));
	JB_Decr(e);
	JB_SetRef(rz, ((SCFunction*)SC_Func__NewFunc(msg, self, self->Source)));
	SC_Base_TryAdd(self, msg, rz, fname);
	JB_Decr(msg);
	(SC_Base_IsVisibleSet(rz, false));
	JB_SafeDecr(rz);
	return rz;
}

JB_String* SC_Class_CStructName(SCClass* self) {
	if (self) {
		if ((!self->IsRole)) {
			return ({
				JB_String* _X = self->CppClass;
				if ((!JB_Str_Exists(_X))) {
					_X = JB_Str_unicodesafename(self->Name);
					JB_SetRef(self->CppClass, _X);
				}
				 _X;
			});
		}
		return SC_Class_CStructName(SC_Class_RealClass(self));
	}
	return JB_LUB[0];
}

JB_String* SC_Class_CSuperStructName(SCClass* self) {
	SCClass* sup = JB_Incr(SC_Class_RealSuper(self));
	if ((!sup)) {
		JB_Decr(sup);
		return JB_LUB[907];
	}
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[1081]);
	JB_String* _tmPf1 = JB_Incr(SC_Class_CStructName(sup));
	JB_Decr(sup);
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendByte(_fsf0, ')');
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void SC_Class_DataTypePostLoad(SCClass* self) {
	if ((!(self->IsDataType and (!SC_Class_IsFunc(self))))) {
		return;
	}
	Message* node = JB_Incr(self->SourceClass);
	JB_Decr(node);
	SCClass* s = JB_Incr(self->Super);
	if (s) {
		self->Size = s->Size;
		if ((!self->IsNotNumeric)) {
			self->TypeInfo = s->TypeInfo;
			if ((!(self->Defawlt))) {
				JB_SetRef(self->Defawlt, s->Defawlt);
			}
		}
	}
	JB_Decr(s);
	JB_String* N = JB_Incr(JB_Str_LowerCase(self->Name));
	Dictionary* _tmPf1 = JB_Incr(JB_TC__Types());
	DTWrap* _tmPf2 = JB_Incr(JB_Wrap__NewInt(255));
	DTWrap* _tmPf0 = JB_Incr(((DTWrap*)JB_Dict_Value(_tmPf1, N, _tmPf2)));
	JB_Decr(_tmPf2);
	JB_Decr(_tmPf1);
	JB_Decr(N);
	DataTypeCode T = ((DataTypeCode)JB_Wrap_Value(_tmPf0));
	JB_Decr(_tmPf0);
	if ((!(T != 255))) {
		return;
	}
	self->Size = JB_TC_ByteSize(T);
	self->TypeInfo = T;
	self->IsBuiltin = true;
	if ((!(JB_TC_IsInt(T) and (!self->Signed)))) {
		return;
	}
	SCClass* s2 = JB_Incr(JB_TC_CreateSignedStuff(T));
	if ((!s2)) {
		JB_Decr(s2);
		return;
	}
	JB_SetRef(self->Signed, s2->TypeNormal);
	JB_SetRef(s2->Signed, self->TypeNormal);
	JB_Decr(s2);
}

void SC_Class_DeclModel(SCClass* self) {
	if ((!(JB_Array_SyntaxCast(self->Properties)))) {
		JB_Msg_SyntaxExpect(self->Source, JB_LUB[1440]);
		return;
	}
	SCDecl* Inst = JB_Incr(((SCDecl*)JB_Array_Last(self->Properties)));
	JB_Decr(Inst);
	SCObject* Dcl = JB_Incr(SC_Base_SyntaxAccess(self->Modul, JB_LUB[1441]));
	if (JB_Object_FastIsa(Dcl, JB_AsClass(SCDecl))) {
		SC_Decl_MakeGameFlying(((SCDecl*)Dcl), self);
	}
	 else {
		debugger;
	}
	JB_Decr(Dcl);
}

void SC_Class_destructor(SCClass* self) {
	JB_Decr(self->Super);
	JB_Decr(self->Defawlt);
	JB_Decr(self->SourceClass);
	JB_Decr(self->Modul);
	JB_Decr(self->Properties);
	JB_Decr(self->TypeNormal);
	JB_Decr(self->Casts);
	JB_Decr(self->Children);
	JB_Decr(self->Contained);
	JB_Decr(self->Signed);
	JB_Decr(self->NotConstUwU);
	JB_Decr(self->FuncProto);
	JB_Decr(self->TheIsFunc);
	JB_Decr(self->ConstructorFunc);
	JB_Decr(self->DestructorFunc);
	JB_Decr(self->CppClass);
	JB_Decr(self->ClassType);
	JB_Decr(self->SelfStrong);
	JB_Decr(self->IsModel);
	JB_Decr(self->Behaviour);
	JB_Decr(self->SaveAs);
	JB_Decr(self->ProcessAs);
	JB_Decr(self->DataTypeWrapper);
	SC_Base_destructor(self);
}

SCFunction* SC_Class_DoSaver(SCClass* self, JB_String* name, int stage) {
	if (SC_Class_IsA(self, JB_TypeString)) {
		return nil;
	}
	SCObject* Fn = JB_Incr(SC_Base_SyntaxAccess(self, name));
	if ((!stage) and (!Fn)) {
		SC_Class_StartupSaver(self, name);
	}
	 else if (JB_Object_FastIsa(Fn, JB_AsClass(SCFunction))) {
		if (stage == 1) {
			SC_Func_FillInSaver(((SCFunction*)Fn), name);
		}
		if (stage == 2) {
			SC_Func_ValidateSaver(((SCFunction*)Fn), name);
		}
		JB_SafeDecr(Fn);
		return ((SCFunction*)Fn);
	}
	 else if (stage == 2) {
		if ((!false)) {
			FastString* _fsf0 = JB_Incr(JB_FS__New());
			JB_FS_AppendString(_fsf0, JB_LUB[1442]);
			JB_FS_AppendString(_fsf0, name);
			JB_FS_AppendString(_fsf0, JB_LUB[1443]);
			JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
			JB_Decr(_fsf0);
			JB_Msg_SyntaxExpect(self->Source, _tmPf1);
			JB_Decr(_tmPf1);
		}
	}
	JB_Decr(Fn);
	return nil;
}

void SC_Class_FillInterFaceIn(SCClass* self, SCFunction* fn, bool Late) {
	SCClass* Interface = JB_Incr(SC_Class_InterfaceForBehaviour(self, fn));
	if ((!Interface)) {
		JB_Decr(Interface);
		return;
	}
	Message* prm = JB_Incr(JB_Msg_FindSyx(fn->Source, JB_SyxPrm));
	if ((!prm)) {
		JB_Msg_SyntaxExpect(fn->Source, JB_LUB[1444]);
		JB_Decr(Interface);
		JB_Decr(prm);
		return;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(prm)));
	JB_Decr(prm);
	SC_Func_DeclsProtoType(fn, _tmPf0, Interface, Late);
	JB_Decr(_tmPf0);
	JB_Decr(Interface);
}

void SC_Class_FillInterFaceWrapper(SCClass* self, SCFunction* fn) {
	SCClass* Interface = JB_Incr(SC_Class_InterfaceForBehaviour(self, fn));
	if ((!Interface)) {
		JB_Decr(Interface);
		return;
	}
	Message* prm = JB_Incr(JB_Msg_FindSyx(fn->Source, JB_SyxPrm));
	if ((!prm)) {
		JB_Msg_SyntaxExpect(fn->Source, JB_LUB[1444]);
		JB_Decr(Interface);
		JB_Decr(prm);
		return;
	}
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(prm)));
	JB_Decr(prm);
	SC_Func_DeclsProtoTypeRemove(fn, Interface, _tmPf2, true, false);
	JB_Decr(_tmPf2);
	JB_Decr(Interface);
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	Message* prms = JB_Incr(JB_Msg_FindNested(fn->Source, JB_SyxSThg, JB_LUB[526], false));
	if ((!prms)) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(prms);
		return;
	}
	Message* WriteTo = JB_Incr(((Message*)JB_Ring_Parent(prms)));
	WriteTo->Func = JB_SyxPrm;
	JB_Tree_Remove(prms);
	JB_Decr(prms);
	MessagePosition Using = JB_Msg_SyntaxUsing(fn->Source);
	Message* CopyFrom = JB_Incr(((Message*)JB_Tree_Get(fn->Source, 1)));
	JB_FreeIfDead(JB_Msg_Msg(WriteTo, JB_SyxThg, JB_LUB[331]));
	{
		Message* C = JB_Incr(((Message*)JB_Tree_First_(CopyFrom)));
		while (C) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(C)));
			if (JB_Msg_EqualsSyx(C, JB_SyxDecl, false)) {
				Message* it = JB_Incr(JB_Msg_DeclName(C));
				if (it) {
					JB_FreeIfDead(JB_Msg_Msg(WriteTo, JB_SyxThg, it->Name));
				}
				JB_Decr(it);
			}
			JB_SetRef(C, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(C);
		(CopyFrom);
	}
	;
	JB_Decr(CopyFrom);
	JB_Decr(WriteTo);
	JB_MsgPos_Destructor((&Using));
}

SCFunction* SC_Class_FindAllocFunc(SCClass* self, JB_String* fname, bool DontCreate) {
	SCFunction* it = JB_Incr(SC_Class_FindSpecialFunc(self, fname, false));
	if (it) {
		JB_SafeDecr(it);
		return it;
	}
	JB_Decr(it);
	if ((!DontCreate) and (!self->IsWrapper)) {
		return SC_Class_CreateEmptyFunc(self, fname, JB_LUB[0]);
	}
	return nil;
}

Message* SC_Class_FindDecl(SCClass* self, JB_String* name) {
	{
		Message* _LoopSrcf2 = SC_Base_SourceArg(self);
		Message* l = ((Message*)JB_Tree_First_(_LoopSrcf2));
		while (l) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(l));
			if (JB_Msg_EqualsSyx(l, JB_SyxDecl, false)) {
				if (JB_Msg_SyntaxEquals(JB_Msg_DeclName(l), name, true)) {
					return l;
				}
			}
			l = _Nf1;
		};
		(_LoopSrcf2);
	}
	;
	return nil;
}

SCFunction* SC_Class_FindFunc(SCClass* self, JB_String* keyword, bool CheckParents, bool DoError) {
	JB_Incr(keyword);
	JB_SetRef(keyword, JB_Str_LowerCase(keyword));
	{
		SCClass* b = JB_Incr(self);
		while (b) {
			if (b->Access) {
				SCObject* o = JB_Incr(((SCObject*)JB_Dict_ValueStr(b->Access, keyword)));
				if ((!o)) {
					int a = 1;
				}
				 else if (JB_Object_FastIsa(o, JB_AsClass(SCFunction))) {
					JB_Decr(keyword);
					JB_Decr(b);
					JB_SafeDecr(o);
					return ((SCFunction*)o);
				}
				 else {
					if (SC_Class_IsObject(self)) {
						if (DoError) {
							FastString* _fsf0 = JB_Incr(JB_FS__New());
							JB_FS_AppendByte(_fsf0, '\'');
							JB_FS_AppendString(_fsf0, keyword);
							JB_FS_AppendString(_fsf0, JB_LUB[1445]);
							JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
							JB_Decr(_fsf0);
							JB_Msg_SyntaxExpect(b->Source, _tmPf2);
							JB_Decr(_tmPf2);
							JB_Decr(keyword);
							JB_Decr(b);
							JB_Decr(o);
							return nil;
						}
					}
				}
				JB_Decr(o);
			}
			if ((!(CheckParents))) {
				JB_Decr(keyword);
				JB_Decr(b);
				return nil;
			}
			JB_SetRef(b, b->Super);
		};
		JB_Decr(b);
	}
	;
	JB_Decr(keyword);
	return nil;
}

SCFunction* SC_Class_FindSpecialFunc(SCClass* self, JB_String* keyword, bool CheckParents) {
	return SC_Class_FindFunc(self, keyword, CheckParents, true);
}

SCFunction* SC_Class_FirstDestructor(SCClass* self) {
	{
		SCClass* p = JB_Incr(self);
		while (p) {
			SCFunction* fn = JB_Incr(p->DestructorFunc);
			if ((!fn)) {
				int a = 1;
			}
			 else if (((bool)p->IsWrapper) and ((bool)p->Super)) {
				JB_Decr(p);
				JB_SafeDecr(fn);
				return fn;
			}
			 else if (SC_Class_HasStuffToHandleInDestructor(p) or ({
				Message* _tmP219 = JB_Incr(SC_Base_SourceArg(fn));
				bool _tmP218 = JB_Ring_HasChildren(_tmP219);
				JB_Decr(_tmP219);
				 _tmP218;
			})) {
				JB_Decr(p);
				JB_SafeDecr(fn);
				return fn;
			}
			JB_Decr(fn);
			JB_SetRef(p, p->Super);
		};
		JB_Decr(p);
	}
	;
	return nil;
}

void SC_Class_GetDepth(SCClass* self) {
	if (self->Super) {
		self->Depth = (self->Super->Depth + 1);
	}
}

SCClass* SC_Class_GetFlyingMemClassFor(SCClass* self) {
	return SC_Comp__FindClass(JB_LUB[1446], self->IsModel);
}

SCDecl* SC_Class_GetFlyingMemory(SCClass* self, Message* exp) {
	SCObject* Decl = JB_Incr(SC_Base_SyntaxAccess(self->Modul, JB_LUB[1441]));
	if (JB_Object_FastIsa(Decl, JB_AsClass(SCDecl))) {
		if ((!(JB_Msg_EqualsSyx(exp, JB_SyxThg, false)))) {
			JB_Object_SyntaxExpect(nil);
			JB_Decr(Decl);
			return nil;
		}
		Message* Thg = JB_Incr((JB_Syx_Msg(JB_SyxThg, exp->Name)));
		JB_SetRef(Thg->Obj, Decl);
		JB_Tree_SyntaxAppend(exp, Thg);
		JB_Decr(Thg);
		JB_Msg_BecomeStr(exp, JB_SyxBRel, JB_LUB[417]);
		SCDecl* _tmPf0 = JB_Incr(SC_Decl_MakePointer(((SCDecl*)Decl)));
		JB_Decr(Decl);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(Decl);
	return nil;
}

SCIterator* SC_Class_GetIteratorAny(SCClass* self, JB_String* name, Message* node) {
	if ((!(JB_Str_Exists(name)))) {
		name = JB_LUB[1447];
	}
	{
		SCClass* c = self;
		while (c) {
			SCObject* R = SC_Base_SyntaxAccess(c, name);
			if (JB_Object_FastIsa(R, JB_AsClass(SCIterator))) {
				return ((SCIterator*)R);
			}
			c = c->Super;
		};
	}
	;
	if ((!false)) {
		FastString* _fsf0 = JB_FS__New();
		JB_FS_AppendString(_fsf0, JB_LUB[1448]);
		JB_FS_AppendString(_fsf0, name);
		JB_FS_AppendString(_fsf0, JB_LUB[1449]);
		JB_FS_AppendString(_fsf0, self->Name);
		JB_Msg_SyntaxExpect(node, JB_FS_GetResult(_fsf0));
	}
	return nil;
}

SCClass* SC_Class_GoUpTo(SCClass* self, int d) {
	SCClass* s = JB_Incr(self);
	while (((bool)s) and (s->Depth > d)) {
		JB_SetRef(s, s->Super);
	};
	JB_SafeDecr(s);
	return s;
}

bool SC_Class_HasGameType(SCClass* self) {
	return (self->TypeInfo != kJB__TC_UnusedType);
}

bool SC_Class_HasObjectProperties(SCClass* self) {
	{
		Array* _LoopSrcf1 = JB_Incr(self->Properties);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* p = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0)));
			if (SC_Decl_IsNormalObject(p)) {
				JB_Decr(_LoopSrcf1);
				JB_Decr(p);
				return true;
			}
			JB_Decr(p);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	return false;
}

bool SC_Class_HasOperator(SCClass* self, JB_String* op) {
	SCObject* obj = SC_Base_SyntaxAccess(self, op);
	if (JB_Object_FastIsa(obj, JB_AsClass(SCFunction))) {
		return true;
	}
	return false;
}

bool SC_Class_HasStuffToHandleInDestructor(SCClass* self) {
	{
		SCClass* p = self;
		while (p) {
			{
				Array* _LoopSrcf2 = p->Properties;
				int _if1 = 0;
				while (_if1 < JB_Array_Size(_LoopSrcf2)) {
					SCDecl* d = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if1));
					if (SC_Decl_HasStructDestructor(d)) {
						return true;
					}
					if (SC_Decl_IsReffable(d, true)) {
						return true;
					}
					_if1++;
				};
			}
			;
			p = p->Super;
		};
	}
	;
	return false;
}

SCClass* SC_Class_InterfaceFor(SCClass* self, JB_String* name, Message* errplace) {
	SCModule* Result = nil;
	{
		SCClass* C = JB_Incr(self);
		while (C) {
			SCBehaviour* B = JB_Incr(C->Behaviour);
			if ((!B)) {
				JB_Msg_SyntaxExpect(errplace, nil);
				JB_Decr(Result);
				JB_Decr(C);
				JB_Decr(B);
				return nil;
			}
			SCModule* I = JB_Incr(((SCModule*)JB_Dict_ValueStr(B->Interfaces, name)));
			JB_Decr(B);
			if (I) {
				JB_SetRef(Result, SC_Mod_OperatorOneOrOther(Result, I));
			}
			JB_Decr(I);
			JB_SetRef(C, C->Super);
		};
		JB_Decr(C);
	}
	;
	if ((!Result)) {
		JB_Msg_SyntaxExpect(errplace, JB_LUB[1450]);
		JB_Decr(Result);
		return nil;
	}
	SCClass* _tmPf1 = JB_Incr(Result->Cls);
	JB_Decr(Result);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCClass* SC_Class_InterfaceForBehaviour(SCClass* self, SCFunction* Fn) {
	JB_String* name = JB_Incr(JB_Str_LowerCase(Fn->Name));
	if (JB_Str_UnderScoreAtAnyEnd(name)) {
		JB_SetRef(name, JB_Str_InterfaceToBehaviour(name));
	}
	if (JB_Str_Last(name, 0) == '0') {
		JB_SetRef(name, JB_Str_Range(name, 0, JB_Str_Length(name) - 1));
	}
	if ((!JB_Str_UnderScoreAtAnyEnd(name))) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(name, JB_LUB[376]));
		JB_SetRef(name, JB_Str_OperatorPlus(JB_LUB[376], _tmPf0));
		JB_Decr(_tmPf0);
	}
	SCClass* _tmPf1 = JB_Incr(SC_Class_InterfaceFor(self, name, Fn->Source));
	JB_Decr(name);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool SC_Class_IsA(SCClass* self, SCClass* S) {
	{
		SCClass* p = self;
		while (p) {
			if (p == S) {
				return true;
			}
			p = p->Super;
		};
	}
	;
	return false;
}

bool SC_Class_IsBehaviourTable(SCClass* self) {
	if ((!self)) {
		return nil;
	}
	return self->IsBehaviour == kSC__Beh_BehaviourTable;
}

bool SC_Class_IsDataTypeOrStruct(SCClass* self) {
	return self->IsDataType or self->IsStruct;
}

bool SC_Class_IsFunc(SCClass* self) {
	return ((bool)self->FuncProto);
}

bool SC_Class_IsInterface(SCClass* self) {
	if ((!self)) {
		return nil;
	}
	return ((bool)(self->IsBehaviour & kSC__Beh_BehaviourProto));
}

bool SC_Class_IsObject(SCClass* self) {
	return ((!self->IsDataType)) and ((!self->IsStruct));
}

bool SC_Class_IsSaveableObject(SCClass* self) {
	if ((!SC_Class_IsObject(self))) {
		return nil;
	}
	JB_String* S = JB_Incr(self->SaveAs);
	bool _tmPf0 = JB_Str_Exists(S) and ((!JB_Str_Equals(S, JB_LUB[106], false)));
	JB_Decr(S);
	return _tmPf0;
}

bool SC_Class_IsSaveableStruct(SCClass* self) {
	if ((!self->IsStruct)) {
		return nil;
	}
	return ((JB_Str_Equals(self->SaveAs, JB_LUB[802], false)));
}

bool SC_Class_IsSTDLib(SCClass* self) {
	return self->Project->IsSTDLib;
}

JB_String* SC_Class_JSStructName(SCClass* self) {
	if (self->IsDataType) {
		return self->Name;
	}
	JB_String* _tmPf0 = JB_Incr(SC_Base_SubProjName(self));
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[568], self->Name));
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf1));
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void SC_Class_LibExport(SCClass* self, FastString* j) {
	JB_bin_enter(j, JB_SyxTmp, self->Name);
	if (SC_Class_IsObject(self)) {
		SCBehaviour* b = JB_Incr(self->Behaviour);
		JB_bin_enter(j, JB_SyxArr, JB_LUB[0]);
		{
			Array* _LoopSrcf1 = JB_Incr(b->WrapperFuncs);
			int _if0 = 0;
			while (_if0 < JB_Array_Size(_LoopSrcf1)) {
				SCFunction* fn = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf1, _if0)));
				JB_bin_add(j, JB_SyxTmp, fn->ExportName, false);
				JB_Decr(fn);
				_if0++;
			};
			JB_Decr(_LoopSrcf1);
		}
		;
		JB_Decr(b);
		JB_bin_up(j, 1);
	}
	 else if ((bool)self->FuncProto) {
		JB_bin_add(j, JB_SyxList, JB_LUB[0], false);
	}
	 else if (self->IsStruct) {
		JB_bin_addint(j, self->Size);
	}
	 else {
		JB_String* _tmPf6 = JB_Incr(JB_Str__Hex(((int)self->TypeInfo)));
		JB_bin_add(j, JB_SyxChar, _tmPf6, false);
		JB_Decr(_tmPf6);
	}
	if (JB_Array_SyntaxCast(self->Children)) {
		JB_bin_enter(j, JB_SyxArg, JB_LUB[0]);
		{
			Array* _LoopSrcf4 = JB_Incr(self->Children);
			int _if3 = 0;
			while (_if3 < JB_Array_Size(_LoopSrcf4)) {
				SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf4, _if3)));
				SC_Class_LibExport(c, j);
				JB_Decr(c);
				_if3++;
			};
			JB_Decr(_LoopSrcf4);
		}
		;
		JB_bin_up(j, 1);
	}
	JB_bin_up(j, 1);
}

void SC_Class_LoadConstructorsAndAllocators(SCClass* self) {
	SC_Base_Use(self);
	SC__Base_CurrVisibility = false;
	SC_Class_CreateConstructors(self);
	if (SC_Class_IsObject(self) and ((bool)self->ConstructorFunc)) {
		JB_String* _tmPf0 = JB_Incr(SC_Class_AllocStr(self));
		SC_Class_CreateAlloc(self, _tmPf0, 0);
		JB_Decr(_tmPf0);
		JB_String* _tmPf1 = JB_Incr(SC_Class_AllocStrLayer(self));
		SC_Class_CreateAlloc(self, _tmPf1, kSC_IsLayer);
		JB_Decr(_tmPf1);
	}
	if (self->Super) {
		if ((!(self->NoEarlyFree))) {
			self->NoEarlyFree = self->Super->NoEarlyFree;
		}
	}
	JB_ClassData_Restore((JB_AsClass(Message)));
}

void SC_Class_LoadContainedType(SCClass* self) {
	SC_Base_Use(self);
	SCClass* it = JB_Incr(self->Super);
	if (it) {
		JB_SetRef(self->Contained, it->Contained);
		JB_SetRef(self->SelfStrong->Contains, it->SelfStrong->Contains);
		if ((!(self->IsNotNumeric))) {
			if ((!(self->Defawlt))) {
				JB_SetRef(self->Defawlt, it->Defawlt);
			}
		}
	}
	JB_Decr(it);
	if ((!(self->Defawlt))) {
		JB_SetRef(self->Defawlt, (JB_Syx_Msg(JB_SyxThg, JB_LUB[106])));
	}
	Message* _tmPf0 = JB_Incr(JB_Msg_FindFlat(self->Source, JB_SyxTmp, JB_LUB[825], false));
	Message* ContainedMsg = JB_Incr(JB_Msg_NeedSyx(_tmPf0, JB_SyxThg));
	JB_Decr(_tmPf0);
	if ((!ContainedMsg)) {
		JB_Decr(ContainedMsg);
		return;
	}
	SCClass* cls = JB_Incr(SC_Comp__AccessStr(ContainedMsg->Name, ContainedMsg));
	JB_Decr(ContainedMsg);
	if ((!cls)) {
		JB_Decr(cls);
		return;
	}
	SCDecl* TN = JB_Incr(cls->TypeNormal);
	JB_Decr(cls);
	JB_SetRef(self->Contained, SC_Decl_Copy(TN, false));
	(SC_Decl_SyntaxIsSet(self->Contained, kSC__SCDeclInfo_upgradeablecontained, true));
	JB_SetRef(self->SelfStrong->Contains, TN);
	JB_Decr(TN);
}

void SC_Class_LoadLinkage(SCClass* self) {
	Message* Arg = SC_Base_LinkagePlace(self);
	if ((!Arg)) {
		return;
	}
	if (JB_Msg_FindClassOption(Arg, JB_LUB[834], JB_LUB[1451])) {
		self->IsWrapper = 2;
	}
	 else if ((bool)JB_Msg_FindClassOption(Arg, JB_LUB[834], nil)) {
		self->IsWrapper = 1;
	}
	self->NoAutoComplete = JB_Msg_FindClassOption(Arg, JB_LUB[1452], nil);
	self->NoEarlyFree = ((bool)JB_Msg_FindClassOption(Arg, JB_LUB[821], JB_LUB[1453]));
	self->TreatAsBaseType = ((bool)JB_Msg_FindClassOption(Arg, JB_LUB[821], JB_LUB[1454]));
	self->MinOpt = JB_Msg_FindClassOption(Arg, JB_LUB[1455], JB_LUB[931]);
}

void SC_Class_LoadProperties(SCClass* self) {
	if (SC_Class_IsBehaviourTable(self)) {
		return;
	}
	JB_SetRef(self->Properties, SC_CollectDecls(self->Source, self->Modul, self, 3));
	if (self->Properties == nil) {
		Array* _tmPf0 = JB_Incr((JB_Array__New0()));
		JB_SetRef(self->Properties, _tmPf0);
		JB_Decr(_tmPf0);
		return;
	}
	SCDecl* it = JB_Incr(((SCDecl*)JB_Array_First(self->Properties)));
	if (it) {
		if (self->IsRole) {
			JB_Msg_SyntaxExpect(it->Source, JB_LUB[1456]);
			JB_Decr(it);
			return;
		}
	}
	JB_Decr(it);
	{
		Array* _LoopSrcf2 = JB_Incr(self->Properties);
		int _if1 = 0;
		while (_if1 < JB_Array_Size(_LoopSrcf2)) {
			SCDecl* p = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if1)));
			if (p->Default) {
				JB_Msg_SyntaxExpect(p->Source, JB_LUB[1457]);
				JB_Decr(_LoopSrcf2);
				JB_Decr(p);
				return;
			}
			JB_Decr(p);
			_if1++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	if (self->IsModel) {
		SC_Class_ModelDecls(self);
	}
}

void SC_Class_LoadSaver(SCClass* self) {
	while (true) {
		Message* _tmPf1 = JB_Incr(SC_Base_SourceArg(self));
		Message* Msg = JB_Incr(JB_Msg_FindFlat(_tmPf1, JB_SyxTmp, JB_LUB[823], false));
		JB_Decr(_tmPf1);
		if ((!Msg)) {
			JB_Decr(Msg);
			break;
		}
		Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(Msg, JB_SyxThg));
		if ((!_tmPf0)) {
			JB_Decr(Msg);
			JB_Decr(_tmPf0);
			return;
		}
		JB_String* S = JB_Incr(JB_Str_LowerCase(_tmPf0->Name));
		JB_Decr(_tmPf0);
		if ((JB_Str_Equals(S, JB_LUB[106], false)) or ((JB_Str_Equals(S, JB_LUB[1458], false)) or (JB_Str_Equals(S, JB_LUB[802], false)))) {
			JB_SetRef(self->SaveAs, S);
		}
		 else if (JB_Str_Equals(S, JB_LUB[1459], false)) {
			self->SavingCanSkip = true;
		}
		 else {
			JB_SetRef(self->SaveAs, S);
			if ((!JB_FreeIfDead(SC_Comp__AccessStr(S, Msg)))) {
				JB_Decr(Msg);
				JB_Decr(S);
				return;
			}
		}
		JB_Decr(S);
		JB_Tree_Remove(Msg);
		JB_Decr(Msg);
	};
	if ((!(JB_Str_Exists(self->SaveAs)))) {
		JB_SetRef(self->SaveAs, SC_Class_LoadSaverSub(self));
	}
}

JB_String* SC_Class_LoadSaverSub(SCClass* self) {
	if (self == JB_TypeBool) {
		return JB_LUB[125];
	}
	 else if (SC_Class_NumericCount(self) == 1) {
		if (SC_Class_IsA(self, JB_Typefloat)) {
			return JB_LUB[123];
		}
		 else if (SC_Class_IsA(self, JB_Typef64)) {
			return JB_LUB[122];
		}
		 else {
			return JB_LUB[116];
		}
	}
	 else if ((bool)SC_Class_NumericCount(self)) {
		DataTypeCode d = self->TypeInfo;
		if (JB_TC_IsFloat(d)) {
			if (JB_TC_ItemBitCount(d) == 32) {
				return JB_LUB[123];
			}
		}
		 else {
			if (JB_TC_ItemBitCount(d) == 32) {
				return JB_LUB[116];
			}
		}
		return JB_LUB[0];
	}
	 else if (SC_Class_IsObject(self)) {
		if (self == JB_TypeString) {
			return JB_LUB[126];
		}
		 else if (self == JB_TypeSaveable) {
			return JB_LUB[137];
		}
	}
	if (self->Super) {
		return self->Super->SaveAs;
	}
	return JB_LUB[0];
}

void SC_Class_LoadSuperclass(SCClass* self) {
	self->Modul->Lookup = SC__Comp_program;
	Message* p = JB_Incr(self->SourceClass);
	if ((!p)) {
		JB_Decr(p);
		return;
	}
	Message* supc = JB_Incr(((Message*)JB_Tree_Get(p, 1)));
	JB_Decr(p);
	SCClass* S = nil;
	if ((!JB_Msg_EqualsSyx(supc, JB_SyxBra, false))) {
		if (supc) {
			if ((!(JB_Msg_EqualsSyx(supc, JB_SyxArg, false)))) {
				JB_Msg_SyntaxExpect(supc, nil);
				JB_Decr(supc);
				JB_Decr(S);
				return;
			}
		}
		if ((SC_Class_IsObject(self)) and (self != JB_TypeObject)) {
			JB_SetRef(S, JB_TypeObject);
		}
	}
	 else {
		Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(supc, JB_SyxThg));
		JB_String* SupName = JB_Incr(JB_Msg_Nyme(_tmPf0));
		JB_Decr(_tmPf0);
		if ((!JB_Str_Exists(SupName))) {
			JB_Decr(supc);
			JB_Decr(S);
			JB_Decr(SupName);
			return;
		}
		JB_SetRef(S, SC_Comp__AccessStr(SupName, supc));
		JB_Decr(SupName);
		if ((!S)) {
			JB_Decr(supc);
			JB_Decr(S);
			return;
		}
		if (self->IsDataType) {
			if ((!(S->IsDataType))) {
				JB_Msg_SyntaxExpect(supc, JB_LUB[1460]);
				JB_Decr(supc);
				JB_Decr(S);
				return;
			}
		}
		 else if (self->IsStruct) {
			if ((!(S->IsStruct))) {
				JB_Msg_SyntaxExpect(supc, JB_LUB[1461]);
				JB_Decr(supc);
				JB_Decr(S);
				return;
			}
		}
		 else {
			if ((!(SC_Class_IsObject(S)))) {
				JB_Msg_SyntaxExpect(supc, JB_LUB[1462]);
				JB_Decr(supc);
				JB_Decr(S);
				return;
			}
		}
	}
	JB_Decr(supc);
	if (S) {
		JB_SetRef(self->Super, S);
		if (SC__Options_ListAllLib) {
			JB_Array_SyntaxAppend(S->Children, self);
		}
		if (self->IsRole) {
			self->Modul->Lookup = S->Modul;
		}
		 else {
			S->HasSubClass = true;
		}
		self->Lookup = S;
		SCBehaviour* b = JB_Incr(self->Behaviour);
		SCBehaviour* SB = JB_Incr(S->Behaviour);
		if (((bool)b) and ((bool)SB)) {
			JB_SetRef(b->FuncTayble->Cls->Super, SB->FuncTayble->Cls);
		}
		JB_Decr(SB);
		JB_Decr(b);
	}
	JB_Decr(S);
}

void SC_Class_ModelDecls(SCClass* self) {
	SCClass* M = JB_Incr(SC_Class_GetFlyingMemClassFor(self));
	if ((!M)) {
		JB_Decr(M);
		return;
	}
	SC_Class_NewDeclInClassModule(self, JB_LUB[1441], M);
	JB_Decr(M);
}

void SC_Class_MoreConstantCollection(SCClass* self) {
	SC_Base_Use(self);
	SC_Base_CollectConstants(self->Modul, self->Source, self->Project);
	JB_ClassData_Restore((JB_AsClass(Message)));
}

bool SC_Class_NeedsExport(SCClass* self) {
	return SC_Base_NeedsExport(self) or SC_Class_IsBehaviourTable(self);
}

void SC_Class_NewClassNew(SCClass* self, SCFunction* con, Message* src, int ExtraCode) {
	src->Position = con->Source->Position;
	SCFunction* result = JB_Incr(SC_Mod_NewModuleFunc(self->Modul, src));
	JB_SetRef(result->CounterPart, con);
	if ((!(con->CounterPart))) {
		Array* _tmPf0 = JB_Incr((JB_Array__New0()));
		JB_SetRef(con->CounterPart, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Array_SyntaxAppend(((Array*)con->CounterPart), result);
	result->AllocCode = (result->AllocCode | (kSC_IsNew | ExtraCode));
	con->AllocCode = kSC_IsConstructor;
	Message* NewParams = JB_Incr(JB_Msg_NeedSyxInt(src, JB_SyxPrm, 1));
	Message* A = JB_Incr(((Message*)JB_Tree_Get(con->Source, 1)));
	Message* rsrc = JB_Incr(result->Source);
	JB_Decr(result);
	Message* TypeStr = JB_Incr(JB_Msg_FindNested(rsrc, JB_SyxThg, JB_LUB[729], false));
	if ((JB_Msg_EqualsSyx(A, JB_SyxPrm, false)) or (JB_Msg_EqualsSyx(A, JB_SyxList, false))) {
		Message* _tmPf3 = JB_Incr(JB_Msg_FindNested(rsrc, JB_SyxDot, nil, false));
		Message* CallParams = JB_Incr(((Message*)JB_Ring_Last(_tmPf3)));
		JB_Decr(_tmPf3);
		{
			Message* dcl = JB_Incr(((Message*)JB_Tree_First_(A)));
			while (dcl) {
				Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(dcl)));
				Message* _tmPf4 = JB_Incr(JB_Msg_NiceCopy(dcl, src));
				JB_Tree_SyntaxAppend(NewParams, _tmPf4);
				JB_Decr(_tmPf4);
				Message* _tmPf6 = JB_Incr(JB_Msg_GetDclName(dcl));
				Message* _tmPf5 = JB_Incr(JB_Msg_NiceCopy(_tmPf6, src));
				JB_Decr(_tmPf6);
				JB_Tree_SyntaxAppend(CallParams, _tmPf5);
				JB_Decr(_tmPf5);
				JB_SetRef(dcl, _Nf2);
				JB_Decr(_Nf2);
			};
			JB_Decr(dcl);
			(A);
		}
		;
		JB_Decr(CallParams);
	}
	JB_Decr(rsrc);
	JB_Decr(A);
	Message* _tmPf7 = JB_Incr(SC_Decl_WriteType(self->TypeNormal, false));
	JB_FreeIfDead(JB_Msg_ReplaceWith(TypeStr, _tmPf7));
	JB_Decr(_tmPf7);
	JB_Decr(TypeStr);
	Message* _tmPf8 = JB_Incr(SC_Decl_WriteDeclFull(self->TypeNormal, JB_LUB[0], false));
	JB_Tree_SyntaxAppend(NewParams, _tmPf8);
	JB_Decr(_tmPf8);
	JB_Decr(NewParams);
}

void SC_Class_NewDeclInClassModule(SCClass* self, JB_String* S, SCClass* T) {
	SCDecl* Dcl = JB_Incr(SC_Decl__New());
	(SC_Decl_TypeContainedSet(Dcl, T));
	JB_SetRef(Dcl->Name, S);
	SC_Base_TryAdd(self->Modul, self->IsModel, Dcl, S);
	JB_Decr(Dcl);
}

SCDecl* SC_Class_NotConst(SCClass* self) {
	if ((!self)) {
		return nil;
	}
	SCDecl* d = JB_Incr(self->NotConstUwU);
	if ((!d)) {
		JB_SetRef(d, self->TypeNormal);
		if (SC_Decl_SyntaxIs(d, kSC__SCDeclInfo_const)) {
			JB_SetRef(d, SC_Decl_Copy(d, false));
			(SC_Decl_IsConstSet(d, false));
		}
		JB_SetRef(self->NotConstUwU, d);
	}
	JB_SafeDecr(d);
	return d;
}

int SC_Class_NumericCount(SCClass* self) {
	if (self) {
		return JB_TC_NumericCount(self->TypeInfo);
	}
	return 0;
}

void SC_Class_OverrideSyntax(SCClass* self) {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	SCFunction* cast = JB_Incr(SC_Class_FindSpecialFunc(self, JB_LUB[1463], false));
	JB_SetRef(self->Casts, JB_Array__New0());
	{
		SCFunction* f = JB_Incr(cast);
		while (f) {
			f->IsInline = true;
			if ((!(JB_Array_SyntaxEquals(f->Args, 1, false)))) {
				JB_Msg_SyntaxExpect(f->Source, JB_LUB[1464]);
			}
			if ((!(f->ReturnType))) {
				JB_Msg_SyntaxExpect(f->Source, JB_LUB[1465]);
				JB_Decr(cast);
				JB_Decr(f);
				return;
			}
			SC_Func_DontWantSameReturnType(f->NextFunc, f);
			JB_Array_SyntaxAppend(self->Casts, f);
			JB_SetRef(f, f->NextFunc);
		};
		JB_Decr(f);
	}
	;
	JB_Decr(cast);
	self->HasCompareFunc = ((bool)JB_FreeIfDead(SC_Class_FindSpecialFunc(self, JB_LUB[680], true)));
	self->HasEqualsFunc = ((bool)JB_FreeIfDead(SC_Class_FindSpecialFunc(self, JB_LUB[677], true)));
	JB_SetRef(self->TheIsFunc, SC_Class_FindSpecialFunc(self, JB_LUB[1466], true));
}

int SC_Class_PassableCount(SCClass* self) {
	int rz = 0;
	{
		Array* _LoopSrcf1 = self->Properties;
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* p = ((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0));
			rz = (rz + SC_Decl_ispassable(p));
			_if0++;
		};
	}
	;
	return rz;
}

bool SC_Class_PreferAddress(SCClass* self) {
	return self->IsStruct and (!self->IsDataTypeLike);
}

void SC_Class_ProcessBehaviours(SCClass* self) {
	SCBehaviour* B = JB_Incr(self->Behaviour);
	if ((!B)) {
		JB_Decr(B);
		return;
	}
	SCModule* Table = JB_Incr(B->FuncTayble);
	if ((!Table)) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(B);
		JB_Decr(Table);
		return;
	}
	SCClass* TableCls = JB_Incr(Table->Cls);
	JB_Decr(Table);
	if ((!TableCls)) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(B);
		JB_Decr(TableCls);
		return;
	}
	{
		DictionaryReader* _FnListf0 = JB_Incr(JB_Dict_Navigate(B->Access));
		while (JB_Nav_MoveNext(_FnListf0)) {
			SCFunction* fn = JB_Incr(((SCFunction*)((SCObject*)JB_Nav_Value(_FnListf0))));
			SC_Class_FillInterFaceIn(self, fn, false);
			JB_Decr(fn);
		};
		JB_Decr(_FnListf0);
	}
	;
	{
		Array* _LoopSrcf3 = JB_Incr(B->WrapperFuncs);
		int _if2 = 0;
		while (_if2 < JB_Array_Size(_LoopSrcf3)) {
			SCFunction* W = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf3, _if2)));
			SC_Class_FillInterFaceWrapper(self, W);
			JB_Decr(W);
			_if2++;
		};
		JB_Decr(_LoopSrcf3);
	}
	;
	{
		Dictionary* _LoopSrcf6 = JB_Incr(B->Interfaces);
		DictionaryReader* _navf5 = JB_Incr(JB_Dict_Navigate(_LoopSrcf6));
		JB_Decr(_LoopSrcf6);
		while (JB_Nav_MoveNext(_navf5)) {
			SCModule* interface = JB_Incr(((SCModule*)JB_Nav_Value(_navf5)));
			SC_Mod_AddInterfaceToTable(interface, TableCls);
			JB_Decr(interface);
		};
		JB_Decr(_navf5);
	}
	;
	JB_Decr(TableCls);
	JB_Decr(B);
}

void SC_Class_ProcessInterfaces(SCClass* self) {
	if ((!SC_Class_IsInterface(self))) {
		return;
	}
	SCFunction* fn = JB_Incr(self->FuncProto);
	if ((!fn)) {
		JB_Decr(fn);
		return;
	}
	SCBase* L = JB_Incr(fn->Lookup);
	if (JB_Object_FastIsa(L, JB_AsClass(SCModule))) {
		SCClass* cls = JB_Incr(((SCModule*)L)->Cls);
		if (cls) {
			if ((!fn->Lookup)) {
				JB_Object_SyntaxExpect(nil);
				JB_Decr(fn);
				JB_Decr(L);
				JB_Decr(cls);
				return;
			}
			SC_Func_AddSelfToFunc(fn, cls);
		}
		JB_Decr(cls);
	}
	JB_Decr(L);
	if ((!(fn->Source))) {
		JB_Str_SyntaxExpect(JB_LUB[1467]);
	}
	JB_Decr(fn);
}

void SC_Class_Reach(SCClass* self, SCBase* from, Message* src) {
	if (self->CurrReacher) {
		return;
	}
	if ((!from)) {
		debugger;
	}
	self->CurrReacher = from;
	SC__Comp_stReachedClass++;
	if (SC__Options_BannedClasses) {
		SC_Class_BannedCheck(self, src);
	}
	if (self->Super) {
		SC_Class_Reach(self->Super, self, nil);
	}
	if (self->Behaviour) {
		SC_Class_Reach(self->Behaviour->FuncTayble->Cls, self, nil);
	}
	if (self->DestructorFunc) {
		SC_Func_FindReached(self->DestructorFunc, self);
	}
	{
		Array* _LoopSrcf1 = self->Properties;
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* d = ((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0));
			SC_Decl_TypeReach(d, self, d->Source);
			SC_Decl_TypeReach(d->Contains, self, d->Source);
			_if0++;
		};
	};
}

void SC_Class_ReachBehaviours(SCClass* self) {
	{
		Dictionary* _LoopSrcf1 = JB_Incr(self->Access);
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf1));
		JB_Decr(_LoopSrcf1);
		while (JB_Nav_MoveNext(_navf0)) {
			SCObject* f = JB_Incr(((SCObject*)JB_Nav_Value(_navf0)));
			if (JB_Object_FastIsa(f, JB_AsClass(SCFunction))) {
				if (SC_Func_IsBehaviour(((SCFunction*)f))) {
					SC_Func_FindReached(((SCFunction*)f), self);
				}
			}
			JB_Decr(f);
		};
		JB_Decr(_navf0);
	};
}

bool SC_Class_real_isa(SCClass* self, SCClass* cls) {
	SCClass* s = SC_Class_RealClass(self);
	SCClass* c = SC_Class_RealClass(cls);
	return SC_Class_IsA(s, cls);
}

SCClass* SC_Class_RealClass(SCClass* self) {
	SCClass* rz = nil;
	rz = self;
	while (rz->IsRole) {
		rz = rz->Super;
	};
	return rz;
}

SCClass* SC_Class_RealSuper(SCClass* self) {
	return SC_Class_RealClass(self->Super);
}

void SC_Class_RenameInterfaces(SCClass* self) {
	SCBehaviour* _tmPf0 = JB_Incr(self->Behaviour);
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return;
	}
	{
		Dictionary* _LoopSrcf2 = JB_Incr(_tmPf0->Interfaces);
		DictionaryReader* _navf1 = JB_Incr(JB_Dict_Navigate(_LoopSrcf2));
		JB_Decr(_LoopSrcf2);
		while (JB_Nav_MoveNext(_navf1)) {
			SCModule* f = JB_Incr(((SCModule*)JB_Nav_Value(_navf1)));
			SCClass* it = JB_Incr(f->Cls);
			JB_Decr(f);
			if (it) {
				JB_SetRef(it->Name, JB_Str_OperatorPlus(it->CppClass, it->Name));
			}
			JB_Decr(it);
		};
		JB_Decr(_navf1);
	}
	;
	JB_Decr(_tmPf0);
}

JB_String* SC_Class_Render(SCClass* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FreeIfDead(SC_SCObject_Render(self, fs));
	if (self->IsStruct) {
		JB_FS_AppendString(fs, JB_LUB[1468]);
	}
	if (SC_Class_NumericCount(self)) {
		JB_FS_AppendString(fs, JB_LUB[1469]);
	}
	if (self->FuncProto) {
		JB_FS_AppendString(fs, JB_LUB[1470]);
	}
	 else if (self->IsDataType) {
		JB_FS_AppendString(fs, JB_LUB[1471]);
	}
	if (self->IsModel) {
		JB_FS_AppendString(fs, JB_LUB[1472]);
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Class_RenderSaveable(SCClass* self, FastString* fs) {
	JB_FS_AppendByte(fs, '"');
	SC_Class_RenderSaveableSub(self, fs);
	JB_FS_RemoveByte(fs, ' ');
	JB_FS_RemoveByte(fs, ',');
	JB_FS_AppendByte(fs, '"');
}

bool SC_Class_RenderSaveableSub(SCClass* self, FastString* fs) {
	if (self->Super) {
		if ((!(SC_Class_RenderSaveableSub(self->Super, fs) or true))) {
			return nil;
		}
	}
	{
		Array* _LoopSrcf1 = JB_Incr(self->Properties);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* p = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0)));
			JB_String* ST = JB_Incr(SC_Decl_IsSaveable(p));
			if (JB_Str_Exists(ST) and (!JB_Str_Equals(ST, JB_LUB[106], false))) {
				if (JB_Str_Equals(ST, JB_LUB[802], false)) {
					JB_SetRef(ST, p->Type->Name);
				}
				JB_FS_AppendByte(fs, '|');
				JB_FS_AppendString(fs, ST);
				JB_FS_AppendByte(fs, '|');
				JB_FS_AppendByte(fs, ' ');
				JB_FS_AppendString(fs, p->Name);
				JB_FS_AppendByte(fs, ',');
				JB_FS_AppendByte(fs, ' ');
			}
			JB_Decr(ST);
			JB_Decr(p);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	return true;
}

void SC_Class_StartupSaver(SCClass* self, JB_String* Name) {
	FastString* dest = JB_Incr(JB_FS__New());
	bool IsStruct = ((JB_Str_Equals(self->SaveAs, JB_LUB[802], false)));
	bool IsSave = (JB_Str_ContainsString(Name, JB_LUB[1473]));
	MessagePosition Using = JB_Msg_SyntaxUsing(self->Source);
	if (IsStruct) {
		JB_FS_AppendString(dest, JB_LUB[1437]);
	}
	 else {
		JB_FS_AppendString(dest, JB_LUB[1474]);
	}
	JB_FS_AppendString(dest, Name);
	if (IsStruct) {
		if (IsSave) {
			JB_FS_AppendString(dest, JB_LUB[1475]);
		}
		 else {
			JB_FS_AppendString(dest, JB_LUB[1476]);
		}
	}
	JB_FS_AppendString(dest, JB_LUB[1090]);
	if (IsStruct) {
		JB_FS_AppendString(dest, JB_LUB[1477]);
	}
	 else if (self->Super != JB_TypeSaveable) {
		JB_FS_AppendString(dest, JB_LUB[1478]);
		JB_FS_AppendString(dest, Name);
		JB_FS_AppendByte(dest, '(');
		if (IsSave) {
			JB_FS_AppendString(dest, JB_LUB[1479]);
		}
		 else {
			JB_FS_AppendString(dest, JB_LUB[1480]);
		}
		JB_FS_AppendByte(dest, ')');
	}
	JB_FS_AppendString(dest, JB_LUB[1481]);
	JB_String* str = JB_Incr(JB_FS_GetResult(dest));
	JB_Decr(dest);
	Message* src = JB_Incr(JB_Str_Parse(str, JB_SyxArg, true));
	JB_Decr(str);
	SCBase* fn = JB_Incr(SC_Base_CollectSub(self, src));
	if (JB_Object_FastIsa(fn, JB_AsClass(SCFunction))) {
		((SCFunction*)fn)->AutoGeneratedSaver = true;
		self->AutoGeneratedSavers = true;
	}
	JB_Decr(fn);
	JB_MsgPos_Destructor((&Using));
	JB_Decr(src);
}

bool SC_Class_StructContainerShipGrabbed(SCClass* self) {
	{
		Array* _LoopSrcf1 = JB_Incr(self->Properties);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* p = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0)));
			SCClass* t = JB_Incr(p->Type);
			if ((p->PointerCount == 0) and (t->IsStruct)) {
				if ((!t->Modul->Grabbed)) {
					JB_Decr(_LoopSrcf1);
					JB_Decr(p);
					JB_Decr(t);
					return nil;
				}
			}
			JB_Decr(t);
			JB_Decr(p);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	return true;
}

bool SC_Class_SuperGrabbed(SCClass* self) {
	SCClass* it = JB_Incr(self->Super);
	if (it) {
		bool _tmPf0 = it->Modul->Grabbed;
		JB_Decr(it);
		return _tmPf0;
	}
	JB_Decr(it);
	return true;
}

bool SC_Class_EqualsType(SCClass* self, SCBaseType d, bool aware) {
	if (((bool)self) and (d > kSC__SCBaseType_Nil)) {
		if (SC_SCBaseType_SyntaxIs(d, kSC__SCBaseType_Object)) {
			return SC_Class_IsObject(self);
		}
		if (SC_SCBaseType_SyntaxIs(d, kSC__SCBaseType_DataType)) {
			return self->IsDataType and (!self->FuncProto);
		}
		if (SC_SCBaseType_SyntaxIs(d, kSC__SCBaseType_Struct)) {
			return self->IsStruct;
		}
		if (SC_SCBaseType_SyntaxIs(d, kSC__SCBaseType_FuncProto)) {
			return ((bool)self->FuncProto);
		}
	}
	return false;
}

bool SC_Class_TestBanned(SCClass* self) {
	return SC_Comp__Banned(self->Name);
}

void SC_Class_TryAddToProject(SCClass* self) {
	if (self->FuncProto) {
		return;
	}
	Message* NameNode = JB_Incr(((Message*)JB_Ring_First(self->SourceClass)));
	SCModule* mod = JB_Incr(SC__Comp_DisamClasses);
	if (JB_Msg_EqualsSyx(NameNode, JB_SyxDot, false)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(NameNode)));
		JB_SetRef(mod, SC_Comp__FindModuleMsg(_tmPf0));
		JB_Decr(_tmPf0);
		if ((!mod)) {
			JB_Decr(NameNode);
			JB_Decr(mod);
			return;
		}
	}
	JB_Decr(NameNode);
	SC_Base_TryAdd(mod, self->Source, self->Modul, self->Name);
	JB_Decr(mod);
}

SCObject* SC_Class_UpCheckSub(SCClass* self, JB_String* name) {
	{
		SCClass* c = self;
		while (c) {
			SCObject* it = SC_Base_SyntaxAccess(c, name);
			if (it) {
				return it;
			}
			c = c->Super;
		};
	}
	;
	return nil;
}

void SC_Class_WriteStructOrUnion(SCClass* self, FastStringCpp* fs) {
	if (self->IsWrapper == 2) {
		JB_FS_AppendString(fs, JB_LUB[1482]);
	}
	 else {
		JB_FS_AppendString(fs, JB_LUB[1483]);
	}
}

SCClass* SC_Class__Alloc() {
	return ((SCClass*)JB_New(SCClass));
}

SCBase* SC_Class__DataType(Message* node, SCBase* name_space, Message* ErrPlace) {
	return SC_Class__DataTypeSub(node, name_space, ErrPlace, nil);
}

SCModule* SC_Class__DataTypeSub(Message* Node, SCBase* Parent, Message* ErrPlace, JB_String* ForInterface) {
	if (JB_Object_FastIsa(Node->Obj, JB_AsClass(SCModule))) {
		return SC__Comp_program;
	}
	SC__Base_CurrVisibility = false;
	JB_FreeIfDead(JB_Msg_GiveArg(Node));
	SCClass* it = JB_Incr(SC_Class__NeuClassSub(Node, Parent, ErrPlace, ForInterface));
	if (it) {
		it->IsDataType = true;
		SC_Class_ClassCollect(it);
		(SC_Decl_IsConstSet(it->TypeNormal, true));
		if (JB_Array_SyntaxCast(it->Properties)) {
			JB_Msg_SyntaxExpect(it->Source, JB_LUB[1484]);
			JB_Decr(it);
			return nil;
		}
		SCModule* m = JB_Incr(it->Modul);
		JB_SetRef(Node->Obj, m);
		JB_Decr(it);
		JB_SafeDecr(m);
		return m;
	}
	JB_Decr(it);
	return nil;
}

Message* SC_Class__DoOneNamedField(Message* c, JB_String* name, JB_String* datatype, int n) {
	//using;
	MessagePosition _using129 = JB_Msg_SyntaxUsing(c);
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[1485]);
	JB_FS_AppendString(_fsf0, c->Name);
	JB_FS_AppendString(_fsf0, JB_LUB[1486]);
	JB_FS_AppendString(_fsf0, datatype);
	JB_FS_AppendString(_fsf0, JB_LUB[1487]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendByte(_fsf0, '[');
	JB_FS_AppendInt32(_fsf0, n);
	JB_FS_AppendString(_fsf0, JB_LUB[1488]);
	JB_FS_AppendString(_fsf0, c->Name);
	JB_FS_AppendString(_fsf0, JB_LUB[1489]);
	JB_FS_AppendString(_fsf0, datatype);
	JB_FS_AppendString(_fsf0, JB_LUB[1490]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendByte(_fsf0, '[');
	JB_FS_AppendInt32(_fsf0, n);
	JB_FS_AppendString(_fsf0, JB_LUB[1491]);
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	Message* src = JB_Incr(JB_Str_Parse(_tmPf1, JB_SyxArg, true));
	JB_Decr(_tmPf1);
	JB_MsgPos_SyntaxUsingComplete((&_using129));
	JB_MsgPos_Destructor((&_using129));
	JB_SafeDecr(src);
	return src;
}

SCBase* SC_Class__ExtendOneFunc(Message* node, SCBase* name_space, Message* ErrPlace) {
	if ((!(SC__Comp_Extend_list))) {
		JB_SetRef(SC__Comp_Extend_list, JB_Msg__NewBasic());
	}
	JB_Tree_SyntaxAppend(SC__Comp_Extend_list, node);
	Message* dot = JB_Incr(((Message*)JB_Ring_First(node)));
	Message* name = JB_Incr(JB_Msg_NeedSyxOK(dot, JB_SyxThg, JB_SyxName));
	JB_Decr(dot);
	if (name) {
		Message* emb = JB_Incr(((Message*)JB_Ring_NextSib(name)));
		if ((!((!JB_Msg_EqualsSyx(emb, JB_SyxPrm, false))))) {
			JB_Msg_SyntaxExpect(emb, JB_LUB[1492]);
		}
		JB_Tree_Remove(emb);
		JB_Decr(emb);
	}
	JB_Decr(name);
	return SC__Comp_program;
}

int SC_Class__Init_() {
	{
	}
	;
	return 0;
}

int SC_Class__InitCode_() {
	{
	}
	;
	JB_SetRef(SC__Class_ConstrNew, JB_Str_ParseClean(JB_LUB[1493]));
	JB_SetRef(SC__Class_ConstrLayerNew, JB_Str_ParseClean(JB_LUB[1494]));
	JB_SetRef(SC__Class_ConstrLayerNew2, JB_Str_ParseClean(JB_LUB[1495]));
	return 0;
}

JB_String* SC_Class__LoadClassName(Message* node) {
	Message* S = JB_Incr(((Message*)JB_Ring_First(node)));
	if ((JB_Msg_EqualsSyx(S, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(S, JB_SyxDot, false))) {
		JB_String* _tmPf0 = JB_Incr(S->Name);
		JB_Decr(S);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(S);
	if (JB_Msg_OperatorIsTmp(node, JB_LUB[794])) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(node, JB_LUB[1496]);
		}
	}
	return JB_LUB[0];
}

SCBase* SC_Class__LoadSyntax(Message* node, SCBase* name_space, Message* ErrPlace) {
	JB_String* name = JB_Incr(JB_Str_UpperFirst(node->Name));
	Message* AlreadyName = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	if ((!AlreadyName)) {
		JB_Decr(name);
		JB_Decr(AlreadyName);
		return nil;
	}
	JB_SetRef(node->Name, JB_LUB[783]);
	JB_String* _tmPf0 = JB_Incr(JB_Str_UpperFirst(AlreadyName->Name));
	JB_SetRef(AlreadyName->Name, JB_Str_OperatorPlus(name, _tmPf0));
	JB_Decr(_tmPf0);
	JB_Decr(AlreadyName);
	JB_Decr(name);
	return SC_Func__NewFunc(node, name_space, ErrPlace);
}

SCBase* SC_Class__NamedPropertyFields(Message* node, SCBase* name_space, Message* ErrPlace) {
	Message* _tmPf5 = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxBra));
	Message* Name = JB_Incr(JB_Msg_NeedSyx(_tmPf5, JB_SyxThg));
	JB_Decr(_tmPf5);
	if ((!Name)) {
		JB_Decr(Name);
		return nil;
	}
	Message* decl = JB_Incr(SC_Class_FindDecl(((SCClass*)name_space), Name->Name));
	if ((!decl)) {
		JB_Decr(Name);
		JB_Decr(decl);
		return nil;
	}
	Message* Type = JB_Incr(JB_Msg_NeedSyx(decl, JB_SyxAcc));
	JB_Decr(decl);
	if ((!Type)) {
		JB_Decr(Name);
		JB_Decr(Type);
		return nil;
	}
	Message* Arg = JB_Incr(JB_Msg_NeedSyxInt(node, JB_SyxArg, 1));
	if ((!Arg)) {
		JB_Decr(Name);
		JB_Decr(Type);
		JB_Decr(Arg);
		return nil;
	}
	Message* DataType = JB_Incr(JB_Msg_NeedSyx(Type, JB_SyxThg));
	if ((!DataType)) {
		JB_Decr(Name);
		JB_Decr(Type);
		JB_Decr(Arg);
		JB_Decr(DataType);
		return nil;
	}
	SCClass* Cls = JB_Incr(SC_Comp__SyntaxAccess(DataType));
	JB_Decr(DataType);
	if ((!Cls)) {
		JB_Decr(Name);
		JB_Decr(Type);
		JB_Decr(Arg);
		JB_Decr(Cls);
		return nil;
	}
	Message* _tmPf6 = JB_Incr(JB_Msg_NeedSyxInt(Type, JB_SyxArr, 1));
	JB_Decr(Type);
	Message* CountMsg = JB_Incr(JB_Msg_NeedSyx(_tmPf6, JB_SyxNum));
	JB_Decr(_tmPf6);
	if ((!CountMsg)) {
		JB_Decr(Name);
		JB_Decr(Arg);
		JB_Decr(Cls);
		JB_Decr(CountMsg);
		return nil;
	}
	Message* Consts = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
	int Count = JB_Msg_Int(CountMsg, 0);
	int Found = 0;
	{
		Message* c = JB_Incr(((Message*)JB_Tree_First_(Arg)));
		while (c) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(c)));
			if ((!((!JB_Ring_HasChildren(c)) and ((JB_Msg_EqualsSyx(c, JB_SyxTmp, false)))))) {
				JB_Msg_SyntaxExpect(c, nil);
				JB_Decr(Name);
				JB_Decr(Arg);
				JB_Decr(Cls);
				JB_Decr(CountMsg);
				JB_Decr(Consts);
				JB_Decr(c);
				JB_Decr(_Nf1);
				return nil;
			}
			Message* src = JB_Incr(SC_Class__DoOneNamedField(c, Name->Name, Cls->Name, Found));
			if ((!src)) {
				JB_Decr(Name);
				JB_Decr(Arg);
				JB_Decr(Cls);
				JB_Decr(CountMsg);
				JB_Decr(Consts);
				JB_Decr(c);
				JB_Decr(_Nf1);
				JB_Decr(src);
				return nil;
			}
			Message* getter = JB_Incr(((Message*)JB_Ring_First(src)));
			Message* setter = JB_Incr(((Message*)JB_Ring_NextSib(getter)));
			(src);
			JB_Decr(src);
			Message* _tmPf7 = JB_Incr(({
				Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
				JB_String* _tmPf9 = JB_Incr(JB_Str_OperatorPlus(Name->Name, c->Name));
				Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxThg, _tmPf9));
				JB_Decr(_tmPf9);
				JB_Tree_SyntaxAppend(__imPf2, (_tmPf8));
				JB_Decr(_tmPf8);
				Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[541]));
				JB_Tree_SyntaxAppend(__imPf2, (_tmPf10));
				JB_Decr(_tmPf10);
				JB_Msg_AppendNum(__imPf2, Found);
				JB_SafeDecr(__imPf2);
				 __imPf2;
			}));
			JB_Tree_SyntaxAppend(Consts, _tmPf7);
			JB_Decr(_tmPf7);
			SC_Base_CollectOne(name_space, getter, false);
			JB_Decr(getter);
			SC_Base_CollectOne(name_space, setter, false);
			JB_Decr(setter);
			Found++;
			JB_SetRef(c, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(c);
		(Arg);
	}
	;
	JB_Decr(Cls);
	JB_Decr(Arg);
	JB_Decr(Name);
	if ((!(Count >= Found))) {
		JB_Msg_SyntaxExpect(CountMsg, JB_LUB[1497]);
		JB_Decr(CountMsg);
		JB_Decr(Consts);
		return nil;
	}
	JB_Decr(CountMsg);
	Message* _tmPf11 = JB_Incr(({
		Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
		Message* _tmPf12 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1498]));
		JB_Tree_SyntaxAppend(__imPf3, (_tmPf12));
		JB_Decr(_tmPf12);
		Message* _tmPf13 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[541]));
		JB_Tree_SyntaxAppend(__imPf3, (_tmPf13));
		JB_Decr(_tmPf13);
		JB_Msg_AppendNum(__imPf3, Found);
		JB_SafeDecr(__imPf3);
		 __imPf3;
	}));
	JB_Tree_SyntaxAppend(Consts, _tmPf11);
	JB_Decr(_tmPf11);
	Message* _tmPf14 = JB_Incr(SC_Base_SourceArg(name_space));
	Message* _tmPf15 = JB_Incr(({
		Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[809])));
		JB_Tree_SyntaxAppend(__imPf4, Consts);
		JB_SafeDecr(__imPf4);
		 __imPf4;
	}));
	JB_Decr(Consts);
	JB_Tree_SyntaxAppend(_tmPf14, _tmPf15);
	JB_Decr(_tmPf15);
	JB_Decr(_tmPf14);
	JB_Tree_Remove(node);
	return SC__Comp_program;
}

SCBase* SC_Class__NeuClass(Message* node, SCBase* name_space, Message* ErrPlace) {
	SCClass* it = JB_Incr(SC_Class__NeuClassSub(node, name_space, ErrPlace, nil));
	if (it) {
		SC_Class_ClassCollect(it);
		SCModule* _tmPf0 = JB_Incr(it->Modul);
		JB_Decr(it);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(it);
	return nil;
}

SCClass* SC_Class__NeuClassSub(Message* node, SCBase* parent, Message* ErrPlace, JB_String* ForInterface) {
	if ((!JB_Str_Exists(ForInterface))) {
		if ((!(parent == SC__Comp_program))) {
			JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[990]);
			return nil;
		}
	}
	Message* arg = JB_Incr(JB_Msg_GiveArg(node));
	SCClass* cls = JB_Incr(SC_Class__New(node, parent));
	cls->IsRole = ((JB_Msg_SyntaxEquals(node, JB_LUB[795], true)));
	Message* SA = JB_Incr(SC_Base_SourceArg(cls));
	JB_Decr(SA);
	SC_Class_LoadLinkage(cls);
	JB_Array_SyntaxAppend(SC__Comp_ClassList, cls);
	Message* Static = JB_Incr(JB_Msg_FindFlat(arg, JB_SyxTmp, JB_LUB[617], false));
	SC_MoveFutureStaticsIn(Static);
	JB_SetRef(cls->Modul, ((SCModule*)SC_Mod__Neu(Static, cls, ErrPlace)));
	JB_Decr(Static);
	if ((!JB_Str_Exists(ForInterface))) {
		int a = 1;
	}
	 else if (JB_Object_FastIsa(parent, JB_AsClass(SCModule))) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[376]);
		JB_String* _tmPf1 = JB_Incr(JB_Str_unicodesafename(((SCModule*)parent)->Cls->Name));
		JB_FS_AppendString(_fsf0, _tmPf1);
		JB_Decr(_tmPf1);
		JB_FS_AppendByte(_fsf0, '_');
		JB_String* _tmPf2 = JB_Incr(JB_Str_unicodesafename(ForInterface));
		JB_FS_AppendString(_fsf0, _tmPf2);
		JB_Decr(_tmPf2);
		JB_FS_AppendString(_fsf0, JB_LUB[376]);
		JB_SetRef(cls->CppClass, JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
	}
	Message* _tmPf3 = JB_Incr(JB_Msg_FindFlat(arg, JB_SyxTmp, JB_LUB[11], false));
	JB_Decr(arg);
	JB_SetRef(cls->Defawlt, ((Message*)JB_Tree_Get(_tmPf3, 0)));
	JB_Decr(_tmPf3);
	if (cls->Defawlt) {
		SC_Func__Tran_Strings(cls->Defawlt, nil);
	}
	JB_SafeDecr(cls);
	return cls;
}

SCBase* SC_Class__NeuRole(Message* node, SCBase* name_space, Message* ErrPlace) {
	SCModule* mod = JB_Incr(((SCModule*)SC_Class__NeuClass(node, name_space, ErrPlace)));
	if ((!mod)) {
		JB_Decr(mod);
		return nil;
	}
	SCClass* cls = JB_Incr(mod->Cls);
	if ((!cls)) {
		JB_Decr(mod);
		JB_Decr(cls);
		return nil;
	}
	cls->IsRole = true;
	if (JB_Array_SyntaxCast(cls->Properties)) {
		SCDecl* _tmPf0 = JB_Incr(((SCDecl*)JB_Array_Value(cls->Properties, 0)));
		JB_Msg_SyntaxExpect(_tmPf0->Source, JB_LUB[1499]);
		JB_Decr(_tmPf0);
		JB_Decr(mod);
		JB_Decr(cls);
		return nil;
	}
	JB_Decr(cls);
	JB_SafeDecr(mod);
	return mod;
}

SCClass* SC_Class__New(Message* node, SCBase* parent) {
	SCClass* __rz__ = ((SCClass*)SC_Class__Alloc());
	if (__rz__) {
		SC_Class_Constructor(__rz__, node, parent);
	}
	return __rz__;
}

SCBase* SC_Class__NewStruct(Message* node, SCBase* name_space, Message* ErrPlace) {
	SCClass* it = JB_Incr(SC_Class__NeuClassSub(node, name_space, ErrPlace, nil));
	if (it) {
		it->IsStruct = true;
		SC_Class_ClassCollect(it);
		SCModule* _tmPf0 = JB_Incr(it->Modul);
		JB_Decr(it);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(it);
	return nil;
}

SCBase* SC_Class__ProcessAs(Message* node, SCBase* name_space, Message* ErrPlace) {
	Message* Name = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	if ((!Name)) {
		JB_Decr(Name);
		return nil;
	}
	SCClass* Cls = JB_Incr(SC_Comp__SyntaxAccess(Name));
	JB_Decr(Name);
	if ((!Cls)) {
		JB_Decr(Cls);
		return nil;
	}
	if (JB_Object_MustBe(name_space, JB_AsClass(SCClass), node)) {
		JB_SetRef(((SCClass*)name_space)->ProcessAs, Cls);
	}
	JB_Decr(Cls);
	return SC__Comp_program;
}

void SC_Class__ProcessExtend(Message* c, bool PreferClass) {
	if ((JB_Msg_EqualsSyx(c, JB_SyxTmp, false)) and ((JB_Msg_SyntaxEquals(c, JB_LUB[805], false)) or (JB_Msg_SyntaxEquals(c, JB_LUB[804], false)))) {
		SC_Class__ProcessExtendOld(c, PreferClass);
		return;
	}
	Message* dot = JB_Incr(JB_Msg_NeedSyx(c, JB_SyxDot));
	Message* name = JB_Incr(JB_Msg_NeedSyxOK(dot, JB_SyxThg, JB_SyxName));
	if ((!name)) {
		JB_Decr(dot);
		JB_Decr(name);
		return;
	}
	SCModule* M = JB_Incr(SC_Comp__FindModuleMsg(name));
	if ((!M)) {
		JB_Decr(dot);
		JB_Decr(name);
		JB_Decr(M);
		return;
	}
	JB_Tree_Clear(dot);
	dot->Func = JB_SyxThg;
	JB_Decr(dot);
	SCBase* B = JB_Incr(M);
	if (JB_Msg_EqualsSyx(name, JB_SyxName, false)) {
		PreferClass = false;
	}
	if (PreferClass and ((bool)M->Cls)) {
		JB_SetRef(B, M->Cls);
	}
	JB_Decr(M);
	SC_Imp_Use(B->Project);
	name->Func = JB_SyxThg;
	JB_Decr(name);
	SCBase* fn = JB_Incr(SC_Func__NewFuncSub(c, B, c));
	if ((fn != SC__Comp_program) and JB_Object_FastIsa(fn, JB_AsClass(SCFunction))) {
		SC_Func_TryAdd(((SCFunction*)fn), B);
	}
	JB_Decr(fn);
	JB_Decr(B);
	SC__Imp_Curr = nil;
}

void SC_Class__ProcessExtendOld(Message* c, bool PreferClass) {
	Message* name = JB_Incr(JB_Msg_NeedSyx(c, JB_SyxThg));
	if ((!name)) {
		JB_Decr(name);
		return;
	}
	Message* arg = JB_Incr(JB_Msg_NeedSyxInt(c, JB_SyxArg, -1));
	if ((!arg)) {
		JB_Decr(name);
		JB_Decr(arg);
		return;
	}
	SCModule* M = JB_Incr(SC_Comp__FindModuleMsg(name));
	JB_Decr(name);
	if ((!M)) {
		JB_Decr(arg);
		JB_Decr(M);
		return;
	}
	SCBase* B = JB_Incr(M);
	if (PreferClass and ((bool)M->Cls)) {
		JB_SetRef(B, M->Cls);
	}
	SC_Imp_Use(B->Project);
	Message* _tmPf0 = JB_Incr(SC_Base_SourceArg(M));
	JB_Decr(M);
	SC_Base_Collect(B, arg, SC__Base_CurrVisibility, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Decr(B);
	JB_Decr(arg);
	SC__Imp_Curr = nil;
}

SCBase* SC_Class__StoreExtend(Message* node, SCBase* name_space, Message* ErrPlace) {
	JB_Tree_SyntaxAppend(SC__Comp_Extend_list, node);
	return SC__Comp_program;
}

SCBase* SC_Class__StoreExtendModule(Message* node, SCBase* name_space, Message* ErrPlace) {
	JB_Array_SyntaxAppend(SC__Comp_Extend_module_list, node);
	return SC__Comp_program;
}


bool SC_Decl_AlreadyContains(SCDecl* self, SCDecl* c) {
	SCDecl* ty = self->Type->Contained;
	if (ty) {
		return SC_Decl_MiniMatch(c, ty, 0);
	}
	return false;
}

SCDecl* SC_Decl_AsPointer(SCDecl* self) {
	SCDecl* rz = nil;
	JB_SetRef(rz, SC_Decl_Copy(self, false));
	rz->PointerCount++;
	JB_SafeDecr(rz);
	return rz;
}

JB_String* SC_Decl_AutoCompleteName(SCDecl* self) {
	JB_String* n = JB_Incr(SC_Decl_RealName(self));
	FastString* fs = JB_Incr(JB_FS__New());
	JB_FS_AppendString(fs, n);
	JB_FS_AppendMultiByte(fs, ' ', JB_int_OperatorMax((32 - JB_Str_Length(n)), 1));
	JB_Decr(n);
	JB_FS_AppendByte(fs, '|');
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteType(self, false));
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(fs, '|');
	JB_String* _tmPf1 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCDecl* SC_Decl_better_numeric(SCDecl* self, SCDecl* o) {
	DataTypeCode S = self->Type->TypeInfo;
	DataTypeCode T = o->Type->TypeInfo;
	if ((S & (~kJB__TC_sign)) == (T & (~kJB__TC_sign))) {
		return self;
	}
	SCClass* cls = JB_TC_better_numeric_sub(S, T);
	if (cls->TypeInfo == S) {
		return self;
	}
	if (cls->TypeInfo == T) {
		return o;
	}
	return cls->TypeNormal;
}

int SC_Decl_ByteSize(SCDecl* self) {
	if (self->PointerCount) {
		return JB_Platform__PointerBytes();
	}
	int n = SC_Class_CalculateSize(self->Type, 0);
	if (self->C_Array) {
		n = (n * self->C_Array);
	}
	return n;
}

bool SC_Decl_CantBeNilInCpp(SCDecl* self) {
	if (self->PointerCount) {
		return nil;
	}
	return ((bool)self->C_Array) or ((self->Type->IsStruct) or (SC_Decl_IsNumeric(self) > 1));
}

bool SC_Decl_CanUseDefault(SCDecl* self) {
	if (SC_Decl_isnil(self)) {
		debugger;
		return false;
	}
	if ((!self->Type)) {
		debugger;
	}
	if (self->Type->IsStruct and (!self->PointerCount)) {
		return (SC_Decl_IsNormalStruct(self));
	}
	return true;
}

bool SC_Decl_CanWrap(SCDecl* self) {
	if (self->PointerCount) {
		return true;
	}
	if (self->Type->FuncProto) {
		return true;
	}
	if (SC_Decl_IsNormalStruct(self)) {
		return nil;
	}
	if (self->C_Array) {
		return nil;
	}
	if ((!(self->Type->TypeInfo != kJB__TC_UnusedType))) {
		return nil;
	}
	return true;
}

bool SC_Decl_CirSub(SCDecl* self, int64 Value) {
	DataTypeCode T = self->Type->TypeInfo;
	int S = JB_TC_ByteSize(T);
	if (S == 8) {
		return true;
	}
	if (JB_TC_IsInt(T)) {
		bool ign = JB_TC_IsSigned(T);
		if (S == 4) {
			if (ign) {
				return (Value >= JB_int__min()) and (Value <= JB_int__max());
			}
			 else {
				return (Value >= -1) and (Value <= 4294967295);
			}
		}
		 else if (S == 2) {
			if (ign) {
				return (Value >= kJB__int16_min) and (Value <= kJB__int16_max);
			}
			 else {
				return (Value >= -1) and (Value <= 65535);
			}
		}
		 else if (S == 1) {
			if (ign) {
				return (Value >= kJB__char_min) and (Value <= kJB__char_max);
			}
			 else {
				return (Value >= -1) and (Value <= 255);
			}
		}
	}
	return true;
}

SCDecl* SC_Decl_ClassActReplace(SCDecl* self, SCClass* cls) {
	if (SC_Decl_MatchC(self, cls->TypeNormal)) {
		return cls->TypeNormal;
	}
	return self;
}

void SC_Decl_CompilerCreatedSet(SCDecl* self, bool Value) {
	self->Info = SC_SCDeclInfo_Set(self->Info, kSC__SCDeclInfo_compilercreated, Value);
}

bool SC_Decl_ConstCheck(SCDecl* self, Message* ln, Message* RN, SCDecl* rc) {
	if (ln) {
		if ((!((JB_Msg_IsAssignable(ln)) and (SC_Decl_SyntaxIsnt(self, kSC__SCDeclInfo_const))))) {
			JB_Msg_SyntaxExpect(ln, JB_LUB[1500]);
			return nil;
		}
		if ((!RN)) {
			return true;
		}
	}
	bool _tmPf0 = ((!RN) or (SC_Decl_ConstInRange(self, RN, rc)));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(RN, JB_LUB[1501]);
		return nil;
	}
	return _tmPf0;
}

bool SC_Decl_ConstInRange(SCDecl* self, Message* RN, SCDecl* rt) {
	if (JB_Msg_EqualsSyx(RN, JB_SyxNum, false)) {
		if (JB_Msg_isint(RN)) {
			return SC_Decl_CirSub(self, JB_Msg_Int(RN, 0));
		}
	}
	 else if (((JB_Msg_EqualsSyx(RN, JB_SyxThg, false))) and ((SC_Decl_SyntaxIs(rt, kSC__SCDeclInfo_const)) and (SC_Decl_IsNormalNumber(rt) and SC_Decl_IsInteger(rt)))) {
		Message* def = rt->Default;
		if (def) {
			return SC_Decl_CirSub(self, JB_Msg_Int(def, 0));
		}
	}
	return true;
}

void SC_Decl_Constructor(SCDecl* self) {
	SC_SCObject_Constructor(self);
	self->PointerCount = 0;
	self->AllocSource = 0;
	self->Strength = 0;
	self->Setter = nil;
	self->IsLookupOnly = nil;
	JB_String* _tmPf0 = JB_LUB[0];
	self->StringData = JB_Incr(_tmPf0);
	self->AutoCastTo = nil;
	self->Contains = nil;
	self->Default = nil;
	self->Type = nil;
	self->C_Array = 0;
	self->Info = 0;
	self->DRegister = ((AsmReg){});
}

SCDecl* SC_Decl_ContainedNilfix(SCDecl* self) {
	SCDecl* rz = nil;
	SCClass* t = JB_Incr(self->Type);
	JB_SetRef(rz, ((SCDecl*)JB_Ternary(t->TypeNormal == self, SC_Decl_Copy(self, false), self)));
	JB_SetRef(rz->Contains, SC_Class_ContainedButNotUpgrade(t));
	JB_Decr(t);
	JB_SafeDecr(rz);
	return rz;
}

SCDecl* SC_Decl_ContainedReplace(SCDecl* self, SCClass* DotCls, SCDecl* contains, bool NeedsName) {
	if ((SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_upgradeablecontained)) and ((bool)contains)) {
		if ((!NeedsName) and SC_Decl_SameForReplace(self, contains)) {
			return contains;
		}
		SCDecl* C = SC_Decl_Copy(contains, false);
		if ((!C)) {
			return nil;
		}
		((SC_Decl_SyntaxIsSet(C, kSC__SCDeclInfo_borrowed, SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_borrowed))));
		C->PointerCount = self->PointerCount;
		C->C_Array = self->C_Array;
		if (NeedsName) {
			JB_SetRef(C->Name, self->Name);
			((SC_Decl_SyntaxIsSet(C, kSC__SCDeclInfo_upgradeablecontained, (C->Type != self->Type))));
		}
		return C;
	}
	SCDecl* goddamn = self->Contains;
	if (goddamn) {
		if ((SC_Decl_SyntaxIs(goddamn, kSC__SCDeclInfo_upgradeablecontained)) and (goddamn != contains)) {
			SCDecl* result = SC_Decl_Copy(self, false);
			JB_SetRef(result->Contains, contains);
			return result;
		}
	}
	return self;
}

bool SC_Decl_ContainsMatch(SCDecl* self, SCDecl* o, int TypeCast) {
	if (((bool)(TypeCast & kSC_TypeCastIgnoreContained))) {
		return true;
	}
	SCDecl* oc = SC_Decl_reallycontains(o);
	SCDecl* sc = SC_Decl_reallycontains(self);
	if ((oc == sc) or (!(((bool)sc) and ((bool)oc)))) {
		return true;
	}
	if ((!o->Contains)) {
		return true;
	}
	return JB_int_IsNormalMatch(SC_Decl_Match(sc, oc, 0, nil));
}

SCDecl* SC_Decl_Copy(SCDecl* self, bool ForNewVariable) {
	SCDecl* dcl = JB_Incr(SC_Decl__New());
	SC_Decl_CopyTypeInfoTo(self, dcl);
	(SC_Decl_IsConstSet(dcl, SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_const)));
	((SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_api, SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_api))));
	(SC_Decl_IsStaticSet(dcl, SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_static)));
	((SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_borrowed, (!ForNewVariable) and (SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_borrowed)))));
	JB_SetRef(dcl->Name, self->Name);
	JB_SetRef(dcl->Default, self->Default);
	dcl->Strength = self->Strength;
	JB_SafeDecr(dcl);
	return dcl;
}

void SC_Decl_CopyTypeInfoTo(SCDecl* self, SCDecl* Dcl) {
	JB_SetRef(Dcl->Type, self->Type);
	Dcl->PointerCount = self->PointerCount;
	JB_SetRef(Dcl->Contains, self->Contains);
	((SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_upgradeablecontained, SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_upgradeablecontained))));
	JB_SetRef(Dcl->AutoCastTo, self->AutoCastTo);
	Dcl->C_Array = self->C_Array;
	(SC_Decl_CompilerCreatedSet(Dcl, SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_compilercreated)));
}

Message* SC_Decl_CreateDefault(SCDecl* self, Message* errs, bool isfunc) {
	if (SC_Decl_CantBeNilInCpp(self)) {
		if (isfunc) {
			return SC_Decl_CreateStructNil(self, errs);
		}
		return nil;
	}
	if (self->PointerCount) {
		if (isfunc) {
			return JB_Msg_createnil(errs);
		}
		return nil;
	}
	return JB_Msg_NiceCopy(self->Type->Defawlt, errs);
}

Message* SC_Decl_CreateSimpleTypeCast(SCDecl* self, Message* exp) {
	Message* rz = nil;
	Message* Curr = JB_Incr(exp);
	while (JB_Msg_EqualsSyx(Curr, JB_SyxBra, false)) {
		JB_SetRef(Curr->Obj, self);
		JB_SetRef(Curr, ((Message*)JB_Ring_First(Curr)));
	};
	JB_Decr(Curr);
	JB_SetRef(rz, JB_Syx_Msg(JB_SyxType, JB_LUB[1502]));
	JB_FreeIfDead(JB_Msg_ReplaceWith(exp, rz));
	JB_Tree_SyntaxAppend(rz, exp);
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteType(self, false));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SetRef(rz->Obj, self);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Decl_CreateStructNil(SCDecl* self, Message* errs) {
	Message* rz = nil;
	//using;
	MessagePosition _using127 = JB_Msg_SyntaxUsing(errs);
	Message* Arg = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
	JB_SetRef(Arg->Obj, self);
	if (self->C_Array) {
		JB_Decr(rz);
		JB_MsgPos_Destructor((&_using127));
		JB_SafeDecr(Arg);
		return Arg;
	}
	JB_SetRef(rz, ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxType, JB_LUB[1502])));
		JB_Tree_SyntaxAppend(__imPf0, Arg);
		Message* _tmPf1 = JB_Incr(SC_Decl_WriteType(self, false));
		JB_Tree_SyntaxAppend(__imPf0, _tmPf1);
		JB_Decr(_tmPf1);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	JB_Decr(Arg);
	JB_SetRef(rz->Obj, self);
	JB_MsgPos_SyntaxUsingComplete((&_using127));
	JB_SafeDecr(rz);
	JB_MsgPos_Destructor((&_using127));
	return rz;
}

void SC_Decl_destructor(SCDecl* self) {
	JB_Decr(self->IsLookupOnly);
	JB_Decr(self->StringData);
	JB_Decr(self->AutoCastTo);
	JB_Decr(self->Contains);
	JB_Decr(self->Default);
	JB_Decr(self->Type);
	SC_SCObject_destructor(self);
}

Message* SC_Decl_ExpectMatch(SCDecl* self, SCDecl* O, int TypeCast, Message* exp, Message* ErrNode) {
	int Matched = SC_Decl_Match(self, O, TypeCast, exp);
	if ((Matched == kSC_CastedMatch) or (Matched == kSC_LossyCastedMatch)) {
		return JB_Msg_CastedParent(exp);
	}
	 else if (Matched == kSC_NoMatch) {
		if ((!(ErrNode))) {
			ErrNode = exp;
		}
		if ((!false)) {
			FastString* _fsf0 = JB_Incr(JB_FS__New());
			JB_FS_AppendString(_fsf0, JB_LUB[1503]);
			JB_String* _tmPf1 = JB_Incr(SC_Decl_RenderTypeName(self, nil));
			JB_FS_AppendString(_fsf0, _tmPf1);
			JB_Decr(_tmPf1);
			JB_FS_AppendString(_fsf0, JB_LUB[1504]);
			JB_String* _tmPf2 = JB_Incr(SC_Decl_RenderTypeName(O, nil));
			JB_FS_AppendString(_fsf0, _tmPf2);
			JB_Decr(_tmPf2);
			JB_FS_AppendString(_fsf0, JB_LUB[1242]);
			JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf0));
			JB_Decr(_fsf0);
			JB_Msg_SyntaxExpect(ErrNode, _tmPf3);
			JB_Decr(_tmPf3);
		}
		SC_Decl_Match(self, O, TypeCast, exp);
	}
	return exp;
}

void SC_Decl_ExpectMatchRel(SCDecl* self, SCDecl* O, Message* exp, Message* side, Message* ErrNode) {
	int Cast = kSC_TypeCastTrue;
	if ((!side)) {
		Cast = (Cast | kSC_TypeCastBothWays);
	}
	JB_FreeIfDead(SC_Decl_ExpectMatch(self, O, Cast, exp, ErrNode));
	if ((!(((bool)exp) and ((self->Strength > O->Strength) and ((bool)JB_FreeIfDead(JB_Msg_IsSetIntoPlace(exp))))))) {
		return;
	}
	if ((!SC_Decl_IsNumeric(self))) {
		if ((!(self->Type->SelfStrong != self))) {
			JB_Msg_SyntaxExpect(exp, JB_LUB[1505]);
			return;
		}
	}
	SCFunction* _tmPf0 = JB_Incr(JB_Msg_MsgOwningFunc(exp));
	SC_Func_RefSmooth(_tmPf0, self);
	JB_Decr(_tmPf0);
}

DataTypeCode SC_Decl_GameType(SCDecl* self) {
	if (self->PointerCount) {
		JB_Msg_SyntaxExpect(self->Source, JB_LUB[1506]);
		return nil;
	}
	SCClass* T = JB_Incr(self->Type);
	if ((!(((bool)T) and SC_Class_HasGameType(T)))) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[1507]);
		JB_FS_AppendString(_fsf0, self->Type->Name);
		JB_FS_AppendString(_fsf0, JB_LUB[1242]);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Msg_SyntaxExpect(self->Source, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Decr(T);
		return nil;
	}
	DataTypeCode _tmPf2 = T->TypeInfo;
	JB_Decr(T);
	return _tmPf2;
}

SCDecl* SC_Decl_GetAddress(SCDecl* self) {
	SCDecl* rz = nil;
	JB_SetRef(rz, SC_Decl__New());
	SC_Decl_CopyTypeInfoTo(self, rz);
	JB_SetRef(rz->Name, self->Name);
	rz->PointerCount++;
	JB_SafeDecr(rz);
	return rz;
}

SCDecl* SC_Decl_GetAddress0(SCDecl* self) {
	SCDecl* rz = nil;
	rz = SC_Decl_GetAddress(self);
	rz->C_Array = 0;
	return rz;
}

SCIterator* SC_Decl_GetIteratorAny(SCDecl* self, JB_String* name, Message* node) {
	if (self->C_Array) {
		return SC__Iter_c_array;
	}
	SCClass* cls = JB_Incr(self->Type);
	if ((!cls)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1508]);
		JB_Decr(cls);
		return nil;
	}
	if (((bool)self->PointerCount) and (!cls->IsStruct)) {
		JB_Decr(cls);
		return SC__Iter_pointer;
	}
	SCIterator* _tmPf0 = JB_Incr(SC_Class_GetIteratorAny(cls, name, node));
	JB_Decr(cls);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

bool SC_Decl_HasStruct(SCDecl* self) {
	if (self->PointerCount) {
		return nil;
	}
	SCClass* T = self->Type;
	if ((!(T))) {
		debugger;
		return nil;
	}
	return T->IsStruct;
}

SCFunction* SC_Decl_HasStructDestructor(SCDecl* self) {
	if (SC_Decl_HasStruct(self)) {
		return self->Type->DestructorFunc;
	}
	return nil;
}

SCDecl* SC_Decl_HighestArrayContainMatch(SCDecl* self, SCDecl* Other, Message* exp) {
	SCDecl* rz = nil;
	JB_SetRef(rz, SC_Decl_HighestMatch(self, Other, exp));
	if ((!(rz))) {
		JB_SetRef(rz, self);
	}
	JB_SafeDecr(rz);
	return rz;
}

SCDecl* SC_Decl_HighestMatch(SCDecl* self, SCDecl* Other, Message* exp) {
	if ((!Other)) {
		return nil;
	}
	SCClass* M = self->Type;
	SCClass* o = Other->Type;
	if (o == M) {
		return nil;
	}
	if (o->Depth > M->Depth) {
		o = SC_Class_GoUpTo(o, M->Depth);
	}
	 else if (o->Depth < M->Depth) {
		M = SC_Class_GoUpTo(M, o->Depth);
	}
	while ((o != M) and ((bool)o->Super)) {
		o = o->Super;
		M = M->Super;
	};
	return o->TypeNormal;
}

void SC_Decl_IsAPISet(SCDecl* self, bool Value) {
	self->Info = SC_SCDeclInfo_Set(self->Info, kSC__SCDeclInfo_api, Value);
}

void SC_Decl_IsBorrowedSet(SCDecl* self, bool Value) {
	self->Info = SC_SCDeclInfo_Set(self->Info, kSC__SCDeclInfo_borrowed, Value);
}

void SC_Decl_IsConstSet(SCDecl* self, bool Value) {
	self->Info = SC_SCDeclInfo_Set(self->Info, kSC__SCDeclInfo_const, Value);
}

bool SC_Decl_IsConstOf(SCDecl* self, SCDecl* b) {
	if ((!SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_const))) {
		return nil;
	}
	if (self == b) {
		return true;
	}
	Message* _tmPf0 = self->Default;
	if ((!_tmPf0)) {
		return nil;
	}
	return _tmPf0->Obj == b;
}

bool SC_Decl_IsDataType(SCDecl* self) {
	return self->Type->IsDataType and ((!self->PointerCount) and (!self->C_Array));
}

bool SC_Decl_isfloat(SCDecl* self) {
	return JB_TC_IsFloat(self->Type->TypeInfo);
}

bool SC_Decl_IsInteger(SCDecl* self) {
	return SC_Decl_IsDataType(self) and JB_TC_IsInt(self->Type->TypeInfo);
}

void SC_Decl_IsNewlyCreatedSet(SCDecl* self, bool Value) {
	self->Info = SC_SCDeclInfo_Set(self->Info, kSC__SCDeclInfo_newlycreated, Value);
}

bool SC_Decl_isnil(SCDecl* self) {
	return self == JB_TypeNil;
}

bool SC_Decl_IsNormal(SCDecl* self) {
	if ((!self->Type)) {
		debugger;
	}
	return ((!self->PointerCount)) and (((!SC_Decl_isnil(self))) and (!self->C_Array));
}

bool SC_Decl_IsNormalBool(SCDecl* self) {
	return ((!self->C_Array)) and (((!self->PointerCount)) and (self->Type == JB_TypeBool));
}

bool SC_Decl_IsNormalNumber(SCDecl* self) {
	return ((!self->C_Array)) and (((!self->PointerCount)) and (SC_Class_NumericCount(self->Type) == 1));
}

bool SC_Decl_IsNormalObject(SCDecl* self) {
	return ((!self->PointerCount)) and (((!SC_Decl_isnil(self))) and ((SC_Class_IsObject(self->Type)) and ((!self->C_Array))));
}

bool SC_Decl_IsNormalStruct(SCDecl* self) {
	return self->Type->IsStruct and ((!self->PointerCount) and (!self->C_Array));
}

bool SC_Decl_IsntReallyCastable(SCDecl* self, Message* side) {
	if ((!((self->Type->IsStruct or ((bool)self->C_Array)) and ((!self->PointerCount))))) {
		return nil;
	}
	Message* _tmPf0 = JB_Incr(JB_Msg_RemoveTypeCasts(side));
	bool _tmPf1 = (!JB_Msg_EqualsSyx(_tmPf0, JB_SyxArg, false));
	JB_Decr(_tmPf0);
	return (_tmPf1);
}

int SC_Decl_IsNumeric(SCDecl* self) {
	if (((!self->C_Array)) and ((!self->PointerCount))) {
		return SC_Class_NumericCount(self->Type);
	}
	return 0;
}

bool SC_Decl_ispassable(SCDecl* self) {
	return self->C_Array == 0;
}

bool SC_Decl_IsReffable(SCDecl* self, bool SetOnly) {
	if (self->PointerCount) {
		return nil;
	}
	if ((!(self->Type))) {
		return nil;
	}
	if ((!(SC_Class_IsObject(self->Type)))) {
		return nil;
	}
	if (self->Strength) {
		return nil;
	}
	if (SetOnly and (SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_borrowed))) {
		return nil;
	}
	return true;
}

JB_String* SC_Decl_IsSaveable(SCDecl* self) {
	if (self->PointerCount) {
		return nil;
	}
	return self->Type->SaveAs;
}

void SC_Decl_IsStaticSet(SCDecl* self, bool Value) {
	self->Info = SC_SCDeclInfo_Set(self->Info, kSC__SCDeclInfo_static, Value);
}

void SC_Decl_IsTypeImproveSet(SCDecl* self, bool Value) {
	self->Info = SC_SCDeclInfo_Set(self->Info, kSC__SCDeclInfo_typeimprove, Value);
}

bool SC_Decl_isuintlike(SCDecl* self) {
	DataTypeCode t = self->Type->TypeInfo;
	if ((!(SC_Decl_IsNormal(self) and (SC_Decl_IsDataType(self) and JB_TC_IsInt(t))))) {
		return nil;
	}
	return (!JB_TC_IsSigned(t));
}

bool SC_Decl_LoadContained(SCDecl* self, Message* Contained, Message* c, SCBase* Name_Space) {
	SCDecl* R = JB_Incr(SC_ExtractDecl(c, Name_Space));
	if ((!R)) {
		JB_Decr(R);
		return nil;
	}
	if ((JB_Msg_EqualsSyx(Contained, JB_SyxThg, false)) and (JB_Msg_SyntaxEquals(Contained, JB_LUB[793], false))) {
		bool _tmPf0 = SC_Decl_MakeStatic(self, R);
		JB_Decr(R);
		return _tmPf0;
	}
	SCDecl* Cont = JB_Incr(SC_ExtractDecl(Contained, Name_Space));
	if ((!Cont)) {
		JB_Decr(R);
		JB_Decr(Cont);
		return nil;
	}
	JB_SetRef(self->Type, R->Type);
	if (JB_int_IsNormalMatch(SC_Decl_Match(JB_TypeWrapper->TypeNormal, R, kSC_TypeCastFalse, nil))) {
		if (SC_Decl_IsNormalObject(Cont)) {
			JB_Msg_SyntaxExpect(c, JB_LUB[1509]);
			JB_Decr(R);
			JB_Decr(Cont);
			return nil;
		}
		if (Cont->C_Array) {
			JB_Msg_SyntaxExpect(c, JB_LUB[1510]);
			JB_Decr(R);
			JB_Decr(Cont);
			return nil;
		}
		JB_SetRef(self->AutoCastTo, Cont);
		JB_SetRef(self->Contains, Cont);
	}
	 else {
		SCDecl* RCont = JB_Incr(R->Type->Contained);
		if ((!(SC_Decl_IsNormalObject(R) or (R->Type->IsStruct or ((bool)R->Contains))))) {
			JB_Msg_SyntaxExpect(c, JB_LUB[1511]);
			JB_Decr(R);
			JB_Decr(Cont);
			JB_Decr(RCont);
			return nil;
		}
		if ((!(RCont))) {
			JB_Msg_SyntaxExpect(c, JB_LUB[1511]);
			JB_Decr(R);
			JB_Decr(Cont);
			JB_Decr(RCont);
			return nil;
		}
		if (RCont->Type != JB_TypeObject) {
			if (SC_Decl_IsNormalObject(RCont)) {
				if ((!(JB_FreeIfDead(SC_Decl_ExpectMatch(RCont, Cont, 0, c, Contained))))) {
					JB_Decr(R);
					JB_Decr(Cont);
					JB_Decr(RCont);
					return nil;
				}
			}
		}
		JB_Decr(RCont);
		JB_SetRef(self->Contains, Cont);
	}
	JB_Decr(Cont);
	JB_Decr(R);
	return true;
}

SCDecl* SC_Decl_MakeAsObject(SCDecl* self, SCDecl* Container, Message* ErrPlace) {
	SCDecl* NormalContained = JB_Incr(Container->Type->Contained);
	if ((!NormalContained)) {
		JB_Decr(NormalContained);
		return nil;
	}
	if (SC_Decl_IsNormalObject(self)) {
		if ((!(SC_Decl_IsNormalObject(NormalContained)))) {
			JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1512]);
			JB_Decr(NormalContained);
			return nil;
		}
		JB_Decr(NormalContained);
		return self;
	}
	 else if ((!SC_Decl_IsNormalObject(NormalContained))) {
		JB_Decr(NormalContained);
		return self;
	}
	JB_Decr(NormalContained);
	if ((!SC_Decl_CanWrap(self))) {
		JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1513]);
		return nil;
	}
	return SC_Decl_NewWrapper(self, self);
}

SCDecl* SC_Decl_MakeBorrowed(SCDecl* self) {
	SCDecl* rz = nil;
	if (SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_borrowed)) {
		JB_Decr(rz);
		return self;
	}
	JB_SetRef(rz, SC_Decl_Copy(self, false));
	(SC_Decl_SyntaxIsSet(rz, kSC__SCDeclInfo_borrowed, true));
	JB_SafeDecr(rz);
	return rz;
}

void SC_Decl_MakeContainedObject(SCDecl* self) {
	if (self->Contains) {
		JB_SetRef(self->Contains, SC_Decl_MakeAsObject(self->Contains, self, self->Source));
	}
}

void SC_Decl_MakeGameFlying(SCDecl* self, SCClass* oof) {
	if ((!oof)) {
		return;
	}
	FastString* fs = JB_Incr(JB_FS__New());
	JB_FS_AppendString(fs, JB_LUB[1514]);
	JB_FS_CArrayAdd(fs, oof->Name);
	Message* _tmPf3 = JB_Incr(JB_Msg_ModelType(oof->IsModel));
	JB_FS_CArrayAddB(fs, JB_Str_ByteValue(_tmPf3->Name, 0));
	JB_Decr(_tmPf3);
	JB_FS_CArrayAddB0(fs, 8);
	JB_FS_CArrayAddB0(fs, JB_Msg_ModelMode(oof->IsModel));
	{
		Array* _LoopSrcf1 = JB_Incr(oof->Properties);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* p = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0)));
			JB_FS_CArrayAddB(fs, ((byte)SC_Decl_GameType(p)));
			JB_String* _tmPf4 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[568], p->Name));
			JB_Decr(p);
			JB_FS_CArrayAdd(fs, _tmPf4);
			JB_Decr(_tmPf4);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	JB_FS_AppendString(fs, JB_LUB[1515]);
	JB_FS_AppendString(fs, JB_LUB[1516]);
	(SC_Decl_SyntaxIsSet(self, kSC__SCDeclInfo_gameflyingmem, true));
	JB_SetRef(self->StringData, JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
}

SCDecl* SC_Decl_MakePointer(SCDecl* self) {
	if (self->PointerCount) {
		return self;
	}
	return SC_Decl_GetAddress(self);
}

SCDecl* SC_Decl_MakeSignedIfPossible(SCDecl* self) {
	if (self->Type->Signed) {
		return self->Type->Signed;
	}
	return self;
}

bool SC_Decl_MakeStatic(SCDecl* self, SCDecl* R) {
	SC_Decl_CopyTypeInfoTo(R, self);
	(SC_Decl_IsStaticSet(self, true));
	return true;
}

int SC_Decl_Match(SCDecl* self, SCDecl* O, int TypeCast, Message* exp) {
	if (O == nil) {
		if ((!self->Default)) {
			return nil;
		}
		return kSC_UseDefaultParams;
	}
	if (O == self) {
		return kSC_SimpleMatch;
	}
	if ((!(((bool)O->Type) and ((bool)self->Type)))) {
		return nil;
	}
	if (SC_Decl_isnil(O) and (((bool)(TypeCast & kSC_TypeCastTrue)))) {
		if (SC_Decl_CantBeNilInCpp(self)) {
			if ((!exp)) {
				return kSC_NeedsTypeCast;
			}
			Message* NilStruct = JB_Incr(SC_Decl_CreateStructNil(self, exp));
			JB_FreeIfDead(JB_Msg_ReplaceWith(exp, NilStruct));
			JB_Decr(NilStruct);
			return kSC_CastedMatch;
		}
		return kSC_SimpleMatch;
	}
	if (SC_Decl_PointeryMatch(O, self)) {
		int ooop = SC_Decl_PointeryMatchSub(self, O, TypeCast);
		if ((!ooop) and ((((bool)(TypeCast & kSC_TypeCastBothWays))) and (SC_Decl_IsNormalObject(O) and SC_Decl_IsNormalObject(self)))) {
			ooop = SC_Decl_PointeryMatchSub(O, self, TypeCast);
		}
		if (ooop) {
			return ooop;
		}
	}
	if ((((bool)(TypeCast & kSC_TypeCastTrue))) and ((self->Type == JB_TypeVoidPtr) and (((bool)O->PointerCount) or ((bool)O->Type->FuncProto)))) {
		if ((!exp)) {
			return kSC_NeedsTypeCast | kSC_VoidPtrMatch;
		}
		if (O->Type->FuncProto) {
			return JB_Msg_CastToVoidPtr(exp, nil);
		}
		return kSC_CastedMatch;
	}
	if (((bool)(TypeCast & (~kSC_NoBoolTypeCast)))) {
		return SC_Decl_TryTypeCast(self, O, exp, TypeCast);
	}
	return 0;
}

bool SC_Decl_MatchC(SCDecl* self, SCDecl* O) {
	return ((bool)SC_Decl_Match(self, O, kSC_TypeCastTrue, nil));
}

bool SC_Decl_MiniMatch(SCDecl* self, SCDecl* O, int TypeCast) {
	return ((bool)SC_Decl_Match(self, O, TypeCast, nil));
}

bool SC_Decl_NeedsContainedfix(SCDecl* self) {
	if ((!self->AllocSource) and (!self->Contains)) {
		return ((bool)SC_Decl_reallycontains(self));
	}
	return false;
}

SCDecl* SC_Decl_NewWrapper(SCDecl* self, SCDecl* CastTo) {
	SCDecl* rz = nil;
	if ((!(((bool)CastTo) and SC_Decl_IsNormal(CastTo)))) {
		JB_Decr(rz);
		return SC_Decl_NewWrapperSub(self, CastTo);
	}
	SCDecl* it = JB_Incr(self->Type->DataTypeWrapper);
	if (it) {
		JB_Decr(rz);
		JB_SafeDecr(it);
		return it;
	}
	JB_Decr(it);
	JB_SetRef(rz, SC_Decl_NewWrapperSub(self, CastTo));
	JB_SetRef(self->Type->DataTypeWrapper, rz);
	JB_SafeDecr(rz);
	return rz;
}

SCDecl* SC_Decl_NewWrapperSub(SCDecl* self, SCDecl* CastTo) {
	SCDecl* rz = JB_Incr(SC_Decl__New());
	JB_SetRef(rz->AutoCastTo, CastTo);
	JB_SetRef(rz->Contains, CastTo);
	JB_SetRef(rz->Type, JB_TypeWrapper);
	JB_SafeDecr(rz);
	return rz;
}

bool SC_Decl_NoFloat(SCDecl* self, Message* exp) {
	DataTypeCode T = self->Type->TypeInfo;
	if ((!(T != kJB__TC_UnusedType))) {
		JB_Msg_SyntaxExpect(exp, JB_LUB[1517]);
		return nil;
	}
	if (JB_TC_IsFloat(T)) {
		JB_Msg_SyntaxExpect(exp, JB_LUB[1518]);
		return nil;
	}
	return true;
}

bool SC_Decl_IsaDecl(SCDecl* self, SCDecl* O) {
	return SC_Decl_MatchC(self, O);
}

bool SC_Decl_OperatorIsa(SCDecl* self, SCClass* O) {
	if (((bool)O) and ((bool)self)) {
		return SC_Decl_IsaDecl(self, O->TypeNormal);
	}
	return false;
}

bool SC_Decl_PointeryMatch(SCDecl* self, SCDecl* O) {
	if ((!(O->PointerCount == self->PointerCount))) {
		return nil;
	}
	if ((!(((bool)O->C_Array) == ((bool)self->C_Array)))) {
		return nil;
	}
	return true;
}

int SC_Decl_PointeryMatchSub(SCDecl* self, SCDecl* O, int TypeCast) {
	SCClass* OType = O->Type;
	SCClass* t = self->Type;
	bool tica = t->IsRole;
	if (tica == OType->IsRole) {
	}
	 else if (tica) {
		while (t->IsRole) {
			t = t->Super;
		};
	}
	 else {
		while (OType->IsRole) {
			OType = OType->Super;
		};
	}
	{
		SCClass* CurrSuper = OType;
		while (CurrSuper) {
			if (t == CurrSuper) {
				if (((bool)O->AllocSource) or SC_Decl_ContainsMatch(self, O, TypeCast)) {
					if (CurrSuper != OType) {
						return kSC_SuperClassMatch;
					}
					return kSC_SimpleMatch;
				}
			}
			CurrSuper = CurrSuper->Super;
		};
	}
	;
	return 0;
}

JB_String* SC_Decl_PrefixedName(SCDecl* self, SCModule* M) {
	JB_String* s = JB_Incr(self->Name);
	if ((SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_const)) and (JB_Str_ByteValue(s, 0) == 'k')) {
		JB_SetRef(s, JB_Str_Range(s, (1), JB_int__max()));
	}
	JB_String* _tmPf0 = JB_Incr(SC_Mod_GetPrefix(M, self));
	JB_String* _tmPf1 = JB_Incr(JB_Str_unicodesafename(s));
	JB_Decr(s);
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf1));
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

SCDecl* SC_Decl_ProcessAs(SCDecl* self, Message* msg) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(msg)));
	Message* P = JB_Incr(JB_Msg_UnBra(_tmPf0));
	JB_Decr(_tmPf0);
	if (JB_Msg_OperatorIsBRel(P, JB_LUB[417])) {
		JB_Decr(P);
		return self;
	}
	JB_Decr(P);
	SCDecl* T = JB_Incr(self->Type->ProcessAs->TypeNormal);
	JB_FreeIfDead(SC_Decl_CreateSimpleTypeCast(T, msg));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(msg)));
	JB_SetRef(_tmPf1->Obj, self);
	JB_Decr(_tmPf1);
	JB_SafeDecr(T);
	return T;
}

SCImport* SC_Decl_Project(SCDecl* self) {
	JB_MemoryLayer* m = JB_ObjLayer(self);
	JB_Object* obj = m->Obj;
	if (JB_Object_FastIsa(obj, JB_AsClass(SCImport))) {
		return ((SCImport*)obj);
	}
	return nil;
}

SCDecl* SC_Decl_reallycontains(SCDecl* self) {
	SCDecl* c = self->Contains;
	if ((!c)) {
		c = self->Type->Contained;
	}
	if (((bool)c) and (c->Type != self->Type)) {
		return c;
	}
	return nil;
}

JB_String* SC_Decl_RealName(SCDecl* self) {
	JB_Object* l = self->IsLookupOnly;
	if (JB_Object_Isa(l, JB_AsClass(SCObject))) {
		return JB_LUB[0];
	}
	Message* s = self->Source;
	if ((JB_Msg_EqualsSyx(s, JB_SyxThg, false)) and JB_Msg_OperatorIn(s, JB_SyxRel)) {
		s = ((Message*)JB_Ring_Parent(s));
	}
	if ((JB_Msg_EqualsSyx(s, JB_SyxRel, false)) or (JB_Msg_EqualsSyx(s, JB_SyxDecl, false))) {
		return JB_Msg_Nyme(JB_Msg_DeclName(s));
	}
	return self->Name;
}

SCDecl* SC_Decl_RefineDecl(SCDecl* self, Message* list) {
	SCDecl* rz = nil;
	JB_SetRef(rz, SC_Decl_Copy(self, false));
	{
		Message* p = JB_Incr(((Message*)JB_Tree_First_(list)));
		while (p) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(p)));
			if (JB_Msg_OperatorIsThing(p, JB_LUB[1519])) {
				((SC_Decl_SyntaxIsSet(rz, kSC__SCDeclInfo_borrowed, SC__Options_ProjectIsLibrary)));
			}
			 else if (JB_Msg_OperatorIsThing(p, JB_LUB[567])) {
				(SC_Decl_IsAPISet(rz, true));
			}
			 else {
				if ((!false)) {
					JB_Msg_SyntaxExpect(p, nil);
				}
			}
			JB_SetRef(p, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(p);
		(list);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

DataTypeCode SC_Decl_RegType(SCDecl* self) {
	if ((!self)) {
		return nil;
	}
	DataTypeCode T = self->Type->TypeInfo;
	if (JB_TC_IsInt(T)) {
		return kJB__TC_int64;
	}
	if (JB_TC_ByteSize(T) == 4) {
		return kJB__TC_Float;
	}
	return kJB__TC_Double;
}

JB_String* SC_Decl_Render(SCDecl* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteDeclFull(self, JB_LUB[0], false));
	JB_FreeIfDead(JB_Msg_Render(_tmPf0, fs));
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Decl_RenderTypeAndName(SCDecl* self, bool minimal) {
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteDeclTypeAndName(self, JB_LUB[0], minimal));
	JB_String* _tmPf1 = JB_Incr(JB_Msg_Render(_tmPf0, nil));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Decl_RenderTypeName(SCDecl* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	if ((!self) or (!self->Type)) {
		JB_FS_AppendString(fs, JB_LUB[1520]);
	}
	 else {
		if (SC_Decl_isnil(self)) {
			JB_FS_AppendString(fs, JB_LUB[106]);
		}
		 else {
			JB_FS_AppendMultiByte(fs, '&', self->PointerCount);
			JB_FS_AppendString(fs, self->Type->Name);
		}
		if (self->C_Array) {
			JB_FS_AppendByte(fs, '[');
			JB_FS_AppendInt32(fs, ((int)self->C_Array));
			JB_FS_AppendByte(fs, ']');
		}
		if (((bool)self->Contains) and (!SC_Decl_MiniMatch(self->Contains, self->Type->Contained, 0))) {
			JB_FS_AppendString(fs, JB_LUB[1521]);
			JB_FS_AppendString(fs, self->Contains->Type->Name);
		}
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

bool SC_Decl_SafelyWrappable(SCDecl* self) {
	int n = SC_Decl_IsNumeric(self);
	if ((n <= 1) or (self == JB_TypeBool->TypeNormal)) {
		return true;
	}
	SCFunction* fns = ((SCFunction*)SC_Base_SyntaxAccess(JB_TypeWrapper->Modul, JB_LUB[1383]));
	if ((!JB_Object_Isa(fns, JB_AsClass(SCFunction)))) {
		return nil;
	}
	{
		SCFunction* f = fns;
		while (f) {
			Array* p = f->Args;
			if ((JB_Array_Size(p) == 1) and ((bool)SC_Decl_Match(((SCDecl*)JB_Array_Value(p, 0)), self, 0, nil))) {
				return true;
			}
			f = f->NextFunc;
		};
	}
	;
	return false;
}

bool SC_Decl_SameForReplace(SCDecl* self, SCDecl* c) {
	if ((!((SC_Decl_SyntaxIs(c, kSC__SCDeclInfo_borrowed)) == (SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_borrowed))))) {
		return nil;
	}
	if ((!(c->PointerCount == self->PointerCount))) {
		return nil;
	}
	if ((!(c->C_Array == self->C_Array))) {
		return nil;
	}
	return true;
}

void SC_Decl_SyntaxAppend(SCDecl* self, SCDeclInfo d) {
	self->Info = (self->Info | d);
}

bool SC_Decl_SyntaxIs(SCDecl* self, SCDeclInfo d) {
	if (self) {
		return ((bool)(self->Info & d));
	}
	return false;
}

void SC_Decl_SyntaxIsSet(SCDecl* self, SCDeclInfo d, bool Value) {
	self->Info = SC_SCDeclInfo_Set(self->Info, d, Value);
}

bool SC_Decl_SyntaxIsnt(SCDecl* self, SCDeclInfo d) {
	return (!SC_Decl_SyntaxIs(self, d));
}

int SC_Decl_TryTypeCast(SCDecl* self, SCDecl* O, Message* exp, int TypeCast) {
	SCClass* t = self->Type;
	SCClass* ot = O->Type;
	if (self->PointerCount == (O->PointerCount + 1)) {
		SCDecl* OAddr = SC_Decl_GetAddress(O);
		if (SC_Decl_MiniMatch(self, OAddr, TypeCast) and ((!exp) or JB_Msg_CanGetAddress(exp, nil, true))) {
			return JB_Msg_GetAddressOf(exp, OAddr, false);
		}
	}
	if (((bool)O->C_Array) and (self->PointerCount == 1)) {
		SCDecl* oaddr = SC_Decl_GetAddress0(O);
		if (SC_Decl_MiniMatch(self, oaddr, TypeCast) and ((!exp) or JB_Msg_CanGetAddress(exp, nil, true))) {
			return JB_Msg_GetAddressOf(exp, oaddr, true);
		}
	}
	if ((!(((bool)(TypeCast & kSC_NoBoolTypeCast))))) {
		if ((t == JB_TypeBool) and ((SC_Decl_IsNormal(self)) and ((bool)O->PointerCount))) {
			return JB_Msg_CastToBool(exp, nil);
		}
	}
	SCDecl* CounterPart = t->Signed;
	if (((bool)CounterPart) and (CounterPart->Type == ot)) {
		if (JB_int_IsNormalMatch(SC_Decl_Match(CounterPart, O, TypeCast, exp))) {
			return kSC_SimpleMatch;
		}
	}
	bool NoBools = (((bool)(TypeCast & kSC_TypeCastBothWays))) or (((bool)(TypeCast & kSC_NoBoolTypeCast)));
	if (((bool)(TypeCast & kSC_TypeCastMost))) {
		{
			SCClass* b = ot;
			while (b) {
				{
					Array* _LoopSrcf2 = b->Casts;
					int _if1 = 0;
					while (_if1 < JB_Array_Size(_LoopSrcf2)) {
						SCFunction* C = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if1));
						if (NoBools and (C->ReturnType == JB_TypeBool->TypeNormal)) {
						}
						 else if ((!JB_int_IsNormalMatch(SC_Decl_Match(self, C->ReturnType, 0, nil)))) {
						}
						 else {
							return SC_Func_CreateTypeCast(C, O, exp, kSC_CastedMatch);
						}
						_if1++;
					};
				}
				;
				b = b->Super;
			};
		}
		;
		bool IsaBool = (t == JB_TypeBool) and (SC_Decl_IsNormal(self));
		if (((!NoBools)) and IsaBool) {
			return JB_Msg_CastToBool(exp, nil);
		}
		if (((!IsaBool) or (!NoBools)) and SC_Decl_CanWrap(O)) {
			if (JB_int_IsNormalMatch(SC_Decl_Match(JB_TypeWrapper->TypeNormal, self, 0, nil))) {
				SCDecl* it = self->Contains;
				if (it) {
					if ((!SC_Decl_Match(it, O, kSC_TypeCastNumbers, nil))) {
						return nil;
					}
					return JB_Msg_WrapExpr(exp, O);
				}
			}
			if (JB_int_IsNormalMatch(SC_Decl_Match(self, JB_TypeWrapper->TypeNormal, 0, nil)) and SC_Decl_SafelyWrappable(O)) {
				return JB_Msg_WrapExpr(exp, O);
			}
		}
	}
	if (((bool)(TypeCast & kSC_TypeCastNumbers))) {
		if (SC_Decl_isnil(O) and ((bool)SC_Decl_IsNumeric(self))) {
			return kSC_NumericMatch;
		}
		bool OIsNum = SC_Decl_IsNormalNumber(O);
		bool SIsNum = SC_Decl_IsNormalNumber(self);
		if (OIsNum and SIsNum) {
			return kSC_NumericMatch;
		}
		if (((bool)(TypeCast & kSC_TypeCastBothWays))) {
			if (OIsNum and SC_Decl_IsNormalBool(self)) {
				return kSC_NumericMatch;
			}
			if (SIsNum and SC_Decl_IsNormalBool(O)) {
				return kSC_NumericMatch;
			}
		}
	}
	if (SC_Func_EqualOrMoreSpecific(ot->FuncProto, t->FuncProto) and SC_Decl_PointeryMatch(self, O)) {
		return JB_Msg_CastToClass(exp, t, nil);
	}
	return 0;
}

JB_String* SC_Decl_TryUseSaveable(SCDecl* self, bool IsSave, SCClass* cls) {
	JB_String* type = JB_Incr(SC_Decl_IsSaveable(self));
	if ((!JB_Str_Exists(type)) or (JB_Str_Equals(type, JB_LUB[1458], false))) {
		if ((!(SC__Options_IgnoreCantSaveErrors))) {
			if ((!IsSave)) {
				FastString* _fsf0 = JB_Incr(JB_FS__New());
				JB_FS_AppendString(_fsf0, JB_LUB[1522]);
				JB_FS_AppendString(_fsf0, self->Name);
				JB_FS_AppendString(_fsf0, JB_LUB[980]);
				JB_FS_AppendString(_fsf0, self->Type->Name);
				JB_FS_AppendByte(_fsf0, ')');
				JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
				JB_Decr(_fsf0);
				JB_Msg_SyntaxExpect(self->Source, _tmPf1);
				JB_Decr(_tmPf1);
				JB_Decr(type);
				return nil;
			}
		}
		JB_SafeDecr(type);
		return type;
	}
	if ((!((!JB_Str_Equals(type, JB_LUB[106], false))))) {
		JB_Decr(type);
		return nil;
	}
	if (self->Type->SavingCanSkip) {
		SCDecl* Con = JB_Incr(self->Contains);
		if (Con) {
			JB_String* _tmPf2 = JB_Incr(SC_Decl_TryUseSaveable(Con, true, cls));
			if ((!JB_Str_Exists(_tmPf2))) {
				JB_Decr(type);
				JB_Decr(Con);
				JB_Decr(_tmPf2);
				return nil;
			}
			JB_Decr(_tmPf2);
		}
		JB_Decr(Con);
	}
	JB_SafeDecr(type);
	return type;
}

void SC_Decl_TypeContainedSet(SCDecl* self, SCClass* Value) {
	JB_SetRef(self->Type, Value);
	if ((!(self->Contains))) {
		JB_SetRef(self->Contains, Value->Contained);
	}
}

DataTypeCode SC_Decl_TypeInfo(SCDecl* self) {
	if (((!self->C_Array)) and ((!self->PointerCount))) {
		return self->Type->TypeInfo;
	}
	return kJB__TC_UnusedType;
}

bool SC_Decl_TypeIsReached(SCDecl* self) {
	return ((bool)self->Type->CurrReacher);
}

void SC_Decl_TypeReach(SCDecl* self, SCBase* from, Message* src) {
	if ((!self)) {
		return;
	}
	SCClass* t = self->Type;
	if (t) {
		SC_Class_Reach(t, from, src);
	}
}

SCDecl* SC_Decl_UnWrapDataType(SCDecl* self, Message* exp, SCBase* name_space) {
	SCDecl* rz = nil;
	JB_SetRef(rz, self->AutoCastTo);
	Message* ExpReplacement = JB_Incr(JB_Syx_Msg(exp->Func, exp->Name));
	JB_SetRef(ExpReplacement->Obj, exp->Obj);
	{
		Message* s = JB_Incr(((Message*)JB_Tree_First_(exp)));
		while (s) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(s)));
			JB_Tree_SyntaxAppend(ExpReplacement, s);
			JB_SetRef(s, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(s);
		(exp);
	}
	;
	exp->Func = JB_SyxType;
	Message* _tmPf3 = JB_Incr(({
		Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[661])));
		JB_Tree_SyntaxAppend(__imPf2, ExpReplacement);
		Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxPrm, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf2, (_tmPf4));
		JB_Decr(_tmPf4);
		JB_SafeDecr(__imPf2);
		 __imPf2;
	}));
	JB_Decr(ExpReplacement);
	JB_Tree_SyntaxAppend(exp, _tmPf3);
	JB_Decr(_tmPf3);
	Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxThg, rz->Type->Name));
	JB_Tree_SyntaxAppend(exp, (_tmPf5));
	JB_Decr(_tmPf5);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Decl_WriteDeclFull(SCDecl* self, JB_String* DeclName, bool minimal) {
	JB_Incr(DeclName);
	if ((!(JB_Str_Exists(DeclName)))) {
		JB_SetRef(DeclName, self->Name);
	}
	if ((!(JB_Str_Exists(DeclName) or (!self->Default)))) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(DeclName);
		return nil;
	}
	if (JB_Str_Exists(DeclName)) {
		Message* _tmPf2 = JB_Incr(SC_Decl_WriteDeclSub(self, DeclName, minimal));
		JB_Decr(DeclName);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_Decr(DeclName);
	return ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxDecl, JB_LUB[0])));
		Message* _tmPf1 = JB_Incr(SC_Decl_WriteType(self, minimal));
		JB_Tree_SyntaxAppend(__imPf0, _tmPf1);
		JB_Decr(_tmPf1);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	});
}

Message* SC_Decl_WriteDeclSub(SCDecl* self, JB_String* Name, bool minimal) {
	Message* dcl = JB_Incr((JB_Syx_Msg(JB_SyxDecl, JB_LUB[0])));
	Message* _tmPf3 = JB_Incr(SC_Decl_WriteType(self, minimal));
	JB_Tree_SyntaxAppend(dcl, _tmPf3);
	JB_Decr(_tmPf3);
	Message* def = JB_Incr(self->Default);
	if ((!def)) {
		JB_SetRef(def, self->Type->Defawlt);
	}
	if ((!def) or ((bool)self->PointerCount)) {
		JB_SetRef(def, (JB_Syx_Msg(JB_SyxThg, JB_LUB[106])));
	}
	 else {
		JB_SetRef(def, JB_Msg_NiceCopy(def, nil));
	}
	if (self->Contains) {
		JB_SetRef(def, ({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxType, JB_LUB[1502])));
			JB_Tree_SyntaxAppend(__imPf0, def);
			Message* _tmPf4 = JB_Incr(({
				Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxAdj, JB_LUB[0])));
				Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxThg, self->Contains->Type->Name));
				JB_Tree_SyntaxAppend(__imPf1, (_tmPf5));
				JB_Decr(_tmPf5);
				Message* _tmPf6 = JB_Incr(JB_Syx_Msg(JB_SyxThg, self->Type->Name));
				JB_Tree_SyntaxAppend(__imPf1, (_tmPf6));
				JB_Decr(_tmPf6);
				JB_SafeDecr(__imPf1);
				 __imPf1;
			}));
			JB_Tree_SyntaxAppend(__imPf0, _tmPf4);
			JB_Decr(_tmPf4);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
	}
	Message* _tmPf7 = JB_Incr(({
		Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
		Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Name));
		JB_Tree_SyntaxAppend(__imPf2, (_tmPf8));
		JB_Decr(_tmPf8);
		Message* _tmPf9 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[541]));
		JB_Tree_SyntaxAppend(__imPf2, (_tmPf9));
		JB_Decr(_tmPf9);
		JB_Tree_SyntaxAppend(__imPf2, def);
		JB_SafeDecr(__imPf2);
		 __imPf2;
	}));
	JB_Decr(def);
	JB_Tree_SyntaxAppend(dcl, _tmPf7);
	JB_Decr(_tmPf7);
	JB_SafeDecr(dcl);
	return dcl;
}

Message* SC_Decl_WriteDeclTypeAndName(SCDecl* self, JB_String* Name, bool minimal) {
	JB_Incr(Name);
	if ((!(JB_Str_Exists(Name)))) {
		JB_SetRef(Name, self->Name);
	}
	Message* _tmPf3 = JB_Incr(({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxDecl, JB_LUB[0])));
		Message* _tmPf1 = JB_Incr(SC_Decl_WriteType(self, minimal));
		JB_Tree_SyntaxAppend(__imPf0, _tmPf1);
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Name));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf2));
		JB_Decr(_tmPf2);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	JB_Decr(Name);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

Message* SC_Decl_WriteNilDecl(SCDecl* self) {
	Message* dcl = (JB_Syx_Msg(JB_SyxDecl, JB_LUB[0]));
	JB_Tree_SyntaxAppend(dcl, SC_Decl_WriteType(self, false));
	JB_Tree_SyntaxAppend(dcl, SC_Decl_WriteNilRel(self));
	JB_SetRef(dcl->Obj, self);
	JB_SetRef(((Message*)JB_Ring_Last(dcl))->Obj, self);
	JB_SetRef(((Message*)JB_Ring_First(((Message*)JB_Ring_Last(dcl))))->Obj, self);
	return dcl;
}

Message* SC_Decl_WriteNilRel(SCDecl* self) {
	return SC_NewRelStr(self->Name, JB_LUB[541], JB_LUB[106]);
}

Message* SC_Decl_WriteSimpleType(SCDecl* self) {
	Message* rz = nil;
	if ((!self)) {
		JB_Decr(rz);
		return nil;
	}
	JB_String* name = JB_Incr(((JB_String*)JB_Ternary(((bool)self->Type), self->Type->Name, JB_LUB[1520])));
	JB_SetRef(rz, (JB_Syx_Msg(JB_SyxThg, name)));
	JB_Decr(name);
	{
		int _LoopSrcf1 = ((int)self->PointerCount);
		int _Valuef2 = 0;
		while (_Valuef2 < _LoopSrcf1) {
			JB_SetRef(rz, ({
				Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[417])));
				JB_Tree_SyntaxAppend(__imPf3, rz);
				JB_SafeDecr(__imPf3);
				 __imPf3;
			}));
			_Valuef2++;
		};
	}
	;
	if (self->C_Array) {
		JB_SetRef(rz, ({
			Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxAcc, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf4, rz);
			Message* _tmPf6 = JB_Incr(({
				Message* __imPf5 = JB_Incr((JB_Syx_Msg(JB_SyxArr, JB_LUB[0])));
				Message* _tmPf7 = JB_Incr(JB_Syx_IntMsg(JB_SyxNum, self->C_Array));
				JB_Tree_SyntaxAppend(__imPf5, (_tmPf7));
				JB_Decr(_tmPf7);
				JB_SafeDecr(__imPf5);
				 __imPf5;
			}));
			JB_Tree_SyntaxAppend(__imPf4, _tmPf6);
			JB_Decr(_tmPf6);
			JB_SafeDecr(__imPf4);
			 __imPf4;
		}));
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Decl_WriteType(SCDecl* self, bool minimal) {
	if ((!(self->Contains))) {
		return SC_Decl_WriteSimpleType(self);
	}
	if (minimal and SC_Decl_AlreadyContains(self, self->Contains)) {
		return SC_Decl_WriteSimpleType(self);
	}
	return ({
		Message* __imPf0 = (JB_Syx_Msg(JB_SyxAdj, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf0, (JB_Syx_Msg(JB_SyxThg, self->Contains->Type->Name)));
		JB_Tree_SyntaxAppend(__imPf0, SC_Decl_WriteSimpleType(self));
		 __imPf0;
	});
}

Message* SC_Decl_WriteTypeCast(SCDecl* self, Message* msg) {
	Message* TheType = JB_Incr((JB_Syx_Msg(JB_SyxType, JB_LUB[1502])));
	JB_Tree_SyntaxAppend(TheType, msg);
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteType(self, false));
	JB_Tree_SyntaxAppend(TheType, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SetRef(TheType->Obj, self);
	JB_SafeDecr(TheType);
	return TheType;
}

SCDecl* SC_Decl__Alloc() {
	return ((SCDecl*)JB_New(SCDecl));
}

SCDecl* SC_Decl__New() {
	SCDecl* __rz__ = ((SCDecl*)SC_Decl__Alloc());
	if (__rz__) {
		SC_Decl_Constructor(__rz__);
	}
	return __rz__;
}


Message* SC_SCFile_AST(SCFile* self) {
	return ({
		Message* _X = self->LiveAST;
		if ((!_X)) {
			_X = SC_SCFile_ASTSub(self);
			if ((!_X)) {
				return nil;
			}
			JB_SetRef(self->LiveAST, _X);
		}
		 _X;
	});
}

Message* SC_SCFile_ASTSub(SCFile* self) {
	Message* rz = nil;
	if (self->IsInternal) {
		debugger;
	}
	JB_MemoryLayer* _tmPf0 = JB_Incr(JB_Mem_CreateLayer((JB_AsClass(Message)), self));
	JB_Mem_Use(_tmPf0);
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_Incr(JB_File_ReadSafely(self, 134217728, false));
	JB_String* str = JB_Incr(JB_Str_Decompress(_tmPf1, nil, 268435456));
	JB_Decr(_tmPf1);
	if (JB_Safe_SyntaxCast(str)) {
		JB_SetRef(self->FData, str);
		self->OrigDate = JB_File_Modified(self);
		JB_SetRef(JB_StdErr->Source, JB_File_Path(self));
		JB__Tk_DotInsertAllow = true;
		JB__Tk_BaseExtra = (self->filenum << 19);
		JB_SetRef(rz, JB_Str_ParseClean(self->FData));
		JB_Msg_PrepareAST(rz);
		SC_SCFile_DetectInsecureWords(self);
		JB__Tk_BaseExtra = 0;
		JB__Tk_DotInsertAllow = false;
		JB_SetRef(JB_StdErr->Source, nil);
	}
	JB_Decr(str);
	JB_ClassData_Restore((JB_AsClass(Message)));
	JB_SafeDecr(rz);
	return rz;
}

void SC_SCFile_Constructor(SCFile* self, JB_File* f) {
	JB_String* _tmPf0 = JB_Incr(((JB_String*)JB_Ternary(f != nil, JB_File_Path(f), JB_LUB[0])));
	JB_File_Constructor(self, _tmPf0);
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_LUB[0];
	self->ExportName = JB_Incr(_tmPf1);
	self->Proj = nil;
	JB_String* _tmPf2 = JB_LUB[0];
	self->FData = JB_Incr(_tmPf2);
	self->OrigAST = nil;
	self->OrigDate = 0;
	self->filenum = 0;
	self->IsInternal = (f == nil);
	Message* _tmPf3 = SC_SCFile_start_ast(self);
	self->LiveAST = JB_Incr(_tmPf3);
	SC__Comp_stTotalFileCount = (SC__Comp_stTotalFileCount + self->IsInternal);
	SC__Imp_Recent = JB_int64_OperatorMax(SC__Imp_Recent, JB_File_Modified(f));
}

void SC_SCFile_Decls(SCFile* self, SCBase* p) {
	SC_SCFile_Use(self);
	SC_Imp_Use(self->Proj);
	JB_FreeIfDead(SC_CollectDecls(self->LiveAST, p, p, 0));
}

void SC_SCFile_destructor(SCFile* self) {
	JB_Decr(self->ExportName);
	JB_Decr(self->Proj);
	JB_Decr(self->FData);
	JB_Decr(self->LiveAST);
	JB_Decr(self->OrigAST);
	JB_File_Destructor(self);
}

void SC_SCFile_DetectInsecureWords(SCFile* self) {
	if ((!SC__Options_Perry)) {
		return;
	}
	Dictionary* words = SC__Comp_InsecureWords;
	if ((!words)) {
		return;
	}
	ivec2 where = ivec2{0, 0};
	JB_Object* found = JB_Dict_FindStr(words, self->FData, (&where));
	if (found) {
		Message* place = JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[0]);
		(JB_Msg_rangeSet(place, ((IntRange)where)));
		JB_Rec_NewErrorWithNode(JB_StdErr, place, JB_LUB[1523], JB_File_Path(self));
	}
}

Message* SC_SCFile_GetMsg(SCFile* self, int pos, bool needname) {
	{
		Message* _LoopSrcf3 = SC_SCFile_Orig(self);
		Message* f = _LoopSrcf3;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(_LoopSrcf3));
		while (((bool)f) and (f != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(f));
			if ((!needname) or JB_Str_Exists(f->Name)) {
				if (JB_Rg_Contains1(JB_Msg_range(f), pos)) {
					return f;
				}
			}
			f = _N_f2;
		};
		(_LoopSrcf3);
	}
	;
	return nil;
}

Message* SC_SCFile_Orig(SCFile* self) {
	if ((!self->OrigAST) or (self->OrigDate < JB_File_Modified(self))) {
		self->OrigDate = JB_File_Modified(self);
		JB_SetRef(self->OrigAST, SC_SCFile_ASTSub(self));
	}
	return self->OrigAST;
}

Message* SC_SCFile_start_ast(SCFile* self) {
	if (self->IsInternal) {
		JB_MemoryLayer* _tmPf0 = JB_Incr(JB_Mem_CreateLayer((JB_AsClass(Message)), self));
		Message* _tmPf1 = JB_Incr(JB_Msg__NewWithLayerNormal(_tmPf0, JB_SyxArg, JB_LUB[0]));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return nil;
}

void SC_SCFile_Use(SCFile* self) {
	if ((!self->LiveAST)) {
		return;
	}
	JB_MemoryLayer* _tmPf0 = JB_Incr(JB_ObjLayer(self->LiveAST));
	JB_Mem_Use(_tmPf0);
	JB_Decr(_tmPf0);
}

SCFile* SC_SCFile__Alloc() {
	return ((SCFile*)JB_New(SCFile));
}

SCFile* SC_SCFile__New(JB_File* f) {
	SCFile* __rz__ = ((SCFile*)SC_SCFile__Alloc());
	if (__rz__) {
		SC_SCFile_Constructor(__rz__, f);
	}
	return __rz__;
}


Message* SC_Func_AddParentAllocFunc(SCFunction* self, Message* root, SCFunction* fn) {
	if ((!fn) and (SC_Func_OperatorIsa(self, kSC_IsConstructor))) {
		if ((!((self->Cls == JB_TypeObject) or (self->Cls->Super == JB_TypeObject)))) {
			SC_SCObject_Fail(self, JB_LUB[1524]);
			return nil;
		}
		return nil;
	}
	if ((!fn)) {
		return nil;
	}
	Message* slf = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[331]));
	JB_SetRef(slf->Obj, self->Cls->SelfStrong);
	Message* PAF = JB_Incr(SC_NewFnc(fn->Name));
	Message* lst = JB_Incr(((Message*)JB_Ring_Last(PAF)));
	JB_Tree_SyntaxAppend(lst, slf);
	JB_Decr(slf);
	JB_SetRef(lst->Obj, fn);
	JB_Decr(lst);
	JB_SetRef(PAF->Obj, JB_TypeVoid);
	if (SC_Func_OperatorIsa(self, kSC_IsConstructor)) {
		(JB_Ring_FirstSet(root, PAF));
	}
	 else {
		JB_Tree_SyntaxAppend(root, PAF);
	}
	SC_Func_DoLinkTo(self, fn);
	JB_SafeDecr(PAF);
	return PAF;
}

void SC_Func_AddSelfToFunc(SCFunction* self, SCClass* cls) {
	Message* prms = JB_Incr(JB_Msg_FindSyx(self->Source, JB_SyxPrm));
	Message* name = JB_Incr(((Message*)JB_Ring_First(self->Source)));
	if ((!name)) {
		JB_Msg_SyntaxExpect(self->Source, JB_LUB[1525]);
		JB_Decr(prms);
		JB_Decr(name);
		return;
	}
	MessagePosition Using = JB_Msg_SyntaxUsing(name);
	if ((!(prms))) {
		JB_SetRef(prms, (JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		(JB_Ring_NextSibSet(name, prms));
	}
	JB_Decr(name);
	Message* _tmPf0 = JB_Incr(SC_MakeDecl(cls->Name, JB_LUB[331], nil));
	(JB_Ring_FirstSet(prms, _tmPf0));
	JB_Decr(_tmPf0);
	JB_Decr(prms);
	JB_MsgPos_Destructor((&Using));
}

void SC_Func_AnalyseRefsB(SCFunction* self) {
	Message* root = JB_Incr(SC_Base_SourceArg(self));
	bool IsConstructor = SC_Func_OperatorIsa(self, kSC_IsConstructor);
	{
		Message* msg = JB_Incr(root);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(root)));
		while (((bool)msg) and (msg != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(msg)));
			int it = JB_Msg_RC_HasTemporary(msg);
			if (it) {
				if (SC_Func_doRefs(self) or (it != kSC__Refs_BasisObj)) {
					SC_Refs__RC_Temps(self, msg, it);
				}
			}
			JB_SetRef(msg, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(_afterf1);
		JB_Decr(msg);
		(root);
	}
	;
	Array* list = JB_Incr(JB_Array__New0());
	{
		if ((!(JB_Msg_EqualsSyx(root, JB_SyxArg, false)))) {
			debugger;
		}
		Message* msg = JB_Incr(((Message*)JB_Ring_First(root)));
		Message* _After_f4 = JB_Incr(((Message*)JB_Ring_FlatAfter(root)));
		while (((bool)msg) and (msg != _After_f4)) {
			Message* _tmPf10 = JB_Incr(((Message*)JB_Ring_Parent(msg)));
			if ((!JB_Msg_EqualsSyx(_tmPf10, JB_SyxArg, false))) {
				JB_SetRef(msg, ((Message*)JB_Ring_FlatNext0(msg)));
				JB_Decr(_tmPf10);
				continue;
			}
			JB_Decr(_tmPf10);
			JB_Array_SyntaxAppend(list, msg);
			JB_SetRef(msg, ((Message*)JB_Ring_FlatNext0(msg)));
		};
		JB_Decr(_After_f4);
		JB_Decr(msg);
	}
	;
	JB_Decr(root);
	if (SC_Func_doRefs(self)) {
		{
			Array* _LoopSrcf6 = JB_Incr(self->Args);
			int _if5 = 0;
			while (_if5 < JB_Array_Size(_LoopSrcf6)) {
				SCDecl* ar = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf6, _if5)));
				if ((!ar->Strength) and SC_Decl_IsNormalObject(ar)) {
					SC_Refs__RC_DeclArg(ar, self);
				}
				JB_Decr(ar);
				_if5++;
			};
			JB_Decr(_LoopSrcf6);
		};
	}
	{
		int _if8 = 0;
		while (_if8 < JB_Array_Size(list)) {
			Message* msg = JB_Incr(((Message*)JB_Array_Value(list, _if8)));
			Syntax f = msg->Func;
			if (f == JB_SyxRel) {
				if (IsConstructor and SC_SettingSelfProperty(msg)) {
					SC_Refs__RC_RelConstructor(msg);
				}
				 else if (SC_Func_doRefs(self) or SC_SettingMemory(msg)) {
					SC_Refs__RC_Rel(msg);
				}
			}
			 else if (f == JB_SyxDot) {
				SC_Refs__RC_IgnoreReturn(msg, SC_Func_doRefs(self));
			}
			 else if (f == JB_SyxFunc) {
				SC_Refs__RC_CheckFuncAllocOK(self, msg);
				SC_Refs__RC_IgnoreReturn(msg, SC_Func_doRefs(self));
			}
			 else if (JB_Msg_IsStatementExpr(msg)) {
				SC_Refs__RC_IgnoreReturn(msg, SC_Func_doRefs(self));
			}
			 else if (f == JB_SyxDecl) {
				SC_Refs__RC_DeclInit(msg, self, false);
			}
			JB_Decr(msg);
			_if8++;
		};
	}
	;
	JB_Decr(list);
}

void SC_Func_AnalyseRefsConstructors(SCFunction* self) {
	if ((!SC_Func_OperatorIsa(self, (kSC_IsConstructor | kSC_IsDestructor)))) {
		return;
	}
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	Message* root = JB_Incr(SC_Base_SourceArg(self));
	bool IsConstructor = SC_Func_OperatorIsa(self, kSC_IsConstructor);
	Message* TheCall = JB_Incr(SC_Func_CallParents(self, root, IsConstructor));
	SC_Func_FillInConstructorAndDestructor(self, root, IsConstructor, TheCall);
	JB_Decr(TheCall);
	if ((!(JB_Rec_OK(JB_StdErr) and (!IsConstructor)))) {
		JB_Decr(root);
		return;
	}
	if ((!(SC_Class_HasStuffToHandleInDestructor(self->Cls)))) {
		if ((!(JB_Ring_HasChildren(root)))) {
			JB_SetRef(self->Cls->DestructorFunc, nil);
		}
	}
	 else if ((!self->Cls->IsWrapper)) {
		SC_Func_FillInDestructor(self);
	}
	JB_Decr(root);
}

int SC_Func_ApparantArgCount(SCFunction* self) {
	int a = JB_Array_Size(self->Args);
	a = (a - ((bool)self->Cls));
	a = (a - (self->IsAssigns));
	return a;
}

SCFunction* SC_Func_ArgsMatch(SCFunction* self, SCDecl* base, SCBase* name_space, SCParamArray* Incoming) {
	{
		int i = 0;
		while (i < 2) {
			int Assigns = JB_Ternary(((bool)i), kSC_TypeCastAssigns, ((int)0));
			SCFunction* f = SC_Func_ArgsMatchSub(self, base, kSC_TypeCastFalse | Assigns, name_space, Incoming);
			if ((!(SC_Func_IsReal(f)))) {
				f = SC_Func_ArgsMatchSub(self, base, kSC_TypeCastNumbers | Assigns, name_space, Incoming);
				if ((!(SC_Func_IsReal(f)))) {
					f = SC_Func_ArgsMatchSub(self, base, kSC_TypeCastTrue | Assigns, name_space, Incoming);
				}
			}
			if (SC_Func_IsReal(f) and Incoming->IsAssigns) {
				JB_Msg_AssignsFix(Incoming->Exp, f);
			}
			if (f) {
				return f;
			}
			i++;
		};
	}
	;
	return nil;
}

SCFunction* SC_Func_ArgsMatchSub(SCFunction* self, SCDecl* base, int TypeCast, SCBase* name_space, SCParamArray* Incoming) {
	bool NeedsAlter = false;
	int OldMatch = 0;
	SCFunction* Result = nil;
	SCFunction* Missing = nil;
	{
		SCFunction* f = JB_Incr(self);
		while (f) {
			if (f->IsMacro) {
				JB_SetRef(Missing, f);
				JB_SetRef(f, f->NextFunc);
				continue;
			}
			int Match = SC_Func_ArgsMatchTwo(f, TypeCast, base, false, name_space, Incoming);
			if ((!(Match))) {
				JB_SetRef(f, f->NextFunc);
				continue;
			}
			if (Result) {
				SCFunction* CanKeepBetter = JB_Incr(SC_Func_TryKeepBetter(Result, OldMatch, f, Match));
				if ((!CanKeepBetter)) {
					SCFunction* _tmPf2 = JB_Incr(SC_PA_ArgsMatchError(Incoming, TypeCast, f, Result));
					JB_Decr(Result);
					JB_Decr(Missing);
					JB_Decr(f);
					JB_Decr(CanKeepBetter);
					JB_SafeDecr(_tmPf2);
					return _tmPf2;
				}
				JB_SetRef(Result, CanKeepBetter);
				JB_Decr(CanKeepBetter);
			}
			if ((((bool)(Match & kSC_Needs))) or (Match == kSC_UseDefaultParams)) {
				NeedsAlter = ((bool)Match);
			}
			if ((!(Result))) {
				JB_SetRef(Result, f);
			}
			OldMatch = Match;
			JB_SetRef(f, f->NextFunc);
		};
		JB_Decr(f);
	}
	;
	if (NeedsAlter) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(Incoming->Exp)));
		_tmPf1->Func = JB_SyxPrm;
		JB_Decr(_tmPf1);
		SC_Func_ArgsMatchTwo(Result, TypeCast, base, true, name_space, Incoming);
	}
	SCFunction* _tmP112 = JB_Incr(Result);
	JB_Decr(Result);
	if ((!_tmP112)) {
		JB_SetRef(_tmP112, Missing);
	}
	JB_Decr(Missing);
	JB_SafeDecr(_tmP112);
	return _tmP112;
}

int SC_Func_ArgsMatchTwo(SCFunction* self, int TypeCast, SCDecl* base, bool ThisAlter, SCBase* name_space, SCParamArray* Incoming) {
	if ((self->IsAssigns != 0) != Incoming->IsAssigns) {
		if ((!((((bool)(TypeCast & kSC_TypeCastAssigns))) and ((!Incoming->IsAssigns))))) {
			return nil;
		}
	}
	int Pos = 0;
	int Result = kSC_SimpleMatch;
	TypeCast = (TypeCast | (kSC_NoBoolTypeCast | SC_PA_IgnoreSelf(Incoming)));
	{
		Array* _LoopSrcf1 = JB_Incr(self->Args);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			int fi = _if0;
			SCDecl* FuncArg = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0)));
			Message* PArg_Ch = JB_Incr(SC_PA_SyntaxAccess(Incoming, Pos));
			SCDecl* PArg_Type = JB_Incr(SC_TypeOfExprMaybeNil(PArg_Ch, name_space));
			if ((!(FuncArg->Type))) {
				JB_Msg_SyntaxExpect(self->Source, nil);
				JB_Decr(_LoopSrcf1);
				JB_Decr(FuncArg);
				JB_Decr(PArg_Ch);
				JB_Decr(PArg_Type);
				return nil;
			}
			if (((bool)base) and (!fi)) {
				JB_SetRef(FuncArg, SC_Decl_ContainedReplace(FuncArg, nil, base, false));
			}
			Message* LArg_ch = JB_Incr(((Message*)JB_Ternary(ThisAlter, PArg_Ch, nil)));
			int Matched = SC_Decl_Match(FuncArg, PArg_Type, TypeCast, LArg_ch);
			JB_Decr(LArg_ch);
			JB_Decr(PArg_Type);
			TypeCast = (TypeCast & (~kSC_TypeCastIgnoreContained));
			if ((Matched != kSC_NoMatch) and (!((Matched == kSC_UseDefaultParams) and ThisAlter))) {
				if (Matched > Result) {
					Result = Matched;
				}
				 else if (((bool)((Matched | Result) & kSC_NeedsAddressOfButAlsoNeedsSuperMatch))) {
					Result = kSC_NeedsAddressOfButAlsoNeedsSuperMatch;
				}
				Pos++;
			}
			 else if ((!FuncArg->Default)) {
				if (ThisAlter) {
					JB_Object_SyntaxExpect(nil);
					JB_Decr(_LoopSrcf1);
					JB_Decr(FuncArg);
					JB_Decr(PArg_Ch);
					return nil;
				}
				JB_Decr(_LoopSrcf1);
				JB_Decr(FuncArg);
				JB_Decr(PArg_Ch);
				return kSC_NoMatch;
			}
			 else if (ThisAlter) {
				Message* def = JB_Incr(JB_Msg_NiceCopy(FuncArg->Default, nil));
				Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Last(Incoming->Exp)));
				JB_Msg_InsertBefore(_tmPf3, def, PArg_Ch);
				JB_Decr(_tmPf3);
				JB_FreeIfDead(SC_TypeOfExpr(def, name_space, nil));
				JB_Decr(def);
			}
			 else {
				Result = kSC_UseDefaultParams;
			}
			JB_Decr(PArg_Ch);
			JB_Decr(FuncArg);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	if (Pos >= Incoming->Size) {
		return Result;
	}
	return 0;
}

Message* SC_Func_CallParents(SCFunction* self, Message* root, bool IsConstructor) {
	Message* rz = nil;
	Message* TheCall = JB_Incr(SC_Func_CountCallsToParentAlloc(self, root));
	if (TheCall) {
		JB_Decr(rz);
		JB_SafeDecr(TheCall);
		return TheCall;
	}
	JB_Decr(TheCall);
	SCClass* parent = JB_Incr(self->Cls->Super);
	if (((bool)parent) and (parent != JB_TypeObject)) {
		if (IsConstructor) {
			SCFunction* _tmPf0 = JB_Incr(SC_Func_Paramless(parent->ConstructorFunc));
			JB_SetRef(rz, SC_Func_AddParentAllocFunc(self, root, _tmPf0));
			JB_Decr(_tmPf0);
		}
		 else {
			SCFunction* _tmPf1 = JB_Incr(SC_Class_FirstDestructor(parent));
			JB_SetRef(rz, SC_Func_AddParentAllocFunc(self, root, _tmPf1));
			JB_Decr(_tmPf1);
		}
	}
	JB_Decr(parent);
	JB_SafeDecr(rz);
	return rz;
}

bool SC_Func_CanCompare(SCFunction* self, SCDecl* Against) {
	{
		SCFunction* f = self;
		while (f) {
			if (SC_Decl_IsaDecl(Against, ((SCDecl*)JB_Array_Value(f->Args, 1)))) {
				return true;
			}
			f = f->NextFunc;
		};
	}
	;
	return false;
}

bool SC_Func_CanDoRefs(SCFunction* self) {
	if (self->IsWrapper or (SC_Func_IsAllocOrNew(self) or self->IsMacro)) {
		SC__Refs_ThisFunc = self;
		return true;
	}
	return false;
}

bool SC_Func_CanLibLoad(SCFunction* self) {
	if ((!JB_Str_Exists(self->ExportName))) {
		return nil;
	}
	if ((!((!JB_Str_Exists(self->Disabled)) and (self->IsCppInBuilt != 2)))) {
		return nil;
	}
	return SC_Base_IsSTDLib(self);
}

void SC_Func_CheckNotBadName(SCFunction* self) {
	if ((!SC_Func_ApparantArgCount(self)) and ((bool)self->Cls)) {
		int W = SC_Class_NumericCount(self->Cls);
		if ((W > 1) and ((bool)JB_Str_IsSwizzle(self->Name, W))) {
			if ((!false)) {
				JB_Msg_SyntaxExpect(self->Source, JB_LUB[1526]);
			}
		}
	}
}

void SC_Func_CheckReturnValue(SCFunction* self, Message* msg) {
	Message* c = JB_Incr(((Message*)JB_Ring_First(msg)));
	if ((!c)) {
		if (self->ReturnType) {
			JB_Msg_SyntaxExpect(msg, JB_LUB[1527]);
			JB_Decr(c);
			return;
		}
		JB_Decr(c);
		return;
	}
	if ((!(JB_Tree_IsOnlyChild(c)))) {
		JB_Msg_SyntaxExpect(msg, JB_LUB[1528]);
		JB_Decr(c);
		return;
	}
	if (((!self->ReturnType)) and (JB_Msg_OperatorIsThing(c, JB_LUB[106]))) {
		JB_Tree_Remove(c);
		JB_Decr(c);
		return;
	}
	SCArg* _tmPf0 = JB_Incr(JB_Msg_MsgArg(msg));
	SCDecl* FoundReturnType = JB_Incr(SC_TypeOfExpr(c, _tmPf0, nil));
	JB_Decr(_tmPf0);
	if (FoundReturnType == JB_TypeVoid) {
		JB_SetRef(FoundReturnType, nil);
	}
	if ((!self->ReturnType)) {
		if (FoundReturnType) {
			JB_Msg_SyntaxExpect(msg, JB_LUB[1529]);
			JB_Decr(c);
			JB_Decr(FoundReturnType);
			return;
		}
		JB_Decr(c);
		JB_Decr(FoundReturnType);
		return;
	}
	if ((!FoundReturnType)) {
		JB_Msg_SyntaxExpect(msg, JB_LUB[1530]);
		JB_Decr(c);
		JB_Decr(FoundReturnType);
		return;
	}
	if ((FoundReturnType == JB_TypeNil) and (SC_Decl_CantBeNilInCpp(self->ReturnType))) {
		Message* _tmPf1 = JB_Incr(SC_Decl_CreateDefault(self->ReturnType, c, true));
		JB_FreeIfDead(JB_Msg_ReplaceWith(c, _tmPf1));
		JB_Decr(_tmPf1);
	}
	 else {
		JB_FreeIfDead(SC_Decl_ExpectMatch(self->ReturnType, FoundReturnType, kSC_TypeCastTrue, c, nil));
	}
	JB_Decr(FoundReturnType);
	JB_Decr(c);
}

void SC_Func_Cleanupfunc(SCFunction* self) {
	Message* s = JB_Incr(self->Source);
	JB_String* n = JB_Incr(s->Name);
	//using;
	MessagePosition _using175 = JB_Msg_SyntaxUsing(s);
	SCClass* cls = JB_Incr(SC_Base_IsNormalObject(self->Cls));
	if ((JB_Msg_SyntaxEquals(s, JB_LUB[618], true)) or (JB_Msg_SyntaxEquals(s, JB_LUB[812], true))) {
		JB_SetRef(s->Name, JB_LUB[783]);
		Message* f = JB_Incr((JB_Syx_Msg(JB_SyxThg, n)));
		(JB_Ring_FirstSet(s, f));
		JB_Decr(f);
	}
	 else if (JB_Msg_SyntaxEquals(s, JB_LUB[799], true)) {
		if (SC_Func__Tran_Render(s, cls)) {
			JB_SetRef(s->Name, JB_LUB[393]);
		}
	}
	JB_Decr(n);
	if (((JB_Msg_SyntaxEquals(s, JB_LUB[393], true))) and ((bool)cls)) {
		SC_Beh__Tran_Behaviour(s, cls);
		SC_Class_FillInterFaceIn(cls, self, true);
	}
	JB_Decr(cls);
	JB_Decr(s);
	JB_MsgPos_SyntaxUsingComplete((&_using175));
	JB_MsgPos_Destructor((&_using175));
}

void SC_Func_CollectLinks(SCFunction* self, JB_Object* obj) {
	if ((!obj)) {
		return;
	}
	if (JB_Object_FastIsa(obj, JB_AsClass(SCFunction))) {
		SC_Func_DoLinkTo(self, ((SCFunction*)obj));
		SC_Base_DoLinkFrom(((SCFunction*)obj), self);
	}
	 else if (JB_Object_FastIsa(obj, JB_AsClass(SCDecl))) {
		if (((SCDecl*)obj)->Type) {
			SC_Func_DoLinkTo(self, ((SCDecl*)obj)->Type);
		}
		if (((SCDecl*)obj)->IsLookupOnly) {
			SC_Func_CollectLinks(self, ((SCDecl*)obj)->IsLookupOnly);
		}
	}
	 else if (JB_Object_FastIsa(obj, JB_AsClass(SCClass))) {
		SC_Func_DoLinkTo(self, ((SCClass*)obj));
	}
}

void SC_Func_Constructor(SCFunction* self, Message* msg) {
	SC_Base_ConstructorMsg(self, msg);
	Array* _tmPf0 = JB_Array__New0();
	self->Args = JB_Incr(_tmPf0);
	self->Cls = nil;
	JB_String* _tmPf1 = JB_LUB[0];
	self->Disabled = JB_Incr(_tmPf1);
	self->Refs = nil;
	self->LinkTo = nil;
	self->CounterPart = nil;
	self->NextFunc = nil;
	self->ASM = nil;
	self->ProtoDecl = nil;
	self->ProtoType = nil;
	self->ReturnType = nil;
	JB_String* _tmPf2 = JB_LUB[0];
	self->Description = JB_Incr(_tmPf2);
	self->TmpCounter = 0;
	self->AllocCode = 0;
	self->MinOpt = 0;
	self->IsAssigns = 0;
	self->IsCppInBuilt = 0;
	self->IsInline = false;
	self->IsExternalLib = false;
	self->IsWrapper = false;
	self->NoRefCounts = false;
	self->IsAPI = false;
	self->AutoGeneratedSaver = false;
	self->IsMacro = false;
	self->ExternalOnly = false;
	if (msg) {
		SC__Comp_stFuncs++;
	}
}

Message* SC_Func_ConstructorLinePlace(SCFunction* self) {
	Message* _tmPf0 = JB_Incr(SC_Base_SourceArg(self));
	if (JB_Msg_HasPosition(_tmPf0)) {
		JB_Decr(_tmPf0);
		return SC_Base_SourceArg(self);
	}
	JB_Decr(_tmPf0);
	if (self->Cls) {
		return self->Cls->Source;
	}
	debugger;
	return SC__Comp_program->Source;
}

void SC_Func_CopyParams(SCFunction* self, Message* list) {
	Message* p = JB_Incr(SC_Func_prms(self));
	//using;
	MessagePosition _using173 = JB_Msg_SyntaxUsing(list);
	Message* a = JB_Incr(JB_Msg_GiveArg(self->Source));
	Message* dot = JB_Incr(JB_Syx_Msg(JB_SyxDot, JB_LUB[618]));
	(JB_Ring_FirstSet(a, dot));
	JB_Decr(a);
	Message* name = JB_Incr(JB_Msg_Msg(dot, JB_SyxThg, JB_LUB[1214]));
	JB_Decr(name);
	Message* SubPrms = JB_Incr(JB_Msg_Msg(dot, JB_SyxPrm, JB_LUB[0]));
	JB_Decr(dot);
	{
		Message* s = JB_Incr(((Message*)JB_Tree_First_(list)));
		while (s) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(s)));
			Message* _tmPf2 = JB_Incr(JB_Msg_NiceCopy(s, nil));
			JB_Tree_SyntaxAppend(p, _tmPf2);
			JB_Decr(_tmPf2);
			Message* _tmPf4 = JB_Incr(JB_Msg_DeclName(s));
			Message* _tmPf3 = JB_Incr(JB_Msg_NiceCopy(_tmPf4, nil));
			JB_Decr(_tmPf4);
			JB_Tree_SyntaxAppend(SubPrms, _tmPf3);
			JB_Decr(_tmPf3);
			JB_SetRef(s, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(s);
		(list);
	}
	;
	JB_Decr(SubPrms);
	JB_Decr(p);
	JB_MsgPos_SyntaxUsingComplete((&_using173));
	JB_MsgPos_Destructor((&_using173));
}

Message* SC_Func_CountCallsToParentAlloc(SCFunction* self, Message* root) {
	Message* rz = nil;
	int FoundCount = 0;
	{
		Message* curr = JB_Incr(((Message*)JB_Tree_First_(root)));
		while (curr) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(curr)));
			SCFunction* f = JB_Incr(JB_Msg_IsParentConCall(curr));
			if (f) {
				if ((!(f->Cls == JB_FreeIfDead(SC_Class_RealSuper(self->Cls))))) {
					JB_Msg_SyntaxExpect(curr, JB_LUB[1531]);
					JB_Decr(rz);
					JB_Decr(curr);
					JB_Decr(_Nf1);
					JB_Decr(f);
					return nil;
				}
				if ((!(rz))) {
					JB_SetRef(rz, curr);
				}
				FoundCount++;
				if ((!(FoundCount < 2))) {
					JB_Msg_SyntaxExpect(curr, JB_LUB[1532]);
					JB_Decr(rz);
					JB_Decr(curr);
					JB_Decr(_Nf1);
					JB_Decr(f);
					return nil;
				}
			}
			JB_Decr(f);
			JB_SetRef(curr, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(curr);
		(root);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

int SC_Func_CreateTypeCast(SCFunction* self, SCDecl* MyType, Message* exp, int Loss) {
	JB_Incr(exp);
	if ((!exp)) {
		JB_Decr(exp);
		return kSC_NeedsTypeCast;
	}
	if (SC_Func_Disablerizer(self)) {
		JB_Msg_SyntaxExpect(exp, self->Disabled);
		JB_Decr(exp);
		return nil;
	}
	while (JB_Msg_EqualsSyx(exp, JB_SyxBra, false)) {
		JB_SetRef(exp->Obj, self->ReturnType);
		JB_SetRef(exp, ((Message*)JB_Ring_First(exp)));
		if (JB_Msg_EqualsSyx(exp, JB_SyxArg, false)) {
			JB_SetRef(exp, ((Message*)JB_Ring_Parent(exp)));
			break;
		}
	};
	MessagePosition Using = JB_Msg_SyntaxUsing(exp);
	Message* cst = JB_Incr(SC_Func_IsSimpleCast(self));
	if (cst) {
		JB_SetRef(cst, JB_Msg_NiceCopy(cst, nil));
		JB_FreeIfDead(JB_Msg_ReplaceWith(exp, cst));
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(cst)));
		JB_FreeIfDead(JB_Msg_ReplaceWith(_tmPf2, exp));
		JB_Decr(_tmPf2);
	}
	 else {
		JB_SetRef(cst, ({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxFunc, JB_LUB[0])));
			Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxThg, self->ExportName));
			JB_Tree_SyntaxAppend(__imPf0, (_tmPf3));
			JB_Decr(_tmPf3);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
		(JB_Ring_NextSibSet(exp, cst));
		Message* _tmPf4 = JB_Incr(({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf1, exp);
			JB_SafeDecr(__imPf1);
			 __imPf1;
		}));
		JB_Tree_SyntaxAppend(cst, _tmPf4);
		JB_Decr(_tmPf4);
		if (SC_Decl_IsNormalStruct(MyType)) {
			JB_Msg_GetAddressOf(exp, MyType, false);
		}
		Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_Last(cst)));
		JB_SetRef(_tmPf5->Obj, self);
		JB_Decr(_tmPf5);
	}
	JB_Decr(exp);
	JB_SetRef(cst->Obj, self->ReturnType);
	JB_Decr(cst);
	JB_MsgPos_Destructor((&Using));
	return Loss;
}

void SC_Func_DeclsProtoType(SCFunction* self, Message* ch0, SCClass* fpType, bool late) {
	JB_Incr(fpType);
	bool IsClass = fpType != nil;
	if ((!(fpType))) {
		JB_SetRef(fpType, SC_Comp__AccessStr(ch0->Name, self->Source));
	}
	if (fpType) {
		SC_Func_DeclsProtoTypeRemove(self, fpType, ch0, IsClass, late);
		if ((!late)) {
			SC_Func_DeclsProtoTypeAdd(self, fpType);
		}
	}
	JB_Decr(fpType);
}

void SC_Func_DeclsProtoTypeAdd(SCFunction* self, SCClass* fpType) {
	SCDecl* Dcl = JB_Incr(SC_Decl__New());
	JB_SetRef(Dcl->IsLookupOnly, self);
	(SC_Decl_TypeContainedSet(Dcl, fpType));
	JB_SetRef(Dcl->Name, self->Name);
	(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_const, true));
	JB_SetRef(self->ProtoDecl, Dcl);
	if (self->Cls) {
		SC_Base_TryAdd(self->Lookup, self->Source, Dcl, self->Name);
	}
	JB_Decr(Dcl);
}

void SC_Func_DeclsProtoTypeRemove(SCFunction* self, SCClass* fpType, Message* ch0, bool AssumeSelf, bool late) {
	JB_Incr(ch0);
	Message* p = JB_Incr(((Message*)JB_Ring_Parent(ch0)));
	SCFunction* Proto = JB_Incr(fpType->FuncProto);
	if ((!Proto)) {
		JB_Msg_SyntaxExpect(ch0, JB_LUB[1533]);
		JB_Decr(ch0);
		JB_Decr(p);
		JB_Decr(Proto);
		return;
	}
	Message* fProtoParams = JB_Incr(((Message*)JB_Tree_Get(Proto->Source, 1)));
	if ((!(JB_Msg_EqualsSyx(fProtoParams, JB_SyxPrm, false)))) {
		SC_SCObject_Fail(Proto, JB_LUB[1534]);
		JB_Decr(ch0);
		JB_Decr(p);
		JB_Decr(Proto);
		JB_Decr(fProtoParams);
		return;
	}
	JB_Decr(Proto);
	if (true) {
		MessagePosition _using144 = JB_Msg_SyntaxUsing(ch0);
		JB_Msg_CopyAllInto(fProtoParams, p, false);
		p->Func = JB_SyxPrm;
		JB_Tree_Remove(ch0);
		JB_MsgPos_SyntaxUsingComplete((&_using144));
		JB_MsgPos_Destructor((&_using144));
	}
	JB_Decr(fProtoParams);
	if (self->Cls) {
		if (late) {
			Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(p)));
			JB_Tree_Remove(_tmPf0);
			JB_Decr(_tmPf0);
		}
		if ((!AssumeSelf)) {
			Message* _tmPf1 = JB_Incr(JB_Msg_NeedSyx(p, JB_SyxDecl));
			JB_SetRef(ch0, JB_Msg_NeedSyx(_tmPf1, JB_SyxThg));
			JB_Decr(_tmPf1);
			if ((!ch0)) {
				JB_Decr(ch0);
				JB_Decr(p);
				return;
			}
			SCDecl* decl = JB_Incr(SC_ExtractDecl(ch0, nil));
			if ((!decl)) {
				JB_Msg_SyntaxExpect(p, nil);
				JB_Decr(ch0);
				JB_Decr(p);
				JB_Decr(decl);
				return;
			}
			if ((!(SC_Decl_IsaDecl(decl, self->Cls->TypeNormal)))) {
				SC_SCObject_Fail(self, JB_LUB[1535]);
				JB_Decr(ch0);
				JB_Decr(p);
				JB_Decr(decl);
				return;
			}
			JB_Decr(decl);
			Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Parent(ch0)));
			JB_Tree_Remove(_tmPf2);
			JB_Decr(_tmPf2);
		}
	}
	JB_Decr(p);
	JB_Decr(ch0);
}

Message* SC_Func_DeclToDot(SCFunction* self, SCDecl* d) {
	Message* slf = JB_Incr((JB_Syx_Msg(JB_SyxThg, JB_LUB[331])));
	JB_SetRef(slf->Obj, self->Cls->SelfStrong);
	Message* dot = JB_Incr((JB_Syx_Msg(JB_SyxDot, d->Name)));
	JB_Tree_SyntaxAppend(dot, slf);
	JB_Decr(slf);
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(dot, (_tmPf0));
	JB_Decr(_tmPf0);
	JB_SetRef(dot->Obj, d);
	JB_SafeDecr(dot);
	return dot;
}

JB_String* SC_Func_Describe(SCFunction* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendString(fs, JB_LUB[1437]);
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendByte(fs, ' ');
	Message* _tmPf0 = JB_Incr(((Message*)JB_Tree_Get(self->Source, 1)));
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Func_destructor(SCFunction* self) {
	JB_Decr(self->Args);
	JB_Decr(self->Cls);
	JB_Decr(self->Disabled);
	JB_Decr(self->Refs);
	JB_Decr(self->LinkTo);
	JB_Decr(self->CounterPart);
	JB_Decr(self->NextFunc);
	JB_Decr(self->ASM);
	JB_Decr(self->ProtoDecl);
	JB_Decr(self->ProtoType);
	JB_Decr(self->ReturnType);
	JB_Decr(self->Description);
	SC_Base_destructor(self);
}

bool SC_Func_Disablerizer(SCFunction* self) {
	return JB_Str_Exists(self->Disabled);
}

SCFunction* SC_Func_Disambiguate(SCFunction* self, Message* src) {
	if ((!self) or (!self->NextFunc)) {
		return self;
	}
	{
		SCFunction* curr = self;
		while (curr) {
			Message* s = curr->Source;
			if (JB_Msg_DeepEquals(s, src, false)) {
				return curr;
			}
			if (JB_Msg_DeepEquals(((Message*)JB_Tree_Second(s)), ((Message*)JB_Tree_Second(src)), false)) {
				return curr;
			}
			curr = curr->NextFunc;
		};
	}
	;
	return self;
}

void SC_Func_DoLinkTo(SCFunction* self, SCBase* B) {
	SC_Base_StoreLinkToMe(B, (&self->LinkTo));
}

void SC_Func_DontWantSameReturnType(SCFunction* self, SCFunction* f) {
	if ((!self)) {
		return;
	}
	if (SC_Decl_MiniMatch(f->ReturnType, self->ReturnType, 0)) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(self->Source, JB_LUB[1536]);
		}
		if ((!false)) {
			JB_Msg_SyntaxExpect(f->Source, JB_LUB[1537]);
		}
	}
}

bool SC_Func_doRefs(SCFunction* self) {
	return (!self->NoRefCounts);
}

bool SC_Func_EqualOrMoreSpecific(SCFunction* self, SCFunction* f) {
	if ((!(((bool)self) and ((bool)f)))) {
		return nil;
	}
	if ((!(((bool)(f->ReturnType)) == ((bool)(self->ReturnType))))) {
		return nil;
	}
	if ((!(JB_Array_Size(f->Args) == JB_Array_Size(self->Args)))) {
		return nil;
	}
	if (f->ReturnType) {
		if ((!SC_Decl_IsaDecl(f->ReturnType, self->ReturnType))) {
			return nil;
		}
	}
	{
		int _LoopSrcf1 = JB_Array_Size(self->Args);
		int i = 0;
		while (i < _LoopSrcf1) {
			SCDecl* _tmPf2 = JB_Incr(((SCDecl*)JB_Array_Value(f->Args, i)));
			SCDecl* _tmPf3 = JB_Incr(((SCDecl*)JB_Array_Value(self->Args, i)));
			if ((!(SC_Decl_IsaDecl(_tmPf2, _tmPf3)))) {
				JB_Decr(_tmPf2);
				JB_Decr(_tmPf3);
				return nil;
			}
			JB_Decr(_tmPf3);
			JB_Decr(_tmPf2);
			i++;
		};
	}
	;
	return true;
}

JB_String* SC_Func_ExportNameBuilder(SCFunction* self, JB_String* CppPart) {
	JB_Incr(CppPart);
	JB_String* rz = JB_Incr(JB_LUB[0]);
	if ((!JB_Str_Exists(CppPart))) {
		JB_SetRef(CppPart, self->Name);
		if (((bool)self->IsAssigns) and (!(JB_Str_OperatorEndsWith(CppPart, JB_LUB[1538])))) {
			JB_SetRef(CppPart, JB_Str_OperatorPlus(CppPart, JB_LUB[1539]));
		}
	}
	JB_String* SubSection = JB_Incr(JB_LUB[0]);
	JB_String* AfterSub = JB_Incr(JB_LUB[0]);
	if (self->Cls) {
		JB_SetRef(SubSection, self->Cls->Modul->CppPart);
		JB_SetRef(AfterSub, JB_LUB[568]);
		if ((SC_Func_OperatorIsa(self, kSC_IsConstructor)) and (!(JB_Str_ContainsString(CppPart, JB_LUB[1425])))) {
			JB_SetRef(CppPart, JB_Str_OperatorPlus(JB_LUB[1425], CppPart));
		}
	}
	 else {
		SCBase* L = JB_Incr(self->Lookup);
		if ((JB_Object_FastIsa(L, JB_AsClass(SCModule))) and JB_Str_Exists(((SCModule*)L)->CppPart)) {
			JB_SetRef(SubSection, ((SCModule*)L)->CppPart);
			JB_SetRef(AfterSub, JB_LUB[376]);
		}
		JB_Decr(L);
	}
	SCImport* P = JB_Incr(self->Project);
	if ((!P)) {
		JB_SetRef(P, self->Lookup->Project);
	}
	JB_String* wanted = JB_Incr(P->Mod->ExportName);
	JB_Decr(P);
	if ((!JB_Str_Equals(wanted, SubSection, false))) {
		JB_SetRef(rz, (JB_Str_OperatorPlus(wanted, JB_LUB[568])));
	}
	JB_Decr(wanted);
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(AfterSub, CppPart));
	JB_Decr(AfterSub);
	JB_Decr(CppPart);
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(SubSection, _tmPf1));
	JB_Decr(_tmPf1);
	JB_Decr(SubSection);
	JB_SetRef(rz, JB_Str_OperatorPlus(rz, (_tmPf0)));
	JB_Decr(_tmPf0);
	JB_SafeDecr(rz);
	return rz;
}

void SC_Func_FillInConstructorAndDestructor(SCFunction* self, Message* root, bool IsConstructor, Message* SuperDot) {
	Dictionary* Dict = nil;
	if (IsConstructor) {
		JB_SetRef(Dict, JB_Dict__New());
	}
	{
		Message* curr = JB_Incr(root);
		Message* _afterf5 = JB_Incr(((Message*)JB_Ring_FlatAfter(root)));
		while (((bool)curr) and (curr != _afterf5)) {
			Message* _N_f6 = JB_Incr(((Message*)JB_Ring_FlatNext0(curr)));
			if (JB_Msg_OperatorIsThing(curr, JB_LUB[331])) {
				Message* P = JB_Incr(((Message*)JB_Ring_Parent(curr)));
				int KindaUse = SC_SelfKindaUse(curr);
				if (KindaUse != kSC_IsProperty) {
					JB_Object* PObj = JB_Incr(P->Obj);
					if ((JB_Object_FastIsa(PObj, JB_AsClass(SCFunction))) and ((JB_Msg_EqualsSyx(P, JB_SyxPrm, false)))) {
						if (((SCFunction*)PObj)->AllocCode == self->AllocCode) {
							JB_SetRef(curr, _N_f6);
							JB_Decr(_N_f6);
							JB_Decr(P);
							JB_Decr(PObj);
							continue;
						}
					}
					 else if (KindaUse == kSC_IsComparison) {
						JB_SetRef(curr, _N_f6);
						JB_Decr(_N_f6);
						JB_Decr(P);
						JB_Decr(PObj);
						continue;
					}
					JB_Decr(PObj);
					if (IsConstructor) {
						JB_Msg_SyntaxWarn(curr, JB_LUB[1540]);
					}
				}
				 else {
					Message* TheSetter = JB_Incr(SC_IsSelfOfSetter(curr));
					SCDecl* t = JB_Incr(SC_TypeOfExpr(P, nil, nil));
					if (t) {
						Message* tester = JB_Incr(TheSetter);
						if ((!tester)) {
							JB_SetRef(tester, P);
						}
						if (SC_Decl_IsNormalObject(t)) {
							bool _tmPf0 = (!(IsConstructor and (!TheSetter)));
							if ((!_tmPf0)) {
								JB_Msg_SyntaxExpect(tester, JB_LUB[1541]);
							}
							(_tmPf0);
							bool _tmPf1 = (!((!IsConstructor) and ((bool)TheSetter)));
							if ((!_tmPf1)) {
								JB_Msg_SyntaxExpect(tester, JB_LUB[1542]);
							}
							(_tmPf1);
						}
						if (IsConstructor) {
							JB_String* s = JB_Incr(JB_Str_LowerCase(P->Name));
							if (SC_Decl_IsNormalObject(t)) {
								bool _tmPf2 = (!JB_FreeIfDead(JB_Dict_ValueStr(Dict, s)));
								if ((!_tmPf2)) {
									JB_Msg_SyntaxExpect(tester, JB_LUB[1543]);
								}
								(_tmPf2);
								bool _tmPf3 = (JB_FreeIfDead(((Message*)JB_Ring_Parent(TheSetter))) == root);
								if ((!_tmPf3)) {
									JB_Msg_SyntaxExpect(tester, JB_LUB[1544]);
								}
								(_tmPf3);
							}
							(JB_Dict_ValueSet(Dict, s, JB_LUB[317]));
							JB_Decr(s);
						}
						JB_Decr(tester);
					}
					JB_Decr(t);
					JB_Decr(TheSetter);
				}
				JB_Decr(P);
			}
			JB_SetRef(curr, _N_f6);
			JB_Decr(_N_f6);
		};
		JB_Decr(_afterf5);
		JB_Decr(curr);
		(root);
	}
	;
	if (IsConstructor) {
		Message* oof = JB_Incr(SC_Func_ConstructorLinePlace(self));
		if (true) {
			MessagePosition _using145 = JB_Msg_SyntaxUsing(oof);
			{
				Array* _LoopSrcf8 = JB_Incr(self->Cls->Properties);
				int _if7 = JB_Array_Size(_LoopSrcf8);
				while (_if7-- >= 1) {
					SCDecl* d = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf8, _if7)));
					JB_String* _tmPf10 = JB_Incr(JB_Str_LowerCase(d->Name));
					JB_Object* _tmPf11 = JB_Incr(JB_Dict_ValueStr(Dict, _tmPf10));
					JB_Decr(_tmPf10);
					if ((!JB_FreeIfDead(_tmPf11))) {
						Message* _tmPf12 = JB_Incr(SC_Func_NewDefaultRel(self, oof, d));
						JB_Msg_InsertAfter(root, _tmPf12, SuperDot);
						JB_Decr(_tmPf12);
					}
					JB_Decr(_tmPf11);
					JB_Decr(d);
				};
				JB_Decr(_LoopSrcf8);
			}
			;
			JB_MsgPos_SyntaxUsingComplete((&_using145));
			JB_MsgPos_Destructor((&_using145));
		}
		JB_Decr(oof);
	}
	JB_Decr(Dict);
}

void SC_Func_FillInDestructor(SCFunction* self) {
	Message* _tmPf3 = JB_Incr(SC_Base_SourceArg(self));
	Message* first = JB_Incr(JB_Msg_FindDestructor(_tmPf3));
	JB_Decr(_tmPf3);
	//using;
	Message* _tmPf4 = JB_Incr(SC_Base_SourceArg(self));
	MessagePosition _using178 = JB_Msg_SyntaxUsing(_tmPf4);
	JB_Decr(_tmPf4);
	{
		Array* _LoopSrcf1 = JB_Incr(self->Cls->Properties);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* d = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0)));
			if (SC_Decl_IsReffable(d, true)) {
				Message* _tmPf5 = JB_Incr(SC_Base_SourceArg(self));
				Message* _tmPf7 = JB_Incr(SC_Func_DeclToDot(self, d));
				Message* _tmPf6 = JB_Incr(SC_Refs__RefDecrMsg(_tmPf7));
				JB_Decr(_tmPf7);
				JB_Msg_AddBefore(_tmPf5, first, _tmPf6);
				JB_Decr(_tmPf6);
				JB_Decr(_tmPf5);
			}
			 else {
				SCFunction* Destr = JB_Incr(SC_Decl_HasStructDestructor(d));
				if (Destr) {
					Message* Obj = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[417])));
					Message* _tmPf8 = JB_Incr(SC_Func_DeclToDot(self, d));
					JB_Tree_SyntaxAppend(Obj, _tmPf8);
					JB_Decr(_tmPf8);
					Message* _tmPf9 = JB_Incr(SC_Base_SourceArg(self));
					Message* _tmPf10 = JB_Incr(SC_Refs__RefDestructorMsg(Obj, Destr));
					JB_Decr(Obj);
					JB_Msg_AddBefore(_tmPf9, first, _tmPf10);
					JB_Decr(_tmPf10);
					JB_Decr(_tmPf9);
				}
				JB_Decr(Destr);
			}
			JB_Decr(d);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	JB_Decr(first);
	JB_MsgPos_SyntaxUsingComplete((&_using178));
	JB_MsgPos_Destructor((&_using178));
}

void SC_Func_FillInSaver(SCFunction* self, JB_String* name) {
	if ((!self->AutoGeneratedSaver)) {
		return;
	}
	SCClass* cls = JB_Incr(self->Cls);
	bool IsSave = (JB_Str_ContainsString(name, JB_LUB[1473]));
	FastString* fs = JB_Incr(JB_FS__New());
	{
		Array* _LoopSrcf2 = JB_Incr(cls->Properties);
		int _if1 = 0;
		while (_if1 < JB_Array_Size(_LoopSrcf2)) {
			SCDecl* item = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if1)));
			JB_String* type = JB_Incr(SC_Decl_TryUseSaveable(item, IsSave, cls));
			if ((!JB_Str_Exists(type))) {
				_if1++;
				JB_Decr(item);
				JB_Decr(type);
				continue;
			}
			JB_FS_AppendString(fs, JB_LUB[991]);
			int Count = ((int)item->C_Array);
			DataTypeCode T = item->Type->TypeInfo;
			bool AppendAsData = (JB_TC_ExistsButBadlyNamedOrDesigned(T) and JB_TC_IsFloat(T));
			if ((!AppendAsData) and ((bool)Count)) {
				//;
				JB_FS_AppendString(fs, JB_LUB[1545]);
				JB_FS_AppendInt32(fs, Count);
				JB_FS_AppendString(fs, JB_LUB[1546]);
				//;
			}
			if (AppendAsData) {
				JB_SetRef(type, JB_LUB[1547]);
				if ((!(Count))) {
					Count = 1;
				}
			}
			if (IsSave) {
				if (JB_Str_Equals(type, JB_LUB[802], false)) {
					JB_FS_AppendByte(fs, '.');
					JB_FS_AppendString(fs, item->Name);
					JB_FS_AppendString(fs, JB_LUB[1548]);
					if (Count) {
						JB_FS_AppendString(fs, JB_LUB[1549]);
					}
				}
				 else {
					JB_FS_AppendString(fs, JB_LUB[1550]);
					JB_FS_AppendString(fs, type);
					JB_FS_AppendByte(fs, '(');
					if (AppendAsData) {
						JB_FS_AppendString(fs, JB_LUB[1551]);
					}
					JB_FS_AppendByte(fs, '.');
					JB_FS_AppendString(fs, item->Name);
					if (AppendAsData) {
						JB_FS_AppendString(fs, JB_LUB[1552]);
						JB_FS_AppendInt32(fs, JB_TC_ByteSize(T) * Count);
					}
					 else if ((bool)Count) {
						JB_FS_AppendString(fs, JB_LUB[1549]);
					}
					JB_FS_AppendByte(fs, ')');
				}
			}
			 else if (AppendAsData) {
				JB_FS_AppendString(fs, JB_LUB[1553]);
				JB_FS_AppendString(fs, item->Name);
				JB_FS_AppendString(fs, JB_LUB[1552]);
				JB_FS_AppendInt32(fs, JB_TC_ByteSize(T) * Count);
				JB_FS_AppendString(fs, JB_LUB[636]);
			}
			 else {
				JB_FS_AppendByte(fs, '.');
				JB_FS_AppendString(fs, item->Name);
				if (Count) {
					JB_FS_AppendString(fs, JB_LUB[1549]);
				}
				if (JB_Str_Equals(type, JB_LUB[802], false)) {
					JB_FS_AppendString(fs, JB_LUB[1554]);
				}
				 else {
					JB_FS_AppendString(fs, JB_LUB[971]);
					JB_FS_AppendString(fs, JB_LUB[1555]);
					JB_FS_AppendString(fs, type);
					SCClass* it = JB_Incr(item->Type);
					if (it) {
						if ((SC_Class_NumericCount(it) <= 1) and ((!JB_Str_Equals(type, self->Name, false)))) {
							JB_FS_AppendByte(fs, '|');
							JB_FS_AppendString(fs, it->Name);
							JB_FS_AppendByte(fs, '|');
						}
					}
					JB_Decr(it);
				}
			}
			JB_Decr(type);
			JB_Decr(item);
			if ((!AppendAsData) and ((bool)Count)) {
				JB_FS_AppendString(fs, JB_LUB[1556]);
			}
			_if1++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_Decr(cls);
	MessagePosition Using = JB_Msg_SyntaxUsing(self->Source);
	JB_String* SrcStr = JB_Incr(JB_FS_GetResult(fs));
	JB_Decr(fs);
	Message* Msg = JB_Incr(JB_Str_Parse(SrcStr, JB_SyxArg, true));
	JB_Decr(SrcStr);
	Message* dest = JB_Incr(SC_Base_SourceArg(self));
	{
		Message* line = JB_Incr(((Message*)JB_Tree_First_(Msg)));
		while (line) {
			Message* _Nf5 = JB_Incr(((Message*)((Message*)JB_Ring_NextSib(line))));
			JB_Tree_SyntaxAppend(dest, line);
			JB_SetRef(line, _Nf5);
			JB_Decr(_Nf5);
		};
		JB_Decr(line);
		(Msg);
	}
	;
	JB_Decr(dest);
	JB_MsgPos_Destructor((&Using));
	JB_Decr(Msg);
}

Message* SC_Func_FindCppWrapperFunc(SCFunction* self, Message* place) {
	{
		Message* cpp = ((Message*)JB_Tree_First_(place));
		while (cpp) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(cpp));
			JB_String* n = cpp->Name;
			if ((!(JB_Str_OperatorStarts(n, JB_LUB[1557])))) {
				cpp = _Nf1;
				continue;
			}
			if ((!JB_Str_Equals(n, JB_LUB[786], false))) {
				if (JB_Str_Equals(n, JB_LUB[788], false)) {
					self->NoAutoComplete = 1;
					self->IsCppInBuilt = 2;
				}
				 else if (JB_Str_Equals(n, JB_LUB[787], false)) {
					self->NoAutoComplete = 1;
					self->IsCppInBuilt = 1;
				}
				 else if (JB_Str_Equals(n, JB_LUB[785], false)) {
					self->NoAutoComplete = 1;
					self->IsExternalLib = true;
				}
				 else {
					cpp = _Nf1;
					continue;
				}
			}
			return cpp;
		};
		(place);
	}
	;
	return nil;
}

void SC_Func_FindReached(SCFunction* self, SCBase* from) {
	if (self->CurrReacher) {
		return;
	}
	if ((!from)) {
		debugger;
	}
	self->CurrReacher = from;
	SC__Comp_stReachedFunc++;
	if (self->Cls) {
		SC_Class_Reach(self->Cls, self, nil);
	}
	{
		Dictionary* _LoopSrcf1 = JB_Incr(self->LinkTo);
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf1));
		JB_Decr(_LoopSrcf1);
		while (JB_Nav_MoveNext(_navf0)) {
			SCBase* o = JB_Incr(((SCBase*)JB_Nav_Value(_navf0)));
			if (o->CurrReacher) {
			}
			 else if (JB_Object_FastIsa(o, JB_AsClass(SCFunction))) {
				SC_Func_FindReached(((SCFunction*)o), self);
			}
			 else if (JB_Object_FastIsa(o, JB_AsClass(SCClass))) {
				SC_Class_Reach(((SCClass*)o), self, nil);
			}
			JB_Decr(o);
		};
		JB_Decr(_navf0);
	};
}

void SC_Func_FixCnj(SCFunction* self, Message* exp) {
	//using;
	MessagePosition _using146 = JB_Msg_SyntaxUsing(exp);
	SC_Func_FixCnjSub(self, exp);
	JB_MsgPos_SyntaxUsingComplete((&_using146));
	JB_MsgPos_Destructor((&_using146));
}

void SC_Func_FixCnjSub(SCFunction* self, Message* exp) {
	if (JB_Msg_EqualsSyx(exp, JB_SyxARel, false)) {
		JB_Msg_BecomeStr(exp, JB_SyxTRel, JB_LUB[0]);
		Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[1558]));
		JB_Tree_SyntaxAppend(exp, (_tmPf2));
		JB_Decr(_tmPf2);
	}
	Message* ch = JB_Incr(((Message*)JB_Ring_First(exp)));
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	JB_String* name = JB_Incr(_tmPf3->Name);
	JB_Decr(_tmPf3);
	bool CreatesError = ((JB_Str_Equals(name, JB_LUB[1559], false)) or ((JB_Str_Equals(name, JB_LUB[1560], false)) or ((JB_Str_Equals(name, JB_LUB[363], false)) or (JB_Str_Equals(name, JB_LUB[319], false)))));
	bool DoesReturn = ((!JB_Str_Equals(name, JB_LUB[1560], false)) and ((!JB_Str_Equals(name, JB_LUB[363], false)) and (!JB_Str_Equals(name, JB_LUB[1561], false))));
	if ((!(CreatesError or ((JB_Str_Equals(name, JB_LUB[1562], false)) or ((JB_Str_Equals(name, JB_LUB[1558], false)) or ((JB_Str_Equals(name, JB_LUB[1563], false)) or (JB_Str_Equals(name, JB_LUB[1561], false)))))))) {
		JB_Msg_SyntaxExpect(exp, JB_LUB[1564]);
		JB_Decr(ch);
		JB_Decr(name);
		return;
	}
	Message* nxt = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	Message* _tmPf4 = JB_Incr(((Message*)JB_Tree_Get(ch, 1)));
	if (((JB_Msg_EqualsSyx(ch, JB_SyxRel, false))) and ((JB_Msg_OperatorIn(exp, JB_SyxArg) or JB_Msg_OperatorIn(exp, JB_SyxDecl)) and ((JB_Str_Equals(_tmPf4->Name, JB_LUB[541], false))))) {
		Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_First(ch)));
		if ((!(JB_Msg_IsAssignable(_tmPf5)))) {
			FastString* _fsf0 = JB_Incr(JB_FS__New());
			JB_FS_AppendString(_fsf0, JB_LUB[1565]);
			JB_FS_SyntaxAppend(_fsf0, ch);
			JB_FS_AppendString(_fsf0, JB_LUB[1566]);
			JB_FS_AppendString(_fsf0, name);
			JB_FS_AppendString(_fsf0, JB_LUB[493]);
			JB_String* _tmPf6 = JB_Incr(JB_FS_GetResult(_fsf0));
			JB_Decr(_fsf0);
			JB_Msg_SyntaxExpect(exp, _tmPf6);
			JB_Decr(_tmPf6);
			JB_Decr(ch);
			JB_Decr(name);
			JB_Decr(nxt);
			JB_Decr(_tmPf4);
			JB_Decr(_tmPf5);
			return;
		}
		JB_Decr(_tmPf5);
		JB_FreeIfDead(JB_Msg_ReplaceWith(exp, ch));
		Message* RightSide = JB_Incr(((Message*)JB_Ring_Last(ch)));
		Message* bra = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
		JB_FreeIfDead(JB_Msg_ReplaceWith(RightSide, bra));
		JB_Tree_SyntaxAppend(bra, RightSide);
		JB_Decr(RightSide);
		JB_FreeIfDead(JB_Msg_WrapWith(bra, exp));
		Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_First(bra)));
		JB_FreeIfDead(JB_Msg_ReplaceWith(bra, _tmPf7));
		JB_Decr(_tmPf7);
		JB_Decr(bra);
	}
	JB_Decr(_tmPf4);
	if (JB_Str_Equals(name, JB_LUB[1558], false)) {
		JB_SetRef(nxt->Name, JB_LUB[602]);
		JB_SetRef(name, JB_LUB[602]);
	}
	JB_Decr(nxt);
	JB_SetRef(ch, ((Message*)JB_Ring_First(exp)));
	JB_Tree_Remove(ch);
	JB_FreeIfDead(JB_Msg_ReplaceWith(exp, ch));
	Message* Thg = nil;
	Message* pp = nil;
	Message* RemoveMe = nil;
	bool UsePrev = false;
	if ((JB_Msg_OperatorIsBRel(ch, JB_LUB[1410])) and ((JB_Msg_OperatorIn(ch, JB_SyxArg)) and ((({
		Message* _tmP227 = JB_Incr(((Message*)JB_Ring_First(ch)));
		bool _tmP226 = JB_Msg_EqualsSyx(_tmP227, JB_SyxThg, false);
		JB_Decr(_tmP227);
		 _tmP226;
	}))))) {
		Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_First(ch)));
		JB_SetRef(Thg, (JB_Syx_Msg(JB_SyxThg, _tmPf8->Name)));
		JB_Decr(_tmPf8);
		JB_SetRef(pp, ch);
	}
	 else {
		JB_SetRef(pp, JB_Msg_NiceParent(ch));
		bool Done = false;
		if ((((({
			Message* _tmP229 = JB_Incr(JB_Msg_UnBra(ch));
			bool _tmP228 = JB_Msg_EqualsSyx(_tmP229, JB_SyxThg, false);
			JB_Decr(_tmP229);
			 _tmP228;
		})))) or (((JB_Msg_EqualsSyx(pp, JB_SyxArg, false))) and (!CreatesError))) {
			JB_SetRef(Thg, JB_Msg_NiceCopy(ch, nil));
			if (JB_Msg_EqualsSyx(pp, JB_SyxArg, false)) {
				JB_SetRef(RemoveMe, ch);
			}
			JB_SetRef(pp, JB_Msg_ParentPoint(ch));
			UsePrev = true;
			Done = ((bool)1);
		}
		 else if (JB_Msg_IsSetRel(pp) and (({
			Message* _tmP231 = JB_Incr(((Message*)JB_Ring_First(pp)));
			bool _tmP230 = JB_Msg_EqualsSyx(_tmP231, JB_SyxThg, false);
			JB_Decr(_tmP231);
			 _tmP230;
		}))) {
			bool IsDecl = (JB_Msg_OperatorIn(pp, JB_SyxDecl));
			if (IsDecl or ((!JB_Str_Equals(name, JB_LUB[1561], false)))) {
				Done = ((bool)1);
				Message* _tmPf9 = JB_Incr(((Message*)JB_Ring_First(pp)));
				JB_SetRef(Thg, (JB_Syx_Msg(JB_SyxThg, _tmPf9->Name)));
				JB_Decr(_tmPf9);
				if (IsDecl) {
					JB_SetRef(pp, ((Message*)JB_Ring_Parent(pp)));
				}
			}
		}
		if ((!Done)) {
			JB_SetRef(pp, SC_Func__TypedTempMoveOut(ch, JB_LUB[0]));
			Message* _tmPf10 = JB_Incr(JB_Msg_DeclName(pp));
			JB_SetRef(Thg, (JB_Syx_Msg(JB_SyxThg, _tmPf10->Name)));
			JB_Decr(_tmPf10);
		}
	}
	JB_Decr(ch);
	Message* arg = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
	if (CreatesError) {
		Message* _tmPf11 = JB_Incr(((Message*)JB_Ring_First(exp)));
		Message* L = JB_Incr(((Message*)JB_Ring_NextSib(_tmPf11)));
		JB_Decr(_tmPf11);
		if ((!JB_Str_Equals(name, JB_LUB[1567], false))) {
			JB_SetRef(L, JB_Msg_ExpectParamsTransform(L, exp->Position, exp, nil));
		}
		 else {
			if ((!false)) {
				JB_Msg_SyntaxExpect(exp, JB_LUB[1568]);
			}
		}
		JB_Tree_SyntaxAppend(arg, L);
		JB_Decr(L);
	}
	if (JB_Str_Equals(name, JB_LUB[1562], false)) {
		Message* _tmPf12 = JB_Incr(JB_Syx_Msg(JB_SyxTmp, JB_LUB[688]));
		JB_Tree_SyntaxAppend(arg, (_tmPf12));
		JB_Decr(_tmPf12);
	}
	if ((JB_Str_OperatorStarts(name, JB_LUB[1563])) and ({
		Message* _tmP233 = JB_Incr(SC_Base_SourceArg(self));
		bool _tmP232 = JB_Msg_WithinLoop(pp, _tmP233);
		JB_Decr(_tmP233);
		 _tmP232;
	})) {
		Message* _tmPf13 = JB_Incr(JB_Syx_Msg(JB_SyxTmp, JB_LUB[1563]));
		JB_Tree_SyntaxAppend(arg, (_tmPf13));
		JB_Decr(_tmPf13);
	}
	 else if (((JB_Str_Equals(name, JB_LUB[1561], false))) and ({
		Message* _tmP235 = JB_Incr(SC_Base_SourceArg(self));
		bool _tmP234 = JB_Msg_WithinLoop(pp, _tmP235);
		JB_Decr(_tmP235);
		 _tmP234;
	})) {
		Message* _tmPf14 = JB_Incr(JB_Syx_Msg(JB_SyxTmp, JB_LUB[1082]));
		JB_Tree_SyntaxAppend(arg, (_tmPf14));
		JB_Decr(_tmPf14);
	}
	 else if (DoesReturn) {
		Message* _tmPf15 = JB_Incr(({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[602])));
			Message* _tmPf16 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[106]));
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf16));
			JB_Decr(_tmPf16);
			JB_SafeDecr(__imPf1);
			 __imPf1;
		}));
		JB_Tree_SyntaxAppend(arg, _tmPf15);
		JB_Decr(_tmPf15);
	}
	JB_Decr(name);
	if (JB_Msg_OperatorIsBRel(Thg, JB_LUB[679])) {
		JB_SetRef(Thg, JB_Msg_ReplaceWithChild(Thg));
	}
	 else {
		Message* tmp = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[679])));
		JB_Tree_SyntaxAppend(tmp, Thg);
		JB_SetRef(Thg, tmp);
		JB_Decr(tmp);
	}
	Message* if_ = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[689])));
	JB_Tree_SyntaxAppend(if_, Thg);
	JB_Decr(Thg);
	JB_Tree_SyntaxAppend(if_, arg);
	JB_Decr(arg);
	if (UsePrev) {
		(JB_Ring_PrevSibSet(pp, if_));
	}
	 else {
		(JB_Ring_NextSibSet(pp, if_));
	}
	JB_Decr(if_);
	JB_Decr(pp);
	if (RemoveMe) {
		JB_Tree_Remove(RemoveMe);
	}
	JB_Decr(RemoveMe);
}

void SC_Func_FLookupSet(SCFunction* self, SCBase* Value) {
	if (JB_Object_FastIsa(Value, JB_AsClass(SCClass))) {
		JB_SetRef(self->Cls, Value);
		self->Lookup = self->Cls->Modul;
	}
	 else {
		self->Lookup = SC_Base_ProjectFix(Value);
	}
	if (SC__Imp_Curr) {
		self->Project = SC__Imp_Curr;
	}
	 else if ((bool)self->Source) {
		SCFile* f = JB_Incr(JB_Msg_SCFile(self->Source));
		if (f != nil) {
			self->Project = f->Proj;
		}
		JB_Decr(f);
	}
}

void SC_Func_FuncDecls(SCFunction* self) {
	Message* P = JB_Incr(((Message*)JB_Tree_Get(self->Source, 1)));
	if ((!P)) {
		JB_Decr(P);
		return;
	}
	Message* fc = JB_Incr(((Message*)JB_Ring_First(P)));
	if (JB_Msg_EqualsSyx(fc, JB_SyxThg, false)) {
		SC_Func_DeclsProtoType(self, fc, nil, false);
	}
	JB_Decr(fc);
	Message* A = JB_Incr(SC_Base_SourceArg(self));
	SCArg* space = JB_Incr(((SCArg*)JB_Ternary(((bool)A), JB_Msg_SCArg(A, self, nil), nil)));
	JB_Decr(A);
	if (JB_Msg_EqualsSyx(P, JB_SyxArg, false)) {
		JB_SetRef(P, (JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
	}
	if ((JB_Msg_EqualsSyx(P, JB_SyxList, false)) or ((JB_Msg_EqualsSyx(P, JB_SyxBra, false)) or (JB_Msg_EqualsSyx(P, JB_SyxPrm, false)))) {
		P->Func = JB_SyxPrm;
		JB_SetRef(self->Args, SC_CollectDecls(P, self, space, 0));
		SC__Func_FuncStats[JB_int_OperatorMin(JB_Array_Size(self->Args), 11)]++;
	}
	JB_Decr(P);
	if ((!space)) {
		0;
	}
	 else if ((bool)self->Cls) {
		SC_Class_AddSelfToFunc(self->Cls, space);
	}
	 else {
		SCModule* L = JB_Incr(((SCModule*)self->Lookup));
		if ((JB_Object_FastIsa(L, JB_AsClass(SCModule))) and (SC_Mod_IsProperModule(L))) {
			SC_Mod_AddModuleToFunc(((SCModule*)L), space);
		}
		JB_Decr(L);
	}
	JB_Decr(space);
	if (((bool)self->AllocCode) and ((bool)self->ReturnType)) {
		JB_SetRef(self->ReturnType, SC_Decl_Copy(self->ReturnType, false));
		self->ReturnType->AllocSource = self->AllocCode;
	}
}

int SC_Func_HasFloatparams(SCFunction* self) {
	int rz = 0;
	{
		Array* _LoopSrcf1 = self->Args;
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* arg = ((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0));
			DataTypeCode d = arg->Type->TypeInfo;
			rz = (rz + (JB_TC_IsFloat(d)));
			_if0++;
		};
	}
	;
	return rz;
}

int SC_Func_HasFloatReturn(SCFunction* self) {
	SCDecl* f = self->ReturnType;
	if ((!f)) {
		return nil;
	}
	return ((int)SC_Decl_isfloat(f));
}

void SC_Func_init_sub(SCFunction* self, Message* node, SCBase* name_space) {
	Message* arg = JB_Incr(JB_Msg_NormaliseFunc(node));
	JB_SetRef(node->Obj, self);
	if (name_space) {
		if ((!JB_Msg_SyntaxEquals(node, JB_LUB[816], false))) {
			JB_Array_SyntaxAppend(SC__Comp_FuncList, self);
		}
		(SC_Func_FLookupSet(self, name_space));
		SCModule* _tmPf0 = JB_Incr(SC_Base_GetAsModule(name_space, nil));
		if ((!_tmPf0)) {
			JB_Decr(arg);
			JB_Decr(_tmPf0);
			return;
		}
		JB_SetRef(self->Refs, _tmPf0->DefaultRefs);
		JB_Decr(_tmPf0);
		JB_SetRef(SC__Func_CurrFunc, self);
	}
	SC_Func_SetFuncType(self, node);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(node)));
	SC_Func_ParseName(self, _tmPf1);
	JB_Decr(_tmPf1);
	SC_Func_PreProcessExpects(self);
	SC_Func_TranStrings(self, name_space != nil);
	SC_Func_ReadDisabled(self, arg);
	self->IsInline = ((bool)JB_Msg_FindClassOption(arg, JB_LUB[821], JB_LUB[831]));
	self->NoRefCounts = ((bool)JB_Msg_FindClassOption(arg, JB_LUB[1455], JB_LUB[1569]));
	self->MinOpt = JB_Msg_FindClassOption(arg, JB_LUB[1455], JB_LUB[931]);
	if (JB_Msg_FindClassOption(arg, JB_LUB[821], JB_LUB[1570])) {
		self->AllocCode = (self->AllocCode | kSC_DestructorNotFromLocalRefs);
	}
	JB_Decr(arg);
}

SCObject* SC_Func_InsertIn(SCFunction* self, SCBase* parent, JB_String* name) {
	JB_SetRef(self->Name, name);
	if (JB_Object_FastIsa(parent, JB_AsClass(SCClass))) {
		JB_SetRef(self->Cls, parent);
		self->Lookup = ((SCClass*)parent)->Modul;
	}
	 else {
		JB_SetRef(self->Cls, nil);
		self->Lookup = parent;
	}
	return SC_Base_SyntaxAccess(parent, name);
}

bool SC_Func_IsAllocOrNew(SCFunction* self) {
	return SC_Func_OperatorIsa(self, (kSC_IsAlloc | kSC_IsNew));
}

bool SC_Func_IsBehaviour(SCFunction* self) {
	SCDecl* _tmPf0 = JB_Incr(self->ProtoDecl);
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	bool _tmPf1 = SC_Class_IsInterface(_tmPf0->Type);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool SC_Func_IsConstructorOrDestructor(SCFunction* self) {
	return SC_Func_OperatorIsa(self, (kSC_IsConstructor | kSC_IsDestructor));
}

bool SC_Func_IsReal(SCFunction* self) {
	return (self != nil) and (!self->IsMacro);
}

Message* SC_Func_IsSimpleCast(SCFunction* self) {
	if ((!self->Source)) {
		JB_Object_SyntaxExpect(nil);
		return nil;
	}
	Message* found = ((Message*)JB_Tree_Get(JB_Msg_NeedSyxInt(self->Source, JB_SyxArg, -1), 0));
	if ((!((((bool)found) and JB_Msg_IsLast(found)) and (JB_Msg_OperatorIsTmp(found, JB_LUB[602]))))) {
		return nil;
	}
	found = ((Message*)JB_Ring_First(found));
	if ((!((JB_Msg_IsLast(found)) and (((JB_Msg_EqualsSyx(found, JB_SyxType, false))) and (JB_Msg_OperatorIsThing(((Message*)JB_Ring_First(found)), JB_LUB[331])))))) {
		return nil;
	}
	return found;
}

SCFunction* SC_Func_Last(SCFunction* self) {
	SCFunction* rz = nil;
	rz = self;
	while (true) {
		SCFunction* _tmPf0 = rz->NextFunc;
		if ((!_tmPf0)) {
			break;
		}
		rz = _tmPf0;
	};
	return rz;
}

SCDecl* SC_Func_MacroFix(SCFunction* self, SCDecl* contains, SCBase* name_space, SCParamArray* Incoming) {
	SCDecl* rz = nil;
	if ((!self->IsMacro)) {
		debugger;
	}
	Message* msg = JB_Incr(Incoming->Exp);
	MessagePosition Using = JB_Msg_SyntaxUsing(msg);
	Message* _tmPf5 = JB_Incr(SC_Base_SourceArg(self));
	Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(_tmPf5)));
	JB_Decr(_tmPf5);
	Message* cpy = JB_Incr(JB_Msg_NiceCopy(_tmPf4, msg));
	JB_Decr(_tmPf4);
	Array* oof = JB_Incr(JB_Tree_Flatten(cpy));
	int SizeShift = JB_Ternary(((bool)self->Cls), 0, 1);
	int IncomingParams = Incoming->Size;
	IncomingParams = (IncomingParams - ((int)Incoming->IsAssigns));
	IncomingParams = JB_int_bits(IncomingParams);
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(oof)) {
			Message* s = JB_Incr(((Message*)JB_Array_Value(oof, _if0)));
			int Num = JB_Msg_ParamNum(s) - SizeShift;
			if ((Num < Incoming->Size) and (Num >= 0)) {
				IncomingParams = JB_int_SyntaxAccessSet(IncomingParams, Num, false);
			}
			if (Num >= Incoming->Size) {
				if ((!false)) {
					Message* _tmPf7 = JB_Incr(SC_Base_SourceArg(self));
					Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_First(_tmPf7)));
					JB_Decr(_tmPf7);
					JB_Msg_SyntaxExpect(_tmPf6, JB_LUB[1571]);
					JB_Decr(_tmPf6);
				}
				if ((!false)) {
					JB_Msg_SyntaxExpect(msg, JB_LUB[1572]);
				}
				JB_Decr(s);
				break;
			}
			 else if (Num >= 0) {
				Message* _tmPf9 = JB_Incr(SC_PA_SyntaxAccess(Incoming, Num));
				Message* _tmPf8 = JB_Incr(JB_Msg_NiceCopy(_tmPf9, nil));
				JB_Decr(_tmPf9);
				JB_FreeIfDead(JB_Msg_ReplaceWith(s, _tmPf8));
				JB_Decr(_tmPf8);
			}
			 else if (JB_Msg_EqualsSyx(s, JB_SyxSDot, false)) {
				s->Func = JB_SyxDot;
				IncomingParams = JB_int_SyntaxAccessSet(IncomingParams, 0, false);
				Message* _tmPf10 = JB_Incr(SC_PA_SyntaxAccess(Incoming, 0));
				(JB_Ring_FirstSet(s, _tmPf10));
				JB_Decr(_tmPf10);
			}
			 else if ((JB_Msg_EqualsSyx(s, JB_SyxSThg, false)) and (JB_Msg_SyntaxEquals(s, JB_LUB[526], false))) {
				Message* _tmPf12 = JB_Incr(((Message*)JB_Ring_Parent(s)));
				if (JB_Msg_IsType(s, 3)) {
					Message* _tmPf11 = JB_Incr(SC_Decl_WriteType(contains, false));
					JB_FreeIfDead(JB_Msg_ReplaceWith(s, _tmPf11));
					JB_Decr(_tmPf11);
				}
				 else if (JB_Msg_IsContainer(_tmPf12)) {
					{
						int _LoopSrcf3 = ((int)Incoming->Size);
						int i = 0;
						while (i < _LoopSrcf3) {
							if (JB_int_SyntaxAccess(IncomingParams, i)) {
								IncomingParams = JB_int_SyntaxAccessSet(IncomingParams, i, false);
								Message* _tmPf14 = JB_Incr(SC_PA_SyntaxAccess(Incoming, i));
								Message* _tmPf13 = JB_Incr(JB_Msg_NiceCopy(_tmPf14, nil));
								JB_Decr(_tmPf14);
								(JB_Ring_PrevSibSet(s, _tmPf13));
								JB_Decr(_tmPf13);
							}
							i++;
						};
					}
					;
					JB_Tree_Remove(s);
				}
				JB_Decr(_tmPf12);
			}
			 else if (((bool)contains) and ((JB_Msg_EqualsSyx(s, JB_SyxType, false)))) {
				Message* dest = JB_Incr(((Message*)JB_Ring_Last(s)));
				if (JB_Msg_EqualsSyx(dest, JB_SyxEmb, false)) {
					Message* _tmPf15 = JB_Incr(SC_Decl_WriteType(contains, false));
					JB_FreeIfDead(JB_Msg_ReplaceWith(dest, _tmPf15));
					JB_Decr(_tmPf15);
				}
				JB_Decr(dest);
			}
			JB_Decr(s);
			_if0++;
		};
	}
	;
	JB_Decr(oof);
	if (IncomingParams) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(Incoming->Exp, JB_LUB[1573]);
		}
		if ((!false)) {
			SC_SCObject_Fail(self, JB_LUB[1574]);
		}
	}
	 else {
		JB_Msg_SafeReplaceWith(msg, cpy);
		JB_SetRef(rz, SC_TypeOfExpr(cpy, name_space, nil));
		if ((!(rz))) {
			JB_SetRef(rz, JB_TypeVoid);
		}
	}
	JB_Decr(cpy);
	JB_Decr(msg);
	JB_SafeDecr(rz);
	JB_MsgPos_Destructor((&Using));
	return rz;
}

bool SC_Func_MacroGet(SCFunction* self, SCParamArray* paramsarray, SCFunction* prev) {
	int M = JB_Msg_MacroFixCount(SC_Base_SourceArg(self));
	if ((M != -111111) and (SC_PA_MacroSize(paramsarray) != M)) {
		return false;
	}
	if (prev) {
		if ((!false)) {
			SC_SCObject_Fail(self, JB_LUB[1575]);
		}
		if ((!false)) {
			SC_SCObject_Fail(prev, JB_LUB[1575]);
		}
	}
	return true;
}

int SC_Func_MaxVars(SCFunction* self) {
	int rz = 0;
	{
		Message* _LoopSrcf3 = self->Source;
		Message* ch = _LoopSrcf3;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(_LoopSrcf3));
		while (((bool)ch) and (ch != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(ch));
			if (JB_Msg_EqualsSyx(ch, JB_SyxArg, false)) {
				SCArg* a = JB_Msg_AsArg(ch);
				if (a) {
					rz = JB_int_OperatorMax(rz, SC_Arg_Count(a));
				}
			}
			ch = _N_f2;
		};
		(_LoopSrcf3);
	}
	;
	return rz;
}

JB_String* SC_Func_NameOfClassAllocator(SCFunction* self, JB_String* s, JB_String* CppPart) {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	JB_SetRef(rz, CppPart);
	if (JB_Str_Exists(rz)) {
		JB_SetRef(rz, JB_Str_OperatorPlus(JB_LUB[568], rz));
	}
	 else if (SC_Func_OperatorIsa(self, kSC_IsLayer)) {
		JB_SetRef(rz, JB_LUB[1576]);
	}
	 else {
		JB_SetRef(rz, JB_LUB[1577]);
	}
	if (JB_Str_ContainsString(s, JB_LUB[1425])) {
		JB_SetRef(rz, JB_Str_ReplaceAll(s, JB_LUB[1425], rz, true, nil));
	}
	 else {
		JB_SetRef(rz, JB_Str_OperatorPlus(s, rz));
	}
	JB_SafeDecr(rz);
	return rz;
}

bool SC_Func_NeedsExport(SCFunction* self) {
	return ((bool)self->CurrReacher) or self->IsAPI;
}

Message* SC_Func_NewDefaultRel(SCFunction* self, Message* place, SCDecl* d) {
	if (d->C_Array) {
		return nil;
	}
	Message* def = JB_Incr(SC_Decl_CreateDefault(d, place, true));
	Message* _tmPf0 = JB_Incr(SC_Func_DeclToDot(self, d));
	Message* _tmPf1 = JB_Incr(SC_NewRel(_tmPf0, JB_LUB[541], def));
	JB_Decr(_tmPf0);
	JB_Decr(def);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool SC_Func_OperatorIsa(SCFunction* self, int Code) {
	return (((bool)(self->AllocCode & Code)));
}

SCFunction* SC_Func_Paramless(SCFunction* self) {
	{
		SCFunction* f = self;
		while (f) {
			Message* s = f->Source;
			Message* lst = JB_Msg_FindSyx(s, JB_SyxPrm);
			if ((!(((bool)lst) and JB_Ring_HasChildren(lst)))) {
				return f;
			}
			f = f->NextFunc;
		};
	}
	;
	return nil;
}

JB_String* SC_Func_ParamUniquer(SCFunction* self, JB_String* s) {
	FastString* fs = JB_Incr(JB_FS__New());
	JB_FS_AppendString(fs, s);
	JB_FS_AppendString(fs, JB_LUB[1578]);
	int first = 0 + (self->Cls != nil);
	int last = JB_Array_Size(self->Args) - 1;
	if (last < first) {
		JB_FS_AppendByte(fs, '0');
	}
	 else {
		{
			IntRange _LoopSrcf0 = JB_int_OperatorTo(first, last);
			while (_LoopSrcf0[0] < _LoopSrcf0[1]) {
				int i = _LoopSrcf0[0];
				SCDecl* _tmPf3 = JB_Incr(((SCDecl*)JB_Array_Value(self->Args, i)));
				JB_String* _tmPf2 = JB_Incr(JB_Str_TitleCase(_tmPf3->Type->Modul->CppPart, nil));
				JB_Decr(_tmPf3);
				JB_FS_AppendString(fs, _tmPf2);
				JB_Decr(_tmPf2);
				_LoopSrcf0[0] = (_LoopSrcf0[0] + 1);
			};
		};
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_String* SC_Func_ParentName(SCFunction* self) {
	if (self->Cls) {
		return self->Cls->Name;
	}
	SCBase* Mod = JB_Incr(self->Lookup);
	if (JB_Object_FastIsa(Mod, JB_AsClass(SCModule))) {
		if (((SCModule*)Mod)->IsImport) {
			JB_Decr(Mod);
			return nil;
		}
		JB_String* _tmPf0 = JB_Incr(((SCModule*)Mod)->Name);
		JB_Decr(Mod);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(Mod);
	return JB_LUB[0];
}

bool SC_Func_ParseName(SCFunction* self, Message* cName) {
	cName->Func = JB_SyxThg;
	JB_SetRef(self->Name, cName->Name);
	if (self->Cls) {
		if (JB_Msg_SyntaxEquals(cName, JB_LUB[618], true)) {
			self->AllocCode = kSC_IsConstructor;
			self->IsInline = true;
		}
		 else if (JB_Msg_SyntaxEquals(cName, JB_LUB[812], true)) {
			self->AllocCode = kSC_IsDestructor;
		}
	}
	return JB_Msg_TestFuncName(cName);
}

void SC_Func_PostTransform(SCFunction* self) {
	JB_SetRef(SC__Func_CurrFunc, self);
	Message* arg = SC_Base_SourceArg(self);
	{
		Message* msg = arg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(arg));
		while (((bool)msg) and (msg != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(msg));
			JB_Object* o = msg->Obj;
			if (o) {
				SC_Func_CollectLinks(self, o);
			}
			msg = _N_f2;
		};
		(arg);
	}
	;
	{
		Array* _LoopSrcf4 = self->Args;
		int _if3 = 0;
		while (_if3 < JB_Array_Size(_LoopSrcf4)) {
			SCDecl* d = ((SCDecl*)JB_Array_Value(_LoopSrcf4, _if3));
			SC_Func_CollectLinks(self, d);
			_if3++;
		};
	}
	;
	SC_Func_CollectLinks(self, self->ReturnType);
	JB_SetRef(SC__Func_CurrFunc, self);
}

void SC_Func_PreProcessExpects(SCFunction* self) {
	Array* list = nil;
	{
		Message* _LoopSrcf3 = JB_Incr(SC_Base_SourceArg(self));
		Message* ch = JB_Incr(_LoopSrcf3);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(_LoopSrcf3)));
		while (((bool)ch) and (ch != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(ch)));
			if (JB_Msg_NeedsPreprocess(ch)) {
				if ((!(JB_Array_SyntaxCast(list)))) {
					JB_SetRef(list, JB_Array__New0());
				}
				JB_Array_SyntaxAppend(list, ch);
			}
			JB_SetRef(ch, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(_afterf1);
		JB_Decr(ch);
		(_LoopSrcf3);
		JB_Decr(_LoopSrcf3);
	}
	;
	if ((!JB_Array_SyntaxCast(list))) {
		JB_Decr(list);
		return;
	}
	{
		int _if4 = 0;
		while (_if4 < JB_Array_Size(list)) {
			Message* ch = JB_Incr(((Message*)JB_Array_Value(list, _if4)));
			if ((JB_Msg_EqualsSyx(ch, JB_SyxTRel, false)) or (JB_Msg_EqualsSyx(ch, JB_SyxARel, false))) {
				SC_Func_FixCnj(self, ch);
			}
			 else if (JB_Msg_EqualsSyx(ch, JB_SyxRel, false)) {
				SC_RelSetOrExpansion(ch);
			}
			 else if ((!JB_Msg_SyntaxEquals(ch, JB_LUB[1579], false))) {
				SC_Func__Tran_Expect(self, ch, nil);
			}
			JB_Decr(ch);
			_if4++;
		};
	}
	;
	{
		int _if6 = 0;
		while (_if6 < JB_Array_Size(list)) {
			Message* ch = JB_Incr(((Message*)JB_Array_Value(list, _if6)));
			if (JB_Msg_SyntaxEquals(ch, JB_LUB[1580], false)) {
				JB_SetRef(ch->Name, JB_LUB[1579]);
				Message* w = JB_Incr(((Message*)JB_Ring_First(ch)));
				if ((!w)) {
					JB_Msg_AppendSyx(ch, JB_SyxStr, JB_LUB[1581]);
					JB_SetRef(w, ((Message*)JB_Ring_First(ch)));
				}
				JB_FreeIfDead(JB_Msg_NeedBra(w));
				JB_Decr(w);
			}
			 else if (JB_Msg_SyntaxEquals(ch, JB_LUB[1579], false)) {
				SC_Func__Tran_Using(self, ch, nil);
			}
			JB_Decr(ch);
			_if6++;
		};
	}
	;
	JB_Decr(list);
}

Message* SC_Func_prms(SCFunction* self) {
	return JB_Msg_FindSyx(self->Source, JB_SyxPrm);
}

void SC_Func_ReadDisabled(SCFunction* self, Message* arg) {
	Message* p = JB_Incr(JB_Msg_FindFlat(arg, JB_SyxTmp, JB_LUB[1582], false));
	if (p) {
		JB_Tree_Remove(p);
		JB_SetRef(self->Disabled, JB_LUB[1583]);
		Message* s = JB_Incr(JB_Msg_NeedSyxOK(p, JB_SyxStr, JB_SyxNil));
		if (s) {
			JB_SetRef(self->Disabled, s->Name);
		}
		JB_Decr(s);
	}
	JB_Decr(p);
}

void SC_Func_RefFunc(SCFunction* self, Message* prm, Message* after) {
	JB__Tk_UsingPos = -1;
	Message* rz = (JB_Syx_Msg(JB_SyxFunc, JB_LUB[0]));
	(JB_Ring_NextSibSet(after, rz));
	JB_FreeIfDead(JB_Msg_Msg(rz, JB_SyxThg, self->ExportName));
	JB_SetRef(rz->Obj, prm->Obj);
	Message* lst = JB_Msg_Msg(rz, JB_SyxPrm, JB_LUB[0]);
	JB_SetRef(lst->Obj, SC__Comp_RefIncr);
	JB_Tree_SyntaxAppend(lst, prm);
}

void SC_Func_RefSmooth(SCFunction* self, SCDecl* N) {
	N->Strength = 0;
}

DataTypeCode SC_Func_RegType(SCFunction* self) {
	if (self) {
		return SC_Decl_RegType(self->ReturnType);
	}
	return kJB__TC_UnusedType;
}

JB_String* SC_Func_Render(SCFunction* self, FastString* fs_in) {
	Message* it = JB_Incr(self->Source);
	if (it) {
		JB_String* _tmPf0 = JB_Incr(JB_Msg_Render(it, fs_in));
		JB_Decr(it);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(it);
	return SC_Func_Describe(self, fs_in);
}

JB_String* SC_Func_RenderName(SCFunction* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_String* pname = JB_Incr(SC_Func_ParentName(self));
	if (JB_Str_Exists(pname)) {
		JB_FS_AppendString(fs, pname);
		JB_FS_AppendByte(fs, '.');
	}
	JB_Decr(pname);
	JB_FS_AppendString(fs, self->Name);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Func_RenderParams(SCFunction* self, bool ForErrors, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendByte(fs, '(');
	JB_String* sep = JB_Incr(JB_LUB[0]);
	{
		Array* _LoopSrcf1 = JB_Incr(self->Args);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* a = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0)));
			if (a->Source) {
				JB_FS_AppendString(fs, sep);
				JB_SetRef(sep, JB_LUB[164]);
				JB_FS_SyntaxAppend(fs, a->Source);
			}
			JB_Decr(a);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	if ((!ForErrors)) {
		if (self->ReturnType) {
			JB_FS_AppendString(fs, sep);
			JB_FreeIfDead(SC_Decl_Render(self->ReturnType, fs));
		}
	}
	JB_Decr(sep);
	JB_FS_AppendByte(fs, ')');
	JB_String* _tmPf3 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

JB_String* SC_Func_RenderTitle(SCFunction* self, bool ForErrors, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendString(fs, self->Name);
	if (JB_Array_SyntaxCast(self->Args) or ((!ForErrors) and ((bool)self->ReturnType))) {
		JB_FS_AppendByte(fs, ' ');
		JB_FreeIfDead(SC_Func_RenderParams(self, ForErrors, fs));
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Func_SetFuncType(SCFunction* self, Message* node) {
	if (JB_Msg_SyntaxEquals(node, JB_LUB[567], false)) {
		self->IsAPI = true;
		JB_SetRef(node->Name, JB_LUB[783]);
	}
	 else if (JB_Msg_SyntaxEquals(node, JB_LUB[813], true)) {
		self->IsAssigns = 2;
	}
}

void SC_Func_StripTest(SCFunction* self) {
	if (SC_Base_IsVisible(self)) {
		SC_Func_FindReached(self, SC__Comp_VisibleFuncs);
	}
	 else if (SC__Options_ListAllLib and (!JB_Str_Exists(self->Disabled))) {
		SC_Func_FindReached(self, SC__Comp_Interpreter);
	}
}

bool SC_Func_SyntaxEquals(SCFunction* self, JB_String* name, bool Aware) {
	if (self) {
		if (JB_Str_Equals(self->ExportName, name, true)) {
			return true;
		}
		return JB_Str_Equals(self->Name, name, true);
	}
	return false;
}

void SC_Func_TranDebugInsert(SCFunction* self) {
	Message* d = JB_Incr(SC__Comp_DebugInsert);
	if ((!d)) {
		JB_Decr(d);
		return;
	}
	Message* m = JB_Incr(SC_Base_SourceArg(self));
	if (true) {
		MessagePosition _using143 = JB_Msg_SyntaxUsing(d);
		if (SC_Func_OperatorIsa(self, kSC_IsConstructor)) {
			Message* _tmPf0 = JB_Incr(JB_Msg_NiceCopy(d, nil));
			(JB_Ring_LastSet(m, _tmPf0));
			JB_Decr(_tmPf0);
		}
		 else {
			Message* _tmPf1 = JB_Incr(JB_Msg_NiceCopy(d, nil));
			(JB_Ring_FirstSet(m, _tmPf1));
			JB_Decr(_tmPf1);
		}
		JB_MsgPos_SyntaxUsingComplete((&_using143));
		JB_MsgPos_Destructor((&_using143));
	}
	JB_Decr(m);
	JB_Decr(d);
}

void SC_Func_Transform(SCFunction* self) {
	if (self->IsMacro) {
		return;
	}
	SC__Func_CurrFunc = self;
	Message* n = SC_Base_SourceArg(self);
	SCArg* Space = JB_Msg_SCArg(n, self, nil);
	if (self->IsWrapper) {
		JB_FreeIfDead(SC_Base_ProcessLinkage(Space, n, JB_FuncLinkageTable));
	}
	 else {
		SC_Func_TranDebugInsert(self);
		Message* r_z = SC_Func__Tran_Result(self);
		SC_Func__Tran_All(self, n, Space);
		if (r_z) {
			SC_Func__Tran_ResultFinish(self, r_z, Space);
		}
	}
	SC__Func_CurrFunc = nil;
}

void SC_Func_TranStrings(SCFunction* self, bool Add) {
	Message* S = JB_Incr(SC_Base_SourceArg(self));
	if (((bool)S) and (!self->IsWrapper)) {
		SCFunction* fn = JB_Incr(((SCFunction*)JB_Ternary(Add, self, nil)));
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(S)));
		SC_Func__Tran_Strings(_tmPf0, fn);
		JB_Decr(_tmPf0);
		JB_Decr(fn);
	}
	JB_Decr(S);
}

void SC_Func_TryAdd(SCFunction* self, SCBase* b) {
	SC_Base_TryAdd(b, self->Source, self, self->Name);
}

SCFunction* SC_Func_TryKeepBetter(SCFunction* self, int OldMatch, SCFunction* f, int Match) {
	if ((((bool)(OldMatch & kSC_SuperClassMatch))) and (JB_int_IsSimpleOrPointerCast(Match))) {
		return f;
	}
	if ((((bool)(Match & kSC_SuperClassMatch))) and (JB_int_IsSimpleOrPointerCast(OldMatch))) {
		return self;
	}
	if ((((bool)(OldMatch & kSC_TypeCastBothWays))) and (!(((bool)(Match & kSC_TypeCastBothWays))))) {
		return self;
	}
	if ((((bool)(Match & kSC_TypeCastBothWays))) and (!(((bool)(OldMatch & kSC_TypeCastBothWays))))) {
		return f;
	}
	if ((OldMatch == kSC_SimpleMatch) and (Match != kSC_SimpleMatch)) {
		return self;
	}
	if ((Match == kSC_SimpleMatch) and (OldMatch != kSC_SimpleMatch)) {
		return f;
	}
	if (OldMatch < Match) {
		return self;
	}
	if (Match < OldMatch) {
		return f;
	}
	return nil;
}

bool SC_Func_update_source(SCFunction* self, int start, JB_String* text, SCFile* myfile, SCObject* orig) {
	bool rz = false;
	JB_SetRef(SC__Func_CurrFunc, self);
	JB__Tk_UsingPos = -1;
	JB__Tk_InsertedFlags = 0;
	Message* source = JB_Incr(JB_Str_ParseClean(text));
	if (((bool)source) and (!JB_Msg_EqualsSyx(source, JB_SyxTmp, false))) {
		JB_SetRef(source, JB_Msg_NeedSyx(source, JB_SyxTmp));
	}
	if (source) {
		JB_Msg_SlidePositions(source, start);
		JB_SetRef(self->Source, source);
		SC_Func_Cleanupfunc(self);
		JB__Tk_InsertedFlags = kJB__MsgUIFlags_Inserted;
		rz = SC_Func_updateSourceSub(self, source);
		JB_SetRef(source->Obj, SC_SCObject_Disambiguate(orig, source));
	}
	JB_Decr(source);
	JB__Tk_InsertedFlags = 0;
	return rz;
}

bool SC_Func_updateSourceSub(SCFunction* self, Message* source) {
	bool rz = false;
	if ((JB_Msg_EqualsSyx(source, JB_SyxTmp, true)) and (JB_Msg_SyntaxEquals(source, JB_LUB[48], true))) {
		JB_Msg_AppMainFix(source);
	}
	Message* f = ((Message*)JB_Tree_Get(source, 0));
	if ((!f)) {
		return nil;
	}
	if (JB_Msg_EqualsSyx(f, JB_SyxDot, false)) {
		f->Func = JB_SyxThg;
		JB_Tree_Clear(f);
	}
	rz = JB_Rec_OK(JB_StdErr);
	SC_Func_init_sub(self, source, nil);
	rz = JB_Rec_OK(JB_StdErr);
	if (rz) {
		SC_Func_FuncDecls(self);
		SC_Func_CheckNotBadName(self);
		SC_Func_Transform(self);
		JB_Rec_Clear(JB_StdErr);
	}
	return rz;
}

bool SC_Func_UseCppName(SCFunction* self, JB_String* CppName) {
	if ((!JB_Str_Exists(CppName))) {
		return nil;
	}
	SC_Base_SetExportName(self, CppName, true);
	return true;
}

bool SC_Func_UseExportNameConstructor(SCFunction* self, JB_String* CppPart, JB_String* CppWrapper) {
	if ((!((!JB_Str_Exists(CppWrapper)) and (SC_Func_OperatorIsa(self, kSC_IsNew))))) {
		return nil;
	}
	JB_Object* fn = JB_Incr(self->CounterPart);
	if (JB_Object_FastIsa(fn, JB_AsClass(SCFunction))) {
		if ((!JB_Str_Exists(((SCFunction*)fn)->ExportName))) {
			SC_Base_LoadExportName(((SCFunction*)fn));
		}
		JB_String* s = JB_Incr(SC_Func_NameOfClassAllocator(self, ((SCFunction*)fn)->ExportName, CppPart));
		SC_Base_SetExportName(self, s, SC_Base_SyntaxIs(((SCFunction*)fn), kSC__SCBaseInfo_explicitexport));
		JB_Decr(s);
		JB_Decr(fn);
		return true;
	}
	JB_Decr(fn);
	return false;
}

bool SC_Func_UseExportWrapper(SCFunction* self, JB_String* CppWrapper) {
	if ((!JB_Str_Exists(CppWrapper))) {
		return nil;
	}
	self->IsWrapper = ((bool)1);
	SC_Base_SetExportName(self, CppWrapper, true);
	return true;
}

void SC_Func_ValidateSaver(SCFunction* self, JB_String* name) {
	SCClass* Cls = self->Cls;
	if ((!Cls)) {
		JB_Object_SyntaxExpect(nil);
		return;
	}
	if ((!(Cls != JB_TypeSaveable))) {
		return;
	}
	Message* First = ((Message*)JB_Ring_First(SC_Base_SourceArg(self)));
	if ((!First)) {
		JB_Msg_SyntaxWarn(self->Source, JB_LUB[1584]);
	}
	{
		Message* _LoopSrcf2 = SC_Base_SourceArg(self);
		Message* line = ((Message*)JB_Tree_First_(_LoopSrcf2));
		while (line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(line));
			if (Cls->Super != JB_TypeSaveable) {
				JB_Msg_CheckSuperDotSave(line, name, First == line);
			}
			if ((!JB_Rec_OK(JB_StdErr))) {
				return;
			}
			line = _Nf1;
		};
		(_LoopSrcf2);
	};
}

int SC_Func_VisibleArgs(SCFunction* self) {
	int rz = 0;
	{
		Array* _LoopSrcf1 = self->Args;
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* s = ((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0));
			if ((!s->Default)) {
				rz++;
			}
			_if0++;
		};
	}
	;
	rz = (rz - (self->Cls != nil));
	return rz;
}

JB_String* SC_Func_WrapName(SCFunction* self) {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	if (SC_Func_CanLibLoad(self)) {
		if (self->IsCppInBuilt) {
			JB_String* _tmPf0 = JB_Incr(SC_Func_ExportNameBuilder(self, JB_LUB[0]));
			JB_SetRef(rz, JB_Str_OperatorPlus(_tmPf0, JB_LUB[1585]));
			JB_Decr(_tmPf0);
		}
		 else {
			JB_SetRef(rz, self->ExportName);
		}
	}
	JB_SafeDecr(rz);
	return rz;
}

SCFunction* SC_Func__Alloc() {
	return ((SCFunction*)JB_New(SCFunction));
}

Message* SC_Func__AlterPostCond(Message* PostCond, Message* IterPostCond, Message* NodeSrc) {
	if ((!IterPostCond)) {
		return PostCond;
	}
	IterPostCond = JB_Msg_NiceCopy(IterPostCond, NodeSrc);
	if ((!PostCond)) {
		return IterPostCond;
	}
	return SC_NewRel(({
		Message* __imPf0 = (JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf0, PostCond);
		 __imPf0;
	}), JB_LUB[600], ({
		Message* __imPf1 = (JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf1, IterPostCond);
		 __imPf1;
	}));
}

Message* SC_Func__ArgToFunc(JB_String* NewName, Message* Params, Message* arg) {
	Message* result = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[783])));
	Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, NewName));
	JB_Tree_SyntaxAppend(result, (_tmPf1));
	JB_Decr(_tmPf1);
	if (JB_Msg_EqualsSyx(Params, JB_SyxPrm, false)) {
		JB_Tree_SyntaxAppend(result, Params);
	}
	 else if (JB_Msg_EqualsSyx(Params, JB_SyxThg, false)) {
		Message* _tmPf2 = JB_Incr(({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf0, Params);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
		JB_Tree_SyntaxAppend(result, _tmPf2);
		JB_Decr(_tmPf2);
	}
	 else {
		debugger;
	}
	JB_Tree_SyntaxAppend(result, arg);
	result->Position = arg->Position;
	JB_SafeDecr(result);
	return result;
}

bool SC_Func__CanKeepAsSource(Message* list, Message* arg, SCDecl* d) {
	if (((JB_Msg_EqualsSyx(list, JB_SyxThg, false))) and (!JB_Msg_IsVarUseableInLoop(arg, list->Name))) {
		return true;
	}
	if (JB_Msg_EqualsSyx(list, JB_SyxNum, false)) {
		return true;
	}
	if (d->C_Array) {
		return true;
	}
	return false;
}

bool SC_Func__CanKeepAsValue(SCIterator* iter, Message* arg, SCDecl* dcl, Message* value) {
	if ((!(JB_Msg_EqualsSyx(iter->Value, JB_SyxThg, false)))) {
		return nil;
	}
	if ((!value)) {
		return nil;
	}
	if (JB_Msg_IsVarUseableInLoop(arg, value->Name)) {
		return nil;
	}
	if (dcl->C_Array) {
		return nil;
	}
	return true;
}

bool SC_Func__CollectIsaTests(Message* s, Array* out) {
	JB_Incr(s);
	JB_SetRef(s, JB_Msg_UnBra(s));
	if (JB_Msg_EqualsSyx(s, JB_SyxRel, false)) {
		Message* L = JB_Incr(((Message*)JB_Ring_First(s)));
		Message* Op = JB_Incr(((Message*)JB_Ring_NextSib(L)));
		if (JB_Msg_SyntaxEquals(Op, JB_LUB[601], false)) {
			Message* R2 = JB_Incr(((Message*)JB_Ring_Last(s)));
			bool A2 = SC_Func__CollectIsaTests(L, out);
			bool B2 = SC_Func__CollectIsaTests(R2, out);
			JB_Decr(R2);
			JB_Decr(s);
			JB_Decr(L);
			JB_Decr(Op);
			return A2 or B2;
		}
		JB_Decr(L);
		JB_Decr(s);
		bool _tmPf0 = (!JB_Msg_SyntaxEquals(Op, JB_LUB[600], false));
		JB_Decr(Op);
		return (_tmPf0);
	}
	if ((!JB_Msg_EqualsSyx(s, JB_SyxFunc, false))) {
		JB_Decr(s);
		return true;
	}
	Message* List = JB_Incr(((Message*)JB_Ring_Last(s)));
	SCFunction* f = JB_Incr(JB_Msg_AsFunc(List));
	if ((!(JB_Object_Isa(f, JB_AsClass(SCFunction))))) {
		JB_Decr(s);
		JB_Decr(List);
		JB_Decr(f);
		return true;
	}
	JB_String* fexp = JB_Incr(f->ExportName);
	JB_Decr(f);
	if ((!JB_Str_Equals(fexp, JB_LUB[1586], true)) and ((!JB_Str_Equals(fexp, JB_LUB[1587], true)) and (!JB_Str_Equals(fexp, JB_LUB[1588], true)))) {
		JB_Decr(s);
		JB_Decr(List);
		JB_Decr(fexp);
		return true;
	}
	Message* L1 = JB_Incr(((Message*)JB_Ring_First(List)));
	if (L1) {
		Message* R1 = JB_Incr(((Message*)JB_Ring_NextSib(L1)));
		if (R1) {
			JB_Object* RObj = JB_Incr(R1->Obj);
			if (JB_Object_FastIsa(RObj, JB_AsClass(SCModule))) {
				if (JB_Str_Equals(fexp, JB_LUB[1586], true)) {
					if (((bool)((SCModule*)RObj)->Cls) and (!((SCModule*)RObj)->Cls->HasSubClass)) {
						JB_SetRef(List->Obj, SC_Base_SyntaxAccess(JB_TypeObject, JB_LUB[1589]));
					}
				}
				if (JB_Msg_EqualsSyx(L1, JB_SyxThg, false)) {
					JB_Array_SyntaxAppend(out, s);
					JB_Decr(s);
					JB_Decr(List);
					JB_Decr(fexp);
					JB_Decr(L1);
					JB_Decr(R1);
					JB_Decr(RObj);
					return true;
				}
			}
			JB_Decr(RObj);
		}
		JB_Decr(R1);
	}
	JB_Decr(L1);
	JB_Decr(fexp);
	JB_Decr(List);
	JB_Decr(s);
	return false;
}

SCBase* SC_Func__DebugInsert(Message* node, SCBase* name_space, Message* ErrPlace) {
	debugger;
	JB_Tree_Remove(node);
	if (SC__Comp_DebugInsert) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1590]);
		return nil;
	}
	JB_SetRef(SC__Comp_DebugInsert, ((Message*)JB_Ring_First(node)));
	return SC__Comp_program;
}

void SC_Func__FastStringOpt(Message* s, SCBase* name_space) {
	SCFunction* fn = JB_Msg_MsgFunc(s);
	Message* prms = ((Message*)JB_Tree_Second(s));
	if ((!(((bool)prms) and ((bool)fn)))) {
		return;
	}
	if ((!(JB_Str_Equals(fn->ExportName, JB_LUB[1591], false)))) {
		return;
	}
	Message* item = ((Message*)JB_Ring_Last(prms));
	if (SC_Func_SyntaxEquals(JB_Msg_MsgFunc(item), JB_LUB[1592], false)) {
		SC_FastStringOpts__FS(s, item);
	}
	 else {
		SC_FastStringOpts__String(s, item);
	}
}

Message* SC_Func__GetFileString(Message* msg, JB_String* name) {
	JB_File* f = JB_Incr(SC_Comp__InputFile(nil, name, msg));
	if (JB_File_SyntaxCast(f)) {
		JB_String* _tmPf0 = JB_Incr(JB_File_ReadAll(f, 134217728, true));
		JB_Msg_BecomeStr(msg, JB_SyxStr, _tmPf0);
		JB_Decr(_tmPf0);
		JB_Tree_Clear(msg);
		SC_Func__ObjectifyString(msg);
		JB_Decr(f);
		return msg;
	}
	JB_Decr(f);
	if ((!false)) {
		JB_Msg_SyntaxExpect(msg, JB_LUB[1593]);
	}
	return nil;
}

bool SC_Func__InBuiltFunc(Message* self, JB_String* name) {
	Message* p = ((Message*)JB_Ring_Parent(self));
	Message* c = ((Message*)JB_Ring_First(p));
	bool OK = ((JB_Msg_EqualsSyx(p, JB_SyxQues, false))) and (JB_Msg_SyntaxEquals(c, name, false));
	if ((!OK)) {
		Message* p2 = ((Message*)JB_Ring_Parent(p));
		if (JB_Msg_EqualsSyx(p2, JB_SyxFunc, false)) {
			c = ((Message*)JB_Ring_First(p2));
			JB_String* n = c->Name;
			OK = (JB_Str_HasMoat(n) and JB_Str_MidEquals(n, 2, name, false));
			if (OK) {
				JB_Msg_BecomeStr(p2, JB_SyxBra, JB_LUB[0]);
			}
		}
	}
	if (OK) {
		JB_Msg_BecomeStr(p, JB_SyxBra, JB_LUB[0]);
		JB_Tree_Remove(c);
		return true;
	}
	return false;
}

int SC_Func__Init_() {
	{
		SC__Func_DisabledPoints = 0;
		SC__Func_OnceCount = 0;
		JB_SetRef(SC__Func_TemporalStatements, (JB_Dict__New()));
		DTWrap* _tmPf0 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_CppRefs)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[819], _tmPf0));
		JB_Decr(_tmPf0);
		DTWrap* _tmPf1 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_For)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1594], _tmPf1));
		JB_Decr(_tmPf1);
		DTWrap* _tmPf2 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Swap)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1085], _tmPf2));
		JB_Decr(_tmPf2);
		DTWrap* _tmPf3 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_While)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[597], _tmPf3));
		JB_Decr(_tmPf3);
		DTWrap* _tmPf4 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Description)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1595], _tmPf4));
		JB_Decr(_tmPf4);
		DTWrap* _tmPf5 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_If)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[689], _tmPf5));
		JB_Decr(_tmPf5);
		DTWrap* _tmPf6 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__TranFuncDummy)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1075], _tmPf6));
		JB_Decr(_tmPf6);
		DTWrap* _tmPf7 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Once)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1596], _tmPf7));
		JB_Decr(_tmPf7);
		DTWrap* _tmPf8 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Ifn)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1597], _tmPf8));
		JB_Decr(_tmPf8);
		DTWrap* _tmPf9 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Else)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1076], _tmPf9));
		JB_Decr(_tmPf9);
		DTWrap* _tmPf10 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Debugger)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[688], _tmPf10));
		JB_Decr(_tmPf10);
		DTWrap* _tmPf11 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_TemporalStatements_crash))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[332], _tmPf11));
		JB_Decr(_tmPf11);
		DTWrap* _tmPf12 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Deprecate)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1598], _tmPf12));
		JB_Decr(_tmPf12);
		DTWrap* _tmPf13 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_DoAt)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1599], _tmPf13));
		JB_Decr(_tmPf13);
		DTWrap* _tmPf14 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_DoAt)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1600], _tmPf14));
		JB_Decr(_tmPf14);
		DTWrap* _tmPf15 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Visible)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[830], _tmPf15));
		JB_Decr(_tmPf15);
		DTWrap* _tmPf16 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Print)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[328], _tmPf16));
		JB_Decr(_tmPf16);
		DTWrap* _tmPf17 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Print)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1601], _tmPf17));
		JB_Decr(_tmPf17);
		DTWrap* _tmPf18 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Print)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1602], _tmPf18));
		JB_Decr(_tmPf18);
		DTWrap* _tmPf19 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Print)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1603], _tmPf19));
		JB_Decr(_tmPf19);
		DTWrap* _tmPf20 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Log)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[391], _tmPf20));
		JB_Decr(_tmPf20);
		DTWrap* _tmPf21 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Beep)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1604], _tmPf21));
		JB_Decr(_tmPf21);
		DTWrap* _tmPf22 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Quit)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1605], _tmPf22));
		JB_Decr(_tmPf22);
		DTWrap* _tmPf23 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__Tran_Exit))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1563], _tmPf23));
		JB_Decr(_tmPf23);
		DTWrap* _tmPf24 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_Func__Tran_Exit))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1082], _tmPf24));
		JB_Decr(_tmPf24);
		DTWrap* _tmPf25 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__TranFuncDummy)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1606], _tmPf25));
		JB_Decr(_tmPf25);
		DTWrap* _tmPf26 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_TemporalStatements_ignore))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[652], _tmPf26));
		JB_Decr(_tmPf26);
		DTWrap* _tmPf27 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Return)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[602], _tmPf27));
		JB_Decr(_tmPf27);
		DTWrap* _tmPf28 = JB_Incr(JB_Wrap__New(((_voidptr)((&SC_Func__Tran_Rejoin)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[690], _tmPf28));
		JB_Decr(_tmPf28);
		DTWrap* _tmPf29 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_TemporalStatements_alert))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1607], _tmPf29));
		JB_Decr(_tmPf29);
		DTWrap* _tmPf30 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_TemporalStatements_break))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1083], _tmPf30));
		JB_Decr(_tmPf30);
		DTWrap* _tmPf31 = JB_Incr(JB_Wrap__New(((_voidptr)(&SC_TemporalStatements_do))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1608], _tmPf31));
		JB_Decr(_tmPf31);
	}
	;
	return 0;
}

int SC_Func__InitCode_() {
	{
	}
	;
	JB_SetRef(SC__SCStrings_RenderInsides, JB_Str_ParseCleanWipe(JB_LUB[1609]));
	JB_SetRef(SC__SCStrings_RenderNewParams, JB_Str_ParseCleanWipe(JB_LUB[1610]));
	JB_SetRef(SC__SCStrings_RenderFinish, JB_Msg_FindFlat(SC__SCStrings_RenderInsides, JB_SyxTmp, JB_LUB[1611], false));
	return 0;
}

bool SC_Func__MsgInsideDcl(Message* msg) {
	int Count = 0;
	{
		Message* _LoopSrcf1 = ((Message*)JB_Ring_Parent(msg));
		Message* p = _LoopSrcf1;
		while (p) {
			if (JB_Msg_EqualsSyx(p, JB_SyxDecl, false)) {
				return true;
			}
			if ((!(((!JB_Msg_EqualsSyx(p, JB_SyxTmp, false)) and (!JB_Msg_EqualsSyx(p, JB_SyxRel, false))) and ((++Count) < 3)))) {
				return nil;
			}
			p = ((Message*)JB_Ring_Parent(p));
		};
		(_LoopSrcf1);
	}
	;
	return false;
}

SCBase* SC_Func__NeuLibrary(Message* node, SCBase* name_space, Message* ErrPlace) {
	if ((!false)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1612]);
	}
	SC__Options_ProjectIsLibrary = true;
	return SC_Func__NeuMain(node, name_space, ErrPlace);
}

SCBase* SC_Func__NeuMain(Message* node, SCBase* name_space, Message* ErrPlace) {
	SCBase* rz = nil;
	if ((!(name_space == SC__Comp_program))) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1613]);
		JB_Decr(rz);
		return nil;
	}
	JB_SetRef(node->Name, JB_LUB[783]);
	JB_String* s = JB_Incr(JB_LUB[1614]);
	Message* fn_src = JB_Incr(JB_Str_ParseClean(s));
	JB_Decr(s);
	Message* src_arg = JB_Incr(((Message*)JB_Ring_Last(fn_src)));
	Message* inc_arg = JB_Incr(JB_Msg_NeedSyxInt(node, JB_SyxArg, -1));
	if ((!inc_arg)) {
		JB_Decr(rz);
		JB_Decr(fn_src);
		JB_Decr(src_arg);
		JB_Decr(inc_arg);
		return nil;
	}
	Message* prms = JB_Incr(((Message*)JB_Tree_Get(node, 0)));
	JB_FreeIfDead(JB_Str_AsFile(prms->Name));
	if ((!(prms == inc_arg))) {
		JB_Msg_SyntaxExpect(prms, nil);
		JB_Decr(rz);
		JB_Decr(fn_src);
		JB_Decr(src_arg);
		JB_Decr(inc_arg);
		JB_Decr(prms);
		return nil;
	}
	JB_Decr(prms);
	JB_Tree_Remove(src_arg);
	JB_Tree_SyntaxAppend(fn_src, inc_arg);
	JB_Tree_TakeAllFrom(inc_arg, src_arg);
	JB_Decr(inc_arg);
	JB_Decr(src_arg);
	SC__Comp_HasMainFunc = true;
	JB_SetRef(rz, SC_Func__NewFunc(fn_src, name_space, ErrPlace));
	if (JB_Object_FastIsa(rz, JB_AsClass(SCModule))) {
		SC_Class__ProcessExtend(fn_src, false);
		JB_Tree_Remove(fn_src);
	}
	JB_Decr(fn_src);
	JB_SafeDecr(rz);
	return rz;
}

SCBase* SC_Func__NeuSyx(Message* node, SCBase* name_space, Message* ErrPlace) {
	MessagePosition Using = JB_Msg_SyntaxUsing(node);
	Message* NewNode = JB_Incr(SC_Func__Tran_Syx(node));
	SCBase* _tmPf0 = JB_Incr(SC_Func__NewHelper(NewNode, name_space, ErrPlace));
	JB_Decr(NewNode);
	JB_MsgPos_Destructor((&Using));
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

SCFunction* SC_Func__New(Message* msg) {
	SCFunction* __rz__ = ((SCFunction*)SC_Func__Alloc());
	if (__rz__) {
		SC_Func_Constructor(__rz__, msg);
	}
	return __rz__;
}

SCBase* SC_Func__NewConstructor(Message* node, SCBase* name_space, Message* ErrPlace) {
	JB_SetRef(node->Name, JB_LUB[783]);
	//using;
	MessagePosition _using141 = JB_Msg_SyntaxUsing(node);
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1425]));
	(JB_Ring_FirstSet(node, (_tmPf0)));
	JB_Decr(_tmPf0);
	JB_MsgPos_SyntaxUsingComplete((&_using141));
	SCBase* _tmPf1 = JB_Incr(SC_Func__NewFunc(node, name_space, ErrPlace));
	JB_MsgPos_Destructor((&_using141));
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCBase* SC_Func__NewCppWrapper(Message* node, SCBase* name_space, Message* ErrPlace) {
	SCBase* rz = nil;
	Message* name = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	Message* prm = JB_Incr(JB_Msg_NextOf2(name, JB_SyxNil, nil));
	if ((!prm)) {
		JB_Decr(rz);
		JB_Decr(name);
		JB_Decr(prm);
		return nil;
	}
	if ((!(JB_Msg_IsLast(prm)))) {
		JB_Msg_SyntaxExpect(prm, nil);
		JB_Decr(rz);
		JB_Decr(name);
		JB_Decr(prm);
		return nil;
	}
	JB_Decr(prm);
	//using;
	MessagePosition _using140 = JB_Msg_SyntaxUsing(name);
	Message* thg = JB_Incr((JB_Syx_Msg(JB_SyxThg, name->Name)));
	JB_Decr(name);
	if (JB_Msg_SyntaxEquals(node, JB_LUB[787], false)) {
		JB_SetRef(thg, ({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf0, thg);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
	}
	bool IsNothing = (JB_Msg_SyntaxEquals(node, JB_LUB[788], false));
	bool IsLib = (JB_Msg_SyntaxEquals(node, JB_LUB[785], false));
	JB_SetRef(node->Name, JB_LUB[783]);
	Message* _tmPf3 = JB_Incr(({
		Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
		Message* _tmPf4 = JB_Incr(({
			Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[786])));
			JB_Tree_SyntaxAppend(__imPf2, thg);
			JB_SafeDecr(__imPf2);
			 __imPf2;
		}));
		JB_Tree_SyntaxAppend(__imPf1, _tmPf4);
		JB_Decr(_tmPf4);
		JB_SafeDecr(__imPf1);
		 __imPf1;
	}));
	JB_Decr(thg);
	JB_Tree_SyntaxAppend(node, _tmPf3);
	JB_Decr(_tmPf3);
	JB_SetRef(rz, SC_Func__NewFunc(node, name_space, ErrPlace));
	rz->NoAutoComplete = 1;
	if (IsNothing) {
		((SCFunction*)rz)->IsCppInBuilt = 2;
	}
	 else if (JB_Msg_SyntaxEquals(node, JB_LUB[787], false)) {
		((SCFunction*)rz)->IsCppInBuilt = 1;
	}
	((SCFunction*)rz)->IsExternalLib = IsLib;
	JB_MsgPos_SyntaxUsingComplete((&_using140));
	JB_SafeDecr(rz);
	JB_MsgPos_Destructor((&_using140));
	return rz;
}

SCBase* SC_Func__NewDestructor(Message* node, SCBase* name_space, Message* ErrPlace) {
	JB_SetRef(node->Name, JB_LUB[783]);
	if (true) {
		MessagePosition _using142 = JB_Msg_SyntaxUsing(node);
		Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1615]));
		(JB_Ring_FirstSet(node, (_tmPf0)));
		JB_Decr(_tmPf0);
		JB_MsgPos_SyntaxUsingComplete((&_using142));
		JB_MsgPos_Destructor((&_using142));
	}
	return SC_Func__NewFunc(node, name_space, ErrPlace);
}

SCBase* SC_Func__NewFunc(Message* node, SCBase* name_space, Message* ErrPlace) {
	if ((!node)) {
		return nil;
	}
	Message* name = JB_Incr(((Message*)JB_Ring_First(node)));
	if ((!name)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1616]);
		JB_Decr(name);
		return nil;
	}
	if (JB_Msg_EqualsSyx(name, JB_SyxDot, false)) {
		if ((({
			Message* _tmP223 = JB_Incr(((Message*)JB_Ring_Last(name)));
			bool _tmP222 = JB_Msg_EqualsSyx(_tmP223, JB_SyxName, false);
			JB_Decr(_tmP223);
			 _tmP222;
		})) or (({
			Message* _tmP225 = JB_Incr(((Message*)JB_Ring_Last(name)));
			bool _tmP224 = JB_Msg_EqualsSyx(_tmP225, JB_SyxThg, false);
			JB_Decr(_tmP225);
			 _tmP224;
		}))) {
			debugger;
		}
		JB_Decr(name);
		return SC_Class__ExtendOneFunc(node, nil, ErrPlace);
	}
	JB_Decr(name);
	return SC_Func__NewFuncSub(node, name_space, ErrPlace);
}

SCBase* SC_Func__NewFuncSub(Message* node, SCBase* name_space, Message* ErrPlace) {
	SCFunction* fn = JB_Incr(SC_Func__New(node));
	SC_Func_init_sub(fn, node, name_space);
	JB_SafeDecr(fn);
	return fn;
}

SCBase* SC_Func__NewHelper(Message* node, SCBase* name_space, Message* ErrPlace) {
	SCBase* rz = nil;
	JB_SetRef(node->Name, JB_LUB[783]);
	JB_SetRef(rz, SC_Func__NewFunc(node, name_space, ErrPlace));
	if (rz) {
		rz->NoAutoComplete = 2;
	}
	JB_SafeDecr(rz);
	return rz;
}

SCBase* SC_Func__NewMissingFunc(Message* node, SCBase* name_space, Message* ErrPlace) {
	SCBase* f = JB_Incr(SC_Func__NewFunc(node, name_space, ErrPlace));
	if (JB_Object_FastIsa(f, JB_AsClass(SCFunction))) {
		Message* arg = JB_Incr(SC_Base_SourceArg(((SCFunction*)f)));
		Message* C = JB_Incr(((Message*)JB_Ring_First(arg)));
		if ((!(((bool)C) and (!JB_FreeIfDead(((Message*)JB_Ring_NextSib(C))))))) {
			SC_SCObject_Fail(((SCFunction*)f), JB_LUB[1617]);
			JB_Decr(f);
			JB_Decr(arg);
			JB_Decr(C);
			return nil;
		}
		JB_Decr(C);
		Message* prm = JB_Incr(((Message*)JB_Ring_PrevSib(arg)));
		JB_Decr(arg);
		if (JB_Ring_HasChildren(prm)) {
			JB_Str_SyntaxExpect(JB_LUB[1618]);
			JB_Decr(f);
			JB_Decr(prm);
			return nil;
		}
		JB_Decr(prm);
		((SCFunction*)f)->IsMacro = true;
		JB_SetRef(node->Name, JB_LUB[783]);
	}
	JB_SafeDecr(f);
	return f;
}

SCBase* SC_Func__NewProtoType(Message* node, SCBase* name_space, Message* ErrPlace) {
	return SC_Func__NewProtoTypeSub(node, name_space, ErrPlace, nil);
}

SCModule* SC_Func__NewProtoTypeSub(Message* node, SCBase* parent, Message* ErrPlace, JB_String* ForInterface) {
	JB_Incr(parent);
	if (JB_Str_Exists(ForInterface)) {
		JB_SetRef(parent, ((SCClass*)parent)->Modul);
	}
	 else {
		if ((!(JB_Object_Isa(parent, JB_AsClass(SCModule))))) {
			JB_Msg_SyntaxExpect(node, JB_LUB[1619]);
			JB_Decr(parent);
			return nil;
		}
	}
	SCFunction* f = JB_Incr(((SCFunction*)SC_Func__NewFunc(node, parent, ErrPlace)));
	if ((!(JB_FreeIfDead(((SCFunction*)JB_Array_Pop(SC__Comp_FuncList))) == f))) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(parent);
		JB_Decr(f);
		return nil;
	}
	MessagePosition Using = JB_Msg_SyntaxUsing(node);
	Message* tmp = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[803])));
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxThg, f->Name));
	JB_Tree_SyntaxAppend(tmp, (_tmPf0));
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(node)));
	JB_Tree_SyntaxAppend(tmp, _tmPf1);
	JB_Decr(_tmPf1);
	SCModule* modul = JB_Incr(SC_Class__DataTypeSub(tmp, parent, node, ForInterface));
	JB_Decr(tmp);
	JB_Decr(parent);
	if (modul) {
		SCClass* clss = JB_Incr(modul->Cls);
		clss->IsBuiltin = false;
		JB_SetRef(clss->FuncProto, f);
		JB_SetRef(f->ProtoType, clss);
		JB_Decr(clss);
		JB_Array_SyntaxAppend(SC__Comp_ProtoTypes, f);
	}
	JB_Decr(f);
	JB_MsgPos_Destructor((&Using));
	JB_SafeDecr(modul);
	return modul;
}

SCBase* SC_Func__NewRender(Message* node, SCBase* name_space, Message* ErrPlace) {
	SCClass* cls = JB_Incr(SC_Base_IsNormalObject(name_space));
	if (SC_Func__Tran_Render(node, cls)) {
		JB_Decr(cls);
		return SC_Beh__NewBehaviour(node, name_space, ErrPlace);
	}
	JB_Decr(cls);
	return SC_Func__NewFunc(node, name_space, ErrPlace);
}

SCBase* SC_Func__NewSetter(Message* node, SCBase* name_space, Message* ErrPlace) {
	if ((!(JB_Object_Isa(name_space, JB_AsClass(SCClass))))) {
		JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1620]);
		return nil;
	}
	return SC_Func__NewFunc(node, name_space, ErrPlace);
}

void SC_Func__ObjectifyString(Message* msg) {
	if (SC_Func__MsgInsideDcl(msg)) {
		return;
	}
	Message* P1 = JB_Incr(((Message*)JB_Ring_Parent(msg)));
	Message* p = JB_Incr(((Message*)JB_Ring_Parent(P1)));
	JB_Decr(P1);
	if (JB_Msg_EqualsSyx(p, JB_SyxFunc, false)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(p)));
		if ((!((!JB_Msg_SyntaxEquals(_tmPf0, JB_LUB[1621], false))))) {
			JB_Decr(p);
			JB_Decr(_tmPf0);
			return;
		}
		JB_Decr(_tmPf0);
	}
	JB_Decr(p);
	msg->Func = JB_SyxSStr;
}

void SC_Func__String_Expand(Message* msg, SCFunction* fn) {
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(msg)));
	if (JB_Msg_OperatorIsTmp(P, JB_LUB[1582]) or JB_Msg_OperatorIsTmp(P, JB_LUB[1595])) {
		msg->Func = JB_SyxStr;
		JB_Decr(P);
		return;
	}
	if (SC_Func__InBuiltFunc(msg, JB_LUB[1622])) {
		JB_SetRef(msg->Name, JB_Str_digest(msg->Name));
	}
	if (JB_Msg_EqualsSyx(P, JB_SyxArg, false)) {
		Message* _tmPf6 = JB_Incr(JB_Syx_Msg(JB_SyxTmp, JB_LUB[1601]));
		JB_FreeIfDead(JB_Msg_WrapWith(msg, (_tmPf6)));
		JB_Decr(_tmPf6);
	}
	JB_Decr(P);
	if ((!JB_FreeIfDead(((Message*)JB_Ring_First(msg))))) {
		SC_Func__ObjectifyString(msg);
		return;
	}
	if ((!fn)) {
		return;
	}
	Message* Point = JB_Incr(JB_Msg_ParentPoint(msg));
	//using;
	MessagePosition _using207 = JB_Msg_SyntaxUsing(msg);
	JB_String* FSName = JB_Incr(SC_UniqueTmpVar(fn, JB_LUB[1623]));
	JB_String* StrName = JB_Incr(JB_Str_OperatorPlus(FSName, JB_LUB[1624]));
	JB_Decr(StrName);
	Message* Dot = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1383])));
	Message* _tmPf7 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1625]));
	JB_Tree_SyntaxAppend(Dot, (_tmPf7));
	JB_Decr(_tmPf7);
	Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Dot, (_tmPf8));
	JB_Decr(_tmPf8);
	Message* decl = JB_Incr(SC_MakeDecl(JB_LUB[1625], FSName, Dot));
	JB_Decr(Dot);
	(JB_Ring_PrevSibSet(Point, decl));
	Message* errpos = JB_Incr(msg);
	{
		Message* item = JB_Incr(((Message*)JB_Tree_First_(msg)));
		while (item) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(item)));
			Syntax syx = item->Func;
			if ((syx == JB_SyxEmb) or (syx == JB_SyxStr)) {
				if (syx == JB_SyxEmb) {
					JB_SetRef(errpos, item);
				}
				SC_Func__ObjectifyString(item);
			}
			JB_SetRef(item, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(item);
		(msg);
	}
	;
	if (SC__Base_CurrModule) {
		JB_Msg_SyntaxExpect(errpos, JB_LUB[1626]);
	}
	JB_Decr(errpos);
	{
		Message* item = JB_Incr(((Message*)JB_Tree_First_(msg)));
		while (item) {
			Message* _Nf3 = JB_Incr(((Message*)JB_Ring_NextSib(item)));
			Message* _tmPf9 = JB_Incr(({
				Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[870])));
				Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxThg, FSName));
				JB_Tree_SyntaxAppend(__imPf4, (_tmPf10));
				JB_Decr(_tmPf10);
				Message* _tmPf11 = JB_Incr(({
					Message* __imPf5 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
					JB_Tree_SyntaxAppend(__imPf5, item);
					JB_SafeDecr(__imPf5);
					 __imPf5;
				}));
				JB_Tree_SyntaxAppend(__imPf4, _tmPf11);
				JB_Decr(_tmPf11);
				JB_SafeDecr(__imPf4);
				 __imPf4;
			}));
			(JB_Ring_PrevSibSet(Point, _tmPf9));
			JB_Decr(_tmPf9);
			JB_SetRef(item, _Nf3);
			JB_Decr(_Nf3);
		};
		JB_Decr(item);
		(msg);
	}
	;
	JB_Decr(Point);
	bool WeAreAppending = false;
	Message* fnc = JB_Incr(((Message*)JB_Ring_Parent(msg)));
	if (JB_Msg_EqualsSyx(fnc, JB_SyxPrm, false)) {
		JB_SetRef(fnc, ((Message*)JB_Ring_Parent(fnc)));
		if ((JB_Msg_EqualsSyx(fnc, JB_SyxDot, true)) and (JB_Msg_SyntaxEquals(fnc, JB_LUB[870], true))) {
			WeAreAppending = true;
		}
	}
	JB_Decr(fnc);
	if (false) {
	}
	 else {
		JB_Msg_BecomeStr(msg, JB_SyxDot, JB_LUB[1627]);
		Message* _tmPf12 = JB_Incr(JB_Syx_Msg(JB_SyxThg, FSName));
		JB_Tree_SyntaxAppend(msg, (_tmPf12));
		JB_Decr(_tmPf12);
		Message* _tmPf13 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
		JB_Tree_SyntaxAppend(msg, (_tmPf13));
		JB_Decr(_tmPf13);
	}
	JB_Decr(FSName);
	(decl);
	JB_Decr(decl);
	JB_MsgPos_SyntaxUsingComplete((&_using207));
	JB_MsgPos_Destructor((&_using207));
}

Message* SC_Func__TypedTempMoveOut(Message* msg, JB_String* name) {
	JB_Incr(name);
	MessagePosition Using = JB_Msg_SyntaxUsing(msg);
	if ((!(JB_Str_Exists(name)))) {
		SCFunction* _tmPf1 = JB_Incr(JB_Msg_MsgOwningFunc(msg));
		JB_SetRef(name, SC_UniqueTmpVar(_tmPf1, JB_LUB[1628]));
		JB_Decr(_tmPf1);
	}
	Message* repl = JB_Incr((JB_Syx_Msg(JB_SyxThg, name)));
	JB_FreeIfDead(JB_Msg_ReplaceWith(msg, repl));
	Message* p = JB_Incr(JB_Msg_ParentPoint(repl));
	Message* insert = JB_Incr(msg);
	if (JB_Msg_EqualsSyx(msg, JB_SyxRel, false)) {
		JB_SetRef(insert, ({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf0, (msg));
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
	}
	Message* dcl = JB_Incr(SC_MakeDecl(JB_LUB[0], name, insert));
	(JB_Ring_PrevSibSet(p, dcl));
	JB_Decr(p);
	if (JB_Msg_OperatorIn(repl, JB_SyxArg)) {
		JB_Tree_Remove(repl);
	}
	SCDecl* OldDcl = JB_Incr(JB_Msg_AsDecl(msg));
	if (OldDcl) {
		JB_SetRef(insert->Obj, OldDcl);
		JB_SetRef(OldDcl, SC_Decl_Copy(OldDcl, false));
		JB_SetRef(OldDcl->Name, name);
		JB_SetRef(repl->Obj, OldDcl);
		JB_SetRef(dcl->Obj, OldDcl);
	}
	JB_Decr(OldDcl);
	JB_Decr(insert);
	JB_Decr(repl);
	JB_Decr(name);
	JB_MsgPos_Destructor((&Using));
	JB_SafeDecr(dcl);
	return dcl;
}

Message* SC_Func__TempMoveOut(Message* msg, Message* parent) {
	if ((!((!JB_Msg_EqualsSyx(msg, JB_SyxStr, false))))) {
		JB_Object_SyntaxExpect(nil);
		return nil;
	}
	SCDecl* OldDecl = JB_Incr(JB_Msg_AsDecl(msg));
	if ((!(OldDecl))) {
		(JB_Ring_PrevSibSet(parent, msg));
		JB_Decr(OldDecl);
		return msg;
	}
	MessagePosition Using = JB_Msg_SyntaxUsing(msg);
	SCFunction* _tmPf0 = JB_Incr(JB_Msg_MsgOwningFunc(msg));
	JB_String* Name = JB_Incr(SC_UniqueTmpVar(_tmPf0, JB_LUB[1628]));
	JB_Decr(_tmPf0);
	SCDecl* d = JB_Incr(SC_Decl_Copy(OldDecl, false));
	JB_Decr(OldDecl);
	JB_SetRef(d->Name, JB_LUB[0]);
	Message* NameThing = JB_Incr((JB_Syx_Msg(JB_SyxThg, Name)));
	JB_SetRef(NameThing->Obj, d);
	JB_Decr(d);
	JB_FreeIfDead(JB_Msg_ReplaceWith(msg, NameThing));
	Message* _tmPf1 = JB_Incr(SC_MakeDecl(JB_LUB[0], Name, msg));
	JB_Decr(Name);
	(JB_Ring_PrevSibSet(((Message*)JB_Ternary(((bool)parent), parent, NameThing)), _tmPf1));
	JB_Decr(_tmPf1);
	JB_MsgPos_Destructor((&Using));
	JB_SafeDecr(NameThing);
	return NameThing;
}

SCDecl* SC_Func__Tran_AfterRel(Message* msg, SCBase* name_space, Message* side) {
	Message* exp = JB_Incr(((Message*)JB_Ring_First(msg)));
	if (JB_Msg_OperatorIsBRel(msg, JB_LUB[679])) {
		SCDecl* _tmPf4 = JB_Incr(SC_TypeOfExpr(exp, name_space, nil));
		JB_Decr(exp);
		JB_SafeDecr(_tmPf4);
		return _tmPf4;
	}
	if ((!((JB_Msg_SyntaxEquals(msg, JB_LUB[686], false)) or (JB_Msg_SyntaxEquals(msg, JB_LUB[1410], false))))) {
		JB_Msg_SyntaxExpect(msg, JB_LUB[1629]);
		JB_Decr(exp);
		return nil;
	}
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(msg)));
	JB_Decr(P);
	//using;
	MessagePosition _using132 = JB_Msg_SyntaxUsing(exp);
	Message* exp_copy = JB_Incr(JB_Msg_NiceCopy(exp, nil));
	SCDecl* Type = JB_Incr(SC_TypeOfExpr(exp, name_space, nil));
	if ((!Type)) {
		JB_Decr(exp);
		JB_MsgPos_Destructor((&_using132));
		JB_Decr(exp_copy);
		JB_Decr(Type);
		return nil;
	}
	int numc = SC_Class_NumericCount(Type->Type);
	if (((!SC_Class_IsObject(Type->Type)) and (JB_Str_Exists(Type->Name) and ((!Type->Setter) and (numc <= 1)))) or (Type->PointerCount > 0)) {
		JB_Decr(exp);
		JB_MsgPos_Destructor((&_using132));
		JB_Decr(exp_copy);
		JB_SafeDecr(Type);
		return Type;
	}
	Message* R = nil;
	if (((bool)numc) or ((bool)Type->Setter)) {
		JB_String* _tmPf1 = JB_Incr(JB_Str_Range(msg->Name, 0, 1));
		Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxNum, JB_LUB[1188]));
		JB_SetRef(R, SC_NewRel(exp, _tmPf1, (_tmPf2)));
		JB_Decr(_tmPf2);
		JB_Decr(_tmPf1);
	}
	 else {
		JB_String* name = JB_Incr(((JB_String*)JB_Ternary((JB_Msg_SyntaxEquals(msg, JB_LUB[1410], false)), JB_LUB[1630], JB_LUB[1631])));
		JB_SetRef(R, ({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxDot, name)));
			JB_Tree_SyntaxAppend(__imPf0, (exp));
			Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
			JB_Tree_SyntaxAppend(__imPf0, (_tmPf3));
			JB_Decr(_tmPf3);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
		JB_Decr(name);
	}
	JB_Decr(Type);
	JB_Decr(exp);
	JB_Msg_BecomeStr(msg, JB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(msg, exp_copy);
	JB_Decr(exp_copy);
	JB_Msg_AppendSyx(msg, JB_SyxOpp, JB_LUB[541]);
	JB_Tree_SyntaxAppend(msg, R);
	JB_Decr(R);
	JB_SetRef(msg->Obj, nil);
	JB_MsgPos_SyntaxUsingComplete((&_using132));
	SCDecl* _tmPf5 = JB_Incr(SC_TypeOfExpr(msg, name_space, nil));
	JB_MsgPos_Destructor((&_using132));
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

void SC_Func__Tran_All(SCFunction* fn, Message* s, SCBase* p) {
	JB_Incr(p);
	JB_Incr(s);
	if (SC_TooManyErrors()) {
		JB_Decr(s);
		JB_Decr(p);
		return;
	}
	Syntax f = s->Func;
	if (f == JB_SyxArg) {
		Message* pr = JB_Incr(((Message*)JB_Ring_Parent(s)));
		if ((!((!JB_Msg_EqualsSyx(pr, JB_SyxBra, false)) and (!JB_Msg_EqualsSyx(pr, JB_SyxType, false))))) {
			JB_Decr(s);
			JB_Decr(p);
			JB_Decr(pr);
			return;
		}
		JB_Decr(pr);
		JB_FreeIfDead(SC_CollectDecls(s, p, p, 0));
	}
	 else if (f == JB_SyxDecl) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(s)));
		JB_SetRef(s, SC_DeclsDefault(_tmPf0));
		JB_Decr(_tmPf0);
		if (s) {
			SC_Func__Tran_All(fn, s, p);
		}
		JB_Decr(s);
		JB_Decr(p);
		return;
	}
	 else if (f == JB_SyxArr) {
		SC_Func__Tran_Array(s, p);
	}
	 else if (f == JB_SyxType) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(s)));
		SC_Func__Tran_All(fn, _tmPf1, p);
		JB_Decr(_tmPf1);
		JB_Decr(s);
		JB_Decr(p);
		return;
	}
	 else if (f == JB_SyxTmp) {
		SC_Func__Tran_Temporal(fn, s, p);
		if (JB_Msg_SyntaxEquals(s, JB_LUB[652], false)) {
			JB_Decr(s);
			JB_Decr(p);
			return;
		}
	}
	 else if (f == JB_SyxList) {
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(s)));
		if (JB_Msg_EqualsSyx(_tmPf2, JB_SyxItem, false)) {
			SC_Tran_MsgList(fn, s, p);
		}
		JB_Decr(_tmPf2);
	}
	 else if (f == JB_SyxMsg) {
		SC_Tran_Msg(fn, s, p);
	}
	 else if ((f == JB_SyxThg) or ((f == JB_SyxOpp) or ((f == JB_SyxItem) or (f == JB_SyxPrm)))) {
		0;
	}
	 else {
		JB_FreeIfDead(SC_TypeOfExpr(s, p, nil));
		if (JB_Msg_EqualsSyx(s, JB_SyxFunc, false)) {
			SC_Func__FastStringOpt(s, p);
		}
	}
	if (((JB_Msg_EqualsSyx(s, JB_SyxArg, false))) and (f != JB_SyxArg)) {
		JB_SetRef(p, JB_Msg_SCArg(s, p, nil));
	}
	if ((!(f != JB_SyxUnit))) {
		JB_Decr(s);
		JB_Decr(p);
		return;
	}
	Message* ch = JB_Incr(((Message*)JB_Ring_First(s)));
	while (ch) {
		Message* n = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
		if (JB_Msg_EqualsSyx(ch, JB_SyxArg, false)) {
			SCArg* _tmPf3 = JB_Incr(JB_Msg_SCArg(ch, p, s));
			SC_Func__Tran_All(fn, ch, _tmPf3);
			JB_Decr(_tmPf3);
		}
		 else {
			SC_Func__Tran_All(fn, ch, p);
		}
		JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
		if ((!ch) and (((bool)n) and ((bool)JB_FreeIfDead(((Message*)JB_Ring_Parent(n)))))) {
			JB_SetRef(ch, n);
		}
		JB_Decr(n);
	};
	JB_Decr(ch);
	JB_Decr(p);
	JB_Decr(s);
}

void SC_Func__Tran_Array(Message* S, SCBase* name_space) {
	SCDecl* Type = JB_Incr(JB_Msg_AsDecl(S));
	if ((!Type)) {
		JB_Decr(Type);
		return;
	}
	Message* thg = JB_Incr(JB_Msg_IsSetIntoVar(S));
	if ((!thg)) {
		Message* _tmPf5 = JB_Incr(JB_Msg_ParentPoint(S));
		JB_SetRef(thg, SC_Func__TempMoveOut(S, _tmPf5));
		JB_Decr(_tmPf5);
		SCDecl* _tmPf6 = JB_Incr(JB_Msg_AsDecl(thg));
		SC_Base_TryAdd(name_space, thg, _tmPf6, thg->Name);
		JB_Decr(_tmPf6);
	}
	Message* P = JB_Incr(JB_Msg_NiceParent(S));
	Message* Place = JB_Incr(JB_Msg_ParentPoint(P));
	//using;
	MessagePosition _using196 = JB_Msg_SyntaxUsing(S);
	Message* DotNew = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1383])));
	Message* _tmPf7 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Type->Type->Name));
	JB_Decr(Type);
	JB_Tree_SyntaxAppend(DotNew, (_tmPf7));
	JB_Decr(_tmPf7);
	Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(DotNew, (_tmPf8));
	JB_Decr(_tmPf8);
	if (JB_Msg_OperatorIn(P, JB_SyxDecl)) {
		SCDecl* d = JB_Incr(JB_Msg_AsDecl(P));
		if ((!d)) {
			JB_Decr(thg);
			JB_Decr(P);
			JB_Decr(Place);
			JB_MsgPos_Destructor((&_using196));
			JB_Decr(DotNew);
			JB_Decr(d);
			return;
		}
		JB_SetRef(d->Default, DotNew);
		JB_Decr(d);
	}
	JB_Decr(P);
	JB_Msg_FixMultiArr(S);
	{
		Message* item = JB_Incr(((Message*)JB_Tree_First_(S)));
		while (item) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(item)));
			Message* Rel = nil;
			if (JB_Msg_EqualsSyx(item, JB_SyxItem, false)) {
				JB_Tree_Remove(item);
				JB_SetRef(Rel, ({
					Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
					Message* _tmPf9 = JB_Incr(({
						Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxAcc, JB_LUB[0])));
						Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxThg, thg->Name));
						JB_Tree_SyntaxAppend(__imPf3, (_tmPf10));
						JB_Decr(_tmPf10);
						Message* _tmPf11 = JB_Incr(({
							Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxArr, JB_LUB[0])));
							Message* _tmPf12 = JB_Incr(((Message*)JB_Ring_First(item)));
							JB_Tree_SyntaxAppend(__imPf4, _tmPf12);
							JB_Decr(_tmPf12);
							JB_SafeDecr(__imPf4);
							 __imPf4;
						}));
						JB_Tree_SyntaxAppend(__imPf3, _tmPf11);
						JB_Decr(_tmPf11);
						JB_SafeDecr(__imPf3);
						 __imPf3;
					}));
					JB_Tree_SyntaxAppend(__imPf2, _tmPf9);
					JB_Decr(_tmPf9);
					Message* _tmPf13 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[541]));
					JB_Tree_SyntaxAppend(__imPf2, (_tmPf13));
					JB_Decr(_tmPf13);
					Message* _tmPf14 = JB_Incr(((Message*)JB_Ring_Last(item)));
					JB_Tree_SyntaxAppend(__imPf2, _tmPf14);
					JB_Decr(_tmPf14);
					JB_SafeDecr(__imPf2);
					 __imPf2;
				}));
			}
			 else {
				JB_SetRef(Rel, JB_Syx_Msg(JB_SyxDot, JB_LUB[870]));
				JB_Msg_AppendSyx(Rel, JB_SyxThg, thg->Name);
				Message* _tmPf15 = JB_Incr(JB_Msg_Msg(Rel, JB_SyxPrm, JB_LUB[0]));
				JB_Tree_SyntaxAppend(_tmPf15, item);
				JB_Decr(_tmPf15);
			}
			(JB_Ring_NextSibSet(Place, Rel));
			JB_SetRef(Place, Rel);
			JB_FreeIfDead(SC_TypeOfExpr(Rel, name_space, nil));
			JB_Decr(Rel);
			JB_SetRef(item, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(item);
		(S);
	}
	;
	JB_Decr(Place);
	JB_Decr(thg);
	JB_FreeIfDead(SC_TypeOfExpr(DotNew, name_space, nil));
	JB_Msg_SafeReplaceWith(S, DotNew);
	JB_Decr(DotNew);
	JB_MsgPos_SyntaxUsingComplete((&_using196));
	JB_MsgPos_Destructor((&_using196));
}

void SC_Func__Tran_Beep(SCFunction* fn, Message* node, SCBase* name_space) {
	JB_Msg_MiniTran(node, name_space, JB_LUB[70]);
}

void SC_Func__Tran_Chr(Message* msg, SCFunction* fn) {
	Codepoint cp = JB_Str_UTF8Value(msg->Name);
	if ((!(cp >= 128))) {
		JB_Msg_SyntaxExpect(msg, JB_LUB[1632]);
		return;
	}
	msg->Func = JB_SyxNum;
	JB_SetRef(msg->Name, JB_int_RenderFS(((int)cp), nil));
	SCClass* _tmPf0 = JB_Incr(SC_Comp__AccessStr(JB_LUB[1633], nil));
	JB_SetRef(msg->Obj, _tmPf0->TypeNormal);
	JB_Decr(_tmPf0);
}

void SC_Func__Tran_CppRefs(SCFunction* fn, Message* node, SCBase* name_space) {
	JB_SetRef(fn->Refs, SC_CppRefs__New(node));
	JB_Tree_Remove(node);
}

void SC_Func__Tran_Debugger(SCFunction* fn, Message* node, SCBase* name_space) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(node)));
	if ((!ch)) {
		JB_SetRef(node->Name, JB_LUB[688]);
		JB_Decr(ch);
		return;
	}
	if ((!(((JB_Msg_SyntaxEquals(node, JB_LUB[688], false))) and ((!JB_FreeIfDead(((Message*)JB_Ring_NextSib(ch)))))))) {
		JB_Msg_SyntaxExpect(node, nil);
		JB_Decr(ch);
		return;
	}
	if (true) {
		MessagePosition _using134 = JB_Msg_SyntaxUsing(node);
		JB_FreeIfDead(SC_ExpandToBool(ch, name_space));
		Message* _tmPf2 = JB_Incr(({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[679])));
			Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(node)));
			JB_Tree_SyntaxAppend(__imPf0, _tmPf3);
			JB_Decr(_tmPf3);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
		(JB_Ring_FirstSet(node, _tmPf2));
		JB_Decr(_tmPf2);
		JB_SetRef(node->Name, JB_LUB[689]);
		Message* _tmPf4 = JB_Incr(({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
			Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxTmp, JB_LUB[688]));
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf5));
			JB_Decr(_tmPf5);
			JB_SafeDecr(__imPf1);
			 __imPf1;
		}));
		JB_Tree_SyntaxAppend(node, _tmPf4);
		JB_Decr(_tmPf4);
		JB_MsgPos_SyntaxUsingComplete((&_using134));
		JB_MsgPos_Destructor((&_using134));
	}
	JB_Decr(ch);
	SC_Func__Tran_If(fn, node, name_space);
}

void SC_Func__Tran_Deprecate(SCFunction* fn, Message* node, SCBase* name_space) {
	Message* stuff = JB_Incr(JB_Msg_NeedSyx(node, ((Syntax)nil)));
	if ((!stuff)) {
		JB_Decr(stuff);
		return;
	}
	if ((!JB_Msg_ExpectLast(stuff, JB_LUB[0]))) {
		JB_Decr(stuff);
		return;
	}
	if ((!JB_Msg_EqualsSyx(stuff, JB_SyxList, false)) and (!JB_Msg_EqualsSyx(stuff, JB_SyxBra, false))) {
		Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxList, JB_LUB[0]));
		JB_SetRef(stuff, JB_Msg_WrapWith(stuff, _tmPf0));
		JB_Decr(_tmPf0);
	}
	if (true) {
		MessagePosition _using139 = JB_Msg_SyntaxUsing(node);
		stuff->Func = JB_SyxPrm;
		JB_Msg_BecomeStr(node, JB_SyxBra, JB_LUB[0]);
		Message* Dot = JB_Incr(JB_Syx_ParentMsg(JB_SyxDot, node, JB_LUB[1634]));
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(stuff)));
		JB_Tree_SyntaxAppend(Dot, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Tree_SyntaxAppend(Dot, stuff);
		JB_Decr(Dot);
		JB_MsgPos_SyntaxUsingComplete((&_using139));
		JB_MsgPos_Destructor((&_using139));
	}
	JB_Decr(stuff);
	JB_FreeIfDead(SC_TypeOfExpr(node, name_space, nil));
}

void SC_Func__Tran_Description(SCFunction* fn, Message* node, SCBase* name_space) {
	JB_Tree_Remove(node);
	if (JB_Str_Exists(fn->Description)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1635]);
		return;
	}
	Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxStr));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return;
	}
	JB_SetRef(fn->Description, _tmPf0->Name);
	JB_Decr(_tmPf0);
}

void SC_Func__Tran_DoAt(SCFunction* fn, Message* node, SCBase* name_space) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(node)));
	if (true) {
		MessagePosition _using135 = JB_Msg_SyntaxUsing(node);
		JB_Msg_BecomeStr(node, JB_SyxFunc, JB_LUB[0]);
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1636]));
		JB_Tree_SyntaxAppend(node, (_tmPf1));
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf0, ch);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
		JB_Tree_SyntaxAppend(node, _tmPf2);
		JB_Decr(_tmPf2);
		JB_MsgPos_SyntaxUsingComplete((&_using135));
		JB_MsgPos_Destructor((&_using135));
	}
	JB_Decr(ch);
	JB_FreeIfDead(SC_TypeOfExpr(node, name_space, nil));
}

void SC_Func__Tran_Else(SCFunction* fn, Message* node, SCBase* name_space) {
	Message* p = ((Message*)JB_Ring_PrevSib(node));
	JB_Msg_ExpectLast(JB_Msg_NeedSyx(node, JB_SyxArg), JB_LUB[0]);
}

void SC_Func__Tran_Exit(SCFunction* fn, Message* node, SCBase* name_space) {
	if (((Message*)JB_Ring_First(node))) {
		JB_Msg_SyntaxExpect(node, nil);
		return;
	}
	Message* Found = JB_Msg_FindOwningLoop(node, SC_Base_SourceArg(fn));
	if ((!Found)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1637]);
		return;
	}
}

void SC_Func__Tran_Expect(SCFunction* fn, Message* node, SCBase* name_space) {
	Message* ch = JB_Incr(JB_Msg_NeedSyx(node, ((Syntax)nil)));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	//using;
	MessagePosition _using194 = JB_Msg_SyntaxUsing(node);
	Message* Ch1 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	JB_String* N = JB_Incr(node->Name);
	if (JB_Str_Equals(N, JB_LUB[363], false)) {
		JB_SetRef(N, JB_LUB[319]);
		if (Ch1) {
			(JB_Msg_SyntaxDeprecate(node, JB_LUB[1638]));
		}
	}
	bool NewStyle = ((JB_Str_Equals(N, JB_LUB[319], false)) or (JB_Str_Equals(N, JB_LUB[339], false)));
	if (NewStyle and (!Ch1)) {
		JB_SetRef(Ch1, ch);
		JB_SetRef(ch, (JB_Syx_Msg(JB_SyxThg, JB_LUB[108])));
		(JB_Ring_PrevSibSet(Ch1, ch));
	}
	if (name_space) {
		JB_FreeIfDead(SC_TypeOfExpr(ch, name_space, nil));
	}
	Message* _tmPf0 = JB_Incr(JB_Msg_Negate(ch));
	JB_SetRef(ch, JB_Msg_NeedBra(_tmPf0));
	JB_Decr(_tmPf0);
	Message* arg = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
	JB_Tree_SyntaxAppend(node, arg);
	if (((JB_Str_Equals(N, JB_LUB[1559], false))) or (NewStyle)) {
		Message* _tmPf1 = JB_Incr(JB_Msg_ExpectParamsTransform(Ch1, node->Position, ch, N));
		JB_Tree_SyntaxAppend(arg, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(Ch1);
	JB_Decr(ch);
	if (JB_Str_Equals(N, JB_LUB[1562], false)) {
		Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxTmp, JB_LUB[688]));
		JB_Tree_SyntaxAppend(arg, (_tmPf2));
		JB_Decr(_tmPf2);
	}
	if ((!NewStyle)) {
		if (JB_Str_Equals(N, JB_LUB[1561], false)) {
			Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxTmp, JB_LUB[1082]));
			JB_Tree_SyntaxAppend(arg, (_tmPf3));
			JB_Decr(_tmPf3);
		}
		 else {
			Message* ret = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[602])));
			Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[106]));
			JB_Tree_SyntaxAppend(ret, (_tmPf4));
			JB_Decr(_tmPf4);
			JB_Tree_SyntaxAppend(arg, ret);
			JB_Decr(ret);
		}
	}
	JB_Decr(arg);
	JB_Decr(N);
	JB_SetRef(node->Name, JB_LUB[689]);
	JB_MsgPos_SyntaxUsingComplete((&_using194));
	JB_MsgPos_Destructor((&_using194));
}

void SC_Func__Tran_For(SCFunction* fn, Message* node, SCBase* name_space) {
	JB_Incr(name_space);
	if (true) {
		MessagePosition _using200 = JB_Msg_SyntaxUsing(node);
		JB_Msg_BecomeStr(node, JB_SyxArg, JB_LUB[0]);
		JB_SetRef(name_space, JB_Msg_SCArg(node, name_space, nil));
		SC_Func__Tran_ForSub(fn, node, name_space);
		JB_MsgPos_SyntaxUsingComplete((&_using200));
		JB_MsgPos_Destructor((&_using200));
	}
	JB_Decr(name_space);
}

void SC_Func__Tran_ForStart(Message* arg, Message* index, SCBase* p) {
	Message* start = JB_Incr(JB_Msg_GetMarker(arg, JB_LUB[1639]));
	if ((!start)) {
		JB_Decr(start);
		return;
	}
	if ((!(index))) {
		JB_Msg_SyntaxExpect(arg, JB_LUB[1640]);
		JB_Decr(start);
		return;
	}
	//using;
	MessagePosition _using203 = JB_Msg_SyntaxUsing(arg);
	JB_String* CondName = JB_Incr(SC_UniqueTmpVar(p, JB_LUB[13]));
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Parent(arg)));
	Message* _tmPf4 = JB_Incr(JB_Msg_NiceCopy(index, arg));
	Message* _tmPf3 = JB_Incr(SC_MakeDecl(JB_LUB[0], CondName, _tmPf4));
	JB_Decr(_tmPf4);
	(JB_Ring_PrevSibSet(_tmPf2, _tmPf3));
	JB_Decr(_tmPf3);
	JB_Decr(_tmPf2);
	Message* IfTest = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[689])));
	Message* _tmPf5 = JB_Incr(({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
		Message* _tmPf6 = JB_Incr(({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
			Message* _tmPf7 = JB_Incr(JB_Syx_Msg(JB_SyxThg, CondName));
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf7));
			JB_Decr(_tmPf7);
			Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[678]));
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf8));
			JB_Decr(_tmPf8);
			Message* _tmPf9 = JB_Incr(JB_Msg_NiceCopy(index, arg));
			JB_Tree_SyntaxAppend(__imPf1, _tmPf9);
			JB_Decr(_tmPf9);
			JB_SafeDecr(__imPf1);
			 __imPf1;
		}));
		JB_Tree_SyntaxAppend(__imPf0, _tmPf6);
		JB_Decr(_tmPf6);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	JB_Decr(CondName);
	JB_Tree_SyntaxAppend(IfTest, _tmPf5);
	JB_Decr(_tmPf5);
	Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
	JB_Tree_SyntaxAppend(IfTest, (_tmPf10));
	JB_Decr(_tmPf10);
	(JB_Ring_FirstSet(arg, IfTest));
	Message* _tmPf11 = JB_Incr(((Message*)JB_Ring_NextSib(IfTest)));
	Message* _tmPf12 = JB_Incr(((Message*)JB_Ring_Last(IfTest)));
	JB_Decr(IfTest);
	JB_Msg_Move(_tmPf11, start, _tmPf12);
	JB_Decr(_tmPf12);
	JB_Decr(_tmPf11);
	SC_SC_MakeComment(start);
	JB_Decr(start);
	JB_MsgPos_SyntaxUsingComplete((&_using203));
	JB_MsgPos_Destructor((&_using203));
}

void SC_Func__Tran_ForSub(SCFunction* fn, Message* node, SCBase* name_space) {
	Message* list = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxNil));
	if ((!list)) {
		JB_Decr(list);
		return;
	}
	int Bad = 0;
	Message* index = JB_Incr(((Message*)JB_Ring_NextSib(list)));
	Message* arg = nil;
	if (JB_Msg_EqualsSyx(index, JB_SyxArg, false)) {
		JB_SetRef(arg, index);
		JB_SetRef(index, nil);
	}
	 else {
		if (index) {
			JB_SetRef(arg, ((Message*)JB_Ring_NextSib(index)));
		}
		if (arg) {
			Bad = (Bad + (!JB_Msg_Expect(arg, JB_SyxArg, nil)));
		}
		 else {
			JB_SetRef(arg, JB_Msg_Msg(node, JB_SyxArg, JB_LUB[0]));
		}
	}
	Message* value = nil;
	JB_String* IterName = JB_Incr(JB_LUB[0]);
	JB_SetRef(list, JB_Msg_UnBra(list));
	if (JB_Msg_EqualsSyx(list, JB_SyxRel, false)) {
		JB_SetRef(value, ((Message*)JB_Ring_First(list)));
		Message* opp = JB_Incr(JB_Msg_NextOf(value, JB_SyxOpp, JB_LUB[1641]));
		if (opp) {
			JB_SetRef(list, ((Message*)JB_Ring_NextSib(opp)));
			Bad = (Bad + (!list));
			if (JB_Msg_EqualsSyx(value, JB_SyxDot, false)) {
				JB_SetRef(IterName, value->Name);
				JB_SetRef(value, JB_Msg_NeedSyx(value, JB_SyxThg));
				Bad = (Bad + (!value));
			}
		}
		 else {
			Bad++;
		}
		JB_Decr(opp);
	}
	SCIterator* iter = nil;
	SCDecl* dcl = nil;
	if ((!Bad)) {
		JB_SetRef(dcl, SC_TypeOfExprModulesNotOK(list, name_space, nil));
	}
	if (dcl) {
		JB_SetRef(iter, SC_Decl_GetIteratorAny(dcl, IterName, node));
		if (iter) {
			SC_Iter_Renuqify(iter, name_space);
			Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_Parent(iter->Yield)));
			Bad = (Bad + (!JB_Msg_Expect(_tmPf6, JB_SyxArg, nil)));
			JB_Decr(_tmPf6);
			if (index == arg) {
				JB_SetRef(index, nil);
			}
			 else if ((bool)index) {
				Bad = (Bad + (!JB_FreeIfDead(JB_Msg_NeedSyx(index, JB_SyxThg))));
			}
		}
	}
	JB_Decr(IterName);
	if ((!(((bool)dcl) and ((!Bad) and ((bool)iter))))) {
		JB_Decr(list);
		JB_Decr(index);
		JB_Decr(arg);
		JB_Decr(value);
		JB_Decr(iter);
		JB_Decr(dcl);
		return;
	}
	if (index) {
		JB_Tree_Remove(index);
		JB_SetRef(index, ((Message*)JB_Ring_First(index)));
	}
	Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_First(node)));
	JB_Tree_Remove(_tmPf7);
	JB_Decr(_tmPf7);
	bool CanKeepSource = SC_Func__CanKeepAsSource(list, arg, dcl);
	bool CanKeepValue = SC_Func__CanKeepAsValue(iter, arg, dcl, value);
	Message* ListName = JB_Incr(list);
	if ((!CanKeepSource)) {
		JB_String* _tmPf8 = JB_Incr(SC_UniqueTmpVar(name_space, JB_LUB[1642]));
		JB_SetRef(ListName, (JB_Syx_Msg(JB_SyxThg, _tmPf8)));
		JB_Decr(_tmPf8);
		JB_FreeIfDead(SC_MakeDeclOrRel(node, ListName, list));
	}
	 else if ((bool)dcl->C_Array) {
		JB_SetRef(ListName, (JB_Syx_Msg(JB_SyxQues, JB_LUB[512])));
	}
	SC_Iter_RenameSelf(iter, ListName);
	JB_Decr(ListName);
	if (CanKeepValue) {
		SC_Iter_RenameValue(iter, value->Name);
	}
	 else {
		JB_String* _tmPf9 = JB_Incr(SC_UniqueTmpVar(name_space, JB_LUB[661]));
		SC_Iter_RenameValue(iter, _tmPf9);
		JB_Decr(_tmPf9);
	}
	Message* _tmPf10 = JB_Incr(((Message*)JB_Ring_NextSib(arg)));
	Message* PostCond = JB_Incr(SC_Func__AlterPostCond(_tmPf10, iter->LoopEndCond, node));
	JB_Decr(_tmPf10);
	if (PostCond) {
		JB_SetRef(PostCond, JB_Msg_NeedBra(PostCond));
	}
	Message* node2 = JB_Incr(SC_Iter_MakeWhile(iter, arg, PostCond));
	JB_Decr(PostCond);
	JB_Tree_SyntaxAppend(node, node2);
	Message* iterwhile = JB_Incr(iter->WhileLoop);
	JB_Msg_CopyAllBefore(iterwhile, node2, node);
	JB_Msg_CopyAllAfter(iterwhile, node2, node);
	JB_Decr(iterwhile);
	SC_Func__Tran_ForStart(arg, iter->Index, name_space);
	Message* FirstInLoop = JB_Incr(((Message*)JB_Ring_First(arg)));
	if ((!FirstInLoop)) {
		JB_SetRef(FirstInLoop, (JB_Syx_Msg(JB_SyxSheb, JB_LUB[1643])));
		JB_Tree_SyntaxAppend(arg, FirstInLoop);
	}
	Message* EndLoopMarker = JB_Incr(JB_Msg_NeedMarker(arg, JB_LUB[1611], true));
	JB_Msg_CopyAllAfter(iter->Yield, EndLoopMarker, node);
	if (true) {
		MessagePosition _using201 = JB_Msg_SyntaxUsing(arg);
		JB_Msg_CopyAllBeforeInto(iter->Yield, arg, node);
		JB_MsgPos_SyntaxUsingComplete((&_using201));
		JB_MsgPos_Destructor((&_using201));
	}
	if (dcl->C_Array) {
		{
			Message* c = JB_Incr(node);
			Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(node)));
			while (((bool)c) and (c != _afterf1)) {
				Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(c)));
				if (JB_Msg_EqualsSyx(c, JB_SyxQues, false)) {
					JB_Msg_ReplaceInbuilt(c, name_space, dcl, list);
				}
				JB_SetRef(c, _N_f2);
				JB_Decr(_N_f2);
			};
			JB_Decr(_afterf1);
			JB_Decr(c);
			(node);
		};
	}
	JB_Decr(list);
	Message* LastMsg = nil;
	{
		Message* msg = JB_Incr(arg);
		Message* _afterf4 = JB_Incr(((Message*)JB_Ring_FlatAfter(arg)));
		while (((bool)msg) and (msg != _afterf4)) {
			Message* _N_f5 = JB_Incr(((Message*)JB_Ring_FlatNext0(msg)));
			if (JB_Msg_EqualsSyx(msg, JB_SyxTmp, false)) {
				if ((JB_Msg_SyntaxEquals(msg, JB_LUB[1594], false)) or (JB_Msg_SyntaxEquals(msg, JB_LUB[597], false))) {
					JB_SetRef(msg, ((Message*)JB_Ring_FlatAfter(msg)));
					JB_Decr(_N_f5);
					continue;
				}
				if (JB_Msg_SyntaxEquals(msg, JB_LUB[1563], false)) {
					JB_Msg_CopyAllAfterBefore(iter->Yield, msg, node);
				}
				 else if (JB_Msg_SyntaxEquals(msg, JB_LUB[1606], false)) {
					JB_SetRef(msg->Name, JB_LUB[1563]);
					Message* _tmPf12 = JB_Incr(JB_Msg_NiceCopy(iter->Index, node2));
					Message* _tmPf13 = JB_Incr(((Message*)JB_Ring_Last(msg)));
					Message* _tmPf11 = JB_Incr(SC_NewRel(_tmPf12, JB_LUB[541], _tmPf13));
					JB_Decr(_tmPf13);
					JB_Decr(_tmPf12);
					(JB_Ring_PrevSibSet(msg, _tmPf11));
					JB_Decr(_tmPf11);
					JB_SetRef(msg, ((Message*)JB_Ring_FlatAfter(msg)));
					JB_Decr(_N_f5);
					continue;
				}
			}
			 else if (JB_Msg_EqualsSyx(msg, JB_SyxThg, false)) {
				if (CanKeepValue and ((!(((bool)(value->Flags & kSC_Replaced)))) and (JB_Msg_SyntaxEquals(msg, value->Name, false)))) {
					JB_SetRef(LastMsg, msg);
					JB_FreeIfDead(JB_Msg_ReplaceWith(msg, value));
					value->Flags = (value->Flags | kSC_Replaced);
				}
			}
			 else if (JB_Msg_EqualsSyx(msg, JB_SyxType, false)) {
				Message* ty = JB_Incr(((Message*)JB_Ring_Last(msg)));
				if (JB_Msg_SyntaxEquals(ty, JB_LUB[526], false)) {
					if (dcl->Contains) {
						Message* _tmPf14 = JB_Incr(SC_Decl_WriteType(dcl->Contains, false));
						JB_FreeIfDead(JB_Msg_ReplaceWith(ty, _tmPf14));
						JB_Decr(_tmPf14);
					}
					 else {
						Message* _tmPf15 = JB_Incr(((Message*)JB_Ring_First(msg)));
						JB_FreeIfDead(JB_Msg_ReplaceWith(msg, _tmPf15));
						JB_Decr(_tmPf15);
					}
				}
				JB_Decr(ty);
			}
			JB_SetRef(msg, _N_f5);
			JB_Decr(_N_f5);
		};
		JB_Decr(_afterf4);
		JB_Decr(msg);
		(arg);
	}
	;
	JB_Decr(LastMsg);
	JB_Decr(dcl);
	SCArg* p2 = JB_Incr(JB_Msg_SCArgNested(arg, node, name_space));
	if (index) {
		Message* _tmPf17 = JB_Incr(JB_Msg_NiceCopy(iter->Index, nil));
		Message* _tmPf16 = JB_Incr(SC_MakeDeclOrRel(arg, index, _tmPf17));
		JB_Decr(_tmPf17);
		(JB_Ring_PrevSibSet(FirstInLoop, _tmPf16));
		JB_Decr(_tmPf16);
	}
	JB_Decr(index);
	if (((bool)value) and (!CanKeepValue)) {
		Message* _tmPf19 = JB_Incr(JB_Msg_NiceCopy(iter->Value, nil));
		Message* _tmPf18 = JB_Incr(SC_MakeDeclOrRel(arg, value, _tmPf19));
		JB_Decr(_tmPf19);
		(JB_Ring_PrevSibSet(FirstInLoop, _tmPf18));
		JB_Decr(_tmPf18);
	}
	JB_Decr(FirstInLoop);
	JB_Decr(iter);
	JB_Decr(value);
	JB_Decr(arg);
	JB_FreeIfDead(SC_CollectDecls(node, name_space, name_space, 0));
	SC_Func__Tran_While(fn, node2, p2);
	JB_Decr(p2);
	JB_Decr(node2);
	JB_Tree_Remove(EndLoopMarker);
	JB_Decr(EndLoopMarker);
}

bool SC_Func__Tran_FuncTable(Message* msg) {
	Message* nameMsg = JB_Incr(JB_Msg_NeedSyx(msg, JB_SyxThg));
	if ((!nameMsg)) {
		JB_Decr(nameMsg);
		return nil;
	}
	Message* protoMsg = JB_Incr(((Message*)JB_Ring_NextSib(nameMsg)));
	if ((!((JB_Msg_EqualsSyx(protoMsg, JB_SyxBra, false)) or ((JB_Msg_EqualsSyx(protoMsg, JB_SyxPrm, false)) or (JB_Msg_EqualsSyx(protoMsg, JB_SyxList, false)))))) {
		JB_Msg_SyntaxExpect(protoMsg, nil);
		JB_Decr(nameMsg);
		JB_Decr(protoMsg);
		return nil;
	}
	Message* items = JB_Incr(JB_Msg_NextOf2(protoMsg, JB_SyxArg, nil));
	if ((!items)) {
		JB_Decr(nameMsg);
		JB_Decr(protoMsg);
		JB_Decr(items);
		return nil;
	}
	Message* ProtoFirst = JB_Incr(((Message*)JB_Ring_First(protoMsg)));
	JB_String* name = JB_Incr(nameMsg->Name);
	JB_Decr(nameMsg);
	JB_String* protoName = JB_Incr(ProtoFirst->Name);
	if ((!JB_Msg_EqualsSyx(ProtoFirst, JB_SyxThg, false))) {
		Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxThg, protoName));
		JB_FreeIfDead(JB_Msg_ReplaceWith(protoMsg, (_tmPf5)));
		JB_Decr(_tmPf5);
		JB_SetRef(protoName, JB_Str_OperatorPlus(JB_LUB[1644], name));
		protoMsg->Func = JB_SyxPrm;
		Message* protoMsg2 = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[798])));
		Message* _tmPf6 = JB_Incr(JB_Syx_Msg(JB_SyxThg, protoName));
		JB_Tree_SyntaxAppend(protoMsg2, (_tmPf6));
		JB_Decr(_tmPf6);
		JB_Tree_SyntaxAppend(protoMsg2, protoMsg);
		(JB_Ring_NextSibSet(msg, protoMsg2));
		JB_Decr(protoMsg2);
	}
	JB_Decr(ProtoFirst);
	JB_Decr(protoMsg);
	JB_SetRef(items->Name, JB_LUB[876]);
	items->Func = JB_SyxArr;
	JB_Tree_Clear(msg);
	msg->Func = JB_SyxDecl;
	Message* _tmPf7 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(msg, (_tmPf7));
	JB_Decr(_tmPf7);
	Message* _tmPf8 = JB_Incr(({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
		Message* _tmPf9 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf9));
		JB_Decr(_tmPf9);
		Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[541]));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf10));
		JB_Decr(_tmPf10);
		JB_Tree_SyntaxAppend(__imPf0, items);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	JB_Tree_SyntaxAppend(msg, _tmPf8);
	JB_Decr(_tmPf8);
	{
		Message* _Valuef3 = JB_Incr(((Message*)JB_Tree_First_(items)));
		while (_Valuef3) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(_Valuef3)));
			Message* I = JB_Incr(_Valuef3);
			Message* item_value = JB_Incr(((Message*)JB_Ring_Last(I)));
			Message* item_name = JB_Incr(((Message*)JB_Ring_First(I)));
			Message* table_name = JB_Incr(item_name);
			Message* sigh = JB_Incr(item_name);
			bool ListOK = ((JB_Msg_EqualsSyx(item_name, JB_SyxPrm, false))) and ((JB_Msg_EqualsSyx(I, JB_SyxItem, false)));
			if (ListOK) {
				Message* _tmPf11 = JB_Incr(((Message*)JB_Ring_First(item_name)));
				JB_Msg_BecomeStr(I, JB_SyxTmp, _tmPf11->Name);
				JB_Decr(_tmPf11);
			}
			if (JB_Msg_EqualsSyx(I, JB_SyxTmp, false)) {
				if (JB_Msg_EqualsSyx(table_name, JB_SyxPrm, false)) {
					if ((!(ListOK))) {
						JB_Msg_SyntaxExpect(I, JB_LUB[1645]);
					}
					JB_SetRef(table_name, ((Message*)JB_Ring_First(table_name)));
					JB_Tree_Remove(sigh);
				}
				 else {
					JB_SetRef(table_name, I);
				}
				JB_SetRef(item_name, I);
				if ((!(item_value))) {
					JB_Msg_SyntaxExpect(I, JB_LUB[1646]);
				}
			}
			 else {
				JB_Msg_Expect(I, JB_SyxItem, nil);
				if (item_value == item_name) {
					JB_Msg_Expect(I, ((Syntax)nil), nil);
				}
			}
			Message* ARel = nil;
			JB_String* NewName = JB_Incr(JB_LUB[0]);
			if (JB_Msg_OperatorIsBRel(item_value, JB_LUB[417])) {
				JB_SetRef(ARel, item_value);
				JB_SetRef(item_value, ((Message*)JB_Ring_First(item_value)));
			}
			while (item_value) {
				if ((JB_Msg_EqualsSyx(item_value, JB_SyxThg, false)) or ((JB_Msg_EqualsSyx(item_value, JB_SyxDot, false)) or (JB_Msg_EqualsSyx(item_value, JB_SyxBra, false)))) {
					if ((!(ARel))) {
						JB_SetRef(ARel, (JB_Syx_Msg(JB_SyxBRel, JB_LUB[417])));
					}
					 else {
						JB_SetRef(ARel, JB_Msg_NiceCopy(ARel, nil));
					}
					Message* _tmPf12 = JB_Incr(JB_Msg_UnBra(item_value));
					JB_SetRef(item_value, JB_Msg_WrapWith(_tmPf12, ARel));
					JB_Decr(_tmPf12);
				}
				 else {
					if ((!JB_Msg_EqualsSyx(item_value, JB_SyxArg, false))) {
						Message* _tmPf13 = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
						JB_SetRef(item_value, JB_Msg_WrapWith(item_value, _tmPf13));
						JB_Decr(_tmPf13);
					}
					if ((!(JB_Str_Exists(NewName)))) {
						JB_String* _tmPf15 = JB_Incr(JB_Msg_CollectFuncTableName(item_name));
						JB_String* _tmPf14 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[568], _tmPf15));
						JB_Decr(_tmPf15);
						JB_SetRef(NewName, JB_Str_OperatorPlus(name, _tmPf14));
						JB_Decr(_tmPf14);
						Message* _tmPf16 = JB_Incr(JB_Msg_CollectionPlace(msg));
						Message* _tmPf18 = JB_Incr(JB_Syx_Msg(JB_SyxThg, protoName));
						Message* _tmPf17 = JB_Incr(SC_Func__ArgToFunc(NewName, (_tmPf18), item_value));
						JB_Decr(_tmPf18);
						JB_Tree_SyntaxAppend(_tmPf16, _tmPf17);
						JB_Decr(_tmPf17);
						JB_Decr(_tmPf16);
					}
					Message* _tmPf19 = JB_Incr(({
						Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[417])));
						Message* _tmPf20 = JB_Incr(JB_Syx_Msg(JB_SyxThg, NewName));
						JB_Tree_SyntaxAppend(__imPf4, (_tmPf20));
						JB_Decr(_tmPf20);
						JB_SafeDecr(__imPf4);
						 __imPf4;
					}));
					JB_Tree_SyntaxAppend(I, _tmPf19);
					JB_Decr(_tmPf19);
				}
				JB_String* iname = JB_Incr(I->Name);
				if (JB_Msg_EqualsSyx(I, JB_SyxTmp, false)) {
					Message* _tmPf21 = JB_Incr(JB_Syx_Msg(JB_SyxStr, table_name->Name));
					(JB_Ring_FirstSet(I, (_tmPf21)));
					JB_Decr(_tmPf21);
					JB_Msg_BecomeStr(I, JB_SyxItem, JB_LUB[0]);
				}
				JB_SetRef(table_name, ((Message*)JB_Ring_NextSib(table_name)));
				if (((!JB_Msg_EqualsSyx(sigh, JB_SyxPrm, false))) or (!table_name)) {
					JB_Decr(iname);
					break;
				}
				Message* newi = JB_Incr((JB_Syx_Msg(JB_SyxTmp, iname)));
				JB_Decr(iname);
				(JB_Ring_PrevSibSet(I, newi));
				JB_SetRef(I, newi);
				JB_Decr(newi);
			};
			JB_Decr(NewName);
			JB_Decr(ARel);
			JB_Decr(table_name);
			JB_Decr(item_name);
			JB_Decr(item_value);
			JB_Decr(I);
			(sigh);
			JB_Decr(sigh);
			JB_SetRef(_Valuef3, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(_Valuef3);
		(items);
	}
	;
	JB_Decr(protoName);
	JB_Decr(name);
	JB_Decr(items);
	return false;
}

void SC_Func__Tran_If(SCFunction* fn, Message* node, SCBase* name_space) {
	SC_Func__Tran_IfSub(0, node, name_space);
}

void SC_Func__Tran_Ifn(SCFunction* fn, Message* node, SCBase* name_space) {
	if (true) {
		MessagePosition _using136 = JB_Msg_SyntaxUsing(node);
		JB_SetRef(node->Name, JB_LUB[689]);
		Message* _tmPf1 = JB_Incr(({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[679])));
			Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(node)));
			Message* _tmPf2 = JB_Incr(JB_Msg_NeedBra(_tmPf3));
			JB_Decr(_tmPf3);
			JB_Tree_SyntaxAppend(__imPf0, _tmPf2);
			JB_Decr(_tmPf2);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
		(JB_Ring_FirstSet(node, _tmPf1));
		JB_Decr(_tmPf1);
		JB_MsgPos_SyntaxUsingComplete((&_using136));
		JB_MsgPos_Destructor((&_using136));
	}
	SC_Func__Tran_If(fn, node, name_space);
}

void SC_Func__Tran_IfSub(int mode, Message* node, SCBase* name_space) {
	Message* cond = JB_Msg_NeedSyx(node, ((Syntax)nil));
	if ((!cond)) {
		return;
	}
	Message* arg = ((Message*)JB_Ring_NextSib(cond));
	node->Flags = (node->Flags | kSC__ASMtmp_iIf);
	if ((!arg)) {
		arg = JB_Syx_Msg(JB_SyxArg, JB_LUB[0]);
		if (JB_Msg_SyntaxEquals(node, JB_LUB[689], false)) {
			JB_Msg_AppendSyx(arg, JB_SyxTmp, JB_LUB[688]);
		}
		(JB_Ring_NextSibSet(cond, arg));
	}
	if ((!JB_Msg_Expect(arg, JB_SyxArg, nil))) {
		return;
	}
	Message* Next = ((Message*)JB_Ring_NextSib(arg));
	if (Next) {
		if ((!(JB_Msg_OperatorIsTmp(Next, JB_LUB[1075]) or JB_Msg_OperatorIsTmp(Next, JB_LUB[1076])))) {
			JB_Msg_SyntaxExpect(node, nil);
			return;
		}
		if ((!((!JB_Msg_EqualsSyx(((Message*)JB_Ring_Parent(Next)), JB_SyxArg, false))))) {
			JB_Msg_SyntaxExpect(node, JB_LUB[1647]);
			return;
		}
		if (JB_Msg_SyntaxEquals(Next, JB_LUB[1076], false)) {
			Message* N2 = ((Message*)JB_Ring_First(Next));
			if ((!JB_Msg_ExpectLast(Next, JB_LUB[0]))) {
				return;
			}
			if ((!((!JB_Msg_SyntaxEquals(N2, JB_LUB[689], true))))) {
				JB_Msg_SyntaxExpect(node, JB_LUB[1648]);
				return;
			}
			if ((!(JB_Msg_WantAsArg(N2, Next, JB_LUB[1649])))) {
				return;
			}
		}
		while (JB_Msg_OperatorIsTmp(Next, JB_LUB[1075])) {
			SC_Func__Tran_IfSub(0, Next, name_space);
			Next = ((Message*)JB_Ring_NextSib(Next));
		};
	}
	//using;
	MessagePosition _using138 = JB_Msg_SyntaxUsing(node);
	name_space = JB_Msg_SCArg(arg, name_space, nil);
	cond = SC_ExpandToBool(cond, name_space);
	if ((!cond)) {
		JB_MsgPos_Destructor((&_using138));
		return;
	}
	SCDecl* d = SC_TypeOfExpr(cond, name_space, nil);
	if ((!d)) {
		JB_MsgPos_Destructor((&_using138));
		return;
	}
	if (SC_Decl_IsConstOf(d, JB_FalseBool)) {
		JB_Msg_RemoveElseIf(cond);
		JB_MsgPos_Destructor((&_using138));
		return;
	}
	JB_FreeIfDead(JB_Msg_NeedBra(cond));
	if (JB_Msg_EqualsSyx(((Message*)JB_Ring_First(cond)), JB_SyxArg, false)) {
		JB_SetRef(JB_Msg_WrapWith(cond, JB_Syx_Msg(JB_SyxBra, JB_LUB[0]))->Obj, cond->Obj);
	}
	SC_Func__Tran_Isa(node, name_space);
	JB_MsgPos_SyntaxUsingComplete((&_using138));
	JB_MsgPos_Destructor((&_using138));
}

void SC_Func__Tran_Isa(Message* S, SCBase* p) {
	Array* Isas = JB_Incr(JB_Array__New0());
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(S)));
	if ((!SC_Func__CollectIsaTests(_tmPf2, Isas))) {
		JB_Decr(Isas);
		JB_Decr(_tmPf2);
		return;
	}
	JB_Decr(_tmPf2);
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(Isas)) {
			Message* isa_ = JB_Incr(((Message*)JB_Array_Value(Isas, _if0)));
			Message* _tmPf3 = JB_Incr(JB_Msg_FindSyx(S, JB_SyxArg));
			SC_Func__TranOneIsa(isa_, _tmPf3, p);
			JB_Decr(_tmPf3);
			JB_Decr(isa_);
			_if0++;
		};
	}
	;
	JB_Decr(Isas);
}

void SC_Func__Tran_Log(SCFunction* fn, Message* node, SCBase* name_space) {
	if (true) {
		MessagePosition _using133 = JB_Msg_SyntaxUsing(node);
		Message* f = JB_Incr(((Message*)JB_Ring_First(node)));
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1650]));
		JB_Tree_SyntaxAppend(node, (_tmPf1));
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf0, f);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
		JB_Decr(f);
		JB_Tree_SyntaxAppend(node, _tmPf2);
		JB_Decr(_tmPf2);
		node->Func = JB_SyxDot;
		JB_MsgPos_SyntaxUsingComplete((&_using133));
		JB_MsgPos_Destructor((&_using133));
	}
	JB_FreeIfDead(SC_TypeOfExpr(node, name_space, nil));
}

void SC_Func__Tran_Once(SCFunction* fn, Message* node, SCBase* name_space) {
	Message* arg = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxArg));
	if ((!arg)) {
		JB_Decr(arg);
		return;
	}
	if ((!JB_Msg_ExpectLast(arg, JB_LUB[0]))) {
		JB_Decr(arg);
		return;
	}
	if (true) {
		MessagePosition _using137 = JB_Msg_SyntaxUsing(node);
		JB_SetRef(node->Name, JB_LUB[689]);
		JB_String* _tmPf3 = JB_Incr(JB_int_RenderFS(((++SC__Func_OnceCount)), nil));
		JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1596], _tmPf3));
		JB_Decr(_tmPf3);
		Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[108]));
		JB_String* obj = JB_Incr(SC_Base_LateAddTempory(SC__Comp_program, JB_LUB[125], _tmPf2, (_tmPf4), node));
		JB_Decr(_tmPf4);
		JB_Decr(_tmPf2);
		Message* _tmPf5 = JB_Incr(({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
			Message* _tmPf6 = JB_Incr(JB_Syx_Msg(JB_SyxThg, obj));
			JB_Tree_SyntaxAppend(__imPf0, (_tmPf6));
			JB_Decr(_tmPf6);
			Message* _tmPf7 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[541]));
			JB_Tree_SyntaxAppend(__imPf0, (_tmPf7));
			JB_Decr(_tmPf7);
			Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[107]));
			JB_Tree_SyntaxAppend(__imPf0, (_tmPf8));
			JB_Decr(_tmPf8);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
		(JB_Ring_FirstSet(arg, _tmPf5));
		JB_Decr(_tmPf5);
		Message* _tmPf9 = JB_Incr(({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[679])));
			Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxThg, obj));
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf10));
			JB_Decr(_tmPf10);
			JB_SafeDecr(__imPf1);
			 __imPf1;
		}));
		JB_Decr(obj);
		(JB_Ring_FirstSet(node, _tmPf9));
		JB_Decr(_tmPf9);
		JB_MsgPos_SyntaxUsingComplete((&_using137));
		JB_MsgPos_Destructor((&_using137));
	}
	JB_Decr(arg);
	SC_Func__Tran_If(fn, node, name_space);
}

void SC_Func__Tran_Print(SCFunction* fn, Message* node, SCBase* name_space) {
	if (true) {
		MessagePosition _using198 = JB_Msg_SyntaxUsing(node);
		Message* prm = JB_Incr(JB_Syx_Msg(JB_SyxPrm, JB_LUB[0]));
		JB_Tree_TakeAllFrom(prm, node);
		JB_Tree_SyntaxAppend(node, prm);
		JB_Decr(prm);
		Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxThg, node->Name));
		(JB_Ring_FirstSet(node, (_tmPf0)));
		JB_Decr(_tmPf0);
		JB_Msg_BecomeStr(node, JB_SyxFunc, JB_LUB[0]);
		JB_MsgPos_SyntaxUsingComplete((&_using198));
		JB_MsgPos_Destructor((&_using198));
	}
	JB_FreeIfDead(SC_TypeOfExpr(node, name_space, nil));
}

void SC_Func__Tran_Quit(SCFunction* fn, Message* node, SCBase* name_space) {
	JB_Msg_MiniTran(node, name_space, JB_LUB[70]);
}

void SC_Func__Tran_Rejoin(SCFunction* fn, Message* node, SCBase* name_space) {
	Message* p = JB_Incr(((Message*)JB_Ring_First(node)));
	if (JB_Msg_EqualsSyx(p, JB_SyxArg, false)) {
		SCArg* arg = JB_Incr(JB_Msg_AsArg(p));
		if ((!(arg->IsStatementExpr))) {
			JB_Msg_SyntaxExpect(node, JB_LUB[1651]);
			JB_Decr(p);
			JB_Decr(arg);
			return;
		}
		JB_Decr(arg);
		if (JB_FreeIfDead(((Message*)JB_Ring_NextSib(p)))) {
			JB_Msg_SyntaxExpect(node, JB_LUB[1652]);
			JB_Decr(p);
			return;
		}
	}
	JB_Decr(p);
}

bool SC_Func__Tran_Render(Message* msg, SCClass* Cls) {
	MessagePosition using2 = JB_Msg_SyntaxUsing(msg);
	bool _tmPf0 = SC_Func__Tran_RenderSub(msg, Cls);
	JB_MsgPos_Destructor((&using2));
	return _tmPf0;
}

bool SC_Func__Tran_RenderSub(Message* msg, SCClass* Cls) {
	JB_SetRef(msg->Name, JB_LUB[783]);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(msg)));
	bool IsPureRender = (!JB_Msg_EqualsSyx(_tmPf0, JB_SyxThg, false));
	JB_Decr(_tmPf0);
	if (IsPureRender) {
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1653]));
		(JB_Ring_FirstSet(msg, _tmPf1));
		JB_Decr(_tmPf1);
		if (Cls) {
			JB_SetRef(msg->Name, JB_LUB[393]);
		}
	}
	Message* arg = JB_Incr(JB_Msg_NormaliseFunc(msg));
	Message* name = JB_Incr(((Message*)JB_Ring_First(msg)));
	Message* params = JB_Incr(((Message*)JB_Ring_NextSib(name)));
	JB_Decr(name);
	if (JB_Str_Equals(msg->Name, JB_LUB[393], false)) {
		JB_Msg_AppendSyx(params, JB_SyxThg, JB_LUB[799]);
	}
	 else {
		JB_Msg_CopyAllInto(SC__SCStrings_RenderNewParams, params, false);
	}
	JB_Decr(params);
	if (JB_FreeIfDead(JB_Msg_FindNested(msg, JB_SyxThg, JB_LUB[1623], false))) {
		if (true) {
			MessagePosition _using205 = JB_Msg_SyntaxUsing(arg);
			JB_Msg_CopyAllBeforeInto(SC__SCStrings_RenderFinish, arg, nil);
			JB_MsgPos_SyntaxUsingComplete((&_using205));
			JB_MsgPos_Destructor((&_using205));
		}
		if (true) {
			Message* _tmPf2 = JB_Incr(((Message*)JB_Tree_FlatLast(arg)));
			MessagePosition _using206 = JB_Msg_SyntaxUsing(_tmPf2);
			JB_Decr(_tmPf2);
			JB_Msg_CopyAllAfterInto(SC__SCStrings_RenderFinish, arg, nil);
			JB_MsgPos_SyntaxUsingComplete((&_using206));
			JB_MsgPos_Destructor((&_using206));
		}
	}
	JB_Decr(arg);
	if (JB_Str_Equals(msg->Name, JB_LUB[393], false)) {
		Message* _tmPf3 = JB_Incr(((Message*)JB_Tree_Get(msg, 1)));
		JB_Tree_Remove(_tmPf3);
		JB_Decr(_tmPf3);
		return true;
	}
	return false;
}

Message* SC_Func__Tran_Result(SCFunction* f) {
	SCDecl* Type = f->ReturnType;
	Message* Src = SC_Base_SourceArg(f);
	if ((!(((bool)Type) and (((bool)Src) and (!(JB_Msg_OperatorIsTmp(((Message*)JB_Ring_Last(Src)), JB_LUB[602]))))))) {
		return nil;
	}
	Message* errs = ((Message*)JB_Ring_Last(Src));
	if ((!errs)) {
		errs = Src;
	}
	//using;
	MessagePosition _using199 = JB_Msg_SyntaxUsing(errs);
	JB__Tk_UsingPos = -1;
	Message* ret = SC_Decl_WriteDeclFull(Type, JB_LUB[1654], false);
	(JB_Ring_FirstSet(Src, ret));
	JB_MsgPos_SyntaxUsingComplete((&_using199));
	JB_MsgPos_Destructor((&_using199));
	return ret;
}

void SC_Func__Tran_ResultFinish(SCFunction* f, Message* r_z, SCBase* space) {
	Message* Src = JB_Incr(SC_Base_SourceArg(f));
	SCDecl* d = JB_Incr(JB_Msg_MsgDecl(r_z));
	bool Used = (((bool)d) and SC_Decl_SyntaxIs(d, kSC__SCDeclInfo_usedbycode));
	if ((!(Used))) {
		JB_Tree_Remove(r_z);
	}
	 else if ((!(SC_Decl_SyntaxIs(d, kSC__SCDeclInfo_setto)))) {
		JB_Msg_NotNilRZ(r_z, f->ReturnType, space);
	}
	JB_Decr(d);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(Src)));
	if (JB_Msg_OperatorIsTmp(_tmPf0, JB_LUB[602])) {
		JB_Decr(Src);
		JB_Decr(_tmPf0);
		return;
	}
	JB_Decr(_tmPf0);
	Message* ret = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[602])));
	JB_Tree_SyntaxAppend(Src, ret);
	if (Used) {
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1654]));
		JB_Tree_SyntaxAppend(ret, (_tmPf1));
		JB_Decr(_tmPf1);
	}
	 else {
		Message* _tmPf2 = JB_Incr(SC_Decl_CreateDefault(f->ReturnType, Src, true));
		JB_Tree_SyntaxAppend(ret, _tmPf2);
		JB_Decr(_tmPf2);
	}
	JB_Decr(ret);
	JB_Decr(Src);
}

void SC_Func__Tran_Return(SCFunction* fn, Message* node, SCBase* name_space) {
	if (SC_Func_IsConstructorOrDestructor(fn)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1655]);
		return;
	}
	node->Flags = (node->Flags | kSC__ASMtmp_iReturn);
	SC_Func_CheckReturnValue(fn, node);
	JB_Tree_RemoveAfter(node);
}

void SC_Func__Tran_Sdt(Message* exp) {
	//using;
	MessagePosition _using202 = JB_Msg_SyntaxUsing(exp);
	Message* f = JB_Incr((JB_Syx_Msg(JB_SyxThg, JB_LUB[331])));
	f->Extra = 1;
	(JB_Ring_FirstSet(exp, f));
	JB_Decr(f);
	exp->Func = JB_SyxDot;
	JB_MsgPos_SyntaxUsingComplete((&_using202));
	JB_MsgPos_Destructor((&_using202));
}

void SC_Func__Tran_Strings(Message* start, SCFunction* fn) {
	if ((!(start))) {
		return;
	}
	if (JB_Msg_EqualsSyx(start, JB_SyxStr, false)) {
		SC_Func__String_Expand(start, fn);
		return;
	}
	{
		Message* msg = JB_Incr(start);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(start)));
		while (((bool)msg) and (msg != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(msg)));
			Syntax f = msg->Func;
			if (f == JB_SyxThg) {
				if (((JB_Msg_SyntaxEquals(msg, JB_LUB[675], true))) or ((JB_Msg_SyntaxEquals(msg, JB_LUB[1656], true)))) {
					SC_Create_JeeboxTest(msg);
					SC_Func__String_Expand(msg, fn);
				}
			}
			 else if (f == JB_SyxStr) {
				SC_Func__String_Expand(msg, fn);
			}
			 else if ((f == JB_SyxChar) and (JB_Msg_Length(msg) > 1)) {
				SC_Func__Tran_Chr(msg, fn);
			}
			JB_SetRef(msg, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(_afterf1);
		JB_Decr(msg);
		(start);
	};
}

void SC_Func__Tran_Swap(SCFunction* fn, Message* node, SCBase* name_space) {
	if ((!(JB_Tree_SyntaxEquals(node, 2, false)))) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1657]);
		return;
	}
	JB_SetRef(node->Name, JB_LUB[1086]);
	SC_Func__Tran_Print(fn, node, name_space);
	node->Flags = (node->Flags | kSC__ASMtmp_iSwap);
}

Message* SC_Func__Tran_Syx(Message* msg) {
	JB_SetRef(msg->Name, JB_LUB[789]);
	Message* name = JB_Incr(JB_Msg_NeedSyx(msg, JB_SyxThg));
	if ((!name)) {
		JB_Decr(name);
		return nil;
	}
	Message* arg = JB_Incr(JB_Msg_NeedSyxInt(msg, JB_SyxArg, -1));
	if ((!arg)) {
		JB_Decr(name);
		JB_Decr(arg);
		return nil;
	}
	JB_Decr(arg);
	Message* _tmPf4 = JB_Incr(JB_Msg_FindSyx(msg, JB_SyxBra));
	Message* Params = JB_Incr(JB_Msg_FindSyx(_tmPf4, JB_SyxThg));
	JB_Decr(_tmPf4);
	//using;
	MessagePosition _using204 = JB_Msg_SyntaxUsing(msg);
	if ((!(Params))) {
		JB_SetRef(Params, (JB_Syx_Msg(JB_SyxThg, JB_LUB[0])));
		Message* _tmPf5 = JB_Incr(({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf0, Params);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
		(JB_Ring_NextSibSet(name, _tmPf5));
		JB_Decr(_tmPf5);
	}
	JB_String* name2 = JB_Incr(Params->Name);
	JB_String* OldName = JB_Incr(name->Name);
	JB_String* SyxName = JB_Incr(JB_Str_OperatorPlus(JB_LUB[862], OldName));
	JB_SetRef(name->Name, JB_Str_OperatorPlus(OldName, JB_LUB[376]));
	JB_SetRef(Params->Name, JB_LUB[1658]);
	JB_Decr(Params);
	if ((!(JB_Str_Length(OldName) <= 4))) {
		JB_Msg_SyntaxExpect(msg, JB_LUB[1659]);
		JB_Decr(name);
		JB_MsgPos_Destructor((&_using204));
		JB_Decr(name2);
		JB_Decr(OldName);
		JB_Decr(SyxName);
		return nil;
	}
	Message* DotNew = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1660])));
	Message* _tmPf6 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[138]));
	JB_Tree_SyntaxAppend(DotNew, (_tmPf6));
	JB_Decr(_tmPf6);
	Message* _tmPf7 = JB_Incr(({
		Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		Message* _tmPf8 = JB_Incr(({
			Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxDot, name->Name)));
			Message* _tmPf9 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1661]));
			JB_Tree_SyntaxAppend(__imPf2, (_tmPf9));
			JB_Decr(_tmPf9);
			Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
			JB_Tree_SyntaxAppend(__imPf2, (_tmPf10));
			JB_Decr(_tmPf10);
			JB_SafeDecr(__imPf2);
			 __imPf2;
		}));
		JB_Tree_SyntaxAppend(__imPf1, _tmPf8);
		JB_Decr(_tmPf8);
		JB_String* _tmPf12 = JB_Incr(JB_Str_LowerCase(OldName));
		Message* _tmPf11 = JB_Incr(JB_Syx_Msg(JB_SyxStr, _tmPf12));
		JB_Decr(_tmPf12);
		JB_Tree_SyntaxAppend(__imPf1, (_tmPf11));
		JB_Decr(_tmPf11);
		Message* _tmPf13 = JB_Incr(JB_Syx_Msg(JB_SyxStr, name2));
		JB_Tree_SyntaxAppend(__imPf1, (_tmPf13));
		JB_Decr(_tmPf13);
		JB_SafeDecr(__imPf1);
		 __imPf1;
	}));
	JB_Decr(name2);
	JB_Decr(name);
	JB_Tree_SyntaxAppend(DotNew, _tmPf7);
	JB_Decr(_tmPf7);
	Message* _tmPf14 = JB_Incr(JB_Msg_Ancestor(msg, JB_SyxArg));
	Message* ArgPlace = JB_Incr(JB_Msg_Ancestor(_tmPf14, JB_SyxArg));
	JB_Decr(_tmPf14);
	Message* dcl = JB_Incr(SC_MakeDecl(JB_LUB[138], SyxName, DotNew));
	JB_Decr(DotNew);
	JB_Decr(SyxName);
	JB_Tree_SyntaxAppend(ArgPlace, dcl);
	JB_Decr(ArgPlace);
	Message* fn_msg = JB_Incr((JB_Syx_Msg(JB_SyxFunc, JB_LUB[0])));
	Message* _tmPf15 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[138]));
	JB_Tree_SyntaxAppend(fn_msg, (_tmPf15));
	JB_Decr(_tmPf15);
	Message* _tmPf16 = JB_Incr(({
		Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		Message* _tmPf17 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[567]));
		JB_Tree_SyntaxAppend(__imPf3, (_tmPf17));
		JB_Decr(_tmPf17);
		JB_SafeDecr(__imPf3);
		 __imPf3;
	}));
	JB_Tree_SyntaxAppend(fn_msg, _tmPf16);
	JB_Decr(_tmPf16);
	Message* _tmPf18 = JB_Incr(((Message*)JB_Ring_First(dcl)));
	JB_FreeIfDead(JB_Msg_ReplaceWith(_tmPf18, fn_msg));
	JB_Decr(_tmPf18);
	JB_Decr(fn_msg);
	JB_Array_SyntaxAppend(SC__Comp_SyxArray, OldName);
	JB_Decr(OldName);
	SC_Comp__Collect(dcl, true);
	JB_Decr(dcl);
	JB_MsgPos_SyntaxUsingComplete((&_using204));
	JB_MsgPos_Destructor((&_using204));
	return msg;
}

void SC_Func__Tran_Temporal(SCFunction* FN, Message* s, SCBase* name_space) {
	DTWrap* _tmPf0 = JB_Incr(((DTWrap*)JB_Dict_ValueStr(SC__Func_TemporalStatements, s->Name)));
	TranFunc TmpInt = ((TranFunc)JB_Wrap_Value(_tmPf0));
	JB_Decr(_tmPf0);
	if ((!TmpInt)) {
		JB_Msg_SyntaxExpect(s, JB_LUB[1662]);
		return;
	}
	(TmpInt)(FN, s, name_space);
}

void SC_Func__Tran_Using(SCFunction* fn, Message* node, SCBase* name_space) {
	Message* With = JB_Incr(JB_Msg_NeedSyx(node, ((Syntax)nil)));
	if ((!With)) {
		JB_Decr(With);
		return;
	}
	Message* Arg = JB_Incr(((Message*)JB_Ring_NextSib(With)));
	Message* Start = JB_Incr(node);
	if (Arg) {
		if ((!(JB_Msg_Expect(Arg, JB_SyxArg, nil) and JB_Msg_ExpectLast(Arg, JB_LUB[0])))) {
			JB_Decr(With);
			JB_Decr(Arg);
			JB_Decr(Start);
			return;
		}
		JB_SetRef(Start, nil);
	}
	 else {
		JB_SetRef(Arg, ((Message*)JB_Ring_Parent(node)));
	}
	//using;
	MessagePosition _using195 = JB_Msg_SyntaxUsing(node);
	JB_String* name = JB_Incr(SC_UniqueTmpVar(nil, JB_LUB[1579]));
	Message* WithFirst = JB_Incr(((Message*)JB_Ring_First(With)));
	if ((!JB_Msg_EqualsSyx(With, JB_SyxBra, false))) {
		JB_SetRef(WithFirst, With);
		Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
		(JB_Ring_FirstSet(node, (_tmPf0)));
		JB_Decr(_tmPf0);
	}
	JB_Decr(With);
	Message* UsingObj = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1663])));
	JB_Tree_SyntaxAppend(UsingObj, WithFirst);
	JB_Decr(WithFirst);
	Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(UsingObj, (_tmPf1));
	JB_Decr(_tmPf1);
	Message* item = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1664])));
	Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name));
	JB_Tree_SyntaxAppend(item, (_tmPf2));
	JB_Decr(_tmPf2);
	Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(item, (_tmPf3));
	JB_Decr(_tmPf3);
	Message* Decl = JB_Incr(SC_MakeDecl(JB_LUB[0], name, UsingObj));
	JB_Decr(UsingObj);
	JB_Decr(name);
	JB_Tree_AppendAfter(Arg, Decl, Start);
	JB_Decr(Decl);
	JB_Decr(Start);
	Message* _tmPf4 = JB_Incr(JB_Msg_UnReachable(Arg));
	JB_Tree_AppendBefore(Arg, item, _tmPf4);
	JB_Decr(_tmPf4);
	JB_Decr(item);
	if (JB_FreeIfDead(((Message*)JB_Ring_Parent(Arg))) == node) {
		JB_SetRef(node->Name, JB_LUB[689]);
		Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_First(node)));
		Message* _tmPf6 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[107]));
		JB_Tree_SyntaxAppend(_tmPf5, (_tmPf6));
		JB_Decr(_tmPf6);
		JB_Decr(_tmPf5);
	}
	 else {
		SC_SC_MakeComment(node);
	}
	JB_Decr(Arg);
	JB_MsgPos_SyntaxUsingComplete((&_using195));
	JB_MsgPos_Destructor((&_using195));
}

void SC_Func__Tran_Visible(SCFunction* fn, Message* node, SCBase* name_space) {
	SC_Base_LoadVisibility(fn, node);
}

void SC_Func__Tran_While(SCFunction* fn, Message* node, SCBase* name_space) {
	JB_SetRef(node->Name, JB_LUB[597]);
	node->Flags = (node->Flags | kSC__ASMtmp_iWhile);
	Message* StartCond = JB_Incr(JB_Msg_NeedSyx(node, ((Syntax)nil)));
	if ((!StartCond)) {
		JB_Decr(StartCond);
		return;
	}
	Message* arg = JB_Incr(((Message*)JB_Ring_NextSib(StartCond)));
	//using;
	MessagePosition _using197 = JB_Msg_SyntaxUsing(node);
	if (JB_Msg_EqualsSyx(StartCond, JB_SyxArg, false)) {
		JB_SetRef(StartCond, (JB_Syx_Msg(JB_SyxThg, JB_LUB[107])));
		(JB_Ring_FirstSet(node, StartCond));
		JB_SetRef(arg, ((Message*)JB_Ring_NextSib(StartCond)));
	}
	 else {
		if ((!(arg))) {
			JB_SetRef(arg, JB_Msg_GiveArg(node));
		}
		Message* decl = JB_Incr(((Message*)JB_Ring_First(StartCond)));
		if (JB_Msg_EqualsSyx(decl, JB_SyxDecl, false)) {
			Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[107]));
			JB_Tree_SyntaxAppend(StartCond, (_tmPf8));
			JB_Decr(_tmPf8);
			StartCond->Func = JB_SyxBra;
			(JB_Ring_FirstSet(arg, decl));
			Message* _tmPf9 = JB_Incr(({
				Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[689])));
				Message* _tmPf10 = JB_Incr(({
					Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
					Message* _tmPf11 = JB_Incr(({
						Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[679])));
						Message* _tmPf13 = JB_Incr(JB_Msg_DeclName(decl));
						Message* _tmPf12 = JB_Incr(JB_Msg_NiceCopy(_tmPf13, nil));
						JB_Decr(_tmPf13);
						JB_Tree_SyntaxAppend(__imPf2, _tmPf12);
						JB_Decr(_tmPf12);
						JB_SafeDecr(__imPf2);
						 __imPf2;
					}));
					JB_Tree_SyntaxAppend(__imPf1, _tmPf11);
					JB_Decr(_tmPf11);
					JB_SafeDecr(__imPf1);
					 __imPf1;
				}));
				JB_Tree_SyntaxAppend(__imPf0, _tmPf10);
				JB_Decr(_tmPf10);
				Message* _tmPf14 = JB_Incr(({
					Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
					Message* _tmPf15 = JB_Incr(JB_Syx_Msg(JB_SyxTmp, JB_LUB[1082]));
					JB_Tree_SyntaxAppend(__imPf3, (_tmPf15));
					JB_Decr(_tmPf15);
					JB_SafeDecr(__imPf3);
					 __imPf3;
				}));
				JB_Tree_SyntaxAppend(__imPf0, _tmPf14);
				JB_Decr(_tmPf14);
				JB_SafeDecr(__imPf0);
				 __imPf0;
			}));
			(JB_Ring_NextSibSet(decl, _tmPf9));
			JB_Decr(_tmPf9);
		}
		 else {
			JB_SetRef(StartCond, SC_ExpandToBool(StartCond, name_space));
			if ((!StartCond)) {
				JB_Decr(StartCond);
				JB_Decr(arg);
				JB_MsgPos_Destructor((&_using197));
				JB_Decr(decl);
				return;
			}
		}
		JB_Decr(decl);
	}
	JB_FreeIfDead(JB_Msg_NeedBra(StartCond));
	JB_Decr(StartCond);
	SC_Func__Tran_Isa(node, name_space);
	Message* ExitCond = JB_Incr(((Message*)JB_Ring_NextSib(arg)));
	if ((!ExitCond)) {
		JB_Decr(arg);
		JB_MsgPos_Destructor((&_using197));
		JB_Decr(ExitCond);
		return;
	}
	if ((!(JB_Msg_EqualsSyx(ExitCond, JB_SyxBra, false)))) {
		JB_Msg_SyntaxExpect(ExitCond, nil);
		JB_Decr(arg);
		JB_MsgPos_Destructor((&_using197));
		JB_Decr(ExitCond);
		return;
	}
	JB_Tree_Remove(ExitCond);
	while (JB_Msg_EqualsSyx(ExitCond, JB_SyxBra, false)) {
		JB_SetRef(ExitCond, ((Message*)JB_Ring_First(ExitCond)));
	};
	Message* Finish = JB_Incr(JB_Msg_NeedMarker(arg, JB_LUB[1611], true));
	Message* _tmPf16 = JB_Incr(({
		Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[689])));
		Message* _tmPf17 = JB_Incr(({
			Message* __imPf5 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
			Message* _tmPf18 = JB_Incr(({
				Message* __imPf6 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[679])));
				JB_Tree_SyntaxAppend(__imPf6, ExitCond);
				JB_SafeDecr(__imPf6);
				 __imPf6;
			}));
			JB_Tree_SyntaxAppend(__imPf5, _tmPf18);
			JB_Decr(_tmPf18);
			JB_SafeDecr(__imPf5);
			 __imPf5;
		}));
		JB_Tree_SyntaxAppend(__imPf4, _tmPf17);
		JB_Decr(_tmPf17);
		Message* _tmPf19 = JB_Incr(({
			Message* __imPf7 = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
			Message* _tmPf20 = JB_Incr(JB_Syx_Msg(JB_SyxTmp, JB_LUB[1082]));
			JB_Tree_SyntaxAppend(__imPf7, (_tmPf20));
			JB_Decr(_tmPf20);
			JB_SafeDecr(__imPf7);
			 __imPf7;
		}));
		JB_Tree_SyntaxAppend(__imPf4, _tmPf19);
		JB_Decr(_tmPf19);
		JB_SafeDecr(__imPf4);
		 __imPf4;
	}));
	JB_Decr(ExitCond);
	JB_Tree_SyntaxAppend(arg, _tmPf16);
	JB_Decr(_tmPf16);
	JB_Decr(arg);
	JB_Tree_Remove(Finish);
	JB_Decr(Finish);
	JB_MsgPos_SyntaxUsingComplete((&_using197));
	JB_MsgPos_Destructor((&_using197));
}

void SC_Func__TranFuncDummy(SCFunction* fn, Message* node, SCBase* name_space) {
}

void SC_Func__TranOneIsa(Message* isa_f, Message* arg, SCBase* space) {
	if ((!(arg))) {
		return;
	}
	Message* List = JB_Incr(((Message*)JB_Ring_Last(isa_f)));
	Message* L = JB_Incr(((Message*)JB_Ring_First(List)));
	JB_Decr(List);
	Message* R = JB_Incr(((Message*)JB_Ring_NextSib(L)));
	SCModule* _tmPf0 = JB_Incr(JB_Msg_AsModule(R));
	SCClass* cls = JB_Incr(_tmPf0->Cls);
	JB_Decr(_tmPf0);
	if (cls->IsRole) {
		JB_Msg_SyntaxExpect(R, JB_LUB[1665]);
		JB_Decr(L);
		JB_Decr(R);
		JB_Decr(cls);
		return;
	}
	JB_Decr(R);
	SCDecl* OldDecl = JB_Incr(SC_Base_LookUpVarDecl(space, L->Name));
	if ((!OldDecl)) {
		JB_Decr(L);
		JB_Decr(cls);
		JB_Decr(OldDecl);
		return;
	}
	SCDecl* NewDecl = JB_Incr(SC_Decl_Copy(OldDecl, false));
	(SC_Decl_IsTypeImproveSet(NewDecl, true));
	JB_SetRef(NewDecl->IsLookupOnly, OldDecl);
	JB_Decr(OldDecl);
	JB_SetRef(NewDecl->Type, cls);
	SCDecl* oldcont = JB_Incr(NewDecl->Contains);
	SCDecl* it = JB_Incr(cls->Contained);
	JB_Decr(cls);
	if (it) {
		if ((!oldcont) or SC_Class_real_isa(it->Type, oldcont->Type)) {
			JB_SetRef(NewDecl->Contains, it);
		}
	}
	JB_Decr(it);
	JB_Decr(oldcont);
	if ((!(space->Access))) {
		JB_SetRef(space->Access, JB_Dict__New());
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_LowerCase(L->Name));
	JB_Decr(L);
	(JB_Dict_ValueSet(space->Access, _tmPf1, NewDecl));
	JB_Decr(_tmPf1);
	JB_Decr(NewDecl);
}


void SC_Iter_Check(SCIterator* self, SCClass* cls) {
	//using;
	MessagePosition _using156 = JB_Msg_SyntaxUsing(self->Source);
	JB_String* dot = JB_Incr(((JB_String*)JB_Ternary(JB_Str_Exists(self->Name), JB_Str_OperatorPlus(JB_LUB[512], self->Name), JB_LUB[0])));
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[1666]);
	JB_FS_AppendString(_fsf0, dot);
	JB_Decr(dot);
	JB_FS_AppendString(_fsf0, JB_LUB[1667]);
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	Message* msg = JB_Incr(JB_Str_ParseClean(_tmPf1));
	JB_Decr(_tmPf1);
	SCFunction* fnc = JB_Incr(((SCFunction*)SC_Func__NewFunc(msg, cls, self->Source)));
	JB_Decr(msg);
	SC_Func_FuncDecls(fnc);
	SC_Func_Transform(fnc);
	JB_Decr(fnc);
	JB_MsgPos_SyntaxUsingComplete((&_using156));
	JB_MsgPos_Destructor((&_using156));
}

void SC_Iter_Constructor(SCIterator* self, SCClass* parent) {
	SC_SCObject_Constructor(self);
	Array* _tmPf0 = JB_Array__New0();
	self->Names = JB_Incr(_tmPf0);
	self->selfs = nil;
	self->ValueRenamer = nil;
	self->Index = nil;
	self->LoopCond = nil;
	self->LoopEndCond = nil;
	self->Value = nil;
	self->WhileLoop = nil;
	self->Yield = nil;
	self->parent = JB_Incr(parent);
}

void SC_Iter_destructor(SCIterator* self) {
	JB_Decr(self->Names);
	JB_Decr(self->selfs);
	JB_Decr(self->ValueRenamer);
	JB_Decr(self->Index);
	JB_Decr(self->LoopCond);
	JB_Decr(self->LoopEndCond);
	JB_Decr(self->Value);
	JB_Decr(self->WhileLoop);
	JB_Decr(self->Yield);
	JB_Decr(self->parent);
	SC_SCObject_destructor(self);
}

bool SC_Iter_InitIter(SCIterator* self, Message* msg) {
	if ((!msg)) {
		return nil;
	}
	if (JB_Msg_ContainsSyx(msg, JB_SyxERel)) {
		debugger;
	}
	SC_Func__Tran_Strings(msg, nil);
	Message* thg = JB_Incr(((Message*)JB_Ring_First(msg)));
	if (JB_Msg_EqualsSyx(thg, JB_SyxThg, false)) {
		JB_SetRef(self->Name, thg->Name);
	}
	JB_Decr(thg);
	Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyxInt(msg, JB_SyxArg, -1));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(msg, nil);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SetRef(self->Source, _tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(JB_Msg_FindFlat(self->Source, JB_SyxTmp, JB_LUB[597], false));
	if ((!_tmPf1)) {
		JB_Msg_SyntaxExpect(msg, JB_LUB[1668]);
		JB_Decr(_tmPf1);
		return nil;
	}
	JB_SetRef(self->WhileLoop, _tmPf1);
	JB_Decr(_tmPf1);
	Message* WhileArg = JB_Incr(JB_Msg_FindSyx(self->WhileLoop, JB_SyxArg));
	if ((!WhileArg)) {
		JB_Msg_SyntaxExpect(self->WhileLoop, JB_LUB[1669]);
		JB_Decr(WhileArg);
		return nil;
	}
	JB_SetRef(self->LoopEndCond, ((Message*)JB_Ring_NextSib(WhileArg)));
	if (self->LoopEndCond) {
		JB_SetRef(self->LoopEndCond, ((Message*)JB_Ring_First(self->LoopEndCond)));
	}
	JB_SetRef(self->LoopCond, ((Message*)JB_Tree_Get(self->WhileLoop, 0)));
	if (self->LoopCond == WhileArg) {
		JB_SetRef(self->LoopCond, (JB_Syx_Msg(JB_SyxThg, JB_LUB[107])));
	}
	 else {
		JB_SetRef(self->LoopCond, JB_Msg_NeedBra(self->LoopCond));
	}
	Message* _tmPf2 = JB_Incr(JB_Msg_FindNested(WhileArg, JB_SyxTmp, JB_LUB[1670], false));
	if ((!_tmPf2)) {
		JB_Msg_SyntaxExpect(WhileArg, JB_LUB[1671]);
		JB_Decr(WhileArg);
		JB_Decr(_tmPf2);
		return nil;
	}
	JB_Decr(WhileArg);
	JB_SetRef(self->Yield, _tmPf2);
	JB_Decr(_tmPf2);
	JB_SetRef(self->Index, ((Message*)JB_Tree_Get(self->Yield, 1)));
	JB_SetRef(self->Value, ((Message*)JB_Tree_Get(self->Yield, 0)));
	if (self->Index) {
		bool _tmPf3 = ((JB_Msg_EqualsSyx(self->Index, JB_SyxBra, false)));
		if ((!_tmPf3)) {
			JB_Msg_SyntaxExpect(self->Index, nil);
			return nil;
		}
		JB_SetRef(self->Index, ((Message*)JB_Tree_Get(self->Index, 0)));
	}
	JB_SetRef(self->selfs, SC_NR__New());
	SC_NR_CollectSelfs(self->selfs, self->Source);
	JB_SetRef(self->Names, SC_Iter_Uniqueify(self, self->Source));
	return true;
}

Message* SC_Iter_MakeWhile(SCIterator* self, Message* arg, Message* postcond) {
	Message* result = JB_Incr(JB_Msg_NiceCopy(self->WhileLoop, arg));
	Message* Loop = JB_Incr(JB_Msg_Deepest(result, JB_SyxTmp, JB_LUB[597]));
	if ((!Loop)) {
		JB_Decr(result);
		JB_Decr(Loop);
		return nil;
	}
	Message* larg = JB_Incr(JB_Msg_FindSyx(Loop, JB_SyxArg));
	if ((!larg)) {
		JB_Decr(result);
		JB_Decr(Loop);
		JB_Decr(larg);
		return nil;
	}
	Message* it = JB_Incr(((Message*)JB_Ring_NextSib(larg)));
	if (it) {
		JB_Tree_Remove(it);
	}
	JB_Decr(it);
	JB_FreeIfDead(JB_Msg_ReplaceWith(larg, arg));
	JB_Decr(larg);
	JB_Tree_SyntaxAppend(Loop, postcond);
	JB_Decr(Loop);
	JB_SafeDecr(result);
	return result;
}

void SC_Iter_RenameSelf(SCIterator* self, Message* Name) {
	SC_NR_Rename(self->selfs, Name);
}

void SC_Iter_RenameValue(SCIterator* self, JB_String* s) {
	if ((!self->ValueRenamer)) {
		JB_SetRef(self->ValueRenamer, SC_NR__New());
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_FlatAfter(self->Source)));
		SC_NR_Collect(self->ValueRenamer, self->Source, self->Value->Name, _tmPf0);
		JB_Decr(_tmPf0);
	}
	SC_NR_RenameStr(self->ValueRenamer, s, JB_SyxThg);
}

void SC_Iter_Renuqify(SCIterator* self, SCBase* p) {
	{
		Array* _LoopSrcf1 = JB_Incr(self->Names);
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCNodeRenamer* n = JB_Incr(((SCNodeRenamer*)JB_Array_Value(_LoopSrcf1, _if0)));
			SC_NR_Uniqueify(n, p);
			JB_Decr(n);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	};
}

Array* SC_Iter_Uniqueify(SCIterator* self, Message* msg) {
	Array* rz = JB_Incr(((Array*)JB_Array__New0()));
	{
		Array* _LoopSrcf1 = JB_Incr(JB_Msg_FindAllDclNames(msg));
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			Message* CurrName = JB_Incr(((Message*)JB_Array_Value(_LoopSrcf1, _if0)));
			SCNodeRenamer* ren = JB_Incr(SC_NR__New());
			SC_NR_CollectDclThg(ren, CurrName);
			JB_Decr(CurrName);
			JB_Array_SyntaxAppend(rz, ren);
			JB_Decr(ren);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

SCIterator* SC_Iter__Alloc() {
	return ((SCIterator*)JB_New(SCIterator));
}

int SC_Iter__Init_() {
	{
	}
	;
	return 0;
}

int SC_Iter__InitCode_() {
	{
	}
	;
	JB_SetRef(SC__Iter_c_array, SC_Iter__SimpleIter(JB_LUB[1672]));
	JB_SetRef(SC__Iter_pointer, SC_Iter__SimpleIter(JB_LUB[1673]));
	return 0;
}

SCBase* SC_Iter__NeuIter(Message* node, SCBase* name_space, Message* ErrPlace) {
	if (JB_Object_MustBe(name_space, JB_AsClass(SCClass), node)) {
		SCIterator* it = JB_Incr(SC_Iter__New(((SCClass*)name_space)));
		if ((!SC_Iter_InitIter(it, node))) {
			JB_Decr(it);
			return nil;
		}
		JB_String* s = JB_Incr(it->Name);
		if ((!JB_Str_Exists(s))) {
			JB_SetRef(s, JB_LUB[1447]);
		}
		SC_Base_TryAdd(((SCClass*)name_space), node, it, s);
		JB_Decr(s);
		JB_Decr(it);
		return SC__Comp_program;
	}
	return nil;
}

SCIterator* SC_Iter__New(SCClass* parent) {
	SCIterator* __rz__ = ((SCIterator*)SC_Iter__Alloc());
	if (__rz__) {
		SC_Iter_Constructor(__rz__, parent);
	}
	return __rz__;
}

SCIterator* SC_Iter__SimpleIter(JB_String* src) {
	SCIterator* rz = nil;
	SCIterator* it = JB_Incr(SC_Iter__New(nil));
	Message* _tmPf1 = JB_Incr(JB_Str_Parse(src, JB_SyxArg, true));
	Message* _tmPf0 = JB_Incr(((Message*)JB_Tree_Get(_tmPf1, 0)));
	if (SC_Iter_InitIter(it, _tmPf0)) {
		JB_SetRef(rz, it);
	}
	JB_Decr(_tmPf0);
	JB_Decr(it);
	JB_Decr(_tmPf1);
	JB_SafeDecr(rz);
	return rz;
}


void SC_Mod_AddDelayedInit(SCModule* self, Message* src, Message* dest, JB_String* fn_name) {
	if (((bool)src) and (SC_Mod_HasActualCode(self, src) and (self != SC__Comp_program))) {
		JB_Tree_SyntaxAppend(dest, (JB_Syx_Msg(JB_SyxSheb, JB_Str_OperatorPlus(JB_LUB[1674], self->Name))));
		JB_Tree_SyntaxAppend(dest, ({
			Message* __imPf0 = (JB_Syx_Msg(JB_SyxDot, fn_name));
			JB_Tree_SyntaxAppend(__imPf0, (JB_Syx_Msg(JB_SyxThg, self->Name)));
			JB_Tree_SyntaxAppend(__imPf0, (JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			 __imPf0;
		}));
	}
}

void SC_Mod_AddInterfaceToTable(SCModule* self, SCClass* TableCls) {
	SCDecl* d = JB_Incr(SC_Decl__New());
	(SC_Decl_TypeContainedSet(d, self->Cls));
	JB_SetRef(d->Name, JB_Str_InterfaceToBehaviour(self->Name));
	JB_Array_SyntaxAppend(TableCls->Properties, d);
	SC_Base_TryAdd(TableCls, self->Source, d, d->Name);
	JB_Decr(d);
}

void SC_Mod_AddModuleToFunc(SCModule* self, SCBase* space) {
	if ((!JB_FreeIfDead(SC_Base_SyntaxAccess(space, JB_LUB[331])))) {
		Message* _tmPf0 = JB_Incr(SC_Base_FuncSrc(space));
		SC_Base_TryAdd(space, _tmPf0, self, JB_LUB[331]);
		JB_Decr(_tmPf0);
	}
}

void SC_Mod_BaseDecls(SCModule* self) {
	SC_Base_Use(self);
	JB_FreeIfDead(SC_CollectDecls(self->Source, self, self, 1));
}

Message* SC_Mod_BuildInitArg(SCModule* self) {
	Message* rz = nil;
	JB_SetRef(rz, ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf1));
		JB_Decr(_tmPf1);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	if (self->Source) {
		Message* ig = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[652])));
		JB_Tree_SyntaxAppend(ig, rz);
		JB_SetRef(ig->Obj, self);
		JB_Tree_SyntaxAppend(self->Source, ig);
		JB_Decr(ig);
	}
	JB_SafeDecr(rz);
	return rz;
}

bool SC_Mod_CanGrabBase(SCModule* self, bool IsDataType) {
	if ((!(self != JB_TypeObject->Modul))) {
		return nil;
	}
	SCClass* c = JB_Incr(self->Cls);
	if ((!c)) {
		JB_Decr(c);
		return nil;
	}
	if (IsDataType) {
		bool _tmPf0 = (!c->Super) and SC_Class_IsDataTypeOrStruct(c);
		JB_Decr(c);
		return _tmPf0;
	}
	 else {
		bool _tmPf1 = c->Super == JB_TypeObject;
		JB_Decr(c);
		return (_tmPf1);
	}
	JB_Decr(c);
	return false;
}

void SC_Mod_Constructor(SCModule* self) {
	SC_Base_Constructor0(self);
	self->Cls = nil;
	self->InitVarsArg = nil;
	self->InitCodeArg = nil;
	JB_String* _tmPf0 = JB_LUB[0];
	self->CppPart = JB_Incr(_tmPf0);
	self->DisposeFunc = nil;
	self->InitAfter = nil;
	JB_String* _tmPf1 = JB_LUB[0];
	self->SubsFrom = JB_Incr(_tmPf1);
	self->Grabbed = false;
	self->IsImport = false;
	self->Inited = false;
	self->IsRequiredInterface = false;
	CppRefs* _tmPf2 = SC_CppRefs__New(nil);
	self->DefaultRefs = JB_Incr(_tmPf2);
	if (SC_Base_IsVisible(self)) {
		debugger;
	}
}

void SC_Mod_DelayedInitFuncTransform(SCModule* self) {
	Message* v = JB_Incr(self->InitVarsArg);
	Message* it = JB_Incr(((Message*)JB_Tree_Get(v, 0)));
	if (it) {
		{
			Message* msg = JB_Incr(((Message*)JB_Tree_First_(it)));
			while (msg) {
				Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(msg)));
				if (((JB_Msg_EqualsSyx(msg, JB_SyxDecl, false))) and ({
					Message* _tmP289 = JB_Incr(JB_Msg_GetDclName(msg));
					bool _tmP288 = JB_Msg_InitRootDecl(_tmP289, msg, self);
					JB_Decr(_tmP289);
					 _tmP288;
				})) {
					JB_Tree_Remove(msg);
				}
				JB_SetRef(msg, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(msg);
			(it);
		}
		;
		SC_Mod_AddDelayedInit(self, v, SC__Comp_program->InitVarsArg, JB_LUB[1675]);
	}
	JB_Decr(it);
	JB_Decr(v);
	SC_Mod_AddDelayedInit(self, self->InitCodeArg, SC__Comp_program->InitCodeArg, JB_LUB[1676]);
}

void SC_Mod_destructor(SCModule* self) {
	JB_Decr(self->Cls);
	JB_Decr(self->InitVarsArg);
	JB_Decr(self->InitCodeArg);
	JB_Decr(self->CppPart);
	JB_Decr(self->DisposeFunc);
	JB_Decr(self->DefaultRefs);
	JB_Decr(self->InitAfter);
	JB_Decr(self->SubsFrom);
	SC_Base_destructor(self);
}

void SC_Mod_FillDisposeFunc(SCModule* self) {
	SCFunction* _tmPf0 = JB_Incr(self->DisposeFunc);
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return;
	}
	Message* Arg = JB_Incr(SC_Base_SourceArg(_tmPf0));
	JB_Decr(_tmPf0);
	{
		Array* _LoopSrcf2 = JB_Incr(SC_Mod_ListVars(self, false));
		int _if1 = 0;
		while (_if1 < JB_Array_Size(_LoopSrcf2)) {
			SCDecl* decl = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if1)));
			if ((!decl->IsLookupOnly) and (SC_Decl_SyntaxIsnt(decl, kSC__SCDeclInfo_const))) {
				if ((!decl->C_Array)) {
					Message* _tmPf4 = JB_Incr(SC_NewRelStr(decl->Name, JB_LUB[541], JB_LUB[106]));
					JB_Tree_SyntaxAppend(Arg, _tmPf4);
					JB_Decr(_tmPf4);
				}
			}
			JB_Decr(decl);
			_if1++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_Decr(Arg);
}

JB_String* SC_Mod_GetPrefix(SCModule* self, SCDecl* D) {
	JB_String* rz = JB_LUB[0];
	rz = JB_Str_OperatorPlus(SC_Decl_Project(D)->Mod->ExportName, JB_LUB[568]);
	if (JB_Str_Exists(self->CppPart)) {
		rz = JB_Str_OperatorPlus(rz, (JB_Str_OperatorPlus(JB_LUB[568], JB_Str_OperatorPlus(self->CppPart, JB_LUB[568]))));
	}
	if (SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_const)) {
		rz = JB_Str_OperatorPlus(JB_LUB[1677], rz);
	}
	return rz;
}

SCModule* SC_Mod_Grab(SCModule* self) {
	if ((!SC_Mod_OKToSort(self))) {
		JB_Object_SyntaxExpect(nil);
		return nil;
	}
	return self;
}

bool SC_Mod_HasActualCode(SCModule* self, Message* arg) {
	{
		Message* curr = arg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(arg));
		while (((bool)curr) and (curr != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(curr));
			if (JB_Msg_EqualsSyx(curr, JB_SyxDecl, false)) {
				curr = ((Message*)JB_Ring_FlatAfter(curr));
				continue;
			}
			 else if ((!JB_Msg_EqualsSyx(curr, JB_SyxArg, false))) {
				return true;
			}
			curr = _N_f2;
		};
		(arg);
	}
	;
	return false;
}

void SC_Mod_InitDecls(SCModule* self) {
	Message* a = JB_Incr(((Message*)JB_Tree_Get(self->InitVarsArg, 0)));
	if (JB_Ring_HasChildren(a)) {
		SC_Imp_Use(self->Project);
		JB_FreeIfDead(SC_CollectDecls(a, self, self, 0));
	}
	JB_Decr(a);
}

bool SC_Mod_IsMArray(SCModule* self, Message* arr) {
	SCClass* cls = JB_Incr(self->Cls);
	if (((bool)cls) and ((!arr) or JB_Tree_HasOneChild(arr))) {
		bool _tmPf0 = cls->IsDataType or cls->IsStruct;
		JB_Decr(cls);
		return _tmPf0;
	}
	JB_Decr(cls);
	return false;
}

bool SC_Mod_IsProperModule(SCModule* self) {
	if ((!self->Lookup)) {
		return nil;
	}
	if ((self->Lookup == SC__Comp_program) and (self->Source == nil)) {
		return false;
	}
	return true;
}

Array* SC_Mod_ListProperties(SCModule* self) {
	return SC_Mod_ListVars(self, true);
}

Array* SC_Mod_ListVars(SCModule* self, bool NoFuncs) {
	Array* rz = JB_Incr(((Array*)JB_Array__New0()));
	{
		Dictionary* _LoopSrcf1 = JB_Incr(self->Access);
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf1));
		JB_Decr(_LoopSrcf1);
		while (JB_Nav_MoveNext(_navf0)) {
			SCObject* o = JB_Incr(((SCObject*)JB_Nav_Value(_navf0)));
			if (JB_Object_FastIsa(o, JB_AsClass(SCDecl))) {
				if (NoFuncs and ((bool)((SCDecl*)o)->IsLookupOnly)) {
					JB_Decr(o);
					continue;
				}
				JB_Array_SyntaxAppend(rz, ((SCDecl*)o));
			}
			JB_Decr(o);
		};
		JB_Decr(_navf0);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

void SC_Mod_LoadInitFunc(SCModule* self) {
	SC__Base_CurrVisibility = true;
	SC__Base_CurrModule = self;
	Message* arg = JB_Incr(self->InitCodeArg);
	if (arg) {
		SC_Mod_LoadInitFuncSub(self, arg, JB_LUB[1676]);
	}
	JB_SetRef(arg, self->InitVarsArg);
	if (arg) {
		SC_Mod_LoadInitFuncSub(self, arg, JB_LUB[1675]);
		Message* Msg = JB_Incr(JB_Str_ParseClean(JB_LUB[1678]));
		JB_SetRef(self->DisposeFunc, SC_Mod_NewModuleFunc(self, Msg));
		JB_Decr(Msg);
	}
	JB_Decr(arg);
	SC__Base_CurrModule = nil;
}

void SC_Mod_LoadInitFuncSub(SCModule* self, Message* init, JB_String* name) {
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[1437]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendString(_fsf0, JB_LUB[1679]);
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	Message* msg = JB_Incr(JB_Str_ParseClean(_tmPf1));
	JB_Decr(_tmPf1);
	JB_Tree_SyntaxAppend(msg, init);
	SCFunction* fn = JB_Incr(SC_Mod_NewModuleFunc(self, msg));
	JB_Decr(msg);
	fn->AllocCode = (fn->AllocCode | kSC_IsInitFunc);
	JB_Decr(fn);
	Message* L = JB_Incr(((Message*)JB_Ring_Last(init)));
	if ((!(JB_Ring_HasChildren(L)))) {
		JB_Tree_Remove(L);
	}
	JB_Decr(L);
}

void SC_Mod_LoadModule(SCModule* self, Message* node) {
	JB_SetRef(node->Obj, self);
	Message* namemsg = JB_Incr(((Message*)JB_Ring_First(node)));
	if ((!self->Cls)) {
		JB_Msg_Expect(namemsg, JB_SyxThg, nil);
	}
	Message* arg = JB_Incr(namemsg);
	if (JB_Msg_EqualsSyx(namemsg, JB_SyxThg, false)) {
		JB_SetRef(self->Name, namemsg->Name);
		Message* sub = JB_Incr(((Message*)JB_Ring_NextSib(namemsg)));
		JB_SetRef(arg, sub);
		if (JB_Msg_EqualsSyx(sub, JB_SyxBra, false)) {
			Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(sub, JB_SyxThg));
			if ((!_tmPf0)) {
				JB_Decr(namemsg);
				JB_Decr(arg);
				JB_Decr(sub);
				JB_Decr(_tmPf0);
				return;
			}
			JB_SetRef(self->SubsFrom, _tmPf0->Name);
			JB_Decr(_tmPf0);
			JB_SetRef(arg, ((Message*)JB_Ring_NextSib(sub)));
		}
		JB_Decr(sub);
	}
	JB_Decr(namemsg);
	JB_Msg_Expect(arg, JB_SyxArg, nil);
	if ((!JB_Msg_ExpectLast(arg, JB_LUB[0]))) {
		JB_Decr(arg);
		return;
	}
	JB_SetRef(self->Source, arg);
	JB_Decr(arg);
	JB_String* _tmPf1 = JB_Incr(SC_Mod_safename(self));
	SC_Base_TryAdd(SC__Comp_DisamModules, nil, self, _tmPf1);
	JB_Decr(_tmPf1);
	SC_Base_Collect(self, self->Source, SC__Base_CurrVisibility, nil);
}

void SC_Mod_MoveToInitFunc(SCModule* self, Message* c) {
	if ((JB_Msg_EqualsSyx(c, JB_SyxSheb, false)) or (JB_Msg_EqualsSyx(c, JB_Syxurl, false))) {
		JB_Tree_Remove(c);
		return;
	}
	if ((!JB_Msg_AllowedMoveToInit(c))) {
		JB_Msg_SyntaxExpect(c, nil);
		return;
	}
	if (JB_Msg_EqualsSyx(c, JB_SyxDecl, false)) {
		if (JB_Msg_SettingToNil(c)) {
			return;
		}
	}
	if ((!(self->InitCodeArg))) {
		JB_SetRef(self->InitCodeArg, SC_Mod_BuildInitArg(self));
	}
	if (JB_Msg_EqualsSyx(c, JB_SyxDecl, false)) {
		if ((!(self->InitVarsArg))) {
			JB_SetRef(self->InitVarsArg, SC_Mod_BuildInitArg(self));
		}
		JB_Tree_SyntaxAppend(((Message*)JB_Ring_First(self->InitVarsArg)), c);
	}
	 else {
		JB_Tree_SyntaxAppend(self->InitCodeArg, c);
	}
}

SCFunction* SC_Mod_NewModuleFunc(SCModule* self, Message* src) {
	SCFunction* rz = nil;
	JB_SetRef(rz, ((SCFunction*)SC_Func__NewFunc(src, self, src)));
	SC_Base_TryAddBase(self, src, rz);
	JB_SafeDecr(rz);
	return rz;
}

bool SC_Mod_OKToSort(SCModule* self) {
	if (self->Grabbed) {
		return nil;
	}
	SCClass* c = JB_Incr(self->Cls);
	if ((!c)) {
		JB_Decr(c);
		return true;
	}
	if (c->IsStruct) {
		if ((!SC_Class_StructContainerShipGrabbed(c))) {
			JB_Decr(c);
			return nil;
		}
	}
	if (SC_Class_SuperGrabbed(c)) {
		self->Grabbed = true;
		JB_Decr(c);
		return true;
	}
	JB_Decr(c);
	return false;
}

SCModule* SC_Mod_OperatorOneOrOther(SCModule* self, SCModule* B) {
	if (((bool)self) and ((bool)B)) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(self->Source, JB_kNameConf);
		}
		if ((!false)) {
			JB_Msg_SyntaxExpect(B->Source, JB_kNameConf);
		}
	}
	return B;
}

void SC_Mod_RenameVars(SCModule* self) {
	{
		Array* _LoopSrcf1 = JB_Incr(SC_Mod_ListVars(self, false));
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			SCDecl* decl = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf1, _if0)));
			if ((!decl->IsLookupOnly)) {
				JB_SetRef(decl->Name, SC_Decl_PrefixedName(decl, self));
			}
			JB_Decr(decl);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	};
}

JB_String* SC_Mod_Render(SCModule* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	if (self->Cls) {
		JB_FS_AppendString(fs, JB_LUB[1680]);
		JB_FreeIfDead(SC_Class_Render(self->Cls, fs));
	}
	 else {
		JB_FreeIfDead(SC_SCObject_Render(self, fs));
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Mod_safename(SCModule* self) {
	if (JB_Str_Exists(self->Name)) {
		return self->Name;
	}
	return self->Cls->Name;
}

SCModule* SC_Mod_SuperMod(SCModule* self) {
	SCClass* c = self->Cls;
	if (c) {
		return c->Super->Modul;
	}
	return nil;
}

bool SC_Mod_TryInit(SCModule* self, Array* req) {
	{
		Message* _LoopSrcf2 = self->InitAfter;
		Message* name = ((Message*)JB_Tree_First_(_LoopSrcf2));
		while (name) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(name));
			if ((!JB_Msg_Expect(name, JB_SyxThg, nil))) {
				return nil;
			}
			SCModule* m = SC_Comp__FindModuleMsg(name);
			if ((!m)) {
				return nil;
			}
			if ((!m->Inited)) {
				return nil;
			}
			name = _Nf1;
		};
		(_LoopSrcf2);
	}
	;
	self->Inited = true;
	JB_Array_SyntaxAppend(req, self);
	return true;
}

SCModule* SC_Mod__Alloc() {
	return ((SCModule*)JB_New(SCModule));
}

SCBase* SC_Mod__DoInitAfter(Message* node, SCBase* name_space, Message* ErrPlace) {
	SCModule* mod = SC_Base_GetAsModule(name_space, node);
	if ((!mod)) {
		return nil;
	}
	JB_SetRef(mod->InitAfter, JB_Msg_NeedSyxOK(node, JB_SyxPrm, JB_SyxBra));
	return SC__Comp_program;
}

SCBase* SC_Mod__Neu(Message* node, SCBase* name_space, Message* ErrPlace) {
	SCModule* m = JB_Incr(SC_Mod__New());
	m->Project = SC__Imp_Curr;
	if (JB_Object_FastIsa(name_space, JB_AsClass(SCClass))) {
		m->Lookup = nil;
		JB_SetRef(m->Cls, name_space);
		JB_SetRef(m->Name, ((SCClass*)name_space)->Name);
	}
	 else {
		m->Lookup = SC_Base_ProjectFix(name_space);
	}
	if (node) {
		SC_Mod_LoadModule(m, node);
	}
	JB_SafeDecr(m);
	return m;
}

SCModule* SC_Mod__New() {
	SCModule* __rz__ = ((SCModule*)SC_Mod__Alloc());
	if (__rz__) {
		SC_Mod_Constructor(__rz__);
	}
	return __rz__;
}

SCModule* SC_Mod__NewContainer(JB_String* s) {
	SCModule* rz = nil;
	JB_SetRef(rz, SC_Mod__New());
	JB_SetRef(rz->Name, s);
	SC_Base_TryAdd(SC__Comp_program, nil, rz, s);
	JB_SafeDecr(rz);
	return rz;
}

SCBase* SC_Mod__ReadIntoCppRefs(Message* node, SCBase* name_space, Message* ErrPlace) {
	SCModule* _tmPf0 = JB_Incr(SC_Base_GetAsModule(name_space, nil));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	SC_CppRefs_Read(_tmPf0->DefaultRefs, node);
	JB_Decr(_tmPf0);
	return SC__Comp_program;
}




_cstring JB_Str_cstring(JB_StringC* self) {
	if (self != nil) {
		return ((_cstring)self->Addr);
	}
	return nil;
}


void SC_ASMFunc2_destructor(ASMFunc2* self) {
	JB_Mrap_Destructor(self);
}

void SC_ASMFunc2_Visible(ASMFunc2* self) {
	//visible;
}


void SC_GUIControl_Constructor(GUIControl* self, GUIControl* p) {
	JB_Ring_Constructor(self, p);
	self->xyz = 0;
}

void SC_GUIControl_destructor(GUIControl* self) {
	JB_Ring_Destructor(self);
}

GUIControl* SC_GUIControl__Alloc() {
	return ((GUIControl*)JB_New(GUIControl));
}

GUIControl* SC_GUIControl__New(GUIControl* p) {
	GUIControl* __rz__ = ((GUIControl*)SC_GUIControl__Alloc());
	if (__rz__) {
		SC_GUIControl_Constructor(__rz__, p);
	}
	return __rz__;
}


void JB_Msg_Acc__(Message* self, FastString* fs) {
	Message* f = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_FS_SyntaxAppend(fs, f);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(f)));
	JB_Decr(f);
	JB_Msg_RenderPrm(_tmPf0, fs, '[', ']');
	JB_Decr(_tmPf0);
}

Message* JB_Msg_AccessAdd(Message* self, JB_String* key) {
	Message* l = self;
	if (JB_Msg_EqualsSyx(self, JB_SyxTmp, false)) {
		l = ((Message*)JB_Ring_Last(self));
		if ((!JB_Msg_EqualsSyx(l, JB_SyxArg, false))) {
			l = JB_Msg_Msg(self, JB_SyxArg, JB_LUB[0]);
		}
	}
	{
		Message* tmp = ((Message*)JB_Tree_First_(l));
		while (tmp) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(tmp)));
			if (JB_Msg_SyntaxEquals(tmp, key, true)) {
				{
					Message* __INSID108 = ((Message*)JB_Ring_Last(tmp));
					if (__INSID108) {
						JB_Tree_Remove(__INSID108);
					}
				}
				;
				return tmp;
			}
			tmp = _Nf1;
		};
		(l);
	}
	;
	return JB_Msg_Msg(l, JB_SyxTmp, key);
}

void JB_Msg_CantFind(Message* self, Syntax s, JB_String* name, Message* found) {
	if ((!self)) {
		JB_API__NilHandler();
		return;
	}
	FastString* fs = JB_Incr(JB_FS__New());
	if (found) {
		JB_FS_AppendString(fs, JB_LUB[1681]);
		JB_FS_MsgErrorName(fs, name);
		JB_String* _tmPf0 = JB_Incr(JB_Syx_Name(s));
		JB_FS_AppendString(fs, _tmPf0);
		JB_Decr(_tmPf0);
		JB_FS_AppendString(fs, JB_LUB[1682]);
		JB_String* _tmPf1 = JB_Incr(JB_Syx_Name(found->Func));
		JB_FS_AppendString(fs, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else {
		if (s) {
			JB_FS_AppendString(fs, JB_LUB[1683]);
			JB_FS_AppendByte(fs, '@');
			JB_String* _tmPf2 = JB_Incr(JB_Syx_Name(s));
			JB_FS_AppendString(fs, _tmPf2);
			JB_Decr(_tmPf2);
		}
		 else {
			JB_FS_AppendString(fs, JB_LUB[1684]);
		}
		JB_FS_MsgErrorName(fs, name);
		found = self;
	}
	JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(fs));
	JB_Decr(fs);
	JB_Rec_NewErrorWithNode(JB_StdErr, found, _tmPf3, nil);
	JB_Decr(_tmPf3);
}

void JB_Msg_AddBefore(Message* self, Message* before, Message* NewItem) {
	if (before) {
		(JB_Ring_PrevSibSet(before, NewItem));
	}
	 else {
		JB_Tree_SyntaxAppend(self, NewItem);
	}
}

void JB_Msg_Adj__(Message* self, FastString* fs) {
	Message* f = ((Message*)JB_Ring_First(self));
	Message* l = ((Message*)JB_Ring_NextSib(f));
	JB_FS_SyntaxAppend(fs, f);
	JB_FS_AppendString(fs, JB_LUB[1685]);
	JB_FS_SyntaxAppend(fs, l);
}

int JB_Msg_After(Message* self) {
	return self->Position + self->Extra;
}

void JB_Msg_AfterSet(Message* self, int Value) {
	self->Extra = ((Value - self->Position) | JB__Tk_BaseExtra);
}

bool JB_Msg_AllowedMoveToInit(Message* self) {
	Syntax type = self->Func;
	if ((type == JB_SyxDot) or ((type == JB_SyxSDot) or ((type == JB_SyxFunc) or ((type == JB_SyxRel) or (type == JB_SyxDecl))))) {
		return true;
	}
	if (JB_Msg_OperatorIsTmp(self, JB_LUB[1596])) {
		return true;
	}
	return false;
}

Message* JB_Msg_Ancestor(Message* self, Syntax f) {
	if (self) {
		{
			Message* _LoopSrcf1 = ((Message*)JB_Ring_Parent(self));
			Message* ch = _LoopSrcf1;
			while (ch) {
				if (JB_Msg_EqualsSyx(ch, f, false)) {
					return ch;
				}
				ch = ((Message*)JB_Ring_Parent(ch));
			};
			(_LoopSrcf1);
		};
	}
	return nil;
}

uint JB_Msg_AndOrExpansionTest(Message* self) {
	Message* ln = ((Message*)JB_Ring_First(self));
	if (JB_Msg_EqualsSyx(self, JB_SyxBra, false)) {
		return JB_Msg_AndOrExpansionTest(ln);
	}
	if ((!(JB_Msg_EqualsSyx(self, JB_SyxRel, false)))) {
		return nil;
	}
	Message* op = ((Message*)JB_Ring_NextSib(ln));
	if ((!(!JB_Msg_SyntaxEquals(op, JB_LUB[541], false)))) {
		return nil;
	}
	Message* rn = ((Message*)JB_Ring_NextSib(op));
	if ((!rn)) {
		return nil;
	}
	uint ls = JB_Msg_AndOrExpansionTest(ln);
	uint rs = JB_Msg_AndOrExpansionTest(rn);
	uint bs = ls | rs;
	int orand = 1;
	if ((JB_Msg_SyntaxEquals(op, JB_LUB[600], false)) or (JB_Msg_SyntaxEquals(op, JB_LUB[601], false))) {
		return orand | bs;
	}
	if (((ls == 2) or (ls == 0)) and (rs == orand)) {
		JB_Msg_BunchlessFix(self);
		return -1;
	}
	return 2 + bs;
}

JB_String* JB_Msg_APICppProject(Message* self) {
	SCFile* f = JB_Msg_SCFile(self);
	JB_String* it = f->ExportName;
	if (JB_Str_Exists(it)) {
		return JB_Str_LowerCase(it);
	}
	SCImport* a = f->Proj;
	if (a) {
		SCModule* b = a->Mod;
		if (b) {
			JB_String* c = b->ExportName;
			if (JB_Str_Exists(c)) {
				return JB_Str_LowerCase(c);
			}
		}
	}
	return JB_LUB[70];
}

void JB_Msg_AppMainFix(Message* self) {
	Message* desired = JB_Incr(JB_Str_Parse(JB_LUB[1686], JB_SyxArg, true));
	Message* arg = JB_Incr(((Message*)JB_Ring_Last(self)));
	JB_Msg_BecomeMsg(self, desired);
	JB_Tree_SyntaxAppend(self, arg);
	JB_Decr(arg);
	JB_Decr(desired);
}

void JB_Msg_ARel__(Message* self, FastString* fs) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendString(fs, self->Name);
}

void JB_Msg_Arg__(Message* self, FastString* fs) {
	bool Braces = (JB_Msg_SyntaxIs(self, kJB__MsgUIFlags_Style2)) or ((!JB_Ring_HasChildren(self)) or (JB_Msg_OperatorIn(self, JB_SyxArg)));
	if (Braces) {
		JB_FS_AppendByte(fs, '{');
	}
	JB_Msg_FSListArg(self, fs);
	if (Braces) {
		JB_FS_AppendIndent(fs);
		JB_FS_AppendByte(fs, '}');
	}
}

JB_String* JB_Msg_ArgName(Message* self) {
	if ((!(JB_Msg_EqualsSyx(self, JB_SyxItem, false)))) {
		return nil;
	}
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_String* _tmPf0 = JB_Incr(JB_Msg_Nyme(_tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_String* JB_Msg_ArgValue(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxItem, false)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Tree_Second(self)));
		JB_String* _tmP101 = JB_Incr(JB_Msg_Nyme(_tmPf0));
		JB_Decr(_tmPf0);
		if ((!JB_Str_Exists(_tmP101))) {
			JB_SetRef(_tmP101, JB_LUB[107]);
		}
		JB_SafeDecr(_tmP101);
		return _tmP101;
	}
	return self->Name;
}

void JB_Msg_Arr__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '[');
	JB_Msg_FSListSep(self, fs, JB_LUB[164]);
	JB_FS_AppendByte(fs, ']');
}

SCArg* JB_Msg_AsArg(Message* self) {
	JB_Object* obj = self->Obj;
	if ((!obj)) {
		return nil;
	}
	if (JB_Object_FastIsa(obj, JB_AsClass(SCArg))) {
		return ((SCArg*)obj);
	}
	return nil;
}

SCDecl* JB_Msg_AsDecl(Message* self) {
	JB_Object* obj = self->Obj;
	if ((!obj)) {
		return nil;
	}
	if (JB_Object_FastIsa(obj, JB_AsClass(SCDecl))) {
		return ((SCDecl*)obj);
	}
	JB_Obj_PrintLine(JB_Wrap__NewInt(JB_ObjID(((Message*)JB_Ring_Parent(self)))));
	debugger;
	return nil;
}

SCFunction* JB_Msg_AsFunc(Message* self) {
	JB_Object* obj = self->Obj;
	if (JB_Object_FastIsa(obj, JB_AsClass(SCFunction))) {
		return ((SCFunction*)obj);
	}
	return nil;
}

void JB_Msg_Ask__(Message* self, FastString* fs) {
	JB_Msg_BinnRender(self, fs, JB_LUB[534], JB_LUB[0]);
}

fn_asm JB_Msg_ASMFunc(Message* self) {
	MsgUIFlags ASM = self->Flags & 63;
	if ((!(ASM))) {
		ASM = ((int)self->Func);
	}
	return JB_fn_asm_table[ASM];
}

SCModule* JB_Msg_AsModule(Message* self) {
	JB_Object* obj = self->Obj;
	if ((!obj)) {
		return nil;
	}
	if (JB_Object_FastIsa(obj, JB_AsClass(SCModule))) {
		return ((SCModule*)obj);
	}
	debugger;
	return nil;
}

void JB_Msg_AssignsFix(Message* self, SCFunction* f) {
	Message* RP = JB_Incr(JB_Msg_NiceParent(self));
	if ((!(JB_Msg_EqualsSyx(RP, JB_SyxRel, false)))) {
		debugger;
		JB_Decr(RP);
		return;
	}
	Message* RightSide = JB_Incr(((Message*)JB_Ring_Last(RP)));
	if ((!(RightSide->Obj))) {
		debugger;
		JB_Decr(RP);
		JB_Decr(RightSide);
		return;
	}
	Message* List = JB_Incr(((Message*)JB_Ring_Last(self)));
	Message* Upon = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_Tree_SyntaxAppend(List, RightSide);
	JB_Decr(RightSide);
	List->Func = JB_SyxPrm;
	JB_Decr(List);
	Message* L = JB_Incr(((Message*)JB_Ring_Last(RP)));
	JB_Tree_Remove(L);
	if (((bool)f->ReturnType) and (((bool)f->Cls) and f->Cls->IsDataType)) {
		//using;
		MessagePosition _using176 = JB_Msg_SyntaxUsing(self);
		(JB_Ring_FirstSet(RP, L));
		Message* _tmPf0 = JB_Incr(JB_Msg_FailOrCopy(Upon, RP));
		(JB_Ring_FirstSet(RP, _tmPf0));
		JB_Decr(_tmPf0);
		JB_MsgPos_SyntaxUsingComplete((&_using176));
		JB_MsgPos_Destructor((&_using176));
	}
	 else {
		RP->Func = JB_SyxBra;
	}
	JB_Decr(L);
	JB_Decr(Upon);
	JB_Decr(RP);
}

int JB_Msg_autocomplete_state(Message* self) {
	int rz = 0;
	JB_String* s = JB_Incr(self->Name);
	rz = (rz + ((JB_Str_ContainsByte(s, 'R')) << 0));
	rz = (rz + ((JB_Str_ContainsByte(s, 'M')) << 1));
	rz = (rz + ((JB_Str_ContainsByte(s, 'C')) << 2));
	rz = (rz + ((JB_Str_ContainsByte(s, 'L')) << 3));
	JB_Decr(s);
	return rz;
}

SCFunction* JB_Msg_AutoMsgFunc(Message* self) {
	SCFunction* rz = nil;
	rz = JB_Msg_MsgFunc(self);
	if ((!(rz))) {
		rz = JB_Msg_MsgFunc(((Message*)JB_Ring_Parent(self)));
	}
	return rz;
}

SCFunction* JB_Msg_AutoMsgFuncFn(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxName, false)) {
		SCClass* cls = SC_Comp__SyntaxAccess(self);
		if (cls) {
			return cls->ConstructorFunc;
		}
	}
	Message* tmp = self;
	if ((!JB_Msg_EqualsSyx(tmp, JB_SyxTmp, false))) {
		tmp = ((Message*)JB_Ring_Parent(self));
		if (JB_Msg_EqualsSyx(tmp, JB_SyxDot, false)) {
			tmp = ((Message*)JB_Ring_Parent(tmp));
		}
	}
	if (JB_Msg_EqualsSyx(tmp, JB_SyxTmp, false)) {
		SCFunction* fn = JB_Msg_AsFunc(tmp);
		if (fn) {
			return fn;
		}
	}
	return nil;
}

void JB_Msg_Back__(Message* self, FastString* fs) {
	if (JB_Ind_SyntaxCast(JB_Str_FindByte(self->Name, '`', 0, JB_int__max()))) {
		JB_Msg_Str__(self, fs);
	}
	 else {
		JB_FS_AppendByte(fs, '`');
		JB_FS_AppendString(fs, self->Name);
		JB_FS_AppendByte(fs, '`');
	}
}

void JB_Msg_Badj__(Message* self, FastString* fs) {
	Message* f = ((Message*)JB_Ring_First(self));
	Message* l = ((Message*)JB_Ring_NextSib(f));
	JB_FS_SyntaxAppend(fs, l);
	JB_FS_AppendString(fs, JB_LUB[1687]);
	JB_FS_SyntaxAppend(fs, f);
}

void JB_Msg_BecomeStr(Message* self, Syntax fn, JB_String* name) {
	self->Func = fn;
	JB_SetRef(self->Name, name);
}

void JB_Msg_BecomeNum(Message* self, int64 num) {
	JB_Tree_Clear(self);
	self->Func = JB_SyxNum;
	JB_SetRef(self->Name, JB_int64_Render(num, nil));
}

void JB_Msg_BecomeMsg(Message* self, Message* src) {
	self->Func = src->Func;
	JB_SetRef(self->Name, src->Name);
	JB_Tree_Clear(self);
	JB_Tree_TakeAllFrom(self, src);
}

void JB_Msg_BecomeMacro(Message* self, Macro* b, Array* prms) {
	//using;
	MessagePosition _using168 = JB_Msg_SyntaxUsing(self);
	{
		int _if0 = 0;
		while (_if0 < JB_Array_Size(prms)) {
			int i = _if0;
			Message* r = ((Message*)JB_Array_Value(prms, _if0));
			if (r == self) {
				r = JB_Msg_NiceCopy(self, nil);
				(JB_Array_ValueSet(prms, i, r));
			}
			r->Flags = nil;
			_if0++;
		};
	}
	;
	Message* pz = JB_Macro_Pz(b);
	Message* abc = JB_Msg_MacroCopy(pz, self, prms);
	JB_Msg_BecomeMsg(self, abc);
	{
		int _if2 = 0;
		while (_if2 < JB_Array_Size(prms)) {
			Message* r = ((Message*)JB_Array_Value(prms, _if2));
			if ((!(JB_Msg_SyntaxIs(r, kJB__MsgUIFlags_Inserted)))) {
				JB_Msg_SyntaxExpect(r, JB_LUB[1688]);
			}
			_if2++;
		};
	}
	;
	JB_MsgPos_SyntaxUsingComplete((&_using168));
	JB_MsgPos_Destructor((&_using168));
}

void JB_Msg_BecomeAppend(Message* self, JB_String* s) {
	Message* p = ((Message*)JB_Ring_Parent(self));
	if ((!JB_Msg_Expect(p, JB_SyxRel, nil))) {
		return;
	}
	JB_Msg_BecomeStr(p, JB_SyxDot, s);
	self->Func = JB_SyxPrm;
	Message* n = ((Message*)JB_Ring_NextSib(self));
	if (JB_Msg_EqualsSyx(n, JB_SyxList, false)) {
		JB_FreeIfDead(JB_Msg_ReplaceWith(self, n));
		n->Func = JB_SyxPrm;
	}
	 else {
		(JB_Ring_LastSet(self, n));
	}
}

void JB_Msg_BecomeSyx(Message* self) {
	self->Func = JB_SyxThg;
	JB_SetRef(self->Name, JB_Str_OperatorPlus(JB_LUB[817], self->Name));
}

void JB_Msg_BeLike(Message* self, Message* belikeme) {
	if (JB_Ring_HasChildren(belikeme)) {
		debugger;
		return;
	}
	self->Func = belikeme->Func;
	JB_SetRef(self->Name, belikeme->Name);
}

void JB_Msg_Bin__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[528]);
	JB_FS_AppendHexStr(fs, self->Name);
	JB_FS_AppendString(fs, JB_LUB[478]);
}

void JB_Msg_binn__(Message* self, FastString* fs) {
	JB_Msg_BinnRender(self, fs, JB_LUB[1689], JB_LUB[0]);
}

void JB_Msg_BinnRender(Message* self, FastString* fs, JB_String* sepa, JB_String* sepb) {
	Message* f = ((Message*)JB_Ring_First(self));
	if ((!f)) {
		return;
	}
	Message* opp = ((Message*)JB_Ring_NextSib(f));
	if ((!opp)) {
		return;
	}
	Message* l = ((Message*)JB_Ring_NextSib(opp));
	Message* OF = ((Message*)JB_Ring_First(opp));
	JB_FS_AppendString(fs, sepa);
	JB_FS_SyntaxAppend(fs, ((Message*)JB_Ternary(((bool)OF), OF, opp)));
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, f);
	if ((!OF)) {
		if ((!(!l))) {
			debugger;
		}
		return;
	}
	Message* ON = ((Message*)JB_Ring_NextSib(OF));
	if (ON) {
		JB_FS_AppendByte(fs, ' ');
		JB_FS_SyntaxAppend(fs, ON);
	}
	if (l) {
		JB_FS_AppendByte(fs, ' ');
		JB_FS_SyntaxAppend(fs, l);
	}
}

void JB_Msg_Bra__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '(');
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(fs, ')');
}

void JB_Msg_BRel__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
}

void JB_Msg_BunchFix(Message* self) {
	//using;
	MessagePosition _using187 = JB_Msg_SyntaxUsing(self);
	Message* P = JB_Incr(JB_Msg_BunchFixOof(self));
	Message* subject = JB_Incr(((Message*)JB_Ring_First(P)));
	Message* multi_opp = JB_Incr(JB_Msg_NextOf2(subject, nil, nil));
	if ((!multi_opp)) {
		JB_MsgPos_Destructor((&_using187));
		JB_Decr(P);
		JB_Decr(subject);
		JB_Decr(multi_opp);
		return;
	}
	JB_Msg_RelFix(self, false);
	JB_FreeIfDead(JB_Msg_ReplaceWith(P, self));
	JB_Decr(P);
	JB_Msg_BunchFixSub(multi_opp, subject, self);
	JB_Decr(multi_opp);
	JB_Decr(subject);
	JB_MsgPos_SyntaxUsingComplete((&_using187));
	JB_MsgPos_Destructor((&_using187));
}

Message* JB_Msg_BunchFixOof(Message* self) {
	Message* P = JB_Msg_NiceParent(self);
	if (JB_Msg_EqualsSyx(P, JB_SyxRel, false)) {
		return P;
	}
	return ((Message*)JB_Ring_Last(SC_Func__TypedTempMoveOut(self, JB_LUB[0])));
}

void JB_Msg_BunchFixSub(Message* self, Message* subject, Message* stuff) {
	JB_Incr(stuff);
	JB_Incr(subject);
	while (stuff) {
		Message* test = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
		JB_Tree_SyntaxAppend(test, subject);
		Message* _tmPf0 = JB_Incr(JB_Msg_NiceCopy(self, nil));
		JB_Tree_SyntaxAppend(test, _tmPf0);
		JB_Decr(_tmPf0);
		if ((!JB_Msg_EqualsSyx(stuff, JB_SyxRel, false))) {
			JB_FreeIfDead(JB_Msg_ReplaceInto(stuff, test));
			JB_Decr(test);
			break;
		}
		Message* R = JB_Incr(((Message*)JB_Tree_Get(stuff, 2)));
		if ((!R)) {
			JB_Msg_SyntaxExpect(stuff, JB_LUB[1690]);
			JB_Decr(subject);
			JB_Decr(stuff);
			JB_Decr(test);
			JB_Decr(R);
			return;
		}
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(stuff)));
		JB_FreeIfDead(JB_Msg_ReplaceInto(_tmPf1, test));
		JB_Decr(_tmPf1);
		JB_Decr(test);
		JB_SetRef(stuff, R);
		JB_Decr(R);
		JB_SetRef(subject, JB_Msg_NiceCopy(subject, nil));
	};
	JB_Decr(stuff);
	JB_Decr(subject);
}

void JB_Msg_BunchlessFix(Message* self) {
	Message* subject = JB_Incr(((Message*)JB_Ring_First(self)));
	Message* multi_opp = JB_Incr(JB_Msg_NextOf2(subject, nil, nil));
	if ((!multi_opp)) {
		JB_Decr(subject);
		JB_Decr(multi_opp);
		return;
	}
	Message* c = JB_Incr(((Message*)JB_Ring_NextSib(multi_opp)));
	if ((!c)) {
		JB_Decr(subject);
		JB_Decr(multi_opp);
		JB_Decr(c);
		return;
	}
	JB_Msg_BecomeMsg(self, c);
	JB_Decr(c);
	//using;
	MessagePosition _using188 = JB_Msg_SyntaxUsing(self);
	JB_Msg_BunchFixSub(multi_opp, subject, self);
	JB_Decr(multi_opp);
	JB_Decr(subject);
	JB_MsgPos_SyntaxUsingComplete((&_using188));
	JB_MsgPos_Destructor((&_using188));
}

bool JB_Msg_CanGetAddress(Message* self, SCBase* name_space, bool DoErr) {
	Message* curr = JB_Incr(JB_Msg_UnBra(self));
	JB_String* err = JB_Incr(JB_LUB[0]);
	if (JB_Msg_EqualsSyx(curr, JB_SyxAcc, false)) {
		Message* f = JB_Incr(((Message*)JB_Ring_First(curr)));
		SCDecl* T = JB_Incr(SC_TypeOfExpr(f, name_space, nil));
		JB_Decr(f);
		if ((!T)) {
			JB_Decr(curr);
			JB_Decr(err);
			JB_Decr(T);
			return nil;
		}
		if (SC_Decl_IsNumeric(T) > 1) {
			JB_SetRef(err, JB_LUB[1691]);
		}
		JB_Decr(T);
	}
	 else {
		SCDecl* T = JB_Incr(SC_TypeOfExpr(curr, name_space, nil));
		if ((!T)) {
			JB_Decr(curr);
			JB_Decr(err);
			JB_Decr(T);
			return nil;
		}
		if ((!((JB_Msg_EqualsSyx(curr, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(curr, JB_SyxDot, false))))) {
			JB_SetRef(err, JB_LUB[1692]);
		}
		 else if (SC_Decl_SyntaxIs(T, kSC__SCDeclInfo_const)) {
			JB_SetRef(err, JB_LUB[1693]);
		}
		JB_Decr(T);
	}
	if (DoErr and JB_Str_Exists(err)) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(curr, err);
		}
	}
	JB_Decr(curr);
	bool _tmPf0 = (!JB_Str_Exists(err));
	JB_Decr(err);
	return _tmPf0;
}

Message* JB_Msg_CastedParent(Message* self) {
	Message* rz = nil;
	rz = ((Message*)JB_Ring_Parent(JB_Msg_UnBra(self)));
	if (JB_Msg_EqualsSyx(rz, JB_SyxPrm, false)) {
		rz = ((Message*)JB_Ring_Parent(rz));
	}
	return rz;
}

int JB_Msg_CastToBool(Message* self, SCBase* name_space) {
	return JB_Msg_CastToType(self, JB_LUB[125], JB_TypeBool, name_space, kSC_LossyCastedMatch);
}

int JB_Msg_CastToClass(Message* self, SCClass* type, SCBase* name_space) {
	return JB_Msg_CastToType(self, type->Name, type, name_space, kSC_CastedMatch);
}

int JB_Msg_CastToType(Message* self, JB_String* TypeName, SCClass* type, SCBase* name_space, int loss) {
	if ((!self)) {
		return kSC_NeedsTypeCast | loss;
	}
	if (name_space) {
		JB_FreeIfDead(SC_TypeOfExpr(self, name_space, nil));
	}
	 else if ((bool)self->Obj) {
		SCDecl* FoundType = JB_Incr(SC_TypeOfExprMaybeNil(self, name_space));
		if (((bool)FoundType) and FoundType->Type->IsStruct) {
			if ((!FoundType->PointerCount)) {
				JB_Msg_SyntaxExpect(self, JB_LUB[1694]);
				JB_Decr(FoundType);
				return nil;
			}
		}
		JB_Decr(FoundType);
	}
	Message* cst = JB_Incr((JB_Syx_Msg(JB_SyxType, JB_LUB[1502])));
	JB_FreeIfDead(JB_Msg_ReplaceWith(self, cst));
	JB_Tree_SyntaxAppend(cst, self);
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxThg, TypeName));
	JB_Tree_SyntaxAppend(cst, (_tmPf0));
	JB_Decr(_tmPf0);
	JB_SetRef(cst->Obj, type->TypeNormal);
	JB_Decr(cst);
	return loss;
}

int JB_Msg_CastToVoidPtr(Message* self, SCBase* name_space) {
	SCClass* _tmPf0 = JB_Incr(SC_Comp__AccessStr(JB_LUB[139], nil));
	int _tmPf1 = JB_Msg_CastToType(self, JB_LUB[139], _tmPf0, name_space, kSC_CastedMatch);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

Message* JB_Msg_CausesUnReachable(Message* self, Message* arg, Message* Curr, Message* LastPlace) {
	JB_Incr(Curr);
	if ((!(Curr))) {
		JB_SetRef(Curr, ((Message*)JB_Ring_First(self)));
	}
	while (Curr) {
		if ((!(Curr != LastPlace))) {
			JB_Decr(Curr);
			return nil;
		}
		if (JB_Msg_EqualsSyx(Curr, JB_SyxTmp, false)) {
			JB_String* s = JB_Incr(Curr->Name);
			if (JB_Str_Equals(s, JB_LUB[602], false)) {
				JB_Decr(s);
				JB_SafeDecr(Curr);
				return Curr;
			}
			if ((JB_Str_Equals(s, JB_LUB[1082], false)) or (JB_Str_Equals(s, JB_LUB[1563], false))) {
				if (SC_Refs__ExitHitsOrGoesPast(Curr, arg)) {
					JB_Decr(s);
					JB_SafeDecr(Curr);
					return Curr;
				}
			}
			 else if (((JB_Str_Equals(s, JB_LUB[690], false))) and (self == arg)) {
				JB_Decr(s);
				JB_SafeDecr(Curr);
				return Curr;
			}
			JB_Decr(s);
		}
		JB_SetRef(Curr, ((Message*)JB_Ring_NextSib(Curr)));
	};
	JB_Decr(Curr);
	return nil;
}

void JB_Msg_Char__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '\'');
	JB_String* _tmPf0 = JB_Incr(JB_Str_EscapeChr(self->Name));
	JB_FS_AppendString(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(fs, '\'');
}

void JB_Msg_CheckSuperDotSave(Message* self, JB_String* name, bool ShouldBe) {
	bool Match = ((JB_Msg_OperatorIsDot(self, name)) and (({
		Message* _tmP283 = JB_Incr(((Message*)JB_Tree_Get(self, 0)));
		bool _tmP282 = JB_Msg_OperatorIsThing(_tmP283, JB_LUB[1214]);
		JB_Decr(_tmP283);
		 _tmP282;
	})));
	if ((!(Match == ShouldBe))) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[1695]);
		JB_FS_AppendString(_fsf0, name);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Msg_SyntaxWarn(self, _tmPf1);
		JB_Decr(_tmPf1);
	}
}

void JB_Msg_Clean(Message* self, bool erl) {
	int pos = JB__Tk_UsingPos;
	Message* IgnoreArg = nil;
	if (JB_FreeIfDead(JB_Class_Layer((JB_AsClass(Message)))) == JB_FreeIfDead(JB_Class_DefaultLayer((JB_AsClass(Message))))) {
		pos = -1;
	}
	{
		Message* curr = JB_Incr(self);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(self)));
		while (((bool)curr) and (curr != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)((Message*)JB_Ring_FlatNext0(curr))));
			if (pos >= 0) {
				curr->Position = pos;
			}
			Syntax f = curr->Func;
			if ((f != JB_SyxBack) and ((f != JB_SyxStr) and ((f != JB_SyxSStr) and (f != JB_SyxBin)))) {
				if (JB_Str_ContainsString(curr->Name, JB_LUB[1696])) {
					JB_Msg_SyntaxExpect(curr, JB_LUB[1697]);
					JB_Decr(IgnoreArg);
					JB_Decr(curr);
					JB_Decr(_afterf1);
					JB_Decr(_N_f2);
					return;
				}
			}
			if (f == JB_SyxArg) {
				JB_SetRef(curr->Name, JB_LUB[0]);
			}
			 else if ((f == JB_SyxBack) or ((f == JB_SyxSStr) or (f == JB_SyxBin))) {
				curr->Func = JB_SyxStr;
			}
			 else if (f == JB_SyxRel) {
				JB_Msg_RelFix(curr, false);
			}
			 else if (erl and (f == JB_SyxERel)) {
				JB_SetRef(curr->Name, JB_Str_LowerCase(curr->Name));
				JB_Msg_FixErl(curr);
			}
			 else if (f == JB_SyxARel) {
				if (JB_Msg_SyntaxEquals(curr, JB_LUB[1698], false)) {
					JB_Msg_Tran_QMark(curr);
					JB_SetRef(curr, ((Message*)JB_Ring_FlatNext0(curr)));
					JB_Decr(_N_f2);
					continue;
				}
			}
			 else if (f == JB_SyxDecl) {
				Message* l = JB_Incr(((Message*)JB_Ring_Last(curr)));
				if (JB_Msg_EqualsSyx(l, JB_SyxArg, false)) {
					Message* types = JB_Incr(((Message*)JB_Ring_First(curr)));
					Message* names = JB_Incr(((Message*)JB_Ring_NextSib(types)));
					if (((bool)types) and (((bool)names) and (JB_FreeIfDead(((Message*)JB_Ring_NextSib(names))) == l))) {
						JB_Msg_WithDeclTransform(l, curr, names, l);
					}
					JB_Decr(names);
					JB_Decr(types);
				}
				JB_Decr(l);
			}
			 else if ((f == JB_SyxOpp) or ((f == JB_SyxCnj) or (f == JB_SyxERel))) {
				if (JB_Msg_SyntaxEquals(curr, JB_LUB[1209], false)) {
					(JB_Msg_SyntaxDeprecate(curr, JB_LUB[1699]));
					JB_SetRef(curr->Name, JB_LUB[678]);
				}
				 else if (JB_Msg_SyntaxEquals(curr, JB_LUB[1700], false)) {
					(JB_Msg_SyntaxDeprecate(curr, JB_LUB[1701]));
					JB_SetRef(curr->Name, JB_LUB[1702]);
				}
				 else if ((JB_Msg_SyntaxEquals(curr, JB_LUB[1703], false)) or ((JB_Msg_SyntaxEquals(curr, JB_LUB[396], false)) and JB_Msg_OperatorIn(curr, JB_SyxArg))) {
					JB_Msg_BecomeAppend(curr, JB_LUB[870]);
				}
				 else if (JB_Msg_SyntaxEquals(curr, JB_LUB[1704], false)) {
					JB_Msg_BecomeAppend(curr, JB_LUB[1705]);
				}
				 else if (JB_Msg_OppExpand(curr)) {
					0;
				}
				 else if (JB_CS_HasChar(JB__Constants_CSWordStart, JB_Str_ByteValue(curr->Name, 0))) {
					JB_SetRef(curr->Name, JB_Str_LowerCase(curr->Name));
				}
			}
			 else if (f == JB_SyxTmp) {
				if (JB_FreeIfDead(((Message*)JB_Ring_Parent(curr))) != IgnoreArg) {
					JB_String* s = JB_Incr(JB_Str_LowerCase(curr->Name));
					JB_SetRef(curr->Name, s);
					if ((JB_Str_Equals(s, JB_LUB[689], false)) or ((JB_Str_Equals(s, JB_LUB[1075], false)) or (JB_Str_Equals(s, JB_LUB[1597], false)))) {
						JB_Msg_FixElseif(curr);
					}
					 else if (JB_Str_Equals(s, JB_LUB[335], false)) {
						JB_SetRef(curr, JB_Msg_tran_target(curr));
						JB_Decr(_N_f2);
						JB_Decr(s);
						continue;
					}
					 else if ((JB_Str_Equals(s, JB_LUB[898], false)) or (JB_Str_Equals(s, JB_LUB[899], false))) {
						JB_Msg_Tran_Isnt(curr, JB_LUB[331]);
					}
					 else if (JB_Str_Equals(s, JB_LUB[1706], false)) {
						Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(curr)));
						SC_Targets__SetMsg(_tmPf3);
						JB_Decr(_tmPf3);
					}
					 else if ((JB_Str_Equals(s, JB_LUB[876], false)) or (JB_Str_Equals(s, JB_LUB[1707], false))) {
						JB_SetRef(IgnoreArg, ((Message*)JB_Ring_Last(curr)));
					}
					 else if (JB_Str_Equals(s, JB_LUB[1708], false)) {
						JB_Msg_Tran_With(curr);
					}
					 else if (JB_Str_Equals(s, JB_LUB[1709], false)) {
						if (SC__Options_IsDirectTest) {
							JB_SetRef(curr->Name, JB_LUB[689]);
							//using;
							MessagePosition _using182 = JB_Msg_SyntaxUsing(curr);
							Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[107]));
							(JB_Ring_FirstSet(curr, (_tmPf4)));
							JB_Decr(_tmPf4);
							JB_MsgPos_SyntaxUsingComplete((&_using182));
							JB_MsgPos_Destructor((&_using182));
						}
						 else {
							JB_SetRef(curr->Name, JB_LUB[652]);
						}
					}
					JB_Decr(s);
				}
			}
			JB_SetRef(curr, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(_afterf1);
		JB_Decr(curr);
		(self);
	}
	;
	JB_Decr(IgnoreArg);
}

int JB_Msg_CleanIndent(Message* self) {
	return self->Indent & (~1);
}

Message* JB_Msg_CmdImprove(Message* self) {
	if ((!JB_Msg_EqualsSyx(self, JB_SyxRel, false))) {
		return self;
	}
	Message* ch = ((Message*)JB_Ring_First(self));
	if (JB_Msg_EqualsSyx(ch, JB_SyxFunc, false)) {
		return ch;
	}
	return self;
}

void JB_Msg_Cnj__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '#');
	JB_FS_AppendString(fs, self->Name);
}

JB_String* JB_Msg_CollectFuncTableName(Message* self) {
	if (JB_Str_Exists(self->Name) and (!JB_Msg_EqualsSyx(self, JB_SyxDot, false))) {
		return self->Name;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_String* _tmPf1 = JB_Incr(_tmPf0->Name);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Msg_CollectionPlace(Message* self) {
	Message* msg = JB_Incr(self);
	while (msg) {
		Message* p = JB_Incr(((Message*)JB_Ring_Parent(msg)));
		if (JB_Msg_EqualsSyx(msg, JB_SyxArg, false)) {
			if ((!p)) {
				JB_Decr(p);
				JB_SafeDecr(msg);
				return msg;
			}
			if (JB_Msg_OperatorIsTmp(p, JB_LUB[794]) or JB_Msg_OperatorIsTmp(p, JB_LUB[617])) {
				JB_Decr(p);
				JB_SafeDecr(msg);
				return msg;
			}
		}
		JB_SetRef(msg, p);
		JB_Decr(p);
	};
	JB_Decr(msg);
	return nil;
}

Message* JB_Msg_ConfArg(Message* self) {
	if ((JB_Msg_EqualsSyx(self, JB_SyxArg, false)) or (self == nil)) {
		return self;
	}
	Message* w = ((Message*)JB_Ternary((JB_Msg_EqualsSyx(self, JB_SyxTmp, false)), ((Message*)JB_Ring_Last(self)), ((Message*)JB_Ring_NextSib(self))));
	if (JB_Msg_EqualsSyx(w, JB_SyxArg, false)) {
		return w;
	}
	return nil;
}

Message* JB_Msg_ConstantExpandSub(Message* self) {
	Message* rz = nil;
	//using;
	MessagePosition _using169 = JB_Msg_SyntaxUsing(self);
	{
		Message* item = JB_Incr(((Message*)JB_Tree_First_(self)));
		while (item) {
			Message* _Nf1 = JB_Incr(((Message*)((Message*)JB_Ring_NextSib(item))));
			if (rz) {
				Message* _tmPf2 = JB_Incr(JB_Msg_NiceCopy(item, nil));
				JB_SetRef(rz, SC_NewRel(rz, JB_LUB[626], _tmPf2));
				JB_Decr(_tmPf2);
			}
			 else {
				JB_SetRef(rz, JB_Msg_NiceCopy(item, nil));
			}
			JB_SetRef(item, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(item);
		(self);
	}
	;
	JB_MsgPos_SyntaxUsingComplete((&_using169));
	JB_SafeDecr(rz);
	JB_MsgPos_Destructor((&_using169));
	return rz;
}

bool JB_Msg_ConstIntValue(Message* self, SCBase* name_space, int64* v) {
	if (JB_Msg_ConstIntValueSub(self, name_space, v)) {
		return true;
	}
	SCDecl* t = SC_TypeOfExpr(self, name_space, nil);
	if (t) {
		Message* d = t->Default;
		if (d) {
			return JB_Msg_ConstIntValueSub(d, name_space, v);
		}
	}
	return false;
}

bool JB_Msg_ConstIntValueSub(Message* self, SCBase* name_space, int64* v) {
	Message* s = self;
	while (JB_Msg_EqualsSyx(s, JB_SyxBra, false)) {
		s = ((Message*)JB_Ring_First(s));
	};
	if (JB_Msg_EqualsSyx(s, JB_SyxNum, false)) {
		(*v) = JB_Msg_Int(s, 0);
		return true;
	}
	if (((bool)JB_SyxThg) and JB_Str_MidEquals(s->Name, 0, JB_LUB[817], false)) {
		SyntaxObj* find = ((SyntaxObj*)JB_Dict_ValueLower(JB__SyxDict_, JB_Str_Range(s->Name, (3), JB_int__max())));
		if (find) {
			(*v) = ((int64)find->ID);
			JB_Msg_BecomeStr(s, JB_SyxNum, JB_int64_Render(((*v)), nil));
			return true;
		}
	}
	return false;
}

void JB_Msg_ConstructorBasic(Message* self) {
	JB_Ring_Constructor0(self);
	JB_String* _tmPf0 = JB_LUB[0];
	self->Name = JB_Incr(_tmPf0);
	self->Obj = nil;
	self->Indent = 0;
	self->Extra = 0;
	self->Position = JB__Tk_UsingPos;
	self->Func = JB_SyxArg;
	self->Flags = JB__Tk_InsertedFlags;
}

void JB_Msg_ConstructorCopy(Message* self, Message* other) {
	JB_Ring_Constructor0(self);
	self->Position = other->Position;
	if ((!JB_Ind_SyntaxCast(self->Position))) {
		self->Position = JB__Tk_UsingPos;
	}
	self->Func = other->Func;
	self->Flags = (other->Flags | JB__Tk_InsertedFlags);
	JB_String* _tmPf0 = other->Name;
	self->Name = JB_Incr(_tmPf0);
	JB_Object* _tmPf1 = other->Obj;
	self->Obj = JB_Incr(_tmPf1);
	self->Indent = other->Indent;
	self->Extra = other->Extra;
}

void JB_Msg_ConstructorNormal(Message* self, Syntax Func, JB_String* Name) {
	JB_Ring_Constructor0(self);
	self->Obj = nil;
	self->Indent = 0;
	self->Position = JB__Tk_UsingPos;
	self->Func = Func;
	self->Flags = JB__Tk_InsertedFlags;
	self->Extra = JB_Ternary(self->Position < 0, JB_Str_Length(Name), ((int)JB__Tk_UsingExtra));
	self->Name = JB_Incr(Name);
}

void JB_Msg_ConstructorRange(Message* self, Message* Parent, Syntax Func, int BytePos, JB_String* name, int Extra) {
	JB_Ring_Constructor(self, Parent);
	self->Obj = nil;
	self->Indent = 0;
	self->Position = BytePos;
	self->Flags = JB__Tk_InsertedFlags;
	self->Func = Func;
	self->Extra = (Extra | JB__Tk_BaseExtra);
	self->Name = JB_Incr(name);
}

Message* JB_Msg_NiceCopy(Message* self, Message* L) {
	if (self) {
		if ((!L)) {
			return JB_Msg_Copy_(self, nil, JB_ObjLayer(self));
		}
		return JB_Msg_Copy_(self, L, JB_ObjLayer(L));
	}
	return nil;
}

Message* JB_Msg_Copy_(Message* self, Message* pos_msg, JB_MemoryLayer* L) {
	Message* rz = nil;
	rz = JB_Msg__NewWithLayerCopy(L, self);
	if (pos_msg) {
		rz->Position = pos_msg->Position;
	}
	{
		Message* v = ((Message*)JB_Tree_First_(self));
		while (v) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(v)));
			JB_Tree_SyntaxAppend(rz, JB_Msg_Copy_(v, pos_msg, L));
			v = _Nf1;
		};
		(self);
	}
	;
	return rz;
}

void JB_Msg_CopyAllAfter(Message* self, Message* after, Message* copylayer) {
	JB_Incr(after);
	Message* curr = JB_Incr(((Message*)JB_Ring_NextSib(self)));
	while (curr) {
		Message* cpy = JB_Incr(JB_Msg_LayerWipeCopy(curr, copylayer));
		(JB_Ring_NextSibSet(after, cpy));
		JB_SetRef(after, cpy);
		JB_Decr(cpy);
		JB_SetRef(curr, ((Message*)JB_Ring_NextSib(curr)));
	};
	JB_Decr(curr);
	JB_Decr(after);
}

void JB_Msg_CopyAllAfterBefore(Message* self, Message* Before, Message* copylayer) {
	Message* exp = JB_Incr(((Message*)JB_Ring_NextSib(self)));
	while (exp) {
		Message* _tmPf0 = JB_Incr(JB_Msg_LayerWipeCopy(exp, copylayer));
		(JB_Ring_PrevSibSet(Before, _tmPf0));
		JB_Decr(_tmPf0);
		JB_SetRef(exp, ((Message*)JB_Ring_NextSib(exp)));
	};
	JB_Decr(exp);
}

void JB_Msg_CopyAllAfterInto(Message* self, Message* into, Message* copylayer) {
	Message* curr = JB_Incr(((Message*)JB_Ring_NextSib(self)));
	while (curr) {
		Message* _tmPf0 = JB_Incr(JB_Msg_NiceCopy(curr, copylayer));
		JB_Tree_SyntaxAppend(into, _tmPf0);
		JB_Decr(_tmPf0);
		JB_SetRef(curr, ((Message*)JB_Ring_NextSib(curr)));
	};
	JB_Decr(curr);
}

void JB_Msg_CopyAllBefore(Message* self, Message* Before, Message* copylayer) {
	JB_Incr(Before);
	Message* curr = JB_Incr(((Message*)JB_Ring_PrevSib(self)));
	while (curr) {
		Message* cpy = JB_Incr(JB_Msg_NiceCopy(curr, copylayer));
		(JB_Ring_PrevSibSet(Before, cpy));
		JB_SetRef(Before, cpy);
		JB_Decr(cpy);
		JB_SetRef(curr, ((Message*)JB_Ring_PrevSib(curr)));
	};
	JB_Decr(curr);
	JB_Decr(Before);
}

void JB_Msg_CopyAllBeforeInto(Message* self, Message* into, Message* copylayer) {
	Message* curr = JB_Incr(((Message*)JB_Ring_PrevSib(self)));
	while (curr) {
		Message* _tmPf0 = JB_Incr(JB_Msg_NiceCopy(curr, copylayer));
		(JB_Ring_FirstSet(into, _tmPf0));
		JB_Decr(_tmPf0);
		JB_SetRef(curr, ((Message*)JB_Ring_PrevSib(curr)));
	};
	JB_Decr(curr);
}

void JB_Msg_CopyAllInto(Message* self, Message* j, bool wipe) {
	{
		Message* c = JB_Incr(((Message*)JB_Tree_First_(self)));
		while (c) {
			Message* _Nf1 = JB_Incr(((Message*)((Message*)JB_Ring_NextSib(c))));
			Message* _tmPf2 = JB_Incr(JB_Msg_NiceCopy(c, j));
			JB_Tree_SyntaxAppend(j, _tmPf2);
			JB_Decr(_tmPf2);
			JB_SetRef(c, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(c);
		(self);
	};
}

JB_String* JB_Msg_copyid(Message* self) {
	return nil;
}

JB_String* JB_Msg_cpp_wrapper(Message* self) {
	if (self) {
		if (JB_Msg_EqualsSyx(self, JB_SyxBra, false)) {
			return ((Message*)JB_Ring_First(self))->Name;
		}
		return self->Name;
	}
	return nil;
}

Message* JB_Msg_createnil(Message* self) {
	Message* rz = nil;
	//using;
	MessagePosition _using171 = JB_Msg_SyntaxUsing(self);
	JB_SetRef(rz, (JB_Syx_Msg(JB_SyxThg, JB_LUB[106])));
	JB_SetRef(rz->Obj, JB_TypeNil);
	JB_MsgPos_SyntaxUsingComplete((&_using171));
	JB_SafeDecr(rz);
	JB_MsgPos_Destructor((&_using171));
	return rz;
}

Message* JB_Msg_CreateOwnBlock(Message* self, bool ForSelf) {
	//using;
	MessagePosition _using181 = JB_Msg_SyntaxUsing(self);
	Message* NewArg = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
	Message* bra = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
	JB_Tree_SyntaxAppend(bra, NewArg);
	JB_SetRef(bra->Obj, self->Obj);
	JB_FreeIfDead(JB_Msg_ReplaceWith(self, bra));
	JB_Decr(bra);
	SCArg* NewObj = JB_Incr(JB_Msg_SCArg(NewArg, nil, nil));
	if (ForSelf) {
		JB_SetRef(NewObj->TmpMovedOutFor, self);
		NewObj->IsStatementExpr = true;
	}
	JB_Decr(NewObj);
	JB_MsgPos_SyntaxUsingComplete((&_using181));
	JB_MsgPos_Destructor((&_using181));
	JB_SafeDecr(NewArg);
	return NewArg;
}

Message* JB_Msg_CutifyCopy(Message* self) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Msg__NewCopy(self));
	{
		Message* v = JB_Incr(((Message*)JB_Tree_First_(self)));
		while (v) {
			Message* _Nf1 = JB_Incr(((Message*)((Message*)JB_Ring_NextSib(v))));
			if (JB_Msg_EqualsSyx(v, JB_SyxArg, false)) {
				0;
			}
			 else if (JB_Msg_IsReffer(v)) {
				Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_Last(v)));
				Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Last(_tmPf4)));
				JB_Decr(_tmPf4);
				Message* _tmPf2 = JB_Incr(JB_Msg_CutifyCopy(_tmPf3));
				JB_Decr(_tmPf3);
				JB_Tree_SyntaxAppend(rz, _tmPf2);
				JB_Decr(_tmPf2);
			}
			 else {
				Message* _tmPf5 = JB_Incr(JB_Msg_CutifyCopy(v));
				JB_Tree_SyntaxAppend(rz, _tmPf5);
				JB_Decr(_tmPf5);
			}
			JB_SetRef(v, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(v);
		(self);
	}
	;
	SCFunction* fn = JB_Incr(JB_Msg_MsgFunc(rz));
	if (fn) {
		SCClass* cls = JB_Incr(fn->Cls);
		JB_String* modname = JB_Incr(JB_LUB[0]);
		SCBase* space = JB_Incr(fn->Lookup);
		if (JB_Object_FastIsa(space, JB_AsClass(SCModule))) {
			JB_SetRef(modname, ((SCModule*)space)->Name);
		}
		if (((bool)cls) or JB_Str_Exists(modname)) {
			Message* name = JB_Incr(((Message*)JB_Ring_First(rz)));
			if (JB_Msg_EqualsSyx(name, JB_SyxThg, false)) {
				Message* prm = JB_Incr(((Message*)JB_Ring_NextSib(name)));
				JB_Msg_BecomeStr(rz, JB_SyxDot, fn->Name);
				if (cls) {
					Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_First(prm)));
					(JB_Ring_FirstSet(rz, _tmPf6));
					JB_Decr(_tmPf6);
				}
				 else if (space != SC__Comp_program) {
					Message* mod = JB_Incr(JB_Syx_Msg(JB_SyxThg, modname));
					JB_SetRef(mod->Obj, space);
					(JB_Ring_FirstSet(rz, mod));
					JB_Decr(mod);
				}
				if ((!JB_Ring_HasChildren(prm))) {
					prm->Func = JB_SyxEmb;
				}
				JB_Decr(prm);
				JB_Tree_Remove(name);
			}
			JB_Decr(name);
		}
		JB_Decr(space);
		JB_Decr(modname);
		JB_Decr(cls);
	}
	JB_Decr(fn);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Msg_DclExp(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxDecl, false)) {
		return ((Message*)JB_Tree_Get(self, 1));
	}
	return self;
}

void JB_Msg_Decl__(Message* self, FastString* fs) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	JB_FS_AppendByte(fs, '|');
	JB_FS_SyntaxAppend(fs, ch);
	JB_FS_AppendByte(fs, '|');
	JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
	while (ch) {
		JB_FS_AppendByte(fs, ' ');
		JB_FS_SyntaxAppend(fs, ch);
		JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
	};
	JB_Decr(ch);
}

Message* JB_Msg_DeclName(Message* self) {
	Message* dcl = JB_Incr(JB_Msg_DclExp(self));
	if (JB_Msg_EqualsSyx(dcl, JB_SyxRel, false)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(dcl)));
		JB_Decr(dcl);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	if (JB_Msg_EqualsSyx(dcl, JB_SyxThg, false)) {
		JB_SafeDecr(dcl);
		return dcl;
	}
	if (JB_Msg_EqualsSyx(dcl, JB_SyxEmb, false)) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(dcl);
		return nil;
	}
	JB_Decr(dcl);
	return nil;
}

bool JB_Msg_DeepEquals(Message* self, Message* B, bool Aware) {
	Message* A = self;
	Message* A2 = ((Message*)JB_Ring_FlatAfter(self));
	Message* B2 = ((Message*)JB_Ring_FlatAfter(B));
	while (true) {
		bool ADone = A == A2;
		bool BDone = B == B2;
		if (ADone and BDone) {
			return true;
		}
		if ((ADone != BDone) or ((!JB_Msg_ShallowEquals(A, B, Aware)))) {
			return false;
		}
		A = ((Message*)JB_Ring_FlatNext0(A));
		B = ((Message*)JB_Ring_FlatNext0(B));
	};
	return false;
}

Message* JB_Msg_Deepest(Message* self, Syntax Tmp, JB_String* name) {
	{
		Message* ch = ((Message*)JB_Tree_First_(self));
		while (ch) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(ch)));
			Message* best = JB_Msg_Deepest(ch, Tmp, name);
			if (best) {
				return best;
			}
			ch = _Nf1;
		};
		(self);
	}
	;
	if ((JB_Msg_EqualsSyx(self, JB_SyxTmp, false)) and (JB_Msg_SyntaxEquals(self, name, false))) {
		return self;
	}
	return nil;
}

void JB_Msg_destructor(Message* self) {
	JB_Decr(self->Name);
	JB_Decr(self->Obj);
	JB_Ring_Destructor(self);
}

bool JB_Msg_DoesAnything(Message* self) {
	if ((!self)) {
		return nil;
	}
	if ((!((!JB_Msg_EqualsSyx(self, JB_SyxThg, false)) and ((!JB_Msg_EqualsSyx(self, JB_SyxNum, false)) and ((!JB_Msg_EqualsSyx(self, JB_SyxStr, false)) and (!JB_Msg_EqualsSyx(self, JB_SyxChar, false))))))) {
		return nil;
	}
	return true;
}

void JB_Msg_Dot__(Message* self, FastString* fs) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	JB_FS_SyntaxAppend(fs, ch);
	JB_FS_AppendByte(fs, '.');
	JB_FS_AppendString(fs, self->Name);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	JB_Decr(ch);
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
}

int JB_Msg_DotType(Message* self) {
	if (JB_Msg_OperatorIsBRel(self, JB_LUB[880])) {
		return kSC_IsMemory;
	}
	if (JB_Msg_EqualsSyx(self, JB_SyxAcc, false)) {
		return kSC_IsMemory;
	}
	if (JB_Msg_EqualsSyx(self, JB_SyxDot, false)) {
		if ((!(JB_Object_Isa(self->Obj, JB_AsClass(SCDecl)))) or ((!((Message*)JB_Ring_Last(self))->Obj))) {
			return kSC_IsProperty;
		}
	}
	return 0;
}

void JB_Msg_Dummy(Message* self, FastString* fs) {
}

void JB_Msg_Emb__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
	if ((!JB_Ring_HasChildren(self))) {
		return;
	}
	JB_Msg_RenderWithSpaces(self, fs, nil);
}

void JB_Msg_ERel__(Message* self, FastString* fs) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	JB_FS_SyntaxAppend(fs, ch);
	JB_FS_AppendByte(fs, ' ');
	JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	JB_FS_SyntaxAppend(fs, ch);
	JB_FS_AppendString(fs, JB_LUB[1710]);
	JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	JB_FS_SyntaxAppend(fs, ch);
	JB_Decr(ch);
}

bool JB_Msg_Expect(Message* self, Syntax type, JB_String* name) {
	if ((!self)) {
		return nil;
	}
	if ((!type) or (self->Func == type)) {
		if ((name == nil) or ((JB_Str_Equals(self->Name, name, true)))) {
			return true;
		}
	}
	FastString* fs = JB_Incr(JB_FS__New());
	JB_FS_AppendString(fs, JB_LUB[551]);
	if (type) {
		JB_String* _tmPf0 = JB_Incr(JB_Syx_LongName(type));
		JB_FS_AppendString(fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_FS_MsgErrorName(fs, name);
	JB_FS_AppendString(fs, JB_LUB[1711]);
	JB_String* _tmPf1 = JB_Incr(JB_Syx_LongName(self->Func));
	JB_FS_AppendString(fs, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_MsgErrorName(fs, self->Name);
	if ((!false)) {
		JB_String* _tmPf2 = JB_Incr(JB_FS_SyntaxCast(fs));
		JB_Msg_SyntaxExpect(self, _tmPf2);
		JB_Decr(_tmPf2);
	}
	JB_Decr(fs);
	return false;
}

bool JB_Msg_ExpectClass(Message* self, SCDecl* slf, SCClass* Cls) {
	return ((bool)JB_FreeIfDead(SC_Decl_ExpectMatch(slf, Cls->TypeNormal, 0, self, self)));
}

bool JB_Msg_ExpectInt(Message* self, SCDecl* type) {
	if ((!JB_TC_IsInt(type->Type->TypeInfo))) {
		JB_Msg_SyntaxExpect(self, JB_LUB[1712]);
		return nil;
	}
	return true;
}

bool JB_Msg_ExpectLast(Message* self, JB_String* err) {
	if ((!self)) {
		return nil;
	}
	Message* N = JB_Incr(((Message*)JB_Ring_NextSib(self)));
	if ((!(N))) {
		JB_Decr(N);
		return true;
	}
	JB_Msg_SyntaxExpect(N, err);
	JB_Decr(N);
	return false;
}

bool JB_Msg_expectmatch(Message* self, SCBase* name_space, SCClass* With) {
	SCDecl* _tmPf0 = JB_Incr(SC_TypeOfExprNeeded(self, name_space));
	bool _tmPf1 = JB_Msg_ExpectClass(self, _tmPf0, With);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

Message* JB_Msg_ExpectParamsTransform(Message* self, int P, Message* errnode, JB_String* Type) {
	JB_Incr(Type);
	//using;
	MessagePosition _using177 = JB_Msg_SyntaxUsing(errnode);
	Message* L = JB_Incr(self);
	Message* On = JB_Incr(L);
	if ((!JB_Str_Equals(Type, JB_LUB[339], false))) {
		JB_SetRef(Type, JB_LUB[1559]);
	}
	if ((!L)) {
		JB_SetRef(On, (JB_Syx_Msg(JB_SyxThg, JB_LUB[106])));
	}
	 else if ((JB_Msg_EqualsSyx(L, JB_SyxList, false)) or ((JB_Msg_EqualsSyx(L, JB_SyxBra, false)) or (JB_Msg_EqualsSyx(L, JB_SyxPrm, false)))) {
		L->Func = JB_SyxPrm;
		JB_SetRef(On, ((Message*)JB_Ring_First(L)));
	}
	 else {
		JB_SetRef(L, nil);
	}
	Message* l2 = JB_Incr(L);
	if ((!JB_Msg_EqualsSyx(L, JB_SyxPrm, false))) {
		JB_SetRef(l2, ({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf0, L);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[138], Type));
	JB_Decr(Type);
	Message* tmp = JB_Incr((JB_Syx_Msg(JB_SyxDot, (_tmPf1))));
	JB_Decr(_tmPf1);
	JB_Tree_SyntaxAppend(tmp, On);
	JB_Decr(On);
	JB_Tree_SyntaxAppend(tmp, l2);
	JB_Decr(l2);
	JB_SetRef(L, tmp);
	JB_Decr(tmp);
	L->Position = P;
	JB_MsgPos_SyntaxUsingComplete((&_using177));
	JB_MsgPos_Destructor((&_using177));
	JB_SafeDecr(L);
	return L;
}

SCFunction* JB_Msg_expfunc(Message* self) {
	Message* it = ((Message*)JB_Ring_Last(JB_Msg_UnBra(self)));
	if (it) {
		JB_Object* fn = it->Obj;
		if (JB_Object_FastIsa(fn, JB_AsClass(SCFunction))) {
			return ((SCFunction*)fn);
		}
	}
	return nil;
}

void JB_Msg_Export(Message* self, FastString* fs) {
	fpMsgRender fn = (JB_Syx_ExportAddr(self->Func));
	(fn)(self, fs);
}

Message* JB_Msg_FailOrCopy(Message* self, Message* p) {
	if (JB_Msg_EqualsSyx(self, JB_SyxThg, false)) {
		return JB_Msg_NiceCopy(self, nil);
	}
	if ((!false)) {
		JB_Msg_SyntaxExpect(p, JB_LUB[1713]);
	}
	return nil;
}

void JB_Msg_File__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
	self->Indent++;
	{
		Message* ch = ((Message*)JB_Tree_First_(self));
		while (ch) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(ch)));
			JB_FS_AppendIndent(fs);
			JB_FS_SyntaxAppend(fs, ch);
			ch = _Nf1;
		};
		(self);
	}
	;
	self->Indent--;
}

JB_String* JB_Msg_FileLocation(Message* self) {
	SCFile* _tmPf0 = JB_Msg_SCFile(self);
	if ((!JB_File_SyntaxCast(_tmPf0))) {
		return nil;
	}
	return JB_File_Path(_tmPf0);
}

JB_String* JB_Msg_FilePath(Message* self) {
	JB_MemoryLayer* L = JB_Msg_OriginalParseLayer(self);
	if ((!L)) {
		return nil;
	}
	JB_Object* O = L->Obj;
	if (JB_Object_Isa(O, JB_AsClass(JB_String))) {
		return ((JB_String*)O);
	}
	if ((!false) and (JB_Object_Isa(O, JB_AsClass(JB_File)))) {
		return JB_File_Path(((JB_File*)O));
	}
	return JB_LUB[0];
}

Message* JB_Msg_FindSyx(Message* self, Syntax s) {
	{
		Message* ch = ((Message*)JB_Tree_First_(self));
		while (ch) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(ch)));
			if (JB_Msg_EqualsSyx(ch, s, false)) {
				return ch;
			}
			ch = _Nf1;
		};
		(self);
	}
	;
	return nil;
}

Message* JB_Msg_FindSyxName(Message* self, Syntax s, JB_String* name) {
	return JB_Msg_FindFlat(self, s, name, false);
}

Message* JB_Msg_FindName(Message* self, JB_String* name) {
	{
		Message* ch = ((Message*)JB_Tree_First_(self));
		while (ch) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(ch)));
			if (JB_Msg_SyntaxEquals(ch, name, true)) {
				return ch;
			}
			ch = _Nf1;
		};
		(self);
	}
	;
	return nil;
}

Array* JB_Msg_FindAllDclNames(Message* self) {
	Array* rz = JB_Incr(((Array*)JB_Array__New0()));
	{
		Array* _LoopSrcf1 = JB_Incr(JB_Msg_FindAllDcls(self));
		int _if0 = 0;
		while (_if0 < JB_Array_Size(_LoopSrcf1)) {
			Message* dcl = JB_Incr(((Message*)JB_Array_Value(_LoopSrcf1, _if0)));
			Message* n = JB_Incr(JB_Msg_GetDclName(dcl));
			JB_Decr(dcl);
			if (n) {
				JB_Array_SyntaxAppend(rz, n);
			}
			JB_Decr(n);
			_if0++;
		};
		JB_Decr(_LoopSrcf1);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

Array* JB_Msg_FindAllDcls(Message* self) {
	return SC_FindAllSyx(self, JB_SyxDecl);
}

JB_String* JB_Msg_FindAndRemove(Message* self, JB_String* name, bool NothingOK, bool IsClass) {
	Message* _tmPf0 = JB_Incr(JB_Msg_FindAndRemoveSub(self, name, NothingOK, IsClass));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_String* _tmPf1 = JB_Incr(_tmPf0->Name);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Msg_FindAndRemove2(Message* self, Message* place, bool NothingOK, bool IsClass) {
	JB_Tree_Remove(place);
	Message* ch = JB_Incr(((Message*)JB_Ring_First(place)));
	if (NothingOK and (!ch)) {
		JB_SetRef(place->Name, JB_LUB[0]);
		JB_Decr(ch);
		return place;
	}
	if ((JB_Msg_EqualsSyx(ch, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(ch, JB_SyxBra, false))) {
		if (IsClass) {
			Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(self)));
			if ((!(JB_Msg_OperatorIsTmp(_tmPf0, JB_LUB[820])))) {
				JB_Msg_SyntaxExpect(ch, JB_LUB[1714]);
				JB_Decr(ch);
				JB_Decr(_tmPf0);
				return nil;
			}
			JB_Decr(_tmPf0);
		}
		JB_SafeDecr(ch);
		return ch;
	}
	JB_Decr(ch);
	JB_FreeIfDead(JB_Msg_NeedSyx(place, JB_SyxThg));
	return nil;
}

Message* JB_Msg_FindAndRemoveSub(Message* self, JB_String* name, bool NothingOK, bool IsClass) {
	Message* place = JB_Incr(JB_Msg_FindFlat(self, JB_SyxTmp, name, false));
	if (place) {
		Message* _tmPf0 = JB_Incr(JB_Msg_FindAndRemove2(self, place, NothingOK, IsClass));
		JB_Decr(place);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(place);
	return nil;
}

int JB_Msg_FindClassOption(Message* self, JB_String* name, JB_String* Kind) {
	Message* place = JB_Incr(JB_Msg_FindFlat(self, JB_SyxTmp, name, false));
	if ((!place)) {
		JB_Decr(place);
		return nil;
	}
	int num = 1;
	if (Kind != nil) {
		Message* ch = JB_Incr(((Message*)JB_Ring_First(place)));
		if ((!(((bool)ch) and JB_Msg_Expect(ch, JB_SyxThg, nil)))) {
			JB_Decr(place);
			JB_Decr(ch);
			return nil;
		}
		if ((!(JB_Msg_SyntaxEquals(ch, Kind, true)))) {
			JB_Decr(place);
			JB_Decr(ch);
			return nil;
		}
		Message* num_msg = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
		JB_Decr(ch);
		if (num_msg) {
			JB_Msg_Expect(num_msg, JB_SyxNum, nil);
			num = JB_Msg_Int(num_msg, 0);
		}
		JB_Decr(num_msg);
	}
	JB_Tree_Remove(place);
	JB_Decr(place);
	return num;
}

Message* JB_Msg_FindDestructor(Message* self) {
	{
		Message* c = ((Message*)JB_Tree_First_(self));
		while (c) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(c)));
			if (JB_Msg_EqualsSyx(c, JB_SyxFunc, false)) {
				JB_Object* fn = ((Message*)JB_Ring_Last(c))->Obj;
				if (JB_Object_FastIsa(fn, JB_AsClass(SCFunction))) {
					if (SC_Func_OperatorIsa(((SCFunction*)fn), kSC_IsDestructor)) {
						return c;
					}
				}
			}
			c = _Nf1;
		};
		(self);
	}
	;
	return nil;
}

Message* JB_Msg_FindFlat(Message* self, Syntax s, JB_String* name, bool Err) {
	{
		Message* ch = ((Message*)JB_Tree_First_(self));
		while (ch) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(ch)));
			if ((JB_Msg_EqualsSyx(ch, s, false)) and (JB_Msg_SyntaxEquals(ch, name, true))) {
				return ch;
			}
			ch = _Nf1;
		};
		(self);
	}
	;
	if (Err) {
		JB_Msg_CantFind(self, s, name, nil);
	}
	return nil;
}

Message* JB_Msg_FindNested(Message* self, Syntax fn, JB_String* name, bool Err) {
	{
		Message* curr = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)curr) and (curr != _afterf1)) {
			Message* _N_f2 = ((Message*)((Message*)JB_Ring_FlatNext0(curr)));
			if ((JB_Msg_EqualsSyx(curr, fn, false)) or (fn == nil)) {
				if ((name == nil) or (JB_Msg_SyntaxEquals(curr, name, true))) {
					return curr;
				}
			}
			curr = _N_f2;
		};
		(self);
	}
	;
	if (Err) {
		JB_Msg_CantFind(self, fn, name, nil);
	}
	return nil;
}

Message* JB_Msg_FindOwningLoop(Message* self, Message* top) {
	{
		Message* P = JB_Incr(self);
		while (P) {
			if ((!(((bool)P) and (P != top)))) {
				JB_Decr(P);
				return nil;
			}
			if (((JB_Msg_EqualsSyx(P, JB_SyxTmp, false))) and ((JB_Msg_SyntaxEquals(P, JB_LUB[597], false)) or (JB_Msg_SyntaxEquals(P, JB_LUB[1594], false)))) {
				JB_SafeDecr(P);
				return P;
			}
			JB_SetRef(P, ((Message*)JB_Ring_Parent(P)));
		};
		JB_Decr(P);
		(self);
	}
	;
	return nil;
}

Message* JB_Msg_FindPos(Message* self, int fr, int len) {
	Message* rz = nil;
	{
		Message* ch = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)ch) and (ch != _afterf1)) {
			Message* _N_f2 = ((Message*)((Message*)JB_Ring_FlatNext0(ch)));
			if ((ch->Position == fr) and (ch->Extra == len)) {
				if (JB_Msg_SyntaxIsnt(ch, kJB__MsgUIFlags_Inserted)) {
					return JB_Msg_UnBra(ch);
				}
				rz = ch;
			}
			ch = _N_f2;
		};
		(self);
	}
	;
	return rz;
}

Message* JB_Msg_FindRef(Message* self, SCFunction* fn, JB_String* name) {
	{
		Message* curr = self;
		while (curr) {
			if (JB_Msg_EqualsSyx(curr, JB_SyxFunc, false)) {
				Message* prms = ((Message*)JB_Ring_Last(curr));
				if ((prms->Obj == fn) and (JB_Msg_OperatorIsThing(((Message*)JB_Ring_First(prms)), name))) {
					return curr;
				}
			}
			curr = ((Message*)JB_Ring_NextSib(curr));
		};
		(self);
	}
	;
	return nil;
}

Message* JB_Msg_FindShader(Message* self, JB_String* TypeName) {
	Message* U = JB_Incr(JB_Msg_FindFlat(self, JB_SyxTmp, JB_LUB[729], false));
	if ((!U)) {
		JB_Decr(U);
		return nil;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Tree_Get(U, 0)));
	Message* C = JB_Incr(JB_Msg_ModelType(_tmPf0));
	JB_Decr(_tmPf0);
	if ((!C)) {
		JB_Decr(U);
		JB_Decr(C);
		return nil;
	}
	JB_String* N = JB_Incr(JB_Str_LowerCase(C->Name));
	if (JB_Str_Last(N, 0) == 's') {
		JB_SetRef(N, JB_Str_Range(N, 0, JB_Str_Length(N) - 1));
	}
	JB_String* F = JB_Incr(((JB_String*)JB_Dict_ValueStr(SC__SCGame3D_Types, N)));
	JB_Decr(N);
	if ((!(JB_Str_Exists(F)))) {
		JB_Msg_SyntaxExpect(U, JB_LUB[1715]);
		JB_Decr(U);
		JB_Decr(C);
		JB_Decr(F);
		return nil;
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(TypeName, JB_LUB[1716]));
	if ((!SC_SCGame3D__NeedShader(_tmPf1))) {
		JB_Decr(U);
		JB_Decr(C);
		JB_Decr(F);
		JB_Decr(_tmPf1);
		return nil;
	}
	JB_Decr(_tmPf1);
	if (JB_Str_Length(F) >= 2) {
		JB_SetRef(F, JB_Str_Range(F, 0, 1));
	}
	 else {
		JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(TypeName, JB_LUB[1717]));
		if ((!SC_SCGame3D__NeedShader(_tmPf2))) {
			JB_Decr(U);
			JB_Decr(C);
			JB_Decr(F);
			JB_Decr(_tmPf2);
			return nil;
		}
		JB_Decr(_tmPf2);
	}
	JB_SetRef(C->Name, F);
	JB_Decr(F);
	JB_SetRef(C, ((Message*)JB_Tree_Get(U, 0)));
	JB_Tree_Remove(U);
	JB_Decr(U);
	JB_SafeDecr(C);
	return C;
}

void JB_Msg_FixElseif(Message* self) {
	Message* curr = JB_Incr(((Message*)JB_Ring_NextSib(self)));
	Message* f = JB_Incr(((Message*)JB_Ring_First(self)));
	bool needarg = ((bool)f) and ((!({
		Message* _tmP291 = JB_Incr(((Message*)JB_Ring_NextSib(f)));
		bool _tmP290 = JB_Msg_EqualsSyx(_tmP291, JB_SyxArg, false);
		JB_Decr(_tmP291);
		 _tmP290;
	})));
	JB_Decr(f);
	while (JB_Msg_OperatorIsTmp(curr, JB_LUB[1076]) or JB_Msg_OperatorIsTmp(curr, JB_LUB[1075])) {
		Message* n = JB_Incr(((Message*)JB_Ring_NextSib(curr)));
		if (needarg) {
			if (true) {
				MessagePosition _using184 = JB_Msg_SyntaxUsing(self);
				JB_Msg_AppendSyx(self, JB_SyxArg, JB_LUB[0]);
				needarg = false;
				JB_MsgPos_SyntaxUsingComplete((&_using184));
				JB_MsgPos_Destructor((&_using184));
			}
		}
		JB_Tree_SyntaxAppend(self, curr);
		JB_SetRef(curr, n);
		JB_Decr(n);
	};
	JB_Decr(curr);
}

void JB_Msg_FixErl(Message* self) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	Message* opp = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	Message* last = JB_Incr(((Message*)JB_Ring_NextSib(opp)));
	JB_String* name = JB_Incr(opp->Name);
	if (((JB_Str_Equals(name, JB_LUB[1718], false))) and ((!({
		Message* _tmP295 = JB_Incr(JB_Msg_NiceParent(self));
		bool _tmP294 = JB_Msg_EqualsSyx(_tmP295, JB_SyxArg, false);
		JB_Decr(_tmP295);
		 _tmP294;
	})))) {
		Array* _tmPf0 = JB_Incr((JB_Array__New0()));
		Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_First(self)));
		JB_Array_SyntaxAppend(_tmPf0, _tmPf5);
		JB_Decr(_tmPf5);
		Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_Last(self)));
		JB_Array_SyntaxAppend(_tmPf0, _tmPf6);
		JB_Decr(_tmPf6);
		JB_Msg_BecomeMacro(self, SC__Macros_InitExpand, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		//using;
		MessagePosition _using193 = JB_Msg_SyntaxUsing(opp);
		while (JB_Msg_OperatorIn(self, JB_SyxBra)) {
			Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_Parent(self)));
			JB_FreeIfDead(JB_Msg_ReplaceWith(_tmPf7, self));
			JB_Decr(_tmPf7);
		};
		bool IsBitOr = ((JB_Str_Equals(name, JB_LUB[1718], false)));
		self->Func = JB_SyxRel;
		JB_SetRef(opp->Name, JB_LUB[541]);
		JB_SetRef(ch, JB_Msg_NiceCopy(ch, nil));
		if (IsBitOr) {
			Message* new_if = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[689])));
			Message* _tmPf8 = JB_Incr(({
				Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[679])));
				Message* _tmPf9 = JB_Incr(JB_Msg_NeedBra(ch));
				JB_Tree_SyntaxAppend(__imPf1, _tmPf9);
				JB_Decr(_tmPf9);
				JB_SafeDecr(__imPf1);
				 __imPf1;
			}));
			JB_Tree_SyntaxAppend(new_if, _tmPf8);
			JB_Decr(_tmPf8);
			(JB_Ring_PrevSibSet(self, new_if));
			Message* _tmPf10 = JB_Incr(({
				Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
				JB_Tree_SyntaxAppend(__imPf2, self);
				JB_SafeDecr(__imPf2);
				 __imPf2;
			}));
			JB_Tree_SyntaxAppend(new_if, _tmPf10);
			JB_Decr(_tmPf10);
			JB_Decr(new_if);
		}
		 else {
			if (JB_Msg_EqualsSyx(last, JB_SyxRel, false)) {
				JB_SetRef(last, ({
					Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
					JB_Tree_SyntaxAppend(__imPf3, last);
					JB_SafeDecr(__imPf3);
					 __imPf3;
				}));
			}
			Message* _tmPf11 = JB_Incr(({
				Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
				JB_Tree_SyntaxAppend(__imPf4, ch);
				Message* _tmPf12 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, name));
				JB_Tree_SyntaxAppend(__imPf4, (_tmPf12));
				JB_Decr(_tmPf12);
				JB_Tree_SyntaxAppend(__imPf4, last);
				JB_SafeDecr(__imPf4);
				 __imPf4;
			}));
			(JB_Ring_NextSibSet(opp, _tmPf11));
			JB_Decr(_tmPf11);
		}
		JB_MsgPos_SyntaxUsingComplete((&_using193));
		JB_MsgPos_Destructor((&_using193));
	}
	JB_Decr(name);
	JB_Decr(last);
	JB_Decr(opp);
	JB_Decr(ch);
}

void JB_Msg_FixMultiArr(Message* self) {
	{
		Message* item = ((Message*)JB_Tree_First_(self));
		while (item) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(item)));
			Message* kkey = ((Message*)JB_Ring_First(item));
			if (JB_Msg_EqualsSyx(kkey, JB_SyxList, false)) {
				Message* val = ((Message*)JB_Ring_NextSib(kkey));
				while (true) {
					Message* c = ((Message*)JB_Ring_First(kkey));
					if ((!c)) {
						break;
					}
					Message* i2 = JB_Syx_Msg(JB_SyxItem, JB_LUB[0]);
					JB_Tree_SyntaxAppend(i2, c);
					JB_Tree_SyntaxAppend(i2, JB_Msg_NiceCopy(val, nil));
					(JB_Ring_PrevSibSet(item, i2));
				};
				JB_Tree_Remove(item);
			}
			item = _Nf1;
		};
		(self);
	};
}

double JB_Msg_Float(Message* self) {
	return JB_Str_TextDouble(self->Name, self);
}

void JB_Msg_FSListArg(Message* self, FastString* fs) {
	bool hasp = ((Message*)JB_Ring_Parent(self)) != nil;
	fs->Indent = (fs->Indent + hasp);
	bool doind = hasp;
	if (JB_Str_Exists(self->Name)) {
		doind = true;
		JB_FS_AppendIndent(fs);
		JB_FS_AppendString(fs, JB_LUB[1719]);
		JB_FS_AppendEscape(fs, self->Name);
		JB_FS_AppendByte(fs, '"');
	}
	{
		Message* ch = ((Message*)JB_Tree_First_(self));
		while (ch) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(ch)));
			if (doind) {
				JB_FS_AppendIndent(fs);
			}
			JB_FS_SyntaxAppend(fs, ch);
			doind = true;
			ch = _Nf1;
		};
		(self);
	}
	;
	fs->Indent = (fs->Indent - hasp);
	if (hasp) {
		JB_FS_AppendByte(fs, '\n');
	}
}

void JB_Msg_FSListSep(Message* self, FastString* fs, JB_String* sep) {
	{
		Message* ch = ((Message*)JB_Tree_First_(self));
		Message* _firstf2 = ch;
		while (ch) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(ch)));
			if (_firstf2 != ch) {
				JB_FS_AppendString(fs, sep);
			}
			//start;
			JB_FS_SyntaxAppend(fs, ch);
			ch = _Nf1;
		};
		(self);
	};
}

Message* JB_Msg_FullAfter(Message* self) {
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(self)));
	Message* N = JB_Incr(((Message*)JB_Ring_NextSib(P)));
	while (N) {
		JB_SetRef(P, N);
		JB_SetRef(N, ((Message*)JB_Ring_NextSib(P)));
	};
	JB_Decr(N);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_FlatAfter(P)));
	JB_Decr(P);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_Msg_Func__(Message* self, FastString* fs) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	JB_FS_SyntaxAppend(fs, ch);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	JB_Decr(ch);
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
}

JB_String* JB_Msg_FuncName(Message* self) {
	JB_String* _tmPf0 = JB_Incr(JB_Syx_LongName(self->Func));
	JB_String* _tmPf1 = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_Msg_FuncPos(Message* self, SCFunction* fn) {
	{
		Message* ss = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)ss) and (ss != _afterf1)) {
			Message* _N_f2 = ((Message*)((Message*)JB_Ring_FlatNext0(ss)));
			if (ss->Obj == fn) {
				return ss->Position;
			}
			ss = _N_f2;
		};
		(self);
	}
	;
	return self->Position;
}

void JB_Msg_FuncWrap(Message* self, Message* fnc) {
	(JB_Ring_PrevSibSet(self, fnc));
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(fnc)));
	JB_Tree_SyntaxAppend(_tmPf0, self);
	JB_Decr(_tmPf0);
}

int JB_Msg_GetAddressOf(Message* self, SCDecl* Type, bool WasCArray) {
	if ((!self)) {
		return kSC_NeedsAddressOf;
	}
	Message* Addr = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[417])));
	JB_FreeIfDead(JB_Msg_ReplaceWith(self, Addr));
	Message* inside = JB_Incr(self);
	if (WasCArray) {
		JB_SetRef(inside, ({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxAcc, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf0, self);
			Message* _tmPf2 = JB_Incr(({
				Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxArr, JB_LUB[0])));
				Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxNum, JB_LUB[907]));
				JB_Tree_SyntaxAppend(__imPf1, (_tmPf3));
				JB_Decr(_tmPf3);
				JB_SafeDecr(__imPf1);
				 __imPf1;
			}));
			JB_Tree_SyntaxAppend(__imPf0, _tmPf2);
			JB_Decr(_tmPf2);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
	}
	JB_Tree_SyntaxAppend(Addr, inside);
	JB_Decr(inside);
	JB_SetRef(Addr->Obj, Type);
	JB_Decr(Addr);
	return kSC_AddressOfMatch;
}

void JB_Msg_GetAddressOf2(Message* self) {
	Message* sigh = JB_Incr(JB_Syx_OperatorPlus(self->Func, self->Name));
	JB_Tree_TakeAllFrom(sigh, self);
	JB_SetRef(self->Name, JB_LUB[417]);
	self->Func = JB_SyxBRel;
	JB_Tree_SyntaxAppend(self, sigh);
	JB_Decr(sigh);
}

Message* JB_Msg_GetDclName(Message* self) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Msg_NeedSyxInt(self, JB_SyxNil, 1));
	if (JB_Msg_EqualsSyx(rz, JB_SyxRel, false)) {
		JB_SetRef(rz, JB_Msg_NeedSyx(rz, JB_SyxThg));
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Msg_GetMarker(Message* self, JB_String* s) {
	{
		Message* a = ((Message*)JB_Tree_First_(self));
		while (a) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(a)));
			if (JB_Msg_OperatorIsTmp(a, s)) {
				return a;
			}
			a = _Nf1;
		};
		(self);
	}
	;
	return nil;
}

Message* JB_Msg_GetTypeLimiter(Message* self) {
	if ((!self)) {
		return nil;
	}
	Message* rel = ((Message*)JB_Ring_Parent(self));
	if (((JB_Msg_EqualsSyx(rel, JB_SyxRel, false))) and (JB_Msg_IsLast(self) and (!(JB_Msg_OperatorIn(rel, JB_SyxDecl))))) {
		return rel;
	}
	return nil;
}

Message* JB_Msg_GiveArg(Message* self) {
	Message* r = ((Message*)JB_Ring_Last(self));
	if (JB_Msg_EqualsSyx(r, JB_SyxArg, false)) {
		return r;
	}
	return JB_Msg_Msg(self, JB_SyxArg, JB_LUB[0]);
}

Message* JB_Msg_GoIntoInvisArg(Message* self, Message* tmp, int pos) {
	int i = JB_int_OperatorAlign(((int)self->Indent), 4);
	Syntax f = tmp->Func;
	if ((!((f == JB_SyxTmp) or ((f == JB_SyxItem) or (f == JB_SyxDecl))))) {
		return JB_Tk__ErrorAdd(JB_LUB[1720], tmp->Position);
	}
	Message* it = JB_Tk__MakeInvisArg(tmp, i);
	if (it) {
		it->Indent = i;
		(JB_Msg_rangeSet(it, ((IntRange)ivec2{pos, pos})));
		JB_Tree_SyntaxAppend(it, self);
		return it;
	}
	return nil;
}

Message* JB_Msg_HasOwnBlock(Message* self) {
	Message* arg = JB_Incr(((Message*)JB_Ring_Parent(self)));
	if ((!(JB_Msg_EqualsSyx(arg, JB_SyxRel, false)))) {
		JB_Decr(arg);
		return nil;
	}
	JB_SetRef(arg, ((Message*)JB_Ring_Parent(arg)));
	if ((!(JB_Msg_EqualsSyx(arg, JB_SyxDecl, false)))) {
		JB_Decr(arg);
		return nil;
	}
	JB_SetRef(arg, ((Message*)JB_Ring_Parent(arg)));
	if ((!(JB_Msg_EqualsSyx(arg, JB_SyxArg, false)))) {
		JB_Decr(arg);
		return nil;
	}
	SCArg* obj = JB_Incr(JB_Msg_AsArg(arg));
	if ((!(JB_Object_Isa(obj, JB_AsClass(SCArg))))) {
		debugger;
		JB_Decr(arg);
		JB_Decr(obj);
		return nil;
	}
	if (obj->TmpMovedOutFor == self) {
		JB_Decr(obj);
		JB_SafeDecr(arg);
		return arg;
	}
	JB_Decr(obj);
	JB_Decr(arg);
	return nil;
}

bool JB_Msg_HasPosition(Message* self) {
	return self->Position >= 0;
}

SCFunction* JB_Msg_IdentifyFunc(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxTmp, false)) {
		if ((!((!JB_Msg_SyntaxEquals(self, JB_LUB[794], false)) and (!JB_Msg_SyntaxEquals(self, JB_LUB[617], false))))) {
			return nil;
		}
	}
	JB_Object* obj = self->Obj;
	if (JB_Object_FastIsa(obj, JB_AsClass(SCFunction))) {
		return ((SCFunction*)obj);
	}
	return nil;
}

Message* JB_Msg_InbuiltSizeOf(Message* self, SCBase* name_space, SCDecl* sulf, Message* sulf_exp) {
	int Nn = (80);
	SCDecl* _tmPf0 = JB_Incr(SC_Decl__New());
	Message* _tmPf1 = JB_Incr(SC_NewDeclNum(_tmPf0, SC_Decl_ByteSize(sulf), JB_LUB[0]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_Msg_IndentScore(Message* self) {
	int ind = JB_Msg_CleanIndent(self);
	if ((JB_Msg_EqualsSyx(self, JB_SyxTmp, false)) or (JB_Msg_EqualsSyx(self, JB_SyxItem, false))) {
		return ind + 2;
	}
	if (JB_Msg_EqualsSyx(self, JB_SyxArg, false)) {
		return ind;
	}
	return JB_Msg_CleanIndent(self);
}

bool JB_Msg_InInvisArg(Message* self) {
	Message* p = ((Message*)JB_Ring_Parent(self));
	return ((JB_Msg_EqualsSyx(p, JB_SyxArg, false))) and (JB_Msg_SyntaxIsnt(p, kJB__MsgUIFlags_Style2));
}

bool JB_Msg_InitExpand(Message* self) {
	Message* rel = JB_Incr(((Message*)JB_Ring_Parent(self)));
	JB_SetRef(self->Name, JB_LUB[1718]);
	//using;
	MessagePosition _using190 = JB_Msg_SyntaxUsing(self);
	JB_Msg_FixErl(rel);
	JB_Decr(rel);
	JB_MsgPos_SyntaxUsingComplete((&_using190));
	JB_MsgPos_Destructor((&_using190));
	return true;
}

bool JB_Msg_InitRootDecl(Message* self, Message* before, SCBase* name_space) {
	if ((!JB_Msg_Expect(self, JB_SyxThg, nil))) {
		return nil;
	}
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(self)));
	Message* NewDefault = JB_Incr(((Message*)JB_Ternary((JB_Msg_EqualsSyx(P, JB_SyxRel, false)), ((Message*)JB_Ring_Last(P)), nil)));
	JB_Decr(P);
	SCObject* O = JB_Incr(SC_Base_LookUpVarRootDecl(name_space, self->Name, self));
	if ((!(JB_Object_Isa(O, JB_AsClass(SCDecl))))) {
		JB_Decr(NewDefault);
		JB_Decr(O);
		return nil;
	}
	//using;
	MessagePosition _using180 = JB_Msg_SyntaxUsing(self);
	SCDecl* Decl = JB_Incr(((SCDecl*)O));
	JB_Decr(O);
	if ((!(NewDefault))) {
		if ((!(SC_Decl_IsNormal(Decl)))) {
			JB_Decr(NewDefault);
			JB_MsgPos_Destructor((&_using180));
			JB_Decr(Decl);
			return true;
		}
		JB_SetRef(NewDefault, SC_Decl_CreateDefault(Decl, self, true));
		if (((bool)NewDefault) and ((bool)Decl->Contains)) {
			JB_SetRef(NewDefault, SC_Decl_WriteTypeCast(Decl, NewDefault));
			JB_SetRef(NewDefault->Obj, nil);
		}
	}
	JB_Decr(Decl);
	if ((!JB_Msg_SyntaxEquals(NewDefault, JB_LUB[106], false))) {
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, self->Name));
		Message* _tmPf0 = JB_Incr(SC_NewRel((_tmPf1), JB_LUB[541], NewDefault));
		JB_Decr(_tmPf1);
		(JB_Ring_PrevSibSet(before, _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_Decr(NewDefault);
	JB_MsgPos_SyntaxUsingComplete((&_using180));
	JB_MsgPos_Destructor((&_using180));
	return true;
}

void JB_Msg_InsertAfter(Message* self, Message* j, Message* ch) {
	if (ch) {
		(JB_Ring_NextSibSet(ch, j));
	}
	 else {
		(JB_Ring_FirstSet(self, j));
	}
}

void JB_Msg_InsertBefore(Message* self, Message* j, Message* ch) {
	if (ch) {
		(JB_Ring_PrevSibSet(ch, j));
	}
	 else {
		(JB_Ring_LastSet(self, j));
	}
}

SCFunction* JB_Msg_InsideFunc(Message* self) {
	{
		Message* ch = self;
		while (ch) {
			if (JB_Msg_EqualsSyx(ch, JB_SyxTmp, false)) {
				SCFunction* fn = JB_Msg_AsFunc(ch);
				if (fn) {
					return fn;
				}
			}
			ch = ((Message*)JB_Ring_Parent(ch));
		};
		(self);
	}
	;
	return nil;
}

int64 JB_Msg_Int(Message* self, int i) {
	if (self) {
		if ((!JB_Msg_EqualsSyx(self, JB_SyxUnit, false))) {
			return JB_Str_TextIntegerSection(self->Name, i, self);
		}
		Message* f = ((Message*)JB_Ring_First(self));
		if (JB_Msg_SyntaxEquals(self, JB_LUB[317], false)) {
			return JB_Str_HexIntegerSection(f->Name, i, f);
		}
		double mul = JB_Str_TextDouble(f->Name, nil);
		if (JB_Msg_SyntaxEquals(self, JB_LUB[915], false)) {
			mul = (mul * 1024);
		}
		 else if (JB_Msg_SyntaxEquals(self, JB_LUB[917], false)) {
			mul = (mul * 1048576);
		}
		 else if (JB_Msg_SyntaxEquals(self, JB_LUB[919], false)) {
			mul = (mul * 1073741824);
		}
		 else {
			if ((!false)) {
				JB_Msg_SyntaxExpect(self, JB_LUB[1721]);
			}
			return 0;
		}
		return mul;
	}
	return 0;
}

NameAndMsg JB_Msg_IntoVariable(Message* self, SCBase* name_space) {
	NameAndMsg rz = ((NameAndMsg){});
	Message* P = JB_Incr(JB_Msg_NiceParent(self));
	Message* Place = JB_Incr(JB_Msg_IsInDeclInBlock(P));
	if (Place) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(P)));
		Message* NameMsg = JB_Incr(JB_Msg_UseNonRefChangers(_tmPf1, false));
		JB_Decr(_tmPf1);
		if (JB_Msg_EqualsSyx(NameMsg, JB_SyxThg, false)) {
			JB_SetRef(rz.Name, NameMsg->Name);
			JB_SetRef(rz.Arg, JB_Msg_Ancestor(Place, JB_SyxArg));
			JB_SetRef(rz.Msg, ((Message*)JB_Ring_NextSib(Place)));
			JB_Decr(P);
			JB_Decr(Place);
			JB_Decr(NameMsg);
			return rz;
		}
		JB_Decr(NameMsg);
	}
	JB_Decr(Place);
	Message* Block = JB_Incr(JB_Msg_CreateOwnBlock(self, true));
	JB_String* name = JB_Incr(SC_UniqueTmpVar(name_space, JB_LUB[1722]));
	Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name));
	JB_SetRef(P, SC_NewRel(_tmPf2, JB_LUB[541], self));
	JB_Decr(_tmPf2);
	SCArg* arg = JB_Incr(JB_Msg_AsArg(Block));
	Message* _tmPf3 = JB_Incr(({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxDecl, JB_LUB[0])));
		JB_Msg_AppendSyx(__imPf0, JB_SyxEmb, JB_LUB[0]);
		JB_Tree_SyntaxAppend(__imPf0, P);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	JB_Decr(P);
	JB_Tree_SyntaxAppend(Block, _tmPf3);
	JB_Decr(_tmPf3);
	JB_FreeIfDead(SC_CollectDecls(Block, name_space, arg, 0));
	Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_Parent(Block)));
	JB_SetRef(_tmPf4->Obj, SC_Base_SyntaxAccess(arg, name));
	JB_Decr(_tmPf4);
	JB_Decr(arg);
	Message* last = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[690])));
	Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name));
	JB_Tree_SyntaxAppend(last, (_tmPf5));
	JB_Decr(_tmPf5);
	JB_Tree_SyntaxAppend(Block, last);
	JB_SetRef(rz.Msg, last);
	JB_Decr(last);
	JB_SetRef(rz.Arg, Block);
	JB_Decr(Block);
	JB_SetRef(rz.Name, name);
	JB_Decr(name);
	return rz;
}

bool JB_Msg_IsAssignable(Message* self) {
	return (!JB_Msg_EqualsSyx(self, JB_SyxFunc, false)) and (!JB_Msg_EqualsSyx(self, JB_SyxType, false));
}

bool JB_Msg_IsClassType(Message* self) {
	return (JB_Msg_SyntaxEquals(self, JB_LUB[794], true)) or ((JB_Msg_SyntaxEquals(self, JB_LUB[803], true)) or ((JB_Msg_SyntaxEquals(self, JB_LUB[802], true)) or (JB_Msg_SyntaxEquals(self, JB_LUB[795], true))));
}

bool JB_Msg_IsContainer(Message* self) {
	Syntax f = self->Func;
	return (f == JB_SyxArg) or ((f == JB_SyxList) or ((f == JB_SyxPrm) or ((f == JB_SyxArr) or (f == JB_SyxBra))));
}

Message* JB_Msg_IsInDeclInBlock(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxRel, false)) {
		Message* P = JB_Msg_NiceParent(self);
		if (((JB_Msg_EqualsSyx(P, JB_SyxDecl, false))) and (JB_Msg_OperatorIn(P, JB_SyxArg))) {
			return P;
		}
	}
	return nil;
}

bool JB_Msg_isint(Message* self) {
	return ((JB_Msg_EqualsSyx(self, JB_SyxNum, false))) and (!JB_Ind_SyntaxCast(JB_Str_FindByte(self->Name, '.', 0, JB_int__max())));
}

bool JB_Msg_IsLast(Message* self) {
	return ((bool)self) and (!JB_FreeIfDead(((Message*)JB_Ring_NextSib(self))));
}

bool JB_Msg_IsModuleType(Message* self) {
	return (JB_Msg_SyntaxEquals(self, JB_LUB[617], true)) or (JB_Msg_SyntaxEquals(self, JB_LUB[805], true));
}

SCFunction* JB_Msg_IsParentConCall(Message* self) {
	if ((!(JB_Msg_EqualsSyx(self, JB_SyxFunc, false)))) {
		return nil;
	}
	SCFunction* f = JB_Msg_MsgFunc(self);
	if (((bool)f) and SC_Func_IsConstructorOrDestructor(f)) {
		return f;
	}
	return nil;
}

bool JB_Msg_IsProperty(Message* self) {
	return JB_Msg_DotType(self) == kSC_IsProperty;
}

bool JB_Msg_IsReffer(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxFunc, false)) {
		SCFunction* fn = JB_Msg_AsFunc(((Message*)JB_Ring_Last(self)));
		return ((bool)fn) and SC_Func_OperatorIsa(fn, kSC_IsReffer);
	}
	return false;
}

bool JB_Msg_IsReturnOrRejoin(Message* self) {
	return ((JB_Msg_EqualsSyx(self, JB_SyxTmp, false))) and ((JB_Msg_SyntaxEquals(self, JB_LUB[602], false)) or (JB_Msg_SyntaxEquals(self, JB_LUB[690], false)));
}

Message* JB_Msg_IsSetIntoPlace(Message* self) {
	Message* p = JB_Msg_NiceParent(self);
	if ((!JB_Msg_IsSetRel(p))) {
		return nil;
	}
	return ((Message*)JB_Ring_First(p));
}

Message* JB_Msg_IsSetIntoVar(Message* self) {
	Message* thg = JB_Msg_IsSetIntoPlace(self);
	if ((!(JB_Msg_EqualsSyx(thg, JB_SyxThg, false)))) {
		return nil;
	}
	return thg;
}

bool JB_Msg_IsSetRel(Message* self) {
	if (((JB_Msg_EqualsSyx(self, JB_SyxRel, false))) and ((JB_Msg_SyntaxEquals(((Message*)JB_Ring_NextSib(((Message*)JB_Ring_First(self)))), JB_LUB[541], false)))) {
		return true;
	}
	return false;
}

bool JB_Msg_IsStatementExpr(Message* self) {
	Message* f = ((Message*)JB_Ring_First(self));
	if (((JB_Msg_EqualsSyx(self, JB_SyxBra, false))) and ((JB_Msg_EqualsSyx(f, JB_SyxArg, false)))) {
		SCArg* _tmPf0 = JB_Msg_AsArg(f);
		if ((!_tmPf0)) {
			return nil;
		}
		return _tmPf0->IsStatementExpr;
	}
	return false;
}

bool JB_Msg_IsType(Message* self, int Allowed) {
	Message* p = ((Message*)JB_Ring_Parent(self));
	Message* msg = self;
	while (((bool)p) and (!JB_Msg_EqualsSyx(p, JB_SyxArg, false))) {
		if ((((bool)(Allowed & 1))) and ((JB_Msg_EqualsSyx(p, JB_SyxDecl, false)))) {
			return JB_Tree_IsFirst(msg);
		}
		if ((((bool)(Allowed & 2))) and ((JB_Msg_EqualsSyx(p, JB_SyxType, false)))) {
			return JB_Msg_IsLast(msg);
		}
		msg = p;
		p = ((Message*)JB_Ring_Parent(p));
	};
	return false;
}

bool JB_Msg_IsTypeOfDecl(Message* self) {
	return JB_Msg_IsType(self, 1);
}

bool JB_Msg_IsVarAltered(Message* self, JB_String* name) {
	{
		Message* msg = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)msg) and (msg != _afterf1)) {
			Message* _N_f2 = ((Message*)((Message*)JB_Ring_FlatNext0(msg)));
			if ((!(JB_Msg_EqualsSyx(msg, JB_SyxRel, false)))) {
				msg = _N_f2;
				continue;
			}
			if ((!(JB_Msg_OperatorIn(msg, JB_SyxArg)))) {
				msg = _N_f2;
				continue;
			}
			if ((!(JB_Msg_OperatorIsThing(((Message*)JB_Tree_Get(msg, 0)), name)))) {
				msg = _N_f2;
				continue;
			}
			return true;
		};
		(self);
	}
	;
	return false;
}

bool JB_Msg_IsVarUseableInLoop(Message* self, JB_String* name) {
	if (JB_Str_Equals(name, JB_LUB[331], false)) {
		return false;
	}
	return JB_Msg_IsVarAltered(self, name);
}

bool JB_Msg_iszero(Message* self) {
	return ((JB_Msg_EqualsSyx(self, JB_SyxNum, false))) and (JB_Str_IsZero(self->Name));
}

void JB_Msg_Item__(Message* self, FastString* fs) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	JB_FS_SyntaxAppend(fs, ch);
	JB_FS_AppendString(fs, JB_LUB[278]);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	JB_Decr(ch);
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
}

bool JB_Msg_jbinTest(Message* self) {
	JB_String* _tmPf0 = JB_Incr(JB_Msg_render_jbin(self, JB_LUB[0], nil));
	Message* msg = JB_Incr(JB_Str_parse_jbin(_tmPf0));
	JB_Decr(_tmPf0);
	bool _tmPf1 = JB_Msg__TreeCompare(self, msg, false);
	JB_Decr(msg);
	return _tmPf1;
}

JB_String* JB_Msg_jdb2_(Message* self, int Flags, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	if (((bool)(Flags & 1))) {
		JB_FS_AppendString(fs, JB_LUB[511]);
	}
	JB_String* _tmPf2 = JB_Incr(JB_Syx_Name(self->Func));
	JB_FS_AppendString(fs, _tmPf2);
	JB_Decr(_tmPf2);
	JB_FS_AppendByte(fs, ' ');
	if (JB_Str_Exists(self->Name)) {
		JB_FS_AppendByte(fs, '"');
		if (((bool)(Flags & 2))) {
			JB_String* _tmPf3 = JB_Incr(JB_Str_Range(self->Name, 0, 32));
			JB_FS_AppendEscape(fs, _tmPf3);
			JB_Decr(_tmPf3);
		}
		 else {
			JB_FS_AppendEscape(fs, self->Name);
		}
		JB_FS_AppendByte(fs, '"');
	}
	if (JB_Ring_HasChildren(self)) {
		fs->Indent++;
		{
			Message* ch = JB_Incr(((Message*)JB_Tree_First_(self)));
			while (ch) {
				Message* _Nf1 = JB_Incr(((Message*)((Message*)JB_Ring_NextSib(ch))));
				JB_FS_AppendIndent(fs);
				JB_FreeIfDead(JB_Msg_jdb2_(ch, Flags, fs));
				JB_SetRef(ch, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(ch);
			(self);
		}
		;
		fs->Indent--;
		if (((bool)(Flags & 1))) {
			JB_FS_AppendIndent(fs);
		}
	}
	if (((bool)(Flags & 1))) {
		JB_FS_AppendString(fs, JB_LUB[490]);
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

__lib__ JB_String* jdb4(Message* self) {
	//visible;
	JB_String* _tmPf0 = JB_Incr(JB_Msg_jdb4_(self, nil));
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
	return JB_LUB[0];
}

JB_String* JB_Msg_jdb4_(Message* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_String* _tmPf2 = JB_Incr(JB_Syx_Name(self->Func));
	JB_FS_AppendString(fs, _tmPf2);
	JB_Decr(_tmPf2);
	JB_FS_AppendByte(fs, ' ');
	if (JB_Str_Exists(self->Name)) {
		JB_FS_AppendByte(fs, '"');
		JB_String* _tmPf3 = JB_Incr(JB_Str_Range(self->Name, 0, 32));
		JB_FS_AppendEscape(fs, _tmPf3);
		JB_Decr(_tmPf3);
		JB_FS_AppendByte(fs, '"');
	}
	if (self->Obj) {
		if ((!(JB_Object_Isa(self->Obj, JB_AsClass(Message))))) {
			JB_FS_AppendByte(fs, ' ');
			JB_FreeIfDead(JB_ObjRender(self->Obj, fs));
		}
	}
	if (JB_Ring_HasChildren(self)) {
		fs->Indent++;
		{
			Message* ch = JB_Incr(((Message*)JB_Tree_First_(self)));
			while (ch) {
				Message* _Nf1 = JB_Incr(((Message*)((Message*)JB_Ring_NextSib(ch))));
				JB_FS_AppendIndent(fs);
				JB_FreeIfDead(JB_Msg_jdb4_(ch, fs));
				JB_SetRef(ch, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(ch);
			(self);
		}
		;
		fs->Indent--;
		JB_FS_AppendIndent(fs);
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_String* JB_Msg_jdb_(Message* self, FastString* fs_in, int flags) {
	return JB_Msg_jdb2_(self, flags, fs_in);
}

Message* JB_Msg_Last(Message* self, Syntax Need) {
	Message* ch = ((Message*)JB_Ring_Last(self));
	if (JB_Msg_EqualsSyx(ch, Need, false)) {
		return ch;
	}
	JB_Msg_CantFind(self, Need, nil, ch);
	return nil;
}

Message* JB_Msg_LastUsedFix(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxDecl, false)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Tree_Get(self, 1)));
		Message* Ch = JB_Incr(((Message*)JB_Ring_First(_tmPf0)));
		JB_Decr(_tmPf0);
		if ((!(JB_Msg_EqualsSyx(Ch, JB_SyxThg, false)))) {
			JB_Object_SyntaxExpect(nil);
			JB_Decr(Ch);
			return nil;
		}
		if (SC_Refs__RefBasis(Ch, true) == kSC__Refs_BasisObj) {
			Message* it = JB_Incr(JB_Msg_FindRef(self, SC__Comp_RefIncr, Ch->Name));
			if (it) {
				JB_Decr(Ch);
				Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_NextSib(it)));
				JB_Decr(it);
				JB_SafeDecr(_tmPf1);
				return _tmPf1;
			}
			JB_Decr(it);
		}
		JB_Decr(Ch);
	}
	return ((Message*)JB_Ring_NextSib(self));
}

int JB_Msg_Length(Message* self) {
	return JB_Str_Length(self->Name);
}

bool JB_Msg_LinkageType(Message* self) {
	return (JB_Msg_SyntaxEquals(self, JB_LUB[820], true));
}

void JB_Msg_List__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '(');
	int count = 0;
	JB_String* sep = JB_LUB[164];
	if (JB_Msg_SyntaxIs(self, kJB__MsgUIFlags_Style2)) {
		sep = JB_LUB[403];
		JB_FS_AppendString(fs, sep);
	}
	{
		Message* ch = ((Message*)JB_Tree_First_(self));
		while (ch) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(ch)));
			if ((++count) > 1) {
				JB_FS_AppendString(fs, sep);
			}
			JB_FS_SyntaxAppend(fs, ch);
			if (JB_Msg_EqualsSyx(ch, JB_SyxItem, false)) {
				count++;
			}
			ch = _Nf1;
		};
		(self);
	}
	;
	if ((count == 1) or JB_Msg_SyntaxIs(self, kJB__MsgUIFlags_Style2)) {
		JB_FS_AppendString(fs, sep);
	}
	JB_FS_AppendByte(fs, ')');
}

Array* JB_Msg_ListAll(Message* self) {
	Array* rz = ((Array*)JB_Array__New0());
	{
		Message* A = ((Message*)JB_Tree_First_(self));
		while (A) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(A)));
			JB_Array_SyntaxAppend(rz, A);
			A = _Nf1;
		};
		(self);
	}
	;
	return rz;
}

bool JB_Msg_ListViewable(Message* self) {
	return ((bool)self) and JB_Syx_ListViewable(self->Func);
}

JB_String* JB_Msg_Locate(Message* self) {
	if ((!self)) {
		return JB_LUB[1359];
	}
	JB_String* s = JB_Incr(JB_Msg_Render(self, nil));
	JB_String* fname = JB_Incr(JB_Syx_Name(self->Func));
	FastString* fs = JB_Incr(JB_FS__New());
	JB_FreeIfDead(JB_ObjRender(self->Name, fs));
	JB_FS_AppendByte(fs, '@');
	JB_FS_AppendString(fs, fname);
	JB_Decr(fname);
	JB_FS_AppendString(fs, JB_LUB[1723]);
	JB_FS_AppendString(fs, s);
	JB_Decr(s);
	JB_FS_AppendByte(fs, '\'');
	if (self->Position >= 0) {
		JB_FS_AppendString(fs, JB_LUB[1724]);
		JB_FS_AppendInt32(fs, self->Position);
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Root(self)));
		JB_Object* r = JB_Incr(_tmPf0->Obj);
		JB_Decr(_tmPf0);
		if (JB_Object_Isa(r, JB_AsClass(JB_String))) {
			if (JB_Str_Length(((JB_String*)r))) {
				JB_FS_AppendString(fs, JB_LUB[1725]);
				JB_FS_AppendString(fs, ((JB_String*)r));
			}
		}
		JB_Decr(r);
	}
	JB_FS_AppendByte(fs, '\n');
	JB_String* _tmPf1 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void JB_Msg_LocateAll(Message* self) {
	{
		Message* ch = JB_Incr(self);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(self)));
		while (((bool)ch) and (ch != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)((Message*)JB_Ring_FlatNext0(ch))));
			JB_String* _tmPf3 = JB_Incr(JB_Msg_Locate(ch));
			JB_PrintLine(_tmPf3);
			JB_Decr(_tmPf3);
			JB_SetRef(ch, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(_afterf1);
		JB_Decr(ch);
		(self);
	};
}

Message* JB_Msg_MacroAvoidCopy(Message* self) {
	if (JB_Msg_SyntaxIsnt(self, kJB__MsgUIFlags_Inserted)) {
		(JB_Msg_SyntaxIsSet(self, kJB__MsgUIFlags_Inserted, true));
		return self;
	}
	return JB_Msg_NiceCopy(self, nil);
}

Message* JB_Msg_MacroCopy(Message* self, Message* root, Array* prms) {
	Message* rz = nil;
	rz = JB_Msg__NewCopy(self);
	{
		Message* v = ((Message*)JB_Tree_First_(self));
		while (v) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(v)));
			JB_Tree_SyntaxAppend(rz, JB_Msg_MacroPrm(v, root, prms));
			v = _Nf1;
		};
		(self);
	}
	;
	return rz;
}

Message* JB_Msg_MacroDot(Message* self, Message* prm) {
	Message* rz = nil;
	if ((!JB_Msg_Expect(prm, JB_SyxThg, nil))) {
		JB_Decr(rz);
		return nil;
	}
	JB_SetRef(rz, JB_Msg_NiceCopy(self, nil));
	(JB_Msg_SyntaxIsSet(prm, kJB__MsgUIFlags_Inserted, true));
	JB_SetRef(rz->Name, prm->Name);
	JB_SafeDecr(rz);
	return rz;
}

int JB_Msg_MacroFixCount(Message* self) {
	int Found = 0;
	{
		Message* s = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)s) and (s != _afterf1)) {
			Message* _N_f2 = ((Message*)((Message*)JB_Ring_FlatNext0(s)));
			if (((JB_Msg_EqualsSyx(s, JB_SyxSThg, false))) and (JB_Msg_IsContainer(((Message*)JB_Ring_Parent(s))))) {
				return -111111;
			}
			int Num = JB_Msg_ParamNum(s);
			if (Num >= 0) {
				Found = (Found | (1 << Num));
			}
			if (JB_Msg_EqualsSyx(s, JB_SyxSDot, false)) {
				Found = (Found | 1);
			}
			s = _N_f2;
		};
		(self);
	}
	;
	return JB_Int_CountBits(Found);
}

Message* JB_Msg_MacroPrm(Message* self, Message* root, Array* prms) {
	JB_String* n = self->Name;
	if (((JB_Msg_EqualsSyx(self, JB_SyxThg, false)) or ((JB_Msg_EqualsSyx(self, JB_SyxDot, false)) or (JB_Msg_EqualsSyx(self, JB_SyxSDot, false)))) and (JB_Str_First(n) == '_')) {
		if (((JB_Str_EqualsInt(n, 1, false))) or JB_Str_IsIntFrom(n, 1)) {
			Message* oop = ((Message*)JB_Array_Value(prms, ((int)JB_Str_int(n))));
			if ((!oop)) {
				JB_Msg_SyntaxExpect(root, JB_LUB[1726]);
				return nil;
			}
			if ((JB_Msg_EqualsSyx(self, JB_SyxDot, false)) or (JB_Msg_EqualsSyx(self, JB_SyxSDot, false))) {
				return JB_Msg_MacroDot(self, oop);
			}
			return JB_Msg_MacroAvoidCopy(oop);
		}
		return JB_Msg__NewCopy(self);
	}
	return JB_Msg_MacroCopy(self, root, prms);
}

void JB_Msg_MiniArgCpp(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '{');
	{
		Message* ch = ((Message*)JB_Tree_First_(self));
		Message* _firstf2 = ch;
		while (ch) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(ch)));
			if (_firstf2 != ch) {
				JB_FS_AppendString(fs, JB_LUB[164]);
			}
			//start;
			JB_Msg_Export(ch, fs);
			ch = _Nf1;
		};
		(self);
	}
	;
	JB_FS_AppendByte(fs, '}');
}

JB_String* JB_Msg_MiniName(Message* self) {
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_String* _tmPf1 = JB_Incr(JB_Msg_FuncName(self));
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(_fsf0, JB_LUB[1392]);
	JB_String* _tmPf3 = JB_Incr(JB_Str_Range(self->Name, 0, 64));
	JB_String* _tmPf2 = JB_Incr(JB_Str_UnicodeSync(_tmPf3));
	JB_Decr(_tmPf3);
	JB_FS_AppendString(_fsf0, _tmPf2);
	JB_Decr(_tmPf2);
	JB_FS_AppendString(_fsf0, JB_LUB[493]);
	JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

void JB_Msg_MiniTran(Message* self, SCBase* name_space, JB_String* On) {
	if (true) {
		MessagePosition _using179 = JB_Msg_SyntaxUsing(self);
		Message* _tmPf1 = JB_Incr(({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(self)));
			JB_Tree_SyntaxAppend(__imPf0, _tmPf2);
			JB_Decr(_tmPf2);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
		JB_Tree_SyntaxAppend(self, _tmPf1);
		JB_Decr(_tmPf1);
		Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxThg, On));
		(JB_Ring_FirstSet(self, (_tmPf3)));
		JB_Decr(_tmPf3);
		self->Func = JB_SyxDot;
		JB_MsgPos_SyntaxUsingComplete((&_using179));
		JB_MsgPos_Destructor((&_using179));
	}
	JB_FreeIfDead(SC_TypeOfExpr(self, name_space, nil));
}

int JB_Msg_ModelMode(Message* self) {
	int rz = 0;
	if ((!(JB_Msg_EqualsSyx(self, JB_SyxRel, false)))) {
		return nil;
	}
	{
		Message* _LoopSrcf3 = JB_Incr(((Message*)JB_Ring_Last(self)));
		Message* C = JB_Incr(_LoopSrcf3);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(_LoopSrcf3)));
		while (((bool)C) and (C != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(C)));
			if (JB_Msg_OperatorIsThing(C, JB_LUB[1727])) {
				rz = (rz | 1);
			}
			 else if (JB_Msg_OperatorIsThing(C, JB_LUB[1728])) {
				rz = (rz | 2);
			}
			 else {
				if ((!((JB_Msg_EqualsSyx(C, JB_SyxRel, false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[515], false))))) {
					JB_Msg_SyntaxExpect(C, nil);
					JB_Decr(_LoopSrcf3);
					JB_Decr(C);
					JB_Decr(_afterf1);
					JB_Decr(_N_f2);
					return nil;
				}
			}
			JB_SetRef(C, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(_afterf1);
		JB_Decr(C);
		(_LoopSrcf3);
		JB_Decr(_LoopSrcf3);
	}
	;
	return rz;
}

Message* JB_Msg_ModelType(Message* self) {
	Message* rz = nil;
	JB_SetRef(rz, self);
	if (JB_Msg_EqualsSyx(rz, JB_SyxRel, false)) {
		JB_SetRef(rz, ((Message*)JB_Ring_First(rz)));
	}
	if ((!(JB_Msg_EqualsSyx(rz, JB_SyxThg, false)))) {
		JB_Msg_SyntaxExpect(self, nil);
		JB_Decr(rz);
		return nil;
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Msg_ModuleSrc(Message* self) {
	JB_String* name = self->Name;
	if (JB_Str_Exists(name)) {
		SCModule* found = SC_Comp__FindModule(name, nil, JB_LUB[63]);
		if (found) {
			SCClass* c = found->Cls;
			if (c) {
				SCFunction* fp = c->FuncProto;
				if (fp) {
					return fp->Source;
				}
				 else {
					return c->Source;
				}
			}
			return found->Source;
		}
	}
	return nil;
}

void JB_Msg_Move(Message* self, Message* last, Message* into) {
	Message* curr = JB_Incr(self);
	while (curr != last) {
		Message* next_ = JB_Incr(((Message*)JB_Ring_NextSib(curr)));
		(JB_Ring_FirstSet(into, curr));
		JB_SetRef(curr, next_);
		JB_Decr(next_);
	};
	JB_Decr(curr);
}

void JB_Msg_MoveAllAfter(Message* self, Message* after) {
	while (JB_Ring_HasChildren(self)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(self)));
		(JB_Ring_NextSibSet(after, _tmPf0));
		JB_Decr(_tmPf0);
	};
}

void JB_Msg_MoveAllIn(Message* self, Message* Dest) {
	while (JB_Ring_HasChildren(self)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
		(JB_Ring_LastSet(Dest, _tmPf0));
		JB_Decr(_tmPf0);
	};
}

Message* JB_Msg_Msg(Message* self, Syntax fn, JB_String* name) {
	return JB_Msg__NewRange(self, fn, JB__Tk_UsingPos, name, JB_Str_Length(name));
}

void JB_Msg_Msg__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[511]);
	JB_Msg_FSListSep(self, fs, JB_LUB[164]);
	JB_FS_AppendString(fs, JB_LUB[1729]);
}

SCArg* JB_Msg_MsgArg(Message* self) {
	{
		Message* ch = self;
		while (ch) {
			JB_Object* O = ch->Obj;
			if (JB_Object_FastIsa(O, JB_AsClass(SCArg))) {
				return ((SCArg*)O);
			}
			ch = ((Message*)JB_Ring_Parent(ch));
		};
		(self);
	}
	;
	return nil;
}

SCDecl* JB_Msg_MsgDecl(Message* self) {
	return JB_Msg_AsDecl(JB_Msg_DclExp(self));
}

SCFunction* JB_Msg_MsgFunc(Message* self) {
	if ((JB_Msg_EqualsSyx(self, JB_SyxDot, false)) or (JB_Msg_EqualsSyx(self, JB_SyxFunc, false))) {
		Message* sc = ((Message*)JB_Tree_Second(self));
		if (sc) {
			return JB_Msg_AsFunc(sc);
		}
	}
	return nil;
}

SCFunction* JB_Msg_MsgOwningFunc(Message* self) {
	{
		Message* ch = self;
		while (ch) {
			JB_Object* O = ch->Obj;
			if (JB_Object_FastIsa(O, JB_AsClass(SCArg))) {
				if (((SCArg*)O)->ParentFunc) {
					return ((SCArg*)O)->ParentFunc;
				}
			}
			 else if ((JB_Object_FastIsa(O, JB_AsClass(SCFunction))) and ((!JB_Msg_EqualsSyx(ch, JB_SyxPrm, false)))) {
				return ((SCFunction*)O);
			}
			ch = ((Message*)JB_Ring_Parent(ch));
		};
		(self);
	}
	;
	return nil;
}

void JB_Msg_Name__(Message* self, FastString* fs) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	if (ch) {
		JB_FS_AppendString(fs, self->Name);
		JB_FS_AppendString(fs, JB_LUB[1730]);
		JB_FS_SyntaxAppend(fs, ch);
	}
	 else {
		JB_FS_AppendByte(fs, '@');
		JB_FS_AppendString(fs, self->Name);
	}
	JB_Decr(ch);
}

Message* JB_Msg_NeedBra(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxBra, false)) {
		return self;
	}
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
	Message* _tmPf1 = JB_Incr(JB_Msg_WrapWith(self, (_tmPf0)));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Msg_NeedMarker(Message* self, JB_String* s, bool b) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Msg_FindFlat(self, JB_SyxTmp, s, false));
	if ((!rz)) {
		JB_SetRef(rz, JB_Syx_Msg(JB_SyxTmp, s));
		if (b) {
			(JB_Ring_LastSet(self, rz));
		}
		 else {
			(JB_Ring_FirstSet(self, rz));
		}
	}
	JB_SafeDecr(rz);
	return rz;
}

bool JB_Msg_NeedsPreprocess(Message* self) {
	if ((JB_Msg_EqualsSyx(self, JB_SyxTRel, false)) or JB_Msg_OperatorIsARel(self, JB_LUB[435])) {
		return true;
	}
	if (JB_Msg_EqualsSyx(self, JB_SyxTmp, false)) {
		return (JB_Str_Equals(self->Name, JB_LUB[1579], false)) or ((JB_Str_Equals(self->Name, JB_LUB[1559], false)) or ((JB_Str_Equals(self->Name, JB_LUB[1558], false)) or ((JB_Str_Equals(self->Name, JB_LUB[1562], false)) or ((JB_Str_Equals(self->Name, JB_LUB[339], false)) or ((JB_Str_Equals(self->Name, JB_LUB[363], false)) or ((JB_Str_Equals(self->Name, JB_LUB[319], false)) or (JB_Str_Equals(self->Name, JB_LUB[1561], false))))))));
	}
	if ((!(JB_Msg_EqualsSyx(self, JB_SyxRel, false)))) {
		return nil;
	}
	Message* L = ((Message*)JB_Ring_First(self));
	if (((JB_Msg_EqualsSyx(L, JB_SyxRel, false))) and ((JB_Msg_SyntaxEquals(((Message*)JB_Ring_NextSib(L)), JB_LUB[600], false)))) {
		return ((JB_Msg_SyntaxEquals(((Message*)JB_Tree_Get(L, 1)), JB_LUB[541], false))) and ((JB_Msg_SyntaxEquals(((Message*)JB_Tree_Get(((Message*)JB_Ring_Last(self)), 1)), JB_LUB[541], false)));
	}
	return false;
}

Message* JB_Msg_Negate(Message* self) {
	Message* ch = JB_Incr(JB_Msg_UnBra(self));
	if (JB_Msg_OperatorIsBRel(ch, JB_LUB[679])) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(ch)));
		JB_Decr(ch);
		Message* _tmPf1 = JB_Incr(JB_Msg_ReplaceWith(self, _tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	JB_Decr(ch);
	Message* Not = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[679])));
	JB_FreeIfDead(JB_Msg_ReplaceWith(self, Not));
	JB_Tree_SyntaxAppend(Not, self);
	JB_SafeDecr(Not);
	return Not;
}

Message* JB_Msg_NextOf(Message* self, Syntax Need, JB_String* Name) {
	Message* ch = JB_Msg_NextOf2(self, Need, ((Syntax)nil));
	if ((!ch)) {
		return nil;
	}
	if (JB_Msg_SyntaxEquals(ch, Name, true)) {
		return ch;
	}
	JB_Msg_CantFind(self, Need, nil, ch);
	return nil;
}

Message* JB_Msg_NextOf2(Message* self, Syntax Need, Syntax OK) {
	Message* ch = nil;
	if (self) {
		ch = ((Message*)JB_Ring_NextSib(self));
		if ((!Need) or ((JB_Msg_EqualsSyx(ch, Need, false)))) {
			return ch;
		}
		if (((bool)OK) and (JB_Msg_EqualsSyx(ch, OK, false))) {
			ch->Func = OK;
			return ch;
		}
	}
	JB_Msg_CantFind(self, Need, nil, ch);
	return nil;
}

SCDecl* JB_Msg_NiceIsFlagSyntax(Message* self, Message* list, Message* RN, SCBase* name_space, Message* side) {
	JB_Incr(side);
	SCDecl* cls = JB_Incr(SC_TypeOfExpr(self, name_space, nil));
	if ((!(((bool)cls) and SC_Decl_IsNormal(cls)))) {
		JB_Decr(side);
		JB_Decr(cls);
		return nil;
	}
	SCClass* ty = JB_Incr(cls->Type);
	JB_Decr(cls);
	SCFunction* fn = JB_Incr(ty->TheIsFunc);
	if ((!fn)) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, ty->Name);
		JB_FS_AppendString(_fsf0, JB_LUB[1731]);
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Msg_SyntaxExpect(list, _tmPf2);
		JB_Decr(_tmPf2);
		JB_Decr(side);
		JB_Decr(ty);
		JB_Decr(fn);
		return nil;
	}
	JB_Decr(ty);
	SCDecl* arg1 = JB_Incr(((SCDecl*)JB_Array_Value(fn->Args, 1)));
	if ((!arg1)) {
		JB_Msg_SyntaxExpect(fn->Source, JB_LUB[1732]);
		JB_Decr(side);
		JB_Decr(fn);
		JB_Decr(arg1);
		return nil;
	}
	JB_Decr(fn);
	SCClass* LookupType = JB_Incr(arg1->Type);
	JB_Decr(arg1);
	if ((!JB_Msg_Expect(RN, JB_SyxThg, nil))) {
		JB_Decr(side);
		JB_Decr(LookupType);
		return nil;
	}
	//using;
	MessagePosition _using191 = JB_Msg_SyntaxUsing(RN);
	Message* exp = JB_Incr(((Message*)JB_Ring_Parent(self)));
	exp->Func = JB_SyxDot;
	if ((!(side))) {
		Message* bra = JB_Incr(((Message*)JB_Ring_Parent(exp)));
		if ((!JB_Msg_EqualsSyx(bra, JB_SyxBra, false))) {
			JB_SetRef(bra, exp);
		}
		if (JB_Msg_OperatorIn(bra, JB_SyxArg)) {
			if (bra == exp) {
				Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
				JB_SetRef(bra, JB_Msg_WrapWith(exp, _tmPf3));
				JB_Decr(_tmPf3);
			}
			bra->Func = JB_SyxRel;
			JB_Msg_AppendSyx(bra, JB_SyxOpp, JB_LUB[541]);
			JB_Msg_AppendSyx(bra, JB_SyxThg, JB_LUB[107]);
			JB_SetRef(side, ((Message*)JB_Ring_Last(bra)));
		}
		JB_Decr(bra);
	}
	if (JB_Msg_SyntaxEquals(list, JB_LUB[899], false)) {
		JB_SetRef(exp->Name, JB_LUB[1733]);
	}
	 else {
		JB_SetRef(exp->Name, JB_LUB[1734]);
	}
	JB_Msg_BecomeStr(list, JB_SyxPrm, JB_LUB[0]);
	JB_SetRef(list->Obj, nil);
	RN->Func = JB_SyxDot;
	while (JB_FreeIfDead(((Message*)JB_Ring_First(RN)))) {
		Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(RN)));
		JB_Tree_SyntaxAppend(list, _tmPf4);
		JB_Decr(_tmPf4);
	};
	JB_Msg_AppendSyx(RN, JB_SyxThg, LookupType->Name);
	JB_Decr(LookupType);
	JB_Tree_SyntaxAppend(RN, list);
	Message* _tmPf5 = JB_Incr(({
		Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		JB_Tree_SyntaxAppend(__imPf1, RN);
		JB_SafeDecr(__imPf1);
		 __imPf1;
	}));
	JB_Tree_SyntaxAppend(exp, _tmPf5);
	JB_Decr(_tmPf5);
	JB_MsgPos_SyntaxUsingComplete((&_using191));
	SCDecl* _tmPf6 = JB_Incr(SC_TypeOfExpr(exp, name_space, side));
	JB_Decr(exp);
	JB_Decr(side);
	JB_SafeDecr(_tmPf6);
	JB_MsgPos_Destructor((&_using191));
	return _tmPf6;
}

Message* JB_Msg_NiceParent(Message* self) {
	return JB_Msg_UseNonRefChangers(self, true);
}

void JB_Msg_Nil__(Message* self, FastString* fs) {
	debugger;
}

bool JB_Msg_NoPointlessBlockRefs(Message* self, Message* dcl) {
	return true;
}

Message* JB_Msg_NormaliseFunc(Message* self) {
	Message* rz = nil;
	Message* name = JB_Msg_NeedSyx(self, JB_SyxThg);
	if ((!name)) {
		return nil;
	}
	//using;
	MessagePosition _using174 = JB_Msg_SyntaxUsing(name);
	Message* prm = ((Message*)JB_Ring_NextSib(name));
	if (JB_Msg_EqualsSyx(prm, JB_SyxArg, false)) {
		prm = JB_Syx_Msg(JB_SyxPrm, JB_LUB[0]);
		(JB_Ring_NextSibSet(name, prm));
	}
	 else if ((!prm)) {
		prm = JB_Msg_Msg(self, JB_SyxPrm, JB_LUB[0]);
	}
	 else {
		Syntax fn = prm->Func;
		if ((!((fn == JB_SyxBra) or ((fn == JB_SyxList) or (fn == JB_SyxPrm))))) {
			JB_Msg_SyntaxExpect(prm, nil);
			JB_MsgPos_Destructor((&_using174));
			return nil;
		}
		prm->Func = JB_SyxPrm;
	}
	rz = ((Message*)JB_Ring_NextSib(prm));
	if (rz) {
		JB_Msg_Expect(rz, JB_SyxArg, nil);
	}
	 else {
		rz = JB_Msg_Msg(self, JB_SyxArg, JB_LUB[0]);
	}
	JB_MsgPos_SyntaxUsingComplete((&_using174));
	JB_MsgPos_Destructor((&_using174));
	return rz;
}

void JB_Msg_NotNilRZ(Message* self, SCDecl* type, SCBase* space) {
	Message* rel = ((Message*)JB_Ring_Last(self));
	if ((!rel)) {
		return;
	}
	Message* Nel = ((Message*)JB_Ring_Last(rel));
	if ((!Nel)) {
		return;
	}
	if (JB_Msg_EqualsSyx(Nel, JB_SyxType, false)) {
		Nel = ((Message*)JB_Ring_First(Nel));
	}
	if ((JB_Msg_OperatorIsThing(Nel, JB_LUB[106])) and SC_Decl_IsNormalObject(type)) {
		JB_Msg_BecomeStr(Nel, JB_SyxDot, JB_LUB[1383]);
		JB_Tree_SyntaxAppend(Nel, (JB_Syx_Msg(JB_SyxThg, type->Type->Name)));
		JB_Msg_AppendSyx(Nel, JB_SyxPrm, JB_LUB[0]);
		JB_SetRef(Nel->Obj, nil);
		JB_FreeIfDead(SC_TypeOfExpr(Nel, space, nil));
	}
}

void JB_Msg_Num__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
}

JB_String* JB_Msg_Nyme(Message* self) {
	if (self) {
		return self->Name;
	}
	return JB_LUB[0];
}

bool JB_Msg_OarExpand(Message* self) {
	if (JB_Msg_OperatorIn(self, JB_SyxRel)) {
		if (JB_Msg_SyntaxEquals(self, JB_LUB[1735], true)) {
			(JB_Msg_SyntaxDeprecate(self, JB_LUB[1736]));
		}
		JB_SetRef(self->Name, JB_LUB[600]);
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(self)));
		JB_Msg_BunchFix(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return true;
}

void JB_Msg_Oat__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '%');
	JB_Msg_RenderWithSpaces(self, fs, nil);
}

bool JB_Msg_ContainsSyx(Message* self, Syntax s) {
	return ((bool)JB_Msg_FindNested(self, s, nil, false));
}

bool JB_Msg_OperatorIn(Message* self, Syntax f) {
	if ((!self)) {
		return nil;
	}
	Message* p = ((Message*)JB_Ring_Parent(self));
	if (p) {
		return p->Func == f;
	}
	return false;
}

bool JB_Msg_OperatorIsARel(Message* self, JB_String* name) {
	return ((bool)self) and (((JB_Msg_EqualsSyx(self, JB_SyxARel, false))) and ((JB_Str_Equals(self->Name, name, false))));
}

bool JB_Msg_OperatorIsBRel(Message* self, JB_String* name) {
	return ((bool)self) and (((JB_Msg_EqualsSyx(self, JB_SyxBRel, false))) and ((JB_Str_Equals(self->Name, name, false))));
}

bool JB_Msg_OperatorIsDot(Message* self, JB_String* name) {
	return ((bool)self) and (((JB_Msg_EqualsSyx(self, JB_SyxDot, false))) and ((JB_Str_Equals(self->Name, name, true))));
}

bool JB_Msg_OperatorIsRel(Message* self, JB_String* name) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Tree_Get(self, 1)));
	bool _tmPf1 = ((bool)self) and (((JB_Msg_EqualsSyx(self, JB_SyxRel, false))) and ((JB_Str_Equals(_tmPf0->Name, name, false))));
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool JB_Msg_OperatorIsThing(Message* self, JB_String* name) {
	return ((bool)self) and (((JB_Msg_EqualsSyx(self, JB_SyxThg, false))) and ((JB_Str_Equals(self->Name, name, true))));
}

bool JB_Msg_OperatorIsTmp(Message* self, JB_String* name) {
	return ((bool)self) and (((JB_Msg_EqualsSyx(self, JB_SyxTmp, false))) and ((JB_Str_Equals(self->Name, name, false))));
}

bool JB_Msg_OperatorStarts(Message* self, JB_String* s) {
	return JB_Str_MidEquals(self->Name, 0, s, true);
}

void JB_Msg_Opp__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
}

bool JB_Msg_OppExpand(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxOpp, false)) {
		if ((JB_Msg_SyntaxEquals(self, JB_LUB[1735], true)) or (JB_Msg_SyntaxEquals(self, JB_LUB[1737], true))) {
			return JB_Msg_OarExpand(self);
		}
		if (JB_Msg_SyntaxEquals(self, JB_LUB[1738], true)) {
			return JB_Msg_InitExpand(self);
		}
	}
	return false;
}

int JB_Msg_OpScore(Message* self) {
	if (self->Obj) {
		return ((SCOperator*)self->Obj)->Score;
	}
	SCOperator* op = ((SCOperator*)JB_Dict_ValueLower(SC__Opp_Dict, self->Name));
	if (op) {
		JB_SetRef(self->Obj, op);
		return op->Score;
	}
	return SC__Opp_CustomOperatorScore;
}

JB_String* JB_Msg_OriginalParseData(Message* self) {
	JB_MemoryLayer* L = JB_Msg_OriginalParseLayer(self);
	if (((bool)L) and JB_Object_Isa(L->Obj2, JB_AsClass(JB_String))) {
		return ((JB_String*)L->Obj2);
	}
	return JB_LUB[0];
}

JB_MemoryLayer* JB_Msg_OriginalParseLayer(Message* self) {
	if ((!self)) {
		return nil;
	}
	JB_MemoryLayer* L = JB_ObjLayer(self);
	if (((bool)L) and (L != JB_Class_DefaultLayer((JB_AsClass(Message))))) {
		return L;
	}
	return nil;
}

int JB_Msg_ParamNum(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxThg, false)) {
		if (JB_Msg_SyntaxEquals(self, JB_LUB[331], false)) {
			return 0;
		}
		if (JB_Str_ByteValue(self->Name, 0) == '_') {
			if (JB_Msg_Length(self) == 1) {
				return 1;
			}
			if (JB_Rec_OK(JB_StdErr)) {
				return JB_Msg_Int(self, 0);
			}
		}
	}
	return -1;
}

Message* JB_Msg_ParentPoint(Message* self) {
	Message* curr = self;
	while (curr) {
		Message* OldMsg = curr;
		curr = ((Message*)JB_Ring_Parent(curr));
		if (JB_Msg_EqualsSyx(curr, JB_SyxArg, false)) {
			return OldMsg;
		}
	};
	return nil;
}

Message* JB_Msg_ParseShaderSub(Message* self) {
	Message* rz = nil;
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Parent(self)));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Tree_Get(_tmPf2, 0)));
	JB_Decr(_tmPf2);
	JB_String* Name = JB_Incr(_tmPf1->Name);
	JB_Decr(_tmPf1);
	if ((!JB_Str_Exists(Name))) {
		Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Parent(self)));
		JB_Msg_SyntaxExpect(_tmPf3, JB_LUB[1739]);
		JB_Decr(_tmPf3);
		JB_Decr(rz);
		JB_Decr(Name);
		return nil;
	}
	JB_SetRef(rz, JB_Msg_FindShader(self, Name));
	if ((!rz)) {
		JB_Decr(rz);
		JB_Decr(Name);
		return nil;
	}
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[1740]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[1741]);
	JB_FS_AppendString(_fsf0, Name);
	JB_Decr(Name);
	JB_FS_AppendString(_fsf0, JB_LUB[1742]);
	JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	Message* StaticAdditions = JB_Incr(JB_Str_Parse(_tmPf4, JB_SyxArg, true));
	JB_Decr(_tmPf4);
	SC_AddToStaticSection(self, StaticAdditions);
	JB_Decr(StaticAdditions);
	JB_SafeDecr(rz);
	return rz;
}

void JB_Msg_pinn__(Message* self, FastString* fs) {
	Message* f = ((Message*)JB_Ring_First(self));
	Message* opp = ((Message*)JB_Ring_NextSib(f));
	Message* l = ((Message*)JB_Ring_NextSib(opp));
	JB_FS_SyntaxAppend(fs, f);
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, ((Message*)JB_Ring_Last(opp)));
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, l);
	JB_FS_AppendString(fs, JB_LUB[1743]);
	JB_FS_SyntaxAppend(fs, ((Message*)JB_Ring_First(opp)));
}

Message* JB_Msg_PoorAnt(Message* self) {
	if (self) {
		return ((Message*)JB_Ring_Parent(self));
	}
	return nil;
}

void JB_Msg_PrepareAST(Message* self) {
	Message* After = ((Message*)JB_Ring_FlatAfter(self));
	Message* msg = self;
	while (((bool)msg) and (msg != After)) {
		if (((JB_Msg_EqualsSyx(msg, JB_SyxTmp, false))) and ((JB_Msg_SyntaxEquals(msg, JB_LUB[1707], false)) or (JB_Msg_SyntaxEquals(msg, JB_LUB[876], false)))) {
			SC_Func__Tran_FuncTable(msg);
		}
		msg = ((Message*)JB_Ring_FlatNext0(msg));
	};
}

int JB_Msg_PrevIndentCheck(Message* self, Message* pr) {
	int prin = JB_Msg_CleanIndent(pr);
	int chin = JB_Msg_CleanIndent(self);
	if ((!((prin != chin) and ((prin != 254) and (chin != 254))))) {
		return nil;
	}
	int IndExtra = chin - prin;
	if (JB_int_OperatorIsa(IndExtra, 2)) {
		if (IndExtra == 4) {
			return IndExtra;
		}
		if (IndExtra < 0) {
			if ((JB_int_OperatorIsa(IndExtra, 4)) or ((JB_int_OperatorIsa(chin, 4)) or (JB_Msg_InInvisArg(self)))) {
				return IndExtra;
			}
		}
		if ((IndExtra > 0) and ((JB_Msg_EqualsSyx(pr, JB_SyxTmp, false)))) {
			return IndExtra;
		}
	}
	FastString* _fsf0 = JB_FS__New();
	JB_FS_AppendString(_fsf0, JB_LUB[1744]);
	JB_FS_AppendInt32(_fsf0, prin);
	JB_FS_AppendString(_fsf0, JB_LUB[1745]);
	JB_FreeIfDead(JB_Tk__ErrorAlwaysAdd(JB_FS_GetResult(_fsf0), pr->Position));
	FastString* _fsf1 = JB_FS__New();
	JB_FS_AppendString(_fsf1, JB_LUB[1744]);
	JB_FS_AppendInt32(_fsf1, chin);
	JB_FS_AppendString(_fsf1, JB_LUB[1745]);
	JB_FreeIfDead(JB_Tk__ErrorAlwaysAdd(JB_FS_GetResult(_fsf1), self->Position));
	return 0;
}

void JB_Msg_Prm__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '(');
	{
		Message* ch = ((Message*)JB_Tree_First_(self));
		Message* _firstf2 = ch;
		while (ch) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(ch)));
			if (_firstf2 != ch) {
				JB_FS_AppendString(fs, JB_LUB[164]);
			}
			//start;
			JB_FS_SyntaxAppend(fs, ch);
			ch = _Nf1;
		};
		(self);
	}
	;
	JB_FS_AppendByte(fs, ')');
}

void JB_Msg_Ques__(Message* self, FastString* fs) {
	Message* f = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!f)) {
		JB_Decr(f);
		return;
	}
	JB_FS_AppendString(fs, JB_LUB[483]);
	JB_FS_SyntaxAppend(fs, f);
	Message* n = JB_Incr(((Message*)JB_Ring_NextSib(f)));
	JB_Decr(f);
	if ((!n)) {
		JB_Decr(n);
		return;
	}
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, n);
	JB_Decr(n);
}

void JB_Msg_Quot__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[533]);
	{
		Message* ch = ((Message*)JB_Tree_First_(self));
		while (ch) {
			Message* _Nf1 = ((Message*)((Message*)JB_Ring_NextSib(ch)));
			JB_FS_SyntaxAppend(fs, ch);
			if (((Message*)JB_Ring_NextSib(ch))) {
				JB_FS_AppendString(fs, JB_LUB[164]);
			}
			ch = _Nf1;
		};
		(self);
	}
	;
	JB_FS_AppendString(fs, JB_LUB[1746]);
}

IntRange JB_Msg_range(Message* self) {
	return ((IntRange)ivec2{self->Position, self->Position + self->Extra});
}

void JB_Msg_rangeSet(Message* self, IntRange r) {
	self->Position = r[0];
	self->Extra = (JB_Rg_Width(r) | JB__Tk_BaseExtra);
}

int JB_Msg_RC_HasTemporary(Message* self) {
	if (((JB_Msg_EqualsSyx(self, JB_SyxFunc, false))) or (JB_Msg_IsStatementExpr(self))) {
		return SC_Refs__RefBasisStruct(self, false);
	}
	return 0;
}

bool JB_Msg_RefDisappears(Message* self) {
	{
		Message* _LoopSrcf1 = JB_Incr(((Message*)JB_Ring_Parent(self)));
		Message* P = JB_Incr(_LoopSrcf1);
		while (P) {
			if (JB_Msg_EqualsSyx(P, JB_SyxBra, false)) {
				0;
			}
			 else if (JB_Msg_EqualsSyx(P, JB_SyxType, false)) {
				SCDecl* D = JB_Incr(JB_Msg_AsDecl(P));
				if (((bool)D) and (!SC_Decl_IsNormalObject(D))) {
					JB_Decr(_LoopSrcf1);
					JB_Decr(P);
					JB_Decr(D);
					return true;
				}
				JB_Decr(D);
			}
			 else if (JB_Msg_EqualsSyx(P, JB_SyxRel, false)) {
				Message* _tmPf2 = JB_Incr(((Message*)JB_Tree_Get(P, 1)));
				JB_Object* comp = JB_Incr(_tmPf2->Obj);
				JB_Decr(_tmPf2);
				if (JB_Object_FastIsa(comp, JB_AsClass(SCOperator))) {
					JB_Decr(_LoopSrcf1);
					JB_Decr(P);
					bool _tmPf3 = ((SCOperator*)comp)->IsCompare and (!((SCOperator*)comp)->IsCustom);
					JB_Decr(comp);
					return (_tmPf3);
				}
				JB_Decr(comp);
				JB_Decr(_LoopSrcf1);
				JB_Decr(P);
				return false;
			}
			 else {
				JB_Decr(_LoopSrcf1);
				JB_Decr(P);
				return false;
			}
			JB_SetRef(P, ((Message*)JB_Ring_Parent(P)));
		};
		JB_Decr(P);
		(_LoopSrcf1);
		JB_Decr(_LoopSrcf1);
	}
	;
	return false;
}

void JB_Msg_Rel__(Message* self, FastString* fs) {
	JB_Msg_RenderWithSpaces(self, fs, nil);
}

bool JB_Msg_RelFix(Message* self, bool force) {
	bool rz = false;
	if ((!(JB_Msg_AndOrExpansionTest(self) != -1))) {
		return nil;
	}
	Message* One = JB_Incr(((Message*)JB_Ring_First(self)));
	Message* Plus = JB_Incr(((Message*)JB_Ring_NextSib(One)));
	if (force or (!Plus->Obj)) {
		int PlusScore = JB_Msg_OpScore(Plus);
		Message* SubRel = JB_Incr(((Message*)JB_Ring_NextSib(Plus)));
		if (JB_Msg_SyntaxEquals(Plus, JB_LUB[1718], false)) {
			JB_Msg_FixErl(self);
		}
		 else if (JB_Msg_EqualsSyx(SubRel, JB_SyxRel, false)) {
			rz = JB_Msg_RelFix(SubRel, true);
			if ((!(JB_Msg_OperatorIn(self, JB_SyxDecl) or JB_Msg_OperatorIn(self, JB_SyxArg)))) {
				Message* Two = JB_Incr(((Message*)JB_Ring_First(SubRel)));
				Message* LessThan = JB_Incr(((Message*)JB_Ring_NextSib(Two)));
				JB_Decr(Two);
				Message* Last = JB_Incr(((Message*)JB_Ring_NextSib(LessThan)));
				if (JB_Msg_OpScore(LessThan) > PlusScore) {
					JB_Tree_SyntaxAppend(self, LessThan);
					JB_Tree_SyntaxAppend(self, Last);
					(JB_Ring_FirstSet(SubRel, Plus));
					(JB_Ring_FirstSet(SubRel, One));
					JB_Msg_RelFix(SubRel, true);
					rz = true;
				}
				JB_Decr(Last);
				JB_Decr(LessThan);
			}
		}
		JB_Decr(SubRel);
	}
	JB_Decr(Plus);
	JB_Decr(One);
	return rz;
}

void JB_Msg_RemoveElseIf(Message* self) {
	Message* arg = ((Message*)JB_Ring_NextSib(self));
	Message* after = ((Message*)JB_Ring_NextSib(arg));
	if ((!after)) {
		JB_Msg_SafeRemove(((Message*)JB_Ring_Parent(self)), JB_SyxSheb);
		return;
	}
	if (JB_Msg_EqualsSyx(arg, JB_SyxArg, false)) {
		JB_Tree_Clear(arg);
	}
	JB_FreeIfDead(JB_Msg_NeedBra(self));
}

Message* JB_Msg_RemoveTypeCasts(Message* self) {
	Message* rz = nil;
	while (((bool)rz) and ((JB_Msg_EqualsSyx(rz, JB_SyxBra, false)) or (JB_Msg_EqualsSyx(rz, JB_SyxType, false)))) {
		rz = ((Message*)JB_Ring_First(rz));
	};
	return rz;
}

JB_String* JB_Msg_Render(Message* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_SyntaxAppend(fs, self);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Msg_render_jbin(Message* self, JB_String* sheb, FastString* fs_in) {
	FastString* fs = JB_FS__FastNew(fs_in);
	if ((!self)) {
		return nil;
	}
	FastString* js = ((FastString*)fs);
	JB_bin_sheb(js, sheb);
	JB_bin_jinit(js);
	Message* ch = self;
	Message* after = ((Message*)JB_Ring_FlatAfter(self));
	while (ch != after) {
		int Depth = 0;
		Message* curr = ch;
		ch = ((Message*)JB_Ring_FlatNextDepth(ch, (&Depth), true));
		JB_bin_add(js, curr->Func, curr->Name, Depth > 0);
		JB_bin_up(js, (-Depth));
	};
	return JB_FS_SmartResult(fs, fs_in);
}

void JB_Msg_RenderPrm(Message* self, FastString* fs, byte b1, byte b2) {
	JB_FS_AppendByte(fs, b1);
	JB_Msg_FSListSep(self, fs, JB_LUB[164]);
	JB_FS_AppendByte(fs, b2);
}

JB_String* JB_Msg_RenderType(Message* self) {
	if ((!self)) {
		debugger;
		return nil;
	}
	JB_Object* D = JB_Incr(self->Obj);
	if (JB_Object_FastIsa(D, JB_AsClass(SCDecl))) {
		Message* _tmPf0 = JB_Incr(SC_Decl_WriteSimpleType(((SCDecl*)D)));
		JB_Decr(D);
		JB_String* _tmPf1 = JB_Incr(JB_Msg_Render(_tmPf0, nil));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	JB_Decr(D);
	return JB_Msg_Render(self, nil);
}

JB_String* JB_Msg_RenderTypeAndName(Message* self) {
	SCDecl* d = JB_Incr(JB_Msg_MsgDecl(self));
	if (d) {
		JB_String* _tmPf0 = JB_Incr(SC_Decl_RenderTypeAndName(d, true));
		JB_Decr(d);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(d);
	return JB_Msg_Render(self, nil);
}

void JB_Msg_RenderWithSpaces(Message* self, FastString* fs, Message* ch) {
	if ((!(ch))) {
		ch = ((Message*)JB_Ring_First(self));
	}
	while (ch) {
		JB_FS_SyntaxAppend(fs, ch);
		ch = ((Message*)JB_Ring_NextSib(ch));
		if ((!ch)) {
			return;
		}
		JB_FS_AppendByte(fs, ' ');
	};
}

void JB_Msg_ReplaceInbuilt(Message* self, SCBase* name_space, SCDecl* sulf, Message* sulf_exp) {
	Message* m = JB_Incr(JB_Msg_ReplaceInbuiltSub(self, name_space, sulf, sulf_exp));
	if (m) {
		JB_Msg_SafeReplaceWith(self, m);
	}
	JB_Decr(m);
}

Message* JB_Msg_ReplaceInbuiltSub(Message* self, SCBase* name_space, SCDecl* self_decl, Message* self_exp) {
	Message* f = JB_Incr(((Message*)JB_Ring_First(self)));
	if (JB_Msg_OperatorIsThing(f, JB_LUB[1747])) {
		if ((!(self_decl->C_Array))) {
			JB_Msg_SyntaxExpect(self_exp, JB_LUB[1748]);
			JB_Decr(f);
			return nil;
		}
		JB_Decr(f);
		return (JB_Syx_IntMsg(JB_SyxNum, self_decl->C_Array));
	}
	 else if (JB_Msg_OperatorIsThing(f, JB_LUB[1749])) {
		JB_Decr(f);
		return JB_Msg_InbuiltSizeOf(self, name_space, self_decl, self_exp);
	}
	 else if ((!f) and (JB_Msg_SyntaxEquals(self, JB_LUB[512], false))) {
		JB_Decr(f);
		return JB_Msg_NiceCopy(self_exp, nil);
	}
	 else {
		if ((!false)) {
			JB_Msg_SyntaxExpect(self_exp, nil);
		}
	}
	JB_Decr(f);
	return nil;
}

Message* JB_Msg_ReplaceInto(Message* self, Message* w) {
	(JB_Ring_PrevSibSet(self, w));
	JB_Tree_SyntaxAppend(w, self);
	return w;
}

Message* JB_Msg_ReplaceWith(Message* self, Message* j) {
	(JB_Ring_PrevSibSet(self, j));
	JB_Tree_Remove(self);
	return j;
}

Message* JB_Msg_ReplaceWithChild(Message* self) {
	Message* rz = nil;
	JB_SetRef(rz, ((Message*)JB_Ring_First(self)));
	(JB_Ring_PrevSibSet(self, rz));
	JB_Tree_Remove(self);
	JB_SafeDecr(rz);
	return rz;
}

JB_Object* JB_Msg_RestoreLoad(Message* self) {
	JB_Object* rz = nil;
	ObjectLoader L = ((ObjectLoader){});
	if ((!JB_LD_VerifyFormat((&L), self))) {
		JB_Decr(rz);
		JB_LD_destructor((&L));
		return nil;
	}
	Dictionary* objs = JB_Incr(JB_Dict__New());
	JB_LD_Preload((&L), self, objs);
	if (JB_Rec_OK(JB_StdErr)) {
		JB_LD_LoadForReal((&L), self, objs);
	}
	JB_SetRef(rz, L.Result);
	JB_LD_Finish((&L));
	JB_ObjClass(objs);
	JB_Decr(objs);
	JB_SafeDecr(rz);
	JB_LD_destructor((&L));
	return rz;
}

Message* JB_Msg_Resync(Message* self, Message* parent) {
	Message* curr = JB_Incr(self);
	while (((bool)curr) and (JB_FreeIfDead(((Message*)JB_Ring_Parent(curr))) != parent)) {
		JB_SetRef(curr, ((Message*)JB_Ring_Parent(curr)));
	};
	JB_SafeDecr(curr);
	return curr;
}

void JB_Msg_safe(Message* self, FastString* fs) {
	JB_Str_safe(self->Name, fs);
}

void JB_Msg_SafeRemove(Message* self, Syntax T) {
	JB_Msg_BecomeStr(self, T, JB_LUB[0]);
	(JB_Msg_SyntaxIsSet(self, kJB__MsgUIFlags_Inserted, true));
	{
		Message* c = JB_Incr(((Message*)JB_Tree_First_(self)));
		while (c) {
			Message* _Nf1 = JB_Incr(((Message*)((Message*)JB_Ring_NextSib(c))));
			JB_Tree_Remove(c);
			JB_SetRef(c, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(c);
		(self);
	};
}

void JB_Msg_SafeReplaceWith(Message* self, Message* Incoming) {
	JB_Msg_SafeRemove(self, JB_SyxBra);
	JB_Tree_SyntaxAppend(self, Incoming);
}

SCArg* JB_Msg_SCArg(Message* self, SCBase* p, Message* avoid) {
	JB_Incr(p);
	if ((!(JB_Msg_EqualsSyx(self, JB_SyxArg, false)))) {
		debugger;
		JB_Decr(p);
		return nil;
	}
	if (((bool)avoid) and ((!JB_Msg_EqualsSyx(avoid, JB_SyxArg, false)) and (!JB_Msg_EqualsSyx(avoid, JB_SyxTmp, false)))) {
		if (JB_Object_FastIsa(p, JB_AsClass(SCArg))) {
			JB_SafeDecr(p);
			return ((SCArg*)p);
		}
		debugger;
		JB_Decr(p);
		return nil;
	}
	SCArg* R = JB_Incr(JB_Msg_AsArg(self));
	if ((!(p))) {
		JB_SetRef(p, JB_Msg_MsgArg(self));
	}
	if ((!R) and ((bool)p)) {
		JB_SetRef(R, SC_Arg__New(self));
		if (JB_Object_FastIsa(p, JB_AsClass(SCArg))) {
			JB_SetRef(R->ParentFunc, ((SCArg*)p)->ParentFunc);
			R->IsClassArg = ((SCArg*)p)->IsClassArg;
			R->Lookup = ((SCArg*)p);
		}
		 else if (JB_Object_FastIsa(p, JB_AsClass(SCFunction))) {
			JB_SetRef(R->ParentFunc, p);
			R->IsClassArg = ((bool)((SCFunction*)p)->Cls);
			R->Lookup = ((SCFunction*)p)->Lookup;
		}
		JB_SetRef(self->Obj, R);
	}
	JB_Decr(p);
	JB_SafeDecr(R);
	return R;
}

SCArg* JB_Msg_SCArgNested(Message* self, Message* base, SCBase* p) {
	Message* curr = JB_Incr(self);
	Message* cp = JB_Incr(JB_Msg_Ancestor(curr, JB_SyxArg));
	JB_Decr(curr);
	if (cp == base) {
		JB_Decr(cp);
		return JB_Msg_SCArg(self, p, nil);
	}
	SCArg* p2 = JB_Incr(JB_Msg_SCArgNested(cp, base, p));
	JB_Decr(cp);
	SCArg* _tmPf0 = JB_Incr(JB_Msg_SCArg(self, p2, nil));
	JB_Decr(p2);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

SCFile* JB_Msg_SCFile(Message* self) {
	{
		Message* S = JB_Incr(self);
		while (S) {
			JB_MemoryLayer* _tmPf1 = JB_Incr(JB_ObjLayer(S));
			JB_Object* r = JB_Incr(_tmPf1->Obj);
			JB_Decr(_tmPf1);
			if (JB_Object_FastIsa(r, JB_AsClass(SCFile))) {
				JB_Decr(S);
				JB_SafeDecr(r);
				return ((SCFile*)r);
			}
			JB_Decr(r);
			if ((!(!JB_Msg_EqualsSyx(S, JB_SyxArg, false)))) {
				JB_Decr(S);
				return nil;
			}
			JB_SetRef(S, ((Message*)JB_Ring_Parent(S)));
		};
		JB_Decr(S);
		(self);
	}
	;
	return nil;
}

void JB_Msg_SCnj__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
}

void JB_Msg_SCom__(Message* self, FastString* fs) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendString(fs, JB_LUB[1750]);
	if (JB_Tree_HasOneChild(ch)) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(ch)));
		JB_FS_SyntaxAppend(fs, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else {
		JB_Msg_FSListArg(ch, fs);
		JB_FS_AppendByte(fs, '\n');
	}
	JB_Decr(ch);
	JB_FS_AppendString(fs, JB_LUB[1751]);
}

void JB_Msg_SDot__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '.');
	JB_FS_AppendString(fs, self->Name);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
}

bool JB_Msg_SettingToNil(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxDecl, false)) {
		Message* d = JB_Incr(((Message*)JB_Ring_Last(self)));
		if (((JB_Msg_EqualsSyx(d, JB_SyxRel, false))) and ((({
			Message* _tmP287 = JB_Incr(((Message*)JB_Ring_Last(d)));
			bool _tmP286 = JB_Msg_SyntaxEquals(_tmP287, JB_LUB[106], true);
			JB_Decr(_tmP287);
			 _tmP286;
		})))) {
			JB_Decr(d);
			return true;
		}
		JB_Decr(d);
	}
	return false;
}

bool JB_Msg_ShallowEquals(Message* self, Message* B, bool Aware) {
	return (self->Func == B->Func) and JB_Str_Equals(self->Name, B->Name, Aware);
}

void JB_Msg_Sheb__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[523]);
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendByte(fs, '\n');
}

void JB_Msg_SlidePositions(Message* self, int add) {
	{
		Message* s = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)s) and (s != _afterf1)) {
			Message* _N_f2 = ((Message*)((Message*)JB_Ring_FlatNext0(s)));
			if (s->Position >= 0) {
				s->Position = (s->Position + add);
			}
			s = _N_f2;
		};
		(self);
	};
}

void JB_Msg_SStr__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[496]);
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendString(fs, JB_LUB[497]);
}

void JB_Msg_SThg__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
}

void JB_Msg_Str__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '"');
	JB_FS_AppendEscape(fs, self->Name);
	{
		Message* ch = JB_Incr(((Message*)JB_Tree_First_(self)));
		while (ch) {
			Message* _Nf1 = JB_Incr(((Message*)((Message*)JB_Ring_NextSib(ch))));
			if (JB_Msg_EqualsSyx(ch, JB_SyxEmb, false)) {
				JB_FS_AppendEscape(fs, ch->Name);
			}
			 else {
				JB_FS_AppendByte(fs, '$');
				JB_FS_AppendByte(fs, '{');
				JB_FS_SyntaxAppend(fs, ch);
				JB_FS_AppendByte(fs, '}');
			}
			JB_SetRef(ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(ch);
		(self);
	}
	;
	JB_FS_AppendByte(fs, '"');
}

Message* JB_Msg_NeedSyxOK(Message* self, Syntax Need, Syntax OK) {
	if (self) {
		Message* found = ((Message*)JB_Ring_First(self));
		if (found) {
			if ((JB_Msg_EqualsSyx(found, OK, false)) or ((JB_Msg_EqualsSyx(found, Need, false)) or (OK == JB_SyxNil))) {
				return found;
			}
		}
		 else if (OK != JB_SyxNil) {
			JB_Msg_CantFind(self, Need, nil, found);
		}
	}
	return nil;
}

Message* JB_Msg_NeedSyx(Message* self, Syntax s) {
	if (self) {
		Message* found = ((Message*)JB_Ring_First(self));
		if (found) {
			if ((s == nil) or (JB_Msg_EqualsSyx(found, s, false))) {
				return found;
			}
		}
		JB_Msg_CantFind(self, s, nil, found);
	}
	return nil;
}

Message* JB_Msg_NeedSyxInt(Message* self, Syntax s, int n) {
	Message* Ch = ((Message*)JB_Tree_Get(self, n));
	if (((bool)Ch) and ((Ch->Func == s) or (!s))) {
		return Ch;
	}
	JB_Msg_CantFind(self, s, nil, Ch);
	return nil;
}

Message* JB_Msg_NeedSyxName(Message* self, Syntax s, JB_String* name) {
	Message* f = JB_Msg_NeedSyx(self, s);
	if (JB_Msg_Expect(f, JB_SyxNil, name)) {
		return f;
	}
	return nil;
}

void JB_Msg_SetStr(Message* self, JB_String* key, JB_String* Value) {
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxStr, Value));
	(JB_Msg_SetMsg(self, key, _tmPf0));
	JB_Decr(_tmPf0);
}

void JB_Msg_SetMsg(Message* self, JB_String* key, Message* Value) {
	if ((!self)) {
		debugger;
		return;
	}
	JB_Tree_SyntaxAppend(JB_Msg_AccessAdd(self, key), Value);
}

Message* JB_Msg_GetConf(Message* self, JB_String* key, bool Err) {
	{
		Message* _LoopSrcf1 = JB_Msg_ConfArg(self);
		Message* item = JB_config_conffirst(_LoopSrcf1);
		while (item) {
			if (JB_Msg_SyntaxEquals(item, key, true)) {
				Message* f = ((Message*)JB_Ring_First(item));
				if (f) {
					return f;
				}
				return item;
			}
			item = ((Message*)JB_Ring_NextSib(item));
		};
	}
	;
	if (Err) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(self, JB_Str_OperatorPlus(key, JB_LUB[1752]));
		}
	}
	return nil;
}

void JB_Msg_SyntaxAppend(Message* self, JB_String* key) {
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxStr, key));
	JB_Tree_SyntaxAppend(self, _tmPf0);
	JB_Decr(_tmPf0);
}

void JB_Msg_AppendSyx(Message* self, Syntax Fn, JB_String* name) {
	JB_FreeIfDead(JB_Syx_ParentMsg(Fn, self, name));
}

void JB_Msg_AppendNum(Message* self, int64 Num) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(Num, nil));
	JB_FreeIfDead(JB_Syx_ParentMsg(JB_SyxNum, self, _tmPf0));
	JB_Decr(_tmPf0);
}

void JB_Msg_SyntaxDeprecate(Message* self, JB_String* Error) {
	JB_Rec_NewProblem(JB_StdErr, self, Error);
}

bool JB_Msg_SyntaxEquals(Message* self, JB_String* name, bool Aware) {
	return ((bool)self) and JB_Str_Equals(self->Name, name, Aware);
}

bool JB_Msg_EqualsSyx(Message* self, Syntax X, bool Aware) {
	return ((bool)self) and (self->Func == X);
}

void JB_Msg_SyntaxExpect(Message* self, JB_String* Error) {
	JB_Incr(Error);
	if ((!JB_Str_Exists(Error))) {
		if ((!self)) {
			JB_Object_SyntaxExpect(nil);
			JB_Decr(Error);
			return;
		}
		JB_String* _tmPf0 = JB_Incr(JB_Msg_MiniName(self));
		JB_SetRef(Error, JB_Str_OperatorPlus(JB_LUB[467], _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_Rec_NewErrorWithNode(JB_StdErr, self, Error, nil);
	JB_Decr(Error);
}

bool JB_Msg_SyntaxIs(Message* self, MsgUIFlags F) {
	if (self) {
		return ((bool)(self->Flags & F));
	}
	return false;
}

void JB_Msg_SyntaxIsSet(Message* self, MsgUIFlags F, bool Value) {
	if (self) {
		if (Value) {
			self->Flags = (self->Flags | F);
		}
		 else {
			self->Flags = (self->Flags & (~F));
		}
	}
}

bool JB_Msg_SyntaxIsnt(Message* self, MsgUIFlags F) {
	return (!JB_Msg_SyntaxIs(self, F));
}

MessagePosition JB_Msg_SyntaxUsing(Message* self) {
	MessagePosition Result = ((MessagePosition){});
	Result.OldPosition = JB__Tk_UsingPos;
	Result.OldLayer = JB_Class_Layer((JB_AsClass(Message)));
	if (self) {
		JB__Tk_UsingPos = self->Position;
		JB__Tk_UsingExtra = self->Extra;
		JB_Mem_Use(JB_ObjLayer(self));
	}
	 else {
		debugger;
	}
	return Result;
}

void JB_Msg_SyntaxWarn(Message* self, JB_String* Error) {
	JB_Incr(Error);
	if ((!(JB_Str_Exists(Error)))) {
		JB_String* _tmPf0 = JB_Incr(JB_Msg_MiniName(self));
		JB_SetRef(Error, JB_Str_OperatorPlus(JB_LUB[467], _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_Rec_NewWarning(JB_StdErr, self, Error);
	JB_Decr(Error);
}

bool JB_Msg_TargetTest(Message* self) {
	JB_Msg_Expect(self, JB_SyxThg, nil);
	if (JB_Msg_SyntaxEquals(self, JB_LUB[302], true)) {
		return SC__Options_TargetDebug;
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[1753], true)) {
		return (!SC__Options_TargetDebug);
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[173], true)) {
		return ((bool)SC__Options_Perry);
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[1754], true)) {
		return SC__Options_ProjectIsMiniLib;
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[107], true)) {
		return true;
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[108], true)) {
		return false;
	}
	if ((JB_Msg_SyntaxEquals(self, JB_LUB[564], true)) or (JB_Msg_SyntaxEquals(self, JB_LUB[565], true))) {
		return JB_Platform__OSX();
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[566], true)) {
		return JB_Platform__windows();
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[1755], true)) {
		return JB_Platform__linux();
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[275], true)) {
		return SC__Options_IsDirectTest;
	}
	return SC_Targets__SyntaxAccess(self->Name);
}

Message* JB_Msg_TempIntoBlock(Message* self, Message* ParentPlace) {
	Message* rz = nil;
	Message* FuncMsg = JB_Incr(((Message*)JB_Ring_Parent(self)));
	if (((JB_Msg_EqualsSyx(FuncMsg, JB_SyxDot, false))) and (JB_FreeIfDead(((Message*)JB_Ring_First(FuncMsg))) == self)) {
		0;
	}
	 else {
		if ((!(JB_Msg_EqualsSyx(FuncMsg, JB_SyxPrm, false)))) {
			debugger;
			JB_Decr(rz);
			JB_Decr(FuncMsg);
			return nil;
		}
		JB_SetRef(FuncMsg, ((Message*)JB_Ring_Parent(FuncMsg)));
	}
	SCFunction* fn = JB_Incr(JB_Msg_MsgFunc(FuncMsg));
	if ((!(((JB_Msg_EqualsSyx(FuncMsg, JB_SyxFunc, false)) or (JB_Msg_EqualsSyx(FuncMsg, JB_SyxDot, false))) and ((!fn) or (JB_ObjClass(fn) == JB_AsClass(SCFunction)))))) {
		debugger;
		JB_Decr(rz);
		JB_Decr(FuncMsg);
		JB_Decr(fn);
		return nil;
	}
	if ((!(((bool)fn) and ((bool)fn->ReturnType)))) {
		JB_FreeIfDead(SC_Func__TempMoveOut(self, ParentPlace));
		JB_Decr(rz);
		JB_Decr(FuncMsg);
		JB_Decr(fn);
		return nil;
	}
	JB_Decr(fn);
	MessagePosition Using = JB_Msg_SyntaxUsing(self);
	Message* arg = JB_Incr(JB_Msg_HasOwnBlock(FuncMsg));
	Message* TmpFuncThg = nil;
	Message* TmpFuncDecl = nil;
	if (arg) {
		Message* rel = JB_Incr(((Message*)JB_Ring_Parent(FuncMsg)));
		JB_SetRef(TmpFuncDecl, ((Message*)JB_Ring_Parent(rel)));
		JB_SetRef(TmpFuncThg, ((Message*)JB_Ring_First(rel)));
		JB_Decr(rel);
	}
	 else {
		JB_SetRef(arg, JB_Msg_CreateOwnBlock(FuncMsg, true));
		if ((!arg)) {
			JB_Decr(rz);
			JB_Decr(FuncMsg);
			JB_MsgPos_Destructor((&Using));
			JB_Decr(arg);
			JB_Decr(TmpFuncThg);
			JB_Decr(TmpFuncDecl);
			return nil;
		}
		JB_String* TmpFuncVar = JB_Incr(SC_UniqueTmpVar(nil, JB_LUB[1628]));
		JB_SetRef(TmpFuncThg, JB_Msg_TheTmpVarOf(self, TmpFuncVar));
		JB_SetRef(TmpFuncDecl, SC_MakeDecl(JB_LUB[0], TmpFuncVar, FuncMsg));
		JB_Decr(TmpFuncVar);
		JB_Tree_SyntaxAppend(arg, TmpFuncDecl);
		Message* _tmPf1 = JB_Incr(({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[690])));
			JB_Tree_SyntaxAppend(__imPf0, TmpFuncThg);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
		JB_Tree_SyntaxAppend(arg, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(TmpFuncThg);
	JB_Decr(arg);
	JB_String* TmpParamName = JB_Incr(SC_UniqueTmpVar(nil, JB_LUB[1628]));
	JB_SetRef(rz, JB_Msg_TheTmpVarOf(FuncMsg, TmpParamName));
	JB_Decr(FuncMsg);
	JB_FreeIfDead(JB_Msg_ReplaceWith(self, rz));
	Message* TmpParamDecl = JB_Incr(SC_MakeDecl(JB_LUB[0], TmpParamName, self));
	JB_Decr(TmpParamName);
	(JB_Ring_PrevSibSet(TmpFuncDecl, TmpParamDecl));
	JB_Decr(TmpParamDecl);
	JB_Decr(TmpFuncDecl);
	JB_SafeDecr(rz);
	JB_MsgPos_Destructor((&Using));
	return rz;
}

void JB_Msg_Test(Message* self, JB_String* new_render, JB_String* name) {
	if ((!(JB_Msg_TestSub(self, new_render, name)))) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[1756]);
		JB_FS_AppendString(_fsf0, name);
		JB_FS_AppendString(_fsf0, JB_LUB[1757]);
		JB_FS_AppendString(_fsf0, new_render);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Str_Print(_tmPf1);
		JB_Decr(_tmPf1);
		JB_Rec_Clear(JB_StdErr);
	}
}

void JB_Msg_test_style(Message* self) {
	bool b = false;
	{
		Message* s = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)s) and (s != _afterf1)) {
			Message* _N_f2 = ((Message*)((Message*)JB_Ring_FlatNext0(s)));
			if ((JB_Msg_EqualsSyx(s, JB_SyxArg, false)) or (JB_Msg_EqualsSyx(s, JB_SyxList, false))) {
				b = (!b);
				((JB_Msg_SyntaxIsSet(s, kJB__MsgUIFlags_Style2, b)));
			}
			s = _N_f2;
		};
		(self);
	};
}

bool JB_Msg_TestFuncName(Message* self) {
	Syntax fn = self->Func;
	if ((!((fn != JB_SyxFunc) and ((fn != JB_SyxPrm) and (fn != JB_SyxList))))) {
		JB_Msg_SyntaxExpect(self, JB_LUB[1492]);
		return nil;
	}
	if ((!(fn == JB_SyxThg))) {
		JB_Msg_SyntaxExpect(self, JB_LUB[1758]);
		return nil;
	}
	return true;
}

bool JB_Msg_TestSub(Message* self, JB_String* new_render, JB_String* name) {
	LeakTester* LKT = JB_Incr(JB_Lk__New(name));
	{
		Message* reparse = JB_Incr(JB_Str_Parse(new_render, JB_SyxArg, true));
		if ((!reparse)) {
			JB_Decr(LKT);
			JB_Decr(reparse);
			return nil;
		}
		JB_Msg_test_style(reparse);
		JB_Msg_test_style(self);
		if ((!JB_Msg__TreeCompare(self, reparse, false))) {
			JB_Decr(LKT);
			JB_Decr(reparse);
			return nil;
		}
		JB_String* self_render = JB_Incr(JB_Msg_Render(self, nil));
		if ((!JB_Str_Exists(self_render))) {
			JB_Decr(LKT);
			JB_Decr(reparse);
			JB_Decr(self_render);
			return nil;
		}
		JB_String* reparse_render = JB_Incr(JB_Msg_Render(reparse, nil));
		if ((!JB_Str_Exists(reparse_render))) {
			JB_Decr(LKT);
			JB_Decr(reparse);
			JB_Decr(self_render);
			JB_Decr(reparse_render);
			return nil;
		}
		if ((!(JB_Rec_OK(JB_StdErr) and ((JB_Str_Equals(self_render, reparse_render, false)))))) {
			JB_Decr(LKT);
			JB_Decr(reparse);
			JB_Decr(self_render);
			JB_Decr(reparse_render);
			return nil;
		}
		JB_Decr(reparse_render);
		JB_Decr(self_render);
		JB_Decr(reparse);
	}
	;
	(JB_Lk_FinalTest(LKT));
	JB_Decr(LKT);
	return true;
}

JB_String* JB_Msg_text(Message* self, int i) {
	if (i == 0) {
		return JB_Msg_tviewch(self)->Name;
	}
	return JB_LUB[0];
}

bool JB_Msg_textset(Message* self, int i, JB_String* v) {
	if (i == 0) {
		JB_SetRef(JB_Msg_tviewch(self)->Name, v);
		return true;
	}
	return false;
}

Message* JB_Msg_TheTmpVarOf(Message* self, JB_String* tmpname) {
	Message* rz = nil;
	SCDecl* _tmPf0 = JB_Incr(JB_Msg_AsDecl(self));
	SCDecl* d = JB_Incr(SC_Decl_Copy(_tmPf0, false));
	JB_Decr(_tmPf0);
	JB_SetRef(d->Name, JB_LUB[0]);
	JB_SetRef(rz, (JB_Syx_Msg(JB_SyxThg, tmpname)));
	JB_SetRef(rz->Obj, d);
	JB_Decr(d);
	JB_SafeDecr(rz);
	return rz;
}

void JB_Msg_Thg__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
}

void JB_Msg_Tmp__(Message* self, FastString* fs) {
	if (JB_Str_IsStatementName(self->Name)) {
		JB_FS_AppendString(fs, self->Name);
	}
	 else {
		JB_FS_AppendString(fs, JB_LUB[1759]);
		JB_FS_AppendEscape(fs, self->Name);
		JB_FS_AppendByte(fs, '"');
	}
	if ((!JB_Ring_HasChildren(self))) {
		return;
	}
	Message* ch = ((Message*)JB_Ring_First(self));
	bool HasArg = false;
	while (ch) {
		if (HasArg) {
			JB_FS_AppendIndent(fs);
		}
		JB_FS_AppendByte(fs, ' ');
		JB_FS_SyntaxAppend(fs, ch);
		if (JB_Msg_EqualsSyx(ch, JB_SyxArg, false)) {
			HasArg = true;
		}
		ch = ((Message*)JB_Ring_NextSib(ch));
	};
}

void JB_Msg_Todo__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
	JB_Msg_FSListSep(self, fs, JB_LUB[170]);
}

void JB_Msg_Tran_Isnt(Message* self, JB_String* name) {
	Message* type = JB_Incr(JB_Msg_NeedSyx(self, ((Syntax)nil)));
	if ((!JB_Msg_ExpectLast(type, JB_LUB[0]))) {
		JB_Decr(type);
		return;
	}
	if (true) {
		MessagePosition _using183 = JB_Msg_SyntaxUsing(self);
		self->Func = JB_SyxRel;
		Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name));
		JB_Tree_SyntaxAppend(self, (_tmPf0));
		JB_Decr(_tmPf0);
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, self->Name));
		JB_Tree_SyntaxAppend(self, (_tmPf1));
		JB_Decr(_tmPf1);
		JB_Tree_SyntaxAppend(self, type);
		JB_MsgPos_SyntaxUsingComplete((&_using183));
		JB_MsgPos_Destructor((&_using183));
	}
	JB_Decr(type);
}

void JB_Msg_Tran_QMark(Message* self) {
	//using;
	MessagePosition _using170 = JB_Msg_SyntaxUsing(self);
	Message* thedot = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!thedot)) {
		JB_MsgPos_Destructor((&_using170));
		JB_Decr(thedot);
		return;
	}
	bool IsNormal = ((JB_Msg_EqualsSyx(thedot, JB_SyxDot, false)) or ((JB_Msg_EqualsSyx(thedot, JB_SyxSDot, false)) or (JB_Msg_EqualsSyx(thedot, JB_SyxFunc, false))));
	if ((!(IsNormal or (JB_Msg_EqualsSyx(thedot, JB_SyxBra, false))))) {
		JB_Msg_SyntaxExpect(thedot, JB_LUB[1760]);
		JB_MsgPos_Destructor((&_using170));
		JB_Decr(thedot);
		return;
	}
	if (JB_Msg_EqualsSyx(thedot, JB_SyxSDot, false)) {
		SC_Func__Tran_Sdt(thedot);
	}
	Message* inside = JB_Incr(((Message*)JB_Ternary(IsNormal, ((Message*)JB_Ring_First(thedot)), thedot)));
	if (JB_Msg_EqualsSyx(thedot, JB_SyxFunc, false)) {
		if ((!JB_Msg_Expect(inside, JB_SyxBra, nil))) {
			JB_MsgPos_Destructor((&_using170));
			JB_Decr(thedot);
			JB_Decr(inside);
			return;
		}
		JB_SetRef(inside, ((Message*)JB_Ring_First(inside)));
	}
	Message* arg = JB_Incr(self);
	Message* p = JB_Incr(((Message*)JB_Ring_Parent(self)));
	bool UseTernary = false;
	if (JB_Msg_EqualsSyx(p, JB_SyxArg, false)) {
		JB_Msg_BecomeStr(self, JB_SyxArg, JB_LUB[0]);
	}
	 else if ((JB_Msg_EqualsSyx(p, JB_SyxRel, false)) and ((!JB_FreeIfDead(((Message*)JB_Ring_PrevSib(self)))) and (!({
		Message* _tmP269 = JB_Incr(((Message*)JB_Ring_Parent(p)));
		bool _tmP268 = JB_Msg_EqualsSyx(_tmP269, JB_SyxDecl, false);
		JB_Decr(_tmP269);
		 _tmP268;
	})))) {
		JB_Msg_BecomeStr(self, JB_SyxArg, JB_LUB[0]);
		JB_FreeIfDead(JB_Msg_ReplaceWith(self, thedot));
		JB_FreeIfDead(JB_Msg_WrapWith(p, self));
	}
	 else {
		UseTernary = true;
		JB_Msg_BecomeStr(self, JB_SyxBra, JB_LUB[0]);
		JB_SetRef(arg, JB_Syx_ParentMsg(JB_SyxArg, self, JB_LUB[0]));
	}
	JB_String* vn = JB_Incr(inside->Name);
	if ((!JB_Msg_EqualsSyx(inside, JB_SyxThg, false))) {
		JB_SetRef(vn, SC_UniqueTmpVar(nil, JB_LUB[1761]));
		Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxThg, vn));
		JB_FreeIfDead(JB_Msg_ReplaceWith(inside, _tmPf0));
		JB_Decr(_tmPf0);
		Message* _tmPf1 = JB_Incr(SC_MakeDecl(JB_LUB[0], vn, inside));
		JB_Tree_SyntaxAppend(arg, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(inside);
	if ((!(UseTernary))) {
		Message* iff = JB_Incr(JB_Syx_ParentMsg(JB_SyxTmp, arg, JB_LUB[689]));
		Message* test = JB_Incr(JB_Syx_ParentMsg(JB_SyxThg, iff, vn));
		JB_Decr(test);
		Message* arg2 = JB_Incr(JB_Syx_ParentMsg(JB_SyxArg, iff, JB_LUB[0]));
		JB_Decr(iff);
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ternary((JB_Msg_EqualsSyx(p, JB_SyxRel, false)), p, thedot)));
		JB_Tree_SyntaxAppend(arg2, _tmPf2);
		JB_Decr(_tmPf2);
		JB_Decr(arg2);
	}
	 else {
		Message* into = JB_Incr(JB_Syx_ParentMsg(JB_SyxTmp, arg, JB_LUB[690]));
		Message* func = JB_Incr(JB_Syx_ParentMsg(JB_SyxFunc, into, JB_LUB[0]));
		JB_Decr(into);
		Message* tern1 = JB_Incr(JB_Syx_ParentMsg(JB_SyxList, func, JB_LUB[0]));
		JB_Tree_SyntaxAppend(tern1, thedot);
		if (arg != self) {
			JB_Msg_AppendSyx(tern1, JB_SyxThg, JB_LUB[106]);
		}
		JB_Decr(tern1);
		Message* tern2 = JB_Incr(JB_Syx_ParentMsg(JB_SyxPrm, func, JB_LUB[0]));
		JB_Decr(func);
		JB_Msg_AppendSyx(tern2, JB_SyxThg, vn);
		JB_Decr(tern2);
	}
	JB_Decr(vn);
	JB_Decr(p);
	JB_Decr(arg);
	JB_Decr(thedot);
	JB_MsgPos_SyntaxUsingComplete((&_using170));
	JB_MsgPos_Destructor((&_using170));
}

Message* JB_Msg_tran_target(Message* self) {
	Message* rz = nil;
	JB_Msg_Tran_TargetSub(self);
	JB_SetRef(rz, ((Message*)JB_Ring_NextSib(self)));
	if ((!(rz))) {
		JB_SetRef(rz, ((Message*)JB_Ring_FlatAfter(self)));
	}
	JB_Tree_Remove(self);
	JB_SafeDecr(rz);
	return rz;
}

void JB_Msg_Tran_TargetSub(Message* self) {
	Message* value = JB_Msg_NeedSyx(self, JB_SyxNil);
	bool IsFalse = ((JB_Msg_EqualsSyx(value, JB_SyxBRel, false)) and (JB_Msg_SyntaxEquals(value, JB_LUB[679], false)));
	if (IsFalse) {
		value = ((Message*)JB_Ring_First(value));
	}
	Message* arg = JB_Msg_NeedSyxInt(self, JB_SyxArg, 1);
	if ((!arg)) {
		return;
	}
	if (JB_Msg_TargetTest(value) == IsFalse) {
		arg = JB_Msg_NeedSyx(((Message*)JB_Tree_Get(self, 2)), JB_SyxArg);
	}
	while (JB_Ring_HasChildren(arg)) {
		(JB_Ring_NextSibSet(self, ((Message*)JB_Tree_Pop(arg))));
	};
}

void JB_Msg_Tran_With(Message* self) {
	Message* obj = JB_Incr(JB_Msg_NeedSyx(self, ((Syntax)nil)));
	if ((!obj)) {
		JB_Decr(obj);
		return;
	}
	Message* arg = JB_Incr(JB_Msg_NextOf2(obj, JB_SyxArg, nil));
	if ((!arg)) {
		JB_Decr(obj);
		JB_Decr(arg);
		return;
	}
	JB_SetRef(self->Name, JB_LUB[689]);
	JB_String* name = JB_Incr(JB_Msg_WithDirectName(obj, self));
	if ((!JB_Str_Exists(name))) {
		JB_Decr(obj);
		JB_Decr(arg);
		JB_Decr(name);
		return;
	}
	//using;
	MessagePosition _using185 = JB_Msg_SyntaxUsing(obj);
	JB_Decr(obj);
	{
		Message* ch = JB_Incr(arg);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(arg)));
		while (((bool)ch) and (ch != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(ch)));
			if (JB_Msg_EqualsSyx(ch, JB_SyxTmp, false)) {
				if ((JB_Msg_SyntaxEquals(ch, JB_LUB[898], false)) or (JB_Msg_SyntaxEquals(ch, JB_LUB[899], false))) {
					JB_Msg_Tran_Isnt(ch, JB_LUB[1762]);
					JB_SetRef(ch, ch);
					JB_Decr(_N_f2);
					continue;
				}
				if (JB_Msg_SyntaxEquals(ch, JB_LUB[1708], false)) {
					JB_SetRef(ch, ((Message*)JB_Ring_FlatAfter(ch)));
					JB_Decr(_N_f2);
					continue;
				}
			}
			 else if (JB_Msg_EqualsSyx(ch, JB_SyxSDot, false)) {
				ch->Func = JB_SyxDot;
				Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name));
				(JB_Ring_FirstSet(ch, (_tmPf3)));
				JB_Decr(_tmPf3);
			}
			 else if (JB_Msg_EqualsSyx(ch, JB_SyxThg, false)) {
				if (JB_Msg_SyntaxEquals(ch, JB_LUB[1762], false)) {
					JB_SetRef(ch->Name, name);
				}
			}
			JB_SetRef(ch, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(_afterf1);
		JB_Decr(ch);
		(arg);
	}
	;
	JB_Decr(name);
	JB_Decr(arg);
	JB_MsgPos_SyntaxUsingComplete((&_using185));
	JB_MsgPos_Destructor((&_using185));
}

Message* JB_Msg_TranModel(Message* self) {
	Message* Arg = JB_Incr(JB_Msg_NeedSyxInt(self, JB_SyxArg, -1));
	if ((!Arg)) {
		JB_Decr(Arg);
		return nil;
	}
	Message* Shader = JB_Incr(JB_Msg_ParseShaderSub(Arg));
	JB_Decr(Arg);
	if ((!Shader)) {
		JB_Decr(Shader);
		return nil;
	}
	JB_SetRef(self->Name, JB_LUB[802]);
	JB_SafeDecr(Shader);
	return Shader;
}

void JB_Msg_TRel__(Message* self, FastString* fs) {
	JB_Msg_RenderWithSpaces(self, fs, nil);
}

void JB_Msg_Tril__(Message* self, FastString* fs) {
	Message* f = ((Message*)JB_Ring_First(self));
	if ((!f)) {
		return;
	}
	JB_FS_AppendByte(fs, '#');
	JB_FS_SyntaxAppend(fs, f);
	Message* s = ((Message*)JB_Ring_NextSib(f));
	if ((!s)) {
		return;
	}
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, s);
	Message* l = ((Message*)JB_Ring_NextSib(s));
	if ((!l)) {
		return;
	}
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, l);
}

bool JB_Msg_TrueOrFalse(Message* self) {
	if (JB_Msg_SyntaxEquals(self, JB_LUB[107], true)) {
		return true;
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[108], true)) {
		return false;
	}
	if ((!false)) {
		JB_Msg_SyntaxExpect(self, JB_LUB[1763]);
	}
	return false;
}

Message* JB_Msg_tviewch(Message* self) {
	if ((!JB_Msg_EqualsSyx(self, JB_SyxTmp, false))) {
		return self;
	}
	Message* ch = ((Message*)JB_Ring_First(self));
	if (ch) {
		Message* ch2 = ((Message*)JB_Ring_NextSib(ch));
		if (JB_Msg_ListViewable(ch2)) {
			return ch2;
		}
		if (JB_Msg_ListViewable(ch)) {
			return ch;
		}
	}
	return self;
}

void JB_Msg_Type__(Message* self, FastString* fs) {
	Message* obj = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!obj)) {
		JB_Decr(obj);
		return;
	}
	Message* type = JB_Incr(((Message*)JB_Ring_NextSib(obj)));
	JB_FS_SyntaxAppend(fs, obj);
	JB_Decr(obj);
	JB_FS_AppendByte(fs, '|');
	if (type) {
		JB_FS_SyntaxAppend(fs, type);
	}
	JB_Decr(type);
	JB_FS_AppendByte(fs, '|');
}

Message* JB_Msg_TypeOfArrItem(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxList, false)) {
		return ((Message*)JB_Ring_First(self));
	}
	if (((JB_Msg_EqualsSyx(self, JB_SyxRel, false))) and (({
		Message* _tmP293 = JB_Incr(((Message*)JB_Tree_Get(self, 1)));
		bool _tmP292 = JB_Msg_OperatorIsThing(_tmP293, JB_LUB[1594]);
		JB_Decr(_tmP293);
		 _tmP292;
	}))) {
		return ((Message*)JB_Ring_First(self));
	}
	return self;
}

Message* JB_Msg_UnBra(Message* self) {
	Message* rz = nil;
	rz = self;
	while ((JB_Msg_EqualsSyx(rz, JB_SyxBra, false)) and (!JB_Msg_EqualsSyx(((Message*)JB_Ring_First(rz)), JB_SyxArg, false))) {
		rz = ((Message*)JB_Ring_First(rz));
	};
	return rz;
}

Message* JB_Msg_UnBraType(Message* self) {
	Message* rz = nil;
	rz = self;
	while (((JB_Msg_EqualsSyx(rz, JB_SyxType, false))) or ((JB_Msg_EqualsSyx(rz, JB_SyxBra, false)) and (!JB_Msg_EqualsSyx(((Message*)JB_Ring_First(rz)), JB_SyxArg, false)))) {
		rz = ((Message*)JB_Ring_First(rz));
	};
	return rz;
}

void JB_Msg_UnEmbed(Message* self) {
	Message* s1 = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!(((JB_Msg_EqualsSyx(s1, JB_SyxEmb, false))) and ((!JB_FreeIfDead(((Message*)JB_Ring_NextSib(s1)))))))) {
		JB_Decr(s1);
		return;
	}
	JB_Tree_Remove(s1);
	JB_SetRef(self->Name, s1->Name);
	JB_Decr(s1);
}

void JB_Msg_Unit__(Message* self, FastString* fs) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_String* num = JB_Incr(_tmPf0->Name);
	JB_Decr(_tmPf0);
	JB_FS_AppendString(fs, num);
	if (((bool)JB_Str_IsHexLike(num, 0)) and (JB_Str_Last(num, 0) != '_')) {
		JB_FS_AppendByte(fs, '_');
	}
	JB_Decr(num);
	JB_FS_AppendString(fs, self->Name);
}

bool JB_Msg_unitmatch(Message* self, JB_String* a, JB_String* b) {
	JB_String* unit = self->Name;
	if (JB_Str_Equals(unit, a, false)) {
		return true;
	}
	if (JB_Str_Equals(unit, b, false)) {
		if ((!false)) {
			JB_Msg_SyntaxExpect(self, JB_Str_OperatorPlus(JB_LUB[1764], a));
		}
	}
	return false;
}

Message* JB_Msg_UnReachable(Message* self) {
	if ((!(JB_Msg_EqualsSyx(self, JB_SyxArg, false)))) {
		debugger;
	}
	return JB_Msg_CausesUnReachable(self, self, nil, nil);
}

void JB_Msg_url__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendString(fs, JB_LUB[514]);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_FS_AppendString(fs, _tmPf0->Name);
	JB_Decr(_tmPf0);
}

Message* JB_Msg_UseNonRefChangers(Message* self, bool parent) {
	Message* Last = self;
	Message* Curr = self;
	while (true) {
		Curr = ((Message*)JB_Ring_Parent(Curr));
		if ((!(Curr))) {
			return Last;
		}
		Syntax f = Curr->Func;
		if (f == JB_SyxBra) {
		}
		 else if (f != JB_SyxType) {
			return ((Message*)JB_Ternary(parent, Curr, Last));
		}
		 else {
			JB_Object* D = Curr->Obj;
			if ((JB_Object_FastIsa(D, JB_AsClass(SCDecl))) and ((!SC_Decl_IsNormalObject(((SCDecl*)D))))) {
				return ((Message*)JB_Ternary(parent, Curr, Last));
			}
		}
		Last = Curr;
	};
	return nil;
}

JB_String* JB_Msg_Value(Message* self) {
	if ((JB_Msg_EqualsSyx(self, JB_SyxTmp, false)) and JB_Msg_OperatorIn(self, JB_SyxArg)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
		JB_String* _tmPf1 = JB_Incr(JB_Msg_Nyme(_tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	if ((!JB_Msg_EqualsSyx(self, JB_SyxArg, false))) {
		return JB_Msg_Nyme(self);
	}
	return JB_LUB[0];
}

Message* JB_Msg_WantAsArg(Message* self, Message* ErrPlace, JB_String* errmsg) {
	if (JB_Msg_EqualsSyx(self, JB_SyxArg, false)) {
		return self;
	}
	if (ErrPlace) {
		JB_Msg_SyntaxExpect(ErrPlace, errmsg);
		return nil;
	}
	return nil;
}

Message* JB_Msg_LayerWipeCopy(Message* self, Message* oof) {
	Message* rz = nil;
	if ((!oof)) {
		JB_Decr(rz);
		return JB_Msg_WipeCopy(self);
	}
	JB_MemoryLayer* L = JB_Incr(JB_ObjLayer(oof));
	JB_SetRef(rz, JB_Msg__NewWithLayerCopy(L, self));
	JB_Decr(L);
	rz->Position = -1;
	{
		Message* v = JB_Incr(((Message*)JB_Tree_First_(self)));
		while (v) {
			Message* _Nf1 = JB_Incr(((Message*)((Message*)JB_Ring_NextSib(v))));
			Message* _tmPf2 = JB_Incr(JB_Msg_LayerWipeCopy(v, oof));
			JB_Tree_SyntaxAppend(rz, _tmPf2);
			JB_Decr(_tmPf2);
			JB_SetRef(v, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(v);
		(self);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Msg_WipeCopy(Message* self) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Msg__NewCopy(self));
	rz->Position = -1;
	{
		Message* v = JB_Incr(((Message*)JB_Tree_First_(self)));
		while (v) {
			Message* _Nf1 = JB_Incr(((Message*)((Message*)JB_Ring_NextSib(v))));
			Message* _tmPf2 = JB_Incr(JB_Msg_WipeCopy(v));
			JB_Tree_SyntaxAppend(rz, _tmPf2);
			JB_Decr(_tmPf2);
			JB_SetRef(v, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(v);
		(self);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

void JB_Msg_WipePositions(Message* self) {
	{
		Message* v = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)v) and (v != _afterf1)) {
			Message* _N_f2 = ((Message*)((Message*)JB_Ring_FlatNext0(v)));
			v->Position = -1;
			v = _N_f2;
		};
		(self);
	};
}

void JB_Msg_WithDeclTransform(Message* self, Message* decl, Message* rel, Message* arg) {
	if ((!JB_Msg_Expect(rel, JB_SyxRel, nil))) {
		return;
	}
	Message* name = JB_Incr(JB_Msg_NeedSyx(rel, JB_SyxThg));
	//using;
	MessagePosition _using186 = JB_Msg_SyntaxUsing(arg);
	Message* IF = JB_Incr(JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[689]));
	(JB_Ring_NextSibSet(decl, IF));
	JB_Msg_AppendSyx(IF, JB_SyxThg, name->Name);
	JB_Decr(name);
	JB_Tree_SyntaxAppend(IF, arg);
	JB_Decr(IF);
	JB_MsgPos_SyntaxUsingComplete((&_using186));
	JB_MsgPos_Destructor((&_using186));
}

JB_String* JB_Msg_WithDirectName(Message* self, Message* p) {
	if ((!((!JB_Msg_EqualsSyx(self, JB_SyxRel, false)) and (!JB_Msg_EqualsSyx(self, JB_SyxBra, false))))) {
		JB_Msg_SyntaxExpect(self, nil);
		return nil;
	}
	Message* _tmPf1 = JB_Incr(SC_Func__TypedTempMoveOut(self, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Msg_DeclName(_tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(_tmPf0->Name);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

bool JB_Msg_WithinLoop(Message* self, Message* stop) {
	Message* curr = self;
	while ((curr != stop) and ((bool)curr)) {
		if (JB_Msg_OperatorIsTmp(curr, JB_LUB[597]) or JB_Msg_OperatorIsTmp(curr, JB_LUB[1594])) {
			return true;
		}
		curr = ((Message*)JB_Ring_Parent(curr));
	};
	return false;
}

int JB_Msg_WrapExpr(Message* self, SCDecl* src) {
	if ((!self)) {
		return kSC_NeedsTypeCast;
	}
	Message* W = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1383])));
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[141]));
	JB_Tree_SyntaxAppend(W, (_tmPf0));
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(W, (_tmPf1));
	JB_Decr(_tmPf1);
	if (SC_Decl_isfloat(src)) {
		JB_SetRef(W->Name, JB_LUB[1765]);
	}
	JB_FreeIfDead(JB_Msg_ReplaceWith(self, W));
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(W)));
	JB_Tree_SyntaxAppend(_tmPf2, self);
	JB_Decr(_tmPf2);
	JB_FreeIfDead(SC_TypeOfExpr(W, SC__Comp_program, nil));
	SCDecl* D = JB_Incr(JB_Msg_AsDecl(self));
	if (D) {
		JB_SetRef(W->Obj, SC_Decl_NewWrapper(D, D));
	}
	 else {
		debugger;
	}
	JB_Decr(D);
	JB_Decr(W);
	return kSC_CastedMatch;
}

void JB_Msg_WrapFloatOrInt(Message* self, DataTypeCode T, int N, SCDecl* D) {
	if ((!(JB_TC_SyntaxIsnt(T, kJB__TC_Float) and JB_TC_SyntaxIsnt(T, kJB__TC_Int)))) {
		return;
	}
	SCClass* V = JB_Incr(SC_VecType(JB_TC_IsFloat(T), N));
	if ((!V)) {
		JB_Decr(V);
		return;
	}
	if (SC_Decl_OperatorIsa(D, V)) {
		JB_Decr(V);
		return;
	}
	//using;
	MessagePosition _using192 = JB_Msg_SyntaxUsing(self);
	Message* W = JB_Incr((JB_Syx_Msg(JB_SyxType, JB_LUB[0])));
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxThg, V->Name));
	JB_Decr(V);
	JB_Tree_SyntaxAppend(W, (_tmPf0));
	JB_Decr(_tmPf0);
	JB_FreeIfDead(JB_Msg_WrapWith(self, W));
	JB_Decr(W);
	JB_MsgPos_SyntaxUsingComplete((&_using192));
	JB_MsgPos_Destructor((&_using192));
}

Message* JB_Msg_WrapWith(Message* self, Message* W) {
	(JB_Ring_PrevSibSet(self, W));
	(JB_Ring_FirstSet(W, self));
	return W;
}

void JB_Msg_XAtt__(Message* self, FastString* fs) {
	//;
	JB_FS_AppendByte(fs, ' ');
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendString(fs, JB_LUB[1766]);
	JB_FS_SyntaxAppend(fs, ((Message*)JB_Ring_First(self)));
	JB_FS_AppendByte(fs, '"');
	//;
}

void JB_Msg_XCDT__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[488]);
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendString(fs, JB_LUB[489]);
}

void JB_Msg_XCom__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[486]);
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendString(fs, JB_LUB[487]);
}

void JB_Msg_XML__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '<');
	JB_FS_AppendString(fs, self->Name);
	Message* atts = ((Message*)JB_Ring_First(self));
	{
		Message* A = ((Message*)JB_Tree_First_(atts));
		while (A) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(A));
			JB_FS_SyntaxAppend(fs, A);
			A = _Nf2;
		};
		(atts);
	}
	;
	Message* Children = ((Message*)JB_Ternary(((bool)atts), ((Message*)JB_Ring_NextSib(atts)), nil));
	if ((!Children)) {
		JB_FS_AppendString(fs, JB_LUB[1767]);
		return;
	}
	JB_FS_AppendByte(fs, '>');
	bool SingleText = ((JB_Msg_EqualsSyx(Children, JB_SyxXTxt, false))) and ((!((Message*)JB_Ring_NextSib(Children))));
	if (SingleText) {
		JB_FS_SyntaxAppend(fs, Children);
	}
	 else {
		fs->Indent++;
		{
			Message* ch = Children;
			while (ch) {
				JB_FS_AppendIndent(fs);
				JB_FS_SyntaxAppend(fs, ch);
				ch = ((Message*)JB_Ring_NextSib(ch));
			};
			(Children);
		}
		;
		fs->Indent--;
		JB_FS_AppendIndent(fs);
	}
	//;
	JB_FS_AppendString(fs, JB_LUB[1768]);
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendByte(fs, '>');
	//;
}

void JB_Msg_XPI__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[535]);
	if (JB_Ring_HasChildCount(self, 1)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
		JB_FS_SyntaxAppend(fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_Msg_FSListArg(self, fs);
		JB_FS_AppendByte(fs, '\n');
	}
	JB_FS_AppendString(fs, JB_LUB[501]);
}

void JB_Msg_XTxt__(Message* self, FastString* fs) {
	JB_FS_AppendMultiReplace(fs, self->Name, JB__Constants_XML_EscapeStr, JB_StdErr);
}

void JB_Msg_Yoda__(Message* self, FastString* fs) {
	Message* f = ((Message*)JB_Ring_First(self));
	Message* s = ((Message*)JB_Ring_NextSib(f));
	Message* l = ((Message*)JB_Ring_NextSib(s));
	JB_FS_AppendString(fs, JB_LUB[1769]);
	JB_FS_SyntaxAppend(fs, l);
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, f);
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, s);
}

Message* JB_Msg__Alloc() {
	return ((Message*)JB_New(Message));
}

SyntaxObj* JB_Msg__GetFunc(Message* msg) {
	SyntaxObj* _tmPf0 = JB_Incr(((SyntaxObj*)JB_Dict_Syntax(JB__SyxDict_, msg->Name)));
	if ((!_tmPf0)) {
		FastString* _fsf1 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf1, JB_LUB[1770]);
		JB_FS_AppendString(_fsf1, msg->Name);
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		JB_Msg_SyntaxExpect(msg, _tmPf2);
		JB_Decr(_tmPf2);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* JB_Msg__LayerAlloc(JB_MemoryLayer* _L) {
	//visible;
	return ((Message*)JB_LayerNew(_L, Message));
}

Message* JB_Msg__NewBasic() {
	Message* __rz__ = ((Message*)JB_Msg__Alloc());
	if (__rz__) {
		JB_Msg_ConstructorBasic(__rz__);
	}
	return __rz__;
}

Message* JB_Msg__NewCopy(Message* other) {
	Message* __rz__ = ((Message*)JB_Msg__Alloc());
	if (__rz__) {
		JB_Msg_ConstructorCopy(__rz__, other);
	}
	return __rz__;
}

Message* JB_Msg__NewNormal(Syntax Func, JB_String* Name) {
	Message* __rz__ = ((Message*)JB_Msg__Alloc());
	if (__rz__) {
		JB_Msg_ConstructorNormal(__rz__, Func, Name);
	}
	return __rz__;
}

Message* JB_Msg__NewRange(Message* Parent, Syntax Func, int BytePos, JB_String* name, int Extra) {
	Message* __rz__ = ((Message*)JB_Msg__Alloc());
	if (__rz__) {
		JB_Msg_ConstructorRange(__rz__, Parent, Func, BytePos, name, Extra);
	}
	return __rz__;
}

Message* JB_Msg__NewWithLayerCopy(JB_MemoryLayer* _L, Message* other) {
	//visible;
	Message* __rz__ = ((Message*)JB_Msg__LayerAlloc(_L));
	if (__rz__) {
		JB_Msg_ConstructorCopy(__rz__, other);
	}
	return __rz__;
}

Message* JB_Msg__NewWithLayerNormal(JB_MemoryLayer* _L, Syntax Func, JB_String* Name) {
	//visible;
	Message* __rz__ = ((Message*)JB_Msg__LayerAlloc(_L));
	if (__rz__) {
		JB_Msg_ConstructorNormal(__rz__, Func, Name);
	}
	return __rz__;
}

bool JB_Msg__TreeCompare(Message* orig, Message* reparse, bool PrintIfSame) {
	if ((!(((bool)orig) and ((bool)reparse)))) {
		return JB_CompareError(orig, reparse);
	}
	if ((orig->Func != reparse->Func) or ((!JB_Str_Equals(orig->Name, reparse->Name, false)))) {
		return JB_CompareError(orig, reparse);
	}
	Message* r1 = JB_Incr(((Message*)JB_Ring_First(reparse)));
	Message* s1 = JB_Incr(((Message*)JB_Ring_First(orig)));
	while (((bool)r1) or ((bool)s1)) {
		if ((!JB_Msg__TreeCompare(s1, r1, false))) {
			JB_Decr(r1);
			JB_Decr(s1);
			return nil;
		}
		JB_SetRef(r1, ((Message*)JB_Ring_NextSib(r1)));
		JB_SetRef(s1, ((Message*)JB_Ring_NextSib(s1)));
	};
	JB_Decr(s1);
	JB_Decr(r1);
	if (PrintIfSame) {
		FastString* _fsf0 = JB_Incr(JB_FS__New());
		JB_FS_AppendString(_fsf0, JB_LUB[1771]);
		JB_String* _tmPf1 = JB_Incr(JB_Msg_MiniName(orig));
		JB_FS_AppendString(_fsf0, _tmPf1);
		JB_Decr(_tmPf1);
		JB_FS_AppendString(_fsf0, JB_LUB[1772]);
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf2);
		JB_Decr(_tmPf2);
	}
	return true;
}



void SC_Arg_Constructor(SCArg* self, Message* node) {
	SC_Base_ConstructorMsg(self, node);
	self->ParentFunc = nil;
	self->TmpMovedOutFor = nil;
	self->IsClassArg = false;
	self->IsStatementExpr = false;
}

int SC_Arg_Count(SCArg* self) {
	int rz = 0;
	{
		Dictionary* _LoopSrcf1 = self->Access;
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf1);
		while (JB_Nav_MoveNext(_navf0)) {
			SCObject* v = ((SCObject*)JB_Nav_Value(_navf0));
			rz = (rz + (JB_Object_Isa(v, JB_AsClass(SCDecl))));
		};
	}
	;
	SCBase* l = self->Lookup;
	if (JB_Object_FastIsa(l, JB_AsClass(SCArg))) {
		rz = (rz + (SC_Arg_Count(((SCArg*)l)) + 1));
	}
	return rz;
}

void SC_Arg_destructor(SCArg* self) {
	JB_Decr(self->ParentFunc);
	JB_Decr(self->TmpMovedOutFor);
	SC_Base_destructor(self);
}

JB_String* SC_Arg_Render(SCArg* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendString(fs, JB_LUB[1773]);
	JB_FS_SyntaxAppend(fs, self->Source);
	JB_FS_AppendString(fs, JB_LUB[636]);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

SCArg* SC_Arg__Alloc() {
	return ((SCArg*)JB_New(SCArg));
}

SCArg* SC_Arg__New(Message* node) {
	SCArg* __rz__ = ((SCArg*)SC_Arg__Alloc());
	if (__rz__) {
		SC_Arg_Constructor(__rz__, node);
	}
	return __rz__;
}


void SC_StretchControl_xxxtest(GUIControl* self, GUIControl* p) {
	//visible;
	GUIControl* g = JB_Incr(SC_GUIControl__New(p));
	JB_Decr(g);
}




Message* JB_config_conffirst(Message* self) {
	Message* l = JB_Incr(JB_Msg_ConfArg(self));
	if (l) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(((Message*)l))));
		JB_Decr(l);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(l);
	return nil;
}

bool JB_config_Save(Message* self) {
	JB_Object* f = JB_Incr(self->Obj);
	if (JB_Object_Isa(f, JB_AsClass(JB_File))) {
		JB_String* p = JB_Incr(JB_Msg_Render(self, nil));
		JB_Error* err = nil;
		if (JB_FreeIfDead(JB_Str_ParseWithError(p, (&err)))) {
			bool _tmPf0 = JB_File_SmartDataSet(((JB_File*)f), p);
			JB_Decr(f);
			JB_Decr(p);
			JB_Decr(err);
			return _tmPf0;
		}
		JB_Decr(err);
		JB_Decr(p);
	}
	JB_Decr(f);
	return false;
}


void JB_Err_Constructor(JB_Error* self, Message* node, JB_String* desc, ErrorSeverity level, JB_String* path) {
	JB_Msg_ConstructorBasic(self);
	self->ErrorFlags = 0;
	self->Position = -1;
	if (node) {
		self->Position = node->Position;
	}
	self->Node = JB_Incr(node);
	self->Severity = level;
	self->Name = JB_Incr(desc);
	JB_String* _tmPf0 = ((JB_String*)JB_Ternary(JB_Str_Exists(path), path, JB_Msg_FilePath(node)));
	self->Path = JB_Incr(_tmPf0);
	JB_String* _tmPf1 = JB_Msg_OriginalParseData(node);
	self->OriginalData = JB_Incr(_tmPf1);
	self->When = JB_Date__New0();
	self->Func = JB_SyxSStr;
}

void JB_Err_destructor(JB_Error* self) {
	JB_Decr(self->Path);
	JB_Decr(self->OriginalData);
	JB_Decr(self->Node);
	JB_Msg_destructor(self);
}

void JB_Err_Fill(JB_Error* self, JB_String* path, JB_String* desc) {
	//visible;
	JB_SetRef(self->Path, path);
	((JB_Err_SyntaxIsSet(self, kJB__ErrorFlags_prefernorenderpath, JB_Str_ContainsString(desc, path))));
	JB_SetRef(self->Name, desc);
}

void JB_Err_GrabLine(JB_Error* self, FastString* fs, bool Usecolor) {
	if (Usecolor) {
		JB_FS_AppendString(fs, kJB__ErrorColors_normal);
	}
	JB_String* d = JB_Incr(self->OriginalData);
	if ((!(JB_Str_Exists(d) and JB_Err_HasPosition(self)))) {
		JB_Decr(d);
		return;
	}
	JB_FS_AppendByte(fs, '\n');
	Ind Start = JB_Str_Find(d, JB__Constants_CSLine, self->Position, 0) + 1;
	Ind Finish = JB_Str_Find(d, JB__Constants_CSLine, (self->Position), JB_int__max());
	if (Finish == -1) {
		Finish = (JB_Str_Length(d) + 1);
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(d, Start, Finish));
	JB_Decr(d);
	JB_String* _tmPf0 = JB_Incr(JB_Str_ReplaceAll(_tmPf1, JB_LUB[407], JB_LUB[170], false, nil));
	JB_Decr(_tmPf1);
	JB_FS_AppendString(fs, _tmPf0);
	JB_Decr(_tmPf0);
	Ind Spaces = (self->Position - Start);
	if (Spaces > 200) {
		Spaces = 0;
	}
	JB_FS_AppendByte(fs, '\n');
	if (Usecolor) {
		JB_FS_AppendString(fs, kJB__ErrorColors_underline);
	}
	JB_FS_AppendMultiByte(fs, ' ', Spaces);
	JB_FS_AppendByte(fs, '^');
}

bool JB_Err_HasPosition(JB_Error* self) {
	return self->Position >= 0;
}

void JB_Err_Improve(JB_Error* self) {
	Message* node = SC_FindBytePos(self->Node, false);
	if ((!node)) {
		return;
	}
	if ((!(JB_Err_HasPosition(self)))) {
		self->Position = node->Position;
	}
	if ((!JB_Str_Exists(self->Path))) {
		SCFile* SC = JB_Msg_SCFile(node);
		if ((!JB_File_SyntaxCast(SC))) {
			return;
		}
		if ((!(SC == JB_Msg_SCFile(self->Node)))) {
			JB_SetRef(self->Node, node);
		}
		if (JB_File_Exists(SC, false)) {
			JB_SetRef(self->Path, JB_File_Path(SC));
		}
	}
}

bool JB_Err_IsError(JB_Error* self) {
	return (self->Severity >= kJB__ErrorSeverity_Error);
}

bool JB_Err_IsWarning(JB_Error* self) {
	return (self->Severity <= kJB__ErrorSeverity_Warning);
}

bool JB_Err_LineIdentifiers(JB_Error* self, FastString* fs, JB_String* path) {
	if ((!(JB_Err_HasPosition(self)))) {
		return nil;
	}
	JB_String* d = JB_Incr(self->OriginalData);
	if ((!JB_Str_Exists(d))) {
		JB_Decr(d);
		return nil;
	}
	if ((!JB_Str_Exists(path))) {
		JB_FS_AppendString(fs, JB_LUB[505]);
	}
	JB_FS_AppendInt32(fs, JB_Err_LinePos(self, d));
	JB_FS_AppendByte(fs, ':');
	Ind Start = JB_Str_Find(d, JB__Constants_CSLine, self->Position, 0);
	JB_Decr(d);
	JB_FS_AppendInt32(fs, self->Position - Start);
	JB_FS_AppendByte(fs, ':');
	return true;
}

int JB_Err_LinePos(JB_Error* self, JB_String* data) {
	if (JB_Err_HasPosition(self)) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(data, 0, self->Position));
		int _tmPf1 = JB_Str_LineCount(_tmPf0);
		JB_Decr(_tmPf0);
		return _tmPf1;
	}
	return 0;
}

bool JB_Err_NeedsPrint(JB_Error* self) {
	return (self->Severity >= kJB__ErrorSeverity_Problem);
}

JB_String* JB_Err_render(JB_Error* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendString(fs, JB_LUB[363]);
	fs->Indent++;
	JB_FS_AppendInfo(fs, JB_LUB[0], self->Name);
	if (self->Position >= 0) {
		JB_FS_AppendInfoNum(fs, JB_LUB[1774], self->Position);
	}
	JB_FS_AppendInfo(fs, JB_LUB[753], self->Path);
	JB_FS_AppendInfoNum(fs, JB_LUB[1775], self->Severity);
	JB_FS_AppendByte(fs, '\n');
	fs->Indent--;
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Err_render_clang(JB_Error* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	int M = JB_FS_Mark(fs);
	JB_String* p = JB_Incr(self->Path);
	if ((JB_Err_SyntaxIsnt(self, kJB__ErrorFlags_prefernorenderpath)) and JB_Str_Exists(p)) {
		JB_FS_AppendString(fs, self->Path);
		JB_FS_AppendByte(fs, ':');
	}
	if ((!JB_Err_LineIdentifiers(self, fs, p)) and ((bool)self->Node)) {
		JB_FreeIfDead(JB_Msg_Render(self->Node, fs));
	}
	JB_Decr(p);
	if (JB_FS_Grew(fs, M)) {
		JB_FS_AppendByte(fs, ' ');
	}
	JB_FreeIfDead(JB_ErrorSeverity_Render(self->Severity, fs));
	JB_FS_AppendString(fs, JB_LUB[278]);
	JB_FS_AppendString(fs, self->Name);
	JB_Err_GrabLine(self, fs, false);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Err_render_unix(JB_Error* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	if (SC_Options__Color()) {
		JB_FS_AppendString(fs, kJB__ErrorColors_bold);
	}
	JB_String* data = JB_Incr(JB_Err_SCOriginalData(self));
	if (JB_Str_Exists(data)) {
		JB_String* p = JB_Incr(JB_Err_SCOriginalPath(self));
		if ((!JB_Str_Exists(p))) {
			JB_SetRef(p, JB_LUB[1776]);
		}
		JB_FS_AppendString(fs, p);
		JB_Decr(p);
		JB_FS_AppendByte(fs, ':');
		JB_Err_SCLineIdentifiers(self, fs, data);
	}
	 else if ((bool)self->Node) {
		JB_FreeIfDead(JB_Msg_Render(self->Node, fs));
		SCFunction* fn = JB_Incr(JB_Msg_MsgOwningFunc(self->Node));
		if (fn) {
			JB_FS_AppendString(fs, JB_LUB[1777]);
			SCFunction* _tmPf0 = JB_Incr(JB_Msg_MsgOwningFunc(self->Node));
			JB_FreeIfDead(SC_Func_Render(_tmPf0, fs));
			JB_Decr(_tmPf0);
		}
		JB_Decr(fn);
	}
	JB_Decr(data);
	JB_FS_AppendByte(fs, ' ');
	if (SC_Options__Color()) {
		if (JB_Err_IsWarning(self)) {
			JB_FS_AppendString(fs, kJB__ErrorColors_warn);
		}
		 else {
			JB_FS_AppendString(fs, kJB__ErrorColors_error);
		}
	}
	if (JB_ErrorSeverity_SyntaxIs(self->Severity, kJB__ErrorSeverity_Problem)) {
		JB_FS_AppendString(fs, JB_LUB[1778]);
	}
	 else {
		JB_FreeIfDead(JB_ErrorSeverity_Render(self->Severity, fs));
	}
	JB_FS_AppendString(fs, JB_LUB[278]);
	if (SC_Options__Color()) {
		JB_FS_AppendString(fs, kJB__ErrorColors_bold);
	}
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendByte(fs, '\n');
	JB_Err_SCGrabLine(self, fs, SC_Options__Color());
	JB_FS_AppendByte(fs, '\n');
	if (SC_Options__Color()) {
		JB_FS_AppendString(fs, kJB__ErrorColors_normal);
	}
	JB_String* _tmPf1 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void JB_Err_SCGrabLine(JB_Error* self, FastString* fs, bool Usecolor) {
	if (Usecolor) {
		JB_FS_AppendString(fs, kJB__ErrorColors_normal);
	}
	JB_String* d = JB_Incr(JB_Err_SCOriginalData(self));
	if ((!JB_Str_Exists(d))) {
		JB_Decr(d);
		return;
	}
	if ((!JB_Err_HasPosition(self))) {
		JB_Decr(d);
		return;
	}
	Ind Start = JB_Str_Find(d, JB__Constants_CSLine, self->Position, 0) + 1;
	Ind Finish = JB_Str_Find(d, JB__Constants_CSLine, (self->Position), JB_int__max());
	if (Finish == -1) {
		Finish = (JB_Str_Length(d) + 1);
	}
	JB_String* Line = JB_Incr(JB_Str_Range(d, Start, Finish));
	JB_Decr(d);
	JB_SetRef(Line, JB_Str_ReplaceAll(Line, JB_LUB[407], JB_LUB[170], false, nil));
	JB_FS_AppendString(fs, Line);
	JB_Decr(Line);
	Ind Spaces = (self->Position - Start);
	if ((!(Spaces < 100))) {
		debugger;
		return;
	}
	JB_FS_AppendByte(fs, '\n');
	if (Usecolor) {
		JB_FS_AppendString(fs, kJB__ErrorColors_underline);
	}
	JB_FS_AppendMultiByte(fs, ' ', Spaces);
	JB_FS_AppendByte(fs, '^');
}

int JB_Err_SCLineCount(JB_Error* self) {
	JB_String* f = JB_Incr(JB_Err_SCOriginalData(self));
	if ((!JB_Str_Exists(f))) {
		JB_Decr(f);
		return nil;
	}
	int _tmPf0 = JB_Err_LinePos(self, f);
	JB_Decr(f);
	return _tmPf0;
}

void JB_Err_SCLineIdentifiers(JB_Error* self, FastString* fs, JB_String* Data) {
	if ((!JB_Err_HasPosition(self))) {
		SCFunction* fn = JB_Incr(JB_Msg_MsgOwningFunc(self->Node));
		if ((!fn)) {
			JB_Decr(fn);
			return;
		}
		JB_FS_AppendString(fs, fn->ExportName);
		JB_Decr(fn);
	}
	 else {
		int _tmPf0 = JB_Err_SCLineCount(self);
		if ((!_tmPf0)) {
			return;
		}
		JB_FS_AppendInt32(fs, (_tmPf0));
		JB_FS_AppendByte(fs, ':');
		Ind Start = JB_Str_Find(Data, JB__Constants_CSLine, self->Position, 0);
		JB_FS_AppendInt32(fs, self->Position - Start);
		JB_FS_AppendByte(fs, ':');
	}
}

JB_String* JB_Err_SCOriginalData(JB_Error* self) {
	JB_String* p = JB_Incr(JB_Err_SCOriginalPath(self));
	if (JB_Str_Exists(p)) {
		JB_File* f = JB_Incr(JB_Str_AsFile(p));
		if (JB_File_SyntaxCast(f) and (JB_File_Exists(f, false) and (!JB_File_IsDir(f)))) {
			JB_Decr(p);
			JB_String* _tmPf0 = JB_Incr(JB_File_ReadAll(f, 134217728, true));
			JB_Decr(f);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(f);
	}
	JB_Decr(p);
	return self->OriginalData;
}

JB_String* JB_Err_SCOriginalPath(JB_Error* self) {
	JB_String* _tmP115 = JB_Incr(JB_Msg_FileLocation(self->Node));
	if ((!JB_Str_Exists(_tmP115))) {
		JB_SetRef(_tmP115, self->Path);
	}
	JB_SafeDecr(_tmP115);
	return _tmP115;
}

JB_String* JB_Err_SCRender(JB_Error* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	if ((!(JB_Str_Exists(self->Path)))) {
		JB_SetRef(self->Path, JB_Err_SCOriginalPath(self));
		if ((!JB_Str_Exists(self->Path))) {
			JB_SetRef(self->Path, JB_LUB[1776]);
		}
	}
	if (SC__Options_Perry) {
		JB_FreeIfDead(JB_Err_render(self, fs));
	}
	 else {
		JB_FreeIfDead(JB_Err_render_unix(self, fs));
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

bool JB_Err_SyntaxIs(JB_Error* self, ErrorFlags F) {
	return ((bool)self) and ((bool)(self->ErrorFlags & F));
}

void JB_Err_SyntaxIsSet(JB_Error* self, ErrorFlags F, bool Value) {
	if (Value) {
		self->ErrorFlags = (self->ErrorFlags | F);
	}
	 else {
		self->ErrorFlags = (self->ErrorFlags & (~F));
	}
}

bool JB_Err_SyntaxIsnt(JB_Error* self, ErrorFlags F) {
	return (!JB_Err_SyntaxIs(self, F));
}

JB_Error* JB_Err__Alloc() {
	return ((JB_Error*)JB_New(JB_Error));
}

void JB_Err__CantParseNum(Message* Where, JB_String* num, int Pos) {
	//visible;
	FastString* _fsf0 = JB_Incr(JB_FS__New());
	JB_FS_AppendString(_fsf0, JB_LUB[1779]);
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(num, 0, 10));
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(_fsf0, JB_LUB[1780]);
	JB_FS_AppendByte(_fsf0, JB_Str_ByteValue(num, Pos));
	JB_FS_AppendString(_fsf0, JB_LUB[1781]);
	JB_String* msg = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_Error* _tmPf2 = JB_Incr(JB_Err__New(Where, msg, kJB__ErrorSeverity_Error, JB_LUB[0]));
	JB_Decr(msg);
	JB_Rec_SyntaxAppend(JB_StdErr, _tmPf2);
	JB_Decr(_tmPf2);
}

int JB_Err__Init_() {
	{
		JB__Err_AutoPrint = 0;
	}
	;
	return 0;
}

int JB_Err__InitCode_() {
	return 0;
}

JB_Error* JB_Err__New(Message* node, JB_String* desc, ErrorSeverity level, JB_String* path) {
	JB_Error* __rz__ = ((JB_Error*)JB_Err__Alloc());
	if (__rz__) {
		JB_Err_Constructor(__rz__, node, desc, level, path);
	}
	return __rz__;
}



void JB_InitClassList(SaverLoadClass fn) {
	fn(&SaveableData, (char*)"");
	fn(&JB_StringData, (char*)"|int| Length_");
	fn(&ArrayData, (char*)"|int| Marker");
	fn(&DictionaryData, (char*)"");
	fn(&JB_FileData, (char*)"|int| Length_, |int| Descriptor");
	fn(&SavingTestData, (char*)"|string| Name, |int| Value, |int| ABC");
	fn(&SCFileData, (char*)"|int| Length_, |int| Descriptor, |string| ExportName, |string| FData, |int| OrigDate, |int| filenum, |bool| IsInternal");
	fn(&JB_StringData, (char*)"|int| Length_");
	fn(&JB_StringData, (char*)"|int| Length_");
	fn(&JB_StringCData, (char*)"|int| Length_");
}
}

// 6157105007346658 3573148682234364