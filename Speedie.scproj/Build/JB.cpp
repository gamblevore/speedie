
// Auto-generated file, by speedie.

/* jeebox-licence:
    By Theodore H. Smith, 2019, theo@jeebox.org
	
    This software is provided 'as-is', without any warranty.
    In no event will the author be held liable for any damages
    arising from the use of this software.

    Permission is granted to anyone to use this software for any purpose,
    including commercially, and to alter it and redistribute it
    freely, subject to the following restrictions:

    1. The origin of this software must not be misrepresented; you must not
        claim that you wrote the original software.
    2. If you use this software or portions of this software in a product, you
        are required to acknowledge this in at least one of:
        About-window / launch-screen / help-files / read-me-file
    3. Altered source vershions must be plainly marked as such, and must not be
        misrepresented as being the original software.
    4. Any jeebox-licence note may not be removed/altered from any source distribution.
*/
#include "JB_Umbrella.hpp"
#include "JB.h"

#pragma GCC visibility push(hidden)
extern "C" {

extern JB_StringC* JB_LUB[2114];

extern Object_Behaviour JB_Object_FuncTable_;
void JB_InitClassList(SaverLoadClass fn);

JB_String* JB_App__AppName() {
	JB_String* _tmPf0 = JB_Incr(JB_App__AppPath());
	JB_String* _tmPf1 = JB_Incr(JB_Str_Name(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_App__AppPath() {
	if (JB_Platform__OSX()) {
		JB_String* _tmPf0 = JB_Incr(JB_App__OrigPath());
		JB_String* _tmPf1 = JB_Incr(JB_Str_BackToApp(_tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return JB_App__OrigPath();
}

JB_String* JB_App__Conf(JB_String* Name) {
	Message* _tmPf0 = JB_Incr(JB_Msg_GetConf(JB__App__Conf, Name, false));
	JB_String* _tmPf1 = JB_Incr(JB_Msg_Value(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void JB_App__ConfigureSet(JB_String* Value) {
	JB_Error* Err = nil;
	JB_SetRef(JB__App__Conf, JB_Str_ParseWithError(Value, (&Err)));
	if (Err) {
		JB_String* _tmPf0 = JB_Incr(JB_Err_Render(Err, nil));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Err);
	if ((!(JB__App__Conf))) {
		JB_SetRef(JB__App__Conf, JB_Msg_ConstructorEmpty(nil));
	}
}

void JB_App__Crash(JB_String* Reason) {
	if (JB_Str_Exists(Reason)) {
		JB_PrintLine(Reason);
	}
	JB_Rec__CrashLog(JB_Str_SyntaxCast(JB_Str_MakeC(JB_LUB[620])));
	(*((byte*)-1)) = 0;
	JB_PrintLine(JB_LUB[794]);
	JB_App__Quit(JB_LUB[0], -1);
}

ErrorInt JB_App__CWDSet(JB_String* Value) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_ResolvePath(Value, false));
	ErrorInt _tmPf1 = JB_File__chdir(_tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

JB_String* JB_App__FileName() {
	JB_String* _tmPf0 = JB_Incr(JB_App__OrigPath());
	JB_String* _tmPf1 = JB_Incr(JB_Str_Name(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_App__Init_() {
	{
		JB_SetRef(JB__App_Usage, JB_LUB[0]);
		JB_SetRef(JB__App__Path, JB_LUB[0]);
	}
	;
	return 0;
}

int JB_App__InitCode_() {
	return 0;
}

bool JB_App__IsMainThread() {
	return (!JB_LibIsThreaded());
}

bool JB_App__No(JB_String* Name) {
	return (!JB_App__Yes(Name));
}

JB_String* JB_App__OrigPath() {
	//visible;
	JB_String* P = JB_Incr(JB__App__Path);
	if (JB_Str_Exists(P)) {
		JB_SafeDecr(P);
		return P;
	}
	Dictionary* _tmPf0 = JB_Incr(JB_App__Env());
	JB_SetRef(P, ((JB_String*)JB_Dict_ValueStr(_tmPf0, JB_LUB[1114])));
	JB_Decr(_tmPf0);
	if (JB_Str_Exists(P)) {
		JB_SetRef(JB__App__Path, P);
		JB_SafeDecr(P);
		return P;
	}
	JB_SetRef(P, JB_App__Path());
	if (JB_Str_Exists(P)) {
		JB_SetRef(JB__App__Path, P);
		JB_SafeDecr(P);
		return P;
	}
	JB_Decr(P);
	return JB_LUB[0];
}

JB_String* JB_App__GetPref(JB_String* S) {
	Message* _tmPf0 = JB_Incr(JB_Msg_GetConf(JB__App__Prefs, S, false));
	JB_String* _tmPf1 = JB_Incr(JB_Msg_Value(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void JB_App__PrefSet(JB_String* S, JB_String* Value) {
	(JB_Msg_SetStr(JB_App__PrefsInit(0), S, Value));
}

JB_String* JB_App__PrefPath() {
	JB_String* Rz = JB_Incr(JB_LUB[0]);
	JB_SetRef(Rz, JB_App__Conf(JB_LUB[1874]));
	if ((!JB_Str_Exists(Rz))) {
		JB_Decr(Rz);
		return JB_LUB[0];
	}
	if (JB_Str_First(Rz) == '~') {
		JB_SetRef(Rz, JB_File_PathFix_(Rz));
	}
	if (JB_Str_Equals(Rz, JB_LUB[1596], true)) {
		JB_SetRef(Rz, JB_LUB[0]);
	}
	if (JB_Str_First(Rz) != '/') {
		JB_SetRef(Rz, JB_File__AppPrefs(Rz));
	}
	if ((!((JB_Str_First(Rz) == '/') or (JB_Str_First(Rz) == '~')))) {
		JB_Str_SyntaxExpect(JB_LUB[636]);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_App__PrefsInit(Date When) {
	if (JB__App__Prefs) {
		return JB__App__Prefs;
	}
	JB_String* Pref_path = JB_Incr(JB_App__PrefPath());
	if (JB_Str_Exists(Pref_path)) {
		JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(Pref_path));
		JB_SetRef(JB__App__Prefs, JB_File_Conf(_tmPf0, 1048576));
		JB_Decr(_tmPf0);
	}
	JB_Decr(Pref_path);
	if ((!JB__App__Prefs)) {
		JB_String* _tmPf1 = JB_Incr(JB_Str__Error());
		JB_SetRef(JB__App__Prefs, JB_Msg_ConstructorNormal(nil, JB_SyxArg, _tmPf1));
		JB_Decr(_tmPf1);
	}
	if (When) {
		if (When < 0) {
			When = JB_Date__Now();
		}
		JB_String* _tmPf2 = JB_Incr(JB_App__GetPref(JB_LUB[1655]));
		if ((!(JB_Str_Exists(_tmPf2)))) {
			JB_String* _tmPf3 = JB_Incr(JB_Date_RenderInt(When, nil));
			(JB_App__PrefSet(JB_LUB[1655], _tmPf3));
			JB_Decr(_tmPf3);
		}
		JB_Decr(_tmPf2);
	}
	return JB__App__Prefs;
}

void JB_PrintStackTrace() {
	//visible;
	JB_String* _tmPf0 = JB_Incr(JB_App__StackTrace(2, nil));
	JB_Str_Print(_tmPf0);
	JB_Decr(_tmPf0);
}

void JB_App__SavePrefs() {
	{
		Message* _t = JB__App__Prefs;
		if (_t) {
			JB_config_Save(_t);
		}
	};
}

ErrorInt2 JB_App__Say(JB_String* S, bool Print) {
	//visible;
	if (Print) {
		JB_PrintLine(S);
	}
	Array* _tmPf0 = JB_Incr((JB_Array_Constructor0(nil)));
	JB_Array_SyntaxAppend(_tmPf0, S);
	ErrorInt2 _tmPf1 = JB_Str_Execute(JB_LUB[429], _tmPf0, nil, nil, true);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

JB_String* JB_App__StackTrace(int Skip, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	void* Arr[128] = {
	};
	int Size = (128);
	_cstring* Strs = JB_App__BackTrace((&Arr[0]), (&Size));
	{
		IntRange _LoopSrcf2 = JB_int_OperatorTo(Skip, Size - 1);
		int __Endf0 = _LoopSrcf2[1];
		int I = _LoopSrcf2[0];
		while (I < __Endf0) {
			JB_FS_AppendCString(Fs, Strs[I]);
			JB_FS_AppendByte(Fs, '\n');
			I++;
		};
	}
	;
	JB_free(Strs);
	JB_String* _tmPf3 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

int64 JB_App__StringMemory() {
	return JB_MemUsedString();
}

JB_String* JB_App__ArgValue(JB_String* Name) {
	{
		Array* _LoopSrcf2 = JB_App__Args();
		int _if0 = 0;
		while (true) {
			JB_String* R = ((JB_String*)JB_Array_Value(_LoopSrcf2, _if0));
			if (R == nil) {
				break;
			}
			if (JB_Str_Equals(JB_Str_ArgName(R), Name, true)) {
				return JB_Str_ArgValue(R);
			}
			_if0++;
		};
	}
	;
	return JB_LUB[0];
}

bool JB_App__Yes(JB_String* Name) {
	JB_String* _tmPf0 = JB_Incr(JB_App__ArgValue(Name));
	bool _tmPf1 = JB_Str_Yes(_tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}


int SC_AutoComplete__Init_() {
	{
		JB_SetRef(SC__AutoComplete_Owner, JB_Str_Dict(JB_LUB[1800], '/'));
		JB_SetRef(SC__AutoComplete_function_names, JB_LUB[1777]);
		JB_SetRef(SC__AutoComplete_Functions, JB_Str_Dict(SC__AutoComplete_function_names, '/'));
	}
	;
	return 0;
}

int SC_AutoComplete__InitCode_() {
	return 0;
}

bool SC_AutoComplete__IsAFunc(JB_String* S) {
	return JB_FreeIfDead(JB_Dict_ValueStr(SC__AutoComplete_Functions, S)) != nil;
}


bool SC_CodeSorter__LeafFunctionsSorter(SCFunction* A, SCFunction* B) {
	int X = ((int)A->LinkDepth) - ((int)B->LinkDepth);
	if (X < 0) {
		return true;
	}
	if (X == 0) {
		return JB_Str_CompareStr(A->ExportName, B->ExportName, false) <= -1;
	}
	return false;
}

void SC_CodeSorter__LeafsFirst() {
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			SC_Func_FindDepths(F);
			_if0++;
		};
	}
	;
	JB_Array_Sort(SC__Comp_FuncList, ((FP_SorterComparer)SC_CodeSorter__LeafFunctionsSorter), false);
}


SCDecl* SC_Comp__AddGlobalConst(JB_String* Name, SCClass* C, NilState Dcl) {
	SCDecl* D = JB_Incr(SC_Decl_Constructor(nil, C));
	(SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_DataConst, true));
	D->NilDeclared = Dcl;
	JB_SetRef(D->IsLookupOnly, JB_LUB[0]);
	(SC_Decl_NameSet(D, Name));
	JB_SetRef(D->Default, (JB_Syx_Msg(JB_SyxThg, Name)));
	SC_Base_TryAdd(SC__Comp_program, nil, D, Name);
	JB_SafeDecr(D);
	return D;
}

void SC_Comp__AddGlobalConstNumWithStrClassInt64(JB_String* Name, SCClass* C, int64 Value) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(Value, nil));
	SC_Comp__AddGlobalConstNumWithStrClassStr(Name, C, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_Comp__AddGlobalConstNumWithStrClassStr(JB_String* Name, SCClass* C, JB_String* Value) {
	SCDecl* _tmPf0 = JB_Incr(SC_Comp__AddGlobalConst(Name, C, kSC__NilState_Real));
	JB_SetRef(_tmPf0->IsLookupOnly, JB_Syx_OperatorPlus(JB_SyxNum, Value));
	JB_Decr(_tmPf0);
}

bool SC_Comp__AddMain(int Mark) {
	Message* M = JB_Incr(SC_Comp__MakeMainFunc());
	SCDecl* B = JB_Incr(((SCDecl*)JB_Ternary(SC__Options_ProjectIsLibrary, JB_TrueBool, JB_FalseBool)));
	if (((bool)M) and ((bool)SC__Comp_ConfMsg)) {
		Message* _tmPf0 = JB_Incr(JB_Str_ParseJbin(((JB_LUB[29])), kJB__int64_max));
		(JB_Ring_FirstSet(M, _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_Decr(M);
	SC_Base_TryAdd(SC__Comp_program, nil, B, JB_LUB[1442]);
	JB_Decr(B);
	JB_StdErr->LowerErrorsTo = 0;
	return Mark == JB_StdErr->ErrorCount;
}

JB_String* SC_Comp__AddSCProj(JB_String* Path) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Name(Path));
	if (JB_Str_ContainsByte(_tmPf0, '.')) {
		JB_Decr(_tmPf0);
		return Path;
	}
	JB_Decr(_tmPf0);
	return JB_Str_OperatorPlus(Path, JB_LUB[379]);
}

Dictionary* SC_Comp__Adj(Message* F) {
	Dictionary* D = SC__Comp_AdjDicts;
	if (JB_Msg_EqualsSyx(F, JB_SyxThg, false)) {
		return ((Dictionary*)JB_Dict_Expect(D, F));
	}
	return ((Dictionary*)JB_Dict_ValueStr(D, JB_LUB[1682]));
}

void SC_Comp__AppBuildLibs(JB_File* Inner) {
	{
		Message* _LoopSrcf2 = SC__Linkage_OSXFrameworks;
		Message* Lib = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Lib) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Lib));
			if (JB_Msg_Expect(Lib, JB_SyxStr, nil)) {
				SC_Comp__AppBuildOneLib(Inner, Lib);
			}
			Lib = _Nf1;
		};
		;
	};
}

void SC_Comp__AppBuildOneLib(JB_File* Inner, Message* Lib) {
	JB_File* _tmPf0 = JB_Incr(JB_File_Parent(Inner));
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[886], Lib->Name));
	JB_File* Ldest = JB_Incr(JB_File_Sibling(_tmPf0, _tmPf1));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	if ((!JB_File_Exists(Ldest, false))) {
		JB_File* Dir = JB_Incr(JB_Str_AsFile(JB_LUB[432]));
		JB_File* _tmPf2 = JB_Incr(JB_File_SyntaxAccess(Dir, Lib->Name));
		JB_Decr(Dir);
		JB_StringC* _tmPf3 = JB_Incr(JB_Str_CastZero(Ldest));
		JB_File_HardLinkTo(_tmPf2, _tmPf3);
		JB_Decr(_tmPf2);
		JB_Decr(_tmPf3);
	}
	JB_Decr(Ldest);
}

void SC_Comp__AppendCompilerTime(JB_String* S, int Durr) {
	SC_FS_AppendWidth(SC__Comp_TimerOutput, S, kSC__Comp_kTimeWidth);
	if (SC_Options__Color()) {
		JB_FS_AppendString(SC__Comp_TimerOutput, kJB__ErrorColors_good);
	}
	JB_FS_AppendDurr(SC__Comp_TimerOutput, Durr);
	if (SC_Options__Color()) {
		JB_FS_AppendString(SC__Comp_TimerOutput, kJB__ErrorColors_normal);
	}
	JB_FS_AppendByte(SC__Comp_TimerOutput, '\n');
}

void SC_Comp__AppleBuildApp(JB_File* Project, JB_File* Product) {
	if ((!JB_Platform__OSX())) {
		return;
	}
	JB_String* Dest = JB_Incr(JB_File_LinkToGet(Product));
	if (JB_Str_Exists(Dest)) {
		if (true) {
			JB_Object_Fail(Dest, JB_LUB[1301]);
		}
		JB_Decr(Dest);
		return;
	}
	JB_Decr(Dest);
	SC_Comp__Stage(JB_LUB[797]);
	JB_String* Name = JB_Incr(SC_Comp__IdealName());
	JB_String* Prefered_name = JB_Incr(JB_Str_OperatorPlus(Name, JB_LUB[364]));
	JB_File* Prefered_app = JB_Incr(JB_File_Sibling(Product, Prefered_name));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1172], Prefered_name));
	JB_Decr(Prefered_name);
	JB_File* Xcode_place = JB_Incr(JB_File_Sibling(Prefered_app, _tmPf0));
	JB_Decr(_tmPf0);
	JB_File* Final_app = JB_Incr(((JB_File*)JB_Ternary(JB_Str_FileExists(Xcode_place), Xcode_place, Prefered_app)));
	JB_Decr(Xcode_place);
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[788], Name));
	JB_Decr(Name);
	JB_File* _tmPf1 = JB_Incr(JB_File_SyntaxAccess(Final_app, _tmPf2));
	JB_Decr(_tmPf2);
	JB_File* Inner = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (JB_ErrorInt_SyntaxCast(JB_File_MoveTo(Product, Inner))) {
		SC_Comp__AppBuildLibs(Inner);
		SC_Comp__CodeSign(Final_app);
		if (Prefered_app != Final_app) {
			(JB_File_LinkToSet(Prefered_app, Final_app));
		}
		JB_SetRef(SC__Options_output_path, Prefered_app);
		JB_File_Touch(Prefered_app);
	}
	JB_Decr(Prefered_app);
	JB_Decr(Final_app);
	JB_Decr(Inner);
}

bool SC_Comp__Banned(JB_String* Name) {
	Dictionary* B = SC__Options_BannedClasses;
	if (B) {
		return ((bool)JB_Dict_ValueLower(B, Name));
	}
	return false;
}

void SC_Comp__BuildConstructors() {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			if (SC_Func_CanBuildConstructor(F)) {
				SC_Func_BuildConstructorDestructor(F);
			}
			_if0++;
		};
	}
	;
	JB_SetRef(SC__Func_CurrFunc, nil);
}

JB_File* SC_Comp__BuildFolder() {
	JB_File* B = SC__Comp__BuildFolder;
	if ((!JB_File_Exists(B, false))) {
		JB_Str_MakeDir(B);
	}
	return B;
}

void SC_Comp__Bundle() {
	if ((!((!SC_Comp__IsTest()) and (!SC__Options_ExternalCompile)))) {
		return;
	}
	if ((!SC_SC_Targets__SyntaxAccess(JB_LUB[1686]))) {
		return;
	}
	JB_File* Pd = JB_Incr(SC_Comp__ProductFile());
	JB_String* Pj = JB_Incr(JB_File_Path(SC__Comp_BaseProjectPath));
	if (JB_Platform__OSX()) {
		JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(Pj));
		SC_Comp__AppleBuildApp(_tmPf0, Pd);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Pd);
	JB_Decr(Pj);
}

void SC_Comp__CheckIsGoodLibrary() {
	if (SC__Options_ProjectIsLibrary) {
		if ((!SC__Comp_API_Place)) {
			JB_Str_SyntaxExpect(JB_LUB[1062]);
			return;
		}
	}
}

bool SC_Comp__ClassSorter(JB_Object* A, JB_Object* B) {
	return SC_Comp__ModulesSorter(((SCClass*)A)->Modul, ((SCClass*)B)->Modul);
}

void SC_Comp__ClearEnvs() {
	{
		Dictionary* _LoopSrcf2 = JB_Incr(JB_App__Env());
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf2));
		JB_Decr(_LoopSrcf2);
		while (true) {
			JB_String* V = JB_Incr(((JB_String*)JB_DictionaryReader_NextValue(_navf0)));
			if (V == nil) {
				JB_Decr(V);
				break;
			}
			JB_Decr(V);
			JB_String* K = JB_Incr(JB_Nav_Name(_navf0));
			if ((!JB_Str_Equals(K, JB_LUB[901], true)) and ((!JB_Str_Equals(K, JB_LUB[982], true)) and ((!JB_Str_Equals(K, JB_LUB[1117], true)) and ((!JB_Str_Equals(K, JB_LUB[1120], true)) and (!JB_Str_Equals(K, JB_LUB[1200], true)))))) {
				JB_StringC* _tmPf3 = JB_Incr(JB_Str_CastZero(K));
				(JB_App__SetEnv(_tmPf3, nil));
				JB_Decr(_tmPf3);
			}
			JB_Decr(K);
		};
		JB_Decr(_navf0);
	};
}

void SC_Comp__CodeSign(JB_File* Gui_exe) {
	JB_String* Sign = JB_Incr(JB_App__GetPref(kJB_codesign_native));
	if (JB_Str_Exists(Sign)) {
		SC_File_CodeSign(Gui_exe, Sign);
	}
	 else {
		JB_String* _tmPf1 = JB_Incr(JB_File_Path(Gui_exe));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1066], _tmPf1));
		JB_Decr(_tmPf1);
		JB_Rec__NewProblem(nil, _tmPf0, nil);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Sign);
}

void SC_Comp__CollectConstants() {
	{
		Message* _LoopSrcf2 = SC__Comp_ConstantsList;
		Message* Ch = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			SCNode* B = ((SCNode*)JB_Object_As(Ch->Obj, &SCNodeData));
			if (B) {
				SC_Base_CollectOneConstants(B, Ch);
			}
			Ch = _Nf1;
		};
		;
	};
}

bool SC_Comp__CollectIsaTests(Message* S) {
	S = SC_Msg_UnBra(S);
	if (JB_Msg_EqualsSyx(S, JB_SyxRel, false)) {
		Message* L = ((Message*)JB_Ring_First(S));
		Message* Op = ((Message*)JB_Ring_NextSib(L));
		if ((!(((bool)L) and ((bool)Op)))) {
			JB_Msg_SyntaxExpect(S, JB_LUB[1020]);
			return nil;
		}
		if (JB_Msg_SyntaxEquals(Op, JB_LUB[1481], false)) {
			Message* R2 = ((Message*)JB_Ring_Last(S));
			bool A2 = SC_Comp__CollectIsaTests(L);
			bool B2 = SC_Comp__CollectIsaTests(R2);
			return A2 or B2;
		}
		return ((!JB_Msg_SyntaxEquals(Op, JB_LUB[1855], false)));
	}
	if ((!JB_Msg_EqualsSyx(S, JB_SyxFunc, false))) {
		return true;
	}
	Message* List = ((Message*)JB_Ring_Last(S));
	SCFunction* F = SC_Msg_AsFunc(List);
	if ((!((JB_Object_Isa(F, &SCFunctionData)) and (SC_Func_SyntaxIs(F, kSC__FunctionType_TypeTest))))) {
		return true;
	}
	Message* L1 = ((Message*)JB_Ring_First(List));
	if (L1) {
		Message* R1 = ((Message*)JB_Ring_NextSib(L1));
		if (R1) {
			SCClass* Cls = SC_Msg_ObjCls(R1);
			if (Cls) {
				if (F == SC__Comp_fnIsa) {
					if ((!Cls->HasSubClass)) {
						JB_SetRef(List->Obj, SC__Comp_fnFastIsa);
					}
				}
				if (JB_Msg_EqualsSyx(L1, JB_SyxThg, false)) {
					SC_IsaTester__SyntaxAppend(S);
					return true;
				}
			}
		}
	}
	return false;
}

bool SC_Comp__CompileAll() {
	if ((!SC_Comp__Stage(JB_LUB[772]))) {
		return nil;
	}
	SC_Comp__InitCompiler();
	SC_Comp__ImportAll();
	SC_Rec_ReturnErrors(JB_ErrorDelayer, JB_StdErr);
	if ((!SC__Comp_InitedOK)) {
		return nil;
	}
	if (SC_Comp__Stage(JB_LUB[1030])) {
		SC_Comp__BuildConstructors();
	}
	SC_Comp__CheckIsGoodLibrary();
	if (SC_Comp__Stage(JB_LUB[1242])) {
		SC_Comp__DeadStrip();
	}
	if ((SC__Options_NilStrength > 0) and SC_Comp__Stage(JB_LUB[1061])) {
		SC_Comp__Timer(JB_LUB[1061]);
		SC_nil__FixArchons();
	}
	if ((!SC_Comp__Stage(JB_LUB[1169]))) {
		return nil;
	}
	SC_Comp__Timer(JB_LUB[1169]);
	SC_Comp__DoRefAnalysis();
	if ((!SC_Comp__Stage(JB_LUB[1806]))) {
		return nil;
	}
	SC_PackMaker__AddAll();
	SC_Crkt__Correct();
	if (SC__Options_ModePack) {
		SC_Comp__Timer(JB_LUB[1859]);
		SC_PackMaker__MakePack();
	}
	if (SC__Options_ModeCpp) {
		SC_Comp__Timer(JB_LUB[860]);
		SC_Cpp__ExportAllSource();
	}
	SC_Imp__ExportShaders();
	if ((!SC_Comp__Stage(JB_LUB[876]))) {
		return nil;
	}
	SC_Comp__TimerSub(JB_LUB[1123], SC__Comp_stParseTimeTotal);
	SC_Comp__Timer(JB_LUB[0]);
	return JB_Rec_OK(JB_StdErr);
}

void SC_Comp__CompileTime() {
	if ((!JB_Str_Exists(SC__Options_output_path)) and ((bool)SC__Options_UseScriptLoc)) {
		JB_FreeIfDead(SC_Comp__ScriptLoc(SC__Comp_OriginalInputPath));
	}
	if (SC__Options_SelfReplacement) {
		SC_Comp__FileSanityTests();
	}
	SC_Comp__VariousSelfTests();
	({
		JB__Flow_Disabled++;
		(SC_Sav__TestSaver());
		JB__Flow_Disabled--;
		 0;
	});
	Date Elapsed = ({
		Date Starttime = JB_Date__Now();
		(SC_Comp__CompileAll());
		 (JB_Date_Ago(Starttime));
	});
	SC_Comp__PrintCompileTime(Elapsed);
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	bool CanInstall = true;
	if ((SC__Options_SelfReplacement) and (((JB_Str_Equals(SC__Options_Variant, JB_LUB[1272], true))) and (JB_Platform__Release()))) {
		int ReliableTime = ((int)(64.0f * (1024.0f * 2.5f)));
		CanInstall = (Elapsed < ReliableTime);
		if ((!CanInstall)) {
			JB_Str_SyntaxExpect(JB_LUB[1096]);
		}
	}
	SC_Ext__ExportAndInstall(CanInstall);
}

void SC_Comp__CreateDisambiguation() {
	JB_SetRef(SC__Comp_DisamClasses, SC_Mod__NewContainer(JB_LUB[1446]));
	JB_SetRef(SC__Comp_DisamModules, SC_Mod__NewContainer(JB_LUB[1453]));
}

SCFunction* SC_Comp__CreateFuncFromSource(JB_String* Src) {
	SCFunction* Rz = nil;
	Message* Msg = JB_Incr(SC_Str_ParseClean(Src));
	if (Msg) {
		JB_SetRef(Rz, ((SCFunction*)SC_Func__NewFunc(Msg, nil, Msg)));
		if (Rz) {
			(SC_SCObject_IsVisibleSet(Rz, false));
		}
	}
	JB_Decr(Msg);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Comp__CreateRoot() {
	SCModule* M = JB_Incr(SC__Comp_InternalFile->Proj->Mod);
	JB_SetRef(SC__Comp_program, M);
	JB_SetRef(M->ExportName, JB_LUB[942]);
	JB_SetRef(M->Name, JB_LUB[1776]);
	M->Parent = nil;
	JB_Decr(M);
}

void SC_Comp__DeadStrip() {
	JB_SetRef(SC__Comp_VisibleFuncs, SC_Base_ConstructorStr(nil, JB_LUB[1373], false));
	JB_SetRef(SC__Comp_Interpreter, SC_Base_ConstructorStr(nil, JB_LUB[931], false));
	{
		SCFunction* _t = SC__Comp_MainFunc;
		if (_t) {
			SC_Func_ReachedDetect(_t);
		}
	}
	;
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			SC_Func_ReachedDetect(F);
			_if0++;
		};
	}
	;
	if (SC__Options_MakeInterpreter) {
		{
			Array* _LoopSrcf5 = SC__Comp_ClassList;
			int _if3 = 0;
			while (true) {
				SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf5, _if3));
				if (C == nil) {
					break;
				}
				SC_Class_Reach(C, SC__Comp_Interpreter, nil);
				_if3++;
			};
		};
	}
	{
		Array* _LoopSrcf8 = SC__Comp_ClassList;
		int _if6 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf8, _if6));
			if (C == nil) {
				break;
			}
			if (C->MyReacher) {
				SC_Class_ReachBehaviours(C);
			}
			_if6++;
		};
	}
	;
	SC_CodeSorter__LeafsFirst();
}

void SC_Comp__DoRefAnalysis() {
	Array* List = JB_Array_Constructor0(nil);
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			if (SC_Func_IsARealSpdFunc(F)) {
				JB_Array_Clear(List);
				SC_Func_AnalyseRefs(F, List);
			}
			_if0++;
		};
	}
	;
	JB_SetRef(SC__Func_CurrFunc, nil);
}

void SC_Comp__DoSavers(int Stage) {
	{
		int _if0 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(SC__Comp_ClassList, _if0));
			if (C == nil) {
				break;
			}
			if (SC_Class_IsSaveableObject(C) or SC_Class_IsSaveableStruct(C)) {
				SCFunction* First = SC_Class_DoSaver(C, JB_LUB[1206], Stage);
				SCFunction* Second = SC_Class_DoSaver(C, JB_LUB[995], Stage);
				if (((bool)First) != ((bool)Second)) {
					if ((!(First))) {
						First = Second;
					}
					if (true) {
						JB_Msg_SyntaxExpect(First->Source, JB_LUB[745]);
					}
				}
			}
			_if0++;
		};
	};
}

bool SC_Comp__EnterCompile() {
	return (!SC_Comp__TryVariousStartModes()) and (SC_FB__ParseArgs() and (!SC_AC__EnterAutoComplete()));
}

void SC_Comp__FileSanityTests() {
	JB_File* A = JB_Incr(JB_Str_AsFile(JB_LUB[417]));
	JB_File* B = JB_Incr(JB_Str_AsFile(JB_LUB[416]));
	JB_String* _tmPf1 = JB_Incr(JB_File_Path(A));
	JB_String* C = JB_Incr(JB_Str_Child(_tmPf1, JB_LUB[1468]));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(JB_File_Path(B));
	JB_String* D = JB_Incr(JB_Str_Child(_tmPf2, JB_LUB[1468]));
	{
		int I = 0;
		while (I < 3) {
			if (JB_Rec_OK(JB_StdErr)) {
				SC_Comp__FileTestsSub(A, B, C, D);
			}
			I++;
		};
		JB_Decr(_tmPf2);
	}
	;
	JB_Decr(C);
	JB_Decr(D);
	JB_File_DeleteAll(A);
	JB_Decr(A);
	JB_File_DeleteAll(B);
	JB_Decr(B);
}

void SC_Comp__FileTestsSub(JB_File* Dest, JB_File* Src, JB_String* A, JB_String* B) {
	JB_File_DeleteAll(Dest);
	JB_File_DeleteAll(Src);
	JB_String* Q = JB_Incr(JB_LUB[1336]);
	if ((!((!JB_File_Exists(Dest, false)) and (!JB_File_Exists(Src, false))))) {
		JB_Str_SyntaxExpect(Q);
		JB_Decr(Q);
		return;
	}
	JB_File_LinkToSet(Src, Dest);
	JB_Str_SyntaxAppend(A, Q);
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(B));
	JB_String* ReadBack = JB_Incr(JB_File_ReadAll(_tmPf0, 134217728, true));
	JB_Decr(_tmPf0);
	if ((!JB_Str_Equals(ReadBack, Q, false))) {
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1276], ReadBack));
		JB_Str_SyntaxExpect(_tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(Q);
	JB_Decr(ReadBack);
}

Macro* SC_Comp__FindAdj(Message* Exp, Array* Prms) {
	Message* F = JB_Msg_NeedFirst(Exp);
	if ((!F)) {
		return nil;
	}
	Dictionary* D = SC_Comp__Adj(F);
	if ((!D)) {
		return nil;
	}
	Message* Name = JB_Msg_NeedSyxInt(Exp, JB_SyxThg, 1);
	if ((!Name)) {
		return nil;
	}
	JB_SetRef(Name->Name, JB_Str_LowerCase(Name->Name));
	if ((Prms != nil) and ((!JB_Msg_EqualsSyx(F, JB_SyxThg, false)))) {
		JB_Array_SyntaxAppend(Prms, F);
	}
	return ((Macro*)JB_Dict_Expect(D, Name));
}

SCDecl* SC_Comp__FindClassType(Message* N) {
	SCModule* M = SC__Mod_Curr;
	if ((!M)) {
		M = SC__Comp_program;
	}
	SCClass* C = SC_Base_FindClassMsg(M, N, kSC__SCNodeFindMode_WantAType);
	if (C) {
		return C->TypeNormal;
	}
	return nil;
}

SCFunction* SC_Comp__FindFunction(JB_String* Name) {
	SCObject* O = SC_Base_SyntaxAccess(SC__Comp_program, Name);
	if (JB_Object_FastIsa(O, &SCFunctionData)) {
		return ((SCFunction*)O);
	}
	if (true) {
		JB_Object_Fail(nil, JB_Str_OperatorPlus(JB_LUB[732], Name));
	}
	return nil;
}

SCModule* SC_Comp__FindModuleMsg(Message* Where, SCNodeFindMode Mode) {
	return SC_Base_FindModuleMsg(SC__Comp_program, Where, Mode);
}

SCNode* SC_Comp__FindModuleOrClass(Message* Mod, bool Retry) {
	SCNode* Rz = nil;
	if ((JB_Msg_EqualsSyx(Mod, JB_SyxName, false)) and (JB_Msg_SyntaxEquals(Mod, JB_LUB[1776], false))) {
		return SC__Comp_program;
	}
	SCModule* Module = SC_Comp__FindModuleMsg(Mod, kSC__SCNodeFindMode_NoErrors);
	if ((!Module)) {
		return nil;
	}
	if (JB_Msg_EqualsSyx(Mod, JB_SyxThg, false)) {
		Rz = Module->Cls;
		if ((!(((bool)Rz) or Retry))) {
			return nil;
		}
	}
	if ((!(Rz))) {
		Rz = Module;
	}
	return Rz;
}

JB_File* SC_Comp__FindProject(JB_String* Path, bool Error) {
	JB_File* P = JB_Incr(JB_File_Parent(SC__Comp_BaseProjectPath));
	JB_File* B = JB_Incr(SC_Comp__FindProjectSub(P, Path));
	JB_Decr(P);
	if (JB_File_SyntaxCast(B)) {
		JB_SafeDecr(B);
		return B;
	}
	JB_Decr(B);
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* A = JB_Incr(SC_Comp__FindProjectSub(_tmPf0, Path));
	JB_Decr(_tmPf0);
	if (JB_File_SyntaxCast(A)) {
		JB_SafeDecr(A);
		return A;
	}
	JB_Decr(A);
	return nil;
}

JB_File* SC_Comp__FindProjectSub(JB_String* Base, JB_String* Path) {
	JB_File* Rz = nil;
	if (JB_Str_First(Path) == '/') {
		JB_Decr(Rz);
		return JB_Str_FileThatExists(Path, JB_LUB[1473]);
	}
	JB_String* First = JB_Incr(Path);
	Ind SlashPos = JB_Str_FindByte(Path, '/', 0, JB_int__Max());
	if (JB_Ind_SyntaxCast(SlashPos)) {
		JB_SetRef(First, JB_Str_Range(Path, 0, SlashPos));
	}
	JB_SetRef(First, SC_Comp__AddSCProj(First));
	if (JB_Ind_SyntaxCast(SlashPos)) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(Path, (SlashPos), JB_int__Max()));
		JB_SetRef(First, JB_Str_OperatorPlus(First, _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_SetRef(Rz, JB_Str_ChildFile(Base, First));
	JB_Decr(First);
	if ((!JB_File_Exists(Rz, false))) {
		JB_SetRef(Rz, nil);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* SC_Comp__FindProjNoSuffix(JB_String* Path) {
	JB_String* Spd = JB_Incr(JB_Str_OperatorPlus(Path, JB_LUB[381]));
	if (JB_Str_FileExists(Spd)) {
		JB_SafeDecr(Spd);
		return Spd;
	}
	JB_Decr(Spd);
	return JB_Str_OperatorPlus(Path, JB_LUB[379]);
}

JB_String* SC_Comp__FindSpeedieRoot() {
	JB_String* _tmPf1 = JB_Incr(JB_App__Path());
	JB_String* _tmPf0 = JB_Incr(JB_Str_ResolvePath(_tmPf1, false));
	JB_Decr(_tmPf1);
	JB_String* Paths = JB_Incr(JB_Str_Parent(_tmPf0));
	JB_Decr(_tmPf0);
	JB_String* Srch = JB_Incr(JB_LUB[408]);
	Ind Found = JB_Str_InStr(Paths, Srch, 0, JB_int__Max(), true);
	if (JB_Ind_SyntaxCast(Found)) {
		JB_String* _tmPf2 = JB_Incr(JB_Str_Range(Paths, 0, Found + JB_Str_Length(Srch)));
		JB_Decr(Srch);
		JB_Decr(Paths);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_Decr(Paths);
	JB_Decr(Srch);
	return JB_LUB[433];
}

JB_File* SC_Comp__GeneratedCppsFolder() {
	if ((!SC__Options_ExternalCompile)) {
		return SC__Comp_TempFolder;
	}
	if (SC__Options_SelfReplacement) {
		JB_File* _tmPf0 = JB_Incr(SC_Comp__BuildFolder());
		JB_File* _tmPf3 = JB_Incr(_tmPf0);
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	JB_File* _tmPf1 = JB_Incr(JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, JB_LUB[793]));
	JB_File* _tmPf2 = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_String* SC_Comp__IdealName() {
	Message* S = JB_Incr(JB_Msg_GetConf(SC__Comp_ConfMsg, JB_LUB[1805], false));
	if (S) {
		JB_String* _tmPf2 = JB_Incr(S->Name);
		JB_Decr(S);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_String* _tmPf0 = JB_Incr(SC_Ext__ProductName());
	JB_String* _tmPf1 = JB_Incr(JB_Str_TrimExtAndPath(_tmPf0, true));
	JB_Decr(_tmPf0);
	JB_Decr(S);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Comp__ImportAll() {
	SC_Comp__Timer(JB_LUB[1164]);
	if ((!SC_Comp__Stage(JB_LUB[875]))) {
		return;
	}
	SC_Comp__ImportLibs();
	SC_Comp__ImportProj();
	SC_Comp__ImportAST();
	if (SC__Options_SelfReplacement) {
		SC_VM_Builder__MakeTheVM();
	}
	if ((!SC_Comp__Stage(JB_LUB[910]))) {
		return;
	}
	SC_Comp__Timer(JB_LUB[910]);
	{
		Array* _LoopSrcf2 = JB_Incr(SC__Imp_AllFiles);
		int _if0 = 0;
		while (true) {
			SCFile* L = JB_Incr(((SCFile*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (L == nil) {
				JB_Decr(L);
				break;
			}
			SC_Imp_Use(L->Proj);
			SC_Base_ImportFile(SC__Comp_program, L);
			JB_Decr(L);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	SC_Comp__Stage(JB_LUB[917]);
	int Mark = SC_Comp__InitBasicStuff();
	if ((!SC_Comp__AddMain(Mark))) {
		return;
	}
	JB__Tk_Using.Flags = kJB__MsgParseFlags_Inserted;
	SC_Imp__NoProj();
	SC_SCTasks__CollectAll();
	{
		Array* _LoopSrcf5 = JB_Incr(SC__Comp_ClassList);
		int _if3 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf5, _if3)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_TryAddToProject(C);
			JB_Decr(C);
			_if3++;
		};
		JB_Decr(_LoopSrcf5);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[1142]))) {
		return;
	}
	{
		Message* _LoopSrcf8 = JB_Incr(SC__Comp_ExtendList);
		Message* L = JB_Incr(((Message*)JB_Ring_First(_LoopSrcf8)));
		while (L) {
			Message* _Nf7 = JB_Incr(((Message*)JB_Ring_NextSib(L)));
			JB_FreeIfDead(SC_Class__ProcessExtend(L, true, nil));
			JB_SetRef(L, _Nf7);
			JB_Decr(_Nf7);
		};
		JB_Decr(L);
		;
		JB_Decr(_LoopSrcf8);
	}
	;
	{
		Array* _LoopSrcf11 = JB_Incr(SC__Comp_ExtendModuleList);
		int _if9 = 0;
		while (true) {
			Message* L = JB_Incr(((Message*)JB_Array_Value(_LoopSrcf11, _if9)));
			if (L == nil) {
				JB_Decr(L);
				break;
			}
			JB_FreeIfDead(SC_Class__ProcessExtend(L, false, nil));
			JB_Decr(L);
			_if9++;
		};
		JB_Decr(_LoopSrcf11);
	}
	;
	if ((!SC_Comp__InitBasicFuncs())) {
		return;
	}
	if ((!SC_Comp__Stage(JB_LUB[800]))) {
		return;
	}
	{
		Array* _LoopSrcf14 = JB_Incr(SC__Comp_ClassList);
		int _if12 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf14, _if12)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_CreateBehaviour(C);
			JB_Decr(C);
			_if12++;
		};
		JB_Decr(_LoopSrcf14);
	}
	;
	SC_Comp__LoadSuperClasses();
	{
		Array* _LoopSrcf17 = JB_Incr(SC__Comp_ClassList);
		int _if15 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf17, _if15)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_GetDepth(C);
			JB_Decr(C);
			_if15++;
		};
		JB_Decr(_LoopSrcf17);
	}
	;
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	SC_Comp__SortModulesAndClasses();
	{
		Array* _LoopSrcf20 = JB_Incr(SC__Comp_ClassList);
		int _if18 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf20, _if18)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_DataTypePostLoad(C);
			JB_Decr(C);
			_if18++;
		};
		JB_Decr(_LoopSrcf20);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[1208]))) {
		return;
	}
	{
		Array* _LoopSrcf23 = JB_Incr(SC__Comp_ClassList);
		int _if21 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf23, _if21)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_LoadSaver(C);
			JB_Decr(C);
			_if21++;
		};
		JB_Decr(_LoopSrcf23);
	}
	;
	SC_Comp__DoSavers(0);
	{
		Array* _LoopSrcf26 = JB_Incr(SC__Comp_ClassList);
		int _if24 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf26, _if24)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_ProcessBehaviours(C);
			JB_Decr(C);
			_if24++;
		};
		JB_Decr(_LoopSrcf26);
	}
	;
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	{
		Array* _LoopSrcf29 = JB_Incr(SC__Comp_ClassList);
		int _if27 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf29, _if27)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_LoadClassType(C);
			SC_Class_ProcessInterfaces(C);
			JB_Decr(C);
			_if27++;
		};
		JB_Decr(_LoopSrcf29);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[798]))) {
		return;
	}
	{
		Array* _LoopSrcf32 = JB_Incr(SC__Comp_ClassList);
		int _if30 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf32, _if30)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_ContainedTypeLoad(C);
			JB_Decr(C);
			_if30++;
		};
		JB_Decr(_LoopSrcf32);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[1124]))) {
		return;
	}
	{
		Array* _LoopSrcf35 = JB_Incr(SC__Comp_ClassList);
		int _if33 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf35, _if33)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_CollectProperties(C);
			JB_Decr(C);
			if (SC_TooManyErrors()) {
				JB_Decr(_LoopSrcf35);
				return;
			}
			_if33++;
		};
		JB_Decr(_LoopSrcf35);
	}
	;
	{
		Array* _LoopSrcf38 = JB_Incr(SC__Comp_ClassList);
		int _if36 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf38, _if36)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			if (SC_Class_IsStruct(C)) {
				SC_Class_GetStructDepth(C);
			}
			JB_Decr(C);
			_if36++;
		};
		JB_Decr(_LoopSrcf38);
	}
	;
	SC_Comp__SortModulesAndClasses();
	{
		Array* _LoopSrcf41 = JB_Incr(SC__Comp_ClassList);
		int _if39 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf41, _if39)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_CalculateSize(C, 0);
			JB_Decr(C);
			_if39++;
		};
		JB_Decr(_LoopSrcf41);
	}
	;
	{
		Array* _LoopSrcf44 = JB_Incr(SC__Comp_ClassList);
		int _if42 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf44, _if42)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_LoadConstructors(C);
			JB_Decr(C);
			_if42++;
		};
		JB_Decr(_LoopSrcf44);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[769]))) {
		return;
	}
	SC_Comp__CollectConstants();
	JB_ClassData_Restore((&MessageData));
	SC_Imp__NoProj();
	if (SC__Comp_API_Place) {
		Message* Proj = JB_Incr(JB_Msg_NeedSyx(SC__Comp_API_Place, JB_SyxThg));
		if (Proj) {
			{
				Array* _LoopSrcf47 = JB_Incr(SC__Comp_API_List);
				int _if45 = 0;
				while (true) {
					Message* M = JB_Incr(((Message*)JB_Array_Value(_LoopSrcf47, _if45)));
					if (M == nil) {
						JB_Decr(M);
						break;
					}
					SC_SC_API__DelayedClassAPI(M, Proj->Name);
					JB_Decr(M);
					_if45++;
				};
				JB_Decr(_LoopSrcf47);
			};
		}
		JB_Decr(Proj);
	}
	SC_Comp__DoSavers(1);
	if ((!SC_Comp__Stage(JB_LUB[799]))) {
		return;
	}
	{
		Array* _LoopSrcf50 = JB_Incr(SC__Comp_ClassList);
		int _if48 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf50, _if48)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Base_LoadExportName(C);
			JB_Decr(C);
			_if48++;
		};
		JB_Decr(_LoopSrcf50);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[918]))) {
		return;
	}
	SC_Comp__LoadInitsAndMore();
	SC_Imp__NoProj();
	if ((!SC_Comp__Stage(JB_LUB[903]))) {
		return;
	}
	{
		Array* _LoopSrcf53 = JB_Incr(SC__Comp_ProtoTypes);
		int _if51 = 0;
		while (true) {
			SCFunction* F = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf53, _if51)));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			SC_Func_ProtoExportName(F);
			SC_Func_FuncDecls(F);
			SC_Func_MakeParamsReal(F);
			JB_Decr(F);
			_if51++;
		};
		JB_Decr(_LoopSrcf53);
	}
	;
	JB_SetRef(SC__Func_CurrFunc, nil);
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	SC_Comp__DoSavers(2);
	if ((!SC_Comp__Stage(JB_LUB[1125]))) {
		return;
	}
	{
		Array* _LoopSrcf56 = JB_Incr(SC__Comp_FuncList);
		int _if54 = 0;
		while (true) {
			SCFunction* F = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf56, _if54)));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			SC_Func_FuncDecls(F);
			SC_Base_LoadExportName(F);
			JB_Decr(F);
			if (SC_TooManyErrors()) {
				JB_Decr(_LoopSrcf56);
				return;
			}
			_if54++;
		};
		JB_Decr(_LoopSrcf56);
	}
	;
	JB_SetRef(SC__Func_CurrFunc, nil);
	SCFunction* Fn = JB_Incr(((SCFunction*)((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, JB_LUB[947]))));
	if (Fn) {
		Fn->IsKiller = true;
	}
	JB_Decr(Fn);
	if ((!SC_Comp__Stage(JB_LUB[607]))) {
		return;
	}
	{
		Array* _LoopSrcf59 = JB_Incr(SC__Comp_ClassList);
		int _if57 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf59, _if57)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			JB_SetRef(C->ExportName, SC_Class_StructName(C));
			SC_Class_AfterFuncsDecled(C);
			JB_Decr(C);
			_if57++;
		};
		JB_Decr(_LoopSrcf59);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[842]))) {
		return;
	}
	{
		Array* _LoopSrcf62 = JB_Incr(SC__Comp_ClassList);
		int _if60 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf62, _if60)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_AfterAfterFuncs(C);
			JB_Decr(C);
			_if60++;
		};
		JB_Decr(_LoopSrcf62);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[770]))) {
		return;
	}
	{
		Array* _LoopSrcf65 = JB_Incr(SC__Comp_ModuleList);
		int _if63 = 0;
		while (true) {
			SCModule* M = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf65, _if63)));
			if (M == nil) {
				JB_Decr(M);
				break;
			}
			SC_Mod_InitDecls(M);
			JB_Decr(M);
			_if63++;
		};
		JB_Decr(_LoopSrcf65);
	}
	;
	{
		Array* _LoopSrcf68 = JB_Incr(SC__Imp_AllFiles);
		int _if66 = 0;
		while (true) {
			SCFile* F = JB_Incr(((SCFile*)JB_Array_Value(_LoopSrcf68, _if66)));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			SC_SCFile_CollectGlobals(F, SC__Comp_program);
			JB_Decr(F);
			_if66++;
		};
		JB_Decr(_LoopSrcf68);
	}
	;
	SC_Imp__NoProj();
	JB_ClassData_Restore((&MessageData));
	{
		Array* _LoopSrcf71 = JB_Incr(SC__Comp_ModuleList);
		int _if69 = 0;
		while (true) {
			SCModule* M = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf71, _if69)));
			if (M == nil) {
				JB_Decr(M);
				break;
			}
			if (M != SC__Comp_program) {
				SC_Mod_BaseDecls(M);
			}
			SC_Mod_GlobalsFix(M);
			SCClass* C = JB_Incr(M->Cls);
			JB_Decr(M);
			if (C) {
				SC_Class_RenameInterfaces(C);
			}
			JB_Decr(C);
			_if69++;
		};
		JB_Decr(_LoopSrcf71);
	}
	;
	{
		Array* _LoopSrcf74 = JB_Incr(SC_SortInitOrder(SC__Comp_ModuleList));
		int _if72 = 0;
		while (true) {
			SCModule* M = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf74, _if72)));
			if (M == nil) {
				JB_Decr(M);
				break;
			}
			SC_Mod_DelayedInitFuncTransform(M);
			JB_Decr(M);
			_if72++;
		};
		JB_Decr(_LoopSrcf74);
	}
	;
	SC_Comp__PostInitCodeCall();
	SC_Comp__Stage(JB_LUB[801]);
	{
		Array* _LoopSrcf77 = JB_Incr(SC__Comp_FuncList);
		int _if75 = 0;
		while (true) {
			SCFunction* F = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf77, _if75)));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			SCDecl* P = JB_Incr(F->ProtoDecl);
			if (P) {
				(SC_Decl_NameSet(P, F->ExportName));
			}
			 else {
				SC_Func_AddConstructorReturn2(F);
			}
			JB_Decr(F);
			JB_Decr(P);
			_if75++;
		};
		JB_Decr(_LoopSrcf77);
	}
	;
	SC_Comp__Stage(JB_LUB[761]);
	{
		Array* _LoopSrcf80 = JB_Incr(SC__Comp_ClassList);
		int _if78 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf80, _if78)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Class_CheckIterator(C);
			JB_Decr(C);
			_if78++;
		};
		JB_Decr(_LoopSrcf80);
	}
	;
	SC_Comp__Timer(JB_LUB[1325]);
	SC_Comp__Stage(JB_LUB[1326]);
	SC_Func__TransformAll();
	SC_Comp__Stage(JB_LUB[678]);
	SC_LinkMap__CollectAll();
	JB_SetRef(SC__Func_CurrFunc, nil);
}

void SC_Comp__ImportAST() {
	{
		Array* _LoopSrcf2 = SC__Comp_ImportedList;
		int _if0 = 0;
		while (true) {
			SCImport* Rz = ((SCImport*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Rz == nil) {
				break;
			}
			SC_Imp_PrepareAll(Rz);
			_if0++;
		};
	};
}

void SC_Comp__ImportLibs() {
	SC__Imp_STDLibTime = true;
	JB_File* _tmPf0 = JB_Incr(SC_Comp__Library());
	JB_FreeIfDead(SC_Imp__ImportPath(JB_LUB[992], _tmPf0, 1, true));
	JB_Decr(_tmPf0);
	JB_File* _tmPf1 = JB_Incr(SC_Comp__Jeebox());
	JB_FreeIfDead(SC_Imp__ImportPath(JB_LUB[1743], _tmPf1, 1, true));
	JB_Decr(_tmPf1);
}

void SC_Comp__ImportProj() {
	SC__Imp_STDLibTime = false;
	JB_File* ToUse = JB_Incr(((JB_File*)JB_Ternary(JB_Str_Exists(SC__Options_SingleFileInput), JB_Str_AsFile(SC__Options_SingleFileInput), SC__Comp_BaseProjectPath)));
	JB_SetRef(SC__Comp_Project, SC_Imp__ImportPath(JB_LUB[0], ToUse, 0, false));
	JB_Decr(ToUse);
	if ((!SC__Comp_Project)) {
		JB_Str_SyntaxExpect(JB_LUB[1082]);
		return;
	}
}

int SC_Comp__Init_() {
	{
		JB_SetRef(SC__Comp_OriginalInputPath, JB_LUB[0]);
		JB_SetRef(SC__Comp__Projects, JB_LUB[0]);
		JB_SetRef(SC__Comp__SpeedieProj, JB_LUB[0]);
		SCImport* _tmPf0 = JB_Incr(SC_Imp_Constructor(nil, nil, true));
		JB_SetRef(SC__Comp_InternalFile, SC_SCFile_Constructor(nil, nil, _tmPf0));
		JB_Decr(_tmPf0);
		JB_SetRef(SC__Comp_ProjectName, JB_LUB[0]);
		JB_SetRef(SC__Comp_ReportedName, JB_LUB[0]);
		JB_SetRef(SC__Comp_TodoList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ImportedList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ImportedNames, JB_Dict_Constructor(nil));
		JB_SetRef(SC__Comp_program, SC__Comp_InternalFile->Proj->Mod);
		JB_SetRef(SC__Comp_ClassList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ModuleList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_FuncList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ProtoTypes, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ExportNames, JB_Dict_Constructor(nil));
		JB_SetRef(SC__Comp_AdjDicts, JB_Dict_Constructor(nil));
		JB_SetRef(SC__Comp_SyxArray, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ExtendList, JB_Msg_ConstructorEmpty(nil));
		JB_SetRef(SC__Comp_ConstantsList, JB_Msg_ConstructorEmpty(nil));
		JB_SetRef(SC__Comp_DeclConstants, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_TasksList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_TasksTodo, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ExtendModuleList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_API_List, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_API_Funcs, JB_Array_Constructor0(nil));
		SC__Comp_InPerry = false;
		SC__Comp_HasMainFunc = false;
		SC__Comp_InitedOK = true;
		SC__Comp_stClasses = 0;
		SC__Comp_stFuncs = 0;
		SC__Comp_stReachedFunc = 0;
		SC__Comp_stReachedClass = 0;
		SC__Comp_stParseTime = 0;
		SC__Comp_stTotalSourceSize = 0;
		SC__Comp_stTotalFileCount = 0;
		SC__Comp_stParseTimeTotal = 0;
		SC__Comp_CurrStage = 0;
		SC__Comp_LastTime = 0;
		JB_SetRef(SC__Comp_LastTimeName, JB_LUB[0]);
		JB_SetRef(SC__Comp_TimerOutput, JB_FS_Constructor(nil));
	}
	;
	return 0;
}

bool SC_Comp__InitBasicFuncs() {
	JB_SetRef(SC__Comp_RefSetRef, SC_Comp__LoadRefFunc(JB_LUB[968]));
	JB_SetRef(SC__Comp_RefIncr, SC_Comp__LoadRefFunc(JB_LUB[960]));
	JB_SetRef(SC__Comp_RefDecr, SC_Comp__LoadRefFunc(JB_LUB[951]));
	JB_SetRef(SC__Comp_RefClear, SC_Comp__LoadRefFunc(JB_LUB[950]));
	JB_SetRef(SC__Comp_RefDecrMulti, SC_Comp__LoadRefFunc(JB_LUB[952]));
	JB_SetRef(SC__Comp_RefFreeIfDead, SC_Comp__LoadRefFunc(JB_LUB[958]));
	JB_SetRef(SC__Comp_RefSafeDecr, SC_Comp__LoadRefFunc(JB_LUB[967]));
	JB_SetRef(SC__Comp_NewFunc, SC_Comp__FindFunction(JB_LUB[963]));
	JB_SetRef(SC__Comp_TernaryFunc, SC_Comp__FindFunction(JB_LUB[971]));
	JB_SetRef(SC__Comp_fnAs, SC_Comp__LoadTypeTest(JB_LUB[1846]));
	JB_SetRef(SC__Comp_fnFastAs, SC_Comp__LoadTypeTest(JB_LUB[1847]));
	JB_SetRef(SC__Comp_fnFastIsa, SC_Comp__LoadTypeTest(JB_LUB[1848]));
	JB_SetRef(SC__Comp_fnIsa, SC_Comp__LoadTypeTest(JB_LUB[1849]));
	JB_SetRef(SC__Comp_fnMustbe, SC_Comp__LoadTypeTest(JB_LUB[1803]));
	JB_SetRef(SC__Comp_fnOpMustBe, SC_Comp__LoadTypeTest(JB_LUB[1850]));
	JB_SetRef(SC__Comp_PrivateProperty, SC_Comp__CreateFuncFromSource(JB_LUB[1676]));
	return JB_Rec_OK(JB_StdErr);
}

int SC_Comp__InitBasicStuff() {
	int Rz = 0;
	Rz = JB_StdErr->ErrorCount;
	if (Rz > 0) {
		JB_StdErr->LowerErrorsTo = kJB__ErrorSeverity_Warning;
		SC__Comp_InitedOK = false;
	}
	JB_ClassData_Restore((&MessageData));
	JB_Array_SyntaxAppend(SC__Comp_ModuleList, SC__Comp_program);
	SC_Comp__InitTypes();
	JB_SetRef(JB_TypeNil, SC_Comp__AddGlobalConst(JB_LUB[1810], JB_TypeObject, kSC__NilState_ActuallyNil));
	JB_SetRef(JB_TrueBool, SC_Comp__AddGlobalConst(JB_LUB[2004], JB_TypeBool, kSC__NilState_Real | kSC__NilState_TrueValue));
	JB_SetRef(JB_FalseBool, SC_Comp__AddGlobalConst(JB_LUB[1648], JB_TypeBool, kSC__NilState_Real | kSC__NilState_FalseValue));
	SC_Comp__AddGlobalConstNumWithStrClassInt64(JB_LUB[1456], JB_TypeInt, JB_Date_TimeID(SC__Imp_Recent));
	SC_Comp__AddGlobalConstNumWithStrClassInt64(JB_LUB[1454], JB_TypeDate, JB_Date__Now());
	SC_Comp__AddGlobalConstNumWithStrClassInt64(JB_LUB[1452], JB_TypeDate, SC__Imp_Recent);
	SC_Comp__AddGlobalConstNumWithStrClassStr(JB_LUB[2105], JB_Typef64, JB_LUB[494]);
	SC_Comp__AddGlobalConstNumWithStrClassStr(JB_LUB[2106], JB_Typef64, JB_LUB[538]);
	if (JB_StdErr->ErrorCount > Rz) {
		SC__Comp_InitedOK = false;
	}
	return Rz;
}

int SC_Comp__InitCode_() {
	return 0;
}

void SC_Comp__InitCompiler() {
	if ((!((({
		JB_String* _tmPf2 = JB_Incr(SC_Comp__Projects());
		JB_File* _tmPf1 = JB_Incr(JB_Str_ChildFile(_tmPf2, JB_LUB[992]));
		JB_Decr(_tmPf2);
		bool _tmPf0 = JB_File_MustExist(_tmPf1, JB_LUB[0]);
		JB_Decr(_tmPf1);
		 _tmPf0;
	})) and JB_Rec_OK(JB_StdErr)))) {
		return;
	}
	SC_Opp__Init();
	SC_Cpp__Init();
	if ((!(SC__Comp_Files))) {
		JB_SetRef(SC__Comp_Files, JB_Dict_Constructor(nil));
	}
	JB_FS_AppendByte(SC__Comp_TimerOutput, '\n');
	Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxStr, JB_LUB[0]));
	SC_Crkt__CollectString(_tmPf3, true);
	JB_Decr(_tmPf3);
	SC__Comp_CurrStage = 1;
	SC__SC_UniqueNum = 100;
	if (JB_Str_Exists(SC__Options_SingleFileInput)) {
		if (JB__Proc_Parent) {
			JB_String* _tmPf4 = JB_Incr(SC_Str_ScriptContainer(SC__Comp_OriginalInputPath, JB_LUB[422]));
			JB_SetRef(SC__Comp__BuildFolder, JB_Str_AsFile(_tmPf4));
			JB_Decr(_tmPf4);
		}
		 else {
			JB_SetRef(SC__Comp__BuildFolder, SC__Comp_BaseProjectPath);
		}
	}
	 else {
		JB_String* _tmPf6 = JB_Incr(SC_Comp__VariantSuffix());
		JB_String* _tmPf5 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[675], _tmPf6));
		JB_Decr(_tmPf6);
		JB_SetRef(SC__Comp__BuildFolder, JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, _tmPf5));
		JB_Decr(_tmPf5);
	}
	JB_String* _tmPf8 = JB_Incr(SC_Ext__ProjTmpPath());
	JB_File* _tmPf7 = JB_Incr(JB_Str_AsFile(_tmPf8));
	JB_Decr(_tmPf8);
	JB_File* T = JB_Incr(_tmPf7);
	JB_Decr(_tmPf7);
	JB_SetRef(SC__Comp_TempFolder, T);
	JB_Str_MakeEntirePath(T, true);
	JB_Decr(T);
	JB_File* _tmPf9 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_Str_MakeEntirePath(_tmPf9, true);
	JB_Decr(_tmPf9);
	SC_Comp__CreateRoot();
	SC_Comp__CreateDisambiguation();
	JB_Array_SyntaxAppend(SC__Imp_AllFiles, SC__Comp_InternalFile);
	JB_SetRef(SC__IR_Resources, SC__Imp_AllFiles);
}

void SC_Comp__InitTypes() {
	JB_SetRef(JB_TypeInt, SC_Comp__FindClassName(JB_LUB[1715]));
	JB_SetRef(JB_TypeInt16, SC_Comp__FindClassName(JB_LUB[1719]));
	JB_SetRef(JB_TypeInt64, SC_Comp__FindClassName(JB_LUB[1720]));
	JB_SetRef(JB_TypeuInt, SC_Comp__FindClassName(JB_LUB[2014]));
	JB_SetRef(JB_TypeuInt16, SC_Comp__FindClassName(JB_LUB[2015]));
	JB_SetRef(JB_TypeuInt64, SC_Comp__FindClassName(JB_LUB[2016]));
	JB_SetRef(JB_Typef64, SC_Comp__FindClassName(JB_LUB[1646]));
	JB_SetRef(JB_Typef32, SC_Comp__FindClassName(JB_LUB[1657]));
	JB_SetRef(JB_Typehfloat, SC_Comp__FindClassName(JB_LUB[1693]));
	JB_SetRef(JB_Typefloat, JB_Typef32);
	JB_SetRef(JB_TypeBool, SC_Comp__FindClassName(JB_LUB[1520]));
	JB_SetRef(JB_TypeString, SC_Comp__FindClassName(JB_LUB[1968]));
	JB_SetRef(JB_TypeStringZero, SC_Comp__FindClassName(JB_LUB[1970]));
	JB_SetRef(JB_TypeByte, SC_Comp__FindClassName(JB_LUB[1527]));
	JB_SetRef(JB_TypeCodePoint, SC_Comp__FindClassName(JB_LUB[1552]));
	JB_SetRef(JB_TypeCharSet, SC_Comp__FindClassName(JB_LUB[1539]));
	JB_SetRef(JB_TypeVec2, SC_Comp__FindClassName(JB_LUB[2029]));
	JB_SetRef(JB_TypeVec3, SC_Comp__FindClassName(JB_LUB[2030]));
	JB_SetRef(JB_TypeVec4, SC_Comp__FindClassName(JB_LUB[2031]));
	JB_SetRef(JB_TypeiVec2, SC_Comp__FindClassName(JB_LUB[1737]));
	JB_SetRef(JB_TypeiVec3, SC_Comp__FindClassName(JB_LUB[1738]));
	JB_SetRef(JB_TypeiVec4, SC_Comp__FindClassName(JB_LUB[1739]));
	JB_SetRef(JB_TypeDate, SC_Comp__FindClassName(JB_LUB[1586]));
	JB_SetRef(JB_TypeJBClass, SC_Comp__FindClassName(JB_LUB[1546]));
	JB_SetRef(JB_TypeTask, SC_Comp__FindClassName(JB_LUB[1987]));
	JB_SetRef(JB_TypeObject, SC_Comp__FindClassName(JB_LUB[1836]));
	JB_SetRef(JB_TypeSyntax, SC_Comp__FindClassName(JB_LUB[1976]));
	JB_SetRef(JB_TypeVoid_, SC_Comp__FindClassName(JB_LUB[1461]));
	JB_SetRef(JB_TypeWrapper, SC_Comp__FindClassName(JB_LUB[1584]));
	JB_SetRef(JB_TypeDictionary, SC_Comp__FindClassName(JB_LUB[1603]));
	JB_SetRef(JB_TypeFastString, SC_Comp__FindClassName(JB_LUB[1649]));
	JB_SetRef(JB_TypeArray, SC_Comp__FindClassName(JB_LUB[1491]));
	JB_SetRef(JB_TypeSaveable, SC_Comp__FindClassName(JB_LUB[1917]));
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	JB_TypeVoid_->LinkedFrom = JB_int__Max();
	JB_SetRef(JB_TypeStringZero->DowngradeTo, JB_TypeString);
	JB_SetRef(JB_TypeVoid, JB_TypeVoid_->TypeNormal);
	JB_SetRef(JB_TypeVoidPtr, SC_Decl_GetAddress(JB_TypeVoid, kSC__DeclMode_Always));
	JB_TypeString->HasSubClass = true;
}

JB_File* SC_Comp__InputFile(JB_File* Default, JB_String* S, Message* Where) {
	JB_File* Rz = nil;
	if (JB_Str_ContainsString(S, JB_LUB[358])) {
		JB_Msg_SyntaxExpect(Where, JB_LUB[922]);
		return nil;
	}
	SCImport* C = SC__Imp_Curr;
	if (C) {
		JB_File* Found = ((JB_File*)JB_Dict_ValueLower(C->Resources, S));
		if (JB_File_SyntaxCast(Found)) {
			return Found;
		}
	}
	int Best = JB_int__Max();
	{
		Array* _LoopSrcf2 = SC__Comp_ImportedList;
		int _if0 = 0;
		while (true) {
			SCImport* Imp = ((SCImport*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Imp == nil) {
				break;
			}
			if (Imp->Depth < Best) {
				JB_File* F = ((JB_File*)JB_Dict_ValueLower(Imp->Resources, S));
				if (JB_File_SyntaxCast(F)) {
					Rz = F;
					Best = Imp->Depth;
				}
			}
			_if0++;
		};
	}
	;
	if (JB_File_SyntaxCast(Rz)) {
		return Rz;
	}
	Rz = JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, S);
	if (Default != nil) {
		if ((!(JB_File_SyntaxCast(Rz)))) {
			Rz = JB_File_SyntaxAccess(Default, S);
		}
	}
	if ((!JB_File_Exists(Rz, false))) {
		Rz = nil;
	}
	return Rz;
}

bool SC_Comp__IsTest() {
	JB_String* _tmPf0 = JB_Incr(JB_App__FileName());
	bool _tmPf1 = (JB_Str_ContainsString(_tmPf0, JB_LUB[1272]));
	JB_Decr(_tmPf0);
	return _tmPf1;
}

JB_File* SC_Comp__Jeebox() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* _tmPf1 = JB_Incr(JB_Str_ChildFile(_tmPf0, JB_LUB[1744]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_File* SC_Comp__Library() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* _tmPf1 = JB_Incr(JB_Str_ChildFile(_tmPf0, JB_LUB[992]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Comp__LoadInitsAndMore() {
	{
		Array* _LoopSrcf2 = SC__Comp_ModuleList;
		int _if0 = 0;
		while (true) {
			SCModule* M = ((SCModule*)JB_Array_Value(_LoopSrcf2, _if0));
			if (M == nil) {
				break;
			}
			SC_Base_Use(M);
			SC_Base_LoadExportName(M);
			SC_Mod_LoadInitFunc(M);
			_if0++;
		};
	};
}

SCFunction* SC_Comp__LoadRefFunc(JB_String* Name) {
	SCFunction* O = SC_Comp__FindFunction(Name);
	if (O) {
		(SC_Func_SyntaxIsSet(O, kSC__FunctionType_Reffer, true));
		return O;
	}
	return nil;
}

void SC_Comp__LoadSuperClasses() {
	{
		Array* _LoopSrcf2 = SC__Comp_ClassList;
		int _if0 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf2, _if0));
			if (C == nil) {
				break;
			}
			SC_Class_LoadSuperClass(C);
			_if0++;
		};
	}
	;
	{
		Array* _LoopSrcf5 = SC__Comp_ClassList;
		int _if3 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf5, _if3));
			if (C == nil) {
				break;
			}
			SC_Class_LoadSuperBehaviours(C);
			_if3++;
		};
	};
}

SCFunction* SC_Comp__LoadTypeTest(JB_String* S) {
	SCObject* F = SC_Base_SyntaxAccess(JB_TypeObject, S);
	if (JB_Object_FastIsa(F, &SCFunctionData)) {
		(SC_Func_SyntaxIsSet(((SCFunction*)F), kSC__FunctionType_TypeTest, true));
		return ((SCFunction*)F);
	}
	return nil;
}

void SC_Comp__Main() {
	if (SC_Comp__EnterCompile()) {
		if (true) {
			FlowControlStopper _usingf0 = JB_FlowControlStopper_SyntaxUsing(JB_Flow__FlowAllow(JB_LUB[1227], (112281763505761)));
			SC_Comp__CompileTime();
			JB_FlowControlStopper_SyntaxUsingComplete(_usingf0);
		}
	}
}

Message* SC_Comp__MakeMainFunc() {
	SCFunction* F = JB_Incr(SC__Comp_MainFunc);
	if (F) {
		F->BlindCasts = kJB__ErrorSeverity_Error;
		Message* _tmPf2 = JB_Incr(SC_Func_SourceArg(F));
		JB_Decr(F);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_Decr(F);
	JB_PrintLine(JB_LUB[779]);
	SC__Options_ProjectIsLibrary = true;
	Message* _tmPf0 = JB_Incr(SC_Base_CollectStr(SC__Comp_program, JB_LUB[1778]));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(_tmPf0)));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Comp__MiniTests() {
	SC_Comp__TestDate();
	SC_Comp__TestTask();
}

bool SC_Comp__ModulesSorter(JB_Object* A, JB_Object* B) {
	SCModule* Aa = ((SCModule*)A);
	SCModule* Bb = ((SCModule*)B);
	SCClass* Ca = Aa->Cls;
	SCClass* Cb = Bb->Cls;
	if ((!Ca) or (!Cb)) {
		if (((bool)Ca) or ((bool)Cb)) {
			return ((bool)Cb);
		}
	}
	 else {
		SCNodeType Tt = Ca->BaseType;
		int D = ((int)Tt) - ((int)Cb->BaseType);
		if (D) {
			return D < 0;
		}
		D = (((int)Ca->Depth) - ((int)Cb->Depth));
		if (D) {
			return D < 0;
		}
		if (Tt == kSC__SCNodeType_Struct) {
			D = (((int)Ca->StructContainerDepth) - ((int)Cb->StructContainerDepth));
			if (D) {
				return D < 0;
			}
		}
	}
	return JB_Str_CompareStr(Aa->Name, Bb->Name, false) <= -1;
}

void SC_Comp__NewConst(SCDecl* D) {
	SC_Decl_SyntaxAppend(D, kSC__SCDeclInfo_Const | kSC__SCDeclInfo_Global);
	JB_Array_SyntaxAppend(SC__Comp_DeclConstants, D);
}

void SC_Comp__PostInitCodeCall() {
	Message* _tmPf0 = JB_Incr(JB_Str_ParseJbin(((JB_LUB[24])), kJB__int64_max));
	JB_Tree_SyntaxAppend(SC__Comp_program->InitVarsArg, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_Comp__PrintCompileErrors() {
	if (SC__Options_Warnings) {
		if ((!JB_Rec_HasAnything(JB_StdErr))) {
			return;
		}
	}
	 else {
		if ((!JB_Rec_HasProblems(JB_StdErr))) {
			return;
		}
	}
	SC_Rec_PrePrintErrors(JB_StdErr);
	if (SC__Func_DisabledPoints) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[823]);
		JB_FS_AppendInt32(_fsf0, SC__Func_DisabledPoints);
		JB_FS_AppendString(_fsf0, JB_LUB[2054]);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Str_PrintlineColor(_tmPf1, kJB__ErrorColors_error);
		JB_Decr(_tmPf1);
	}
	ErrorSeverity MinSev = ((ErrorSeverity)JB_Ternary(SC__Options_Warnings, kJB__ErrorSeverity_Warning, ((ErrorSeverity)kJB__ErrorSeverity_Problem)));
	SC_Comp__PrintErrors(MinSev);
	JB_Rec_Clear(JB_StdErr);
}

void SC_Comp__PrintCompileTime(Date Durr) {
	if ((!(JB_Rec_OK(JB_StdErr) and (!SC__Options_Silent)))) {
		return;
	}
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_Normal(Fs, JB_LUB[1230]);
	JB_FS_AppendInt32(Fs, SC__Comp_CurrStage);
	JB_FS_Normal(Fs, JB_LUB[763]);
	JB_FS_AppendInt32(Fs, SC_Comp__ReachedClassCount());
	JB_FS_Normal(Fs, JB_LUB[888]);
	//;
	JB_FS_AppendInt32(Fs, SC_Comp__Reachedfuncs());
	JB_FS_AppendString(Fs, JB_LUB[147]);
	JB_FS_AppendInt32(Fs, JB_Array_Size(SC__Comp_FuncList));
	//;
	JB_FS_Normal(Fs, JB_LUB[1240]);
	float Avg = ((float)SC__Crkt_TotalSize) / ((float)JB_Array_Size(SC__Crkt_List));
	//;
	JB_FS_AppendInt32(Fs, JB_Array_Size(SC__Crkt_List));
	JB_FS_AppendString(Fs, JB_LUB[147]);
	//;
	JB_FreeIfDead(JB_int_RenderSize(SC__Crkt_TotalSize, Fs));
	//;
	JB_FS_AppendString(Fs, JB_LUB[150]);
	JB_FS_AppendFloatAsText(Fs, Avg);
	JB_FS_AppendByte(Fs, ')');
	//;
	JB_FS_Normal(Fs, JB_LUB[1324]);
	JB_FreeIfDead(JB_Date_RenderDurr(Durr, Fs));
	JB_FS_AppendByte(Fs, 's');
	JB_FS_Normal(Fs, JB_LUB[921]);
	JB_FreeIfDead(JB_int_RenderSize(SC__Comp_stTotalSourceSize, Fs));
	if (SC_Options__Color()) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_normal);
	}
	JB_Obj_PrintLine(Fs);
	JB_Decr(Fs);
}

void SC_Comp__PrintErrors(ErrorSeverity MinSev) {
	JB_StdErr->BlockErrors = true;
	JB_String* S = JB_Incr(SC_Comp__RenderErrors(JB_StdErr, MinSev));
	JB_StdErr->BlockErrors = false;
	if (SC__Options_PerryOutput == 2) {
		JB_SetRef(S, JB_Str_Digest(S));
	}
	if (JB_StdErr->ErrorCount) {
		JB_Str_PrintError(S);
	}
	 else {
		JB_Str_Print(S);
	}
	JB_Decr(S);
}

void SC_Comp__PrintResults() {
	bool OK = JB_Rec_OK(JB_StdErr);
	SC_Comp__PrintStats();
	SC_Comp__PrintCompileErrors();
	if (JB__Proc_Parent != nil) {
		JB_String* _tmPf1 = JB_Incr(JB_int_RenderFS(JB_App__ID(), nil));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[843], _tmPf1));
		JB_Decr(_tmPf1);
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	if (SC__Options_SelfReplacement and JB_IsTerminal(kJB__FileDes_StdOut)) {
		JB_String* _tmPf2 = JB_Incr(SC_Comp__VariantSuffix());
		if (JB_Str_Equals(_tmPf2, JB_LUB[1272], true)) {
			if (OK) {
				JB_App__Say(JB_LUB[895], false);
			}
			 else {
				JB_App__Say(JB_LUB[1437], false);
			}
		}
		JB_Decr(_tmPf2);
	}
	if (SC__Options_Beep) {
		JB_PrintLine(JB_LUB[30]);
	}
}

void SC_Comp__PrintStats() {
	if ((!SC__Options_ArgStats)) {
		return;
	}
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(Fs, JB_LUB[887]);
	{
		int I = 0;
		while (I < 12) {
			int C = SC__Func_FuncStats[I];
			if (C) {
				if (I) {
					JB_FS_AppendString(Fs, JB_LUB[302]);
				}
				//;
				JB_FS_AppendInt32(Fs, I);
				JB_FS_AppendByte(Fs, ':');
				JB_FS_AppendInt32(Fs, C);
				//;
			}
			I++;
		};
	}
	;
	JB_Obj_PrintLine(Fs);
	JB_Decr(Fs);
}

JB_File* SC_Comp__ProductFile() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__ProductPath());
	JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Comp__ProductPath() {
	if (JB_Str_Exists(SC__Options_output_path)) {
		return SC__Options_output_path;
	}
	JB_String* _tmPf0 = JB_Incr(SC_Ext__ProductName());
	JB_String* _tmPf1 = JB_Incr(SC_Ext__ProductSuffix());
	JB_String* Prod = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf1));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	if (SC__Options_SelfReplacement) {
		JB_String* _tmPf2 = JB_Incr(SC_Comp__Projects());
		JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1269], Prod));
		JB_String* _tmPf7 = JB_Incr(JB_Str_Child(_tmPf2, _tmPf3));
		JB_Decr(_tmPf2);
		JB_Decr(_tmPf3);
		JB_Decr(Prod);
		JB_SafeDecr(_tmPf7);
		return _tmPf7;
	}
	JB_File* _tmPf5 = JB_Incr(SC_Comp__BuildFolder());
	JB_String* _tmPf4 = JB_Incr(JB_File_Path(_tmPf5));
	JB_Decr(_tmPf5);
	JB_String* _tmPf6 = JB_Incr(JB_Str_Child(_tmPf4, Prod));
	JB_Decr(Prod);
	JB_Decr(_tmPf4);
	JB_SafeDecr(_tmPf6);
	return _tmPf6;
}

JB_String* SC_Comp__Projects() {
	return ({
		JB_String* _X = JB_Incr(SC__Comp__Projects);
		if ((!JB_Str_Exists(_X))) {
			JB_SetRef(_X, SC_Comp__FindSpeedieRoot());
			JB_SetRef(SC__Comp__Projects, _X);
		}
		JB_SafeDecr(_X);
		 _X;
	});
}

bool SC_Comp__Reached(JB_String* S) {
	//;
	SCClass* Obj = JB_Incr(SC_Comp__FindClassName(S));
	if (Obj) {
		bool _tmPf0 = ((bool)(Obj->MyReacher));
		JB_Decr(Obj);
		return _tmPf0;
	}
	JB_Decr(Obj);
	return false;
}

int SC_Comp__ReachedClassCount() {
	int Rz = 0;
	{
		Array* _LoopSrcf2 = SC__Comp_ClassList;
		int _if0 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf2, _if0));
			if (C == nil) {
				break;
			}
			Rz = (Rz + (((bool)(C->MyReacher)) and SC_Class_IsObject(C)));
			_if0++;
		};
	}
	;
	return Rz;
}

int SC_Comp__Reachedfuncs() {
	int Rz = 0;
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			Rz = (Rz + (F->MyReacher != nil));
			_if0++;
		};
	}
	;
	return Rz;
}

JB_String* SC_Comp__RenderErrors(JB_ErrorReceiver* Stderr, ErrorSeverity MinSev) {
	int Printable = Stderr->ProblemCount + Stderr->ErrorCount;
	if (((bool)Printable) and (MinSev < kJB__ErrorSeverity_Problem)) {
		MinSev = kJB__ErrorSeverity_Problem;
	}
	int Count = 0;
	FastString* Msg = JB_Incr(JB_FS_Constructor(nil));
	{
		JB_Error* Err = JB_Incr(((JB_Error*)JB_Ring_First(Stderr->Errors)));
		while (Err) {
			JB_Error* _Nf1 = JB_Incr(((JB_Error*)JB_Ring_NextSib(Err)));
			if (Err->Severity >= MinSev) {
				Count++;
				JB_FreeIfDead(SC_Err_SCRender(Err, Msg));
			}
			JB_SetRef(Err, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(Err);
	}
	;
	if ((!Count)) {
		int Problems = 0;
		{
			JB_Error* Err = JB_Incr(((JB_Error*)JB_Ring_First(Stderr->Errors)));
			while (Err) {
				JB_Error* _Nf3 = JB_Incr(((JB_Error*)JB_Ring_NextSib(Err)));
				if (Err->Severity == kJB__ErrorSeverity_Problem) {
					if ((++Problems) <= 10) {
						JB_FreeIfDead(SC_Err_SCRender(Err, Msg));
					}
				}
				JB_SetRef(Err, _Nf3);
				JB_Decr(_Nf3);
			};
			JB_Decr(Err);
		};
	}
	 else if ((!SC__Options_PerryOutput)) {
		JB_FS_ProblemsFound(Msg, Count);
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SyntaxCast(Msg));
	JB_Decr(Msg);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_File* SC_Comp__ScriptLoc(JB_String* F) {
	JB_File* Rz = nil;
	JB_String* _tmPf1 = JB_Incr(SC_FB__TryUseProject(F, true));
	JB_String* _tmPf0 = JB_Incr(SC_Str_ScriptLocation(_tmPf1, JB_LUB[422]));
	JB_Decr(_tmPf1);
	JB_SetRef(Rz, JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SetRef(SC__Options_output_path, Rz);
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Comp__ScriptRecompile(JB_File* F, JB_File* Script_build) {
	if ((!JB_File_Exists(Script_build, false))) {
		return true;
	}
	if (JB_File_Modified(Script_build) < JB_File_Modified(F)) {
		return true;
	}
	return false;
}

void SC_Comp__SetupEnv() {
	JB__Flow_FlowMode = kJB__Flow_Off;
	SC_Comp__ClearEnvs();
	JB_FreeIfDead(JB_App__PrefsInit(-1));
	if ((!JB_App__IsMainThread())) {
		(JB_App__SetThreadName(JB_LUB[1229]));
	}
	JB_ErrorColors__DisableIfNoTerminal();
	JB__Err_AutoPrint = 1;
	PicoGlobalConf()->DesiredThreadCount = 1;
	if (JB_Pico__Parent()) {
		JB__Err_AutoPrint = 0;
		JB__ErrorColors_Enabled = false;
	}
}

void SC_Comp__SortModulesAndClasses() {
	JB_Array_Sort(SC__Comp_ModuleList, SC_Comp__ModulesSorter, false);
	JB_Array_Sort(SC__Comp_ClassList, SC_Comp__ClassSorter, false);
}

JB_File* SC_Comp__Speedie() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* _tmPf1 = JB_Incr(JB_Str_ChildFile(_tmPf0, JB_LUB[1228]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Comp__SpeedieProj() {
	return ({
		JB_String* _X = JB_Incr(SC__Comp__SpeedieProj);
		if ((!JB_Str_Exists(_X))) {
			JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
			JB_SetRef(_X, JB_Str_SyntaxAccess(_tmPf0, JB_LUB[1228]));
			JB_Decr(_tmPf0);
			JB_SetRef(SC__Comp__SpeedieProj, _X);
		}
		JB_SafeDecr(_X);
		 _X;
	});
}

bool SC_Comp__Stage(JB_String* Name) {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return nil;
	}
	if (SC__Options_PrintStages) {
		JB_String* Space = JB_Incr(JB_Str_MulBool(JB_LUB[99], (SC__Comp_CurrStage <= 9)));
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendByte(_fsf0, ' ');
		JB_FS_AppendInt32(_fsf0, SC__Comp_CurrStage);
		JB_FS_AppendString(_fsf0, Space);
		JB_Decr(Space);
		JB_FS_AppendString(_fsf0, JB_LUB[115]);
		JB_FS_AppendString(_fsf0, Name);
		JB_FS_AppendString(_fsf0, JB_LUB[153]);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
	SC__Comp_CurrStage++;
	return true;
}

SCClass* SC_Comp__FindClassName(JB_String* Name) {
	return SC_Base_FindClass(SC__Comp_program, Name, nil, 0);
}

SCClass* SC_Comp__SyntaxAccess(Message* Name) {
	if (Name) {
		return SC_Base_FindClassMsg(SC__Comp_program, Name, 0);
	}
	return nil;
}

void SC_Comp__SyntaxAppend(Message* M) {
	JB_Tree_SyntaxAppend(SC__Comp_InternalFile->LiveAST, M);
}

void SC_Comp__TestDate() {
	int64 Day = 5662310400;
	int64 Hour = 235929600;
	int64 Min = 3932160;
	int64 Sec = 64 * 1024;
	if (Sec != 65536.0) {
		debugger;
	}
	if (Min != 3932160.0) {
		debugger;
	}
	if (Hour != 235929600.0) {
		debugger;
	}
	if (Day != 5662310400.0) {
		debugger;
	}
}

void SC_Comp__TestTask() {
	LessThan3* Xxx = JB_Incr(SC_Task_LessThan3_Constructor(nil, JB_LUB[1466], 5, JB_LUB[1531]));
	bool Z = SC_Task_LessThan3_interface_SyntaxCall((Xxx), 8);
	JB_Decr(Xxx);
}

void SC_Comp__Timer(JB_String* Name) {
	Date Curr = JB_Date__Now();
	if (SC__Comp_LastTime) {
		SC_Comp__TimerSub(SC__Comp_LastTimeName, ((int)(Curr - SC__Comp_LastTime)));
	}
	if ((!JB_Str_Exists(Name)) and (!SC__Options_Silent)) {
		JB_Obj_Print(SC__Comp_TimerOutput);
	}
	JB_SetRef(SC__Comp_LastTimeName, Name);
	SC__Comp_LastTime = JB_Date__Now();
}

void SC_Comp__TimerSub(JB_String* S, int Durr) {
	Durr = (Durr - SC__Comp_stParseTime);
	SC__Comp_stParseTimeTotal = (SC__Comp_stParseTimeTotal + SC__Comp_stParseTime);
	SC__Comp_stParseTime = 0;
	SC_Comp__AppendCompilerTime(S, Durr);
}

bool SC_Comp__TryVariousStartModes() {
	if (JB__Proc_Parent) {
		return nil;
	}
	if ((!((!({
		JB_String* _tmPf1 = JB_Incr(JB_App__ArgValue(JB_LUB[1867]));
		bool _tmPf0 = JB_Str_Exists(_tmPf1);
		JB_Decr(_tmPf1);
		 _tmPf0;
	})) and (!({
		JB_String* _tmPf3 = JB_Incr(JB_App__ArgValue(JB_LUB[1816]));
		bool _tmPf2 = JB_Str_Exists(_tmPf3);
		JB_Decr(_tmPf3);
		 _tmPf2;
	}))))) {
		return nil;
	}
	Array* _tmPf4 = JB_Incr(JB_App__Args());
	JB_String* P = JB_Incr(((JB_String*)JB_Array_Value(_tmPf4, 0)));
	JB_Decr(_tmPf4);
	if ((!(JB_Str_Exists(P) and (!({
		JB_String* _tmPf6 = JB_Incr(JB_Str_ArgName(P));
		bool _tmPf5 = JB_Str_Exists(_tmPf6);
		JB_Decr(_tmPf6);
		 _tmPf5;
	}))))) {
		JB_Decr(P);
		return nil;
	}
	JB_File* F = JB_Incr(JB_Str_AsFile(P));
	JB_Decr(P);
	JB_File* It = JB_Incr(SC_Comp__UsingScript(F));
	if ((!JB_File_SyntaxCast(It))) {
		JB_Decr(It);
		JB_Decr(F);
		return nil;
	}
	JB_String* Cwd = JB_Incr(JB_File__CWD());
	if (SC_Comp__ScriptRecompile(F, It)) {
		SC_Comp__CompileTime();
	}
	if (JB_File_Exists(It, false) and JB_Rec_OK(JB_StdErr)) {
		(JB_App__CWDSet(Cwd));
		JB_StringC* _tmPf7 = JB_Incr(JB_Str_CastZero(F));
		(JB_App__SetEnv(JB_LUB[1114], _tmPf7));
		JB_Decr(_tmPf7);
		JB_String* _tmPf8 = JB_Incr(JB_File_Path(It));
		Array* _tmPf9 = JB_Incr(JB_App__Args());
		JB_App__TurnInto(_tmPf8, _tmPf9);
		JB_Decr(_tmPf8);
		JB_Decr(_tmPf9);
	}
	JB_Decr(F);
	JB_Decr(It);
	JB_Decr(Cwd);
	return true;
}

JB_File* SC_Comp__UsingScript(JB_File* F) {
	JB_File* Rz = nil;
	if ((!(SC__Options_Compile and (!JB_File_IsDir(F))))) {
		JB_Decr(Rz);
		return nil;
	}
	JB_String* _tmPf0 = JB_Incr(JB_File_Read(F, 16, true));
	if ((!JB_Str_OperatorStarts(_tmPf0, JB_LUB[224]))) {
		JB_Decr(_tmPf0);
		JB_Decr(Rz);
		return nil;
	}
	JB_Decr(_tmPf0);
	JB_SetRef(Rz, SC_Comp__ScriptLoc(F));
	if (JB__Err_AutoPrint == kJB__ErrorFlags_PrintAndKeep) {
		JB__Err_AutoPrint = 0;
	}
	SC__Options_Scripting = true;
	SC__Options_Silent = true;
	SC__Options_PrintCompileString = false;
	SC__Options_OperationCount++;
	Array* _tmPf1 = JB_Incr(JB_App__Args());
	JB_Array_Remove(_tmPf1, 0);
	JB_Decr(_tmPf1);
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* SC_Comp__VariantSuffix() {
	if ((SC__Options_SelfReplacement) and SC__Options_Compile) {
		return JB_Str_OperatorPlus(JB_LUB[1272], SC__Options_Variant);
	}
	return SC__Options_Variant;
}

void SC_Comp__VariousSelfTests() {
	JB_String* T = JB_Incr(JB_Constants__TestJB());
	JB_Decr(T);
	if ((SC__Options_PerryOutput < 2) and ((!SC__Options_Scripting) and (!JB__Proc_Parent))) {
		if (({
			JB_String* _tmPf1 = JB_Incr((JB_Str_OperatorMul(SC__Cpp_FindGlobalsCpp, 12)));
			bool _tmPf0 = JB_Str_CompressTest(_tmPf1, false, 3);
			JB_Decr(_tmPf1);
			 _tmPf0;
		}) and SC__Options_PrintLibraries) {
			JB_PrintLine(JB_LUB[781]);
		}
	}
}

SCNode* SC_Comp__WrongConf(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if ((SC__Comp_ConfMsg)) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[782]);
		return nil;
	}
	if (true) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[783]);
	}
	return nil;
}



void JB_ErrorColors__DisableIfNoTerminal() {
	JB__ErrorColors_Enabled = JB_IsTerminal(kJB__FileDes_StdOut);
}

int JB_ErrorColors__Init_() {
	{
		JB__ErrorColors_Enabled = false;
	}
	;
	return 0;
}

int JB_ErrorColors__InitCode_() {
	return 0;
}


SCFunction* SC_FastStringOpts__ByteFunc() {
	return ({
		SCFunction* _X = JB_Incr(SC__FastStringOpts__ByteFunc);
		if ((!_X)) {
			JB_SetRef(_X, ((SCFunction*)((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, JB_LUB[955]))));
			JB_SetRef(SC__FastStringOpts__ByteFunc, _X);
		}
		JB_SafeDecr(_X);
		 _X;
	});
}

void SC_FastStringOpts__FS(Message* Exp, Message* Getresult) {
	Message* Fs2 = ((Message*)JB_Ring_First(((Message*)JB_Ring_Last(Getresult))));
	SCDecl* T2 = SC_TypeOfExpr(Fs2, nil, nil);
	if ((!SC_Decl_SyntaxIs(T2, kSC__SCDeclInfo_CompilerCreated))) {
		return;
	}
	Message* Place = SC_Msg_ParentPoint(T2->Default);
	Message* Arg = ((Message*)JB_Ring_Parent(Place));
	if ((!JB_Msg_Expect(Arg, JB_SyxArg, nil))) {
		return;
	}
	Message* Fs1 = ((Message*)JB_Ring_PrevSib(Getresult));
	JB_String* Name2 = Fs2->Name;
	{
		Message* Ch = Arg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Arg));
		while (((bool)(Ch)) and (Ch != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Ch));
			if (SC_Msg_OperatorIsThing(Ch, Name2)) {
				JB_SetRef(Ch->Name, Fs1->Name);
				JB_SetRef(Ch->Obj, Fs1->Obj);
			}
			Ch = _N_f2;
		};
		;
	}
	;
	SC_Msg_SafeRemove(Place, JB_SyxSheb);
	SC_Msg_SafeRemove(Exp, JB_SyxSheb);
	SC__FastStringOpts_FSRemoved++;
}

int SC_FastStringOpts__Init_() {
	{
		SC__FastStringOpts_FSRemoved = 0;
		SC__FastStringOpts_StrRemoved = 0;
	}
	;
	return 0;
}

int SC_FastStringOpts__InitCode_() {
	return 0;
}

void SC_FastStringOpts__String(Message* Exp, Message* Str) {
	if ((!(((JB_Msg_EqualsSyx(Str, JB_SyxStr, false)) or ((JB_Msg_EqualsSyx(Str, JB_SyxSStr, false)) or (JB_Msg_EqualsSyx(Str, JB_SyxBack, false)))) and (JB_Str_EqualsInt(Str->Name, 1, false))))) {
		return;
	}
	JB_SetRef(Str->Obj, JB_TypeByte->TypeNormal);
	JB_SetRef(((Message*)JB_Ring_Parent(Str))->Obj, SC_FastStringOpts__ByteFunc());
	Str->Func = JB_SyxChar;
	SC__FastStringOpts_StrRemoved++;
}


bool SC_FB__AppOptions_alive(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[0]))) {
		return nil;
	}
	JB_PrintLine(JB_LUB[1376]);
	return true;
}

bool SC_FB__AppOptions_arch(JB_String* Name, JB_String* Value, FastString* Purpose) {
	JB_String* Str = JB_Incr(JB_LUB[1724]);
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1215], Str));
	SC_FB__Explain(Purpose, _tmPf3);
	{
		Array* _LoopSrcf2 = JB_Incr(JB_Str_OperatorDivide(Str, '/'));
		int _if0 = 0;
		while (true) {
			JB_String* V = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (V == nil) {
				JB_Decr(V);
				break;
			}
			if (JB_Str_Equals(V, Value, true)) {
				JB_SetRef(SC__Options_Arch, V);
			}
			JB_Decr(V);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
		JB_Decr(_tmPf3);
	}
	;
	JB_Decr(Str);
	return false;
}

bool SC_FB__AppOptions_argstats(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_ArgStats = true;
	return false;
}

bool SC_FB__AppOptions_beep(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[663]))) {
		return nil;
	}
	SC__Options_Beep = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_breakonerr(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[0]))) {
		return nil;
	}
	JB__Err_AutoPrint = SC_Str_OptionInt(Value);
	return false;
}

bool SC_FB__AppOptions_check(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[760]))) {
		return nil;
	}
	SC__Options_Compile = false;
	SC__Options_ModeCpp = false;
	return false;
}

bool SC_FB__AppOptions_clean(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1173]))) {
		return nil;
	}
	if (SC_Ext__Clean()) {
		JB_PrintLine(JB_LUB[765]);
	}
	return true;
}

bool SC_FB__AppOptions_codesign(JB_String* Name, JB_String* Value, FastString* Purpose) {
	JB_Incr(Value);
	if ((!SC_FB__Explain(Purpose, JB_LUB[898]))) {
		JB_Decr(Value);
		return nil;
	}
	if (JB_Str_Equals(Value, JB_LUB[0], false)) {
		JB_String* _tmPf0 = JB_Incr(JB_App__GetPref(kJB_codesign_native));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
		JB_Decr(Value);
		return true;
	}
	if ((JB_Str_Equals(Value, JB_LUB[1824], false)) or ((JB_Str_Equals(Value, JB_LUB[1810], false)) or (JB_Str_Equals(Value, JB_LUB[306], false)))) {
		JB_SetRef(Value, JB_LUB[0]);
	}
	(JB_App__PrefSet(kJB_codesign_native, Value));
	JB_App__SavePrefs();
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[768], Value));
	JB_Decr(Value);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
	return true;
}

bool SC_FB__AppOptions_cpp(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[778]))) {
		return nil;
	}
	SC__Options_ModeCpp = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_crash(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[795]))) {
		return nil;
	}
	JB_App__Crash(JB_LUB[0]);
	return false;
}

bool SC_FB__AppOptions_directtest(JB_String* Name, JB_String* Value, FastString* Purpose) {
	SC_FB__Explain(Purpose, JB_LUB[629]);
	SC__Options_IsDirectTest = SC_Str_OptionBool(Value);
	(SC_SC_Targets__SyntaxAccessSet(JB_LUB[1605], SC__Options_IsDirectTest));
	return false;
}

bool SC_FB__AppOptions_dosign(JB_String* Name, JB_String* Value, FastString* Purpose) {
	SC_FB__Explain(Purpose, JB_LUB[767]);
	return true;
}

bool SC_FB__AppOptions_env(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1136]))) {
		return nil;
	}
	{
		Dictionary* _LoopSrcf2 = JB_Incr(JB_App__Env());
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf2));
		JB_Decr(_LoopSrcf2);
		while (true) {
			JB_String* S = JB_Incr(((JB_String*)JB_DictionaryReader_NextValue(_navf0)));
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			JB_String* K = JB_Incr(JB_Nav_Name(_navf0));
			JB_String* _tmPf4 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[559], S));
			JB_Decr(S);
			JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(K, _tmPf4));
			JB_Decr(K);
			JB_Decr(_tmPf4);
			JB_PrintLine(_tmPf3);
			JB_Decr(_tmPf3);
		};
		JB_Decr(_navf0);
	}
	;
	return true;
}

bool SC_FB__AppOptions_errortest(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1277]))) {
		return nil;
	}
	JB_Str_PrintError(JB_LUB[841]);
	return true;
}

bool SC_FB__AppOptions_final(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_Final = true;
	return false;
}

bool SC_FB__AppOptions_flow(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[625]))) {
		return nil;
	}
	bool B = SC_Str_OptionBool(Value);
	SC__Options_GenFlowControlCode = B;
	(SC_SC_Targets__SyntaxAccessSet(JB_LUB[1658], B));
	return false;
}

bool SC_FB__AppOptions_force(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[882]))) {
		return nil;
	}
	SC__Options_ForceRecompile = true;
	return false;
}

bool SC_FB__AppOptions_funccount(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1224]))) {
		return nil;
	}
	SC__Options_UseFuncCallCount = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_gcc(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1175]))) {
		return nil;
	}
	JB_SetRef(SC__Ext_CppCompilerPath, Value);
	return false;
}

bool SC_FB__AppOptions_help(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1305]))) {
		return nil;
	}
	SC_FB__Help();
	return true;
}

bool SC_FB__AppOptions_ignorecantsave(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_IgnoreCantSaveErrors = true;
	return false;
}

bool SC_FB__AppOptions_keepallerrors(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1222]))) {
		return nil;
	}
	SC__Options_KeepAllErrors = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_log(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[996]))) {
		return nil;
	}
	if ((!JB_Str_Equals(Value, JB_LUB[2004], false))) {
		JB__Flow_FlowMode = JB_Str_Int(Value);
	}
	 else {
		JB__Flow_FlowMode = kJB__Flow_Validate;
	}
	return false;
}

bool SC_FB__AppOptions_maxvars(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1176]))) {
		return nil;
	}
	SC__Options_CheckMaxVars = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_nil(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[836]))) {
		return nil;
	}
	if (JB_Str_Yes(Value)) {
		SC__Options_NilStrength = kJB__ErrorSeverity_Error;
	}
	 else {
		SC__Options_NilStrength = 0;
	}
	return false;
}

bool SC_FB__AppOptions_nocolor(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[828]))) {
		return nil;
	}
	(SC_Options__ColorSet(false));
	return false;
}

bool SC_FB__AppOptions_nocompile(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1379]))) {
		return nil;
	}
	SC__Options_Compile = false;
	return false;
}

bool SC_FB__AppOptions_noisy(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1139]))) {
		return nil;
	}
	JB_PrintLine(JB_LUB[1086]);
	SC__Options_PrintCompileString = true;
	JB__File_DebugExecute = true;
	SC__Options_PrintLibraries = true;
	return false;
}

bool SC_FB__AppOptions_optimise(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1113]))) {
		return nil;
	}
	SC__Options_Optimise = JB_Str_TextIntegerValid(Value, nil);
	return false;
}

bool SC_FB__AppOptions_output_path(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1226]))) {
		return nil;
	}
	JB_SetRef(SC__Options_output_path, JB_File_PathFix_(Value));
	JB_String* _tmPf1 = JB_Incr(JB_Str_Parent(SC__Options_output_path));
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(_tmPf1));
	JB_Decr(_tmPf1);
	JB_File_MustExist(_tmPf0, JB_LUB[0]);
	JB_Decr(_tmPf0);
	SC__Options_ForceRecompile = true;
	return false;
}

bool SC_FB__AppOptions_pack(JB_String* Name, JB_String* Value, FastString* Purpose) {
	SC__Options_ModePack = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_path(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[0]))) {
		return nil;
	}
	JB_String* _tmPf0 = JB_Incr(JB_App__Path());
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
	return false;
}

bool SC_FB__AppOptions_perry(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_PerryOutput = 1;
	bool RealPerry = (JB_Str_Equals(Value, JB_LUB[1516], true));
	SC__Options_PerryOutput = (SC__Options_PerryOutput + ((MaybeBool)RealPerry));
	JB_File* _tmPf2 = JB_Incr(JB_File__PrefsFolder());
	JB_File* _tmPf1 = JB_Incr(JB_File_SyntaxAccess(_tmPf2, JB_LUB[1747]));
	JB_Decr(_tmPf2);
	JB_String* _tmPf0 = JB_Incr(JB_File_ReadAll(_tmPf1, 134217728, true));
	JB_Decr(_tmPf1);
	JB_SetRef(SC__Comp_InsecureWords, JB_Str_Dict(_tmPf0, '\n'));
	JB_Decr(_tmPf0);
	return false;
}

bool SC_FB__AppOptions_print(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[0]))) {
		return nil;
	}
	JB_Str_Print(Value);
	return true;
}

bool SC_FB__AppOptions_products(JB_String* Name, JB_String* Value, FastString* Purpose) {
	0;
	return false;
}

bool SC_FB__AppOptions_quiet(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1138]))) {
		return nil;
	}
	SC__Options_PrintCompileString = false;
	return false;
}

bool SC_FB__AppOptions_self(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[777]))) {
		return nil;
	}
	if (JB_App__No(JB_LUB[1816])) {
		SC__Options_PerryOutput = 1;
	}
	JB_String* _tmPf0 = JB_Incr(SC_Comp__SpeedieProj());
	JB_FreeIfDead(SC_FB__TryUseProject(_tmPf0, false));
	JB_Decr(_tmPf0);
	return true;
}

bool SC_FB__AppOptions_silent(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1140]))) {
		return nil;
	}
	SC__Options_PrintCompileString = false;
	SC__Options_Silent = true;
	return false;
}

bool SC_FB__AppOptions_single(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_SingleCppOutput = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_stages(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1141]))) {
		return nil;
	}
	SC__Options_PrintStages = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_target(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1214]))) {
		return nil;
	}
	if (JB_Str_Equals(Value, JB_LUB[1589], false)) {
		if (true) {
			JB_Str_SyntaxExpect(JB_LUB[1358]);
		}
	}
	(SC_SC_Targets__SyntaxAccessSet(Value, true));
	return false;
}

bool SC_FB__AppOptions_targetdebug(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_TargetDebug = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_usescriptloc(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_UseScriptLoc = ((MaybeBool)true);
	return false;
}

bool SC_FB__AppOptions_variant(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[0]))) {
		return nil;
	}
	JB_SetRef(SC__Options_Variant, JB_int_RenderFS(((int)JB_Str_TextIntegerValid(Value, nil)), nil));
	SC__Options_PerryOutput = 1;
	(SC_Options__ColorSet(false));
	if (SC__Options_Optimise < 0) {
		SC__Options_Optimise = 1;
	}
	return false;
}

bool SC_FB__AppOptions_warn(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1223]))) {
		return nil;
	}
	SC__Options_Warnings = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppTransCompile(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1130]))) {
		return nil;
	}
	SC__Options_ExternalCompile = true;
	(SC_Options__ColorSet(false));
	return false;
}

bool SC_FB__AppVersionNumber(JB_String* Name, JB_String* Value, FastString* Purpose) {
	if ((!SC_FB__Explain(Purpose, JB_LUB[1137]))) {
		return nil;
	}
	return SC_FB__CompilerInfo();
}

void SC_FB__CheckSelfModifying() {
	int T2 = SC_FB__CheckSelfModifying2();
	if (T2 == 1) {
		SC__Options_SelfReplacement = true;
		SC__Options_ExternalCompile = true;
		SC__Options_ForceRecompile = true;
		JB_String* _tmPf0 = JB_Incr(JB_App__GetPref(JB_LUB[1934]));
		SC__Options_GenFlowControlCode = JB_Str_Yes(_tmPf0);
		JB_Decr(_tmPf0);
		(SC_SC_Targets__SyntaxAccessSet(JB_LUB[1658], SC__Options_GenFlowControlCode));
		(SC_SC_Targets__SyntaxAccessSet(JB_LUB[1933], true));
	}
	 else if (T2 == 2) {
		SC__Options_ProjectIsMiniLib = true;
	}
}

int SC_FB__CheckSelfModifying2() {
	int Rz = 0;
	if (JB_Str_Exists(SC__Options_SingleFileInput)) {
		return 0;
	}
	JB_File* Bpp = JB_Incr(SC__Comp_BaseProjectPath);
	if ((!JB_File_SyntaxCast(Bpp))) {
		JB_Decr(Bpp);
		return 0;
	}
	JB_String* P = JB_Incr(JB_Str_TrimSlashes(Bpp, true));
	JB_Decr(Bpp);
	JB_File* _tmPf0 = JB_Incr(SC_Comp__Speedie());
	JB_String* Spd = JB_Incr(JB_Str_TrimSlashes(_tmPf0, true));
	JB_Decr(_tmPf0);
	JB_File* _tmPf1 = JB_Incr(SC_Comp__Jeebox());
	JB_String* Jb = JB_Incr(JB_Str_TrimSlashes(_tmPf1, true));
	JB_Decr(_tmPf1);
	if (JB_Str_Equals(P, Spd, true)) {
		if (SC__Options_SelfReplacement) {
			Rz = 0;
		}
		 else {
			Rz = 1;
		}
	}
	 else if (JB_Str_Equals(P, Jb, true)) {
		Rz = 2;
	}
	JB_Decr(P);
	JB_Decr(Spd);
	JB_Decr(Jb);
	return Rz;
}

bool SC_FB__CompilerInfo() {
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[1954]);
	JB_FS_AppendInt32(_fsf0, (2024041617));
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
	return true;
}

bool SC_FB__Explain(FastString* Purpose, JB_String* Name) {
	if ((!Purpose)) {
		return true;
	}
	JB_FS_AppendString(Purpose, Name);
	return false;
}

void SC_FB__Help() {
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	FastString* Fs_tester = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(Fs, JB_LUB[1353]);
	JB_String* _tmPf5 = JB_Incr(JB_App__FileName());
	JB_FS_AppendString(Fs, _tmPf5);
	JB_Decr(_tmPf5);
	JB_FS_AppendString(Fs, JB_LUB[151]);
	//;
	JB_FS_AppendString(Fs, JB_LUB[924]);
	JB_String* _tmPf7 = JB_Incr(SC_Comp__SpeedieProj());
	JB_String* _tmPf6 = JB_Incr(JB_Str_Parent(_tmPf7));
	JB_Decr(_tmPf7);
	JB_FS_AppendString(Fs, _tmPf6);
	JB_Decr(_tmPf6);
	//;
	//;
	JB_FS_AppendString(Fs, JB_LUB[117]);
	JB_String* _tmPf8 = JB_Incr(JB_Platform());
	JB_FS_AppendString(Fs, _tmPf8);
	JB_Decr(_tmPf8);
	JB_FS_AppendByte(Fs, '+');
	JB_String* _tmPf9 = JB_Incr(JB_Platform__CPU_Name());
	JB_FS_AppendString(Fs, _tmPf9);
	JB_Decr(_tmPf9);
	//;
	JB_FS_AppendString(Fs, JB_LUB[118]);
	JB_String* _tmPf10 = JB_Incr(JB_App__GetPref(JB_LUB[1934]));
	JB_FS_AppendString(Fs, _tmPf10);
	JB_Decr(_tmPf10);
	//;
	JB_FS_AppendString(Fs, JB_LUB[116]);
	JB_FS_AppendInt32(Fs, ((int)JB_Syxmax));
	//;
	{
		DictionaryReader* _navf3 = JB_Incr(JB_Dict_Navigate(SC__FB_AppOptions));
		while (true) {
			DTWrap* V = JB_Incr(((DTWrap*)JB_DictionaryReader_NextValue(_navf3)));
			if (V == nil) {
				JB_Decr(V);
				break;
			}
			JB_String* K = JB_Incr(JB_Nav_Name(_navf3));
			(((FP_ShellOption)JB_Wrap_First(V)))(JB_LUB[0], JB_LUB[0], Fs_tester);
			FP_ShellOption Val = ((FP_ShellOption)JB_Wrap_Value(V));
			JB_Decr(V);
			if (((bool)Val) and ((bool)Fs_tester->Length)) {
				(JB_FS_LengthSet(Fs_tester, 0));
				JB_FS_AppendString(Fs, JB_LUB[67]);
				JB_FS_AppendString(Fs, K);
				JB_FS_AppendMultiByte(Fs, ' ', 17 - JB_Str_Length(K));
				(Val)(JB_LUB[0], JB_LUB[0], Fs);
			}
			JB_Decr(K);
		};
		JB_Decr(_navf3);
	}
	;
	JB_Decr(Fs_tester);
	JB_String* _tmPf11 = JB_Incr(JB_FS_GetResult(Fs));
	JB_Decr(Fs);
	JB_PrintLine(_tmPf11);
	JB_Decr(_tmPf11);
}

int SC_FB__Init_() {
	{
		JB_SetRef(SC__FB_AppOptions, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf0 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_nocompile))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1816], _tmPf0));
		JB_Decr(_tmPf0);
		DTWrap* _tmPf1 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_breakonerr))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1525], _tmPf1));
		JB_Decr(_tmPf1);
		DTWrap* _tmPf2 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_path))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1865], _tmPf2));
		JB_Decr(_tmPf2);
		DTWrap* _tmPf3 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_beep))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1510], _tmPf3));
		JB_Decr(_tmPf3);
		DTWrap* _tmPf4 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_keepallerrors))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1746], _tmPf4));
		JB_Decr(_tmPf4);
		DTWrap* _tmPf5 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_env))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1629], _tmPf5));
		JB_Decr(_tmPf5);
		DTWrap* _tmPf6 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_FB__AppTransCompile)))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[2053], _tmPf6));
		JB_Decr(_tmPf6);
		DTWrap* _tmPf7 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_arch))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1484], _tmPf7));
		JB_Decr(_tmPf7);
		DTWrap* _tmPf8 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_gcc))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1681], _tmPf8));
		JB_Decr(_tmPf8);
		DTWrap* _tmPf9 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_perry))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1867], _tmPf9));
		JB_Decr(_tmPf9);
		DTWrap* _tmPf10 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_usescriptloc))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[2025], _tmPf10));
		JB_Decr(_tmPf10);
		DTWrap* _tmPf11 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_check))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1540], _tmPf11));
		JB_Decr(_tmPf11);
		DTWrap* _tmPf12 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_errortest))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1633], _tmPf12));
		JB_Decr(_tmPf12);
		DTWrap* _tmPf13 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_argstats))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1488], _tmPf13));
		JB_Decr(_tmPf13);
		DTWrap* _tmPf14 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_flow))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1658], _tmPf14));
		JB_Decr(_tmPf14);
		DTWrap* _tmPf15 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_log))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1764], _tmPf15));
		JB_Decr(_tmPf15);
		DTWrap* _tmPf16 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_noisy))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1821], _tmPf16));
		JB_Decr(_tmPf16);
		DTWrap* _tmPf17 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_alive))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1479], _tmPf17));
		JB_Decr(_tmPf17);
		DTWrap* _tmPf18 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_products))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1881], _tmPf18));
		JB_Decr(_tmPf18);
		DTWrap* _tmPf19 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_ignorecantsave))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1700], _tmPf19));
		JB_Decr(_tmPf19);
		DTWrap* _tmPf20 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_quiet))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1885], _tmPf20));
		JB_Decr(_tmPf20);
		DTWrap* _tmPf21 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_silent))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1946], _tmPf21));
		JB_Decr(_tmPf21);
		DTWrap* _tmPf22 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_stages))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1957], _tmPf22));
		JB_Decr(_tmPf22);
		DTWrap* _tmPf23 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_print))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1876], _tmPf23));
		JB_Decr(_tmPf23);
		DTWrap* _tmPf24 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_directtest))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1607], _tmPf24));
		JB_Decr(_tmPf24);
		DTWrap* _tmPf25 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_single))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1947], _tmPf25));
		JB_Decr(_tmPf25);
		DTWrap* _tmPf26 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_self))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1933], _tmPf26));
		JB_Decr(_tmPf26);
		DTWrap* _tmPf27 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_nil))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1810], _tmPf27));
		JB_Decr(_tmPf27);
		DTWrap* _tmPf28 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_crash))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1578], _tmPf28));
		JB_Decr(_tmPf28);
		DTWrap* _tmPf29 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_pack))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[2112], _tmPf29));
		JB_Decr(_tmPf29);
		DTWrap* _tmPf30 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_targetdebug))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1985], _tmPf30));
		JB_Decr(_tmPf30);
		DTWrap* _tmPf31 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_target))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1984], _tmPf31));
		JB_Decr(_tmPf31);
		DTWrap* _tmPf32 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_funccount))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1671], _tmPf32));
		JB_Decr(_tmPf32);
		DTWrap* _tmPf33 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_warn))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[2043], _tmPf33));
		JB_Decr(_tmPf33);
		DTWrap* _tmPf34 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_maxvars))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1780], _tmPf34));
		JB_Decr(_tmPf34);
		DTWrap* _tmPf35 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_nocolor))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1815], _tmPf35));
		JB_Decr(_tmPf35);
		DTWrap* _tmPf36 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_optimise))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1853], _tmPf36));
		JB_Decr(_tmPf36);
		DTWrap* _tmPf37 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_cpp))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1568], _tmPf37));
		JB_Decr(_tmPf37);
		DTWrap* _tmPf38 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_output_path))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1858], _tmPf38));
		JB_Decr(_tmPf38);
		DTWrap* _tmPf39 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_force))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1662], _tmPf39));
		JB_Decr(_tmPf39);
		DTWrap* _tmPf40 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_variant))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[2028], _tmPf40));
		JB_Decr(_tmPf40);
		DTWrap* _tmPf41 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_final))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1653], _tmPf41));
		JB_Decr(_tmPf41);
		DTWrap* _tmPf42 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_codesign))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1553], _tmPf42));
		JB_Decr(_tmPf42);
		DTWrap* _tmPf43 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_dosign))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1617], _tmPf43));
		JB_Decr(_tmPf43);
		DTWrap* _tmPf44 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_clean))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1547], _tmPf44));
		JB_Decr(_tmPf44);
		DTWrap* _tmPf45 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_FB__AppVersionNumber)))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[2033], _tmPf45));
		JB_Decr(_tmPf45);
		DTWrap* _tmPf46 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_FB__AppVersionNumber)))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[2027], _tmPf46));
		JB_Decr(_tmPf46);
		DTWrap* _tmPf47 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_help))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1690], _tmPf47));
		JB_Decr(_tmPf47);
	}
	;
	return 0;
}

int SC_FB__InitCode_() {
	return 0;
}

bool SC_FB__ParseArgs() {
	Array* _tmPf0 = JB_Incr(JB_App__Args());
	bool _tmPf1 = SC_FB__ParseArgsSub(_tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool SC_FB__ParseArgsSub(Array* Args) {
	SC_FB__StopStripping();
	if ((!JB_Array_SyntaxCast(Args))) {
		SC_FB__CompilerInfo();
		SC_FB__Help();
		return false;
	}
	{
		int _if0 = 0;
		while (true) {
			JB_Object* S = JB_Incr(JB_Array_Value(Args, _if0));
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			SC_FB__ParseOption(S);
			JB_Decr(S);
			_if0++;
		};
	}
	;
	if (SC__Options_OperationCount <= 0) {
		JB_Rec__NewErrorWithNode(nil, JB_LUB[72], nil);
	}
	 else if (SC__Options_OperationCount >= 2) {
		JB_Rec__NewErrorWithNode(nil, JB_LUB[74], nil);
	}
	return JB_Rec_OK(JB_StdErr) and JB_File_Exists(SC__Comp_BaseProjectPath, false);
}

void SC_FB__ParseOption(JB_Object* Obj) {
	JB_String* Name = JB_Incr(JB_AppArgument_Name(Obj));
	JB_String* Value = JB_Incr(JB_AppArgument_Value(Obj));
	if (JB_Str_Exists(Name)) {
		DTWrap* Opt = JB_Incr(((DTWrap*)JB_Dict_ValueStr(SC__FB_AppOptions, Name)));
		if (Opt) {
			SC__Options_OperationCount = (SC__Options_OperationCount + ((MaybeBool)(((FP_ShellOption)JB_Wrap_First(Opt)))(Name, Value, nil)));
		}
		 else {
			FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
			JB_FS_AppendString(_fsf0, JB_LUB[1346]);
			JB_FS_AppendString(_fsf0, Name);
			JB_FS_AppendString(_fsf0, JB_LUB[250]);
			JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
			JB_Decr(_fsf0);
			JB_App__Quit(_tmPf1, 0);
			JB_Decr(_tmPf1);
		}
		JB_Decr(Opt);
	}
	 else if (JB_Ind_SyntaxCast(JB_Str_IsJbin(Value))) {
		0;
	}
	 else if (SC__Options_OperationCount == 1) {
		if (true) {
			JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1315], Value));
			JB_Str_SyntaxExpect(_tmPf2);
			JB_Decr(_tmPf2);
		}
	}
	 else {
		JB_FreeIfDead(SC_FB__TryUseProject(Value, false));
		SC__Options_OperationCount++;
	}
	JB_Decr(Name);
	JB_Decr(Value);
}

void SC_FB__StopStripping() {
	if (JB_Str_Exists(JB_LUB[0])) {
		jdb(JB_LUB[0]);
		jdb2(((Message*)nil));
		fdb(((Array*)nil));
	}
}

JB_String* SC_FB__TryUseProject(JB_String* Path, bool IsScript) {
	JB_Incr(Path);
	if ((!(JB_Str_ContainsByte(Path, '/') or (JB_Str_ContainsByte(Path, '.') or JB_Str_ContainsByte(Path, '~'))))) {
		JB_SetRef(Path, SC_Comp__FindProjNoSuffix(Path));
	}
	JB_String* Path2 = JB_Incr(SC_Str_ResolveSpd(Path));
	if (JB_Str_Exists(Path2)) {
		JB_SetRef(Path, Path2);
	}
	JB_Decr(Path2);
	JB_File* F = JB_Incr(JB_Str_AsFile(Path));
	if (({
		JB_File* _tmPf1 = JB_Incr(SC_Comp__Library());
		bool _tmPf0 = JB_File_OperatorInside(F, _tmPf1);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}) or ({
		JB_File* _tmPf3 = JB_Incr(SC_Comp__Jeebox());
		bool _tmPf2 = JB_File_OperatorInside(F, _tmPf3);
		JB_Decr(_tmPf3);
		 _tmPf2;
	})) {
		JB_File_Fail(F, JB_LUB[827]);
		JB_Decr(Path);
		JB_Decr(F);
		return JB_LUB[0];
	}
	JB_SetRef(SC__Comp_OriginalInputPath, Path);
	JB_SetRef(SC__Comp_BaseProjectPath, F);
	JB_SetRef(SC__Comp_ProjectName, JB_Str_TrimExtAndPath(F, true));
	JB_SetRef(SC__Comp_ReportedName, SC__Comp_ProjectName);
	bool Exists = JB_File_Exists(F, false);
	bool IsSpd = ({
		JB_String* _tmPf5 = JB_Incr(JB_Str_Name(F));
		bool _tmPf4 = SC_Str_IsSpeedieSrc(_tmPf5);
		JB_Decr(_tmPf5);
		 _tmPf4;
	}) or IsScript;
	if ((Exists and (!JB_File_IsDir(F))) or ((!Exists) and IsSpd)) {
		JB_SetRef(SC__Options_SingleFileInput, JB_File_Path(F));
		if ((!JB_File_MustExist(F, JB_LUB[0]))) {
			JB_Decr(Path);
			JB_Decr(F);
			return JB_LUB[0];
		}
		JB_SetRef(F, JB_File_Parent(F));
		JB_SetRef(SC__Comp_BaseProjectPath, F);
	}
	SC_FB__CheckSelfModifying();
	if ((!JB_Str_Exists(SC__Options_SingleFileInput))) {
		JB_File_MustExist(F, JB_LUB[0]);
	}
	JB_Decr(F);
	if (Exists and (IsSpd and JB_Rec_OK(JB_StdErr))) {
		JB_SafeDecr(Path);
		return Path;
	}
	JB_Decr(Path);
	return JB_LUB[0];
}


SCNode* SC_InbuiltShellArgs__Collect(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (Name_space != SC__Comp_program) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1297]);
		return nil;
	}
	Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxList));
	Array* ShellArgs = JB_Incr(SC_Msg_ListAll(_tmPf0));
	JB_Decr(_tmPf0);
	SC_FB__ParseArgsSub(ShellArgs);
	JB_Decr(ShellArgs);
	return SC__Comp_program;
}


bool SC_AC__Active() {
	return SC__AC_total < SC__AC_max_total;
}

void SC_AC__ActualDefine(Message* Rz, Message* S, JB_String* Purpose) {
	JB_String* F = JB_Incr(JB_Msg_FilePath(S));
	if ((!JB_Str_Exists(F))) {
		JB_Str_SyntaxExpect(JB_LUB[1826]);
		JB_Decr(F);
		return;
	}
	JB_Msg_AppendSyx(Rz, JB_SyxSStr, F);
	JB_Decr(F);
	JB_Msg_AppendNum(Rz, S->Position);
}

Message* SC_AC__AllTmps() {
	Message* Rz = nil;
	if (SC__AC_all_tmp_src->Cleaned) {
		return JB_Macro_Source(SC__AC_all_tmp_src);
	}
	SC__AC_all_tmp_src->Cleaned = true;
	Rz = JB_Macro_Source(SC__AC_all_tmp_src);
	int State = 0;
	{
		Message* Ch = ((Message*)JB_Ring_First(Rz));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			if (JB_Msg_EqualsSyx(Ch, JB_SyxName, false)) {
				State = SC_Msg_Autocomplete_State(Ch);
				JB_Tree_Remove(Ch);
			}
			 else {
				Ch->Tag = State;
			}
			Ch = _Nf1;
		};
		;
	}
	;
	return Rz;
}

Message* SC_AC__AutoComplete(Message* Ff, JB_String* Name, JB_String* Purpose) {
	Message* Rz = nil;
	if ((!Ff)) {
		JB_Decr(Rz);
		return nil;
	}
	Syntax F = Ff->Func;
	if ((!((F != JB_SyxBra) and ((F != JB_SyxPrm) and ((F != JB_SyxList) and ((F != JB_SyxArg) and ((F != JB_SyxArr) and ((F != JB_SyxAcc) and ((F != JB_SyxDecl) and (F != JB_SyxRel)))))))))) {
		JB_Decr(Rz);
		return nil;
	}
	SC__AC_total = 0;
	int Types = -1;
	SCNode* Scope = JB_Incr(SC_AC__GetScope(Ff, (&Types)));
	if ((!Scope)) {
		JB_Decr(Scope);
		JB_Decr(Rz);
		return nil;
	}
	Message* NeedTypeLimit = JB_Incr(SC_Msg_GetTypeLimiter(Ff));
	Array* Arr = JB_Incr(JB_Array_Constructor0(nil));
	while (((bool)Scope) and SC_AC__Active()) {
		SC_AC__AutoSub(Scope, Name, Arr, Types, NeedTypeLimit);
		if ((!JB_Str_Exists(Name)) and JB_Object_FastIsa(Scope, &SCArgData)) {
			break;
		}
		JB_SetRef(Scope, SC_Base_UpClass(Scope, Ff));
	};
	JB_Decr(Scope);
	JB_Decr(NeedTypeLimit);
	JB_Array_Sort(Arr, ((FP_SorterComparer)SC_AC__AutoCompleteSorter), false);
	JB_SetRef(Rz, JB_Syx_Msg(JB_SyxTmp, Purpose));
	Message* Arg = JB_Incr(JB_Msg_Msg(Rz, JB_SyxArg, Name));
	autoitem* Prev = nil;
	{
		int _if0 = 0;
		while (true) {
			autoitem* I = JB_Incr(((autoitem*)JB_Array_Value(Arr, _if0)));
			if (I == nil) {
				JB_Decr(I);
				break;
			}
			if (SC_autoitem_OKBy(I, Prev)) {
				Message* Tmp = JB_Incr(JB_Msg_Msg(Arg, JB_SyxTmp, I->Insert));
				JB_Msg_AppendSyx(Tmp, JB_SyxStr, I->Display);
				JB_Decr(Tmp);
				JB_SetRef(Prev, I);
			}
			JB_Decr(I);
			_if0++;
		};
	}
	;
	JB_Decr(Arr);
	JB_Decr(Arg);
	JB_Decr(Prev);
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_AC__AutoCompleteSorter(autoitem* A, autoitem* B) {
	int Type = A->type - B->type;
	if (Type) {
		return Type < 0;
	}
	return JB_Str_CompareStr(A->Sort, B->Sort, false) <= -1;
}

Message* SC_AC__AutoJump(Message* Cmd) {
	Message* C = ((Message*)JB_Ring_Last(Cmd));
	if (JB_Msg_EqualsSyx(C, JB_SyxName, false)) {
		if (JB_Msg_OperatorStarts(Cmd, JB_LUB[1503])) {
			return SC_AC__AutoComplete(((Message*)JB_Ring_First(C)), C->Name, Cmd->Name);
		}
		 else {
			return SC_AC__DefineOrCall(C, Cmd->Name, nil);
		}
	}
	if (JB_Msg_OperatorStarts(Cmd, JB_LUB[1503])) {
		return SC_AC__RootTmpComplete(Cmd);
	}
	if (JB_Msg_SyntaxEquals(C, JB_LUB[1705], true)) {
		return SC_AC__JumpImport(Cmd);
	}
	return nil;
}

void SC_AC__AutoSub(SCNode* Scope, JB_String* Name, Array* Found, int Types, Message* NeedTypeLimit) {
	SCDecl* TypeLimiter = nil;
	if (NeedTypeLimit) {
		JB_SetRef(TypeLimiter, SC_TypeOfExpr(NeedTypeLimit, Scope, nil));
	}
	{
		Dictionary* _LoopSrcf2 = JB_Incr(Scope->Access);
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf2));
		JB_Decr(_LoopSrcf2);
		while (true) {
			SCObject* Value = JB_Incr(((SCObject*)JB_DictionaryReader_NextValue(_navf0)));
			if (Value == nil) {
				JB_Decr(Value);
				break;
			}
			JB_String* Key = JB_Incr(JB_Nav_Name(_navf0));
			JB_String* Orig = JB_Incr(SC_SCObject_CanAuto(Value, Name));
			if (JB_Str_Exists(Orig) and ((!JB_Str_Exists(Name)) or JB_Str_OperatorStarts(Orig, Name))) {
				SC_AC__AutoSub2(Value, Key, Orig, Found, (JB_Str_Equals(Orig, Name, true)), Types, TypeLimiter);
			}
			JB_Decr(Value);
			JB_Decr(Key);
			JB_Decr(Orig);
		};
		JB_Decr(_navf0);
	}
	;
	JB_Decr(TypeLimiter);
}

void SC_AC__AutoSub2(SCObject* Value, JB_String* Key, JB_String* Src_name, Array* Found, bool Exact, int Types, SCDecl* TypeLimiter) {
	JB_Incr(Value);
	while (((bool)Value) and SC_AC__Active()) {
		if ((!(((JB_Str_Equals(Key, JB_LUB[1933], true))) and (JB_Object_Isa(Value, &SCModuleData))))) {
			if (((bool)(Types & SC_SCObject_AutoCompleteType(Value)))) {
				bool OK = true;
				if (TypeLimiter) {
					SCDecl* Mine = JB_Incr(SC_Object_AsDecl(Value));
					if (Mine) {
						OK = SC_Decl_MiniMatch(Mine, TypeLimiter, 0);
					}
					JB_Decr(Mine);
				}
				if (OK) {
					JB_String* Sub_name = JB_Incr(SC_SCObject_Display(Value, Exact));
					if (JB_Str_Exists(Sub_name)) {
						SC__AC_total++;
						JB_String* _tmPf0 = JB_Incr(SC_SCObject_BaseIcon(Value));
						JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[99], Sub_name));
						JB_SetRef(Sub_name, JB_Str_OperatorPlus(_tmPf0, _tmPf1));
						JB_Decr(_tmPf0);
						JB_Decr(_tmPf1);
						autoitem* _tmPf2 = JB_Incr(SC_autoitem_ConstructorAuto(nil, Key, Src_name, Value, Sub_name, Exact, SC_SCObject_Auto_Type(Value)));
						JB_Array_SyntaxAppend(Found, _tmPf2);
						JB_Decr(_tmPf2);
					}
					JB_Decr(Sub_name);
				}
			}
		}
		JB_SetRef(Value, SC_SCObject_NextDisplay(Value, Exact));
	};
	JB_Decr(Value);
}

Message* SC_AC__Backup_Define(SCFile* Myfile, int F, Message* Thg, JB_String* Purpose) {
	if ((!(Thg))) {
		Thg = SC_SCFile_GetMsg(Myfile, F);
	}
	if ((!Thg)) {
		JB_Str_SyntaxExpect(JB_LUB[1823]);
		return nil;
	}
	Thg = SC_Msg_CmdImprove(Thg);
	return SC_AC__DefineOrCall(Thg, Purpose, Myfile);
}

Message* SC_AC__CallFrom(Message* Msg, JB_String* Purpose, JB_Object* Found) {
	Message* Rz = nil;
	SCFunction* Fn = SC_Msg_AutoMsgFuncFn(Msg);
	if ((!(Fn))) {
		Fn = SC_Msg_AutoMsgFunc(Msg);
	}
	if ((!Fn)) {
		return nil;
	}
	Rz = SC_AC__CallFromDefine(Msg, Fn, Found);
	SC_AC__CallFromSub(((Message*)JB_Ring_First(Rz)), Fn);
	return Rz;
}

Message* SC_AC__CallFromDefine(Message* Msg, SCFunction* Fn, JB_Object* Found) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1534]));
	Message* Arg = JB_Incr(JB_Msg_Msg(Rz, JB_SyxArg, JB_LUB[0]));
	Message* Define = JB_Incr(SC_AC__Define(Msg, JB_LUB[1597], Found));
	if ((!(Define))) {
		JB_SetRef(Define, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1817]));
	}
	JB_Msg_AppendString(Define, Fn->Name);
	JB_Tree_SyntaxAppend(Arg, Define);
	JB_Decr(Arg);
	JB_Decr(Define);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_AC__CallFromSub(Message* Arg, SCFunction* Fn) {
	{
		Array* _LoopSrcf2 = Fn->LinkFrom;
		int _if0 = 0;
		while (true) {
			SCNode* Call_point = ((SCNode*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Call_point == nil) {
				break;
			}
			Message* S = Call_point->Source;
			if (S) {
				JB_String* F = JB_Msg_FilePath(S);
				if (JB_Str_Exists(F)) {
					Message* Item = JB_Msg_Msg(Arg, JB_SyxTmp, JB_LUB[1755]);
					JB_Msg_AppendSyx(Item, JB_SyxSStr, F);
					JB_Msg_AppendString(Item, SC_SCObject_CallFromName(Call_point));
					JB_Msg_AppendNum(Item, SC_Msg_FuncPos(S, Fn));
				}
			}
			_if0++;
		};
	};
}

bool SC_AC__CanUseName(SCNode* L) {
	if (JB_Object_FastIsa(L, &SCModuleData)) {
		return (!((SCModule*)L)->IsImport);
	}
	return true;
}

Message* SC_AC__Check(Message* Cmd) {
	if (JB_Rec_HasProblems(SC__AC_Errors)) {
		return SC_Msg_SendPerryErrors(Cmd);
	}
	JB_SetRef(Cmd->Name, JB_LUB[1540]);
	JB_Msg_AppendSyx(Cmd, JB_SyxThg, JB_LUB[1840]);
	return Cmd;
}

Message* SC_AC__CmdCleanUp(Message* Arg) {
	JB_Incr(Arg);
	if ((!JB_Msg_EqualsSyx(Arg, JB_SyxArg, false))) {
		JB_PrintLine(JB_LUB[1788]);
		Message* Tmp = JB_Incr(JB_Syx_OperatorPlus(JB_SyxArg, JB_LUB[1129]));
		JB_Tree_SyntaxAppend(Tmp, Arg);
		JB_SetRef(Arg, Tmp);
		JB_Decr(Tmp);
	}
	Message* Date = JB_Incr(((Message*)JB_Ring_First(Arg)));
	if ((!JB_Msg_EqualsSyx(Date, JB_SyxNum, false))) {
		JB_PrintLine(JB_LUB[1791]);
		JB_SetRef(Date, JB_Syx_PlusNum(JB_SyxNum, 0));
		(JB_Ring_FirstSet(Arg, Date));
	}
	Message* Cmd = JB_Incr(((Message*)JB_Tree_Second(Arg)));
	JB_Decr(Arg);
	if ((!JB_Msg_EqualsSyx(Cmd, JB_SyxTmp, false))) {
		JB_PrintLine(JB_LUB[1790]);
		JB_SetRef(Cmd, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1632]));
		(JB_Ring_NextSibSet(Date, Cmd));
	}
	JB_Decr(Date);
	JB_Tree_RemoveAfter(Cmd);
	JB_SafeDecr(Cmd);
	return Cmd;
}

Message* SC_AC__CmdResponse(Message* Cmd, Message* Arg) {
	Message* Rz = nil;
	if ((!JB_Msg_SyntaxEquals(Cmd, JB_LUB[1632], false))) {
		JB_SetRef(Rz, SC_AC__DoCmd(Cmd, Arg));
	}
	if ((!(Rz))) {
		JB_SetRef(Rz, SC_AC__WriteError(Cmd->Name));
	}
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_AC__CmdWrap(Message* Arg) {
	if (JB_Msg_ContainsStr(Arg, SC__AC_TestCrash)) {
		JB_App__Crash(JB_LUB[0]);
	}
	Message* Cmd = JB_Incr(SC_AC__CmdCleanUp(Arg));
	Message* Response = JB_Incr(SC_AC__CmdResponse(Cmd, Arg));
	if (Cmd != Response) {
		JB_FreeIfDead(SC_Msg_ReplaceWith(Cmd, Response));
	}
	JB_Decr(Cmd);
	JB_Decr(Response);
	JB_Proc_Send(JB__Proc_Parent, Arg);
	JB_Rec_Clear(JB_StdErr);
	return (!SC__AC_WillExit);
}

Message* SC_AC__Define(Message* Msg, JB_String* Purpose, JB_Object* Found) {
	JB_Incr(Found);
	bool IsDisplay = JB_Str_OperatorStarts(Purpose, JB_LUB[1611]);
	bool IsDefine = JB_Str_OperatorStarts(Purpose, JB_LUB[1597]);
	if ((!(IsDisplay or IsDefine))) {
		JB_Str_SyntaxExpect(JB_LUB[1506]);
		JB_Decr(Found);
		return nil;
	}
	if ((!JB_Object_Isa(Found, &SCObjectData))) {
		JB_SetRef(Found, nil);
	}
	Message* S = JB_Incr(SC_AC__LocateDefinition(Msg, ((SCObject*)Found), IsDisplay));
	if (S) {
		JB_Decr(Found);
		Message* _tmPf0 = JB_Incr(SC_AC__RespondDefine(Msg, S, Purpose));
		JB_Decr(S);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(S);
	if (JB_IsDebug()) {
		JB_FreeIfDead(SC_AC__LocateDefinition(Msg, ((SCObject*)Found), IsDisplay));
	}
	JB_Decr(Found);
	if (true) {
		JB_Str_SyntaxExpect(JB_LUB[1829]);
	}
	return nil;
}

Message* SC_AC__Define_Behaviour(SCFunction* Fn, JB_String* Purpose) {
	Message* Rz = nil;
	SCClass* Cls = JB_Incr(Fn->Cls);
	if ((!Cls)) {
		JB_Decr(Cls);
		JB_Decr(Rz);
		return nil;
	}
	JB_String* Name = JB_Incr(JB_Str_Moat(Fn->Name));
	SCObject* Found = JB_Incr(SC_Base_UpCheck(Cls, Name, true));
	JB_Decr(Cls);
	JB_Decr(Name);
	if (JB_Object_FastIsa(Found, &SCFunctionData)) {
		JB_SetRef(Rz, SC_AC__DefineOrCall(((SCFunction*)Found)->Source, Purpose, ((SCFunction*)Found)));
	}
	JB_Decr(Found);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_AC__DefineOrCall(Message* Msg, JB_String* Purpose, JB_Object* Found) {
	if (JB_Str_OperatorStarts(Purpose, JB_LUB[1534])) {
		return SC_AC__CallFrom(Msg, Purpose, Found);
	}
	return SC_AC__Define(Msg, Purpose, Found);
}

Message* SC_AC__Diissplay(Message* Msg, Message* S, JB_String* Purpose) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
	SCFunction* Fn = JB_Incr(SC_Msg_IdentifyFunc(S));
	if (JB_Msg_EqualsSyx(Msg, JB_SyxName, false)) {
		if ((JB_Str_Equals(Purpose, JB_LUB[1611], false)) and SC_Msg_OperatorIsTmp(S, JB_LUB[1883])) {
			JB_Decr(Fn);
			JB_Decr(Rz);
			return S;
		}
		Msg->Func = JB_SyxThg;
		SCNode* Obj = JB_Incr(SC_Comp__FindModuleOrClass(Msg, true));
		if (Obj) {
			Message* _tmPf4 = JB_Incr(SC_Base_DiissplayObj(Obj, Rz));
			JB_Decr(Obj);
			JB_Decr(Fn);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf4);
			return _tmPf4;
		}
		JB_Decr(Obj);
	}
	if (((JB_Msg_EqualsSyx(S, JB_SyxDecl, false))) and ((!Fn) or ({
		Message* _tmPf1 = JB_Incr(SC_Msg_DeclName(S));
		bool _tmPf0 = JB_Msg_DeepEquals(Msg, _tmPf1, false);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}))) {
		JB_String* _tmPf2 = JB_Incr(SC_Msg_RenderTypeAndName(S));
		JB_Msg_AppendSyx(Rz, JB_SyxEmb, _tmPf2);
		JB_Decr(_tmPf2);
		JB_Decr(Fn);
		JB_SafeDecr(Rz);
		return Rz;
	}
	if ((!Fn)) {
		JB_Object* Obj = JB_Incr(S->Obj);
		if (JB_Object_Isa(Obj, &SCNodeData)) {
			Message* _tmPf3 = JB_Incr(SC_Base_DiissplayObj(((SCNode*)Obj), Rz));
			JB_Decr(Obj);
			JB_Decr(Fn);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf3);
			return _tmPf3;
		}
		JB_Decr(Obj);
	}
	if (JB_Str_Equals(Purpose, JB_LUB[1612], true)) {
		if (((bool)Fn) and ((!Fn->NextFunc) and (!JB_Array_SyntaxCast(Fn->Args)))) {
			JB_Decr(Fn);
			JB_SafeDecr(Rz);
			return Rz;
		}
	}
	if ((!Fn)) {
		JB_Decr(Fn);
		JB_Decr(Rz);
		return JB_Msg_Copy(S, nil);
	}
	while (Fn) {
		Message* Copy = JB_Incr(SC_Msg_CutifyCopy(Fn->Source));
		JB_Tree_SyntaxAppend(Rz, Copy);
		JB_String* Desc = JB_Incr(Fn->Description);
		if (JB_Str_Exists(Desc)) {
			JB_Msg_AppendSyx(Rz, JB_SyxEmb, JB_LUB[0]);
			JB_Msg_AppendSyx(Rz, JB_SyxBack, Desc);
			if (Fn->NextFunc) {
				JB_Msg_AppendSyx(Rz, JB_SyxEmb, JB_LUB[0]);
			}
		}
		JB_Decr(Desc);
		SCNode* L = JB_Incr(Fn->Parent);
		if (L) {
			if (SC_AC__CanUseName(L)) {
				SC_AC__IdentifyBetter(Copy, L->Name);
			}
		}
		 else {
			JB_Decr(L);
			JB_Decr(Copy);
			break;
		}
		JB_Decr(Copy);
		JB_Decr(L);
		if ((!JB_Str_OperatorStarts(Purpose, JB_LUB[1612]))) {
			break;
		}
		JB_SetRef(Fn, Fn->NextFunc);
	};
	JB_Decr(Fn);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_AC__DoCmd(Message* Cmd, Message* Arg) {
	Message* Rz = nil;
	if ((!JB_Msg_EqualsSyx(Cmd, JB_SyxTmp, false))) {
		JB_Decr(Rz);
		return nil;
	}
	if ((!SC_AC__InitedOK())) {
		JB_Decr(Rz);
		return SC_Msg_SendPerryErrors(Cmd);
	}
	if (JB_Msg_SyntaxEquals(Cmd, JB_LUB[2022], true)) {
		JB_Decr(Rz);
		return SC_AC__UnusedFuncs(Cmd);
	}
	if (JB_Msg_SyntaxEquals(Cmd, JB_LUB[1540], true)) {
		JB_Decr(Rz);
		return SC_AC__Check(Cmd);
	}
	if (JB_Msg_SyntaxEquals(Cmd, JB_LUB[1782], true)) {
		JB_Decr(Rz);
		return SC_AC__ReportMemory(Cmd);
	}
	if ((JB_Tree_SyntaxEquals(Cmd, 1, false)) or (({
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(Cmd)));
		bool _tmPf0 = JB_Msg_EqualsSyx(_tmPf1, JB_SyxName, false);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}))) {
		JB_Decr(Rz);
		return SC_AC__AutoJump(Cmd);
	}
	Message* _tmPf2 = JB_Incr(JB_Msg_NeedSyx(Cmd, JB_SyxStr));
	JB_String* Req = JB_Incr(JB_Msg_Name(_tmPf2));
	JB_Decr(_tmPf2);
	SCFile* My_file = JB_Incr(((SCFile*)JB_Dict_ValueLower(SC__Comp_Files, Req)));
	JB_Decr(Req);
	if (JB_File_SyntaxCast(My_file)) {
		JB_SetRef(Rz, SC_AC__MainAct(Cmd, My_file));
	}
	 else {
		if (true) {
			JB_Str_SyntaxExpect(JB_LUB[1820]);
		}
	}
	JB_Decr(My_file);
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_AC__EnterAutoComplete() {
	SpdProcess* Perry = JB_Incr(JB__Proc_Parent);
	if ((!(JB_Rec_OK(JB_StdErr) and JB_Proc_IsOpen(Perry)))) {
		JB_Decr(Perry);
		return nil;
	}
	(JB_App__CrashOnInterupt(false));
	JB_PrintLine(JB_LUB[1178]);
	if ((!JB_App__IsMainThread())) {
		JB_PrintLine(JB_LUB[270]);
	}
	JB_App__ClearCaches(0);
	if (SC__Options_PrintLibraries) {
		PicoCommsConf(Perry->Pico)->Noise = -1;
	}
	PicoGlobalConf()->TimeOut = 1966080.0;
	SC__Comp_InPerry = true;
	SC_AC__PerryTalk(Perry);
	JB_Decr(Perry);
	JB_PrintLine(JB_LUB[844]);
	return true;
}

Message* SC_AC__ErrorsToPerry() {
	if ((!SC__AC_Cleaned)) {
		SC_Rec_PrePrintErrors(SC__AC_Errors);
		SC__AC_Cleaned = true;
	}
	JB_String* _tmPf0 = JB_Incr(SC_Comp__RenderErrors(SC__AC_Errors, kJB__ErrorSeverity_Warning));
	Message* _tmPf1 = JB_Incr(JB_Str_Parse(_tmPf0, JB_SyxArg, true));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* SC_AC__FindAdj(Message* Msg, bool DisplayOnly) {
	Message* Adj = Msg;
	if (JB_Msg_OperatorIn(Msg, JB_SyxAdj)) {
		Adj = ((Message*)JB_Ring_Parent(Msg));
	}
	if ((!JB_Msg_OperatorIn(Adj, JB_SyxDecl))) {
		Macro* Found = SC_Comp__FindAdj(Adj, nil);
		if (Found) {
			return Found->_Parsed;
		}
	}
	return nil;
}

Message* SC_AC__FuncTmps() {
	Message* Rz = nil;
	if (SC__AC_func_tmp_src->Cleaned) {
		JB_Decr(Rz);
		return JB_Macro_Source(SC__AC_func_tmp_src);
	}
	SC__AC_func_tmp_src->Cleaned = true;
	JB_SetRef(Rz, JB_Macro_Source(SC__AC_func_tmp_src));
	{
		Message* Ch = JB_Incr(((Message*)JB_Ring_First(Rz)));
		while (Ch) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
			if ((!JB_Msg_EqualsSyx(Ch, JB_SyxDot, false))) {
				JB_Msg_AppendSyx(Ch, JB_SyxStr, Ch->Name);
			}
			if ((!JB_Msg_EqualsSyx(Ch, JB_SyxStr, false))) {
				Message* F = JB_Incr(((Message*)JB_Ring_First(Ch)));
				if (F) {
					JB_SetRef(F->Name, JB_Str_OperatorPlus(F->Name, JB_LUB[99]));
				}
				JB_Decr(F);
			}
			Ch->Func = JB_SyxDot;
			JB_SetRef(Ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(Ch);
		;
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}

SCFunction* SC_AC__GetFunc(Message* Cmd, SCFile* Myfile, int Ff, int N) {
	Message* Src = ((Message*)JB_Ring_Last(Cmd));
	if ((!JB_Msg_EqualsSyx(Src, JB_SyxDot, false))) {
		return SC_AC__GetFunc2(Cmd, Myfile, Ff, N);
	}
	SCFunction* Fn = ({
		SCFunction* _X = SC__AC_AnonFn;
		if ((!_X)) {
			_X = SC_Func_Constructor(nil, nil);
			JB_SetRef(SC__AC_AnonFn, _X);
		}
		 _X;
	});
	Message* Prm = ((Message*)JB_Tree_Second(Src));
	Message* Mpos = ((Message*)JB_Ring_First(Prm));
	Message* Str = ((Message*)JB_Tree_Second(Prm));
	if ((!(((bool)Mpos) and ((bool)Str)))) {
		JB_Str_SyntaxExpect(JB_LUB[1507]);
		return nil;
	}
	Message* F = ((Message*)JB_Ring_First(Src));
	SCNode* Parent = SC_Comp__FindModuleOrClass(F, false);
	if ((!Parent)) {
		F->Func = JB_SyxName;
		Parent = SC_Comp__FindModuleOrClass(F, true);
	}
	if ((!Parent)) {
		JB_Str_SyntaxExpect(JB_LUB[1825]);
		return nil;
	}
	if ((Parent == SC__AC_AnonParent) and (JB_Msg_SyntaxEquals(Str, SC__AC_AnonText, false))) {
		return Fn;
	}
	SCObject* Orig = SC_Func_InsertIn(Fn, Parent, Src->Name);
	int64 Pos = JB_Msg_Int(Mpos, 0);
	JB__Tk__DotInsertAllow = true;
	if (SC_Func_Update_Source(Fn, Pos, Str->Name, Myfile, Orig)) {
		JB_SetRef(SC__AC_AnonParent, Parent);
		JB_SetRef(SC__AC_AnonText, Str->Name);
		return Fn;
	}
	return nil;
}

SCFunction* SC_AC__GetFunc2(Message* Cmd, SCFile* Myfile, int F, int N) {
	Message* Ast = SC_SCFile_AST(Myfile);
	if (Ast) {
		Message* Src = SC_Msg_FindPos(Ast, F, N);
		if (Src) {
			return SC_Msg_InsideFunc(Src);
		}
	}
	return nil;
}

SCNode* SC_AC__GetScope(Message* Orig, int* Types) {
	if ((!Orig)) {
		return SC__Comp_program;
	}
	if (JB_Msg_EqualsSyx(Orig, JB_SyxAsk, false)) {
		(*Types) = 8;
		return SC__Comp_program;
	}
	Message* F = JB_Incr(SC_Msg_CutifyCopy(Orig));
	SCArg* Arg = JB_Incr(SC_Msg_MsgArg(Orig));
	Syntax Fn = F->Func;
	if (((bool)Arg) and (Fn == JB_SyxDot)) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(F)));
		SCObject* Decl = JB_Incr(SC_TypeOfExprModulesOK(_tmPf1, Arg, nil));
		JB_Decr(_tmPf1);
		if ((!Decl)) {
			if (true) {
				JB_Str_SyntaxExpect(JB_LUB[1830]);
			}
			JB_Decr(Decl);
			JB_Decr(Arg);
			JB_Decr(F);
			return nil;
		}
		if (JB_Object_Isa(Decl, &SCNodeData)) {
			JB_Decr(Arg);
			JB_Decr(F);
			JB_SafeDecr(Decl);
			return ((SCNode*)Decl);
		}
		if (JB_Object_FastIsa(Decl, &SCDeclData)) {
			SCClass* _tmPf2 = JB_Incr(((SCDecl*)Decl)->Type);
			JB_Decr(Decl);
			JB_Decr(Arg);
			JB_Decr(F);
			JB_SafeDecr(_tmPf2);
			return _tmPf2;
		}
		JB_Decr(Decl);
	}
	JB_Decr(F);
	if (SC_Msg_ACInIsa(Orig)) {
		(*Types) = 1;
		JB_Decr(Arg);
		return SC__Comp_program;
	}
	if (Arg) {
		JB_SafeDecr(Arg);
		return Arg;
	}
	JB_Decr(Arg);
	if (JB_Msg_IsTypeOfDecl(Orig)) {
		(*Types) = 1;
		return SC__Comp_program;
	}
	SCArg* _tmPf0 = JB_Incr(SC_Msg_MsgArg(Orig));
	if ((!_tmPf0)) {
		JB_Str_SyntaxExpect(JB_LUB[1828]);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_AC__IdentifyBetter(Message* Node, JB_String* Name) {
	JB_Msg_BecomeStr(Node, JB_SyxEmb, JB_LUB[0]);
	Node = ((Message*)JB_Ring_First(Node));
	Node->Func = JB_SyxDot;
	JB_Msg_AppendSyx(Node, JB_SyxThg, Name);
	JB_Msg_AppendSyx(Node, JB_SyxEmb, JB_LUB[0]);
}

int SC_AC__Init_() {
	{
		JB_SetRef(SC__AC_AnonText, JB_LUB[0]);
		SC__AC_CompiledOK = false;
		SC__AC_Cleaned = false;
		SC__AC_WillExit = false;
		JB_SetRef(SC__AC_func_tmp_src, JB_Macro_ConstructorStr(nil, (JB_LUB[9])));
		JB_SetRef(SC__AC_all_tmp_src, JB_Macro_ConstructorStr(nil, (JB_LUB[14])));
		JB_SetRef(SC__AC_TestCrash, JB_Str_OperatorPlus(JB_LUB[1441], JB_LUB[1425]));
		SC__AC_max_total = 400;
		SC__AC_total = 0;
	}
	;
	return 0;
}

int SC_AC__InitCode_() {
	return 0;
}

bool SC_AC__InitedOK() {
	if (SC__Comp_InitedOK) {
		return true;
	}
	if (JB_Rec_OK(SC__AC_Errors)) {
		if (true) {
			JB_Str_SyntaxExpect(JB_LUB[775]);
		}
	}
	return false;
}

Message* SC_AC__JumpImport(Message* Cmd) {
	Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(Cmd, JB_SyxArg));
	Message* F = JB_Incr(((Message*)JB_Tree_Get(_tmPf0, 0)));
	JB_Decr(_tmPf0);
	if (F) {
		JB_Tree_Clear(Cmd);
		JB_File* Proj = JB_Incr(SC_Comp__FindProject(F->Name, false));
		if ((!JB_File_Exists(Proj, false))) {
			JB_Decr(Proj);
			JB_Decr(F);
			return nil;
		}
		JB_String* _tmPf1 = JB_Incr(JB_File_Path(Proj));
		JB_Decr(Proj);
		JB_Msg_AppendSyx(Cmd, JB_SyxSStr, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Msg_AppendNum(Cmd, 0);
		JB_Decr(F);
		return Cmd;
	}
	JB_Decr(F);
	return nil;
}

Message* SC_AC__LocateDefinition(Message* Msg, SCObject* Already_defined, bool DisplayOnly) {
	Message* Rz = nil;
	if ((JB_Msg_OperatorIn(Msg, JB_SyxAdj)) or ((JB_Msg_EqualsSyx(Msg, JB_SyxAdj, false)))) {
		Rz = SC_AC__FindAdj(Msg, DisplayOnly);
		if (Rz) {
			return Rz;
		}
	}
	SCDecl* Ty = SC_TypeOfExpr(Msg, SC_Msg_MsgArg(Msg), nil);
	Rz = SC_AC__LocateDefinitionSub(Msg, Already_defined, Ty, DisplayOnly);
	if (JB_Msg_EqualsSyx(Rz, JB_SyxArg, false)) {
		Message* P = ((Message*)JB_Ring_Parent(Rz));
		if (P) {
			Rz = P;
		}
	}
	if (JB_Msg_OperatorIn(Msg, JB_SyxTmp)) {
		Msg = ((Message*)JB_Ring_Parent(Msg));
	}
	if (JB_Msg_EqualsSyx(Msg, JB_SyxTmp, false)) {
		JB_Object* Fn = Msg->Obj;
		if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
			return ((SCFunction*)Fn)->Source;
		}
	}
	return Rz;
}

Message* SC_AC__LocateDefinitionSub(Message* Msg, SCObject* Already_defined, SCDecl* Ty, bool DisplayOnly) {
	if (Already_defined) {
		return Already_defined->Source;
	}
	if ((JB_Msg_EqualsSyx(Msg, JB_SyxThg, false)) and JB_Msg_OperatorIn(Msg, JB_SyxFunc)) {
		Msg = ((Message*)JB_Ring_Parent(Msg));
	}
	SCFunction* Fn = SC_Msg_MsgFunc(Msg);
	if (Fn) {
		Message* It = Fn->Source;
		if (It) {
			return It;
		}
	}
	if ((!Ty)) {
		return SC_Msg_ModuleSrc(Msg);
	}
	if (SC_Class_EqualsType(Ty->Type, kSC__SCNodeType_FuncProto, false)) {
		JB_Object* L = Ty->IsLookupOnly;
		if (JB_Object_FastIsa(L, &SCFunctionData)) {
			return ((SCFunction*)L)->Source;
		}
	}
	if ((!DisplayOnly) and (JB_Msg_EqualsSyx(Msg, JB_SyxDecl, false))) {
		return SC_Base_SourceArg(Ty->Type);
	}
	Message* Src = Ty->Source;
	if (Src) {
		if (DisplayOnly and SC_Decl_SyntaxIs(Ty, kSC__SCDeclInfo_Const)) {
			(SC_Decl_NameSet(Ty, Msg->Name));
			return SC_Decl_WriteDeclFull(Ty, JB_LUB[0], 1);
		}
		if ((JB_Msg_EqualsSyx(Src, JB_SyxDecl, false)) and (JB_Msg_EqualsSyx(((Message*)JB_Ring_Last(Src)), JB_SyxRel, false))) {
			Src = JB_Msg_Copy(Src, nil);
			Message* L = ((Message*)JB_Ring_Last(Src));
			JB_FreeIfDead(SC_Msg_ReplaceWith(L, ((Message*)JB_Ring_First(L))));
		}
		return Src;
	}
	if (DisplayOnly) {
		SCClass* T = Ty->Type;
		Message* _tmP0 = T->TypeNormal->Source;
		if ((!_tmP0)) {
			_tmP0 = T->Source;
		}
		return _tmP0;
	}
	SCNode* Found = SC_Object_ClassOrModule(Msg->Obj);
	if (Found) {
		return Found->Source;
	}
	return nil;
}

Message* SC_AC__MainAct(Message* Cmd, SCFile* My_file) {
	Message* Rz = nil;
	int F = ((int)JB_Msg_Int(JB_Msg_NeedSyxInt(Cmd, JB_SyxNum, 1), 0));
	int N = ((int)JB_Msg_Int(JB_Msg_NeedSyxInt(Cmd, JB_SyxNum, 2), 0));
	if ((!N)) {
		JB_Str_SyntaxExpect(JB_LUB[1822]);
		return nil;
	}
	SC_SCFile_Use(My_file);
	SCFunction* Fn = SC_AC__GetFunc(Cmd, My_file, F, N);
	JB_ClassData_Restore((&MessageData));
	if ((!Fn)) {
		return nil;
	}
	Message* Thg = SC_Msg_FindPos(Fn->Source, F, N);
	if ((!Thg) and (JB_Msg_SyntaxEquals(Cmd, JB_LUB[1534], false))) {
		Thg = Fn->Source;
	}
	if ((JB_Msg_EqualsSyx(Thg, JB_SyxThg, false)) and (SC_Msg_IsBehaviour(Fn->Source) and JB_Msg_InMsg(Thg, Fn->Source))) {
		return SC_AC__Define_Behaviour(Fn, Cmd->Name);
	}
	if (JB_Msg_OperatorStarts(Cmd, JB_LUB[1597]) or (JB_Msg_OperatorStarts(Cmd, JB_LUB[1611]) or JB_Msg_OperatorStarts(Cmd, JB_LUB[1534]))) {
		return SC_AC__Backup_Define(My_file, F, Thg, Cmd->Name);
	}
	if ((!Thg)) {
		JB_Str_SyntaxExpect(JB_LUB[1823]);
		return nil;
	}
	if ((!JB_Msg_OperatorStarts(Cmd, JB_LUB[1503]))) {
		JB_Str_SyntaxExpect(JB_LUB[1506]);
		return nil;
	}
	Message* Stuff = JB_Msg_NeedSyxInt(Cmd, JB_SyxStr, 3);
	Message* Auto = SC_AC__MainActAutoComplete(Thg, JB_Msg_Name(Stuff), Cmd);
	if (Auto) {
		Rz = JB_Syx_OperatorPlus(JB_SyxArg, JB_LUB[1897]);
		JB_Tree_SyntaxAppend(Rz, ((Message*)JB_Tree_Get(Stuff, 0)));
		JB_Tree_SyntaxAppend(Rz, Auto);
	}
	return Rz;
}

Message* SC_AC__MainActAutoComplete(Message* Thg, JB_String* Str, Message* Cmd) {
	if (JB_Msg_EqualsSyx(Thg, JB_SyxTmp, false)) {
		return SC_AC__TmpAutoComplete(Thg, Str, Cmd->Name);
	}
	return SC_AC__AutoComplete(Thg, Str, Cmd->Name);
}

void SC_AC__ParserRestore() {
	JB_SetRef(SC__AC_Errors, JB_StdErr);
	JB_SetRef(JB_StdErr, JB_Rec_Constructor(nil));
	JB_ClassData_Restore((&MessageData));
	JB__Tk_Using.Position = -1;
}

void SC_AC__PerryTalk(SpdProcess* Perry) {
	SC__AC_CompiledOK = SC_Comp__CompileAll();
	SC_AC__ParserRestore();
	Message* _tmPf2 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1540]));
	Message* _tmPf1 = JB_Incr(SC_AC__Check(_tmPf2));
	JB_Decr(_tmPf2);
	JB_Proc_Send(Perry, _tmPf1);
	{
		while (PicoCanGet(Perry->Pico)) {
			Message* Cmd = JB_Incr(JB_Proc_Get(Perry, 1000.0f));
			if (((bool)Cmd) and (!SC_AC__CmdWrap(Cmd))) {
				JB_Decr(Cmd);
				break;
			}
			JB_Decr(Cmd);
		};
		JB_Decr(_tmPf1);
	}
	;
	PicoSleepForSend(5.0f, 0.5f);
	JB_Proc_Disconnect(Perry, JB_LUB[0]);
}

Message* SC_AC__ReportMemory(Message* Cmd) {
	JB_Tree_Clear(Cmd);
	Message* Arg = JB_Incr(JB_Msg_Msg(Cmd, JB_SyxArg, JB_LUB[0]));
	JB_Msg_AppendNum(Arg, JB_MemCount());
	JB_Msg_AppendNum(Arg, JB_App__StringMemory());
	JB_Decr(Arg);
	return Cmd;
}

Message* SC_AC__RespondDefine(Message* Msg, Message* S, JB_String* Purpose) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Syx_Msg(JB_SyxTmp, Purpose));
	if (JB_Str_OperatorStarts(Purpose, JB_LUB[1597])) {
		SC_AC__ActualDefine(Rz, S, Purpose);
	}
	 else {
		Message* _tmPf0 = JB_Incr(SC_AC__Diissplay(Msg, S, Purpose));
		JB_Tree_SyntaxAppend(Rz, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_AC__RootTmpComplete(Message* Cmd) {
	Message* Rz = nil;
	Message* F = ((Message*)JB_Tree_Get(((Message*)JB_Tree_Get(Cmd, 0)), 0));
	JB_String* Req = JB_Msg_Name(((Message*)JB_Ring_NextSib(F)));
	int Flags = 0;
	Flags = (Flags + (SC_Msg_IsModuleType(F) << ((bool)1)));
	Flags = (Flags + (SC_Msg_IsClassType(F) << ((bool)2)));
	Flags = (Flags + (SC_Msg_IsLinkageType(F) << ((bool)3)));
	if ((!(Flags))) {
		Flags = 1;
	}
	Rz = JB_Syx_Msg(JB_SyxTmp, Cmd->Name);
	Message* Arg = JB_Msg_Msg(Rz, JB_SyxArg, Req);
	{
		Message* _LoopSrcf2 = SC_AC__AllTmps();
		Message* Ch = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			JB_String* Found = Ch->Name;
			if ((((bool)(Ch->Tag & Flags))) and (JB_Str_OperatorStarts(Found, Req))) {
				Message* Tmp = JB_Msg_Msg(Arg, JB_SyxTmp, Found);
				JB_Msg_AppendSyx(Tmp, JB_SyxStr, JB_Str_Before(Found, JB_LUB[572]));
			}
			Ch = _Nf1;
		};
		;
	}
	;
	return Rz;
}

Message* SC_AC__TmpAutoComplete(Message* F, JB_String* Name, JB_String* Type) {
	Message* Rz = nil;
	bool Finished = false;
	JB_SetRef(Rz, JB_Syx_OperatorPlus(JB_SyxTmp, Type));
	if ((!JB_Str_Equals(Name, JB_LUB[1888], true))) {
		{
			Message* _LoopSrcf2 = JB_Incr(SC_AC__FuncTmps());
			Message* Ch = JB_Incr(((Message*)JB_Ring_First(_LoopSrcf2)));
			while (Ch) {
				Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
				if (JB_Msg_OperatorStarts(Ch, Name)) {
					if ((JB_Str_CompareInt(Ch->Name, 2, false) >= 1) and (JB_Str_Equals(Ch->Name, Name, true))) {
						Finished = true;
					}
					 else {
						Message* Cf = JB_Incr(((Message*)JB_Ring_First(Ch)));
						if (Cf) {
							Message* Arg = JB_Incr(JB_Msg_Msg(Rz, JB_SyxArg, Name));
							Message* _tmPf3 = JB_Incr(JB_Msg_Msg(Arg, JB_SyxTmp, Cf->Name));
							JB_Decr(Arg);
							JB_Msg_AppendSyx(_tmPf3, JB_SyxStr, Cf->Name);
							JB_Decr(_tmPf3);
						}
						JB_Decr(Cf);
					}
				}
				JB_SetRef(Ch, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(Ch);
			;
			JB_Decr(_LoopSrcf2);
		};
	}
	if (JB_Ring_HasChildren(Rz)) {
		0;
	}
	 else if ((bool)F) {
		JB_SetRef(Rz, SC_AC__AutoComplete(F, Name, Type));
	}
	 else {
		JB_SetRef(Rz, nil);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_AC__UnusedFuncs(Message* Cmd) {
	Message* Path = JB_Msg_NeedSyx(Cmd, JB_SyxStr);
	if ((!Path)) {
		return nil;
	}
	SCFile* Scf = ((SCFile*)JB_Dict_ValueLower(SC__Comp_Files, Path->Name));
	if ((!JB_File_SyntaxCast(Scf))) {
		JB_Str_SyntaxExpect(JB_Str_OperatorPlus(JB_LUB[1068], Path->Name));
		return nil;
	}
	Message* Unused_libs = ((Message*)JB_Ring_NextSib(Path));
	if (Unused_libs) {
		{
			Message* Lib = ((Message*)JB_Ring_First(Unused_libs));
			while (Lib) {
				Message* _Nf1 = ((Message*)JB_Ring_NextSib(Lib));
				if (JB_Msg_ExpectString(Lib)) {
					SC_Msg_HateUnusedFuncs(Lib);
				}
				Lib = _Nf1;
			};
			;
		};
	}
	JB_Tree_Clear(Cmd);
	if ((!SC__AC_CompiledOK)) {
		return Cmd;
	}
	Message* Arg = JB_Msg_GiveArg(Cmd);
	{
		Array* _LoopSrcf4 = SC__Comp_FuncList;
		int _if2 = 0;
		while (true) {
			SCFunction* Fn = ((SCFunction*)JB_Array_Value(_LoopSrcf4, _if2));
			if (Fn == nil) {
				break;
			}
			Message* Src = Fn->Source;
			if (((bool)Src) and ((SC_SCObject_File(Fn) == Scf) and SC_Func_IsUnused(Fn))) {
				JB_String* Str = JB_LUB[267];
				if (Fn->LinkFrom != nil) {
					Str = JB_LUB[268];
				}
				JB_Msg_AppendNum(JB_Msg_Msg(Arg, JB_SyxTmp, JB_Str_OperatorPlus(Fn->Name, Str)), Src->Position);
			}
			_if2++;
		};
	}
	;
	return Cmd;
}

Message* SC_AC__WriteError(JB_String* Name) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1632]));
	JB_Error* Err = JB_Incr(JB_Rec_Pop(JB_StdErr));
	if (Err) {
		JB_Msg_AppendString(Rz, Err->Name);
	}
	 else {
		JB_Msg_AppendString(Rz, JB_LUB[1632]);
	}
	JB_Decr(Err);
	JB_Msg_AppendString(Rz, Name);
	JB_SafeDecr(Rz);
	return Rz;
}


int JB_API__Init_() {
	{
		JB__API_NilHappened_ = 0;
	}
	;
	return 0;
}

int JB_API__InitCode_() {
	return 0;
}

void JB_API__NilCallBack(JB_String* ErrorMessage) {
	JB_PrintLine(ErrorMessage);
}

bool JB_API__NilHandler() {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return nil;
	}
	debugger;
	if ((++JB__API_NilHappened_) < 16) {
		JB_API__NilCallBack(JB_LUB[975]);
	}
	 else if (JB__API_NilHappened_ == 16) {
		JB_API__NilCallBack(JB_LUB[976]);
	}
	return false;
}


void JB_Constants__AddEscape(byte I, FastString* Fs) {
	JB_String* F = JB_Str__Byte(I);
	if ((!((!JB_Str_Exists(((JB_StringC*)JB_Dict_ValueStr(JB__Constants_EscapeStr, F)))) or (!JB_Str_Exists(((JB_String*)JB_Dict_ValueStr(JB__Constants_EscapeChr, F))))))) {
		return;
	}
	JB_FS_AppendByte(Fs, '\\');
	JB_FS_AppendHex(Fs, I, 2);
	JB_String* T = JB_FS_GetResult(Fs);
	if ((!(JB_Str_Exists(((JB_StringC*)JB_Dict_ValueStr(JB__Constants_EscapeStr, F)))))) {
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, F, JB_Str_CastZero(T)));
	}
	if ((!(JB_Str_Exists(((JB_String*)JB_Dict_ValueStr(JB__Constants_EscapeChr, F)))))) {
		(JB_Dict_ValueSet(JB__Constants_EscapeChr, F, T));
	}
}

int JB_Constants__Init_() {
	{
		JB_SetRef(JB__Constants_EscapeStr, (JB_Dict_Constructor(nil)));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[2], JB_LUB[1409]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[41], JB_LUB[1414]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[89], JB_LUB[1416]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[32], JB_LUB[1417]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[217], JB_LUB[1404]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[249], JB_LUB[1407]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[1402], JB_LUB[1411]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[242], JB_LUB[1406]));
		JB_SetRef(JB__Constants_XML_EscapeStr, (JB_Dict_Constructor(nil)));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[241], JB_LUB[244]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[249], JB_LUB[245]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[217], JB_LUB[248]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[572], JB_LUB[247]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[591], JB_LUB[246]));
		JB_SetRef(JB__Constants_JS_EscapeStr, (JB_Dict_Constructor(nil)));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[31], JB_LUB[1412]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[88], JB_LUB[1413]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[41], JB_LUB[1414]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[89], JB_LUB[1416]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[32], JB_LUB[1417]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[217], JB_LUB[1404]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[1402], JB_LUB[1411]));
		JB_SetRef(JB__Constants_CSWordMiddle, JB_Str_UniCS(JB_LUB[616]));
		JB_SetRef(JB__Constants_CSLettersOnly, JB_Str_UniCS(JB_LUB[615]));
		JB_SetRef(JB__Constants_CSWordStart, JB_Str_UniCS(JB_LUB[618]));
		JB_SetRef(JB__Constants_XMLWordMiddle, JB_Str_UniCS(JB_LUB[617]));
		JB_SetRef(JB__Constants_CSNum, JB__Constants_CSWordMiddle);
		JB_SetRef(JB__Constants_CSLine, JB_Str_CharSetWithBool(JB_LUB[56], false));
		JB_SetRef(JB__Constants_CSAfterStatement, JB_Str_CharSetWithBool(JB_LUB[137], false));
		JB_SetRef(JB__Constants_CSLineBlack, JB_Str_CharSetWithBool(JB_LUB[57], false));
		JB_SetRef(JB__Constants_CSWrapSplit, JB_Str_CharSetWithBool(JB_LUB[100], false));
	}
	;
	return 0;
}

int JB_Constants__InitCode_() {
	{
	}
	;
	JB_Constants__InitConstants();
	return 0;
}

void JB_Constants__InitConstants() {
	JB_Array_Constructor0(nil);
	JB_SetRef(JB__Constants_EscapeChr, JB_Dict__Copy(JB__Constants_EscapeStr));
	(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[235], JB_LUB[1405]));
	JB_SetRef(JB__Constants_UnEscapeStr, JB_Dict__Reverse(JB__Constants_EscapeStr));
	JB_SetRef(JB__Constants_JS_UnEscapeStr, JB_Dict__Reverse(JB__Constants_JS_EscapeStr));
	JB_SetRef(JB__Constants_XML_UnEscapeStr, JB_Dict__Reverse(JB__Constants_XML_EscapeStr));
	(JB_Dict_ValueSet(JB__Constants_EscapeChr, JB_LUB[217], ((JB_String*)nil)));
	(JB_Dict_ValueSet(JB__Constants_EscapeChr, JB_LUB[235], ((JB_String*)nil)));
	(JB_Dict_ValueSet(JB__Constants_UnEscapeStr, JB_LUB[1408], ((JB_String*)nil)));
	(JB_Dict_ValueSet(JB__Constants_UnEscapeStr, JB_LUB[1402], JB_LUB[0]));
	(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[249], ((JB_StringC*)nil)));
	FastString* Tfs = JB_Incr(JB_FS_Constructor(nil));
	{
		int I = 0;
		while (I < 256) {
			if ((I <= 31) or (((I == 127) or ((I == 192) or (I == 193))) or (I >= 245))) {
				JB_Constants__AddEscape(I, Tfs);
			}
			I++;
		};
	}
	;
	JB_Decr(Tfs);
	JB_MSR_EscapeCodeSet(JB__Constants_UnEscapeStr, true);
	JB_MSR_DecodeEntitySet(JB__Constants_UnEscapeStr, true);
	JB_MSR_DecodeEntitySet(JB__Constants_XML_UnEscapeStr, true);
	(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[238], JB_LUB[237]));
}

JB_String* JB_Constants__TestJB() {
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	{
		int C = 0;
		while (C < 256) {
			JB_FS_AppendByte(Fs, ((byte)C));
			C++;
		};
	}
	;
	JB_String* Str = JB_Incr(JB_FS_GetResult(Fs));
	JB_Decr(Fs);
	if ((!JB_Str_EscapeTest(Str))) {
		JB_Decr(Str);
		return JB_LUB[0];
	}
	JB_Decr(Str);
	JB_String* Natural_input = JB_Incr(JB_LUB[399]);
	JB_String* Jbin_input = JB_Incr(JB_LUB[399]);
	if ((!JB_Constants__TestCasting())) {
		debugger;
	}
	JB_FreeIfDead(JB_Str_UpperCase(JB_LUB[1827]));
	LeakTester* LKT = JB_Incr(JB_Lk_Constructor(nil, JB_LUB[1628]));
	JB_FreeIfDead(JB_EntityTest());
	JB_Lk_FinalTest(LKT);
	JB_Decr(LKT);
	if ((!JB_Rec_OK(JB_StdErr))) {
		JB_Decr(Jbin_input);
		JB_Decr(Natural_input);
		return JB_LUB[0];
	}
	Message* Root = JB_Incr(JB_Str_Parse(Natural_input, JB_SyxArg, true));
	JB_Decr(Natural_input);
	if ((!Root)) {
		JB_Decr(Root);
		JB_Decr(Jbin_input);
		return JB_LUB[0];
	}
	JB_Msg_jbinTest(Root);
	if (JB_Str_Exists(Jbin_input)) {
		Message* _tmPf1 = JB_Incr(JB_Msg_Copy(Root, nil));
		JB_Msg__TreeCompare(Root, _tmPf1, false);
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(JB_Str_Parse(Jbin_input, JB_SyxArg, true));
		JB_Msg__TreeCompare(Root, _tmPf2, false);
		JB_String* _tmPf3 = JB_Incr(JB_Msg_Render(Root, nil));
		JB_Msg_Test(Root, _tmPf3, JB_LUB[1827]);
		JB_Decr(_tmPf3);
		JB_String* _tmPf4 = JB_Incr(JB_Msg_RenderJbin(Root, JB_LUB[0], nil));
		JB_Msg_Test(Root, _tmPf4, JB_LUB[1742]);
		JB_Decr(_tmPf4);
		JB_Decr(_tmPf2);
	}
	JB_Decr(Jbin_input);
	if ((!JB_Rec_OK(JB_StdErr))) {
		JB_Decr(Root);
		return JB_LUB[0];
	}
	JB_Decr(Root);
	return JB_EntityTest();
}

bool JB_Constants__TestCasting() {
	Dictionary* D2 = JB_Incr(JB_Dict_Constructor(nil));
	DTWrap* _tmPf1 = JB_Incr(((DTWrap*)JB_Dict_ValueStr(D2, JB_LUB[1469])));
	DTWrap* _tmPf0 = JB_Incr(JB_Wrap_ConstructorInt(nil, JB_Wrap_Value(_tmPf1) + 1));
	JB_Decr(_tmPf1);
	(JB_Dict_ValueSet(D2, JB_LUB[1469], _tmPf0));
	JB_Decr(D2);
	JB_Decr(_tmPf0);
	Dictionary* D = JB_Incr(JB_Dict_Constructor(nil));
	JB_String* Str = JB_Incr(JB_LUB[3]);
	if (JB_Str_Length(Str) != 6) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(Str);
		JB_Decr(D);
		return nil;
	}
	(JB_Dict_ValueSet(D, Str, Str));
	JB_Decr(D);
	JB_Decr(Str);
	if ('\x00') {
		return nil;
	}
	JB_Class* X = &MessageData;
	Message* Y = JB_Incr(JB_Msg_ConstructorNormal(nil, JB_SyxBra, JB_LUB[0]));
	JB_SetRef(Y->Name, JB_LUB[1470]);
	JB_Object* Yy = nil;
	JB_SetRef(Yy, Y);
	Array* Arr = JB_Incr((JB_Array_Constructor0(nil)));
	JB_Array_SyntaxAppend(Arr, JB_LUB[0]);
	JB_Decr(Arr);
	if (JB_Object_Isa(Yy, &MessageData)) {
		if ((!JB_Str_Equals(((Message*)Yy)->Name, JB_LUB[1470], false))) {
			debugger;
		}
	}
	JB_Decr(Yy);
	bool _tmPf2 = (JB_Object_Isa(Y, X));
	JB_Decr(Y);
	return _tmPf2;
}


void SC_LinkMap__Collect(SCFunction* Self) {
	JB_SetRef(SC__Func_CurrFunc, Self);
	SC__LinkMap_CurrID++;
	Message* Arg = SC_Func_SourceArg(Self);
	{
		Message* Msg = Arg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Arg));
		while (((bool)(Msg)) and (Msg != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Msg));
			JB_Object* O = Msg->Obj;
			if (O) {
				SC_Func_CollectLinks(Self, O);
			}
			Msg = _N_f2;
		};
		;
	}
	;
	{
		Array* _LoopSrcf5 = Self->Args;
		int _if3 = 0;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf5, _if3));
			if (D == nil) {
				break;
			}
			SC_Func_CollectLinks(Self, D);
			_if3++;
		};
	}
	;
	SCDecl* R = Self->ReturnType;
	if (R) {
		SC_Func_CollectLinks(Self, R);
	}
}

void SC_LinkMap__CollectAll() {
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* S = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (S == nil) {
				break;
			}
			SC_LinkMap__Collect(S);
			_if0++;
		};
	};
}

int SC_LinkMap__Init_() {
	{
		SC__LinkMap_CurrID = 0;
	}
	;
	return 0;
}

int SC_LinkMap__InitCode_() {
	return 0;
}

void SC_LinkMap__Store(Array** Darr, SCObject* Obj) {
	Array* Arr = (*Darr);
	if (Arr == nil) {
		Arr = (JB_Array_Constructor0(nil));
		JB_SetRef((*Darr), Arr);
	}
	JB_Array_SyntaxAppend(Arr, Obj);
}


SCNode* SC_Linkage__Collect(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (Name_space != SC__Comp_program) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1297]);
		return nil;
	}
	Message* Arg = JB_Msg_NeedSyx(Node, JB_SyxArg);
	if (Arg) {
		SC_Msg_ConfTake(Arg, SC__Linkage_Flagz, JB_LUB[1656]);
		SC_Msg_ConfTake(Arg, SC__Linkage_OSXFrameworks, JB_LUB[1667]);
		{
			Message* Ch = ((Message*)JB_Ring_First(Arg));
			while (Ch) {
				Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
				if (true) {
					JB_Msg_SyntaxExpect(Ch, nil);
				}
				Ch = _Nf1;
			};
			;
		}
		;
		return SC__Comp_program;
	}
	if (true) {
		JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1245]);
	}
	return nil;
}

JB_String* SC_Linkage__CombineFlags(JB_String* Name) {
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FreeIfDead(SC_Linkage__GetFlag(Name, Fs));
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Linkage__CompilerCollect(Message* S) {
	JB_FreeIfDead(SC_Linkage__Collect(S, SC__Comp_program, nil));
	SC__Options_MakeInterpreter = SC_Linkage__Interpreter();
	JB_Tree_Remove(S);
}

JB_String* SC_Linkage__GetFlag(JB_String* Name, FastString* Fs) {
	{
		Message* _LoopSrcf2 = SC__Linkage_Flagz;
		Message* Ch = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			if (JB_Msg_SyntaxEquals(Ch, Name, true)) {
				if ((!Fs)) {
					return JB_Msg_FirstName(Ch);
				}
				JB_String* Str = JB_Msg_FirstName(Ch);
				if (JB_Str_Exists(Str)) {
					if (Fs->Length) {
						JB_FS_AppendByte(Fs, ' ');
					}
					JB_FS_AppendString(Fs, Str);
				}
			}
			Ch = _Nf1;
		};
		;
	}
	;
	return JB_LUB[0];
}

int SC_Linkage__Init_() {
	{
		JB_SetRef(SC__Linkage_OSXFrameworks, JB_Msg_ConstructorEmpty(nil));
		JB_SetRef(SC__Linkage_Flagz, JB_Msg_ConstructorEmpty(nil));
	}
	;
	return 0;
}

int SC_Linkage__InitCode_() {
	return 0;
}

bool SC_Linkage__Interpreter() {
	JB_String* _tmPf0 = JB_Incr(SC_Linkage__GetFlag(JB_LUB[1726], nil));
	bool _tmPf1 = JB_Str_Yes(_tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}



int SC_Macros__Init_() {
	{
		JB_SetRef(SC__Macros_FS, JB_Macro_ConstructorStr(nil, (JB_LUB[15])));
		JB_SetRef(SC__Macros_InitExpand, JB_Macro_ConstructorStr(nil, (JB_LUB[26])));
		JB_SetRef(SC__Macros_WhileDecl, JB_Macro_ConstructorStr(nil, (JB_LUB[16])));
		JB_SetRef(SC__Macros_MultiDecr, JB_Macro_ConstructorStr(nil, (JB_LUB[25])));
		JB_SetRef(SC__Macros_ConstructorNew, JB_Macro_ConstructorStr(nil, (JB_LUB[18])));
		JB_SetRef(SC__Macros_ConstructorNewTask, JB_Macro_ConstructorStr(nil, (JB_LUB[17])));
		JB_SetRef(SC__Macros_MainArgBasic, JB_Macro_ConstructorStr(nil, (JB_LUB[6])));
		JB_SetRef(SC__Macros_MainArgBasicReq, JB_Macro_ConstructorStr(nil, (JB_LUB[7])));
		JB_SetRef(SC__Macros_MainArgDefault, JB_Macro_ConstructorStr(nil, (JB_LUB[5])));
		JB_SetRef(SC__Macros_MainArgArray, JB_Macro_ConstructorStr(nil, (JB_LUB[8])));
		JB_SetRef(SC__Macros_MainArgNoNE, JB_Macro_ConstructorStr(nil, (JB_LUB[12])));
		JB_SetRef(SC__Macros_ASM_Datatype, JB_Macro_ConstructorStr(nil, (JB_LUB[13])));
		JB_SetRef(SC__Macros_ASMCopier, JB_Macro_ConstructorStr(nil, (JB_LUB[28])));
		JB_SetRef(SC__Macros_ASMCopier2, JB_Macro_ConstructorStr(nil, (JB_LUB[27])));
		JB_SetRef(SC__Macros_ASMSetter, JB_Macro_ConstructorStr(nil, (JB_LUB[21])));
	}
	;
	return 0;
}

int SC_Macros__InitCode_() {
	return 0;
}




void SC_Options__ColorSet(bool Value) {
	JB__ErrorColors_Enabled = Value;
}

bool SC_Options__Color() {
	return JB__ErrorColors_Enabled;
}

int SC_Options__Init_() {
	{
		SC__Options_NilStrength = kJB__ErrorSeverity_Error;
		JB_SetRef(SC__Options_BannedClasses, ((Dictionary*)nil));
		JB_SetRef(SC__Options_output_path, JB_LUB[0]);
		JB_SetRef(SC__Options_SingleFileInput, JB_LUB[0]);
		JB_SetRef(SC__Options_Variant, JB_LUB[0]);
		JB_SetRef(SC__Options_Arch, JB_LUB[0]);
		SC__Options_SingleCppOutput = true;
		SC__Options_HideMultipleErrors = true;
		SC__Options_NilTestAllocNeverFails = true;
		SC__Options_Beep = false;
		SC__Options_ModeCpp = true;
		SC__Options_ModePack = false;
		SC__Options_MakeInterpreter = false;
		SC__Options_MakeLib = false;
		SC__Options_Compile = true;
		SC__Options_TargetDebug = false;
		SC__Options_PrintLibraries = false;
		SC__Options_GenFlowControlCode = false;
		SC__Options_KeepAllErrors = false;
		SC__Options_Scripting = false;
		SC__Options_CheckMaxVars = false;
		SC__Options_ForceRecompile = false;
		SC__Options_Silent = false;
		SC__Options_IsDirectTest = false;
		SC__Options_ProjectIsLibrary = false;
		SC__Options_ProjectIsMiniLib = false;
		SC__Options_IgnoreCantSaveErrors = false;
		SC__Options_ArgStats = false;
		SC__Options_PrintCompileString = false;
		SC__Options_PrintFiles = false;
		SC__Options_PrintStages = false;
		SC__Options_Warnings = false;
		SC__Options_UseFuncCallCount = false;
		SC__Options_ExternalCompile = false;
		SC__Options_Final = false;
		SC__Options_Optimise = 1;
		SC__Options_SelfReplacement = ((bool)0);
		SC__Options_OperationCount = 0;
		SC__Options_PerryOutput = 0;
		SC__Options_UseScriptLoc = 0;
	}
	;
	return 0;
}

int SC_Options__InitCode_() {
	return 0;
}


void SC_PackMaker__AddAll() {
	bool MakeExec = SC__Options_MakeInterpreter;
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			if ((!SC_Func_CanLibLoad(F))) {
				0;
			}
			 else if (SC_Base_IsSTDLib(F)) {
				if (MakeExec or SC_Base_NeedsExport(F)) {
					JB_Array_SyntaxAppend(SC__PackMaker_LibFuncs, F);
				}
			}
			 else if (SC_Base_NeedsExport(F)) {
				JB_Array_SyntaxAppend(SC__PackMaker_PackFuncs, F);
			}
			_if0++;
		};
	};
}

JB_String* SC_PackMaker__BuildInterpreter() {
	FastString* Pack = JB_Incr(JB_bin_Constructor(nil, JB_SyxArg, JB_LUB[0]));
	SC_PackMaker__SortLibFuncs(Pack);
	SC_PackMaker__DoLibGlobs(Pack);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(Pack));
	JB_Decr(Pack);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_PackMaker__DoLibGlobs(FastString* Pack) {
	JB_Array_Sort(SC__PackMaker_LibGlobs, SC_SCNodeSorter, false);
	JB_bin_Enter(Pack, JB_SyxArr, JB_LUB[0]);
	{
		int _if0 = 0;
		while (true) {
			SCDecl* F = JB_Incr(((SCDecl*)JB_Array_Value(SC__PackMaker_LibGlobs, _if0)));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			JB_bin_Add(Pack, JB_SyxThg, F->ExportName, false);
			JB_Decr(F);
			_if0++;
		};
	}
	;
	JB_bin_Exit(Pack, 1);
}

int SC_PackMaker__Init_() {
	{
		JB_SetRef(SC__PackMaker_LibFuncs, JB_Array_Constructor0(nil));
		JB_SetRef(SC__PackMaker_LibGlobs, JB_Array_Constructor0(nil));
		JB_SetRef(SC__PackMaker_PackFuncs, JB_Array_Constructor0(nil));
		JB_SetRef(SC__PackMaker_PackGlobs, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

int SC_PackMaker__InitCode_() {
	return 0;
}

void SC_PackMaker__MakePack() {
	FastString* Pack = JB_Incr(JB_bin_Constructor(nil, JB_SyxTmp, JB_LUB[2110]));
	SC_PackMaker__MakePackSub(Pack);
	JB_File* _tmPf0 = JB_Incr(SC_Comp__ProductFile());
	JB_String* _tmPf1 = JB_Incr(JB_FS_SyntaxCast(Pack));
	JB_Decr(Pack);
	(JB_File_SmartDataSet(_tmPf0, _tmPf1));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
}

void SC_PackMaker__MakePackSub(FastString* J) {
	JB_Array_Sort(SC__PackMaker_PackFuncs, SC_SCNodeSorter, false);
	{
		Array* _LoopSrcf3 = SC__PackMaker_PackFuncs;
		int _if1 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf3, _if1));
			if (F == nil) {
				break;
			}
			int I = _if1;
			F->TableId = I;
			_if1++;
		};
	}
	;
	JB_bin_Enter(J, JB_SyxTmp, JB_LUB[1483]);
	int GlobSize = SC_TreeAssembler__VacuumPack(SC__PackMaker_PackFuncs);
	JB_bin_Add(J, JB_SyxNum, JB_LUB[0], ((bool)GlobSize));
	JB_bin_Enter(J, JB_SyxArg, JB_LUB[0]);
	JB_bin_Tmp(J, JB_LUB[606]);
	{
		Array* _LoopSrcf6 = SC__PackMaker_PackFuncs;
		int _if4 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf6, _if4));
			if (F == nil) {
				break;
			}
			JB_bin_Add(J, JB_SyxTmp, F->ExportName, true);
			ASMFunc* _tmPf0 = F->ASM;
			if ((!_tmPf0)) {
				JB_Object_SyntaxExpect(nil);
				return;
			}
			SC_bin_Add(J, _tmPf0);
			JB_bin_Exit(J, 1);
			_if4++;
		};
	}
	;
	JB_bin_Exit(J, 2);
	JB_bin_Tmp(J, JB_LUB[642]);
	{
		Array* _LoopSrcf9 = SC__Crkt_List;
		int _if7 = 0;
		while (true) {
			MessageID* S = ((MessageID*)JB_Array_Value(_LoopSrcf9, _if7));
			if (S == nil) {
				break;
			}
			if ((!JB_Str_Length(S))) {
				debugger;
			}
			JB_bin_Add(J, JB_SyxStr, S, false);
			_if7++;
		};
	}
	;
	JB_bin_Exit(J, 2);
	JB_bin_Tmp(J, JB_LUB[2109]);
	SC_Class_PackClassChildren(JB_TypeObject, J);
	JB_bin_Exit(J, 2);
	JB_bin_Tmp(J, JB_LUB[2111]);
	{
		Array* _LoopSrcf12 = SC__PackMaker_LibFuncs;
		int _if10 = 0;
		while (true) {
			SCFunction* Linked = ((SCFunction*)JB_Array_Value(_LoopSrcf12, _if10));
			if (Linked == nil) {
				break;
			}
			JB_bin_Add(J, JB_SyxThg, Linked->ExportName, false);
			_if10++;
		};
	}
	;
	JB_bin_Exit(J, 2);
}

void SC_PackMaker__SortLibFuncs(FastString* J) {
	JB_Array_Sort(SC__PackMaker_LibFuncs, SC_SCNodeSorter, false);
	JB_bin_Enter(J, JB_SyxPrm, JB_LUB[0]);
	{
		Array* _LoopSrcf2 = SC__PackMaker_LibFuncs;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			int I = _if0;
			F->TableId = I;
			JB_bin_Add(J, JB_SyxThg, F->ExportName, false);
			_if0++;
		};
	}
	;
	JB_bin_Exit(J, 1);
}


bool JB_Platform__CPU_ARM() {
	return ((bool)(JB_Platform__CPU() & 2));
}

bool JB_Platform__CPU_Intel() {
	return ((bool)(JB_Platform__CPU() & 4));
}

JB_String* JB_Platform__CPU_Name() {
	if (JB_Platform__CPU_Intel()) {
		return JB_LUB[1723];
	}
	if (JB_Platform__CPU_ARM()) {
		return JB_LUB[1489];
	}
	if (JB_Platform__CPU_PPC()) {
		return JB_LUB[1872];
	}
	if (JB_Platform__CPU_Spd()) {
		return JB_LUB[1953];
	}
	return JB_LUB[0];
}

bool JB_Platform__CPU_PPC() {
	return ((bool)(JB_Platform__CPU() & 8));
}

bool JB_Platform__CPU_Spd() {
	return ((bool)(JB_Platform__CPU() & 1));
}

int JB_Platform__Init_() {
	{
	}
	;
	return 0;
}

int JB_Platform__InitCode_() {
	return 0;
}

void JB_Platform__Log(JB_String* S) {
	//visible;
	JB_File* L = ({
		JB_File* _X = JB__Platform_Logger_;
		if ((!JB_File_SyntaxCast(_X))) {
			_X = JB_Platform__OpenLog();
			JB_SetRef(JB__Platform_Logger_, _X);
		}
		 _X;
	});
	JB_File_SyntaxAppend(L, S);
	JB_File_SyntaxAppend(L, JB_LUB[41]);
}

JB_File* JB_Platform__OpenLog() {
	JB_File* Rz = nil;
	JB_File* _tmPf1 = JB_Incr(JB_File__Logs());
	JB_String* _tmPf3 = JB_Incr(JB_App__AppName());
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf3, JB_LUB[374]));
	JB_Decr(_tmPf3);
	JB_File* _tmPf0 = JB_Incr(JB_File_SyntaxAccess(_tmPf1, _tmPf2));
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf2);
	JB_SetRef(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SetRef(JB__Platform_Logger_, Rz);
	JB_File_OpenBlank(Rz);
	JB_SafeDecr(Rz);
	return Rz;
}

int JB_Platform__PointerBytes() {
	return JB_PointerSize() >> 3;
}

bool JB_Platform__Release() {
	return (!JB_IsDebug());
}


int SC_SCGame3D__Init_() {
	{
		JB_SetRef(SC__SCGame3D_Types, (JB_Dict_Constructor(nil)));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[1870], JB_LUB[1116]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[2001], JB_LUB[1262]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[2002], JB_LUB[1982]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[1755], JB_LUB[980]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[1757], JB_LUB[1748]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[1580], JB_LUB[687]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[1515], JB_LUB[653]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[1942], JB_LUB[902]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[1929], JB_LUB[1202]));
	}
	;
	return 0;
}

int SC_SCGame3D__InitCode_() {
	return 0;
}

SCNode* SC_SCGame3D__Love(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (JB_Rnd_SyntaxAccess((&JB__Rnd_Shared)) > (1.0f / 12.0f)) {
		JB_String* _tmPf1 = JB_Incr(JB_Msg_Render(Node, nil));
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(_tmPf1, (5), JB_int__Max()));
		JB_Decr(_tmPf1);
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return SC__Comp_program;
}

bool SC_SCGame3D__NeedShader(JB_String* Name) {
	if ((JB_Str_Equals(Name, JB_LUB[1027], true)) or (JB_Str_Equals(Name, JB_LUB[1026], true))) {
		return true;
	}
	JB_Object* F = JB_Incr(JB_Dict_ValueStr(SC__Imp_Shaders, Name));
	if ((!JB_Object_Isa(F, &JB_StringData))) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[736]);
		JB_FS_AppendString(_fsf0, Name);
		JB_FS_AppendByte(_fsf0, '\n');
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Str_SyntaxExpect(_tmPf1);
		JB_Decr(_tmPf1);
		JB_Decr(F);
		return nil;
	}
	JB_Decr(F);
	return true;
}

SCNode* SC_SCGame3D__NeuModel(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	Message* Inst = JB_Incr(SC_Msg_TranModel(Node));
	if ((!Inst)) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1091]);
		JB_Decr(Inst);
		return nil;
	}
	SCNode* M = JB_Incr(SC_Class__NewStruct(Node, Name_space, ErrPlace));
	if (JB_Object_FastIsa(M, &SCModuleData)) {
		JB_SetRef(((SCModule*)M)->Cls->IsModel, Inst);
	}
	JB_Decr(Inst);
	JB_SafeDecr(M);
	return M;
}


int SC__Init_() {
	{
		SC__SC_UniqueNum = 0;
	}
	;
	return 0;
}

int SC__InitCode_() {
	return 0;
}


void SC_Refs__DeclInit(Message* Dcl, SCFunction* Fn, bool IsJustAnArg) {
	int Basis = SC_Refs__RefBasis(Dcl, true);
	if (SC_Func_doRefs(Fn)) {
		if ((!Basis)) {
			return;
		}
	}
	 else {
		if ((!((bool)(Basis & kSC__Refs_kBasisDeSTRUCTable)))) {
			return;
		}
	}
	Message* Arg = ((Message*)JB_Ring_Parent(Dcl));
	Message* Name = SC_Msg_DeclName(Dcl);
	Message* LastPlace = nil;
	if (((bool)(Basis & kSC__Refs_kBasisObj))) {
		LastPlace = SC_Refs__LastUsedRefPlace(Name, Arg);
	}
	Message* Blocker = SC_Msg_CausesUnReachable(Arg, Arg, Dcl, LastPlace);
	if (Basis == kSC__Refs_kBasisObj) {
		SC_Refs__RefIncr(Name, Dcl, IsJustAnArg);
	}
	if ((!(Blocker))) {
		Blocker = LastPlace;
	}
	SC_Refs__ReturnHandle(Blocker, Arg, Name, Basis);
	Message* Curr = Dcl;
	Message* After = ((Message*)JB_Ring_FlatAfter(Arg));
	while ((Curr != After) and (Curr != LastPlace)) {
		if (JB_Msg_EqualsSyx(Curr, JB_SyxArg, false)) {
			Message* Block2 = SC_Msg_CausesUnReachable(Curr, Arg, nil, nil);
			if (Block2) {
				SC_Refs__ReturnHandle(Block2, nil, Name, Basis);
			}
		}
		Curr = ((Message*)JB_Ring_FlatNext0(Curr));
	};
}

Message* SC_Refs__DecrMulti(SCDecl* D, Message* M) {
	Message* Rz = nil;
	Message* Int = JB_int_Msg(D->C_Array);
	JB_SetRef(Int->Obj, JB_TypeInt->TypeNormal);
	Rz = JB_Macro_CallFast(SC__Macros_MultiDecr, M, Int);
	Message* Prm = ((Message*)JB_Tree_Second(Rz));
	if (Prm) {
		JB_SetRef(Prm->Obj, SC__Comp_RefDecrMulti);
		JB_SetRef(Rz->Obj, JB_TypeVoid);
	}
	return Rz;
}

void SC_Refs__Destructable(Message* Blocker, Message* Arg, Message* Name) {
	SCDecl* Type = SC_TypeOfExpr(Name, nil, nil);
	if ((!JB_Object_Isa(Type, &SCDeclData))) {
		return;
	}
	SCFunction* Fn = Type->Type->DestructorFunc;
	Message* FnMsg = SC_Refs__RefMsg0(Fn->ExportName, Fn);
	Message* Brel = JB_Msg_Msg(((Message*)JB_Ring_Last(FnMsg)), JB_SyxBRel, JB_LUB[241]);
	Message* NewThg = JB_Msg_Msg(Brel, JB_SyxThg, Name->Name);
	JB_SetRef(NewThg->Obj, Name->Obj);
	if (Blocker) {
		(JB_Ring_PrevSibSet(Blocker, FnMsg));
	}
	 else {
		JB_Tree_SyntaxAppend(Arg, FnMsg);
	}
}

bool SC_Refs__ExitHitsOrGoesPast(Message* Curr, Message* Arg) {
	while (true) {
		Curr = ((Message*)JB_Ring_Parent(Curr));
		if (Curr == Arg) {
			return true;
		}
		if (SC_Msg_OperatorIsTmp(Curr, JB_LUB[2047])) {
			return false;
		}
	};
}

bool SC_Refs__ExprNeedsTemping(Message* Child, Message* Name) {
	if (SC_Refs__RefBasis(Name, false) != kSC__Refs_kBasisObj) {
		return nil;
	}
	{
		Message* S = Child;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Child));
		while (((bool)(S)) and (S != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(S));
			if (SC_Msg_OperatorIsThing(S, Name->Name)) {
				return true;
			}
			S = _N_f2;
		};
		;
	}
	;
	return false;
}

Message* SC_Refs__LastUsedRefPlace(Message* Name, Message* Arg) {
	SCDecl* D = SC_Msg_AsDecl(Name);
	if ((!D)) {
		JB_Object_SyntaxExpect(nil);
		return nil;
	}
	SCClass* Type = D->Type;
	if (Type->NoEarlyFree) {
		return nil;
	}
	JB_String* S = Name->Name;
	Message* Found = Name;
	{
		Message* C = Arg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Arg));
		while (((bool)(C)) and (C != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(C));
			if (SC_Msg_OperatorIsThing(C, S)) {
				Found = C;
			}
			C = _N_f2;
		};
		;
	}
	;
	Message* Curr = Found;
	while (Found != Arg) {
		Curr = Found;
		Found = ((Message*)JB_Ring_Parent(Found));
	};
	return SC_Msg_LastUsedFix(Curr);
}

void SC_Refs__RC_CheckFuncAllocOK(SCFunction* Self, Message* Dot) {
	if ((!(JB_Msg_OperatorIn(Dot, JB_SyxBra) and JB_Msg_OperatorIn(((Message*)JB_Ring_Parent(Dot)), JB_SyxBra)))) {
		SCFunction* Fn = SC_Msg_AsFunc(((Message*)JB_Ring_Last(Dot)));
		if (Fn) {
			if ((SC_Func_SyntaxIs(Fn, kSC__FunctionType_Destructor)) and (!SC_Func_SyntaxIs(Self, kSC__FunctionType_Destructor))) {
				if (true) {
					JB_Msg_SyntaxExpect(Dot, JB_LUB[689]);
				}
			}
		}
	}
}

void SC_Refs__RC_DeclArg(SCDecl* AR, SCFunction* Fn) {
	Message* Dcl = SC_Decl_WriteNilDecl(AR);
	(JB_Ring_FirstSet(SC_Func_SourceArg(Fn), Dcl));
	SC_Refs__DeclInit(Dcl, Fn, true);
	JB_Tree_Remove(Dcl);
}

void SC_Refs__RC_HandleDisappearing(SCFunction* Fn, Message* Msg, int Basis) {
	Message* Ch = JB_Incr(SC_Msg_UseNonRefChangers(Msg, false));
	if (((bool)(Basis & kSC__Refs_kBasisDeSTRUCTable)) or ((bool)(Basis & kSC__Refs_kBasisTempStruct))) {
		if ((!(((bool)JB_FreeIfDead(SC_Msg_IsSetIntoPlace(Msg))) or ({
			Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Parent(Ch)));
			bool _tmPf0 = SC_Msg_IsReturnOrRejoin(_tmPf1);
			JB_Decr(_tmPf1);
			 _tmPf0;
		})))) {
			JB_FreeIfDead(SC_Func__TypedTempMoveOut(Msg, JB_LUB[0]));
		}
		JB_Decr(Ch);
		return;
	}
	if ((!((Basis == kSC__Refs_kBasisObj) and ((!SC_Msg_IsProperty(Msg)))))) {
		JB_Decr(Ch);
		return;
	}
	Message* Parent = JB_Incr(SC_Msg_NiceParent(Ch));
	if ((!(((!JB_Msg_EqualsSyx(Parent, JB_SyxArg, false))) and ((!(SC_Msg_IsReturnOrRejoin(Parent) and JB_Tree_IsOnlyChild(Ch))) and (!JB_FreeIfDead(SC_Msg_IsSetIntoPlace(Ch))))))) {
		JB_Decr(Parent);
		JB_Decr(Ch);
		return;
	}
	if (SC_Msg_RefDisappears(Ch)) {
		Message* Fnc = JB_Incr(SC_NewFnc(JB_LUB[958]));
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(Fnc)));
		JB_SetRef(_tmPf2->Obj, SC__Comp_RefFreeIfDead);
		JB_Decr(_tmPf2);
		JB_SetRef(Fnc->Obj, SC__Comp_RefFreeIfDead->ReturnType);
		JB_FreeIfDead(SC_Msg_ReplaceWith(Msg, Fnc));
		Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Last(Fnc)));
		JB_Decr(Fnc);
		JB_Tree_SyntaxAppend(_tmPf3, Msg);
		JB_Decr(_tmPf3);
		JB_Decr(Parent);
		JB_Decr(Ch);
		return;
	}
	if (JB_Msg_EqualsSyx(Parent, JB_SyxPrm, false)) {
		if (Parent->Obj == SC__Comp_TernaryFunc) {
			if (JB_FreeIfDead(SC_Msg_UseNonRefChangers(Ch, false)) != JB_FreeIfDead(((Message*)JB_Ring_First(Parent)))) {
				JB_Decr(Parent);
				JB_Decr(Ch);
				return;
			}
		}
		if (Parent->Obj == SC__Comp_RefFreeIfDead) {
			JB_Decr(Parent);
			JB_Decr(Ch);
			return;
		}
	}
	JB_Decr(Parent);
	Message* _tmPf4 = JB_Incr(SC_Msg_ParentPoint(Ch));
	Message* Pp = JB_Incr(_tmPf4);
	JB_Decr(_tmPf4);
	if (SC_Refs__RC_NeedsOwnBlock(Ch, Pp)) {
		JB_FreeIfDead(SC_Msg_TempIntoBlock(Ch, Pp));
	}
	 else {
		JB_FreeIfDead(SC_Func__TypedTempMoveOut(Msg, JB_LUB[0]));
	}
	JB_Decr(Ch);
	JB_Decr(Pp);
}

void SC_Refs__RC_IgnoreReturn(Message* Msg, bool DoRefs) {
	if (SC_Refs__RefBasis(Msg, false) != kSC__Refs_kBasisObj) {
		return;
	}
	if (Msg->Func == JB_SyxFunc) {
		Message* Dcl = ((Message*)JB_Ring_Last(Msg));
		if (Dcl->Func == JB_SyxPrm) {
			SCFunction* Fn = ((SCFunction*)Dcl->Obj);
			if ((!(!SC_Func_SyntaxIs(Fn, kSC__FunctionType_Constructor)))) {
				return;
			}
		}
	}
	Message* Free_if_dead = SC_Refs__RefMsg0(JB_LUB[958], SC__Comp_RefFreeIfDead);
	SC_Msg_FuncWrap(Msg, Free_if_dead);
}

bool SC_Refs__RC_NeedsOwnBlock(Message* Msg, Message* Pp) {
	bool HitArg = false;
	{
		Message* Ch = Msg;
		while (Ch) {
			if (JB_Msg_EqualsSyx(Ch, JB_SyxArg, false)) {
				HitArg = true;
			}
			 else if (JB_Msg_EqualsSyx(Ch, JB_SyxRel, false)) {
				Message* Opp = ((Message*)JB_Tree_Second(Ch));
				if (((JB_Msg_EqualsSyx(Opp, JB_SyxOpp, false))) and ((JB_Msg_SyntaxEquals(Opp, JB_LUB[1855], false)) or (JB_Msg_SyntaxEquals(Opp, JB_LUB[1481], false)))) {
					return true;
				}
			}
			 else if (SC_Msg_OperatorIsTmp(Ch, JB_LUB[2047])) {
				if ((!HitArg)) {
					return true;
				}
			}
			if (Ch == Pp) {
				break;
			}
			Ch = ((Message*)JB_Ring_Parent(Ch));
		};
		;
	}
	;
	return false;
}

void SC_Refs__RC_Rel(Message* Rel) {
	Message* First = ((Message*)JB_Ring_First(Rel));
	if ((!SC_Refs__RelNeedsRef(Rel, First))) {
		return;
	}
	Message* Result = SC_NewFnc(JB_LUB[968]);
	Message* Lst = ((Message*)JB_Ring_Last(Result));
	JB_Tree_SyntaxAppend(Lst, First);
	JB_Tree_SyntaxAppend(Lst, ((Message*)JB_Ring_Last(Rel)));
	JB_SetRef(Lst->Obj, SC__Comp_RefSetRef);
	JB_FreeIfDead(SC_Msg_ReplaceWith(Rel, Result));
}

void SC_Refs__RC_RelConstructor(Message* Rel) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Rel)));
	Message* First = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	if ((!SC_Refs__RelNeedsRef(Rel, First))) {
		JB_Decr(First);
		return;
	}
	JB_Decr(First);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Tree_Get(Rel, 2)));
	Message* Last = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (SC_Msg_OperatorIsThing(Last, JB_LUB[1810])) {
		JB_Decr(Last);
		return;
	}
	if ((!JB_Msg_EqualsSyx(Last, JB_SyxThg, false))) {
		JB_SetRef(Last, SC_Func__TempMoveOut(Last, Rel));
	}
	SC_Refs__RefIncr(Last, Rel, false);
	JB_Decr(Last);
}

int SC_Refs__RefBasis(Message* Msg, bool SetOnly) {
	return SC_Refs__RefBasisStruct(Msg, SetOnly) & (~kSC__Refs_kBasisTempStruct);
}

int SC_Refs__RefBasisStruct(Message* Msg, bool SetOnly) {
	SCDecl* Type = SC_Msg_AsDecl(Msg);
	if ((!JB_Object_Isa(Type, &SCDeclData))) {
		Type = SC_TypeOfExpr(Msg, nil, nil);
		if ((!Type)) {
			return 0;
		}
	}
	if (SC_Decl_IsReffable(Type, SetOnly)) {
		if (SC_Decl_IsCArray(Type)) {
			return kSC__Refs_kBasisCArray | kSC__Refs_kBasisObj;
		}
		if (SC_Decl_SyntaxIs(Type, kSC__SCDeclInfo_Self) and SC_Func_SyntaxIs(SC__Func_CurrFunc, kSC__FunctionType_Constructor)) {
			return 0;
		}
		return kSC__Refs_kBasisObj;
	}
	if (SC_Decl_HasStruct(Type)) {
		SCFunction* Fn = Type->Type->DestructorFunc;
		if (Fn) {
			return kSC__Refs_kBasisDeSTRUCTable;
		}
		Message* P = SC_Msg_NiceParent(Msg);
		if (SC_Msg_OperatorIsBRel(P, JB_LUB[241])) {
			return kSC__Refs_kBasisTempStruct;
		}
	}
	return 0;
}

Message* SC_Refs__RefClearMsg(Message* Msg) {
	return SC_Refs__RefMsg(Msg, JB_LUB[950], SC__Comp_RefClear);
}

void SC_Refs__RefDecr(Message* Msg, Message* Place, int Basis) {
	Message* OldPrev = ((Message*)JB_Ring_PrevSib(Place));
	if (((bool)(OldPrev)) and (((JB_Msg_EqualsSyx(OldPrev, JB_SyxFunc, false))) and ((JB_Msg_SyntaxEquals(((Message*)JB_Ring_First(OldPrev)), JB_LUB[967], true))))) {
		Place = OldPrev;
	}
	Message* What = nil;
	if (((bool)(Basis & kSC__Refs_kBasisCArray))) {
		What = SC_Refs__DecrMulti(SC_Msg_AsDecl(((Message*)JB_Ring_Parent(Msg))), JB_Msg_Copy(Msg, nil));
	}
	 else {
		What = SC_Refs__RefDecrMsg(Msg);
	}
	if (JB_Msg_EqualsSyx(Place, JB_SyxArg, false)) {
		JB_Tree_SyntaxAppend(Place, What);
	}
	 else {
		(JB_Ring_PrevSibSet(Place, What));
	}
}

Message* SC_Refs__RefDecrMsg(Message* Msg) {
	return SC_Refs__RefMsg(Msg, JB_LUB[951], SC__Comp_RefDecr);
}

Message* SC_Refs__RefDestructorMsg(Message* Msg, SCFunction* Fn) {
	return SC_Refs__RefMsg(Msg, Fn->ExportName, Fn);
}

void SC_Refs__RefIncr(Message* Msg, Message* Place, bool IsJustAnArg) {
	if (IsJustAnArg) {
		Place = ((Message*)JB_Ring_Parent(((Message*)JB_Ring_Parent(Msg))));
	}
	 else {
		if (JB_Msg_EqualsSyx(Place, JB_SyxDecl, false)) {
			Msg = ((Message*)JB_Ring_Last(Place));
			if (JB_Msg_EqualsSyx(Msg, JB_SyxRel, false)) {
				Msg = ((Message*)JB_Ring_Last(Msg));
				if (SC_Msg_IsStatementExpr(Msg)) {
					return SC_Msg_AvoidSafeDecr(Msg);
				}
			}
		}
		if (SC_Msg_OperatorIsThing(SC_Msg_UnBra(Msg), JB_LUB[1810])) {
			return;
		}
		Place = Msg;
	}
	SC_Func_RefFunc(SC__Comp_RefIncr, Msg, Place);
}

Message* SC_Refs__RefMsg(Message* Msg, JB_String* Name, SCFunction* Func) {
	Message* Rz = nil;
	Rz = SC_NewFnc(Name);
	Message* Lst = ((Message*)JB_Ring_Last(Rz));
	JB_Tree_SyntaxAppend(Lst, JB_Msg_Copy(Msg, nil));
	JB_SetRef(Lst->Obj, Func);
	Rz->Position = -1;
	JB_SetRef(Rz->Obj, Func->ReturnType);
	if ((!Rz->Obj)) {
		JB_SetRef(Rz->Obj, JB_TypeVoid);
	}
	return Rz;
}

Message* SC_Refs__RefMsg0(JB_String* Name, SCFunction* Func) {
	Message* Rz = nil;
	Rz = SC_NewFnc(Name);
	Rz->Position = -1;
	JB_SetRef(((Message*)JB_Tree_Second(Rz))->Obj, Func);
	return Rz;
}

void SC_Refs__RefSafeDecr(Message* Msg, Message* Place) {
	if (JB_Msg_EqualsSyx(Place, JB_SyxArg, false)) {
		Message* _tmPf0 = JB_Incr(SC_Refs__SafeDecrMsg(Msg));
		JB_Tree_SyntaxAppend(Place, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		Message* _tmPf1 = JB_Incr(SC_Refs__SafeDecrMsg(Msg));
		(JB_Ring_PrevSibSet(Place, _tmPf1));
		JB_Decr(_tmPf1);
	}
}

bool SC_Refs__RelNeedsRef(Message* Msg, Message* First) {
	if (SC_Refs__RefBasis(First, true) != kSC__Refs_kBasisObj) {
		return nil;
	}
	if (JB_Msg_EqualsSyx(First, JB_SyxDot, false)) {
		return true;
	}
	return true;
}

void SC_Refs__ReturnHandle(Message* Blocker, Message* Arg, Message* Name, int Basis) {
	if (((bool)(Basis & kSC__Refs_kBasisDeSTRUCTable))) {
		if ((!Blocker)) {
			return SC_Refs__Destructable(Blocker, Arg, Name);
		}
		Message* Ch = JB_Incr(((Message*)JB_Ring_First(Blocker)));
		if ((SC_Msg_IsReturnOrRejoin(Blocker) and SC_Msg_OperatorIsThing(Ch, Name->Name)) or (SC_Msg_OperatorIsThing(Blocker, Name->Name))) {
			JB_Decr(Ch);
			return;
		}
		if (((JB_Msg_SyntaxEquals(Blocker, JB_LUB[1898], false))) and (SC_Msg_DoesAnything(Ch))) {
			Message* NeedsMoreTemping = JB_Incr(SC_Func__TempMoveOut(Ch, Blocker));
			SC_Refs__Destructable(Blocker, Arg, Name);
			SC_Refs__ReturnTempMoveOutSub(Ch, Blocker, NeedsMoreTemping);
			JB_Decr(NeedsMoreTemping);
		}
		 else {
			SC_Refs__Destructable(Blocker, Arg, Name);
		}
		JB_Decr(Ch);
		return;
	}
	if (((bool)(Basis & kSC__Refs_kBasisTempStruct))) {
		return;
	}
	if ((!Blocker)) {
		SC_Refs__RefDecr(Name, Arg, Basis);
		return;
	}
	bool IsReturn = SC_Msg_IsReturnOrRejoin(Blocker);
	Message* Child = JB_Incr(((Message*)JB_Ring_First(Blocker)));
	if (Child) {
		if (IsReturn and (({
			Message* _tmPf1 = JB_Incr(SC_Msg_UnBraType(Child));
			bool _tmPf0 = SC_Msg_OperatorIsThing(_tmPf1, Name->Name);
			JB_Decr(_tmPf1);
			 _tmPf0;
		}))) {
			SC_Refs__RefSafeDecr(Name, Blocker);
			JB_Decr(Child);
			return;
		}
		if (IsReturn and SC_Refs__ExprNeedsTemping(Child, Name)) {
			SC_Refs__ReturnTempMoveOut(Child, Blocker);
		}
	}
	JB_Decr(Child);
	SC_Refs__RefDecr(Name, Blocker, Basis);
}

void SC_Refs__ReturnTempMoveOut(Message* Child, Message* Blocker) {
	Message* Temp = JB_Incr(SC_Func__TempMoveOut(Child, Blocker));
	SC_Refs__ReturnTempMoveOutSub(Child, Blocker, Temp);
	JB_Decr(Temp);
}

void SC_Refs__ReturnTempMoveOutSub(Message* Child, Message* Blocker, Message* Temp) {
	if (SC_Refs__RefBasis(Child, false) == kSC__Refs_kBasisObj) {
		Message* _tmPf0 = JB_Incr(SC_Msg_ParentPoint(Temp));
		SC_Refs__RefIncr(Child, _tmPf0, false);
		JB_Decr(_tmPf0);
		SC_Refs__RefSafeDecr(Temp, Blocker);
	}
}

Message* SC_Refs__SafeDecrMsg(Message* Msg) {
	return SC_Refs__RefMsg(Msg, JB_LUB[967], SC__Comp_RefSafeDecr);
}


SCNode* SC_SCSelector__Build(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	Message* Arg = JB_Incr(JB_Msg_Last(Node, JB_SyxArg));
	Message* Name = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxThg));
	Message* Items = JB_Incr(SC_SCSelector__FindItems(Arg));
	Message* ActualNames = JB_Incr(JB_Msg_NeedSyx(Items, JB_SyxList));
	if ((!(((bool)Arg) and (((bool)Name) and (((bool)Items) and ((bool)ActualNames)))))) {
		JB_Decr(ActualNames);
		JB_Decr(Items);
		JB_Decr(Name);
		JB_Decr(Arg);
		return nil;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
	bool IsClass = SC_SCSelector__HasClassStuff(Arg);
	JB_String* Type = JB_Incr(((JB_String*)JB_Ternary(IsClass, ((JB_String*)Name->Name), ((JB_String*)JB_LUB[1931]))));
	Message* ClassCode = JB_Incr(SC_SCSelector__BuildClassCode(Name->Name, Type));
	if ((!ClassCode)) {
		JB_Decr(ClassCode);
		JB_Decr(Type);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(ActualNames);
		JB_Decr(Items);
		JB_Decr(Name);
		JB_Decr(Arg);
		return nil;
	}
	Message* _tmPf6 = JB_Incr(JB_Msg_FindNested(ClassCode, JB_SyxSThg, JB_LUB[357], true));
	Message* Dot3 = JB_Incr(_tmPf6);
	JB_Decr(_tmPf6);
	JB_Tree_Remove(Items);
	{
		Message* _Valuef4 = JB_Incr(((Message*)JB_Ring_First(ActualNames)));
		while (_Valuef4) {
			Message* _Nf3 = JB_Incr(((Message*)JB_Ring_NextSib(_Valuef4)));
			Message* Line = JB_Incr(_Valuef4);
			Message* Init = nil;
			if (JB_Msg_EqualsSyx(Line, JB_SyxItem, false)) {
				Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_First(Line)));
				JB_SetRef(Line, _tmPf7);
				JB_Decr(_tmPf7);
				JB_SetRef(Init, ((Message*)JB_Ring_NextSib(Line)));
				if (JB_Msg_EqualsSyx(Init, JB_SyxList, false)) {
					Init->Func = JB_SyxPrm;
				}
			}
			if ((!JB_Msg_Expect(Line, JB_SyxThg, nil))) {
				JB_Decr(Init);
				JB_Decr(Line);
				JB_Decr(_Nf3);
				break;
			}
			//using;
			MessagePosition _usingf1 = JB_Msg_SyntaxUsing(Line);
			SC_SCSelector__DeclareOneSel(Line->Name, Type, Dot3);
			SC_SCSelector__LoadOneSel(Line->Name, Name->Name, Dot3, Init);
			JB_Decr(Line);
			JB_Decr(Init);
			JB_MsgPos_SyntaxUsingComplete((&_usingf1));
			JB_SetRef(_Valuef4, _Nf3);
			JB_Decr(_Nf3);
			JB_MsgPos_Destructor((&_usingf1));
		};
		JB_Decr(_Valuef4);
		;
		JB_Decr(Items);
	}
	;
	{
		Message* Ch = JB_Incr(((Message*)JB_Ring_Last(Arg)));
		while (Ch) {
			Message* _tmPf8 = JB_Incr(((Message*)JB_Tree_Get(ClassCode, -1)));
			(JB_Ring_FirstSet(_tmPf8, Ch));
			JB_Decr(_tmPf8);
			JB_SetRef(Ch, ((Message*)JB_Ring_PrevSib(Ch)));
		};
		JB_Decr(Ch);
		;
		JB_Decr(Type);
		JB_Decr(ActualNames);
		JB_Decr(Name);
	}
	;
	JB_Decr(Arg);
	if ((!IsClass)) {
		Message* _tmPf9 = JB_Incr(((Message*)JB_Ring_Parent(Dot3)));
		JB_SetRef(ClassCode, ((Message*)JB_Ring_Parent(_tmPf9)));
		JB_Decr(_tmPf9);
	}
	JB_Tree_Remove(Dot3);
	JB_Decr(Dot3);
	JB_FreeIfDead(SC_Base_CollectSub(Name_space, ClassCode));
	JB_Decr(ClassCode);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return nil;
}

Message* SC_SCSelector__BuildClassCode(JB_String* Name, JB_String* Type) {
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[76]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[128]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[44]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[43]);
	JB_FS_AppendString(_fsf0, Type);
	JB_FS_AppendString(_fsf0, JB_LUB[2071]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[361]);
	JB_FS_AppendString(_fsf0, Type);
	JB_FS_AppendString(_fsf0, JB_LUB[375]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[362]);
	JB_FS_AppendString(_fsf0, Type);
	JB_FS_AppendString(_fsf0, JB_LUB[2072]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[363]);
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	Message* _tmPf1 = JB_Incr(JB_Str_Parse((_tmPf2), JB_SyxArg, true));
	JB_Decr(_tmPf2);
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(_tmPf1)));
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

void SC_SCSelector__DeclareOneSel(JB_String* Sel_name, JB_String* Type, Message* Place) {
	Message* _tmPf0 = JB_Incr(SC_NewDeclWithStrStr(Type, Sel_name));
	(JB_Ring_PrevSibSet(Place, _tmPf0));
	JB_Decr(_tmPf0);
}

Message* SC_SCSelector__FindItems(Message* Arg) {
	return JB_Msg_FindSyxName(Arg, JB_SyxTmp, JB_LUB[1732], true);
}

bool SC_SCSelector__HasClassStuff(Message* Self) {
	bool Rz = false;
	{
		Message* S = JB_Incr(((Message*)JB_Ring_First(Self)));
		while (S) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(S)));
			if ((!((SC_Msg_OperatorIsTmp(S, JB_LUB[1798])) or (SC_Msg_OperatorIsTmp(S, JB_LUB[1732]))))) {
				if (SC_Msg_OperatorIsTmp(S, JB_LUB[1563])) {
					JB_Msg_SyntaxExpect(S, JB_LUB[1210]);
					JB_Decr(_Nf1);
					JB_Decr(S);
					return nil;
				}
				Rz = true;
			}
			JB_SetRef(S, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(S);
		;
	}
	;
	return Rz;
}

void SC_SCSelector__LoadOneSel(JB_String* Sel_name, JB_String* Module_name, Message* LoaderPlace, Message* Prms) {
	JB_Incr(Prms);
	Message* Line = JB_Incr((JB_Syx_Msg(JB_SyxSDot, JB_LUB[1443])));
	Message* _tmPf5 = ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		Message* _tmPf6 = ({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[241])));
			Message* _tmPf7 = ({
				Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxDot, Sel_name)));
				Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Module_name));
				JB_Tree_SyntaxAppend(__imPf2, (_tmPf8));
				JB_Decr(_tmPf8);
				Message* _tmPf9 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
				JB_Tree_SyntaxAppend(__imPf2, (_tmPf9));
				JB_Decr(_tmPf9);
				JB_SafeDecr(nil);
				 __imPf2;
			});
			JB_Tree_SyntaxAppend(__imPf1, _tmPf7);
			JB_Decr(_tmPf7);
			JB_SafeDecr(nil);
			 __imPf1;
		});
		JB_Tree_SyntaxAppend(__imPf0, _tmPf6);
		JB_Decr(_tmPf6);
		Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxStr, Sel_name));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf10));
		JB_Decr(_tmPf10);
		JB_SafeDecr(nil);
		 __imPf0;
	});
	JB_Tree_SyntaxAppend(Line, _tmPf5);
	JB_Decr(_tmPf5);
	(JB_Ring_NextSibSet(LoaderPlace, Line));
	if (Prms) {
		if ((!JB_Msg_EqualsSyx(Prms, JB_SyxPrm, false))) {
			JB_SetRef(Prms, ({
				Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
				JB_Tree_SyntaxAppend(__imPf3, Prms);
				JB_SafeDecr(__imPf3);
				 __imPf3;
			}));
		}
		Message* Line2 = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1932])));
		Message* _tmPf11 = ({
			Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxDot, Sel_name)));
			Message* _tmPf12 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Module_name));
			JB_Tree_SyntaxAppend(__imPf4, (_tmPf12));
			JB_Decr(_tmPf12);
			Message* _tmPf13 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
			JB_Tree_SyntaxAppend(__imPf4, (_tmPf13));
			JB_Decr(_tmPf13);
			JB_SafeDecr(nil);
			 __imPf4;
		});
		JB_Tree_SyntaxAppend(Line2, _tmPf11);
		JB_Decr(_tmPf11);
		JB_Tree_SyntaxAppend(Line2, Prms);
		Message* _tmPf14 = JB_Incr(((Message*)JB_Ring_Parent(Line)));
		JB_Tree_SyntaxAppend(_tmPf14, Line2);
		JB_Decr(Line2);
		JB_Decr(_tmPf14);
	}
	JB_Decr(Line);
	JB_Decr(Prms);
}

SCNode* SC_SCSelector__Neu(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_FreeIfDead(SC_SCSelector__Build(Node, Name_space, ErrPlace));
	JB_SetRef(Node->Name, JB_LUB[1701]);
	return SC__Comp_program;
}


int SC_SCStrings__Init_() {
	{
	}
	;
	return 0;
}

int SC_SCStrings__InitCode_() {
	return 0;
}


void SC_SCTasks__CollectAll() {
	SCClass* T = JB_TypeTask;
	if ((!T)) {
		return;
	}
	{
		Array* _LoopSrcf2 = SC__Comp_TasksTodo;
		int _if0 = 0;
		while (true) {
			Message* Ch = ((Message*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Ch == nil) {
				break;
			}
			SCNode* P = ((SCNode*)Ch->Obj);
			if (P == SC__Comp_program) {
				P = T->Modul;
			}
			 else if (JB_Object_FastIsa(P, &SCClassData)) {
				P = ((SCClass*)((SCClass*)P)->Modul);
			}
			SC_SCTasks__NewTaskActual(Ch, P);
			_if0++;
		};
	};
}

int SC_SCTasks__Init_() {
	{
		JB_SetRef(SC__SCTasks_tmp, JB_Msg_ConstructorEmpty(nil));
		JB_SetRef(SC__SCTasks_TaskMacro, JB_Macro_ConstructorStr(nil, (JB_LUB[11])));
	}
	;
	return 0;
}

int SC_SCTasks__InitCode_() {
	return 0;
}

SCNode* SC_SCTasks__NewTask(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_SetRef(Node->Obj, Name_space);
	JB_Array_SyntaxAppend(SC__Comp_TasksTodo, Node);
	return SC__Comp_program;
}

void SC_SCTasks__NewTaskActual(Message* Node, SCNode* Name_space) {
	Message* Name = JB_Msg_NeedSyxOK(Node, JB_SyxThg, JB_SyxDot);
	if ((!Name)) {
		return;
	}
	Message* Fields = ((Message*)JB_Ring_NextSib(Name));
	if ((JB_Msg_EqualsSyx(Fields, JB_SyxBra, false)) or (JB_Msg_EqualsSyx(Fields, JB_SyxList, false))) {
		Fields->Func = JB_SyxBra;
	}
	 else {
		Fields = JB_Syx_Msg(JB_SyxBra, JB_LUB[0]);
		(JB_Ring_NextSibSet(Name, Fields));
	}
	Message* Arg = ((Message*)JB_Ring_NextSib(Fields));
	if ((!JB_Msg_Expect(Arg, JB_SyxArg, nil))) {
		Arg = JB_Msg_Msg(Node, JB_SyxArg, JB_LUB[0]);
	}
	Message* Supper = ((Message*)JB_Ring_First(Fields));
	JB_Tree_TakeAllFrom(SC__SCTasks_tmp, Fields);
	int Level = 2;
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
	if ((JB_Msg_EqualsSyx(Supper, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(Supper, JB_SyxDot, false))) {
		JB_Tree_SyntaxAppend(Fields, Supper);
		Level = 3;
	}
	 else {
		JB_Msg_AppendSyx(Fields, JB_SyxSDot, JB_LUB[1725]);
	}
	SC_Msg_BuildTask(Arg, Fields, Node, Level);
	JB_Tree_TakeAllFrom(Arg, SC__SCTasks_tmp);
	JB_SetRef(Node->Name, JB_LUB[1902]);
	if (JB_Msg_EqualsSyx(Name, JB_SyxDot, false)) {
		SCModule* P = SC_Base_FindModuleMsg(Name_space, ((Message*)JB_Ring_First(Name)), 0);
		if (P) {
			Name_space = P;
		}
	}
	SCModule* Task = ((SCModule*)SC_Class__NeuRole(Node, Name_space, Node));
	if (Task) {
		JB_Array_SyntaxAppend(SC__Comp_TasksList, Task->Cls);
		Task->Cls->IsRole = Level;
		Task->Parent = Name_space;
		SC_Base_TryAdd(Name_space, Node, Task, Task->Name);
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}


SCNode* SC_SCThe__NewInsertion(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	Message* Name = ((Message*)JB_Tree_Get(Node, 0));
	if (JB_Msg_EqualsSyx(Name, JB_SyxArg, false)) {
		Name = JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[1682]);
		(JB_Ring_FirstSet(Node, Name));
	}
	if ((!JB_Msg_Expect(Name, JB_SyxThg, nil))) {
		return nil;
	}
	if ((!((JB_Msg_SyntaxEquals(Name, JB_LUB[1993], false)) or (JB_Msg_SyntaxEquals(Name, JB_LUB[1682], false))))) {
		JB_Msg_SyntaxExpect(Name, nil);
		return nil;
	}
	Dictionary* D = ({
		Dictionary* _X = ((Dictionary*)JB_Dict_ValueStr(SC__Comp_AdjDicts, Name->Name));
		if ((!_X)) {
			_X = JB_Dict_Constructor(nil);
			(JB_Dict_ValueSet(SC__Comp_AdjDicts, Name->Name, _X));
		}
		 _X;
	});
	{
		Message* _LoopSrcf2 = JB_Msg_NextOf(Name, JB_SyxArg);
		Message* Line = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Line));
			JB_Msg_Expect(Line, JB_SyxTmp, nil);
			Message* Value = JB_Msg_NeedFirst(Line);
			JB_Msg_ExpectLast(Value, JB_LUB[0]);
			Macro* Old = ((Macro*)JB_Dict_ValueStr(D, Line->Name));
			if (Old) {
				if (true) {
					JB_Msg_SyntaxExpect(Line, JB_kNameConf);
				}
			}
			 else {
				(JB_Dict_ValueSet(D, Line->Name, JB_Macro_ConstructorMsg(nil, Value)));
			}
			Line = _Nf1;
		};
		;
	}
	;
	JB_Tree_Remove(Node);
	return SC__Comp_program;
}


void SC_SC_API__DelayedClassAPI(Message* Node, JB_String* Proj) {
	if (JB_Msg_SyntaxEquals(Node, JB_LUB[1482], false)) {
		SC_SC_API__NewAPI(Node, JB_LUB[0], SC__Comp_program, Proj);
		return;
	}
	Message* Name = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxThg));
	if ((!Name)) {
		JB_Decr(Name);
		return;
	}
	Message* _tmPf2 = JB_Incr(JB_Msg_NextOf(Name, JB_SyxBra));
	Message* Partname = JB_Incr(JB_Msg_NeedSyx(_tmPf2, JB_SyxThg));
	JB_Decr(_tmPf2);
	if ((!Partname)) {
		JB_Decr(Partname);
		JB_Decr(Name);
		return;
	}
	Message* Arg = JB_Incr(JB_Msg_Last(Node, JB_SyxArg));
	if ((!Arg)) {
		JB_Decr(Arg);
		JB_Decr(Partname);
		JB_Decr(Name);
		return;
	}
	SCClass* Cls = JB_Incr(SC_Comp__SyntaxAccess(Name));
	JB_Decr(Name);
	if ((!Cls)) {
		JB_Decr(Cls);
		JB_Decr(Arg);
		JB_Decr(Partname);
		return;
	}
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Parent(Partname)));
	JB_Tree_Remove(_tmPf3);
	{
		Message* Ch = JB_Incr(((Message*)JB_Ring_First(Arg)));
		while (Ch) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
			if ((!JB_Msg_Expect(Ch, JB_SyxTmp, JB_LUB[1482]))) {
				JB_Decr(_Nf1);
				JB_Decr(Ch);
				JB_Decr(Cls);
				JB_Decr(Arg);
				JB_Decr(Partname);
				return;
			}
			SC_SC_API__NewAPI(Ch, Partname->Name, Cls, Proj);
			JB_SetRef(Ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(Ch);
		;
		JB_Decr(_tmPf3);
	}
	;
	JB_Decr(Partname);
	JB_Decr(Arg);
	JB_Decr(Cls);
}

void SC_SC_API__NewAPI(Message* Api, JB_String* Part, SCNode* Parent, JB_String* Proj) {
	JB_Incr(Proj);
	JB_Incr(Part);
	JB_SetRef(Proj, JB_Str_OperatorPlus(Proj, JB_LUB[1425]));
	Message* Name = JB_Incr(JB_Msg_NeedSyx(Api, JB_SyxThg));
	if ((!Name)) {
		JB_Decr(Part);
		JB_Decr(Proj);
		JB_Decr(Name);
		return;
	}
	Message* Arg = JB_Incr(JB_Msg_Last(Api, JB_SyxArg));
	if ((!Arg)) {
		JB_Decr(Part);
		JB_Decr(Proj);
		JB_Decr(Arg);
		JB_Decr(Name);
		return;
	}
	Message* Cpp = JB_Incr(JB_Msg_FindSyxName(Arg, JB_SyxTmp, JB_LUB[1573], false));
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Arg);
		if ((!Cpp)) {
			JB_SetRef(Cpp, (JB_Syx_Msg(JB_SyxTmp, JB_LUB[1573])));
			(JB_Ring_FirstSet(Arg, Cpp));
		}
		if (JB_Str_Exists(Part)) {
			JB_SetRef(Part, JB_Str_OperatorPlus(Part, JB_LUB[1425]));
		}
		JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(Part, Name->Name));
		JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(Proj, _tmPf3));
		JB_Decr(_tmPf3);
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, _tmPf2));
		JB_Decr(_tmPf2);
		JB_Tree_SyntaxAppend(Cpp, (_tmPf1));
		JB_Decr(_tmPf1);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Name);
	JB_Decr(Arg);
	JB_Decr(Cpp);
	JB_Decr(Proj);
	JB_Decr(Part);
	SCNode* Fn = JB_Incr(SC_Func__NewFunc(Api, Parent, Api));
	if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
		(SC_SCObject_IsVisibleSet(((SCFunction*)Fn), true));
		JB_Array_SyntaxAppend(SC__Comp_API_Funcs, ((SCFunction*)Fn));
	}
	JB_Decr(Fn);
}

SCNode* SC_SC_API__NewExportAPI(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (Name_space != SC__Comp_program) {
		JB_Msg_SyntaxExpect(ErrPlace, nil);
		return nil;
	}
	SC_SC_API__NewExportAPISub(Node, Name_space);
	JB_Tree_Remove(Node);
	return SC__Comp_program;
}

void SC_SC_API__NewExportAPISub(Message* Node, SCObject* Parent) {
	Message* Name = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxThg));
	if ((!Name)) {
		JB_Decr(Name);
		return;
	}
	Message* Arg = JB_Incr(JB_Msg_NextOf(Name, JB_SyxArg));
	JB_Decr(Name);
	if ((!Arg)) {
		JB_Decr(Arg);
		return;
	}
	Message* Lib_tmp = JB_Incr(JB_Msg_FindSyxName(Arg, JB_SyxTmp, JB_LUB[1751], true));
	if ((!Lib_tmp)) {
		JB_Decr(Lib_tmp);
		JB_Decr(Arg);
		return;
	}
	Message* Lib_name = JB_Incr(JB_Msg_NeedSyx(Lib_tmp, JB_SyxStr));
	JB_Decr(Lib_tmp);
	if ((!Lib_name)) {
		JB_Decr(Lib_name);
		JB_Decr(Arg);
		return;
	}
	if ((!(JB_Msg_SyntaxEquals(Lib_name, SC__Comp_ProjectName, true)))) {
		JB_Decr(Lib_name);
		JB_Decr(Arg);
		return;
	}
	{
		Message* C = JB_Incr(((Message*)JB_Ring_First(Arg)));
		while (C) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(C)));
			if ((JB_Msg_SyntaxEquals(C, JB_LUB[1482], false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[1545], false))) {
				JB_SetRef(C->Obj, Parent);
				JB_Array_SyntaxAppend(SC__Comp_API_List, C);
			}
			 else if ((JB_Msg_SyntaxEquals(C, JB_LUB[1639], false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[1751], false))) {
				if ((!JB_FreeIfDead(JB_Msg_NeedSyx(C, JB_SyxStr)))) {
					JB_Decr(_Nf1);
					JB_Decr(C);
					JB_Decr(Arg);
					return;
				}
			}
			 else {
				if (true) {
					JB_Msg_SyntaxExpect(C, nil);
				}
			}
			JB_SetRef(C, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(C);
		;
		JB_Decr(Lib_name);
	}
	;
	JB_Decr(Arg);
	JB_SetRef(SC__Comp_API_Place, Node);
}


bool SC_Errors__AlreadyIgnored(Message* F) {
	if ((!F)) {
		return nil;
	}
	SCFunction* _tmPf0 = JB_Incr(SC_Msg_MsgOwningFunc(F));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	Message* RipRoot = JB_Incr(SC_Func_SourceArg(_tmPf0));
	{
		Message* Curr = JB_Incr(F);
		while (Curr) {
			if (((JB_Msg_EqualsSyx(Curr, JB_SyxArg, false))) and ((bool)(((Message*)JB_FreeIfDead(({
				JB_String* _tmPf3 = JB_Incr(JB_Obj_DictName(Curr));
				Message* _tmPf2 = JB_Incr(((Message*)JB_Dict_ValueStr(SC__Errors_IgnoredBranches, _tmPf3)));
				JB_Decr(_tmPf3);
				JB_SafeDecr(_tmPf2);
				 _tmPf2;
			})))))) {
				JB_Decr(Curr);
				JB_Decr(RipRoot);
				return true;
			}
			if (Curr == RipRoot) {
				JB_Decr(Curr);
				JB_Decr(RipRoot);
				return nil;
			}
			JB_SetRef(Curr, ((Message*)JB_Ring_Parent(Curr)));
		};
		JB_Decr(Curr);
		;
		JB_Decr(_tmPf0);
	}
	;
	JB_Decr(RipRoot);
	return false;
}

int SC_Errors__Init_() {
	{
		JB_SetRef(SC__Errors_IgnoredBranches, JB_Dict_Constructor(nil));
	}
	;
	return 0;
}

int SC_Errors__InitCode_() {
	return 0;
}

bool SC_Errors__SyntaxAccess(JB_Error* Err) {
	if (JB_Err_SyntaxIs(Err, kJB__ErrorFlags_DontStrip)) {
		return true;
	}
	if ((!Err->Node) or JB_Err_IsWarning(Err)) {
		return true;
	}
	Message* A = JB_Incr(JB_Msg_Ancestor(Err->Node, JB_SyxArg));
	if (A) {
		if (SC__Options_HideMultipleErrors) {
			if (SC_Errors__AlreadyIgnored(A)) {
				JB_Decr(A);
				return nil;
			}
		}
		JB_String* _tmPf0 = JB_Incr(JB_Obj_DictName(A));
		(JB_Dict_ValueSet(SC__Errors_IgnoredBranches, _tmPf0, A));
		JB_Decr(_tmPf0);
	}
	JB_Decr(A);
	return true;
}


void SC_Sav__BugWorkAround() {
	//visible;
	FP_SaverLoadClass Whatever = nil;
}

void SC_Sav__TestSaver() {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	Array* R = JB_Incr(JB_Array_Constructor0(nil));
	int N = 5;
	{
		int I = 0;
		while (I < N) {
			SavingTest* S = JB_Incr(SC_SavingTest_Constructor(nil, I));
			if ((!I)) {
				JB_SetRef(S->Name, JB_LUB[0]);
			}
			JB_Array_SyntaxAppend(R, S);
			JB_Array_SyntaxAppend(R, S);
			JB_Decr(S);
			I++;
		};
	}
	;
	JB_Array_SyntaxAppend(R, JB_LUB[1688]);
	JB_String* Path = JB_Incr(SC_Ext__TmpBase(JB_LUB[1209]));
	JB_File* F = JB_Incr(JB_Str_AsFile(Path));
	JB_Decr(Path);
	JB_Sav_SaveToFile(R, F);
	Message* _tmPf2 = JB_Incr(JB_File_Parse(F, 16777216, false));
	JB_Decr(F);
	JB_Object* R2 = JB_Incr(JB_Msg_RestoreLoad(_tmPf2));
	if (JB_Object_Isa(R2, &ArrayData)) {
		JB_FreeIfDead(JB_Array_Pop(R));
		JB_Object* Last = JB_Incr(JB_Array_Pop(((Array*)R2)));
		if ((!(((bool)Last) and ((JB_Object_Isa(Last, &JB_StringData)) and ((JB_Str_Equals(((JB_String*)Last), JB_LUB[1688], false))))))) {
			JB_Object_SyntaxExpect(nil);
			JB_Decr(Last);
			JB_Decr(R2);
			JB_Decr(_tmPf2);
			JB_Decr(R);
			return;
		}
		JB_Decr(Last);
		if (JB_Array_Size(((Array*)R2)) != JB_Array_Size(R)) {
			JB_Object_SyntaxExpect(nil);
			JB_Decr(R2);
			JB_Decr(_tmPf2);
			JB_Decr(R);
			return;
		}
		{
			int I = 0;
			while (I < N) {
				JB_Object* _tmPf3 = JB_Incr(JB_Array_Value(R, I));
				JB_Object* _tmPf4 = JB_Incr(JB_Array_Value(((Array*)R2), I));
				if ((!SC_SavingTest__IsEqual(_tmPf3, _tmPf4))) {
					JB_Object_SyntaxExpect(nil);
					JB_Decr(_tmPf4);
					JB_Decr(_tmPf3);
					JB_Decr(R2);
					JB_Decr(_tmPf2);
					JB_Decr(R);
					return;
				}
				JB_Decr(_tmPf3);
				JB_Decr(_tmPf4);
				I++;
			};
		};
	}
	 else {
		if (true) {
			JB_Str_SyntaxExpect(JB_LUB[1205]);
		}
	}
	JB_Decr(R);
	JB_Decr(R2);
	JB_Decr(_tmPf2);
}


int SC_SC_Targets__Init_() {
	{
		JB_SetRef(SC__SC_Targets_Items, JB_Dict_Constructor(nil));
	}
	;
	return 0;
}

int SC_SC_Targets__InitCode_() {
	return 0;
}

bool SC_SC_Targets__SyntaxAccess(JB_String* Name) {
	JB_String* _tmPf0 = JB_Incr(((JB_String*)JB_Dict_ValueLower(SC__SC_Targets_Items, Name)));
	bool _tmPf1 = JB_Str_Yes(_tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

void SC_SC_Targets__SyntaxAccessSet(JB_String* Name, bool Value) {
	JB_String* _tmPf0 = JB_Incr(JB_bool_Render0(Value));
	(JB_Dict_ValueLowerSet(SC__SC_Targets_Items, Name, _tmPf0));
	JB_Decr(_tmPf0);
}


ErrorInt JB_Main() {
	(JB_App__ConfigureSet(JB___AppConfString));
	//visible;
	SC_Comp__SetupEnv();
	SC_Comp__MiniTests();
	SC_Comp__Main();
	SC_Comp__PrintResults();
	return 0;
}


void SC_Crkt__CollectString(Message* M, bool StdLib) {
	if (SC__Options_ModePack and (!SC__Options_ModeCpp)) {
		if (StdLib) {
			return;
		}
	}
	MessageID** P = ((MessageID**)JB_Dict_MakePlace(SC__Crkt_Table2, M->Name));
	MessageID* I = ((MessageID*)((*P)));
	if (I == nil) {
		I = SC_Crkt__NewID(M->Name);
		JB_SetRef((*P), I);
	}
	JB_SetRef(M->Name, I);
}

void SC_Crkt__Correct() {
	SC_Crkt__CorrectConsts();
	SC_Crkt__CorrectStrings();
}

void SC_Crkt__CorrectConsts() {
	{
		Array* _LoopSrcf2 = SC__Comp_DeclConstants;
		int _if0 = 0;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (D == nil) {
				break;
			}
			Message* Def = D->Default;
			if (Def) {
				SC_Crkt__CollectString(Def, SC_Decl_IsStdLib(D));
			}
			_if0++;
		};
	};
}

void SC_Crkt__CorrectFile(JB_File* Where) {
	if (SC__Options_PrintCompileString) {
		JB_PrintLine(Where);
	}
	bool HasAnything = false;
	Message* M = JB_Incr(JB_File_Parse(Where, 4194304, true));
	if (M) {
		HasAnything = JB_Ring_HasChildren(M);
		Dictionary* _tmPf0 = JB_Incr(JB_Msg_Dict(M, true));
		SC_Crkt__MergeTable(M, _tmPf0);
		JB_Decr(_tmPf0);
	}
	SC_Crkt__IDSort(HasAnything);
	FastString* Fs = JB_Incr(JB_Str_Out(Where, true));
	if (Fs) {
		SC_Crkt__WriteTable(Fs);
	}
	JB_Decr(Fs);
	JB_Decr(M);
}

void SC_Crkt__CorrectStrings() {
	JB_File* _tmPf1 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_File* _tmPf0 = JB_Incr(JB_File_SyntaxAccess(_tmPf1, JB_LUB[1969]));
	JB_Decr(_tmPf1);
	SC_Crkt__CorrectFile(_tmPf0);
	JB_Decr(_tmPf0);
}

int SC_Crkt__Count() {
	return JB_Array_Size(SC__Crkt_List);
}

void SC_Crkt__IDSort(bool IDOrder) {
	if (IDOrder) {
		JB_Array_Sort(SC__Crkt_List, (&JB_ID__IDSorter), false);
	}
	 else {
		JB_Array_Sort(SC__Crkt_List, (&JB_Str__Sorter), false);
		{
			Array* _LoopSrcf2 = SC__Crkt_List;
			int _if0 = 0;
			while (true) {
				MessageID* S = ((MessageID*)JB_Array_Value(_LoopSrcf2, _if0));
				if (S == nil) {
					break;
				}
				int I = _if0;
				S->ID = I;
				_if0++;
			};
		};
	}
}

int SC_Crkt__Init_() {
	{
		JB_SetRef(SC__Crkt_Table2, JB_Dict_Constructor(nil));
		JB_SetRef(SC__Crkt_List, JB_Array_Constructor0(nil));
		SC__Crkt_TotalSize = 0;
	}
	;
	return 0;
}

int SC_Crkt__InitCode_() {
	return 0;
}

void SC_Crkt__MergeTable(Message* Disk, Dictionary* D3) {
	//visible;
	int NextID = 0;
	Message* Dl = ((Message*)JB_Ring_Last(Disk));
	if (Dl) {
		NextID = (Dl->Position + 1);
	}
	if (JB_Ring_HasChildren(Disk)) {
		{
			Array* _LoopSrcf2 = SC__Crkt_List;
			int _if0 = 0;
			while (true) {
				MessageID* S = ((MessageID*)JB_Array_Value(_LoopSrcf2, _if0));
				if (S == nil) {
					break;
				}
				SC_Crkt__UseID(S, ((Message*)JB_Dict_ValueStr(D3, S)));
				_if0++;
			};
		};
	}
	{
		Array* _LoopSrcf5 = SC__Crkt_List;
		int _if3 = 0;
		while (true) {
			MessageID* S = ((MessageID*)JB_Array_Value(_LoopSrcf5, _if3));
			if (S == nil) {
				break;
			}
			if ((S->Func != JB_SyxNum) and (!SC_Crkt__UseID(S, ((Message*)JB_Ring_First(Disk))))) {
				S->ID = NextID++;
			}
			_if3++;
		};
	};
}

MessageID* SC_Crkt__NewID(JB_String* Name) {
	MessageID* Rz = JB_Incr(((MessageID*)nil));
	JB_SetRef(Rz, JB_ID_Constructor(nil, Name, JB_SyxStr, SC_Crkt__Count()));
	JB_Array_SyntaxAppend(SC__Crkt_List, Rz);
	SC__Crkt_TotalSize = (SC__Crkt_TotalSize + (JB_Str_Length(Name) + 1));
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Crkt__UseID(MessageID* S, Message* Old) {
	if ((!Old)) {
		return nil;
	}
	int OldID = Old->Position;
	if (OldID >= SC_Crkt__Count()) {
		return nil;
	}
	if ((!JB_Msg_Length(Old)) != (!OldID)) {
		JB_Msg_SyntaxExpect(Old, JB_LUB[937]);
		return nil;
	}
	S->ID = OldID;
	S->Func = JB_SyxNum;
	JB_Tree_Remove(Old);
	return true;
}

void SC_Crkt__WriteTable(FastString* Fs) {
	{
		Array* _LoopSrcf2 = SC__Crkt_List;
		int _if0 = 0;
		while (true) {
			MessageID* S = ((MessageID*)JB_Array_Value(_LoopSrcf2, _if0));
			if (S == nil) {
				break;
			}
			JB_FS_AppendQuotedEscape(Fs, S);
			JB_FS_AppendByte(Fs, '\n');
			_if0++;
		};
	};
}


void JB_Terminal__Display() {
	Date Now = JB_Date__Now();
	if (JB__Terminal_LastDisplay) {
		JB_Date__Sleep((JB__Terminal_LastDisplay + (65536.0 / 60)) - Now);
	}
	 else {
		JB_PrintLine(JB_LUB[98]);
	}
	JB__Terminal_LastDisplay = Now;
	JB_PrintLine(JB_LUB[97]);
	JB_String* _tmPf0 = JB_Incr(JB_Terminal__Flat());
	JB_Str_Print(_tmPf0);
	JB_Decr(_tmPf0);
}

void JB_Terminal__DrawRect(ivec4 Rect, JB_String* Inside, TerminalColor Colors) {
	ivec4 R2 = Rect + ivec4{1, 1, -2, -2};
	{
		ivec2 S = ivec2{Rect[0], Rect[1]};
		while (S[1] < Rect[3]) {
			while (S[0] < Rect[2]) {
				JB_String* C = JB_Incr(Inside);
				bool X = JB_ivec2_OperatorContains(ivec2{R2[0], R2[2]}, S[0]);
				bool Y = JB_ivec2_OperatorContains(ivec2{R2[1], R2[3]}, S[1]);
				if ((!X) and (!Y)) {
					JB_SetRef(C, JB_LUB[297]);
				}
				 else if ((!X) and Y) {
					JB_SetRef(C, JB_LUB[2068]);
				}
				 else if ((!Y) and X) {
					JB_SetRef(C, JB_LUB[306]);
				}
				JB_Terminal__SyntaxAppend(C, S, 0);
				JB_Decr(C);
				S[0]++;
			};
			S = ivec2{Rect[0], S[1] + 1};
		};
	};
}

JB_String* JB_Terminal__Flat() {
	FastString* F = ({
		FastString* _X = JB__Terminal_fs;
		if ((!_X)) {
			_X = JB_FS_Constructor(nil);
			JB_SetRef(JB__Terminal_fs, _X);
		}
		 _X;
	});
	int PrevCol = 0;
	{
		Array* _LoopSrcf3 = JB__Terminal_Screen;
		int _if1 = 0;
		while (true) {
			Array* Line = ((Array*)JB_Array_Value(_LoopSrcf3, _if1));
			if (Line == nil) {
				break;
			}
			{
				Array* _LoopSrcf6 = ((Array*)Line);
				int _if4 = 0;
				while (true) {
					TerminalCell* Cell = ((TerminalCell*)JB_Array_Value(_LoopSrcf6, _if4));
					if (Cell == nil) {
						break;
					}
					int CCol = Cell->Color;
					if (PrevCol != CCol) {
						PrevCol = CCol;
						//;
						JB_FS_AppendString(F, JB_LUB[96]);
						JB_FS_AppendInt32(F, CCol);
						JB_FS_AppendByte(F, 'm');
						//;
					}
					JB_FS_AppendString(F, Cell->Text);
					JB_SetRef(Cell->Text, JB_LUB[99]);
					_if4++;
				};
			}
			;
			JB_FS_AppendByte(F, '\n');
			_if1++;
		};
	}
	;
	return JB_FS_GetResult(F);
}

void JB_Terminal__FrameText(JB_String* S, ivec4 Frame, TerminalColor FrameCol, TerminalColor TextCol) {
	JB_Incr(S);
	JB_Terminal__init();
	JB_SetRef(S, JB_Str_Wrap(S, JB_ivec4_Width(Frame) - 2, nil));
	ivec2 P = ivec2{Frame[0], Frame[1]} + 1;
	{
		ivec4 _LoopSrcf1 = JB_ivec4_Shrink(Frame, 1);
		ivec2 I = ivec2{_LoopSrcf1[0], _LoopSrcf1[1]};
		while (I[1] < _LoopSrcf1[3]) {
			while (I[0] < _LoopSrcf1[2]) {
				Array* Row = JB_Incr(((Array*)JB_Array_Value(JB__Terminal_Screen, I[1])));
				if (JB_Array_SyntaxCast(Row)) {
					TerminalCell* _tmPf5 = JB_Incr(JB_TerminalCell_ConstructorAuto(nil, 0, JB_LUB[99]));
					(JB_Array_ValueSet(Row, I[0], _tmPf5));
					JB_Decr(_tmPf5);
				}
				JB_Decr(Row);
				I[0]++;
			};
			I = ivec2{_LoopSrcf1[0], I[1] + 1};
		};
	}
	;
	{
		int _Prevf2 = 0;
		while (JB_Str_Exists(S)) {
			Ind _Curr_f3 = JB_Str_Find(S, JB__Constants_CSLine, _Prevf2, JB_int__Max());
			JB_String* L = JB_Incr(JB_Str_Range(S, _Prevf2, _Curr_f3));
			JB_Terminal__SyntaxAppend(L, P, TextCol);
			JB_Decr(L);
			P[1]++;
			_Prevf2 = (_Curr_f3 + 1);
			if ((!JB_Ind_SyntaxCast(_Curr_f3))) {
				break;
			}
		};
	}
	;
	JB_Decr(S);
	JB_Terminal__DrawRect(Frame, JB_LUB[0], FrameCol);
}

void JB_Terminal__init() {
	if (JB_Array_SyntaxCast(JB__Terminal_Screen)) {
		return;
	}
	{
		int _Valuef1 = 0;
		while (_Valuef1 < kJB__Terminal_h) {
			Array* S = JB_Incr((JB_Array_Constructor0(nil)));
			JB_Array_SyntaxAppend(JB__Terminal_Screen, S);
			{
				int _Valuef3 = 0;
				while (_Valuef3 < kJB__Terminal_w) {
					TerminalCell* _tmPf4 = JB_Incr(JB_TerminalCell_ConstructorAuto(nil, 0, JB_LUB[99]));
					JB_Array_SyntaxAppend(S, _tmPf4);
					JB_Decr(_tmPf4);
					_Valuef3++;
				};
			}
			;
			JB_Decr(S);
			_Valuef1++;
		};
	};
}

int JB_Terminal__Init_() {
	{
		JB_SetRef(JB__Terminal_Screen, JB_Array_Constructor0(nil));
		JB__Terminal_LastDisplay = 0;
	}
	;
	return 0;
}

int JB_Terminal__InitCode_() {
	return 0;
}

ivec2 JB_Terminal__Size() {
	return ivec2{kJB__Terminal_w, kJB__Terminal_h};
}

void JB_Terminal__SyntaxAppend(JB_String* Text, ivec2 V, TerminalColor Colors) {
	JB_Terminal__init();
	int X0 = V[0];
	{
		byte* _Startf0 = Text->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(Text);
		while (_Startf0 < _Endf1) {
			Codepoint _cf2 = JB_u8p_Read((&_Startf0));
			Codepoint C = (_cf2);
			if ((C == 10) or (C == 13)) {
				V[1]++;
				V[0] = X0;
			}
			 else if (C == ' ') {
				V[0]++;
			}
			 else if (JB_ivec2_OperatorInrange(V, JB_Terminal__Size()) and (C != ' ')) {
				if (C == 127) {
					C = ' ';
				}
				Array* Row = JB_Incr(((Array*)JB_Array_Value(JB__Terminal_Screen, V[1])));
				if (JB_Array_SyntaxCast(Row)) {
					JB_String* _tmPf5 = JB_Incr(JB_CP_SyntaxCast(C));
					TerminalCell* _tmPf4 = JB_Incr(JB_TerminalCell_ConstructorAuto(nil, Colors, _tmPf5));
					JB_Decr(_tmPf5);
					(JB_Array_ValueSet(Row, V[0], _tmPf4));
					JB_Decr(_tmPf4);
				}
				JB_Decr(Row);
				V[0]++;
			}
		};
	};
}

void JB_Terminal__SyntaxExpect(JB_String* Msg) {
	JB_PrintLine(JB_LUB[30]);
	if (JB_Str_Exists(Msg)) {
		JB_PrintLine(Msg);
	}
}


void SC_TextAssembler__Assemble(Message* Msg) {
	{
		Message* Ch = ((Message*)JB_Ring_First(Msg));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			if (SC_Msg_OperatorIsTmp(Ch, JB_LUB[1494])) {
				SC_TextAssembler__TextFunc(Ch);
			}
			 else if (SC_Msg_OperatorIsTmp(Ch, JB_LUB[1583])) {
				SC_TextAssembler__TextData(Ch);
			}
			Ch = _Nf1;
		};
		;
	};
}

int SC_TextAssembler__Init_() {
	{
	}
	;
	return 0;
}

int SC_TextAssembler__InitCode_() {
	return 0;
}

void SC_TextAssembler__TextData(Message* Msg) {
}

bool SC_TextAssembler__TextFunc(Message* Msg) {
	SCFunction* Fn = JB_Incr(SC_Func_Constructor(nil, nil));
	JB_SetRef(Fn->Source, Msg);
	SC_flat_InitState((&SC__TreeAssembler_StdState), Fn);
	bool Arg = SC_flat_TextFuncSub((&SC__TreeAssembler_StdState), Msg);
	if (Arg) {
		(JB_Dict_ValueSet(SC__Comp_ExportNames, Fn->ExportName, Fn));
	}
	JB_Decr(Fn);
	SC_flat_FinishASM((&SC__TreeAssembler_StdState));
	JB_Dict_Dispose(SC__TextAssembler_LabelsToDo);
	return false;
}


bool SC_Ext__AllowedThisFile(JB_String* Name) {
	if ((!SC__Options_ProjectIsMiniLib)) {
		return true;
	}
	if ((JB_Str_Equals(Name, JB_LUB[964], true)) or ((JB_Str_Equals(Name, JB_LUB[966], true)) or ((JB_Str_Equals(Name, JB_LUB[974], true)) or ((JB_Str_Equals(Name, JB_LUB[954], true)) or ((JB_Str_Equals(Name, JB_LUB[953], true)) or (JB_Str_Equals(Name, JB_LUB[949], true))))))) {
		return false;
	}
	return true;
}

bool SC_Ext__BackupCompiler() {
	JB_File* Product = JB_Incr(SC_Comp__ProductFile());
	JB_String* _tmPf0 = JB_Incr(SC_Ext__BackupPath());
	JB_File* B = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_Str_MakeEntirePath(B, true);
	JB_File* _tmPf1 = JB_Incr(JB_File_SyntaxAccess(B, JB_LUB[988]));
	JB_File* Backup1 = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (JB_File_FileCompare(Backup1, Product, JB_LUB[0])) {
		JB_Decr(Backup1);
		JB_Decr(B);
		JB_Decr(Product);
		return true;
	}
	SC_Ext__ReplaceOld(Product, B);
	JB_Str_CopyFileTo(Product, Backup1, false);
	JB_Decr(Backup1);
	JB_String* DailyProduct = JB_Incr(SC_Ext__MakeDailyProductPath(B));
	JB_Decr(B);
	JB_String* Path = JB_Incr(JB_Str_TrimExtAndPath(DailyProduct, true));
	JB_Str_CopyFileTo(Product, DailyProduct, false);
	JB_Decr(Product);
	JB_Decr(DailyProduct);
	JB_File* _tmPf2 = JB_Incr(SC_Cpp__CppProduct());
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(Path, JB_LUB[366]));
	JB_File_CopyAll(_tmPf2, _tmPf3, false);
	JB_Decr(_tmPf2);
	JB_Decr(_tmPf3);
	JB_File* _tmPf4 = JB_Incr(SC_Cpp__HProduct());
	JB_String* _tmPf5 = JB_Incr(JB_Str_OperatorPlus(Path, JB_LUB[371]));
	JB_Decr(Path);
	JB_File_CopyAll(_tmPf4, _tmPf5, false);
	JB_Decr(_tmPf4);
	JB_Decr(_tmPf5);
	return JB_Rec_OK(JB_StdErr);
}

JB_String* SC_Ext__BackupPath() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_String* _tmPf1 = JB_Incr(JB_Str_Child(_tmPf0, JB_LUB[1270]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool SC_Ext__CanCompile(JB_String* Name) {
	return ({
		JB_String* _tmPf1 = JB_Incr(JB_Str_Ext(Name));
		bool _tmPf0 = SC_Str_isCLike(_tmPf1);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}) and SC_Ext__AllowedThisFile(Name);
}

bool SC_Ext__Clean() {
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(JB_LUB[419]));
	JB_File_DeleteAll(_tmPf0);
	JB_Decr(_tmPf0);
	JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(JB_LUB[421]));
	JB_File_DeleteAll(_tmPf1);
	JB_Decr(_tmPf1);
	return JB_Rec_OK(JB_StdErr);
}

void SC_Ext__ClearThis() {
	if (JB_Rec_OK(JB_StdErr)) {
		{
			Array* _LoopSrcf2 = JB_Incr(SC__Ext_Cleanup);
			int _if0 = 0;
			while (true) {
				JB_File* F = JB_Incr(((JB_File*)JB_Array_Value(_LoopSrcf2, _if0)));
				if (F == nil) {
					JB_Decr(F);
					break;
				}
				JB_File_DeleteAll(F);
				JB_Decr(F);
				_if0++;
			};
			JB_Decr(_LoopSrcf2);
		};
	}
	JB_Array_Clear(SC__Ext_Cleanup);
	JB_Array_Clear(SC__Ext_FoundObjects);
}

bool SC_Ext__CollectAndCompile(JB_File* Input, JB_String* Output) {
	JB_File* TmpFol = JB_Incr(SC_Str_MakeAndGoInto(Output));
	Array* Cpps = JB_Incr(SC_Ext__CollectCppsInto(Input, TmpFol, nil));
	JB_Decr(TmpFol);
	bool _tmPf0 = SC_Ext__TransCompileWrap(Cpps);
	JB_Decr(Cpps);
	return _tmPf0;
}

Array* SC_Ext__CollectCppsInto(JB_File* Fol, JB_File* Objects, int* Stdafx) {
	Array* Cpps = JB_Incr(JB_Array_Constructor0(nil));
	{
		Array* _LoopSrcf2 = JB_Incr(JB_File_List(Fol, false));
		int _if0 = 0;
		while (true) {
			JB_String* Name = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (Name == nil) {
				JB_Decr(Name);
				break;
			}
			if (SC_Ext__CanCompile(Name)) {
				JB_String* _tmPf4 = JB_Incr(JB_File_Path(Fol));
				JB_String* _tmPf3 = JB_Incr(JB_Str_Child(_tmPf4, Name));
				JB_Decr(_tmPf4);
				JB_Array_SyntaxAppend(Cpps, _tmPf3);
				JB_Decr(_tmPf3);
			}
			JB_Decr(Name);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	Array* _tmPf5 = JB_Incr(SC_Ext__FilterCppsIfAlreadyDone(Cpps, Objects, Stdafx));
	JB_Decr(Cpps);
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

void SC_Ext__CollectPico() {
	JB_File* OfficialLocation = JB_Incr(JB_Str_AsFile(JB_LUB[431]));
	if ((!JB_File_Exists(OfficialLocation, false))) {
		JB_Decr(OfficialLocation);
		return;
	}
	JB_File* SpdLocation = JB_Incr(JB_Str_AsFile(JB_LUB[434]));
	if (JB_File_Exists(SpdLocation, false)) {
		JB_File_Delete(SpdLocation);
	}
	JB_StringC* _tmPf0 = JB_Incr(JB_Str_CastZero(SpdLocation));
	JB_Decr(SpdLocation);
	JB_File_HardLinkTo(OfficialLocation, _tmPf0);
	JB_Decr(OfficialLocation);
	JB_Decr(_tmPf0);
}

JB_File* SC_Ext__CppLib() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* _tmPf1 = JB_Incr(JB_Str_ChildFile(_tmPf0, JB_LUB[994]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Array* SC_Ext__CreateCompileString(Array* FileList, JB_String* Product, JB_String* Type) {
	Array* Rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	if ((!SC_Ext__HasType(FileList, Type))) {
		JB_Decr(Rz);
		return nil;
	}
	SC_Array_AppendWords(Rz, Product);
	{
		int _if3 = 0;
		while (true) {
			JB_File* F = JB_Incr(((JB_File*)JB_Array_Value(FileList, _if3)));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			if (JB_Str_OperatorIsa(F, Type)) {
				JB_Array_SyntaxAppend(Rz, F);
				JB_File_RelaxPath(F, true);
			}
			JB_Decr(F);
			_if3++;
		};
	}
	;
	JB_String* Cmode = JB_Incr(JB_LUB[351]);
	if ((JB_Str_Equals(Type, JB_LUB[1770], false)) or ((JB_Str_Equals(Type, JB_LUB[1833], false)) or (JB_Str_Equals(Type, JB_LUB[1793], false)))) {
		if (JB_Str_Equals(Type, JB_LUB[1793], false)) {
			JB_SetRef(Cmode, JB_Str_OperatorPlus(Cmode, JB_LUB[146]));
		}
		 else {
			JB_SetRef(Cmode, JB_LUB[0]);
		}
		if (JB_Platform__OSX()) {
			JB_SetRef(Cmode, JB_Str_OperatorPlus(Cmode, JB_LUB[341]));
		}
	}
	SC_Array_AppendWords(Rz, Cmode);
	JB_Decr(Cmode);
	JB_String* Spdroot = JB_Incr(SC_Comp__FindSpeedieRoot());
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[330]);
	JB_FS_AppendString(_fsf0, Spdroot);
	JB_FS_AppendString(_fsf0, JB_LUB[406]);
	JB_String* _tmPf5 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	SC_Array_AppendWords(Rz, _tmPf5);
	JB_Decr(_tmPf5);
	SC_Array_AppendWords(Rz, JB_LUB[331]);
	SC_Array_AppendWords(Rz, JB_LUB[329]);
	if (JB_Platform__OSX()) {
		SC_Array_AppendWords(Rz, JB_LUB[328]);
		if (SC_SC_Targets__SyntaxAccess(JB_LUB[1686]) or SC_Linkage__Interpreter()) {
			SC_Array_AppendWords(Rz, JB_LUB[348]);
		}
		FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf1, JB_LUB[349]);
		JB_FS_AppendString(_fsf1, Spdroot);
		JB_FS_AppendString(_fsf1, JB_LUB[407]);
		JB_String* _tmPf6 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		SC_Array_AppendWords(Rz, _tmPf6);
		JB_Decr(_tmPf6);
	}
	JB_Decr(Spdroot);
	SC_Array_AppendWords(Rz, JB_LUB[352]);
	SC_Array_AppendWords(Rz, JB_LUB[340]);
	SC_Array_AppendWords(Rz, JB_LUB[143]);
	JB_String* _tmPf8 = JB_Incr(JB_Platform());
	JB_String* _tmPf7 = JB_Incr(SC_Linkage__CombineFlags(_tmPf8));
	JB_Decr(_tmPf8);
	SC_Array_AppendWords(Rz, _tmPf7);
	JB_Decr(_tmPf7);
	if (JB_Platform__Lin()) {
		SC_Array_AppendWords(Rz, JB_LUB[144]);
	}
	SC_Array_AppendWords(Rz, JB_LUB[339]);
	if ((!JB_Platform__OSX())) {
		SC_Array_AppendWords(Rz, JB_LUB[347]);
	}
	 else if ((bool)SC__Ext_CompilingLibFiles) {
		SC_Ext__MacBothArch(Rz);
	}
	 else if (JB_Str_Equals(SC__Options_Arch, JB_LUB[1723], true)) {
		if (SC__Options_Optimise >= 3) {
			SC_Array_AppendWords(Rz, JB_LUB[145]);
		}
	}
	 else if ((!JB_Platform__CPU_Intel())) {
		SC_Ext__MacBothArch(Rz);
	}
	SC_Array_AppendWords(Rz, JB_LUB[338]);
	byte Opt = SC__Options_Optimise;
	bool Aslib = SC__Options_MakeLib or SC__Options_ProjectIsLibrary;
	if (Aslib) {
		SC_Array_AppendWords(Rz, JB_LUB[336]);
		Opt = 3;
	}
	if (SC__Options_SelfReplacement or Aslib) {
		SC_Array_AppendWords(Rz, JB_LUB[342]);
	}
	if (Opt < 0) {
		SC_Array_AppendWords(Rz, JB_LUB[139]);
	}
	 else if (Opt >= 1) {
		SC_Array_AppendWords(Rz, JB_LUB[140]);
		if (JB_Str_Equals(SC__Options_Arch, JB_LUB[1723], true)) {
			SC_Array_AppendWords(Rz, JB_LUB[345]);
		}
		if (Opt >= 2) {
			SC_Array_AppendWords(Rz, JB_LUB[142]);
		}
	}
	if (SC__Options_ProjectIsMiniLib) {
		SC_Array_AppendWords(Rz, JB_LUB[327]);
	}
	JB_File* Cppl = JB_Incr(SC_Ext__CppLib());
	JB_File* Cbf = JB_Incr(SC_Comp__BuildFolder());
	JB_File* Cgcf = JB_Incr(SC_Comp__GeneratedCppsFolder());
	FastString* _fsf2 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf2, JB_LUB[112]);
	JB_FS_AppendString(_fsf2, Cppl);
	JB_Decr(Cppl);
	JB_FS_AppendString(_fsf2, JB_LUB[114]);
	JB_FS_AppendString(_fsf2, Cbf);
	JB_Decr(Cbf);
	JB_FS_AppendString(_fsf2, JB_LUB[138]);
	JB_FS_AppendString(_fsf2, Cgcf);
	JB_Decr(Cgcf);
	JB_FS_AppendString(_fsf2, JB_LUB[106]);
	JB_String* _tmPf9 = JB_Incr(JB_FS_GetResult(_fsf2));
	JB_Decr(_fsf2);
	SC_Array_AppendWords(Rz, _tmPf9);
	JB_Decr(_tmPf9);
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Ext__ExecuteGCC(Array* Commands) {
	if (JB_Err2_SyntaxCast(JB_Str_Execute(SC__Ext_CppCompilerPath, Commands, nil, nil, true))) {
		return true;
	}
	if (true) {
		JB_String* _tmPf1 = JB_Incr(JB_Array_join(Commands, JB_LUB[99]));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[679], _tmPf1));
		JB_Decr(_tmPf1);
		JB_Str_SyntaxExpect(_tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Str_Execute(SC__Ext_CppCompilerPath, Commands, nil, nil, true);
	return false;
}

void SC_Ext__ExportAndInstall(bool CanInstall) {
	if (SC_Ext__ShouldTransComp() and (SC__Options_ModeCpp)) {
		if (SC__Options_ModeCpp) {
			({
				JB__Flow_Disabled++;
				(SC_Ext__RunCppCompile());
				JB__Flow_Disabled--;
				 0;
			});
			if (CanInstall and SC_Ext__IsCompilerAndNeedsInstall()) {
				SC_Ext__InstallCompiler();
			}
		}
		({
			JB__Flow_Disabled++;
			(SC_Ext__ClearThis());
			JB__Flow_Disabled--;
			 0;
		});
		if (JB_Rec_OK(JB_StdErr)) {
			SC_Comp__Bundle();
		}
	}
	if (JB_Rec_OK(JB_StdErr) and (!SC__Options_Scripting)) {
		SC_Ext__PrintProduct(JB_LUB[1143]);
	}
}

Array* SC_Ext__FilterCppsIfAlreadyDone(Array* Cpps, JB_File* Objects, int* Stdafx) {
	Array* Rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	JB_File* Wierd = JB_Incr(SC_Cpp__CppProduct());
	{
		int _if0 = 0;
		while (true) {
			JB_String* Cpp = JB_Incr(((JB_String*)JB_Array_Value(Cpps, _if0)));
			if (Cpp == nil) {
				JB_Decr(Cpp);
				break;
			}
			int Reason = SC_Ext__NeedNewObjForSrc(Cpp, Objects);
			if (Reason) {
				JB_File* _tmPf2 = JB_Incr(JB_Str_AsFile(Cpp));
				JB_Array_SyntaxAppend(Rz, _tmPf2);
				JB_Decr(_tmPf2);
				if ((Reason == 4) and ((bool)Stdafx)) {
					(*Stdafx) = 1;
				}
			}
			JB_Decr(Cpp);
			_if0++;
		};
		JB_Decr(Wierd);
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Ext__HasType(Array* CppList, JB_String* Type) {
	{
		int _if0 = 0;
		while (true) {
			JB_File* F = ((JB_File*)JB_Array_Value(CppList, _if0));
			if (F == nil) {
				break;
			}
			if (JB_Str_OperatorIsa(F, Type)) {
				return true;
			}
			_if0++;
		};
	}
	;
	return false;
}

int SC_Ext__Init_() {
	{
		JB_SetRef(SC__Ext_FoundObjects, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Ext_Cleanup, JB_Array_Constructor0(nil));
		SC__Ext_CompilingLibFiles = 0;
		JB_SetRef(SC__Ext_CppCompilerPath, JB_LUB[426]);
	}
	;
	return 0;
}

int SC_Ext__InitCode_() {
	return 0;
}

void SC_Ext__InstallCompiler() {
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[925]);
	JB_FS_AppendInt32(_fsf0, (2024041617));
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
	JB_String* OldProd = JB_Incr(SC_Comp__ProductPath());
	JB_String* _tmPf2 = JB_Incr(SC_Comp__Projects());
	JB_SetRef(SC__Options_output_path, JB_Str_Child(_tmPf2, JB_LUB[1271]));
	JB_Decr(_tmPf2);
	JB_File* _tmPf3 = JB_Incr(JB_Str_AsFile(OldProd));
	JB_Decr(OldProd);
	JB_File_MoveTo(_tmPf3, SC__Options_output_path);
	JB_Decr(_tmPf3);
	JB__Flow_Disabled++;
	JB_File* _tmPf4 = JB_Incr(SC_Cpp__CppProduct());
	SC_Ext__InstallOne(_tmPf4);
	JB_Decr(_tmPf4);
	JB_File* _tmPf5 = JB_Incr(SC_Cpp__HProduct());
	SC_Ext__InstallOne(_tmPf5);
	JB_Decr(_tmPf5);
	JB_File* _tmPf7 = JB_Incr(SC_Cpp__HProduct());
	JB_File* _tmPf6 = JB_Incr(JB_File_Sibling(_tmPf7, JB_LUB[959]));
	JB_Decr(_tmPf7);
	SC_Ext__InstallOne(_tmPf6);
	JB_Decr(_tmPf6);
	JB__Flow_Disabled--;
	if (SC__Options_MakeLib) {
		SC_Ext__MakeLib();
	}
}

void SC_Ext__InstallOne(JB_File* Test) {
	JB_File* _tmPf0 = JB_Incr(JB_File_Parent(Test));
	JB_Str_MakeDir(_tmPf0);
	JB_Decr(_tmPf0);
	JB_String* _tmPf2 = JB_Incr(JB_File_Path(Test));
	JB_String* _tmPf1 = JB_Incr(JB_Str_ReplacePathComponent(_tmPf2, -2, JB_LUB[675]));
	JB_Decr(_tmPf2);
	JB_File* F0 = JB_Incr(JB_Str_AsFile(_tmPf1));
	JB_Decr(_tmPf1);
	if ((!JB_File_FileCompare(Test, F0, JB_LUB[0]))) {
		JB_File_Copy(Test, F0, false);
	}
	JB_Decr(F0);
}

bool SC_Ext__IsCompilerAndNeedsInstall() {
	bool Rz = false;
	if ((!SC__Options_SelfReplacement)) {
		return nil;
	}
	if ((!(JB_Rec_OK(JB_StdErr) and (!SC_Comp__IsTest())))) {
		return nil;
	}
	JB__Flow_Disabled++;
	Rz = (SC_Ext__TestNewCompiler() and SC_Ext__BackupCompiler());
	JB__Flow_Disabled--;
	return Rz;
}

JB_String* SC_Ext__LibSuff() {
	if (SC__Options_ProjectIsMiniLib) {
		return JB_LUB[1009];
	}
	return JB_LUB[0];
}

JB_String* SC_Ext__LibTmpPath() {
	JB_String* _tmPf0 = JB_Incr(SC_Ext__TmpBase(JB_LUB[990]));
	JB_String* _tmPf1 = JB_Incr(SC_Ext__LibSuff());
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf1));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_File* SC_Ext__LinkOK(JB_File* P) {
	if ((!JB_File_Exists(P, false))) {
		return nil;
	}
	JB_String* Lto = JB_Incr(JB_File_LinkToGet(P));
	if ((!JB_Str_Exists(Lto))) {
		JB_Decr(Lto);
		return P;
	}
	JB_String* _tmPf0 = JB_Incr(JB_Str_ResolvePath(Lto, kJB__FileResolveMode_AllowMissing));
	JB_Decr(Lto);
	JB_File* Tof = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	if (JB_File_Exists(Tof, false) and (!({
		JB_String* _tmPf2 = JB_Incr(JB_File_LinkToGet(Tof));
		bool _tmPf1 = JB_Str_Exists(_tmPf2);
		JB_Decr(_tmPf2);
		 _tmPf1;
	}))) {
		JB_SafeDecr(Tof);
		return Tof;
	}
	JB_File_Delete(Tof);
	JB_Decr(Tof);
	return nil;
}

void SC_Ext__MacBothArch(Array* R) {
	SC_Array_AppendWords(R, JB_LUB[335]);
}

JB_String* SC_Ext__MakeDailyProductPath(JB_File* B) {
	int D = JB_Date_DayOfWeek(JB_Date__Now());
	byte X = 'A' + D;
	JB_String* _tmPf0 = JB_Incr(JB_File_Path(B));
	JB_String* _tmPf2 = JB_Incr(JB_int_RenderFS(D, nil));
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(_tmPf2, JB_LUB[1438]));
	JB_Decr(_tmPf2);
	JB_String* _tmPf3 = JB_Incr(JB_Str_Child(_tmPf0, _tmPf1));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

void SC_Ext__MakeLib() {
	JB_String* _tmPf1 = JB_Incr(SC_Comp__ProductPath());
	JB_String* N = JB_Incr(JB_Str_Sibling(_tmPf1, JB_LUB[1752]));
	JB_Decr(_tmPf1);
	if ((!SC__Options_Silent)) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[991]);
		JB_FS_AppendString(_fsf0, N);
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf2);
		JB_Decr(_tmPf2);
	}
	SC__Ext_CompilingLibFiles++;
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[346], N));
	JB_Decr(N);
	SC_Ext__TransCompile(SC__Ext_FoundObjects, _tmPf3, JB_LUB[1833]);
	JB_Decr(_tmPf3);
	SC__Ext_CompilingLibFiles--;
}

int SC_Ext__NeedNewObjForSrc(JB_String* Cpp, JB_File* Objects) {
	JB_Flow__Input(Cpp, JB_LUB[1837]);
	bool Aslib = SC__Options_MakeLib or SC__Options_ProjectIsLibrary;
	if (Aslib and (JB_Str_ContainsString(Cpp, JB_LUB[403]))) {
		return 0;
	}
	if ((!SC_ASM__Needed()) and (JB_Str_ContainsString(Cpp, JB_LUB[405]))) {
		return 0;
	}
	if ((!(SC_SC_Targets__SyntaxAccess(JB_LUB[1686]) or SC_Linkage__Interpreter())) and JB_Str_ContainsString(Cpp, JB_LUB[404])) {
		return 0;
	}
	JB_String* Name = JB_Incr(JB_Str_Name(Cpp));
	JB_String* Prefix = JB_Incr(JB_Str_TrimExtAndPath(Name, true));
	JB_Decr(Name);
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(Prefix, JB_LUB[371]));
	JB_String* _tmPf0 = JB_Incr(JB_Str_Sibling(Cpp, _tmPf1));
	JB_Decr(_tmPf1);
	JB_File* H = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(Prefix, JB_LUB[376]));
	JB_Decr(Prefix);
	JB_File* _tmPf2 = JB_Incr(JB_File_SyntaxAccess(Objects, _tmPf3));
	JB_Decr(_tmPf3);
	JB_File* O = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	JB_Array_SyntaxAppend(SC__Ext_FoundObjects, O);
	int _tmPf4 = SC_Ext__NoGoodObject(Cpp, H, O);
	JB_Decr(H);
	JB_Decr(O);
	return _tmPf4;
}

int SC_Ext__NoGoodObject(JB_String* Cpp, JB_File* H, JB_File* O) {
	if ((JB_File_Exists(H, false)) and (JB_File_NewerThanFile(H, O))) {
		return 4;
	}
	if ((!JB_File_Exists(O, false))) {
		return 1;
	}
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(Cpp));
	if (JB_File_NewerThanFile(_tmPf0, O)) {
		JB_Decr(_tmPf0);
		return 2;
	}
	JB_Decr(_tmPf0);
	return 0;
}

void SC_Ext__PrintProduct(JB_String* S) {
	JB_Str_Print(S);
	JB_Str_Print(JB_LUB[161]);
	JB_String* _tmPf0 = JB_Incr(SC_Comp__ProductPath());
	JB_Str_Print(_tmPf0);
	JB_Decr(_tmPf0);
	JB_PrintLine(JB_LUB[1463]);
}

JB_String* SC_Ext__ProductName() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__VariantSuffix());
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(SC__Comp_ProjectName, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Ext__ProductSuffix() {
	if (SC__Options_ModePack) {
		return JB_LUB[2113];
	}
	if ((!SC__Options_ProjectIsLibrary)) {
		return JB_LUB[0];
	}
	if (JB_Platform__OSX()) {
		return JB_LUB[368];
	}
	if (JB_Platform__Win()) {
		return JB_LUB[373];
	}
	return JB_LUB[380];
}

JB_String* SC_Ext__ProjTmpPath() {
	JB_String* _tmPf0 = JB_Incr(SC_Ext__ProductName());
	JB_String* _tmPf1 = JB_Incr(SC_Ext__TmpBase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Ext__ReplaceOld(JB_File* Input, JB_File* Backs) {
	JB_File* Oldest = nil;
	int Score = 0;
	{
		JB_File_ListStart(Backs);
		while (JB_File_MoveNext(Backs)) {
			JB_String* _tmPf2 = JB_Incr(JB_File_CurrChild(Backs));
			JB_File* _tmPf1 = JB_Incr(JB_File_Child(Backs, _tmPf2));
			JB_Decr(_tmPf2);
			JB_File* F = JB_Incr(_tmPf1);
			JB_Decr(_tmPf1);
			JB_String* Name = JB_Incr(JB_Str_Name(F));
			if ((JB_Str_OperatorEndsWith(Name, JB_LUB[1227])) and (JB_byte_IsLetter((JB_Str_First(Name))))) {
				int64 S = JB_Date_Days(JB_Date_Ago(JB_File_Modified(F)));
				if (S > Score) {
					Score = S;
					JB_SetRef(Oldest, F);
				}
			}
			JB_Decr(F);
			JB_Decr(Name);
		};
		JB_File_ListEnd(Backs);
	}
	;
	if (Oldest != nil) {
		JB_File_CopyAll(Input, Oldest, false);
	}
	JB_Decr(Oldest);
}

void SC_Ext__RunCppCompile() {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	if ((!SC__Options_Silent)) {
		SC_Ext__PrintProduct(JB_LUB[71]);
	}
	SC_Ext__CollectPico();
	SC__Ext_CompilingLibFiles++;
	JB_File* _tmPf0 = JB_Incr(SC_Ext__CppLib());
	JB_String* _tmPf1 = JB_Incr(SC_Ext__LibTmpPath());
	if ((!SC_Ext__CollectAndCompile(_tmPf0, _tmPf1))) {
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf0);
		return;
	}
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	SC__Ext_CompilingLibFiles--;
	JB_File* _tmPf2 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_String* _tmPf3 = JB_Incr(SC_Ext__ProjTmpPath());
	if ((!SC_Ext__CollectAndCompile(_tmPf2, _tmPf3))) {
		JB_Decr(_tmPf3);
		JB_Decr(_tmPf2);
		return;
	}
	JB_Decr(_tmPf2);
	JB_Decr(_tmPf3);
	JB_String* _tmPf4 = JB_Incr(SC_Ext__ProjTmpPath());
	if ((!SC_Ext__UseAndCompile(SC__Cpp_Cpp_Input, _tmPf4))) {
		JB_Decr(_tmPf4);
		return;
	}
	JB_Decr(_tmPf4);
	JB_String* _tmPf6 = JB_Incr(SC_Comp__ProductPath());
	JB_String* _tmPf5 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[346], _tmPf6));
	JB_Decr(_tmPf6);
	if ((!SC_Ext__TransCompile(SC__Ext_FoundObjects, _tmPf5, JB_LUB[1833]))) {
		JB_Decr(_tmPf5);
		return;
	}
	JB_Decr(_tmPf5);
}

void SC_Ext__SayTest(JB_String* N) {
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[64]);
	JB_FS_AppendString(_fsf0, N);
	JB_FS_AppendString(_fsf0, JB_LUB[111]);
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
}

bool SC_Ext__ShouldTransComp() {
	if (SC__Options_Scripting) {
		return true;
	}
	if ((!((!SC__Options_Final) and SC__Options_Compile))) {
		return nil;
	}
	if (SC__Options_ForceRecompile) {
		return true;
	}
	JB_File* _tmPf0 = JB_Incr(SC_Comp__ProductFile());
	JB_File* P = JB_Incr(SC_Ext__LinkOK(_tmPf0));
	JB_Decr(_tmPf0);
	if ((!JB_File_SyntaxCast(P)) or (JB_File_Modified(P) < SC__Imp_Recent)) {
		JB_Decr(P);
		return true;
	}
	JB_Decr(P);
	if ((!SC__Options_Silent)) {
		JB_PrintLine(JB_LUB[633]);
	}
	return false;
}

bool SC_Ext__TestNewCompiler() {
	JB_File* S = JB_Incr(SC_Comp__ProductFile());
	JB_File* Test1 = JB_Incr(S);
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, S);
	JB_FS_AppendByte(_fsf0, '2');
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_File* Test2 = JB_Incr(JB_Str_AsFile(_tmPf2));
	JB_Decr(_tmPf2);
	FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf1, S);
	JB_Decr(S);
	JB_FS_AppendByte(_fsf1, '3');
	JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf1));
	JB_Decr(_fsf1);
	JB_File* Test3 = JB_Incr(JB_Str_AsFile(_tmPf3));
	JB_Decr(_tmPf3);
	JB_File* Cpp1 = JB_Incr(SC_Cpp__CppProduct());
	JB_String* _tmPf5 = JB_Incr(JB_File_Path(Cpp1));
	JB_String* _tmPf4 = JB_Incr(JB_Str_ReplacePathComponent(_tmPf5, -2, JB_LUB[676]));
	JB_Decr(_tmPf5);
	JB_File* Cpp2 = JB_Incr(JB_Str_AsFile(_tmPf4));
	JB_Decr(_tmPf4);
	JB_String* _tmPf7 = JB_Incr(JB_File_Path(Cpp1));
	JB_Decr(Cpp1);
	JB_String* _tmPf6 = JB_Incr(JB_Str_ReplacePathComponent(_tmPf7, -2, JB_LUB[677]));
	JB_Decr(_tmPf7);
	JB_File* Cpp3 = JB_Incr(JB_Str_AsFile(_tmPf6));
	JB_Decr(_tmPf6);
	JB_Array_SyntaxAppend(SC__Ext_Cleanup, Test2);
	JB_Array_SyntaxAppend(SC__Ext_Cleanup, Test3);
	JB_Decr(Test3);
	SC_Ext__SayTest(JB_LUB[449]);
	if ((!SC_File_TestSpeedie(Test1, JB_LUB[475]))) {
		JB_Decr(Cpp3);
		JB_Decr(Cpp2);
		JB_Decr(Test2);
		JB_Decr(Test1);
		return nil;
	}
	JB_Decr(Test1);
	SC_Ext__SayTest(JB_LUB[475]);
	if ((!SC_File_TestSpeedie(Test2, JB_LUB[493]))) {
		JB_Decr(Cpp3);
		JB_Decr(Cpp2);
		JB_Decr(Test2);
		return nil;
	}
	SC_Ext__SayTest(JB_LUB[493]);
	JB_PrintLine(JB_LUB[0]);
	if ((!(JB_File_MustExist(Cpp2, JB_LUB[0]) and JB_File_MustExist(Cpp3, JB_LUB[0])))) {
		JB_Decr(Cpp3);
		JB_Decr(Cpp2);
		JB_Decr(Test2);
		return nil;
	}
	if ((!JB_File_FileCompare(Cpp2, Cpp3, Cpp3))) {
		JB_Decr(Cpp3);
		JB_Decr(Cpp2);
		JB_Decr(Test2);
		return nil;
	}
	JB_Decr(Cpp2);
	JB_Decr(Cpp3);
	bool _tmPf8 = SC_File_TestBatch(Test2) and JB_Rec_OK(JB_StdErr);
	JB_Decr(Test2);
	return _tmPf8;
}

JB_String* SC_Ext__TmpBase(JB_String* V) {
	return JB_Str_OperatorPlus(JB_LUB[418], V);
}

JB_String* SC_Ext__TmpErr(JB_String* V) {
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(V, JB_LUB[382]));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1631], _tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(SC_Ext__TmpBase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_String* SC_Ext__TmpOut(JB_String* V) {
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(V, JB_LUB[382]));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1857], _tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(SC_Ext__TmpBase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

bool SC_Ext__TransCompile(Array* Files, JB_String* Dest, JB_String* Type) {
	if ((!JB_Array_SyntaxCast(Files))) {
		return true;
	}
	Array* CompileString = JB_Incr(SC_Ext__CreateCompileString(Files, Dest, Type));
	if ((!JB_Array_SyntaxCast(CompileString))) {
		JB_Decr(CompileString);
		return true;
	}
	if (SC__Options_PrintCompileString) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[58]);
		JB_FS_AppendString(_fsf0, SC__Ext_CppCompilerPath);
		JB_FS_AppendByte(_fsf0, ' ');
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Str_Print(_tmPf1);
		JB_Decr(_tmPf1);
		JB_String* _tmPf2 = JB_Incr(JB_Array_join(CompileString, JB_LUB[99]));
		JB_PrintLine(_tmPf2);
		JB_Decr(_tmPf2);
	}
	JB_Date__Sleep(8192.0);
	bool _tmPf3 = SC_Ext__ExecuteGCC(CompileString);
	JB_Decr(CompileString);
	return _tmPf3;
}

bool SC_Ext__TransCompileWrap(Array* Cpps) {
	bool Rz = false;
	Rz = SC_Ext__TransCompile(Cpps, JB_LUB[141], JB_LUB[1568]);
	if (JB_Platform__OSX()) {
		if (Rz) {
			Rz = SC_Ext__TransCompile(Cpps, JB_LUB[141], JB_LUB[1770]);
		}
		if (Rz) {
			Rz = SC_Ext__TransCompile(Cpps, JB_LUB[141], JB_LUB[1793]);
		}
	}
	return Rz;
}

bool SC_Ext__UseAndCompile(Array* Input, JB_String* Output) {
	JB_File* TmpFol = JB_Incr(SC_Str_MakeAndGoInto(Output));
	Array* Cpps = JB_Incr(SC_Ext__FilterCppsIfAlreadyDone(Input, TmpFol, nil));
	JB_Decr(TmpFol);
	bool _tmPf0 = SC_Ext__TransCompileWrap(Cpps);
	JB_Decr(Cpps);
	return _tmPf0;
}


Array* SC_TreeAssembler__CollectFuncs(JB_String* Exp) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	{
		Array* _LoopSrcf2 = JB_Str_OperatorDivide(Exp, ',');
		int _if0 = 0;
		while (true) {
			JB_String* L = ((JB_String*)JB_Array_Value(_LoopSrcf2, _if0));
			if (L == nil) {
				break;
			}
			SCNode* Fn = ((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, L));
			if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
				JB_Array_SyntaxAppend(Rz, ((SCFunction*)Fn));
				((SCFunction*)Fn)->TableId = JB_Array_Size(Rz);
			}
			_if0++;
		};
	}
	;
	return Rz;
}

int SC_TreeAssembler__Init_() {
	{
		SC__TreeAssembler_StdState = ((ASMFuncState){});
		JB_SetRef(SC__TreeAssembler_PackFuncs, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

void SC_TreeAssembler__InitAll() {
	SC_Instruction__InstructionInit();
	SC_fn_asm__InitTable();
	Instruction* _tmPf0 = JB_Incr(SC_Instruction__SyntaxAccessWithInt(kSC__ASM_SET1));
	SC_Instruction_Const(_tmPf0);
	JB_Decr(_tmPf0);
	Instruction* _tmPf1 = JB_Incr(SC_Instruction__SyntaxAccessWithInt(kSC__ASM_SETK));
	SC_Instruction_Const(_tmPf1);
	JB_Decr(_tmPf1);
	Instruction* _tmPf2 = JB_Incr(SC_Instruction__SyntaxAccessWithInt(kSC__ASM_SETN));
	SC_Instruction_Const(_tmPf2);
	JB_Decr(_tmPf2);
	return;
}

int SC_TreeAssembler__InitCode_() {
	return 0;
}

ASMFunc* SC_TreeAssembler__AccessStr(Message* M) {
	SCNode* F = ((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, M->Name));
	if (JB_Object_FastIsa(F, &SCFunctionData)) {
		ASMFunc* _tmPf0 = ((SCFunction*)F)->ASM;
		if ((!_tmPf0)) {
			JB_Msg_SyntaxExpect(M, JB_LUB[1288]);
			return nil;
		}
		return _tmPf0;
	}
	JB_String* Err = ((JB_StringC*)JB_Ternary(((bool)F), JB_LUB[1294], JB_LUB[704]));
	if (true) {
		JB_Msg_SyntaxExpect(M, Err);
	}
	return nil;
}

void SC_TreeAssembler__Vacuum(SCFunction* Fn) {
	SC_flat_InitState((&SC__TreeAssembler_StdState), Fn);
	fn_asm Fp = JB_fn_asm_table[JB_SyxArg];
	(Fp)((&SC__TreeAssembler_StdState), SC_Func_SourceArg(Fn), SC_int_Reg(0));
	SC_flat_FinishASM((&SC__TreeAssembler_StdState));
}

int SC_TreeAssembler__VacuumPack(Array* List) {
	SC_fn_asm__InitTable();
	if ((!JB_IsDebug())) {
		return 0;
	}
	Array* Test_list = SC_TreeAssembler__CollectFuncs(JB_LUB[1496]);
	SCFunction* F = ((SCFunction*)JB_Array_First(Test_list));
	if ((!F)) {
		return 0;
	}
	//debugger;
	{
		int _if0 = 0;
		while (true) {
			SCFunction* Fn = ((SCFunction*)JB_Array_Value(Test_list, _if0));
			if (Fn == nil) {
				break;
			}
			SC_TreeAssembler__Vacuum(Fn);
			_if0++;
		};
	}
	;
	{
		int _if2 = 0;
		while (true) {
			SCFunction* Fn = ((SCFunction*)JB_Array_Value(List, _if2));
			if (Fn == nil) {
				break;
			}
			SC_TreeAssembler__Vacuum(Fn);
			_if2++;
		};
	}
	;
	int64 Args[2];
	Args[0] = ((int64)8725);
	Args[1] = ((int64)275);
	//;
	ASMFunc* Mu = F->ASM;
	if (Mu) {
		int64 Result = SC_ASMFunc2_RunArgs(SC_ASMFunc_Finish(Mu), (&Args[0]), (2));
		if (Result != 9000) {
			debugger;
		}
	}
	return 1024;
}


xC2xB5Form* SC_VM_Builder__AddForm(Message* Form) {
	xC2xB5Form* Rz = nil;
	Rz = SC_xC2xB5Form_ConstructorWithMsg(nil, Form);
	(JB_Dict_ValueLowerSet(SC__xC2xB5Form_Forms, Form->Name, Rz));
	return Rz;
}

bool SC_VM_Builder__BuildFiles() {
	JB_File* V = JB_Incr(SC_Comp__InputFile(nil, JB_LUB[2038], nil));
	if ((!JB_File_SyntaxCast(V))) {
		JB_Decr(V);
		return nil;
	}
	Message* X = JB_Incr(JB_File_Parse(V, 16777216, false));
	if ((!X)) {
		JB_Decr(X);
		JB_Decr(V);
		return nil;
	}
	JB_SetRef(SC__VM_Builder_vm_file, V);
	JB_Decr(V);
	Message* Forms = JB_Incr(JB_Msg_FindName(X, JB_LUB[1663]));
	JB_Tree_Remove(Forms);
	FastString* Code = JB_Incr(JB_FS_Constructor(nil));
	FastString* Jump = JB_Incr(JB_FS_Constructor(nil));
	SC_VM_Builder__Clean(X);
	SC_VM_Builder__DataTypeModule();
	SC_VM_Builder__GenerateForms(Forms);
	JB_Decr(Forms);
	JB_SetRef(SC__VM_Builder_NameList, SC_VM_Builder__VMSpd(X));
	SC_VM_Builder__VMCpp(Code, Jump);
	JB_File* _tmPf0 = JB_Incr(SC_VM_Builder__CppLibFile(JB_LUB[926]));
	JB_String* _tmPf1 = JB_Incr(JB_FS_SyntaxCast(SC__VM_Builder_form_h));
	(JB_File_SmartDataSet(_tmPf0, _tmPf1));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_File* _tmPf2 = JB_Incr(SC_VM_Builder__CppLibFile(JB_LUB[928]));
	JB_String* _tmPf3 = JB_Incr(JB_FS_SyntaxCast(Code));
	JB_Decr(Code);
	(JB_File_SmartDataSet(_tmPf2, _tmPf3));
	JB_Decr(_tmPf2);
	JB_Decr(_tmPf3);
	JB_File* _tmPf4 = JB_Incr(SC_VM_Builder__CppLibFile(JB_LUB[927]));
	JB_String* _tmPf5 = JB_Incr(JB_FS_SyntaxCast(Jump));
	JB_Decr(Jump);
	(JB_File_SmartDataSet(_tmPf4, _tmPf5));
	JB_Decr(_tmPf4);
	JB_Decr(_tmPf5);
	(JB_FS_SizeSet(SC__VM_Builder_form_h, 0));
	JB_Decr(X);
	return true;
}

void SC_VM_Builder__BuildInstructions(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (JB_Ring_HasChildren(Node)) {
		JB_Msg_SyntaxExpect(((Message*)JB_Ring_First(Node)), nil);
		return;
	}
	Message* After = Node;
	{
		Array* _LoopSrcf2 = SC__VM_Builder_NameList;
		int _if0 = 0;
		while (true) {
			Message* Tmp = ((Message*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Tmp == nil) {
				break;
			}
			int Pos = _if0;
			JB_String* Form = JB_Msg_Name(((Message*)JB_Tree_Get(((Message*)JB_Tree_Get(Tmp, 0)), 0)));
			if (JB_Str_Exists(Form)) {
				Message* Fnc = JB_Syx_OperatorPlus(JB_SyxSDot, JB_LUB[1475]);
				Message* List = JB_Msg_Msg(Fnc, JB_SyxList, JB_LUB[0]);
				JB_Msg_AppendSyx(List, JB_SyxStr, JB_Str_LowerCase(Form));
				JB_Msg_AppendSyx(List, JB_SyxStr, Tmp->Name);
				JB_Msg_AppendNum(List, Pos);
				(JB_Ring_NextSibSet(After, Fnc));
				After = Fnc;
			}
			_if0++;
		};
	}
	;
	SC_Msg_SafeRemove(Node, JB_SyxSheb);
}

void SC_VM_Builder__Clean(Message* Msg) {
	{
		Message* Ch = Msg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Msg));
		while (((bool)(Ch)) and (Ch != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Ch));
			if (JB_Msg_OperatorIn(Ch, JB_SyxArg)) {
				Ch->Indent = (Ch->Indent + 4);
			}
			if (JB_Msg_EqualsSyx(Ch, JB_SyxOpp, false)) {
				if (JB_Msg_SyntaxEquals(Ch, JB_LUB[1794], false)) {
					JB_SetRef(Ch->Name, JB_LUB[239]);
				}
				 else if (JB_Msg_SyntaxEquals(Ch, JB_LUB[2077], false)) {
					JB_SetRef(Ch->Name, JB_LUB[2068]);
				}
			}
			Ch = _N_f2;
		};
		;
	};
}

JB_File* SC_VM_Builder__CppLibFile(JB_String* Ch) {
	JB_File* _tmPf0 = JB_Incr(SC_Ext__CppLib());
	JB_File* _tmPf1 = JB_Incr(JB_File_SyntaxAccess(_tmPf0, Ch));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* SC_VM_Builder__DataTypeCreate(Message* Form, int Fnum) {
	Message* Rz = nil;
	JB_String* Name = JB_Str_OperatorPlus(JB_LUB[613], Form->Name);
	Message* Sigh = JB_Macro_CallFast(SC__Macros_ASM_Datatype, JB_Syx_OperatorPlus(JB_SyxThg, Name), JB_int_Msg(Fnum));
	Rz = JB_Msg_FindNested(Sigh, JB_SyxList, nil, false);
	Rz = ((Message*)JB_Ring_NextSib(Rz));
	//"This would be better if speedie grouped these, rather than spamming JB_InitCode_";
	while (JB_Ring_HasChildren(Sigh)) {
		SC_Comp__SyntaxAppend(((Message*)JB_Ring_First(Sigh)));
	};
	return Rz;
}

void SC_VM_Builder__DataTypeModule() {
	Message* Module = JB_Str_ParseJbin(((JB_LUB[23])), kJB__int64_max);
	SC_Comp__SyntaxAppend(Module);
	JB_SetRef(SC__VM_Builder_ModuleArg, ((Message*)JB_Ring_Last(((Message*)JB_Ring_Last(((Message*)JB_Ring_Last(Module)))))));
}

Array* SC_VM_Builder__DefineGet(JB_String* Fname, int Up, int Down, bool Last) {
	Array* Rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	if (Last) {
		SC_VM_Builder__DefineGetSub(Fname, Up, Down, 'i', ' ');
	}
	SC_VM_Builder__DefineGetSub(Fname, Up, Down, 'u', 'u');
	Message* _tmPf0 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, Fname));
	JB_Array_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(JB_int_Msg(Up));
	JB_Array_SyntaxAppend(Rz, _tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(JB_int_Msg(Down));
	JB_Array_SyntaxAppend(Rz, _tmPf2);
	JB_Decr(_tmPf2);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_VM_Builder__DefineGetSub(JB_String* Fname, int Up, int Down, byte C, byte C2) {
	//;
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[59]);
	JB_FS_AppendString(SC__VM_Builder_form_h, Fname);
	JB_FS_AppendByte(SC__VM_Builder_form_h, C);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[109]);
	JB_FS_AppendByte(SC__VM_Builder_form_h, C2);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[1717]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, Down);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[288]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, Up);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[281]);
	JB_FS_AppendString(SC__VM_Builder_form_h, Fname);
	JB_FS_AppendByte(SC__VM_Builder_form_h, C);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[1428]);
	JB_FS_AppendByte(SC__VM_Builder_form_h, C2);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[1718]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, Down);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[288]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, Up);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[279]);
	//;
}

void SC_VM_Builder__FillTypePrm(JB_String* Fname, int Pname) {
	Message* Prop = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, Fname));
	if (Pname >= 4) {
		Message* _tmPf0 = JB_Incr(JB_Macro_CallFast(SC__Macros_ASMCopier2, Prop, nil));
		JB_Tree_SyntaxAppend(SC__VM_Builder_dt_prm, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		Message* _tmPf2 = JB_Incr(JB_int_Msg(Pname));
		Message* _tmPf1 = JB_Incr(JB_Macro_CallFast(SC__Macros_ASMCopier, Prop, _tmPf2));
		JB_Decr(_tmPf2);
		JB_Tree_SyntaxAppend(SC__VM_Builder_dt_prm, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(Prop);
}

int SC_VM_Builder__GenAcc(Message* Line, int Bit_pos, int Pname) {
	int N = 32 - Bit_pos;
	JB_String* Lname = JB_LUB[1436];
	if (Line) {
		Message* F = JB_Msg_NeedFirst(Line);
		if ((!F)) {
			return 0;
		}
		byte F0 = JB_Str_First(F->Name);
		if (F0 == 'r') {
			SC_VM_Builder__FillTypePrm(Line->Name, Pname);
			return 5 + Bit_pos;
		}
		if (JB_byte_IsInt(F0)) {
			N = JB_Msg_Int(F, 0);
		}
		if (N < 1) {
			JB_Msg_SyntaxExpect(F, JB_LUB[1322]);
			return 0;
		}
		if (N > 25) {
			JB_Msg_SyntaxExpect(F, JB_Str_OperatorPlus(JB_LUB[1309], JB_int_RenderFS(N, nil)));
			return 0;
		}
		Lname = JB_Str_OperatorPlus(JB_LUB[1425], Line->Name);
	}
	Lname = JB_Str_OperatorPlus(SC__VM_Builder_parent, Lname);
	Array* Arr = SC_VM_Builder__DefineGet(Lname, 32 - N, Bit_pos, (Bit_pos + N) == 32);
	Message* Fnc_src = JB_Macro_Run(SC__Macros_ASMSetter, Arr);
	JB_FreeIfDead(SC_Func__NewFunc(Fnc_src, nil, Line));
	SC_VM_Builder__FillTypePrm(Lname, Pname);
	if (((Bit_pos + N) > 32) or (N > 25)) {
		if (true) {
			JB_Msg_SyntaxExpect(SC__VM_Builder_dt_prm, JB_LUB[1322]);
		}
	}
	return N + Bit_pos;
}

void SC_VM_Builder__GenerateForms(Message* Forms) {
	int F = 0;
	{
		Message* _LoopSrcf4 = JB_Msg_NeedSyx(Forms, JB_SyxArg);
		Message* Form_msg = ((Message*)JB_Ring_First(_LoopSrcf4));
		while (Form_msg) {
			Message* _Nf3 = ((Message*)JB_Ring_NextSib(Form_msg));
			bool _tmPf0 = (F < 32);
			if ((!_tmPf0)) {
				JB_Msg_SyntaxExpect(Form_msg, JB_LUB[1314]);
			}
			if (_tmPf0) {
				//using;
				MessagePosition _usingf1 = JB_Msg_SyntaxUsing(Form_msg);
				SC_VM_Builder__GenerateOne(Form_msg, (++F));
				JB_MsgPos_SyntaxUsingComplete((&_usingf1));
				JB_MsgPos_Destructor((&_usingf1));
			}
			Form_msg = _Nf3;
		};
		;
	};
}

void SC_VM_Builder__GenerateOne(Message* Form_msg, int F) {
	xC2xB5Form* Frm = SC_VM_Builder__AddForm(Form_msg);
	JB_SetRef(SC__VM_Builder_dt_prm, SC_VM_Builder__DataTypeCreate(Form_msg, F));
	JB_SetRef(SC__VM_Builder_parent, Form_msg->Name);
	int Bit_pos = 7;
	int P = 0;
	Message* Arg = JB_Msg_NeedSyxInt(Form_msg, JB_SyxArg, -1);
	if ((!Arg)) {
		return;
	}
	if (JB_Msg_SyntaxEquals(((Message*)JB_Ring_PrevSib(Arg)), JB_LUB[357], false)) {
		Frm->Varies = true;
	}
	{
		Message* L = ((Message*)JB_Ring_First(Arg));
		while (L) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(L));
			Bit_pos = SC_VM_Builder__GenAcc(L, Bit_pos, P++);
			L = _Nf1;
		};
		;
	}
	;
	if ((Bit_pos < 32) and (P < 5)) {
		SC_VM_Builder__GenAcc(nil, Bit_pos, 5);
	}
	JB_FS_AppendByte(SC__VM_Builder_form_h, '\n');
}

int SC_VM_Builder__Init_() {
	{
		JB_SetRef(SC__VM_Builder_NameList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__VM_Builder_form_h, JB_FS_Constructor(nil));
		JB_SetRef(SC__VM_Builder_parent, JB_LUB[0]);
		SC__VM_Builder_NormalPos = 0;
		SC__VM_Builder_HighPos = 112;
	}
	;
	return 0;
}

int SC_VM_Builder__InitCode_() {
	return 0;
}

void SC_VM_Builder__MakeJump(Message* Msg, FastString* Jump) {
	//;
	JB_FS_AppendString(Jump, JB_LUB[243]);
	JB_FS_AppendString(Jump, Msg->Name);
	JB_FS_AppendString(Jump, JB_LUB[301]);
	//;
}

void SC_VM_Builder__MakeTheVM() {
	SC_Imp_Use(SC__Comp_Project);
	if ((!SC_VM_Builder__BuildFiles())) {
		return;
	}
	SC_TreeAssembler__InitAll();
	SC_ASM__TestASM();
}

void SC_VM_Builder__MakeVM(Message* Tmp, FastString* Vm) {
	if ((!JB_Msg_EqualsSyx(Tmp, JB_SyxTmp, false))) {
		return;
	}
	Message* P = ((Message*)JB_Ring_PrevSib(Tmp));
	if (JB_Msg_EqualsSyx(P, JB_SyxSheb, false)) {
		//;
		JB_FS_AppendString(Vm, JB_LUB[35]);
		JB_FS_AppendString(Vm, P->Name);
		JB_FS_AppendByte(Vm, '\n');
		//;
	}
	Message* Arg = ((Message*)JB_Ring_Last(Tmp));
	//;
	JB_FS_AppendString(Vm, JB_LUB[2100]);
	JB_FS_AppendString(Vm, Tmp->Name);
	JB_FS_AppendString(Vm, JB_LUB[559]);
	//;
	if ((!JB_Msg_FindSyxName(Arg, JB_SyxTmp, JB_LUB[1439], false))) {
		JB_FS_AppendByte(Vm, '_');
	}
	JB_FS_AppendByte(Vm, '\n');
	{
		Message* Line = ((Message*)JB_Ring_First(Arg));
		while (Line) {
			Message* _Nf3 = ((Message*)JB_Ring_NextSib(Line));
			SC_VM_Builder__VMLine(Line, Vm);
			Line = _Nf3;
		};
		;
	};
}

void SC_VM_Builder__VMCpp(FastString* Vm, FastString* Jump) {
	{
		Array* _LoopSrcf2 = SC__VM_Builder_NameList;
		int _if0 = 0;
		while (true) {
			Message* Tmp = ((Message*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Tmp == nil) {
				break;
			}
			SC_VM_Builder__MakeVM(Tmp, Vm);
			SC_VM_Builder__MakeJump(Tmp, Jump);
			_if0++;
		};
	}
	;
	JB_FS_AppendString(Vm, JB_LUB[2101]);
}

void SC_VM_Builder__VMDecl(Message* Tmp, Array* Msgs) {
	Message* Arg = ((Message*)JB_Ring_Last(Tmp));
	Message* Prms = ((Message*)JB_Ring_First(Tmp));
	JB_String* Name = SC_Str_ASMNormalise(JB_Msg_FirstName(Prms));
	xC2xB5Form* Form = ((xC2xB5Form*)JB_Dict_ValueLower(SC__xC2xB5Form_Forms, Name));
	if ((!Form)) {
		return;
	}
	byte Id = ((byte)JB_Ternary(Form->Varies, SC__VM_Builder_HighPos++, ((byte)SC__VM_Builder_NormalPos++)));
	SC__ASM_Encoders[Id] = SC__ASM_Forms[Form->Index];
	(JB_Array_ValueSet(Msgs, Id, Tmp));
	Name = JB_Str_OperatorPlus(JB_LUB[613], Name);
	JB_Tree_SyntaxAppend(SC__VM_Builder_ModuleArg, SC_NewDeclWithStrStr(Name, JB_LUB[0]));
	JB_Tree_SyntaxAppend(SC__VM_Builder_ModuleArg, SC_NewEqRelWithMsgMsg(JB_Syx_OperatorPlus(JB_SyxThg, Tmp->Name), JB_int_Msg(((int)Id))));
}

void SC_VM_Builder__VMLine(Message* Line, FastString* Vm) {
	if (JB_Msg_EqualsSyx(Line, JB_SyxSheb, false)) {
		//;
		JB_FS_AppendString(Vm, JB_LUB[35]);
		JB_FS_AppendString(Vm, Line->Name);
		JB_FS_AppendByte(Vm, '\n');
		//;
	}
	 else {
		JB_FS_AppendByte(Vm, '\t');
		JB_FreeIfDead(JB_Msg_Render(Line, Vm));
		JB_FS_AppendByte(Vm, ';');
	}
	JB_FS_AppendByte(Vm, '\n');
}

Array* SC_VM_Builder__VMSpd(Message* List) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	JB_Array_AppendCount(Rz, JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[831]), 128);
	{
		Message* Ch = ((Message*)JB_Ring_First(List));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			SC_VM_Builder__VMTmp(Ch, Rz);
			Ch = _Nf1;
		};
		;
	}
	;
	return Rz;
}

void SC_VM_Builder__VMTmp(Message* Tmp, Array* Msgs) {
	if (((JB_Msg_EqualsSyx(Tmp, JB_SyxTmp, false))) and ((!JB_Msg_SyntaxEquals(Tmp, JB_LUB[1663], false)) and (!JB_Msg_SyntaxEquals(Tmp, JB_LUB[1699], false)))) {
		SC_VM_Builder__VMDecl(Tmp, Msgs);
	}
}



void SC___junktest_5____Abc(bool G) {
	//visible;
	ivec2 X = ivec2{0, ((int)((byte)0))};
	if ((1234 == 1) or (1234 == 2)) {
		debugger;
	}
	JB_FreeIfDead(SC___junktest_6____AbcVis());
	if (G) {
		if ((!_once1)) {
			_once1 = true;
			JB_PrintLine(JB_LUB[1469]);
		}
	}
	 else {
		if ((!_once2)) {
			_once2 = true;
			JB_PrintLine(JB_LUB[1595]);
		}
	}
}

int SC___junktest_5____Init_() {
	{
		SC____junktest_5___x[0] = kSC____junktest_5___a;
		SC____junktest_5___x[1] = kSC____junktest_5___b;
		SC____junktest_5___x[2] = kSC____junktest_5___c;
		//;
	}
	;
	return 0;
}

int SC___junktest_5____InitCode_() {
	return 0;
}



AsmReg SC_asmOps__Assign(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	SC_flat_AddASM(Self, Dbg, kSC__ASM_BOR, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 0);
	return Dest;
}

AsmReg SC_asmOps__BitAnd(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	SC_flat_AddASM(Self, Dbg, kSC__ASM_BAND, SC_Reg_ToInt((&Dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return Dest;
}

AsmReg SC_asmOps__BitOr(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	SC_flat_AddASM(Self, Dbg, kSC__ASM_BOR, SC_Reg_ToInt((&Dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return Dest;
}

AsmReg SC_asmOps__BitXor(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	SC_flat_AddASM(Self, Dbg, kSC__ASM_BXOR, SC_Reg_ToInt((&Dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return Dest;
}

AsmReg SC_asmOps__Div(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	debugger;
	SC_flat_AddASM(Self, Dbg, kSC__ASM_DIV, 31, SC_Reg_ToInt((&Dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)));
	return Dest;
}

AsmReg SC_asmOps__Equals(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	debugger;
	SC_flat_AddASM(Self, Dbg, kSC__ASM_CMPE, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 1, 0);
	return Dest;
}

AsmReg SC_asmOps__Less(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	debugger;
	SC_flat_AddASM(Self, Dbg, kSC__ASM_CMPI, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 1);
	return Dest;
}

AsmReg SC_asmOps__LessEq(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	debugger;
	SC_flat_AddASM(Self, Dbg, kSC__ASM_CMPI, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 1);
	return Dest;
}

AsmReg SC_asmOps__Minus(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	debugger;
	SC_flat_AddASM(Self, Dbg, kSC__ASM_SUB, SC_Reg_ToInt((&Dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return Dest;
}

AsmReg SC_asmOps__Mod(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	debugger;
	SC_flat_AddASM(Self, Dbg, kSC__ASM_DIV, SC_Reg_ToInt((&Dest)), 31, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)));
	return Dest;
}

AsmReg SC_asmOps__More(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	debugger;
	SC_flat_AddASM(Self, Dbg, kSC__ASM_CMPI, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 1);
	return Dest;
}

AsmReg SC_asmOps__MoreEq(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	debugger;
	SC_flat_AddASM(Self, Dbg, kSC__ASM_CMPI, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 1);
	return Dest;
}

AsmReg SC_asmOps__Mul(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	SC_flat_AddASM(Self, Dbg, kSC__ASM_MUL, SC_Reg_ToInt((&Dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return Dest;
}

AsmReg SC_asmOps__NotEq(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	debugger;
	SC_flat_AddASM(Self, Dbg, kSC__ASM_CMPN, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 1, 0);
	return Dest;
}

AsmReg SC_asmOps__Plus(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	debugger;
	SC_flat_AddASM(Self, Dbg, kSC__ASM_ADD, SC_Reg_ToInt((&Dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return Dest;
}

AsmReg SC_asmOps__ROL(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	SC_flat_AddASM(Self, Dbg, kSC__ASM_BROL, SC_Reg_ToInt((&Dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return Dest;
}

AsmReg SC_asmOps__ROR(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	SC_flat_AddASM(Self, Dbg, kSC__ASM_BROR, SC_Reg_ToInt((&Dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return Dest;
}

AsmReg SC_asmOps__SHL(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	SC_flat_AddASM(Self, Dbg, kSC__ASM_SHLS, SC_Reg_ToInt((&Dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return Dest;
}

AsmReg SC_asmOps__SHR(ASMFuncState* Self, AsmReg Dest, AsmReg L, AsmReg R, Message* Dbg) {
	SC_flat_AddASM(Self, Dbg, kSC__ASM_SHRU, SC_Reg_ToInt((&Dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return Dest;
}


JB_String* SC_image__ConvertPNGToVOI(JB_String* P) {
	JB_String* Rz = JB_Incr(JB_LUB[0]);
	JB_SetRef(Rz, JB_Str__Error());
	int X = 0;
	int Y = 0;
	int Comp = 0;
	byte* Img = JB_Img__LoadPNG(P->Addr, JB_Str_Length(P), (&X), (&Y), (&Comp), 4);
	if (Img) {
		int N = 0;
		byte* Qoi = JB_Img__WriteQOI(Img, X, Y, (&N));
		if (Qoi) {
			JB_String* _tmPf0 = JB_Incr(JB_Str__Freeable(Qoi, N));
			JB_SetRef(Rz, JB_Str_Compress(_tmPf0, kJB__MZLab_Fast, nil));
			JB_Decr(_tmPf0);
		}
	}
	JB_free(Img);
	JB_SafeDecr(Rz);
	return Rz;
}


void SC___junktest_11__() {
	//visible;
	JB_String* Sss = JB_Incr(JB_LUB[1469]);
	JB_String* Y = JB_Incr(((JB_String*)JB_Ternary(JB_f_SyntaxAccess(0.5f), ((JB_String*)JB_Str_Decompress(Sss, JB_int__Max(), nil)), ((JB_String*)Sss))));
	JB_Decr(Sss);
	JB_PrintLine(Y);
	JB_Decr(Y);
}

void SC___junktest_1__() {
	//visible;
	Array* R = JB_Incr((JB_Array_Constructor0(nil)));
	DTWrap* _tmPf0 = JB_Incr(JB_Wrap_ConstructorInt(nil, 1));
	JB_Array_SyntaxAppend(R, _tmPf0);
	JB_Decr(_tmPf0);
	DTWrap* _tmPf1 = JB_Incr(JB_Wrap_ConstructorInt(nil, 2));
	JB_Array_SyntaxAppend(R, _tmPf1);
	JB_Decr(_tmPf1);
	DTWrap* _tmPf2 = JB_Incr(JB_Wrap_ConstructorInt(nil, 3));
	JB_Array_SyntaxAppend(R, _tmPf2);
	JB_Decr(_tmPf2);
	ErrorSeverity I = 2;
	DTWrap* V = JB_Incr(((DTWrap*)JB_Array_Value(R, I)));
	JB_Decr(R);
	JB_Decr(V);
}

void SC___junktest_2__() {
	//visible;
	JB_List* R1 = JB_Incr(JB_Ring_Constructor0(nil));
	if (0.5f) {
		JB_SetRef(R1, nil);
	}
	JB_List* R2 = JB_Incr(JB_Ring_Constructor0(nil));
	{
		JB_List* _tmP0 = JB_Incr(JB_Ring_First(R1));
		if (_tmP0) {
			int I2 = 0;
			I2 = JB_Tree_Dist(_tmP0, R2);
		}
		JB_Decr(_tmP0);
	}
	;
	JB_Decr(R1);
	JB_Decr(R2);
}

bool SC___junktest_3__(IntRange Data) {
	//visible;
	ivec4 X = ((ivec4){});
	X = SC_ivec4___junktest_4__Set(X, 1);
	return false;
}

void SC_AddToStaticSection(Message* Arg, Message* ToAdd) {
	Message* Static = JB_Msg_FindSyxName(Arg, JB_SyxTmp, JB_LUB[1798], false);
	if (Static) {
		Arg = ((Message*)JB_Ring_Last(Static));
		if ((!JB_Msg_EqualsSyx(Arg, JB_SyxArg, false))) {
			JB_Msg_SyntaxExpect(Static, JB_LUB[1013]);
			return;
		}
	}
	 else {
		Static = (JB_Syx_Msg(JB_SyxTmp, JB_LUB[1798]));
		JB_Tree_SyntaxAppend(Arg, Static);
		Arg = JB_Msg_Msg(Static, JB_SyxArg, JB_LUB[0]);
	}
	JB_Tree_SyntaxAppend(Arg, ToAdd);
}

int SC_ArrayInOrderCheck(int InOrder, Message* Msg) {
	if ((InOrder >= 0) and (JB_Msg_EqualsSyx(Msg, JB_SyxNum, false))) {
		if (JB_Msg_Int(Msg, 0) == InOrder) {
			return InOrder + 1;
		}
	}
	return -1;
}

bool SC_CanOpCompare(Message* Exp, SCDecl* Lc, SCDecl* Rc, SCOperator* Comp) {
	return ((!JB_Msg_EqualsSyx(((Message*)JB_Ring_Parent(Exp)), JB_SyxArg, false))) and (SC_Class_CanCompare(Lc->Type, Rc, ((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_EqualOrNot))));
}

void SC_ClassLinkageTable_cpp_class(SCFunction* Fn, Message* Node, SCNode* Name_space) {
}

void SC_ClassLinkageTable_cpp_part(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	JB_FreeIfDead(SC_Base__LoadCppPart(Node, Name_space, Node));
}

void SC_ClassLinkageTable_cpp_wrapper(SCFunction* Fn, Message* Node, SCNode* Name_space) {
}

void SC_ClassLinkageTable_datatype(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		if ((!SC_Class_IsStruct(((SCClass*)Name_space)))) {
			JB_Msg_SyntaxExpect(Node, JB_LUB[858]);
			return;
		}
		Message* Value = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxThg));
		if (Value) {
			JB_Msg_ExpectLast(Value, JB_LUB[0]);
		}
		JB_Decr(Value);
	}
}

void SC_ClassLinkageTable_ignore(SCFunction* Fn, Message* Node, SCNode* Name_space) {
}

void SC_ClassLinkageTable_noearlyfree(SCFunction* Fn, Message* Node, SCNode* Name_space) {
}

void SC_ClassLinkageTable_numeric(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (JB_Object_MustBe(Name_space, &SCClassData, Node)) {
		if ((!SC_Class_IsDataTypeOnly(((SCClass*)Name_space)))) {
			JB_Msg_SyntaxExpect(Node, JB_LUB[857]);
			return;
		}
		Message* Type = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxThg));
		if ((!Type)) {
			JB_Decr(Type);
			return;
		}
		((SCClass*)Name_space)->TypeInfo = kJB__TC_UnusedType;
		if ((JB_Msg_SyntaxEquals(Type, JB_LUB[1648], false)) or (JB_Msg_SyntaxEquals(Type, JB_LUB[1211], false))) {
			((SCClass*)Name_space)->NumericReduction = kSC__NumericLoss_Symbol;
		}
		 else if (JB_Msg_SyntaxEquals(Type, JB_LUB[1937], false)) {
			((SCClass*)Name_space)->NumericReduction = kSC__NumericLoss_Fixed;
		}
		 else if (JB_Msg_SyntaxEquals(Type, JB_LUB[1656], false)) {
			((SCClass*)Name_space)->NumericReduction = kSC__NumericLoss_Flag;
		}
		 else {
			if (true) {
				JB_Msg_SyntaxExpect(Type, nil);
			}
		}
		JB_Decr(Type);
	}
}

void SC_ClassLinkageTable_visible(SCFunction* Fn, Message* Node, SCNode* Name_space) {
}

void SC_ClassLinkageTable_wrapper(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		((SCClass*)Name_space)->IsWrapper = 1;
		Message* F = JB_Incr(((Message*)JB_Ring_First(Node)));
		if (F) {
			JB_Msg_Expect(F, JB_SyxThg, nil);
			JB_Msg_ExpectLast(F, JB_LUB[0]);
			if (JB_Msg_SyntaxEquals(F, JB_LUB[2018], false)) {
				((SCClass*)Name_space)->IsWrapper = 2;
			}
			 else {
				if (true) {
					JB_Msg_SyntaxExpect(F, nil);
				}
			}
		}
		JB_Decr(F);
	}
}

SCClass* SC_ClassOfObjForC(Message* Curr) {
	if (JB_Msg_EqualsSyx(Curr, JB_SyxFunc, false)) {
		SCFunction* Fnc = SC_Msg_MsgFunc(Curr);
		if (Fnc) {
			SCDecl* Rt = Fnc->ReturnType;
			if (Rt) {
				return Rt->Type;
			}
		}
		return nil;
	}
	JB_Object* Obj = Curr->Obj;
	if (JB_Object_FastIsa(Obj, &SCDeclData)) {
		return ((SCDecl*)Obj)->Type;
	}
	if (JB_Object_FastIsa(Obj, &SCClassData)) {
		return ((SCClass*)Obj);
	}
	if (JB_Object_FastIsa(Obj, &SCModuleData)) {
		if (((SCModule*)Obj)->Cls) {
			return JB_TypeJBClass;
		}
	}
	return nil;
}

SCNode* SC_ClsCollectTable_pragma(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (true) {
		JB_Msg_SyntaxExpect(Node, nil);
	}
	return nil;
}

void SC_CollectDeclsFuncBody(Message* Arg, SCNode* Scarg) {
	SC_CollectDeclsFuncBodyJustWhatWeNewlyMade(Arg, Scarg);
}

void SC_CollectDeclsFuncBodyJustWhatWeNewlyMade(Message* Arg, SCNode* Scarg) {
	{
		Message* Item = ((Message*)JB_Ring_First(Arg));
		while (Item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Item));
			if (JB_Msg_EqualsSyx(Item, JB_SyxDecl, false)) {
				SC_Msg_CollectFromBody(Item, Scarg);
			}
			Item = _Nf1;
		};
		;
	};
}

void SC_CollectDeclsFuncBodyUnsureHowToRemove(Message* Arg, SCNode* Scarg) {
	SC_CollectDeclsFuncBodyJustWhatWeNewlyMade(Arg, Scarg);
}

void SC_CollectDeclsGlobals(Message* Arg, SCNode* Scarg) {
	{
		Message* Item = ((Message*)JB_Ring_First(Arg));
		while (Item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Item));
			if (JB_Msg_EqualsSyx(Item, JB_SyxDecl, false)) {
				if ((!SC_Msg_CollectAGlobalDecl(Item, Scarg))) {
					return;
				}
			}
			Item = _Nf1;
		};
		;
	};
}

bool JB_CompareError(Message* Expected, Message* Found) {
	JB_Incr(Found);
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	//;
	JB_FS_AppendString(Fs, JB_LUB[845]);
	JB_String* _tmPf3 = JB_Incr(JB_Msg_Locate(Expected));
	JB_FS_AppendString(Fs, _tmPf3);
	JB_Decr(_tmPf3);
	JB_FS_AppendString(Fs, JB_LUB[167]);
	JB_String* _tmPf4 = JB_Incr(JB_Msg_Locate(Found));
	JB_FS_AppendString(Fs, _tmPf4);
	JB_Decr(_tmPf4);
	JB_FS_AppendByte(Fs, '\n');
	//;
	//;
	JB_FS_AppendString(Fs, JB_LUB[1862]);
	Message* _tmPf6 = JB_Incr(JB_Msg_PoorAnt(Expected));
	JB_String* _tmPf5 = JB_Incr(JB_Msg_Locate(_tmPf6));
	JB_Decr(_tmPf6);
	JB_FS_AppendString(Fs, _tmPf5);
	JB_Decr(_tmPf5);
	JB_FS_AppendByte(Fs, '\n');
	//;
	if (Found) {
		//;
		JB_FS_AppendString(Fs, JB_LUB[1863]);
		Message* _tmPf8 = JB_Incr(JB_Msg_PoorAnt(Found));
		JB_String* _tmPf7 = JB_Incr(JB_Msg_Locate(_tmPf8));
		JB_Decr(_tmPf8);
		JB_FS_AppendString(Fs, _tmPf7);
		JB_Decr(_tmPf7);
		JB_FS_AppendByte(Fs, '\n');
		//;
	}
	 else {
		JB_SetRef(Found, Expected);
	}
	JB_Obj_PrintLine(Fs);
	JB_Decr(Fs);
	JB_Msg_SyntaxExpect(Found, nil);
	JB_Decr(Found);
	return false;
}

void SC_CppRefTable_disowns(SCFunction* Fn, Message* Node, SCNode* Name_space) {
}

void SC_CppRefTable_disturbs(SCFunction* Fn, Message* Node, SCNode* Name_space) {
}

void SC_Create_JeeboxTest(Message* Msg) {
	if (true) {
		JB_ErrorReceiver* _tmPf2 = JB_Incr(JB_Rec_Constructor(nil));
		JB_ErrorReceiver* _usingf0 = JB_Incr(JB_Rec_SyntaxUsing(_tmPf2));
		JB_Decr(_tmPf2);
		JB_File* F = JB_Incr(SC_Comp__InputFile(nil, JB_LUB[1935], nil));
		if (F == nil) {
			JB_Str_SyntaxExpect(JB_LUB[1936]);
			JB_Decr(F);
			JB_Decr(_usingf0);
			return;
		}
		JB_String* S = JB_Incr(JB_File_ReadAll(F, 134217728, true));
		JB_Decr(F);
		if (JB_Msg_SyntaxEquals(Msg, JB_LUB[1444], true)) {
			//using;
			MessagePosition _usingf1 = JB_Msg_SyntaxUsing(Msg);
			JB_SetRef(S, JB_Str_Digest(S));
			JB_MsgPos_SyntaxUsingComplete((&_usingf1));
			JB_MsgPos_Destructor((&_usingf1));
		}
		JB_Msg_BecomeStr(Msg, JB_SyxStr, S);
		JB_Decr(S);
		JB_Rec_SyntaxUsingComplete(_usingf0);
		JB_Decr(_usingf0);
	}
}

SCDecl* SC_CustomFuncOp(Message* Exp, SCOperator* Comp, SCNode* Name_space, Message* RN) {
	JB_Msg_BecomeStr(Exp, JB_SyxDot, Comp->FuncName);
	Message* Prm = (JB_Syx_Msg(JB_SyxPrm, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Prm, RN);
	JB_Tree_SyntaxAppend(Exp, Prm);
	JB_Tree_Remove(((Message*)JB_Tree_Second(Exp)));
	SCDecl* Ty = SC_TypeOfExpr(Exp, Name_space, nil);
	if ((!Ty)) {
		return nil;
	}
	if (((bool)RN) and (Prm->Obj == SC__Comp_fnAs)) {
		SCClass* Cls = SC_Msg_ObjCls(RN);
		if (Cls) {
			if ((!Cls->HasSubClass)) {
				JB_SetRef(Prm->Obj, SC__Comp_fnFastAs);
			}
			return Cls->TypeNormal;
		}
	}
	return Ty;
}

SCDecl* SC_DeclOfObjForC(Message* Curr) {
	if (JB_Msg_EqualsSyx(Curr, JB_SyxFunc, false)) {
		SCFunction* Fnc = SC_Msg_MsgFunc(Curr);
		if (Fnc) {
			return Fnc->ReturnType;
		}
	}
	JB_Object* Obj = Curr->Obj;
	if (JB_Object_FastIsa(Obj, &SCDeclData)) {
		return ((SCDecl*)Obj);
	}
	if (JB_Object_FastIsa(Obj, &SCClassData)) {
		return ((SCClass*)Obj)->TypeNormal;
	}
	if (JB_Object_FastIsa(Obj, &SCFunctionData)) {
		return ((SCFunction*)Obj)->ReturnType;
	}
	if (JB_Object_FastIsa(Obj, &SCModuleData)) {
		SCClass* Cls = ((SCModule*)Obj)->Cls;
		if (Cls) {
			return Cls->ClassType;
		}
	}
	return nil;
}

Message* SC_DeclsDefault(Message* Def) {
	if (SC_Msg_IsSetRel(Def)) {
		return ((Message*)JB_Ring_Last(Def));
	}
	return nil;
}

Message* SC_DefaultStitch(Message* Default, Message* Dcl) {
	Message* Rz = nil;
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Dcl);
	Rz = JB_Msg_Msg(Dcl, JB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Rz, ((Message*)JB_Tree_Second(Dcl)));
	JB_Msg_AppendSyx(Rz, JB_SyxOpp, JB_LUB[586]);
	JB_Tree_SyntaxAppend(Rz, Default);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return Rz;
}

SCNode* SC_DontRemove(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	return SC__Comp_program;
}

SCDecl* SC_DoOpCompare(Message* Exp, SCDecl* Lc, SCDecl* Rc, SCOperator* Comp, SCNode* Name_space) {
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
	Message* Dot = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[0])));
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	JB_Tree_SyntaxAppend(Dot, _tmPf2);
	JB_Decr(_tmPf2);
	Message* _tmPf3 = ({
		Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
		JB_Tree_SyntaxAppend(__imPf1, _tmPf4);
		JB_Decr(_tmPf4);
		JB_String* _tmPf6 = JB_Incr(SC_Opp_CaseAwareStr(Comp));
		Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxThg, _tmPf6));
		JB_Decr(_tmPf6);
		JB_Tree_SyntaxAppend(__imPf1, (_tmPf5));
		JB_Decr(_tmPf5);
		JB_SafeDecr(nil);
		 __imPf1;
	});
	JB_Tree_SyntaxAppend(Dot, _tmPf3);
	JB_Decr(_tmPf3);
	(JB_Ring_FirstSet(Exp, Dot));
	if (SC_Opp_SyntaxIs(Comp, kSC__OpMode_EqualOrNot)) {
		Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
		JB_Tree_Remove(_tmPf7);
		JB_Decr(_tmPf7);
		JB_SetRef(Dot->Name, JB_LUB[1256]);
		if (JB_Str_Equals(Comp->CompOp, JB_LUB[215], false)) {
			JB_Msg_BecomeStr(Exp, JB_SyxBRel, JB_LUB[214]);
			JB_Tree_SyntaxAppend(Exp, Dot);
		}
		 else {
			JB_Msg_BecomeStr(Exp, JB_SyxBra, JB_LUB[0]);
		}
	}
	 else {
		JB_SetRef(Dot->Name, JB_LUB[1253]);
		Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
		JB_SetRef(_tmPf8->Name, Comp->CompOp);
		JB_Decr(_tmPf8);
		JB_Msg_AppendSyx(Exp, JB_SyxNum, Comp->CompParam);
	}
	JB_FreeIfDead(SC_TypeOfExpr(Dot, Name_space, nil));
	JB_Decr(Dot);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	SCDecl* _tmPf9 = JB_Incr(JB_TypeBool->TypeNormal);
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(_tmPf9);
	return _tmPf9;
}

JB_String* JB_EntityTest() {
	JB_String* Replicate = JB_Incr(JB_LUB[1415]);
	Dictionary* Repl = JB_Incr(JB_Dict_Constructor(nil));
	(JB_Dict_ValueSet(Repl, JB_LUB[1414], JB_LUB[41]));
	JB_MSR_DecodeEntitySet(Repl, true);
	JB_MSR_EscapeCodeSet(Repl, true);
	JB_String* S3 = JB_Incr(JB_Str_Unescape(Replicate));
	JB_SetRef(Replicate, JB_Str_MultiReplaceAll(Replicate, Repl, JB_StdErr));
	JB_Decr(Repl);
	JB_String* Jb = JB_Incr(JB_LUB[65]);
	if ((!((JB_Str_Equals(Jb, Replicate, false)) and (JB_Str_Equals(Jb, S3, false))))) {
		debugger;
	}
	JB_Decr(S3);
	JB_Decr(Jb);
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(Replicate));
	JB_Decr(Replicate);
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, JB_LUB[187]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* SC_ExpandToBool(Message* Inside, SCNode* Name_space) {
	Message* Rz = nil;
	SCDecl* Decl = SC_TypeOfExpr(Inside, Name_space, nil);
	if ((!Decl)) {
		return nil;
	}
	Rz = SC_Decl_ExpectMatch(JB_TypeBool->TypeNormal, Decl, kJB_kTypeCastTrue, Inside, nil);
	while (((JB_Msg_EqualsSyx(Rz, JB_SyxBra, false))) and ((JB_Msg_EqualsSyx(((Message*)JB_Ring_First(Rz)), JB_SyxBra, false)))) {
		Rz = SC_Msg_ReplaceWithChild(Rz);
	};
	return Rz;
}

SCDecl* SC_ExtractDecl(Message* C, SCNode* Name_space, DeclMode Purpose) {
	SCDecl* Rz = nil;
	Syntax F = C->Func;
	if (F == JB_SyxThg) {
		if (JB_Msg_SyntaxEquals(C, JB_LUB[1810], false)) {
			JB_Decr(Rz);
			return JB_TypeVoid;
		}
		JB_Decr(Rz);
		return SC_Comp__FindClassType(C);
	}
	if (F == JB_SyxDecl) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(C)));
		SCDecl* _tmPf20 = JB_Incr(SC_ExtractDecl(_tmPf0, Name_space, Purpose));
		JB_Decr(_tmPf0);
		JB_Decr(Rz);
		JB_SafeDecr(_tmPf20);
		return _tmPf20;
	}
	if (F == JB_SyxEmb) {
		SC_Msg_ExpectEmpty(C);
		JB_Decr(Rz);
		return nil;
	}
	if (F == JB_SyxBra) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(C)));
		SCDecl* _tmPf19 = JB_Incr(SC_ExtractDecl(_tmPf1, Name_space, Purpose));
		JB_Decr(_tmPf1);
		JB_Decr(Rz);
		JB_SafeDecr(_tmPf19);
		return _tmPf19;
	}
	if ((F == JB_SyxSThg) and ((JB_Msg_SyntaxEquals(C, JB_LUB[357], false)))) {
		JB_Decr(Rz);
		return SC_Base_RequireContained(Name_space, C);
	}
	if ((F == JB_SyxList) and (!JB_Ring_HasChildren(C))) {
		Message* P = JB_Incr(SC_Msg_UpToType(C));
		if (P) {
			Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(P)));
			SCDecl* _tmPf18 = JB_Incr(SC_TypeOfExpr(_tmPf2, Name_space, nil));
			JB_Decr(_tmPf2);
			JB_Decr(P);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf18);
			return _tmPf18;
		}
		JB_Decr(P);
	}
	if (JB_Msg_EqualsSyx(C, JB_SyxAcc, false)) {
		Message* Prms = JB_Incr(((Message*)JB_Tree_Second(C)));
		if (JB_Ring_HasChildren(Prms)) {
			Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(C)));
			SCDecl* R = JB_Incr(SC_ExtractDecl(_tmPf3, Name_space, Purpose));
			JB_Decr(_tmPf3);
			if ((!R)) {
				JB_Decr(R);
				JB_Decr(Prms);
				JB_Decr(Rz);
				return nil;
			}
			SCDecl* _tmPf17 = JB_Incr(SC_Decl_ExtractAmount(R, Prms, Name_space));
			JB_Decr(R);
			JB_Decr(Prms);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf17);
			return _tmPf17;
		}
		JB_Decr(Prms);
		F = JB_SyxRel;
		C->Func = F;
		Message* Fi = JB_Incr(((Message*)JB_Ring_First(C)));
		JB_Tree_Clear(C);
		JB_Msg_AppendSyx(C, JB_SyxThg, JB_LUB[1783]);
		JB_Msg_AppendSyx(C, JB_SyxOpp, JB_LUB[1838]);
		JB_Tree_SyntaxAppend(C, Fi);
		JB_Decr(Fi);
	}
	if (F == JB_SyxFunc) {
		Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(C)));
		SCDecl* R = JB_Incr(SC_ExtractDecl(_tmPf4, Name_space, Purpose));
		JB_Decr(_tmPf4);
		if ((!R)) {
			JB_Decr(R);
			JB_Decr(Rz);
			return nil;
		}
		Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_Last(C)));
		SCDecl* _tmPf16 = JB_Incr(SC_Decl_RefineDecl(R, _tmPf5));
		JB_Decr(R);
		JB_Decr(_tmPf5);
		JB_Decr(Rz);
		JB_SafeDecr(_tmPf16);
		return _tmPf16;
	}
	if ((F == JB_SyxARel) or (F == JB_SyxBRel)) {
		Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_First(C)));
		SCDecl* R = JB_Incr(SC_ExtractDecl(_tmPf6, Name_space, Purpose));
		JB_Decr(_tmPf6);
		if ((!R)) {
			JB_Decr(R);
			JB_Decr(Rz);
			return nil;
		}
		if (JB_Msg_SyntaxEquals(C, JB_LUB[2082], false)) {
			SCDecl* _tmPf11 = JB_Incr(SC_Decl_MakeDataObject(R, Name_space, Purpose));
			JB_Decr(R);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf11);
			return _tmPf11;
		}
		if (JB_Msg_SyntaxEquals(C, JB_LUB[241], false)) {
			SCDecl* _tmPf12 = JB_Incr(SC_Decl_GetAddress(R, Purpose));
			JB_Decr(R);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf12);
			return _tmPf12;
		}
		if (JB_Msg_SyntaxEquals(C, JB_LUB[598], false)) {
			SCDecl* _tmPf13 = JB_Incr(SC_Decl_MakeNewOptional(R));
			JB_Decr(R);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf13);
			return _tmPf13;
		}
		if (JB_Msg_SyntaxEquals(C, JB_LUB[214], false)) {
			if (((bool)SC_Decl_StatedReal(R)) and (!JB_Msg_SyntaxIs(C, kJB__MsgParseFlags_Inserted))) {
				(JB_Msg_SyntaxDeprecate(C, JB_LUB[630]));
			}
			SCDecl* _tmPf14 = JB_Incr(SC_Decl_MakeNewReal(R));
			JB_Decr(R);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf14);
			return _tmPf14;
		}
		if (JB_Msg_SyntaxEquals(C, JB_LUB[308], false)) {
			SCDecl* _tmPf15 = JB_Incr(SC_Decl_MakeBorrowed(R, JB_FreeIfDead(SC_Msg_UpToType(C)) != nil));
			JB_Decr(R);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf15);
			return _tmPf15;
		}
		if (JB_Str_Exists(C->Name)) {
			if (true) {
				JB_Msg_SyntaxExpect(C, nil);
			}
		}
		JB_Decr(Rz);
		JB_SafeDecr(R);
		return R;
	}
	if (F == JB_SyxName) {
		C->Func = JB_SyxThg;
		SCDecl* D = JB_Incr(SC_ExtractDecl(C, Name_space, Purpose));
		if ((!D)) {
			JB_Decr(D);
			JB_Decr(Rz);
			return nil;
		}
		(SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_CompilerCreated, true));
		JB_Decr(Rz);
		JB_SafeDecr(D);
		return D;
	}
	if (F == JB_SyxArg) {
		Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_First(C)));
		SCDecl* D = JB_Incr(SC_ExtractDecl(_tmPf7, Name_space, Purpose));
		JB_Decr(_tmPf7);
		if ((!D)) {
			JB_Decr(D);
			JB_Decr(Rz);
			return nil;
		}
		(SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_CompilerCreated, true));
		JB_Decr(Rz);
		JB_SafeDecr(D);
		return D;
	}
	if (F == JB_SyxDot) {
		JB_Decr(Rz);
		return SC_Comp__FindClassType(C);
	}
	JB_SetRef(Rz, SC_Decl_Constructor(nil, JB_TypeVoid_));
	int ErrCount = JB_StdErr->ErrorCount;
	if (F == JB_SyxArr) {
		Message* Ch = JB_Incr(((Message*)JB_Ring_First(C)));
		if ((!Ch)) {
			JB_Decr(Ch);
			JB_Decr(Rz);
			return JB_TypeArray->TypeNormal;
		}
		if (JB_Msg_EqualsSyx(Ch, JB_SyxItem, false)) {
			JB_Msg_SyntaxExpect(C, nil);
			JB_Decr(Ch);
			JB_Decr(Rz);
			return nil;
		}
		SCDecl* Dcl = JB_Incr(SC_ExtractDecl(Ch, Name_space, Purpose));
		JB_Decr(Ch);
		if (Dcl) {
			JB_SetRef(Rz->Contains, SC_Decl_MakeContainedOptional(Dcl));
			JB_SetRef(Rz->Type, JB_TypeArray);
		}
		JB_Decr(Dcl);
	}
	 else if (F == JB_SyxAdj) {
		(JB_Msg_SyntaxDeprecate(C, JB_LUB[1357]));
		Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_First(C)));
		Message* _tmPf9 = JB_Incr(((Message*)JB_Ring_Last(C)));
		if ((!SC_Decl_LoadContained(Rz, _tmPf8, _tmPf9, Name_space, Purpose))) {
			JB_Decr(_tmPf9);
			JB_Decr(_tmPf8);
			JB_Decr(Rz);
			return nil;
		}
		JB_Decr(_tmPf8);
		JB_Decr(_tmPf9);
	}
	 else if (F == JB_SyxRel) {
		Message* Op = JB_Incr(JB_Msg_NeedSyxInt(C, JB_SyxOpp, 1));
		if ((!Op)) {
			JB_Decr(Op);
			JB_Decr(Rz);
			return nil;
		}
		JB_Msg_Expect(Op, JB_SyxOpp, JB_LUB[1838]);
		JB_Decr(Op);
		Message* Contained = JB_Incr(JB_Msg_NeedSyxInt(C, JB_SyxNil, 2));
		if ((!Contained)) {
			JB_Decr(Contained);
			JB_Decr(Rz);
			return nil;
		}
		Message* _tmPf10 = JB_Incr(((Message*)JB_Ring_First(C)));
		if ((!SC_Decl_LoadContained(Rz, Contained, _tmPf10, Name_space, Purpose))) {
			JB_Decr(_tmPf10);
			JB_Decr(Contained);
			JB_Decr(Rz);
			return nil;
		}
		JB_Decr(Contained);
		JB_Decr(_tmPf10);
	}
	 else if (ErrCount == JB_StdErr->ErrorCount) {
		if (true) {
			JB_Msg_SyntaxExpect(C, nil);
		}
	}
	SC_Decl_MakeContainedObject(Rz, C);
	if (ErrCount != JB_StdErr->ErrorCount) {
		JB_SetRef(Rz, nil);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

void fdb(Array* R) {
	//visible;
	{
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(R, _if0));
			if (F == nil) {
				break;
			}
			JB_PrintLine(F->ExportName);
			_if0++;
		};
	};
}

Message* SC_FindBytePos(Message* Node) {
	Message* First = JB_Incr(SC_FindBytePosSub(Node));
	if (First) {
		JB_SafeDecr(First);
		return First;
	}
	JB_Decr(First);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(Node)));
	Message* Msg = JB_Incr(SC_FindBytePosSub(_tmPf0));
	JB_Decr(_tmPf0);
	if (Msg) {
		JB_SafeDecr(Msg);
		return Msg;
	}
	JB_Decr(Msg);
	SCFunction* Fn = JB_Incr(SC_Msg_MsgOwningFunc(Node));
	if (Fn) {
		Message* _tmPf1 = JB_Incr(SC_FindBytePosSub(Fn->Source));
		JB_Decr(Fn);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	JB_Decr(Fn);
	return nil;
}

Message* SC_FindBytePosSub(Message* Node) {
	if ((!Node) or JB_Msg_HasPosition(Node)) {
		return Node;
	}
	{
		Message* M = Node;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Node));
		while (((bool)(M)) and (M != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(M));
			if (JB_Msg_HasPosition(M)) {
				return M;
			}
			M = _N_f2;
		};
		;
	}
	;
	return nil;
}

AsmReg SC_fn_asm_table_63(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	0;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_ACC(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_AREL(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_ARG(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	uint64 OV = SC_flat_OpenVars(Self);
	AsmReg Garb = SC_int_Reg(31);
	{
		Message* Ch = ((Message*)JB_Ring_First(Exp));
		while (Ch) {
			SC_flat_Reg(Self, Ch, Garb);
			Ch = ((Message*)JB_Ring_NextSib(Ch));
		};
		;
	}
	;
	SC_flat_CloseVars(Self, OV);
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_BRA(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	Message* F = ((Message*)JB_Ring_First(Exp));
	if (F) {
		if (F->Func != JB_SyxArg) {
			return SC_flat_Reg(Self, F, Reg);
		}
		return SC_ASMtmp__StateExpr(Self, F, SC_int_Reg(0));
	}
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_BREL(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_DECL(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_FUNC(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	AsmReg Rz = ((AsmReg){});
	Rz = SC_flat_DoFunc(Self, ((Message*)JB_Ring_Last(Exp)), Reg);
	return Rz;
}

AsmReg SC_fn_asm_table_LIST(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_NUM(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_REL(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	AsmReg Rz = ((AsmReg){});
	uint64 OV = SC_flat_OpenVars(Self);
	Rz = SC_flat_DoRels(Self, ((Message*)JB_Ring_First(Exp)), Reg);
	SC_flat_CloseVars(Self, OV);
	return Rz;
}

AsmReg SC_fn_asm_table_THG(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	SCDecl* D = SC_Msg_AsDecl(Exp);
	if ((!D)) {
		debugger;
		return ((AsmReg){});
	}
	if (SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Const)) {
		debugger;
	}
	AsmReg R = D->DReg;
	if (R.Reg) {
		return R;
	}
	return SC_flat_AllocRegDecl(Self, Exp, D, Reg);
}

AsmReg SC_fn_asm_table_TMP(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[1592], false)) {
		return SC_ASMtmp__Debugger(Self, Exp, SC_int_Reg(0));
	}
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[1697], false)) {
		return SC_ASMtmp__If(Self, Exp, SC_int_Reg(0));
	}
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[1891], false)) {
		return SC_ASMtmp__Rejoin(Self, Exp, SC_int_Reg(0));
	}
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[1898], false)) {
		return SC_ASMtmp__Return(Self, Exp, SC_int_Reg(0));
	}
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[2047], false)) {
		return SC_ASMtmp__While(Self, Exp, SC_int_Reg(0));
	}
	if (true) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[1345]);
	}
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_TYPE(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

void SC_FuncLinkageTable_cpp_part(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	JB_FreeIfDead(SC_Base__LoadCppPart(Node, Name_space, Node));
}

void SC_FuncLinkageTable_cpp_wrapper(SCFunction* Fn, Message* Node, SCNode* Name_space) {
}

void SC_FuncLinkageTable_ignore(SCFunction* Fn, Message* Node, SCNode* Name_space) {
}

void SC_FuncLinkageTable_inline(SCFunction* Fn, Message* Node, SCNode* Name_space) {
}

void SC_FuncLinkageTable_visible(SCFunction* Fn, Message* Node, SCNode* Name_space) {
}

bool SC_FuncPreReader_description(SCFunction* Self, Message* Msg) {
	Message* Str = JB_Incr(JB_Msg_NeedSyx(Msg, JB_SyxStr));
	if (Str) {
		if (Self->IsDisabled) {
			if (true) {
				JB_Msg_SyntaxExpect(Msg, JB_LUB[631]);
			}
		}
		 else {
			if (JB_Str_Exists(Self->Description)) {
				JB_Msg_SyntaxExpect(Msg, JB_LUB[451]);
			}
			JB_SetRef(Self->Description, Str->Name);
		}
	}
	JB_Decr(Str);
	return false;
}

bool SC_FuncPreReader_disabled(SCFunction* Self, Message* Msg) {
	Self->IsDisabled = true;
	JB_SetRef(Self->Description, JB_LUB[688]);
	Message* S = ((Message*)JB_Ring_First(Msg));
	if (S) {
		JB_Msg_ExpectString(S);
		JB_SetRef(Self->Description, S->Name);
	}
	return false;
}

bool SC_FuncPreReader_nil(SCFunction* Self, Message* Msg) {
	Message* F = JB_Msg_NeedSyx(Msg, JB_SyxThg);
	if ((!F)) {
		return nil;
	}
	if (JB_Msg_SyntaxEquals(F, JB_LUB[1933], true)) {
		SC_Func_NilSelff(Self, Msg, kSC__NilState_Optional);
	}
	 else if (JB_Msg_SyntaxEquals(F, JB_LUB[1541], true)) {
		SC_Func_MakeNilChecker(Self, Msg);
	}
	 else if (JB_Msg_SyntaxEquals(F, JB_LUB[1916], true)) {
		SC_Func_MakeNilChecker(Self, Msg);
		Self->HidesProperties = true;
		Self->IsInline = true;
		(SC_SCObject_IsVisibleSet(Self, true));
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(F, nil);
		}
	}
	return false;
}

bool SC_FuncPreReader_numeric(SCFunction* Self, Message* Msg) {
	Message* F = ((Message*)JB_Ring_First(Msg));
	if (F) {
		if (true) {
			JB_Msg_SyntaxExpect(F, nil);
		}
	}
	(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_NumberCreator, true));
	return false;
}

bool SC_FuncPreReader_opt(SCFunction* Self, Message* Msg) {
	Message* F = JB_Msg_NeedSyx(Msg, JB_SyxThg);
	if (JB_Msg_SyntaxEquals(F, JB_LUB[1084], true)) {
		Self->NoRefCounts = true;
	}
	 else if (JB_Msg_SyntaxEquals(F, JB_LUB[1785], true)) {
		Message* Min = JB_Msg_NextOf(F, JB_SyxNum);
		if (Min) {
			Self->MinOpt = JB_Msg_Int(Min, 0);
		}
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(F, nil);
		}
	}
	return false;
}

bool SC_FuncPreReader_pragma(SCFunction* Self, Message* Msg) {
	Message* F = JB_Msg_NeedSyx(Msg, JB_SyxThg);
	if (F) {
		JB_Msg_ExpectLast(F, JB_LUB[0]);
		if (JB_Msg_SyntaxEquals(F, JB_LUB[1711], true)) {
			Self->IsInline = true;
		}
		 else {
			if (true) {
				JB_Msg_SyntaxExpect(F, nil);
			}
		}
	}
	return false;
}

bool SC_FuncPreReader_real(SCFunction* Self, Message* Msg) {
	Message* F = JB_Msg_NeedSyx(Msg, JB_SyxThg);
	if ((!F)) {
		return nil;
	}
	if (JB_Msg_SyntaxEquals(F, JB_LUB[1933], true)) {
		SC_Func_NilSelff(Self, Msg, kSC__NilState_Real);
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(F, nil);
		}
	}
	return false;
}

bool SC_FuncPreReader_todo(SCFunction* Self, Message* Msg) {
	JB_Msg_ExpectLast(JB_Msg_NeedSyx(Msg, JB_SyxNil), JB_LUB[0]);
	JB_Array_SyntaxAppend(SC__Comp_TodoList, Msg);
	return false;
}

int JB_Init_() {
	{
		JB_SetRef(JB___AppConfString, JB_LUB[1813]);
		JB_SetRef(JB_StdErr, JB_Rec_Constructor(nil));
		JB_SetRef(JB__JbinHeader, JB_LUB[4]);
		JB_SetRef(JB__jBinNotJbin, JB_LUB[1097]);
		JB_SetRef(JB__SyxDict_, JB_Dict_Constructor(nil));
		JB_SyxNil = JB_Syx__StdNew(JB_Msg_Nil__, JB_LUB[1810], JB_LUB[1378]);
		JB_SyxArg = JB_Syx__StdNew(JB_Msg_Arg__, JB_LUB[1487], JB_LUB[637]);
		JB_SyxEmb = JB_Syx__StdNew(JB_Msg_Emb__, JB_LUB[1624], JB_LUB[835]);
		JB_SyxType = JB_Syx__StdNew(JB_Msg_Type__, JB_LUB[2005], JB_LUB[1332]);
		JB_SyxDecl = JB_Syx__StdNew(JB_Msg_Decl__, JB_LUB[1593], JB_LUB[814]);
		JB_SyxTmp = JB_Syx__StdNew(JB_Msg_Tmp__, JB_LUB[1997], JB_LUB[1232]);
		JB_SyxOat = JB_Syx__StdNew(JB_Msg_Oat__, JB_LUB[1835], JB_LUB[1112]);
		JB_SyxQues = JB_Syx__StdNew(JB_Msg_Ques__, JB_LUB[1884], JB_LUB[1148]);
		JB_SyxCnj = JB_Syx__StdNew(JB_Msg_Cnj__, JB_LUB[1550], JB_LUB[1558]);
		JB_SyxOpp = JB_Syx__StdNew(JB_Msg_Opp__, JB_LUB[1851], JB_LUB[1110]);
		JB_SyxThg = JB_Syx__StdNew(JB_Msg_Thg__, JB_LUB[1994], JB_LUB[1278]);
		JB_SyxSheb = JB_Syx__StdNew(JB_Msg_Sheb__, JB_LUB[1943], JB_LUB[1216]);
		JB_SyxSCnj = JB_Syx__StdNew(JB_Msg_SCnj__, JB_LUB[1927], JB_LUB[1248]);
		JB_SyxSThg = JB_Syx__StdNew(JB_Msg_SThg__, JB_LUB[1965], JB_LUB[1247]);
		JB_SyxNum = JB_Syx__StdNew(JB_Msg_Num__, JB_LUB[1831], JB_LUB[1098]);
		JB_SyxSStr = JB_Syx__StdNew(JB_Msg_SStr__, JB_LUB[1955], JB_LUB[1244]);
		JB_SyxBack = JB_Syx__StdNew(JB_Msg_Back__, JB_LUB[1505], JB_LUB[654]);
		JB_SyxChar = JB_Syx__StdNew(JB_Msg_Char__, JB_LUB[1538], JB_LUB[759]);
		JB_SyxBin = JB_Syx__StdNew(JB_Msg_Bin__, JB_LUB[1516], JB_LUB[906]);
		JB_SyxStr = JB_Syx__StdNew(JB_Msg_Str__, JB_LUB[1966], JB_LUB[1236]);
		JB_SyxUnit = JB_Syx__StdNew(JB_Msg_Unit__, JB_LUB[2019], JB_LUB[0]);
		JB_SyxARel = JB_Syx__StdNew(JB_Msg_ARel__, JB_LUB[1486], JB_LUB[627]);
		JB_SyxName = JB_Syx__StdNew(JB_Msg_Name__, JB_LUB[1805], JB_LUB[0]);
		JB_SyxDot = JB_Syx__StdNew(JB_Msg_Dot__, JB_LUB[1618], JB_LUB[829]);
		JB_SyxSDot = JB_Syx__StdNew(JB_Msg_SDot__, JB_LUB[1930], JB_LUB[1212]);
		JB_SyxFunc = JB_Syx__StdNew(JB_Msg_Func__, JB_LUB[1670], JB_LUB[889]);
		JB_SyxBRel = JB_Syx__StdNew(JB_Msg_BRel__, JB_LUB[1526], JB_LUB[664]);
		JB_SyxAdj = JB_Syx__StdNew(JB_Msg_Adj__, JB_LUB[1476], JB_LUB[626]);
		JB_SyxBadj = JB_Syx__StdNew(JB_Msg_Badj__, JB_LUB[1508], JB_LUB[656]);
		JB_SyxAcc = JB_Syx__StdNew(JB_Msg_Acc__, JB_LUB[1472], JB_LUB[622]);
		JB_SyxItem = JB_Syx__StdNew(JB_Msg_Item__, JB_LUB[1731], JB_LUB[0]);
		JB_SyxBra = JB_Syx__StdNew(JB_Msg_Bra__, JB_LUB[1523], JB_LUB[673]);
		JB_SyxList = JB_Syx__StdNew(JB_Msg_List__, JB_LUB[1760], JB_LUB[0]);
		JB_SyxPrm = JB_Syx__StdNew(JB_Msg_Prm__, JB_LUB[1879], JB_LUB[1122]);
		JB_SyxArr = JB_Syx__StdNew(JB_Msg_Arr__, JB_LUB[1490], JB_LUB[638]);
		JB_SyxFile = JB_Syx__StdNew(JB_Msg_File__, JB_LUB[1650], JB_LUB[874]);
		JB_SyxQuot = JB_Syx__StdNew(JB_Msg_Quot__, JB_LUB[1887], JB_LUB[1150]);
		JB_SyxRel = JB_Syx__StdNew(JB_Msg_Rel__, JB_LUB[1892], JB_LUB[1171]);
		JB_SyxERel = JB_Syx__StdNew(JB_Msg_ERel__, JB_LUB[1630], JB_LUB[838]);
		JB_SyxTRel = JB_Syx__StdNew(JB_Msg_TRel__, JB_LUB[2000], JB_LUB[1267]);
		JB_SyxTril = JB_Syx__StdNew(JB_Msg_Tril__, JB_LUB[2003], JB_LUB[1268]);
		JB_Syxpinn = JB_Syx__StdNew(JB_Msg_pinn__, JB_LUB[1868], JB_LUB[1134]);
		JB_Syxbinn = JB_Syx__StdNew(JB_Msg_binn__, JB_LUB[1517], JB_LUB[920]);
		JB_SyxAsk = JB_Syx__StdNew(JB_Msg_Ask__, JB_LUB[1493], JB_LUB[0]);
		JB_SyxYoda = JB_Syx__StdNew(JB_Msg_Yoda__, JB_LUB[2065], JB_LUB[1397]);
		JB_SyxSCom = JB_Syx__StdNew(JB_Msg_SCom__, JB_LUB[1928], JB_LUB[1246]);
		JB_SyxMsg = JB_Syx__StdNew(JB_Msg_Msg__, JB_LUB[1802], JB_LUB[1008]);
		JB_SyxTodo = JB_Syx__StdNew(JB_Msg_Todo__, JB_LUB[1999], JB_LUB[1307]);
		JB_Syxurl = JB_Syx__StdNew(JB_Msg_url__, JB_LUB[2024], JB_LUB[1334]);
		JB_fn_asm_table[1] = (&SC_fn_asm_table_ARG);
		JB_fn_asm_table[4] = (&SC_fn_asm_table_DECL);
		JB_fn_asm_table[14] = (&SC_fn_asm_table_NUM);
		JB_fn_asm_table[37] = (&SC_fn_asm_table_REL);
		JB_fn_asm_table[10] = (&SC_fn_asm_table_THG);
		JB_fn_asm_table[31] = (&SC_fn_asm_table_BRA);
		JB_fn_asm_table[32] = (&SC_fn_asm_table_LIST);
		JB_fn_asm_table[25] = (&SC_fn_asm_table_FUNC);
		JB_fn_asm_table[29] = (&SC_fn_asm_table_ACC);
		JB_fn_asm_table[26] = (&SC_fn_asm_table_BREL);
		JB_fn_asm_table[21] = (&SC_fn_asm_table_AREL);
		JB_fn_asm_table[3] = (&SC_fn_asm_table_TYPE);
		JB_fn_asm_table[(kSC__ASMtmp_kDebugger)] = (&SC_ASMtmp__Debugger);
		JB_fn_asm_table[(kSC__ASMtmp_kIf)] = (&SC_ASMtmp__If);
		JB_fn_asm_table[(kSC__ASMtmp_kRejoin)] = (&SC_ASMtmp__Rejoin);
		JB_fn_asm_table[(kSC__ASMtmp_kReturn)] = (&SC_ASMtmp__Return);
		JB_fn_asm_table[(kSC__ASMtmp_kWhile)] = (&SC_ASMtmp__While);
		JB_fn_asm_table[5] = (&SC_fn_asm_table_TMP);
		JB_fn_asm_table[63] = (&SC_fn_asm_table_63);
		//;
		JB_SetRef(JB_C_Letters, JB_Str_CharSetWithBool(JB_LUB[619], true));
		JB_SetRef(JB_RootCollectTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf0 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCGame3D__Love))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1768], _tmPf0));
		JB_Decr(_tmPf0);
		DTWrap* _tmPf1 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1673], _tmPf1));
		JB_Decr(_tmPf1);
		DTWrap* _tmPf2 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1641], _tmPf2));
		JB_Decr(_tmPf2);
		DTWrap* _tmPf3 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1482], _tmPf3));
		JB_Decr(_tmPf3);
		DTWrap* _tmPf4 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1572], _tmPf4));
		JB_Decr(_tmPf4);
		DTWrap* _tmPf5 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1577], _tmPf5));
		JB_Decr(_tmPf5);
		DTWrap* _tmPf6 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1571], _tmPf6));
		JB_Decr(_tmPf6);
		DTWrap* _tmPf7 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1574], _tmPf7));
		JB_Decr(_tmPf7);
		DTWrap* _tmPf8 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewHelper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1691], _tmPf8));
		JB_Decr(_tmPf8);
		DTWrap* _tmPf9 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewMacro))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1775], _tmPf9));
		JB_Decr(_tmPf9);
		DTWrap* _tmPf10 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCThe__NewInsertion))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1714], _tmPf10));
		JB_Decr(_tmPf10);
		DTWrap* _tmPf11 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Comp__WrongConf))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1557], _tmPf11));
		JB_Decr(_tmPf11);
		DTWrap* _tmPf12 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_RootCollectTable_crash))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1578], _tmPf12));
		JB_Decr(_tmPf12);
		DTWrap* _tmPf13 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Mod__NeuModule))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1798], _tmPf13));
		JB_Decr(_tmPf13);
		DTWrap* _tmPf14 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_RootCollectTable_static))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1961], _tmPf14));
		JB_Decr(_tmPf14);
		DTWrap* _tmPf15 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCSelector__Neu))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1931], _tmPf15));
		JB_Decr(_tmPf15);
		DTWrap* _tmPf16 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NeuClass))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1544], _tmPf16));
		JB_Decr(_tmPf16);
		DTWrap* _tmPf17 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCTasks__NewTask))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1987], _tmPf17));
		JB_Decr(_tmPf17);
		DTWrap* _tmPf18 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCTasks__NewTask))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1771], _tmPf18));
		JB_Decr(_tmPf18);
		DTWrap* _tmPf19 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NeuRole))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1902], _tmPf19));
		JB_Decr(_tmPf19);
		DTWrap* _tmPf20 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SC_API__NewExportAPI))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1638], _tmPf20));
		JB_Decr(_tmPf20);
		DTWrap* _tmPf21 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCGame3D__NeuModel))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1796], _tmPf21));
		JB_Decr(_tmPf21);
		DTWrap* _tmPf22 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewProtoType))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1883], _tmPf22));
		JB_Decr(_tmPf22);
		DTWrap* _tmPf23 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewRender))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1894], _tmPf23));
		JB_Decr(_tmPf23);
		DTWrap* _tmPf24 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1705], _tmPf24));
		JB_Decr(_tmPf24);
		DTWrap* _tmPf25 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_InbuiltShellArgs__Collect))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1944], _tmPf25));
		JB_Decr(_tmPf25);
		DTWrap* _tmPf26 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__LoadSyntax))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1976], _tmPf26));
		JB_Decr(_tmPf26);
		DTWrap* _tmPf27 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefs__Linkage))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1758], _tmPf27));
		JB_Decr(_tmPf27);
		DTWrap* _tmPf28 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NewStruct))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1972], _tmPf28));
		JB_Decr(_tmPf28);
		DTWrap* _tmPf29 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__DataType))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1585], _tmPf29));
		JB_Decr(_tmPf29);
		DTWrap* _tmPf30 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__StoreExtend))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1640], _tmPf30));
		JB_Decr(_tmPf30);
		DTWrap* _tmPf31 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__StoreExtendModule))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1642], _tmPf31));
		JB_Decr(_tmPf31);
		DTWrap* _tmPf32 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_RootCollectTable_extends))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1643], _tmPf32));
		JB_Decr(_tmPf32);
		DTWrap* _tmPf33 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NeuMain))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1776], _tmPf33));
		JB_Decr(_tmPf33);
		DTWrap* _tmPf34 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NeuLibrary))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1750], _tmPf34));
		JB_Decr(_tmPf34);
		DTWrap* _tmPf35 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1699], _tmPf35));
		JB_Decr(_tmPf35);
		DTWrap* _tmPf36 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Base__LoadCppPart)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1575], _tmPf36));
		JB_Decr(_tmPf36);
		DTWrap* _tmPf37 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__ConstantCollector)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1562], _tmPf37));
		JB_Decr(_tmPf37);
		DTWrap* _tmPf38 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__ConstantCollector)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1656], _tmPf38));
		JB_Decr(_tmPf38);
		JB_SetRef(JB_ClsCollectTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf39 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewConstructor))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1563], _tmPf39));
		JB_Decr(_tmPf39);
		DTWrap* _tmPf40 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewDestructor))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1600], _tmPf40));
		JB_Decr(_tmPf40);
		DTWrap* _tmPf41 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewRender))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1894], _tmPf41));
		JB_Decr(_tmPf41);
		DTWrap* _tmPf42 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1673], _tmPf42));
		JB_Decr(_tmPf42);
		DTWrap* _tmPf43 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1641], _tmPf43));
		JB_Decr(_tmPf43);
		DTWrap* _tmPf44 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewHider))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1939], _tmPf44));
		JB_Decr(_tmPf44);
		DTWrap* _tmPf45 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1482], _tmPf45));
		JB_Decr(_tmPf45);
		DTWrap* _tmPf46 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewMacro))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1775], _tmPf46));
		JB_Decr(_tmPf46);
		DTWrap* _tmPf47 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewHelper))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1691], _tmPf47));
		JB_Decr(_tmPf47);
		DTWrap* _tmPf48 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Beh__NewActual))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1512], _tmPf48));
		JB_Decr(_tmPf48);
		DTWrap* _tmPf49 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Beh__NewActual))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1474], _tmPf49));
		JB_Decr(_tmPf49);
		DTWrap* _tmPf50 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Beh__NewVirtual))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[2035], _tmPf50));
		JB_Decr(_tmPf50);
		DTWrap* _tmPf51 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Iter__NeuIter))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1733], _tmPf51));
		JB_Decr(_tmPf51);
		DTWrap* _tmPf52 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NeuSyx))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1981], _tmPf52));
		JB_Decr(_tmPf52);
		DTWrap* _tmPf53 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1577], _tmPf53));
		JB_Decr(_tmPf53);
		DTWrap* _tmPf54 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1572], _tmPf54));
		JB_Decr(_tmPf54);
		DTWrap* _tmPf55 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewProtoType))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1883], _tmPf55));
		JB_Decr(_tmPf55);
		DTWrap* _tmPf56 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__LoadSyntax))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1976], _tmPf56));
		JB_Decr(_tmPf56);
		DTWrap* _tmPf57 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__LoadSyntax))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1845], _tmPf57));
		JB_Decr(_tmPf57);
		DTWrap* _tmPf58 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__ProcessAs))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1880], _tmPf58));
		JB_Decr(_tmPf58);
		DTWrap* _tmPf59 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefs__ReadIntoCppRefs))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1576], _tmPf59));
		JB_Decr(_tmPf59);
		DTWrap* _tmPf60 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefs__Linkage))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1758], _tmPf60));
		JB_Decr(_tmPf60);
		DTWrap* _tmPf61 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClsCollectTable_pragma))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1873], _tmPf61));
		JB_Decr(_tmPf61);
		DTWrap* _tmPf62 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NewInnerClass))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1544], _tmPf62));
		JB_Decr(_tmPf62);
		DTWrap* _tmPf63 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NewInnerClass))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1902], _tmPf63));
		JB_Decr(_tmPf63);
		DTWrap* _tmPf64 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCTasks__NewTask))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1987], _tmPf64));
		JB_Decr(_tmPf64);
		DTWrap* _tmPf65 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCTasks__NewTask))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1771], _tmPf65));
		JB_Decr(_tmPf65);
		DTWrap* _tmPf66 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__DoInitAfter)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1710], _tmPf66));
		JB_Decr(_tmPf66);
		DTWrap* _tmPf67 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1699], _tmPf67));
		JB_Decr(_tmPf67);
		DTWrap* _tmPf68 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1918], _tmPf68));
		JB_Decr(_tmPf68);
		DTWrap* _tmPf69 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1575], _tmPf69));
		JB_Decr(_tmPf69);
		DTWrap* _tmPf70 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1570], _tmPf70));
		JB_Decr(_tmPf70);
		DTWrap* _tmPf71 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1573], _tmPf71));
		JB_Decr(_tmPf71);
		DTWrap* _tmPf72 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1564], _tmPf72));
		JB_Decr(_tmPf72);
		DTWrap* _tmPf73 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Class__GetDefault)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1596], _tmPf73));
		JB_Decr(_tmPf73);
		DTWrap* _tmPf74 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Class__GetFalse)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1648], _tmPf74));
		JB_Decr(_tmPf74);
		DTWrap* _tmPf75 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Class__SetSize)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1948], _tmPf75));
		JB_Decr(_tmPf75);
		DTWrap* _tmPf76 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1798], _tmPf76));
		JB_Decr(_tmPf76);
		DTWrap* _tmPf77 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__ConstantCollector)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1562], _tmPf77));
		JB_Decr(_tmPf77);
		DTWrap* _tmPf78 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__ConstantCollector)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1656], _tmPf78));
		JB_Decr(_tmPf78);
		JB_SetRef(JB_kNameConf, JB_LUB[1044]);
		JB_SetRef(JB_ErrorDelayer, JB_Rec_Constructor(nil));
		JB_SetRef(JB_FuncPreReader, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf79 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_disabled))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1608], _tmPf79));
		JB_Decr(_tmPf79);
		DTWrap* _tmPf80 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_todo))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1999], _tmPf80));
		JB_Decr(_tmPf80);
		DTWrap* _tmPf81 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_pragma))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1873], _tmPf81));
		JB_Decr(_tmPf81);
		DTWrap* _tmPf82 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_numeric))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1832], _tmPf82));
		JB_Decr(_tmPf82);
		DTWrap* _tmPf83 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_opt))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1852], _tmPf83));
		JB_Decr(_tmPf83);
		DTWrap* _tmPf84 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_nil))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1810], _tmPf84));
		JB_Decr(_tmPf84);
		DTWrap* _tmPf85 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_real))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1890], _tmPf85));
		JB_Decr(_tmPf85);
		DTWrap* _tmPf86 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_description))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1599], _tmPf86));
		JB_Decr(_tmPf86);
		JB_ExprFuncs[37] = ((&SC_TypeOfRel));
		JB_ExprFuncs[26] = ((&SC_TypeOfBRel));
		JB_ExprFuncs[21] = ((&SC_TypeOfARel));
		JB_ExprFuncs[27] = ((&SC_TypeOfAdj));
		JB_ExprFuncs[25] = ((&SC_TypeOfFunc));
		JB_ExprFuncs[29] = ((&SC_TypeOfAccess));
		JB_ExprFuncs[46] = ((&SC_TypeOfMsg));
		JB_ExprFuncs[13] = ((&SC_TypeOfSthg));
		JB_ExprFuncs[23] = ((&SC_TypeOfDot));
		JB_ExprFuncs[22] = ((&SC_TypeOfSyx));
		JB_ExprFuncs[32] = ((&SC_TypeOfList));
		JB_ExprFuncs[34] = ((&SC_TypeOfArr));
		JB_ExprFuncs[1] = ((&SC_TypeOfArgArr));
		JB_ExprFuncs[17] = ((&SC_TypeOfChar));
		JB_ExprFuncs[15] = ((&SC_TypeOfSString));
		JB_ExprFuncs[30] = ((&SC_TypeOfLast));
		JB_ExprFuncs[31] = ((&SC_TypeOfBra));
		JB_ExprFuncs[19] = ((&SC_TypeOfStr));
		JB_ExprFuncs[16] = ((&SC_TypeOfStr));
		JB_ExprFuncs[14] = ((&SC_TypeOfNum));
		JB_ExprFuncs[20] = ((&SC_TypeOfUnit));
		JB_ExprFuncs[10] = ((&SC_TypeOfThg));
		JB_ExprFuncs[7] = ((&SC_TypeOfQues));
		JB_ExprFuncs[24] = ((&SC_TypeOfSDot));
		JB_ExprFuncs[3] = ((&SC_TypeOfType));
		JB_ExprFuncs[2] = ((&SC_TypeOfNothing));
		JB_ExprFuncs[11] = ((&SC_TypeOfNothing));
		JB_ExprFuncs[63] = ((&SC_TypeOfNothing));
		//;
		JB_SetRef(JB_CSHex, JB_Str_CharSetWithBool(JB_LUB[610], true));
		JB_SetRef(JB_CSNum, JB_Str_CharSetWithBool(JB_LUB[446], true));
		JB_SetRef(JB_CppRefTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf87 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefTable_disowns))));
		(JB_Dict_ValueSet(JB_CppRefTable, JB_LUB[1609], _tmPf87));
		JB_Decr(_tmPf87);
		DTWrap* _tmPf88 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefTable_disturbs))));
		(JB_Dict_ValueSet(JB_CppRefTable, JB_LUB[1613], _tmPf88));
		JB_Decr(_tmPf88);
		DTWrap* _tmPf89 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_CppRefs))));
		(JB_Dict_ValueSet(JB_CppRefTable, JB_LUB[1861], _tmPf89));
		JB_Decr(_tmPf89);
		JB_SetRef(JB_FuncLinkageTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf90 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_cpp_wrapper))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[1577], _tmPf90));
		JB_Decr(_tmPf90);
		DTWrap* _tmPf91 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_cpp_part))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[1575], _tmPf91));
		JB_Decr(_tmPf91);
		DTWrap* _tmPf92 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_CppRefs))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[1576], _tmPf92));
		JB_Decr(_tmPf92);
		DTWrap* _tmPf93 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_visible))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[2036], _tmPf93));
		JB_Decr(_tmPf93);
		DTWrap* _tmPf94 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_ignore))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[1699], _tmPf94));
		JB_Decr(_tmPf94);
		DTWrap* _tmPf95 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_inline))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[1711], _tmPf95));
		JB_Decr(_tmPf95);
		JB_SetRef(JB_ClassLinkageTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf96 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_cpp_wrapper))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1577], _tmPf96));
		JB_Decr(_tmPf96);
		DTWrap* _tmPf97 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_cpp_part))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1575], _tmPf97));
		JB_Decr(_tmPf97);
		DTWrap* _tmPf98 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_CppRefs))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1576], _tmPf98));
		JB_Decr(_tmPf98);
		DTWrap* _tmPf99 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_cpp_class))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1570], _tmPf99));
		JB_Decr(_tmPf99);
		DTWrap* _tmPf100 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_visible))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[2036], _tmPf100));
		JB_Decr(_tmPf100);
		DTWrap* _tmPf101 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_ignore))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1699], _tmPf101));
		JB_Decr(_tmPf101);
		DTWrap* _tmPf102 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_noearlyfree))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1819], _tmPf102));
		JB_Decr(_tmPf102);
		DTWrap* _tmPf103 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_wrapper))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[2051], _tmPf103));
		JB_Decr(_tmPf103);
		DTWrap* _tmPf104 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_datatype))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1585], _tmPf104));
		JB_Decr(_tmPf104);
		DTWrap* _tmPf105 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_numeric))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1832], _tmPf105));
		JB_Decr(_tmPf105);
		JB_SetRef(JB_fs_tmp_num, JB_FS_Constructor(nil));
		JB_SyxXAtt = JB_Syx__StdNew(JB_Msg_XAtt__, JB_LUB[2055], JB_LUB[1390]);
		JB_SyxXML = JB_Syx__StdNew(JB_Msg_XML__, JB_LUB[2058], JB_LUB[1393]);
		JB_SyxXPI = JB_Syx__StdNew(JB_Msg_XPI__, JB_LUB[2059], JB_LUB[1394]);
		JB_SyxXCom = JB_Syx__StdNew(JB_Msg_XCom__, JB_LUB[2057], JB_LUB[1392]);
		JB_SyxXCDT = JB_Syx__StdNew(JB_Msg_XCDT__, JB_LUB[2056], JB_LUB[1391]);
		JB_SyxXTxt = JB_Syx__StdNew(JB_Msg_XTxt__, JB_LUB[2060], JB_LUB[1395]);
		JB_Syxmax = JB_Syx__StdNew(JB_Msg_max__, JB_LUB[1779], JB_LUB[837]);
	}
	;
	//// App;
	JB_App__Init_();
	//// AutoComplete;
	SC_AutoComplete__Init_();
	//// Compiler;
	SC_Comp__Init_();
	//// ErrorColors;
	JB_ErrorColors__Init_();
	//// FastStringOpts;
	SC_FastStringOpts__Init_();
	//// Feedback;
	SC_FB__Init_();
	//// Interact;
	SC_AC__Init_();
	//// JB_API;
	JB_API__Init_();
	//// Jeebox;
	JB_Constants__Init_();
	//// LinkMap;
	SC_LinkMap__Init_();
	//// Linkage;
	SC_Linkage__Init_();
	//// Macros;
	SC_Macros__Init_();
	//// Options;
	SC_Options__Init_();
	//// PackMaker;
	SC_PackMaker__Init_();
	//// SCGame3D;
	SC_SCGame3D__Init_();
	//// SCGlobals;
	SC__Init_();
	//// SCTasks;
	SC_SCTasks__Init_();
	//// SC_Errors;
	SC_Errors__Init_();
	//// SC_Targets;
	SC_SC_Targets__Init_();
	//// StringCorrector;
	SC_Crkt__Init_();
	//// Terminal;
	JB_Terminal__Init_();
	//// TransCompiler;
	SC_Ext__Init_();
	//// TreeAssembler;
	SC_TreeAssembler__Init_();
	//// VM_Builder;
	SC_VM_Builder__Init_();
	//// __junktest_5__;
	SC___junktest_5____Init_();
	//// parser;
	JB_Tk__Init_();
	//// zalgo;
	JB_zalgo__Init_();
	//// ErrorSeverity;
	JB_ErrorSeverity__Init_();
	//// NilReason;
	SC_NilReason__Init_();
	//// Syntax;
	JB_Syx__Init_();
	//// ASM;
	SC_ASM__Init_();
	//// ASMFuncState;
	SC_flat__Init_();
	//// ArchonPurger;
	SC_nil__Init_();
	//// CompressionStats;
	JB_MzSt__Init_();
	//// IR;
	SC_IR__Init_();
	//// IsaTester;
	SC_IsaTester__Init_();
	//// Random;
	JB_Rnd__Init_();
	//// Cpp_Export;
	SC_Cpp__Init_();
	//// ErrorReceiver;
	JB_Rec__Init_();
	//// FlowControl;
	JB_Flow__Init_();
	//// Macro;
	JB_Macro__Init_();
	//// NilTest;
	SC_NilTest__Init_();
	//// SCImport;
	SC_Imp__Init_();
	//// SCOperator;
	SC_Opp__Init_();
	//// µForm;
	SC_xC2xB5Form__Init_();
	//// File;
	JB_File__Init_();
	//// SCNode;
	SC_Base__Init_();
	//// Error;
	JB_Err__Init_();
	//// SCFunction;
	SC_Func__Init_();
	//// Instruction;
	SC_Instruction__Init_();
	JB_InitCode_();
	return 0;
}

int JB_InitCode_() {
	{
	}
	;
	SC__ASM_Forms[1] = (&JB_ASM_U0__Encode);
	SC__ASM_Forms[2] = (&JB_ASM_U1__Encode);
	SC__ASM_Forms[3] = (&JB_ASM_U2__Encode);
	SC__ASM_Forms[4] = (&JB_ASM_U3__Encode);
	SC__ASM_Forms[5] = (&JB_ASM_U4__Encode);
	SC__ASM_Forms[6] = (&JB_ASM_Func__Encode);
	SC__ASM_Forms[7] = (&JB_ASM_Cmp__Encode);
	SC__ASM_Forms[8] = (&JB_ASM_CmpEq__Encode);
	SC__ASM_Forms[9] = (&JB_ASM_Const__Encode);
	SC__ASM_Forms[10] = (&JB_ASM_Bra__Encode);
	SC__ASM_Forms[11] = (&JB_ASM_Mem__Encode);
	SC__ASM_Forms[12] = (&JB_ASM_Setn__Encode);
	SC__ASM_Forms[13] = (&JB_ASM_CNTR__Encode);
	SC__ASM_Forms[14] = (&JB_ASM_CNTC__Encode);
	SC__ASM_Forms[15] = (&JB_ASM_BFLD__Encode);
	SC__ASM_Forms[16] = (&JB_ASM_SWAP__Encode);
	//// Jeebox;
	JB_Constants__InitCode_();
	//// parser;
	JB_Tk__InitCode_();
	//// ArchonPurger;
	SC_nil__InitCode_();
	//// Random;
	JB_Rnd__InitCode_();
	//// MaterialsLol;
	SC_MaterialsLol__InitCode_();
	//// SCIterator;
	SC_Iter__InitCode_();
	//// SpdProcess;
	JB_Proc__InitCode_();
	//// SCFunction;
	SC_Func__InitCode_();
	return 0;
}

SCDecl* SC_IsPointerMath(SCDecl* L, SCDecl* R, SCOperator* Opp, Message* Exp) {
	if ((!SC_Opp_SyntaxIs(Opp, kSC__OpMode_Addition))) {
		return nil;
	}
	if (((bool)L->PointerCount) and (SC_Decl_IsNumeric(R) == 1)) {
		return L;
	}
	if (((bool)R->PointerCount) and (SC_Decl_IsNumeric(L) == 1)) {
		return R;
	}
	if (((bool)R->PointerCount) and (((bool)L->PointerCount) and ((JB_Str_Equals(Opp->Name, JB_LUB[306], false))))) {
		JB_FreeIfDead(SC_Decl_ExpectMatch(L, R, 0, Exp, nil));
		return JB_TypeInt->TypeNormal;
	}
	return nil;
}

void SC_ListFunctionsSub(JB_Object* O, Array* Rz) {
	if (JB_Object_FastIsa(O, &SCDeclData)) {
		O = ((SCDecl*)((SCDecl*)O)->HiderFunc);
	}
	if (JB_Object_FastIsa(O, &SCFunctionData)) {
		{
			SCFunction* F = ((SCFunction*)O);
			while (F) {
				JB_Array_SyntaxAppend(Rz, F);
				F = F->NextFunc;
			};
		};
	}
}

SCDecl* SC_LowlevelArrayTransform(Message* Exp, SCClass* Cls) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* Ty = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_NextSib(Ty)));
	Message* Prms = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (JB_Msg_EqualsSyx(Prms, JB_SyxOpp, false)) {
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(Prms)));
		JB_Tree_SyntaxAppend(Prms, _tmPf2);
		JB_Decr(_tmPf2);
		JB_SetRef(Prms->Name, JB_LUB[0]);
	}
	JB_Msg_BecomeStr(Exp, JB_SyxDot, JB_LUB[1836]);
	JB_SetRef(Ty->Name, JB_LUB[1783]);
	JB_Decr(Ty);
	Prms->Func = JB_SyxPrm;
	JB_Msg_AppendNum(Prms, SC_Class_CalculateSize(Cls, 0));
	JB_Decr(Prms);
	SCDecl* MemWrapper = JB_Incr(SC_TypeOfExpr(Exp, SC__Comp_program, nil));
	if ((!MemWrapper)) {
		JB_Decr(MemWrapper);
		return nil;
	}
	JB_SetRef(MemWrapper, SC_Decl_CopyDecl(MemWrapper, false));
	(SC_Decl_SyntaxIsSet(MemWrapper, kSC__SCDeclInfo_NewlyCreated, true));
	JB_SetRef(MemWrapper->Contains, Cls->TypeOptional);
	JB_SafeDecr(MemWrapper);
	return MemWrapper;
}

Message* SC_MakeDecl(JB_String* Type, JB_String* Name, Message* Value, SCDeclInfo Purpose) {
	Message* Rz = nil;
	Rz = (JB_Syx_Msg(JB_SyxDecl, JB_LUB[0]));
	Message* F = JB_Msg_Msg(Rz, JB_SyxArg, JB_LUB[0]);
	if (JB_Str_Exists(Type)) {
		(JB_Msg_SyntaxIsSet(F, kJB__MsgParseFlags_Style2, true));
		JB_Msg_AppendSyx(F, JB_SyxThg, Type);
	}
	 else {
		F->Func = JB_SyxEmb;
	}
	if ((!Value)) {
		JB_Msg_AppendSyx(Rz, JB_SyxThg, Name);
		return Rz;
	}
	Message* Rel = JB_Msg_Msg(Rz, JB_SyxRel, JB_LUB[0]);
	Message* NameMsg = JB_Msg_Msg(Rel, JB_SyxThg, Name);
	JB_Msg_AppendSyx(Rel, JB_SyxOpp, JB_LUB[586]);
	JB_Tree_SyntaxAppend(Rel, Value);
	SCDecl* O = ((SCDecl*)JB_Object_FastAs(Value->Obj, &SCDeclData));
	if (O) {
		SCDecl* Dcl = SC_Decl_CopyDecl(O, true);
		Dcl->Info = (Dcl->Info | Purpose);
		(SC_Decl_NameSet(Dcl, Name));
		JB_SetRef(Dcl->Default, Value);
		JB_SetRef(NameMsg->Obj, Dcl);
		JB_SetRef(Rel->Obj, Dcl);
		JB_SetRef(Rz->Obj, Dcl);
		JB_SetRef(F->Obj, Dcl);
	}
	return Rz;
}

Message* SC_MakeDeclOrRel(Message* Into, Message* Namemsg, Message* Value) {
	JB_Incr(Value);
	Message* Rz = nil;
	if ((!Into)) {
		JB_Decr(Value);
		JB_Decr(Rz);
		return nil;
	}
	JB_SetRef(Rz, ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxDecl, JB_LUB[0])));
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf1));
		JB_Decr(_tmPf1);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	if (Value) {
		JB_SetRef(Value, SC_NewEqRelWithMsgMsg(Namemsg, Value));
	}
	 else {
		JB_SetRef(Value, Namemsg);
	}
	JB_Tree_SyntaxAppend(Rz, Value);
	JB_Decr(Value);
	(JB_Ring_FirstSet(Into, Rz));
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_MoveFutureStaticsIn(Message* Msg) {
	if ((!Msg)) {
		return;
	}
	{
		Message* _LoopSrcf1 = ((Message*)JB_Ring_NextSib(Msg));
		Message* Ch = _LoopSrcf1;
		while (Ch) {
			if (SC_Msg_OperatorIsTmp(Ch, JB_LUB[1798])) {
				SC_Msg_AppendAllInto(JB_Msg_Last(Ch, JB_SyxArg), ((Message*)JB_Ring_Last(Msg)));
			}
			Ch = ((Message*)JB_Ring_NextSib(Ch));
		};
		;
	};
}

Message* SC_NewDeclWithStrStr(JB_String* Type, JB_String* Name) {
	Message* Msg = ((Message*)JB_Ternary(JB_Str_Exists(Name), JB_Syx_OperatorPlus(JB_SyxThg, Name), nil));
	return SC_NewDeclWithStrMsg(Type, Msg);
}

Message* SC_NewDeclWithStrMsg(JB_String* Type, Message* RelOrName) {
	Message* Rz = nil;
	Rz = JB_Syx_Msg(JB_SyxDecl, JB_LUB[0]);
	if (JB_Str_Exists(Type)) {
		JB_Msg_AppendSyx(Rz, JB_SyxThg, Type);
	}
	 else {
		JB_Msg_AppendSyx(Rz, JB_SyxEmb, JB_LUB[0]);
	}
	JB_Tree_SyntaxAppend(Rz, RelOrName);
	return Rz;
}

Message* SC_NewDeclNum(SCDecl* D, int64 N, JB_String* VarName) {
	Message* Rz = nil;
	Rz = JB_int64_Msg(N);
	JB_SetRef(Rz->Obj, D);
	JB_SetRef(D->Type, JB_TypeInt);
	if ((N < JB_int__Min()) or (N > JB_int__Max())) {
		JB_SetRef(D->Type, JB_TypeInt64);
	}
	(SC_Decl_NameSet(D, VarName));
	if (JB_Str_Exists(VarName)) {
		JB_SetRef(D->Default, Rz);
	}
	return Rz;
}

Message* SC_NewEqRelWithStrStr(JB_String* L, JB_String* R) {
	Message* Rz = nil;
	Rz = JB_Syx_Msg(JB_SyxRel, JB_LUB[0]);
	JB_Msg_AppendSyx(Rz, JB_SyxThg, L);
	JB_Msg_AppendSyx(Rz, JB_SyxOpp, JB_LUB[586]);
	JB_Msg_AppendSyx(Rz, JB_SyxThg, R);
	(SC_Msg_TmpTypeSet(Rz, kSC__ASMtmp_kSetVar));
	return Rz;
}

Message* SC_NewEqRelWithMsgMsg(Message* L, Message* R) {
	Message* Rz = nil;
	Rz = SC_NewRel(L, R, JB_LUB[586]);
	(SC_Msg_TmpTypeSet(Rz, kSC__ASMtmp_kSetVar));
	return Rz;
}

Message* SC_NewFnc(JB_String* Name) {
	Message* Rz = nil;
	Rz = JB_Syx_Msg(JB_SyxFunc, JB_LUB[0]);
	JB_Msg_AppendSyx(Rz, JB_SyxThg, Name);
	JB_Msg_AppendSyx(Rz, JB_SyxPrm, JB_LUB[0]);
	return Rz;
}

Message* SC_NewRejoin() {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1891]));
	(SC_Msg_TmpTypeSet(Rz, kSC__ASMtmp_kRejoin));
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_NewRel(Message* L, Message* R, JB_String* Op) {
	Message* Rz = nil;
	Rz = JB_Syx_Msg(JB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Rz, L);
	JB_Msg_AppendSyx(Rz, JB_SyxOpp, Op);
	JB_Tree_SyntaxAppend(Rz, R);
	return Rz;
}

NilState SC_NilSyxes_63(Message* Msg, NilCheckMode Test) {
	0;
	return 0;
}

NilState SC_NilTmps_63(Message* Msg, NilCheckMode Test) {
	0;
	return 0;
}

SCDecl* SC_Or_And_Expansion(SCDecl* LC, SCDecl* RC, Message* Exp, SCNode* Name_space) {
	bool LBool = SC_Decl_MiniMatch(LC, JB_TypeBool->TypeNormal, kJB_kTypeCastFalse);
	bool RBool = SC_Decl_MiniMatch(RC, JB_TypeBool->TypeNormal, kJB_kTypeCastFalse);
	if (RBool and LBool) {
		return LC;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* Ch0 = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(Ch0)));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_NextSib(_tmPf2)));
	JB_Decr(_tmPf2);
	Message* Ch2 = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if ((!LBool)) {
		JB_FreeIfDead(SC_ExpandToBool(Ch0, Name_space));
	}
	JB_Decr(Ch0);
	if ((!RBool)) {
		JB_FreeIfDead(SC_ExpandToBool(Ch2, Name_space));
	}
	JB_Decr(Ch2);
	return JB_TypeBool->TypeNormal;
}

void JB_Obj_Print(JB_Object* O) {
	JB_String* _tmPf0 = JB_Incr(JB_ObjRender(O, nil));
	JB_Str_Print(_tmPf0);
	JB_Decr(_tmPf0);
}

void JB_PrintLine(JB_String* Data) {
	JB_Str_PrintLine(Data);
}

void JB_Obj_PrintLine(JB_Object* O) {
	JB_String* _tmPf0 = JB_Incr(JB_ObjRender(O, nil));
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
}

void SC_RelSetOrExpansion(Message* Exp) {
	Message* L = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* R = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
	JB_Tree_Clear(Exp);
	SC_Msg_AppendAllInto(L, Exp);
	JB_Decr(L);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(R)));
	Message* Cond = JB_Incr(JB_Msg_Copy(_tmPf2, nil));
	JB_Decr(_tmPf2);
	Message* Tmp = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1697])));
	Message* _tmPf3 = JB_Incr(SC_Msg_Negate(Cond));
	JB_Decr(Cond);
	JB_Tree_SyntaxAppend(Tmp, _tmPf3);
	JB_Decr(_tmPf3);
	Message* _tmPf4 = ({
		Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
		JB_Tree_SyntaxAppend(__imPf1, R);
		JB_SafeDecr(nil);
		 __imPf1;
	});
	JB_Decr(R);
	JB_Tree_SyntaxAppend(Tmp, _tmPf4);
	JB_Decr(_tmPf4);
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(Exp)));
	Message* _tmPf5 = JB_Incr(((Message*)JB_Ternary((JB_Msg_EqualsSyx(P, JB_SyxDecl, false)), P, Exp)));
	JB_Decr(P);
	(JB_Ring_NextSibSet((_tmPf5), Tmp));
	JB_Decr(Tmp);
	JB_Decr(_tmPf5);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

SCNode* SC_RootCollectTable_crash(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_String* _tmPf0 = JB_Incr(JB_Msg_FirstName(Node));
	JB_App__Crash(_tmPf0);
	JB_Decr(_tmPf0);
	return nil;
}

SCNode* SC_RootCollectTable_extends(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (true) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[909]);
	}
	return SC__Comp_program;
}

SCNode* SC_RootCollectTable_static(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (true) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1964]);
	}
	return nil;
}

SCDecl* SC_SameTypeSub(Message* First, Message* Second, SCNode* Name_space) {
	SCDecl* Rz = nil;
	SCDecl* T1 = JB_Incr(SC_TypeOfExpr(First, Name_space, nil));
	SCDecl* T2 = JB_Incr(SC_TypeOfExpr(Second, Name_space, nil));
	if ((!(((bool)T1) and ((bool)T2)))) {
		JB_Decr(T2);
		JB_Decr(T1);
		JB_Decr(Rz);
		return nil;
	}
	if (SC_Decl_IsNil(T1)) {
		SC_Decl_TypeMatch(T2, T1, kJB_kTypeCastTrue, First);
		JB_Decr(T1);
		JB_Decr(Rz);
		JB_SafeDecr(T2);
		return T2;
	}
	if (SC_Decl_IsNil(T2)) {
		SC_Decl_TypeMatch(T1, T2, kJB_kTypeCastTrue, Second);
		JB_Decr(T2);
		JB_Decr(Rz);
		JB_SafeDecr(T1);
		return T1;
	}
	bool Obj1 = SC_Decl_IsNormalObject(T1);
	bool Obj2 = SC_Decl_IsNormalObject(T2);
	if (Obj1 and Obj2) {
		0;
	}
	 else if ((!Obj1) and (!Obj2)) {
		JB_SetRef(Rz, SC_Decl_Better_Numeric(T1, T2, 0));
	}
	 else if (Obj1) {
		JB_SetRef(T2, SC_Decl_NewWrapper(T2, T2));
	}
	 else {
		JB_SetRef(T1, SC_Decl_NewWrapper(T1, T1));
	}
	if ((!Rz)) {
		JB_SetRef(Rz, SC_Decl_HighestMatch(T1, T2, First));
		if ((!Rz)) {
			JB_Decr(T2);
			JB_Decr(Rz);
			JB_SafeDecr(T1);
			return T1;
		}
	}
	if (Rz != T2) {
		JB_FreeIfDead(SC_Decl_CreateSimpleTypeCast(Rz, Second));
	}
	JB_Decr(T2);
	if (Rz != T1) {
		JB_FreeIfDead(SC_Decl_CreateSimpleTypeCast(Rz, First));
	}
	JB_Decr(T1);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_SC_MakeComment(Message* Msg) {
	if ((!JB_Msg_EqualsSyx(Msg, JB_SyxTmp, false))) {
		JB_Object_SyntaxExpect(nil);
		return;
	}
	Msg->Func = JB_SyxSheb;
	JB_Tree_Clear(Msg);
}

bool SC_SCNodeSorter(JB_Object* A, JB_Object* B) {
	return JB_Str_CompareStr(((SCNode*)A)->ExportName, ((SCNode*)B)->ExportName, false) <= -1;
}

Message* SC_SettingAProperty(Message* Rel) {
	if ((!SC_Msg_IsSetRel(Rel))) {
		return nil;
	}
	Message* F = ((Message*)JB_Ring_First(Rel));
	if (((bool)F) and ((bool)SC_Msg_DotType(F))) {
		return F;
	}
	return nil;
}

bool SC_SettingMemory(Message* Rel) {
	if ((!SC_Msg_IsSetRel(Rel))) {
		return nil;
	}
	Message* F = ((Message*)JB_Ring_First(Rel));
	if (F) {
		DotUseType D = SC_Msg_SetType(F);
		if (D) {
			return true;
		}
	}
	return false;
}

bool SC_SettingSelfProperty(Message* Rel) {
	Message* Dot = SC_SettingAProperty(Rel);
	if (Dot) {
		return (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(Dot)), JB_LUB[1933]));
	}
	return false;
}

Array* SC_SortInitOrder(Array* Mods) {
	Array* Rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	while (SC_SortInitOrderSub(Mods, Rz)) {
		0;
	};
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_SortInitOrderSub(Array* Mods, Array* Out) {
	SCModule* Failed = nil;
	bool GotAny = false;
	{
		int _if0 = 0;
		while (true) {
			SCModule* M = ((SCModule*)JB_Array_Value(Mods, _if0));
			if (M == nil) {
				break;
			}
			if ((!JB_Rec_OK(JB_StdErr))) {
				return nil;
			}
			if ((!M->Inited)) {
				if (SC_Mod_TryInit(M, Out)) {
					GotAny = true;
				}
				 else {
					Failed = M;
				}
			}
			_if0++;
		};
	}
	;
	if ((!(GotAny or (!Failed)))) {
		JB_Msg_SyntaxExpect(Failed->Source, JB_LUB[1029]);
		return nil;
	}
	return ((bool)Failed);
}

__lib__ ErrorInt Speedie_Main(PicoComms* Comms, int Mode, _cstring* Args) {
	ErrorInt Rz = 0;
	JB__Pico_Parent_ = Comms;
	Rz = JB_SP_Run(Args, Mode & 4);
	PicoCommsConf(Comms)->Name = JB_Str_SyntaxCast(JB_LUB[1227]);
	if (Rz == 0) {
		Rz = JB_SP_Run(Args, Mode);
	}
	return Rz;
}

Message* SC_SpellOutMsg(Message* Type, Message* Exp, Message* Namemsg) {
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
	Message* Result = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1802])));
	JB_Tree_SyntaxAppend(Result, Type);
	Message* _tmPf2 = ({
		Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		JB_Tree_SyntaxAppend(__imPf1, Namemsg);
		JB_SafeDecr(nil);
		 __imPf1;
	});
	JB_Tree_SyntaxAppend(Result, _tmPf2);
	JB_Decr(_tmPf2);
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1261], Type->Name));
	JB_Msg_BecomeStr(Type, JB_SyxThg, _tmPf3);
	JB_Decr(_tmPf3);
	Exp->Func = JB_SyxBra;
	(JB_Ring_FirstSet(Exp, Result));
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_SafeDecr(Result);
	JB_MsgPos_Destructor((&_usingf0));
	return Result;
}

void SC_TemporalStatements_alert(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (true) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[908]);
	}
}

void SC_TemporalStatements_break(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (true) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[259]);
	}
}

void SC_TemporalStatements_crash(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	JB_String* _tmPf0 = JB_Incr(JB_Msg_FirstName(Node));
	JB_App__Crash(_tmPf0);
	JB_Decr(_tmPf0);
}

void SC_TemporalStatements_do(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (true) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[260]);
	}
}

void SC_TemporalStatements_ignore(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	(JB_Tree_Remove(Node));
}

bool SC_TooManyErrors() {
	return JB_StdErr->ErrorCount >= 50;
}

void SC_Tran_ArgArray(Message* Exp, SCNode* Name_space, SCDecl* Decl) {
	//visible;
	Message* Thg = JB_Incr(SC_Msg_IsSetIntoVar(Exp));
	if ((!Thg)) {
		if ((!JB_Msg_OperatorIn(Exp, JB_SyxSheb))) {
			JB_Msg_SyntaxExpect(Exp, nil);
		}
		JB_Decr(Thg);
		return;
	}
	Message* Rel = JB_Incr(SC_Msg_NiceParent(Exp));
	JB_Msg_Expect(Rel, JB_SyxRel, nil);
	Message* _tmPf3 = JB_Incr(SC_Msg_ParentPoint(Rel));
	Message* Place = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	SCDecl* D = JB_Incr(SC_Msg_AsDecl(Thg));
	if (D) {
		JB_SetRef(D->Default, nil);
	}
	JB_Decr(D);
	Rel->Func = JB_SyxSheb;
	if (Place == Rel) {
		(JB_Ring_NextSibSet(Rel, Thg));
		JB_SetRef(Place, Thg);
	}
	 else {
		JB_FreeIfDead(SC_Msg_ReplaceWith(Rel, Thg));
		(JB_Ring_NextSibSet(Place, Rel));
		Exp->Func = JB_SyxStr;
	}
	JB_Decr(Rel);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
	ArgArrayCounter Counter = ((ArgArrayCounter){});
	{
		Message* Itm = JB_Incr(((Message*)JB_Ring_First(Exp)));
		while (Itm) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(Itm)));
			Message* Rel2 = JB_Incr(SC_ArgArrayCounter_Do((&Counter), Thg->Name, Itm, Name_space));
			(JB_Ring_NextSibSet(Place, Rel2));
			JB_SetRef(Place, Rel2);
			JB_Decr(Rel2);
			JB_SetRef(Itm, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(Itm);
		;
	}
	;
	JB_Decr(Thg);
	JB_Decr(Place);
	SC_ArgArrayCounter_Check((&Counter), Exp);
	if (Counter.IsItem) {
		int C = Counter.max + 1;
		if (C >= 16384) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[1316]);
		}
		Decl->C_Array = C;
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Tran_Flow(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if ((!Fn)) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1107]);
		return;
	}
	Message* Msg = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxThg));
	if ((!Msg)) {
		JB_Decr(Msg);
		return;
	}
	JB_Msg_ExpectLast(Msg, JB_LUB[0]);
	SC_Msg_SafeRemove(Node, JB_SyxSheb);
	if ((!JB_Msg_SyntaxEquals(Msg, JB_LUB[1839], false))) {
		JB_Msg_SyntaxExpect(Msg, JB_LUB[1106]);
	}
	JB_Decr(Msg);
	Fn->FlowDisabled = true;
}

void SC_Tran_Msg(SCFunction* Fn, Message* Exp, SCNode* Name_space) {
	JB_Incr(Name_space);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* Type = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(Type)));
	Message* NameMsg = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	if (JB_Tree_OperatorLessOrEqual(Exp, 1)) {
		Message* Mini = JB_Incr(SC_SpellOutMsg(Type, Exp, NameMsg));
		JB_FreeIfDead(SC_TypeOfExpr(Mini, Name_space, nil));
		JB_Decr(Mini);
		JB_Decr(Name_space);
		JB_Decr(NameMsg);
		JB_Decr(Type);
		return;
	}
	Message* Itm = JB_Incr(((Message*)JB_Ring_NextSib(Type)));
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(Exp)));
	JB_Decr(P);
	NameAndMsg Place = SC_Msg_IntoVariable(Exp, Name_space);
	if (Place.Arg) {
		JB_SetRef(Name_space, SC_Msg_SCArg(Place.Arg, Name_space, nil));
		if (Name_space) {
			Message* Result = JB_Incr(SC_SpellOutMsg(Type, Exp, NameMsg));
			while (Itm) {
				Message* NextItm = JB_Incr(((Message*)JB_Ring_NextSib(Itm)));
				//using;
				MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Itm);
				Message* Line = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1250])));
				Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Place.Name));
				JB_Tree_SyntaxAppend(Line, (_tmPf4));
				JB_Decr(_tmPf4);
				Message* _tmPf5 = ({
					Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
					JB_Tree_SyntaxAppend(__imPf1, Itm);
					JB_SafeDecr(nil);
					 __imPf1;
				});
				JB_Tree_SyntaxAppend(Line, _tmPf5);
				JB_Decr(_tmPf5);
				SC_NameAndMsg_SyntaxAppend((&Place), Line);
				JB_FreeIfDead(SC_TypeOfExpr(Line, Name_space, nil));
				SC_Func__Tran_All(Fn, Line, Name_space);
				JB_Decr(Line);
				JB_SetRef(Itm, NextItm);
				JB_Decr(NextItm);
				JB_MsgPos_SyntaxUsingComplete((&_usingf0));
				JB_MsgPos_Destructor((&_usingf0));
			};
			JB_FreeIfDead(SC_TypeOfExpr(Result, Name_space, nil));
			JB_Decr(Result);
		}
	}
	JB_Decr(Type);
	JB_Decr(NameMsg);
	JB_Decr(Itm);
	JB_Decr(Name_space);
	SC_NameAndMsg_Destructor((&Place));
}

void SC_Tran_MsgList(SCFunction* Fn, Message* Exp, SCNode* Name_space) {
	if (true) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[1367]);
	}
	SC__Func_DisabledPoints++;
}

SCObject* SC_TranNegate(Message* F, SCNode* Name_space) {
	F = SC_ExpandToBool(F, Name_space);
	if ((!F)) {
		return nil;
	}
	JB_Object* D = F->Obj;
	if (JB_Object_FastIsa(D, &SCDeclData)) {
		if (SC_Decl_IsConstOf(((SCDecl*)D), JB_FalseBool)) {
			return JB_TrueBool;
		}
		if (SC_Decl_IsConstOf(((SCDecl*)D), JB_TrueBool)) {
			return JB_FalseBool;
		}
	}
	return JB_TypeBool->TypeNormal;
}

SCObject* SC_TranRender(Message* Exp, SCNode* Name_space) {
	JB_Msg_BecomeStr(Exp, JB_SyxDot, JB_LUB[1174]);
	JB_FreeIfDead(JB_Msg_Msg(Exp, JB_SyxPrm, JB_LUB[0]));
	return SC_TypeOfExpr(Exp, Name_space, nil);
}

SCObject* SC_TypeOfAccess(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* Ch = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	SCObject* Ty0 = JB_Incr(SC_TypeOfExprModulesOK(Ch, Name_space, nil));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
	Message* Arr = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (JB_Object_FastIsa(Ty0, &SCModuleData)) {
		SCClass* Cls = JB_Incr(((SCModule*)Ty0)->Cls);
		if (((bool)Cls) and (SC_Class_IsMArray(Cls, Arr) and SC_Msg_ExpectMatch(((Message*)JB_Ring_First(Arr)), Name_space, JB_TypeInt))) {
			SCDecl* _tmPf6 = JB_Incr(SC_LowlevelArrayTransform(Exp, Cls));
			JB_Decr(Cls);
			JB_Decr(Arr);
			JB_Decr(Ty0);
			JB_Decr(Ch);
			JB_SafeDecr(_tmPf6);
			return _tmPf6;
		}
		JB_Decr(Cls);
	}
	 else if ((JB_Object_FastIsa(Ty0, &SCDeclData)) and (JB_Tree_HasOneChild(Arr))) {
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(Arr)));
		Message* Index = JB_Incr(_tmPf2);
		JB_Decr(_tmPf2);
		SCDecl* Access = JB_Incr(SC_TypeOfExpr(Index, Name_space, nil));
		if ((!Access)) {
			JB_Decr(Access);
			JB_Decr(Index);
			JB_Decr(Arr);
			JB_Decr(Ty0);
			JB_Decr(Ch);
			return nil;
		}
		int W = SC_Decl_IsNumeric(((SCDecl*)Ty0));
		if (W > 1) {
			if ((!SC_Msg_ExpectInt(Index, Access))) {
				JB_Decr(Access);
				JB_Decr(Index);
				JB_Decr(Arr);
				JB_Decr(Ty0);
				JB_Decr(Ch);
				return nil;
			}
			JB_Decr(Access);
			SCDecl* _tmPf5 = JB_Incr(SC_TypeOfVecAccess(Index, ((SCDecl*)Ty0), W));
			JB_Decr(Index);
			JB_Decr(Arr);
			JB_Decr(Ty0);
			JB_Decr(Ch);
			JB_SafeDecr(_tmPf5);
			return _tmPf5;
		}
		if (SC_Decl_IsCArray(((SCDecl*)Ty0))) {
			if ((!SC_Msg_ExpectInt(Index, Access))) {
				JB_Decr(Access);
				JB_Decr(Index);
				JB_Decr(Arr);
				JB_Decr(Ty0);
				JB_Decr(Ch);
				return nil;
			}
			JB_Decr(Access);
			JB_Decr(Index);
			JB_Decr(Arr);
			SCDecl* _tmPf7 = JB_Incr(SC_Decl_DeReference(((SCDecl*)Ty0), Exp, Name_space, true));
			JB_Decr(Ty0);
			JB_Decr(Ch);
			JB_SafeDecr(_tmPf7);
			return _tmPf7;
		}
		if (((bool)((SCDecl*)Ty0)->PointerCount) and SC_Decl_OperatorMatches(Access, JB_TypeInt)) {
			if ((!((JB_Msg_EqualsSyx(Ch, JB_SyxBra, false)) and (({
				Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(Ch)));
				bool _tmPf3 = JB_Msg_EqualsSyx(_tmPf4, JB_SyxBra, false);
				JB_Decr(_tmPf4);
				 _tmPf3;
			}))))) {
				if ((!SC_Msg_ExpectInt(Index, Access))) {
					JB_Decr(Access);
					JB_Decr(Index);
					JB_Decr(Arr);
					JB_Decr(Ty0);
					JB_Decr(Ch);
					return nil;
				}
				JB_Decr(Access);
				JB_Decr(Index);
				JB_Decr(Arr);
				SCDecl* _tmPf8 = JB_Incr(SC_Decl_DeReference(((SCDecl*)Ty0), Exp, Name_space, true));
				JB_Decr(Ty0);
				JB_Decr(Ch);
				JB_SafeDecr(_tmPf8);
				return _tmPf8;
			}
		}
		JB_Decr(Index);
		JB_Decr(Access);
	}
	JB_Decr(Ch);
	JB_Decr(Ty0);
	Arr->Func = JB_SyxPrm;
	JB_Msg_BecomeStr(Exp, JB_SyxDot, JB_LUB[1249]);
	(JB_Msg_RangeSet(Exp, JB_Msg_Range(Arr)));
	JB_Decr(Arr);
	return SC_TypeOfDot(Exp, Name_space, Side);
}

SCObject* SC_TypeOfAdj(Message* Exp, SCNode* Name_space, Message* Side) {
	Array* Args = JB_Incr(JB_Array_Constructor0(nil));
	Macro* Found = JB_Incr(SC_Comp__FindAdj(Exp, Args));
	if (Found) {
		JB_Msg_BecomeMacro(Exp, Found, Args);
		JB_Decr(Found);
		JB_Decr(Args);
		return SC_TypeOfExpr(Exp, Name_space, Side);
	}
	JB_Decr(Args);
	JB_Decr(Found);
	return nil;
}

SCObject* SC_TypeOfARel(Message* Exp, SCNode* Name_space, Message* Side) {
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[214], false)) {
		return SC_TypeOfReal(Exp, Name_space, Side);
	}
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[357], false)) {
		return SC_TypeOfDotDotDot(Exp, Name_space, nil);
	}
	return SC_Func__Tran_AfterRel(Exp, Name_space, Side);
}

SCObject* SC_TypeOfArgArr(Message* Exp, SCNode* Name_space, Message* Side) {
	SCDecl* Result = nil;
	int Count = 0;
	{
		Message* Itm = JB_Incr(((Message*)JB_Ring_First(Exp)));
		while (Itm) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(Itm)));
			if (JB_Msg_EqualsSyx(Itm, JB_SyxTmp, false)) {
				Itm->Func = JB_SyxThg;
			}
			SCDecl* Contained = JB_Incr(SC_TypeOfExpr(Itm, Name_space, nil));
			if (Contained) {
				if ((!(SC_Class_IsDataTypeOrFP(Contained->Type) or ((bool)Contained->PointerCount)))) {
					JB_Msg_SyntaxExpect(Itm, JB_LUB[1039]);
				}
				if (Result) {
					SCDecl* Oof = JB_Incr(SC_Decl_HighestArrayContainMatch(Contained, Result->Type->TypeNormal, Itm));
					JB_SetRef(Result->Type, Oof->Type);
					JB_Decr(Oof);
				}
				 else {
					JB_SetRef(Result, SC_Decl_Constructor(nil, Contained->Type));
				}
				Count++;
			}
			JB_Decr(Contained);
			JB_SetRef(Itm, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(Itm);
		;
	}
	;
	if ((!Result)) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[708]);
		JB_Decr(Result);
		return nil;
	}
	JB_SetRef(Exp->Obj, Result);
	JB_SetRef(Result, SC_Decl_GetCArray(Result, Count));
	SC_Tran_ArgArray(Exp, Name_space, Result);
	JB_SafeDecr(Result);
	return Result;
}

SCObject* SC_TypeOfArr(Message* Exp, SCNode* Name_space, Message* Side) {
	int IsDispatch = ((int)((JB_Msg_SyntaxEquals(Exp, JB_LUB[1610], true))));
	int InOrder = 0;
	SCDecl* Result = JB_Incr(SC_Decl_Constructor(nil, JB_TypeVoid_));
	Result->NilDeclared = kSC__NilState_Real;
	JB_SetRef(Exp->Obj, Result);
	{
		Message* _Valuef2 = JB_Incr(((Message*)JB_Ring_First(Exp)));
		while (_Valuef2) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(_Valuef2)));
			Message* Itm = JB_Incr(_Valuef2);
			SCClass* NewArrCls = JB_Incr(JB_TypeArray);
			if (JB_Msg_EqualsSyx(Itm, JB_SyxItem, false)) {
				Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(Itm)));
				SCDecl* IdxType = JB_Incr(SC_TypeOfExpr(_tmPf3, Name_space, nil));
				JB_Decr(_tmPf3);
				if (SC_Decl_OperatorMatches(IdxType, JB_TypeString)) {
					JB_SetRef(NewArrCls, JB_TypeDictionary);
				}
				 else if (SC_Decl_OperatorMatches(IdxType, JB_TypeInt)) {
					if ((!IsDispatch)) {
						Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(Itm)));
						InOrder = SC_ArrayInOrderCheck(InOrder, _tmPf4);
						JB_Decr(_tmPf4);
						if (InOrder <= 0) {
							JB_SetRef(NewArrCls, JB_TypeDictionary);
						}
					}
				}
				 else if ((!(SC_Decl_OperatorMatches(IdxType, JB_TypeSyntax)))) {
					if (true) {
						JB_Msg_SyntaxExpect(Exp, JB_LUB[639]);
					}
					JB_SetRef(Itm, nil);
				}
				JB_Decr(IdxType);
				JB_SetRef(Itm, ((Message*)JB_Ring_Last(Itm)));
			}
			if (Itm) {
				Message* _tmPf5 = JB_Incr(SC_Msg_TypeOfArrItem(Itm));
				SCDecl* Contained = JB_Incr(SC_TypeOfExpr(_tmPf5, Name_space, nil));
				JB_Decr(_tmPf5);
				if (Contained) {
					JB_SetRef(Itm, SC_Msg_Resync(Itm, Exp));
					if (SC_Class_IsObject(Contained->Type)) {
						JB_SetRef(Contained, Contained->Type->TypeNormal);
					}
					 else if ((bool)IsDispatch) {
						IsDispatch++;
					}
					if (Result->Contains) {
						JB_SetRef(Result->Contains, SC_Decl_HighestArrayContainMatch(Contained, Result->Contains, Itm));
					}
					 else {
						JB_SetRef(Result->Contains, Contained);
					}
					if (Result->Type == JB_TypeVoid_) {
						JB_SetRef(Result->Type, NewArrCls);
					}
					 else {
						if (Result->Type != NewArrCls) {
							JB_Msg_SyntaxExpect(Exp, JB_LUB[640]);
							JB_Decr(Contained);
							JB_Decr(NewArrCls);
							JB_Decr(Itm);
							JB_Decr(_Nf1);
							JB_Decr(_Valuef2);
							JB_Decr(Result);
							return nil;
						}
					}
				}
				JB_Decr(Contained);
			}
			JB_Decr(Itm);
			JB_Decr(NewArrCls);
			JB_SetRef(_Valuef2, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(_Valuef2);
		;
	}
	;
	SCDecl* C = JB_Incr(Result->Contains);
	if (C) {
		if (((bool)IsDispatch) and (Result->Type != JB_TypeDictionary)) {
			JB_SetRef(Result->Type, C->Type);
			JB_SetRef(Result->Contains, nil);
			SC_Decl_IsCarray(Result, IsDispatch - 1, C);
			Exp->Func = JB_SyxArg;
			SC_Tran_ArgArray(Exp, Name_space, Result);
		}
		 else if ((!SC_Class_IsObject(C->Type))) {
			JB_SetRef(Result->Contains, SC_Decl_NewWrapper(C, C));
		}
		 else {
			JB_SetRef(Result->Contains, SC_Decl_MakeContainedOptional(C));
		}
	}
	JB_Decr(C);
	if (Result->Type == JB_TypeVoid_) {
		JB_SetRef(Result->Type, JB_TypeArray);
	}
	JB_SafeDecr(Result);
	return Result;
}

SCObject* SC_TypeOfBlock(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* Last = JB_Incr(JB_Msg_NeedSyxInt(Exp, JB_SyxNil, -1));
	if ((!Last)) {
		JB_Decr(Last);
		return nil;
	}
	if ((!SC_Msg_OperatorIsTmp(Last, JB_LUB[1891]))) {
		if (true) {
			MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Last);
			Message* _tmPf3 = JB_Incr(SC_NewRejoin());
			JB_SetRef(Last, ((Message*)JB_Tree_WrapWith(Last, _tmPf3)));
			JB_Decr(_tmPf3);
			JB_MsgPos_SyntaxUsingComplete((&_usingf0));
			JB_MsgPos_Destructor((&_usingf0));
		}
	}
	SCArg* _tmPf4 = JB_Incr(SC_Msg_SCArg(Exp, Name_space, nil));
	SCArg* P = JB_Incr(_tmPf4);
	JB_Decr(_tmPf4);
	Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_Parent(Exp)));
	(SC_Msg_StatementExprSet(_tmPf5, P));
	JB_Decr(_tmPf5);
	SCFunction* _tmPf6 = JB_Incr(SC_Base_OwningFunc(P));
	SCFunction* Fn = JB_Incr(_tmPf6);
	JB_Decr(_tmPf6);
	SC_CollectDeclsFuncBodyUnsureHowToRemove(Exp, P);
	{
		Message* Ch = JB_Incr(((Message*)JB_Ring_First(Exp)));
		while (Ch) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
			if (JB_Msg_EqualsSyx(Ch, JB_SyxArg, false)) {
				SCArg* _tmPf7 = JB_Incr(SC_Msg_SCArg(Ch, P, nil));
				SC_Func__Tran_All(Fn, Ch, _tmPf7);
				JB_Decr(_tmPf7);
			}
			 else {
				SC_Func__Tran_All(Fn, Ch, P);
			}
			JB_SetRef(Ch, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(Ch);
		;
	}
	;
	JB_Decr(Fn);
	Message* Val = JB_Incr(JB_Msg_NeedFirst(Last));
	JB_Decr(Last);
	if (JB_Msg_ExpectLast(Val, JB_LUB[0])) {
		SCDecl* _tmPf8 = JB_Incr(SC_TypeOfExpr(Val, P, nil));
		JB_Decr(Val);
		JB_Decr(P);
		JB_SafeDecr(_tmPf8);
		return _tmPf8;
	}
	JB_Decr(P);
	JB_Decr(Val);
	return nil;
}

SCObject* SC_TypeOfBra(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* C0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	if (JB_Msg_EqualsSyx(C0, JB_SyxArg, false)) {
		SCObject* _tmPf0 = JB_Incr(SC_TypeOfBlock(C0, Name_space, Side));
		JB_Decr(C0);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	 else {
		SCDecl* _tmPf1 = JB_Incr(SC_TypeOfExpr(C0, Name_space, Side));
		JB_Decr(C0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	JB_Decr(C0);
}

SCObject* SC_TypeOfBRel(Message* Exp, SCNode* Name_space, Message* Side) {
	JB_String* Name = JB_Incr(Exp->Name);
	Message* F = JB_Incr(((Message*)JB_Ring_First(Exp)));
	if ((!F)) {
		JB_Decr(F);
		JB_Decr(Name);
		return nil;
	}
	SCDecl* SubType = JB_Incr(SC_TypeOfExpr(F, Name_space, nil));
	if ((!SubType)) {
		JB_Decr(SubType);
		JB_Decr(F);
		JB_Decr(Name);
		return nil;
	}
	byte N = JB_Str_First(Name);
	if (N == '*') {
		SCDecl* _tmPf0 = JB_Incr(SC_Decl_DeReference(SubType, Exp, Name_space, false));
		JB_Decr(SubType);
		JB_Decr(F);
		JB_Decr(Name);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	if ((N == '-') and (JB_Str_EqualsInt(Name, 1, false))) {
		JB_Decr(F);
		JB_Decr(Name);
		JB_SafeDecr(SubType);
		return SubType;
	}
	JB_Decr(Name);
	if (N == '&') {
		if (SubType->Type->FuncProto) {
			JB_Decr(SubType);
			SCObject* _tmPf2 = JB_Incr(SC_TypeOfFuncPointer(F, Name_space, Side));
			JB_Decr(F);
			JB_SafeDecr(_tmPf2);
			return _tmPf2;
		}
		if ((!SC_Msg_CanGetAddress(F, Name_space))) {
			JB_Decr(SubType);
			JB_Decr(F);
			return nil;
		}
		SCDecl* _tmPf1 = JB_Incr(SC_Decl_GetAddress(SubType, kSC__DeclMode_Always));
		JB_Decr(SubType);
		JB_Decr(F);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	if (N == '!') {
		JB_Decr(SubType);
		SCObject* _tmPf3 = JB_Incr(SC_TranNegate(F, Name_space));
		JB_Decr(F);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	JB_Decr(F);
	if (N == '~') {
		if ((!SC_Decl_IsInteger(SubType))) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[851]);
		}
		JB_SafeDecr(SubType);
		return SubType;
	}
	if (N == '$') {
		JB_Decr(SubType);
		return SC_TranRender(Exp, Name_space);
	}
	JB_FreeIfDead(SC_Func__Tran_AfterRel(Exp, Name_space, Side));
	JB_SafeDecr(SubType);
	return SubType;
}

SCObject* SC_TypeOfChar(Message* Exp, SCNode* Name_space, Message* Side) {
	if (JB_Msg_Length(Exp) == 1) {
		return JB_TypeByte->TypeNormal;
	}
	Ind Cp = ((Ind)JB_Str_UTF8Value(Exp->Name));
	if ((!JB_Ind_SyntaxCast(Cp))) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[932]);
		return nil;
	}
	Exp->Func = JB_SyxNum;
	JB_SetRef(Exp->Name, JB_int_RenderFS(Cp, nil));
	return JB_TypeCodePoint->TypeNormal;
}

SCObject* SC_TypeOfDot(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	if ((_tmPf0->Obj)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	SCNode* DotVar = JB_Incr(((SCNode*)SC_Msg_DotSpace(_tmPf1, Name_space)));
	JB_Decr(_tmPf1);
	if ((!DotVar)) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[1283]);
		JB_Decr(DotVar);
		return nil;
	}
	SCDecl* Contains = nil;
	bool DotVarIsaDecl = (JB_Object_Isa(DotVar, &SCDeclData));
	if (DotVarIsaDecl) {
		SCDecl* Swiz = JB_Incr(SC_TypeOfSwiz(Exp, Name_space, Side, ((SCDecl*)DotVar)));
		if (Swiz) {
			JB_Decr(Contains);
			JB_Decr(DotVar);
			JB_SafeDecr(Swiz);
			return Swiz;
		}
		JB_Decr(Swiz);
		JB_SetRef(Contains, ((SCDecl*)DotVar)->Contains);
		SCClass* Ty = ((SCDecl*)DotVar)->Type;
		JB_SetRef(DotVar, Ty);
		if ((!(Contains))) {
			JB_SetRef(Contains, Ty->Contained);
		}
	}
	 else {
		if ((!(JB_Object_Isa(DotVar, &SCClassData) or JB_Object_Isa(DotVar, &SCModuleData)))) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[1089]);
			JB_Decr(Contains);
			JB_Decr(DotVar);
			return nil;
		}
	}
	JB_Object* O = JB_Incr(SC_Base_LookUpDot(DotVar, Exp->Name, Exp, Name_space, Contains, Side));
	if ((!O)) {
		JB_Decr(O);
		JB_Decr(Contains);
		JB_Decr(DotVar);
		return nil;
	}
	if (JB_Object_FastIsa(O, &SCModuleData)) {
		Message* F = JB_Incr(((Message*)JB_Ring_First(Exp)));
		if (JB_Msg_EqualsSyx(F, JB_SyxThg, false)) {
			Exp->Func = JB_SyxThg;
			JB_Tree_Remove(F);
			if (JB_Msg_SyntaxEquals(F, JB_LUB[1446], false)) {
				SCClass* Cls = JB_Incr(((SCModule*)O)->Cls);
				if (Cls) {
					SCDecl* T = JB_Incr(Cls->ClassType);
					if (T) {
						JB_SetRef(Exp->Name, T->Name);
						JB_Decr(Cls);
						JB_Decr(F);
						JB_Decr(O);
						JB_Decr(Contains);
						JB_Decr(DotVar);
						JB_SafeDecr(T);
						return T;
					}
					JB_Decr(T);
				}
				JB_Decr(Cls);
			}
		}
		JB_Decr(F);
		JB_Decr(Contains);
		JB_Decr(DotVar);
		JB_SafeDecr(O);
		return ((SCModule*)O);
	}
	SCDecl* Decl = JB_Incr(SC_Object_BaseAsDecl(O));
	JB_Decr(O);
	if (Decl) {
		if (Contains) {
			if ((JB_Object_FastIsa(DotVar, &SCClassData)) and (!SC_Msg_IsSettablePlace(Exp))) {
				JB_SetRef(Decl, SC_Decl_ContainedReplace(Decl, Contains, true));
			}
		}
		if (SC_Decl_SyntaxIs(Decl, kSC__SCDeclInfo_Task)) {
			JB_Decr(Contains);
			JB_Decr(DotVar);
			JB_SafeDecr(Decl);
			return Decl;
		}
	}
	 else {
		JB_SetRef(Decl, JB_TypeVoid);
	}
	JB_Decr(DotVar);
	JB_Decr(Contains);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	SCFunction* Fn = JB_Incr(SC_Msg_AsFunc(_tmPf2));
	JB_Decr(_tmPf2);
	if (Fn) {
		JB_SetRef(Exp->Obj, Decl);
		if ((!JB_Msg_EqualsSyx(Exp, JB_SyxFunc, false))) {
			SC_Func_DotFuncToNormalFunc(Fn, Exp);
		}
	}
	JB_Decr(Fn);
	JB_SafeDecr(Decl);
	return Decl;
}

SCObject* SC_TypeOfDotDotDot(Message* Exp, SCNode* Name_space, Message* Side) {
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
		JB_Msg_BecomeStr(Exp, JB_SyxBra, JB_LUB[0]);
		Message* P = JB_Incr(((Message*)JB_Ring_Parent(Exp)));
		Message* C = JB_Incr(Exp);
		while ((!JB_Msg_EqualsSyx(P, JB_SyxPrm, false)) and (!JB_Msg_EqualsSyx(P, JB_SyxArr, false))) {
			if ((!(((bool)P) and (!JB_Msg_EqualsSyx(P, JB_SyxArg, false))))) {
				JB_Msg_SyntaxExpect(Exp, JB_LUB[1220]);
				JB_Decr(C);
				JB_Decr(P);
				JB_MsgPos_Destructor((&_usingf0));
				return nil;
			}
			JB_SetRef(C, P);
			JB_SetRef(P, ((Message*)JB_Ring_Parent(P)));
		};
		JB_Decr(P);
		Message* _tmPf2 = ({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1779])));
			Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1715]));
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf3));
			JB_Decr(_tmPf3);
			Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf4));
			JB_Decr(_tmPf4);
			JB_SafeDecr(nil);
			 __imPf1;
		});
		(JB_Ring_NextSibSet(C, _tmPf2));
		JB_Decr(C);
		JB_Decr(_tmPf2);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	SCDecl* _tmPf6 = JB_Incr(SC_TypeOfExpr(_tmPf5, Name_space, nil));
	JB_Decr(_tmPf5);
	JB_SafeDecr(_tmPf6);
	return _tmPf6;
}

SCDecl* SC_TypeOfExpr(Message* Exp, SCNode* Name_space, Message* Side) {
	if (Exp) {
		SCObject* Obj = ((SCObject*)Exp->Obj);
		if ((!Obj)) {
			Obj = SC_TypeOfExprSub(Exp, Name_space, Side);
		}
		if (JB_Object_FastIsa(Obj, &SCDeclData)) {
			return ((SCDecl*)Obj);
		}
	}
	return nil;
}

SCObject* SC_TypeOfExprModulesOK(Message* Exp, SCNode* Name_space, Message* Side) {
	if (Exp->Obj) {
		return ((SCObject*)Exp->Obj);
	}
	if (JB_Msg_EqualsSyx(Exp, JB_SyxThg, false)) {
		JB_SetRef(Exp->Obj, SC_Base_LookUpVar(Name_space, Exp->Name, Exp, Side));
		return ((SCObject*)Exp->Obj);
	}
	return SC_TypeOfExprSub(Exp, Name_space, Side);
}

SCDecl* SC_TypeOfExprNeeded(Message* Exp, SCNode* Name_space) {
	int OldCount = JB_StdErr->ErrorCount;
	SCDecl* Result = SC_TypeOfExpr(Exp, Name_space, nil);
	if (SC_Decl_Found(Result)) {
		return Result;
	}
	if (OldCount == JB_StdErr->ErrorCount) {
		if (true) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[1284]);
		}
		SCFunction* It = SC_Msg_ExpFunc(Exp);
		if (It) {
			if (true) {
				JB_Msg_SyntaxExpect(It->Source, kJB_kUsingStr);
			}
		}
	}
	return nil;
}

SCObject* SC_TypeOfExprSub(Message* Exp, SCNode* Name_space, Message* Side) {
	if (JB_Msg_EqualsSyx(Exp, JB_SyxDecl, false)) {
		JB_Object* D = ((Message*)JB_Ring_Last(Exp))->Obj;
		if (JB_Object_FastIsa(D, &SCDeclData)) {
			return ((SCDecl*)D);
		}
	}
	if (Name_space) {
		FP_ExprResolver F = JB_ExprFuncs[((int)Exp->Func)];
		if ((!F)) {
			JB_Msg_SyntaxExpect(Exp, nil);
			return nil;
		}
		SCObject* Obj = (F)(Exp, Name_space, Side);
		if (Obj) {
			JB_SetRef(Exp->Obj, Obj);
		}
		return ((SCObject*)Obj);
	}
	if ((!JB__Proc_Parent)) {
		if (true) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[869]);
		}
	}
	return nil;
}

SCObject* SC_TypeOfFunc(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* F = ((Message*)JB_Ring_First(Exp));
	if (JB_Msg_EqualsSyx(F, JB_SyxList, false)) {
		return SC_TypeOfTernary(Exp, Name_space, Side);
	}
	SCObject* Fn = SC_TypeOfFuncSub(Exp, Name_space, Side);
	if ((!Fn)) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[755]);
		return nil;
	}
	if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
		SCDecl* Obj = ((SCFunction*)Fn)->ReturnType;
		if ((!Obj)) {
			JB_SetRef(Exp->Obj, JB_TypeVoid);
		}
		if (((SCFunction*)Fn)->IsKiller) {
			SC_Msg_LastInBlock(Exp, kSC__SCBlockage_Quit);
		}
		return Obj;
	}
	return Fn;
}

SCObject* SC_TypeOfFuncPointer(Message* Exp, SCNode* Name_space, Message* Side) {
	SCObject* Rz = nil;
	Message* Ch = JB_Incr(SC_Msg_UnBra(Exp));
	if (JB_Msg_EqualsSyx(Ch, JB_SyxDot, false)) {
		JB_SetRef(Rz, SC_TypeOfDot(Ch, Name_space, Side));
	}
	 else if (JB_Msg_EqualsSyx(Ch, JB_SyxThg, false)) {
		JB_SetRef(Rz, SC_Base_LookUpVar(Name_space, Ch->Name, Ch, Side));
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(Exp, nil);
		}
	}
	JB_SetRef(Ch->Obj, Rz);
	JB_Decr(Ch);
	JB_SafeDecr(Rz);
	return Rz;
}

SCObject* SC_TypeOfFuncSub(Message* Exp, SCNode* Name_space, Message* Side) {
	SCFunction* Fn = JB_Incr(SC_Msg_MsgFunc(Exp));
	if (Fn) {
		JB_SafeDecr(Fn);
		return Fn;
	}
	Message* Ch = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* Params = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
	if (JB_Msg_EqualsSyx(Ch, JB_SyxThg, false)) {
		SCFunction* _tmPf0 = JB_Incr(SC_Base_LookUpFunc(Name_space, Ch->Name, Exp, Params));
		JB_Decr(Params);
		JB_Decr(Ch);
		JB_Decr(Fn);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	SCDecl* ThgDecl = JB_Incr(SC_TypeOfExpr(Ch, Name_space, nil));
	JB_Decr(Ch);
	if ((!ThgDecl)) {
		JB_Decr(ThgDecl);
		JB_Decr(Params);
		JB_Decr(Fn);
		return nil;
	}
	JB_SetRef(Fn, ThgDecl->Type->FuncProto);
	JB_Decr(ThgDecl);
	if ((!Fn)) {
		JB_Decr(Params);
		JB_Decr(Fn);
		return SC_TypeOfSyntaxCall(Exp, Name_space, Side);
	}
	SCParamArray* PList = JB_Incr(SC_PA_Constructor(nil, Exp));
	if ((!SC_PA_PreReadTypes(PList, Name_space, Params, Side))) {
		JB_Decr(PList);
		JB_Decr(Params);
		JB_Decr(Fn);
		return nil;
	}
	JB_Decr(Params);
	SCFunction* Fn2 = JB_Incr(SC_Func_ArgsMatch(Fn, nil, Name_space, PList, 0));
	if ((!Fn2)) {
		JB_FreeIfDead(SC_Func_ArgsMatch(Fn, nil, Name_space, PList, kJB_kTypeCastDescribeErrors));
	}
	 else if ((!Fn2->ReturnType)) {
		JB_SetRef(Exp->Obj, JB_TypeVoid);
	}
	JB_Decr(Fn);
	JB_Decr(PList);
	JB_SafeDecr(Fn2);
	return Fn2;
}

SCObject* SC_TypeOfLast(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	SCDecl* _tmPf1 = JB_Incr(SC_TypeOfExpr(_tmPf0, Name_space, nil));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCObject* SC_TypeOfList(Message* Exp, SCNode* Name_space, Message* Side) {
	int FoundType = 0;
	int AllowType = 0;
	int Count = 0;
	bool HasBig = false;
	bool Numeric = true;
	{
		Message* S = JB_Incr(((Message*)JB_Ring_First(Exp)));
		while (S) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(S)));
			SCDecl* Typ = JB_Incr(SC_TypeOfExpr(S, Name_space, nil));
			if ((!Typ)) {
				JB_Decr(Typ);
				JB_Decr(_Nf2);
				JB_Decr(S);
				return nil;
			}
			int N = SC_Decl_IsNumeric(Typ);
			if ((!N)) {
				Numeric = false;
			}
			 else if (Numeric) {
				if (N > 1) {
					HasBig = true;
				}
				if (JB_Object_MustBe(Typ, &SCDeclData, S)) {
					DataTypeCode T = ((SCDecl*)Typ)->Type->TypeInfo;
					if (SC_Msg_IsZero(S)) {
						AllowType = SC_TC_FloatIntMerge(T, AllowType, S);
					}
					 else {
						FoundType = SC_TC_FloatIntMerge(T, FoundType, S);
						SC_Msg_WrapFloatOrInt(S, T, N, ((SCDecl*)Typ));
					}
				}
				Count = (Count + N);
				if (Count > 4) {
					JB_Msg_SyntaxExpect(Exp, JB_LUB[1115]);
					JB_Decr(Typ);
					JB_Decr(_Nf2);
					JB_Decr(S);
					return nil;
				}
			}
			JB_Decr(Typ);
			JB_SetRef(S, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(S);
		;
	}
	;
	if ((!Numeric)) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[854]);
		return nil;
	}
	if (Count < 2) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[1339]);
		return nil;
	}
	if ((!(FoundType))) {
		FoundType = AllowType;
	}
	bool IsFloat = (FoundType == 2);
	SCClass* _tmPf3 = JB_Incr(SC_VecType(IsFloat, Count));
	SCDecl* Cns = JB_Incr(SC_Class_NotConst(_tmPf3));
	JB_Decr(_tmPf3);
	if ((!HasBig)) {
		JB_SetRef(Exp->Obj, Cns);
		JB_SafeDecr(Cns);
		return Cns;
	}
	JB_Decr(Cns);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
	JB_String* Name = JB_Incr(((JB_StringC*)JB_Ternary(IsFloat, JB_LUB[2032], JB_LUB[1740])));
	Message* List = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
	SC_Msg_AppendAllInto(Exp, List);
	JB_Msg_AppendSyx(Exp, JB_SyxThg, Name);
	JB_Decr(Name);
	JB_Tree_SyntaxAppend(Exp, List);
	JB_Decr(List);
	Exp->Func = JB_SyxFunc;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	SCDecl* _tmPf4 = JB_Incr(SC_TypeOfExpr(Exp, Name_space, nil));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

SCObject* SC_TypeOfMsg(Message* Exp, SCNode* Name_space, Message* Side) {
	SCObject* Rz = nil;
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* Type = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	if ((!JB_FreeIfDead(JB_Msg__GetFunc(Type)))) {
		JB_Decr(Type);
		JB_Decr(Rz);
		return nil;
	}
	Message* Name = JB_Incr(((Message*)JB_Ring_First(Type)));
	if (Name) {
		JB_FreeIfDead(SC_TypeOfExpr(Name, Name_space, nil));
	}
	{
		Message* _LoopSrcf1 = JB_Incr(((Message*)JB_Ring_NextSib(Type)));
		Message* Ch = JB_Incr(_LoopSrcf1);
		while (Ch) {
			JB_FreeIfDead(SC_TypeOfExpr(Ch, Name_space, nil));
			JB_SetRef(Ch, ((Message*)JB_Ring_NextSib(Ch)));
		};
		JB_Decr(Ch);
		;
		JB_Decr(_LoopSrcf1);
		JB_Decr(Name);
	}
	;
	JB_Decr(Type);
	SCClass* Msg = JB_Incr(SC_Comp__FindClassName(JB_LUB[1784]));
	if (Msg) {
		JB_SetRef(Rz, Msg->TypeNormal);
	}
	JB_Decr(Msg);
	JB_SafeDecr(Rz);
	return Rz;
}

SCObject* SC_TypeOfNothing(Message* Exp, SCNode* Name_space, Message* Side) {
	return nil;
}

SCObject* SC_TypeOfNum(Message* Exp, SCNode* Name_space, Message* Side) {
	if (JB_Str_ContainsString(Exp->Name, JB_LUB[353])) {
		JB_Msg_Float(Exp);
		return JB_Typefloat->TypeNormal;
	}
	int64 Val = JB_Msg_Int(Exp, 0);
	JB_Msg_BecomeNum(Exp, Val);
	if (((Val << 32) >> 32) != Val) {
		return JB_TypeInt64->TypeNormal;
	}
	return JB_TypeInt->TypeNormal;
}

SCObject* SC_TypeOfQues(Message* Exp, SCNode* Name_space, Message* Side) {
	SCObject* Type = nil;
	Message* Prm = ((Message*)JB_Ring_First(Exp));
	if ((!JB_Str_Exists(Exp->Name))) {
		Prm = ((Message*)JB_Ring_NextSib(Prm));
	}
	if (Prm) {
		Type = SC_TypeOfExprModulesOK(Prm, Name_space, nil);
	}
	Message* M = SC_Msg_ReplaceInbuiltSub(Exp, Name_space, SC_Object_AsDecl(Type));
	if (M) {
		SC_Msg_SafeReplaceWith(Exp, M);
	}
	if ((!JB_Msg_EqualsSyx(Exp, JB_SyxQues, false))) {
		return SC_TypeOfExpr(Exp, Name_space, nil);
	}
	return nil;
}

SCObject* SC_TypeOfReal(Message* Exp, SCNode* Name_space, Message* Side) {
	SCDecl* _tmPf0 = SC_TypeOfExpr(((Message*)JB_Ring_First(Exp)), Name_space, nil);
	if ((!_tmPf0)) {
		return nil;
	}
	return SC_Decl_MakeReal(_tmPf0);
}

SCObject* SC_TypeOfRel(Message* Exp, SCNode* Name_space, Message* Side) {
	JB_Incr(Side);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* LN = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_NextSib(LN)));
	Message* Opch = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	SCOperator* Comp = JB_Incr(SC_Opp__Lookup(Opch));
	Message* RN = JB_Incr(((Message*)JB_Ring_NextSib(Opch)));
	if ((!RN)) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[1019]);
		JB_Decr(Side);
		JB_Decr(RN);
		JB_Decr(Comp);
		JB_Decr(Opch);
		JB_Decr(LN);
		return nil;
	}
	if ((JB_Msg_SyntaxEquals(Opch, JB_LUB[1727], false)) or (JB_Msg_SyntaxEquals(Opch, JB_LUB[1729], false))) {
		SCDecl* _tmPf2 = JB_Incr(SC_Msg_NiceIsFlagSyntax(LN, Opch, RN, Name_space, Side));
		JB_Decr(Side);
		JB_Decr(RN);
		JB_Decr(Comp);
		JB_Decr(Opch);
		JB_Decr(LN);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_SetRef(Side, nil);
	Message* P = JB_Incr(SC_Msg_NiceParent(Exp));
	Syntax ParentFunc = P->Func;
	JB_Decr(P);
	bool ShouldBeSet = ((ParentFunc == JB_SyxArg) or (ParentFunc == JB_SyxDecl));
	if ((!SC_Opp_SyntaxEquals(Comp, JB_LUB[586], false))) {
		if (ShouldBeSet) {
			if (true) {
				JB_Msg_SyntaxExpect(Opch, JB_LUB[723]);
			}
		}
	}
	 else if (ShouldBeSet) {
		JB_SetRef(Side, RN);
		(SC_Msg_TmpTypeSet(Exp, kSC__ASMtmp_kSetVar));
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(Opch, JB_LUB[821]);
		}
	}
	SCDecl* RC = nil;
	SCDecl* LC = nil;
	if (Side) {
		JB_SetRef(RC, SC_TypeOfExprNeeded(RN, Name_space));
		if ((!RC)) {
			JB_Decr(Side);
			JB_Decr(LC);
			JB_Decr(RC);
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(Opch);
			JB_Decr(LN);
			return nil;
		}
		JB_SetRef(LC, SC_TypeOfExpr(LN, Name_space, Side));
		if (((JB_Msg_EqualsSyx(Exp, JB_SyxRel, false))) and (LN == JB_FreeIfDead(((Message*)JB_Ring_Last(Exp))))) {
			SCObject* _tmPf3 = JB_Incr(SC_TypeOfRel(Exp, Name_space, Side));
			JB_Decr(Side);
			JB_Decr(LC);
			JB_Decr(RC);
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(Opch);
			JB_Decr(LN);
			JB_SafeDecr(_tmPf3);
			return _tmPf3;
		}
	}
	 else {
		JB_SetRef(LC, SC_TypeOfExpr(LN, Name_space, nil));
		JB_SetRef(RC, SC_TypeOfExprNeeded(RN, Name_space));
		if ((!RC)) {
			JB_Decr(Side);
			JB_Decr(LC);
			JB_Decr(RC);
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(Opch);
			JB_Decr(LN);
			return nil;
		}
	}
	if ((!JB_Msg_EqualsSyx(Exp, JB_SyxRel, false))) {
		JB_Decr(Side);
		JB_Decr(LC);
		JB_Decr(RC);
		JB_Decr(RN);
		JB_Decr(Comp);
		JB_Decr(Opch);
		JB_Decr(LN);
		return nil;
	}
	if ((!LC)) {
		JB_Msg_SyntaxExpect(LN, JB_LUB[738]);
		JB_Decr(Side);
		JB_Decr(LC);
		JB_Decr(RC);
		JB_Decr(RN);
		JB_Decr(Comp);
		JB_Decr(Opch);
		JB_Decr(LN);
		return nil;
	}
	if (Side) {
		if ((!SC_Decl_ConstCheck(LC, LN, RN, RC))) {
			JB_Decr(Side);
			JB_Decr(LC);
			JB_Decr(RC);
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(Opch);
			JB_Decr(LN);
			return nil;
		}
	}
	JB_SetRef(Opch->Obj, Comp);
	JB_Decr(Opch);
	if (((bool)(Comp->Kind & kSC__OpMode_AndOr))) {
		JB_Decr(Side);
		SCDecl* _tmPf5 = JB_Incr(SC_Or_And_Expansion(LC, RC, Exp, Name_space));
		JB_Decr(LC);
		JB_Decr(RC);
		JB_Decr(RN);
		JB_Decr(Comp);
		JB_Decr(LN);
		JB_SafeDecr(_tmPf5);
		return _tmPf5;
	}
	int Custom = 0;
	if (RC != JB_TypeNil) {
		SCDecl* IPM = JB_Incr(SC_IsPointerMath(LC, RC, Comp, Exp));
		if (IPM) {
			JB_Decr(Side);
			SCDecl* _tmPf4 = JB_Incr(SC_Decl_CheckMath(IPM, Exp));
			JB_Decr(IPM);
			JB_Decr(LC);
			JB_Decr(RC);
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(LN);
			JB_SafeDecr(_tmPf4);
			return _tmPf4;
		}
		JB_Decr(IPM);
	}
	Custom = SC_UseCustomOperators(LC, RC, Comp, Exp);
	if (Custom == kSC__CustomOps_Needed) {
		if ((!SC_Opp_IsCompSet(Comp))) {
			JB_Decr(Side);
			JB_Decr(LC);
			JB_Decr(RC);
			SCDecl* _tmPf8 = JB_Incr(SC_CustomFuncOp(Exp, Comp, Name_space, RN));
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(LN);
			JB_SafeDecr(_tmPf8);
			return _tmPf8;
		}
		 else if (RC == JB_TypeNil) {
			0;
		}
		 else if (((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_CaseAware)) or SC_CanOpCompare(Exp, LC, RC, Comp)) {
			JB_Decr(Side);
			SCDecl* _tmPf6 = JB_Incr(SC_DoOpCompare(Exp, LC, RC, Comp, Name_space));
			JB_Decr(LC);
			JB_Decr(RC);
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(LN);
			JB_SafeDecr(_tmPf6);
			return _tmPf6;
		}
	}
	 else if ((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_Bit)) {
		if ((!(SC_Decl_NoFloat(RC, RN) and SC_Decl_NoFloat(LC, LN)))) {
			JB_Decr(Side);
			JB_Decr(LC);
			JB_Decr(RC);
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(LN);
			return nil;
		}
	}
	JB_Decr(LN);
	if ((((bool)(Custom & kSC__CustomOps_TypeCastFromBool))) and (!Side)) {
		JB_SetRef(LC, JB_TypeInt->TypeNormal);
		JB_SetRef(RC, LC);
	}
	if (Custom <= kSC__CustomOps_Needed) {
		SC_Decl_ExpectRelMatch(LC, RC, RN, Side, Exp);
	}
	 else if (Custom == kSC__CustomOps_LeftOnlyIsVector) {
		JB_Decr(Side);
		JB_Decr(RC);
		JB_Decr(RN);
		JB_Decr(Comp);
		JB_SafeDecr(LC);
		return LC;
	}
	 else {
		JB_Decr(Side);
		JB_Decr(LC);
		JB_Decr(RN);
		JB_Decr(Comp);
		JB_SafeDecr(RC);
		return RC;
	}
	JB_Decr(RN);
	if ((!Side) and ((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_Compare))) {
		JB_Decr(Side);
		JB_Decr(LC);
		JB_Decr(RC);
		JB_Decr(Comp);
		return JB_TypeBool->TypeNormal;
	}
	JB_Decr(Side);
	if (((bool)(Custom & kSC__CustomOps_TypeCastToBetter))) {
		SCDecl* _tmPf7 = JB_Incr(SC_Decl_Better_Numeric(LC, RC, Comp->Kind));
		JB_Decr(LC);
		JB_Decr(RC);
		JB_Decr(Comp);
		JB_SafeDecr(_tmPf7);
		return _tmPf7;
	}
	JB_Decr(Comp);
	JB_Decr(RC);
	JB_SafeDecr(LC);
	return LC;
}

SCObject* SC_TypeOfSDot(Message* Exp, SCNode* Name_space, Message* Side) {
	SC_Func__Tran_Sdt(Exp);
	return SC_TypeOfDot(Exp, Name_space, Side);
}

SCObject* SC_TypeOfSString(Message* Exp, SCNode* Name_space, Message* Side) {
	return JB_TypeStringZero->TypeReal;
}

SCObject* SC_TypeOfSthg(Message* Exp, SCNode* Name_space, Message* Side) {
	Exp->Func = JB_SyxSheb;
	//...;
	return nil;
}

SCObject* SC_TypeOfStr(Message* Exp, SCNode* Name_space, Message* Side) {
	SC_Func__String_Expand(Exp, SC_Msg_MsgOwningFunc(Exp));
	return JB_TypeStringZero->TypeReal;
}

SCDecl* SC_TypeOfSwizzle(Message* Exp, SCDecl* Type, SCNode* Name_space, Message* Side, int Swiz) {
	JB_Incr(Name_space);
	JB_Incr(Exp);
	int Count = Swiz >> 16;
	int W = SC_Class_NumericCount(Type->Type);
	if ((!((Count == 1) or (Side == nil)))) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[718]);
		JB_Decr(Exp);
		JB_Decr(Name_space);
		return nil;
	}
	if (Count > 4) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[1372]);
		JB_Decr(Exp);
		JB_Decr(Name_space);
		return nil;
	}
	if (W == 3) {
		W = 4;
	}
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	Message* Prms = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	SCClass* _tmPf4 = JB_Incr(SC_VecType((!SC_Decl_IsInteger(Type)), Count));
	SCDecl* T = JB_Incr(SC_Class_NotConst(_tmPf4));
	JB_Decr(_tmPf4);
	if (Count == 1) {
		Swiz = (Swiz & 7);
		if (Swiz >= W) {
			JB_Msg_SyntaxExpect(Prms, JB_LUB[1370]);
			JB_Decr(Exp);
			JB_Decr(Name_space);
			JB_Decr(T);
			JB_Decr(Prms);
			return nil;
		}
		JB_Msg_BecomeStr(Exp, JB_SyxAcc, JB_LUB[0]);
		Prms->Func = JB_SyxArr;
		JB_Msg_AppendNum(Prms, Swiz);
	}
	 else {
		JB_Tree_Remove(Prms);
		Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_First(Exp)));
		Message* Oof = JB_Incr(_tmPf5);
		JB_Decr(_tmPf5);
		JB_String* Tmp = JB_Incr(Oof->Name);
		if (JB_Msg_EqualsSyx(Oof, JB_SyxThg, false)) {
			JB_Tree_Remove(Oof);
		}
		 else {
			NameAndMsg What = SC_Msg_IntoVariable(Oof, Name_space);
			JB_SetRef(Oof, What.Arg);
			if ((!Oof)) {
				JB_Decr(Exp);
				JB_Decr(Name_space);
				SC_NameAndMsg_Destructor((&What));
				JB_Decr(Tmp);
				JB_Decr(Oof);
				JB_Decr(T);
				JB_Decr(Prms);
				return nil;
			}
			Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_Parent(Oof)));
			JB_SetRef(_tmPf6->Obj, T);
			JB_Decr(_tmPf6);
			JB_SetRef(Name_space, SC_Msg_AsArg(Oof));
			JB_Msg_BecomeStr(Exp, JB_SyxBra, JB_LUB[0]);
			Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_Last(Oof)));
			Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_Last(_tmPf8)));
			JB_Decr(_tmPf8);
			JB_SetRef(Exp, _tmPf7);
			JB_Decr(_tmPf7);
			JB_SetRef(Tmp, Exp->Name);
			JB_SetRef(Exp->Obj, T);
			SC_NameAndMsg_Destructor((&What));
		}
		JB_Decr(Oof);
		JB_Msg_BecomeStr(Exp, JB_SyxList, JB_LUB[0]);
		{
			int I = 0;
			while (I < Count) {
				int Field = (Swiz >> (I * 3)) & 7;
				Message* Item = nil;
				if (Field == 4) {
					JB_SetRef(Item, (JB_Syx_Msg(JB_SyxNum, JB_LUB[440])));
				}
				 else {
					if (Field >= W) {
						JB_Msg_SyntaxExpect(Exp, JB_LUB[1370]);
						JB_Decr(Exp);
						JB_Decr(Name_space);
						JB_Decr(Item);
						JB_Decr(Tmp);
						JB_Decr(T);
						JB_Decr(Prms);
						return nil;
					}
					Message* Thg = JB_Incr((JB_Syx_Msg(JB_SyxThg, Tmp)));
					JB_SetRef(Item, ({
						Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxAcc, JB_LUB[0])));
						JB_Tree_SyntaxAppend(__imPf1, Thg);
						Message* _tmPf9 = ({
							Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxArr, JB_LUB[0])));
							Message* _tmPf10 = JB_Incr(JB_Syx_IntMsg(JB_SyxNum, Field));
							JB_Tree_SyntaxAppend(__imPf2, (_tmPf10));
							JB_Decr(_tmPf10);
							JB_SafeDecr(nil);
							 __imPf2;
						});
						JB_Tree_SyntaxAppend(__imPf1, _tmPf9);
						JB_Decr(_tmPf9);
						JB_SafeDecr(__imPf1);
						 __imPf1;
					}));
					JB_Decr(Thg);
				}
				JB_FreeIfDead(SC_TypeOfExpr(Item, Name_space, nil));
				JB_Tree_SyntaxAppend(Exp, Item);
				JB_Decr(Item);
				I++;
			};
		}
		;
		JB_Decr(Tmp);
	}
	JB_Decr(Prms);
	JB_Decr(Name_space);
	JB_Decr(Exp);
	JB_SafeDecr(T);
	return T;
}

SCDecl* SC_TypeOfSyntaxCall(Message* Exp, SCNode* Name_space, Message* Side) {
	JB_Msg_BecomeStr(Exp, JB_SyxDot, JB_LUB[1251]);
	return SC_TypeOfExpr(Exp, Name_space, Side);
}

SCObject* SC_TypeOfSyx(Message* Exp, SCNode* Name_space, Message* Side) {
	SC_Msg_BecomeSyx(Exp);
	return SC_TypeOfThg(Exp, Name_space, Side);
}

SCObject* SC_TypeOfTernary(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* List = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* Params = JB_Incr(((Message*)JB_Ring_NextSib(List)));
	if ((!(JB_Ring_HasChildren(List) and JB_Ring_HasChildCount(Params, 1)))) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[1637]);
		JB_Decr(Params);
		JB_Decr(List);
		return nil;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(List)));
	Message* First = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* Second = JB_Incr(((Message*)JB_Ring_NextSib(First)));
	if (Second) {
		if ((!JB_Msg_ExpectLast(Second, JB_LUB[0]))) {
			JB_Decr(Second);
			JB_Decr(First);
			JB_Decr(Params);
			JB_Decr(List);
			return nil;
		}
	}
	 else {
		JB_SetRef(Second, SC_Msg_CreateNil(Exp));
		(JB_Ring_NextSibSet(First, Second));
	}
	Message* Test = JB_Incr(JB_Msg_NeedSyx(Params, JB_SyxNil));
	if ((!Test)) {
		JB_Decr(Test);
		JB_Decr(Second);
		JB_Decr(First);
		JB_Decr(Params);
		JB_Decr(List);
		return nil;
	}
	SCDecl* Result = JB_Incr(SC_SameTypeSub(First, Second, Name_space));
	JB_Decr(First);
	JB_Decr(Second);
	if (((bool)Result) and ((bool)JB_FreeIfDead(SC_ExpandToBool(Test, Name_space)))) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(List)));
		JB_Tree_SyntaxAppend(Params, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Msg_BecomeStr(List, JB_SyxThg, JB_LUB[971]);
		JB_SetRef(Params->Obj, SC__Comp_TernaryFunc);
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(List)));
		JB_Tree_SyntaxAppend(Params, _tmPf2);
		JB_Decr(_tmPf2);
		(SC_Msg_TmpTypeSet(Exp, kSC__ASMtmp_kTern));
		JB_Decr(Test);
		JB_Decr(Params);
		JB_Decr(List);
		JB_SafeDecr(Result);
		return Result;
	}
	JB_Decr(List);
	JB_Decr(Params);
	JB_Decr(Test);
	JB_Decr(Result);
	return nil;
}

SCObject* SC_TypeOfThg(Message* Exp, SCNode* Name_space, Message* Side) {
	SCObject* R = SC_Base_LookUpVar(Name_space, Exp->Name, Exp, Side);
	if (JB_Object_FastIsa(R, &SCModuleData)) {
		SCClass* Cls = ((SCModule*)R)->Cls;
		if ((!Cls)) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[747]);
			return nil;
		}
		if (Cls->IsModel) {
			return SC_Class_GetFlyingMemory(Cls, Exp);
		}
		if (SC_Class_IsObject(Cls)) {
			SCDecl* T = Cls->ClassType;
			if (T) {
				JB_SetRef(Exp->Name, T->Name);
				return T;
			}
			if (true) {
				JB_Msg_SyntaxExpect(Exp, nil);
			}
		}
		if (true) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[852]);
			return nil;
		}
	}
	 else if (JB_Object_FastIsa(R, &SCDeclData)) {
		if (Side) {
			(SC_Decl_SyntaxIsSet(((SCDecl*)R), kSC__SCDeclInfo_SetTo, true));
		}
		JB_Object* O = ((SCDecl*)R)->IsLookupOnly;
		if (JB_Object_Isa(O, &MessageData)) {
			SC_Msg_SafeReplaceWith(Exp, JB_Msg_Copy(((Message*)O), Exp));
		}
	}
	return R;
}

SCObject* SC_TypeOfType(Message* Exp, SCNode* Name_space, Message* Side) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* Exp0 = JB_Incr(SC_Msg_UnBra(_tmPf0));
	JB_Decr(_tmPf0);
	SCDecl* Old = JB_Incr(SC_TypeOfExpr(Exp0, Name_space, Side));
	if ((!Old)) {
		JB_Decr(Old);
		JB_Decr(Exp0);
		return nil;
	}
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	SCDecl* New = JB_Incr(SC_ExtractDecl(_tmPf1, Name_space, kSC__DeclMode_TypeCast));
	JB_Decr(_tmPf1);
	if ((!New)) {
		JB_Decr(New);
		JB_Decr(Old);
		JB_Decr(Exp0);
		return nil;
	}
	if (SC_Decl_IsntReallyCastable(Old, Exp0) or SC_Decl_IsntReallyCastable(New, Exp0)) {
		if (true) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[728]);
		}
	}
	 else {
		if (SC_Msg_IsInt(Exp0) and SC_Decl_TypeSuffers(New)) {
			if (SC_Msg_IsZero(Exp0) or SC_Decl_IsNil(Old)) {
				JB_SetRef(New, SC_Decl_MakeNewNil(New));
			}
			 else {
				JB_SetRef(New, SC_Decl_MakeNewReal(New));
			}
		}
		SC_Decl_NoBlindCasts(New, Old, Exp, Name_space);
	}
	JB_Decr(Exp0);
	JB_Decr(Old);
	JB_SafeDecr(New);
	return New;
}

SCObject* SC_TypeOfUnit(Message* Exp, SCNode* Name_space, Message* Side) {
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[1748], false)) {
		//using;
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
		JB_Msg_BecomeStr(Exp, JB_SyxType, JB_LUB[0]);
		JB_Msg_AppendSyx(Exp, JB_SyxThg, JB_LUB[1748]);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		SCDecl* _tmPf2 = JB_Incr(JB_TypeInt64->TypeNormal);
		JB_MsgPos_Destructor((&_usingf0));
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	double Mul = 0.0f;
	SCClass* Type = JB_Incr(JB_TypeInt);
	JB_String* Unit = JB_Incr(Exp->Name);
	if ((JB_Str_Equals(Unit, JB_LUB[979], false)) or (JB_Str_Equals(Unit, JB_LUB[978], false))) {
		Mul = ((double)(1 << 10));
	}
	 else if ((JB_Str_Equals(Unit, JB_LUB[1001], false)) or (JB_Str_Equals(Unit, JB_LUB[1000], false))) {
		Mul = ((double)(1 << 20));
	}
	 else if ((JB_Str_Equals(Unit, JB_LUB[894], false)) or (JB_Str_Equals(Unit, JB_LUB[893], false))) {
		Mul = ((double)(1 << 30));
	}
	 else if ((JB_Str_Equals(Unit, JB_LUB[1263], false)) or (JB_Str_Equals(Unit, JB_LUB[1262], false))) {
		Mul = ((double)(((int64)1) << ((int64)40)));
	}
	 else if (JB_Str_Equals(Unit, JB_LUB[1992], false)) {
		Mul = 0;
	}
	 else {
		JB_SetRef(Type, JB_TypeDate);
		float S4 = 64.0f * 1024.0f;
		if (JB_Str_Equals(Unit, JB_LUB[1910], false)) {
			Mul = S4;
		}
		 else if (JB_Str_Equals(Unit, JB_LUB[1801], false)) {
			Mul = 64.0f;
		}
		 else if (JB_Str_Equals(Unit, JB_LUB[2105], false)) {
			Mul = (3.1415926535897932f);
			JB_SetRef(Type, JB_Typef64);
		}
		 else if (JB_Str_Equals(Unit, JB_LUB[2106], false)) {
			Mul = (6.2831853071795864f);
			JB_SetRef(Type, JB_Typef64);
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[1588], JB_LUB[1587])) {
			Mul = (86400.0f * S4);
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[2046], JB_LUB[2045])) {
			Mul = (604800.0f * S4);
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[2062], JB_LUB[2061])) {
			Mul = (31536000.0f * S4);
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[1787], JB_LUB[1785])) {
			Mul = (60.0f * S4);
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[1696], JB_LUB[1695])) {
			Mul = (3600.0f * S4);
		}
		 else {
			if (true) {
				JB_Msg_SyntaxExpect(Exp, JB_LUB[1348]);
			}
		}
	}
	JB_Decr(Unit);
	Message* It = JB_Incr(((Message*)JB_Ring_First(Exp)));
	if ((!It)) {
		JB_Decr(It);
		JB_Decr(Type);
		return nil;
	}
	JB_String* Str = JB_Incr(JB_LUB[0]);
	double Val = JB_Msg_Float(It);
	if ((!Mul)) {
		JB_SetRef(Str, JB_dbl_Render((1.0f / Val), 6, nil));
		JB_SetRef(Type, JB_Typefloat);
	}
	 else {
		Val = (Val * Mul);
		if (Type != JB_TypeInt) {
			JB_SetRef(Str, JB_dbl_RenderFloat(Val, nil));
		}
		 else if (JB_Str_ContainsByte(It->Name, '.')) {
			JB_SetRef(Str, JB_dbl_RenderFloat(Val, nil));
			double Big = 16.0f * (1024.0f * 1024.0f);
			if ((Val >= Big) or (Val < (-Big))) {
				JB_SetRef(Type, JB_Typef64);
			}
			 else {
				JB_SetRef(Type, JB_Typefloat);
			}
		}
		 else {
			JB_SetRef(Str, JB_int64_Render(((int64)Val), nil));
			double Big = ((double)(((int64)1) << ((int64)31)));
			if ((Val >= Big) or (Val < (-Big))) {
				JB_SetRef(Type, JB_TypeInt64);
			}
		}
	}
	if (JB_Msg_SyntaxEquals(It, Str, false)) {
		JB_SetRef(Str, It->Name);
	}
	JB_Msg_BecomeStr(Exp, JB_SyxNum, Str);
	JB_Decr(Str);
	JB_Tree_Remove(It);
	JB_Decr(It);
	SCDecl* _tmPf1 = JB_Incr(Type->TypeNormal);
	JB_Decr(Type);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCDecl* SC_TypeOfVecAccess(Message* Index, SCDecl* Ty0, int W) {
	if (JB_Msg_EqualsSyx(Index, JB_SyxNum, false)) {
		if ((!JB_int64_OperatorInRange(JB_Msg_Int(Index, 0), W))) {
			JB_Msg_SyntaxExpect(Index, JB_LUB[1370]);
			return nil;
		}
	}
	if (JB_TC_IsFloat(Ty0->Type->TypeInfo)) {
		return SC_Class_NotConst(JB_Typefloat);
	}
	return SC_Class_NotConst(JB_TypeInt);
}

JB_String* SC_UniqueTmpVar(SCNode* Base, JB_String* Name) {
	JB_FS_AppendByte(JB_fs_tmp_num, '_');
	JB_FS_AppendString(JB_fs_tmp_num, Name);
	if (Base) {
		SCFunction* FN = SC_Base_OwningFunc(Base);
		if (FN) {
			JB_FS_AppendByte(JB_fs_tmp_num, 'f');
			JB_FS_AppendInt32(JB_fs_tmp_num, ((int)FN->TmpCounter++));
		}
	}
	 else {
		JB_FS_AppendInt32(JB_fs_tmp_num, SC__SC_UniqueNum++);
	}
	return JB_FS_SyntaxCast(JB_fs_tmp_num);
}

int SC_UseCustomOperators(SCDecl* LC, SCDecl* RC, SCOperator* Comp, Message* ErrPlace) {
	if (((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_Custom)) or ((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_CaseAware))) {
		return kSC__CustomOps_Needed;
	}
	bool CompOrSet = SC_Opp_IsCompSet(Comp);
	DataTypeCode LNT = SC_Decl_TypeInfo(LC);
	DataTypeCode RNT = SC_Decl_TypeInfo(RC);
	int LN = JB_TC_NumericCountBoolsToo(LNT);
	int RN = JB_TC_NumericCountBoolsToo(RNT);
	if ((!(((bool)LN) and (LN == RN)))) {
		if (((bool)LN) and (((bool)RN) and ((LN == 1) or (RN == 1)))) {
			if (CompOrSet) {
				return kSC__CustomOps_Needed;
			}
			if ((!JB_TC_SameBasicType(LNT, RNT))) {
				JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1371]);
				return 0;
			}
			if (LN > RN) {
				return kSC__CustomOps_LeftOnlyIsVector;
			}
			 else {
				return kSC__CustomOps_RightOnlyIsVector;
			}
		}
		return kSC__CustomOps_Needed;
	}
	int Extra = 0;
	if (((bool)LN) and ((bool)RN)) {
		bool GotABool = ((kJB__TC_bool == LNT) or (kJB__TC_bool == RNT));
		if (LNT != RNT) {
			if (GotABool and ((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_Compare))) {
				JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[726]);
				return 0;
			}
			if (((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_MathLike)) and (!((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_NoExtraBits)))) {
				Extra = kSC__CustomOps_TypeCastToBetter;
			}
		}
		 else {
			if (GotABool and (!((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_Compare)))) {
				Extra = kSC__CustomOps_TypeCastFromBool;
			}
			 else if (((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_MakesSigned)) and SC_Decl_IsUintLike(LC)) {
				Extra = kSC__CustomOps_TypeCastToBetter;
			}
		}
	}
	if ((!SC__Base_ConstantsLoadingOverride) and LC->Type->TreatAsBaseType) {
		return kSC__CustomOps_Needed | Extra;
	}
	if ((LN > 1) and CompOrSet) {
		return kSC__CustomOps_Needed | Extra;
	}
	if ((!Extra)) {
		SCClass* T = LC->Type;
		if (((bool)T->Super) and SC_Class_HasOperator(T, Comp->FuncName)) {
			return kSC__CustomOps_Needed;
		}
	}
	return Extra;
}

SCClass* SC_VecType(bool Isfloat, int Count) {
	if (Isfloat) {
		if (Count == 2) {
			return JB_TypeVec2;
		}
		if (Count == 3) {
			return JB_TypeVec3;
		}
		if (Count == 4) {
			return JB_TypeVec4;
		}
		return JB_Typefloat;
	}
	if (Count == 2) {
		return JB_TypeiVec2;
	}
	if (Count == 3) {
		return JB_TypeiVec3;
	}
	if (Count == 4) {
		return JB_TypeiVec4;
	}
	return JB_TypeInt;
}

void* SC_voidtest(void* Abc) {
	//visible;
	return Abc;
}

void* SC_voidtest2(void* Abc) {
	void* Abc2 = SC_voidtest(Abc);
	//visible;
	return nil;
}


Message* JB_Tk__AddToOutput(Message* Output, Message* Curr, Message* Prev, int Pos) {
	if (Prev) {
		int Extra = JB_Msg_PrevIndentCheck(Curr, Prev);
		if (Extra < 0) {
			return JB_Tk__LoweredIndent(Output, Curr);
		}
		if (Extra > 0) {
			if ((Extra == 2) and (JB_int_OperatorIsa(((int)Prev->Indent), 4))) {
				Syntax Cf = Curr->Func;
				if ((Prev->Func != JB_SyxTmp) or ((Cf != JB_SyxTmp) and (Cf != JB_SyxBra))) {
					return JB_Tk__UnexpectedSyntax(Curr);
				}
				if (((bool)(Curr->Indent & 1))) {
					return JB_Tk__ErrorAdd(JB_LUB[911], Curr->Position);
				}
				JB_FreeIfDead(JB_Tk__NewParentName(Prev, JB_SyxArg, Curr->Position, JB_LUB[0]));
				JB_Tree_SyntaxAppend(Prev, Curr);
				return Prev;
			}
			return JB_Msg_GoIntoInvisArg(Curr, Prev, Pos);
		}
	}
	JB_Tree_SyntaxAppend(Output, Curr);
	return Output;
}

void JB_Tk__AddXMLText(Message* XML, JB_String* S, int Start, int I) {
	Ind A = JB_Str_OutWhite(S, Start, JB_int__Max());
	if (A >= I) {
		return;
	}
	JB_String* Str = JB_Incr(JB_Str_Range(S, Start, I));
	JB_String* Str2 = JB_Incr(JB_Str_Trim(Str, nil));
	JB_Decr(Str);
	JB_String* Str3 = JB_Incr(JB_Str_MultiReplaceAll(Str2, JB__Constants_XML_UnEscapeStr, JB_StdErr));
	JB_Decr(Str2);
	JB_FreeIfDead(JB_Tk__NewParentName(XML, JB_SyxXTxt, Start, Str3));
	JB_Decr(Str3);
}

Message* JB_Tk__BarThings(int Start, Syntax Syx) {
	Message* Rz = nil;
	if (JB_Tk__NextByte() == '=') {
		JB_Decr(Rz);
		return nil;
	}
	JB__Tk__StopBars = (kJB__Tk_kTemporalSyx | kJB__Tk_kFuncAfterBar);
	Message* Item = JB_Incr(JB_Tk__ProcessThingNoBar(kJB__Tk_kOppNoBar, false));
	if (Item) {
		JB_SetRef(Item, JB_Tk__ParseItem(Item, 0, kJB__Tk_kOppNoBar));
	}
	 else {
		JB_SetRef(Item, JB_Tk__NewEmpty(nil, JB_SyxEmb, Start, Start));
	}
	JB__Tk__StopBars = 0;
	if ((!JB_Tk__ExpectEndChar(JB_Tk__NextStart(), JB_LUB[2068], true))) {
		JB_Decr(Item);
		JB_Decr(Rz);
		return nil;
	}
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, Syx, Start, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Rz, Item);
	JB_Decr(Item);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__BeforeRelSub(int Start, bool Mode) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Tk__NewParent(nil, JB_SyxBRel, Start, JB_Tk__NextStart()));
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(0, Mode));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		JB_Decr(Rz);
		return nil;
	}
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(Rz);
	return Rz;
}

bool JB_Tk__CanStatement() {
	return JB_CS_HasChar(JB__Constants_CSAfterStatement, JB_Tk__NextByte());
}

Message* JB_Tk__ChainTemporalRels(Message* FirstThing, Message* Opp) {
	Message* Rz = nil;
	if (JB_Msg_EqualsSyx(Opp, JB_SyxSCom, false)) {
		JB_Tree_SyntaxAppend(Opp, FirstThing);
		JB_Decr(Rz);
		return Opp;
	}
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, JB_SyxTRel, FirstThing->Position, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Rz, FirstThing);
	JB_Tree_SyntaxAppend(Rz, Opp);
	if ((!JB_Tk__WillEnd())) {
		Message* Last = JB_Incr(JB_Tk__ProcessThingOrTmp(kJB__Tk_kOpp));
		if (Last) {
			Message* _tmPf0 = JB_Incr(JB_Tk__FixTRels(Rz, Last));
			JB_Decr(Last);
			JB_Decr(Rz);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(Last);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* JB_Tk__CharName(int Start, byte Find) {
	Ind After = JB_Str_JBFind(JB__Tk_Data, Find, Start + 1, JB_int__Max());
	if (JB_Ind_SyntaxCast(After)) {
		(JB_Tk__NextStartSet(After + 1));
		JB_String* _tmPf0 = JB_Incr(JB_Tk__SyntaxAccess(Start + 1, After, JB_SyxChar));
		JB_String* _tmPf1 = JB_Incr(JB_Str_Unescape(_tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return nil;
}

Message* JB_Tk__CloseXML(Message* XML, int I, JB_String* S) {
	Ind CloseEnd = JB_Str_FindByte(S, '>', I + 2, JB_int__Max());
	if ((!JB_Ind_SyntaxCast(CloseEnd))) {
		return JB_Tk__ErrorAdd(JB_LUB[766], I);
	}
	JB_String* CloseName = JB_Incr(JB_Str_Range(S, I + 2, CloseEnd));
	if ((!JB_Str_Equals(CloseName, XML->Name, false))) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1109]);
		JB_FS_AppendString(_fsf0, CloseName);
		JB_FS_AppendString(_fsf0, JB_LUB[592]);
		JB_FS_AppendString(_fsf0, XML->Name);
		JB_FS_AppendByte(_fsf0, '>');
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		Message* _tmPf2 = JB_Incr(JB_Tk__ErrorAdd(_tmPf1, I));
		JB_Decr(_tmPf1);
		JB_Decr(CloseName);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_Decr(CloseName);
	(JB_Tk__NextStartSet((++CloseEnd)));
	XML->RangeLength = (XML->Position - CloseEnd);
	return XML;
}

Message* JB_Tk__DecorateThing(Message* R, int Ops) {
	JB_Incr(R);
	JB_SetRef(R, JB_Tk__GetFuncAfter(R));
	if (JB_Tk__WillEnd()) {
		JB_SafeDecr(R);
		return R;
	}
	int NotTemp = Ops & (~kJB__Tk_kOppTemporal);
	if (((bool)NotTemp) and (!JB_Msg_EqualsSyx(R, JB_SyxArg, false))) {
		JB_SetRef(R, JB_Tk__MakeRel(R, NotTemp));
	}
	if (((bool)(Ops & kJB__Tk_kOppTemporal))) {
		Message* Opp = JB_Incr(JB_Tk__Process(kJB__Tk_kOppTemporal, false, nil));
		if (Opp) {
			if (JB_Msg_SyntaxEquals(Opp, JB_LUB[585], false)) {
				Message* A = JB_Incr(JB_Tk__PostInnerAdj(R, Opp));
				if ((!A)) {
					JB_Decr(A);
					JB_Decr(Opp);
					JB_SafeDecr(R);
					return R;
				}
				JB_Decr(R);
				Message* _tmPf1 = JB_Incr(JB_Tk__DecorateThing(A, Ops));
				JB_Decr(A);
				JB_Decr(Opp);
				JB_SafeDecr(_tmPf1);
				return _tmPf1;
			}
			Message* _tmPf0 = JB_Incr(JB_Tk__ChainTemporalRels(R, Opp));
			JB_Decr(R);
			JB_Decr(Opp);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(Opp);
	}
	JB_SafeDecr(R);
	return R;
}

Message* JB_Tk__DotSub(Syntax Fn, int Start, Message* Parent) {
	Message* Rz = nil;
	int After = JB_Tk__Byte((++Start));
	if (JB_CS_HasChar(JB__Constants_CSWordStart, After)) {
		After = JB_Tk__WordAfter(Start);
		if ((!After)) {
			return nil;
		}
	}
	 else if (JB__Tk__DotInsertAllow) {
		After = Start;
		JB__Tk__DotInsertAllow = false;
	}
	 else {
		return JB_Tk__ErrorAdd(JB_LUB[1016], Start);
	}
	Rz = JB_Tk__NewSkip(nil, Fn, Start - 1, Start, After);
	if (JB_Tk__EatString(JB_LUB[262])) {
		JB_Tk__Params(Rz, After);
	}
	 else {
		Message* Prms = JB_Tk__NewEmpty(Rz, JB_SyxEmb, After, After);
		if (((JB_Msg_EqualsSyx(Parent, JB_SyxArg, false))) and JB_Tk__CanStatement()) {
			Message* P = JB_Tk__ProcessThingParent(Prms, kJB__Tk_kOpp, kJB__Tk_kThing);
			if (P) {
				JB_Tree_SyntaxAppend(Prms, P);
				Prms->Func = JB_SyxPrm;
			}
		}
	}
	return Rz;
}

int JB_Tk__EmbeddedCode(JB_String* Close, Message* Dest, int TmpoFlags) {
	Ind Result = JB_Str_InStr(JB__Tk_Data, Close, JB_Tk__NextStart(), JB_int__Max(), false);
	if ((!JB_Ind_SyntaxCast(Result))) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1015]);
		JB_FS_AppendString(_fsf0, Close);
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf2, JB_Tk__NextStart()));
		JB_Decr(_tmPf2);
		return Result;
	}
	JB_Tk__ParseLoop(Dest, TmpoFlags);
	if (JB_Tk__NextStart() > Result) {
		FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf1, JB_LUB[1055]);
		JB_FS_AppendString(_fsf1, Close);
		JB_FS_AppendString(_fsf1, JB_LUB[255]);
		JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf3, Result));
		JB_Decr(_tmPf3);
		return Result;
	}
	Result = (Result + JB_Str_Length(Close));
	(JB_Tk__NextStartSet(Result));
	return Result;
}

Message* JB_Tk__ErrorAdd(JB_String* S, Ind Start) {
	if (JB_Tk__OK()) {
		return JB_Tk__ErrorAlwaysAdd(S, Start);
	}
	return nil;
}

Message* JB_Tk__ErrorAlwaysAdd(JB_String* S, Ind Start) {
	(JB_Tk__ErrorStartSet(Start));
	Message* _tmPf0 = JB_Incr(JB_Msg_ConstructorEmpty(nil));
	JB_Error* Err = JB_Incr(JB_Err_Constructor(nil, _tmPf0, JB_LUB[0], kJB__ErrorSeverity_Error, JB_LUB[0]));
	JB_Decr(_tmPf0);
	Err->Position = Start;
	(JB_Err_SyntaxIsSet(Err, kJB__ErrorFlags_DontStrip, true));
	(JB_Err_SyntaxIsSet(Err, kJB__ErrorFlags_Parse, true));
	JB_SetRef(Err->Name, S);
	JB_SetRef(Err->OriginalData, JB__Tk_Data);
	JB_Rec_AppendErr(JB_StdErr, Err);
	JB_Decr(Err);
	return nil;
}

void JB_Tk__ErrorEvent(int Start, int ExpectedBits, int RealBits) {
	//visible;
	FastString* Err = JB_Incr(JB_FS_Constructor(nil));
	if ((!((bool)(RealBits & kJB__Tk_kIllegalChar)))) {
		if ((!(((bool)ExpectedBits) and (((bool)RealBits) and ((bool)JB_Tk__FindError(ExpectedBits)))))) {
			JB_FS_AppendString(Err, JB_LUB[1340]);
		}
		 else {
			{
				int _Valuef1 = 0;
				while (_Valuef1 < 5) {
					ExpectedBits = JB_Tk__MessageErrorSub(Err, ExpectedBits, RealBits);
					_Valuef1++;
					if ((!ExpectedBits)) {
						break;
					}
				};
			}
			;
			JB_FS_AppendString(Err, JB_LUB[167]);
		}
	}
	if (RealBits == kJB__Tk_kEndOfLine) {
		JB_FS_AppendString(Err, JB_LUB[1627]);
	}
	 else if ((!RealBits)) {
		JB_FS_AppendString(Err, JB_LUB[1626]);
	}
	 else {
		if (JB_Tk__NextStart() <= Start) {
			(JB_Tk__NextStartSet(Start + 1));
		}
		if (((bool)(RealBits & kJB__Tk_kIllegalChar))) {
			JB_FS_AppendString(Err, JB_LUB[885]);
			byte Illegal = JB_Tk__Byte(Start);
			if (JB_byte_CanPrintAsNormalChar(Illegal)) {
				JB_FS_AppendByte(Err, '\'');
				JB_FS_AppendByte(Err, JB_Tk__Byte(Start));
				JB_FS_AppendByte(Err, '\'');
			}
			 else {
				JB_FS_AppendString(Err, JB_LUB[447]);
				JB_FS_AppendHex(Err, Illegal, 2);
				JB_FS_AppendByte(Err, ' ');
			}
		}
		 else {
			JB_FS_AppendByte(Err, '\'');
			Ind N = JB_int_OperatorMin(JB_Tk__NextStart(), (Start + 100));
			JB_String* _tmPf3 = JB_Incr(JB_Tk__SyntaxAccess(Start, N, JB_SyxNil));
			JB_String* _tmPf2 = JB_Incr(JB_Str_Escape(_tmPf3));
			JB_Decr(_tmPf3);
			JB_FS_AppendString(Err, _tmPf2);
			JB_Decr(_tmPf2);
			JB_FS_AppendByte(Err, '\'');
		}
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SyntaxCast(Err));
	JB_Decr(Err);
	JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf4, Start));
	JB_Decr(_tmPf4);
}

void JB_Tk__ErrorLetter(int Start) {
	JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[848], Start));
}

bool JB_Tk__ExpectEndChar(int Start, JB_String* S, bool Expect) {
	JB_Tk__CleanSpaces();
	if (JB_Tk__EatString(S)) {
		return true;
	}
	if (Expect) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1012]);
		JB_FS_AppendString(_fsf0, S);
		JB_FS_AppendByte(_fsf0, '\'');
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf1, Start));
		JB_Decr(_tmPf1);
	}
	return false;
}

Message* JB_Tk__fAccess(int Start, Message* Parent) {
	Message* Rz = nil;
	Ind Pos = ((Ind)JB_Ternary(((bool)Parent), Parent->Position, ((Ind)Start)));
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, JB_SyxAcc, Pos, JB_LUB[0]));
	Message* Prms = JB_Incr(JB_Tk__NewParentName(Rz, JB_SyxArr, Start, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(Prms, JB_LUB[1419], 0);
	(JB_Msg_AfterSet(Rz, JB_Msg_After(Prms)));
	JB_Decr(Prms);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fAdjectiveOp(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, JB_SyxAdj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__Process(kJB__Tk_kOppChain, kJB__Tk_kExpect, nil));
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fAdjectiveThing(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, JB_SyxAdj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(0, kJB__Tk_kExpect));
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fAfterRel(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, JB_SyxARel, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fArgColon(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, JB_SyxArg, Start, JB_LUB[0]));
	Rz->RangeLength = 1;
	while (true) {
		Message* Item = JB_Incr(JB_Tk__Process(kJB__Tk_kTemporal, false, Rz));
		if ((!Item)) {
			JB_SetRef(Item, JB_Tk__ProcessThing(kJB__Tk_kOpp, false));
		}
		JB_Tree_SyntaxAppend(Rz, Item);
		if ((!(((bool)Item) and JB_Tk__Allow(kJB__Tk_kComma)))) {
			JB_Decr(Item);
			break;
		}
		JB_Decr(Item);
	};
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fArgName(int Start, Message* Parent) {
	if (Parent) {
		Syntax F = Parent->Func;
		if ((F == JB_SyxArg) or ((F == JB_SyxList) or ((F == JB_SyxBra) or (F == JB_SyxArr)))) {
			JB_String* Name = JB_Incr(JB_Tk__CharName(Start + 1, '"'));
			if (Name != nil) {
				JB_SetRef(Parent->Name, Name);
				JB_Decr(Name);
				return Parent;
			}
			JB_Decr(Name);
		}
	}
	return nil;
}

Message* JB_Tk__fArgOpen(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, JB_SyxArg, Start, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(Rz, JB_LUB[2079], kJB__Tk_kTemporal);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fArray(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, JB_SyxArr, Start, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(Rz, JB_LUB[1419], kJB__Tk_kTemporalSyxNoBar);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fAsk(int Start, Message* Parent) {
	return JB_Tk__fAskSub(Start, Parent, JB_SyxAsk);
}

Message* JB_Tk__fAskSub(int Start, Message* Parent, Syntax F) {
	Message* Rz = nil;
	Message* Opp = JB_Incr(JB_Tk__Process(kJB__Tk_kOpp, kJB__Tk_kExpect, nil));
	Message* First = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOppSyx, kJB__Tk_kExpect));
	if ((!(((bool)First) and ((bool)Opp)))) {
		JB_Decr(First);
		JB_Decr(Opp);
		JB_Decr(Rz);
		return nil;
	}
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, F, Start, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Rz, First);
	JB_Decr(First);
	Message* NeedsAdj = JB_Incr(JB_Tk__Process(kJB__Tk_kOpp, kJB__Tk_kAllow, nil));
	if ((!NeedsAdj)) {
		JB_Tree_SyntaxAppend(Rz, Opp);
	}
	 else {
		Message* Adj = JB_Incr(JB_Tk__NewParentName(Rz, JB_SyxAdj, NeedsAdj->Position, JB_LUB[0]));
		JB_Tree_SyntaxAppend(Adj, Opp);
		JB_Tree_SyntaxAppend(Adj, NeedsAdj);
		JB_Decr(Adj);
		Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThingParent(Rz, kJB__Tk_kOppSyx, kJB__Tk_kThing));
		JB_Tree_SyntaxAppend(Rz, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Opp);
	JB_Decr(NeedsAdj);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fAtName(int Start, Message* Parent) {
	return JB_Tk__NewWord(nil, JB_SyxName, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fAtNamedExp(int Start, Message* Parent) {
	if ((!(((bool)Parent) and JB_Tk__NeedName(Parent)))) {
		return nil;
	}
	Parent->Func = JB_SyxName;
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(0, kJB__Tk_kExpect));
	JB_Tree_SyntaxAppend(Parent, _tmPf0);
	JB_Decr(_tmPf0);
	return Parent;
}

Message* JB_Tk__fBackTick(int Start, Message* Parent) {
	Ind After = JB_Str_FindByte(JB__Tk_Data, '`', JB_Tk__NextStart(), JB_int__Max());
	if ((!JB_Ind_SyntaxCast(After))) {
		return JB_Tk__ErrorAdd(JB_LUB[1237], Start);
	}
	(JB_Tk__NextStartSet(After + 1));
	return JB_Tk__NewSkip(nil, JB_SyxBack, Start, Start + 1, After);
}

Message* JB_Tk__fBAdjectiveOp(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, JB_SyxBadj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__Process(kJB__Tk_kOppChain, kJB__Tk_kExpect, nil));
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Tree_SyntaxAppend(Rz, Parent);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fBAdjectiveThing(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, JB_SyxBadj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(0, kJB__Tk_kExpect));
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Tree_SyntaxAppend(Rz, Parent);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fBeforeRel(int Start, Message* Parent) {
	return JB_Tk__BeforeRelSub(Start, kJB__Tk_kAllow);
}

Message* JB_Tk__fBeforeRelMinus(int Start, Message* Parent) {
	byte C = JB_Tk__Byte(Start + 1);
	if (JB_byte_IsInt(C) and (JB_Tk__Byte(Start) == '-')) {
		return JB_Tk__NumberSub(Start + 1, Start);
	}
	return JB_Tk__BeforeRelSub(Start, kJB__Tk_kAllow);
}

Message* JB_Tk__fBinary(int Start, Message* Parent) {
	Ind End = JB_Str_InStr(JB__Tk_Data, JB_LUB[284], Start + 2, JB_int__Max(), false);
	if (JB_Ind_SyntaxCast(End)) {
		JB_String* S = JB_Incr(JB_Tk__SyntaxAccess(Start + 2, End, JB_SyxBin));
		(JB_Tk__NextStartSet(End + 2));
		JB_String* _tmPf0 = JB_Incr(JB_Str_UnHex(S, nil));
		JB_Decr(S);
		Message* _tmPf1 = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxBin, Start, _tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return JB_Tk__ErrorAdd(JB_LUB[666], Start);
}

Message* JB_Tk__fBracket(int Start, Message* Parent) {
	Message* Rz = nil;
	Rz = JB_Tk__NewParentName(nil, JB_SyxList, Start, JB_LUB[0]);
	bool Lines = JB_Tk__ParseLoopFlags(Rz, JB_LUB[278], kJB__Tk_kTemporalSyxNoBar);
	if ((!Lines) and JB_Ring_HasChildCount(Rz, 1)) {
		JB_Msg_BecomeStr(Rz, JB_SyxBra, JB_LUB[0]);
	}
	return Rz;
}

Message* JB_Tk__fChar(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Tk__fCharSub(Start, Start, '\''));
	if ((!Rz)) {
		JB_Decr(Rz);
		return JB_Tk__ErrorAdd(JB_LUB[758], JB_Tk__NextStart());
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fCharSub(int Pos, int Start, byte Find) {
	Message* Rz = nil;
	JB_String* Name = JB_Incr(JB_Tk__CharName(Start, Find));
	if (Name != nil) {
		JB_SetRef(Rz, JB_Tk__NewParentName(nil, JB_SyxChar, Pos, Name));
	}
	JB_Decr(Name);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fComment(int Start, Message* Parent) {
	int Count = 1;
	Ind I = JB_Tk__NextStart();
	JB_String* D = JB_Incr(JB__Tk_Data);
	while (true) {
		I = JB_Str_FindByte(D, '/', I + 1, JB_int__Max());
		if ((!JB_Ind_SyntaxCast(I))) {
			JB_Decr(D);
			return JB_Tk__ErrorAdd(JB_LUB[771], Start);
		}
		 else if (JB_Str_ByteValue(D, I - 1) == '*') {
			Count--;
		}
		 else if (JB_Str_ByteValue(D, I + 1) == '*') {
			Count++;
			I = (I + 2);
		}
		if ((!Count)) {
			break;
		}
	};
	JB_Decr(D);
	(JB_Tk__NextStartSet(I + 1));
	return JB__Tk__EndOfLineMarker;
}

Message* JB_Tk__fCommentLine(int Start, Message* Parent) {
	JB_Tk__GotoEndOfLine(JB_Tk__NextStart());
	return JB__Tk__EndOfLineMarker;
}

Message* JB_Tk__fDecl(int Start, Message* Parent) {
	Message* Result = JB_Incr(JB_Tk__BarThings(Start, JB_SyxDecl));
	if (((bool)Result) and (!JB_Tk__WillEnd())) {
		Message* Curr = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOppSyx | kJB__Tk_kOppTemporal, false));
		if (Curr) {
			JB_Tree_SyntaxAppend(Result, Curr);
		}
		JB_Decr(Curr);
	}
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fDot(int Start, Message* Parent) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(Parent)));
	Message* _tmPf1 = JB_Incr(JB_Tk__DotSub(JB_SyxDot, Start, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Tk__fDotAccess(int Start, Message* Parent) {
	Message* Rz = nil;
	int N = JB_Tk__NextStart();
	Message* Name = JB_Tk__NewWord(nil, JB_SyxStr, N, N);
	int After = JB_Tk__NextStart();
	JB_SetRef(Name->Name, JB_Str_ReplaceAll(Name->Name, JB_LUB[2107], JB_LUB[99], false, nil));
	Rz = JB_Tk__NewEmpty(nil, JB_SyxAcc, Start, After);
	Message* Prms = JB_Tk__NewEmpty(Rz, JB_SyxArr, Start, Start);
	JB_Tree_SyntaxAppend(Prms, Name);
	return Rz;
}

Message* JB_Tk__fEndOfLine(int Start, Message* Parent) {
	return JB__Tk__EndOfLineMarker;
}

Message* JB_Tk__fError(int Start, Message* Parent) {
	return nil;
}

Message* JB_Tk__fError2(int Start, Message* Parent) {
	return JB_Tk__ErrorAdd(JB_LUB[1342], Start);
}

Message* JB_Tk__fFuncCall(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, JB_SyxFunc, Parent->Position, JB_LUB[0]));
	JB_Tk__Params(Rz, Start);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__FillXML(Message* XML, Ind I) {
	JB_String* S = JB_Incr(JB__Tk_Data);
	if (JB_Str_ByteValue(S, I - 1) == '/') {
		(JB_Tk__NextStartSet(I + 1));
		JB_Decr(S);
		return XML;
	}
	(JB_Tk__NextStartSet(I));
	while (true) {
		int Prev = JB_Tk__NextStart();
		I = JB_Str_FindByte(S, '<', Prev, JB_int__Max());
		if ((!JB_Ind_SyntaxCast(I))) {
			JB_Decr(S);
			return JB_Tk__ErrorAdd(JB_LUB[832], XML->Position);
		}
		JB_Tk__AddXMLText(XML, S, Prev, I);
		(JB_Tk__NextStartSet(I));
		byte Next = JB_Str_ByteValue(S, I + 1);
		if (Next == '/') {
			Message* _tmPf3 = JB_Incr(JB_Tk__CloseXML(XML, I, S));
			JB_Decr(S);
			JB_SafeDecr(_tmPf3);
			return _tmPf3;
		}
		if (Next != '!') {
			Message* _tmPf0 = JB_Incr(JB_Tk__fXML(I, nil));
			if ((!_tmPf0)) {
				JB_Decr(_tmPf0);
				JB_Decr(S);
				return nil;
			}
			JB_Tree_SyntaxAppend(XML, _tmPf0);
			JB_Decr(_tmPf0);
		}
		 else if (JB_Str_MidEquals(S, I, JB_LUB[573], false)) {
			Message* _tmPf1 = JB_Incr(JB_Tk__XMLWhatever(I, 4, JB_LUB[309], JB_SyxXCom));
			if ((!_tmPf1)) {
				JB_Decr(_tmPf1);
				JB_Decr(S);
				return nil;
			}
			JB_Tree_SyntaxAppend(XML, _tmPf1);
			JB_Decr(_tmPf1);
		}
		 else if (JB_Str_MidEquals(S, I, JB_LUB[575], false)) {
			Message* _tmPf2 = JB_Incr(JB_Tk__XMLWhatever(I, 9, JB_LUB[1422], JB_SyxXCDT));
			if ((!_tmPf2)) {
				JB_Decr(_tmPf2);
				JB_Decr(S);
				return nil;
			}
			JB_Tree_SyntaxAppend(XML, _tmPf2);
			JB_Decr(_tmPf2);
		}
		 else {
			JB_Decr(S);
			return JB_Tk__ErrorAdd(JB_LUB[0], I);
		}
	};
	JB_Decr(S);
}

int JB_Tk__FindError(int Num) {
	if (Num == kJB__Tk_kThing) {
		return kJB__Tk_kThing;
	}
	{
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(JB__Tk__ErrorNames));
		while (true) {
			JB_String* _Valuef2 = JB_Incr(((JB_String*)JB_DictionaryReader_NextValue(_navf0)));
			if (_Valuef2 == nil) {
				JB_Decr(_Valuef2);
				break;
			}
			JB_Decr(_Valuef2);
			JB_String* Key = JB_Incr(JB_Nav_Name(_navf0));
			int I = ((int)JB_Str_TextIntegerValid(Key, nil));
			JB_Decr(Key);
			if ((Num & I) == I) {
				JB_Decr(_navf0);
				return I;
			}
		};
		JB_Decr(_navf0);
	}
	;
	return 0;
}

Message* JB_Tk__fInnerNiceAdj(int Start, Message* Parent) {
	return JB_Tk__fAskSub(Start, Parent, JB_Syxbinn);
}

Message* JB_Tk__FixTRels(Message* Self, Message* Last) {
	if ((!Last)) {
		0;
	}
	 else if ((!JB_Msg_EqualsSyx(Last, JB_SyxTRel, false))) {
		JB_Tree_SyntaxAppend(Self, Last);
	}
	 else {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Last)));
		JB_Tree_SyntaxAppend(Self, _tmPf0);
		JB_Decr(_tmPf0);
		(JB_Ring_FirstSet(Last, Self));
		return Last;
	}
	return Self;
}

Message* JB_Tk__fMsgList(int Start, Message* Parent) {
	Message* Result = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxMsg, Start, JB_LUB[0]));
	Message* Name = JB_Incr(JB_Tk__Process(kJB__Tk_kTemporalWord, true, Result));
	if ((!Name)) {
		JB_Decr(Name);
		JB_Decr(Result);
		return nil;
	}
	Message* It = JB_Incr(((Message*)JB_Tree_Second(Name)));
	JB_Decr(Name);
	if (It) {
		Message* _tmPf1 = JB_Incr(JB_Tk__UnexpectedSyntax(It));
		JB_Decr(It);
		JB_Decr(Result);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	JB_Decr(It);
	int Ops = kJB__Tk_kOppSyx | (kJB__Tk_kOppTemporal | kJB__Tk_kOppYoda);
	while (JB_Tk__NextLineAndIndent(Result).Lines) {
		Message* Item = JB_Incr(JB_Tk__ProcessThing(Ops, false));
		if ((!Item)) {
			JB_Decr(Item);
			break;
		}
		if (JB_Str_OperatorEndsWith(Item->Name, JB_LUB[2099])) {
			Message* _tmPf0 = JB_Incr(JB_Tk__ErrorAdd(JB_LUB[1054], Item->Position));
			JB_Decr(Item);
			JB_Decr(Result);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Tree_SyntaxAppend(Result, Item);
		JB_Decr(Item);
	};
	JB_Tk__ExpectEndChar(Start, JB_LUB[2099], true);
	(JB_Msg_AfterSet(Result, JB_Tk__NextStart()));
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fNumber(int Start, Message* Parent) {
	return JB_Tk__NumberSub(Start, Start);
}

Message* JB_Tk__fOpAsThing(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, JB_SyxOat, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__Process(kJB__Tk_kOpp, false, nil));
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOpp, false));
	JB_Tree_SyntaxAppend(Rz, _tmPf1);
	JB_Decr(_tmPf1);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fOppBracket(int Start, Message* Parent) {
	Message* Result = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxBra, Start, JB_LUB[0]));
	Message* Opp1 = JB_Incr(JB_Tk__Process(kJB__Tk_kOppChain, false, nil));
	Message* Opp2 = JB_Incr(JB_Tk__Process(kJB__Tk_kOpp, false, nil));
	if ((!Opp2)) {
		JB_Tree_SyntaxAppend(Result, Opp1);
	}
	 else {
		Message* Rel = JB_Incr(JB_Tk__NewParentName(Result, JB_SyxRel, JB_Tk__NextStart() - 1, JB_LUB[0]));
		JB_Tree_SyntaxAppend(Rel, Opp1);
		JB_Tree_SyntaxAppend(Rel, Opp2);
		Message* _tmPf0 = JB_Incr(JB_Tk__Process(kJB__Tk_kOppChain, false, nil));
		JB_Tree_SyntaxAppend(Rel, _tmPf0);
		JB_Decr(Rel);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Opp1);
	JB_Decr(Opp2);
	JB_Tk__ExpectEndChar(Start, JB_LUB[278], true);
	Message* _tmPf1 = JB_Incr(JB_Tk__OppChain(Result));
	JB_Decr(Result);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Tk__fOppSyx(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, JB_SyxOpp, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fOppSyxNeq(int Start, Message* Parent) {
	Message* Result = JB_Incr(JB_Tk__fOppSyx(Start, nil));
	if ('=' == JB_Tk__NextByte()) {
		JB_Decr(Result);
		return JB_Tk__ErrorAdd(JB_LUB[741], JB_Tk__NextStart());
	}
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fOppWord(int Start, Message* Parent) {
	int After = JB_Tk__WordAfter(Start);
	if (JB_Tk__Byte(After) != '.') {
		Message* Opp = JB_Incr(JB_Tk__NewParent(nil, JB_SyxOpp, Start, After));
		Message* _tmPf0 = JB_Incr(JB_Tk__OppChain(Opp));
		JB_Decr(Opp);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	return nil;
}

Message* JB_Tk__fQuestion(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Tk__NewWord(nil, JB_SyxQues, Start, JB_Tk__NextStart()));
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOpp, false));
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fQuoteLang(int Start, Message* Parent) {
	Message* Rz = nil;
	Rz = JB_Tk__NewParentName(nil, JB_SyxQuot, Start, JB_LUB[0]);
	JB_Tk__ParseLoopFlags(Rz, JB_LUB[621], kJB__Tk_kTemporalSyxNoBar);
	return Rz;
}

Message* JB_Tk__fSDot(int Start, Message* Parent) {
	if (Start > 0) {
		byte C = JB_Tk__Byte(Start - 1);
		if (JB_CS_HasChar(JB__Constants_CSWordMiddle, C)) {
			return nil;
		}
	}
	return JB_Tk__DotSub(JB_SyxSDot, Start, Parent);
}

Message* JB_Tk__fShebang(int Start, Message* Parent) {
	Ind S = JB_Tk__NextStart();
	Ind S2 = JB_Str_Find(JB__Tk_Data, JB__Constants_CSLine, S, JB_int__Max());
	(JB_Tk__NextStartSet(S2));
	return JB_Tk__NewSkip(Parent, JB_SyxSheb, Start, S, S2);
}

Message* JB_Tk__fStatement(int Start, Message* Parent) {
	Message* Tmp = JB_Incr(JB_Tk__fTmp(Start, kJB__Tk_kOpp & (~kJB__Tk_kOppBra), kJB__Tk_kThing, Parent));
	if ((!JB_Msg_EqualsSyx(Tmp, JB_SyxThg, false))) {
		JB_SafeDecr(Tmp);
		return Tmp;
	}
	JB_Tree_Remove(Tmp);
	JB_Decr(Tmp);
	(JB_Tk__NextStartSet(Start));
	return JB_Tk__ProcessThing(kJB__Tk_kOpp, false);
}

Message* JB_Tk__fStatementColon(int Start, Message* Parent) {
	return JB_Tk__fTmp(Start, kJB__Tk_kOpp & (~kJB__Tk_kOppBra), kJB__Tk_kThing | kJB__Tk_kColonArg, Parent);
}

Message* JB_Tk__fString(int Start, Message* Parent) {
	Ind After = JB_Str_JBFind(JB__Tk_Data, '"', (JB_Tk__NextStart()), JB_int__Max());
	if ((!JB_Ind_SyntaxCast(After))) {
		return JB_Tk__ErrorAdd(JB_LUB[1238], JB_Tk__NextStart());
	}
	Ind StrPos = Start + 1;
	Message* Result = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxStr, Start, JB_LUB[0]));
	while (JB_Ind_SyntaxCast(StrPos)) {
		Ind NewStrPos = JB_Str_JBFind(JB__Tk_Data, '$', StrPos, After);
		if ((!JB_Ind_SyntaxCast(NewStrPos))) {
			NewStrPos = After;
		}
		if (NewStrPos > StrPos) {
			Message* Str = JB_Incr(JB_Tk__NewParent(Result, JB_SyxEmb, StrPos, NewStrPos));
			JB_SetRef(Str->Name, JB_Str_Unescape(Str->Name));
			JB_Decr(Str);
		}
		if (NewStrPos >= After) {
			break;
		}
		NewStrPos++;
		byte C0 = JB_Tk__Byte(NewStrPos);
		NewStrPos = (NewStrPos + (C0 == '{'));
		(JB_Tk__NextStartSet(NewStrPos));
		if (C0 == '{') {
			StrPos = JB_Tk__EmbeddedCode(JB_LUB[2079], Result, kJB__Tk_kTemporalSyx);
		}
		 else {
			Syntax Type = JB_SyxThg;
			if (C0 == '.') {
				Type = JB_SyxSDot;
				NewStrPos++;
			}
			StrPos = JB_Str_OutCharSet(JB__Tk_Data, JB__Constants_CSWordMiddle, NewStrPos + 1, After);
			if ((!(JB_Ind_SyntaxCast(StrPos)))) {
				StrPos = After;
			}
			Message* Rr = JB_Incr(JB_Tk__NewParent(Result, Type, NewStrPos, StrPos));
			if (C0 == '.') {
				JB_FreeIfDead(JB_Tk__NewParentName(Rr, JB_SyxEmb, NewStrPos - 1, JB_LUB[0]));
			}
			JB_Decr(Rr);
		}
		if (StrPos > After) {
			JB_Decr(Result);
			return JB_Tk__ErrorAdd(JB_LUB[834], NewStrPos);
		}
	};
	(JB_Tk__NextStartSet((++After)));
	Result->RangeLength = (After - Start);
	JB_Msg_UnEmbedStr(Result);
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fSuperStr(int Start, Message* Parent) {
	JB_String* D = JB__Tk_Data;
	int Nest = 1;
	while (true) {
		Ind After = JB_Str_FindByte(D, '`', JB_Tk__NextStart(), JB_int__Max());
		if ((!JB_Ind_SyntaxCast(After))) {
			break;
		}
		(JB_Tk__NextStartSet(After + 3));
		if (JB_Str_MidEquals(D, After - 2, JB_LUB[576], false)) {
			Nest++;
		}
		 else if (JB_Str_MidEquals(D, After, JB_LUB[1464], false)) {
			Nest--;
			if ((!Nest)) {
				return JB_Tk__NewSkip(nil, JB_SyxSStr, Start, Start + 3, After);
			}
		}
	};
	return JB_Tk__ErrorAdd(JB_LUB[1237], Start);
}

Message* JB_Tk__fSyntacticComment(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, JB_SyxList, Start, JB_LUB[0]));
	bool Lines = JB_Tk__ParseLoopFlags(Rz, JB_LUB[226], kJB__Tk_kTemporalSyxNoBar);
	Rz->Func = JB_SyxSCom;
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fTemporalHashThing(int Start, Message* Parent) {
	Message* Result = JB_Incr(JB_Tk__NewParentName(Parent, JB_SyxTril, Start, JB_LUB[0]));
	Ind S = JB_Tk__NextStart();
	JB_FreeIfDead(JB_Tk__NewParent(Result, JB_SyxCnj, S, JB_Tk__WordAfter(S)));
	Message* X = JB_Incr(JB_Tk__ProcessThingOrTmp(kJB__Tk_kOpp & (~kJB__Tk_kOppBra)));
	if (X) {
		JB_Tree_SyntaxAppend(Result, X);
		Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOpp, false));
		JB_Tree_SyntaxAppend(Result, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(X);
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fTemporalRel(int Start, Message* Parent) {
	return JB_Tk__NewWord(nil, JB_SyxCnj, Start, JB_Tk__CleanSpaces());
}

Message* JB_Tk__fTemporalRelSyx(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, JB_SyxSCnj, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fThingSyx(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, JB_SyxSThg, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fThingWord(int Start, Message* Parent) {
	int Name = JB_Tk__WordAfter(Start);
	return JB_Tk__NewParent(nil, JB_SyxThg, Start, Name);
}

Message* JB_Tk__fTmp(int Start, int OpFlags, int ThingFlags, Message* Parent) {
	Message* Result = JB_Tk__NewWord(Parent, JB_SyxTmp, Start, Start);
	return JB_Tk__fTmpSub(Result, OpFlags, ThingFlags);
}

Message* JB_Tk__fTmpPlus(int Start, Message* Parent) {
	int C = JB_Tk__NextByte();
	if ((C == '"') or (C == '\'')) {
		Message* Tmp = JB_Tk__fCharSub(Start, Start + 1, C);
		if (Tmp) {
			Tmp->Func = JB_SyxTmp;
			Tmp = JB_Tk__fTmpSub(Tmp, kJB__Tk_kOpp & (~kJB__Tk_kOppBra), kJB__Tk_kThing);
			if ((!JB_Msg_EqualsSyx(Tmp, JB_SyxThg, false))) {
				return Tmp;
			}
		}
	}
	return JB_Tk__fError2(Start, nil);
}

Message* JB_Tk__fTmpSub(Message* Result, int OpFlags, int ThingFlags) {
	JB_Incr(Result);
	if (JB_Tk__WillEnd()) {
		JB_SafeDecr(Result);
		return Result;
	}
	if (JB_Tk__CanStatement()) {
		while (true) {
			Message* Item = JB_Incr(JB_Tk__ProcessThingParent(Result, OpFlags, ThingFlags));
			if ((!Item)) {
				JB_Decr(Item);
				break;
			}
			JB_Tree_SyntaxAppend(Result, Item);
			if (JB_Tk__WillEnd()) {
				JB_Decr(Item);
				JB_SafeDecr(Result);
				return Result;
			}
			if (JB_Msg_EqualsSyx(Item, JB_SyxArg, false)) {
				Message* _tmPf0 = JB_Incr(JB_Tk__UnTmpPlace(Result));
				Message* SubTmp = JB_Incr(JB_Tk__Process(kJB__Tk_kTemporalWordColon, false, _tmPf0));
				JB_Decr(_tmPf0);
				if (((bool)SubTmp) or (JB_Msg_SyntaxEquals(Item, JB_LUB[558], false))) {
					JB_Decr(SubTmp);
					JB_Decr(Item);
					JB_SafeDecr(Result);
					return Result;
				}
				JB_Decr(SubTmp);
			}
			JB_Decr(Item);
			ThingFlags = (ThingFlags | kJB__Tk_kColonArg);
		};
	}
	Result->Func = JB_SyxThg;
	if (JB_Ring_HasChildren(Result)) {
		JB_SafeDecr(Result);
		return Result;
	}
	JB_SetRef(Result, JB_Tk__DecorateThing(Result, kJB__Tk_kOpp));
	Message* _tmPf1 = JB_Incr(JB_Tk__ParseItem(Result, kJB__Tk_kTemporalSyx, kJB__Tk_kOpp));
	JB_Decr(Result);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Tk__fTypeCast(int Start, Message* Parent) {
	Message* _tmPf0 = JB_Incr(JB_Tk__BarThings(Start, JB_SyxType));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* JB_Tk__fURL(int Start, Message* Parent) {
	if ((!JB_Tk__NeedName(Parent))) {
		return nil;
	}
	(JB_Tk__NextStartSet(JB_Str_InWhite(JB__Tk_Data, Start, JB_int__Max())));
	Parent->Func = JB_Syxurl;
	Parent->RangeLength = (Parent->RangeLength + 3);
	Message* _tmPf0 = JB_Incr(JB_Tk__NewParent(nil, JB_SyxStr, Start + 3, JB_Tk__NextStart()));
	JB_Tree_SyntaxAppend(Parent, _tmPf0);
	JB_Decr(_tmPf0);
	return Parent;
}

Message* JB_Tk__fXML(int Start, Message* Parent) {
	Message* Rz = nil;
	Ind EndPos = JB_Tk__XMLWordEnd(Start + 1);
	if (JB_Ind_SyntaxCast(EndPos)) {
		Message* XML = JB_Incr(JB_Tk__NewSkip(nil, JB_SyxXML, Start, Start + 1, EndPos));
		EndPos = JB_Tk__XMLAttribs(XML, EndPos);
		if (EndPos > 0) {
			JB_SetRef(Rz, JB_Tk__FillXML(XML, EndPos + 1));
			if (Rz) {
				(JB_Msg_AfterSet(Rz, JB_Tk__NextStart()));
			}
		}
		JB_Decr(XML);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fXML_Comment(int Start, Message* Parent) {
	return JB_Tk__XMLWhatever(Start, 4, JB_LUB[309], JB_SyxXCom);
}

Message* JB_Tk__fXML_DocType(int Start, Message* Parent) {
	{
		IntRange _LoopSrcf2 = JB_int_OperatorTo(JB_Tk__NextStart(), JB_Str_Length(JB__Tk_Data) - 1);
		int __Endf0 = _LoopSrcf2[1];
		int _Valuef3 = _LoopSrcf2[0];
		while (_Valuef3 < __Endf0) {
			int I = _Valuef3;
			byte C = JB_Str_ByteValue(JB__Tk_Data, I);
			if (C == '[') {
				I = JB_Str_FindByte(JB__Tk_Data, ']', I, JB_int__Max());
				if ((!I)) {
					return JB_Tk__ErrorAdd(JB_LUB[657], Start);
				}
			}
			 else if (C == '>') {
				(JB_Tk__NextStartSet(I + 1));
				JB_String* _tmPf4 = JB_Incr(JB_Str_Range(JB__Tk_Data, Start + 9, I));
				Message* _tmPf5 = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxXCom, Start, _tmPf4));
				JB_Decr(_tmPf4);
				JB_SafeDecr(_tmPf5);
				return _tmPf5;
			}
			_Valuef3++;
		};
	}
	;
	return nil;
}

Message* JB_Tk__fXML_PI(int Start, Message* Parent) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Tk__NewParentName(nil, JB_SyxXPI, Start, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(Rz, JB_LUB[599], kJB__Tk_kTemporal);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Tk__fYoda(int Start, Message* Parent) {
	Message* Last = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOppSyx, true));
	Message* First = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOppSyx, true));
	Message* Opp = JB_Incr(JB_Tk__Process(kJB__Tk_kOpp, true, nil));
	Message* Rel = JB_Incr(JB_Tk__NewParentName(Parent, JB_SyxYoda, Start, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Rel, First);
	JB_Decr(First);
	JB_Tree_SyntaxAppend(Rel, Opp);
	JB_Decr(Opp);
	JB_Tree_SyntaxAppend(Rel, Last);
	JB_Decr(Last);
	JB_SafeDecr(Rel);
	return Rel;
}

Message* JB_Tk__GetFuncAfter(Message* Result) {
	JB_Incr(Result);
	while (true) {
		int ThisAfter = kJB__Tk_kFuncAfterAny & (~JB__Tk__StopBars);
		if (JB_Tk__NoFuncAfter(JB_Tk__NextByte())) {
			ThisAfter = (ThisAfter & (~kJB__Tk_kFuncAfterNoSpace));
		}
		Message* D = JB_Incr(JB_Tk__Process(ThisAfter, false, Result));
		if ((!D)) {
			JB_Decr(D);
			break;
		}
		Syntax Fn = D->Func;
		if ((Fn != JB_SyxName) and ((Fn != JB_SyxBadj) and (Fn != JB_Syxurl))) {
			(JB_Ring_PrevSibSet(Result, D));
			(JB_Ring_FirstSet(D, Result));
		}
		JB_SetRef(Result, D);
		JB_Decr(D);
	};
	JB_SafeDecr(Result);
	return Result;
}

int JB_Tk__GotoEndOfLine(int From) {
	(JB_Tk__NextStartSet(JB_Str_Find(JB__Tk_Data, JB__Constants_CSLine, From, JB_int__Max())));
	return JB_Tk__NextStart();
}

Message* JB_Tk__IndentBug(Message* Curr) {
	return JB_Tk__ErrorAlwaysAdd(JB_LUB[912], Curr->Position);
}

void JB_Tk__Init() {
	if ((!(JB_Syx_Translateable(JB_SyxThg) and (JB_Syx_Translateable(JB_SyxOpp) and (JB_Syx_Translateable(JB_SyxCnj) and JB_Syx_Translateable(JB_SyxTmp)))))) {
		debugger;
	}
	if ((!(JB_Syx_IsString(JB_SyxStr) and (JB_Syx_IsString(JB_SyxChar) and (JB_Syx_IsString(JB_SyxSStr) and (JB_Syx_IsString(JB_SyxBin) and JB_Syx_IsString(JB_SyxBack))))))) {
		debugger;
	}
	if ((!(JB_Syx_NoChildren(JB_SyxCnj) and (JB_Syx_NoChildren(JB_SyxOpp) and (JB_Syx_NoChildren(JB_SyxThg) and (JB_Syx_NoChildren(JB_SyxSheb) and (JB_Syx_NoChildren(JB_SyxSCnj) and (JB_Syx_NoChildren(JB_SyxSThg) and (JB_Syx_NoChildren(JB_SyxNum) and ((bool)JB_SyxSStr)))))))))) {
		debugger;
	}
	if (((int)JB_SyxCnj) != 8) {
		debugger;
	}
	if (((int)JB_Syxmax) > 63) {
		debugger;
	}
	JB_Tk__TokenzFn(JB_LUB[90], kJB__Tk_kEndOfLine, JB_Tk__fEndOfLine);
	TokHan* _tmPf1 = JB_Incr(JB_Tk__Handler(kJB__Tk_kComma | kJB__Tk_kEndOfLine, ((TokenHandler_fp)JB_Tk__fEndOfLine)));
	(JB_Tk__TokenSet(JB_LUB[300], _tmPf1));
	JB_Decr(_tmPf1);
	TokHan* _tmPf3 = JB_Incr(JB_Tk__Handler(kJB__Tk_kColon, ((TokenHandler_fp)JB_Tk__fEndOfLine)));
	TokHan* _tmPf2 = JB_Incr(JB_TH_Link(_tmPf3, kJB__Tk_kColonArg, ((TokenHandler_fp)JB_Tk__fArgColon)));
	JB_Decr(_tmPf3);
	(JB_Tk__TokenSet(JB_LUB[558], _tmPf2));
	JB_Decr(_tmPf2);
	JB_SetRef(JB__Tk__EndOfLineMarker, JB_Msg_ConstructorNormal(nil, JB_SyxNil, JB_LUB[41]));
	Array* Numb = JB_Incr(JB_Str_ByteSplit(JB_LUB[445]));
	JB_String* Op_comp = JB_Incr(JB_LUB[588]);
	JB_String* Op_math = JB_Incr(JB_LUB[295]);
	JB_String* PFix = JB_Incr(JB_LUB[299]);
	TokHan* _tmPf6 = JB_Incr(JB_Tk__Handler(kJB__Tk_kThingWord, ((TokenHandler_fp)JB_Tk__fThingWord)));
	TokHan* _tmPf5 = JB_Incr(JB_TH_Link(_tmPf6, kJB__Tk_kTemporalWord, ((TokenHandler_fp)JB_Tk__fStatement)));
	JB_Decr(_tmPf6);
	TokHan* _tmPf4 = JB_Incr(JB_TH_Link(_tmPf5, kJB__Tk_kTemporalWordColon, ((TokenHandler_fp)JB_Tk__fStatementColon)));
	JB_Decr(_tmPf5);
	TokHan* H = JB_Incr(JB_TH_Link(_tmPf4, kJB__Tk_kOppWord, ((TokenHandler_fp)JB_Tk__fOppWord)));
	JB_Decr(_tmPf4);
	Array* _tmPf7 = JB_Incr(JB_CS_Bytes(JB__Constants_CSWordStart));
	JB_Tk__TokensHan(_tmPf7, H);
	JB_Decr(H);
	JB_Decr(_tmPf7);
	TokHan* _tmPf10 = JB_Incr(JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fFuncCall)));
	TokHan* _tmPf9 = JB_Incr(JB_TH_Link(_tmPf10, kJB__Tk_kThingSyx, ((TokenHandler_fp)JB_Tk__fBracket)));
	JB_Decr(_tmPf10);
	TokHan* _tmPf8 = JB_Incr(JB_TH_Link(_tmPf9, kJB__Tk_kOppBra, ((TokenHandler_fp)JB_Tk__fOppBracket)));
	JB_Decr(_tmPf9);
	(JB_Tk__TokenSet(JB_LUB[262], _tmPf8));
	JB_Decr(_tmPf8);
	TokHan* _tmPf12 = JB_Incr(JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fAccess)));
	TokHan* _tmPf11 = JB_Incr(JB_TH_Link(_tmPf12, kJB__Tk_kThingSyx, ((TokenHandler_fp)JB_Tk__fArray)));
	JB_Decr(_tmPf12);
	(JB_Tk__TokenSet(JB_LUB[1400], _tmPf11));
	JB_Decr(_tmPf11);
	TokHan* _tmPf13 = JB_Incr(JB_Tk__Handler(kJB__Tk_kThingSyx, ((TokenHandler_fp)JB_Tk__fMsgList)));
	(JB_Tk__TokenSet(JB_LUB[2095], _tmPf13));
	JB_Decr(_tmPf13);
	TokHan* _tmPf15 = JB_Incr(JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fDot)));
	TokHan* _tmPf14 = JB_Incr(JB_TH_Link(_tmPf15, kJB__Tk_kThingSyx, ((TokenHandler_fp)JB_Tk__fSDot)));
	JB_Decr(_tmPf15);
	(JB_Tk__TokenSet(JB_LUB[353], _tmPf14));
	JB_Decr(_tmPf14);
	TokHan* _tmPf16 = JB_Incr(JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fDotAccess)));
	(JB_Tk__TokenSet(JB_LUB[356], _tmPf16));
	JB_Decr(_tmPf16);
	TokHan* _tmPf17 = JB_Incr(JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fURL)));
	(JB_Tk__TokenSet(JB_LUB[564], _tmPf17));
	JB_Decr(_tmPf17);
	TokHan* _tmPf20 = JB_Incr(JB_Tk__Handler(kJB__Tk_kTemporalBar, ((TokenHandler_fp)JB_Tk__fDecl)));
	TokHan* _tmPf19 = JB_Incr(JB_TH_Link(_tmPf20, kJB__Tk_kFuncAfterBar, ((TokenHandler_fp)JB_Tk__fTypeCast)));
	JB_Decr(_tmPf20);
	TokHan* _tmPf18 = JB_Incr(JB_TH_Link(_tmPf19, kJB__Tk_kThingBar, ((TokenHandler_fp)JB_Tk__fDecl)));
	JB_Decr(_tmPf19);
	(JB_Tk__TokenSet(JB_LUB[2068], _tmPf18));
	JB_Decr(_tmPf18);
	TokHan* _tmPf21 = JB_Incr(JB_Tk__Handler(kJB__Tk_kThingSyx, ((TokenHandler_fp)JB_Tk__fArgName)));
	(JB_Tk__TokenSet(JB_LUB[1424], _tmPf21));
	JB_Decr(_tmPf21);
	TokHan* _tmPf22 = JB_Incr(JB_Tk__Handler(kJB__Tk_kTemporalSyx, ((TokenHandler_fp)JB_Tk__fTmpPlus)));
	(JB_Tk__TokenSet(JB_LUB[297], _tmPf22));
	JB_Decr(_tmPf22);
	TokHan* _tmPf24 = JB_Incr(JB_Tk__Handler(kJB__Tk_kThingSyx, ((TokenHandler_fp)JB_Tk__fAtName)));
	TokHan* _tmPf23 = JB_Incr(JB_TH_Link(_tmPf24, kJB__Tk_kFuncAfterNormal, ((TokenHandler_fp)JB_Tk__fAtNamedExp)));
	JB_Decr(_tmPf24);
	(JB_Tk__TokenSet(JB_LUB[601], _tmPf23));
	JB_Decr(_tmPf23);
	TokHan* _tmPf26 = JB_Incr(JB_Tk__Handler(kJB__Tk_kFuncAfterNormal, ((TokenHandler_fp)JB_Tk__fAdjectiveThing)));
	TokHan* _tmPf25 = JB_Incr(JB_TH_Link(_tmPf26, kJB__Tk_kAdjectiveOp, ((TokenHandler_fp)JB_Tk__fAdjectiveOp)));
	JB_Decr(_tmPf26);
	(JB_Tk__TokenSet(JB_LUB[2082], _tmPf25));
	JB_Decr(_tmPf25);
	JB_Tk__TokenzFn(JB_LUB[307], kJB__Tk_kThingSyx, JB_Tk__fBeforeRelMinus);
	JB_Tk__TokenzFn(PFix, kJB__Tk_kThingSyx, JB_Tk__fBeforeRel);
	JB_Tk__TokenzFn(PFix, kJB__Tk_kFuncAfterNormal, JB_Tk__fAfterRel);
	JB_Decr(PFix);
	JB_Tk__TokenzFn(JB_LUB[241], kJB__Tk_kThingSyx, JB_Tk__fBeforeRel);
	JB_Tk__TokenzFn(JB_LUB[2067], kJB__Tk_kThingSyx, JB_Tk__fArgOpen);
	JB_Tk__TokenzFn(JB_LUB[310], kJB__Tk_kTmpOpp, JB_Tk__fTemporalRelSyx);
	JB_Tk__TokenzFn(JB_LUB[388], kJB__Tk_kTmpOpp, JB_Tk__fSyntacticComment);
	JB_Tk__TokenzFn(JB_LUB[239], kJB__Tk_kThingSyx, JB_Tk__fOpAsThing);
	JB_Tk__TokensFn(Numb, kJB__Tk_kThingSyx, JB_Tk__fNumber);
	JB_Decr(Numb);
	JB_Tk__TokenzFn(JB_LUB[223], kJB__Tk_kTemporalSyxNoBar, JB_Tk__fShebang);
	JB_Tk__TokenzFn(JB_LUB[392], kJB__Tk_kEndOfLine, JB_Tk__fCommentLine);
	JB_Tk__TokenzFn(JB_LUB[389], kJB__Tk_kEndOfLine, JB_Tk__fComment);
	JB_Tk__TokenzFn(Op_comp, kJB__Tk_kOppSNB, JB_Tk__fOppSyxNeq);
	JB_Decr(Op_comp);
	JB_Tk__TokenzFn(Op_math, kJB__Tk_kOppSNB, JB_Tk__fOppSyx);
	JB_Decr(Op_math);
	JB_Tk__TokenzFn(JB_LUB[2068], kJB__Tk_kOppBar, JB_Tk__fOppSyx);
	JB_Tk__TokenzFn(JB_LUB[357], kJB__Tk_kThingSyx, JB_Tk__fThingSyx);
	JB_Tk__TokenzFn(JB_LUB[217], kJB__Tk_kThingSyx, JB_Tk__fString);
	JB_Tk__TokenzFn(JB_LUB[249], kJB__Tk_kThingSyx, JB_Tk__fChar);
	JB_Tk__TokenzFn(JB_LUB[1463], kJB__Tk_kThingSyx, JB_Tk__fBackTick);
	JB_Tk__TokenzFn(JB_LUB[576], kJB__Tk_kThingSyx, JB_Tk__fSuperStr);
	JB_Tk__TokenzFn(JB_LUB[225], kJB__Tk_kThingSyx, JB_Tk__fBinary);
	TokHan* _tmPf28 = JB_Incr(JB_Tk__Handler(kJB__Tk_kFuncAfterNormal, ((TokenHandler_fp)JB_Tk__fBAdjectiveThing)));
	TokHan* _tmPf27 = JB_Incr(JB_TH_Link(_tmPf28, kJB__Tk_kAdjectiveOp, ((TokenHandler_fp)JB_Tk__fBAdjectiveOp)));
	JB_Decr(_tmPf28);
	(JB_Tk__TokenSet(JB_LUB[498], _tmPf27));
	JB_Decr(_tmPf27);
	TokHan* _tmPf30 = JB_Incr(JB_Tk__Handler(kJB__Tk_kTmpOpp, ((TokenHandler_fp)JB_Tk__fTemporalRel)));
	TokHan* _tmPf29 = JB_Incr(JB_TH_Link(_tmPf30, kJB__Tk_kTemporalSyxNoBar, ((TokenHandler_fp)JB_Tk__fTemporalHashThing)));
	JB_Decr(_tmPf30);
	(JB_Tk__TokenSet(JB_LUB[222], _tmPf29));
	JB_Decr(_tmPf29);
	JB_Tk__TokenzFn(JB_LUB[596], kJB__Tk_kThingSyx, JB_Tk__fInnerNiceAdj);
	JB_Tk__TokenzFn(JB_LUB[2096], kJB__Tk_kThingSyx, JB_Tk__fYoda);
	JB_Tk__TokenzFn(JB_LUB[2108], kJB__Tk_kThingSyx, JB_Tk__fQuoteLang);
	JB_Tk__TokenzFn(JB_LUB[2107], kJB__Tk_kThingSyx, JB_Tk__fQuestion);
	JB_Tk__TokenzFn(JB_LUB[77], kJB__Tk_kThingSyx, JB_Tk__fAsk);
	JB_Tk__TokenzFn(JB_LUB[572], kJB__Tk_kTemporalSyx, JB_Tk__fXML);
	JB_Tk__TokenzFn(JB_LUB[583], kJB__Tk_kTemporalSyx, JB_Tk__fXML_PI);
	JB_Tk__TokenzFn(JB_LUB[573], kJB__Tk_kTemporalSyx, JB_Tk__fXML_Comment);
	JB_Tk__TokenzFn(JB_LUB[574], kJB__Tk_kTemporalSyx, JB_Tk__fXML_DocType);
	JB_Tk__TokenzFn(JB_LUB[1420], kJB__Tk_kEndContainer, JB_Tk__fEndOfLine);
	JB_Tk__TokenzFn(JB_LUB[565], kJB__Tk_kThingSyx, JB_Tk__fError);
	JB_Tk__TokenzFn(JB_LUB[216], kJB__Tk_kOppSyx, JB_Tk__fError2);
	TokHan* IllegalHandler = JB_Incr(JB_Tk__Handler(-1, ((TokenHandler_fp)JB_Tk__fError)));
	{
		int I = 0;
		while (I < 256) {
			JB_String* _tmPf31 = JB_Incr(JB_Str__Byte(I));
			(JB_Tk__TokenNilSet(_tmPf31, IllegalHandler));
			JB_Decr(_tmPf31);
			I++;
		};
	}
	;
	JB_Decr(IllegalHandler);
}

int JB_Tk__Init_() {
	{
		JB_SetRef(JB__Tk_Data, JB_LUB[0]);
		JB__Tk_Splitter = (&JB_Tk__Range);
		JB__Tk_Using = ((MessagePosition){});
		JB__Tk__StopBars = 0;
		JB__Tk__DotInsertAllow = false;
	}
	;
	return 0;
}

int JB_Tk__InitCode_() {
	{
	}
	;
	JB__Tk_Using.Position = -1;
	return 0;
}

Message* JB_Tk__LoweredIndent(Message* Output, Message* Curr) {
	int Chin = JB_Msg_CleanIndent(Curr);
	while (JB_Msg_IndentScore(Output) > Chin) {
		if ((JB_Msg_EqualsSyx(Output, JB_SyxArg, false)) and (!JB_Msg_SyntaxIs(Output, kJB__MsgParseFlags_Style2))) {
			return JB_Tk__IndentBug(Curr);
		}
		Output = ((Message*)JB_Ring_Parent(Output));
		if ((!Output)) {
			return JB_Tk__IndentBug(Curr);
		}
		if (JB_Msg_EqualsSyx(Output, JB_SyxDecl, false)) {
			Output = ((Message*)JB_Ring_Parent(Output));
		}
	};
	JB_Tree_SyntaxAppend(Output, Curr);
	if (((bool)(JB_Msg_CleanIndent(Curr) % 4))) {
		return Curr;
	}
	return Output;
}

Message* JB_Tk__MakeInvisArg(Message* Tmp, int Indent) {
	Message* Rz = nil;
	if (JB_Msg_EqualsSyx(Tmp, JB_SyxItem, false)) {
		Message* Last = ((Message*)JB_Ring_Last(Tmp));
		if ((!JB_Msg_EqualsSyx(Last, JB_SyxEmb, false))) {
			return JB_Tk__UnexpectedSyntax(Last);
		}
		Last->Func = JB_SyxArg;
		(JB_Msg_SyntaxIsSet(Last, kJB__MsgParseFlags_Style2, true));
		return Last;
	}
	Rz = JB_Tk__NewParentName(Tmp, JB_SyxArg, Tmp->Position, JB_LUB[0]);
	(JB_Msg_SyntaxIsSet(Rz, kJB__MsgParseFlags_Style2, true));
	return Rz;
}

Message* JB_Tk__MakeRel(Message* First, int Bits) {
	Message* Opp = JB_Tk__Process(Bits, false, nil);
	if ((!Opp)) {
		return First;
	}
	Message* Rel = JB_Tk__NewParentName(nil, JB_SyxRel, First->Position, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Rel, First);
	JB_Tree_SyntaxAppend(Rel, Opp);
	if (JB_Tk__EatString(JB_LUB[586])) {
		Rel->Func = JB_SyxERel;
		Opp->RangeLength++;
	}
	bool Mode = kJB__Tk_kAllow;
	if ((!JB_byte_IsLetter((JB_Str_First(Opp->Name))))) {
		Bits = (Bits | kJB__Tk_kOppWord);
	}
	JB_Tree_SyntaxAppend(Rel, JB_Tk__ProcessThing(Bits, Mode));
	(JB_Msg_AfterSet(Rel, JB_Msg_After(((Message*)JB_Ring_Last(Rel)))));
	return Rel;
}

int JB_Tk__MessageErrorSub(FastString* Fs, int Num, int ButFound) {
	Dictionary* E = JB_Incr(JB__Tk__ErrorNames);
	if ((!E)) {
		JB_SetRef(E, JB_Dict_Constructor(nil));
		JB_SetRef(JB__Tk__ErrorNames, E);
		(JB_Dict_SetInt(E, kJB__Tk_kTemporal, JB_LUB[1989]));
		(JB_Dict_SetInt(E, kJB__Tk_kTemporalSyx, JB_LUB[1594]));
		(JB_Dict_SetInt(E, kJB__Tk_kTemporalWord, JB_LUB[1960]));
		(JB_Dict_SetInt(E, kJB__Tk_kEndOfLine, JB_LUB[1627]));
		(JB_Dict_SetInt(E, kJB__Tk_kColon, JB_LUB[258]));
		(JB_Dict_SetInt(E, kJB__Tk_kOppSyx, JB_LUB[1845]));
		(JB_Dict_SetInt(E, kJB__Tk_kOppWord, JB_LUB[1845]));
		(JB_Dict_SetInt(E, kJB__Tk_kOpp, JB_LUB[1845]));
		(JB_Dict_SetInt(E, kJB__Tk_kOppTemporal, JB_LUB[1990]));
		(JB_Dict_SetInt(E, kJB__Tk_kThing, JB_LUB[1467]));
		(JB_Dict_SetInt(E, kJB__Tk_kThingWord, JB_LUB[1467]));
		(JB_Dict_SetInt(E, kJB__Tk_kThingSyx, JB_LUB[1950]));
		(JB_Dict_SetInt(E, kJB__Tk_kIllegalChar, JB_LUB[1703]));
	}
	if (Fs->Length) {
		JB_FS_AppendString(Fs, JB_LUB[147]);
	}
	 else {
		JB_FS_AppendString(Fs, JB_LUB[845]);
	}
	int BestValue = JB_Tk__FindError(Num);
	if (BestValue) {
		JB_String* S = JB_Incr(((JB_String*)JB_Dict_ValueInt(E, BestValue)));
		if (JB_Str_Exists(S)) {
			JB_FS_AppendString(Fs, S);
		}
		 else {
			JB_FS_AppendString(Fs, JB_LUB[1950]);
		}
		JB_Decr(S);
		JB_Decr(E);
		return Num & (~BestValue);
	}
	JB_Decr(E);
	JB_FS_AppendString(Fs, JB_LUB[1951]);
	return 0;
}

bool JB_Tk__NeedName(Message* Thg) {
	if (JB_Msg_EqualsSyx(Thg, JB_SyxThg, false)) {
		return true;
	}
	return ((bool)JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[1040], Thg->Position)));
}

Message* JB_Tk__NewParentName(Message* Parent, Syntax Func, int Start, JB_String* Name) {
	Message* Rz = nil;
	Rz = JB_Msg_ConstructorRange(nil, Parent, Func, Start, Name, JB_Tk__NextStart() - Start);
	return Rz;
}

Message* JB_Tk__NewParent(Message* Parent, Syntax Func, int Start, int End) {
	Message* Rz = nil;
	JB_String* Name = JB_Tk__SyntaxAccess(Start, End, Func);
	Rz = JB_Msg_ConstructorRange(nil, Parent, Func, Start, Name, End - Start);
	return Rz;
}

Message* JB_Tk__NewEmpty(Message* P, Syntax F, int Start, int After) {
	Message* Rz = nil;
	Rz = JB_Msg_ConstructorRange(nil, P, F, Start, JB_LUB[0], After - Start);
	return Rz;
}

Message* JB_Tk__NewSkip(Message* P, Syntax F, int Start, int NameStart, int NameEnd) {
	Message* Rz = nil;
	JB_String* Name = JB_Tk__SyntaxAccess(NameStart, NameEnd, F);
	Rz = JB_Msg_ConstructorRange(nil, P, F, Start, Name, JB_Tk__NextStart() - Start);
	return Rz;
}

Message* JB_Tk__NewWord(Message* P, Syntax F, int Start, int SearchFrom) {
	Message* Rz = nil;
	int After = JB_Tk__WordAfter(SearchFrom);
	JB_String* Name = JB_Tk__SyntaxAccess(SearchFrom, After, F);
	Rz = JB_Msg_ConstructorRange(nil, P, F, Start, Name, After - Start);
	return Rz;
}

ParserLineAndIndent JB_Tk__NextLineAndIndent(Message* Parent) {
	ParserLineAndIndent Rz = ((ParserLineAndIndent){});
	int First = JB_Tk__NextStart();
	int N = First;
	JB_String* D = JB__Tk_Data;
	int End = JB_Str_Length(D);
	byte* Addr = D->Addr;
	int State = 0;
	while (N < End) {
		byte C = Addr[N++];
		if (C == '\t') {
			if ((!Rz.Commas)) {
				Rz.Indent = (Rz.Indent + 4);
			}
			if ((((bool)(State & 1))) and ((bool)Rz.Lines)) {
				JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[710], N - 1));
			}
		}
		 else if (C == ',') {
			Rz.Commas++;
			Message* L = ((Message*)JB_Ring_Last(Parent));
			if (L) {
				Rz.Indent = L->Indent;
			}
			 else {
				Rz.Indent = 0;
			}
			State = 0;
		}
		 else if (C == ' ') {
			State = (State | 1);
			if ((!Rz.Commas)) {
				Rz.Indent++;
			}
		}
		 else if (C == '/') {
			byte C2 = JB_Str_ByteValue(D, N);
			if ((C2 != '/') and (C2 != '*')) {
				if (((bool)(State & 2))) {
					Rz.IsDebug = true;
				}
				N--;
				break;
			}
			State = 2;
			if (C2 != '*') {
				N = JB_Tk__GotoEndOfLine(N + 1);
				continue;
			}
			Rz.Lines++;
			Rz.Indent = 0;
			(JB_Tk__NextStartSet(N - 1));
			Message* Line = JB_Tk__Process(kJB__Tk_kEndOfLine, kJB__Tk_kAllow, Parent);
			N = JB_Tk__NextStart();
			if (Line != JB__Tk__EndOfLineMarker) {
				break;
			}
		}
		 else {
			if ((!((C == '\n') or (C == '\x0D')))) {
				N--;
				break;
			}
			Rz.Lines++;
			Rz.IsDebug = false;
			Rz.Indent = 0;
			Rz.Commas = 0;
			Rz.Pos = (N - 1);
			State = 2;
			if (Parent->Func == JB_SyxList) {
				(JB_Msg_SyntaxIsSet(Parent, kJB__MsgParseFlags_Style2, true));
			}
		}
	};
	Rz.Lines = (Rz.Lines + Rz.Commas);
	(JB_Tk__NextStartSet(N));
	if (((First > 0) and (!Rz.Lines)) or (Rz.Indent < 0)) {
		Rz.Indent = -1;
	}
	return Rz;
}

bool JB_Tk__NoFuncAfter(byte B) {
	return (B == '\t') or ((B == ' ') or (B == '\\'));
}

Message* JB_Tk__NumberSub(int Start, int RealStart) {
	Message* Rz = nil;
	int After = JB_Tk__NumEnd(JB__Tk_Data, Start);
	(JB_Tk__NextStartSet(After));
	int StartAt = JB_Str_IsHexLike(JB__Tk_Data, Start);
	Ind UnitPos2 = -1;
	if (StartAt == 0) {
		UnitPos2 = JB_Str_OutCharSet(JB__Tk_Data, JB__Constants_CSLettersOnly, After, Start + StartAt);
	}
	if ((!JB_Ind_SyntaxCast(UnitPos2))) {
		UnitPos2 = (After - 1);
	}
	UnitPos2++;
	Message* Num = JB_Tk__NewParent(nil, JB_SyxNum, RealStart, UnitPos2);
	if (After <= UnitPos2) {
		return Num;
	}
	Rz = JB_Tk__NewSkip(nil, JB_SyxUnit, RealStart, UnitPos2, After);
	JB_Tree_SyntaxAppend(Rz, Num);
	return Rz;
}

int JB_Tk__NumEnd(JB_String* NumStr, int Start) {
	int Rz = 0;
	Ind Dot = JB_Str_OutCharSet(NumStr, JB__Constants_CSNum, Start, JB_int__Max());
	if ((!JB_Ind_SyntaxCast(Dot))) {
		return JB_Str_Length(NumStr);
	}
	if (JB_Str_ByteValue(NumStr, Dot) != '.') {
		return Dot;
	}
	byte AfterDot = JB_Str_ByteValue(NumStr, Dot + 1);
	if ((!JB_byte_IsInt(AfterDot))) {
		return Dot;
	}
	Rz = JB_Str_OutCharSet(NumStr, JB__Constants_CSNum, Dot + 1, JB_int__Max());
	if ((!(Rz))) {
		Rz = JB_Str_Length(NumStr);
	}
	return Rz;
}

bool JB_Tk__OK() {
	return (!JB_Ind_SyntaxCast(JB_Tk__ErrorStart()));
}

Message* JB_Tk__OppChain(Message* Opp) {
	Message* Result = JB_Incr(JB_Tk__Process(kJB__Tk_kAdjectiveOp, false, Opp));
	if (Result) {
		if ((!JB_FreeIfDead(((Message*)JB_Ring_Parent(Opp))))) {
			(JB_Ring_FirstSet(Result, Opp));
		}
		JB_SafeDecr(Result);
		return Result;
	}
	JB_Decr(Result);
	return Opp;
}

void JB_Tk__Params(Message* Parent, int N) {
	Message* Result = JB_Incr(JB_Tk__NewParentName(Parent, JB_SyxPrm, N, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(Result, JB_LUB[278], kJB__Tk_kTemporalSyxNoBar);
	JB_Decr(Result);
}

Message* JB_Tk__ParseItem(Message* Ch, int TemporalFlags, int Ops) {
	int Ns = JB_Tk__NextStart();
	if ((!JB_Tk__Allow(kJB__Tk_kColon))) {
		return Ch;
	}
	if (JB_Msg_OperatorIn(Ch, JB_SyxArg)) {
		if (JB_Msg_EqualsSyx(Ch, JB_SyxThg, false)) {
			Ch->Func = JB_SyxTmp;
			Message* _tmPf0 = JB_Incr(JB_Tk__fArgColon(Ns, Ch));
			JB_Tree_SyntaxAppend(Ch, _tmPf0);
			JB_Decr(_tmPf0);
		}
		return Ch;
	}
	Message* Result = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxItem, Ch->Position, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Result, Ch);
	Message* Ch2 = JB_Incr(JB_Tk__Process(TemporalFlags, false, Result));
	if ((!Ch2)) {
		JB_SetRef(Ch2, JB_Tk__ProcessThing(Ops, false));
	}
	if ((!(Ch2))) {
		JB_SetRef(Ch2, JB_Tk__NewParentName(Result, JB_SyxEmb, Ns, JB_LUB[0]));
	}
	JB_Tree_SyntaxAppend(Result, Ch2);
	(JB_Msg_AfterSet(Result, JB_Msg_After(Ch2)));
	JB_Decr(Ch2);
	JB_SafeDecr(Result);
	return Result;
}

int JB_Tk__ParseLoop(Message* Output, int TmpoFlags) {
	int Rz = 0;
	Message* Prev = nil;
	while (Output) {
		ParserLineAndIndent Info = JB_Tk__NextLineAndIndent(Output);
		Rz = (Rz + Info.Lines);
		if (JB_Tk__WillEnd() or (((bool)Prev) and (!Info.Lines))) {
			break;
		}
		Message* Ch = JB_Tk__ParseLoopItem(Output, TmpoFlags, Prev, Info.Indent);
		if ((!Ch)) {
			break;
		}
		if (Ch != Output) {
			Rz = (Rz + ((JB_Msg_EqualsSyx(Ch, JB_SyxItem, false))));
			if (Info.IsDebug) {
				Ch->Flags = (Ch->Flags | kJB__MsgParseFlags_BreakPoint);
			}
			Output = JB_Tk__AddToOutput(Output, Ch, Prev, Info.Pos);
			Prev = Ch;
		}
	};
	return Rz;
}

bool JB_Tk__ParseLoopFlags(Message* Output, JB_String* Ender, int TmpoFlags) {
	bool Rz = false;
	Ind Err = JB_Tk__NextStart();
	Rz = ((bool)JB_Tk__ParseLoop(Output, TmpoFlags & (~JB__Tk__StopBars)));
	if (JB_Str_Exists(Ender)) {
		JB_Tk__ExpectEndChar(Err, Ender, true);
		(JB_Msg_AfterSet(Output, JB_Tk__NextStart()));
	}
	return Rz;
}

Message* JB_Tk__ParseLoopItem(Message* Output, int TmpoFlags, Message* Prev, int Indent) {
	Message* Ch = JB_Incr(JB_Tk__Process(kJB__Tk_kTemporal & TmpoFlags, false, Output));
	if ((!Ch)) {
		Message* Item = JB_Incr(JB_Tk__ProcessThingParent(Output, kJB__Tk_kOpp, kJB__Tk_kThing));
		if ((!Item) or (Item == Output)) {
			JB_Decr(Ch);
			JB_SafeDecr(Item);
			return Item;
		}
		TmpoFlags = (TmpoFlags & (kJB__Tk_kTemporal & (~kJB__Tk_kTemporalWord)));
		JB_SetRef(Ch, JB_Tk__ParseItem(Item, TmpoFlags, kJB__Tk_kOpp));
		JB_Decr(Item);
	}
	 else if ((JB_Msg_EqualsSyx(Ch, JB_SyxCnj, false)) or (JB_Msg_EqualsSyx(Ch, JB_SyxSCnj, false))) {
		JB_SetRef(Ch, JB_Tk__ReRoute(Output, Ch, Prev));
		if ((!Ch)) {
			JB_Decr(Ch);
			return nil;
		}
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Ch)));
		Indent = _tmPf0->Indent;
		JB_Decr(_tmPf0);
	}
	Ch->Indent = Indent;
	JB_SafeDecr(Ch);
	return Ch;
}

Message* JB_Tk__PostInnerAdj(Message* Rel, Message* Opp) {
	JB_Incr(Rel);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Rel)));
	Message* F = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	if ((!(JB_Msg_EqualsSyx(Rel, JB_SyxRel, false))) and (!((JB_Msg_EqualsSyx(Rel, JB_SyxBra, false)) and (JB_Msg_EqualsSyx(F, JB_SyxRel, false))))) {
		Message* _tmPf3 = JB_Incr(JB_Tk__ErrorAdd(JB_LUB[850], Rel->Position));
		JB_Decr(Rel);
		JB_Decr(F);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	if (JB_Msg_EqualsSyx(Rel, JB_SyxBra, false)) {
		JB_SetRef(Rel, F);
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(F)));
		JB_SetRef(F, _tmPf1);
		JB_Decr(_tmPf1);
	}
	Message* Adverb = JB_Incr(JB_Tk__Process(kJB__Tk_kOppWord | kJB__Tk_kOppBra, kJB__Tk_kExpect, nil));
	if ((!Adverb)) {
		JB_Decr(Rel);
		JB_Decr(Adverb);
		JB_Decr(F);
		return nil;
	}
	Message* Adj = JB_Incr(JB_Syx_Msg(JB_SyxAdj, JB_LUB[0]));
	(JB_Ring_NextSibSet(F, Adj));
	JB_Decr(F);
	JB_Tree_SyntaxAppend(Adj, Adverb);
	JB_Decr(Adverb);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(Adj)));
	JB_Tree_SyntaxAppend(Adj, _tmPf2);
	JB_Decr(Adj);
	JB_Decr(_tmPf2);
	Rel->Func = JB_Syxpinn;
	JB_SafeDecr(Rel);
	return Rel;
}

Message* JB_Tk__ProcessThing(int Ops, bool Expect) {
	return JB_Tk__ProcessThingSub(nil, Ops, kJB__Tk_kThing, Expect);
}

Message* JB_Tk__ProcessThingNoBar(int Ops, bool Expect) {
	return JB_Tk__ProcessThingSub(nil, Ops, kJB__Tk_kThingSyx | kJB__Tk_kThingWord, Expect);
}

Message* JB_Tk__ProcessThingOrTmp(int Opps) {
	return JB_Tk__ProcessThingSub(nil, Opps, kJB__Tk_kThingSyx | (kJB__Tk_kThingWord | kJB__Tk_kTemporalSyx), false);
}

Message* JB_Tk__ProcessThingParent(Message* Parent, int Ops, int ThingFlags) {
	return JB_Tk__ProcessThingSub(Parent, Ops, ThingFlags, false);
}

Message* JB_Tk__ProcessThingSub(Message* Parent, int Ops, int KindOfThing, bool Expect) {
	Message* Result = JB_Incr(JB_Tk__Process(KindOfThing, Expect, Parent));
	if ((!Result) or ((Result == Parent) or JB_Tk__WillEnd())) {
		JB_SafeDecr(Result);
		return Result;
	}
	Message* _tmPf0 = JB_Incr(JB_Tk__DecorateThing(Result, Ops));
	JB_Decr(Result);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* JB_Tk__ReRoute(Message* Output, Message* Cnj, Message* F) {
	Message* Rz = nil;
	if ((!F)) {
		JB_Decr(Rz);
		return JB_Tk__ErrorAdd(JB_LUB[753], JB_Tk__NextStart());
	}
	JB_SetRef(Rz, JB_Tk__ChainTemporalRels(F, Cnj));
	if (JB_Ring_HasChildCount(Rz, 2) and JB_Tk__Allow(kJB__Tk_kEndOfLine)) {
		Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOpp, false));
		JB_Tree_SyntaxAppend(Rz, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Tree_SyntaxAppend(Output, Rz);
	JB_SafeDecr(Rz);
	return Rz;
}

void JB_Tk__StopParse() {
	JB_Tk__StartParse(nil);
}

Message* JB_Tk__ThingXMLAtt(int Start, Message* Parent) {
	int Name = JB_Tk__WordAfterSub(Start, JB__Constants_XMLWordMiddle);
	return JB_Tk__NewParent(Parent, JB_SyxXAtt, Start, Name);
}

void JB_Tk__TokensFn(Array* Arr, int Bits, FP_ParseHandler Func) {
	TokHan* _tmPf0 = JB_Incr(JB_Tk__Handler(Bits, ((TokenHandler_fp)Func)));
	JB_Tk__TokensHan(Arr, _tmPf0);
	JB_Decr(_tmPf0);
}

void JB_Tk__TokensHan(Array* Arr, TokHan* H) {
	{
		int _if0 = 0;
		while (true) {
			JB_String* S = JB_Incr(((JB_String*)JB_Array_Value(Arr, _if0)));
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			(JB_Tk__TokenSet(S, H));
			JB_Decr(S);
			_if0++;
		};
	};
}

void JB_Tk__TokenzFn(JB_String* S, int Bits, FP_ParseHandler Func) {
	if (JB_Str_ContainsString(S, JB_LUB[99])) {
		Array* _tmPf0 = JB_Incr(JB_Str_Words(S));
		JB_Tk__TokensFn(_tmPf0, Bits, Func);
		JB_Decr(_tmPf0);
	}
	 else {
		TokHan* _tmPf1 = JB_Incr(JB_Tk__Handler(Bits, ((TokenHandler_fp)Func)));
		(JB_Tk__TokenSet(S, _tmPf1));
		JB_Decr(_tmPf1);
	}
}

Message* JB_Tk__UnexpectedSyntax(Message* Bad) {
	return JB_Tk__ErrorAdd(JB_LUB[1342], Bad->Position);
}

Message* JB_Tk__UnTmpPlace(Message* R) {
	Message* P = ((Message*)JB_Ring_Parent(R));
	return ((Message*)JB_Ternary((JB_Msg_EqualsSyx(P, JB_SyxTmp, false)), P, R));
}

bool JB_Tk__WillEnd() {
	return JB_Tk__CheckEnded(kJB__Tk_kEnd);
}

int JB_Tk__WordAfter(int Start) {
	return JB_Tk__WordAfterSub(Start, JB__Constants_CSWordMiddle);
}

int JB_Tk__WordAfterSub(int Start, CharSet* Cs) {
	int N = JB_Str_Length(JB__Tk_Data);
	if (Start < N) {
		Ind After = JB_Str_OutCharSet(JB__Tk_Data, Cs, Start, JB_int__Max());
		if ((!JB_Ind_SyntaxCast(After))) {
			After = N;
		}
		if (After > Start) {
			(JB_Tk__NextStartSet(After));
			return After;
		}
	}
	JB_Tk__ErrorLetter(Start);
	return 0;
}

int JB_Tk__XMLAttribs(Message* XML, int Start) {
	Message* AllAtts = JB_Incr(JB_Tk__NewParentName(XML, JB_SyxList, Start, JB_LUB[0]));
	JB_String* S = JB_Incr(JB__Tk_Data);
	while (true) {
		Ind I = JB_Str_OutWhite(S, JB_Tk__NextStart(), JB_int__Max());
		if ((!JB_Ind_SyntaxCast(I))) {
			break;
		}
		byte C = JB_Str_ByteValue(S, I);
		if ((C == '>') or ((C == '/') and (JB_Str_ByteValue(S, I + 1) == '>'))) {
			JB_Decr(S);
			JB_Decr(AllAtts);
			return I;
		}
		if ((!JB_CS_HasChar(JB__Constants_CSWordStart, C))) {
			break;
		}
		Message* Attr = JB_Incr(JB_Tk__ThingXMLAtt(I, AllAtts));
		if ((!JB_Tk__ExpectEndChar(JB_Tk__NextStart(), JB_LUB[586], true))) {
			JB_Decr(Attr);
			JB_Decr(S);
			JB_Decr(AllAtts);
			return 0;
		}
		I = JB_Tk__CleanSpaces();
		C = JB_Str_ByteValue(S, I);
		if ((!((C == '\'') or (C == '"')))) {
			JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[641], I));
			JB_Decr(Attr);
			JB_Decr(S);
			JB_Decr(AllAtts);
			return nil;
		}
		Ind After = JB_Str_FindByte(S, C, I + 1, JB_int__Max());
		Message* Txt = JB_Incr(JB_Tk__NewParentName(Attr, JB_SyxXTxt, Start, JB_LUB[0]));
		JB_Decr(Attr);
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(S, I + 1, After));
		JB_SetRef(Txt->Name, JB_Str_MultiReplaceAll(_tmPf0, JB__Constants_XML_UnEscapeStr, JB_StdErr));
		JB_Decr(Txt);
		JB_Decr(_tmPf0);
		(JB_Tk__NextStartSet(After + 1));
	};
	JB_Decr(AllAtts);
	JB_Decr(S);
	JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[833], JB_Tk__NextStart()));
	return 0;
}

Message* JB_Tk__XMLWhatever(int S, int Skip, JB_String* Ender, Syntax Fn) {
	Message* Rz = nil;
	int I = S + Skip;
	Ind EndPos = JB_Str_InStr(JB__Tk_Data, Ender, I, JB_int__Max(), false);
	if ((!JB_Ind_SyntaxCast(EndPos))) {
		JB_Decr(Rz);
		return JB_Tk__ErrorAdd(JB_LUB[1264], I);
	}
	(JB_Tk__NextStartSet(EndPos + JB_Str_Length(Ender)));
	if (Fn) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(JB__Tk_Data, I, EndPos));
		JB_SetRef(Rz, JB_Tk__NewParentName(nil, Fn, I, _tmPf0));
		JB_Decr(_tmPf0);
		Rz->Position = S;
		(JB_Msg_AfterSet(Rz, JB_Tk__NextStart()));
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Ind JB_Tk__XMLWordEnd(int From) {
	Ind Rz = -1;
	byte B = JB_Str_ByteValue(JB__Tk_Data, From);
	if ((!JB_CS_HasChar(JB__Constants_CSWordStart, B))) {
		JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[1385], From));
	}
	 else {
		Rz = JB_Str_OutCharSet(JB__Tk_Data, JB__Constants_XMLWordMiddle, From + 1, JB_int__Max());
		if (Rz == -1) {
			JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[1389], JB_Tk__NextStart()));
		}
		(JB_Tk__NextStartSet(Rz));
	}
	return Rz;
}


int JB_zalgo__Init_() {
	{
		JB__zalgo_R = ((Random){});
	}
	;
	return 0;
}

int JB_zalgo__InitCode_() {
	return 0;
}






JB_String* JB_bool_Render0(bool Self) {
	return ((JB_StringC*)JB_Ternary(Self, JB_LUB[2004], JB_LUB[1648]));
}


bool JB_byte_CanPrintAsNormalChar(byte Self) {
	return ((Self < 127) and (Self >= 32));
}

bool JB_byte_In(byte Self, uint A, uint B) {
	return (Self >= A) and (Self <= B);
}

bool JB_byte_IsHex(byte Self) {
	return JB_byte_IsInt(Self) or (JB_byte_In(Self, 'a', 'f') or JB_byte_In(Self, 'A', 'F'));
}

bool JB_byte_IsInt(byte Self) {
	return ((uint)(((int)Self) - '0')) <= 9;
}

bool JB_byte_IsLetter(byte Self) {
	return JB_CP_IsLetter(((Codepoint)Self));
}

bool JB_byte_IsLower(byte Self) {
	return JB_CP_IsLower(((Codepoint)Self));
}

bool JB_byte_IsTextLine(byte Self) {
	return (Self == '\n') or (Self == '\x0D');
}

bool JB_byte_IsUpper(byte Self) {
	return JB_CP_IsUpper(((Codepoint)Self));
}

bool JB_byte_IsWhite(byte Self) {
	return JB_CP_IsWhite(((Codepoint)Self));
}

byte JB_byte_LowerCase(byte Self) {
	if (JB_byte_IsUpper(Self)) {
		return Self + 32;
	}
	return Self;
}

JB_String* JB_byte_Render(byte Self, FastString* Fs_in) {
	if ((!Fs_in)) {
		return JB_Str__Byte(Self);
	}
	JB_FS_AppendByte(Fs_in, ((byte)Self));
	return JB_LUB[0];
}

byte JB_byte_UpperCase(byte Self) {
	if (JB_byte_IsLower(Self)) {
		return Self - 32;
	}
	return Self;
}



JB_String* JB_cstring_Str(_cstring Self) {
	return JB_Str__Wrap(Self);
}

FakeJBString JB_cstring_temp(_cstring Self) {
	FakeJBString Rz = ((FakeJBString){});
	Rz.Refcount = 0;
	Rz.Length = strlen(Self);
	Rz.Addr = ((byte*)Self);
	return Rz;
}


int64 JB_dbl_AsInt(double Self) {
	double Abc[1];
	Abc[0] = Self;
	//;
	int64* Def = ((int64*)((&Abc[0])));
	return Def[0];
}

JB_String* JB_dbl_Render(double Self, int Dp, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendDoubleAsText(Fs, Self, Dp, true, false);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_dbl_RenderFloat(double Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendDoubleAsText(Fs, Self, 6, false, true);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}


float JB_f_RoundTo(float Self, int To) {
	float V = ((float)(JB_int_OperatorPow(10, To)));
	return roundf((Self * V)) / V;
}

float JB_f_Fract(float Self) {
	return Self - floorf(Self);
}

float JB_f_Pow(float Self, int N) {
	float Rz = 0.0f;
	//visible;
	Rz = Self;
	{
		int _Valuef1 = 0;
		while (_Valuef1 < N) {
			Rz = (Rz * Rz);
			_Valuef1++;
		};
	}
	;
	return Rz;
}

bool JB_f_SyntaxAccess(float Self) {
	return JB_Rnd_Float((&JB__Rnd_Shared)) < Self;
}



int SC_int___junktest_8__(int Self, int Inaaaadex, bool Create) {
	//visible;
	int doubleJunk2 = 0;
	{
		int _Valuef2 = 0;
		while (_Valuef2 < 0) {
			int _tmPf0 = SC_int___junktest_8__(1, 0, false);
			if ((!_tmPf0)) {
				break;
			}
			doubleJunk2 = _tmPf0;
			_Valuef2++;
		};
	}
	;
	return 0;
}

int JB_int_Bits(int Self) {
	return (1 << Self) - 1;
}

bool SC_int_IsSimpleOrPointerCast(int Self) {
	return (Self == kJB_kSimpleMatch) or ((Self == kJB_kNumericMatch) or (Self == kJB_kNeedsAddressOf));
}

Message* JB_int_Msg(int Self) {
	JB_String* _tmPf0 = JB_Incr(JB_int_RenderFS(Self, nil));
	Message* _tmPf1 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxNum, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_int_OperatorAlign(int Self, int To) {
	int Missing = (Self % To);
	if (Missing) {
		return Self + (To - Missing);
	}
	return Self;
}

bool JB_int_OperatorIsa(int Self, uint N) {
	return (!(((bool)(Self % N))));
}

int JB_int_OperatorMax(int Self, int Other) {
	if (Self > Other) {
		return Self;
	}
	return Other;
}

int JB_int_OperatorMin(int Self, int Other) {
	if (Self < Other) {
		return Self;
	}
	return Other;
}

int JB_int_OperatorPow(int Self, int A) {
	int Rz = 0;
	if (A == 2) {
		return Self * Self;
	}
	if (Self >= 0) {
		Rz = 1;
		{
			int _Valuef1 = 0;
			while (_Valuef1 < A) {
				Rz = (Rz * Self);
				_Valuef1++;
			};
		};
	}
	return Rz;
}

IntRange JB_int_OperatorTo(int Self, int Other) {
	return ((IntRange)ivec2{Self, Other + 1});
}

AsmReg SC_int_Reg(int Self) {
	AsmReg Rz = ((AsmReg){});
	Rz.AType = kJB__TC_int64;
	Rz.Reg = Self;
	return Rz;
}

JB_String* JB_int_RenderFS(int Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendInt32(Fs, Self);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_int_RenderSize(int Self, FastString* Fs_in) {
	return JB_int64_StrSize(((int64)Self), Fs_in);
}

bool JB_int_SyntaxAccess(int Self, int Bit) {
	return ((bool)(Self & (1 << Bit)));
}

int JB_int_SyntaxAccessSet(int Self, int Bit, bool Value) {
	int Mask = 1 << Bit;
	return (Self & (~Mask)) | (((int)Value) << Bit);
}

int JB_int_TabsWidth(int Self) {
	return 4 - (Self & 3);
}

int JB_int__Max() {
	return 2147483647;
}

int JB_int__Min() {
	return 2147483648;
}



int64 JB_int64_Abs(int64 Self) {
	return ((int64)JB_Ternary(Self < 0, (-Self), Self));
}

double JB_int64_AsFloat(int64 Self) {
	int64 Abc[1];
	Abc[0] = Self;
	//;
	double* Def = ((double*)((&Abc[0])));
	return Def[0];
}

JB_String* JB_int64_Hex(int64 Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendHex(Fs, Self, 2);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* JB_int64_Msg(int64 Self) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(Self, nil));
	Message* _tmPf1 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxNum, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int64 JB_int64_OperatorMax(int64 Self, int64 D) {
	if (D > Self) {
		return D;
	}
	return Self;
}

int64 JB_int64_OperatorMin(int64 Self, int64 D) {
	if (D < Self) {
		return D;
	}
	return Self;
}

int64 JB_int64_OperatorRotl(int64 Self, int Amount) {
	return JB_u64_RotL(((uint64)Self), Amount);
}

JB_String* JB_int64_Render(int64 Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendInt64(Fs, Self);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_int64_RenderSizePart(int64 Self, FastString* Fs, int Size, JB_String* Suff) {
	float F = JB_f_RoundTo((((float)Self) / ((float)Size)), 1);
	JB_FS_AppendInt32(Fs, ((int)F));
	if (F < 120.0f) {
		int Frac = ((int)(JB_f_Fract(F) * 10.0f));
		JB_FS_AppendByte(Fs, '.');
		JB_FS_AppendInt32(Fs, Frac);
	}
	JB_FS_AppendString(Fs, Suff);
}

JB_String* JB_int64_StrSize(int64 Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	if (Self <= 512) {
		JB_FS_AppendInt64(Fs, Self);
	}
	 else if (Self <= 921600) {
		JB_int64_RenderSizePart(Self, Fs, 1024, JB_LUB[979]);
	}
	 else if (Self < 943718400) {
		JB_int64_RenderSizePart(Self, Fs, 1048576, JB_LUB[1001]);
	}
	 else if (Self < 966367641600) {
		JB_int64_RenderSizePart(Self, Fs, 1073741824, JB_LUB[894]);
	}
	 else {
		JB_int64_RenderSizePart(Self, Fs, 1099511627776, JB_LUB[1263]);
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}


bool JB_ivec2_OperatorContains(ivec2 Self, int X) {
	return (X >= Self[0]) and (X <= Self[1]);
}

bool JB_ivec2_OperatorInrange(ivec2 Self, ivec2 P) {
	return JB_int_OperatorInRange(Self[0], P[0]) and JB_int_OperatorInRange(Self[1], P[1]);
}

bool JB_ivec2_Equals2(ivec2 Self, ivec2 V, bool Aware) {
	return (Self[0] == V[0]) and (Self[1] == V[1]);
}



ivec4 SC_ivec4___junktest_4__Set(ivec4 Self, int Value) {
	Self[2] = (Value + Self[0]);
	return Self;
}

ivec4 JB_ivec4_Shrink(ivec4 Self, int I) {
	return ivec4{Self[0] + I, Self[1] + I, Self[2] - I, Self[3] - I};
}

int JB_ivec4_Width(ivec4 Self) {
	return Self[2] - Self[0];
}


bool SC_uint_IsNormalMatch(uint Self) {
	return ((Self == kJB_kSimpleMatch) or ((Self == kJB_kNumericMatch) or (Self == kJB_kSuperClassMatch)));
}

uint JB_uint_LowestBit(uint Self) {
	return Self & (-Self);
}



ivec2 SC_uint64_LongestBitStretch(uint64 Self) {
	ivec2 Rz = ((ivec2){});
	uint64 Last = 0;
	while (Self) {
		Last = Self;
		Self = (Self & (JB_u64_RotL(Self, 1)));
		Rz[0]++;
	};
	Rz[1] = JB_u64_Log2(Last);
	return Rz;
}

uint64 JB_uint64_LowestBit(uint64 Self) {
	return Self & (-Self);
}





bool SC_ASMtmp_SyntaxIs(ASMtmp Self, ASMtmp T) {
	return Self == T;
}

AsmReg SC_ASMtmp__Debugger(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_ASMtmp__If(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_ASMtmp__Rejoin(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_ASMtmp__Return(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	AsmReg Rz = ((AsmReg){});
	Message* F = ((Message*)JB_Ring_First(Exp));
	if (F) {
		Rz = SC_flat_Reg(Self, F, SC_int_Reg(0));
	}
	SC_flat_AddASM(Self, Exp, kSC__ASM_RET, SC_Reg_ToInt((&Rz)), 0, 0, 0);
	return Rz;
}

AsmReg SC_ASMtmp__StateExpr(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	return ((AsmReg){});
}

AsmReg SC_ASMtmp__While(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}



bool JB_CP_In(Codepoint Self, int A, int B) {
	return ((Codepoint)(Self - A)) <= ((Codepoint)(B - A));
}

bool JB_CP_IsHigher(Codepoint Self) {
	return JB_CP_In(Self, 128, 1114111);
}

bool JB_CP_IsLetter(Codepoint Self) {
	return JB_CP_IsUpper(Self) or (JB_CP_IsLower(Self) or JB_CP_IsHigher(Self));
}

bool JB_CP_IsLower(Codepoint Self) {
	return JB_CP_In(Self, 'a', 'z');
}

bool JB_CP_IsUpper(Codepoint Self) {
	return JB_CP_In(Self, 'A', 'Z');
}

bool JB_CP_IsWhite(Codepoint Self) {
	return (Self == ' ') or ((Self == '\n') or ((Self == '\x0D') or (Self == '\t')));
}






int JB_TC__Shift(DataTypeCode Self) {
	return (Self >> 4) & 3;
}

SCClass* SC_TC_Better_Numeric_Sub(DataTypeCode Self, DataTypeCode T, OpMode Op) {
	int Bits = JB_int_OperatorMax(JB_TC_ItemBitCount(Self), JB_TC_ItemBitCount(T));
	if (JB_TC_IsFloat(Self) or JB_TC_IsFloat(T)) {
		if (Bits > 32) {
			return JB_Typef64;
		}
		if (Bits >= 16) {
			return JB_Typefloat;
		}
		return JB_Typehfloat;
	}
	if (Op) {
		if (SC_OpMode_SyntaxIs(Op, kSC__OpMode_MakesSigned)) {
			bool UnSigned = (!JB_TC_IsSigned(Self)) or (!JB_TC_IsSigned(T));
			if ((Bits + UnSigned) > 32) {
				return JB_TypeInt64;
			}
			return JB_TypeInt;
		}
		if (SC_OpMode_SyntaxIs(Op, kSC__OpMode_LoseBits)) {
			Bits = JB_int_OperatorMin(JB_TC_ItemBitCount(Self), JB_TC_ItemBitCount(T));
		}
		 else if (SC_OpMode_SyntaxIs(Op, kSC__OpMode_LeftOnly)) {
			Bits = JB_TC_ItemBitCount(Self);
		}
		 else if (SC_OpMode_SyntaxIs(Op, kSC__OpMode_NoExtraBits)) {
			0;
		}
		 else if ((SC_OpMode_SyntaxIs(Op, kSC__OpMode_MathLike)) and (Bits < 32)) {
			Bits = 32;
		}
	}
	bool Signed = JB_TC_IsSigned(Self) or JB_TC_IsSigned(T);
	if (Bits > 32) {
		return ((SCClass*)JB_Ternary(Signed, JB_TypeInt64, JB_TypeuInt64));
	}
	if (Bits > 16) {
		return ((SCClass*)JB_Ternary(Signed, JB_TypeInt, JB_TypeuInt));
	}
	if (Bits > 8) {
		return ((SCClass*)JB_Ternary(Signed, JB_TypeInt16, JB_TypeuInt16));
	}
	return JB_TypeByte;
}

int JB_TC_ByteSize(DataTypeCode Self) {
	return JB_TC_Count(Self) << JB_TC__Shift(Self);
}

int JB_TC_Count(DataTypeCode Self) {
	return (Self & 3) + 1;
}

SCClass* SC_TC_CreateSignedStuff(DataTypeCode Self) {
	DataTypeCode S = JB_TC_SetSigned(Self, (!JB_TC_IsSigned(Self)));
	Message* Keymsg = JB_Msg_ConstructorNormal(nil, JB_SyxThg, JB_LUB[0]);
	{
		Dictionary* _LoopSrcf2 = JB_TC__Types();
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf2);
		while (true) {
			DTWrap* C = ((DTWrap*)JB_DictionaryReader_NextValue(_navf0));
			if (C == nil) {
				break;
			}
			JB_String* Key = JB_Nav_Name(_navf0);
			if (C == JB_Wrap_ConstructorInt(nil, S)) {
				JB_SetRef(Keymsg->Name, Key);
				return SC_Comp__SyntaxAccess(Keymsg);
			}
		};
	}
	;
	return nil;
}

bool JB_TC_ExistsButBadlyNamedOrDesigned(DataTypeCode Self) {
	return (((bool)JB_TC__Shift(Self)) or (!JB_TC_IsFloat(Self)));
}

int SC_TC_FloatIntMerge(DataTypeCode Self, int Old, Message* S) {
	if (JB_TC_IsFloat(Self)) {
		Old = (Old | 2);
	}
	 else if (JB_TC_IsInt(Self)) {
		Old = (Old | 1);
	}
	if (Old == 3) {
		JB_Msg_SyntaxExpect(S, JB_LUB[1716]);
		return 0;
	}
	return Old;
}

bool JB_TC_IsFloat(DataTypeCode Self) {
	return ((bool)((Self >> 7) & 1));
}

bool JB_TC_IsInt(DataTypeCode Self) {
	return (!JB_TC_IsFloat(Self));
}

bool JB_TC_IsSigned(DataTypeCode Self) {
	return ((bool)((Self >> 6) & 1));
}

int JB_TC_ItemBitCount(DataTypeCode Self) {
	return 8 << JB_TC__Shift(Self);
}

int JB_TC_NumericCount(DataTypeCode Self) {
	if (((bool)(Self & 8))) {
		return JB_TC_Count(Self);
	}
	return 0;
}

int JB_TC_NumericCountBoolsToo(DataTypeCode Self) {
	if (((bool)(Self & 8))) {
		return JB_TC_Count(Self);
	}
	if ((!Self)) {
		return 1;
	}
	return 0;
}

bool JB_TC_SameBasicType(DataTypeCode Self, DataTypeCode B) {
	return (JB_TC_IsFloat(Self) == JB_TC_IsFloat(B));
}

DataTypeCode JB_TC_SetSigned(DataTypeCode Self, bool B) {
	if (B) {
		return (Self) | (1 << 6);
	}
	 else {
		return (Self) & (~(1 << 6));
	}
}

bool JB_TC_SyntaxIs(DataTypeCode Self, DataTypeCode M) {
	return Self == M;
}

Dictionary* JB_TC__Types() {
	//visible;
	Dictionary* _T = JB_Incr(JB__TC_Types_Dict);
	if (_T) {
		JB_SafeDecr(_T);
		return _T;
	}
	JB_SetRef(_T, JB_Dict_Constructor(nil));
	JB_SetRef(JB__TC_Types_Dict, _T);
	JB_Dict_SetValue(_T, JB_LUB[1945], kJB__TC_sign);
	JB_Dict_SetValue(_T, JB_LUB[1527], kJB__TC_byte);
	JB_Dict_SetValue(_T, JB_LUB[1538], kJB__TC_char);
	JB_Dict_SetValue(_T, JB_LUB[1528], kJB__TC_Byte2);
	JB_Dict_SetValue(_T, JB_LUB[1529], kJB__TC_Byte3);
	JB_Dict_SetValue(_T, JB_LUB[1530], kJB__TC_Byte4);
	JB_Dict_SetValue(_T, JB_LUB[1923], kJB__TC_SByte);
	JB_Dict_SetValue(_T, JB_LUB[1924], kJB__TC_SByte2);
	JB_Dict_SetValue(_T, JB_LUB[1925], kJB__TC_SByte3);
	JB_Dict_SetValue(_T, JB_LUB[1926], kJB__TC_SByte4);
	JB_Dict_SetValue(_T, JB_LUB[2015], kJB__TC_uint16);
	JB_Dict_SetValue(_T, JB_LUB[1719], kJB__TC_int16);
	JB_Dict_SetValue(_T, JB_LUB[1912], kJB__TC_s16x2);
	JB_Dict_SetValue(_T, JB_LUB[1913], kJB__TC_s16x3);
	JB_Dict_SetValue(_T, JB_LUB[1914], kJB__TC_s16x4);
	JB_Dict_SetValue(_T, JB_LUB[1720], kJB__TC_int64);
	JB_Dict_SetValue(_T, JB_LUB[2016], kJB__TC_uint64);
	JB_Dict_SetValue(_T, JB_LUB[1737], kJB__TC_iVec2);
	JB_Dict_SetValue(_T, JB_LUB[1738], kJB__TC_iVec3);
	JB_Dict_SetValue(_T, JB_LUB[1739], kJB__TC_iVec4);
	JB_Dict_SetValue(_T, JB_LUB[1693], kJB__TC_HFloat);
	JB_Dict_SetValue(_T, JB_LUB[1657], kJB__TC_Float);
	JB_Dict_SetValue(_T, JB_LUB[1619], kJB__TC_Double);
	JB_Dict_SetValue(_T, JB_LUB[2029], kJB__TC_Vec2);
	JB_Dict_SetValue(_T, JB_LUB[2030], kJB__TC_Vec3);
	JB_Dict_SetValue(_T, JB_LUB[2031], kJB__TC_Vec4);
	JB_Dict_SetValue(_T, JB_LUB[1715], kJB__TC_Int);
	JB_Dict_SetValue(_T, JB_LUB[2014], kJB__TC_UInt);
	JB_Dict_SetValue(_T, JB_LUB[1520], kJB__TC_bool);
	JB_Dict_SetValue(_T, JB_LUB[2011], kJB__TC_u32);
	JB_Dict_SetValue(_T, JB_LUB[1915], kJB__TC_s64);
	JB_Dict_SetValue(_T, JB_LUB[2013], kJB__TC_u64);
	JB_Dict_SetValue(_T, JB_LUB[1646], kJB__TC_f64);
	JB_Dict_SetValue(_T, JB_LUB[1645], kJB__TC_f16);
	JB_Dict_SetValue(_T, JB_LUB[1721], kJB__TC_int8);
	JB_Dict_SetValue(_T, JB_LUB[2017], kJB__TC_uint8);
	JB_Dict_SetValue(_T, JB_LUB[2008], kJB__TC_u16);
	JB_Dict_SetValue(_T, JB_LUB[1911], kJB__TC_s16);
	JB_Dict_SetValue(_T, JB_LUB[1500], kJB__TC_atomic_int64);
	JB_Dict_SetValue(_T, JB_LUB[1502], kJB__TC_atomic_uint64);
	JB_Dict_SetValue(_T, JB_LUB[1499], kJB__TC_atomic_int);
	JB_Dict_SetValue(_T, JB_LUB[1501], kJB__TC_atomic_uint);
	JB_Dict_SetValue(_T, JB_LUB[1498], kJB__TC_atomic_byte);
	JB_Dict_SetValue(_T, JB_LUB[1461], kJB__TC__void);
	JB_Dict_SetValue(_T, JB_LUB[1462], kJB__TC__voidptr);
	JB_Dict_SetValue(_T, JB_LUB[1579], kJB__TC_cstring);
	JB_Dict_SetValue(_T, JB_LUB[2023], kJB__TC_UnusedType);
	JB_SafeDecr(_T);
	return _T;
}


Date JB_Date_Ago(Date Self) {
	if (Self) {
		return JB_Date__Now() - Self;
	}
	return 0;
}

int JB_Date_DayOfWeek(Date Self) {
	return JB_Date_Days(Self) % 7;
}

int64 JB_Date_Days(Date Self) {
	return (JB_Date_WholeSeconds(Self) / kJB__Date_kSecondsPerDay);
}

JB_String* JB_Date_RenderDurr(Date Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendDurr(Fs, Self);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Date_RenderInt(Date Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendIntegerAsText(Fs, Self, 1);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

double JB_Date_Seconds(Date Self) {
	return ((double)Self) * kJB__Date_kOneStep;
}

int64 JB_Date_WholeSeconds(Date Self) {
	return Self >> 16;
}

Date JB_Date__New0() {
	return JB_Date__Now();
}


bool SC_DeclMode_SyntaxIs(DeclMode Self, DeclMode O) {
	return Self == O;
}


bool SC_DotUseType_SyntaxIs(DotUseType Self, DotUseType D) {
	return Self == D;
}






JB_String* JB_ErrorSeverity_Render(ErrorSeverity Self, FastString* Fs_in) {
	if (Self < kJB__ErrorSeverity_MaxError) {
		Array* _tmPf0 = JB_Incr(JB_ErrorSeverity__InitNames());
		JB_String* Name = JB_Incr(((JB_String*)JB_Array_Value(_tmPf0, ((int)Self))));
		JB_Decr(_tmPf0);
		if ((!Fs_in)) {
			if (Name != nil) {
				JB_SafeDecr(Name);
				return Name;
			}
			JB_Decr(Name);
			return JB_LUB[0];
		}
		if (JB_Str_Exists(Name)) {
			JB_FS_AppendString(Fs_in, Name);
		}
		JB_Decr(Name);
	}
	return JB_LUB[0];
}

bool JB_ErrorSeverity_SyntaxIs(ErrorSeverity Self, ErrorSeverity E) {
	return Self == E;
}

ErrorSeverity JB_ErrorSeverity_SyntaxUsing(ErrorSeverity Self) {
	ErrorSeverity Rz = 0;
	Rz = JB_StdErr->LowerErrorsTo;
	JB_StdErr->LowerErrorsTo = Self;
	return Rz;
}

void JB_ErrorSeverity_SyntaxUsingComplete(ErrorSeverity Self) {
	JB_StdErr->LowerErrorsTo = Self;
}

ErrorSeverity JB_ErrorSeverity__Find(JB_String* Name, Message* Err) {
	{
		Array* _LoopSrcf2 = JB_ErrorSeverity__InitNames();
		int _if0 = 0;
		while (true) {
			JB_String* N = ((JB_String*)JB_Array_Value(_LoopSrcf2, _if0));
			if (N == nil) {
				break;
			}
			int I = _if0;
			if (JB_Str_Equals(N, Name, true)) {
				return I;
			}
			_if0++;
		};
	}
	;
	if (Err) {
		if (true) {
			JB_Msg_SyntaxExpect(Err, nil);
		}
	}
	return 0;
}

int JB_ErrorSeverity__Init_() {
	{
		JB_SetRef(JB__ErrorSeverity__names, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

int JB_ErrorSeverity__InitCode_() {
	return 0;
}

Array* JB_ErrorSeverity__InitNames() {
	return ({
		Array* _X = JB__ErrorSeverity__names;
		if ((!JB_Array_SyntaxCast(_X))) {
			_X = JB_Str_Words(JB_LUB[1102]);
			JB_SetRef(JB__ErrorSeverity__names, _X);
		}
		 _X;
	});
}








FlowControlStopper JB_FlowControlStopper_SyntaxUsing(FlowControlStopper Self) {
	//;
	return 0;
}

void JB_FlowControlStopper_SyntaxUsingComplete(FlowControlStopper Self) {
	//;
	JB_Flow__Stop();
}




bool JB_Rg_Contains1(IntRange Self, int I) {
	return (I >= Self[0]) and (I < Self[1]);
}

int JB_Rg_Width(IntRange Self) {
	return Self[1] - Self[0];
}



bool JB_MaybeBool_IsFalse(MaybeBool Self) {
	return ((byte)Self) == 0;
}

bool JB_MaybeBool_IsTrue(MaybeBool Self) {
	return ((byte)Self) == 1;
}




NilCheckMode SC_khalai_Activate(NilCheckMode Self) {
	if (SC_khalai_SyntaxIs(Self, kSC__khalai_Active)) {
		return SC_khalai_Normal(Self);
	}
	bool Rev = (SC_khalai_SyntaxIs(Self, kSC__khalai_Reversed));
	return Self | (kSC__khalai_Positive + Rev);
}

NilCheckMode SC_khalai_Negate(NilCheckMode Self) {
	NilCheckMode P = (Self & kSC__khalai_Positive) >> 1;
	P = (P | ((Self & kSC__khalai_Negative) << 1));
	return P | (Self & (~kSC__khalai_Active));
}

NilCheckMode SC_khalai_Normal(NilCheckMode Self) {
	if (SC_khalai_SyntaxIs(Self, kSC__khalai_Reversed)) {
		return SC_khalai_Negate(Self) & (~kSC__khalai_Reversed);
	}
	return Self;
}

bool SC_khalai_SyntaxIs(NilCheckMode Self, NilCheckMode Other) {
	return ((bool)(Self & Other));
}

NilCheckMode SC_khalai_SyntaxIsSet(NilCheckMode Self, NilCheckMode Other, bool Value) {
	if (Value) {
		return Self | Other;
	}
	 else {
		return Self & (~Other);
	}
}


bool SC_NilReason_SyntaxIs(NilReason Self, NilReason X) {
	return X == Self;
}

int SC_NilReason__Init_() {
	{
		JB_SetRef(SC__NilReason_values, (JB_Array_Constructor0(nil)));
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[623]);
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[624]);
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[1165]);
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[1368]);
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[1126]);
	}
	;
	return 0;
}

int SC_NilReason__InitCode_() {
	return 0;
}


uint SC_NRD_DepthOfVars(NilRecord Self) {
	if (Self) {
		return ((uint)JB_u64_Log2(Self)) >> 1;
	}
	return 0;
}

void ndb5(NilRecord Self) {
	//visible;
	uint N = SC_NRD_DepthOfVars(Self) + 1;
	{
		uint I = 0;
		while (I < N) {
			SCDecl* D = JB_Incr(SC__nil_T.Decls[I]);
			if (D) {
				JB_String* Name = JB_Incr(D->Name);
				JB_String* V = JB_Incr(SC_NilState_RawName(SC_NRD_SyntaxAccess(Self, I)));
				FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
				JB_FS_AppendString(_fsf0, Name);
				JB_Decr(Name);
				JB_FS_AppendString(_fsf0, JB_LUB[560]);
				JB_FS_AppendString(_fsf0, V);
				JB_Decr(V);
				JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
				JB_Decr(_fsf0);
				JB_PrintLine(_tmPf2);
				JB_Decr(_tmPf2);
			}
			JB_Decr(D);
			I++;
		};
	};
}

NilState SC_NRD_SyntaxAccess(NilRecord Self, int Item) {
	Item = (Item << 1);
	return (Self >> Item) & kSC__NilState_Either;
}


JB_String* SC_NilState_RawName(NilState Self) {
	if (SC_NilState_SyntaxIs(Self, kSC__NilState_Either)) {
		return JB_LUB[1854];
	}
	if (SC_NilState_SyntaxIs(Self, kSC__NilState_Nilish)) {
		return JB_LUB[1810];
	}
	if (SC_NilState_SyntaxIs(Self, kSC__NilState_Realish)) {
		return JB_LUB[1890];
	}
	return JB_LUB[1766];
}

NilState SC_NilState_StatedReal(NilState Self) {
	if ((Self & kSC__NilState_Optional) == kSC__NilState_Real) {
		return kSC__NilState_Real;
	}
	return 0;
}

bool SC_NilState_SyntaxIs(NilState Self, NilState Type) {
	return (Self & Type) == Type;
}



bool SC_OpMode_SyntaxIs(OpMode Self, OpMode X) {
	return (Self & X) == X;
}



bool JB_ProcessMode_SyntaxIs(ProcessMode Self, ProcessMode M) {
	return ((bool)(Self & M));
}


int SC_SCBlockage_BlockCombine(SCBlockage Self, SCBlockage B) {
	if (B == Self) {
		return Self;
	}
	if (SC_SCBlockage_SyntaxIs(Self, kSC__SCBlockage_Return)) {
		return B;
	}
	if (SC_SCBlockage_SyntaxIs(B, kSC__SCBlockage_Return)) {
		return Self;
	}
	debugger;
	//would this even happen ever???;
	return kSC__SCBlockage_Continue;
}

bool SC_SCBlockage_SyntaxIs(SCBlockage Self, SCBlockage B) {
	return Self == B;
}


SCDeclInfo SC_SCDeclInfo_Set(SCDeclInfo Self, SCDeclInfo D, bool B) {
	if (B) {
		return Self | D;
	}
	return Self & (~D);
}


bool SC_SCNodeFindMode_SyntaxIs(SCNodeFindMode Self, SCNodeFindMode M) {
	return ((bool)(Self & M));
}



bool SC_SCNodeType_HasPtrs(SCNodeType Self) {
	return ((bool)(Self & 1));
}

bool SC_SCNodeType_SyntaxIs(SCNodeType Self, SCNodeType D) {
	return Self == D;
}



void JB_Syx_ExportAddrSet(Syntax Self, FP_fpMsgRender Value) {
	JB_Syx_Obj(Self)->ExportAddr = Value;
}

FP_fpMsgRender JB_Syx_ExportAddr(Syntax Self) {
	return JB_Syx_Obj(Self)->ExportAddr;
}

bool JB_Syx_IsString(Syntax Self) {
	return (Self >= JB_SyxSStr) and (Self <= JB_SyxStr);
}

bool JB_Syx_ListViewable(Syntax Self) {
	return JB_Syx_Translateable(Self) or JB_Syx_IsString(Self);
}

JB_String* JB_Syx_LongName(Syntax Self) {
	if (Self) {
		SyntaxObj* O = JB_Syx_Obj(Self);
		if (O) {
			return O->LongName;
		}
	}
	return JB_LUB[1542];
}

Message* JB_Syx_Msg(Syntax Self, JB_String* Name) {
	return JB_Msg_ConstructorRange(nil, nil, Self, JB__Tk_Using.Position, Name, JB_Str_Length(Name));
}

Message* JB_Syx_IntMsg(Syntax Self, int64 Name) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(Name, nil));
	Message* _tmPf1 = JB_Incr(JB_Syx_Msg(Self, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Syx_Name(Syntax Self) {
	if (Self) {
		SyntaxObj* O = JB_Syx_Obj(Self);
		if (O) {
			return O->Name;
		}
	}
	return JB_LUB[1542];
}

bool JB_Syx_NoChildren(Syntax Self) {
	return (Self >= JB_SyxCnj) and (Self <= JB_SyxBin);
}

SyntaxObj* JB_Syx_Obj(Syntax Self) {
	return JB__FuncArray_[((int)Self)];
}

Message* JB_Syx_OperatorPlus(Syntax Self, JB_String* M) {
	return JB_Syx_Msg(Self, M);
}

Message* JB_Syx_PlusNum(Syntax Self, int M) {
	return JB_Syx_Msg(Self, JB_int_RenderFS(M, nil));
}

FP_fpMsgRender JB_Syx_RenderAddr(Syntax Self) {
	return JB_Syx_Obj(Self)->RenderAddr;
}

bool JB_Syx_Translateable(Syntax Self) {
	return (Self <= JB_SyxThg) and (Self >= JB_SyxTmp);
}

Syntax JB_Syx__Func(JB_String* Name, Message* Where) {
	//visible;
	if (Name != nil) {
		SyntaxObj* Obj = JB_Incr(((SyntaxObj*)JB_Dict_ValueLower(JB__SyxDict_, Name)));
		if ((!Obj)) {
			JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1347], Name));
			JB_Msg_SyntaxExpect(Where, _tmPf0);
			JB_Decr(_tmPf0);
			JB_Decr(Obj);
			return nil;
		}
		Syntax _tmPf1 = Obj->ID;
		JB_Decr(Obj);
		return _tmPf1;
	}
	return nil;
}

int JB_Syx__Init_() {
	{
		JB__Syx_CurrFuncID_ = 0;
	}
	;
	return 0;
}

int JB_Syx__InitCode_() {
	return 0;
}

Syntax JB_Syx__StdNew(FP_fpMsgRender Msg, JB_String* Name, JB_String* LongName) {
	int ID = JB__Syx_CurrFuncID_++;
	SyntaxObj* Result = JB_Incr(JB_Fn_Constructor(nil, Msg, Name, ID));
	(JB_Dict_ValueSet(JB__SyxDict_, Name, Result));
	JB_SetRef(JB__FuncArray_[ID], Result);
	if (JB_Str_Exists(LongName)) {
		(JB_Dict_ValueSet(JB__SyxDict_, LongName, Result));
		JB_SetRef(Result->LongName, LongName);
	}
	 else {
		JB_SetRef(Result->LongName, Name);
	}
	JB_Decr(Result);
	return ((Syntax)ID);
}









uint SC_xC2xB5Param_BitSize(ASMParam Self) {
	return Self & 31;
}

bool SC_xC2xB5Param_IsNumber(ASMParam Self) {
	return ((bool)(Self & 64));
}

bool SC_xC2xB5Param_IsReg(ASMParam Self) {
	return (!SC_xC2xB5Param_IsNumber(Self));
}


ASM SC_ASM_BFLD_downSet(ASM Self, uint Value) {
	return Self | ((Value << 26) >> 23);
}

ASM SC_ASM_BFLD_signSet(ASM Self, uint Value) {
	return Self | ((Value << 29) >> 29);
}

ASM SC_ASM_BFLD_upSet(ASM Self, uint Value) {
	return Self | ((Value << 26) >> 17);
}

ASM SC_ASM_Bra_c1Set(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 12);
}

ASM SC_ASM_Bra_jmpSet(ASM Self, uint Value) {
	return Self | ((Value << 14) >> 14);
}

ASM SC_ASM_Cmp_CmpSet(ASM Self, uint Value) {
	return Self | ((Value << 28) >> 17);
}

ASM SC_ASM_Cmp_LSet(ASM Self, uint Value) {
	return Self | ((Value << 21) >> 21);
}

ASM SC_ASM_CmpEq_bytesSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 17);
}

ASM SC_ASM_CmpEq_JmpSet(ASM Self, uint Value) {
	return Self | ((Value << 19) >> 19);
}

ASM SC_ASM_CNTC_cnstSet(ASM Self, uint Value) {
	return Self | ((Value << 24) >> 12);
}

ASM SC_ASM_CNTC_LSet(ASM Self, uint Value) {
	return Self | ((Value << 22) >> 22);
}

ASM SC_ASM_CNTC_sizeSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 20);
}

ASM SC_ASM_CNTR_incrSet(ASM Self, uint Value) {
	return Self | ((Value << 29) >> 17);
}

ASM SC_ASM_CNTR_LSet(ASM Self, uint Value) {
	return Self | ((Value << 22) >> 22);
}

ASM SC_ASM_CNTR_sizeSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 20);
}

ASM SC_ASM_Const_LSet(ASM Self, uint Value) {
	return Self | ((Value << 18) >> 18);
}

ASM SC_ASM_Const_rotSet(ASM Self, uint Value) {
	return Self | ((Value << 26) >> 12);
}

ASM SC_ASM_Func_JUMPSet(ASM Self, uint Value) {
	return Self | ((Value << 9) >> 9);
}

ASM SC_ASM_Func_ModeSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 7);
}

ASM SC_ASM_Mem_incrSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 17);
}

ASM SC_ASM_Mem_LSet(ASM Self, uint Value) {
	return Self | ((Value << 19) >> 19);
}

void ASMPrint(ASM Self) {
	//visible;
}

ASM SC_ASM_R1Set(ASM Self, uint Value) {
	return Self | ((Value << 27) >> 7);
}

ASM SC_ASM_R2Set(ASM Self, uint Value) {
	return Self | ((Value << 27) >> 12);
}

ASM SC_ASM_R3Set(ASM Self, uint Value) {
	return Self | ((Value << 27) >> 17);
}

ASM SC_ASM_R4Set(ASM Self, uint Value) {
	return Self | ((Value << 27) >> 22);
}

ASM SC_ASM_Setn_CondSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 14);
}

ASM SC_ASM_Setn_DestSet(ASM Self, uint Value) {
	return Self | ((Value << 27) >> 9);
}

ASM SC_ASM_Setn_LSet(ASM Self, uint Value) {
	return Self | ((Value << 16) >> 16);
}

ASM SC_ASM_Setn_lenSet(ASM Self, uint Value) {
	return Self | ((Value << 30) >> 7);
}

ASM SC_ASM_SWAP_ASet(ASM Self, uint Value) {
	return Self | ((Value << 26) >> 7);
}

ASM SC_ASM_SWAP_BSet(ASM Self, uint Value) {
	return Self | ((Value << 26) >> 13);
}

ASM SC_ASM_SWAP_CSet(ASM Self, uint Value) {
	return Self | ((Value << 26) >> 19);
}

ASM SC_ASM_SWAP_DSet(ASM Self, uint Value) {
	return Self | ((Value << 26) >> 25);
}

ASM SC_ASM_SWAP_LSet(ASM Self, uint Value) {
	return Self | ((Value << 31) >> 31);
}

ASM SC_ASM_U0_LSet(ASM Self, uint Value) {
	return Self | ((Value << 7) >> 7);
}

ASM SC_ASM_U1_LSet(ASM Self, uint Value) {
	return Self | ((Value << 12) >> 12);
}

ASM SC_ASM_U2_LSet(ASM Self, uint Value) {
	return Self | ((Value << 17) >> 17);
}

ASM SC_ASM_U3_LSet(ASM Self, uint Value) {
	return Self | ((Value << 22) >> 22);
}

ASM SC_ASM_U4_LSet(ASM Self, uint Value) {
	return Self | ((Value << 27) >> 27);
}

void SC_ASM__Enc1() {
	IR R = ((IR){});
	R.Op = kSC__ASM_DSUB;
	R.r[0] = 3;
	R.r[1] = 2;
	R.r[2] = 1;
	R.Rest = 0;
	ASM Oof = SC_IR_Encode((&R));
}

int SC_ASM__Init_() {
	{
		SC__ASM_NoisyASM = 1;
	}
	;
	return 0;
}

int SC_ASM__InitCode_() {
	return 0;
}

void SC_ASM__ListInstructions() {
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(Fs, JB_LUB[1108]);
	int N = 0;
	{
		int Opcode = 0;
		while (Opcode < 128) {
			Instruction* Inst = SC__Instruction_TypeList[Opcode];
			if (((bool)Inst) and ((!Opcode) or ((bool)Inst->OpCode))) {
				JB_FS_AppendIntegerAsText(Fs, Opcode, 2);
				//;
				JB_FS_AppendString(Fs, JB_LUB[155]);
				JB_FS_AppendString(Fs, Inst->Name);
				//;
				JB_FS_AppendMultiByte(Fs, ' ', 4 - JB_Str_Length(Inst->Name));
				N++;
				if (N >= 7) {
					JB_FS_AppendByte(Fs, '\n');
					N = 0;
				}
				 else {
					JB_FS_AppendString(Fs, JB_LUB[303]);
				}
			}
			Opcode++;
		};
	}
	;
	JB_Obj_PrintLine(Fs);
	JB_Decr(Fs);
}

bool SC_ASM__Needed() {
	SCNode* Fn = JB_Incr(((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, JB_LUB[946])));
	if (Fn) {
		bool _tmPf0 = ((bool)Fn->MyReacher);
		JB_Decr(Fn);
		return _tmPf0;
	}
	JB_Decr(Fn);
	return false;
}

void SC_ASM__TestASM() {
	SC_ASM__Enc1();
	if ((!SC__Options_ModePack)) {
		return;
	}
	JB_String* _tmPf1 = JB_Incr(JB_App__GetPref(JB_LUB[1602]));
	int64 Dev = JB_Str_Int(_tmPf1);
	JB_Decr(_tmPf1);
	if (Dev >= 2) {
		SC__ASM_NoisyASM = 3;
	}
	if (SC__ASM_NoisyASM >= 3) {
		SC_ASM__ListInstructions();
	}
	if (Dev <= 0) {
		return;
	}
	if (true) {
		ErrorSeverity _usingf0 = JB_ErrorSeverity_SyntaxUsing(kJB__ErrorSeverity_Warning);
		Message* _tmPf2 = JB_Incr(JB_Str_Parse((JB_LUB[398]), JB_SyxArg, true));
		Message* T = JB_Incr(JB_Msg_NeedSyxName(_tmPf2, JB_SyxTmp, JB_LUB[1991]));
		if (T) {
			SC_ASM__TestASMSub(T);
		}
		JB_Decr(T);
		JB_ErrorSeverity_SyntaxUsingComplete(_usingf0);
		JB_Decr(_tmPf2);
	}
}

void SC_ASM__TestASMSub(Message* Tests) {
	Message* List = JB_Msg_Last(Tests, JB_SyxArg);
	Message* Testname = JB_Msg_NeedSyx(Tests, JB_SyxThg);
	if ((!(((bool)List) and ((bool)Testname)))) {
		return;
	}
	SC_TextAssembler__Assemble(List);
	ASMFunc* Fn = SC_TreeAssembler__AccessStr(Testname);
	if (Fn) {
		int64 Ff = SC_ASMFunc2_RunArgs(SC_ASMFunc_Finish(Fn), nil, nil);
	}
}



ASM JB_ASM_BFLD__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_R1Set(Rz, Self->r[0]);
	Rz = SC_ASM_R2Set(Rz, Self->r[1]);
	Rz = SC_ASM_BFLD_upSet(Rz, Self->r[2]);
	Rz = SC_ASM_BFLD_downSet(Rz, Self->r[3]);
	Rz = SC_ASM_BFLD_signSet(Rz, Self->Rest);
	return Rz;
}


ASM JB_ASM_Bra__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_R1Set(Rz, Self->r[0]);
	Rz = SC_ASM_Bra_c1Set(Rz, Self->r[1]);
	Rz = SC_ASM_Bra_jmpSet(Rz, Self->r[2]);
	return Rz;
}


ASM JB_ASM_CNTC__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_R1Set(Rz, Self->r[0]);
	Rz = SC_ASM_CNTC_cnstSet(Rz, Self->r[1]);
	Rz = SC_ASM_CNTC_sizeSet(Rz, Self->r[2]);
	Rz = SC_ASM_CNTC_LSet(Rz, Self->Rest);
	return Rz;
}


ASM JB_ASM_CNTR__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_R1Set(Rz, Self->r[0]);
	Rz = SC_ASM_R2Set(Rz, Self->r[1]);
	Rz = SC_ASM_CNTR_incrSet(Rz, Self->r[2]);
	Rz = SC_ASM_CNTR_sizeSet(Rz, Self->r[3]);
	Rz = SC_ASM_CNTR_LSet(Rz, Self->Rest);
	return Rz;
}


ASM JB_ASM_Cmp__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_R1Set(Rz, Self->r[0]);
	Rz = SC_ASM_R2Set(Rz, Self->r[1]);
	Rz = SC_ASM_Cmp_CmpSet(Rz, Self->r[2]);
	Rz = SC_ASM_Cmp_LSet(Rz, Self->Rest);
	return Rz;
}


ASM JB_ASM_CmpEq__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_R1Set(Rz, Self->r[0]);
	Rz = SC_ASM_R2Set(Rz, Self->r[1]);
	Rz = SC_ASM_CmpEq_bytesSet(Rz, Self->r[2]);
	Rz = SC_ASM_CmpEq_JmpSet(Rz, Self->r[3]);
	return Rz;
}


ASM JB_ASM_Const__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_R1Set(Rz, Self->r[0]);
	Rz = SC_ASM_Const_rotSet(Rz, Self->r[1]);
	Rz = SC_ASM_Const_LSet(Rz, Self->Rest);
	return Rz;
}


ASM JB_ASM_Func__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_Func_ModeSet(Rz, Self->r[0]);
	Rz = SC_ASM_Func_JUMPSet(Rz, Self->r[1]);
	return Rz;
}


ASM JB_ASM_Mem__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_R1Set(Rz, Self->r[0]);
	Rz = SC_ASM_R2Set(Rz, Self->r[1]);
	Rz = SC_ASM_Mem_incrSet(Rz, Self->r[2]);
	Rz = SC_ASM_Mem_LSet(Rz, Self->Rest);
	return Rz;
}


ASM JB_ASM_SWAP__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_SWAP_ASet(Rz, Self->r[0]);
	Rz = SC_ASM_SWAP_BSet(Rz, Self->r[1]);
	Rz = SC_ASM_SWAP_CSet(Rz, Self->r[2]);
	Rz = SC_ASM_SWAP_DSet(Rz, Self->r[3]);
	Rz = SC_ASM_SWAP_LSet(Rz, Self->Rest);
	return Rz;
}


ASM JB_ASM_Setn__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_Setn_lenSet(Rz, Self->r[0]);
	Rz = SC_ASM_Setn_DestSet(Rz, Self->r[1]);
	Rz = SC_ASM_Setn_CondSet(Rz, Self->r[2]);
	Rz = SC_ASM_Setn_LSet(Rz, Self->Rest);
	return Rz;
}


ASM JB_ASM_U0__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_U0_LSet(Rz, Self->Rest);
	return Rz;
}


ASM JB_ASM_U1__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_R1Set(Rz, Self->r[0]);
	Rz = SC_ASM_U1_LSet(Rz, Self->Rest);
	return Rz;
}


ASM JB_ASM_U2__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_R1Set(Rz, Self->r[0]);
	Rz = SC_ASM_R2Set(Rz, Self->r[1]);
	Rz = SC_ASM_U2_LSet(Rz, Self->Rest);
	return Rz;
}


ASM JB_ASM_U3__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_R1Set(Rz, Self->r[0]);
	Rz = SC_ASM_R2Set(Rz, Self->r[1]);
	Rz = SC_ASM_R3Set(Rz, Self->r[2]);
	Rz = SC_ASM_U3_LSet(Rz, Self->Rest);
	return Rz;
}


ASM JB_ASM_U4__Encode(IR* Self) {
	ASM Rz = 0;
	//visible;
	Rz = (Self->Op << 25);
	Rz = SC_ASM_R1Set(Rz, Self->r[0]);
	Rz = SC_ASM_R2Set(Rz, Self->r[1]);
	Rz = SC_ASM_R3Set(Rz, Self->r[2]);
	Rz = SC_ASM_R4Set(Rz, Self->r[3]);
	Rz = SC_ASM_U4_LSet(Rz, Self->Rest);
	return Rz;
}































AsmReg SC_fn_asm__Default(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	return ((AsmReg){});
}

void SC_fn_asm__InitTable() {
	if (JB_fn_asm_table[0]) {
		return;
	}
	{
		int I = 0;
		while (I < 64) {
			if ((!(JB_fn_asm_table[I]))) {
				JB_fn_asm_table[I] = (&SC_fn_asm__Default);
			}
			I++;
		};
	};
}






void SC_flat_AddFuncParams(ASMFuncState* Self, SCFunction* Fn) {
	{
		Array* _LoopSrcf2 = Fn->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* A = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (A == nil) {
				break;
			}
			SC_flat_AllocRegDecl(Self, A->Source, A, SC_int_Reg(0));
			_if0++;
		};
	};
}

void SC_flat_AddLabel(ASMFuncState* Self, Message* Ch) {
	Dictionary* T = ({
		Dictionary* _X = SC__TextAssembler_LabelsToDo;
		if ((!_X)) {
			_X = JB_Dict_Constructor(nil);
			JB_SetRef(SC__TextAssembler_LabelsToDo, _X);
		}
		 _X;
	});
	byte _tmPf0 = (++Self->LabelCount);
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(Ch, JB_LUB[1317]);
		return;
	}
	SC_flat_Last(Self)->Label = _tmPf0;
	if ((((DTWrap*)JB_Dict_ValueLower(T, Ch->Name)))) {
		JB_Msg_SyntaxExpect(Ch, JB_LUB[985]);
		return;
	}
	//debugger;
	(JB_Dict_ValueLowerSet(T, Ch->Name, JB_Wrap_ConstructorInt(nil, Self->Out->Length)));
}

AsmReg SC_flat_AllocRegDecl(ASMFuncState* Self, Message* Exp, SCDecl* Decl, AsmReg R) {
	SC_flat_NeedSomewhere(Self, Exp, (&Decl->DReg), SC_Decl_RegType(Decl));
	return Decl->DReg;
}

void SC_flat_CloseVars(ASMFuncState* Self, uint64 Old) {
	if ((!(((bool)(Old & 1))))) {
		debugger;
	}
	Self->UsedRegs = Old;
}

void SC_flat_Destructor(ASMFuncState* Self) {
	JB_Clear(Self->Out);
}

AsmReg SC_flat_DoFunc(ASMFuncState* Self, Message* Prms, AsmReg Dest) {
	SCFunction* Fn = SC_Msg_AsFunc(Prms);
	if ((!Fn)) {
		debugger;
		return ((AsmReg){});
	}
	SC_flat_NeedSomewhere(Self, Prms, (&Dest), SC_Func_RegType(Fn));
	SC_flat_AddASM(Self, ((Message*)JB_Ring_Parent(Prms)), kSC__ASM_FNC, 0, 0, 0, 0)->Rest = Fn->TableId;
	uint64 OV = SC_flat_OpenVars(Self);
	int64 Bits = (Dest.Reg << 25) | (JB_u64_Log2(OV) << 20);
	int Remain = 20;
	Message* P = ((Message*)JB_Ring_First(Prms));
	while (true) {
		Message* _tmPf0 = SC_flat_FuncPrms(Self, P, Remain, Bits);
		if ((!_tmPf0)) {
			break;
		}
		P = _tmPf0;
		Remain = 31;
		Bits = 0;
	};
	SC_flat_CloseVars(Self, OV);
	return Dest;
}

AsmReg SC_flat_DoRels(ASMFuncState* Self, Message* L, AsmReg Dest) {
	Message* Op = ((Message*)JB_Ring_NextSib(L));
	uint64 OV = SC_flat_OpenVars(Self);
	AsmReg mL = SC_flat_RegSaved(Self, L);
	AsmReg mR = SC_flat_Reg(Self, ((Message*)JB_Ring_NextSib(Op)), SC_int_Reg(0));
	SC_flat_CloseVars(Self, OV);
	if ((!((bool)(mL.Reg | mR.Reg)))) {
		return ((AsmReg){});
	}
	SC_flat_NeedSomewhere(Self, Op, (&Dest), mL.AType);
	SCOperator* Scop = ((SCOperator*)Op->Obj);
	if (Scop) {
		fn_OpASM Fn = Scop->ASM;
		if (Fn) {
			return (Fn)(Self, Dest, mL, mR, Op);
		}
	}
	if (true) {
		JB_Msg_SyntaxExpect(Op, JB_LUB[1063]);
	}
	return ((AsmReg){});
}

IR* SC_flat_FindLabel(ASMFuncState* Self, IR* Dbg) {
	int Num = Dbg->Rest;
	{
		ASMFunc* _LoopSrcf2 = Self->Out;
		int _CurrInstf0 = 0;
		IR* _Addrf1 = _LoopSrcf2->IR;
		while (_CurrInstf0 < _LoopSrcf2->Length) {
			IR* A = _Addrf1 + _CurrInstf0;
			if (A->Label == Num) {
				return A;
			}
			_CurrInstf0++;
		};
	}
	;
	if (true) {
		SC_IR_SyntaxExpect(Dbg, JB_LUB[1074]);
	}
	return nil;
}

void SC_flat_FinishASM(ASMFuncState* Self) {
	Self->Out->Length = (Self->Out->Length + Self->Written);
	if ((!SC_IR_OperatorIsa(SC_flat_Last(Self), kSC__ASM_RET))) {
		SC_flat_AddASM(Self, Self->fn->Source, kSC__ASM_RET, 0, 0, 0, 0);
	}
}

Message* SC_flat_FuncPrms(ASMFuncState* Self, Message* Pr, int Remain, uint Bits) {
	while (Pr) {
		AsmReg Reg = SC_flat_RegSaved(Self, Pr);
		Pr = ((Message*)JB_Ring_NextSib(Pr));
		Remain = (Remain - 5);
		Bits = (Bits | (Reg.Reg << Remain));
		if (Remain < 5) {
			break;
		}
	};
	SC_flat_AddExtended(Self, Pr, Bits);
	return Pr;
}

uint SC_flat_GetLabelJump(ASMFuncState* Self, Message* P) {
	DTWrap* _tmPf0 = ((DTWrap*)JB_Dict_ValueLower(SC__TextAssembler_LabelsToDo, P->Name));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(P, JB_LUB[986]);
		return 0;
	}
	return ((uint)JB_Wrap_First((_tmPf0)));
}

void SC_flat_InitState(ASMFuncState* Self, SCFunction* Fn) {
	SC_flat_TotalInit(Self);
	JB_SetRef(Self->Out, SC_ASMFunc_Constructor(nil, Fn, ((IR*)JB_Mrap_Ptr(SC__flat_JSMSpace)) + Self->Written));
	Self->Out->Length = (-Self->Written);
	Self->LabelCount = 0;
	Self->fn = Fn;
	Self->OK = true;
	Self->UsedRegs = 1;
	SC_flat_AddFuncParams(Self, Fn);
}

IR* SC_flat_Last(ASMFuncState* Self) {
	return Self->Start + (Self->Written - 1);
}

bool SC_flat_LoadLabelJumps(ASMFuncState* Self) {
	if ((!SC__TextAssembler_LabelsToDo)) {
		return nil;
	}
	{
		ASMFunc* _LoopSrcf2 = Self->Out;
		int _CurrInstf0 = 0;
		IR* _Addrf1 = _LoopSrcf2->IR;
		while (_CurrInstf0 < _LoopSrcf2->Length) {
			IR* A = _Addrf1 + _CurrInstf0;
			if (A->Label == 255) {
				IR* Found = SC_flat_FindLabel(Self, A);
				if ((!Found)) {
					debugger;
					SC_flat_FindLabel(Self, A);
					return false;
				}
				A->Rest = (Found - A);
			}
			_CurrInstf0++;
		};
	}
	;
	return true;
}

Message* SC_flat_LoadTitle(ASMFuncState* Self, Message* M) {
	Message* Rz = nil;
	Message* Name = JB_Msg_NeedSyx(M, JB_SyxThg);
	if ((!Name)) {
		return nil;
	}
	JB_SetRef(Self->fn->ExportName, Name->Name);
	JB_SetRef(Self->fn->Name, Name->Name);
	Message* Bra = JB_Msg_NextOf(Name, JB_SyxBra);
	if ((!Bra)) {
		return nil;
	}
	int64 N = JB_Msg_Int(JB_Msg_NeedSyx(Bra, JB_SyxNum), 0);
	if ((!((N >= 0) and (N <= 10)))) {
		JB_Msg_SyntaxExpect(M, JB_LUB[1310]);
		return nil;
	}
	{
		int64 _Valuef1 = 0;
		while (_Valuef1 < N) {
			JB_Array_SyntaxAppend(Self->fn->Args, JB_TypeInt64->TypeNormal);
			_Valuef1++;
		};
	}
	;
	Rz = JB_Msg_NextOf(Bra, JB_SyxArg);
	JB_Msg_ExpectLast(Rz, JB_LUB[0]);
	return Rz;
}

void SC_flat_NeedSomewhere(ASMFuncState* Self, Message* Err, AsmReg* Dest, DataTypeCode T) {
	if (Dest->Reg) {
		return;
	}
	uint64 B = JB_uint64_LowestBit(((~Self->UsedRegs)));
	if ((!B)) {
		JB_Msg_SyntaxExpect(Err, JB_LUB[1069]);
	}
	Self->UsedRegs = (Self->UsedRegs | B);
	Dest->Reg = JB_u64_Log2(B);
	Dest->AType = T;
}

uint64 SC_flat_OpenVars(ASMFuncState* Self) {
	uint64 Rz = 0;
	Rz = Self->UsedRegs;
	if ((!(((bool)(Rz & 1))))) {
		debugger;
	}
	return Rz;
}

IR* SC_flat_RequestOp(ASMFuncState* Self) {
	if (Self->Written < Self->MaxLength) {
		return Self->Start + Self->Written++;
	}
	if (Self->OK) {
		if (true) {
			JB_Str_SyntaxExpect(JB_LUB[612]);
		}
		Self->OK = false;
	}
	return (&SC__flat_Dummy);
}

bool SC_flat_SetConst(ASMFuncState* Self, Message* List, Message* Orig) {
	Message* RegMsg = JB_Msg_NeedSyx(List, JB_SyxThg);
	if ((!RegMsg)) {
		return nil;
	}
	uint Reg = SC_Msg_Reg(RegMsg);
	Message* _tmPf0 = ((Message*)JB_Ring_NextSib(RegMsg));
	if ((!_tmPf0)) {
		return nil;
	}
	uint64 Value = SC_Msg_ASMConst(_tmPf0);
	if ((!SC_flat_TrySmallConst(Self, Reg, Value, Orig))) {
		JB_DoAt(1);
		SC_flat_AddASM(Self, Orig, kSC__ASM_SETN, Reg, 0, 0, 0);
	}
	return true;
}

bool SC_flat_TextFuncSub(ASMFuncState* Self, Message* M) {
	{
		Message* _LoopSrcf2 = SC_flat_LoadTitle(Self, M);
		Message* Ch = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			if (JB_Msg_EqualsSyx(Ch, JB_SyxName, false)) {
				SC_flat_AddLabel(Self, Ch);
			}
			 else {
				SC_flat_TextInstruction(Self, Ch);
			}
			Ch = _Nf1;
		};
		;
	}
	;
	return SC_flat_LoadLabelJumps(Self);
}

void SC_flat_TextInstruction(ASMFuncState* Self, Message* M) {
	if ((!SC_flat_TextOp(Self, M))) {
		JB_DoAt(1);
		SC_flat_TextOp(Self, M);
	}
}

bool SC_flat_TextOp(ASMFuncState* Self, Message* M) {
	if (JB_Msg_EqualsSyx(M, JB_SyxRel, false)) {
		Message* Dest = JB_Msg_NeedSyx(M, JB_SyxThg);
		if ((!Dest)) {
			return nil;
		}
		Message* funcMsg = SC_Msg_GetASMFunc(Dest);
		if ((!funcMsg)) {
			return nil;
		}
	}
	if ((!JB_Msg_Expect(M, JB_SyxTmp, nil))) {
		return nil;
	}
	Instruction* Op = SC_Instruction__SyntaxAccessWithMsg(M);
	if ((!Op)) {
		return nil;
	}
	Message* List = ((Message*)JB_Ring_First(M));
	if ((!((List == nil) or ((JB_Msg_EqualsSyx(List, JB_SyxList, false)) or (JB_Msg_EqualsSyx(List, JB_SyxBra, false)))))) {
		JB_Msg_SyntaxExpect(M, nil);
		return nil;
	}
	if (SC_Instruction_IsSetConst(Op)) {
		return SC_flat_SetConst(Self, List, M);
	}
	IR* A = SC_flat_RequestOp2(Self, Op->OpCode);
	int Write = 0;
	{
		Message* P = ((Message*)JB_Ring_First(List));
		while (P) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(P));
			if ((!JB_Msg_EqualsSyx(P, JB_SyxName, false))) {
				SC_IR_AddRegParam(A, P, Write);
			}
			 else {
				A->Rest = SC_flat_GetLabelJump(Self, P);
			}
			if ((++Write) > Op->PCount) {
				JB_Msg_SyntaxExpect(List, JB_LUB[1320]);
				return nil;
			}
			P = _Nf2;
		};
		;
	}
	;
	bool _tmPf0 = (Op->PCount == Write);
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(List, JB_LUB[1308]);
		return nil;
	}
	return _tmPf0;
}

void SC_flat_TotalInit(ASMFuncState* Self) {
	MWrap* J = SC__flat_JSMSpace;
	(JB_Mrap_CapacitySet(J, 4194304));
	Self->MaxLength = J->Capacity;
	Self->Start = ((IR*)JB_Mrap_Ptr(J));
	Self->Written = 0;
}

bool SC_flat_TrySmallConst(ASMFuncState* Self, uint Reg, int64 Value, Message* Where) {
	int Set1_test = (((int)Value) << 12) >> 12;
	if (Set1_test == Value) {
		SC_flat_AddASM(Self, Where, kSC__ASM_SET1, Reg, 0, 0, 0)->Rest = Set1_test;
		return true;
	}
	ivec2 R = SC_uint64_LongestBitStretch(((~((uint64)Value))));
	if (R[0] >= 50) {
		Value = JB_int64_OperatorRotl(Value, 63 - R[1]);
		SC_flat_AddASM(Self, Where, kSC__ASM_SETK, Reg, R[1], 0, 0)->Rest = ((int)Value);
		return true;
	}
	return false;
}

AsmReg SC_flat_Reg(ASMFuncState* Self, Message* Exp, AsmReg Reg) {
	return (SC_Msg_ASMFunc(Exp))(Self, Exp, Reg);
}

AsmReg SC_flat_RegSaved(ASMFuncState* Self, Message* Exp) {
	AsmReg Rz = ((AsmReg){});
	Rz = SC_flat_Reg(Self, Exp, SC_int_Reg(0));
	Self->UsedRegs = (Self->UsedRegs | (1 << Rz.Reg));
	return Rz;
}

int SC_flat__Init_() {
	{
		SC__flat_Dummy = ((IR){});
		MWrap* _tmPf0 = JB_Incr(JB_Mrap__Object(0, 16));
		JB_SetRef(SC__flat_JSMSpace, _tmPf0);
		JB_Decr(_tmPf0);
	}
	;
	return 0;
}

int SC_flat__InitCode_() {
	return 0;
}



void SC_nil_BecomeRealSub(ArchonPurger* Self, SCDecl* V) {
	V->NilDeclared = kSC__NilState_Real;
	if (SC_Decl_SyntaxIs(V, kSC__SCDeclInfo_Self)) {
		Self->FnAbleToNilCheck = false;
	}
	if (SC_nil_NestDepth(Self) > 0) {
		Self->Realnesses = (Self->Realnesses & (~(kSC__NilState_Nilish << (V->NilReg << 1))));
	}
}

NilRecord SC_nil_BranchEnter(ArchonPurger* Self, Message* Where) {
	NilRecord Rz = 0;
	if (Self->Neel >= Self->RowEnd) {
		JB_Msg_SyntaxExpect(Where, JB_LUB[674]);
		return 0;
	}
	Rz = (*(Self->Neel++));
	(*Self->Neel) = Rz;
	return Rz;
}

NilState SC_nil_BranchExit(ArchonPurger* Self, NilRecord A) {
	NilRecord B = SC_nil__Value();
	(*Self->Neel--) = 0;
	SC_nil_SetAllNil(Self, A | B);
	if (SC_nil_NestDepth(Self) == 0) {
		Self->Realnesses = -1;
	}
	return kSC__NilState_Real;
}

NilRecord SC_nil_BranchSwap(ArchonPurger* Self, NilRecord A) {
	NilRecord Rz = 0;
	Rz = SC_nil__Value();
	SC_nil_SetAllNil(Self, A);
	return Rz;
}

void SC_nil_CheckNilCheck(ArchonPurger* Self, SCFunction* F) {
	Self->FnAbleToNilCheck = false;
	JB_SetRef(Self->Return, F->ReturnType);
	SCDecl* S = ((SCDecl*)JB_Array_First(F->Args));
	if (S) {
		if ((SC_NilState_SyntaxIs(S->NilDeclared, kSC__NilState_Nilish)) and (SC_Decl_TypeSuffers(S) and SC_Decl_CanNilCheck(Self->Return))) {
			Self->FnAbleToNilCheck = true;
		}
	}
}

NilState SC_nil_Declare(ArchonPurger* Self, SCDecl* D, NilState Nd) {
	NilState Rz = 0;
	Rz = SC_nil_DeclareSub(Self, D, Nd);
	return Rz;
}

NilState SC_nil_DeclareSub(ArchonPurger* Self, SCDecl* D, NilState Nd) {
	Nd = (Nd & kSC__NilState_Either);
	uint N = SC_NRD_DepthOfVars(SC_nil_Value(Self)) + 1;
	if (N >= 31) {
		SC_SCObject_Fail(D, JB_LUB[1311]);
		return 0;
	}
	Self->Decls[N] = D;
	D->NilReg = (N * SC_Decl_TypeSuffers(D));
	D->DReg.Reg = N;
	D->NilAllocDepth = SC_nil_NestDepth(Self);
	NilRecorder* P = ((NilRecorder*)(Self->Neel));
	(SC_NRC_SyntaxCallSet((P), N, Nd));
	return Nd;
}

void SC_nil_Destructor(ArchonPurger* Self) {
	JB_Clear(Self->Return);
}

void SC_nil_FinishNil(ArchonPurger* Self, SCFunction* F) {
	SCDecl* R = F->ReturnType;
	if (R) {
		R->NilDeclared = (R->NilDeclared | kSC__NilState_Stated);
	}
	{
		Array* _LoopSrcf2 = F->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* A = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (A == nil) {
				break;
			}
			A->NilDeclared = (A->NilDeclared | kSC__NilState_Stated);
			_if0++;
		};
	};
}

int SC_nil_NestDepth(ArchonPurger* Self) {
	return ((int)(Self->Neel - (&Self->Rows[0])));
}

NilState SC_nil_Self(ArchonPurger* Self) {
	return SC_NRD_SyntaxAccess((SC_nil_Value(Self)), 1);
}

Message* SC_nil_StartNil(ArchonPurger* Self, SCFunction* F) {
	if ((!SC_Func_CanNil(F))) {
		return nil;
	}
	JB_SetRef(SC__Func_CurrFunc, F);
	Self->Rows[0] = kSC__NilState_Basic;
	Self->Neel = (&Self->Rows[0]);
	Self->RowEnd = (Self->Neel + 63);
	Self->Realnesses = -1;
	SC__nil_Loops = ((LoopInfo){});
	Self->AnyReturns = false;
	Self->RootReturned = false;
	SC_nil_CheckNilCheck(Self, F);
	{
		Array* _LoopSrcf2 = F->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (D == nil) {
				break;
			}
			SC_nil_DeclareSub(Self, D, D->NilDeclared);
			_if0++;
		};
	}
	;
	SCDecl* R = F->ReturnType;
	if (R) {
		if ((!SC_Decl_NilStated(R))) {
			R->NilDeclared = 0;
		}
	}
	return SC_Func_SourceArg(F);
}

NilState SC_nil__Access(Message* Msg, NilCheckMode Test) {
	return SC_nil__UseChildAsReal(Msg, Test, kSC__NilReason_Accessing);
}

NilState SC_nil__arel(Message* Msg, NilCheckMode Test) {
	NilState Rz = 0;
	Message* Ch = ((Message*)JB_Ring_First(Msg));
	if (Ch) {
		Rz = SC_nil__Jump(Ch, Test);
		byte B = JB_Str_First(Msg->Name);
		if (B == '!') {
			Rz = (Rz & (~kSC__NilState_Nilish));
			Rz = (Rz | kSC__NilState_Realish);
		}
	}
	return Rz;
}

NilState SC_nil__Argument(Message* Msg, NilCheckMode Test) {
	NilState Rz = 0;
	uint V = SC_NRD_DepthOfVars(SC_nil__Value()) + 1;
	{
		Message* S = ((Message*)JB_Ring_First(Msg));
		while (S) {
			NilCheckMode T = Test & (-JB_Tree_IsLast(S));
			if ((SC_NilState_SyntaxIs(Rz, kSC__NilState_Borked)) and (!JB_Rec_OK(JB_StdErr))) {
				break;
			}
			NilState Prev = Rz;
			Rz = SC_nil__Jump(S, T | kSC__khalai_Disappears);
			if (SC_NilState_SyntaxIs(Prev, kSC__NilState_Borked)) {
				JB__Err_AutoPrint = SC__nil_OldPrint;
				if (JB_Rec_OK(JB_StdErr)) {
					JB_Msg_SyntaxExpect(S, JB_LUB[672]);
					return 0;
				}
				JB_Rec_Clear(JB_StdErr);
			}
			if (SC_NilState_SyntaxIs(Rz, kSC__NilState_Killer)) {
				break;
			}
			S = ((Message*)JB_Ring_NextSib(S));
		};
		;
	}
	;
	int64 Allowed = (((uint64)1) << (V << 1)) - ((uint64)1);
	SC_nil_SetAllNil((&SC__nil_T), SC_nil__Value() & Allowed);
	return Rz;
}

NilState SC_nil__BecomeReal(SCDecl* Sent, Message* Where, NilReason Reason, SCDecl* Recv, SCFunction* To) {
	NilState Curr = SC_Decl_NilCurr(Sent);
	if (Curr == kSC__NilState_Realish) {
		return Curr;
	}
	return SC_nil__BecomeRealSub(Sent, Where, Reason, Recv, To, Curr);
}

NilState SC_nil__BecomeRealSub(SCDecl* Sent, Message* Where, NilReason Reason, SCDecl* Recv, SCFunction* To, NilState Curr) {
	if ((Curr == kSC__NilState_Either) and SC_Decl_IsUnknownParam(Sent)) {
		SC_nil_BecomeRealSub((&SC__nil_T), Sent);
		return SC_nil_SetNilness((&SC__nil_T), Sent, kSC__NilState_Real);
	}
	if (((bool)Recv) and (!SC_Decl_TypeSuffers(Recv))) {
		return kSC__NilState_Real;
	}
	return SC_nil__FailedReal(To, Where, Reason, Curr);
}

NilState SC_nil__BooleanLogic(Message* Msg, NilCheckMode Test) {
	Message* AA = ((Message*)JB_Ring_First(Msg));
	Message* BB = ((Message*)JB_Ring_Last(Msg));
	bool IsAnd = SC_khalai_SyntaxIs(Test, kSC__khalai_And);
	Test = (SC_khalai_SyntaxIsSet(Test, kSC__khalai_And, false));
	if (IsAnd == (SC_khalai_SyntaxIs(Test, kSC__khalai_Positive))) {
		NilState NC = SC_nil__Jump(AA, Test);
		NC = (NC | SC_nil__Jump(BB, Test));
		return kSC__NilState_Real | (NC & kSC__NilState_FnBecomesNilCh);
	}
	NilRecord Orig = SC_nil_BranchEnter((&SC__nil_T), AA);
	if ((!Orig)) {
		return 0;
	}
	//"test A+";
	SC_nil__Jump(AA, Test);
	NilRecord First = SC_nil_BranchSwap((&SC__nil_T), Orig);
	//"test A-B+";
	SC_nil__Jump(AA, SC_khalai_Negate(Test));
	SC_nil__Jump(BB, Test);
	return SC_nil_BranchExit((&SC__nil_T), First);
}

NilState SC_nil__Bracket(Message* Msg, NilCheckMode Test) {
	if (JB_Msg_Length(Msg)) {
		Test = (Test | kSC__khalai_Soft);
	}
	return SC_nil__Jump((((Message*)JB_Ring_First(Msg))), Test);
}

NilState SC_nil__Brel(Message* Msg, NilCheckMode Test) {
	byte B = JB_Str_First(Msg->Name);
	if (B == '*') {
		return SC_nil__UseChildAsReal(Msg, Test, kSC__NilReason_Accessing);
	}
	Message* Ch = (((Message*)JB_Ring_First(Msg)));
	if ((B == '-') or (B == '+')) {
		return SC_nil__Jump(Ch, Test);
	}
	if (B == '!') {
		return SC_nil__Not(Ch, Test);
	}
	SC_nil__Jump(Ch, Test);
	return kSC__NilState_Real;
}

NilState SC_nil__Char(Message* Msg, NilCheckMode Test) {
	return SC_nil__RealBool(SC_Str_Isnull(Msg->Name));
}

NilState SC_nil__CompareObjs(Message* Ll, Message* Rr, NilCheckMode Test, SCOperator* Scop) {
	int LNil = SC_Msg_IsNowNil(Ll);
	int RNil = SC_Msg_IsNowNil(Rr);
	if ((!LNil) and (!RNil)) {
		return SC_nil__SuperSmartMagicCompare(Ll, Rr, Test, Scop);
	}
	if (((bool)LNil) and ((bool)RNil)) {
		SCDecl* Lld = SC_Msg_FastDecl(Ll);
		if (Lld->NilAllocDepth >= SC__nil_Loops.NestDepth) {
			return SC_Msg_RedundantVar(Ll, Lld, Test);
		}
		if ((LNil + RNil) != 3) {
			return kSC__NilState_Real;
		}
	}
	 else if (2 == (LNil + RNil)) {
		SC_nil__Jump(Ll, 0);
		SC_nil__Jump(Rr, 0);
		return kSC__NilState_Real;
	}
	if (SC_Opp_SyntaxIs(Scop, kSC__OpMode_NilTest)) {
		Message* Side = ((Message*)JB_Ternary(LNil == 1, Rr, Ll));
		if (SC_khalai_SyntaxIs(Test, kSC__khalai_Active)) {
			Test = (SC_khalai_SyntaxIsSet(Test, kSC__khalai_Reversed, ((bool)SC_Opp_SyntaxIs(Scop, kSC__OpMode_ExactlyEquals))));
			Test = SC_khalai_Activate(Test);
		}
		return SC_nil__Jump(Side, Test);
	}
	if (true) {
		JB_Msg_SyntaxExpect(((Message*)JB_Ring_NextSib(Ll)), JB_LUB[1057]);
	}
	return 0;
}

NilState SC_nil__Continue(Message* Msg, NilCheckMode Test) {
	SC__nil_Loops.ContRecord = (SC__nil_Loops.ContRecord | SC_nil__EndBlock());
	return 0;
}

NilState SC_nil__Debugger(Message* Msg, NilCheckMode Test) {
	return 0;
}

NilState SC_nil__Declaration(Message* Msg, NilCheckMode Test) {
	Message* Rel = ((Message*)JB_Ring_Last(Msg));
	if ((!JB_Msg_EqualsSyx(Rel, JB_SyxThg, false))) {
		SCDecl* D = SC_Msg_FastDecl(((Message*)JB_Ring_First(Rel)));
		NilState J = SC_nil__Jump(((Message*)JB_Ring_Last(Rel)), 0);
		if (SC_Decl_IsReg(D)) {
			return SC_nil_Declare((&SC__nil_T), D, J);
		}
	}
	return 0;
}

NilState SC_nil__DetectStillChecks(Message* First) {
	NilState Rz = 0;
	if ((!First)) {
		return 0;
	}
	Rz = SC_nil__Jump(First, 0);
	if ((!SC__nil_T.FnAbleToNilCheck) or (SC_NilState_SyntaxIs(Rz, kSC__NilState_FnBecomesNilCh))) {
		return Rz;
	}
	MaybeBool F = SC_Msg_Trueness(First, Rz);
	bool SelfNil = SC_NilState_SyntaxIs(SC_nil_Self((&SC__nil_T)), kSC__NilState_Nilish);
	if (JB_MaybeBool_IsFalse(F)) {
		if ((!SelfNil)) {
			SC__nil_T.FnAbleToNilCheck = false;
		}
	}
	 else if (SC_NilState_SyntaxIs(Rz, kSC__NilState_FnBecomesNilCh)) {
		0;
	}
	 else if (SelfNil) {
		SC__nil_T.FnAbleToNilCheck = false;
	}
	return Rz;
}

NilState SC_nil__Dummy(Message* Msg, NilCheckMode Test) {
	debugger;
	return 0;
}

NilState SC_nil__Exit(Message* Msg, NilCheckMode Test) {
	SC__nil_Loops.ExitRecord = (SC__nil_Loops.ExitRecord | SC_nil__EndBlock());
	SC__nil_Loops.HasEscape = true;
	return 0;
}

void SC_nil__ExterminateZergBugs(SCFunction* F) {
	Message* Arg = SC_nil_StartNil((&SC__nil_T), F);
	if (Arg) {
		SC_nil__Argument(Arg, 0);
		if (SC__nil_T.FnAbleToNilCheck and (!F->IsNilChecker)) {
			F->IsNilChecker = 1;
		}
	}
	SC_nil_FinishNil((&SC__nil_T), F);
}

NilState SC_nil__Fail(Message* Msg, NilCheckMode Test) {
	SC__nil_OldPrint = JB__Err_AutoPrint;
	JB__Err_AutoPrint = 0;
	return kSC__NilState_Borked;
}

NilState SC_nil__FailedReal(SCFunction* To, Message* Where, NilReason Reason, NilState State) {
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	JB_StringC* _tmPf0 = JB_Incr(((JB_StringC*)JB_Array_Value(SC__NilReason_values, Reason)));
	JB_FS_AppendString(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_String* Raw = JB_Incr(SC_NilState_RawName(State));
	if ((!SC_Msg_OperatorIsThing(Where, Raw))) {
		JB_FS_AppendByte(Fs, ' ');
		JB_FS_AppendString(Fs, Raw);
	}
	JB_Decr(Raw);
	JB_FS_AppendByte(Fs, ':');
	JB_FS_AppendByte(Fs, ' ');
	JB_FreeIfDead(SC_Msg_OrigRender(Where, Fs));
	if (To) {
		JB_FS_AppendString(Fs, JB_LUB[198]);
		if (JB_Tree_IsFirst(Where) and ((bool)To->Cls)) {
			JB_FS_AppendString(Fs, To->Name);
		}
		 else {
			JB_FreeIfDead(SC_Func_RenderTitle(To, true, Fs));
		}
		if (true) {
			SC_SCObject_Fail(To, kJB_kUsingStr);
		}
	}
	if (true) {
		JB_String* _tmPf1 = JB_Incr(JB_FS_SyntaxCast(Fs));
		JB_Msg_SyntaxExpect(Where, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(Fs);
	return 0;
}

void SC_nil__FixArchons() {
	//using;
	ErrorSeverity _usingf0 = JB_ErrorSeverity_SyntaxUsing(SC__Options_NilStrength);
	JB_ErrorReceiver* Old = JB_StdErr;
	JB_ErrorReceiver* Rec = JB_Rec_Constructor(nil);
	if (true) {
		JB_ErrorReceiver* _usingf1 = JB_Rec_SyntaxUsing(Rec);
		{
			Array* _LoopSrcf4 = SC__Comp_FuncList;
			int _if2 = 0;
			while (true) {
				SCFunction* Xoxo = ((SCFunction*)JB_Array_Value(_LoopSrcf4, _if2));
				if (Xoxo == nil) {
					break;
				}
				int I = _if2;
				SC_nil__ExterminateZergBugs(Xoxo);
				SC_Rec_ReturnErrors(Rec, Old);
				_if2++;
			};
		}
		;
		JB_Rec_SyntaxUsingComplete(_usingf1);
	}
	JB_SetRef(SC__Func_CurrFunc, nil);
	JB_ErrorSeverity_SyntaxUsingComplete(_usingf0);
}

NilState SC_nil__Function(Message* Msg, NilCheckMode Test) {
	NilState Rz = 0;
	Test = (Test & (~kSC__khalai_Disappears));
	Message* Fp = ((Message*)JB_Ring_First(Msg));
	Message* Prms = ((Message*)JB_Ring_NextSib(Fp));
	if (SC_Msg_TmpType(Msg) == kSC__ASMtmp_kTern) {
		return SC_nil__Tern(Prms, Test);
	}
	SCFunction* Fn = ((SCFunction*)Prms->Obj);
	if ((!Fn)) {
		if (Fp->Func != JB_SyxBra) {
			JB_Msg_SyntaxExpect(Prms, kJB__Rec_NonFatal);
			return 0;
		}
		Fn = SC_Msg_GetFunctionPointer(Fp);
		if ((!(((bool)Fn) and ((bool)SC_nil__UseChildAsReal(Fp, 0, kSC__NilReason_Accessing))))) {
			return 0;
		}
	}
	if ((!((Fn != SC__Func_CurrFunc) or (SC__nil_T.AnyReturns or (SC_nil_NestDepth((&SC__nil_T)) > 0))))) {
		JB_Msg_SyntaxExpect(Msg, JB_LUB[1168]);
		return 0;
	}
	if ((SC_khalai_SyntaxIs(Test, kSC__khalai_Active)) and ((bool)Fn->IsNilChecker)) {
		if (Fn->IsNilChecker != 3) {
			Test = (Test | kSC__khalai_Soft);
		}
		if (SC__nil_T.FnAbleToNilCheck) {
			Rz = kSC__NilState_FnBecomesNilCh;
		}
	}
	 else {
		Test = 0;
	}
	Message* P = ((Message*)JB_Ring_First(Prms));
	bool HasAddrs = false;
	{
		Array* _LoopSrcf2 = Fn->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* Recv = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Recv == nil) {
				break;
			}
			if ((SC_NilState_SyntaxIs(Recv->NilDeclared, kSC__NilState_Optional)) and (Fn->IsNilChecker != 3)) {
				Test = (Test | kSC__khalai_Soft);
			}
			if ((!P)) {
				JB_Msg_SyntaxExpect(Msg, JB_LUB[774]);
				return 0;
			}
			NilState V = SC_nil__Jump(P, Test);
			if (((bool)Rz) and ((!(SC_NilState_SyntaxIs(V, kSC__NilState_FnBecomesNilCh))) and JB_Tree_IsFirst(P))) {
				Rz = 0;
			}
			SCDecl* Sent = SC_Msg_FastDecl(P);
			if ((!(HasAddrs))) {
				HasAddrs = ((bool)SC_Decl_CanUpgradeInternalPointer(Sent));
			}
			if (SC_NilState_SyntaxIs(V, kSC__NilState_Nilish)) {
				SC_nil__NilParamPass(Recv, Sent, P, Fn, V);
			}
			Test = 0;
			P = ((Message*)JB_Ring_NextSib(P));
			_if0++;
		};
	}
	;
	if (HasAddrs) {
		P = ((Message*)JB_Ring_First(Prms));
		{
			Array* _LoopSrcf5 = Fn->Args;
			int _if3 = 0;
			while (true) {
				SCDecl* Recv = ((SCDecl*)JB_Array_Value(_LoopSrcf5, _if3));
				if (Recv == nil) {
					break;
				}
				SCDecl* Infernal = SC_Decl_CanUpgradeInternalPointer(SC_Msg_FastDecl(P));
				if (Infernal) {
					SCDecl* Ri = Recv->Internal;
					SC_nil__VariableSet(Infernal, Recv->Source, Ri, P, SC_Decl_NilCurr(Ri));
				}
				P = ((Message*)JB_Ring_NextSib(P));
				_if3++;
			};
		};
	}
	if (Fn->IsKiller) {
		SC_nil__DeclKill();
		if ((SC_nil_NestDepth((&SC__nil_T)) == 0) and (!SC__nil_T.AnyReturns)) {
			SC__Func_CurrFunc->IsKiller = true;
		}
		return kSC__NilState_Killer;
	}
	SCDecl* Ret = Fn->ReturnType;
	if (Ret) {
		Rz = (Rz | Ret->NilDeclared);
		if ((!((SC_NilState_SyntaxIs(Rz, kSC__NilState_Stated)) or (!SC_Decl_TypeSuffers(Ret))))) {
			JB_Msg_SyntaxExpect(Msg, JB_Str_OperatorPlus(JB_LUB[1060], SC_Func_RenderName(Fn, nil)));
		}
	}
	return Rz;
}

NilState SC_nil__If(Message* Msg, NilCheckMode Test) {
	Message* Cond = ((Message*)JB_Ring_First(Msg));
	Message* Arg1 = ((Message*)JB_Ring_NextSib(Cond));
	Message* Else = ((Message*)JB_Ring_NextSib(Arg1));
	Message* Arg2 = ((Message*)JB_Ring_First(Else));
	MaybeBool Always = SC_Msg_IsAlwaysBool(Cond);
	if (JB_MaybeBool_IsTrue(Always)) {
		return SC_nil__Argument(Arg1, 0);
	}
	if (JB_MaybeBool_IsFalse(Always)) {
		return SC_nil__Argument(Arg2, 0);
	}
	if (SC__nil_NilTrapper) {
		debugger;
	}
	NilRecord Orig = SC_nil_BranchEnter((&SC__nil_T), Msg);
	if ((!Orig)) {
		return 0;
	}
	//"First Branch";
	SC_nil__Jump(Cond, kSC__khalai_Positive);
	SC_nil__Argument(Arg1, 0);
	NilRecord First = SC_nil_BranchSwap((&SC__nil_T), Orig);
	//"Second Branch";
	SC_nil__Jump(Cond, kSC__khalai_Negative);
	if (JB_Ring_HasChildren(Arg2)) {
		if (JB_Tree_IsLast(Arg2)) {
			SC_nil__Argument(Arg2, 0);
		}
		 else {
			SC_nil__If(Else, 0);
		}
	}
	return SC_nil_BranchExit((&SC__nil_T), First);
}

NilState SC_nil__Ignore(Message* Msg, NilCheckMode Test) {
	return 0;
}

int SC_nil__Init_() {
	{
		SC__nil_Loops = ((LoopInfo){});
		SC__nil_T = ((ArchonPurger){});
		SC__nil_OldPrint = 0;
		SC__nil_NilTrapper = 0;
		SC__nil_NilSyxes[10] = (&SC_nil__Thing);
		SC__nil_NilSyxes[31] = (&SC_nil__Bracket);
		SC__nil_NilSyxes[3] = (&SC_nil__Type);
		SC__nil_NilSyxes[25] = (&SC_nil__Function);
		SC__nil_NilSyxes[5] = (&SC_nil__StatementJump);
		SC__nil_NilSyxes[23] = (&SC_nil__Property);
		SC__nil_NilSyxes[29] = (&SC_nil__Access);
		SC__nil_NilSyxes[30] = (&SC_nil__Item);
		SC__nil_NilSyxes[26] = (&SC_nil__Brel);
		SC__nil_NilSyxes[21] = (&SC_nil__arel);
		SC__nil_NilSyxes[37] = (&SC_nil__Rel);
		SC__nil_NilSyxes[32] = (&SC_nil__List);
		SC__nil_NilSyxes[4] = (&SC_nil__Declaration);
		SC__nil_NilSyxes[1] = (&SC_nil__Argument);
		SC__nil_NilSyxes[11] = (&SC_nil__Ignore);
		SC__nil_NilSyxes[15] = (&SC_nil__String);
		SC__nil_NilSyxes[19] = (&SC_nil__String);
		SC__nil_NilSyxes[14] = (&SC_nil__Number);
		SC__nil_NilSyxes[17] = (&SC_nil__Char);
		SC__nil_NilSyxes[63] = (&SC_NilSyxes_63);
		//;
		SC__nil_NilTmps[(kSC__ASMtmp_kIf)] = (&SC_nil__If);
		SC__nil_NilTmps[(kSC__ASMtmp_kWhile)] = (&SC_nil__While);
		SC__nil_NilTmps[(kSC__ASMtmp_kContinue)] = (&SC_nil__Continue);
		SC__nil_NilTmps[(kSC__ASMtmp_kExit)] = (&SC_nil__Exit);
		SC__nil_NilTmps[(kSC__ASMtmp_kReturn)] = (&SC_nil__Return);
		SC__nil_NilTmps[(kSC__ASMtmp_kDebugger)] = (&SC_nil__Debugger);
		SC__nil_NilTmps[(kSC__ASMtmp_kFail)] = (&SC_nil__Fail);
		SC__nil_NilTmps[(kSC__ASMtmp_kRejoin)] = (&SC_nil__Rejoin);
		SC__nil_NilTmps[63] = (&SC_NilTmps_63);
		//;
	}
	;
	return 0;
}

int SC_nil__InitCode_() {
	{
	}
	;
	SC_nil__TrackerDummies();
	return 0;
}

NilState SC_nil__Item(Message* Msg, NilCheckMode Test) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(Msg)));
	NilState _tmPf1 = SC_nil__Jump(_tmPf0, Test);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

NilState SC_nil__List(Message* Msg, NilCheckMode Test) {
	{
		Message* S = ((Message*)JB_Ring_First(Msg));
		while (S) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(S));
			SC_nil__Jump(S, 0);
			S = _Nf1;
		};
		;
	}
	;
	return kSC__NilState_Real;
}

void ndb4() {
	//visible;
	ndb5(((*SC__nil_T.Neel)));
}

void SC_nil__NilParamPass(SCDecl* Recv, SCDecl* Sent, Message* Where, SCFunction* F, NilState V) {
	if (SC_Decl_StatedReal(Recv)) {
		SC_nil__BecomeRealSub(Sent, Where, kSC__NilReason_Passing, Recv, F, V);
	}
	 else if ((!SC_Decl_NilStated(Recv)) and (F != SC__Func_CurrFunc)) {
		SC_Decl_NilPrmFail(Recv, Where, F);
	}
}

NilState SC_nil__Not(Message* Msg, NilCheckMode Test) {
	Test = SC_khalai_Activate((Test | kSC__khalai_Reversed));
	NilState A = SC_nil__Jump(Msg, Test);
	return A & (~kSC__NilState_FnBecomesNilCh);
}

NilState SC_nil__Number(Message* Msg, NilCheckMode Test) {
	return SC_nil__RealBool(SC_Str_IsZero(Msg->Name));
}

NilState SC_nil__ProcessCondRel(Message* Msg, NilCheckMode Test) {
	Message* Ll = ((Message*)JB_Ring_First(Msg));
	Message* Op = ((Message*)JB_Ring_NextSib(Ll));
	SCOperator* Scop = ((SCOperator*)Op->Obj);
	Message* Rr = ((Message*)JB_Ring_NextSib(Op));
	if (SC_Opp_SyntaxIs(Scop, kSC__OpMode_Compare)) {
		return SC_nil__CompareObjs(Ll, Rr, Test, Scop);
	}
	OpMode AndOr = SC_Opp_SyntaxIs(Scop, kSC__OpMode_AndOr);
	if (AndOr) {
		Test = (SC_khalai_SyntaxIsSet(Test, kSC__khalai_And, (AndOr == kSC__OpMode_AND)));
		return SC_nil__BooleanLogic(Msg, SC_khalai_Activate(Test));
	}
	NilState L = SC_nil__Jump(Ll, 0) & kSC__NilState_Either;
	NilState R = SC_nil__Jump(Rr, 0) & kSC__NilState_Either;
	SCDecl* D = SC_Msg_FastDecl(Msg);
	if ((!SC_Decl_TypeSuffers(D))) {
		return kSC__NilState_Real;
	}
	if ((kSC__NilState_Nilish == L) or (kSC__NilState_Nilish == R)) {
		return kSC__NilState_Nilish;
	}
	return L | R;
}

NilState SC_nil__Property(Message* Msg, NilCheckMode Test) {
	return SC_nil__UseChildAsReal(Msg, Test, kSC__NilReason_Property);
}

NilState SC_nil__PropertyToFunc(Message* Dot, SCFunction* Fn) {
	Dot->Func = JB_SyxFunc;
	Message* Upon = ((Message*)JB_Ring_First(Dot));
	Message* Prms = ((Message*)JB_Ring_Last(Dot));
	JB_SetRef(Prms->Obj, Fn);
	Prms->Func = JB_SyxPrm;
	(JB_Ring_FirstSet(Prms, Upon));
	JB_Mem_Use(JB_ObjLayer(Dot));
	(JB_Ring_FirstSet(Dot, JB_Msg_ConstructorRange(nil, nil, JB_SyxThg, Dot->Position, Fn->ExportName, 0)));
	return kSC__NilState_Real;
}

NilState SC_nil__RealBool(bool B) {
	NilState Rz = 0;
	Rz = kSC__NilState_Real;
	Rz = (Rz | (kSC__NilState_TrueValue >> B));
	return Rz;
}

NilState SC_nil__Rejoin(Message* Msg, NilCheckMode Test) {
	return SC_nil__Jump(((Message*)JB_Ring_First(Msg)), Test);
}

NilState SC_nil__Rel(Message* Msg, NilCheckMode Test) {
	if (SC_ASMtmp_SyntaxIs(SC_Msg_TmpType(Msg), kSC__ASMtmp_kSetVar)) {
		return SC_nil__SetRel(Msg, Test);
	}
	return SC_nil__ProcessCondRel(Msg, Test);
}

NilState SC_nil__Return(Message* Msg, NilCheckMode Test) {
	NilState V = SC_nil__DetectStillChecks(((Message*)JB_Ring_First(Msg)));
	SC__nil_Loops.ExitRecord = (SC__nil_Loops.ExitRecord | kSC__NilState_Basic);
	SC_nil__DeclKill();
	SC__nil_T.AnyReturns = true;
	SCDecl* Ret = SC__nil_T.Return;
	if (((bool)Ret) and SC_Decl_TypeSuffers(Ret)) {
		if (SC_Decl_StatedReal(Ret)) {
			if ((!(!SC_NilState_SyntaxIs(V, kSC__NilState_Nilish)))) {
				JB_Msg_SyntaxExpect(Msg, JB_Str_OperatorPlus(JB_LUB[815], SC_NilState_RawName(V)));
				return 0;
			}
		}
		Ret->NilDeclared = (Ret->NilDeclared | (V & kSC__NilState_Either));
	}
	return 0;
}

NilState SC_nil__SetRel(Message* Msg, NilCheckMode Test) {
	Message* R = ((Message*)JB_Ring_Last(Msg));
	Message* L = ((Message*)JB_Ring_First(Msg));
	SCDecl* LD = SC_Msg_FastDecl(L);
	Test = ((kSC__khalai_Soft) * ((!SC_Decl_SyntaxIs(LD, kSC__SCDeclInfo_Local)) and (LD->NilDeclared == kSC__NilState_Optional)));
	NilState RN = SC_nil__Jump(R, Test);
	SC_nil__Jump(L, 0);
	return SC_nil__VariableSet(LD, L, SC_Msg_FastDecl(R), R, RN);
}

NilState SC_nil__StatementJump(Message* Msg, NilCheckMode Test) {
	return (SC__nil_NilTmps[SC_Msg_TmpType(Msg)])(Msg, 0);
}

NilState SC_nil__String(Message* Msg, NilCheckMode Test) {
	SC_Crkt__CollectString(Msg, SC_Base_IsSTDLib(SC__Func_CurrFunc));
	return SC_nil__RealBool((!JB_Msg_Length(Msg)));
}

NilState SC_nil__SuperSmartMagicCompare(Message* Ll, Message* Rr, NilCheckMode Test, SCOperator* Scop) {
	int Todo = 3;
	if ((Ll->Func == JB_SyxThg) and ((Rr->Func == JB_SyxThg) and SC_khalai_SyntaxIs(Test, kSC__khalai_Active))) {
		if (((bool)SC_Opp_SyntaxIs(Scop, kSC__OpMode_EqualOrNot)) and ((SC_khalai_SyntaxIs(Test, kSC__khalai_Positive)) == ((bool)(SC_Opp_SyntaxIs(Scop, kSC__OpMode_ExactlyEquals))))) {
			SCDecl* Ld = ((SCDecl*)Ll->Obj);
			SCDecl* Rd = ((SCDecl*)Rr->Obj);
			bool Ldl = SC_Decl_SyntaxIs(Ld, kSC__SCDeclInfo_Local);
			bool Rdl = SC_Decl_SyntaxIs(Rd, kSC__SCDeclInfo_Local);
			if (Ldl or Rdl) {
				if (Rdl and (SC_Decl_NilCurr(Ld) == kSC__NilState_Realish)) {
					SC_nil_SetNilness((&SC__nil_T), Rd, kSC__NilState_Real);
					Todo = (Todo & (~2));
				}
				if (Ldl and (SC_Decl_NilCurr(Rd) == kSC__NilState_Realish)) {
					SC_nil_SetNilness((&SC__nil_T), Ld, kSC__NilState_Real);
					Todo = (Todo & (~1));
				}
			}
		}
	}
	if (((bool)(Todo & 1))) {
		SC_nil__Jump(Ll, kSC__khalai_Soft);
	}
	if (((bool)(Todo & 2))) {
		SC_nil__Jump(Rr, kSC__khalai_Soft);
	}
	return kSC__NilState_Real;
}

NilState SC_nil__Tern(Message* Msg, NilCheckMode Test) {
	NilState Rz = 0;
	NilRecord Orig = SC_nil_BranchEnter((&SC__nil_T), Msg);
	if ((!Orig)) {
		return 0;
	}
	Message* tC = ((Message*)JB_Ring_First(Msg));
	Message* tA = ((Message*)JB_Ring_NextSib(tC));
	Message* tB = ((Message*)JB_Ring_NextSib(tA));
	//"First Branch";
	SC_nil__Jump(tC, kSC__khalai_Positive);
	Rz = SC_nil__Jump(tA, Test);
	NilRecord First = SC_nil_BranchSwap((&SC__nil_T), Orig);
	//"Second Branch";
	SC_nil__Jump(tC, kSC__khalai_Negative);
	Rz = (Rz | SC_nil__Jump(tB, Test));
	SC_nil_BranchExit((&SC__nil_T), First);
	Rz = (Rz & (~kSC__NilState_FnBecomesNilCh));
	return Rz;
}

NilState SC_nil__Thing(Message* Msg, NilCheckMode Test) {
	NilState Rz = 0;
	SCDecl* Dcl = SC_Msg_FastDecl(Msg);
	Rz = SC_nil__ThingSub(Msg, Test, Dcl);
	Msg->Indent = Rz;
	if (SC__nil_T.FnAbleToNilCheck and SC_Decl_SyntaxIs(Dcl, kSC__SCDeclInfo_Self)) {
		Rz = (Rz | kSC__NilState_FnBecomesNilCh);
	}
	return Rz;
}

NilState SC_nil__ThingSub(Message* Msg, NilCheckMode Test, SCDecl* Dcl) {
	if ((!Dcl->NilReg)) {
		return Dcl->NilDeclared;
	}
	NilState Y = SC_Decl_NilCurr(Dcl);
	bool Unknown = SC_Decl_IsUnknownParam(Dcl);
	if (Unknown and ((!SC_khalai_SyntaxIs(Test, kSC__khalai_Soft)) and (!SC_khalai_SyntaxIs(Test, kSC__khalai_Disappears)))) {
		if (!(SC_khalai_SyntaxIs(Test, kSC__khalai_Active))) {
			return SC_nil__BecomeReal(Dcl, Msg, kSC__NilReason_Reading, nil, nil);
		}
		Dcl->NilDeclared = kSC__NilState_Optional;
	}
	if ((!SC_khalai_SyntaxIs(Test, kSC__khalai_Active)) or (SC_khalai_SyntaxIs(Test, kSC__khalai_Soft) and SC_khalai_SyntaxIs(Test, kSC__khalai_Negative))) {
		return Y;
	}
	if (Unknown or (Y != Test)) {
		return SC_nil_SetNilness((&SC__nil_T), Dcl, Test);
	}
	return SC_Msg_RedundantVar(Msg, Dcl, Test);
}

void SC_nil__TrackerDummies() {
	{
		int I = 0;
		while (I < 64) {
			if ((!(SC__nil_NilSyxes[I]))) {
				SC__nil_NilSyxes[I] = SC_nil__Dummy;
			}
			if ((!(SC__nil_NilTmps[I]))) {
				SC__nil_NilTmps[I] = SC_nil__Dummy;
			}
			I++;
		};
	};
}

NilState SC_nil__Type(Message* Msg, NilCheckMode Test) {
	Message* F = ((Message*)JB_Ring_First(Msg));
	NilState Ns = SC_nil__Jump(F, Test) & (~kSC__NilState_FnBecomesNilCh);
	SCDecl* D = SC_Msg_FastDecl(Msg);
	if ((!SC_Decl_TypeSuffers(D))) {
		return kSC__NilState_Real;
	}
	SCDecl* Fd = SC_Msg_FastDecl(F);
	if (SC_Decl_TypeSuffers(Fd)) {
		return Ns;
	}
	return D->NilDeclared;
}

NilState SC_nil__UseChildAsReal(Message* Msg, NilCheckMode Test, NilReason Reason) {
	SCDecl* Dcl = SC_Msg_FastDecl(Msg);
	if (SC_Decl_SyntaxIs(Dcl, kSC__SCDeclInfo_Global)) {
		return Dcl->NilDeclared;
	}
	Message* Ch = ((Message*)JB_Ring_First(Msg));
	if (Ch) {
		NilState Actual = SC_nil__Jump(Ch, 0);
		if (SC_NilState_SyntaxIs(Actual, kSC__NilState_Nilish)) {
			SCFunction* Ddd = Dcl->HiderFunc;
			if (((bool)Ddd) and ((SC_NilReason_SyntaxIs(Reason, kSC__NilReason_Property)) and (!Ddd->IsAssigns))) {
				return SC_nil__PropertyToFunc(Msg, Ddd);
			}
			SC_nil__BecomeReal(SC_Msg_FastDecl(Ch), Ch, Reason, nil, nil);
		}
		NilState Nd = Dcl->NilDeclared;
		if ((!SC_khalai_SyntaxIs(Test, kSC__khalai_Active)) or SC_khalai_SyntaxIs(Test, kSC__khalai_Soft)) {
			return Nd;
		}
		if (((bool)SC_NilState_StatedReal(Nd)) and SC_Decl_TypeSuffers(Dcl)) {
			return SC_Msg_RedundantDeclare(Msg, Nd);
		}
		return Nd;
	}
	debugger;
	return 0;
}

NilState SC_nil__VariableSet(SCDecl* Recv, Message* RecvMsg, SCDecl* Sent, Message* SentMsg, NilState SentState) {
	if ((!SC_Decl_TypeSuffers(Recv))) {
		return kSC__NilState_Real;
	}
	if (SC_Decl_IsUnknownParam(Recv)) {
		JB_Msg_SyntaxExpect(RecvMsg, SC_Decl_PrmStateMsg(Recv, JB_LUB[1052], nil));
		return 0;
	}
	if (((bool)SC_Decl_StatedReal(Recv)) and (!SC_Decl_SyntaxIs(Recv, kSC__SCDeclInfo_Local))) {
		if (!(SC_NilState_SyntaxIs(SentState, kSC__NilState_Nilish))) {
			return SentState;
		}
		if (SC_NilState_SyntaxIs(SentState, kSC__NilState_Realish)) {
			return SC_nil__BecomeReal(Sent, SentMsg, kSC__NilReason_Using, nil, nil);
		}
		if ((SC_Decl_SyntaxIs(Recv, kSC__SCDeclInfo_Property)) and (RecvMsg->Func == JB_SyxDot)) {
			if ((SC_Func_SyntaxIs(SC__Func_CurrFunc, kSC__FunctionType_Constructor)) and (SC_Decl_SyntaxIs(SC_Msg_FastDecl(((Message*)JB_Ring_First(RecvMsg))), kSC__SCDeclInfo_Self))) {
				if (true) {
					JB_Msg_SyntaxExpect(RecvMsg, JB_Str_OperatorPlus(JB_LUB[1145], Recv->Name));
				}
				return kSC__NilState_Real;
			}
		}
		if (true) {
			JB_Msg_SyntaxExpect(RecvMsg, JB_Str_OperatorPlus(JB_LUB[1058], SC_Msg_OrigRender(RecvMsg, nil)));
		}
		return kSC__NilState_Real;
	}
	if (Recv->NilReg) {
		return SC_nil_SetNilness((&SC__nil_T), Recv, SentState);
	}
	return 0;
}

NilState SC_nil__While(Message* Msg, NilCheckMode Test) {
	Message* Cond = ((Message*)JB_Ring_First(Msg));
	MaybeBool CondTest = SC_Msg_IsAlwaysBool(Cond);
	if ((!((!JB_MaybeBool_IsFalse(CondTest)) and ((bool)SC_nil_BranchEnter((&SC__nil_T), Msg))))) {
		return 0;
	}
	LoopInfo W = SC_LoopInfo_BeginLoop((&SC__nil_Loops), (!JB_MaybeBool_IsTrue(CondTest)));
	SC_nil__WhileInner(Cond);
	if ((!JB_MaybeBool_IsTrue(CondTest))) {
		SC_nil__Jump(Cond, kSC__khalai_WhileNeg);
		SC__nil_Loops.ExitRecord = (SC__nil_Loops.ExitRecord | SC_nil__Value());
	}
	SC_LoopInfo_FinishLoop((&SC__nil_Loops), Msg);
	SC__nil_Loops = W;
	return SC_nil_BranchExit((&SC__nil_T), 0);
}

void SC_nil__WhileInner(Message* Cond) {
	{
		int I = 0;
		while (I < 3) {
			SC_nil__Jump(Cond, kSC__khalai_WhilePos);
			SC_nil__Argument(((Message*)JB_Ring_NextSib(Cond)), 0);
			SC_LoopInfo_NextLoop((&SC__nil_Loops));
			I++;
		};
	};
}


void SC_ArgArrayCounter_Check(ArgArrayCounter* Self, Message* Exp) {
	if (Self->IsItem and Self->IsNotItem) {
		if (true) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[1025]);
		}
	}
}

Message* SC_ArgArrayCounter_Do(ArgArrayCounter* Self, JB_String* Name, Message* Item, SCNode* Name_space) {
	Message* Acc = (JB_Syx_Msg(JB_SyxAcc, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Acc, (JB_Syx_Msg(JB_SyxThg, Name)));
	Message* Arr = JB_Msg_Msg(Acc, JB_SyxArr, JB_LUB[0]);
	Message* Value = Item;
	if (JB_Msg_EqualsSyx(Value, JB_SyxItem, false)) {
		Self->IsItem = true;
		Message* Key = JB_Msg_NeedSyx(Item, JB_SyxNil);
		if (Key) {
			int64 V = 0;
			bool _tmPf0 = SC_Msg_ConstIntValue(Key, Name_space, (&V));
			if ((!_tmPf0)) {
				JB_Msg_SyntaxExpect(Item, JB_LUB[711]);
			}
			if (_tmPf0) {
				Self->max = JB_int_OperatorMax(Self->max, V);
			}
			JB_Tree_SyntaxAppend(Arr, Key);
			Value = ((Message*)JB_Ring_First(Item));
		}
	}
	 else {
		Self->IsNotItem = true;
		JB_Msg_AppendNum(Arr, (Self->i)++);
		Self->max = Self->i;
	}
	return SC_NewEqRelWithMsgMsg(Acc, Value);
}




JB_MemoryLayer* JB_ClassData_CreateUseLayer(JB_Class* Self, JB_Object* Obj, JB_Object* Obj2) {
	JB_MemoryLayer* Rz = nil;
	JB_SetRef(Rz, JB_Mem_CreateLayer(Self, Obj));
	JB_Mem_Use(Rz);
	JB_SetRef(Rz->Obj2, Obj2);
	JB_SafeDecr(Rz);
	return Rz;
}

void JB_ClassData_Restore(JB_Class* Self) {
	JB_MemoryLayer* _tmPf0 = JB_Incr(JB_Class_DefaultLayer(Self));
	JB_Mem_Use(_tmPf0);
	JB_Decr(_tmPf0);
}


void JB_MzSt_Clear(CompressionStats* Self) {
	Self->Duration = nil;
	Self->In = nil;
	Self->Out = nil;
}

float JB_MzSt_Durr(CompressionStats* Self) {
	Date D = Self->Duration;
	if (D < 0) {
		D = (D + JB_Date__New0());
	}
	return JB_Date_Seconds(D);
}

void JB_MzSt_End(CompressionStats* Self) {
	Self->Duration = (Self->Duration + JB_Date__New0());
}

void JB_MzSt_LiveUpdate(CompressionStats* Self, int Inn, int Outt) {
	Self->In = (Self->In + Inn);
	Self->Out = (Self->Out + Outt);
	if (Self->Live) {
		JB_MzSt_Print(Self);
	}
}

void JB_MzSt_Print(CompressionStats* Self) {
	JB_String* _tmPf0 = JB_Incr(JB_MzSt_Render(Self, nil));
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
}

JB_String* JB_MzSt_Render(CompressionStats* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_RenderSpeed(Fs, JB_MzSt_Durr(Self), Self->In, Self->Out, JB_LUB[0]);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_MzSt_Start(CompressionStats* Self) {
	Self->Duration = (Self->Duration - JB_Date__New0());
}

int JB_MzSt__Init_() {
	{
		JB__MzSt_All = ((CompressionStats){});
	}
	;
	return 0;
}

int JB_MzSt__InitCode_() {
	return 0;
}



bool JB_FastBuff_Alloc(FastBuff* Self, int N) {
	byte* Mem = JB_Mrap__Zalloc(N);
	if ((!Mem)) {
		return nil;
	}
	Self->Start = Mem;
	Self->Curr = Mem;
	Self->End = (Mem + N);
	JB_SetRef(Self->ReadFrom, nil);
	return ((bool)Self->Start);
}

byte JB_FastBuff_Byte(FastBuff* Self) {
	return (*Self->Curr++);
}

byte* JB_FastBuff_Clip(FastBuff* Self, int V, int Reduce) {
	if (V <= 0) {
		return Self->Start;
	}
	V = JB_int_OperatorMin(V, (JB_FastBuff_Size(Self) - Reduce));
	return Self->Start + V;
}

uint JB_FastBuff_CopyTo(FastBuff* Self, byte* Dest, int Length) {
	uint Rz = 0;
	byte* A = Self->Curr;
	if ((!((A < Self->End) and (Length > 0)))) {
		return 0;
	}
	byte* B = A + Length;
	if (B > Self->End) {
		B = Self->End;
	}
	Rz = (B - A);
	Self->Curr = B;
	memcpy(Dest, A, Rz);
	return Rz;
}

void JB_FastBuff_Destructor(FastBuff* Self) {
	//visible;
	JB_Clear(Self->ReadFrom);
}

bool JB_FastBuff_Has(FastBuff* Self, int N) {
	return (Self->End - Self->Curr) >= N;
}

bool JB_FastBuff_HasAny(FastBuff* Self) {
	return Self->End > Self->Curr;
}

int JB_FastBuff_Length(FastBuff* Self) {
	if (Self) {
		return Self->Curr - Self->Start;
	}
	return 0;
}

bool JB_FastBuff_NeedAlloc(FastBuff* Self, int N) {
	if (JB_FastBuff_Alloc(Self, N)) {
		return true;
	}
	if (true) {
		JB_Str_SyntaxExpect(JB_LUB[693]);
	}
	return false;
}

int64 JB_FastBuff_Position(FastBuff* Self) {
	return Self->Curr - Self->Start;
}

void JB_FastBuff_PositionSet(FastBuff* Self, int64 Value) {
	byte* C = Self->Start + Value;
	if ((C < Self->Start) or (C > Self->End)) {
		if (true) {
			JB_FastBuff_SyntaxExpect(Self, JB_LUB[1235]);
		}
		C = Self->End;
	}
	Self->Curr = C;
}

void JB_FastBuff_ReadFromSet(FastBuff* Self, JB_String* Value) {
	JB_SetRef(Self->ReadFrom, Value);
	Self->Start = Value->Addr;
	Self->End = (Self->Start + JB_Str_Length(Value));
	Self->Curr = Self->Start;
}

int64 JB_FastBuff_Remaining(FastBuff* Self) {
	return Self->End - Self->Curr;
}

int JB_FastBuff_Size(FastBuff* Self) {
	if (Self) {
		return Self->End - Self->Start;
	}
	return 0;
}

JB_String* JB_FastBuff_AccessStr(FastBuff* Self, int Pos, int After) {
	JB_String* R = Self->ReadFrom;
	if (R != nil) {
		return JB_Str_Range(R, Pos, After);
	}
	byte* A = JB_FastBuff_Clip(Self, Pos, 1);
	byte* B = JB_FastBuff_Clip(Self, After, 0);
	if (B >= A) {
		return JB_Str_CopyFromPtr(A, B - A);
	}
	return JB_LUB[0];
}

void JB_FastBuff_SyntaxExpect(FastBuff* Self, JB_String* S) {
	if ((!Self->ErrorReported)) {
		if (true) {
			JB_Str_SyntaxExpect(S);
		}
	}
	Self->ErrorReported++;
}

JB_String* JB_FastBuff_TmpStr(FastBuff* Self) {
	return JB_StrFromPtr(Self->Start, JB_FastBuff_Length(Self), nil, nil);
}




void SC_IR_AddRegParam(IR* Self, Message* Src, uint Write) {
	uint Num = SC_Msg_RegOrNum(Src, false);
	if (Write < 4) {
		Self->r[Write] = Num;
		if (Self->r[Write] != Num) {
			JB_Msg_SyntaxExpect(Src, JB_LUB[1099]);
		}
	}
	 else if (Write == 4) {
		Self->Rest = Num;
	}
	 else {
		debugger;
	}
}

Ind SC_IR_BytePos(IR* Self) {
	return Self->Debug & JB_int_Bits(kSC__IR_MsgDebugPosShift);
}

void SC_IR_DebugSet(IR* Self, Message* Value) {
	Ind FilePos = Value->Position & JB_int_Bits(kSC__IR_MsgDebugPosShift);
	Self->Debug = (SC__IR_CurrFileNum | FilePos);
}

ASM SC_IR_Encode(IR* Self) {
	return (SC__ASM_Encoders[Self->Op])(Self);
}

JB_String* SC_IR_File(IR* Self) {
	JB_String* S = JB_Incr(((JB_String*)JB_Array_Value(SC__IR_Resources, SC_IR_FilePos(Self))));
	if (JB_Str_Exists(S)) {
		JB_SafeDecr(S);
		return S;
	}
	JB_Decr(S);
	return JB_LUB[0];
}

int SC_IR_FilePos(IR* Self) {
	return Self->Debug >> kSC__IR_MsgDebugPosShift;
}

void SC_IR_FS(IR* Self, FastString* Fs) {
	Instruction* Op = SC__Instruction_TypeList[Self->Op];
	if ((!Op)) {
		debugger;
		return;
	}
	JB_FS_AppendString(Fs, Op->Name);
	JB_FS_AppendByte(Fs, ':');
	JB_FS_AppendMultiByte(Fs, ' ', 5 - JB_Str_Length(Op->Name));
	JB_String* GotAny = JB_LUB[0];
	int Remain = 25;
	xC2xB5Form* F = Op->Sizes;
	{
		int I = 0;
		while (I < 5) {
			uint Bs = SC_xC2xB5Param_BitSize(SC_xC2xB5Form_AccessInt(F, I));
			if ((Remain > 0) and (Remain > Bs)) {
				JB_FS_AppendString(Fs, GotAny);
				GotAny = JB_LUB[302];
				if (SC_xC2xB5Param_IsReg(SC_xC2xB5Form_AccessInt(F, I))) {
					JB_FS_AppendByte(Fs, 'r');
				}
				if (I >= 4) {
					JB_FS_AppendInt32(Fs, Self->Rest);
				}
				 else {
					JB_FS_AppendByte(Fs, Self->r[I]);
				}
				Remain = (Remain + Bs);
			}
			I++;
		};
	};
}

bool SC_IR_OperatorIsa(IR* Self, int M) {
	return M == Self->Op;
}

void SC_IR_Print(IR* Self) {
	//visible;
	if (SC__ASM_NoisyASM >= 3) {
		JB_String* _tmPf0 = JB_Incr(SC_IR_Render(Self, nil));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
}

JB_String* SC_IR_Render(IR* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	SC_IR_FS(Self, Fs);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_IR_SyntaxExpect(IR* Self, JB_String* Error) {
	JB_String* _tmPf0 = JB_Incr(SC_IR_File(Self));
	JB_Error* Err = JB_Incr(JB_Err_Constructor(nil, nil, Error, kJB__ErrorSeverity_Error, _tmPf0));
	JB_Decr(_tmPf0);
	Err->Position = SC_IR_BytePos(Self);
	JB_Rec_AppendErr(JB_StdErr, Err);
	JB_Decr(Err);
}

int SC_IR__Init_() {
	{
		JB_SetRef(SC__IR_Resources, JB_Array_Constructor0(nil));
		SC__IR_CurrFileNum = 0;
	}
	;
	return 0;
}

int SC_IR__InitCode_() {
	return 0;
}



int SC_IsaTester__Init_() {
	{
		SC__IsaTester_T = ((IsaTester){});
	}
	;
	return 0;
}

int SC_IsaTester__InitCode_() {
	return 0;
}

void SC_IsaTester__SyntaxAppend(Message* O) {
	if (SC__IsaTester_T.Count < 4) {
		SC__IsaTester_T.Items[SC__IsaTester_T.Count++] = O;
	}
}


LoopInfo SC_LoopInfo_BeginLoop(LoopInfo* Self, bool HasExitCond) {
	LoopInfo Rz = ((LoopInfo){});
	Rz = (*Self);
	NilRecord V = SC_nil__Value();
	Self->ExitRecord = (((NilRecord)HasExitCond) * V);
	Self->HasEscape = HasExitCond;
	Self->ContRecord = V;
	Self->VarCount = SC_NRD_DepthOfVars(V);
	Self->NestDepth = SC_nil_NestDepth((&SC__nil_T));
	return Rz;
}

void SC_LoopInfo_FinishLoop(LoopInfo* Self, Message* Msg) {
	NilRecord Ex = Self->ExitRecord;
	if ((!Ex)) {
		JB_Msg_SyntaxExpect(Msg, JB_LUB[997]);
	}
	if ((!Self->HasEscape) and (!JB_Tree_IsLast(Msg))) {
		SC_Msg_KinderRemoveAfter(Msg);
	}
	SC_nil_SetAllNil((&SC__nil_T), Ex);
}

void SC_LoopInfo_NextLoop(LoopInfo* Self) {
	Self->ContRecord = (Self->ContRecord | SC_nil__Value());
	SC_nil_SetAllNil((&SC__nil_T), Self->ContRecord);
}




void JB_MsgPos_Destructor(MessagePosition* Self) {
	JB__Tk_Using = (*Self);
	JB_Mem_Use(Self->Layer);
}

void JB_MsgPos_SyntaxUsingComplete(MessagePosition* Self) {
}



void SC_NameAndMsg_Destructor(NameAndMsg* Self) {
	JB_Clear(Self->Msg);
	JB_Clear(Self->Name);
	JB_Clear(Self->Arg);
}

void SC_NameAndMsg_SyntaxAppend(NameAndMsg* Self, Message* M) {
	Message* Msg = Self->Msg;
	if (Msg) {
		(JB_Ring_PrevSibSet(Msg, M));
	}
	 else {
		JB_Tree_SyntaxAppend(Self->Arg, M);
	}
}


void SC_NRC_SyntaxCallSet(NilRecorder* Self, uint64 Item, uint64 Value) {
	Value = (Value & kSC__NilState_Either);
	Item = (Item << 1);
	uint64 Mask = ((uint64)kSC__NilState_Either) << Item;
	NilRecord Prev = Self->Value;
	Self->Value = ((Prev & (~Mask)) | (Value << Item));
}


void JB_LD_Destructor(ObjectLoader* Self) {
	JB_Clear(Self->Result);
}

void JB_LD_Finish(ObjectLoader* Self) {
	JB_SetRef(Self->Result, nil);
	if (Self->NoClass) {
		JB_Msg_SyntaxExpect(Self->DataError, JB_LUB[1344]);
	}
	if (Self->DataError) {
		JB_Msg_SyntaxExpect(Self->DataError, JB_LUB[658]);
	}
	if (Self->CouldntLoad) {
		JB_Object_Fail(Self->CouldntLoad, JB_LUB[1280]);
	}
}

JB_Class* JB_LD_GetClassOf(ObjectLoader* Self, Message* Msg) {
	DTWrap* Data = ((DTWrap*)JB_Dict_ValueStr(JB__LD_ClassList, Msg->Name));
	if (Data) {
		return ((JB_Class*)(JB_Wrap_First(Data)));
	}
	Self->NoClass = Msg;
	return nil;
}

bool JB_LD_HasItem(ObjectLoader* Self) {
	return ((bool)Self->CurrItem);
}

int64 JB_LD_Int(ObjectLoader* Self) {
	Message* C = JB_LD_Next(Self);
	if (C) {
		return JB_Msg_Int(C, 0);
	}
	return 0;
}

int64 JB_LD_ItemInt(ObjectLoader* Self) {
	Message* C = Self->CurrItem;
	if ((!C)) {
		return 0;
	}
	Self->CurrItem = ((Message*)JB_Ring_NextSib(C));
	return JB_Msg_Int(((Message*)JB_Ring_Last(C)), 0);
}

bool JB_LD_ItemIsInt(ObjectLoader* Self) {
	Message* C = Self->CurrItem;
	return ((JB_Msg_EqualsSyx(((Message*)JB_Ring_Last(C)), JB_SyxNum, false)));
}

JB_String* JB_LD_ItemName(ObjectLoader* Self) {
	Message* C = Self->CurrItem;
	return JB_Str_Unshare(JB_Msg_FirstName(C));
}

JB_Object* JB_LD_ItemObject(ObjectLoader* Self) {
	Message* C = Self->CurrItem;
	if ((!C)) {
		return nil;
	}
	Self->CurrItem = ((Message*)JB_Ring_NextSib(C));
	return JB_LD_ObjectSub(Self, ((Message*)JB_Ring_Last(C)));
}

void JB_LD_LoadClass(ObjectLoader* Self, Message* Msg, Dictionary* Dict) {
	JB_Class* Cls = JB_LD_GetClassOf(Self, Msg);
	if ((!Cls)) {
		return;
	}
	Message* Items = ((Message*)JB_Ring_Last(Msg));
	if ((!JB_Msg_EqualsSyx(Items, JB_SyxList, false))) {
		JB_Msg_SyntaxExpect(Items, nil);
		return;
	}
	{
		Message* Line = ((Message*)JB_Ring_First(Items));
		while (Line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Line));
			JB_LD_LoadObject(Self, Line, Dict, Cls);
			Line = _Nf1;
		};
		;
	};
}

void JB_LD_LoadForReal(ObjectLoader* Self, Message* Root, Dictionary* D) {
	Self->Dict = D;
	{
		Message* Cls = ((Message*)JB_Ring_First(Root));
		while (Cls) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Cls));
			if (JB_Msg_EqualsSyx(Cls, JB_SyxTmp, false)) {
				{
					Message* _LoopSrcf4 = ((Message*)JB_Ring_Last(Cls));
					Message* Line = ((Message*)JB_Ring_First(_LoopSrcf4));
					while (Line) {
						Message* _Nf3 = ((Message*)JB_Ring_NextSib(Line));
						Message* Name = ((Message*)JB_Ring_First(Line));
						if (Name) {
							Saveable* Result = ((Saveable*)JB_Dict_ValueStr(D, Name->Name));
							if (Result) {
								Self->CurrItem = ((Message*)JB_Ring_First(((Message*)JB_Ring_Last(Line))));
								JB_Sav___LoadProperties__(Result, Self);
							}
						}
						Line = _Nf3;
					};
					;
				};
			}
			 else if (JB_Msg_EqualsSyx(Cls, JB_SyxName, false)) {
				JB_SetRef(Self->Result, ((Saveable*)JB_Dict_ValueStr(D, Cls->Name)));
			}
			Cls = _Nf1;
		};
		;
	};
}

void JB_LD_LoadObject(ObjectLoader* Self, Message* Msg, Dictionary* Dict, JB_Class* Cls) {
	if ((!JB_Msg_EqualsSyx(Msg, JB_SyxItem, false))) {
		return;
	}
	Message* Name = ((Message*)JB_Ring_First(Msg));
	if ((!Name)) {
		return;
	}
	Saveable* Result = ((Saveable*)((JB_Object*)JB_Ternary(((bool)Cls), JB_Class_AllocZeroed(Cls), nil)));
	if (Result) {
		(JB_Dict_ValueSet(Dict, Name->Name, Result));
	}
}

Message* JB_LD_Next(ObjectLoader* Self) {
	Message* C = Self->CurrItem;
	if (C) {
		Self->CurrItem = ((Message*)JB_Ring_NextSib(C));
		return C;
	}
	return nil;
}

JB_Object* JB_LD_Object(ObjectLoader* Self) {
	return JB_LD_ObjectSub(Self, JB_LD_Next(Self));
}

JB_Object* JB_LD_ObjectSub(ObjectLoader* Self, Message* C) {
	if (JB_Msg_EqualsSyx(C, JB_SyxThg, false)) {
		return JB_Dict_ValueStr(Self->Dict, C->Name);
	}
	 else if (JB_Msg_EqualsSyx(C, JB_SyxStr, false)) {
		return JB_Str_Unshare(C->Name);
	}
	return nil;
}

void JB_LD_Preload(ObjectLoader* Self, Message* Root, Dictionary* Dict) {
	{
		Message* Cls = ((Message*)JB_Ring_First(Root));
		while (Cls) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Cls));
			if (JB_Msg_EqualsSyx(Cls, JB_SyxTmp, false)) {
				JB_LD_LoadClass(Self, Cls, Dict);
			}
			Cls = _Nf1;
		};
		;
	};
}

JB_String* JB_LD_String(ObjectLoader* Self) {
	Message* C = JB_LD_Next(Self);
	if ((!C)) {
		return JB_LUB[0];
	}
	return JB_Str_Unshare(C->Name);
}

bool JB_LD_VerifyFormat(ObjectLoader* Self, Message* Root) {
	JB_LD__Init();
	Message* M1 = JB_Msg_NeedSyx(Root, JB_SyxName);
	if ((!M1)) {
		return nil;
	}
	return true;
}

void JB_LD__Init() {
	if (JB__LD_ClassList) {
		return;
	}
	JB_SetRef(JB__LD_ClassList, JB_Dict_Constructor(nil));
	JB_InitClassList((&JB_LD__LoadOne));
}

int JB_LD__Init_() {
	{
	}
	;
	return 0;
}

int JB_LD__InitCode_() {
	return 0;
}

void JB_LD__LoadOne(JB_Class* Cls, char* Data) {
	JB_StringC* _tmPf0 = JB_Incr(JB_Str__Wrap(Cls->Name));
	JB_String* Name = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	DTWrap* _tmPf1 = JB_Incr(JB_Wrap_ConstructorInt(nil, ((int64)Cls)));
	(JB_Dict_ValueSet(JB__LD_ClassList, Name, _tmPf1));
	JB_Decr(Name);
	JB_Decr(_tmPf1);
}


void JB_Saver_AppendInt(ObjectSaver* Self, int64 I) {
	JB_FS_AppendInt64(Self->Dest, I);
	JB_FS_AppendByte(Self->Dest, ',');
}

void JB_Saver_AppendObject(ObjectSaver* Self, JB_Object* O) {
	JB_FS_AppendObjectOrNil(Self->Dest, O);
	JB_FS_AppendByte(Self->Dest, ',');
}

void JB_Saver_AppendString(ObjectSaver* Self, JB_String* S) {
	JB_FS_AppendByte(Self->Dest, '`');
	JB_FreeIfDead(JB_Str_ReplaceAll(S, JB_LUB[1463], JB_LUB[1465], false, Self->Dest));
	JB_FS_AppendByte(Self->Dest, '`');
	JB_FS_AppendByte(Self->Dest, ',');
}

void JB_Saver_Destructor(ObjectSaver* Self) {
	if (Self->CantSaveThis) {
		JB_Object_Fail(Self->CantSaveThis, JB_LUB[1281]);
	}
	JB_Clear(Self->Dest);
}

void JB_Saver_Finish(ObjectSaver* Self, Saveable* First) {
	FastString* Fs = Self->Dest;
	JB_FS_AppendByte(Fs, '\n');
	JB_FS_AppendByte(Fs, '@');
	JB_FS_AppendObjectID(Fs, First);
	JB_FS_AppendByte(Fs, '\n');
	JB_FS_AppendString(Fs, kJB_kSaverEnd);
}

void JB_Saver__Init() {
	if (JB_Array_SyntaxCast(JB__Saver_SaveableList)) {
		return;
	}
	JB_InitClassList((&JB_Saver__LoadOne));
}

int JB_Saver__Init_() {
	{
	}
	;
	return 0;
}

int JB_Saver__InitCode_() {
	return 0;
}

void JB_Saver__LoadOne(JB_Class* Cls, char* Data) {
	SaverClassInfo* N = JB_Incr(JB_sci_Constructor(nil, Cls, Data));
	Cls->SaveInfo = ((byte*)N);
	JB_SetRef(N->NextInfo, JB__Saver_SaveableList);
	JB_SetRef(JB__Saver_SaveableList, N);
	JB_Decr(N);
}

ObjectSaver JB_Saver__New() {
	JB_Saver__Init();
	ObjectSaver Result = ((ObjectSaver){});
	return Result;
}




JB_String* JB_Pico_Get(PicoComms* Self, float T) {
	return JB_Str__FromPico(PicoGet(Self, T));
}

bool JB_Pico_SendFS(PicoComms* Self, FastString* Fs, bool Wait) {
	bool Rz = false;
	Rz = PicoSend(Self, JB_Pico__FromFS(Fs), Wait);
	(JB_FS_LengthSet(Fs, 0));
	return Rz;
}

int JB_Pico__Init_() {
	{
	}
	;
	return 0;
}

int JB_Pico__InitCode_() {
	return 0;
}

PicoComms* JB_Pico__New(JB_StringC* Name, int Bits) {
	PicoComms* P = PicoCreate();
	if (P) {
		PicoConfig* C = PicoCommsConf(P);
		C->Name = JB_Str_SyntaxCast(Name);
		C->Bits = Bits;
		return P;
	}
	PicoGlobalStats St = ((PicoGlobalStats){});
	PicoStats((&St));
	if (true) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_PlusByte(JB_LUB[792], St.OpenPicos));
		JB_Str_SyntaxExpect(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return nil;
}

PicoComms* JB_Pico__Parent() {
	PicoComms* Rz = nil;
	PicoComms* P = JB__Pico_Parent_;
	if (P) {
		return P;
	}
	if ((!PicoHasParentSocket())) {
		return nil;
	}
	Rz = JB_Pico__New(JB_LUB[0], 16);
	JB__Pico_Parent_ = Rz;
	if (Rz) {
		PicoCompleteExec(Rz);
	}
	return Rz;
}





PicoMessage JB_Pico__FromFS(FastString* Fs) {
	PicoMessage Rz = ((PicoMessage){});
	Rz.Length = Fs->Length;
	Rz.Data = ((char*)Fs->ResultPtr);
	return Rz;
}


double JB_Rnd_Double(Random* Self) {
	double Rz = 0.0f;
	Rz = ((double)((uint64)JB_Rnd_RndInt(Self)));
	Rz = (Rz / 18446744073709551616.0f);
	return Rz;
}

float JB_Rnd_Float(Random* Self) {
	return JB_Rnd_Double(Self);
}

int64 JB_Rnd_RndInt(Random* Self) {
	int64 Rz = 0;
	uint64 S = (++Self->State);
	Rz = JB_uint64_hash((Self->Store + S));
	Self->Store = Rz;
	return Rz;
}

void JB_Rnd_LoadProperties(Random* Self, ObjectLoader* Loader) {
	//visible;
	Self->Store = ((uint64)JB_LD_Int(Loader));
	Self->State = ((uint64)JB_LD_Int(Loader));
}

void JB_Rnd_SaveWrite(Random* Self, ObjectSaver* Saver) {
	//visible;
	JB_Saver_AppendInt(Saver, Self->Store);
	JB_Saver_AppendInt(Saver, Self->State);
}

void JB_Rnd_SeedSet(Random* Self, uint64 Value) {
	Self->Store = Value;
	Self->State = 1;
}

double JB_Rnd_SyntaxAccess(Random* Self) {
	return JB_Rnd_Double(Self);
}

void JB_Rnd_TimeSeed(Random* Self) {
	(JB_Rnd_SeedSet(Self, JB_Date__New0()));
}

int JB_Rnd__Init_() {
	{
		JB__Rnd_Shared = ((Random){});
	}
	;
	return 0;
}

int JB_Rnd__InitCode_() {
	{
	}
	;
	JB_Rnd_TimeSeed((&JB__Rnd_Shared));
	return 0;
}






void JB_StructSaveTest_Destructor(StructSaveTest* Self) {
	JB_Clear(Self->Sav);
	JB_Clear(Self->Str);
}

void JB_StructSaveTest_LoadProperties(StructSaveTest* Self, ObjectLoader* Loader) {
	//visible;
	JB_SetRef(Self->Sav, ((Saveable*)JB_LD_Object(Loader)));
	Self->Intt = ((int64)JB_LD_Int(Loader));
	JB_SetRef(Self->Str, ((JB_String*)JB_LD_String(Loader)));
}

void JB_StructSaveTest_SaveWrite(StructSaveTest* Self, ObjectSaver* Saver) {
	//visible;
	JB_Saver_AppendObject(Saver, Self->Sav);
	JB_Saver_AppendInt(Saver, Self->Intt);
	JB_Saver_AppendString(Saver, Self->Str);
}





































































SCDecl* SC_Object_AsDecl(JB_Object* Self) {
	if (JB_Object_FastIsa(Self, &SCClassData)) {
		return ((SCClass*)Self)->TypeNormal;
	}
	 else if (JB_Object_FastIsa(Self, &SCModuleData)) {
		SCClass* C = ((SCModule*)Self)->Cls;
		if (C) {
			return C->TypeNormal;
		}
	}
	 else {
		return SC_Object_BaseAsDecl(Self);
	}
	return nil;
}

SCDecl* SC_Object_BaseAsDecl(JB_Object* Self) {
	if (JB_Object_FastIsa(Self, &SCDeclData)) {
		return ((SCDecl*)Self);
	}
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		return ((SCFunction*)Self)->ReturnType;
	}
	return nil;
}

SCNode* SC_Object_ClassOrModule(JB_Object* Self) {
	if (JB_Object_FastIsa(Self, &SCModuleData)) {
		SCClass* C = ((SCModule*)Self)->Cls;
		if (C) {
			return C;
		}
		return ((SCModule*)Self);
	}
	return nil;
}

__lib__ void jdb(JB_Object* Self) {
	//visible;
	if (Self) {
		JB_StringC* _tmPf0 = JB_Incr(JB_Str__Wrap(JB_ObjClass(Self)->Name));
		JB_Str_Print(_tmPf0);
		JB_Decr(_tmPf0);
		JB_Str_Print(JB_LUB[559]);
	}
	JB_String* _tmPf1 = JB_Incr(JB_ObjRender(Self, nil));
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
}

bool JB_Object_MustBe(JB_Object* Self, JB_Class* X, Message* ErrNode) {
	if (JB_Object_Isa(Self, X)) {
		return true;
	}
	if (Self) {
		JB_FreeIfDead(JB_Object_TypeFailed(Self, X, ErrNode));
	}
	return false;
}

JB_Object* JB_Object_As(JB_Object* Self, JB_Class* X) {
	if (JB_Object_Isa(Self, X)) {
		return Self;
	}
	if (Self) {
		return JB_Object_TypeFailed(Self, X, nil);
	}
	return nil;
}

JB_Object* JB_Object_FastAs(JB_Object* Self, JB_Class* X) {
	if (Self) {
		if (JB_ObjClass(Self) == X) {
			return Self;
		}
		return JB_Object_TypeFailed(Self, X, nil);
	}
	return nil;
}

bool JB_Object_FastIsa(JB_Object* Self, JB_Class* X) {
	return ((bool)(Self)) and (JB_ObjClass(Self) == X);
}

bool JB_Object_Isa(JB_Object* Self, JB_Class* Cls) {
	if (Self) {
		JB_Class* P = JB_ObjClass(Self);
		while (P) {
			if (P == Cls) {
				return true;
			}
			P = P->Parent;
		};
	}
	return false;
}

bool JB_Object_OperatorMustBe(JB_Object* Self, JB_Class* X) {
	return JB_Object_MustBe(Self, X, nil);
}

void JB_Object_SaveTryCollect(JB_Object* Self, ObjectSaver* Saver) {
	if (JB_Object_Isa(Self, &SaveableData)) {
		if ((!JB_Sav_SaveMark(((Saveable*)Self)))) {
			return;
		}
		JB_Array_SyntaxAppend(JB_Sav_SaverInfo(((Saveable*)Self)), ((Saveable*)Self));
		JB_Sav___SaveCollect__(((Saveable*)Self), Saver);
	}
	 else if ((bool)(Self)) {
		if ((!JB_Object_Isa(Self, &JB_StringData))) {
			Saver->CantSaveThis = Self;
		}
	}
}

void JB_Object_Fail(JB_Object* Self, JB_String* Error) {
	//visible;
	if (JB_Object_Isa(Self, &MessageData)) {
		JB_Rec__NewErrorWithNode(((Message*)Self), Error, nil);
	}
	 else {
		JB_Rec__NewErrorWithNode(nil, Error, nil);
	}
}

void JB_Object_SyntaxExpect(JB_Object* Self) {
	JB_PrintLine(kJB__Rec_NonFatal);
	JB_CrashTracer();
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_String* _tmPf1 = JB_Incr(JB_int64_StrSize(JB_MemCount(), nil));
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(_fsf0, JB_LUB[188]);
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf2);
	JB_Decr(_tmPf2);
	JB_Rec__NewErrorWithNode(nil, kJB__Rec_NonFatal, nil);
}

JB_Object* JB_Object_TypeFailed(JB_Object* Self, JB_Class* Cls, Message* Where) {
	JB_String* Name = JB_Incr(JB_cstring_Str(JB_ObjClass(Self)->Name));
	if (true) {
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlusWithCstring(JB_LUB[127], Cls->Name));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(Name, _tmPf1));
		JB_Decr(_tmPf1);
		JB_Msg_SyntaxExpect(Where, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Name);
	JB_Platform__Log(JB_LUB[1331]);
	JB_String* _tmPf2 = JB_Incr(JB_App__StackTrace(2, nil));
	JB_Platform__Log(_tmPf2);
	JB_Decr(_tmPf2);
	debugger;
	return nil;
}


JB_String* JB_AppArgument_Name(JB_Object* Self) {
	if (JB_Object_Isa(Self, &JB_StringData)) {
		return JB_Str_ArgName(((JB_String*)Self));
	}
	if (JB_Object_Isa(Self, &MessageData)) {
		return JB_Msg_ArgName(((Message*)Self));
	}
	return JB_LUB[0];
}

JB_String* JB_AppArgument_Value(JB_Object* Self) {
	if (JB_Object_Isa(Self, &JB_StringData)) {
		return JB_Str_ArgValue(((JB_String*)Self));
	}
	if (JB_Object_Isa(Self, &MessageData)) {
		return JB_Msg_ArgValue(((Message*)Self));
	}
	return JB_LUB[0];
}



Array* JB_CS_Bytes(CharSet* Self) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	{
		int _if0 = -1;
		while (JB_CS_NextInCharset(Self, (&_if0))) {
			byte B = ((byte)_if0);
			JB_Array_SyntaxAppend(Rz, JB_byte_Render(B, nil));
		};
	}
	;
	return Rz;
}

bool JB_CS_NextInCharset(CharSet* Self, int* P) {
	int I = (*P);
	while ((++I) < 256) {
		if (JB_CS_HasChar(Self, I)) {
			(*P) = I;
			return true;
		}
	};
	return false;
}

bool JB_CS_OperatorContains(CharSet* Self, JB_String* Data) {
	return (!JB_Ind_SyntaxCast(JB_Str_OutCharSet(Data, Self, 0, JB_int__Max())));
}


void SC_CppRefs_AddOne(CppRefs* Self, Message* C) {
	if (JB_Msg_SyntaxEquals(C, JB_LUB[1810], true)) {
	}
	 else if (JB_Msg_SyntaxEquals(C, JB_LUB[1933], true)) {
		Self->DisturbParams = (Self->DisturbParams | 1);
	}
	 else if (JB_Msg_EqualsSyx(C, JB_SyxNum, false)) {
		Self->DisturbParams = (Self->DisturbParams | (JB_Msg_Int(C, 0) << 1));
	}
	 else {
		JB_Array_SyntaxAppend(SC_CppRefs_DisturbsGet(Self), C->Name);
	}
}

CppRefs* SC_CppRefs_Constructor(CppRefs* Self, Message* S) {
	if (Self == nil) {
		Self = ((CppRefs*)JB_NewClass(&CppRefsData));
	}
	Self->DisturbParams = 0;
	Self->Owned = false;
	Array* _tmPf0 = JB_Array_Constructor0(nil);
	Self->Disturbs = JB_Incr(_tmPf0);
	if (S) {
		SC_CppRefs_Read(Self, S);
	}
	return Self;
}

void SC_CppRefs_Destructor(CppRefs* Self) {
	JB_Clear(Self->Disturbs);
}

Array* SC_CppRefs_DisturbsGet(CppRefs* Self) {
	Array* Rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	Array* Ds = JB_Incr(Self->Disturbs);
	if (JB_Array_SyntaxCast(Ds)) {
		JB_Decr(Rz);
		JB_SafeDecr(Ds);
		return Ds;
	}
	JB_SetRef(Rz, JB_Array_Constructor0(nil));
	JB_SetRef(Self->Disturbs, Ds);
	JB_Decr(Ds);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_CppRefs_Read(CppRefs* Self, Message* Node) {
	SC_CppRefs_SetDefaultRefStatus(Self);
	Message* Arg = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxArg));
	if ((!Arg)) {
		JB_Decr(Arg);
		return;
	}
	JB_Msg_ExpectLast(Arg, JB_LUB[0]);
	{
		Message* C = JB_Incr(((Message*)JB_Ring_First(Arg)));
		while (C) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(C)));
			JB_Msg_Expect(C, JB_SyxTmp, nil);
			if ((!((JB_Msg_SyntaxEquals(C, JB_LUB[1613], false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[1609], false))))) {
				JB_Msg_SyntaxExpect(C, JB_LUB[1219]);
				JB_Decr(_Nf1);
				JB_Decr(C);
				JB_Decr(Arg);
				return;
			}
			Message* Ch = JB_Incr(((Message*)JB_Ring_First(C)));
			if (JB_Msg_EqualsSyx(Ch, JB_SyxBra, false)) {
				Ch->Func = JB_SyxPrm;
			}
			if ((!((JB_Msg_EqualsSyx(Ch, JB_SyxThg, false)) or ((JB_Msg_EqualsSyx(Ch, JB_SyxPrm, false)) or (JB_Msg_EqualsSyx(Ch, JB_SyxNum, false)))))) {
				JB_Msg_SyntaxExpect(Ch, nil);
				JB_Decr(Ch);
				JB_Decr(_Nf1);
				JB_Decr(C);
				JB_Decr(Arg);
				return;
			}
			JB_Msg_ExpectLast(Ch, JB_LUB[0]);
			JB_Decr(Ch);
			JB_SetRef(C, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(C);
		;
	}
	;
	if ((!JB_Rec_OK(JB_StdErr))) {
		JB_Decr(Arg);
		return;
	}
	Message* _tmPf4 = JB_Incr(JB_Msg_FindSyxName(Arg, JB_SyxTmp, JB_LUB[1900], false));
	Message* Disown = JB_Incr(((Message*)JB_Tree_Get(_tmPf4, 0)));
	JB_Decr(_tmPf4);
	if (Disown) {
		Self->Owned = (!SC_Msg_TrueOrFalse(Disown));
	}
	JB_Decr(Disown);
	Message* _tmPf5 = JB_Incr(JB_Msg_FindSyxName(Arg, JB_SyxTmp, JB_LUB[1613], false));
	JB_Decr(Arg);
	Message* Stuff = JB_Incr(((Message*)JB_Tree_Get(_tmPf5, 0)));
	JB_Decr(_tmPf5);
	if (Stuff) {
		JB_Array_Clear(Self->Disturbs);
		Self->DisturbParams = 0;
		if ((!JB_Msg_EqualsSyx(Stuff, JB_SyxList, false))) {
			SC_CppRefs_AddOne(Self, Stuff);
		}
		 else {
			{
				Message* C = JB_Incr(((Message*)JB_Ring_First(Stuff)));
				while (C) {
					Message* _Nf3 = JB_Incr(((Message*)JB_Ring_NextSib(C)));
					SC_CppRefs_AddOne(Self, C);
					JB_SetRef(C, _Nf3);
					JB_Decr(_Nf3);
				};
				JB_Decr(C);
				;
			};
		}
	}
	JB_Decr(Stuff);
}

void SC_CppRefs_SetDefaultRefStatus(CppRefs* Self) {
	Self->Owned = false;
	JB_SetRef(Self->Disturbs, JB_Array_Constructor0(nil));
	Self->DisturbParams = -1;
	Array* _tmPf0 = JB_Incr(SC_CppRefs_DisturbsGet(Self));
	JB_Array_SyntaxAppend(_tmPf0, JB_LUB[1836]);
	JB_Decr(_tmPf0);
}

SCNode* SC_CppRefs__Linkage(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxArg));
	SCNode* _tmPf1 = JB_Incr(SC_Base_ProcessLinkage(Name_space, _tmPf0, JB_ClassLinkageTable));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCNode* SC_CppRefs__ReadIntoCppRefs(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCModule* _tmPf0 = JB_Incr(SC_Base_SpaceModule(Name_space, nil));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	SC_CppRefs_Read(_tmPf0->DefaultRefs, Node);
	JB_Decr(_tmPf0);
	return SC__Comp_program;
}


void SC_Cpp_AppendCppField(Cpp_Export* Self, JB_String* Prop, FastStringCpp* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[42]);
	JB_FS_AppendString(Fs, Prop);
	JB_FS_AppendByte(Fs, ';');
}

void SC_Cpp_AppendPropField(Cpp_Export* Self, SCDecl* Prop, FastStringCpp* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[42]);
	SC_Cpp__WriteDecl(Prop, Fs, nil);
	JB_FS_AppendByte(Fs, ';');
}

bool SC_Cpp_CanExportFunc(Cpp_Export* Self, SCFunction* F) {
	if ((!(((bool)F->MyReacher) or F->IsAPI))) {
		return nil;
	}
	if (F->IsDisabled) {
		return nil;
	}
	if ((!F->IsExternalLib)) {
		if ((!((!F->IsWrapper) and (!F->IsMacro)))) {
			return nil;
		}
	}
	return (!SC_Func_SyntaxIs(F, kSC__FunctionType_NewStruct)) and (!SC_Func_SyntaxIs(F, kSC__FunctionType_AlreadyExported));
}

bool SC_Cpp_CanOpt(Cpp_Export* Self, bool Force) {
	if (Force) {
		return true;
	}
	SCClass* C = SC__Cpp_CurrClass;
	if (C) {
		return (!C->MinOpt);
	}
	return false;
}

void SC_Cpp_Codify(Cpp_Export* Self, SCModule* Scb, JB_String* fName) {
	JB_Incr(fName);
	SCClass* Cls = JB_Incr(Scb->Cls);
	if ((!JB_Str_Exists(fName))) {
		if (Cls) {
			JB_SetRef(fName, Cls->ExportName);
		}
		 else {
			JB_SetRef(fName, Scb->ExportName);
		}
	}
	if (Scb == SC__Comp_program) {
		JB_SetRef(fName, JB_LUB[1776]);
	}
	Array* ModuleFuncs = JB_Incr(SC_Base_ListFunctions(Scb));
	if ((!(((bool)Cls) or (JB_Array_SyntaxCast(ModuleFuncs) or ((bool)Scb->Access))))) {
		JB_Decr(fName);
		JB_Decr(ModuleFuncs);
		JB_Decr(Cls);
		return;
	}
	JB_SetRef(SC__Cpp_CurrClass, Cls);
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(fName, JB_LUB[366]));
	FastStringCpp* File = JB_Incr(SC_Cpp_StreamChild(Self, _tmPf0));
	JB_Decr(_tmPf0);
	JB_FS_AppendString(Self->HeaderProj, JB_LUB[55]);
	JB_FS_AppendString(Self->HeaderProj, fName);
	JB_Decr(fName);
	JB_FS_AppendByte(Self->HeaderProj, '\n');
	SC_Cpp_ExportModuleProperties(Self, Scb, Self->ModuleProperties);
	if (((bool)Cls) and SC_Class_NeedsExport(Cls)) {
		SC_Cpp_ExportClass(Self, Cls, Self->ModuleProperties);
		SC_Cpp_OptStart(Self, File, Cls->MinOpt, true);
		Array* _tmPf1 = JB_Incr(SC_Base_ListFunctions(Cls));
		SC_Cpp_CodifyFuncs(Self, File, _tmPf1);
		JB_Decr(_tmPf1);
		SC_Cpp_OptEnd(Self, File, Cls->MinOpt, true);
	}
	JB_Decr(Cls);
	SC_Cpp_CodifyFuncs(Self, File, ModuleFuncs);
	JB_Decr(ModuleFuncs);
	JB_Decr(File);
	JB_SetRef(SC__Cpp_CurrClass, nil);
}

void SC_Cpp_CodifyFuncs(Cpp_Export* Self, FastStringCpp* File, Array* List) {
	{
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(List, _if0));
			if (F == nil) {
				break;
			}
			if ((!F->IsInline) and SC_Cpp_CanExportFunc(Self, F)) {
				SC_Cpp_CppFunc(Self, File, F);
			}
			_if0++;
		};
	}
	;
	JB_SetRef(SC__Func_CurrFunc, nil);
}

void SC_Cpp_CodifyInlines(Cpp_Export* Self) {
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			if (F->IsInline and SC_Cpp_CanExportFunc(Self, F)) {
				SC_Cpp_CppFunc(Self, Self->Inlines, F);
			}
			_if0++;
		};
	}
	;
	JB_SetRef(SC__Func_CurrFunc, nil);
}

Cpp_Export* SC_Cpp_Constructor(Cpp_Export* Self) {
	if (Self == nil) {
		Self = ((Cpp_Export*)JB_NewClass(&Cpp_ExportData));
	}
	Array* _tmPf0 = JB_Incr((JB_Array_Constructor0(nil)));
	Self->Outputs_cpp = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Array* _tmPf1 = JB_Incr((JB_Array_Constructor0(nil)));
	Self->Outputs_h = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	FastStringCpp* _tmPf7 = SC_FastStringCpp_Constructor(nil, JB_LUB[0]);
	Self->T = JB_Incr(_tmPf7);
	FastStringCpp* _tmPf6 = SC_Cpp_StreamChild(Self, JB_LUB[628]);
	Self->AllTypes = JB_Incr(_tmPf6);
	FastStringCpp* _tmPf5 = SC_Cpp_StreamChild(Self, JB_LUB[1144]);
	Self->TypesProj = JB_Incr(_tmPf5);
	FastStringCpp* _tmPf4 = SC_Cpp_StreamChild(Self, JB_LUB[944]);
	Self->HeaderProj = JB_Incr(_tmPf4);
	FastStringCpp* _tmPf3 = SC_Cpp_StreamChild(Self, JB_LUB[919]);
	Self->Inlines = JB_Incr(_tmPf3);
	FastStringCpp* _tmPf2 = SC_Cpp_StreamChild(Self, JB_LUB[1028]);
	Self->ModuleProperties = JB_Incr(_tmPf2);
	SC_Cpp__Init();
	return Self;
}

void SC_Cpp_CppFunc(Cpp_Export* Self, FastStringCpp* Fs, SCFunction* F) {
	JB_SetRef(SC__Func_CurrFunc, F);
	(SC_Func_SyntaxIsSet(F, kSC__FunctionType_AlreadyExported, true));
	JB_String* FuncHeader = SC_Cpp_FuncHeader(Self, F);
	if ((!JB_Str_Exists(FuncHeader))) {
		return;
	}
	SC_Cpp_SetupFlow(Self, F);
	SC_Cpp_FuncStart(Self, Fs, F, FuncHeader);
	JB_Msg_Export(SC_Func_SourceArg(F), Fs);
	SC_Cpp_OptEnd(Self, Fs, F->MinOpt, 0);
	JB_FS_AppendString(Fs, JB_LUB[48]);
}

void SC_Cpp_Destructor(Cpp_Export* Self) {
	JB_Clear(Self->Outputs_cpp);
	JB_Clear(Self->Outputs_h);
	JB_Clear(Self->T);
	JB_Clear(Self->AllTypes);
	JB_Clear(Self->TypesProj);
	JB_Clear(Self->HeaderProj);
	JB_Clear(Self->Inlines);
	JB_Clear(Self->ModuleProperties);
}

void SC_Cpp_ExportBehaviourHeader(Cpp_Export* Self, SCClass* Cls) {
	if (Cls->IsRole) {
		return;
	}
	SCBehaviour* B = JB_Incr(Cls->Behaviour);
	if (B) {
		SC_Cpp_ExportStruct(Self, B->FuncTable->Cls, true);
	}
	JB_Decr(B);
}

bool SC_Cpp_ExportBehaviourInstance(Cpp_Export* Self, SCClass* Cls, FastStringCpp* Fs) {
	SCBehaviour* B = JB_Incr(Cls->Behaviour);
	if ((!B)) {
		JB_Decr(B);
		return nil;
	}
	SCClass* TableCls = JB_Incr(B->FuncTable->Cls);
	JB_String* N = JB_Incr(SC_Class_CStructName(TableCls));
	JB_Decr(TableCls);
	JB_String* CN = JB_Incr(SC_Class_CStructName(Cls));
	JB_FS_AppendString(Fs, N);
	JB_FS_AppendString(Fs, JB_LUB[157]);
	JB_FS_AppendString(Fs, CN);
	JB_FS_AppendString(Fs, JB_LUB[1426]);
	JB_FS_AppendString(Fs, N);
	JB_FS_AppendString(Fs, JB_LUB[159]);
	SC_FastStringCpp_AppendBehaviour(Fs, JB_LUB[0], Cls->DestructorFunc, nil);
	while (B) {
		{
			Dictionary* _LoopSrcf3 = JB_Incr(B->Interfaces);
			DictionaryReader* _navf1 = JB_Incr(JB_Dict_Navigate(_LoopSrcf3));
			JB_Decr(_LoopSrcf3);
			while (true) {
				SCModule* M = JB_Incr(((SCModule*)JB_DictionaryReader_NextValue(_navf1)));
				if (M == nil) {
					JB_Decr(M);
					break;
				}
				JB_String* S = JB_Incr(SC_Str_InterfaceToBehaviour(M->Name));
				SCFunction* Fn = JB_Incr(SC_Class_BestBehaviourFor(Cls, S));
				if (Fn) {
					SCClass* BaseClass = JB_Incr(SC_Class_InterfaceForBehaviour(Cls, Fn));
					if (BaseClass) {
						if (M->IsRequiredInterface and (!JB_FreeIfDead(SC_Base_SyntaxAccess(Cls->Behaviour, S)))) {
							JB_String* Msg = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1014], Cls->Name));
							if (true) {
								JB_Msg_SyntaxExpect(Cls->Source, Msg);
							}
							if (true) {
								JB_Msg_SyntaxExpect(BaseClass->FuncProto->Source, Msg);
							}
							JB_Decr(Msg);
						}
						SC_FastStringCpp_AppendBehaviour(Fs, S, Fn, BaseClass);
					}
					JB_Decr(BaseClass);
				}
				 else {
					if (true) {
						JB_String* _tmPf4 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1014], S));
						JB_Msg_SyntaxExpect(Cls->Source, _tmPf4);
						JB_Decr(_tmPf4);
					}
				}
				JB_Decr(M);
				JB_Decr(S);
				JB_Decr(Fn);
			};
			JB_Decr(_navf1);
		}
		;
		JB_SetRef(B, SC_Beh_Upwards(B));
	};
	JB_Decr(B);
	JB_FS_AppendString(Fs, JB_LUB[39]);
	//;
	JB_FS_AppendString(Fs, N);
	JB_Decr(N);
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_AppendString(Fs, CN);
	JB_FS_AppendString(Fs, JB_LUB[1434]);
	JB_FS_AppendString(Fs, CN);
	JB_Decr(CN);
	JB_FS_AppendString(Fs, JB_LUB[1427]);
	//;
	return true;
}

void SC_Cpp_ExportClass(Cpp_Export* Self, SCClass* Cls, FastStringCpp* CppFile) {
	JB_Incr(Cls);
	if (SC_Class_IsDataTypeOrFP(Cls)) {
		JB_Decr(Cls);
		return;
	}
	if (SC_Class_IsBehaviourTable(Cls)) {
		JB_Decr(Cls);
		return;
	}
	if (Cls->IsRole == 1) {
		JB_Decr(Cls);
		return;
	}
	if (Cls->IsRole != 2) {
		if (Cls->IsWrapper) {
			SC_Cpp_ExportBehaviourHeader(Self, Cls);
		}
		if (Cls->IsWrapper) {
			JB_Decr(Cls);
			return;
		}
		if (SC_Class_IsStruct(Cls)) {
			SC_Cpp_ExportStruct(Self, Cls, false);
			JB_Decr(Cls);
			return;
		}
	}
	FastStringCpp* HFile = JB_Incr(Self->TypesProj);
	if ((!Cls->IsRole)) {
		SC_Cpp_ExportBehaviourHeader(Self, Cls);
	}
	JB_FS_AppendString(HFile, JB_LUB[73]);
	JB_String* _tmPf4 = JB_Incr(SC_Class_CStructName(Cls));
	JB_FS_AppendString(HFile, _tmPf4);
	JB_Decr(_tmPf4);
	JB_FS_AppendString(HFile, JB_LUB[136]);
	if (Cls->Super) {
		JB_String* _tmPf5 = JB_Incr(SC_Class_CStructName(Cls->Super));
		JB_FS_AppendString(HFile, _tmPf5);
		JB_Decr(_tmPf5);
	}
	 else {
		JB_FS_AppendString(HFile, JB_LUB[965]);
	}
	JB_FS_AppendString(HFile, JB_LUB[136]);
	{
		Array* _LoopSrcf3 = JB_Incr(Cls->Properties);
		int _if1 = 0;
		while (true) {
			SCDecl* Prop = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1)));
			if (Prop == nil) {
				JB_Decr(Prop);
				break;
			}
			JB_FS_AppendString(HFile, JB_LUB[42]);
			SC_Cpp__WriteDecl(Prop, HFile, nil);
			JB_Decr(Prop);
			JB_FS_AppendByte(HFile, ';');
			_if1++;
		};
		JB_Decr(_LoopSrcf3);
	}
	;
	JB_FS_AppendString(HFile, JB_LUB[66]);
	JB_Decr(HFile);
	if ((!Cls->IsRole)) {
		bool HasTable = SC_Cpp_ExportBehaviourInstance(Self, Cls, CppFile);
		//;
		JB_FS_AppendString(CppFile, JB_LUB[945]);
		JB_String* _tmPf6 = JB_Incr(SC_Class_CStructName(Cls));
		JB_FS_AppendString(CppFile, _tmPf6);
		JB_Decr(_tmPf6);
		JB_FS_AppendString(CppFile, JB_LUB[302]);
		JB_String* _tmPf7 = JB_Incr(SC_Class_CSuperStructName(Cls));
		JB_FS_AppendString(CppFile, _tmPf7);
		JB_Decr(_tmPf7);
		JB_FS_AppendString(CppFile, JB_LUB[302]);
		//;
		if ((!HasTable)) {
			JB_SetRef(Cls, JB_TypeObject);
		}
		JB_String* _tmPf8 = JB_Incr(SC_Class_CStructName(Cls));
		JB_FS_AppendString(CppFile, _tmPf8);
		JB_Decr(_tmPf8);
		JB_FS_AppendString(CppFile, JB_LUB[1435]);
	}
	JB_Decr(Cls);
}

void SC_Cpp_ExportModuleProperties(Cpp_Export* Self, SCModule* Modl, FastStringCpp* IntoModule) {
	FastStringCpp* Fs = JB_Incr(IntoModule);
	if ((!Fs)) {
		JB_SetRef(Fs, Self->TypesProj);
	}
	{
		DictionaryReader* _df0 = JB_Incr(JB_Dict_Navigate(Modl->Access));
		while (JB_Nav_MoveNext(_df0)) {
			SCDecl* Prop = JB_Incr(SC_DictionaryReader_ValueDecl(_df0));
			if ((!Prop)) {
				0;
			}
			 else if (SC_Decl_SyntaxIs(Prop, kSC__SCDeclInfo_Const)) {
				if ((!IntoModule)) {
					SC_Cpp__WriteConst(Prop, Fs);
					JB_FS_AppendByte(Fs, '\n');
				}
			}
			 else if (SC_Decl_TypeIsReached(Prop)) {
				if ((!IntoModule)) {
					JB_FS_AppendString(Fs, JB_LUB[1644]);
				}
				 else if (SC_Decl_SyntaxIs(Prop, kSC__SCDeclInfo_API)) {
					JB_FS_AppendString(Fs, JB_LUB[1449]);
				}
				if (((bool)IntoModule) and SC_Decl_SyntaxIs(Prop, kSC__SCDeclInfo_GameFlyingMem)) {
					JB_FreeIfDead(JB_Str_ReplaceAll(Prop->StringData, JB_LUB[236], Prop->Name, false, Fs));
				}
				 else {
					SC_Cpp__WriteDecl(Prop, Fs, nil);
				}
				JB_FS_AppendByte(Fs, ';');
				JB_FS_AppendByte(Fs, '\n');
			}
			JB_Decr(Prop);
		};
		JB_Decr(_df0);
	}
	;
	JB_Decr(Fs);
}

bool SC_Cpp_ExportOneProperty(Cpp_Export* Self, SCClass* Cls, FastStringCpp* Fs, JB_String* Only) {
	{
		Array* _LoopSrcf2 = JB_Incr(Cls->Properties);
		int _if0 = 0;
		while (true) {
			SCDecl* Prop = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (Prop == nil) {
				JB_Decr(Prop);
				break;
			}
			if (JB_Str_Equals(Prop->Name, Only, false)) {
				SC_Cpp_AppendPropField(Self, Prop, Fs);
				JB_Decr(Prop);
				JB_Decr(_LoopSrcf2);
				return true;
			}
			JB_Decr(Prop);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	return false;
}

void SC_Cpp_ExportOneSyx(Cpp_Export* Self, int I, FastStringCpp* Fs) {
	JB_String* _tmPf1 = JB_Incr(((JB_String*)JB_Array_Value(SC__Comp_SyxArray, I)));
	JB_String* Syx = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	//;
	JB_FS_AppendString(Fs, JB_LUB[230]);
	JB_FS_AppendString(Fs, Syx);
	JB_Decr(Syx);
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_AppendInt32(Fs, I);
	JB_FS_AppendByte(Fs, '\n');
	//;
}

void SC_Cpp_ExportProperties(Cpp_Export* Self, SCClass* Cls, FastStringCpp* Fs, JB_String* Ignore) {
	{
		Array* _LoopSrcf2 = JB_Incr(Cls->Properties);
		int _if0 = 0;
		while (true) {
			SCDecl* Prop = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (Prop == nil) {
				JB_Decr(Prop);
				break;
			}
			if ((!JB_Str_Equals(Prop->Name, Ignore, false))) {
				SC_Cpp_AppendPropField(Self, Prop, Fs);
			}
			JB_Decr(Prop);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	};
}

void SC_Cpp_ExportStruct(Cpp_Export* Self, SCClass* Cls, bool IsBehaviour) {
	FastStringCpp* Fs = JB_Incr(Self->TypesProj);
	SC_Class_WriteStructOrUnion(Cls, Fs);
	if (Cls->IsModel) {
		JB_FS_AppendString(Fs, JB_LUB[1445]);
	}
	JB_String* _tmPf0 = JB_Incr(SC_Class_CStructName(Cls));
	JB_FS_AppendString(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	if (Cls->Super) {
		JB_FS_AppendString(Fs, JB_LUB[559]);
		JB_String* _tmPf1 = JB_Incr(SC_Class_CStructName(Cls->Super));
		JB_FS_AppendString(Fs, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_FS_AppendString(Fs, JB_LUB[204]);
	if (IsBehaviour) {
		if ((!Cls->Super)) {
			SC_Cpp_AppendCppField(Self, JB_LUB[2042], Fs);
			SC_Cpp_ExportOneProperty(Self, Cls, Fs, JB_LUB[1894]);
		}
		SC_Cpp_ExportProperties(Self, Cls, Fs, JB_LUB[1894]);
	}
	 else {
		SC_Cpp_ExportProperties(Self, Cls, Fs, nil);
	}
	JB_FS_AppendString(Fs, JB_LUB[86]);
	JB_Decr(Fs);
}

void SC_Cpp_ExportSyx(Cpp_Export* Self) {
	if ((!JB_Array_SyntaxCast(SC__Comp_SyxArray))) {
		return;
	}
	FastStringCpp* Fs = JB_Incr(SC_Cpp_StreamChild(Self, JB_LUB[1254]));
	{
		int _LoopSrcf1 = JB_Array_Size(SC__Comp_SyxArray);
		int I = 0;
		while (I < _LoopSrcf1) {
			SC_Cpp_ExportOneSyx(Self, I, Fs);
			I++;
		};
	}
	;
	JB_Decr(Fs);
}

void SC_Cpp_FillInterpreter(Cpp_Export* Self) {
	JB_String* Lib_pack = JB_Incr(SC_PackMaker__BuildInterpreter());
	SC_Cpp_ListAllFuncs(Self, Self->ModuleProperties, Lib_pack);
	JB_Decr(Lib_pack);
}

void SC_Cpp_FinalMergeOutputIntoACpp(Cpp_Export* Self) {
	FastStringCpp* Fs = JB_Incr(SC_FastStringCpp_Constructor(nil, JB_LUB[0]));
	JB_FS_AppendString(Fs, JB_LUB[69]);
	JB_String* _tmPf10 = JB_Incr(SC_Cpp__CppLicence());
	JB_FS_AppendString(Fs, _tmPf10);
	JB_Decr(_tmPf10);
	SC_FS_IncludeH(Fs, JB_LUB[973]);
	SC_FS_IncludeH(Fs, JB_LUB[944]);
	{
		Array* _LoopSrcf3 = JB_Incr(SC__Cpp_H_PostInput);
		int _if1 = 0;
		while (true) {
			JB_String* H = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf3, _if1)));
			if (H == nil) {
				JB_Decr(H);
				break;
			}
			SC_FS_IncludeH(Fs, H);
			JB_Decr(H);
			_if1++;
		};
		JB_Decr(_LoopSrcf3);
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[63]);
	JB_FS_AppendString(Fs, JB_LUB[1644]);
	SC_Cpp__GenLub(Fs);
	//;
	JB_FS_AppendString(Fs, JB_LUB[1644]);
	JB_String* _tmPf11 = JB_Incr(SC_Class_CStructName(JB_TypeObject->Behaviour->FuncTable->Cls));
	JB_FS_AppendString(Fs, _tmPf11);
	JB_Decr(_tmPf11);
	JB_FS_AppendString(Fs, JB_LUB[158]);
	//;
	if (SC_Cpp__DoSavers()) {
		SC_Cpp__CreateClassListHeader(Fs, JB_LUB[567]);
	}
	SC_Cpp__GenStrings(Self->ModuleProperties);
	JB_String* _tmPf12 = JB_Incr(JB_FS_SyntaxCast(Self->ModuleProperties));
	JB_File* _tmPf13 = JB_Incr(SC_Cpp__Product(JB_LUB[959]));
	SC_Cpp__SmartWrite(_tmPf12, _tmPf13);
	JB_Decr(_tmPf12);
	JB_Decr(_tmPf13);
	(JB_FS_LengthSet(Self->ModuleProperties, 0));
	{
		Array* _LoopSrcf6 = JB_Incr(Self->Outputs_cpp);
		int _if4 = 0;
		while (true) {
			FastStringCpp* F = JB_Incr(((FastStringCpp*)JB_Array_Value(_LoopSrcf6, _if4)));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			JB_String* _tmPf14 = JB_Incr(SC_Cpp__SplitCpp(F, F->Cpp_Name));
			JB_Decr(F);
			JB_FS_AppendString(Fs, _tmPf14);
			JB_Decr(_tmPf14);
			_if4++;
		};
		JB_Decr(_LoopSrcf6);
	}
	;
	if (SC_Cpp__DoSavers()) {
		SC_Cpp__CreateClassListFunc(Fs);
	}
	JB_FS_AppendString(Fs, JB_LUB[2081]);
	{
		Array* _LoopSrcf9 = JB_Incr(SC__Cpp_Cpp_Includes);
		int _if7 = 0;
		while (true) {
			JB_String* I = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf9, _if7)));
			if (I == nil) {
				JB_Decr(I);
				break;
			}
			JB_FS_AppendByte(Fs, ' ');
			JB_FS_AppendString(Fs, I);
			JB_Decr(I);
			_if7++;
		};
		JB_Decr(_LoopSrcf9);
	}
	;
	JB_String* _tmPf15 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	JB_File* _tmPf16 = JB_Incr(SC_Cpp__CppProduct());
	SC_Cpp__SmartWrite(_tmPf15, _tmPf16);
	JB_Decr(_tmPf15);
	JB_Decr(_tmPf16);
}

JB_String* SC_Cpp_FuncHeader(Cpp_Export* Self, SCFunction* F) {
	JB_String* Rz = JB_Incr(JB_LUB[0]);
	SC_Cpp__WriteFunctionHeader(F, Self->T);
	JB_SetRef(Rz, JB_FS_GetResult(Self->T));
	JB_FS_AppendString(Self->HeaderProj, Rz);
	JB_FS_AppendString(Self->HeaderProj, JB_LUB[568]);
	if (F->IsExternalLib) {
		JB_SetRef(Rz, JB_LUB[0]);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Cpp_FuncStart(Cpp_Export* Self, FastStringCpp* Fs, SCFunction* F, JB_String* Funcheader) {
	if (F->IsAPI) {
		JB_FS_AppendString(Fs, JB_LUB[1449]);
	}
	SC_Cpp_OptStart(Self, Fs, F->MinOpt, 0);
	JB_FS_AppendString(Fs, Funcheader);
	(JB_FS_LengthSet(Self->T, 0));
	JB_FS_AppendByte(Fs, ' ');
}

void SC_Cpp_ListAllFuncs(Cpp_Export* Self, FastStringCpp* Fs, JB_String* Lib_pack) {
	JB_FS_AppendString(Fs, JB_LUB[395]);
	{
		Array* _LoopSrcf3 = JB_Incr(SC__PackMaker_LibFuncs);
		int _if1 = 0;
		while (true) {
			SCFunction* F = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf3, _if1)));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			if (F->IsCppInBuilt == 1) {
				SC_Cpp_MakeWrapperFor(Self, Fs, F);
			}
			JB_Decr(F);
			_if1++;
		};
		JB_Decr(_LoopSrcf3);
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[75]);
	{
		Array* _LoopSrcf6 = JB_Incr(SC__PackMaker_LibFuncs);
		int _if4 = 0;
		while (true) {
			SCFunction* F = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf6, _if4)));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			JB_String* _tmPf10 = JB_Incr(SC_Func_WrappedName(F));
			JB_Decr(F);
			SC_FS_appendvoid(Fs, _tmPf10, 0);
			JB_Decr(_tmPf10);
			_if4++;
		};
		JB_Decr(_LoopSrcf6);
	}
	;
	SC_FS_appendvoid(Fs, JB_LUB[440], 0);
	{
		Array* _LoopSrcf9 = JB_Incr(SC__PackMaker_LibGlobs);
		int _if7 = 0;
		while (true) {
			SCDecl* G = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf9, _if7)));
			if (G == nil) {
				JB_Decr(G);
				break;
			}
			SC_FS_appendvoid(Fs, G->ExportName, '&');
			JB_Decr(G);
			_if7++;
		};
		JB_Decr(_LoopSrcf9);
	}
	;
	SC_FS_appendvoid(Fs, JB_LUB[440], 0);
	JB_FS_AppendString(Fs, JB_LUB[272]);
	JB_String* Pack_str = JB_Incr(JB_Str_Compress(Lib_pack, kJB__MZLab_Default, nil));
	if ((!JB_FreeIfDead(JB_Str_Parse(Pack_str, JB_SyxArg, true)))) {
		JB_Str_SyntaxExpect(JB_LUB[543]);
	}
	JB_FS_AppendString(Fs, JB_LUB[1451]);
	SC_FS_AppendCpp(Fs, Pack_str);
	//;
	JB_FS_AppendString(Fs, JB_LUB[448]);
	JB_FS_AppendInt32(Fs, JB_Str_Length(Pack_str));
	JB_Decr(Pack_str);
	JB_FS_AppendString(Fs, JB_LUB[905]);
	//;
}

void SC_Cpp_MakeWrapperFor(Cpp_Export* Self, FastStringCpp* Fs, SCFunction* F) {
	JB_String* N = JB_Incr(SC_Func_WrappedName(F));
	SC_Cpp__WriteFuncSub(F, N, Fs);
	JB_Decr(N);
	JB_FS_AppendString(Fs, JB_LUB[206]);
	if (F->ReturnType) {
		JB_FS_AppendString(Fs, JB_LUB[1899]);
	}
	JB_FS_AppendString(Fs, F->ExportName);
	SC_Cpp__WriteFuncArgs(F, Fs, true);
	JB_FS_AppendString(Fs, JB_LUB[570]);
}

void SC_Cpp_OptEnd(Cpp_Export* Self, FastStringCpp* Fs, int M, bool Force) {
	if (((bool)M) and SC_Cpp_CanOpt(Self, Force)) {
		JB_FS_AppendString(Fs, JB_LUB[62]);
	}
}

#pragma GCC optimize ("O3")
void SC_Cpp_OptStart(Cpp_Export* Self, FastStringCpp* Fs, int M, bool Force) {
	if (((bool)M) and SC_Cpp_CanOpt(Self, Force)) {
		JB_String* S = JB_Incr(JB_LUB[1910]);
		if (M <= 3) {
			JB_SetRef(S, JB_int_RenderFS(M, nil));
		}
		//;
		JB_FS_AppendString(Fs, JB_LUB[232]);
		JB_FS_AppendString(Fs, S);
		JB_Decr(S);
		JB_FS_AppendString(Fs, JB_LUB[220]);
		//;
	}
}
#pragma GCC reset_options



void SC_Cpp_PreRun(Cpp_Export* Self) {
	JB_FS_AppendString(Self->AllTypes, JB_LUB[61]);
	JB_FS_AppendByte(Self->HeaderProj, '\n');
	JB_FS_AppendString(Self->ModuleProperties, JB_LUB[394]);
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[1561]);
	JB_FS_AppendString(_fsf0, SC__Comp_ProjectName);
	JB_FS_AppendString(_fsf0, JB_LUB[367]);
	JB_String* Str = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_FS_AppendString(Self->ModuleProperties, Str);
	JB_Decr(Str);
}

void SC_Cpp_Run(Cpp_Export* Self) {
	{
		Array* _LoopSrcf2 = JB_Incr(SC__Comp_ClassList);
		int _if0 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			if ((!SC_Class_IsFunc(C))) {
				SC_Cpp__WriteType(C, Self->AllTypes, true);
			}
			JB_Decr(C);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	{
		Array* _LoopSrcf5 = JB_Incr(SC__Comp_ClassList);
		int _if3 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf5, _if3)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			if (SC_Class_IsFunc(C)) {
				SC_Cpp__WriteType(C, Self->AllTypes, false);
			}
			JB_Decr(C);
			_if3++;
		};
		JB_Decr(_LoopSrcf5);
	}
	;
	{
		Array* _LoopSrcf8 = JB_Incr(SC__Comp_ModuleList);
		int _if6 = 0;
		while (true) {
			SCModule* C = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf8, _if6)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Cpp_Codify(Self, C, JB_LUB[0]);
			JB_Decr(C);
			_if6++;
		};
		JB_Decr(_LoopSrcf8);
	}
	;
	{
		Array* _LoopSrcf11 = JB_Incr(SC__Comp_ModuleList);
		int _if9 = 0;
		while (true) {
			SCModule* C = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf11, _if9)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			SC_Cpp_ExportModuleProperties(Self, C, nil);
			JB_Decr(C);
			_if9++;
		};
		JB_Decr(_LoopSrcf11);
	}
	;
	SC_Cpp_CodifyInlines(Self);
	if (SC__Options_ProjectIsLibrary) {
		JB_File* WriteTo = JB_Incr(SC_Cpp__APIHeader());
		if (JB_File_SyntaxCast(WriteTo)) {
			FastStringCpp* File = JB_Incr(SC_Cpp_StreamChild(Self, JB_LUB[611]));
			JB_FS_AppendString(File, JB_LUB[70]);
			JB_FS_AppendString(File, JB_LUB[234]);
			SC_Cpp_CodifyFuncs(Self, File, SC__Comp_API_Funcs);
			JB_FS_AppendString(File, JB_LUB[233]);
			JB_FS_AppendString(File, JB_LUB[396]);
			JB_Decr(File);
			SC_Cpp_WriteAPIHeader(Self, WriteTo);
		}
		JB_Decr(WriteTo);
	}
}

void SC_Cpp_SetupFlow(Cpp_Export* Self, SCFunction* F) {
	JB_SetRef(SC__Func_CurrFunc, F);
	if (SC__Options_GenFlowControlCode and (!F->FlowDisabled)) {
		JB_SetRef(SC__Cpp_IfName, JB_LUB[1702]);
		JB_SetRef(SC__Cpp_WhileName, JB_LUB[2052]);
		JB_SetRef(SC__Comp_TernaryFunc->ExportName, JB_LUB[972]);
	}
	 else {
		JB_SetRef(SC__Cpp_IfName, JB_LUB[1697]);
		JB_SetRef(SC__Cpp_WhileName, JB_LUB[2047]);
		JB_SetRef(SC__Comp_TernaryFunc->ExportName, JB_LUB[971]);
	}
}

FastStringCpp* SC_Cpp_StreamChild(Cpp_Export* Self, JB_String* S) {
	FastStringCpp* Rz = nil;
	JB_String* _tmPf0 = JB_Incr(JB_Str_TrimExtAndPath(S, true));
	JB_SetRef(Rz, SC_FastStringCpp_Constructor(nil, _tmPf0));
	JB_Decr(_tmPf0);
	if (JB_Str_OperatorIsa(S, JB_LUB[1687])) {
		JB_Array_SyntaxAppend(Self->Outputs_h, Rz);
		JB_FS_AppendString(Rz, JB_LUB[397]);
		JB_FS_AppendString(Rz, S);
	}
	 else {
		JB_Array_SyntaxAppend(Self->Outputs_cpp, Rz);
	}
	JB_FS_AppendByte(Rz, '\n');
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Cpp_WriteAPIFuncHeader(Cpp_Export* Self, SCFunction* F, FastStringCpp* Fs) {
	SC__Cpp_WriteAPI = true;
	SC_Cpp__WriteFunctionHeader(F, Fs);
	SC__Cpp_WriteAPI = false;
}

void SC_Cpp_WriteAPIHeader(Cpp_Export* Self, JB_File* Destfile) {
	if (Destfile == nil) {
		return;
	}
	FastStringCpp* Fs = JB_Incr(SC_FastStringCpp_Constructor(nil, JB_LUB[0]));
	JB_String* _tmPf14 = JB_Incr(SC_Cpp__CppLicence());
	JB_FS_AppendString(Fs, _tmPf14);
	JB_Decr(_tmPf14);
	JB_FS_AppendString(Fs, JB_LUB[50]);
	{
		Array* _LoopSrcf7 = JB_Incr(SC__Comp_API_List);
		int _if5 = 0;
		while (true) {
			Message* M = JB_Incr(((Message*)JB_Array_Value(_LoopSrcf7, _if5)));
			if (M == nil) {
				JB_Decr(M);
				break;
			}
			if (JB_Msg_SyntaxEquals(M, JB_LUB[1545], false)) {
				Message* F = JB_Incr(((Message*)JB_Ring_First(M)));
				SCClass* Cls = JB_Incr(SC_Comp__SyntaxAccess(F));
				JB_Decr(F);
				if ((!Cls)) {
					JB_Decr(Cls);
					JB_Decr(M);
					JB_Decr(_LoopSrcf7);
					JB_Decr(Fs);
					return;
				}
				if (SC_Class_IsObject(Cls)) {
					//;
					JB_FS_AppendString(Fs, JB_LUB[1973]);
					JB_String* _tmPf15 = JB_Incr(SC_Class_APIStructName(Cls));
					JB_FS_AppendString(Fs, _tmPf15);
					JB_Decr(_tmPf15);
					JB_FS_AppendString(Fs, JB_LUB[152]);
					//;
				}
				 else if (SC_Class_IsDataTypeOrFP(Cls)) {
					//;
					JB_FS_AppendString(Fs, JB_LUB[2006]);
					JB_String* _tmPf16 = JB_Incr(SC_Class_CStructName(Cls->Super));
					JB_FS_AppendString(Fs, _tmPf16);
					JB_Decr(_tmPf16);
					JB_FS_AppendByte(Fs, ' ');
					JB_String* _tmPf17 = JB_Incr(SC_Class_APIStructName(Cls));
					JB_FS_AppendString(Fs, _tmPf17);
					JB_Decr(_tmPf17);
					JB_FS_AppendString(Fs, JB_LUB[567]);
					//;
				}
				 else {
					if (true) {
						JB_Msg_SyntaxExpect(M, JB_LUB[699]);
					}
				}
				JB_Decr(Cls);
			}
			JB_Decr(M);
			_if5++;
		};
		JB_Decr(_LoopSrcf7);
	}
	;
	SCClass* PrevCls = nil;
	{
		Array* _LoopSrcf10 = JB_Incr(SC__Comp_API_Funcs);
		int _if8 = 0;
		while (true) {
			SCFunction* F = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf10, _if8)));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			if (F->Cls != PrevCls) {
				JB_SetRef(PrevCls, F->Cls);
				JB_FS_AppendString(Fs, JB_LUB[49]);
				if (PrevCls) {
					JB_FS_AppendString(Fs, PrevCls->Name);
				}
				 else {
					JB_FS_AppendString(Fs, JB_LUB[899]);
				}
				JB_FS_AppendString(Fs, JB_LUB[177]);
			}
			if ((!F->IsWrapper)) {
				SC_Cpp_WriteAPIFuncHeader(Self, F, Fs);
			}
			JB_FS_AppendByte(Fs, ';');
			if (JB_Str_Exists(F->Description)) {
				//;
				JB_FS_AppendString(Fs, JB_LUB[149]);
				JB_FS_AppendString(Fs, F->Description);
				JB_FS_AppendString(Fs, JB_LUB[135]);
				//;
			}
			JB_Decr(F);
			JB_FS_AppendByte(Fs, '\n');
			_if8++;
		};
		JB_Decr(_LoopSrcf10);
	}
	;
	JB_Decr(PrevCls);
	if (JB_Array_SyntaxCast(SC__Comp_SyxArray)) {
		JB_FS_AppendString(Fs, JB_LUB[51]);
		{
			Array* _LoopSrcf13 = JB_Incr(SC__Comp_SyxArray);
			int _if11 = 0;
			while (true) {
				JB_String* S = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf13, _if11)));
				if (S == nil) {
					JB_Decr(S);
					break;
				}
				JB_String* Slower = JB_Incr(JB_Str_LowerCase(S));
				SyntaxObj* _tmPf18 = JB_Incr(((SyntaxObj*)JB_Dict_ValueStr(JB__SyxDict_, Slower)));
				int Id = ((int)_tmPf18->ID);
				JB_Decr(_tmPf18);
				//;
				JB_FS_AppendString(Fs, JB_LUB[229]);
				JB_FS_AppendString(Fs, S);
				JB_Decr(S);
				JB_FS_AppendByte(Fs, ' ');
				JB_FS_AppendInt32(Fs, Id);
				JB_FS_AppendString(Fs, JB_LUB[567]);
				//;
				//;
				JB_FS_AppendString(Fs, JB_LUB[228]);
				JB_FS_AppendString(Fs, Slower);
				JB_Decr(Slower);
				JB_FS_AppendByte(Fs, ' ');
				JB_FS_AppendInt32(Fs, Id);
				JB_FS_AppendByte(Fs, '\n');
				//;
				_if11++;
			};
			JB_Decr(_LoopSrcf13);
		};
	}
	JB_FS_AppendString(Fs, JB_LUB[53]);
	JB_String* _tmPf19 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	SC_Cpp__SmartWrite(_tmPf19, Destfile);
	JB_Decr(_tmPf19);
}

void SC_Cpp_WriteHeader(Cpp_Export* Self) {
	FastStringCpp* Fs = JB_Incr(SC_FastStringCpp_Constructor(nil, JB_LUB[0]));
	JB_FS_AppendString(Fs, JB_LUB[52]);
	JB_String* _tmPf6 = JB_Incr(SC_Cpp__CppLicence());
	JB_FS_AppendString(Fs, _tmPf6);
	JB_Decr(_tmPf6);
	JB_FS_AppendString(Fs, JB_LUB[60]);
	{
		Array* _LoopSrcf2 = JB_Incr(SC__Cpp_H_Input);
		int _if0 = 0;
		while (true) {
			JB_String* H = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (H == nil) {
				JB_Decr(H);
				break;
			}
			SC_FS_IncludeH(Fs, H);
			JB_Decr(H);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[54]);
	{
		Array* _LoopSrcf5 = JB_Incr(Self->Outputs_h);
		int _if3 = 0;
		while (true) {
			FastStringCpp* F = JB_Incr(((FastStringCpp*)JB_Array_Value(_LoopSrcf5, _if3)));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			JB_FS_AppendFastString(Fs, F);
			JB_Decr(F);
			JB_FS_AppendByte(Fs, '\n');
			_if3++;
		};
		JB_Decr(_LoopSrcf5);
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[85]);
	JB_String* _tmPf7 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	JB_File* _tmPf8 = JB_Incr(SC_Cpp__HProduct());
	SC_Cpp__SmartWrite(_tmPf7, _tmPf8);
	JB_Decr(_tmPf7);
	JB_Decr(_tmPf8);
}

JB_File* SC_Cpp__APIHeader() {
	JB_File* Rz = nil;
	Message* Arg = JB_Incr(JB_Msg_Last(SC__Comp_API_Place, JB_SyxArg));
	Message* _tmPf1 = JB_Incr(JB_Msg_FindSyxName(Arg, JB_SyxTmp, JB_LUB[1751], false));
	Message* ForLib = JB_Incr(JB_Msg_NeedSyx(_tmPf1, JB_SyxStr));
	JB_Decr(_tmPf1);
	if (ForLib) {
		Message* _tmPf2 = JB_Incr(JB_Msg_FindSyxName(Arg, JB_SyxTmp, JB_LUB[1639], false));
		Message* FolName = JB_Incr(JB_Msg_NeedSyx(_tmPf2, JB_SyxStr));
		JB_Decr(_tmPf2);
		if (FolName) {
			JB_File* Fol = JB_Incr(JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, FolName->Name));
			if (JB_File_SyntaxCast(Fol)) {
				FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
				JB_FS_AppendString(_fsf0, JB_LUB[796]);
				JB_String* _tmPf3 = JB_Incr(SC_Msg_FileLocation(Arg));
				JB_FS_AppendString(_fsf0, _tmPf3);
				JB_Decr(_tmPf3);
				JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf0));
				JB_Decr(_fsf0);
				if (JB_File_MustExist(Fol, _tmPf4)) {
					JB_String* _tmPf5 = JB_Incr(JB_Str_OperatorPlus(SC__Comp_ProjectName, JB_LUB[1457]));
					JB_SetRef(Rz, JB_File_SyntaxAccess(Fol, _tmPf5));
					JB_Decr(_tmPf5);
				}
				JB_Decr(_tmPf4);
			}
			JB_Decr(Fol);
		}
		JB_Decr(FolName);
	}
	JB_Decr(Arg);
	JB_Decr(ForLib);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Cpp__C_FSListComma(Message* Self, FastStringCpp* Fs) {
	{
		Message* Item = ((Message*)JB_Ring_First(Self));
		Message* _firstf2 = Item;
		while (Item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Item));
			if (_firstf2 != Item) {
				JB_FS_AppendString(Fs, JB_LUB[302]);
			}
			//start;
			JB_Msg_Export(Item, Fs);
			Item = _Nf1;
		};
		;
	};
}

bool SC_Cpp__C_OneParamType(FastStringCpp* Fs, Message* Curr, SCDecl* D) {
	if ((!D)) {
		return nil;
	}
	SCClass* ActualType = JB_Incr(SC_ClassOfObjForC(Curr));
	if ((!ActualType)) {
		JB_Decr(ActualType);
		return nil;
	}
	if (ActualType != D->Type) {
		JB_FS_AppendByte(Fs, '(');
		JB_FS_AppendByte(Fs, '(');
		SC_Cpp__WriteDeclNoName(D, Fs);
		JB_FS_AppendByte(Fs, ')');
		JB_Decr(ActualType);
		return true;
	}
	JB_Decr(ActualType);
	return false;
}

void SC_Cpp__C_ParamsRender(Message* Self, FastStringCpp* Fs) {
	JB_FS_AppendByte(Fs, '(');
	SC_Cpp__C_FSListComma(Self, Fs);
	JB_FS_AppendByte(Fs, ')');
}

void SC_Cpp__C_RenderAcc(Message* Self, FastStringCpp* Fs) {
	JB_Msg_Export(((Message*)JB_Ring_First(Self)), Fs);
	JB_FS_AppendByte(Fs, '[');
	JB_Msg_Export(((Message*)JB_Ring_First(((Message*)JB_Tree_Second(Self)))), Fs);
	JB_FS_AppendByte(Fs, ']');
}

void SC_Cpp__C_RenderArel(Message* Self, FastStringCpp* Fs) {
	JB_Msg_Export(((Message*)JB_Ring_First(Self)), Fs);
	byte S = JB_Str_First(Self->Name);
	if ((S != '&') and (S != '!')) {
		JB_FS_AppendString(Fs, Self->Name);
	}
}

void SC_Cpp__C_RenderArg(Message* Self, FastStringCpp* Fs) {
	JB_FS_AppendByte(Fs, '{');
	Fs->Indent++;
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			JB_FS_LineIndent(Fs);
			JB_Msg_Export(Ch, Fs);
			if ((!(SC_Msg_OperatorIsTmp(Ch, JB_LUB[1697]) or (SC_Msg_OperatorIsTmp(Ch, JB_LUB[1623]) or SC_Msg_OperatorIsTmp(Ch, JB_LUB[1621]))))) {
				JB_FS_AppendByte(Fs, ';');
			}
			Ch = _Nf1;
		};
		;
	}
	;
	Fs->Indent--;
	JB_FS_LineIndent(Fs);
	JB_FS_AppendByte(Fs, '}');
	if (((Message*)JB_Ring_NextSib(Self))) {
		JB_FS_LineIndent(Fs);
	}
}

void SC_Cpp__C_RenderBak(Message* Self, FastStringCpp* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
}

void SC_Cpp__C_RenderBra(Message* Self, FastStringCpp* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if ((!(JB_Msg_OperatorIn(Self, JB_SyxArg) and (JB_Msg_EqualsSyx(F, JB_SyxThg, false))))) {
		JB_FS_AppendByte(Fs, '(');
		JB_Msg_Export(F, Fs);
		JB_FS_AppendByte(Fs, ')');
	}
}

void SC_Cpp__C_RenderBrel(Message* Self, FastStringCpp* Fs) {
	JB_FS_AppendByte(Fs, '(');
	JB_String* S = Self->Name;
	if (JB_Str_Equals(S, JB_LUB[2082], false)) {
		S = JB_LUB[2082];
	}
	JB_FS_AppendString(Fs, S);
	SC_Cpp__RenderInBracketsIfRel(((Message*)JB_Ring_First(Self)), Fs);
	JB_FS_AppendByte(Fs, ')');
}

void SC_Cpp__C_RenderChr(Message* Self, FastStringCpp* Fs) {
	JB_FS_AppendByte(Fs, '\'');
	byte B = JB_Str_First(Self->Name);
	if ((B < 32) and ((B != 9) and (B != 10))) {
		JB_FS_AppendString(Fs, JB_LUB[1418]);
		JB_FS_AppendHex(Fs, B, 2);
	}
	 else {
		JB_String* _tmPf0 = JB_Incr(JB_Str_EscapeChr(Self->Name));
		JB_FS_AppendString(Fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_FS_AppendByte(Fs, '\'');
}

void SC_Cpp__C_RenderDcl(Message* Self, FastStringCpp* Fs) {
	Message* Name = SC_Msg_GetDclName(Self, false);
	SCDecl* D = SC_Msg_AsDecl(Name);
	if ((!D)) {
		JB_Object_SyntaxExpect(nil);
		return;
	}
	SC_Cpp__WriteDecl(D, Fs, SC_DeclsDefault(((Message*)JB_Ring_Last(Self))));
}

void SC_Cpp__C_RenderDot(Message* Self, FastStringCpp* Fs) {
	SCDecl* Obj = SC_Msg_DotMustBeProperty(Self);
	if ((!Obj)) {
		return;
	}
	Message* Ch = ((Message*)JB_Ring_First(Self));
	if (JB_Object_FastIsa(Ch->Obj, &SCModuleData)) {
		SC_Str_Safe(Obj->ExportName, Fs, false);
	}
	 else {
		JB_String* CloseStr = SC_Cpp__CDotType(Self, Obj, Fs);
		JB_Msg_Export(Ch, Fs);
		SCDecl* Ch_decl = SC_DeclOfObjForC(Ch);
		if (Ch_decl) {
			if (SC_Cpp__NeedsDotForC(Ch_decl)) {
				JB_FS_AppendByte(Fs, '.');
			}
			 else {
				JB_FS_AppendString(Fs, JB_LUB[326]);
			}
		}
		SC_Str_Safe(Obj->ExportName, Fs, false);
		JB_FS_AppendString(Fs, CloseStr);
	}
}

void SC_Cpp__C_RenderFnc(Message* Self, FastStringCpp* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	Message* Ch1 = ((Message*)JB_Ring_NextSib(F));
	SCFunction* Fn = ((SCFunction*)Ch1->Obj);
	bool PostBracket = false;
	if ((JB_Object_FastIsa(Fn, &SCFunctionData)) and (!Fn->ProtoType)) {
		if (((bool)((SCFunction*)Fn)->ReturnType) and ((!JB_Msg_EqualsSyx(((Message*)JB_Ring_Parent(Self)), JB_SyxArg, false)))) {
			PostBracket = SC_Cpp__C_OneParamType(Fs, Self, SC_Msg_BraDeclfind(Self));
		}
		JB_FS_AppendString(Fs, ((SCFunction*)Fn)->ExportName);
	}
	 else {
		JB_Msg_Export(F, Fs);
	}
	SC_Cpp__C_ParamsRender(Ch1, Fs);
	if (PostBracket) {
		JB_FS_AppendByte(Fs, ')');
	}
}

void SC_Cpp__C_RenderItem(Message* Self, FastStringCpp* Fs) {
	JB_Msg_Export(((Message*)JB_Tree_Second(Self)), Fs);
}

void SC_Cpp__C_RenderList(Message* Self, FastStringCpp* Fs) {
	JB_Object* D = Self->Obj;
	if (JB_Object_FastIsa(D, &SCDeclData)) {
		JB_FS_AppendString(Fs, ((SCDecl*)D)->Type->Name);
		SC_Msg_MiniArgCpp(Self, Fs);
	}
}

void SC_Cpp__C_RenderNum(Message* Self, FastStringCpp* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
	SCDecl* D = SC_Msg_AsDecl(Self);
	if (D) {
		if (D->Type->TypeInfo == kJB__TC_Float) {
			JB_FS_AppendByte(Fs, 'f');
		}
	}
}

void SC_Cpp__C_RenderOpp(Message* Self, FastStringCpp* Fs) {
	JB_String* S = Self->Name;
	if (JB_Str_Equals(S, kJB_kBitOr, false)) {
		JB_FS_AppendByte(Fs, '|');
	}
	 else if (JB_Str_Equals(S, JB_LUB[241], false)) {
		JB_FS_AppendByte(Fs, '&');
	}
	 else if (JB_Str_Equals(S, JB_LUB[1423], false)) {
		JB_FS_AppendByte(Fs, '^');
	}
	 else if (JB_Str_Equals(S, JB_LUB[2082], false)) {
		JB_FS_AppendByte(Fs, '~');
	}
	 else if (JB_Str_Equals(S, JB_LUB[1794], false)) {
		JB_FS_AppendByte(Fs, '%');
	}
	 else {
		JB_FS_AppendString(Fs, S);
	}
}

void SC_Cpp__C_RenderRel(Message* Self, FastStringCpp* Fs) {
	Message* First = ((Message*)JB_Ring_First(Self));
	Message* Ch = First;
	SC_Cpp__RenderInBracketsIfRel(Ch, Fs);
	JB_FS_AppendByte(Fs, ' ');
	Ch = ((Message*)JB_Ring_NextSib(Ch));
	JB_Msg_Export(Ch, Fs);
	JB_FS_AppendByte(Fs, ' ');
	Ch = ((Message*)JB_Ring_NextSib(Ch));
	SC_Cpp__RenderInBracketsIfRel(Ch, Fs);
}

void SC_Cpp__C_RenderShe(Message* Self, FastStringCpp* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[392]);
	JB_FS_AppendString(Fs, Self->Name);
}

void SC_Cpp__C_RenderSStr(Message* Self, FastStringCpp* Fs) {
	JB_String* N = Self->Name;
	if ((!JB_Str_Exists(N))) {
		JB_FS_AppendString(Fs, JB_LUB[962]);
	}
	 else {
		JB_FS_AppendString(Fs, JB_LUB[961]);
		int ID = ((MessageID*)N)->ID;
		JB_FS_AppendInt32(Fs, (ID + 1));
		JB_FS_AppendByte(Fs, ']');
	}
}

void SC_Cpp__C_RenderStr(Message* Self, FastStringCpp* Fs) {
	SC_FS_AppendCpp(Fs, Self->Name);
}

void SC_Cpp__C_RenderThg(Message* Self, FastStringCpp* Fs) {
	JB_Object* O = Self->Obj;
	if (JB_Object_FastIsa(O, &SCDeclData)) {
		SC_Cpp__WriteThgMaybeTypeToo(Self, ((SCDecl*)O), Fs);
		return;
	}
	JB_PrintLine(JB_Str_PlusByte(JB_LUB[884], JB_ObjectID(Self)));
	debugger;
	SC_Msg_Safe(Self, Fs);
}

void SC_Cpp__C_RenderTmp(Message* Self, FastStringCpp* Fs) {
	JB_String* Name = Self->Name;
	if (JB_Str_Equals(Name, JB_LUB[1634], false)) {
		JB_FS_AppendString(Fs, JB_LUB[1524]);
	}
	 else if (JB_Str_Equals(Name, JB_LUB[1697], false)) {
		JB_FS_AppendString(Fs, SC__Cpp_IfName);
	}
	 else if (JB_Str_Equals(Name, JB_LUB[2047], false)) {
		JB_FS_AppendString(Fs, SC__Cpp_WhileName);
	}
	 else if (JB_Str_Equals(Name, JB_LUB[1623], false)) {
		JB_FS_AppendString(Fs, JB_LUB[1622]);
		JB_FS_AppendString(Fs, SC__Cpp_IfName);
	}
	 else if (JB_Str_Equals(Name, JB_LUB[1699], false)) {
		return;
	}
	 else if (JB_Str_Equals(Name, JB_LUB[1891], false)) {
		0;
	}
	 else if (JB_Str_Equals(Name, JB_LUB[1975], false)) {
		JB_FS_AppendString(Fs, JB_LUB[970]);
		JB_DoAt(1);
		SC_Cpp__C_ParamsRender(Self, Fs);
		return;
	}
	 else {
		JB_FS_AppendString(Fs, Name);
	}
	{
		Message* Mv = ((Message*)JB_Ring_First(Self));
		while (Mv) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Mv));
			JB_FS_AppendByte(Fs, ' ');
			JB_Msg_Export(Mv, Fs);
			Mv = _Nf1;
		};
		;
	};
}

void SC_Cpp__C_RenderTyp(Message* Self, FastStringCpp* Fs) {
	int Saveness = SC_Cpp__DontNeedMoreBrackets(Self);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Self)));
	Message* Fc = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	if (Saveness == kSC__Cpp_kNeedsNoBrackets) {
		JB_Msg_Export(Fc, Fs);
		JB_Decr(Fc);
		return;
	}
	if (Saveness == kSC__Cpp_kNeedsOuterBrackets) {
		JB_FS_AppendByte(Fs, '(');
	}
	SC_Cpp__WriteDeclBrackets(Self, Fs);
	if (JB_Msg_EqualsSyx(Fc, JB_SyxRel, false)) {
		JB_FS_AppendByte(Fs, '(');
	}
	if (JB_Msg_EqualsSyx(Fc, JB_SyxArg, false)) {
		SC_Msg_MiniArgCpp(Fc, Fs);
	}
	 else {
		JB_Msg_Export(Fc, Fs);
	}
	if (JB_Msg_EqualsSyx(Fc, JB_SyxRel, false)) {
		JB_FS_AppendByte(Fs, ')');
	}
	JB_Decr(Fc);
	if (Saveness == kSC__Cpp_kNeedsOuterBrackets) {
		JB_FS_AppendByte(Fs, ')');
	}
}

void SC_Cpp__C_RenderUnt(Message* Self, FastStringCpp* Fs) {
	if ((!JB_Msg_SyntaxEquals(Self, JB_LUB[2053], false))) {
		JB_Object_SyntaxExpect(nil);
		return;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Self)));
	Message* Num = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	JB_String* S = JB_Incr(JB_Str_ReplaceAll(Num->Name, JB_LUB[1425], JB_LUB[0], false, nil));
	JB_Decr(Num);
	JB_FS_AppendString(Fs, JB_LUB[447]);
	if ((((bool)(JB_Str_Length(S) % 2))) and JB_byte_IsLetter((JB_Str_First(S)))) {
		JB_FS_AppendByte(Fs, '0');
	}
	JB_FS_AppendString(Fs, S);
	JB_Decr(S);
}

JB_String* SC_Cpp__CDotType(Message* Msg, SCDecl* Type, FastStringCpp* Fs) {
	if ((!SC_Decl_SyntaxIs(Type, kSC__SCDeclInfo_UpgradeableContained))) {
		return JB_LUB[0];
	}
	if (SC_Msg_IsFirstOfSetRel(Msg)) {
		return JB_LUB[0];
	}
	Message* P = ((Message*)JB_Ring_Parent(Msg));
	if (P) {
		JB_Object* Fn = P->Obj;
		if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
			if (SC_Func_SyntaxIs(((SCFunction*)Fn), kSC__FunctionType_Reffer)) {
				return JB_LUB[0];
			}
		}
	}
	JB_FS_AppendString(Fs, JB_LUB[266]);
	SC_Cpp__WriteDeclNoName(Type, Fs);
	JB_FS_AppendString(Fs, JB_LUB[285]);
	return JB_LUB[287];
}

JB_String* SC_Cpp__CppLicence() {
	if ((!JB_Str_Exists(SC__Cpp_CppLicenceStr))) {
		JB_File* F = JB_Incr(SC_Comp__InputFile(nil, JB_LUB[1753], nil));
		if (JB_File_SyntaxCast(F)) {
			JB_SetRef(SC__Cpp_CppLicenceStr, JB_File_ReadAll(F, 16384, true));
		}
		JB_Decr(F);
		if ((!(JB_Str_Exists(SC__Cpp_CppLicenceStr)))) {
			JB_SetRef(SC__Cpp_CppLicenceStr, JB_LUB[99]);
		}
	}
	return SC__Cpp_CppLicenceStr;
}

JB_File* SC_Cpp__CppProduct() {
	JB_File* _tmPf1 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_File* _tmPf0 = JB_Incr(JB_File_SyntaxAccess(_tmPf1, JB_LUB[943]));
	JB_Decr(_tmPf1);
	JB_File* _tmPf2 = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void SC_Cpp__CreateClassListFunc(FastString* Dest) {
	FastStringCpp* Fs = JB_Incr(SC_FastStringCpp_Constructor(nil, JB_LUB[0]));
	SC_Cpp__CreateClassListHeader(Fs, JB_LUB[205]);
	{
		Array* _LoopSrcf2 = JB_Incr(SC__Comp_ClassList);
		int _if0 = 0;
		while (true) {
			SCClass* C = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			if (SC_Class_IsSaveableObject(C) and ((bool)C->MyReacher)) {
				JB_FS_AppendString(Fs, JB_LUB[38]);
				JB_String* _tmPf3 = JB_Incr(SC_Class_CStructName(C));
				JB_FS_AppendString(Fs, _tmPf3);
				JB_Decr(_tmPf3);
				JB_FS_AppendString(Fs, JB_LUB[808]);
				SC_Class_RenderSaveable(C, Fs);
				JB_FS_AppendString(Fs, JB_LUB[291]);
			}
			JB_Decr(C);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[2080]);
	JB_String* _tmPf4 = JB_Incr(SC_Cpp__SplitCpp(Fs, JB_LUB[1921]));
	JB_Decr(Fs);
	JB_FS_AppendString(Dest, _tmPf4);
	JB_Decr(_tmPf4);
}

void SC_Cpp__CreateClassListHeader(FastString* Fs, JB_String* S) {
	JB_FS_AppendString(Fs, JB_LUB[2040]);
	JB_FS_AppendString(Fs, S);
}

int SC_Cpp__DontNeedMoreBrackets(Message* Msg) {
	if (JB_Msg_EqualsSyx(((Message*)JB_Ring_First(Msg)), JB_SyxRel, false)) {
		return kSC__Cpp_kNeedsOuterBrackets;
	}
	Message* P = ((Message*)JB_Ring_Parent(Msg));
	int Result = kSC__Cpp_kNeedsOuterBrackets;
	while (JB_Msg_EqualsSyx(P, JB_SyxBra, false)) {
		P = ((Message*)JB_Ring_Parent(P));
		Result = kSC__Cpp_kNeedsInnerBrackets;
	};
	if (SC_Msg_OperatorIsBRel(P, JB_LUB[214])) {
		return kSC__Cpp_kNeedsNoBrackets;
	}
	if (SC_Msg_OperatorIsTmp(P, JB_LUB[1697]) or SC_Msg_OperatorIsTmp(P, JB_LUB[2047])) {
		return kSC__Cpp_kNeedsNoBrackets;
	}
	return Result;
}

bool SC_Cpp__DoSavers() {
	return SC_Comp__Reached(JB_LUB[1207]) and SC_Comp__Reached(JB_LUB[1922]);
}

void SC_Cpp__ExportAllSource() {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	Cpp_Export* Exp = JB_Incr(SC_Cpp_Constructor(nil));
	SC_Cpp_PreRun(Exp);
	SC_Cpp_Run(Exp);
	SC_Cpp_ExportSyx(Exp);
	SC_Cpp_WriteHeader(Exp);
	if (SC__Options_MakeInterpreter) {
		SC_Cpp_FillInterpreter(Exp);
	}
	SC_Cpp_FinalMergeOutputIntoACpp(Exp);
	JB_Decr(Exp);
}

void SC_Cpp__GenLub(FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[969]);
	JB_FS_AppendInt32(Fs, SC_Crkt__Count() + 1);
	JB_FS_AppendString(Fs, JB_LUB[1421]);
}

void SC_Cpp__GenStrings(FastString* Fs) {
	FastString* Sl2 = JB_Incr(JB_FS_Constructor(nil));
	JB_String* Blob = JB_Incr(SC_Cpp__WriteStrings(Sl2));
	JB_String* Lengths = JB_Incr(JB_FS_GetResult(Sl2));
	JB_Decr(Sl2);
	SC_Cpp__GenLub(Fs);
	FastString* Blob2 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_EncodeLength(Blob2, JB_Str_Length(Lengths));
	JB_FS_EncodeLength(Blob2, JB_Str_Length(Blob));
	JB_FS_EncodeLength(Blob2, SC_Crkt__Count());
	JB_FS_AppendString(Blob2, Lengths);
	JB_Decr(Lengths);
	JB_FS_AppendString(Blob2, Blob);
	JB_SetRef(Blob, JB_FS_GetResult(Blob2));
	JB_Decr(Blob2);
	SC__Cpp_LubHash = JB_Str_CRC(Blob, 0);
	//;
	JB_FS_AppendString(Fs, JB_LUB[1963]);
	JB_FS_AppendInt64(Fs, ((int64)SC__Cpp_LubHash));
	JB_FS_AppendString(Fs, JB_LUB[567]);
	//;
	JB_FS_AppendString(Fs, JB_LUB[1962]);
	SC_FS_AppendCppAll(Fs, Blob);
	JB_Decr(Blob);
	JB_FS_AppendString(Fs, JB_LUB[567]);
	JB_String* FlowStr = JB_Incr(JB_bool_Render0(SC__Options_GenFlowControlCode));
	JB_String* _tmPf1 = JB_Incr(JB_Str_ReplaceAll(SC__Cpp_FindGlobalsCpp, JB_LUB[603], FlowStr, false, nil));
	JB_Decr(FlowStr);
	JB_FS_AppendString(Fs, _tmPf1);
	JB_Decr(_tmPf1);
}

JB_File* SC_Cpp__HProduct() {
	JB_File* _tmPf1 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_File* _tmPf0 = JB_Incr(JB_File_SyntaxAccess(_tmPf1, JB_LUB[944]));
	JB_Decr(_tmPf1);
	JB_File* _tmPf2 = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void SC_Cpp__Init() {
	SC__Cpp_WroteAny = false;
	JB_SetRef(SC__Cpp_Cpp_Includes, (JB_Array_Constructor0(nil)));
	(JB_Syx_ExportAddrSet(JB_SyxAcc, ((FP_fpMsgRender)SC_Cpp__C_RenderAcc)));
	(JB_Syx_ExportAddrSet(JB_SyxItem, ((FP_fpMsgRender)SC_Cpp__C_RenderItem)));
	(JB_Syx_ExportAddrSet(JB_SyxList, ((FP_fpMsgRender)SC_Cpp__C_RenderList)));
	(JB_Syx_ExportAddrSet(JB_SyxPrm, ((FP_fpMsgRender)SC_Cpp__C_RenderList)));
	(JB_Syx_ExportAddrSet(JB_SyxArg, ((FP_fpMsgRender)SC_Cpp__C_RenderArg)));
	(JB_Syx_ExportAddrSet(JB_SyxDot, ((FP_fpMsgRender)SC_Cpp__C_RenderDot)));
	(JB_Syx_ExportAddrSet(JB_SyxDecl, ((FP_fpMsgRender)SC_Cpp__C_RenderDcl)));
	(JB_Syx_ExportAddrSet(JB_SyxFunc, ((FP_fpMsgRender)SC_Cpp__C_RenderFnc)));
	(JB_Syx_ExportAddrSet(JB_SyxThg, ((FP_fpMsgRender)SC_Cpp__C_RenderThg)));
	(JB_Syx_ExportAddrSet(JB_SyxType, ((FP_fpMsgRender)SC_Cpp__C_RenderTyp)));
	(JB_Syx_ExportAddrSet(JB_SyxTmp, ((FP_fpMsgRender)SC_Cpp__C_RenderTmp)));
	(JB_Syx_ExportAddrSet(JB_SyxOpp, ((FP_fpMsgRender)SC_Cpp__C_RenderOpp)));
	(JB_Syx_ExportAddrSet(JB_SyxBRel, ((FP_fpMsgRender)SC_Cpp__C_RenderBrel)));
	(JB_Syx_ExportAddrSet(JB_SyxRel, ((FP_fpMsgRender)SC_Cpp__C_RenderRel)));
	(JB_Syx_ExportAddrSet(JB_SyxNum, ((FP_fpMsgRender)SC_Cpp__C_RenderNum)));
	(JB_Syx_ExportAddrSet(JB_SyxUnit, ((FP_fpMsgRender)SC_Cpp__C_RenderUnt)));
	(JB_Syx_ExportAddrSet(JB_SyxBra, ((FP_fpMsgRender)SC_Cpp__C_RenderBra)));
	(JB_Syx_ExportAddrSet(JB_SyxARel, ((FP_fpMsgRender)SC_Cpp__C_RenderArel)));
	(JB_Syx_ExportAddrSet(JB_SyxChar, ((FP_fpMsgRender)SC_Cpp__C_RenderChr)));
	(JB_Syx_ExportAddrSet(JB_SyxStr, ((FP_fpMsgRender)SC_Cpp__C_RenderStr)));
	(JB_Syx_ExportAddrSet(JB_SyxSStr, ((FP_fpMsgRender)SC_Cpp__C_RenderSStr)));
	(JB_Syx_ExportAddrSet(JB_SyxBack, ((FP_fpMsgRender)SC_Cpp__C_RenderBak)));
	(JB_Syx_ExportAddrSet(JB_SyxSheb, ((FP_fpMsgRender)SC_Cpp__C_RenderShe)));
}

int SC_Cpp__Init_() {
	{
		SC__Cpp_WriteAPI = false;
		SC__Cpp_WroteAny = false;
		JB_SetRef(SC__Cpp_H_Input, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Cpp_H_PostInput, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Cpp_Cpp_Input, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Cpp_Cpp_Includes, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Cpp_IfName, JB_LUB[0]);
		JB_SetRef(SC__Cpp_WhileName, JB_LUB[0]);
		SC__Cpp_LubHash = 0;
		JB_SetRef(SC__Cpp_FindGlobalsCpp, (JB_LUB[33]));
		JB_SetRef(SC__Cpp_CppLicenceStr, JB_LUB[0]);
	}
	;
	return 0;
}

int SC_Cpp__InitCode_() {
	return 0;
}

bool SC_Cpp__MsgOKToImprove(Message* Msg) {
	Message* P = ((Message*)JB_Ring_Parent(Msg));
	if (JB_Msg_EqualsSyx(P, JB_SyxPrm, false)) {
		return (SC_Msg_AsFunc(P) != SC__Comp_RefSetRef);
	}
	if ((JB_Msg_EqualsSyx(P, JB_SyxRel, false)) and (Msg == ((Message*)JB_Ring_First(P)))) {
		return false;
	}
	return true;
}

bool SC_Cpp__NeedsDotForC(SCDecl* D) {
	if (D->PointerCount) {
		return nil;
	}
	if (SC_Class_IsStruct(D->Type)) {
		return true;
	}
	return false;
}

JB_File* SC_Cpp__Product(JB_String* Name) {
	JB_File* _tmPf1 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_File* _tmPf0 = JB_Incr(JB_File_SyntaxAccess(_tmPf1, Name));
	JB_Decr(_tmPf1);
	JB_File* _tmPf2 = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void SC_Cpp__RenderInBracketsIfRel(Message* Self, FastStringCpp* Fs) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxRel, false)) {
		JB_FS_AppendByte(Fs, '(');
	}
	JB_Msg_Export(Self, Fs);
	if (JB_Msg_EqualsSyx(Self, JB_SyxRel, false)) {
		JB_FS_AppendByte(Fs, ')');
	}
}

void SC_Cpp__SmartWrite(JB_String* S, JB_File* F) {
	//;
	JB__Flow_Disabled++;
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(((int64)JB_Str_CRC(S, 0)), nil));
	JB_Array_SyntaxAppend(SC__Cpp_Cpp_Includes, _tmPf0);
	JB_Decr(_tmPf0);
	if (JB_File_SyntaxCast(F) and (!JB_File_CompareData(F, S, JB_LUB[0]))) {
		SC__Cpp_WroteAny = true;
		(JB_File_DataSet(F, S));
	}
	JB__Flow_Disabled--;
}

JB_String* SC_Cpp__SplitCpp(FastStringCpp* Fs, JB_String* Name) {
	JB_Incr(Name);
	if (SC__Options_SingleCppOutput) {
		JB_Decr(Name);
		return JB_FS_SyntaxCast(Fs);
	}
	if (Fs->Length <= 1) {
		JB_Decr(Name);
		return JB_LUB[0];
	}
	JB_SetRef(Name, JB_Str_OperatorPlus(Name, JB_LUB[372]));
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_File* _tmPf1 = JB_Incr(SC_Cpp__Product(Name));
	SC_Cpp__SmartWrite(_tmPf0, _tmPf1);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	SC_FS_IncludeH(Fs, Name);
	JB_Decr(Name);
	return JB_FS_SyntaxCast(Fs);
}

void SC_Cpp__WriteClass(SCClass* C, FastStringCpp* T) {
	if (SC__Cpp_WriteAPI) {
		JB_String* _tmPf0 = JB_Incr(SC_Class_APIStructName(C));
		JB_FS_AppendString(T, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_String* _tmPf1 = JB_Incr(SC_Class_CStructName(C));
		JB_FS_AppendString(T, _tmPf1);
		JB_Decr(_tmPf1);
	}
	if (SC_Class_IsObject(C)) {
		JB_FS_AppendByte(T, '*');
	}
}

void SC_Cpp__WriteConst(SCDecl* D, FastStringCpp* T) {
	JB_FS_AppendString(T, JB_LUB[227]);
	SC_Str_Safe(D->ExportName, T, false);
	JB_FS_AppendString(T, JB_LUB[121]);
	JB_Msg_Export(D->Default, T);
	JB_FS_AppendByte(T, ')');
}

void SC_Cpp__WriteDecl(SCDecl* D, FastStringCpp* T, Message* Equality) {
	if ((!D)) {
		JB_FS_AppendString(T, JB_LUB[2039]);
		return;
	}
	if (SC_Decl_IsCArray(D)) {
		SC_Cpp__WriteDeclNoName(D->Internal, T);
	}
	 else {
		SC_Cpp__WriteDeclNoName(D, T);
	}
	if (JB_Str_Exists(D->ExportName)) {
		JB_FS_AppendByte(T, ' ');
		SC_Str_Safe(D->ExportName, T, SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Local));
		if (SC_Decl_IsCArray(D)) {
			JB_FS_AppendByte(T, '[');
			JB_FS_AppendInt32(T, D->C_Array);
			JB_FS_AppendByte(T, ']');
		}
	}
	if (Equality) {
		JB_FS_AppendString(T, JB_LUB[155]);
		JB_Msg_Export(Equality, T);
	}
}

void SC_Cpp__WriteDeclBrackets(Message* Self, FastStringCpp* Fs) {
	JB_FS_AppendByte(Fs, '(');
	SCDecl* D = JB_Incr(SC_Msg_AsDecl(Self));
	if (D) {
		SC_Cpp__WriteDeclNoName(D, Fs);
	}
	 else {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Tree_Second(Self)));
		JB_Msg_Export(_tmPf0, Fs);
		JB_Decr(_tmPf0);
	}
	JB_Decr(D);
	JB_FS_AppendByte(Fs, ')');
}

void SC_Cpp__WriteDeclNoName(SCDecl* D, FastStringCpp* T) {
	SC_Cpp__WriteClass(D->Type, T);
	JB_FS_AppendMultiByte(T, '*', D->PointerCount);
}

void SC_Cpp__WriteFuncArgs(SCFunction* F, FastStringCpp* T, bool Names_only) {
	JB_FS_AppendByte(T, '(');
	bool N = false;
	{
		Array* _LoopSrcf2 = F->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (D == nil) {
				break;
			}
			if (N) {
				JB_FS_AppendString(T, JB_LUB[302]);
			}
			N = true;
			if (Names_only) {
				SC_Str_Safe(D->ExportName, T, true);
			}
			 else {
				SC_Cpp__WriteDecl(D, T, nil);
			}
			_if0++;
		};
	}
	;
	JB_FS_AppendByte(T, ')');
}

void SC_Cpp__WriteFuncSub(SCFunction* F, JB_String* E, FastStringCpp* T) {
	SC_Cpp__WriteDecl(F->ReturnType, T, nil);
	JB_FS_AppendByte(T, ' ');
	JB_FS_AppendString(T, E);
	SC_Cpp__WriteFuncArgs(F, T, false);
}

void SC_Cpp__WriteFunctionHeader(SCFunction* F, FastStringCpp* T) {
	if (F->IsInline) {
		JB_FS_AppendString(T, JB_LUB[1712]);
	}
	SC_Cpp__WriteFuncSub(F, F->ExportName, T);
}

void SC_Cpp__WriteName(JB_String* Name, FastString* Blob, FastString* Lengths) {
	JB_FS_AppendString(Blob, Name);
	JB_FS_AppendByte(Blob, ((byte)0));
	JB_FS_EncodeLength(Lengths, JB_Str_Length(Name));
}

JB_String* SC_Cpp__WriteStrings(FastString* Lengths) {
	FastString* Fs = JB_FS_Constructor(nil);
	{
		Array* _LoopSrcf2 = SC__Crkt_List;
		int _if0 = 0;
		while (true) {
			MessageID* S = ((MessageID*)JB_Array_Value(_LoopSrcf2, _if0));
			if (S == nil) {
				break;
			}
			SC_Cpp__WriteName(S, Fs, Lengths);
			_if0++;
		};
	}
	;
	return JB_FS_SyntaxCast(Fs);
}

void SC_Cpp__WriteThgMaybeTypeToo(Message* Msg, SCDecl* D, FastStringCpp* Fs) {
	if ((!JB_Str_Exists(D->ExportName))) {
		if (true) {
			JB_Msg_SyntaxExpect(Msg, kJB__Rec_NonFatal);
		}
		SC_Msg_Safe(Msg, Fs);
	}
	 else if ((SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_TypeImprove)) and (SC_Cpp__MsgOKToImprove(Msg))) {
		JB_FS_AppendByte(Fs, '(');
		SC_Cpp__WriteDeclBrackets(Msg, Fs);
		SC_Str_Safe(D->ExportName, Fs, SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Local));
		JB_FS_AppendByte(Fs, ')');
	}
	 else {
		SC_Str_Safe(D->ExportName, Fs, SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_Local));
	}
}

void SC_Cpp__WriteType(SCClass* C, FastStringCpp* Fs, bool Always) {
	if (C->IsBuiltin) {
		return;
	}
	if ((!Always)) {
		if ((!SC_Class_NeedsExport(C))) {
			return;
		}
	}
	SCFunction* F = JB_Incr(C->FuncProto);
	if (F) {
		JB_FS_AppendString(Fs, JB_LUB[81]);
		SC_Cpp__WriteDecl(F->ReturnType, Fs, nil);
		//;
		JB_FS_AppendString(Fs, JB_LUB[122]);
		JB_String* _tmPf2 = JB_Incr(SC_Class_CStructName(C));
		JB_FS_AppendString(Fs, _tmPf2);
		JB_Decr(_tmPf2);
		JB_FS_AppendByte(Fs, ')');
		//;
		SC_Cpp__WriteFuncArgs(F, Fs, false);
	}
	 else {
		if (SC_Class_IsDataTypeOrFP(C)) {
			JB_String* Name = JB_Incr(SC_Class_CStructName(C->Super));
			if ((!JB_Str_Exists(Name))) {
				JB_Decr(Name);
				JB_Decr(F);
				return;
			}
			//;
			JB_FS_AppendString(Fs, JB_LUB[81]);
			JB_FS_AppendString(Fs, Name);
			JB_Decr(Name);
			JB_FS_AppendByte(Fs, ' ');
			//;
		}
		 else {
			if (C->IsWrapper) {
				JB_Decr(F);
				return;
			}
			SC_Class_WriteStructOrUnion(C, Fs);
		}
		JB_String* _tmPf3 = JB_Incr(SC_Class_CStructName(C));
		JB_FS_AppendString(Fs, _tmPf3);
		JB_Decr(_tmPf3);
	}
	JB_Decr(F);
	JB_FS_AppendString(Fs, JB_LUB[567]);
}


DTWrap* JB_Wrap_ConstructorInt(DTWrap* Self, int64 V) {
	if (Self == nil) {
		Self = ((DTWrap*)JB_NewClass(&DTWrapData));
	}
	Self->DeathAction = 0;
	Self->DataType = kJB__TC_s64;
	Self->PrivValue = V;
	return Self;
}

DTWrap* JB_Wrap_ConstructorVoidPtr(DTWrap* Self, void* P) {
	if (Self == nil) {
		Self = ((DTWrap*)JB_NewClass(&DTWrapData));
	}
	Self->DeathAction = 0;
	Self->DataType = kJB__TC_UnusedType;
	Self->PrivValue = ((int64)P);
	return Self;
}

void JB_Wrap_Destructor(DTWrap* Self) {
	if (Self->DeathAction == kJB__Wrap_kFree) {
		JB_free(((void*)Self->PrivValue));
	}
}

int64 JB_Wrap_First(DTWrap* Self) {
	return Self->PrivValue;
}

double JB_Wrap_FloatValue(DTWrap* Self) {
	if (Self) {
		return JB_int64_AsFloat(Self->PrivValue);
	}
	return 0.0f;
}

JB_String* JB_Wrap_Render(DTWrap* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	//visible;
	if (JB_TC_IsFloat(Self->DataType)) {
		JB_FS_AppendDoubleAsText0(Fs, JB_Wrap_FloatValue(Self));
	}
	 else if (Self->DataType == kJB__TC_UnusedType) {
		JB_FS_AppendString(Fs, JB_LUB[447]);
		JB_FS_AppendHex(Fs, Self->PrivValue, 2);
	}
	 else if (Self->DataType == kJB__TC_bool) {
		JB_StringC* _tmPf0 = JB_Incr(((JB_StringC*)JB_Ternary(((bool)Self->PrivValue), JB_LUB[2004], JB_LUB[1648])));
		JB_FS_AppendString(Fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_FS_AppendInt64(Fs, Self->PrivValue);
	}
	JB_String* _tmPf1 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int64 JB_Wrap_Value(DTWrap* Self) {
	if (Self) {
		return Self->PrivValue;
	}
	return 0;
}


JB_Object* JB_DictionaryReader_NextValue(DictionaryReader* Self) {
	if (JB_Nav_MoveNext(Self)) {
		return JB_Nav_Value(Self);
	}
	return nil;
}

SCDecl* SC_DictionaryReader_ValueDecl(DictionaryReader* Self) {
	JB_Object* T = JB_Nav_Value(Self);
	if (JB_Object_FastIsa(T, &SCDeclData)) {
		if ((!((SCDecl*)T)->IsLookupOnly)) {
			return ((SCDecl*)T);
		}
	}
	return nil;
}


int JB_Rec_BadCount(JB_ErrorReceiver* Self) {
	//visible;
	return Self->ErrorCount + Self->ProblemCount;
}

bool JB_Rec_CanAddMore(JB_ErrorReceiver* Self, ErrorSeverity Level) {
	if ((!((!Self->BlockErrors) and (!JB_OutOfMemoryOccurred())))) {
		return nil;
	}
	if (Level == kJB__ErrorSeverity_Problem) {
		return (Self->ProblemCount < Self->MaxProblems);
	}
	if (Level >= kJB__ErrorSeverity_Error) {
		return (Self->ErrorCount < Self->MaxErrors);
	}
	return (Self->WarnCount < Self->MaxErrors);
}

void JB_Rec_Clear(JB_ErrorReceiver* Self) {
	JB_Tree_Clear(Self->Errors);
	Self->ErrorCount = 0;
	Self->WarnCount = 0;
	Self->ProblemCount = 0;
}

JB_ErrorReceiver* JB_Rec_Constructor(JB_ErrorReceiver* Self) {
	if (Self == nil) {
		Self = ((JB_ErrorReceiver*)JB_NewClass(&JB_ErrorReceiverData));
	}
	Self->_LogFunc = nil;
	Self->_LogObj = nil;
	Self->ErrorCount = 0;
	Self->ProblemCount = 0;
	Self->WarnCount = 0;
	Self->LowerErrorsTo = 0;
	Self->BlockErrors = false;
	JB_StringC* _tmPf1 = JB_LUB[0];
	Self->Source = JB_Incr(_tmPf1);
	JB_Error* _tmPf0 = JB_Err_ConstructorNothing(nil);
	Self->Errors = JB_Incr(_tmPf0);
	Self->MaxErrors = 512;
	Self->MaxProblems = 16;
	JB__API_NilHappened_ = nil;
	return Self;
}

void JB_Rec_Destructor(JB_ErrorReceiver* Self) {
	JB_Clear(Self->Errors);
	JB_Clear(Self->_LogObj);
	JB_Clear(Self->Source);
}

bool JB_Rec_HasAnything(JB_ErrorReceiver* Self) {
	return ((bool)Self) and (((bool)(Self->ErrorCount | (Self->ProblemCount | Self->WarnCount))));
}

bool JB_Rec_HasProblems(JB_ErrorReceiver* Self) {
	return ((bool)Self) and (((bool)(Self->ErrorCount | Self->ProblemCount)));
}

void JB_Rec_Incr(JB_ErrorReceiver* Self, JB_Error* Err, bool Add) {
	int N = JB_Ternary(Add, 1, -1);
	if (Err->Severity == kJB__ErrorSeverity_Problem) {
		Self->ProblemCount = (Self->ProblemCount + N);
	}
	 else if (JB_Err_IsError(Err)) {
		Self->ErrorCount = (Self->ErrorCount + N);
	}
	 else if (JB_Err_IsWarning(Err)) {
		Self->WarnCount = (Self->WarnCount + N);
	}
}

JB_Error* JB_Rec_LastError(JB_ErrorReceiver* Self) {
	//visible;
	{
		JB_Error* _LoopSrcf1 = Self->Errors;
		JB_Error* Err = ((JB_Error*)JB_Ring_Last(_LoopSrcf1));
		while (Err) {
			if (JB_Err_IsError(Err)) {
				return Err;
			}
			Err = ((JB_Error*)JB_Ring_PrevSib(Err));
		};
		;
	}
	;
	return nil;
}

void JB_Rec_LogFileWriter(JB_ErrorReceiver* Self, JB_String* Data) {
	//visible;
	JB_Object* F = Self->_LogObj;
	if (JB_Object_Isa(F, &JB_FileData)) {
		if ((!JB_File_Opened(((JB_File*)F)))) {
			JB_File_OpenBlank(((JB_File*)F));
		}
		JB_File_SyntaxAppend(((JB_File*)F), Data);
	}
}

ErrorMarker JB_Rec_Mark(JB_ErrorReceiver* Self) {
	return Self->ErrorCount;
}

bool JB_Rec_OK(JB_ErrorReceiver* Self) {
	return ((bool)Self) and (!Self->ErrorCount);
}

JB_Error* JB_Rec_Pop(JB_ErrorReceiver* Self) {
	JB_Error* Err = ((JB_Error*)JB_Tree_Pop(Self->Errors));
	if (Err) {
		JB_Rec_Incr(Self, Err, false);
		return Err;
	}
	return nil;
}

void SC_Rec_PrePrintErrors(JB_ErrorReceiver* Self) {
	{
		JB_Error* _LoopSrcf2 = JB_Incr(Self->Errors);
		JB_Error* Err = JB_Incr(((JB_Error*)JB_Ring_First(_LoopSrcf2)));
		while (Err) {
			JB_Error* _Nf1 = JB_Incr(((JB_Error*)JB_Ring_NextSib(Err)));
			SC_Err_Improve(Err);
			JB_SetRef(Err, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(Err);
		;
		JB_Decr(_LoopSrcf2);
	}
	;
	if ((!SC__Options_KeepAllErrors)) {
		{
			JB_Error* _LoopSrcf5 = JB_Incr(Self->Errors);
			JB_Error* Err = JB_Incr(((JB_Error*)JB_Ring_First(_LoopSrcf5)));
			while (Err) {
				JB_Error* _Nf4 = JB_Incr(((JB_Error*)JB_Ring_NextSib(Err)));
				if ((!SC_Errors__SyntaxAccess(Err))) {
					JB_Tree_Remove(Err);
				}
				JB_SetRef(Err, _Nf4);
				JB_Decr(_Nf4);
			};
			JB_Decr(Err);
			;
			JB_Decr(_LoopSrcf5);
		};
	}
}

int JB_Rec_PrintErrorsMain(JB_ErrorReceiver* Self, ErrorSeverity Level, bool PrintCount, bool Shell) {
	JB_ErrorReceiver* Rec = JB_Incr(JB_StdErr);
	if (Self) {
		JB_SetRef(Rec, Self);
	}
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	int Count = JB_Rec_RenderErrors(Rec, Fs, Level, Shell);
	JB_Decr(Rec);
	if ((!Count)) {
		JB_Decr(Fs);
		return 0;
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_GetResult(Fs));
	JB_Str_PrintError(_tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_ProblemsFound(Fs, Count);
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(Fs));
	JB_Decr(Fs);
	JB_Str_PrintError(_tmPf1);
	JB_Decr(_tmPf1);
	if (Count) {
		return -1;
	}
	return 0;
}

JB_String* JB_Rec_Render(JB_ErrorReceiver* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_Rec_RenderErrors(Self, Fs, 0, false);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

int JB_Rec_RenderErrors(JB_ErrorReceiver* Self, FastString* Fs, ErrorSeverity Level, bool Shell) {
	int Rz = 0;
	if ((!Self)) {
		return 0;
	}
	{
		JB_Error* Err = ((JB_Error*)JB_Ring_First(Self->Errors));
		while (Err) {
			JB_Error* _Nf1 = ((JB_Error*)JB_Ring_NextSib(Err));
			if (Err->Severity >= Level) {
				Rz++;
				if (Shell) {
					JB_FreeIfDead(JB_Err_RenderClang(Err, Fs));
				}
				 else {
					JB_FreeIfDead(JB_Err_Render(Err, Fs));
				}
				JB_FS_AppendByte(Fs, '\n');
			}
			Err = _Nf1;
		};
	}
	;
	return Rz;
}

int SC_Rec_ReturnErrors(JB_ErrorReceiver* Self, JB_ErrorReceiver* To) {
	int Rz = 0;
	{
		JB_Error* E = ((JB_Error*)JB_Ring_First(Self->Errors));
		while (E) {
			JB_Error* _Nf1 = ((JB_Error*)JB_Ring_NextSib(E));
			JB_Rec_AppendErr(To, E);
			Rz++;
			E = _Nf1;
		};
	}
	;
	return Rz;
}

int JB_Rec_ShellPrintErrors(JB_ErrorReceiver* Self) {
	//visible;
	return JB_Rec_PrintErrorsMain(Self, kJB__ErrorSeverity_Problem, false, true);
}

void JB_Rec_AppendErr(JB_ErrorReceiver* Self, JB_Error* Err) {
	bool CanPrint = false;
	//"Speedie" // useful marker for debugging...;
	JB_Rec_Incr(Self, Err, true);
	if ((!(JB_Str_Exists(Err->Path)))) {
		JB_SetRef(Err->Path, Self->Source);
	}
	if (JB__Err_KeepStackTrace) {
		if ((!(JB_Str_Exists(Err->StackTrace)))) {
			JB_SetRef(Err->StackTrace, JB_App__StackTrace(2, nil));
		}
	}
	FP_fnErrorLogger Log = Self->_LogFunc;
	if (Log) {
		JB_String* _tmPf0 = JB_Incr(JB_Err_Render(Err, nil));
		(Log)(Self, _tmPf0);
		JB_Decr(_tmPf0);
	}
	if (CanPrint and JB_Err_IsBad(Err)) {
		JB_String* _tmPf1 = JB_Incr(JB_Err_Render(Err, nil));
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
	if (((bool)JB__Err_AutoPrint) and (Err->Severity >= kJB__ErrorSeverity_Problem)) {
		JB_DoAt(1);
	}
	if (JB__Err_AutoPrint != kJB__ErrorFlags_PrintAndRemove) {
		JB_Tree_SyntaxAppend(Self->Errors, Err);
	}
}

JB_ErrorReceiver* JB_Rec_SyntaxUsing(JB_ErrorReceiver* Self) {
	JB_ErrorReceiver* Old = JB_Incr(JB_StdErr);
	JB_SetRef(JB_StdErr, Self);
	JB_SafeDecr(Old);
	return Old;
}

void JB_Rec_SyntaxUsingComplete(JB_ErrorReceiver* Self) {
	JB_SetRef(JB_StdErr, Self);
}

int JB_Rec__Init_() {
	{
		JB__Rec_Progress = 0.0f;
	}
	;
	return 0;
}

int JB_Rec__InitCode_() {
	return 0;
}

void JB_Rec__NewErrorWithNode(Message* Node, JB_String* Desc, JB_String* Path) {
	int Sev = JB_StdErr->LowerErrorsTo;
	if ((!Sev)) {
		Sev = kJB__ErrorSeverity_Error;
	}
	JB_Rec__NewErrorSub(Node, Desc, Path, Sev);
}

void JB_Rec__NewErrorSub(Message* Node, JB_String* Desc, JB_String* Path, int Sev) {
	if (JB_Rec_CanAddMore(JB_StdErr, Sev)) {
		if (Desc == nil) {
			Desc = JB_Msg_MiniName(Node, JB_LUB[1340]);
		}
		JB_String* _tmP0 = Path;
		if ((!JB_Str_Exists(_tmP0))) {
			_tmP0 = JB_LUB[0];
		}
		JB_Rec_AppendErr(JB_StdErr, JB_Err_Constructor(nil, JB_Msg_FindNotInserted(Node), Desc, Sev, _tmP0));
	}
}

void JB_Rec__NewProblem(Message* Node, JB_String* Desc, JB_String* Path) {
	JB_Rec__NewErrorSub(Node, Desc, Path, kJB__ErrorSeverity_Problem);
}

void JB_Rec__NewWarning(Message* Node, JB_String* Desc, JB_String* Path) {
	JB_Rec__NewErrorSub(Node, Desc, Path, kJB__ErrorSeverity_Warning);
}


void SC_FS_AppendCpp(FastString* Self, JB_String* S) {
	JB_FS_AppendByte(Self, '"');
	{
		byte* _Startf0 = S->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(S);
		while (_Startf0 < _Endf1) {
			int I = _Startf0 - S->Addr;
			byte C = _Startf0[0];
			if (C == '?') {
				JB_FS_AppendString(Self, JB_LUB[1410]);
			}
			 else if (C == '\\') {
				JB_FS_AppendString(Self, JB_LUB[1411]);
			}
			 else if (C == 9) {
				JB_FS_AppendString(Self, JB_LUB[1417]);
			}
			 else if (C == 10) {
				JB_FS_AppendString(Self, JB_LUB[1414]);
			}
			 else if (C == 13) {
				JB_FS_AppendString(Self, JB_LUB[1416]);
			}
			 else if ((C >= 32) and ((C != '"') and (C <= 127))) {
				JB_FS_AppendByte(Self, C);
			}
			 else {
				JB_FS_AppendString(Self, JB_LUB[1418]);
				JB_FS_AppendHex(Self, C, 2);
				if (JB_byte_IsHex(JB_Str_ByteValue(S, I + 1))) {
					JB_FS_AppendString(Self, JB_LUB[219]);
				}
			}
			_Startf0++;
		};
	}
	;
	JB_FS_AppendByte(Self, '"');
}

void SC_FS_AppendCppAll(FastString* Self, JB_String* S) {
	JB_FS_AppendByte(Self, '"');
	{
		byte* _Startf0 = S->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(S);
		while (_Startf0 < _Endf1) {
			int I = _Startf0 - S->Addr;
			byte C = _Startf0[0];
			JB_FS_AppendString(Self, JB_LUB[1418]);
			JB_FS_AppendHex(Self, C, 2);
			_Startf0++;
		};
	}
	;
	JB_FS_AppendByte(Self, '"');
}

void JB_FS_AppendEscape(FastString* Self, JB_String* S) {
	JB_FS_AppendMultiReplace(Self, S, JB__Constants_EscapeStr, JB_StdErr);
}

void JB_FS_AppendHexStr(FastString* Self, JB_String* Data) {
	if (JB_Str_Exists(Data)) {
		JB_FS_AppendHexData(Self, Data->Addr, JB_Str_Length(Data), 0);
	}
}

void JB_FS_AppendObjectID(FastString* Self, Saveable* O) {
	JB_FS_AppendHex3(Self, JB_ObjectID(O));
}

void JB_FS_AppendObjectOrNil(FastString* Self, JB_Object* O) {
	if (JB_Object_Isa(O, &SaveableData)) {
		if (JB_Sav_IsSaveMarked(((Saveable*)O))) {
			JB_FS_AppendObjectID(Self, ((Saveable*)O));
		}
		 else {
			//"Valid behaviour! For example we save a level, but we don't save the player along with the level. Like terraria.";
			JB_FS_AppendString(Self, JB_LUB[1810]);
		}
	}
	 else if (JB_Object_Isa(O, &JB_StringData)) {
		JB_FreeIfDead(JB_ObjRender(((JB_String*)O), Self));
	}
	 else {
		JB_FS_AppendString(Self, JB_LUB[1810]);
	}
}

void JB_FS_AppendQuotedEscape(FastString* Self, JB_String* S) {
	JB_FS_AppendByte(Self, '"');
	JB_FS_AppendEscape(Self, S);
	JB_FS_AppendByte(Self, '"');
}

void SC_FS_appendvoid(FastString* Self, JB_String* S, byte Extra) {
	JB_FS_AppendString(Self, JB_LUB[34]);
	if (Extra) {
		JB_FS_AppendByte(Self, Extra);
	}
	JB_FS_AppendString(Self, S);
	JB_FS_AppendString(Self, JB_LUB[301]);
}

void SC_FS_AppendWidth(FastString* Self, JB_String* S, int Width) {
	JB_FS_AppendString(Self, S);
	JB_FS_AppendMultiByte(Self, ' ', Width - JB_Str_Length(S));
}

void SC_FS_CArrayAdd(FastString* Self, JB_String* S) {
	{
		byte* _Startf0 = S->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(S);
		while (_Startf0 < _Endf1) {
			byte B = _Startf0[0];
			SC_FS_CArrayAddB(Self, B);
			_Startf0++;
		};
	}
	;
	SC_FS_CArrayAddB(Self, 0);
}

void SC_FS_CArrayAddB(FastString* Self, byte B) {
	if ((!B)) {
		JB_FS_AppendByte(Self, '0');
	}
	 else {
		JB_FS_AppendByte(Self, '\'');
		if (JB_CS_HasChar(JB_C_Letters, B)) {
			JB_FS_AppendByte(Self, B);
		}
		 else {
			JB_FS_AppendString(Self, JB_LUB[1418]);
			JB_FS_AppendHex(Self, B, 2);
		}
		JB_FS_AppendByte(Self, '\'');
	}
	JB_FS_AppendString(Self, JB_LUB[302]);
}

void SC_FS_CArrayAddB0(FastString* Self, byte B) {
	SC_FS_CArrayAddB(Self, B);
	SC_FS_CArrayAddB(Self, 0);
}

void JB_FS_EncodeLength(FastString* Self, uint64 N) {
	int Lim = 256 - 8;
	byte L2 = ((byte)N);
	if (N >= Lim) {
		L2 = (Lim + JB_uint64_LELength(N));
	}
	JB_FS_AppendByte(Self, ((byte)L2));
	if (N >= Lim) {
		JB_FS_lInt(Self, N);
	}
}

void JB_FS_AppendInfo(FastString* Self, JB_String* Name, JB_String* Data) {
	if (JB_Str_Exists(Data)) {
		JB_FS_FieldStart(Self, Name);
		JB_FS_AppendQuotedEscape(Self, Data);
	}
}

void JB_FS_AppendInfoNum(FastString* Self, JB_String* Name, int64 Data) {
	if (Data) {
		JB_FS_FieldStart(Self, Name);
		JB_FS_AppendInt64(Self, Data);
	}
}

void JB_FS_AppendInfoFloat(FastString* Self, JB_String* Name, double Data) {
	if (Data) {
		JB_FS_FieldStart(Self, Name);
		JB_FS_AppendDoubleAsText0(Self, Data);
	}
}

void JB_FS_FieldStart(FastString* Self, JB_String* Name) {
	JB_FS_LineIndent(Self);
	if (JB_Str_Exists(Name)) {
		JB_FS_AppendString(Self, Name);
		JB_FS_AppendByte(Self, ' ');
	}
}

void JB_FS_hInt(FastString* Self, uint64 N) {
	while (true) {
		if (N <= 127) {
			JB_FS_AppendByte(Self, ((byte)(N)));
			break;
		}
		JB_FS_AppendByte(Self, ((byte)(N | 128)));
		N = (N >> 7);
	};
}

void SC_FS_IncludeH(FastString* Self, JB_String* Name) {
	JB_FS_AppendString(Self, JB_LUB[231]);
	JB_FS_AppendString(Self, Name);
	JB_FS_AppendByte(Self, '"');
	JB_FS_AppendByte(Self, '\n');
}

void JB_FS_lInt(FastString* Self, uint64 N) {
	while (N) {
		JB_FS_AppendByte(Self, ((byte)N));
		N = (N >> 8);
	};
}

void JB_FS_MsgErrorName(FastString* Self, JB_String* Name) {
	if (JB_Str_Exists(Name)) {
		JB_FS_AppendString(Self, JB_LUB[120]);
		JB_FS_AppendString(Self, Name);
		JB_FS_AppendString(Self, JB_LUB[251]);
	}
}

void JB_FS_Normal(FastString* Self, JB_String* S) {
	if (JB__ErrorColors_Enabled) {
		JB_FS_AppendString(Self, kJB__ErrorColors_normal);
	}
	JB_FS_AppendByte(Self, '\n');
	JB_FS_AppendString(Self, S);
	JB_FS_AppendByte(Self, ':');
	JB_FS_AppendMultiByte(Self, ' ', 18 - JB_Str_Length(S));
	if (JB__ErrorColors_Enabled) {
		JB_FS_AppendString(Self, kJB__ErrorColors_good);
	}
}

void JB_FS_PrintNicely(FastString* Self, JB_String* S) {
	int Cause = JB_Str_UnPrintable(S);
	if (Cause < 0) {
		//;
		JB_FS_AppendString(Self, JB_LUB[225]);
		JB_String* _tmPf1 = JB_Incr(JB_Str_Hex(S, 0, nil));
		JB_FS_AppendString(Self, _tmPf1);
		JB_Decr(_tmPf1);
		JB_FS_AppendString(Self, JB_LUB[284]);
		//;
	}
	 else if (Cause == '\n') {
		JB_FreeIfDead(JB_Str_ReplaceAll(S, JB_LUB[41], JB_LUB[1414], false, Self));
	}
	 else {
		JB_FS_AppendString(Self, S);
	}
}

void JB_FS_ProblemsFound(FastString* Self, int Count) {
	JB_FS_AppendInt32(Self, Count);
	JB_FS_AppendString(Self, JB_LUB[184]);
	if (Count > 1) {
		JB_FS_AppendByte(Self, 's');
	}
	JB_FS_AppendString(Self, JB_LUB[176]);
}

JB_String* JB_FS_Render(FastString* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendFastString(Fs, Self);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_FS_RenderSpeed(FastString* Self, float Seconds, int64 BytesIn, int64 BytesOut, JB_String* Name) {
	if (JB_Str_Exists(Name)) {
		JB_FS_AppendString(Self, Name);
		JB_FS_AppendString(Self, JB_LUB[559]);
	}
	JB_FreeIfDead(JB_int64_StrSize(BytesIn, Self));
	if (BytesOut) {
		JB_FS_AppendString(Self, JB_LUB[198]);
		JB_FreeIfDead(JB_int64_StrSize(BytesOut, Self));
		JB_FS_AppendString(Self, JB_LUB[121]);
		float Ratio = ((((float)BytesOut) / ((float)BytesIn)) * 100.0f);
		JB_FS_AppendDoubleAsText(Self, Ratio, 1, false, false);
		JB_FS_AppendString(Self, JB_LUB[240]);
	}
	JB_FS_AppendString(Self, JB_LUB[180]);
	if (Seconds < 0.01f) {
		JB_FS_AppendDoubleAsText(Self, Seconds * 1000.0f, 2, false, false);
		JB_FS_AppendByte(Self, 'm');
	}
	 else {
		JB_FS_AppendDoubleAsText(Self, Seconds, 2, false, false);
	}
	JB_FS_AppendByte(Self, 's');
	if ((!Seconds)) {
		return;
	}
	float Scale = 1048576.0f;
	byte Unit = 'M';
	float Rate = ((float)BytesIn) / (Scale * Seconds);
	if (Rate >= 1024.0f) {
		Rate = (Rate / 1024.0f);
		Unit = 'G';
	}
	 else if (Rate <= 1.0f) {
		Rate = (Rate * 1024.0f);
		Unit = 'K';
	}
	int Dp = JB_Ternary(Rate <= 0.01f, 5, 2);
	JB_FS_AppendString(Self, JB_LUB[113]);
	JB_FS_AppendDoubleAsText(Self, Rate, Dp, false, false);
	JB_FS_AppendByte(Self, Unit);
	JB_FS_AppendByte(Self, 'B');
	JB_FS_AppendString(Self, JB_LUB[413]);
}

void JB_FS_AppendMultiStr(FastString* Self, JB_String* Data, int Count) {
	int Needed = JB_Str_Length(Data) * Count;
	if (JB_FS_FreeSize(Self) < Needed) {
		(JB_FS_NeedSpare(Self, Needed));
	}
	{
		int _Valuef1 = 0;
		while (_Valuef1 < Count) {
			JB_FS_AppendString(Self, Data);
			_Valuef1++;
		};
	};
}

void JB_FS_AppendFastString(FastString* Self, FastString* Fs) {
	JB_FS_AppendMem_(Self, Fs->ResultPtr, Fs->Length);
}

void JB_FS_AppendInt64(FastString* Self, int64 Data) {
	JB_FS_AppendIntegerAsText(Self, Data, 1);
}

void JB_FS_AppendInt32(FastString* Self, int Data) {
	JB_FS_AppendIntegerAsText(Self, Data, 1);
}

void JB_FS_AppendFloatAsText(FastString* Self, float F) {
	JB_FS_AppendDoubleAsText0(Self, ((double)F));
}

void JB_FS_AppendBool(FastString* Self, bool B) {
	JB_StringC* _tmPf0 = JB_Incr(((JB_StringC*)JB_Ternary(B, JB_LUB[2004], JB_LUB[1648])));
	JB_FS_AppendString(Self, _tmPf0);
	JB_Decr(_tmPf0);
}

void JB_FS_SyntaxAppend(FastString* Self, Message* Msg) {
	if (Msg) {
		(JB_Syx_RenderAddr(Msg->Func))(Msg, Self);
	}
}

FastString* JB_FS__Use(JB_Object* Other) {
	if (JB_Object_Isa(Other, &FastStringData)) {
		return ((FastString*)Other);
	}
	if (JB_Object_Isa(Other, &JB_StringData)) {
		return JB_Str_Out(((JB_String*)Other), true);
	}
	if (Other) {
		if (true) {
			JB_Object_Fail(Other, JB_LUB[871]);
		}
	}
	return nil;
}




void JB_Flow_AddByte(FlowControl* Self, byte Value) {
	//;
	if (JB_FastBuff_AppendByte((&Self->Buff), Value)) {
		JB_Flow_Flush(Self);
	}
}

bool JB_Flow_Cond(FlowControl* Self, byte Value) {
	//;
	//visible;
	JB_Flow_AddByte(Self, Value);
	StringReader* R = Self->ReadInput;
	if (R == nil) {
		return true;
	}
	int B = JB_SS_Byte(R);
	if (B == Value) {
		return true;
	}
	JB_Flow_Fail(Self, JB_Str__Byte(Value), JB_Str__Byte(B), JB_LUB[0]);
	return false;
}

FlowControl* JB_Flow_Constructor(FlowControl* Self) {
	if (Self == nil) {
		Self = ((FlowControl*)JB_NewClass(&FlowControlData));
	}
	Self->Buff = ((FastBuff){});
	Self->ReadInput = nil;
	Self->Write = nil;
	//;
	JB_FastBuff_NeedAlloc((&Self->Buff), 1048576);
	FastString* _tmPf0 = JB_FS_Constructor(nil);
	Self->Excuse = JB_Incr(_tmPf0);
	return Self;
}

void JB_Flow_Destructor(FlowControl* Self) {
	//;
	JB__Flow_Disabled = JB_int__Max();
	JB_Flow_Flush(Self);
	if (Self->ReadInput != nil) {
		JB_PrintLine(JB_LUB[880]);
	}
	JB_MzSt_Print((&JB__Flow_Stats));
	JB_MzSt_Clear((&JB__Flow_Stats));
	JB_FastBuff_Destructor((&Self->Buff));
	JB_Clear(Self->ReadInput);
	JB_Clear(Self->Write);
	JB_Clear(Self->Excuse);
}

void JB_Flow_Fail(FlowControl* Self, JB_String* Found, JB_String* Expected, JB_String* InputName) {
	//;
	FastString* Fs = Self->Excuse;
	if ((!Fs)) {
		debugger;
		return;
	}
	if (JB_Str_Exists(InputName)) {
		//;
		JB_FS_AppendString(Fs, JB_LUB[822]);
		JB_FS_AppendString(Fs, InputName);
		JB_FS_AppendString(Fs, JB_LUB[354]);
		//;
	}
	if ((!JB_SS_HasAny(Self->ReadInput))) {
		JB_FS_AppendString(Fs, JB_LUB[1056]);
	}
	 else {
		JB_FS_AppendString(Fs, JB_LUB[859]);
		JB_FS_PrintNicely(Fs, Expected);
		JB_FS_AppendString(Fs, JB_LUB[168]);
		JB_FS_PrintNicely(Fs, Found);
	}
	JB_FS_AppendByte(Fs, '\n');
	if ((!JB_Str_Exists(InputName))) {
		JB_FreeIfDead(JB_App__StackTrace(3, Fs));
		JB_PrintLine(JB_FS_GetResult(Fs));
		JB_SetRef(Self->Excuse, nil);
		JB_SetRef(Self->ReadInput, nil);
	}
	if (JB__Flow_BreakOnFail) {
		debugger;
	}
}

void JB_Flow_Flush(FlowControl* Self) {
	//;
	if (Self->Write) {
		JB_String* _tmPf0 = JB_Incr(JB_FastBuff_TmpStr((&Self->Buff)));
		JB_Str_CompressInto(_tmPf0, Self->Write, kJB__MZLab_Default, (&JB__Flow_Stats));
		JB_Decr(_tmPf0);
	}
	Self->Buff.Curr = Self->Buff.Start;
}

void JB_Flow_Init(FlowControl* Self, JB_String* Path, JB_String* DateStr) {
	//;
	if (JB_Flow_LoadPath(Self, Path, false) or JB_Flow_LoadPath(Self, Path, true)) {
		JB_Str_Print(JB_LUB[202]);
	}
	 else {
		JB_Str_Print(JB_LUB[757]);
	}
	JB_PrintLine(Path);
	JB_SetRef(Self->Write, JB_Str_Out(Path, true));
	JB__Flow_Disabled = 0;
	if (JB__Flow_FlowMode >= kJB__Flow_Validate) {
		JB_Flow__Input(DateStr, JB_LUB[635]);
	}
}

bool JB_Flow_LoadPath(FlowControl* Self, JB_String* Path, bool IsPrev) {
	bool Rz = false;
	//;
	if (JB__Flow_FlowMode < kJB__Flow_Validate) {
		return nil;
	}
	JB_String* Name = JB_Incr(((JB_StringC*)JB_Ternary((!IsPrev), JB_LUB[369], JB_LUB[378])));
	JB_String* CmpFile = JB_Incr(JB_Str_AddExt(Path, Name));
	JB_Decr(Name);
	if (IsPrev) {
		if (JB__Flow_AlwaysMove or ((!JB_Str_FileSize(CmpFile)) and ((bool)JB_Str_FileSize(Path)))) {
			JB_File* F = JB_Incr(JB_Str_AsFile(Path));
			if (JB_File_Exists(F, false)) {
				if ((!JB_ErrorInt_SyntaxCast(JB_File_MoveTo(F, CmpFile)))) {
					JB_Decr(F);
					JB_Decr(CmpFile);
					return nil;
				}
			}
			JB_Decr(F);
		}
	}
	if (JB_Str_FileSize(CmpFile)) {
		JB_String* S = JB_Incr(JB_Str_ReadFile(CmpFile, 1073741824, true));
		if (JB_Safe_SyntaxCast(S)) {
			JB_String* _tmPf0 = JB_Incr(JB_Str_Decompress(S, 268435456, nil));
			JB_SetRef(Self->ReadInput, JB_Str_Stream(_tmPf0));
			JB_Decr(_tmPf0);
			Rz = JB_SS_HasAny(Self->ReadInput);
			if (Rz) {
				JB_Str_Print(JB_LUB[1105]);
				JB_Str_Print(CmpFile);
			}
		}
		JB_Decr(S);
	}
	JB_Decr(CmpFile);
	return Rz;
}

FlowControlStopper JB_Flow__FlowAllow(JB_String* Name, uint64 StartCode) {
	//;
	if ((!JB__Flow_FlowMode)) {
		return 0;
	}
	JB__Flow_Disabled = JB_int__Max();
	FlowControl* F = JB_Incr(JB_Flow_Constructor(nil));
	JB_SetRef(JB__Flow_Flow, F);
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(Name, JB_LUB[383]));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[415], _tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(JB_int64_Hex(((int64)StartCode), nil));
	JB_Flow_Init(F, _tmPf0, _tmPf2);
	JB_Decr(F);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf2);
	return 0;
}

int JB_Flow__Init_() {
	{
		JB__Flow_Stats = ((CompressionStats){});
		JB__Flow_Disabled = JB_int__Max();
		JB__Flow_FlowMode = kJB__Flow_Validate;
		JB__Flow_AlwaysMove = true;
		JB__Flow_BreakOnFail = false;
	}
	;
	return 0;
}

int JB_Flow__InitCode_() {
	return 0;
}

bool JB_Flow__InputStrings(Array* Lines, JB_String* Name) {
	//;
	JB_String* _tmPf0 = JB_Incr(JB_Array_join(Lines, JB_LUB[41]));
	JB_Flow__Input(_tmPf0, Name);
	JB_Decr(_tmPf0);
	return false;
}

void JB_Flow__Input(JB_String* Data, JB_String* Name) {
	//visible;
	//;
	if (JB__Flow_Disabled) {
		return;
	}
	JB__Flow_Disabled = 1;
	FlowControl* F = JB__Flow_Flow;
	StringReader* R = F->ReadInput;
	if (R != nil) {
		JB_String* Str = JB_Incr(JB_SS_Str(R, JB_Str_Length(Data), 0));
		if ((!JB_Str_Equals(Str, Data, false))) {
			JB_Flow_Fail(F, Str, Data, Name);
		}
		JB_Decr(Str);
	}
	{
		byte* _Startf0 = Data->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(Data);
		while (_Startf0 < _Endf1) {
			byte C = _Startf0[0];
			JB_Flow_AddByte(F, C);
			_Startf0++;
		};
	}
	;
	JB__Flow_Disabled = 0;
}

void JB_Flow__Stop() {
	//;
	JB__Flow_Disabled = JB_int__Max();
	JB_SetRef(JB__Flow_Flow, nil);
}

bool JB_Flow__Cond(bool Value) {
	//visible;
	//;
	if (JB__Flow_Disabled) {
		return Value;
	}
	JB__Flow_Disabled = 1;
	JB_Flow_Cond(JB__Flow_Flow, ((byte)JB_Ternary(Value, 'T', 'F')));
	JB__Flow_Disabled = 0;
	return Value;
}


void SC_Instruction_Const(Instruction* Self) {
	Self->aType = kSC__Instruction_kTypeConst;
}

Instruction* SC_Instruction_Constructor(Instruction* Self, JB_String* FormName, JB_String* Name, int Pos) {
	if (Self == nil) {
		Self = ((Instruction*)JB_NewClass(&InstructionData));
	}
	Self->aType = 0;
	Self->FormName = JB_Incr(FormName);
	Self->OpCode = Pos;
	Self->Name = JB_Incr(Name);
	xC2xB5Form* _tmPf0 = SC_xC2xB5Form__Needform(Self->FormName);
	Self->Sizes = JB_Incr(_tmPf0);
	Self->PCount = Self->Sizes->Count;
	return Self;
}

void SC_Instruction_Destructor(Instruction* Self) {
	JB_Clear(Self->Sizes);
	JB_Clear(Self->FormName);
	JB_Clear(Self->Name);
}

bool SC_Instruction_IsSetConst(Instruction* Self) {
	return Self->aType == kSC__Instruction_kTypeConst;
}

JB_String* SC_Instruction_Render(Instruction* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendString(Fs, Self->Name);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Instruction__Add(JB_String* FormName, JB_String* Name, int Pos) {
	Instruction* Ins = JB_Incr(SC_Instruction_Constructor(nil, FormName, Name, Pos));
	JB_SetRef(SC__Instruction_TypeList[Pos], Ins);
	(JB_Dict_ValueSet(SC__Instruction_TypeDict, Name, Ins));
	JB_Decr(Ins);
}

int SC_Instruction__Init_() {
	{
		JB_SetRef(SC__Instruction_TypeDict, JB_Dict_Constructor(nil));
	}
	;
	return 0;
}

int SC_Instruction__InitCode_() {
	return 0;
}

void SC_Instruction__InstructionInit() {
	//;
	SC_Instruction__Add(JB_LUB[2007], JB_LUB[831], 0);
	SC_Instruction__Add(JB_LUB[2007], JB_LUB[900], 1);
	SC_Instruction__Add(JB_LUB[2007], JB_LUB[1198], 2);
	SC_Instruction__Add(JB_LUB[1975], JB_LUB[1201], 3);
	SC_Instruction__Add(JB_LUB[1901], JB_LUB[1160], 4);
	SC_Instruction__Add(JB_LUB[1741], JB_LUB[981], 5);
	SC_Instruction__Add(JB_LUB[1748], JB_LUB[1161], 6);
	SC_Instruction__Add(JB_LUB[2009], JB_LUB[1152], 7);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[686], 8);
	SC_Instruction__Add(JB_LUB[1907], JB_LUB[1188], 9);
	SC_Instruction__Add(JB_LUB[1559], JB_LUB[1189], 10);
	SC_Instruction__Add(JB_LUB[1905], JB_LUB[609], 11);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[608], 12);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[1199], 13);
	SC_Instruction__Add(JB_LUB[2012], JB_LUB[1003], 14);
	SC_Instruction__Add(JB_LUB[2012], JB_LUB[804], 15);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[1192], 16);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[1193], 17);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[1191], 18);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[643], 19);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[647], 20);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[652], 21);
	SC_Instruction__Add(JB_LUB[2009], JB_LUB[646], 22);
	SC_Instruction__Add(JB_LUB[1514], JB_LUB[644], 23);
	SC_Instruction__Add(JB_LUB[1514], JB_LUB[645], 24);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[650], 25);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[651], 26);
	SC_Instruction__Add(JB_LUB[1548], JB_LUB[683], 27);
	SC_Instruction__Add(JB_LUB[1548], JB_LUB[682], 28);
	SC_Instruction__Add(JB_LUB[1549], JB_LUB[681], 29);
	SC_Instruction__Add(JB_LUB[1549], JB_LUB[684], 30);
	SC_Instruction__Add(JB_LUB[1523], JB_LUB[648], 31);
	SC_Instruction__Add(JB_LUB[1559], JB_LUB[649], 32);
	SC_Instruction__Add(JB_LUB[1904], JB_LUB[984], 33);
	SC_Instruction__Add(JB_LUB[1904], JB_LUB[983], 34);
	SC_Instruction__Add(JB_LUB[1906], JB_LUB[1162], 35);
	SC_Instruction__Add(JB_LUB[2012], JB_LUB[1163], 36);
	SC_Instruction__Add(JB_LUB[2009], JB_LUB[1151], 37);
	SC_Instruction__Add(JB_LUB[1782], JB_LUB[1154], 38);
	SC_Instruction__Add(JB_LUB[1782], JB_LUB[1153], 39);
	SC_Instruction__Add(JB_LUB[1782], JB_LUB[1156], 40);
	SC_Instruction__Add(JB_LUB[1782], JB_LUB[1155], 41);
	SC_Instruction__Add(JB_LUB[1782], JB_LUB[1158], 42);
	SC_Instruction__Add(JB_LUB[1782], JB_LUB[1157], 43);
	SC_Instruction__Add(JB_LUB[1782], JB_LUB[1159], 44);
	SC_Instruction__Add(JB_LUB[1782], JB_LUB[1194], 45);
	SC_Instruction__Add(JB_LUB[1782], JB_LUB[1195], 46);
	SC_Instruction__Add(JB_LUB[1782], JB_LUB[1196], 47);
	SC_Instruction__Add(JB_LUB[1782], JB_LUB[1197], 48);
	SC_Instruction__Add(JB_LUB[1551], JB_LUB[685], 49);
	SC_Instruction__Add(JB_LUB[1905], JB_LUB[1002], 50);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[862], 51);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[868], 52);
	SC_Instruction__Add(JB_LUB[2012], JB_LUB[864], 53);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[863], 54);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[802], 55);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[806], 56);
	SC_Instruction__Add(JB_LUB[2012], JB_LUB[805], 57);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[803], 58);
	SC_Instruction__Add(JB_LUB[2007], JB_LUB[1119], 59);
	SC_Instruction__Add(JB_LUB[1670], JB_LUB[865], 112);
	SC_Instruction__Add(JB_LUB[1670], JB_LUB[866], 113);
	SC_Instruction__Add(JB_LUB[1938], JB_LUB[1190], 114);
}

Instruction* SC_Instruction__SyntaxAccessWithMsg(Message* M) {
	Instruction* _tmPf0 = ((Instruction*)JB_Dict_ValueLower(SC__Instruction_TypeDict, M->Name));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(M, JB_LUB[940]);
		return nil;
	}
	return _tmPf0;
}

Instruction* SC_Instruction__SyntaxAccessWithInt(int Pos) {
	return SC__Instruction_TypeList[Pos];
}


LeakTester* JB_Lk_Constructor(LeakTester* Self, JB_String* Name) {
	if (Self == nil) {
		Self = ((LeakTester*)JB_NewClass(&LeakTesterData));
	}
	Self->MemUsedStart = JB_MemCount();
	Self->Name = JB_Incr(Name);
	JB_Mem_Mark();
	return Self;
}

void JB_Lk_Destructor(LeakTester* Self) {
	JB_Clear(Self->Name);
}

void JB_Lk_FinalTest(LeakTester* Self) {
	JB_Lk_Test2(Self);
	Self->MemUsedStart = nil;
	JB_Mem_Unmark();
}

void JB_Lk_Test2(LeakTester* Self) {
	if ((!Self->MemUsedStart)) {
		return;
	}
	int NewAmount = JB_MemCount();
	int Diff = NewAmount - Self->MemUsedStart;
	if (Diff > 0) {
		debugger;
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[989]);
		JB_FS_AppendInt32(_fsf0, Diff);
		JB_FS_AppendString(_fsf0, JB_LUB[170]);
		JB_FS_AppendString(_fsf0, Self->Name);
		JB_FS_AppendString(_fsf0, JB_LUB[355]);
		JB_FS_AppendInt32(_fsf0, NewAmount);
		JB_FS_AppendByte(_fsf0, '.');
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
}


Macro* SC_Macro_clean(Macro* Self) {
	if ((!Self->Cleaned)) {
		Self->Cleaned = true;
		Message* S = JB_Incr(JB_Macro_Source(Self));
		if (S) {
			SC_Msg_Clean(S, false);
		}
		JB_Decr(S);
	}
	return Self;
}

Macro* JB_Macro_ConstructorStr(Macro* Self, JB_String* S) {
	if (Self == nil) {
		Self = ((Macro*)JB_NewClass(&MacroData));
	}
	Self->Cleaned = false;
	Self->_Parsed = nil;
	Self->Input = JB_Incr(S);
	return Self;
}

Macro* JB_Macro_ConstructorMsg(Macro* Self, Message* S) {
	if (Self == nil) {
		Self = ((Macro*)JB_NewClass(&MacroData));
	}
	Self->Cleaned = false;
	JB_StringC* _tmPf0 = JB_LUB[0];
	Self->Input = JB_Incr(_tmPf0);
	Self->_Parsed = JB_Incr(S);
	return Self;
}

void JB_Macro_Destructor(Macro* Self) {
	JB_Clear(Self->Input);
	JB_Clear(Self->_Parsed);
}

Message* JB_Macro_Run(Macro* Self, Array* Prms) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Msg_ConstructorEmpty(nil));
	JB_Msg_BecomeMacro(Rz, Self, Prms);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Macro_CallFast(Macro* Self, Message* Prm1, Message* Prm2) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Msg_ConstructorEmpty(nil));
	JB_Array_SyntaxAppend(JB__Macro_TmpPrms_, Prm1);
	JB_Array_SyntaxAppend(JB__Macro_TmpPrms_, Prm2);
	JB_Msg_BecomeMacro(Rz, Self, JB__Macro_TmpPrms_);
	JB_Array_Clear(JB__Macro_TmpPrms_);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Macro_Source(Macro* Self) {
	Message* Rz = nil;
	Rz = Self->_Parsed;
	if ((!Rz)) {
		Rz = JB_Str_Parse(Self->Input, JB_SyxArg, true);
		if (Rz) {
			JB_Msg_WipePositions(Rz);
			JB_SetRef(Self->_Parsed, Rz);
		}
	}
	return Rz;
}

int JB_Macro__Init_() {
	{
		JB_SetRef(JB__Macro_TmpPrms_, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

int JB_Macro__InitCode_() {
	return 0;
}


void JB_Mrap_CapacitySet(MWrap* Self, int Value) {
	JB_Mrap_SetCap(Self, Value);
}

MWrap* JB_Mrap_ConstructorPtr(MWrap* Self, int ItemCount, uint ItemSize, byte* Ptr, byte DeathAction) {
	if (Self == nil) {
		Self = ((MWrap*)JB_NewClass(&MWrapData));
	}
	Self->DataType = kJB__TC_UnusedType;
	Self->DeathAction = 0;
	Self->ItemSize = ItemSize;
	Self->Length = 0;
	Self->Capacity = ItemCount;
	Self->_Ptr = Ptr;
	return Self;
}

void JB_Mrap_Destructor(MWrap* Self) {
	if (Self->DeathAction == kJB__Wrap_kFree) {
		JB_free(Self->_Ptr);
	}
}

byte* JB_Mrap_Ptr(MWrap* Self) {
	return ((byte*)Self->_Ptr);
}

bool JB_Mrap_SetCap(MWrap* Self, int Value) {
	if (Self->DeathAction != kJB__Wrap_kFree) {
		return nil;
	}
	int S = ((int)Self->ItemSize);
	int Old = S * Self->Capacity;
	int New = S * Value;
	byte* Mem = JB_realloc(Self->_Ptr, New);
	if (Mem) {
		Self->_Ptr = Mem;
		Self->Capacity = Value;
		if (New > Old) {
			memzero((Mem + Old), New - Old);
		}
		return true;
	}
	if (true) {
		JB_String* _tmPf1 = JB_Incr(JB_int_RenderFS(New, nil));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[692], _tmPf1));
		JB_Decr(_tmPf1);
		JB_Object_Fail(Self, _tmPf0);
		JB_Decr(_tmPf0);
	}
	return false;
}

Array* JB_Mrap__CollectLeaks_(JB_Object* Self) {
	Array* Rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	JB_FindLeakedObject(Self, Rz);
	JB_SafeDecr(Rz);
	return Rz;
}

int JB_Mrap__Init_() {
	{
	}
	;
	return 0;
}

int JB_Mrap__InitCode_() {
	return 0;
}

MWrap* JB_Mrap__Object(int Count, int ItemSize) {
	//visible;
	byte* P = JB_zalloc(Count * ItemSize);
	if (P) {
		return JB_Mrap_ConstructorPtr(nil, Count, ItemSize, P, kJB__Wrap_kFree);
	}
	return nil;
}

void jbl(JB_Object* Self) {
	//visible;
	{
		Array* _LoopSrcf2 = JB_Incr(JB_Mrap__CollectLeaks_(Self));
		int _if0 = 0;
		while (true) {
			JB_Object* Bad = JB_Incr(JB_Array_Value(_LoopSrcf2, _if0));
			if (Bad == nil) {
				JB_Decr(Bad);
				break;
			}
			jdb(Bad);
			JB_Decr(Bad);
			debugger;
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	};
}

byte* JB_Mrap__Zalloc(int N) {
	return JB_zalloc(N);
}



NilTest* SC_NilTest_Constructor(NilTest* Self) {
	if (Self == nil) {
		Self = ((NilTest*)JB_NewClass(&NilTestData));
	}
	Self->V = 0;
	JB_StringC* _tmPf0 = JB_LUB[0];
	Self->V2 = JB_Incr(_tmPf0);
	Self->V4 = ((byte*)((&SC__NilTest_NilTestByte)));
	Self->V3 = ((byte*)0);
	return Self;
}

void SC_NilTest_Destructor(NilTest* Self) {
	JB_Clear(Self->V2);
}

NilTest* SC_NilTest_Exists3(NilTest* Self, NilTest* P) {
	if (SC_NilTest_SyntaxCast(P)) {
		return P;
	}
	return Self;
}

NilTest* SC_NilTest_Exists4(NilTest* Self) {
	return ((NilTest*)JB_Ternary((!SC_NilTest_SyntaxCast(Self)), SC_NilTest_Constructor(nil), Self));
}

NilTest* SC_NilTest_Exists5(NilTest* Self) {
	while (SC_NilTest_SyntaxCast(Self)) {
		return Self;
	};
	return SC_NilTest_Exists4(Self);
}

NilTest* SC_NilTest_Exists7(NilTest* Self) {
	{
		int _Valuef1 = 0;
		while (_Valuef1 < 100) {
			NilTest* X = JB_Incr(SC_NilTest_Exists5(Self));
			if (SC_NilTest_SyntaxCast(X)) {
				JB_SafeDecr(X);
				return X;
			}
			JB_Decr(X);
			_Valuef1++;
		};
	}
	;
	return SC_NilTest_Exists3(Self, nil);
}

int SC_NilTest__Init_() {
	{
		SC__NilTest_NilTestByte = 0;
		JB_SetRef(SC__NilTest_x1, SC_NilTest_Constructor(nil));
		JB_SetRef(SC__NilTest_x2, SC_NilTest_Exists7(SC__NilTest_x1));
		JB_SetRef(SC__NilTest_x3, JB_LUB[0]);
	}
	;
	return 0;
}

int SC_NilTest__InitCode_() {
	return 0;
}


bool JB_PID_IsRunning(ProcessOwner* Self) {
	return JB_PID_Exit(Self) == -1;
}


bool SC_Imp_CanBan(SCImport* Self, SCFile* Scf) {
	bool Rz = false;
	if ((!SC__Imp_STDLibTime)) {
		return true;
	}
	if (SC__Options_ProjectIsMiniLib) {
		JB_File* P = JB_Incr(SC__Comp_BaseProjectPath);
		if (JB_File_SyntaxCast(P)) {
			JB_String* _tmPf0 = JB_Incr(JB_File_Path(Scf));
			Rz = JB_File_DirectoryContains(P, _tmPf0);
			JB_Decr(_tmPf0);
		}
		JB_Decr(P);
	}
	return Rz;
}

SCImport* SC_Imp_Constructor(SCImport* Self, JB_File* F, bool Builtin) {
	if (Self == nil) {
		Self = ((SCImport*)JB_NewClass(&SCImportData));
	}
	Self->Depth = 0;
	Self->Conf = nil;
	Array* _tmPf3 = JB_Array_Constructor0(nil);
	Self->Files = JB_Incr(_tmPf3);
	Self->IsSTDLib = SC__Imp_STDLibTime;
	Self->WarnUnusedFuncs = (!Self->IsSTDLib);
	Dictionary* _tmPf2 = JB_Dict_Constructor(nil);
	Self->Resources = JB_Incr(_tmPf2);
	Self->BlindCast = JB_Ternary(Builtin, 0, ((int)kJB__ErrorSeverity_Error));
	JB_MemoryLayer* _tmPf1 = JB_Mem_CreateLayer((&SCDeclData), Self);
	Self->DeclLayer = JB_Incr(_tmPf1);
	SCNode* _tmPf0 = JB_Incr(SC_Mod__NeuModule(nil, SC__Comp_program, nil));
	SCModule* M = JB_Incr(((SCModule*)_tmPf0));
	JB_Decr(_tmPf0);
	Self->Mod = JB_Incr(M);
	M->Project = Self;
	M->IsImport = true;
	Self->Where = JB_Incr(F);
	if (F != nil) {
		JB_SetRef(M->Name, JB_Str_Name(F));
		SC__Imp_Recent = JB_int64_OperatorMax(SC__Imp_Recent, JB_File_Modified(F));
	}
	JB_Decr(M);
	return Self;
}

void SC_Imp_Destructor(SCImport* Self) {
	JB_Clear(Self->Where);
	JB_Clear(Self->Conf);
	JB_Clear(Self->Files);
	JB_Clear(Self->DeclLayer);
	JB_Clear(Self->Mod);
	JB_Clear(Self->Resources);
}

SCFile* SC_Imp_ImportDir(SCImport* Self, JB_File* F) {
	SCFile* Rz = nil;
	{
		Array* _LoopSrcf2 = JB_Incr(JB_File_List(F, false));
		int _if0 = 0;
		while (true) {
			JB_String* cName = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (cName == nil) {
				JB_Decr(cName);
				break;
			}
			JB_File* _tmPf3 = JB_Incr(JB_File_SyntaxAccess(F, cName));
			JB_File* C = JB_Incr(_tmPf3);
			JB_Decr(_tmPf3);
			JB_String* Ext = JB_Incr(JB_Str_Ext(cName));
			if (JB_Str_ContainsString(cName, JB_LUB[273])) {
				0;
			}
			 else if (JB_File_IsDir(C)) {
				JB_FreeIfDead(SC_Imp_ImportDir(Self, C));
			}
			 else if (SC_Str_IsSpeedieSrc(cName)) {
				SCFile* B = JB_Incr(SC_Imp_ImportSpd(Self, C));
				if (JB_Str_Equals(cName, JB_LUB[1708], true)) {
					JB_SetRef(Rz, B);
				}
				JB_Decr(B);
			}
			 else if ((JB_Str_Equals(Ext, JB_LUB[2034], false)) or ((JB_Str_Equals(Ext, JB_LUB[1666], false)) or ((JB_Str_Equals(Ext, JB_LUB[1941], false)) or (JB_Str_Equals(Ext, JB_LUB[1929], false))))) {
				if ((!(SC__Imp_Shaders))) {
					JB_SetRef(SC__Imp_Shaders, JB_Dict_Constructor(nil));
				}
				(JB_Dict_ValueSet(SC__Imp_Shaders, cName, C));
			}
			 else if (SC_Str_isCLike(Ext)) {
				JB_String* _tmPf4 = JB_Incr(JB_File_Path(C));
				JB_Array_SyntaxAppend(SC__Cpp_Cpp_Input, _tmPf4);
				JB_Decr(_tmPf4);
			}
			 else {
				(JB_Dict_ValueLowerSet(Self->Resources, cName, C));
			}
			JB_Decr(cName);
			JB_Decr(C);
			JB_Decr(Ext);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Imp_ImportMsg(SCImport* Self, Message* J) {
	Message* L = JB_Incr(JB_Msg_Last(J, JB_SyxStr));
	if ((!L)) {
		JB_Decr(L);
		return;
	}
	JB_String* Name = JB_Incr(L->Name);
	JB_Decr(L);
	JB_File* P = JB_Incr(SC_Comp__FindProject(Name, true));
	if ((!JB_File_SyntaxCast(P))) {
		if (JB_Str_ByteValue(Name, 0) != '/') {
			JB_String* _tmPf2 = JB_Incr(SC_Comp__Projects());
			JB_String* _tmPf1 = JB_Incr(JB_Str_SyntaxAccess(_tmPf2, Name));
			JB_Decr(_tmPf2);
			JB_SetRef(P, JB_Str_FileThatExists(_tmPf1, JB_LUB[1473]));
			JB_Decr(_tmPf1);
		}
		 else {
			JB_SetRef(P, JB_Str_FileThatExists(Name, JB_LUB[1473]));
		}
	}
	if ((!JB_File_SyntaxCast(P))) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[733]);
		JB_FS_AppendString(_fsf0, Name);
		JB_FS_AppendByte(_fsf0, '\'');
		JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Msg_SyntaxExpect(J, _tmPf3);
		JB_Decr(_tmPf3);
		JB_Decr(P);
		JB_Decr(Name);
		return;
	}
	SC__Imp_CurrIsManuallyImported++;
	JB_FreeIfDead(SC_Imp__ImportPath(Name, P, Self->Depth + 1, false));
	JB_Decr(Name);
	JB_Decr(P);
	SC__Imp_CurrIsManuallyImported--;
}

SCFile* SC_Imp_ImportSpd(SCImport* Self, JB_File* C) {
	SCFile* Rz = nil;
	JB_String* Path = JB_Incr(JB_Str_LowerCase(C));
	SCFile* _tmPf0 = JB_Incr(((SCFile*)JB_Dict_ValueStr(SC__Comp_Files, Path)));
	if ((JB_File_SyntaxCast(_tmPf0))) {
		JB_File_Fail(C, JB_LUB[873]);
	}
	JB_Decr(_tmPf0);
	JB_SetRef(Rz, SC_SCFile_Constructor(nil, C, Self));
	(JB_Dict_ValueSet(SC__Comp_Files, Path, Rz));
	JB_Decr(Path);
	JB_Array_SyntaxAppend(Self->Files, Rz);
	int N = JB_Array_Size(SC__Imp_AllFiles);
	if (N >= 65536) {
		JB_File_Fail(C, JB_LUB[1313]);
	}
	Rz->filenum = N;
	JB_Array_SyntaxAppend(SC__Imp_AllFiles, Rz);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Imp_IncludeCHeaders(SCImport* Self, JB_File* F, Array* Output) {
	{
		JB_File_ListStart(F);
		while (JB_File_MoveNext(F)) {
			JB_String* _tmPf2 = JB_Incr(JB_File_CurrChild(F));
			JB_File* _tmPf1 = JB_Incr(JB_File_Child(F, _tmPf2));
			JB_Decr(_tmPf2);
			JB_File* C = JB_Incr(_tmPf1);
			JB_Decr(_tmPf1);
			if (((!JB_File_IsDir(C))) and (JB_Str_OperatorIsa(C, JB_LUB[1687]))) {
				JB_Array_SyntaxAppend(Output, C);
			}
			JB_Decr(C);
		};
		JB_File_ListEnd(F);
	};
}

void SC_Imp_IndexConf(SCImport* Self, Message* Conf) {
	Message* Arg = JB_Incr(JB_Msg_NeedSyx(Conf, JB_SyxArg));
	if (Arg) {
		JB_Tree_Remove(Arg);
		JB_SetRef(SC__Comp_ConfMsg, Arg);
		JB_String* Str = JB_Incr(((JB_String*)JB_Ternary(SC__Options_SelfReplacement, JB_Msg_Render(Arg, nil), JB_Msg_RenderJbin(Arg, JB_LUB[0], nil))));
		Message* _tmPf0 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxStr, Str));
		JB_Decr(Str);
		Message* X = JB_Incr(SC_MakeDecl(JB_LUB[0], JB_LUB[1440], _tmPf0, 0));
		JB_Decr(_tmPf0);
		JB_Msg_BecomeMsg(Conf, X);
		JB_Decr(X);
		SC_Mod_MoveToInitFunc(SC__Comp_program, Conf, false);
	}
	JB_Decr(Arg);
}

void SC_Imp_IndexLinkage(SCImport* Self, Message* Link, SCFile* Scf) {
	Message* _tmPf0 = JB_Incr(JB_Msg_GetConf(Link, JB_LUB[2005], false));
	if (JB_Msg_SyntaxEquals(_tmPf0, JB_LUB[1750], true)) {
		Self->IsSTDLib = true;
		Self->WarnUnusedFuncs = false;
	}
	if (SC_Imp_CanBan(Self, Scf)) {
		Message* _tmPf1 = JB_Incr(JB_Msg_GetConf(Link, JB_LUB[1509], false));
		SC_Imp_LoadBanned(Self, _tmPf1);
		JB_Decr(_tmPf1);
	}
	Message* Arg = JB_Incr(JB_Msg_NeedSyx(Link, JB_SyxArg));
	Message* Name = JB_Incr(JB_Msg_GetConf(Arg, JB_LUB[1575], false));
	if (Name) {
		JB_SetRef(Scf->ExportName, Name->Name);
		JB_SetRef(Self->Mod->ExportName, Name->Name);
	}
	Message* Blind = JB_Incr(JB_Msg_GetConf(Arg, JB_LUB[1518], false));
	if (Blind) {
		Self->BlindCast = SC_Msg_Blind(Blind);
	}
	 else if (SC__Options_SelfReplacement) {
		Self->BlindCast = 0;
	}
	Message* Nil = JB_Incr(JB_Msg_GetConf(Arg, JB_LUB[1810], false));
	JB_Decr(Arg);
	if (Nil) {
		if ((!JB_Msg_Yes(Nil))) {
			SC__Options_NilStrength = 0;
		}
	}
	JB_Tree_Remove(Link);
	JB_Decr(Nil);
	JB_Decr(Blind);
	JB_Decr(Name);
	JB_Decr(_tmPf0);
}

void SC_Imp_IndexTargets(SCImport* Self, Message* Tar) {
	{
		Message* _LoopSrcf2 = JB_Msg_Arg(Tar);
		Message* T = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (T) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(T));
			if (JB_Msg_Expect(T, JB_SyxTmp, nil)) {
				Message* Ch = ((Message*)JB_Ring_First(T));
				if (Ch) {
					if (true) {
						JB_Msg_SyntaxExpect(Ch, nil);
					}
				}
				 else {
					(SC_SC_Targets__SyntaxAccessSet(T->Name, true));
				}
			}
			T = _Nf1;
		};
		;
	}
	;
	JB_Tree_Remove(Tar);
}

void SC_Imp_LoadBanned(SCImport* Self, Message* List) {
	if ((!JB_Msg_Expect(List, JB_SyxList, nil))) {
		return;
	}
	Dictionary* X = ({
		Dictionary* _X = SC__Options_BannedClasses;
		if ((!_X)) {
			_X = JB_Dict_Constructor(nil);
			JB_SetRef(SC__Options_BannedClasses, _X);
		}
		 _X;
	});
	{
		Message* Item = ((Message*)JB_Ring_First(List));
		while (Item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Item));
			JB_Msg_Expect(Item, JB_SyxThg, nil);
			(JB_Dict_ValueLowerSet(X, Item->Name, JB_LUB[2053]));
			Item = _Nf1;
		};
		;
	};
}

void SC_Imp_LoadConf(SCImport* Self, SCFile* Scf) {
	JB_SetRef(Self->Mod->ExportName, JB_LUB[634]);
	if ((!JB_File_SyntaxCast(Scf))) {
		return;
	}
	JB_SetRef(Self->Conf, Scf);
	{
		Message* _LoopSrcf2 = SC_SCFile_AST(Scf);
		Message* S = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (S) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(S));
			if ((!JB_Msg_EqualsSyx(S, JB_SyxTmp, false))) {
				0;
			}
			 else if (JB_Msg_SyntaxEquals(S, JB_LUB[1758], true)) {
				SC_Imp_IndexLinkage(Self, S, Scf);
			}
			 else if (JB_Msg_SyntaxEquals(S, JB_LUB[1555], true)) {
				SC_Linkage__CompilerCollect(S);
			}
			 else if (JB_Msg_SyntaxEquals(S, JB_LUB[1557], true)) {
				SC_Imp_IndexConf(Self, S);
			}
			 else if (JB_Msg_SyntaxEquals(S, JB_LUB[1986], true)) {
				SC_Imp_IndexTargets(Self, S);
			}
			S = _Nf1;
		};
		;
	};
}

void SC_Imp_PrepareAll(SCImport* Self) {
	{
		Array* _LoopSrcf2 = Self->Files;
		int _if0 = 0;
		while (true) {
			SCFile* F = ((SCFile*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			JB_FreeIfDead(SC_SCFile_AST(F));
			_if0++;
		};
	};
}

void SC_Imp_ReloadImports(SCImport* Self, SCFile* Index) {
	{
		Message* _LoopSrcf2 = SC_SCFile_AST(Index);
		Message* J = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (J) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(J));
			if (SC_Msg_OperatorIsTmp(J, JB_LUB[1705])) {
				JB_Err__SourceAdd(J);
				SC_Imp_ImportMsg(Self, J);
				JB_Err__SourceRemove();
			}
			J = _Nf1;
		};
		;
	};
}

JB_String* SC_Imp_Render(SCImport* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendString(Fs, Self->Mod->Name);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Imp_Use(SCImport* Self) {
	if (Self) {
		JB_Mem_Use(Self->DeclLayer);
		SC__Imp_Curr = Self;
	}
}

void SC_Imp__ExportShaders() {
	if ((!SC__Imp_Shaders)) {
		return;
	}
	SC_Comp__Stage(JB_LUB[789]);
	SC_Comp__Timer(JB_LUB[789]);
	JB_File* _tmPf2 = JB_Incr(SC_Comp__BuildFolder());
	JB_File* P = JB_Incr(JB_File_SyntaxAccess(_tmPf2, JB_LUB[1177]));
	JB_Decr(_tmPf2);
	if ((!JB_File_SyntaxCast(P))) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(P);
		return;
	}
	JB_FreeIfDead(SC_Str_MakeAndGoInto(P));
	{
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(SC__Imp_Shaders));
		while (true) {
			JB_Object* F = JB_Incr(JB_DictionaryReader_NextValue(_navf0));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			JB_String* Sh_name = JB_Incr(JB_Nav_Name(_navf0));
			if (JB_Object_Isa(F, &JB_FileData)) {
				JB_String* Name = JB_Incr(JB_Str_Name(((JB_File*)F)));
				JB_File* _tmPf3 = JB_Incr(JB_File_SyntaxAccess(P, Name));
				JB_Decr(Name);
				JB_File* Dest = JB_Incr(_tmPf3);
				JB_Decr(_tmPf3);
				JB_String* _tmPf5 = JB_Incr(JB_File_ReadAll(((JB_File*)F), 134217728, true));
				JB_String* _tmPf4 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[68], _tmPf5));
				JB_Decr(_tmPf5);
				(JB_File_DataSet(Dest, _tmPf4));
				JB_Decr(Dest);
				JB_Decr(_tmPf4);
			}
			 else if (JB_Object_Isa(F, &JB_StringData)) {
				JB_File* _tmPf6 = JB_Incr(JB_File_SyntaxAccess(P, Sh_name));
				JB_File* Dest = JB_Incr(_tmPf6);
				JB_Decr(_tmPf6);
				debugger;
				(JB_File_DataSet(Dest, ((JB_String*)F)));
				JB_Decr(Dest);
			}
			JB_Decr(F);
			JB_Decr(Sh_name);
		};
		JB_Decr(_navf0);
	}
	;
	JB_Decr(P);
}

SCImport* SC_Imp__FindImport(JB_String* S) {
	{
		Array* _LoopSrcf2 = SC__Comp_ImportedList;
		int _if0 = 0;
		while (true) {
			SCImport* Imp = ((SCImport*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Imp == nil) {
				break;
			}
			if (JB_Str_Equals(S, Imp->Where, true)) {
				return Imp;
			}
			_if0++;
		};
	}
	;
	return nil;
}

JB_File* SC_Imp__FindInputFolder(JB_File* F) {
	JB_String* FirstName = JB_Incr(JB_LUB[0]);
	{
		JB_File_ListStart(F);
		while (JB_File_MoveNext(F)) {
			JB_String* Name = JB_Incr(JB_File_CurrChild(F));
			if (SC_Imp__IsInputName(Name)) {
				if ((!JB_Str_Exists(FirstName))) {
					JB_SetRef(FirstName, Name);
				}
				 else {
					if (true) {
						FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
						JB_FS_AppendString(_fsf0, JB_LUB[1035]);
						JB_FS_AppendString(_fsf0, Name);
						JB_FS_AppendString(_fsf0, JB_LUB[253]);
						JB_FS_AppendString(_fsf0, FirstName);
						JB_FS_AppendByte(_fsf0, '\'');
						JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf0));
						JB_Decr(_fsf0);
						JB_Object_Fail(nil, _tmPf3);
						JB_Decr(_tmPf3);
					}
				}
			}
			JB_Decr(Name);
		};
		JB_File_ListEnd(F);
	}
	;
	if ((!JB_Str_Exists(FirstName))) {
		FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf1, JB_LUB[702]);
		JB_FS_AppendString(_fsf1, F);
		JB_FS_AppendString(_fsf1, JB_LUB[410]);
		JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		JB_File_Fail(F, _tmPf4);
		JB_Decr(_tmPf4);
		JB_Decr(FirstName);
		return nil;
	}
	JB_File* _tmPf5 = JB_Incr(JB_File_SyntaxAccess(F, FirstName));
	JB_Decr(FirstName);
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

SCImport* SC_Imp__ImportPath(JB_String* Path, JB_File* F, int ImportDepth, bool Builtin) {
	JB_Incr(F);
	SCImport* Rz = nil;
	if ((!(JB_File_MustExist(F, JB_LUB[0]) and SC_Str_IsOKForImport(Path)))) {
		JB_Decr(F);
		JB_Decr(Rz);
		return nil;
	}
	JB_String* _tmPf0 = JB_Incr(JB_File_Path(F));
	JB_String* Fpl = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	SCImport* Old = JB_Incr(((SCImport*)JB_Dict_ValueStr(SC__Comp_ImportedNames, Fpl)));
	if (Old) {
		JB_Decr(F);
		JB_Decr(Fpl);
		JB_Decr(Rz);
		JB_SafeDecr(Old);
		return Old;
	}
	JB_Decr(Old);
	JB_SetRef(Rz, SC_Imp_Constructor(nil, F, Builtin));
	JB_Array_SyntaxAppend(SC__Comp_ImportedList, Rz);
	Rz->Depth = ImportDepth;
	(JB_Dict_ValueSet(SC__Comp_ImportedNames, Fpl, Rz));
	JB_Decr(Fpl);
	SCFile* Conf = nil;
	if (JB_Str_Exists(SC__Options_SingleFileInput) and (!JB_Str_Exists(Path))) {
		JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(SC__Options_SingleFileInput));
		JB_SetRef(Conf, SC_Imp_ImportSpd(Rz, _tmPf1));
		JB_Decr(_tmPf1);
	}
	 else if ((!JB_File_IsDir(F))) {
		JB_SetRef(Conf, SC_Imp_ImportSpd(Rz, F));
	}
	 else {
		if ((!((JB_Str_ContainsString(Path, JB_LUB[387])) and (JB_Str_ByteValue(Path, 0) != '/')))) {
			JB_SetRef(F, SC_Imp__FindInputFolder(F));
			if ((!(JB_File_SyntaxCast(F) and JB_File_MustExist(F, JB_LUB[0])))) {
				JB_Decr(F);
				JB_Decr(Conf);
				JB_Decr(Rz);
				return nil;
			}
		}
		JB_SetRef(Conf, SC_Imp_ImportDir(Rz, F));
	}
	SC_Imp_LoadConf(Rz, Conf);
	JB_File* _tmPf2 = JB_Incr(JB_File_SyntaxAccess(F, JB_LUB[1532]));
	SC_Imp_IncludeCHeaders(Rz, _tmPf2, SC__Cpp_H_Input);
	JB_Decr(_tmPf2);
	JB_File* _tmPf3 = JB_Incr(JB_File_SyntaxAccess(F, JB_LUB[1533]));
	JB_Decr(F);
	SC_Imp_IncludeCHeaders(Rz, _tmPf3, SC__Cpp_H_PostInput);
	JB_Decr(_tmPf3);
	if (JB_File_SyntaxCast(Conf)) {
		SC_Imp_ReloadImports(Rz, Conf);
	}
	JB_Decr(Conf);
	JB_SafeDecr(Rz);
	return Rz;
}

int SC_Imp__Init_() {
	{
		JB_SetRef(SC__Imp_AllFiles, JB_Array_Constructor0(nil));
		SC__Imp_Recent = 0;
		SC__Imp_STDLibTime = false;
		SC__Imp_CurrIsManuallyImported = 0;
	}
	;
	return 0;
}

int SC_Imp__InitCode_() {
	return 0;
}

bool SC_Imp__IsInputName(JB_String* Name) {
	if ((JB_Str_Equals(Name, JB_LUB[1713], true)) or JB_Str_OperatorIsa(Name, JB_LUB[1713])) {
		return true;
	}
	return false;
}

void SC_Imp__NoProj() {
	SC__Imp_Curr = nil;
	JB_ClassData_Restore((&SCDeclData));
}


void SC_NR_Collect(SCNodeRenamer* Self, Message* Msg, JB_String* Name, Message* After) {
	JB_Incr(Msg);
	JB_SetRef(Self->Name, Name);
	while (Msg != After) {
		if (SC_Msg_OperatorIsThing(Msg, Name)) {
			JB_Array_SyntaxAppend(Self->Nodes, Msg);
		}
		JB_SetRef(Msg, ((Message*)JB_Ring_FlatNext0(Msg)));
	};
	JB_Decr(Msg);
}

void SC_NR_CollectDclThg(SCNodeRenamer* Self, Message* DclThg) {
	Message* Dcl = JB_Msg_Ancestor(DclThg, JB_SyxDecl);
	if ((!(((bool)Dcl) and (JB_Msg_EqualsSyx(DclThg, JB_SyxThg, false))))) {
		JB_Msg_SyntaxExpect(DclThg, nil);
		return;
	}
	SC_NR_Collect(Self, DclThg, DclThg->Name, SC_Msg_FullAfter(Dcl));
}

void SC_NR_CollectSelfs(SCNodeRenamer* Self, Message* Root) {
	{
		Message* Msg = JB_Incr(Root);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(Root)));
		while (((bool)(Msg)) and (Msg != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(Msg)));
			if (JB_Msg_EqualsSyx(Msg, JB_SyxSDot, false)) {
				SC_Func__Tran_Sdt(Msg);
			}
			JB_SetRef(Msg, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(Msg);
		JB_Decr(_afterf1);
		;
	}
	;
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_FlatAfter(Root)));
	SC_NR_Collect(Self, Root, JB_LUB[1933], _tmPf3);
	JB_Decr(_tmPf3);
}

SCNodeRenamer* SC_NR_Constructor(SCNodeRenamer* Self) {
	if (Self == nil) {
		Self = ((SCNodeRenamer*)JB_NewClass(&SCNodeRenamerData));
	}
	JB_StringC* _tmPf1 = JB_LUB[0];
	Self->Name = JB_Incr(_tmPf1);
	Array* _tmPf0 = JB_Array_Constructor0(nil);
	Self->Nodes = JB_Incr(_tmPf0);
	return Self;
}

void SC_NR_Destructor(SCNodeRenamer* Self) {
	JB_Clear(Self->Name);
	JB_Clear(Self->Nodes);
}

void SC_NR_Rename(SCNodeRenamer* Self, Message* Name) {
	if (JB_Ring_HasChildren(Name)) {
		JB_Msg_SyntaxExpect(Name, JB_LUB[1375]);
		return;
	}
	{
		Array* _LoopSrcf2 = Self->Nodes;
		int _if0 = 0;
		while (true) {
			Message* N = ((Message*)JB_Array_Value(_LoopSrcf2, _if0));
			if (N == nil) {
				break;
			}
			N->Func = Name->Func;
			JB_SetRef(N->Name, Name->Name);
			N->Position = Name->Position;
			_if0++;
		};
	};
}

void SC_NR_Uniqueify(SCNodeRenamer* Self, SCNode* P) {
	JB_String* _tmPf1 = JB_Incr(SC_UniqueTmpVar(P, Self->Name));
	Message* _tmPf0 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, _tmPf1));
	JB_Decr(_tmPf1);
	SC_NR_Rename(Self, _tmPf0);
	JB_Decr(_tmPf0);
}


Message* SC_SCObject_AnySource(SCObject* Self) {
	Message* S = Self->Source;
	if (S) {
		return S;
	}
	if (JB_Object_FastIsa(Self, &SCModuleData)) {
		SCClass* C = ((SCModule*)Self)->Cls;
		if (C) {
			return SC_Base_SourceArg(C);
		}
	}
	return nil;
}

int SC_SCObject_Auto_Type(SCObject* Self) {
	if (JB_Object_FastIsa(Self, &SCDeclData)) {
		if (SC_Decl_SyntaxIs(((SCDecl*)Self), kSC__SCDeclInfo_Property)) {
			return -2;
		}
		if (SC_Decl_SyntaxIs(((SCDecl*)Self), kSC__SCDeclInfo_Const)) {
			return 5;
		}
		return 0;
	}
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		if (SC_Func_SyntaxIs(((SCFunction*)Self), kSC__FunctionType_VirtualCaller)) {
			return 4;
		}
		return 1;
	}
	if (JB_Object_Isa(Self, &SCClassData) or JB_Object_Isa(Self, &SCModuleData)) {
		return 2;
	}
	return 3;
}

int SC_SCObject_AutoCompleteType(SCObject* Self) {
	if (JB_Object_FastIsa(Self, &SCModuleData)) {
		if (((SCModule*)Self)->Cls) {
			int R = 1;
			if (SC_Class_EqualsType(((SCModule*)Self)->Cls, kSC__SCNodeType_FuncProto, false)) {
				R = (R | 8);
			}
			return R;
		}
		return 2;
	}
	return 4;
}

JB_String* SC_SCObject_BaseIcon(SCObject* Self) {
	if (JB_Object_FastIsa(Self, &SCModuleData)) {
		if (((SCModule*)Self)->Cls) {
			return JB_LUB[104];
		}
		return JB_LUB[102];
	}
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		if (SC_Func_IsBehaviour(((SCFunction*)Self))) {
			return JB_LUB[166];
		}
		if (SC_Func_SyntaxIs(((SCFunction*)Self), kSC__FunctionType_VirtualCaller)) {
			return JB_LUB[199];
		}
		return JB_LUB[174];
	}
	if (JB_Object_FastIsa(Self, &SCClassData)) {
		return JB_LUB[103];
	}
	if (JB_Object_FastIsa(Self, &SCDeclData)) {
		if (SC_Decl_SyntaxIs(((SCDecl*)Self), kSC__SCDeclInfo_Property)) {
			return JB_LUB[105];
		}
		if (SC_Decl_SyntaxIs(((SCDecl*)Self), kSC__SCDeclInfo_Const)) {
			return JB_LUB[185];
		}
	}
	if (JB_Object_FastIsa(Self, &SCIteratorData)) {
		return JB_LUB[101];
	}
	return JB_LUB[107];
}

JB_String* SC_SCObject_CallFromName(SCObject* Self) {
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		return SC_Func_RenderName(((SCFunction*)Self), nil);
	}
	if (JB_Object_FastIsa(Self, &SCDeclData)) {
		return SC_Decl_AutoCompleteName(((SCDecl*)Self));
	}
	if (JB_Object_Isa(Self, &SCNamedData)) {
		return ((SCNamed*)Self)->Name;
	}
	return JB_LUB[0];
}

JB_String* SC_SCObject_CanAuto(SCObject* Self, JB_String* Search) {
	JB_String* Rz = JB_LUB[0];
	Rz = SC_SCObject_CanAutoSub(Self, Search);
	if (JB_Str_Exists(Rz)) {
		bool IsExact = (JB_Str_Equals(Rz, Search, true));
		if (JB_Object_FastIsa(Self, &SCFunctionData)) {
			if (SC_Func_VisibleArgs(((SCFunction*)Self))) {
				Rz = JB_Str_OperatorPlus(Rz, JB_LUB[269]);
			}
		}
		if ((!IsExact) and ((bool)Self->NoAutoComplete)) {
			Rz = JB_LUB[0];
		}
	}
	return Rz;
}

JB_String* SC_SCObject_CanAutoSub(SCObject* Self, JB_String* Search) {
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		if ((!((!((SCFunction*)Self)->NoAutoComplete) or ((JB_Str_Equals(((SCFunction*)Self)->Name, Search, true)))))) {
			return JB_LUB[0];
		}
		if ((JB_Str_OperatorStarts(((SCFunction*)Self)->Name, JB_LUB[1845])) and (!(JB_Str_OperatorStarts(Search, JB_LUB[1844])))) {
			return JB_LUB[0];
		}
	}
	 else if (JB_Object_FastIsa(Self, &SCDeclData)) {
		return SC_Decl_RealName(((SCDecl*)Self));
	}
	 else if (JB_Object_FastIsa(Self, &SCModuleData)) {
		SCClass* Cls = ((SCModule*)Self)->Cls;
		if (Cls) {
			if (((bool)Cls->NoAutoComplete) or SC_Class_IsBehaviourTable(Cls)) {
				return JB_LUB[0];
			}
		}
	}
	if (JB_Object_Isa(Self, &SCNamedData)) {
		return ((SCNamed*)Self)->Name;
	}
	return JB_LUB[0];
}

SCObject* SC_SCObject_Constructor(SCObject* Self) {
	if (Self == nil) {
		Self = ((SCObject*)JB_NewClass(&SCObjectData));
	}
	Self->Source = nil;
	Self->NoAutoComplete = 0;
	Self->AllocSource = 0;
	Self->LinkedFrom = 0;
	Self->NodeInfo = 0;
	Self->LinkFrom = nil;
	return Self;
}

void SC_SCObject_Destructor(SCObject* Self) {
	JB_Clear(Self->LinkFrom);
	JB_Clear(Self->Source);
}

SCFunction* SC_SCObject_Disambiguate(SCObject* Self, Message* Src) {
	SCFunction* Rz = nil;
	if (JB_Object_FastIsa(Self, &SCDeclData)) {
		Rz = ((SCDecl*)Self)->HiderFunc;
	}
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		Rz = ((SCFunction*)Self);
	}
	Rz = SC_Func_Disambiguate(Rz, Src);
	return Rz;
}

JB_String* SC_SCObject_Display(SCObject* Self, bool Exact) {
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		if (SC_Func_IsAllocOrNew(((SCFunction*)Self)) or ((SCFunction*)Self)->IsDisabled) {
			return JB_LUB[0];
		}
		return ((JB_String*)JB_Ternary(Exact, SC_Func_RenderTitle(((SCFunction*)Self), false, nil), ((SCFunction*)Self)->Name));
	}
	if (JB_Object_FastIsa(Self, &SCDeclData)) {
		return SC_Decl_AutoCompleteName(((SCDecl*)Self));
	}
	if (JB_Object_FastIsa(Self, &SCIteratorData)) {
		return JB_LUB[0];
	}
	if (JB_Object_Isa(Self, &SCNamedData)) {
		return ((SCNamed*)Self)->Name;
	}
	return JB_LUB[0];
}

SCFile* SC_SCObject_File(SCObject* Self) {
	Message* Src = Self->Source;
	if (Src) {
		return SC_Msg_SCFile(Src);
	}
	if (JB_Object_FastIsa(Self, &SCModuleData)) {
		return ({
			SCClass* _t = ((SCModule*)Self)->Cls;
			 ((SCFile*)JB_Ternary(((bool)_t), SC_SCObject_File(_t), nil));
		});
	}
	return nil;
}

bool SC_SCObject_IsVisible(SCObject* Self) {
	return SC_SCObject_SyntaxIs(Self, kSC__SCNodeInfo_Visible);
}

void SC_SCObject_IsVisibleSet(SCObject* Self, bool Value) {
	((SC_SCObject_SyntaxIsSet(Self, kSC__SCNodeInfo_Visible, Value)));
}

SCObject* SC_SCObject_NextDisplay(SCObject* Self, bool Exact) {
	if (Exact) {
		if (JB_Object_FastIsa(Self, &SCFunctionData)) {
			return ((SCFunction*)Self)->NextFunc;
		}
		if (JB_Object_FastIsa(Self, &SCDeclData)) {
			return ((SCDecl*)Self)->HiderFunc;
		}
	}
	return nil;
}

void SC_SCObject_Fail(SCObject* Self, JB_String* Error) {
	JB_Rec__NewErrorWithNode(Self->Source, Error, nil);
}

bool SC_SCObject_SyntaxIs(SCObject* Self, SCNodeInfo I) {
	return JB_int_SyntaxAccess(Self->NodeInfo, I);
}

void SC_SCObject_SyntaxIsSet(SCObject* Self, SCNodeInfo I, bool Value) {
	int X = Self->NodeInfo;
	X = JB_int_SyntaxAccessSet(X, I, Value);
	Self->NodeInfo = X;
}


JB_String* SC_Opp_CaseAwareStr(SCOperator* Self) {
	return JB_bool_Render0(((bool)(SC_Opp_SyntaxIs(Self, kSC__OpMode_CaseAware))));
}

SCOperator* SC_Opp_Constructor(SCOperator* Self, JB_String* Name, fn_OpASM ASM, OpMode Mode) {
	if (Self == nil) {
		Self = ((SCOperator*)JB_NewClass(&SCOperatorData));
	}
	Self->Score = 0;
	JB_StringC* _tmPf2 = JB_LUB[0];
	Self->CompOp = JB_Incr(_tmPf2);
	JB_StringC* _tmPf1 = JB_LUB[0];
	Self->CompParam = JB_Incr(_tmPf1);
	JB_StringC* _tmPf0 = JB_LUB[0];
	Self->FuncName = JB_Incr(_tmPf0);
	Self->Opposite = nil;
	Self->Name = JB_Incr(Name);
	Self->Kind = Mode;
	Self->ASM = ASM;
	(JB_Dict_ValueSet(SC__Opp_Dict, Name, Self));
	return Self;
}

void SC_Opp_Destructor(SCOperator* Self) {
	JB_Clear(Self->Name);
	JB_Clear(Self->CompOp);
	JB_Clear(Self->CompParam);
	JB_Clear(Self->FuncName);
}

void SC_Opp_InitComp(SCOperator* Self, JB_String* Name_) {
	if (JB_Str_First(Name_) == '~') {
		Self->Kind = (Self->Kind | kSC__OpMode_CaseAware);
	}
	Self->Kind = (Self->Kind | kSC__OpMode_Compare);
	JB_SetRef(Self->FuncName, JB_LUB[1111]);
	JB_String* S = JB_Incr(SC_Opp_SimpleName(Self));
	if (JB_Str_Length(S) == 2) {
		JB_SetRef(Self->CompOp, S);
	}
	 else {
		JB_SetRef(Self->CompOp, JB_LUB[590]);
	}
	if (JB_Str_Equals(S, JB_LUB[572], false)) {
		JB_SetRef(Self->CompParam, JB_LUB[323]);
		JB_SetRef(Self->CompOp, JB_LUB[581]);
	}
	 else if (JB_Str_Equals(S, JB_LUB[591], false)) {
		JB_SetRef(Self->CompParam, JB_LUB[449]);
		JB_SetRef(Self->CompOp, JB_LUB[593]);
	}
	 else if (((JB_Str_Equals(S, JB_LUB[581], false))) or ((JB_Str_Equals(S, JB_LUB[593], false)))) {
		JB_SetRef(Self->CompParam, JB_LUB[440]);
	}
	 else {
		JB_SetRef(Self->CompParam, JB_LUB[440]);
	}
	JB_Decr(S);
}

bool SC_Opp_IsCompSet(SCOperator* Self) {
	return ((bool)SC_Opp_SyntaxIs(Self, kSC__OpMode_CompSet));
}

void SC_Opp_SetFuncNameSet(SCOperator* Self, JB_String* S) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_UpperFirst(S));
	JB_SetRef(Self->FuncName, JB_Str_OperatorPlus(JB_LUB[1110], _tmPf0));
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_Incr(JB_Str_LowerCase(S));
	(JB_Dict_ValueSet(SC__Opp_Dict, _tmPf1, Self));
	JB_Decr(_tmPf1);
}

JB_String* SC_Opp_SimpleName(SCOperator* Self) {
	JB_String* N = Self->Name;
	if (SC_Opp_SyntaxIs(Self, kSC__OpMode_CaseAware)) {
		return JB_Str_Range(N, (1), JB_int__Max());
	}
	return N;
}

bool SC_Opp_SyntaxEquals(SCOperator* Self, JB_String* S, bool Aware) {
	return JB_Str_Equals(Self->Name, S, Aware);
}

OpMode SC_Opp_SyntaxIs(SCOperator* Self, OpMode X) {
	return Self->Kind & X;
}

void SC_Opp__AddAssign(JB_String* S) {
	SC_Opp_Constructor(nil, S, (&SC_asmOps__Assign), kSC__OpMode_Assigns);
}

void SC_Opp__AddBit(JB_String* S, JB_String* FuncName, fn_OpASM ASM, OpMode Mode) {
	SCOperator* Opp = JB_Incr(SC_Opp_Constructor(nil, S, ASM, Mode | kSC__OpMode_Bit));
	(SC_Opp_SetFuncNameSet(Opp, FuncName));
	JB_Decr(Opp);
}

void SC_Opp__AddComp(JB_String* S, fn_OpASM ASM, OpMode Mode) {
	SCOperator* Opp = JB_Incr(SC_Opp_Constructor(nil, S, ASM, Mode | kSC__OpMode_Compare));
	SC_Opp_InitComp(Opp, S);
	JB_Decr(Opp);
	JB_String* Newname = JB_Incr(((JB_String*)JB_Ternary((!JB_Str_Equals(S, JB_LUB[590], false)), ((JB_String*)JB_Str_OperatorPlus(JB_LUB[2082], S)), ((JB_String*)JB_LUB[2091]))));
	Mode = (Mode & (~kSC__OpMode_NilTest));
	SCOperator* _tmPf0 = JB_Incr(SC_Opp_Constructor(nil, Newname, nil, Mode | kSC__OpMode_Custom));
	SC_Opp_InitComp(_tmPf0, Newname);
	JB_Decr(Newname);
	JB_Decr(_tmPf0);
}

SCOperator* SC_Opp__AddCustom(JB_String* S) {
	SCOperator* Opp = JB_Incr(SC_Opp_Constructor(nil, S, nil, kSC__OpMode_Custom));
	Opp->Score = SC__Opp_CustomOperatorScore;
	(SC_Opp_SetFuncNameSet(Opp, S));
	JB_SafeDecr(Opp);
	return Opp;
}

SCOperator* SC_Opp__AddMath(JB_String* S, JB_String* FuncName, fn_OpASM ASM, OpMode Mode) {
	SCOperator* Opp = JB_Incr(SC_Opp_Constructor(nil, S, ASM, Mode | kSC__OpMode_Math));
	(SC_Opp_SetFuncNameSet(Opp, FuncName));
	JB_SafeDecr(Opp);
	return Opp;
}

void SC_Opp__BuildOrder() {
	JB_String* Strs = JB_Incr(JB_LUB[79]);
	Array* Order = JB_Incr(JB_Str_Split(Strs, '\n'));
	JB_Decr(Strs);
	Message* Fake = JB_Incr((JB_Syx_Msg(JB_SyxOpp, JB_LUB[0])));
	{
		int _if0 = 0;
		while (true) {
			JB_String* Wi = JB_Incr(((JB_String*)JB_Array_Value(Order, _if0)));
			if (Wi == nil) {
				JB_Decr(Wi);
				break;
			}
			int I = _if0;
			{
				Array* _LoopSrcf4 = JB_Incr(JB_Str_Words(Wi));
				int _if2 = 0;
				while (true) {
					JB_String* S2 = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf4, _if2)));
					if (S2 == nil) {
						JB_Decr(S2);
						break;
					}
					if (JB_Str_Exists(S2)) {
						JB_SetRef(Fake->Name, S2);
						SCOperator* _tmPf5 = JB_Incr(SC_Opp__Lookup(Fake));
						_tmPf5->Score = I;
						JB_Decr(_tmPf5);
					}
					JB_Decr(S2);
					_if2++;
				};
				JB_Decr(_LoopSrcf4);
			}
			;
			JB_Decr(Wi);
			_if0++;
		};
	}
	;
	JB_Decr(Order);
	JB_Decr(Fake);
	SCOperator* _tmPf6 = JB_Incr(((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, JB_LUB[586])));
	_tmPf6->Score = 100;
	JB_Decr(_tmPf6);
	SCOperator* _tmPf7 = JB_Incr(((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, JB_LUB[1581])));
	SC__Opp_CustomOperatorScore = _tmPf7->Score;
	JB_Decr(_tmPf7);
}

void SC_Opp__Init() {
	SC_Opp__AddComp(JB_LUB[590], (&SC_asmOps__Equals), kSC__OpMode_ExactEquals);
	SC_Opp__AddComp(JB_LUB[572], (&SC_asmOps__Less), 0);
	SC_Opp__AddComp(JB_LUB[591], (&SC_asmOps__More), 0);
	SC_Opp__AddComp(JB_LUB[581], (&SC_asmOps__LessEq), 0);
	SC_Opp__AddComp(JB_LUB[593], (&SC_asmOps__MoreEq), 0);
	SC_Opp__AddComp(JB_LUB[215], (&SC_asmOps__NotEq), kSC__OpMode_ExactNotEquals);
	SC_Opp__OppositeComp(JB_LUB[590], JB_LUB[215]);
	SC_Opp__OppositeComp(JB_LUB[572], JB_LUB[593]);
	SC_Opp__OppositeComp(JB_LUB[591], JB_LUB[581]);
	SC_Opp__AddAssign(JB_LUB[586]);
	JB_FreeIfDead(SC_Opp__AddMath(JB_LUB[1794], JB_LUB[1794], (&SC_asmOps__Mod), 0));
	JB_FreeIfDead(SC_Opp__AddMath(JB_LUB[297], JB_LUB[1133], (&SC_asmOps__Plus), kSC__OpMode_Addition));
	JB_FreeIfDead(SC_Opp__AddMath(JB_LUB[306], JB_LUB[1010], (&SC_asmOps__Minus), kSC__OpMode_MakesSigned + kSC__OpMode_Addition));
	JB_FreeIfDead(SC_Opp__AddMath(JB_LUB[294], JB_LUB[1031], (&SC_asmOps__Mul), 0));
	JB_FreeIfDead(SC_Opp__AddMath(JB_LUB[387], JB_LUB[825], (&SC_asmOps__Div), 0));
	SC_Opp__AddBit(JB_LUB[580], JB_LUB[1182], (&SC_asmOps__ROL), kSC__OpMode_Left);
	SC_Opp__AddBit(JB_LUB[595], JB_LUB[1183], (&SC_asmOps__ROR), kSC__OpMode_Left);
	SC_Opp__AddBit(JB_LUB[594], JB_LUB[1218], (&SC_asmOps__SHR), kSC__OpMode_Left);
	SC_Opp__AddBit(JB_LUB[579], JB_LUB[1217], (&SC_asmOps__SHL), 0);
	SC_Opp__AddBit(JB_LUB[277], JB_LUB[668], (&SC_asmOps__BitOr), 0);
	SC_Opp__AddBit(JB_LUB[241], JB_LUB[667], (&SC_asmOps__BitAnd), kSC__OpMode_SameOrLessBits);
	SC_Opp__AddBit(JB_LUB[1423], JB_LUB[1396], (&SC_asmOps__BitXor), kSC__OpMode_NoExtraBits);
	SCOperator* BitOr = JB_Incr(((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, JB_LUB[277])));
	(JB_Dict_ValueSet(SC__Opp_Dict, JB_LUB[2068], BitOr));
	(JB_Dict_ValueSet(SC__Opp_Dict, JB_LUB[2077], BitOr));
	JB_Decr(BitOr);
	SC_Opp__AddBit(JB_LUB[1727], JB_LUB[1727], nil, 0);
	SC_Opp__AddBit(JB_LUB[1729], JB_LUB[1729], nil, 0);
	SC_Opp__BuildOrder();
}

int SC_Opp__Init_() {
	{
		JB_SetRef(SC__Opp_Dict, JB_Dict_Constructor(nil));
		SC__Opp_CustomOperatorScore = 0;
	}
	;
	return 0;
}

int SC_Opp__InitCode_() {
	return 0;
}

SCOperator* SC_Opp__Lookup(Message* Opch) {
	SCOperator* Result = ((SCOperator*)Opch->Obj);
	if (Result) {
		if ((!((bool)SC_Opp_SyntaxIs(Result, kSC__OpMode_Custom)))) {
			JB_SetRef(Opch->Name, Result->Name);
		}
		return Result;
	}
	JB_String* Op = Opch->Name;
	Result = ((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, Op));
	if ((!Result)) {
		Result = SC_Opp__AddCustom(Op);
	}
	 else if ((!JB_Str_Equals(Op, Result->Name, false))) {
		if ((!((bool)SC_Opp_SyntaxIs(Result, kSC__OpMode_Custom)))) {
			JB_SetRef(Opch->Name, Result->Name);
		}
	}
	if (JB_Str_Equals(Op, JB_LUB[1855], false)) {
		Result->Kind = (Result->Kind | kSC__OpMode_OR);
	}
	 else if (JB_Str_Equals(Op, JB_LUB[1481], false)) {
		Result->Kind = (Result->Kind | kSC__OpMode_AND);
	}
	return Result;
}

void SC_Opp__OppositeComp(JB_String* A, JB_String* B) {
	SCOperator* pA = ((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, A));
	SCOperator* pB = ((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, B));
	if (((bool)pA) and ((bool)pB)) {
		pA->Opposite = pB;
		pB->Opposite = pA;
	}
}


void SC_PA_AddParam(SCParamArray* Self, Message* Item) {
	SC_PA_addsub(Self, Item);
	Self->HasProperParams = true;
}

void SC_PA_addsub(SCParamArray* Self, Message* M) {
	if (Self->Size >= 11) {
		JB_Msg_SyntaxExpect(M, JB_LUB[1319]);
		return;
	}
	s16 I = Self->Size++;
	Self->Items[I] = M;
}

bool SC_PA_AddTestedParam(SCParamArray* Self, Message* Item, SCNode* Name_space) {
	if ((!SC_TypeOfExpr(Item, Name_space, nil))) {
		JB_Msg_SyntaxExpect(Item, JB_LUB[739]);
		return nil;
	}
	SC_PA_AddParam(Self, Item);
	return true;
}

SCFunction* SC_PA_ArgsMatchError(SCParamArray* Self, int TypeCast, SCFunction* F, SCFunction* R) {
	if ((!SC_PA_MadeError(Self))) {
		if (true) {
			JB_String* _tmPf0 = JB_Incr(SC_Str_ArgsMatchError(JB_LUB[1036], TypeCast != 0));
			JB_Msg_SyntaxExpect(Self->Exp, _tmPf0);
			JB_Decr(_tmPf0);
		}
		if (true) {
			JB_Msg_SyntaxExpect(F->Source, JB_LUB[724]);
		}
		if (true) {
			JB_Msg_SyntaxExpect(R->Source, JB_LUB[725]);
		}
	}
	return nil;
}

SCParamArray* SC_PA_Constructor(SCParamArray* Self, Message* Exp) {
	if (Self == nil) {
		Self = ((SCParamArray*)JB_NewClass(&SCParamArrayData));
	}
	Self->Cls = nil;
	Self->Size = 0;
	Self->IsAssigns = false;
	Self->HasProperParams = false;
	Self->IsNotModule = false;
	Self->IsSelf = false;
	Self->IsSuper = false;
	Self->Found = false;
	Self->AllowSelfToConstructor = false;
	Self->Exp = Exp;
	Self->IsDot = ((JB_Msg_EqualsSyx(Exp, JB_SyxDot, false)));
	Self->IsAddress = (((bool)Exp) and SC_Msg_OperatorIsBRel(SC_Msg_NiceParent(Exp), JB_LUB[241]));
	Self->ErrCount = JB_StdErr->ErrorCount;
	return Self;
}

Array* SC_PA_CopyArgs(SCParamArray* Self) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	{
		int _nf0 = Self->Size;
		int _if1 = 0;
		while (_if1 < _nf0) {
			Message* S = Self->Items[_if1];
			JB_Array_SyntaxAppend(Rz, S);
			_if1++;
		};
	}
	;
	return Rz;
}

SCNode* SC_PA_DetectDotSuper(SCParamArray* Self, SCNode* Curr, SCNode* Arg_space) {
	Self->IsNotModule = (!SC_Base_IsModuleFunc(Curr));
	if (Self->IsDot) {
		Message* Exp0 = ((Message*)JB_Ring_First(Self->Exp));
		if (Exp0) {
			Self->IsSelf = ((JB_Msg_SyntaxEquals(Exp0, JB_LUB[1933], true)));
			if (Self->IsNotModule) {
				SCDecl* Ty = SC_TypeOfExpr(Exp0, Arg_space, nil);
				if (Ty) {
					Self->Cls = Ty->Type;
				}
				SC_PA_addsub(Self, Exp0);
				if (SC_Msg_OperatorIsThing(Exp0, JB_LUB[1974])) {
					Self->IsSuper = true;
					JB_SetRef(Exp0->Name, JB_LUB[1933]);
					return Curr->Parent;
				}
			}
		}
	}
	return Curr;
}

int SC_PA_IgnoreSelfContain(SCParamArray* Self) {
	int Rz = 0;
	SCClass* Cls = Self->Cls;
	if (Cls) {
		if (Self->IsDot and Self->IsNotModule) {
			if (SC_Class_IsStruct(Cls)) {
				Rz = (Rz | kJB_kTypeCastIgnoreAddressOf);
			}
			if (Cls->IgnoreContainedSelf) {
				Rz = (Rz | kJB_kTypeCastIgnoreContained);
			}
		}
	}
	return Rz;
}

bool SC_PA_IsModule(SCParamArray* Self) {
	return (!Self->IsNotModule);
}

bool SC_PA_IsSelfCon(SCParamArray* Self) {
	return (Self->IsSelf or Self->IsSuper) and (SC_Func_SyntaxIs(SC__Func_CurrFunc, kSC__FunctionType_Constructor));
}

int SC_PA_MacroSize(SCParamArray* Self) {
	if (Self->IsAssigns) {
		return Self->Size - 1;
	}
	return Self->Size;
}

bool SC_PA_MadeError(SCParamArray* Self) {
	return JB_StdErr->ErrorCount > Self->ErrCount;
}

JB_String* SC_PA_ModuleName(SCParamArray* Self) {
	Message* P = SC_PA_SyntaxAccess(Self, 0);
	if ((!Self->IsNotModule)) {
		P = ((Message*)JB_Ring_First(Self->Exp));
	}
	if (P) {
		return SC_Msg_RenderType(P);
	}
	return JB_LUB[0];
}

bool SC_PA_PreReadTypes(SCParamArray* Self, SCNode* Name_Space, Message* P, Message* Side) {
	if (((bool)P) and (!Self->Exp)) {
		Self->Exp = P;
	}
	{
		Message* Item = JB_Incr(((Message*)JB_Ring_First(P)));
		while (Item) {
			if ((!SC_PA_AddTestedParam(Self, Item, Name_Space))) {
				JB_Decr(Item);
				return nil;
			}
			JB_SetRef(Item, ((Message*)JB_Ring_NextSib(Item)));
		};
		JB_Decr(Item);
		;
	}
	;
	(SC_PA_SideSet(Self, Side));
	return true;
}

JB_String* SC_PA_Render(SCParamArray* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	{
		int _LoopSrcf1 = ((int)Self->Size);
		int I = 0;
		int _firstf2 = I;
		while (I < _LoopSrcf1) {
			if (_firstf2 != I) {
				JB_FS_AppendByte(Fs, ' ');
				JB_FS_AppendByte(Fs, ',');
			}
			//start;
			Message* Obj = JB_Incr(Self->Items[I]);
			JB_FreeIfDead(JB_Msg_Render(Obj, Fs));
			SCDecl* Ty = JB_Incr(SC_TypeOfExpr(Obj, nil, nil));
			JB_Decr(Obj);
			if (Ty) {
				JB_FreeIfDead(SC_Decl_Render(Ty, Fs));
			}
			JB_Decr(Ty);
			I++;
		};
	}
	;
	JB_String* _tmPf3 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

JB_String* SC_PA_RenderKind(SCParamArray* Self) {
	if (Self->IsNotModule) {
		return JB_LUB[1544];
	}
	return JB_LUB[1798];
}

void SC_PA_SideSet(SCParamArray* Self, Message* Value) {
	if (Value) {
		SC_PA_addsub(Self, Value);
		Self->IsAssigns = true;
	}
}

Message* SC_PA_SyntaxAccess(SCParamArray* Self, int I) {
	if (I < Self->Size) {
		return Self->Items[I];
	}
	return nil;
}


bool JB_Sav_IsSaveMarked(Saveable* Self) {
	int* P = ((int*)Self);
	return (((bool)(P[0] & kJB__Saver_RefMark)));
}

void JB_Sav_LoadProperties(Saveable* Self, ObjectLoader* Loader) {
	Loader->CouldntLoad = Self;
}

void JB_Sav_SaveCollect(Saveable* Self, ObjectSaver* Saver) {
}

bool JB_Sav_SaveMark(Saveable* Self) {
	int* P = ((int*)Self);
	int Rc = P[0];
	if ((((bool)(Rc & kJB__Saver_RefMark)))) {
		return nil;
	}
	P[0] = (Rc | kJB__Saver_RefMark);
	return true;
}

SaverClassInfo* JB_Sav_SaverInfo(Saveable* Self) {
	return ((SaverClassInfo*)JB_ObjClass(Self)->SaveInfo);
}

void JB_Sav_SaveToFile(Saveable* Self, JB_File* F) {
	FastString* It = JB_Incr(JB_Str_Out(F, true));
	if (It) {
		JB_FreeIfDead(JB_Sav_SaveTo(Self, It));
	}
	JB_Decr(It);
}

JB_String* JB_Sav_SaveTo(Saveable* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	ObjectSaver Saver = JB_Saver__New();
	JB_SetRef(Saver.Dest, Fs);
	Saver.Root = Self;
	JB_FS_AppendString(Fs, kJB_kSaverStart1);
	JB_Object_SaveTryCollect(Self, (&Saver));
	SaverClassInfo* Sci = JB__Saver_SaveableList;
	while (Sci != nil) {
		JB_sci_Output(Sci, (&Saver));
		Sci = Sci->NextInfo;
	};
	Sci = JB__Saver_SaveableList;
	while (Sci != nil) {
		JB_sci_Clear(Sci);
		Sci = Sci->NextInfo;
	};
	JB_Saver_Finish((&Saver), Self);
	JB_String* Result = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SetRef(Saver.Dest, nil);
	Saver.CantSaveThis = nil;
	JB_SafeDecr(Result);
	JB_Saver_Destructor((&Saver));
	return Result;
}

void JB_Sav_SaveUnMark(Saveable* Self) {
	int* P = ((int*)Self);
	P[0] = (P[0] & (~kJB__Saver_RefMark));
}

void JB_Sav_SaveWrite(Saveable* Self, ObjectSaver* Saver) {
	Saver->CantSaveThis = Self;
	JB_FS_AppendString(Saver->Dest, JB_LUB[1811]);
}


Selector* JB_Sel_Constructor(Selector* Self, Selector* Next, Selector** Place, JB_String* Name) {
	if (Self == nil) {
		Self = ((Selector*)JB_NewClass(&SelectorData));
	}
	Self->ID = 0;
	Self->Name = JB_Incr(Name);
	Self->Next = JB_Incr(Next);
	JB_SetRef((*Place), Self);
	return Self;
}

void JB_Sel_Destructor(Selector* Self) {
	JB_Clear(Self->Name);
	JB_Clear(Self->Next);
}

void JB_Sel_GiveIDs(Selector* Self) {
	int ID = 0;
	{
		Selector* Curr = Self;
		while (Curr) {
			Curr->ID = ID;
			ID++;
			Curr = ((Selector*)(Curr->Next));
		};
	};
}


JB_String* JB_Str_AddExt(JB_String* Self, JB_String* Ext) {
	JB_Incr(Ext);
	if ((!JB_Str_Exists(Ext))) {
		JB_Decr(Ext);
		return Self;
	}
	if (JB_Str_First(Ext) != '.') {
		JB_SetRef(Ext, JB_Str_OperatorPlus(JB_LUB[353], Ext));
	}
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(Self, Ext));
	JB_Decr(Ext);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Str_AfterByte(JB_String* Self, byte B, int Last) {
	Ind Start = JB_Str_FindByte(Self, B, Last, 0);
	return JB_Str_Range(Self, Start + 1, Last);
}

JB_String* JB_Str_ArgName(JB_String* Self) {
	if (JB_Str_First(Self) == '-') {
		Ind I = JB_Str_FindByte(Self, '=', 0, JB_int__Max());
		if ((!JB_Ind_SyntaxCast(I))) {
			I = JB_int__Max();
		}
		JB_String* S = JB_Incr(JB_Str_Range(Self, 0, I));
		JB_SetRef(S, JB_Str_TrimFirst(S, '-'));
		JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(S));
		JB_Decr(S);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	return JB_LUB[0];
}

JB_String* SC_Str_ArgsMatchError(JB_String* Self, bool TypeCast) {
	if ((!TypeCast)) {
		return Self;
	}
	return JB_Str_OperatorPlus(Self, JB_LUB[125]);
}

JB_String* JB_Str_ArgValue(JB_String* Self) {
	if (JB_Str_First(Self) != '-') {
		return Self;
	}
	Ind It = JB_Str_FindByte(Self, '=', 0, JB_int__Max());
	if (JB_Ind_SyntaxCast(It)) {
		return JB_Str_Range(Self, It + (1), JB_int__Max());
	}
	return JB_LUB[2004];
}

uint SC_Str_ASMint(JB_String* Self) {
	uint Rz = 0;
	Rz = JB_Str_Int(Self);
	if ((!JB_int_OperatorInRange(((int)Rz), 32))) {
		debugger;
		return 0;
	}
	return Rz;
}

JB_String* SC_Str_ASMNormalise(JB_String* Self) {
	int N = 0;
	{
		byte* _Startf0 = Self->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			byte C = _Startf0[0];
			C = JB_byte_LowerCase(C);
			if ((C == 'r') or (C == 'n')) {
				N++;
			}
			 else if ((C == 'l') or ((C == 's') or (C == 'j'))) {
				0;
			}
			 else {
				return Self;
			}
			_Startf0++;
		};
	}
	;
	return JB_Str_PlusByte(JB_LUB[1333], ('0' + N));
}

JB_String* JB_Str_BackToApp(JB_String* Self) {
	JB_String* Rz = JB_Incr(JB_LUB[0]);
	JB_String* S = JB_Incr(JB_Str_TrimSlashes(Self, false));
	JB_String* _tmPf0 = JB_Incr(JB_Str_Name(Self));
	JB_String* Final = JB_Incr(JB_Str_OperatorPlus(JB_LUB[365], _tmPf0));
	JB_Decr(_tmPf0);
	if (JB_Str_OperatorEndsWith(S, Final)) {
		JB_SetRef(Rz, JB_Str_Range(S, 0, 4 + (JB_Str_OperatorMinus(S, Final))));
	}
	 else {
		JB_SetRef(Rz, Self);
	}
	JB_Decr(S);
	JB_Decr(Final);
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* JB_Str_Before(JB_String* Self, JB_String* S) {
	Ind F = JB_Str_InStr(Self, S, 0, JB_int__Max(), false);
	if (JB_Ind_SyntaxCast(F)) {
		return JB_Str_Range(Self, 0, F);
	}
	return Self;
}

JB_String* JB_Str_BeforeLastByte(JB_String* Self, byte B, int Fudge) {
	int Last = JB_Str_TrimLastSub(Self, B);
	Ind Start = JB_Str_FindByte(Self, B, Last, 0);
	return JB_Str_Range(Self, 0, Start + Fudge);
}

Array* JB_Str_ByteSplit(JB_String* Self) {
	Array* Rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	{
		int _LoopSrcf1 = JB_Str_Length(Self);
		int N = 0;
		while (N < _LoopSrcf1) {
			JB_String* _tmPf2 = JB_Incr(JB_Str__Byte(JB_Str_ByteValue(Self, N)));
			JB_Array_SyntaxAppend(Rz, _tmPf2);
			JB_Decr(_tmPf2);
			N++;
		};
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}

CharSet* JB_Str_CharSetWithBool(JB_String* Self, bool Range) {
	return JB_CS_Constructor(nil, Self, Range);
}

JB_String* JB_Str_Child(JB_String* Self, JB_String* Cname) {
	if ((!JB_Str_Exists(Self))) {
		return Cname;
	}
	int C = ((int)(JB_Str_Last(Self, 0) == '/'));
	C = (C + (JB_Str_First(Cname) == '/'));
	if (C == 1) {
		return JB_Str_OperatorPlus(Self, Cname);
	}
	if (C == 0) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[387], Cname));
		JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(Self, _tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(Cname, 1, JB_int__Max()));
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(Self, _tmPf1));
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

Array* JB_Str_Components(JB_String* Self) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_TrimSlashes(Self, false));
	Array* _tmPf1 = JB_Incr(JB_Str_Split(_tmPf0, '/'));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Str_Compress(JB_String* Self, int Strength, CompressionStats* St) {
	FastString* J = JB_Incr(JB_bin_Constructor0(nil, 0));
	JB_Str_CompressInto(Self, J, Strength, St);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(J));
	JB_Decr(J);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_Str_CompressInto(JB_String* Self, JB_Object* Fs, int Strength, CompressionStats* St) {
	StringReader* _tmPf0 = JB_Incr(JB_Str_Stream(Self));
	JB_SS_CompressInto(_tmPf0, Fs, Strength, St);
	JB_Decr(_tmPf0);
}

bool JB_Str_CompressTest(JB_String* Self, bool Report, int Which) {
	if (((bool)(Which & 1))) {
		if ((!JB_Str_CompressTestSub(Self, kJB__MZLab_Strong, Report))) {
			return nil;
		}
	}
	if (((bool)(Which & 2))) {
		if ((!JB_Str_CompressTestSub(Self, kJB__MZLab_Fast, Report))) {
			return nil;
		}
	}
	return true;
}

bool JB_Str_CompressTestSub(JB_String* Self, int Strength, bool Report) {
	bool Rz = false;
	CompressionStats Stats = ((CompressionStats){});
	JB_String* C = JB_Incr(JB_Str_Compress(Self, Strength, (&Stats)));
	if (Report) {
		JB_MzSt_Print((&Stats));
	}
	Stats = ((CompressionStats){});
	JB_String* Decomp = JB_Incr(JB_Str_Decompress(C, JB_int__Max(), (&Stats)));
	Rz = (JB_Str_Equals(Self, Decomp, false));
	if ((!Rz)) {
		if (true) {
			JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[816], Self));
			JB_Str_SyntaxExpect(_tmPf0);
			JB_Decr(_tmPf0);
		}
		JB_SetRef(Decomp, JB_Str_Decompress(C, JB_int__Max(), nil));
	}
	 else if (Report) {
		JB_String* _tmPf1 = JB_Incr(JB_MzSt_Render((&Stats), nil));
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(C);
	JB_Decr(Decomp);
	return Rz;
}

JB_String* SC_Str_ContainerName(JB_String* Self, JB_String* Ext) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_PathDir(Ext));
	Ind After = JB_Str_InStr(Self, _tmPf0, 0, JB_int__Max(), false);
	JB_Decr(_tmPf0);
	if (JB_Ind_SyntaxCast(After)) {
		JB_String* _tmPf1 = JB_Incr(JB_Str_Range(Self, 0, After));
		JB_String* _tmPf2 = JB_Incr(JB_Str_Name(_tmPf1));
		JB_Decr(_tmPf1);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	return JB_LUB[0];
}

ErrorInt JB_Str_CopyFileTo(JB_String* Self, JB_String* Dest, bool AttrOnly) {
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(Self));
	JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(Dest));
	ErrorInt _tmPf2 = JB_File_Copy(_tmPf0, _tmPf1, AttrOnly);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	return _tmPf2;
}

int JB_Str_Count(JB_String* Self, byte B) {
	int Rz = 0;
	{
		byte* _Startf0 = Self->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			byte C = _Startf0[0];
			Rz = (Rz + (C == B));
			_Startf0++;
		};
	}
	;
	return Rz;
}

ErrorInt2 SC_Str_DebugExecute(JB_String* Self, Array* Args, FastString* Out, FastString* Errs) {
	if (JB__File_DebugExecute) {
		JB_Str_Print(Self);
		JB_Str_Print(JB_LUB[99]);
		JB_String* _tmPf0 = JB_Incr(JB_Array_Render(Args, nil));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return JB_Str_Execute(Self, Args, Out, Errs, false);
}

void SC_Str_DebugFunc(JB_String* Self) {
	//visible;
	if (SC_Func_SyntaxEquals(SC__Func_CurrFunc, Self, true)) {
		debugger;
	}
}

JB_String* JB_Str_Decompress(JB_String* Self, int Lim, CompressionStats* St) {
	StringReader* _tmPf0 = JB_Incr(JB_Str_Stream(Self));
	JB_String* _tmPf1 = JB_Incr(JB_SS_Decompress(_tmPf0, Lim, St, true));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Dictionary* JB_Str_Dict(JB_String* Self, byte Sep) {
	Dictionary* Rz = JB_Incr(((Dictionary*)nil));
	JB_SetRef(Rz, JB_Dict_Constructor(nil));
	if (JB_Str_Exists(Self)) {
		{
			StringFields* _LoopSrcf2 = JB_Incr(JB_FI_Constructor(nil, Self, Sep));
			int _Prevf0 = 0;
			while (true) {
				Ind _Curr_f1 = JB_FI_NextSep(_LoopSrcf2, _Prevf0);
				JB_String* L = JB_Incr(JB_FI_Field(_LoopSrcf2, _Prevf0, _Curr_f1));
				(JB_Dict_ValueSet(Rz, L, JB_LUB[2053]));
				JB_Decr(L);
				_Prevf0 = (_Curr_f1 + 1);
				if ((!JB_Ind_SyntaxCast(_Curr_f1))) {
					break;
				}
			};
			JB_Decr(_LoopSrcf2);
		};
	}
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* JB_Str_Digest(JB_String* Self) {
	if (JB_Ind_SyntaxCast(JB_Str_IsJbin(Self))) {
		return Self;
	}
	Message* _tmPf0 = JB_Incr(JB_Str_Parse(Self, JB_SyxArg, true));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return JB_LUB[0];
	}
	JB_String* _tmPf1 = JB_Incr(JB_Msg_RenderJbin(_tmPf0, JB_LUB[0], nil));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool JB_Str_EndsWith(JB_String* Self, JB_String* S, bool Aware) {
	int N = JB_Str_Length(S);
	int L = JB_Str_Length(Self);
	{
		IntRange _LoopSrcf2 = JB_int_OperatorTo(1, N);
		int __Endf0 = _LoopSrcf2[1];
		int I = _LoopSrcf2[0];
		while (I < __Endf0) {
			byte A = JB_Str_ByteValue(Self, L - I);
			byte B = JB_Str_ByteValue(S, N - I);
			if (Aware) {
				A = JB_byte_LowerCase(A);
				B = JB_byte_LowerCase(B);
			}
			if (A != B) {
				return nil;
			}
			I++;
		};
	}
	;
	return true;
}

JB_String* JB_Str_Escape(JB_String* Self) {
	return JB_Str_MultiReplaceAll(Self, JB__Constants_EscapeStr, JB_StdErr);
}

JB_String* JB_Str_EscapeChr(JB_String* Self) {
	return JB_Str_MultiReplaceAll(Self, JB__Constants_EscapeChr, JB_StdErr);
}

bool JB_Str_EscapeTest(JB_String* Self) {
	JB_String* Esc = JB_Incr(JB_Str_Escape(Self));
	JB_String* Back = JB_Incr(JB_Str_Unescape(Esc));
	JB_Decr(Esc);
	bool _tmPf0 = ((JB_Str_Equals(Back, Self, false)));
	JB_Decr(Back);
	return _tmPf0;
}

JB_String* JB_Str_Ext(JB_String* Self) {
	Ind I = JB_Str_FindByte(Self, '.', JB_int__Max(), 0);
	if ((!JB_Ind_SyntaxCast(I))) {
		return JB_LUB[0];
	}
	Ind N = JB_Str_OutByteWithByteIntInt(Self, '/', JB_int__Max(), 0);
	if ((!JB_Ind_SyntaxCast(N))) {
		N = JB_Str_Length(Self);
	}
	return JB_Str_Range(Self, I + 1, N + 1);
}

JB_File* JB_Str_AsFile(JB_String* Self) {
	if (JB_Object_Isa(Self, &JB_FileData)) {
		return ((JB_File*)Self);
	}
	return JB_Str_File(Self);
}

JB_File* JB_Str_ChildFile(JB_String* Self, JB_String* Ch) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Child(Self, Ch));
	JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool JB_Str_FileExists(JB_String* Self) {
	JB_File* F = JB_Incr(JB_Str_AsFile(Self));
	bool _tmPf0 = JB_File_Exists(F, false);
	JB_Decr(F);
	return _tmPf0;
}

int64 JB_Str_FileSize(JB_String* Self) {
	JB_File* F = JB_Incr(JB_Str_AsFile(Self));
	int64 _tmPf0 = JB_File_Size(F);
	JB_Decr(F);
	return _tmPf0;
}

JB_File* JB_Str_FileThatExists(JB_String* Self, JB_String* Operation) {
	JB_File* F = JB_Incr(JB_Str_AsFile(Self));
	if (JB_File_MustExist(F, Operation)) {
		JB_SafeDecr(F);
		return F;
	}
	JB_Decr(F);
	return nil;
}

Ind JB_Str_FindByte(JB_String* Self, byte Find, int Start, int After) {
	return JB_Str_InByte(Self, Start, After, Find);
}

Ind JB_Str_Find(JB_String* Self, CharSet* Cs, int Start, int After) {
	return JB_Str_CharSet(Self, Start, After, Cs, true);
}

Ind JB_Str_FindSlash(JB_String* Self, int From) {
	Ind Rz = -1;
	if (From < JB_Str_Length(Self)) {
		Rz = JB_Str_FindByte(Self, '/', From, JB_int__Max());
		if ((!JB_Ind_SyntaxCast(Rz))) {
			Rz = JB_Str_Length(Self);
		}
	}
	return Rz;
}

int JB_Str_FindTrailingSlashes(JB_String* Self) {
	int Rz = 0;
	Rz = JB_Str_Length(Self);
	while (JB_Str_ByteValue(Self, Rz - 1) == '/') {
		Rz--;
	};
	return Rz;
}

int64 JB_Str_Int(JB_String* Self) {
	return JB_Str_TextIntegerValid(Self, nil);
}

JB_String* SC_Str_InterfaceToBehaviour(JB_String* Self) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Range(Self, 2, JB_Str_Length(Self) - 2));
	JB_String* _tmPf1 = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Ind JB_Str_InWhite(JB_String* Self, int Start, int After) {
	return JB_Str_WhiteSpace(Self, Start, After, true);
}

bool SC_Str_isCLike(JB_String* Self) {
	if (JB_Platform__OSX()) {
		return ((JB_Str_Equals(Self, JB_LUB[1568], true)) or ((JB_Str_Equals(Self, JB_LUB[1770], true)) or (JB_Str_Equals(Self, JB_LUB[1793], true))));
	}
	 else {
		return ((JB_Str_Equals(Self, JB_LUB[1568], true)));
	}
}

bool JB_Str_IsCompressed(JB_String* Self) {
	return JB_Ind_SyntaxCast(JB_Str_IsJbin(Self)) and JB_Str_MidEquals(Self, JB_Str_Length(JB__JbinHeader), JB_LUB[87], false);
}

int JB_Str_IsHexLike(JB_String* Self, int N) {
	if (JB_Str_ByteValue(Self, N + 0) == '0') {
		byte X = JB_Str_ByteValue(Self, N + 1);
		if (JB_byte_IsLetter(X)) {
			return 2;
		}
	}
	return 0;
}

bool JB_Str_IsInt(JB_String* Self) {
	return JB_Str_IsIntFrom(Self, 0);
}

bool JB_Str_IsIntFrom(JB_String* Self, int I) {
	if ((!JB_Str_Exists(Self))) {
		return nil;
	}
	while (I < JB_Str_Length(Self)) {
		if ((!JB_byte_IsInt(JB_Str_ByteValue(Self, I++)))) {
			return nil;
		}
	};
	return true;
}

Ind JB_Str_IsJbin(JB_String* Self) {
	if ((JB_Str_First(Self) == '#') and (JB_Str_ByteValue(Self, 1) == '!')) {
		Ind Nl = JB_Str_FindByte(Self, '\n', 0, JB_int__Max());
		if (JB_Ind_SyntaxCast(Nl)) {
			Nl++;
			if (JB_Str_MidEquals(Self, Nl, JB__JbinHeader, false)) {
				return Nl;
			}
		}
	}
	 else if (JB_Str_MidEquals(Self, 0, JB__JbinHeader, false)) {
		return 0;
	}
	return -1;
}

bool JB_Str_IsLower(JB_String* Self) {
	{
		byte* _Startf0 = Self->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			byte S = _Startf0[0];
			if (JB_byte_IsUpper(S)) {
				return nil;
			}
			_Startf0++;
		};
	}
	;
	return true;
}

bool SC_Str_Isnull(JB_String* Self) {
	{
		byte* _Startf0 = Self->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			byte C = _Startf0[0];
			if (C != '\x00') {
				return nil;
			}
			_Startf0++;
		};
	}
	;
	return true;
}

bool JB_Str_IsOK(JB_String* Self) {
	return (Self != nil) and (((JB_Object*)Self) != ((JB_Object*)JB_Str__Error()));
}

bool SC_Str_IsOKForImport(JB_String* Self) {
	JB_String* X = JB_Incr(Self);
	if (JB_Str_OperatorStarts(Self, JB_LUB[993])) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(Self, (6), JB_int__Max()));
		bool _tmPf1 = SC_Str_IsOKForImport(_tmPf0);
		JB_Decr(_tmPf0);
		JB_Decr(X);
		return _tmPf1;
	}
	while (JB_Str_First(X) == '/') {
		JB_SetRef(X, JB_Str_Range(X, (1), JB_int__Max()));
	};
	if ((!JB_Str_Exists(X)) or JB_CS_HasChar(JB__Constants_CSWordStart, JB_Str_First(X))) {
		JB_Decr(X);
		return true;
	}
	if (true) {
		JB_Object_Fail(X, JB_LUB[936]);
	}
	JB_Decr(X);
	return false;
}

bool SC_Str_IsSpeedieSrc(JB_String* Self) {
	return (JB_Str_OperatorIsa(Self, JB_LUB[1953]));
}

bool JB_Str_IsStatementName(JB_String* Self) {
	return (JB_CS_OperatorContains(JB__Constants_CSWordMiddle, Self)) and ((!JB_byte_IsInt((JB_Str_First(Self)))));
}

int SC_Str_IsSwizzle(JB_String* Self, int Width) {
	int N = JB_Str_Length(Self);
	int Total = 0;
	int I = 0;
	int Shift = 0;
	int C = 0;
	int Dold = 0;
	if (N > 8) {
		return 0;
	}
	bool HasLetter = false;
	while (I < N) {
		byte D = JB_byte_LowerCase(JB_Str_ByteValue(Self, I++));
		if (D != '_') {
			HasLetter = true;
			if ((!(((!C)) or (((D >= 'w') == (Dold >= 'w')) or (Dold == '_'))))) {
				return 0;
			}
		}
		C = D;
		Dold = D;
		if ((C == 'r') or (C == 'x')) {
			C = 0;
		}
		 else if ((C == 'g') or (C == 'y')) {
			C = 1;
		}
		 else if ((C == 'b') or (C == 'z')) {
			C = 2;
		}
		 else if ((C == 'a') or (C == 'w')) {
			C = 3;
		}
		 else if (C == '_') {
			C = 4;
		}
		if (I < N) {
			int C2 = JB_byte_LowerCase(JB_Str_ByteValue(Self, I));
			if (C2 == '1') {
				I++;
			}
			 else if (C2 == '2') {
				I++;
				if (Width == 3) {
					return 0;
				}
				C = (C + (Width >> 1));
			}
		}
		if ((!((C <= 4) and (C >= 0)))) {
			return 0;
		}
		Total = (Total | (C << (Shift++ * 3)));
	};
	if (HasLetter) {
		return Total | (Shift << 16);
	}
	return 0;
}

bool SC_Str_IsZero(JB_String* Self) {
	{
		byte* _Startf0 = Self->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			byte C = _Startf0[0];
			if ((!((C == '.') or (C == '0')))) {
				return nil;
			}
			_Startf0++;
		};
	}
	;
	return true;
}

Ind JB_Str_JBFind(JB_String* Self, byte Find, int Off, int After) {
	After = JB_int_OperatorMin(After, JB_Str_Length(Self));
	while (Off < After) {
		byte C = JB_Str_ByteValue(Self, Off++);
		if (C == '\\') {
			Off++;
		}
		 else if (C == Find) {
			if (Find == '$') {
				if (Off >= After) {
					break;
				}
				byte Nxt = JB_Str_ByteValue(Self, Off);
				if ((!(((Nxt == '{') or (Nxt == '.')) or JB_CS_HasChar(JB__Constants_CSWordStart, Nxt)))) {
					continue;
				}
			}
			return Off - 1;
		}
	};
	return -1;
}

byte JB_Str_Last(JB_String* Self, int Minus) {
	return JB_Str_ByteValue(Self, JB_Str_Length(Self) - (1 + Minus));
}

int JB_Str_LineCount(JB_String* Self) {
	if ((!JB_Str_Exists(Self))) {
		return 1;
	}
	return JB_Str_Count(Self, '\n') + 1;
}

JB_File* SC_Str_MakeAndGoInto(JB_String* Self) {
	JB_File* Rz = nil;
	JB_SetRef(Rz, JB_Str_AsFile(Self));
	JB_Str_MakeEntirePath(Rz, true);
	(JB_App__CWDSet(Self));
	JB_SafeDecr(Rz);
	return Rz;
}

ErrorInt JB_Str_MakeEntirePath(JB_String* Self, bool Last) {
	ErrorInt Rz = 0;
	//visible;
	JB_String* P = ((JB_String*)JB_Ternary(Last, Self, JB_Str_Parent(Self)));
	{
		JB_String* _Pf0 = JB_Incr(JB_Str_TrimSlashes(P, true));
		Ind _if1 = JB_Str_FindSlash(_Pf0, 1);
		while (_if1 > 0) {
			JB_String* S = JB_Incr(JB_Str_Range(_Pf0, 0, _if1));
			int Err = ((int)JB_Str_MakeDir(S));
			JB_Decr(S);
			if (Err) {
				Rz = Err;
				break;
			}
			_if1 = JB_Str_FindSlash(_Pf0, _if1 + 1);
		};
		JB_Decr(_Pf0);
	}
	;
	return Rz;
}

JB_String* JB_Str_Moat(JB_String* Self) {
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	(JB_FS_SizeSet(Fs, JB_Str_Length(Self) + 4));
	JB_FS_AppendString(Fs, JB_LUB[1439]);
	JB_FS_AppendString(Fs, Self);
	JB_FS_AppendString(Fs, JB_LUB[1439]);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* JB_Str_Msg(JB_String* Self) {
	return JB_Syx_OperatorPlus(JB_SyxStr, Self);
}

JB_String* JB_Str_Name(JB_String* Self) {
	int Last = JB_Str_TrimLastSub(Self, '/');
	return JB_Str_AfterByte(Self, '/', Last);
}

bool JB_Str_ContainsString(JB_String* Self, JB_String* S) {
	return JB_Ind_SyntaxCast(JB_Str_InStr(Self, S, 0, JB_int__Max(), true));
}

bool JB_Str_ContainsByte(JB_String* Self, byte B) {
	return JB_Ind_SyntaxCast(JB_Str_FindByte(Self, B, 0, JB_int__Max()));
}

Array* JB_Str_OperatorDivide(JB_String* Self, byte Sep) {
	return JB_Str_Split(Self, Sep);
}

bool JB_Str_OperatorEndsWith(JB_String* Self, JB_String* S) {
	return JB_Str_EndsWith(Self, S, true);
}

bool JB_Str_OperatorIsa(JB_String* Self, JB_String* S) {
	if (JB_Str_Exists(Self)) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Ext(Self));
		bool _tmPf1 = (JB_Str_Equals(_tmPf0, S, true));
		JB_Decr(_tmPf0);
		return _tmPf1;
	}
	return false;
}

int JB_Str_OperatorMinus(JB_String* Self, JB_String* S) {
	return JB_Str_Length(Self) - JB_Str_Length(S);
}

JB_String* JB_Str_MulBool(JB_String* Self, bool B) {
	return ((JB_String*)JB_Ternary(B, ((JB_String*)Self), ((JB_String*)JB_LUB[0])));
}

JB_String* JB_Str_OperatorMul(JB_String* Self, int N) {
	if (N <= 1) {
		return JB_Str_MulBool(Self, N == 1);
	}
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	(JB_FS_SizeSet(Fs, N * JB_Str_Length(Self)));
	JB_FS_AppendMultiStr(Fs, Self, N);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Str_PlusByte(JB_String* Self, byte B) {
	return JB_Str_OperatorPlus(Self, JB_Str__Byte(B));
}

JB_String* JB_Str_OperatorPlusWithCstring(JB_String* Self, _cstring C) {
	if (JB_Str_Exists(Self)) {
		FakeJBString Tmp = JB_cstring_temp(C);
		return JB_Str_OperatorPlus(Self, ((JB_String*)((&Tmp))));
	}
	return JB_cstring_Str(C);
}

bool JB_Str_OperatorStarts(JB_String* Self, JB_String* S) {
	return JB_Str_MidEquals(Self, 0, S, true);
}

bool SC_Str_OptionBool(JB_String* Self) {
	return ((JB_Str_Equals(Self, JB_LUB[0], true)) or ((JB_Str_Equals(Self, JB_LUB[2004], true)) or (JB_Str_Equals(Self, JB_LUB[2063], true))));
}

int SC_Str_OptionInt(JB_String* Self) {
	if (SC_Str_OptionBool(Self)) {
		return 1;
	}
	return JB_Str_Int(Self);
}

FastString* JB_Str_Out(JB_String* Self, bool Clear) {
	FastString* Rz = nil;
	JB_File* F = JB_Incr(JB_Str_AsFile(Self));
	if (Clear and (!JB_File_IsPipe(F))) {
		JB_File_Close(F);
		if ((!JB_File_OpenBlank(F))) {
			JB_Decr(F);
			JB_Decr(Rz);
			return nil;
		}
	}
	JB_SetRef(Rz, JB_FS_Constructor(nil));
	(JB_FS_FileSet(Rz, F));
	JB_Decr(F);
	JB_SafeDecr(Rz);
	return Rz;
}

Ind JB_Str_OutByteWithByteIntInt(JB_String* Self, byte Find, int Start, int After) {
	return JB_Str_OutByte(Self, Start, After, Find);
}

Ind JB_Str_OutCharSet(JB_String* Self, CharSet* Cs, int Start, int After) {
	return JB_Str_CharSet(Self, Start, After, Cs, false);
}

Ind JB_Str_OutWhite(JB_String* Self, int Start, int After) {
	return JB_Str_WhiteSpace(Self, Start, After, false);
}

JB_String* JB_Str_Parent(JB_String* Self) {
	if ((!JB_Str_Equals(Self, JB_LUB[387], false))) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_TrimSlashes(Self, false));
		JB_String* _tmPf1 = JB_Incr(JB_Str_BeforeLastByte(_tmPf0, '/', 1));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return JB_LUB[0];
}

Message* JB_Str_Parse(JB_String* Self, Syntax Owner, bool AllowDecomp) {
	Message* Rz = JB_Incr(((Message*)nil));
	JB_String* Data = JB_Incr(JB_Str_Range(Self, JB_int_OperatorMax(JB_Str_IsJbin(Self), 0), JB_int__Max()));
	if (AllowDecomp and JB_Str_IsCompressed(Data)) {
		JB_SetRef(Data, JB_Str_Decompress(Data, JB_int__Max(), nil));
	}
	Ind J2 = JB_Str_IsJbin(Data);
	if (JB_Ind_SyntaxCast(J2)) {
		JB_SetRef(Data, JB_Str_Range(Data, J2, JB_int__Max()));
		JB_SetRef(Rz, JB_Str_ParseJbin(Data, kJB__int64_max));
	}
	 else {
		JB_SetRef(Rz, JB_Str_ParseSub(Data, Owner, AllowDecomp));
	}
	JB_Decr(Data);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Str_ParseClean(JB_String* Self) {
	Message* Rz = nil;
	SC__Comp_stTotalSourceSize = (SC__Comp_stTotalSourceSize + JB_Str_Length(Self));
	Date P1 = JB_Date__Now();
	JB_SetRef(Rz, JB_Str_Parse(Self, JB_SyxArg, true));
	if ((!Rz)) {
		JB_Decr(Rz);
		return nil;
	}
	SC__Comp_stParseTime = (SC__Comp_stParseTime + ((int)(JB_Date__Now() - P1)));
	SC_Msg_Clean(Rz, true);
	SC_Msg_PrepareAST(Rz, JB_LUB[0]);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Str_ParseCleanWipe(JB_String* Self) {
	Message* Rz = nil;
	JB_SetRef(Rz, SC_Str_ParseClean(Self));
	if (Rz) {
		JB_Msg_WipePositions(Rz);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Message* JB_Str_ParseJbin(JB_String* Self, int64 Max) {
	StringReader* _tmPf0 = JB_Incr(JB_Str_Stream(Self));
	Message* _tmPf1 = JB_Incr(JB_SS_ParseJbin(_tmPf0, Max));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Str_ParseSub(JB_String* Self, Syntax Owner, bool AllowDecomp) {
	if ((!JB_Tk__CppInited())) {
		JB_Tk__Init();
	}
	JB_Tk__StartParse(Self);
	JB__Tk__StopBars = 0;
	ErrorMarker OK = JB_Rec_Mark(JB_StdErr);
	int Flags = kJB__Tk_kTemporal;
	Message* Into = JB_Incr(JB_Msg_ConstructorRange(nil, nil, Owner, 0, JB_LUB[0], 0));
	bool Lines = JB_Tk__ParseLoopFlags(Into, JB_LUB[0], Flags);
	if ((!Lines) and JB_Ring_HasChildCount(Into, 1)) {
		JB_SetRef(Into, ((Message*)JB_Ring_First(Into)));
	}
	JB_Tk__CleanSpaces();
	if (JB_Tk__Running()) {
		JB_Tk__Expect(0);
	}
	JB_Tk__StopParse();
	if ((!JB_ErrorMarker_SyntaxCast(OK))) {
		JB_SetRef(Into, nil);
	}
	JB_SafeDecr(Into);
	return ((Message*)Into);
}

Message* JB_Str_ParseWithError(JB_String* Self, JB_Error** Rec) {
	Message* Rz = JB_Incr(((Message*)nil));
	JB_SetRef(Rz, JB_Str_Parse(Self, JB_SyxArg, true));
	if ((!Rz)) {
		JB_Error* R = JB_Incr(JB_Rec_Pop(JB_StdErr));
		if (Rec) {
			JB_SetRef((*Rec), R);
		}
		JB_Decr(R);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* JB_Str_PathDir(JB_String* Self) {
	if (JB_Str_Exists(Self) and (JB_Str_Last(Self, 0) != '/')) {
		return JB_Str_OperatorPlus(Self, JB_LUB[387]);
	}
	return Self;
}

JB_String* JB_Str_Preview(JB_String* Self, int N) {
	//visible;
	if (JB_Str_Length(Self) <= N) {
		return Self;
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(Self, 0, N));
	JB_String* _tmPf0 = JB_Incr(JB_Str_UnicodeSync(_tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, JB_LUB[357]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void JB_Str_PrintlineColor(JB_String* Self, JB_String* Color) {
	if (JB__ErrorColors_Enabled) {
		JB_Str_Print(Color);
	}
	JB_PrintLine(Self);
	if (JB__ErrorColors_Enabled) {
		JB_Str_Print(kJB__ErrorColors_normal);
	}
}

JB_String* JB_Str_ReadFile(JB_String* Self, int Lim, bool AllowMissing) {
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(Self));
	JB_String* _tmPf1 = JB_Incr(JB_File_ReadAll(_tmPf0, Lim, AllowMissing));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Str_ReplacePathComponent(JB_String* Self, int Num, JB_String* With) {
	Array* R = JB_Incr(JB_Str_Components(Self));
	if (Num < 0) {
		Num = (Num + JB_Array_Size(R));
	}
	(JB_Array_ValueSet(R, Num, With));
	JB_String* _tmPf0 = JB_Incr(JB_Array_join(R, JB_LUB[387]));
	JB_Decr(R);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Str_ResolveSpd(JB_String* Self) {
	if (JB_Str_MidEquals(Self, 0, JB_LUB[604], false)) {
		JB_String* _tmPf1 = JB_Incr(SC_Comp__FindSpeedieRoot());
		JB_String* _tmPf2 = JB_Incr(JB_Str_Range(Self, (5), JB_int__Max()));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(_tmPf1, _tmPf2));
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf2);
		JB_String* _tmPf3 = JB_Incr(JB_Str_ResolvePath((_tmPf0), kJB__FileResolveMode_AllowMissing));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	return JB_Str_ResolvePath(Self, kJB__FileResolveMode_AllowMissing);
}

void SC_Str_Safe(JB_String* Self, FastString* Fs, bool Local) {
	if (JB_Str_IsASCII(Self)) {
		if (Local and JB_Str_IsLower(Self)) {
			JB_FS_AppendByte(Fs, JB_byte_UpperCase(JB_Str_First(Self)));
			JB_FS_AppendSection(Fs, Self, 1, JB_int__Max());
		}
		 else {
			JB_FS_AppendString(Fs, Self);
		}
		return;
	}
	{
		byte* _Startf0 = Self->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			byte S = _Startf0[0];
			if (JB_byte_IsUpper(S) or (JB_byte_IsLower(S) or (JB_byte_IsInt(S) or (S == '_')))) {
				JB_FS_AppendByte(Fs, S);
			}
			 else {
				JB_FS_AppendByte(Fs, 'x');
				JB_FS_AppendHex(Fs, S, 2);
			}
			_Startf0++;
		};
	};
}

JB_String* SC_Str_ScriptContainer(JB_String* Self, JB_String* Container) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(JB_int64_Abs(((int64)JB_Str_CRC(Self, 0))), nil));
	JB_String* _tmPf1 = JB_Incr(JB_Str_SyntaxAccess(Container, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Str_ScriptLocation(JB_String* Self, JB_String* Container) {
	JB_String* Full = JB_Incr(JB_Str_ResolvePath(Self, false));
	if ((!JB_Str_Exists(Full))) {
		JB_SetRef(Full, Self);
	}
	JB_String* Dest = JB_Incr(SC_Str_ScriptContainer(Full, Container));
	JB_Str_MakeEntirePath(Dest, true);
	JB_String* _tmPf0 = JB_Incr(SC_Str_SpdScriptName(Full));
	JB_Decr(Full);
	JB_String* _tmPf1 = JB_Incr(JB_Str_SyntaxAccess(Dest, _tmPf0));
	JB_Decr(Dest);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Str_Sibling(JB_String* Self, JB_String* Name) {
	return JB_Str_ReplacePathComponent(Self, -1, Name);
}

ErrorInt2 JB_Str_SilentExecute(JB_String* Self, Array* Args, FastString* Out, FastString* Errs) {
	return JB_Str_Execute(Self, Args, Out, Errs, false);
}

JB_String* SC_Str_SpdScriptName(JB_String* Self) {
	JB_String* Rz = JB_Incr(JB_LUB[0]);
	JB_SetRef(Rz, SC_Str_ContainerName(Self, JB_LUB[379]));
	if ((!(JB_Str_Exists(Rz)))) {
		JB_SetRef(Rz, SC_Str_ContainerName(Self, JB_LUB[384]));
	}
	if ((!(JB_Str_Exists(Rz)))) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Name(Self));
		JB_SetRef(Rz, JB_Str_TrimExtAndPath(_tmPf0, true));
		JB_Decr(_tmPf0);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Array* JB_Str_Split(JB_String* Self, byte Sep) {
	Array* Rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	{
		StringFields* _LoopSrcf2 = JB_Incr(JB_FI_Constructor(nil, Self, Sep));
		int _Prevf0 = 0;
		while (true) {
			Ind _Curr_f1 = JB_FI_NextSep(_LoopSrcf2, _Prevf0);
			JB_String* Field = JB_Incr(JB_FI_Field(_LoopSrcf2, _Prevf0, _Curr_f1));
			JB_Array_SyntaxAppend(Rz, Field);
			JB_Decr(Field);
			_Prevf0 = (_Curr_f1 + 1);
			if ((!JB_Ind_SyntaxCast(_Curr_f1))) {
				break;
			}
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* JB_Str_Squeeze(JB_String* Self) {
	//visible;
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	bool Broken = false;
	{
		byte* _Startf0 = Self->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			byte C = _Startf0[0];
			if (JB_byte_IsWhite(C)) {
				Broken = ((bool)Fs->Length);
			}
			 else {
				if (Broken) {
					JB_FS_AppendByte(Fs, ' ');
				}
				JB_FS_AppendByte(Fs, C);
				Broken = false;
			}
			_Startf0++;
		};
	}
	;
	JB_String* _tmPf3 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

StringReader* JB_Str_Stream(JB_String* Self) {
	return JB_SS_Constructor(nil, Self);
}

JB_String* JB_Str_SyntaxAccess(JB_String* Self, JB_String* S) {
	return JB_Str_Child(Self, S);
}

bool JB_Str_SyntaxAppend(JB_String* Self, JB_String* S) {
	return JB_Str_WriteSet(Self, S);
}

int JB_Str_CompareStr(JB_String* Self, JB_String* Other, bool Aware) {
	return JB_Str_Compare(Self, Other, Aware);
}

int JB_Str_CompareInt(JB_String* Self, int Other, bool Aware) {
	return JB_Str_Length(Self) - Other;
}

bool JB_Str_EqualsInt(JB_String* Self, int Other, bool Aware) {
	return JB_Str_Length(Self) == Other;
}

void JB_Str_SyntaxExpect(JB_String* Self) {
	//visible;
	JB_Rec__NewErrorWithNode(nil, Self, nil);
}

JB_String* JB_Str_TitleCase(JB_String* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendByte(Fs, JB_byte_UpperCase((JB_Str_First(Self))));
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(Self, 1, JB_int__Max()));
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(_tmPf1));
	JB_Decr(_tmPf1);
	JB_FS_AppendString(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_String* _tmPf2 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_String* JB_Str_Shorten(JB_String* Self, int N) {
	return JB_Str_Range(Self, 0, JB_Str_Length(Self) - N);
}

JB_String* JB_Str_TrimExtAndPath(JB_String* Self, bool KeepPath) {
	int N = JB_Str_FindTrailingSlashes(Self);
	Ind Slash = JB_Str_FindByte(Self, '/', N - 1, 0) + 1;
	Ind Dot = JB_Str_FindByte(Self, '.', N - 1, Slash);
	if ((!(JB_Ind_SyntaxCast(Dot)))) {
		Dot = N;
	}
	if ((!KeepPath)) {
		Slash = 0;
	}
	return JB_Str_Range(Self, Slash, Dot);
}

JB_String* JB_Str_TrimFirst(JB_String* Self, byte B) {
	Ind S = JB_Str_OutByteWithByteIntInt(Self, B, 0, JB_int__Max());
	return JB_Str_Range(Self, (S), JB_int__Max());
}

int JB_Str_TrimLastSub(JB_String* Self, byte B) {
	int N = JB_Str_Length(Self);
	while (JB_Str_ByteValue(Self, N - 1) == B) {
		N--;
	};
	return N;
}

JB_String* JB_Str_TrimSlashes(JB_String* Self, bool Pathfix) {
	JB_String* Rz = JB_Incr(JB_LUB[0]);
	JB_String* P = JB_Incr(((JB_String*)JB_Ternary(Pathfix, JB_File_PathFix_(Self), Self)));
	if ((!((JB_Str_Last(P, 0) == '/') or JB_Str_ContainsString(P, JB_LUB[392])))) {
		JB_Decr(Rz);
		JB_SafeDecr(P);
		return P;
	}
	JB_Decr(P);
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	int Prev = 0;
	{
		byte* _Startf0 = Self->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			byte C = _Startf0[0];
			if ((C != '/') or (Prev != '/')) {
				JB_FS_AppendByte(Fs, C);
			}
			Prev = C;
			_Startf0++;
		};
	}
	;
	if (Prev == '/') {
		(JB_FS_LengthSet(Fs, Fs->Length - 1));
	}
	JB_SetRef(Rz, JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	if ((!JB_Str_Exists(Rz)) and JB_Str_Exists(Self)) {
		JB_SetRef(Rz, JB_LUB[387]);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* JB_Str_TrimStart(JB_String* Self, JB_String* S, bool All) {
	int I = 0;
	while (JB_Str_MidEquals(Self, I, S, false)) {
		I = (I + JB_Str_Length(S));
		if ((!All)) {
			break;
		}
	};
	return JB_Str_Range(Self, I, JB_int__Max());
}

bool SC_Str_UnderScoreAtAnyEnd(JB_String* Self) {
	return (JB_Str_First(Self) == '_') or (JB_Str_ByteValue(Self, -1) == '_');
}

JB_String* JB_Str_Unescape(JB_String* Self) {
	return JB_Str_MultiReplaceAll(Self, JB__Constants_UnEscapeStr, JB_StdErr);
}

JB_String* SC_Str_UnicodeSafeName(JB_String* Self, FastString* Fs_in) {
	if (JB_Str_IsASCII(Self)) {
		if (Fs_in) {
			JB_FS_AppendString(Fs_in, Self);
		}
		return Self;
	}
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	{
		byte* _Startf0 = Self->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			byte S = _Startf0[0];
			if (JB_CS_HasChar(JB_C_Letters, S)) {
				JB_FS_AppendByte(Fs, S);
			}
			 else {
				JB_FS_AppendByte(Fs, 'x');
				JB_FS_AppendHex(Fs, S, 2);
			}
			_Startf0++;
		};
	}
	;
	JB_String* _tmPf3 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

CharSet* JB_Str_UniCS(JB_String* Self) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(Self, JB_LUB[2093]));
	CharSet* _tmPf1 = JB_Incr(JB_Str_CharSetWithBool((_tmPf0), true));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_Str_UnPrintable(JB_String* Self) {
	if (JB_Ind_SyntaxCast(JB_Str_BadUTF8(Self, 0))) {
		return -1;
	}
	{
		byte* _Startf0 = Self->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(Self);
		while (_Startf0 < _Endf1) {
			byte C = _Startf0[0];
			if ((!((C >= ' ') or (C == 9)))) {
				if (JB_byte_IsTextLine(C)) {
					return '\n';
				}
				return -2;
			}
			_Startf0++;
		};
	}
	;
	return 0;
}

JB_String* JB_Str_UpperFirst(JB_String* Self) {
	if (JB_byte_IsUpper(JB_Str_First(Self))) {
		return Self;
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(Self, 0, 1));
	JB_String* _tmPf0 = JB_Incr(JB_Str_UpperCase(_tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(JB_Str_Range(Self, (1), JB_int__Max()));
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf2));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf2);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

bool JB_Str_Visible(JB_String* Self) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Name(Self));
	bool _tmPf1 = JB_Str_First(_tmPf0) != '.';
	JB_Decr(_tmPf0);
	return _tmPf1;
}

Array* JB_Str_Words(JB_String* Self) {
	return JB_Str_Split(Self, ' ');
}

JB_String* JB_Str_Wrap(JB_String* Self, int MaxWidth, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	int P = 0;
	while (true) {
		int I = P;
		P = JB_Str_WrapSub(Self, MaxWidth, false, P);
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(Self, I, P - 1));
		JB_FS_AppendString(Fs, _tmPf0);
		JB_Decr(_tmPf0);
		if (JB_Str_CompareInt(Self, P, false) <= 0) {
			break;
		}
		JB_FS_AppendByte(Fs, '\n');
	};
	JB_String* _tmPf1 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_Str_WrapSub(JB_String* Self, int MaxWidth, bool IsInline, int P) {
	int I = P;
	int ParaMax = 1024;
	MaxWidth = JB_int_OperatorMin(MaxWidth, ParaMax);
	int Orig = MaxWidth;
	ParaMax = (ParaMax + P);
	while (true) {
		int C = JB_Str_ByteValue2(Self, I, -1);
		if (C < 0) {
			return I;
		}
		if (JB_byte_IsTextLine(((byte)C))) {
			if ((!IsInline)) {
				return I + 1;
			}
			C = ' ';
		}
		if ((I >= ParaMax) or (MaxWidth <= 0)) {
			return I;
		}
		if (C == '\t') {
			I++;
			MaxWidth = (MaxWidth - JB_int_TabsWidth((Orig - MaxWidth)));
		}
		 else if (IsInline) {
			I++;
		}
		 else if (JB_CS_HasChar(JB__Constants_CSWrapSplit, C)) {
			I++;
			MaxWidth--;
		}
		 else {
			Ind WordEnd = JB_Str_Find(Self, JB__Constants_CSWrapSplit, I, ParaMax);
			if (JB_Ind_SyntaxCast(WordEnd)) {
				WordEnd = (WordEnd + (JB_Str_ByteValue(Self, WordEnd) > 32));
			}
			 else {
				WordEnd = JB_int_OperatorMin(JB_Str_Length(Self), ParaMax);
			}
			int MW2 = MaxWidth - JB_Str_CharCount(Self, I, WordEnd);
			if (MW2 < 0) {
				if (I == P) {
					I = (P + MaxWidth);
				}
				return I;
			}
			MaxWidth = MW2;
			I = WordEnd;
		}
	};
}

bool JB_Str_WriteSet(JB_String* Self, JB_String* Value) {
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(Self));
	bool _tmPf1 = JB_File_DataSet(_tmPf0, Value);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool JB_Str_Yes(JB_String* Self) {
	if ((!JB_Str_Exists(Self))) {
		return false;
	}
	if ((JB_Str_Equals(Self, JB_LUB[1812], true)) or ((JB_Str_Equals(Self, JB_LUB[1648], true)) or ((JB_Str_Equals(Self, JB_LUB[1839], true)) or ((JB_Str_Equals(Self, JB_LUB[440], true)) or (JB_Str_Equals(Self, JB_LUB[0], true)))))) {
		return false;
	}
	if ((JB_Str_Equals(Self, JB_LUB[2063], true)) or ((JB_Str_Equals(Self, JB_LUB[2004], true)) or ((JB_Str_Equals(Self, JB_LUB[1841], true)) or (JB_Str_Equals(Self, JB_LUB[449], true))))) {
		return true;
	}
	if (true) {
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(Self, JB_LUB[249]));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1088], _tmPf1));
		JB_Decr(_tmPf1);
		JB_Str_SyntaxExpect(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return false;
}

JB_String* JB_Str__FromPico(PicoMessage M) {
	byte* X = ((byte*)M.Data);
	if (X) {
		return JB_Str__Freeable(X, M.Length);
	}
	return JB_LUB[0];
}

bool JB_Str__Sorter(JB_Object* A, JB_Object* B) {
	return JB_Str_CompareStr(((JB_String*)A), ((JB_String*)B), false) <= -1;
}

JB_StringC* JB_Str__Wrap(_cstring Addr) {
	return JB_StrC(Addr);
}


StringFields* JB_FI_Constructor(StringFields* Self, JB_String* Source, byte Sep) {
	if (Self == nil) {
		Self = ((StringFields*)JB_NewClass(&StringFieldsData));
	}
	Self->Data = JB_Incr(Source);
	Self->Sep = Sep;
	return Self;
}

void JB_FI_Destructor(StringFields* Self) {
	JB_Clear(Self->Data);
}

JB_String* JB_FI_Field(StringFields* Self, Ind Prev, Ind Curr) {
	if ((!(JB_Ind_SyntaxCast(Curr)))) {
		Curr = JB_Str_Length(Self->Data);
	}
	return JB_Str_Range(Self->Data, Prev, Curr);
}

Ind JB_FI_NextSep(StringFields* Self, int Prev) {
	return JB_Str_FindByte(Self->Data, Self->Sep, Prev, JB_int__Max());
}


int JB_SS_Byte(StringReader* Self) {
	if (JB_FastBuff_HasAny((&Self->Data))) {
		return JB_FastBuff_Byte((&Self->Data));
	}
	if (JB_SS_NextChunk(Self)) {
		return JB_FastBuff_Byte((&Self->Data));
	}
	return -1;
}

void JB_SS_CompressInto(StringReader* Self, JB_Object* Dest, int Strength, CompressionStats* St) {
	if (Self == nil) {
		JB_Str_SyntaxExpect(JB_LUB[1059]);
		return;
	}
	FastString* J = JB_Incr(JB_FS__Use(Dest));
	if ((!J)) {
		JB_Decr(J);
		return;
	}
	if ((!St)) {
		St = (&JB__MzSt_All);
	}
	JB_MzSt_Start(St);
	JB_FS_AppendString(J, JB__JbinHeader);
	JB_bin_Enter(J, JB_SyxTmp, JB_LUB[2098]);
	JB_bin_AddInt(J, Self->Length);
	JB_bin_Enter(J, JB_SyxArg, JB_LUB[0]);
	while (JB_SS_HasAny(Self)) {
		JB_String* Str = JB_Incr(JB_SS_Str(Self, 1048576, 0));
		int Place = JB_bin_OpenSection(J);
		JB_Str_CompressChunk(J, Str);
		JB_bin_CloseSection(J, Place);
		JB_MzSt_LiveUpdate(St, JB_Str_Length(Str), J->Length - Place);
		JB_Decr(Str);
		if ((!JB_SS_NoMoreChunks(Self))) {
			JB_FS_Flush(J);
		}
	};
	JB_bin_Exit(J, 2);
	JB_FS_Flush(J);
	JB_Str_CompressChunk(J, nil);
	JB_Decr(J);
	JB_MzSt_End(St);
}

StringReader* JB_SS_Constructor(StringReader* Self, JB_String* Data) {
	if (Self == nil) {
		Self = ((StringReader*)JB_NewClass(&StringReaderData));
	}
	Self->Data = ((FastBuff){});
	Self->File = nil;
	Self->UserObj = nil;
	Self->ChunkSize = 0;
	Self->StartFrom = 0;
	(JB_FastBuff_ReadFromSet((&Self->Data), Data));
	Self->Length = JB_Str_Length(Data);
	Self->_NoMoreChunks = true;
	return Self;
}

JB_String* JB_SS_Decompress(StringReader* Self, int Lim, CompressionStats* St, bool Multi) {
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	while (JB_SS_HasAny(Self)) {
		if ((!JB_SS_DecompressInto(Self, Fs, Lim, St))) {
			JB_Decr(Fs);
			return JB_Str__Error();
		}
		if ((!Multi)) {
			break;
		}
	};
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

bool JB_SS_DecompressInto(StringReader* Self, JB_Object* Dest, int Lim, CompressionStats* St) {
	FastString* Fs = JB_Incr(JB_FS__Use(Dest));
	if ((!Fs)) {
		JB_Decr(Fs);
		return nil;
	}
	if ((!JB_SS_IsCompressed(Self))) {
		JB_String* _tmPf0 = JB_Incr(JB_SS_ReadAll(Self));
		JB_FS_AppendString(Fs, _tmPf0);
		JB_Decr(_tmPf0);
		JB_Decr(Fs);
		return true;
	}
	if ((!(St))) {
		St = (&JB__MzSt_All);
	}
	ErrorMarker OK = JB_Rec_Mark(JB_StdErr);
	if ((!JB_SS_IsJBin(Self))) {
		JB_SS_SyntaxExpect(Self, JB__jBinNotJbin);
	}
	Message* Mz = JB_Incr(JB_SS_NextMsg(Self));
	if (JB_Msg_EqualsSyx(Mz, JB_SyxArg, false)) {
		JB_SetRef(Mz, JB_SS_NextMsgExpect(Self, nil, JB_SyxTmp, nil));
	}
	 else if ((!JB_Msg_Expect(Mz, JB_SyxTmp, nil))) {
		JB_SetRef(Mz, nil);
	}
	if ((!Mz)) {
		JB_Decr(Mz);
		JB_Decr(Fs);
		return nil;
	}
	JB_MzSt_Start(St);
	Message* Size = JB_Incr(JB_SS_NextMsgExpect(Self, Mz, JB_SyxNum, nil));
	Message* Arg = JB_Incr(JB_SS_NextMsgExpect(Self, Mz, JB_SyxArg, nil));
	int64 Remaining = JB_Msg_Int(Size, 0);
	if ((!(((bool)Size) and (((bool)Arg) and (Remaining <= Lim))))) {
		if (Remaining > Lim) {
			if (true) {
				JB_SS_SyntaxExpect(Self, JB_LUB[1804]);
			}
		}
		 else {
			if (true) {
				JB_SS_SyntaxExpect(Self, JB_LUB[934]);
			}
		}
	}
	 else {
		JB_SetRef(Mz->Name, JB_LUB[0]);
		JB_SetRef(Size->Name, JB_LUB[0]);
		while (true) {
			Message* C = JB_Incr(JB_SS_NextMsgExpect(Self, Arg, JB_SyxBin, nil));
			if ((!C)) {
				JB_Decr(C);
				break;
			}
			JB_String* S = JB_Incr(C->Name);
			JB_Decr(S);
			int64 Expected = JB_int64_OperatorMin(Remaining, 1048576);
			if ((!JB_Str_DecompressChunk(Fs, C->Name, Expected))) {
				JB_Decr(C);
				break;
			}
			Remaining = (Remaining - Expected);
			JB_FS_Flush(Fs);
			JB_MzSt_LiveUpdate(St, JB_Msg_Length(C), Expected);
			JB_Tree_Remove(C);
			JB_Decr(C);
		};
	}
	JB_Decr(Fs);
	JB_Decr(Mz);
	JB_Decr(Size);
	JB_Decr(Arg);
	JB_MzSt_End(St);
	return JB_ErrorMarker_SyntaxCast(OK);
}

void JB_SS_Destructor(StringReader* Self) {
	JB_FastBuff_Destructor((&Self->Data));
	JB_Clear(Self->File);
}

bool JB_SS_HasAny(StringReader* Self) {
	if (Self == nil) {
		return nil;
	}
	if (JB_FastBuff_HasAny((&Self->Data))) {
		return true;
	}
	return JB_SS_NextChunk(Self);
}

int64 JB_SS_hInt(StringReader* Self) {
	int Sh = 0;
	int V = 0;
	while (true) {
		int B = JB_SS_Byte(Self);
		if (B < 0) {
			break;
		}
		V = (V | ((B & 127) << Sh));
		if (B <= 127) {
			return V;
		}
		Sh = (Sh + 7);
		if (Sh > 57) {
			JB_SS_SyntaxExpect(Self, JB_LUB[790]);
			return 0;
		}
	};
	return 0;
}

bool JB_SS_IsCompressed(StringReader* Self) {
	JB_String* Str = JB_Incr(JB_SS_StrNoAdvance(Self, 16, 0));
	bool _tmPf0 = JB_Str_IsCompressed(Str);
	JB_Decr(Str);
	return _tmPf0;
}

bool JB_SS_IsJBin(StringReader* Self) {
	JB_String* _tmPf0 = JB_Incr(JB_SS_Str(Self, 4, 0));
	bool _tmPf1 = JB_Ind_SyntaxCast(JB_Str_IsJbin(_tmPf0));
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool JB_SS_NextChunk(StringReader* Self) {
	JB_File* F = Self->File;
	if (JB_File_SyntaxCast(F)) {
		Self->StartFrom = (Self->StartFrom + JB_FastBuff_Size((&Self->Data)));
		if (JB_SS_ReadChunk(Self, F)) {
			return true;
		}
		JB_SetRef(Self->File, nil);
	}
	return false;
}

Message* JB_SS_NextMsgExpect(StringReader* Self, Message* Parent, Syntax Fn, JB_String* Name) {
	Message* Rz = nil;
	Rz = JB_SS_NextMsg(Self);
	if ((!Rz)) {
		return nil;
	}
	if ((!(JB_Msg_Expect(Rz, Fn, Name) and (JB_Msg_InMsg(Rz, Parent))))) {
		JB_Msg_SyntaxExpect(Rz, nil);
		return nil;
	}
	return Rz;
}

Message* JB_SS_NextMsg(StringReader* Self) {
	return ((Message*)JB_SS_NextMsgInfo(Self));
}

uint64 JB_SS_NextMsgInfo(StringReader* Self) {
	Message* Msg = ((Message*)Self->UserObj);
	int Info = 0;
	while (true) {
		Info = JB_SS_NonZeroByte(Self);
		if (Info <= 239) {
			break;
		}
		Msg = ((Message*)JB_Tree_Upward(Msg, Info - 239));
		Self->UserObj = Msg;
		if ((!Msg)) {
			return 0;
		}
	};
	Syntax T = ((Syntax)(Info >> 1));
	if ((T < JB_Syxmax) and (T > JB_SyxNil)) {
		Msg = JB_Msg_Msg(Msg, T, JB_SS_Str(Self, JB_SS_hInt(Self), 0));
		if (((bool)(Info & 1))) {
			Self->UserObj = Msg;
		}
		return ((uint64)Msg);
	}
	Self->UserObj = nil;
	if (Info >= 0) {
		if (T <= JB_SyxNil) {
			JB_SS_SyntaxExpect(Self, JB_LUB[1239]);
			return 0;
		}
		if (true) {
			JB_SS_SyntaxExpect(Self, JB_LUB[791]);
		}
	}
	return 0;
}

bool JB_SS_NoMoreChunks(StringReader* Self) {
	if (Self->_NoMoreChunks) {
		return true;
	}
	if (JB_FastBuff_Remaining((&Self->Data)) <= 0) {
		if ((!JB_File_SyntaxCast(Self->File))) {
			return true;
		}
		if (Self->Length <= Self->StartFrom) {
			return true;
		}
	}
	return false;
}

int JB_SS_NonZeroByte(StringReader* Self) {
	while (true) {
		int B = JB_SS_Byte(Self);
		if (B) {
			return B;
		}
	};
}

Message* JB_SS_ParseJbin(StringReader* Self, int64 Remain) {
	Message* Rz = JB_Incr(((Message*)nil));
	if ((!JB_SS_IsJBin(Self))) {
		JB_SS_SyntaxExpect(Self, JB__jBinNotJbin);
		JB_Decr(Rz);
		return nil;
	}
	Self->UserObj = nil;
	JB_SetRef(Rz, JB_SS_NextMsg(Self));
	while ((--Remain) > 0) {
		if ((!JB_SS_NextMsgInfo(Self))) {
			break;
		}
	};
	if (Self->Data.ErrorReported) {
		JB_SetRef(Rz, nil);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

int64 JB_SS_Position(StringReader* Self) {
	return JB_FastBuff_Position((&Self->Data)) + Self->StartFrom;
}

void JB_SS_PositionSet(StringReader* Self, int64 Value) {
	(JB_FastBuff_PositionSet((&Self->Data), Value - Self->StartFrom));
}

JB_String* JB_SS_ReadAll(StringReader* Self) {
	return JB_SS_Str(Self, Self->Length - Self->StartFrom, 0);
}

bool JB_SS_ReadChunk(StringReader* Self, JB_File* F) {
	JB_String* _tmPf0 = JB_Incr(JB_File_Read(F, Self->ChunkSize, true));
	(JB_FastBuff_ReadFromSet((&Self->Data), _tmPf0));
	JB_Decr(_tmPf0);
	if (JB_Str_Length(Self->Data.ReadFrom) < Self->ChunkSize) {
		Self->_NoMoreChunks = true;
	}
	return JB_Str_Exists(Self->Data.ReadFrom);
}

int JB_SS_Remaining(StringReader* Self) {
	return Self->Length - JB_SS_Position(Self);
}

JB_String* JB_SS_Str(StringReader* Self, int N, int Skip) {
	if ((!((N > 0) and (Skip < N)))) {
		return JB_LUB[0];
	}
	if ((JB_FastBuff_Has((&Self->Data), N)) or (JB_SS_NoMoreChunks(Self))) {
		N = JB_int_OperatorMin(N, JB_SS_Remaining(Self));
		int64 Pos = JB_FastBuff_Position((&Self->Data));
		(JB_FastBuff_PositionSet((&Self->Data), N + Pos));
		return JB_FastBuff_AccessStr((&Self->Data), Pos + Skip, JB_FastBuff_Position((&Self->Data)));
	}
	int Remaining = N - Skip;
	JB_String* R = JB_Incr(JB_Str_New(Remaining));
	if ((!JB_Str_Exists(R))) {
		JB_Decr(R);
		return JB_LUB[0];
	}
	byte* Dest = R->Addr;
	while (true) {
		uint Copied = JB_FastBuff_CopyTo((&Self->Data), Dest, JB_int64_OperatorMin(JB_FastBuff_Remaining((&Self->Data)), Remaining));
		Remaining = (Remaining - Copied);
		Dest = (Dest + Copied);
		if (Remaining <= 0) {
			break;
		}
		if ((!JB_SS_NextChunk(Self))) {
			JB_String* _tmPf0 = JB_Incr(JB_Str_Range(R, 0, JB_Str_Length(R) - Remaining));
			JB_SetRef(R, JB_Str_Copy(_tmPf0));
			JB_Decr(_tmPf0);
			break;
		}
	};
	JB_SafeDecr(R);
	return R;
}

JB_String* JB_SS_StrNoAdvance(StringReader* Self, int N, int Skip) {
	JB_String* Rz = JB_Incr(JB_LUB[0]);
	int64 P = JB_SS_Position(Self);
	JB_SetRef(Rz, JB_SS_Str(Self, N, 0));
	(JB_SS_PositionSet(Self, P));
	JB_SafeDecr(Rz);
	return Rz;
}

void JB_SS_SyntaxExpect(StringReader* Self, JB_String* Error) {
	Self->UserObj = nil;
	uint D = Self->Data.ErrorReported++;
	if (D) {
		return;
	}
	if ((!JB_Str_Exists(Error))) {
		if (JB_File_SyntaxCast(Self->File)) {
			Error = JB_LUB[840];
		}
		 else {
			Error = JB_LUB[839];
		}
	}
	JB_Rec__NewErrorWithNode(nil, Error, Self->File);
}


SyntaxObj* JB_Fn_Constructor(SyntaxObj* Self, FP_fpMsgRender Msg, JB_String* Name, int ID) {
	if (Self == nil) {
		Self = ((SyntaxObj*)JB_NewClass(&SyntaxObjData));
	}
	JB_StringC* _tmPf0 = JB_LUB[0];
	Self->LongName = JB_Incr(_tmPf0);
	Self->RenderAddr = Msg;
	Self->Name = JB_Incr(Name);
	Self->ID = ((Syntax)ID);
	Self->ExportAddr = JB_Msg_Dummy;
	return Self;
}

void JB_Fn_Destructor(SyntaxObj* Self) {
	JB_Clear(Self->Name);
	JB_Clear(Self->LongName);
}

JB_String* JB_Fn_Render(SyntaxObj* Self, FastString* Fs_in) {
	if ((!Fs_in)) {
		return JB_Str_LowerCase(Self->LongName);
	}
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(Self->LongName));
	JB_FS_AppendString(Fs_in, _tmPf0);
	JB_Decr(_tmPf0);
	return JB_LUB[0];
}


TerminalCell* JB_TerminalCell_ConstructorAuto(TerminalCell* Self, int Color, JB_String* Text) {
	if (Self == nil) {
		Self = ((TerminalCell*)JB_NewClass(&TerminalCellData));
	}
	Self->Color = Color;
	Self->Text = JB_Incr(Text);
	return Self;
}

void JB_TerminalCell_Destructor(TerminalCell* Self) {
	JB_Clear(Self->Text);
}



DTWrap* SC___junktest_6____AbcVis() {
	//visible;
	JB_String* X = ({
		JB_String* Y = JB_Incr(JB_LUB[1466]);
		JB_SafeDecr(nil);
		 Y;
	});
	JB_Decr(X);
	return nil;
}


autoitem* SC_autoitem_ConstructorAuto(autoitem* Self, JB_String* Sort, JB_String* Insert, SCObject* Value, JB_String* Display, bool Exact, int Type) {
	if (Self == nil) {
		Self = ((autoitem*)JB_NewClass(&autoitemData));
	}
	Self->Sort = JB_Incr(Sort);
	Self->Insert = JB_Incr(Insert);
	Self->Value = JB_Incr(Value);
	Self->Display = JB_Incr(Display);
	Self->Exact = Exact;
	Self->type = Type;
	return Self;
}

void SC_autoitem_Destructor(autoitem* Self) {
	JB_Clear(Self->Sort);
	JB_Clear(Self->Insert);
	JB_Clear(Self->Value);
	JB_Clear(Self->Display);
}

bool SC_autoitem_OKBy(autoitem* Self, autoitem* Prev) {
	if ((!Prev)) {
		return true;
	}
	if ((!JB_Str_Equals(Self->Insert, Prev->Insert, true))) {
		return true;
	}
	if (Self->Exact != Prev->Exact) {
		return true;
	}
	return false;
}


void SC_xC2xB5Form_AddRemainder(xC2xB5Form* Self, uint U) {
	SC_xC2xB5Form_SyntaxAppend(Self, kSC__ASM_Num | (kSC__ASM_Remainder | U));
}

xC2xB5Form* SC_xC2xB5Form_ConstructorWithStr(xC2xB5Form* Self, JB_String* Data) {
	if (Self == nil) {
		Self = ((xC2xB5Form*)JB_NewClass(&xC2xB5FormData));
	}
	Self->Count = 0;
	Self->Varies = false;
	Self->Name = JB_Incr(Data);
	{
		byte* _Startf0 = Data->Addr;
		byte* _Endf1 = _Startf0 + JB_Str_Length(Data);
		while (_Startf0 < _Endf1) {
			byte Param = _Startf0[0];
			SC_xC2xB5Form_LoadParam(Self, JB_Str__Byte(Param), nil);
			_Startf0++;
		};
	}
	;
	SC_xC2xB5Form_Finish(Self);
	Self->Index = (++SC__xC2xB5Form_Count);
	return Self;
}

xC2xB5Form* SC_xC2xB5Form_ConstructorWithMsg(xC2xB5Form* Self, Message* Tmp) {
	if (Self == nil) {
		Self = ((xC2xB5Form*)JB_NewClass(&xC2xB5FormData));
	}
	Self->Count = 0;
	Self->Varies = false;
	JB_String* _tmPf3 = Tmp->Name;
	Self->Name = JB_Incr(_tmPf3);
	{
		Message* _LoopSrcf2 = JB_Msg_Last(Tmp, JB_SyxArg);
		Message* Line = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Line));
			Message* F = JB_Msg_NeedFirst(Line);
			SC_xC2xB5Form_LoadParam(Self, JB_Msg_Name(F), F);
			Line = _Nf1;
		};
		;
	}
	;
	SC_xC2xB5Form_Finish(Self);
	Self->Index = (++SC__xC2xB5Form_Count);
	return Self;
}

void SC_xC2xB5Form_Destructor(xC2xB5Form* Self) {
	JB_Clear(Self->Name);
}

void SC_xC2xB5Form_Finish(xC2xB5Form* Self) {
	int Total = 0;
	{
		int _if0 = 0;
		while (_if0 < Self->Count) {
			int I = _if0;
			ASMParam S = SC_xC2xB5Form_AccessInt(Self, _if0);
			if (((bool)(S & kSC__ASM_Remainder))) {
				S = (S | (25 - Total));
			}
			(SC_xC2xB5Form_SyntaxAccessSet(Self, I, S | (Total << 11)));
			Total = (Total + SC_xC2xB5Param_BitSize(S));
			_if0++;
		};
	};
}

void SC_xC2xB5Form_LoadParam(xC2xB5Form* Self, JB_String* Pl, Message* Place) {
	if (JB_Str_IsInt(Pl)) {
		SC_xC2xB5Form_SyntaxAppend(Self, SC_Str_ASMint(Pl) | kSC__ASM_Num);
		return;
	}
	if ((!JB_Str_EqualsInt(Pl, 1, false))) {
		JB_Object_SyntaxExpect(Self);
		return;
	}
	byte P = JB_Str_First(Pl);
	if (P == 'r') {
		SC_xC2xB5Form_SyntaxAppend(Self, 5);
	}
	 else if (P == 'n') {
		SC_xC2xB5Form_SyntaxAppend(Self, 5 | kSC__ASM_Num);
	}
	 else if (P == 'l') {
		SC_xC2xB5Form_AddRemainder(Self, 0);
	}
	 else if (P == 'L') {
		SC_xC2xB5Form_AddRemainder(Self, kSC__ASM_NoExpect);
	}
	 else if (P == 's') {
		SC_xC2xB5Form_AddRemainder(Self, kSC__ASM_Signed);
	}
	 else if (P == 'S') {
		SC_xC2xB5Form_AddRemainder(Self, kSC__ASM_Signed + kSC__ASM_NoExpect);
	}
	 else if (P == 'j') {
		SC_xC2xB5Form_AddRemainder(Self, kSC__ASM_Signed + kSC__ASM_Jump);
	}
	 else if ((bool)Place) {
		if (true) {
			JB_Msg_SyntaxExpect(Place, nil);
		}
	}
	 else {
		if (true) {
			JB_Object_SyntaxExpect(Self);
		}
	}
}

ASMParam SC_xC2xB5Form_AccessInt(xC2xB5Form* Self, int I) {
	return Self->Params[I];
}

void SC_xC2xB5Form_SyntaxAccessSet(xC2xB5Form* Self, int I, ASMParam Value) {
	Self->Params[I] = Value;
}

void SC_xC2xB5Form_SyntaxAppend(xC2xB5Form* Self, ASMParam P) {
	int I = Self->Count++;
	if (I < 8) {
		Self->Params[I] = P;
	}
}

int SC_xC2xB5Form__Init_() {
	{
		JB_SetRef(SC__xC2xB5Form_Forms, JB_Dict_Constructor(nil));
		SC__xC2xB5Form_Count = 0;
	}
	;
	return 0;
}

int SC_xC2xB5Form__InitCode_() {
	return 0;
}

xC2xB5Form* SC_xC2xB5Form__Needform(JB_String* Form) {
	return ({
		xC2xB5Form* _X = ((xC2xB5Form*)JB_Dict_ValueLower(SC__xC2xB5Form_Forms, Form));
		if ((!_X)) {
			_X = SC_xC2xB5Form_ConstructorWithStr(nil, Form);
			(JB_Dict_ValueLowerSet(SC__xC2xB5Form_Forms, Form, _X));
		}
		 _X;
	});
}


ASMFunc* SC_ASMFunc_Constructor(ASMFunc* Self, SCFunction* Fn, IR* IR) {
	if (Self == nil) {
		Self = ((ASMFunc*)JB_NewClass(&ASMFuncData));
	}
	Self->Length = 0;
	Self->OK = false;
	Self->Fn = JB_Incr(Fn);
	Self->IR = IR;
	JB_SetRef(Fn->ASM, Self);
	return Self;
}

void SC_ASMFunc_Destructor(ASMFunc* Self) {
	JB_Clear(Self->Fn);
}

ASMFunc2* SC_ASMFunc_Finish(ASMFunc* Self) {
	return nil;
}

JB_String* SC_ASMFunc_Render(ASMFunc* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	//;
	JB_FS_AppendString(Fs, JB_LUB[1495]);
	JB_FS_AppendString(Fs, Self->Fn->Name);
	JB_FS_AppendByte(Fs, '\n');
	//;
	{
		int _CurrInstf1 = 0;
		IR* _Addrf2 = Self->IR;
		while (_CurrInstf1 < Self->Length) {
			IR* xC2xB5 = _Addrf2 + _CurrInstf1;
			if ((!SC_IR_OperatorIsa(xC2xB5, kSC__ASM_Extended))) {
				JB_FS_AppendByte(Fs, '\t');
				JB_FreeIfDead(SC_IR_Render(xC2xB5, Fs));
				JB_FS_AppendByte(Fs, '\n');
			}
			_CurrInstf1++;
		};
	}
	;
	JB_String* _tmPf4 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}


void SC_Array_AddCStr(Array* Self, JB_String* S) {
	if (JB_Str_Exists(S)) {
		JB_Array_SyntaxAppend(Self, JB_Str_MakeC(S));
	}
}

void SC_Array_AppendWords(Array* Self, JB_String* R) {
	{
		Array* _LoopSrcf2 = JB_Incr(JB_Str_OperatorDivide(R, ' '));
		int _if0 = 0;
		while (true) {
			JB_String* S = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			SC_Array_AddCStr(Self, S);
			JB_Decr(S);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	};
}

void JB_Array_Clear(Array* Self) {
	if (Self != nil) {
		(JB_Array_SizeSet(Self, 0));
	}
}

JB_Object* JB_Array_First(Array* Self) {
	return JB_Array_Value(Self, 0);
}

JB_String* JB_Array_join(Array* Self, JB_String* Sep) {
	int Sl = JB_Str_Length(Sep);
	int N = (-Sl);
	{
		int _if0 = 0;
		while (true) {
			JB_String* S = JB_Incr(((JB_String*)JB_Array_Value(Self, _if0)));
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			N = (N + (JB_Str_Length(S) + Sl));
			JB_Decr(S);
			_if0++;
		};
	}
	;
	FastString* Fs = JB_Incr(JB_FS_ConstructorSize(nil, N));
	{
		int _if2 = 0;
		int _firstf4 = _if2;
		while (true) {
			JB_String* S = JB_Incr(((JB_String*)JB_Array_Value(Self, _if2)));
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			if (_firstf4 != _if2) {
				JB_FS_AppendString(Fs, Sep);
			}
			//start;
			JB_FS_AppendString(Fs, S);
			JB_Decr(S);
			_if2++;
		};
	}
	;
	JB_String* _tmPf5 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

JB_Object* JB_Array_Last(Array* Self) {
	return JB_Array_Value(Self, JB_Array_Size(Self) - 1);
}

void JB_Array_LoadProperties(Array* Self, ObjectLoader* Loader) {
	while (JB_LD_HasItem(Loader)) {
		JB_Array_SyntaxAppend(Self, JB_LD_Object(Loader));
	};
}

void JB_Array_SaveCollect(Array* Self, ObjectSaver* Saver) {
	{
		int _if0 = 0;
		while (true) {
			JB_Object* V = JB_Array_Value(Self, _if0);
			if (V == nil) {
				break;
			}
			JB_Object_SaveTryCollect(V, Saver);
			_if0++;
		};
	};
}

void JB_Array_SaveWrite(Array* Self, ObjectSaver* Saver) {
	FastString* D = Saver->Dest;
	{
		int _if0 = 0;
		int _firstf2 = _if0;
		while (true) {
			JB_Object* V = JB_Array_Value(Self, _if0);
			if (V == nil) {
				break;
			}
			if (_firstf2 != _if0) {
				JB_FS_AppendString(D, JB_LUB[302]);
			}
			//start;
			JB_FS_AppendObjectOrNil(D, V);
			_if0++;
		};
	};
}

void JB_Array_SyntaxAppend(Array* Self, JB_Object* Item) {
	JB_Array_AppendCount(Self, Item, 1);
}

int JB_Array_SyntaxCompare(Array* Self, int N, bool Aware) {
	return JB_Array_Size(Self) - N;
}

bool JB_Array_SyntaxEquals(Array* Self, int N, bool Aware) {
	return JB_Array_Size(Self) == N;
}


JB_Object* JB_Dict_Expect(Dictionary* Self, Message* M) {
	JB_Object* _tmPf0 = JB_Incr(JB_Dict_ValueStr(Self, M->Name));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(M, nil);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_Dict_LoadProperties(Dictionary* Self, ObjectLoader* Loader) {
	while (JB_LD_HasItem(Loader)) {
		JB_String* Name = JB_LD_ItemName(Loader);
		if (JB_LD_ItemIsInt(Loader)) {
			(JB_Dict_ValueSet(Self, Name, JB_Wrap_ConstructorInt(nil, JB_LD_ItemInt(Loader))));
		}
		 else {
			(JB_Dict_ValueSet(Self, Name, JB_LD_ItemObject(Loader)));
		}
	};
}

void JB_Dict_SaveCollect(Dictionary* Self, ObjectSaver* Saver) {
	{
		DictionaryReader* _navf0 = JB_Dict_Navigate(Self);
		while (true) {
			JB_Object* V = JB_DictionaryReader_NextValue(_navf0);
			if (V == nil) {
				break;
			}
			JB_Object_SaveTryCollect(V, Saver);
		};
	};
}

void JB_Dict_SaveWrite(Dictionary* Self, ObjectSaver* Saver) {
	FastString* D = Saver->Dest;
	DictionaryReader* L = JB_Dict_Navigate(Self);
	while (JB_Nav_MoveNext(L)) {
		JB_FS_AppendString(D, JB_Nav_Name(L));
		JB_FS_AppendString(D, JB_LUB[559]);
		JB_FS_AppendObjectOrNil(D, JB_Nav_Value(L));
		JB_FS_AppendByte(D, ',');
	};
}

void JB_Dict_SetValue(Dictionary* Self, JB_String* Key, int64 Value) {
	DTWrap* _tmPf0 = JB_Incr(JB_Wrap_ConstructorInt(nil, Value));
	(JB_Dict_ValueSet(Self, Key, _tmPf0));
	JB_Decr(_tmPf0);
}

JB_Object* JB_Dict_Syntax(Dictionary* Self, JB_String* Key) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_FastLower(Key));
	JB_Object* _tmPf1 = JB_Incr(JB_Dict_ValueStr(Self, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_Object* JB_Dict_ValueStr(Dictionary* Self, JB_String* Key) {
	return JB_Dict_Value(Self, Key, nil);
}

void JB_Dict_SetInt(Dictionary* Self, uint64 Key, JB_Object* Value) {
	(JB_Dict_ValueSet(Self, JB_int64_DictName(((int64)Key)), Value));
}

JB_Object* JB_Dict_ValueInt(Dictionary* Self, uint64 Key) {
	return JB_Dict_ValueStr(Self, JB_int64_DictName(((int64)Key)));
}

JB_Object* JB_Dict_ValueLower(Dictionary* Self, JB_String* S) {
	if (JB_Str_IsLower(S)) {
		return JB_Dict_ValueStr(Self, S);
	}
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(S));
	JB_Object* _tmPf1 = JB_Incr(JB_Dict_ValueStr(Self, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void JB_Dict_ValueLowerSet(Dictionary* Self, JB_String* S, JB_Object* Value) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(S));
	(JB_Dict_ValueSet(Self, _tmPf0, Value));
	JB_Decr(_tmPf0);
}

Dictionary* JB_Dict__Copy(Dictionary* Dict) {
	Dictionary* Rz = JB_Incr(((Dictionary*)nil));
	JB_SetRef(Rz, JB_Dict_Constructor(nil));
	{
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(Dict));
		while (true) {
			JB_String* Value = JB_Incr(((JB_String*)JB_DictionaryReader_NextValue(_navf0)));
			if (Value == nil) {
				JB_Decr(Value);
				break;
			}
			JB_String* Key = JB_Incr(JB_Nav_Name(_navf0));
			(JB_Dict_ValueSet(Rz, Key, Value));
			JB_Decr(Value);
			JB_Decr(Key);
		};
		JB_Decr(_navf0);
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}

Dictionary* JB_Dict__Reverse(Dictionary* Dict) {
	Dictionary* Rz = JB_Incr(((Dictionary*)nil));
	JB_SetRef(Rz, JB_Dict_Constructor(nil));
	{
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(Dict));
		while (true) {
			JB_String* Value = JB_Incr(((JB_String*)JB_DictionaryReader_NextValue(_navf0)));
			if (Value == nil) {
				JB_Decr(Value);
				break;
			}
			JB_String* Key = JB_Incr(JB_Nav_Name(_navf0));
			(JB_Dict_ValueSet(Rz, Value, Key));
			JB_Decr(Value);
			JB_Decr(Key);
		};
		JB_Decr(_navf0);
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}


void SC_FastStringCpp_AppendBehaviour(FastStringCpp* Self, JB_String* Name, SCFunction* Fn, SCClass* Type) {
	JB_FS_AppendString(Self, JB_LUB[36]);
	if (JB_Str_Exists(Name)) {
		JB_FS_AppendString(Self, Name);
	}
	 else {
		JB_FS_AppendString(Self, JB_LUB[1447]);
	}
	JB_FS_AppendString(Self, JB_LUB[155]);
	if ((!Fn)) {
		JB_FS_AppendString(Self, JB_LUB[1810]);
	}
	 else {
		JB_FS_AppendByte(Self, '(');
		if (Type) {
			JB_String* _tmPf0 = SC_Class_CStructName(Type);
			if ((!JB_Str_Exists(_tmPf0))) {
				JB_Object_SyntaxExpect(nil);
				return;
			}
			JB_FS_AppendString(Self, (_tmPf0));
		}
		 else {
			JB_FS_AppendString(Self, JB_LUB[2041]);
		}
		JB_FS_AppendByte(Self, ')');
		JB_FS_AppendString(Self, Fn->ExportName);
	}
	JB_FS_AppendString(Self, JB_LUB[567]);
}

FastStringCpp* SC_FastStringCpp_Constructor(FastStringCpp* Self, JB_String* Name) {
	if (Self == nil) {
		Self = ((FastStringCpp*)JB_NewClass(&FastStringCppData));
	}
	JB_FS_Constructor(Self);
	Self->Cpp_Name = JB_Incr(Name);
	return Self;
}

void SC_FastStringCpp_Destructor(FastStringCpp* Self) {
	JB_Clear(Self->Cpp_Name);
	JB_FS_Destructor(Self);
}


JB_File* JB_File_Child(JB_File* Self, JB_String* Name) {
	JB_String* Name2 = JB_Incr(JB_Str_TrimStart(Name, JB_LUB[387], true));
	if (JB_Str_Exists(Name2)) {
		JB_String* _tmPf1 = JB_Incr(JB_Str_PathDir(Self));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(_tmPf1, Name));
		JB_Decr(_tmPf1);
		JB_File* _tmPf3 = JB_Incr(JB_File_Constructor(nil, _tmPf0));
		JB_Decr(_tmPf0);
		JB_Decr(Name2);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	JB_Decr(Name2);
	if (true) {
		JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1077], Self));
		JB_File_Fail(Self, _tmPf2);
		JB_Decr(_tmPf2);
	}
	return nil;
}

ErrorInt2 SC_File_CodeSign(JB_File* Self, JB_String* Sign) {
	ErrorInt2 Rz = ((ErrorInt2){});
	if ((!JB_Platform__OSX())) {
		return ((ErrorInt2)ivec2{-1, -1});
	}
	//using;
	ErrorSeverity _usingf0 = JB_ErrorSeverity_SyntaxUsing(kJB__ErrorSeverity_Warning);
	Array* Args = JB_Incr((JB_Array_Constructor0(nil)));
	JB_Array_SyntaxAppend(Args, JB_LUB[312]);
	JB_Array_SyntaxAppend(Args, JB_LUB[314]);
	if (SC__Options_PrintCompileString) {
		JB_Array_SyntaxAppend(Args, JB_LUB[321]);
	}
	JB_Array_SyntaxAppend(Args, JB_LUB[350]);
	JB_StringC* _tmPf1 = JB_Incr(JB_Str_MakeC(Sign));
	JB_Array_SyntaxAppend(Args, _tmPf1);
	JB_Decr(_tmPf1);
	JB_StringC* _tmPf2 = JB_Incr(JB_Str_MakeC(Self));
	JB_Array_SyntaxAppend(Args, _tmPf2);
	JB_Decr(_tmPf2);
	Rz = SC_Str_DebugExecute(JB_LUB[424], Args, nil, nil);
	JB_SetRef(Args, (JB_Array_Constructor0(nil)));
	JB_Array_SyntaxAppend(Args, JB_LUB[322]);
	if (SC__Options_PrintCompileString) {
		JB_Array_SyntaxAppend(Args, JB_LUB[321]);
	}
	JB_Array_SyntaxAppend(Args, Self);
	if (JB_Err2_SyntaxCast(Rz)) {
		Rz = SC_Str_DebugExecute(JB_LUB[424], Args, nil, nil);
	}
	if (JB_Err2_SyntaxCast(Rz)) {
		(JB_Array_ValueSet(Args, 0, JB_LUB[334]));
		Rz = SC_Str_DebugExecute(JB_LUB[437], Args, nil, nil);
	}
	JB_Decr(Args);
	JB_ErrorSeverity_SyntaxUsingComplete(_usingf0);
	return Rz;
}

bool JB_File_CompareData(JB_File* Self, JB_String* A, JB_String* Error) {
	//;
	int Code = 0;
	JB_String* _tmPf0 = JB_Incr(JB_File_ReadAll(Self, 134217728, true));
	if (JB_File_Size(Self) != JB_Str_Length(A)) {
		Code = 1;
	}
	 else if ((!JB_Str_Equals(_tmPf0, A, false))) {
		Code = 2;
	}
	JB_Decr(_tmPf0);
	return JB_File_CompareMsg(Self, Code, Error);
}

bool JB_File_FileCompare(JB_File* Self, JB_File* A, JB_String* Error) {
	bool Rz = false;
	JB__Flow_Disabled++;
	ErrorInt Code = JB_File_FileCompareSub(Self, A);
	JB_File_Close(Self);
	JB_File_Close(A);
	Rz = JB_File_CompareMsg(Self, Code, Error);
	JB__Flow_Disabled--;
	return Rz;
}

bool JB_File_CompareMsg(JB_File* Self, ErrorInt Code, JB_String* Error) {
	//;
	if ((Code == 0) or (!JB_Str_Exists(Error))) {
		return Code == 0;
	}
	JB_String* Msg = JB_Incr(Self);
	if (Code == 1) {
		JB_SetRef(Msg, JB_Str_OperatorPlus(Msg, JB_LUB[179]));
	}
	 else {
		JB_SetRef(Msg, JB_Str_OperatorPlus(Msg, JB_LUB[178]));
	}
	JB_SetRef(Msg, JB_Str_OperatorPlus(Msg, Error));
	if (true) {
		JB_Str_SyntaxExpect(Msg);
	}
	JB_Decr(Msg);
	return false;
}

ErrorInt JB_File_FileCompareSub(JB_File* Self, JB_File* A) {
	ErrorInt Rz = 0;
	//;
	if (JB_File_Size(Self) != JB_File_Size(A)) {
		return 1;
	}
	JB_File_Close(A);
	JB_File_Close(Self);
	JB_File_Open(Self, kJB__File_O_RDONLY, false);
	JB_File_Open(A, kJB__File_O_RDONLY, false);
	while (true) {
		JB_String* S_ = JB_Incr(JB_File_Read(Self, 65536, true));
		JB_String* SA = JB_Incr(JB_File_Read(A, 65536, true));
		if ((!JB_Str_Equals(S_, SA, false))) {
			Rz = 2;
			JB_Decr(SA);
			JB_Decr(S_);
			break;
		}
		JB_Decr(SA);
		if ((!JB_Str_Exists(S_))) {
			JB_Decr(S_);
			break;
		}
		JB_Decr(S_);
	};
	return Rz;
}

Message* JB_File_Conf(JB_File* Self, int Lim) {
	Message* Rz = ((Message*)nil);
	if (JB_File_Exists(Self, false)) {
		Rz = ((Message*)JB_File_Parse(Self, Lim, false));
	}
	if ((!(Rz))) {
		Rz = JB_Msg_ConstructorEmpty(nil);
	}
	JB_SetRef(Rz->Obj, Self);
	return Rz;
}

ErrorInt JB_File_CopyAll(JB_File* Self, JB_String* Dest, bool AttrOnly) {
	ErrorInt Rz = 0;
	if ((!JB_File_IsDir(Self))) {
		JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(Dest));
		ErrorInt _tmPf4 = JB_File_Copy(Self, _tmPf1, AttrOnly);
		JB_Decr(_tmPf1);
		return _tmPf4;
	}
	{
		JB_File_ListStart(Self);
		while (JB_File_MoveNext(Self)) {
			JB_String* F = JB_Incr(JB_File_CurrChild(Self));
			JB_File* _tmPf2 = JB_Incr(JB_File_Child(Self, F));
			JB_String* _tmPf3 = JB_Incr(JB_Str_SyntaxAccess(Dest, F));
			JB_Decr(F);
			Rz = JB_File_CopyAll(_tmPf2, _tmPf3, false);
			JB_Decr(_tmPf2);
			JB_Decr(_tmPf3);
			if ((!JB_ErrorInt_SyntaxCast(Rz))) {
				break;
			}
		};
		JB_File_ListEnd(Self);
	}
	;
	return Rz;
}

ErrorInt JB_File_DeleteAll(JB_File* Self) {
	ErrorInt Rz = 0;
	if ((JB_Str_Equals(Self, JB_LUB[387], false)) or (JB_Str_Equals(Self, JB_LUB[0], false))) {
		return -1;
	}
	if (JB_File_IsDir(Self)) {
		{
			JB_File_ListStart(Self);
			while (JB_File_MoveNext(Self)) {
				JB_String* _tmPf2 = JB_Incr(JB_File_CurrChild(Self));
				JB_File* _tmPf1 = JB_Incr(JB_File_Child(Self, _tmPf2));
				JB_Decr(_tmPf2);
				JB_File* C = JB_Incr(_tmPf1);
				JB_Decr(_tmPf1);
				ErrorInt Tmp = JB_File_DeleteAll(C);
				JB_Decr(C);
				if (Rz == 0) {
					Rz = Tmp;
				}
			};
			JB_File_ListEnd(Self);
		};
	}
	if (Rz == 0) {
		Rz = JB_File_Delete(Self);
	}
	return Rz;
}

bool JB_File_DirectoryContains(JB_File* Self, JB_String* Path) {
	JB_String* _tmPf0 = JB_Incr(JB_File_PathFix_(Path));
	JB_String* _tmPf1 = JB_Incr(JB_Str_PathDir(Self));
	bool _tmPf2 = JB_Str_OperatorStarts(_tmPf0, _tmPf1);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	return _tmPf2;
}

ErrorInt JB_File_LinkToSet(JB_File* Self, JB_String* Value) {
	JB_StringC* _tmPf0 = JB_Incr(JB_Str_MakeC(Value));
	ErrorInt _tmPf1 = JB_Str_SymLink(_tmPf0, Self);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

Array* JB_File_List(JB_File* Self, bool Invis) {
	Array* Rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	//;
	{
		JB_File_ListStart(Self);
		while (JB_File_MoveNext(Self)) {
			JB_String* Name = JB_Incr(JB_File_CurrChild(Self));
			if ((Invis) or (JB_Str_First(Name) != '.')) {
				JB_Array_SyntaxAppend(Rz, Name);
			}
			JB_Decr(Name);
		};
		JB_File_ListEnd(Self);
	}
	;
	JB_Array_Sort(Rz, (&JB_Str__Sorter), false);
	if ((!JB__Flow_Disabled)) {
		JB_Flow__InputStrings(Rz, Self);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

bool JB_File_MustExist(JB_File* Self, JB_String* Operation) {
	if (JB_File_Exists(Self, false)) {
		return true;
	}
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(Fs, JB_LUB[872]);
	if (JB_Str_First(Self) != '/') {
		JB_FS_AppendString(Fs, JB_LUB[164]);
		JB_String* _tmPf0 = JB_Incr(JB_File__CWD());
		JB_FS_AppendString(Fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	if (JB_Str_Exists(Operation)) {
		JB_FS_AppendString(Fs, JB_LUB[305]);
		JB_FS_AppendString(Fs, Operation);
	}
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_AppendString(Fs, Self);
	if (true) {
		JB_String* _tmPf1 = JB_Incr(JB_FS_SyntaxCast(Fs));
		JB_File_Fail(Self, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(Fs);
	return false;
}

bool JB_File_Opened(JB_File* Self) {
	return Self->Descriptor >= 0;
}

bool JB_File_OperatorInside(JB_File* Self, JB_File* F) {
	JB_String* Fp = JB_Incr(JB_Str_PathDir(F));
	JB_String* _tmPf0 = JB_Incr(JB_Str_Range(Self, 0, JB_Str_Length(Fp)));
	bool _tmPf1 = (JB_Str_Equals(_tmPf0, Fp, false));
	JB_Decr(Fp);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool JB_File_NewerThanFile(JB_File* Self, JB_File* F) {
	return JB_File_OperatorIsNewerThan(Self, JB_File_Modified(F));
}

bool JB_File_OperatorIsNewerThan(JB_File* Self, Date F) {
	return (JB_File_Modified(Self) > F);
}

JB_File* JB_File_Parent(JB_File* Self) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Parent(Self));
	JB_File* _tmPf1 = JB_Incr(JB_File_Constructor(nil, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_File_Parse(JB_File* Self, int Lim, bool AllowMissing) {
	Message* Rz = JB_Incr(((Message*)nil));
	JB_String* _tmPf0 = JB_Incr(JB_Str_ResolvePath(Self, AllowMissing));
	JB_File* F = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_String* S = JB_Incr(JB_File_ReadAll(F, Lim, AllowMissing));
	if (JB_Str_IsCompressed(S)) {
		JB_SetRef(S, JB_Str_Decompress(S, Lim, nil));
	}
	if (JB_Safe_SyntaxCast(S)) {
		JB_MemoryLayer* L = JB_ClassData_CreateUseLayer((&MessageData), F, S);
		JB_SetRef(Rz, JB_Str_Parse(S, JB_SyxArg, false));
		JB_ClassData_Restore((&MessageData));
	}
	JB_Decr(F);
	JB_Decr(S);
	JB_SafeDecr(Rz);
	return Rz;
}

JB_File* JB_File_Sibling(JB_File* Self, JB_String* Name) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Sibling(Self, Name));
	JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool JB_File_SmartDataSet(JB_File* Self, JB_String* Nieu) {
	if ((JB_File_Size(Self) != JB_Str_Length(Nieu)) or ((!({
		JB_String* _tmPf1 = JB_Incr(JB_File_ReadAll(Self, 134217728, true));
		bool _tmPf0 = JB_Str_Equals(_tmPf1, Nieu, false);
		JB_Decr(_tmPf1);
		 _tmPf0;
	})))) {
		return JB_File_DataSet(Self, Nieu);
	}
	return false;
}

JB_File* JB_File_SyntaxAccess(JB_File* Self, JB_String* Name) {
	return JB_File_Child(Self, Name);
}

void JB_File_SyntaxAppend(JB_File* Self, JB_String* Data) {
	JB_File_Write(Self, Data);
}

void JB_File_Fail(JB_File* Self, JB_String* Error) {
	JB_Rec__NewErrorWithNode(nil, Error, ((JB_String*)JB_Ternary(JB_File_SyntaxCast(Self), ((JB_String*)JB_File_Path(Self)), ((JB_String*)JB_LUB[0]))));
}

bool SC_File_TestBatch(JB_File* Self) {
	JB_File* _tmPf3 = JB_Incr(JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, JB_LUB[662]));
	JB_File* Batch = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	bool Printed = false;
	JB_Str_Print(JB_LUB[1275]);
	{
		JB_File_ListStart(Batch);
		while (JB_File_MoveNext(Batch)) {
			JB_String* _tmPf5 = JB_Incr(JB_File_CurrChild(Batch));
			JB_File* _tmPf4 = JB_Incr(JB_File_Child(Batch, _tmPf5));
			JB_Decr(_tmPf5);
			JB_File* C = JB_Incr(_tmPf4);
			JB_Decr(_tmPf4);
			if (JB_Str_Visible(C) and JB_Str_OperatorIsa(C, JB_LUB[1953])) {
				if (Printed) {
					JB_Str_Print(JB_LUB[302]);
				}
				Printed = true;
				JB_String* _tmPf6 = JB_Incr(JB_Str_Name(C));
				JB_Str_Print(_tmPf6);
				JB_Decr(_tmPf6);
				Array* _tmPf1 = JB_Incr((JB_Array_Constructor0(nil)));
				JB_Array_SyntaxAppend(_tmPf1, C);
				JB_Array_SyntaxAppend(_tmPf1, JB_LUB[316]);
				JB_Array_SyntaxAppend(_tmPf1, JB_LUB[318]);
				JB_Str_SilentExecute(Self, _tmPf1, nil, nil);
				JB_Decr(_tmPf1);
			}
			JB_Decr(C);
		};
		JB_File_ListEnd(Batch);
	}
	;
	JB_PrintLine(JB_LUB[0]);
	{
		JB_File_ListStart(Batch);
		while (JB_File_MoveNext(Batch)) {
			JB_String* _tmPf8 = JB_Incr(JB_File_CurrChild(Batch));
			JB_File* _tmPf7 = JB_Incr(JB_File_Child(Batch, _tmPf8));
			JB_Decr(_tmPf8);
			JB_File* C = JB_Incr(_tmPf7);
			JB_Decr(_tmPf7);
			if (JB_Str_OperatorIsa(C, JB_LUB[1568]) or JB_Str_OperatorIsa(C, JB_LUB[1687])) {
				JB_Str_Print(JB_LUB[1285]);
				JB_PrintLine(C);
				debugger;
			}
			JB_Decr(C);
		};
		JB_File_ListEnd(Batch);
	}
	;
	JB_Decr(Batch);
	return JB_Rec_OK(JB_StdErr);
}

bool SC_File_TestSpeedie(JB_File* Self, JB_String* V) {
	if ((!JB_File_MustExist(Self, JB_LUB[0]))) {
		return nil;
	}
	JB_String* _tmPf0 = JB_Incr(JB_File_Path(Self));
	if (JB_Str_ContainsString(_tmPf0, JB_LUB[99])) {
		JB_String* _tmPf2 = JB_Incr(JB_File_Path(Self));
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1127], _tmPf2));
		JB_Decr(_tmPf2);
		JB_Str_SyntaxExpect(_tmPf1);
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_Decr(_tmPf0);
	JB_String* Variant = JB_Incr(JB_Str_OperatorPlus(JB_LUB[320], V));
	Array* Cmd_args = JB_Incr((JB_Array_Constructor0(nil)));
	JB_Array_SyntaxAppend(Cmd_args, JB_LUB[319]);
	JB_Array_SyntaxAppend(Cmd_args, JB_LUB[315]);
	JB_Array_SyntaxAppend(Cmd_args, Variant);
	if (JB_Str_Equals(Variant, JB_LUB[493], false)) {
		JB_Array_SyntaxAppend(Cmd_args, JB_LUB[313]);
	}
	if (SC__Options_PrintCompileString) {
		JB_Array_SyntaxAppend(Cmd_args, JB_LUB[317]);
	}
	if (JB_Str_Exists(SC__Options_Arch)) {
		JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[311], SC__Options_Arch));
		JB_Array_SyntaxAppend(Cmd_args, _tmPf3);
		JB_Decr(_tmPf3);
	}
	JB_String* P = JB_Incr(JB_File_Path(Self));
	JB_Str_Execute(P, Cmd_args, nil, nil, true);
	JB_Decr(Cmd_args);
	JB_Decr(P);
	JB_String* TestProd = JB_Incr(JB_Str_OperatorPlus(JB_LUB[436], V));
	JB_File* _tmPf4 = JB_Incr(JB_Str_AsFile(TestProd));
	JB_Decr(TestProd);
	JB_File_MustExist(_tmPf4, JB_LUB[773]);
	JB_Decr(_tmPf4);
	JB_String* _tmPf6 = JB_Incr(SC_Ext__TmpOut(Variant));
	JB_String* _tmPf5 = JB_Incr(JB_Str_ReadFile(_tmPf6, 1073741824, true));
	JB_Decr(_tmPf6);
	JB_Str_Print(_tmPf5);
	JB_Decr(_tmPf5);
	JB_String* _tmPf7 = JB_Incr(SC_Ext__TmpErr(Variant));
	JB_Decr(Variant);
	JB_String* Test_err = JB_Incr(JB_Str_ReadFile(_tmPf7, 1073741824, true));
	JB_Decr(_tmPf7);
	if (JB_Str_Length(Test_err)) {
		if (true) {
			JB_Str_SyntaxExpect(Test_err);
		}
	}
	JB_Decr(Test_err);
	return JB_Rec_OK(JB_StdErr);
}

ErrorInt2 JB_File_Touch(JB_File* Self) {
	Array* _tmPf0 = JB_Incr((JB_Array_Constructor0(nil)));
	JB_Array_SyntaxAppend(_tmPf0, Self);
	ErrorInt2 _tmPf1 = JB_Str_SilentExecute(JB_LUB[430], _tmPf0, nil, nil);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

JB_String* JB_File__AppPrefs(JB_String* Name) {
	JB_Incr(Name);
	if ((!JB_Str_Exists(Name))) {
		JB_String* _tmPf0 = JB_Incr(JB_App__FileName());
		JB_SetRef(Name, JB_Str_LowerCase(_tmPf0));
		JB_Decr(_tmPf0);
		if ((!(JB_Str_Exists(Name)))) {
			JB_SetRef(Name, JB_App__Conf(JB_LUB[1805]));
		}
		JB_SetRef(Name, JB_Str_OperatorPlus(Name, JB_LUB[377]));
	}
	JB_String* _tmPf1 = JB_Incr(JB_File__PreferencesPath());
	JB_String* _tmPf2 = JB_Incr(JB_Str_Child(_tmPf1, Name));
	JB_Decr(_tmPf1);
	JB_Decr(Name);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

int JB_File__Init_() {
	{
		JB__File_DebugExecute = false;
	}
	;
	return 0;
}

int JB_File__InitCode_() {
	return 0;
}

JB_File* JB_File__Logs() {
	return JB_Str_AsFile(JB_LUB[423]);
}

JB_String* JB_File__PreferencesPath() {
	if (JB_Platform__OSX()) {
		return JB_LUB[2089];
	}
	if (JB_Platform__Win()) {
		return JB_LUB[2083];
	}
	if (JB_Platform__Lin()) {
		return JB_LUB[2086];
	}
	return JB_LUB[0];
}

JB_File* JB_File__PrefsFolder() {
	return JB_Str_AsFile(JB_LUB[2089]);
}


jbinLeaver JB_bin_Add(FastString* Self, Syntax Type, JB_String* Name, bool Into) {
	return JB_bin_AddMemory(Self, Type, JB_Str_Length(Name), Into, Name->Addr);
}

void SC_bin_Add(FastString* Self, ASMFunc* Fn) {
	JB_bin_AddMemory(Self, JB_SyxBin, Fn->Length * 4, false, nil);
	{
		int _CurrInstf0 = 0;
		IR* _Addrf1 = Fn->IR;
		while (_CurrInstf0 < Fn->Length) {
			IR* I = _Addrf1 + _CurrInstf0;
			JB_FS_AppendInteger(Self, SC_IR_Encode(I));
			_CurrInstf0++;
		};
	};
}

void JB_bin_AddInt(FastString* Self, int64 Name) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(Name, nil));
	JB_bin_Add(Self, JB_SyxNum, _tmPf0, false);
	JB_Decr(_tmPf0);
}

jbinLeaver JB_bin_AddMemory(FastString* Self, Syntax Type, uint64 L, bool GoIn, byte* Data) {
	uint T = (((uint)Type) << 1) | (GoIn);
	JB_FS_AppendByte(Self, ((byte)T));
	JB_FS_hInt(Self, L);
	if (Data) {
		JB_FS_AppendMem_(Self, Data, ((int)L));
	}
	return ((int)GoIn);
}

void JB_bin_CloseSection(FastString* Self, uint C) {
	int CurrLen = Self->Length;
	if (CurrLen < C) {
		JB_Object_Fail(Self, JB_LUB[1335]);
		return;
	}
	Self->Length = (C - 6);
	int Blen = 5;
	C = (CurrLen - C);
	uint Actual = C;
	while (true) {
		Actual = (Actual >> 7);
		Blen--;
		if ((!Actual)) {
			break;
		}
	};
	JB_FS_AppendMultiByte(Self, ((byte)0), Blen);
	JB_FS_AppendByte(Self, ((byte)(((int)JB_SyxBin) << 1)));
	JB_FS_hInt(Self, C);
	Self->Length = CurrLen;
	Self->NoFlush--;
}

FastString* JB_bin_Constructor(FastString* Self, Syntax Type, JB_String* Name) {
	if (Self == nil) {
		Self = ((FastString*)JB_NewClass(&FastStringData));
	}
	JB_FS_Constructor(Self);
	JB_FS_AppendString(Self, JB__JbinHeader);
	JB_bin_Enter(Self, Type, Name);
	return Self;
}

FastString* JB_bin_Constructor0(FastString* Self, int N) {
	if (Self == nil) {
		Self = ((FastString*)JB_NewClass(&FastStringData));
	}
	JB_FS_Constructor(Self);
	if (N) {
		debugger;
	}
	return Self;
}

jbinLeaver JB_bin_Enter(FastString* Self, Syntax Type, JB_String* Name) {
	return JB_bin_Add(Self, Type, Name, true);
}

void JB_bin_Exit(FastString* Self, int Amount) {
	int Add = 239;
	while (Amount > 0) {
		int B = JB_int_OperatorMin((Add + Amount), (255));
		JB_FS_AppendByte(Self, ((byte)B));
		Amount = (Amount - (B - Add));
	};
}

int JB_bin_OpenSection(FastString* Self) {
	Self->NoFlush++;
	Self->Length = (Self->Length + 6);
	return Self->Length;
}

void JB_bin_Sheb(FastString* Self, JB_String* Name) {
	JB_FS_AppendByte(Self, '#');
	JB_FS_AppendByte(Self, '!');
	JB_FS_AppendString(Self, Name);
	JB_FS_AppendByte(Self, '\n');
}

void JB_bin_Tmp(FastString* Self, JB_String* Name) {
	JB_bin_Enter(Self, JB_SyxTmp, Name);
	JB_bin_Enter(Self, JB_SyxArg, JB_LUB[0]);
}


MaterialsLol* SC_MaterialsLol_Constructor(MaterialsLol* Self, Selector* Next, Selector** Place, JB_String* Name1) {
	if (Self == nil) {
		Self = ((MaterialsLol*)JB_NewClass(&MaterialsLolData));
	}
	JB_Sel_Constructor(Self, Next, Place, Name1);
	JB_StringC* _tmPf0 = JB_LUB[0];
	Self->oof = JB_Incr(_tmPf0);
	return Self;
}

void SC_MaterialsLol_Destructor(MaterialsLol* Self) {
	JB_Clear(Self->oof);
	JB_Sel_Destructor(Self);
}

void SC_MaterialsLol____LoadSel(MaterialsLol** Place, JB_String* Name) {
	//visible;
	JB_SetRef(SC__MaterialsLol___First, SC_MaterialsLol_Constructor(nil, SC__MaterialsLol___First, ((Selector**)Place), Name));
}

int SC_MaterialsLol__Init_() {
	{
	}
	;
	return 0;
}

int SC_MaterialsLol__InitCode_() {
	{
	}
	;
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_WierdBlock), JB_LUB[1377]);
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_Iron), JB_LUB[939]);
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_Wood), JB_LUB[1381]);
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_Pellets), JB_LUB[1128]);
	JB_Sel_GiveIDs(SC__MaterialsLol___First);
	return 0;
}



JB_String* JB_Sh_Render(ShellStream* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	//;
	JB_FS_AppendString(Fs, JB_LUB[1118]);
	JB_FS_AppendInt32(Fs, Self->PID);
	JB_FS_AppendString(Fs, JB_LUB[303]);
	JB_String* _tmPf1 = JB_Incr(JB_Str_Name(Self->Path));
	JB_FS_AppendString(Fs, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_AppendBool(Fs, JB_Array_SyntaxCast(Self->Params));
	//;
	JB_String* _tmPf2 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}


SCNamed* SC_Named_Constructor(SCNamed* Self) {
	if (Self == nil) {
		Self = ((SCNamed*)JB_NewClass(&SCNamedData));
	}
	SC_SCObject_Constructor(Self);
	JB_StringC* _tmPf1 = JB_LUB[0];
	Self->Name = JB_Incr(_tmPf1);
	JB_StringC* _tmPf0 = JB_LUB[0];
	Self->ExportName = JB_Incr(_tmPf0);
	return Self;
}

void SC_Named_Destructor(SCNamed* Self) {
	JB_Clear(Self->Name);
	JB_Clear(Self->ExportName);
	SC_SCObject_Destructor(Self);
}

JB_String* SC_Named_Render(SCNamed* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	_cstring Cname = ((_cstring)(((uint64)JB_ObjClass(Self)->Name) + 2));
	JB_FS_AppendCString(Fs, Cname);
	JB_FS_AppendString(Fs, JB_LUB[559]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}


SavingTest* SC_SavingTest_Constructor(SavingTest* Self, int N) {
	if (Self == nil) {
		Self = ((SavingTest*)JB_NewClass(&SavingTestData));
	}
	JB_Sav_Constructor(Self);
	JB_String* _tmPf0 = JB_Incr(JB_int_RenderFS(N, nil));
	JB_String* _tmPf1 = JB_Str_OperatorPlus(JB_LUB[1668], _tmPf0);
	JB_Decr(_tmPf0);
	Self->Name = JB_Incr(_tmPf1);
	Self->Value = (1000 + N);
	return Self;
}

void SC_SavingTest_Destructor(SavingTest* Self) {
	JB_Clear(Self->Name);
}

void SC_SavingTest_LoadProperties(SavingTest* Self, ObjectLoader* Loader) {
	JB_SetRef(Self->Name, ((JB_String*)JB_LD_String(Loader)));
	Self->Value = ((int)JB_LD_Int(Loader));
	{
		int I = 0;
		while (I < 1) {
			Self->ABC[I] = ((int)JB_LD_Int(Loader));
			I++;
		};
	};
}

void SC_SavingTest_SaveWrite(SavingTest* Self, ObjectSaver* Saver) {
	JB_Saver_AppendString(Saver, Self->Name);
	JB_Saver_AppendInt(Saver, Self->Value);
	{
		int I = 0;
		while (I < 1) {
			JB_Saver_AppendInt(Saver, Self->ABC[I]);
			I++;
		};
	};
}

bool SC_SavingTest__IsEqual(JB_Object* A, JB_Object* B) {
	if ((!(((bool)A) and ((bool)B)))) {
		return (B == A);
	}
	if (JB_Object_FastIsa(A, &SavingTestData)) {
		if (JB_Object_FastIsa(B, &SavingTestData)) {
			return (((SavingTest*)A)->Value == ((SavingTest*)B)->Value) and ((JB_Str_Equals(((SavingTest*)A)->Name, ((SavingTest*)B)->Name, false)));
		}
	}
	return false;
}




_cstring JB_Str_CString(JB_StringC* Self) {
	return ((_cstring)Self->Addr);
}


void JB_Tree_AppendAfter(JB_List* Self, JB_List* Item, JB_List* After) {
	if (After) {
		(JB_Ring_NextSibSet(After, Item));
	}
	 else {
		(JB_Ring_FirstSet(Self, Item));
	}
}

void JB_Tree_AppendBefore(JB_List* Self, JB_List* Item, JB_List* Before) {
	if (Before) {
		(JB_Ring_PrevSibSet(Before, Item));
	}
	 else {
		(JB_Ring_LastSet(Self, Item));
	}
}

int JB_Tree_BackDist(JB_List* Self, JB_List* B) {
	int C = 0;
	while (B) {
		if (Self == B) {
			return C;
		}
		B = JB_Ring_PrevSib(B);
		C--;
	};
	return 0;
}

void JB_Tree_Clear(JB_List* Self) {
	while (true) {
		JB_List* _tmPf0 = JB_Ring_First(Self);
		if ((!_tmPf0)) {
			return;
		}
		JB_Tree_Remove(_tmPf0);
	};
}

int JB_Tree_Dist(JB_List* Self, JB_List* R) {
	if ((!(((bool)Self) and ((bool)R)))) {
		return 0;
	}
	if (JB_Ring_Parent(R) != JB_Ring_Parent(Self)) {
		debugger;
		return 0;
	}
	if (R != Self) {
		int _tmP0 = JB_Tree_FwdDist(Self, R);
		if ((!_tmP0)) {
			_tmP0 = JB_Tree_BackDist(Self, R);
		}
		return _tmP0;
	}
	return 0;
}

JB_List* JB_Tree_FlatLast(JB_List* Self) {
	JB_List* Rz = nil;
	Rz = Self;
	while (true) {
		JB_List* _tmPf0 = JB_Ring_Last(Rz);
		if ((!_tmPf0)) {
			break;
		}
		Rz = _tmPf0;
	};
	return Rz;
}

int JB_Tree_FwdDist(JB_List* Self, JB_List* F) {
	int C = 0;
	while (F) {
		if (Self == F) {
			return C;
		}
		F = JB_Ring_NextSib(F);
		C++;
	};
	return 0;
}

bool JB_Tree_HasOneChild(JB_List* Self) {
	return JB_Ring_HasChildCount(Self, 1);
}

bool JB_Tree_IsFirst(JB_List* Self) {
	return JB_Ring_PrevSib(Self) == nil;
}

bool JB_Tree_IsLast(JB_List* Self) {
	return JB_Ring_NextSib(Self) == nil;
}

bool JB_Tree_IsOnlyChild(JB_List* Self) {
	return JB_Tree_IsLast(Self) and JB_Tree_IsFirst(Self);
}

__lib__ void jdb2(JB_List* Self) {
	//visible;
	if (Self) {
		JB_String* _tmPf0 = JB_Incr(JB_Msg_JDB_(((Message*)Self), nil, 1));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_PrintLine(JB_LUB[275]);
	}
}

__lib__ void jdb3(JB_List* Self) {
	//visible;
	if (Self) {
		JB_String* _tmPf0 = JB_Incr(JB_Msg_JDB_(((Message*)Self), nil, 3));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_PrintLine(JB_LUB[275]);
	}
}

bool JB_Tree_OperatorLessOrEqual(JB_List* Self, int N) {
	JB_List* C = JB_Ring_First(Self);
	while (C) {
		if (N <= 0) {
			return nil;
		}
		N--;
		C = JB_Ring_NextSib(C);
	};
	return true;
}

JB_List* JB_Tree_Pop(JB_List* Self) {
	JB_List* Rz = nil;
	JB_SetRef(Rz, JB_Ring_Last(Self));
	if (Rz) {
		JB_Tree_Remove(Rz);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

void JB_Tree_Remove(JB_List* Self) {
	(JB_Ring_ParentSet(Self, nil));
}

void JB_Tree_RemoveAfter(JB_List* Self) {
	while ((true)) {
		JB_List* X = JB_Ring_NextSib(Self);
		if ((!X)) {
			break;
		}
		JB_Tree_Remove(X);
	};
}

JB_String* JB_List_Render(JB_List* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	//visible;
	JB_FS_AppendByte(Fs, '(');
	{
		JB_List* F = JB_Incr(JB_Ring_First(Self));
		while (F) {
			JB_List* _Nf1 = JB_Incr((JB_Ring_NextSib(F)));
			JB_FreeIfDead(JB_Object___Render__(F, Fs));
			JB_FS_AppendByte(Fs, ',');
			JB_FS_AppendByte(Fs, ' ');
			JB_SetRef(F, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(F);
		;
	}
	;
	JB_FS_AppendByte(Fs, ')');
	JB_String* _tmPf2 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_List* JB_Tree_Second(JB_List* Self) {
	JB_List* X = JB_Ring_First(Self);
	if (X) {
		return JB_Ring_NextSib(X);
	}
	return nil;
}

JB_List* JB_Tree_Get(JB_List* Self, int N) {
	JB_List* Rz = nil;
	if (Self) {
		if (N >= 0) {
			Rz = JB_Ring_First(Self);
			while (((bool)Rz) and ((--N) >= 0)) {
				Rz = JB_Ring_NextSib(Rz);
			};
		}
		 else {
			Rz = JB_Ring_Last(Self);
			while (((bool)Rz) and ((++N) < 0)) {
				Rz = JB_Ring_PrevSib(Rz);
			};
		}
	}
	return Rz;
}

void JB_Tree_SyntaxAppend(JB_List* Self, JB_List* Last) {
	(JB_Ring_LastSet(Self, Last));
}

bool JB_Tree_SyntaxEquals(JB_List* Self, int N, bool Aware) {
	return JB_Ring_HasChildCount(Self, N);
}

void JB_Tree_TakeAllFrom(JB_List* Self, JB_List* Src) {
	while (JB_Ring_HasChildren(Src)) {
		(JB_Ring_FirstSet(Self, JB_Ring_Last(Src)));
	};
}

JB_List* JB_Tree_Upward(JB_List* Self, int N) {
	while (((bool)Self) and (N-- >= 1)) {
		Self = JB_Ring_Parent(Self);
	};
	return Self;
}

JB_List* JB_Tree_WrapWith(JB_List* Self, JB_List* W) {
	(JB_Ring_PrevSibSet(Self, W));
	(JB_Ring_FirstSet(W, Self));
	return W;
}


void SC_ASMFunc2_Destructor(ASMFunc2* Self) {
	JB_Mrap_Destructor(Self);
}

int64 SC_ASMFunc2_RunArgs(ASMFunc2* Self, int64* Args, int ArgCount) {
	if ((!Self)) {
		return 0;
	}
	if (Args) {
		int64* R = JB_ASM_ClearRegisters(JB_ASM_VM(), ArgCount);
		{
			int I = 0;
			while (I < ArgCount) {
				R[I] = Args[I];
				I++;
			};
		};
	}
	return JB_ASM_Run(((ASM*)JB_Mrap_Ptr(Self)), Self->Length);
}

void SC_ASMFunc2_Visible(ASMFunc2* Self) {
	//visible;
}




void JB_Msg_Acc__(Message* Self, FastString* Fs) {
	Message* F = JB_Incr(((Message*)JB_Ring_First(Self)));
	if (F) {
		JB_FS_SyntaxAppend(Fs, F);
		JB_SetRef(F, ((Message*)JB_Ring_NextSib(F)));
		if (F) {
			JB_Msg_RenderPrm(F, Fs, '[', ']');
		}
	}
	JB_Decr(F);
}

Message* JB_Msg_AccessAdd(Message* Self, JB_String* Key) {
	Message* L = Self;
	if (JB_Msg_EqualsSyx(Self, JB_SyxTmp, false)) {
		L = ((Message*)JB_Ring_Last(Self));
		if ((!JB_Msg_EqualsSyx(L, JB_SyxArg, false))) {
			L = JB_Msg_Msg(Self, JB_SyxArg, JB_LUB[0]);
		}
	}
	{
		Message* Tmp = ((Message*)JB_Ring_First(L));
		while (Tmp) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Tmp)));
			if (JB_Msg_SyntaxEquals(Tmp, Key, true)) {
				{
					Message* _t = ((Message*)JB_Ring_Last(Tmp));
					if (_t) {
						JB_Tree_Remove(_t);
					}
				}
				;
				return Tmp;
			}
			Tmp = _Nf1;
		};
		;
	}
	;
	return JB_Msg_Msg(L, JB_SyxTmp, Key);
}

void JB_Msg_CantFind(Message* Self, Syntax S, JB_String* Name, Message* Found) {
	JB_Incr(Found);
	if ((!Self)) {
		JB_API__NilHandler();
		JB_Decr(Found);
		return;
	}
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	if (Found) {
		JB_FS_AppendString(Fs, JB_LUB[845]);
		JB_FS_MsgErrorName(Fs, Name);
		JB_String* _tmPf0 = JB_Incr(JB_Syx_LongName(S));
		JB_FS_AppendString(Fs, _tmPf0);
		JB_Decr(_tmPf0);
		JB_FS_AppendString(Fs, JB_LUB[167]);
		JB_String* _tmPf1 = JB_Incr(JB_Syx_LongName(Found->Func));
		JB_FS_AppendString(Fs, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else {
		if (S) {
			JB_FS_AppendString(Fs, JB_LUB[1011]);
			JB_String* _tmPf2 = JB_Incr(JB_Syx_LongName(S));
			JB_FS_AppendString(Fs, _tmPf2);
			JB_Decr(_tmPf2);
		}
		 else {
			JB_FS_AppendString(Fs, JB_LUB[1020]);
		}
		JB_FS_MsgErrorName(Fs, Name);
		JB_SetRef(Found, Self);
	}
	JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(Fs));
	JB_Decr(Fs);
	JB_Rec__NewErrorWithNode(Found, _tmPf3, nil);
	JB_Decr(_tmPf3);
	JB_Decr(Found);
}

bool SC_Msg_ACInIsa(Message* Self) {
	if ((!(((JB_Msg_EqualsSyx(Self, JB_SyxThg, false))) and JB_Tree_IsLast(Self)))) {
		return nil;
	}
	Message* P = ((Message*)JB_Ring_Parent(Self));
	if ((!P)) {
		return nil;
	}
	if (JB_Msg_EqualsSyx(P, JB_SyxRel, false)) {
		Message* Pr = ((Message*)JB_Ring_PrevSib(Self));
		if ((JB_Msg_SyntaxEquals(Pr, JB_LUB[1728], true)) or ((JB_Msg_SyntaxEquals(Pr, JB_LUB[1492], true)) or (JB_Msg_SyntaxEquals(Pr, JB_LUB[1803], true)))) {
			return true;
		}
	}
	SCFunction* Pfn = SC_Msg_AsFunc(P);
	if (Pfn) {
		if (JB_Str_Equals(Pfn->Name, JB_LUB[1728], true)) {
			return true;
		}
	}
	return false;
}

void SC_Msg_AddBefore(Message* Self, Message* Before, Message* NewItem) {
	if (Before) {
		(JB_Ring_PrevSibSet(Before, NewItem));
	}
	 else {
		JB_Tree_SyntaxAppend(Self, NewItem);
	}
}

void JB_Msg_Adj__(Message* Self, FastString* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if (F) {
		Message* L = ((Message*)JB_Ring_NextSib(F));
		if (L) {
			JB_FS_SyntaxAppend(Fs, F);
			JB_FS_AppendString(Fs, JB_LUB[209]);
			JB_FS_SyntaxAppend(Fs, L);
		}
	}
}

int JB_Msg_After(Message* Self) {
	return Self->Position + Self->RangeLength;
}

void JB_Msg_AfterSet(Message* Self, int Value) {
	Self->RangeLength = (Value - Self->Position);
}

bool SC_Msg_AllowedMoveToInit(Message* Self) {
	Syntax Type = Self->Func;
	if ((Type == JB_SyxDot) or ((Type == JB_SyxSDot) or ((Type == JB_SyxFunc) or ((Type == JB_SyxRel) or (Type == JB_SyxDecl))))) {
		return true;
	}
	if (SC_Msg_OperatorIsTmp(Self, JB_LUB[1842])) {
		return true;
	}
	return false;
}

Message* JB_Msg_Ancestor(Message* Self, Syntax F) {
	if (Self) {
		{
			Message* _LoopSrcf1 = ((Message*)JB_Ring_Parent(Self));
			Message* Ch = _LoopSrcf1;
			while (Ch) {
				if (JB_Msg_EqualsSyx(Ch, F, false)) {
					return Ch;
				}
				Ch = ((Message*)JB_Ring_Parent(Ch));
			};
			;
		};
	}
	return nil;
}

uint SC_Msg_AndOrExpansionTest(Message* Self) {
	Message* Ln = ((Message*)JB_Ring_First(Self));
	if (JB_Msg_EqualsSyx(Self, JB_SyxBra, false)) {
		return SC_Msg_AndOrExpansionTest(Ln);
	}
	if ((!JB_Msg_EqualsSyx(Self, JB_SyxRel, false))) {
		return 0;
	}
	Message* Op = ((Message*)JB_Ring_NextSib(Ln));
	if (JB_Msg_SyntaxEquals(Op, JB_LUB[586], false)) {
		return 0;
	}
	Message* Rn = ((Message*)JB_Ring_NextSib(Op));
	if ((!Rn)) {
		return 0;
	}
	uint Ls = SC_Msg_AndOrExpansionTest(Ln);
	uint Rs = SC_Msg_AndOrExpansionTest(Rn);
	uint Bs = Ls | Rs;
	int Orand = 1;
	if ((JB_Msg_SyntaxEquals(Op, JB_LUB[1855], false)) or (JB_Msg_SyntaxEquals(Op, JB_LUB[1481], false))) {
		return Orand | Bs;
	}
	if (((Ls == 2) or (Ls == 0)) and (Rs == Orand)) {
		SC_Msg_BunchlessFix(Self);
		return -1;
	}
	return 2 + Bs;
}

JB_String* SC_Msg_APICppProject(Message* Self) {
	SCFile* F = SC_Msg_SCFile(Self);
	if (JB_File_SyntaxCast(F)) {
		JB_String* It = F->ExportName;
		if (JB_Str_Exists(It)) {
			return JB_Str_LowerCase(It);
		}
		SCImport* A = F->Proj;
		SCModule* B = A->Mod;
		JB_String* C = B->ExportName;
		if (JB_Str_Exists(C)) {
			return JB_Str_LowerCase(C);
		}
	}
	return JB_LUB[1483];
}

void SC_Msg_AppendAllInto(Message* Self, Message* Dest) {
	while (JB_Ring_HasChildren(Self)) {
		(JB_Ring_LastSet(Dest, ((Message*)JB_Ring_First(Self))));
	};
}

void JB_Msg_AppendMacro(Message* Self, Macro* M, Array* Prms) {
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
	{
		int _if1 = 0;
		while (true) {
			Message* R = ((Message*)JB_Array_Value(Prms, _if1));
			if (R == nil) {
				break;
			}
			(JB_Msg_SyntaxIsSet(R, kJB__MsgParseFlags_MacroMade, (!true)));
			_if1++;
		};
	}
	;
	JB_Msg_MacroCopy(JB_Macro_Source(M), Self, Prms, Self);
	{
		int _if3 = 0;
		while (true) {
			Message* R = ((Message*)JB_Array_Value(Prms, _if3));
			if (R == nil) {
				break;
			}
			if ((!JB_Msg_SyntaxIs(R, kJB__MsgParseFlags_MacroMade))) {
				JB_Msg_SyntaxExpect(R, JB_LUB[1351]);
			}
			_if3++;
		};
	}
	;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void JB_Msg_ARel__(Message* Self, FastString* Fs) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Self)));
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendString(Fs, Self->Name);
}

Message* JB_Msg_Arg(Message* Self) {
	return JB_Msg_Last(Self, JB_SyxArg);
}

void JB_Msg_Arg__(Message* Self, FastString* Fs) {
	bool Braces = (((bool)((Message*)JB_Ring_Parent(Self))) and (!JB_Msg_SyntaxIs(Self, kJB__MsgParseFlags_Style2))) or ((!JB_Ring_HasChildren(Self)) or (JB_Str_Exists(Self->Name) or (JB_Msg_OperatorIn(Self, JB_SyxArg))));
	if (Braces) {
		JB_FS_AppendByte(Fs, '{');
	}
	JB_Msg_FSListArg(Self, Fs, Braces);
	if (Braces) {
		JB_FS_AppendIndent(Fs);
		JB_FS_AppendByte(Fs, '}');
		JB_FS_AppendByte(Fs, '\n');
	}
	if ((!((Message*)JB_Ring_Parent(Self)))) {
		JB_FS_AppendByte(Fs, '\n');
	}
}

JB_String* JB_Msg_ArgName(Message* Self) {
	if ((!JB_Msg_EqualsSyx(Self, JB_SyxItem, false))) {
		return JB_LUB[0];
	}
	return JB_Str_LowerCase(JB_Msg_FirstName(Self));
}

JB_String* JB_Msg_ArgValue(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxItem, false)) {
		JB_String* _tmP0 = JB_Msg_Name(((Message*)JB_Tree_Second(Self)));
		if ((!JB_Str_Exists(_tmP0))) {
			_tmP0 = JB_LUB[2004];
		}
		return _tmP0;
	}
	return Self->Name;
}

void JB_Msg_Arr__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '[');
	JB_Msg_FSListSep(Self, Fs, JB_LUB[302]);
	JB_FS_AppendByte(Fs, ']');
}

SCArg* SC_Msg_AsArg(Message* Self) {
	JB_Object* Obj = Self->Obj;
	if (JB_Object_FastIsa(Obj, &SCArgData)) {
		return ((SCArg*)Obj);
	}
	return nil;
}

SCDecl* SC_Msg_AsDecl(Message* Self) {
	JB_Object* Obj = Self->Obj;
	if (JB_Object_FastIsa(Obj, &SCDeclData)) {
		return ((SCDecl*)Obj);
	}
	return nil;
}

SCFunction* SC_Msg_AsFunc(Message* Self) {
	JB_Object* Obj = Self->Obj;
	if (JB_Object_FastIsa(Obj, &SCFunctionData)) {
		return ((SCFunction*)Obj);
	}
	return nil;
}

void JB_Msg_Ask__(Message* Self, FastString* Fs) {
	JB_Msg_BinnRender(Self, Fs, JB_LUB[77], JB_LUB[0]);
}

uint64 SC_Msg_ASMConst(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxUnit, false)) {
		if ((!JB_Msg_Expect(Self, JB_SyxNil, JB_LUB[1582]))) {
			return 0;
		}
		return JB_dbl_AsInt(JB_Msg_Float(((Message*)JB_Ring_First(Self))));
	}
	if ((!JB_Msg_Expect(Self, JB_SyxNum, nil))) {
		return 0;
	}
	if (JB_Str_ContainsByte(Self->Name, '.')) {
		return JB_f_AsInt(JB_Msg_Float32(Self));
	}
	return JB_Msg_Int(Self, 0);
}

fn_asm SC_Msg_ASMFunc(Message* Self) {
	fn_asm Rz = nil;
	ASMtmp ASM = SC_Msg_TmpType(Self);
	if ((!(ASM))) {
		ASM = ((int)Self->Func);
	}
	Rz = JB_fn_asm_table[ASM];
	return Rz;
}

void SC_Msg_AssignsFix(Message* Self, SCFunction* F) {
	Message* RP = JB_Incr(SC_Msg_NiceParent(Self));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(RP)));
	Message* RightSide = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(Self)));
	Message* List = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(Self)));
	Message* Upon = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	JB_Tree_SyntaxAppend(List, RightSide);
	JB_Decr(RightSide);
	List->Func = JB_SyxPrm;
	JB_Decr(List);
	Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_Last(RP)));
	Message* L = JB_Incr(_tmPf4);
	JB_Decr(_tmPf4);
	JB_Tree_Remove(L);
	SCClass* C = JB_Incr(F->Cls);
	if (((bool)F->ReturnType) and (((bool)C) and SC_Class_IsDataTypeOrFP(C))) {
		//using;
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
		(JB_Ring_FirstSet(RP, L));
		Message* _tmPf5 = JB_Incr(SC_Msg_FailOrCopy(Upon, RP));
		(JB_Ring_FirstSet(RP, _tmPf5));
		JB_Decr(_tmPf5);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	 else {
		RP->Func = JB_SyxBra;
	}
	JB_Decr(RP);
	JB_Decr(Upon);
	JB_Decr(L);
	JB_Decr(C);
}

int SC_Msg_Autocomplete_State(Message* Self) {
	int Rz = 0;
	JB_String* S = JB_Incr(Self->Name);
	Rz = (Rz + ((JB_Str_ContainsByte(S, 'R')) << ((bool)0)));
	Rz = (Rz + ((JB_Str_ContainsByte(S, 'M')) << ((bool)1)));
	Rz = (Rz + ((JB_Str_ContainsByte(S, 'C')) << ((bool)2)));
	Rz = (Rz + ((JB_Str_ContainsByte(S, 'L')) << ((bool)3)));
	JB_Decr(S);
	return Rz;
}

SCFunction* SC_Msg_AutoMsgFunc(Message* Self) {
	SCFunction* Rz = nil;
	Rz = SC_Msg_MsgFunc(Self);
	if ((!(Rz))) {
		Rz = SC_Msg_MsgFunc(((Message*)JB_Ring_Parent(Self)));
	}
	return Rz;
}

SCFunction* SC_Msg_AutoMsgFuncFn(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxName, false)) {
		SCClass* Cls = SC_Comp__SyntaxAccess(Self);
		if (Cls) {
			return Cls->ConstructorFunc;
		}
	}
	Message* Tmp = Self;
	if ((!JB_Msg_EqualsSyx(Tmp, JB_SyxTmp, false))) {
		Tmp = ((Message*)JB_Ring_Parent(Self));
		if (JB_Msg_EqualsSyx(Tmp, JB_SyxDot, false)) {
			Tmp = ((Message*)JB_Ring_Parent(Tmp));
		}
	}
	if (JB_Msg_EqualsSyx(Tmp, JB_SyxTmp, false)) {
		SCFunction* Fn = SC_Msg_AsFunc(Tmp);
		if (Fn) {
			return Fn;
		}
	}
	return nil;
}

void SC_Msg_AvoidSafeDecr(Message* Self) {
	Message* Arg = ((Message*)JB_Ring_First(Self));
	Message* Decr = ((Message*)JB_Ring_PrevSib(((Message*)JB_Ring_Last(Arg))));
	Message* Prms = ((Message*)JB_Ring_Last(Decr));
	if (Prms) {
		if (Prms->Obj == SC__Comp_RefSafeDecr) {
			{
				Message* _t = ((Message*)JB_Ring_First(Prms));
				if (_t) {
					SC_Msg_BecomeNil(_t);
				}
			};
		}
	}
}

void JB_Msg_Back__(Message* Self, FastString* Fs) {
	if (JB_Ind_SyntaxCast(JB_Str_FindByte(Self->Name, '`', 0, JB_int__Max()))) {
		JB_Msg_Str__(Self, Fs);
	}
	 else {
		JB_FS_AppendByte(Fs, '`');
		JB_FS_AppendString(Fs, Self->Name);
		JB_FS_AppendByte(Fs, '`');
	}
}

void JB_Msg_Badj__(Message* Self, FastString* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if (F) {
		Message* L = ((Message*)JB_Ring_NextSib(F));
		if (L) {
			JB_FS_SyntaxAppend(Fs, L);
			JB_FS_AppendString(Fs, JB_LUB[213]);
			JB_FS_SyntaxAppend(Fs, F);
		}
	}
}

void JB_Msg_BecomeStr(Message* Self, Syntax Fn, JB_String* Name) {
	Self->Func = Fn;
	JB_SetRef(Self->Name, Name);
}

void JB_Msg_BecomeNum(Message* Self, int64 Num) {
	JB_Tree_Clear(Self);
	Self->Func = JB_SyxNum;
	JB_SetRef(Self->Name, JB_int64_Render(Num, nil));
}

void JB_Msg_BecomeMsg(Message* Self, Message* Src) {
	Self->Func = Src->Func;
	JB_SetRef(Self->Name, Src->Name);
	JB_Tree_Clear(Self);
	JB_Tree_TakeAllFrom(Self, Src);
}

void SC_Msg_Become(Message* Self, SCOperator* Op) {
	JB_SetRef(Self->Obj, Op);
	JB_SetRef(Self->Name, Op->Name);
}

void SC_Msg_BecomeAppend(Message* Self, JB_String* S) {
	Message* P = ((Message*)JB_Ring_Parent(Self));
	if ((!JB_Msg_Expect(P, JB_SyxRel, nil))) {
		return;
	}
	JB_Msg_BecomeStr(P, JB_SyxDot, S);
	Self->Func = JB_SyxPrm;
	Message* N = ((Message*)JB_Ring_NextSib(Self));
	if (JB_Msg_EqualsSyx(N, JB_SyxList, false)) {
		JB_FreeIfDead(SC_Msg_ReplaceWith(Self, N));
		N->Func = JB_SyxPrm;
	}
	 else {
		(JB_Ring_LastSet(Self, N));
	}
}

void JB_Msg_BecomeMacro(Message* Self, Macro* M, Array* Prms) {
	Message* S = JB_Macro_Source(M);
	if (S) {
		JB_Tree_Clear(Self);
		Self->Func = S->Func;
		JB_SetRef(Self->Name, S->Name);
		JB_Msg_AppendMacro(Self, M, Prms);
	}
}

void SC_Msg_BecomeNil(Message* Self) {
	JB_SetRef(Self->Name, JB_LUB[1810]);
	JB_SetRef(Self->Obj, JB_TypeNil);
	JB_Tree_Clear(Self);
}

void SC_Msg_BecomeSyx(Message* Self) {
	Self->Func = JB_SyxThg;
	JB_SetRef(Self->Name, JB_Str_OperatorPlus(JB_LUB[1981], Self->Name));
}

void JB_Msg_Bin__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[225]);
	JB_FS_AppendHexStr(Fs, Self->Name);
	JB_FS_AppendString(Fs, JB_LUB[284]);
}

void JB_Msg_binn__(Message* Self, FastString* Fs) {
	JB_Msg_BinnRender(Self, Fs, JB_LUB[597], JB_LUB[0]);
}

void JB_Msg_BinnRender(Message* Self, FastString* Fs, JB_String* Sepa, JB_String* Sepb) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if ((!F)) {
		return;
	}
	Message* Opp = ((Message*)JB_Ring_NextSib(F));
	if ((!Opp)) {
		return;
	}
	Message* L = ((Message*)JB_Ring_NextSib(Opp));
	Message* OF = ((Message*)JB_Ring_First(Opp));
	JB_FS_AppendString(Fs, Sepa);
	JB_FS_SyntaxAppend(Fs, ((Message*)JB_Ternary(((bool)OF), OF, Opp)));
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_SyntaxAppend(Fs, F);
	if ((!OF)) {
		if (L) {
			debugger;
		}
		return;
	}
	Message* ON = ((Message*)JB_Ring_NextSib(OF));
	if (ON) {
		JB_FS_AppendByte(Fs, ' ');
		JB_FS_SyntaxAppend(Fs, ON);
	}
	if (L) {
		JB_FS_AppendByte(Fs, ' ');
		JB_FS_SyntaxAppend(Fs, L);
	}
}

ErrorSeverity SC_Msg_Blind(Message* Self) {
	return JB_ErrorSeverity__Find(Self->Name, Self);
}

SCBlockage SC_Msg_Blocks(Message* Self) {
	if (Self) {
		return Self->Tag & kSC__SCBlockage_Bits;
	}
	return 0;
}

void SC_Msg_BlocksSet(Message* Self, int Value) {
	Self->Tag = ((Self->Tag & (~kSC__SCBlockage_Bits)) | Value);
}

void JB_Msg_Bra__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '(');
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Self)));
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(Fs, ')');
}

SCDecl* SC_Msg_BraDeclfind(Message* Self) {
	SCDecl* Rz = nil;
	while (true) {
		SCDecl* D = SC_Msg_AsDecl(Self);
		if (D) {
			Rz = D;
		}
		Self = ((Message*)JB_Ring_Parent(Self));
		if ((!JB_Msg_EqualsSyx(Self, JB_SyxBra, false))) {
			break;
		}
	};
	return Rz;
}

void JB_Msg_BRel__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Self)));
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
}

bool SC_Msg_BuildRunTask(Message* Self, Message* Fields, int Level) {
	Message* Prms = ((Message*)JB_Ring_First(Self));
	bool NoPrms = (!Prms) or (JB_Msg_EqualsSyx(Prms, JB_SyxArg, false));
	if (NoPrms) {
		Prms = JB_Syx_Msg(JB_SyxList, JB_LUB[0]);
		(JB_Ring_FirstSet(Self, Prms));
		if (Level == 3) {
			Message* Ss = ((Message*)JB_Ring_First(Fields));
			if (Ss) {
				JB_Tree_SyntaxAppend(Prms, JB_Msg_Copy(Ss, nil));
			}
		}
	}
	 else {
		Syntax Pf = JB_Msg_Func(Prms);
		if ((!((Pf == JB_SyxBra) or (Pf == JB_SyxList)))) {
			JB_Msg_SyntaxExpect(Prms, nil);
			return nil;
		}
	}
	Message* Arg = ((Message*)JB_Ring_NextSib(Prms));
	if (Arg) {
		JB_Msg_Expect(Arg, JB_SyxArg, nil);
		if ((!JB_Msg_ExpectLast(Arg, JB_LUB[0]))) {
			return nil;
		}
	}
	 else {
		Arg = JB_Msg_Msg(Self, JB_SyxArg, JB_LUB[0]);
	}
	Message* P1 = ((Message*)JB_Ring_First(Prms));
	Message* Ff = ((Message*)JB_Ring_First(Fields));
	if (((JB_Msg_EqualsSyx(P1, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(P1, JB_SyxDot, false))) and (JB_Msg_EqualsSyx(Ff, JB_SyxSDot, false))) {
		JB_SetRef(Ff->Name, JB_LUB[1987]);
		Ff->Func = JB_SyxThg;
	}
	Syntax F = JB_Msg_Func(P1);
	if ((!((F == JB_SyxThg) or (F == JB_SyxDot)))) {
		Message* Brah = JB_Syx_Msg(JB_SyxBra, JB_LUB[0]);
		JB_Msg_AppendSyx(Brah, JB_SyxThg, JB_LUB[1725]);
		(JB_Ring_FirstSet(Self, Brah));
		Message* Pr = ((Message*)JB_Ring_Parent(Self));
		Array* _tmPf0 = (JB_Array_Constructor0(nil));
		JB_Array_SyntaxAppend(_tmPf0, Prms);
		JB_Msg_AppendMacro(Pr, SC__SCTasks_TaskMacro, _tmPf0);
		Message* Callprms = ((Message*)JB_Tree_FlatLast(Pr));
		JB_Msg_AppendSyx(Callprms, JB_SyxThg, JB_LUB[1933]);
		{
			Message* P = ((Message*)JB_Ring_First(Prms));
			while (P) {
				Message* _Nf2 = ((Message*)JB_Ring_NextSib(P));
				Message* Ty = ((Message*)JB_Tree_Second(P));
				if (Ty) {
					JB_Tree_SyntaxAppend(Callprms, JB_Msg_Copy(Ty, nil));
				}
				P = _Nf2;
			};
			;
		};
	}
	JB_SetRef(Self->Name, JB_LUB[1673]);
	(JB_Ring_FirstSet(Self, JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[1908])));
	return true;
}

void SC_Msg_BuildTask(Message* Self, Message* Fields, Message* Root, int Level) {
	Array* Runs = JB_Incr(JB_Msg_FindAll(Self, JB_SyxTmp, JB_LUB[1908]));
	Message* Run = JB_Incr(((Message*)JB_Array_Value(Runs, 0)));
	if (JB_Array_SyntaxCompare(Runs, 1, false) >= 1) {
		JB_Msg_SyntaxExpect(Run, JB_LUB[1038]);
	}
	JB_Decr(Runs);
	if (JB_Msg_SyntaxEquals(Root, JB_LUB[1771], false)) {
		if (Run) {
			if (true) {
				JB_Msg_SyntaxExpect(Run, nil);
			}
		}
		JB_SetRef(Run, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1908]));
		Message* _tmPf0 = JB_Incr(JB_Msg_Msg(Run, JB_SyxArg, JB_LUB[0]));
		JB_Tree_TakeAllFrom(_tmPf0, Self);
		JB_Decr(_tmPf0);
		JB_Tree_SyntaxAppend(Self, Run);
	}
	 else {
		if ((!Run)) {
			JB_Msg_SyntaxExpect(Self, JB_LUB[1450]);
			JB_Decr(Run);
			return;
		}
	}
	if (SC_Msg_BuildRunTask(Run, Fields, Level) and (!({
		Array* _tmPf2 = JB_Incr(JB_Msg_FindAll(Self, JB_SyxTmp, JB_LUB[1563]));
		bool _tmPf1 = JB_Array_SyntaxCast(_tmPf2);
		JB_Decr(_tmPf2);
		 _tmPf1;
	}))) {
		Message* _tmPf3 = JB_Incr(JB_Str_ParseJbin(((JB_LUB[22])), kJB__int64_max));
		(JB_Ring_PrevSibSet(Run, _tmPf3));
		JB_Decr(_tmPf3);
	}
	JB_Decr(Run);
}

void SC_Msg_BunchFix(Message* Self) {
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
	Message* P = JB_Incr(SC_Msg_BunchFixPrepare(Self));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(P)));
	Message* Subject = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	Message* Multi_opp = JB_Incr(((Message*)JB_Ring_NextSib(Subject)));
	if (Multi_opp) {
		SC_Msg_RelFix(Self, false);
		JB_FreeIfDead(SC_Msg_ReplaceWith(P, Self));
		SC_Msg_BunchFixSub(Multi_opp, Subject, Self);
	}
	JB_Decr(P);
	JB_Decr(Subject);
	JB_Decr(Multi_opp);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Msg_BunchFixPrepare(Message* Self) {
	Message* P = SC_Msg_NiceParent(Self);
	if (JB_Msg_EqualsSyx(P, JB_SyxRel, false)) {
		return P;
	}
	return ((Message*)JB_Ring_Last(SC_Func__TypedTempMoveOut(Self, JB_LUB[0])));
}

void SC_Msg_BunchFixSub(Message* Self, Message* Subject, Message* Stuff) {
	JB_Incr(Stuff);
	JB_Incr(Subject);
	while (Stuff) {
		Message* Test = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
		JB_Tree_SyntaxAppend(Test, Subject);
		Message* _tmPf0 = JB_Incr(JB_Msg_Copy(Self, nil));
		JB_Tree_SyntaxAppend(Test, _tmPf0);
		JB_Decr(_tmPf0);
		if ((!JB_Msg_EqualsSyx(Stuff, JB_SyxRel, false))) {
			JB_FreeIfDead(JB_Msg_ReplaceInto(Stuff, Test));
			JB_Decr(Test);
			break;
		}
		Message* R = JB_Incr(((Message*)JB_Tree_Get(Stuff, 2)));
		if ((!R)) {
			JB_Msg_SyntaxExpect(Stuff, JB_LUB[1170]);
			JB_Decr(Subject);
			JB_Decr(Stuff);
			JB_Decr(R);
			JB_Decr(Test);
			return;
		}
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(Stuff)));
		JB_FreeIfDead(JB_Msg_ReplaceInto(_tmPf1, Test));
		JB_Decr(Test);
		JB_Decr(_tmPf1);
		JB_SetRef(Stuff, R);
		JB_Decr(R);
		JB_SetRef(Subject, JB_Msg_Copy(Subject, nil));
	};
	JB_Decr(Stuff);
	JB_Decr(Subject);
}

void SC_Msg_BunchlessFix(Message* Self) {
	Message* Subject = JB_Incr(((Message*)JB_Ring_First(Self)));
	Message* Multi_opp = JB_Incr(((Message*)JB_Ring_NextSib(Subject)));
	if ((!Multi_opp)) {
		JB_Decr(Multi_opp);
		JB_Decr(Subject);
		return;
	}
	Message* C = JB_Incr(((Message*)JB_Ring_NextSib(Multi_opp)));
	if ((!C)) {
		JB_Decr(C);
		JB_Decr(Multi_opp);
		JB_Decr(Subject);
		return;
	}
	JB_Msg_BecomeMsg(Self, C);
	JB_Decr(C);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
	SC_Msg_BunchFixSub(Multi_opp, Subject, Self);
	JB_Decr(Subject);
	JB_Decr(Multi_opp);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

bool SC_Msg_CanGetAddress(Message* Self, SCNode* Name_space) {
	Message* Curr = SC_Msg_UnBra(Self);
	if (JB_Msg_EqualsSyx(Curr, JB_SyxAcc, false)) {
		Message* F = ((Message*)JB_Ring_First(Curr));
		SCDecl* T = SC_TypeOfExpr(F, Name_space, nil);
		if ((!T)) {
			return nil;
		}
		bool _tmPf0 = (SC_Decl_IsNumeric(T) <= 1);
		if ((!_tmPf0)) {
			JB_Msg_SyntaxExpect(Curr, JB_LUB[706]);
			return nil;
		}
		return _tmPf0;
	}
	SCDecl* T2 = SC_TypeOfExpr(Curr, Name_space, nil);
	if ((!T2)) {
		return nil;
	}
	if ((!((JB_Msg_EqualsSyx(Curr, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(Curr, JB_SyxDot, false))))) {
		JB_Msg_SyntaxExpect(Curr, JB_LUB[705]);
		return nil;
	}
	if ((!(!SC_Decl_SyntaxIs(T2, kSC__SCDeclInfo_DataOnlyConst)))) {
		JB_Msg_SyntaxExpect(Curr, JB_LUB[707]);
		return nil;
	}
	if (((JB_Msg_EqualsSyx(Curr, JB_SyxThg, false))) and ((SC_Decl_SyntaxIs(T2, kSC__SCDeclInfo_Local)) and (!(SC_Decl_IsNormalStruct(T2) or SC_Decl_IsCArray(T2))))) {
		Message* P = SC_Msg_ParentForAddress(Self);
		if ((!JB_Msg_EqualsSyx(P, JB_SyxPrm, false))) {
			JB_Msg_SyntaxExpect(Curr, JB_LUB[715]);
			return nil;
		}
	}
	return true;
}

Message* SC_Msg_CastedParent(Message* Self) {
	Message* Rz = nil;
	Rz = ((Message*)JB_Ring_Parent(SC_Msg_UnBra(Self)));
	if (JB_Msg_EqualsSyx(Rz, JB_SyxPrm, false)) {
		Rz = ((Message*)JB_Ring_Parent(Rz));
	}
	return Rz;
}

int SC_Msg_CastFPToVoidPtr(Message* Self) {
	Message* Cst = JB_Incr(JB_Syx_OperatorPlus(JB_SyxType, JB_LUB[563]));
	(JB_Ring_PrevSibSet(Self, Cst));
	JB_Tree_SyntaxAppend(Cst, Self);
	Message* _tmPf0 = JB_Incr(JB_Msg_Msg(Cst, JB_SyxEmb, JB_LUB[0]));
	JB_SetRef(_tmPf0->Obj, JB_TypeVoidPtr);
	JB_Decr(_tmPf0);
	JB_SetRef(Cst->Obj, JB_TypeVoidPtr);
	JB_Decr(Cst);
	return kJB_kCastedMatch;
}

int SC_Msg_CastToBool(Message* Self, SCNode* Name_space) {
	return SC_Msg_CastToType(Self, JB_LUB[1520], JB_TypeBool, Name_space, kJB_kLossyCastedMatch);
}

int SC_Msg_CastToClass(Message* Self, SCClass* Type, SCNode* Name_space) {
	return SC_Msg_CastToType(Self, Type->Name, Type, Name_space, kJB_kCastedMatch);
}

int SC_Msg_CastToType(Message* Self, JB_String* TypeName, SCClass* Type, SCNode* Name_space, int Loss) {
	if ((!Self)) {
		return kJB_kNeedsTypeCast | Loss;
	}
	if (Name_space) {
		JB_FreeIfDead(SC_TypeOfExpr(Self, Name_space, nil));
	}
	 else if ((bool)(Self->Obj)) {
		SCDecl* FoundType = JB_Incr(SC_TypeOfExpr(Self, Name_space, nil));
		if (((bool)FoundType) and SC_Class_IsStruct(FoundType->Type)) {
			if ((!FoundType->PointerCount)) {
				JB_Msg_SyntaxExpect(Self, JB_LUB[719]);
				JB_Decr(FoundType);
				return 0;
			}
		}
		JB_Decr(FoundType);
	}
	Message* Cst = JB_Incr((JB_Syx_Msg(JB_SyxType, JB_LUB[563])));
	(JB_Ring_PrevSibSet(Self, Cst));
	JB_Tree_SyntaxAppend(Cst, Self);
	Message* _tmPf0 = JB_Incr(JB_Msg_Msg(Cst, JB_SyxThg, TypeName));
	JB_SetRef(_tmPf0->Obj, Type->TypeNormal);
	JB_Decr(_tmPf0);
	JB_SetRef(Cst->Obj, Type->TypeNormal);
	JB_Decr(Cst);
	return Loss;
}

Message* SC_Msg_CausesUnReachable(Message* Self, Message* Arg, Message* Dcl, Message* LastPlace) {
	Message* Curr = Dcl;
	if ((!Curr)) {
		Curr = ((Message*)JB_Ring_First(Self));
	}
	while (((bool)Curr) and (Curr != LastPlace)) {
		if (JB_Msg_EqualsSyx(Curr, JB_SyxTmp, false)) {
			JB_String* S = Curr->Name;
			if (JB_Str_Equals(S, JB_LUB[1898], false)) {
				return Curr;
			}
			if ((JB_Str_Equals(S, JB_LUB[1634], false)) or (JB_Str_Equals(S, JB_LUB[1565], false))) {
				if (SC_Refs__ExitHitsOrGoesPast(Curr, Arg)) {
					return Curr;
				}
			}
			 else if (((JB_Str_Equals(S, JB_LUB[1891], false))) and (Self == Arg)) {
				return Curr;
			}
		}
		Curr = ((Message*)JB_Ring_NextSib(Curr));
	};
	return nil;
}

void JB_Msg_Char__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '\'');
	JB_String* _tmPf0 = JB_Incr(JB_Str_EscapeChr(Self->Name));
	JB_FS_AppendString(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(Fs, '\'');
}

void SC_Msg_CheckContinuesAndExits(Message* Self) {
	{
		Message* Msg = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while (((bool)(Msg)) and (Msg != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(Msg)));
			if (JB_Msg_EqualsSyx(Msg, JB_SyxTmp, false)) {
				if ((JB_Msg_SyntaxEquals(Msg, JB_LUB[1660], false)) or (JB_Msg_SyntaxEquals(Msg, JB_LUB[2047], false))) {
					Msg = ((Message*)JB_Ring_FlatAfter(Msg));
					continue;
				}
				 else if (JB_Msg_SyntaxEquals(Msg, JB_LUB[1565], false)) {
					SC_Msg_LoopContinue(Msg);
				}
				 else if (JB_Msg_SyntaxEquals(Msg, JB_LUB[1634], false)) {
					SC_Msg_LoopExit(Msg);
				}
			}
			Msg = _N_f2;
		};
		;
	};
}

void SC_Msg_CheckNotInStateExpr(Message* Self, Message* Top) {
	Message* Node = Self;
	while (((bool)Node) and (Node != Top)) {
		if (SC_Msg_IsStatementExpr(Node)) {
			JB_Msg_SyntaxExpect(Self, JB_Str_OperatorPlus(JB_LUB[1233], Self->Name));
		}
		Node = ((Message*)JB_Ring_Parent(Node));
	};
}

void SC_Msg_CheckSuperDotSave(Message* Self, JB_String* Name, bool ShouldBe) {
	bool Match = ((SC_Msg_OperatorIsDot(Self, Name)) and (({
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(Self)));
		bool _tmPf1 = SC_Msg_OperatorIsThing(_tmPf2, JB_LUB[1974]);
		JB_Decr(_tmPf2);
		 _tmPf1;
	})));
	if (Match != ShouldBe) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[877]);
		JB_FS_AppendString(_fsf0, Name);
		JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Msg_SyntaxWarn(Self, _tmPf3);
		JB_Decr(_tmPf3);
	}
}

void SC_Msg_Clean(Message* Self, bool Erl) {
	int Pos = JB__Tk_Using.Position;
	uint Len = JB__Tk_Using.Length;
	u16 Tag = JB__Tk_Using.Tag;
	Message* QEscape = nil;
	Message* IgnoreArg = nil;
	if (JB_FreeIfDead(JB_Class_Layer((&MessageData))) == JB_FreeIfDead(JB_Class_DefaultLayer((&MessageData)))) {
		Pos = -1;
	}
	{
		Message* Curr = JB_Incr(Self);
		Message* _afterf2 = JB_Incr(((Message*)JB_Ring_FlatAfter(Self)));
		while (((bool)(Curr)) and (Curr != _afterf2)) {
			Message* _N_f3 = JB_Incr((((Message*)JB_Ring_FlatNext0(Curr))));
			if (Pos >= 0) {
				Curr->Position = Pos;
				Curr->RangeLength = Len;
				Curr->Tag = Tag;
			}
			if (Curr == QEscape) {
				QEscape = nil;
			}
			Syntax F = Curr->Func;
			if ((F != JB_SyxBack) and ((F != JB_SyxStr) and ((F != JB_SyxSStr) and (F != JB_SyxBin)))) {
				if (JB_Str_ContainsString(Curr->Name, JB_LUB[2094])) {
					JB_Msg_SyntaxExpect(Curr, JB_LUB[1085]);
					JB_Decr(_N_f3);
					JB_Decr(_afterf2);
					JB_Decr(Curr);
					JB_Decr(IgnoreArg);
					return;
				}
			}
			if (F == JB_SyxArg) {
				JB_SetRef(Curr->Name, JB_LUB[0]);
			}
			 else if ((F == JB_SyxBack) or ((F == JB_SyxSStr) or (F == JB_SyxBin))) {
				Curr->Func = JB_SyxStr;
			}
			 else if (F == JB_SyxRel) {
				SC_Msg_RelFix(Curr, false);
			}
			 else if (Erl and (F == JB_SyxERel)) {
				JB_SetRef(Curr->Name, JB_Str_LowerCase(Curr->Name));
				SC_Msg_FixErl(Curr);
			}
			 else if (F == JB_SyxARel) {
				if ((!QEscape) and (JB_Msg_SyntaxEquals(Curr, JB_LUB[598], false))) {
					SC_Msg_Tran_QMark(Curr);
					JB_SetRef(Curr, ((Message*)JB_Ring_FlatNext0(Curr)));
					JB_Decr(_N_f3);
					continue;
				}
			}
			 else if (F == JB_SyxDecl) {
				Message* L = JB_Incr(((Message*)JB_Ring_Last(Curr)));
				if (JB_Msg_EqualsSyx(L, JB_SyxArg, false)) {
					Message* Types = JB_Incr(((Message*)JB_Ring_First(Curr)));
					Message* Names = JB_Incr(((Message*)JB_Ring_NextSib(Types)));
					if (((bool)Types) and (((bool)Names) and (JB_FreeIfDead(((Message*)JB_Ring_NextSib(Names))) == L))) {
						SC_Msg_WithDeclTransform(L, Curr, Names, L);
					}
					JB_Decr(Types);
					JB_Decr(Names);
				}
				JB_Decr(L);
				Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(Curr)));
				QEscape = ((Message*)JB_Ring_FlatAfter(_tmPf4));
				JB_Decr(_tmPf4);
			}
			 else if ((F == JB_SyxOpp) or ((F == JB_SyxCnj) or (F == JB_SyxERel))) {
				if (JB_Msg_SyntaxEquals(Curr, JB_LUB[582], false)) {
					(JB_Msg_SyntaxDeprecate(Curr, JB_LUB[1355]));
					JB_SetRef(Curr->Name, JB_LUB[215]);
				}
				 else if (JB_Msg_SyntaxEquals(Curr, JB_LUB[2090], false)) {
					(JB_Msg_SyntaxDeprecate(Curr, JB_LUB[1366]));
					JB_SetRef(Curr->Name, JB_LUB[2084]);
				}
				 else if (JB_Msg_SyntaxEquals(Curr, JB_LUB[584], false)) {
					SC_Msg_BecomeAppend(Curr, JB_LUB[1250]);
				}
				 else if (JB_Msg_SyntaxEquals(Curr, JB_LUB[2092], false)) {
					SC_Msg_BecomeAppend(Curr, JB_LUB[1258]);
				}
				 else if (SC_Msg_OppExpand(Curr)) {
					0;
				}
				 else if (JB_CS_HasChar(JB__Constants_CSWordStart, JB_Str_First((Curr->Name)))) {
					JB_SetRef(Curr->Name, JB_Str_LowerCase(Curr->Name));
				}
			}
			 else if (F == JB_SyxTmp) {
				if (JB_FreeIfDead(((Message*)JB_Ring_Parent(Curr))) != IgnoreArg) {
					JB_String* S = JB_Incr(JB_Str_LowerCase(Curr->Name));
					JB_SetRef(Curr->Name, S);
					if ((JB_Str_Equals(S, JB_LUB[1697], false)) or ((JB_Str_Equals(S, JB_LUB[1623], false)) or (JB_Str_Equals(S, JB_LUB[1698], false)))) {
						SC_Msg_FixElseif(Curr);
					}
					 else if (JB_Str_Equals(S, JB_LUB[1984], false)) {
						JB_SetRef(Curr, SC_Msg_Tran_Target(Curr));
						JB_Decr(S);
						JB_Decr(_N_f3);
						continue;
					}
					 else if ((JB_Str_Equals(S, JB_LUB[1727], false)) or (JB_Str_Equals(S, JB_LUB[1729], false))) {
						SC_Msg_Tran_Isnt(Curr, JB_LUB[1933]);
					}
					 else if (((bool)SC__SC_UniqueNum) and SC_AutoComplete__IsAFunc(S)) {
						SC__SC_UniqueNum = 0;
					}
					 else if ((JB_Str_Equals(S, JB_LUB[1610], false)) or ((JB_Str_Equals(S, JB_LUB[1679], false)) or ((JB_Str_Equals(S, JB_LUB[1656], false)) or (JB_Str_Equals(S, JB_LUB[1562], false))))) {
						JB_SetRef(IgnoreArg, ((Message*)JB_Ring_Last(Curr)));
					}
					 else if (JB_Str_Equals(S, JB_LUB[2050], false)) {
						SC_Msg_Tran_With(Curr);
					}
					 else if (JB_Str_Equals(S, JB_LUB[1606], false)) {
						if (SC__Options_IsDirectTest) {
							JB_SetRef(Curr->Name, JB_LUB[1697]);
							//using;
							MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Curr);
							Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[2004]));
							(JB_Ring_FirstSet(Curr, (_tmPf5)));
							JB_Decr(_tmPf5);
							JB_MsgPos_SyntaxUsingComplete((&_usingf0));
							JB_MsgPos_Destructor((&_usingf0));
						}
						 else {
							JB_SetRef(Curr->Name, JB_LUB[1699]);
						}
					}
					JB_Decr(S);
				}
			}
			JB_SetRef(Curr, _N_f3);
			JB_Decr(_N_f3);
		};
		JB_Decr(Curr);
		JB_Decr(_afterf2);
		;
	}
	;
	JB_Decr(IgnoreArg);
}

int JB_Msg_CleanIndent(Message* Self) {
	return Self->Indent & (~1);
}

Message* SC_Msg_CmdImprove(Message* Self) {
	if ((!JB_Msg_EqualsSyx(Self, JB_SyxRel, false))) {
		return Self;
	}
	Message* Ch = ((Message*)JB_Ring_First(Self));
	if (JB_Msg_EqualsSyx(Ch, JB_SyxFunc, false)) {
		return Ch;
	}
	return Self;
}

void JB_Msg_Cnj__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '#');
	JB_FS_AppendString(Fs, Self->Name);
}

bool SC_Msg_CollectAGlobalDecl(Message* Self, SCNode* Scarg) {
	SCDecl* Dcl = SC_Msg_CollectDecl(Self, Scarg, Scarg, kSC__DeclMode_Globals, nil, nil);
	if (Dcl) {
		Message* Def = Dcl->Default;
		if (((bool)Def) and (!SC_Decl_NilStated(Dcl))) {
			SCDecl* D = SC_Msg_MsgDecl(Def);
			if (((bool)D) and ((bool)SC_Decl_StatedReal(D))) {
				Dcl->NilDeclared = kSC__NilState_Real;
			}
		}
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Property, true));
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Global, true));
		if ((Self->Indent == 255) or (('_' == JB_Str_First(Dcl->Name)) or ('_' == JB_Str_Last(Dcl->Name, 0)))) {
			(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Hidden, true));
		}
		 else if (SC__Options_MakeInterpreter) {
			JB_Array_SyntaxAppend(SC__PackMaker_LibGlobs, Dcl);
		}
		return true;
	}
	return false;
}

Message* SC_Msg_CollectDclName(Message* Self) {
	if (Self) {
		Message* Thg = Self;
		if (JB_Msg_EqualsSyx(Thg, JB_SyxRel, false)) {
			Thg = ((Message*)JB_Ring_First(Thg));
		}
		if (JB_Msg_EqualsSyx(Thg, JB_SyxThg, false)) {
			return Thg;
		}
		if (true) {
			JB_Msg_SyntaxExpect(Self, nil);
		}
	}
	return nil;
}

SCDecl* SC_Msg_CollectDecl(Message* Self, SCNode* P, SCNode* Recv, int Mode, SCClass* Cls, SCFunction* FuncPrms) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Self)));
	Message* Types = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* Names = JB_Incr(((Message*)JB_Ring_NextSib(Types)));
	if ((!(((bool)FuncPrms) or ((bool)Names)))) {
		JB_Msg_SyntaxExpect(Self, JB_LUB[1076]);
		JB_Decr(Names);
		JB_Decr(Types);
		return nil;
	}
	Message* Default = JB_Incr(SC_DeclsDefault(Names));
	SCDecl* Sdcl = JB_Incr(SC_ExtractDecl(Types, P, Mode));
	if ((!Sdcl) and ((!Default) and (JB_Object_FastIsa(P, &SCArgData)))) {
		JB_SetRef(Sdcl, ((SCArg*)P)->ParentFunc->ReturnType);
	}
	Message* NameItm = JB_Incr(SC_Msg_CollectDclName(Names));
	SCDecl* DefaultDcl = nil;
	if (FuncPrms) {
		0;
	}
	 else if (((bool)Default) and (Mode != kSC__DeclMode_Properties)) {
		DefaultDcl = SC_TypeOfExprNeeded(Default, P);
		if ((!DefaultDcl)) {
			JB_Decr(NameItm);
			JB_Decr(Sdcl);
			JB_Decr(Default);
			JB_Decr(Names);
			JB_Decr(Types);
			return nil;
		}
		DefaultDcl = SC_Decl_DownGrade(DefaultDcl);
		if (Sdcl) {
			JB_SetRef(Default, SC_Decl_ExpectMatch(Sdcl, DefaultDcl, kJB_kTypeCastTrue, Default, nil));
		}
	}
	 else if (((!Cls)) and (((bool)(Sdcl)) and (SC_Decl_CanUseDefault(Sdcl)))) {
		JB_SetRef(Default, SC_Decl_CreateDefault(Sdcl, Types, Mode >= 4));
		if (Default) {
			JB_FreeIfDead(SC_TypeOfExpr(Default, P, nil));
			JB_SetRef(Names, SC_DefaultStitch(Default, Self));
		}
	}
	bool NoOriginalDcl = false;
	if ((!Sdcl)) {
		NoOriginalDcl = true;
		if (((bool)(Cls)) and ((bool)(Cls->Contained))) {
			JB_SetRef(Sdcl, Cls->Contained);
		}
		 else {
			if ((!((!FuncPrms) and ((bool)DefaultDcl)))) {
				JB_StringC* _tmPf1 = JB_Incr(((JB_StringC*)JB_Ternary((!FuncPrms), JB_LUB[1021], JB_LUB[1022])));
				JB_Msg_SyntaxExpect(Self, _tmPf1);
				JB_Decr(_tmPf1);
				JB_Decr(NameItm);
				JB_Decr(Sdcl);
				JB_Decr(Default);
				JB_Decr(Names);
				JB_Decr(Types);
				return nil;
			}
			JB_SetRef(Sdcl, DefaultDcl);
		}
	}
	if (SC_Decl_NeedsContainedfix(Sdcl)) {
		JB_SetRef(Sdcl, SC_Decl_Containedfix(Sdcl));
	}
	SCDecl* Dcl = JB_Incr(SC_Decl_CopyDecl(Sdcl, false));
	if ((!NameItm)) {
		if ((!JB_Tree_IsLast(Self))) {
			JB_Msg_SyntaxExpect(Self, JB_LUB[1121]);
		}
		if (FuncPrms) {
			if (SC_Func_CollectReturnAsReal(FuncPrms)) {
				Dcl->NilDeclared = kSC__NilState_Real;
			}
			JB_SetRef(FuncPrms->ReturnType, Dcl);
		}
		JB_Decr(Dcl);
		JB_Decr(NameItm);
		JB_Decr(Sdcl);
		JB_Decr(Default);
		JB_Decr(Names);
		JB_Decr(Types);
		return nil;
	}
	if ((!Default)) {
		JB_Msg_ExpectLast(Names, JB_LUB[0]);
	}
	JB_Decr(Names);
	if (Mode != kSC__DeclMode_Properties) {
		JB_SetRef(NameItm->Obj, Dcl);
	}
	if ((((bool)(Mode & 8))) and NoOriginalDcl) {
		if (!(SC_Decl_SyntaxIs(Sdcl, kSC__SCDeclInfo_StayBorrowed))) {
			(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Borrowed, (!true)));
		}
		Dcl->NilDeclared = (kSC__NilState_Real >> SC_Decl_TypeSuffers(Dcl));
	}
	JB_Decr(Sdcl);
	if (JB_Msg_OperatorIn(NameItm, JB_SyxRel)) {
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Parent(NameItm)));
		JB_SetRef(_tmPf2->Obj, Dcl);
		JB_Decr(_tmPf2);
	}
	JB_SetRef(Self->Obj, Dcl);
	JB_SetRef(Types->Obj, Dcl);
	JB_Decr(Types);
	JB_SetRef(Dcl->Default, Default);
	(SC_Decl_NameSet(Dcl, NameItm->Name));
	JB_Decr(NameItm);
	JB_SetRef(Dcl->Source, Self);
	(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Const, (!true)));
	if (((bool)Default) and ((bool)DefaultDcl)) {
		SC_Decl_ConstCheck(Dcl, nil, Default, DefaultDcl);
	}
	JB_Decr(Default);
	if (Recv) {
		SC_Base_TryAdd(Recv, Self, Dcl, Dcl->Name);
	}
	JB_SafeDecr(Dcl);
	return Dcl;
}

bool SC_Msg_CollectFromBody(Message* Self, SCNode* Scarg) {
	SCDecl* Dcl = SC_Msg_CollectDecl(Self, Scarg, Scarg, kSC__DeclMode_FunctionBody, nil, nil);
	if (Dcl) {
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Body, true));
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_DataConst, (!true)));
		Message* Def = Dcl->Default;
		if (Def) {
			if ((!((!JB_Msg_EqualsSyx(Def, JB_SyxThg, false)) or (!JB_Str_Equals(Def->Name, Dcl->Name, true))))) {
				JB_Msg_SyntaxExpect(Def, JB_LUB[1203]);
			}
		}
		return true;
	}
	return false;
}

JB_String* SC_Msg_CollectFuncTableName(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxName, false)) {
		return JB_Str_UpperCase(Self->Name);
	}
	if (JB_Str_Exists(Self->Name) and (!JB_Msg_EqualsSyx(Self, JB_SyxDot, false))) {
		return Self->Name;
	}
	return JB_Msg_FirstName(Self);
}

Message* SC_Msg_CollectionPlace(Message* Self) {
	Message* Msg = JB_Incr(Self);
	while (Msg) {
		Message* P = JB_Incr(((Message*)JB_Ring_Parent(Msg)));
		if (JB_Msg_EqualsSyx(Msg, JB_SyxArg, false)) {
			if ((!P)) {
				JB_Decr(P);
				JB_SafeDecr(Msg);
				return Msg;
			}
			if (SC_Msg_OperatorIsTmp(P, JB_LUB[1544]) or SC_Msg_OperatorIsTmp(P, JB_LUB[1798])) {
				JB_Decr(P);
				JB_SafeDecr(Msg);
				return Msg;
			}
		}
		JB_SetRef(Msg, P);
		JB_Decr(P);
	};
	JB_Decr(Msg);
	return nil;
}

bool SC_Msg_CollectOneParam(Message* Self, SCFunction* Func, SCNode* Recv, SCClass* Cls) {
	if ((Func->IsAssigns == 2) and JB_Tree_IsLast(Self)) {
		if ((!Cls)) {
			if (true) {
				JB_Msg_SyntaxExpect(Self, JB_LUB[756]);
			}
		}
		 else {
			Func->IsAssigns = 3;
			if (SC_Class_IsDataTypeOrFP(Cls)) {
				(JB_Ring_NextSibSet(Self, JB_Msg_Copy(Self, nil)));
			}
			SC_Msg_AddValue(Self, Func);
		}
	}
	if ((JB_Msg_EqualsSyx(Self, JB_SyxItem, false)) and (JB_Msg_SyntaxEquals(((Message*)JB_Ring_First(Self)), JB_LUB[1497], false))) {
		Self = ((Message*)JB_Ring_Last(Self));
		Func->IsAssigns = 1;
		SC_Msg_AddValue(Self, Func);
	}
	if ((!JB_Msg_Expect(Self, JB_SyxDecl, nil))) {
		return nil;
	}
	SCDecl* Dcl = SC_Msg_CollectDecl(Self, Func, Recv, kSC__DeclMode_FuncParam, Cls, Func);
	if ((!Dcl)) {
		return nil;
	}
	if (SC_Msg_OperatorIsThing(Dcl->Default, JB_LUB[1810])) {
		Dcl->NilDeclared = kSC__NilState_Optional;
	}
	JB_Array_SyntaxAppend(Func->Args, Dcl);
	(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_DataConst, (!true)));
	if (JB_Str_Exists(Dcl->Name)) {
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Param, true));
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Altered, (!true)));
	}
	 else {
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Return, true));
	}
	return true;
}

JB_String* SC_Msg_CollectUsage(Message* Self) {
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(Fs, JB_LUB[1354]);
	{
		Message* Ch = JB_Incr(((Message*)JB_Ring_First(Self)));
		while (Ch) {
			Message* _Nf2 = JB_Incr((((Message*)JB_Ring_NextSib(Ch))));
			if (JB_Msg_Expect(Ch, JB_SyxDecl, nil)) {
				if ((!JB_Tree_IsFirst(Ch))) {
					JB_FS_AppendString(Fs, JB_LUB[107]);
				}
				Message* Name = JB_Incr(SC_Msg_DeclName(Ch));
				Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(Ch)));
				bool Optional = ((JB_Msg_EqualsSyx(_tmPf3, JB_SyxRel, false)));
				JB_Decr(_tmPf3);
				if (Optional) {
					JB_FS_AppendByte(Fs, '[');
				}
				Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(Ch)));
				Message* Ty = JB_Incr(_tmPf4);
				JB_Decr(_tmPf4);
				JB_FS_SyntaxAppend(Fs, Name);
				JB_Decr(Name);
				Syntax Tyfn = Ty->Func;
				if (Tyfn == JB_SyxArr) {
					JB_SetRef(Ty, ((Message*)JB_Ring_First(Ty)));
				}
				JB_String* Type = JB_Incr(JB_Msg_Name(Ty));
				JB_Decr(Ty);
				if (JB_Str_ContainsString(Type, JB_LUB[1650])) {
					JB_SetRef(Type, JB_LUB[1651]);
				}
				 else if ((!JB_Str_Equals(Type, JB_LUB[1968], true))) {
					//;
					JB_FS_AppendString(Fs, JB_LUB[121]);
					JB_FS_AppendString(Fs, Type);
					JB_FS_AppendByte(Fs, ')');
					//;
				}
				JB_Decr(Type);
				if (Optional) {
					JB_FS_AppendByte(Fs, ']');
				}
				if (Tyfn == JB_SyxArr) {
					JB_FS_AppendString(Fs, JB_LUB[160]);
				}
			}
			JB_SetRef(Ch, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(Ch);
		;
	}
	;
	JB_String* _tmPf5 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

Message* JB_Msg_ConfArg(Message* Self) {
	if ((JB_Msg_EqualsSyx(Self, JB_SyxArg, false)) or (Self == nil)) {
		return Self;
	}
	Message* W = ((Message*)JB_Ternary((JB_Msg_EqualsSyx(Self, JB_SyxTmp, false)), ((Message*)JB_Ring_Last(Self)), ((Message*)JB_Ring_NextSib(Self))));
	if (JB_Msg_EqualsSyx(W, JB_SyxArg, false)) {
		return W;
	}
	return nil;
}

void SC_Msg_ConfTake(Message* Self, Message* Dest, JB_String* Name) {
	Message* F = JB_Msg_GetConf(Self, Name, false);
	if (F) {
		JB_Tree_TakeAllFrom(Dest, F);
		JB_Tree_Remove(((Message*)JB_Ring_Parent(F)));
	}
}

Message* SC_Msg_ConstantExpandSub(Message* Self) {
	Message* Rz = nil;
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
	{
		Message* Item = JB_Incr(((Message*)JB_Ring_First(Self)));
		while (Item) {
			Message* _Nf2 = JB_Incr((((Message*)JB_Ring_NextSib(Item))));
			if (Rz) {
				Message* _tmPf3 = JB_Incr(JB_Msg_Copy(Item, nil));
				JB_SetRef(Rz, SC_NewRel(Rz, _tmPf3, JB_LUB[2077]));
				JB_Decr(_tmPf3);
			}
			 else {
				JB_SetRef(Rz, JB_Msg_Copy(Item, nil));
			}
			JB_SetRef(Item, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(Item);
		;
	}
	;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Msg_ConstIntValue(Message* Self, SCNode* Name_space, int64* V) {
	if (SC_Msg_ConstIntValueSub(Self, Name_space, V)) {
		return true;
	}
	SCDecl* T = SC_TypeOfExpr(Self, Name_space, nil);
	if (T) {
		Message* D = T->Default;
		if (D) {
			return SC_Msg_ConstIntValueSub(D, Name_space, V);
		}
	}
	return false;
}

bool SC_Msg_ConstIntValueSub(Message* Self, SCNode* Name_space, int64* V) {
	Message* S = Self;
	while (JB_Msg_EqualsSyx(S, JB_SyxBra, false)) {
		S = ((Message*)JB_Ring_First(S));
	};
	if (JB_Msg_EqualsSyx(S, JB_SyxNum, false)) {
		(*V) = JB_Msg_Int(S, 0);
		return true;
	}
	if (((bool)JB_SyxThg) and JB_Str_MidEquals(S->Name, 0, JB_LUB[1981], false)) {
		SyntaxObj* Find = ((SyntaxObj*)JB_Dict_ValueLower(JB__SyxDict_, JB_Str_Range(S->Name, (3), JB_int__Max())));
		if (Find) {
			(*V) = ((int64)Find->ID);
			JB_Msg_BecomeStr(S, JB_SyxNum, JB_int64_Render(((*V)), nil));
			return true;
		}
	}
	return false;
}

Message* JB_Msg_ConstructorCopy(Message* Self, Message* Other) {
	if (Self == nil) {
		Self = ((Message*)JB_NewClass(&MessageData));
	}
	JB_Ring_Constructor0(Self);
	Self->Position = Other->Position;
	JB_String* _tmPf1 = Other->Name;
	Self->Name = JB_Incr(_tmPf1);
	Self->Func = Other->Func;
	JB_Object* _tmPf0 = Other->Obj;
	Self->Obj = JB_Incr(_tmPf0);
	Self->Indent = Other->Indent;
	Self->Flags = (Other->Flags | JB__Tk_Using.Flags);
	Self->RangeLength = Other->RangeLength;
	Self->Tag = Other->Tag;
	return Self;
}

Message* JB_Msg_ConstructorEmpty(Message* Self) {
	if (Self == nil) {
		Self = ((Message*)JB_NewClass(&MessageData));
	}
	JB_Ring_Constructor0(Self);
	JB_StringC* _tmPf0 = JB_LUB[0];
	Self->Name = JB_Incr(_tmPf0);
	Self->Obj = nil;
	Self->Indent = 0;
	Self->Func = JB_SyxArg;
	Self->Position = JB__Tk_Using.Position;
	Self->Flags = JB__Tk_Using.Flags;
	Self->RangeLength = JB__Tk_Using.Length;
	Self->Tag = JB__Tk_Using.Tag;
	return Self;
}

Message* JB_Msg_ConstructorNormal(Message* Self, Syntax Func, JB_String* Name) {
	if (Self == nil) {
		Self = ((Message*)JB_NewClass(&MessageData));
	}
	JB_Ring_Constructor0(Self);
	Self->Obj = nil;
	Self->Indent = 0;
	Self->Name = JB_Incr(Name);
	Self->Func = Func;
	Self->Position = JB__Tk_Using.Position;
	Self->Flags = JB__Tk_Using.Flags;
	Self->RangeLength = JB__Tk_Using.Length;
	Self->Tag = JB__Tk_Using.Tag;
	return Self;
}

Message* JB_Msg_ConstructorRange(Message* Self, Message* Parent, Syntax Func, int BytePos, JB_String* Name, int RangeLength) {
	if (Self == nil) {
		Self = ((Message*)JB_NewClass(&MessageData));
	}
	JB_Ring_Constructor(Self, Parent);
	Self->Obj = nil;
	Self->Indent = 0;
	Self->Name = JB_Incr(Name);
	Self->Position = BytePos;
	Self->Func = Func;
	Self->RangeLength = RangeLength;
	Self->Flags = JB__Tk_Using.Flags;
	Self->Tag = JB__Tk_Using.Tag;
	return Self;
}

void SC_Msg_ConstructorAddNil(Message* Self, bool Isdot) {
	if (Isdot) {
		Message* P = ((Message*)JB_Ring_Parent(Self));
		(JB_Ring_FirstSet(Self, ((Message*)JB_Ring_First(P))));
		Self = P;
	}
	(JB_Ring_FirstSet(Self, SC_Msg_CreateNil(Self)));
}

bool JB_Msg_ContainsInd(Message* Self, Ind P, bool AllowJustAfter) {
	return (Self->Position <= P) and ((JB_Msg_After(Self) + AllowJustAfter) > P);
}

Message* JB_Msg_Copy(Message* Self, Message* Pos_msg) {
	Message* Rz = nil;
	Rz = Pos_msg;
	if ((!Rz)) {
		Rz = Self;
	}
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Rz);
		Rz = JB_Msg_CopySub(Self, Pos_msg);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	return Rz;
}

void SC_Msg_CopyAllAfter(Message* Self, Message* After, Message* Copylayer) {
	Message* Curr = ((Message*)JB_Ring_NextSib(Self));
	while (Curr) {
		Message* Cpy = SC_Msg_LayerWipeCopy(Curr, Copylayer);
		(JB_Ring_NextSibSet(After, Cpy));
		After = Cpy;
		Curr = ((Message*)JB_Ring_NextSib(Curr));
	};
}

void SC_Msg_CopyAllAfterBefore(Message* Self, Message* Before, Message* Copylayer) {
	Message* Exp = ((Message*)JB_Ring_NextSib(Self));
	while (Exp) {
		(JB_Ring_PrevSibSet(Before, SC_Msg_LayerWipeCopy(Exp, Copylayer)));
		Exp = ((Message*)JB_Ring_NextSib(Exp));
	};
}

void SC_Msg_CopyAllAfterInto(Message* Self, Message* Into, Message* Copylayer) {
	Message* Curr = ((Message*)JB_Ring_NextSib(Self));
	while (Curr) {
		JB_Tree_SyntaxAppend(Into, JB_Msg_Copy(Curr, Copylayer));
		Curr = ((Message*)JB_Ring_NextSib(Curr));
	};
}

void SC_Msg_CopyAllBefore(Message* Self, Message* Before, Message* Copylayer) {
	Message* Curr = ((Message*)JB_Ring_PrevSib(Self));
	while (Curr) {
		Message* Cpy = JB_Msg_Copy(Curr, Copylayer);
		(JB_Ring_PrevSibSet(Before, Cpy));
		Before = Cpy;
		Curr = ((Message*)JB_Ring_PrevSib(Curr));
	};
}

void SC_Msg_CopyAllBeforeInto(Message* Self, Message* Into, Message* Copylayer) {
	Message* Curr = ((Message*)JB_Ring_PrevSib(Self));
	while (Curr) {
		(JB_Ring_FirstSet(Into, JB_Msg_Copy(Curr, Copylayer)));
		Curr = ((Message*)JB_Ring_PrevSib(Curr));
	};
}

void SC_Msg_CopyAllInto(Message* Self, Message* J, bool Wipe) {
	{
		Message* C = ((Message*)JB_Ring_First(Self));
		while (C) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(C)));
			JB_Tree_SyntaxAppend(J, JB_Msg_Copy(C, J));
			C = _Nf1;
		};
		;
	};
}

JB_String* JB_Msg_CopyID(Message* Self) {
	return JB_LUB[0];
}

Message* JB_Msg_CopySub(Message* Self, Message* P) {
	Message* Rz = nil;
	Rz = JB_Msg_ConstructorCopy(nil, Self);
	if (P) {
		Rz->Position = P->Position;
		Rz->RangeLength = P->RangeLength;
	}
	{
		Message* V = ((Message*)JB_Ring_First(Self));
		while (V) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(V)));
			JB_Tree_SyntaxAppend(Rz, JB_Msg_CopySub(V, P));
			V = _Nf1;
		};
		;
	}
	;
	return Rz;
}

JB_String* SC_Msg_Cpp_Wrapper(Message* Self) {
	if (Self) {
		if (JB_Msg_EqualsSyx(Self, JB_SyxBra, false)) {
			return JB_Msg_FirstName(Self);
		}
		return Self->Name;
	}
	return JB_LUB[0];
}

Message* SC_Msg_CreateNil(Message* Self) {
	Message* Rz = nil;
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
	JB_SetRef(Rz, (JB_Syx_Msg(JB_SyxThg, JB_LUB[1810])));
	JB_SetRef(Rz->Obj, JB_TypeNil);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Msg_CreateOwnBlock(Message* Self) {
	Message* Rz = nil;
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
	Message* Bra = JB_Incr(JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
	JB_SetRef(Bra->Obj, Self->Obj);
	JB_SetRef(Rz, JB_Msg_Msg(Bra, JB_SyxArg, JB_LUB[0]));
	JB_FreeIfDead(SC_Msg_ReplaceWith(Self, Bra));
	SCArg* NewObj = JB_Incr(SC_Msg_SCArg(Rz, nil, nil));
	if (NewObj) {
		JB_SetRef(NewObj->TmpMovedOutFor, Self);
		(SC_Msg_StatementExprSet(Bra, NewObj));
	}
	JB_Decr(Bra);
	JB_Decr(NewObj);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Msg_CutifyCopy(Message* Self) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Msg_ConstructorCopy(nil, Self));
	{
		Message* V = JB_Incr(((Message*)JB_Ring_First(Self)));
		while (V) {
			Message* _Nf1 = JB_Incr((((Message*)JB_Ring_NextSib(V))));
			if (JB_Msg_EqualsSyx(V, JB_SyxArg, false)) {
				0;
			}
			 else if (SC_Msg_IsReffer(V)) {
				Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(V)));
				Message* Vll = JB_Incr(((Message*)JB_Ring_Last(_tmPf2)));
				JB_Decr(_tmPf2);
				if (Vll) {
					Message* _tmPf3 = JB_Incr(SC_Msg_CutifyCopy(Vll));
					JB_Tree_SyntaxAppend(Rz, _tmPf3);
					JB_Decr(_tmPf3);
				}
				 else {
					debugger;
				}
				JB_Decr(Vll);
			}
			 else {
				Message* _tmPf4 = JB_Incr(SC_Msg_CutifyCopy(V));
				JB_Tree_SyntaxAppend(Rz, _tmPf4);
				JB_Decr(_tmPf4);
			}
			JB_SetRef(V, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(V);
		;
	}
	;
	SCFunction* Fn = JB_Incr(SC_Msg_MsgFunc(Rz));
	if (Fn) {
		SCClass* Cls = JB_Incr(Fn->Cls);
		JB_String* Modname = JB_Incr(JB_LUB[0]);
		SCNode* Space = JB_Incr(Fn->Parent);
		if (JB_Object_FastIsa(Space, &SCModuleData)) {
			JB_SetRef(Modname, ((SCModule*)Space)->Name);
		}
		if (((bool)Cls) or JB_Str_Exists(Modname)) {
			Message* Name = JB_Incr(((Message*)JB_Ring_First(Rz)));
			if (JB_Msg_EqualsSyx(Name, JB_SyxThg, false)) {
				Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_NextSib(Name)));
				Message* Prm = JB_Incr(_tmPf5);
				JB_Decr(_tmPf5);
				JB_Msg_BecomeStr(Rz, JB_SyxDot, Fn->Name);
				if (Cls) {
					Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_First(Prm)));
					(JB_Ring_FirstSet(Rz, _tmPf6));
					JB_Decr(_tmPf6);
				}
				 else if (Space != SC__Comp_program) {
					Message* Mod = JB_Incr(JB_Syx_Msg(JB_SyxThg, Modname));
					JB_SetRef(Mod->Obj, Space);
					(JB_Ring_FirstSet(Rz, Mod));
					JB_Decr(Mod);
				}
				if ((!JB_Ring_HasChildren(Prm))) {
					Prm->Func = JB_SyxEmb;
				}
				JB_Decr(Prm);
				JB_Tree_Remove(Name);
			}
			JB_Decr(Name);
		}
		JB_Decr(Cls);
		JB_Decr(Modname);
		JB_Decr(Space);
	}
	JB_Decr(Fn);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Msg_DclExp(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxDecl, false)) {
		return ((Message*)JB_Tree_Second(Self));
	}
	return Self;
}

void JB_Msg_Decl__(Message* Self, FastString* Fs) {
	Message* Ch = JB_Incr(((Message*)JB_Ring_First(Self)));
	if ((!Ch)) {
		JB_Decr(Ch);
		return;
	}
	JB_FS_AppendByte(Fs, '|');
	JB_FS_SyntaxAppend(Fs, Ch);
	JB_FS_AppendByte(Fs, '|');
	JB_SetRef(Ch, ((Message*)JB_Ring_NextSib(Ch)));
	while (Ch) {
		JB_FS_AppendByte(Fs, ' ');
		JB_FS_SyntaxAppend(Fs, Ch);
		JB_SetRef(Ch, ((Message*)JB_Ring_NextSib(Ch)));
	};
	JB_Decr(Ch);
}

Message* SC_Msg_DeclName(Message* Self) {
	Message* Dcl = SC_Msg_DclExp(Self);
	if (JB_Msg_EqualsSyx(Dcl, JB_SyxRel, false)) {
		return JB_Msg_NeedSyx(Dcl, JB_SyxThg);
	}
	if (JB_Msg_EqualsSyx(Dcl, JB_SyxThg, false)) {
		return Dcl;
	}
	if (JB_Msg_EqualsSyx(Dcl, JB_SyxEmb, false)) {
		JB_Msg_SyntaxExpect(Self, nil);
		return nil;
	}
	return nil;
}

bool JB_Msg_DeepEquals(Message* Self, Message* B, bool Aware) {
	Message* A = Self;
	Message* A2 = ((Message*)JB_Ring_FlatAfter(Self));
	Message* B2 = ((Message*)JB_Ring_FlatAfter(B));
	while (true) {
		bool ADone = A == A2;
		bool BDone = B == B2;
		if (ADone and BDone) {
			return true;
		}
		if ((ADone != BDone) or ((!JB_Msg_ShallowEquals(A, B, Aware)))) {
			return false;
		}
		A = ((Message*)JB_Ring_FlatNext0(A));
		B = ((Message*)JB_Ring_FlatNext0(B));
	};
}

Message* SC_Msg_Deepest(Message* Self, Syntax Tmp, JB_String* Name) {
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			Message* Best = SC_Msg_Deepest(Ch, Tmp, Name);
			if (Best) {
				return Best;
			}
			Ch = _Nf1;
		};
		;
	}
	;
	if ((JB_Msg_EqualsSyx(Self, JB_SyxTmp, false)) and (JB_Msg_SyntaxEquals(Self, Name, false))) {
		return Self;
	}
	return nil;
}

int SC_Msg_DeprecatedClassOption(Message* Self, JB_String* Name, JB_String* Kind) {
	Message* Place = JB_Incr(JB_Msg_FindSyxName(Self, JB_SyxTmp, Name, false));
	if ((!Place)) {
		JB_Decr(Place);
		return 0;
	}
	int Num = 1;
	if ((!JB_Str_Equals(Kind, JB_LUB[214], false))) {
		Message* Ch = JB_Incr(((Message*)JB_Ring_First(Place)));
		if ((!(((bool)Ch) and (JB_Msg_Expect(Ch, JB_SyxThg, nil) and (JB_Msg_SyntaxEquals(Ch, Kind, true)))))) {
			JB_Decr(Ch);
			JB_Decr(Place);
			return 0;
		}
		Message* Num_msg = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
		JB_Decr(Ch);
		if (Num_msg) {
			JB_Msg_Expect(Num_msg, JB_SyxNum, nil);
			Num = JB_Msg_Int(Num_msg, 0);
		}
		JB_Decr(Num_msg);
	}
	JB_Tree_Remove(Place);
	JB_Decr(Place);
	return Num;
}

void JB_Msg_Destructor(Message* Self) {
	JB_Clear(Self->Name);
	JB_Clear(Self->Obj);
	JB_Ring_Destructor(Self);
}

Dictionary* JB_Msg_Dict(Message* Self, bool DoCount) {
	Dictionary* Rz = ((Dictionary*)nil);
	Rz = JB_Dict_Constructor(nil);
	int I = 0;
	{
		Message* S = ((Message*)JB_Ring_First(Self));
		while (S) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(S)));
			(JB_Dict_ValueSet(Rz, S->Name, S));
			if (DoCount) {
				S->Position = I++;
			}
			S = _Nf1;
		};
		;
	}
	;
	return Rz;
}

bool SC_Msg_DoesAnything(Message* Self) {
	if (Self) {
		if ((!((!JB_Msg_EqualsSyx(Self, JB_SyxThg, false)) and ((!JB_Msg_EqualsSyx(Self, JB_SyxNum, false)) and ((!JB_Msg_EqualsSyx(Self, JB_SyxStr, false)) and (!JB_Msg_EqualsSyx(Self, JB_SyxChar, false))))))) {
			return nil;
		}
		return true;
	}
	return false;
}

void JB_Msg_Dot__(Message* Self, FastString* Fs) {
	Message* Ch = JB_Incr(((Message*)JB_Ring_First(Self)));
	if (Ch) {
		JB_FS_SyntaxAppend(Fs, Ch);
	}
	JB_FS_AppendByte(Fs, '.');
	JB_FS_AppendString(Fs, Self->Name);
	if (Ch) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
		JB_FS_SyntaxAppend(Fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Ch);
}

SCDecl* SC_Msg_DotMustBeProperty(Message* Self) {
	JB_Object* Obj = Self->Obj;
	if (JB_Object_OperatorMustBe(Obj, &SCDeclData)) {
		if (JB_Str_Exists(((SCDecl*)Obj)->Name)) {
			return ((SCDecl*)Obj);
		}
		SCDecl* Backup = ((SCDecl*)JB_Object_FastAs(((Message*)JB_Ring_Last(Self))->Obj, &SCDeclData));
		if (Backup) {
			if (JB_Str_Exists(Backup->Name)) {
				return Backup;
			}
		}
		if (true) {
			JB_Msg_SyntaxExpect(Self, JB_LUB[1018]);
		}
	}
	return nil;
}

SCObject* SC_Msg_DotSpace(Message* Self, SCNode* Name_space) {
	SCObject* Rz = nil;
	if ((!JB_Msg_EqualsSyx(Self, JB_SyxThg, false))) {
		return SC_TypeOfExprModulesOK(Self, Name_space, nil);
	}
	Rz = SC_Base_LookUpVar(Name_space, Self->Name, Self, nil);
	JB_SetRef(Self->Obj, Rz);
	return Rz;
}

DotUseType SC_Msg_DotType(Message* Self) {
	if (Self->Func == JB_SyxDot) {
		JB_Object* D = Self->Obj;
		if (JB_Object_FastIsa(D, &SCDeclData)) {
			return (SC_Decl_SyntaxIs(((SCDecl*)D), kSC__SCDeclInfo_Property)) * ((bool)kSC__DotUseType_Property);
		}
	}
	return 0;
}

void JB_Msg_Dummy(Message* Self, FastString* Fs) {
}

void SC_Msg_ElseNeverFires(Message* Self) {
	Message* Arg = ((Message*)JB_Ring_NextSib(Self));
	Message* After = ((Message*)JB_Ring_NextSib(Arg));
	if ((!After)) {
		Message* P = ((Message*)JB_Ring_Parent(Self));
		if (P) {
			SC_Msg_SafeRemove(P, JB_SyxSheb);
		}
		return;
	}
	if (JB_Msg_EqualsSyx(Arg, JB_SyxArg, false)) {
		JB_Tree_Clear(Arg);
		Arg->Tag = (Arg->Tag | kSC__SCBlockage_Return);
	}
	JB_FreeIfDead(SC_Msg_NeedBra(Self));
}

void JB_Msg_Emb__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
	if ((!JB_Ring_HasChildren(Self))) {
		return;
	}
	JB_Msg_RenderWithSpaces(Self, Fs, nil);
}

void JB_Msg_ERel__(Message* Self, FastString* Fs) {
	Message* Ch = JB_Incr(((Message*)JB_Ring_First(Self)));
	if ((!Ch)) {
		JB_Decr(Ch);
		return;
	}
	JB_FS_SyntaxAppend(Fs, Ch);
	JB_FS_AppendByte(Fs, ' ');
	JB_SetRef(Ch, ((Message*)JB_Ring_NextSib(Ch)));
	if ((!Ch)) {
		JB_Decr(Ch);
		return;
	}
	JB_FS_SyntaxAppend(Fs, Ch);
	JB_FS_AppendString(Fs, JB_LUB[587]);
	JB_SetRef(Ch, ((Message*)JB_Ring_NextSib(Ch)));
	if ((!Ch)) {
		JB_Decr(Ch);
		return;
	}
	JB_FS_SyntaxAppend(Fs, Ch);
	JB_Decr(Ch);
}

bool JB_Msg_Expect(Message* Self, Syntax Type, JB_String* Name) {
	if ((!Self)) {
		return nil;
	}
	if ((!Type) or (Self->Func == Type)) {
		if ((Name == nil) or ((JB_Str_Equals(Self->Name, Name, true)))) {
			return true;
		}
	}
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(Fs, JB_LUB[845]);
	if (Type) {
		JB_String* _tmPf0 = JB_Incr(JB_Syx_LongName(Type));
		JB_FS_AppendString(Fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_FS_MsgErrorName(Fs, Name);
	JB_FS_AppendString(Fs, JB_LUB[304]);
	JB_String* _tmPf1 = JB_Incr(JB_Syx_LongName(Self->Func));
	JB_FS_AppendString(Fs, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_MsgErrorName(Fs, Self->Name);
	if (true) {
		JB_String* _tmPf2 = JB_Incr(JB_FS_SyntaxCast(Fs));
		JB_Msg_SyntaxExpect(Self, _tmPf2);
		JB_Decr(_tmPf2);
	}
	JB_Decr(Fs);
	return false;
}

bool SC_Msg_ExpectClass(Message* Self, SCDecl* Slf, SCClass* Cls) {
	return ((bool)JB_FreeIfDead(SC_Decl_ExpectMatch(Slf, Cls->TypeNormal, 0, Self, Self)));
}

void SC_Msg_ExpectEmpty(Message* Self) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if (F) {
		if (true) {
			JB_Msg_SyntaxExpect(F, nil);
		}
	}
}

bool SC_Msg_ExpectInt(Message* Self, SCDecl* Type) {
	if ((!JB_TC_IsInt(Type->Type->TypeInfo))) {
		JB_Msg_SyntaxExpect(Self, JB_LUB[853]);
		return nil;
	}
	return true;
}

bool JB_Msg_ExpectLast(Message* Self, JB_String* Err) {
	if (Self) {
		Message* N = ((Message*)JB_Ring_NextSib(Self));
		if (N) {
			JB_Msg_SyntaxExpect(N, Err);
		}
		 else {
			return true;
		}
	}
	return false;
}

bool SC_Msg_ExpectMatch(Message* Self, SCNode* Name_space, SCClass* With) {
	SCDecl* T = SC_TypeOfExprNeeded(Self, Name_space);
	if (T) {
		return SC_Msg_ExpectClass(Self, T, With);
	}
	return false;
}

Message* SC_Msg_ExpectParamsTransform(Message* Self, int P, Message* Errnode, JB_String* Type) {
	JB_Incr(Type);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Errnode);
	Message* L = JB_Incr(Self);
	Message* On = JB_Incr(L);
	if ((!JB_Str_Equals(Type, JB_LUB[2043], false))) {
		JB_SetRef(Type, JB_LUB[1635]);
	}
	if ((!L)) {
		JB_SetRef(On, JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[1810]));
	}
	 else if ((JB_Msg_EqualsSyx(L, JB_SyxList, false)) or ((JB_Msg_EqualsSyx(L, JB_SyxBra, false)) or (JB_Msg_EqualsSyx(L, JB_SyxPrm, false)))) {
		L->Func = JB_SyxPrm;
		JB_SetRef(On, ((Message*)JB_Ring_First(L)));
	}
	 else {
		JB_SetRef(L, nil);
	}
	Message* L2 = JB_Incr(L);
	if ((!JB_Msg_EqualsSyx(L, JB_SyxPrm, false))) {
		JB_SetRef(L2, JB_Syx_Msg(JB_SyxPrm, JB_LUB[0]));
		JB_Tree_SyntaxAppend(L2, L);
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1976], Type));
	JB_Decr(Type);
	Message* Tmp = JB_Incr(JB_Syx_OperatorPlus(JB_SyxDot, (_tmPf1)));
	JB_Decr(_tmPf1);
	JB_Tree_SyntaxAppend(Tmp, On);
	JB_Decr(On);
	JB_Tree_SyntaxAppend(Tmp, L2);
	JB_Decr(L2);
	JB_SetRef(L, Tmp);
	JB_Decr(Tmp);
	L->Position = P;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_SafeDecr(L);
	JB_MsgPos_Destructor((&_usingf0));
	return L;
}

bool JB_Msg_ExpectString(Message* Self) {
	if (JB_Msg_IsString(Self)) {
		return true;
	}
	if (true) {
		JB_Msg_SyntaxExpect(Self, JB_LUB[1092]);
	}
	return false;
}

SCFunction* SC_Msg_ExpFunc(Message* Self) {
	Message* It = ((Message*)JB_Ring_Last(SC_Msg_UnBra(Self)));
	if (It) {
		JB_Object* Fn = It->Obj;
		if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
			return ((SCFunction*)Fn);
		}
	}
	return nil;
}

void JB_Msg_Export(Message* Self, FastString* Fs) {
	FP_fpMsgRender Fn = (JB_Syx_ExportAddr(Self->Func));
	(Fn)(Self, Fs);
}

Message* SC_Msg_FailOrCopy(Message* Self, Message* P) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxThg, false)) {
		return JB_Msg_Copy(Self, nil);
	}
	if (true) {
		JB_Msg_SyntaxExpect(P, JB_LUB[1131]);
	}
	return nil;
}

Message* SC_Msg_FalsifyNil(Message* Self) {
	SCDecl* Ret = SC__Func_CurrFunc->ReturnType;
	if (((bool)Ret) and SC_Decl_IsNormal(Ret)) {
		return SC_Class_Falsify(Ret->Type, Self);
	}
	Self->Func = JB_SyxThg;
	JB_SetRef(Self->Obj, JB_TypeNil);
	return nil;
}

SCDecl* SC_Msg_FastDecl(Message* Self) {
	SCDecl* Obj = ((SCDecl*)Self->Obj);
	if (Obj) {
		JB_Object* L = Obj->IsLookupOnly;
		if ((!L)) {
			return Obj;
		}
		if (JB_Object_FastIsa(L, &SCDeclData)) {
			return ((SCDecl*)L);
		}
		return Obj;
	}
	if (true) {
		JB_Msg_SyntaxExpect(Self, JB_LUB[776]);
	}
	return JB_TypeVoid;
}

void JB_Msg_File__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
	Self->Indent++;
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			JB_FS_LineIndent(Fs);
			JB_FS_SyntaxAppend(Fs, Ch);
			Ch = _Nf1;
		};
		;
	}
	;
	Self->Indent--;
}

JB_String* SC_Msg_FileLocation(Message* Self) {
	SCFile* _tmPf0 = SC_Msg_SCFile(Self);
	if ((!JB_File_SyntaxCast(_tmPf0))) {
		return JB_LUB[0];
	}
	return JB_File_Path(_tmPf0);
}

JB_String* JB_Msg_FilePath(Message* Self) {
	JB_Object* O = JB_ObjLayer(Self)->Obj;
	if ((!false) and (JB_Object_Isa(O, &JB_FileData))) {
		return JB_File_Path(((JB_File*)O));
	}
	if (JB_Object_Isa(O, &JB_StringData)) {
		return ((JB_String*)O);
	}
	return JB_LUB[0];
}

Message* JB_Msg_FindSyx(Message* Self, Syntax S) {
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if (JB_Msg_EqualsSyx(Ch, S, false)) {
				return Ch;
			}
			Ch = _Nf1;
		};
		;
	}
	;
	return nil;
}

Message* JB_Msg_FindSyxName(Message* Self, Syntax S, JB_String* Name, bool Err) {
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if ((JB_Msg_EqualsSyx(Ch, S, false)) and (JB_Msg_SyntaxEquals(Ch, Name, true))) {
				return Ch;
			}
			Ch = _Nf1;
		};
		;
	}
	;
	if (Err) {
		JB_Msg_CantFind(Self, S, Name, nil);
	}
	return nil;
}

Message* JB_Msg_FindName(Message* Self, JB_String* Name) {
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if (JB_Msg_SyntaxEquals(Ch, Name, true)) {
				return Ch;
			}
			Ch = _Nf1;
		};
		;
	}
	;
	return nil;
}

Array* JB_Msg_FindAll(Message* Self, Syntax Fn, JB_String* Name) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	{
		Message* S = ((Message*)JB_Ring_First(Self));
		while (S) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(S)));
			if ((S->Func == Fn) and (JB_Str_Equals(S->Name, Name, false))) {
				JB_Array_SyntaxAppend(Rz, S);
			}
			S = _Nf1;
		};
		;
	}
	;
	return Rz;
}

JB_String* SC_Msg_FindAndRemove(Message* Self, JB_String* Name, bool NothingOK, bool IsClass) {
	Message* _tmPf0 = JB_Incr(SC_Msg_FindAndRemoveSub(Self, Name, NothingOK, IsClass));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return JB_LUB[0];
	}
	JB_String* _tmPf1 = JB_Incr(_tmPf0->Name);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* SC_Msg_FindAndRemove2(Message* Self, Message* Place, bool NothingOK, bool IsClass) {
	JB_Tree_Remove(Place);
	Message* Ch = JB_Incr(((Message*)JB_Ring_First(Place)));
	if (NothingOK and (!Ch)) {
		JB_SetRef(Place->Name, JB_LUB[0]);
		JB_Decr(Ch);
		return Place;
	}
	if ((JB_Msg_EqualsSyx(Ch, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(Ch, JB_SyxBra, false))) {
		if (IsClass) {
			Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(Self)));
			if ((!SC_Msg_OperatorIsTmp(_tmPf0, JB_LUB[1758]))) {
				JB_Msg_SyntaxExpect(Ch, JB_LUB[1147]);
				JB_Decr(_tmPf0);
				JB_Decr(Ch);
				return nil;
			}
			JB_Decr(_tmPf0);
		}
		JB_SafeDecr(Ch);
		return Ch;
	}
	JB_Decr(Ch);
	JB_FreeIfDead(JB_Msg_NeedSyx(Place, JB_SyxThg));
	return nil;
}

Message* SC_Msg_FindAndRemoveSub(Message* Self, JB_String* Name, bool NothingOK, bool IsClass) {
	Message* Place = JB_Incr(JB_Msg_FindSyxName(Self, JB_SyxTmp, Name, false));
	if (Place) {
		Message* _tmPf0 = JB_Incr(SC_Msg_FindAndRemove2(Self, Place, NothingOK, IsClass));
		JB_Decr(Place);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(Place);
	return nil;
}

Message* SC_Msg_FindDestructor(Message* Self) {
	{
		Message* C = ((Message*)JB_Ring_First(Self));
		while (C) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(C)));
			if (JB_Msg_EqualsSyx(C, JB_SyxFunc, false)) {
				Message* Cl = ((Message*)JB_Ring_Last(C));
				if (Cl) {
					if (SC_Func_SyntaxIs(SC_Msg_AsFunc(Cl), kSC__FunctionType_Destructor)) {
						return C;
					}
				}
			}
			C = _Nf1;
		};
		;
	}
	;
	return nil;
}

Message* JB_Msg_FindNested(Message* Self, Syntax Fn, JB_String* Name, bool Err) {
	{
		Message* Curr = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while (((bool)(Curr)) and (Curr != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(Curr)));
			if ((JB_Msg_EqualsSyx(Curr, Fn, false)) or (Fn == nil)) {
				if ((Name == nil) or (JB_Msg_SyntaxEquals(Curr, Name, true))) {
					return Curr;
				}
			}
			Curr = _N_f2;
		};
		;
	}
	;
	if (Err) {
		JB_Msg_CantFind(Self, Fn, Name, nil);
	}
	return nil;
}

Message* JB_Msg_FindNotInserted(Message* Self) {
	{
		Message* C = Self;
		while (C) {
			if (C->Position > -1) {
				return C;
			}
			C = ((Message*)JB_Ring_Parent(C));
		};
		;
	}
	;
	return Self;
}

Message* SC_Msg_FindPos(Message* Self, int Fr, int Len) {
	Message* _tmP0 = JB_Incr(SC_Msg_FindPosSub(Self, Fr, Len, true));
	if ((!_tmP0)) {
		JB_SetRef(_tmP0, SC_Msg_FindPosSub(Self, Fr, Len, false));
	}
	JB_SafeDecr(_tmP0);
	return _tmP0;
}

Message* SC_Msg_FindPosSub(Message* Self, int Fr, int Len, bool Exact) {
	Message* Rz = nil;
	int Strength = 1;
	{
		Message* Ch = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while (((bool)(Ch)) and (Ch != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(Ch)));
			if (Ch->Position == Fr) {
				int CurrStrength = (Ch->RangeLength == Len) + (!Exact);
				if (CurrStrength >= Strength) {
					if (!(JB_Msg_SyntaxIs(Ch, kJB__MsgParseFlags_Inserted))) {
						return SC_Msg_UnBra(Ch);
					}
					Strength = CurrStrength;
					Rz = Ch;
				}
			}
			Ch = _N_f2;
		};
		;
	}
	;
	return Rz;
}

Message* SC_Msg_FindRef(Message* Self, SCFunction* Fn, JB_String* Name) {
	{
		Message* Curr = Self;
		while (Curr) {
			if (JB_Msg_EqualsSyx(Curr, JB_SyxFunc, false)) {
				Message* Prms = ((Message*)JB_Ring_Last(Curr));
				if (((bool)(Prms)) and ((Prms->Obj == Fn) and (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(Prms)), Name)))) {
					return Curr;
				}
			}
			Curr = ((Message*)JB_Ring_NextSib(Curr));
		};
		;
	}
	;
	return nil;
}

Message* SC_Msg_FindShader(Message* Self, JB_String* TypeName) {
	Message* U = JB_Incr(JB_Msg_FindSyxName(Self, JB_SyxTmp, JB_LUB[2005], false));
	if ((!U)) {
		JB_Decr(U);
		return nil;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(U)));
	Message* C = JB_Incr(SC_Msg_ModelType(_tmPf0));
	JB_Decr(_tmPf0);
	if ((!C)) {
		JB_Decr(C);
		JB_Decr(U);
		return nil;
	}
	JB_String* N = JB_Incr(JB_Str_LowerCase(C->Name));
	if (JB_Str_Last(N, 0) == 's') {
		JB_SetRef(N, JB_Str_Range(N, 0, JB_Str_Length(N) - 1));
	}
	JB_String* F = JB_Incr(((JB_StringC*)JB_Dict_ValueStr(SC__SCGame3D_Types, N)));
	JB_Decr(N);
	if ((!JB_Str_Exists(F))) {
		JB_Msg_SyntaxExpect(U, JB_LUB[659]);
		JB_Decr(F);
		JB_Decr(C);
		JB_Decr(U);
		return nil;
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(TypeName, JB_LUB[370]));
	if ((!SC_SCGame3D__NeedShader(_tmPf1))) {
		JB_Decr(_tmPf1);
		JB_Decr(F);
		JB_Decr(C);
		JB_Decr(U);
		return nil;
	}
	JB_Decr(_tmPf1);
	if (JB_Str_Length(F) >= 2) {
		JB_SetRef(F, JB_Str_Range(F, 0, 1));
	}
	 else {
		JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(TypeName, JB_LUB[385]));
		if ((!SC_SCGame3D__NeedShader(_tmPf2))) {
			JB_Decr(_tmPf2);
			JB_Decr(F);
			JB_Decr(C);
			JB_Decr(U);
			return nil;
		}
		JB_Decr(_tmPf2);
	}
	JB_SetRef(C->Name, F);
	JB_Decr(F);
	JB_SetRef(C, ((Message*)JB_Tree_Get(U, 0)));
	JB_Tree_Remove(U);
	JB_Decr(U);
	JB_SafeDecr(C);
	return C;
}

Message* JB_Msg_FindTightest(Message* Self, int Pos, bool Named, bool SamePosition) {
	Message* Rz = nil;
	int Size = JB_int__Max();
	{
		Message* Ch = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while (((bool)(Ch)) and (Ch != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(Ch)));
			u16 R = Ch->RangeLength;
			if ((!R)) {
				0;
			}
			 else if ((JB_Msg_ContainsInd(Ch, Pos, true)) and ((!Named) or (JB_Str_Exists(Ch->Name) or ((JB_Msg_EqualsSyx(Ch, JB_SyxDot, false)) or (JB_Msg_EqualsSyx(Ch, JB_SyxSDot, false)))))) {
				if (SamePosition and (Ch->Position != Pos)) {
					0;
				}
				 else if ((R < Size) or ((Rz != nil) and ((Pos == Rz->Position) and (Pos == JB_Msg_After(Ch))))) {
					Rz = Ch;
					Size = R;
				}
			}
			Ch = _N_f2;
		};
		;
	}
	;
	return Rz;
}

JB_String* JB_Msg_FirstName(Message* Self) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if (F) {
		return F->Name;
	}
	return JB_LUB[0];
}

void SC_Msg_FixElseif(Message* Self) {
	Message* Curr = JB_Incr(((Message*)JB_Ring_NextSib(Self)));
	Message* F = JB_Incr(((Message*)JB_Ring_First(Self)));
	bool Needarg = ((bool)F) and ((!({
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(F)));
		bool _tmPf1 = JB_Msg_EqualsSyx(_tmPf2, JB_SyxArg, false);
		JB_Decr(_tmPf2);
		 _tmPf1;
	})));
	JB_Decr(F);
	while (SC_Msg_OperatorIsTmp(Curr, JB_LUB[1621]) or SC_Msg_OperatorIsTmp(Curr, JB_LUB[1623])) {
		Message* N = JB_Incr(((Message*)JB_Ring_NextSib(Curr)));
		if (Needarg) {
			if (true) {
				MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
				JB_Msg_AppendSyx(Self, JB_SyxArg, JB_LUB[0]);
				Needarg = false;
				JB_MsgPos_SyntaxUsingComplete((&_usingf0));
				JB_MsgPos_Destructor((&_usingf0));
			}
		}
		JB_Tree_SyntaxAppend(Self, Curr);
		JB_SetRef(Curr, N);
		JB_Decr(N);
	};
	JB_Decr(Curr);
}

void SC_Msg_FixErl(Message* Self) {
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(Self)));
	Message* Ch = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
	Message* Opp = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	Message* Last = JB_Incr(((Message*)JB_Ring_NextSib(Opp)));
	JB_String* Name = JB_Incr(Opp->Name);
	if (((JB_Str_Equals(Name, JB_LUB[566], false))) and ((!({
		Message* _tmPf5 = JB_Incr(SC_Msg_NiceParent(Self));
		bool _tmPf4 = JB_Msg_EqualsSyx(_tmPf5, JB_SyxArg, false);
		JB_Decr(_tmPf5);
		 _tmPf4;
	})))) {
		Array* _tmPf1 = JB_Incr((JB_Array_Constructor0(nil)));
		JB_Array_SyntaxAppend(_tmPf1, Ch);
		Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_Last(Self)));
		JB_Array_SyntaxAppend(_tmPf1, _tmPf6);
		JB_Decr(_tmPf6);
		JB_Msg_BecomeMacro(Self, SC__Macros_InitExpand, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else {
		//using;
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Opp);
		while (JB_Msg_OperatorIn(Self, JB_SyxBra)) {
			Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_Parent(Self)));
			JB_FreeIfDead(SC_Msg_ReplaceWith(_tmPf7, Self));
			JB_Decr(_tmPf7);
		};
		bool IsBitOr = ((JB_Str_Equals(Name, JB_LUB[566], false)));
		Self->Func = JB_SyxRel;
		JB_SetRef(Opp->Name, JB_LUB[586]);
		JB_SetRef(Ch, JB_Msg_Copy(Ch, nil));
		if (IsBitOr) {
			Message* New_if = JB_Incr(JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1697]));
			Message* _tmPf9 = JB_Incr(SC_Msg_NeedBra(Ch));
			Message* _tmPf8 = JB_Incr(SC_Msg_WrapWith(_tmPf9, JB_SyxBRel, JB_LUB[214]));
			JB_Decr(_tmPf9);
			JB_Tree_SyntaxAppend(New_if, _tmPf8);
			JB_Decr(_tmPf8);
			(JB_Ring_PrevSibSet(Self, New_if));
			Message* _tmPf10 = JB_Incr(JB_Msg_Msg(New_if, JB_SyxArg, JB_LUB[0]));
			JB_Decr(New_if);
			JB_Tree_SyntaxAppend(_tmPf10, Self);
			JB_Decr(_tmPf10);
		}
		 else {
			if (JB_Msg_EqualsSyx(Last, JB_SyxRel, false)) {
				JB_SetRef(Last, SC_Msg_WrapWith(Last, JB_SyxBra, JB_LUB[0]));
			}
			Message* Rel = JB_Incr(JB_Syx_Msg(JB_SyxRel, JB_LUB[0]));
			(JB_Ring_NextSibSet(Opp, Rel));
			JB_Tree_SyntaxAppend(Rel, Ch);
			JB_FreeIfDead(JB_Msg_Msg(Rel, JB_SyxOpp, Name));
			JB_Tree_SyntaxAppend(Rel, Last);
			JB_Decr(Rel);
		}
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Ch);
	JB_Decr(Opp);
	JB_Decr(Last);
	JB_Decr(Name);
}

void SC_Msg_FixMultiArr(Message* Self) {
	{
		Message* Item = ((Message*)JB_Ring_First(Self));
		while (Item) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Item)));
			Message* Kkey = ((Message*)JB_Ring_First(Item));
			if (JB_Msg_EqualsSyx(Kkey, JB_SyxList, false)) {
				Message* Val = ((Message*)JB_Ring_NextSib(Kkey));
				if (Val) {
					while ((true)) {
						Message* C = ((Message*)JB_Ring_First(Kkey));
						if ((!C)) {
							break;
						}
						Message* I2 = JB_Syx_Msg(JB_SyxItem, JB_LUB[0]);
						JB_Tree_SyntaxAppend(I2, C);
						JB_Tree_SyntaxAppend(I2, JB_Msg_Copy(Val, nil));
						(JB_Ring_PrevSibSet(Item, I2));
					};
				}
				JB_Tree_Remove(Item);
			}
			Item = _Nf1;
		};
		;
	};
}

double JB_Msg_Float(Message* Self) {
	if (Self) {
		return JB_Str_TextDouble(Self->Name, Self);
	}
	return 0.0f;
}

float JB_Msg_Float32(Message* Self) {
	double D = JB_Msg_Float(Self);
	if (fabs(D) > JB_f__max()) {
		JB_Str_SyntaxExpect(JB_LUB[879]);
		return 0;
	}
	return D;
}

void JB_Msg_FSListArg(Message* Self, FastString* Fs, bool AddLine) {
	bool Hasp = ((Message*)JB_Ring_Parent(Self)) != nil;
	Fs->Indent = (Fs->Indent + Hasp);
	AddLine = ((bool)(AddLine | Hasp));
	if (JB_Str_Exists(Self->Name)) {
		AddLine = true;
		JB_FS_LineIndent(Fs);
		JB_FS_AppendByte(Fs, '^');
		JB_FS_AppendQuotedEscape(Fs, Self->Name);
	}
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if (AddLine) {
				JB_FS_LineIndent(Fs);
			}
			JB_FS_SyntaxAppend(Fs, Ch);
			AddLine = true;
			Ch = _Nf1;
		};
		;
	}
	;
	Fs->Indent = (Fs->Indent - Hasp);
	if (Hasp and (JB_FS_Last(Fs, 0) != '\n')) {
		JB_FS_AppendByte(Fs, '\n');
	}
}

void JB_Msg_FSListSep(Message* Self, FastString* Fs, JB_String* Sep) {
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		Message* _firstf2 = Ch;
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if (_firstf2 != Ch) {
				JB_FS_AppendString(Fs, Sep);
			}
			//start;
			JB_FS_SyntaxAppend(Fs, Ch);
			Ch = _Nf1;
		};
		;
	};
}

Message* SC_Msg_FullAfter(Message* Self) {
	Message* P = ((Message*)JB_Ring_Parent(Self));
	Message* N = ((Message*)JB_Ring_NextSib(P));
	while (N) {
		P = N;
		N = ((Message*)JB_Ring_NextSib(P));
	};
	return ((Message*)JB_Ring_FlatAfter(P));
}

void JB_Msg_Func__(Message* Self, FastString* Fs) {
	Message* Ch = JB_Incr(((Message*)JB_Ring_First(Self)));
	if ((!Ch)) {
		JB_Decr(Ch);
		return;
	}
	JB_FS_SyntaxAppend(Fs, Ch);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
	JB_Decr(Ch);
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
}

JB_String* JB_Msg_FuncName(Message* Self) {
	JB_String* _tmPf0 = JB_Incr(JB_Syx_LongName(Self->Func));
	JB_String* _tmPf1 = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int SC_Msg_FuncPos(Message* Self, SCFunction* Fn) {
	{
		Message* Ss = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while (((bool)(Ss)) and (Ss != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(Ss)));
			if (Ss->Obj == Fn) {
				return Ss->Position;
			}
			Ss = _N_f2;
		};
		;
	}
	;
	return Self->Position;
}

void SC_Msg_FuncWrap(Message* Self, Message* Fnc) {
	(JB_Ring_PrevSibSet(Self, Fnc));
	JB_Tree_SyntaxAppend(((Message*)JB_Ring_Last(Fnc)), Self);
}

int SC_Msg_GetAddressOf(Message* Self, SCDecl* Type, bool WasCArray) {
	if ((!Self)) {
		return kJB_kNeedsAddressOf;
	}
	Message* Addr = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[241])));
	JB_FreeIfDead(SC_Msg_ReplaceWith(Self, Addr));
	Message* Inside = JB_Incr(Self);
	if (WasCArray) {
		JB_SetRef(Inside, ({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxAcc, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf0, Self);
			Message* _tmPf2 = ({
				Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxArr, JB_LUB[0])));
				Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxNum, JB_LUB[440]));
				JB_Tree_SyntaxAppend(__imPf1, (_tmPf3));
				JB_Decr(_tmPf3);
				JB_SafeDecr(nil);
				 __imPf1;
			});
			JB_Tree_SyntaxAppend(__imPf0, _tmPf2);
			JB_Decr(_tmPf2);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
	}
	JB_Tree_SyntaxAppend(Addr, Inside);
	JB_Decr(Inside);
	JB_SetRef(Addr->Obj, Type);
	JB_Decr(Addr);
	return kJB_kAddressOfMatch;
}

Message* SC_Msg_GetASMFunc(Message* Self) {
	if (SC_Msg_Reg(Self) >= 0) {
		Message* Op = JB_Msg_NextOfName(Self, JB_SyxOpp, JB_LUB[586]);
		if ((!Op)) {
			return nil;
		}
		Message* Adj = JB_Msg_NextOf(Op, JB_SyxAdj);
		if ((!Adj)) {
			return nil;
		}
		return JB_Msg_NeedSyx(Adj, JB_SyxFunc);
	}
	return nil;
}

Message* SC_Msg_GetDclName(Message* Self, bool IsConstructor) {
	Message* Rz = nil;
	if (IsConstructor) {
		if ((!JB_Tree_SyntaxEquals(Self, 2, false))) {
			JB_Msg_SyntaxExpect(Self, JB_LUB[786]);
			return nil;
		}
	}
	Rz = JB_Msg_NeedSyxInt(Self, JB_SyxNil, 1);
	if (JB_Msg_EqualsSyx(Rz, JB_SyxRel, false)) {
		Rz = JB_Msg_NeedSyx(Rz, JB_SyxThg);
	}
	if ((!Rz)) {
		if (true) {
			JB_Msg_SyntaxExpect(Self, JB_LUB[1067]);
		}
	}
	return Rz;
}

SCFunction* SC_Msg_GetFunctionPointer(Message* Self) {
	SCDecl* D = ((SCDecl*)JB_Object_FastAs(Self->Obj, &SCDeclData));
	if ((!D)) {
		return nil;
	}
	if (SC_Decl_IsNormal(D)) {
		SCClass* T = D->Type;
		return T->FuncProto;
	}
	return nil;
}

Message* SC_Msg_GetMarker(Message* Self, JB_String* S) {
	{
		Message* A = ((Message*)JB_Ring_First(Self));
		while (A) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(A)));
			if (SC_Msg_OperatorIsTmp(A, S)) {
				return A;
			}
			A = _Nf1;
		};
		;
	}
	;
	return nil;
}

Message* SC_Msg_GetTypeLimiter(Message* Self) {
	if ((!Self)) {
		return nil;
	}
	Message* Rel = ((Message*)JB_Ring_Parent(Self));
	if (((JB_Msg_EqualsSyx(Rel, JB_SyxRel, false))) and (JB_Tree_IsLast(Self) and (!(JB_Msg_OperatorIn(Rel, JB_SyxDecl))))) {
		return Rel;
	}
	return nil;
}

Message* JB_Msg_GiveArg(Message* Self) {
	Message* R = ((Message*)JB_Ring_Last(Self));
	if (JB_Msg_EqualsSyx(R, JB_SyxArg, false)) {
		return R;
	}
	return JB_Msg_Msg(Self, JB_SyxArg, JB_LUB[0]);
}

Message* JB_Msg_GoIntoInvisArg(Message* Self, Message* Tmp, int Pos) {
	int I = JB_int_OperatorAlign(((int)Self->Indent), 4);
	Syntax F = Tmp->Func;
	if ((!((F == JB_SyxTmp) or ((F == JB_SyxItem) or (F == JB_SyxDecl))))) {
		return JB_Tk__ErrorAdd(JB_LUB[913], Tmp->Position);
	}
	Message* It = JB_Tk__MakeInvisArg(Tmp, I);
	if (It) {
		It->Indent = I;
		(JB_Msg_RangeSet(It, ((IntRange)ivec2{Pos, Pos})));
		JB_Tree_SyntaxAppend(It, Self);
		return It;
	}
	return nil;
}

Message* SC_Msg_HasOwnBlock(Message* Self) {
	Message* Arg = ((Message*)JB_Ring_Parent(Self));
	if ((!JB_Msg_EqualsSyx(Arg, JB_SyxRel, false))) {
		return nil;
	}
	Arg = ((Message*)JB_Ring_Parent(Arg));
	if ((!JB_Msg_EqualsSyx(Arg, JB_SyxDecl, false))) {
		return nil;
	}
	Arg = ((Message*)JB_Ring_Parent(Arg));
	if ((!JB_Msg_EqualsSyx(Arg, JB_SyxArg, false))) {
		return nil;
	}
	SCArg* Obj = SC_Msg_AsArg(Arg);
	if (((bool)Obj) and (Obj->TmpMovedOutFor == Self)) {
		return Arg;
	}
	return nil;
}

bool JB_Msg_HasPosition(Message* Self) {
	return Self->Position >= 0;
}

bool SC_Msg_HasSelfAsFirst(Message* Self) {
	Message* D = ((Message*)JB_Ring_First(Self));
	if (D) {
		Message* Msg = SC_Msg_DeclName(D);
		if (Msg) {
			return (JB_Str_Equals(Msg->Name, JB_LUB[1933], true));
		}
	}
	return false;
}

void SC_Msg_HateUnusedFuncs(Message* Self) {
	SCImport* Imp = SC_Imp__FindImport(Self->Name);
	if (Imp) {
		Imp->WarnUnusedFuncs = true;
	}
	 else {
		JB_Msg_Expect(Self, Self->Func, JB_LUB[703]);
	}
}

SCFunction* SC_Msg_IdentifyFunc(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxTmp, false)) {
		if ((!((!JB_Msg_SyntaxEquals(Self, JB_LUB[1544], false)) and (!JB_Msg_SyntaxEquals(Self, JB_LUB[1798], false))))) {
			return nil;
		}
	}
	JB_Object* Obj = Self->Obj;
	if (JB_Object_FastIsa(Obj, &SCFunctionData)) {
		return ((SCFunction*)Obj);
	}
	return nil;
}

Message* SC_Msg_InBuiltSizeOf(Message* Self, SCNode* Name_space, SCDecl* Sulf, Message* Sulf_exp) {
	SCDecl* _tmPf0 = JB_Incr(SC_Decl_Constructor(nil, JB_TypeInt));
	Message* _tmPf1 = JB_Incr(SC_NewDeclNum(_tmPf0, SC_Decl_ByteSize(Sulf), JB_LUB[0]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_Msg_IndentScore(Message* Self) {
	int Ind = JB_Msg_CleanIndent(Self);
	if ((JB_Msg_EqualsSyx(Self, JB_SyxTmp, false)) or (JB_Msg_EqualsSyx(Self, JB_SyxItem, false))) {
		return Ind + 2;
	}
	if (JB_Msg_EqualsSyx(Self, JB_SyxArg, false)) {
		return Ind;
	}
	return JB_Msg_CleanIndent(Self);
}

bool JB_Msg_InInvisArg(Message* Self) {
	Message* P = ((Message*)JB_Ring_Parent(Self));
	return ((JB_Msg_EqualsSyx(P, JB_SyxArg, false))) and (JB_Msg_SyntaxIs(P, kJB__MsgParseFlags_Style2));
}

bool SC_Msg_InitExpand(Message* Self) {
	Message* Rel = ((Message*)JB_Ring_Parent(Self));
	JB_SetRef(Self->Name, JB_LUB[566]);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
	SC_Msg_FixErl(Rel);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return true;
}

bool SC_Msg_InitRootDecl(Message* Self, Message* Before, SCNode* Name_space) {
	if ((!JB_Msg_Expect(Self, JB_SyxThg, nil))) {
		return nil;
	}
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(Self)));
	Message* NewDefault = JB_Incr(((Message*)JB_Ternary((JB_Msg_EqualsSyx(P, JB_SyxRel, false)), ((Message*)JB_Ring_Last(P)), nil)));
	JB_Decr(P);
	SCObject* O = JB_Incr(SC_Base_LookUpVarRootDecl(Name_space, Self->Name, Self));
	if ((!JB_Object_Isa(O, &SCDeclData))) {
		JB_Decr(O);
		JB_Decr(NewDefault);
		return nil;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
	SCDecl* Decl = JB_Incr(((SCDecl*)O));
	JB_Decr(O);
	if ((!NewDefault)) {
		if ((!SC_Decl_IsNormal(Decl))) {
			JB_Decr(Decl);
			JB_MsgPos_Destructor((&_usingf0));
			JB_Decr(NewDefault);
			return true;
		}
		JB_SetRef(NewDefault, SC_Decl_CreateDefault(Decl, Self, true));
		if (((bool)NewDefault) and ((bool)Decl->Contains)) {
			JB_SetRef(NewDefault, SC_Decl_WriteTypeCast(Decl, NewDefault));
			JB_SetRef(NewDefault->Obj, nil);
		}
	}
	JB_Decr(Decl);
	if ((!JB_Msg_SyntaxEquals(NewDefault, JB_LUB[1810], false))) {
		Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Self->Name));
		Message* _tmPf1 = JB_Incr(SC_NewRel((_tmPf2), NewDefault, JB_LUB[586]));
		JB_Decr(_tmPf2);
		(JB_Ring_PrevSibSet(Before, _tmPf1));
		JB_Decr(_tmPf1);
	}
	JB_Decr(NewDefault);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return true;
}

void SC_Msg_InsertAfter(Message* Self, Message* Ins, Message* After) {
	if (After) {
		(JB_Ring_NextSibSet(After, Ins));
	}
	 else {
		(JB_Ring_FirstSet(Self, Ins));
	}
}

void SC_Msg_InsertBefore(Message* Self, Message* J, Message* Ch) {
	if (JB_Msg_InMsg(Ch, Self)) {
		(JB_Ring_PrevSibSet(Ch, J));
	}
	 else {
		(JB_Ring_LastSet(Self, J));
	}
}

void SC_Msg_InsertMainArgs(Message* Self, Message* Prms) {
	JB_String* Usage = SC_Msg_CollectUsage(Prms);
	Macro* FirstArg = JB_Macro_ConstructorStr(nil, (JB_LUB[10]));
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Prms);
	Array* _tmPf1 = (JB_Array_Constructor0(nil));
	JB_Array_SyntaxAppend(_tmPf1, JB_Str_Msg(Usage));
	JB_Msg_AppendMacro(Self, FirstArg, _tmPf1);
	int I = 0;
	int Found = 0;
	{
		Message* Ch = ((Message*)JB_Ring_First(Prms));
		while (Ch) {
			Message* _Nf3 = ((Message*)JB_Ring_NextSib(Ch));
			Found = (Found | SC_Msg_MainOneArg(Ch, Self, I++, Found));
			Ch = _Nf3;
		};
		;
	}
	;
	if ((!((bool)(Found & 1)))) {
		JB_FreeIfDead(SC_Macro_clean(SC__Macros_MainArgNoNE));
		Array* _tmPf4 = (JB_Array_Constructor0(nil));
		JB_Array_SyntaxAppend(_tmPf4, JB_int_Msg(I));
		JB_Msg_AppendMacro(Self, SC__Macros_MainArgNoNE, _tmPf4);
	}
	JB_Tree_SyntaxAppend(Self, JB_Str_ParseJbin(((JB_LUB[20])), kJB__int64_max));
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

SCFunction* SC_Msg_InsideFunc(Message* Self) {
	{
		Message* Ch = Self;
		while (Ch) {
			if (JB_Msg_EqualsSyx(Ch, JB_SyxTmp, false)) {
				SCFunction* Fn = SC_Msg_AsFunc(Ch);
				if (Fn) {
					return Fn;
				}
			}
			Ch = ((Message*)JB_Ring_Parent(Ch));
		};
		;
	}
	;
	return nil;
}

int64 JB_Msg_Int(Message* Self, int I) {
	if (Self) {
		Message* F = ((Message*)JB_Ring_First(Self));
		if ((!F) or (!JB_Msg_EqualsSyx(Self, JB_SyxUnit, false))) {
			return JB_Str_TextIntegerSection(Self->Name, I, Self);
		}
		if (JB_Msg_SyntaxEquals(Self, JB_LUB[2053], false)) {
			return JB_Str_HexIntegerSection(F->Name, I, F);
		}
		double Mul = JB_Str_TextDouble(F->Name, nil);
		if (JB_Msg_SyntaxEquals(Self, JB_LUB[978], false)) {
			Mul = (Mul * ((float)1024));
		}
		 else if (JB_Msg_SyntaxEquals(Self, JB_LUB[1000], false)) {
			Mul = (Mul * ((float)1048576));
		}
		 else if (JB_Msg_SyntaxEquals(Self, JB_LUB[893], false)) {
			Mul = (Mul * ((float)1073741824));
		}
		 else {
			if (true) {
				JB_Msg_SyntaxExpect(Self, JB_LUB[938]);
			}
			Mul = 0.0f;
		}
		return ((int64)Mul);
	}
	return 0;
}

NameAndMsg SC_Msg_IntoVariable(Message* Self, SCNode* Name_space) {
	NameAndMsg Rz = ((NameAndMsg){});
	Message* P = JB_Incr(SC_Msg_NiceParent(Self));
	Message* Place = JB_Incr(SC_Msg_IsInDeclInBlock(P));
	if (Place) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(P)));
		Message* NameMsg = JB_Incr(SC_Msg_UseNonRefChangers(_tmPf0, false));
		JB_Decr(_tmPf0);
		if (JB_Msg_EqualsSyx(NameMsg, JB_SyxThg, false)) {
			JB_SetRef(Rz.Name, NameMsg->Name);
			Message* _tmPf1 = JB_Incr(JB_Msg_Ancestor(Place, JB_SyxArg));
			JB_SetRef(Rz.Arg, _tmPf1);
			JB_Decr(_tmPf1);
			JB_SetRef(Rz.Msg, ((Message*)JB_Ring_NextSib(Place)));
			JB_Decr(NameMsg);
			JB_Decr(Place);
			JB_Decr(P);
			return Rz;
		}
		JB_Decr(NameMsg);
	}
	JB_Decr(Place);
	Message* Block = JB_Incr(SC_Msg_CreateOwnBlock(Self));
	if ((!Block)) {
		JB_Decr(Block);
		JB_Decr(P);
		NameAndMsg _tmPf5 = ((NameAndMsg){});
		SC_NameAndMsg_Destructor((&Rz));
		return _tmPf5;
	}
	JB_String* Name = JB_Incr(SC_UniqueTmpVar(Name_space, JB_LUB[1458]));
	Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Name));
	JB_SetRef(P, SC_NewEqRelWithMsgMsg(_tmPf2, Self));
	JB_Decr(_tmPf2);
	SCArg* _tmPf3 = JB_Incr(SC_Msg_AsArg(Block));
	SCArg* Arg = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	Message* Decl = JB_Incr(JB_Msg_Msg(Block, JB_SyxDecl, JB_LUB[0]));
	JB_Msg_AppendSyx(Decl, JB_SyxEmb, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Decl, P);
	SC_Msg_CollectFromBody(Decl, Arg);
	JB_Decr(Decl);
	Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_Parent(Block)));
	JB_SetRef(_tmPf4->Obj, SC_Base_SyntaxAccess(Arg, Name));
	JB_Decr(Arg);
	JB_Decr(_tmPf4);
	Message* Last = JB_Incr(SC_NewRejoin());
	Message* RetVal = JB_Incr(JB_Msg_Msg(Last, JB_SyxThg, Name));
	JB_SetRef(RetVal->Obj, P->Obj);
	JB_Decr(P);
	JB_Decr(RetVal);
	JB_Tree_SyntaxAppend(Block, Last);
	JB_SetRef(Rz.Msg, Last);
	JB_Decr(Last);
	JB_SetRef(Rz.Arg, Block);
	JB_Decr(Block);
	JB_SetRef(Rz.Name, Name);
	JB_Decr(Name);
	return Rz;
}

MaybeBool SC_Msg_IsAlwaysBool(Message* Self) {
	SCDecl* D = ((SCDecl*)JB_Object_FastAs(Self->Obj, &SCDeclData));
	if (D) {
		if (SC_Decl_IsConstOf(D, JB_FalseBool)) {
			return ((MaybeBool)false);
		}
		if (SC_Decl_IsConstOf(D, JB_TrueBool)) {
			return ((MaybeBool)true);
		}
	}
	return ((MaybeBool)8);
}

bool SC_Msg_IsAlwaysFalse(Message* Self) {
	return JB_MaybeBool_IsFalse(SC_Msg_IsAlwaysBool(Self));
}

bool SC_Msg_IsAssignable(Message* Self) {
	Syntax F = Self->Func;
	return (F != JB_SyxFunc) and ((F != JB_SyxType) and (F != JB_SyxNum));
}

bool SC_Msg_IsBehaviour(Message* Self) {
	return (JB_Str_Equals(Self->Name, JB_LUB[1512], false)) or (JB_Str_Equals(Self->Name, JB_LUB[1474], false));
}

bool SC_Msg_IsClassType(Message* Self) {
	return (JB_Msg_SyntaxEquals(Self, JB_LUB[1544], true)) or ((JB_Msg_SyntaxEquals(Self, JB_LUB[1585], true)) or ((JB_Msg_SyntaxEquals(Self, JB_LUB[1972], true)) or (JB_Msg_SyntaxEquals(Self, JB_LUB[1902], true))));
}

bool SC_Msg_IsFirstOfSetRel(Message* Self) {
	return JB_Tree_IsFirst(Self) and SC_Msg_IsSetRel(((Message*)JB_Ring_Parent(Self)));
}

Message* SC_Msg_IsInDeclInBlock(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxRel, false)) {
		Message* P = SC_Msg_NiceParent(Self);
		if (((JB_Msg_EqualsSyx(P, JB_SyxDecl, false))) and (JB_Msg_OperatorIn(P, JB_SyxArg))) {
			return P;
		}
	}
	return nil;
}

bool SC_Msg_IsInt(Message* Self) {
	return ((JB_Msg_EqualsSyx(Self, JB_SyxNum, false))) and (!JB_Ind_SyntaxCast(JB_Str_FindByte(Self->Name, '.', 0, JB_int__Max())));
}

bool SC_Msg_IsLinkageType(Message* Self) {
	return (JB_Msg_SyntaxEquals(Self, JB_LUB[1758], true));
}

bool SC_Msg_IsModuleType(Message* Self) {
	return (JB_Msg_SyntaxEquals(Self, JB_LUB[1798], true)) or (JB_Msg_SyntaxEquals(Self, JB_LUB[1642], true));
}

int SC_Msg_IsNowNil(Message* Self) {
	SCDecl* D = ((SCDecl*)Self->Obj);
	if (D) {
		if (D == JB_TypeNil) {
			return 1;
		}
		if (SC_Decl_NilCurr(D) == kSC__NilState_Nilish) {
			return 2;
		}
	}
	return 0;
}

SCFunction* SC_Msg_IsParentConCall(Message* Self) {
	if ((!JB_Msg_EqualsSyx(Self, JB_SyxFunc, false))) {
		return nil;
	}
	SCFunction* F = SC_Msg_MsgFunc(Self);
	if (((bool)F) and SC_Func_SyntaxIs(F, kSC__FunctionType_ConOrDes)) {
		return F;
	}
	return nil;
}

bool SC_Msg_IsProperty(Message* Self) {
	return SC_DotUseType_SyntaxIs(SC_Msg_DotType(Self), kSC__DotUseType_Property);
}

bool SC_Msg_IsReffer(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxFunc, false)) {
		Message* L = ((Message*)JB_Ring_Last(Self));
		if (L) {
			SCFunction* Fn = SC_Msg_AsFunc(L);
			if (Fn) {
				return SC_Func_SyntaxIs(Fn, kSC__FunctionType_Reffer);
			}
		}
	}
	return false;
}

bool SC_Msg_IsReturnOrRejoin(Message* Self) {
	return ((JB_Msg_EqualsSyx(Self, JB_SyxTmp, false))) and ((JB_Msg_SyntaxEquals(Self, JB_LUB[1898], false)) or (JB_Msg_SyntaxEquals(Self, JB_LUB[1891], false)));
}

Message* SC_Msg_IsSetIntoPlace(Message* Self) {
	Message* P = SC_Msg_NiceParent(Self);
	if (SC_Msg_IsSetRel(P)) {
		return ((Message*)JB_Ring_First(P));
	}
	return nil;
}

Message* SC_Msg_IsSetIntoVar(Message* Self) {
	Message* Thg = SC_Msg_IsSetIntoPlace(Self);
	if (JB_Msg_EqualsSyx(Thg, JB_SyxThg, false)) {
		return Thg;
	}
	return nil;
}

bool SC_Msg_IsSetRel(Message* Self) {
	if ((!JB_Msg_EqualsSyx(Self, JB_SyxRel, false))) {
		return nil;
	}
	Message* S = ((Message*)JB_Tree_Second(Self));
	if (S) {
		return ((JB_Str_Equals(S->Name, JB_LUB[586], false)));
	}
	return false;
}

bool SC_Msg_IsSettablePlace(Message* Self) {
	Message* P = ((Message*)JB_Ring_Parent(Self));
	while (JB_Msg_EqualsSyx(P, JB_SyxBra, false)) {
		Self = P;
		P = ((Message*)JB_Ring_Parent(P));
	};
	return SC_Msg_IsFirstOfSetRel(Self);
}

bool SC_Msg_IsSmallInt(Message* Self, SCDecl* T) {
	if (((bool)T) and (Self->Func == JB_SyxNum)) {
		if (JB_Str_ContainsString(Self->Name, JB_LUB[353])) {
			return false;
		}
		int64 I = JB_Msg_Int(Self, 0);
		return (I <= 16777216) and (I >= -16777216);
	}
	return false;
}

bool SC_Msg_IsStatementExpr(Message* Self) {
	return SC_Msg_TmpType(Self) == kSC__ASMtmp_kStatementExpression;
}

bool JB_Msg_IsString(Message* Self) {
	if (Self) {
		return JB_Syx_IsString(Self->Func);
	}
	return false;
}

bool JB_Msg_IsTypeOfDecl(Message* Self) {
	return JB_Msg_WithinType(Self, 1);
}

bool SC_Msg_IsVarAltered(Message* Self, JB_String* Name) {
	{
		Message* Msg = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while (((bool)(Msg)) and (Msg != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(Msg)));
			if (((JB_Msg_EqualsSyx(Msg, JB_SyxRel, false))) and ((JB_Msg_OperatorIn(Msg, JB_SyxArg)) and (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(Msg)), Name)))) {
				return true;
			}
			Msg = _N_f2;
		};
		;
	}
	;
	return false;
}

bool SC_Msg_IsVarUseableInLoop(Message* Self, JB_String* Name) {
	if (JB_Str_Equals(Name, JB_LUB[1933], false)) {
		return false;
	}
	return SC_Msg_IsVarAltered(Self, Name);
}

bool SC_Msg_IsZero(Message* Self) {
	return ((JB_Msg_EqualsSyx(Self, JB_SyxNum, false))) and (SC_Str_IsZero(Self->Name));
}

void JB_Msg_Item__(Message* Self, FastString* Fs) {
	Message* Ch = JB_Incr(((Message*)JB_Ring_First(Self)));
	if ((!Ch)) {
		JB_Decr(Ch);
		return;
	}
	JB_FS_SyntaxAppend(Fs, Ch);
	JB_FS_AppendString(Fs, JB_LUB[559]);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
	JB_Decr(Ch);
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
}

bool JB_Msg_jbinTest(Message* Self) {
	JB_String* _tmPf0 = JB_Incr(JB_Msg_RenderJbin(Self, JB_LUB[0], nil));
	Message* Msg = JB_Incr(JB_Str_ParseJbin(_tmPf0, kJB__int64_max));
	JB_Decr(_tmPf0);
	bool _tmPf1 = JB_Msg__TreeCompare(Self, Msg, false);
	JB_Decr(Msg);
	return _tmPf1;
}

JB_String* JB_Msg_JDB2_(Message* Self, int Flags, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	if (((bool)(Flags & 1))) {
		JB_FS_AppendString(Fs, JB_LUB[2095]);
	}
	JB_String* _tmPf2 = JB_Incr(JB_Syx_Name(Self->Func));
	JB_FS_AppendString(Fs, _tmPf2);
	JB_Decr(_tmPf2);
	JB_FS_AppendByte(Fs, ' ');
	if (JB_Str_Exists(Self->Name)) {
		JB_String* _tmPf3 = JB_Incr(((JB_String*)JB_Ternary(((bool)(Flags & 2)), JB_Str_Range(Self->Name, 0, 32), Self->Name)));
		JB_FS_AppendQuotedEscape(Fs, _tmPf3);
		JB_Decr(_tmPf3);
	}
	if (JB_Ring_HasChildren(Self)) {
		Fs->Indent++;
		{
			Message* Ch = JB_Incr(((Message*)JB_Ring_First(Self)));
			while (Ch) {
				Message* _Nf1 = JB_Incr((((Message*)JB_Ring_NextSib(Ch))));
				JB_FS_LineIndent(Fs);
				JB_FreeIfDead(JB_Msg_JDB2_(Ch, Flags, Fs));
				JB_SetRef(Ch, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(Ch);
			;
		}
		;
		Fs->Indent--;
		if (((bool)(Flags & 1))) {
			JB_FS_LineIndent(Fs);
		}
	}
	if (((bool)(Flags & 1))) {
		JB_FS_AppendString(Fs, JB_LUB[2099]);
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

__lib__ JB_String* jdb4(Message* Self) {
	//visible;
	JB_String* _tmPf0 = JB_Incr(SC_Msg_JDB4_(Self, nil));
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
	return JB_LUB[0];
}

JB_String* SC_Msg_JDB4_(Message* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_String* _tmPf2 = JB_Incr(JB_Syx_Name(Self->Func));
	JB_FS_AppendString(Fs, _tmPf2);
	JB_Decr(_tmPf2);
	JB_FS_AppendByte(Fs, ' ');
	if (JB_Str_Exists(Self->Name)) {
		JB_FS_AppendByte(Fs, '"');
		JB_String* _tmPf3 = JB_Incr(JB_Str_Range(Self->Name, 0, 32));
		JB_FS_AppendEscape(Fs, _tmPf3);
		JB_Decr(_tmPf3);
		JB_FS_AppendByte(Fs, '"');
	}
	if (Self->Obj) {
		if ((!JB_Object_Isa(Self->Obj, &MessageData))) {
			JB_FS_AppendByte(Fs, ' ');
			JB_FreeIfDead(JB_ObjRender(Self->Obj, Fs));
		}
	}
	if (JB_Ring_HasChildren(Self)) {
		Fs->Indent++;
		{
			Message* Ch = JB_Incr(((Message*)JB_Ring_First(Self)));
			while (Ch) {
				Message* _Nf1 = JB_Incr((((Message*)JB_Ring_NextSib(Ch))));
				JB_FS_LineIndent(Fs);
				JB_FreeIfDead(SC_Msg_JDB4_(Ch, Fs));
				JB_SetRef(Ch, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(Ch);
			;
		}
		;
		Fs->Indent--;
		JB_FS_LineIndent(Fs);
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_String* JB_Msg_JDB_(Message* Self, FastString* Fs_in, int Flags) {
	return JB_Msg_JDB2_(Self, Flags, Fs_in);
}

void SC_Msg_KinderRemoveAfter(Message* Self) {
	while ((true)) {
		Message* X = ((Message*)JB_Ring_NextSib(Self));
		if ((!X)) {
			break;
		}
		if ((!JB_Msg_SyntaxIs(X, kJB__MsgParseFlags_Inserted))) {
			JB_Msg_SyntaxExpect(X, JB_LUB[1350]);
		}
		JB_Tree_Remove(X);
	};
}

Message* JB_Msg_Last(Message* Self, Syntax Need) {
	Message* Ch = ((Message*)JB_Ring_Last(Self));
	if (((bool)Ch) and ((!Need) or (JB_Msg_EqualsSyx(Ch, Need, false)))) {
		return Ch;
	}
	JB_Msg_CantFind(Self, Need, nil, Ch);
	return nil;
}

void SC_Msg_LastInBlock(Message* Self, SCBlockage Reason) {
	JB_Tree_RemoveAfter(Self);
	Message* Arg = ((Message*)JB_Ring_Parent(Self));
	(SC_Msg_BlocksSet(Arg, Reason));
	(SC_Msg_BlocksSet(Self, Reason));
	Message* Test = ((Message*)JB_Ring_Parent(Arg));
	if ((!SC_Msg_OperatorIsTmp(Test, JB_LUB[1621]))) {
		return;
	}
	while (Test) {
		Arg = ((Message*)JB_Ring_PrevSib(Test));
		SCBlockage B = SC_Msg_Blocks(Arg);
		if ((!B)) {
			return;
		}
		Reason = SC_SCBlockage_BlockCombine(Reason, B);
		Test = ((Message*)JB_Ring_Parent(Arg));
		if (SC_ASMtmp_SyntaxIs(SC_Msg_TmpType(Test), kSC__ASMtmp_kIf)) {
			return SC_Msg_LastInBlock(Test, Reason);
		}
		 else {
			(SC_Msg_BlocksSet(Test, Reason));
		}
	};
}

Message* SC_Msg_LastUsedFix(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxDecl, false)) {
		Message* Ch = ((Message*)JB_Ring_First(((Message*)JB_Tree_Second(Self))));
		if ((!JB_Msg_EqualsSyx(Ch, JB_SyxThg, false))) {
			JB_Object_SyntaxExpect(nil);
			return nil;
		}
		if (SC_Refs__RefBasis(Ch, true) == kSC__Refs_kBasisObj) {
			Message* It = SC_Msg_FindRef(Self, SC__Comp_RefIncr, Ch->Name);
			if (It) {
				return ((Message*)JB_Ring_NextSib(It));
			}
		}
	}
	return ((Message*)JB_Ring_NextSib(Self));
}

int JB_Msg_Length(Message* Self) {
	return JB_Str_Length(Self->Name);
}

void JB_Msg_List__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '(');
	int Count = 0;
	JB_String* Sep = JB_LUB[302];
	if (JB_Msg_SyntaxIs(Self, kJB__MsgParseFlags_Style2)) {
		Sep = JB_LUB[41];
		JB_FS_AppendString(Fs, Sep);
	}
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if ((++Count) > 1) {
				JB_FS_AppendString(Fs, Sep);
			}
			JB_FS_SyntaxAppend(Fs, Ch);
			if (JB_Msg_EqualsSyx(Ch, JB_SyxItem, false)) {
				Count++;
			}
			Ch = _Nf1;
		};
		;
	}
	;
	if ((Count == 1) or JB_Msg_SyntaxIs(Self, kJB__MsgParseFlags_Style2)) {
		JB_FS_AppendString(Fs, Sep);
	}
	JB_FS_AppendByte(Fs, ')');
}

Array* SC_Msg_ListAll(Message* Self) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	{
		Message* A = ((Message*)JB_Ring_First(Self));
		while (A) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(A)));
			JB_Array_SyntaxAppend(Rz, A);
			A = _Nf1;
		};
		;
	}
	;
	return Rz;
}

bool JB_Msg_ListViewable(Message* Self) {
	return ((bool)Self) and JB_Syx_ListViewable(Self->Func);
}

JB_String* JB_Msg_Locate(Message* Self) {
	if ((!Self)) {
		return JB_LUB[275];
	}
	JB_String* S = JB_Incr(JB_Msg_Render(Self, nil));
	JB_String* Fname = JB_Incr(JB_Syx_Name(Self->Func));
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FreeIfDead(JB_ObjRender(Self->Name, Fs));
	JB_FS_AppendByte(Fs, '@');
	JB_FS_AppendString(Fs, Fname);
	JB_Decr(Fname);
	JB_FS_AppendString(Fs, JB_LUB[561]);
	JB_FS_AppendString(Fs, S);
	JB_Decr(S);
	JB_FS_AppendByte(Fs, '\'');
	if (Self->Position >= 0) {
		JB_FS_AppendString(Fs, JB_LUB[165]);
		JB_FS_AppendInt32(Fs, Self->Position);
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Root(Self)));
		JB_Object* R = JB_Incr(_tmPf0->Obj);
		JB_Decr(_tmPf0);
		if (JB_Object_Isa(R, &JB_StringData)) {
			if (JB_Str_Length(((JB_String*)R))) {
				JB_FS_AppendString(Fs, JB_LUB[180]);
				JB_FS_AppendString(Fs, ((JB_String*)R));
			}
		}
		JB_Decr(R);
	}
	JB_FS_AppendByte(Fs, '\n');
	JB_String* _tmPf1 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Msg_LoopContinue(Message* Self) {
	SC_Msg_LoopExitter(Self, kSC__ASMtmp_kContinue, kSC__SCBlockage_Continue);
}

void SC_Msg_LoopExit(Message* Self) {
	SC_Msg_LoopExitter(Self, kSC__ASMtmp_kExit, kSC__SCBlockage_Exit);
}

void SC_Msg_LoopExitter(Message* Self, int ASMType, SCBlockage ExitCode) {
	SC_Msg_ExpectEmpty(Self);
	(SC_Msg_TmpTypeSet(Self, ASMType));
	SC_Msg_LastInBlock(Self, ExitCode);
}

Message* JB_Msg_MacroAvoidCopy(Message* Self) {
	if (!(JB_Msg_SyntaxIs(Self, kJB__MsgParseFlags_MacroMade))) {
		(JB_Msg_SyntaxIsSet(Self, kJB__MsgParseFlags_MacroMade, true));
		return Self;
	}
	return JB_Msg_Copy(Self, nil);
}

void JB_Msg_MacroCopy(Message* Self, Message* Root, Array* Prms, Message* Dest) {
	{
		Message* V = ((Message*)JB_Ring_First(Self));
		while (V) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(V)));
			JB_Tree_SyntaxAppend(Dest, JB_Msg_MacroPrm(V, Root, Prms, Dest));
			V = _Nf1;
		};
		;
	};
}

void SC_Msg_MacroFixSub(Message* Self, SCDecl* Contains) {
	{
		Message* S = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while (((bool)(S)) and (S != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(S)));
			if (((JB_Msg_EqualsSyx(S, JB_SyxSThg, false)) and (JB_Msg_SyntaxEquals(S, JB_LUB[357], false))) and JB_Msg_WithinType(S, 3)) {
				if ((!Contains)) {
					JB_Msg_SyntaxExpect(Self, JB_LUB[787]);
					return;
				}
				JB_FreeIfDead(SC_Msg_ReplaceWith(S, SC_Decl_WriteType(Contains, 0)));
			}
			S = _N_f2;
		};
		;
	};
}

Message* JB_Msg_MacroPrm(Message* Self, Message* Root, Array* Prms, Message* Dest) {
	Message* Rz = nil;
	JB_String* N = Self->Name;
	byte C = JB_Str_First(N);
	if ((C == '*') and ((JB_Msg_EqualsSyx(Self, JB_SyxBRel, false)))) {
		Message* F = ((Message*)JB_Ring_First(Self));
		if ((JB_Msg_SyntaxEquals(F, JB_LUB[1425], false)) and (JB_Msg_EqualsSyx(F, JB_SyxThg, false))) {
			{
				int _if0 = 0;
				while (true) {
					Message* P = ((Message*)JB_Array_Value(Prms, _if0));
					if (P == nil) {
						break;
					}
					if (!(JB_Msg_SyntaxIs(P, kJB__MsgParseFlags_MacroMade))) {
						JB_Tree_SyntaxAppend(Dest, JB_Msg_MacroAvoidCopy(P));
					}
					_if0++;
				};
			}
			;
			return nil;
		}
	}
	if (((C == '_') and (JB_Str_CompareInt(N, 1, false) >= 1)) and JB_Str_IsIntFrom(N, 1)) {
		Message* Oop = ((Message*)JB_Array_Value(Prms, ((int)JB_Str_Int(N))));
		if ((!Oop)) {
			JB_Msg_SyntaxExpect(Root, JB_LUB[1095]);
			return nil;
		}
		Syntax F = Self->Func;
		if ((F == JB_SyxDot) or ((F == JB_SyxSDot) or ((F == JB_SyxStr) or ((F == JB_SyxSStr) or (F == JB_SyxChar))))) {
			return JB_Msg_MacroSame(Self, Oop);
		}
		return JB_Msg_MacroAvoidCopy(Oop);
	}
	Rz = JB_Msg_ConstructorCopy(nil, Self);
	JB_Msg_MacroCopy(Self, Root, Prms, Rz);
	return Rz;
}

Message* JB_Msg_MacroSame(Message* Self, Message* Prm) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Msg_Copy(Self, nil));
	(JB_Msg_SyntaxIsSet(Prm, kJB__MsgParseFlags_MacroMade, true));
	JB_SetRef(Rz->Name, Prm->Name);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Msg_MainFix(Message* Self) {
	Message* Prms = JB_Incr(((Message*)JB_Ring_First(Self)));
	if ((!Prms)) {
		JB_SetRef(Prms, JB_Msg_GiveArg(Self));
		JB_Msg_AppendString(Prms, JB_LUB[1689]);
	}
	JB_SetRef(Self->Name, JB_LUB[1673]);
	Message* Fn_src = JB_Incr(SC_Str_ParseClean(JB_LUB[1677]));
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(Fn_src)));
	Message* Src_arg = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Syntax Fn = Prms->Func;
	Message* Inc_arg = nil;
	if ((Fn == JB_SyxList) or (Fn == JB_SyxBra)) {
		JB_SetRef(Inc_arg, JB_Msg_NextOf(Prms, JB_SyxArg));
		Fn = JB_SyxPrm;
	}
	 else {
		JB_SetRef(Inc_arg, JB_Msg_NeedSyx(Self, JB_SyxArg));
	}
	if (Inc_arg) {
		if (Fn == JB_SyxPrm) {
			SC_Msg_InsertMainArgs(Src_arg, Prms);
		}
		JB_Tree_SyntaxAppend(Fn_src, Inc_arg);
		JB_Msg_ExpectLast(Inc_arg, JB_LUB[0]);
		JB_Tree_Remove(Src_arg);
		JB_Tree_TakeAllFrom(Inc_arg, Src_arg);
		JB_Decr(Inc_arg);
		JB_Decr(Src_arg);
		JB_Decr(Prms);
		JB_SafeDecr(Fn_src);
		return Fn_src;
	}
	JB_Decr(Prms);
	JB_Decr(Fn_src);
	JB_Decr(Src_arg);
	JB_Decr(Inc_arg);
	return nil;
}

void SC_Msg_mainfix2(Message* Self) {
	Message* M = JB_Incr(SC_Msg_MainFix(Self));
	if (M) {
		JB_Msg_BecomeMsg(Self, M);
	}
	JB_Decr(M);
}

int SC_Msg_MainOneArg(Message* Self, Message* Arg, int I, int Found) {
	Message* Type = JB_Msg_NeedSyx(Self, JB_SyxNil);
	Message* Name = JB_Msg_NextOf(Type, JB_SyxNil);
	if ((!Name)) {
		return 0;
	}
	bool IsArray = (JB_Msg_EqualsSyx(Type, JB_SyxArr, false));
	if (IsArray) {
		if ((!JB_Msg_ExpectLast(Self, JB_LUB[0]))) {
			return 0;
		}
		Type = ((Message*)JB_Ring_First(Type));
	}
	bool MaybeNil = SC_Msg_OperatorIsARel(Type, JB_LUB[598]);
	if (MaybeNil) {
		Type = ((Message*)JB_Ring_First(Type));
	}
	if ((!JB_Msg_Expect(Type, JB_SyxThg, nil))) {
		return 0;
	}
	SCClass* Cls = SC_Comp__SyntaxAccess(Type);
	if ((!Cls)) {
		return 0;
	}
	if ((!MaybeNil)) {
		MaybeNil = SC_Class_IsDataTypeOnly(Cls);
	}
	Array* Prms = (JB_Array_Constructor0(nil));
	JB_Array_SyntaxAppend(Prms, Name);
	JB_Array_SyntaxAppend(Prms, Type);
	JB_Array_SyntaxAppend(Prms, JB_int_Msg(I));
	if ((!JB_Array_SyntaxEquals(Prms, 3, false))) {
		return 0;
	}
	if ((((bool)(Found & 1)))) {
		JB_Msg_SyntaxExpect(Arg, JB_LUB[694]);
	}
	if (IsArray) {
		JB_Msg_AppendMacro(Arg, SC_Macro_clean(SC__Macros_MainArgArray), Prms);
		return 1;
	}
	if ((!JB_Msg_EqualsSyx(Name, JB_SyxRel, false))) {
		if ((((bool)(Found & 4)))) {
			JB_Msg_SyntaxExpect(Arg, JB_LUB[695]);
		}
		if (MaybeNil) {
			JB_Msg_AppendMacro(Arg, SC_Macro_clean(SC__Macros_MainArgBasic), Prms);
		}
		 else {
			JB_Msg_AppendMacro(Arg, SC_Macro_clean(SC__Macros_MainArgBasicReq), Prms);
		}
		return 2;
	}
	Name = JB_Msg_NeedSyx(Name, JB_SyxThg);
	if ((!Name)) {
		return 0;
	}
	(JB_Array_ValueSet(Prms, 0, Name));
	Message* Opp = JB_Msg_NextOfName(Name, JB_SyxOpp, JB_LUB[586]);
	Message* L = JB_Msg_NextOf(Opp, JB_SyxNil);
	if (L) {
		JB_Array_SyntaxAppend(Prms, L);
	}
	if ((!JB_Array_SyntaxEquals(Prms, 4, false))) {
		return 0;
	}
	JB_Msg_AppendMacro(Arg, SC_Macro_clean(SC__Macros_MainArgDefault), Prms);
	return 4;
}

void SC_Msg_MakeTaskVar(Message* Self, Message* Con, Message* Before, bool First) {
	Message* Prm = ((Message*)JB_Tree_Second(Con));
	Message* Arg = ((Message*)JB_Ring_NextSib(Prm));
	JB_String* Name = SC_Msg_VarName(Self);
	if (JB_Str_Exists(Name)) {
		if (First) {
			(JB_Ring_PrevSibSet(Before, SC_NewEqRelWithMsgMsg(JB_Syx_OperatorPlus(JB_SyxSDot, Name), JB_Syx_OperatorPlus(JB_SyxThg, Name))));
		}
		JB_Tree_SyntaxAppend(Prm, JB_Msg_Copy(Self, nil));
	}
}

void JB_Msg_max__(Message* Self, FastString* Fs) {
	0;
}

void SC_Msg_MiniArgCpp(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '{');
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		Message* _firstf2 = Ch;
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if (_firstf2 != Ch) {
				JB_FS_AppendString(Fs, JB_LUB[302]);
			}
			//start;
			JB_Msg_Export(Ch, Fs);
			Ch = _Nf1;
		};
		;
	}
	;
	JB_FS_AppendByte(Fs, '}');
}

JB_String* JB_Msg_MiniName(Message* Self, JB_String* Prefix) {
	if ((!Self)) {
		return JB_LUB[0];
	}
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, Prefix);
	JB_String* _tmPf1 = JB_Incr(JB_Msg_FuncName(Self));
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(_fsf0, JB_LUB[211]);
	JB_String* _tmPf3 = JB_Incr(JB_Str_Range(Self->Name, 0, 64));
	JB_String* _tmPf2 = JB_Incr(JB_Str_UnicodeSync(_tmPf3));
	JB_Decr(_tmPf3);
	JB_FS_AppendString(_fsf0, _tmPf2);
	JB_Decr(_tmPf2);
	JB_FS_AppendString(_fsf0, JB_LUB[621]);
	JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

void SC_Msg_MiniTran(Message* Self, SCNode* Name_space, JB_String* On) {
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
		Message* _tmPf2 = ({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(Self)));
			JB_Tree_SyntaxAppend(__imPf1, _tmPf3);
			JB_Decr(_tmPf3);
			JB_SafeDecr(nil);
			 __imPf1;
		});
		JB_Tree_SyntaxAppend(Self, _tmPf2);
		JB_Decr(_tmPf2);
		Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, On));
		(JB_Ring_FirstSet(Self, (_tmPf4)));
		JB_Decr(_tmPf4);
		Self->Func = JB_SyxDot;
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_FreeIfDead(SC_TypeOfExpr(Self, Name_space, nil));
}

int SC_Msg_ModelMode(Message* Self) {
	int Rz = 0;
	if ((!JB_Msg_EqualsSyx(Self, JB_SyxRel, false))) {
		return 0;
	}
	{
		Message* _LoopSrcf3 = JB_Incr(((Message*)JB_Ring_Last(Self)));
		Message* C = JB_Incr(_LoopSrcf3);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(_LoopSrcf3)));
		while (((bool)(C)) and (C != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(C)));
			if (SC_Msg_OperatorIsThing(C, JB_LUB[1480])) {
				Rz = (Rz | 1);
			}
			 else if (SC_Msg_OperatorIsThing(C, JB_LUB[1818])) {
				Rz = (Rz | 2);
			}
			 else {
				if ((!((JB_Msg_EqualsSyx(C, JB_SyxRel, false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[297], false))))) {
					JB_Msg_SyntaxExpect(C, nil);
					JB_Decr(_N_f2);
					JB_Decr(_afterf1);
					JB_Decr(C);
					JB_Decr(_LoopSrcf3);
					return 0;
				}
			}
			JB_SetRef(C, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(C);
		JB_Decr(_afterf1);
		;
		JB_Decr(_LoopSrcf3);
	}
	;
	return Rz;
}

Message* SC_Msg_ModelType(Message* Self) {
	Message* Rz = nil;
	JB_SetRef(Rz, Self);
	if (JB_Msg_EqualsSyx(Rz, JB_SyxRel, false)) {
		JB_SetRef(Rz, ((Message*)JB_Ring_First(Rz)));
	}
	if ((!JB_Msg_EqualsSyx(Rz, JB_SyxThg, false))) {
		JB_Msg_SyntaxExpect(Self, nil);
		JB_Decr(Rz);
		return nil;
	}
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Msg_ModuleSrc(Message* Self) {
	JB_String* Name = Self->Name;
	if (JB_Str_Exists(Name)) {
		SCModule* Found = SC_Base_FindModule(SC__Comp_program, Name, nil, 0);
		if (Found) {
			SCClass* C = Found->Cls;
			if (C) {
				SCFunction* Fp = C->FuncProto;
				if (Fp) {
					return Fp->Source;
				}
				 else {
					return SC_Base_SourceArg(C);
				}
			}
			return Found->Source;
		}
	}
	return nil;
}

void SC_Msg_Move(Message* Self, Message* Last, Message* Into) {
	Message* Curr = Self;
	while (Curr != Last) {
		Message* Next_ = ((Message*)JB_Ring_NextSib(Curr));
		(JB_Ring_FirstSet(Into, Curr));
		Curr = Next_;
	};
}

void SC_Msg_MoveAllAfter(Message* Self, Message* After) {
	while (JB_Ring_HasChildren(Self)) {
		(JB_Ring_NextSibSet(After, ((Message*)JB_Ring_Last(Self))));
	};
}

Message* JB_Msg_Msg(Message* Self, Syntax Fn, JB_String* Name) {
	return JB_Msg_ConstructorRange(nil, Self, Fn, JB__Tk_Using.Position, Name, JB_Str_Length(Name));
}

void JB_Msg_Msg__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[2095]);
	JB_Msg_FSListSep(Self, Fs, JB_LUB[302]);
	JB_FS_AppendString(Fs, JB_LUB[210]);
}

SCArg* SC_Msg_MsgArg(Message* Self) {
	{
		Message* Ch = Self;
		while (Ch) {
			JB_Object* O = Ch->Obj;
			if (JB_Object_FastIsa(O, &SCArgData)) {
				return ((SCArg*)O);
			}
			Ch = ((Message*)JB_Ring_Parent(Ch));
		};
		;
	}
	;
	return nil;
}

SCDecl* SC_Msg_MsgDecl(Message* Self) {
	Message* D = SC_Msg_DclExp(Self);
	if (D) {
		return SC_Msg_AsDecl(D);
	}
	return nil;
}

SCFunction* SC_Msg_MsgFunc(Message* Self) {
	if ((JB_Msg_EqualsSyx(Self, JB_SyxDot, false)) or (JB_Msg_EqualsSyx(Self, JB_SyxFunc, false))) {
		Message* Sc = ((Message*)JB_Tree_Second(Self));
		if (Sc) {
			return SC_Msg_AsFunc(Sc);
		}
	}
	return nil;
}

SCFunction* SC_Msg_MsgOwningFunc(Message* Self) {
	{
		Message* Ch = Self;
		while (Ch) {
			JB_Object* O = Ch->Obj;
			if (JB_Object_FastIsa(O, &SCArgData)) {
				SCFunction* Pf = ((SCArg*)O)->ParentFunc;
				if (Pf) {
					return Pf;
				}
			}
			 else if ((JB_Object_FastIsa(O, &SCFunctionData)) and ((!JB_Msg_EqualsSyx(Ch, JB_SyxPrm, false)))) {
				return ((SCFunction*)O);
			}
			Ch = ((Message*)JB_Ring_Parent(Ch));
		};
		;
	}
	;
	return nil;
}

void JB_Msg_Name__(Message* Self, FastString* Fs) {
	Message* Ch = JB_Incr(((Message*)JB_Ring_First(Self)));
	if (Ch) {
		JB_FS_AppendString(Fs, Self->Name);
		JB_FS_AppendString(Fs, JB_LUB[156]);
		JB_FS_SyntaxAppend(Fs, Ch);
	}
	 else {
		JB_FS_AppendByte(Fs, '@');
		JB_FS_AppendString(Fs, Self->Name);
	}
	JB_Decr(Ch);
}

Message* SC_Msg_NeedBra(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxBra, false)) {
		return Self;
	}
	return SC_Msg_WrapWith(Self, JB_SyxBra, JB_LUB[0]);
}

Message* JB_Msg_NeedFirst(Message* Self) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if (F) {
		return F;
	}
	JB_Msg_CantFind(Self, JB_SyxNil, nil, nil);
	return nil;
}

Message* SC_Msg_NeedMarker(Message* Self, JB_String* S, bool B) {
	Message* Rz = nil;
	Message* F = JB_Msg_FindSyxName(Self, JB_SyxTmp, S, false);
	if (F) {
		return F;
	}
	Rz = JB_Syx_Msg(JB_SyxTmp, S);
	if (B) {
		(JB_Ring_LastSet(Self, Rz));
	}
	 else {
		(JB_Ring_FirstSet(Self, Rz));
	}
	return Rz;
}

bool SC_Msg_NeedsPreprocess(Message* Self) {
	if ((JB_Msg_EqualsSyx(Self, JB_SyxTRel, false)) or SC_Msg_OperatorIsARel(Self, JB_LUB[235])) {
		return true;
	}
	if (JB_Msg_EqualsSyx(Self, JB_SyxTmp, false)) {
		return (JB_Str_Equals(Self->Name, JB_LUB[2026], false)) or ((JB_Str_Equals(Self->Name, JB_LUB[1635], false)) or ((JB_Str_Equals(Self->Name, JB_LUB[1896], false)) or ((JB_Str_Equals(Self->Name, JB_LUB[1590], false)) or ((JB_Str_Equals(Self->Name, JB_LUB[2043], false)) or ((JB_Str_Equals(Self->Name, JB_LUB[1632], false)) or ((JB_Str_Equals(Self->Name, JB_LUB[1540], false)) or (JB_Str_Equals(Self->Name, JB_LUB[1765], false))))))));
	}
	if ((!JB_Msg_EqualsSyx(Self, JB_SyxRel, false))) {
		return nil;
	}
	Message* L = ((Message*)JB_Ring_First(Self));
	if (((JB_Msg_EqualsSyx(L, JB_SyxRel, false))) and ((JB_Msg_SyntaxEquals(((Message*)JB_Ring_NextSib(L)), JB_LUB[1855], false)))) {
		return ((JB_Msg_SyntaxEquals(((Message*)JB_Tree_Second(L)), JB_LUB[586], false))) and ((JB_Msg_SyntaxEquals(((Message*)JB_Tree_Second(((Message*)JB_Ring_Last(Self)))), JB_LUB[586], false)));
	}
	return false;
}

Message* SC_Msg_Negate(Message* Self) {
	Message* Rz = nil;
	Message* Upon = Self;
	Syntax F = Self->Func;
	if (F == JB_SyxThg) {
		return SC_Msg_NegateThg(Self);
	}
	if (F == JB_SyxBra) {
		Upon = SC_Msg_UnBra(Self);
		if (Upon->Func == JB_SyxThg) {
			JB_FreeIfDead(SC_Msg_NegateThg(Upon));
			JB_SetRef(Self->Obj, Upon->Obj);
			return Self;
		}
	}
	if (SC_Msg_OperatorIsBRel(Upon, JB_LUB[214])) {
		JB_Msg_BecomeStr(Upon, JB_SyxBra, JB_LUB[0]);
		return Self;
	}
	if (Upon->Func == JB_SyxRel) {
		Message* Opmsg = ((Message*)JB_Tree_Second(Upon));
		SCOperator* Op = ((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, Opmsg->Name));
		if (Op) {
			SCOperator* Nega = Op->Opposite;
			if (Nega) {
				SC_Msg_Become(Opmsg, Nega);
				return Self;
			}
		}
	}
	if (F == JB_SyxBra) {
		JB_Msg_BecomeStr(Self, JB_SyxBRel, JB_LUB[214]);
		return Self;
	}
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
		Rz = SC_Msg_WrapWith(Self, JB_SyxBRel, JB_LUB[214]);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	return Rz;
}

Message* SC_Msg_NegateThg(Message* Self) {
	if (JB_Str_Equals(Self->Name, JB_LUB[2004], false)) {
		JB_SetRef(Self->Name, JB_LUB[1648]);
		JB_SetRef(Self->Obj, JB_FalseBool);
		return Self;
	}
	if (JB_Str_Equals(Self->Name, JB_LUB[1648], false)) {
		JB_SetRef(Self->Name, JB_LUB[2004]);
		JB_SetRef(Self->Obj, JB_TrueBool);
		return Self;
	}
	return SC_Msg_WrapWith(Self, JB_SyxBRel, JB_LUB[214]);
}

Message* JB_Msg_NextOfName(Message* Self, Syntax Need, JB_String* Name) {
	Message* Ch = JB_Msg_NextOf(Self, Need);
	if ((!Ch)) {
		return nil;
	}
	if (JB_Msg_SyntaxEquals(Ch, Name, true)) {
		return Ch;
	}
	JB_Msg_CantFind(Self, Need, nil, Ch);
	return nil;
}

Message* JB_Msg_NextOf(Message* Self, Syntax Need) {
	if (Self) {
		Message* Ch = ((Message*)JB_Ring_NextSib(Self));
		if (((bool)Ch) and ((!Need) or (JB_Msg_EqualsSyx(Ch, Need, false)))) {
			return Ch;
		}
		JB_Msg_CantFind(Self, Need, nil, Ch);
	}
	return nil;
}

void SC_Msg_Next_Index(Message* Self, SCIterator* Iter, Message* Node2) {
	Message* I = JB_Incr(Iter->Index);
	if (I) {
		Message* _tmPf1 = JB_Incr(JB_Msg_Copy(I, Node2));
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(Self)));
		Message* _tmPf0 = JB_Incr(SC_NewEqRelWithMsgMsg(_tmPf1, _tmPf2));
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf2);
		(JB_Ring_PrevSibSet(Self, _tmPf0));
		JB_Decr(_tmPf0);
	}
	 else {
		debugger;
	}
	JB_Decr(I);
}

SCDecl* SC_Msg_NiceIsFlagSyntax(Message* Self, Message* Opch, Message* RN, SCNode* Name_space, Message* Side) {
	JB_Incr(Side);
	SCDecl* Cls = JB_Incr(SC_TypeOfExpr(Self, Name_space, nil));
	if ((!(((bool)Cls) and SC_Decl_IsNormal(Cls)))) {
		JB_Decr(Side);
		JB_Decr(Cls);
		return nil;
	}
	SCClass* Ty = JB_Incr(Cls->Type);
	JB_Decr(Cls);
	SCFunction* Fn = JB_Incr(Ty->TheIsFunc);
	if ((!Fn)) {
		FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf1, Ty->Name);
		JB_FS_AppendString(_fsf1, JB_LUB[172]);
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		JB_Msg_SyntaxExpect(Opch, _tmPf2);
		JB_Decr(_tmPf2);
		JB_Decr(Side);
		JB_Decr(Fn);
		JB_Decr(Ty);
		return nil;
	}
	JB_Decr(Ty);
	SCDecl* Arg1 = JB_Incr(((SCDecl*)JB_Array_Value(Fn->Args, 1)));
	if ((!Arg1)) {
		JB_Msg_SyntaxExpect(Fn->Source, JB_LUB[1286]);
		JB_Decr(Side);
		JB_Decr(Arg1);
		JB_Decr(Fn);
		return nil;
	}
	JB_Decr(Fn);
	SCClass* LookupType = JB_Incr(Arg1->Type);
	JB_Decr(Arg1);
	if ((!JB_Msg_Expect(RN, JB_SyxThg, nil))) {
		JB_Decr(Side);
		JB_Decr(LookupType);
		return nil;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(RN);
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Parent(Self)));
	Message* Exp = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	if ((!Side)) {
		Message* Bra = JB_Incr(((Message*)JB_Ring_Parent(Exp)));
		if ((!JB_Msg_EqualsSyx(Bra, JB_SyxBra, false))) {
			JB_SetRef(Bra, Exp);
		}
		if (JB_Msg_OperatorIn(Bra, JB_SyxArg)) {
			if (Bra == Exp) {
				JB_SetRef(Bra, SC_Msg_WrapWith(Exp, JB_SyxBra, JB_LUB[0]));
			}
			Bra->Func = JB_SyxRel;
			Message* Eq = JB_Incr(JB_Msg_Msg(Bra, JB_SyxOpp, JB_LUB[586]));
			JB_SetRef(Eq->Obj, Opch->Obj);
			JB_Decr(Eq);
			JB_Msg_AppendSyx(Bra, JB_SyxThg, JB_LUB[2004]);
			JB_SetRef(Side, ((Message*)JB_Ring_Last(Bra)));
		}
		JB_Decr(Bra);
	}
	Exp->Func = JB_SyxDot;
	bool OpchIsnt = (JB_Msg_SyntaxEquals(Opch, JB_LUB[1729], false));
	if (OpchIsnt) {
		JB_SetRef(Exp->Name, JB_LUB[1980]);
	}
	 else {
		JB_SetRef(Exp->Name, JB_LUB[1979]);
	}
	JB_Msg_BecomeStr(Opch, JB_SyxPrm, JB_LUB[0]);
	JB_SetRef(Opch->Obj, nil);
	RN->Func = JB_SyxDot;
	while (JB_Ring_HasChildren(RN)) {
		Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(RN)));
		JB_Tree_SyntaxAppend(Opch, _tmPf4);
		JB_Decr(_tmPf4);
	};
	JB_Msg_AppendSyx(RN, JB_SyxThg, LookupType->Name);
	JB_Decr(LookupType);
	JB_Tree_SyntaxAppend(RN, Opch);
	Message* _tmPf5 = JB_Incr(JB_Msg_Msg(Exp, JB_SyxPrm, JB_LUB[0]));
	JB_Tree_SyntaxAppend(_tmPf5, RN);
	JB_Decr(_tmPf5);
	if (OpchIsnt) {
		Message* NOT = JB_Incr(JB_Syx_OperatorPlus(JB_SyxBRel, JB_LUB[214]));
		JB_SetRef(Exp->Name, JB_LUB[1979]);
		if ((!Side)) {
			(JB_Ring_NextSibSet(Exp, NOT));
			JB_Tree_SyntaxAppend(NOT, Exp);
			JB_SetRef(Exp, NOT);
		}
		 else {
			(JB_Ring_NextSibSet(Side, NOT));
			JB_Tree_SyntaxAppend(NOT, Side);
			JB_SetRef(Side, NOT);
			JB_FreeIfDead(SC_TypeOfExpr(Side, Name_space, nil));
		}
		JB_Decr(NOT);
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	SCDecl* _tmPf6 = JB_Incr(SC_TypeOfExpr(Exp, Name_space, Side));
	JB_Decr(Exp);
	JB_Decr(Side);
	JB_SafeDecr(_tmPf6);
	JB_MsgPos_Destructor((&_usingf0));
	return _tmPf6;
}

Message* SC_Msg_NiceParent(Message* Self) {
	return SC_Msg_UseNonRefChangers(Self, true);
}

void JB_Msg_Nil__(Message* Self, FastString* Fs) {
	JB_DoAt(1);
}

int SC_Msg_NilCheckMode(Message* Self, bool Ok) {
	int Rz = 0;
	Rz = (2 * Ok);
	if (Rz) {
		Message* F = ((Message*)JB_Ring_First(Self));
		if (F) {
			Rz = (Rz + JB_Msg_DeepEquals(F, SC_Msg__NilchCompare(), false));
		}
	}
	return Rz;
}

Message* SC_Msg_NormaliseFunc(Message* Self, SCClass* AddSelf) {
	Message* Rz = nil;
	Message* Name = JB_Msg_NeedSyx(Self, JB_SyxThg);
	if ((!Name)) {
		return nil;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Name);
	Message* Prm = ((Message*)JB_Ring_NextSib(Name));
	if (JB_Msg_EqualsSyx(Prm, JB_SyxArg, false)) {
		Prm = JB_Syx_Msg(JB_SyxPrm, JB_LUB[0]);
		(JB_Ring_NextSibSet(Name, Prm));
	}
	 else if ((!Prm)) {
		Prm = JB_Msg_Msg(Self, JB_SyxPrm, JB_LUB[0]);
	}
	 else {
		Syntax Fn = Prm->Func;
		if ((!((Fn == JB_SyxBra) or ((Fn == JB_SyxList) or (Fn == JB_SyxPrm))))) {
			JB_Msg_SyntaxExpect(Prm, nil);
			JB_MsgPos_Destructor((&_usingf0));
			return nil;
		}
		Prm->Func = JB_SyxPrm;
	}
	if (AddSelf) {
		Message* D = ((Message*)JB_Ring_First(Prm));
		if ((!(((JB_Msg_EqualsSyx(D, JB_SyxDecl, false))) and (SC_Msg_OperatorIsThing(((Message*)JB_Tree_Second(D)), JB_LUB[1933]))))) {
			D = JB_Syx_Msg(JB_SyxDecl, JB_LUB[0]);
			JB_Msg_AppendSyx(D, JB_SyxThg, AddSelf->Name);
			JB_Msg_AppendSyx(D, JB_SyxThg, JB_LUB[1933]);
			(JB_Ring_FirstSet(Prm, D));
		}
	}
	Rz = ((Message*)JB_Ring_NextSib(Prm));
	if (Rz) {
		JB_Msg_Expect(Rz, JB_SyxArg, nil);
	}
	 else {
		Rz = JB_Msg_Msg(Self, JB_SyxArg, JB_LUB[0]);
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return Rz;
}

void SC_Msg_NotNilRZ(Message* Self, SCDecl* Type, SCNode* Space) {
	Message* Rel = ((Message*)JB_Ring_Last(Self));
	if ((!Rel)) {
		return;
	}
	Message* Nel = ((Message*)JB_Ring_Last(Rel));
	if ((!Nel)) {
		return;
	}
	if (JB_Msg_EqualsSyx(Nel, JB_SyxType, false)) {
		Nel = ((Message*)JB_Ring_First(Nel));
	}
	if ((SC_Msg_OperatorIsThing(Nel, JB_LUB[1810])) and SC_Decl_IsNormalObject(Type)) {
		JB_Msg_BecomeStr(Nel, JB_SyxDot, JB_LUB[1807]);
		JB_Tree_SyntaxAppend(Nel, (JB_Syx_Msg(JB_SyxThg, Type->Type->Name)));
		JB_Msg_AppendSyx(Nel, JB_SyxPrm, JB_LUB[0]);
		JB_SetRef(Nel->Obj, nil);
		JB_FreeIfDead(SC_TypeOfExpr(Nel, Space, nil));
	}
}

void JB_Msg_Num__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
}

bool SC_Msg_OarExpand(Message* Self) {
	if (JB_Msg_OperatorIn(Self, JB_SyxRel)) {
		if (JB_Msg_SyntaxEquals(Self, JB_LUB[1834], true)) {
			(JB_Msg_SyntaxDeprecate(Self, JB_LUB[1135]));
		}
		JB_SetRef(Self->Name, JB_LUB[1855]);
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(Self)));
		SC_Msg_BunchFix(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return true;
}

void JB_Msg_Oat__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '%');
	JB_Msg_RenderWithSpaces(Self, Fs, nil);
}

SCClass* SC_Msg_ObjCls(Message* Self) {
	SCDecl* O = ((SCDecl*)JB_Object_FastAs(Self->Obj, &SCDeclData));
	if (O) {
		if (SC_Decl_SyntaxIs(O, kSC__SCDeclInfo_ClassObj)) {
			return O->Contains->Type;
		}
	}
	return nil;
}

bool JB_Msg_ContainsStr(Message* Self, JB_String* S) {
	return ((bool)JB_Msg_FindNested(Self, JB_SyxNil, S, false));
}

bool JB_Msg_InMsg(Message* Self, Message* F) {
	return ((Message*)JB_Ring_Parent(Self)) == F;
}

bool JB_Msg_OperatorIn(Message* Self, Syntax F) {
	Message* P = ((Message*)JB_Ring_Parent(Self));
	if (P) {
		return P->Func == F;
	}
	return false;
}

bool SC_Msg_OperatorIsARel(Message* Self, JB_String* Name) {
	return ((bool)(Self)) and ((Self->Func == JB_SyxARel) and ((JB_Str_Equals(Self->Name, Name, false))));
}

bool SC_Msg_OperatorIsBRel(Message* Self, JB_String* Name) {
	return ((bool)(Self)) and ((Self->Func == JB_SyxBRel) and ((JB_Str_Equals(Self->Name, Name, false))));
}

bool SC_Msg_OperatorIsDot(Message* Self, JB_String* Name) {
	return ((bool)(Self)) and ((Self->Func == JB_SyxDot) and ((JB_Str_Equals(Self->Name, Name, true))));
}

bool SC_Msg_OperatorIsOpp(Message* Self, JB_String* Name) {
	return ((bool)(Self)) and ((Self->Func == JB_SyxOpp) and ((JB_Str_Equals(Self->Name, Name, true))));
}

bool SC_Msg_OperatorIsThing(Message* Self, JB_String* Name) {
	return ((bool)(Self)) and ((Self->Func == JB_SyxThg) and ((JB_Str_Equals(Self->Name, Name, true))));
}

bool SC_Msg_OperatorIsTmp(Message* Self, JB_String* Name) {
	return ((bool)(Self)) and ((Self->Func == JB_SyxTmp) and ((JB_Str_Equals(Self->Name, Name, false))));
}

bool JB_Msg_OperatorMatches(Message* Self, Message* M) {
	return (Self->Func == M->Func) and (JB_Str_Equals(Self->Name, M->Name, true));
}

bool JB_Msg_OperatorStarts(Message* Self, JB_String* S) {
	return JB_Str_MidEquals(Self->Name, 0, S, true);
}

void JB_Msg_Opp__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
}

bool SC_Msg_OppExpand(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxOpp, false)) {
		if ((JB_Msg_SyntaxEquals(Self, JB_LUB[1834], true)) or (JB_Msg_SyntaxEquals(Self, JB_LUB[600], true))) {
			return SC_Msg_OarExpand(Self);
		}
		if (JB_Msg_SyntaxEquals(Self, JB_LUB[1709], true)) {
			return SC_Msg_InitExpand(Self);
		}
	}
	return false;
}

int SC_Msg_OpScore(Message* Self) {
	JB_Object* O = Self->Obj;
	if (O) {
		return ((SCOperator*)O)->Score;
	}
	SCOperator* Op = ((SCOperator*)JB_Dict_ValueLower(SC__Opp_Dict, Self->Name));
	if (Op) {
		JB_SetRef(Self->Obj, Op);
		return Op->Score;
	}
	return SC__Opp_CustomOperatorScore;
}

JB_String* JB_Msg_OriginalParseData(Message* Self) {
	JB_Object* D = JB_ObjLayer(Self)->Obj2;
	if (JB_Object_Isa(D, &JB_StringData)) {
		return ((JB_String*)D);
	}
	return JB_LUB[0];
}

Message* SC_Msg_OrigMsg(Message* Self) {
	SCFile* F = SC_Msg_SCFile(Self);
	if (JB_File_SyntaxCast(F)) {
		return JB_Msg_FindTightest(SC_SCFile_Orig(F), Self->Position, false, true);
	}
	return nil;
}

JB_String* SC_Msg_OrigRender(Message* Self, FastString* Fs) {
	Message* N = SC_Msg_OrigMsg(Self);
	if (N) {
		return JB_Msg_Render(N, Fs);
	}
	return JB_Msg_Render(Self, Fs);
}

Message* SC_Msg_ParentForAddress(Message* Self) {
	int Gotaddr = 0;
	Message* P = ((Message*)JB_Ring_Parent(Self));
	while (P) {
		Syntax F = P->Func;
		if ((F != JB_SyxBra) and (F != JB_SyxType)) {
			if ((F == JB_SyxBRel) and (JB_Msg_SyntaxEquals(P, JB_LUB[241], false))) {
				Gotaddr++;
				if (Gotaddr > 1) {
					return nil;
				}
			}
			 else {
				return P;
			}
		}
		P = ((Message*)JB_Ring_Parent(P));
	};
	return nil;
}

Message* SC_Msg_ParentPoint(Message* Self) {
	Message* Curr = Self;
	while (Curr) {
		Message* OldMsg = Curr;
		Curr = ((Message*)JB_Ring_Parent(Curr));
		if (JB_Msg_EqualsSyx(Curr, JB_SyxArg, false)) {
			return OldMsg;
		}
	};
	return nil;
}

Message* SC_Msg_ParseShaderSub(Message* Self) {
	Message* Rz = nil;
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Parent(Self)));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(_tmPf2)));
	JB_Decr(_tmPf2);
	JB_String* Name = JB_Incr(_tmPf1->Name);
	JB_Decr(_tmPf1);
	if ((!JB_Str_Exists(Name))) {
		Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Parent(Self)));
		JB_Msg_SyntaxExpect(_tmPf3, JB_LUB[849]);
		JB_Decr(_tmPf3);
		JB_Decr(Name);
		JB_Decr(Rz);
		return nil;
	}
	JB_SetRef(Rz, SC_Msg_FindShader(Self, Name));
	if ((!Rz)) {
		JB_Decr(Name);
		JB_Decr(Rz);
		return nil;
	}
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[1675]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[2074]);
	JB_FS_AppendString(_fsf0, Name);
	JB_Decr(Name);
	JB_FS_AppendString(_fsf0, JB_LUB[2078]);
	JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	Message* StaticAdditions = JB_Incr(JB_Str_Parse(_tmPf4, JB_SyxArg, true));
	JB_Decr(_tmPf4);
	SC_AddToStaticSection(Self, StaticAdditions);
	JB_Decr(StaticAdditions);
	JB_SafeDecr(Rz);
	return Rz;
}

void JB_Msg_pinn__(Message* Self, FastString* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	Message* Opp = ((Message*)JB_Ring_NextSib(F));
	Message* L = ((Message*)JB_Ring_NextSib(Opp));
	JB_FS_SyntaxAppend(Fs, F);
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_SyntaxAppend(Fs, ((Message*)JB_Ring_Last(Opp)));
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_SyntaxAppend(Fs, L);
	JB_FS_AppendString(Fs, JB_LUB[154]);
	JB_FS_SyntaxAppend(Fs, ((Message*)JB_Ring_First(Opp)));
}

Message* JB_Msg_PoorAnt(Message* Self) {
	if (Self) {
		return ((Message*)JB_Ring_Parent(Self));
	}
	return nil;
}

void SC_Msg_PrepareAST(Message* Self, JB_String* Path) {
	Message* After = ((Message*)JB_Ring_FlatAfter(Self));
	Message* Msg = Self;
	while (Msg != After) {
		if (((JB_Msg_EqualsSyx(Msg, JB_SyxTmp, false))) and ((JB_Msg_SyntaxEquals(Msg, JB_LUB[1679], false)) or (JB_Msg_SyntaxEquals(Msg, JB_LUB[1610], false)))) {
			SC_Func__Tran_FuncTable(Msg);
		}
		Msg = ((Message*)JB_Ring_FlatNext0(Msg));
	};
}

int JB_Msg_PrevIndentCheck(Message* Self, Message* Pr) {
	int Prin = JB_Msg_CleanIndent(Pr);
	int Chin = JB_Msg_CleanIndent(Self);
	if ((!((Prin != Chin) and ((Prin != 254) and (Chin != 254))))) {
		return 0;
	}
	int IndExtra = Chin - Prin;
	if (JB_int_OperatorIsa(IndExtra, 2)) {
		if (IndExtra == 4) {
			return IndExtra;
		}
		if (IndExtra < 0) {
			if ((JB_int_OperatorIsa(IndExtra, 4)) or ((JB_int_OperatorIsa(Chin, 4)) or (JB_Msg_InInvisArg(Self)))) {
				return IndExtra;
			}
		}
		if ((IndExtra > 0) and ((JB_Msg_EqualsSyx(Pr, JB_SyxTmp, false)))) {
			return IndExtra;
		}
	}
	FastString* _fsf0 = JB_FS_Constructor(nil);
	JB_FS_AppendString(_fsf0, JB_LUB[914]);
	JB_FS_AppendInt32(_fsf0, Prin);
	JB_FS_AppendString(_fsf0, JB_LUB[201]);
	JB_FS_AppendInt32(_fsf0, Chin);
	JB_FS_AppendString(_fsf0, JB_LUB[196]);
	JB_FreeIfDead(JB_Tk__ErrorAlwaysAdd(JB_FS_GetResult(_fsf0), Self->Position));
	return 0;
}

void JB_Msg_Prm__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '(');
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		Message* _firstf2 = Ch;
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			if (_firstf2 != Ch) {
				JB_FS_AppendString(Fs, JB_LUB[302]);
			}
			//start;
			JB_FS_SyntaxAppend(Fs, Ch);
			Ch = _Nf1;
		};
		;
	}
	;
	JB_FS_AppendByte(Fs, ')');
}

Message* SC_Msg_QMarkRel(Message* Self) {
	Message* X = Self;
	while (true) {
		Message* P = ((Message*)JB_Ring_Parent(X));
		if ((SC_Msg_IsSetRel(P)) and JB_Tree_IsFirst(X)) {
			if (JB_Msg_OperatorIn(P, JB_SyxDecl)) {
				JB_Msg_SyntaxExpect(Self, nil);
				return nil;
			}
			return P;
		}
		X = P;
		if ((!JB_Msg_EqualsSyx(X, JB_SyxDot, false))) {
			return nil;
		}
	};
}

void JB_Msg_Ques__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[2107]);
	JB_FS_AppendString(Fs, Self->Name);
	Message* N = JB_Incr(((Message*)JB_Ring_First(Self)));
	if (N) {
		JB_FS_AppendByte(Fs, ' ');
		JB_FS_SyntaxAppend(Fs, N);
	}
	JB_Decr(N);
}

void JB_Msg_Quot__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[2108]);
	{
		Message* Ch = ((Message*)JB_Ring_First(Self));
		while (Ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(Ch)));
			JB_FS_SyntaxAppend(Fs, Ch);
			if (((Message*)JB_Ring_NextSib(Ch))) {
				JB_FS_AppendString(Fs, JB_LUB[302]);
			}
			Ch = _Nf1;
		};
		;
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[212]);
}

IntRange JB_Msg_Range(Message* Self) {
	return ((IntRange)ivec2{Self->Position, Self->Position + Self->RangeLength});
}

void JB_Msg_RangeSet(Message* Self, IntRange R) {
	Self->Position = R[0];
	Self->RangeLength = JB_Rg_Width(R);
}

int SC_Msg_RC_HasTemporary(Message* Self) {
	if (((JB_Msg_EqualsSyx(Self, JB_SyxFunc, false))) or (SC_Msg_IsStatementExpr(Self))) {
		return SC_Refs__RefBasisStruct(Self, false);
	}
	return 0;
}

NilState SC_Msg_RedundantDeclare(Message* Self, NilState D) {
	JB_String* _tmPf0 = JB_Incr(SC_Msg_OrigRender(Self, nil));
	JB_String* Str = JB_Incr(JB_Str_OperatorPlus(_tmPf0, JB_LUB[195]));
	JB_Decr(_tmPf0);
	if (true) {
		JB_Msg_SyntaxExpect(Self, Str);
	}
	JB_Decr(Str);
	return D;
}

NilState SC_Msg_RedundantVar(Message* Self, SCDecl* Dcl, NilCheckMode Test) {
	if (SC_khalai_SyntaxIs(Test, kSC__khalai_Soft) or SC_khalai_SyntaxIs(Test, kSC__khalai_While)) {
		return Test & kSC__NilState_Either;
	}
	if (SC__nil_Loops.NestDepth == 0) {
		JB_String* _tmPf0 = JB_Incr(SC_Msg_OrigRender(Self, nil));
		JB_String* _tmPf2 = JB_Incr(SC_NilState_RawName(SC_Decl_NilCurr(Dcl)));
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[194], _tmPf2));
		JB_Decr(_tmPf2);
		JB_String* Str = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf1));
		JB_Decr(_tmPf0);
		JB_Decr(_tmPf1);
		if (true) {
			JB_Msg_SyntaxExpect(Self, Str);
		}
		JB_Decr(Str);
	}
	return Test & kSC__NilState_Either;
}

bool SC_Msg_RefDisappears(Message* Self) {
	if (Self->Func == JB_SyxFunc) {
		Self = ((Message*)JB_Ring_Parent(Self));
	}
	{
		Message* P = Self;
		while (P) {
			Syntax F = P->Func;
			if (F == JB_SyxBra) {
				0;
			}
			 else if (F == JB_SyxType) {
				SCDecl* D = SC_Msg_AsDecl(P);
				if ((!D)) {
					debugger;
					return nil;
				}
				if ((!SC_Decl_IsNormalObject(D))) {
					return true;
				}
			}
			 else if (F == JB_SyxPrm) {
				return false;
			}
			 else if (F == JB_SyxArg) {
				return true;
			}
			 else if (F == JB_SyxRel) {
				JB_Object* Comp = ((Message*)JB_Tree_Second(P))->Obj;
				if (JB_Object_FastIsa(Comp, &SCOperatorData)) {
					return (((bool)SC_Opp_SyntaxIs(((SCOperator*)Comp), kSC__OpMode_Compare)) and (!((bool)SC_Opp_SyntaxIs(((SCOperator*)Comp), kSC__OpMode_Custom))));
				}
				return false;
			}
			 else {
				return false;
			}
			P = ((Message*)JB_Ring_Parent(P));
		};
		;
	}
	;
	return false;
}

uint SC_Msg_Reg(Message* Self) {
	return SC_Msg_RegOrNum(Self, true);
}

uint SC_Msg_RegOrNum(Message* Self, bool NeedReg) {
	if ((!NeedReg) and (JB_byte_LowerCase((JB_Str_First(Self->Name))) != 'r')) {
		return JB_Msg_Int(Self, 0);
	}
	int64 Reg = JB_Msg_Int(Self, 1);
	if (Reg <= 31) {
		return ((uint)Reg);
	}
	if (true) {
		JB_Msg_SyntaxExpect(Self, JB_LUB[855]);
	}
	return 0;
}

void JB_Msg_Rel__(Message* Self, FastString* Fs) {
	JB_Msg_RenderWithSpaces(Self, Fs, nil);
}

bool SC_Msg_RelFix(Message* Self, bool Force) {
	bool Rz = false;
	if (SC_Msg_AndOrExpansionTest(Self) == -1) {
		return nil;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Self)));
	Message* One = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_NextSib(One)));
	Message* Plus = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (Force or (!Plus->Obj)) {
		int PlusScore = SC_Msg_OpScore(Plus);
		Message* SubRel = JB_Incr(((Message*)JB_Ring_NextSib(Plus)));
		if (JB_Msg_SyntaxEquals(Plus, JB_LUB[566], false)) {
			SC_Msg_FixErl(Self);
		}
		 else if (JB_Msg_EqualsSyx(SubRel, JB_SyxRel, false)) {
			Rz = SC_Msg_RelFix(SubRel, true);
			if ((!(JB_Msg_OperatorIn(Self, JB_SyxDecl) or JB_Msg_OperatorIn(Self, JB_SyxArg)))) {
				Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(SubRel)));
				Message* Two = JB_Incr(_tmPf2);
				JB_Decr(_tmPf2);
				Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_NextSib(Two)));
				JB_Decr(Two);
				Message* LessThan = JB_Incr(_tmPf3);
				JB_Decr(_tmPf3);
				Message* Last = JB_Incr(((Message*)JB_Ring_NextSib(LessThan)));
				if (SC_Msg_OpScore(LessThan) > PlusScore) {
					JB_Tree_SyntaxAppend(Self, LessThan);
					JB_Tree_SyntaxAppend(Self, Last);
					(JB_Ring_FirstSet(SubRel, Plus));
					(JB_Ring_FirstSet(SubRel, One));
					SC_Msg_RelFix(SubRel, true);
					Rz = true;
				}
				JB_Decr(LessThan);
				JB_Decr(Last);
			}
		}
		JB_Decr(SubRel);
	}
	JB_Decr(One);
	JB_Decr(Plus);
	return Rz;
}

Message* SC_Msg_RemoveTypeCasts(Message* Self) {
	Message* Rz = nil;
	while (((bool)Rz) and ((JB_Msg_EqualsSyx(Rz, JB_SyxBra, false)) or (JB_Msg_EqualsSyx(Rz, JB_SyxType, false)))) {
		Rz = ((Message*)JB_Ring_First(Rz));
	};
	return Rz;
}

JB_String* JB_Msg_Render(Message* Self, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	JB_FS_SyntaxAppend(Fs, Self);
	return JB_FS_SmartResult(Fs, Fs_in);
}

void JB_Msg_render_jbin_sub(Message* Self, FastString* Js) {
	Message* Ch = Self;
	Message* After = ((Message*)JB_Ring_FlatAfter(Self));
	while (((bool)Ch) and (Ch != After)) {
		int Depth = 0;
		Message* Curr = Ch;
		Ch = ((Message*)JB_Ring_FlatNextDepth(Curr, (&Depth), true));
		JB_bin_Add(Js, Curr->Func, Curr->Name, Depth > 0);
		JB_bin_Exit(Js, (-Depth));
	};
}

JB_String* JB_Msg_RenderJbin(Message* Self, JB_String* Shell_path, FastString* Fs_in) {
	FastString* Fs = JB_FS__FastNew(Fs_in);
	if ((!Self)) {
		return JB_LUB[0];
	}
	FastString* Js = ((FastString*)Fs);
	if (JB_Str_Exists(Shell_path)) {
		JB_bin_Sheb(Js, Shell_path);
	}
	JB_FS_AppendString(Js, JB__JbinHeader);
	JB_Msg_render_jbin_sub(Self, Js);
	return JB_FS_SmartResult(Fs, Fs_in);
}

void JB_Msg_RenderPrm(Message* Self, FastString* Fs, byte B1, byte B2) {
	JB_FS_AppendByte(Fs, B1);
	JB_Msg_FSListSep(Self, Fs, JB_LUB[302]);
	JB_FS_AppendByte(Fs, B2);
}

JB_String* SC_Msg_RenderType(Message* Self) {
	JB_Object* D = Self->Obj;
	if (JB_Object_FastIsa(D, &SCDeclData)) {
		return JB_Msg_Render(SC_Decl_WriteSimpleType(((SCDecl*)D)), nil);
	}
	if (JB_Object_FastIsa(D, &SCModuleData)) {
		return ((SCModule*)D)->Name;
	}
	return JB_Msg_Render(Self, nil);
}

JB_String* SC_Msg_RenderTypeAndName(Message* Self) {
	SCDecl* D = JB_Incr(SC_Msg_MsgDecl(Self));
	if (D) {
		JB_String* _tmPf0 = JB_Incr(SC_Decl_RenderTypeAndName(D, 1));
		JB_Decr(D);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(D);
	return JB_Msg_Render(Self, nil);
}

void JB_Msg_RenderWithSpaces(Message* Self, FastString* Fs, Message* Ch) {
	if ((!(Ch))) {
		Ch = ((Message*)JB_Ring_First(Self));
	}
	while (Ch) {
		JB_FS_SyntaxAppend(Fs, Ch);
		Ch = ((Message*)JB_Ring_NextSib(Ch));
		if ((!Ch)) {
			return;
		}
		JB_FS_AppendByte(Fs, ' ');
	};
}

Message* SC_Msg_ReplaceInbuiltSub(Message* Self, SCNode* Name_space, SCDecl* Self_decl) {
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1810], false)) {
		return SC_Msg_FalsifyNil(Self);
	}
	 else if (JB_Msg_SyntaxEquals(Self, JB_LUB[1567], false)) {
		if ((!(((bool)Self_decl) and SC_Decl_IsCArray(Self_decl)))) {
			JB_Msg_SyntaxExpect(Self, JB_LUB[1291]);
			return nil;
		}
		return JB_int_Msg(Self_decl->C_Array);
	}
	 else if (JB_Msg_SyntaxEquals(Self, JB_LUB[1604], false)) {
		Message* F = JB_Msg_NeedSyx(Self, JB_SyxSStr);
		if (F) {
			ErrorMarker IsOK = JB_Rec_Mark(JB_StdErr);
			JB_SetRef(F->Name, JB_Str_Digest(F->Name));
			if ((!JB_ErrorMarker_SyntaxCast(IsOK)) and JB_Rec_CanAddMore(JB_StdErr, kJB__ErrorSeverity_Error)) {
				JB_Error* Err = ((JB_Error*)JB_Ring_Last(JB_StdErr->Errors));
				if (Err) {
					JB_Err_ShiftPosition(Err, F->Position);
				}
			}
		}
		JB_Msg_BecomeStr(Self, JB_SyxBra, JB_LUB[0]);
	}
	 else if (JB_Msg_SyntaxEquals(Self, JB_LUB[1556], false)) {
		Message* F = JB_Msg_NeedSyx(Self, JB_SyxSStr);
		if (F) {
			JB_SetRef(F->Name, JB_Str_Compress(F->Name, kJB__MZLab_Default, nil));
		}
		JB_Msg_BecomeStr(Self, JB_SyxBra, JB_LUB[0]);
	}
	 else if (JB_Msg_SyntaxEquals(Self, JB_LUB[1988], false)) {
		SCClass* Cls = SC__Func_CurrFunc->Cls;
		if ((!Cls)) {
			JB_Msg_SyntaxExpect(Self, nil);
			return nil;
		}
		JB_Msg_BecomeNum(Self, Cls->TaskObjectCount);
	}
	 else if (JB_Msg_SyntaxEquals(Self, JB_LUB[1949], false)) {
		if ((!Self_decl)) {
			JB_Msg_SyntaxExpect(Self, JB_LUB[1338]);
			return nil;
		}
		return SC_Msg_InBuiltSizeOf(Self, Name_space, Self_decl, Self);
	}
	 else if ((JB_Msg_SyntaxEquals(Self, JB_LUB[1186], false)) or (JB_Msg_SyntaxEquals(Self, JB_LUB[1187], false))) {
		SC_Create_JeeboxTest(Self);
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(Self, nil);
		}
	}
	return nil;
}

Message* JB_Msg_ReplaceInto(Message* Self, Message* W) {
	(JB_Ring_PrevSibSet(Self, W));
	JB_Tree_SyntaxAppend(W, Self);
	return W;
}

Message* SC_Msg_ReplaceWith(Message* Self, Message* J) {
	(JB_Ring_PrevSibSet(Self, J));
	JB_Tree_Remove(Self);
	return J;
}

Message* SC_Msg_ReplaceWithChild(Message* Self) {
	Message* Rz = nil;
	JB_SetRef(Rz, ((Message*)JB_Ring_First(Self)));
	(JB_Ring_PrevSibSet(Self, Rz));
	JB_Tree_Remove(Self);
	JB_SafeDecr(Rz);
	return Rz;
}

JB_Object* JB_Msg_RestoreLoad(Message* Self) {
	JB_Object* Rz = nil;
	ObjectLoader L = ((ObjectLoader){});
	if ((!JB_LD_VerifyFormat((&L), Self))) {
		JB_LD_Destructor((&L));
		JB_Decr(Rz);
		return nil;
	}
	Dictionary* Objs = JB_Incr(JB_Dict_Constructor(nil));
	JB_LD_Preload((&L), Self, Objs);
	if (JB_Rec_OK(JB_StdErr)) {
		JB_LD_LoadForReal((&L), Self, Objs);
	}
	JB_SetRef(Rz, L.Result);
	JB_LD_Finish((&L));
	JB_ObjClass(Objs);
	JB_Decr(Objs);
	JB_LD_Destructor((&L));
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Msg_Resync(Message* Self, Message* Parent) {
	Message* Rz = nil;
	Rz = Self;
	while (((bool)Rz) and (((Message*)JB_Ring_Parent(Rz)) != Parent)) {
		Rz = ((Message*)JB_Ring_Parent(Rz));
	};
	return Rz;
}

void SC_Msg_Safe(Message* Self, FastString* Fs) {
	SC_Str_Safe(Self->Name, Fs, false);
}

void SC_Msg_SafeRemove(Message* Self, Syntax T) {
	if (Self) {
		JB_Msg_BecomeStr(Self, T, JB_LUB[0]);
		(JB_Msg_SyntaxIsSet(Self, kJB__MsgParseFlags_Inserted, true));
		{
			Message* C = JB_Incr(((Message*)JB_Ring_First(Self)));
			while (C) {
				Message* _Nf1 = JB_Incr((((Message*)JB_Ring_NextSib(C))));
				JB_Tree_Remove(C);
				JB_SetRef(C, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(C);
			;
		};
	}
}

void SC_Msg_SafeReplaceWith(Message* Self, Message* Incoming) {
	SC_Msg_SafeRemove(Self, JB_SyxBra);
	JB_Tree_SyntaxAppend(Self, Incoming);
}

SCArg* SC_Msg_SCArg(Message* Self, SCNode* P, Message* Avoid) {
	if ((!Self)) {
		return nil;
	}
	if (((bool)Avoid) and ((!JB_Msg_EqualsSyx(Avoid, JB_SyxArg, false)) and (!JB_Msg_EqualsSyx(Avoid, JB_SyxTmp, false)))) {
		if (JB_Object_FastIsa(P, &SCArgData)) {
			return ((SCArg*)P);
		}
		debugger;
		return nil;
	}
	SCArg* R = SC_Msg_AsArg(Self);
	if ((!(P))) {
		P = SC_Msg_MsgArg(Self);
	}
	if ((!R) and ((bool)P)) {
		R = SC_Arg_Constructor(nil, Self);
		if (JB_Object_FastIsa(P, &SCArgData)) {
			JB_SetRef(R->ParentFunc, ((SCArg*)P)->ParentFunc);
			R->IsClassArg = ((SCArg*)P)->IsClassArg;
			R->Parent = ((SCArg*)P);
		}
		 else if (JB_Object_FastIsa(P, &SCFunctionData)) {
			JB_SetRef(R->ParentFunc, P);
			R->IsClassArg = ((bool)((SCFunction*)P)->Cls);
			R->Parent = ((SCFunction*)P)->Parent;
		}
		JB_SetRef(Self->Obj, R);
	}
	if (((bool)P) and ((bool)R)) {
		R->Project = P->Project;
	}
	return R;
}

SCArg* SC_Msg_SCArgNested(Message* Self, Message* Base, SCNode* P) {
	while (true) {
		Message* Cp = JB_Msg_Ancestor(Self, JB_SyxArg);
		if (Cp == Base) {
			return SC_Msg_SCArg(Self, P, nil);
		}
		if ((!Cp)) {
			return nil;
		}
		Self = Cp;
	};
}

SCFile* SC_Msg_SCFile(Message* Self) {
	{
		Message* S = Self;
		while (S) {
			JB_Object* R = JB_ObjLayer(S)->Obj;
			if (JB_Object_FastIsa(R, &SCFileData)) {
				return ((SCFile*)R);
			}
			if (JB_Msg_EqualsSyx(S, JB_SyxArg, false)) {
				return nil;
			}
			S = ((Message*)JB_Ring_Parent(S));
		};
		;
	}
	;
	return nil;
}

void JB_Msg_SCnj__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
}

void JB_Msg_SCom__(Message* Self, FastString* Fs) {
	Message* Ch = JB_Incr(((Message*)JB_Ring_First(Self)));
	if ((!Ch)) {
		JB_FS_AppendString(Fs, JB_LUB[148]);
		JB_Decr(Ch);
		return;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendString(Fs, JB_LUB[148]);
	if (JB_Tree_HasOneChild(Ch)) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(Ch)));
		JB_FS_SyntaxAppend(Fs, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else {
		JB_Msg_FSListArg(Ch, Fs, false);
		JB_FS_AppendByte(Fs, '\n');
	}
	JB_Decr(Ch);
	JB_FS_AppendString(Fs, JB_LUB[119]);
}

void JB_Msg_SDot__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '.');
	JB_FS_AppendString(Fs, Self->Name);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Self)));
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
}

int SC_Msg_SelfUsedForProperty(Message* Self) {
	Message* R = ((Message*)JB_Ring_Parent(Self));
	if ((!(((bool)R) and ((Self->Func == JB_SyxDot) and (R->Func == JB_SyxRel))))) {
		return 0;
	}
	if (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(Self)), JB_LUB[1933])) {
		if (SC_Msg_DotType(Self)) {
			return 1 + ((!JB_Str_Equals(JB_Msg_Name(((Message*)JB_Tree_Second(R))), JB_LUB[586], false)));
		}
	}
	return 0;
}

Message* SC_Msg_SendPerryErrors(Message* Self) {
	JB_Tree_Clear(Self);
	Message* _tmPf0 = JB_Incr(SC_AC__ErrorsToPerry());
	JB_Tree_SyntaxAppend(Self, _tmPf0);
	JB_Decr(_tmPf0);
	return Self;
}

bool SC_Msg_SettingToNil(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxDecl, false)) {
		Message* D = ((Message*)JB_Ring_Last(Self));
		if (((JB_Msg_EqualsSyx(D, JB_SyxRel, false))) and ((JB_Msg_SyntaxEquals(((Message*)JB_Ring_Last(D)), JB_LUB[1810], true)))) {
			return true;
		}
	}
	return false;
}

DotUseType SC_Msg_SetType(Message* Self) {
	DotUseType D = SC_Msg_DotType(Self);
	if (D) {
		return D;
	}
	if (Self->Func == JB_SyxAcc) {
		return kSC__DotUseType_Memory;
	}
	if (SC_Msg_OperatorIsBRel(Self, JB_LUB[294])) {
		return kSC__DotUseType_Memory;
	}
	return 0;
}

bool JB_Msg_ShallowEquals(Message* Self, Message* B, bool Aware) {
	return (Self->Func == B->Func) and JB_Str_Equals(Self->Name, B->Name, Aware);
}

void JB_Msg_Sheb__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[223]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendByte(Fs, '\n');
}

void SC_Msg_SlidePositions(Message* Self, int Add) {
	{
		Message* S = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while (((bool)(S)) and (S != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(S)));
			if (S->Position >= 0) {
				S->Position = (S->Position + Add);
			}
			S = _N_f2;
		};
		;
	};
}

void JB_Msg_SStr__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[576]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendString(Fs, JB_LUB[1464]);
}

void SC_Msg_StartUsingAfter(Message* Self) {
	int Biggest = -1;
	JB_MemoryLayer* L = JB_ObjLayer(Self);
	JB_String* D = JB_Msg_OriginalParseData(Self);
	if (JB_Str_Exists(D)) {
		{
			Message* S = Self;
			Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
			while (((bool)(S)) and (S != _afterf1)) {
				Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(S)));
				if ((S->Position >= 0) and (JB_ObjLayer(S) == L)) {
					Biggest = JB_int_OperatorMax(Biggest, JB_Msg_After(S));
				}
				S = _N_f2;
			};
			;
		}
		;
		Ind B2 = JB_Str_InStr(D, JB_LUB[41], Biggest, JB_int__Max(), false);
		if (JB_Ind_SyntaxCast(B2)) {
			Biggest = B2;
		}
		Biggest++;
	}
	JB__Tk_Using.Position = Biggest;
	JB__Tk_Using.Flags = kJB__MsgParseFlags_Inserted;
	JB_Mem_Use(JB_ObjLayer(Self));
}

void SC_Msg_StatementExprSet(Message* Self, SCArg* Arg) {
	(SC_Msg_TmpTypeSet(Self, kSC__ASMtmp_kStatementExpression));
	Arg->IsStatementExpr = true;
}

void JB_Msg_SThg__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
}

void JB_Msg_Str__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '"');
	JB_FS_AppendEscape(Fs, Self->Name);
	{
		Message* Ch = JB_Incr(((Message*)JB_Ring_First(Self)));
		while (Ch) {
			Message* _Nf1 = JB_Incr((((Message*)JB_Ring_NextSib(Ch))));
			if (JB_Msg_EqualsSyx(Ch, JB_SyxEmb, false)) {
				JB_FS_AppendEscape(Fs, Ch->Name);
			}
			 else {
				JB_FS_AppendByte(Fs, '$');
				JB_FS_AppendByte(Fs, '{');
				JB_FS_SyntaxAppend(Fs, Ch);
				JB_FS_AppendByte(Fs, '}');
			}
			JB_SetRef(Ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(Ch);
		;
	}
	;
	JB_FS_AppendByte(Fs, '"');
}

Message* JB_Msg_NeedSyxOK(Message* Self, Syntax Need, Syntax OK) {
	if (Self) {
		Message* Found = ((Message*)JB_Ring_First(Self));
		if (Found) {
			if ((JB_Msg_EqualsSyx(Found, OK, false)) or ((JB_Msg_EqualsSyx(Found, Need, false)) or (OK == JB_SyxNil))) {
				return Found;
			}
		}
		if (OK != JB_SyxNil) {
			JB_Msg_CantFind(Self, Need, nil, Found);
		}
	}
	return nil;
}

Message* JB_Msg_NeedSyx(Message* Self, Syntax S) {
	Message* Found = ((Message*)JB_Ring_First(Self));
	if (Found) {
		if ((S == nil) or (JB_Msg_EqualsSyx(Found, S, false))) {
			return Found;
		}
	}
	if (Self) {
		JB_Msg_CantFind(Self, S, JB_LUB[0], Found);
	}
	return nil;
}

Message* JB_Msg_NeedSyxInt(Message* Self, Syntax S, int N) {
	Message* Ch = ((Message*)JB_Tree_Get(Self, N));
	if (Ch) {
		if ((!S) or (Ch->Func == S)) {
			return Ch;
		}
	}
	JB_Msg_CantFind(Self, S, nil, Ch);
	return nil;
}

Message* JB_Msg_NeedSyxName(Message* Self, Syntax S, JB_String* Name) {
	Message* F = JB_Msg_NeedSyx(Self, S);
	if (JB_Msg_Expect(F, JB_SyxNil, Name)) {
		return F;
	}
	return nil;
}

void JB_Msg_SetStr(Message* Self, JB_String* Key, JB_String* Value) {
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxStr, Value));
	(JB_Msg_SetMsg(Self, Key, _tmPf0));
	JB_Decr(_tmPf0);
}

void JB_Msg_SetMsg(Message* Self, JB_String* Key, Message* Value) {
	JB_Tree_SyntaxAppend(JB_Msg_AccessAdd(Self, Key), Value);
}

Message* JB_Msg_GetConf(Message* Self, JB_String* Key, bool Err) {
	{
		Message* _LoopSrcf1 = JB_Msg_ConfArg(Self);
		Message* Item = JB_config_ConfFirst(_LoopSrcf1);
		while (Item) {
			if (JB_Msg_SyntaxEquals(Item, Key, true)) {
				Message* F = ((Message*)JB_Ring_First(Item));
				if (F) {
					return F;
				}
				return Item;
			}
			Item = ((Message*)JB_Ring_NextSib(Item));
		};
	}
	;
	if (Err) {
		if (true) {
			JB_Msg_SyntaxExpect(Self, JB_Str_OperatorPlus(Key, JB_LUB[190]));
		}
	}
	return nil;
}

void JB_Msg_AppendString(Message* Self, JB_String* Key) {
	JB_Msg_AppendSyx(Self, JB_SyxStr, Key);
}

void JB_Msg_AppendSyx(Message* Self, Syntax Fn, JB_String* Name) {
	JB_FreeIfDead(JB_Msg_Msg(Self, Fn, Name));
}

void JB_Msg_AppendNum(Message* Self, int64 Num) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(Num, nil));
	JB_Msg_AppendSyx(Self, JB_SyxNum, _tmPf0);
	JB_Decr(_tmPf0);
}

void JB_Msg_SyntaxDeprecate(Message* Self, JB_String* Error) {
	JB_Rec__NewProblem(Self, Error, nil);
}

bool JB_Msg_SyntaxEquals(Message* Self, JB_String* Name, bool Aware) {
	return ((bool)Self) and JB_Str_Equals(Self->Name, Name, Aware);
}

bool JB_Msg_EqualsSyx(Message* Self, Syntax X, bool Aware) {
	return ((bool)Self) and (Self->Func == X);
}

void JB_Msg_SyntaxExpect(Message* Self, JB_String* Error) {
	JB_Rec__NewErrorWithNode(Self, Error, nil);
}

bool JB_Msg_SyntaxIs(Message* Self, MsgParseFlags F) {
	if (Self) {
		return ((bool)(Self->Flags & F));
	}
	return false;
}

void JB_Msg_SyntaxIsSet(Message* Self, MsgParseFlags F, bool Value) {
	if (Self) {
		if (Value) {
			Self->Flags = (Self->Flags | F);
		}
		 else {
			Self->Flags = (Self->Flags & (~F));
		}
	}
}

MessagePosition JB_Msg_SyntaxUsing(Message* Self) {
	MessagePosition Rz = ((MessagePosition){});
	Rz = JB__Tk_Using;
	Rz.Layer = JB_Class_Layer((&MessageData));
	JB__Tk_Using.Position = Self->Position;
	JB__Tk_Using.Length = Self->RangeLength;
	JB__Tk_Using.Tag = Self->Tag;
	JB__Tk_Using.Flags = kJB__MsgParseFlags_Inserted;
	JB_Mem_Use(JB_ObjLayer(Self));
	return Rz;
}

void JB_Msg_SyntaxWarn(Message* Self, JB_String* Error) {
	JB_Rec__NewWarning(Self, Error, nil);
}

bool SC_Msg_TargetTest(Message* Self) {
	JB_Msg_Expect(Self, JB_SyxThg, nil);
	if ((!((!JB_Msg_SyntaxEquals(Self, JB_LUB[1773], true)) or (!JB_Msg_SyntaxEquals(Self, JB_LUB[1774], true))))) {
		JB_Msg_SyntaxExpect(Self, JB_LUB[1359]);
		return nil;
	}
	if ((!(!JB_Msg_SyntaxEquals(Self, JB_LUB[1759], true)))) {
		JB_Msg_SyntaxExpect(Self, JB_LUB[1364]);
		return nil;
	}
	if ((!(!JB_Msg_SyntaxEquals(Self, JB_LUB[2049], true)))) {
		JB_Msg_SyntaxExpect(Self, JB_LUB[1365]);
		return nil;
	}
	if ((!(!JB_Msg_SyntaxEquals(Self, JB_LUB[1705], true)))) {
		JB_Msg_SyntaxExpect(Self, JB_LUB[1363]);
		return nil;
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1589], true)) {
		return SC__Options_TargetDebug;
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1893], true)) {
		return (!SC__Options_TargetDebug);
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1867], true)) {
		return ((bool)SC__Options_PerryOutput);
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1786], true)) {
		return SC__Options_ProjectIsMiniLib;
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1706], true)) {
		return ((bool)SC__Imp_CurrIsManuallyImported);
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[2004], true)) {
		return true;
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1648], true)) {
		return false;
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1856], true)) {
		return JB_Platform__OSX();
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[2048], true)) {
		return JB_Platform__Win();
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1754], true)) {
		return JB_Platform__Lin();
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1605], true)) {
		return SC__Options_IsDirectTest;
	}
	return SC_SC_Targets__SyntaxAccess(Self->Name);
}

Message* SC_Msg_TaskConBefore(Message* Self) {
	Message* Marker = JB_Msg_FindSyxName(Self, JB_SyxDot, JB_LUB[1563], false);
	if (Marker) {
		Marker = ((Message*)JB_Ring_NextSib(Marker));
	}
	 else {
		Marker = ((Message*)JB_Ring_First(Self));
	}
	if (Marker) {
		return Marker;
	}
	return JB_Msg_Msg(Self, JB_SyxSheb, JB_LUB[1987]);
}

Message* SC_Msg_TempIntoBlock(Message* Self, Message* ParentPlace) {
	Message* Rz = nil;
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(Self)));
	Message* FuncMsg = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	if (((JB_Msg_EqualsSyx(FuncMsg, JB_SyxDot, false))) and (JB_FreeIfDead(((Message*)JB_Ring_First(FuncMsg))) == Self)) {
		0;
	}
	 else {
		if ((!JB_Msg_EqualsSyx(FuncMsg, JB_SyxPrm, false))) {
			SC_Msg_RefDisappears(Self);
			JB_Decr(FuncMsg);
			JB_Decr(Rz);
			return nil;
		}
		JB_SetRef(FuncMsg, ((Message*)JB_Ring_Parent(FuncMsg)));
	}
	SCFunction* Fn = JB_Incr(SC_Msg_MsgFunc(FuncMsg));
	if ((!(((JB_Msg_EqualsSyx(FuncMsg, JB_SyxFunc, false)) or (JB_Msg_EqualsSyx(FuncMsg, JB_SyxDot, false))) and ((!Fn) or (JB_ObjClass(Fn) == &SCFunctionData))))) {
		debugger;
		JB_Decr(Fn);
		JB_Decr(FuncMsg);
		JB_Decr(Rz);
		return nil;
	}
	if ((!(((bool)Fn) and ((bool)Fn->ReturnType)))) {
		JB_FreeIfDead(SC_Func__TempMoveOut(Self, ParentPlace));
		JB_Decr(Fn);
		JB_Decr(FuncMsg);
		JB_Decr(Rz);
		return nil;
	}
	JB_Decr(Fn);
	MessagePosition Using = JB_Msg_SyntaxUsing(Self);
	Message* Arg = JB_Incr(SC_Msg_HasOwnBlock(FuncMsg));
	Message* TmpFuncThg = nil;
	Message* TmpFuncDecl = nil;
	if (Arg) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Parent(FuncMsg)));
		Message* Rel = JB_Incr(_tmPf1);
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Parent(Rel)));
		JB_SetRef(TmpFuncDecl, _tmPf2);
		JB_Decr(_tmPf2);
		Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(Rel)));
		JB_Decr(Rel);
		JB_SetRef(TmpFuncThg, _tmPf3);
		JB_Decr(_tmPf3);
	}
	 else {
		JB_SetRef(Arg, SC_Msg_CreateOwnBlock(FuncMsg));
		if ((!Arg)) {
			JB_Decr(TmpFuncDecl);
			JB_Decr(TmpFuncThg);
			JB_Decr(Arg);
			JB_MsgPos_Destructor((&Using));
			JB_Decr(FuncMsg);
			JB_Decr(Rz);
			return nil;
		}
		JB_String* TmpFuncVar = JB_Incr(SC_UniqueTmpVar(SC__Func_CurrFunc, JB_LUB[1996]));
		JB_SetRef(TmpFuncDecl, SC_MakeDecl(JB_LUB[0], TmpFuncVar, FuncMsg, kSC__SCDeclInfo_Body));
		JB_SetRef(TmpFuncThg, (JB_Syx_Msg(JB_SyxThg, TmpFuncVar)));
		JB_Decr(TmpFuncVar);
		JB_SetRef(TmpFuncThg->Obj, TmpFuncDecl->Obj);
		JB_Tree_SyntaxAppend(Arg, TmpFuncDecl);
		Message* Rej = JB_Incr(SC_NewRejoin());
		JB_Tree_SyntaxAppend(Rej, TmpFuncThg);
		JB_Tree_SyntaxAppend(Arg, Rej);
		JB_Decr(Rej);
	}
	JB_Decr(FuncMsg);
	JB_Decr(Arg);
	JB_Decr(TmpFuncThg);
	JB_String* TmpParamName = JB_Incr(SC_UniqueTmpVar(SC__Func_CurrFunc, JB_LUB[1996]));
	JB_SetRef(Rz, JB_Syx_OperatorPlus(JB_SyxThg, TmpParamName));
	JB_FreeIfDead(SC_Msg_ReplaceWith(Self, Rz));
	Message* TmpParamDecl = JB_Incr(SC_MakeDecl(JB_LUB[0], TmpParamName, Self, kSC__SCDeclInfo_Body));
	JB_Decr(TmpParamName);
	JB_SetRef(Rz->Obj, TmpParamDecl->Obj);
	(JB_Ring_PrevSibSet(TmpFuncDecl, TmpParamDecl));
	JB_Decr(TmpFuncDecl);
	JB_Decr(TmpParamDecl);
	JB_MsgPos_Destructor((&Using));
	JB_SafeDecr(Rz);
	return Rz;
}

void JB_Msg_Test(Message* Self, JB_String* New_render, JB_String* Name) {
	if ((!JB_Msg_TestSub(Self, New_render, Name))) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1273]);
		JB_FS_AppendString(_fsf0, Name);
		JB_FS_AppendString(_fsf0, JB_LUB[562]);
		JB_FS_AppendString(_fsf0, New_render);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Str_Print(_tmPf1);
		JB_Decr(_tmPf1);
		JB_Rec_Clear(JB_StdErr);
	}
}

void JB_Msg_test_style(Message* Self) {
	bool B = false;
	{
		Message* S = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while (((bool)(S)) and (S != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(S)));
			if ((JB_Msg_EqualsSyx(S, JB_SyxArg, false)) or (JB_Msg_EqualsSyx(S, JB_SyxList, false))) {
				B = (!B);
				((JB_Msg_SyntaxIsSet(S, kJB__MsgParseFlags_Style2, B)));
			}
			S = _N_f2;
		};
		;
	};
}

bool SC_Msg_TestFuncName(Message* Self) {
	Syntax Fn = Self->Func;
	if ((!((Fn != JB_SyxFunc) and ((Fn != JB_SyxPrm) and (Fn != JB_SyxList))))) {
		JB_Msg_SyntaxExpect(Self, JB_LUB[1051]);
		return nil;
	}
	if (Fn != JB_SyxThg) {
		JB_Msg_SyntaxExpect(Self, JB_LUB[826]);
		return nil;
	}
	return true;
}

bool JB_Msg_TestSub(Message* Self, JB_String* New_render, JB_String* Name) {
	LeakTester* LKT = JB_Incr(JB_Lk_Constructor(nil, Name));
	{
		Message* Reparse = JB_Incr(JB_Str_Parse(New_render, JB_SyxArg, true));
		if ((!Reparse)) {
			JB_Decr(Reparse);
			JB_Decr(LKT);
			return nil;
		}
		JB_Msg_test_style(Reparse);
		JB_Msg_test_style(Self);
		if ((!JB_Msg__TreeCompare(Self, Reparse, false))) {
			JB_Decr(Reparse);
			JB_Decr(LKT);
			return nil;
		}
		JB_String* Self_render = JB_Incr(JB_Msg_Render(Self, nil));
		if ((!JB_Str_Exists(Self_render))) {
			JB_Decr(Self_render);
			JB_Decr(Reparse);
			JB_Decr(LKT);
			return nil;
		}
		JB_String* Reparse_render = JB_Incr(JB_Msg_Render(Reparse, nil));
		if ((!JB_Str_Exists(Reparse_render))) {
			JB_Decr(Reparse_render);
			JB_Decr(Self_render);
			JB_Decr(Reparse);
			JB_Decr(LKT);
			return nil;
		}
		if ((!(JB_Rec_OK(JB_StdErr) and ((JB_Str_Equals(Self_render, Reparse_render, false)))))) {
			JB_Decr(Reparse_render);
			JB_Decr(Self_render);
			JB_Decr(Reparse);
			JB_Decr(LKT);
			return nil;
		}
		JB_Decr(Self_render);
		JB_Decr(Reparse_render);
		JB_Decr(Reparse);
	}
	;
	(JB_Lk_FinalTest(LKT));
	JB_Decr(LKT);
	return true;
}

JB_String* JB_Msg_Text(Message* Self, int I) {
	if (I == 0) {
		return JB_Msg_TViewCH(Self)->Name;
	}
	return JB_LUB[0];
}

bool JB_Msg_TextSet(Message* Self, int I, JB_String* V) {
	if (I == 0) {
		JB_SetRef(JB_Msg_TViewCH(Self)->Name, V);
		return true;
	}
	return false;
}

void JB_Msg_Thg__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
}

void JB_Msg_Tmp__(Message* Self, FastString* Fs) {
	if (JB_Str_IsStatementName(Self->Name)) {
		JB_FS_AppendString(Fs, Self->Name);
	}
	 else {
		JB_FS_AppendByte(Fs, '+');
		JB_FS_AppendQuotedEscape(Fs, Self->Name);
	}
	if ((!JB_Ring_HasChildren(Self))) {
		return;
	}
	Message* Ch = ((Message*)JB_Ring_First(Self));
	bool HasArg = false;
	while (Ch) {
		if (HasArg) {
			JB_FS_LineIndent(Fs);
		}
		JB_FS_AppendByte(Fs, ' ');
		JB_FS_SyntaxAppend(Fs, Ch);
		if (JB_Msg_EqualsSyx(Ch, JB_SyxArg, false)) {
			HasArg = true;
		}
		Ch = ((Message*)JB_Ring_NextSib(Ch));
	};
}

ASMtmp SC_Msg_TmpType(Message* Self) {
	ASMtmp Rz = 0;
	Rz = (Self->Flags & 63);
	return Rz;
}

void SC_Msg_TmpTypeSet(Message* Self, ASMtmp Value) {
	Value = ((Self->Flags & (~63)) | Value);
	Self->Flags = Value;
}

void JB_Msg_Todo__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
	JB_Msg_FSListSep(Self, Fs, JB_LUB[99]);
}

void SC_Msg_Tran_Isnt(Message* Self, JB_String* Name) {
	Message* Type = JB_Incr(JB_Msg_NeedFirst(Self));
	if ((!JB_Msg_ExpectLast(Type, JB_LUB[0]))) {
		JB_Decr(Type);
		return;
	}
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
		Self->Func = JB_SyxRel;
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Name));
		JB_Tree_SyntaxAppend(Self, (_tmPf1));
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, Self->Name));
		JB_Tree_SyntaxAppend(Self, (_tmPf2));
		JB_Decr(_tmPf2);
		JB_Tree_SyntaxAppend(Self, Type);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Type);
}

void SC_Msg_Tran_QMark(Message* Self) {
	Message* Thedot = JB_Incr(((Message*)JB_Ring_First(Self)));
	if ((!Thedot)) {
		JB_Decr(Thedot);
		return;
	}
	bool IsNormal = ((JB_Msg_EqualsSyx(Thedot, JB_SyxDot, false)) or ((JB_Msg_EqualsSyx(Thedot, JB_SyxSDot, false)) or (JB_Msg_EqualsSyx(Thedot, JB_SyxFunc, false))));
	if ((!IsNormal)) {
		if ((!JB_Msg_EqualsSyx(Thedot, JB_SyxThg, false))) {
			JB_Msg_SyntaxExpect(Thedot, JB_LUB[1149]);
			JB_Decr(Thedot);
			return;
		}
		Self->Func = JB_SyxBra;
		JB_Decr(Thedot);
		return;
	}
	if (JB_Msg_EqualsSyx(Thedot, JB_SyxSDot, false)) {
		SC_Func__Tran_Sdt(Thedot);
	}
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(Thedot)));
	Message* Inside = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (JB_Msg_EqualsSyx(Thedot, JB_SyxFunc, false)) {
		if ((!JB_Msg_Expect(Inside, JB_SyxBra, nil))) {
			JB_Decr(Inside);
			JB_Decr(Thedot);
			return;
		}
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(Inside)));
		JB_SetRef(Inside, _tmPf2);
		JB_Decr(_tmPf2);
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
	Message* Rel = JB_Incr(SC_Msg_QMarkRel(Self));
	if (Rel) {
		(JB_Ring_PrevSibSet(Self, Thedot));
		(JB_Ring_NextSibSet(Rel, Self));
		JB_Msg_BecomeStr(Self, JB_SyxArg, JB_LUB[0]);
		Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1460]));
		JB_FreeIfDead(SC_Msg_ReplaceWith(Inside, _tmPf3));
		JB_Decr(_tmPf3);
		Message* Decl = JB_Incr(SC_MakeDecl(JB_LUB[0], JB_LUB[1460], Inside, 0));
		JB_Tree_SyntaxAppend(Self, Decl);
		Message* _tmPf4 = JB_Incr(JB_Msg_Msg(Decl, JB_SyxArg, JB_LUB[0]));
		JB_Decr(Decl);
		JB_Tree_SyntaxAppend(_tmPf4, Rel);
		JB_Decr(_tmPf4);
		JB_Decr(Rel);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(Inside);
		JB_Decr(Thedot);
		return;
	}
	JB_Decr(Rel);
	Message* Tern = JB_Incr(Self);
	if (JB_Msg_OperatorIn(Self, JB_SyxArg)) {
		JB_Msg_BecomeStr(Self, JB_SyxArg, JB_LUB[0]);
		(JB_Msg_SyntaxIsSet(Self, kJB__MsgParseFlags_Style2, true));
	}
	 else if (JB_Msg_EqualsSyx(Inside, JB_SyxThg, false)) {
		Self->Func = JB_SyxFunc;
	}
	 else {
		Self->Func = JB_SyxBra;
		JB_SetRef(Tern, JB_Msg_Msg(Self, JB_SyxArg, JB_LUB[0]));
		(JB_Msg_SyntaxIsSet(Tern, kJB__MsgParseFlags_Style2, true));
		JB_SetRef(Tern, JB_Msg_Msg(Tern, JB_SyxFunc, JB_LUB[0]));
	}
	Message* Cond = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, Inside->Name));
	if (JB_Msg_OperatorIn(Self, JB_SyxArg)) {
		JB_SetRef(Tern, JB_Msg_Msg(Self, JB_SyxTmp, JB_LUB[1697]));
		JB_Tree_SyntaxAppend(Tern, Cond);
		Message* _tmPf5 = JB_Incr(JB_Msg_Msg(Tern, JB_SyxArg, JB_LUB[0]));
		JB_Tree_SyntaxAppend(_tmPf5, Thedot);
		JB_Decr(_tmPf5);
	}
	 else {
		Message* Options = JB_Incr(JB_Msg_Msg(Tern, JB_SyxList, JB_LUB[0]));
		Message* _tmPf6 = JB_Incr(JB_Msg_Msg(Tern, JB_SyxPrm, JB_LUB[0]));
		JB_Tree_SyntaxAppend(_tmPf6, Cond);
		JB_Decr(_tmPf6);
		JB_Tree_SyntaxAppend(Options, Thedot);
		JB_Msg_AppendSyx(Options, JB_SyxThg, JB_LUB[1810]);
		JB_Decr(Options);
	}
	JB_Decr(Thedot);
	if ((!JB_Msg_EqualsSyx(Inside, JB_SyxThg, false))) {
		JB_SetRef(Cond->Name, JB_LUB[1460]);
		Message* _tmPf7 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1460]));
		JB_FreeIfDead(SC_Msg_ReplaceWith(Inside, _tmPf7));
		JB_Decr(_tmPf7);
		Message* _tmPf8 = JB_Incr(SC_MakeDecl(JB_LUB[0], JB_LUB[1460], Inside, 0));
		(JB_Ring_PrevSibSet(Tern, _tmPf8));
		JB_Decr(_tmPf8);
	}
	JB_Decr(Inside);
	JB_Decr(Tern);
	JB_Decr(Cond);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Msg_Tran_Target(Message* Self) {
	Message* Rz = nil;
	SC_Msg_Tran_TargetSub(Self);
	JB_SetRef(Rz, ((Message*)JB_Ring_NextSib(Self)));
	if ((!(Rz))) {
		JB_SetRef(Rz, ((Message*)JB_Ring_FlatAfter(Self)));
	}
	JB_Tree_Remove(Self);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Msg_Tran_TargetSub(Message* Self) {
	Message* Value = JB_Msg_NeedFirst(Self);
	if ((!Value)) {
		return;
	}
	bool IsFalse = ((JB_Msg_EqualsSyx(Value, JB_SyxBRel, false)) and (JB_Msg_SyntaxEquals(Value, JB_LUB[214], false)));
	if (IsFalse) {
		Value = ((Message*)JB_Ring_First(Value));
	}
	Message* Arg = JB_Msg_NeedSyxInt(Self, JB_SyxArg, 1);
	if ((!Arg)) {
		return;
	}
	if (SC_Msg_TargetTest(Value) == IsFalse) {
		Arg = JB_Msg_NeedSyx(((Message*)JB_Tree_Get(Self, 2)), JB_SyxArg);
	}
	while (JB_Ring_HasChildren(Arg)) {
		(JB_Ring_NextSibSet(Self, ((Message*)JB_Tree_Pop(Arg))));
	};
}

void SC_Msg_Tran_With(Message* Self) {
	Message* Obj = JB_Incr(JB_Msg_NeedFirst(Self));
	if ((!Obj)) {
		JB_Decr(Obj);
		return;
	}
	Message* Arg = JB_Incr(JB_Msg_NextOf(Obj, JB_SyxArg));
	if (JB_Msg_EqualsSyx(Obj, JB_SyxRel, false)) {
		if (true) {
			JB_Msg_SyntaxExpect(Obj, nil);
		}
	}
	if ((!(((bool)Arg) and (!JB_Msg_EqualsSyx(Obj, JB_SyxRel, false))))) {
		JB_Decr(Arg);
		JB_Decr(Obj);
		return;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Obj);
	JB_String* Name = JB_Incr(Obj->Name);
	Message* If = JB_Incr(Self);
	if (Obj->Func == JB_SyxThg) {
		JB_SetRef(Self->Name, JB_LUB[1697]);
	}
	 else {
		JB_Msg_BecomeStr(Self, JB_SyxArg, JB_LUB[0]);
		JB_SetRef(If, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1697]));
		(JB_Ring_FirstSet(Self, If));
		JB_Tree_SyntaxAppend(If, Obj);
		JB_Tree_SyntaxAppend(If, Arg);
		Message* Dcl = JB_Incr(SC_Func__TypedTempMoveOut(Obj, JB_LUB[0]));
		Message* _tmPf4 = JB_Incr(SC_Msg_DeclName(Dcl));
		JB_Decr(Dcl);
		JB_SetRef(Name, _tmPf4->Name);
		JB_Decr(_tmPf4);
	}
	JB_Decr(Obj);
	Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_First(If)));
	JB_Decr(If);
	JB_FreeIfDead(SC_Msg_WrapWith(_tmPf5, JB_SyxBra, JB_LUB[598]));
	{
		Message* Ch = JB_Incr(Arg);
		Message* _afterf2 = JB_Incr(((Message*)JB_Ring_FlatAfter(Arg)));
		while (((bool)(Ch)) and (Ch != _afterf2)) {
			Message* _N_f3 = JB_Incr(((Message*)JB_Ring_FlatNext0(Ch)));
			if (JB_Msg_EqualsSyx(Ch, JB_SyxTmp, false)) {
				if ((JB_Msg_SyntaxEquals(Ch, JB_LUB[1727], false)) or (JB_Msg_SyntaxEquals(Ch, JB_LUB[1729], false))) {
					SC_Msg_Tran_Isnt(Ch, JB_LUB[1730]);
					JB_SetRef(Ch, Ch);
					JB_Decr(_N_f3);
					continue;
				}
				 else if (JB_Msg_SyntaxEquals(Ch, JB_LUB[2050], false)) {
					JB_SetRef(Ch, ((Message*)JB_Ring_FlatAfter(Ch)));
					JB_Decr(_N_f3);
					continue;
				}
			}
			 else if (JB_Msg_EqualsSyx(Ch, JB_SyxSDot, false)) {
				Ch->Func = JB_SyxDot;
				Message* _tmPf6 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Name));
				(JB_Ring_FirstSet(Ch, (_tmPf6)));
				JB_Decr(_tmPf6);
			}
			 else if (JB_Msg_EqualsSyx(Ch, JB_SyxThg, false)) {
				if (JB_Msg_SyntaxEquals(Ch, JB_LUB[1730], false)) {
					JB_SetRef(Ch->Name, Name);
				}
			}
			JB_SetRef(Ch, _N_f3);
			JB_Decr(_N_f3);
		};
		JB_Decr(Ch);
		JB_Decr(_afterf2);
		;
		JB_Decr(_tmPf5);
	}
	;
	JB_Decr(Arg);
	JB_Decr(Name);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Msg_TranModel(Message* Self) {
	Message* Arg = JB_Incr(JB_Msg_Last(Self, JB_SyxArg));
	if ((!Arg)) {
		JB_Decr(Arg);
		return nil;
	}
	Message* Shader = JB_Incr(SC_Msg_ParseShaderSub(Arg));
	JB_Decr(Arg);
	if ((!Shader)) {
		JB_Decr(Shader);
		return nil;
	}
	JB_SetRef(Self->Name, JB_LUB[1972]);
	JB_SafeDecr(Shader);
	return Shader;
}

void JB_Msg_TRel__(Message* Self, FastString* Fs) {
	JB_Msg_RenderWithSpaces(Self, Fs, nil);
}

void JB_Msg_Tril__(Message* Self, FastString* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	if ((!F)) {
		return;
	}
	JB_FS_AppendByte(Fs, '#');
	JB_FS_SyntaxAppend(Fs, F);
	Message* S = ((Message*)JB_Ring_NextSib(F));
	if ((!S)) {
		return;
	}
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_SyntaxAppend(Fs, S);
	Message* L = ((Message*)JB_Ring_NextSib(S));
	if ((!L)) {
		return;
	}
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_SyntaxAppend(Fs, L);
}

MaybeBool SC_Msg_Trueness(Message* Self, NilState Found) {
	SCDecl* D = SC_Msg_FastDecl(Self);
	SCDecl* Ret = SC__nil_T.Return;
	if ((!Ret)) {
		return nil;
	}
	if (SC_Decl_FastMatch(D, Ret)) {
		NilState N = D->NilDeclared;
		if (((bool)(N & kSC__NilState_KnownValue))) {
			return ((MaybeBool)SC_NilState_SyntaxIs(N, kSC__NilState_TrueValue));
		}
		if (((bool)(Found & kSC__NilState_KnownValue))) {
			return ((MaybeBool)SC_NilState_SyntaxIs(Found, kSC__NilState_TrueValue));
		}
	}
	 else if (SC_Decl_IsDataTypeOnly(Ret) and SC_Decl_IsDataTypeOnly(D)) {
		while ((JB_Msg_EqualsSyx(Self, JB_SyxArg, false)) or (JB_Msg_EqualsSyx(Self, JB_SyxBra, false))) {
			Self = ((Message*)JB_Ring_Last(Self));
		};
		Message* Rtf = Ret->Type->False;
		if (((bool)Rtf) and (((bool)Self) and JB_Msg_OperatorMatches(Self, Rtf))) {
			return ((MaybeBool)false);
		}
	}
	return ((MaybeBool)8);
}

bool SC_Msg_TrueOrFalse(Message* Self) {
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[2004], true)) {
		return true;
	}
	if (JB_Msg_SyntaxEquals(Self, JB_LUB[1648], true)) {
		return false;
	}
	if (true) {
		JB_Msg_SyntaxExpect(Self, JB_LUB[1304]);
	}
	return false;
}

Message* JB_Msg_TViewCH(Message* Self) {
	if ((!JB_Msg_EqualsSyx(Self, JB_SyxTmp, false))) {
		return Self;
	}
	Message* Ch = ((Message*)JB_Ring_First(Self));
	if (Ch) {
		Message* Ch2 = ((Message*)JB_Ring_NextSib(Ch));
		if (JB_Msg_ListViewable(Ch2)) {
			return Ch2;
		}
		if (JB_Msg_ListViewable(Ch)) {
			return Ch;
		}
	}
	return Self;
}

void JB_Msg_Type__(Message* Self, FastString* Fs) {
	Message* Obj = JB_Incr(((Message*)JB_Ring_First(Self)));
	if ((!Obj)) {
		JB_Decr(Obj);
		return;
	}
	Message* Type = JB_Incr(((Message*)JB_Ring_NextSib(Obj)));
	JB_FS_SyntaxAppend(Fs, Obj);
	JB_Decr(Obj);
	JB_FS_AppendByte(Fs, '|');
	if (Type) {
		JB_FS_SyntaxAppend(Fs, Type);
	}
	JB_Decr(Type);
	JB_FS_AppendByte(Fs, '|');
}

Message* SC_Msg_TypeOfArrItem(Message* Self) {
	if (JB_Msg_EqualsSyx(Self, JB_SyxList, false)) {
		return ((Message*)JB_Ring_First(Self));
	}
	if (((JB_Msg_EqualsSyx(Self, JB_SyxRel, false))) and (SC_Msg_OperatorIsThing(((Message*)JB_Tree_Second(Self)), JB_LUB[1660]))) {
		return ((Message*)JB_Ring_First(Self));
	}
	return Self;
}

Message* SC_Msg_UnBra(Message* Self) {
	while ((JB_Msg_EqualsSyx(Self, JB_SyxBra, false)) and (!JB_Msg_EqualsSyx(((Message*)JB_Ring_First(Self)), JB_SyxArg, false))) {
		Self = ((Message*)JB_Ring_First(Self));
	};
	return Self;
}

Message* SC_Msg_UnBraType(Message* Self) {
	while (((JB_Msg_EqualsSyx(Self, JB_SyxType, false))) or ((JB_Msg_EqualsSyx(Self, JB_SyxBra, false)) and (!JB_Msg_EqualsSyx(((Message*)JB_Ring_First(Self)), JB_SyxArg, false)))) {
		Self = ((Message*)JB_Ring_First(Self));
	};
	return Self;
}

void JB_Msg_UnEmbedStr(Message* Self) {
	Message* S1 = JB_Incr(((Message*)JB_Ring_First(Self)));
	if (((JB_Msg_EqualsSyx(S1, JB_SyxEmb, false))) and (!JB_FreeIfDead(((Message*)JB_Ring_NextSib(S1))))) {
		JB_Tree_Remove(S1);
		JB_SetRef(Self->Name, S1->Name);
	}
	JB_Decr(S1);
}

void JB_Msg_Unit__(Message* Self, FastString* Fs) {
	JB_String* Num = JB_Incr(JB_Msg_FirstName(Self));
	JB_FS_AppendString(Fs, Num);
	if (((bool)JB_Str_IsHexLike(Num, 0)) and (JB_Str_Last(Num, 0) != '_')) {
		JB_FS_AppendByte(Fs, '_');
	}
	JB_Decr(Num);
	JB_FS_AppendString(Fs, Self->Name);
}

bool SC_Msg_UnitMatch(Message* Self, JB_String* A, JB_String* B) {
	JB_String* Unit = Self->Name;
	if (JB_Str_Equals(Unit, A, false)) {
		return true;
	}
	if (JB_Str_Equals(Unit, B, false)) {
		if (true) {
			JB_Msg_SyntaxExpect(Self, JB_Str_OperatorPlus(JB_LUB[1343], A));
		}
	}
	return false;
}

Message* SC_Msg_UnReachable(Message* Self) {
	return SC_Msg_CausesUnReachable(Self, Self, nil, nil);
}

Message* SC_Msg_UpToType(Message* Self) {
	Message* C = Self;
	while (C) {
		Message* P = ((Message*)JB_Ring_Parent(C));
		if (JB_Msg_EqualsSyx(P, JB_SyxType, false)) {
			if ((!JB_Tree_IsLast(C))) {
				return nil;
			}
			return P;
		}
		C = P;
	};
	return nil;
}

void JB_Msg_url__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendString(Fs, JB_LUB[564]);
	Message* F = JB_Incr(((Message*)JB_Ring_First(Self)));
	if (F) {
		JB_FS_AppendString(Fs, F->Name);
	}
	JB_Decr(F);
}

Message* SC_Msg_UseNonRefChangers(Message* Self, bool Parent) {
	Message* Last = Self;
	Message* Curr = Self;
	while (true) {
		Curr = ((Message*)JB_Ring_Parent(Curr));
		if ((!Curr)) {
			return Last;
		}
		Syntax F = Curr->Func;
		if (F == JB_SyxBra) {
		}
		 else if (F != JB_SyxType) {
			return ((Message*)JB_Ternary(Parent, Curr, Last));
		}
		 else {
			JB_Object* D = Curr->Obj;
			if (JB_Object_FastIsa(D, &SCDeclData)) {
				if ((!SC_Decl_IsNormalObject(((SCDecl*)D)))) {
					return ((Message*)JB_Ternary(Parent, Curr, Last));
				}
			}
		}
		Last = Curr;
	};
}

JB_String* JB_Msg_Value(Message* Self) {
	if (Self) {
		if ((JB_Msg_EqualsSyx(Self, JB_SyxTmp, false)) and JB_Msg_OperatorIn(Self, JB_SyxArg)) {
			return JB_Msg_FirstName(Self);
		}
		if ((!JB_Msg_EqualsSyx(Self, JB_SyxArg, false))) {
			return Self->Name;
		}
	}
	return JB_LUB[0];
}

JB_String* SC_Msg_VarName(Message* Self) {
	Message* Ch = JB_Msg_NeedSyxInt(Self, JB_SyxNil, 1);
	if (Ch) {
		Syntax F = Ch->Func;
		if (F == JB_SyxRel) {
			Ch = ((Message*)JB_Ring_First(Ch));
			F = Ch->Func;
		}
		if (F == JB_SyxThg) {
			return Ch->Name;
		}
		if (true) {
			JB_Msg_SyntaxExpect(Ch, nil);
		}
	}
	return JB_LUB[0];
}

bool SC_Msg_visible(Message* Self) {
	if (Self) {
		byte I = Self->Indent;
		if (I >= 254) {
			return I == 254;
		}
	}
	return SC__Base_CurrVisibility;
}

void SC_Msg_visibleSet(Message* Self, bool Value) {
	Self->Indent = (255 - Value);
}

Message* SC_Msg_LayerWipeCopy(Message* Self, Message* Oof) {
	Message* Rz = nil;
	if ((!Oof)) {
		JB_Decr(Rz);
		return SC_Msg_WipeCopy(Self);
	}
	JB_MemoryLayer* Old = JB_Incr(JB_Class_Layer((&MessageData)));
	JB_MemoryLayer* _tmPf0 = JB_Incr(JB_ObjLayer(Oof));
	JB_Mem_Use(_tmPf0);
	JB_Decr(_tmPf0);
	JB_SetRef(Rz, SC_Msg_WipeCopy(Self));
	JB_Mem_Use(Old);
	JB_Decr(Old);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Msg_WipeCopy(Message* Self) {
	Message* Rz = nil;
	Rz = JB_Msg_ConstructorCopy(nil, Self);
	Rz->Position = -1;
	{
		Message* V = ((Message*)JB_Ring_First(Self));
		while (V) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(V)));
			JB_Tree_SyntaxAppend(Rz, SC_Msg_WipeCopy(V));
			V = _Nf1;
		};
		;
	}
	;
	return Rz;
}

void JB_Msg_WipePositions(Message* Self) {
	{
		Message* V = Self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Self));
		while (((bool)(V)) and (V != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(V)));
			V->Position = -1;
			V = _N_f2;
		};
		;
	};
}

void SC_Msg_WithDeclTransform(Message* Self, Message* Decl, Message* Rel, Message* Arg) {
	if ((!JB_Msg_Expect(Rel, JB_SyxRel, nil))) {
		return;
	}
	Message* Name = JB_Incr(JB_Msg_NeedSyx(Rel, JB_SyxThg));
	if (Name) {
		//using;
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Arg);
		Message* IF = JB_Incr(JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1697]));
		(JB_Ring_NextSibSet(Decl, IF));
		JB_Msg_AppendSyx(IF, JB_SyxThg, Name->Name);
		JB_Tree_SyntaxAppend(IF, Arg);
		JB_Decr(IF);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Name);
}

bool SC_Msg_WithinLoop(Message* Self, Message* Stop) {
	while ((Self != Stop) and ((bool)Self)) {
		if (SC_Msg_OperatorIsTmp(Self, JB_LUB[2047]) or SC_Msg_OperatorIsTmp(Self, JB_LUB[1660])) {
			return true;
		}
		Self = ((Message*)JB_Ring_Parent(Self));
	};
	return false;
}

bool JB_Msg_WithinType(Message* Self, int Allowed) {
	Message* P = ((Message*)JB_Ring_Parent(Self));
	Message* Msg = Self;
	while (((bool)P) and (!JB_Msg_EqualsSyx(P, JB_SyxArg, false))) {
		if ((((bool)(Allowed & 1))) and ((JB_Msg_EqualsSyx(P, JB_SyxDecl, false)))) {
			return JB_Tree_IsFirst(Msg);
		}
		if ((((bool)(Allowed & 2))) and ((JB_Msg_EqualsSyx(P, JB_SyxType, false)))) {
			return JB_Tree_IsLast(Msg);
		}
		Msg = P;
		P = ((Message*)JB_Ring_Parent(P));
	};
	return false;
}

int SC_Msg_WrapExpr(Message* Self, SCDecl* Src) {
	if ((!Self)) {
		return kJB_kNeedsTypeCast;
	}
	Message* W = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1807])));
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1584]));
	JB_Tree_SyntaxAppend(W, (_tmPf0));
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(W, (_tmPf1));
	JB_Decr(_tmPf1);
	if (SC_Decl_IsFloat(Src)) {
		JB_SetRef(W->Name, JB_LUB[1808]);
	}
	JB_FreeIfDead(SC_Msg_ReplaceWith(Self, W));
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(W)));
	JB_Tree_SyntaxAppend(_tmPf2, Self);
	JB_Decr(_tmPf2);
	JB_FreeIfDead(SC_TypeOfExpr(W, SC__Comp_program, nil));
	SCDecl* D = JB_Incr(SC_Msg_AsDecl(Self));
	if (D) {
		JB_SetRef(W->Obj, SC_Decl_NewWrapper(D, D));
	}
	 else {
		debugger;
	}
	JB_Decr(W);
	JB_Decr(D);
	return kJB_kCastedMatch;
}

void SC_Msg_WrapFloatOrInt(Message* Self, DataTypeCode T, int N, SCDecl* D) {
	if ((!((!JB_TC_SyntaxIs(T, kJB__TC_Float)) and (!JB_TC_SyntaxIs(T, kJB__TC_Int))))) {
		return;
	}
	SCClass* V = JB_Incr(SC_VecType(JB_TC_IsFloat(T), N));
	if ((!SC_Decl_OperatorExact_isa(D, V))) {
		//using;
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self);
		Message* W = JB_Incr(JB_Syx_Msg(JB_SyxType, JB_LUB[0]));
		Message* Thg = JB_Incr(JB_Msg_Msg(W, JB_SyxThg, V->Name));
		JB_SetRef(Thg->Obj, V->TypeNormal);
		JB_Decr(Thg);
		JB_SetRef(W->Obj, V->TypeNormal);
		JB_FreeIfDead(((Message*)JB_Tree_WrapWith(Self, W)));
		JB_Decr(W);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(V);
}

Message* SC_Msg_WrapWith(Message* Self, Syntax F, JB_String* S) {
	Message* Rz = nil;
	Rz = JB_Syx_OperatorPlus(F, S);
	(JB_Ring_PrevSibSet(Self, Rz));
	JB_Tree_SyntaxAppend(Rz, Self);
	return Rz;
}

void JB_Msg_XAtt__(Message* Self, FastString* Fs) {
	//;
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendString(Fs, JB_LUB[589]);
	JB_FS_SyntaxAppend(Fs, ((Message*)JB_Ring_First(Self)));
	JB_FS_AppendByte(Fs, '"');
	//;
}

void JB_Msg_XCDT__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[575]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendString(Fs, JB_LUB[1422]);
}

void JB_Msg_XCom__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[573]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendString(Fs, JB_LUB[309]);
}

void JB_Msg_XML__(Message* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '<');
	JB_FS_AppendString(Fs, Self->Name);
	Message* Atts = ((Message*)JB_Ring_First(Self));
	{
		Message* A = ((Message*)JB_Ring_First(Atts));
		while (A) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(A));
			JB_FS_SyntaxAppend(Fs, A);
			A = _Nf2;
		};
		;
	}
	;
	Message* Children = ((Message*)JB_Ternary(((bool)Atts), ((Message*)JB_Ring_NextSib(Atts)), nil));
	if ((!Children)) {
		JB_FS_AppendString(Fs, JB_LUB[400]);
		return;
	}
	JB_FS_AppendByte(Fs, '>');
	bool SingleText = ((JB_Msg_EqualsSyx(Children, JB_SyxXTxt, false))) and ((!((Message*)JB_Ring_NextSib(Children))));
	if (SingleText) {
		JB_FS_SyntaxAppend(Fs, Children);
	}
	 else {
		Fs->Indent++;
		{
			Message* Ch = Children;
			while (Ch) {
				JB_FS_LineIndent(Fs);
				JB_FS_SyntaxAppend(Fs, Ch);
				Ch = ((Message*)JB_Ring_NextSib(Ch));
			};
			;
		}
		;
		Fs->Indent--;
		JB_FS_LineIndent(Fs);
	}
	//;
	JB_FS_AppendString(Fs, JB_LUB[577]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendByte(Fs, '>');
	//;
}

void JB_Msg_XPI__(Message* Self, FastString* Fs) {
	JB_FS_AppendString(Fs, JB_LUB[583]);
	if (JB_Ring_HasChildCount(Self, 1)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Self)));
		JB_FS_SyntaxAppend(Fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_Msg_FSListArg(Self, Fs, false);
		JB_FS_AppendByte(Fs, '\n');
	}
	JB_FS_AppendString(Fs, JB_LUB[599]);
}

void JB_Msg_XTxt__(Message* Self, FastString* Fs) {
	JB_FS_AppendMultiReplace(Fs, Self->Name, JB__Constants_XML_EscapeStr, JB_StdErr);
}

bool JB_Msg_Yes(Message* Self) {
	if (Self) {
		return JB_Str_Yes(Self->Name);
	}
	return false;
}

void JB_Msg_Yoda__(Message* Self, FastString* Fs) {
	Message* F = ((Message*)JB_Ring_First(Self));
	Message* S = ((Message*)JB_Ring_NextSib(F));
	Message* L = ((Message*)JB_Ring_NextSib(S));
	JB_FS_AppendString(Fs, JB_LUB[2097]);
	JB_FS_SyntaxAppend(Fs, L);
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_SyntaxAppend(Fs, F);
	JB_FS_AppendByte(Fs, ' ');
	JB_FS_SyntaxAppend(Fs, S);
}

SyntaxObj* JB_Msg__GetFunc(Message* Msg) {
	SyntaxObj* _tmPf0 = JB_Incr(((SyntaxObj*)JB_Dict_Syntax(JB__SyxDict_, Msg->Name)));
	if ((!_tmPf0)) {
		FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf1, JB_LUB[737]);
		JB_FS_AppendString(_fsf1, Msg->Name);
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		JB_Msg_SyntaxExpect(Msg, _tmPf2);
		JB_Decr(_tmPf2);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* SC_Msg__NilchCompare() {
	if (JB_ReturnSelfEqNil) {
		return JB_ReturnSelfEqNil;
	}
	Message* _tmPf0 = JB_Incr(JB_Str_ParseJbin(((JB_LUB[19])), kJB__int64_max));
	JB_SetRef(JB_ReturnSelfEqNil, _tmPf0);
	JB_Decr(_tmPf0);
	return JB_ReturnSelfEqNil;
}

bool JB_Msg__TreeCompare(Message* Orig, Message* Reparse, bool PrintIfSame) {
	if ((!(((bool)Orig) and ((bool)Reparse)))) {
		return JB_CompareError(Orig, Reparse);
	}
	if ((Orig->Func != Reparse->Func) or ((!JB_Str_Equals(Orig->Name, Reparse->Name, false)))) {
		return JB_CompareError(Orig, Reparse);
	}
	Message* R1 = ((Message*)JB_Ring_First(Reparse));
	Message* S1 = ((Message*)JB_Ring_First(Orig));
	while (((bool)R1) or ((bool)S1)) {
		if ((!JB_Msg__TreeCompare(S1, R1, false))) {
			return nil;
		}
		R1 = ((Message*)JB_Ring_NextSib(R1));
		S1 = ((Message*)JB_Ring_NextSib(S1));
	};
	if (PrintIfSame) {
		JB_Msg__TreeComparePrint(Orig);
	}
	return true;
}

void JB_Msg__TreeComparePrint(Message* Orig) {
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[1328]);
	JB_String* _tmPf1 = JB_Incr(JB_Msg_MiniName(Orig, JB_LUB[0]));
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(_fsf0, JB_LUB[162]);
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf2);
	JB_Decr(_tmPf2);
}


MessageID* JB_ID_Constructor(MessageID* Self, JB_String* Name, Syntax Fn, uint64 ID) {
	if (Self == nil) {
		Self = ((MessageID*)JB_NewClass(&MessageIDData));
	}
	JB_Str_Clone(Self, Name);
	Self->User = 0;
	Self->Func = Fn;
	Self->Obj = nil;
	Self->ID = ID;
	return Self;
}

void JB_ID_Destructor(MessageID* Self) {
	JB_Clear(Self->Obj);
}

JB_String* JB_ID_Render(MessageID* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_String* _tmPf0 = JB_Incr(JB_Syx_Name(Self->Func));
	JB_FS_AppendString(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(Fs, '@');
	JB_FS_AppendQuotedEscape(Fs, Self);
	JB_String* _tmPf1 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool JB_ID__IDSorter(JB_Object* A, JB_Object* B) {
	MessageID* Aa = ((MessageID*)A);
	MessageID* Bb = ((MessageID*)B);
	int64 Diff = Bb->ID - Aa->ID;
	if (Diff) {
		return Diff > 0;
	}
	return ((uint64)Aa) < ((uint64)Bb);
}


bool SC_Decl_AlreadyContains(SCDecl* Self) {
	SCDecl* Ty = Self->Type->Contained;
	SCDecl* C = Self->Contains;
	if (((bool)Ty) and ((bool)C)) {
		return SC_Decl_MiniMatch(C, Ty, 0);
	}
	return false;
}

JB_String* SC_Decl_AutoCompleteName(SCDecl* Self) {
	JB_String* N = JB_Incr(SC_Decl_RealName(Self));
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(Fs, N);
	JB_FS_AppendMultiByte(Fs, ' ', JB_int_OperatorMax((32 - JB_Str_Length(N)), 1));
	JB_Decr(N);
	JB_FS_AppendByte(Fs, '|');
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteType(Self, 0));
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(Fs, '|');
	JB_String* _tmPf1 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Decl_BecomeReal(SCDecl* Self) {
	if (!(SC_NilState_SyntaxIs(Self->NilDeclared, kSC__NilState_Stated))) {
		Self->NilDeclared = kSC__NilState_Real;
	}
}

SCDecl* SC_Decl_Better_Numeric(SCDecl* Self, SCDecl* O, OpMode Mode) {
	DataTypeCode S = Self->Type->TypeInfo;
	DataTypeCode T = O->Type->TypeInfo;
	if (!(SC_OpMode_SyntaxIs(Mode, kSC__OpMode_MakesSigned))) {
		if ((S & (~kJB__TC_sign)) == (T & (~kJB__TC_sign))) {
			return Self;
		}
	}
	SCClass* Cls = SC_TC_Better_Numeric_Sub(S, T, Mode);
	if (Cls->TypeInfo == S) {
		return Self;
	}
	if (Cls->TypeInfo == T) {
		return O;
	}
	return Cls->TypeNormal;
}

int SC_Decl_ByteSize(SCDecl* Self) {
	if (Self->PointerCount) {
		return JB_Platform__PointerBytes();
	}
	int N = SC_Class_CalculateSize(Self->Type, 0);
	if (SC_Decl_IsCArray(Self)) {
		N = (N * Self->C_Array);
	}
	return N;
}

bool SC_Decl_CanNilCheck(SCDecl* Self) {
	if ((!Self)) {
		return nil;
	}
	if (Self->PointerCount) {
		return true;
	}
	if (SC_Decl_IsCArray(Self)) {
		return false;
	}
	return Self->Type->HasNilChecker;
}

bool SC_Decl_CantBeNilInCpp(SCDecl* Self) {
	if (Self->PointerCount) {
		return nil;
	}
	return (SC_Decl_IsCArray(Self)) or ((SC_Class_IsStruct(Self->Type)) or (SC_Decl_IsNumeric(Self) > 1));
}

SCDecl* SC_Decl_CanUpgradeInternalPointer(SCDecl* Self) {
	SCDecl* Infernal = Self->Internal;
	if ((SC_Decl_SyntaxIs(Infernal, kSC__SCDeclInfo_Local)) and ((bool)Infernal->NilReg)) {
		return Infernal;
	}
	return nil;
}

bool SC_Decl_CanUseDefault(SCDecl* Self) {
	if (SC_Decl_IsNil(Self)) {
		debugger;
		return false;
	}
	if (SC_Class_IsStruct(Self->Type) and (!Self->PointerCount)) {
		return (SC_Decl_IsNormalStruct(Self));
	}
	return true;
}

bool SC_Decl_CanWrap(SCDecl* Self) {
	if (((bool)Self->PointerCount) or ((bool)Self->Type->FuncProto)) {
		return true;
	}
	if (SC_Decl_IsNormalStruct(Self)) {
		return nil;
	}
	if (SC_Decl_IsCArray(Self)) {
		return nil;
	}
	if (Self->Type->TypeInfo == kJB__TC_UnusedType) {
		return nil;
	}
	return true;
}

SCDecl* SC_Decl_CheckMath(SCDecl* Self, Message* Exp) {
	if (Self->PointerCount == 1) {
		if (Self->Type == JB_TypeVoid_) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[698]);
		}
	}
	return Self;
}

bool SC_Decl_ConstCheck(SCDecl* Self, Message* Ln, Message* RN, SCDecl* Rc) {
	if (Ln) {
		if ((!((SC_Msg_IsAssignable(Ln)) and ((!SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Const)))))) {
			JB_Msg_SyntaxExpect(Ln, JB_LUB[1094]);
			return nil;
		}
		if ((!RN)) {
			return true;
		}
	}
	bool _tmPf0 = ((!RN) or (SC_Decl_ConstInRange(Self, RN, Rc)));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(RN, JB_LUB[999]);
		return nil;
	}
	return _tmPf0;
}

bool SC_Decl_ConstInRange(SCDecl* Self, Message* RN, SCDecl* Rt) {
	if (JB_Msg_EqualsSyx(RN, JB_SyxNum, false)) {
		if (SC_Msg_IsInt(RN)) {
			return SC_Decl_ConstInRangeSub(Self, JB_Msg_Int(RN, 0));
		}
	}
	 else if (((JB_Msg_EqualsSyx(RN, JB_SyxThg, false))) and ((SC_Decl_SyntaxIs(Rt, kSC__SCDeclInfo_DataOnlyConst)) and (SC_Decl_IsNormalNumber(Rt) and SC_Decl_IsInteger(Rt)))) {
		Message* Def = Rt->Default;
		if (Def) {
			return SC_Decl_ConstInRangeSub(Self, JB_Msg_Int(Def, 0));
		}
	}
	return true;
}

bool SC_Decl_ConstInRangeSub(SCDecl* Self, int64 Value) {
	DataTypeCode T = Self->Type->TypeInfo;
	int S = JB_TC_ByteSize(T);
	if (S == 8) {
		return true;
	}
	if (JB_TC_IsInt(T)) {
		bool Ign = JB_TC_IsSigned(T);
		if (S == 4) {
			if (Ign) {
				return (Value >= JB_int__Min()) and (Value <= JB_int__Max());
			}
			 else {
				return (Value >= -1) and (Value <= 4294967295);
			}
		}
		 else if (S == 2) {
			if (Ign) {
				return (Value >= kJB__int16_min) and (Value <= kJB__int16_max);
			}
			 else {
				return (Value >= -1) and (Value <= 65535);
			}
		}
		 else if (S == 1) {
			if (Ign) {
				return (Value >= kJB__char_min) and (Value <= kJB__char_max);
			}
			 else {
				return (Value >= -1) and (Value <= 255);
			}
		}
	}
	return true;
}

SCDecl* SC_Decl_Constructor(SCDecl* Self, SCClass* Type) {
	if (Self == nil) {
		Self = ((SCDecl*)JB_NewClass(&SCDeclData));
	}
	SC_Named_Constructor(Self);
	Self->C_Array = 0;
	Self->HiderFunc = nil;
	Self->IsLookupOnly = nil;
	JB_StringC* _tmPf0 = JB_LUB[0];
	Self->StringData = JB_Incr(_tmPf0);
	Self->Internal = nil;
	Self->Contains = nil;
	Self->Default = nil;
	Self->DReg = ((AsmReg){});
	Self->PointerCount = 0;
	Self->NilReg = 0;
	Self->NilAllocDepth = 0;
	Self->Type = JB_Incr(Type);
	Self->NilDeclared = kSC__NilState_Either;
	Self->Info = kSC__SCDeclInfo_Altered;
	return Self;
}

SCDecl* SC_Decl_Containedfix(SCDecl* Self) {
	SCDecl* Rz = nil;
	SCClass* T = Self->Type;
	Rz = ((SCDecl*)JB_Ternary(T->TypeNormal == Self, SC_Decl_CopyDecl(Self, false), Self));
	JB_SetRef(Rz->Contains, T->SelfDecl->Contains);
	return Rz;
}

SCDecl* SC_Decl_ContainedReplace(SCDecl* Self, SCDecl* Contains, bool NeedsName) {
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_UpgradeableContained)) {
		if (((!NeedsName) or (!JB_Str_Exists(Self->Name))) and SC_Decl_SameForReplace(Self, Contains)) {
			return Contains;
		}
		SCClass* CType = Contains->Type;
		bool SameType = CType == Self->Type;
		if (SameType) {
			if (SC_Decl_SameForReplace(Self, Contains)) {
				return Self;
			}
		}
		SCDecl* C = SC_Decl_CopyDecl(Self, false);
		JB_SetRef(C->Type, CType);
		JB_SetRef(C->Contains, Contains->Contains);
		((SC_Decl_SyntaxIsSet(C, kSC__SCDeclInfo_UpgradeableContained, (!SameType))));
		return C;
	}
	SCDecl* Inside = Self->Contains;
	if (((bool)Inside) and ((Inside != Contains) and SC_Decl_SyntaxIs(Inside, kSC__SCDeclInfo_UpgradeableContained))) {
		Self = SC_Decl_CopyDecl(Self, false);
		JB_SetRef(Self->Contains, Contains);
	}
	return Self;
}

bool SC_Decl_ContainsMatch(SCDecl* Self, SCDecl* O, int TypeCast) {
	if (((bool)(TypeCast & kJB_kTypeCastIgnoreContained))) {
		return true;
	}
	SCDecl* Oc = SC_Decl_ReallyContains(O);
	SCDecl* Sc = SC_Decl_ReallyContains(Self);
	if ((Oc == Sc) or ((!(((bool)Sc) and ((bool)Oc))) or (!O->Contains))) {
		return true;
	}
	return SC_uint_IsNormalMatch(SC_Decl_TypeMatch(Sc, Oc, 0, nil));
}

SCDecl* SC_Decl_CopyDecl(SCDecl* Self, bool ForNewVariable) {
	SCDecl* Dcl = JB_Incr(SC_Decl_Constructor(nil, Self->Type));
	SC_Decl_CopyTypeInfoTo(Self, Dcl);
	(SC_Decl_NameSet(Dcl, Self->Name));
	JB_SetRef(Dcl->Default, Self->Default);
	((SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Borrowed, (!ForNewVariable) and (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Borrowed)))));
	JB_SafeDecr(Dcl);
	return Dcl;
}

void SC_Decl_CopyTypeInfoTo(SCDecl* Self, SCDecl* Dcl) {
	JB_SetRef(Dcl->Type, Self->Type);
	Dcl->PointerCount = Self->PointerCount;
	JB_SetRef(Dcl->Contains, Self->Contains);
	JB_SetRef(Dcl->Internal, Self->Internal);
	SCDeclInfo Cpyflags = kSC__SCDeclInfo_DclCopied;
	Dcl->Info = (Dcl->Info & (~Cpyflags));
	Dcl->Info = (Dcl->Info | (Self->Info & Cpyflags));
	Dcl->C_Array = Self->C_Array;
	Dcl->NilDeclared = Self->NilDeclared;
}

bool SC_Decl_CouldUpgradeToReal(SCDecl* Self) {
	return SC_Decl_TypeSuffers(Self) and (!SC_Decl_NilStated(Self));
}

Message* SC_Decl_CreateDefault(SCDecl* Self, Message* Errs, bool Isfunc) {
	if (SC_Decl_CantBeNilInCpp(Self)) {
		if (Isfunc) {
			return SC_Decl_CreateStructNil(Self, Errs);
		}
		return nil;
	}
	if (Self->PointerCount) {
		if (Isfunc) {
			return SC_Msg_CreateNil(Errs);
		}
		return nil;
	}
	Message* D = JB_Incr(Self->Type->Defawlt);
	if (D) {
		Message* _tmPf0 = JB_Incr(JB_Msg_Copy(D, Errs));
		JB_Decr(D);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(D);
	return nil;
}

Message* SC_Decl_CreateSimpleTypeCast(SCDecl* Self, Message* Exp) {
	Message* Rz = nil;
	Message* Curr = JB_Incr(Exp);
	while (JB_Msg_EqualsSyx(Curr, JB_SyxBra, false)) {
		JB_SetRef(Curr->Obj, Self);
		JB_SetRef(Curr, ((Message*)JB_Ring_First(Curr)));
	};
	JB_Decr(Curr);
	JB_SetRef(Rz, JB_Syx_Msg(JB_SyxType, JB_LUB[563]));
	(JB_Ring_PrevSibSet(Exp, Rz));
	JB_Tree_SyntaxAppend(Rz, Exp);
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteType(Self, 0));
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SetRef(Rz->Obj, Self);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Decl_CreateStructNil(SCDecl* Self, Message* Where) {
	Message* Rz = nil;
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Where);
	JB_SetRef(Rz, SC_Decl_CreateStructNilSub(Self));
	JB_SetRef(Rz->Obj, Self);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Decl_CreateStructNilSub(SCDecl* Self) {
	Message* Rz = nil;
	if (SC_Decl_IsCArray(Self)) {
		JB_Decr(Rz);
		return JB_Syx_Msg(JB_SyxArg, JB_LUB[0]);
	}
	JB_SetRef(Rz, JB_Syx_OperatorPlus(JB_SyxType, JB_LUB[563]));
	JB_Msg_AppendSyx(Rz, JB_SyxArg, JB_LUB[0]);
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteType(Self, 0));
	JB_Tree_SyntaxAppend(Rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(Rz);
	return Rz;
}

Message* SC_Decl_DeclToAddr(SCDecl* Self, SCDecl* P0) {
	Message* Rz = nil;
	Rz = JB_Syx_OperatorPlus(JB_SyxBRel, JB_LUB[241]);
	JB_Tree_SyntaxAppend(Rz, SC_Decl_DeclToDot(Self, P0));
	JB_SetRef(Rz->Obj, SC_Decl_GetAddress(Self, kSC__DeclMode_Always));
	return Rz;
}

Message* SC_Decl_DeclToDot(SCDecl* Self, SCDecl* P0) {
	Message* Rz = nil;
	Rz = JB_Syx_OperatorPlus(JB_SyxDot, Self->Name);
	JB_SetRef(JB_Msg_Msg(Rz, JB_SyxThg, JB_LUB[1933])->Obj, P0);
	JB_Msg_AppendSyx(Rz, JB_SyxEmb, JB_LUB[0]);
	JB_SetRef(Rz->Obj, Self);
	return Rz;
}

SCDecl* SC_Decl_DefaultToReal(SCDecl* Self) {
	return SC_Decl_MakeExistance(Self, kSC__NilState_Real, nil);
}

SCDecl* SC_Decl_DeReference(SCDecl* Self, Message* Brel, SCNode* Name_space, bool IsAccess) {
	SCDecl* C = SC_Decl_DeReferenceSub(Self, Brel, Name_space, IsAccess);
	if (C) {
		return C;
	}
	if (true) {
		JB_Msg_SyntaxExpect(((Message*)JB_Ring_First(Brel)), JB_LUB[697]);
	}
	return nil;
}

SCDecl* SC_Decl_DeReferenceSub(SCDecl* Self, Message* Brel, SCNode* Name_space, bool IsAccess) {
	if (SC_Decl_IsCArray(Self)) {
		if ((!IsAccess)) {
			JB_Msg_SyntaxExpect(Brel, JB_LUB[1360]);
		}
		SCDecl* I = Self->Internal;
		if ((!I)) {
			return nil;
		}
		if (SC_Decl_TypeSuffers(I)) {
			return SC_Decl_MakeNewOptional(I);
		}
		return I;
	}
	if (Self->PointerCount > 0) {
		return Self->Internal;
	}
	if ((!IsAccess) and SC_Decl_IsNormalObject(Self)) {
		JB_Msg_BecomeStr(Brel, JB_SyxDot, JB_LUB[1655]);
		JB_Msg_AppendSyx(Brel, (JB_SyxPrm), JB_LUB[0]);
		return SC_TypeOfExpr(Brel, Name_space, nil);
	}
	return nil;
}

void SC_Decl_Destructor(SCDecl* Self) {
	JB_Clear(Self->IsLookupOnly);
	JB_Clear(Self->StringData);
	JB_Clear(Self->Internal);
	JB_Clear(Self->Contains);
	JB_Clear(Self->Default);
	JB_Clear(Self->Type);
	SC_Named_Destructor(Self);
}

SCDecl* SC_Decl_DownGrade(SCDecl* Self) {
	if ((!SC_Decl_IsNormalObject(Self))) {
		return Self;
	}
	SCClass* Y = Self->Type->DowngradeTo;
	if (Y) {
		return Y->TypeNormal;
	}
	return Self;
}

void SC_Decl_ExpectFail(SCDecl* Self, SCDecl* O, Message* Errnode, Message* Backup) {
	JB_Incr(Errnode);
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(Fs, JB_LUB[1329]);
	JB_FreeIfDead(SC_Decl_RenderTypeName(Self, Fs));
	JB_FS_AppendString(Fs, JB_LUB[254]);
	JB_FreeIfDead(SC_Decl_RenderTypeNameNicer(O, Fs));
	JB_FS_AppendString(Fs, JB_LUB[257]);
	if ((!(Errnode))) {
		JB_SetRef(Errnode, Backup);
	}
	if (true) {
		JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(Fs));
		JB_Msg_SyntaxExpect(Errnode, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(Fs);
	JB_Decr(Errnode);
}

Message* SC_Decl_ExpectMatch(SCDecl* Self, SCDecl* O, int TypeCast, Message* Exp, Message* ErrNode) {
	if (((bool)Exp) and SC_Msg_IsSmallInt(Exp, O)) {
		TypeCast = (TypeCast | kJB_kTypeCastFromZero);
	}
	uint Matched = SC_Decl_TypeMatch(Self, O, TypeCast, Exp);
	if ((Matched == kJB_kCastedMatch) or (Matched == kJB_kLossyCastedMatch)) {
		return SC_Msg_CastedParent(Exp);
	}
	if (Matched == kJB_kNoMatch) {
		SC_Decl_ExpectFail(Self, O, ErrNode, Exp);
		SC_Decl_TypeMatch(Self, O, TypeCast, Exp);
	}
	return Exp;
}

void SC_Decl_ExpectRelMatch(SCDecl* Self, SCDecl* O, Message* Exp, Message* Side, Message* ErrNode) {
	int Cast = kJB_kTypeCastTrue;
	if ((!Side)) {
		Cast = (Cast | kJB_kTypeCastBothWays);
	}
	JB_FreeIfDead(SC_Decl_ExpectMatch(Self, O, Cast, Exp, ErrNode));
	if ((SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Self)) and (SC_Func_SyntaxIs(SC__Func_CurrFunc, kSC__FunctionType_Destructor))) {
		if (true) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[1398]);
		}
	}
	 else if (((bool)Side) and ((SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Local)) and SC_Decl_IsObject(Self))) {
		SC_Decl_MarkAsRefAltered(Self);
	}
}

SCDecl* SC_Decl_ExtractAmount(SCDecl* Self, Message* Prms, SCNode* Name_space) {
	SCDecl* Rz = nil;
	JB_SetRef(Rz, SC_Decl_ExtractAmountSub(Self, Prms, Name_space));
	if ((!Rz)) {
		JB_Msg_SyntaxExpect(Prms, JB_LUB[856]);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

SCDecl* SC_Decl_ExtractAmountSub(SCDecl* Self, Message* Prms, SCNode* Name_space) {
	SCDecl* Rz = nil;
	Message* Num = JB_Incr(((Message*)JB_Ring_First(Prms)));
	if (JB_Msg_EqualsSyx(Num, JB_SyxUnit, false)) {
		JB_FreeIfDead(SC_TypeOfUnit(Num, nil, nil));
	}
	if (JB_Msg_Expect(Num, JB_SyxNum, nil) and JB_Msg_ExpectLast(Num, JB_LUB[0])) {
		JB_SetRef(Rz, SC_Decl_CopyDecl(Self, false));
		SC_Decl_IsCarray(Rz, JB_Msg_Int(Num, 0), Self);
		JB_SetRef(Rz->Default, JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
	}
	JB_Decr(Num);
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Decl_FastMatch(SCDecl* Self, SCDecl* O) {
	if (O->Type != Self->Type) {
		return nil;
	}
	if (O->PointerCount != Self->PointerCount) {
		return nil;
	}
	return O->C_Array == Self->C_Array;
}

bool SC_Decl_Found(SCDecl* Self) {
	if (Self) {
		if (Self->Type != JB_TypeVoid_) {
			return true;
		}
		if (Self->PointerCount) {
			return true;
		}
	}
	return false;
}

DataTypeCode SC_Decl_GameType(SCDecl* Self) {
	if ((Self->PointerCount)) {
		JB_Msg_SyntaxExpect(Self->Source, JB_LUB[727]);
		return 0;
	}
	SCClass* T = JB_Incr(Self->Type);
	if ((!SC_Class_HasGameType(T))) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1185]);
		JB_FS_AppendString(_fsf0, Self->Type->Name);
		JB_FS_AppendString(_fsf0, JB_LUB[257]);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Msg_SyntaxExpect(Self->Source, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Decr(T);
		return 0;
	}
	DataTypeCode _tmPf2 = T->TypeInfo;
	JB_Decr(T);
	return _tmPf2;
}

SCDecl* SC_Decl_GetAddress(SCDecl* Self, DeclMode Purpose) {
	SCDecl* Rz = nil;
	JB_SetRef(Rz, SC_Decl_Constructor(nil, Self->Type));
	SC_Decl_CopyTypeInfoTo(Self, Rz);
	JB_SetRef(Rz->Internal, Self);
	Rz->PointerCount++;
	Rz->C_Array = 0;
	NilState Ns = kSC__NilState_Realish;
	if (Purpose == kSC__DeclMode_Globals) {
		Ns = kSC__NilState_Optional;
	}
	 else if (!(SC_DeclMode_SyntaxIs(Purpose, kSC__DeclMode_FuncParam))) {
		Ns = (Ns | kSC__NilState_Stated);
	}
	Rz->NilDeclared = Ns;
	if (Rz->PointerCount > 4) {
		JB_Msg_SyntaxExpect(Self->Source, JB_LUB[1323]);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

SCDecl* SC_Decl_GetCArray(SCDecl* Self, int Amount) {
	SCDecl* Rz = nil;
	JB_SetRef(Rz, SC_Decl_Constructor(nil, Self->Type));
	SC_Decl_CopyTypeInfoTo(Self, Rz);
	SC_Decl_IsCarray(Rz, Amount, Self);
	JB_SafeDecr(Rz);
	return Rz;
}

SCIterator* SC_Decl_GetIteratorAny(SCDecl* Self, JB_String* Name, Message* Node) {
	if (SC_Decl_IsCArray(Self)) {
		return SC__Iter_carray;
	}
	SCClass* Cls = JB_Incr(Self->Type);
	if (((bool)Self->PointerCount) and (!SC_Class_IsStruct(Cls))) {
		JB_Decr(Cls);
		return SC__Iter_pointer;
	}
	SCIterator* _tmPf0 = JB_Incr(SC_Class_GetIteratorAny(Cls, Name, Node));
	JB_Decr(Cls);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

bool SC_Decl_HasStruct(SCDecl* Self) {
	return (!Self->PointerCount) and SC_Class_IsStruct(Self->Type);
}

SCFunction* SC_Decl_HasStructDestructor(SCDecl* Self) {
	if (SC_Decl_HasStruct(Self)) {
		return Self->Type->DestructorFunc;
	}
	return nil;
}

SCDecl* SC_Decl_HighestArrayContainMatch(SCDecl* Self, SCDecl* Other, Message* Exp) {
	SCDecl* Rz = nil;
	JB_SetRef(Rz, SC_Decl_HighestMatch(Self, Other, Exp));
	if ((!(Rz))) {
		JB_SetRef(Rz, Self);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

SCDecl* SC_Decl_HighestMatch(SCDecl* Self, SCDecl* Other, Message* Exp) {
	if ((!Other)) {
		return nil;
	}
	SCClass* M = Self->Type;
	SCClass* O = Other->Type;
	if (O == M) {
		return nil;
	}
	if (O->Depth > M->Depth) {
		O = SC_Class_GoUpTo(O, M->Depth);
	}
	 else if (O->Depth < M->Depth) {
		M = SC_Class_GoUpTo(M, O->Depth);
	}
	while (O != M) {
		SCClass* O2 = O->Super;
		if ((!O2)) {
			break;
		}
		O2->IsBuiltin;
		O = O2;
		M = M->Super;
		if ((!M)) {
			return nil;
		}
	};
	return O->TypeNormal;
}

void SC_Decl_IsCarray(SCDecl* Self, int Size, SCDecl* Of) {
	Self->PointerCount = 0;
	Self->C_Array = Size;
	Self->NilDeclared = kSC__NilState_Real;
	JB_SetRef(Self->Internal, Of);
	Self->NilDeclared = kSC__NilState_Realish;
}

bool SC_Decl_IsCArray(SCDecl* Self) {
	return Self->C_Array > 0;
}

bool SC_Decl_IsConstOf(SCDecl* Self, SCDecl* B) {
	if ((!SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Const))) {
		return nil;
	}
	if (Self == B) {
		return true;
	}
	Message* _tmPf0 = Self->Default;
	if ((!_tmPf0)) {
		return nil;
	}
	return _tmPf0->Obj == B;
}

bool SC_Decl_IsDataTypeOnly(SCDecl* Self) {
	return SC_Class_IsDataTypeOnly(Self->Type) and ((!Self->PointerCount) and (!SC_Decl_IsCArray(Self)));
}

bool SC_Decl_IsFloat(SCDecl* Self) {
	return JB_TC_IsFloat(Self->Type->TypeInfo);
}

bool SC_Decl_IsInteger(SCDecl* Self) {
	return SC_Decl_IsNormal(Self) and JB_TC_IsInt(Self->Type->TypeInfo);
}

bool SC_Decl_IsNil(SCDecl* Self) {
	return Self == JB_TypeNil;
}

bool SC_Decl_IsNormal(SCDecl* Self) {
	return (!Self->PointerCount) and ((!SC_Decl_IsNil(Self)) and (!SC_Decl_IsCArray(Self)));
}

bool SC_Decl_IsNormalBool(SCDecl* Self) {
	return ((!SC_Decl_IsCArray(Self))) and (((!Self->PointerCount)) and (Self->Type == JB_TypeBool));
}

bool SC_Decl_IsNormalNumber(SCDecl* Self) {
	return ((!SC_Decl_IsCArray(Self))) and (((!Self->PointerCount)) and (SC_Class_NumericCount(Self->Type) == 1));
}

bool SC_Decl_IsNormalObject(SCDecl* Self) {
	return ((!Self->PointerCount)) and (((!SC_Decl_IsNil(Self))) and SC_Decl_IsObject(Self));
}

bool SC_Decl_IsNormalStruct(SCDecl* Self) {
	return SC_Class_IsStruct(Self->Type) and ((!Self->PointerCount) and (!SC_Decl_IsCArray(Self)));
}

bool SC_Decl_IsntReallyCastable(SCDecl* Self, Message* Side) {
	if ((!((SC_Class_IsStruct(Self->Type) or SC_Decl_IsCArray(Self)) and ((!Self->PointerCount))))) {
		return nil;
	}
	Message* _tmPf0 = JB_Incr(SC_Msg_RemoveTypeCasts(Side));
	bool _tmPf1 = ((!JB_Msg_EqualsSyx(_tmPf0, JB_SyxArg, false)));
	JB_Decr(_tmPf0);
	return _tmPf1;
}

int SC_Decl_IsNumeric(SCDecl* Self) {
	if (((!SC_Decl_IsCArray(Self))) and ((!Self->PointerCount))) {
		return SC_Class_NumericCount(Self->Type);
	}
	return 0;
}

bool SC_Decl_IsObject(SCDecl* Self) {
	return SC_Class_IsObject(Self->Type) and (!SC_Decl_IsCArray(Self));
}

bool SC_Decl_IsReffable(SCDecl* Self, bool SetOnly) {
	if ((!(((!Self->PointerCount)) and (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Altered))))) {
		return nil;
	}
	if (SetOnly and (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Borrowed))) {
		return nil;
	}
	return SC_Class_IsObject(Self->Type);
}

bool SC_Decl_IsReg(SCDecl* Self) {
	if (SC_Decl_IsCArray(Self)) {
		return nil;
	}
	if (Self->PointerCount) {
		return true;
	}
	return (!SC_Class_IsStruct(Self->Type));
}

JB_String* SC_Decl_IsSaveable(SCDecl* Self) {
	if (Self->PointerCount) {
		return JB_LUB[0];
	}
	return Self->Type->SaveAs;
}

bool SC_Decl_IsStdLib(SCDecl* Self) {
	SCImport* P = JB_Incr(SC_Decl_Project(Self));
	if (P) {
		bool _tmPf0 = P->IsSTDLib;
		JB_Decr(P);
		return _tmPf0;
	}
	JB_Decr(P);
	debugger;
	return false;
}

void SC_Decl_IsTypeImproveSet(SCDecl* Self, bool Value) {
	Self->Info = SC_SCDeclInfo_Set(Self->Info, kSC__SCDeclInfo_TypeImprove, Value);
}

bool SC_Decl_IsUintLike(SCDecl* Self) {
	DataTypeCode T = Self->Type->TypeInfo;
	if (SC_Decl_IsNormal(Self) and JB_TC_IsInt(T)) {
		return (!JB_TC_IsSigned(T));
	}
	return false;
}

bool SC_Decl_IsVoidPtr(SCDecl* Self) {
	return ((Self->PointerCount == 1) and (Self->Type == JB_TypeVoid_));
}

bool SC_Decl_LoadContained(SCDecl* Self, Message* Contained, Message* Wrap, SCNode* Name_Space, DeclMode Purpose) {
	if ((JB_Msg_EqualsSyx(Contained, JB_SyxThg, false)) and (JB_Msg_SyntaxEquals(Contained, JB_LUB[1961], false))) {
		return SC_Decl_MakeStatic(Self, Wrap, Name_Space, Purpose);
	}
	SCDecl* Cont = JB_Incr(SC_ExtractDecl(Contained, Name_Space, Purpose));
	if (Cont) {
		bool _tmPf0 = SC_Decl_LoadContainedSub(Self, Cont, Wrap, Name_Space, Purpose);
		JB_Decr(Cont);
		return _tmPf0;
	}
	JB_Decr(Cont);
	return false;
}

bool SC_Decl_LoadContainedSub(SCDecl* Self, SCDecl* Cont, Message* Wrap, SCNode* Name_Space, DeclMode Purpose) {
	SCDecl* R = JB_Incr(SC_ExtractDecl(Wrap, Name_Space, Purpose));
	if ((!R)) {
		JB_Decr(R);
		return nil;
	}
	SC_Decl_CopyTypeInfoTo(R, Self);
	JB_SetRef(Self->Contains, SC_Decl_MakeContainedOptional(Cont));
	if (SC_uint_IsNormalMatch(SC_Decl_TypeMatch(JB_TypeWrapper->TypeNormal, R, kJB_kTypeCastFalse, nil))) {
		if (SC_Decl_IsNormalObject(Cont)) {
			JB_Msg_SyntaxExpect(Wrap, JB_LUB[809]);
		}
	}
	 else {
		SCDecl* RCont = JB_Incr(R->Type->Contained);
		if ((!RCont)) {
			JB_Msg_SyntaxExpect(Wrap, JB_LUB[1090]);
			JB_Decr(RCont);
			JB_Decr(R);
			return nil;
		}
		if ((RCont->Type != JB_TypeObject) and SC_Decl_IsNormalObject(RCont)) {
			JB_FreeIfDead(SC_Decl_ExpectMatch(RCont, Cont, 0, nil, Wrap));
		}
		JB_Decr(RCont);
	}
	JB_Decr(R);
	return true;
}

SCDecl* SC_Decl_MakeAsObject(SCDecl* Self, SCDecl* Container, Message* ErrPlace) {
	SCDecl* NormalContained = JB_Incr(Container->Type->Contained);
	if ((!NormalContained)) {
		JB_Decr(NormalContained);
		return nil;
	}
	if (SC_Decl_IsNormalObject(Self)) {
		if ((!SC_Decl_IsNormalObject(NormalContained))) {
			JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1282]);
		}
		JB_Decr(NormalContained);
		return Self;
	}
	 else if ((!SC_Decl_IsNormalObject(NormalContained))) {
		JB_Decr(NormalContained);
		return Self;
	}
	JB_Decr(NormalContained);
	if ((!SC_Decl_CanWrap(Self))) {
		JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[716]);
	}
	return SC_Decl_NewWrapper(Self, Self);
}

SCDecl* SC_Decl_MakeBorrowed(SCDecl* Self, bool StayBorrowed) {
	SCDecl* Rz = nil;
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Borrowed)) {
		JB_Decr(Rz);
		return Self;
	}
	JB_SetRef(Rz, SC_Decl_CopyDecl(Self, false));
	(SC_Decl_SyntaxIsSet(Rz, kSC__SCDeclInfo_Borrowed, true));
	if (StayBorrowed) {
		(SC_Decl_SyntaxIsSet(Rz, kSC__SCDeclInfo_StayBorrowed, true));
	}
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Decl_MakeContainedObject(SCDecl* Self, Message* ErrPlace) {
	SCDecl* C = Self->Contains;
	if (C) {
		JB_SetRef(Self->Contains, SC_Decl_MakeAsObject(C, Self, ErrPlace));
	}
}

SCDecl* SC_Decl_MakeContainedOptional(SCDecl* Self) {
	if (SC_Decl_NilStated(Self)) {
		return Self;
	}
	return SC_Decl_MakeExistance(Self, kSC__NilState_Optional, Self->Type->TypeOptional);
}

SCDecl* SC_Decl_MakeDataObject(SCDecl* Self, SCNode* Name_Space, DeclMode Purpose) {
	SCDecl* Rz = nil;
	Message* Wrapp = JB_Incr((JB_Syx_Msg(JB_SyxThg, JB_LUB[1584])));
	JB_SetRef(Rz, SC_Decl_Constructor(nil, Self->Type));
	SC_Decl_LoadContainedSub(Rz, Self, Wrapp, Name_Space, Purpose);
	JB_Decr(Wrapp);
	JB_SafeDecr(Rz);
	return Rz;
}

SCDecl* SC_Decl_MakeExistance(SCDecl* Self, NilState Type, SCDecl* Default) {
	SCDecl* Rz = nil;
	if (Self->NilDeclared == Type) {
		return Self;
	}
	if (((bool)Default) and (Self == Self->Type->TypeNormal)) {
		return Default;
	}
	Rz = SC_Decl_CopyDecl(Self, false);
	Rz->NilDeclared = Type;
	return Rz;
}

void SC_Decl_MakeGameFlying(SCDecl* Self, SCClass* Oof, Message* M) {
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(Fs, JB_LUB[1560]);
	SC_FS_CArrayAdd(Fs, Oof->Name);
	Message* _tmPf3 = JB_Incr(SC_Msg_ModelType(M));
	SC_FS_CArrayAddB(Fs, JB_Str_First(_tmPf3->Name));
	JB_Decr(_tmPf3);
	SC_FS_CArrayAddB0(Fs, 8);
	SC_FS_CArrayAddB0(Fs, SC_Msg_ModelMode(M));
	{
		Array* _LoopSrcf2 = JB_Incr(Oof->Properties);
		int _if0 = 0;
		while (true) {
			SCDecl* P = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (P == nil) {
				JB_Decr(P);
				break;
			}
			SC_FS_CArrayAddB(Fs, ((byte)SC_Decl_GameType(P)));
			JB_String* _tmPf4 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1425], P->Name));
			JB_Decr(P);
			SC_FS_CArrayAdd(Fs, _tmPf4);
			JB_Decr(_tmPf4);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[441]);
	JB_FS_AppendString(Fs, JB_LUB[897]);
	(SC_Decl_SyntaxIsSet(Self, kSC__SCDeclInfo_GameFlyingMem, true));
	JB_SetRef(Self->StringData, JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
}

SCDecl* SC_Decl_MakeNewNil(SCDecl* Self) {
	if (Self->PointerCount) {
		Self->NilDeclared = kSC__NilState_ActuallyNil;
		return Self;
	}
	return SC_Decl_MakeExistance(Self, kSC__NilState_ActuallyNil, nil);
}

SCDecl* SC_Decl_MakeNewOptional(SCDecl* Self) {
	return SC_Decl_MakeExistance(Self, kSC__NilState_Optional, Self->Type->TypeOptional);
}

SCDecl* SC_Decl_MakeNewReal(SCDecl* Self) {
	if (Self->PointerCount) {
		Self->NilDeclared = kSC__NilState_Real;
		return Self;
	}
	return SC_Decl_MakeReal(Self);
}

SCDecl* SC_Decl_MakeReal(SCDecl* Self) {
	return SC_Decl_MakeExistance(Self, kSC__NilState_Real, Self->Type->TypeReal);
}

bool SC_Decl_MakeStatic(SCDecl* Self, Message* Wrap, SCNode* Name_Space, DeclMode Purpose) {
	SCDecl* R = JB_Incr(SC_ExtractDecl(Wrap, Name_Space, Purpose));
	if (R) {
		SC_Decl_CopyTypeInfoTo(R, Self);
		(SC_Decl_SyntaxIsSet(Self, kSC__SCDeclInfo_Static, true));
		JB_Decr(R);
		return true;
	}
	JB_Decr(R);
	return false;
}

void SC_Decl_MarkAsRefAltered(SCDecl* Self) {
	(SC_Decl_SyntaxIsSet(Self, kSC__SCDeclInfo_Altered, true));
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_TypeImprove)) {
		JB_Object* Orig = Self->IsLookupOnly;
		if (JB_Object_FastIsa(Orig, &SCDeclData)) {
			(SC_Decl_SyntaxIsSet(((SCDecl*)Orig), kSC__SCDeclInfo_Altered, true));
		}
	}
}

bool SC_Decl_MatchC(SCDecl* Self, SCDecl* O) {
	return ((bool)SC_Decl_TypeMatch(Self, O, kJB_kTypeCastTrue, nil));
}

bool SC_Decl_MiniMatch(SCDecl* Self, SCDecl* O, int TypeCast) {
	return ((bool)SC_Decl_TypeMatch(Self, O, TypeCast, nil));
}

void SC_Decl_NameSet(SCDecl* Self, JB_String* Value) {
	JB_SetRef(Self->ExportName, Value);
	JB_SetRef(Self->Name, Value);
}

bool SC_Decl_NeedsContainedfix(SCDecl* Self) {
	if ((!Self->AllocSource) and (!Self->Contains)) {
		return ((bool)SC_Decl_ReallyContains(Self));
	}
	return false;
}

SCDecl* SC_Decl_NewWrapper(SCDecl* Self, SCDecl* CastTo) {
	bool IsNormal = ((bool)CastTo) and SC_Decl_IsNormal(CastTo);
	if (IsNormal) {
		SCDecl* It = Self->Type->DataObject;
		if (It) {
			return It;
		}
	}
	SCDecl* Dcl = SC_Decl_Constructor(nil, JB_TypeWrapper);
	JB_SetRef(Dcl->Contains, CastTo);
	if (IsNormal) {
		JB_SetRef(Self->Type->DataObject, Dcl);
	}
	return Dcl;
}

SCDecl* SC_Decl_NilConstructor(SCDecl* Self, NilState Type) {
	SCDecl* Rz = nil;
	if (Type == 0) {
		return Self;
	}
	Rz = SC_Decl_CopyDecl(Self, false);
	Rz->NilDeclared = Type;
	return Rz;
}

NilState SC_Decl_NilCurr(SCDecl* Self) {
	if (!(SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Local))) {
		return Self->NilDeclared & kSC__NilState_Either;
	}
	return SC_NRD_SyntaxAccess((SC_nil__Value()), Self->NilReg);
}

void SC_Decl_NilPrmFail(SCDecl* Self, Message* Where, SCFunction* F) {
	if (true) {
		JB_String* _tmPf0 = JB_Incr(SC_Decl_PrmStateMsg(Self, JB_LUB[0], F));
		JB_Msg_SyntaxExpect(F->Source, _tmPf0);
		JB_Decr(_tmPf0);
	}
}

bool SC_Decl_NilStated(SCDecl* Self) {
	return SC_NilState_SyntaxIs(Self->NilDeclared, kSC__NilState_Stated);
}

void SC_Decl_NoBlindCasts(SCDecl* Self, SCDecl* Old, Message* Exp, SCNode* Name_space) {
	SCFunction* Fn = SC__Func_CurrFunc;
	if (((bool)Fn) and (((!SC_Func_SyntaxIs(Fn, kSC__FunctionType_Constructor))) and ((bool)Fn->BlindCasts))) {
		if (SC_Decl_IsNormalObject(Old) and SC_Decl_IsNormalObject(Self)) {
			if ((!SC_Class_Real_Isa2(Old->Type, Self->Type))) {
				JB_Rec_AppendErr(JB_StdErr, JB_Err_Constructor(nil, Exp, JB_LUB[669], Fn->BlindCasts, JB_LUB[0]));
			}
		}
	}
}

bool SC_Decl_NoFloat(SCDecl* Self, Message* Exp) {
	DataTypeCode T = Self->Type->TypeInfo;
	if (T == kJB__TC_UnusedType) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[730]);
		return nil;
	}
	if (JB_TC_IsFloat(T)) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[729]);
		return nil;
	}
	return true;
}

bool SC_Decl_OperatorExact_isa(SCDecl* Self, SCClass* V) {
	return SC_Decl_IsNormal(Self) and (Self->Type == V);
}

bool SC_Decl_MatchesDecl(SCDecl* Self, SCDecl* O) {
	return SC_Decl_MatchC(Self, O);
}

bool SC_Decl_OperatorMatches(SCDecl* Self, SCClass* O) {
	if (((bool)O) and ((bool)Self)) {
		return SC_Decl_MatchesDecl(Self, O->TypeNormal);
	}
	return false;
}

bool SC_Decl_PointeryMatch(SCDecl* Self, SCDecl* O) {
	if (O->PointerCount == Self->PointerCount) {
		return (SC_Decl_IsCArray(O) == SC_Decl_IsCArray(Self));
	}
	return false;
}

uint SC_Decl_PointeryMatchSub(SCDecl* Self, SCDecl* O, int TypeCast) {
	SCClass* OType = O->Type;
	SCClass* T = Self->Type;
	byte Tica = T->IsRole;
	if (Tica == OType->IsRole) {
	}
	 else if ((bool)Tica) {
		while (T->IsRole) {
			T = T->Super;
			if ((!T)) {
				return 0;
			}
		};
	}
	 else {
		while (OType->IsRole) {
			OType = OType->Super;
			if ((!OType)) {
				return 0;
			}
		};
	}
	int Dist = 0;
	{
		SCClass* CurrSuper = OType;
		while (CurrSuper) {
			if (T == CurrSuper) {
				if (((bool)O->AllocSource) or SC_Decl_ContainsMatch(Self, O, TypeCast)) {
					if ((!Dist)) {
						return kJB_kSimpleMatch;
					}
					if (((bool)(TypeCast & kJB_kTypeCastWantSuperDistance))) {
						return kJB_kSuperClassMatch | Dist;
					}
					return kJB_kSuperClassMatch;
				}
			}
			Dist++;
			CurrSuper = CurrSuper->Super;
		};
	}
	;
	return 0;
}

void SC_Decl_PrefixedName(SCDecl* Self, FastString* Fs, SCModule* M) {
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Const)) {
		JB_FS_AppendByte(Fs, 'k');
	}
	JB_FS_AppendString(Fs, SC_Decl_Project(Self)->Mod->ExportName);
	JB_FS_AppendByte(Fs, '_');
	if (JB_Str_Exists(M->CppPart)) {
		JB_FS_AppendByte(Fs, '_');
		JB_FS_AppendString(Fs, M->CppPart);
		JB_FS_AppendByte(Fs, '_');
	}
	JB_FreeIfDead(SC_Str_UnicodeSafeName(Self->Name, Fs));
	JB_SetRef(Self->ExportName, JB_FS_SyntaxCast(Fs));
}

JB_String* SC_Decl_PrmStateMsg(SCDecl* Self, JB_String* Needed, SCFunction* F) {
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(Fs, JB_LUB[1132]);
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Self)) {
		JB_FS_AppendString(Fs, JB_LUB[1933]);
	}
	 else {
		JB_FS_AppendString(Fs, JB_LUB[1860]);
		JB_FS_AppendString(Fs, Self->Name);
	}
	JB_FS_AppendString(Fs, JB_LUB[261]);
	JB_FS_AppendString(Fs, Needed);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

SCDecl* SC_Decl_ProcessAs(SCDecl* Self, Message* Msg) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(Msg)));
	Message* P = JB_Incr(SC_Msg_UnBra(_tmPf0));
	JB_Decr(_tmPf0);
	if (SC_Msg_OperatorIsBRel(P, JB_LUB[241])) {
		JB_Decr(P);
		return Self;
	}
	JB_Decr(P);
	SCDecl* T = JB_Incr(Self->Type->ProcessAs->TypeNormal);
	JB_FreeIfDead(SC_Decl_CreateSimpleTypeCast(T, Msg));
	Message* L = JB_Incr(((Message*)JB_Ring_Last(Msg)));
	if (L) {
		JB_SetRef(L->Obj, Self);
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(Msg, nil);
		}
	}
	JB_Decr(L);
	JB_SafeDecr(T);
	return T;
}

SCImport* SC_Decl_Project(SCDecl* Self) {
	return (((SCImport*)JB_Object_FastAs(JB_ObjLayer(Self)->Obj, &SCImportData)));
}

SCDecl* SC_Decl_ReallyContains(SCDecl* Self) {
	SCDecl* C = Self->Contains;
	if ((!C)) {
		C = Self->Type->Contained;
	}
	if (((bool)C) and (C->Type != Self->Type)) {
		return C;
	}
	return nil;
}

JB_String* SC_Decl_RealName(SCDecl* Self) {
	JB_Object* L = Self->IsLookupOnly;
	if (JB_Object_Isa(L, &SCObjectData)) {
		return JB_LUB[0];
	}
	Message* S = Self->Source;
	if ((JB_Msg_EqualsSyx(S, JB_SyxThg, false)) and JB_Msg_OperatorIn(S, JB_SyxRel)) {
		S = ((Message*)JB_Ring_Parent(S));
	}
	if ((JB_Msg_EqualsSyx(S, JB_SyxRel, false)) or (JB_Msg_EqualsSyx(S, JB_SyxDecl, false))) {
		return JB_Msg_Name(SC_Msg_DeclName(S));
	}
	return Self->Name;
}

Message* SC_Decl_RefDestructor(SCDecl* Self) {
	Message* M = SC_Decl_DeclToDot(Self, SC_Func_Self(SC__Func_CurrFunc));
	if (SC_Decl_IsCArray(Self)) {
		return SC_Refs__DecrMulti(Self, M);
	}
	return SC_Refs__RefClearMsg(M);
}

SCDecl* SC_Decl_RefineDecl(SCDecl* Self, Message* List) {
	SCDecl* Rz = nil;
	JB_SetRef(Rz, SC_Decl_CopyDecl(Self, false));
	{
		Message* P = JB_Incr(((Message*)JB_Ring_First(List)));
		while (P) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(P)));
			if (SC_Msg_OperatorIsThing(P, JB_LUB[1983])) {
				((SC_Decl_SyntaxIsSet(Rz, kSC__SCDeclInfo_Borrowed, SC__Options_ProjectIsLibrary)));
			}
			 else if (SC_Msg_OperatorIsThing(P, JB_LUB[1482])) {
				(SC_Decl_SyntaxIsSet(Rz, kSC__SCDeclInfo_API, true));
			}
			 else {
				if (true) {
					JB_Msg_SyntaxExpect(P, nil);
				}
			}
			JB_SetRef(P, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(P);
		;
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}

DataTypeCode SC_Decl_RegType(SCDecl* Self) {
	if ((!Self)) {
		return 0;
	}
	DataTypeCode T = Self->Type->TypeInfo;
	if (JB_TC_IsInt(T)) {
		return kJB__TC_int64;
	}
	if (JB_TC_ByteSize(T) == 4) {
		return kJB__TC_Float;
	}
	return kJB__TC_Double;
}

JB_String* SC_Decl_Render(SCDecl* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	if (Self) {
		Message* _tmPf0 = JB_Incr(SC_Decl_WriteDeclFull(Self, JB_LUB[0], 2));
		JB_FreeIfDead(JB_Msg_Render(_tmPf0, Fs));
		JB_Decr(_tmPf0);
	}
	JB_String* _tmPf1 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Decl_RenderTypeAndName(SCDecl* Self, int Minimal) {
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteDeclTypeAndName(Self, JB_LUB[0], Minimal));
	JB_String* _tmPf1 = JB_Incr(JB_Msg_Render(_tmPf0, nil));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Decl_RenderTypeName(SCDecl* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	if ((!Self)) {
		JB_FS_AppendString(Fs, JB_LUB[274]);
	}
	 else {
		if (SC_Decl_IsNil(Self)) {
			JB_FS_AppendString(Fs, JB_LUB[1810]);
		}
		 else {
			JB_FS_AppendMultiByte(Fs, '&', Self->PointerCount);
			JB_FS_AppendString(Fs, Self->Type->Name);
		}
		if (SC_Decl_IsCArray(Self)) {
			JB_FS_AppendByte(Fs, '[');
			JB_FS_AppendInt32(Fs, Self->C_Array);
			JB_FS_AppendByte(Fs, ']');
		}
		SCDecl* C = JB_Incr(Self->Contains);
		if (((bool)C) and (!SC_Decl_MiniMatch(C, Self->Type->Contained, 0))) {
			JB_FS_AppendString(Fs, JB_LUB[192]);
			JB_FS_AppendString(Fs, C->Type->Name);
		}
		JB_Decr(C);
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Decl_RenderTypeNameNicer(SCDecl* Self, FastString* Fs_in) {
	return SC_Decl_RenderTypeName(SC_Decl_DownGrade(Self), Fs_in);
}

bool SC_Decl_SafelyWrappable(SCDecl* Self) {
	int N = SC_Decl_IsNumeric(Self);
	if ((N <= 1) or (Self == JB_TypeBool->TypeNormal)) {
		return true;
	}
	SCFunction* Fns = ((SCFunction*)SC_Base_SyntaxAccess(JB_TypeWrapper->Modul, JB_LUB[1807]));
	if ((!JB_Object_Isa(Fns, &SCFunctionData))) {
		return nil;
	}
	{
		SCFunction* F = Fns;
		while (F) {
			Array* P = F->Args;
			if ((JB_Array_Size(P) == 1) and ((bool)SC_Decl_TypeMatch(((SCDecl*)JB_Array_Value(P, 0)), Self, 0, nil))) {
				return true;
			}
			F = F->NextFunc;
		};
	}
	;
	return false;
}

bool SC_Decl_SameForReplace(SCDecl* Self, SCDecl* C) {
	if ((SC_Decl_SyntaxIs(C, kSC__SCDeclInfo_Borrowed)) != (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Borrowed))) {
		return nil;
	}
	if (C->PointerCount != Self->PointerCount) {
		return nil;
	}
	if (Self->NilDeclared != C->NilDeclared) {
		return false;
	}
	return C->C_Array == Self->C_Array;
}

NilState SC_Decl_StatedOptional(SCDecl* Self) {
	if ((Self->NilDeclared & kSC__NilState_Optional) == kSC__NilState_Optional) {
		return kSC__NilState_Optional;
	}
	return 0;
}

NilState SC_Decl_StatedReal(SCDecl* Self) {
	return SC_NilState_StatedReal(Self->NilDeclared);
}

void SC_Decl_SyntaxAppend(SCDecl* Self, SCDeclInfo D) {
	Self->Info = (Self->Info | D);
}

bool SC_Decl_SyntaxIs(SCDecl* Self, SCDeclInfo D) {
	if (Self) {
		return ((bool)(Self->Info & D));
	}
	return false;
}

void SC_Decl_SyntaxIsSet(SCDecl* Self, SCDeclInfo D, bool Value) {
	Self->Info = SC_SCDeclInfo_Set(Self->Info, D, Value);
}

int SC_Decl_TryTypeCast(SCDecl* Self, SCDecl* O, Message* Exp, int TypeCast) {
	SCClass* T = Self->Type;
	SCClass* Ot = O->Type;
	if (Self->PointerCount == (O->PointerCount + 1)) {
		int Found = SC_Decl_TryTypeCastPointer(Self, O, Exp, TypeCast, false);
		if (Found) {
			return Found;
		}
	}
	if ((SC_Decl_IsCArray(O)) and (Self->PointerCount == 1)) {
		int Found = SC_Decl_TryTypeCastPointer(Self, O, Exp, TypeCast, true);
		if (Found) {
			return Found;
		}
	}
	if ((!((bool)(TypeCast & kJB_kNoBoolTypeCast)))) {
		if ((T == JB_TypeBool) and ((SC_Decl_IsNormal(Self)) and ((bool)O->PointerCount))) {
			return SC_Msg_CastToBool(Exp, nil);
		}
	}
	if (((bool)(TypeCast & (kJB_kTypeCastMost | kJB_kTypeCastNumbers)))) {
		SCDecl* CounterPart = T->Signed;
		if (CounterPart) {
			if ((CounterPart->Type == Ot) and (SC_uint_IsNormalMatch(SC_Decl_TypeMatch(CounterPart, O, TypeCast, Exp)))) {
				return kJB_kSimpleMatch;
			}
		}
	}
	bool NoBools = (((bool)(TypeCast & kJB_kTypeCastBothWays))) or (((bool)(TypeCast & kJB_kNoBoolTypeCast)));
	if (((bool)(TypeCast & kJB_kTypeCastMost))) {
		{
			SCClass* B = Ot;
			while (B) {
				{
					Array* _LoopSrcf3 = B->Casts;
					int _if1 = 0;
					while (true) {
						SCFunction* C = ((SCFunction*)JB_Array_Value(_LoopSrcf3, _if1));
						if (C == nil) {
							break;
						}
						if ((!(NoBools and (C->ReturnType == JB_TypeBool->TypeNormal)))) {
							if (SC_uint_IsNormalMatch(SC_Decl_TypeMatch(Self, C->ReturnType, 0, nil))) {
								return SC_Func_CreateTypeCast(C, O, Exp, kJB_kCastedMatch);
							}
						}
						_if1++;
					};
				}
				;
				B = B->Super;
			};
		}
		;
		bool IsaBool = (T == JB_TypeBool) and (SC_Decl_IsNormal(Self));
		if (((!NoBools)) and IsaBool) {
			return SC_Msg_CastToBool(Exp, nil);
		}
		if (((!IsaBool) or (!NoBools)) and SC_Decl_CanWrap(O)) {
			if (SC_uint_IsNormalMatch(SC_Decl_TypeMatch(JB_TypeWrapper->TypeNormal, Self, 0, nil))) {
				SCDecl* It = Self->Contains;
				if (It) {
					if ((!SC_Decl_TypeMatch(It, O, kJB_kTypeCastNumbers, nil))) {
						return 0;
					}
					return SC_Msg_WrapExpr(Exp, O);
				}
			}
			if (SC_uint_IsNormalMatch(SC_Decl_TypeMatch(Self, JB_TypeWrapper->TypeNormal, 0, nil)) and SC_Decl_SafelyWrappable(O)) {
				return SC_Msg_WrapExpr(Exp, O);
			}
		}
	}
	if (((bool)(TypeCast & kJB_kTypeCastNumbers))) {
		if (SC_Decl_IsNil(O) and ((bool)SC_Decl_IsNumeric(Self))) {
			return kJB_kNumericMatch;
		}
		bool OIsNum = SC_Decl_IsNormalNumber(O);
		bool SIsNum = SC_Decl_IsNormalNumber(Self);
		if (OIsNum and SIsNum) {
			if (((bool)(TypeCast & kJB_kTypeCastFromZero)) or (SC_Decl_IsFloat(O) == SC_Decl_IsFloat(Self))) {
				return kJB_kNumericMatch;
			}
		}
		if (((bool)(TypeCast & kJB_kTypeCastBothWays))) {
			if (OIsNum and SC_Decl_IsNormalBool(Self)) {
				return kJB_kNumericMatch;
			}
			if (SIsNum and SC_Decl_IsNormalBool(O)) {
				return kJB_kNumericMatch;
			}
		}
	}
	if (SC_Func_EqualOrMoreSpecific(Ot->FuncProto, T->FuncProto) and SC_Decl_PointeryMatch(Self, O)) {
		return SC_Msg_CastToClass(Exp, T, nil);
	}
	return 0;
}

int SC_Decl_TryTypeCastPointer(SCDecl* Self, SCDecl* O, Message* Exp, int TypeCast, bool CArray) {
	int Rz = 0;
	SCDecl* I = JB_Incr(Self->Internal);
	if (((bool)I) and SC_Decl_MiniMatch(I, O, 0)) {
		SCDecl* OAddr = JB_Incr(SC_Decl_GetAddress(O, kSC__DeclMode_Always));
		if (CArray) {
			OAddr->C_Array = 0;
		}
		if (SC_Decl_MiniMatch(Self, OAddr, TypeCast) and ((!Exp) or SC_Msg_CanGetAddress(Exp, nil))) {
			Rz = SC_Msg_GetAddressOf(Exp, OAddr, CArray);
		}
		JB_Decr(OAddr);
	}
	JB_Decr(I);
	return Rz;
}

JB_String* SC_Decl_TryUseSaveable(SCDecl* Self, bool IsSave, SCClass* Cls) {
	JB_String* Type = JB_Incr(SC_Decl_IsSaveable(Self));
	if ((!JB_Str_Exists(Type)) or (JB_Str_Equals(Type, JB_LUB[1647], false))) {
		if ((!SC__Options_IgnoreCantSaveErrors)) {
			if ((!IsSave)) {
				FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
				JB_FS_AppendString(_fsf0, JB_LUB[749]);
				JB_FS_AppendString(_fsf0, Self->Name);
				JB_FS_AppendString(_fsf0, JB_LUB[121]);
				JB_FS_AppendString(_fsf0, Self->Type->Name);
				JB_FS_AppendByte(_fsf0, ')');
				JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
				JB_Decr(_fsf0);
				JB_Msg_SyntaxExpect(Self->Source, _tmPf1);
				JB_Decr(_tmPf1);
				JB_Decr(Type);
				return JB_LUB[0];
			}
		}
		JB_SafeDecr(Type);
		return Type;
	}
	if (JB_Str_Equals(Type, JB_LUB[1810], false)) {
		JB_Decr(Type);
		return JB_LUB[0];
	}
	if (Self->Type->SavingCanSkip) {
		SCDecl* Con = JB_Incr(Self->Contains);
		if (Con) {
			JB_String* _tmPf2 = JB_Incr(SC_Decl_TryUseSaveable(Con, true, Cls));
			if ((!JB_Str_Exists(_tmPf2))) {
				JB_Decr(_tmPf2);
				JB_Decr(Con);
				JB_Decr(Type);
				return JB_LUB[0];
			}
			JB_Decr(_tmPf2);
		}
		JB_Decr(Con);
	}
	JB_SafeDecr(Type);
	return Type;
}

DataTypeCode SC_Decl_TypeInfo(SCDecl* Self) {
	if (((!SC_Decl_IsCArray(Self))) and ((!Self->PointerCount))) {
		return Self->Type->TypeInfo;
	}
	return kJB__TC_UnusedType;
}

bool SC_Decl_TypeIsReached(SCDecl* Self) {
	return ((bool)Self->Type->MyReacher);
}

uint SC_Decl_TypeMatch(SCDecl* Self, SCDecl* O, int TypeCast, Message* Exp) {
	if (O == nil) {
		if ((!Self->Default)) {
			return 0;
		}
		return kJB_kUseDefaultParams;
	}
	if (O == Self) {
		return kJB_kSimpleMatch;
	}
	if (SC_Decl_IsNil(O) and (((bool)(TypeCast & kJB_kTypeCastTrue)))) {
		if (SC_Decl_CantBeNilInCpp(Self)) {
			if ((!Exp)) {
				return kJB_kNeedsTypeCast;
			}
			Message* NilStruct = JB_Incr(SC_Decl_CreateStructNil(Self, Exp));
			JB_FreeIfDead(SC_Msg_ReplaceWith(Exp, NilStruct));
			JB_Decr(NilStruct);
			return kJB_kCastedMatch;
		}
		return kJB_kSimpleMatch;
	}
	if (SC_Decl_PointeryMatch(O, Self)) {
		uint Ooop = SC_Decl_PointeryMatchSub(Self, O, TypeCast);
		if ((!Ooop) and ((((bool)(TypeCast & kJB_kTypeCastBothWays))) and (SC_Decl_IsNormalObject(O) and SC_Decl_IsNormalObject(Self)))) {
			Ooop = SC_Decl_PointeryMatchSub(O, Self, TypeCast);
		}
		if (Ooop) {
			return Ooop;
		}
	}
	if ((((bool)(TypeCast & kJB_kTypeCastTrue))) and ((SC_Decl_IsVoidPtr(Self)) and (((bool)O->PointerCount) or ((bool)O->Type->FuncProto)))) {
		if ((!Exp)) {
			return kJB_kNeedsTypeCast | kJB_kVoidPtrMatch;
		}
		if (O->Type->FuncProto) {
			return SC_Msg_CastFPToVoidPtr(Exp);
		}
		return kJB_kCastedMatch;
	}
	if (((bool)(TypeCast & kJB_kActualTypecasts))) {
		return SC_Decl_TryTypeCast(Self, O, Exp, TypeCast);
	}
	return 0;
}

void SC_Decl_TypeReach(SCDecl* Self, SCNode* From, Message* Src) {
	//;
	if (Self) {
		return SC_Class_Reach(Self->Type, From, Src);
	}
}

bool SC_Decl_TypeSuffers(SCDecl* Self) {
	if (SC_Decl_IsCArray(Self)) {
		return false;
	}
	if (Self->PointerCount) {
		return true;
	}
	SCNodeType D = Self->Type->BaseType;
	return (D == kSC__SCNodeType_FuncProto) or (D == kSC__SCNodeType_Object);
}

Message* SC_Decl_WriteDeclFull(SCDecl* Self, JB_String* DeclName, int Minimal) {
	JB_Incr(DeclName);
	if ((!(JB_Str_Exists(DeclName)))) {
		JB_SetRef(DeclName, Self->Name);
	}
	if ((!(JB_Str_Exists(DeclName) or (!Self->Default)))) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(DeclName);
		return nil;
	}
	if (JB_Str_Exists(DeclName)) {
		Message* _tmPf2 = JB_Incr(SC_Decl_WriteDeclSub(Self, DeclName, Minimal));
		JB_Decr(DeclName);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_Decr(DeclName);
	return ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxDecl, JB_LUB[0])));
		Message* _tmPf1 = JB_Incr(SC_Decl_WriteType(Self, Minimal));
		JB_Tree_SyntaxAppend(__imPf0, _tmPf1);
		JB_Decr(_tmPf1);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	});
}

Message* SC_Decl_WriteDeclSub(SCDecl* Self, JB_String* Name, int Minimal) {
	Message* Dcl = JB_Incr((JB_Syx_Msg(JB_SyxDecl, JB_LUB[0])));
	Message* _tmPf2 = JB_Incr(SC_Decl_WriteType(Self, Minimal));
	JB_Tree_SyntaxAppend(Dcl, _tmPf2);
	JB_Decr(_tmPf2);
	Message* Def = JB_Incr(Self->Default);
	if ((!Def) and (Minimal >= 2)) {
		JB_FreeIfDead(JB_Msg_Msg(Dcl, JB_SyxThg, Name));
		JB_Decr(Def);
		JB_SafeDecr(Dcl);
		return Dcl;
	}
	if ((!(Def))) {
		JB_SetRef(Def, Self->Type->Defawlt);
	}
	if ((!Def) or (((bool)Self->PointerCount) and (Minimal < 2))) {
		JB_SetRef(Def, (JB_Syx_Msg(JB_SyxThg, JB_LUB[1810])));
	}
	 else {
		JB_SetRef(Def, JB_Msg_Copy(Def, nil));
	}
	SCDecl* C = JB_Incr(Self->Contains);
	if (C) {
		JB_SetRef(Def, ({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxType, JB_LUB[563])));
			JB_Tree_SyntaxAppend(__imPf0, Def);
			Message* _tmPf3 = ({
				Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
				Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Self->Type->Name));
				JB_Tree_SyntaxAppend(__imPf1, (_tmPf4));
				JB_Decr(_tmPf4);
				Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[1838]));
				JB_Tree_SyntaxAppend(__imPf1, (_tmPf5));
				JB_Decr(_tmPf5);
				Message* _tmPf6 = JB_Incr(JB_Syx_Msg(JB_SyxThg, C->Type->Name));
				JB_Tree_SyntaxAppend(__imPf1, (_tmPf6));
				JB_Decr(_tmPf6);
				JB_SafeDecr(nil);
				 __imPf1;
			});
			JB_Tree_SyntaxAppend(__imPf0, _tmPf3);
			JB_Decr(_tmPf3);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
	}
	JB_Decr(C);
	Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Name));
	Message* _tmPf7 = JB_Incr(SC_NewEqRelWithMsgMsg((_tmPf8), Def));
	JB_Decr(Def);
	JB_Decr(_tmPf8);
	JB_Tree_SyntaxAppend(Dcl, _tmPf7);
	JB_Decr(_tmPf7);
	JB_SafeDecr(Dcl);
	return Dcl;
}

Message* SC_Decl_WriteDeclTypeAndName(SCDecl* Self, JB_String* Name, int Minimal) {
	JB_Incr(Name);
	if ((!(JB_Str_Exists(Name)))) {
		JB_SetRef(Name, Self->Name);
	}
	Message* _tmPf3 = JB_Incr(({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxDecl, JB_LUB[0])));
		Message* _tmPf1 = JB_Incr(SC_Decl_WriteType(Self, Minimal));
		JB_Tree_SyntaxAppend(__imPf0, _tmPf1);
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Name));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf2));
		JB_Decr(_tmPf2);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	JB_Decr(Name);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

Message* SC_Decl_WriteNilDecl(SCDecl* Self) {
	Message* L = SC_Decl_WriteNilRel(Self);
	Message* Dcl = (JB_Syx_Msg(JB_SyxDecl, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Dcl, SC_Decl_WriteType(Self, 0));
	JB_Tree_SyntaxAppend(Dcl, L);
	JB_SetRef(Dcl->Obj, Self);
	JB_SetRef(L->Obj, Self);
	JB_SetRef(((Message*)JB_Ring_First(L))->Obj, Self);
	return Dcl;
}

Message* SC_Decl_WriteNilRel(SCDecl* Self) {
	return SC_NewEqRelWithStrStr(Self->Name, JB_LUB[1810]);
}

Message* SC_Decl_WriteSimpleType(SCDecl* Self) {
	Message* Rz = nil;
	Rz = SC_Decl_WriteVerySimpleType(Self);
	if (SC_Decl_SyntaxIs(Self, kSC__SCDeclInfo_Borrowed)) {
		Rz = SC_Msg_WrapWith(Rz, JB_SyxARel, JB_LUB[308]);
	}
	if (SC_Decl_TypeSuffers(Self) and SC_Decl_NilStated(Self)) {
		if (SC_Decl_StatedOptional(Self)) {
			Rz = SC_Msg_WrapWith(Rz, JB_SyxBRel, JB_LUB[598]);
		}
		 else if (((bool)SC_Decl_StatedReal(Self)) and JB_IsDebug()) {
			Rz = SC_Msg_WrapWith(Rz, JB_SyxBRel, JB_LUB[214]);
		}
	}
	return Rz;
}

Message* SC_Decl_WriteType(SCDecl* Self, int Minimal) {
	Message* Rz = nil;
	Message* Simple = SC_Decl_WriteSimpleType(Self);
	SCDecl* C = Self->Contains;
	if ((!C) or (((bool)Minimal) and SC_Decl_AlreadyContains(Self))) {
		return Simple;
	}
	Rz = JB_Syx_Msg(JB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Rz, Simple);
	JB_Msg_AppendSyx(Rz, JB_SyxOpp, JB_LUB[1838]);
	JB_Tree_SyntaxAppend(Rz, SC_Decl_WriteType(C, Minimal));
	return Rz;
}

Message* SC_Decl_WriteTypeCast(SCDecl* Self, Message* Msg) {
	Message* TheType = JB_Incr((JB_Syx_Msg(JB_SyxType, JB_LUB[563])));
	JB_Tree_SyntaxAppend(TheType, Msg);
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteType(Self, 0));
	JB_Tree_SyntaxAppend(TheType, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SetRef(TheType->Obj, Self);
	JB_SafeDecr(TheType);
	return TheType;
}

Message* SC_Decl_WriteVerySimpleType(SCDecl* Self) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Syx_OperatorPlus(JB_SyxThg, Self->Type->Name));
	{
		int _LoopSrcf1 = ((int)Self->PointerCount);
		int _Valuef2 = 0;
		while (_Valuef2 < _LoopSrcf1) {
			JB_SetRef(Rz, SC_Msg_WrapWith(Rz, JB_SyxBRel, JB_LUB[241]));
			_Valuef2++;
		};
	}
	;
	if (SC_Decl_IsCArray(Self)) {
		JB_SetRef(Rz, SC_Msg_WrapWith(Rz, JB_SyxAcc, JB_LUB[0]));
		Message* _tmPf3 = JB_Incr(JB_Msg_Msg(Rz, JB_SyxArr, JB_LUB[0]));
		JB_Msg_AppendNum(_tmPf3, Self->C_Array);
		JB_Decr(_tmPf3);
	}
	JB_SafeDecr(Rz);
	return Rz;
}


Message* SC_SCFile_AST(SCFile* Self) {
	return ({
		Message* _X = Self->LiveAST;
		if ((!_X)) {
			_X = SC_SCFile_ASTSub(Self, false);
			JB_SetRef(Self->LiveAST, _X);
		}
		 _X;
	});
}

Message* SC_SCFile_ASTSub(SCFile* Self, bool Orig) {
	Message* Rz = nil;
	JB_Flow__Input(Self, JB_LUB[614]);
	JB_String* _tmPf0 = JB_Incr(JB_File_ReadAll(Self, 134217728, true));
	JB_String* Str = JB_Incr(JB_Str_Decompress(_tmPf0, 268435456, nil));
	JB_Decr(_tmPf0);
	if (JB_Safe_SyntaxCast(Str)) {
		JB_MemoryLayer* Layer = JB_Incr(JB_ClassData_CreateUseLayer((&MessageData), Self, Str));
		JB_Decr(Layer);
		JB_SetRef(Self->FData, Str);
		JB_SetRef(JB_StdErr->Source, JB_File_Path(Self));
		JB__Tk__DotInsertAllow = true;
		byte Oldimp = SC__Imp_CurrIsManuallyImported;
		SC__Imp_CurrIsManuallyImported = Self->Proj->Depth;
		JB__Tk_Using.Tag = 0;
		if ((!Orig)) {
			JB_SetRef(Rz, SC_Str_ParseClean(Self->FData));
		}
		 else {
			JB_SetRef(Rz, JB_Str_Parse(Self->FData, JB_SyxArg, true));
		}
		SC__Imp_CurrIsManuallyImported = Oldimp;
		SC_SCFile_DetectInsecureWords(Self);
		JB__Tk_Using.Tag = 0;
		JB__Tk__DotInsertAllow = false;
		JB_SetRef(JB_StdErr->Source, JB_LUB[0]);
	}
	JB_Decr(Str);
	JB_ClassData_Restore((&MessageData));
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_SCFile_CollectGlobals(SCFile* Self, SCNode* P) {
	SC_Imp_Use(Self->Proj);
	SC_CollectDeclsGlobals(Self->LiveAST, P);
}

SCFile* SC_SCFile_Constructor(SCFile* Self, JB_File* F, SCImport* P) {
	if (Self == nil) {
		Self = ((SCFile*)JB_NewClass(&SCFileData));
	}
	JB_String* _tmPf0 = JB_Incr(((JB_String*)JB_Ternary(F != nil, ((JB_String*)JB_File_Path(F)), ((JB_String*)JB_LUB[0]))));
	JB_File_Constructor(Self, _tmPf0);
	JB_Decr(_tmPf0);
	JB_StringC* _tmPf3 = JB_LUB[0];
	Self->ExportName = JB_Incr(_tmPf3);
	JB_StringC* _tmPf2 = JB_LUB[0];
	Self->FData = JB_Incr(_tmPf2);
	Self->OrigAST = nil;
	Self->filenum = 0;
	//;
	Self->Proj = JB_Incr(P);
	Self->IsInternal = (F == nil);
	Message* _tmPf1 = SC_SCFile_Start_AST(Self);
	Self->LiveAST = JB_Incr(_tmPf1);
	SC__Comp_stTotalFileCount = (SC__Comp_stTotalFileCount + Self->IsInternal);
	SC__Imp_Recent = JB_int64_OperatorMax(SC__Imp_Recent, JB_File_Modified(F));
	return Self;
}

void SC_SCFile_Destructor(SCFile* Self) {
	JB_Clear(Self->ExportName);
	JB_Clear(Self->Proj);
	JB_Clear(Self->FData);
	JB_Clear(Self->LiveAST);
	JB_Clear(Self->OrigAST);
	JB_File_Destructor(Self);
}

void SC_SCFile_DetectInsecureWords(SCFile* Self) {
	if ((!SC__Options_PerryOutput)) {
		return;
	}
	Dictionary* Words = SC__Comp_InsecureWords;
	if ((!Words)) {
		return;
	}
	ivec2 Where = ivec2{0, 0};
	JB_Object* Found = JB_Dict_FindStr(Words, Self->FData, (&Where));
	if (Found) {
		Message* Place = JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[0]);
		(JB_Msg_RangeSet(Place, ((IntRange)Where)));
		JB_Rec__NewErrorWithNode(Place, JB_LUB[923], JB_File_Path(Self));
	}
}

Message* SC_SCFile_GetMsg(SCFile* Self, int Pos) {
	{
		Message* _LoopSrcf3 = SC_SCFile_Orig(Self);
		Message* F = _LoopSrcf3;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(_LoopSrcf3));
		while (((bool)(F)) and (F != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(F));
			if (JB_Str_Exists(F->Name) and JB_Rg_Contains1(JB_Msg_Range(F), Pos)) {
				return F;
			}
			F = _N_f2;
		};
		;
	}
	;
	return nil;
}

Message* SC_SCFile_Orig(SCFile* Self) {
	if ((!Self->OrigAST)) {
		JB_SetRef(Self->OrigAST, SC_SCFile_ASTSub(Self, true));
	}
	return Self->OrigAST;
}

Message* SC_SCFile_Start_AST(SCFile* Self) {
	Message* Rz = nil;
	if (Self->IsInternal) {
		JB_MemoryLayer* _tmPf0 = JB_Incr(JB_Mem_CreateLayer((&MessageData), Self));
		JB_Mem_Use(_tmPf0);
		JB_Decr(_tmPf0);
		JB_SetRef(Rz, JB_Msg_ConstructorNormal(nil, JB_SyxArg, JB_LUB[0]));
		JB_ClassData_Restore((&MessageData));
	}
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_SCFile_Use(SCFile* Self) {
	SC__Imp_Curr = Self->Proj;
	Message* L = JB_Incr(Self->LiveAST);
	if (L) {
		JB_MemoryLayer* _tmPf0 = JB_Incr(JB_ObjLayer(L));
		JB_Mem_Use(_tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(L);
}


void SC_Iter_Check(SCIterator* Self, SCClass* Cls) {
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self->Source);
	JB_String* Dot = JB_Incr(((JB_String*)JB_Ternary(JB_Str_Exists(Self->Name), ((JB_String*)JB_Str_OperatorPlus(JB_LUB[353], Self->Name)), ((JB_String*)JB_LUB[0]))));
	FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf1, JB_LUB[1736]);
	JB_FS_AppendString(_fsf1, Dot);
	JB_Decr(Dot);
	JB_FS_AppendString(_fsf1, JB_LUB[181]);
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf1));
	JB_Decr(_fsf1);
	Message* Msg = JB_Incr(SC_Str_ParseClean(_tmPf2));
	JB_Decr(_tmPf2);
	SCFunction* Fnc = JB_Incr(((SCFunction*)SC_Func__NewFunc(Msg, Cls, Self->Source)));
	JB_Decr(Msg);
	if (Fnc) {
		SC_Func_FuncDecls(Fnc);
		SC_Func_Transform(Fnc);
	}
	JB_Decr(Fnc);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

SCIterator* SC_Iter_Constructor(SCIterator* Self, SCClass* Parent, Message* Msg) {
	if (Self == nil) {
		Self = ((SCIterator*)JB_NewClass(&SCIteratorData));
	}
	SC_Named_Constructor(Self);
	Self->ValueRenamer = nil;
	Self->Parent = JB_Incr(Parent);
	Message* Thg = JB_Incr(((Message*)JB_Ring_First(Msg)));
	JB_String* X = JB_Incr(JB_Msg_Name(Thg));
	JB_Decr(Thg);
	if ((!JB_Str_Exists(X))) {
		JB_SetRef(X, JB_LUB[817]);
	}
	Self->Name = JB_Incr(X);
	JB_Decr(X);
	ErrorMarker M = JB_Rec_Mark(JB_StdErr);
	Message* Src = JB_Incr(JB_Msg_Last(Msg, JB_SyxArg));
	if ((!Src)) {
		JB_Msg_SyntaxExpect(Msg, nil);
	}
	Self->Source = JB_Incr(Src);
	Message* _tmPf0 = JB_Incr(JB_Msg_FindSyxName(Self->Source, JB_SyxTmp, JB_LUB[2047], false));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(Msg, JB_LUB[1792]);
	}
	Self->WhileLoop = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* WhileArg = JB_Incr(JB_Msg_FindSyx(Self->WhileLoop, JB_SyxArg));
	if ((!WhileArg)) {
		JB_Msg_SyntaxExpect(Self->WhileLoop, JB_LUB[1789]);
	}
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(WhileArg)));
	Message* _tmPf4 = ((Message*)JB_Ring_First(_tmPf2));
	JB_Decr(_tmPf2);
	Self->LoopEndCond = JB_Incr(_tmPf4);
	Message* Cond = JB_Incr(((Message*)JB_Ring_First(Self->WhileLoop)));
	if (Cond == WhileArg) {
		JB_SetRef(Cond, (JB_Syx_Msg(JB_SyxThg, JB_LUB[2004])));
	}
	 else if ((bool)Cond) {
		JB_SetRef(Cond, SC_Msg_NeedBra(Cond));
	}
	Self->LoopCond = JB_Incr(Cond);
	JB_Decr(Cond);
	Message* W = nil;
	if (WhileArg) {
		JB_SetRef(W, JB_Msg_FindNested(WhileArg, JB_SyxTmp, JB_LUB[2064], false));
		if ((!W)) {
			JB_Msg_SyntaxExpect(WhileArg, JB_LUB[1024]);
		}
	}
	JB_Decr(WhileArg);
	Self->Yield = JB_Incr(W);
	JB_Decr(W);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(Self->Yield)));
	if ((!_tmPf1)) {
		JB_Msg_SyntaxExpect(Self->Yield, JB_LUB[1023]);
	}
	Self->Value = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	Message* I = JB_Incr(((Message*)JB_Tree_Second(Self->Yield)));
	if (I) {
		JB_Msg_Expect(I, JB_SyxBra, nil);
		JB_SetRef(I, ((Message*)JB_Ring_First(I)));
	}
	Self->Index = JB_Incr(I);
	JB_Decr(I);
	SCNodeRenamer* Sn = JB_Incr(SC_NR_Constructor(nil));
	Self->selfs = JB_Incr(Sn);
	if (Src) {
		SC_NR_CollectSelfs(Sn, Src);
	}
	JB_Decr(Sn);
	Array* _tmPf3 = SC_Iter_Uniqueify(Self, Src);
	JB_Decr(Src);
	Self->Names = JB_Incr(_tmPf3);
	Self->OK = JB_ErrorMarker_SyntaxCast(M);
	return Self;
}

void SC_Iter_Destructor(SCIterator* Self) {
	JB_Clear(Self->Names);
	JB_Clear(Self->selfs);
	JB_Clear(Self->ValueRenamer);
	JB_Clear(Self->Index);
	JB_Clear(Self->LoopCond);
	JB_Clear(Self->LoopEndCond);
	JB_Clear(Self->Value);
	JB_Clear(Self->WhileLoop);
	JB_Clear(Self->Yield);
	JB_Clear(Self->Parent);
	SC_Named_Destructor(Self);
}

Message* SC_Iter_MakeWhile(SCIterator* Self, Message* Arg, Message* Postcond) {
	Message* Result = JB_Incr(JB_Msg_Copy(Self->WhileLoop, Arg));
	Message* Loop = JB_Incr(SC_Msg_Deepest(Result, JB_SyxTmp, JB_LUB[2047]));
	if ((!Loop)) {
		JB_Decr(Loop);
		JB_Decr(Result);
		return nil;
	}
	Message* Larg = JB_Incr(JB_Msg_FindSyx(Loop, JB_SyxArg));
	if ((!Larg)) {
		JB_Decr(Larg);
		JB_Decr(Loop);
		JB_Decr(Result);
		return nil;
	}
	Message* It = JB_Incr(((Message*)JB_Ring_NextSib(Larg)));
	if (It) {
		JB_Tree_Remove(It);
	}
	JB_Decr(It);
	JB_FreeIfDead(SC_Msg_ReplaceWith(Larg, Arg));
	JB_Decr(Larg);
	JB_Tree_SyntaxAppend(Loop, Postcond);
	JB_Decr(Loop);
	JB_SafeDecr(Result);
	return Result;
}

void SC_Iter_RenameSelf(SCIterator* Self, Message* Name) {
	SC_NR_Rename(Self->selfs, Name);
}

void SC_Iter_RenameValue(SCIterator* Self, Message* S) {
	SCNodeRenamer* V = JB_Incr(Self->ValueRenamer);
	if ((!V)) {
		JB_SetRef(V, SC_NR_Constructor(nil));
		JB_SetRef(Self->ValueRenamer, V);
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_FlatAfter(Self->Source)));
		SC_NR_Collect(V, Self->Source, Self->Value->Name, _tmPf0);
		JB_Decr(_tmPf0);
	}
	SC_NR_Rename(V, S);
	JB_Decr(V);
}

void SC_Iter_Renuqify(SCIterator* Self, SCNode* P) {
	{
		Array* _LoopSrcf2 = Self->Names;
		int _if0 = 0;
		while (true) {
			SCNodeRenamer* N = ((SCNodeRenamer*)JB_Array_Value(_LoopSrcf2, _if0));
			if (N == nil) {
				break;
			}
			SC_NR_Uniqueify(N, P);
			_if0++;
		};
	};
}

Array* SC_Iter_Uniqueify(SCIterator* Self, Message* Msg) {
	Array* Rz = ((Array*)JB_Array_Constructor0(nil));
	{
		Message* Dcl = Msg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Msg));
		while (((bool)(Dcl)) and (Dcl != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Dcl));
			if (JB_Msg_EqualsSyx(Dcl, JB_SyxDecl, false)) {
				Message* CurrName = SC_Msg_GetDclName(Dcl, false);
				if (CurrName) {
					SCNodeRenamer* Ren = SC_NR_Constructor(nil);
					SC_NR_CollectDclThg(Ren, CurrName);
					JB_Array_SyntaxAppend(Rz, Ren);
				}
			}
			Dcl = _N_f2;
		};
		;
	}
	;
	return Rz;
}

int SC_Iter__Init_() {
	{
	}
	;
	return 0;
}

int SC_Iter__InitCode_() {
	{
	}
	;
	JB_SetRef(SC__Iter_carray, SC_Iter__SimpleIter(JB_LUB[1734]));
	JB_SetRef(SC__Iter_pointer, SC_Iter__SimpleIter(JB_LUB[1735]));
	return 0;
}

SCNode* SC_Iter__NeuIter(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (JB_Object_MustBe(Name_space, &SCClassData, Node)) {
		SCIterator* It = JB_Incr(SC_Iter_Constructor(nil, ((SCClass*)Name_space), Node));
		if (It->OK) {
			SC_Base_TryAdd(((SCClass*)Name_space), Node, It, It->Name);
			JB_Decr(It);
			return SC__Comp_program;
		}
		JB_Decr(It);
	}
	return nil;
}

SCIterator* SC_Iter__SimpleIter(JB_String* Src) {
	SCIterator* Rz = nil;
	Message* _tmPf1 = JB_Incr(JB_Str_Parse(Src, JB_SyxArg, true));
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(_tmPf1)));
	Message* S = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	SCIterator* It = JB_Incr(SC_Iter_Constructor(nil, nil, S));
	JB_Decr(S);
	if (It->OK) {
		JB_SetRef(Rz, It);
	}
	JB_Decr(It);
	JB_Decr(_tmPf1);
	JB_SafeDecr(Rz);
	return Rz;
}


JB_String* SC_Base_AutoCompleteKind(SCNode* Self) {
	if (JB_Object_FastIsa(Self, &SCModuleData)) {
		return JB_LUB[1798];
	}
	if (JB_Object_FastIsa(Self, &SCClassData)) {
		if (((SCClass*)Self)->FuncProto) {
			return JB_LUB[1678];
		}
		if (SC_Class_IsDataTypeOnly(((SCClass*)Self))) {
			return JB_LUB[1585];
		}
		if (SC_Class_IsStruct(((SCClass*)Self))) {
			return JB_LUB[1972];
		}
		if (SC_Class_IsObject(((SCClass*)Self))) {
			return JB_LUB[1544];
		}
	}
	return JB_LUB[2020];
}

void SC_Base_CollectConstantsSub(SCNode* Self, Message* Ch) {
	Message* FuncName = JB_Incr(((Message*)JB_Ring_First(Ch)));
	if ((!FuncName)) {
		JB_Decr(FuncName);
		return;
	}
	Message* Arg = JB_Incr(((Message*)JB_Tree_Get(Ch, -1)));
	Message* Vs = JB_Incr(FuncName);
	if (JB_Msg_EqualsSyx(FuncName, JB_SyxThg, false)) {
		JB_SetRef(Vs, ((Message*)JB_Ring_NextSib(FuncName)));
	}
	 else {
		JB_SetRef(FuncName, nil);
	}
	if (Arg != Vs) {
		JB_Msg_SyntaxExpect(Vs, nil);
		JB_Decr(Vs);
		JB_Decr(Arg);
		JB_Decr(FuncName);
		return;
	}
	JB_Decr(Vs);
	if ((!((JB_Msg_EqualsSyx(Arg, JB_SyxArg, false)) or (JB_Msg_EqualsSyx(Arg, JB_SyxList, false))))) {
		JB_Msg_SyntaxExpect(Arg, nil);
		JB_Decr(Arg);
		JB_Decr(FuncName);
		return;
	}
	uint64 NextNum = 0 + ((JB_Msg_SyntaxEquals(Ch, JB_LUB[1656], false)));
	uint64 StartNum = NextNum;
	uint64 LastFlag = 0;
	Array* FixLater = JB_Incr(JB_Array_Constructor0(nil));
	Array* NameList = JB_Incr(JB_Array_Constructor0(nil));
	SCDecl* CurrType = nil;
	{
		Message* Line = JB_Incr(((Message*)JB_Ring_First(Arg)));
		while (Line) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(Line)));
			if ((((JB_Msg_EqualsSyx(Line, JB_SyxRel, false))) and ((({
				Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_First(Line)));
				bool _tmPf7 = JB_Msg_EqualsSyx(_tmPf8, JB_SyxList, false);
				JB_Decr(_tmPf8);
				 _tmPf7;
			})))) or ((({
				Message* _tmPf10 = JB_Incr(((Message*)JB_Ring_Last(Line)));
				bool _tmPf9 = JB_Msg_EqualsSyx(_tmPf10, JB_SyxList, false);
				JB_Decr(_tmPf10);
				 _tmPf9;
			})))) {
				SC_Base_ConstantExpand(Self, Line);
			}
			 else if (JB_Msg_EqualsSyx(Line, JB_SyxTmp, false)) {
				if (JB_Ring_HasChildren(Line)) {
					JB_Msg_SyntaxExpect(Line, nil);
					JB_Decr(_Nf2);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(Arg);
					JB_Decr(FuncName);
					return;
				}
				Line->Func = JB_SyxThg;
			}
			JB_SetRef(Line, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(Line);
		;
	}
	;
	{
		Message* Line = JB_Incr(((Message*)JB_Ring_First(Arg)));
		while (Line) {
			Message* _Nf4 = JB_Incr(((Message*)JB_Ring_NextSib(Line)));
			if (JB_Msg_EqualsSyx(Line, JB_SyxDecl, false)) {
				Message* _tmPf11 = JB_Incr(((Message*)JB_Ring_First(Line)));
				JB_SetRef(CurrType, SC_ExtractDecl(_tmPf11, Self, kSC__DeclMode_Globals));
				JB_Decr(_tmPf11);
				if ((!CurrType)) {
					JB_Msg_SyntaxExpect(Line, nil);
					JB_Decr(_Nf4);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(Arg);
					JB_Decr(FuncName);
					return;
				}
				JB_Tree_Remove(Line);
				JB_SetRef(Line, _Nf4);
				JB_Decr(_Nf4);
				continue;
			}
			if (JB_Msg_SyntaxEquals(Line, JB_LUB[357], false)) {
				NextNum = StartNum;
				JB_SetRef(Line, _Nf4);
				JB_Decr(_Nf4);
				continue;
			}
			SCDecl* NewItem = nil;
			if (JB_Msg_EqualsSyx(Line, JB_SyxThg, false)) {
				//using;
				MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Line);
				JB_SetRef(NewItem, SC_Decl_Constructor(nil, JB_TypeInt));
				Message* NewNum = JB_Incr(SC_NewDeclNum(NewItem, NextNum, Line->Name));
				JB_SetRef(NewItem->Source, Line);
				if (JB_Msg_SyntaxEquals(Ch, JB_LUB[1656], false)) {
					LastFlag++;
					NextNum = (NextNum << 1);
				}
				 else {
					NextNum++;
				}
				if (CurrType) {
					SC_Decl_ConstCheck(CurrType, nil, NewNum, CurrType);
					SC_Decl_CopyTypeInfoTo(CurrType, NewItem);
				}
				JB_Decr(NewNum);
				JB_MsgPos_SyntaxUsingComplete((&_usingf0));
				JB_MsgPos_Destructor((&_usingf0));
			}
			 else {
				if ((!(JB_Msg_Expect(Line, JB_SyxRel, nil) and ({
					Message* _tmPf13 = JB_Incr(JB_Msg_NeedSyxInt(Line, JB_SyxOpp, 1));
					bool _tmPf12 = JB_Msg_Expect(_tmPf13, JB_SyxOpp, JB_LUB[586]);
					JB_Decr(_tmPf13);
					 _tmPf12;
				})))) {
					JB_Decr(NewItem);
					JB_Decr(_Nf4);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(Arg);
					JB_Decr(FuncName);
					return;
				}
				Message* ValueNode = JB_Incr(((Message*)JB_Tree_Get(Line, 2)));
				if ((!ValueNode)) {
					JB_Msg_SyntaxExpect(Line, nil);
					JB_Decr(ValueNode);
					JB_Decr(NewItem);
					JB_Decr(_Nf4);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(Arg);
					JB_Decr(FuncName);
					return;
				}
				Message* Thg = JB_Incr(JB_Msg_NeedSyx(Line, JB_SyxThg));
				if ((!Thg)) {
					JB_Decr(Thg);
					JB_Decr(ValueNode);
					JB_Decr(NewItem);
					JB_Decr(_Nf4);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(Arg);
					JB_Decr(FuncName);
					return;
				}
				SCDecl* OMGType = JB_Incr(SC_TypeOfExpr(ValueNode, Self, nil));
				if ((!OMGType)) {
					JB_Decr(OMGType);
					JB_Decr(Thg);
					JB_Decr(ValueNode);
					JB_Decr(NewItem);
					JB_Decr(_Nf4);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(Arg);
					JB_Decr(FuncName);
					return;
				}
				SCDecl* NewType = JB_Incr(CurrType);
				if ((!((NewType)))) {
					JB_SetRef(NewType, OMGType);
				}
				JB_SetRef(NewItem, SC_Decl_Constructor(nil, NewType->Type));
				if (JB_Msg_EqualsSyx(ValueNode, JB_SyxStr, false)) {
					SC_Func__ObjectifyString(ValueNode);
					JB_SetRef(ValueNode->Obj, JB_TypeString->TypeNormal);
				}
				 else if ((SC_Msg_IsInt(ValueNode)) or ((JB_Msg_EqualsSyx(ValueNode, JB_SyxUnit, false)))) {
					SC_Decl_ConstCheck(NewType, nil, ValueNode, OMGType);
					NextNum = (JB_Msg_Int(ValueNode, 0) + 1);
				}
				JB_Decr(OMGType);
				JB_Array_SyntaxAppend(FixLater, NewItem);
				SC_Decl_CopyTypeInfoTo(NewType, NewItem);
				JB_Decr(NewType);
				(SC_Decl_NameSet(NewItem, Thg->Name));
				JB_SetRef(NewItem->Default, ValueNode);
				JB_Decr(ValueNode);
				JB_SetRef(NewItem->Source, Thg);
				JB_Decr(Thg);
			}
			NewItem->NilDeclared = kSC__NilState_Real;
			SC_Comp__NewConst(NewItem);
			JB_Array_SyntaxAppend(NameList, NewItem->Source);
			SC_Base_TryAdd(Self, Line, NewItem, NewItem->Name);
			JB_Decr(NewItem);
			JB_SetRef(Line, _Nf4);
			JB_Decr(_Nf4);
		};
		JB_Decr(Line);
		;
	}
	;
	JB_Decr(Arg);
	JB_Decr(CurrType);
	if (JB_Msg_SyntaxEquals(Ch, JB_LUB[1656], false)) {
		SCDecl* NewItem = JB_Incr(SC_Decl_Constructor(nil, JB_TypeInt));
		SC_Comp__NewConst(NewItem);
		JB_String* S = JB_Incr(((JB_String*)JB_Ternary(((bool)FuncName), ((JB_String*)FuncName->Name), ((JB_String*)JB_LUB[878]))));
		JB_String* _tmPf14 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[987], S));
		JB_Decr(S);
		JB_FreeIfDead(SC_NewDeclNum(NewItem, JB_int_Bits(((int)LastFlag)), _tmPf14));
		JB_Decr(_tmPf14);
		SC_Base_TryAdd(Self, Ch, NewItem, NewItem->Name);
		JB_Decr(NewItem);
	}
	{
		int _if5 = 0;
		while (true) {
			SCDecl* D = JB_Incr(((SCDecl*)JB_Array_Value(FixLater, _if5)));
			if (D == nil) {
				JB_Decr(D);
				break;
			}
			SC_Base_Tran_Const(Self, D, Self);
			JB_Decr(D);
			_if5++;
		};
	}
	;
	JB_Decr(FixLater);
	if (FuncName) {
		SC_Base_CreateNameDict(Self, FuncName, NameList);
	}
	JB_Decr(FuncName);
	JB_Decr(NameList);
}

void SC_Base_CollectFromNode(SCNode* Self, Message* AST, bool Visible, Message* Dest) {
	if ((!(Self->Source))) {
		JB_SetRef(Self->Source, AST);
	}
	Array* R = JB_Incr(SC_Msg_ListAll(AST));
	bool Old = SC__Base_CurrVisibility;
	SC__Base_CurrVisibility = Visible;
	{
		int _if0 = 0;
		while (true) {
			Message* C = JB_Incr(((Message*)JB_Array_Value(R, _if0)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			Visible = SC_Base_CollectOne(Self, C, Visible);
			JB_Decr(C);
			_if0++;
		};
	}
	;
	SC__Base_CurrVisibility = Old;
	if ((!Dest)) {
		JB_Decr(R);
		return;
	}
	{
		int _if2 = 0;
		while (true) {
			Message* C = JB_Incr(((Message*)JB_Array_Value(R, _if2)));
			if (C == nil) {
				JB_Decr(C);
				break;
			}
			if (JB_Msg_InMsg(C, AST)) {
				JB_Tree_SyntaxAppend(Dest, C);
			}
			JB_Decr(C);
			_if2++;
		};
	}
	;
	JB_Decr(R);
}

bool SC_Base_CollectOne(SCNode* Self, Message* C, bool Visible) {
	if (SC_Msg_OperatorIsTmp(C, JB_LUB[2036])) {
		Visible = SC_Base_LoadVisibility(Self, C);
		JB_Tree_Remove(C);
		return Visible;
	}
	(SC_Msg_visibleSet(C, Visible));
	if ((!JB_FreeIfDead(SC_Base_CollectSub(Self, C))) and (JB_Object_FastIsa(Self, &SCModuleData))) {
		SC_Mod_MoveToInitFunc(((SCModule*)Self), C, Visible);
	}
	return Visible;
}

void SC_Base_CollectOneConstants(SCNode* Self, Message* Ch) {
	SC__Base_ConstantsLoadingOverride = true;
	SC_Imp_Use(Self->Project);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Ch);
	SC_Base_CollectConstantsSub(Self, Ch);
	SC__Base_ConstantsLoadingOverride = false;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Base_CollectStr(SCNode* Self, JB_String* S) {
	Message* Rz = nil;
	JB_SetRef(Rz, SC_Str_ParseClean(S));
	SC_Base_CollectFromNode(Self, Rz, false, nil);
	JB_SafeDecr(Rz);
	return Rz;
}

SCNode* SC_Base_CollectSub(SCNode* Self, Message* C) {
	Dictionary* T = JB_Incr(JB_ClsCollectTable);
	if ((Self == SC__Comp_program) or JB_Object_Isa(Self, &SCModuleData)) {
		JB_SetRef(T, JB_RootCollectTable);
	}
	if ((!JB_Msg_EqualsSyx(C, JB_SyxTmp, false))) {
		if (JB_Object_FastIsa(Self, &SCClassData)) {
			JB_Msg_Expect(C, JB_SyxDecl, nil);
		}
		JB_Decr(T);
		return nil;
	}
	DTWrap* FnObj = JB_Incr(((DTWrap*)JB_Dict_ValueStr(T, C->Name)));
	JB_Decr(T);
	if ((!FnObj)) {
		JB_Msg_SyntaxExpect(C, nil);
		JB_Decr(FnObj);
		return nil;
	}
	SCNode* Base = JB_Incr((((FP_CollectFunc)JB_Wrap_First(FnObj)))(C, Self, C));
	JB_Decr(FnObj);
	if ((!Base)) {
		JB_Decr(Base);
		return nil;
	}
	if (Base != SC__Comp_program) {
		SC_Base_TryAdd(Self, C, Base, Base->Name);
	}
	JB_SafeDecr(Base);
	return Base;
}

void SC_Base_ConstantExpand(SCNode* Self, Message* Ch) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Ch)));
	Message* L = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_NextSib(L)));
	Message* Op = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(Op)));
	Message* R = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	if ((!(((JB_Msg_SyntaxEquals(Op, JB_LUB[586], false))) and ((JB_Msg_EqualsSyx(L, JB_SyxThg, false)))))) {
		JB_Msg_SyntaxExpect(Op, JB_LUB[846]);
		JB_Decr(R);
		JB_Decr(Op);
		JB_Decr(L);
		return;
	}
	JB_Decr(Op);
	Message* Rel = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
	JB_Tree_SyntaxAppend(Rel, L);
	JB_Decr(L);
	Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[586]));
	JB_Tree_SyntaxAppend(Rel, (_tmPf3));
	JB_Decr(_tmPf3);
	Message* _tmPf4 = JB_Incr(SC_Msg_ConstantExpandSub(R));
	JB_Tree_SyntaxAppend(Rel, _tmPf4);
	JB_Decr(_tmPf4);
	(JB_Ring_NextSibSet(Ch, Rel));
	JB_Decr(Rel);
	SC_Msg_MoveAllAfter(R, Ch);
	JB_Decr(R);
	JB_Tree_Remove(Ch);
}

SCNode* SC_Base_Constructor0(SCNode* Self) {
	if (Self == nil) {
		Self = ((SCNode*)JB_NewClass(&SCNodeData));
	}
	SC_Named_Constructor(Self);
	Self->Access = nil;
	Self->Parent = nil;
	Self->MyReacher = nil;
	Self->Project = SC__Imp_Curr;
	(SC_SCObject_IsVisibleSet(Self, SC__Base_CurrVisibility));
	return Self;
}

SCNode* SC_Base_ConstructorStr(SCNode* Self, JB_String* Name, bool Dummy) {
	if (Self == nil) {
		Self = ((SCNode*)JB_NewClass(&SCNodeData));
	}
	SC_Named_Constructor(Self);
	Self->Access = nil;
	Self->Parent = nil;
	Self->MyReacher = nil;
	Self->Project = SC__Imp_Curr;
	Self->Name = JB_Incr(Name);
	return Self;
}

SCNode* SC_Base_ConstructorMsg(SCNode* Self, Message* Node) {
	if (Self == nil) {
		Self = ((SCNode*)JB_NewClass(&SCNodeData));
	}
	SC_Named_Constructor(Self);
	Self->Access = nil;
	Self->Parent = nil;
	Self->MyReacher = nil;
	Self->Project = SC__Imp_Curr;
	Self->Source = JB_Incr(Node);
	(SC_SCObject_IsVisibleSet(Self, SC_Msg_visible(Node)));
	return Self;
}

void SC_Base_CreateNameDict(SCNode* Self, Message* FuncName, Array* NameList) {
	if ((!JB_Msg_EqualsSyx(FuncName, JB_SyxThg, false))) {
		JB_Msg_SyntaxExpect(FuncName, JB_LUB[1047]);
		return;
	}
	JB_String* AllSameType = JB_Incr(JB_LUB[0]);
	{
		int _if2 = 0;
		while (true) {
			Message* N = JB_Incr(((Message*)JB_Array_Value(NameList, _if2)));
			if (N == nil) {
				JB_Decr(N);
				break;
			}
			SCDecl* Type = JB_Incr(SC_TypeOfExpr(N, Self, nil));
			if ((!Type)) {
				JB_Decr(Type);
				JB_Decr(N);
				JB_Decr(AllSameType);
				return;
			}
			if ((!SC_Decl_IsNormal(Type))) {
				JB_Msg_SyntaxExpect(N, JB_LUB[1279]);
				JB_Decr(Type);
				JB_Decr(N);
				JB_Decr(AllSameType);
				return;
			}
			JB_Decr(N);
			JB_String* NewType = JB_Incr(Type->Type->Name);
			JB_Decr(Type);
			if ((JB_Str_Equals(AllSameType, NewType, false)) or (JB_Str_Equals(AllSameType, JB_LUB[0], false))) {
				JB_SetRef(AllSameType, NewType);
			}
			 else {
				JB_SetRef(AllSameType, JB_LUB[1836]);
			}
			JB_Decr(NewType);
			_if2++;
		};
	}
	;
	if ((!(JB_Str_Exists(AllSameType)))) {
		JB_SetRef(AllSameType, JB_LUB[1836]);
	}
	JB_String* Name = JB_Incr(FuncName->Name);
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	//;
	JB_FS_AppendString(Fs, JB_LUB[78]);
	JB_FS_AppendString(Fs, Name);
	JB_FS_AppendString(Fs, JB_LUB[132]);
	JB_FS_AppendString(Fs, AllSameType);
	JB_FS_AppendString(Fs, JB_LUB[2073]);
	JB_FS_AppendString(Fs, Name);
	JB_FS_AppendString(Fs, JB_LUB[1431]);
	JB_FS_AppendString(Fs, Name);
	JB_FS_AppendString(Fs, JB_LUB[1432]);
	//;
	{
		int _if4 = 0;
		while (true) {
			Message* S = JB_Incr(((Message*)JB_Array_Value(NameList, _if4)));
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			JB_FS_AppendString(Fs, JB_LUB[37]);
			JB_String* _tmPf6 = JB_Incr(JB_Str_LowerCase(S->Name));
			JB_FS_AppendString(Fs, _tmPf6);
			JB_Decr(_tmPf6);
			JB_FS_AppendString(Fs, JB_LUB[221]);
			JB_FS_SyntaxAppend(Fs, S);
			JB_Decr(S);
			JB_FS_AppendString(Fs, JB_LUB[279]);
			_if4++;
		};
	}
	;
	JB_FS_AppendString(Fs, JB_LUB[45]);
	JB_String* FuncSrc = JB_Incr(JB_FS_GetResult(Fs));
	JB_Decr(Fs);
	Message* _tmPf7 = JB_Incr(SC_Str_ParseClean(FuncSrc));
	JB_Decr(FuncSrc);
	Message* Msg = JB_Incr(((Message*)JB_Tree_Get(_tmPf7, 0)));
	JB_Decr(_tmPf7);
	if ((!Msg)) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(Msg);
		JB_Decr(Name);
		JB_Decr(AllSameType);
		return;
	}
	JB_FreeIfDead(SC_Base_CollectSub(Self, Msg));
	JB_Decr(Msg);
	FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf1, JB_LUB[2076]);
	JB_FS_AppendString(_fsf1, AllSameType);
	JB_Decr(AllSameType);
	JB_FS_AppendString(_fsf1, JB_LUB[2070]);
	JB_FS_AppendString(_fsf1, Name);
	JB_Decr(Name);
	JB_FS_AppendString(_fsf1, JB_LUB[1433]);
	JB_String* DclSrc = JB_Incr(JB_FS_GetResult(_fsf1));
	JB_Decr(_fsf1);
	Message* DclMsg = JB_Incr(SC_Str_ParseClean(DclSrc));
	JB_Decr(DclSrc);
	if (DclMsg) {
		SC_Msg_CollectFromBody(DclMsg, Self);
	}
	JB_Decr(DclMsg);
}

void SC_Base_Destructor(SCNode* Self) {
	JB_Clear(Self->Access);
	SC_Named_Destructor(Self);
}

Message* SC_Base_DiissplayObj(SCNode* Self, Message* Rz) {
	JB_String* _tmPf1 = JB_Incr(SC_Base_AutoCompleteKind(Self));
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[99], Self->Name));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(_tmPf1, _tmPf2));
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf2);
	JB_Msg_AppendSyx(Rz, JB_SyxEmb, _tmPf0);
	JB_Decr(_tmPf0);
	return Rz;
}

bool SC_Base_ExpectModule(SCNode* Self, Message* Errplace) {
	if ((!JB_Object_Isa(Self, &SCModuleData))) {
		JB_Msg_SyntaxExpect(Errplace, JB_LUB[1041]);
		return nil;
	}
	return true;
}

SCClass* SC_Base_FindClass(SCNode* Self, JB_String* Name, Message* Where, SCNodeFindMode Mode) {
	SCModule* Mod = SC_Base_FindModule(Self, Name, Where, Mode);
	if (Mod) {
		if (Mod->Cls) {
			return Mod->Cls;
		}
		if (!(SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_NoErrors))) {
			if (true) {
				JB_Msg_SyntaxExpect(Where, JB_LUB[847]);
			}
		}
	}
	return nil;
}

SCClass* SC_Base_FindClassMsg(SCNode* Self, Message* Where, SCNodeFindMode Mode) {
	SCModule* Mod = SC_Base_FindModuleMsg(Self, Where, Mode);
	if (Mod) {
		SCClass* C = Mod->Cls;
		if (C) {
			return C;
		}
		if (!(SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_NoErrors))) {
			if (true) {
				JB_Msg_SyntaxExpect(Where, JB_LUB[847]);
			}
		}
	}
	return nil;
}

Message* SC_Base_FindCppWrapper(SCNode* Self, Message* Place, bool Isclass) {
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		Message* Pl = JB_Incr(SC_Func_FindCppWrapperFunc(((SCFunction*)Self), Place));
		if (Pl) {
			Message* _tmPf0 = JB_Incr(SC_Msg_FindAndRemove2(Place, Pl, true, false));
			JB_Decr(Pl);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(Pl);
	}
	return SC_Msg_FindAndRemoveSub(Place, JB_LUB[1577], true, Isclass);
}

SCModule* SC_Base_FindModule(SCNode* Self, JB_String* Name, Message* Where, SCNodeFindMode Mode) {
	SCNode* Upon = Self;
	while (Upon) {
		if (JB_Str_Equals(Name, Upon->Name, true)) {
			if (JB_Object_FastIsa(Upon, &SCModuleData)) {
				return ((SCModule*)Upon);
			}
		}
		SCObject* Obj = SC_Base_SyntaxAccess(Upon, Name);
		if (JB_Object_FastIsa(Obj, &SCModuleData)) {
			return ((SCModule*)Obj);
		}
		if (SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_DontGoUp)) {
			break;
		}
		Upon = SC_Base_FindModuleParent(Upon, Mode);
	};
	if (((bool)Where) and ((!SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_NoErrors)))) {
		if (true) {
			JB_Msg_SyntaxExpect(Where, JB_Str_OperatorPlus(JB_LUB[734], Name));
		}
	}
	return nil;
}

SCModule* SC_Base_FindModuleMsg(SCNode* Self, Message* Where, SCNodeFindMode Mode) {
	Syntax Fn = Where->Func;
	if (Fn == JB_SyxDot) {
		Message* F = ((Message*)JB_Ring_First(Where));
		JB_Msg_Expect(((Message*)JB_Ring_NextSib(F)), JB_SyxEmb, nil);
		Self = SC_Base_FindModuleMsg(Self, F, Mode);
		if ((!Self)) {
			return nil;
		}
	}
	 else {
		if ((!((Fn == JB_SyxThg) or (Fn == JB_SyxName)))) {
			JB_Msg_SyntaxExpect(Where, nil);
			return nil;
		}
	}
	return SC_Base_FindModule(Self, Where->Name, Where, Mode);
}

SCNode* SC_Base_FindModuleParent(SCNode* Self, SCNodeFindMode Mode) {
	if (SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_WantAType)) {
		SCClass* Cls = ((SCModule*)Self)->Cls;
		if (Cls) {
			SCClass* P = ((SCClass*)Cls->Parent);
			if (P) {
				SCModule* Mod = P->Modul;
				if (Mod->Parent != Self) {
					return Mod;
				}
			}
		}
	}
	return Self->Parent;
}

bool SC_Base_FindVis(SCNode* Self, Message* C) {
	if ((!C)) {
		return true;
	}
	if (JB_Msg_EqualsSyx(C, JB_SyxThg, false)) {
		return SC_Msg_TrueOrFalse(C);
	}
	if (JB_Msg_EqualsSyx(C, JB_SyxAdj, false)) {
		Message* First = JB_Msg_NeedSyxName(C, JB_SyxThg, JB_LUB[1544]);
		JB_String* Name = JB_Msg_Name(JB_Msg_NeedSyxInt(C, JB_SyxThg, 1));
		SCClass* Cls = SC_Comp__FindClassName(Name);
		return ((bool)Cls) and (!Cls->Banned);
	}
	if (true) {
		JB_Msg_SyntaxExpect(C, nil);
	}
	return false;
}

Message* SC_Base_FuncSrc(SCNode* Self) {
	SCFunction* _tmPf0 = SC_Base_OwningFunc(Self);
	if ((!_tmPf0)) {
		return nil;
	}
	return _tmPf0->Source;
}

void SC_Base_ImportFile(SCNode* Self, SCFile* File) {
	Message* AST = JB_Incr(SC_SCFile_AST(File));
	if ((!AST)) {
		JB_Decr(AST);
		return;
	}
	SC_SCFile_Use(File);
	bool V = File->Proj->IsSTDLib and SC__Options_MakeInterpreter;
	SC_Base_CollectFromNode(SC__Comp_program, AST, V, nil);
	JB_Decr(AST);
}

bool SC_Base_IsModuleFunc(SCNode* Self) {
	if (JB_Object_FastIsa(Self, &SCArgData)) {
		return (!((SCArg*)Self)->IsClassArg);
	}
	return (JB_Object_Isa(Self, &SCModuleData));
}

SCClass* SC_Base_IsNormalObject(SCNode* Self) {
	if (JB_Object_FastIsa(Self, &SCClassData)) {
		if (SC_Class_IsObject(((SCClass*)Self))) {
			return ((SCClass*)Self);
		}
	}
	return nil;
}

bool SC_Base_IsSTDLib(SCNode* Self) {
	return ({
		SCImport* _t = Self->Project;
		 ((bool)JB_Ternary(((bool)_t), _t->IsSTDLib, nil));
	});
}

JB_String* SC_Base_LateAddTempory(SCNode* Self, JB_String* Type, JB_String* Name1, Message* Value, Message* Err) {
	JB_String* Name = JB_Incr(SC_UniqueTmpVar(SC__Comp_program, Name1));
	JB_FreeIfDead(SC_TypeOfExpr(Value, Self, nil));
	Message* Msg = JB_Incr(SC_MakeDecl(Type, Name, Value, kSC__SCDeclInfo_Body));
	SCDecl* D = JB_Incr(SC_TypeOfExpr(Msg, Self, nil));
	if ((!D)) {
		JB_Decr(D);
		JB_Decr(Msg);
		JB_Decr(Name);
		return JB_LUB[0];
	}
	((SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_DataConst, false)));
	JB_Tree_SyntaxAppend(Self->Source, Msg);
	JB_Decr(Msg);
	SC_Base_TryAdd(Self, Err, D, Name);
	JB_Decr(D);
	JB_SafeDecr(Name);
	return Name;
}

Message* SC_Base_LinkagePlace(SCNode* Self) {
	Message* Place = SC_Base_SourceArg(Self);
	Message* Link = JB_Msg_FindSyxName(Place, JB_SyxTmp, JB_LUB[1758], false);
	Message* _tmP0 = JB_Msg_NeedSyx(Link, JB_SyxArg);
	if ((!_tmP0)) {
		_tmP0 = Place;
	}
	return _tmP0;
}

Array* SC_Base_ListFunctions(SCNode* Self) {
	Array* Rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	if ((!Self->Access)) {
		Array* _tmPf0 = JB_Incr((JB_Array_Constructor0(nil)));
		JB_Decr(Rz);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	{
		Dictionary* _LoopSrcf3 = JB_Incr(Self->Access);
		DictionaryReader* _navf1 = JB_Incr(JB_Dict_Navigate(_LoopSrcf3));
		JB_Decr(_LoopSrcf3);
		while (true) {
			SCObject* O = JB_Incr(((SCObject*)JB_DictionaryReader_NextValue(_navf1)));
			if (O == nil) {
				JB_Decr(O);
				break;
			}
			SC_ListFunctionsSub(O, Rz);
			JB_Decr(O);
		};
		JB_Decr(_navf1);
	}
	;
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Base_LoadExportName(SCNode* Self) {
	if (JB_Str_Exists(Self->ExportName)) {
		return;
	}
	Message* Place = JB_Incr(SC_Base_LinkagePlace(Self));
	bool IsClass = (JB_Object_Isa(Self, &SCClassData));
	Message* CW = JB_Incr(SC_Base_FindCppWrapper(Self, Place, IsClass));
	JB_String* CppName = JB_Incr(SC_Msg_FindAndRemove(Place, JB_LUB[1573], false, IsClass));
	JB_String* CppPart = JB_Incr(SC_Msg_FindAndRemove(Place, JB_LUB[1575], false, IsClass));
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		if ((!(((SCFunction*)Self)->IsCppInBuilt))) {
			(SC_Func_IsCppInBuiltSet(((SCFunction*)Self), ((int)((JB_Msg_EqualsSyx(CW, JB_SyxBra, false))))));
		}
		JB_String* CppWrapper = JB_Incr(SC_Msg_Cpp_Wrapper(CW));
		if (JB_Str_Exists(CppWrapper)) {
			SC_Func_MakeParamsReal(((SCFunction*)Self));
		}
		if ((!((!SC_Func_UseExportWrapper(((SCFunction*)Self), CppWrapper)) and ((!SC_Func_UseCppName(((SCFunction*)Self), CppName)) and (!((SCFunction*)Self)->IsDisabled))))) {
			JB_Decr(CppWrapper);
			JB_Decr(CppPart);
			JB_Decr(CppName);
			JB_Decr(CW);
			JB_Decr(Place);
			return;
		}
		JB_Decr(CppWrapper);
		JB_SetRef(CppName, SC_Func_ExportNameBuilder(((SCFunction*)Self), CppPart));
		((SCFunction*)Self)->IsWrapper = ((bool)CW);
	}
	 else {
		if ((!(JB_Str_Exists(CppPart)))) {
			JB_SetRef(CppPart, Self->Name);
		}
		if ((!(JB_Str_Exists(CppName)))) {
			JB_SetRef(CppName, CppPart);
		}
		if (JB_Object_FastIsa(Self, &SCModuleData)) {
			JB_SetRef(((SCModule*)Self)->CppPart, CppPart);
		}
		 else if (JB_Object_FastIsa(Self, &SCClassData)) {
			JB_SetRef(((SCClass*)Self)->Modul->CppPart, CppPart);
			JB_String* E = JB_Incr(SC_Msg_FindAndRemove(Place, JB_LUB[1570], false, true));
			if (JB_Str_Exists(E)) {
				JB_SetRef(((SCClass*)Self)->CppClass, SC_Str_UnicodeSafeName(E, nil));
			}
			JB_Decr(E);
			JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(CppPart, JB_LUB[1425]));
			SC_Base_SetExportName(((SCClass*)Self)->Modul, _tmPf0, false);
			JB_Decr(_tmPf0);
		}
	}
	JB_Decr(Place);
	JB_Decr(CW);
	JB_Decr(CppPart);
	SC_Base_SetExportName(Self, CppName, false);
	JB_Decr(CppName);
}

bool SC_Base_LoadVisibility(SCNode* Self, Message* P) {
	bool Rz = false;
	Rz = SC_Base_FindVis(Self, ((Message*)JB_Ring_First(P)));
	(SC_SCObject_IsVisibleSet(Self, Rz));
	SC__Base_CurrVisibility = Rz;
	SC_SC_MakeComment(P);
	return Rz;
}

JB_Object* SC_Base_LookUpDot(SCNode* Self, JB_String* Name, Message* Exp, SCNode* Arg_space, SCDecl* Contains, Message* Side) {
	return SC_Base_LookUpSub(Self, Name, Exp, ((Message*)JB_Ring_Last(Exp)), Arg_space, Contains, Side, kSC__Base_kPurposeDot);
}

SCFunction* SC_Base_LookUpFunc(SCNode* Self, JB_String* Name, Message* Exp, Message* ParamsHere) {
	return ((SCFunction*)SC_Base_LookUpSub(Self, Name, Exp, ParamsHere, Self, nil, nil, kSC__Base_kPurposeFunc));
}

SCObject* SC_Base_LookUpSub(SCNode* Self, JB_String* OrigName, Message* Exp, Message* ParamsHere, SCNode* Arg_Space, SCDecl* Contains, Message* Side, int Purpose) {
	SCParamArray* ParamsArray = JB_Incr(SC_PA_Constructor(nil, Exp));
	SCNode* Curr = JB_Incr(SC_PA_DetectDotSuper(ParamsArray, Self, Arg_Space));
	SC_PA_PreReadTypes(ParamsArray, Arg_Space, ParamsHere, Side);
	bool CanFunction = ((bool)(ParamsHere)) and ((!ParamsArray->IsAddress));
	SCFunction* Missing = nil;
	SCFunction* F = nil;
	SCClass* Owning_cls = nil;
	bool AllowSelfToConstructor = false;
	if (SC__Func_CurrFunc) {
		JB_SetRef(Owning_cls, SC__Func_CurrFunc->Cls);
		if (Owning_cls) {
			AllowSelfToConstructor = SC_PA_IsSelfCon(ParamsArray);
		}
	}
	{
		SCNode* B = JB_Incr(Curr);
		while (B) {
			SCObject* O = JB_Incr(SC_Base_SyntaxAccess(B, OrigName));
			if ((!O)) {
				JB_SetRef(B, B->Parent);
				JB_Decr(O);
				continue;
			}
			if ((ParamsArray->IsDot) and ((SC_PA_IsModule(ParamsArray)) and (B == SC__Comp_program))) {
				JB_Decr(O);
				break;
			}
			if (JB_Object_FastIsa(O, &SCDeclData)) {
				if (SC_Func_HiderMatch(((SCDecl*)O)->HiderFunc, ParamsArray->IsAssigns) and (Owning_cls != Curr)) {
					JB_SetRef(O, ((SCDecl*)((SCDecl*)O)->HiderFunc));
				}
				 else {
					if (((SCDecl*)O)->Type->FuncProto) {
						if ((!((ParamsArray->IsDot or (!ParamsHere)) and ((!SC_PA_SyntaxCast(ParamsArray)))))) {
							JB_Msg_SyntaxExpect(Exp, JB_LUB[1383]);
							JB_Decr(O);
							JB_Decr(B);
							JB_Decr(Owning_cls);
							JB_Decr(F);
							JB_Decr(Missing);
							JB_Decr(Curr);
							JB_Decr(ParamsArray);
							return nil;
						}
						JB_Decr(B);
						JB_Decr(Owning_cls);
						JB_Decr(F);
						JB_Decr(Missing);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(O);
						return ((SCDecl*)O);
					}
					if ((!Side) and (ParamsArray->IsDot and ((bool)((SCDecl*)O)->Type->ProcessAs))) {
						if ((!Exp)) {
							debugger;
							JB_Decr(O);
							JB_Decr(B);
							JB_Decr(Owning_cls);
							JB_Decr(F);
							JB_Decr(Missing);
							JB_Decr(Curr);
							JB_Decr(ParamsArray);
							return nil;
						}
						SCDecl* _tmPf6 = JB_Incr(SC_Decl_ProcessAs(((SCDecl*)O), Exp));
						JB_Decr(O);
						JB_Decr(B);
						JB_Decr(Owning_cls);
						JB_Decr(F);
						JB_Decr(Missing);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(_tmPf6);
						return _tmPf6;
					}
				}
			}
			ParamsArray->AllowSelfToConstructor = AllowSelfToConstructor;
			if ((((bool)ParamsHere) and (ParamsHere->Func == JB_SyxPrm)) and (JB_Object_FastIsa(O, &SCModuleData))) {
				JB_SetRef(O, ((SCModule*)SC_Mod_GetTheNewer(((SCModule*)O))));
				ParamsArray->AllowSelfToConstructor = false;
			}
			if (CanFunction and (JB_Object_FastIsa(O, &SCFunctionData))) {
				JB_SetRef(F, O);
				JB_SetRef(O, SC_Func_ArgsMatch(F, Contains, Arg_Space, ParamsArray, 0));
				if ((!((SCFunction*)O))) {
					0;
				}
				 else if ((bool)((SCFunction*)O)->IsMacro) {
					if (((SCFunction*)O)->IsMacro) {
						JB_SetRef(Missing, O);
					}
					JB_SetRef(O, nil);
				}
				 else {
					if (((SCFunction*)O)->IsDisabled) {
						if (true) {
							JB_Msg_SyntaxExpect(Exp, ((SCFunction*)O)->Description);
						}
						if (true) {
							JB_Msg_SyntaxExpect(((SCFunction*)O)->Source, JB_LUB[824]);
						}
					}
					if (ParamsHere) {
						JB_SetRef(ParamsHere->Obj, O);
						if ((!ParamsArray->AllowSelfToConstructor) and SC_Func_SyntaxIs(((SCFunction*)O), kSC__FunctionType_Constructor)) {
							SC_Msg_ConstructorAddNil(ParamsHere, ParamsArray->IsDot and (!(JB_Object_Isa(Self, &SCModuleData))));
						}
					}
					JB_Decr(B);
					JB_Decr(Owning_cls);
					JB_Decr(F);
					JB_Decr(Missing);
					JB_Decr(Curr);
					JB_Decr(ParamsArray);
					JB_SafeDecr(O);
					return ((SCFunction*)O);
				}
			}
			if (O) {
				ParamsArray->Found = true;
				if ((!SC_PA_SyntaxCast(ParamsArray))) {
					if ((Purpose == kSC__Base_kPurposeDot) and ((!ParamsArray->IsAddress) and (JB_Object_FastIsa(O, &SCDeclData)))) {
						JB_Decr(B);
						JB_Decr(Owning_cls);
						JB_Decr(F);
						JB_Decr(Missing);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(O);
						return ((SCDecl*)O);
					}
					if ((!JB_Object_Isa(O, &SCFunctionData))) {
						JB_Decr(B);
						JB_Decr(Owning_cls);
						JB_Decr(F);
						JB_Decr(Missing);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(O);
						return O;
					}
					if ((!JB_Msg_OperatorIn(Exp, JB_SyxDot))) {
						JB_String* Err = JB_Incr(JB_LUB[891]);
						if (((bool)Side) and (!SC_PA_MacroSize(ParamsArray))) {
							JB_SetRef(Err, JB_LUB[1093]);
						}
						if ((!((SCFunction*)O)->ProtoDecl)) {
							JB_Msg_SyntaxExpect(Exp, Err);
						}
						JB_Decr(Err);
						SCDecl* _tmPf7 = JB_Incr(((SCFunction*)O)->ProtoDecl);
						JB_Decr(O);
						JB_Decr(B);
						JB_Decr(Owning_cls);
						JB_Decr(F);
						JB_Decr(Missing);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(_tmPf7);
						return _tmPf7;
					}
				}
			}
			JB_Decr(O);
			JB_SetRef(B, B->Parent);
		};
		JB_Decr(B);
	}
	;
	JB_Decr(Curr);
	JB_Decr(Owning_cls);
	if (Missing) {
		JB_Decr(F);
		SCDecl* _tmPf8 = JB_Incr(SC_Func_MacroFix(Missing, Contains, Arg_Space, ParamsArray));
		JB_Decr(Missing);
		JB_Decr(ParamsArray);
		JB_SafeDecr(_tmPf8);
		return _tmPf8;
	}
	JB_Decr(Missing);
	if ((!Exp)) {
		JB_Decr(F);
		JB_Decr(ParamsArray);
		return nil;
	}
	if (F) {
		if (F->IsDisabled) {
			if (true) {
				JB_Msg_SyntaxExpect(Exp, F->Description);
			}
		}
		 else if ((!SC_PA_MadeError(ParamsArray))) {
			JB_FreeIfDead(SC_Func_ArgsMatch(F, Contains, Arg_Space, ParamsArray, kJB_kTypeCastDescribeErrors));
		}
		if (ParamsHere) {
			JB_SetRef(ParamsHere->Obj, F);
		}
		JB_Decr(ParamsArray);
		JB_SafeDecr(F);
		return F;
	}
	JB_Decr(F);
	JB_String* ErrMsg = JB_Incr(JB_LUB[0]);
	if (ParamsArray->Found) {
		JB_SetRef(ErrMsg, JB_LUB[1341]);
	}
	 else if ((!ParamsHere)) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[735]);
		JB_FS_AppendString(_fsf0, OrigName);
		JB_FS_AppendString(_fsf0, JB_LUB[1772]);
		JB_SetRef(ErrMsg, JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
	}
	 else if (ParamsArray->IsDot) {
		FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf1, JB_LUB[740]);
		JB_FS_AppendString(_fsf1, OrigName);
		JB_FS_AppendString(_fsf1, JB_LUB[1672]);
		JB_String* _tmPf4 = JB_Incr(SC_PA_RenderKind(ParamsArray));
		JB_FS_AppendString(_fsf1, _tmPf4);
		JB_Decr(_tmPf4);
		JB_FS_AppendString(_fsf1, JB_LUB[211]);
		JB_String* _tmPf5 = JB_Incr(SC_PA_ModuleName(ParamsArray));
		JB_FS_AppendString(_fsf1, _tmPf5);
		JB_Decr(_tmPf5);
		JB_FS_AppendString(_fsf1, JB_LUB[1772]);
		JB_SetRef(ErrMsg, JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		if (JB_Object_FastIsa(Self, &SCModuleData)) {
			SCClass* Cls = JB_Incr(((SCModule*)Self)->Cls);
			if (Cls) {
				SCObject* Found = JB_Incr(SC_Base_UpCheck(Cls, OrigName, true));
				if (Found) {
					JB_SetRef(ErrMsg, JB_Str_OperatorPlus(ErrMsg, JB_LUB[124]));
				}
				JB_Decr(Found);
			}
			JB_Decr(Cls);
		}
	}
	 else {
		FastString* _fsf2 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf2, JB_LUB[731]);
		JB_FS_AppendString(_fsf2, OrigName);
		JB_FS_AppendString(_fsf2, JB_LUB[1772]);
		JB_SetRef(ErrMsg, JB_FS_GetResult(_fsf2));
		JB_Decr(_fsf2);
	}
	JB_Decr(ParamsArray);
	if (true) {
		JB_Msg_SyntaxExpect(Exp, ErrMsg);
	}
	JB_Decr(ErrMsg);
	return nil;
}

SCObject* SC_Base_LookUpVar(SCNode* Self, JB_String* Name, Message* Exp, Message* Side) {
	SCObject* Rz = nil;
	if (JB_Str_Equals(Name, JB_LUB[1974], true)) {
		Name = JB_LUB[1933];
	}
	Rz = SC_Base_LookUpSub(Self, Name, Exp, nil, Self, nil, Side, kSC__Base_kPurposeVar);
	if (JB_Object_FastIsa(Rz, &SCDeclData)) {
		(SC_Decl_SyntaxIsSet(((SCDecl*)Rz), kSC__SCDeclInfo_UsedByCode, true));
	}
	return Rz;
}

SCDecl* SC_Base_LookUpVarDecl(SCNode* Self, JB_String* Name) {
	SCObject* Result = JB_Incr(SC_Base_LookUpSub(Self, Name, nil, nil, Self, nil, nil, kSC__Base_kPurposeVarDecl));
	if (JB_Object_FastIsa(Result, &SCDeclData)) {
		JB_SafeDecr(Result);
		return ((SCDecl*)Result);
	}
	JB_Decr(Result);
	return nil;
}

SCObject* SC_Base_LookUpVarRootDecl(SCNode* Self, JB_String* Name, Message* Exp) {
	return SC_Base_LookUpSub(Self, Name, Exp, nil, Self, nil, nil, kSC__Base_kPurposeVarDecl);
}

bool SC_Base_NeedsExport(SCNode* Self) {
	return ((bool)(Self->MyReacher));
}

SCFunction* SC_Base_OwningFunc(SCNode* Self) {
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		return ((SCFunction*)Self);
	}
	if (JB_Object_FastIsa(Self, &SCArgData)) {
		return ((SCArg*)Self)->ParentFunc;
	}
	return nil;
}

SCNode* SC_Base_ProcessLinkage(SCNode* Self, Message* Node, Dictionary* Table) {
	SCFunction* Fn = SC_Base_OwningFunc(Self);
	{
		Message* Ch = ((Message*)JB_Ring_First(Node));
		while (Ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Ch));
			if ((!JB_Msg_Expect(Ch, JB_SyxTmp, nil))) {
				return nil;
			}
			DTWrap* Linker = ((DTWrap*)JB_Dict_ValueStr(Table, Ch->Name));
			if ((!Linker)) {
				JB_Msg_SyntaxExpect(Ch, nil);
				return nil;
			}
			(((FP_TranFunc)JB_Wrap_First(Linker)))(Fn, Ch, Self);
			Ch = _Nf1;
		};
		;
	}
	;
	return SC__Comp_program;
}

SCNode* SC_Base_ProjectFix(SCNode* Self) {
	if (Self == SC__Comp_program) {
		SCImport* C = SC__Imp_Curr;
		if (C) {
			return C->Mod;
		}
	}
	return Self;
}

JB_String* SC_Base_ReachedName(SCNode* Self) {
	JB_String* Rz = JB_LUB[0];
	SCNode* C = Self->MyReacher;
	Rz = JB_Str_OperatorPlus(JB_LUB[110], Self->Name);
	if (JB_ObjClass(C) == &SCNodeData) {
		Rz = JB_Str_OperatorPlus(Rz, JB_LUB[129]);
	}
	return Rz;
}

bool SC_Base_RehomeExport(SCNode* Self) {
	if (SC_Base_IsSTDLib(Self)) {
		SC_SCObject_Fail(Self, JB_LUB[713]);
	}
	JB_String* Newhome = JB_Incr(SC_Base_UniquifyExport(Self, Self->ExportName));
	if ((!JB_Str_Exists(Newhome))) {
		JB_Decr(Newhome);
		return nil;
	}
	(JB_Dict_ValueSet(SC__Comp_ExportNames, Self->ExportName, nil));
	(JB_Dict_ValueSet(SC__Comp_ExportNames, Newhome, Self));
	JB_SetRef(Self->ExportName, Newhome);
	JB_Decr(Newhome);
	return true;
}

SCDecl* SC_Base_RequireContained(SCNode* Self, Message* Exp) {
	SCClass* Cls = nil;
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		Cls = ((SCFunction*)Self)->Cls;
		if ((!Cls)) {
			SCModule* P = ((SCModule*)JB_Object_FastAs(((SCFunction*)Self)->Parent, &SCModuleData));
			if (P) {
				Cls = P->Cls;
			}
		}
	}
	 else if (JB_Object_FastIsa(Self, &SCClassData)) {
		Cls = ((SCClass*)Self);
	}
	 else if (JB_Object_FastIsa(Self, &SCModuleData)) {
		Cls = ((SCModule*)Self)->Cls;
	}
	 else if (JB_Object_FastIsa(Self, &SCArgData)) {
		SCFunction* F = ((SCArg*)Self)->ParentFunc;
		if (F) {
			Cls = F->Cls;
		}
	}
	if ((!(((bool)Cls) and ((bool)Cls->Contained)))) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[752]);
		return nil;
	}
	return Cls->Contained;
}

Message* SC_Base_Route(SCNode* Self, JB_String* Name) {
	Message* Rz = nil;
	Rz = JB_Syx_Msg(JB_SyxDot, Name);
	Message* Curr = Rz;
	while (Self) {
		SCModule* Next = ((SCModule*)Self->Parent);
		if ((!Next) or ((Next == SC__Comp_program) or Next->IsImport)) {
			JB_Msg_AppendSyx(Curr, JB_SyxThg, Self->Name);
			break;
		}
		Curr = JB_Msg_Msg(Curr, JB_SyxDot, Self->Name);
		Self = Next;
	};
	return Rz;
}

void SC_Base_SetExportName(SCNode* Self, JB_String* S, bool Explicit) {
	JB_Incr(S);
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		if (((SCFunction*)Self)->IsMacro) {
			JB_Decr(S);
			return;
		}
	}
	JB_SetRef(S, SC_Str_UnicodeSafeName(S, nil));
	if ((!((JB_Object_Isa(Self, &SCModuleData)) or (JB_Object_Isa(Self, &SCClassData))))) {
		JB_SetRef(S, SC_Base_TestExportName(Self, S, Explicit));
		if ((!JB_Str_Exists(S))) {
			JB_Decr(S);
			return;
		}
		(JB_Dict_ValueSet(SC__Comp_ExportNames, S, Self));
	}
	((SC_SCObject_SyntaxIsSet(Self, kSC__SCNodeInfo_ExplicitExport, Explicit)));
	JB_SetRef(Self->ExportName, S);
	JB_Decr(S);
}

SCClass* SC_Base_ShouldBeClass(SCNode* Self, Message* Errplace) {
	SCClass* _tmPf0 = JB_Incr(SC_Base_IsNormalObject(Self));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(Errplace, JB_LUB[690]);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* SC_Base_SourceArg(SCNode* Self) {
	Message* P = Self->Source;
	if (P) {
		if (JB_Msg_EqualsSyx(P, JB_SyxArg, false)) {
			return P;
		}
		return JB_Msg_FindSyx(P, JB_SyxArg);
	}
	return nil;
}

SCModule* SC_Base_SpaceModule(SCNode* Self, Message* Errplace) {
	if (JB_Object_FastIsa(Self, &SCModuleData)) {
		return ((SCModule*)Self);
	}
	if (JB_Object_FastIsa(Self, &SCClassData)) {
		return ((SCClass*)Self)->Modul;
	}
	if (true) {
		JB_Msg_SyntaxExpect(Errplace, JB_LUB[1300]);
	}
	return nil;
}

JB_String* SC_Base_SubProjName(SCNode* Self) {
	return SC__Comp_program->ExportName;
}

SCObject* SC_Base_SyntaxAccess(SCNode* Self, JB_String* S) {
	Dictionary* A = Self->Access;
	if (A) {
		return ((SCObject*)JB_Dict_ValueLower(A, S));
	}
	return nil;
}

JB_String* SC_Base_TestExportName(SCNode* Self, JB_String* S, bool Explicit) {
	SCNode* O = JB_Incr(((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, S)));
	if ((!O)) {
		JB_Decr(O);
		return S;
	}
	if ((!Explicit)) {
		if ((!SC_SCObject_SyntaxIs(O, kSC__SCNodeInfo_ExplicitExport))) {
			SC_Base_RehomeExport(O);
		}
		JB_String* It = JB_Incr(SC_Base_UniquifyExport(Self, S));
		if (JB_Str_Exists(It)) {
			JB_Decr(O);
			JB_SafeDecr(It);
			return It;
		}
		JB_Decr(It);
	}
	 else if (!(SC_SCObject_SyntaxIs(O, kSC__SCNodeInfo_ExplicitExport))) {
		if (SC_Base_RehomeExport(O)) {
			JB_Decr(O);
			return S;
		}
	}
	JB_String* Err = JB_Incr(JB_Str_OperatorPlus(JB_LUB[861], S));
	if (true) {
		JB_Msg_SyntaxExpect(O->Source, Err);
	}
	JB_Decr(O);
	if (true) {
		JB_Msg_SyntaxExpect(Self->Source, Err);
	}
	JB_Decr(Err);
	return JB_LUB[0];
}

void SC_Base_Tran_Const(SCNode* Self, SCDecl* D, SCNode* Base) {
	Message* Root = JB_Incr(D->Default);
	MessagePosition Using = JB_Msg_SyntaxUsing(Root);
	{
		Message* Curr = JB_Incr(Root);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(Root)));
		while (((bool)(Curr)) and (Curr != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(Curr)));
			if (JB_Msg_EqualsSyx(Curr, JB_SyxThg, false)) {
				if ((!JB_FreeIfDead(SC_TypeOfExpr(Curr, Base, nil)))) {
					JB_Decr(_N_f2);
					JB_Decr(_afterf1);
					JB_Decr(Curr);
					JB_MsgPos_Destructor((&Using));
					JB_Decr(Root);
					return;
				}
				SCObject* Actual = JB_Incr(SC_Base_SyntaxAccess(Base, Curr->Name));
				if (JB_Object_FastIsa(Actual, &SCDeclData)) {
					Message* BetterVersion = JB_Incr(JB_Msg_Copy(((SCDecl*)Actual)->Default, Curr));
					JB_FreeIfDead(SC_Msg_ReplaceWith(Curr, BetterVersion));
					JB_Decr(BetterVersion);
				}
				 else {
					if ((!((Curr->Obj == JB_TypeString->TypeNormal) or (((JB_Msg_SyntaxEquals(Curr, JB_LUB[2004], true))) or ((JB_Msg_SyntaxEquals(Curr, JB_LUB[1648], true))))))) {
						JB_Msg_SyntaxExpect(Curr, JB_LUB[1303]);
						JB_Decr(Actual);
						JB_Decr(_N_f2);
						JB_Decr(_afterf1);
						JB_Decr(Curr);
						JB_MsgPos_Destructor((&Using));
						JB_Decr(Root);
						return;
					}
				}
				JB_Decr(Actual);
			}
			 else if (JB_Msg_EqualsSyx(Curr, JB_SyxUnit, false)) {
				if ((!JB_FreeIfDead(SC_TypeOfExpr(Curr, Base, nil)))) {
					JB_Decr(_N_f2);
					JB_Decr(_afterf1);
					JB_Decr(Curr);
					JB_MsgPos_Destructor((&Using));
					JB_Decr(Root);
					return;
				}
			}
			 else if (((JB_Msg_EqualsSyx(Curr, JB_SyxStr, false))) or (((JB_Msg_EqualsSyx(Curr, JB_SyxNum, false))) and (!({
				Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_Parent(Curr)));
				bool _tmPf3 = JB_Msg_EqualsSyx(_tmPf4, JB_SyxUnit, false);
				JB_Decr(_tmPf4);
				 _tmPf3;
			})))) {
				if ((!JB_FreeIfDead(SC_TypeOfExpr(Curr, Base, nil)))) {
					JB_Decr(_N_f2);
					JB_Decr(_afterf1);
					JB_Decr(Curr);
					JB_MsgPos_Destructor((&Using));
					JB_Decr(Root);
					return;
				}
			}
			JB_SetRef(Curr, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(Curr);
		JB_Decr(_afterf1);
		;
	}
	;
	JB_Decr(Root);
	JB_MsgPos_Destructor((&Using));
}

void SC_Base_TryAdd(SCNode* Self, Message* ErrPlace, SCObject* IncObj, JB_String* Name) {
	JB_Incr(Self);
	if ((!IncObj)) {
		JB_Decr(Self);
		return;
	}
	if ((!JB_int_OperatorInRange(JB_Str_Length(Name), 64))) {
		JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1045]);
		JB_Decr(Self);
		return;
	}
	if (JB_Object_FastIsa(Self, &SCClassData)) {
		JB_Class* Scls = JB_ObjClass(IncObj);
		if ((Scls == &SCClassData) or (Scls == &SCModuleData)) {
			JB_SetRef(Self, ((SCClass*)((SCClass*)Self)->Modul));
		}
	}
	if ((!(Self->Access))) {
		JB_SetRef(Self->Access, JB_Dict_Constructor(nil));
	}
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(Name));
	SC_Base_TryAddSub(Self, ErrPlace, IncObj, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Decr(Self);
}

void SC_Base_TryAddBase(SCNode* Self, Message* C, SCNode* Neu) {
	SC_Base_TryAdd(Self, C, Neu, Neu->Name);
}

void SC_Base_TryAddSub(SCNode* Self, Message* ErrPlace, SCObject* IncObj, JB_String* Name) {
	SCObject* Old = SC_Base_UpCheck(Self, Name, (!(JB_Object_Isa(IncObj, &SCFunctionData))));
	if ((!Old)) {
		(JB_Dict_ValueSet(Self->Access, Name, IncObj));
		return;
	}
	if (Old == IncObj) {
		return;
	}
	if (JB_Object_FastIsa(Old, &SCFunctionData)) {
		if (JB_Object_FastIsa(IncObj, &SCFunctionData)) {
			if ((((SCFunction*)Old)->Cls == ((SCFunction*)IncObj)->Cls) or SC_Func_IsConstructorOnModule(((SCFunction*)IncObj), ((SCFunction*)Old))) {
				JB_SetRef(SC_Func_Last(((SCFunction*)Old))->NextFunc, IncObj);
				return;
			}
		}
		 else if (JB_Object_FastIsa(IncObj, &SCDeclData)) {
			if (((SCFunction*)Old)->HidesProperties) {
				if ((((SCDecl*)IncObj)->HiderFunc)) {
					JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1037]);
					return;
				}
				((SCDecl*)IncObj)->HiderFunc = ((SCFunction*)Old);
				(JB_Dict_ValueSet(Self->Access, Name, ((SCDecl*)IncObj)));
				return;
			}
		}
	}
	if (JB_Str_Equals(Name, JB_LUB[1933], false)) {
		if (true) {
			JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[720]);
		}
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(ErrPlace, JB_kNameConf);
		}
		if (JB_Object_Isa(Old, &SCObjectData)) {
			if (true) {
				JB_Msg_SyntaxExpect(SC_SCObject_AnySource(((SCObject*)Old)), JB_kNameConf);
			}
		}
		 else {
			if (true) {
				JB_Object_Fail(JB_ObjRender(Old, nil), JB_kNameConf);
			}
		}
	}
}

JB_String* SC_Base_UniquifyExport(SCNode* Self, JB_String* S) {
	if (JB_Object_FastIsa(Self, &SCFunctionData)) {
		JB_String* S2 = JB_Incr(SC_Func_ParamUniquer(((SCFunction*)Self), S));
		if ((!JB_FreeIfDead(((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, S2))))) {
			JB_SafeDecr(S2);
			return S2;
		}
		JB_Decr(S2);
	}
	int U = SC__SC_UniqueNum++;
	JB_String* _tmPf0 = JB_Incr(JB_int_RenderFS(U, nil));
	JB_String* S3 = JB_Incr(JB_Str_OperatorPlus(S, _tmPf0));
	JB_Decr(_tmPf0);
	if ((!JB_FreeIfDead(((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, S3))))) {
		JB_SafeDecr(S3);
		return S3;
	}
	JB_Decr(S3);
	return JB_LUB[0];
}

SCObject* SC_Base_UpCheck(SCNode* Self, JB_String* Name, bool LookUp) {
	if (LookUp and (JB_Object_FastIsa(Self, &SCClassData))) {
		{
			SCClass* C = ((SCClass*)Self);
			while (C) {
				SCObject* It = SC_Base_SyntaxAccess(C, Name);
				if (It) {
					return It;
				}
				C = C->Super;
			};
		};
	}
	if ((!JB_Object_Isa(Self, &SCArgData))) {
		return SC_Base_SyntaxAccess(Self, Name);
	}
	SCNode* Curr = Self;
	while (JB_Object_FastIsa(Curr, &SCArgData)) {
		SCObject* Found = SC_Base_SyntaxAccess(((SCArg*)Curr), Name);
		if (Found) {
			return Found;
		}
		if ((!LookUp)) {
			return nil;
		}
		Curr = ((SCArg*)((SCArg*)Curr)->Parent);
	};
	return nil;
}

SCNode* SC_Base_UpClass(SCNode* Self, Message* F) {
	SCNode* Rz = nil;
	Rz = Self->Parent;
	if ((JB_Msg_EqualsSyx(F, JB_SyxDot, false)) and JB_Object_FastIsa(Rz, &SCModuleData)) {
		if (((SCModule*)Rz)->IsImport) {
			return nil;
		}
	}
	return Rz;
}

void SC_Base_Use(SCNode* Self) {
	Message* S = Self->Source;
	if (S) {
		JB_Mem_Use(JB_ObjLayer(S));
	}
	SC_Imp_Use(Self->Project);
}

int SC_Base__Init_() {
	{
		SC__Base_CurrVisibility = true;
		SC__Base_ConstantsLoadingOverride = false;
	}
	;
	return 0;
}

int SC_Base__InitCode_() {
	return 0;
}

SCNode* SC_Base__LoadCppPart(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if ((!((JB_Object_Isa(Name_space, &SCClassData)) or (JB_Object_Isa(Name_space, &SCModuleData))))) {
		return nil;
	}
	if (Name_space == SC__Comp_program) {
		SCFile* File = SC_Msg_SCFile(Node);
		if (JB_File_SyntaxCast(File)) {
			Message* _tmPf0 = JB_Msg_NeedSyx(Node, JB_SyxThg);
			if ((!_tmPf0)) {
				return nil;
			}
			JB_SetRef(File->ExportName, _tmPf0->Name);
		}
		JB_Tree_Remove(Node);
	}
	return SC__Comp_program;
}


void JB_sci_Clear(SaverClassInfo* Self) {
	if ((!JB_Array_SyntaxCast(Self))) {
		return;
	}
	{
		int _if0 = 0;
		while (true) {
			Saveable* Obj = ((Saveable*)JB_Array_Value(Self, _if0));
			if (Obj == nil) {
				break;
			}
			JB_Sav_SaveUnMark(Obj);
			_if0++;
		};
	}
	;
	JB_Array_Clear(Self);
}

SaverClassInfo* JB_sci_Constructor(SaverClassInfo* Self, JB_Class* Cls, char* Data) {
	if (Self == nil) {
		Self = ((SaverClassInfo*)JB_NewClass(&SaverClassInfoData));
	}
	JB_Array_Constructor0(Self);
	Self->NextInfo = nil;
	Self->Cls = Cls;
	Self->Data = Data;
	return Self;
}

void JB_sci_Destructor(SaverClassInfo* Self) {
	JB_Clear(Self->NextInfo);
	JB_Array_Destructor(Self);
}

bool JB_sci_HasData(SaverClassInfo* Self) {
	return ((bool)Self->Data[0]);
}

void JB_sci_Output(SaverClassInfo* Self, ObjectSaver* Saver) {
	FastString* D = Saver->Dest;
	if ((!(((bool)D) and JB_Array_SyntaxCast(Self)))) {
		return;
	}
	JB_FS_AppendByte(D, '\n');
	JB_FS_AppendString(D, JB_Str_LowerCase(JB_Str__Wrap(Self->Cls->Name)));
	JB_FS_AppendByte(D, ' ');
	if (JB_sci_HasData(Self)) {
		JB_FS_AppendByte(D, '(');
		JB_FS_AppendCString(D, ((_cstring)Self->Data));
		JB_FS_AppendByte(D, ')');
		JB_FS_AppendByte(D, ' ');
	}
	JB_FS_AppendString(D, JB_LUB[263]);
	{
		int _if0 = 0;
		while (true) {
			Saveable* Obj = ((Saveable*)JB_Array_Value(Self, _if0));
			if (Obj == nil) {
				break;
			}
			JB_FS_AppendByte(D, '\t');
			JB_FS_AppendObjectID(D, Obj);
			JB_FS_AppendByte(D, ':');
			JB_FS_AppendByte(D, '(');
			JB_Sav___SaveWrite__(Obj, Saver);
			JB_FS_RemoveByte(D, ',');
			JB_FS_AppendByte(D, ')');
			JB_FS_AppendByte(D, '\n');
			_if0++;
		};
	}
	;
	JB_FS_AppendByte(D, ')');
	JB_FS_AppendByte(D, '\n');
}



bool JB_Proc_Alive(SpdProcess* Self) {
	if (Self != nil) {
		return ((bool)JB_Ternary(Self->WeAreParent, JB_Proc_ChildAlive(Self), ((bool)JB_Proc_ParentAlive(Self))));
	}
	return false;
}

bool JB_Proc_ChildAlive(SpdProcess* Self) {
	if (Self->SubProcess) {
		return JB_Proc_CommsOpen(Self);
	}
	if (JB_PID_IsRunning(Self)) {
		return true;
	}
	return false;
}

bool JB_Proc_CommsOpen(SpdProcess* Self) {
	return ((bool)Self) and (PicoError(Self->Pico) == 0);
}

SpdProcess* JB_Proc_Constructor(SpdProcess* Self, JB_String* Path, FP_SpdMainFn Fn, PicoComms* Pico, Array* Params, ProcessMode Mode) {
	if (Self == nil) {
		Self = ((SpdProcess*)JB_NewClass(&SpdProcessData));
	}
	JB_Sh_Constructor(Self, Path);
	Self->DiedCount = 0;
	Self->AlreadyWarnedDied = false;
	Self->DeathLimit = 12;
	JB_StringC* _tmPf3 = JB_Str_CastZero(Path);
	Self->_DebugName = JB_Incr(_tmPf3);
	Self->WeAreParent = ((!JB_Str_Equals(Path, JB_LUB[0], false)) or (Fn != nil));
	Self->Params = JB_Incr(Params);
	Self->SubProcess = Fn;
	Self->Mode = Mode;
	FastString* _tmPf2 = ((FastString*)JB_Ternary(JB_ProcessMode_SyntaxIs(Self->Mode, kJB__ProcessMode_CaptureStdOut), JB_FS_Constructor(nil), nil));
	Self->Output = JB_Incr(_tmPf2);
	FastString* _tmPf1 = ((FastString*)JB_Ternary(JB_ProcessMode_SyntaxIs(Self->Mode, kJB__ProcessMode_CaptureOrPrintErrors), JB_FS_Constructor(nil), nil));
	Self->ErrorOutput = JB_Incr(_tmPf1);
	FastString* _tmPf0 = JB_FS_Constructor(nil);
	Self->Writer = JB_Incr(_tmPf0);
	Self->Pico = Pico;
	return Self;
}

void JB_Proc_Destructor(SpdProcess* Self) {
	PicoDestroy((&Self->Pico), JB_Str_SyntaxCast(JB_LUB[1600]));
	JB_Clear(Self->Writer);
	JB_Clear(Self->_DebugName);
	JB_Sh_Destructor(Self);
}

void JB_Proc_Disconnect(SpdProcess* Self, JB_StringC* Why) {
	JB_Sh_UpdatePipes(Self);
	JB_PID_UnRegister(Self);
	JB_Sh_ClosePipes(Self);
	if (JB_Proc_Alive(Self) and ((!JB_Str_Exists(Why)) and JB_Proc_CommsOpen(Self))) {
		Why = JB_LUB[1349];
		debugger;
	}
	PicoClose(Self->Pico, JB_Str_SyntaxCast(Why));
}

Message* JB_Proc_Get(SpdProcess* Self, float T) {
	Message* Rz = nil;
	if (Self) {
		JB_Sh_UpdatePipes(Self);
		JB_String* Str = JB_Pico_Get(Self->Pico, T);
		if (JB_Str_Exists(Str)) {
			Rz = JB_Str_Parse(Str, JB_SyxArg, true);
		}
	}
	return Rz;
}

bool JB_Proc_IsOpen(SpdProcess* Self) {
	if ((!JB_Proc_CommsOpen(Self))) {
		return nil;
	}
	if (Self->WeAreParent) {
		return ((bool)Self->SubProcess) or JB_PID_IsRunning(Self);
	}
	return JB_App__ParentID() > 1;
}

bool JB_Proc_ParentAlive(SpdProcess* Self) {
	if (JB_App__ParentID() > 1) {
		return true;
	}
	return false;
}

bool JB_Proc_Send(SpdProcess* Self, Message* Msg) {
	PicoComms* P = Self->Pico;
	if (JB_ErrorInt_SyntaxCast(PicoError(P))) {
		JB_FreeIfDead(JB_Msg_RenderJbin(Msg, JB_LUB[0], Self->Writer));
		JB_Pico_SendFS(P, Self->Writer, false);
		JB_Sh_UpdatePipes(Self);
	}
	return false;
}

int JB_Proc__InitCode_() {
	{
	}
	;
	JB_Proc__InitOwner();
	return 0;
}

void JB_Proc__InitOwner() {
	PicoComms* P = JB_Pico__Parent();
	if (P) {
		JB_SetRef(JB__Proc_Parent, JB_Proc_Constructor(nil, JB_LUB[0], nil, P, nil, kJB__ProcessMode_AutoPrintErrors));
	}
}


JB_Task* JB_Task_Constructor(JB_Task* Self, uint Obj, void* Func) {
	if (Self == nil) {
		Self = ((JB_Task*)JB_NewClass(&JB_TaskData));
	}
	JB_Ring_Constructor0(Self);
	Self->State = 0;
	Self->_Object = Obj;
	Self->_func = Func;
	return Self;
}

void JB_Task_Destructor(JB_Task* Self) {
	//visible;
	JB_Object** Curr = ((JB_Object**)Self);
	uint O = Self->_Object;
	while (O) {
		uint I = JB_uint_LowestBit(O);
		O = (O & (~I));
		I = JB_Int_Log2(((int)I));
		JB_Decr(Curr[I]);
	};
	JB_Ring_Destructor(Self);
}

LessThan3* SC_Task_LessThan3_Constructor(LessThan3* Self, JB_String* A, int B, JB_String* C) {
	if (Self == nil) {
		Self = ((LessThan3*)JB_Task_Constructor(nil, 640, ((void*)(&SC_Task_LessThan3_run))));
	}
	Self->a = JB_Incr(A);
	Self->b = B;
	Self->c = JB_Incr(C);
	//task;
	return Self;
}


JB_Error* JB_Err_Constructor(JB_Error* Self, Message* Node, JB_String* Desc, ErrorSeverity Level, JB_String* Path) {
	if (Self == nil) {
		Self = ((JB_Error*)JB_NewClass(&JB_ErrorData));
	}
	//visible;
	JB_Msg_ConstructorEmpty(Self);
	JB_StringC* _tmPf1 = JB_LUB[0];
	Self->OriginalData = JB_Incr(_tmPf1);
	JB_StringC* _tmPf0 = JB_LUB[0];
	Self->StackTrace = JB_Incr(_tmPf0);
	Self->ErrorFlags = 0;
	Self->Position = -1;
	Self->Node = JB_Incr(Node);
	Self->Severity = Level;
	Self->Progress = JB__Rec_Progress;
	Self->Name = JB_Incr(Desc);
	Self->Path = JB_Incr(Path);
	Self->When = JB_Date__New0();
	Self->Func = JB_SyxSStr;
	JB_Err_UpgradeWithNode(Self);
	return Self;
}

JB_Error* JB_Err_ConstructorNothing(JB_Error* Self) {
	if (Self == nil) {
		Self = ((JB_Error*)JB_NewClass(&JB_ErrorData));
	}
	JB_Msg_ConstructorEmpty(Self);
	JB_StringC* _tmPf2 = JB_LUB[0];
	Self->Path = JB_Incr(_tmPf2);
	JB_StringC* _tmPf1 = JB_LUB[0];
	Self->OriginalData = JB_Incr(_tmPf1);
	JB_StringC* _tmPf0 = JB_LUB[0];
	Self->StackTrace = JB_Incr(_tmPf0);
	Self->Progress = 0.0f;
	Self->Node = nil;
	Self->ErrorFlags = 0;
	Self->Position = -1;
	Self->Severity = kJB__ErrorSeverity_OK;
	Self->When = JB_Date__New0();
	Self->Func = JB_SyxArg;
	return Self;
}

void JB_Err_Destructor(JB_Error* Self) {
	JB_Clear(Self->Path);
	JB_Clear(Self->OriginalData);
	JB_Clear(Self->StackTrace);
	JB_Clear(Self->Node);
	JB_Msg_Destructor(Self);
}

void JB_Err_Fill(JB_Error* Self, JB_String* Path, JB_String* Desc) {
	//visible;
	JB_SetRef(Self->Path, Path);
	((JB_Err_SyntaxIsSet(Self, kJB__ErrorFlags_PreferNoRenderPath, JB_Str_ContainsString(Desc, Path))));
	JB_SetRef(Self->Name, Desc);
}

void JB_Err_GrabLine(JB_Error* Self, FastString* Fs, bool Usecolor) {
	if (Usecolor) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_normal);
	}
	JB_String* D = JB_Incr(Self->OriginalData);
	if ((!(JB_Str_Exists(D) and JB_Err_HasPosition(Self)))) {
		JB_Decr(D);
		return;
	}
	JB_FS_AppendByte(Fs, '\n');
	Ind Start = JB_Str_Find(D, JB__Constants_CSLine, Self->Position, 0) + 1;
	Ind Finish = JB_Str_Find(D, JB__Constants_CSLine, (Self->Position), JB_int__Max());
	if (Finish == -1) {
		Finish = (JB_Str_Length(D) + 1);
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(D, Start, Finish));
	JB_Decr(D);
	JB_String* _tmPf0 = JB_Incr(JB_Str_ReplaceAll(_tmPf1, JB_LUB[32], JB_LUB[99], false, nil));
	JB_Decr(_tmPf1);
	JB_FS_AppendString(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	Ind Spaces = (Self->Position - Start);
	if (Spaces > 200) {
		Spaces = 0;
	}
	JB_FS_AppendByte(Fs, '\n');
	if (Usecolor) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_underline);
	}
	JB_FS_AppendMultiByte(Fs, ' ', Spaces);
	JB_FS_AppendByte(Fs, '^');
}

bool JB_Err_HasPosition(JB_Error* Self) {
	return Self->Position >= 0;
}

void SC_Err_Improve(JB_Error* Self) {
	Message* Node = SC_FindBytePos(Self->Node);
	if ((!Node)) {
		return;
	}
	if ((!JB_Err_HasPosition(Self))) {
		Self->Position = Node->Position;
	}
	if ((!JB_Str_Exists(Self->Path))) {
		SCFile* SC = SC_Msg_SCFile(Node);
		if ((!JB_File_SyntaxCast(SC))) {
			return;
		}
		if (SC != SC_Msg_SCFile(Self->Node)) {
			JB_SetRef(Self->Node, Node);
		}
		if (JB_File_Exists(SC, false)) {
			JB_SetRef(Self->Path, JB_File_Path(SC));
		}
	}
}

bool JB_Err_IsBad(JB_Error* Self) {
	return (Self->Severity >= kJB__ErrorSeverity_Problem);
}

bool JB_Err_IsError(JB_Error* Self) {
	return (Self->Severity >= kJB__ErrorSeverity_Error);
}

bool JB_Err_IsWarning(JB_Error* Self) {
	return (Self->Severity <= kJB__ErrorSeverity_Warning);
}

bool JB_Err_LineIdentifiers(JB_Error* Self, FastString* Fs, JB_String* Path) {
	if ((!JB_Err_HasPosition(Self))) {
		return nil;
	}
	JB_String* D = JB_Incr(Self->OriginalData);
	if ((!JB_Str_Exists(D))) {
		JB_Decr(D);
		return nil;
	}
	if ((!JB_Str_Exists(Path))) {
		JB_FS_AppendString(Fs, JB_LUB[1756]);
	}
	JB_FS_AppendInt32(Fs, JB_Err_LinePos(Self, D));
	JB_FS_AppendByte(Fs, ':');
	Ind Start = JB_Str_Find(D, JB__Constants_CSLine, Self->Position, 0);
	JB_Decr(D);
	JB_FS_AppendInt32(Fs, Self->Position - Start);
	JB_FS_AppendByte(Fs, ':');
	return true;
}

int JB_Err_LinePos(JB_Error* Self, JB_String* Data) {
	if (JB_Err_HasPosition(Self)) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(Data, 0, Self->Position));
		int _tmPf1 = JB_Str_LineCount(_tmPf0);
		JB_Decr(_tmPf0);
		return _tmPf1;
	}
	return 0;
}

JB_String* JB_Err_Render(JB_Error* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendString(Fs, JB_LUB[1632]);
	Fs->Indent++;
	JB_FS_AppendInfo(Fs, JB_LUB[0], Self->Name);
	if (Self->Position >= 0) {
		JB_FS_AppendInfoNum(Fs, JB_LUB[1871], Self->Position);
	}
	JB_FS_AppendInfo(Fs, JB_LUB[1650], Self->Path);
	JB_FS_AppendInfoNum(Fs, JB_LUB[1940], Self->Severity);
	if (Self->Progress) {
		JB_FS_AppendInfoFloat(Fs, JB_LUB[1882], Self->Progress);
	}
	if (JB_Str_Exists(Self->StackTrace)) {
		JB_FS_AppendInfo(Fs, JB_LUB[1956], JB_LUB[0]);
		Fs->Indent++;
		{
			JB_String* _LoopSrcf2 = JB_Incr(Self->StackTrace);
			int _Prevf0 = 0;
			while (JB_Str_Exists(_LoopSrcf2)) {
				Ind _Curr_f1 = JB_Str_Find(_LoopSrcf2, JB__Constants_CSLine, _Prevf0, JB_int__Max());
				JB_String* Fn = JB_Incr(JB_Str_Range(_LoopSrcf2, _Prevf0, _Curr_f1));
				JB_FS_AppendInfo(Fs, JB_LUB[1659], Fn);
				JB_Decr(Fn);
				_Prevf0 = (_Curr_f1 + 1);
				if ((!JB_Ind_SyntaxCast(_Curr_f1))) {
					break;
				}
			};
			JB_Decr(_LoopSrcf2);
		}
		;
		Fs->Indent--;
	}
	JB_FS_AppendByte(Fs, '\n');
	Fs->Indent--;
	JB_String* _tmPf4 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_String* SC_Err_Render_Unix(JB_Error* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	if (SC_Options__Color()) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_bold);
	}
	Message* Node = JB_Incr(Self->Node);
	JB_String* Data = JB_Incr(SC_Err_SCOriginalData(Self));
	if (JB_Str_Exists(Data)) {
		JB_String* P = JB_Incr(SC_Err_SCOriginalPath(Self));
		if ((!JB_Str_Exists(P))) {
			JB_SetRef(P, JB_LUB[276]);
		}
		JB_FS_AppendString(Fs, P);
		JB_Decr(P);
		JB_FS_AppendByte(Fs, ':');
		SC_Err_SCLineIdentifiers(Self, Fs, Data);
	}
	 else if ((bool)Node) {
		JB_FreeIfDead(JB_Msg_Render(Node, Fs));
		SCFunction* Fn = JB_Incr(SC_Msg_MsgOwningFunc(Node));
		if (Fn) {
			JB_FS_AppendString(Fs, JB_LUB[182]);
			JB_FreeIfDead(SC_Func_Render(Fn, Fs));
		}
		JB_Decr(Fn);
	}
	JB_Decr(Node);
	JB_Decr(Data);
	JB_FS_AppendByte(Fs, ' ');
	if (SC_Options__Color()) {
		if (JB_Err_IsWarning(Self)) {
			JB_FS_AppendString(Fs, kJB__ErrorColors_warn);
		}
		 else {
			JB_FS_AppendString(Fs, kJB__ErrorColors_error);
		}
	}
	if (JB_ErrorSeverity_SyntaxIs(Self->Severity, kJB__ErrorSeverity_Problem)) {
		JB_FS_AppendString(Fs, JB_LUB[2044]);
	}
	 else {
		JB_FreeIfDead(JB_ErrorSeverity_Render(Self->Severity, Fs));
	}
	JB_FS_AppendString(Fs, JB_LUB[559]);
	if (SC_Options__Color()) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_bold);
	}
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendByte(Fs, '\n');
	SC_Err_SCGrabLine(Self, Fs, SC_Options__Color());
	JB_FS_AppendByte(Fs, '\n');
	if (SC_Options__Color()) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_normal);
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Err_RenderClang(JB_Error* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	int M = JB_FS_Mark(Fs);
	JB_String* P = JB_Incr(Self->Path);
	if (((!JB_Err_SyntaxIs(Self, kJB__ErrorFlags_PreferNoRenderPath))) and JB_Str_Exists(P)) {
		JB_FS_AppendString(Fs, Self->Path);
		JB_FS_AppendByte(Fs, ':');
	}
	if ((!JB_Err_LineIdentifiers(Self, Fs, P)) and ((bool)Self->Node)) {
		JB_FreeIfDead(JB_Msg_Render(Self->Node, Fs));
	}
	JB_Decr(P);
	if (JB_FS_Grew(Fs, M)) {
		JB_FS_AppendByte(Fs, ' ');
	}
	JB_FreeIfDead(JB_ErrorSeverity_Render(Self->Severity, Fs));
	JB_FS_AppendString(Fs, JB_LUB[559]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_Err_GrabLine(Self, Fs, false);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Err_SCGrabLine(JB_Error* Self, FastString* Fs, bool Usecolor) {
	if (Usecolor) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_normal);
	}
	JB_String* D = JB_Incr(SC_Err_SCOriginalData(Self));
	if ((!JB_Str_Exists(D))) {
		JB_Decr(D);
		return;
	}
	if ((!JB_Err_HasPosition(Self))) {
		JB_Decr(D);
		return;
	}
	Ind Start = JB_Str_Find(D, JB__Constants_CSLine, Self->Position, 0) + 1;
	Ind Finish = JB_Str_Find(D, JB__Constants_CSLine, (Self->Position), JB_int__Max());
	if (Finish == -1) {
		Finish = (JB_Str_Length(D) + 1);
	}
	JB_String* Line = JB_Incr(JB_Str_Range(D, Start, Finish));
	JB_Decr(D);
	JB_SetRef(Line, JB_Str_ReplaceAll(Line, JB_LUB[32], JB_LUB[99], false, nil));
	JB_FS_AppendString(Fs, Line);
	JB_Decr(Line);
	Ind Spaces = (Self->Position - Start);
	JB_FS_AppendByte(Fs, '\n');
	if (Usecolor) {
		JB_FS_AppendString(Fs, kJB__ErrorColors_underline);
	}
	JB_FS_AppendMultiByte(Fs, ' ', JB_int_OperatorMin(Spaces, 100));
	JB_FS_AppendByte(Fs, '^');
}

int SC_Err_SCLineCount(JB_Error* Self) {
	JB_String* F = JB_Incr(SC_Err_SCOriginalData(Self));
	if ((!JB_Str_Exists(F))) {
		JB_Decr(F);
		return 0;
	}
	int _tmPf0 = JB_Err_LinePos(Self, F);
	JB_Decr(F);
	return _tmPf0;
}

void SC_Err_SCLineIdentifiers(JB_Error* Self, FastString* Fs, JB_String* Data) {
	if ((!JB_Err_HasPosition(Self))) {
		SCFunction* Fn = JB_Incr(SC_Msg_MsgOwningFunc(Self->Node));
		if ((!Fn)) {
			JB_Decr(Fn);
			return;
		}
		JB_FS_AppendString(Fs, Fn->ExportName);
		JB_Decr(Fn);
	}
	 else {
		int _tmPf0 = SC_Err_SCLineCount(Self);
		if ((!_tmPf0)) {
			return;
		}
		JB_FS_AppendInt32(Fs, (_tmPf0));
		JB_FS_AppendByte(Fs, ':');
		Ind Start = JB_Str_Find(Data, JB__Constants_CSLine, Self->Position, 0);
		JB_FS_AppendInt32(Fs, Self->Position - Start);
		JB_FS_AppendByte(Fs, ':');
	}
}

JB_String* SC_Err_SCOriginalData(JB_Error* Self) {
	JB_String* P = JB_Incr(SC_Err_SCOriginalPath(Self));
	if (JB_Str_Exists(P)) {
		JB_File* F = JB_Incr(JB_Str_AsFile(P));
		if (JB_File_Exists(F, false) and (!JB_File_IsDir(F))) {
			JB_String* _tmPf0 = JB_Incr(JB_File_ReadAll(F, 134217728, true));
			JB_Decr(F);
			JB_Decr(P);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(F);
	}
	JB_Decr(P);
	return Self->OriginalData;
}

JB_String* SC_Err_SCOriginalPath(JB_Error* Self) {
	JB_String* _tmP0 = JB_Incr(SC_Msg_FileLocation(Self->Node));
	if ((!JB_Str_Exists(_tmP0))) {
		JB_SetRef(_tmP0, Self->Path);
	}
	JB_SafeDecr(_tmP0);
	return _tmP0;
}

JB_String* SC_Err_SCRender(JB_Error* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	if ((!(JB_Str_Exists(Self->Path)))) {
		JB_SetRef(Self->Path, SC_Err_SCOriginalPath(Self));
		if ((!JB_Str_Exists(Self->Path))) {
			JB_SetRef(Self->Path, JB_LUB[276]);
		}
	}
	if (SC__Options_PerryOutput) {
		JB_FreeIfDead(JB_Err_Render(Self, Fs));
	}
	 else {
		JB_FreeIfDead(SC_Err_Render_Unix(Self, Fs));
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_Err_ShiftPosition(JB_Error* Self, int I) {
	Self->Position = (Self->Position + I);
	Message* Node = Self->Node;
	if (Node) {
		Node->Position = (Node->Position + I);
	}
}

bool JB_Err_SyntaxIs(JB_Error* Self, ErrorFlags F) {
	return ((bool)Self) and ((bool)(Self->ErrorFlags & F));
}

void JB_Err_SyntaxIsSet(JB_Error* Self, ErrorFlags F, bool Value) {
	if (Value) {
		Self->ErrorFlags = (Self->ErrorFlags | F);
	}
	 else {
		Self->ErrorFlags = (Self->ErrorFlags & (~F));
	}
}

void JB_Err_UpgradeWithNode(JB_Error* Self) {
	Message* Node = Self->Node;
	if ((!Node)) {
		Node = ((Message*)JB_Array_Last(JB__Err_CurrSource_));
		if ((!Node)) {
			return;
		}
		JB_SetRef(Self->Node, Node);
	}
	Self->Position = Node->Position;
	if ((!JB_Str_Exists(Self->Path))) {
		JB_SetRef(Self->Path, JB_Msg_FilePath(Node));
	}
	JB_SetRef(Self->OriginalData, JB_Msg_OriginalParseData(Node));
}

void JB_Err__CantParseNum(Message* Where, JB_String* Num, int Pos) {
	//visible;
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[746]);
	JB_String* _tmPf1 = JB_Incr(JB_Str_Preview(Num, 100));
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(_fsf0, JB_LUB[252]);
	JB_FS_AppendByte(_fsf0, JB_Str_ByteValue(Num, Pos));
	JB_FS_AppendString(_fsf0, JB_LUB[256]);
	JB_String* Str = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_Error* _tmPf2 = JB_Incr(JB_Err_Constructor(nil, Where, Str, kJB__ErrorSeverity_Error, JB_LUB[0]));
	JB_Decr(Str);
	JB_Rec_AppendErr(JB_StdErr, _tmPf2);
	JB_Decr(_tmPf2);
}

int JB_Err__Init_() {
	{
		JB_SetRef(JB__Err_CurrSource_, JB_Array_Constructor0(nil));
		JB__Err_AutoPrint = 0;
		JB__Err_KeepStackTrace = false;
	}
	;
	return 0;
}

int JB_Err__InitCode_() {
	return 0;
}

void JB_Err__SourceAdd(Message* M) {
	JB_Array_SyntaxAppend(JB__Err_CurrSource_, M);
}

void JB_Err__SourceRemove() {
	JB_FreeIfDead(((Message*)JB_Array_Pop(JB__Err_CurrSource_)));
}




SCArg* SC_Arg_Constructor(SCArg* Self, Message* Node) {
	if (Self == nil) {
		Self = ((SCArg*)JB_NewClass(&SCArgData));
	}
	SC_Base_ConstructorMsg(Self, Node);
	Self->ParentFunc = nil;
	Self->TmpMovedOutFor = nil;
	Self->IsClassArg = false;
	Self->IsStatementExpr = false;
	return Self;
}

void SC_Arg_Destructor(SCArg* Self) {
	JB_Clear(Self->ParentFunc);
	JB_Clear(Self->TmpMovedOutFor);
	SC_Base_Destructor(Self);
}

JB_String* SC_Arg_Render(SCArg* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendString(Fs, JB_LUB[1184]);
	JB_FS_SyntaxAppend(Fs, Self->Source);
	JB_FS_AppendString(Fs, JB_LUB[279]);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}


void SC_Beh_Add(SCBehaviour* Self, SCNode* Fn) {
	if ((!Fn)) {
		return;
	}
	SCNode* Old = ((SCNode*)SC_Base_SyntaxAccess(Self, Fn->Name));
	if (Old) {
		if (true) {
			JB_Msg_SyntaxExpect(Fn->Source, JB_kNameConf);
		}
		if (true) {
			JB_Msg_SyntaxExpect(Old->Source, JB_kNameConf);
		}
	}
	 else {
		SC_Base_TryAdd(Self, Fn->Source, Fn, Fn->Name);
	}
}

SCClass* SC_Beh_Cls(SCBehaviour* Self) {
	return ((SCClass*)Self->Parent);
}

SCBehaviour* SC_Beh_Constructor(SCBehaviour* Self, SCClass* Parent) {
	if (Self == nil) {
		Self = ((SCBehaviour*)JB_NewClass(&SCBehaviourData));
	}
	SC_Base_Constructor0(Self);
	Self->FuncTable = nil;
	Array* _tmPf1 = JB_Array_Constructor0(nil);
	Self->WrapperFuncs = JB_Incr(_tmPf1);
	Self->Project = Parent->Project;
	Self->Parent = Parent;
	Dictionary* _tmPf0 = JB_Dict_Constructor(nil);
	Self->Interfaces = JB_Incr(_tmPf0);
	return Self;
}

void SC_Beh_CreateFuncTable(SCBehaviour* Self, Message* ErrPlace) {
	if (Self->FuncTable) {
		JB_Object_SyntaxExpect(nil);
		return;
	}
	SCClass* _tmPf1 = JB_Incr(SC_Beh_Cls(Self));
	JB_String* Name = JB_Incr(SC_Class_BehaviourName(_tmPf1));
	JB_Decr(_tmPf1);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(ErrPlace);
	Message* Msg = JB_Incr(JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1972]));
	JB_Msg_AppendSyx(Msg, JB_SyxThg, Name);
	JB_Decr(Name);
	JB_Msg_AppendSyx(Msg, JB_SyxArg, JB_LUB[0]);
	SC_Imp_Use(Self->Project);
	SCModule* F = JB_Incr(((SCModule*)SC_Class__NewStruct(Msg, SC__Comp_program, ErrPlace)));
	JB_Decr(Msg);
	if (F) {
		F->Cls->IsBehaviour = kSC__Beh_kBehaviourTable;
		SCClass* _tmPf2 = JB_Incr(SC_Beh_Cls(Self));
		F->Cls->IsRole = _tmPf2->IsRole;
		JB_Decr(_tmPf2);
		SC_Base_TryAddBase(SC__Comp_program, ErrPlace, F);
		JB_SetRef(Self->FuncTable, F);
		SC_Imp__NoProj();
	}
	JB_Decr(F);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Beh_Destructor(SCBehaviour* Self) {
	JB_Clear(Self->FuncTable);
	JB_Clear(Self->Interfaces);
	JB_Clear(Self->WrapperFuncs);
	SC_Base_Destructor(Self);
}

SCBehaviour* SC_Beh_Upwards(SCBehaviour* Self) {
	SCClass* Curr = SC_Beh_Cls(Self);
	while (Curr) {
		Curr = Curr->Super;
		if ((!Curr)) {
			return nil;
		}
		SCBehaviour* B = Curr->Behaviour;
		if (B) {
			return B;
		}
	};
	return nil;
}

SCFunction* SC_Beh__MakeVirtualCaller(SCModule* Mod, SCClass* Cls, Message* ErrPlace) {
	SCFunction* Rz = nil;
	JB_String* InterName = JB_Incr(Mod->Name);
	JB_String* Type = JB_Incr(SC_Class_BehaviourName(Cls));
	JB_String* FuncName = JB_Incr(SC_Str_InterfaceToBehaviour(InterName));
	FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf1, JB_LUB[78]);
	JB_FS_AppendString(_fsf1, InterName);
	JB_FS_AppendString(_fsf1, JB_LUB[123]);
	JB_FS_AppendString(_fsf1, InterName);
	JB_Decr(InterName);
	JB_FS_AppendString(_fsf1, JB_LUB[280]);
	JB_FS_AppendString(_fsf1, Type);
	JB_Decr(Type);
	JB_FS_AppendString(_fsf1, JB_LUB[2069]);
	JB_FS_AppendString(_fsf1, FuncName);
	JB_Decr(FuncName);
	JB_FS_AppendString(_fsf1, JB_LUB[286]);
	JB_String* FNStr = JB_Incr(JB_FS_GetResult(_fsf1));
	JB_Decr(_fsf1);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(ErrPlace);
	Message* FNSrc = JB_Incr(SC_Str_ParseClean(FNStr));
	JB_Decr(FNStr);
	if (FNSrc) {
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(FNSrc)));
		JB_SetRef(Rz, ((SCFunction*)SC_Func__NewFunc(_tmPf2, Cls, ErrPlace)));
		JB_Decr(_tmPf2);
		if (Rz) {
			(SC_Func_SyntaxIsSet(Rz, kSC__FunctionType_Behaviour, true));
			(SC_Func_SyntaxIsSet(Rz, kSC__FunctionType_ExpectsRealVars, true));
			JB_Array_SyntaxAppend(Cls->Behaviour->WrapperFuncs, Rz);
		}
	}
	JB_Decr(FNSrc);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(Rz);
	return Rz;
}

SCNode* SC_Beh__NewActual(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCClass* Cls = JB_Incr(SC_Base_ShouldBeClass(Name_space, ErrPlace));
	if (((bool)Cls) and SC_Beh__Tran_Behaviour(Node, Cls)) {
		SCFunction* Fn = JB_Incr(((SCFunction*)SC_Func__NewFunc(Node, Cls, Node)));
		if (Fn) {
			SC_Class_AddBehaviourOrInterface(Cls, Fn, ErrPlace);
			(SC_Func_SyntaxIsSet(Fn, kSC__FunctionType_Behaviour, true));
			(SC_Func_SyntaxIsSet(Fn, kSC__FunctionType_ExpectsRealVars, true));
			JB_Decr(Cls);
			JB_SafeDecr(Fn);
			return Fn;
		}
		JB_Decr(Fn);
	}
	JB_Decr(Cls);
	return nil;
}

SCNode* SC_Beh__NewVirtual(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if ((!ErrPlace)) {
		return nil;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(ErrPlace);
	SCClass* Cls = JB_Incr(SC_Base_ShouldBeClass(Name_space, ErrPlace));
	if (Cls) {
		Message* Arg = JB_Incr(JB_Msg_FindSyx(Node, JB_SyxArg));
		if (Arg) {
			Message* Beh = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1512])));
			Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(Node)));
			Message* _tmPf1 = JB_Incr(JB_Msg_Copy(_tmPf2, nil));
			JB_Decr(_tmPf2);
			JB_Tree_SyntaxAppend(Beh, _tmPf1);
			JB_Decr(_tmPf1);
			JB_Tree_SyntaxAppend(Beh, Arg);
			(JB_Ring_NextSibSet(Node, Beh));
			SC_Base_CollectOne(Name_space, Beh, true);
			JB_Decr(Beh);
		}
		JB_Decr(Arg);
		SCModule* Mod = JB_Incr(SC_Beh__NewVirtualSub(Node, Cls, ErrPlace));
		if (Mod) {
			SCFunction* _tmPf3 = JB_Incr(SC_Beh__MakeVirtualCaller(Mod, Cls, ErrPlace));
			JB_Decr(Mod);
			JB_Decr(Cls);
			JB_SafeDecr(_tmPf3);
			JB_MsgPos_Destructor((&_usingf0));
			return _tmPf3;
		}
		JB_Decr(Mod);
	}
	JB_Decr(Cls);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return nil;
}

SCModule* SC_Beh__NewVirtualSub(Message* Node, SCClass* Cls, Message* ErrPlace) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Node)));
	Message* Thg = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	bool Required = (SC_Msg_OperatorIsARel(Thg, JB_LUB[298]));
	if (Required) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(Thg)));
		JB_SetRef(Thg, SC_Msg_ReplaceWith(Thg, _tmPf1));
		JB_Decr(_tmPf1);
	}
	if ((!JB_Msg_EqualsSyx(Thg, JB_SyxThg, false))) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[929]);
		JB_Decr(Thg);
		return nil;
	}
	JB_String* S = JB_Incr(Thg->Name);
	if (SC_Str_UnderScoreAtAnyEnd(S)) {
		JB_Msg_SyntaxExpect(Thg, JB_LUB[930]);
		JB_Decr(S);
		JB_Decr(Thg);
		return nil;
	}
	if ((!(!JB_Str_Equals(S, JB_LUB[1600], true)))) {
		JB_Msg_SyntaxExpect(Thg, JB_LUB[660]);
		JB_Decr(S);
		JB_Decr(Thg);
		return nil;
	}
	JB_SetRef(Thg->Name, JB_Str_Moat(S));
	JB_Decr(Thg);
	SCModule* Mod = JB_Incr(SC_Func__NewProtoTypeSub(Node, Cls, ErrPlace, S));
	JB_Decr(S);
	if ((!Mod)) {
		JB_Decr(Mod);
		return nil;
	}
	Mod->IsRequiredInterface = Required;
	SC_Class_AddBehaviourOrInterface(Cls, Mod, ErrPlace);
	Mod->Cls->IsBehaviour = kSC__Beh_kBehaviourProto;
	if (Required) {
		Mod->Cls->IsBehaviour = kSC__Beh_kBehaviourProtoRequired;
	}
	JB_SafeDecr(Mod);
	return Mod;
}

bool SC_Beh__Tran_Behaviour(Message* Node, SCClass* Cls) {
	if ((!Node)) {
		return nil;
	}
	if (Cls->IsRole) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1903]);
		return nil;
	}
	Message* Name = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxThg));
	if ((!Name)) {
		JB_Decr(Name);
		return nil;
	}
	Message* Lst = JB_Incr(((Message*)JB_Ring_NextSib(Name)));
	if (Lst) {
		if ((!((!JB_Msg_EqualsSyx(Lst, JB_SyxBra, false)) and ((!JB_Msg_EqualsSyx(Lst, JB_SyxPrm, false)) and (!JB_Msg_EqualsSyx(Lst, JB_SyxList, false)))))) {
			JB_Msg_SyntaxExpect(Lst, JB_LUB[665]);
			JB_Decr(Lst);
			JB_Decr(Name);
			return nil;
		}
	}
	JB_Decr(Lst);
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
		Message* It = JB_Incr(((Message*)JB_Ring_NextSib(Name)));
		if (It) {
			JB_Msg_Expect(It, JB_SyxArg, nil);
		}
		 else {
			Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
			JB_Tree_SyntaxAppend(Node, (_tmPf2));
			JB_Decr(_tmPf2);
		}
		JB_Decr(It);
		Message* _tmPf3 = ({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			JB_String* _tmPf5 = JB_Incr(JB_Str_Moat(Name->Name));
			Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, _tmPf5));
			JB_Decr(_tmPf5);
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf4));
			JB_Decr(_tmPf4);
			JB_SafeDecr(nil);
			 __imPf1;
		});
		(JB_Ring_NextSibSet(Name, _tmPf3));
		JB_Decr(_tmPf3);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Name);
	return true;
}


void SC_Class_AddBehaviourOrInterface(SCClass* Self, SCNode* M, Message* ErrPlace) {
	SCBehaviour* B = JB_Incr(Self->Behaviour);
	if ((!B)) {
		JB_SetRef(B, SC_Beh_Constructor(nil, Self));
		JB_SetRef(Self->Behaviour, B);
	}
	if (JB_Object_FastIsa(M, &SCModuleData)) {
		(JB_Dict_ValueLowerSet(B->Interfaces, ((SCModule*)M)->Name, ((SCModule*)M)));
	}
	 else {
		SC_Beh_Add(B, M);
	}
	JB_Decr(B);
}

void SC_Class_AfterAfterFuncs(SCClass* Self) {
	SCClass* S = JB_Incr(Self->Super);
	if (S) {
		if ((!(Self->HasCompareFunc))) {
			Self->HasCompareFunc = S->HasCompareFunc;
		}
		if ((!(Self->HasEqualsFunc))) {
			Self->HasEqualsFunc = S->HasEqualsFunc;
		}
	}
	JB_Decr(S);
	Message* Def = JB_Incr(Self->Defawlt);
	if (Def) {
		SCDecl* D = JB_Incr(SC_TypeOfExpr(Def, Self->Modul, nil));
		if (((bool)D) and Self->DefaultsToReal) {
			if ((!SC_Decl_StatedReal(D))) {
				JB_Msg_SyntaxExpect(Def, JB_LUB[1103]);
			}
		}
		JB_Decr(D);
	}
	JB_Decr(Def);
	SC_Class_DeclModel(Self);
}

void SC_Class_AfterFuncsDecled(SCClass* Self) {
	SC_Class_OverrideSyntax(Self);
	SCFunction* C = JB_Incr(Self->ConstructorFunc);
	if (C) {
		SC_Class_CheckAllocVsWrapper(Self, C, true);
	}
	JB_Decr(C);
	SCFunction* D = JB_Incr(Self->DestructorFunc);
	if (D) {
		if ((D->NextFunc)) {
			JB_Msg_SyntaxExpect(D->Source, JB_LUB[744]);
		}
		if (JB_Array_Size(D->Args) != 1) {
			JB_Msg_SyntaxExpect(D->Source, JB_LUB[820]);
		}
		if ((D->ReturnType)) {
			JB_Msg_SyntaxExpect(D->Source, JB_LUB[819]);
		}
		SC_Class_CheckAllocVsWrapper(Self, D, false);
	}
	JB_Decr(D);
	SCDecl* Cls = JB_Incr(Self->ClassType);
	if (Cls) {
		JB_String* _tmPf2 = JB_Incr(SC_Class_CStructName(Self));
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(_tmPf2, JB_LUB[807]));
		JB_Decr(_tmPf2);
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[241], _tmPf1));
		JB_Decr(_tmPf1);
		(SC_Decl_NameSet(Cls, _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_Decr(Cls);
}

JB_String* SC_Class_APIStructName(SCClass* Self) {
	if (SC_Class_IsObject(Self) or ((bool)Self->Super)) {
		Message* _tmPf1 = JB_Incr(SC_Base_SourceArg(Self));
		JB_String* _tmPf0 = JB_Incr(SC_Msg_APICppProject(_tmPf1));
		JB_Decr(_tmPf1);
		JB_String* _tmPf2 = JB_Incr(JB_Str_LowerCase(Self->Name));
		JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf2));
		JB_Decr(_tmPf0);
		JB_Decr(_tmPf2);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	return SC_Class_CStructName(Self);
}

void SC_Class_BannedCheck(SCClass* Self, Message* Src) {
	if ((!SC_Class_TestBanned(Self))) {
		return;
	}
	if (true) {
		SC_SCObject_Fail(Self, JB_Str_OperatorPlus(JB_LUB[661], Self->Name));
	}
	SCNode* Curr = Self->MyReacher;
	{
		int _Valuef1 = 0;
		while (_Valuef1 < 16) {
			if ((!Curr) or (JB_ObjClass(Curr) == &SCNodeData)) {
				break;
			}
			if (Src) {
				if (true) {
					JB_Msg_SyntaxExpect(Src, SC_Base_ReachedName(Curr));
				}
				Src = nil;
			}
			 else {
				if (true) {
					SC_SCObject_Fail(Curr, SC_Base_ReachedName(Curr));
				}
			}
			Curr = Curr->MyReacher;
			_Valuef1++;
		};
	};
}

JB_String* SC_Class_BehaviourName(SCClass* Self) {
	return JB_Str_OperatorPlus(Self->Name, JB_LUB[1430]);
}

SCFunction* SC_Class_BestBehaviourFor(SCClass* Self, JB_String* Name) {
	SCBehaviour* B = Self->Behaviour;
	while (B) {
		SCObject* Fn = SC_Base_SyntaxAccess(B, Name);
		if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
			return ((SCFunction*)Fn);
		}
		B = SC_Beh_Upwards(B);
	};
	return nil;
}

int SC_Class_CalculateSize(SCClass* Self, int Depth) {
	SC_Class_CalculateSizeRaw(Self, Depth);
	return Self->Size;
}

int SC_Class_CalculateSizeRaw(SCClass* Self, int Depth) {
	u16 Si = Self->Size;
	if (Si) {
		return Si;
	}
	if (SC_Class_IsFunc(Self)) {
		Self->Size = JB_Platform__PointerBytes();
		return Self->Size;
	}
	if (SC_Class_IsDataTypeOnly(Self)) {
		Self->Size = JB_TC_ByteSize(Self->TypeInfo);
		return Self->Size;
	}
	if (Depth >= 16) {
		Message* _tmPf3 = JB_Incr(SC_Base_SourceArg(Self));
		JB_Msg_SyntaxExpect(_tmPf3, JB_LUB[762]);
		JB_Decr(_tmPf3);
		return 0;
	}
	int Count = 0;
	if (Self == JB_TypeObject) {
		Count = 4;
	}
	SCClass* S = JB_Incr(Self->Super);
	if (S) {
		Count = SC_Class_CalculateSizeRaw(S, 0);
		if ((!Count)) {
			debugger;
			JB_Decr(S);
			return 0;
		}
	}
	JB_Decr(S);
	int Bits = 0;
	{
		Array* _LoopSrcf2 = JB_Incr(Self->Properties);
		int _if0 = 0;
		while (true) {
			SCDecl* P = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (P == nil) {
				JB_Decr(P);
				break;
			}
			int Curr = JB_Platform__PointerBytes();
			if ((!(SC_Class_IsObject(P->Type) or ((bool)P->PointerCount)))) {
				Curr = SC_Class_CalculateSize(P->Type, Depth + 1);
				if ((!Curr)) {
					JB_Decr(P);
					JB_Decr(_LoopSrcf2);
					return 0;
				}
			}
			if ((SC_Decl_SyntaxIs(P, kSC__SCDeclInfo_Task)) and SC_Decl_IsObject(P)) {
				Bits = JB_int_SyntaxAccessSet(Bits, (Count + (JB_Platform__PointerBytes() - 1)) >> 3, true);
			}
			Count = JB_int_OperatorAlign(Count, Curr);
			int Mul = P->C_Array;
			JB_Decr(P);
			if ((!Mul)) {
				Mul = 1;
			}
			Count = (Count + (Curr * Mul));
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	Self->Size = JB_int_OperatorAlign(Count, 4);
	if (SC_Class_IsTask(Self)) {
		Self->TaskObjectCount = (Self->Super->TaskObjectCount | Bits);
		if (Self->Size > 128) {
			JB_Msg_SyntaxExpect(Self->Source, JB_LUB[1265]);
		}
	}
	return Count;
}

bool SC_Class_CanCompare(SCClass* Self, SCDecl* Against, bool AsEquals) {
	bool CanUseEquals = AsEquals and Self->HasEqualsFunc;
	if ((!Self->HasCompareFunc) and (!CanUseEquals)) {
		return false;
	}
	if (CanUseEquals and SC_Class_CanCompareSub(Self, JB_LUB[1978], Against)) {
		return true;
	}
	if (Self->HasCompareFunc) {
		return SC_Class_CanCompareSub(Self, JB_LUB[1977], Against);
	}
	return false;
}

bool SC_Class_CanCompareSub(SCClass* Self, JB_String* S, SCDecl* Against) {
	{
		SCClass* B = Self;
		while (B) {
			SCObject* O = ((SCObject*)JB_Dict_ValueStr(B->Access, S));
			if (JB_Object_FastIsa(O, &SCFunctionData)) {
				if (SC_Func_CanCompare(((SCFunction*)O), Against)) {
					return true;
				}
			}
			B = B->Super;
		};
	}
	;
	return false;
}

bool SC_Class_CanHaveEmptyConstructor(SCClass* Self) {
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (P == nil) {
				break;
			}
			if (SC_Decl_TypeSuffers(P) and ((bool)SC_Decl_StatedReal(P))) {
				if ((!P->Type->DefaultsToReal)) {
					return nil;
				}
			}
			_if0++;
		};
	}
	;
	return true;
}

void SC_Class_CheckAllocVsWrapper(SCClass* Self, SCFunction* F, bool IsConstructor) {
	if ((!(((bool)Self->IsWrapper) and (SC_Class_IsObject(Self) and ((bool)Self->Super))))) {
		return;
	}
	if ((!F) != IsConstructor) {
		return;
	}
	if ((!IsConstructor)) {
		if ((!JB_FreeIfDead(SC_Class_FirstDestructor(Self)))) {
			return;
		}
	}
	if ((!F->IsWrapper)) {
		if (true) {
			JB_Msg_SyntaxExpect(Self->Source, JB_LUB[1384]);
		}
	}
}

void SC_Class_CheckIterator(SCClass* Self) {
	{
		Dictionary* _LoopSrcf2 = Self->Access;
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf2);
		while (true) {
			SCObject* I = ((SCObject*)JB_DictionaryReader_NextValue(_navf0));
			if (I == nil) {
				break;
			}
			if (JB_Object_FastIsa(I, &SCIteratorData)) {
				SC_Iter_Check(((SCIterator*)I), Self);
			}
		};
	};
}

void SC_Class_ClassCollect(SCClass* Self) {
	Message* _tmPf0 = JB_Incr(SC_Base_SourceArg(Self));
	SC_Base_CollectFromNode(Self, _tmPf0, SC_SCObject_IsVisible(Self), nil);
	JB_Decr(_tmPf0);
}

bool SC_Class_CollectProp(SCClass* Self, Message* Msg) {
	SCDecl* Dcl = SC_Msg_CollectDecl(Msg, Self->Modul, Self, kSC__DeclMode_Properties, Self, nil);
	if (Dcl) {
		JB_Array_SyntaxAppend(Self->Properties, Dcl);
		(SC_Decl_SyntaxIsSet(Dcl, kSC__SCDeclInfo_Property, true));
		SC_Decl_BecomeReal(Dcl);
		return true;
	}
	return false;
}

void SC_Class_CollectProperties(SCClass* Self) {
	if (SC_Class_IsBehaviourTable(Self)) {
		return;
	}
	SC__Mod_Curr = Self->Modul;
	{
		Message* _LoopSrcf2 = SC_Base_SourceArg(Self);
		Message* Item = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Item));
			if (JB_Msg_EqualsSyx(Item, JB_SyxDecl, false)) {
				SC_Class_CollectProp(Self, Item);
			}
			Item = _Nf1;
		};
		;
	}
	;
	if (SC_Class_IsTask(Self)) {
		SC_Class_TaskProperties(Self);
	}
	 else {
		SCDecl* It = ((SCDecl*)JB_Array_First(Self->Properties));
		if (It) {
			if ((Self->IsRole)) {
				JB_Msg_SyntaxExpect(It->Source, JB_LUB[1181]);
				return;
			}
		}
	}
	if (Self->IsModel) {
		SC_Class_ModelDecls(Self);
	}
}

SCFunction* SC_Class_ConOrDesForCall(SCClass* Self, bool IsConstructor, int Task) {
	if ((!IsConstructor)) {
		return SC_Class_FirstDestructor(Self);
	}
	if (Task <= 1) {
		return SC_Func_ParamlessConstructor(Self->ConstructorFunc);
	}
	return Self->ConstructorFunc;
}

SCClass* SC_Class_Constructor(SCClass* Self, Message* Node, SCNode* Parent, bool HasPtrs, SCModule* M) {
	if (Self == nil) {
		Self = ((SCClass*)JB_NewClass(&SCClassData));
	}
	SC_Base_Constructor0(Self);
	Self->Super = nil;
	Self->Defawlt = nil;
	Self->False = nil;
	Array* _tmPf7 = JB_Array_Constructor0(nil);
	Self->Properties = JB_Incr(_tmPf7);
	Array* _tmPf6 = JB_Array_Constructor0(nil);
	Self->Casts = JB_Incr(_tmPf6);
	Array* _tmPf5 = JB_Array_Constructor0(nil);
	Self->Children = JB_Incr(_tmPf5);
	Self->Contained = nil;
	Self->Signed = nil;
	Self->_NotConst = nil;
	Self->FuncProto = nil;
	Self->TheIsFunc = nil;
	Self->ConstructorFunc = nil;
	Self->DestructorFunc = nil;
	JB_StringC* _tmPf4 = JB_LUB[0];
	Self->CppClass = JB_Incr(_tmPf4);
	Self->ClassType = nil;
	Self->IsModel = nil;
	Self->Behaviour = nil;
	Self->ProcessAs = nil;
	Self->DowngradeTo = nil;
	Self->DataObject = nil;
	Self->TaskObjectCount = 0;
	Self->Size = 0;
	Self->Depth = 0;
	Self->StructContainerDepth = 0;
	Self->MinOpt = 0;
	Self->IsBehaviour = 0;
	Self->IsWrapper = 0;
	Self->ContainsParentClass = false;
	Self->IgnoreContainedSelf = false;
	Self->HasCompareFunc = false;
	Self->HasEqualsFunc = false;
	Self->HasSubClass = false;
	Self->NoEarlyFree = false;
	Self->AutoGeneratedSavers = false;
	Self->SavingCanSkip = false;
	Self->TreatAsBaseType = false;
	Self->HasNilChecker = false;
	Self->DefaultsToReal = false;
	Self->IsRole = 0;
	Self->IsBuiltin = false;
	Self->BaseType = 0;
	Self->IsASM = false;
	Self->NumericReduction = 0;
	SC__Comp_stClasses++;
	JB_SetRef(Node->Obj, Self);
	JB_String* _tmPf3 = SC_Class__LoadClassName(Node);
	Self->Name = JB_Incr(_tmPf3);
	Self->Source = JB_Incr(Node);
	Self->Modul = JB_Incr(M);
	(SC_SCObject_IsVisibleSet(Self, SC__Base_CurrVisibility));
	JB_StringC* _tmPf2 = JB_LUB[0];
	Self->SaveAs = JB_Incr(_tmPf2);
	Self->TypeInfo = kJB__TC_UnusedType;
	Self->Banned = SC_Class_TestBanned(Self);
	SCDecl* T = JB_Incr(SC_Decl_Constructor(nil, Self));
	T->NilDeclared = (kSC__NilState_Real >> HasPtrs);
	Self->TypeNormal = JB_Incr(T);
	SCDecl* _tmPf1 = SC_Decl_NilConstructor(T, kSC__NilState_Optional * HasPtrs);
	Self->TypeOptional = JB_Incr(_tmPf1);
	SCDecl* _tmPf0 = SC_Decl_NilConstructor(T, kSC__NilState_Real * HasPtrs);
	Self->TypeReal = JB_Incr(_tmPf0);
	if (JB_Msg_SyntaxEquals(Node, JB_LUB[1972], false)) {
		JB_SetRef(T, SC_Decl_GetAddress(T, kSC__DeclMode_FuncParam));
	}
	 else {
		JB_SetRef(T, SC_Decl_CopyDecl(T, false));
	}
	Self->SelfDecl = JB_Incr(T);
	(SC_Decl_NameSet(T, JB_LUB[1933]));
	(SC_Decl_SyntaxIsSet(T, kSC__SCDeclInfo_SelfImplicit, true));
	(SC_Decl_SyntaxIsSet(T, kSC__SCDeclInfo_Altered, (!true)));
	JB_Decr(T);
	return Self;
}

void SC_Class_ContainedTypeLoad(SCClass* Self) {
	SC_Base_Use(Self);
	SCClass* Sup = JB_Incr(Self->Super);
	if (Sup) {
		JB_SetRef(Self->Contained, Sup->Contained);
		JB_SetRef(Self->SelfDecl->Contains, Sup->SelfDecl->Contains);
		if (Self->NumericReduction == Sup->NumericReduction) {
			SC_Class_NeedsDefaultValue(Self, Sup->Defawlt, (&Self->Defawlt), JB_LUB[1596]);
			SC_Class_NeedsDefaultValue(Self, Sup->False, (&Self->False), JB_LUB[1648]);
		}
		Self->IgnoreContainedSelf = ((bool)(Self->IgnoreContainedSelf | Sup->IgnoreContainedSelf));
		Self->ContainsParentClass = Sup->ContainsParentClass;
	}
	JB_Decr(Sup);
	if ((!(Self->Defawlt))) {
		JB_SetRef(Self->Defawlt, (JB_Syx_Msg(JB_SyxThg, JB_LUB[1810])));
	}
	if (Self->False) {
	}
	 else if (SC_Class_NumericCount(Self) == 1) {
		JB_SetRef(Self->False, (JB_Syx_Msg(JB_SyxNum, JB_LUB[440])));
	}
	 else {
		JB_SetRef(Self->False, (JB_Syx_Msg(JB_SyxThg, JB_LUB[1810])));
	}
	SCClass* Cls = JB_Incr(SC_Class_FindContainedClass(Self));
	if ((!Cls)) {
		JB_Decr(Cls);
		return;
	}
	SCDecl* TN = JB_Incr(Cls->TypeOptional);
	SCDecl* Cont = JB_Incr(SC_Decl_CopyDecl(TN, false));
	(SC_Decl_SyntaxIsSet(Cont, kSC__SCDeclInfo_UpgradeableContained, true));
	JB_SetRef(Self->Contained, Cont);
	JB_Decr(Cont);
	Self->IgnoreContainedSelf = ((bool)(Self->IgnoreContainedSelf | SC_Class_IsDataTypeOrFP(Cls)));
	JB_Decr(Cls);
	JB_SetRef(Self->SelfDecl->Contains, TN);
	JB_Decr(TN);
}

SCFunction* SC_Class_CreateAutoConstructor(SCClass* Self) {
	SCFunction* Rz = nil;
	Rz = SC_Class_CreateEmptyFunc(Self, JB_LUB[784], JB_LUB[785]);
	if ((!Rz)) {
		return nil;
	}
	Message* Node = Rz->Source;
	Message* Prms = ((Message*)JB_Tree_Second(Node));
	Message* Arg = ((Message*)JB_Ring_NextSib(Prms));
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* Prop = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (Prop == nil) {
				break;
			}
			if ((!SC_Decl_IsCArray(Prop))) {
				JB_String* Name = Prop->Name;
				if (JB_Str_Equals(Name, JB_LUB[1974], true)) {
					Name = JB_LUB[1952];
				}
				if (JB_Str_Equals(Name, JB_LUB[1455], false)) {
					JB_Msg_SyntaxExpect(Prop->Source, JB_LUB[935]);
				}
				JB_Tree_SyntaxAppend(Prms, SC_Decl_WriteDeclTypeAndName(Prop, Name, 0));
				Message* Rel = JB_Msg_Msg(Arg, JB_SyxRel, JB_LUB[0]);
				JB_Msg_AppendSyx(Rel, JB_SyxSDot, Name);
				JB_Msg_AppendSyx(Rel, JB_SyxOpp, JB_LUB[586]);
				JB_Msg_AppendSyx(Rel, JB_SyxThg, Name);
			}
			_if0++;
		};
	}
	;
	return Rz;
}

void SC_Class_CreateBehaviour(SCClass* Self) {
	if ((!(SC_Class_IsObject(Self) and (!Self->IsRole)))) {
		return;
	}
	if ((!(Self->Behaviour))) {
		JB_SetRef(Self->Behaviour, SC_Beh_Constructor(nil, Self));
	}
	Message* _tmPf0 = JB_Incr(SC_Base_SourceArg(Self));
	SC_Beh_CreateFuncTable(Self->Behaviour, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_Class_CreateConstructors(SCClass* Self) {
	if (SC_Class_IsObject(Self)) {
		SCFunction* Con = JB_Incr(SC_Class_FindAllocFunc(Self, JB_LUB[784], true));
		if (Self->IsRole) {
			SCClass* S = JB_Incr(Self->Super);
			if ((!((!Con) or ((bool)S->ConstructorFunc)))) {
				JB_Msg_SyntaxExpect(Con->Source, JB_LUB[1180]);
			}
			if ((!(Con))) {
				JB_SetRef(Con, S->ConstructorFunc);
			}
			JB_SetRef(Self->DestructorFunc, S->DestructorFunc);
			JB_Decr(S);
			if ((!Con)) {
				JB_Decr(Con);
				return;
			}
		}
		//using;
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self->Source);
		if ((!Con) and (!Self->IsWrapper)) {
			JB_SetRef(Con, SC_Class_CreateEmptyConstructors(Self));
		}
		JB_SetRef(Self->ConstructorFunc, Con);
		if (Con) {
			SC_Base_TryAdd(Self->Modul, Con->Source, Con, JB_LUB[1807]);
			SC_Class_FillRoleConstructor(Self, Con);
		}
		JB_Decr(Con);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	if ((!Self->IsRole)) {
		bool NeedsDestructor = SC_Class_IsObject(Self) or (SC_Class_IsStruct(Self) and SC_Class_HasObjectProperties(Self));
		JB_SetRef(Self->DestructorFunc, SC_Class_FindAllocFunc(Self, JB_LUB[818], (!NeedsDestructor)));
	}
	 else if (Self->IsRole == 3) {
		if (Self->Super->IsRole != 2) {
			SC_SCObject_Fail(Self, JB_LUB[1266]);
		}
	}
}

SCFunction* SC_Class_CreateEmptyConstructors(SCClass* Self) {
	SCFunction* Rz = nil;
	if (SC_Class_CanHaveEmptyConstructor(Self)) {
		JB_SetRef(Rz, SC_Class_CreateEmptyFunc(Self, JB_LUB[784], JB_LUB[0]));
		if ((!Rz)) {
			JB_Decr(Rz);
			return nil;
		}
		(SC_Func_SyntaxIsSet(Rz, kSC__FunctionType_EmptyConstructor, true));
	}
	int Pc = SC_Class_PassableCount(Self);
	SCClass* S = JB_Incr(Self->Super);
	if (((bool)S) and (((bool)Rz) and (S != JB_TypeObject))) {
		Message* L = JB_Incr(SC_Func_Prms(S->ConstructorFunc));
		if (JB_Ring_HasChildren(L)) {
			SC_Func_CopyParams(Rz, L);
			Pc = 0;
		}
		JB_Decr(L);
	}
	JB_Decr(S);
	if ((Pc >= 1) and (Pc <= 8)) {
		SCFunction* F2 = JB_Incr(SC_Class_CreateAutoConstructor(Self));
		if ((!(Rz))) {
			JB_SetRef(Rz, F2);
		}
		JB_Decr(F2);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

SCFunction* SC_Class_CreateEmptyFunc(SCClass* Self, JB_String* Fname, JB_String* Cpp_name) {
	JB_Incr(Cpp_name);
	SCFunction* Rz = nil;
	SC__Base_CurrVisibility = SC_SCObject_IsVisible(Self);
	if ((!(JB_Str_Exists(Cpp_name)))) {
		JB_SetRef(Cpp_name, Fname);
	}
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[1674]);
	JB_FS_AppendString(_fsf0, Fname);
	JB_FS_AppendString(_fsf0, JB_LUB[207]);
	JB_FS_AppendString(_fsf0, Cpp_name);
	JB_Decr(Cpp_name);
	JB_FS_AppendString(_fsf0, JB_LUB[208]);
	JB_String* E = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	Message* Msg = JB_Incr(SC_Str_ParseClean(E));
	JB_Decr(E);
	JB_SetRef(Rz, ((SCFunction*)SC_Func__NewFunc(Msg, Self, Self->Source)));
	if (Rz) {
		SC_Base_TryAdd(Self, Msg, Rz, Fname);
		(SC_SCObject_IsVisibleSet(Rz, false));
	}
	JB_Decr(Msg);
	JB_SafeDecr(Rz);
	return Rz;
}

JB_String* SC_Class_CStructName(SCClass* Self) {
	if ((!Self)) {
		return JB_LUB[0];
	}
	if (Self->IsRole == 1) {
		return SC_Class_CStructNameSub(SC_Class_RealClass(Self));
	}
	return SC_Class_CStructNameSub(Self);
}

JB_String* SC_Class_CStructNameSub(SCClass* Self) {
	return ({
		JB_String* _X = Self->CppClass;
		if ((!JB_Str_Exists(_X))) {
			_X = SC_Str_UnicodeSafeName(Self->Name, nil);
			JB_SetRef(Self->CppClass, _X);
		}
		 _X;
	});
}

JB_String* SC_Class_CSuperStructName(SCClass* Self) {
	SCClass* Sup = JB_Incr(SC_Class_RealSuper(Self));
	if ((!Sup)) {
		JB_Decr(Sup);
		return JB_LUB[440];
	}
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[948]);
	JB_String* _tmPf1 = JB_Incr(SC_Class_CStructName(Sup));
	JB_Decr(Sup);
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendByte(_fsf0, ')');
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void SC_Class_DataTypePostLoad(SCClass* Self) {
	if ((!SC_Class_IsDataTypeOnly(Self))) {
		return;
	}
	Message* Node = JB_Incr(Self->Source);
	SCClass* Sup = JB_Incr(Self->Super);
	if (Sup) {
		Self->Size = Sup->Size;
		if ((!Self->NumericReduction)) {
			Self->TypeInfo = Sup->TypeInfo;
			if ((!(Self->Defawlt))) {
				JB_SetRef(Self->Defawlt, Sup->Defawlt);
			}
		}
	}
	JB_String* N = JB_Incr(JB_Str_LowerCase(Self->Name));
	Dictionary* _tmPf0 = JB_Incr(JB_TC__Types());
	DTWrap* Td = JB_Incr(((DTWrap*)JB_Dict_ValueStr(_tmPf0, N)));
	JB_Decr(N);
	JB_Decr(_tmPf0);
	if (Td) {
		DataTypeCode T = ((DataTypeCode)JB_Wrap_First(Td));
		if (T != 255) {
			Self->Size = JB_TC_ByteSize(T);
			if ((T == kJB__TC_Vec3) or (T == kJB__TC_iVec3)) {
				Self->Size = 16;
			}
			Self->TypeInfo = T;
			Self->IsBuiltin = true;
			if ((!(JB_TC_IsInt(T) and (!Self->Signed)))) {
				JB_Decr(Td);
				JB_Decr(Sup);
				JB_Decr(Node);
				return;
			}
			SCClass* S2 = JB_Incr(SC_TC_CreateSignedStuff(T));
			if (S2) {
				JB_SetRef(Self->Signed, S2->TypeNormal);
				JB_SetRef(S2->Signed, Self->TypeNormal);
			}
			JB_Decr(S2);
		}
	}
	JB_Decr(Td);
	if ((!(((bool)Sup) or SC_Class_HasGameType(Self)))) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[812]);
		JB_Decr(Sup);
		JB_Decr(Node);
		return;
	}
	JB_Decr(Node);
	JB_Decr(Sup);
}

void SC_Class_DeclModel(SCClass* Self) {
	Message* M = Self->IsModel;
	if ((!M)) {
		return;
	}
	if ((!JB_Array_SyntaxCast(Self->Properties))) {
		JB_Msg_SyntaxExpect(Self->Source, JB_LUB[1050]);
		return;
	}
	SCObject* Dcl = SC_Base_SyntaxAccess(Self->Modul, JB_LUB[1429]);
	if (JB_Object_FastIsa(Dcl, &SCDeclData)) {
		SC_Decl_MakeGameFlying(((SCDecl*)Dcl), Self, M);
	}
	 else {
		debugger;
	}
}

void SC_Class_DescribeInPack(SCClass* Self, FastString* J) {
	int Sz = JB_Ternary(((bool)Self->IsWrapper), 0, ((int)Self->Size));
	JB_bin_AddInt(J, Sz);
	Array* Fn_list = Self->Behaviour->WrapperFuncs;
	JB_bin_Enter(J, JB_SyxList, JB_LUB[0]);
	JB_String* Name = JB_LUB[440];
	SCFunction* Df = Self->DestructorFunc;
	if (Df) {
		Name = Df->ExportName;
	}
	JB_bin_Add(J, JB_SyxThg, Name, false);
	SCBehaviour* B = Self->Behaviour;
	while (B) {
		{
			Dictionary* _LoopSrcf2 = B->Interfaces;
			DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf2);
			while (true) {
				SCModule* M = ((SCModule*)JB_DictionaryReader_NextValue(_navf0));
				if (M == nil) {
					break;
				}
				SCFunction* Fn = SC_Class_BestBehaviourFor(Self, SC_Str_InterfaceToBehaviour(M->Name));
				if (Fn) {
					SCClass* BaseClass = SC_Class_InterfaceForBehaviour(Self, Fn);
					if (BaseClass) {
						JB_bin_Add(J, JB_SyxThg, Fn->ExportName, false);
					}
				}
			};
		}
		;
		B = SC_Beh_Upwards(B);
	};
	JB_bin_Exit(J, 1);
}

void SC_Class_Destructor(SCClass* Self) {
	JB_Clear(Self->Super);
	JB_Clear(Self->Defawlt);
	JB_Clear(Self->False);
	JB_Clear(Self->Modul);
	JB_Clear(Self->Properties);
	JB_Clear(Self->TypeNormal);
	JB_Clear(Self->TypeOptional);
	JB_Clear(Self->TypeReal);
	JB_Clear(Self->Casts);
	JB_Clear(Self->Children);
	JB_Clear(Self->Contained);
	JB_Clear(Self->Signed);
	JB_Clear(Self->_NotConst);
	JB_Clear(Self->FuncProto);
	JB_Clear(Self->TheIsFunc);
	JB_Clear(Self->ConstructorFunc);
	JB_Clear(Self->DestructorFunc);
	JB_Clear(Self->CppClass);
	JB_Clear(Self->ClassType);
	JB_Clear(Self->SelfDecl);
	JB_Clear(Self->IsModel);
	JB_Clear(Self->Behaviour);
	JB_Clear(Self->SaveAs);
	JB_Clear(Self->ProcessAs);
	JB_Clear(Self->DowngradeTo);
	JB_Clear(Self->DataObject);
	SC_Base_Destructor(Self);
}

SCFunction* SC_Class_DoSaver(SCClass* Self, JB_String* Name, int Stage) {
	if (SC_Class_IsA(Self, JB_TypeString)) {
		return nil;
	}
	SCObject* Fn = JB_Incr(SC_Base_SyntaxAccess(Self, Name));
	if ((!Stage) and (!Fn)) {
		SC_Class_StartupSaver(Self, Name);
	}
	 else if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
		if (Stage == 1) {
			SC_Func_FillInSaver(((SCFunction*)Fn), Name);
		}
		if (Stage == 2) {
			SC_Func_ValidateSaver(((SCFunction*)Fn), Name);
		}
		JB_SafeDecr(Fn);
		return ((SCFunction*)Fn);
	}
	 else if (Stage == 2) {
		if (true) {
			FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
			JB_FS_AppendString(_fsf0, JB_LUB[1081]);
			JB_FS_AppendString(_fsf0, Name);
			JB_FS_AppendString(_fsf0, JB_LUB[203]);
			JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
			JB_Decr(_fsf0);
			JB_Msg_SyntaxExpect(Self->Source, _tmPf1);
			JB_Decr(_tmPf1);
		}
	}
	JB_Decr(Fn);
	return nil;
}

Message* SC_Class_Falsify(SCClass* Self, Message* Ques) {
	Message* F = Self->False;
	if ((!F)) {
		debugger;
		return nil;
	}
	if (JB_Ring_HasChildren(F)) {
		return JB_Msg_Copy(F, nil);
	}
	Ques->Func = F->Func;
	if (SC_Msg_OperatorIsThing(F, JB_LUB[1810])) {
		JB_SetRef(Ques->Obj, JB_TypeNil);
	}
	 else {
		JB_SetRef(Ques->Name, F->Name);
	}
	return nil;
}

void SC_Class_FillInterFaceIn(SCClass* Self, SCFunction* Fn, bool Late) {
	SCClass* Interface = JB_Incr(SC_Class_InterfaceForBehaviour(Self, Fn));
	if ((!Interface)) {
		JB_Decr(Interface);
		return;
	}
	Message* Prm = JB_Incr(JB_Msg_FindSyx(Fn->Source, JB_SyxPrm));
	if ((!Prm)) {
		JB_Msg_SyntaxExpect(Fn->Source, JB_LUB[1078]);
		JB_Decr(Prm);
		JB_Decr(Interface);
		return;
	}
	Message* F = JB_Incr(((Message*)JB_Ring_First(Prm)));
	JB_Decr(Prm);
	if (F) {
		SC_Func_DeclsPrototypeInterface(Fn, F, Interface, Late);
	}
	JB_Decr(Interface);
	JB_Decr(F);
}

void SC_Class_FillInterFaceWrapper(SCClass* Self, SCFunction* Fn) {
	SCClass* Interface = JB_Incr(SC_Class_InterfaceForBehaviour(Self, Fn));
	if ((!Interface)) {
		JB_Decr(Interface);
		return;
	}
	Message* Prm = JB_Incr(JB_Msg_FindSyx(Fn->Source, JB_SyxPrm));
	if ((!Prm)) {
		JB_Msg_SyntaxExpect(Fn->Source, JB_LUB[1078]);
		JB_Decr(Prm);
		JB_Decr(Interface);
		return;
	}
	Message* F = JB_Incr(((Message*)JB_Ring_First(Prm)));
	JB_Decr(Prm);
	if ((!F)) {
		JB_Decr(F);
		JB_Decr(Interface);
		return;
	}
	SC_Func_DeclsProtoCleanup(Fn, Interface, F, true, false, nil);
	JB_Decr(Interface);
	JB_Decr(F);
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	Message* Prms = JB_Incr(JB_Msg_FindNested(Fn->Source, JB_SyxSThg, JB_LUB[357], false));
	if ((!Prms)) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(Prms);
		return;
	}
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Parent(Prms)));
	Message* WriteTo = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	WriteTo->Func = JB_SyxPrm;
	JB_Tree_Remove(Prms);
	JB_Decr(Prms);
	MessagePosition Using = JB_Msg_SyntaxUsing(Fn->Source);
	Message* CopyFrom = JB_Incr(((Message*)JB_Tree_Second(Fn->Source)));
	JB_Msg_AppendSyx(WriteTo, JB_SyxThg, JB_LUB[1933]);
	{
		Message* C = JB_Incr(((Message*)JB_Ring_First(CopyFrom)));
		while (C) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(C)));
			if (JB_Msg_EqualsSyx(C, JB_SyxDecl, false)) {
				Message* It = JB_Incr(SC_Msg_DeclName(C));
				if (It) {
					JB_Msg_AppendSyx(WriteTo, JB_SyxThg, It->Name);
				}
				JB_Decr(It);
			}
			JB_SetRef(C, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(C);
		;
	}
	;
	JB_Decr(WriteTo);
	JB_Decr(CopyFrom);
	JB_MsgPos_Destructor((&Using));
}

void SC_Class_FillRoleConstructor(SCClass* Self, SCFunction* Con) {
	{
		SCFunction* F = Con;
		while (F) {
			(SC_Func_SyntaxIsSet(F, kSC__FunctionType_Constructor, true));
			if (SC_Class_IsTask(Self)) {
				SC_Class_FillTaskConstructor(Self, F);
			}
			F = F->NextFunc;
		};
	};
}

void SC_Class_FillTaskConstructor(SCClass* Self, SCFunction* Con) {
	Message* Src = Con->Source;
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Src);
	SC_Class_FillTaskConstructorSub(Self, Src, SC_Msg_TaskConBefore(((Message*)JB_Ring_Last(Src))), 0);
	SCModule* P = ((SCModule*)JB_Object_FastAs(Self->Modul->Parent, &SCModuleData));
	if (P) {
		SCClass* C = P->Cls;
		if (C) {
			SC_Base_TryAdd(C, Src, Con, Self->Name);
		}
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Class_FillTaskConstructorSub(SCClass* Self, Message* Con, Message* Before, int Depth) {
	if (Depth > 16) {
		JB_Msg_SyntaxExpect(Con, JB_LUB[1168]);
		return;
	}
	SCClass* Pr = Self->Super;
	if (SC_Class_IsTask(Pr)) {
		SC_Class_FillTaskConstructorSub(Pr, Con, Before, Depth + 1);
	}
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (P == nil) {
				break;
			}
			SC_Msg_MakeTaskVar(P->Source, Con, Before, Depth == 0);
			_if0++;
		};
	};
}

SCFunction* SC_Class_FindAllocFunc(SCClass* Self, JB_String* Fname, bool DontCreate) {
	SCFunction* It = SC_Class_FindSpecialFunc(Self, Fname, false);
	if (It) {
		return It;
	}
	if ((!DontCreate) and (!Self->IsWrapper)) {
		return SC_Class_CreateEmptyFunc(Self, Fname, JB_LUB[0]);
	}
	return nil;
}

SCClass* SC_Class_FindContainedClass(SCClass* Self) {
	Message* C = JB_Msg_NeedSyx(JB_Msg_FindSyxName(SC_Base_SourceArg(Self), JB_SyxTmp, JB_LUB[1564], false), JB_SyxNil);
	if ((!C)) {
		if (Self->ContainsParentClass) {
			SCNode* P = Self->Modul->Parent;
			if (JB_Object_FastIsa(P, &SCModuleData)) {
				return ((SCModule*)P)->Cls;
			}
		}
		return nil;
	}
	SCModule* M = Self->Modul;
	if (JB_Msg_EqualsSyx(C, JB_SyxQues, false)) {
		if ((!JB_Msg_SyntaxEquals(C, JB_LUB[1864], false))) {
			JB_Msg_SyntaxExpect(C, nil);
			return nil;
		}
		SCModule* P = ((SCModule*)M->Parent);
		if ((!(((bool)P) and ((bool)P->Cls)))) {
			JB_Msg_SyntaxExpect(C, JB_LUB[1080]);
			return nil;
		}
		Self->ContainsParentClass = true;
		return P->Cls;
	}
	SCClass* Cls = SC_Base_FindClassMsg(M, C, kSC__SCNodeFindMode_WantAType);
	if (Cls) {
		Self->ContainsParentClass = false;
		return Cls;
	}
	return nil;
}

SCFunction* SC_Class_FindFunc(SCClass* Self, JB_String* Keyword, bool CheckParents, bool DoError) {
	{
		SCClass* B = Self;
		while (B) {
			SCObject* O = ((SCObject*)JB_Dict_ValueStr(B->Access, Keyword));
			if (O) {
				if (JB_Object_FastIsa(O, &SCFunctionData)) {
					return ((SCFunction*)O);
				}
				if ((!((!SC_Class_IsObject(Self)) or (!DoError)))) {
					JB_Msg_SyntaxExpect(B->Source, JB_Str_OperatorPlus(Keyword, JB_LUB[186]));
					return nil;
				}
			}
			if ((!CheckParents)) {
				break;
			}
			B = B->Super;
		};
	}
	;
	return nil;
}

SCFunction* SC_Class_FindSpecialFunc(SCClass* Self, JB_String* Keyword, bool CheckParents) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(Keyword));
	SCFunction* _tmPf1 = JB_Incr(SC_Class_FindFunc(Self, _tmPf0, CheckParents, true));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCFunction* SC_Class_FirstDestructor(SCClass* Self) {
	{
		SCClass* P = Self;
		while (P) {
			SCFunction* Fn = P->DestructorFunc;
			if ((!Fn)) {
				int A = 1;
			}
			 else if (((bool)P->IsWrapper) and ((bool)P->Super)) {
				return Fn;
			}
			 else if (SC_Class_HasStuffToHandleInDestructor(P) or JB_Ring_HasChildren(SC_Func_SourceArg(Fn))) {
				return Fn;
			}
			P = P->Super;
		};
	}
	;
	return nil;
}

void SC_Class_GetDepth(SCClass* Self) {
	if ((!Self->Depth)) {
		Self->Depth = 1;
		{
			SCClass* C = Self;
			while (C) {
				Self->Depth++;
				C = C->Super;
			};
		};
	}
	Message* Msg = Self->Defawlt;
	if (((bool)Msg) and (SC_Class_IsObject(Self) and (!(SC_Msg_OperatorIsThing(Msg, JB_LUB[1810]))))) {
		Self->DefaultsToReal = true;
		Self->TypeNormal->NilDeclared = kSC__NilState_Real;
	}
}

SCClass* SC_Class_GetFlyingMemClassFor(SCClass* Self) {
	return SC_Comp__FindClassName(JB_LUB[896]);
}

SCDecl* SC_Class_GetFlyingMemory(SCClass* Self, Message* Exp) {
	SCObject* Decl = JB_Incr(SC_Base_SyntaxAccess(Self->Modul, JB_LUB[1429]));
	if (JB_Object_FastIsa(Decl, &SCDeclData)) {
		if ((!JB_Msg_EqualsSyx(Exp, JB_SyxThg, false))) {
			JB_Object_SyntaxExpect(nil);
			JB_Decr(Decl);
			return nil;
		}
		Message* Thg = JB_Incr((JB_Syx_Msg(JB_SyxThg, Exp->Name)));
		JB_SetRef(Thg->Obj, Decl);
		JB_Tree_SyntaxAppend(Exp, Thg);
		JB_Decr(Thg);
		JB_Msg_BecomeStr(Exp, JB_SyxBRel, JB_LUB[241]);
		if ((!((SCDecl*)Decl)->PointerCount)) {
			JB_SetRef(Decl, SC_Decl_GetAddress(((SCDecl*)Decl), kSC__DeclMode_Always));
		}
		JB_SafeDecr(Decl);
		return ((SCDecl*)Decl);
	}
	JB_Decr(Decl);
	return nil;
}

SCIterator* SC_Class_GetIteratorAny(SCClass* Self, JB_String* Name, Message* Node) {
	if ((!(JB_Str_Exists(Name)))) {
		Name = JB_LUB[817];
	}
	{
		SCClass* C = Self;
		while (C) {
			SCObject* R = SC_Base_SyntaxAccess(C, Name);
			if (JB_Object_FastIsa(R, &SCIteratorData)) {
				return ((SCIterator*)R);
			}
			C = C->Super;
		};
	}
	;
	SC_Class_Iterfailed(Self, Name, Node);
	return nil;
}

void SC_Class_GetStructDepth(SCClass* Self) {
	if (Self->StructContainerDepth == -1) {
		SC_SCObject_Fail(Self, JB_LUB[1302]);
		return;
	}
	Self->StructContainerDepth = -1;
	int R = 0;
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (P == nil) {
				break;
			}
			SCClass* T = P->Type;
			if ((SC_Class_IsStruct(T)) and (P->PointerCount == 0)) {
				SC_Class_GetStructDepth(T);
				R = JB_int_OperatorMax(R, T->StructContainerDepth + 1);
			}
			_if0++;
		};
	}
	;
	Self->StructContainerDepth = R;
}

SCClass* SC_Class_GoUpTo(SCClass* Self, int D) {
	SCClass* S = Self;
	while (((bool)S) and (S->Depth > D)) {
		S = S->Super;
	};
	return S;
}

bool SC_Class_HasGameType(SCClass* Self) {
	return (Self->TypeInfo != kJB__TC_UnusedType);
}

bool SC_Class_HasObjectProperties(SCClass* Self) {
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (P == nil) {
				break;
			}
			if (SC_Decl_IsNormalObject(P)) {
				return true;
			}
			_if0++;
		};
	}
	;
	return false;
}

bool SC_Class_HasOperator(SCClass* Self, JB_String* Op) {
	SCObject* Obj = SC_Base_SyntaxAccess(Self, Op);
	if (JB_Object_FastIsa(Obj, &SCFunctionData)) {
		return true;
	}
	return false;
}

bool SC_Class_HasStuffToHandleInDestructor(SCClass* Self) {
	{
		SCClass* P = Self;
		while (P) {
			{
				Array* _LoopSrcf3 = P->Properties;
				int _if1 = 0;
				while (true) {
					SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1));
					if (D == nil) {
						break;
					}
					if (SC_Decl_HasStructDestructor(D)) {
						return true;
					}
					if (SC_Decl_IsReffable(D, true)) {
						return true;
					}
					_if1++;
				};
			}
			;
			P = P->Super;
		};
	}
	;
	return false;
}

SCClass* SC_Class_InterfaceFor(SCClass* Self, JB_String* Name, Message* Errplace) {
	SCModule* Result = nil;
	{
		SCClass* C = Self;
		while (C) {
			SCBehaviour* B = C->Behaviour;
			if (B) {
				SCModule* I = ((SCModule*)JB_Dict_ValueStr(B->Interfaces, Name));
				if (I) {
					Result = SC_Mod_OneOrOther(Result, I);
				}
			}
			C = C->Super;
		};
	}
	;
	if ((!Result)) {
		JB_Msg_SyntaxExpect(Errplace, JB_LUB[1072]);
		return nil;
	}
	return Result->Cls;
}

SCClass* SC_Class_InterfaceForBehaviour(SCClass* Self, SCFunction* Fn) {
	JB_String* Name = JB_Incr(JB_Str_LowerCase(Fn->Name));
	if (SC_Str_UnderScoreAtAnyEnd(Name)) {
		JB_SetRef(Name, SC_Str_InterfaceToBehaviour(Name));
	}
	if (JB_Str_Last(Name, 0) == '0') {
		JB_SetRef(Name, JB_Str_Range(Name, 0, JB_Str_Length(Name) - 1));
	}
	if ((!SC_Str_UnderScoreAtAnyEnd(Name))) {
		JB_SetRef(Name, JB_Str_Moat(Name));
	}
	SCClass* _tmPf0 = JB_Incr(SC_Class_InterfaceFor(Self, Name, Fn->Source));
	JB_Decr(Name);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

bool SC_Class_IsA(SCClass* Self, SCClass* S) {
	{
		SCClass* P = Self;
		while (P) {
			if (P == S) {
				return true;
			}
			P = P->Super;
		};
	}
	;
	return false;
}

bool SC_Class_IsBehaviourTable(SCClass* Self) {
	if ((!Self)) {
		return nil;
	}
	return Self->IsBehaviour == kSC__Beh_kBehaviourTable;
}

bool SC_Class_IsDataTypeOnly(SCClass* Self) {
	return SC_SCNodeType_SyntaxIs(Self->BaseType, kSC__SCNodeType_DataType);
}

bool SC_Class_IsDataTypeOrFP(SCClass* Self) {
	return SC_SCNodeType_SyntaxIs(Self->BaseType, kSC__SCNodeType_DataType) or SC_SCNodeType_SyntaxIs(Self->BaseType, kSC__SCNodeType_FuncProto);
}

bool SC_Class_IsFunc(SCClass* Self) {
	return ((bool)Self->FuncProto);
}

bool SC_Class_IsInterface(SCClass* Self) {
	if (Self) {
		return ((bool)(Self->IsBehaviour & kSC__Beh_kBehaviourProto));
	}
	return false;
}

bool SC_Class_IsMArray(SCClass* Self, Message* Arr) {
	if ((!Arr) or JB_Tree_HasOneChild(Arr)) {
		return SC_Class_IsDataTypeOrFP(Self) or SC_Class_IsStruct(Self);
	}
	return false;
}

bool SC_Class_IsObject(SCClass* Self) {
	return ((!SC_Class_IsDataTypeOrFP(Self))) and ((!SC_Class_IsStruct(Self)));
}

bool SC_Class_IsSaveableObject(SCClass* Self) {
	if ((!SC_Class_IsObject(Self))) {
		return nil;
	}
	JB_String* S = JB_Incr(Self->SaveAs);
	bool _tmPf0 = JB_Str_Exists(S) and ((!JB_Str_Equals(S, JB_LUB[1810], false)));
	JB_Decr(S);
	return _tmPf0;
}

bool SC_Class_IsSaveableStruct(SCClass* Self) {
	if ((!SC_Class_IsStruct(Self))) {
		return nil;
	}
	return ((JB_Str_Equals(Self->SaveAs, JB_LUB[1972], false)));
}

bool SC_Class_IsStruct(SCClass* Self) {
	return SC_SCNodeType_SyntaxIs(Self->BaseType, kSC__SCNodeType_Struct);
}

bool SC_Class_IsTask(SCClass* Self) {
	return ((bool)Self) and ((bool)(Self->IsRole & 2));
}

void SC_Class_Iterfailed(SCClass* Self, JB_String* Name, Message* Node) {
	if (true) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1073]);
		JB_FS_AppendString(_fsf0, Name);
		JB_FS_AppendString(_fsf0, JB_LUB[175]);
		JB_FS_AppendString(_fsf0, Self->Name);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Msg_SyntaxExpect(Node, _tmPf1);
		JB_Decr(_tmPf1);
	}
}

void SC_Class_LoadClassType(SCClass* Self) {
	if (SC_Class_IsObject(Self)) {
		JB_SetRef(Self->ClassType, SC_Class_MakeClassType(Self, Self->TypeNormal));
	}
}

void SC_Class_LoadConstructors(SCClass* Self) {
	SC_Base_Use(Self);
	SC_Class_CreateConstructors(Self);
	SCClass* S = JB_Incr(Self->Super);
	if (S) {
		if ((!(Self->NoEarlyFree))) {
			Self->NoEarlyFree = S->NoEarlyFree;
		}
	}
	JB_Decr(S);
	JB_ClassData_Restore((&MessageData));
}

void SC_Class_LoadLinkage(SCClass* Self) {
	Message* Arg = SC_Base_LinkagePlace(Self);
	if ((!Arg)) {
		return;
	}
	Self->NoAutoComplete = SC_Msg_DeprecatedClassOption(Arg, JB_LUB[1814], JB_LUB[214]);
	Self->NoEarlyFree = ((bool)SC_Msg_DeprecatedClassOption(Arg, JB_LUB[1873], JB_LUB[1083]));
	Self->TreatAsBaseType = ((bool)SC_Msg_DeprecatedClassOption(Arg, JB_LUB[1873], JB_LUB[1327]));
	Self->MinOpt = SC_Msg_DeprecatedClassOption(Arg, JB_LUB[1852], JB_LUB[1785]);
}

void SC_Class_LoadModuleForCls(SCClass* Self, Message* Node, SCNode* P) {
	SCModule* M = JB_Incr(Self->Modul);
	M->Project = SC__Imp_Curr;
	M->Parent = P;
	JB_SetRef(M->Cls, Self);
	JB_SetRef(M->Name, Self->Name);
	if (Node) {
		SC_MoveFutureStaticsIn(Node);
		SC_Mod_LoadModule(M, Node);
	}
	 else {
		JB_SetRef(M->Source, Self->Source);
	}
	JB_Decr(M);
}

void SC_Class_LoadSaver(SCClass* Self) {
	while (true) {
		Message* _tmPf1 = JB_Incr(SC_Base_SourceArg(Self));
		Message* Msg = JB_Incr(JB_Msg_FindSyxName(_tmPf1, JB_SyxTmp, JB_LUB[1918], false));
		JB_Decr(_tmPf1);
		if ((!Msg)) {
			JB_Decr(Msg);
			break;
		}
		Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(Msg, JB_SyxThg));
		if ((!_tmPf0)) {
			JB_Decr(_tmPf0);
			JB_Decr(Msg);
			return;
		}
		JB_String* S = JB_Incr(JB_Str_LowerCase(_tmPf0->Name));
		JB_Decr(_tmPf0);
		if ((JB_Str_Equals(S, JB_LUB[1810], false)) or ((JB_Str_Equals(S, JB_LUB[1647], false)) or (JB_Str_Equals(S, JB_LUB[1972], false)))) {
			JB_SetRef(Self->SaveAs, S);
		}
		 else if (JB_Str_Equals(S, JB_LUB[1535], false)) {
			Self->SavingCanSkip = true;
		}
		 else {
			JB_SetRef(Self->SaveAs, S);
			if ((!JB_FreeIfDead(SC_Comp__SyntaxAccess(Msg)))) {
				JB_Decr(S);
				JB_Decr(Msg);
				return;
			}
		}
		JB_Decr(S);
		JB_Tree_Remove(Msg);
		JB_Decr(Msg);
	};
	if ((!(JB_Str_Exists(Self->SaveAs)))) {
		JB_SetRef(Self->SaveAs, SC_Class_LoadSaverSub(Self));
	}
}

JB_String* SC_Class_LoadSaverSub(SCClass* Self) {
	if (Self == JB_TypeBool) {
		return JB_LUB[1520];
	}
	 else if (SC_Class_NumericCount(Self) == 1) {
		if (SC_Class_IsA(Self, JB_Typefloat)) {
			return JB_LUB[1657];
		}
		 else if (SC_Class_IsA(Self, JB_Typef64)) {
			return JB_LUB[1646];
		}
		 else {
			return JB_LUB[1715];
		}
	}
	 else if ((bool)SC_Class_NumericCount(Self)) {
		DataTypeCode D = Self->TypeInfo;
		if (JB_TC_IsFloat(D)) {
			if (JB_TC_ItemBitCount(D) == 32) {
				return JB_LUB[1657];
			}
		}
		 else {
			if (JB_TC_ItemBitCount(D) == 32) {
				return JB_LUB[1715];
			}
		}
		return JB_LUB[0];
	}
	 else if (SC_Class_IsObject(Self)) {
		if (Self == JB_TypeString) {
			return JB_LUB[1968];
		}
		 else if (Self == JB_TypeSaveable) {
			return JB_LUB[1836];
		}
	}
	SCClass* S = Self->Super;
	if (S) {
		return S->SaveAs;
	}
	return JB_LUB[0];
}

void SC_Class_LoadSuperBehaviours(SCClass* Self) {
	SCClass* S = Self->Super;
	SCBehaviour* B = Self->Behaviour;
	if (B) {
		while (((bool)S) and (!S->Behaviour)) {
			S = S->Super;
		};
		if (S) {
			JB_SetRef(B->FuncTable->Cls->Super, S->Behaviour->FuncTable->Cls);
		}
	}
}

void SC_Class_LoadSuperClass(SCClass* Self) {
	SCNode* OldMod = Self->Modul->Parent;
	if ((!OldMod)) {
		Self->Modul->Parent = SC__Comp_program;
	}
	Message* P = Self->Source;
	if ((!P)) {
		return;
	}
	Message* Supc = ((Message*)JB_Tree_Second(P));
	SCClass* S = nil;
	if ((!JB_Msg_EqualsSyx(Supc, JB_SyxBra, false))) {
		if (Supc) {
			if ((!JB_Msg_EqualsSyx(Supc, JB_SyxArg, false))) {
				JB_Msg_SyntaxExpect(Supc, nil);
				return;
			}
		}
		if ((SC_Class_IsObject(Self)) and (Self != JB_TypeObject)) {
			S = JB_TypeObject;
		}
	}
	 else {
		Message* Thg = JB_Msg_NeedSyx(Supc, JB_SyxNil);
		if ((!Thg)) {
			return;
		}
		if (JB_Msg_EqualsSyx(Thg, JB_SyxSDot, false)) {
			Thg->Func = JB_SyxThg;
			S = SC_Base_FindClassMsg(Self->Modul, Thg, 0);
		}
		 else if ((bool)OldMod) {
			S = SC_Base_FindClassMsg(OldMod, Thg, kSC__SCNodeFindMode_WantAType);
		}
		 else {
			S = SC_Comp__SyntaxAccess(Thg);
		}
		if ((!S)) {
			0;
		}
		 else if ((bool)(Self->FuncProto)) {
			if (true) {
				JB_Msg_SyntaxExpect(Supc, JB_LUB[717]);
			}
		}
		 else if (SC_Class_IsDataTypeOnly(Self)) {
			if ((!SC_Class_IsDataTypeOnly(S))) {
				JB_Msg_SyntaxExpect(Supc, JB_LUB[810]);
			}
		}
		 else if (SC_Class_IsStruct(Self)) {
			if ((!SC_Class_IsStruct(S))) {
				JB_Msg_SyntaxExpect(Supc, JB_LUB[1243]);
			}
		}
		 else {
			if ((!SC_Class_IsObject(S))) {
				JB_Msg_SyntaxExpect(Supc, JB_LUB[764]);
			}
		}
	}
	if (S) {
		JB_SetRef(Self->Super, S);
		if (SC__Options_MakeInterpreter) {
			JB_Array_SyntaxAppend(S->Children, Self);
		}
		if ((!Self->IsRole)) {
			S->HasSubClass = true;
		}
		 else if ((!OldMod)) {
			Self->Modul->Parent = S->Modul;
		}
		Self->Parent = S;
	}
}

SCDecl* SC_Class_MakeClassType(SCClass* Self, SCDecl* D) {
	SCDecl* C = SC_Decl_Constructor(nil, JB_TypeJBClass);
	(SC_Decl_NameSet(C, JB_Str_LowerCase(Self->Name)));
	JB_SetRef(C->Source, Self->Source);
	C->PointerCount = 1;
	(SC_Decl_SyntaxIsSet(C, kSC__SCDeclInfo_ClassObj, true));
	C->NilDeclared = kSC__NilState_Real;
	JB_SetRef(C->Contains, D);
	return C;
}

void SC_Class_ModelDecls(SCClass* Self) {
	SCClass* M = JB_Incr(SC_Class_GetFlyingMemClassFor(Self));
	if (M) {
		SC_Class_NewDeclInClassModule(Self, JB_LUB[1429], M);
	}
	JB_Decr(M);
}

void SC_Class_NeedsDefaultValue(SCClass* Self, Message* Def, Message** Place, JB_String* Name) {
	if ((*Place)) {
		return;
	}
	if (SC_Class_IsObject(Self) and (!Self->IsRole)) {
		if (((bool)Def) and (!(SC_Msg_OperatorIsThing(Def, JB_LUB[1810])))) {
			if (true) {
				JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[200], Self->Name));
				JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(Name, _tmPf2));
				JB_Decr(_tmPf2);
				JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1011], _tmPf1));
				JB_Decr(_tmPf1);
				SC_SCObject_Fail(Self, _tmPf0);
				JB_Decr(_tmPf0);
			}
		}
	}
	JB_SetRef((*Place), Def);
}

bool SC_Class_NeedsExport(SCClass* Self) {
	return SC_Base_NeedsExport(Self) or SC_Class_IsBehaviourTable(Self);
}

void SC_Class_NewDeclInClassModule(SCClass* Self, JB_String* S, SCClass* T) {
	SCDecl* Dcl = JB_Incr(SC_Decl_Constructor(nil, T));
	(SC_Decl_NameSet(Dcl, S));
	SC_Base_TryAdd(Self->Modul, Self->IsModel, Dcl, S);
	JB_Decr(Dcl);
}

SCDecl* SC_Class_NotConst(SCClass* Self) {
	if ((!Self)) {
		return nil;
	}
	SCDecl* D = Self->_NotConst;
	if (D) {
		return D;
	}
	D = Self->TypeNormal;
	if (SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_DataOnlyConst)) {
		D = SC_Decl_CopyDecl(D, false);
		(SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_DataOnlyConst, (!true)));
	}
	JB_SetRef(Self->_NotConst, D);
	return D;
}

int SC_Class_NumericCount(SCClass* Self) {
	if (Self) {
		return JB_TC_NumericCount(Self->TypeInfo);
	}
	return 0;
}

void SC_Class_OverrideSyntax(SCClass* Self) {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	SCFunction* Cast = JB_Incr(SC_Class_FindSpecialFunc(Self, JB_LUB[1252], false));
	JB_SetRef(Self->Casts, JB_Array_Constructor0(nil));
	if ((!SC_Class_IsStruct(Self))) {
		Self->HasNilChecker = true;
	}
	{
		SCFunction* F = JB_Incr(Cast);
		while (F) {
			F->IsInline = true;
			if ((!JB_Array_SyntaxEquals(F->Args, 1, false))) {
				JB_Msg_SyntaxExpect(F->Source, JB_LUB[1079]);
			}
			SCDecl* Ret = JB_Incr(F->ReturnType);
			if ((!Ret)) {
				JB_Msg_SyntaxExpect(F->Source, JB_LUB[1048]);
				JB_Decr(Ret);
				JB_Decr(F);
				JB_Decr(Cast);
				return;
			}
			SC_Func_DontWantSameReturnType(F->NextFunc, F);
			JB_Array_SyntaxAppend(Self->Casts, F);
			if (SC_Decl_IsNormalBool(Ret)) {
				bool OK = (!F->IsDisabled);
				if (OK) {
					SCDecl* _tmPf1 = JB_Incr(((SCDecl*)JB_Array_First(F->Args)));
					_tmPf1->NilDeclared = kSC__NilState_Optional;
					JB_Decr(_tmPf1);
				}
				Message* _tmPf2 = JB_Incr(SC_Func_SourceArg(F));
				int Mode = SC_Msg_NilCheckMode(_tmPf2, OK);
				JB_Decr(_tmPf2);
				F->IsNilChecker = Mode;
				Self->HasNilChecker = true;
			}
			JB_Decr(Ret);
			JB_SetRef(F, F->NextFunc);
		};
		JB_Decr(F);
	}
	;
	JB_Decr(Cast);
	Self->HasCompareFunc = ((bool)JB_FreeIfDead(SC_Class_FindSpecialFunc(Self, JB_LUB[1253], true)));
	Self->HasEqualsFunc = ((bool)JB_FreeIfDead(SC_Class_FindSpecialFunc(Self, JB_LUB[1256], true)));
	JB_SetRef(Self->TheIsFunc, SC_Class_FindSpecialFunc(Self, JB_LUB[1257], true));
}

int SC_Class_PackClassChildren(SCClass* Self, FastString* J) {
	int Rz = 0;
	{
		Array* _LoopSrcf2 = Self->Children;
		int _if0 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf2, _if0));
			if (C == nil) {
				break;
			}
			if ((!C->IsRole)) {
				if ((!Rz)) {
					JB_bin_Enter(J, JB_SyxArg, JB_LUB[0]);
				}
				SC_Class_PackExport(C, J);
				Rz++;
			}
			_if0++;
		};
	}
	;
	if (Rz) {
		JB_bin_Exit(J, 1);
	}
	return Rz;
}

int SC_Class_PackExport(SCClass* Self, FastString* J) {
	int Rz = 0;
	JB_bin_Enter(J, JB_SyxTmp, Self->Name);
	if ((!SC_Base_IsSTDLib(Self))) {
		SC_Class_DescribeInPack(Self, J);
	}
	Rz = SC_Class_PackClassChildren(Self, J);
	JB_bin_Exit(J, 1);
	return Rz;
}

int SC_Class_PassableCount(SCClass* Self) {
	int Rz = 0;
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (P == nil) {
				break;
			}
			Rz = (Rz + (!SC_Decl_IsCArray(P)));
			_if0++;
		};
	}
	;
	return Rz;
}

void SC_Class_ProcessBehaviours(SCClass* Self) {
	SCBehaviour* B = JB_Incr(Self->Behaviour);
	if ((!B)) {
		JB_Decr(B);
		return;
	}
	SCModule* Table = JB_Incr(B->FuncTable);
	if ((!Table)) {
		JB_Decr(Table);
		JB_Decr(B);
		return;
	}
	SCClass* TableCls = JB_Incr(Table->Cls);
	JB_Decr(Table);
	if ((!TableCls)) {
		JB_Decr(TableCls);
		JB_Decr(B);
		return;
	}
	{
		DictionaryReader* _FnListf0 = JB_Incr(JB_Dict_Navigate(B->Access));
		while (true) {
			SCObject* _valuef1 = JB_Incr(((SCObject*)JB_DictionaryReader_NextValue(_FnListf0)));
			if ((!_valuef1)) {
				JB_Decr(_valuef1);
				break;
			}
			SCFunction* Fn = JB_Incr(((SCFunction*)_valuef1));
			JB_Decr(_valuef1);
			SC_Class_FillInterFaceIn(Self, Fn, false);
			JB_Decr(Fn);
		};
		JB_Decr(_FnListf0);
	}
	;
	{
		Array* _LoopSrcf5 = JB_Incr(B->WrapperFuncs);
		int _if3 = 0;
		while (true) {
			SCFunction* W = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf5, _if3)));
			if (W == nil) {
				JB_Decr(W);
				break;
			}
			SC_Class_FillInterFaceWrapper(Self, W);
			JB_Decr(W);
			_if3++;
		};
		JB_Decr(_LoopSrcf5);
	}
	;
	{
		Dictionary* _LoopSrcf8 = JB_Incr(B->Interfaces);
		DictionaryReader* _navf6 = JB_Incr(JB_Dict_Navigate(_LoopSrcf8));
		JB_Decr(_LoopSrcf8);
		while (true) {
			SCModule* Interface = JB_Incr(((SCModule*)JB_DictionaryReader_NextValue(_navf6)));
			if (Interface == nil) {
				JB_Decr(Interface);
				break;
			}
			SC_Mod_AddInterfaceToTable(Interface, TableCls);
			JB_Decr(Interface);
		};
		JB_Decr(_navf6);
	}
	;
	JB_Decr(B);
	JB_Decr(TableCls);
}

void SC_Class_ProcessInterfaces(SCClass* Self) {
	if ((!SC_Class_IsInterface(Self))) {
		return;
	}
	SCFunction* Fn = JB_Incr(Self->FuncProto);
	if ((!Fn)) {
		JB_Decr(Fn);
		return;
	}
	SCNode* L = JB_Incr(Fn->Parent);
	if (JB_Object_FastIsa(L, &SCModuleData)) {
		SCClass* Cls = JB_Incr(((SCModule*)L)->Cls);
		if (Cls) {
			SC_Func_AddSelfPrm(Fn, Cls);
		}
		JB_Decr(Cls);
	}
	JB_Decr(Fn);
	JB_Decr(L);
}

void SC_Class_Reach(SCClass* Self, SCNode* From, Message* Src) {
	//;
	if (Self->MyReacher) {
		return;
	}
	Self->MyReacher = From;
	SC__Comp_stReachedClass++;
	if (SC__Options_BannedClasses) {
		SC_Class_BannedCheck(Self, Src);
	}
	SCClass* S = Self->Super;
	if (S) {
		SC_Class_Reach(S, Self, nil);
	}
	SCBehaviour* B = Self->Behaviour;
	if (B) {
		SC_Class_Reach(B->FuncTable->Cls, Self, nil);
	}
	SCFunction* Df = Self->DestructorFunc;
	if (Df) {
		SC_Func_ReachFunc(Df, Self);
	}
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (D == nil) {
				break;
			}
			SC_Decl_TypeReach(D, Self, D->Source);
			SC_Decl_TypeReach(D->Contains, Self, D->Source);
			_if0++;
		};
	};
}

void SC_Class_ReachBehaviours(SCClass* Self) {
	//;
	{
		Dictionary* _LoopSrcf2 = JB_Incr(Self->Access);
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf2));
		JB_Decr(_LoopSrcf2);
		while (true) {
			SCObject* F = JB_Incr(((SCObject*)JB_DictionaryReader_NextValue(_navf0)));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			if (JB_Object_FastIsa(F, &SCFunctionData)) {
				if (SC_Func_IsBehaviour(((SCFunction*)F))) {
					SC_Func_ReachFunc(((SCFunction*)F), Self);
				}
			}
			JB_Decr(F);
		};
		JB_Decr(_navf0);
	};
}

bool SC_Class_Real_Isa(SCClass* Self, SCClass* Cls) {
	return SC_Class_IsA(SC_Class_RealClass(Self), Cls);
}

bool SC_Class_Real_Isa2(SCClass* Self, SCClass* Cls) {
	return SC_Class_IsA(SC_Class_RealClass(Self), SC_Class_RealClass(Cls));
}

SCClass* SC_Class_RealClass(SCClass* Self) {
	SCClass* S = Self;
	while (((bool)S) and ((bool)S->IsRole)) {
		S = S->Super;
	};
	return S;
}

SCClass* SC_Class_RealSuper(SCClass* Self) {
	SCClass* S = Self->Super;
	if (S) {
		return SC_Class_RealClass(S);
	}
	return nil;
}

void SC_Class_RenameInterfaces(SCClass* Self) {
	SCBehaviour* B = JB_Incr(Self->Behaviour);
	if ((!B)) {
		JB_Decr(B);
		return;
	}
	{
		Dictionary* _LoopSrcf2 = JB_Incr(B->Interfaces);
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf2));
		JB_Decr(_LoopSrcf2);
		while (true) {
			SCModule* F = JB_Incr(((SCModule*)JB_DictionaryReader_NextValue(_navf0)));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			SCClass* It = JB_Incr(F->Cls);
			JB_Decr(F);
			if (It) {
				JB_SetRef(It->Name, JB_Str_OperatorPlus(It->CppClass, It->Name));
			}
			JB_Decr(It);
		};
		JB_Decr(_navf0);
	}
	;
	JB_Decr(B);
}

JB_String* SC_Class_Render(SCClass* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FreeIfDead(SC_Named_Render(Self, Fs));
	if (SC_Class_IsStruct(Self)) {
		JB_FS_AppendString(Fs, JB_LUB[197]);
	}
	if (SC_Class_NumericCount(Self)) {
		JB_FS_AppendString(Fs, JB_LUB[191]);
	}
	if (Self->FuncProto) {
		JB_FS_AppendString(Fs, JB_LUB[193]);
	}
	 else if (SC_Class_IsDataTypeOnly(Self)) {
		JB_FS_AppendString(Fs, JB_LUB[171]);
	}
	if (Self->IsModel) {
		JB_FS_AppendString(Fs, JB_LUB[189]);
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Class_RenderSaveable(SCClass* Self, FastString* Fs) {
	JB_FS_AppendByte(Fs, '"');
	SC_Class_RenderSaveableSub(Self, Fs);
	JB_FS_RemoveByte(Fs, ' ');
	JB_FS_RemoveByte(Fs, ',');
	JB_FS_AppendByte(Fs, '"');
}

bool SC_Class_RenderSaveableSub(SCClass* Self, FastString* Fs) {
	SCClass* S = JB_Incr(Self->Super);
	if (S) {
		if ((!(SC_Class_RenderSaveableSub(S, Fs) or true))) {
			JB_Decr(S);
			return nil;
		}
	}
	{
		Array* _LoopSrcf2 = JB_Incr(Self->Properties);
		int _if0 = 0;
		while (true) {
			SCDecl* P = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (P == nil) {
				JB_Decr(P);
				break;
			}
			JB_String* ST = JB_Incr(SC_Decl_IsSaveable(P));
			if (JB_Str_Exists(ST) and (!JB_Str_Equals(ST, JB_LUB[1810], false))) {
				if (JB_Str_Equals(ST, JB_LUB[1972], false)) {
					JB_SetRef(ST, P->Type->Name);
				}
				JB_FS_AppendByte(Fs, '|');
				JB_FS_AppendString(Fs, ST);
				JB_FS_AppendByte(Fs, '|');
				JB_FS_AppendByte(Fs, ' ');
				JB_FS_AppendString(Fs, P->Name);
				JB_FS_AppendByte(Fs, ',');
				JB_FS_AppendByte(Fs, ' ');
			}
			JB_Decr(P);
			JB_Decr(ST);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
		JB_Decr(S);
	}
	;
	return true;
}

void SC_Class_StartupSaver(SCClass* Self, JB_String* Name) {
	FastString* Dest = JB_Incr(JB_FS_Constructor(nil));
	bool IsStruct = ((JB_Str_Equals(Self->SaveAs, JB_LUB[1972], false)));
	bool IsSave = (JB_Str_ContainsString(Name, JB_LUB[1204]));
	MessagePosition Using = JB_Msg_SyntaxUsing(Self->Source);
	if (IsStruct) {
		JB_FS_AppendString(Dest, JB_LUB[1674]);
	}
	 else {
		JB_FS_AppendString(Dest, JB_LUB[1513]);
	}
	JB_FS_AppendString(Dest, Name);
	if (IsStruct) {
		if (IsSave) {
			JB_FS_AppendString(Dest, JB_LUB[131]);
		}
		 else {
			JB_FS_AppendString(Dest, JB_LUB[130]);
		}
	}
	JB_FS_AppendString(Dest, JB_LUB[205]);
	if (IsStruct) {
		JB_FS_AppendString(Dest, JB_LUB[2037]);
	}
	 else if (Self->Super != JB_TypeSaveable) {
		JB_FS_AppendString(Dest, JB_LUB[40]);
		JB_FS_AppendString(Dest, Name);
		JB_FS_AppendByte(Dest, '(');
		if (IsSave) {
			JB_FS_AppendString(Dest, JB_LUB[1919]);
		}
		 else {
			JB_FS_AppendString(Dest, JB_LUB[1761]);
		}
		JB_FS_AppendByte(Dest, ')');
	}
	JB_FS_AppendString(Dest, JB_LUB[83]);
	JB_String* Str = JB_Incr(JB_FS_GetResult(Dest));
	JB_Decr(Dest);
	Message* Src = JB_Incr(JB_Str_Parse(Str, JB_SyxArg, true));
	JB_Decr(Str);
	SCNode* Fn = JB_Incr(SC_Base_CollectSub(Self, Src));
	if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
		((SCFunction*)Fn)->AutoGeneratedSaver = true;
		Self->AutoGeneratedSavers = true;
	}
	JB_Decr(Fn);
	JB_Decr(Src);
	JB_MsgPos_Destructor((&Using));
}

JB_String* SC_Class_StructName(SCClass* Self) {
	if (SC_Class_IsDataTypeOrFP(Self)) {
		return Self->Name;
	}
	JB_String* _tmPf0 = JB_Incr(SC_Base_SubProjName(Self));
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1425], Self->Name));
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf1));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

bool SC_Class_EqualsType(SCClass* Self, SCNodeType D, bool Aware) {
	if (((bool)Self) and (D > kSC__SCNodeType_Nil)) {
		return Self->BaseType == D;
	}
	return false;
}

void SC_Class_TaskProperties(SCClass* Self) {
	{
		Array* _LoopSrcf2 = Self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* P = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (P == nil) {
				break;
			}
			int I = _if0;
			(SC_Decl_SyntaxIsSet(P, kSC__SCDeclInfo_Task, true));
			_if0++;
		};
	};
}

bool SC_Class_TestBanned(SCClass* Self) {
	return SC_Comp__Banned(Self->Name);
}

void SC_Class_TryAddToProject(SCClass* Self) {
	if (Self->FuncProto) {
		return;
	}
	Message* NameNode = ((Message*)JB_Ring_First(Self->Source));
	SCModule* Mod = SC__Comp_DisamClasses;
	if (JB_Msg_EqualsSyx(NameNode, JB_SyxDot, false)) {
		Mod = SC_Comp__FindModuleMsg(((Message*)JB_Ring_First(NameNode)), 0);
		if ((!Mod)) {
			return;
		}
	}
	 else {
		if ((JB_Str_Equals(Self->Name, JB_LUB[1725], false)) and JB_Object_FastIsa(Self, &SCClassData)) {
			if (((SCClass*)Self)->IsRole == 1) {
				return;
			}
		}
	}
	SC_Base_TryAdd(Mod, SC_Base_SourceArg(Self), Self->Modul, Self->Name);
}

void SC_Class_WriteStructOrUnion(SCClass* Self, FastStringCpp* Fs) {
	if (Self->IsWrapper == 2) {
		JB_FS_AppendString(Fs, JB_LUB[82]);
	}
	 else {
		JB_FS_AppendString(Fs, JB_LUB[80]);
	}
}

SCNode* SC_Class__DataType(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	return SC_Class__DataTypeSub(Node, Name_space, ErrPlace, JB_LUB[0], kSC__SCNodeType_DataType);
}

SCModule* SC_Class__DataTypeSub(Message* Node, SCNode* Parent, Message* ErrPlace, JB_String* ForInterface, SCNodeType BaseType) {
	if (Node->Obj) {
		return SC__Comp_program;
	}
	JB_FreeIfDead(JB_Msg_GiveArg(Node));
	SCClass* It = JB_Incr(SC_Class__NeuClassSub(Node, Parent, ErrPlace, ForInterface, BaseType));
	if (It) {
		SC_Class_ClassCollect(It);
		if ((JB_Array_SyntaxCast(It->Properties))) {
			JB_Msg_SyntaxExpect(It->Source, JB_LUB[811]);
			JB_Decr(It);
			return nil;
		}
		SCModule* M = JB_Incr(It->Modul);
		JB_SetRef(Node->Obj, M);
		JB_Decr(It);
		JB_SafeDecr(M);
		return M;
	}
	JB_Decr(It);
	return nil;
}

SCNode* SC_Class__ExtendOneFunc(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_Tree_SyntaxAppend(SC__Comp_ExtendList, Node);
	JB_SetRef(Node->Obj, SC__Imp_Curr);
	Message* Dot = JB_Incr(((Message*)JB_Ring_First(Node)));
	Message* Name = JB_Incr(((Message*)JB_Ring_First(Dot)));
	JB_Decr(Dot);
	if ((!((JB_Msg_EqualsSyx(Name, JB_SyxThg, false)) or ((JB_Msg_EqualsSyx(Name, JB_SyxName, false)) or (JB_Msg_EqualsSyx(Name, JB_SyxBra, false)))))) {
		JB_Msg_SyntaxExpect(Name, nil);
	}
	Message* Emb = JB_Incr(((Message*)JB_Ring_NextSib(Name)));
	JB_Decr(Name);
	if (Emb) {
		if (JB_Msg_EqualsSyx(Emb, JB_SyxPrm, false)) {
			JB_Msg_SyntaxExpect(Emb, JB_LUB[1051]);
		}
		JB_Tree_Remove(Emb);
	}
	JB_Decr(Emb);
	return SC__Comp_program;
}

SCNode* SC_Class__GetDefault(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCClass* Cls = JB_Incr(((SCClass*)JB_Object_FastAs(Name_space, &SCClassData)));
	if (Cls) {
		JB_SetRef(Cls->Defawlt, JB_Msg_NeedFirst(Node));
	}
	JB_Decr(Cls);
	return nil;
}

SCNode* SC_Class__GetFalse(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		JB_SetRef(((SCClass*)Name_space)->False, JB_Msg_NeedFirst(Node));
	}
	return nil;
}

JB_String* SC_Class__LoadClassName(Message* Node) {
	Message* S = JB_Incr(((Message*)JB_Ring_First(Node)));
	if ((JB_Msg_EqualsSyx(S, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(S, JB_SyxDot, false))) {
		JB_String* _tmPf0 = JB_Incr(S->Name);
		JB_Decr(S);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(S);
	if (SC_Msg_OperatorIsTmp(Node, JB_LUB[1544])) {
		if (true) {
			JB_Msg_SyntaxExpect(Node, JB_LUB[700]);
		}
	}
	return JB_LUB[0];
}

SCNode* SC_Class__LoadSyntax(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_String* Name = JB_Incr(JB_Str_UpperFirst(Node->Name));
	Message* AlreadyName = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxThg));
	if ((!AlreadyName)) {
		JB_Decr(AlreadyName);
		JB_Decr(Name);
		return nil;
	}
	JB_SetRef(Node->Name, JB_LUB[1673]);
	JB_String* _tmPf0 = JB_Incr(JB_Str_UpperFirst(AlreadyName->Name));
	JB_SetRef(AlreadyName->Name, JB_Str_OperatorPlus(Name, _tmPf0));
	JB_Decr(Name);
	JB_Decr(AlreadyName);
	JB_Decr(_tmPf0);
	return SC_Func__NewFunc(Node, Name_space, ErrPlace);
}

SCNode* SC_Class__NeuClass(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCNode* Rz = nil;
	SCClass* Cls = JB_Incr(SC_Class__NeuClassSub(Node, Name_space, ErrPlace, JB_LUB[0], kSC__SCNodeType_Object));
	if (Cls) {
		SC_Class_ClassCollect(Cls);
		JB_SetRef(Rz, Cls->Modul);
	}
	JB_Decr(Cls);
	JB_SafeDecr(Rz);
	return Rz;
}

SCClass* SC_Class__NeuClassSub(Message* Node, SCNode* Parent, Message* ErrPlace, JB_String* ForInterface, SCNodeType Base) {
	if ((!JB_Str_Exists(ForInterface))) {
		if ((!SC_Base_ExpectModule(Parent, ErrPlace))) {
			return nil;
		}
	}
	Message* Arg = JB_Incr(JB_Msg_GiveArg(Node));
	SCModule* _tmPf1 = JB_Incr(SC_Mod_Constructor(nil));
	SCClass* Cls = JB_Incr(SC_Class_Constructor(nil, Node, Parent, SC_SCNodeType_HasPtrs(Base), _tmPf1));
	JB_Decr(_tmPf1);
	Cls->BaseType = Base;
	Cls->IsRole = (((MaybeBool)JB_Msg_SyntaxEquals(Node, JB_LUB[1902], true)));
	Message* SA = JB_Incr(SC_Base_SourceArg(Cls));
	JB_Decr(SA);
	SC_Class_LoadLinkage(Cls);
	JB_Array_SyntaxAppend(SC__Comp_ClassList, Cls);
	Message* Module = JB_Incr(JB_Msg_FindSyxName(Arg, JB_SyxTmp, JB_LUB[1798], false));
	JB_Decr(Arg);
	SC_Class_LoadModuleForCls(Cls, Module, Parent);
	JB_Decr(Module);
	if (JB_Str_Exists(ForInterface) and JB_Object_FastIsa(Parent, &SCModuleData)) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1439]);
		JB_String* _tmPf2 = JB_Incr(SC_Str_UnicodeSafeName(((SCModule*)Parent)->Cls->Name, nil));
		JB_FS_AppendString(_fsf0, _tmPf2);
		JB_Decr(_tmPf2);
		JB_FS_AppendByte(_fsf0, '_');
		JB_String* _tmPf3 = JB_Incr(SC_Str_UnicodeSafeName(ForInterface, nil));
		JB_FS_AppendString(_fsf0, _tmPf3);
		JB_Decr(_tmPf3);
		JB_FS_AppendString(_fsf0, JB_LUB[1439]);
		JB_SetRef(Cls->CppClass, JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
	}
	JB_SafeDecr(Cls);
	return Cls;
}

SCNode* SC_Class__NeuRole(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCModule* Mod = JB_Incr(((SCModule*)SC_Class__NeuClass(Node, Name_space, ErrPlace)));
	if ((!Mod)) {
		JB_Decr(Mod);
		return nil;
	}
	SCClass* Cls = JB_Incr(Mod->Cls);
	if ((!Cls)) {
		JB_Decr(Cls);
		JB_Decr(Mod);
		return nil;
	}
	Cls->IsRole = ((MaybeBool)true);
	if ((!(JB_Array_SyntaxCast(Cls->Properties)))) {
		JB_Decr(Cls);
		JB_SafeDecr(Mod);
		return Mod;
	}
	JB_Decr(Mod);
	JB_Decr(Cls);
	return nil;
}

SCNode* SC_Class__NewInnerClass(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		return SC_Class__NeuClass(Node, ((SCClass*)Name_space)->Modul, ErrPlace);
	}
	return nil;
}

SCNode* SC_Class__NewStruct(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCClass* It = JB_Incr(SC_Class__NeuClassSub(Node, Name_space, ErrPlace, JB_LUB[0], kSC__SCNodeType_Struct));
	if (It) {
		It->BaseType = kSC__SCNodeType_Struct;
		SC_Class_ClassCollect(It);
		SCModule* _tmPf0 = JB_Incr(It->Modul);
		JB_Decr(It);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(It);
	return nil;
}

SCNode* SC_Class__ProcessAs(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	Message* Name = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxThg));
	if ((!Name)) {
		JB_Decr(Name);
		return nil;
	}
	SCClass* Cls = JB_Incr(SC_Comp__SyntaxAccess(Name));
	JB_Decr(Name);
	if ((!Cls)) {
		JB_Decr(Cls);
		return nil;
	}
	if (JB_Object_MustBe(Name_space, &SCClassData, Node)) {
		JB_SetRef(((SCClass*)Name_space)->ProcessAs, Cls);
	}
	JB_Decr(Cls);
	return SC__Comp_program;
}

SCFunction* SC_Class__ProcessExtend(Message* C, bool PreferClass, SCModule* M) {
	JB_Incr(M);
	if ((JB_Msg_EqualsSyx(C, JB_SyxTmp, false)) and ((JB_Msg_SyntaxEquals(C, JB_LUB[1642], false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[1640], false)))) {
		SC_Class__ProcessExtendOld(C, PreferClass);
		JB_Decr(M);
		return nil;
	}
	Message* Dot = JB_Incr(JB_Msg_NeedSyx(C, JB_SyxDot));
	if ((!Dot)) {
		JB_Decr(M);
		JB_Decr(Dot);
		return nil;
	}
	Message* Name = JB_Incr(JB_Msg_NeedSyx(Dot, JB_SyxNil));
	if ((!Name)) {
		JB_Decr(M);
		JB_Decr(Name);
		JB_Decr(Dot);
		return nil;
	}
	if ((!((JB_Msg_EqualsSyx(Name, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(Name, JB_SyxName, false))))) {
		JB_Msg_SyntaxExpect(Name, nil);
		JB_Decr(M);
		JB_Decr(Name);
		JB_Decr(Dot);
		return nil;
	}
	if ((!(M))) {
		JB_SetRef(M, SC_Comp__FindModuleMsg(Name, 0));
	}
	if ((!M)) {
		JB_Decr(M);
		JB_Decr(Name);
		JB_Decr(Dot);
		return nil;
	}
	JB_Tree_Clear(Dot);
	Dot->Func = JB_SyxThg;
	JB_Decr(Dot);
	SCNode* B = JB_Incr(M);
	if (JB_Msg_EqualsSyx(Name, JB_SyxName, false)) {
		PreferClass = false;
	}
	SCClass* Mcls = JB_Incr(M->Cls);
	JB_Decr(M);
	if (PreferClass and ((bool)Mcls)) {
		JB_SetRef(B, Mcls);
	}
	JB_Decr(Mcls);
	Name->Func = JB_SyxThg;
	JB_Decr(Name);
	SCImport* Imp = JB_Incr(((SCImport*)JB_Object_FastAs(C->Obj, &SCImportData)));
	if (Imp) {
		SC_Imp_Use(Imp);
	}
	 else {
		SC_Imp_Use(B->Project);
	}
	JB_Decr(Imp);
	SCFunction* Fn = JB_Incr(SC_Func__NewFuncSub(C, B));
	SC_Func_TryAdd(Fn, B);
	JB_Decr(B);
	JB_SafeDecr(Fn);
	return Fn;
}

void SC_Class__ProcessExtendOld(Message* C, bool PreferClass) {
	Message* Name = JB_Incr(JB_Msg_NeedSyx(C, JB_SyxThg));
	if (Name) {
		Message* Arg = JB_Incr(JB_Msg_Last(C, JB_SyxArg));
		SCModule* M = JB_Incr(SC_Comp__FindModuleMsg(Name, 0));
		if (((bool)M) and ((bool)Arg)) {
			SCNode* B = JB_Incr(M);
			SCClass* Cls = JB_Incr(M->Cls);
			if (PreferClass and ((bool)Cls)) {
				JB_SetRef(B, Cls);
			}
			JB_Decr(Cls);
			SCImport* Imp = JB_Incr(((SCImport*)JB_Object_FastAs(C->Obj, &SCImportData)));
			if (Imp) {
				SC_Imp_Use(Imp);
			}
			 else {
				SC_Imp_Use(B->Project);
			}
			JB_Decr(Imp);
			Message* _tmPf0 = JB_Incr(SC_Base_SourceArg(M));
			SC_Base_CollectFromNode(B, Arg, SC_Msg_visible(C), _tmPf0);
			JB_Decr(B);
			JB_Decr(_tmPf0);
		}
		JB_Decr(Arg);
		JB_Decr(M);
	}
	JB_Decr(Name);
}

SCNode* SC_Class__SetSize(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Node)));
		((SCClass*)Name_space)->Size = JB_Msg_Int(_tmPf0, 0);
		JB_Decr(_tmPf0);
	}
	return SC__Comp_program;
}

SCNode* SC_Class__StoreExtend(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	(SC_Msg_visibleSet(Node, SC__Base_CurrVisibility));
	JB_Tree_SyntaxAppend(SC__Comp_ExtendList, Node);
	JB_SetRef(Node->Obj, SC__Imp_Curr);
	return SC__Comp_program;
}

SCNode* SC_Class__StoreExtendModule(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_Array_SyntaxAppend(SC__Comp_ExtendModuleList, Node);
	JB_SetRef(Node->Obj, SC__Imp_Curr);
	return SC__Comp_program;
}


void SC_Func_AddConstructorReturn(SCFunction* Self, Message* Prms) {
	SCClass* C = Self->Cls;
	if (C) {
		if ((!SC_Class_IsObject(C))) {
			return;
		}
		(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_NewNew, true));
		//using;
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Prms);
		Message* Dcl = JB_Msg_Msg(Prms, JB_SyxDecl, JB_LUB[0]);
		JB_Msg_AppendSyx(JB_Msg_Msg(Dcl, JB_SyxARel, JB_LUB[214]), JB_SyxThg, Self->Cls->Name);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
}

void SC_Func_AddConstructorReturn2(SCFunction* Self) {
	if ((!((!Self->IsWrapper) and SC_Func_SyntaxIs(Self, kSC__FunctionType_NewNew)))) {
		return;
	}
	Message* Args = JB_Incr(JB_Msg_NeedSyxInt(Self->Source, JB_SyxArg, 2));
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Self->Source);
	Message* Type = JB_Incr(JB_Msg_ConstructorNormal(nil, JB_SyxThg, Self->Cls->Name));
	if (SC_Class_IsTask(Self->Cls)) {
		Message* _tmPf1 = JB_Incr(JB_Macro_CallFast(SC__Macros_ConstructorNewTask, Type, nil));
		(JB_Ring_FirstSet(Args, _tmPf1));
		JB_Decr(_tmPf1);
	}
	 else {
		Message* _tmPf2 = JB_Incr(JB_Macro_CallFast(SC__Macros_ConstructorNew, Type, nil));
		(JB_Ring_FirstSet(Args, _tmPf2));
		JB_Decr(_tmPf2);
	}
	JB_Decr(Type);
	Message* _tmPf3 = JB_Incr(JB_Msg_Msg(Args, JB_SyxTmp, JB_LUB[1898]));
	JB_Decr(Args);
	JB_Msg_AppendSyx(_tmPf3, JB_SyxThg, JB_LUB[1933]);
	JB_Decr(_tmPf3);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_AddSelfPrm(SCFunction* Self, SCClass* Cls) {
	Message* Prms = JB_Incr(JB_Msg_FindSyx(Self->Source, JB_SyxPrm));
	Message* Name = JB_Incr(((Message*)JB_Ring_First(Self->Source)));
	if ((!Name)) {
		JB_Msg_SyntaxExpect(Self->Source, JB_LUB[1075]);
		JB_Decr(Name);
		JB_Decr(Prms);
		return;
	}
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Name);
		if ((!Prms)) {
			JB_SetRef(Prms, (JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			(JB_Ring_NextSibSet(Name, Prms));
		}
		Message* _tmPf1 = JB_Incr(SC_MakeDecl(Cls->Name, JB_LUB[1933], nil, 0));
		(JB_Ring_FirstSet(Prms, _tmPf1));
		JB_Decr(_tmPf1);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Prms);
	JB_Decr(Name);
}

void SC_Func_AddSelfToFunc(SCFunction* Self, SCClass* Cls, SCNode* Space) {
	SCDecl* Sl = Cls->SelfDecl;
	if (SC_Decl_TypeSuffers(Sl)) {
		Sl = SC_Decl_CopyDecl(Sl, false);
		if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Destructor)) {
			Sl = SC_Decl_MakeNewReal(Sl);
		}
		 else if ((SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor)) and SC_Class_IsObject(Cls)) {
			Sl = SC_Decl_MakeNewOptional(Sl);
		}
		(SC_Decl_SyntaxIsSet(Sl, kSC__SCDeclInfo_SelfImplicit, true));
	}
	SC_Base_TryAdd(Space, SC_Base_FuncSrc(Space), Sl, JB_LUB[1933]);
	JB_Array_SyntaxAppend(Self->Args, Sl);
}

void SC_Func_AnalyseRefs(SCFunction* Self, Array* List) {
	Message* Root = JB_Incr(SC_Func_SourceArg(Self));
	bool IsConstructor = SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor);
	{
		Message* Msg = JB_Incr(Root);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(Root)));
		while (((bool)(Msg)) and (Msg != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(Msg)));
			int It = SC_Msg_RC_HasTemporary(Msg);
			if (It) {
				if (SC_Func_doRefs(Self) or (It != kSC__Refs_kBasisObj)) {
					SC_Refs__RC_HandleDisappearing(Self, Msg, It);
				}
			}
			JB_SetRef(Msg, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(Msg);
		JB_Decr(_afterf1);
		;
	}
	;
	{
		Message* Msg = JB_Incr(((Message*)JB_Ring_First(Root)));
		Message* _After_f4 = JB_Incr(((Message*)JB_Ring_FlatAfter(Root)));
		while (((bool)Msg) and (Msg != _After_f4)) {
			Message* _tmPf10 = JB_Incr(((Message*)JB_Ring_Parent(Msg)));
			if ((!JB_Msg_EqualsSyx(_tmPf10, JB_SyxArg, false))) {
				JB_SetRef(Msg, ((Message*)JB_Ring_FlatNext0(Msg)));
				JB_Decr(_tmPf10);
				continue;
			}
			JB_Decr(_tmPf10);
			JB_Array_SyntaxAppend(List, Msg);
			JB_SetRef(Msg, ((Message*)JB_Ring_FlatNext0(Msg)));
		};
		JB_Decr(Msg);
		JB_Decr(_After_f4);
	}
	;
	JB_Decr(Root);
	if (SC_Func_doRefs(Self)) {
		{
			Array* _LoopSrcf7 = JB_Incr(Self->Args);
			int _if5 = 0;
			while (true) {
				SCDecl* Ar = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf7, _if5)));
				if (Ar == nil) {
					JB_Decr(Ar);
					break;
				}
				if ((SC_Decl_SyntaxIs(Ar, kSC__SCDeclInfo_Altered)) and (SC_Decl_IsNormalObject(Ar))) {
					SC_Refs__RC_DeclArg(Ar, Self);
				}
				JB_Decr(Ar);
				_if5++;
			};
			JB_Decr(_LoopSrcf7);
		};
	}
	{
		int _if8 = JB_Array_Size(List) - 1;
		while (true) {
			Message* Msg = JB_Incr(((Message*)JB_Array_Value(List, _if8)));
			if (Msg == nil) {
				JB_Decr(Msg);
				break;
			}
			Syntax F = Msg->Func;
			if (F == JB_SyxRel) {
				if (IsConstructor and SC_SettingSelfProperty(Msg)) {
					SC_Refs__RC_RelConstructor(Msg);
				}
				 else if (SC_Func_doRefs(Self) or SC_SettingMemory(Msg)) {
					SC_Refs__RC_Rel(Msg);
				}
			}
			 else if (F == JB_SyxDot) {
				SC_Refs__RC_IgnoreReturn(Msg, SC_Func_doRefs(Self));
			}
			 else if (F == JB_SyxFunc) {
				SC_Refs__RC_CheckFuncAllocOK(Self, Msg);
				SC_Refs__RC_IgnoreReturn(Msg, SC_Func_doRefs(Self));
			}
			 else if (SC_Msg_IsStatementExpr(Msg)) {
				SC_Refs__RC_IgnoreReturn(Msg, SC_Func_doRefs(Self));
			}
			 else if (F == JB_SyxDecl) {
				SC_Refs__DeclInit(Msg, Self, false);
			}
			JB_Decr(Msg);
			_if8--;
		};
	};
}

int SC_Func_ApparantArgCount(SCFunction* Self) {
	int A = JB_Array_Size(Self->Args);
	A = (A - ((bool)Self->Cls));
	A = (A - (Self->IsAssigns));
	return A;
}

SCFunction* SC_Func_ArgsMatch(SCFunction* Self, SCDecl* Base, SCNode* Name_space, SCParamArray* Incoming, int Options) {
	SCFunction* Rz = nil;
	if ((!Options)) {
		Rz = SC_Func_ArgsMatch1(Self, Base, Name_space, Incoming, 0);
		if ((!Rz)) {
			Rz = SC_Func_ArgsMatch1(Self, Base, Name_space, Incoming, kJB_kTypeCastAssigns);
		}
	}
	 else {
		JB_FreeIfDead(SC_Func_ArgsMatch1(Self, Base, Name_space, Incoming, kJB_kTypeCastAssigns | Options));
		JB_FreeIfDead(SC_Func_ArgsMatch1(Self, Base, Name_space, Incoming, Options));
		if ((!SC_PA_MadeError(Incoming))) {
			if (true) {
				JB_Msg_SyntaxExpect(Incoming->Exp, JB_Str_OperatorPlus(JB_LUB[1387], SC_Func_RenderTitle(Self, true, nil)));
			}
		}
	}
	return Rz;
}

SCFunction* SC_Func_ArgsMatch1(SCFunction* Self, SCDecl* Base, SCNode* Name_space, SCParamArray* Incoming, int Cast) {
	SCFunction* F = SC_Func_ArgsMatch2(Self, Base, kJB_kTypeCastFalse | Cast, Name_space, Incoming);
	SCFunction* Macro = F;
	if ((!SC_Func_IsReal(F))) {
		F = SC_Func_ArgsMatch2(Self, Base, kJB_kTypeCastNumbers | Cast, Name_space, Incoming);
		if (F) {
			Macro = F;
		}
		if ((!SC_Func_IsReal(F))) {
			F = SC_Func_ArgsMatch2(Self, Base, kJB_kTypeCastTrue | Cast, Name_space, Incoming);
		}
	}
	if (SC_Func_IsReal(F) and Incoming->IsAssigns) {
		SC_Msg_AssignsFix(Incoming->Exp, F);
	}
	if (F) {
		return F;
	}
	return Macro;
}

SCFunction* SC_Func_ArgsMatch2(SCFunction* Self, SCDecl* Base, int TypeCast, SCNode* Name_space, SCParamArray* Incoming) {
	bool NeedsAlter = false;
	int OldMatch = 0;
	SCFunction* Result = nil;
	SCFunction* Missing = nil;
	{
		SCFunction* F = JB_Incr(Self);
		while (F) {
			if (F->IsMacro) {
				JB_SetRef(Missing, F);
				JB_SetRef(F, F->NextFunc);
				continue;
			}
			int Match = SC_Func_ArgsMatch3(F, TypeCast, Base, false, Name_space, Incoming);
			if (Match) {
				if (Result) {
					SCFunction* CanKeepBetter = JB_Incr(SC_Func_TryKeepBetter(Result, OldMatch, F, Match));
					if ((!CanKeepBetter)) {
						JB_Decr(CanKeepBetter);
						SCFunction* _tmPf2 = JB_Incr(SC_PA_ArgsMatchError(Incoming, TypeCast, F, Result));
						JB_Decr(F);
						JB_Decr(Missing);
						JB_Decr(Result);
						JB_SafeDecr(_tmPf2);
						return _tmPf2;
					}
					JB_SetRef(Result, CanKeepBetter);
					JB_Decr(CanKeepBetter);
				}
				if ((((bool)(Match & kJB_kNeeds))) or (Match == kJB_kUseDefaultParams)) {
					NeedsAlter = ((bool)Match);
				}
				if ((!(Result))) {
					JB_SetRef(Result, F);
				}
				OldMatch = Match;
			}
			JB_SetRef(F, F->NextFunc);
		};
		JB_Decr(F);
	}
	;
	if (NeedsAlter) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(Incoming->Exp)));
		_tmPf1->Func = JB_SyxPrm;
		JB_Decr(_tmPf1);
		SC_Func_ArgsMatch3(Result, TypeCast, Base, true, Name_space, Incoming);
	}
	if (Result) {
		JB_Decr(Missing);
		JB_SafeDecr(Result);
		return Result;
	}
	JB_Decr(Result);
	JB_SafeDecr(Missing);
	return Missing;
}

int SC_Func_ArgsMatch3(SCFunction* Self, int TypeCast, SCDecl* Base, bool ThisAlter, SCNode* Name_space, SCParamArray* Incoming) {
	if ((Self->IsAssigns != 0) != Incoming->IsAssigns) {
		if ((!((((bool)(TypeCast & kJB_kTypeCastAssigns))) and ((!Incoming->IsAssigns))))) {
			return 0;
		}
	}
	int Pos = 0;
	int Result = kJB_kSimpleMatch;
	int SelfCast = SC_PA_IgnoreSelfContain(Incoming);
	TypeCast = (TypeCast | (kJB_kNoBoolTypeCast | kJB_kTypeCastWantSuperDistance));
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_NumberCreator)) {
		TypeCast = (TypeCast | kJB_kTypeCastFromZero);
	}
	int Fin = JB_Array_Size(Self->Args);
	int Fi = ((int)((SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor)) and (!Incoming->AllowSelfToConstructor)));
	JB_DoAt(0);
	while (Fi < Fin) {
		SCDecl* _tmPf0 = JB_Incr(((SCDecl*)JB_Array_Value(Self->Args, Fi)));
		SCDecl* FuncArg = JB_Incr(_tmPf0);
		JB_Decr(_tmPf0);
		Message* PArg_Ch = JB_Incr(SC_PA_SyntaxAccess(Incoming, Pos));
		SCDecl* PArg_Type = JB_Incr(SC_TypeOfExpr(PArg_Ch, Name_space, nil));
		if (Base) {
			JB_SetRef(FuncArg, SC_Decl_ContainedReplace(FuncArg, Base, false));
		}
		Message* LArg_ch = JB_Incr(((Message*)JB_Ternary(ThisAlter, PArg_Ch, nil)));
		int Cast = TypeCast | SelfCast;
		if (SC_Msg_IsSmallInt(PArg_Ch, PArg_Type)) {
			Cast = (Cast | kJB_kTypeCastFromZero);
		}
		uint Matched = SC_Decl_TypeMatch(FuncArg, PArg_Type, Cast, LArg_ch);
		JB_Decr(PArg_Type);
		JB_Decr(LArg_ch);
		SelfCast = 0;
		if ((Matched != kJB_kNoMatch) and (!((Matched == kJB_kUseDefaultParams) and ThisAlter))) {
			if (Matched > Result) {
				Result = Matched;
			}
			 else if (((bool)((Matched | Result) & kJB_kNeedsAddressOfButAlsoNeedsSuperMatch))) {
				Result = kJB_kNeedsAddressOfButAlsoNeedsSuperMatch;
			}
			Pos++;
		}
		 else if ((!FuncArg->Default)) {
			if (((bool)(TypeCast & kJB_kTypeCastDescribeErrors))) {
				SC_Func_DescribeParamFail(Self, Incoming, Fi);
			}
			JB_Decr(PArg_Ch);
			JB_Decr(FuncArg);
			return kJB_kNoMatch;
		}
		 else if (ThisAlter) {
			Message* Def = JB_Incr(JB_Msg_Copy(FuncArg->Default, nil));
			Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(Incoming->Exp)));
			SC_Msg_InsertBefore(_tmPf1, Def, PArg_Ch);
			JB_Decr(_tmPf1);
			JB_FreeIfDead(SC_TypeOfExpr(Def, Name_space, nil));
			JB_Decr(Def);
		}
		 else {
			Result = kJB_kUseDefaultParams;
		}
		JB_Decr(FuncArg);
		JB_Decr(PArg_Ch);
		Fi++;
	};
	if (Pos >= Incoming->Size) {
		return Result;
	}
	if ((((bool)(TypeCast & kJB_kTypeCastDescribeErrors))) and (!SC_PA_MadeError(Incoming))) {
		if (true) {
			JB_String* _tmPf3 = JB_Incr(SC_Func_RenderTitle(Self, true, nil));
			JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1321], _tmPf3));
			JB_Decr(_tmPf3);
			JB_Msg_SyntaxExpect(Incoming->Exp, _tmPf2);
			JB_Decr(_tmPf2);
		}
		if (true) {
			JB_Msg_SyntaxExpect(Self->Source, kJB_kUsingStr);
		}
	}
	return 0;
}

bool SC_Func_Borked(SCFunction* Self) {
	return ((bool)(Self->Badness & 128));
}

void SC_Func_BuildConstructorDestructor(SCFunction* Self) {
	Message* TheCall = SC_Func_FindCallParents(Self);
	bool IsConstructor = SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor);
	Message* Root = SC_Func_SourceArg(Self);
	SC_Func_CheckConstructorAndDestructor(Self, Root, IsConstructor);
	if (IsConstructor) {
		if ((!TheCall)) {
			TheCall = ((Message*)JB_Ring_First(Root));
		}
		SC_Func_FillInMissingConstructorDefaults(Self, Root, TheCall);
	}
	if ((!(JB_Rec_OK(JB_StdErr) and (!IsConstructor)))) {
		return;
	}
	SCClass* C = Self->Cls;
	if ((!SC_Class_HasStuffToHandleInDestructor(C))) {
		if ((!JB_Ring_HasChildren(Root))) {
			JB_SetRef(C->DestructorFunc, nil);
		}
	}
	 else if ((!C->IsWrapper)) {
		SC_Func_FillInDestructor(Self);
	}
}

void SC_Func_CallParents(SCFunction* Self) {
	if ((!(SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor) or SC_Func_SyntaxIs(Self, kSC__FunctionType_Destructor)))) {
		return;
	}
	if ((!(SC_Func_IsARealSpdFunc(Self) and (!SC_Func_FindCallParents(Self))))) {
		return;
	}
	SCClass* C = Self->Cls;
	if ((!C)) {
		return;
	}
	SCClass* Parent = SC_Class_RealSuper(C);
	if ((!(((bool)Parent) and (Parent != JB_TypeObject)))) {
		return;
	}
	byte T = C->IsRole;
	if (T == 2) {
		return;
	}
	SCFunction* Fn = SC_Func_ConOrDesForCall(Self, C, SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor), T);
	if (Fn) {
		SC_Func_CallSuperMem(Self, Fn);
	}
}

void SC_Func_CallSuperMem(SCFunction* Self, SCFunction* Fn) {
	Message* Root = SC_Func_SourceArg(Self);
	if ((!Root)) {
		return;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Root);
	Message* PCon = SC_NewFnc(Fn->ExportName);
	Message* Lst = ((Message*)JB_Ring_Last(PCon));
	JB_SetRef(Lst->Obj, Fn);
	{
		Array* _LoopSrcf3 = Fn->Args;
		int _if1 = 0;
		while (true) {
			SCDecl* A = ((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1));
			if (A == nil) {
				break;
			}
			int I = _if1;
			JB_SetRef(JB_Msg_Msg(Lst, JB_SyxThg, A->Name)->Obj, ((SCDecl*)JB_Array_Value(Self->Args, I)));
			_if1++;
		};
	}
	;
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor)) {
		JB_SetRef(PCon->Obj, Fn->ReturnType);
		(JB_Ring_NextSibSet(((Message*)JB_Ring_First(Root)), PCon));
	}
	 else {
		JB_SetRef(PCon->Obj, JB_TypeVoid);
		JB_Tree_SyntaxAppend(Root, PCon);
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

bool SC_Func_CanBuildConstructor(SCFunction* Self) {
	if ((SC_Func_SyntaxIs(Self, kSC__FunctionType_ConOrDes)) and SC_Func_IsARealSpdFunc(Self)) {
		return true;
	}
	return false;
}

bool SC_Func_CanCompare(SCFunction* Self, SCDecl* Against) {
	{
		SCFunction* F = Self;
		while (F) {
			SCDecl* Arg = ((SCDecl*)JB_Array_Value(F->Args, 1));
			if (SC_Decl_MatchesDecl(Against, Arg)) {
				return true;
			}
			F = F->NextFunc;
		};
	}
	;
	return false;
}

bool SC_Func_CanLibLoad(SCFunction* Self) {
	if ((!Self->IsMacro) and ((!Self->IsDisabled) and (Self->IsCppInBuilt != 2))) {
		return true;
	}
	return false;
}

bool SC_Func_CanLinkTo(SCFunction* Self, SCNode* To) {
	if (To->LinkedFrom < SC__LinkMap_CurrID) {
		To->LinkedFrom = SC__LinkMap_CurrID;
		return true;
	}
	return false;
}

bool SC_Func_CanNil(SCFunction* Self) {
	if ((Self->Badness != 0) and (Self->Badness != 128)) {
		return false;
	}
	return (!Self->IsMacro) and ((!Self->IsWrapper) and (!Self->IsDisabled));
}

void SC_Func_CheckConstructorAndDestructor(SCFunction* Self, Message* Root, bool IsConstructor) {
	if (Self->Badness) {
		return;
	}
	SCClass* Supper = Self->Cls->Super;
	bool GotSuperConstructor = false;
	if (Supper) {
		GotSuperConstructor = ((Supper == JB_TypeObject) or ((JB_TypeTask == Supper->Parent) or (JB_TypeTask == Supper)));
	}
	JB_String* NoNesting = JB_LUB[1299];
	{
		Message* Dot = Root;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Root));
		while (((bool)(Dot)) and (Dot != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Dot));
			if (JB_Msg_EqualsSyx(Dot, JB_SyxFunc, false)) {
				Message* Prms = ((Message*)JB_Ring_Last(Dot));
				SCFunction* Fn = (((SCFunction*)JB_Object_FastAs(Prms->Obj, &SCFunctionData)));
				if (SC_Func_SyntaxIs(Fn, kSC__FunctionType_Constructor) and SC_Decl_SyntaxIs(((SCDecl*)((Message*)JB_Ring_First(Prms))->Obj), kSC__SCDeclInfo_Self)) {
					GotSuperConstructor = true;
					if ((!JB_Msg_InMsg(Dot, Root))) {
						JB_Msg_SyntaxExpect(Dot, NoNesting);
					}
				}
			}
			int UsedAtAll = SC_Msg_SelfUsedForProperty(Dot);
			if (UsedAtAll) {
				SCDecl* T = SC_TypeOfExpr(Dot, nil, nil);
				if (T) {
					bool IsSet = UsedAtAll == 1;
					if ((!SC_Decl_IsNormalObject(T))) {
						0;
					}
					 else if (IsConstructor) {
						if ((!GotSuperConstructor)) {
							JB_Msg_SyntaxExpect(Dot, JB_LUB[691]);
						}
						if ((!(JB_Tree_IsFirst(Dot) and IsSet))) {
							if ((!SC_Decl_SyntaxIs(T, kSC__SCDeclInfo_PropertyWasConstructed))) {
								JB_Msg_SyntaxExpect(Dot, JB_LUB[1104]);
							}
						}
						if ((!(!SC_Decl_SyntaxIs(T, kSC__SCDeclInfo_PropertyWasConstructed)))) {
							JB_Msg_SyntaxExpect(Dot, JB_LUB[751]);
						}
						if ((!JB_Msg_InMsg(((Message*)JB_Ring_Parent(Dot)), Root))) {
							JB_Msg_SyntaxExpect(Dot, NoNesting);
						}
					}
					 else {
						if ((!(JB_Tree_IsLast(Dot) or (!IsSet)))) {
							JB_Msg_SyntaxExpect(Dot, JB_LUB[750]);
						}
					}
					if (IsConstructor) {
						(SC_Decl_SyntaxIsSet(T, kSC__SCDeclInfo_PropertyWasConstructed, true));
					}
				}
			}
			Dot = _N_f2;
		};
		;
	};
}

void SC_Func_CheckNotBadName(SCFunction* Self) {
	if ((!SC_Func_ApparantArgCount(Self)) and ((bool)Self->Cls)) {
		int W = SC_Class_NumericCount(Self->Cls);
		if ((W > 1) and ((bool)SC_Str_IsSwizzle(Self->Name, W))) {
			if (true) {
				JB_Msg_SyntaxExpect(Self->Source, JB_LUB[721]);
			}
		}
	}
}

void SC_Func_CheckReturnValue(SCFunction* Self, Message* Msg) {
	Message* C = JB_Incr(((Message*)JB_Ring_First(Msg)));
	if ((!C)) {
		if ((Self->ReturnType)) {
			JB_Msg_SyntaxExpect(Msg, JB_LUB[1053]);
		}
		JB_Decr(C);
		return;
	}
	if ((!JB_Tree_IsOnlyChild(C))) {
		JB_Msg_SyntaxExpect(Msg, JB_LUB[748]);
		JB_Decr(C);
		return;
	}
	if ((!Self->ReturnType) and (((JB_Msg_SyntaxEquals(C, JB_LUB[1810], false))) and ((JB_Msg_EqualsSyx(C, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(C, JB_SyxQues, false))))) {
		JB_Tree_Remove(C);
		JB_Decr(C);
		return;
	}
	SCArg* _tmPf0 = JB_Incr(SC_Msg_MsgArg(Msg));
	SCDecl* FoundReturnType = JB_Incr(SC_TypeOfExpr(C, _tmPf0, nil));
	JB_Decr(_tmPf0);
	if (FoundReturnType == JB_TypeVoid) {
		JB_SetRef(FoundReturnType, nil);
	}
	SCDecl* R = JB_Incr(Self->ReturnType);
	if (R) {
		if ((!FoundReturnType)) {
			JB_Msg_SyntaxExpect(Msg, JB_LUB[904]);
			JB_Decr(R);
			JB_Decr(FoundReturnType);
			JB_Decr(C);
			return;
		}
		if ((FoundReturnType == JB_TypeNil) and (SC_Decl_CantBeNilInCpp(R))) {
			Message* Def = JB_Incr(SC_Decl_CreateDefault(R, C, true));
			if (Def) {
				JB_FreeIfDead(SC_Msg_ReplaceWith(C, Def));
			}
			 else {
				if (true) {
					JB_Msg_SyntaxExpect(Msg, JB_LUB[714]);
				}
			}
			JB_Decr(Def);
		}
		 else {
			JB_FreeIfDead(SC_Decl_ExpectMatch(R, FoundReturnType, kJB_kTypeCastTrue, C, nil));
		}
	}
	 else {
		if ((FoundReturnType)) {
			JB_Msg_SyntaxExpect(Msg, JB_LUB[1289]);
		}
	}
	JB_Decr(C);
	JB_Decr(FoundReturnType);
	JB_Decr(R);
}

void SC_Func_Cleanupfunc(SCFunction* Self, Message* S) {
	JB_String* N = JB_Incr(S->Name);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(S);
	SCClass* Cls = JB_Incr(SC_Base_IsNormalObject(Self->Cls));
	if ((JB_Msg_SyntaxEquals(S, JB_LUB[1563], true)) or (JB_Msg_SyntaxEquals(S, JB_LUB[1600], true))) {
		JB_SetRef(S->Name, JB_LUB[1673]);
		Message* _tmPf1 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, N));
		(JB_Ring_FirstSet(S, _tmPf1));
		JB_Decr(_tmPf1);
	}
	 else if (JB_Msg_SyntaxEquals(S, JB_LUB[1894], true)) {
		if (SC_Func__Tran_Render(S, Cls)) {
			JB_SetRef(S->Name, JB_LUB[1512]);
		}
	}
	JB_Decr(N);
	if (SC_Msg_IsBehaviour(S) and ((bool)Cls)) {
		SC_Beh__Tran_Behaviour(S, Cls);
		SC_Class_FillInterFaceIn(Cls, Self, true);
	}
	JB_Decr(Cls);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_CollectDeclsParams(SCFunction* Self, Message* Prms, SCNode* AddToSpace) {
	SC__Mod_Curr = ((SCModule*)Self->Parent);
	SCClass* Cls = Self->Cls;
	if ((!Cls)) {
		Cls = ((SCModule*)Self->Parent)->Cls;
	}
	 else if ((!SC_Msg_HasSelfAsFirst(Prms))) {
		if ((!AddToSpace)) {
			JB_Msg_SyntaxExpect(Prms, nil);
			return;
		}
		SC_Func_AddSelfToFunc(Self, Cls, AddToSpace);
	}
	{
		Message* Item = ((Message*)JB_Ring_First(Prms));
		while (Item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Item));
			SC_Msg_CollectOneParam(Item, Self, AddToSpace, Cls);
			Item = _Nf1;
		};
		;
	}
	;
	NilState Ns = Self->NilSelf;
	if (Ns) {
		SC_Func_WantAs(Self, Ns);
	}
	SCDecl* R = Self->ReturnType;
	if (((bool)R) and Self->HidesProperties) {
		JB_SetRef(Self->ReturnType, SC_Decl_MakeReal(R));
	}
}

void SC_Func_CollectLinks(SCFunction* Self, JB_Object* Obj) {
	while (true) {
		if (JB_Object_FastIsa(Obj, &SCFunctionData)) {
			return SC_Func_DoLinkBoth(Self, ((SCFunction*)Obj));
		}
		if (JB_Object_FastIsa(Obj, &SCClassData)) {
			return SC_Func_DoLinkTo(Self, ((SCClass*)Obj));
		}
		if (JB_Object_FastIsa(Obj, &SCDeclData)) {
			SC_Func_DoLinkTo(Self, ((SCDecl*)Obj)->Type);
			Obj = ((SCDecl*)((SCDecl*)Obj)->IsLookupOnly);
			if ((!((SCDecl*)Obj))) {
				return;
			}
		}
		 else {
			return;
		}
	};
}

bool SC_Func_CollectReturnAsReal(SCFunction* Self) {
	if (SC_Func_IsAllocOrNew(Self) and SC__Options_NilTestAllocNeverFails) {
		return true;
	}
	return false;
}

SCFunction* SC_Func_ConOrDesForCall(SCFunction* Self, SCClass* C, bool IsConstructor, int Task) {
	SCClass* Parent = C->Super;
	if ((!Parent)) {
		return nil;
	}
	SCFunction* Fn = SC_Class_ConOrDesForCall(Parent, IsConstructor, Task);
	if (Fn) {
		return Fn;
	}
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor)) {
		if ((!((Self->Cls == JB_TypeObject) or (Self->Cls->Super == JB_TypeObject)))) {
			SC_SCObject_Fail(Self, JB_LUB[1049]);
			return nil;
		}
	}
	return nil;
}

SCFunction* SC_Func_Constructor(SCFunction* Self, Message* Msg) {
	if (Self == nil) {
		Self = ((SCFunction*)JB_NewClass(&SCFunctionData));
	}
	SC_Base_ConstructorMsg(Self, Msg);
	Array* _tmPf1 = JB_Array_Constructor0(nil);
	Self->Args = JB_Incr(_tmPf1);
	Self->Cls = nil;
	JB_StringC* _tmPf0 = JB_LUB[0];
	Self->Description = JB_Incr(_tmPf0);
	Self->Refs = nil;
	Self->CounterPart = nil;
	Self->NextFunc = nil;
	Self->ASM = nil;
	Self->ProtoDecl = nil;
	Self->ProtoType = nil;
	Self->ReturnType = nil;
	Self->DepthFinder = nil;
	Self->IsMacro = nil;
	Self->LinkDepth = 0;
	Self->TmpCounter = 0;
	Self->TableId = 0;
	Self->AllocCode = 0;
	Self->MinOpt = 0;
	Self->IsAssigns = 0;
	Self->IsCppInBuilt = 0;
	Self->BlindCasts = 0;
	Self->FlowDisabled = false;
	Self->IsExternalLib = false;
	Self->IsWrapper = false;
	Self->IsNilChecker = 0;
	Self->NilSelf = 0;
	Self->IsInline = false;
	Self->IsKiller = false;
	Self->IsDisabled = false;
	Self->IsAPI = false;
	Self->NoRefCounts = false;
	Self->AutoGeneratedSaver = false;
	Self->HidesProperties = false;
	Self->Badness = 0;
	Self->LinkTo = nil;
	if (Msg) {
		SC__Comp_stFuncs++;
	}
	return Self;
}

Message* SC_Func_ConstructorLinePlace(SCFunction* Self) {
	Message* S = Self->Source;
	if (S) {
		if (JB_Msg_HasPosition(S)) {
			return S;
		}
	}
	SCClass* C = Self->Cls;
	if (C) {
		return C->Source;
	}
	return nil;
}

void SC_Func_CopyParams(SCFunction* Self, Message* List) {
	Message* P = JB_Incr(SC_Func_Prms(Self));
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(List);
	Message* A = JB_Incr(JB_Msg_GiveArg(Self->Source));
	Message* Dot = JB_Incr(JB_Syx_Msg(JB_SyxDot, JB_LUB[784]));
	(JB_Ring_FirstSet(A, Dot));
	JB_Decr(A);
	Message* Name = JB_Incr(JB_Msg_Msg(Dot, JB_SyxThg, JB_LUB[1974]));
	JB_Decr(Name);
	Message* SubPrms = JB_Incr(JB_Msg_Msg(Dot, JB_SyxPrm, JB_LUB[0]));
	{
		Message* S = JB_Incr(((Message*)JB_Ring_First(List)));
		while (S) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(S)));
			Message* _tmPf3 = JB_Incr(JB_Msg_Copy(S, nil));
			JB_Tree_SyntaxAppend(P, _tmPf3);
			JB_Decr(_tmPf3);
			Message* C = JB_Incr(SC_Msg_DeclName(S));
			if (C) {
				Message* _tmPf4 = JB_Incr(JB_Msg_Copy(C, nil));
				JB_Tree_SyntaxAppend(SubPrms, _tmPf4);
				JB_Decr(_tmPf4);
			}
			JB_Decr(C);
			JB_SetRef(S, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(S);
		;
		JB_Decr(Dot);
	}
	;
	JB_Decr(P);
	JB_Decr(SubPrms);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Func_CountCallsToParentAlloc(SCFunction* Self, Message* Root) {
	Message* Rz = nil;
	int FoundCount = 0;
	SCClass* C = Self->Cls;
	if ((!C)) {
		return nil;
	}
	{
		Message* Curr = ((Message*)JB_Ring_First(Root));
		while (Curr) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Curr));
			SCFunction* F = SC_Msg_IsParentConCall(Curr);
			if (F) {
				SCClass* Fcls = F->Cls;
				if ((!((F->Cls == SC_Class_RealSuper(C)) or (F->Cls == C->Super)))) {
					JB_Msg_SyntaxExpect(Curr, JB_LUB[892]);
					return nil;
				}
				if ((!(Rz))) {
					Rz = Curr;
				}
				FoundCount++;
				if (FoundCount >= 2) {
					JB_Msg_SyntaxExpect(Curr, JB_LUB[1032]);
					return nil;
				}
			}
			Curr = _Nf1;
		};
		;
	}
	;
	return Rz;
}

int SC_Func_CreateTypeCast(SCFunction* Self, SCDecl* MyType, Message* Exp, int Loss) {
	JB_Incr(Exp);
	if ((!Exp)) {
		JB_Decr(Exp);
		return kJB_kNeedsTypeCast;
	}
	if (Self->IsDisabled) {
		JB_Msg_SyntaxExpect(Exp, Self->Description);
		JB_Decr(Exp);
		return 0;
	}
	while (JB_Msg_EqualsSyx(Exp, JB_SyxBra, false)) {
		JB_SetRef(Exp->Obj, Self->ReturnType);
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
		JB_SetRef(Exp, _tmPf0);
		JB_Decr(_tmPf0);
		if (JB_Msg_EqualsSyx(Exp, JB_SyxArg, false)) {
			Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Parent(Exp)));
			JB_SetRef(Exp, _tmPf1);
			JB_Decr(_tmPf1);
			break;
		}
	};
	MessagePosition Using = JB_Msg_SyntaxUsing(Exp);
	Message* Cst = JB_Incr(SC_Func_IsSimpleCast(Self));
	if (Cst) {
		JB_SetRef(Cst, JB_Msg_Copy(Cst, nil));
		JB_FreeIfDead(SC_Msg_ReplaceWith(Exp, Cst));
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(Cst)));
		JB_FreeIfDead(SC_Msg_ReplaceWith(_tmPf2, Exp));
		JB_Decr(_tmPf2);
	}
	 else {
		Message* _tmPf3 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, Self->ExportName));
		JB_SetRef(Cst, SC_Msg_WrapWith((_tmPf3), JB_SyxFunc, JB_LUB[0]));
		JB_Decr(_tmPf3);
		(JB_Ring_NextSibSet(Exp, Cst));
		Message* _tmPf4 = JB_Incr(JB_Msg_Msg(Cst, JB_SyxPrm, JB_LUB[0]));
		JB_Tree_SyntaxAppend(_tmPf4, Exp);
		JB_Decr(_tmPf4);
		if (SC_Decl_IsNormalStruct(MyType)) {
			SC_Msg_GetAddressOf(Exp, MyType, false);
		}
		Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_Last(Cst)));
		JB_SetRef(_tmPf5->Obj, Self);
		JB_Decr(_tmPf5);
	}
	JB_Decr(Exp);
	JB_SetRef(Cst->Obj, Self->ReturnType);
	JB_Decr(Cst);
	JB_MsgPos_Destructor((&Using));
	return Loss;
}

void SC_Func_DeclsProtoCleanup(SCFunction* Self, SCClass* fpType, Message* Ch0, bool AssumeSelf, bool Late, Message* Route) {
	SCFunction* Proto = JB_Incr(fpType->FuncProto);
	if ((!Proto)) {
		JB_Msg_SyntaxExpect(Ch0, JB_LUB[1295]);
		JB_Decr(Proto);
		return;
	}
	Message* fProtoParams = JB_Incr(JB_Msg_NeedSyxInt(Proto->Source, JB_SyxPrm, 1));
	JB_Decr(Proto);
	if ((!fProtoParams)) {
		JB_Decr(fProtoParams);
		return;
	}
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Parent(Ch0)));
	Message* P = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	P->Func = JB_SyxPrm;
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Ch0);
		SC_Msg_CopyAllInto(fProtoParams, P, false);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(fProtoParams);
	if (Route) {
		Message* Nxt = JB_Incr(((Message*)JB_Ring_NextSib(Ch0)));
		Message* First = JB_Incr(((Message*)JB_Ring_First(Nxt)));
		JB_Decr(Nxt);
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(First)));
		if (SC_Msg_OperatorIsThing(_tmPf2, JB_LUB[1933])) {
			JB_FreeIfDead(SC_Msg_ReplaceWith(First, Route));
		}
		JB_Decr(First);
		JB_Decr(_tmPf2);
	}
	JB_Tree_Remove(Ch0);
	SCClass* C = JB_Incr(Self->Cls);
	if ((!C)) {
		JB_Decr(C);
		JB_Decr(P);
		return;
	}
	if (Late) {
		Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(P)));
		JB_Tree_Remove(_tmPf3);
		JB_Decr(_tmPf3);
	}
	if ((!AssumeSelf)) {
		Message* D = JB_Incr(JB_Msg_NeedSyx(P, JB_SyxDecl));
		Message* Ch = JB_Incr(JB_Msg_NeedSyx(D, JB_SyxNil));
		if ((!Ch)) {
			JB_Decr(Ch);
			JB_Decr(D);
			JB_Decr(C);
			JB_Decr(P);
			return;
		}
		SCDecl* Decl = JB_Incr(SC_ExtractDecl(Ch, nil, kSC__DeclMode_ProtoParam));
		JB_Decr(Ch);
		if ((!Decl)) {
			JB_Msg_SyntaxExpect(P, nil);
			JB_Decr(Decl);
			JB_Decr(D);
			JB_Decr(C);
			JB_Decr(P);
			return;
		}
		if ((!SC_Decl_MatchesDecl(Decl, C->TypeNormal))) {
			SC_SCObject_Fail(Self, JB_LUB[1167]);
			JB_Decr(Decl);
			JB_Decr(D);
			JB_Decr(C);
			JB_Decr(P);
			return;
		}
		JB_Decr(Decl);
		JB_Tree_Remove(D);
		JB_Decr(D);
	}
	JB_Decr(P);
	JB_Decr(C);
}

SCDecl* SC_Func_DeclsProtoTypeAdd(SCFunction* Self, SCClass* fpType) {
	SCDecl* Dcl = JB_Incr(SC_Decl_Constructor(nil, fpType));
	JB_SetRef(Dcl->IsLookupOnly, Self);
	(SC_Decl_NameSet(Dcl, Self->Name));
	SC_Comp__NewConst(Dcl);
	Dcl->NilDeclared = kSC__NilState_Real;
	JB_SetRef(Self->ProtoDecl, Dcl);
	if (Self->Cls) {
		SC_Base_TryAdd(Self->Parent, Self->Source, Dcl, Self->Name);
	}
	JB_SafeDecr(Dcl);
	return Dcl;
}

void SC_Func_DeclsPrototypeClass(SCFunction* Self, Message* Ch0) {
	SCModule* P = ((SCModule*)JB_Object_FastAs(Self->Parent, &SCModuleData));
	if ((!P)) {
		return;
	}
	SCClass* fpType = SC_Base_FindClassMsg(P, Ch0, kSC__SCNodeFindMode_WantAType);
	if ((!fpType)) {
		return;
	}
	Message* Route = nil;
	if ((!fpType->FuncProto)) {
		SCClass* Task = SC_Base_FindClass(fpType->Modul, JB_LUB[1725], nil, kSC__Base_DontGoUp);
		if (Task) {
			fpType = Task;
			Route = SC_Base_Route(fpType->Modul->Parent, JB_LUB[1725]);
		}
		SCClass* Task_proto = SC_Base_FindClass(fpType->Modul, JB_LUB[1883], nil, kSC__Base_DontGoUp);
		if (Task_proto) {
			fpType = Task_proto;
		}
	}
	SC_Func_DeclsProtoCleanup(Self, fpType, Ch0, false, false, Route);
	JB_FreeIfDead(SC_Func_DeclsProtoTypeAdd(Self, fpType));
}

void SC_Func_DeclsPrototypeInterface(SCFunction* Self, Message* Ch0, SCClass* fpType, bool Late) {
	SC_Func_DeclsProtoCleanup(Self, fpType, Ch0, true, Late, nil);
	if ((!Late)) {
		JB_FreeIfDead(SC_Func_DeclsProtoTypeAdd(Self, fpType));
	}
}

JB_String* SC_Func_Describe(SCFunction* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendString(Fs, JB_LUB[1674]);
	JB_FS_AppendString(Fs, Self->Name);
	JB_FS_AppendByte(Fs, ' ');
	Message* _tmPf0 = JB_Incr(((Message*)JB_Tree_Second(Self->Source)));
	JB_FS_SyntaxAppend(Fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Func_DescribeParamFail(SCFunction* Self, SCParamArray* Params, int Bad) {
	if (SC_PA_MadeError(Params)) {
		return;
	}
	bool IsSelf = (Bad == 0) and (Params->IsDot and Params->IsNotModule);
	Message* P = JB_Incr(SC_PA_SyntaxAccess(Params, Bad));
	if (P) {
		Bad++;
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1386]);
		JB_FS_AppendInt32(_fsf0, Bad);
		JB_FS_AppendString(_fsf0, JB_LUB[290]);
		JB_String* Str = JB_Incr(((JB_String*)JB_Ternary(IsSelf, ((JB_String*)JB_LUB[1388]), ((JB_String*)JB_FS_GetResult(_fsf0)))));
		JB_Decr(_fsf0);
		SCDecl* Type = JB_Incr(SC_TypeOfExpr(P, nil, nil));
		if (Type) {
			JB_String* _tmPf2 = JB_Incr(SC_Decl_RenderTypeName(Type, nil));
			JB_SetRef(Str, JB_Str_OperatorPlus(Str, _tmPf2));
			JB_Decr(_tmPf2);
		}
		 else {
			JB_SetRef(Str, JB_Str_OperatorPlus(Str, JB_LUB[271]));
		}
		JB_Decr(Type);
		if (true) {
			JB_Msg_SyntaxExpect(P, Str);
		}
		JB_Decr(Str);
	}
	 else {
		int64 Num = Bad - IsSelf;
		if (true) {
			FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
			JB_FS_AppendString(_fsf1, JB_LUB[1017]);
			JB_FS_AppendInt64(_fsf1, Num);
			JB_FS_AppendString(_fsf1, JB_LUB[559]);
			SCDecl* _tmPf3 = JB_Incr(((SCDecl*)JB_Array_Value(Self->Args, Bad)));
			JB_FreeIfDead(SC_Decl_Render(_tmPf3, _fsf1));
			JB_Decr(_tmPf3);
			JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf1));
			JB_Decr(_fsf1);
			JB_Msg_SyntaxExpect(Params->Exp, _tmPf4);
			JB_Decr(_tmPf4);
		}
	}
	JB_Decr(P);
	if (true) {
		JB_String* _tmPf6 = JB_Incr(SC_Func_RenderTitle(Self, true, nil));
		JB_String* _tmPf5 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1998], _tmPf6));
		JB_Decr(_tmPf6);
		JB_Msg_SyntaxExpect(Self->Source, _tmPf5);
		JB_Decr(_tmPf5);
	}
}

void SC_Func_Destructor(SCFunction* Self) {
	JB_Clear(Self->LinkTo);
	JB_Clear(Self->Args);
	JB_Clear(Self->Cls);
	JB_Clear(Self->Description);
	JB_Clear(Self->Refs);
	JB_Clear(Self->CounterPart);
	JB_Clear(Self->NextFunc);
	JB_Clear(Self->ASM);
	JB_Clear(Self->ProtoDecl);
	JB_Clear(Self->ProtoType);
	JB_Clear(Self->ReturnType);
	JB_Clear(Self->IsMacro);
	SC_Base_Destructor(Self);
}

SCFunction* SC_Func_Disambiguate(SCFunction* Self, Message* Src) {
	if ((!Self) or (!Self->NextFunc)) {
		return Self;
	}
	{
		SCFunction* Curr = Self;
		while (Curr) {
			Message* S = Curr->Source;
			if (JB_Msg_DeepEquals(S, Src, false)) {
				return Curr;
			}
			Message* Ss = ((Message*)JB_Tree_Second(S));
			if (Ss) {
				if (JB_Msg_DeepEquals(Ss, ((Message*)JB_Tree_Second(Src)), false)) {
					return Curr;
				}
			}
			Curr = Curr->NextFunc;
		};
	}
	;
	return Self;
}

void SC_Func_DoLinkBoth(SCFunction* Self, SCNode* To) {
	if (SC_Func_CanLinkTo(Self, To)) {
		SC_LinkMap__Store((&Self->LinkTo), To);
		if (SC__Comp_InPerry) {
			SC_LinkMap__Store((&To->LinkFrom), Self);
		}
	}
}

void SC_Func_DoLinkTo(SCFunction* Self, SCNode* To) {
	if (SC_Func_CanLinkTo(Self, To)) {
		SC_LinkMap__Store((&Self->LinkTo), To);
	}
}

void SC_Func_DontWantSameReturnType(SCFunction* Self, SCFunction* F) {
	if ((!Self)) {
		return;
	}
	SCDecl* R = JB_Incr(F->ReturnType);
	if ((!R)) {
		debugger;
		JB_Decr(R);
		return;
	}
	if (SC_Decl_MiniMatch(R, Self->ReturnType, 0)) {
		if (true) {
			JB_Msg_SyntaxExpect(Self->Source, JB_LUB[1033]);
		}
		if (true) {
			JB_Msg_SyntaxExpect(F->Source, JB_LUB[1034]);
		}
	}
	JB_Decr(R);
}

bool SC_Func_doRefs(SCFunction* Self) {
	return (!Self->NoRefCounts);
}

void SC_Func_DotFuncToNormalFunc(SCFunction* Self, Message* Dot) {
	JB_Msg_BecomeStr(Dot, JB_SyxFunc, JB_LUB[0]);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(Dot)));
	Message* First = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(Dot)));
	Message* L = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	JB_SetRef(L->Obj, Self);
	L->Func = JB_SyxPrm;
	if (JB_Object_FastIsa(First->Obj, &SCModuleData)) {
		JB_Tree_Remove(First);
	}
	 else {
		(JB_Ring_FirstSet(L, First));
	}
	JB_Decr(First);
	JB_Decr(L);
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Dot);
		Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Self->ExportName));
		(JB_Ring_FirstSet(Dot, (_tmPf3)));
		JB_Decr(_tmPf3);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	if (Self->IsKiller) {
		SC_Msg_LastInBlock(Dot, kSC__SCBlockage_Quit);
	}
}

bool SC_Func_EqualOrMoreSpecific(SCFunction* Self, SCFunction* F) {
	if ((!(((bool)Self) and ((bool)F)))) {
		return nil;
	}
	if (((bool)(F->ReturnType)) != ((bool)(Self->ReturnType))) {
		return nil;
	}
	if (JB_Array_Size(F->Args) != JB_Array_Size(Self->Args)) {
		return nil;
	}
	SCDecl* R = F->ReturnType;
	if (R) {
		if ((!SC_Decl_MatchesDecl(R, Self->ReturnType))) {
			return nil;
		}
	}
	{
		Array* _LoopSrcf2 = Self->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* A = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (A == nil) {
				break;
			}
			int I = _if0;
			if ((!SC_Decl_MatchesDecl(((SCDecl*)JB_Array_Value(F->Args, I)), A))) {
				return nil;
			}
			_if0++;
		};
	}
	;
	return true;
}

JB_String* SC_Func_ExportNameBuilder(SCFunction* Self, JB_String* CppPart) {
	JB_Incr(CppPart);
	JB_String* Rz = JB_Incr(JB_LUB[0]);
	if ((!JB_Str_Exists(CppPart))) {
		JB_SetRef(CppPart, Self->Name);
		if (((bool)Self->IsAssigns) and (!(JB_Str_OperatorEndsWith(CppPart, JB_LUB[907])))) {
			JB_SetRef(CppPart, JB_Str_OperatorPlus(CppPart, JB_LUB[1213]));
		}
	}
	JB_String* SubSection = JB_Incr(JB_LUB[0]);
	JB_String* AfterSub = JB_Incr(JB_LUB[0]);
	SCClass* C = JB_Incr(Self->Cls);
	if (C) {
		JB_SetRef(SubSection, SC_Mod_CppPath(C->Modul));
		JB_SetRef(AfterSub, JB_LUB[1425]);
		if ((SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor)) and (!(JB_Str_ContainsString(CppPart, JB_LUB[784])))) {
			JB_SetRef(CppPart, JB_Str_OperatorPlus(JB_LUB[784], CppPart));
		}
	}
	 else {
		SCNode* L = JB_Incr(Self->Parent);
		if (JB_Object_FastIsa(L, &SCModuleData)) {
			if (JB_Str_Exists(((SCModule*)L)->CppPart)) {
				JB_SetRef(SubSection, SC_Mod_CppPath(((SCModule*)L)));
				JB_SetRef(AfterSub, JB_LUB[1439]);
			}
		}
		JB_Decr(L);
	}
	JB_Decr(C);
	SCImport* P = JB_Incr(Self->Project);
	if (P) {
		JB_String* Wanted = JB_Incr(P->Mod->ExportName);
		if ((!JB_Str_Equals(Wanted, SubSection, false))) {
			JB_SetRef(Rz, (JB_Str_OperatorPlus(Wanted, JB_LUB[1425])));
		}
		JB_Decr(Wanted);
	}
	JB_Decr(P);
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(AfterSub, CppPart));
	JB_Decr(AfterSub);
	JB_Decr(CppPart);
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(SubSection, _tmPf1));
	JB_Decr(SubSection);
	JB_Decr(_tmPf1);
	JB_SetRef(Rz, JB_Str_OperatorPlus(Rz, (_tmPf0)));
	JB_Decr(_tmPf0);
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Func_FillInDestructor(SCFunction* Self) {
	Message* S = SC_Func_SourceArg(Self);
	Message* First = SC_Msg_FindDestructor(S);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(S);
	{
		Array* _LoopSrcf3 = Self->Cls->Properties;
		int _if1 = 0;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1));
			if (D == nil) {
				break;
			}
			if (SC_Decl_IsReffable(D, true)) {
				SC_Msg_AddBefore(S, First, SC_Decl_RefDestructor(D));
			}
			 else {
				SCFunction* Destr = SC_Decl_HasStructDestructor(D);
				if (Destr) {
					Message* Addr = SC_Decl_DeclToAddr(D, SC_Func_Self(Self));
					SC_Msg_AddBefore(S, First, SC_Refs__RefDestructorMsg(Addr, Destr));
				}
			}
			_if1++;
		};
	}
	;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_FillInMissingConstructorDefaults(SCFunction* Self, Message* Root, Message* AfterHere) {
	SCClass* Cls = Self->Cls;
	if ((!Cls)) {
		return;
	}
	Message* Oof = SC_Func_ConstructorLinePlace(Self);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Oof);
	{
		Array* _LoopSrcf3 = Cls->Properties;
		int _if1 = JB_Array_Size(_LoopSrcf3) - 1;
		while (true) {
			SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1));
			if (D == nil) {
				break;
			}
			if (!(SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_PropertyWasConstructed))) {
				Message* Made = SC_Func_NewDefaultRel(Self, Oof, D);
				SC_Msg_InsertAfter(Root, Made, AfterHere);
			}
			_if1--;
		};
	}
	;
	while (Cls) {
		{
			Array* _LoopSrcf6 = Cls->Properties;
			int _if4 = 0;
			while (true) {
				SCDecl* D = ((SCDecl*)JB_Array_Value(_LoopSrcf6, _if4));
				if (D == nil) {
					break;
				}
				(SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_PropertyWasConstructed, (!true)));
				_if4++;
			};
		}
		;
		Cls = Cls->Super;
	};
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_FillInSaver(SCFunction* Self, JB_String* Name) {
	if ((!Self->AutoGeneratedSaver)) {
		return;
	}
	SCClass* Cls = JB_Incr(Self->Cls);
	bool IsSave = (JB_Str_ContainsString(Name, JB_LUB[1204]));
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	Self->BlindCasts = 0;
	{
		Array* _LoopSrcf3 = JB_Incr(Cls->Properties);
		int _if1 = 0;
		while (true) {
			SCDecl* Item = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1)));
			if (Item == nil) {
				JB_Decr(Item);
				break;
			}
			JB_String* Type = JB_Incr(SC_Decl_TryUseSaveable(Item, IsSave, Cls));
			if ((!JB_Str_Exists(Type))) {
				_if1++;
				JB_Decr(Type);
				JB_Decr(Item);
				continue;
			}
			JB_FS_AppendString(Fs, JB_LUB[42]);
			int Count = Item->C_Array;
			DataTypeCode T = Item->Type->TypeInfo;
			bool AppendAsData = (JB_TC_ExistsButBadlyNamedOrDesigned(T) and JB_TC_IsFloat(T));
			if ((!AppendAsData) and ((bool)Count)) {
				//;
				JB_FS_AppendString(Fs, JB_LUB[1661]);
				JB_FS_AppendInt32(Fs, Count);
				JB_FS_AppendString(Fs, JB_LUB[283]);
				//;
			}
			if (AppendAsData) {
				JB_SetRef(Type, JB_LUB[1889]);
				if ((!(Count))) {
					Count = 1;
				}
			}
			if (IsSave) {
				if (JB_Str_Equals(Type, JB_LUB[1972], false)) {
					JB_FS_AppendByte(Fs, '.');
					JB_FS_AppendString(Fs, Item->Name);
					JB_FS_AppendString(Fs, JB_LUB[360]);
					if (Count) {
						JB_FS_AppendString(Fs, JB_LUB[1401]);
					}
				}
				 else {
					JB_FS_AppendString(Fs, JB_LUB[1920]);
					JB_FS_AppendString(Fs, Type);
					JB_FS_AppendByte(Fs, '(');
					if (AppendAsData) {
						JB_FS_AppendString(Fs, JB_LUB[265]);
					}
					JB_FS_AppendByte(Fs, '.');
					JB_FS_AppendString(Fs, Item->Name);
					if (AppendAsData) {
						JB_FS_AppendString(Fs, JB_LUB[293]);
						JB_FS_AppendInt32(Fs, JB_TC_ByteSize(T) * Count);
					}
					 else if ((bool)Count) {
						JB_FS_AppendString(Fs, JB_LUB[1401]);
					}
					JB_FS_AppendByte(Fs, ')');
				}
			}
			 else if (AppendAsData) {
				JB_FS_AppendString(Fs, JB_LUB[1763]);
				JB_FS_AppendString(Fs, Item->Name);
				JB_FS_AppendString(Fs, JB_LUB[293]);
				JB_FS_AppendInt32(Fs, JB_TC_ByteSize(T) * Count);
				JB_FS_AppendString(Fs, JB_LUB[279]);
			}
			 else {
				JB_FS_AppendByte(Fs, '.');
				JB_FS_AppendString(Fs, Item->Name);
				if (Count) {
					JB_FS_AppendString(Fs, JB_LUB[1401]);
				}
				if (JB_Str_Equals(Type, JB_LUB[1972], false)) {
					JB_FS_AppendString(Fs, JB_LUB[359]);
				}
				 else {
					JB_FS_AppendString(Fs, JB_LUB[155]);
					JB_FS_AppendString(Fs, JB_LUB[1762]);
					JB_FS_AppendString(Fs, Type);
					SCClass* It = JB_Incr(Item->Type);
					if ((SC_Class_NumericCount(It) <= 1) and ((!JB_Str_Equals(Type, Self->Name, false)))) {
						JB_FS_AppendByte(Fs, '|');
						JB_FS_AppendString(Fs, It->Name);
						JB_FS_AppendByte(Fs, '|');
					}
					JB_Decr(It);
				}
			}
			JB_Decr(Item);
			JB_Decr(Type);
			if ((!AppendAsData) and ((bool)Count)) {
				JB_FS_AppendString(Fs, JB_LUB[84]);
			}
			_if1++;
		};
		JB_Decr(_LoopSrcf3);
	}
	;
	JB_Decr(Cls);
	MessagePosition Using = JB_Msg_SyntaxUsing(Self->Source);
	JB_String* SrcStr = JB_Incr(JB_FS_GetResult(Fs));
	JB_Decr(Fs);
	Message* Msg = JB_Incr(JB_Str_Parse(SrcStr, JB_SyxArg, true));
	JB_Decr(SrcStr);
	Message* _tmPf6 = JB_Incr(SC_Func_SourceArg(Self));
	Message* Dest = JB_Incr(_tmPf6);
	{
		Message* Line = JB_Incr(((Message*)JB_Ring_First(Msg)));
		while (Line) {
			Message* _Nf5 = JB_Incr((((Message*)JB_Ring_NextSib(Line))));
			JB_Tree_SyntaxAppend(Dest, Line);
			JB_SetRef(Line, _Nf5);
			JB_Decr(_Nf5);
		};
		JB_Decr(Line);
		;
		JB_Decr(_tmPf6);
	}
	;
	JB_Decr(Dest);
	JB_Decr(Msg);
	JB_MsgPos_Destructor((&Using));
}

Message* SC_Func_FindCallParents(SCFunction* Self) {
	Message* Rz = nil;
	Message* S = SC_Func_SourceArg(Self);
	if (S) {
		Rz = SC_Func_CountCallsToParentAlloc(Self, S);
	}
	return Rz;
}

Message* SC_Func_FindCppWrapperFunc(SCFunction* Self, Message* Place) {
	{
		Message* Cpp = ((Message*)JB_Ring_First(Place));
		while (Cpp) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Cpp));
			if ((JB_Str_OperatorStarts(Cpp->Name, JB_LUB[1569])) and SC_Func_FoundOneCpp(Self, Cpp->Name)) {
				return Cpp;
			}
			Cpp = _Nf1;
		};
		;
	}
	;
	return nil;
}

int SC_Func_FindDepths(SCFunction* Self) {
	int Rz = 0;
	//;
	if (Self->LinkDepth) {
		return Self->LinkDepth;
	}
	Rz = 1;
	{
		Array* _LoopSrcf2 = Self->LinkTo;
		int _if0 = 0;
		while (true) {
			SCNode* F = ((SCNode*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			if (JB_Object_FastIsa(F, &SCFunctionData)) {
				if ((F == Self) or ((bool)((SCFunction*)F)->DepthFinder)) {
					SC_Func_MarkRecursive(Self, ((SCFunction*)F));
				}
				 else {
					((SCFunction*)F)->DepthFinder = Self;
					int D = SC_Func_FindDepths(((SCFunction*)F)) + 1;
					Rz = JB_int_OperatorMax(Rz, D);
					((SCFunction*)F)->DepthFinder = nil;
				}
			}
			_if0++;
		};
	}
	;
	Self->LinkDepth = Rz;
	return Rz;
}

void SC_Func_FixCnj(SCFunction* Self, Message* Exp) {
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
	SC_Func_FixCnjSub(Self, Exp);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_FixCnjSub(SCFunction* Self, Message* Exp) {
	if (JB_Msg_EqualsSyx(Exp, JB_SyxARel, false)) {
		JB_Msg_BecomeStr(Exp, JB_SyxTRel, JB_LUB[0]);
		JB_Msg_AppendSyx(Exp, JB_SyxOpp, JB_LUB[1896]);
	}
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* Ch = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
	JB_String* Name = JB_Incr(_tmPf2->Name);
	JB_Decr(_tmPf2);
	bool CreatesError = ((JB_Str_Equals(Name, JB_LUB[1635], false)) or (JB_Str_Equals(Name, JB_LUB[1540], false)));
	bool DoesReturn = ((!JB_Str_Equals(Name, JB_LUB[1765], false)) and (!JB_Str_Equals(Name, JB_LUB[1540], false)));
	if ((!(CreatesError or ((JB_Str_Equals(Name, JB_LUB[1590], false)) or ((JB_Str_Equals(Name, JB_LUB[1896], false)) or ((JB_Str_Equals(Name, JB_LUB[1565], false)) or (JB_Str_Equals(Name, JB_LUB[1765], false)))))))) {
		if (true) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[1042]);
		}
		JB_SetRef(Ch->Name, JB_LUB[1896]);
		JB_SetRef(Name, JB_LUB[1896]);
	}
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
	Message* Nxt = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	if (((JB_Msg_EqualsSyx(Ch, JB_SyxRel, false))) and ((JB_Msg_OperatorIn(Exp, JB_SyxArg) or JB_Msg_OperatorIn(Exp, JB_SyxDecl)) and ((JB_Str_Equals(((Message*)JB_Tree_Second(Ch))->Name, JB_LUB[586], false))))) {
		Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(Ch)));
		if ((!SC_Msg_IsAssignable(_tmPf4))) {
			FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
			JB_FS_AppendString(_fsf0, JB_LUB[1362]);
			JB_FS_SyntaxAppend(_fsf0, Ch);
			JB_FS_AppendString(_fsf0, JB_LUB[282]);
			JB_FS_AppendString(_fsf0, Name);
			JB_FS_AppendString(_fsf0, JB_LUB[621]);
			JB_String* _tmPf5 = JB_Incr(JB_FS_GetResult(_fsf0));
			JB_Decr(_fsf0);
			JB_Msg_SyntaxExpect(Exp, _tmPf5);
			JB_Decr(_tmPf5);
			JB_Decr(_tmPf4);
			JB_Decr(Nxt);
			JB_Decr(Name);
			JB_Decr(Ch);
			return;
		}
		JB_Decr(_tmPf4);
		JB_FreeIfDead(SC_Msg_ReplaceWith(Exp, Ch));
		Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_Last(Ch)));
		Message* RightSide = JB_Incr(_tmPf6);
		JB_Decr(_tmPf6);
		Message* Bra = JB_Incr(JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
		JB_FreeIfDead(SC_Msg_ReplaceWith(RightSide, Bra));
		JB_Tree_SyntaxAppend(Bra, RightSide);
		JB_Decr(RightSide);
		JB_FreeIfDead(((Message*)JB_Tree_WrapWith(Bra, Exp)));
		Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_First(Bra)));
		JB_FreeIfDead(SC_Msg_ReplaceWith(Bra, _tmPf7));
		JB_Decr(Bra);
		JB_Decr(_tmPf7);
	}
	if (JB_Str_Equals(Name, JB_LUB[1896], false)) {
		JB_SetRef(Nxt->Name, JB_LUB[1898]);
		JB_SetRef(Name, JB_LUB[1898]);
	}
	JB_Decr(Nxt);
	Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	JB_SetRef(Ch, _tmPf8);
	JB_Decr(_tmPf8);
	JB_Tree_Remove(Ch);
	JB_FreeIfDead(SC_Msg_ReplaceWith(Exp, Ch));
	Message* Thg = nil;
	Message* Pp = nil;
	Message* RemoveMe = nil;
	bool UsePrev = false;
	if ((SC_Msg_OperatorIsBRel(Ch, JB_LUB[298])) and ((JB_Msg_OperatorIn(Ch, JB_SyxArg)) and ((({
		Message* _tmPf10 = JB_Incr(((Message*)JB_Ring_First(Ch)));
		bool _tmPf9 = JB_Msg_EqualsSyx(_tmPf10, JB_SyxThg, false);
		JB_Decr(_tmPf10);
		 _tmPf9;
	}))))) {
		Message* _tmPf11 = JB_Incr(((Message*)JB_Ring_First(Ch)));
		JB_SetRef(Thg, JB_Syx_OperatorPlus(JB_SyxThg, _tmPf11->Name));
		JB_Decr(_tmPf11);
		JB_SetRef(Pp, Ch);
	}
	 else {
		Message* _tmPf12 = JB_Incr(SC_Msg_NiceParent(Ch));
		JB_SetRef(Pp, _tmPf12);
		JB_Decr(_tmPf12);
		bool Done = false;
		if ((((({
			Message* _tmPf14 = JB_Incr(SC_Msg_UnBra(Ch));
			bool _tmPf13 = JB_Msg_EqualsSyx(_tmPf14, JB_SyxThg, false);
			JB_Decr(_tmPf14);
			 _tmPf13;
		})))) or (((JB_Msg_EqualsSyx(Pp, JB_SyxArg, false))) and (!CreatesError))) {
			Message* _tmPf15 = JB_Incr(JB_Msg_Copy(Ch, nil));
			JB_SetRef(Thg, _tmPf15);
			JB_Decr(_tmPf15);
			if (JB_Msg_EqualsSyx(Pp, JB_SyxArg, false)) {
				JB_SetRef(RemoveMe, Ch);
			}
			Message* _tmPf16 = JB_Incr(SC_Msg_ParentPoint(Ch));
			JB_SetRef(Pp, _tmPf16);
			JB_Decr(_tmPf16);
			UsePrev = true;
			Done = ((bool)1);
		}
		 else if (SC_Msg_IsSetRel(Pp) and (({
			Message* _tmPf18 = JB_Incr(((Message*)JB_Ring_First(Pp)));
			bool _tmPf17 = JB_Msg_EqualsSyx(_tmPf18, JB_SyxThg, false);
			JB_Decr(_tmPf18);
			 _tmPf17;
		}))) {
			bool IsDecl = (JB_Msg_OperatorIn(Pp, JB_SyxDecl));
			if (IsDecl or ((!JB_Str_Equals(Name, JB_LUB[1765], false)))) {
				Done = ((bool)1);
				Message* _tmPf19 = JB_Incr(((Message*)JB_Ring_First(Pp)));
				JB_SetRef(Thg, JB_Syx_OperatorPlus(JB_SyxThg, _tmPf19->Name));
				JB_Decr(_tmPf19);
				if (IsDecl) {
					Message* _tmPf20 = JB_Incr(((Message*)JB_Ring_Parent(Pp)));
					JB_SetRef(Pp, _tmPf20);
					JB_Decr(_tmPf20);
				}
			}
		}
		if ((!Done)) {
			Message* _tmPf21 = JB_Incr(SC_Func__TypedTempMoveOut(Ch, JB_LUB[0]));
			JB_SetRef(Pp, _tmPf21);
			JB_Decr(_tmPf21);
			Message* _tmPf22 = JB_Incr(SC_Msg_DeclName(Pp));
			JB_SetRef(Thg, JB_Syx_OperatorPlus(JB_SyxThg, _tmPf22->Name));
			JB_Decr(_tmPf22);
		}
	}
	JB_Decr(Ch);
	Message* Arg = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
	if (CreatesError) {
		Message* _tmPf24 = JB_Incr(((Message*)JB_Ring_First(Exp)));
		Message* _tmPf23 = JB_Incr(((Message*)JB_Ring_NextSib(_tmPf24)));
		JB_Decr(_tmPf24);
		Message* L = JB_Incr(_tmPf23);
		JB_Decr(_tmPf23);
		if ((!JB_Str_Equals(Name, JB_LUB[1636], false))) {
			JB_SetRef(L, SC_Msg_ExpectParamsTransform(L, Exp->Position, Exp, JB_LUB[0]));
		}
		 else {
			if (true) {
				JB_Msg_SyntaxExpect(Exp, nil);
			}
		}
		JB_Tree_SyntaxAppend(Arg, L);
		JB_Decr(L);
	}
	if (JB_Str_Equals(Name, JB_LUB[1590], false)) {
		JB_Msg_AppendSyx(Arg, JB_SyxTmp, JB_LUB[1592]);
	}
	if (((JB_Str_Equals(Name, JB_LUB[1565], false))) and ({
		Message* _tmPf26 = JB_Incr(SC_Func_SourceArg(Self));
		bool _tmPf25 = SC_Msg_WithinLoop(Pp, _tmPf26);
		JB_Decr(_tmPf26);
		 _tmPf25;
	})) {
		JB_Msg_AppendSyx(Arg, JB_SyxTmp, JB_LUB[1565]);
	}
	 else if (((JB_Str_Equals(Name, JB_LUB[1765], false))) and ({
		Message* _tmPf28 = JB_Incr(SC_Func_SourceArg(Self));
		bool _tmPf27 = SC_Msg_WithinLoop(Pp, _tmPf28);
		JB_Decr(_tmPf28);
		 _tmPf27;
	})) {
		JB_Msg_AppendSyx(Arg, JB_SyxTmp, JB_LUB[1634]);
	}
	 else if (DoesReturn) {
		Message* _tmPf29 = JB_Incr(JB_Msg_Msg(Arg, JB_SyxTmp, JB_LUB[1898]));
		JB_Msg_AppendSyx(_tmPf29, JB_SyxQues, JB_LUB[1810]);
		JB_Decr(_tmPf29);
	}
	JB_Decr(Name);
	JB_SetRef(Thg, SC_Msg_Negate(Thg));
	Message* If_ = JB_Incr(JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1697]));
	JB_Tree_SyntaxAppend(If_, Thg);
	JB_Decr(Thg);
	JB_Tree_SyntaxAppend(If_, Arg);
	JB_Decr(Arg);
	if (UsePrev) {
		(JB_Ring_PrevSibSet(Pp, If_));
	}
	 else {
		(JB_Ring_NextSibSet(Pp, If_));
	}
	JB_Decr(Pp);
	JB_Decr(If_);
	JB_Tree_Remove(RemoveMe);
	JB_Decr(RemoveMe);
}

void SC_Func_FLookupSet(SCFunction* Self, SCNode* Value) {
	if (JB_Object_FastIsa(Value, &SCClassData)) {
		JB_SetRef(Self->Cls, Value);
		Self->Parent = ((SCClass*)Value)->Modul;
	}
	 else {
		Self->Parent = SC_Base_ProjectFix(Value);
	}
	if (SC__Imp_Curr) {
		Self->Project = SC__Imp_Curr;
		return;
	}
	Message* S = JB_Incr(Self->Source);
	if (S) {
		SCFile* F = JB_Incr(SC_Msg_SCFile(S));
		if (JB_File_SyntaxCast(F)) {
			Self->Project = F->Proj;
		}
		JB_Decr(F);
	}
	JB_Decr(S);
}

bool SC_Func_FoundOneCpp(SCFunction* Self, JB_String* N) {
	if (JB_Str_Equals(N, JB_LUB[1574], false)) {
		Self->NoAutoComplete = 1;
		Self->IsCppInBuilt = 2;
		return true;
	}
	if (JB_Str_Equals(N, JB_LUB[1571], false)) {
		Self->NoAutoComplete = 1;
		Self->IsCppInBuilt = 1;
		return true;
	}
	if (JB_Str_Equals(N, JB_LUB[1572], false)) {
		Self->NoAutoComplete = 1;
		Self->IsExternalLib = true;
		return true;
	}
	return false;
}

void SC_Func_FuncDecls(SCFunction* Self) {
	JB_SetRef(SC__Func_CurrFunc, Self);
	Message* P = JB_Incr(((Message*)JB_Tree_Second(Self->Source)));
	if ((!P)) {
		JB_Decr(P);
		return;
	}
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor)) {
		SC_Func_AddConstructorReturn(Self, P);
	}
	Message* Fc = JB_Incr(((Message*)JB_Ring_First(P)));
	if (Fc) {
		if ((Fc->Func == JB_SyxThg) or (Fc->Func == JB_SyxDot)) {
			SC_Func_DeclsPrototypeClass(Self, Fc);
		}
	}
	JB_Decr(Fc);
	Message* A = JB_Incr(SC_Func_SourceArg(Self));
	SCArg* Space = JB_Incr(SC_Msg_SCArg(A, Self, nil));
	JB_Decr(A);
	if ((JB_Msg_EqualsSyx(P, JB_SyxList, false)) or ((JB_Msg_EqualsSyx(P, JB_SyxBra, false)) or (JB_Msg_EqualsSyx(P, JB_SyxPrm, false)))) {
		P->Func = JB_SyxPrm;
		SC_Func_CollectDeclsParams(Self, P, Space);
	}
	JB_Decr(P);
	SC__Func_FuncStats[JB_int_OperatorMin(JB_Array_Size(Self->Args), 11)]++;
	if (((bool)Space) and (!Self->Cls)) {
		SCNode* L = JB_Incr(Self->Parent);
		if ((JB_Object_FastIsa(L, &SCModuleData)) and (SC_Mod_IsProperModule(((SCModule*)L)))) {
			SC_Mod_AddModuleToFunc(((SCModule*)L), Space);
		}
		JB_Decr(L);
	}
	JB_Decr(Space);
	if (Self->AllocCode) {
		SCDecl* R = JB_Incr(Self->ReturnType);
		if (R) {
			if (R == R->Type->TypeNormal) {
				JB_SetRef(R, SC_Decl_CopyDecl(R, false));
				JB_SetRef(Self->ReturnType, R);
			}
			R->AllocSource = Self->AllocCode;
		}
		JB_Decr(R);
	}
}

bool SC_Func_HiderMatch(SCFunction* Self, bool IsAssigns) {
	if (((bool)Self) and ((bool)Self->IsAssigns)) {
		return IsAssigns;
	}
	return false;
}

void SC_Func_Init_Sub(SCFunction* Self, Message* Node, SCNode* Name_space) {
	Message* Arg = JB_Incr(SC_Msg_NormaliseFunc(Node, nil));
	JB_SetRef(Node->Obj, Self);
	if (Name_space) {
		if ((!JB_Msg_SyntaxEquals(Node, JB_LUB[1733], false))) {
			JB_Array_SyntaxAppend(SC__Comp_FuncList, Self);
		}
		(SC_Func_FLookupSet(Self, Name_space));
		SCModule* _tmPf0 = JB_Incr(SC_Base_SpaceModule(Name_space, nil));
		if ((!_tmPf0)) {
			JB_Decr(_tmPf0);
			JB_Decr(Arg);
			return;
		}
		JB_SetRef(Self->Refs, _tmPf0->DefaultRefs);
		JB_Decr(_tmPf0);
		JB_SetRef(SC__Func_CurrFunc, Self);
	}
	SC_Func_ParseName(Self, Node);
	if (true) {
		JB_ErrorReceiver* _usingf1 = JB_Incr(JB_Rec_SyntaxUsing(JB_ErrorDelayer));
		SC_Func_PreProcessExpects(Self);
		SC_Func_TranStrings(Self);
		JB_Rec_SyntaxUsingComplete(_usingf1);
		JB_Decr(_usingf1);
	}
	SC_Func_PreRead(Self, Arg);
	SC_Func_SetBlindCasts(Self, Name_space);
	if (JB_Msg_SyntaxEquals(Node, JB_LUB[1775], false)) {
		SC_Func_MakeMacro(Self, Arg);
	}
	JB_Decr(Arg);
}

SCObject* SC_Func_InsertIn(SCFunction* Self, SCNode* Parent, JB_String* Name) {
	JB_SetRef(Self->Name, Name);
	if (JB_Object_FastIsa(Parent, &SCClassData)) {
		JB_SetRef(Self->Cls, Parent);
		Self->Parent = ((SCClass*)Parent)->Modul;
	}
	 else {
		JB_SetRef(Self->Cls, nil);
		Self->Parent = Parent;
	}
	return SC_Base_SyntaxAccess(Parent, Name);
}

bool SC_Func_IsAllocOrNew(SCFunction* Self) {
	return SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor);
}

bool SC_Func_IsARealSpdFunc(SCFunction* Self) {
	if (Self->IsWrapper or ((bool)Self->IsMacro)) {
		return false;
	}
	JB_SetRef(SC__Func_CurrFunc, Self);
	return true;
}

bool SC_Func_IsBehaviour(SCFunction* Self) {
	SCDecl* _tmPf0 = Self->ProtoDecl;
	if ((!_tmPf0)) {
		return nil;
	}
	return SC_Class_IsInterface(_tmPf0->Type);
}

bool SC_Func_IsConstructorOnModule(SCFunction* Self, SCFunction* Old) {
	if (SC_Func_SyntaxIs(Self, kSC__FunctionType_Constructor)) {
		SCNode* P = Old->Parent;
		return P == Self->Cls->Modul;
	}
	return false;
}

void SC_Func_IsCppInBuiltSet(SCFunction* Self, int Value) {
	if (((bool)Value) and (!Self->IsCppInBuilt)) {
		SC_Func_MakeParamsReal(Self);
	}
	Self->IsCppInBuilt = Value;
}

bool SC_Func_IsReal(SCFunction* Self) {
	return (Self != nil) and (!Self->IsMacro);
}

Message* SC_Func_IsSimpleCast(SCFunction* Self) {
	if ((!Self->Source)) {
		JB_Object_SyntaxExpect(nil);
		return nil;
	}
	Message* Found = ((Message*)JB_Ring_First(JB_Msg_Last(Self->Source, JB_SyxArg)));
	if ((!(((bool)Found) and (JB_Tree_IsLast(Found) and (SC_Msg_OperatorIsTmp(Found, JB_LUB[1898])))))) {
		return nil;
	}
	Found = ((Message*)JB_Ring_First(Found));
	if ((!((JB_Tree_IsLast(Found)) and (((JB_Msg_EqualsSyx(Found, JB_SyxType, false))) and (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(Found)), JB_LUB[1933])))))) {
		return nil;
	}
	return Found;
}

bool SC_Func_IsUnused(SCFunction* Self) {
	SCImport* P = Self->Project;
	if (P) {
		if ((!P->WarnUnusedFuncs)) {
			return nil;
		}
	}
	return (!Self->MyReacher) and ((!Self->IsDisabled) and ((!SC_SCObject_IsVisible(Self)) and (((!SC_Func_SyntaxIs(Self, kSC__FunctionType_ConOrDes))) and (!SC_Func_IsAllocOrNew(Self)))));
}

SCFunction* SC_Func_Last(SCFunction* Self) {
	SCFunction* Rz = nil;
	Rz = Self;
	while (true) {
		SCFunction* _tmPf0 = Rz->NextFunc;
		if ((!_tmPf0)) {
			break;
		}
		Rz = _tmPf0;
	};
	return Rz;
}

SCDecl* SC_Func_MacroFix(SCFunction* Self, SCDecl* Contains, SCNode* Name_space, SCParamArray* Incoming) {
	SCDecl* Rz = nil;
	Message* Orig = JB_Incr(Incoming->Exp);
	if ((!Orig)) {
		debugger;
		JB_Decr(Orig);
		JB_Decr(Rz);
		return nil;
	}
	Array* R = JB_Incr(SC_PA_CopyArgs(Incoming));
	JB_Msg_BecomeMacro(Orig, Self->IsMacro, R);
	JB_Decr(R);
	SC_Msg_MacroFixSub(Orig, Contains);
	JB_SetRef(Rz, SC_TypeOfExpr(Orig, Name_space, nil));
	JB_Decr(Orig);
	if ((!(Rz))) {
		JB_SetRef(Rz, JB_TypeVoid);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Func_MakeMacro(SCFunction* Self, Message* Arg) {
	Message* C = ((Message*)JB_Ring_First(Arg));
	Message* Prm = ((Message*)JB_Ring_PrevSib(Arg));
	if ((!(((bool)C) and (!((Message*)JB_Ring_NextSib(C)))))) {
		SC_SCObject_Fail(Self, JB_LUB[1005]);
	}
	if (JB_Ring_HasChildren(Prm)) {
		JB_Str_SyntaxExpect(JB_LUB[1004]);
	}
	JB_SetRef(Self->IsMacro, JB_Macro_ConstructorMsg(nil, C));
}

void SC_Func_MakeNilChecker(SCFunction* Self, Message* Msg) {
	SC_Func_NilSelff(Self, Msg, kSC__NilState_Optional);
	Self->IsNilChecker = 1;
}

void SC_Func_MakeParamsReal(SCFunction* Self) {
	{
		Array* _LoopSrcf2 = Self->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* A = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (A == nil) {
				break;
			}
			int I = _if0;
			if (SC_Decl_CouldUpgradeToReal(A)) {
				(JB_Array_ValueSet(Self->Args, I, SC_Decl_DefaultToReal(A)));
			}
			_if0++;
		};
	}
	;
	SCDecl* R = Self->ReturnType;
	if (R) {
		if (SC_Decl_CouldUpgradeToReal(R)) {
			JB_SetRef(Self->ReturnType, SC_Decl_DefaultToReal(R));
		}
	}
}

JB_String* SC_Func_MakeProtoClassName(SCFunction* Self, JB_String* Start) {
	JB_String* Name = JB_Incr(Start);
	SCNode* P = Self->Parent;
	while (P) {
		if (JB_Object_FastIsa(P, &SCModuleData)) {
			SCClass* CurrCls = ((SCModule*)P)->Cls;
			if ((!CurrCls)) {
				break;
			}
			JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1425], Name));
			JB_SetRef(Name, JB_Str_OperatorPlus(CurrCls->Name, _tmPf0));
			JB_Decr(_tmPf0);
		}
		P = P->Parent;
	};
	if ((!JB_Ind_SyntaxCast(JB_Str_FindByte(Name, '_', 0, JB_int__Max())))) {
		JB_SetRef(Name, JB_Str_OperatorPlus(JB_LUB[867], Name));
	}
	JB_SafeDecr(Name);
	return Name;
}

void SC_Func_MarkRecursive(SCFunction* Self, SCFunction* EndAt) {
	SCFunction* S = Self;
	while (true) {
		(SC_Func_SyntaxIsSet(S, kSC__FunctionType_Recursive, true));
		if (S == EndAt) {
			return;
		}
		S = S->DepthFinder;
		if ((!((S != nil) and (S != EndAt)))) {
			return;
		}
	};
}

Message* SC_Func_NewDefaultRel(SCFunction* Self, Message* Place, SCDecl* D) {
	if ((!SC_Decl_IsCArray(D))) {
		Message* Def = D->Default;
		if ((!(Def))) {
			Def = SC_Decl_CreateDefault(D, Place, true);
		}
		return SC_NewEqRelWithMsgMsg(SC_Decl_DeclToDot(D, SC_Func_Self(Self)), Def);
	}
	return nil;
}

void SC_Func_NilSelff(SCFunction* Self, Message* Where, NilState V) {
	if ((Self->NilSelf)) {
		JB_Msg_SyntaxExpect(Where, JB_LUB[632]);
		return;
	}
	Self->NilSelf = V;
}

SCFunction* SC_Func_ParamlessConstructor(SCFunction* Self) {
	{
		SCFunction* F = Self;
		while (F) {
			Message* Prm = JB_Msg_NeedSyxInt(F->Source, JB_SyxPrm, 1);
			Message* Last = ((Message*)JB_Ring_Last(Prm));
			if ((!Last)) {
				return F;
			}
			if ((JB_Msg_EqualsSyx(Last, JB_SyxDecl, false)) and (JB_Tree_SyntaxEquals(Last, 1, false))) {
				return F;
			}
			F = F->NextFunc;
		};
	}
	;
	return nil;
}

JB_String* SC_Func_ParamUniquer(SCFunction* Self, JB_String* S) {
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(Fs, S);
	JB_FS_AppendString(Fs, JB_LUB[1380]);
	int First = 0 + (Self->Cls != nil);
	int Last = JB_Array_Size(Self->Args) - 1;
	if (Last < First) {
		JB_FS_AppendByte(Fs, '0');
	}
	 else {
		{
			IntRange _LoopSrcf2 = JB_int_OperatorTo(First, Last);
			int __Endf0 = _LoopSrcf2[1];
			int I = _LoopSrcf2[0];
			while (I < __Endf0) {
				SCDecl* A = JB_Incr(((SCDecl*)JB_Array_Value(Self->Args, I)));
				if (A) {
					JB_String* _tmPf3 = JB_Incr(JB_Str_TitleCase(A->Type->Modul->CppPart, nil));
					JB_FS_AppendString(Fs, _tmPf3);
					JB_Decr(_tmPf3);
				}
				JB_Decr(A);
				I++;
			};
		};
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SyntaxCast(Fs));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_String* SC_Func_ParentName(SCFunction* Self) {
	SCClass* C = Self->Cls;
	if (C) {
		return C->Name;
	}
	SCNode* Mod = Self->Parent;
	if (JB_Object_FastIsa(Mod, &SCModuleData)) {
		if ((!((SCModule*)Mod)->IsImport)) {
			return ((SCModule*)Mod)->Name;
		}
	}
	return JB_LUB[0];
}

bool SC_Func_ParseName(SCFunction* Self, Message* Node) {
	JB_String* fType = Node->Name;
	Message* Cname = ((Message*)JB_Ring_First(Node));
	if ((!Cname)) {
		return nil;
	}
	Cname->Func = JB_SyxThg;
	JB_SetRef(Self->Name, Cname->Name);
	if (JB_Str_Equals(fType, JB_LUB[1691], false)) {
		Self->NoAutoComplete = 2;
	}
	 else if (JB_Str_Equals(fType, JB_LUB[1482], false)) {
		Self->IsAPI = true;
	}
	 else if (JB_Str_Equals(fType, JB_LUB[1939], false)) {
		Self->IsAssigns = 2;
		Self->HidesProperties = true;
	}
	 else if (JB_Str_Equals(fType, JB_LUB[1684], false)) {
		Self->HidesProperties = true;
	}
	if ((!Self->Cls)) {
		0;
	}
	 else if (JB_Msg_SyntaxEquals(Cname, JB_LUB[1563], true)) {
		(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_Constructor, true));
	}
	 else if (JB_Msg_SyntaxEquals(Cname, JB_LUB[1600], true)) {
		(SC_Func_SyntaxIsSet(Self, kSC__FunctionType_Destructor, true));
	}
	return SC_Msg_TestFuncName(Cname);
}

void SC_Func_PreProcessExpects(SCFunction* Self) {
	Array* List = nil;
	{
		Message* _LoopSrcf3 = JB_Incr(SC_Func_SourceArg(Self));
		Message* Ch = JB_Incr(_LoopSrcf3);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(_LoopSrcf3)));
		while (((bool)(Ch)) and (Ch != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(Ch)));
			if (SC_Msg_NeedsPreprocess(Ch)) {
				if ((!(JB_Array_SyntaxCast(List)))) {
					JB_SetRef(List, JB_Array_Constructor0(nil));
				}
				JB_Array_SyntaxAppend(List, Ch);
			}
			JB_SetRef(Ch, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(Ch);
		JB_Decr(_afterf1);
		;
		JB_Decr(_LoopSrcf3);
	}
	;
	if (List == nil) {
		JB_Decr(List);
		return;
	}
	{
		int _if4 = 0;
		while (true) {
			Message* Ch = JB_Incr(((Message*)JB_Array_Value(List, _if4)));
			if (Ch == nil) {
				JB_Decr(Ch);
				break;
			}
			if ((JB_Msg_EqualsSyx(Ch, JB_SyxTRel, false)) or (JB_Msg_EqualsSyx(Ch, JB_SyxARel, false))) {
				SC_Func_FixCnj(Self, Ch);
			}
			 else if (JB_Msg_EqualsSyx(Ch, JB_SyxRel, false)) {
				SC_RelSetOrExpansion(Ch);
			}
			 else if ((!JB_Msg_SyntaxEquals(Ch, JB_LUB[2026], false))) {
				SC_Func__Tran_Expect(Self, Ch, nil);
			}
			JB_Decr(Ch);
			_if4++;
		};
	}
	;
	{
		int _if6 = 0;
		while (true) {
			Message* Ch = JB_Incr(((Message*)JB_Array_Value(List, _if6)));
			if (Ch == nil) {
				JB_Decr(Ch);
				break;
			}
			if (JB_Msg_SyntaxEquals(Ch, JB_LUB[1995], false)) {
				JB_SetRef(Ch->Name, JB_LUB[2026]);
				Message* W = JB_Incr(((Message*)JB_Ring_First(Ch)));
				if ((!(W))) {
					JB_SetRef(W, JB_Msg_Msg(Ch, JB_SyxStr, JB_LUB[1306]));
				}
				JB_FreeIfDead(SC_Msg_NeedBra(W));
				JB_Decr(W);
			}
			 else if (JB_Msg_SyntaxEquals(Ch, JB_LUB[2026], false)) {
				SC_Func__Tran_Using(Self, Ch, nil);
			}
			JB_Decr(Ch);
			_if6++;
		};
	}
	;
	JB_Decr(List);
}

void SC_Func_PreRead(SCFunction* Self, Message* Arg) {
	{
		Message* S = ((Message*)JB_Ring_First(Arg));
		while (S) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(S));
			if (JB_Msg_EqualsSyx(S, JB_SyxTmp, false)) {
				DTWrap* Fn = ((DTWrap*)JB_Dict_ValueStr(JB_FuncPreReader, S->Name));
				if (Fn) {
					(((FP_fnPreReader)JB_Wrap_First(Fn)))(Self, S);
					JB_Tree_Remove(S);
				}
			}
			S = _Nf1;
		};
		;
	};
}

Message* SC_Func_Prms(SCFunction* Self) {
	return JB_Msg_FindSyx(Self->Source, JB_SyxPrm);
}

void SC_Func_ProtoExportName(SCFunction* Self) {
	SCClass* Cls = Self->ProtoType;
	if (((bool)Cls) and (!JB_Str_Exists(Cls->CppClass))) {
		JB_SetRef(Cls->CppClass, SC_Func_MakeProtoClassName(Self, Cls->Name));
	}
}

void SC_Func_ReachedDetect(SCFunction* Self) {
	SCNode* Base = SC__Comp_VisibleFuncs;
	if ((!SC_SCObject_IsVisible(Self))) {
		if ((!(SC__Options_MakeInterpreter and (!Self->IsDisabled)))) {
			return;
		}
		Base = SC__Comp_Interpreter;
	}
	SC_Func_ReachFunc(Self, Base);
}

bool SC_Func_ReachFunc(SCFunction* Self, SCNode* From) {
	bool Rz = false;
	//;
	if (SC_Func_Borked(Self)) {
		if (true) {
			JB_Msg_SyntaxExpect(Self->Source, JB_LUB[671]);
		}
		if (true) {
			JB_Msg_SyntaxExpect(From->Source, SC_Base_ReachedName(From));
		}
	}
	if (Self->MyReacher) {
		return nil;
	}
	Self->MyReacher = From;
	SC__Comp_stReachedFunc++;
	{
		SCClass* _t = Self->Cls;
		if (_t) {
			SC_Class_Reach(_t, Self, nil);
		}
	}
	;
	{
		Array* _LoopSrcf2 = Self->LinkTo;
		int _if0 = 0;
		while (true) {
			SCNode* O = ((SCNode*)JB_Array_Value(_LoopSrcf2, _if0));
			if (O == nil) {
				break;
			}
			if (O->MyReacher) {
			}
			 else if (JB_Object_FastIsa(O, &SCFunctionData)) {
				SC_Func_ReachFunc(((SCFunction*)O), Self);
				Rz = true;
			}
			 else if (JB_Object_FastIsa(O, &SCClassData)) {
				SC_Class_Reach(((SCClass*)O), Self, nil);
			}
			_if0++;
		};
	}
	;
	return Rz;
}

void SC_Func_RefFunc(SCFunction* Self, Message* Prm, Message* After) {
	JB__Tk_Using.Position = -1;
	Message* Rz = (JB_Syx_Msg(JB_SyxFunc, JB_LUB[0]));
	(JB_Ring_NextSibSet(After, Rz));
	JB_Msg_AppendSyx(Rz, JB_SyxThg, Self->ExportName);
	JB_SetRef(Rz->Obj, Prm->Obj);
	Message* Lst = JB_Msg_Msg(Rz, JB_SyxPrm, JB_LUB[0]);
	JB_SetRef(Lst->Obj, SC__Comp_RefIncr);
	JB_Tree_SyntaxAppend(Lst, Prm);
}

DataTypeCode SC_Func_RegType(SCFunction* Self) {
	if (Self) {
		return SC_Decl_RegType(Self->ReturnType);
	}
	return kJB__TC_UnusedType;
}

JB_String* SC_Func_Render(SCFunction* Self, FastString* Fs_in) {
	Message* It = JB_Incr(Self->Source);
	if (It) {
		JB_String* _tmPf0 = JB_Incr(JB_Msg_Render(It, Fs_in));
		JB_Decr(It);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(It);
	return SC_Func_Describe(Self, Fs_in);
}

JB_String* SC_Func_RenderName(SCFunction* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_String* Pname = JB_Incr(SC_Func_ParentName(Self));
	if (JB_Str_Exists(Pname)) {
		JB_FS_AppendString(Fs, Pname);
		JB_FS_AppendByte(Fs, '.');
	}
	JB_Decr(Pname);
	JB_FS_AppendString(Fs, Self->Name);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Func_RenderParams(SCFunction* Self, bool ForErrors, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendByte(Fs, '(');
	JB_String* Sep = JB_Incr(JB_LUB[0]);
	{
		Array* _LoopSrcf2 = JB_Incr(Self->Args);
		int _if0 = 0;
		while (true) {
			SCDecl* A = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (A == nil) {
				JB_Decr(A);
				break;
			}
			if (A->Source) {
				JB_FS_AppendString(Fs, Sep);
				JB_SetRef(Sep, JB_LUB[302]);
				JB_FS_SyntaxAppend(Fs, A->Source);
			}
			JB_Decr(A);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	if ((!ForErrors) and ((bool)Self->ReturnType)) {
		JB_FS_AppendString(Fs, Sep);
		JB_FreeIfDead(SC_Decl_Render(Self->ReturnType, Fs));
	}
	JB_Decr(Sep);
	JB_FS_AppendByte(Fs, ')');
	JB_String* _tmPf3 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

JB_String* SC_Func_RenderTitle(SCFunction* Self, bool ForErrors, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	JB_FS_AppendString(Fs, Self->Name);
	if (JB_Array_SyntaxCast(Self->Args) or ((!ForErrors) and ((bool)Self->ReturnType))) {
		JB_FS_AppendByte(Fs, ' ');
		JB_FreeIfDead(SC_Func_RenderParams(Self, ForErrors, Fs));
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

SCDecl* SC_Func_Self(SCFunction* Self) {
	return ((SCDecl*)JB_Array_Value(Self->Args, 0));
}

void SC_Func_SetBlindCasts(SCFunction* Self, SCNode* Name_space) {
	if (Name_space) {
		SCImport* P = Name_space->Project;
		if (P) {
			Self->BlindCasts = P->BlindCast;
		}
	}
	 else {
		SCImport* C = SC__Imp_Curr;
		if (C) {
			Self->BlindCasts = C->BlindCast;
		}
	}
}

Message* SC_Func_SourceArg(SCFunction* Self) {
	Message* Arg = ((Message*)JB_Ring_Last(Self->Source));
	if (JB_Msg_EqualsSyx(Arg, JB_SyxArg, false)) {
		return Arg;
	}
	return nil;
}

bool SC_Func_SyntaxEquals(SCFunction* Self, JB_String* Name, bool Aware) {
	if ((!Self)) {
		return nil;
	}
	if (JB_Str_Equals(Self->ExportName, Name, true)) {
		return true;
	}
	return JB_Str_Equals(Self->Name, Name, true);
}

bool SC_Func_SyntaxIs(SCFunction* Self, FunctionType K) {
	if (Self) {
		return ((bool)(Self->AllocCode & K));
	}
	return false;
}

void SC_Func_SyntaxIsSet(SCFunction* Self, FunctionType K, bool Value) {
	if (Value) {
		Self->AllocCode = (Self->AllocCode | K);
	}
	 else {
		Self->AllocCode = (Self->AllocCode & (~K));
	}
}

void SC_Func_Transform(SCFunction* Self) {
	SC_Func_CheckNotBadName(Self);
	if (Self->IsMacro) {
		return;
	}
	JB_SetRef(SC__Func_CurrFunc, Self);
	SC__Mod_Curr = ((SCModule*)JB_Object_FastAs(Self->Parent, &SCModuleData));
	Self->Badness = 0;
	ErrorMarker StillOK = JB_Rec_Mark(JB_StdErr);
	Message* N = SC_Func_SourceArg(Self);
	if ((!N)) {
		return;
	}
	SCArg* Space = SC_Msg_SCArg(N, Self, nil);
	if ((!Space)) {
		return;
	}
	if (Self->IsWrapper) {
		JB_FreeIfDead(SC_Base_ProcessLinkage(Space, N, JB_FuncLinkageTable));
	}
	 else {
		Message* R_z = SC_Func__Tran_Result(Self);
		SC_Func__Tran_All(Self, N, Space);
		if (R_z) {
			SC_Func__Tran_ResultFinish(Self, R_z, Space);
		}
	}
	if ((!JB_ErrorMarker_SyntaxCast(StillOK))) {
		Self->Badness = (Self->Badness | 1);
	}
	 else {
		SC_Func_CallParents(Self);
	}
	SC__Func_CurrFunc = nil;
	SC__Mod_Curr = nil;
}

void SC_Func_TranStrings(SCFunction* Self) {
	Message* S = JB_Incr(SC_Func_SourceArg(Self));
	if (((bool)S) and (!Self->IsWrapper)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(S)));
		SC_Func__Tran_Strings(_tmPf0, Self);
		JB_Decr(_tmPf0);
	}
	JB_Decr(S);
}

void SC_Func_TryAdd(SCFunction* Self, SCNode* B) {
	SC_Base_TryAdd(B, Self->Source, Self, Self->Name);
}

SCFunction* SC_Func_TryKeepBetter(SCFunction* Self, int OldMatch, SCFunction* F, int Match) {
	if ((((bool)(OldMatch & kJB_kSuperClassMatch))) and (SC_int_IsSimpleOrPointerCast(Match))) {
		return F;
	}
	if ((((bool)(Match & kJB_kSuperClassMatch))) and (SC_int_IsSimpleOrPointerCast(OldMatch))) {
		return Self;
	}
	if ((((bool)(OldMatch & kJB_kTypeCastBothWays))) and (!(((bool)(Match & kJB_kTypeCastBothWays))))) {
		return Self;
	}
	if ((((bool)(Match & kJB_kTypeCastBothWays))) and (!(((bool)(OldMatch & kJB_kTypeCastBothWays))))) {
		return F;
	}
	if ((OldMatch == kJB_kSimpleMatch) and (Match != kJB_kSimpleMatch)) {
		return Self;
	}
	if ((Match == kJB_kSimpleMatch) and (OldMatch != kJB_kSimpleMatch)) {
		return F;
	}
	if (OldMatch < Match) {
		return Self;
	}
	if (Match < OldMatch) {
		return F;
	}
	return nil;
}

bool SC_Func_Update_Source(SCFunction* Self, int Start, JB_String* Text, SCFile* Myfile, SCObject* Orig) {
	bool Rz = false;
	JB_SetRef(SC__Func_CurrFunc, Self);
	JB__Tk_Using.Position = -1;
	JB__Tk_Using.Flags = 0;
	JB__Tk_Using.Tag = 0;
	Message* Source = JB_Incr(SC_Str_ParseClean(Text));
	if (((bool)Source) and (!JB_Msg_EqualsSyx(Source, JB_SyxTmp, false))) {
		JB_SetRef(Source, JB_Msg_NeedSyx(Source, JB_SyxTmp));
	}
	if (Source) {
		SC_Msg_SlidePositions(Source, Start);
		JB_SetRef(Self->Source, Source);
		SC_Func_Cleanupfunc(Self, Source);
		JB__Tk_Using.Flags = kJB__MsgParseFlags_Inserted;
		Rz = SC_Func_UpdateSourceSub(Self, Source);
		JB_SetRef(Source->Obj, SC_SCObject_Disambiguate(Orig, Source));
	}
	JB_Decr(Source);
	JB__Tk_Using.Flags = 0;
	JB__Tk_Using.Tag = 0;
	return Rz;
}

bool SC_Func_UpdateSourceSub(SCFunction* Self, Message* Src) {
	bool Rz = false;
	if ((JB_Msg_EqualsSyx(Src, JB_SyxTmp, true)) and (JB_Msg_SyntaxEquals(Src, JB_LUB[1776], true))) {
		SC_Msg_mainfix2(Src);
	}
	Message* F = ((Message*)JB_Ring_First(Src));
	if ((!F)) {
		return nil;
	}
	if (JB_Msg_EqualsSyx(F, JB_SyxDot, false)) {
		F->Func = JB_SyxThg;
		JB_Tree_Clear(F);
	}
	Rz = JB_Rec_OK(JB_StdErr);
	SC_Func_Init_Sub(Self, Src, nil);
	Rz = JB_Rec_OK(JB_StdErr);
	if (Rz) {
		SC_Func_FuncDecls(Self);
		SC_Func_Transform(Self);
		JB_Rec_Clear(JB_StdErr);
	}
	return Rz;
}

bool SC_Func_UseCppName(SCFunction* Self, JB_String* CppName) {
	if ((!JB_Str_Exists(CppName))) {
		return nil;
	}
	SC_Base_SetExportName(Self, CppName, true);
	return true;
}

bool SC_Func_UseExportWrapper(SCFunction* Self, JB_String* CppWrapper) {
	if (JB_Str_Exists(CppWrapper)) {
		Self->IsWrapper = ((bool)1);
		SC_Base_SetExportName(Self, CppWrapper, true);
		return true;
	}
	return false;
}

void SC_Func_ValidateSaver(SCFunction* Self, JB_String* Name) {
	SCClass* Cls = Self->Cls;
	if ((!Cls)) {
		JB_Object_SyntaxExpect(nil);
		return;
	}
	if (Cls == JB_TypeSaveable) {
		return;
	}
	Message* First = ((Message*)JB_Ring_First(SC_Func_SourceArg(Self)));
	if ((!First)) {
		JB_Msg_SyntaxWarn(Self->Source, JB_LUB[1287]);
	}
	{
		Message* _LoopSrcf2 = SC_Func_SourceArg(Self);
		Message* Line = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Line));
			if (Cls->Super != JB_TypeSaveable) {
				SC_Msg_CheckSuperDotSave(Line, Name, First == Line);
			}
			if ((!JB_Rec_OK(JB_StdErr))) {
				return;
			}
			Line = _Nf1;
		};
		;
	};
}

int SC_Func_VisibleArgs(SCFunction* Self) {
	int Rz = 0;
	{
		Array* _LoopSrcf2 = Self->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* S = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (S == nil) {
				break;
			}
			if ((!S->Default)) {
				Rz++;
			}
			_if0++;
		};
	}
	;
	Rz = (Rz - (Self->Cls != nil));
	return Rz;
}

void SC_Func_WantAs(SCFunction* Self, NilState NS) {
	SCDecl* Dcl = ((SCDecl*)JB_Array_First(Self->Args));
	if ((!(((bool)Dcl) and (SC_Decl_TypeSuffers(Dcl) and ((bool)Self->Cls))))) {
		JB_Msg_SyntaxExpect(Self->Source, JB_LUB[1290]);
		return;
	}
	Dcl->NilDeclared = NS;
}

JB_String* SC_Func_WrappedName(SCFunction* Self) {
	if (Self->IsCppInBuilt) {
		return JB_Str_OperatorPlus(Self->ExportName, JB_LUB[1382]);
	}
	 else {
		return Self->ExportName;
	}
}

Message* SC_Func__AlterPostCond(Message* PostCond, Message* IterPostCond, Message* NodeSrc) {
	if ((!IterPostCond)) {
		return PostCond;
	}
	IterPostCond = JB_Msg_Copy(IterPostCond, NodeSrc);
	if ((!PostCond)) {
		return IterPostCond;
	}
	return SC_NewRel(({
		Message* __imPf0 = (JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf0, PostCond);
		 __imPf0;
	}), ({
		Message* __imPf1 = (JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf1, IterPostCond);
		 __imPf1;
	}), JB_LUB[1855]);
}

Message* SC_Func__ArgToFunc(JB_String* NewName, Message* Params, Message* Arg) {
	Message* Rz = nil;
	JB_SetRef(Rz, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1673]));
	JB_Msg_AppendSyx(Rz, JB_SyxThg, NewName);
	if (JB_Msg_EqualsSyx(Params, JB_SyxPrm, false)) {
		JB_Tree_SyntaxAppend(Rz, Params);
	}
	 else if (JB_Msg_EqualsSyx(Params, JB_SyxThg, false)) {
		Message* _tmPf0 = JB_Incr(JB_Msg_Msg(Rz, JB_SyxBra, JB_LUB[0]));
		JB_Tree_SyntaxAppend(_tmPf0, Params);
		JB_Decr(_tmPf0);
	}
	 else {
		debugger;
	}
	JB_Tree_SyntaxAppend(Rz, Arg);
	Rz->Position = Arg->Position;
	JB_SafeDecr(Rz);
	return Rz;
}

bool SC_Func__CanKeepAsSource(Message* List, Message* Arg, SCDecl* D) {
	if (((JB_Msg_EqualsSyx(List, JB_SyxThg, false))) and (!SC_Msg_IsVarUseableInLoop(Arg, List->Name))) {
		return true;
	}
	if (JB_Msg_EqualsSyx(List, JB_SyxNum, false)) {
		return true;
	}
	if (SC_Decl_IsCArray(D)) {
		return true;
	}
	return false;
}

bool SC_Func__CanKeepAsValue(SCIterator* Iter, Message* Arg, SCDecl* Dcl, Message* Value) {
	if ((!JB_Msg_EqualsSyx(Iter->Value, JB_SyxThg, false))) {
		return nil;
	}
	if ((!Value)) {
		return nil;
	}
	if (SC_Msg_IsVarUseableInLoop(Arg, Value->Name)) {
		return nil;
	}
	if (SC_Decl_IsCArray(Dcl)) {
		return nil;
	}
	return true;
}

void SC_Func__FastStringOpt(Message* S, SCNode* Name_space) {
	SCFunction* Fn = SC_Msg_MsgFunc(S);
	Message* Prms = ((Message*)JB_Tree_Second(S));
	if ((!(((bool)Prms) and ((bool)Fn)))) {
		return;
	}
	if ((!JB_Str_Equals(Fn->ExportName, JB_LUB[956], false))) {
		return;
	}
	Message* Item = ((Message*)JB_Ring_Last(Prms));
	if (SC_Func_SyntaxEquals(SC_Msg_MsgFunc(Item), JB_LUB[957], false)) {
		SC_FastStringOpts__FS(S, Item);
	}
	 else {
		SC_FastStringOpts__String(S, Item);
	}
}

Message* SC_Func__GetFileString(Message* Msg, JB_String* Name) {
	JB_Incr(Name);
	if ((!((JB_Msg_SyntaxEquals(Msg, JB_LUB[1650], true)) or (JB_Msg_SyntaxEquals(Msg, JB_LUB[1704], true))))) {
		JB_Msg_SyntaxExpect(Msg, nil);
		JB_Decr(Name);
		return nil;
	}
	bool OK = JB_Str_Last(Name, 0) == '?';
	if (OK) {
		JB_SetRef(Name, JB_Str_Shorten(Name, 1));
	}
	JB_String* Data = JB_Incr(JB_LUB[0]);
	JB_File* F = JB_Incr(SC_Comp__InputFile(nil, Name, Msg));
	JB_Decr(Name);
	if (JB_File_SyntaxCast(F)) {
		JB_SetRef(Data, JB_File_ReadAll(F, 134217728, true));
		if (JB_Msg_SyntaxEquals(Msg, JB_LUB[1704], true)) {
			JB_SetRef(Data, SC_image__ConvertPNGToVOI(Data));
		}
		OK = JB_Str_Exists(Data);
	}
	if (OK) {
		JB_Msg_BecomeStr(Msg, JB_SyxStr, Data);
		SC__Imp_Recent = JB_int64_OperatorMax(SC__Imp_Recent, JB_File_Modified(F));
		JB_Tree_Clear(Msg);
		SC_Func__ObjectifyString(Msg);
		JB_Decr(F);
		JB_Decr(Data);
		return Msg;
	}
	JB_Decr(Data);
	JB_Decr(F);
	if (true) {
		JB_Msg_SyntaxExpect(Msg, JB_LUB[872]);
	}
	return nil;
}

bool SC_Func__InBuiltFunc(Message* Self, JB_String* Name) {
	if ((!JB_Msg_OperatorIn(Self, JB_SyxQues))) {
		return nil;
	}
	if (JB_Msg_SyntaxEquals(Self, Name, false)) {
		Message* F = ((Message*)JB_Ring_First(Self));
		if (F) {
			if (true) {
				JB_Msg_SyntaxExpect(F, nil);
			}
		}
		JB_Msg_BecomeStr(Self, JB_SyxBra, JB_LUB[0]);
		return true;
	}
	return false;
}

int SC_Func__Init_() {
	{
		SC__Func_DisabledPoints = 0;
		SC__Func_OnceCount = 0;
		JB_SetRef(SC__Func_TemporalStatements, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf0 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_CppRefs)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1576], _tmPf0));
		JB_Decr(_tmPf0);
		DTWrap* _tmPf1 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_For)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1660], _tmPf1));
		JB_Decr(_tmPf1);
		DTWrap* _tmPf2 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Swap)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1975], _tmPf2));
		JB_Decr(_tmPf2);
		DTWrap* _tmPf3 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_While)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2047], _tmPf3));
		JB_Decr(_tmPf3);
		DTWrap* _tmPf4 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Description)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1599], _tmPf4));
		JB_Decr(_tmPf4);
		DTWrap* _tmPf5 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_If)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1697], _tmPf5));
		JB_Decr(_tmPf5);
		DTWrap* _tmPf6 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Else)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1623], _tmPf6));
		JB_Decr(_tmPf6);
		DTWrap* _tmPf7 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Else)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1621], _tmPf7));
		JB_Decr(_tmPf7);
		DTWrap* _tmPf8 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Once)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1842], _tmPf8));
		JB_Decr(_tmPf8);
		DTWrap* _tmPf9 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Ifn)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1698], _tmPf9));
		JB_Decr(_tmPf9);
		DTWrap* _tmPf10 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Debugger)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1592], _tmPf10));
		JB_Decr(_tmPf10);
		DTWrap* _tmPf11 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_crash))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1578], _tmPf11));
		JB_Decr(_tmPf11);
		DTWrap* _tmPf12 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Deprecate)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1598], _tmPf12));
		JB_Decr(_tmPf12);
		DTWrap* _tmPf13 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Fails)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1522], _tmPf13));
		JB_Decr(_tmPf13);
		DTWrap* _tmPf14 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_BlindCasts)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1519], _tmPf14));
		JB_Decr(_tmPf14);
		DTWrap* _tmPf15 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_DoAt)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1591], _tmPf15));
		JB_Decr(_tmPf15);
		DTWrap* _tmPf16 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_DoAt)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1616], _tmPf16));
		JB_Decr(_tmPf16);
		DTWrap* _tmPf17 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Visible)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2036], _tmPf17));
		JB_Decr(_tmPf17);
		DTWrap* _tmPf18 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Tran_Flow)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1658], _tmPf18));
		JB_Decr(_tmPf18);
		DTWrap* _tmPf19 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Print)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1876], _tmPf19));
		JB_Decr(_tmPf19);
		DTWrap* _tmPf20 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Print)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1878], _tmPf20));
		JB_Decr(_tmPf20);
		DTWrap* _tmPf21 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Print)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2066], _tmPf21));
		JB_Decr(_tmPf21);
		DTWrap* _tmPf22 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Print)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1877], _tmPf22));
		JB_Decr(_tmPf22);
		DTWrap* _tmPf23 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Log)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1764], _tmPf23));
		JB_Decr(_tmPf23);
		DTWrap* _tmPf24 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Beep)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1510], _tmPf24));
		JB_Decr(_tmPf24);
		DTWrap* _tmPf25 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_ignore))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1699], _tmPf25));
		JB_Decr(_tmPf25);
		DTWrap* _tmPf26 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_alert))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1478], _tmPf26));
		JB_Decr(_tmPf26);
		DTWrap* _tmPf27 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_break))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1524], _tmPf27));
		JB_Decr(_tmPf27);
		DTWrap* _tmPf28 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_do))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1614], _tmPf28));
		JB_Decr(_tmPf28);
		DTWrap* _tmPf29 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_VM_Builder__BuildInstructions)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1448], _tmPf29));
		JB_Decr(_tmPf29);
		DTWrap* _tmPf30 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_NotAllowed))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1565], _tmPf30));
		JB_Decr(_tmPf30);
		DTWrap* _tmPf31 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_NotAllowed))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1634], _tmPf31));
		JB_Decr(_tmPf31);
		DTWrap* _tmPf32 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Quit)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1886], _tmPf32));
		JB_Decr(_tmPf32);
		DTWrap* _tmPf33 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Return)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1898], _tmPf33));
		JB_Decr(_tmPf33);
		DTWrap* _tmPf34 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Rejoin)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1891], _tmPf34));
		JB_Decr(_tmPf34);
	}
	;
	return 0;
}

int SC_Func__InitCode_() {
	{
	}
	;
	JB_SetRef(SC__SCStrings_RenderInsides, SC_Str_ParseCleanWipe(JB_LUB[47]));
	JB_SetRef(SC__SCStrings_RenderNewParams, SC_Str_ParseCleanWipe(JB_LUB[46]));
	JB_SetRef(SC__SCStrings_RenderFinish, JB_Msg_FindSyxName(SC__SCStrings_RenderInsides, JB_SyxTmp, JB_LUB[1654], false));
	return 0;
}

SCNode* SC_Func__NeuLibrary(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (true) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[754]);
	}
	SC__Options_ProjectIsLibrary = true;
	return SC_Func__NeuMain(Node, Name_space, ErrPlace);
}

SCNode* SC_Func__NeuMain(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCNode* Rz = nil;
	if (Name_space != SC__Comp_program) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[742]);
		JB_Decr(Rz);
		return nil;
	}
	Message* Fn_src = JB_Incr(SC_Msg_MainFix(Node));
	if (Fn_src) {
		SC__Comp_HasMainFunc = true;
		SCModule* M = JB_Incr(SC__Comp_Project->Mod);
		JB_SetRef(Rz, SC_Func__NewFunc(Fn_src, M, ErrPlace));
		if (JB_Object_FastIsa(Rz, &SCModuleData)) {
			JB_SetRef(SC__Comp_MainFunc, SC_Class__ProcessExtend(Fn_src, false, M));
			JB_Tree_Remove(Fn_src);
		}
		JB_Decr(M);
	}
	JB_Decr(Fn_src);
	JB_SafeDecr(Rz);
	return Rz;
}

SCNode* SC_Func__NeuSyx(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCNode* Rz = nil;
	MessagePosition Using = JB_Msg_SyntaxUsing(Node);
	Message* NewNode = JB_Incr(SC_Func__Tran_Syx(Node));
	if (NewNode) {
		JB_SetRef(Rz, SC_Func__NewHelper(NewNode, Name_space, ErrPlace));
	}
	JB_Decr(NewNode);
	JB_MsgPos_Destructor((&Using));
	JB_SafeDecr(Rz);
	return Rz;
}

SCNode* SC_Func__NewConstructor(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_SetRef(Node->Name, JB_LUB[1673]);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
	Message* _tmPf1 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[784]));
	(JB_Ring_FirstSet(Node, _tmPf1));
	JB_Decr(_tmPf1);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	SCNode* _tmPf2 = JB_Incr(SC_Func__NewFunc(Node, Name_space, ErrPlace));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

SCNode* SC_Func__NewCppWrapper(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCNode* Rz = nil;
	Message* Name = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxThg));
	if ((!Name)) {
		JB_Decr(Name);
		JB_Decr(Rz);
		return nil;
	}
	Message* Prm = JB_Incr(((Message*)JB_Ring_NextSib(Name)));
	if ((!Prm)) {
		JB_Decr(Prm);
		JB_Decr(Name);
		JB_Decr(Rz);
		return nil;
	}
	if ((!JB_Tree_IsLast(Prm))) {
		JB_Msg_SyntaxExpect(Prm, nil);
		JB_Decr(Prm);
		JB_Decr(Name);
		JB_Decr(Rz);
		return nil;
	}
	JB_Decr(Prm);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Name);
	Message* Thg = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, Name->Name));
	JB_Decr(Name);
	if (JB_Msg_SyntaxEquals(Node, JB_LUB[1571], false)) {
		JB_SetRef(Thg, SC_Msg_WrapWith(Thg, JB_SyxBra, JB_LUB[0]));
	}
	bool IsNothing = (JB_Msg_SyntaxEquals(Node, JB_LUB[1574], false));
	bool IsLib = (JB_Msg_SyntaxEquals(Node, JB_LUB[1572], false));
	JB_SetRef(Node->Name, JB_LUB[1673]);
	Message* _tmPf2 = JB_Incr(JB_Msg_Msg(Node, JB_SyxArg, JB_LUB[0]));
	Message* _tmPf1 = JB_Incr(JB_Msg_Msg(_tmPf2, JB_SyxTmp, JB_LUB[1577]));
	JB_Decr(_tmPf2);
	JB_Tree_SyntaxAppend(_tmPf1, Thg);
	JB_Decr(Thg);
	JB_Decr(_tmPf1);
	JB_SetRef(Rz, SC_Func__NewFunc(Node, Name_space, ErrPlace));
	if (JB_Object_FastIsa(Rz, &SCFunctionData)) {
		((SCFunction*)Rz)->NoAutoComplete = 1;
		if (IsNothing) {
			(SC_Func_IsCppInBuiltSet(((SCFunction*)Rz), 2));
		}
		 else if (JB_Msg_SyntaxEquals(Node, JB_LUB[1571], false)) {
			(SC_Func_IsCppInBuiltSet(((SCFunction*)Rz), 1));
		}
		((SCFunction*)Rz)->IsExternalLib = IsLib;
		SC_Func_MakeParamsReal(((SCFunction*)Rz));
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(Rz);
	return Rz;
}

SCNode* SC_Func__NewDestructor(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		if ((((SCClass*)Name_space)->IsRole)) {
			JB_Msg_SyntaxExpect(Node, JB_LUB[1601]);
			return nil;
		}
		JB_SetRef(Node->Name, JB_LUB[1673]);
		if (true) {
			MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
			Message* _tmPf1 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[818]));
			(JB_Ring_FirstSet(Node, _tmPf1));
			JB_Decr(_tmPf1);
			JB_MsgPos_SyntaxUsingComplete((&_usingf0));
			JB_MsgPos_Destructor((&_usingf0));
		}
		return SC_Func__NewFunc(Node, ((SCClass*)Name_space), ErrPlace);
	}
	return nil;
}

SCNode* SC_Func__NewFunc(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if ((!Node)) {
		return nil;
	}
	Message* Name = JB_Incr(((Message*)JB_Ring_First(Node)));
	if ((!Name)) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1070]);
		JB_Decr(Name);
		return nil;
	}
	if (JB_Msg_EqualsSyx(Name, JB_SyxDot, false)) {
		JB_Decr(Name);
		return SC_Class__ExtendOneFunc(Node, nil, ErrPlace);
	}
	JB_Decr(Name);
	return SC_Func__NewFuncSub(Node, Name_space);
}

SCFunction* SC_Func__NewFuncSub(Message* Node, SCNode* Name_space) {
	SCFunction* Fn = JB_Incr(SC_Func_Constructor(nil, Node));
	SC_Func_Init_Sub(Fn, Node, Name_space);
	JB_SafeDecr(Fn);
	return Fn;
}

SCNode* SC_Func__NewHelper(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCNode* Rz = nil;
	JB_SetRef(Rz, SC_Func__NewFunc(Node, Name_space, ErrPlace));
	if (Rz) {
		(SC_SCObject_SyntaxIsSet(Rz, kSC__SCNodeInfo_Visible, (!true)));
	}
	JB_SafeDecr(Rz);
	return Rz;
}

SCNode* SC_Func__NewHider(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	if ((!JB_Object_Isa(Name_space, &SCClassData))) {
		JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1043]);
		return nil;
	}
	return SC_Func__NewFunc(Node, Name_space, ErrPlace);
}

SCNode* SC_Func__NewMacro(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	return SC_Func__NewFunc(Node, Name_space, ErrPlace);
}

SCNode* SC_Func__NewProtoType(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	return SC_Func__NewProtoTypeSub(Node, Name_space, ErrPlace, JB_LUB[0]);
}

SCModule* SC_Func__NewProtoTypeSub(Message* Node, SCNode* Parent, Message* ErrPlace, JB_String* ForInterface) {
	JB_Incr(Parent);
	if (JB_Object_FastIsa(Parent, &SCClassData)) {
		if ((!JB_Str_Exists(ForInterface))) {
			JB_FreeIfDead(SC_Msg_NormaliseFunc(Node, ((SCClass*)Parent)));
		}
		JB_SetRef(Parent, ((SCClass*)((SCClass*)Parent)->Modul));
	}
	 else {
		if ((!SC_Base_ExpectModule(Parent, Node))) {
			JB_Decr(Parent);
			return nil;
		}
	}
	SCFunction* F = JB_Incr(((SCFunction*)SC_Func__NewFunc(Node, Parent, ErrPlace)));
	if ((!F)) {
		JB_Decr(Parent);
		JB_Decr(F);
		return nil;
	}
	JB_FreeIfDead(((SCFunction*)JB_Array_Pop(SC__Comp_FuncList)));
	MessagePosition Using = JB_Msg_SyntaxUsing(Node);
	Message* Tmp = JB_Incr(JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1585]));
	JB_Msg_AppendSyx(Tmp, JB_SyxThg, F->Name);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(Node)));
	JB_Tree_SyntaxAppend(Tmp, _tmPf0);
	JB_Decr(_tmPf0);
	SCModule* Modul = JB_Incr(SC_Class__DataTypeSub(Tmp, Parent, Node, ForInterface, kSC__SCNodeType_FuncProto));
	JB_Decr(Tmp);
	if (Modul) {
		SCClass* Clss = JB_Incr(Modul->Cls);
		Clss->BaseType = kSC__SCNodeType_FuncProto;
		Clss->IsBuiltin = false;
		JB_SetRef(Clss->FuncProto, F);
		JB_SetRef(F->ProtoType, Clss);
		JB_Decr(Clss);
		JB_Array_SyntaxAppend(SC__Comp_ProtoTypes, F);
		SC_Base_TryAdd(Parent, Node, Modul, Modul->Name);
		if ((!JB_Str_Exists(ForInterface))) {
			JB_SetRef(Modul, SC__Comp_program);
		}
	}
	JB_Decr(F);
	JB_Decr(Parent);
	JB_SafeDecr(Modul);
	JB_MsgPos_Destructor((&Using));
	return Modul;
}

SCNode* SC_Func__NewRender(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCNode* Rz = nil;
	SCClass* Cls = JB_Incr(SC_Base_IsNormalObject(Name_space));
	if (SC_Func__Tran_Render(Node, Cls)) {
		JB_SetRef(Rz, SC_Beh__NewActual(Node, Name_space, ErrPlace));
	}
	 else {
		JB_SetRef(Rz, SC_Func__NewFunc(Node, Name_space, ErrPlace));
	}
	JB_Decr(Cls);
	if (Rz) {
		(SC_Func_SyntaxIsSet(((SCFunction*)Rz), kSC__FunctionType_Render, true));
	}
	JB_SafeDecr(Rz);
	return Rz;
}

void SC_Func__ObjectifyString(Message* Msg) {
	Msg->Func = JB_SyxSStr;
}

void SC_Func__String_Expand(Message* Msg, SCFunction* Fn) {
	JB_Incr(Msg);
	Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_Parent(Msg)));
	Message* P = JB_Incr(_tmPf7);
	JB_Decr(_tmPf7);
	if (SC_Msg_OperatorIsTmp(P, JB_LUB[1608]) or SC_Msg_OperatorIsTmp(P, JB_LUB[1599])) {
		Msg->Func = JB_SyxStr;
		JB_Decr(Msg);
		JB_Decr(P);
		return;
	}
	bool URL = JB_Msg_OperatorIn(Msg, JB_Syxurl);
	if (URL) {
		JB_FreeIfDead(SC_Func__GetFileString(P, Msg->Name));
		JB_SetRef(Msg, P);
	}
	if (SC_Func__InBuiltFunc(Msg, JB_LUB[1604])) {
		JB_SetRef(Msg->Name, JB_Str_Digest(Msg->Name));
	}
	 else if (JB_Msg_EqualsSyx(P, JB_SyxArg, false)) {
		JB_FreeIfDead(SC_Msg_WrapWith(Msg, JB_SyxTmp, JB_LUB[1878]));
	}
	JB_Decr(P);
	if ((!JB_FreeIfDead(((Message*)JB_Ring_First(Msg))))) {
		SC_Func__ObjectifyString(Msg);
		JB_Decr(Msg);
		return;
	}
	if ((!Fn)) {
		JB_Decr(Msg);
		return;
	}
	Message* _tmPf8 = JB_Incr(SC_Msg_ParentPoint(Msg));
	Message* Point = JB_Incr(_tmPf8);
	JB_Decr(_tmPf8);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Msg);
	JB_String* FSName = JB_Incr(SC_UniqueTmpVar(Fn, JB_LUB[1669]));
	JB_String* StrName = JB_Incr(JB_Str_OperatorPlus(FSName, JB_LUB[1459]));
	JB_Decr(StrName);
	Message* Dot = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1807])));
	Message* _tmPf9 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[870]));
	JB_Tree_SyntaxAppend(Dot, (_tmPf9));
	JB_Decr(_tmPf9);
	Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Dot, (_tmPf10));
	JB_Decr(_tmPf10);
	Message* Decl = JB_Incr(SC_MakeDecl(JB_LUB[870], FSName, Dot, 0));
	JB_Decr(Dot);
	(JB_Ring_PrevSibSet(Point, Decl));
	Message* Errpos = JB_Incr(Msg);
	{
		Message* Item = JB_Incr(((Message*)JB_Ring_First(Msg)));
		while (Item) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(Item)));
			Syntax Syx = Item->Func;
			if ((Syx == JB_SyxEmb) or (Syx == JB_SyxStr)) {
				if (Syx == JB_SyxEmb) {
					JB_SetRef(Errpos, Item);
				}
				SC_Func__ObjectifyString(Item);
			}
			JB_SetRef(Item, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(Item);
		;
	}
	;
	if ((SC__Mod_Curr)) {
		JB_Msg_SyntaxExpect(Errpos, JB_LUB[1241]);
	}
	{
		Message* Item = JB_Incr(((Message*)JB_Ring_First(Msg)));
		while (Item) {
			Message* _Nf4 = JB_Incr(((Message*)JB_Ring_NextSib(Item)));
			Message* _tmPf11 = ({
				Message* __imPf5 = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1250])));
				Message* _tmPf12 = JB_Incr(JB_Syx_Msg(JB_SyxThg, FSName));
				JB_Tree_SyntaxAppend(__imPf5, (_tmPf12));
				JB_Decr(_tmPf12);
				Message* _tmPf13 = ({
					Message* __imPf6 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
					JB_Tree_SyntaxAppend(__imPf6, Item);
					JB_SafeDecr(nil);
					 __imPf6;
				});
				JB_Tree_SyntaxAppend(__imPf5, _tmPf13);
				JB_Decr(_tmPf13);
				JB_SafeDecr(nil);
				 __imPf5;
			});
			(JB_Ring_PrevSibSet(Point, _tmPf11));
			JB_Decr(_tmPf11);
			JB_SetRef(Item, _Nf4);
			JB_Decr(_Nf4);
		};
		JB_Decr(Item);
		;
		JB_Decr(Errpos);
	}
	;
	JB_Decr(Point);
	bool WeAreAppending = false;
	Message* Fnc = JB_Incr(((Message*)JB_Ring_Parent(Msg)));
	if (JB_Msg_EqualsSyx(Fnc, JB_SyxPrm, false)) {
		JB_SetRef(Fnc, ((Message*)JB_Ring_Parent(Fnc)));
		if ((JB_Msg_EqualsSyx(Fnc, JB_SyxDot, true)) and (JB_Msg_SyntaxEquals(Fnc, JB_LUB[1250], true))) {
			WeAreAppending = true;
		}
	}
	JB_Decr(Fnc);
	JB_Msg_BecomeStr(Msg, JB_SyxDot, JB_LUB[1683]);
	Message* _tmPf14 = JB_Incr(JB_Syx_Msg(JB_SyxThg, FSName));
	JB_Decr(FSName);
	JB_Tree_SyntaxAppend(Msg, (_tmPf14));
	JB_Decr(_tmPf14);
	Message* _tmPf15 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Msg, (_tmPf15));
	JB_Decr(_tmPf15);
	JB_Decr(Msg);
	;
	JB_Decr(Decl);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Func__TypedTempMoveOut(Message* Msg, JB_String* Name) {
	JB_Incr(Name);
	MessagePosition Using = JB_Msg_SyntaxUsing(Msg);
	if ((!(JB_Str_Exists(Name)))) {
		SCFunction* _tmPf1 = JB_Incr(SC_Msg_MsgOwningFunc(Msg));
		JB_SetRef(Name, SC_UniqueTmpVar(_tmPf1, JB_LUB[1996]));
		JB_Decr(_tmPf1);
	}
	Message* Repl = JB_Incr((JB_Syx_Msg(JB_SyxThg, Name)));
	JB_FreeIfDead(SC_Msg_ReplaceWith(Msg, Repl));
	Message* _tmPf2 = JB_Incr(SC_Msg_ParentPoint(Repl));
	Message* P = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	Message* Insert = JB_Incr(Msg);
	if (JB_Msg_EqualsSyx(Msg, JB_SyxRel, false)) {
		JB_SetRef(Insert, ({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf0, (Msg));
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
	}
	Message* Dcl = JB_Incr(SC_MakeDecl(JB_LUB[0], Name, Insert, 0));
	(JB_Ring_PrevSibSet(P, Dcl));
	JB_Decr(P);
	if (JB_Msg_OperatorIn(Repl, JB_SyxArg)) {
		JB_Tree_Remove(Repl);
	}
	SCDecl* OldDcl = JB_Incr(SC_Msg_AsDecl(Msg));
	if (OldDcl) {
		JB_SetRef(Insert->Obj, OldDcl);
		JB_SetRef(OldDcl, SC_Decl_CopyDecl(OldDcl, false));
		(SC_Decl_NameSet(OldDcl, Name));
		JB_SetRef(Repl->Obj, OldDcl);
		JB_SetRef(Dcl->Obj, OldDcl);
	}
	JB_Decr(Repl);
	JB_Decr(Insert);
	JB_Decr(OldDcl);
	JB_Decr(Name);
	JB_SafeDecr(Dcl);
	JB_MsgPos_Destructor((&Using));
	return Dcl;
}

Message* SC_Func__TempMoveOut(Message* Msg, Message* Parent) {
	SCDecl* OldDecl = JB_Incr(SC_Msg_AsDecl(Msg));
	if ((!OldDecl)) {
		(JB_Ring_PrevSibSet(Parent, Msg));
		JB_Decr(OldDecl);
		return Msg;
	}
	JB_Decr(OldDecl);
	MessagePosition Using = JB_Msg_SyntaxUsing(Msg);
	SCFunction* _tmPf0 = JB_Incr(SC_Msg_MsgOwningFunc(Msg));
	JB_String* Name = JB_Incr(SC_UniqueTmpVar(_tmPf0, JB_LUB[1996]));
	JB_Decr(_tmPf0);
	Message* NameThing = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, Name));
	JB_FreeIfDead(SC_Msg_ReplaceWith(Msg, NameThing));
	Message* Declmsg = JB_Incr(SC_MakeDecl(JB_LUB[0], Name, Msg, kSC__SCDeclInfo_Body));
	JB_Decr(Name);
	(JB_Ring_PrevSibSet(Parent, Declmsg));
	SCDecl* D = JB_Incr(((SCDecl*)Declmsg->Obj));
	JB_Decr(Declmsg);
	JB_SetRef(NameThing->Obj, D);
	JB_Decr(D);
	JB_SafeDecr(NameThing);
	JB_MsgPos_Destructor((&Using));
	return NameThing;
}

SCDecl* SC_Func__Tran_AfterRel(Message* Msg, SCNode* Name_space, Message* Side) {
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(Msg)));
	Message* Exp = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (JB_Msg_SyntaxEquals(Msg, JB_LUB[214], false)) {
		SCDecl* Ty = JB_Incr(SC_TypeOfExpr(Exp, Name_space, nil));
		if ((!Ty)) {
			JB_Decr(Ty);
			JB_Decr(Exp);
			return nil;
		}
		SCDecl* _tmPf6 = JB_Incr(SC_Decl_MakeReal(Ty));
		JB_Decr(Ty);
		JB_Decr(Exp);
		JB_SafeDecr(_tmPf6);
		return _tmPf6;
	}
	if ((!((JB_Msg_SyntaxEquals(Msg, JB_LUB[308], false)) or (JB_Msg_SyntaxEquals(Msg, JB_LUB[298], false))))) {
		JB_Msg_SyntaxExpect(Msg, nil);
		JB_Decr(Exp);
		return nil;
	}
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(Msg)));
	JB_Decr(P);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
	Message* Exp_copy = nil;
	if ((!JB_Msg_EqualsSyx(Exp, JB_SyxThg, false))) {
		JB_SetRef(Exp_copy, JB_Msg_Copy(Exp, nil));
	}
	SCDecl* Type = JB_Incr(SC_TypeOfExpr(Exp, Name_space, nil));
	if ((!Type)) {
		JB_Decr(Type);
		JB_Decr(Exp_copy);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(Exp);
		return nil;
	}
	if (Type->PointerCount > 0) {
		SCDecl* _tmPf4 = JB_Incr(SC_Decl_CheckMath(Type, Msg));
		JB_Decr(Type);
		JB_Decr(Exp_copy);
		JB_SafeDecr(_tmPf4);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(Exp);
		return _tmPf4;
	}
	int Numc = SC_Class_NumericCount(Type->Type);
	if ((!SC_Class_IsObject(Type->Type)) and ((!Type->HiderFunc) and (Numc <= 1))) {
		JB_Decr(Exp_copy);
		JB_SafeDecr(Type);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(Exp);
		return Type;
	}
	Message* R = nil;
	if (((bool)Numc) or ((bool)Type->HiderFunc)) {
		Message* _tmPf2 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxNum, JB_LUB[449]));
		JB_String* _tmPf3 = JB_Incr(JB_Str_Range(Msg->Name, 0, 1));
		JB_SetRef(R, SC_NewRel(Exp, _tmPf2, _tmPf3));
		JB_Decr(_tmPf2);
		JB_Decr(_tmPf3);
	}
	 else {
		JB_String* Name = JB_Incr(((JB_StringC*)JB_Ternary((JB_Msg_SyntaxEquals(Msg, JB_LUB[298], false)), JB_LUB[1809], JB_LUB[1875])));
		JB_SetRef(R, JB_Syx_OperatorPlus(JB_SyxDot, Name));
		JB_Decr(Name);
		JB_Tree_SyntaxAppend(R, Exp);
		JB_Msg_AppendSyx(R, JB_SyxEmb, JB_LUB[0]);
	}
	JB_Decr(Type);
	if ((!Exp_copy)) {
		JB_SetRef(Exp_copy, JB_Msg_Copy(Exp, nil));
	}
	JB_Decr(Exp);
	JB_Msg_BecomeStr(Msg, JB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Msg, Exp_copy);
	JB_Decr(Exp_copy);
	JB_Msg_AppendSyx(Msg, JB_SyxOpp, JB_LUB[586]);
	JB_Tree_SyntaxAppend(Msg, R);
	JB_Decr(R);
	JB_SetRef(Msg->Obj, nil);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	SCDecl* _tmPf5 = JB_Incr(SC_TypeOfExpr(Msg, Name_space, nil));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

void SC_Func__Tran_All(SCFunction* Fn, Message* S, SCNode* P) {
	JB_Incr(P);
	JB_Incr(S);
	if (SC_TooManyErrors()) {
		JB_Decr(S);
		JB_Decr(P);
		return;
	}
	Syntax F = S->Func;
	if (F == JB_SyxArg) {
		Message* Pr = JB_Incr(((Message*)JB_Ring_Parent(S)));
		if ((!((!JB_Msg_EqualsSyx(Pr, JB_SyxBra, false)) and (!JB_Msg_EqualsSyx(Pr, JB_SyxType, false))))) {
			JB_Decr(S);
			JB_Decr(P);
			JB_Decr(Pr);
			return;
		}
		JB_Decr(Pr);
		SC_CollectDeclsFuncBody(S, P);
	}
	 else if (F == JB_SyxDecl) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(S)));
		JB_SetRef(S, SC_DeclsDefault(_tmPf0));
		JB_Decr(_tmPf0);
		if (S) {
			SC_Func__Tran_All(Fn, S, P);
		}
		JB_Decr(S);
		JB_Decr(P);
		return;
	}
	 else if (F == JB_SyxArr) {
		SC_Func__Tran_Array(S, P);
	}
	 else if (F == JB_SyxType) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(S)));
		SC_Func__Tran_All(Fn, _tmPf1, P);
		JB_Decr(_tmPf1);
		JB_Decr(S);
		JB_Decr(P);
		return;
	}
	 else if (F == JB_SyxTmp) {
		SC_Func__Tran_Temporal(Fn, S, P);
		if (JB_Msg_SyntaxEquals(S, JB_LUB[1699], false)) {
			JB_Decr(S);
			JB_Decr(P);
			return;
		}
	}
	 else if (F == JB_SyxList) {
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(S)));
		if (JB_Msg_EqualsSyx(_tmPf2, JB_SyxItem, false)) {
			SC_Tran_MsgList(Fn, S, P);
		}
		JB_Decr(_tmPf2);
	}
	 else if (F == JB_SyxMsg) {
		SC_Tran_Msg(Fn, S, P);
	}
	 else if ((!((F == JB_SyxThg) or ((F == JB_SyxOpp) or ((F == JB_SyxItem) or (F == JB_SyxPrm)))))) {
		JB_FreeIfDead(SC_TypeOfExpr(S, P, nil));
		if (JB_Msg_EqualsSyx(S, JB_SyxFunc, false)) {
			SC_Func__FastStringOpt(S, P);
		}
	}
	 else if (F == JB_SyxUnit) {
		JB_Decr(S);
		JB_Decr(P);
		return;
	}
	if (((JB_Msg_EqualsSyx(S, JB_SyxArg, false))) and (F != JB_SyxArg)) {
		SCArg* _tmPf3 = JB_Incr(SC_Msg_SCArg(S, P, nil));
		JB_SetRef(P, _tmPf3);
		JB_Decr(_tmPf3);
	}
	Message* Ch = JB_Incr(((Message*)JB_Ring_First(S)));
	while (Ch) {
		Message* N = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
		if (JB_Msg_EqualsSyx(Ch, JB_SyxArg, false)) {
			SCArg* _tmPf4 = JB_Incr(SC_Msg_SCArg(Ch, P, S));
			SC_Func__Tran_All(Fn, Ch, _tmPf4);
			JB_Decr(_tmPf4);
		}
		 else {
			SC_Func__Tran_All(Fn, Ch, P);
		}
		JB_SetRef(Ch, ((Message*)JB_Ring_NextSib(Ch)));
		if ((!Ch) and (((bool)N) and ((bool)JB_FreeIfDead(((Message*)JB_Ring_Parent(N)))))) {
			JB_SetRef(Ch, N);
		}
		JB_Decr(N);
	};
	JB_Decr(Ch);
	JB_Decr(P);
	JB_Decr(S);
}

void SC_Func__Tran_Array(Message* S, SCNode* Name_space) {
	SCDecl* Type = JB_Incr(SC_Msg_AsDecl(S));
	if ((!Type)) {
		JB_Decr(Type);
		return;
	}
	Message* Thg = JB_Incr(SC_Msg_IsSetIntoVar(S));
	if ((!Thg)) {
		Message* _tmPf6 = JB_Incr(SC_Msg_ParentPoint(S));
		JB_SetRef(Thg, SC_Func__TempMoveOut(S, _tmPf6));
		JB_Decr(_tmPf6);
		SCDecl* _tmPf7 = JB_Incr(SC_Msg_AsDecl(Thg));
		SC_Base_TryAdd(Name_space, Thg, _tmPf7, Thg->Name);
		JB_Decr(_tmPf7);
	}
	Message* _tmPf8 = JB_Incr(SC_Msg_NiceParent(S));
	Message* P = JB_Incr(_tmPf8);
	JB_Decr(_tmPf8);
	Message* _tmPf9 = JB_Incr(SC_Msg_ParentPoint(P));
	Message* Place = JB_Incr(_tmPf9);
	JB_Decr(_tmPf9);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(S);
	Message* DotNew = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1807])));
	Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Type->Type->Name));
	JB_Decr(Type);
	JB_Tree_SyntaxAppend(DotNew, (_tmPf10));
	JB_Decr(_tmPf10);
	Message* _tmPf11 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(DotNew, (_tmPf11));
	JB_Decr(_tmPf11);
	if (JB_Msg_OperatorIn(P, JB_SyxDecl)) {
		SCDecl* D = JB_Incr(SC_Msg_AsDecl(P));
		if ((!D)) {
			JB_Decr(D);
			JB_Decr(DotNew);
			JB_MsgPos_Destructor((&_usingf0));
			JB_Decr(Place);
			JB_Decr(P);
			JB_Decr(Thg);
			return;
		}
		JB_SetRef(D->Default, DotNew);
		JB_Decr(D);
	}
	JB_Decr(P);
	SC_Msg_FixMultiArr(S);
	{
		Message* Item = JB_Incr(((Message*)JB_Ring_First(S)));
		while (Item) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(Item)));
			Message* Rel = nil;
			if (JB_Msg_EqualsSyx(Item, JB_SyxItem, false)) {
				JB_Tree_Remove(Item);
				JB_SetRef(Rel, ({
					Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
					Message* _tmPf12 = ({
						Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxAcc, JB_LUB[0])));
						Message* _tmPf13 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Thg->Name));
						JB_Tree_SyntaxAppend(__imPf4, (_tmPf13));
						JB_Decr(_tmPf13);
						Message* _tmPf14 = ({
							Message* __imPf5 = JB_Incr((JB_Syx_Msg(JB_SyxArr, JB_LUB[0])));
							Message* _tmPf15 = JB_Incr(((Message*)JB_Ring_First(Item)));
							JB_Tree_SyntaxAppend(__imPf5, _tmPf15);
							JB_Decr(_tmPf15);
							JB_SafeDecr(nil);
							 __imPf5;
						});
						JB_Tree_SyntaxAppend(__imPf4, _tmPf14);
						JB_Decr(_tmPf14);
						JB_SafeDecr(nil);
						 __imPf4;
					});
					JB_Tree_SyntaxAppend(__imPf3, _tmPf12);
					JB_Decr(_tmPf12);
					Message* _tmPf16 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[586]));
					JB_Tree_SyntaxAppend(__imPf3, (_tmPf16));
					JB_Decr(_tmPf16);
					Message* _tmPf17 = JB_Incr(((Message*)JB_Ring_Last(Item)));
					JB_Tree_SyntaxAppend(__imPf3, _tmPf17);
					JB_Decr(_tmPf17);
					JB_SafeDecr(__imPf3);
					 __imPf3;
				}));
			}
			 else {
				JB_SetRef(Rel, JB_Syx_Msg(JB_SyxDot, JB_LUB[1250]));
				JB_Msg_AppendSyx(Rel, JB_SyxThg, Thg->Name);
				Message* _tmPf18 = JB_Incr(JB_Msg_Msg(Rel, JB_SyxPrm, JB_LUB[0]));
				JB_Tree_SyntaxAppend(_tmPf18, Item);
				JB_Decr(_tmPf18);
			}
			(JB_Ring_NextSibSet(Place, Rel));
			JB_SetRef(Place, Rel);
			JB_FreeIfDead(SC_TypeOfExpr(Rel, Name_space, nil));
			JB_Decr(Rel);
			JB_SetRef(Item, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(Item);
		;
	}
	;
	JB_Decr(Thg);
	JB_Decr(Place);
	JB_FreeIfDead(SC_TypeOfExpr(DotNew, Name_space, nil));
	SC_Msg_SafeReplaceWith(S, DotNew);
	JB_Decr(DotNew);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__Tran_Beep(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	SC_Msg_MiniTran(Node, Name_space, JB_LUB[1483]);
}

void SC_Func__Tran_BlindCasts(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if ((!Fn)) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1107]);
		return;
	}
	Message* Thg = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxThg));
	if (Thg) {
		JB_Tree_Remove(Node);
		Fn->BlindCasts = SC_Msg_Blind(Thg);
	}
	JB_Decr(Thg);
}

void SC_Func__Tran_CppRefs(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if ((!Fn)) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1107]);
		return;
	}
	JB_SetRef(Fn->Refs, SC_CppRefs_Constructor(nil, Node));
	JB_Tree_Remove(Node);
}

void SC_Func__Tran_Debugger(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* Ch = JB_Incr(((Message*)JB_Ring_First(Node)));
	if ((!Ch)) {
		JB_SetRef(Node->Name, JB_LUB[1592]);
		(SC_Msg_TmpTypeSet(Node, kSC__ASMtmp_kDebugger));
		JB_Decr(Ch);
		return;
	}
	if ((!(((JB_Msg_SyntaxEquals(Node, JB_LUB[1592], false))) and ((!JB_FreeIfDead(((Message*)JB_Ring_NextSib(Ch)))))))) {
		JB_Msg_SyntaxExpect(Node, nil);
		JB_Decr(Ch);
		return;
	}
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
		JB_FreeIfDead(SC_ExpandToBool(Ch, Name_space));
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(Node)));
		JB_FreeIfDead(SC_Msg_Negate(_tmPf1));
		JB_Decr(_tmPf1);
		JB_SetRef(Node->Name, JB_LUB[1697]);
		Message* _tmPf2 = JB_Incr(JB_Msg_Msg(Node, JB_SyxArg, JB_LUB[0]));
		Message* Dbg = JB_Incr(JB_Msg_Msg(_tmPf2, JB_SyxTmp, JB_LUB[1592]));
		JB_Decr(_tmPf2);
		(SC_Msg_TmpTypeSet(Dbg, kSC__ASMtmp_kDebugger));
		JB_Decr(Dbg);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Ch);
	SC_Func__Tran_If(Fn, Node, Name_space);
}

void SC_Func__Tran_Deprecate(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* Stuff = JB_Incr(JB_Msg_NeedFirst(Node));
	if ((!Stuff)) {
		JB_Decr(Stuff);
		return;
	}
	if ((!JB_Msg_ExpectLast(Stuff, JB_LUB[0]))) {
		JB_Decr(Stuff);
		return;
	}
	if ((!JB_Msg_EqualsSyx(Stuff, JB_SyxList, false)) and (!JB_Msg_EqualsSyx(Stuff, JB_SyxBra, false))) {
		JB_SetRef(Stuff, SC_Msg_WrapWith(Stuff, JB_SyxList, JB_LUB[0]));
	}
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
		Stuff->Func = JB_SyxPrm;
		JB_Msg_BecomeStr(Node, JB_SyxBra, JB_LUB[0]);
		Message* Dot = JB_Incr(JB_Msg_Msg(Node, JB_SyxDot, JB_LUB[1255]));
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(Stuff)));
		JB_Tree_SyntaxAppend(Dot, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Tree_SyntaxAppend(Dot, Stuff);
		JB_Decr(Dot);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Stuff);
	JB_FreeIfDead(SC_TypeOfExpr(Node, Name_space, nil));
}

void SC_Func__Tran_Description(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if ((!Fn)) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1107]);
		return;
	}
	Message* Str = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxStr));
	if (Str) {
		if ((!Fn->IsDisabled)) {
			if (JB_Str_Exists(Fn->Description)) {
				JB_Msg_SyntaxExpect(Node, JB_LUB[743]);
			}
			JB_SetRef(Fn->Description, Str->Name);
		}
		JB_Tree_Remove(Node);
	}
	JB_Decr(Str);
}

void SC_Func__Tran_DoAt(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* Ch = JB_Incr(((Message*)JB_Ring_First(Node)));
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
		JB_Msg_BecomeStr(Node, JB_SyxFunc, JB_LUB[0]);
		JB_FreeIfDead(JB_Msg_Msg(Node, JB_SyxThg, JB_LUB[813]));
		Message* _tmPf1 = JB_Incr(JB_Msg_Msg(Node, JB_SyxPrm, JB_LUB[0]));
		JB_Tree_SyntaxAppend(_tmPf1, Ch);
		JB_Decr(_tmPf1);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Ch);
	JB_FreeIfDead(SC_TypeOfExpr(Node, Name_space, nil));
}

void SC_Func__Tran_Else(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* P = ((Message*)JB_Ring_Parent(Node));
	if ((!((JB_Msg_EqualsSyx(P, JB_SyxTmp, false)) and ((JB_Msg_SyntaxEquals(P, JB_LUB[1697], false)) or (JB_Msg_SyntaxEquals(P, JB_LUB[1623], false)))))) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1298]);
		return;
	}
}

void SC_Func__Tran_Expect(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* Ch = JB_Incr(JB_Msg_NeedFirst(Node));
	if ((!Ch)) {
		JB_Decr(Ch);
		return;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
	Message* Ch1 = JB_Incr(((Message*)JB_Ring_NextSib(Ch)));
	JB_String* N = JB_Incr(Node->Name);
	JB_SetRef(Node->Name, JB_LUB[1697]);
	if (JB_Str_Equals(N, JB_LUB[1632], false)) {
		JB_SetRef(N, JB_LUB[1540]);
		JB_Msg_ExpectLast(Ch, JB_LUB[0]);
	}
	bool NewStyle = ((JB_Str_Equals(N, JB_LUB[1540], false)) or (JB_Str_Equals(N, JB_LUB[2043], false)));
	if (NewStyle and (!Ch1)) {
		JB_SetRef(Ch1, Ch);
		JB_SetRef(Ch, JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[1648]));
		(JB_Ring_PrevSibSet(Ch1, Ch));
	}
	if (Name_space) {
		JB_FreeIfDead(SC_TypeOfExpr(Ch, Name_space, nil));
	}
	JB_SetRef(Ch, SC_Msg_Negate(Ch));
	Message* Arg = JB_Incr(JB_Msg_Msg(Node, JB_SyxArg, JB_LUB[0]));
	if (((JB_Str_Equals(N, JB_LUB[1635], false))) or (NewStyle)) {
		Message* _tmPf1 = JB_Incr(SC_Msg_ExpectParamsTransform(Ch1, Node->Position, Ch, N));
		JB_Tree_SyntaxAppend(Arg, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else if (JB_Str_Equals(N, JB_LUB[1590], false)) {
		JB_Msg_AppendSyx(Arg, JB_SyxTmp, JB_LUB[1592]);
	}
	JB_Decr(Ch);
	JB_Decr(Ch1);
	if ((!NewStyle)) {
		if (JB_Str_Equals(N, JB_LUB[1765], false)) {
			JB_Msg_AppendSyx(Arg, JB_SyxTmp, JB_LUB[1634]);
		}
		 else {
			Message* _tmPf2 = JB_Incr(JB_Msg_Msg(Arg, JB_SyxTmp, JB_LUB[1898]));
			JB_Msg_AppendSyx(_tmPf2, JB_SyxQues, JB_LUB[1810]);
			JB_Decr(_tmPf2);
		}
	}
	JB_Decr(N);
	JB_Decr(Arg);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__Tran_Fails(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if ((!Fn)) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1107]);
		return;
	}
	(SC_Msg_TmpTypeSet(Node, kSC__ASMtmp_kFail));
	Fn->Badness = (Fn->Badness | 128);
	if (JB_Tree_IsLast(Node)) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1146]);
		return;
	}
}

void SC_Func__Tran_For(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	JB_Incr(Name_space);
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
		JB_Msg_BecomeStr(Node, JB_SyxArg, JB_LUB[0]);
		JB_SetRef(Name_space, SC_Msg_SCArg(Node, Name_space, nil));
		SC_Func__Tran_ForSub(Fn, Node, Name_space);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Name_space);
}

void SC_Func__Tran_ForStart(Message* Arg, Message* Index, SCNode* P) {
	Message* Start = JB_Incr(SC_Msg_GetMarker(Arg, JB_LUB[1958]));
	if ((!Start)) {
		JB_Decr(Start);
		return;
	}
	if ((!Index)) {
		JB_Msg_SyntaxExpect(Arg, JB_LUB[1071]);
		JB_Decr(Start);
		return;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Arg);
	JB_String* CondName = JB_Incr(SC_UniqueTmpVar(P, JB_LUB[1655]));
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Parent(Arg)));
	Message* _tmPf5 = JB_Incr(JB_Msg_Copy(Index, Arg));
	Message* _tmPf4 = JB_Incr(SC_MakeDecl(JB_LUB[0], CondName, _tmPf5, 0));
	JB_Decr(_tmPf5);
	(JB_Ring_PrevSibSet(_tmPf3, _tmPf4));
	JB_Decr(_tmPf3);
	JB_Decr(_tmPf4);
	Message* IfTest = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1697])));
	Message* _tmPf6 = ({
		Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
		Message* _tmPf7 = ({
			Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
			Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxThg, CondName));
			JB_Tree_SyntaxAppend(__imPf2, (_tmPf8));
			JB_Decr(_tmPf8);
			Message* _tmPf9 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[215]));
			JB_Tree_SyntaxAppend(__imPf2, (_tmPf9));
			JB_Decr(_tmPf9);
			Message* _tmPf10 = JB_Incr(JB_Msg_Copy(Index, Arg));
			JB_Tree_SyntaxAppend(__imPf2, _tmPf10);
			JB_Decr(_tmPf10);
			JB_SafeDecr(nil);
			 __imPf2;
		});
		JB_Tree_SyntaxAppend(__imPf1, _tmPf7);
		JB_Decr(_tmPf7);
		JB_SafeDecr(nil);
		 __imPf1;
	});
	JB_Decr(CondName);
	JB_Tree_SyntaxAppend(IfTest, _tmPf6);
	JB_Decr(_tmPf6);
	Message* _tmPf11 = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
	JB_Tree_SyntaxAppend(IfTest, (_tmPf11));
	JB_Decr(_tmPf11);
	(JB_Ring_FirstSet(Arg, IfTest));
	Message* _tmPf12 = JB_Incr(((Message*)JB_Ring_NextSib(IfTest)));
	Message* _tmPf13 = JB_Incr(((Message*)JB_Ring_Last(IfTest)));
	JB_Decr(IfTest);
	SC_Msg_Move(_tmPf12, Start, _tmPf13);
	JB_Decr(_tmPf12);
	JB_Decr(_tmPf13);
	SC_SC_MakeComment(Start);
	JB_Decr(Start);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__Tran_ForSub(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* List = JB_Incr(JB_Msg_NeedFirst(Node));
	if ((!List)) {
		JB_Decr(List);
		return;
	}
	int Bad = 0;
	Message* Index = JB_Incr(((Message*)JB_Ring_NextSib(List)));
	Message* Arg = nil;
	if (JB_Msg_EqualsSyx(Index, JB_SyxArg, false)) {
		JB_SetRef(Arg, Index);
		JB_SetRef(Index, nil);
	}
	 else {
		if (Index) {
			JB_SetRef(Arg, ((Message*)JB_Ring_NextSib(Index)));
		}
		if (Arg) {
			Bad = (Bad + (!JB_Msg_Expect(Arg, JB_SyxArg, nil)));
		}
		 else {
			JB_SetRef(Arg, JB_Msg_Msg(Node, JB_SyxArg, JB_LUB[0]));
		}
	}
	Message* Value = nil;
	JB_String* IterName = JB_Incr(JB_LUB[0]);
	JB_SetRef(List, SC_Msg_UnBra(List));
	if (JB_Msg_EqualsSyx(List, JB_SyxRel, false)) {
		JB_SetRef(Value, ((Message*)JB_Ring_First(List)));
		Message* Opp = JB_Incr(((Message*)JB_Ring_NextSib(Value)));
		if (SC_Msg_OperatorIsOpp(Opp, JB_LUB[1707])) {
			JB_SetRef(List, ((Message*)JB_Ring_NextSib(Opp)));
			Bad = (Bad + (!List));
			if (JB_Msg_EqualsSyx(Value, JB_SyxDot, false)) {
				JB_SetRef(IterName, Value->Name);
				JB_SetRef(Value, JB_Msg_NeedSyx(Value, JB_SyxThg));
				Bad = (Bad + (!Value));
			}
		}
		 else {
			Bad++;
		}
		JB_Decr(Opp);
	}
	SCIterator* Iter = nil;
	SCDecl* Dcl = nil;
	if ((!Bad)) {
		JB_SetRef(Dcl, SC_TypeOfExpr(List, Name_space, nil));
		if ((!Dcl)) {
			JB_Msg_SyntaxExpect(List, JB_LUB[1065]);
		}
	}
	if (Dcl) {
		JB_SetRef(Iter, SC_Decl_GetIteratorAny(Dcl, IterName, Node));
		if (Iter) {
			SC_Iter_Renuqify(Iter, Name_space);
			Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_Parent(Iter->Yield)));
			Bad = (Bad + (!JB_Msg_Expect(_tmPf7, JB_SyxArg, nil)));
			JB_Decr(_tmPf7);
			if (Index == Arg) {
				JB_SetRef(Index, nil);
			}
			 else if ((bool)Index) {
				Bad = (Bad + (!JB_FreeIfDead(JB_Msg_NeedSyx(Index, JB_SyxThg))));
			}
		}
	}
	JB_Decr(IterName);
	if ((!(((bool)Dcl) and ((!Bad) and (((bool)Iter) and ((bool)List)))))) {
		JB_Decr(Dcl);
		JB_Decr(Iter);
		JB_Decr(Value);
		JB_Decr(Arg);
		JB_Decr(Index);
		JB_Decr(List);
		return;
	}
	if (Index) {
		JB_Tree_Remove(Index);
		JB_SetRef(Index, ((Message*)JB_Ring_First(Index)));
	}
	Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_First(Node)));
	JB_Tree_Remove(_tmPf8);
	JB_Decr(_tmPf8);
	bool CanKeepSource = SC_Func__CanKeepAsSource(List, Arg, Dcl);
	int CanKeepValue = ((int)SC_Func__CanKeepAsValue(Iter, Arg, Dcl, Value));
	Message* ListName = JB_Incr(List);
	if ((!CanKeepSource)) {
		JB_String* _tmPf9 = JB_Incr(SC_UniqueTmpVar(Name_space, JB_LUB[998]));
		JB_SetRef(ListName, (JB_Syx_Msg(JB_SyxThg, _tmPf9)));
		JB_Decr(_tmPf9);
		JB_FreeIfDead(SC_MakeDeclOrRel(Node, ListName, List));
	}
	 else if (SC_Decl_IsCArray(Dcl)) {
		JB_SetRef(ListName, (JB_Syx_Msg(JB_SyxQues, JB_LUB[353])));
	}
	SC_Iter_RenameSelf(Iter, ListName);
	JB_Decr(ListName);
	if (CanKeepValue) {
		SC_Iter_RenameValue(Iter, Value);
	}
	 else {
		JB_String* _tmPf11 = JB_Incr(SC_UniqueTmpVar(Name_space, JB_LUB[1369]));
		Message* _tmPf10 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, _tmPf11));
		JB_Decr(_tmPf11);
		SC_Iter_RenameValue(Iter, _tmPf10);
		JB_Decr(_tmPf10);
	}
	Message* _tmPf12 = JB_Incr(((Message*)JB_Ring_NextSib(Arg)));
	Message* PostCond = JB_Incr(SC_Func__AlterPostCond(_tmPf12, Iter->LoopEndCond, Node));
	JB_Decr(_tmPf12);
	if (PostCond) {
		JB_SetRef(PostCond, SC_Msg_NeedBra(PostCond));
	}
	Message* Node2 = JB_Incr(SC_Iter_MakeWhile(Iter, Arg, PostCond));
	JB_Decr(PostCond);
	if ((!Node2)) {
		JB_Decr(Node2);
		JB_Decr(Dcl);
		JB_Decr(Iter);
		JB_Decr(Value);
		JB_Decr(Arg);
		JB_Decr(Index);
		JB_Decr(List);
		return;
	}
	JB_Tree_SyntaxAppend(Node, Node2);
	Message* Iterwhile = JB_Incr(Iter->WhileLoop);
	SC_Msg_CopyAllBefore(Iterwhile, Node2, Node);
	SC_Msg_CopyAllAfter(Iterwhile, Node2, Node);
	JB_Decr(Iterwhile);
	SC_Func__Tran_ForStart(Arg, Iter->Index, Name_space);
	Message* FirstInLoop = JB_Incr(((Message*)JB_Ring_First(Arg)));
	if ((!FirstInLoop)) {
		JB_SetRef(FirstInLoop, (JB_Syx_Msg(JB_SyxSheb, JB_LUB[1625])));
		JB_Tree_SyntaxAppend(Arg, FirstInLoop);
	}
	Message* EndLoopMarker = JB_Incr(SC_Msg_NeedMarker(Arg, JB_LUB[1654], true));
	SC_Msg_CopyAllAfter(Iter->Yield, EndLoopMarker, Node);
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Arg);
		SC_Msg_CopyAllBeforeInto(Iter->Yield, Arg, Node);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	if (SC_Decl_IsCArray(Dcl)) {
		{
			Message* C = JB_Incr(Node);
			Message* _afterf2 = JB_Incr(((Message*)JB_Ring_FlatAfter(Node)));
			while (((bool)(C)) and (C != _afterf2)) {
				Message* _N_f3 = JB_Incr(((Message*)JB_Ring_FlatNext0(C)));
				if ((JB_Msg_EqualsSyx(C, JB_SyxQues, false)) and (JB_Msg_SyntaxEquals(C, JB_LUB[353], false))) {
					Message* _tmPf13 = JB_Incr(JB_Msg_Copy(List, nil));
					JB_FreeIfDead(SC_Msg_ReplaceWith(C, _tmPf13));
					JB_Decr(_tmPf13);
				}
				JB_SetRef(C, _N_f3);
				JB_Decr(_N_f3);
			};
			JB_Decr(C);
			JB_Decr(_afterf2);
			;
		};
	}
	{
		Message* Msg = JB_Incr(Arg);
		Message* _afterf5 = JB_Incr(((Message*)JB_Ring_FlatAfter(Arg)));
		while (((bool)(Msg)) and (Msg != _afterf5)) {
			Message* _N_f6 = JB_Incr(((Message*)JB_Ring_FlatNext0(Msg)));
			if (JB_Msg_EqualsSyx(Msg, JB_SyxTmp, false)) {
				if ((JB_Msg_SyntaxEquals(Msg, JB_LUB[1660], false)) or (JB_Msg_SyntaxEquals(Msg, JB_LUB[2047], false))) {
					JB_SetRef(Msg, ((Message*)JB_Ring_FlatAfter(Msg)));
					JB_Decr(_N_f6);
					continue;
				}
				 else if (JB_Msg_SyntaxEquals(Msg, JB_LUB[1565], false)) {
					SC_Msg_ExpectEmpty(Msg);
					SC_Msg_CopyAllAfterBefore(Iter->Yield, Msg, Node);
				}
				 else if (JB_Msg_SyntaxEquals(Msg, JB_LUB[1566], false)) {
					JB_SetRef(Msg->Name, JB_LUB[1565]);
					SC_Msg_Next_Index(Msg, Iter, Node2);
					JB_SetRef(Msg, ((Message*)JB_Ring_FlatAfter(Msg)));
					JB_Decr(_N_f6);
					continue;
				}
			}
			 else if (JB_Msg_EqualsSyx(Msg, JB_SyxThg, false)) {
				if ((CanKeepValue == 1) and (JB_Msg_SyntaxEquals(Msg, Value->Name, false))) {
					JB_FreeIfDead(SC_Msg_ReplaceWith(Msg, Value));
					CanKeepValue = 2;
				}
			}
			 else if (JB_Msg_EqualsSyx(Msg, JB_SyxType, false)) {
				Message* Ty = JB_Incr(((Message*)JB_Ring_Last(Msg)));
				if (JB_Msg_SyntaxEquals(Ty, JB_LUB[357], false)) {
					if (Dcl->Contains) {
						JB_Msg_BecomeStr(Msg, JB_SyxBra, JB_LUB[0]);
						JB_SetRef(Msg->Obj, Dcl->Contains);
						JB_Tree_Remove(Ty);
					}
					 else {
						Message* _tmPf14 = JB_Incr(((Message*)JB_Ring_First(Msg)));
						JB_FreeIfDead(SC_Msg_ReplaceWith(Msg, _tmPf14));
						JB_Decr(_tmPf14);
					}
				}
				JB_Decr(Ty);
			}
			JB_SetRef(Msg, _N_f6);
			JB_Decr(_N_f6);
		};
		JB_Decr(Msg);
		JB_Decr(_afterf5);
		;
		JB_Decr(List);
	}
	;
	JB_Decr(Dcl);
	SCArg* P2 = JB_Incr(SC_Msg_SCArgNested(Arg, Node, Name_space));
	if ((!P2)) {
		if (true) {
			JB_Msg_SyntaxExpect(Arg, JB_LUB[696]);
		}
	}
	 else {
		if (Index) {
			Message* It_ind = JB_Incr(Iter->Index);
			if (It_ind) {
				Message* _tmPf16 = JB_Incr(JB_Msg_Copy(It_ind, Index));
				Message* _tmPf15 = JB_Incr(SC_MakeDeclOrRel(Arg, Index, _tmPf16));
				JB_Decr(_tmPf16);
				(JB_Ring_PrevSibSet(FirstInLoop, _tmPf15));
				JB_Decr(_tmPf15);
			}
			 else {
				if (true) {
					JB_Msg_SyntaxExpect(Index, JB_LUB[1296]);
				}
			}
			JB_Decr(It_ind);
		}
		if (((bool)Value) and (!CanKeepValue)) {
			Message* _tmPf18 = JB_Incr(JB_Msg_Copy(Iter->Value, Value));
			Message* _tmPf17 = JB_Incr(SC_MakeDeclOrRel(Arg, Value, _tmPf18));
			JB_Decr(_tmPf18);
			(JB_Ring_PrevSibSet(FirstInLoop, _tmPf17));
			JB_Decr(_tmPf17);
		}
		SC_CollectDeclsFuncBodyJustWhatWeNewlyMade(Node, Name_space);
		SC_Func__Tran_While(Fn, Node2, P2);
	}
	JB_Decr(Index);
	JB_Decr(Arg);
	JB_Decr(Value);
	JB_Decr(Iter);
	JB_Decr(Node2);
	JB_Decr(FirstInLoop);
	JB_Decr(P2);
	JB_Tree_Remove(EndLoopMarker);
	JB_Decr(EndLoopMarker);
}

bool SC_Func__Tran_FuncTable(Message* Msg) {
	Message* nameMsg = JB_Incr(JB_Msg_NeedSyx(Msg, JB_SyxThg));
	if ((!nameMsg)) {
		JB_Decr(nameMsg);
		return nil;
	}
	Message* protoMsg = JB_Incr(((Message*)JB_Ring_NextSib(nameMsg)));
	if ((!protoMsg)) {
		JB_Decr(protoMsg);
		JB_Decr(nameMsg);
		return nil;
	}
	if ((!((JB_Msg_EqualsSyx(protoMsg, JB_SyxBra, false)) or ((JB_Msg_EqualsSyx(protoMsg, JB_SyxPrm, false)) or (JB_Msg_EqualsSyx(protoMsg, JB_SyxList, false)))))) {
		JB_Msg_SyntaxExpect(protoMsg, nil);
		JB_Decr(protoMsg);
		JB_Decr(nameMsg);
		return nil;
	}
	Message* Items = JB_Incr(JB_Msg_NextOf(protoMsg, JB_SyxArg));
	if ((!Items)) {
		JB_Decr(Items);
		JB_Decr(protoMsg);
		JB_Decr(nameMsg);
		return nil;
	}
	Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(protoMsg)));
	Message* ProtoFirst = JB_Incr(_tmPf4);
	JB_Decr(_tmPf4);
	JB_String* Name = JB_Incr(nameMsg->Name);
	JB_Decr(nameMsg);
	JB_String* protoName = JB_Incr(ProtoFirst->Name);
	if ((!JB_Msg_EqualsSyx(ProtoFirst, JB_SyxThg, false))) {
		Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxThg, protoName));
		JB_FreeIfDead(SC_Msg_ReplaceWith(protoMsg, (_tmPf5)));
		JB_Decr(_tmPf5);
		JB_SetRef(protoName, JB_Str_OperatorPlus(JB_LUB[881], Name));
		protoMsg->Func = JB_SyxPrm;
		Message* protoMsg2 = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1883])));
		Message* _tmPf6 = JB_Incr(JB_Syx_Msg(JB_SyxThg, protoName));
		JB_Tree_SyntaxAppend(protoMsg2, (_tmPf6));
		JB_Decr(_tmPf6);
		JB_Tree_SyntaxAppend(protoMsg2, protoMsg);
		(JB_Ring_NextSibSet(Msg, protoMsg2));
		JB_Decr(protoMsg2);
	}
	JB_Decr(protoMsg);
	JB_Decr(ProtoFirst);
	JB_SetRef(Items->Name, JB_LUB[1610]);
	Items->Func = JB_SyxArr;
	JB_Tree_Clear(Msg);
	Msg->Func = JB_SyxDecl;
	Message* _tmPf7 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Msg, (_tmPf7));
	JB_Decr(_tmPf7);
	Message* _tmPf9 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Name));
	Message* _tmPf8 = JB_Incr(SC_NewEqRelWithMsgMsg((_tmPf9), Items));
	JB_Decr(_tmPf9);
	JB_Tree_SyntaxAppend(Msg, _tmPf8);
	{
		Message* _Valuef2 = JB_Incr(((Message*)JB_Ring_First(Items)));
		while (_Valuef2) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(_Valuef2)));
			Message* I = JB_Incr(_Valuef2);
			Message* Item_value = JB_Incr(((Message*)JB_Ring_Last(I)));
			Message* Item_name = JB_Incr(((Message*)JB_Ring_First(I)));
			Message* Table_name = JB_Incr(Item_name);
			Message* Sigh = JB_Incr(Item_name);
			bool ListOK = ((JB_Msg_EqualsSyx(Item_name, JB_SyxPrm, false))) and ((JB_Msg_EqualsSyx(I, JB_SyxItem, false)));
			if (ListOK) {
				JB_String* _tmPf10 = JB_Incr(JB_Msg_FirstName(Item_name));
				JB_Msg_BecomeStr(I, JB_SyxTmp, _tmPf10);
				JB_Decr(_tmPf10);
			}
			if (JB_Msg_EqualsSyx(I, JB_SyxTmp, false)) {
				if (JB_Msg_EqualsSyx(Table_name, JB_SyxPrm, false)) {
					if ((!ListOK)) {
						JB_Msg_SyntaxExpect(I, JB_LUB[1221]);
					}
					JB_SetRef(Table_name, ((Message*)JB_Ring_First(Table_name)));
					JB_Tree_Remove(Sigh);
				}
				 else {
					JB_SetRef(Table_name, I);
				}
				JB_SetRef(Item_name, I);
				if ((!Item_value)) {
					JB_Msg_SyntaxExpect(I, JB_LUB[941]);
				}
			}
			 else {
				JB_Msg_Expect(I, JB_SyxItem, nil);
				if (Item_value == Item_name) {
					JB_Msg_Expect(I, JB_SyxNil, nil);
				}
			}
			Message* ARel = nil;
			JB_String* NewName = JB_Incr(JB_LUB[0]);
			if (SC_Msg_OperatorIsBRel(Item_value, JB_LUB[241])) {
				JB_SetRef(ARel, Item_value);
				JB_SetRef(Item_value, ((Message*)JB_Ring_First(Item_value)));
			}
			while (Item_value) {
				if ((JB_Msg_EqualsSyx(Item_value, JB_SyxThg, false)) or ((JB_Msg_EqualsSyx(Item_value, JB_SyxDot, false)) or (JB_Msg_EqualsSyx(Item_value, JB_SyxBra, false)))) {
					if ((!ARel)) {
						JB_SetRef(ARel, (JB_Syx_Msg(JB_SyxBRel, JB_LUB[241])));
					}
					 else {
						JB_SetRef(ARel, JB_Msg_Copy(ARel, nil));
					}
					Message* _tmPf11 = JB_Incr(SC_Msg_UnBra(Item_value));
					JB_SetRef(Item_value, ((Message*)JB_Tree_WrapWith(_tmPf11, ARel)));
					JB_Decr(_tmPf11);
				}
				 else {
					if (JB_Msg_EqualsSyx(Item_value, JB_SyxEmb, false)) {
						JB_Msg_SyntaxExpect(Item_value, JB_LUB[1361]);
					}
					if ((!JB_Msg_EqualsSyx(Item_value, JB_SyxArg, false))) {
						Message* _tmPf12 = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
						JB_SetRef(Item_value, ((Message*)JB_Tree_WrapWith(Item_value, _tmPf12)));
						JB_Decr(_tmPf12);
					}
					if ((!JB_Str_Exists(NewName))) {
						JB_String* _tmPf14 = JB_Incr(SC_Msg_CollectFuncTableName(Item_name));
						JB_String* _tmPf13 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1425], _tmPf14));
						JB_Decr(_tmPf14);
						JB_SetRef(NewName, JB_Str_OperatorPlus(Name, _tmPf13));
						JB_Decr(_tmPf13);
						Message* _tmPf15 = JB_Incr(SC_Msg_CollectionPlace(Msg));
						Message* _tmPf17 = JB_Incr(JB_Syx_Msg(JB_SyxThg, protoName));
						Message* _tmPf16 = JB_Incr(SC_Func__ArgToFunc(NewName, (_tmPf17), Item_value));
						JB_Decr(_tmPf17);
						JB_Tree_SyntaxAppend(_tmPf15, _tmPf16);
						JB_Decr(_tmPf15);
						JB_Decr(_tmPf16);
					}
					Message* _tmPf18 = ({
						Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[241])));
						Message* _tmPf19 = JB_Incr(JB_Syx_Msg(JB_SyxThg, NewName));
						JB_Tree_SyntaxAppend(__imPf3, (_tmPf19));
						JB_Decr(_tmPf19);
						JB_SafeDecr(nil);
						 __imPf3;
					});
					JB_Tree_SyntaxAppend(I, _tmPf18);
					JB_Decr(_tmPf18);
				}
				JB_String* Iname = JB_Incr(I->Name);
				if (((JB_Msg_EqualsSyx(I, JB_SyxTmp, false))) and ((bool)Table_name)) {
					Message* _tmPf20 = JB_Incr(JB_Syx_Msg(JB_SyxStr, Table_name->Name));
					(JB_Ring_FirstSet(I, (_tmPf20)));
					JB_Decr(_tmPf20);
					JB_Msg_BecomeStr(I, JB_SyxItem, JB_LUB[0]);
				}
				if (((!JB_Msg_EqualsSyx(Sigh, JB_SyxPrm, false))) or JB_Tree_IsLast(Table_name)) {
					JB_Decr(Iname);
					break;
				}
				Message* Newi = JB_Incr((JB_Syx_Msg(JB_SyxTmp, Iname)));
				JB_Decr(Iname);
				(JB_Ring_PrevSibSet(I, Newi));
				JB_SetRef(I, Newi);
				JB_Decr(Newi);
			};
			JB_Decr(I);
			JB_Decr(Item_value);
			JB_Decr(Item_name);
			JB_Decr(Table_name);
			JB_Decr(ARel);
			JB_Decr(NewName);
			;
			JB_Decr(Sigh);
			JB_SetRef(_Valuef2, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(_Valuef2);
		;
		JB_Decr(_tmPf8);
	}
	;
	JB_Decr(Items);
	JB_Decr(Name);
	JB_Decr(protoName);
	return false;
}

void SC_Func__Tran_If(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	(SC_Msg_TmpTypeSet(Node, kSC__ASMtmp_kIf));
	SC_Func__Tran_IfSub(Node, Name_space);
}

void SC_Func__Tran_Ifn(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* F = JB_Incr(JB_Msg_NeedFirst(Node));
	if (F) {
		JB_SetRef(Node->Name, JB_LUB[1697]);
		JB_FreeIfDead(SC_Msg_Negate(F));
		SC_Func__Tran_If(Fn, Node, Name_space);
	}
	JB_Decr(F);
}

void SC_Func__Tran_IfSub(Message* Node, SCNode* Name_space) {
	Message* Cond = JB_Msg_NeedFirst(Node);
	if ((!Cond)) {
		return;
	}
	Message* Arg = ((Message*)JB_Ring_NextSib(Cond));
	if (Arg) {
		if ((!JB_Msg_Expect(Arg, JB_SyxArg, nil))) {
			return;
		}
	}
	 else {
		Arg = JB_Syx_Msg(JB_SyxArg, JB_LUB[0]);
		if (JB_Msg_SyntaxEquals(Node, JB_LUB[1697], false)) {
			JB_Msg_AppendSyx(Arg, JB_SyxTmp, JB_LUB[1592]);
		}
		(JB_Ring_NextSibSet(Cond, Arg));
	}
	Message* SubTest = ((Message*)JB_Ring_NextSib(Arg));
	if (SubTest) {
		if ((!(SC_Msg_OperatorIsTmp(SubTest, JB_LUB[1623]) or SC_Msg_OperatorIsTmp(SubTest, JB_LUB[1621])))) {
			JB_Msg_SyntaxExpect(SubTest, nil);
			return;
		}
		JB_Msg_ExpectLast(SubTest, JB_LUB[0]);
		if (JB_Msg_SyntaxEquals(SubTest, JB_LUB[1623], false)) {
			(SC_Msg_TmpTypeSet(SubTest, kSC__ASMtmp_kElseIf));
			SC_Func__Tran_IfSub(SubTest, Name_space);
		}
		 else {
			Message* ElseArg = ((Message*)JB_Ring_First(SubTest));
			if (ElseArg) {
				if ((!(!JB_Msg_SyntaxEquals(ElseArg, JB_LUB[1697], true)))) {
					JB_Msg_SyntaxExpect(ElseArg, JB_LUB[1356]);
				}
				JB_Msg_Expect(ElseArg, JB_SyxArg, nil);
			}
			 else {
				JB_FreeIfDead(JB_Msg_Msg(SubTest, JB_SyxArg, JB_LUB[0]));
			}
		}
	}
	Name_space = SC_Msg_SCArg(Arg, Name_space, nil);
	if ((!Name_space)) {
		return;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
	Cond = SC_ExpandToBool(Cond, Name_space);
	if ((!Cond)) {
		0;
	}
	 else if (SC_Msg_IsAlwaysFalse(Cond)) {
		SC_Msg_ElseNeverFires(Cond);
	}
	 else {
		JB_FreeIfDead(SC_Msg_NeedBra(Cond));
		if (JB_Msg_EqualsSyx(((Message*)JB_Ring_First(Cond)), JB_SyxArg, false)) {
			JB_SetRef(SC_Msg_WrapWith(Cond, JB_SyxBra, JB_LUB[0])->Obj, Cond->Obj);
		}
		SC_Func__Tran_Isa(Node, Name_space);
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__Tran_Isa(Message* S, SCNode* P) {
	if (SC__IsaTester_T.InUse) {
		JB_Msg_SyntaxExpect(S, JB_LUB[1318]);
		return;
	}
	SC__IsaTester_T.InUse = true;
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(S)));
	if (SC_Comp__CollectIsaTests(_tmPf1)) {
		int N = SC__IsaTester_T.Count;
		{
			int I = 0;
			while (I < N) {
				Message* Isa_ = JB_Incr(SC__IsaTester_T.Items[I]);
				Message* _tmPf2 = JB_Incr(JB_Msg_FindSyx(S, JB_SyxArg));
				SC_Func__Tran_OneIsa(Isa_, _tmPf2, P);
				JB_Decr(Isa_);
				JB_Decr(_tmPf2);
				I++;
			};
		};
	}
	JB_Decr(_tmPf1);
	SC__IsaTester_T.InUse = false;
	SC__IsaTester_T.Count = 0;
}

void SC_Func__Tran_Log(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
		Message* F = JB_Incr(((Message*)JB_Ring_First(Node)));
		JB_Msg_AppendSyx(Node, JB_SyxThg, JB_LUB[1869]);
		Message* _tmPf1 = JB_Incr(JB_Msg_Msg(Node, JB_SyxPrm, JB_LUB[0]));
		JB_Tree_SyntaxAppend(_tmPf1, F);
		JB_Decr(F);
		JB_Decr(_tmPf1);
		Node->Func = JB_SyxDot;
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_FreeIfDead(SC_TypeOfExpr(Node, Name_space, nil));
}

void SC_Func__Tran_NotAllowed(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if ((!SC_Msg_TmpType(Node))) {
		if (true) {
			JB_Msg_SyntaxExpect(Node, nil);
		}
	}
}

void SC_Func__Tran_Once(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* Arg = JB_Incr(JB_Msg_NeedSyx(Node, JB_SyxArg));
	if ((!Arg)) {
		JB_Decr(Arg);
		return;
	}
	if ((!JB_Msg_ExpectLast(Arg, JB_LUB[0]))) {
		JB_Decr(Arg);
		return;
	}
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
		JB_SetRef(Node->Name, JB_LUB[1697]);
		JB_String* _tmPf2 = JB_Incr(JB_int_RenderFS(((++SC__Func_OnceCount)), nil));
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1842], _tmPf2));
		JB_Decr(_tmPf2);
		Message* _tmPf3 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[1648]));
		JB_String* Obj = JB_Incr(SC_Base_LateAddTempory(SC__Comp_program, JB_LUB[1520], _tmPf1, _tmPf3, Node));
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf3);
		Message* Rel = JB_Incr(JB_Syx_OperatorPlus(JB_SyxRel, JB_LUB[0]));
		JB_Msg_AppendSyx(Rel, JB_SyxThg, Obj);
		JB_Msg_AppendSyx(Rel, JB_SyxOpp, JB_LUB[586]);
		JB_Msg_AppendSyx(Rel, JB_SyxThg, JB_LUB[2004]);
		(JB_Ring_FirstSet(Arg, Rel));
		JB_Decr(Rel);
		Message* Brel = JB_Incr(JB_Syx_OperatorPlus(JB_SyxBRel, JB_LUB[214]));
		JB_Msg_AppendSyx(Brel, JB_SyxThg, Obj);
		JB_Decr(Obj);
		(JB_Ring_FirstSet(Node, Brel));
		JB_Decr(Brel);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(Arg);
	SC_Func__Tran_If(Fn, Node, Name_space);
}

void SC_Func__Tran_OneIsa(Message* Isa_f, Message* Arg, SCNode* Space) {
	if ((!Arg)) {
		return;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(Isa_f)));
	Message* List = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(List)));
	JB_Decr(List);
	Message* L = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(L)));
	Message* R = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	SCClass* Cls = JB_Incr(SC_Msg_ObjCls(R));
	if ((!Cls)) {
		JB_Msg_SyntaxExpect(R, JB_LUB[1292]);
		JB_Decr(Cls);
		JB_Decr(R);
		JB_Decr(L);
		return;
	}
	if ((Cls->IsRole)) {
		JB_Msg_SyntaxExpect(R, JB_LUB[1293]);
		JB_Decr(Cls);
		JB_Decr(R);
		JB_Decr(L);
		return;
	}
	JB_Decr(R);
	SCDecl* OldDecl = JB_Incr(SC_Base_LookUpVarDecl(Space, L->Name));
	if ((!OldDecl)) {
		JB_Decr(OldDecl);
		JB_Decr(Cls);
		JB_Decr(L);
		return;
	}
	SCDecl* NewDecl = JB_Incr(SC_Decl_CopyDecl(OldDecl, false));
	(SC_Decl_SyntaxIsSet(NewDecl, kSC__SCDeclInfo_Body, true));
	(SC_Decl_IsTypeImproveSet(NewDecl, true));
	JB_SetRef(NewDecl->IsLookupOnly, OldDecl);
	JB_Decr(OldDecl);
	JB_SetRef(NewDecl->Type, Cls);
	SCDecl* Oldcont = JB_Incr(NewDecl->Contains);
	SCDecl* It = JB_Incr(Cls->Contained);
	JB_Decr(Cls);
	if (It) {
		if ((!Oldcont) or SC_Class_Real_Isa(It->Type, Oldcont->Type)) {
			JB_SetRef(NewDecl->Contains, It);
		}
	}
	JB_Decr(Oldcont);
	JB_Decr(It);
	if ((!(Space->Access))) {
		JB_SetRef(Space->Access, JB_Dict_Constructor(nil));
	}
	JB_String* _tmPf3 = JB_Incr(JB_Str_LowerCase(L->Name));
	JB_Decr(L);
	(JB_Dict_ValueSet(Space->Access, _tmPf3, NewDecl));
	JB_Decr(NewDecl);
	JB_Decr(_tmPf3);
}

void SC_Func__Tran_Print(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
		Message* Prm = JB_Incr(JB_Syx_Msg(JB_SyxPrm, JB_LUB[0]));
		JB_Tree_TakeAllFrom(Prm, Node);
		JB_Tree_SyntaxAppend(Node, Prm);
		JB_Decr(Prm);
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Node->Name));
		(JB_Ring_FirstSet(Node, (_tmPf1)));
		JB_Decr(_tmPf1);
		JB_Msg_BecomeStr(Node, JB_SyxFunc, JB_LUB[0]);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_FreeIfDead(SC_TypeOfExpr(Node, Name_space, nil));
}

void SC_Func__Tran_Quit(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	SC_Msg_MiniTran(Node, Name_space, JB_LUB[1483]);
}

void SC_Func__Tran_Rejoin(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	(SC_Msg_TmpTypeSet(Node, kSC__ASMtmp_kRejoin));
	Message* P = JB_Incr(((Message*)JB_Ring_First(Node)));
	if (JB_Msg_EqualsSyx(P, JB_SyxArg, false)) {
		SCArg* Arg = JB_Incr(SC_Msg_AsArg(P));
		if ((!(((bool)Arg) and Arg->IsStatementExpr))) {
			JB_Msg_SyntaxExpect(Node, JB_LUB[722]);
			JB_Decr(Arg);
			JB_Decr(P);
			return;
		}
		JB_Decr(Arg);
		Message* N = JB_Incr(((Message*)JB_Ring_NextSib(P)));
		if (N) {
			JB_Msg_SyntaxExpect(Node, JB_LUB[670]);
			JB_Decr(N);
			JB_Decr(P);
			return;
		}
		JB_Decr(N);
	}
	JB_Decr(P);
}

bool SC_Func__Tran_Render(Message* Msg, SCClass* Cls) {
	MessagePosition Using2 = JB_Msg_SyntaxUsing(Msg);
	bool _tmPf0 = SC_Func__Tran_RenderSub(Msg, Cls);
	JB_MsgPos_Destructor((&Using2));
	return _tmPf0;
}

bool SC_Func__Tran_RenderSub(Message* Msg, SCClass* Cls) {
	JB_SetRef(Msg->Name, JB_LUB[1673]);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Msg)));
	bool IsPureRender = (!JB_Msg_EqualsSyx(_tmPf0, JB_SyxThg, false));
	JB_Decr(_tmPf0);
	if (IsPureRender) {
		Message* _tmPf1 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[1174]));
		(JB_Ring_FirstSet(Msg, _tmPf1));
		JB_Decr(_tmPf1);
		if (Cls) {
			JB_SetRef(Msg->Name, JB_LUB[1512]);
		}
	}
	Message* Arg = JB_Incr(SC_Msg_NormaliseFunc(Msg, nil));
	Message* Name = JB_Incr(((Message*)JB_Ring_First(Msg)));
	Message* Params = JB_Incr(((Message*)JB_Ring_NextSib(Name)));
	JB_Decr(Name);
	if (SC_Msg_IsBehaviour(Msg)) {
		JB_Msg_AppendSyx(Params, JB_SyxThg, JB_LUB[1894]);
	}
	 else {
		SC_Msg_CopyAllInto(SC__SCStrings_RenderNewParams, Params, false);
	}
	JB_Decr(Params);
	if (JB_FreeIfDead(JB_Msg_FindNested(Msg, JB_SyxThg, JB_LUB[1669], false))) {
		SC_Msg_CopyAllBeforeInto(SC__SCStrings_RenderFinish, Arg, nil);
		SC_Msg_CopyAllAfterInto(SC__SCStrings_RenderFinish, Arg, nil);
	}
	JB_Decr(Arg);
	if (SC_Msg_IsBehaviour(Msg)) {
		Message* _tmPf2 = JB_Incr(((Message*)JB_Tree_Second(Msg)));
		JB_Tree_Remove(_tmPf2);
		JB_Decr(_tmPf2);
		return true;
	}
	return false;
}

Message* SC_Func__Tran_Result(SCFunction* F) {
	SCDecl* Type = F->ReturnType;
	Message* Src = SC_Func_SourceArg(F);
	if ((!(((bool)Type) and (((bool)Src) and (!(SC_Msg_OperatorIsTmp(((Message*)JB_Ring_Last(Src)), JB_LUB[1898]))))))) {
		return nil;
	}
	Message* Errs = ((Message*)JB_Ring_Last(Src));
	if ((!Errs)) {
		Errs = Src;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Errs);
	JB__Tk_Using.Position = -1;
	Message* Ret = SC_Decl_WriteDeclFull(Type, JB_LUB[1909], 0);
	(JB_Ring_FirstSet(Src, Ret));
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return Ret;
}

void SC_Func__Tran_ResultFinish(SCFunction* F, Message* R_z, SCNode* Space) {
	Message* Src = SC_Func_SourceArg(F);
	SCDecl* D = SC_Msg_MsgDecl(R_z);
	bool Used = (((bool)D) and SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_UsedByCode));
	SC_Msg_StartUsingAfter(Src);
	if ((!Used)) {
		JB_Tree_Remove(R_z);
	}
	 else if (!(SC_Decl_SyntaxIs(D, kSC__SCDeclInfo_SetTo))) {
		SC_Msg_NotNilRZ(R_z, F->ReturnType, Space);
	}
	if ((!((SC_SCBlockage_SyntaxIs(SC_Msg_Blocks(Src), kSC__SCBlockage_Return)) or (SC_Msg_OperatorIsTmp(((Message*)JB_Ring_Last(Src)), JB_LUB[1898]))))) {
		Message* Ret = JB_Msg_Msg(Src, JB_SyxTmp, JB_LUB[1898]);
		(SC_Msg_TmpTypeSet(Ret, kSC__ASMtmp_kReturn));
		if (Used) {
			JB_SetRef(JB_Msg_Msg(Ret, JB_SyxThg, JB_LUB[1909])->Obj, D);
		}
		 else {
			JB_Tree_SyntaxAppend(Ret, SC_Decl_CreateDefault(F->ReturnType, Src, true));
		}
	}
	JB__Tk_Using.Flags = 0;
}

void SC_Func__Tran_Return(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if ((!Fn)) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1107]);
		return;
	}
	if (SC_Msg_TmpType(Node) == kSC__ASMtmp_kReturn) {
		JB_DoAt(1);
	}
	(SC_Msg_TmpTypeSet(Node, kSC__ASMtmp_kReturn));
	if ((!JB_Tree_IsLast(Node))) {
		if ((!(!SC_Func_SyntaxIs(Fn, kSC__FunctionType_ConOrDes)))) {
			JB_Msg_SyntaxExpect(Node, JB_LUB[1399]);
			return;
		}
	}
	SC_Func_CheckReturnValue(Fn, Node);
	SC_Msg_LastInBlock(Node, kSC__SCBlockage_Return);
	Message* _tmPf0 = JB_Incr(SC_Func_SourceArg(Fn));
	SC_Msg_CheckNotInStateExpr(Node, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_Func__Tran_Sdt(Message* Exp) {
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
	Message* F = JB_Incr((JB_Syx_Msg(JB_SyxThg, JB_LUB[1933])));
	F->RangeLength = 1;
	(JB_Ring_FirstSet(Exp, F));
	JB_Decr(F);
	Exp->Func = JB_SyxDot;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__Tran_Strings(Message* Start, SCFunction* Fn) {
	{
		Message* Msg = Start;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Start));
		while (((bool)(Msg)) and (Msg != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Msg));
			Syntax F = Msg->Func;
			if (F == JB_SyxStr) {
				SC_Func__String_Expand(Msg, Fn);
			}
			Msg = _N_f2;
		};
		;
	};
}

void SC_Func__Tran_Swap(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	(SC_Msg_TmpTypeSet(Node, kSC__ASMtmp_kSwap));
	if ((!JB_Tree_SyntaxEquals(Node, 2, false))) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[977]);
		return;
	}
	JB_SetRef(Node->Name, JB_LUB[970]);
	SC_Func__Tran_Print(Fn, Node, Name_space);
}

Message* SC_Func__Tran_Syx(Message* Msg) {
	JB_SetRef(Msg->Name, JB_LUB[1691]);
	Message* Name = JB_Incr(JB_Msg_NeedSyx(Msg, JB_SyxThg));
	if ((!Name)) {
		JB_Decr(Name);
		return nil;
	}
	Message* Arg = JB_Incr(JB_Msg_Last(Msg, JB_SyxArg));
	if ((!Arg)) {
		JB_Decr(Arg);
		JB_Decr(Name);
		return nil;
	}
	JB_Decr(Arg);
	Message* _tmPf5 = JB_Incr(JB_Msg_FindSyx(Msg, JB_SyxBra));
	Message* Params = JB_Incr(JB_Msg_FindSyx(_tmPf5, JB_SyxThg));
	JB_Decr(_tmPf5);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Msg);
	if ((!Params)) {
		JB_SetRef(Params, (JB_Syx_Msg(JB_SyxThg, JB_LUB[0])));
		Message* _tmPf6 = ({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf1, Params);
			JB_SafeDecr(nil);
			 __imPf1;
		});
		(JB_Ring_NextSibSet(Name, _tmPf6));
		JB_Decr(_tmPf6);
	}
	JB_String* Name2 = JB_Incr(Params->Name);
	JB_String* OldName = JB_Incr(Name->Name);
	JB_String* SyxName = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1261], OldName));
	JB_SetRef(Name->Name, JB_Str_OperatorPlus(OldName, JB_LUB[1439]));
	JB_SetRef(Params->Name, JB_LUB[1665]);
	JB_Decr(Params);
	if (JB_Str_Length(OldName) > 4) {
		JB_Msg_SyntaxExpect(Msg, JB_LUB[1046]);
		JB_Decr(SyxName);
		JB_Decr(OldName);
		JB_Decr(Name2);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(Name);
		return nil;
	}
	Message* DotNew = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1234])));
	Message* _tmPf7 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1976]));
	JB_Tree_SyntaxAppend(DotNew, (_tmPf7));
	JB_Decr(_tmPf7);
	Message* _tmPf8 = ({
		Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		Message* _tmPf9 = ({
			Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxDot, Name->Name)));
			Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1007]));
			JB_Tree_SyntaxAppend(__imPf3, (_tmPf10));
			JB_Decr(_tmPf10);
			Message* _tmPf11 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
			JB_Tree_SyntaxAppend(__imPf3, (_tmPf11));
			JB_Decr(_tmPf11);
			JB_SafeDecr(nil);
			 __imPf3;
		});
		JB_Tree_SyntaxAppend(__imPf2, _tmPf9);
		JB_Decr(_tmPf9);
		JB_String* _tmPf13 = JB_Incr(JB_Str_LowerCase(OldName));
		Message* _tmPf12 = JB_Incr(JB_Syx_Msg(JB_SyxStr, _tmPf13));
		JB_Decr(_tmPf13);
		JB_Tree_SyntaxAppend(__imPf2, (_tmPf12));
		JB_Decr(_tmPf12);
		Message* _tmPf14 = JB_Incr(JB_Syx_Msg(JB_SyxStr, Name2));
		JB_Tree_SyntaxAppend(__imPf2, (_tmPf14));
		JB_Decr(_tmPf14);
		JB_SafeDecr(nil);
		 __imPf2;
	});
	JB_Decr(Name);
	JB_Decr(Name2);
	JB_Tree_SyntaxAppend(DotNew, _tmPf8);
	JB_Decr(_tmPf8);
	Message* _tmPf15 = JB_Incr(JB_Msg_Ancestor(Msg, JB_SyxArg));
	Message* ArgPlace = JB_Incr(JB_Msg_Ancestor(_tmPf15, JB_SyxArg));
	JB_Decr(_tmPf15);
	Message* Dcl = JB_Incr(SC_MakeDecl(JB_LUB[1976], SyxName, DotNew, 0));
	JB_Decr(SyxName);
	JB_Decr(DotNew);
	JB_Tree_SyntaxAppend(ArgPlace, Dcl);
	JB_Decr(ArgPlace);
	Message* Fn_msg = JB_Incr((JB_Syx_Msg(JB_SyxFunc, JB_LUB[0])));
	Message* _tmPf16 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1976]));
	JB_Tree_SyntaxAppend(Fn_msg, (_tmPf16));
	JB_Decr(_tmPf16);
	Message* _tmPf17 = ({
		Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		Message* _tmPf18 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1482]));
		JB_Tree_SyntaxAppend(__imPf4, (_tmPf18));
		JB_Decr(_tmPf18);
		JB_SafeDecr(nil);
		 __imPf4;
	});
	JB_Tree_SyntaxAppend(Fn_msg, _tmPf17);
	JB_Decr(_tmPf17);
	Message* _tmPf19 = JB_Incr(((Message*)JB_Ring_First(Dcl)));
	JB_FreeIfDead(SC_Msg_ReplaceWith(_tmPf19, Fn_msg));
	JB_Decr(Fn_msg);
	JB_Decr(_tmPf19);
	JB_Array_SyntaxAppend(SC__Comp_SyxArray, OldName);
	JB_Decr(OldName);
	SC_Base_CollectOne(SC__Comp_program, Dcl, true);
	JB_Decr(Dcl);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return Msg;
}

void SC_Func__Tran_Temporal(SCFunction* Fn, Message* S, SCNode* Name_space) {
	DTWrap* TmpInt = ((DTWrap*)JB_Dict_ValueStr(SC__Func_TemporalStatements, S->Name));
	if ((!TmpInt)) {
		JB_Msg_SyntaxExpect(S, nil);
		return;
	}
	(((FP_TranFunc)JB_Wrap_First(TmpInt)))(Fn, S, Name_space);
}

void SC_Func__Tran_Using(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	Message* With = JB_Incr(JB_Msg_NeedFirst(Node));
	if ((!With)) {
		JB_Decr(With);
		return;
	}
	Message* Start = JB_Incr(Node);
	Message* Arg = JB_Incr(((Message*)JB_Ring_NextSib(With)));
	if (Arg) {
		if ((!(JB_Msg_Expect(Arg, JB_SyxArg, nil) and JB_Msg_ExpectLast(Arg, JB_LUB[0])))) {
			JB_Decr(Arg);
			JB_Decr(Start);
			JB_Decr(With);
			return;
		}
		JB_SetRef(Start, nil);
	}
	 else {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Parent(Node)));
		JB_SetRef(Arg, _tmPf1);
		JB_Decr(_tmPf1);
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
	JB_String* Name = JB_Incr(SC_UniqueTmpVar(SC__Func_CurrFunc, JB_LUB[2026]));
	Message* WithFirst = JB_Incr(((Message*)JB_Ring_First(With)));
	if ((!JB_Msg_EqualsSyx(With, JB_SyxBra, false))) {
		JB_SetRef(WithFirst, With);
		Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
		(JB_Ring_FirstSet(Node, _tmPf2));
		JB_Decr(_tmPf2);
	}
	JB_Decr(With);
	Message* UsingObj = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1259])));
	JB_Tree_SyntaxAppend(UsingObj, WithFirst);
	JB_Decr(WithFirst);
	Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(UsingObj, (_tmPf3));
	JB_Decr(_tmPf3);
	Message* Item = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1260])));
	Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Name));
	JB_Tree_SyntaxAppend(Item, (_tmPf4));
	JB_Decr(_tmPf4);
	Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Item, (_tmPf5));
	JB_Decr(_tmPf5);
	Message* Decl = JB_Incr(SC_MakeDecl(JB_LUB[0], Name, UsingObj, 0));
	JB_Decr(Name);
	JB_Decr(UsingObj);
	JB_Tree_AppendAfter(Arg, Decl, Start);
	JB_Decr(Start);
	JB_Decr(Decl);
	Message* _tmPf6 = JB_Incr(SC_Msg_UnReachable(Arg));
	JB_Tree_AppendBefore(Arg, Item, _tmPf6);
	JB_Decr(Item);
	JB_Decr(_tmPf6);
	if (JB_Msg_InMsg(Arg, Node)) {
		JB_SetRef(Node->Name, JB_LUB[1697]);
		Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_First(Node)));
		Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[2004]));
		JB_Tree_SyntaxAppend(_tmPf7, (_tmPf8));
		JB_Decr(_tmPf7);
		JB_Decr(_tmPf8);
	}
	 else {
		SC_SC_MakeComment(Node);
	}
	JB_Decr(Arg);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__Tran_Visible(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if ((!Fn)) {
		JB_Msg_SyntaxExpect(Node, JB_LUB[1107]);
		return;
	}
	SC_Base_LoadVisibility(Fn, Node);
}

void SC_Func__Tran_While(SCFunction* Fn, Message* Node, SCNode* Name_space) {
	if (SC_Msg_TmpType(Node) == kSC__ASMtmp_kWhile) {
		return;
	}
	JB_SetRef(Node->Name, JB_LUB[2047]);
	(SC_Msg_TmpTypeSet(Node, kSC__ASMtmp_kWhile));
	Message* Cond = JB_Incr(JB_Msg_NeedFirst(Node));
	if ((!Cond)) {
		JB_Decr(Cond);
		return;
	}
	Message* Arg = JB_Incr(((Message*)JB_Ring_NextSib(Cond)));
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Node);
	if (JB_Msg_EqualsSyx(Cond, JB_SyxArg, false)) {
		JB_SetRef(Cond, (JB_Syx_Msg(JB_SyxThg, JB_LUB[2004])));
		(JB_Ring_FirstSet(Node, Cond));
		JB_SetRef(Arg, ((Message*)JB_Ring_NextSib(Cond)));
	}
	 else {
		if ((!(Arg))) {
			JB_SetRef(Arg, JB_Msg_GiveArg(Node));
		}
		Message* Decl = JB_Incr(((Message*)JB_Ring_First(Cond)));
		if (JB_Msg_EqualsSyx(Decl, JB_SyxDecl, false)) {
			Cond->Func = JB_SyxBra;
			JB_SetRef(Cond, JB_Msg_Msg(Cond, JB_SyxThg, JB_LUB[2004]));
			(JB_Ring_FirstSet(Arg, Decl));
			Message* Dname = JB_Incr(SC_Msg_DeclName(Decl));
			if (Dname) {
				Message* _tmPf4 = JB_Incr(JB_Msg_Copy(Dname, nil));
				Message* _tmPf3 = JB_Incr(JB_Macro_CallFast(SC__Macros_WhileDecl, _tmPf4, nil));
				JB_Decr(_tmPf4);
				(JB_Ring_NextSibSet(Decl, _tmPf3));
				JB_Decr(_tmPf3);
			}
			JB_Decr(Dname);
		}
		 else {
			JB_SetRef(Cond, SC_ExpandToBool(Cond, Name_space));
			if ((!Cond)) {
				JB_Decr(Decl);
				JB_MsgPos_Destructor((&_usingf0));
				JB_Decr(Arg);
				JB_Decr(Cond);
				return;
			}
		}
		JB_Decr(Decl);
	}
	JB_FreeIfDead(SC_Msg_NeedBra(Cond));
	SC_Msg_CheckContinuesAndExits(Arg);
	SC_Func__Tran_Isa(Node, Name_space);
	Message* ExitCond = JB_Incr(((Message*)JB_Ring_NextSib(Arg)));
	if (JB_Msg_Expect(ExitCond, JB_SyxBra, nil)) {
		JB_Tree_Remove(ExitCond);
		JB_SetRef(ExitCond, SC_Msg_Negate(ExitCond));
		Message* Exit = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1634])));
		Message* _tmPf5 = ({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1697])));
			Message* _tmPf6 = JB_Incr(SC_Msg_NeedBra(ExitCond));
			JB_Tree_SyntaxAppend(__imPf1, _tmPf6);
			JB_Decr(_tmPf6);
			Message* _tmPf7 = ({
				Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
				JB_Tree_SyntaxAppend(__imPf2, Exit);
				JB_SafeDecr(nil);
				 __imPf2;
			});
			JB_Tree_SyntaxAppend(__imPf1, _tmPf7);
			JB_Decr(_tmPf7);
			JB_SafeDecr(nil);
			 __imPf1;
		});
		JB_Tree_SyntaxAppend(Arg, _tmPf5);
		JB_Decr(_tmPf5);
		SC_Msg_LoopExit(Exit);
		JB_Decr(Exit);
		JB_SetRef(Cond, ExitCond);
	}
	JB_Decr(Cond);
	JB_Decr(Arg);
	JB_Decr(ExitCond);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__TransformAll() {
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* F = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (F == nil) {
				break;
			}
			if (SC_TooManyErrors()) {
				return;
			}
			SC_Func_Transform(F);
			_if0++;
		};
	};
}


void SC_Mod_AddDelayedInit(SCModule* Self, Message* Src, Message* Dest, JB_String* Fn_name) {
	if (((bool)Src) and (SC_Mod_HasActualCode(Self, Src) and (Self != SC__Comp_program))) {
		JB_Tree_SyntaxAppend(Dest, (JB_Syx_Msg(JB_SyxSheb, JB_Str_OperatorPlus(JB_LUB[393], Self->Name))));
		JB_Tree_SyntaxAppend(Dest, ({
			Message* __imPf0 = (JB_Syx_Msg(JB_SyxDot, Fn_name));
			JB_Tree_SyntaxAppend(__imPf0, (JB_Syx_Msg(JB_SyxThg, Self->Name)));
			JB_Tree_SyntaxAppend(__imPf0, (JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			 __imPf0;
		}));
	}
}

void SC_Mod_AddInterfaceToTable(SCModule* Self, SCClass* TableCls) {
	SCDecl* D = JB_Incr(SC_Decl_Constructor(nil, Self->Cls));
	D->NilDeclared = kSC__NilState_Real;
	JB_String* _tmPf0 = JB_Incr(SC_Str_InterfaceToBehaviour(Self->Name));
	(SC_Decl_NameSet(D, _tmPf0));
	JB_Decr(_tmPf0);
	JB_Array_SyntaxAppend(TableCls->Properties, D);
	SC_Base_TryAdd(TableCls, Self->Source, D, D->Name);
	JB_Decr(D);
}

void SC_Mod_AddModuleToFunc(SCModule* Self, SCNode* Space) {
	if ((!JB_FreeIfDead(SC_Base_SyntaxAccess(Space, JB_LUB[1933])))) {
		Message* _tmPf0 = JB_Incr(SC_Base_FuncSrc(Space));
		SC_Base_TryAdd(Space, _tmPf0, Self, JB_LUB[1933]);
		JB_Decr(_tmPf0);
	}
}

void SC_Mod_BaseDecls(SCModule* Self) {
	SC_Base_Use(Self);
	SC_CollectDeclsGlobals(Self->Source, Self);
}

Message* SC_Mod_BuildInitArg(SCModule* Self) {
	Message* Rz = nil;
	JB_SetRef(Rz, ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf1));
		JB_Decr(_tmPf1);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	if (Self->Source) {
		Message* Ig = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1699])));
		JB_Tree_SyntaxAppend(Ig, Rz);
		JB_SetRef(Ig->Obj, Self);
		JB_Tree_SyntaxAppend(Self->Source, Ig);
		JB_Decr(Ig);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

SCModule* SC_Mod_Constructor(SCModule* Self) {
	if (Self == nil) {
		Self = ((SCModule*)JB_NewClass(&SCModuleData));
	}
	SC_Base_Constructor0(Self);
	Self->Cls = nil;
	Self->InitVarsArg = nil;
	Self->InitCodeArg = nil;
	JB_StringC* _tmPf2 = JB_LUB[0];
	Self->CppPart = JB_Incr(_tmPf2);
	Self->InitAfter = nil;
	JB_StringC* _tmPf1 = JB_LUB[0];
	Self->SubsFrom = JB_Incr(_tmPf1);
	Self->Grabbed = false;
	Self->IsImport = false;
	Self->Inited = false;
	Self->IsRequiredInterface = false;
	CppRefs* _tmPf0 = SC_CppRefs_Constructor(nil, nil);
	Self->DefaultRefs = JB_Incr(_tmPf0);
	if (SC__Comp_ModuleList != nil) {
		JB_Array_SyntaxAppend(SC__Comp_ModuleList, Self);
	}
	return Self;
}

JB_String* SC_Mod_CppPath(SCModule* Self) {
	JB_Incr(Self);
	JB_String* F = JB_Incr(Self->CppPart);
	while (true) {
		SCNode* P = JB_Incr(Self->Parent);
		if (JB_Object_FastIsa(P, &SCModuleData)) {
			if ((!((SCModule*)P)->IsImport)) {
				JB_SetRef(Self, P);
				JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1425], F));
				JB_SetRef(F, JB_Str_OperatorPlus(((SCModule*)P)->CppPart, _tmPf0));
				JB_Decr(_tmPf0);
				JB_Decr(P);
				continue;
			}
		}
		JB_Decr(P);
		break;
	};
	JB_Decr(Self);
	JB_SafeDecr(F);
	return F;
}

void SC_Mod_DelayedInitFuncTransform(SCModule* Self) {
	Message* V = JB_Incr(Self->InitVarsArg);
	Message* It = JB_Incr(((Message*)JB_Ring_First(V)));
	if (It) {
		{
			Message* Msg = JB_Incr(((Message*)JB_Ring_First(It)));
			while (Msg) {
				Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(Msg)));
				if (JB_Msg_EqualsSyx(Msg, JB_SyxDecl, false)) {
					Message* Name = JB_Incr(SC_Msg_GetDclName(Msg, false));
					if (Name) {
						if (SC_Msg_InitRootDecl(Name, Msg, Self)) {
							JB_Tree_Remove(Msg);
						}
					}
					JB_Decr(Name);
				}
				JB_SetRef(Msg, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(Msg);
			;
		}
		;
		SC_Mod_AddDelayedInit(Self, V, SC__Comp_program->InitVarsArg, JB_LUB[916]);
	}
	JB_Decr(V);
	JB_Decr(It);
	SC_Mod_AddDelayedInit(Self, Self->InitCodeArg, SC__Comp_program->InitCodeArg, JB_LUB[915]);
}

void SC_Mod_Destructor(SCModule* Self) {
	JB_Clear(Self->Cls);
	JB_Clear(Self->InitVarsArg);
	JB_Clear(Self->InitCodeArg);
	JB_Clear(Self->CppPart);
	JB_Clear(Self->DefaultRefs);
	JB_Clear(Self->InitAfter);
	JB_Clear(Self->SubsFrom);
	SC_Base_Destructor(Self);
}

SCObject* SC_Mod_GetTheNewer(SCModule* Self) {
	while (Self) {
		SCObject* O2 = SC_Base_SyntaxAccess(Self, JB_LUB[1807]);
		if (O2) {
			return O2;
		}
		SCClass* Cls = Self->Cls;
		if ((!Cls)) {
			return nil;
		}
		if ((!Cls->IsRole)) {
			return nil;
		}
		Self = SC_Mod_SuperMod(Self);
	};
	return nil;
}

void SC_Mod_GlobalsFix(SCModule* Self) {
	FastString* Fs = JB_Incr(JB_FS_Constructor(nil));
	{
		DictionaryReader* _df0 = JB_Incr(JB_Dict_Navigate(Self->Access));
		while (JB_Nav_MoveNext(_df0)) {
			SCDecl* Decl = JB_Incr(SC_DictionaryReader_ValueDecl(_df0));
			if (Decl) {
				SC_Decl_PrefixedName(Decl, Fs, Self);
			}
			JB_Decr(Decl);
		};
		JB_Decr(_df0);
	}
	;
	JB_Decr(Fs);
}

bool SC_Mod_HasActualCode(SCModule* Self, Message* Arg) {
	{
		Message* Curr = Arg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Arg));
		while (((bool)(Curr)) and (Curr != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(Curr));
			if (JB_Msg_EqualsSyx(Curr, JB_SyxDecl, false)) {
				Curr = ((Message*)JB_Ring_FlatAfter(Curr));
				continue;
			}
			 else if ((!JB_Msg_EqualsSyx(Curr, JB_SyxArg, false))) {
				return true;
			}
			Curr = _N_f2;
		};
		;
	}
	;
	return false;
}

void SC_Mod_InitDecls(SCModule* Self) {
	Message* A = JB_Incr(((Message*)JB_Ring_First(Self->InitVarsArg)));
	if (JB_Ring_HasChildren(A)) {
		SC_Imp_Use(Self->Project);
		SC_CollectDeclsGlobals(A, Self);
	}
	JB_Decr(A);
}

bool SC_Mod_IsProperModule(SCModule* Self) {
	if ((!Self->Parent)) {
		return nil;
	}
	if ((Self->Parent == SC__Comp_program) and (Self->Source == nil)) {
		return false;
	}
	return true;
}

void SC_Mod_LoadInitFunc(SCModule* Self) {
	SC__Base_CurrVisibility = true;
	SC__Mod_Curr = Self;
	Message* Arg = JB_Incr(Self->InitCodeArg);
	if (Arg) {
		SC_Mod_LoadInitFuncSub(Self, Arg, JB_LUB[915]);
	}
	JB_SetRef(Arg, Self->InitVarsArg);
	if (Arg) {
		SC_Mod_LoadInitFuncSub(Self, Arg, JB_LUB[916]);
	}
	JB_Decr(Arg);
	SC__Mod_Curr = nil;
}

void SC_Mod_LoadInitFuncSub(SCModule* Self, Message* Init, JB_String* Name) {
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[1692]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[133]);
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	Message* Msg = JB_Incr(SC_Str_ParseClean(_tmPf1));
	JB_Decr(_tmPf1);
	JB_Tree_SyntaxAppend(Msg, Init);
	SCFunction* Fn = JB_Incr(SC_Mod_NewModuleFunc(Self, Msg));
	JB_Decr(Msg);
	if (Fn) {
		(SC_Func_SyntaxIsSet(Fn, kSC__FunctionType_InitFunc, true));
		Message* L = JB_Incr(((Message*)JB_Ring_Last(Init)));
		if ((!JB_Ring_HasChildren(L))) {
			JB_Tree_Remove(L);
		}
		JB_Decr(L);
	}
	JB_Decr(Fn);
}

void SC_Mod_LoadModule(SCModule* Self, Message* Node) {
	JB_SetRef(Node->Obj, Self);
	Message* NameMsg = JB_Incr(((Message*)JB_Ring_First(Node)));
	if ((!Self->Cls)) {
		JB_Msg_Expect(NameMsg, JB_SyxThg, nil);
	}
	Message* Arg = JB_Incr(NameMsg);
	if (JB_Msg_EqualsSyx(NameMsg, JB_SyxThg, false)) {
		JB_SetRef(Self->Name, NameMsg->Name);
		Message* Sub = JB_Incr(((Message*)JB_Ring_NextSib(NameMsg)));
		JB_SetRef(Arg, Sub);
		if (JB_Msg_EqualsSyx(Sub, JB_SyxBra, false)) {
			Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(Sub, JB_SyxThg));
			if ((!_tmPf0)) {
				JB_Decr(_tmPf0);
				JB_Decr(Sub);
				JB_Decr(Arg);
				JB_Decr(NameMsg);
				return;
			}
			JB_SetRef(Self->SubsFrom, _tmPf0->Name);
			JB_Decr(_tmPf0);
			JB_SetRef(Arg, ((Message*)JB_Ring_NextSib(Sub)));
		}
		JB_Decr(Sub);
	}
	JB_Decr(NameMsg);
	JB_Msg_Expect(Arg, JB_SyxArg, nil);
	if ((!JB_Msg_ExpectLast(Arg, JB_LUB[0]))) {
		JB_Decr(Arg);
		return;
	}
	JB_SetRef(Self->Source, Arg);
	JB_Decr(Arg);
	JB_String* _tmPf1 = JB_Incr(SC_Mod_SafeName(Self));
	SC_Base_TryAdd(SC__Comp_DisamModules, nil, Self, _tmPf1);
	JB_Decr(_tmPf1);
	SC_Base_CollectFromNode(Self, Self->Source, SC__Base_CurrVisibility, nil);
}

void SC_Mod_MoveToInitFunc(SCModule* Self, Message* C, bool Visible) {
	if ((JB_Msg_EqualsSyx(C, JB_SyxSheb, false)) or (JB_Msg_EqualsSyx(C, JB_Syxurl, false))) {
		JB_Tree_Remove(C);
		return;
	}
	if ((!SC_Msg_AllowedMoveToInit(C))) {
		JB_Msg_SyntaxExpect(C, nil);
		return;
	}
	if (JB_Msg_EqualsSyx(C, JB_SyxDecl, false)) {
		if (SC_Msg_SettingToNil(C)) {
			return;
		}
	}
	if ((!(Self->InitCodeArg))) {
		JB_SetRef(Self->InitCodeArg, SC_Mod_BuildInitArg(Self));
	}
	if (JB_Msg_EqualsSyx(C, JB_SyxDecl, false)) {
		if ((!(Self->InitVarsArg))) {
			JB_SetRef(Self->InitVarsArg, SC_Mod_BuildInitArg(Self));
		}
		JB_Tree_SyntaxAppend(((Message*)JB_Ring_First(Self->InitVarsArg)), C);
	}
	 else {
		JB_Tree_SyntaxAppend(Self->InitCodeArg, C);
	}
}

SCFunction* SC_Mod_NewModuleFunc(SCModule* Self, Message* Src) {
	SCFunction* Rz = nil;
	JB_SetRef(Rz, ((SCFunction*)SC_Func__NewFunc(Src, Self, Src)));
	if (Rz) {
		SC_Base_TryAddBase(Self, Src, Rz);
	}
	JB_SafeDecr(Rz);
	return Rz;
}

SCModule* SC_Mod_OneOrOther(SCModule* Self, SCModule* B) {
	if (((bool)Self) and ((bool)B)) {
		if (true) {
			JB_Msg_SyntaxExpect(Self->Source, JB_kNameConf);
		}
		if (true) {
			JB_Msg_SyntaxExpect(B->Source, JB_kNameConf);
		}
	}
	return B;
}

JB_String* SC_Mod_Render(SCModule* Self, FastString* Fs_in) {
	FastString* Fs = JB_Incr(JB_FS__FastNew(Fs_in));
	SCClass* C = JB_Incr(Self->Cls);
	if (C) {
		JB_FS_AppendString(Fs, JB_LUB[1799]);
		JB_FreeIfDead(SC_Class_Render(C, Fs));
	}
	 else {
		JB_FreeIfDead(SC_Named_Render(Self, Fs));
	}
	JB_Decr(C);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(Fs, Fs_in));
	JB_Decr(Fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Mod_SafeName(SCModule* Self) {
	JB_String* N = Self->Name;
	if (JB_Str_Exists(N)) {
		return N;
	}
	SCClass* C = Self->Cls;
	if (C) {
		return C->Name;
	}
	return JB_LUB[0];
}

SCModule* SC_Mod_SuperMod(SCModule* Self) {
	SCClass* C = Self->Cls;
	if (C) {
		SCClass* S = C->Super;
		if (S) {
			return S->Modul;
		}
	}
	return nil;
}

bool SC_Mod_TryInit(SCModule* Self, Array* Req) {
	{
		Message* _LoopSrcf2 = Self->InitAfter;
		Message* Name = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (Name) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Name));
			if ((!JB_Msg_Expect(Name, JB_SyxThg, nil))) {
				return nil;
			}
			SCModule* M = SC_Comp__FindModuleMsg(Name, 0);
			if ((!(((bool)M) and M->Inited))) {
				return nil;
			}
			Name = _Nf1;
		};
		;
	}
	;
	Self->Inited = true;
	JB_Array_SyntaxAppend(Req, Self);
	return true;
}

SCNode* SC_Mod__ConstantCollector(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	JB_Tree_SyntaxAppend(SC__Comp_ConstantsList, Node);
	if (JB_Object_FastIsa(Name_space, &SCClassData)) {
		JB_SetRef(Node->Obj, ((SCClass*)Name_space)->Modul);
	}
	 else {
		JB_SetRef(Node->Obj, Name_space);
	}
	return SC__Comp_program;
}

SCNode* SC_Mod__DoInitAfter(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCModule* Mod = SC_Base_SpaceModule(Name_space, Node);
	if ((!Mod)) {
		return nil;
	}
	JB_SetRef(Mod->InitAfter, JB_Msg_NeedSyxOK(Node, JB_SyxPrm, JB_SyxBra));
	return SC__Comp_program;
}

int SC_Mod__Init_() {
	{
	}
	;
	return 0;
}

int SC_Mod__InitCode_() {
	return 0;
}

SCNode* SC_Mod__NeuModule(Message* Node, SCNode* Name_space, Message* ErrPlace) {
	SCModule* M = JB_Incr(SC_Mod_Constructor(nil));
	M->Project = SC__Imp_Curr;
	M->Parent = SC_Base_ProjectFix(Name_space);
	if (Node) {
		SC_Mod_LoadModule(M, Node);
	}
	JB_SafeDecr(M);
	return M;
}

SCModule* SC_Mod__NewContainer(JB_String* S) {
	SCModule* Rz = nil;
	JB_SetRef(Rz, SC_Mod_Constructor(nil));
	JB_SetRef(Rz->Name, S);
	SC_Base_TryAdd(SC__Comp_program, nil, Rz, S);
	JB_SafeDecr(Rz);
	return Rz;
}


Message* JB_config_ConfFirst(Message* Self) {
	Message* L = JB_Incr(JB_Msg_ConfArg(Self));
	if (L) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(((Message*)L))));
		JB_Decr(L);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(L);
	return nil;
}

bool JB_config_Save(Message* Self) {
	JB_File* F = JB_Incr(((JB_File*)JB_Object_As(Self->Obj, &JB_FileData)));
	if (JB_File_SyntaxCast(F)) {
		JB_String* P = JB_Incr(JB_Msg_Render(Self, nil));
		if (JB_FreeIfDead(JB_Str_ParseWithError(P, nil))) {
			bool _tmPf0 = JB_File_SmartDataSet(F, P);
			JB_Decr(P);
			JB_Decr(F);
			return _tmPf0;
		}
		JB_Decr(P);
	}
	JB_Decr(F);
	return false;
}


bool SC_Task_LessThan3_interface_SyntaxCall(JB_Task* Self, int I) {
	return ((Task_LessThan3_interface_prototype)Self->_func)(Self, I);
}


bool SC_Task_LessThan3_run(LessThan3* Self, int I) {
	return I < Self->b;
}

void JB_InitClassList(SaverLoadClass fn) {
	fn(&SaveableData, (char*)"");
	fn(&JB_StringData, (char*)"|int| Length_");
	fn(&ArrayData, (char*)"|int| Marker");
	fn(&DictionaryData, (char*)"");
	fn(&JB_FileData, (char*)"|int| Length_, |int| Descriptor");
	fn(&SavingTestData, (char*)"|string| Name, |int| Value, |int| ABC");
	fn(&JB_StringSharedData, (char*)"|int| Length_");
	fn(&JB_StringData, (char*)"|int| Length_");
	fn(&JB_StringCData, (char*)"|int| Length_");
	fn(&MessageIDData, (char*)"|int| Length_, |int| ID, |int| User, |int| Func");
	fn(&SCFileData, (char*)"|int| Length_, |int| Descriptor, |string| ExportName, |string| FData, |int| filenum, |bool| IsInternal");
}
}

// 4216715880553671503 -1899020551142837279