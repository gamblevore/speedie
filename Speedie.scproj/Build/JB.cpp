
// Auto-generated file, by speedie.

/* jeebox-licence:
    By Theodore H. Smith, 2019, theo@jeebox.org
	
    This software is provided 'as-is', without any warranty.
    In no event will the author be held liable for any damages
    arising from the use of this software.

    Permission is granted to anyone to use this software for any purpose,
    including commercially, and to alter it and redistribute it
    freely, subject to the following restrictions:

    1. The origin of this software must not be misrepresented; you must not
        claim that you wrote the original software.
    2. If you use this software or portions of this software in a product, you
        are required to acknowledge this in at least one of:
        About-window / launch-screen / help-files / read-me-file
    3. Altered source vershions must be plainly marked as such, and must not be
        misrepresented as being the original software.
    4. Any jeebox-licence note may not be removed/altered from any source distribution.
*/
#include "JB_Umbrella.hpp"
#include "JB.h"

#pragma GCC visibility push(hidden)
extern "C" {

extern JB_StringC* JB_LUB[2120];

extern Object_Behaviour JB_Object_FuncTable_;
void JB_InitClassList(SaverLoadClass fn);

JB_String* JB_App__AppName() {
	JB_String* _tmPf0 = JB_Incr(JB_App__AppPath());
	JB_String* _tmPf1 = JB_Incr(JB_Str_Name(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_App__AppPath() {
	if (JB_Platform__OSX()) {
		JB_String* _tmPf0 = JB_Incr(JB_App__OrigPath());
		JB_String* _tmPf1 = JB_Incr(JB_Str_BackToApp(_tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return JB_App__OrigPath();
}

JB_String* JB_App__Conf(JB_String* name) {
	Message* _tmPf0 = JB_Incr(JB_Msg_GetConf(JB__App__Conf, name, false));
	JB_String* _tmPf1 = JB_Incr(JB_Msg_Value(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void JB_App__ConfigureSet(JB_String* Value) {
	JB_Error* err = nil;
	JB_SetRef(JB__App__Conf, JB_Str_ParseWithError(Value, (&err)));
	if (err) {
		JB_String* _tmPf0 = JB_Incr(JB_Err_Render(err, nil));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(err);
	if ((!(JB__App__Conf))) {
		JB_SetRef(JB__App__Conf, JB_Msg_ConstructorEmpty(nil));
	}
}

void JB_App__Crash(JB_String* reason) {
	if (JB_Str_Exists(reason)) {
		JB_PrintLine(reason);
	}
	JB_Rec__CrashLog(JB_Str_SyntaxCast(JB_Str_MakeC(JB_LUB[621])));
	(*((byte*)-1)) = 0;
	JB_PrintLine(JB_LUB[795]);
	JB_App__Quit(JB_LUB[0], -1);
}

ErrorInt JB_App__CWDSet(JB_String* Value) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_ResolvePath(Value, false));
	ErrorInt _tmPf1 = JB_File__chdir(_tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

JB_String* JB_App__FileName() {
	JB_String* _tmPf0 = JB_Incr(JB_App__OrigPath());
	JB_String* _tmPf1 = JB_Incr(JB_Str_Name(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_App__Init_() {
	{
		JB_SetRef(JB__App_Usage, JB_LUB[0]);
		JB_SetRef(JB__App__Path, JB_LUB[0]);
	}
	;
	return 0;
}

int JB_App__InitCode_() {
	return 0;
}

bool JB_App__IsMainThread() {
	return (!JB_LibIsThreaded());
}

bool JB_App__No(JB_String* name) {
	return (!JB_App__Yes(name));
}

JB_String* JB_App__OrigPath() {
	//visible;
	JB_String* p = JB_Incr(JB__App__Path);
	if (JB_Str_Exists(p)) {
		JB_SafeDecr(p);
		return p;
	}
	Dictionary* _tmPf0 = JB_Incr(JB_App__Env());
	JB_SetRef(p, ((JB_String*)JB_Dict_ValueStr(_tmPf0, JB_LUB[1115])));
	JB_Decr(_tmPf0);
	if (JB_Str_Exists(p)) {
		JB_SetRef(JB__App__Path, p);
		JB_SafeDecr(p);
		return p;
	}
	JB_SetRef(p, JB_App__Path());
	if (JB_Str_Exists(p)) {
		JB_SetRef(JB__App__Path, p);
		JB_SafeDecr(p);
		return p;
	}
	JB_Decr(p);
	return JB_LUB[0];
}

JB_String* JB_App__GetPref(JB_String* s) {
	Message* _tmPf0 = JB_Incr(JB_Msg_GetConf(JB__App__Prefs, s, false));
	JB_String* _tmPf1 = JB_Incr(JB_Msg_Value(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void JB_App__PrefSet(JB_String* s, JB_String* Value) {
	(JB_Msg_SetStr(JB_App__PrefsInit(0), s, Value));
}

JB_String* JB_App__PrefPath() {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	JB_SetRef(rz, JB_App__Conf(JB_LUB[1875]));
	if ((!JB_Str_Exists(rz))) {
		JB_Decr(rz);
		return JB_LUB[0];
	}
	if (JB_Str_First(rz) == '~') {
		JB_SetRef(rz, JB_File_PathFix_(rz));
	}
	if (JB_Str_Equals(rz, JB_LUB[1597], true)) {
		JB_SetRef(rz, JB_LUB[0]);
	}
	if (JB_Str_First(rz) != '/') {
		JB_SetRef(rz, JB_File__AppPrefs(rz));
	}
	if ((!((JB_Str_First(rz) == '/') or (JB_Str_First(rz) == '~')))) {
		JB_Str_SyntaxExpect(JB_LUB[637]);
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_App__PrefsInit(Date when) {
	if (JB__App__Prefs) {
		return JB__App__Prefs;
	}
	JB_String* pref_path = JB_Incr(JB_App__PrefPath());
	if (JB_Str_Exists(pref_path)) {
		JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(pref_path));
		JB_SetRef(JB__App__Prefs, JB_File_Conf(_tmPf0, 1048576));
		JB_Decr(_tmPf0);
	}
	JB_Decr(pref_path);
	if ((!JB__App__Prefs)) {
		JB_String* _tmPf1 = JB_Incr(JB_Str__Error());
		JB_SetRef(JB__App__Prefs, JB_Msg_ConstructorNormal(nil, JB_SyxArg, _tmPf1));
		JB_Decr(_tmPf1);
	}
	if (when) {
		if (when < 0) {
			when = JB_Date__Now();
		}
		JB_String* _tmPf2 = JB_Incr(JB_App__GetPref(JB_LUB[1656]));
		if ((!(JB_Str_Exists(_tmPf2)))) {
			JB_String* _tmPf3 = JB_Incr(JB_Date_RenderInt(when, nil));
			(JB_App__PrefSet(JB_LUB[1656], _tmPf3));
			JB_Decr(_tmPf3);
		}
		JB_Decr(_tmPf2);
	}
	return JB__App__Prefs;
}

void JB_PrintStackTrace() {
	//visible;
	JB_String* _tmPf0 = JB_Incr(JB_App__StackTrace(2, nil));
	JB_Str_Print(_tmPf0);
	JB_Decr(_tmPf0);
}

void JB_App__SavePrefs() {
	{
		Message* _t = JB__App__Prefs;
		if (_t) {
			JB_config_Save(_t);
		}
	};
}

ErrorInt2 JB_App__Say(JB_String* s, bool print) {
	//visible;
	if (print) {
		JB_PrintLine(s);
	}
	Array* _tmPf0 = JB_Incr((JB_Array_Constructor0(nil)));
	JB_Array_SyntaxAppend(_tmPf0, s);
	ErrorInt2 _tmPf1 = JB_Str_Execute(JB_LUB[430], _tmPf0, nil, nil, true);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

JB_String* JB_App__StackTrace(int skip, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	void* arr[128] = {
	};
	int size = (128);
	_cstring* strs = JB_App__BackTrace((&arr[0]), (&size));
	{
		IntRange _LoopSrcf2 = JB_int_OperatorTo(skip, size - 1);
		int __Endf0 = _LoopSrcf2[1];
		int i = _LoopSrcf2[0];
		while (i < __Endf0) {
			JB_FS_AppendCString(fs, strs[i]);
			JB_FS_AppendByte(fs, '\n');
			i++;
		};
	}
	;
	JB_free(strs);
	JB_String* _tmPf3 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

int64 JB_App__StringMemory() {
	return JB_MemUsedString();
}

JB_String* JB_App__ArgValue(JB_String* name) {
	{
		Array* _LoopSrcf2 = JB_App__Args();
		int _if0 = 0;
		while (true) {
			JB_String* R = ((JB_String*)JB_Array_Value(_LoopSrcf2, _if0));
			if (R == nil) {
				break;
			}
			if (JB_Str_Equals(JB_Str_ArgName(R), name, true)) {
				return JB_Str_ArgValue(R);
			}
			_if0++;
		};
	}
	;
	return JB_LUB[0];
}

bool JB_App__Yes(JB_String* name) {
	JB_String* _tmPf0 = JB_Incr(JB_App__ArgValue(name));
	bool _tmPf1 = JB_Str_Yes(_tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}


int SC_AutoComplete__Init_() {
	{
		JB_SetRef(SC__AutoComplete_Owner, JB_Str_Dict(JB_LUB[1801], '/'));
		JB_SetRef(SC__AutoComplete_function_names, JB_LUB[1778]);
		JB_SetRef(SC__AutoComplete_Functions, JB_Str_Dict(SC__AutoComplete_function_names, '/'));
	}
	;
	return 0;
}

int SC_AutoComplete__InitCode_() {
	return 0;
}

bool SC_AutoComplete__IsAFunc(JB_String* s) {
	return JB_FreeIfDead(JB_Dict_ValueStr(SC__AutoComplete_Functions, s)) != nil;
}


bool SC_CodeSorter__LeafFunctionsSorter(SCFunction* a, SCFunction* b) {
	int x = ((int)a->LinkDepth) - ((int)b->LinkDepth);
	if (x < 0) {
		return true;
	}
	if (x == 0) {
		return JB_Str_CompareStr(a->ExportName, b->ExportName, false) <= -1;
	}
	return false;
}

void SC_CodeSorter__LeafsFirst() {
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (f == nil) {
				break;
			}
			SC_Func_FindDepths(f);
			_if0++;
		};
	}
	;
	JB_Array_Sort(SC__Comp_FuncList, ((FP_SorterComparer)SC_CodeSorter__LeafFunctionsSorter), false);
}


SCDecl* SC_Comp__AddGlobalConst(JB_String* name, SCClass* c, NilState dcl) {
	SCDecl* d = JB_Incr(SC_Decl_Constructor(nil, c));
	(SC_Decl_SyntaxIsSet(d, kSC__SCDeclInfo_DataConst, true));
	d->NilDeclared = dcl;
	JB_SetRef(d->IsLookupOnly, JB_LUB[0]);
	(SC_Decl_NameSet(d, name));
	JB_SetRef(d->Default, (JB_Syx_Msg(JB_SyxThg, name)));
	SC_Base_TryAdd(SC__Comp_program, nil, d, name);
	JB_SafeDecr(d);
	return d;
}

void SC_Comp__AddGlobalConstNumWithStrClassInt64(JB_String* name, SCClass* c, int64 value) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(value, nil));
	SC_Comp__AddGlobalConstNumWithStrClassStr(name, c, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_Comp__AddGlobalConstNumWithStrClassStr(JB_String* name, SCClass* c, JB_String* value) {
	SCDecl* _tmPf0 = JB_Incr(SC_Comp__AddGlobalConst(name, c, kSC__NilState_Real));
	JB_SetRef(_tmPf0->IsLookupOnly, JB_Syx_OperatorPlus(JB_SyxNum, value));
	JB_Decr(_tmPf0);
}

bool SC_Comp__AddMain(int mark) {
	Message* m = JB_Incr(SC_Comp__MakeMainFunc());
	SCDecl* b = JB_Incr(((SCDecl*)JB_Ternary(SC__Options_ProjectIsLibrary, JB_TrueBool, JB_FalseBool)));
	if (((bool)m) and ((bool)SC__Comp_ConfMsg)) {
		Message* _tmPf0 = JB_Incr(JB_Str_ParseJbin(((JB_LUB[29])), kJB__int64_max));
		(JB_Ring_FirstSet(m, _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_Decr(m);
	SC_Base_TryAdd(SC__Comp_program, nil, b, JB_LUB[1443]);
	JB_Decr(b);
	JB_StdErr->LowerErrorsTo = 0;
	return mark == JB_StdErr->ErrorCount;
}

JB_String* SC_Comp__AddSCProj(JB_String* Path) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Name(Path));
	if (JB_Str_ContainsByte(_tmPf0, '.')) {
		JB_Decr(_tmPf0);
		return Path;
	}
	JB_Decr(_tmPf0);
	return JB_Str_OperatorPlus(Path, JB_LUB[380]);
}

Dictionary* SC_Comp__Adj(Message* f) {
	Dictionary* d = SC__Comp_AdjDicts;
	if (JB_Msg_EqualsSyx(f, JB_SyxThg, false)) {
		return ((Dictionary*)JB_Dict_Expect(d, f));
	}
	return ((Dictionary*)JB_Dict_ValueStr(d, JB_LUB[1683]));
}

void SC_Comp__AppBuildLibs(JB_File* inner) {
	{
		Message* _LoopSrcf2 = SC__Linkage_OSXFrameworks;
		Message* lib = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (lib) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(lib));
			if (JB_Msg_Expect(lib, JB_SyxStr, nil)) {
				SC_Comp__AppBuildOneLib(inner, lib);
			}
			lib = _Nf1;
		};
		;
	};
}

void SC_Comp__AppBuildOneLib(JB_File* inner, Message* lib) {
	JB_File* _tmPf0 = JB_Incr(JB_File_Parent(inner));
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[887], lib->Name));
	JB_File* ldest = JB_Incr(JB_File_Sibling(_tmPf0, _tmPf1));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	if ((!JB_File_Exists(ldest, false))) {
		JB_File* dir = JB_Incr(JB_Str_AsFile(JB_LUB[433]));
		JB_File* _tmPf2 = JB_Incr(JB_File_SyntaxAccess(dir, lib->Name));
		JB_Decr(dir);
		JB_StringC* _tmPf3 = JB_Incr(JB_Str_CastZero(ldest));
		JB_File_HardLinkTo(_tmPf2, _tmPf3);
		JB_Decr(_tmPf2);
		JB_Decr(_tmPf3);
	}
	JB_Decr(ldest);
}

void SC_Comp__AppendCompilerTime(JB_String* s, int Durr) {
	SC_FS_AppendWidth(SC__Comp_TimerOutput, s, kSC__Comp_kTimeWidth);
	if (SC_Options__Color()) {
		JB_FS_AppendString(SC__Comp_TimerOutput, kJB__ErrorColors_good);
	}
	JB_FS_AppendDurr(SC__Comp_TimerOutput, Durr);
	if (SC_Options__Color()) {
		JB_FS_AppendString(SC__Comp_TimerOutput, kJB__ErrorColors_normal);
	}
	JB_FS_AppendByte(SC__Comp_TimerOutput, '\n');
}

void SC_Comp__AppleBuildApp(JB_File* project, JB_File* product) {
	if ((!JB_Platform__OSX())) {
		return;
	}
	JB_String* dest = JB_Incr(JB_File_LinkToGet(product));
	if (JB_Str_Exists(dest)) {
		if (true) {
			JB_Object_Fail(dest, JB_LUB[1302]);
		}
		JB_Decr(dest);
		return;
	}
	JB_Decr(dest);
	SC_Comp__Stage(JB_LUB[798]);
	JB_String* name = JB_Incr(SC_Comp__IdealName());
	JB_String* prefered_name = JB_Incr(JB_Str_OperatorPlus(name, JB_LUB[365]));
	JB_File* prefered_app = JB_Incr(JB_File_Sibling(product, prefered_name));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1173], prefered_name));
	JB_Decr(prefered_name);
	JB_File* xcode_place = JB_Incr(JB_File_Sibling(prefered_app, _tmPf0));
	JB_Decr(_tmPf0);
	JB_File* final_app = JB_Incr(((JB_File*)JB_Ternary(JB_Str_FileExists(xcode_place), xcode_place, prefered_app)));
	JB_Decr(xcode_place);
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[789], name));
	JB_Decr(name);
	JB_File* _tmPf1 = JB_Incr(JB_File_SyntaxAccess(final_app, _tmPf2));
	JB_Decr(_tmPf2);
	JB_File* inner = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (JB_ErrorInt_SyntaxCast(JB_File_MoveTo(product, inner))) {
		SC_Comp__AppBuildLibs(inner);
		SC_Comp__CodeSign(final_app);
		if (prefered_app != final_app) {
			(JB_File_LinkToSet(prefered_app, final_app));
		}
		JB_SetRef(SC__Options_output_path, prefered_app);
		JB_File_Touch(prefered_app);
	}
	JB_Decr(prefered_app);
	JB_Decr(final_app);
	JB_Decr(inner);
}

bool SC_Comp__Banned(JB_String* name) {
	Dictionary* b = SC__Options_BannedClasses;
	if (b) {
		return ((bool)JB_Dict_ValueLower(b, name));
	}
	return false;
}

void SC_Comp__BuildConstructors() {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (f == nil) {
				break;
			}
			if (SC_Func_CanBuildConstructor(f)) {
				SC_Func_BuildConstructorDestructor(f);
			}
			_if0++;
		};
	}
	;
	JB_SetRef(SC__Func_CurrFunc, nil);
}

JB_File* SC_Comp__BuildFolder() {
	JB_File* b = SC__Comp__BuildFolder;
	if ((!JB_File_Exists(b, false))) {
		JB_Str_MakeDir(b);
	}
	return b;
}

void SC_Comp__CheckIsGoodLibrary() {
	if (SC__Options_ProjectIsLibrary) {
		if ((!SC__Comp_API_Place)) {
			JB_Str_SyntaxExpect(JB_LUB[1063]);
			return;
		}
	}
}

bool SC_Comp__ClassSorter(JB_Object* a, JB_Object* b) {
	return SC_Comp__ModulesSorter(((SCClass*)a)->Modul, ((SCClass*)b)->Modul);
}

void SC_Comp__ClearEnvs() {
	{
		Dictionary* _LoopSrcf2 = JB_Incr(JB_App__Env());
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf2));
		JB_Decr(_LoopSrcf2);
		while (true) {
			JB_String* v = JB_Incr(((JB_String*)JB_DictionaryReader_NextValue(_navf0)));
			if (v == nil) {
				JB_Decr(v);
				break;
			}
			JB_Decr(v);
			JB_String* k = JB_Incr(JB_Nav_Name(_navf0));
			if ((!JB_Str_Equals(k, JB_LUB[902], true)) and ((!JB_Str_Equals(k, JB_LUB[983], true)) and ((!JB_Str_Equals(k, JB_LUB[1118], true)) and ((!JB_Str_Equals(k, JB_LUB[1121], true)) and (!JB_Str_Equals(k, JB_LUB[1201], true)))))) {
				JB_StringC* _tmPf3 = JB_Incr(JB_Str_CastZero(k));
				(JB_App__SetEnv(_tmPf3, nil));
				JB_Decr(_tmPf3);
			}
			JB_Decr(k);
		};
		JB_Decr(_navf0);
	};
}

void SC_Comp__CodeSign(JB_File* gui_exe) {
	JB_String* sign = JB_Incr(JB_App__GetPref(kJB_codesign_native));
	if (JB_Str_Exists(sign)) {
		SC_File_CodeSign(gui_exe, sign);
	}
	 else {
		JB_String* _tmPf1 = JB_Incr(JB_File_Path(gui_exe));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1067], _tmPf1));
		JB_Decr(_tmPf1);
		JB_Rec__NewProblem(nil, _tmPf0, nil);
		JB_Decr(_tmPf0);
	}
	JB_Decr(sign);
}

void SC_Comp__Collect(Message* m, bool visible) {
	SC_Base_CollectOne(SC__Comp_program, m, visible);
}

void SC_Comp__CollectConstants() {
	{
		Message* _LoopSrcf2 = SC__Comp_ConstantsList;
		Message* ch = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(ch));
			SCNode* b = ((SCNode*)JB_Object_As(ch->Obj, &SCNodeData));
			if (b) {
				SC_Base_CollectOneConstants(b, ch);
			}
			ch = _Nf1;
		};
		;
	};
}

bool SC_Comp__CollectIsaTests(Message* s) {
	s = SC_Msg_UnBra(s);
	if (JB_Msg_EqualsSyx(s, JB_SyxRel, false)) {
		Message* L = ((Message*)JB_Ring_First(s));
		Message* Op = ((Message*)JB_Ring_NextSib(L));
		if ((!(((bool)L) and ((bool)Op)))) {
			JB_Msg_SyntaxExpect(s, JB_LUB[1021]);
			return nil;
		}
		if (JB_Msg_SyntaxEquals(Op, JB_LUB[1482], false)) {
			Message* R2 = ((Message*)JB_Ring_Last(s));
			bool A2 = SC_Comp__CollectIsaTests(L);
			bool B2 = SC_Comp__CollectIsaTests(R2);
			return A2 or B2;
		}
		return ((!JB_Msg_SyntaxEquals(Op, JB_LUB[1856], false)));
	}
	if ((!JB_Msg_EqualsSyx(s, JB_SyxFunc, false))) {
		return true;
	}
	Message* List = ((Message*)JB_Ring_Last(s));
	SCFunction* f = SC_Msg_AsFunc(List);
	if ((!((JB_Object_Isa(f, &SCFunctionData)) and (SC_Func_SyntaxIs(f, kSC__FunctionType_TypeTest))))) {
		return true;
	}
	Message* L1 = ((Message*)JB_Ring_First(List));
	if (L1) {
		Message* R1 = ((Message*)JB_Ring_NextSib(L1));
		if (R1) {
			SCClass* cls = SC_Msg_ObjCls(R1);
			if (cls) {
				if (f == SC__Comp_fnIsa) {
					if ((!cls->HasSubClass)) {
						JB_SetRef(List->Obj, SC__Comp_fnFastIsa);
					}
				}
				if (JB_Msg_EqualsSyx(L1, JB_SyxThg, false)) {
					SC_IsaTester__SyntaxAppend(s);
					return true;
				}
			}
		}
	}
	return false;
}

bool SC_Comp__CompileAll() {
	if ((!SC_Comp__Stage(JB_LUB[773]))) {
		return nil;
	}
	SC_Comp__InitCompiler();
	SC_Comp__ImportAll();
	SC_Rec_ReturnErrors(JB_ErrorDelayer, JB_StdErr);
	if ((!SC__Comp_InitedOK)) {
		return nil;
	}
	SC_Comp__PrepareInterpreter();
	if (SC_Comp__Stage(JB_LUB[1031])) {
		SC_Comp__BuildConstructors();
	}
	SC_Comp__CheckIsGoodLibrary();
	if (SC_Comp__Stage(JB_LUB[1243])) {
		SC_Comp__DeadStrip();
	}
	if ((SC__Options_NilStrength > 0) and SC_Comp__Stage(JB_LUB[1062])) {
		SC_Comp__Timer(JB_LUB[1062]);
		SC_nil__FixArchons();
	}
	if ((!SC_Comp__Stage(JB_LUB[1170]))) {
		return nil;
	}
	SC_Comp__Timer(JB_LUB[1170]);
	SC_Comp__DoRefAnalysis();
	if (SC__Options_Cpp) {
		SC_Comp__Timer(JB_LUB[861]);
		SC_Crkt__CorrectConsts();
		if (SC_Linkage__Interpreter()) {
			SC_ExecTable__Run();
		}
		SC_Cpp__ExportAllSource();
	}
	SC_Imp__ExportShaders();
	if ((!SC_Comp__Stage(JB_LUB[877]))) {
		return nil;
	}
	SC_Comp__TimerSub(JB_LUB[1124], SC__Comp_stParseTimeTotal);
	SC_Comp__Timer(JB_LUB[0]);
	return JB_Rec_OK(JB_StdErr);
}

void SC_Comp__CompileTime() {
	if ((!JB_Str_Exists(SC__Options_output_path)) and ((bool)SC__Options_UseScriptLoc)) {
		JB_FreeIfDead(SC_Comp__ScriptLoc(SC__Comp_OriginalInputPath));
	}
	if (SC__Options_SelfReplacement) {
		SC_Comp__FileSanityTests();
	}
	SC_Comp__VariousSelfTests();
	({
		JB__Flow_Disabled++;
		(SC_Sav__TestSaver());
		JB__Flow_Disabled--;
		 0;
	});
	Date elapsed = ({
		Date starttime = JB_Date__Now();
		(SC_Comp__CompileAll());
		 (JB_Date_Ago(starttime));
	});
	SC_Comp__PrintCompileTime(elapsed);
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	bool caninstall = true;
	if (SC__Options_SelfReplacement and (JB_Str_Equals(SC__Options_Variant, JB_LUB[1273], true))) {
		if (JB_Platform__Release()) {
			int ReliableTime = ((int)(64.0f * (1024.0f * 2.5f)));
			caninstall = (elapsed < ReliableTime);
			if ((!caninstall)) {
				JB_Str_SyntaxExpect(JB_LUB[1097]);
			}
		}
	}
	SC_Ext__ExportAndInstall(caninstall);
}

void SC_Comp__CreateDisambiguation() {
	JB_SetRef(SC__Comp_DisamClasses, SC_Mod__NewContainer(JB_LUB[1447]));
	JB_SetRef(SC__Comp_DisamModules, SC_Mod__NewContainer(JB_LUB[1454]));
}

SCFunction* SC_Comp__CreateFuncFromSource(JB_String* Src) {
	SCFunction* rz = nil;
	Message* msg = JB_Incr(SC_Str_ParseClean(Src));
	if (msg) {
		JB_SetRef(rz, ((SCFunction*)SC_Func__NewFunc(msg, nil, msg)));
		if (rz) {
			(SC_SCObject_IsVisibleSet(rz, false));
		}
	}
	JB_Decr(msg);
	JB_SafeDecr(rz);
	return rz;
}

void SC_Comp__CreateRoot() {
	SCModule* M = JB_Incr(SC__Comp_InternalFile->Proj->Mod);
	JB_SetRef(SC__Comp_program, M);
	JB_SetRef(M->ExportName, JB_LUB[943]);
	JB_SetRef(M->Name, JB_LUB[1777]);
	M->Parent = nil;
	JB_Decr(M);
}

void SC_Comp__DeadStrip() {
	JB_SetRef(SC__Comp_VisibleFuncs, SC_Base_ConstructorStr(nil, JB_LUB[1374], false));
	JB_SetRef(SC__Comp_Interpreter, SC_Base_ConstructorStr(nil, JB_LUB[932], false));
	{
		SCFunction* _t = SC__Comp_MainFunc;
		if (_t) {
			SC_Func_StripTest(_t);
		}
	}
	;
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (f == nil) {
				break;
			}
			SC_Func_StripTest(f);
			_if0++;
		};
	}
	;
	if (SC__Options_ListAllLib) {
		{
			Array* _LoopSrcf5 = SC__Comp_ClassList;
			int _if3 = 0;
			while (true) {
				SCClass* c = ((SCClass*)JB_Array_Value(_LoopSrcf5, _if3));
				if (c == nil) {
					break;
				}
				SC_Class_Reach(c, SC__Comp_Interpreter, nil);
				_if3++;
			};
		};
	}
	{
		Array* _LoopSrcf8 = SC__Comp_ClassList;
		int _if6 = 0;
		while (true) {
			SCClass* c = ((SCClass*)JB_Array_Value(_LoopSrcf8, _if6));
			if (c == nil) {
				break;
			}
			if (c->MyReacher) {
				SC_Class_ReachBehaviours(c);
			}
			_if6++;
		};
	}
	;
	SC_CodeSorter__LeafsFirst();
}

void SC_Comp__DoRefAnalysis() {
	Array* list = JB_Array_Constructor0(nil);
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (f == nil) {
				break;
			}
			if (SC_Func_IsARealSpdFunc(f)) {
				JB_Array_Clear(list);
				SC_Func_AnalyseRefs(f, list);
			}
			_if0++;
		};
	}
	;
	JB_SetRef(SC__Func_CurrFunc, nil);
}

void SC_Comp__DoSavers(int Stage) {
	{
		int _if0 = 0;
		while (true) {
			SCClass* c = ((SCClass*)JB_Array_Value(SC__Comp_ClassList, _if0));
			if (c == nil) {
				break;
			}
			if (SC_Class_IsSaveableObject(c) or SC_Class_IsSaveableStruct(c)) {
				SCFunction* First = SC_Class_DoSaver(c, JB_LUB[1207], Stage);
				SCFunction* Second = SC_Class_DoSaver(c, JB_LUB[996], Stage);
				if (((bool)First) != ((bool)Second)) {
					if ((!(First))) {
						First = Second;
					}
					if (true) {
						JB_Msg_SyntaxExpect(First->Source, JB_LUB[746]);
					}
				}
			}
			_if0++;
		};
	};
}

bool SC_Comp__EnterCompile() {
	return (!SC_Comp__TryVariousStartModes()) and (SC_FB__ParseArgs() and (!SC_AC__EnterAutoComplete()));
}

void SC_Comp__FileSanityTests() {
	JB_File* A = JB_Incr(JB_Str_AsFile(JB_LUB[418]));
	JB_File* B = JB_Incr(JB_Str_AsFile(JB_LUB[417]));
	JB_String* _tmPf1 = JB_Incr(JB_File_Path(A));
	JB_String* C = JB_Incr(JB_Str_Child(_tmPf1, JB_LUB[1469]));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(JB_File_Path(B));
	JB_String* D = JB_Incr(JB_Str_Child(_tmPf2, JB_LUB[1469]));
	{
		int i = 0;
		while (i < 3) {
			if (JB_Rec_OK(JB_StdErr)) {
				SC_Comp__FileTestsSub(A, B, C, D);
			}
			i++;
		};
		JB_Decr(_tmPf2);
	}
	;
	JB_Decr(C);
	JB_Decr(D);
	JB_File_DeleteAll(A);
	JB_Decr(A);
	JB_File_DeleteAll(B);
	JB_Decr(B);
}

void SC_Comp__FileTestsSub(JB_File* Dest, JB_File* Src, JB_String* A, JB_String* B) {
	JB_File_DeleteAll(Dest);
	JB_File_DeleteAll(Src);
	if ((!((!JB_File_Exists(Dest, false)) and (!JB_File_Exists(Src, false))))) {
		JB_Str_SyntaxExpect(JB_LUB[1337]);
		return;
	}
	JB_File_LinkToSet(Src, Dest);
	JB_Str_SyntaxAppend(A, JB__Constants_Name);
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(B));
	JB_String* ReadBack = JB_Incr(JB_File_ReadAll(_tmPf0, 134217728, true));
	JB_Decr(_tmPf0);
	if ((!JB_Str_Equals(ReadBack, JB__Constants_Name, false))) {
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1277], ReadBack));
		JB_Str_SyntaxExpect(_tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(ReadBack);
}

Macro* SC_Comp__FindAdj(Message* exp, Array* prms) {
	Message* f = JB_Msg_NeedFirst(exp);
	if ((!f)) {
		return nil;
	}
	Dictionary* d = SC_Comp__Adj(f);
	if ((!d)) {
		return nil;
	}
	Message* name = JB_Msg_NeedSyxInt(exp, JB_SyxThg, 1);
	if ((!name)) {
		return nil;
	}
	JB_SetRef(name->Name, JB_Str_LowerCase(name->Name));
	if ((prms != nil) and ((!JB_Msg_EqualsSyx(f, JB_SyxThg, false)))) {
		JB_Array_SyntaxAppend(prms, f);
	}
	return ((Macro*)JB_Dict_Expect(d, name));
}

SCDecl* SC_Comp__FindClassType(Message* n) {
	SCModule* m = SC__Mod_Curr;
	if ((!m)) {
		m = SC__Comp_program;
	}
	SCClass* c = SC_Base_FindClassMsg(m, n, kSC__SCNodeFindMode_WantAType);
	if (c) {
		return c->TypeNormal;
	}
	return nil;
}

SCFunction* SC_Comp__FindFunction(JB_String* Name) {
	SCObject* o = SC_Base_SyntaxAccess(SC__Comp_program, Name);
	if (JB_Object_FastIsa(o, &SCFunctionData)) {
		return ((SCFunction*)o);
	}
	if (true) {
		JB_Object_Fail(nil, JB_Str_OperatorPlus(JB_LUB[733], Name));
	}
	return nil;
}

SCModule* SC_Comp__FindModuleMsg(Message* where, SCNodeFindMode Mode) {
	return SC_Base_FindModuleMsg(SC__Comp_program, where, Mode);
}

SCNode* SC_Comp__FindModuleOrClass(Message* mod, bool retry) {
	SCNode* rz = nil;
	if ((JB_Msg_EqualsSyx(mod, JB_SyxName, false)) and (JB_Msg_SyntaxEquals(mod, JB_LUB[1777], false))) {
		return SC__Comp_program;
	}
	SCModule* Module = SC_Comp__FindModuleMsg(mod, kSC__SCNodeFindMode_NoErrors);
	if ((!Module)) {
		return nil;
	}
	if (JB_Msg_EqualsSyx(mod, JB_SyxThg, false)) {
		rz = Module->Cls;
		if ((!(((bool)rz) or retry))) {
			return nil;
		}
	}
	if ((!(rz))) {
		rz = Module;
	}
	return rz;
}

JB_File* SC_Comp__FindProject(JB_String* Path, bool error) {
	JB_File* p = JB_Incr(JB_File_Parent(SC__Comp_BaseProjectPath));
	JB_File* B = JB_Incr(SC_Comp__FindProjectSub(p, Path));
	JB_Decr(p);
	if (JB_File_SyntaxCast(B)) {
		JB_SafeDecr(B);
		return B;
	}
	JB_Decr(B);
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* A = JB_Incr(SC_Comp__FindProjectSub(_tmPf0, Path));
	JB_Decr(_tmPf0);
	if (JB_File_SyntaxCast(A)) {
		JB_SafeDecr(A);
		return A;
	}
	JB_Decr(A);
	return nil;
}

JB_File* SC_Comp__FindProjectSub(JB_String* base, JB_String* Path) {
	JB_File* rz = nil;
	if (JB_Str_First(Path) == '/') {
		JB_Decr(rz);
		return JB_Str_FileThatExists(Path, JB_LUB[1474]);
	}
	JB_String* First = JB_Incr(Path);
	Ind SlashPos = JB_Str_FindByte(Path, '/', 0, JB_int__Max());
	if (JB_Ind_SyntaxCast(SlashPos)) {
		JB_SetRef(First, JB_Str_Range(Path, 0, SlashPos));
	}
	JB_SetRef(First, SC_Comp__AddSCProj(First));
	if (JB_Ind_SyntaxCast(SlashPos)) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(Path, (SlashPos), JB_int__Max()));
		JB_SetRef(First, JB_Str_OperatorPlus(First, _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_SetRef(rz, JB_Str_ChildFile(base, First));
	JB_Decr(First);
	if ((!JB_File_Exists(rz, false))) {
		JB_SetRef(rz, nil);
	}
	JB_SafeDecr(rz);
	return rz;
}

JB_String* SC_Comp__FindProjNoSuffix(JB_String* Path) {
	JB_String* spd = JB_Incr(JB_Str_OperatorPlus(Path, JB_LUB[382]));
	if (JB_Str_FileExists(spd)) {
		JB_SafeDecr(spd);
		return spd;
	}
	JB_Decr(spd);
	return JB_Str_OperatorPlus(Path, JB_LUB[380]);
}

JB_String* SC_Comp__FindSpeedieRoot() {
	JB_String* _tmPf1 = JB_Incr(JB_App__Path());
	JB_String* _tmPf0 = JB_Incr(JB_Str_ResolvePath(_tmPf1, false));
	JB_Decr(_tmPf1);
	JB_String* paths = JB_Incr(JB_Str_Parent(_tmPf0));
	JB_Decr(_tmPf0);
	JB_String* srch = JB_Incr(JB_LUB[409]);
	Ind found = JB_Str_InStr(paths, srch, 0, JB_int__Max(), true);
	if (JB_Ind_SyntaxCast(found)) {
		JB_String* _tmPf2 = JB_Incr(JB_Str_Range(paths, 0, found + JB_Str_Length(srch)));
		JB_Decr(srch);
		JB_Decr(paths);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_Decr(paths);
	JB_Decr(srch);
	return JB_LUB[434];
}

JB_File* SC_Comp__GeneratedCppsFolder() {
	if ((!SC__Options_ExternalCompile)) {
		return SC__Comp_TempFolder;
	}
	if (SC__Options_SelfReplacement) {
		JB_File* _tmPf0 = JB_Incr(SC_Comp__BuildFolder());
		JB_File* _tmPf3 = JB_Incr(_tmPf0);
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	JB_File* _tmPf1 = JB_Incr(JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, JB_LUB[794]));
	JB_File* _tmPf2 = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_String* SC_Comp__IdealName() {
	Message* s = JB_Incr(JB_Msg_GetConf(SC__Comp_ConfMsg, JB_LUB[1806], false));
	if (s) {
		JB_String* _tmPf2 = JB_Incr(s->Name);
		JB_Decr(s);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_String* _tmPf0 = JB_Incr(SC_Ext__ProductName());
	JB_String* _tmPf1 = JB_Incr(JB_Str_TrimExtAndPath(_tmPf0, true));
	JB_Decr(_tmPf0);
	JB_Decr(s);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Comp__ImportAll() {
	SC_Comp__Timer(JB_LUB[1165]);
	if ((!SC_Comp__Stage(JB_LUB[876]))) {
		return;
	}
	SC_Comp__ImportLibs();
	SC_Comp__ImportProj();
	SC_Comp__ImportAST();
	if (SC__Options_SelfReplacement) {
		SC_VM_Builder__MakeTheVM();
	}
	if ((!SC_Comp__Stage(JB_LUB[911]))) {
		return;
	}
	SC_Comp__Timer(JB_LUB[911]);
	{
		Array* _LoopSrcf2 = JB_Incr(SC__Imp_AllFiles);
		int _if0 = 0;
		while (true) {
			SCFile* L = JB_Incr(((SCFile*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (L == nil) {
				JB_Decr(L);
				break;
			}
			SC_Imp_Use(L->Proj);
			SC_Base_ImportFile(SC__Comp_program, L);
			JB_Decr(L);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	SC_Comp__Stage(JB_LUB[918]);
	int mark = SC_Comp__InitBasicStuff();
	if ((!SC_Comp__AddMain(mark))) {
		return;
	}
	JB__Tk_Using.Flags = kJB__MsgParseFlags_Inserted;
	SC_Imp__NoProj();
	SC_SCTasks__CollectAll();
	{
		Array* _LoopSrcf5 = JB_Incr(SC__Comp_ClassList);
		int _if3 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf5, _if3)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Class_TryAddToProject(c);
			JB_Decr(c);
			_if3++;
		};
		JB_Decr(_LoopSrcf5);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[1143]))) {
		return;
	}
	{
		Message* _LoopSrcf8 = JB_Incr(SC__Comp_ExtendList);
		Message* l = JB_Incr(((Message*)JB_Ring_First(_LoopSrcf8)));
		while (l) {
			Message* _Nf7 = JB_Incr(((Message*)JB_Ring_NextSib(l)));
			JB_FreeIfDead(SC_Class__ProcessExtend(l, true, nil));
			JB_SetRef(l, _Nf7);
			JB_Decr(_Nf7);
		};
		JB_Decr(l);
		;
		JB_Decr(_LoopSrcf8);
	}
	;
	{
		Array* _LoopSrcf11 = JB_Incr(SC__Comp_ExtendModuleList);
		int _if9 = 0;
		while (true) {
			Message* l = JB_Incr(((Message*)JB_Array_Value(_LoopSrcf11, _if9)));
			if (l == nil) {
				JB_Decr(l);
				break;
			}
			JB_FreeIfDead(SC_Class__ProcessExtend(l, false, nil));
			JB_Decr(l);
			_if9++;
		};
		JB_Decr(_LoopSrcf11);
	}
	;
	if ((!SC_Comp__InitBasicFuncs())) {
		return;
	}
	if ((!SC_Comp__Stage(JB_LUB[801]))) {
		return;
	}
	{
		Array* _LoopSrcf14 = JB_Incr(SC__Comp_ClassList);
		int _if12 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf14, _if12)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Class_CreateBehaviour(c);
			JB_Decr(c);
			_if12++;
		};
		JB_Decr(_LoopSrcf14);
	}
	;
	SC_Comp__LoadSuperClasses();
	{
		Array* _LoopSrcf17 = JB_Incr(SC__Comp_ClassList);
		int _if15 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf17, _if15)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Class_GetDepth(c);
			JB_Decr(c);
			_if15++;
		};
		JB_Decr(_LoopSrcf17);
	}
	;
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	SC_Comp__SortModulesAndClasses();
	{
		Array* _LoopSrcf20 = JB_Incr(SC__Comp_ClassList);
		int _if18 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf20, _if18)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Class_DataTypePostLoad(c);
			JB_Decr(c);
			_if18++;
		};
		JB_Decr(_LoopSrcf20);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[1209]))) {
		return;
	}
	{
		Array* _LoopSrcf23 = JB_Incr(SC__Comp_ClassList);
		int _if21 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf23, _if21)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Class_LoadSaver(c);
			JB_Decr(c);
			_if21++;
		};
		JB_Decr(_LoopSrcf23);
	}
	;
	SC_Comp__DoSavers(0);
	{
		Array* _LoopSrcf26 = JB_Incr(SC__Comp_ClassList);
		int _if24 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf26, _if24)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Class_ProcessBehaviours(c);
			JB_Decr(c);
			_if24++;
		};
		JB_Decr(_LoopSrcf26);
	}
	;
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	{
		Array* _LoopSrcf29 = JB_Incr(SC__Comp_ClassList);
		int _if27 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf29, _if27)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Class_LoadClassType(c);
			SC_Class_ProcessInterfaces(c);
			JB_Decr(c);
			_if27++;
		};
		JB_Decr(_LoopSrcf29);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[799]))) {
		return;
	}
	{
		Array* _LoopSrcf32 = JB_Incr(SC__Comp_ClassList);
		int _if30 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf32, _if30)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Class_ContainedTypeLoad(c);
			JB_Decr(c);
			_if30++;
		};
		JB_Decr(_LoopSrcf32);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[1125]))) {
		return;
	}
	{
		Array* _LoopSrcf35 = JB_Incr(SC__Comp_ClassList);
		int _if33 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf35, _if33)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Class_CollectProperties(c);
			JB_Decr(c);
			if (SC_TooManyErrors()) {
				JB_Decr(_LoopSrcf35);
				return;
			}
			_if33++;
		};
		JB_Decr(_LoopSrcf35);
	}
	;
	{
		Array* _LoopSrcf38 = JB_Incr(SC__Comp_ClassList);
		int _if36 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf38, _if36)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			if (SC_Class_IsStruct(c)) {
				SC_Class_GetStructDepth(c);
			}
			JB_Decr(c);
			_if36++;
		};
		JB_Decr(_LoopSrcf38);
	}
	;
	SC_Comp__SortModulesAndClasses();
	{
		Array* _LoopSrcf41 = JB_Incr(SC__Comp_ClassList);
		int _if39 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf41, _if39)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Class_CalculateSize(c, 0);
			JB_Decr(c);
			_if39++;
		};
		JB_Decr(_LoopSrcf41);
	}
	;
	{
		Array* _LoopSrcf44 = JB_Incr(SC__Comp_ClassList);
		int _if42 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf44, _if42)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Class_LoadConstructors(c);
			JB_Decr(c);
			_if42++;
		};
		JB_Decr(_LoopSrcf44);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[770]))) {
		return;
	}
	SC_Comp__CollectConstants();
	JB_ClassData_Restore((&MessageData));
	SC_Imp__NoProj();
	if (SC__Comp_API_Place) {
		Message* Proj = JB_Incr(JB_Msg_NeedSyx(SC__Comp_API_Place, JB_SyxThg));
		if (Proj) {
			{
				Array* _LoopSrcf47 = JB_Incr(SC__Comp_API_List);
				int _if45 = 0;
				while (true) {
					Message* m = JB_Incr(((Message*)JB_Array_Value(_LoopSrcf47, _if45)));
					if (m == nil) {
						JB_Decr(m);
						break;
					}
					SC_SC_API__DelayedClassAPI(m, Proj->Name);
					JB_Decr(m);
					_if45++;
				};
				JB_Decr(_LoopSrcf47);
			};
		}
		JB_Decr(Proj);
	}
	SC_Comp__DoSavers(1);
	if ((!SC_Comp__Stage(JB_LUB[800]))) {
		return;
	}
	{
		Array* _LoopSrcf50 = JB_Incr(SC__Comp_ClassList);
		int _if48 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf50, _if48)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Base_LoadExportName(c);
			JB_Decr(c);
			_if48++;
		};
		JB_Decr(_LoopSrcf50);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[919]))) {
		return;
	}
	SC_Comp__LoadInitsAndMore();
	SC_Imp__NoProj();
	if ((!SC_Comp__Stage(JB_LUB[904]))) {
		return;
	}
	{
		Array* _LoopSrcf53 = JB_Incr(SC__Comp_ProtoTypes);
		int _if51 = 0;
		while (true) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf53, _if51)));
			if (f == nil) {
				JB_Decr(f);
				break;
			}
			SC_Func_ProtoExportName(f);
			SC_Func_FuncDecls(f);
			SC_Func_MakeParamsReal(f);
			JB_Decr(f);
			_if51++;
		};
		JB_Decr(_LoopSrcf53);
	}
	;
	JB_SetRef(SC__Func_CurrFunc, nil);
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	SC_Comp__DoSavers(2);
	if ((!SC_Comp__Stage(JB_LUB[1126]))) {
		return;
	}
	{
		Array* _LoopSrcf56 = JB_Incr(SC__Comp_FuncList);
		int _if54 = 0;
		while (true) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf56, _if54)));
			if (f == nil) {
				JB_Decr(f);
				break;
			}
			SC_Func_FuncDecls(f);
			SC_Base_LoadExportName(f);
			JB_Decr(f);
			if (SC_TooManyErrors()) {
				JB_Decr(_LoopSrcf56);
				return;
			}
			_if54++;
		};
		JB_Decr(_LoopSrcf56);
	}
	;
	JB_SetRef(SC__Func_CurrFunc, nil);
	SCFunction* fn = JB_Incr(((SCFunction*)((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, JB_LUB[948]))));
	if (fn) {
		fn->IsKiller = true;
	}
	JB_Decr(fn);
	if ((!SC_Comp__Stage(JB_LUB[608]))) {
		return;
	}
	{
		Array* _LoopSrcf59 = JB_Incr(SC__Comp_ClassList);
		int _if57 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf59, _if57)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			JB_SetRef(c->ExportName, SC_Class_StructName(c));
			SC_Class_AfterFuncsDecled(c);
			JB_Decr(c);
			_if57++;
		};
		JB_Decr(_LoopSrcf59);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[843]))) {
		return;
	}
	{
		Array* _LoopSrcf62 = JB_Incr(SC__Comp_ClassList);
		int _if60 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf62, _if60)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Class_AfterAfterFuncs(c);
			JB_Decr(c);
			_if60++;
		};
		JB_Decr(_LoopSrcf62);
	}
	;
	if ((!SC_Comp__Stage(JB_LUB[771]))) {
		return;
	}
	{
		Array* _LoopSrcf65 = JB_Incr(SC__Comp_ModuleList);
		int _if63 = 0;
		while (true) {
			SCModule* m = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf65, _if63)));
			if (m == nil) {
				JB_Decr(m);
				break;
			}
			SC_Mod_InitDecls(m);
			JB_Decr(m);
			_if63++;
		};
		JB_Decr(_LoopSrcf65);
	}
	;
	{
		Array* _LoopSrcf68 = JB_Incr(SC__Imp_AllFiles);
		int _if66 = 0;
		while (true) {
			SCFile* F = JB_Incr(((SCFile*)JB_Array_Value(_LoopSrcf68, _if66)));
			if (F == nil) {
				JB_Decr(F);
				break;
			}
			SC_SCFile_CollectGlobals(F, SC__Comp_program);
			JB_Decr(F);
			_if66++;
		};
		JB_Decr(_LoopSrcf68);
	}
	;
	SC_Imp__NoProj();
	JB_ClassData_Restore((&MessageData));
	{
		Array* _LoopSrcf71 = JB_Incr(SC__Comp_ModuleList);
		int _if69 = 0;
		while (true) {
			SCModule* m = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf71, _if69)));
			if (m == nil) {
				JB_Decr(m);
				break;
			}
			if (m != SC__Comp_program) {
				SC_Mod_BaseDecls(m);
			}
			SC_Mod_GlobalsFix(m);
			SCClass* c = JB_Incr(m->Cls);
			JB_Decr(m);
			if (c) {
				SC_Class_RenameInterfaces(c);
			}
			JB_Decr(c);
			_if69++;
		};
		JB_Decr(_LoopSrcf71);
	}
	;
	{
		Array* _LoopSrcf74 = JB_Incr(SC_SortInitOrder(SC__Comp_ModuleList));
		int _if72 = 0;
		while (true) {
			SCModule* m = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf74, _if72)));
			if (m == nil) {
				JB_Decr(m);
				break;
			}
			SC_Mod_DelayedInitFuncTransform(m);
			JB_Decr(m);
			_if72++;
		};
		JB_Decr(_LoopSrcf74);
	}
	;
	SC_Comp__PostInitCodeCall();
	SC_Comp__Stage(JB_LUB[802]);
	{
		Array* _LoopSrcf77 = JB_Incr(SC__Comp_FuncList);
		int _if75 = 0;
		while (true) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf77, _if75)));
			if (f == nil) {
				JB_Decr(f);
				break;
			}
			SCDecl* p = JB_Incr(f->ProtoDecl);
			if (p) {
				(SC_Decl_NameSet(p, f->ExportName));
			}
			 else {
				SC_Func_AddConstructorReturn2(f);
			}
			JB_Decr(f);
			JB_Decr(p);
			_if75++;
		};
		JB_Decr(_LoopSrcf77);
	}
	;
	SC_Comp__Stage(JB_LUB[762]);
	{
		Array* _LoopSrcf80 = JB_Incr(SC__Comp_ClassList);
		int _if78 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf80, _if78)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Class_CheckIterator(c);
			JB_Decr(c);
			_if78++;
		};
		JB_Decr(_LoopSrcf80);
	}
	;
	SC_Comp__Timer(JB_LUB[1326]);
	SC_Comp__Stage(JB_LUB[1327]);
	SC_Func__TransformAll();
	SC_Comp__Stage(JB_LUB[679]);
	SC_LinkMap__CollectAll();
	JB_SetRef(SC__Func_CurrFunc, nil);
}

void SC_Comp__ImportAST() {
	{
		Array* _LoopSrcf2 = SC__Comp_ImportedList;
		int _if0 = 0;
		while (true) {
			SCImport* rz = ((SCImport*)JB_Array_Value(_LoopSrcf2, _if0));
			if (rz == nil) {
				break;
			}
			SC_Imp_PrepareAll(rz);
			_if0++;
		};
	};
}

void SC_Comp__ImportLibs() {
	SC__Imp_STDLibTime = true;
	JB_File* _tmPf0 = JB_Incr(SC_Comp__Library());
	JB_FreeIfDead(SC_Imp__ImportPath(JB_LUB[993], _tmPf0, 1, true));
	JB_Decr(_tmPf0);
	JB_File* _tmPf1 = JB_Incr(SC_Comp__Jeebox());
	JB_FreeIfDead(SC_Imp__ImportPath(JB_LUB[1744], _tmPf1, 1, true));
	JB_Decr(_tmPf1);
}

void SC_Comp__ImportProj() {
	SC__Imp_STDLibTime = false;
	JB_File* ToUse = JB_Incr(((JB_File*)JB_Ternary(JB_Str_Exists(SC__Options_SingleFileInput), JB_Str_AsFile(SC__Options_SingleFileInput), SC__Comp_BaseProjectPath)));
	JB_SetRef(SC__Comp_Project, SC_Imp__ImportPath(JB_LUB[0], ToUse, 0, false));
	JB_Decr(ToUse);
	if ((!SC__Comp_Project)) {
		JB_Str_SyntaxExpect(JB_LUB[1083]);
		return;
	}
}

int SC_Comp__Init_() {
	{
		JB_SetRef(SC__Comp_OriginalInputPath, JB_LUB[0]);
		JB_SetRef(SC__Comp__Projects, JB_LUB[0]);
		JB_SetRef(SC__Comp__SpeedieProj, JB_LUB[0]);
		SCImport* _tmPf0 = JB_Incr(SC_Imp_Constructor(nil, nil, true));
		JB_SetRef(SC__Comp_InternalFile, SC_SCFile_Constructor(nil, nil, _tmPf0));
		JB_Decr(_tmPf0);
		JB_SetRef(SC__Comp_ProjectName, JB_LUB[0]);
		JB_SetRef(SC__Comp_ReportedName, JB_LUB[0]);
		JB_SetRef(SC__Comp_TodoList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ImportedList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ImportedNames, JB_Dict_Constructor(nil));
		JB_SetRef(SC__Comp_program, SC__Comp_InternalFile->Proj->Mod);
		JB_SetRef(SC__Comp_ClassList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ModuleList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_FuncList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ProtoTypes, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ExportNames, JB_Dict_Constructor(nil));
		JB_SetRef(SC__Comp_AdjDicts, JB_Dict_Constructor(nil));
		JB_SetRef(SC__Comp_SyxArray, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ExtendList, JB_Msg_ConstructorEmpty(nil));
		JB_SetRef(SC__Comp_ConstantsList, JB_Msg_ConstructorEmpty(nil));
		JB_SetRef(SC__Comp_DeclConstants, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_TasksList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_TasksTodo, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_ExtendModuleList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_API_List, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Comp_API_Funcs, JB_Array_Constructor0(nil));
		SC__Comp_InPerry = false;
		SC__Comp_HasMainFunc = false;
		SC__Comp_InitedOK = true;
		SC__Comp_stClasses = 0;
		SC__Comp_stFuncs = 0;
		SC__Comp_stReachedFunc = 0;
		SC__Comp_stReachedClass = 0;
		SC__Comp_stParseTime = 0;
		SC__Comp_stTotalSourceSize = 0;
		SC__Comp_stTotalFileCount = 0;
		SC__Comp_stParseTimeTotal = 0;
		SC__Comp_CurrStage = 0;
		SC__Comp_LastTime = 0;
		JB_SetRef(SC__Comp_LastTimeName, JB_LUB[0]);
		JB_SetRef(SC__Comp_TimerOutput, JB_FS_Constructor(nil));
	}
	;
	return 0;
}

bool SC_Comp__InitBasicFuncs() {
	JB_SetRef(SC__Comp_RefSetRef, SC_Comp__LoadRefFunc(JB_LUB[969]));
	JB_SetRef(SC__Comp_RefIncr, SC_Comp__LoadRefFunc(JB_LUB[961]));
	JB_SetRef(SC__Comp_RefDecr, SC_Comp__LoadRefFunc(JB_LUB[952]));
	JB_SetRef(SC__Comp_RefClear, SC_Comp__LoadRefFunc(JB_LUB[951]));
	JB_SetRef(SC__Comp_RefDecrMulti, SC_Comp__LoadRefFunc(JB_LUB[953]));
	JB_SetRef(SC__Comp_RefFreeIfDead, SC_Comp__LoadRefFunc(JB_LUB[959]));
	JB_SetRef(SC__Comp_RefSafeDecr, SC_Comp__LoadRefFunc(JB_LUB[968]));
	JB_SetRef(SC__Comp_NewFunc, SC_Comp__FindFunction(JB_LUB[964]));
	JB_SetRef(SC__Comp_TernaryFunc, SC_Comp__FindFunction(JB_LUB[972]));
	JB_SetRef(SC__Comp_fnAs, SC_Comp__LoadTypeTest(JB_LUB[1847]));
	JB_SetRef(SC__Comp_fnFastAs, SC_Comp__LoadTypeTest(JB_LUB[1848]));
	JB_SetRef(SC__Comp_fnFastIsa, SC_Comp__LoadTypeTest(JB_LUB[1849]));
	JB_SetRef(SC__Comp_fnIsa, SC_Comp__LoadTypeTest(JB_LUB[1850]));
	JB_SetRef(SC__Comp_fnMustbe, SC_Comp__LoadTypeTest(JB_LUB[1804]));
	JB_SetRef(SC__Comp_fnOpMustBe, SC_Comp__LoadTypeTest(JB_LUB[1851]));
	JB_SetRef(SC__Comp_PrivateProperty, SC_Comp__CreateFuncFromSource(JB_LUB[1677]));
	return JB_Rec_OK(JB_StdErr);
}

int SC_Comp__InitBasicStuff() {
	int rz = 0;
	rz = JB_StdErr->ErrorCount;
	if (rz > 0) {
		JB_StdErr->LowerErrorsTo = kJB__ErrorSeverity_Warning;
		SC__Comp_InitedOK = false;
	}
	JB_ClassData_Restore((&MessageData));
	SC__Options_ListAllLib = SC_Linkage__Interpreter();
	JB_Array_SyntaxAppend(SC__Comp_ModuleList, SC__Comp_program);
	SC_Comp__InitTypes();
	JB_SetRef(JB_TypeNil, SC_Comp__AddGlobalConst(JB_LUB[1811], JB_TypeObject, kSC__NilState_ActuallyNil));
	JB_SetRef(JB_TrueBool, SC_Comp__AddGlobalConst(JB_LUB[2005], JB_TypeBool, kSC__NilState_Real | kSC__NilState_TrueValue));
	JB_SetRef(JB_FalseBool, SC_Comp__AddGlobalConst(JB_LUB[1649], JB_TypeBool, kSC__NilState_Real | kSC__NilState_FalseValue));
	SC_Comp__AddGlobalConstNumWithStrClassInt64(JB_LUB[1457], JB_TypeInt, JB_Date_TimeID(SC__Imp_Recent));
	SC_Comp__AddGlobalConstNumWithStrClassInt64(JB_LUB[1455], JB_TypeDate, JB_Date__Now());
	SC_Comp__AddGlobalConstNumWithStrClassInt64(JB_LUB[1453], JB_TypeDate, SC__Imp_Recent);
	SC_Comp__AddGlobalConstNumWithStrClassStr(JB_LUB[2106], JB_Typef64, JB_LUB[495]);
	SC_Comp__AddGlobalConstNumWithStrClassStr(JB_LUB[2107], JB_Typef64, JB_LUB[539]);
	if (JB_StdErr->ErrorCount > rz) {
		SC__Comp_InitedOK = false;
	}
	return rz;
}

int SC_Comp__InitCode_() {
	return 0;
}

void SC_Comp__InitCompiler() {
	if ((!((({
		JB_String* _tmPf2 = JB_Incr(SC_Comp__Projects());
		JB_File* _tmPf1 = JB_Incr(JB_Str_ChildFile(_tmPf2, JB_LUB[993]));
		JB_Decr(_tmPf2);
		bool _tmPf0 = JB_File_MustExist(_tmPf1, JB_LUB[0]);
		JB_Decr(_tmPf1);
		 _tmPf0;
	})) and JB_Rec_OK(JB_StdErr)))) {
		return;
	}
	SC_Opp__Init();
	SC_Cpp__Init();
	if ((!(SC__Comp_Files))) {
		JB_SetRef(SC__Comp_Files, JB_Dict_Constructor(nil));
	}
	JB_FS_AppendByte(SC__Comp_TimerOutput, '\n');
	Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxStr, JB_LUB[0]));
	SC_Crkt__CollectString(_tmPf3);
	JB_Decr(_tmPf3);
	SC__Comp_CurrStage = 1;
	SC__SC_UniqueNum = 100;
	if (JB_Str_Exists(SC__Options_SingleFileInput)) {
		if (JB__Proc_Parent) {
			JB_String* _tmPf4 = JB_Incr(SC_Str_ScriptContainer(SC__Comp_OriginalInputPath, JB_LUB[423]));
			JB_SetRef(SC__Comp__BuildFolder, JB_Str_AsFile(_tmPf4));
			JB_Decr(_tmPf4);
		}
		 else {
			JB_SetRef(SC__Comp__BuildFolder, SC__Comp_BaseProjectPath);
		}
	}
	 else {
		JB_String* _tmPf6 = JB_Incr(SC_Comp__VariantSuffix());
		JB_String* _tmPf5 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[676], _tmPf6));
		JB_Decr(_tmPf6);
		JB_SetRef(SC__Comp__BuildFolder, JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, _tmPf5));
		JB_Decr(_tmPf5);
	}
	JB_String* _tmPf8 = JB_Incr(SC_Ext__ProjTmpPath());
	JB_File* _tmPf7 = JB_Incr(JB_Str_AsFile(_tmPf8));
	JB_Decr(_tmPf8);
	JB_File* t = JB_Incr(_tmPf7);
	JB_Decr(_tmPf7);
	JB_SetRef(SC__Comp_TempFolder, t);
	JB_Str_MakeEntirePath(t, true);
	JB_Decr(t);
	JB_File* _tmPf9 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_Str_MakeEntirePath(_tmPf9, true);
	JB_Decr(_tmPf9);
	SC_Comp__CreateRoot();
	SC_Comp__CreateDisambiguation();
	JB_Array_SyntaxAppend(SC__Imp_AllFiles, SC__Comp_InternalFile);
	JB_SetRef(SC__IR_Resources, SC__Imp_AllFiles);
}

void SC_Comp__InitTypes() {
	JB_SetRef(JB_TypeInt, SC_Comp__FindClassName(JB_LUB[1716]));
	JB_SetRef(JB_TypeInt16, SC_Comp__FindClassName(JB_LUB[1720]));
	JB_SetRef(JB_TypeInt64, SC_Comp__FindClassName(JB_LUB[1721]));
	JB_SetRef(JB_TypeuInt, SC_Comp__FindClassName(JB_LUB[2015]));
	JB_SetRef(JB_TypeuInt16, SC_Comp__FindClassName(JB_LUB[2016]));
	JB_SetRef(JB_TypeuInt64, SC_Comp__FindClassName(JB_LUB[2017]));
	JB_SetRef(JB_Typef64, SC_Comp__FindClassName(JB_LUB[1647]));
	JB_SetRef(JB_Typef32, SC_Comp__FindClassName(JB_LUB[1658]));
	JB_SetRef(JB_Typehfloat, SC_Comp__FindClassName(JB_LUB[1694]));
	JB_SetRef(JB_Typefloat, JB_Typef32);
	JB_SetRef(JB_TypeBool, SC_Comp__FindClassName(JB_LUB[1521]));
	JB_SetRef(JB_TypeString, SC_Comp__FindClassName(JB_LUB[1969]));
	JB_SetRef(JB_TypeStringZero, SC_Comp__FindClassName(JB_LUB[1971]));
	JB_SetRef(JB_TypeByte, SC_Comp__FindClassName(JB_LUB[1528]));
	JB_SetRef(JB_TypeCodePoint, SC_Comp__FindClassName(JB_LUB[1553]));
	JB_SetRef(JB_TypeCharSet, SC_Comp__FindClassName(JB_LUB[1540]));
	JB_SetRef(JB_TypeVec2, SC_Comp__FindClassName(JB_LUB[2030]));
	JB_SetRef(JB_TypeVec3, SC_Comp__FindClassName(JB_LUB[2031]));
	JB_SetRef(JB_TypeVec4, SC_Comp__FindClassName(JB_LUB[2032]));
	JB_SetRef(JB_TypeiVec2, SC_Comp__FindClassName(JB_LUB[1738]));
	JB_SetRef(JB_TypeiVec3, SC_Comp__FindClassName(JB_LUB[1739]));
	JB_SetRef(JB_TypeiVec4, SC_Comp__FindClassName(JB_LUB[1740]));
	JB_SetRef(JB_TypeDate, SC_Comp__FindClassName(JB_LUB[1587]));
	JB_SetRef(JB_TypeJBClass, SC_Comp__FindClassName(JB_LUB[1547]));
	JB_SetRef(JB_TypeTask, SC_Comp__FindClassName(JB_LUB[1988]));
	JB_SetRef(JB_TypeObject, SC_Comp__FindClassName(JB_LUB[1837]));
	JB_SetRef(JB_TypeSyntax, SC_Comp__FindClassName(JB_LUB[1977]));
	JB_SetRef(JB_TypeVoid_, SC_Comp__FindClassName(JB_LUB[1462]));
	JB_SetRef(JB_TypeWrapper, SC_Comp__FindClassName(JB_LUB[1585]));
	JB_SetRef(JB_TypeDictionary, SC_Comp__FindClassName(JB_LUB[1604]));
	JB_SetRef(JB_TypeFastString, SC_Comp__FindClassName(JB_LUB[1650]));
	JB_SetRef(JB_TypeArray, SC_Comp__FindClassName(JB_LUB[1492]));
	JB_SetRef(JB_TypeSaveable, SC_Comp__FindClassName(JB_LUB[1918]));
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	JB_TypeVoid_->LinkedFrom = JB_int__Max();
	JB_SetRef(JB_TypeStringZero->DowngradeTo, JB_TypeString);
	JB_SetRef(JB_TypeVoid, JB_TypeVoid_->TypeNormal);
	JB_SetRef(JB_TypeVoidPtr, SC_Decl_GetAddress(JB_TypeVoid, kSC__DeclMode_Always));
	JB_TypeString->HasSubClass = true;
}

JB_File* SC_Comp__InputFile(JB_File* Default, JB_String* s, Message* where) {
	JB_File* rz = nil;
	if (JB_Str_ContainsString(s, JB_LUB[359])) {
		JB_Msg_SyntaxExpect(where, JB_LUB[923]);
		return nil;
	}
	SCImport* c = SC__Imp_Curr;
	if (c) {
		JB_File* found = ((JB_File*)JB_Dict_ValueLower(c->Resources, s));
		if (JB_File_SyntaxCast(found)) {
			return found;
		}
	}
	int best = JB_int__Max();
	{
		Array* _LoopSrcf2 = SC__Comp_ImportedList;
		int _if0 = 0;
		while (true) {
			SCImport* imp = ((SCImport*)JB_Array_Value(_LoopSrcf2, _if0));
			if (imp == nil) {
				break;
			}
			if (imp->Depth < best) {
				JB_File* f = ((JB_File*)JB_Dict_ValueLower(imp->Resources, s));
				if (JB_File_SyntaxCast(f)) {
					rz = f;
					best = imp->Depth;
				}
			}
			_if0++;
		};
	}
	;
	if (JB_File_SyntaxCast(rz)) {
		return rz;
	}
	rz = JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, s);
	if (Default != nil) {
		if ((!(JB_File_SyntaxCast(rz)))) {
			rz = JB_File_SyntaxAccess(Default, s);
		}
	}
	if ((!JB_File_Exists(rz, false))) {
		rz = nil;
	}
	return rz;
}

bool SC_Comp__IsTest() {
	JB_String* _tmPf0 = JB_Incr(JB_App__FileName());
	bool _tmPf1 = (JB_Str_ContainsString(_tmPf0, JB_LUB[1273]));
	JB_Decr(_tmPf0);
	return _tmPf1;
}

JB_File* SC_Comp__Jeebox() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* _tmPf1 = JB_Incr(JB_Str_ChildFile(_tmPf0, JB_LUB[1745]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_File* SC_Comp__Library() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* _tmPf1 = JB_Incr(JB_Str_ChildFile(_tmPf0, JB_LUB[993]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Comp__LoadInitsAndMore() {
	{
		Array* _LoopSrcf2 = SC__Comp_ModuleList;
		int _if0 = 0;
		while (true) {
			SCModule* m = ((SCModule*)JB_Array_Value(_LoopSrcf2, _if0));
			if (m == nil) {
				break;
			}
			SC_Base_Use(m);
			SC_Base_LoadExportName(m);
			SC_Mod_LoadInitFunc(m);
			_if0++;
		};
	};
}

SCFunction* SC_Comp__LoadRefFunc(JB_String* name) {
	SCFunction* o = SC_Comp__FindFunction(name);
	if (o) {
		(SC_Func_SyntaxIsSet(o, kSC__FunctionType_Reffer, true));
		return o;
	}
	return nil;
}

void SC_Comp__LoadSuperClasses() {
	{
		Array* _LoopSrcf2 = SC__Comp_ClassList;
		int _if0 = 0;
		while (true) {
			SCClass* c = ((SCClass*)JB_Array_Value(_LoopSrcf2, _if0));
			if (c == nil) {
				break;
			}
			SC_Class_LoadSuperClass(c);
			_if0++;
		};
	}
	;
	{
		Array* _LoopSrcf5 = SC__Comp_ClassList;
		int _if3 = 0;
		while (true) {
			SCClass* c = ((SCClass*)JB_Array_Value(_LoopSrcf5, _if3));
			if (c == nil) {
				break;
			}
			SC_Class_LoadSuperBehaviours(c);
			_if3++;
		};
	};
}

SCFunction* SC_Comp__LoadTypeTest(JB_String* s) {
	SCObject* f = SC_Base_SyntaxAccess(JB_TypeObject, s);
	if (JB_Object_FastIsa(f, &SCFunctionData)) {
		(SC_Func_SyntaxIsSet(((SCFunction*)f), kSC__FunctionType_TypeTest, true));
		return ((SCFunction*)f);
	}
	return nil;
}

void SC_Comp__Main() {
	if (SC_Comp__EnterCompile()) {
		if (true) {
			FlowControlStopper _usingf0 = JB_FlowControlStopper_SyntaxUsing(JB_Flow__FlowAllow(JB_LUB[1228], (112253974084932)));
			SC_Comp__CompileTime();
			JB_FlowControlStopper_SyntaxUsingComplete(_usingf0);
		}
	}
}

Message* SC_Comp__MakeMainFunc() {
	SCFunction* f = JB_Incr(SC__Comp_MainFunc);
	if (f) {
		f->BlindCasts = kJB__ErrorSeverity_Error;
		Message* _tmPf2 = JB_Incr(SC_Func_SourceArg(f));
		JB_Decr(f);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_Decr(f);
	JB_PrintLine(JB_LUB[780]);
	SC__Options_ProjectIsLibrary = true;
	Message* _tmPf0 = JB_Incr(SC_Base_CollectString(SC__Comp_program, JB_LUB[1779]));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(_tmPf0)));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Comp__MiniTests() {
	SC_Comp__TestDate();
	SC_Comp__TestTask();
}

bool SC_Comp__ModulesSorter(JB_Object* a, JB_Object* b) {
	SCModule* aa = ((SCModule*)a);
	SCModule* bb = ((SCModule*)b);
	SCClass* ca = aa->Cls;
	SCClass* cb = bb->Cls;
	if ((!ca) or (!cb)) {
		if (((bool)ca) or ((bool)cb)) {
			return ((bool)cb);
		}
	}
	 else {
		SCNodeType tt = ca->BaseType;
		int D = ((int)tt) - ((int)cb->BaseType);
		if (D) {
			return D < 0;
		}
		D = (((int)ca->Depth) - ((int)cb->Depth));
		if (D) {
			return D < 0;
		}
		if (tt == kSC__SCNodeType_Struct) {
			D = (((int)ca->StructContainerDepth) - ((int)cb->StructContainerDepth));
			if (D) {
				return D < 0;
			}
		}
	}
	return JB_Str_CompareStr(aa->Name, bb->Name, false) <= -1;
}

void SC_Comp__NewConst(SCDecl* d) {
	SC_Decl_SyntaxAppend(d, kSC__SCDeclInfo_Const | kSC__SCDeclInfo_Global);
	JB_Array_SyntaxAppend(SC__Comp_DeclConstants, d);
}

void SC_Comp__Package() {
	if ((!((!SC_Comp__IsTest()) and (!SC__Options_ExternalCompile)))) {
		return;
	}
	if ((!SC_SC_Targets__SyntaxAccess(JB_LUB[1687]))) {
		return;
	}
	JB_String* Pd = JB_Incr(SC_Ext__ProductPath(false));
	JB_String* Pj = JB_Incr(JB_File_Path(SC__Comp_BaseProjectPath));
	if (JB_Platform__OSX()) {
		JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(Pj));
		JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(Pd));
		SC_Comp__AppleBuildApp(_tmPf0, _tmPf1);
		JB_Decr(_tmPf0);
		JB_Decr(_tmPf1);
	}
	JB_Decr(Pd);
	JB_Decr(Pj);
}

void SC_Comp__PostInitCodeCall() {
	Message* _tmPf0 = JB_Incr(JB_Str_ParseJbin(((JB_LUB[24])), kJB__int64_max));
	JB_Tree_SyntaxAppend(SC__Comp_program->InitVarsArg, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_Comp__PrepareInterpreter() {
	if ((!SC__Options_ListAllLib)) {
		return;
	}
}

void SC_Comp__PrintCompileErrors() {
	if (SC__Options_Warnings) {
		if ((!JB_Rec_HasAnything(JB_StdErr))) {
			return;
		}
	}
	 else {
		if ((!JB_Rec_HasProblems(JB_StdErr))) {
			return;
		}
	}
	SC_Rec_PrePrintErrors(JB_StdErr);
	if (SC__Func_DisabledPoints) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[824]);
		JB_FS_AppendInt32(_fsf0, SC__Func_DisabledPoints);
		JB_FS_AppendString(_fsf0, JB_LUB[2055]);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Str_PrintlineColor(_tmPf1, kJB__ErrorColors_error);
		JB_Decr(_tmPf1);
	}
	ErrorSeverity MinSev = ((ErrorSeverity)JB_Ternary(SC__Options_Warnings, kJB__ErrorSeverity_Warning, ((ErrorSeverity)kJB__ErrorSeverity_Problem)));
	SC_Comp__PrintErrors(MinSev);
	JB_Rec_Clear(JB_StdErr);
}

void SC_Comp__PrintCompileTime(Date durr) {
	if ((!(JB_Rec_OK(JB_StdErr) and (!SC__Options_Silent)))) {
		return;
	}
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_Normal(fs, JB_LUB[1231]);
	JB_FS_AppendInt32(fs, SC__Comp_CurrStage);
	JB_FS_Normal(fs, JB_LUB[764]);
	JB_FS_AppendInt32(fs, SC_Comp__ReachedClassCount());
	JB_FS_Normal(fs, JB_LUB[889]);
	//;
	JB_FS_AppendInt32(fs, SC_Comp__Reachedfuncs());
	JB_FS_AppendString(fs, JB_LUB[148]);
	JB_FS_AppendInt32(fs, JB_Array_Size(SC__Comp_FuncList));
	//;
	JB_FS_Normal(fs, JB_LUB[1241]);
	float avg = ((float)SC__Crkt_TotalSize) / ((float)JB_Array_Size(SC__Crkt_List));
	//;
	JB_FS_AppendInt32(fs, JB_Array_Size(SC__Crkt_List));
	JB_FS_AppendString(fs, JB_LUB[148]);
	//;
	JB_FreeIfDead(JB_int_RenderSize(SC__Crkt_TotalSize, fs));
	//;
	JB_FS_AppendString(fs, JB_LUB[151]);
	JB_FS_AppendFloatAsText(fs, avg);
	JB_FS_AppendByte(fs, ')');
	//;
	JB_FS_Normal(fs, JB_LUB[1325]);
	JB_FreeIfDead(JB_Date_RenderDurr(durr, fs));
	JB_FS_AppendByte(fs, 's');
	JB_FS_Normal(fs, JB_LUB[922]);
	JB_FreeIfDead(JB_int_RenderSize(SC__Comp_stTotalSourceSize, fs));
	if (SC_Options__Color()) {
		JB_FS_AppendString(fs, kJB__ErrorColors_normal);
	}
	JB_Obj_PrintLine(fs);
	JB_Decr(fs);
}

void SC_Comp__PrintErrors(ErrorSeverity MinSev) {
	JB_StdErr->BlockErrors = true;
	JB_String* s = JB_Incr(SC_Comp__RenderErrors(JB_StdErr, MinSev));
	JB_StdErr->BlockErrors = false;
	if (SC__Options_PerryOutput == 2) {
		JB_SetRef(s, JB_Str_Digest(s));
	}
	if (JB_StdErr->ErrorCount) {
		JB_Str_PrintError(s);
	}
	 else {
		JB_Str_Print(s);
	}
	JB_Decr(s);
}

void SC_Comp__PrintResults() {
	SC_Comp__PrintStats();
	SC_Comp__PrintCompileErrors();
	if (JB__Proc_Parent != nil) {
		JB_String* _tmPf1 = JB_Incr(JB_int_RenderFS(JB_App__ID(), nil));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[844], _tmPf1));
		JB_Decr(_tmPf1);
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	if (SC__Options_SelfReplacement and JB_IsTerminal(kJB__FileDes_StdOut)) {
		JB_String* _tmPf2 = JB_Incr(SC_Comp__VariantSuffix());
		if (JB_Str_Equals(_tmPf2, JB_LUB[1273], true)) {
			if (JB_Rec_OK(JB_StdErr)) {
				JB_App__Say(JB_LUB[1938], false);
			}
		}
		JB_Decr(_tmPf2);
	}
	if (SC__Options_Beep) {
		JB_PrintLine(JB_LUB[31]);
	}
}

void SC_Comp__PrintStats() {
	if ((!SC__Options_ArgStats)) {
		return;
	}
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(fs, JB_LUB[888]);
	{
		int i = 0;
		while (i < 12) {
			int c = SC__Func_FuncStats[i];
			if (c) {
				if (i) {
					JB_FS_AppendString(fs, JB_LUB[303]);
				}
				//;
				JB_FS_AppendInt32(fs, i);
				JB_FS_AppendByte(fs, ':');
				JB_FS_AppendInt32(fs, c);
				//;
			}
			i++;
		};
	}
	;
	JB_Obj_PrintLine(fs);
	JB_Decr(fs);
}

JB_String* SC_Comp__Projects() {
	return ({
		JB_String* _X = JB_Incr(SC__Comp__Projects);
		if ((!JB_Str_Exists(_X))) {
			JB_SetRef(_X, SC_Comp__FindSpeedieRoot());
			JB_SetRef(SC__Comp__Projects, _X);
		}
		JB_SafeDecr(_X);
		 _X;
	});
}

bool SC_Comp__Reached(JB_String* s) {
	//;
	SCClass* obj = JB_Incr(SC_Comp__FindClassName(s));
	if (obj) {
		bool _tmPf0 = ((bool)(obj->MyReacher));
		JB_Decr(obj);
		return _tmPf0;
	}
	JB_Decr(obj);
	return false;
}

int SC_Comp__ReachedClassCount() {
	int rz = 0;
	{
		Array* _LoopSrcf2 = SC__Comp_ClassList;
		int _if0 = 0;
		while (true) {
			SCClass* C = ((SCClass*)JB_Array_Value(_LoopSrcf2, _if0));
			if (C == nil) {
				break;
			}
			rz = (rz + (((bool)(C->MyReacher)) and SC_Class_IsObject(C)));
			_if0++;
		};
	}
	;
	return rz;
}

int SC_Comp__Reachedfuncs() {
	int rz = 0;
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (f == nil) {
				break;
			}
			rz = (rz + (f->MyReacher != nil));
			_if0++;
		};
	}
	;
	return rz;
}

JB_String* SC_Comp__RenderErrors(JB_ErrorReceiver* stderr, ErrorSeverity MinSev) {
	int Printable = stderr->ProblemCount + stderr->ErrorCount;
	if (((bool)Printable) and (MinSev < kJB__ErrorSeverity_Problem)) {
		MinSev = kJB__ErrorSeverity_Problem;
	}
	int Count = 0;
	FastString* msg = JB_Incr(JB_FS_Constructor(nil));
	{
		JB_Error* err = JB_Incr(((JB_Error*)JB_Ring_First(stderr->Errors)));
		while (err) {
			JB_Error* _Nf1 = JB_Incr(((JB_Error*)JB_Ring_NextSib(err)));
			if (err->Severity >= MinSev) {
				Count++;
				JB_FreeIfDead(SC_Err_SCRender(err, msg));
			}
			JB_SetRef(err, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(err);
	}
	;
	if ((!Count)) {
		int problems = 0;
		{
			JB_Error* err = JB_Incr(((JB_Error*)JB_Ring_First(stderr->Errors)));
			while (err) {
				JB_Error* _Nf3 = JB_Incr(((JB_Error*)JB_Ring_NextSib(err)));
				if (err->Severity == kJB__ErrorSeverity_Problem) {
					if ((++problems) <= 10) {
						JB_FreeIfDead(SC_Err_SCRender(err, msg));
					}
				}
				JB_SetRef(err, _Nf3);
				JB_Decr(_Nf3);
			};
			JB_Decr(err);
		};
	}
	 else if ((!SC__Options_PerryOutput)) {
		JB_FS_ProblemsFound(msg, Count);
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SyntaxCast(msg));
	JB_Decr(msg);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_File* SC_Comp__ScriptLoc(JB_String* f) {
	JB_File* rz = nil;
	JB_String* _tmPf1 = JB_Incr(SC_FB__TryUseProject(f, true));
	JB_String* _tmPf0 = JB_Incr(SC_Str_ScriptLocation(_tmPf1, JB_LUB[423]));
	JB_Decr(_tmPf1);
	JB_SetRef(rz, JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SetRef(SC__Options_output_path, rz);
	JB_SafeDecr(rz);
	return rz;
}

bool SC_Comp__ScriptRecompile(JB_File* f, JB_File* script_build) {
	if ((!JB_File_Exists(script_build, false))) {
		return true;
	}
	if (JB_File_Modified(script_build) < JB_File_Modified(f)) {
		return true;
	}
	return false;
}

void SC_Comp__SetupEnv() {
	JB__Flow_FlowMode = kJB__Flow_Off;
	SC_Comp__ClearEnvs();
	JB_FreeIfDead(JB_App__PrefsInit(-1));
	if ((!JB_App__IsMainThread())) {
		(JB_App__SetThreadName(JB_LUB[1230]));
	}
	JB_ErrorColors__DisableIfNoTerminal();
	JB__Err_AutoPrint = 1;
	PicoGlobalConf()->DesiredThreadCount = 1;
	if (JB_Pico__Parent()) {
		JB__Err_AutoPrint = 0;
		JB__ErrorColors_Enabled = false;
	}
}

void SC_Comp__SortModulesAndClasses() {
	JB_Array_Sort(SC__Comp_ModuleList, SC_Comp__ModulesSorter, false);
	JB_Array_Sort(SC__Comp_ClassList, SC_Comp__ClassSorter, false);
}

JB_File* SC_Comp__Speedie() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* _tmPf1 = JB_Incr(JB_Str_ChildFile(_tmPf0, JB_LUB[1229]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Comp__SpeedieProj() {
	return ({
		JB_String* _X = JB_Incr(SC__Comp__SpeedieProj);
		if ((!JB_Str_Exists(_X))) {
			JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
			JB_SetRef(_X, JB_Str_SyntaxAccess(_tmPf0, JB_LUB[1229]));
			JB_Decr(_tmPf0);
			JB_SetRef(SC__Comp__SpeedieProj, _X);
		}
		JB_SafeDecr(_X);
		 _X;
	});
}

bool SC_Comp__Stage(JB_String* name) {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return nil;
	}
	if (SC__Options_PrintStages) {
		JB_String* space = JB_Incr(JB_Str_MulBool(JB_LUB[100], (SC__Comp_CurrStage <= 9)));
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendByte(_fsf0, ' ');
		JB_FS_AppendInt32(_fsf0, SC__Comp_CurrStage);
		JB_FS_AppendString(_fsf0, space);
		JB_Decr(space);
		JB_FS_AppendString(_fsf0, JB_LUB[116]);
		JB_FS_AppendString(_fsf0, name);
		JB_FS_AppendString(_fsf0, JB_LUB[154]);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
	SC__Comp_CurrStage++;
	return true;
}

SCClass* SC_Comp__FindClassName(JB_String* name) {
	return SC_Base_FindClass(SC__Comp_program, name, nil, 0);
}

SCClass* SC_Comp__SyntaxAccess(Message* name) {
	if (name) {
		return SC_Base_FindClassMsg(SC__Comp_program, name, 0);
	}
	return nil;
}

void SC_Comp__SyntaxAppend(Message* m) {
	JB_Tree_SyntaxAppend(SC__Comp_InternalFile->LiveAST, m);
}

void SC_Comp__TestDate() {
	int64 day = 5662310400;
	int64 hour = 235929600;
	int64 min = 3932160;
	int64 sec = 64 * 1024;
	if (sec != 65536.0) {
		debugger;
	}
	if (min != 3932160.0) {
		debugger;
	}
	if (hour != 235929600.0) {
		debugger;
	}
	if (day != 5662310400.0) {
		debugger;
	}
}

void SC_Comp__TestTask() {
	LessThan3* xxx = JB_Incr(SC_Task_LessThan3_Constructor(nil, JB_LUB[1467], 5, JB_LUB[1532]));
	bool z = SC_Task_LessThan3_interface_SyntaxCall((xxx), 8);
	JB_Decr(xxx);
}

void SC_Comp__Timer(JB_String* name) {
	Date Curr = JB_Date__Now();
	if (SC__Comp_LastTime) {
		SC_Comp__TimerSub(SC__Comp_LastTimeName, ((int)(Curr - SC__Comp_LastTime)));
	}
	if ((!JB_Str_Exists(name)) and (!SC__Options_Silent)) {
		JB_Obj_Print(SC__Comp_TimerOutput);
	}
	JB_SetRef(SC__Comp_LastTimeName, name);
	SC__Comp_LastTime = JB_Date__Now();
}

void SC_Comp__TimerSub(JB_String* s, int Durr) {
	Durr = (Durr - SC__Comp_stParseTime);
	SC__Comp_stParseTimeTotal = (SC__Comp_stParseTimeTotal + SC__Comp_stParseTime);
	SC__Comp_stParseTime = 0;
	SC_Comp__AppendCompilerTime(s, Durr);
}

bool SC_Comp__TryVariousStartModes() {
	if (JB__Proc_Parent) {
		return nil;
	}
	if ((!((!({
		JB_String* _tmPf1 = JB_Incr(JB_App__ArgValue(JB_LUB[1868]));
		bool _tmPf0 = JB_Str_Exists(_tmPf1);
		JB_Decr(_tmPf1);
		 _tmPf0;
	})) and (!({
		JB_String* _tmPf3 = JB_Incr(JB_App__ArgValue(JB_LUB[1817]));
		bool _tmPf2 = JB_Str_Exists(_tmPf3);
		JB_Decr(_tmPf3);
		 _tmPf2;
	}))))) {
		return nil;
	}
	Array* _tmPf4 = JB_Incr(JB_App__Args());
	JB_String* p = JB_Incr(((JB_String*)JB_Array_Value(_tmPf4, 0)));
	JB_Decr(_tmPf4);
	if ((!(JB_Str_Exists(p) and (!({
		JB_String* _tmPf6 = JB_Incr(JB_Str_ArgName(p));
		bool _tmPf5 = JB_Str_Exists(_tmPf6);
		JB_Decr(_tmPf6);
		 _tmPf5;
	}))))) {
		JB_Decr(p);
		return nil;
	}
	JB_File* f = JB_Incr(JB_Str_AsFile(p));
	JB_Decr(p);
	JB_File* it = JB_Incr(SC_Comp__UsingScript(f));
	if ((!JB_File_SyntaxCast(it))) {
		JB_Decr(it);
		JB_Decr(f);
		return nil;
	}
	JB_String* cwd = JB_Incr(JB_File__CWD());
	if (SC_Comp__ScriptRecompile(f, it)) {
		SC_Comp__CompileTime();
	}
	if (JB_File_Exists(it, false) and JB_Rec_OK(JB_StdErr)) {
		(JB_App__CWDSet(cwd));
		JB_StringC* _tmPf7 = JB_Incr(JB_Str_CastZero(f));
		(JB_App__SetEnv(JB_LUB[1115], _tmPf7));
		JB_Decr(_tmPf7);
		JB_String* _tmPf8 = JB_Incr(JB_File_Path(it));
		Array* _tmPf9 = JB_Incr(JB_App__Args());
		JB_App__TurnInto(_tmPf8, _tmPf9);
		JB_Decr(_tmPf8);
		JB_Decr(_tmPf9);
	}
	JB_Decr(f);
	JB_Decr(it);
	JB_Decr(cwd);
	return true;
}

JB_File* SC_Comp__UsingScript(JB_File* f) {
	JB_File* rz = nil;
	if ((!(SC__Options_Compile and (!JB_File_IsDir(f))))) {
		JB_Decr(rz);
		return nil;
	}
	JB_String* _tmPf0 = JB_Incr(JB_File_Read(f, 16, true));
	if ((!JB_Str_OperatorStarts(_tmPf0, JB_LUB[225]))) {
		JB_Decr(_tmPf0);
		JB_Decr(rz);
		return nil;
	}
	JB_Decr(_tmPf0);
	JB_SetRef(rz, SC_Comp__ScriptLoc(f));
	if (JB__Err_AutoPrint == kJB__ErrorFlags_PrintAndKeep) {
		JB__Err_AutoPrint = 0;
	}
	SC__Options_Scripting = true;
	SC__Options_Silent = true;
	SC__Options_PrintCompileString = false;
	SC__Options_OperationCount++;
	Array* _tmPf1 = JB_Incr(JB_App__Args());
	JB_Array_Remove(_tmPf1, 0);
	JB_Decr(_tmPf1);
	JB_SafeDecr(rz);
	return rz;
}

JB_String* SC_Comp__VariantSuffix() {
	if ((SC__Options_SelfReplacement) and SC__Options_Compile) {
		return JB_Str_OperatorPlus(JB_LUB[1273], SC__Options_Variant);
	}
	return SC__Options_Variant;
}

void SC_Comp__VariousSelfTests() {
	JB_String* t = JB_Incr(JB_Constants__TestJB());
	JB_Decr(t);
	if ((SC__Options_PerryOutput < 2) and ((!SC__Options_Scripting) and (!JB__Proc_Parent))) {
		if (({
			JB_String* _tmPf1 = JB_Incr((JB_Str_OperatorMul(SC__Cpp_FindGlobalsCpp, 12)));
			bool _tmPf0 = JB_Str_CompressTest(_tmPf1, false, 3);
			JB_Decr(_tmPf1);
			 _tmPf0;
		}) and SC__Options_PrintLibraries) {
			JB_PrintLine(JB_LUB[782]);
		}
	}
}

SCNode* SC_Comp__WrongConf(Message* node, SCNode* name_space, Message* ErrPlace) {
	if ((SC__Comp_ConfMsg)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[783]);
		return nil;
	}
	if (true) {
		JB_Msg_SyntaxExpect(node, JB_LUB[784]);
	}
	return nil;
}



void JB_ErrorColors__DisableIfNoTerminal() {
	JB__ErrorColors_Enabled = JB_IsTerminal(kJB__FileDes_StdOut);
}

int JB_ErrorColors__Init_() {
	{
		JB__ErrorColors_Enabled = false;
	}
	;
	return 0;
}

int JB_ErrorColors__InitCode_() {
	return 0;
}


void SC_ExecTable__AddAll(bool WantLib, FastString* fs) {
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (f == nil) {
				break;
			}
			if (SC_Func_CanLibLoad(f) and (WantLib == SC_Base_IsSTDLib(f))) {
				JB_Array_SyntaxAppend(SC__ExecTable_Funcs, f);
			}
			_if0++;
		};
	}
	;
	JB_Array_Sort(SC__ExecTable_Funcs, SC_ExecSorter, false);
	{
		Array* _LoopSrcf5 = SC__ExecTable_Funcs;
		int _if3 = 0;
		while (true) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(_LoopSrcf5, _if3));
			if (f == nil) {
				break;
			}
			int i = _if3;
			f->TableId = i;
			JB_FS_AppendString(fs, f->ExportName);
			JB_FS_AppendByte(fs, '\n');
			_if3++;
		};
	};
}

JB_File* SC_ExecTable__FuncFile() {
	JB_File* _tmPf0 = JB_Incr(SC_Comp__Library());
	JB_File* _tmPf1 = JB_Incr(JB_File_Child(_tmPf0, JB_LUB[1673]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int SC_ExecTable__Init_() {
	{
		JB_SetRef(SC__ExecTable_Funcs, JB_Array_Constructor0(nil));
		JB_SetRef(SC__ExecTable_Globs, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

int SC_ExecTable__InitCode_() {
	return 0;
}

void SC_ExecTable__Run() {
	JB_File* f = JB_Incr(SC_ExecTable__FuncFile());
	if (JB_File_SyntaxCast(f)) {
		FastString* fs = JB_Incr(JB_FS_Constructor(nil));
		SC_ExecTable__AddAll(true, fs);
		JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(fs));
		JB_Decr(fs);
		(JB_File_SmartDataSet(f, _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_Decr(f);
}


SCFunction* SC_FastStringOpts__ByteFunc() {
	return ({
		SCFunction* _X = JB_Incr(SC__FastStringOpts__ByteFunc);
		if ((!_X)) {
			JB_SetRef(_X, ((SCFunction*)((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, JB_LUB[956]))));
			JB_SetRef(SC__FastStringOpts__ByteFunc, _X);
		}
		JB_SafeDecr(_X);
		 _X;
	});
}

void SC_FastStringOpts__FS(Message* exp, Message* getresult) {
	Message* fs2 = ((Message*)JB_Ring_First(((Message*)JB_Ring_Last(getresult))));
	SCDecl* t2 = SC_TypeOfExpr(fs2, nil, nil);
	if ((!SC_Decl_SyntaxIs(t2, kSC__SCDeclInfo_CompilerCreated))) {
		return;
	}
	Message* Place = SC_Msg_ParentPoint(t2->Default);
	Message* arg = ((Message*)JB_Ring_Parent(Place));
	if ((!JB_Msg_Expect(arg, JB_SyxArg, nil))) {
		return;
	}
	Message* fs1 = ((Message*)JB_Ring_PrevSib(getresult));
	JB_String* name2 = fs2->Name;
	{
		Message* ch = arg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(arg));
		while (((bool)(ch)) and (ch != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(ch));
			if (SC_Msg_OperatorIsThing(ch, name2)) {
				JB_SetRef(ch->Name, fs1->Name);
				JB_SetRef(ch->Obj, fs1->Obj);
			}
			ch = _N_f2;
		};
		;
	}
	;
	SC_Msg_SafeRemove(Place, JB_SyxSheb);
	SC_Msg_SafeRemove(exp, JB_SyxSheb);
	SC__FastStringOpts_FSRemoved++;
}

int SC_FastStringOpts__Init_() {
	{
		SC__FastStringOpts_FSRemoved = 0;
		SC__FastStringOpts_StrRemoved = 0;
	}
	;
	return 0;
}

int SC_FastStringOpts__InitCode_() {
	return 0;
}

void SC_FastStringOpts__String(Message* exp, Message* str) {
	if ((!(((JB_Msg_EqualsSyx(str, JB_SyxStr, false)) or ((JB_Msg_EqualsSyx(str, JB_SyxSStr, false)) or (JB_Msg_EqualsSyx(str, JB_SyxBack, false)))) and (JB_Str_EqualsInt(str->Name, 1, false))))) {
		return;
	}
	JB_SetRef(str->Obj, JB_TypeByte->TypeNormal);
	JB_SetRef(((Message*)JB_Ring_Parent(str))->Obj, SC_FastStringOpts__ByteFunc());
	str->Func = JB_SyxChar;
	SC__FastStringOpts_StrRemoved++;
}


bool SC_FB__AppOptions_alive(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	JB_PrintLine(JB_LUB[1377]);
	return true;
}

bool SC_FB__AppOptions_arch(JB_String* Name, JB_String* Value, FastString* purpose) {
	JB_String* str = JB_Incr(JB_LUB[1725]);
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1216], str));
	SC_FB__Explain(purpose, _tmPf3);
	{
		Array* _LoopSrcf2 = JB_Incr(JB_Str_OperatorDivide(str, '/'));
		int _if0 = 0;
		while (true) {
			JB_String* v = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (v == nil) {
				JB_Decr(v);
				break;
			}
			if (JB_Str_Equals(v, Value, true)) {
				JB_SetRef(SC__Options_Arch, v);
			}
			JB_Decr(v);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
		JB_Decr(_tmPf3);
	}
	;
	JB_Decr(str);
	return false;
}

bool SC_FB__AppOptions_argstats(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_ArgStats = true;
	return false;
}

bool SC_FB__AppOptions_asm(JB_String* Name, JB_String* Value, FastString* purpose) {
	SC__Options_MakeASM = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_beep(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[664]))) {
		return nil;
	}
	SC__Options_Beep = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_breakonerr(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	JB__Err_AutoPrint = SC_Str_OptionInt(Value);
	return false;
}

bool SC_FB__AppOptions_check(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[761]))) {
		return nil;
	}
	SC__Options_Compile = false;
	SC__Options_Cpp = false;
	SC__Options_Products = 0;
	return false;
}

bool SC_FB__AppOptions_clean(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1174]))) {
		return nil;
	}
	if (SC_Ext__Clean()) {
		JB_PrintLine(JB_LUB[766]);
	}
	return true;
}

bool SC_FB__AppOptions_codesign(JB_String* Name, JB_String* Value, FastString* purpose) {
	JB_Incr(Value);
	if ((!SC_FB__Explain(purpose, JB_LUB[899]))) {
		JB_Decr(Value);
		return nil;
	}
	if (JB_Str_Equals(Value, JB_LUB[0], false)) {
		JB_String* _tmPf0 = JB_Incr(JB_App__GetPref(kJB_codesign_native));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
		JB_Decr(Value);
		return true;
	}
	if ((JB_Str_Equals(Value, JB_LUB[1825], false)) or ((JB_Str_Equals(Value, JB_LUB[1811], false)) or (JB_Str_Equals(Value, JB_LUB[307], false)))) {
		JB_SetRef(Value, JB_LUB[0]);
	}
	(JB_App__PrefSet(kJB_codesign_native, Value));
	JB_App__SavePrefs();
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[769], Value));
	JB_Decr(Value);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
	return true;
}

bool SC_FB__AppOptions_cpp(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[779]))) {
		return nil;
	}
	SC__Options_Cpp = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_crash(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[796]))) {
		return nil;
	}
	JB_App__Crash(JB_LUB[0]);
	return false;
}

bool SC_FB__AppOptions_directtest(JB_String* Name, JB_String* Value, FastString* purpose) {
	SC_FB__Explain(purpose, JB_LUB[630]);
	SC__Options_IsDirectTest = SC_Str_OptionBool(Value);
	(SC_SC_Targets__SyntaxAccessSet(JB_LUB[1606], SC__Options_IsDirectTest));
	return false;
}

bool SC_FB__AppOptions_dosign(JB_String* Name, JB_String* Value, FastString* purpose) {
	SC_FB__Explain(purpose, JB_LUB[768]);
	return true;
}

bool SC_FB__AppOptions_env(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1137]))) {
		return nil;
	}
	{
		Dictionary* _LoopSrcf2 = JB_Incr(JB_App__Env());
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf2));
		JB_Decr(_LoopSrcf2);
		while (true) {
			JB_String* s = JB_Incr(((JB_String*)JB_DictionaryReader_NextValue(_navf0)));
			if (s == nil) {
				JB_Decr(s);
				break;
			}
			JB_String* k = JB_Incr(JB_Nav_Name(_navf0));
			JB_String* _tmPf4 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[560], s));
			JB_Decr(s);
			JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(k, _tmPf4));
			JB_Decr(k);
			JB_Decr(_tmPf4);
			JB_PrintLine(_tmPf3);
			JB_Decr(_tmPf3);
		};
		JB_Decr(_navf0);
	}
	;
	return true;
}

bool SC_FB__AppOptions_errortest(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1278]))) {
		return nil;
	}
	JB_Str_PrintError(JB_LUB[842]);
	return true;
}

bool SC_FB__AppOptions_final(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_Final = true;
	return false;
}

bool SC_FB__AppOptions_flow(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[626]))) {
		return nil;
	}
	bool b = SC_Str_OptionBool(Value);
	SC__Options_GenFlowControlCode = b;
	(SC_SC_Targets__SyntaxAccessSet(JB_LUB[1659], b));
	return false;
}

bool SC_FB__AppOptions_force(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[883]))) {
		return nil;
	}
	SC__Options_ForceRecompile = true;
	return false;
}

bool SC_FB__AppOptions_funccount(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1225]))) {
		return nil;
	}
	SC__Options_UseFuncCallCount = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_gcc(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1176]))) {
		return nil;
	}
	JB_SetRef(SC__Ext_CppCompilerPath, Value);
	return false;
}

bool SC_FB__AppOptions_help(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1306]))) {
		return nil;
	}
	SC_FB__Help();
	return true;
}

bool SC_FB__AppOptions_ignorecantsave(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_IgnoreCantSaveErrors = true;
	return false;
}

bool SC_FB__AppOptions_keepallerrors(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1223]))) {
		return nil;
	}
	SC__Options_KeepAllErrors = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_log(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[997]))) {
		return nil;
	}
	if ((!JB_Str_Equals(Value, JB_LUB[2005], false))) {
		JB__Flow_FlowMode = JB_Str_Int(Value);
	}
	 else {
		JB__Flow_FlowMode = kJB__Flow_Validate;
	}
	return false;
}

bool SC_FB__AppOptions_m32(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[499]))) {
		return nil;
	}
	SC__Options_Compile32Bit = ((MaybeBool)true);
	return false;
}

bool SC_FB__AppOptions_m64(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[544]))) {
		return nil;
	}
	SC__Options_Compile32Bit = ((MaybeBool)false);
	return false;
}

bool SC_FB__AppOptions_maxvars(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1177]))) {
		return nil;
	}
	SC__Options_CheckMaxVars = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_nil(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[837]))) {
		return nil;
	}
	if (JB_Str_Yes(Value)) {
		SC__Options_NilStrength = kJB__ErrorSeverity_Error;
	}
	 else {
		SC__Options_NilStrength = 0;
	}
	return false;
}

bool SC_FB__AppOptions_nocolor(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[829]))) {
		return nil;
	}
	(SC_Options__ColorSet(false));
	return false;
}

bool SC_FB__AppOptions_nocompile(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1380]))) {
		return nil;
	}
	SC__Options_Compile = false;
	SC__Options_Products = (SC__Options_Products & (~(kSC__Options_pack + kSC__Options_native)));
	return false;
}

bool SC_FB__AppOptions_noisy(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1140]))) {
		return nil;
	}
	JB_PrintLine(JB_LUB[1087]);
	SC__Options_PrintCompileString = true;
	JB__File_DebugExecute = true;
	SC__Options_PrintLibraries = true;
	return false;
}

bool SC_FB__AppOptions_optimise(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1114]))) {
		return nil;
	}
	SC__Options_Optimise = JB_Str_TextIntegerValid(Value, nil);
	return false;
}

bool SC_FB__AppOptions_output_path(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1227]))) {
		return nil;
	}
	JB_SetRef(SC__Options_output_path, JB_File_PathFix_(Value));
	JB_String* _tmPf1 = JB_Incr(JB_Str_Parent(SC__Options_output_path));
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(_tmPf1));
	JB_Decr(_tmPf1);
	JB_File_MustExist(_tmPf0, JB_LUB[0]);
	JB_Decr(_tmPf0);
	SC__Options_ForceRecompile = true;
	return false;
}

bool SC_FB__AppOptions_path(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	JB_String* _tmPf0 = JB_Incr(JB_App__Path());
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
	return false;
}

bool SC_FB__AppOptions_perry(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_PerryOutput = 1;
	bool RealPerry = (JB_Str_Equals(Value, JB_LUB[1517], true));
	SC__Options_PerryOutput = (SC__Options_PerryOutput + ((MaybeBool)RealPerry));
	JB_File* _tmPf2 = JB_Incr(JB_File__PrefsFolder());
	JB_File* _tmPf1 = JB_Incr(JB_File_SyntaxAccess(_tmPf2, JB_LUB[1748]));
	JB_Decr(_tmPf2);
	JB_String* _tmPf0 = JB_Incr(JB_File_ReadAll(_tmPf1, 134217728, true));
	JB_Decr(_tmPf1);
	JB_SetRef(SC__Comp_InsecureWords, JB_Str_Dict(_tmPf0, '\n'));
	JB_Decr(_tmPf0);
	return false;
}

bool SC_FB__AppOptions_print(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	JB_Str_Print(Value);
	return true;
}

bool SC_FB__AppOptions_products(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[622]))) {
		return nil;
	}
	int P = 0;
	{
		Array* _LoopSrcf2 = JB_Incr((JB_Str_OperatorDivide(Value, '/')));
		int _if0 = 0;
		while (true) {
			JB_String* item = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (item == nil) {
				JB_Decr(item);
				break;
			}
			if (JB_Str_Equals(item, JB_LUB[1807], true)) {
				P = (P | kSC__Options_native);
			}
			if (JB_Str_Equals(item, JB_LUB[1569], true)) {
				P = (P | SC__Options_Cpp);
			}
			if (JB_Str_Equals(item, JB_LUB[1860], true)) {
				P = (P | kSC__Options_pack);
			}
			JB_Decr(item);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	SC__Options_Products = P;
	return false;
}

bool SC_FB__AppOptions_quiet(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1139]))) {
		return nil;
	}
	SC__Options_PrintCompileString = false;
	return false;
}

bool SC_FB__AppOptions_self(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[778]))) {
		return nil;
	}
	if (JB_App__No(JB_LUB[1817])) {
		SC__Options_PerryOutput = 1;
	}
	JB_String* _tmPf0 = JB_Incr(SC_Comp__SpeedieProj());
	JB_FreeIfDead(SC_FB__TryUseProject(_tmPf0, false));
	JB_Decr(_tmPf0);
	return true;
}

bool SC_FB__AppOptions_silent(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1141]))) {
		return nil;
	}
	SC__Options_PrintCompileString = false;
	SC__Options_Silent = true;
	return false;
}

bool SC_FB__AppOptions_single(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_SingleCppOutput = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_stages(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1142]))) {
		return nil;
	}
	SC__Options_PrintStages = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_target(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1215]))) {
		return nil;
	}
	if (JB_Str_Equals(Value, JB_LUB[1590], false)) {
		if (true) {
			JB_Str_SyntaxExpect(JB_LUB[1359]);
		}
	}
	(SC_SC_Targets__SyntaxAccessSet(Value, true));
	return false;
}

bool SC_FB__AppOptions_targetdebug(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_TargetDebug = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppOptions_usescriptloc(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	SC__Options_UseScriptLoc = ((MaybeBool)true);
	return false;
}

bool SC_FB__AppOptions_variant(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[0]))) {
		return nil;
	}
	JB_SetRef(SC__Options_Variant, JB_int_RenderFS(((int)JB_Str_TextIntegerValid(Value, nil)), nil));
	SC__Options_PerryOutput = 1;
	(SC_Options__ColorSet(false));
	if (SC__Options_Optimise < 0) {
		SC__Options_Optimise = 1;
	}
	return false;
}

bool SC_FB__AppOptions_warn(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1224]))) {
		return nil;
	}
	SC__Options_Warnings = SC_Str_OptionBool(Value);
	return false;
}

bool SC_FB__AppTransCompile(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1131]))) {
		return nil;
	}
	SC__Options_ExternalCompile = true;
	(SC_Options__ColorSet(false));
	return false;
}

bool SC_FB__AppVersionNumber(JB_String* Name, JB_String* Value, FastString* purpose) {
	if ((!SC_FB__Explain(purpose, JB_LUB[1138]))) {
		return nil;
	}
	return SC_FB__CompilerInfo();
}

void SC_FB__CheckSelfModifying() {
	int t2 = SC_FB__CheckSelfModifying2();
	if (t2 == 1) {
		SC__Options_SelfReplacement = true;
		SC__Options_ExternalCompile = true;
		SC__Options_ForceRecompile = true;
		JB_String* _tmPf0 = JB_Incr(JB_App__GetPref(JB_LUB[1935]));
		SC__Options_GenFlowControlCode = JB_Str_Yes(_tmPf0);
		JB_Decr(_tmPf0);
		(SC_SC_Targets__SyntaxAccessSet(JB_LUB[1659], SC__Options_GenFlowControlCode));
		(SC_SC_Targets__SyntaxAccessSet(JB_LUB[1934], true));
	}
	 else if (t2 == 2) {
		SC__Options_ProjectIsMiniLib = true;
	}
}

int SC_FB__CheckSelfModifying2() {
	int rz = 0;
	if (JB_Str_Exists(SC__Options_SingleFileInput)) {
		return 0;
	}
	JB_File* bpp = JB_Incr(SC__Comp_BaseProjectPath);
	if ((!JB_File_SyntaxCast(bpp))) {
		JB_Decr(bpp);
		return 0;
	}
	JB_String* p = JB_Incr(JB_Str_TrimSlashes(bpp, true));
	JB_Decr(bpp);
	JB_File* _tmPf0 = JB_Incr(SC_Comp__Speedie());
	JB_String* spd = JB_Incr(JB_Str_TrimSlashes(_tmPf0, true));
	JB_Decr(_tmPf0);
	JB_File* _tmPf1 = JB_Incr(SC_Comp__Jeebox());
	JB_String* jb = JB_Incr(JB_Str_TrimSlashes(_tmPf1, true));
	JB_Decr(_tmPf1);
	if (JB_Str_Equals(p, spd, true)) {
		if (SC__Options_SelfReplacement) {
			rz = 0;
		}
		 else {
			rz = 1;
		}
	}
	 else if (JB_Str_Equals(p, jb, true)) {
		rz = 2;
	}
	JB_Decr(p);
	JB_Decr(spd);
	JB_Decr(jb);
	return rz;
}

bool SC_FB__CompilerInfo() {
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[1955]);
	JB_FS_AppendInt32(_fsf0, (2024041119));
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
	return true;
}

bool SC_FB__Explain(FastString* Purpose, JB_String* name) {
	if ((!Purpose)) {
		return true;
	}
	JB_FS_AppendString(Purpose, name);
	return false;
}

void SC_FB__Help() {
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	FastString* fs_tester = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(fs, JB_LUB[1354]);
	JB_String* _tmPf5 = JB_Incr(JB_App__FileName());
	JB_FS_AppendString(fs, _tmPf5);
	JB_Decr(_tmPf5);
	JB_FS_AppendString(fs, JB_LUB[152]);
	//;
	JB_FS_AppendString(fs, JB_LUB[925]);
	JB_String* _tmPf7 = JB_Incr(SC_Comp__SpeedieProj());
	JB_String* _tmPf6 = JB_Incr(JB_Str_Parent(_tmPf7));
	JB_Decr(_tmPf7);
	JB_FS_AppendString(fs, _tmPf6);
	JB_Decr(_tmPf6);
	//;
	//;
	JB_FS_AppendString(fs, JB_LUB[118]);
	JB_String* _tmPf8 = JB_Incr(JB_Platform());
	JB_FS_AppendString(fs, _tmPf8);
	JB_Decr(_tmPf8);
	JB_FS_AppendByte(fs, '+');
	JB_String* _tmPf9 = JB_Incr(JB_Platform__CPU_Name());
	JB_FS_AppendString(fs, _tmPf9);
	JB_Decr(_tmPf9);
	//;
	JB_FS_AppendString(fs, JB_LUB[119]);
	JB_String* _tmPf10 = JB_Incr(JB_App__GetPref(JB_LUB[1935]));
	JB_FS_AppendString(fs, _tmPf10);
	JB_Decr(_tmPf10);
	//;
	JB_FS_AppendString(fs, JB_LUB[117]);
	JB_FS_AppendInt32(fs, ((int)JB_Syxmax));
	//;
	{
		DictionaryReader* _navf3 = JB_Incr(JB_Dict_Navigate(SC__FB_AppOptions));
		while (true) {
			DTWrap* v = JB_Incr(((DTWrap*)JB_DictionaryReader_NextValue(_navf3)));
			if (v == nil) {
				JB_Decr(v);
				break;
			}
			JB_String* k = JB_Incr(JB_Nav_Name(_navf3));
			(((FP_ShellOption)JB_Wrap_First(v)))(JB_LUB[0], JB_LUB[0], fs_tester);
			FP_ShellOption val = ((FP_ShellOption)JB_Wrap_Value(v));
			JB_Decr(v);
			if (((bool)val) and ((bool)fs_tester->Length)) {
				(JB_FS_LengthSet(fs_tester, 0));
				JB_FS_AppendString(fs, JB_LUB[68]);
				JB_FS_AppendString(fs, k);
				JB_FS_AppendMultiByte(fs, ' ', 17 - JB_Str_Length(k));
				(val)(JB_LUB[0], JB_LUB[0], fs);
			}
			JB_Decr(k);
		};
		JB_Decr(_navf3);
	}
	;
	JB_Decr(fs_tester);
	JB_String* _tmPf11 = JB_Incr(JB_FS_GetResult(fs));
	JB_Decr(fs);
	JB_PrintLine(_tmPf11);
	JB_Decr(_tmPf11);
}

int SC_FB__Init_() {
	{
		JB_SetRef(SC__FB_AppOptions, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf0 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_nocompile))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1817], _tmPf0));
		JB_Decr(_tmPf0);
		DTWrap* _tmPf1 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_breakonerr))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1526], _tmPf1));
		JB_Decr(_tmPf1);
		DTWrap* _tmPf2 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_path))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1866], _tmPf2));
		JB_Decr(_tmPf2);
		DTWrap* _tmPf3 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_beep))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1511], _tmPf3));
		JB_Decr(_tmPf3);
		DTWrap* _tmPf4 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_keepallerrors))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1747], _tmPf4));
		JB_Decr(_tmPf4);
		DTWrap* _tmPf5 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_env))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1630], _tmPf5));
		JB_Decr(_tmPf5);
		DTWrap* _tmPf6 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_FB__AppTransCompile)))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[2054], _tmPf6));
		JB_Decr(_tmPf6);
		DTWrap* _tmPf7 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_arch))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1485], _tmPf7));
		JB_Decr(_tmPf7);
		DTWrap* _tmPf8 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_gcc))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1682], _tmPf8));
		JB_Decr(_tmPf8);
		DTWrap* _tmPf9 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_perry))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1868], _tmPf9));
		JB_Decr(_tmPf9);
		DTWrap* _tmPf10 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_usescriptloc))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[2026], _tmPf10));
		JB_Decr(_tmPf10);
		DTWrap* _tmPf11 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_check))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1541], _tmPf11));
		JB_Decr(_tmPf11);
		DTWrap* _tmPf12 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_errortest))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1634], _tmPf12));
		JB_Decr(_tmPf12);
		DTWrap* _tmPf13 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_argstats))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1489], _tmPf13));
		JB_Decr(_tmPf13);
		DTWrap* _tmPf14 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_flow))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1659], _tmPf14));
		JB_Decr(_tmPf14);
		DTWrap* _tmPf15 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_log))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1765], _tmPf15));
		JB_Decr(_tmPf15);
		DTWrap* _tmPf16 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_noisy))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1822], _tmPf16));
		JB_Decr(_tmPf16);
		DTWrap* _tmPf17 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_alive))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1480], _tmPf17));
		JB_Decr(_tmPf17);
		DTWrap* _tmPf18 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_products))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1882], _tmPf18));
		JB_Decr(_tmPf18);
		DTWrap* _tmPf19 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_ignorecantsave))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1701], _tmPf19));
		JB_Decr(_tmPf19);
		DTWrap* _tmPf20 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_quiet))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1886], _tmPf20));
		JB_Decr(_tmPf20);
		DTWrap* _tmPf21 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_silent))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1947], _tmPf21));
		JB_Decr(_tmPf21);
		DTWrap* _tmPf22 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_stages))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1958], _tmPf22));
		JB_Decr(_tmPf22);
		DTWrap* _tmPf23 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_print))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1877], _tmPf23));
		JB_Decr(_tmPf23);
		DTWrap* _tmPf24 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_directtest))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1608], _tmPf24));
		JB_Decr(_tmPf24);
		DTWrap* _tmPf25 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_single))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1948], _tmPf25));
		JB_Decr(_tmPf25);
		DTWrap* _tmPf26 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_self))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1934], _tmPf26));
		JB_Decr(_tmPf26);
		DTWrap* _tmPf27 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_nil))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1811], _tmPf27));
		JB_Decr(_tmPf27);
		DTWrap* _tmPf28 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_crash))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1579], _tmPf28));
		JB_Decr(_tmPf28);
		DTWrap* _tmPf29 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_asm))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1495], _tmPf29));
		JB_Decr(_tmPf29);
		DTWrap* _tmPf30 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_targetdebug))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1986], _tmPf30));
		JB_Decr(_tmPf30);
		DTWrap* _tmPf31 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_target))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1985], _tmPf31));
		JB_Decr(_tmPf31);
		DTWrap* _tmPf32 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_m64))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1773], _tmPf32));
		JB_Decr(_tmPf32);
		DTWrap* _tmPf33 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_funccount))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1672], _tmPf33));
		JB_Decr(_tmPf33);
		DTWrap* _tmPf34 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_m32))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1772], _tmPf34));
		JB_Decr(_tmPf34);
		DTWrap* _tmPf35 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_warn))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[2044], _tmPf35));
		JB_Decr(_tmPf35);
		DTWrap* _tmPf36 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_maxvars))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1781], _tmPf36));
		JB_Decr(_tmPf36);
		DTWrap* _tmPf37 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_nocolor))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1816], _tmPf37));
		JB_Decr(_tmPf37);
		DTWrap* _tmPf38 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_optimise))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1854], _tmPf38));
		JB_Decr(_tmPf38);
		DTWrap* _tmPf39 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_cpp))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1569], _tmPf39));
		JB_Decr(_tmPf39);
		DTWrap* _tmPf40 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_output_path))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1859], _tmPf40));
		JB_Decr(_tmPf40);
		DTWrap* _tmPf41 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_force))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1663], _tmPf41));
		JB_Decr(_tmPf41);
		DTWrap* _tmPf42 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_variant))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[2029], _tmPf42));
		JB_Decr(_tmPf42);
		DTWrap* _tmPf43 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_final))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1654], _tmPf43));
		JB_Decr(_tmPf43);
		DTWrap* _tmPf44 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_codesign))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1554], _tmPf44));
		JB_Decr(_tmPf44);
		DTWrap* _tmPf45 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_dosign))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1618], _tmPf45));
		JB_Decr(_tmPf45);
		DTWrap* _tmPf46 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_clean))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1548], _tmPf46));
		JB_Decr(_tmPf46);
		DTWrap* _tmPf47 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_FB__AppVersionNumber)))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[2034], _tmPf47));
		JB_Decr(_tmPf47);
		DTWrap* _tmPf48 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_FB__AppVersionNumber)))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[2028], _tmPf48));
		JB_Decr(_tmPf48);
		DTWrap* _tmPf49 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FB__AppOptions_help))));
		(JB_Dict_ValueSet(SC__FB_AppOptions, JB_LUB[1691], _tmPf49));
		JB_Decr(_tmPf49);
	}
	;
	return 0;
}

int SC_FB__InitCode_() {
	return 0;
}

bool SC_FB__ParseArgs() {
	Array* _tmPf0 = JB_Incr(JB_App__Args());
	bool _tmPf1 = SC_FB__ParseArgsSub(_tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool SC_FB__ParseArgsSub(Array* args) {
	SC_FB__StopStripping();
	if ((!JB_Array_SyntaxCast(args))) {
		SC_FB__CompilerInfo();
		SC_FB__Help();
		return false;
	}
	{
		int _if0 = 0;
		while (true) {
			JB_Object* S = JB_Incr(JB_Array_Value(args, _if0));
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			SC_FB__ParseOption(S);
			JB_Decr(S);
			_if0++;
		};
	}
	;
	if (SC__Options_OperationCount <= 0) {
		JB_Rec__NewErrorWithNode(nil, JB_LUB[73], nil);
	}
	 else if (SC__Options_OperationCount >= 2) {
		JB_Rec__NewErrorWithNode(nil, JB_LUB[75], nil);
	}
	return JB_Rec_OK(JB_StdErr) and JB_File_Exists(SC__Comp_BaseProjectPath, false);
}

void SC_FB__ParseOption(JB_Object* Obj) {
	JB_String* Name = JB_Incr(JB_AppArgument_Name(Obj));
	JB_String* Value = JB_Incr(JB_AppArgument_Value(Obj));
	if (JB_Str_Exists(Name)) {
		DTWrap* opt = JB_Incr(((DTWrap*)JB_Dict_ValueStr(SC__FB_AppOptions, Name)));
		if (opt) {
			SC__Options_OperationCount = (SC__Options_OperationCount + ((MaybeBool)(((FP_ShellOption)JB_Wrap_First(opt)))(Name, Value, nil)));
		}
		 else {
			FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
			JB_FS_AppendString(_fsf0, JB_LUB[1347]);
			JB_FS_AppendString(_fsf0, Name);
			JB_FS_AppendString(_fsf0, JB_LUB[251]);
			JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
			JB_Decr(_fsf0);
			JB_App__Quit(_tmPf1, 0);
			JB_Decr(_tmPf1);
		}
		JB_Decr(opt);
	}
	 else if (JB_Ind_SyntaxCast(JB_Str_IsJbin(Value))) {
		0;
	}
	 else if (SC__Options_OperationCount == 1) {
		if (true) {
			JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1316], Value));
			JB_Str_SyntaxExpect(_tmPf2);
			JB_Decr(_tmPf2);
		}
	}
	 else {
		JB_FreeIfDead(SC_FB__TryUseProject(Value, false));
		SC__Options_OperationCount++;
	}
	JB_Decr(Name);
	JB_Decr(Value);
}

void SC_FB__StopStripping() {
	if (JB_Str_Exists(JB_LUB[0])) {
		jdb(JB_LUB[0]);
		jdb2(((Message*)nil));
		fdb(((Array*)nil));
	}
}

JB_String* SC_FB__TryUseProject(JB_String* path, bool IsScript) {
	JB_Incr(path);
	if ((!(JB_Str_ContainsByte(path, '/') or (JB_Str_ContainsByte(path, '.') or JB_Str_ContainsByte(path, '~'))))) {
		JB_SetRef(path, SC_Comp__FindProjNoSuffix(path));
	}
	JB_String* path2 = JB_Incr(SC_Str_ResolveSpd(path));
	if (JB_Str_Exists(path2)) {
		JB_SetRef(path, path2);
	}
	JB_Decr(path2);
	JB_File* F = JB_Incr(JB_Str_AsFile(path));
	if (({
		JB_File* _tmPf1 = JB_Incr(SC_Comp__Library());
		bool _tmPf0 = JB_File_OperatorInside(F, _tmPf1);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}) or ({
		JB_File* _tmPf3 = JB_Incr(SC_Comp__Jeebox());
		bool _tmPf2 = JB_File_OperatorInside(F, _tmPf3);
		JB_Decr(_tmPf3);
		 _tmPf2;
	})) {
		JB_File_Fail(F, JB_LUB[828]);
		JB_Decr(path);
		JB_Decr(F);
		return JB_LUB[0];
	}
	JB_SetRef(SC__Comp_OriginalInputPath, path);
	JB_SetRef(SC__Comp_BaseProjectPath, F);
	JB_SetRef(SC__Comp_ProjectName, JB_Str_TrimExtAndPath(F, true));
	JB_SetRef(SC__Comp_ReportedName, SC__Comp_ProjectName);
	bool exists = JB_File_Exists(F, false);
	bool IsSpd = ({
		JB_String* _tmPf5 = JB_Incr(JB_Str_Name(F));
		bool _tmPf4 = SC_Str_IsSpeedieSrc(_tmPf5);
		JB_Decr(_tmPf5);
		 _tmPf4;
	}) or IsScript;
	if ((exists and (!JB_File_IsDir(F))) or ((!exists) and IsSpd)) {
		JB_SetRef(SC__Options_SingleFileInput, JB_File_Path(F));
		if ((!JB_File_MustExist(F, JB_LUB[0]))) {
			JB_Decr(path);
			JB_Decr(F);
			return JB_LUB[0];
		}
		JB_SetRef(F, JB_File_Parent(F));
		JB_SetRef(SC__Comp_BaseProjectPath, F);
	}
	SC_FB__CheckSelfModifying();
	if ((!JB_Str_Exists(SC__Options_SingleFileInput))) {
		JB_File_MustExist(F, JB_LUB[0]);
	}
	JB_Decr(F);
	if (exists and (IsSpd and JB_Rec_OK(JB_StdErr))) {
		JB_SafeDecr(path);
		return path;
	}
	JB_Decr(path);
	return JB_LUB[0];
}


SCNode* SC_InbuiltShellArgs__Collect(Message* node, SCNode* name_space, Message* ErrPlace) {
	if (name_space != SC__Comp_program) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1298]);
		return nil;
	}
	Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxList));
	Array* ShellArgs = JB_Incr(SC_Msg_ListAll(_tmPf0));
	JB_Decr(_tmPf0);
	SC_FB__ParseArgsSub(ShellArgs);
	JB_Decr(ShellArgs);
	return SC__Comp_program;
}


bool SC_AC__Active() {
	return SC__AC_total < SC__AC_max_total;
}

void SC_AC__ActualDefine(Message* rz, Message* s, JB_String* purpose) {
	JB_String* f = JB_Incr(JB_Msg_FilePath(s));
	if ((!JB_Str_Exists(f))) {
		JB_Str_SyntaxExpect(JB_LUB[1827]);
		JB_Decr(f);
		return;
	}
	JB_Msg_AppendSyx(rz, JB_SyxSStr, f);
	JB_Decr(f);
	JB_Msg_AppendNum(rz, s->Position);
}

Message* SC_AC__AllTmps() {
	Message* rz = nil;
	if (SC__AC_all_tmp_src->Cleaned) {
		return JB_Macro_Source(SC__AC_all_tmp_src);
	}
	SC__AC_all_tmp_src->Cleaned = true;
	rz = JB_Macro_Source(SC__AC_all_tmp_src);
	int state = 0;
	{
		Message* ch = ((Message*)JB_Ring_First(rz));
		while (ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(ch));
			if (JB_Msg_EqualsSyx(ch, JB_SyxName, false)) {
				state = SC_Msg_Autocomplete_State(ch);
				JB_Tree_Remove(ch);
			}
			 else {
				ch->Tag = state;
			}
			ch = _Nf1;
		};
		;
	}
	;
	return rz;
}

Message* SC_AC__AutoComplete(Message* ff, JB_String* name, JB_String* Purpose) {
	Message* rz = nil;
	if ((!ff)) {
		JB_Decr(rz);
		return nil;
	}
	Syntax f = ff->Func;
	if ((!((f != JB_SyxBra) and ((f != JB_SyxPrm) and ((f != JB_SyxList) and ((f != JB_SyxArg) and ((f != JB_SyxArr) and ((f != JB_SyxAcc) and ((f != JB_SyxDecl) and (f != JB_SyxRel)))))))))) {
		JB_Decr(rz);
		return nil;
	}
	SC__AC_total = 0;
	int Types = -1;
	SCNode* scope = JB_Incr(SC_AC__GetScope(ff, (&Types)));
	if ((!scope)) {
		JB_Decr(scope);
		JB_Decr(rz);
		return nil;
	}
	Message* NeedTypeLimit = JB_Incr(SC_Msg_GetTypeLimiter(ff));
	Array* arr = JB_Incr(JB_Array_Constructor0(nil));
	while (((bool)scope) and SC_AC__Active()) {
		SC_AC__AutoSub(scope, name, arr, Types, NeedTypeLimit);
		if ((!JB_Str_Exists(name)) and JB_Object_FastIsa(scope, &SCArgData)) {
			break;
		}
		JB_SetRef(scope, SC_Base_UpClass(scope, ff));
	};
	JB_Decr(scope);
	JB_Decr(NeedTypeLimit);
	JB_Array_Sort(arr, ((FP_SorterComparer)SC_AC__AutoCompleteSorter), false);
	JB_SetRef(rz, JB_Syx_Msg(JB_SyxTmp, Purpose));
	Message* arg = JB_Incr(JB_Msg_Msg(rz, JB_SyxArg, name));
	autoitem* Prev = nil;
	{
		int _if0 = 0;
		while (true) {
			autoitem* i = JB_Incr(((autoitem*)JB_Array_Value(arr, _if0)));
			if (i == nil) {
				JB_Decr(i);
				break;
			}
			if (SC_autoitem_OKBy(i, Prev)) {
				Message* tmp = JB_Incr(JB_Msg_Msg(arg, JB_SyxTmp, i->Insert));
				JB_Msg_AppendSyx(tmp, JB_SyxStr, i->Display);
				JB_Decr(tmp);
				JB_SetRef(Prev, i);
			}
			JB_Decr(i);
			_if0++;
		};
	}
	;
	JB_Decr(arr);
	JB_Decr(arg);
	JB_Decr(Prev);
	JB_SafeDecr(rz);
	return rz;
}

bool SC_AC__AutoCompleteSorter(autoitem* a, autoitem* b) {
	int type = a->type - b->type;
	if (type) {
		return type < 0;
	}
	return JB_Str_CompareStr(a->Sort, b->Sort, false) <= -1;
}

Message* SC_AC__AutoJump(Message* cmd) {
	Message* c = ((Message*)JB_Ring_Last(cmd));
	if (JB_Msg_EqualsSyx(c, JB_SyxName, false)) {
		if (JB_Msg_OperatorStarts(cmd, JB_LUB[1504])) {
			return SC_AC__AutoComplete(((Message*)JB_Ring_First(c)), c->Name, cmd->Name);
		}
		 else {
			return SC_AC__DefineOrCall(c, cmd->Name, nil);
		}
	}
	if (JB_Msg_OperatorStarts(cmd, JB_LUB[1504])) {
		return SC_AC__RootTmpComplete(cmd);
	}
	if (JB_Msg_SyntaxEquals(c, JB_LUB[1706], true)) {
		return SC_AC__JumpImport(cmd);
	}
	return nil;
}

void SC_AC__AutoSub(SCNode* scope, JB_String* name, Array* found, int Types, Message* NeedTypeLimit) {
	SCDecl* TypeLimiter = nil;
	if (NeedTypeLimit) {
		JB_SetRef(TypeLimiter, SC_TypeOfExpr(NeedTypeLimit, scope, nil));
	}
	{
		Dictionary* _LoopSrcf2 = JB_Incr(scope->Access);
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf2));
		JB_Decr(_LoopSrcf2);
		while (true) {
			SCObject* value = JB_Incr(((SCObject*)JB_DictionaryReader_NextValue(_navf0)));
			if (value == nil) {
				JB_Decr(value);
				break;
			}
			JB_String* key = JB_Incr(JB_Nav_Name(_navf0));
			JB_String* orig = JB_Incr(SC_SCObject_CanAuto(value, name));
			if (JB_Str_Exists(orig) and ((!JB_Str_Exists(name)) or JB_Str_OperatorStarts(orig, name))) {
				SC_AC__AutoSub2(value, key, orig, found, (JB_Str_Equals(orig, name, true)), Types, TypeLimiter);
			}
			JB_Decr(value);
			JB_Decr(key);
			JB_Decr(orig);
		};
		JB_Decr(_navf0);
	}
	;
	JB_Decr(TypeLimiter);
}

void SC_AC__AutoSub2(SCObject* value, JB_String* key, JB_String* src_name, Array* found, bool exact, int Types, SCDecl* TypeLimiter) {
	JB_Incr(value);
	while (((bool)value) and SC_AC__Active()) {
		if ((!(((JB_Str_Equals(key, JB_LUB[1934], true))) and (JB_Object_Isa(value, &SCModuleData))))) {
			if (((bool)(Types & SC_SCObject_AutoCompleteType(value)))) {
				bool OK = true;
				if (TypeLimiter) {
					SCDecl* mine = JB_Incr(SC_Object_AsDecl(value));
					if (mine) {
						OK = SC_Decl_MiniMatch(mine, TypeLimiter, 0);
					}
					JB_Decr(mine);
				}
				if (OK) {
					JB_String* sub_name = JB_Incr(SC_SCObject_Display(value, exact));
					if (JB_Str_Exists(sub_name)) {
						SC__AC_total++;
						JB_String* _tmPf0 = JB_Incr(SC_SCObject_BaseIcon(value));
						JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[100], sub_name));
						JB_SetRef(sub_name, JB_Str_OperatorPlus(_tmPf0, _tmPf1));
						JB_Decr(_tmPf0);
						JB_Decr(_tmPf1);
						autoitem* _tmPf2 = JB_Incr(SC_autoitem_ConstructorAuto(nil, key, src_name, value, sub_name, exact, SC_SCObject_Auto_Type(value)));
						JB_Array_SyntaxAppend(found, _tmPf2);
						JB_Decr(_tmPf2);
					}
					JB_Decr(sub_name);
				}
			}
		}
		JB_SetRef(value, SC_SCObject_NextDisplay(value, exact));
	};
	JB_Decr(value);
}

Message* SC_AC__Backup_Define(SCFile* myfile, int f, Message* thg, JB_String* purpose) {
	if ((!(thg))) {
		thg = SC_SCFile_GetMsg(myfile, f);
	}
	if ((!thg)) {
		JB_Str_SyntaxExpect(JB_LUB[1824]);
		return nil;
	}
	thg = SC_Msg_CmdImprove(thg);
	return SC_AC__DefineOrCall(thg, purpose, myfile);
}

Message* SC_AC__CallFrom(Message* msg, JB_String* purpose, JB_Object* found) {
	Message* rz = nil;
	SCFunction* fn = SC_Msg_AutoMsgFuncFn(msg);
	if ((!(fn))) {
		fn = SC_Msg_AutoMsgFunc(msg);
	}
	if ((!fn)) {
		return nil;
	}
	rz = SC_AC__CallFromDefine(msg, fn, found);
	SC_AC__CallFromSub(((Message*)JB_Ring_First(rz)), fn);
	return rz;
}

Message* SC_AC__CallFromDefine(Message* msg, SCFunction* fn, JB_Object* found) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1535]));
	Message* arg = JB_Incr(JB_Msg_Msg(rz, JB_SyxArg, JB_LUB[0]));
	Message* define = JB_Incr(SC_AC__Define(msg, JB_LUB[1598], found));
	if ((!(define))) {
		JB_SetRef(define, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1818]));
	}
	JB_Msg_AppendString(define, fn->Name);
	JB_Tree_SyntaxAppend(arg, define);
	JB_Decr(arg);
	JB_Decr(define);
	JB_SafeDecr(rz);
	return rz;
}

void SC_AC__CallFromSub(Message* arg, SCFunction* fn) {
	{
		Array* _LoopSrcf2 = fn->LinkFrom;
		int _if0 = 0;
		while (true) {
			SCNode* call_point = ((SCNode*)JB_Array_Value(_LoopSrcf2, _if0));
			if (call_point == nil) {
				break;
			}
			Message* s = call_point->Source;
			if (s) {
				JB_String* f = JB_Msg_FilePath(s);
				if (JB_Str_Exists(f)) {
					Message* item = JB_Msg_Msg(arg, JB_SyxTmp, JB_LUB[1756]);
					JB_Msg_AppendSyx(item, JB_SyxSStr, f);
					JB_Msg_AppendString(item, SC_SCObject_CallFromName(call_point));
					JB_Msg_AppendNum(item, SC_Msg_FuncPos(s, fn));
				}
			}
			_if0++;
		};
	};
}

bool SC_AC__CanUseName(SCNode* l) {
	if (JB_Object_FastIsa(l, &SCModuleData)) {
		return (!((SCModule*)l)->IsImport);
	}
	return true;
}

Message* SC_AC__Check(Message* cmd) {
	if (JB_Rec_HasProblems(SC__AC_Errors)) {
		return SC_Msg_SendPerryErrors(cmd);
	}
	JB_SetRef(cmd->Name, JB_LUB[1541]);
	JB_Msg_AppendSyx(cmd, JB_SyxThg, JB_LUB[1841]);
	return cmd;
}

Message* SC_AC__CmdCleanUp(Message* arg) {
	JB_Incr(arg);
	if ((!JB_Msg_EqualsSyx(arg, JB_SyxArg, false))) {
		JB_PrintLine(JB_LUB[1789]);
		Message* tmp = JB_Incr(JB_Syx_OperatorPlus(JB_SyxArg, JB_LUB[1130]));
		JB_Tree_SyntaxAppend(tmp, arg);
		JB_SetRef(arg, tmp);
		JB_Decr(tmp);
	}
	Message* date = JB_Incr(((Message*)JB_Ring_First(arg)));
	if ((!JB_Msg_EqualsSyx(date, JB_SyxNum, false))) {
		JB_PrintLine(JB_LUB[1792]);
		JB_SetRef(date, JB_Syx_PlusNum(JB_SyxNum, 0));
		(JB_Ring_FirstSet(arg, date));
	}
	Message* Cmd = JB_Incr(((Message*)JB_Tree_Second(arg)));
	JB_Decr(arg);
	if ((!JB_Msg_EqualsSyx(Cmd, JB_SyxTmp, false))) {
		JB_PrintLine(JB_LUB[1791]);
		JB_SetRef(Cmd, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1633]));
		(JB_Ring_NextSibSet(date, Cmd));
	}
	JB_Decr(date);
	JB_Tree_RemoveAfter(Cmd);
	JB_SafeDecr(Cmd);
	return Cmd;
}

Message* SC_AC__CmdResponse(Message* cmd, Message* arg) {
	Message* rz = nil;
	if ((!JB_Msg_SyntaxEquals(cmd, JB_LUB[1633], false))) {
		JB_SetRef(rz, SC_AC__DoCmd(cmd, arg));
	}
	if ((!(rz))) {
		JB_SetRef(rz, SC_AC__WriteError(cmd->Name));
	}
	JB_SafeDecr(rz);
	return rz;
}

bool SC_AC__CmdWrap(Message* arg) {
	if (JB_Msg_ContainsStr(arg, SC__AC_TestCrash)) {
		JB_App__Crash(JB_LUB[0]);
	}
	Message* cmd = JB_Incr(SC_AC__CmdCleanUp(arg));
	Message* response = JB_Incr(SC_AC__CmdResponse(cmd, arg));
	if (cmd != response) {
		JB_FreeIfDead(SC_Msg_ReplaceWith(cmd, response));
	}
	JB_Decr(cmd);
	JB_Decr(response);
	JB_Proc_Send(JB__Proc_Parent, arg);
	JB_Rec_Clear(JB_StdErr);
	return (!SC__AC_WillExit);
}

Message* SC_AC__Define(Message* msg, JB_String* purpose, JB_Object* found) {
	JB_Incr(found);
	bool IsDisplay = JB_Str_OperatorStarts(purpose, JB_LUB[1612]);
	bool IsDefine = JB_Str_OperatorStarts(purpose, JB_LUB[1598]);
	if ((!(IsDisplay or IsDefine))) {
		JB_Str_SyntaxExpect(JB_LUB[1507]);
		JB_Decr(found);
		return nil;
	}
	if ((!JB_Object_Isa(found, &SCObjectData))) {
		JB_SetRef(found, nil);
	}
	Message* s = JB_Incr(SC_AC__LocateDefinition(msg, ((SCObject*)found), IsDisplay));
	if (s) {
		JB_Decr(found);
		Message* _tmPf0 = JB_Incr(SC_AC__RespondDefine(msg, s, purpose));
		JB_Decr(s);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(s);
	if (JB_IsDebug()) {
		JB_FreeIfDead(SC_AC__LocateDefinition(msg, ((SCObject*)found), IsDisplay));
	}
	JB_Decr(found);
	if (true) {
		JB_Str_SyntaxExpect(JB_LUB[1830]);
	}
	return nil;
}

Message* SC_AC__Define_Behaviour(SCFunction* fn, JB_String* purpose) {
	Message* rz = nil;
	SCClass* cls = JB_Incr(fn->Cls);
	if ((!cls)) {
		JB_Decr(cls);
		JB_Decr(rz);
		return nil;
	}
	JB_String* name = JB_Incr(JB_Str_Moat(fn->Name));
	SCObject* found = JB_Incr(SC_Base_UpCheck(cls, name, true));
	JB_Decr(cls);
	JB_Decr(name);
	if (JB_Object_FastIsa(found, &SCFunctionData)) {
		JB_SetRef(rz, SC_AC__DefineOrCall(((SCFunction*)found)->Source, purpose, ((SCFunction*)found)));
	}
	JB_Decr(found);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_AC__DefineOrCall(Message* msg, JB_String* purpose, JB_Object* found) {
	if (JB_Str_OperatorStarts(purpose, JB_LUB[1535])) {
		return SC_AC__CallFrom(msg, purpose, found);
	}
	return SC_AC__Define(msg, purpose, found);
}

Message* SC_AC__Diissplay(Message* msg, Message* s, JB_String* purpose) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
	SCFunction* fn = JB_Incr(SC_Msg_IdentifyFunc(s));
	if (JB_Msg_EqualsSyx(msg, JB_SyxName, false)) {
		if ((JB_Str_Equals(purpose, JB_LUB[1612], false)) and SC_Msg_OperatorIsTmp(s, JB_LUB[1884])) {
			JB_Decr(fn);
			JB_Decr(rz);
			return s;
		}
		msg->Func = JB_SyxThg;
		SCNode* obj = JB_Incr(SC_Comp__FindModuleOrClass(msg, true));
		if (obj) {
			Message* _tmPf4 = JB_Incr(SC_Base_DiissplayObj(obj, rz));
			JB_Decr(obj);
			JB_Decr(fn);
			JB_Decr(rz);
			JB_SafeDecr(_tmPf4);
			return _tmPf4;
		}
		JB_Decr(obj);
	}
	if (((JB_Msg_EqualsSyx(s, JB_SyxDecl, false))) and ((!fn) or ({
		Message* _tmPf1 = JB_Incr(SC_Msg_DeclName(s));
		bool _tmPf0 = JB_Msg_DeepEquals(msg, _tmPf1, false);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}))) {
		JB_String* _tmPf2 = JB_Incr(SC_Msg_RenderTypeAndName(s));
		JB_Msg_AppendSyx(rz, JB_SyxEmb, _tmPf2);
		JB_Decr(_tmPf2);
		JB_Decr(fn);
		JB_SafeDecr(rz);
		return rz;
	}
	if ((!fn)) {
		JB_Object* obj = JB_Incr(s->Obj);
		if (JB_Object_Isa(obj, &SCNodeData)) {
			Message* _tmPf3 = JB_Incr(SC_Base_DiissplayObj(((SCNode*)obj), rz));
			JB_Decr(obj);
			JB_Decr(fn);
			JB_Decr(rz);
			JB_SafeDecr(_tmPf3);
			return _tmPf3;
		}
		JB_Decr(obj);
	}
	if (JB_Str_Equals(purpose, JB_LUB[1613], true)) {
		if (((bool)fn) and ((!fn->NextFunc) and (!JB_Array_SyntaxCast(fn->Args)))) {
			JB_Decr(fn);
			JB_SafeDecr(rz);
			return rz;
		}
	}
	if ((!fn)) {
		JB_Decr(fn);
		JB_Decr(rz);
		return JB_Msg_Copy(s, nil);
	}
	while (fn) {
		Message* copy = JB_Incr(SC_Msg_CutifyCopy(fn->Source));
		JB_Tree_SyntaxAppend(rz, copy);
		JB_String* desc = JB_Incr(fn->Description);
		if (JB_Str_Exists(desc)) {
			JB_Msg_AppendSyx(rz, JB_SyxEmb, JB_LUB[0]);
			JB_Msg_AppendSyx(rz, JB_SyxBack, desc);
			if (fn->NextFunc) {
				JB_Msg_AppendSyx(rz, JB_SyxEmb, JB_LUB[0]);
			}
		}
		JB_Decr(desc);
		SCNode* l = JB_Incr(fn->Parent);
		if (l) {
			if (SC_AC__CanUseName(l)) {
				SC_AC__IdentifyBetter(copy, l->Name);
			}
		}
		 else {
			JB_Decr(l);
			JB_Decr(copy);
			break;
		}
		JB_Decr(copy);
		JB_Decr(l);
		if ((!JB_Str_OperatorStarts(purpose, JB_LUB[1613]))) {
			break;
		}
		JB_SetRef(fn, fn->NextFunc);
	};
	JB_Decr(fn);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_AC__DoCmd(Message* cmd, Message* arg) {
	Message* rz = nil;
	if ((!JB_Msg_EqualsSyx(cmd, JB_SyxTmp, false))) {
		JB_Decr(rz);
		return nil;
	}
	if ((!SC_AC__InitedOK())) {
		JB_Decr(rz);
		return SC_Msg_SendPerryErrors(cmd);
	}
	if (JB_Msg_SyntaxEquals(cmd, JB_LUB[2023], true)) {
		JB_Decr(rz);
		return SC_AC__UnusedFuncs(cmd);
	}
	if (JB_Msg_SyntaxEquals(cmd, JB_LUB[1541], true)) {
		JB_Decr(rz);
		return SC_AC__Check(cmd);
	}
	if (JB_Msg_SyntaxEquals(cmd, JB_LUB[1783], true)) {
		JB_Decr(rz);
		return SC_AC__ReportMemory(cmd);
	}
	if ((JB_Tree_SyntaxEquals(cmd, 1, false)) or (({
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(cmd)));
		bool _tmPf0 = JB_Msg_EqualsSyx(_tmPf1, JB_SyxName, false);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}))) {
		JB_Decr(rz);
		return SC_AC__AutoJump(cmd);
	}
	Message* _tmPf2 = JB_Incr(JB_Msg_NeedSyx(cmd, JB_SyxStr));
	JB_String* req = JB_Incr(JB_Msg_Name(_tmPf2));
	JB_Decr(_tmPf2);
	SCFile* my_file = JB_Incr(((SCFile*)JB_Dict_ValueLower(SC__Comp_Files, req)));
	JB_Decr(req);
	if (JB_File_SyntaxCast(my_file)) {
		JB_SetRef(rz, SC_AC__MainAct(cmd, my_file));
	}
	 else {
		if (true) {
			JB_Str_SyntaxExpect(JB_LUB[1821]);
		}
	}
	JB_Decr(my_file);
	JB_SafeDecr(rz);
	return rz;
}

bool SC_AC__EnterAutoComplete() {
	SpdProcess* perry = JB_Incr(JB__Proc_Parent);
	if ((!(JB_Rec_OK(JB_StdErr) and JB_Proc_IsOpen(perry)))) {
		JB_Decr(perry);
		return nil;
	}
	(JB_App__CrashOnInterupt(false));
	JB_PrintLine(JB_LUB[1179]);
	if ((!JB_App__IsMainThread())) {
		JB_PrintLine(JB_LUB[271]);
	}
	JB_App__ClearCaches(0);
	if (SC__Options_PrintLibraries) {
		PicoCommsConf(perry->Pico)->Noise = -1;
	}
	PicoGlobalConf()->TimeOut = 1966080.0;
	SC__Comp_InPerry = true;
	SC_AC__PerryTalk(perry);
	JB_Decr(perry);
	JB_PrintLine(JB_LUB[845]);
	return true;
}

Message* SC_AC__ErrorsToPerry() {
	if ((!SC__AC_Cleaned)) {
		SC_Rec_PrePrintErrors(SC__AC_Errors);
		SC__AC_Cleaned = true;
	}
	JB_String* _tmPf0 = JB_Incr(SC_Comp__RenderErrors(SC__AC_Errors, kJB__ErrorSeverity_Warning));
	Message* _tmPf1 = JB_Incr(JB_Str_Parse(_tmPf0, JB_SyxArg, true));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* SC_AC__FindAdj(Message* msg, bool DisplayOnly) {
	Message* adj = msg;
	if (JB_Msg_OperatorIn(msg, JB_SyxAdj)) {
		adj = ((Message*)JB_Ring_Parent(msg));
	}
	if ((!JB_Msg_OperatorIn(adj, JB_SyxDecl))) {
		Macro* found = SC_Comp__FindAdj(adj, nil);
		if (found) {
			return found->_Parsed;
		}
	}
	return nil;
}

Message* SC_AC__FuncTmps() {
	Message* rz = nil;
	if (SC__AC_func_tmp_src->Cleaned) {
		JB_Decr(rz);
		return JB_Macro_Source(SC__AC_func_tmp_src);
	}
	SC__AC_func_tmp_src->Cleaned = true;
	JB_SetRef(rz, JB_Macro_Source(SC__AC_func_tmp_src));
	{
		Message* ch = JB_Incr(((Message*)JB_Ring_First(rz)));
		while (ch) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
			if ((!JB_Msg_EqualsSyx(ch, JB_SyxDot, false))) {
				JB_Msg_AppendSyx(ch, JB_SyxStr, ch->Name);
			}
			if ((!JB_Msg_EqualsSyx(ch, JB_SyxStr, false))) {
				Message* f = JB_Incr(((Message*)JB_Ring_First(ch)));
				if (f) {
					JB_SetRef(f->Name, JB_Str_OperatorPlus(f->Name, JB_LUB[100]));
				}
				JB_Decr(f);
			}
			ch->Func = JB_SyxDot;
			JB_SetRef(ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(ch);
		;
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

SCFunction* SC_AC__GetFunc(Message* cmd, SCFile* myfile, int ff, int n) {
	Message* src = ((Message*)JB_Ring_Last(cmd));
	if ((!JB_Msg_EqualsSyx(src, JB_SyxDot, false))) {
		return SC_AC__GetFunc2(cmd, myfile, ff, n);
	}
	SCFunction* fn = ({
		SCFunction* _X = SC__AC_AnonFn;
		if ((!_X)) {
			_X = SC_Func_Constructor(nil, nil);
			JB_SetRef(SC__AC_AnonFn, _X);
		}
		 _X;
	});
	Message* prm = ((Message*)JB_Tree_Second(src));
	Message* mpos = ((Message*)JB_Ring_First(prm));
	Message* str = ((Message*)JB_Tree_Second(prm));
	if ((!(((bool)mpos) and ((bool)str)))) {
		JB_Str_SyntaxExpect(JB_LUB[1508]);
		return nil;
	}
	Message* f = ((Message*)JB_Ring_First(src));
	SCNode* parent = SC_Comp__FindModuleOrClass(f, false);
	if ((!parent)) {
		f->Func = JB_SyxName;
		parent = SC_Comp__FindModuleOrClass(f, true);
	}
	if ((!parent)) {
		JB_Str_SyntaxExpect(JB_LUB[1826]);
		return nil;
	}
	if ((parent == SC__AC_AnonParent) and (JB_Msg_SyntaxEquals(str, SC__AC_AnonText, false))) {
		return fn;
	}
	SCObject* orig = SC_Func_InsertIn(fn, parent, src->Name);
	int64 pos = JB_Msg_Int(mpos, 0);
	JB__Tk_DotInsertAllow = true;
	if (SC_Func_Update_Source(fn, pos, str->Name, myfile, orig)) {
		JB_SetRef(SC__AC_AnonParent, parent);
		JB_SetRef(SC__AC_AnonText, str->Name);
		return fn;
	}
	return nil;
}

SCFunction* SC_AC__GetFunc2(Message* cmd, SCFile* myfile, int f, int n) {
	Message* ast = SC_SCFile_AST(myfile);
	if (ast) {
		Message* src = SC_Msg_FindPos(ast, f, n);
		if (src) {
			return SC_Msg_InsideFunc(src);
		}
	}
	return nil;
}

SCNode* SC_AC__GetScope(Message* orig, int* types) {
	if ((!orig)) {
		return SC__Comp_program;
	}
	if (JB_Msg_EqualsSyx(orig, JB_SyxAsk, false)) {
		(*types) = 8;
		return SC__Comp_program;
	}
	Message* f = JB_Incr(SC_Msg_CutifyCopy(orig));
	SCArg* arg = JB_Incr(SC_Msg_MsgArg(orig));
	Syntax fn = f->Func;
	if (((bool)arg) and (fn == JB_SyxDot)) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(f)));
		SCObject* decl = JB_Incr(SC_TypeOfExprModulesOK(_tmPf1, arg, nil));
		JB_Decr(_tmPf1);
		if ((!decl)) {
			if (true) {
				JB_Str_SyntaxExpect(JB_LUB[1831]);
			}
			JB_Decr(decl);
			JB_Decr(arg);
			JB_Decr(f);
			return nil;
		}
		if (JB_Object_Isa(decl, &SCNodeData)) {
			JB_Decr(arg);
			JB_Decr(f);
			JB_SafeDecr(decl);
			return ((SCNode*)decl);
		}
		if (JB_Object_FastIsa(decl, &SCDeclData)) {
			SCClass* _tmPf2 = JB_Incr(((SCDecl*)decl)->Type);
			JB_Decr(decl);
			JB_Decr(arg);
			JB_Decr(f);
			JB_SafeDecr(_tmPf2);
			return _tmPf2;
		}
		JB_Decr(decl);
	}
	JB_Decr(f);
	if (SC_Msg_ACInIsa(orig)) {
		(*types) = 1;
		JB_Decr(arg);
		return SC__Comp_program;
	}
	if (arg) {
		JB_SafeDecr(arg);
		return arg;
	}
	JB_Decr(arg);
	if (JB_Msg_IsTypeOfDecl(orig)) {
		(*types) = 1;
		return SC__Comp_program;
	}
	SCArg* _tmPf0 = JB_Incr(SC_Msg_MsgArg(orig));
	if ((!_tmPf0)) {
		JB_Str_SyntaxExpect(JB_LUB[1829]);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_AC__IdentifyBetter(Message* node, JB_String* name) {
	JB_Msg_BecomeStr(node, JB_SyxEmb, JB_LUB[0]);
	node = ((Message*)JB_Ring_First(node));
	node->Func = JB_SyxDot;
	JB_Msg_AppendSyx(node, JB_SyxThg, name);
	JB_Msg_AppendSyx(node, JB_SyxEmb, JB_LUB[0]);
}

int SC_AC__Init_() {
	{
		JB_SetRef(SC__AC_AnonText, JB_LUB[0]);
		SC__AC_CompiledOK = false;
		SC__AC_Cleaned = false;
		SC__AC_WillExit = false;
		JB_SetRef(SC__AC_func_tmp_src, JB_Macro_ConstructorStr(nil, (JB_LUB[9])));
		JB_SetRef(SC__AC_all_tmp_src, JB_Macro_ConstructorStr(nil, (JB_LUB[14])));
		JB_SetRef(SC__AC_TestCrash, JB_Str_OperatorPlus(JB_LUB[1442], JB_LUB[1426]));
		SC__AC_max_total = 400;
		SC__AC_total = 0;
	}
	;
	return 0;
}

int SC_AC__InitCode_() {
	return 0;
}

bool SC_AC__InitedOK() {
	if (SC__Comp_InitedOK) {
		return true;
	}
	if (JB_Rec_OK(SC__AC_Errors)) {
		if (true) {
			JB_Str_SyntaxExpect(JB_LUB[776]);
		}
	}
	return false;
}

Message* SC_AC__JumpImport(Message* cmd) {
	Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(cmd, JB_SyxArg));
	Message* f = JB_Incr(((Message*)JB_Tree_Get(_tmPf0, 0)));
	JB_Decr(_tmPf0);
	if (f) {
		JB_Tree_Clear(cmd);
		JB_File* proj = JB_Incr(SC_Comp__FindProject(f->Name, false));
		if ((!JB_File_Exists(proj, false))) {
			JB_Decr(proj);
			JB_Decr(f);
			return nil;
		}
		JB_String* _tmPf1 = JB_Incr(JB_File_Path(proj));
		JB_Decr(proj);
		JB_Msg_AppendSyx(cmd, JB_SyxSStr, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Msg_AppendNum(cmd, 0);
		JB_Decr(f);
		return cmd;
	}
	JB_Decr(f);
	return nil;
}

Message* SC_AC__LocateDefinition(Message* msg, SCObject* already_defined, bool DisplayOnly) {
	Message* rz = nil;
	if ((JB_Msg_OperatorIn(msg, JB_SyxAdj)) or ((JB_Msg_EqualsSyx(msg, JB_SyxAdj, false)))) {
		rz = SC_AC__FindAdj(msg, DisplayOnly);
		if (rz) {
			return rz;
		}
	}
	SCDecl* ty = SC_TypeOfExpr(msg, SC_Msg_MsgArg(msg), nil);
	rz = SC_AC__LocateDefinitionSub(msg, already_defined, ty, DisplayOnly);
	if (JB_Msg_EqualsSyx(rz, JB_SyxArg, false)) {
		Message* p = ((Message*)JB_Ring_Parent(rz));
		if (p) {
			rz = p;
		}
	}
	if (JB_Msg_OperatorIn(msg, JB_SyxTmp)) {
		msg = ((Message*)JB_Ring_Parent(msg));
	}
	if (JB_Msg_EqualsSyx(msg, JB_SyxTmp, false)) {
		JB_Object* fn = msg->Obj;
		if (JB_Object_FastIsa(fn, &SCFunctionData)) {
			return ((SCFunction*)fn)->Source;
		}
	}
	return rz;
}

Message* SC_AC__LocateDefinitionSub(Message* msg, SCObject* already_defined, SCDecl* ty, bool DisplayOnly) {
	if (already_defined) {
		return already_defined->Source;
	}
	if ((JB_Msg_EqualsSyx(msg, JB_SyxThg, false)) and JB_Msg_OperatorIn(msg, JB_SyxFunc)) {
		msg = ((Message*)JB_Ring_Parent(msg));
	}
	SCFunction* fn = SC_Msg_MsgFunc(msg);
	if (fn) {
		Message* it = fn->Source;
		if (it) {
			return it;
		}
	}
	if ((!ty)) {
		return SC_Msg_ModuleSrc(msg);
	}
	if (SC_Class_EqualsType(ty->Type, kSC__SCNodeType_FuncProto, false)) {
		JB_Object* l = ty->IsLookupOnly;
		if (JB_Object_FastIsa(l, &SCFunctionData)) {
			return ((SCFunction*)l)->Source;
		}
	}
	if ((!DisplayOnly) and (JB_Msg_EqualsSyx(msg, JB_SyxDecl, false))) {
		return SC_Base_SourceArg(ty->Type);
	}
	Message* src = ty->Source;
	if (src) {
		if (DisplayOnly and SC_Decl_SyntaxIs(ty, kSC__SCDeclInfo_Const)) {
			(SC_Decl_NameSet(ty, msg->Name));
			return SC_Decl_WriteDeclFull(ty, JB_LUB[0], 1);
		}
		if ((JB_Msg_EqualsSyx(src, JB_SyxDecl, false)) and (JB_Msg_EqualsSyx(((Message*)JB_Ring_Last(src)), JB_SyxRel, false))) {
			src = JB_Msg_Copy(src, nil);
			Message* L = ((Message*)JB_Ring_Last(src));
			JB_FreeIfDead(SC_Msg_ReplaceWith(L, ((Message*)JB_Ring_First(L))));
		}
		return src;
	}
	if (DisplayOnly) {
		SCClass* t = ty->Type;
		Message* _tmP0 = t->TypeNormal->Source;
		if ((!_tmP0)) {
			_tmP0 = t->Source;
		}
		return _tmP0;
	}
	SCNode* found = SC_Object_ClassOrModule(msg->Obj);
	if (found) {
		return found->Source;
	}
	return nil;
}

Message* SC_AC__MainAct(Message* cmd, SCFile* my_file) {
	Message* rz = nil;
	int f = ((int)JB_Msg_Int(JB_Msg_NeedSyxInt(cmd, JB_SyxNum, 1), 0));
	int n = ((int)JB_Msg_Int(JB_Msg_NeedSyxInt(cmd, JB_SyxNum, 2), 0));
	if ((!n)) {
		JB_Str_SyntaxExpect(JB_LUB[1823]);
		return nil;
	}
	SC_SCFile_Use(my_file);
	SCFunction* fn = SC_AC__GetFunc(cmd, my_file, f, n);
	JB_ClassData_Restore((&MessageData));
	if ((!fn)) {
		return nil;
	}
	Message* thg = SC_Msg_FindPos(fn->Source, f, n);
	if ((!thg) and (JB_Msg_SyntaxEquals(cmd, JB_LUB[1535], false))) {
		thg = fn->Source;
	}
	if ((JB_Msg_EqualsSyx(thg, JB_SyxThg, false)) and (SC_Msg_IsBehaviour(fn->Source) and (((Message*)JB_Ring_Parent(thg)) == fn->Source))) {
		return SC_AC__Define_Behaviour(fn, cmd->Name);
	}
	if (JB_Msg_OperatorStarts(cmd, JB_LUB[1598]) or (JB_Msg_OperatorStarts(cmd, JB_LUB[1612]) or JB_Msg_OperatorStarts(cmd, JB_LUB[1535]))) {
		return SC_AC__Backup_Define(my_file, f, thg, cmd->Name);
	}
	if ((!thg)) {
		JB_Str_SyntaxExpect(JB_LUB[1824]);
		return nil;
	}
	if ((!JB_Msg_OperatorStarts(cmd, JB_LUB[1504]))) {
		JB_Str_SyntaxExpect(JB_LUB[1507]);
		return nil;
	}
	Message* stuff = JB_Msg_NeedSyxInt(cmd, JB_SyxStr, 3);
	Message* Auto = SC_AC__MainActAutoComplete(thg, JB_Msg_Name(stuff), cmd);
	if (Auto) {
		rz = JB_Syx_OperatorPlus(JB_SyxArg, JB_LUB[1898]);
		JB_Tree_SyntaxAppend(rz, ((Message*)JB_Tree_Get(stuff, 0)));
		JB_Tree_SyntaxAppend(rz, Auto);
	}
	return rz;
}

Message* SC_AC__MainActAutoComplete(Message* thg, JB_String* str, Message* cmd) {
	if (JB_Msg_EqualsSyx(thg, JB_SyxTmp, false)) {
		return SC_AC__TmpAutoComplete(thg, str, cmd->Name);
	}
	return SC_AC__AutoComplete(thg, str, cmd->Name);
}

void SC_AC__ParserRestore() {
	JB_SetRef(SC__AC_Errors, JB_StdErr);
	JB_SetRef(JB_StdErr, JB_Rec_Constructor(nil));
	JB_ClassData_Restore((&MessageData));
	JB__Tk_Using.Position = -1;
}

void SC_AC__PerryTalk(SpdProcess* perry) {
	SC__AC_CompiledOK = SC_Comp__CompileAll();
	SC_AC__ParserRestore();
	Message* _tmPf2 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1541]));
	Message* _tmPf1 = JB_Incr(SC_AC__Check(_tmPf2));
	JB_Decr(_tmPf2);
	JB_Proc_Send(perry, _tmPf1);
	{
		while (PicoCanGet(perry->Pico)) {
			Message* cmd = JB_Incr(JB_Proc_Get(perry, 1000.0f));
			if (((bool)cmd) and (!SC_AC__CmdWrap(cmd))) {
				JB_Decr(cmd);
				break;
			}
			JB_Decr(cmd);
		};
		JB_Decr(_tmPf1);
	}
	;
	PicoSleepForSend(5.0f, 0.5f);
	JB_Proc_Disconnect(perry, JB_LUB[0]);
}

Message* SC_AC__ReportMemory(Message* cmd) {
	JB_Tree_Clear(cmd);
	Message* arg = JB_Incr(JB_Msg_Msg(cmd, JB_SyxArg, JB_LUB[0]));
	JB_Msg_AppendNum(arg, JB_MemCount());
	JB_Msg_AppendNum(arg, JB_App__StringMemory());
	JB_Decr(arg);
	return cmd;
}

Message* SC_AC__RespondDefine(Message* msg, Message* s, JB_String* purpose) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Syx_Msg(JB_SyxTmp, purpose));
	if (JB_Str_OperatorStarts(purpose, JB_LUB[1598])) {
		SC_AC__ActualDefine(rz, s, purpose);
	}
	 else {
		Message* _tmPf0 = JB_Incr(SC_AC__Diissplay(msg, s, purpose));
		JB_Tree_SyntaxAppend(rz, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_AC__RootTmpComplete(Message* cmd) {
	Message* rz = nil;
	Message* f = ((Message*)JB_Tree_Get(((Message*)JB_Tree_Get(cmd, 0)), 0));
	JB_String* req = JB_Msg_Name(((Message*)JB_Ring_NextSib(f)));
	int flags = 0;
	flags = (flags + (SC_Msg_IsModuleType(f) << ((bool)1)));
	flags = (flags + (SC_Msg_IsClassType(f) << ((bool)2)));
	flags = (flags + (SC_Msg_IsLinkageType(f) << ((bool)3)));
	if ((!(flags))) {
		flags = 1;
	}
	rz = JB_Syx_Msg(JB_SyxTmp, cmd->Name);
	Message* arg = JB_Msg_Msg(rz, JB_SyxArg, req);
	{
		Message* _LoopSrcf2 = SC_AC__AllTmps();
		Message* ch = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(ch));
			JB_String* found = ch->Name;
			if ((((bool)(ch->Tag & flags))) and (JB_Str_OperatorStarts(found, req))) {
				Message* tmp = JB_Msg_Msg(arg, JB_SyxTmp, found);
				JB_Msg_AppendSyx(tmp, JB_SyxStr, JB_Str_Before(found, JB_LUB[573]));
			}
			ch = _Nf1;
		};
		;
	}
	;
	return rz;
}

Message* SC_AC__TmpAutoComplete(Message* f, JB_String* name, JB_String* type) {
	Message* rz = nil;
	bool finished = false;
	JB_SetRef(rz, JB_Syx_OperatorPlus(JB_SyxTmp, type));
	if ((!JB_Str_Equals(name, JB_LUB[1889], true))) {
		{
			Message* _LoopSrcf2 = JB_Incr(SC_AC__FuncTmps());
			Message* ch = JB_Incr(((Message*)JB_Ring_First(_LoopSrcf2)));
			while (ch) {
				Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
				if (JB_Msg_OperatorStarts(ch, name)) {
					if ((JB_Str_CompareInt(ch->Name, 2, false) >= 1) and (JB_Str_Equals(ch->Name, name, true))) {
						finished = true;
					}
					 else {
						Message* cf = JB_Incr(((Message*)JB_Ring_First(ch)));
						if (cf) {
							Message* arg = JB_Incr(JB_Msg_Msg(rz, JB_SyxArg, name));
							Message* _tmPf3 = JB_Incr(JB_Msg_Msg(arg, JB_SyxTmp, cf->Name));
							JB_Decr(arg);
							JB_Msg_AppendSyx(_tmPf3, JB_SyxStr, cf->Name);
							JB_Decr(_tmPf3);
						}
						JB_Decr(cf);
					}
				}
				JB_SetRef(ch, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(ch);
			;
			JB_Decr(_LoopSrcf2);
		};
	}
	if (JB_Ring_HasChildren(rz)) {
		0;
	}
	 else if ((bool)f) {
		JB_SetRef(rz, SC_AC__AutoComplete(f, name, type));
	}
	 else {
		JB_SetRef(rz, nil);
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_AC__UnusedFuncs(Message* cmd) {
	Message* path = JB_Msg_NeedSyx(cmd, JB_SyxStr);
	if ((!path)) {
		return nil;
	}
	SCFile* scf = ((SCFile*)JB_Dict_ValueLower(SC__Comp_Files, path->Name));
	if ((!JB_File_SyntaxCast(scf))) {
		JB_Str_SyntaxExpect(JB_Str_OperatorPlus(JB_LUB[1069], path->Name));
		return nil;
	}
	Message* unused_libs = ((Message*)JB_Ring_NextSib(path));
	if (unused_libs) {
		{
			Message* lib = ((Message*)JB_Ring_First(unused_libs));
			while (lib) {
				Message* _Nf1 = ((Message*)JB_Ring_NextSib(lib));
				if (JB_Msg_ExpectString(lib)) {
					SC_Msg_HateUnusedFuncs(lib);
				}
				lib = _Nf1;
			};
			;
		};
	}
	JB_Tree_Clear(cmd);
	if ((!SC__AC_CompiledOK)) {
		return cmd;
	}
	Message* arg = JB_Msg_GiveArg(cmd);
	{
		Array* _LoopSrcf4 = SC__Comp_FuncList;
		int _if2 = 0;
		while (true) {
			SCFunction* fn = ((SCFunction*)JB_Array_Value(_LoopSrcf4, _if2));
			if (fn == nil) {
				break;
			}
			Message* src = fn->Source;
			if (((bool)src) and ((SC_SCObject_File(fn) == scf) and SC_Func_IsUnused(fn))) {
				JB_String* str = JB_LUB[268];
				if (fn->LinkFrom != nil) {
					str = JB_LUB[269];
				}
				JB_Msg_AppendNum(JB_Msg_Msg(arg, JB_SyxTmp, JB_Str_OperatorPlus(fn->Name, str)), src->Position);
			}
			_if2++;
		};
	}
	;
	return cmd;
}

Message* SC_AC__WriteError(JB_String* name) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1633]));
	JB_Error* err = JB_Incr(JB_Rec_Pop(JB_StdErr));
	if (err) {
		JB_Msg_AppendString(rz, err->Name);
	}
	 else {
		JB_Msg_AppendString(rz, JB_LUB[1633]);
	}
	JB_Decr(err);
	JB_Msg_AppendString(rz, name);
	JB_SafeDecr(rz);
	return rz;
}


int JB_API__Init_() {
	{
		JB__API_NilHappened = 0;
	}
	;
	return 0;
}

int JB_API__InitCode_() {
	return 0;
}

void JB_API__NilCallBack(JB_String* ErrorMessage) {
	JB_PrintLine(ErrorMessage);
}

bool JB_API__NilHandler() {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return nil;
	}
	debugger;
	if ((++JB__API_NilHappened) < 16) {
		JB_API__NilCallBack(JB_LUB[976]);
	}
	 else if (JB__API_NilHappened == 16) {
		JB_API__NilCallBack(JB_LUB[977]);
	}
	return false;
}


void JB_Constants__AddEscape(byte i, FastString* fs) {
	JB_String* f = JB_Str__Byte(i);
	if ((!((!JB_Str_Exists(((JB_StringC*)JB_Dict_ValueStr(JB__Constants_EscapeStr, f)))) or (!JB_Str_Exists(((JB_String*)JB_Dict_ValueStr(JB__Constants_EscapeChr, f))))))) {
		return;
	}
	JB_FS_AppendByte(fs, '\\');
	JB_FS_AppendHex(fs, i, 2);
	JB_String* t = JB_FS_GetResult(fs);
	if ((!(JB_Str_Exists(((JB_StringC*)JB_Dict_ValueStr(JB__Constants_EscapeStr, f)))))) {
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, f, JB_Str_CastZero(t)));
	}
	if ((!(JB_Str_Exists(((JB_String*)JB_Dict_ValueStr(JB__Constants_EscapeChr, f)))))) {
		(JB_Dict_ValueSet(JB__Constants_EscapeChr, f, t));
	}
}

int JB_Constants__Init_() {
	{
		JB_SetRef(JB__Constants_Name, JB_LUB[66]);
		JB_SetRef(JB__Constants_EscapeStr, (JB_Dict_Constructor(nil)));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[2], JB_LUB[1410]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[42], JB_LUB[1415]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[90], JB_LUB[1417]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[33], JB_LUB[1418]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[218], JB_LUB[1405]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[250], JB_LUB[1408]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[1403], JB_LUB[1412]));
		(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[243], JB_LUB[1407]));
		JB_SetRef(JB__Constants_XML_EscapeStr, (JB_Dict_Constructor(nil)));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[242], JB_LUB[245]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[250], JB_LUB[246]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[218], JB_LUB[249]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[573], JB_LUB[248]));
		(JB_Dict_ValueSet(JB__Constants_XML_EscapeStr, JB_LUB[592], JB_LUB[247]));
		JB_SetRef(JB__Constants_JS_EscapeStr, (JB_Dict_Constructor(nil)));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[32], JB_LUB[1413]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[89], JB_LUB[1414]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[42], JB_LUB[1415]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[90], JB_LUB[1417]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[33], JB_LUB[1418]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[218], JB_LUB[1405]));
		(JB_Dict_ValueSet(JB__Constants_JS_EscapeStr, JB_LUB[1403], JB_LUB[1412]));
		JB_SetRef(JB__Constants_CSWordMiddle, JB_Str_UniCS(JB_LUB[617]));
		JB_SetRef(JB__Constants_CSLettersOnly, JB_Str_UniCS(JB_LUB[616]));
		JB_SetRef(JB__Constants_CSWordStart, JB_Str_UniCS(JB_LUB[619]));
		JB_SetRef(JB__Constants_XMLWordMiddle, JB_Str_UniCS(JB_LUB[618]));
		JB_SetRef(JB__Constants_CSNum, JB__Constants_CSWordMiddle);
		JB_SetRef(JB__Constants_CSLine, JB_Str_CharSetWithBool(JB_LUB[57], false));
		JB_SetRef(JB__Constants_CSAfterStatement, JB_Str_CharSetWithBool(JB_LUB[138], false));
		JB_SetRef(JB__Constants_CSLineBlack, JB_Str_CharSetWithBool(JB_LUB[58], false));
		JB_SetRef(JB__Constants_CSWrapSplit, JB_Str_CharSetWithBool(JB_LUB[101], false));
	}
	;
	return 0;
}

int JB_Constants__InitCode_() {
	{
	}
	;
	JB_Constants__InitConstants();
	return 0;
}

void JB_Constants__InitConstants() {
	JB_Array_Constructor0(nil);
	JB_SetRef(JB__Constants_EscapeChr, JB_Dict__Copy(JB__Constants_EscapeStr));
	(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[236], JB_LUB[1406]));
	JB_SetRef(JB__Constants_UnEscapeStr, JB_Dict__Reverse(JB__Constants_EscapeStr));
	JB_SetRef(JB__Constants_JS_UnEscapeStr, JB_Dict__Reverse(JB__Constants_JS_EscapeStr));
	JB_SetRef(JB__Constants_XML_UnEscapeStr, JB_Dict__Reverse(JB__Constants_XML_EscapeStr));
	(JB_Dict_ValueSet(JB__Constants_EscapeChr, JB_LUB[218], ((JB_String*)nil)));
	(JB_Dict_ValueSet(JB__Constants_EscapeChr, JB_LUB[236], ((JB_String*)nil)));
	(JB_Dict_ValueSet(JB__Constants_UnEscapeStr, JB_LUB[1409], ((JB_String*)nil)));
	(JB_Dict_ValueSet(JB__Constants_UnEscapeStr, JB_LUB[1403], JB_LUB[0]));
	(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[250], ((JB_StringC*)nil)));
	FastString* tfs = JB_Incr(JB_FS_Constructor(nil));
	{
		int i = 0;
		while (i < 256) {
			if ((i <= 31) or (((i == 127) or ((i == 192) or (i == 193))) or (i >= 245))) {
				JB_Constants__AddEscape(i, tfs);
			}
			i++;
		};
	}
	;
	JB_Decr(tfs);
	JB_MSR_EscapeCodeSet(JB__Constants_UnEscapeStr, true);
	JB_MSR_DecodeEntitySet(JB__Constants_UnEscapeStr, true);
	JB_MSR_DecodeEntitySet(JB__Constants_XML_UnEscapeStr, true);
	(JB_Dict_ValueSet(JB__Constants_EscapeStr, JB_LUB[239], JB_LUB[238]));
}

JB_String* JB_Constants__TestJB() {
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	{
		int c = 0;
		while (c < 256) {
			JB_FS_AppendByte(fs, ((byte)c));
			c++;
		};
	}
	;
	JB_String* str = JB_Incr(JB_FS_GetResult(fs));
	JB_Decr(fs);
	if ((!JB_Str_EscapeTest(str))) {
		JB_Decr(str);
		return JB_LUB[0];
	}
	JB_Decr(str);
	JB_String* natural_input = JB_Incr(JB_LUB[400]);
	JB_String* jbin_input = JB_Incr(JB_LUB[400]);
	if ((!JB_Constants__TestCasting())) {
		debugger;
	}
	JB_FreeIfDead(JB_Str_UpperCase(JB_LUB[1828]));
	LeakTester* LKT = JB_Incr(JB_Lk_Constructor(nil, JB_LUB[1629]));
	JB_FreeIfDead(JB_EntityTest());
	JB_Lk_FinalTest(LKT);
	JB_Decr(LKT);
	if ((!JB_Rec_OK(JB_StdErr))) {
		JB_Decr(jbin_input);
		JB_Decr(natural_input);
		return JB_LUB[0];
	}
	Message* root = JB_Incr(JB_Str_Parse(natural_input, JB_SyxArg, true));
	JB_Decr(natural_input);
	if ((!root)) {
		JB_Decr(root);
		JB_Decr(jbin_input);
		return JB_LUB[0];
	}
	JB_Msg_jbinTest(root);
	if (JB_Str_Exists(jbin_input)) {
		Message* _tmPf1 = JB_Incr(JB_Msg_Copy(root, nil));
		JB_Msg__TreeCompare(root, _tmPf1, false);
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(JB_Str_Parse(jbin_input, JB_SyxArg, true));
		JB_Msg__TreeCompare(root, _tmPf2, false);
		JB_String* _tmPf3 = JB_Incr(JB_Msg_Render(root, nil));
		JB_Msg_Test(root, _tmPf3, JB_LUB[1828]);
		JB_Decr(_tmPf3);
		JB_String* _tmPf4 = JB_Incr(JB_Msg_RenderJbin(root, JB_LUB[0], nil));
		JB_Msg_Test(root, _tmPf4, JB_LUB[1743]);
		JB_Decr(_tmPf4);
		JB_Decr(_tmPf2);
	}
	JB_Decr(jbin_input);
	if ((!JB_Rec_OK(JB_StdErr))) {
		JB_Decr(root);
		return JB_LUB[0];
	}
	JB_Decr(root);
	return JB_EntityTest();
}

bool JB_Constants__TestCasting() {
	Dictionary* d2 = JB_Incr(JB_Dict_Constructor(nil));
	DTWrap* _tmPf1 = JB_Incr(((DTWrap*)JB_Dict_ValueStr(d2, JB_LUB[1470])));
	DTWrap* _tmPf0 = JB_Incr(JB_Wrap_ConstructorInt(nil, JB_Wrap_Value(_tmPf1) + 1));
	JB_Decr(_tmPf1);
	(JB_Dict_ValueSet(d2, JB_LUB[1470], _tmPf0));
	JB_Decr(d2);
	JB_Decr(_tmPf0);
	Dictionary* d = JB_Incr(JB_Dict_Constructor(nil));
	JB_String* str = JB_Incr(JB_LUB[3]);
	if (JB_Str_Length(str) != 6) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(str);
		JB_Decr(d);
		return nil;
	}
	(JB_Dict_ValueSet(d, str, str));
	JB_Decr(d);
	JB_Decr(str);
	if ('\x00') {
		return nil;
	}
	JB_Class* x = &MessageData;
	Message* y = JB_Incr(JB_Msg_ConstructorNormal(nil, JB_SyxBra, JB_LUB[0]));
	JB_SetRef(y->Name, JB_LUB[1471]);
	JB_Object* yy = nil;
	JB_SetRef(yy, y);
	Array* arr = JB_Incr((JB_Array_Constructor0(nil)));
	JB_Array_SyntaxAppend(arr, JB_LUB[0]);
	JB_Decr(arr);
	if (JB_Object_Isa(yy, &MessageData)) {
		if ((!JB_Str_Equals(((Message*)yy)->Name, JB_LUB[1471], false))) {
			debugger;
		}
	}
	JB_Decr(yy);
	bool _tmPf2 = (JB_Object_Isa(y, x));
	JB_Decr(y);
	return _tmPf2;
}


void SC_LinkMap__Collect(SCFunction* self) {
	JB_SetRef(SC__Func_CurrFunc, self);
	SC__LinkMap_CurrID++;
	Message* arg = SC_Func_SourceArg(self);
	{
		Message* msg = arg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(arg));
		while (((bool)(msg)) and (msg != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(msg));
			JB_Object* o = msg->Obj;
			if (o) {
				SC_Func_CollectLinks(self, o);
			}
			msg = _N_f2;
		};
		;
	}
	;
	{
		Array* _LoopSrcf5 = self->Args;
		int _if3 = 0;
		while (true) {
			SCDecl* d = ((SCDecl*)JB_Array_Value(_LoopSrcf5, _if3));
			if (d == nil) {
				break;
			}
			SC_Func_CollectLinks(self, d);
			_if3++;
		};
	}
	;
	SCDecl* r = self->ReturnType;
	if (r) {
		SC_Func_CollectLinks(self, r);
	}
}

void SC_LinkMap__CollectAll() {
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* s = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (s == nil) {
				break;
			}
			SC_LinkMap__Collect(s);
			_if0++;
		};
	};
}

int SC_LinkMap__Init_() {
	{
		SC__LinkMap_CurrID = 0;
	}
	;
	return 0;
}

int SC_LinkMap__InitCode_() {
	return 0;
}

void SC_LinkMap__Store(Array** darr, SCObject* obj) {
	Array* arr = (*darr);
	if (arr == nil) {
		arr = (JB_Array_Constructor0(nil));
		JB_SetRef((*darr), arr);
	}
	JB_Array_SyntaxAppend(arr, obj);
}


SCNode* SC_Linkage__Collect(Message* node, SCNode* name_space, Message* ErrPlace) {
	if (name_space != SC__Comp_program) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1298]);
		return nil;
	}
	SCNode* _tmPf0 = JB_Incr(SC_Linkage__LinkerSub(node, name_space, ErrPlace));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1246]);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

int SC_Linkage__Init_() {
	{
		JB_SetRef(SC__Linkage_OSXFrameworks, JB_Msg_ConstructorEmpty(nil));
		JB_SetRef(SC__Linkage_Flagz, JB_Msg_ConstructorEmpty(nil));
	}
	;
	return 0;
}

int SC_Linkage__InitCode_() {
	return 0;
}

bool SC_Linkage__Interpreter() {
	JB_String* _tmPf0 = JB_Incr(SC_Linkage__SyntaxAccess(JB_LUB[1727]));
	bool _tmPf1 = JB_Str_Yes(_tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

SCNode* SC_Linkage__LinkerSub(Message* node, SCNode* name_space, Message* ErrPlace) {
	Message* arg = JB_Msg_NeedSyx(node, JB_SyxArg);
	if (arg) {
		SC_Msg_ConfTake(arg, SC__Linkage_Flagz, JB_LUB[1657]);
		SC_Msg_ConfTake(arg, SC__Linkage_OSXFrameworks, JB_LUB[1668]);
		{
			Message* ch = ((Message*)JB_Ring_First(arg));
			while (ch) {
				Message* _Nf1 = ((Message*)JB_Ring_NextSib(ch));
				if (true) {
					JB_Msg_SyntaxExpect(ch, nil);
				}
				ch = _Nf1;
			};
			;
		}
		;
		return SC__Comp_program;
	}
	return nil;
}

JB_String* SC_Linkage__SyntaxAccess(JB_String* name) {
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	{
		Message* _LoopSrcf2 = JB_Incr(SC__Linkage_Flagz);
		Message* ch = JB_Incr(((Message*)JB_Ring_First(_LoopSrcf2)));
		while (ch) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
			if (JB_Msg_SyntaxEquals(ch, name, true)) {
				JB_String* str = JB_Incr(JB_Msg_FirstName(ch));
				if (JB_Str_Exists(str)) {
					if (fs->Length) {
						JB_FS_AppendByte(fs, ' ');
					}
					JB_FS_AppendString(fs, str);
				}
				JB_Decr(str);
			}
			JB_SetRef(ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(ch);
		;
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_String* _tmPf3 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}



int SC_Macros__Init_() {
	{
		JB_SetRef(SC__Macros_FS, JB_Macro_ConstructorStr(nil, (JB_LUB[15])));
		JB_SetRef(SC__Macros_InitExpand, JB_Macro_ConstructorStr(nil, (JB_LUB[26])));
		JB_SetRef(SC__Macros_WhileDecl, JB_Macro_ConstructorStr(nil, (JB_LUB[16])));
		JB_SetRef(SC__Macros_MultiDecr, JB_Macro_ConstructorStr(nil, (JB_LUB[25])));
		JB_SetRef(SC__Macros_ConstructorNew, JB_Macro_ConstructorStr(nil, (JB_LUB[18])));
		JB_SetRef(SC__Macros_ConstructorNewTask, JB_Macro_ConstructorStr(nil, (JB_LUB[17])));
		JB_SetRef(SC__Macros_MainArgBasic, JB_Macro_ConstructorStr(nil, (JB_LUB[6])));
		JB_SetRef(SC__Macros_MainArgBasicReq, JB_Macro_ConstructorStr(nil, (JB_LUB[7])));
		JB_SetRef(SC__Macros_MainArgDefault, JB_Macro_ConstructorStr(nil, (JB_LUB[5])));
		JB_SetRef(SC__Macros_MainArgArray, JB_Macro_ConstructorStr(nil, (JB_LUB[8])));
		JB_SetRef(SC__Macros_MainArgNoNE, JB_Macro_ConstructorStr(nil, (JB_LUB[12])));
		JB_SetRef(SC__Macros_ASM_Datatype, JB_Macro_ConstructorStr(nil, (JB_LUB[13])));
		JB_SetRef(SC__Macros_ASMCopier, JB_Macro_ConstructorStr(nil, (JB_LUB[28])));
		JB_SetRef(SC__Macros_ASMCopier2, JB_Macro_ConstructorStr(nil, (JB_LUB[27])));
		JB_SetRef(SC__Macros_ASMSetter, JB_Macro_ConstructorStr(nil, (JB_LUB[21])));
	}
	;
	return 0;
}

int SC_Macros__InitCode_() {
	return 0;
}




void SC_Options__ColorSet(bool Value) {
	JB__ErrorColors_Enabled = Value;
}

bool SC_Options__Color() {
	return JB__ErrorColors_Enabled;
}

int SC_Options__Init_() {
	{
		SC__Options_NilStrength = kJB__ErrorSeverity_Error;
		JB_SetRef(SC__Options_BannedClasses, ((Dictionary*)nil));
		JB_SetRef(SC__Options_output_path, JB_LUB[0]);
		JB_SetRef(SC__Options_SingleFileInput, JB_LUB[0]);
		JB_SetRef(SC__Options_Variant, JB_LUB[0]);
		JB_SetRef(SC__Options_Arch, JB_LUB[0]);
		SC__Options_SingleCppOutput = true;
		SC__Options_HideMultipleErrors = true;
		SC__Options_NilTestAllocNeverFails = true;
		SC__Options_Beep = false;
		SC__Options_Cpp = true;
		SC__Options_Compile = true;
		SC__Options_MakeASM = false;
		SC__Options_TargetDebug = false;
		SC__Options_PrintLibraries = false;
		SC__Options_GenFlowControlCode = false;
		SC__Options_KeepAllErrors = false;
		SC__Options_Scripting = false;
		SC__Options_MakeLib = false;
		SC__Options_CheckMaxVars = false;
		SC__Options_ListAllLib = false;
		SC__Options_ForceRecompile = false;
		SC__Options_Silent = false;
		SC__Options_IsDirectTest = false;
		SC__Options_ProjectIsLibrary = false;
		SC__Options_ProjectIsMiniLib = false;
		SC__Options_IgnoreCantSaveErrors = false;
		SC__Options_ArgStats = false;
		SC__Options_PrintCompileString = false;
		SC__Options_PrintFiles = false;
		SC__Options_PrintStages = false;
		SC__Options_Warnings = false;
		SC__Options_UseFuncCallCount = false;
		SC__Options_ExternalCompile = false;
		SC__Options_Final = false;
		SC__Options_Products = kSC__Options_native;
		SC__Options_Compile32Bit = JB_MaybeBool__New(false);
		SC__Options_Optimise = 1;
		SC__Options_SelfReplacement = ((bool)0);
		SC__Options_OperationCount = 0;
		SC__Options_PerryOutput = 0;
		SC__Options_UseScriptLoc = 0;
	}
	;
	return 0;
}

int SC_Options__InitCode_() {
	return 0;
}


bool JB_Platform__CPU_ARM() {
	return ((bool)(JB_Platform__CPU() & 2));
}

bool JB_Platform__CPU_Intel() {
	return ((bool)(JB_Platform__CPU() & 4));
}

JB_String* JB_Platform__CPU_Name() {
	if (JB_Platform__CPU_Intel()) {
		return JB_LUB[1724];
	}
	if (JB_Platform__CPU_ARM()) {
		return JB_LUB[1490];
	}
	if (JB_Platform__CPU_PPC()) {
		return JB_LUB[1873];
	}
	if (JB_Platform__CPU_Spd()) {
		return JB_LUB[1954];
	}
	return JB_LUB[0];
}

bool JB_Platform__CPU_PPC() {
	return ((bool)(JB_Platform__CPU() & 8));
}

bool JB_Platform__CPU_Spd() {
	return ((bool)(JB_Platform__CPU() & 1));
}

int JB_Platform__Init_() {
	{
	}
	;
	return 0;
}

int JB_Platform__InitCode_() {
	return 0;
}

void JB_Platform__Log(JB_String* s) {
	//visible;
	JB_File* L = ({
		JB_File* _X = JB__Platform_Logger;
		if ((!JB_File_SyntaxCast(_X))) {
			_X = JB_Platform__OpenLog();
			JB_SetRef(JB__Platform_Logger, _X);
		}
		 _X;
	});
	JB_File_SyntaxAppend(L, s);
	JB_File_SyntaxAppend(L, JB_LUB[42]);
}

JB_File* JB_Platform__OpenLog() {
	JB_File* rz = nil;
	JB_File* _tmPf1 = JB_Incr(JB_File__Logs());
	JB_String* _tmPf3 = JB_Incr(JB_App__AppName());
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf3, JB_LUB[375]));
	JB_Decr(_tmPf3);
	JB_File* _tmPf0 = JB_Incr(JB_File_SyntaxAccess(_tmPf1, _tmPf2));
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf2);
	JB_SetRef(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SetRef(JB__Platform_Logger, rz);
	JB_File_OpenBlank(rz);
	JB_SafeDecr(rz);
	return rz;
}

int JB_Platform__PointerBytes() {
	return JB_PointerSize() >> 3;
}

bool JB_Platform__Release() {
	return (!JB_IsDebug());
}


int SC_SCGame3D__Init_() {
	{
		JB_SetRef(SC__SCGame3D_Types, (JB_Dict_Constructor(nil)));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[1871], JB_LUB[1117]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[2002], JB_LUB[1263]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[2003], JB_LUB[1983]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[1756], JB_LUB[981]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[1758], JB_LUB[1749]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[1581], JB_LUB[688]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[1516], JB_LUB[654]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[1943], JB_LUB[903]));
		(JB_Dict_ValueSet(SC__SCGame3D_Types, JB_LUB[1930], JB_LUB[1203]));
	}
	;
	return 0;
}

int SC_SCGame3D__InitCode_() {
	return 0;
}

SCNode* SC_SCGame3D__Love(Message* node, SCNode* name_space, Message* ErrPlace) {
	if (JB_Rnd_SyntaxAccess((&JB__Rnd_Shared)) > (1.0f / 12.0f)) {
		JB_String* _tmPf1 = JB_Incr(JB_Msg_Render(node, nil));
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(_tmPf1, (5), JB_int__Max()));
		JB_Decr(_tmPf1);
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return SC__Comp_program;
}

bool SC_SCGame3D__NeedShader(JB_String* Name) {
	if ((JB_Str_Equals(Name, JB_LUB[1028], true)) or (JB_Str_Equals(Name, JB_LUB[1027], true))) {
		return true;
	}
	JB_Object* F = JB_Incr(JB_Dict_ValueStr(SC__Imp_Shaders, Name));
	if ((!JB_Object_Isa(F, &JB_StringData))) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[737]);
		JB_FS_AppendString(_fsf0, Name);
		JB_FS_AppendByte(_fsf0, '\n');
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Str_SyntaxExpect(_tmPf1);
		JB_Decr(_tmPf1);
		JB_Decr(F);
		return nil;
	}
	JB_Decr(F);
	return true;
}

SCNode* SC_SCGame3D__NeuModel(Message* node, SCNode* name_space, Message* ErrPlace) {
	Message* Inst = JB_Incr(SC_Msg_TranModel(node));
	if ((!Inst)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1092]);
		JB_Decr(Inst);
		return nil;
	}
	SCNode* M = JB_Incr(SC_Class__NewStruct(node, name_space, ErrPlace));
	if (JB_Object_FastIsa(M, &SCModuleData)) {
		JB_SetRef(((SCModule*)M)->Cls->IsModel, Inst);
	}
	JB_Decr(Inst);
	JB_SafeDecr(M);
	return M;
}


int SC__Init_() {
	{
		SC__SC_UniqueNum = 0;
	}
	;
	return 0;
}

int SC__InitCode_() {
	return 0;
}


void SC_Refs__DeclInit(Message* dcl, SCFunction* fn, bool IsJustAnArg) {
	int Basis = SC_Refs__RefBasis(dcl, true);
	if (SC_Func_doRefs(fn)) {
		if ((!Basis)) {
			return;
		}
	}
	 else {
		if ((!((bool)(Basis & kSC__Refs_kBasisDeSTRUCTable)))) {
			return;
		}
	}
	Message* arg = ((Message*)JB_Ring_Parent(dcl));
	Message* name = SC_Msg_DeclName(dcl);
	Message* LastPlace = nil;
	if (((bool)(Basis & kSC__Refs_kBasisObj))) {
		LastPlace = SC_Refs__LastUsedRefPlace(name, arg);
	}
	Message* Blocker = SC_Msg_CausesUnReachable(arg, arg, dcl, LastPlace);
	if (Basis == kSC__Refs_kBasisObj) {
		SC_Refs__RefIncr(name, dcl, IsJustAnArg);
	}
	if ((!(Blocker))) {
		Blocker = LastPlace;
	}
	SC_Refs__ReturnHandle(Blocker, arg, name, Basis);
	Message* Curr = dcl;
	Message* After = ((Message*)JB_Ring_FlatAfter(arg));
	while ((Curr != After) and (Curr != LastPlace)) {
		if (JB_Msg_EqualsSyx(Curr, JB_SyxArg, false)) {
			Message* Block2 = SC_Msg_CausesUnReachable(Curr, arg, nil, nil);
			if (Block2) {
				SC_Refs__ReturnHandle(Block2, nil, name, Basis);
			}
		}
		Curr = ((Message*)JB_Ring_FlatNext0(Curr));
	};
}

Message* SC_Refs__DecrMulti(SCDecl* d, Message* m) {
	Message* rz = nil;
	Message* Int = JB_int_Msg(d->C_Array);
	JB_SetRef(Int->Obj, JB_TypeInt->TypeNormal);
	rz = JB_Macro_CallFast(SC__Macros_MultiDecr, m, Int);
	Message* prm = ((Message*)JB_Tree_Second(rz));
	if (prm) {
		JB_SetRef(prm->Obj, SC__Comp_RefDecrMulti);
		JB_SetRef(rz->Obj, JB_TypeVoid);
	}
	return rz;
}

void SC_Refs__Destructable(Message* Blocker, Message* arg, Message* name) {
	SCDecl* type = SC_TypeOfExpr(name, nil, nil);
	if ((!JB_Object_Isa(type, &SCDeclData))) {
		return;
	}
	SCFunction* fn = type->Type->DestructorFunc;
	Message* FnMsg = SC_Refs__RefMsg0(fn->ExportName, fn);
	Message* brel = JB_Msg_Msg(((Message*)JB_Ring_Last(FnMsg)), JB_SyxBRel, JB_LUB[242]);
	Message* NewThg = JB_Msg_Msg(brel, JB_SyxThg, name->Name);
	JB_SetRef(NewThg->Obj, name->Obj);
	if (Blocker) {
		(JB_Ring_PrevSibSet(Blocker, FnMsg));
	}
	 else {
		JB_Tree_SyntaxAppend(arg, FnMsg);
	}
}

bool SC_Refs__ExitHitsOrGoesPast(Message* curr, Message* arg) {
	while (true) {
		curr = ((Message*)JB_Ring_Parent(curr));
		if (curr == arg) {
			return true;
		}
		if (SC_Msg_OperatorIsTmp(curr, JB_LUB[2048])) {
			return false;
		}
	};
}

bool SC_Refs__ExprNeedsTemping(Message* child, Message* name) {
	if (SC_Refs__RefBasis(name, false) != kSC__Refs_kBasisObj) {
		return nil;
	}
	{
		Message* s = child;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(child));
		while (((bool)(s)) and (s != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(s));
			if (SC_Msg_OperatorIsThing(s, name->Name)) {
				return true;
			}
			s = _N_f2;
		};
		;
	}
	;
	return false;
}

Message* SC_Refs__LastUsedRefPlace(Message* name, Message* arg) {
	SCDecl* d = SC_Msg_AsDecl(name);
	if ((!d)) {
		JB_Object_SyntaxExpect(nil);
		return nil;
	}
	SCClass* Type = d->Type;
	if (Type->NoEarlyFree) {
		return nil;
	}
	JB_String* s = name->Name;
	Message* found = name;
	{
		Message* c = arg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(arg));
		while (((bool)(c)) and (c != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(c));
			if (SC_Msg_OperatorIsThing(c, s)) {
				found = c;
			}
			c = _N_f2;
		};
		;
	}
	;
	Message* curr = found;
	while (found != arg) {
		curr = found;
		found = ((Message*)JB_Ring_Parent(found));
	};
	return SC_Msg_LastUsedFix(curr);
}

void SC_Refs__RC_CheckFuncAllocOK(SCFunction* self, Message* dot) {
	if ((!(JB_Msg_OperatorIn(dot, JB_SyxBra) and JB_Msg_OperatorIn(((Message*)JB_Ring_Parent(dot)), JB_SyxBra)))) {
		SCFunction* fn = SC_Msg_AsFunc(((Message*)JB_Ring_Last(dot)));
		if (fn) {
			if ((SC_Func_SyntaxIs(fn, kSC__FunctionType_Destructor)) and (!SC_Func_SyntaxIs(self, kSC__FunctionType_Destructor))) {
				if (true) {
					JB_Msg_SyntaxExpect(dot, JB_LUB[690]);
				}
			}
		}
	}
}

void SC_Refs__RC_DeclArg(SCDecl* AR, SCFunction* fn) {
	Message* dcl = SC_Decl_WriteNilDecl(AR);
	(JB_Ring_FirstSet(SC_Func_SourceArg(fn), dcl));
	SC_Refs__DeclInit(dcl, fn, true);
	JB_Tree_Remove(dcl);
}

void SC_Refs__RC_HandleDisappearing(SCFunction* fn, Message* msg, int Basis) {
	Message* ch = JB_Incr(SC_Msg_UseNonRefChangers(msg, false));
	if (((bool)(Basis & kSC__Refs_kBasisDeSTRUCTable)) or ((bool)(Basis & kSC__Refs_kBasisTempStruct))) {
		if ((!(((bool)JB_FreeIfDead(SC_Msg_IsSetIntoPlace(msg))) or ({
			Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Parent(ch)));
			bool _tmPf0 = SC_Msg_IsReturnOrRejoin(_tmPf1);
			JB_Decr(_tmPf1);
			 _tmPf0;
		})))) {
			JB_FreeIfDead(SC_Func__TypedTempMoveOut(msg, JB_LUB[0]));
		}
		JB_Decr(ch);
		return;
	}
	if ((!((Basis == kSC__Refs_kBasisObj) and ((!SC_Msg_IsProperty(msg)))))) {
		JB_Decr(ch);
		return;
	}
	Message* parent = JB_Incr(SC_Msg_NiceParent(ch));
	if ((!(((!JB_Msg_EqualsSyx(parent, JB_SyxArg, false))) and ((!(SC_Msg_IsReturnOrRejoin(parent) and JB_Tree_IsOnlyChild(ch))) and (!JB_FreeIfDead(SC_Msg_IsSetIntoPlace(ch))))))) {
		JB_Decr(parent);
		JB_Decr(ch);
		return;
	}
	if (SC_Msg_RefDisappears(ch)) {
		Message* fnc = JB_Incr(SC_NewFnc(JB_LUB[959]));
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(fnc)));
		JB_SetRef(_tmPf2->Obj, SC__Comp_RefFreeIfDead);
		JB_Decr(_tmPf2);
		JB_SetRef(fnc->Obj, SC__Comp_RefFreeIfDead->ReturnType);
		JB_FreeIfDead(SC_Msg_ReplaceWith(msg, fnc));
		Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Last(fnc)));
		JB_Decr(fnc);
		JB_Tree_SyntaxAppend(_tmPf3, msg);
		JB_Decr(_tmPf3);
		JB_Decr(parent);
		JB_Decr(ch);
		return;
	}
	if (JB_Msg_EqualsSyx(parent, JB_SyxPrm, false)) {
		if (parent->Obj == SC__Comp_TernaryFunc) {
			if (JB_FreeIfDead(SC_Msg_UseNonRefChangers(ch, false)) != JB_FreeIfDead(((Message*)JB_Ring_First(parent)))) {
				JB_Decr(parent);
				JB_Decr(ch);
				return;
			}
		}
		if (parent->Obj == SC__Comp_RefFreeIfDead) {
			JB_Decr(parent);
			JB_Decr(ch);
			return;
		}
	}
	JB_Decr(parent);
	Message* _tmPf4 = JB_Incr(SC_Msg_ParentPoint(ch));
	Message* pp = JB_Incr(_tmPf4);
	JB_Decr(_tmPf4);
	if (SC_Refs__RC_NeedsOwnBlock(ch, pp)) {
		JB_FreeIfDead(SC_Msg_TempIntoBlock(ch, pp));
	}
	 else {
		JB_FreeIfDead(SC_Func__TypedTempMoveOut(msg, JB_LUB[0]));
	}
	JB_Decr(ch);
	JB_Decr(pp);
}

void SC_Refs__RC_IgnoreReturn(Message* msg, bool DoRefs) {
	if (SC_Refs__RefBasis(msg, false) != kSC__Refs_kBasisObj) {
		return;
	}
	if (msg->Func == JB_SyxFunc) {
		Message* dcl = ((Message*)JB_Ring_Last(msg));
		if (dcl->Func == JB_SyxPrm) {
			SCFunction* fn = ((SCFunction*)dcl->Obj);
			if ((!(!SC_Func_SyntaxIs(fn, kSC__FunctionType_Constructor)))) {
				return;
			}
		}
	}
	Message* free_if_dead = SC_Refs__RefMsg0(JB_LUB[959], SC__Comp_RefFreeIfDead);
	SC_Msg_FuncWrap(msg, free_if_dead);
}

bool SC_Refs__RC_NeedsOwnBlock(Message* msg, Message* pp) {
	bool HitArg = false;
	{
		Message* ch = msg;
		while (ch) {
			if (JB_Msg_EqualsSyx(ch, JB_SyxArg, false)) {
				HitArg = true;
			}
			 else if (JB_Msg_EqualsSyx(ch, JB_SyxRel, false)) {
				Message* opp = ((Message*)JB_Tree_Second(ch));
				if (((JB_Msg_EqualsSyx(opp, JB_SyxOpp, false))) and ((JB_Msg_SyntaxEquals(opp, JB_LUB[1856], false)) or (JB_Msg_SyntaxEquals(opp, JB_LUB[1482], false)))) {
					return true;
				}
			}
			 else if (SC_Msg_OperatorIsTmp(ch, JB_LUB[2048])) {
				if ((!HitArg)) {
					return true;
				}
			}
			if (ch == pp) {
				break;
			}
			ch = ((Message*)JB_Ring_Parent(ch));
		};
		;
	}
	;
	return false;
}

void SC_Refs__RC_Rel(Message* rel) {
	Message* First = ((Message*)JB_Ring_First(rel));
	if ((!SC_Refs__RelNeedsRef(rel, First))) {
		return;
	}
	Message* result = SC_NewFnc(JB_LUB[969]);
	Message* lst = ((Message*)JB_Ring_Last(result));
	JB_Tree_SyntaxAppend(lst, First);
	JB_Tree_SyntaxAppend(lst, ((Message*)JB_Ring_Last(rel)));
	JB_SetRef(lst->Obj, SC__Comp_RefSetRef);
	JB_FreeIfDead(SC_Msg_ReplaceWith(rel, result));
}

void SC_Refs__RC_RelConstructor(Message* rel) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(rel)));
	Message* First = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	if ((!SC_Refs__RelNeedsRef(rel, First))) {
		JB_Decr(First);
		return;
	}
	JB_Decr(First);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Tree_Get(rel, 2)));
	Message* Last = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (SC_Msg_OperatorIsThing(Last, JB_LUB[1811])) {
		JB_Decr(Last);
		return;
	}
	if ((!JB_Msg_EqualsSyx(Last, JB_SyxThg, false))) {
		JB_SetRef(Last, SC_Func__TempMoveOut(Last, rel));
	}
	SC_Refs__RefIncr(Last, rel, false);
	JB_Decr(Last);
}

int SC_Refs__RefBasis(Message* msg, bool SetOnly) {
	return SC_Refs__RefBasisStruct(msg, SetOnly) & (~kSC__Refs_kBasisTempStruct);
}

int SC_Refs__RefBasisStruct(Message* msg, bool SetOnly) {
	SCDecl* type = SC_Msg_AsDecl(msg);
	if ((!JB_Object_Isa(type, &SCDeclData))) {
		type = SC_TypeOfExpr(msg, nil, nil);
		if ((!type)) {
			return 0;
		}
	}
	if (SC_Decl_IsReffable(type, SetOnly)) {
		if (SC_Decl_IsCArray(type)) {
			return kSC__Refs_kBasisCArray | kSC__Refs_kBasisObj;
		}
		if (SC_Decl_SyntaxIs(type, kSC__SCDeclInfo_Self) and SC_Func_SyntaxIs(SC__Func_CurrFunc, kSC__FunctionType_Constructor)) {
			return 0;
		}
		return kSC__Refs_kBasisObj;
	}
	if (SC_Decl_HasStruct(type)) {
		SCFunction* fn = type->Type->DestructorFunc;
		if (fn) {
			return kSC__Refs_kBasisDeSTRUCTable;
		}
		Message* p = SC_Msg_NiceParent(msg);
		if (SC_Msg_OperatorIsBRel(p, JB_LUB[242])) {
			return kSC__Refs_kBasisTempStruct;
		}
	}
	return 0;
}

Message* SC_Refs__RefClearMsg(Message* msg) {
	return SC_Refs__RefMsg(msg, JB_LUB[951], SC__Comp_RefClear);
}

void SC_Refs__RefDecr(Message* msg, Message* place, int Basis) {
	Message* OldPrev = ((Message*)JB_Ring_PrevSib(place));
	if (((bool)(OldPrev)) and (((JB_Msg_EqualsSyx(OldPrev, JB_SyxFunc, false))) and ((JB_Msg_SyntaxEquals(((Message*)JB_Ring_First(OldPrev)), JB_LUB[968], true))))) {
		place = OldPrev;
	}
	Message* what = nil;
	if (((bool)(Basis & kSC__Refs_kBasisCArray))) {
		what = SC_Refs__DecrMulti(SC_Msg_AsDecl(((Message*)JB_Ring_Parent(msg))), JB_Msg_Copy(msg, nil));
	}
	 else {
		what = SC_Refs__RefDecrMsg(msg);
	}
	if (JB_Msg_EqualsSyx(place, JB_SyxArg, false)) {
		JB_Tree_SyntaxAppend(place, what);
	}
	 else {
		(JB_Ring_PrevSibSet(place, what));
	}
}

Message* SC_Refs__RefDecrMsg(Message* msg) {
	return SC_Refs__RefMsg(msg, JB_LUB[952], SC__Comp_RefDecr);
}

Message* SC_Refs__RefDestructorMsg(Message* msg, SCFunction* fn) {
	return SC_Refs__RefMsg(msg, fn->ExportName, fn);
}

void SC_Refs__RefIncr(Message* msg, Message* Place, bool IsJustAnArg) {
	if (IsJustAnArg) {
		Place = ((Message*)JB_Ring_Parent(((Message*)JB_Ring_Parent(msg))));
	}
	 else {
		if (JB_Msg_EqualsSyx(Place, JB_SyxDecl, false)) {
			msg = ((Message*)JB_Ring_Last(Place));
			if (JB_Msg_EqualsSyx(msg, JB_SyxRel, false)) {
				msg = ((Message*)JB_Ring_Last(msg));
				if (SC_Msg_IsStatementExpr(msg)) {
					return SC_Msg_AvoidSafeDecr(msg);
				}
			}
		}
		if (SC_Msg_OperatorIsThing(SC_Msg_UnBra(msg), JB_LUB[1811])) {
			return;
		}
		Place = msg;
	}
	SC_Func_RefFunc(SC__Comp_RefIncr, msg, Place);
}

Message* SC_Refs__RefMsg(Message* msg, JB_String* name, SCFunction* func) {
	Message* rz = nil;
	rz = SC_NewFnc(name);
	Message* lst = ((Message*)JB_Ring_Last(rz));
	JB_Tree_SyntaxAppend(lst, JB_Msg_Copy(msg, nil));
	JB_SetRef(lst->Obj, func);
	rz->Position = -1;
	JB_SetRef(rz->Obj, func->ReturnType);
	if ((!rz->Obj)) {
		JB_SetRef(rz->Obj, JB_TypeVoid);
	}
	return rz;
}

Message* SC_Refs__RefMsg0(JB_String* name, SCFunction* func) {
	Message* rz = nil;
	rz = SC_NewFnc(name);
	rz->Position = -1;
	JB_SetRef(((Message*)JB_Tree_Second(rz))->Obj, func);
	return rz;
}

void SC_Refs__RefSafeDecr(Message* msg, Message* place) {
	if (JB_Msg_EqualsSyx(place, JB_SyxArg, false)) {
		Message* _tmPf0 = JB_Incr(SC_Refs__SafeDecrMsg(msg));
		JB_Tree_SyntaxAppend(place, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		Message* _tmPf1 = JB_Incr(SC_Refs__SafeDecrMsg(msg));
		(JB_Ring_PrevSibSet(place, _tmPf1));
		JB_Decr(_tmPf1);
	}
}

bool SC_Refs__RelNeedsRef(Message* msg, Message* first) {
	if (SC_Refs__RefBasis(first, true) != kSC__Refs_kBasisObj) {
		return nil;
	}
	if (JB_Msg_EqualsSyx(first, JB_SyxDot, false)) {
		return true;
	}
	return true;
}

void SC_Refs__ReturnHandle(Message* Blocker, Message* arg, Message* name, int Basis) {
	if (((bool)(Basis & kSC__Refs_kBasisDeSTRUCTable))) {
		if ((!Blocker)) {
			return SC_Refs__Destructable(Blocker, arg, name);
		}
		Message* ch = JB_Incr(((Message*)JB_Ring_First(Blocker)));
		if ((SC_Msg_IsReturnOrRejoin(Blocker) and SC_Msg_OperatorIsThing(ch, name->Name)) or (SC_Msg_OperatorIsThing(Blocker, name->Name))) {
			JB_Decr(ch);
			return;
		}
		if (((JB_Msg_SyntaxEquals(Blocker, JB_LUB[1899], false))) and (SC_Msg_DoesAnything(ch))) {
			Message* NeedsMoreTemping = JB_Incr(SC_Func__TempMoveOut(ch, Blocker));
			SC_Refs__Destructable(Blocker, arg, name);
			SC_Refs__ReturnTempMoveOutSub(ch, Blocker, NeedsMoreTemping);
			JB_Decr(NeedsMoreTemping);
		}
		 else {
			SC_Refs__Destructable(Blocker, arg, name);
		}
		JB_Decr(ch);
		return;
	}
	if (((bool)(Basis & kSC__Refs_kBasisTempStruct))) {
		return;
	}
	if ((!Blocker)) {
		SC_Refs__RefDecr(name, arg, Basis);
		return;
	}
	bool IsReturn = SC_Msg_IsReturnOrRejoin(Blocker);
	Message* Child = JB_Incr(((Message*)JB_Ring_First(Blocker)));
	if (Child) {
		if (IsReturn and (({
			Message* _tmPf1 = JB_Incr(SC_Msg_UnBraType(Child));
			bool _tmPf0 = SC_Msg_OperatorIsThing(_tmPf1, name->Name);
			JB_Decr(_tmPf1);
			 _tmPf0;
		}))) {
			SC_Refs__RefSafeDecr(name, Blocker);
			JB_Decr(Child);
			return;
		}
		if (IsReturn and SC_Refs__ExprNeedsTemping(Child, name)) {
			SC_Refs__ReturnTempMoveOut(Child, Blocker);
		}
	}
	JB_Decr(Child);
	SC_Refs__RefDecr(name, Blocker, Basis);
}

void SC_Refs__ReturnTempMoveOut(Message* Child, Message* blocker) {
	Message* Temp = JB_Incr(SC_Func__TempMoveOut(Child, blocker));
	SC_Refs__ReturnTempMoveOutSub(Child, blocker, Temp);
	JB_Decr(Temp);
}

void SC_Refs__ReturnTempMoveOutSub(Message* Child, Message* blocker, Message* temp) {
	if (SC_Refs__RefBasis(Child, false) == kSC__Refs_kBasisObj) {
		Message* _tmPf0 = JB_Incr(SC_Msg_ParentPoint(temp));
		SC_Refs__RefIncr(Child, _tmPf0, false);
		JB_Decr(_tmPf0);
		SC_Refs__RefSafeDecr(temp, blocker);
	}
}

Message* SC_Refs__SafeDecrMsg(Message* msg) {
	return SC_Refs__RefMsg(msg, JB_LUB[968], SC__Comp_RefSafeDecr);
}


SCNode* SC_SCSelector__Build(Message* node, SCNode* name_space, Message* ErrPlace) {
	Message* arg = JB_Incr(JB_Msg_Last(node, JB_SyxArg));
	Message* name = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	Message* items = JB_Incr(SC_SCSelector__FindItems(arg));
	Message* ActualNames = JB_Incr(JB_Msg_NeedSyx(items, JB_SyxList));
	if ((!(((bool)arg) and (((bool)name) and (((bool)items) and ((bool)ActualNames)))))) {
		JB_Decr(ActualNames);
		JB_Decr(items);
		JB_Decr(name);
		JB_Decr(arg);
		return nil;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
	bool IsClass = SC_SCSelector__HasClassStuff(arg);
	JB_String* type = JB_Incr(((JB_String*)JB_Ternary(IsClass, ((JB_String*)name->Name), ((JB_String*)JB_LUB[1932]))));
	Message* ClassCode = JB_Incr(SC_SCSelector__BuildClassCode(name->Name, type));
	if ((!ClassCode)) {
		JB_Decr(ClassCode);
		JB_Decr(type);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(ActualNames);
		JB_Decr(items);
		JB_Decr(name);
		JB_Decr(arg);
		return nil;
	}
	Message* _tmPf6 = JB_Incr(JB_Msg_FindNested(ClassCode, JB_SyxSThg, JB_LUB[358], true));
	Message* dot3 = JB_Incr(_tmPf6);
	JB_Decr(_tmPf6);
	JB_Tree_Remove(items);
	{
		Message* _Valuef4 = JB_Incr(((Message*)JB_Ring_First(ActualNames)));
		while (_Valuef4) {
			Message* _Nf3 = JB_Incr(((Message*)JB_Ring_NextSib(_Valuef4)));
			Message* line = JB_Incr(_Valuef4);
			Message* init = nil;
			if (JB_Msg_EqualsSyx(line, JB_SyxItem, false)) {
				Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_First(line)));
				JB_SetRef(line, _tmPf7);
				JB_Decr(_tmPf7);
				JB_SetRef(init, ((Message*)JB_Ring_NextSib(line)));
				if (JB_Msg_EqualsSyx(init, JB_SyxList, false)) {
					init->Func = JB_SyxPrm;
				}
			}
			if ((!JB_Msg_Expect(line, JB_SyxThg, nil))) {
				JB_Decr(init);
				JB_Decr(line);
				JB_Decr(_Nf3);
				break;
			}
			//using;
			MessagePosition _usingf1 = JB_Msg_SyntaxUsing(line);
			SC_SCSelector__DeclareOneSel(line->Name, type, dot3);
			SC_SCSelector__LoadOneSel(line->Name, name->Name, dot3, init);
			JB_Decr(line);
			JB_Decr(init);
			JB_MsgPos_SyntaxUsingComplete((&_usingf1));
			JB_SetRef(_Valuef4, _Nf3);
			JB_Decr(_Nf3);
			JB_MsgPos_Destructor((&_usingf1));
		};
		JB_Decr(_Valuef4);
		;
		JB_Decr(items);
	}
	;
	{
		Message* ch = JB_Incr(((Message*)JB_Ring_Last(arg)));
		while (ch) {
			Message* _tmPf8 = JB_Incr(((Message*)JB_Tree_Get(ClassCode, -1)));
			(JB_Ring_FirstSet(_tmPf8, ch));
			JB_Decr(_tmPf8);
			JB_SetRef(ch, ((Message*)JB_Ring_PrevSib(ch)));
		};
		JB_Decr(ch);
		;
		JB_Decr(type);
		JB_Decr(ActualNames);
		JB_Decr(name);
	}
	;
	JB_Decr(arg);
	if ((!IsClass)) {
		Message* _tmPf9 = JB_Incr(((Message*)JB_Ring_Parent(dot3)));
		JB_SetRef(ClassCode, ((Message*)JB_Ring_Parent(_tmPf9)));
		JB_Decr(_tmPf9);
	}
	JB_Tree_Remove(dot3);
	JB_Decr(dot3);
	JB_FreeIfDead(SC_Base_CollectSub(name_space, ClassCode));
	JB_Decr(ClassCode);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return nil;
}

Message* SC_SCSelector__BuildClassCode(JB_String* name, JB_String* type) {
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[77]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendString(_fsf0, JB_LUB[129]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendString(_fsf0, JB_LUB[45]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendString(_fsf0, JB_LUB[44]);
	JB_FS_AppendString(_fsf0, type);
	JB_FS_AppendString(_fsf0, JB_LUB[2072]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendString(_fsf0, JB_LUB[362]);
	JB_FS_AppendString(_fsf0, type);
	JB_FS_AppendString(_fsf0, JB_LUB[376]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendString(_fsf0, JB_LUB[363]);
	JB_FS_AppendString(_fsf0, type);
	JB_FS_AppendString(_fsf0, JB_LUB[2073]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendString(_fsf0, JB_LUB[364]);
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	Message* _tmPf1 = JB_Incr(JB_Str_Parse((_tmPf2), JB_SyxArg, true));
	JB_Decr(_tmPf2);
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(_tmPf1)));
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

void SC_SCSelector__DeclareOneSel(JB_String* sel_name, JB_String* type, Message* place) {
	Message* _tmPf0 = JB_Incr(SC_NewDeclWithStrStr(type, sel_name));
	(JB_Ring_PrevSibSet(place, _tmPf0));
	JB_Decr(_tmPf0);
}

Message* SC_SCSelector__FindItems(Message* arg) {
	return JB_Msg_FindSyxName(arg, JB_SyxTmp, JB_LUB[1733], true);
}

bool SC_SCSelector__HasClassStuff(Message* self) {
	bool rz = false;
	{
		Message* s = JB_Incr(((Message*)JB_Ring_First(self)));
		while (s) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(s)));
			if ((!((SC_Msg_OperatorIsTmp(s, JB_LUB[1799])) or (SC_Msg_OperatorIsTmp(s, JB_LUB[1733]))))) {
				if (SC_Msg_OperatorIsTmp(s, JB_LUB[1564])) {
					JB_Msg_SyntaxExpect(s, JB_LUB[1211]);
					JB_Decr(_Nf1);
					JB_Decr(s);
					return nil;
				}
				rz = true;
			}
			JB_SetRef(s, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(s);
		;
	}
	;
	return rz;
}

void SC_SCSelector__LoadOneSel(JB_String* sel_name, JB_String* module_name, Message* LoaderPlace, Message* Prms) {
	JB_Incr(Prms);
	Message* Line = JB_Incr((JB_Syx_Msg(JB_SyxSDot, JB_LUB[1444])));
	Message* _tmPf5 = ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		Message* _tmPf6 = ({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[242])));
			Message* _tmPf7 = ({
				Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxDot, sel_name)));
				Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxThg, module_name));
				JB_Tree_SyntaxAppend(__imPf2, (_tmPf8));
				JB_Decr(_tmPf8);
				Message* _tmPf9 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
				JB_Tree_SyntaxAppend(__imPf2, (_tmPf9));
				JB_Decr(_tmPf9);
				JB_SafeDecr(nil);
				 __imPf2;
			});
			JB_Tree_SyntaxAppend(__imPf1, _tmPf7);
			JB_Decr(_tmPf7);
			JB_SafeDecr(nil);
			 __imPf1;
		});
		JB_Tree_SyntaxAppend(__imPf0, _tmPf6);
		JB_Decr(_tmPf6);
		Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxStr, sel_name));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf10));
		JB_Decr(_tmPf10);
		JB_SafeDecr(nil);
		 __imPf0;
	});
	JB_Tree_SyntaxAppend(Line, _tmPf5);
	JB_Decr(_tmPf5);
	(JB_Ring_NextSibSet(LoaderPlace, Line));
	if (Prms) {
		if ((!JB_Msg_EqualsSyx(Prms, JB_SyxPrm, false))) {
			JB_SetRef(Prms, ({
				Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
				JB_Tree_SyntaxAppend(__imPf3, Prms);
				JB_SafeDecr(__imPf3);
				 __imPf3;
			}));
		}
		Message* Line2 = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1933])));
		Message* _tmPf11 = ({
			Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxDot, sel_name)));
			Message* _tmPf12 = JB_Incr(JB_Syx_Msg(JB_SyxThg, module_name));
			JB_Tree_SyntaxAppend(__imPf4, (_tmPf12));
			JB_Decr(_tmPf12);
			Message* _tmPf13 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
			JB_Tree_SyntaxAppend(__imPf4, (_tmPf13));
			JB_Decr(_tmPf13);
			JB_SafeDecr(nil);
			 __imPf4;
		});
		JB_Tree_SyntaxAppend(Line2, _tmPf11);
		JB_Decr(_tmPf11);
		JB_Tree_SyntaxAppend(Line2, Prms);
		Message* _tmPf14 = JB_Incr(((Message*)JB_Ring_Parent(Line)));
		JB_Tree_SyntaxAppend(_tmPf14, Line2);
		JB_Decr(Line2);
		JB_Decr(_tmPf14);
	}
	JB_Decr(Line);
	JB_Decr(Prms);
}

SCNode* SC_SCSelector__Neu(Message* node, SCNode* name_space, Message* ErrPlace) {
	JB_FreeIfDead(SC_SCSelector__Build(node, name_space, ErrPlace));
	JB_SetRef(node->Name, JB_LUB[1702]);
	return SC__Comp_program;
}


int SC_SCStrings__Init_() {
	{
	}
	;
	return 0;
}

int SC_SCStrings__InitCode_() {
	return 0;
}


void SC_SCTasks__CollectAll() {
	SCClass* T = JB_TypeTask;
	if ((!T)) {
		return;
	}
	{
		Array* _LoopSrcf2 = SC__Comp_TasksTodo;
		int _if0 = 0;
		while (true) {
			Message* ch = ((Message*)JB_Array_Value(_LoopSrcf2, _if0));
			if (ch == nil) {
				break;
			}
			SCNode* P = ((SCNode*)ch->Obj);
			if (P == SC__Comp_program) {
				P = T->Modul;
			}
			 else if (JB_Object_FastIsa(P, &SCClassData)) {
				P = ((SCClass*)((SCClass*)P)->Modul);
			}
			SC_SCTasks__NewTaskActual(ch, P);
			_if0++;
		};
	};
}

int SC_SCTasks__Init_() {
	{
		JB_SetRef(SC__SCTasks_tmp, JB_Msg_ConstructorEmpty(nil));
		JB_SetRef(SC__SCTasks_TaskMacro, JB_Macro_ConstructorStr(nil, (JB_LUB[11])));
	}
	;
	return 0;
}

int SC_SCTasks__InitCode_() {
	return 0;
}

SCNode* SC_SCTasks__NewTask(Message* node, SCNode* name_space, Message* ErrPlace) {
	JB_SetRef(node->Obj, name_space);
	JB_Array_SyntaxAppend(SC__Comp_TasksTodo, node);
	return SC__Comp_program;
}

void SC_SCTasks__NewTaskActual(Message* node, SCNode* name_space) {
	Message* name = JB_Msg_NeedSyxOK(node, JB_SyxThg, JB_SyxDot);
	if ((!name)) {
		return;
	}
	Message* fields = ((Message*)JB_Ring_NextSib(name));
	if ((JB_Msg_EqualsSyx(fields, JB_SyxBra, false)) or (JB_Msg_EqualsSyx(fields, JB_SyxList, false))) {
		fields->Func = JB_SyxBra;
	}
	 else {
		fields = JB_Syx_Msg(JB_SyxBra, JB_LUB[0]);
		(JB_Ring_NextSibSet(name, fields));
	}
	Message* arg = ((Message*)JB_Ring_NextSib(fields));
	if ((!JB_Msg_Expect(arg, JB_SyxArg, nil))) {
		arg = JB_Msg_Msg(node, JB_SyxArg, JB_LUB[0]);
	}
	Message* Supper = ((Message*)JB_Ring_First(fields));
	JB_Tree_TakeAllFrom(SC__SCTasks_tmp, fields);
	int level = 2;
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
	if ((JB_Msg_EqualsSyx(Supper, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(Supper, JB_SyxDot, false))) {
		JB_Tree_SyntaxAppend(fields, Supper);
		level = 3;
	}
	 else {
		JB_Msg_AppendSyx(fields, JB_SyxSDot, JB_LUB[1726]);
	}
	SC_Msg_BuildTask(arg, fields, node, level);
	JB_Tree_TakeAllFrom(arg, SC__SCTasks_tmp);
	JB_SetRef(node->Name, JB_LUB[1903]);
	if (JB_Msg_EqualsSyx(name, JB_SyxDot, false)) {
		SCModule* P = SC_Base_FindModuleMsg(name_space, ((Message*)JB_Ring_First(name)), 0);
		if (P) {
			name_space = P;
		}
	}
	SCModule* task = ((SCModule*)SC_Class__NeuRole(node, name_space, node));
	if (task) {
		JB_Array_SyntaxAppend(SC__Comp_TasksList, task->Cls);
		task->Cls->IsRole = level;
		task->Parent = name_space;
		SC_Base_TryAdd(name_space, node, task, task->Name);
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}


SCNode* SC_SCThe__NewInsertion(Message* node, SCNode* name_space, Message* ErrPlace) {
	Message* name = ((Message*)JB_Tree_Get(node, 0));
	if (JB_Msg_EqualsSyx(name, JB_SyxArg, false)) {
		name = JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[1683]);
		(JB_Ring_FirstSet(node, name));
	}
	if ((!JB_Msg_Expect(name, JB_SyxThg, nil))) {
		return nil;
	}
	if ((!((JB_Msg_SyntaxEquals(name, JB_LUB[1994], false)) or (JB_Msg_SyntaxEquals(name, JB_LUB[1683], false))))) {
		JB_Msg_SyntaxExpect(name, nil);
		return nil;
	}
	Dictionary* d = ({
		Dictionary* _X = ((Dictionary*)JB_Dict_ValueStr(SC__Comp_AdjDicts, name->Name));
		if ((!_X)) {
			_X = JB_Dict_Constructor(nil);
			(JB_Dict_ValueSet(SC__Comp_AdjDicts, name->Name, _X));
		}
		 _X;
	});
	{
		Message* _LoopSrcf2 = JB_Msg_NextOf(name, JB_SyxArg);
		Message* line = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(line));
			JB_Msg_Expect(line, JB_SyxTmp, nil);
			Message* value = JB_Msg_NeedFirst(line);
			JB_Msg_ExpectLast(value, JB_LUB[0]);
			Macro* old = ((Macro*)JB_Dict_ValueStr(d, line->Name));
			if (old) {
				if (true) {
					JB_Msg_SyntaxExpect(line, JB_kNameConf);
				}
			}
			 else {
				(JB_Dict_ValueSet(d, line->Name, JB_Macro_ConstructorMsg(nil, value)));
			}
			line = _Nf1;
		};
		;
	}
	;
	JB_Tree_Remove(node);
	return SC__Comp_program;
}


void SC_SC_API__DelayedClassAPI(Message* node, JB_String* proj) {
	if (JB_Msg_SyntaxEquals(node, JB_LUB[1483], false)) {
		SC_SC_API__NewAPI(node, JB_LUB[0], SC__Comp_program, proj);
		return;
	}
	Message* name = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	if ((!name)) {
		JB_Decr(name);
		return;
	}
	Message* _tmPf2 = JB_Incr(JB_Msg_NextOf(name, JB_SyxBra));
	Message* partname = JB_Incr(JB_Msg_NeedSyx(_tmPf2, JB_SyxThg));
	JB_Decr(_tmPf2);
	if ((!partname)) {
		JB_Decr(partname);
		JB_Decr(name);
		return;
	}
	Message* arg = JB_Incr(JB_Msg_Last(node, JB_SyxArg));
	if ((!arg)) {
		JB_Decr(arg);
		JB_Decr(partname);
		JB_Decr(name);
		return;
	}
	SCClass* cls = JB_Incr(SC_Comp__SyntaxAccess(name));
	JB_Decr(name);
	if ((!cls)) {
		JB_Decr(cls);
		JB_Decr(arg);
		JB_Decr(partname);
		return;
	}
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Parent(partname)));
	JB_Tree_Remove(_tmPf3);
	{
		Message* ch = JB_Incr(((Message*)JB_Ring_First(arg)));
		while (ch) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
			if ((!JB_Msg_Expect(ch, JB_SyxTmp, JB_LUB[1483]))) {
				JB_Decr(_Nf1);
				JB_Decr(ch);
				JB_Decr(cls);
				JB_Decr(arg);
				JB_Decr(partname);
				return;
			}
			SC_SC_API__NewAPI(ch, partname->Name, cls, proj);
			JB_SetRef(ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(ch);
		;
		JB_Decr(_tmPf3);
	}
	;
	JB_Decr(partname);
	JB_Decr(arg);
	JB_Decr(cls);
}

void SC_SC_API__NewAPI(Message* api, JB_String* part, SCNode* parent, JB_String* proj) {
	JB_Incr(proj);
	JB_Incr(part);
	JB_SetRef(proj, JB_Str_OperatorPlus(proj, JB_LUB[1426]));
	Message* name = JB_Incr(JB_Msg_NeedSyx(api, JB_SyxThg));
	if ((!name)) {
		JB_Decr(part);
		JB_Decr(proj);
		JB_Decr(name);
		return;
	}
	Message* arg = JB_Incr(JB_Msg_Last(api, JB_SyxArg));
	if ((!arg)) {
		JB_Decr(part);
		JB_Decr(proj);
		JB_Decr(arg);
		JB_Decr(name);
		return;
	}
	Message* cpp = JB_Incr(JB_Msg_FindSyxName(arg, JB_SyxTmp, JB_LUB[1574], false));
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(arg);
		if ((!cpp)) {
			JB_SetRef(cpp, (JB_Syx_Msg(JB_SyxTmp, JB_LUB[1574])));
			(JB_Ring_FirstSet(arg, cpp));
		}
		if (JB_Str_Exists(part)) {
			JB_SetRef(part, JB_Str_OperatorPlus(part, JB_LUB[1426]));
		}
		JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(part, name->Name));
		JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(proj, _tmPf3));
		JB_Decr(_tmPf3);
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, _tmPf2));
		JB_Decr(_tmPf2);
		JB_Tree_SyntaxAppend(cpp, (_tmPf1));
		JB_Decr(_tmPf1);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(name);
	JB_Decr(arg);
	JB_Decr(cpp);
	JB_Decr(proj);
	JB_Decr(part);
	SCNode* Fn = JB_Incr(SC_Func__NewFunc(api, parent, api));
	if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
		(SC_SCObject_IsVisibleSet(((SCFunction*)Fn), true));
		JB_Array_SyntaxAppend(SC__Comp_API_Funcs, ((SCFunction*)Fn));
	}
	JB_Decr(Fn);
}

SCNode* SC_SC_API__NewExportAPI(Message* node, SCNode* name_space, Message* ErrPlace) {
	if (name_space != SC__Comp_program) {
		JB_Msg_SyntaxExpect(ErrPlace, nil);
		return nil;
	}
	SC_SC_API__NewExportAPISub(node, name_space);
	JB_Tree_Remove(node);
	return SC__Comp_program;
}

void SC_SC_API__NewExportAPISub(Message* node, SCObject* parent) {
	Message* name = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	if ((!name)) {
		JB_Decr(name);
		return;
	}
	Message* arg = JB_Incr(JB_Msg_NextOf(name, JB_SyxArg));
	JB_Decr(name);
	if ((!arg)) {
		JB_Decr(arg);
		return;
	}
	Message* lib_tmp = JB_Incr(JB_Msg_FindSyxName(arg, JB_SyxTmp, JB_LUB[1752], true));
	if ((!lib_tmp)) {
		JB_Decr(lib_tmp);
		JB_Decr(arg);
		return;
	}
	Message* lib_name = JB_Incr(JB_Msg_NeedSyx(lib_tmp, JB_SyxStr));
	JB_Decr(lib_tmp);
	if ((!lib_name)) {
		JB_Decr(lib_name);
		JB_Decr(arg);
		return;
	}
	if ((!(JB_Msg_SyntaxEquals(lib_name, SC__Comp_ProjectName, true)))) {
		JB_Decr(lib_name);
		JB_Decr(arg);
		return;
	}
	{
		Message* C = JB_Incr(((Message*)JB_Ring_First(arg)));
		while (C) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(C)));
			if ((JB_Msg_SyntaxEquals(C, JB_LUB[1483], false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[1546], false))) {
				JB_SetRef(C->Obj, parent);
				JB_Array_SyntaxAppend(SC__Comp_API_List, C);
			}
			 else if ((JB_Msg_SyntaxEquals(C, JB_LUB[1640], false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[1752], false))) {
				if ((!JB_FreeIfDead(JB_Msg_NeedSyx(C, JB_SyxStr)))) {
					JB_Decr(_Nf1);
					JB_Decr(C);
					JB_Decr(arg);
					return;
				}
			}
			 else {
				if (true) {
					JB_Msg_SyntaxExpect(C, nil);
				}
			}
			JB_SetRef(C, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(C);
		;
		JB_Decr(lib_name);
	}
	;
	JB_Decr(arg);
	JB_SetRef(SC__Comp_API_Place, node);
}


bool SC_Errors__AlreadyIgnored(Message* F) {
	if ((!F)) {
		return nil;
	}
	SCFunction* _tmPf0 = JB_Incr(SC_Msg_MsgOwningFunc(F));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	Message* RipRoot = JB_Incr(SC_Func_SourceArg(_tmPf0));
	{
		Message* Curr = JB_Incr(F);
		while (Curr) {
			if (((JB_Msg_EqualsSyx(Curr, JB_SyxArg, false))) and ((bool)(((Message*)JB_FreeIfDead(({
				JB_String* _tmPf3 = JB_Incr(JB_Obj_DictName(Curr));
				Message* _tmPf2 = JB_Incr(((Message*)JB_Dict_ValueStr(SC__Errors_IgnoredBranches, _tmPf3)));
				JB_Decr(_tmPf3);
				JB_SafeDecr(_tmPf2);
				 _tmPf2;
			})))))) {
				JB_Decr(Curr);
				JB_Decr(RipRoot);
				return true;
			}
			if (Curr == RipRoot) {
				JB_Decr(Curr);
				JB_Decr(RipRoot);
				return nil;
			}
			JB_SetRef(Curr, ((Message*)JB_Ring_Parent(Curr)));
		};
		JB_Decr(Curr);
		;
		JB_Decr(_tmPf0);
	}
	;
	JB_Decr(RipRoot);
	return false;
}

int SC_Errors__Init_() {
	{
		JB_SetRef(SC__Errors_IgnoredBranches, JB_Dict_Constructor(nil));
	}
	;
	return 0;
}

int SC_Errors__InitCode_() {
	return 0;
}

bool SC_Errors__SyntaxAccess(JB_Error* Err) {
	if (JB_Err_SyntaxIs(Err, kJB__ErrorFlags_DontStrip)) {
		return true;
	}
	if ((!Err->Node) or JB_Err_IsWarning(Err)) {
		return true;
	}
	Message* A = JB_Incr(JB_Msg_Ancestor(Err->Node, JB_SyxArg));
	if (A) {
		if (SC__Options_HideMultipleErrors) {
			if (SC_Errors__AlreadyIgnored(A)) {
				JB_Decr(A);
				return nil;
			}
		}
		JB_String* _tmPf0 = JB_Incr(JB_Obj_DictName(A));
		(JB_Dict_ValueSet(SC__Errors_IgnoredBranches, _tmPf0, A));
		JB_Decr(_tmPf0);
	}
	JB_Decr(A);
	return true;
}


void SC_Sav__BugWorkAround() {
	//visible;
	FP_SaverLoadClass whatever = nil;
}

void SC_Sav__TestSaver() {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	Array* R = JB_Incr(JB_Array_Constructor0(nil));
	int n = 5;
	{
		int i = 0;
		while (i < n) {
			SavingTest* s = JB_Incr(SC_SavingTest_Constructor(nil, i));
			if ((!i)) {
				JB_SetRef(s->Name, JB_LUB[0]);
			}
			JB_Array_SyntaxAppend(R, s);
			JB_Array_SyntaxAppend(R, s);
			JB_Decr(s);
			i++;
		};
	}
	;
	JB_Array_SyntaxAppend(R, JB_LUB[1689]);
	JB_String* path = JB_Incr(SC_Ext__TmpBase(JB_LUB[1210]));
	JB_File* F = JB_Incr(JB_Str_AsFile(path));
	JB_Decr(path);
	JB_Sav_SaveToFile(R, F);
	Message* _tmPf2 = JB_Incr(JB_File_Parse(F, 16777216, false));
	JB_Decr(F);
	JB_Object* R2 = JB_Incr(JB_Msg_RestoreLoad(_tmPf2));
	if (JB_Object_Isa(R2, &ArrayData)) {
		JB_FreeIfDead(JB_Array_Pop(R));
		JB_Object* last = JB_Incr(JB_Array_Pop(((Array*)R2)));
		if ((!(((bool)last) and ((JB_Object_Isa(last, &JB_StringData)) and ((JB_Str_Equals(((JB_String*)last), JB_LUB[1689], false))))))) {
			JB_Object_SyntaxExpect(nil);
			JB_Decr(last);
			JB_Decr(R2);
			JB_Decr(_tmPf2);
			JB_Decr(R);
			return;
		}
		JB_Decr(last);
		if (JB_Array_Size(((Array*)R2)) != JB_Array_Size(R)) {
			JB_Object_SyntaxExpect(nil);
			JB_Decr(R2);
			JB_Decr(_tmPf2);
			JB_Decr(R);
			return;
		}
		{
			int i = 0;
			while (i < n) {
				JB_Object* _tmPf3 = JB_Incr(JB_Array_Value(R, i));
				JB_Object* _tmPf4 = JB_Incr(JB_Array_Value(((Array*)R2), i));
				if ((!SC_SavingTest__IsEqual(_tmPf3, _tmPf4))) {
					JB_Object_SyntaxExpect(nil);
					JB_Decr(_tmPf4);
					JB_Decr(_tmPf3);
					JB_Decr(R2);
					JB_Decr(_tmPf2);
					JB_Decr(R);
					return;
				}
				JB_Decr(_tmPf3);
				JB_Decr(_tmPf4);
				i++;
			};
		};
	}
	 else {
		if (true) {
			JB_Str_SyntaxExpect(JB_LUB[1206]);
		}
	}
	JB_Decr(R);
	JB_Decr(R2);
	JB_Decr(_tmPf2);
}


int SC_SC_Targets__Init_() {
	{
		JB_SetRef(SC__SC_Targets_Items, JB_Dict_Constructor(nil));
	}
	;
	return 0;
}

int SC_SC_Targets__InitCode_() {
	return 0;
}

bool SC_SC_Targets__SyntaxAccess(JB_String* name) {
	JB_String* _tmPf0 = JB_Incr(((JB_String*)JB_Dict_ValueLower(SC__SC_Targets_Items, name)));
	bool _tmPf1 = JB_Str_Yes(_tmPf0);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

void SC_SC_Targets__SyntaxAccessSet(JB_String* name, bool Value) {
	JB_String* _tmPf0 = JB_Incr(JB_bool_Render0(Value));
	(JB_Dict_ValueLowerSet(SC__SC_Targets_Items, name, _tmPf0));
	JB_Decr(_tmPf0);
}


ErrorInt JB_Main() {
	(JB_App__ConfigureSet(JB___AppConfString));
	//visible;
	SC_Comp__SetupEnv();
	SC_Comp__MiniTests();
	SC_Comp__Main();
	SC_Comp__PrintResults();
	return 0;
}


void SC_Crkt__CollectString(Message* m) {
	MessageID** p = ((MessageID**)JB_Dict_MakePlace(SC__Crkt_Table2, m->Name));
	MessageID* i = ((MessageID*)((*p)));
	if (i == nil) {
		i = SC_Crkt__NewID(m->Name);
		JB_SetRef((*p), i);
	}
	JB_SetRef(m->Name, i);
}

void SC_Crkt__Correct(JB_File* where) {
	if (SC__Options_PrintCompileString) {
		JB_PrintLine(where);
	}
	bool HasAnything = false;
	Message* m = JB_Incr(JB_File_Parse(where, 4194304, true));
	if (m) {
		HasAnything = JB_Ring_HasChildren(m);
		Dictionary* _tmPf0 = JB_Incr(JB_Msg_Dict(m, true));
		SC_Crkt__MergeTable(m, _tmPf0);
		JB_Decr(_tmPf0);
	}
	SC_Crkt__Sort(HasAnything);
	FastString* fs = JB_Incr(JB_Str_Out(where, true));
	if (fs) {
		SC_Crkt__WriteTable(fs);
	}
	JB_Decr(fs);
	JB_Decr(m);
}

void SC_Crkt__CorrectConsts() {
	{
		Array* _LoopSrcf2 = SC__Comp_DeclConstants;
		int _if0 = 0;
		while (true) {
			SCDecl* d = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (d == nil) {
				break;
			}
			Message* def = d->Default;
			if (def) {
				SC_Crkt__CollectString(def);
			}
			_if0++;
		};
	};
}

int SC_Crkt__Count() {
	return JB_Array_Size(SC__Crkt_List);
}

int SC_Crkt__Init_() {
	{
		JB_SetRef(SC__Crkt_Table2, JB_Dict_Constructor(nil));
		JB_SetRef(SC__Crkt_List, JB_Array_Constructor0(nil));
		SC__Crkt_TotalSize = 0;
	}
	;
	return 0;
}

int SC_Crkt__InitCode_() {
	return 0;
}

void SC_Crkt__MergeTable(Message* disk, Dictionary* D3) {
	//visible;
	int NextID = 0;
	Message* dl = ((Message*)JB_Ring_Last(disk));
	if (dl) {
		NextID = (dl->Position + 1);
	}
	if (JB_Ring_HasChildren(disk)) {
		{
			Array* _LoopSrcf2 = SC__Crkt_List;
			int _if0 = 0;
			while (true) {
				MessageID* s = ((MessageID*)JB_Array_Value(_LoopSrcf2, _if0));
				if (s == nil) {
					break;
				}
				SC_Crkt__UseID(s, ((Message*)JB_Dict_ValueStr(D3, s)));
				_if0++;
			};
		};
	}
	{
		Array* _LoopSrcf5 = SC__Crkt_List;
		int _if3 = 0;
		while (true) {
			MessageID* s = ((MessageID*)JB_Array_Value(_LoopSrcf5, _if3));
			if (s == nil) {
				break;
			}
			if ((s->Func != JB_SyxNum) and (!SC_Crkt__UseID(s, ((Message*)JB_Ring_First(disk))))) {
				s->ID = NextID++;
			}
			_if3++;
		};
	};
}

MessageID* SC_Crkt__NewID(JB_String* name) {
	MessageID* rz = JB_Incr(((MessageID*)nil));
	JB_SetRef(rz, JB_ID_Constructor(nil, name, JB_SyxStr, SC_Crkt__Count()));
	JB_Array_SyntaxAppend(SC__Crkt_List, rz);
	SC__Crkt_TotalSize = (SC__Crkt_TotalSize + (JB_Str_Length(name) + 1));
	JB_SafeDecr(rz);
	return rz;
}

void SC_Crkt__Sort(bool IDOrder) {
	if (IDOrder) {
		JB_Array_Sort(SC__Crkt_List, (&JB_ID__IDSorter), false);
	}
	 else {
		JB_Array_Sort(SC__Crkt_List, (&JB_Str__Sorter), false);
		{
			Array* _LoopSrcf2 = SC__Crkt_List;
			int _if0 = 0;
			while (true) {
				MessageID* s = ((MessageID*)JB_Array_Value(_LoopSrcf2, _if0));
				if (s == nil) {
					break;
				}
				int i = _if0;
				s->ID = i;
				_if0++;
			};
		};
	}
}

bool SC_Crkt__UseID(MessageID* s, Message* old) {
	if ((!old)) {
		return nil;
	}
	int OldID = old->Position;
	if (OldID >= SC_Crkt__Count()) {
		return nil;
	}
	if ((!JB_Msg_Length(old)) != (!OldID)) {
		JB_Msg_SyntaxExpect(old, JB_LUB[938]);
		return nil;
	}
	s->ID = OldID;
	s->Func = JB_SyxNum;
	JB_Tree_Remove(old);
	return true;
}

void SC_Crkt__WriteTable(FastString* fs) {
	{
		Array* _LoopSrcf2 = SC__Crkt_List;
		int _if0 = 0;
		while (true) {
			MessageID* s = ((MessageID*)JB_Array_Value(_LoopSrcf2, _if0));
			if (s == nil) {
				break;
			}
			JB_FS_AppendQuotedEscape(fs, s);
			JB_FS_AppendByte(fs, '\n');
			_if0++;
		};
	};
}


int JB_Terminal__Init_() {
	{
		JB_SetRef(JB__Terminal_Screen, JB_Array_Constructor0(nil));
		JB__Terminal_LastDisplay = 0;
	}
	;
	return 0;
}

int JB_Terminal__InitCode_() {
	return 0;
}


void SC_TextAssembler__Assemble(Message* msg) {
	{
		Message* ch = ((Message*)JB_Ring_First(msg));
		while (ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(ch));
			if (SC_Msg_OperatorIsTmp(ch, JB_LUB[1495])) {
				SC_TextAssembler__TextFunc(ch);
			}
			 else if (SC_Msg_OperatorIsTmp(ch, JB_LUB[1584])) {
				SC_TextAssembler__TextData(ch);
			}
			ch = _Nf1;
		};
		;
	};
}

int SC_TextAssembler__Init_() {
	{
	}
	;
	return 0;
}

int SC_TextAssembler__InitCode_() {
	return 0;
}

void SC_TextAssembler__TextData(Message* msg) {
}

bool SC_TextAssembler__TextFunc(Message* msg) {
	SCFunction* fn = JB_Incr(SC_Func_Constructor(nil, nil));
	JB_SetRef(fn->Source, msg);
	SC_flat_InitState((&SC__TreeAssembler_StdState), fn);
	bool arg = SC_flat_TextFuncSub((&SC__TreeAssembler_StdState), msg);
	if (arg) {
		(JB_Dict_ValueSet(SC__Comp_ExportNames, fn->ExportName, fn));
	}
	JB_Decr(fn);
	SC_flat_FinishASM((&SC__TreeAssembler_StdState));
	JB_Dict_Dispose(SC__TextAssembler_LabelsToDo);
	return false;
}


bool SC_Ext__AllowedThisFile(JB_String* name) {
	if ((!SC__Options_ProjectIsMiniLib)) {
		return true;
	}
	if ((JB_Str_Equals(name, JB_LUB[965], true)) or ((JB_Str_Equals(name, JB_LUB[967], true)) or ((JB_Str_Equals(name, JB_LUB[975], true)) or ((JB_Str_Equals(name, JB_LUB[955], true)) or ((JB_Str_Equals(name, JB_LUB[954], true)) or (JB_Str_Equals(name, JB_LUB[950], true))))))) {
		return false;
	}
	return true;
}

bool SC_Ext__BackupCompiler() {
	JB_String* _tmPf0 = JB_Incr(SC_Ext__ProductPath(false));
	JB_File* Product = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_Incr(SC_Ext__BackupPath());
	JB_File* B = JB_Incr(JB_Str_AsFile(_tmPf1));
	JB_Decr(_tmPf1);
	JB_Str_MakeEntirePath(B, true);
	JB_File* _tmPf2 = JB_Incr(JB_File_SyntaxAccess(B, JB_LUB[989]));
	JB_File* backup1 = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	if (JB_File_FileCompare(backup1, Product, JB_LUB[0])) {
		JB_Decr(backup1);
		JB_Decr(B);
		JB_Decr(Product);
		return true;
	}
	SC_Ext__ReplaceOld(Product, B);
	JB_Str_CopyFileTo(Product, backup1, false);
	JB_Decr(backup1);
	JB_String* DailyProduct = JB_Incr(SC_Ext__MakeDailyProductPath(B));
	JB_Decr(B);
	JB_String* path = JB_Incr(JB_Str_TrimExtAndPath(DailyProduct, true));
	JB_Str_CopyFileTo(Product, DailyProduct, false);
	JB_Decr(Product);
	JB_Decr(DailyProduct);
	JB_File* _tmPf3 = JB_Incr(SC_Cpp__CppProduct());
	JB_String* _tmPf4 = JB_Incr(JB_Str_OperatorPlus(path, JB_LUB[367]));
	JB_File_CopyAll(_tmPf3, _tmPf4, false);
	JB_Decr(_tmPf3);
	JB_Decr(_tmPf4);
	JB_File* _tmPf5 = JB_Incr(SC_Cpp__HProduct());
	JB_String* _tmPf6 = JB_Incr(JB_Str_OperatorPlus(path, JB_LUB[372]));
	JB_Decr(path);
	JB_File_CopyAll(_tmPf5, _tmPf6, false);
	JB_Decr(_tmPf5);
	JB_Decr(_tmPf6);
	return JB_Rec_OK(JB_StdErr);
}

JB_String* SC_Ext__BackupPath() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_String* _tmPf1 = JB_Incr(JB_Str_Child(_tmPf0, JB_LUB[1271]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool SC_Ext__CanCompile(JB_String* name) {
	return ({
		JB_String* _tmPf1 = JB_Incr(JB_Str_Ext(name));
		bool _tmPf0 = SC_Str_isCLike(_tmPf1);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}) and SC_Ext__AllowedThisFile(name);
}

bool SC_Ext__Clean() {
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(JB_LUB[420]));
	JB_File_DeleteAll(_tmPf0);
	JB_Decr(_tmPf0);
	JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(JB_LUB[422]));
	JB_File_DeleteAll(_tmPf1);
	JB_Decr(_tmPf1);
	return JB_Rec_OK(JB_StdErr);
}

void SC_Ext__ClearThis() {
	if (JB_Rec_OK(JB_StdErr)) {
		{
			Array* _LoopSrcf2 = JB_Incr(SC__Ext_Cleanup);
			int _if0 = 0;
			while (true) {
				JB_File* F = JB_Incr(((JB_File*)JB_Array_Value(_LoopSrcf2, _if0)));
				if (F == nil) {
					JB_Decr(F);
					break;
				}
				JB_File_DeleteAll(F);
				JB_Decr(F);
				_if0++;
			};
			JB_Decr(_LoopSrcf2);
		};
	}
	JB_Array_Clear(SC__Ext_Cleanup);
	JB_Array_Clear(SC__Ext_FoundObjects);
}

bool SC_Ext__CollectAndCompile(JB_File* Input, JB_String* Output) {
	JB_File* TmpFol = JB_Incr(SC_Str_MakeAndGoInto(Output));
	Array* Cpps = JB_Incr(SC_Ext__CollectCppsInto(Input, TmpFol, nil));
	JB_Decr(TmpFol);
	bool _tmPf0 = SC_Ext__TransCompileWrap(Cpps);
	JB_Decr(Cpps);
	return _tmPf0;
}

Array* SC_Ext__CollectCppsInto(JB_File* Fol, JB_File* Objects, int* stdafx) {
	Array* Cpps = JB_Incr(JB_Array_Constructor0(nil));
	{
		Array* _LoopSrcf2 = JB_Incr(JB_File_List(Fol, false));
		int _if0 = 0;
		while (true) {
			JB_String* name = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (name == nil) {
				JB_Decr(name);
				break;
			}
			if (SC_Ext__CanCompile(name)) {
				JB_String* _tmPf4 = JB_Incr(JB_File_Path(Fol));
				JB_String* _tmPf3 = JB_Incr(JB_Str_Child(_tmPf4, name));
				JB_Decr(_tmPf4);
				JB_Array_SyntaxAppend(Cpps, _tmPf3);
				JB_Decr(_tmPf3);
			}
			JB_Decr(name);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	Array* _tmPf5 = JB_Incr(SC_Ext__FilterCppsIfAlreadyDone(Cpps, Objects, stdafx));
	JB_Decr(Cpps);
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

void SC_Ext__CollectPico() {
	JB_File* OfficialLocation = JB_Incr(JB_Str_AsFile(JB_LUB[432]));
	if ((!JB_File_Exists(OfficialLocation, false))) {
		JB_Decr(OfficialLocation);
		return;
	}
	JB_File* SpdLocation = JB_Incr(JB_Str_AsFile(JB_LUB[435]));
	if (JB_File_Exists(SpdLocation, false)) {
		JB_File_Delete(SpdLocation);
	}
	JB_StringC* _tmPf0 = JB_Incr(JB_Str_CastZero(SpdLocation));
	JB_Decr(SpdLocation);
	JB_File_HardLinkTo(OfficialLocation, _tmPf0);
	JB_Decr(OfficialLocation);
	JB_Decr(_tmPf0);
}

JB_File* SC_Ext__CppLib() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__Projects());
	JB_File* _tmPf1 = JB_Incr(JB_Str_ChildFile(_tmPf0, JB_LUB[995]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Array* SC_Ext__CreateCompileString(Array* FileList, JB_String* Product, JB_String* Type) {
	Array* rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	if ((!SC_Ext__HasType(FileList, Type))) {
		JB_Decr(rz);
		return nil;
	}
	SC_Array_AppendWords(rz, Product);
	{
		int _if3 = 0;
		while (true) {
			JB_File* f = JB_Incr(((JB_File*)JB_Array_Value(FileList, _if3)));
			if (f == nil) {
				JB_Decr(f);
				break;
			}
			if (JB_Str_OperatorIsa(f, Type)) {
				JB_Array_SyntaxAppend(rz, f);
				JB_File_RelaxPath(f, true);
			}
			JB_Decr(f);
			_if3++;
		};
	}
	;
	JB_String* cmode = JB_Incr(JB_LUB[352]);
	if ((JB_Str_Equals(Type, JB_LUB[1771], false)) or ((JB_Str_Equals(Type, JB_LUB[1834], false)) or (JB_Str_Equals(Type, JB_LUB[1794], false)))) {
		if (JB_Str_Equals(Type, JB_LUB[1794], false)) {
			JB_SetRef(cmode, JB_Str_OperatorPlus(cmode, JB_LUB[147]));
		}
		 else {
			JB_SetRef(cmode, JB_LUB[0]);
		}
		if (JB_Platform__OSX()) {
			JB_SetRef(cmode, JB_Str_OperatorPlus(cmode, JB_LUB[342]));
		}
	}
	SC_Array_AppendWords(rz, cmode);
	JB_Decr(cmode);
	if (JB_MaybeBool_IsKnown(SC__Options_Compile32Bit)) {
		JB_StringC* _tmPf5 = JB_Incr(((JB_StringC*)JB_Ternary(JB_MaybeBool_Default(SC__Options_Compile32Bit), JB_LUB[344], JB_LUB[345])));
		SC_Array_AppendWords(rz, _tmPf5);
		JB_Decr(_tmPf5);
	}
	JB_String* spdroot = JB_Incr(SC_Comp__FindSpeedieRoot());
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[331]);
	JB_FS_AppendString(_fsf0, spdroot);
	JB_FS_AppendString(_fsf0, JB_LUB[407]);
	JB_String* _tmPf6 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	SC_Array_AppendWords(rz, _tmPf6);
	JB_Decr(_tmPf6);
	SC_Array_AppendWords(rz, JB_LUB[332]);
	SC_Array_AppendWords(rz, JB_LUB[330]);
	if (JB_Platform__OSX()) {
		SC_Array_AppendWords(rz, JB_LUB[329]);
		if (SC_SC_Targets__SyntaxAccess(JB_LUB[1687]) or SC_Linkage__Interpreter()) {
			SC_Array_AppendWords(rz, JB_LUB[349]);
		}
		FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf1, JB_LUB[350]);
		JB_FS_AppendString(_fsf1, spdroot);
		JB_FS_AppendString(_fsf1, JB_LUB[408]);
		JB_String* _tmPf7 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		SC_Array_AppendWords(rz, _tmPf7);
		JB_Decr(_tmPf7);
	}
	JB_Decr(spdroot);
	SC_Array_AppendWords(rz, JB_LUB[353]);
	SC_Array_AppendWords(rz, JB_LUB[341]);
	SC_Array_AppendWords(rz, JB_LUB[144]);
	JB_String* _tmPf9 = JB_Incr(JB_Platform());
	JB_String* _tmPf8 = JB_Incr(SC_Linkage__SyntaxAccess(_tmPf9));
	JB_Decr(_tmPf9);
	SC_Array_AppendWords(rz, _tmPf8);
	JB_Decr(_tmPf8);
	if (JB_Platform__Lin()) {
		SC_Array_AppendWords(rz, JB_LUB[145]);
	}
	SC_Array_AppendWords(rz, JB_LUB[340]);
	if ((!JB_Platform__OSX())) {
		SC_Array_AppendWords(rz, JB_LUB[348]);
	}
	 else if ((bool)SC__Ext_CompilingLibFiles) {
		SC_Ext__MacBothArch(rz);
	}
	 else if (JB_Str_Equals(SC__Options_Arch, JB_LUB[1724], true)) {
		if (SC__Options_Optimise >= 3) {
			SC_Array_AppendWords(rz, JB_LUB[146]);
		}
	}
	 else if ((!JB_Platform__CPU_Intel())) {
		SC_Ext__MacBothArch(rz);
	}
	SC_Array_AppendWords(rz, JB_LUB[339]);
	byte opt = SC__Options_Optimise;
	bool aslib = SC__Options_MakeLib or SC__Options_ProjectIsLibrary;
	if (aslib) {
		SC_Array_AppendWords(rz, JB_LUB[337]);
		opt = 3;
	}
	if (SC__Options_SelfReplacement or aslib) {
		SC_Array_AppendWords(rz, JB_LUB[343]);
	}
	if (opt < 0) {
		SC_Array_AppendWords(rz, JB_LUB[140]);
	}
	 else if (opt >= 1) {
		SC_Array_AppendWords(rz, JB_LUB[141]);
		if (JB_Str_Equals(SC__Options_Arch, JB_LUB[1724], true)) {
			SC_Array_AppendWords(rz, JB_LUB[346]);
		}
		if (opt >= 2) {
			SC_Array_AppendWords(rz, JB_LUB[143]);
		}
	}
	if (SC__Options_ProjectIsMiniLib) {
		SC_Array_AppendWords(rz, JB_LUB[328]);
	}
	JB_File* cppl = JB_Incr(SC_Ext__CppLib());
	JB_File* cbf = JB_Incr(SC_Comp__BuildFolder());
	JB_File* cgcf = JB_Incr(SC_Comp__GeneratedCppsFolder());
	FastString* _fsf2 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf2, JB_LUB[113]);
	JB_FS_AppendString(_fsf2, cppl);
	JB_Decr(cppl);
	JB_FS_AppendString(_fsf2, JB_LUB[115]);
	JB_FS_AppendString(_fsf2, cbf);
	JB_Decr(cbf);
	JB_FS_AppendString(_fsf2, JB_LUB[139]);
	JB_FS_AppendString(_fsf2, cgcf);
	JB_Decr(cgcf);
	JB_FS_AppendString(_fsf2, JB_LUB[107]);
	JB_String* _tmPf10 = JB_Incr(JB_FS_GetResult(_fsf2));
	JB_Decr(_fsf2);
	SC_Array_AppendWords(rz, _tmPf10);
	JB_Decr(_tmPf10);
	JB_SafeDecr(rz);
	return rz;
}

bool SC_Ext__ExecuteGCC(Array* Commands) {
	if (JB_Err2_SyntaxCast(JB_Str_Execute(SC__Ext_CppCompilerPath, Commands, nil, nil, true))) {
		return true;
	}
	if (true) {
		JB_String* _tmPf1 = JB_Incr(JB_Array_join(Commands, JB_LUB[100]));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[680], _tmPf1));
		JB_Decr(_tmPf1);
		JB_Str_SyntaxExpect(_tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Str_Execute(SC__Ext_CppCompilerPath, Commands, nil, nil, true);
	return false;
}

void SC_Ext__ExportAndInstall(bool CanInstall) {
	if (SC_Ext__ShouldTransComp()) {
		if (SC__Options_Products) {
			if (((bool)(SC__Options_Products & kSC__Options_pack))) {
				SC_TreeAssembler__BuildPack();
			}
			if (((bool)(SC__Options_Products & kSC__Options_native))) {
				({
					JB__Flow_Disabled++;
					(SC_Ext__RunCppCompile());
					JB__Flow_Disabled--;
					 0;
				});
				if (CanInstall and SC_Ext__IsCompilerAndNeedsInstall()) {
					SC_Ext__InstallCompiler();
				}
			}
		}
		({
			JB__Flow_Disabled++;
			(SC_Ext__ClearThis());
			JB__Flow_Disabled--;
			 0;
		});
		if (JB_Rec_OK(JB_StdErr)) {
			SC_Comp__Package();
		}
	}
	if (JB_Rec_OK(JB_StdErr) and (!SC__Options_Scripting)) {
		SC_Ext__PrintProduct(JB_LUB[1144]);
	}
}

Array* SC_Ext__FilterCppsIfAlreadyDone(Array* Cpps, JB_File* Objects, int* stdafx) {
	Array* rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	JB_File* wierd = JB_Incr(SC_Cpp__CppProduct());
	{
		int _if0 = 0;
		while (true) {
			JB_String* Cpp = JB_Incr(((JB_String*)JB_Array_Value(Cpps, _if0)));
			if (Cpp == nil) {
				JB_Decr(Cpp);
				break;
			}
			int reason = SC_Ext__NeedNewObjForSrc(Cpp, Objects);
			if (reason) {
				JB_File* _tmPf2 = JB_Incr(JB_Str_AsFile(Cpp));
				JB_Array_SyntaxAppend(rz, _tmPf2);
				JB_Decr(_tmPf2);
				if ((reason == 4) and ((bool)stdafx)) {
					(*stdafx) = 1;
				}
			}
			JB_Decr(Cpp);
			_if0++;
		};
		JB_Decr(wierd);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

bool SC_Ext__HasType(Array* CppList, JB_String* Type) {
	{
		int _if0 = 0;
		while (true) {
			JB_File* f = ((JB_File*)JB_Array_Value(CppList, _if0));
			if (f == nil) {
				break;
			}
			if (JB_Str_OperatorIsa(f, Type)) {
				return true;
			}
			_if0++;
		};
	}
	;
	return false;
}

int SC_Ext__Init_() {
	{
		JB_SetRef(SC__Ext_FoundObjects, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Ext_Cleanup, JB_Array_Constructor0(nil));
		SC__Ext_CompilingLibFiles = 0;
		JB_SetRef(SC__Ext_CppCompilerPath, JB_LUB[427]);
	}
	;
	return 0;
}

int SC_Ext__InitCode_() {
	return 0;
}

void SC_Ext__InstallCompiler() {
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[926]);
	JB_FS_AppendInt32(_fsf0, (2024041119));
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
	JB_String* OldProd = JB_Incr(SC_Ext__ProductPath(false));
	JB_String* _tmPf2 = JB_Incr(SC_Comp__Projects());
	JB_SetRef(SC__Options_output_path, JB_Str_Child(_tmPf2, JB_LUB[1272]));
	JB_Decr(_tmPf2);
	JB_File* _tmPf3 = JB_Incr(JB_Str_AsFile(OldProd));
	JB_Decr(OldProd);
	JB_File_MoveTo(_tmPf3, SC__Options_output_path);
	JB_Decr(_tmPf3);
	JB__Flow_Disabled++;
	JB_File* _tmPf4 = JB_Incr(SC_Cpp__CppProduct());
	SC_Ext__InstallOne(_tmPf4);
	JB_Decr(_tmPf4);
	JB_File* _tmPf5 = JB_Incr(SC_Cpp__HProduct());
	SC_Ext__InstallOne(_tmPf5);
	JB_Decr(_tmPf5);
	JB_File* _tmPf7 = JB_Incr(SC_Cpp__HProduct());
	JB_File* _tmPf6 = JB_Incr(JB_File_Sibling(_tmPf7, JB_LUB[960]));
	JB_Decr(_tmPf7);
	SC_Ext__InstallOne(_tmPf6);
	JB_Decr(_tmPf6);
	JB__Flow_Disabled--;
	if (SC__Options_MakeLib) {
		SC_Ext__MakeLib();
	}
}

void SC_Ext__InstallOne(JB_File* test) {
	JB_File* _tmPf0 = JB_Incr(JB_File_Parent(test));
	JB_Str_MakeDir(_tmPf0);
	JB_Decr(_tmPf0);
	JB_String* _tmPf2 = JB_Incr(JB_File_Path(test));
	JB_String* _tmPf1 = JB_Incr(JB_Str_ReplacePathComponent(_tmPf2, -2, JB_LUB[676]));
	JB_Decr(_tmPf2);
	JB_File* f0 = JB_Incr(JB_Str_AsFile(_tmPf1));
	JB_Decr(_tmPf1);
	if ((!JB_File_FileCompare(test, f0, JB_LUB[0]))) {
		JB_File_Copy(test, f0, false);
	}
	JB_Decr(f0);
}

bool SC_Ext__IsCompilerAndNeedsInstall() {
	bool rz = false;
	if ((!SC__Options_SelfReplacement)) {
		return nil;
	}
	if ((!(JB_Rec_OK(JB_StdErr) and (!SC_Comp__IsTest())))) {
		return nil;
	}
	JB__Flow_Disabled++;
	rz = (SC_Ext__TestNewCompiler() and SC_Ext__BackupCompiler());
	JB__Flow_Disabled--;
	return rz;
}

JB_String* SC_Ext__LibSuff() {
	if (SC__Options_ProjectIsMiniLib) {
		return JB_LUB[1010];
	}
	return JB_LUB[0];
}

JB_String* SC_Ext__LibTmpPath() {
	JB_String* _tmPf0 = JB_Incr(SC_Ext__TmpBase(JB_LUB[991]));
	JB_String* _tmPf1 = JB_Incr(SC_Ext__LibSuff());
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf1));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_File* SC_Ext__LinkOK(JB_File* p) {
	if ((!JB_File_Exists(p, false))) {
		return nil;
	}
	JB_String* lto = JB_Incr(JB_File_LinkToGet(p));
	if ((!JB_Str_Exists(lto))) {
		JB_Decr(lto);
		return p;
	}
	JB_String* _tmPf0 = JB_Incr(JB_Str_ResolvePath(lto, kJB__FileResolveMode_AllowMissing));
	JB_Decr(lto);
	JB_File* tof = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	if (JB_File_Exists(tof, false) and (!({
		JB_String* _tmPf2 = JB_Incr(JB_File_LinkToGet(tof));
		bool _tmPf1 = JB_Str_Exists(_tmPf2);
		JB_Decr(_tmPf2);
		 _tmPf1;
	}))) {
		JB_SafeDecr(tof);
		return tof;
	}
	JB_File_Delete(tof);
	JB_Decr(tof);
	return nil;
}

void SC_Ext__MacBothArch(Array* r) {
	SC_Array_AppendWords(r, JB_LUB[336]);
}

JB_String* SC_Ext__MakeDailyProductPath(JB_File* B) {
	int D = JB_Date_DayOfWeek(JB_Date__Now());
	byte x = 'A' + D;
	JB_String* _tmPf0 = JB_Incr(JB_File_Path(B));
	JB_String* _tmPf2 = JB_Incr(JB_int_RenderFS(D, nil));
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(_tmPf2, JB_LUB[1439]));
	JB_Decr(_tmPf2);
	JB_String* _tmPf3 = JB_Incr(JB_Str_Child(_tmPf0, _tmPf1));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

void SC_Ext__MakeLib() {
	JB_String* _tmPf1 = JB_Incr(SC_Ext__ProductPath(false));
	JB_String* n = JB_Incr(JB_Str_Sibling(_tmPf1, JB_LUB[1753]));
	JB_Decr(_tmPf1);
	if ((!SC__Options_Silent)) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[992]);
		JB_FS_AppendString(_fsf0, n);
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf2);
		JB_Decr(_tmPf2);
	}
	SC__Ext_CompilingLibFiles++;
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[347], n));
	JB_Decr(n);
	SC_Ext__TransCompile(SC__Ext_FoundObjects, _tmPf3, JB_LUB[1834]);
	JB_Decr(_tmPf3);
	SC__Ext_CompilingLibFiles--;
}

int SC_Ext__NeedNewObjForSrc(JB_String* cpp, JB_File* objects) {
	JB_Flow__Input(cpp, JB_LUB[1838]);
	bool aslib = SC__Options_MakeLib or SC__Options_ProjectIsLibrary;
	if (aslib and (JB_Str_ContainsString(cpp, JB_LUB[404]))) {
		return 0;
	}
	if ((!SC_ASM__Needed()) and (JB_Str_ContainsString(cpp, JB_LUB[406]))) {
		return 0;
	}
	if ((!(SC_SC_Targets__SyntaxAccess(JB_LUB[1687]) or SC_Linkage__Interpreter())) and JB_Str_ContainsString(cpp, JB_LUB[405])) {
		return 0;
	}
	JB_String* name = JB_Incr(JB_Str_Name(cpp));
	JB_String* Prefix = JB_Incr(JB_Str_TrimExtAndPath(name, true));
	JB_Decr(name);
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(Prefix, JB_LUB[372]));
	JB_String* _tmPf0 = JB_Incr(JB_Str_Sibling(cpp, _tmPf1));
	JB_Decr(_tmPf1);
	JB_File* h = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(Prefix, JB_LUB[377]));
	JB_Decr(Prefix);
	JB_File* _tmPf2 = JB_Incr(JB_File_SyntaxAccess(objects, _tmPf3));
	JB_Decr(_tmPf3);
	JB_File* o = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	JB_Array_SyntaxAppend(SC__Ext_FoundObjects, o);
	int _tmPf4 = SC_Ext__NoGoodObject(cpp, h, o);
	JB_Decr(h);
	JB_Decr(o);
	return _tmPf4;
}

int SC_Ext__NoGoodObject(JB_String* Cpp, JB_File* h, JB_File* o) {
	if ((JB_File_Exists(h, false)) and (JB_File_NewerThanFile(h, o))) {
		return 4;
	}
	if ((!JB_File_Exists(o, false))) {
		return 1;
	}
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(Cpp));
	if (JB_File_NewerThanFile(_tmPf0, o)) {
		JB_Decr(_tmPf0);
		return 2;
	}
	JB_Decr(_tmPf0);
	return 0;
}

void SC_Ext__PrintProduct(JB_String* s) {
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(s, JB_LUB[162]));
	JB_String* _tmPf3 = JB_Incr(SC_Ext__ProductPath(false));
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf3, JB_LUB[1464]));
	JB_Decr(_tmPf3);
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus((_tmPf1), (_tmPf2)));
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf2);
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
}

JB_String* SC_Ext__ProductName() {
	JB_String* _tmPf0 = JB_Incr(SC_Comp__VariantSuffix());
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(SC__Comp_ProjectName, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Ext__ProductPath(bool Direct) {
	if (JB_Str_Exists(SC__Options_output_path)) {
		return SC__Options_output_path;
	}
	JB_String* prod = JB_Incr(SC__Comp_ProjectName);
	if ((!Direct)) {
		JB_String* _tmPf0 = JB_Incr(SC_Ext__ProductName());
		JB_String* _tmPf1 = JB_Incr(SC_Ext__ProductSuffix());
		JB_SetRef(prod, JB_Str_OperatorPlus(_tmPf0, _tmPf1));
		JB_Decr(_tmPf0);
		JB_Decr(_tmPf1);
	}
	if (SC__Options_SelfReplacement) {
		JB_String* _tmPf2 = JB_Incr(SC_Comp__Projects());
		JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1270], prod));
		JB_String* _tmPf7 = JB_Incr(JB_Str_Child(_tmPf2, _tmPf3));
		JB_Decr(_tmPf2);
		JB_Decr(_tmPf3);
		JB_Decr(prod);
		JB_SafeDecr(_tmPf7);
		return _tmPf7;
	}
	JB_File* _tmPf5 = JB_Incr(SC_Comp__BuildFolder());
	JB_String* _tmPf4 = JB_Incr(JB_File_Path(_tmPf5));
	JB_Decr(_tmPf5);
	JB_String* _tmPf6 = JB_Incr(JB_Str_SyntaxAccess(_tmPf4, prod));
	JB_Decr(prod);
	JB_Decr(_tmPf4);
	JB_SafeDecr(_tmPf6);
	return _tmPf6;
}

JB_String* SC_Ext__ProductSuffix() {
	if ((!SC__Options_ProjectIsLibrary)) {
		return JB_LUB[0];
	}
	if (JB_Platform__OSX()) {
		return JB_LUB[369];
	}
	if (JB_Platform__Win()) {
		return JB_LUB[374];
	}
	return JB_LUB[381];
}

JB_String* SC_Ext__ProjTmpPath() {
	JB_String* _tmPf0 = JB_Incr(SC_Ext__ProductName());
	JB_String* _tmPf1 = JB_Incr(SC_Ext__TmpBase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Ext__ReplaceOld(JB_File* input, JB_File* Backs) {
	JB_File* oldest = nil;
	int score = 0;
	{
		JB_File_ListStart(Backs);
		while (JB_File_MoveNext(Backs)) {
			JB_String* _tmPf2 = JB_Incr(JB_File_CurrChild(Backs));
			JB_File* _tmPf1 = JB_Incr(JB_File_Child(Backs, _tmPf2));
			JB_Decr(_tmPf2);
			JB_File* f = JB_Incr(_tmPf1);
			JB_Decr(_tmPf1);
			JB_String* name = JB_Incr(JB_Str_Name(f));
			if ((JB_Str_OperatorEndsWith(name, JB_LUB[1228])) and (JB_byte_IsLetter((JB_Str_First(name))))) {
				int64 s = JB_Date_Days(JB_Date_Ago(JB_File_Modified(f)));
				if (s > score) {
					score = s;
					JB_SetRef(oldest, f);
				}
			}
			JB_Decr(f);
			JB_Decr(name);
		};
		JB_File_ListEnd(Backs);
	}
	;
	if (oldest != nil) {
		JB_File_CopyAll(input, oldest, false);
	}
	JB_Decr(oldest);
}

void SC_Ext__RunCppCompile() {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	if ((!SC__Options_Silent)) {
		SC_Ext__PrintProduct(JB_LUB[72]);
	}
	SC_Ext__CollectPico();
	SC__Ext_CompilingLibFiles++;
	JB_File* _tmPf0 = JB_Incr(SC_Ext__CppLib());
	JB_String* _tmPf1 = JB_Incr(SC_Ext__LibTmpPath());
	if ((!SC_Ext__CollectAndCompile(_tmPf0, _tmPf1))) {
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf0);
		return;
	}
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	SC__Ext_CompilingLibFiles--;
	JB_File* _tmPf2 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_String* _tmPf3 = JB_Incr(SC_Ext__ProjTmpPath());
	if ((!SC_Ext__CollectAndCompile(_tmPf2, _tmPf3))) {
		JB_Decr(_tmPf3);
		JB_Decr(_tmPf2);
		return;
	}
	JB_Decr(_tmPf2);
	JB_Decr(_tmPf3);
	JB_String* _tmPf4 = JB_Incr(SC_Ext__ProjTmpPath());
	if ((!SC_Ext__UseAndCompile(SC__Cpp_Cpp_Input, _tmPf4))) {
		JB_Decr(_tmPf4);
		return;
	}
	JB_Decr(_tmPf4);
	JB_String* _tmPf6 = JB_Incr(SC_Ext__ProductPath(false));
	JB_String* _tmPf5 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[347], _tmPf6));
	JB_Decr(_tmPf6);
	if ((!SC_Ext__TransCompile(SC__Ext_FoundObjects, _tmPf5, JB_LUB[1834]))) {
		JB_Decr(_tmPf5);
		return;
	}
	JB_Decr(_tmPf5);
}

void SC_Ext__SayTest(JB_String* n) {
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[65]);
	JB_FS_AppendString(_fsf0, n);
	JB_FS_AppendString(_fsf0, JB_LUB[112]);
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
}

bool SC_Ext__ShouldTransComp() {
	if (SC__Options_Scripting) {
		return true;
	}
	if ((!((!SC__Options_Final) and SC__Options_Compile))) {
		return nil;
	}
	if (SC__Options_ForceRecompile) {
		return true;
	}
	JB_String* _tmPf1 = JB_Incr(SC_Ext__ProductPath(false));
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(_tmPf1));
	JB_Decr(_tmPf1);
	JB_File* p = JB_Incr(SC_Ext__LinkOK(_tmPf0));
	JB_Decr(_tmPf0);
	if ((!JB_File_SyntaxCast(p)) or (JB_File_Modified(p) < SC__Imp_Recent)) {
		JB_Decr(p);
		return true;
	}
	JB_Decr(p);
	if ((!SC__Options_Silent)) {
		JB_PrintLine(JB_LUB[634]);
	}
	return false;
}

bool SC_Ext__TestNewCompiler() {
	JB_String* S = JB_Incr(SC_Ext__ProductPath(false));
	JB_File* Test1 = JB_Incr(JB_Str_AsFile(S));
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, S);
	JB_FS_AppendByte(_fsf0, '2');
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_File* Test2 = JB_Incr(JB_Str_AsFile(_tmPf2));
	JB_Decr(_tmPf2);
	FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf1, S);
	JB_Decr(S);
	JB_FS_AppendByte(_fsf1, '3');
	JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf1));
	JB_Decr(_fsf1);
	JB_File* Test3 = JB_Incr(JB_Str_AsFile(_tmPf3));
	JB_Decr(_tmPf3);
	JB_File* Cpp1 = JB_Incr(SC_Cpp__CppProduct());
	JB_String* _tmPf5 = JB_Incr(JB_File_Path(Cpp1));
	JB_String* _tmPf4 = JB_Incr(JB_Str_ReplacePathComponent(_tmPf5, -2, JB_LUB[677]));
	JB_Decr(_tmPf5);
	JB_File* Cpp2 = JB_Incr(JB_Str_AsFile(_tmPf4));
	JB_Decr(_tmPf4);
	JB_String* _tmPf7 = JB_Incr(JB_File_Path(Cpp1));
	JB_Decr(Cpp1);
	JB_String* _tmPf6 = JB_Incr(JB_Str_ReplacePathComponent(_tmPf7, -2, JB_LUB[678]));
	JB_Decr(_tmPf7);
	JB_File* Cpp3 = JB_Incr(JB_Str_AsFile(_tmPf6));
	JB_Decr(_tmPf6);
	JB_Array_SyntaxAppend(SC__Ext_Cleanup, Test2);
	JB_Array_SyntaxAppend(SC__Ext_Cleanup, Test3);
	JB_Decr(Test3);
	SC_Ext__SayTest(JB_LUB[450]);
	if ((!SC_File_TestSpeedie(Test1, JB_LUB[476]))) {
		JB_Decr(Cpp3);
		JB_Decr(Cpp2);
		JB_Decr(Test2);
		JB_Decr(Test1);
		return nil;
	}
	JB_Decr(Test1);
	SC_Ext__SayTest(JB_LUB[476]);
	if ((!SC_File_TestSpeedie(Test2, JB_LUB[494]))) {
		JB_Decr(Cpp3);
		JB_Decr(Cpp2);
		JB_Decr(Test2);
		return nil;
	}
	SC_Ext__SayTest(JB_LUB[494]);
	JB_PrintLine(JB_LUB[0]);
	if ((!(JB_File_MustExist(Cpp2, JB_LUB[0]) and JB_File_MustExist(Cpp3, JB_LUB[0])))) {
		JB_Decr(Cpp3);
		JB_Decr(Cpp2);
		JB_Decr(Test2);
		return nil;
	}
	if ((!JB_File_FileCompare(Cpp2, Cpp3, Cpp3))) {
		JB_Decr(Cpp3);
		JB_Decr(Cpp2);
		JB_Decr(Test2);
		return nil;
	}
	JB_Decr(Cpp2);
	JB_Decr(Cpp3);
	bool _tmPf8 = SC_File_TestBatch(Test2) and JB_Rec_OK(JB_StdErr);
	JB_Decr(Test2);
	return _tmPf8;
}

JB_String* SC_Ext__TmpBase(JB_String* V) {
	JB_String* s = ((JB_StringC*)JB_Ternary(JB_MaybeBool_Default(SC__Options_Compile32Bit), JB_LUB[419], JB_LUB[421]));
	return JB_Str_OperatorPlus(s, V);
}

JB_String* SC_Ext__TmpErr(JB_String* V) {
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(V, JB_LUB[383]));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1632], _tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(SC_Ext__TmpBase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_String* SC_Ext__TmpOut(JB_String* V) {
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(V, JB_LUB[383]));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1858], _tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(SC_Ext__TmpBase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

bool SC_Ext__TransCompile(Array* Files, JB_String* Dest, JB_String* Type) {
	if ((!JB_Array_SyntaxCast(Files))) {
		return true;
	}
	Array* CompileString = JB_Incr(SC_Ext__CreateCompileString(Files, Dest, Type));
	if ((!JB_Array_SyntaxCast(CompileString))) {
		JB_Decr(CompileString);
		return true;
	}
	if (SC__Options_PrintCompileString) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[59]);
		JB_FS_AppendString(_fsf0, SC__Ext_CppCompilerPath);
		JB_FS_AppendByte(_fsf0, ' ');
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Str_Print(_tmPf1);
		JB_Decr(_tmPf1);
		JB_String* _tmPf2 = JB_Incr(JB_Array_join(CompileString, JB_LUB[100]));
		JB_PrintLine(_tmPf2);
		JB_Decr(_tmPf2);
	}
	JB_Date__Sleep(8192.0);
	bool _tmPf3 = SC_Ext__ExecuteGCC(CompileString);
	JB_Decr(CompileString);
	return _tmPf3;
}

bool SC_Ext__TransCompileWrap(Array* cpps) {
	bool rz = false;
	rz = SC_Ext__TransCompile(cpps, JB_LUB[142], JB_LUB[1569]);
	if (JB_Platform__OSX()) {
		if (rz) {
			rz = SC_Ext__TransCompile(cpps, JB_LUB[142], JB_LUB[1771]);
		}
		if (rz) {
			rz = SC_Ext__TransCompile(cpps, JB_LUB[142], JB_LUB[1794]);
		}
	}
	return rz;
}

bool SC_Ext__UseAndCompile(Array* Input, JB_String* Output) {
	JB_File* TmpFol = JB_Incr(SC_Str_MakeAndGoInto(Output));
	Array* Cpps = JB_Incr(SC_Ext__FilterCppsIfAlreadyDone(Input, TmpFol, nil));
	JB_Decr(TmpFol);
	bool _tmPf0 = SC_Ext__TransCompileWrap(Cpps);
	JB_Decr(Cpps);
	return _tmPf0;
}


void SC_TreeAssembler__BuildPack() {
	SC_fn_asm__InitTable();
	JB_String* str = JB_Incr(((JB_StringC*)JB_Ternary(JB_IsDebug(), JB_LUB[607], JB_LUB[643])));
	if ((!JB_Str_Equals(str, JB_LUB[607], false))) {
		JB_Decr(str);
		return;
	}
	JB_Decr(str);
	Array* list = JB_Incr(SC_TreeAssembler__CollectFuncs(JB_LUB[1497]));
	if ((!JB_Array_SyntaxCast(list))) {
		JB_Decr(list);
		return;
	}
	//debugger;
	SC_TreeAssembler__StampAll(list);
	SC_Func__LinkAll(list);
	int64 args[2];
	args[0] = ((int64)8725);
	args[1] = ((int64)275);
	//;
	SCFunction* _tmPf0 = JB_Incr(((SCFunction*)JB_Array_Value(list, 0)));
	JB_Decr(list);
	ASMFunc* mu = JB_Incr(_tmPf0->ASM);
	JB_Decr(_tmPf0);
	if (mu) {
		ASMFunc2* _tmPf1 = JB_Incr(SC_ASMFunc_Finish(mu));
		int64 Result = SC_ASMFunc2_RunArgs(_tmPf1, (&args[0]), (2));
		if (Result != 9000) {
			debugger;
		}
		SC_TreeAssembler__StampAll(SC__Comp_FuncList);
		JB_Decr(_tmPf1);
	}
	JB_Decr(mu);
}

Array* SC_TreeAssembler__CollectFuncs(JB_String* exp) {
	Array* rz = ((Array*)JB_Array_Constructor0(nil));
	{
		Array* _LoopSrcf2 = JB_Str_OperatorDivide(exp, ',');
		int _if0 = 0;
		while (true) {
			JB_String* l = ((JB_String*)JB_Array_Value(_LoopSrcf2, _if0));
			if (l == nil) {
				break;
			}
			SCNode* fn = ((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, l));
			if (JB_Object_FastIsa(fn, &SCFunctionData)) {
				JB_Array_SyntaxAppend(rz, ((SCFunction*)fn));
				((SCFunction*)fn)->TableId = JB_Array_Size(rz);
			}
			_if0++;
		};
	}
	;
	return rz;
}

int SC_TreeAssembler__Init_() {
	{
		SC__TreeAssembler_StdState = ((ASMFuncState){});
		JB_SetRef(SC__TreeAssembler_PackFuncs, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

void SC_TreeAssembler__InitAll() {
	SC_Instruction__InstructionInit();
	SC_fn_asm__InitTable();
	Instruction* _tmPf0 = JB_Incr(SC_Instruction__SyntaxAccessWithInt(kSC__ASM_SET1));
	SC_Instruction_Const(_tmPf0);
	JB_Decr(_tmPf0);
	Instruction* _tmPf1 = JB_Incr(SC_Instruction__SyntaxAccessWithInt(kSC__ASM_SETK));
	SC_Instruction_Const(_tmPf1);
	JB_Decr(_tmPf1);
	Instruction* _tmPf2 = JB_Incr(SC_Instruction__SyntaxAccessWithInt(kSC__ASM_SETN));
	SC_Instruction_Const(_tmPf2);
	JB_Decr(_tmPf2);
	return;
}

int SC_TreeAssembler__InitCode_() {
	return 0;
}

void SC_TreeAssembler__Stamp(SCFunction* fn) {
	SC_flat_InitState((&SC__TreeAssembler_StdState), fn);
	SC_Func_Flatten(fn);
	SC_flat_FinishASM((&SC__TreeAssembler_StdState));
}

void SC_TreeAssembler__StampAll(Array* Funcs) {
	{
		int _if0 = 0;
		while (true) {
			SCFunction* fn = ((SCFunction*)JB_Array_Value(Funcs, _if0));
			if (fn == nil) {
				break;
			}
			if (fn->MyReacher) {
				SC_TreeAssembler__Stamp(fn);
			}
			_if0++;
		};
	};
}

ASMFunc* SC_TreeAssembler__AccessStr(Message* m) {
	SCNode* f = ((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, m->Name));
	if (JB_Object_FastIsa(f, &SCFunctionData)) {
		ASMFunc* _tmPf0 = ((SCFunction*)f)->ASM;
		if ((!_tmPf0)) {
			JB_Msg_SyntaxExpect(m, JB_LUB[1289]);
			return nil;
		}
		return _tmPf0;
	}
	JB_String* err = ((JB_StringC*)JB_Ternary(((bool)f), JB_LUB[1295], JB_LUB[705]));
	if (true) {
		JB_Msg_SyntaxExpect(m, err);
	}
	return nil;
}


xC2xB5Form* SC_VM_Builder__AddForm(Message* form) {
	xC2xB5Form* rz = nil;
	rz = SC_xC2xB5Form_ConstructorWithMsg(nil, form);
	(JB_Dict_ValueLowerSet(SC__xC2xB5Form_Forms, form->Name, rz));
	return rz;
}

bool SC_VM_Builder__BuildFiles() {
	JB_File* v = JB_Incr(SC_Comp__InputFile(nil, JB_LUB[2039], nil));
	if ((!JB_File_SyntaxCast(v))) {
		JB_Decr(v);
		return nil;
	}
	Message* x = JB_Incr(JB_File_Parse(v, 16777216, false));
	if ((!x)) {
		JB_Decr(x);
		JB_Decr(v);
		return nil;
	}
	JB_SetRef(SC__VM_Builder_vm_file, v);
	JB_Decr(v);
	Message* forms = JB_Incr(JB_Msg_FindName(x, JB_LUB[1664]));
	JB_Tree_Remove(forms);
	FastString* code = JB_Incr(JB_FS_Constructor(nil));
	FastString* jump = JB_Incr(JB_FS_Constructor(nil));
	SC_VM_Builder__Clean(x);
	SC_VM_Builder__DataTypeModule();
	SC_VM_Builder__GenerateForms(forms);
	JB_Decr(forms);
	JB_SetRef(SC__VM_Builder_NameList, SC_VM_Builder__VMSpd(x));
	SC_VM_Builder__VMCpp(code, jump);
	JB_File* _tmPf0 = JB_Incr(SC_VM_Builder__CppLibFile(JB_LUB[927]));
	JB_String* _tmPf1 = JB_Incr(JB_FS_SyntaxCast(SC__VM_Builder_form_h));
	(JB_File_SmartDataSet(_tmPf0, _tmPf1));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_File* _tmPf2 = JB_Incr(SC_VM_Builder__CppLibFile(JB_LUB[929]));
	JB_String* _tmPf3 = JB_Incr(JB_FS_SyntaxCast(code));
	JB_Decr(code);
	(JB_File_SmartDataSet(_tmPf2, _tmPf3));
	JB_Decr(_tmPf2);
	JB_Decr(_tmPf3);
	JB_File* _tmPf4 = JB_Incr(SC_VM_Builder__CppLibFile(JB_LUB[928]));
	JB_String* _tmPf5 = JB_Incr(JB_FS_SyntaxCast(jump));
	JB_Decr(jump);
	(JB_File_SmartDataSet(_tmPf4, _tmPf5));
	JB_Decr(_tmPf4);
	JB_Decr(_tmPf5);
	(JB_FS_SizeSet(SC__VM_Builder_form_h, 0));
	JB_Decr(x);
	return true;
}

void SC_VM_Builder__BuildInstructions(SCFunction* fn, Message* node, SCNode* name_space) {
	if (JB_Ring_HasChildren(node)) {
		JB_Msg_SyntaxExpect(((Message*)JB_Ring_First(node)), nil);
		return;
	}
	Message* after = node;
	{
		Array* _LoopSrcf2 = SC__VM_Builder_NameList;
		int _if0 = 0;
		while (true) {
			Message* tmp = ((Message*)JB_Array_Value(_LoopSrcf2, _if0));
			if (tmp == nil) {
				break;
			}
			int pos = _if0;
			JB_String* form = JB_Msg_Name(((Message*)JB_Tree_Get(((Message*)JB_Tree_Get(tmp, 0)), 0)));
			if (JB_Str_Exists(form)) {
				Message* fnc = JB_Syx_OperatorPlus(JB_SyxSDot, JB_LUB[1476]);
				Message* list = JB_Msg_Msg(fnc, JB_SyxList, JB_LUB[0]);
				JB_Msg_AppendSyx(list, JB_SyxStr, JB_Str_LowerCase(form));
				JB_Msg_AppendSyx(list, JB_SyxStr, tmp->Name);
				JB_Msg_AppendNum(list, pos);
				(JB_Ring_NextSibSet(after, fnc));
				after = fnc;
			}
			_if0++;
		};
	}
	;
	SC_Msg_SafeRemove(node, JB_SyxSheb);
}

void SC_VM_Builder__Clean(Message* msg) {
	{
		Message* ch = msg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(msg));
		while (((bool)(ch)) and (ch != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(ch));
			if (JB_Msg_OperatorIn(ch, JB_SyxArg)) {
				ch->Indent = (ch->Indent + 4);
			}
			if (JB_Msg_EqualsSyx(ch, JB_SyxOpp, false)) {
				if (JB_Msg_SyntaxEquals(ch, JB_LUB[1795], false)) {
					JB_SetRef(ch->Name, JB_LUB[240]);
				}
				 else if (JB_Msg_SyntaxEquals(ch, JB_LUB[2078], false)) {
					JB_SetRef(ch->Name, JB_LUB[2069]);
				}
			}
			ch = _N_f2;
		};
		;
	};
}

JB_File* SC_VM_Builder__CppLibFile(JB_String* ch) {
	JB_File* _tmPf0 = JB_Incr(SC_Ext__CppLib());
	JB_File* _tmPf1 = JB_Incr(JB_File_SyntaxAccess(_tmPf0, ch));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* SC_VM_Builder__DataTypeCreate(Message* form, int fnum) {
	Message* rz = nil;
	JB_String* name = JB_Str_OperatorPlus(JB_LUB[614], form->Name);
	Message* sigh = JB_Macro_CallFast(SC__Macros_ASM_Datatype, JB_Syx_OperatorPlus(JB_SyxThg, name), JB_int_Msg(fnum));
	rz = JB_Msg_FindNested(sigh, JB_SyxList, nil, false);
	rz = ((Message*)JB_Ring_NextSib(rz));
	//"This would be better if speedie grouped these, rather than spamming JB_InitCode_";
	while (JB_Ring_HasChildren(sigh)) {
		SC_Comp__SyntaxAppend(((Message*)JB_Ring_First(sigh)));
	};
	return rz;
}

void SC_VM_Builder__DataTypeModule() {
	Message* module = JB_Str_ParseJbin(((JB_LUB[23])), kJB__int64_max);
	SC_Comp__SyntaxAppend(module);
	JB_SetRef(SC__VM_Builder_ModuleArg, ((Message*)JB_Ring_Last(((Message*)JB_Ring_Last(((Message*)JB_Ring_Last(module)))))));
}

Array* SC_VM_Builder__DefineGet(JB_String* fname, int up, int down, bool last) {
	Array* rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	if (last) {
		SC_VM_Builder__DefineGetSub(fname, up, down, 'i', ' ');
	}
	SC_VM_Builder__DefineGetSub(fname, up, down, 'u', 'u');
	Message* _tmPf0 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, fname));
	JB_Array_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(JB_int_Msg(up));
	JB_Array_SyntaxAppend(rz, _tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(JB_int_Msg(down));
	JB_Array_SyntaxAppend(rz, _tmPf2);
	JB_Decr(_tmPf2);
	JB_SafeDecr(rz);
	return rz;
}

void SC_VM_Builder__DefineGetSub(JB_String* fname, int up, int down, byte c, byte c2) {
	//;
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[60]);
	JB_FS_AppendString(SC__VM_Builder_form_h, fname);
	JB_FS_AppendByte(SC__VM_Builder_form_h, c);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[110]);
	JB_FS_AppendByte(SC__VM_Builder_form_h, c2);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[1718]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, down);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[289]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, up);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[282]);
	JB_FS_AppendString(SC__VM_Builder_form_h, fname);
	JB_FS_AppendByte(SC__VM_Builder_form_h, c);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[1429]);
	JB_FS_AppendByte(SC__VM_Builder_form_h, c2);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[1719]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, down);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[289]);
	JB_FS_AppendInt32(SC__VM_Builder_form_h, up);
	JB_FS_AppendString(SC__VM_Builder_form_h, JB_LUB[280]);
	//;
}

void SC_VM_Builder__FillTypePrm(JB_String* fname, int pname) {
	Message* prop = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, fname));
	if (pname >= 4) {
		Message* _tmPf0 = JB_Incr(JB_Macro_CallFast(SC__Macros_ASMCopier2, prop, nil));
		JB_Tree_SyntaxAppend(SC__VM_Builder_dt_prm, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		Message* _tmPf2 = JB_Incr(JB_int_Msg(pname));
		Message* _tmPf1 = JB_Incr(JB_Macro_CallFast(SC__Macros_ASMCopier, prop, _tmPf2));
		JB_Decr(_tmPf2);
		JB_Tree_SyntaxAppend(SC__VM_Builder_dt_prm, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(prop);
}

int SC_VM_Builder__GenAcc(Message* line, int bit_pos, int pname) {
	int n = 32 - bit_pos;
	JB_String* lname = JB_LUB[1437];
	if (line) {
		Message* f = JB_Msg_NeedFirst(line);
		if ((!f)) {
			return 0;
		}
		byte f0 = JB_Str_First(f->Name);
		if (f0 == 'r') {
			SC_VM_Builder__FillTypePrm(line->Name, pname);
			return 5 + bit_pos;
		}
		if (JB_byte_IsInt(f0)) {
			n = JB_Msg_Int(f, 0);
		}
		if (n < 1) {
			JB_Msg_SyntaxExpect(f, JB_LUB[1323]);
			return 0;
		}
		if (n > 25) {
			JB_Msg_SyntaxExpect(f, JB_Str_OperatorPlus(JB_LUB[1310], JB_int_RenderFS(n, nil)));
			return 0;
		}
		lname = JB_Str_OperatorPlus(JB_LUB[1426], line->Name);
	}
	lname = JB_Str_OperatorPlus(SC__VM_Builder_parent, lname);
	Array* arr = SC_VM_Builder__DefineGet(lname, 32 - n, bit_pos, (bit_pos + n) == 32);
	Message* fnc_src = JB_Macro_Run(SC__Macros_ASMSetter, arr);
	JB_FreeIfDead(SC_Func__NewFunc(fnc_src, nil, line));
	SC_VM_Builder__FillTypePrm(lname, pname);
	if (((bit_pos + n) > 32) or (n > 25)) {
		if (true) {
			JB_Msg_SyntaxExpect(SC__VM_Builder_dt_prm, JB_LUB[1323]);
		}
	}
	return n + bit_pos;
}

void SC_VM_Builder__GenerateForms(Message* forms) {
	int f = 0;
	{
		Message* _LoopSrcf4 = JB_Msg_NeedSyx(forms, JB_SyxArg);
		Message* form_msg = ((Message*)JB_Ring_First(_LoopSrcf4));
		while (form_msg) {
			Message* _Nf3 = ((Message*)JB_Ring_NextSib(form_msg));
			bool _tmPf0 = (f < 32);
			if ((!_tmPf0)) {
				JB_Msg_SyntaxExpect(form_msg, JB_LUB[1315]);
			}
			if (_tmPf0) {
				//using;
				MessagePosition _usingf1 = JB_Msg_SyntaxUsing(form_msg);
				SC_VM_Builder__GenerateOne(form_msg, (++f));
				JB_MsgPos_SyntaxUsingComplete((&_usingf1));
				JB_MsgPos_Destructor((&_usingf1));
			}
			form_msg = _Nf3;
		};
		;
	};
}

void SC_VM_Builder__GenerateOne(Message* form_msg, int f) {
	xC2xB5Form* frm = SC_VM_Builder__AddForm(form_msg);
	JB_SetRef(SC__VM_Builder_dt_prm, SC_VM_Builder__DataTypeCreate(form_msg, f));
	JB_SetRef(SC__VM_Builder_parent, form_msg->Name);
	int bit_pos = 7;
	int p = 0;
	Message* arg = JB_Msg_NeedSyxInt(form_msg, JB_SyxArg, -1);
	if ((!arg)) {
		return;
	}
	if (JB_Msg_SyntaxEquals(((Message*)JB_Ring_PrevSib(arg)), JB_LUB[358], false)) {
		frm->Varies = true;
	}
	{
		Message* l = ((Message*)JB_Ring_First(arg));
		while (l) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(l));
			bit_pos = SC_VM_Builder__GenAcc(l, bit_pos, p++);
			l = _Nf1;
		};
		;
	}
	;
	if ((bit_pos < 32) and (p < 5)) {
		SC_VM_Builder__GenAcc(nil, bit_pos, 5);
	}
	JB_FS_AppendByte(SC__VM_Builder_form_h, '\n');
}

int SC_VM_Builder__Init_() {
	{
		JB_SetRef(SC__VM_Builder_NameList, JB_Array_Constructor0(nil));
		JB_SetRef(SC__VM_Builder_form_h, JB_FS_Constructor(nil));
		JB_SetRef(SC__VM_Builder_parent, JB_LUB[0]);
		SC__VM_Builder_NormalPos = 0;
		SC__VM_Builder_HighPos = 112;
	}
	;
	return 0;
}

int SC_VM_Builder__InitCode_() {
	return 0;
}

void SC_VM_Builder__MakeJump(Message* msg, FastString* jump) {
	//;
	JB_FS_AppendString(jump, JB_LUB[244]);
	JB_FS_AppendString(jump, msg->Name);
	JB_FS_AppendString(jump, JB_LUB[302]);
	//;
}

void SC_VM_Builder__MakeTheVM() {
	SC_Imp_Use(SC__Comp_Project);
	if ((!SC_VM_Builder__BuildFiles())) {
		return;
	}
	SC_TreeAssembler__InitAll();
	SC_ASM__TestASM();
}

void SC_VM_Builder__MakeVM(Message* tmp, FastString* vm) {
	if ((!JB_Msg_EqualsSyx(tmp, JB_SyxTmp, false))) {
		return;
	}
	Message* p = ((Message*)JB_Ring_PrevSib(tmp));
	if (JB_Msg_EqualsSyx(p, JB_SyxSheb, false)) {
		//;
		JB_FS_AppendString(vm, JB_LUB[36]);
		JB_FS_AppendString(vm, p->Name);
		JB_FS_AppendByte(vm, '\n');
		//;
	}
	Message* arg = ((Message*)JB_Ring_Last(tmp));
	//;
	JB_FS_AppendString(vm, JB_LUB[2101]);
	JB_FS_AppendString(vm, tmp->Name);
	JB_FS_AppendString(vm, JB_LUB[560]);
	//;
	if ((!JB_Msg_FindSyxName(arg, JB_SyxTmp, JB_LUB[1440], false))) {
		JB_FS_AppendByte(vm, '_');
	}
	JB_FS_AppendByte(vm, '\n');
	{
		Message* line = ((Message*)JB_Ring_First(arg));
		while (line) {
			Message* _Nf3 = ((Message*)JB_Ring_NextSib(line));
			SC_VM_Builder__VMLine(line, vm);
			line = _Nf3;
		};
		;
	};
}

void SC_VM_Builder__VMCpp(FastString* vm, FastString* jump) {
	{
		Array* _LoopSrcf2 = SC__VM_Builder_NameList;
		int _if0 = 0;
		while (true) {
			Message* tmp = ((Message*)JB_Array_Value(_LoopSrcf2, _if0));
			if (tmp == nil) {
				break;
			}
			SC_VM_Builder__MakeVM(tmp, vm);
			SC_VM_Builder__MakeJump(tmp, jump);
			_if0++;
		};
	}
	;
	JB_FS_AppendString(vm, JB_LUB[2102]);
}

void SC_VM_Builder__VMDecl(Message* tmp, Array* msgs) {
	Message* arg = ((Message*)JB_Ring_Last(tmp));
	Message* prms = ((Message*)JB_Ring_First(tmp));
	JB_String* name = SC_Str_ASMNormalise(JB_Msg_FirstName(prms));
	xC2xB5Form* form = ((xC2xB5Form*)JB_Dict_ValueLower(SC__xC2xB5Form_Forms, name));
	if ((!form)) {
		return;
	}
	byte id = ((byte)JB_Ternary(form->Varies, SC__VM_Builder_HighPos++, ((byte)SC__VM_Builder_NormalPos++)));
	SC__ASM_Encoders[id] = SC__ASM_Forms[form->Index];
	(JB_Array_ValueSet(msgs, id, tmp));
	name = JB_Str_OperatorPlus(JB_LUB[614], name);
	JB_Tree_SyntaxAppend(SC__VM_Builder_ModuleArg, SC_NewDeclWithStrStr(name, JB_LUB[0]));
	JB_Tree_SyntaxAppend(SC__VM_Builder_ModuleArg, SC_NewEqRelWithMsgMsg(JB_Syx_OperatorPlus(JB_SyxThg, tmp->Name), JB_int_Msg(((int)id))));
}

void SC_VM_Builder__VMLine(Message* line, FastString* vm) {
	if (JB_Msg_EqualsSyx(line, JB_SyxSheb, false)) {
		//;
		JB_FS_AppendString(vm, JB_LUB[36]);
		JB_FS_AppendString(vm, line->Name);
		JB_FS_AppendByte(vm, '\n');
		//;
	}
	 else {
		JB_FS_AppendByte(vm, '\t');
		JB_FreeIfDead(JB_Msg_Render(line, vm));
		JB_FS_AppendByte(vm, ';');
	}
	JB_FS_AppendByte(vm, '\n');
}

Array* SC_VM_Builder__VMSpd(Message* list) {
	Array* rz = ((Array*)JB_Array_Constructor0(nil));
	JB_Array_AppendCount(rz, JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[832]), 128);
	{
		Message* ch = ((Message*)JB_Ring_First(list));
		while (ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(ch));
			SC_VM_Builder__VMTmp(ch, rz);
			ch = _Nf1;
		};
		;
	}
	;
	return rz;
}

void SC_VM_Builder__VMTmp(Message* tmp, Array* msgs) {
	if (((JB_Msg_EqualsSyx(tmp, JB_SyxTmp, false))) and ((!JB_Msg_SyntaxEquals(tmp, JB_LUB[1664], false)) and (!JB_Msg_SyntaxEquals(tmp, JB_LUB[1700], false)))) {
		SC_VM_Builder__VMDecl(tmp, msgs);
	}
}



void SC___junktest_5____Abc(bool g) {
	//visible;
	ivec2 x = ivec2{0, ((int)((byte)0))};
	if ((1234 == 1) or (1234 == 2)) {
		debugger;
	}
	JB_FreeIfDead(SC___junktest_6____AbcVis());
	if (g) {
		if ((!_once1)) {
			_once1 = true;
			JB_PrintLine(JB_LUB[1470]);
		}
	}
	 else {
		if ((!_once2)) {
			_once2 = true;
			JB_PrintLine(JB_LUB[1596]);
		}
	}
}

int SC___junktest_5____Init_() {
	{
		SC____junktest_5___x[0] = kSC____junktest_5___a;
		SC____junktest_5___x[1] = kSC____junktest_5___b;
		SC____junktest_5___x[2] = kSC____junktest_5___c;
		//;
	}
	;
	return 0;
}

int SC___junktest_5____InitCode_() {
	return 0;
}



AsmReg SC_asmOps__Assign(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_BOR, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 0);
	return dest;
}

AsmReg SC_asmOps__BitAnd(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_BAND, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__BitOr(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_BOR, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__BitXor(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_BXOR, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__Div(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_DIV, 31, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)));
	return dest;
}

AsmReg SC_asmOps__Equals(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_CMPE, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 1, 0);
	return dest;
}

AsmReg SC_asmOps__Less(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_CMPI, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 1);
	return dest;
}

AsmReg SC_asmOps__LessEq(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_CMPI, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 1);
	return dest;
}

AsmReg SC_asmOps__Minus(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_SUB, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__Mod(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_DIV, SC_Reg_ToInt((&dest)), 31, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)));
	return dest;
}

AsmReg SC_asmOps__More(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_CMPI, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 1);
	return dest;
}

AsmReg SC_asmOps__MoreEq(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_CMPI, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0, 1);
	return dest;
}

AsmReg SC_asmOps__Mul(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_MUL, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__NotEq(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_CMPN, SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 1, 0);
	return dest;
}

AsmReg SC_asmOps__Plus(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	debugger;
	SC_flat_AddASM(self, dbg, kSC__ASM_ADD, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__ROL(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_BROL, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__ROR(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_BROR, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__SHL(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_SHLS, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}

AsmReg SC_asmOps__SHR(ASMFuncState* self, AsmReg dest, AsmReg L, AsmReg R, Message* dbg) {
	SC_flat_AddASM(self, dbg, kSC__ASM_SHRU, SC_Reg_ToInt((&dest)), SC_Reg_ToInt((&L)), SC_Reg_ToInt((&R)), 0);
	return dest;
}


JB_String* SC_image__ConvertPNGToVOI(JB_String* p) {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	JB_SetRef(rz, JB_Str__Error());
	int x = 0;
	int y = 0;
	int comp = 0;
	byte* img = JB_Img__LoadPNG(p->Addr, JB_Str_Length(p), (&x), (&y), (&comp), 4);
	if (img) {
		int n = 0;
		byte* qoi = JB_Img__WriteQOI(img, x, y, (&n));
		if (qoi) {
			JB_String* _tmPf0 = JB_Incr(JB_Str__Freeable(qoi, n));
			JB_SetRef(rz, JB_Str_Compress(_tmPf0, kJB__MZLab_Fast, nil));
			JB_Decr(_tmPf0);
		}
	}
	JB_free(img);
	JB_SafeDecr(rz);
	return rz;
}


void SC___junktest_11__() {
	//visible;
	JB_String* sss = JB_Incr(JB_LUB[1470]);
	JB_String* y = JB_Incr(((JB_String*)JB_Ternary(JB_f_SyntaxAccess(0.5f), ((JB_String*)JB_Str_Decompress(sss, JB_int__Max(), nil)), ((JB_String*)sss))));
	JB_Decr(sss);
	JB_PrintLine(y);
	JB_Decr(y);
}

void SC___junktest_1__() {
	//visible;
	Array* r = JB_Incr((JB_Array_Constructor0(nil)));
	DTWrap* _tmPf0 = JB_Incr(JB_Wrap_ConstructorInt(nil, 1));
	JB_Array_SyntaxAppend(r, _tmPf0);
	JB_Decr(_tmPf0);
	DTWrap* _tmPf1 = JB_Incr(JB_Wrap_ConstructorInt(nil, 2));
	JB_Array_SyntaxAppend(r, _tmPf1);
	JB_Decr(_tmPf1);
	DTWrap* _tmPf2 = JB_Incr(JB_Wrap_ConstructorInt(nil, 3));
	JB_Array_SyntaxAppend(r, _tmPf2);
	JB_Decr(_tmPf2);
	ErrorSeverity i = 2;
	DTWrap* v = JB_Incr(((DTWrap*)JB_Array_Value(r, i)));
	JB_Decr(r);
	JB_Decr(v);
}

void SC___junktest_2__() {
	//visible;
	JB_List* r1 = JB_Incr(JB_Ring_Constructor0(nil));
	if (0.5f) {
		JB_SetRef(r1, nil);
	}
	JB_List* r2 = JB_Incr(JB_Ring_Constructor0(nil));
	{
		JB_List* _tmP0 = JB_Incr(JB_Ring_First(r1));
		if (_tmP0) {
			int i2 = 0;
			i2 = JB_Tree_Dist(_tmP0, r2);
		}
		JB_Decr(_tmP0);
	}
	;
	JB_Decr(r1);
	JB_Decr(r2);
}

bool SC___junktest_3__(IntRange data) {
	//visible;
	ivec4 x = ((ivec4){});
	x = SC_ivec4___junktest_4__Set(x, 1);
	return false;
}

void SC_AddToStaticSection(Message* arg, Message* ToAdd) {
	JB_Incr(arg);
	Message* Static = JB_Incr(JB_Msg_FindSyxName(arg, JB_SyxTmp, JB_LUB[1799], false));
	if (Static) {
		JB_SetRef(arg, ((Message*)JB_Ring_Last(Static)));
		if ((!JB_Msg_EqualsSyx(arg, JB_SyxArg, false))) {
			JB_Msg_SyntaxExpect(Static, JB_LUB[1014]);
			JB_Decr(arg);
			JB_Decr(Static);
			return;
		}
	}
	 else {
		JB_SetRef(Static, (JB_Syx_Msg(JB_SyxTmp, JB_LUB[1799])));
		JB_Tree_SyntaxAppend(arg, Static);
		JB_SetRef(arg, (JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
		JB_Tree_SyntaxAppend(Static, arg);
	}
	JB_Decr(Static);
	JB_Tree_SyntaxAppend(arg, ToAdd);
	JB_Decr(arg);
}

int SC_ArrayInOrderCheck(int InOrder, Message* msg) {
	if ((InOrder >= 0) and (JB_Msg_EqualsSyx(msg, JB_SyxNum, false))) {
		if (JB_Msg_Int(msg, 0) == InOrder) {
			return InOrder + 1;
		}
	}
	return -1;
}

bool SC_CanOpCompare(Message* exp, SCDecl* lc, SCDecl* rc, SCOperator* comp) {
	return ((!JB_Msg_EqualsSyx(((Message*)JB_Ring_Parent(exp)), JB_SyxArg, false))) and (SC_Class_CanCompare(lc->Type, rc, ((bool)SC_Opp_SyntaxIs(comp, kSC__OpMode_EqualOrNot))));
}

void SC_ClassLinkageTable_cpp_class(SCFunction* fn, Message* node, SCNode* name_space) {
}

void SC_ClassLinkageTable_cpp_part(SCFunction* fn, Message* node, SCNode* name_space) {
	JB_FreeIfDead(SC_Base__LoadCppPart(node, name_space, node));
}

void SC_ClassLinkageTable_cpp_wrapper(SCFunction* fn, Message* node, SCNode* name_space) {
}

void SC_ClassLinkageTable_datatype(SCFunction* fn, Message* node, SCNode* name_space) {
	if (JB_Object_FastIsa(name_space, &SCClassData)) {
		if ((!SC_Class_IsStruct(((SCClass*)name_space)))) {
			JB_Msg_SyntaxExpect(node, JB_LUB[859]);
			return;
		}
		Message* value = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
		if (value) {
			JB_Msg_ExpectLast(value, JB_LUB[0]);
		}
		JB_Decr(value);
	}
}

void SC_ClassLinkageTable_ignore(SCFunction* fn, Message* node, SCNode* name_space) {
}

void SC_ClassLinkageTable_noearlyfree(SCFunction* fn, Message* node, SCNode* name_space) {
}

void SC_ClassLinkageTable_numeric(SCFunction* fn, Message* node, SCNode* name_space) {
	if (JB_Object_MustBe(name_space, &SCClassData, node)) {
		if ((!SC_Class_IsDataTypeOnly(((SCClass*)name_space)))) {
			JB_Msg_SyntaxExpect(node, JB_LUB[858]);
			return;
		}
		Message* type = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
		if ((!type)) {
			JB_Decr(type);
			return;
		}
		((SCClass*)name_space)->TypeInfo = kJB__TC_UnusedType;
		if ((JB_Msg_SyntaxEquals(type, JB_LUB[1649], false)) or (JB_Msg_SyntaxEquals(type, JB_LUB[896], false))) {
			((SCClass*)name_space)->NumericReduction = kSC__NumericLoss_Symbol;
		}
		 else if (JB_Msg_SyntaxEquals(type, JB_LUB[1212], false)) {
			((SCClass*)name_space)->NumericReduction = kSC__NumericLoss_Fixed;
		}
		 else if (JB_Msg_SyntaxEquals(type, JB_LUB[1657], false)) {
			((SCClass*)name_space)->NumericReduction = kSC__NumericLoss_Flag;
		}
		 else {
			if (true) {
				JB_Msg_SyntaxExpect(type, nil);
			}
		}
		JB_Decr(type);
	}
}

void SC_ClassLinkageTable_visible(SCFunction* fn, Message* node, SCNode* name_space) {
}

void SC_ClassLinkageTable_wrapper(SCFunction* fn, Message* node, SCNode* name_space) {
	if (JB_Object_FastIsa(name_space, &SCClassData)) {
		((SCClass*)name_space)->IsWrapper = 1;
		Message* f = JB_Incr(((Message*)JB_Ring_First(node)));
		if (f) {
			JB_Msg_Expect(f, JB_SyxThg, nil);
			JB_Msg_ExpectLast(f, JB_LUB[0]);
			if (JB_Msg_SyntaxEquals(f, JB_LUB[2019], false)) {
				((SCClass*)name_space)->IsWrapper = 2;
			}
			 else {
				if (true) {
					JB_Msg_SyntaxExpect(f, nil);
				}
			}
		}
		JB_Decr(f);
	}
}

SCClass* SC_ClassOfObjForC(Message* curr) {
	if (JB_Msg_EqualsSyx(curr, JB_SyxFunc, false)) {
		SCFunction* fnc = JB_Incr(SC_Msg_MsgFunc(curr));
		if (fnc) {
			SCDecl* rt = JB_Incr(fnc->ReturnType);
			if (rt) {
				SCClass* _tmPf1 = JB_Incr(rt->Type);
				JB_Decr(rt);
				JB_Decr(fnc);
				JB_SafeDecr(_tmPf1);
				return _tmPf1;
			}
			JB_Decr(rt);
		}
		JB_Decr(fnc);
		return nil;
	}
	JB_Object* obj = JB_Incr(curr->Obj);
	if (JB_Object_FastIsa(obj, &SCDeclData)) {
		SCClass* _tmPf0 = JB_Incr(((SCDecl*)obj)->Type);
		JB_Decr(obj);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	if (JB_Object_FastIsa(obj, &SCClassData)) {
		JB_SafeDecr(obj);
		return ((SCClass*)obj);
	}
	if (JB_Object_FastIsa(obj, &SCModuleData)) {
		if (((SCModule*)obj)->Cls) {
			JB_Decr(obj);
			return JB_TypeJBClass;
		}
	}
	JB_Decr(obj);
	return nil;
}

SCNode* SC_ClsCollectTable_pragma(Message* node, SCNode* name_space, Message* ErrPlace) {
	if (true) {
		JB_Msg_SyntaxExpect(node, nil);
	}
	return nil;
}

void SC_CollectDeclsFuncBody(Message* arg, SCNode* scarg) {
	SC_CollectDeclsFuncBodyJustWhatWeNewlyMade(arg, scarg);
}

void SC_CollectDeclsFuncBodyJustWhatWeNewlyMade(Message* arg, SCNode* scarg) {
	{
		Message* item = ((Message*)JB_Ring_First(arg));
		while (item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(item));
			if (JB_Msg_EqualsSyx(item, JB_SyxDecl, false)) {
				SC_Msg_CollectFromBody(item, scarg);
			}
			item = _Nf1;
		};
		;
	};
}

void SC_CollectDeclsFuncBodyUnsureHowToRemove(Message* arg, SCNode* scarg) {
	SC_CollectDeclsFuncBodyJustWhatWeNewlyMade(arg, scarg);
}

void SC_CollectDeclsGlobals(Message* arg, SCNode* scarg) {
	{
		Message* item = ((Message*)JB_Ring_First(arg));
		while (item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(item));
			if (JB_Msg_EqualsSyx(item, JB_SyxDecl, false)) {
				if ((!SC_Msg_CollectAGlobalDecl(item, scarg))) {
					return;
				}
			}
			item = _Nf1;
		};
		;
	};
}

bool JB_CompareError(Message* expected, Message* found) {
	JB_Incr(found);
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	//;
	JB_FS_AppendString(fs, JB_LUB[846]);
	JB_String* _tmPf3 = JB_Incr(JB_Msg_Locate(expected));
	JB_FS_AppendString(fs, _tmPf3);
	JB_Decr(_tmPf3);
	JB_FS_AppendString(fs, JB_LUB[168]);
	JB_String* _tmPf4 = JB_Incr(JB_Msg_Locate(found));
	JB_FS_AppendString(fs, _tmPf4);
	JB_Decr(_tmPf4);
	JB_FS_AppendByte(fs, '\n');
	//;
	//;
	JB_FS_AppendString(fs, JB_LUB[1863]);
	Message* _tmPf6 = JB_Incr(JB_Msg_PoorAnt(expected));
	JB_String* _tmPf5 = JB_Incr(JB_Msg_Locate(_tmPf6));
	JB_Decr(_tmPf6);
	JB_FS_AppendString(fs, _tmPf5);
	JB_Decr(_tmPf5);
	JB_FS_AppendByte(fs, '\n');
	//;
	if (found) {
		//;
		JB_FS_AppendString(fs, JB_LUB[1864]);
		Message* _tmPf8 = JB_Incr(JB_Msg_PoorAnt(found));
		JB_String* _tmPf7 = JB_Incr(JB_Msg_Locate(_tmPf8));
		JB_Decr(_tmPf8);
		JB_FS_AppendString(fs, _tmPf7);
		JB_Decr(_tmPf7);
		JB_FS_AppendByte(fs, '\n');
		//;
	}
	 else {
		JB_SetRef(found, expected);
	}
	JB_Obj_PrintLine(fs);
	JB_Decr(fs);
	JB_Msg_SyntaxExpect(found, nil);
	JB_Decr(found);
	return false;
}

void SC_CppRefTable_disowns(SCFunction* fn, Message* node, SCNode* name_space) {
}

void SC_CppRefTable_disturbs(SCFunction* fn, Message* node, SCNode* name_space) {
}

void SC_Create_JeeboxTest(Message* msg) {
	if (true) {
		JB_ErrorReceiver* _tmPf2 = JB_Incr(JB_Rec_Constructor(nil));
		JB_ErrorReceiver* _usingf0 = JB_Incr(JB_Rec_SyntaxUsing(_tmPf2));
		JB_Decr(_tmPf2);
		JB_File* f = JB_Incr(SC_Comp__InputFile(nil, JB_LUB[1936], nil));
		if (f == nil) {
			JB_Str_SyntaxExpect(JB_LUB[1937]);
			JB_Decr(f);
			JB_Decr(_usingf0);
			return;
		}
		JB_String* s = JB_Incr(JB_File_ReadAll(f, 134217728, true));
		JB_Decr(f);
		if (JB_Msg_SyntaxEquals(msg, JB_LUB[1445], true)) {
			//using;
			MessagePosition _usingf1 = JB_Msg_SyntaxUsing(msg);
			JB_SetRef(s, JB_Str_Digest(s));
			JB_MsgPos_SyntaxUsingComplete((&_usingf1));
			JB_MsgPos_Destructor((&_usingf1));
		}
		JB_Msg_BecomeStr(msg, JB_SyxStr, s);
		JB_Decr(s);
		JB_Rec_SyntaxUsingComplete(_usingf0);
		JB_Decr(_usingf0);
	}
}

SCDecl* SC_CustomFuncOp(Message* exp, SCOperator* comp, SCNode* name_space, Message* RN) {
	JB_Msg_BecomeStr(exp, JB_SyxDot, comp->FuncName);
	Message* prm = (JB_Syx_Msg(JB_SyxPrm, JB_LUB[0]));
	JB_Tree_SyntaxAppend(prm, RN);
	JB_Tree_SyntaxAppend(exp, prm);
	JB_Tree_Remove(((Message*)JB_Tree_Second(exp)));
	SCDecl* ty = SC_TypeOfExpr(exp, name_space, nil);
	if ((!ty)) {
		return nil;
	}
	if (((bool)RN) and (prm->Obj == SC__Comp_fnAs)) {
		SCClass* cls = SC_Msg_ObjCls(RN);
		if (cls) {
			if ((!cls->HasSubClass)) {
				JB_SetRef(prm->Obj, SC__Comp_fnFastAs);
			}
			return cls->TypeNormal;
		}
	}
	return ty;
}

SCDecl* SC_DeclOfObjForC(Message* curr) {
	if (JB_Msg_EqualsSyx(curr, JB_SyxFunc, false)) {
		SCFunction* fnc = JB_Incr(SC_Msg_MsgFunc(curr));
		if (fnc) {
			SCDecl* _tmPf3 = JB_Incr(fnc->ReturnType);
			JB_Decr(fnc);
			JB_SafeDecr(_tmPf3);
			return _tmPf3;
		}
		JB_Decr(fnc);
	}
	JB_Object* obj = JB_Incr(curr->Obj);
	if (JB_Object_FastIsa(obj, &SCDeclData)) {
		JB_SafeDecr(obj);
		return ((SCDecl*)obj);
	}
	if (JB_Object_FastIsa(obj, &SCClassData)) {
		SCDecl* _tmPf1 = JB_Incr(((SCClass*)obj)->TypeNormal);
		JB_Decr(obj);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	if (JB_Object_FastIsa(obj, &SCFunctionData)) {
		SCDecl* _tmPf2 = JB_Incr(((SCFunction*)obj)->ReturnType);
		JB_Decr(obj);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	if (JB_Object_FastIsa(obj, &SCModuleData)) {
		SCClass* cls = JB_Incr(((SCModule*)obj)->Cls);
		if (cls) {
			SCDecl* _tmPf0 = JB_Incr(cls->ClassType);
			JB_Decr(cls);
			JB_Decr(obj);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(cls);
	}
	JB_Decr(obj);
	return nil;
}

Message* SC_DeclsDefault(Message* def) {
	if (SC_Msg_IsSetRel(def)) {
		return ((Message*)JB_Ring_Last(def));
	}
	return nil;
}

Message* SC_DefaultStitch(Message* Default, Message* dcl) {
	Message* rz = nil;
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(dcl);
	rz = JB_Msg_Msg(dcl, JB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(rz, ((Message*)JB_Tree_Second(dcl)));
	JB_Msg_AppendSyx(rz, JB_SyxOpp, JB_LUB[587]);
	JB_Tree_SyntaxAppend(rz, Default);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return rz;
}

SCNode* SC_DontRemove(Message* node, SCNode* name_space, Message* ErrPlace) {
	return SC__Comp_program;
}

SCDecl* SC_DoOpCompare(Message* exp, SCDecl* lc, SCDecl* rc, SCOperator* comp, SCNode* name_space) {
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(exp);
	Message* dot = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[0])));
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(exp)));
	JB_Tree_SyntaxAppend(dot, _tmPf2);
	JB_Decr(_tmPf2);
	Message* _tmPf3 = ({
		Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_Last(exp)));
		JB_Tree_SyntaxAppend(__imPf1, _tmPf4);
		JB_Decr(_tmPf4);
		JB_String* _tmPf6 = JB_Incr(SC_Opp_CaseAwareStr(comp));
		Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxThg, _tmPf6));
		JB_Decr(_tmPf6);
		JB_Tree_SyntaxAppend(__imPf1, (_tmPf5));
		JB_Decr(_tmPf5);
		JB_SafeDecr(nil);
		 __imPf1;
	});
	JB_Tree_SyntaxAppend(dot, _tmPf3);
	JB_Decr(_tmPf3);
	(JB_Ring_FirstSet(exp, dot));
	if (SC_Opp_SyntaxIs(comp, kSC__OpMode_EqualOrNot)) {
		Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_Last(exp)));
		JB_Tree_Remove(_tmPf7);
		JB_Decr(_tmPf7);
		JB_SetRef(dot->Name, JB_LUB[1257]);
		if (JB_Str_Equals(comp->CompOp, JB_LUB[216], false)) {
			JB_Msg_BecomeStr(exp, JB_SyxBRel, JB_LUB[215]);
			JB_Tree_SyntaxAppend(exp, dot);
		}
		 else {
			JB_Msg_BecomeStr(exp, JB_SyxBra, JB_LUB[0]);
		}
	}
	 else {
		JB_SetRef(dot->Name, JB_LUB[1254]);
		Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_Last(exp)));
		JB_SetRef(_tmPf8->Name, comp->CompOp);
		JB_Decr(_tmPf8);
		JB_Msg_AppendSyx(exp, JB_SyxNum, comp->CompParam);
	}
	JB_FreeIfDead(SC_TypeOfExpr(dot, name_space, nil));
	JB_Decr(dot);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	SCDecl* _tmPf9 = JB_Incr(JB_TypeBool->TypeNormal);
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(_tmPf9);
	return _tmPf9;
}

JB_String* JB_EntityTest() {
	JB_String* replicate = JB_Incr(JB_LUB[1416]);
	Dictionary* repl = JB_Incr(JB_Dict_Constructor(nil));
	(JB_Dict_ValueSet(repl, JB_LUB[1415], JB_LUB[42]));
	JB_MSR_DecodeEntitySet(repl, true);
	JB_MSR_EscapeCodeSet(repl, true);
	JB_String* s3 = JB_Incr(JB_Str_Unescape(replicate));
	JB_SetRef(replicate, JB_Str_MultiReplaceAll(replicate, repl, JB_StdErr));
	JB_Decr(repl);
	if ((!((JB_Str_Equals(JB__Constants_Name, replicate, false)) and (JB_Str_Equals(JB__Constants_Name, s3, false))))) {
		debugger;
	}
	JB_Decr(s3);
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(replicate));
	JB_Decr(replicate);
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, JB_LUB[188]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool SC_ExecSorter(JB_Object* a, JB_Object* b) {
	return JB_Str_CompareStr(((SCFunction*)a)->Description, ((SCFunction*)b)->Description, false) <= -1;
}

Message* SC_ExpandToBool(Message* inside, SCNode* name_space) {
	Message* rz = nil;
	SCDecl* decl = SC_TypeOfExpr(inside, name_space, nil);
	if ((!decl)) {
		return nil;
	}
	rz = SC_Decl_ExpectMatch(JB_TypeBool->TypeNormal, decl, kJB_kTypeCastTrue, inside, nil);
	while (((JB_Msg_EqualsSyx(rz, JB_SyxBra, false))) and ((JB_Msg_EqualsSyx(((Message*)JB_Ring_First(rz)), JB_SyxBra, false)))) {
		rz = SC_Msg_ReplaceWithChild(rz);
	};
	return rz;
}

SCDecl* SC_ExtractDecl(Message* c, SCNode* name_space, DeclMode Purpose) {
	SCDecl* rz = nil;
	Syntax f = c->Func;
	if (f == JB_SyxThg) {
		if (JB_Msg_SyntaxEquals(c, JB_LUB[1811], false)) {
			JB_Decr(rz);
			return JB_TypeVoid;
		}
		JB_Decr(rz);
		return SC_Comp__FindClassType(c);
	}
	if (f == JB_SyxDecl) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(c)));
		SCDecl* _tmPf20 = JB_Incr(SC_ExtractDecl(_tmPf0, name_space, Purpose));
		JB_Decr(_tmPf0);
		JB_Decr(rz);
		JB_SafeDecr(_tmPf20);
		return _tmPf20;
	}
	if (f == JB_SyxEmb) {
		SC_Msg_ExpectEmpty(c);
		JB_Decr(rz);
		return nil;
	}
	if (f == JB_SyxBra) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(c)));
		SCDecl* _tmPf19 = JB_Incr(SC_ExtractDecl(_tmPf1, name_space, Purpose));
		JB_Decr(_tmPf1);
		JB_Decr(rz);
		JB_SafeDecr(_tmPf19);
		return _tmPf19;
	}
	if ((f == JB_SyxSThg) and ((JB_Msg_SyntaxEquals(c, JB_LUB[358], false)))) {
		JB_Decr(rz);
		return SC_Base_RequireContained(name_space, c);
	}
	if ((f == JB_SyxList) and (!JB_Ring_HasChildren(c))) {
		Message* p = JB_Incr(SC_Msg_UpToType(c));
		if (p) {
			Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(p)));
			SCDecl* _tmPf18 = JB_Incr(SC_TypeOfExpr(_tmPf2, name_space, nil));
			JB_Decr(_tmPf2);
			JB_Decr(p);
			JB_Decr(rz);
			JB_SafeDecr(_tmPf18);
			return _tmPf18;
		}
		JB_Decr(p);
	}
	if (JB_Msg_EqualsSyx(c, JB_SyxAcc, false)) {
		Message* Prms = JB_Incr(((Message*)JB_Tree_Second(c)));
		if (JB_Ring_HasChildren(Prms)) {
			Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(c)));
			SCDecl* R = JB_Incr(SC_ExtractDecl(_tmPf3, name_space, Purpose));
			JB_Decr(_tmPf3);
			if ((!R)) {
				JB_Decr(R);
				JB_Decr(Prms);
				JB_Decr(rz);
				return nil;
			}
			SCDecl* _tmPf17 = JB_Incr(SC_Decl_ExtractAmount(R, Prms, name_space));
			JB_Decr(R);
			JB_Decr(Prms);
			JB_Decr(rz);
			JB_SafeDecr(_tmPf17);
			return _tmPf17;
		}
		JB_Decr(Prms);
		f = JB_SyxRel;
		c->Func = f;
		Message* fi = JB_Incr(((Message*)JB_Ring_First(c)));
		JB_Tree_Clear(c);
		JB_Msg_AppendSyx(c, JB_SyxThg, JB_LUB[1784]);
		JB_Msg_AppendSyx(c, JB_SyxOpp, JB_LUB[1839]);
		JB_Tree_SyntaxAppend(c, fi);
		JB_Decr(fi);
	}
	if (f == JB_SyxFunc) {
		Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(c)));
		SCDecl* R = JB_Incr(SC_ExtractDecl(_tmPf4, name_space, Purpose));
		JB_Decr(_tmPf4);
		if ((!R)) {
			JB_Decr(R);
			JB_Decr(rz);
			return nil;
		}
		Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_Last(c)));
		SCDecl* _tmPf16 = JB_Incr(SC_Decl_RefineDecl(R, _tmPf5));
		JB_Decr(R);
		JB_Decr(_tmPf5);
		JB_Decr(rz);
		JB_SafeDecr(_tmPf16);
		return _tmPf16;
	}
	if ((f == JB_SyxARel) or (f == JB_SyxBRel)) {
		Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_First(c)));
		SCDecl* R = JB_Incr(SC_ExtractDecl(_tmPf6, name_space, Purpose));
		JB_Decr(_tmPf6);
		if ((!R)) {
			JB_Decr(R);
			JB_Decr(rz);
			return nil;
		}
		if (JB_Msg_SyntaxEquals(c, JB_LUB[2083], false)) {
			SCDecl* _tmPf11 = JB_Incr(SC_Decl_MakeDataObject(R, name_space, Purpose));
			JB_Decr(R);
			JB_Decr(rz);
			JB_SafeDecr(_tmPf11);
			return _tmPf11;
		}
		if (JB_Msg_SyntaxEquals(c, JB_LUB[242], false)) {
			SCDecl* _tmPf12 = JB_Incr(SC_Decl_GetAddress(R, Purpose));
			JB_Decr(R);
			JB_Decr(rz);
			JB_SafeDecr(_tmPf12);
			return _tmPf12;
		}
		if (JB_Msg_SyntaxEquals(c, JB_LUB[599], false)) {
			SCDecl* _tmPf13 = JB_Incr(SC_Decl_MakeNewOptional(R));
			JB_Decr(R);
			JB_Decr(rz);
			JB_SafeDecr(_tmPf13);
			return _tmPf13;
		}
		if (JB_Msg_SyntaxEquals(c, JB_LUB[215], false)) {
			if (((bool)SC_Decl_StatedReal(R)) and (!JB_Msg_SyntaxIs(c, kJB__MsgParseFlags_Inserted))) {
				(JB_Msg_SyntaxDeprecate(c, JB_LUB[631]));
			}
			SCDecl* _tmPf14 = JB_Incr(SC_Decl_MakeNewReal(R));
			JB_Decr(R);
			JB_Decr(rz);
			JB_SafeDecr(_tmPf14);
			return _tmPf14;
		}
		if (JB_Msg_SyntaxEquals(c, JB_LUB[309], false)) {
			SCDecl* _tmPf15 = JB_Incr(SC_Decl_MakeBorrowed(R, JB_FreeIfDead(SC_Msg_UpToType(c)) != nil));
			JB_Decr(R);
			JB_Decr(rz);
			JB_SafeDecr(_tmPf15);
			return _tmPf15;
		}
		if (JB_Str_Exists(c->Name)) {
			if (true) {
				JB_Msg_SyntaxExpect(c, nil);
			}
		}
		JB_Decr(rz);
		JB_SafeDecr(R);
		return R;
	}
	if (f == JB_SyxName) {
		c->Func = JB_SyxThg;
		SCDecl* d = JB_Incr(SC_ExtractDecl(c, name_space, Purpose));
		if ((!d)) {
			JB_Decr(d);
			JB_Decr(rz);
			return nil;
		}
		(SC_Decl_SyntaxIsSet(d, kSC__SCDeclInfo_CompilerCreated, true));
		JB_Decr(rz);
		JB_SafeDecr(d);
		return d;
	}
	if (f == JB_SyxArg) {
		Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_First(c)));
		SCDecl* d = JB_Incr(SC_ExtractDecl(_tmPf7, name_space, Purpose));
		JB_Decr(_tmPf7);
		if ((!d)) {
			JB_Decr(d);
			JB_Decr(rz);
			return nil;
		}
		(SC_Decl_SyntaxIsSet(d, kSC__SCDeclInfo_CompilerCreated, true));
		JB_Decr(rz);
		JB_SafeDecr(d);
		return d;
	}
	if (f == JB_SyxDot) {
		JB_Decr(rz);
		return SC_Comp__FindClassType(c);
	}
	JB_SetRef(rz, SC_Decl_Constructor(nil, JB_TypeVoid_));
	int ErrCount = JB_StdErr->ErrorCount;
	if (f == JB_SyxArr) {
		Message* ch = JB_Incr(((Message*)JB_Ring_First(c)));
		if ((!ch)) {
			JB_Decr(ch);
			JB_Decr(rz);
			return JB_TypeArray->TypeNormal;
		}
		if (JB_Msg_EqualsSyx(ch, JB_SyxItem, false)) {
			JB_Msg_SyntaxExpect(c, nil);
			JB_Decr(ch);
			JB_Decr(rz);
			return nil;
		}
		SCDecl* dcl = JB_Incr(SC_ExtractDecl(ch, name_space, Purpose));
		JB_Decr(ch);
		if (dcl) {
			JB_SetRef(rz->Contains, SC_Decl_MakeContainedOptional(dcl));
			JB_SetRef(rz->Type, JB_TypeArray);
		}
		JB_Decr(dcl);
	}
	 else if (f == JB_SyxAdj) {
		(JB_Msg_SyntaxDeprecate(c, JB_LUB[1358]));
		Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_First(c)));
		Message* _tmPf9 = JB_Incr(((Message*)JB_Ring_Last(c)));
		if ((!SC_Decl_LoadContained(rz, _tmPf8, _tmPf9, name_space, Purpose))) {
			JB_Decr(_tmPf9);
			JB_Decr(_tmPf8);
			JB_Decr(rz);
			return nil;
		}
		JB_Decr(_tmPf8);
		JB_Decr(_tmPf9);
	}
	 else if (f == JB_SyxRel) {
		Message* op = JB_Incr(JB_Msg_NeedSyxInt(c, JB_SyxOpp, 1));
		if ((!op)) {
			JB_Decr(op);
			JB_Decr(rz);
			return nil;
		}
		JB_Msg_Expect(op, JB_SyxOpp, JB_LUB[1839]);
		JB_Decr(op);
		Message* contained = JB_Incr(JB_Msg_NeedSyxInt(c, JB_SyxNil, 2));
		if ((!contained)) {
			JB_Decr(contained);
			JB_Decr(rz);
			return nil;
		}
		Message* _tmPf10 = JB_Incr(((Message*)JB_Ring_First(c)));
		if ((!SC_Decl_LoadContained(rz, contained, _tmPf10, name_space, Purpose))) {
			JB_Decr(_tmPf10);
			JB_Decr(contained);
			JB_Decr(rz);
			return nil;
		}
		JB_Decr(contained);
		JB_Decr(_tmPf10);
	}
	 else if (ErrCount == JB_StdErr->ErrorCount) {
		if (true) {
			JB_Msg_SyntaxExpect(c, nil);
		}
	}
	SC_Decl_MakeContainedObject(rz, c);
	if (ErrCount != JB_StdErr->ErrorCount) {
		JB_SetRef(rz, nil);
	}
	JB_SafeDecr(rz);
	return rz;
}

void fdb(Array* r) {
	//visible;
	{
		int _if0 = 0;
		while (true) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(r, _if0));
			if (f == nil) {
				break;
			}
			JB_PrintLine(f->ExportName);
			_if0++;
		};
	};
}

Message* SC_FindBytePos(Message* Node) {
	Message* first = JB_Incr(SC_FindBytePosSub(Node));
	if (first) {
		JB_SafeDecr(first);
		return first;
	}
	JB_Decr(first);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(Node)));
	Message* msg = JB_Incr(SC_FindBytePosSub(_tmPf0));
	JB_Decr(_tmPf0);
	if (msg) {
		JB_SafeDecr(msg);
		return msg;
	}
	JB_Decr(msg);
	SCFunction* fn = JB_Incr(SC_Msg_MsgOwningFunc(Node));
	if (fn) {
		Message* _tmPf1 = JB_Incr(SC_FindBytePosSub(fn->Source));
		JB_Decr(fn);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	JB_Decr(fn);
	return nil;
}

Message* SC_FindBytePosSub(Message* Node) {
	if ((!Node) or JB_Msg_HasPosition(Node)) {
		return Node;
	}
	{
		Message* m = Node;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(Node));
		while (((bool)(m)) and (m != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(m));
			if (JB_Msg_HasPosition(m)) {
				return m;
			}
			m = _N_f2;
		};
		;
	}
	;
	return nil;
}

AsmReg SC_fn_asm_table_63(ASMFuncState* self, Message* exp, AsmReg Reg) {
	0;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_ACC(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_AREL(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_ARG(ASMFuncState* self, Message* exp, AsmReg Reg) {
	uint64 OV = SC_flat_OpenVars(self);
	AsmReg garb = SC_int_Reg(31);
	{
		Message* ch = ((Message*)JB_Ring_First(exp));
		while (ch) {
			SC_flat_Reg(self, ch, garb);
			ch = ((Message*)JB_Ring_NextSib(ch));
		};
		;
	}
	;
	SC_flat_CloseVars(self, OV);
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_BRA(ASMFuncState* self, Message* exp, AsmReg Reg) {
	Message* f = ((Message*)JB_Ring_First(exp));
	if (f) {
		if (f->Func != JB_SyxArg) {
			return SC_flat_Reg(self, f, Reg);
		}
		return SC_ASMtmp__StateExpr(self, f, SC_int_Reg(0));
	}
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_BREL(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_DECL(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_FUNC(ASMFuncState* self, Message* exp, AsmReg Reg) {
	AsmReg rz = ((AsmReg){});
	rz = SC_flat_DoFunc(self, ((Message*)JB_Ring_Last(exp)), Reg);
	return rz;
}

AsmReg SC_fn_asm_table_LIST(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_NUM(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_REL(ASMFuncState* self, Message* exp, AsmReg Reg) {
	AsmReg rz = ((AsmReg){});
	uint64 OV = SC_flat_OpenVars(self);
	rz = SC_flat_DoRels(self, ((Message*)JB_Ring_First(exp)), Reg);
	SC_flat_CloseVars(self, OV);
	return rz;
}

AsmReg SC_fn_asm_table_THG(ASMFuncState* self, Message* exp, AsmReg Reg) {
	SCDecl* d = SC_Msg_AsDecl(exp);
	if ((!d)) {
		debugger;
		return ((AsmReg){});
	}
	if (SC_Decl_SyntaxIs(d, kSC__SCDeclInfo_Const)) {
		debugger;
	}
	AsmReg r = d->DReg;
	if (r.Reg) {
		return r;
	}
	return SC_flat_AllocRegDecl(self, exp, d, Reg);
}

AsmReg SC_fn_asm_table_TMP(ASMFuncState* self, Message* exp, AsmReg Reg) {
	if (JB_Msg_SyntaxEquals(exp, JB_LUB[1593], false)) {
		return SC_ASMtmp__Debugger(self, exp, SC_int_Reg(0));
	}
	if (JB_Msg_SyntaxEquals(exp, JB_LUB[1698], false)) {
		return SC_ASMtmp__If(self, exp, SC_int_Reg(0));
	}
	if (JB_Msg_SyntaxEquals(exp, JB_LUB[1892], false)) {
		return SC_ASMtmp__Rejoin(self, exp, SC_int_Reg(0));
	}
	if (JB_Msg_SyntaxEquals(exp, JB_LUB[1899], false)) {
		return SC_ASMtmp__Return(self, exp, SC_int_Reg(0));
	}
	if (JB_Msg_SyntaxEquals(exp, JB_LUB[2048], false)) {
		return SC_ASMtmp__While(self, exp, SC_int_Reg(0));
	}
	if (true) {
		JB_Msg_SyntaxExpect(exp, JB_LUB[1346]);
	}
	debugger;
	return ((AsmReg){});
}

AsmReg SC_fn_asm_table_TYPE(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

void SC_FuncLinkageTable_cpp_part(SCFunction* fn, Message* node, SCNode* name_space) {
	JB_FreeIfDead(SC_Base__LoadCppPart(node, name_space, node));
}

void SC_FuncLinkageTable_cpp_wrapper(SCFunction* fn, Message* node, SCNode* name_space) {
}

void SC_FuncLinkageTable_ignore(SCFunction* fn, Message* node, SCNode* name_space) {
}

void SC_FuncLinkageTable_inline(SCFunction* fn, Message* node, SCNode* name_space) {
}

void SC_FuncLinkageTable_visible(SCFunction* fn, Message* node, SCNode* name_space) {
}

bool SC_FuncPreReader_description(SCFunction* self, Message* msg) {
	Message* str = JB_Incr(JB_Msg_NeedSyx(msg, JB_SyxStr));
	if (str) {
		if (self->IsDisabled) {
			if (true) {
				JB_Msg_SyntaxExpect(msg, JB_LUB[632]);
			}
		}
		 else {
			if (JB_Str_Exists(self->Description)) {
				JB_Msg_SyntaxExpect(msg, JB_LUB[744]);
			}
			JB_SetRef(self->Description, str->Name);
		}
	}
	JB_Decr(str);
	return false;
}

bool SC_FuncPreReader_disabled(SCFunction* self, Message* msg) {
	self->IsDisabled = true;
	JB_SetRef(self->Description, JB_LUB[689]);
	Message* s = JB_Msg_NeedSyxOK(msg, JB_SyxStr, JB_SyxNil);
	if (s) {
		JB_SetRef(self->Description, s->Name);
	}
	return false;
}

bool SC_FuncPreReader_nil(SCFunction* self, Message* msg) {
	Message* f = JB_Msg_NeedSyx(msg, JB_SyxThg);
	if ((!f)) {
		return nil;
	}
	if (JB_Msg_SyntaxEquals(f, JB_LUB[1934], true)) {
		SC_Func_NilSelff(self, msg, kSC__NilState_Optional);
	}
	 else if (JB_Msg_SyntaxEquals(f, JB_LUB[1542], true)) {
		SC_Func_MakeNilChecker(self, msg);
	}
	 else if (JB_Msg_SyntaxEquals(f, JB_LUB[1917], true)) {
		SC_Func_MakeNilChecker(self, msg);
		self->HidesProperties = true;
		self->IsInline = true;
		(SC_SCObject_IsVisibleSet(self, true));
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(f, nil);
		}
	}
	return false;
}

bool SC_FuncPreReader_numeric(SCFunction* self, Message* msg) {
	Message* f = ((Message*)JB_Ring_First(msg));
	if (f) {
		if (true) {
			JB_Msg_SyntaxExpect(f, nil);
		}
	}
	(SC_Func_SyntaxIsSet(self, kSC__FunctionType_NumberCreator, true));
	return false;
}

bool SC_FuncPreReader_opt(SCFunction* self, Message* msg) {
	Message* f = JB_Msg_NeedSyx(msg, JB_SyxThg);
	if (JB_Msg_SyntaxEquals(f, JB_LUB[1085], true)) {
		self->NoRefCounts = true;
	}
	 else if (JB_Msg_SyntaxEquals(f, JB_LUB[1786], true)) {
		Message* Min = JB_Msg_NextOf(f, JB_SyxNum);
		if (Min) {
			self->MinOpt = JB_Msg_Int(Min, 0);
		}
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(f, nil);
		}
	}
	return false;
}

bool SC_FuncPreReader_pragma(SCFunction* self, Message* msg) {
	Message* f = JB_Msg_NeedSyx(msg, JB_SyxThg);
	if (f) {
		JB_Msg_ExpectLast(f, JB_LUB[0]);
		if (JB_Msg_SyntaxEquals(f, JB_LUB[1712], true)) {
			self->IsInline = true;
		}
		 else {
			if (true) {
				JB_Msg_SyntaxExpect(f, nil);
			}
		}
	}
	return false;
}

bool SC_FuncPreReader_real(SCFunction* self, Message* msg) {
	Message* f = JB_Msg_NeedSyx(msg, JB_SyxThg);
	if ((!f)) {
		return nil;
	}
	if (JB_Msg_SyntaxEquals(f, JB_LUB[1934], true)) {
		SC_Func_NilSelff(self, msg, kSC__NilState_Real);
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(f, nil);
		}
	}
	return false;
}

bool SC_FuncPreReader_todo(SCFunction* self, Message* msg) {
	JB_Msg_ExpectLast(JB_Msg_NeedSyx(msg, JB_SyxNil), JB_LUB[0]);
	JB_Array_SyntaxAppend(SC__Comp_TodoList, msg);
	return false;
}

int JB_Init_() {
	{
		JB_SetRef(JB___AppConfString, JB_LUB[1814]);
		JB_SetRef(JB_StdErr, JB_Rec_Constructor(nil));
		JB_SetRef(JB_StdErrOriginal, JB_StdErr);
		JB_SetRef(JB__JbinHeader, JB_LUB[4]);
		JB_SetRef(JB__jBinNotJbin, JB_LUB[1098]);
		JB_SetRef(JB__SyxDict_, JB_Dict_Constructor(nil));
		JB_SyxNil = JB_Syx__StdNew(JB_Msg_Nil__, JB_LUB[1811], JB_LUB[1379]);
		JB_SyxArg = JB_Syx__StdNew(JB_Msg_Arg__, JB_LUB[1488], JB_LUB[638]);
		JB_SyxEmb = JB_Syx__StdNew(JB_Msg_Emb__, JB_LUB[1625], JB_LUB[836]);
		JB_SyxType = JB_Syx__StdNew(JB_Msg_Type__, JB_LUB[2006], JB_LUB[1333]);
		JB_SyxDecl = JB_Syx__StdNew(JB_Msg_Decl__, JB_LUB[1594], JB_LUB[815]);
		JB_SyxTmp = JB_Syx__StdNew(JB_Msg_Tmp__, JB_LUB[1998], JB_LUB[1233]);
		JB_SyxOat = JB_Syx__StdNew(JB_Msg_Oat__, JB_LUB[1836], JB_LUB[1113]);
		JB_SyxQues = JB_Syx__StdNew(JB_Msg_Ques__, JB_LUB[1885], JB_LUB[1149]);
		JB_SyxCnj = JB_Syx__StdNew(JB_Msg_Cnj__, JB_LUB[1551], JB_LUB[1559]);
		JB_SyxOpp = JB_Syx__StdNew(JB_Msg_Opp__, JB_LUB[1852], JB_LUB[1111]);
		JB_SyxThg = JB_Syx__StdNew(JB_Msg_Thg__, JB_LUB[1995], JB_LUB[1279]);
		JB_SyxSheb = JB_Syx__StdNew(JB_Msg_Sheb__, JB_LUB[1944], JB_LUB[1217]);
		JB_SyxSCnj = JB_Syx__StdNew(JB_Msg_SCnj__, JB_LUB[1928], JB_LUB[1249]);
		JB_SyxSThg = JB_Syx__StdNew(JB_Msg_SThg__, JB_LUB[1966], JB_LUB[1248]);
		JB_SyxNum = JB_Syx__StdNew(JB_Msg_Num__, JB_LUB[1832], JB_LUB[1099]);
		JB_SyxSStr = JB_Syx__StdNew(JB_Msg_SStr__, JB_LUB[1956], JB_LUB[1245]);
		JB_SyxBack = JB_Syx__StdNew(JB_Msg_Back__, JB_LUB[1506], JB_LUB[655]);
		JB_SyxChar = JB_Syx__StdNew(JB_Msg_Char__, JB_LUB[1539], JB_LUB[760]);
		JB_SyxBin = JB_Syx__StdNew(JB_Msg_Bin__, JB_LUB[1517], JB_LUB[907]);
		JB_SyxStr = JB_Syx__StdNew(JB_Msg_Str__, JB_LUB[1967], JB_LUB[1237]);
		JB_SyxUnit = JB_Syx__StdNew(JB_Msg_Unit__, JB_LUB[2020], JB_LUB[0]);
		JB_SyxARel = JB_Syx__StdNew(JB_Msg_ARel__, JB_LUB[1487], JB_LUB[628]);
		JB_SyxName = JB_Syx__StdNew(JB_Msg_Name__, JB_LUB[1806], JB_LUB[0]);
		JB_SyxDot = JB_Syx__StdNew(JB_Msg_Dot__, JB_LUB[1619], JB_LUB[830]);
		JB_SyxSDot = JB_Syx__StdNew(JB_Msg_SDot__, JB_LUB[1931], JB_LUB[1213]);
		JB_SyxFunc = JB_Syx__StdNew(JB_Msg_Func__, JB_LUB[1671], JB_LUB[890]);
		JB_SyxBRel = JB_Syx__StdNew(JB_Msg_BRel__, JB_LUB[1527], JB_LUB[665]);
		JB_SyxAdj = JB_Syx__StdNew(JB_Msg_Adj__, JB_LUB[1477], JB_LUB[627]);
		JB_SyxBadj = JB_Syx__StdNew(JB_Msg_Badj__, JB_LUB[1509], JB_LUB[657]);
		JB_SyxAcc = JB_Syx__StdNew(JB_Msg_Acc__, JB_LUB[1473], JB_LUB[623]);
		JB_SyxItem = JB_Syx__StdNew(JB_Msg_Item__, JB_LUB[1732], JB_LUB[0]);
		JB_SyxBra = JB_Syx__StdNew(JB_Msg_Bra__, JB_LUB[1524], JB_LUB[674]);
		JB_SyxList = JB_Syx__StdNew(JB_Msg_List__, JB_LUB[1761], JB_LUB[0]);
		JB_SyxPrm = JB_Syx__StdNew(JB_Msg_Prm__, JB_LUB[1880], JB_LUB[1123]);
		JB_SyxArr = JB_Syx__StdNew(JB_Msg_Arr__, JB_LUB[1491], JB_LUB[639]);
		JB_SyxFile = JB_Syx__StdNew(JB_Msg_File__, JB_LUB[1651], JB_LUB[875]);
		JB_SyxQuot = JB_Syx__StdNew(JB_Msg_Quot__, JB_LUB[1888], JB_LUB[1151]);
		JB_SyxRel = JB_Syx__StdNew(JB_Msg_Rel__, JB_LUB[1893], JB_LUB[1172]);
		JB_SyxERel = JB_Syx__StdNew(JB_Msg_ERel__, JB_LUB[1631], JB_LUB[839]);
		JB_SyxTRel = JB_Syx__StdNew(JB_Msg_TRel__, JB_LUB[2001], JB_LUB[1268]);
		JB_SyxTril = JB_Syx__StdNew(JB_Msg_Tril__, JB_LUB[2004], JB_LUB[1269]);
		JB_Syxpinn = JB_Syx__StdNew(JB_Msg_pinn__, JB_LUB[1869], JB_LUB[1135]);
		JB_Syxbinn = JB_Syx__StdNew(JB_Msg_binn__, JB_LUB[1518], JB_LUB[921]);
		JB_SyxAsk = JB_Syx__StdNew(JB_Msg_Ask__, JB_LUB[1494], JB_LUB[0]);
		JB_SyxYoda = JB_Syx__StdNew(JB_Msg_Yoda__, JB_LUB[2066], JB_LUB[1398]);
		JB_SyxSCom = JB_Syx__StdNew(JB_Msg_SCom__, JB_LUB[1929], JB_LUB[1247]);
		JB_SyxMsg = JB_Syx__StdNew(JB_Msg_Msg__, JB_LUB[1803], JB_LUB[1009]);
		JB_SyxTodo = JB_Syx__StdNew(JB_Msg_Todo__, JB_LUB[2000], JB_LUB[1308]);
		JB_Syxurl = JB_Syx__StdNew(JB_Msg_url__, JB_LUB[2025], JB_LUB[1335]);
		JB_fn_asm_table[1] = (&SC_fn_asm_table_ARG);
		JB_fn_asm_table[4] = (&SC_fn_asm_table_DECL);
		JB_fn_asm_table[14] = (&SC_fn_asm_table_NUM);
		JB_fn_asm_table[37] = (&SC_fn_asm_table_REL);
		JB_fn_asm_table[10] = (&SC_fn_asm_table_THG);
		JB_fn_asm_table[31] = (&SC_fn_asm_table_BRA);
		JB_fn_asm_table[32] = (&SC_fn_asm_table_LIST);
		JB_fn_asm_table[25] = (&SC_fn_asm_table_FUNC);
		JB_fn_asm_table[29] = (&SC_fn_asm_table_ACC);
		JB_fn_asm_table[26] = (&SC_fn_asm_table_BREL);
		JB_fn_asm_table[21] = (&SC_fn_asm_table_AREL);
		JB_fn_asm_table[3] = (&SC_fn_asm_table_TYPE);
		JB_fn_asm_table[(kSC__ASMtmp_kDebugger)] = (&SC_ASMtmp__Debugger);
		JB_fn_asm_table[(kSC__ASMtmp_kIf)] = (&SC_ASMtmp__If);
		JB_fn_asm_table[(kSC__ASMtmp_kRejoin)] = (&SC_ASMtmp__Rejoin);
		JB_fn_asm_table[(kSC__ASMtmp_kReturn)] = (&SC_ASMtmp__Return);
		JB_fn_asm_table[(kSC__ASMtmp_kWhile)] = (&SC_ASMtmp__While);
		JB_fn_asm_table[5] = (&SC_fn_asm_table_TMP);
		JB_fn_asm_table[63] = (&SC_fn_asm_table_63);
		//;
		JB_SetRef(JB_C_Letters, JB_Str_CharSetWithBool(JB_LUB[620], true));
		JB_SetRef(JB_RootCollectTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf0 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCGame3D__Love))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1769], _tmPf0));
		JB_Decr(_tmPf0);
		DTWrap* _tmPf1 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1674], _tmPf1));
		JB_Decr(_tmPf1);
		DTWrap* _tmPf2 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1642], _tmPf2));
		JB_Decr(_tmPf2);
		DTWrap* _tmPf3 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1483], _tmPf3));
		JB_Decr(_tmPf3);
		DTWrap* _tmPf4 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1573], _tmPf4));
		JB_Decr(_tmPf4);
		DTWrap* _tmPf5 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1578], _tmPf5));
		JB_Decr(_tmPf5);
		DTWrap* _tmPf6 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1572], _tmPf6));
		JB_Decr(_tmPf6);
		DTWrap* _tmPf7 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1575], _tmPf7));
		JB_Decr(_tmPf7);
		DTWrap* _tmPf8 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewHelper))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1692], _tmPf8));
		JB_Decr(_tmPf8);
		DTWrap* _tmPf9 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewMacro))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1776], _tmPf9));
		JB_Decr(_tmPf9);
		DTWrap* _tmPf10 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCThe__NewInsertion))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1715], _tmPf10));
		JB_Decr(_tmPf10);
		DTWrap* _tmPf11 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Comp__WrongConf))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1558], _tmPf11));
		JB_Decr(_tmPf11);
		DTWrap* _tmPf12 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_RootCollectTable_crash))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1579], _tmPf12));
		JB_Decr(_tmPf12);
		DTWrap* _tmPf13 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Mod__NeuModule))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1799], _tmPf13));
		JB_Decr(_tmPf13);
		DTWrap* _tmPf14 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_RootCollectTable_static))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1962], _tmPf14));
		JB_Decr(_tmPf14);
		DTWrap* _tmPf15 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCSelector__Neu))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1932], _tmPf15));
		JB_Decr(_tmPf15);
		DTWrap* _tmPf16 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NeuClass))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1545], _tmPf16));
		JB_Decr(_tmPf16);
		DTWrap* _tmPf17 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCTasks__NewTask))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1988], _tmPf17));
		JB_Decr(_tmPf17);
		DTWrap* _tmPf18 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCTasks__NewTask))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[2114], _tmPf18));
		JB_Decr(_tmPf18);
		DTWrap* _tmPf19 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NeuRole))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1903], _tmPf19));
		JB_Decr(_tmPf19);
		DTWrap* _tmPf20 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SC_API__NewExportAPI))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1639], _tmPf20));
		JB_Decr(_tmPf20);
		DTWrap* _tmPf21 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCGame3D__NeuModel))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1797], _tmPf21));
		JB_Decr(_tmPf21);
		DTWrap* _tmPf22 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewProtoType))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1884], _tmPf22));
		JB_Decr(_tmPf22);
		DTWrap* _tmPf23 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewRender))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1895], _tmPf23));
		JB_Decr(_tmPf23);
		DTWrap* _tmPf24 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1706], _tmPf24));
		JB_Decr(_tmPf24);
		DTWrap* _tmPf25 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Linkage__Collect))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1556], _tmPf25));
		JB_Decr(_tmPf25);
		DTWrap* _tmPf26 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_InbuiltShellArgs__Collect))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1945], _tmPf26));
		JB_Decr(_tmPf26);
		DTWrap* _tmPf27 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__LoadSyntax))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1977], _tmPf27));
		JB_Decr(_tmPf27);
		DTWrap* _tmPf28 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefs__Linkage))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1759], _tmPf28));
		JB_Decr(_tmPf28);
		DTWrap* _tmPf29 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NewStruct))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1973], _tmPf29));
		JB_Decr(_tmPf29);
		DTWrap* _tmPf30 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__DataType))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1586], _tmPf30));
		JB_Decr(_tmPf30);
		DTWrap* _tmPf31 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__StoreExtend))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1641], _tmPf31));
		JB_Decr(_tmPf31);
		DTWrap* _tmPf32 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__StoreExtendModule))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1643], _tmPf32));
		JB_Decr(_tmPf32);
		DTWrap* _tmPf33 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_RootCollectTable_extends))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1644], _tmPf33));
		JB_Decr(_tmPf33);
		DTWrap* _tmPf34 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NeuMain))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1777], _tmPf34));
		JB_Decr(_tmPf34);
		DTWrap* _tmPf35 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NeuLibrary))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1751], _tmPf35));
		JB_Decr(_tmPf35);
		DTWrap* _tmPf36 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1700], _tmPf36));
		JB_Decr(_tmPf36);
		DTWrap* _tmPf37 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Base__LoadCppPart)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1576], _tmPf37));
		JB_Decr(_tmPf37);
		DTWrap* _tmPf38 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__ConstantCollector)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1563], _tmPf38));
		JB_Decr(_tmPf38);
		DTWrap* _tmPf39 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__ConstantCollector)))));
		(JB_Dict_ValueSet(JB_RootCollectTable, JB_LUB[1657], _tmPf39));
		JB_Decr(_tmPf39);
		JB_SetRef(JB_ClsCollectTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf40 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewConstructor))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1564], _tmPf40));
		JB_Decr(_tmPf40);
		DTWrap* _tmPf41 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewDestructor))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1601], _tmPf41));
		JB_Decr(_tmPf41);
		DTWrap* _tmPf42 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewRender))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1895], _tmPf42));
		JB_Decr(_tmPf42);
		DTWrap* _tmPf43 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1674], _tmPf43));
		JB_Decr(_tmPf43);
		DTWrap* _tmPf44 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1642], _tmPf44));
		JB_Decr(_tmPf44);
		DTWrap* _tmPf45 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewHider))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1940], _tmPf45));
		JB_Decr(_tmPf45);
		DTWrap* _tmPf46 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewFunc))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1483], _tmPf46));
		JB_Decr(_tmPf46);
		DTWrap* _tmPf47 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewMacro))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1776], _tmPf47));
		JB_Decr(_tmPf47);
		DTWrap* _tmPf48 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewHelper))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1692], _tmPf48));
		JB_Decr(_tmPf48);
		DTWrap* _tmPf49 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Beh__NewActual))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1513], _tmPf49));
		JB_Decr(_tmPf49);
		DTWrap* _tmPf50 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Beh__NewActual))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1475], _tmPf50));
		JB_Decr(_tmPf50);
		DTWrap* _tmPf51 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Beh__NewVirtual))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[2036], _tmPf51));
		JB_Decr(_tmPf51);
		DTWrap* _tmPf52 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Iter__NeuIter))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1734], _tmPf52));
		JB_Decr(_tmPf52);
		DTWrap* _tmPf53 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NeuSyx))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1982], _tmPf53));
		JB_Decr(_tmPf53);
		DTWrap* _tmPf54 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1578], _tmPf54));
		JB_Decr(_tmPf54);
		DTWrap* _tmPf55 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewCppWrapper))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1573], _tmPf55));
		JB_Decr(_tmPf55);
		DTWrap* _tmPf56 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__NewProtoType))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1884], _tmPf56));
		JB_Decr(_tmPf56);
		DTWrap* _tmPf57 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__LoadSyntax))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1977], _tmPf57));
		JB_Decr(_tmPf57);
		DTWrap* _tmPf58 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__LoadSyntax))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1846], _tmPf58));
		JB_Decr(_tmPf58);
		DTWrap* _tmPf59 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__ProcessAs))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1881], _tmPf59));
		JB_Decr(_tmPf59);
		DTWrap* _tmPf60 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefs__ReadIntoCppRefs))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1577], _tmPf60));
		JB_Decr(_tmPf60);
		DTWrap* _tmPf61 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefs__Linkage))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1759], _tmPf61));
		JB_Decr(_tmPf61);
		DTWrap* _tmPf62 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClsCollectTable_pragma))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1874], _tmPf62));
		JB_Decr(_tmPf62);
		DTWrap* _tmPf63 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NewInnerClass))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1545], _tmPf63));
		JB_Decr(_tmPf63);
		DTWrap* _tmPf64 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Class__NewInnerClass))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1903], _tmPf64));
		JB_Decr(_tmPf64);
		DTWrap* _tmPf65 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCTasks__NewTask))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1988], _tmPf65));
		JB_Decr(_tmPf65);
		DTWrap* _tmPf66 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_SCTasks__NewTask))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[2114], _tmPf66));
		JB_Decr(_tmPf66);
		DTWrap* _tmPf67 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__DoInitAfter)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1711], _tmPf67));
		JB_Decr(_tmPf67);
		DTWrap* _tmPf68 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1700], _tmPf68));
		JB_Decr(_tmPf68);
		DTWrap* _tmPf69 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1919], _tmPf69));
		JB_Decr(_tmPf69);
		DTWrap* _tmPf70 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1576], _tmPf70));
		JB_Decr(_tmPf70);
		DTWrap* _tmPf71 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1571], _tmPf71));
		JB_Decr(_tmPf71);
		DTWrap* _tmPf72 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1574], _tmPf72));
		JB_Decr(_tmPf72);
		DTWrap* _tmPf73 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1565], _tmPf73));
		JB_Decr(_tmPf73);
		DTWrap* _tmPf74 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Class__GetDefault)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1597], _tmPf74));
		JB_Decr(_tmPf74);
		DTWrap* _tmPf75 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Class__GetFalse)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1649], _tmPf75));
		JB_Decr(_tmPf75);
		DTWrap* _tmPf76 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Class__SetSize)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1949], _tmPf76));
		JB_Decr(_tmPf76);
		DTWrap* _tmPf77 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_DontRemove)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1799], _tmPf77));
		JB_Decr(_tmPf77);
		DTWrap* _tmPf78 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__ConstantCollector)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1563], _tmPf78));
		JB_Decr(_tmPf78);
		DTWrap* _tmPf79 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Mod__ConstantCollector)))));
		(JB_Dict_ValueSet(JB_ClsCollectTable, JB_LUB[1657], _tmPf79));
		JB_Decr(_tmPf79);
		JB_SetRef(JB_kNameConf, JB_LUB[1045]);
		JB_SetRef(JB_ErrorDelayer, JB_Rec_Constructor(nil));
		JB_SetRef(JB_FuncPreReader, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf80 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_disabled))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1609], _tmPf80));
		JB_Decr(_tmPf80);
		DTWrap* _tmPf81 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_todo))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[2000], _tmPf81));
		JB_Decr(_tmPf81);
		DTWrap* _tmPf82 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_pragma))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1874], _tmPf82));
		JB_Decr(_tmPf82);
		DTWrap* _tmPf83 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_numeric))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1833], _tmPf83));
		JB_Decr(_tmPf83);
		DTWrap* _tmPf84 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_opt))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1853], _tmPf84));
		JB_Decr(_tmPf84);
		DTWrap* _tmPf85 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_nil))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1811], _tmPf85));
		JB_Decr(_tmPf85);
		DTWrap* _tmPf86 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_real))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1891], _tmPf86));
		JB_Decr(_tmPf86);
		DTWrap* _tmPf87 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncPreReader_description))));
		(JB_Dict_ValueSet(JB_FuncPreReader, JB_LUB[1600], _tmPf87));
		JB_Decr(_tmPf87);
		JB_ExprFuncs[37] = ((&SC_TypeOfRel));
		JB_ExprFuncs[26] = ((&SC_TypeOfBRel));
		JB_ExprFuncs[21] = ((&SC_TypeOfARel));
		JB_ExprFuncs[27] = ((&SC_TypeOfAdj));
		JB_ExprFuncs[25] = ((&SC_TypeOfFunc));
		JB_ExprFuncs[29] = ((&SC_TypeOfAccess));
		JB_ExprFuncs[46] = ((&SC_TypeOfMsg));
		JB_ExprFuncs[13] = ((&SC_TypeOfSthg));
		JB_ExprFuncs[23] = ((&SC_TypeOfDot));
		JB_ExprFuncs[22] = ((&SC_TypeOfSyx));
		JB_ExprFuncs[32] = ((&SC_TypeOfList));
		JB_ExprFuncs[34] = ((&SC_TypeOfArr));
		JB_ExprFuncs[1] = ((&SC_TypeOfArgArr));
		JB_ExprFuncs[17] = ((&SC_TypeOfChar));
		JB_ExprFuncs[15] = ((&SC_TypeOfSString));
		JB_ExprFuncs[30] = ((&SC_TypeOfLast));
		JB_ExprFuncs[31] = ((&SC_TypeOfBra));
		JB_ExprFuncs[19] = ((&SC_TypeOfStr));
		JB_ExprFuncs[16] = ((&SC_TypeOfStr));
		JB_ExprFuncs[14] = ((&SC_TypeOfNum));
		JB_ExprFuncs[20] = ((&SC_TypeOfUnit));
		JB_ExprFuncs[10] = ((&SC_TypeOfThg));
		JB_ExprFuncs[7] = ((&SC_TypeOfQues));
		JB_ExprFuncs[24] = ((&SC_TypeOfSDot));
		JB_ExprFuncs[3] = ((&SC_TypeOfType));
		JB_ExprFuncs[2] = ((&SC_TypeOfNothing));
		JB_ExprFuncs[11] = ((&SC_TypeOfNothing));
		JB_ExprFuncs[63] = ((&SC_TypeOfNothing));
		//;
		JB_SetRef(JB_CSHex, JB_Str_CharSetWithBool(JB_LUB[611], true));
		JB_SetRef(JB_CSNum, JB_Str_CharSetWithBool(JB_LUB[447], true));
		JB_SetRef(JB_CppRefTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf88 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefTable_disowns))));
		(JB_Dict_ValueSet(JB_CppRefTable, JB_LUB[1610], _tmPf88));
		JB_Decr(_tmPf88);
		DTWrap* _tmPf89 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_CppRefTable_disturbs))));
		(JB_Dict_ValueSet(JB_CppRefTable, JB_LUB[1614], _tmPf89));
		JB_Decr(_tmPf89);
		DTWrap* _tmPf90 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_CppRefs))));
		(JB_Dict_ValueSet(JB_CppRefTable, JB_LUB[1862], _tmPf90));
		JB_Decr(_tmPf90);
		JB_SetRef(JB_FuncLinkageTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf91 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_cpp_wrapper))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[1578], _tmPf91));
		JB_Decr(_tmPf91);
		DTWrap* _tmPf92 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_cpp_part))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[1576], _tmPf92));
		JB_Decr(_tmPf92);
		DTWrap* _tmPf93 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_CppRefs))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[1577], _tmPf93));
		JB_Decr(_tmPf93);
		DTWrap* _tmPf94 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_visible))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[2037], _tmPf94));
		JB_Decr(_tmPf94);
		DTWrap* _tmPf95 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_ignore))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[1700], _tmPf95));
		JB_Decr(_tmPf95);
		DTWrap* _tmPf96 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_FuncLinkageTable_inline))));
		(JB_Dict_ValueSet(JB_FuncLinkageTable, JB_LUB[1712], _tmPf96));
		JB_Decr(_tmPf96);
		JB_SetRef(JB_ClassLinkageTable, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf97 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_cpp_wrapper))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1578], _tmPf97));
		JB_Decr(_tmPf97);
		DTWrap* _tmPf98 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_cpp_part))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1576], _tmPf98));
		JB_Decr(_tmPf98);
		DTWrap* _tmPf99 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_CppRefs))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1577], _tmPf99));
		JB_Decr(_tmPf99);
		DTWrap* _tmPf100 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_cpp_class))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1571], _tmPf100));
		JB_Decr(_tmPf100);
		DTWrap* _tmPf101 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_visible))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[2037], _tmPf101));
		JB_Decr(_tmPf101);
		DTWrap* _tmPf102 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_ignore))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1700], _tmPf102));
		JB_Decr(_tmPf102);
		DTWrap* _tmPf103 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_noearlyfree))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1820], _tmPf103));
		JB_Decr(_tmPf103);
		DTWrap* _tmPf104 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_wrapper))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[2052], _tmPf104));
		JB_Decr(_tmPf104);
		DTWrap* _tmPf105 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_datatype))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1586], _tmPf105));
		JB_Decr(_tmPf105);
		DTWrap* _tmPf106 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_ClassLinkageTable_numeric))));
		(JB_Dict_ValueSet(JB_ClassLinkageTable, JB_LUB[1833], _tmPf106));
		JB_Decr(_tmPf106);
		JB_SetRef(JB_fs_tmp_num, JB_FS_Constructor(nil));
		JB_SyxXAtt = JB_Syx__StdNew(JB_Msg_XAtt__, JB_LUB[2056], JB_LUB[1391]);
		JB_SyxXML = JB_Syx__StdNew(JB_Msg_XML__, JB_LUB[2059], JB_LUB[1394]);
		JB_SyxXPI = JB_Syx__StdNew(JB_Msg_XPI__, JB_LUB[2060], JB_LUB[1395]);
		JB_SyxXCom = JB_Syx__StdNew(JB_Msg_XCom__, JB_LUB[2058], JB_LUB[1393]);
		JB_SyxXCDT = JB_Syx__StdNew(JB_Msg_XCDT__, JB_LUB[2057], JB_LUB[1392]);
		JB_SyxXTxt = JB_Syx__StdNew(JB_Msg_XTxt__, JB_LUB[2061], JB_LUB[1396]);
		JB_Syxmax = JB_Syx__StdNew(JB_Msg_max__, JB_LUB[1780], JB_LUB[838]);
	}
	;
	//// App;
	JB_App__Init_();
	//// AutoComplete;
	SC_AutoComplete__Init_();
	//// Compiler;
	SC_Comp__Init_();
	//// ErrorColors;
	JB_ErrorColors__Init_();
	//// ExecTable;
	SC_ExecTable__Init_();
	//// FastStringOpts;
	SC_FastStringOpts__Init_();
	//// Feedback;
	SC_FB__Init_();
	//// Interact;
	SC_AC__Init_();
	//// JB_API;
	JB_API__Init_();
	//// Jeebox;
	JB_Constants__Init_();
	//// LinkMap;
	SC_LinkMap__Init_();
	//// Linkage;
	SC_Linkage__Init_();
	//// Macros;
	SC_Macros__Init_();
	//// Options;
	SC_Options__Init_();
	//// SCGame3D;
	SC_SCGame3D__Init_();
	//// SCGlobals;
	SC__Init_();
	//// SCTasks;
	SC_SCTasks__Init_();
	//// SC_Errors;
	SC_Errors__Init_();
	//// SC_Targets;
	SC_SC_Targets__Init_();
	//// StringCorrector;
	SC_Crkt__Init_();
	//// Terminal;
	JB_Terminal__Init_();
	//// TransCompiler;
	SC_Ext__Init_();
	//// TreeAssembler;
	SC_TreeAssembler__Init_();
	//// VM_Builder;
	SC_VM_Builder__Init_();
	//// __junktest_5__;
	SC___junktest_5____Init_();
	//// parser;
	JB_Tk__Init_();
	//// zalgo;
	JB_zalgo__Init_();
	//// ErrorSeverity;
	JB_ErrorSeverity__Init_();
	//// NilReason;
	SC_NilReason__Init_();
	//// Syntax;
	JB_Syx__Init_();
	//// ASM;
	SC_ASM__Init_();
	//// ASMFuncState;
	SC_flat__Init_();
	//// ArchonPurger;
	SC_nil__Init_();
	//// CompressionStats;
	JB_MzSt__Init_();
	//// IR;
	SC_IR__Init_();
	//// IsaTester;
	SC_IsaTester__Init_();
	//// Random;
	JB_Rnd__Init_();
	//// Cpp_Export;
	SC_Cpp__Init_();
	//// ErrorReceiver;
	JB_Rec__Init_();
	//// FlowControl;
	JB_Flow__Init_();
	//// Macro;
	JB_Macro__Init_();
	//// NilTest;
	SC_NilTest__Init_();
	//// SCImport;
	SC_Imp__Init_();
	//// SCOperator;
	SC_Opp__Init_();
	//// µForm;
	SC_xC2xB5Form__Init_();
	//// File;
	JB_File__Init_();
	//// SCNode;
	SC_Base__Init_();
	//// Error;
	JB_Err__Init_();
	//// SCFunction;
	SC_Func__Init_();
	//// Instruction;
	SC_Instruction__Init_();
	JB_InitCode_();
	return 0;
}

int JB_InitCode_() {
	{
	}
	;
	SC__ASM_Forms[1] = (&JB_ASM_U0__Encode);
	SC__ASM_Forms[2] = (&JB_ASM_U1__Encode);
	SC__ASM_Forms[3] = (&JB_ASM_U2__Encode);
	SC__ASM_Forms[4] = (&JB_ASM_U3__Encode);
	SC__ASM_Forms[5] = (&JB_ASM_U4__Encode);
	SC__ASM_Forms[6] = (&JB_ASM_Func__Encode);
	SC__ASM_Forms[7] = (&JB_ASM_Cmp__Encode);
	SC__ASM_Forms[8] = (&JB_ASM_CmpEq__Encode);
	SC__ASM_Forms[9] = (&JB_ASM_Const__Encode);
	SC__ASM_Forms[10] = (&JB_ASM_Bra__Encode);
	SC__ASM_Forms[11] = (&JB_ASM_Mem__Encode);
	SC__ASM_Forms[12] = (&JB_ASM_Setn__Encode);
	SC__ASM_Forms[13] = (&JB_ASM_CNTR__Encode);
	SC__ASM_Forms[14] = (&JB_ASM_CNTC__Encode);
	SC__ASM_Forms[15] = (&JB_ASM_BFLD__Encode);
	SC__ASM_Forms[16] = (&JB_ASM_SWAP__Encode);
	//// Jeebox;
	JB_Constants__InitCode_();
	//// parser;
	JB_Tk__InitCode_();
	//// ArchonPurger;
	SC_nil__InitCode_();
	//// Random;
	JB_Rnd__InitCode_();
	//// MaterialsLol;
	SC_MaterialsLol__InitCode_();
	//// SCIterator;
	SC_Iter__InitCode_();
	//// SpdProcess;
	JB_Proc__InitCode_();
	//// SCFunction;
	SC_Func__InitCode_();
	return 0;
}

SCDecl* SC_IsPointerMath(SCDecl* L, SCDecl* R, SCOperator* opp, Message* exp) {
	if ((!SC_Opp_SyntaxIs(opp, kSC__OpMode_Addition))) {
		return nil;
	}
	if (((bool)L->PointerCount) and (SC_Decl_IsNumeric(R) == 1)) {
		return L;
	}
	if (((bool)R->PointerCount) and (SC_Decl_IsNumeric(L) == 1)) {
		return R;
	}
	if (((bool)R->PointerCount) and (((bool)L->PointerCount) and ((JB_Str_Equals(opp->Name, JB_LUB[307], false))))) {
		JB_FreeIfDead(SC_Decl_ExpectMatch(L, R, 0, exp, nil));
		return JB_TypeInt->TypeNormal;
	}
	return nil;
}

void SC_ListFunctionsSub(JB_Object* o, Array* rz) {
	if (JB_Object_FastIsa(o, &SCDeclData)) {
		o = ((SCDecl*)((SCDecl*)o)->HiderFunc);
	}
	if (JB_Object_FastIsa(o, &SCFunctionData)) {
		{
			SCFunction* f = ((SCFunction*)o);
			while (f) {
				JB_Array_SyntaxAppend(rz, f);
				f = f->NextFunc;
			};
		};
	}
}

SCDecl* SC_LowlevelArrayTransform(Message* exp, SCClass* Cls) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(exp)));
	Message* ty = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_NextSib(ty)));
	Message* prms = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (JB_Msg_EqualsSyx(prms, JB_SyxOpp, false)) {
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(prms)));
		JB_Tree_SyntaxAppend(prms, _tmPf2);
		JB_Decr(_tmPf2);
		JB_SetRef(prms->Name, JB_LUB[0]);
	}
	JB_Msg_BecomeStr(exp, JB_SyxDot, JB_LUB[1837]);
	JB_SetRef(ty->Name, JB_LUB[1784]);
	JB_Decr(ty);
	prms->Func = JB_SyxPrm;
	JB_Msg_AppendNum(prms, SC_Class_CalculateSize(Cls, 0));
	JB_Decr(prms);
	SCDecl* MemWrapper = JB_Incr(SC_TypeOfExpr(exp, SC__Comp_program, nil));
	if ((!MemWrapper)) {
		JB_Decr(MemWrapper);
		return nil;
	}
	JB_SetRef(MemWrapper, SC_Decl_CopyDecl(MemWrapper, false));
	(SC_Decl_SyntaxIsSet(MemWrapper, kSC__SCDeclInfo_NewlyCreated, true));
	JB_SetRef(MemWrapper->Contains, Cls->TypeOptional);
	JB_SafeDecr(MemWrapper);
	return MemWrapper;
}

Message* SC_MakeDecl(JB_String* Type, JB_String* Name, Message* Value, SCDeclInfo Purpose) {
	Message* rz = nil;
	rz = (JB_Syx_Msg(JB_SyxDecl, JB_LUB[0]));
	Message* f = JB_Msg_Msg(rz, JB_SyxArg, JB_LUB[0]);
	if (JB_Str_Exists(Type)) {
		(JB_Msg_SyntaxIsSet(f, kJB__MsgParseFlags_Style2, true));
		JB_Msg_AppendSyx(f, JB_SyxThg, Type);
	}
	 else {
		f->Func = JB_SyxEmb;
	}
	if ((!Value)) {
		JB_Msg_AppendSyx(rz, JB_SyxThg, Name);
		return rz;
	}
	Message* Rel = JB_Msg_Msg(rz, JB_SyxRel, JB_LUB[0]);
	Message* NameMsg = JB_Msg_Msg(Rel, JB_SyxThg, Name);
	JB_Msg_AppendSyx(Rel, JB_SyxOpp, JB_LUB[587]);
	JB_Tree_SyntaxAppend(Rel, Value);
	SCDecl* o = ((SCDecl*)JB_Object_FastAs(Value->Obj, &SCDeclData));
	if (o) {
		SCDecl* dcl = SC_Decl_CopyDecl(o, true);
		dcl->Info = (dcl->Info | Purpose);
		(SC_Decl_NameSet(dcl, Name));
		JB_SetRef(dcl->Default, Value);
		JB_SetRef(NameMsg->Obj, dcl);
		JB_SetRef(Rel->Obj, dcl);
		JB_SetRef(rz->Obj, dcl);
		JB_SetRef(f->Obj, dcl);
	}
	return rz;
}

Message* SC_MakeDeclOrRel(Message* Into, Message* namemsg, Message* value) {
	JB_Incr(value);
	Message* rz = nil;
	if ((!Into)) {
		JB_Decr(value);
		JB_Decr(rz);
		return nil;
	}
	JB_SetRef(rz, ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxDecl, JB_LUB[0])));
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf1));
		JB_Decr(_tmPf1);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	if (value) {
		JB_SetRef(value, SC_NewEqRelWithMsgMsg(namemsg, value));
	}
	 else {
		JB_SetRef(value, namemsg);
	}
	JB_Tree_SyntaxAppend(rz, value);
	JB_Decr(value);
	(JB_Ring_FirstSet(Into, rz));
	JB_SafeDecr(rz);
	return rz;
}

void SC_MoveFutureStaticsIn(Message* msg) {
	if ((!msg)) {
		return;
	}
	{
		Message* _LoopSrcf1 = JB_Incr(((Message*)JB_Ring_NextSib(msg)));
		Message* ch = JB_Incr(_LoopSrcf1);
		while (ch) {
			if (SC_Msg_OperatorIsTmp(ch, JB_LUB[1799])) {
				Message* _tmPf2 = JB_Incr(JB_Msg_Last(ch, JB_SyxArg));
				Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Last(msg)));
				SC_Msg_AppendAllInto(_tmPf2, _tmPf3);
				JB_Decr(_tmPf2);
				JB_Decr(_tmPf3);
			}
			JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
		};
		JB_Decr(ch);
		;
		JB_Decr(_LoopSrcf1);
	};
}

Message* SC_NewDeclWithStrStr(JB_String* type, JB_String* name) {
	Message* msg = ((Message*)JB_Ternary(JB_Str_Exists(name), JB_Syx_OperatorPlus(JB_SyxThg, name), nil));
	return SC_NewDeclWithStrMsg(type, msg);
}

Message* SC_NewDeclWithStrMsg(JB_String* type, Message* RelOrName) {
	Message* rz = nil;
	rz = JB_Syx_Msg(JB_SyxDecl, JB_LUB[0]);
	if (JB_Str_Exists(type)) {
		JB_Msg_AppendSyx(rz, JB_SyxThg, type);
	}
	 else {
		JB_Msg_AppendSyx(rz, JB_SyxEmb, JB_LUB[0]);
	}
	JB_Tree_SyntaxAppend(rz, RelOrName);
	return rz;
}

Message* SC_NewDeclNum(SCDecl* D, int64 N, JB_String* VarName) {
	Message* rz = nil;
	rz = JB_int64_Msg(N);
	JB_SetRef(rz->Obj, D);
	JB_SetRef(D->Type, JB_TypeInt);
	if ((N < JB_int__Min()) or (N > JB_int__Max())) {
		JB_SetRef(D->Type, JB_TypeInt64);
	}
	(SC_Decl_NameSet(D, VarName));
	if (JB_Str_Exists(VarName)) {
		JB_SetRef(D->Default, rz);
	}
	return rz;
}

Message* SC_NewEqRelWithStrStr(JB_String* L, JB_String* R) {
	Message* rz = nil;
	rz = JB_Syx_Msg(JB_SyxRel, JB_LUB[0]);
	JB_Msg_AppendSyx(rz, JB_SyxThg, L);
	JB_Msg_AppendSyx(rz, JB_SyxOpp, JB_LUB[587]);
	JB_Msg_AppendSyx(rz, JB_SyxThg, R);
	(SC_Msg_TmpTypeSet(rz, kSC__ASMtmp_kSetVar));
	return rz;
}

Message* SC_NewEqRelWithMsgMsg(Message* L, Message* R) {
	Message* rz = nil;
	rz = SC_NewRel(L, R, JB_LUB[587]);
	(SC_Msg_TmpTypeSet(rz, kSC__ASMtmp_kSetVar));
	return rz;
}

Message* SC_NewFnc(JB_String* name) {
	Message* rz = nil;
	rz = JB_Syx_Msg(JB_SyxFunc, JB_LUB[0]);
	JB_Msg_AppendSyx(rz, JB_SyxThg, name);
	JB_Msg_AppendSyx(rz, JB_SyxPrm, JB_LUB[0]);
	return rz;
}

Message* SC_NewRejoin() {
	Message* rz = nil;
	JB_SetRef(rz, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1892]));
	(SC_Msg_TmpTypeSet(rz, kSC__ASMtmp_kRejoin));
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_NewRel(Message* L, Message* R, JB_String* op) {
	Message* rz = nil;
	rz = JB_Syx_Msg(JB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(rz, L);
	JB_Msg_AppendSyx(rz, JB_SyxOpp, op);
	JB_Tree_SyntaxAppend(rz, R);
	return rz;
}

NilState SC_NilSyxes_63(Message* msg, NilCheckMode Test) {
	0;
	return 0;
}

NilState SC_NilTmps_63(Message* msg, NilCheckMode Test) {
	0;
	return 0;
}

SCDecl* SC_Or_And_Expansion(SCDecl* LC, SCDecl* RC, Message* exp, SCNode* name_space) {
	bool LBool = SC_Decl_MiniMatch(LC, JB_TypeBool->TypeNormal, kJB_kTypeCastFalse);
	bool RBool = SC_Decl_MiniMatch(RC, JB_TypeBool->TypeNormal, kJB_kTypeCastFalse);
	if (RBool and LBool) {
		return LC;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(exp)));
	Message* ch0 = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(ch0)));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_NextSib(_tmPf2)));
	JB_Decr(_tmPf2);
	Message* ch2 = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if ((!LBool)) {
		JB_FreeIfDead(SC_ExpandToBool(ch0, name_space));
	}
	JB_Decr(ch0);
	if ((!RBool)) {
		JB_FreeIfDead(SC_ExpandToBool(ch2, name_space));
	}
	JB_Decr(ch2);
	return JB_TypeBool->TypeNormal;
}

void JB_Obj_Print(JB_Object* o) {
	JB_String* _tmPf0 = JB_Incr(JB_ObjRender(o, nil));
	JB_Str_Print(_tmPf0);
	JB_Decr(_tmPf0);
}

void JB_PrintLine(JB_String* data) {
	JB_Str_PrintLine(data);
}

void JB_Obj_PrintLine(JB_Object* o) {
	JB_String* _tmPf0 = JB_Incr(JB_ObjRender(o, nil));
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
}

void SC_RelSetOrExpansion(Message* exp) {
	Message* L = JB_Incr(((Message*)JB_Ring_First(exp)));
	Message* R = JB_Incr(((Message*)JB_Ring_Last(exp)));
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(exp);
	JB_Tree_Clear(exp);
	SC_Msg_AppendAllInto(L, exp);
	JB_Decr(L);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(R)));
	Message* cond = JB_Incr(JB_Msg_Copy(_tmPf2, nil));
	JB_Decr(_tmPf2);
	Message* tmp = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1698])));
	Message* _tmPf3 = JB_Incr(SC_Msg_Negate(cond));
	JB_Decr(cond);
	JB_Tree_SyntaxAppend(tmp, _tmPf3);
	JB_Decr(_tmPf3);
	Message* _tmPf4 = ({
		Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
		JB_Tree_SyntaxAppend(__imPf1, R);
		JB_SafeDecr(nil);
		 __imPf1;
	});
	JB_Decr(R);
	JB_Tree_SyntaxAppend(tmp, _tmPf4);
	JB_Decr(_tmPf4);
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(exp)));
	Message* _tmPf5 = JB_Incr(((Message*)JB_Ternary((JB_Msg_EqualsSyx(P, JB_SyxDecl, false)), P, exp)));
	JB_Decr(P);
	(JB_Ring_NextSibSet((_tmPf5), tmp));
	JB_Decr(tmp);
	JB_Decr(_tmPf5);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

SCNode* SC_RootCollectTable_crash(Message* node, SCNode* name_space, Message* ErrPlace) {
	JB_String* _tmPf0 = JB_Incr(JB_Msg_FirstName(node));
	JB_App__Crash(_tmPf0);
	JB_Decr(_tmPf0);
	return nil;
}

SCNode* SC_RootCollectTable_extends(Message* node, SCNode* name_space, Message* ErrPlace) {
	if (true) {
		JB_Msg_SyntaxExpect(node, JB_LUB[910]);
	}
	return SC__Comp_program;
}

SCNode* SC_RootCollectTable_static(Message* node, SCNode* name_space, Message* ErrPlace) {
	if (true) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1965]);
	}
	return nil;
}

SCDecl* SC_SameTypeSub(Message* first, Message* second, SCNode* name_space) {
	SCDecl* rz = nil;
	SCDecl* T1 = JB_Incr(SC_TypeOfExpr(first, name_space, nil));
	SCDecl* T2 = JB_Incr(SC_TypeOfExpr(second, name_space, nil));
	if ((!(((bool)T1) and ((bool)T2)))) {
		JB_Decr(T2);
		JB_Decr(T1);
		JB_Decr(rz);
		return nil;
	}
	if (SC_Decl_IsNil(T1)) {
		SC_Decl_TypeMatch(T2, T1, kJB_kTypeCastTrue, first);
		JB_Decr(T1);
		JB_Decr(rz);
		JB_SafeDecr(T2);
		return T2;
	}
	if (SC_Decl_IsNil(T2)) {
		SC_Decl_TypeMatch(T1, T2, kJB_kTypeCastTrue, second);
		JB_Decr(T2);
		JB_Decr(rz);
		JB_SafeDecr(T1);
		return T1;
	}
	bool Obj1 = SC_Decl_IsNormalObject(T1);
	bool Obj2 = SC_Decl_IsNormalObject(T2);
	if (Obj1 and Obj2) {
		0;
	}
	 else if ((!Obj1) and (!Obj2)) {
		JB_SetRef(rz, SC_Decl_Better_Numeric(T1, T2, 0));
	}
	 else if (Obj1) {
		JB_SetRef(T2, SC_Decl_NewWrapper(T2, T2));
	}
	 else {
		JB_SetRef(T1, SC_Decl_NewWrapper(T1, T1));
	}
	if ((!rz)) {
		JB_SetRef(rz, SC_Decl_HighestMatch(T1, T2, first));
		if ((!rz)) {
			JB_Decr(T2);
			JB_Decr(rz);
			JB_SafeDecr(T1);
			return T1;
		}
	}
	if (rz != T2) {
		JB_FreeIfDead(SC_Decl_CreateSimpleTypeCast(rz, second));
	}
	JB_Decr(T2);
	if (rz != T1) {
		JB_FreeIfDead(SC_Decl_CreateSimpleTypeCast(rz, first));
	}
	JB_Decr(T1);
	JB_SafeDecr(rz);
	return rz;
}

void SC_SC_MakeComment(Message* msg) {
	if ((!JB_Msg_EqualsSyx(msg, JB_SyxTmp, false))) {
		JB_Object_SyntaxExpect(nil);
		return;
	}
	msg->Func = JB_SyxSheb;
	JB_Tree_Clear(msg);
}

Message* SC_SettingAProperty(Message* Rel) {
	if ((!SC_Msg_IsSetRel(Rel))) {
		return nil;
	}
	Message* f = ((Message*)JB_Ring_First(Rel));
	if (((bool)f) and ((bool)SC_Msg_DotType(f))) {
		return f;
	}
	return nil;
}

bool SC_SettingMemory(Message* Rel) {
	if ((!SC_Msg_IsSetRel(Rel))) {
		return nil;
	}
	Message* f = ((Message*)JB_Ring_First(Rel));
	if (f) {
		DotUseType d = SC_Msg_SetType(f);
		if (d) {
			return true;
		}
	}
	return false;
}

bool SC_SettingSelfProperty(Message* Rel) {
	Message* Dot = SC_SettingAProperty(Rel);
	if (Dot) {
		return (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(Dot)), JB_LUB[1934]));
	}
	return false;
}

Array* SC_SortInitOrder(Array* mods) {
	Array* rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	while (SC_SortInitOrderSub(mods, rz)) {
		0;
	};
	JB_SafeDecr(rz);
	return rz;
}

bool SC_SortInitOrderSub(Array* mods, Array* out) {
	SCModule* failed = nil;
	bool GotAny = false;
	{
		int _if0 = 0;
		while (true) {
			SCModule* m = ((SCModule*)JB_Array_Value(mods, _if0));
			if (m == nil) {
				break;
			}
			if ((!JB_Rec_OK(JB_StdErr))) {
				return nil;
			}
			if ((!m->Inited)) {
				if (SC_Mod_TryInit(m, out)) {
					GotAny = true;
				}
				 else {
					failed = m;
				}
			}
			_if0++;
		};
	}
	;
	if ((!(GotAny or (!failed)))) {
		JB_Msg_SyntaxExpect(failed->Source, JB_LUB[1030]);
		return nil;
	}
	return ((bool)failed);
}

__lib__ ErrorInt Speedie_Main(PicoComms* comms, int Mode, _cstring* args) {
	ErrorInt rz = 0;
	JB__Pico_Parent_ = comms;
	rz = JB_SP_Run(args, Mode & 4);
	PicoCommsConf(comms)->Name = JB_Str_SyntaxCast(JB_LUB[1228]);
	if (rz == 0) {
		rz = JB_SP_Run(args, Mode);
	}
	return rz;
}

Message* SC_SpellOutMsg(Message* type, Message* Exp, Message* namemsg) {
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
	Message* Result = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1803])));
	JB_Tree_SyntaxAppend(Result, type);
	Message* _tmPf2 = ({
		Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		JB_Tree_SyntaxAppend(__imPf1, namemsg);
		JB_SafeDecr(nil);
		 __imPf1;
	});
	JB_Tree_SyntaxAppend(Result, _tmPf2);
	JB_Decr(_tmPf2);
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1262], type->Name));
	JB_Msg_BecomeStr(type, JB_SyxThg, _tmPf3);
	JB_Decr(_tmPf3);
	Exp->Func = JB_SyxBra;
	(JB_Ring_FirstSet(Exp, Result));
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_SafeDecr(Result);
	JB_MsgPos_Destructor((&_usingf0));
	return Result;
}

void SC_TemporalStatements_alert(SCFunction* fn, Message* node, SCNode* name_space) {
	if (true) {
		JB_Msg_SyntaxExpect(node, JB_LUB[909]);
	}
}

void SC_TemporalStatements_break(SCFunction* fn, Message* node, SCNode* name_space) {
	if (true) {
		JB_Msg_SyntaxExpect(node, JB_LUB[260]);
	}
}

void SC_TemporalStatements_crash(SCFunction* fn, Message* node, SCNode* name_space) {
	JB_String* _tmPf0 = JB_Incr(JB_Msg_FirstName(node));
	JB_App__Crash(_tmPf0);
	JB_Decr(_tmPf0);
}

void SC_TemporalStatements_do(SCFunction* fn, Message* node, SCNode* name_space) {
	if (true) {
		JB_Msg_SyntaxExpect(node, JB_LUB[261]);
	}
}

void SC_TemporalStatements_ignore(SCFunction* fn, Message* node, SCNode* name_space) {
	(JB_Tree_Remove(node));
}

bool SC_TooManyErrors() {
	return JB_StdErr->ErrorCount >= 50;
}

void SC_Tran_ArgArray(Message* Exp, SCNode* name_space, SCDecl* decl) {
	//visible;
	Message* thg = JB_Incr(SC_Msg_IsSetIntoVar(Exp));
	if ((!thg)) {
		if ((!JB_Msg_OperatorIn(Exp, JB_SyxSheb))) {
			JB_Msg_SyntaxExpect(Exp, nil);
		}
		JB_Decr(thg);
		return;
	}
	Message* rel = JB_Incr(SC_Msg_NiceParent(Exp));
	JB_Msg_Expect(rel, JB_SyxRel, nil);
	Message* _tmPf3 = JB_Incr(SC_Msg_ParentPoint(rel));
	Message* Place = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	SCDecl* d = JB_Incr(SC_Msg_AsDecl(thg));
	if (d) {
		JB_SetRef(d->Default, nil);
	}
	JB_Decr(d);
	rel->Func = JB_SyxSheb;
	if (Place == rel) {
		(JB_Ring_NextSibSet(rel, thg));
		JB_SetRef(Place, thg);
	}
	 else {
		JB_FreeIfDead(SC_Msg_ReplaceWith(rel, thg));
		(JB_Ring_NextSibSet(Place, rel));
		Exp->Func = JB_SyxStr;
	}
	JB_Decr(rel);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
	ArgArrayCounter Counter = ((ArgArrayCounter){});
	{
		Message* itm = JB_Incr(((Message*)JB_Ring_First(Exp)));
		while (itm) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(itm)));
			Message* rel2 = JB_Incr(SC_ArgArrayCounter_Do((&Counter), thg->Name, itm, name_space));
			(JB_Ring_NextSibSet(Place, rel2));
			JB_SetRef(Place, rel2);
			JB_Decr(rel2);
			JB_SetRef(itm, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(itm);
		;
	}
	;
	JB_Decr(thg);
	JB_Decr(Place);
	SC_ArgArrayCounter_Check((&Counter), Exp);
	if (Counter.IsItem) {
		int c = Counter.max + 1;
		if (c >= 16384) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[1317]);
		}
		decl->C_Array = c;
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Tran_Flow(SCFunction* fn, Message* node, SCNode* name_space) {
	if ((!fn)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1108]);
		return;
	}
	Message* msg = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	if ((!msg)) {
		JB_Decr(msg);
		return;
	}
	JB_Msg_ExpectLast(msg, JB_LUB[0]);
	SC_Msg_SafeRemove(node, JB_SyxSheb);
	if ((!JB_Msg_SyntaxEquals(msg, JB_LUB[1840], false))) {
		JB_Msg_SyntaxExpect(msg, JB_LUB[1107]);
	}
	JB_Decr(msg);
	fn->FlowDisabled = true;
}

void SC_Tran_Msg(SCFunction* fn, Message* Exp, SCNode* name_space) {
	JB_Incr(name_space);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* Type = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(Type)));
	Message* NameMsg = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	if (JB_Tree_OperatorLessOrEqual(Exp, 1)) {
		Message* Mini = JB_Incr(SC_SpellOutMsg(Type, Exp, NameMsg));
		JB_FreeIfDead(SC_TypeOfExpr(Mini, name_space, nil));
		JB_Decr(Mini);
		JB_Decr(name_space);
		JB_Decr(NameMsg);
		JB_Decr(Type);
		return;
	}
	Message* itm = JB_Incr(((Message*)JB_Ring_NextSib(Type)));
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(Exp)));
	JB_Decr(P);
	NameAndMsg Place = SC_Msg_IntoVariable(Exp, name_space);
	if (Place.Arg) {
		JB_SetRef(name_space, SC_Msg_SCArg(Place.Arg, name_space, nil));
		if (name_space) {
			Message* Result = JB_Incr(SC_SpellOutMsg(Type, Exp, NameMsg));
			while (itm) {
				Message* NextItm = JB_Incr(((Message*)JB_Ring_NextSib(itm)));
				//using;
				MessagePosition _usingf0 = JB_Msg_SyntaxUsing(itm);
				Message* Line = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1251])));
				Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Place.Name));
				JB_Tree_SyntaxAppend(Line, (_tmPf4));
				JB_Decr(_tmPf4);
				Message* _tmPf5 = ({
					Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
					JB_Tree_SyntaxAppend(__imPf1, itm);
					JB_SafeDecr(nil);
					 __imPf1;
				});
				JB_Tree_SyntaxAppend(Line, _tmPf5);
				JB_Decr(_tmPf5);
				SC_NameAndMsg_SyntaxAppend((&Place), Line);
				JB_FreeIfDead(SC_TypeOfExpr(Line, name_space, nil));
				SC_Func__Tran_All(fn, Line, name_space);
				JB_Decr(Line);
				JB_SetRef(itm, NextItm);
				JB_Decr(NextItm);
				JB_MsgPos_SyntaxUsingComplete((&_usingf0));
				JB_MsgPos_Destructor((&_usingf0));
			};
			JB_FreeIfDead(SC_TypeOfExpr(Result, name_space, nil));
			JB_Decr(Result);
		}
	}
	JB_Decr(Type);
	JB_Decr(NameMsg);
	JB_Decr(itm);
	JB_Decr(name_space);
	SC_NameAndMsg_Destructor((&Place));
}

void SC_Tran_MsgList(SCFunction* fn, Message* Exp, SCNode* name_space) {
	if (true) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[1368]);
	}
	SC__Func_DisabledPoints++;
}

SCObject* SC_TranNegate(Message* f, SCNode* name_space) {
	f = SC_ExpandToBool(f, name_space);
	if ((!f)) {
		return nil;
	}
	JB_Object* d = f->Obj;
	if (JB_Object_FastIsa(d, &SCDeclData)) {
		if (SC_Decl_IsConstOf(((SCDecl*)d), JB_FalseBool)) {
			return JB_TrueBool;
		}
		if (SC_Decl_IsConstOf(((SCDecl*)d), JB_TrueBool)) {
			return JB_FalseBool;
		}
	}
	return JB_TypeBool->TypeNormal;
}

SCObject* SC_TranRender(Message* exp, SCNode* name_space) {
	JB_Msg_BecomeStr(exp, JB_SyxDot, JB_LUB[1175]);
	JB_FreeIfDead(JB_Msg_Msg(exp, JB_SyxPrm, JB_LUB[0]));
	return SC_TypeOfExpr(exp, name_space, nil);
}

SCObject* SC_TypeOfAccess(Message* Exp, SCNode* name_space, Message* side) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* ch = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	SCObject* Ty0 = JB_Incr(SC_TypeOfExprModulesOK(ch, name_space, nil));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	Message* arr = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (JB_Object_FastIsa(Ty0, &SCModuleData)) {
		SCClass* cls = JB_Incr(((SCModule*)Ty0)->Cls);
		if (((bool)cls) and (SC_Class_IsMArray(cls, arr) and SC_Msg_ExpectMatch(((Message*)JB_Ring_First(arr)), name_space, JB_TypeInt))) {
			SCDecl* _tmPf6 = JB_Incr(SC_LowlevelArrayTransform(Exp, cls));
			JB_Decr(cls);
			JB_Decr(arr);
			JB_Decr(Ty0);
			JB_Decr(ch);
			JB_SafeDecr(_tmPf6);
			return _tmPf6;
		}
		JB_Decr(cls);
	}
	 else if ((JB_Object_FastIsa(Ty0, &SCDeclData)) and (JB_Tree_HasOneChild(arr))) {
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(arr)));
		Message* Index = JB_Incr(_tmPf2);
		JB_Decr(_tmPf2);
		SCDecl* Access = JB_Incr(SC_TypeOfExpr(Index, name_space, nil));
		if ((!Access)) {
			JB_Decr(Access);
			JB_Decr(Index);
			JB_Decr(arr);
			JB_Decr(Ty0);
			JB_Decr(ch);
			return nil;
		}
		int W = SC_Decl_IsNumeric(((SCDecl*)Ty0));
		if (W > 1) {
			if ((!SC_Msg_ExpectInt(Index, Access))) {
				JB_Decr(Access);
				JB_Decr(Index);
				JB_Decr(arr);
				JB_Decr(Ty0);
				JB_Decr(ch);
				return nil;
			}
			JB_Decr(Access);
			SCDecl* _tmPf5 = JB_Incr(SC_TypeOfVecAccess(Index, ((SCDecl*)Ty0), W));
			JB_Decr(Index);
			JB_Decr(arr);
			JB_Decr(Ty0);
			JB_Decr(ch);
			JB_SafeDecr(_tmPf5);
			return _tmPf5;
		}
		if (SC_Decl_IsCArray(((SCDecl*)Ty0))) {
			if ((!SC_Msg_ExpectInt(Index, Access))) {
				JB_Decr(Access);
				JB_Decr(Index);
				JB_Decr(arr);
				JB_Decr(Ty0);
				JB_Decr(ch);
				return nil;
			}
			JB_Decr(Access);
			JB_Decr(Index);
			JB_Decr(arr);
			SCDecl* _tmPf7 = JB_Incr(SC_Decl_DeReference(((SCDecl*)Ty0), Exp, name_space, true));
			JB_Decr(Ty0);
			JB_Decr(ch);
			JB_SafeDecr(_tmPf7);
			return _tmPf7;
		}
		if (((bool)((SCDecl*)Ty0)->PointerCount) and SC_Decl_OperatorMatches(Access, JB_TypeInt)) {
			if ((!((JB_Msg_EqualsSyx(ch, JB_SyxBra, false)) and (({
				Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(ch)));
				bool _tmPf3 = JB_Msg_EqualsSyx(_tmPf4, JB_SyxBra, false);
				JB_Decr(_tmPf4);
				 _tmPf3;
			}))))) {
				if ((!SC_Msg_ExpectInt(Index, Access))) {
					JB_Decr(Access);
					JB_Decr(Index);
					JB_Decr(arr);
					JB_Decr(Ty0);
					JB_Decr(ch);
					return nil;
				}
				JB_Decr(Access);
				JB_Decr(Index);
				JB_Decr(arr);
				SCDecl* _tmPf8 = JB_Incr(SC_Decl_DeReference(((SCDecl*)Ty0), Exp, name_space, true));
				JB_Decr(Ty0);
				JB_Decr(ch);
				JB_SafeDecr(_tmPf8);
				return _tmPf8;
			}
		}
		JB_Decr(Index);
		JB_Decr(Access);
	}
	JB_Decr(ch);
	JB_Decr(Ty0);
	arr->Func = JB_SyxPrm;
	JB_Msg_BecomeStr(Exp, JB_SyxDot, JB_LUB[1250]);
	(JB_Msg_RangeSet(Exp, JB_Msg_Range(arr)));
	JB_Decr(arr);
	return SC_TypeOfDot(Exp, name_space, side);
}

SCObject* SC_TypeOfAdj(Message* Exp, SCNode* name_space, Message* side) {
	Array* args = JB_Incr(JB_Array_Constructor0(nil));
	Macro* found = JB_Incr(SC_Comp__FindAdj(Exp, args));
	if (found) {
		JB_Msg_BecomeMacro(Exp, found, args);
		JB_Decr(found);
		JB_Decr(args);
		return SC_TypeOfExpr(Exp, name_space, side);
	}
	JB_Decr(args);
	JB_Decr(found);
	return nil;
}

SCObject* SC_TypeOfARel(Message* Exp, SCNode* name_space, Message* side) {
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[215], false)) {
		return SC_TypeOfReal(Exp, name_space, side);
	}
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[358], false)) {
		return SC_TypeOfDotDotDot(Exp, name_space, nil);
	}
	return SC_Func__Tran_AfterRel(Exp, name_space, side);
}

SCObject* SC_TypeOfArgArr(Message* Exp, SCNode* name_space, Message* side) {
	SCDecl* result = nil;
	int Count = 0;
	{
		Message* itm = JB_Incr(((Message*)JB_Ring_First(Exp)));
		while (itm) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(itm)));
			if (JB_Msg_EqualsSyx(itm, JB_SyxTmp, false)) {
				itm->Func = JB_SyxThg;
			}
			SCDecl* Contained = JB_Incr(SC_TypeOfExpr(itm, name_space, nil));
			if (Contained) {
				if ((!(SC_Class_IsDataTypeOrFP(Contained->Type) or ((bool)Contained->PointerCount)))) {
					JB_Msg_SyntaxExpect(itm, JB_LUB[1040]);
				}
				if (result) {
					SCDecl* oof = JB_Incr(SC_Decl_HighestArrayContainMatch(Contained, result->Type->TypeNormal, itm));
					JB_SetRef(result->Type, oof->Type);
					JB_Decr(oof);
				}
				 else {
					JB_SetRef(result, SC_Decl_Constructor(nil, Contained->Type));
				}
				Count++;
			}
			JB_Decr(Contained);
			JB_SetRef(itm, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(itm);
		;
	}
	;
	if ((!result)) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[709]);
		JB_Decr(result);
		return nil;
	}
	JB_SetRef(Exp->Obj, result);
	JB_SetRef(result, SC_Decl_GetCArray(result, Count));
	SC_Tran_ArgArray(Exp, name_space, result);
	JB_SafeDecr(result);
	return result;
}

SCObject* SC_TypeOfArr(Message* Exp, SCNode* name_space, Message* side) {
	int IsDispatch = ((int)((JB_Msg_SyntaxEquals(Exp, JB_LUB[1611], true))));
	int InOrder = 0;
	SCDecl* result = JB_Incr(SC_Decl_Constructor(nil, JB_TypeVoid_));
	result->NilDeclared = kSC__NilState_Real;
	JB_SetRef(Exp->Obj, result);
	{
		Message* _Valuef2 = JB_Incr(((Message*)JB_Ring_First(Exp)));
		while (_Valuef2) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(_Valuef2)));
			Message* itm = JB_Incr(_Valuef2);
			SCClass* NewArrCls = JB_Incr(JB_TypeArray);
			if (JB_Msg_EqualsSyx(itm, JB_SyxItem, false)) {
				Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(itm)));
				SCDecl* IdxType = JB_Incr(SC_TypeOfExpr(_tmPf3, name_space, nil));
				JB_Decr(_tmPf3);
				if (SC_Decl_OperatorMatches(IdxType, JB_TypeString)) {
					JB_SetRef(NewArrCls, JB_TypeDictionary);
				}
				 else if (SC_Decl_OperatorMatches(IdxType, JB_TypeInt)) {
					if ((!IsDispatch)) {
						Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(itm)));
						InOrder = SC_ArrayInOrderCheck(InOrder, _tmPf4);
						JB_Decr(_tmPf4);
						if (InOrder <= 0) {
							JB_SetRef(NewArrCls, JB_TypeDictionary);
						}
					}
				}
				 else if ((!(SC_Decl_OperatorMatches(IdxType, JB_TypeSyntax)))) {
					if (true) {
						JB_Msg_SyntaxExpect(Exp, JB_LUB[640]);
					}
					JB_SetRef(itm, nil);
				}
				JB_Decr(IdxType);
				JB_SetRef(itm, ((Message*)JB_Ring_Last(itm)));
			}
			if (itm) {
				Message* _tmPf5 = JB_Incr(SC_Msg_TypeOfArrItem(itm));
				SCDecl* Contained = JB_Incr(SC_TypeOfExpr(_tmPf5, name_space, nil));
				JB_Decr(_tmPf5);
				if (Contained) {
					JB_SetRef(itm, SC_Msg_Resync(itm, Exp));
					if (SC_Class_IsObject(Contained->Type)) {
						JB_SetRef(Contained, Contained->Type->TypeNormal);
					}
					 else if ((bool)IsDispatch) {
						IsDispatch++;
					}
					if (result->Contains) {
						JB_SetRef(result->Contains, SC_Decl_HighestArrayContainMatch(Contained, result->Contains, itm));
					}
					 else {
						JB_SetRef(result->Contains, Contained);
					}
					if (result->Type == JB_TypeVoid_) {
						JB_SetRef(result->Type, NewArrCls);
					}
					 else {
						if (result->Type != NewArrCls) {
							JB_Msg_SyntaxExpect(Exp, JB_LUB[641]);
							JB_Decr(Contained);
							JB_Decr(NewArrCls);
							JB_Decr(itm);
							JB_Decr(_Nf1);
							JB_Decr(_Valuef2);
							JB_Decr(result);
							return nil;
						}
					}
				}
				JB_Decr(Contained);
			}
			JB_Decr(itm);
			JB_Decr(NewArrCls);
			JB_SetRef(_Valuef2, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(_Valuef2);
		;
	}
	;
	SCDecl* c = JB_Incr(result->Contains);
	if (c) {
		if (((bool)IsDispatch) and (result->Type != JB_TypeDictionary)) {
			JB_SetRef(result->Type, c->Type);
			JB_SetRef(result->Contains, nil);
			SC_Decl_IsCarray(result, IsDispatch - 1, c);
			Exp->Func = JB_SyxArg;
			SC_Tran_ArgArray(Exp, name_space, result);
		}
		 else if ((!SC_Class_IsObject(c->Type))) {
			JB_SetRef(result->Contains, SC_Decl_NewWrapper(c, c));
		}
		 else {
			JB_SetRef(result->Contains, SC_Decl_MakeContainedOptional(c));
		}
	}
	JB_Decr(c);
	if (result->Type == JB_TypeVoid_) {
		JB_SetRef(result->Type, JB_TypeArray);
	}
	JB_SafeDecr(result);
	return result;
}

SCObject* SC_TypeOfBlock(Message* Exp, SCNode* name_space, Message* side) {
	Message* last = JB_Incr(JB_Msg_NeedSyxInt(Exp, JB_SyxNil, -1));
	if ((!last)) {
		JB_Decr(last);
		return nil;
	}
	if ((!SC_Msg_OperatorIsTmp(last, JB_LUB[1892]))) {
		if (true) {
			MessagePosition _usingf0 = JB_Msg_SyntaxUsing(last);
			Message* _tmPf3 = JB_Incr(SC_NewRejoin());
			JB_SetRef(last, ((Message*)JB_Tree_WrapWith(last, _tmPf3)));
			JB_Decr(_tmPf3);
			JB_MsgPos_SyntaxUsingComplete((&_usingf0));
			JB_MsgPos_Destructor((&_usingf0));
		}
	}
	SCArg* _tmPf4 = JB_Incr(SC_Msg_SCArg(Exp, name_space, nil));
	SCArg* p = JB_Incr(_tmPf4);
	JB_Decr(_tmPf4);
	Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_Parent(Exp)));
	(SC_Msg_StatementExprSet(_tmPf5, p));
	JB_Decr(_tmPf5);
	SCFunction* _tmPf6 = JB_Incr(SC_Base_OwningFunc(p));
	SCFunction* fn = JB_Incr(_tmPf6);
	JB_Decr(_tmPf6);
	SC_CollectDeclsFuncBodyUnsureHowToRemove(Exp, p);
	{
		Message* ch = JB_Incr(((Message*)JB_Ring_First(Exp)));
		while (ch) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
			if (JB_Msg_EqualsSyx(ch, JB_SyxArg, false)) {
				SCArg* _tmPf7 = JB_Incr(SC_Msg_SCArg(ch, p, nil));
				SC_Func__Tran_All(fn, ch, _tmPf7);
				JB_Decr(_tmPf7);
			}
			 else {
				SC_Func__Tran_All(fn, ch, p);
			}
			JB_SetRef(ch, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(ch);
		;
	}
	;
	JB_Decr(fn);
	Message* val = JB_Incr(JB_Msg_NeedFirst(last));
	JB_Decr(last);
	if (JB_Msg_ExpectLast(val, JB_LUB[0])) {
		SCDecl* _tmPf8 = JB_Incr(SC_TypeOfExpr(val, p, nil));
		JB_Decr(val);
		JB_Decr(p);
		JB_SafeDecr(_tmPf8);
		return _tmPf8;
	}
	JB_Decr(p);
	JB_Decr(val);
	return nil;
}

SCObject* SC_TypeOfBra(Message* Exp, SCNode* name_space, Message* side) {
	Message* c0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	if (JB_Msg_EqualsSyx(c0, JB_SyxArg, false)) {
		SCObject* _tmPf0 = JB_Incr(SC_TypeOfBlock(c0, name_space, side));
		JB_Decr(c0);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	 else {
		SCDecl* _tmPf1 = JB_Incr(SC_TypeOfExpr(c0, name_space, side));
		JB_Decr(c0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	JB_Decr(c0);
}

SCObject* SC_TypeOfBRel(Message* Exp, SCNode* name_space, Message* side) {
	JB_String* name = JB_Incr(Exp->Name);
	Message* F = JB_Incr(((Message*)JB_Ring_First(Exp)));
	if ((!F)) {
		JB_Decr(F);
		JB_Decr(name);
		return nil;
	}
	SCDecl* SubType = JB_Incr(SC_TypeOfExpr(F, name_space, nil));
	if ((!SubType)) {
		JB_Decr(SubType);
		JB_Decr(F);
		JB_Decr(name);
		return nil;
	}
	byte n = JB_Str_First(name);
	if (n == '*') {
		SCDecl* _tmPf0 = JB_Incr(SC_Decl_DeReference(SubType, Exp, name_space, false));
		JB_Decr(SubType);
		JB_Decr(F);
		JB_Decr(name);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	if ((n == '-') and (JB_Str_EqualsInt(name, 1, false))) {
		JB_Decr(F);
		JB_Decr(name);
		JB_SafeDecr(SubType);
		return SubType;
	}
	JB_Decr(name);
	if (n == '&') {
		if (SubType->Type->FuncProto) {
			JB_Decr(SubType);
			SCObject* _tmPf2 = JB_Incr(SC_TypeOfFuncPointer(F, name_space, side));
			JB_Decr(F);
			JB_SafeDecr(_tmPf2);
			return _tmPf2;
		}
		if ((!SC_Msg_CanGetAddress(F, name_space))) {
			JB_Decr(SubType);
			JB_Decr(F);
			return nil;
		}
		SCDecl* _tmPf1 = JB_Incr(SC_Decl_GetAddress(SubType, kSC__DeclMode_Always));
		JB_Decr(SubType);
		JB_Decr(F);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	if (n == '!') {
		JB_Decr(SubType);
		SCObject* _tmPf3 = JB_Incr(SC_TranNegate(F, name_space));
		JB_Decr(F);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	JB_Decr(F);
	if (n == '~') {
		if ((!SC_Decl_IsInteger(SubType))) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[852]);
		}
		JB_SafeDecr(SubType);
		return SubType;
	}
	if (n == '$') {
		JB_Decr(SubType);
		return SC_TranRender(Exp, name_space);
	}
	JB_FreeIfDead(SC_Func__Tran_AfterRel(Exp, name_space, side));
	JB_SafeDecr(SubType);
	return SubType;
}

SCObject* SC_TypeOfChar(Message* Exp, SCNode* name_space, Message* side) {
	if (JB_Msg_Length(Exp) == 1) {
		return JB_TypeByte->TypeNormal;
	}
	Ind cp = ((Ind)JB_Str_UTF8Value(Exp->Name));
	if ((!JB_Ind_SyntaxCast(cp))) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[933]);
		return nil;
	}
	Exp->Func = JB_SyxNum;
	JB_SetRef(Exp->Name, JB_int_RenderFS(cp, nil));
	return JB_TypeCodePoint->TypeNormal;
}

SCObject* SC_TypeOfDot(Message* Exp, SCNode* name_space, Message* side) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	if ((_tmPf0->Obj)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	SCNode* DotVar = JB_Incr(((SCNode*)SC_Msg_DotSpace(_tmPf1, name_space)));
	JB_Decr(_tmPf1);
	if ((!DotVar)) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[1284]);
		JB_Decr(DotVar);
		return nil;
	}
	SCDecl* contains = nil;
	bool DotVarIsaDecl = (JB_Object_Isa(DotVar, &SCDeclData));
	if (DotVarIsaDecl) {
		SCDecl* swiz = JB_Incr(SC_TypeOfSwiz(Exp, name_space, side, ((SCDecl*)DotVar)));
		if (swiz) {
			JB_Decr(contains);
			JB_Decr(DotVar);
			JB_SafeDecr(swiz);
			return swiz;
		}
		JB_Decr(swiz);
		JB_SetRef(contains, ((SCDecl*)DotVar)->Contains);
		SCClass* ty = ((SCDecl*)DotVar)->Type;
		JB_SetRef(DotVar, ty);
		if ((!(contains))) {
			JB_SetRef(contains, ty->Contained);
		}
	}
	 else {
		if ((!(JB_Object_Isa(DotVar, &SCClassData) or JB_Object_Isa(DotVar, &SCModuleData)))) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[1090]);
			JB_Decr(contains);
			JB_Decr(DotVar);
			return nil;
		}
	}
	JB_Object* o = JB_Incr(SC_Base_LookUpDot(DotVar, Exp->Name, Exp, name_space, contains, side));
	if ((!o)) {
		JB_Decr(o);
		JB_Decr(contains);
		JB_Decr(DotVar);
		return nil;
	}
	if (JB_Object_FastIsa(o, &SCModuleData)) {
		Message* f = JB_Incr(((Message*)JB_Ring_First(Exp)));
		if (JB_Msg_EqualsSyx(f, JB_SyxThg, false)) {
			Exp->Func = JB_SyxThg;
			JB_Tree_Remove(f);
			if (JB_Msg_SyntaxEquals(f, JB_LUB[1447], false)) {
				SCClass* cls = JB_Incr(((SCModule*)o)->Cls);
				if (cls) {
					SCDecl* t = JB_Incr(cls->ClassType);
					if (t) {
						JB_SetRef(Exp->Name, t->Name);
						JB_Decr(cls);
						JB_Decr(f);
						JB_Decr(o);
						JB_Decr(contains);
						JB_Decr(DotVar);
						JB_SafeDecr(t);
						return t;
					}
					JB_Decr(t);
				}
				JB_Decr(cls);
			}
		}
		JB_Decr(f);
		JB_Decr(contains);
		JB_Decr(DotVar);
		JB_SafeDecr(o);
		return ((SCModule*)o);
	}
	SCDecl* decl = JB_Incr(SC_Object_BaseAsDecl(o));
	JB_Decr(o);
	if (decl) {
		if (contains) {
			if ((JB_Object_FastIsa(DotVar, &SCClassData)) and (!SC_Msg_IsSettablePlace(Exp))) {
				JB_SetRef(decl, SC_Decl_ContainedReplace(decl, contains, true));
			}
		}
		if (SC_Decl_SyntaxIs(decl, kSC__SCDeclInfo_Task)) {
			JB_Decr(contains);
			JB_Decr(DotVar);
			JB_SafeDecr(decl);
			return decl;
		}
	}
	 else {
		JB_SetRef(decl, JB_TypeVoid);
	}
	JB_Decr(DotVar);
	JB_Decr(contains);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	SCFunction* fn = JB_Incr(SC_Msg_AsFunc(_tmPf2));
	JB_Decr(_tmPf2);
	if (fn) {
		JB_SetRef(Exp->Obj, decl);
		if ((!JB_Msg_EqualsSyx(Exp, JB_SyxFunc, false))) {
			SC_Func_DotFuncToNormalFunc(fn, Exp);
		}
	}
	JB_Decr(fn);
	JB_SafeDecr(decl);
	return decl;
}

SCObject* SC_TypeOfDotDotDot(Message* Exp, SCNode* name_space, Message* side) {
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
		JB_Msg_BecomeStr(Exp, JB_SyxBra, JB_LUB[0]);
		Message* P = JB_Incr(((Message*)JB_Ring_Parent(Exp)));
		Message* c = JB_Incr(Exp);
		while ((!JB_Msg_EqualsSyx(P, JB_SyxPrm, false)) and (!JB_Msg_EqualsSyx(P, JB_SyxArr, false))) {
			if ((!(((bool)P) and (!JB_Msg_EqualsSyx(P, JB_SyxArg, false))))) {
				JB_Msg_SyntaxExpect(Exp, JB_LUB[1221]);
				JB_Decr(c);
				JB_Decr(P);
				JB_MsgPos_Destructor((&_usingf0));
				return nil;
			}
			JB_SetRef(c, P);
			JB_SetRef(P, ((Message*)JB_Ring_Parent(P)));
		};
		JB_Decr(P);
		Message* _tmPf2 = ({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1780])));
			Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1716]));
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf3));
			JB_Decr(_tmPf3);
			Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf4));
			JB_Decr(_tmPf4);
			JB_SafeDecr(nil);
			 __imPf1;
		});
		(JB_Ring_NextSibSet(c, _tmPf2));
		JB_Decr(c);
		JB_Decr(_tmPf2);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	SCDecl* _tmPf6 = JB_Incr(SC_TypeOfExpr(_tmPf5, name_space, nil));
	JB_Decr(_tmPf5);
	JB_SafeDecr(_tmPf6);
	return _tmPf6;
}

SCDecl* SC_TypeOfExpr(Message* Exp, SCNode* name_space, Message* side) {
	if (Exp) {
		SCObject* obj = ((SCObject*)Exp->Obj);
		if ((!obj)) {
			obj = SC_TypeOfExprSub(Exp, name_space, side);
		}
		if (JB_Object_FastIsa(obj, &SCDeclData)) {
			return ((SCDecl*)obj);
		}
	}
	return nil;
}

SCObject* SC_TypeOfExprModulesOK(Message* Exp, SCNode* name_space, Message* side) {
	if (Exp->Obj) {
		return ((SCObject*)Exp->Obj);
	}
	if (JB_Msg_EqualsSyx(Exp, JB_SyxThg, false)) {
		JB_SetRef(Exp->Obj, SC_Base_LookUpVar(name_space, Exp->Name, Exp, side));
		return ((SCObject*)Exp->Obj);
	}
	return SC_TypeOfExprSub(Exp, name_space, side);
}

SCDecl* SC_TypeOfExprNeeded(Message* exp, SCNode* name_space) {
	int OldCount = JB_StdErr->ErrorCount;
	SCDecl* result = SC_TypeOfExpr(exp, name_space, nil);
	if (SC_Decl_Found(result)) {
		return result;
	}
	if (OldCount == JB_StdErr->ErrorCount) {
		if (true) {
			JB_Msg_SyntaxExpect(exp, JB_LUB[1285]);
		}
		SCFunction* it = SC_Msg_ExpFunc(exp);
		if (it) {
			if (true) {
				JB_Msg_SyntaxExpect(it->Source, JB_LUB[273]);
			}
		}
	}
	return nil;
}

SCObject* SC_TypeOfExprSub(Message* Exp, SCNode* name_space, Message* side) {
	if (JB_Msg_EqualsSyx(Exp, JB_SyxDecl, false)) {
		JB_Object* d = ((Message*)JB_Ring_Last(Exp))->Obj;
		if (JB_Object_FastIsa(d, &SCDeclData)) {
			return ((SCDecl*)d);
		}
	}
	if (name_space) {
		FP_ExprResolver f = JB_ExprFuncs[((int)Exp->Func)];
		if ((!f)) {
			JB_Msg_SyntaxExpect(Exp, nil);
			return nil;
		}
		SCObject* obj = (f)(Exp, name_space, side);
		if (obj) {
			JB_SetRef(Exp->Obj, obj);
		}
		return ((SCObject*)obj);
	}
	if ((!JB__Proc_Parent)) {
		if (true) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[870]);
		}
	}
	return nil;
}

SCObject* SC_TypeOfFunc(Message* Exp, SCNode* name_space, Message* side) {
	Message* f = ((Message*)JB_Ring_First(Exp));
	if (JB_Msg_EqualsSyx(f, JB_SyxList, false)) {
		return SC_TypeOfTernary(Exp, name_space, side);
	}
	SCObject* fn = SC_TypeOfFuncSub(Exp, name_space, side);
	if ((!fn)) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[756]);
		return nil;
	}
	if (JB_Object_FastIsa(fn, &SCFunctionData)) {
		SCDecl* obj = ((SCFunction*)fn)->ReturnType;
		if ((!obj)) {
			JB_SetRef(Exp->Obj, JB_TypeVoid);
		}
		if (((SCFunction*)fn)->IsKiller) {
			SC_Msg_LastInBlock(Exp, kSC__SCBlockage_Quit);
		}
		return obj;
	}
	return fn;
}

SCObject* SC_TypeOfFuncPointer(Message* Exp, SCNode* name_space, Message* side) {
	SCObject* rz = nil;
	Message* ch = JB_Incr(SC_Msg_UnBra(Exp));
	if (JB_Msg_EqualsSyx(ch, JB_SyxDot, false)) {
		JB_SetRef(rz, SC_TypeOfDot(ch, name_space, side));
	}
	 else if (JB_Msg_EqualsSyx(ch, JB_SyxThg, false)) {
		JB_SetRef(rz, SC_Base_LookUpVar(name_space, ch->Name, ch, side));
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(Exp, nil);
		}
	}
	JB_SetRef(ch->Obj, rz);
	JB_Decr(ch);
	JB_SafeDecr(rz);
	return rz;
}

SCObject* SC_TypeOfFuncSub(Message* exp, SCNode* name_space, Message* side) {
	SCFunction* fn = JB_Incr(SC_Msg_MsgFunc(exp));
	if (fn) {
		JB_SafeDecr(fn);
		return fn;
	}
	Message* ch = JB_Incr(((Message*)JB_Ring_First(exp)));
	Message* params = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	if (JB_Msg_EqualsSyx(ch, JB_SyxThg, false)) {
		SCFunction* _tmPf0 = JB_Incr(SC_Base_LookUpFunc(name_space, ch->Name, exp, params));
		JB_Decr(params);
		JB_Decr(ch);
		JB_Decr(fn);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	SCDecl* ThgDecl = JB_Incr(SC_TypeOfExpr(ch, name_space, nil));
	JB_Decr(ch);
	if ((!ThgDecl)) {
		JB_Decr(ThgDecl);
		JB_Decr(params);
		JB_Decr(fn);
		return nil;
	}
	JB_SetRef(fn, ThgDecl->Type->FuncProto);
	JB_Decr(ThgDecl);
	if ((!fn)) {
		JB_Decr(params);
		JB_Decr(fn);
		return SC_TypeOfSyntaxCall(exp, name_space, side);
	}
	SCParamArray* PList = JB_Incr(SC_PA_Constructor(nil, exp));
	if ((!SC_PA_PreReadTypes(PList, name_space, params, side))) {
		JB_Decr(PList);
		JB_Decr(params);
		JB_Decr(fn);
		return nil;
	}
	JB_Decr(params);
	SCFunction* fn2 = JB_Incr(SC_Func_ArgsMatch(fn, nil, name_space, PList, 0));
	if ((!fn2)) {
		JB_FreeIfDead(SC_Func_ArgsMatch(fn, nil, name_space, PList, kJB_kTypeCastDescribeErrors));
	}
	 else if ((!fn2->ReturnType)) {
		JB_SetRef(exp->Obj, JB_TypeVoid);
	}
	JB_Decr(fn);
	JB_Decr(PList);
	JB_SafeDecr(fn2);
	return fn2;
}

SCObject* SC_TypeOfLast(Message* Exp, SCNode* name_space, Message* side) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	SCDecl* _tmPf1 = JB_Incr(SC_TypeOfExpr(_tmPf0, name_space, nil));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCObject* SC_TypeOfList(Message* Exp, SCNode* name_space, Message* side) {
	int FoundType = 0;
	int AllowType = 0;
	int Count = 0;
	bool HasBig = false;
	bool Numeric = true;
	{
		Message* s = JB_Incr(((Message*)JB_Ring_First(Exp)));
		while (s) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(s)));
			SCDecl* typ = JB_Incr(SC_TypeOfExpr(s, name_space, nil));
			if ((!typ)) {
				JB_Decr(typ);
				JB_Decr(_Nf2);
				JB_Decr(s);
				return nil;
			}
			int N = SC_Decl_IsNumeric(typ);
			if ((!N)) {
				Numeric = false;
			}
			 else if (Numeric) {
				if (N > 1) {
					HasBig = true;
				}
				if (JB_Object_MustBe(typ, &SCDeclData, s)) {
					DataTypeCode T = ((SCDecl*)typ)->Type->TypeInfo;
					if (SC_Msg_IsZero(s)) {
						AllowType = SC_TC_FloatIntMerge(T, AllowType, s);
					}
					 else {
						FoundType = SC_TC_FloatIntMerge(T, FoundType, s);
						SC_Msg_WrapFloatOrInt(s, T, N, ((SCDecl*)typ));
					}
				}
				Count = (Count + N);
				if (Count > 4) {
					JB_Msg_SyntaxExpect(Exp, JB_LUB[1116]);
					JB_Decr(typ);
					JB_Decr(_Nf2);
					JB_Decr(s);
					return nil;
				}
			}
			JB_Decr(typ);
			JB_SetRef(s, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(s);
		;
	}
	;
	if ((!Numeric)) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[855]);
		return nil;
	}
	if (Count < 2) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[1340]);
		return nil;
	}
	if ((!(FoundType))) {
		FoundType = AllowType;
	}
	bool IsFloat = (FoundType == 2);
	SCClass* _tmPf3 = JB_Incr(SC_VecType(IsFloat, Count));
	SCDecl* cns = JB_Incr(SC_Class_NotConst(_tmPf3));
	JB_Decr(_tmPf3);
	if ((!HasBig)) {
		JB_SetRef(Exp->Obj, cns);
		JB_SafeDecr(cns);
		return cns;
	}
	JB_Decr(cns);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
	JB_String* name = JB_Incr(((JB_StringC*)JB_Ternary(IsFloat, JB_LUB[2033], JB_LUB[1741])));
	Message* list = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
	SC_Msg_AppendAllInto(Exp, list);
	JB_Msg_AppendSyx(Exp, JB_SyxThg, name);
	JB_Decr(name);
	JB_Tree_SyntaxAppend(Exp, list);
	JB_Decr(list);
	Exp->Func = JB_SyxFunc;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	SCDecl* _tmPf4 = JB_Incr(SC_TypeOfExpr(Exp, name_space, nil));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

SCObject* SC_TypeOfMsg(Message* Exp, SCNode* name_space, Message* side) {
	SCObject* rz = nil;
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* type = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	if ((!JB_FreeIfDead(JB_Msg__GetFunc(type)))) {
		JB_Decr(type);
		JB_Decr(rz);
		return nil;
	}
	Message* name = JB_Incr(((Message*)JB_Ring_First(type)));
	if (name) {
		JB_FreeIfDead(SC_TypeOfExpr(name, name_space, nil));
	}
	{
		Message* _LoopSrcf1 = JB_Incr(((Message*)JB_Ring_NextSib(type)));
		Message* ch = JB_Incr(_LoopSrcf1);
		while (ch) {
			JB_FreeIfDead(SC_TypeOfExpr(ch, name_space, nil));
			JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
		};
		JB_Decr(ch);
		;
		JB_Decr(_LoopSrcf1);
		JB_Decr(name);
	}
	;
	JB_Decr(type);
	SCClass* msg = JB_Incr(SC_Comp__FindClassName(JB_LUB[1785]));
	if (msg) {
		JB_SetRef(rz, msg->TypeNormal);
	}
	JB_Decr(msg);
	JB_SafeDecr(rz);
	return rz;
}

SCObject* SC_TypeOfNothing(Message* Exp, SCNode* name_space, Message* side) {
	return nil;
}

SCObject* SC_TypeOfNum(Message* Exp, SCNode* name_space, Message* side) {
	if (JB_Str_ContainsString(Exp->Name, JB_LUB[354])) {
		JB_Msg_Float(Exp);
		return JB_Typefloat->TypeNormal;
	}
	int64 Val = JB_Msg_Int(Exp, 0);
	JB_Msg_BecomeNum(Exp, Val);
	if (((Val << 32) >> 32) != Val) {
		return JB_TypeInt64->TypeNormal;
	}
	return JB_TypeInt->TypeNormal;
}

SCObject* SC_TypeOfQues(Message* Exp, SCNode* name_space, Message* side) {
	SCObject* type = nil;
	Message* prm = ((Message*)JB_Ring_First(Exp));
	if ((!JB_Str_Exists(Exp->Name))) {
		prm = ((Message*)JB_Ring_NextSib(prm));
	}
	if (prm) {
		type = SC_TypeOfExprModulesOK(prm, name_space, nil);
	}
	Message* m = SC_Msg_ReplaceInbuiltSub(Exp, name_space, SC_Object_AsDecl(type));
	if (m) {
		SC_Msg_SafeReplaceWith(Exp, m);
	}
	if ((!JB_Msg_EqualsSyx(Exp, JB_SyxQues, false))) {
		return SC_TypeOfExpr(Exp, name_space, nil);
	}
	return nil;
}

SCObject* SC_TypeOfReal(Message* Exp, SCNode* name_space, Message* side) {
	SCDecl* _tmPf0 = SC_TypeOfExpr(((Message*)JB_Ring_First(Exp)), name_space, nil);
	if ((!_tmPf0)) {
		return nil;
	}
	return SC_Decl_MakeReal(_tmPf0);
}

SCObject* SC_TypeOfRel(Message* Exp, SCNode* name_space, Message* side) {
	JB_Incr(side);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* LN = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_NextSib(LN)));
	Message* opch = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	SCOperator* Comp = JB_Incr(SC_Opp__Lookup(opch));
	Message* RN = JB_Incr(((Message*)JB_Ring_NextSib(opch)));
	if ((!RN)) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[1020]);
		JB_Decr(side);
		JB_Decr(RN);
		JB_Decr(Comp);
		JB_Decr(opch);
		JB_Decr(LN);
		return nil;
	}
	if ((JB_Msg_SyntaxEquals(opch, JB_LUB[1728], false)) or (JB_Msg_SyntaxEquals(opch, JB_LUB[1730], false))) {
		SCDecl* _tmPf2 = JB_Incr(SC_Msg_NiceIsFlagSyntax(LN, opch, RN, name_space, side));
		JB_Decr(side);
		JB_Decr(RN);
		JB_Decr(Comp);
		JB_Decr(opch);
		JB_Decr(LN);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_SetRef(side, nil);
	Message* P = JB_Incr(SC_Msg_NiceParent(Exp));
	Syntax ParentFunc = P->Func;
	JB_Decr(P);
	bool ShouldBeSet = ((ParentFunc == JB_SyxArg) or (ParentFunc == JB_SyxDecl));
	if ((!SC_Opp_SyntaxEquals(Comp, JB_LUB[587], false))) {
		if (ShouldBeSet) {
			if (true) {
				JB_Msg_SyntaxExpect(opch, JB_LUB[724]);
			}
		}
	}
	 else if (ShouldBeSet) {
		JB_SetRef(side, RN);
		(SC_Msg_TmpTypeSet(Exp, kSC__ASMtmp_kSetVar));
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(opch, JB_LUB[822]);
		}
	}
	SCDecl* RC = nil;
	SCDecl* LC = nil;
	if (side) {
		JB_SetRef(RC, SC_TypeOfExprNeeded(RN, name_space));
		if ((!RC)) {
			JB_Decr(side);
			JB_Decr(LC);
			JB_Decr(RC);
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(opch);
			JB_Decr(LN);
			return nil;
		}
		JB_SetRef(LC, SC_TypeOfExpr(LN, name_space, side));
		if (((JB_Msg_EqualsSyx(Exp, JB_SyxRel, false))) and (LN == JB_FreeIfDead(((Message*)JB_Ring_Last(Exp))))) {
			SCObject* _tmPf3 = JB_Incr(SC_TypeOfRel(Exp, name_space, side));
			JB_Decr(side);
			JB_Decr(LC);
			JB_Decr(RC);
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(opch);
			JB_Decr(LN);
			JB_SafeDecr(_tmPf3);
			return _tmPf3;
		}
	}
	 else {
		JB_SetRef(LC, SC_TypeOfExpr(LN, name_space, nil));
		JB_SetRef(RC, SC_TypeOfExprNeeded(RN, name_space));
		if ((!RC)) {
			JB_Decr(side);
			JB_Decr(LC);
			JB_Decr(RC);
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(opch);
			JB_Decr(LN);
			return nil;
		}
	}
	if ((!JB_Msg_EqualsSyx(Exp, JB_SyxRel, false))) {
		JB_Decr(side);
		JB_Decr(LC);
		JB_Decr(RC);
		JB_Decr(RN);
		JB_Decr(Comp);
		JB_Decr(opch);
		JB_Decr(LN);
		return nil;
	}
	if ((!LC)) {
		JB_Msg_SyntaxExpect(LN, JB_LUB[739]);
		JB_Decr(side);
		JB_Decr(LC);
		JB_Decr(RC);
		JB_Decr(RN);
		JB_Decr(Comp);
		JB_Decr(opch);
		JB_Decr(LN);
		return nil;
	}
	if (side) {
		if ((!SC_Decl_ConstCheck(LC, LN, RN, RC))) {
			JB_Decr(side);
			JB_Decr(LC);
			JB_Decr(RC);
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(opch);
			JB_Decr(LN);
			return nil;
		}
	}
	JB_SetRef(opch->Obj, Comp);
	JB_Decr(opch);
	if (((bool)(Comp->Kind & kSC__OpMode_AndOr))) {
		JB_Decr(side);
		SCDecl* _tmPf5 = JB_Incr(SC_Or_And_Expansion(LC, RC, Exp, name_space));
		JB_Decr(LC);
		JB_Decr(RC);
		JB_Decr(RN);
		JB_Decr(Comp);
		JB_Decr(LN);
		JB_SafeDecr(_tmPf5);
		return _tmPf5;
	}
	int Custom = 0;
	if (RC != JB_TypeNil) {
		SCDecl* IPM = JB_Incr(SC_IsPointerMath(LC, RC, Comp, Exp));
		if (IPM) {
			JB_Decr(side);
			SCDecl* _tmPf4 = JB_Incr(SC_Decl_CheckMath(IPM, Exp));
			JB_Decr(IPM);
			JB_Decr(LC);
			JB_Decr(RC);
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(LN);
			JB_SafeDecr(_tmPf4);
			return _tmPf4;
		}
		JB_Decr(IPM);
	}
	Custom = SC_UseCustomOperators(LC, RC, Comp, Exp);
	if (Custom == kSC__CustomOps_Needed) {
		if ((!SC_Opp_IsCompSet(Comp))) {
			JB_Decr(side);
			JB_Decr(LC);
			JB_Decr(RC);
			SCDecl* _tmPf8 = JB_Incr(SC_CustomFuncOp(Exp, Comp, name_space, RN));
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(LN);
			JB_SafeDecr(_tmPf8);
			return _tmPf8;
		}
		 else if (RC == JB_TypeNil) {
			0;
		}
		 else if (((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_CaseAware)) or SC_CanOpCompare(Exp, LC, RC, Comp)) {
			JB_Decr(side);
			SCDecl* _tmPf6 = JB_Incr(SC_DoOpCompare(Exp, LC, RC, Comp, name_space));
			JB_Decr(LC);
			JB_Decr(RC);
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(LN);
			JB_SafeDecr(_tmPf6);
			return _tmPf6;
		}
	}
	 else if ((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_Bit)) {
		if ((!(SC_Decl_NoFloat(RC, RN) and SC_Decl_NoFloat(LC, LN)))) {
			JB_Decr(side);
			JB_Decr(LC);
			JB_Decr(RC);
			JB_Decr(RN);
			JB_Decr(Comp);
			JB_Decr(LN);
			return nil;
		}
	}
	JB_Decr(LN);
	if ((((bool)(Custom & kSC__CustomOps_TypeCastFromBool))) and (!side)) {
		JB_SetRef(LC, JB_TypeInt->TypeNormal);
		JB_SetRef(RC, LC);
	}
	if (Custom <= kSC__CustomOps_Needed) {
		SC_Decl_ExpectRelMatch(LC, RC, RN, side, Exp);
	}
	 else if (Custom == kSC__CustomOps_LeftOnlyIsVector) {
		JB_Decr(side);
		JB_Decr(RC);
		JB_Decr(RN);
		JB_Decr(Comp);
		JB_SafeDecr(LC);
		return LC;
	}
	 else {
		JB_Decr(side);
		JB_Decr(LC);
		JB_Decr(RN);
		JB_Decr(Comp);
		JB_SafeDecr(RC);
		return RC;
	}
	JB_Decr(RN);
	if ((!side) and ((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_Compare))) {
		JB_Decr(side);
		JB_Decr(LC);
		JB_Decr(RC);
		JB_Decr(Comp);
		return JB_TypeBool->TypeNormal;
	}
	JB_Decr(side);
	if (((bool)(Custom & kSC__CustomOps_TypeCastToBetter))) {
		SCDecl* _tmPf7 = JB_Incr(SC_Decl_Better_Numeric(LC, RC, Comp->Kind));
		JB_Decr(LC);
		JB_Decr(RC);
		JB_Decr(Comp);
		JB_SafeDecr(_tmPf7);
		return _tmPf7;
	}
	JB_Decr(Comp);
	JB_Decr(RC);
	JB_SafeDecr(LC);
	return LC;
}

SCObject* SC_TypeOfSDot(Message* Exp, SCNode* name_space, Message* side) {
	SC_Func__Tran_Sdt(Exp);
	return SC_TypeOfDot(Exp, name_space, side);
}

SCObject* SC_TypeOfSString(Message* Exp, SCNode* name_space, Message* side) {
	return JB_TypeStringZero->TypeReal;
}

SCObject* SC_TypeOfSthg(Message* Exp, SCNode* name_space, Message* side) {
	Exp->Func = JB_SyxSheb;
	//...;
	return nil;
}

SCObject* SC_TypeOfStr(Message* Exp, SCNode* name_space, Message* side) {
	SC_Func__String_Expand(Exp, SC_Msg_MsgOwningFunc(Exp));
	return JB_TypeStringZero->TypeReal;
}

SCDecl* SC_TypeOfSwizzle(Message* Exp, SCDecl* Type, SCNode* name_space, Message* side, int swiz) {
	JB_Incr(name_space);
	JB_Incr(Exp);
	int Count = swiz >> 16;
	int W = SC_Class_NumericCount(Type->Type);
	if ((!((Count == 1) or (side == nil)))) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[719]);
		JB_Decr(Exp);
		JB_Decr(name_space);
		return nil;
	}
	if (Count > 4) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[1373]);
		JB_Decr(Exp);
		JB_Decr(name_space);
		return nil;
	}
	if (W == 3) {
		W = 4;
	}
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	Message* prms = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	SCClass* _tmPf4 = JB_Incr(SC_VecType((!SC_Decl_IsInteger(Type)), Count));
	SCDecl* T = JB_Incr(SC_Class_NotConst(_tmPf4));
	JB_Decr(_tmPf4);
	if (Count == 1) {
		swiz = (swiz & 7);
		if (swiz >= W) {
			JB_Msg_SyntaxExpect(prms, JB_LUB[1371]);
			JB_Decr(Exp);
			JB_Decr(name_space);
			JB_Decr(T);
			JB_Decr(prms);
			return nil;
		}
		JB_Msg_BecomeStr(Exp, JB_SyxAcc, JB_LUB[0]);
		prms->Func = JB_SyxArr;
		JB_Msg_AppendNum(prms, swiz);
	}
	 else {
		JB_Tree_Remove(prms);
		Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_First(Exp)));
		Message* oof = JB_Incr(_tmPf5);
		JB_Decr(_tmPf5);
		JB_String* tmp = JB_Incr(oof->Name);
		if (JB_Msg_EqualsSyx(oof, JB_SyxThg, false)) {
			JB_Tree_Remove(oof);
		}
		 else {
			NameAndMsg what = SC_Msg_IntoVariable(oof, name_space);
			JB_SetRef(oof, what.Arg);
			if ((!oof)) {
				JB_Decr(Exp);
				JB_Decr(name_space);
				SC_NameAndMsg_Destructor((&what));
				JB_Decr(tmp);
				JB_Decr(oof);
				JB_Decr(T);
				JB_Decr(prms);
				return nil;
			}
			Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_Parent(oof)));
			JB_SetRef(_tmPf6->Obj, T);
			JB_Decr(_tmPf6);
			JB_SetRef(name_space, SC_Msg_AsArg(oof));
			JB_Msg_BecomeStr(Exp, JB_SyxBra, JB_LUB[0]);
			Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_Last(oof)));
			Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_Last(_tmPf8)));
			JB_Decr(_tmPf8);
			JB_SetRef(Exp, _tmPf7);
			JB_Decr(_tmPf7);
			JB_SetRef(tmp, Exp->Name);
			JB_SetRef(Exp->Obj, T);
			SC_NameAndMsg_Destructor((&what));
		}
		JB_Decr(oof);
		JB_Msg_BecomeStr(Exp, JB_SyxList, JB_LUB[0]);
		{
			int i = 0;
			while (i < Count) {
				int field = (swiz >> (i * 3)) & 7;
				Message* item = nil;
				if (field == 4) {
					JB_SetRef(item, (JB_Syx_Msg(JB_SyxNum, JB_LUB[441])));
				}
				 else {
					if (field >= W) {
						JB_Msg_SyntaxExpect(Exp, JB_LUB[1371]);
						JB_Decr(Exp);
						JB_Decr(name_space);
						JB_Decr(item);
						JB_Decr(tmp);
						JB_Decr(T);
						JB_Decr(prms);
						return nil;
					}
					Message* thg = JB_Incr((JB_Syx_Msg(JB_SyxThg, tmp)));
					JB_SetRef(item, ({
						Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxAcc, JB_LUB[0])));
						JB_Tree_SyntaxAppend(__imPf1, thg);
						Message* _tmPf9 = ({
							Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxArr, JB_LUB[0])));
							Message* _tmPf10 = JB_Incr(JB_Syx_IntMsg(JB_SyxNum, field));
							JB_Tree_SyntaxAppend(__imPf2, (_tmPf10));
							JB_Decr(_tmPf10);
							JB_SafeDecr(nil);
							 __imPf2;
						});
						JB_Tree_SyntaxAppend(__imPf1, _tmPf9);
						JB_Decr(_tmPf9);
						JB_SafeDecr(__imPf1);
						 __imPf1;
					}));
					JB_Decr(thg);
				}
				JB_FreeIfDead(SC_TypeOfExpr(item, name_space, nil));
				JB_Tree_SyntaxAppend(Exp, item);
				JB_Decr(item);
				i++;
			};
		}
		;
		JB_Decr(tmp);
	}
	JB_Decr(prms);
	JB_Decr(name_space);
	JB_Decr(Exp);
	JB_SafeDecr(T);
	return T;
}

SCDecl* SC_TypeOfSyntaxCall(Message* exp, SCNode* name_space, Message* side) {
	JB_Msg_BecomeStr(exp, JB_SyxDot, JB_LUB[1252]);
	return SC_TypeOfExpr(exp, name_space, side);
}

SCObject* SC_TypeOfSyx(Message* Exp, SCNode* name_space, Message* side) {
	SC_Msg_BecomeSyx(Exp);
	return SC_TypeOfThg(Exp, name_space, side);
}

SCObject* SC_TypeOfTernary(Message* Exp, SCNode* name_space, Message* side) {
	Message* list = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* params = JB_Incr(((Message*)JB_Ring_NextSib(list)));
	if ((!(JB_Ring_HasChildren(list) and JB_Ring_HasChildCount(params, 1)))) {
		JB_Msg_SyntaxExpect(Exp, JB_LUB[1638]);
		JB_Decr(params);
		JB_Decr(list);
		return nil;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(list)));
	Message* first = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* second = JB_Incr(((Message*)JB_Ring_NextSib(first)));
	if (second) {
		if ((!JB_Msg_ExpectLast(second, JB_LUB[0]))) {
			JB_Decr(second);
			JB_Decr(first);
			JB_Decr(params);
			JB_Decr(list);
			return nil;
		}
	}
	 else {
		JB_SetRef(second, SC_Msg_CreateNil(Exp));
		(JB_Ring_NextSibSet(first, second));
	}
	Message* Test = JB_Incr(JB_Msg_NeedSyx(params, JB_SyxNil));
	if ((!Test)) {
		JB_Decr(Test);
		JB_Decr(second);
		JB_Decr(first);
		JB_Decr(params);
		JB_Decr(list);
		return nil;
	}
	SCDecl* result = JB_Incr(SC_SameTypeSub(first, second, name_space));
	JB_Decr(first);
	JB_Decr(second);
	if (((bool)result) and ((bool)JB_FreeIfDead(SC_ExpandToBool(Test, name_space)))) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(list)));
		JB_Tree_SyntaxAppend(params, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Msg_BecomeStr(list, JB_SyxThg, JB_LUB[972]);
		JB_SetRef(params->Obj, SC__Comp_TernaryFunc);
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(list)));
		JB_Tree_SyntaxAppend(params, _tmPf2);
		JB_Decr(_tmPf2);
		(SC_Msg_TmpTypeSet(Exp, kSC__ASMtmp_kTern));
		JB_Decr(Test);
		JB_Decr(params);
		JB_Decr(list);
		JB_SafeDecr(result);
		return result;
	}
	JB_Decr(list);
	JB_Decr(params);
	JB_Decr(Test);
	JB_Decr(result);
	return nil;
}

SCObject* SC_TypeOfThg(Message* Exp, SCNode* name_space, Message* side) {
	SCObject* R = SC_Base_LookUpVar(name_space, Exp->Name, Exp, side);
	if (JB_Object_FastIsa(R, &SCModuleData)) {
		SCClass* Cls = ((SCModule*)R)->Cls;
		if ((!Cls)) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[748]);
			return nil;
		}
		if (Cls->IsModel) {
			return SC_Class_GetFlyingMemory(Cls, Exp);
		}
		if (SC_Class_IsObject(Cls)) {
			SCDecl* T = Cls->ClassType;
			if (T) {
				JB_SetRef(Exp->Name, T->Name);
				return T;
			}
			if (true) {
				JB_Msg_SyntaxExpect(Exp, nil);
			}
		}
		if (true) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[853]);
			return nil;
		}
	}
	 else if (JB_Object_FastIsa(R, &SCDeclData)) {
		if (side) {
			(SC_Decl_SyntaxIsSet(((SCDecl*)R), kSC__SCDeclInfo_SetTo, true));
		}
		JB_Object* O = ((SCDecl*)R)->IsLookupOnly;
		if (JB_Object_Isa(O, &MessageData)) {
			SC_Msg_SafeReplaceWith(Exp, JB_Msg_Copy(((Message*)O), Exp));
		}
	}
	return R;
}

SCObject* SC_TypeOfType(Message* Exp, SCNode* name_space, Message* side) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Exp)));
	Message* exp0 = JB_Incr(SC_Msg_UnBra(_tmPf0));
	JB_Decr(_tmPf0);
	SCDecl* Old = JB_Incr(SC_TypeOfExpr(exp0, name_space, side));
	if ((!Old)) {
		JB_Decr(Old);
		JB_Decr(exp0);
		return nil;
	}
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(Exp)));
	SCDecl* New = JB_Incr(SC_ExtractDecl(_tmPf1, name_space, kSC__DeclMode_TypeCast));
	JB_Decr(_tmPf1);
	if ((!New)) {
		JB_Decr(New);
		JB_Decr(Old);
		JB_Decr(exp0);
		return nil;
	}
	if (SC_Decl_IsntReallyCastable(Old, exp0) or SC_Decl_IsntReallyCastable(New, exp0)) {
		if (true) {
			JB_Msg_SyntaxExpect(Exp, JB_LUB[729]);
		}
	}
	 else {
		if (SC_Msg_IsInt(exp0) and SC_Decl_TypeSuffers(New)) {
			if (SC_Msg_IsZero(exp0) or SC_Decl_IsNil(Old)) {
				JB_SetRef(New, SC_Decl_MakeNewNil(New));
			}
			 else {
				JB_SetRef(New, SC_Decl_MakeNewReal(New));
			}
		}
		SC_Decl_NoBlindCasts(New, Old, Exp, name_space);
	}
	JB_Decr(exp0);
	JB_Decr(Old);
	JB_SafeDecr(New);
	return New;
}

SCObject* SC_TypeOfUnit(Message* Exp, SCNode* name_space, Message* side) {
	if (JB_Msg_SyntaxEquals(Exp, JB_LUB[1749], false)) {
		//using;
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Exp);
		JB_Msg_BecomeStr(Exp, JB_SyxType, JB_LUB[0]);
		JB_Msg_AppendSyx(Exp, JB_SyxThg, JB_LUB[1749]);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		SCDecl* _tmPf2 = JB_Incr(JB_TypeInt64->TypeNormal);
		JB_MsgPos_Destructor((&_usingf0));
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	double Mul = 0.0f;
	SCClass* Type = JB_Incr(JB_TypeInt);
	JB_String* unit = JB_Incr(Exp->Name);
	if ((JB_Str_Equals(unit, JB_LUB[980], false)) or (JB_Str_Equals(unit, JB_LUB[979], false))) {
		Mul = ((double)(1 << 10));
	}
	 else if ((JB_Str_Equals(unit, JB_LUB[1002], false)) or (JB_Str_Equals(unit, JB_LUB[1001], false))) {
		Mul = ((double)(1 << 20));
	}
	 else if ((JB_Str_Equals(unit, JB_LUB[895], false)) or (JB_Str_Equals(unit, JB_LUB[894], false))) {
		Mul = ((double)(1 << 30));
	}
	 else if ((JB_Str_Equals(unit, JB_LUB[1264], false)) or (JB_Str_Equals(unit, JB_LUB[1263], false))) {
		Mul = ((double)(((int64)1) << ((int64)40)));
	}
	 else if (JB_Str_Equals(unit, JB_LUB[1993], false)) {
		Mul = 0;
	}
	 else {
		JB_SetRef(Type, JB_TypeDate);
		float s4 = 64.0f * 1024.0f;
		if (JB_Str_Equals(unit, JB_LUB[1911], false)) {
			Mul = s4;
		}
		 else if (JB_Str_Equals(unit, JB_LUB[1802], false)) {
			Mul = 64.0f;
		}
		 else if (JB_Str_Equals(unit, JB_LUB[2106], false)) {
			Mul = (3.1415926535897932f);
			JB_SetRef(Type, JB_Typef64);
		}
		 else if (JB_Str_Equals(unit, JB_LUB[2107], false)) {
			Mul = (6.2831853071795864f);
			JB_SetRef(Type, JB_Typef64);
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[1589], JB_LUB[1588])) {
			Mul = (86400.0f * s4);
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[2047], JB_LUB[2046])) {
			Mul = (604800.0f * s4);
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[2063], JB_LUB[2062])) {
			Mul = (31536000.0f * s4);
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[1788], JB_LUB[1786])) {
			Mul = (60.0f * s4);
		}
		 else if (SC_Msg_UnitMatch(Exp, JB_LUB[1697], JB_LUB[1696])) {
			Mul = (3600.0f * s4);
		}
		 else {
			if (true) {
				JB_Msg_SyntaxExpect(Exp, JB_LUB[1349]);
			}
		}
	}
	JB_Decr(unit);
	Message* it = JB_Incr(((Message*)JB_Ring_First(Exp)));
	if ((!it)) {
		JB_Decr(it);
		JB_Decr(Type);
		return nil;
	}
	JB_String* str = JB_Incr(JB_LUB[0]);
	double val = JB_Msg_Float(it);
	if ((!Mul)) {
		JB_SetRef(str, JB_dbl_Render((1.0f / val), 6, nil));
		JB_SetRef(Type, JB_Typefloat);
	}
	 else {
		val = (val * Mul);
		if (Type != JB_TypeInt) {
			JB_SetRef(str, JB_dbl_RenderFloat(val, nil));
		}
		 else if (JB_Str_ContainsByte(it->Name, '.')) {
			JB_SetRef(str, JB_dbl_RenderFloat(val, nil));
			double big = 16.0f * (1024.0f * 1024.0f);
			if ((val >= big) or (val < (-big))) {
				JB_SetRef(Type, JB_Typef64);
			}
			 else {
				JB_SetRef(Type, JB_Typefloat);
			}
		}
		 else {
			JB_SetRef(str, JB_int64_Render(((int64)val), nil));
			double big = ((double)(((int64)1) << ((int64)31)));
			if ((val >= big) or (val < (-big))) {
				JB_SetRef(Type, JB_TypeInt64);
			}
		}
	}
	if (JB_Msg_SyntaxEquals(it, str, false)) {
		JB_SetRef(str, it->Name);
	}
	JB_Msg_BecomeStr(Exp, JB_SyxNum, str);
	JB_Decr(str);
	JB_Tree_Remove(it);
	JB_Decr(it);
	SCDecl* _tmPf1 = JB_Incr(Type->TypeNormal);
	JB_Decr(Type);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCDecl* SC_TypeOfVecAccess(Message* index, SCDecl* ty0, int w) {
	if (JB_Msg_EqualsSyx(index, JB_SyxNum, false)) {
		if ((!JB_int64_OperatorInRange(JB_Msg_Int(index, 0), w))) {
			JB_Msg_SyntaxExpect(index, JB_LUB[1371]);
			return nil;
		}
	}
	if (JB_TC_IsFloat(ty0->Type->TypeInfo)) {
		return SC_Class_NotConst(JB_Typefloat);
	}
	return SC_Class_NotConst(JB_TypeInt);
}

JB_String* SC_UniqueTmpVar(SCNode* base, JB_String* name) {
	JB_FS_AppendByte(JB_fs_tmp_num, '_');
	JB_FS_AppendString(JB_fs_tmp_num, name);
	if (base) {
		SCFunction* FN = SC_Base_OwningFunc(base);
		if (FN) {
			JB_FS_AppendByte(JB_fs_tmp_num, 'f');
			JB_FS_AppendInt32(JB_fs_tmp_num, ((int)FN->TmpCounter++));
		}
	}
	 else {
		JB_FS_AppendInt32(JB_fs_tmp_num, SC__SC_UniqueNum++);
	}
	return JB_FS_SyntaxCast(JB_fs_tmp_num);
}

int SC_UseCustomOperators(SCDecl* LC, SCDecl* RC, SCOperator* Comp, Message* ErrPlace) {
	if (((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_Custom)) or ((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_CaseAware))) {
		return kSC__CustomOps_Needed;
	}
	bool CompOrSet = SC_Opp_IsCompSet(Comp);
	DataTypeCode LNT = SC_Decl_TypeInfo(LC);
	DataTypeCode RNT = SC_Decl_TypeInfo(RC);
	int LN = JB_TC_NumericCountBoolsToo(LNT);
	int RN = JB_TC_NumericCountBoolsToo(RNT);
	if ((!(((bool)LN) and (LN == RN)))) {
		if (((bool)LN) and (((bool)RN) and ((LN == 1) or (RN == 1)))) {
			if (CompOrSet) {
				return kSC__CustomOps_Needed;
			}
			if ((!JB_TC_SameBasicType(LNT, RNT))) {
				JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1372]);
				return 0;
			}
			if (LN > RN) {
				return kSC__CustomOps_LeftOnlyIsVector;
			}
			 else {
				return kSC__CustomOps_RightOnlyIsVector;
			}
		}
		return kSC__CustomOps_Needed;
	}
	int extra = 0;
	if (((bool)LN) and ((bool)RN)) {
		bool GotABool = ((kJB__TC_bool == LNT) or (kJB__TC_bool == RNT));
		if (LNT != RNT) {
			if (GotABool and ((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_Compare))) {
				JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[727]);
				return 0;
			}
			if (((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_MathLike)) and (!((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_NoExtraBits)))) {
				extra = kSC__CustomOps_TypeCastToBetter;
			}
		}
		 else {
			if (GotABool and (!((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_Compare)))) {
				extra = kSC__CustomOps_TypeCastFromBool;
			}
			 else if (((bool)SC_Opp_SyntaxIs(Comp, kSC__OpMode_MakesSigned)) and SC_Decl_IsUintLike(LC)) {
				extra = kSC__CustomOps_TypeCastToBetter;
			}
		}
	}
	if ((!SC__Base_ConstantsLoadingOverride) and LC->Type->TreatAsBaseType) {
		return kSC__CustomOps_Needed | extra;
	}
	if ((LN > 1) and CompOrSet) {
		return kSC__CustomOps_Needed | extra;
	}
	if ((!extra)) {
		SCClass* t = LC->Type;
		if (((bool)t->Super) and SC_Class_HasOperator(t, Comp->FuncName)) {
			return kSC__CustomOps_Needed;
		}
	}
	return extra;
}

SCClass* SC_VecType(bool isfloat, int count) {
	if (isfloat) {
		if (count == 2) {
			return JB_TypeVec2;
		}
		if (count == 3) {
			return JB_TypeVec3;
		}
		if (count == 4) {
			return JB_TypeVec4;
		}
		return JB_Typefloat;
	}
	if (count == 2) {
		return JB_TypeiVec2;
	}
	if (count == 3) {
		return JB_TypeiVec3;
	}
	if (count == 4) {
		return JB_TypeiVec4;
	}
	return JB_TypeInt;
}

void* SC_voidtest(void* abc) {
	//visible;
	return abc;
}

void* SC_voidtest2(void* abc) {
	void* abc2 = SC_voidtest(abc);
	//visible;
	return nil;
}


Message* JB_Tk__AddToOutput(Message* Output, Message* curr, Message* prev, int pos) {
	if (prev) {
		int Extra = JB_Msg_PrevIndentCheck(curr, prev);
		if (Extra < 0) {
			return JB_Tk__LoweredIndent(Output, curr);
		}
		if (Extra > 0) {
			if ((Extra == 2) and (JB_int_OperatorIsa(((int)prev->Indent), 4))) {
				Syntax cf = curr->Func;
				if ((prev->Func != JB_SyxTmp) or ((cf != JB_SyxTmp) and (cf != JB_SyxBra))) {
					return JB_Tk__UnexpectedSyntax(curr);
				}
				if (((bool)(curr->Indent & 1))) {
					return JB_Tk__ErrorAdd(JB_LUB[912], curr->Position);
				}
				JB_FreeIfDead(JB_Tk__NewParentName(prev, JB_SyxArg, curr->Position, JB_LUB[0]));
				JB_Tree_SyntaxAppend(prev, curr);
				return prev;
			}
			return JB_Msg_GoIntoInvisArg(curr, prev, pos);
		}
	}
	JB_Tree_SyntaxAppend(Output, curr);
	return Output;
}

void JB_Tk__AddXMLText(Message* XML, JB_String* s, int start, int i) {
	Ind a = JB_Str_OutWhite(s, start, JB_int__Max());
	if (a >= i) {
		return;
	}
	JB_String* str = JB_Incr(JB_Str_Range(s, start, i));
	JB_String* str2 = JB_Incr(JB_Str_Trim(str, nil));
	JB_Decr(str);
	JB_String* str3 = JB_Incr(JB_Str_MultiReplaceAll(str2, JB__Constants_XML_UnEscapeStr, JB_StdErr));
	JB_Decr(str2);
	JB_FreeIfDead(JB_Tk__NewParentName(XML, JB_SyxXTxt, start, str3));
	JB_Decr(str3);
}

Message* JB_Tk__BarThings(int Start, Syntax Syx) {
	Message* rz = nil;
	if (JB_Tk__NextByte() == '=') {
		JB_Decr(rz);
		return nil;
	}
	JB__Tk_StopBars = (kJB__Tk_kTemporalSyx | kJB__Tk_kFuncAfterBar);
	Message* item = JB_Incr(JB_Tk__ProcessThingNoBar(kJB__Tk_kOppNoBar, false));
	if (item) {
		JB_SetRef(item, JB_Tk__ParseItem(item, 0, kJB__Tk_kOppNoBar));
	}
	 else {
		JB_SetRef(item, JB_Tk__NewEmpty(nil, JB_SyxEmb, Start, Start));
	}
	JB__Tk_StopBars = 0;
	if ((!JB_Tk__ExpectEndChar(JB_Tk__NextStart(), JB_LUB[2069], true))) {
		JB_Decr(item);
		JB_Decr(rz);
		return nil;
	}
	JB_SetRef(rz, JB_Tk__NewParentName(nil, Syx, Start, JB_LUB[0]));
	JB_Tree_SyntaxAppend(rz, item);
	JB_Decr(item);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__BeforeRelSub(int Start, bool Mode) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParent(nil, JB_SyxBRel, Start, JB_Tk__NextStart()));
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(0, Mode));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		JB_Decr(rz);
		return nil;
	}
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(rz);
	return rz;
}

bool JB_Tk__CanStatement() {
	return JB_CS_HasChar(JB__Constants_CSAfterStatement, JB_Tk__NextByte());
}

Message* JB_Tk__ChainTemporalRels(Message* FirstThing, Message* opp) {
	Message* rz = nil;
	if (JB_Msg_EqualsSyx(opp, JB_SyxSCom, false)) {
		JB_Tree_SyntaxAppend(opp, FirstThing);
		JB_Decr(rz);
		return opp;
	}
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxTRel, FirstThing->Position, JB_LUB[0]));
	JB_Tree_SyntaxAppend(rz, FirstThing);
	JB_Tree_SyntaxAppend(rz, opp);
	if ((!JB_Tk__WillEnd())) {
		Message* Last = JB_Incr(JB_Tk__ProcessThingOrTmp(kJB__Tk_kOpp));
		if (Last) {
			Message* _tmPf0 = JB_Incr(JB_Tk__FixTRels(rz, Last));
			JB_Decr(Last);
			JB_Decr(rz);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(Last);
	}
	JB_SafeDecr(rz);
	return rz;
}

JB_String* JB_Tk__CharName(int start, byte find) {
	Ind After = JB_Str_JBFind(JB__Tk_Data, find, start + 1, JB_int__Max());
	if (JB_Ind_SyntaxCast(After)) {
		(JB_Tk__NextStartSet(After + 1));
		JB_String* _tmPf0 = JB_Incr(JB_Tk__SyntaxAccess(start + 1, After, JB_SyxChar));
		JB_String* _tmPf1 = JB_Incr(JB_Str_Unescape(_tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return nil;
}

Message* JB_Tk__CloseXML(Message* XML, int i, JB_String* s) {
	Ind CloseEnd = JB_Str_FindByte(s, '>', i + 2, JB_int__Max());
	if ((!JB_Ind_SyntaxCast(CloseEnd))) {
		return JB_Tk__ErrorAdd(JB_LUB[767], i);
	}
	JB_String* CloseName = JB_Incr(JB_Str_Range(s, i + 2, CloseEnd));
	if ((!JB_Str_Equals(CloseName, XML->Name, false))) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1110]);
		JB_FS_AppendString(_fsf0, CloseName);
		JB_FS_AppendString(_fsf0, JB_LUB[593]);
		JB_FS_AppendString(_fsf0, XML->Name);
		JB_FS_AppendByte(_fsf0, '>');
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		Message* _tmPf2 = JB_Incr(JB_Tk__ErrorAdd(_tmPf1, i));
		JB_Decr(_tmPf1);
		JB_Decr(CloseName);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_Decr(CloseName);
	(JB_Tk__NextStartSet((++CloseEnd)));
	XML->RangeLength = (XML->Position - CloseEnd);
	return XML;
}

Message* JB_Tk__DecorateThing(Message* R, int Ops) {
	JB_Incr(R);
	JB_SetRef(R, JB_Tk__GetFuncAfter(R));
	if (JB_Tk__WillEnd()) {
		JB_SafeDecr(R);
		return R;
	}
	int NotTemp = Ops & (~kJB__Tk_kOppTemporal);
	if (((bool)NotTemp) and (!JB_Msg_EqualsSyx(R, JB_SyxArg, false))) {
		JB_SetRef(R, JB_Tk__MakeRel(R, NotTemp));
	}
	if (((bool)(Ops & kJB__Tk_kOppTemporal))) {
		Message* opp = JB_Incr(JB_Tk__Process(kJB__Tk_kOppTemporal, false, nil));
		if (opp) {
			if (JB_Msg_SyntaxEquals(opp, JB_LUB[586], false)) {
				Message* A = JB_Incr(JB_Tk__PostInnerAdj(R, opp));
				if ((!A)) {
					JB_Decr(A);
					JB_Decr(opp);
					JB_SafeDecr(R);
					return R;
				}
				JB_Decr(R);
				Message* _tmPf1 = JB_Incr(JB_Tk__DecorateThing(A, Ops));
				JB_Decr(A);
				JB_Decr(opp);
				JB_SafeDecr(_tmPf1);
				return _tmPf1;
			}
			Message* _tmPf0 = JB_Incr(JB_Tk__ChainTemporalRels(R, opp));
			JB_Decr(R);
			JB_Decr(opp);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(opp);
	}
	JB_SafeDecr(R);
	return R;
}

Message* JB_Tk__DotSub(Syntax fn, int Start, Message* parent) {
	Message* rz = nil;
	int after = JB_Tk__Byte((++Start));
	if (JB_CS_HasChar(JB__Constants_CSWordStart, after)) {
		after = JB_Tk__WordAfter(Start);
		if ((!after)) {
			return nil;
		}
	}
	 else if (JB__Tk_DotInsertAllow) {
		after = Start;
		JB__Tk_DotInsertAllow = false;
	}
	 else {
		return JB_Tk__ErrorAdd(JB_LUB[1017], Start);
	}
	rz = JB_Tk__NewSkip(nil, fn, Start - 1, Start, after);
	if (JB_Tk__EatString(JB_LUB[263])) {
		JB_Tk__Params(rz, after);
	}
	 else {
		Message* prms = JB_Tk__NewEmpty(rz, JB_SyxEmb, after, after);
		if (((JB_Msg_EqualsSyx(parent, JB_SyxArg, false))) and JB_Tk__CanStatement()) {
			Message* p = JB_Tk__ProcessThingParent(prms, kJB__Tk_kOpp, kJB__Tk_kThing);
			if (p) {
				JB_Tree_SyntaxAppend(prms, p);
				prms->Func = JB_SyxPrm;
			}
		}
	}
	return rz;
}

int JB_Tk__EmbeddedCode(JB_String* close, Message* dest, int TmpoFlags) {
	Ind result = JB_Str_InStr(JB__Tk_Data, close, JB_Tk__NextStart(), JB_int__Max(), false);
	if ((!JB_Ind_SyntaxCast(result))) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1016]);
		JB_FS_AppendString(_fsf0, close);
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf2, JB_Tk__NextStart()));
		JB_Decr(_tmPf2);
		return result;
	}
	JB_Tk__ParseLoop(dest, TmpoFlags);
	if (JB_Tk__NextStart() > result) {
		FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf1, JB_LUB[1056]);
		JB_FS_AppendString(_fsf1, close);
		JB_FS_AppendString(_fsf1, JB_LUB[256]);
		JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf3, result));
		JB_Decr(_tmPf3);
		return result;
	}
	result = (result + JB_Str_Length(close));
	(JB_Tk__NextStartSet(result));
	return result;
}

Message* JB_Tk__ErrorAdd(JB_String* s, Ind Start) {
	if (JB_Tk__OK()) {
		return JB_Tk__ErrorAlwaysAdd(s, Start);
	}
	return nil;
}

Message* JB_Tk__ErrorAlwaysAdd(JB_String* s, Ind Start) {
	(JB_Tk__ErrorStartSet(Start));
	Message* _tmPf0 = JB_Incr(JB_Msg_ConstructorEmpty(nil));
	JB_Error* err = JB_Incr(JB_Err_Constructor(nil, _tmPf0, JB_LUB[0], kJB__ErrorSeverity_Error, JB_LUB[0]));
	JB_Decr(_tmPf0);
	err->Position = Start;
	(JB_Err_SyntaxIsSet(err, kJB__ErrorFlags_DontStrip, true));
	(JB_Err_SyntaxIsSet(err, kJB__ErrorFlags_Parse, true));
	JB_SetRef(err->Name, s);
	JB_SetRef(err->OriginalData, JB__Tk_Data);
	JB_Rec_AppendErr(JB_StdErr, err);
	JB_Decr(err);
	return nil;
}

void JB_Tk__ErrorEvent(int Start, int ExpectedBits, int RealBits) {
	//visible;
	FastString* Err = JB_Incr(JB_FS_Constructor(nil));
	if ((!((bool)(RealBits & kJB__Tk_kIllegalChar)))) {
		if ((!(((bool)ExpectedBits) and (((bool)RealBits) and ((bool)JB_Tk__FindError(ExpectedBits)))))) {
			JB_FS_AppendString(Err, JB_LUB[1341]);
		}
		 else {
			{
				int _Valuef1 = 0;
				while (_Valuef1 < 5) {
					ExpectedBits = JB_Tk__MessageErrorSub(Err, ExpectedBits, RealBits);
					_Valuef1++;
					if ((!ExpectedBits)) {
						break;
					}
				};
			}
			;
			JB_FS_AppendString(Err, JB_LUB[168]);
		}
	}
	if (RealBits == kJB__Tk_kEndOfLine) {
		JB_FS_AppendString(Err, JB_LUB[1628]);
	}
	 else if ((!RealBits)) {
		JB_FS_AppendString(Err, JB_LUB[1627]);
	}
	 else {
		if (JB_Tk__NextStart() <= Start) {
			(JB_Tk__NextStartSet(Start + 1));
		}
		if (((bool)(RealBits & kJB__Tk_kIllegalChar))) {
			JB_FS_AppendString(Err, JB_LUB[886]);
			byte illegal = JB_Tk__Byte(Start);
			if (JB_byte_CanPrintAsNormalChar(illegal)) {
				JB_FS_AppendByte(Err, '\'');
				JB_FS_AppendByte(Err, JB_Tk__Byte(Start));
				JB_FS_AppendByte(Err, '\'');
			}
			 else {
				JB_FS_AppendString(Err, JB_LUB[448]);
				JB_FS_AppendHex(Err, illegal, 2);
				JB_FS_AppendByte(Err, ' ');
			}
		}
		 else {
			JB_FS_AppendByte(Err, '\'');
			Ind N = JB_int_OperatorMin(JB_Tk__NextStart(), (Start + 100));
			JB_String* _tmPf3 = JB_Incr(JB_Tk__SyntaxAccess(Start, N, JB_SyxNil));
			JB_String* _tmPf2 = JB_Incr(JB_Str_Escape(_tmPf3));
			JB_Decr(_tmPf3);
			JB_FS_AppendString(Err, _tmPf2);
			JB_Decr(_tmPf2);
			JB_FS_AppendByte(Err, '\'');
		}
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SyntaxCast(Err));
	JB_Decr(Err);
	JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf4, Start));
	JB_Decr(_tmPf4);
}

void JB_Tk__ErrorLetter(int Start) {
	JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[849], Start));
}

bool JB_Tk__ExpectEndChar(int start, JB_String* s, bool Expect) {
	JB_Tk__CleanSpaces();
	if (JB_Tk__EatString(s)) {
		return true;
	}
	if (Expect) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1013]);
		JB_FS_AppendString(_fsf0, s);
		JB_FS_AppendByte(_fsf0, '\'');
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_FreeIfDead(JB_Tk__ErrorAdd(_tmPf1, start));
		JB_Decr(_tmPf1);
	}
	return false;
}

Message* JB_Tk__fAccess(int Start, Message* Parent) {
	Message* rz = nil;
	Ind pos = ((Ind)JB_Ternary(((bool)Parent), Parent->Position, ((Ind)Start)));
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxAcc, pos, JB_LUB[0]));
	Message* prms = JB_Incr(JB_Tk__NewParentName(rz, JB_SyxArr, Start, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(prms, JB_LUB[1420], 0);
	(JB_Msg_AfterSet(rz, JB_Msg_After(prms)));
	JB_Decr(prms);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fAdjectiveOp(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxAdj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__Process(kJB__Tk_kOppChain, kJB__Tk_kExpect, nil));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fAdjectiveThing(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxAdj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(0, kJB__Tk_kExpect));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fAfterRel(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, JB_SyxARel, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fArgColon(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxArg, Start, JB_LUB[0]));
	rz->RangeLength = 1;
	while (true) {
		Message* Item = JB_Incr(JB_Tk__Process(kJB__Tk_kTemporal, false, rz));
		if ((!Item)) {
			JB_SetRef(Item, JB_Tk__ProcessThing(kJB__Tk_kOpp, false));
		}
		JB_Tree_SyntaxAppend(rz, Item);
		if ((!(((bool)Item) and JB_Tk__Allow(kJB__Tk_kComma)))) {
			JB_Decr(Item);
			break;
		}
		JB_Decr(Item);
	};
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fArgName(int Start, Message* Parent) {
	if (Parent) {
		Syntax f = Parent->Func;
		if ((f == JB_SyxArg) or ((f == JB_SyxList) or ((f == JB_SyxBra) or (f == JB_SyxArr)))) {
			JB_String* name = JB_Incr(JB_Tk__CharName(Start + 1, '"'));
			if (name != nil) {
				JB_SetRef(Parent->Name, name);
				JB_Decr(name);
				return Parent;
			}
			JB_Decr(name);
		}
	}
	return nil;
}

Message* JB_Tk__fArgOpen(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxArg, Start, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(rz, JB_LUB[2080], kJB__Tk_kTemporal);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fArray(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxArr, Start, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(rz, JB_LUB[1420], kJB__Tk_kTemporalSyxNoBar);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fAsk(int Start, Message* Parent) {
	return JB_Tk__fAskSub(Start, Parent, JB_SyxAsk);
}

Message* JB_Tk__fAskSub(int Start, Message* Parent, Syntax f) {
	Message* rz = nil;
	Message* opp = JB_Incr(JB_Tk__Process(kJB__Tk_kOpp, kJB__Tk_kExpect, nil));
	Message* first = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOppSyx, kJB__Tk_kExpect));
	if ((!(((bool)first) and ((bool)opp)))) {
		JB_Decr(first);
		JB_Decr(opp);
		JB_Decr(rz);
		return nil;
	}
	JB_SetRef(rz, JB_Tk__NewParentName(nil, f, Start, JB_LUB[0]));
	JB_Tree_SyntaxAppend(rz, first);
	JB_Decr(first);
	Message* NeedsAdj = JB_Incr(JB_Tk__Process(kJB__Tk_kOpp, kJB__Tk_kAllow, nil));
	if ((!NeedsAdj)) {
		JB_Tree_SyntaxAppend(rz, opp);
	}
	 else {
		Message* adj = JB_Incr(JB_Tk__NewParentName(rz, JB_SyxAdj, NeedsAdj->Position, JB_LUB[0]));
		JB_Tree_SyntaxAppend(adj, opp);
		JB_Tree_SyntaxAppend(adj, NeedsAdj);
		JB_Decr(adj);
		Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThingParent(rz, kJB__Tk_kOppSyx, kJB__Tk_kThing));
		JB_Tree_SyntaxAppend(rz, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(opp);
	JB_Decr(NeedsAdj);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fAtName(int Start, Message* Parent) {
	return JB_Tk__NewWord(nil, JB_SyxName, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fAtNamedExp(int Start, Message* Parent) {
	if ((!(((bool)Parent) and JB_Tk__NeedName(Parent)))) {
		return nil;
	}
	Parent->Func = JB_SyxName;
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(0, kJB__Tk_kExpect));
	JB_Tree_SyntaxAppend(Parent, _tmPf0);
	JB_Decr(_tmPf0);
	return Parent;
}

Message* JB_Tk__fBackTick(int Start, Message* Parent) {
	Ind After = JB_Str_FindByte(JB__Tk_Data, '`', JB_Tk__NextStart(), JB_int__Max());
	if ((!JB_Ind_SyntaxCast(After))) {
		return JB_Tk__ErrorAdd(JB_LUB[1238], Start);
	}
	(JB_Tk__NextStartSet(After + 1));
	return JB_Tk__NewSkip(nil, JB_SyxBack, Start, Start + 1, After);
}

Message* JB_Tk__fBAdjectiveOp(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxBadj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__Process(kJB__Tk_kOppChain, kJB__Tk_kExpect, nil));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Tree_SyntaxAppend(rz, Parent);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fBAdjectiveThing(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxBadj, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(0, kJB__Tk_kExpect));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_Tree_SyntaxAppend(rz, Parent);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fBeforeRel(int Start, Message* Parent) {
	return JB_Tk__BeforeRelSub(Start, kJB__Tk_kAllow);
}

Message* JB_Tk__fBeforeRelMinus(int Start, Message* Parent) {
	byte c = JB_Tk__Byte(Start + 1);
	if (JB_byte_IsInt(c) and (JB_Tk__Byte(Start) == '-')) {
		return JB_Tk__NumberSub(Start + 1, Start);
	}
	return JB_Tk__BeforeRelSub(Start, kJB__Tk_kAllow);
}

Message* JB_Tk__fBinary(int Start, Message* Parent) {
	Ind End = JB_Str_InStr(JB__Tk_Data, JB_LUB[285], Start + 2, JB_int__Max(), false);
	if (JB_Ind_SyntaxCast(End)) {
		JB_String* S = JB_Incr(JB_Tk__SyntaxAccess(Start + 2, End, JB_SyxBin));
		(JB_Tk__NextStartSet(End + 2));
		JB_String* _tmPf0 = JB_Incr(JB_Str_UnHex(S, nil));
		JB_Decr(S);
		Message* _tmPf1 = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxBin, Start, _tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return JB_Tk__ErrorAdd(JB_LUB[667], Start);
}

Message* JB_Tk__fBracket(int Start, Message* Parent) {
	Message* rz = nil;
	rz = JB_Tk__NewParentName(nil, JB_SyxList, Start, JB_LUB[0]);
	bool Lines = JB_Tk__ParseLoopFlags(rz, JB_LUB[279], kJB__Tk_kTemporalSyxNoBar);
	if ((!Lines) and JB_Ring_HasChildCount(rz, 1)) {
		JB_Msg_BecomeStr(rz, JB_SyxBra, JB_LUB[0]);
	}
	return rz;
}

Message* JB_Tk__fChar(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__fCharSub(Start, Start, '\''));
	if ((!rz)) {
		JB_Decr(rz);
		return JB_Tk__ErrorAdd(JB_LUB[759], JB_Tk__NextStart());
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fCharSub(int pos, int start, byte find) {
	Message* rz = nil;
	JB_String* name = JB_Incr(JB_Tk__CharName(start, find));
	if (name != nil) {
		JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxChar, pos, name));
	}
	JB_Decr(name);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fComment(int Start, Message* Parent) {
	int Count = 1;
	Ind i = JB_Tk__NextStart();
	JB_String* d = JB_Incr(JB__Tk_Data);
	while (true) {
		i = JB_Str_FindByte(d, '/', i + 1, JB_int__Max());
		if ((!JB_Ind_SyntaxCast(i))) {
			JB_Decr(d);
			return JB_Tk__ErrorAdd(JB_LUB[772], Start);
		}
		 else if (JB_Str_ByteValue(d, i - 1) == '*') {
			Count--;
		}
		 else if (JB_Str_ByteValue(d, i + 1) == '*') {
			Count++;
			i = (i + 2);
		}
		if ((!Count)) {
			break;
		}
	};
	JB_Decr(d);
	(JB_Tk__NextStartSet(i + 1));
	return JB__Tk_EndOfLineMarker;
}

Message* JB_Tk__fCommentLine(int Start, Message* Parent) {
	JB_Tk__GotoEndOfLine(JB_Tk__NextStart());
	return JB__Tk_EndOfLineMarker;
}

Message* JB_Tk__fDecl(int Start, Message* Parent) {
	Message* Result = JB_Incr(JB_Tk__BarThings(Start, JB_SyxDecl));
	if (((bool)Result) and (!JB_Tk__WillEnd())) {
		Message* Curr = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOppSyx | kJB__Tk_kOppTemporal, false));
		if (Curr) {
			JB_Tree_SyntaxAppend(Result, Curr);
		}
		JB_Decr(Curr);
	}
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fDot(int Start, Message* Parent) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(Parent)));
	Message* _tmPf1 = JB_Incr(JB_Tk__DotSub(JB_SyxDot, Start, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Tk__fDotAccess(int Start, Message* Parent) {
	Message* rz = nil;
	int n = JB_Tk__NextStart();
	Message* name = JB_Tk__NewWord(nil, JB_SyxStr, n, n);
	int after = JB_Tk__NextStart();
	JB_SetRef(name->Name, JB_Str_ReplaceAll(name->Name, JB_LUB[2108], JB_LUB[100], false, nil));
	rz = JB_Tk__NewEmpty(nil, JB_SyxAcc, Start, after);
	Message* prms = JB_Tk__NewEmpty(rz, JB_SyxArr, Start, Start);
	JB_Tree_SyntaxAppend(prms, name);
	return rz;
}

Message* JB_Tk__fEndOfLine(int Start, Message* Parent) {
	return JB__Tk_EndOfLineMarker;
}

Message* JB_Tk__fError(int Start, Message* Parent) {
	return nil;
}

Message* JB_Tk__fError2(int Start, Message* Parent) {
	return JB_Tk__ErrorAdd(JB_LUB[1343], Start);
}

Message* JB_Tk__fFuncCall(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxFunc, Parent->Position, JB_LUB[0]));
	JB_Tk__Params(rz, Start);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__FillXML(Message* XML, Ind i) {
	JB_String* s = JB_Incr(JB__Tk_Data);
	if (JB_Str_ByteValue(s, i - 1) == '/') {
		(JB_Tk__NextStartSet(i + 1));
		JB_Decr(s);
		return XML;
	}
	(JB_Tk__NextStartSet(i));
	while (true) {
		int Prev = JB_Tk__NextStart();
		i = JB_Str_FindByte(s, '<', Prev, JB_int__Max());
		if ((!JB_Ind_SyntaxCast(i))) {
			JB_Decr(s);
			return JB_Tk__ErrorAdd(JB_LUB[833], XML->Position);
		}
		JB_Tk__AddXMLText(XML, s, Prev, i);
		(JB_Tk__NextStartSet(i));
		byte next = JB_Str_ByteValue(s, i + 1);
		if (next == '/') {
			Message* _tmPf3 = JB_Incr(JB_Tk__CloseXML(XML, i, s));
			JB_Decr(s);
			JB_SafeDecr(_tmPf3);
			return _tmPf3;
		}
		if (next != '!') {
			Message* _tmPf0 = JB_Incr(JB_Tk__fXML(i, nil));
			if ((!_tmPf0)) {
				JB_Decr(_tmPf0);
				JB_Decr(s);
				return nil;
			}
			JB_Tree_SyntaxAppend(XML, _tmPf0);
			JB_Decr(_tmPf0);
		}
		 else if (JB_Str_MidEquals(s, i, JB_LUB[574], false)) {
			Message* _tmPf1 = JB_Incr(JB_Tk__XMLWhatever(i, 4, JB_LUB[310], JB_SyxXCom));
			if ((!_tmPf1)) {
				JB_Decr(_tmPf1);
				JB_Decr(s);
				return nil;
			}
			JB_Tree_SyntaxAppend(XML, _tmPf1);
			JB_Decr(_tmPf1);
		}
		 else if (JB_Str_MidEquals(s, i, JB_LUB[576], false)) {
			Message* _tmPf2 = JB_Incr(JB_Tk__XMLWhatever(i, 9, JB_LUB[1423], JB_SyxXCDT));
			if ((!_tmPf2)) {
				JB_Decr(_tmPf2);
				JB_Decr(s);
				return nil;
			}
			JB_Tree_SyntaxAppend(XML, _tmPf2);
			JB_Decr(_tmPf2);
		}
		 else {
			JB_Decr(s);
			return JB_Tk__ErrorAdd(JB_LUB[0], i);
		}
	};
	JB_Decr(s);
}

int JB_Tk__FindError(int num) {
	if (num == kJB__Tk_kThing) {
		return kJB__Tk_kThing;
	}
	{
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(JB__Tk_ErrorNames));
		while (true) {
			JB_String* _Valuef2 = JB_Incr(((JB_String*)JB_DictionaryReader_NextValue(_navf0)));
			if (_Valuef2 == nil) {
				JB_Decr(_Valuef2);
				break;
			}
			JB_Decr(_Valuef2);
			JB_String* Key = JB_Incr(JB_Nav_Name(_navf0));
			int i = ((int)JB_Str_TextIntegerValid(Key, nil));
			JB_Decr(Key);
			if ((num & i) == i) {
				JB_Decr(_navf0);
				return i;
			}
		};
		JB_Decr(_navf0);
	}
	;
	return 0;
}

Message* JB_Tk__fInnerNiceAdj(int Start, Message* Parent) {
	return JB_Tk__fAskSub(Start, Parent, JB_Syxbinn);
}

Message* JB_Tk__FixTRels(Message* self, Message* Last) {
	if ((!Last)) {
		0;
	}
	 else if ((!JB_Msg_EqualsSyx(Last, JB_SyxTRel, false))) {
		JB_Tree_SyntaxAppend(self, Last);
	}
	 else {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Last)));
		JB_Tree_SyntaxAppend(self, _tmPf0);
		JB_Decr(_tmPf0);
		(JB_Ring_FirstSet(Last, self));
		return Last;
	}
	return self;
}

Message* JB_Tk__fMsgList(int Start, Message* Parent) {
	Message* Result = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxMsg, Start, JB_LUB[0]));
	Message* name = JB_Incr(JB_Tk__Process(kJB__Tk_kTemporalWord, true, Result));
	if ((!name)) {
		JB_Decr(name);
		JB_Decr(Result);
		return nil;
	}
	Message* it = JB_Incr(((Message*)JB_Tree_Second(name)));
	JB_Decr(name);
	if (it) {
		Message* _tmPf1 = JB_Incr(JB_Tk__UnexpectedSyntax(it));
		JB_Decr(it);
		JB_Decr(Result);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	JB_Decr(it);
	int Ops = kJB__Tk_kOppSyx | (kJB__Tk_kOppTemporal | kJB__Tk_kOppYoda);
	while (JB_Tk__NextLineAndIndent(Result).Lines) {
		Message* item = JB_Incr(JB_Tk__ProcessThing(Ops, false));
		if ((!item)) {
			JB_Decr(item);
			break;
		}
		if (JB_Str_OperatorEndsWith(item->Name, JB_LUB[2100])) {
			Message* _tmPf0 = JB_Incr(JB_Tk__ErrorAdd(JB_LUB[1055], item->Position));
			JB_Decr(item);
			JB_Decr(Result);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Tree_SyntaxAppend(Result, item);
		JB_Decr(item);
	};
	JB_Tk__ExpectEndChar(Start, JB_LUB[2100], true);
	(JB_Msg_AfterSet(Result, JB_Tk__NextStart()));
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fNumber(int Start, Message* Parent) {
	return JB_Tk__NumberSub(Start, Start);
}

Message* JB_Tk__fOpAsThing(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxOat, Start, JB_LUB[0]));
	Message* _tmPf0 = JB_Incr(JB_Tk__Process(kJB__Tk_kOpp, false, nil));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOpp, false));
	JB_Tree_SyntaxAppend(rz, _tmPf1);
	JB_Decr(_tmPf1);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fOppBracket(int Start, Message* Parent) {
	Message* result = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxBra, Start, JB_LUB[0]));
	Message* opp1 = JB_Incr(JB_Tk__Process(kJB__Tk_kOppChain, false, nil));
	Message* opp2 = JB_Incr(JB_Tk__Process(kJB__Tk_kOpp, false, nil));
	if ((!opp2)) {
		JB_Tree_SyntaxAppend(result, opp1);
	}
	 else {
		Message* rel = JB_Incr(JB_Tk__NewParentName(result, JB_SyxRel, JB_Tk__NextStart() - 1, JB_LUB[0]));
		JB_Tree_SyntaxAppend(rel, opp1);
		JB_Tree_SyntaxAppend(rel, opp2);
		Message* _tmPf0 = JB_Incr(JB_Tk__Process(kJB__Tk_kOppChain, false, nil));
		JB_Tree_SyntaxAppend(rel, _tmPf0);
		JB_Decr(rel);
		JB_Decr(_tmPf0);
	}
	JB_Decr(opp1);
	JB_Decr(opp2);
	JB_Tk__ExpectEndChar(Start, JB_LUB[279], true);
	Message* _tmPf1 = JB_Incr(JB_Tk__OppChain(result));
	JB_Decr(result);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Tk__fOppSyx(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, JB_SyxOpp, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fOppSyxNeq(int Start, Message* Parent) {
	Message* result = JB_Incr(JB_Tk__fOppSyx(Start, nil));
	if ('=' == JB_Tk__NextByte()) {
		JB_Decr(result);
		return JB_Tk__ErrorAdd(JB_LUB[742], JB_Tk__NextStart());
	}
	JB_SafeDecr(result);
	return result;
}

Message* JB_Tk__fOppWord(int Start, Message* Parent) {
	int After = JB_Tk__WordAfter(Start);
	if (JB_Tk__Byte(After) != '.') {
		Message* opp = JB_Incr(JB_Tk__NewParent(nil, JB_SyxOpp, Start, After));
		Message* _tmPf0 = JB_Incr(JB_Tk__OppChain(opp));
		JB_Decr(opp);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	return nil;
}

Message* JB_Tk__fQuestion(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewWord(nil, JB_SyxQues, Start, JB_Tk__NextStart()));
	Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOpp, false));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fQuoteLang(int Start, Message* Parent) {
	Message* rz = nil;
	rz = JB_Tk__NewParentName(nil, JB_SyxQuot, Start, JB_LUB[0]);
	JB_Tk__ParseLoopFlags(rz, JB_LUB[2110], kJB__Tk_kTemporalSyxNoBar);
	return rz;
}

Message* JB_Tk__fSDot(int Start, Message* Parent) {
	if (Start > 0) {
		byte c = JB_Tk__Byte(Start - 1);
		if (JB_CS_HasChar(JB__Constants_CSWordMiddle, c)) {
			return nil;
		}
	}
	return JB_Tk__DotSub(JB_SyxSDot, Start, Parent);
}

Message* JB_Tk__fShebang(int Start, Message* Parent) {
	Ind S = JB_Tk__NextStart();
	Ind S2 = JB_Str_Find(JB__Tk_Data, JB__Constants_CSLine, S, JB_int__Max());
	(JB_Tk__NextStartSet(S2));
	return JB_Tk__NewSkip(Parent, JB_SyxSheb, Start, S, S2);
}

Message* JB_Tk__fStatement(int Start, Message* Parent) {
	Message* tmp = JB_Incr(JB_Tk__fTmp(Start, kJB__Tk_kOpp & (~kJB__Tk_kOppBra), kJB__Tk_kThing, Parent));
	if ((!JB_Msg_EqualsSyx(tmp, JB_SyxThg, false))) {
		JB_SafeDecr(tmp);
		return tmp;
	}
	JB_Tree_Remove(tmp);
	JB_Decr(tmp);
	(JB_Tk__NextStartSet(Start));
	return JB_Tk__ProcessThing(kJB__Tk_kOpp, false);
}

Message* JB_Tk__fStatementColon(int Start, Message* Parent) {
	return JB_Tk__fTmp(Start, kJB__Tk_kOpp & (~kJB__Tk_kOppBra), kJB__Tk_kThing | kJB__Tk_kColonArg, Parent);
}

Message* JB_Tk__fString(int Start, Message* Parent) {
	Ind After = JB_Str_JBFind(JB__Tk_Data, '"', (JB_Tk__NextStart()), JB_int__Max());
	if ((!JB_Ind_SyntaxCast(After))) {
		return JB_Tk__ErrorAdd(JB_LUB[1239], JB_Tk__NextStart());
	}
	Ind StrPos = Start + 1;
	Message* result = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxStr, Start, JB_LUB[0]));
	while (JB_Ind_SyntaxCast(StrPos)) {
		Ind NewStrPos = JB_Str_JBFind(JB__Tk_Data, '$', StrPos, After);
		if ((!JB_Ind_SyntaxCast(NewStrPos))) {
			NewStrPos = After;
		}
		if (NewStrPos > StrPos) {
			Message* Str = JB_Incr(JB_Tk__NewParent(result, JB_SyxEmb, StrPos, NewStrPos));
			JB_SetRef(Str->Name, JB_Str_Unescape(Str->Name));
			JB_Decr(Str);
		}
		if (NewStrPos >= After) {
			break;
		}
		NewStrPos++;
		byte C0 = JB_Tk__Byte(NewStrPos);
		NewStrPos = (NewStrPos + (C0 == '{'));
		(JB_Tk__NextStartSet(NewStrPos));
		if (C0 == '{') {
			StrPos = JB_Tk__EmbeddedCode(JB_LUB[2080], result, kJB__Tk_kTemporalSyx);
		}
		 else {
			Syntax type = JB_SyxThg;
			if (C0 == '.') {
				type = JB_SyxSDot;
				NewStrPos++;
			}
			StrPos = JB_Str_OutCharSet(JB__Tk_Data, JB__Constants_CSWordMiddle, NewStrPos + 1, After);
			if ((!(JB_Ind_SyntaxCast(StrPos)))) {
				StrPos = After;
			}
			Message* rr = JB_Incr(JB_Tk__NewParent(result, type, NewStrPos, StrPos));
			if (C0 == '.') {
				JB_FreeIfDead(JB_Tk__NewParentName(rr, JB_SyxEmb, NewStrPos - 1, JB_LUB[0]));
			}
			JB_Decr(rr);
		}
		if (StrPos > After) {
			JB_Decr(result);
			return JB_Tk__ErrorAdd(JB_LUB[835], NewStrPos);
		}
	};
	(JB_Tk__NextStartSet((++After)));
	result->RangeLength = (After - Start);
	JB_Msg_UnEmbedStr(result);
	JB_SafeDecr(result);
	return result;
}

Message* JB_Tk__fSuperStr(int Start, Message* Parent) {
	JB_String* d = JB__Tk_Data;
	int Nest = 1;
	while (true) {
		Ind After = JB_Str_FindByte(d, '`', JB_Tk__NextStart(), JB_int__Max());
		if ((!JB_Ind_SyntaxCast(After))) {
			break;
		}
		(JB_Tk__NextStartSet(After + 3));
		if (JB_Str_MidEquals(d, After - 2, JB_LUB[577], false)) {
			Nest++;
		}
		 else if (JB_Str_MidEquals(d, After, JB_LUB[1465], false)) {
			Nest--;
			if ((!Nest)) {
				return JB_Tk__NewSkip(nil, JB_SyxSStr, Start, Start + 3, After);
			}
		}
	};
	return JB_Tk__ErrorAdd(JB_LUB[1238], Start);
}

Message* JB_Tk__fSyntacticComment(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxList, Start, JB_LUB[0]));
	bool Lines = JB_Tk__ParseLoopFlags(rz, JB_LUB[227], kJB__Tk_kTemporalSyxNoBar);
	rz->Func = JB_SyxSCom;
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fTemporalHashThing(int Start, Message* Parent) {
	Message* Result = JB_Incr(JB_Tk__NewParentName(Parent, JB_SyxTril, Start, JB_LUB[0]));
	Ind S = JB_Tk__NextStart();
	JB_FreeIfDead(JB_Tk__NewParent(Result, JB_SyxCnj, S, JB_Tk__WordAfter(S)));
	Message* x = JB_Incr(JB_Tk__ProcessThingOrTmp(kJB__Tk_kOpp & (~kJB__Tk_kOppBra)));
	if (x) {
		JB_Tree_SyntaxAppend(Result, x);
		Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOpp, false));
		JB_Tree_SyntaxAppend(Result, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(x);
	JB_SafeDecr(Result);
	return Result;
}

Message* JB_Tk__fTemporalRel(int Start, Message* Parent) {
	return JB_Tk__NewWord(nil, JB_SyxCnj, Start, JB_Tk__CleanSpaces());
}

Message* JB_Tk__fTemporalRelSyx(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, JB_SyxSCnj, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fThingSyx(int Start, Message* Parent) {
	return JB_Tk__NewParent(nil, JB_SyxSThg, Start, JB_Tk__NextStart());
}

Message* JB_Tk__fThingWord(int Start, Message* Parent) {
	int name = JB_Tk__WordAfter(Start);
	return JB_Tk__NewParent(nil, JB_SyxThg, Start, name);
}

Message* JB_Tk__fTmp(int Start, int OpFlags, int ThingFlags, Message* parent) {
	Message* Result = JB_Tk__NewWord(parent, JB_SyxTmp, Start, Start);
	return JB_Tk__fTmpSub(Result, OpFlags, ThingFlags);
}

Message* JB_Tk__fTmpPlus(int Start, Message* Parent) {
	int c = JB_Tk__NextByte();
	if ((c == '"') or (c == '\'')) {
		Message* tmp = JB_Tk__fCharSub(Start, Start + 1, c);
		if (tmp) {
			tmp->Func = JB_SyxTmp;
			tmp = JB_Tk__fTmpSub(tmp, kJB__Tk_kOpp & (~kJB__Tk_kOppBra), kJB__Tk_kThing);
			if ((!JB_Msg_EqualsSyx(tmp, JB_SyxThg, false))) {
				return tmp;
			}
		}
	}
	return JB_Tk__fError2(Start, nil);
}

Message* JB_Tk__fTmpSub(Message* result, int OpFlags, int ThingFlags) {
	JB_Incr(result);
	if (JB_Tk__WillEnd()) {
		JB_SafeDecr(result);
		return result;
	}
	if (JB_Tk__CanStatement()) {
		while (true) {
			Message* item = JB_Incr(JB_Tk__ProcessThingParent(result, OpFlags, ThingFlags));
			if ((!item)) {
				JB_Decr(item);
				break;
			}
			JB_Tree_SyntaxAppend(result, item);
			if (JB_Tk__WillEnd()) {
				JB_Decr(item);
				JB_SafeDecr(result);
				return result;
			}
			if (JB_Msg_EqualsSyx(item, JB_SyxArg, false)) {
				Message* _tmPf0 = JB_Incr(JB_Tk__UnTmpPlace(result));
				Message* SubTmp = JB_Incr(JB_Tk__Process(kJB__Tk_kTemporalWordColon, false, _tmPf0));
				JB_Decr(_tmPf0);
				if (((bool)SubTmp) or (JB_Msg_SyntaxEquals(item, JB_LUB[559], false))) {
					JB_Decr(SubTmp);
					JB_Decr(item);
					JB_SafeDecr(result);
					return result;
				}
				JB_Decr(SubTmp);
			}
			JB_Decr(item);
			ThingFlags = (ThingFlags | kJB__Tk_kColonArg);
		};
	}
	result->Func = JB_SyxThg;
	if (JB_Ring_HasChildren(result)) {
		JB_SafeDecr(result);
		return result;
	}
	JB_SetRef(result, JB_Tk__DecorateThing(result, kJB__Tk_kOpp));
	Message* _tmPf1 = JB_Incr(JB_Tk__ParseItem(result, kJB__Tk_kTemporalSyx, kJB__Tk_kOpp));
	JB_Decr(result);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Tk__fTypeCast(int Start, Message* Parent) {
	Message* _tmPf0 = JB_Incr(JB_Tk__BarThings(Start, JB_SyxType));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* JB_Tk__fURL(int Start, Message* Parent) {
	if ((!JB_Tk__NeedName(Parent))) {
		return nil;
	}
	(JB_Tk__NextStartSet(JB_Str_InWhite(JB__Tk_Data, Start, JB_int__Max())));
	Parent->Func = JB_Syxurl;
	Parent->RangeLength = (Parent->RangeLength + 3);
	Message* _tmPf0 = JB_Incr(JB_Tk__NewParent(nil, JB_SyxStr, Start + 3, JB_Tk__NextStart()));
	JB_Tree_SyntaxAppend(Parent, _tmPf0);
	JB_Decr(_tmPf0);
	return Parent;
}

Message* JB_Tk__fXML(int Start, Message* Parent) {
	Message* rz = nil;
	Ind EndPos = JB_Tk__XMLWordEnd(Start + 1);
	if (JB_Ind_SyntaxCast(EndPos)) {
		Message* XML = JB_Incr(JB_Tk__NewSkip(nil, JB_SyxXML, Start, Start + 1, EndPos));
		EndPos = JB_Tk__XMLAttribs(XML, EndPos);
		if (EndPos > 0) {
			JB_SetRef(rz, JB_Tk__FillXML(XML, EndPos + 1));
			if (rz) {
				(JB_Msg_AfterSet(rz, JB_Tk__NextStart()));
			}
		}
		JB_Decr(XML);
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fXML_Comment(int Start, Message* Parent) {
	return JB_Tk__XMLWhatever(Start, 4, JB_LUB[310], JB_SyxXCom);
}

Message* JB_Tk__fXML_DocType(int Start, Message* Parent) {
	{
		IntRange _LoopSrcf2 = JB_int_OperatorTo(JB_Tk__NextStart(), JB_Str_Length(JB__Tk_Data) - 1);
		int __Endf0 = _LoopSrcf2[1];
		int _Valuef3 = _LoopSrcf2[0];
		while (_Valuef3 < __Endf0) {
			int i = _Valuef3;
			byte c = JB_Str_ByteValue(JB__Tk_Data, i);
			if (c == '[') {
				i = JB_Str_FindByte(JB__Tk_Data, ']', i, JB_int__Max());
				if ((!i)) {
					return JB_Tk__ErrorAdd(JB_LUB[658], Start);
				}
			}
			 else if (c == '>') {
				(JB_Tk__NextStartSet(i + 1));
				JB_String* _tmPf4 = JB_Incr(JB_Str_Range(JB__Tk_Data, Start + 9, i));
				Message* _tmPf5 = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxXCom, Start, _tmPf4));
				JB_Decr(_tmPf4);
				JB_SafeDecr(_tmPf5);
				return _tmPf5;
			}
			_Valuef3++;
		};
	}
	;
	return nil;
}

Message* JB_Tk__fXML_PI(int Start, Message* Parent) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Tk__NewParentName(nil, JB_SyxXPI, Start, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(rz, JB_LUB[600], kJB__Tk_kTemporal);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Tk__fYoda(int Start, Message* Parent) {
	Message* last = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOppSyx, true));
	Message* first = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOppSyx, true));
	Message* opp = JB_Incr(JB_Tk__Process(kJB__Tk_kOpp, true, nil));
	Message* rel = JB_Incr(JB_Tk__NewParentName(Parent, JB_SyxYoda, Start, JB_LUB[0]));
	JB_Tree_SyntaxAppend(rel, first);
	JB_Decr(first);
	JB_Tree_SyntaxAppend(rel, opp);
	JB_Decr(opp);
	JB_Tree_SyntaxAppend(rel, last);
	JB_Decr(last);
	JB_SafeDecr(rel);
	return rel;
}

Message* JB_Tk__GetFuncAfter(Message* result) {
	JB_Incr(result);
	while (true) {
		int ThisAfter = kJB__Tk_kFuncAfterAny & (~JB__Tk_StopBars);
		if (JB_Tk__NoFuncAfter(JB_Tk__NextByte())) {
			ThisAfter = (ThisAfter & (~kJB__Tk_kFuncAfterNoSpace));
		}
		Message* d = JB_Incr(JB_Tk__Process(ThisAfter, false, result));
		if ((!d)) {
			JB_Decr(d);
			break;
		}
		Syntax fn = d->Func;
		if ((fn != JB_SyxName) and ((fn != JB_SyxBadj) and (fn != JB_Syxurl))) {
			(JB_Ring_PrevSibSet(result, d));
			(JB_Ring_FirstSet(d, result));
		}
		JB_SetRef(result, d);
		JB_Decr(d);
	};
	JB_SafeDecr(result);
	return result;
}

int JB_Tk__GotoEndOfLine(int from) {
	(JB_Tk__NextStartSet(JB_Str_Find(JB__Tk_Data, JB__Constants_CSLine, from, JB_int__Max())));
	return JB_Tk__NextStart();
}

Message* JB_Tk__IndentBug(Message* curr) {
	return JB_Tk__ErrorAlwaysAdd(JB_LUB[913], curr->Position);
}

void JB_Tk__Init() {
	if ((!(JB_Syx_Translateable(JB_SyxThg) and (JB_Syx_Translateable(JB_SyxOpp) and (JB_Syx_Translateable(JB_SyxCnj) and JB_Syx_Translateable(JB_SyxTmp)))))) {
		debugger;
	}
	if ((!(JB_Syx_IsString(JB_SyxStr) and (JB_Syx_IsString(JB_SyxChar) and (JB_Syx_IsString(JB_SyxSStr) and (JB_Syx_IsString(JB_SyxBin) and JB_Syx_IsString(JB_SyxBack))))))) {
		debugger;
	}
	if ((!(JB_Syx_NoChildren(JB_SyxCnj) and (JB_Syx_NoChildren(JB_SyxOpp) and (JB_Syx_NoChildren(JB_SyxThg) and (JB_Syx_NoChildren(JB_SyxSheb) and (JB_Syx_NoChildren(JB_SyxSCnj) and (JB_Syx_NoChildren(JB_SyxSThg) and (JB_Syx_NoChildren(JB_SyxNum) and ((bool)JB_SyxSStr)))))))))) {
		debugger;
	}
	if (((int)JB_SyxCnj) != 8) {
		debugger;
	}
	if (((int)JB_Syxmax) > 63) {
		debugger;
	}
	JB_Tk__TokenzFn(JB_LUB[91], kJB__Tk_kEndOfLine, JB_Tk__fEndOfLine);
	TokHan* _tmPf1 = JB_Incr(JB_Tk__Handler(kJB__Tk_kComma | kJB__Tk_kEndOfLine, ((TokenHandler_fp)JB_Tk__fEndOfLine)));
	(JB_Tk__TokenSet(JB_LUB[301], _tmPf1));
	JB_Decr(_tmPf1);
	TokHan* _tmPf3 = JB_Incr(JB_Tk__Handler(kJB__Tk_kColon, ((TokenHandler_fp)JB_Tk__fEndOfLine)));
	TokHan* _tmPf2 = JB_Incr(JB_TH_Link(_tmPf3, kJB__Tk_kColonArg, ((TokenHandler_fp)JB_Tk__fArgColon)));
	JB_Decr(_tmPf3);
	(JB_Tk__TokenSet(JB_LUB[559], _tmPf2));
	JB_Decr(_tmPf2);
	JB_SetRef(JB__Tk_EndOfLineMarker, JB_Msg_ConstructorNormal(nil, JB_SyxNil, JB_LUB[42]));
	Array* numb = JB_Incr(JB_Str_ByteSplit(JB_LUB[446]));
	JB_String* op_comp = JB_Incr(JB_LUB[589]);
	JB_String* op_math = JB_Incr(JB_LUB[296]);
	JB_String* PFix = JB_Incr(JB_LUB[300]);
	TokHan* _tmPf6 = JB_Incr(JB_Tk__Handler(kJB__Tk_kThingWord, ((TokenHandler_fp)JB_Tk__fThingWord)));
	TokHan* _tmPf5 = JB_Incr(JB_TH_Link(_tmPf6, kJB__Tk_kTemporalWord, ((TokenHandler_fp)JB_Tk__fStatement)));
	JB_Decr(_tmPf6);
	TokHan* _tmPf4 = JB_Incr(JB_TH_Link(_tmPf5, kJB__Tk_kTemporalWordColon, ((TokenHandler_fp)JB_Tk__fStatementColon)));
	JB_Decr(_tmPf5);
	TokHan* H = JB_Incr(JB_TH_Link(_tmPf4, kJB__Tk_kOppWord, ((TokenHandler_fp)JB_Tk__fOppWord)));
	JB_Decr(_tmPf4);
	Array* _tmPf7 = JB_Incr(JB_CS_Bytes(JB__Constants_CSWordStart));
	JB_Tk__TokensHan(_tmPf7, H);
	JB_Decr(H);
	JB_Decr(_tmPf7);
	TokHan* _tmPf10 = JB_Incr(JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fFuncCall)));
	TokHan* _tmPf9 = JB_Incr(JB_TH_Link(_tmPf10, kJB__Tk_kThingSyx, ((TokenHandler_fp)JB_Tk__fBracket)));
	JB_Decr(_tmPf10);
	TokHan* _tmPf8 = JB_Incr(JB_TH_Link(_tmPf9, kJB__Tk_kOppBra, ((TokenHandler_fp)JB_Tk__fOppBracket)));
	JB_Decr(_tmPf9);
	(JB_Tk__TokenSet(JB_LUB[263], _tmPf8));
	JB_Decr(_tmPf8);
	TokHan* _tmPf12 = JB_Incr(JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fAccess)));
	TokHan* _tmPf11 = JB_Incr(JB_TH_Link(_tmPf12, kJB__Tk_kThingSyx, ((TokenHandler_fp)JB_Tk__fArray)));
	JB_Decr(_tmPf12);
	(JB_Tk__TokenSet(JB_LUB[1401], _tmPf11));
	JB_Decr(_tmPf11);
	TokHan* _tmPf13 = JB_Incr(JB_Tk__Handler(kJB__Tk_kThingSyx, ((TokenHandler_fp)JB_Tk__fMsgList)));
	(JB_Tk__TokenSet(JB_LUB[2096], _tmPf13));
	JB_Decr(_tmPf13);
	TokHan* _tmPf15 = JB_Incr(JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fDot)));
	TokHan* _tmPf14 = JB_Incr(JB_TH_Link(_tmPf15, kJB__Tk_kThingSyx, ((TokenHandler_fp)JB_Tk__fSDot)));
	JB_Decr(_tmPf15);
	(JB_Tk__TokenSet(JB_LUB[354], _tmPf14));
	JB_Decr(_tmPf14);
	TokHan* _tmPf16 = JB_Incr(JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fDotAccess)));
	(JB_Tk__TokenSet(JB_LUB[357], _tmPf16));
	JB_Decr(_tmPf16);
	TokHan* _tmPf17 = JB_Incr(JB_Tk__Handler(kJB__Tk_kFuncAfterNoSpace, ((TokenHandler_fp)JB_Tk__fURL)));
	(JB_Tk__TokenSet(JB_LUB[565], _tmPf17));
	JB_Decr(_tmPf17);
	TokHan* _tmPf20 = JB_Incr(JB_Tk__Handler(kJB__Tk_kTemporalBar, ((TokenHandler_fp)JB_Tk__fDecl)));
	TokHan* _tmPf19 = JB_Incr(JB_TH_Link(_tmPf20, kJB__Tk_kFuncAfterBar, ((TokenHandler_fp)JB_Tk__fTypeCast)));
	JB_Decr(_tmPf20);
	TokHan* _tmPf18 = JB_Incr(JB_TH_Link(_tmPf19, kJB__Tk_kThingBar, ((TokenHandler_fp)JB_Tk__fDecl)));
	JB_Decr(_tmPf19);
	(JB_Tk__TokenSet(JB_LUB[2069], _tmPf18));
	JB_Decr(_tmPf18);
	TokHan* _tmPf21 = JB_Incr(JB_Tk__Handler(kJB__Tk_kThingSyx, ((TokenHandler_fp)JB_Tk__fArgName)));
	(JB_Tk__TokenSet(JB_LUB[1425], _tmPf21));
	JB_Decr(_tmPf21);
	TokHan* _tmPf22 = JB_Incr(JB_Tk__Handler(kJB__Tk_kTemporalSyx, ((TokenHandler_fp)JB_Tk__fTmpPlus)));
	(JB_Tk__TokenSet(JB_LUB[298], _tmPf22));
	JB_Decr(_tmPf22);
	TokHan* _tmPf24 = JB_Incr(JB_Tk__Handler(kJB__Tk_kThingSyx, ((TokenHandler_fp)JB_Tk__fAtName)));
	TokHan* _tmPf23 = JB_Incr(JB_TH_Link(_tmPf24, kJB__Tk_kFuncAfterNormal, ((TokenHandler_fp)JB_Tk__fAtNamedExp)));
	JB_Decr(_tmPf24);
	(JB_Tk__TokenSet(JB_LUB[602], _tmPf23));
	JB_Decr(_tmPf23);
	TokHan* _tmPf26 = JB_Incr(JB_Tk__Handler(kJB__Tk_kFuncAfterNormal, ((TokenHandler_fp)JB_Tk__fAdjectiveThing)));
	TokHan* _tmPf25 = JB_Incr(JB_TH_Link(_tmPf26, kJB__Tk_kAdjectiveOp, ((TokenHandler_fp)JB_Tk__fAdjectiveOp)));
	JB_Decr(_tmPf26);
	(JB_Tk__TokenSet(JB_LUB[2083], _tmPf25));
	JB_Decr(_tmPf25);
	JB_Tk__TokenzFn(JB_LUB[308], kJB__Tk_kThingSyx, JB_Tk__fBeforeRelMinus);
	JB_Tk__TokenzFn(PFix, kJB__Tk_kThingSyx, JB_Tk__fBeforeRel);
	JB_Tk__TokenzFn(PFix, kJB__Tk_kFuncAfterNormal, JB_Tk__fAfterRel);
	JB_Decr(PFix);
	JB_Tk__TokenzFn(JB_LUB[242], kJB__Tk_kThingSyx, JB_Tk__fBeforeRel);
	JB_Tk__TokenzFn(JB_LUB[2068], kJB__Tk_kThingSyx, JB_Tk__fArgOpen);
	JB_Tk__TokenzFn(JB_LUB[311], kJB__Tk_kTmpOpp, JB_Tk__fTemporalRelSyx);
	JB_Tk__TokenzFn(JB_LUB[389], kJB__Tk_kTmpOpp, JB_Tk__fSyntacticComment);
	JB_Tk__TokenzFn(JB_LUB[240], kJB__Tk_kThingSyx, JB_Tk__fOpAsThing);
	JB_Tk__TokensFn(numb, kJB__Tk_kThingSyx, JB_Tk__fNumber);
	JB_Decr(numb);
	JB_Tk__TokenzFn(JB_LUB[224], kJB__Tk_kTemporalSyxNoBar, JB_Tk__fShebang);
	JB_Tk__TokenzFn(JB_LUB[393], kJB__Tk_kEndOfLine, JB_Tk__fCommentLine);
	JB_Tk__TokenzFn(JB_LUB[390], kJB__Tk_kEndOfLine, JB_Tk__fComment);
	JB_Tk__TokenzFn(op_comp, kJB__Tk_kOppSNB, JB_Tk__fOppSyxNeq);
	JB_Decr(op_comp);
	JB_Tk__TokenzFn(op_math, kJB__Tk_kOppSNB, JB_Tk__fOppSyx);
	JB_Decr(op_math);
	JB_Tk__TokenzFn(JB_LUB[2069], kJB__Tk_kOppBar, JB_Tk__fOppSyx);
	JB_Tk__TokenzFn(JB_LUB[358], kJB__Tk_kThingSyx, JB_Tk__fThingSyx);
	JB_Tk__TokenzFn(JB_LUB[218], kJB__Tk_kThingSyx, JB_Tk__fString);
	JB_Tk__TokenzFn(JB_LUB[250], kJB__Tk_kThingSyx, JB_Tk__fChar);
	JB_Tk__TokenzFn(JB_LUB[1464], kJB__Tk_kThingSyx, JB_Tk__fBackTick);
	JB_Tk__TokenzFn(JB_LUB[577], kJB__Tk_kThingSyx, JB_Tk__fSuperStr);
	JB_Tk__TokenzFn(JB_LUB[226], kJB__Tk_kThingSyx, JB_Tk__fBinary);
	TokHan* _tmPf28 = JB_Incr(JB_Tk__Handler(kJB__Tk_kFuncAfterNormal, ((TokenHandler_fp)JB_Tk__fBAdjectiveThing)));
	TokHan* _tmPf27 = JB_Incr(JB_TH_Link(_tmPf28, kJB__Tk_kAdjectiveOp, ((TokenHandler_fp)JB_Tk__fBAdjectiveOp)));
	JB_Decr(_tmPf28);
	(JB_Tk__TokenSet(JB_LUB[30], _tmPf27));
	JB_Decr(_tmPf27);
	TokHan* _tmPf30 = JB_Incr(JB_Tk__Handler(kJB__Tk_kTmpOpp, ((TokenHandler_fp)JB_Tk__fTemporalRel)));
	TokHan* _tmPf29 = JB_Incr(JB_TH_Link(_tmPf30, kJB__Tk_kTemporalSyxNoBar, ((TokenHandler_fp)JB_Tk__fTemporalHashThing)));
	JB_Decr(_tmPf30);
	(JB_Tk__TokenSet(JB_LUB[223], _tmPf29));
	JB_Decr(_tmPf29);
	JB_Tk__TokenzFn(JB_LUB[597], kJB__Tk_kThingSyx, JB_Tk__fInnerNiceAdj);
	JB_Tk__TokenzFn(JB_LUB[2097], kJB__Tk_kThingSyx, JB_Tk__fYoda);
	JB_Tk__TokenzFn(JB_LUB[2109], kJB__Tk_kThingSyx, JB_Tk__fQuoteLang);
	JB_Tk__TokenzFn(JB_LUB[2108], kJB__Tk_kThingSyx, JB_Tk__fQuestion);
	JB_Tk__TokenzFn(JB_LUB[2113], kJB__Tk_kThingSyx, JB_Tk__fAsk);
	JB_Tk__TokenzFn(JB_LUB[573], kJB__Tk_kTemporalSyx, JB_Tk__fXML);
	JB_Tk__TokenzFn(JB_LUB[584], kJB__Tk_kTemporalSyx, JB_Tk__fXML_PI);
	JB_Tk__TokenzFn(JB_LUB[574], kJB__Tk_kTemporalSyx, JB_Tk__fXML_Comment);
	JB_Tk__TokenzFn(JB_LUB[575], kJB__Tk_kTemporalSyx, JB_Tk__fXML_DocType);
	JB_Tk__TokenzFn(JB_LUB[1421], kJB__Tk_kEndContainer, JB_Tk__fEndOfLine);
	JB_Tk__TokenzFn(JB_LUB[566], kJB__Tk_kThingSyx, JB_Tk__fError);
	JB_Tk__TokenzFn(JB_LUB[217], kJB__Tk_kOppSyx, JB_Tk__fError2);
	TokHan* IllegalHandler = JB_Incr(JB_Tk__Handler(-1, ((TokenHandler_fp)JB_Tk__fError)));
	{
		int i = 0;
		while (i < 256) {
			JB_String* _tmPf31 = JB_Incr(JB_Str__Byte(i));
			(JB_Tk__TokenNilSet(_tmPf31, IllegalHandler));
			JB_Decr(_tmPf31);
			i++;
		};
	}
	;
	JB_Decr(IllegalHandler);
}

int JB_Tk__Init_() {
	{
		JB_SetRef(JB__Tk_Data, JB_LUB[0]);
		JB__Tk_Splitter = (&JB_Tk__Range);
		JB__Tk_Using = ((MessagePosition){});
		JB__Tk_StopBars = 0;
		JB__Tk_DotInsertAllow = false;
	}
	;
	return 0;
}

int JB_Tk__InitCode_() {
	{
	}
	;
	JB__Tk_Using.Position = -1;
	return 0;
}

Message* JB_Tk__LoweredIndent(Message* output, Message* curr) {
	int chin = JB_Msg_CleanIndent(curr);
	while (JB_Msg_IndentScore(output) > chin) {
		if ((JB_Msg_EqualsSyx(output, JB_SyxArg, false)) and (!JB_Msg_SyntaxIs(output, kJB__MsgParseFlags_Style2))) {
			return JB_Tk__IndentBug(curr);
		}
		output = ((Message*)JB_Ring_Parent(output));
		if ((!output)) {
			return JB_Tk__IndentBug(curr);
		}
		if (JB_Msg_EqualsSyx(output, JB_SyxDecl, false)) {
			output = ((Message*)JB_Ring_Parent(output));
		}
	};
	JB_Tree_SyntaxAppend(output, curr);
	if (((bool)(JB_Msg_CleanIndent(curr) % 4))) {
		return curr;
	}
	return output;
}

Message* JB_Tk__MakeInvisArg(Message* tmp, int indent) {
	Message* rz = nil;
	if (JB_Msg_EqualsSyx(tmp, JB_SyxItem, false)) {
		Message* last = ((Message*)JB_Ring_Last(tmp));
		if ((!JB_Msg_EqualsSyx(last, JB_SyxEmb, false))) {
			return JB_Tk__UnexpectedSyntax(last);
		}
		last->Func = JB_SyxArg;
		(JB_Msg_SyntaxIsSet(last, kJB__MsgParseFlags_Style2, true));
		return last;
	}
	rz = JB_Tk__NewParentName(tmp, JB_SyxArg, tmp->Position, JB_LUB[0]);
	(JB_Msg_SyntaxIsSet(rz, kJB__MsgParseFlags_Style2, true));
	return rz;
}

Message* JB_Tk__MakeRel(Message* first, int Bits) {
	Message* opp = JB_Tk__Process(Bits, false, nil);
	if ((!opp)) {
		return first;
	}
	Message* Rel = JB_Tk__NewParentName(nil, JB_SyxRel, first->Position, JB_LUB[0]);
	JB_Tree_SyntaxAppend(Rel, first);
	JB_Tree_SyntaxAppend(Rel, opp);
	if (JB_Tk__EatString(JB_LUB[587])) {
		Rel->Func = JB_SyxERel;
		opp->RangeLength++;
	}
	bool Mode = kJB__Tk_kAllow;
	if ((!JB_byte_IsLetter((JB_Str_First(opp->Name))))) {
		Bits = (Bits | kJB__Tk_kOppWord);
	}
	JB_Tree_SyntaxAppend(Rel, JB_Tk__ProcessThing(Bits, Mode));
	(JB_Msg_AfterSet(Rel, JB_Msg_After(((Message*)JB_Ring_Last(Rel)))));
	return Rel;
}

int JB_Tk__MessageErrorSub(FastString* fs, int num, int ButFound) {
	Dictionary* e = JB_Incr(JB__Tk_ErrorNames);
	if ((!e)) {
		JB_SetRef(e, JB_Dict_Constructor(nil));
		JB_SetRef(JB__Tk_ErrorNames, e);
		(JB_Dict_SetInt(e, kJB__Tk_kTemporal, JB_LUB[1990]));
		(JB_Dict_SetInt(e, kJB__Tk_kTemporalSyx, JB_LUB[1595]));
		(JB_Dict_SetInt(e, kJB__Tk_kTemporalWord, JB_LUB[1961]));
		(JB_Dict_SetInt(e, kJB__Tk_kEndOfLine, JB_LUB[1628]));
		(JB_Dict_SetInt(e, kJB__Tk_kColon, JB_LUB[259]));
		(JB_Dict_SetInt(e, kJB__Tk_kOppSyx, JB_LUB[1846]));
		(JB_Dict_SetInt(e, kJB__Tk_kOppWord, JB_LUB[1846]));
		(JB_Dict_SetInt(e, kJB__Tk_kOpp, JB_LUB[1846]));
		(JB_Dict_SetInt(e, kJB__Tk_kOppTemporal, JB_LUB[1991]));
		(JB_Dict_SetInt(e, kJB__Tk_kThing, JB_LUB[1468]));
		(JB_Dict_SetInt(e, kJB__Tk_kThingWord, JB_LUB[1468]));
		(JB_Dict_SetInt(e, kJB__Tk_kThingSyx, JB_LUB[1951]));
		(JB_Dict_SetInt(e, kJB__Tk_kIllegalChar, JB_LUB[1704]));
	}
	if (fs->Length) {
		JB_FS_AppendString(fs, JB_LUB[148]);
	}
	 else {
		JB_FS_AppendString(fs, JB_LUB[846]);
	}
	int BestValue = JB_Tk__FindError(num);
	if (BestValue) {
		JB_String* s = JB_Incr(((JB_String*)JB_Dict_ValueInt(e, BestValue)));
		if (JB_Str_Exists(s)) {
			JB_FS_AppendString(fs, s);
		}
		 else {
			JB_FS_AppendString(fs, JB_LUB[1951]);
		}
		JB_Decr(s);
		JB_Decr(e);
		return num & (~BestValue);
	}
	JB_Decr(e);
	JB_FS_AppendString(fs, JB_LUB[1952]);
	return 0;
}

bool JB_Tk__NeedName(Message* thg) {
	if (JB_Msg_EqualsSyx(thg, JB_SyxThg, false)) {
		return true;
	}
	return ((bool)JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[1041], thg->Position)));
}

Message* JB_Tk__NewParentName(Message* Parent, Syntax Func, int Start, JB_String* name) {
	Message* rz = nil;
	rz = JB_Msg_ConstructorRange(nil, Parent, Func, Start, name, JB_Tk__NextStart() - Start);
	return rz;
}

Message* JB_Tk__NewParent(Message* Parent, Syntax Func, int Start, int End) {
	Message* rz = nil;
	JB_String* name = JB_Tk__SyntaxAccess(Start, End, Func);
	rz = JB_Msg_ConstructorRange(nil, Parent, Func, Start, name, End - Start);
	return rz;
}

Message* JB_Tk__NewEmpty(Message* P, Syntax F, int Start, int After) {
	Message* rz = nil;
	rz = JB_Msg_ConstructorRange(nil, P, F, Start, JB_LUB[0], After - Start);
	return rz;
}

Message* JB_Tk__NewSkip(Message* P, Syntax F, int Start, int NameStart, int NameEnd) {
	Message* rz = nil;
	JB_String* name = JB_Tk__SyntaxAccess(NameStart, NameEnd, F);
	rz = JB_Msg_ConstructorRange(nil, P, F, Start, name, JB_Tk__NextStart() - Start);
	return rz;
}

Message* JB_Tk__NewWord(Message* P, Syntax F, int Start, int SearchFrom) {
	Message* rz = nil;
	int after = JB_Tk__WordAfter(SearchFrom);
	JB_String* name = JB_Tk__SyntaxAccess(SearchFrom, after, F);
	rz = JB_Msg_ConstructorRange(nil, P, F, Start, name, after - Start);
	return rz;
}

ParserLineAndIndent JB_Tk__NextLineAndIndent(Message* parent) {
	ParserLineAndIndent rz = ((ParserLineAndIndent){});
	int first = JB_Tk__NextStart();
	int n = first;
	JB_String* D = JB__Tk_Data;
	int end = JB_Str_Length(D);
	byte* addr = D->Addr;
	int State = 0;
	while (n < end) {
		byte c = addr[n++];
		if (c == '\t') {
			if ((!rz.Commas)) {
				rz.Indent = (rz.Indent + 4);
			}
			if ((((bool)(State & 1))) and ((bool)rz.Lines)) {
				JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[711], n - 1));
			}
		}
		 else if (c == ',') {
			rz.Commas++;
			Message* l = ((Message*)JB_Ring_Last(parent));
			if (l) {
				rz.Indent = l->Indent;
			}
			 else {
				rz.Indent = 0;
			}
			State = 0;
		}
		 else if (c == ' ') {
			State = (State | 1);
			if ((!rz.Commas)) {
				rz.Indent++;
			}
		}
		 else if (c == '/') {
			byte c2 = JB_Str_ByteValue(D, n);
			if ((c2 != '/') and (c2 != '*')) {
				if (((bool)(State & 2))) {
					rz.IsDebug = true;
				}
				n--;
				break;
			}
			State = 2;
			if (c2 != '*') {
				n = JB_Tk__GotoEndOfLine(n + 1);
				continue;
			}
			rz.Lines++;
			rz.Indent = 0;
			(JB_Tk__NextStartSet(n - 1));
			Message* line = JB_Tk__Process(kJB__Tk_kEndOfLine, kJB__Tk_kAllow, parent);
			n = JB_Tk__NextStart();
			if (line != JB__Tk_EndOfLineMarker) {
				break;
			}
		}
		 else {
			if ((!((c == '\n') or (c == '\x0D')))) {
				n--;
				break;
			}
			rz.Lines++;
			rz.IsDebug = false;
			rz.Indent = 0;
			rz.Commas = 0;
			rz.Pos = (n - 1);
			State = 2;
			if (parent->Func == JB_SyxList) {
				(JB_Msg_SyntaxIsSet(parent, kJB__MsgParseFlags_Style2, true));
			}
		}
	};
	rz.Lines = (rz.Lines + rz.Commas);
	(JB_Tk__NextStartSet(n));
	if (((first > 0) and (!rz.Lines)) or (rz.Indent < 0)) {
		rz.Indent = -1;
	}
	return rz;
}

bool JB_Tk__NoFuncAfter(byte b) {
	return (b == '\t') or ((b == ' ') or (b == '\\'));
}

Message* JB_Tk__NumberSub(int Start, int RealStart) {
	Message* rz = nil;
	int After = JB_Tk__NumEnd(JB__Tk_Data, Start);
	(JB_Tk__NextStartSet(After));
	int StartAt = JB_Str_IsHexLike(JB__Tk_Data, Start);
	Ind UnitPos2 = -1;
	if (StartAt == 0) {
		UnitPos2 = JB_Str_OutCharSet(JB__Tk_Data, JB__Constants_CSLettersOnly, After, Start + StartAt);
	}
	if ((!JB_Ind_SyntaxCast(UnitPos2))) {
		UnitPos2 = (After - 1);
	}
	UnitPos2++;
	Message* Num = JB_Tk__NewParent(nil, JB_SyxNum, RealStart, UnitPos2);
	if (After <= UnitPos2) {
		return Num;
	}
	rz = JB_Tk__NewSkip(nil, JB_SyxUnit, RealStart, UnitPos2, After);
	JB_Tree_SyntaxAppend(rz, Num);
	return rz;
}

int JB_Tk__NumEnd(JB_String* NumStr, int Start) {
	int rz = 0;
	Ind Dot = JB_Str_OutCharSet(NumStr, JB__Constants_CSNum, Start, JB_int__Max());
	if ((!JB_Ind_SyntaxCast(Dot))) {
		return JB_Str_Length(NumStr);
	}
	if (JB_Str_ByteValue(NumStr, Dot) != '.') {
		return Dot;
	}
	byte AfterDot = JB_Str_ByteValue(NumStr, Dot + 1);
	if ((!JB_byte_IsInt(AfterDot))) {
		return Dot;
	}
	rz = JB_Str_OutCharSet(NumStr, JB__Constants_CSNum, Dot + 1, JB_int__Max());
	if ((!(rz))) {
		rz = JB_Str_Length(NumStr);
	}
	return rz;
}

bool JB_Tk__OK() {
	return (!JB_Ind_SyntaxCast(JB_Tk__ErrorStart()));
}

Message* JB_Tk__OppChain(Message* opp) {
	Message* result = JB_Incr(JB_Tk__Process(kJB__Tk_kAdjectiveOp, false, opp));
	if (result) {
		if ((!JB_FreeIfDead(((Message*)JB_Ring_Parent(opp))))) {
			(JB_Ring_FirstSet(result, opp));
		}
		JB_SafeDecr(result);
		return result;
	}
	JB_Decr(result);
	return opp;
}

void JB_Tk__Params(Message* Parent, int N) {
	Message* Result = JB_Incr(JB_Tk__NewParentName(Parent, JB_SyxPrm, N, JB_LUB[0]));
	JB_Tk__ParseLoopFlags(Result, JB_LUB[279], kJB__Tk_kTemporalSyxNoBar);
	JB_Decr(Result);
}

Message* JB_Tk__ParseItem(Message* ch, int TemporalFlags, int ops) {
	int ns = JB_Tk__NextStart();
	if ((!JB_Tk__Allow(kJB__Tk_kColon))) {
		return ch;
	}
	if (JB_Msg_OperatorIn(ch, JB_SyxArg)) {
		if (JB_Msg_EqualsSyx(ch, JB_SyxThg, false)) {
			ch->Func = JB_SyxTmp;
			Message* _tmPf0 = JB_Incr(JB_Tk__fArgColon(ns, ch));
			JB_Tree_SyntaxAppend(ch, _tmPf0);
			JB_Decr(_tmPf0);
		}
		return ch;
	}
	Message* Result = JB_Incr(JB_Tk__NewParentName(nil, JB_SyxItem, ch->Position, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Result, ch);
	Message* ch2 = JB_Incr(JB_Tk__Process(TemporalFlags, false, Result));
	if ((!ch2)) {
		JB_SetRef(ch2, JB_Tk__ProcessThing(ops, false));
	}
	if ((!(ch2))) {
		JB_SetRef(ch2, JB_Tk__NewParentName(Result, JB_SyxEmb, ns, JB_LUB[0]));
	}
	JB_Tree_SyntaxAppend(Result, ch2);
	(JB_Msg_AfterSet(Result, JB_Msg_After(ch2)));
	JB_Decr(ch2);
	JB_SafeDecr(Result);
	return Result;
}

int JB_Tk__ParseLoop(Message* Output, int TmpoFlags) {
	int rz = 0;
	Message* prev = nil;
	while (Output) {
		ParserLineAndIndent Info = JB_Tk__NextLineAndIndent(Output);
		rz = (rz + Info.Lines);
		if (JB_Tk__WillEnd() or (((bool)prev) and (!Info.Lines))) {
			break;
		}
		Message* ch = JB_Tk__ParseLoopItem(Output, TmpoFlags, prev, Info.Indent);
		if ((!ch)) {
			break;
		}
		if (ch != Output) {
			rz = (rz + ((JB_Msg_EqualsSyx(ch, JB_SyxItem, false))));
			if (Info.IsDebug) {
				ch->Flags = (ch->Flags | kJB__MsgParseFlags_BreakPoint);
			}
			Output = JB_Tk__AddToOutput(Output, ch, prev, Info.Pos);
			prev = ch;
		}
	};
	return rz;
}

bool JB_Tk__ParseLoopFlags(Message* Output, JB_String* Ender, int TmpoFlags) {
	bool rz = false;
	Ind err = JB_Tk__NextStart();
	rz = ((bool)JB_Tk__ParseLoop(Output, TmpoFlags & (~JB__Tk_StopBars)));
	if (JB_Str_Exists(Ender)) {
		JB_Tk__ExpectEndChar(err, Ender, true);
		(JB_Msg_AfterSet(Output, JB_Tk__NextStart()));
	}
	return rz;
}

Message* JB_Tk__ParseLoopItem(Message* Output, int TmpoFlags, Message* Prev, int Indent) {
	Message* ch = JB_Incr(JB_Tk__Process(kJB__Tk_kTemporal & TmpoFlags, false, Output));
	if ((!ch)) {
		Message* item = JB_Incr(JB_Tk__ProcessThingParent(Output, kJB__Tk_kOpp, kJB__Tk_kThing));
		if ((!item) or (item == Output)) {
			JB_Decr(ch);
			JB_SafeDecr(item);
			return item;
		}
		TmpoFlags = (TmpoFlags & (kJB__Tk_kTemporal & (~kJB__Tk_kTemporalWord)));
		JB_SetRef(ch, JB_Tk__ParseItem(item, TmpoFlags, kJB__Tk_kOpp));
		JB_Decr(item);
	}
	 else if ((JB_Msg_EqualsSyx(ch, JB_SyxCnj, false)) or (JB_Msg_EqualsSyx(ch, JB_SyxSCnj, false))) {
		JB_SetRef(ch, JB_Tk__ReRoute(Output, ch, Prev));
		if ((!ch)) {
			JB_Decr(ch);
			return nil;
		}
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(ch)));
		Indent = _tmPf0->Indent;
		JB_Decr(_tmPf0);
	}
	ch->Indent = Indent;
	JB_SafeDecr(ch);
	return ch;
}

Message* JB_Tk__PostInnerAdj(Message* Rel, Message* opp) {
	JB_Incr(Rel);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(Rel)));
	Message* f = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	if ((!(JB_Msg_EqualsSyx(Rel, JB_SyxRel, false))) and (!((JB_Msg_EqualsSyx(Rel, JB_SyxBra, false)) and (JB_Msg_EqualsSyx(f, JB_SyxRel, false))))) {
		Message* _tmPf3 = JB_Incr(JB_Tk__ErrorAdd(JB_LUB[851], Rel->Position));
		JB_Decr(Rel);
		JB_Decr(f);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	if (JB_Msg_EqualsSyx(Rel, JB_SyxBra, false)) {
		JB_SetRef(Rel, f);
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(f)));
		JB_SetRef(f, _tmPf1);
		JB_Decr(_tmPf1);
	}
	Message* Adverb = JB_Incr(JB_Tk__Process(kJB__Tk_kOppWord | kJB__Tk_kOppBra, kJB__Tk_kExpect, nil));
	if ((!Adverb)) {
		JB_Decr(Rel);
		JB_Decr(Adverb);
		JB_Decr(f);
		return nil;
	}
	Message* adj = JB_Incr(JB_Syx_Msg(JB_SyxAdj, JB_LUB[0]));
	(JB_Ring_NextSibSet(f, adj));
	JB_Decr(f);
	JB_Tree_SyntaxAppend(adj, Adverb);
	JB_Decr(Adverb);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(adj)));
	JB_Tree_SyntaxAppend(adj, _tmPf2);
	JB_Decr(adj);
	JB_Decr(_tmPf2);
	Rel->Func = JB_Syxpinn;
	JB_SafeDecr(Rel);
	return Rel;
}

Message* JB_Tk__ProcessThing(int Ops, bool Expect) {
	return JB_Tk__ProcessThingSub(nil, Ops, kJB__Tk_kThing, Expect);
}

Message* JB_Tk__ProcessThingNoBar(int Ops, bool Expect) {
	return JB_Tk__ProcessThingSub(nil, Ops, kJB__Tk_kThingSyx | kJB__Tk_kThingWord, Expect);
}

Message* JB_Tk__ProcessThingOrTmp(int opps) {
	return JB_Tk__ProcessThingSub(nil, opps, kJB__Tk_kThingSyx | (kJB__Tk_kThingWord | kJB__Tk_kTemporalSyx), false);
}

Message* JB_Tk__ProcessThingParent(Message* parent, int Ops, int ThingFlags) {
	return JB_Tk__ProcessThingSub(parent, Ops, ThingFlags, false);
}

Message* JB_Tk__ProcessThingSub(Message* Parent, int Ops, int KindOfThing, bool Expect) {
	Message* result = JB_Incr(JB_Tk__Process(KindOfThing, Expect, Parent));
	if ((!result) or ((result == Parent) or JB_Tk__WillEnd())) {
		JB_SafeDecr(result);
		return result;
	}
	Message* _tmPf0 = JB_Incr(JB_Tk__DecorateThing(result, Ops));
	JB_Decr(result);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* JB_Tk__ReRoute(Message* output, Message* cnj, Message* f) {
	Message* rz = nil;
	if ((!f)) {
		JB_Decr(rz);
		return JB_Tk__ErrorAdd(JB_LUB[754], JB_Tk__NextStart());
	}
	JB_SetRef(rz, JB_Tk__ChainTemporalRels(f, cnj));
	if (JB_Ring_HasChildCount(rz, 2) and JB_Tk__Allow(kJB__Tk_kEndOfLine)) {
		Message* _tmPf0 = JB_Incr(JB_Tk__ProcessThing(kJB__Tk_kOpp, false));
		JB_Tree_SyntaxAppend(rz, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Tree_SyntaxAppend(output, rz);
	JB_SafeDecr(rz);
	return rz;
}

void JB_Tk__StopParse() {
	JB_Tk__StartParse(nil);
}

Message* JB_Tk__ThingXMLAtt(int start, Message* Parent) {
	int name = JB_Tk__WordAfterSub(start, JB__Constants_XMLWordMiddle);
	return JB_Tk__NewParent(Parent, JB_SyxXAtt, start, name);
}

void JB_Tk__TokensFn(Array* arr, int bits, FP_ParseHandler func) {
	TokHan* _tmPf0 = JB_Incr(JB_Tk__Handler(bits, ((TokenHandler_fp)func)));
	JB_Tk__TokensHan(arr, _tmPf0);
	JB_Decr(_tmPf0);
}

void JB_Tk__TokensHan(Array* arr, TokHan* H) {
	{
		int _if0 = 0;
		while (true) {
			JB_String* s = JB_Incr(((JB_String*)JB_Array_Value(arr, _if0)));
			if (s == nil) {
				JB_Decr(s);
				break;
			}
			(JB_Tk__TokenSet(s, H));
			JB_Decr(s);
			_if0++;
		};
	};
}

void JB_Tk__TokenzFn(JB_String* s, int bits, FP_ParseHandler func) {
	if (JB_Str_ContainsString(s, JB_LUB[100])) {
		Array* _tmPf0 = JB_Incr(JB_Str_Words(s));
		JB_Tk__TokensFn(_tmPf0, bits, func);
		JB_Decr(_tmPf0);
	}
	 else {
		TokHan* _tmPf1 = JB_Incr(JB_Tk__Handler(bits, ((TokenHandler_fp)func)));
		(JB_Tk__TokenSet(s, _tmPf1));
		JB_Decr(_tmPf1);
	}
}

Message* JB_Tk__UnexpectedSyntax(Message* bad) {
	return JB_Tk__ErrorAdd(JB_LUB[1343], bad->Position);
}

Message* JB_Tk__UnTmpPlace(Message* R) {
	Message* p = ((Message*)JB_Ring_Parent(R));
	return ((Message*)JB_Ternary((JB_Msg_EqualsSyx(p, JB_SyxTmp, false)), p, R));
}

bool JB_Tk__WillEnd() {
	return JB_Tk__CheckEnded(kJB__Tk_kEnd);
}

int JB_Tk__WordAfter(int Start) {
	return JB_Tk__WordAfterSub(Start, JB__Constants_CSWordMiddle);
}

int JB_Tk__WordAfterSub(int Start, CharSet* cs) {
	int n = JB_Str_Length(JB__Tk_Data);
	if (Start < n) {
		Ind After = JB_Str_OutCharSet(JB__Tk_Data, cs, Start, JB_int__Max());
		if ((!JB_Ind_SyntaxCast(After))) {
			After = n;
		}
		if (After > Start) {
			(JB_Tk__NextStartSet(After));
			return After;
		}
	}
	JB_Tk__ErrorLetter(Start);
	return 0;
}

int JB_Tk__XMLAttribs(Message* XML, int start) {
	Message* AllAtts = JB_Incr(JB_Tk__NewParentName(XML, JB_SyxList, start, JB_LUB[0]));
	JB_String* s = JB_Incr(JB__Tk_Data);
	while (true) {
		Ind i = JB_Str_OutWhite(s, JB_Tk__NextStart(), JB_int__Max());
		if ((!JB_Ind_SyntaxCast(i))) {
			break;
		}
		byte c = JB_Str_ByteValue(s, i);
		if ((c == '>') or ((c == '/') and (JB_Str_ByteValue(s, i + 1) == '>'))) {
			JB_Decr(s);
			JB_Decr(AllAtts);
			return i;
		}
		if ((!JB_CS_HasChar(JB__Constants_CSWordStart, c))) {
			break;
		}
		Message* Attr = JB_Incr(JB_Tk__ThingXMLAtt(i, AllAtts));
		if ((!JB_Tk__ExpectEndChar(JB_Tk__NextStart(), JB_LUB[587], true))) {
			JB_Decr(Attr);
			JB_Decr(s);
			JB_Decr(AllAtts);
			return 0;
		}
		i = JB_Tk__CleanSpaces();
		c = JB_Str_ByteValue(s, i);
		if ((!((c == '\'') or (c == '"')))) {
			JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[642], i));
			JB_Decr(Attr);
			JB_Decr(s);
			JB_Decr(AllAtts);
			return nil;
		}
		Ind After = JB_Str_FindByte(s, c, i + 1, JB_int__Max());
		Message* Txt = JB_Incr(JB_Tk__NewParentName(Attr, JB_SyxXTxt, start, JB_LUB[0]));
		JB_Decr(Attr);
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(s, i + 1, After));
		JB_SetRef(Txt->Name, JB_Str_MultiReplaceAll(_tmPf0, JB__Constants_XML_UnEscapeStr, JB_StdErr));
		JB_Decr(Txt);
		JB_Decr(_tmPf0);
		(JB_Tk__NextStartSet(After + 1));
	};
	JB_Decr(AllAtts);
	JB_Decr(s);
	JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[834], JB_Tk__NextStart()));
	return 0;
}

Message* JB_Tk__XMLWhatever(int s, int skip, JB_String* ender, Syntax fn) {
	Message* rz = nil;
	int i = s + skip;
	Ind EndPos = JB_Str_InStr(JB__Tk_Data, ender, i, JB_int__Max(), false);
	if ((!JB_Ind_SyntaxCast(EndPos))) {
		JB_Decr(rz);
		return JB_Tk__ErrorAdd(JB_LUB[1265], i);
	}
	(JB_Tk__NextStartSet(EndPos + JB_Str_Length(ender)));
	if (fn) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(JB__Tk_Data, i, EndPos));
		JB_SetRef(rz, JB_Tk__NewParentName(nil, fn, i, _tmPf0));
		JB_Decr(_tmPf0);
		rz->Position = s;
		(JB_Msg_AfterSet(rz, JB_Tk__NextStart()));
	}
	JB_SafeDecr(rz);
	return rz;
}

Ind JB_Tk__XMLWordEnd(int From) {
	Ind rz = -1;
	byte b = JB_Str_ByteValue(JB__Tk_Data, From);
	if ((!JB_CS_HasChar(JB__Constants_CSWordStart, b))) {
		JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[1386], From));
	}
	 else {
		rz = JB_Str_OutCharSet(JB__Tk_Data, JB__Constants_XMLWordMiddle, From + 1, JB_int__Max());
		if (rz == -1) {
			JB_FreeIfDead(JB_Tk__ErrorAdd(JB_LUB[1390], JB_Tk__NextStart()));
		}
		(JB_Tk__NextStartSet(rz));
	}
	return rz;
}


int JB_zalgo__Init_() {
	{
		JB__zalgo_R = ((Random){});
		JB_SetRef(JB__zalgo_up, JB_LUB[2103]);
		JB_SetRef(JB__zalgo_mid, JB_LUB[2104]);
		JB_SetRef(JB__zalgo_down, JB_LUB[2105]);
	}
	;
	return 0;
}

int JB_zalgo__InitCode_() {
	return 0;
}






JB_String* JB_bool_Render0(bool self) {
	return ((JB_StringC*)JB_Ternary(self, JB_LUB[2005], JB_LUB[1649]));
}


bool JB_byte_CanPrintAsNormalChar(byte self) {
	return ((self < 127) and (self >= 32));
}

bool JB_byte_In(byte self, uint a, uint b) {
	return (self >= a) and (self <= b);
}

bool JB_byte_IsHex(byte self) {
	return JB_byte_IsInt(self) or (JB_byte_In(self, 'a', 'f') or JB_byte_In(self, 'A', 'F'));
}

bool JB_byte_IsInt(byte self) {
	return ((uint)(((int)self) - '0')) <= 9;
}

bool JB_byte_IsLetter(byte self) {
	return JB_CP_IsLetter(((Codepoint)self));
}

bool JB_byte_IsLower(byte self) {
	return JB_CP_IsLower(((Codepoint)self));
}

bool JB_byte_IsTextLine(byte self) {
	return (self == '\n') or (self == '\x0D');
}

bool JB_byte_IsUpper(byte self) {
	return JB_CP_IsUpper(((Codepoint)self));
}

bool JB_byte_IsWhite(byte self) {
	return JB_CP_IsWhite(((Codepoint)self));
}

byte JB_byte_LowerCase(byte self) {
	if (JB_byte_IsUpper(self)) {
		return self + 32;
	}
	return self;
}

JB_String* JB_byte_Render(byte self, FastString* fs_in) {
	if ((!fs_in)) {
		return JB_Str__Byte(self);
	}
	JB_FS_AppendByte(fs_in, ((byte)self));
	return JB_LUB[0];
}

byte JB_byte_UpperCase(byte self) {
	if (JB_byte_IsLower(self)) {
		return self - 32;
	}
	return self;
}



JB_String* JB_cstring_Str(_cstring self) {
	return JB_Str__Wrap(self);
}

FakeJBString JB_cstring_temp(_cstring self) {
	FakeJBString rz = ((FakeJBString){});
	rz.Refcount = 0;
	rz.Length = strlen(self);
	rz.Addr = ((byte*)self);
	return rz;
}


int64 JB_dbl_AsInt(double self) {
	double abc[1];
	abc[0] = self;
	//;
	int64* def = ((int64*)((&abc[0])));
	return def[0];
}

JB_String* JB_dbl_Render(double self, int dp, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendDoubleAsText(fs, self, dp, true, false);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_dbl_RenderFloat(double self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendDoubleAsText(fs, self, 6, false, true);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}


float JB_f_RoundTo(float self, int to) {
	float v = ((float)(JB_int_OperatorPow(10, to)));
	return roundf((self * v)) / v;
}

float JB_f_Fract(float self) {
	return self - floorf(self);
}

float JB_f_Pow(float self, int n) {
	float rz = 0.0f;
	//visible;
	rz = self;
	{
		int _Valuef1 = 0;
		while (_Valuef1 < n) {
			rz = (rz * rz);
			_Valuef1++;
		};
	}
	;
	return rz;
}

bool JB_f_SyntaxAccess(float self) {
	return JB_Rnd_Float((&JB__Rnd_Shared)) < self;
}



int SC_int___junktest_8__(int self, int Inaaaadex, bool Create) {
	//visible;
	int doubleJunk2 = 0;
	{
		int _Valuef2 = 0;
		while (_Valuef2 < 0) {
			int _tmPf0 = SC_int___junktest_8__(1, 0, false);
			if ((!_tmPf0)) {
				break;
			}
			doubleJunk2 = _tmPf0;
			_Valuef2++;
		};
	}
	;
	return 0;
}

int JB_int_Bits(int self) {
	return (1 << self) - 1;
}

bool SC_int_IsSimpleOrPointerCast(int self) {
	return (self == kJB_kSimpleMatch) or ((self == kJB_kNumericMatch) or (self == kJB_kNeedsAddressOf));
}

Message* JB_int_Msg(int self) {
	JB_String* _tmPf0 = JB_Incr(JB_int_RenderFS(self, nil));
	Message* _tmPf1 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxNum, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_int_OperatorAlign(int self, int To) {
	int Missing = (self % To);
	if (Missing) {
		return self + (To - Missing);
	}
	return self;
}

bool JB_int_OperatorIsa(int self, uint n) {
	return (!(((bool)(self % n))));
}

int JB_int_OperatorMax(int self, int other) {
	if (self > other) {
		return self;
	}
	return other;
}

int JB_int_OperatorMin(int self, int other) {
	if (self < other) {
		return self;
	}
	return other;
}

int JB_int_OperatorPow(int self, int a) {
	int rz = 0;
	if (a == 2) {
		return self * self;
	}
	if (self >= 0) {
		rz = 1;
		{
			int _Valuef1 = 0;
			while (_Valuef1 < a) {
				rz = (rz * self);
				_Valuef1++;
			};
		};
	}
	return rz;
}

IntRange JB_int_OperatorTo(int self, int other) {
	return ((IntRange)ivec2{self, other + 1});
}

AsmReg SC_int_Reg(int self) {
	AsmReg rz = ((AsmReg){});
	rz.AType = kJB__TC_int64;
	rz.Reg = self;
	return rz;
}

JB_String* JB_int_RenderFS(int self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendInt32(fs, self);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_int_RenderSize(int self, FastString* fs_in) {
	return JB_int64_StrSize(((int64)self), fs_in);
}

bool JB_int_SyntaxAccess(int self, int bit) {
	return ((bool)(self & (1 << bit)));
}

int JB_int_SyntaxAccessSet(int self, int bit, bool Value) {
	int mask = 1 << bit;
	return (self & (~mask)) | (((int)Value) << bit);
}

int JB_int__Max() {
	return 2147483647;
}

int JB_int__Min() {
	return 2147483648;
}



int64 JB_int64_Abs(int64 self) {
	return ((int64)JB_Ternary(self < 0, (-self), self));
}

double JB_int64_AsFloat(int64 self) {
	int64 abc[1];
	abc[0] = self;
	//;
	double* def = ((double*)((&abc[0])));
	return def[0];
}

JB_String* JB_int64_Hex(int64 self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendHex(fs, self, 2);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* JB_int64_Msg(int64 self) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(self, nil));
	Message* _tmPf1 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxNum, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int64 JB_int64_OperatorMax(int64 self, int64 d) {
	if (d > self) {
		return d;
	}
	return self;
}

int64 JB_int64_OperatorMin(int64 self, int64 d) {
	if (d < self) {
		return d;
	}
	return self;
}

int64 JB_int64_OperatorRotl(int64 self, int Amount) {
	return JB_u64_RotL(((uint64)self), Amount);
}

JB_String* JB_int64_Render(int64 self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendInt64(fs, self);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_int64_RenderSizePart(int64 self, FastString* fs, int Size, JB_String* Suff) {
	float f = JB_f_RoundTo((((float)self) / ((float)Size)), 1);
	JB_FS_AppendInt32(fs, ((int)f));
	if (f < 120.0f) {
		int frac = ((int)(JB_f_Fract(f) * 10.0f));
		JB_FS_AppendByte(fs, '.');
		JB_FS_AppendInt32(fs, frac);
	}
	JB_FS_AppendString(fs, Suff);
}

JB_String* JB_int64_StrSize(int64 self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	if (self <= 512) {
		JB_FS_AppendInt64(fs, self);
	}
	 else if (self <= 921600) {
		JB_int64_RenderSizePart(self, fs, 1024, JB_LUB[980]);
	}
	 else if (self < 943718400) {
		JB_int64_RenderSizePart(self, fs, 1048576, JB_LUB[1002]);
	}
	 else if (self < 966367641600) {
		JB_int64_RenderSizePart(self, fs, 1073741824, JB_LUB[895]);
	}
	 else {
		JB_int64_RenderSizePart(self, fs, 1099511627776, JB_LUB[1264]);
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}


bool JB_ivec2_Equals2(ivec2 self, ivec2 v, bool Aware) {
	return (self[0] == v[0]) and (self[1] == v[1]);
}



ivec4 SC_ivec4___junktest_4__Set(ivec4 self, int Value) {
	self[2] = (Value + self[0]);
	return self;
}


bool SC_uint_IsNormalMatch(uint self) {
	return ((self == kJB_kSimpleMatch) or ((self == kJB_kNumericMatch) or (self == kJB_kSuperClassMatch)));
}

uint JB_uint_LowestBit(uint self) {
	return self & (-self);
}



ivec2 SC_uint64_LongestBitStretch(uint64 self) {
	ivec2 rz = ((ivec2){});
	uint64 last = 0;
	while (self) {
		last = self;
		self = (self & (JB_u64_RotL(self, 1)));
		rz[0]++;
	};
	rz[1] = JB_u64_Log2(last);
	return rz;
}

uint64 JB_uint64_LowestBit(uint64 self) {
	return self & (-self);
}





bool SC_ASMtmp_SyntaxIs(ASMtmp self, ASMtmp t) {
	return self == t;
}

AsmReg SC_ASMtmp__Debugger(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_ASMtmp__If(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_ASMtmp__Rejoin(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}

AsmReg SC_ASMtmp__Return(ASMFuncState* self, Message* exp, AsmReg Reg) {
	AsmReg rz = ((AsmReg){});
	Message* f = ((Message*)JB_Ring_First(exp));
	if (f) {
		rz = SC_flat_Reg(self, f, SC_int_Reg(0));
	}
	SC_flat_AddASM(self, exp, kSC__ASM_RET, SC_Reg_ToInt((&rz)), 0, 0, 0);
	return rz;
}

AsmReg SC_ASMtmp__StateExpr(ASMFuncState* self, Message* exp, AsmReg Reg) {
	return ((AsmReg){});
}

AsmReg SC_ASMtmp__While(ASMFuncState* self, Message* exp, AsmReg Reg) {
	debugger;
	return ((AsmReg){});
}



bool JB_CP_In(Codepoint self, int a, int b) {
	return ((Codepoint)(self - a)) <= ((Codepoint)(b - a));
}

bool JB_CP_IsHigher(Codepoint self) {
	return JB_CP_In(self, 128, 1114111);
}

bool JB_CP_IsLetter(Codepoint self) {
	return JB_CP_IsUpper(self) or (JB_CP_IsLower(self) or JB_CP_IsHigher(self));
}

bool JB_CP_IsLower(Codepoint self) {
	return JB_CP_In(self, 'a', 'z');
}

bool JB_CP_IsUpper(Codepoint self) {
	return JB_CP_In(self, 'A', 'Z');
}

bool JB_CP_IsWhite(Codepoint self) {
	return (self == ' ') or ((self == '\n') or ((self == '\x0D') or (self == '\t')));
}






int JB_TC__Shift(DataTypeCode self) {
	return (self >> 4) & 3;
}

SCClass* SC_TC_Better_Numeric_Sub(DataTypeCode self, DataTypeCode t, OpMode Op) {
	int bits = JB_int_OperatorMax(JB_TC_ItemBitCount(self), JB_TC_ItemBitCount(t));
	if (JB_TC_IsFloat(self) or JB_TC_IsFloat(t)) {
		if (bits > 32) {
			return JB_Typef64;
		}
		if (bits >= 16) {
			return JB_Typefloat;
		}
		return JB_Typehfloat;
	}
	if (Op) {
		if (SC_OpMode_SyntaxIs(Op, kSC__OpMode_MakesSigned)) {
			bool UnSigned = (!JB_TC_IsSigned(self)) or (!JB_TC_IsSigned(t));
			if ((bits + UnSigned) > 32) {
				return JB_TypeInt64;
			}
			return JB_TypeInt;
		}
		if (SC_OpMode_SyntaxIs(Op, kSC__OpMode_LoseBits)) {
			bits = JB_int_OperatorMin(JB_TC_ItemBitCount(self), JB_TC_ItemBitCount(t));
		}
		 else if (SC_OpMode_SyntaxIs(Op, kSC__OpMode_LeftOnly)) {
			bits = JB_TC_ItemBitCount(self);
		}
		 else if (SC_OpMode_SyntaxIs(Op, kSC__OpMode_NoExtraBits)) {
			0;
		}
		 else if ((SC_OpMode_SyntaxIs(Op, kSC__OpMode_MathLike)) and (bits < 32)) {
			bits = 32;
		}
	}
	bool Signed = JB_TC_IsSigned(self) or JB_TC_IsSigned(t);
	if (bits > 32) {
		return ((SCClass*)JB_Ternary(Signed, JB_TypeInt64, JB_TypeuInt64));
	}
	if (bits > 16) {
		return ((SCClass*)JB_Ternary(Signed, JB_TypeInt, JB_TypeuInt));
	}
	if (bits > 8) {
		return ((SCClass*)JB_Ternary(Signed, JB_TypeInt16, JB_TypeuInt16));
	}
	return JB_TypeByte;
}

int JB_TC_ByteSize(DataTypeCode self) {
	return JB_TC_Count(self) << JB_TC__Shift(self);
}

int JB_TC_Count(DataTypeCode self) {
	return (self & 3) + 1;
}

SCClass* SC_TC_CreateSignedStuff(DataTypeCode self) {
	DataTypeCode s = JB_TC_SetSigned(self, (!JB_TC_IsSigned(self)));
	Message* keymsg = JB_Msg_ConstructorNormal(nil, JB_SyxThg, JB_LUB[0]);
	{
		Dictionary* _LoopSrcf2 = JB_TC__Types();
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf2);
		while (true) {
			DTWrap* c = ((DTWrap*)JB_DictionaryReader_NextValue(_navf0));
			if (c == nil) {
				break;
			}
			JB_String* key = JB_Nav_Name(_navf0);
			if (c == JB_Wrap_ConstructorInt(nil, s)) {
				JB_SetRef(keymsg->Name, key);
				return SC_Comp__SyntaxAccess(keymsg);
			}
		};
	}
	;
	return nil;
}

bool JB_TC_ExistsButBadlyNamedOrDesigned(DataTypeCode self) {
	return (((bool)JB_TC__Shift(self)) or (!JB_TC_IsFloat(self)));
}

int SC_TC_FloatIntMerge(DataTypeCode self, int old, Message* s) {
	if (JB_TC_IsFloat(self)) {
		old = (old | 2);
	}
	 else if (JB_TC_IsInt(self)) {
		old = (old | 1);
	}
	if (old == 3) {
		JB_Msg_SyntaxExpect(s, JB_LUB[1717]);
		return 0;
	}
	return old;
}

bool JB_TC_IsFloat(DataTypeCode self) {
	return ((bool)((self >> 7) & 1));
}

bool JB_TC_IsInt(DataTypeCode self) {
	return (!JB_TC_IsFloat(self));
}

bool JB_TC_IsSigned(DataTypeCode self) {
	return ((bool)((self >> 6) & 1));
}

int JB_TC_ItemBitCount(DataTypeCode self) {
	return 8 << JB_TC__Shift(self);
}

int JB_TC_NumericCount(DataTypeCode self) {
	if (((bool)(self & 8))) {
		return JB_TC_Count(self);
	}
	return 0;
}

int JB_TC_NumericCountBoolsToo(DataTypeCode self) {
	if (((bool)(self & 8))) {
		return JB_TC_Count(self);
	}
	if ((!self)) {
		return 1;
	}
	return 0;
}

bool JB_TC_SameBasicType(DataTypeCode self, DataTypeCode b) {
	return (JB_TC_IsFloat(self) == JB_TC_IsFloat(b));
}

DataTypeCode JB_TC_SetSigned(DataTypeCode self, bool b) {
	if (b) {
		return (self) | (1 << 6);
	}
	 else {
		return (self) & (~(1 << 6));
	}
}

bool JB_TC_SyntaxIs(DataTypeCode self, DataTypeCode M) {
	return self == M;
}

Dictionary* JB_TC__Types() {
	//visible;
	Dictionary* _T = JB_Incr(JB__TC_Types_Dict);
	if (_T) {
		JB_SafeDecr(_T);
		return _T;
	}
	JB_SetRef(_T, JB_Dict_Constructor(nil));
	JB_SetRef(JB__TC_Types_Dict, _T);
	JB_Dict_SetValue(_T, JB_LUB[1946], kJB__TC_sign);
	JB_Dict_SetValue(_T, JB_LUB[1528], kJB__TC_byte);
	JB_Dict_SetValue(_T, JB_LUB[1539], kJB__TC_char);
	JB_Dict_SetValue(_T, JB_LUB[1529], kJB__TC_Byte2);
	JB_Dict_SetValue(_T, JB_LUB[1530], kJB__TC_Byte3);
	JB_Dict_SetValue(_T, JB_LUB[1531], kJB__TC_Byte4);
	JB_Dict_SetValue(_T, JB_LUB[1924], kJB__TC_SByte);
	JB_Dict_SetValue(_T, JB_LUB[1925], kJB__TC_SByte2);
	JB_Dict_SetValue(_T, JB_LUB[1926], kJB__TC_SByte3);
	JB_Dict_SetValue(_T, JB_LUB[1927], kJB__TC_SByte4);
	JB_Dict_SetValue(_T, JB_LUB[2016], kJB__TC_uint16);
	JB_Dict_SetValue(_T, JB_LUB[1720], kJB__TC_int16);
	JB_Dict_SetValue(_T, JB_LUB[1913], kJB__TC_s16x2);
	JB_Dict_SetValue(_T, JB_LUB[1914], kJB__TC_s16x3);
	JB_Dict_SetValue(_T, JB_LUB[1915], kJB__TC_s16x4);
	JB_Dict_SetValue(_T, JB_LUB[1721], kJB__TC_int64);
	JB_Dict_SetValue(_T, JB_LUB[2017], kJB__TC_uint64);
	JB_Dict_SetValue(_T, JB_LUB[1738], kJB__TC_iVec2);
	JB_Dict_SetValue(_T, JB_LUB[1739], kJB__TC_iVec3);
	JB_Dict_SetValue(_T, JB_LUB[1740], kJB__TC_iVec4);
	JB_Dict_SetValue(_T, JB_LUB[1694], kJB__TC_HFloat);
	JB_Dict_SetValue(_T, JB_LUB[1658], kJB__TC_Float);
	JB_Dict_SetValue(_T, JB_LUB[1620], kJB__TC_Double);
	JB_Dict_SetValue(_T, JB_LUB[2030], kJB__TC_Vec2);
	JB_Dict_SetValue(_T, JB_LUB[2031], kJB__TC_Vec3);
	JB_Dict_SetValue(_T, JB_LUB[2032], kJB__TC_Vec4);
	JB_Dict_SetValue(_T, JB_LUB[1716], kJB__TC_Int);
	JB_Dict_SetValue(_T, JB_LUB[2015], kJB__TC_UInt);
	JB_Dict_SetValue(_T, JB_LUB[1521], kJB__TC_bool);
	JB_Dict_SetValue(_T, JB_LUB[2012], kJB__TC_u32);
	JB_Dict_SetValue(_T, JB_LUB[1916], kJB__TC_s64);
	JB_Dict_SetValue(_T, JB_LUB[2014], kJB__TC_u64);
	JB_Dict_SetValue(_T, JB_LUB[1647], kJB__TC_f64);
	JB_Dict_SetValue(_T, JB_LUB[1646], kJB__TC_f16);
	JB_Dict_SetValue(_T, JB_LUB[1722], kJB__TC_int8);
	JB_Dict_SetValue(_T, JB_LUB[2018], kJB__TC_uint8);
	JB_Dict_SetValue(_T, JB_LUB[2009], kJB__TC_u16);
	JB_Dict_SetValue(_T, JB_LUB[1912], kJB__TC_s16);
	JB_Dict_SetValue(_T, JB_LUB[1501], kJB__TC_atomic_int64);
	JB_Dict_SetValue(_T, JB_LUB[1503], kJB__TC_atomic_uint64);
	JB_Dict_SetValue(_T, JB_LUB[1500], kJB__TC_atomic_int);
	JB_Dict_SetValue(_T, JB_LUB[1502], kJB__TC_atomic_uint);
	JB_Dict_SetValue(_T, JB_LUB[1499], kJB__TC_atomic_byte);
	JB_Dict_SetValue(_T, JB_LUB[1462], kJB__TC__void);
	JB_Dict_SetValue(_T, JB_LUB[1463], kJB__TC__voidptr);
	JB_Dict_SetValue(_T, JB_LUB[1580], kJB__TC_cstring);
	JB_Dict_SetValue(_T, JB_LUB[2024], kJB__TC_UnusedType);
	JB_SafeDecr(_T);
	return _T;
}


Date JB_Date_Ago(Date self) {
	if (self) {
		return JB_Date__Now() - self;
	}
	return 0;
}

int JB_Date_DayOfWeek(Date self) {
	return JB_Date_Days(self) % 7;
}

int64 JB_Date_Days(Date self) {
	return (JB_Date_WholeSeconds(self) / kJB__Date_kSecondsPerDay);
}

JB_String* JB_Date_RenderDurr(Date self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendDurr(fs, self);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Date_RenderInt(Date self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendIntegerAsText(fs, self, 1);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

double JB_Date_Seconds(Date self) {
	return ((double)self) * kJB__Date_kOneStep;
}

int64 JB_Date_WholeSeconds(Date self) {
	return self >> 16;
}

Date JB_Date__New0() {
	return JB_Date__Now();
}


bool SC_DeclMode_SyntaxIs(DeclMode self, DeclMode o) {
	return self == o;
}


bool SC_DotUseType_SyntaxIs(DotUseType self, DotUseType d) {
	return self == d;
}






JB_String* JB_ErrorSeverity_Render(ErrorSeverity self, FastString* fs_in) {
	if (self < kJB__ErrorSeverity_MaxError) {
		Array* _tmPf0 = JB_Incr(JB_ErrorSeverity__InitNames());
		JB_String* name = JB_Incr(((JB_String*)JB_Array_Value(_tmPf0, ((int)self))));
		JB_Decr(_tmPf0);
		if ((!fs_in)) {
			if (name != nil) {
				JB_SafeDecr(name);
				return name;
			}
			JB_Decr(name);
			return JB_LUB[0];
		}
		if (JB_Str_Exists(name)) {
			JB_FS_AppendString(fs_in, name);
		}
		JB_Decr(name);
	}
	return JB_LUB[0];
}

bool JB_ErrorSeverity_SyntaxIs(ErrorSeverity self, ErrorSeverity e) {
	return self == e;
}

ErrorSeverity JB_ErrorSeverity_SyntaxUsing(ErrorSeverity self) {
	ErrorSeverity rz = 0;
	rz = JB_StdErr->LowerErrorsTo;
	JB_StdErr->LowerErrorsTo = self;
	return rz;
}

void JB_ErrorSeverity_SyntaxUsingComplete(ErrorSeverity self) {
	JB_StdErr->LowerErrorsTo = self;
}

ErrorSeverity JB_ErrorSeverity__Find(JB_String* name, Message* err) {
	{
		Array* _LoopSrcf2 = JB_ErrorSeverity__InitNames();
		int _if0 = 0;
		while (true) {
			JB_String* n = ((JB_String*)JB_Array_Value(_LoopSrcf2, _if0));
			if (n == nil) {
				break;
			}
			int i = _if0;
			if (JB_Str_Equals(n, name, true)) {
				return i;
			}
			_if0++;
		};
	}
	;
	if (err) {
		if (true) {
			JB_Msg_SyntaxExpect(err, nil);
		}
	}
	return 0;
}

int JB_ErrorSeverity__Init_() {
	{
		JB_SetRef(JB__ErrorSeverity_names, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

int JB_ErrorSeverity__InitCode_() {
	return 0;
}

Array* JB_ErrorSeverity__InitNames() {
	return ({
		Array* _X = JB__ErrorSeverity_names;
		if ((!JB_Array_SyntaxCast(_X))) {
			_X = JB_Str_Words(JB_LUB[1103]);
			JB_SetRef(JB__ErrorSeverity_names, _X);
		}
		 _X;
	});
}








FlowControlStopper JB_FlowControlStopper_SyntaxUsing(FlowControlStopper self) {
	//;
	return 0;
}

void JB_FlowControlStopper_SyntaxUsingComplete(FlowControlStopper self) {
	//;
	JB_Flow__Stop();
}




bool JB_Rg_Contains1(IntRange self, int i) {
	return (i >= self[0]) and (i < self[1]);
}

int JB_Rg_Width(IntRange self) {
	return self[1] - self[0];
}



bool JB_MaybeBool_Default(MaybeBool self) {
	return ((bool)(((byte)self) & 1));
}

bool JB_MaybeBool_IsFalse(MaybeBool self) {
	return ((byte)self) == 0;
}

bool JB_MaybeBool_IsKnown(MaybeBool self) {
	return ((byte)self) <= 1;
}

bool JB_MaybeBool_IsTrue(MaybeBool self) {
	return ((byte)self) == 1;
}

MaybeBool JB_MaybeBool__New(bool Default) {
	return ((MaybeBool)(8 + Default));
}




NilCheckMode SC_khalai_Activate(NilCheckMode self) {
	if (SC_khalai_SyntaxIs(self, kSC__khalai_Active)) {
		return SC_khalai_Normal(self);
	}
	bool rev = (SC_khalai_SyntaxIs(self, kSC__khalai_Reversed));
	return self | (kSC__khalai_Positive + rev);
}

NilCheckMode SC_khalai_Negate(NilCheckMode self) {
	NilCheckMode p = (self & kSC__khalai_Positive) >> 1;
	p = (p | ((self & kSC__khalai_Negative) << 1));
	return p | (self & (~kSC__khalai_Active));
}

NilCheckMode SC_khalai_Normal(NilCheckMode self) {
	if (SC_khalai_SyntaxIs(self, kSC__khalai_Reversed)) {
		return SC_khalai_Negate(self) & (~kSC__khalai_Reversed);
	}
	return self;
}

bool SC_khalai_SyntaxIs(NilCheckMode self, NilCheckMode other) {
	return ((bool)(self & other));
}

NilCheckMode SC_khalai_SyntaxIsSet(NilCheckMode self, NilCheckMode other, bool Value) {
	if (Value) {
		return self | other;
	}
	 else {
		return self & (~other);
	}
}


bool SC_NilReason_SyntaxIs(NilReason self, NilReason x) {
	return x == self;
}

int SC_NilReason__Init_() {
	{
		JB_SetRef(SC__NilReason_values, (JB_Array_Constructor0(nil)));
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[624]);
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[625]);
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[1166]);
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[1369]);
		JB_Array_SyntaxAppend(SC__NilReason_values, JB_LUB[1127]);
	}
	;
	return 0;
}

int SC_NilReason__InitCode_() {
	return 0;
}


uint SC_NRD_DepthOfVars(NilRecord self) {
	if (self) {
		return ((uint)JB_u64_Log2(self)) >> 1;
	}
	return 0;
}

void ndb5(NilRecord self) {
	//visible;
	uint n = SC_NRD_DepthOfVars(self) + 1;
	{
		uint i = 0;
		while (i < n) {
			SCDecl* D = JB_Incr(SC__nil_T.Decls[i]);
			if (D) {
				JB_String* Name = JB_Incr(D->Name);
				JB_String* V = JB_Incr(SC_NilState_RawName(SC_NRD_SyntaxAccess(self, i)));
				FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
				JB_FS_AppendString(_fsf0, Name);
				JB_Decr(Name);
				JB_FS_AppendString(_fsf0, JB_LUB[561]);
				JB_FS_AppendString(_fsf0, V);
				JB_Decr(V);
				JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
				JB_Decr(_fsf0);
				JB_PrintLine(_tmPf2);
				JB_Decr(_tmPf2);
			}
			JB_Decr(D);
			i++;
		};
	};
}

NilState SC_NRD_SyntaxAccess(NilRecord self, int item) {
	item = (item << 1);
	return (self >> item) & kSC__NilState_Either;
}


JB_String* SC_NilState_RawName(NilState self) {
	if (SC_NilState_SyntaxIs(self, kSC__NilState_Either)) {
		return JB_LUB[1855];
	}
	if (SC_NilState_SyntaxIs(self, kSC__NilState_Nilish)) {
		return JB_LUB[1811];
	}
	if (SC_NilState_SyntaxIs(self, kSC__NilState_Realish)) {
		return JB_LUB[1891];
	}
	return JB_LUB[1767];
}

NilState SC_NilState_StatedReal(NilState self) {
	if ((self & kSC__NilState_Optional) == kSC__NilState_Real) {
		return kSC__NilState_Real;
	}
	return 0;
}

bool SC_NilState_SyntaxIs(NilState self, NilState type) {
	return (self & type) == type;
}



bool SC_OpMode_SyntaxIs(OpMode self, OpMode x) {
	return (self & x) == x;
}



bool JB_ProcessMode_SyntaxIs(ProcessMode self, ProcessMode M) {
	return ((bool)(self & M));
}


int SC_SCBlockage_BlockCombine(SCBlockage self, SCBlockage B) {
	if (B == self) {
		return self;
	}
	if (SC_SCBlockage_SyntaxIs(self, kSC__SCBlockage_Return)) {
		return B;
	}
	if (SC_SCBlockage_SyntaxIs(B, kSC__SCBlockage_Return)) {
		return self;
	}
	debugger;
	//would this even happen ever???;
	return kSC__SCBlockage_Continue;
}

bool SC_SCBlockage_SyntaxIs(SCBlockage self, SCBlockage b) {
	return self == b;
}


SCDeclInfo SC_SCDeclInfo_Set(SCDeclInfo self, SCDeclInfo d, bool b) {
	if (b) {
		return self | d;
	}
	return self & (~d);
}


bool SC_SCNodeFindMode_SyntaxIs(SCNodeFindMode self, SCNodeFindMode m) {
	return ((bool)(self & m));
}



bool SC_SCNodeType_HasPtrs(SCNodeType self) {
	return ((bool)(self & 1));
}

bool SC_SCNodeType_SyntaxIs(SCNodeType self, SCNodeType d) {
	return self == d;
}



void JB_Syx_ExportAddrSet(Syntax self, FP_fpMsgRender Value) {
	JB_Syx_Obj(self)->ExportAddr = Value;
}

FP_fpMsgRender JB_Syx_ExportAddr(Syntax self) {
	return JB_Syx_Obj(self)->ExportAddr;
}

bool JB_Syx_IsString(Syntax self) {
	return (self >= JB_SyxSStr) and (self <= JB_SyxStr);
}

bool JB_Syx_ListViewable(Syntax self) {
	return JB_Syx_Translateable(self) or JB_Syx_IsString(self);
}

JB_String* JB_Syx_LongName(Syntax self) {
	if (self) {
		SyntaxObj* o = JB_Syx_Obj(self);
		if (o) {
			return o->LongName;
		}
	}
	return JB_LUB[1543];
}

Message* JB_Syx_Msg(Syntax self, JB_String* name) {
	return JB_Msg_ConstructorRange(nil, nil, self, JB__Tk_Using.Position, name, JB_Str_Length(name));
}

Message* JB_Syx_IntMsg(Syntax self, int64 name) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(name, nil));
	Message* _tmPf1 = JB_Incr(JB_Syx_Msg(self, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Syx_Name(Syntax self) {
	if (self) {
		SyntaxObj* o = JB_Syx_Obj(self);
		if (o) {
			return o->Name;
		}
	}
	return JB_LUB[1543];
}

bool JB_Syx_NoChildren(Syntax self) {
	return (self >= JB_SyxCnj) and (self <= JB_SyxBin);
}

SyntaxObj* JB_Syx_Obj(Syntax self) {
	return JB__FuncArray_[((int)self)];
}

Message* JB_Syx_OperatorPlus(Syntax self, JB_String* m) {
	return JB_Syx_Msg(self, m);
}

Message* JB_Syx_PlusNum(Syntax self, int m) {
	return JB_Syx_Msg(self, JB_int_RenderFS(m, nil));
}

FP_fpMsgRender JB_Syx_RenderAddr(Syntax self) {
	return JB_Syx_Obj(self)->RenderAddr;
}

bool JB_Syx_Translateable(Syntax self) {
	return (self <= JB_SyxThg) and (self >= JB_SyxTmp);
}

Syntax JB_Syx__Func(JB_String* name, Message* where) {
	//visible;
	if (name != nil) {
		SyntaxObj* obj = JB_Incr(((SyntaxObj*)JB_Dict_ValueLower(JB__SyxDict_, name)));
		if ((!obj)) {
			JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1348], name));
			JB_Msg_SyntaxExpect(where, _tmPf0);
			JB_Decr(_tmPf0);
			JB_Decr(obj);
			return nil;
		}
		Syntax _tmPf1 = obj->ID;
		JB_Decr(obj);
		return _tmPf1;
	}
	return nil;
}

int JB_Syx__Init_() {
	{
		JB__Syx_CurrFuncID = 0;
		JB__Syx_MaxFuncID = 0;
	}
	;
	return 0;
}

int JB_Syx__InitCode_() {
	return 0;
}

Syntax JB_Syx__StdNew(FP_fpMsgRender msg, JB_String* name, JB_String* LongName) {
	int ID = JB__Syx_CurrFuncID++;
	SyntaxObj* result = JB_Incr(JB_Fn_Constructor(nil, msg, name, ID));
	JB__Syx_MaxFuncID = ID;
	(JB_Dict_ValueSet(JB__SyxDict_, name, result));
	JB_SetRef(JB__FuncArray_[ID], result);
	if (JB_Str_Exists(LongName)) {
		(JB_Dict_ValueSet(JB__SyxDict_, LongName, result));
		JB_SetRef(result->LongName, LongName);
	}
	 else {
		JB_SetRef(result->LongName, name);
	}
	JB_Decr(result);
	return ((Syntax)ID);
}








uint SC_xC2xB5Param_BitSize(ASMParam self) {
	return self & 31;
}

bool SC_xC2xB5Param_IsNumber(ASMParam self) {
	return ((bool)(self & 64));
}

bool SC_xC2xB5Param_IsReg(ASMParam self) {
	return (!SC_xC2xB5Param_IsNumber(self));
}


ASM SC_ASM_BFLD_downSet(ASM self, uint Value) {
	return self | ((Value << 26) >> 23);
}

ASM SC_ASM_BFLD_signSet(ASM self, uint Value) {
	return self | ((Value << 29) >> 29);
}

ASM SC_ASM_BFLD_upSet(ASM self, uint Value) {
	return self | ((Value << 26) >> 17);
}

ASM SC_ASM_Bra_c1Set(ASM self, uint Value) {
	return self | ((Value << 30) >> 12);
}

ASM SC_ASM_Bra_jmpSet(ASM self, uint Value) {
	return self | ((Value << 14) >> 14);
}

ASM SC_ASM_Cmp_CmpSet(ASM self, uint Value) {
	return self | ((Value << 28) >> 17);
}

ASM SC_ASM_Cmp_LSet(ASM self, uint Value) {
	return self | ((Value << 21) >> 21);
}

ASM SC_ASM_CmpEq_bytesSet(ASM self, uint Value) {
	return self | ((Value << 30) >> 17);
}

ASM SC_ASM_CmpEq_JmpSet(ASM self, uint Value) {
	return self | ((Value << 19) >> 19);
}

ASM SC_ASM_CNTC_cnstSet(ASM self, uint Value) {
	return self | ((Value << 24) >> 12);
}

ASM SC_ASM_CNTC_LSet(ASM self, uint Value) {
	return self | ((Value << 22) >> 22);
}

ASM SC_ASM_CNTC_sizeSet(ASM self, uint Value) {
	return self | ((Value << 30) >> 20);
}

ASM SC_ASM_CNTR_incrSet(ASM self, uint Value) {
	return self | ((Value << 29) >> 17);
}

ASM SC_ASM_CNTR_LSet(ASM self, uint Value) {
	return self | ((Value << 22) >> 22);
}

ASM SC_ASM_CNTR_sizeSet(ASM self, uint Value) {
	return self | ((Value << 30) >> 20);
}

ASM SC_ASM_Const_LSet(ASM self, uint Value) {
	return self | ((Value << 18) >> 18);
}

ASM SC_ASM_Const_rotSet(ASM self, uint Value) {
	return self | ((Value << 26) >> 12);
}

ASM SC_ASM_Func_JUMPSet(ASM self, uint Value) {
	return self | ((Value << 9) >> 9);
}

ASM SC_ASM_Func_ModeSet(ASM self, uint Value) {
	return self | ((Value << 30) >> 7);
}

ASM SC_ASM_Mem_incrSet(ASM self, uint Value) {
	return self | ((Value << 30) >> 17);
}

ASM SC_ASM_Mem_LSet(ASM self, uint Value) {
	return self | ((Value << 19) >> 19);
}

void ASMPrint(ASM self) {
	//visible;
}

ASM SC_ASM_R1Set(ASM self, uint Value) {
	return self | ((Value << 27) >> 7);
}

ASM SC_ASM_R2Set(ASM self, uint Value) {
	return self | ((Value << 27) >> 12);
}

ASM SC_ASM_R3Set(ASM self, uint Value) {
	return self | ((Value << 27) >> 17);
}

ASM SC_ASM_R4Set(ASM self, uint Value) {
	return self | ((Value << 27) >> 22);
}

ASM SC_ASM_Setn_CondSet(ASM self, uint Value) {
	return self | ((Value << 30) >> 14);
}

ASM SC_ASM_Setn_DestSet(ASM self, uint Value) {
	return self | ((Value << 27) >> 9);
}

ASM SC_ASM_Setn_LSet(ASM self, uint Value) {
	return self | ((Value << 16) >> 16);
}

ASM SC_ASM_Setn_lenSet(ASM self, uint Value) {
	return self | ((Value << 30) >> 7);
}

ASM SC_ASM_SWAP_ASet(ASM self, uint Value) {
	return self | ((Value << 26) >> 7);
}

ASM SC_ASM_SWAP_BSet(ASM self, uint Value) {
	return self | ((Value << 26) >> 13);
}

ASM SC_ASM_SWAP_CSet(ASM self, uint Value) {
	return self | ((Value << 26) >> 19);
}

ASM SC_ASM_SWAP_DSet(ASM self, uint Value) {
	return self | ((Value << 26) >> 25);
}

ASM SC_ASM_SWAP_LSet(ASM self, uint Value) {
	return self | ((Value << 31) >> 31);
}

ASM SC_ASM_U0_LSet(ASM self, uint Value) {
	return self | ((Value << 7) >> 7);
}

ASM SC_ASM_U1_LSet(ASM self, uint Value) {
	return self | ((Value << 12) >> 12);
}

ASM SC_ASM_U2_LSet(ASM self, uint Value) {
	return self | ((Value << 17) >> 17);
}

ASM SC_ASM_U3_LSet(ASM self, uint Value) {
	return self | ((Value << 22) >> 22);
}

ASM SC_ASM_U4_LSet(ASM self, uint Value) {
	return self | ((Value << 27) >> 27);
}

void SC_ASM__Enc1() {
	IR R = ((IR){});
	R.Op = kSC__ASM_DSUB;
	R.r[0] = 3;
	R.r[1] = 2;
	R.r[2] = 1;
	R.Rest = 0;
	ASM oof = SC_IR_Encode((&R));
}

int SC_ASM__Init_() {
	{
		SC__ASM_NoisyASM = 1;
	}
	;
	return 0;
}

int SC_ASM__InitCode_() {
	return 0;
}

void SC_ASM__ListInstructions() {
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(fs, JB_LUB[1109]);
	int n = 0;
	{
		int opcode = 0;
		while (opcode < 128) {
			Instruction* inst = SC__Instruction_TypeList[opcode];
			if (((bool)inst) and ((!opcode) or ((bool)inst->OpCode))) {
				JB_FS_AppendIntegerAsText(fs, opcode, 2);
				//;
				JB_FS_AppendString(fs, JB_LUB[156]);
				JB_FS_AppendString(fs, inst->Name);
				//;
				JB_FS_AppendMultiByte(fs, ' ', 4 - JB_Str_Length(inst->Name));
				n++;
				if (n >= 7) {
					JB_FS_AppendByte(fs, '\n');
					n = 0;
				}
				 else {
					JB_FS_AppendString(fs, JB_LUB[304]);
				}
			}
			opcode++;
		};
	}
	;
	JB_Obj_PrintLine(fs);
	JB_Decr(fs);
}

bool SC_ASM__Needed() {
	SCNode* fn = JB_Incr(((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, JB_LUB[947])));
	if (fn) {
		bool _tmPf0 = ((bool)fn->MyReacher);
		JB_Decr(fn);
		return _tmPf0;
	}
	JB_Decr(fn);
	return false;
}

void SC_ASM__TestASM() {
	SC_ASM__Enc1();
	if ((!SC__Options_MakeASM)) {
		return;
	}
	JB_String* _tmPf1 = JB_Incr(JB_App__GetPref(JB_LUB[1603]));
	int64 dev = JB_Str_Int(_tmPf1);
	JB_Decr(_tmPf1);
	if (dev >= 2) {
		SC__ASM_NoisyASM = 3;
	}
	if (SC__ASM_NoisyASM >= 3) {
		SC_ASM__ListInstructions();
	}
	if (dev <= 0) {
		return;
	}
	if (true) {
		ErrorSeverity _usingf0 = JB_ErrorSeverity_SyntaxUsing(kJB__ErrorSeverity_Warning);
		Message* _tmPf2 = JB_Incr(JB_Str_Parse((JB_LUB[399]), JB_SyxArg, true));
		Message* T = JB_Incr(JB_Msg_NeedSyxName(_tmPf2, JB_SyxTmp, JB_LUB[1992]));
		if (T) {
			SC_ASM__TestASMSub(T);
		}
		JB_Decr(T);
		JB_ErrorSeverity_SyntaxUsingComplete(_usingf0);
		JB_Decr(_tmPf2);
	}
}

void SC_ASM__TestASMSub(Message* tests) {
	Message* list = JB_Msg_Last(tests, JB_SyxArg);
	Message* testname = JB_Msg_NeedSyx(tests, JB_SyxThg);
	if ((!(((bool)list) and ((bool)testname)))) {
		return;
	}
	SC_TextAssembler__Assemble(list);
	ASMFunc* fn = SC_TreeAssembler__AccessStr(testname);
	if (fn) {
		int64 ff = SC_ASMFunc2_RunArgs(SC_ASMFunc_Finish(fn), nil, nil);
	}
}



ASM JB_ASM_BFLD__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_R1Set(rz, self->r[0]);
	rz = SC_ASM_R2Set(rz, self->r[1]);
	rz = SC_ASM_BFLD_upSet(rz, self->r[2]);
	rz = SC_ASM_BFLD_downSet(rz, self->r[3]);
	rz = SC_ASM_BFLD_signSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_Bra__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_R1Set(rz, self->r[0]);
	rz = SC_ASM_Bra_c1Set(rz, self->r[1]);
	rz = SC_ASM_Bra_jmpSet(rz, self->r[2]);
	return rz;
}


ASM JB_ASM_CNTC__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_R1Set(rz, self->r[0]);
	rz = SC_ASM_CNTC_cnstSet(rz, self->r[1]);
	rz = SC_ASM_CNTC_sizeSet(rz, self->r[2]);
	rz = SC_ASM_CNTC_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_CNTR__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_R1Set(rz, self->r[0]);
	rz = SC_ASM_R2Set(rz, self->r[1]);
	rz = SC_ASM_CNTR_incrSet(rz, self->r[2]);
	rz = SC_ASM_CNTR_sizeSet(rz, self->r[3]);
	rz = SC_ASM_CNTR_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_Cmp__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_R1Set(rz, self->r[0]);
	rz = SC_ASM_R2Set(rz, self->r[1]);
	rz = SC_ASM_Cmp_CmpSet(rz, self->r[2]);
	rz = SC_ASM_Cmp_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_CmpEq__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_R1Set(rz, self->r[0]);
	rz = SC_ASM_R2Set(rz, self->r[1]);
	rz = SC_ASM_CmpEq_bytesSet(rz, self->r[2]);
	rz = SC_ASM_CmpEq_JmpSet(rz, self->r[3]);
	return rz;
}


ASM JB_ASM_Const__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_R1Set(rz, self->r[0]);
	rz = SC_ASM_Const_rotSet(rz, self->r[1]);
	rz = SC_ASM_Const_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_Func__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_Func_ModeSet(rz, self->r[0]);
	rz = SC_ASM_Func_JUMPSet(rz, self->r[1]);
	return rz;
}


ASM JB_ASM_Mem__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_R1Set(rz, self->r[0]);
	rz = SC_ASM_R2Set(rz, self->r[1]);
	rz = SC_ASM_Mem_incrSet(rz, self->r[2]);
	rz = SC_ASM_Mem_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_SWAP__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_SWAP_ASet(rz, self->r[0]);
	rz = SC_ASM_SWAP_BSet(rz, self->r[1]);
	rz = SC_ASM_SWAP_CSet(rz, self->r[2]);
	rz = SC_ASM_SWAP_DSet(rz, self->r[3]);
	rz = SC_ASM_SWAP_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_Setn__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_Setn_lenSet(rz, self->r[0]);
	rz = SC_ASM_Setn_DestSet(rz, self->r[1]);
	rz = SC_ASM_Setn_CondSet(rz, self->r[2]);
	rz = SC_ASM_Setn_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_U0__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_U0_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_U1__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_R1Set(rz, self->r[0]);
	rz = SC_ASM_U1_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_U2__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_R1Set(rz, self->r[0]);
	rz = SC_ASM_R2Set(rz, self->r[1]);
	rz = SC_ASM_U2_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_U3__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_R1Set(rz, self->r[0]);
	rz = SC_ASM_R2Set(rz, self->r[1]);
	rz = SC_ASM_R3Set(rz, self->r[2]);
	rz = SC_ASM_U3_LSet(rz, self->Rest);
	return rz;
}


ASM JB_ASM_U4__Encode(IR* self) {
	ASM rz = 0;
	//visible;
	rz = (self->Op << 25);
	rz = SC_ASM_R1Set(rz, self->r[0]);
	rz = SC_ASM_R2Set(rz, self->r[1]);
	rz = SC_ASM_R3Set(rz, self->r[2]);
	rz = SC_ASM_R4Set(rz, self->r[3]);
	rz = SC_ASM_U4_LSet(rz, self->Rest);
	return rz;
}































AsmReg SC_fn_asm__Default(ASMFuncState* self, Message* exp, AsmReg Reg) {
	return ((AsmReg){});
}

void SC_fn_asm__InitTable() {
	if (JB_fn_asm_table[0]) {
		return;
	}
	{
		int i = 0;
		while (i < 64) {
			if ((!(JB_fn_asm_table[i]))) {
				JB_fn_asm_table[i] = (&SC_fn_asm__Default);
			}
			i++;
		};
	};
}






void SC_flat_AddFuncParams(ASMFuncState* self, SCFunction* fn) {
	{
		Array* _LoopSrcf2 = fn->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* a = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (a == nil) {
				break;
			}
			SC_flat_AllocRegDecl(self, a->Source, a, SC_int_Reg(0));
			_if0++;
		};
	};
}

void SC_flat_AddLabel(ASMFuncState* self, Message* ch) {
	Dictionary* T = ({
		Dictionary* _X = SC__TextAssembler_LabelsToDo;
		if ((!_X)) {
			_X = JB_Dict_Constructor(nil);
			JB_SetRef(SC__TextAssembler_LabelsToDo, _X);
		}
		 _X;
	});
	byte _tmPf0 = (++self->LabelCount);
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(ch, JB_LUB[1318]);
		return;
	}
	SC_flat_Last(self)->Label = _tmPf0;
	if ((((DTWrap*)JB_Dict_ValueLower(T, ch->Name)))) {
		JB_Msg_SyntaxExpect(ch, JB_LUB[986]);
		return;
	}
	//debugger;
	(JB_Dict_ValueLowerSet(T, ch->Name, JB_Wrap_ConstructorInt(nil, self->Out->Length)));
}

AsmReg SC_flat_AllocRegDecl(ASMFuncState* self, Message* exp, SCDecl* decl, AsmReg R) {
	SC_flat_NeedSomewhere(self, exp, (&decl->DReg), SC_Decl_RegType(decl));
	return decl->DReg;
}

void SC_flat_CloseVars(ASMFuncState* self, uint64 Old) {
	if ((!(((bool)(Old & 1))))) {
		debugger;
	}
	self->UsedRegs = Old;
}

void SC_flat_Destructor(ASMFuncState* self) {
	JB_Clear(self->Out);
}

AsmReg SC_flat_DoFunc(ASMFuncState* self, Message* prms, AsmReg dest) {
	SCFunction* fn = SC_Msg_AsFunc(prms);
	if ((!fn)) {
		debugger;
		return ((AsmReg){});
	}
	SC_flat_NeedSomewhere(self, prms, (&dest), SC_Func_RegType(fn));
	SC_flat_AddASM(self, ((Message*)JB_Ring_Parent(prms)), kSC__ASM_FNC, 0, 0, 0, 0)->Rest = fn->TableId;
	uint64 OV = SC_flat_OpenVars(self);
	int64 Bits = (dest.Reg << 25) | (JB_u64_Log2(OV) << 20);
	int Remain = 20;
	Message* p = ((Message*)JB_Ring_First(prms));
	while (true) {
		Message* _tmPf0 = SC_flat_FuncPrms(self, p, Remain, Bits);
		if ((!_tmPf0)) {
			break;
		}
		p = _tmPf0;
		Remain = 31;
		Bits = 0;
	};
	SC_flat_CloseVars(self, OV);
	return dest;
}

AsmReg SC_flat_DoRels(ASMFuncState* self, Message* L, AsmReg dest) {
	Message* op = ((Message*)JB_Ring_NextSib(L));
	uint64 OV = SC_flat_OpenVars(self);
	AsmReg mL = SC_flat_RegSaved(self, L);
	AsmReg mR = SC_flat_Reg(self, ((Message*)JB_Ring_NextSib(op)), SC_int_Reg(0));
	SC_flat_CloseVars(self, OV);
	if ((!((bool)(mL.Reg | mR.Reg)))) {
		return ((AsmReg){});
	}
	SC_flat_NeedSomewhere(self, op, (&dest), mL.AType);
	SCOperator* scop = ((SCOperator*)op->Obj);
	if (scop) {
		fn_OpASM fn = scop->ASM;
		if (fn) {
			return (fn)(self, dest, mL, mR, op);
		}
	}
	if (true) {
		JB_Msg_SyntaxExpect(op, JB_LUB[1064]);
	}
	return ((AsmReg){});
}

IR* SC_flat_FindLabel(ASMFuncState* self, IR* dbg) {
	int num = dbg->Rest;
	{
		ASMFunc* _LoopSrcf2 = self->Out;
		int _CurrInstf0 = 0;
		IR* _Addrf1 = ((IR*)JB_Mrap_Ptr(SC__flat_JSMSpace)) + _LoopSrcf2->Start;
		while (_CurrInstf0 < _LoopSrcf2->Length) {
			IR* A = _Addrf1 + _CurrInstf0;
			if (A->Label == num) {
				return A;
			}
			_CurrInstf0++;
		};
	}
	;
	if (true) {
		SC_IR_SyntaxExpect(dbg, JB_LUB[1075]);
	}
	return nil;
}

void SC_flat_FinishASM(ASMFuncState* self) {
	self->Out->Length = (self->Out->Length + self->Written);
	if ((!SC_IR_OperatorIsa(SC_flat_Last(self), kSC__ASM_RET))) {
		SC_flat_AddASM(self, self->fn->Source, kSC__ASM_RET, 0, 0, 0, 0);
	}
}

Message* SC_flat_FuncPrms(ASMFuncState* self, Message* pr, int Remain, uint Bits) {
	while (pr) {
		AsmReg reg = SC_flat_RegSaved(self, pr);
		pr = ((Message*)JB_Ring_NextSib(pr));
		Remain = (Remain - 5);
		Bits = (Bits | (reg.Reg << Remain));
		if (Remain < 5) {
			break;
		}
	};
	SC_flat_AddExtended(self, pr, Bits);
	return pr;
}

uint SC_flat_GetLabelJump(ASMFuncState* self, Message* P) {
	DTWrap* _tmPf0 = ((DTWrap*)JB_Dict_ValueLower(SC__TextAssembler_LabelsToDo, P->Name));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(P, JB_LUB[987]);
		return 0;
	}
	return ((uint)JB_Wrap_First((_tmPf0)));
}

void SC_flat_InitState(ASMFuncState* self, SCFunction* fn) {
	SC_flat_TotalInit(self);
	JB_SetRef(self->Out, SC_ASMFunc_Constructor(nil, fn));
	self->Out->Start = self->Written;
	self->Out->Length = (-self->Written);
	self->LabelCount = 0;
	self->fn = fn;
	self->OK = true;
	self->UsedRegs = 1;
	SC_flat_AddFuncParams(self, fn);
}

IR* SC_flat_Last(ASMFuncState* self) {
	return self->Start + (self->Written - 1);
}

bool SC_flat_LoadLabelJumps(ASMFuncState* self) {
	if ((!SC__TextAssembler_LabelsToDo)) {
		return nil;
	}
	{
		ASMFunc* _LoopSrcf2 = self->Out;
		int _CurrInstf0 = 0;
		IR* _Addrf1 = ((IR*)JB_Mrap_Ptr(SC__flat_JSMSpace)) + _LoopSrcf2->Start;
		while (_CurrInstf0 < _LoopSrcf2->Length) {
			IR* A = _Addrf1 + _CurrInstf0;
			if (A->Label == 255) {
				IR* Found = SC_flat_FindLabel(self, A);
				if ((!Found)) {
					debugger;
					SC_flat_FindLabel(self, A);
					return false;
				}
				A->Rest = (Found - A);
			}
			_CurrInstf0++;
		};
	}
	;
	return true;
}

Message* SC_flat_LoadTitle(ASMFuncState* self, Message* m) {
	Message* rz = nil;
	Message* name = JB_Msg_NeedSyx(m, JB_SyxThg);
	if ((!name)) {
		return nil;
	}
	JB_SetRef(self->fn->ExportName, name->Name);
	JB_SetRef(self->fn->Name, name->Name);
	Message* bra = JB_Msg_NextOf(name, JB_SyxBra);
	if ((!bra)) {
		return nil;
	}
	int64 n = JB_Msg_Int(JB_Msg_NeedSyx(bra, JB_SyxNum), 0);
	if ((!((n >= 0) and (n <= 10)))) {
		JB_Msg_SyntaxExpect(m, JB_LUB[1311]);
		return nil;
	}
	{
		int64 _Valuef1 = 0;
		while (_Valuef1 < n) {
			JB_Array_SyntaxAppend(self->fn->Args, JB_TypeInt64->TypeNormal);
			_Valuef1++;
		};
	}
	;
	rz = JB_Msg_NextOf(bra, JB_SyxArg);
	JB_Msg_ExpectLast(rz, JB_LUB[0]);
	return rz;
}

void SC_flat_NeedSomewhere(ASMFuncState* self, Message* err, AsmReg* dest, DataTypeCode T) {
	if (dest->Reg) {
		return;
	}
	uint64 B = JB_uint64_LowestBit(((~self->UsedRegs)));
	if ((!B)) {
		JB_Msg_SyntaxExpect(err, JB_LUB[1070]);
	}
	self->UsedRegs = (self->UsedRegs | B);
	dest->Reg = JB_u64_Log2(B);
	dest->AType = T;
}

uint64 SC_flat_OpenVars(ASMFuncState* self) {
	uint64 rz = 0;
	rz = self->UsedRegs;
	if ((!(((bool)(rz & 1))))) {
		debugger;
	}
	return rz;
}

IR* SC_flat_RequestOp(ASMFuncState* self) {
	if (self->Written < self->MaxLength) {
		return self->Start + self->Written++;
	}
	if (self->OK) {
		if (true) {
			JB_Str_SyntaxExpect(JB_LUB[613]);
		}
		self->OK = false;
	}
	return (&SC__flat_Dummy);
}

bool SC_flat_SetConst(ASMFuncState* self, Message* List, Message* Orig) {
	Message* RegMsg = JB_Msg_NeedSyx(List, JB_SyxThg);
	if ((!RegMsg)) {
		return nil;
	}
	uint Reg = SC_Msg_Reg(RegMsg);
	Message* _tmPf0 = ((Message*)JB_Ring_NextSib(RegMsg));
	if ((!_tmPf0)) {
		return nil;
	}
	uint64 Value = SC_Msg_ASMConst(_tmPf0);
	if ((!SC_flat_TrySmallConst(self, Reg, Value, Orig))) {
		JB_DoAt(1);
		SC_flat_AddASM(self, Orig, kSC__ASM_SETN, Reg, 0, 0, 0);
	}
	return true;
}

bool SC_flat_TextFuncSub(ASMFuncState* self, Message* m) {
	{
		Message* _LoopSrcf2 = SC_flat_LoadTitle(self, m);
		Message* ch = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(ch));
			if (JB_Msg_EqualsSyx(ch, JB_SyxName, false)) {
				SC_flat_AddLabel(self, ch);
			}
			 else {
				SC_flat_TextInstruction(self, ch);
			}
			ch = _Nf1;
		};
		;
	}
	;
	return SC_flat_LoadLabelJumps(self);
}

void SC_flat_TextInstruction(ASMFuncState* self, Message* m) {
	if ((!SC_flat_TextOp(self, m))) {
		JB_DoAt(1);
		SC_flat_TextOp(self, m);
	}
}

bool SC_flat_TextOp(ASMFuncState* self, Message* m) {
	if (JB_Msg_EqualsSyx(m, JB_SyxRel, false)) {
		Message* Dest = JB_Msg_NeedSyx(m, JB_SyxThg);
		if ((!Dest)) {
			return nil;
		}
		Message* funcMsg = SC_Msg_GetASMFunc(Dest);
		if ((!funcMsg)) {
			return nil;
		}
	}
	if ((!JB_Msg_Expect(m, JB_SyxTmp, nil))) {
		return nil;
	}
	Instruction* op = SC_Instruction__SyntaxAccessWithMsg(m);
	if ((!op)) {
		return nil;
	}
	Message* list = ((Message*)JB_Ring_First(m));
	if ((!((list == nil) or ((JB_Msg_EqualsSyx(list, JB_SyxList, false)) or (JB_Msg_EqualsSyx(list, JB_SyxBra, false)))))) {
		JB_Msg_SyntaxExpect(m, nil);
		return nil;
	}
	if (SC_Instruction_IsSetConst(op)) {
		return SC_flat_SetConst(self, list, m);
	}
	IR* A = SC_flat_RequestOp2(self, op->OpCode);
	int write = 0;
	{
		Message* p = ((Message*)JB_Ring_First(list));
		while (p) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(p));
			if ((!JB_Msg_EqualsSyx(p, JB_SyxName, false))) {
				SC_IR_AddRegParam(A, p, write);
			}
			 else {
				A->Rest = SC_flat_GetLabelJump(self, p);
			}
			if ((++write) > op->PCount) {
				JB_Msg_SyntaxExpect(list, JB_LUB[1321]);
				return nil;
			}
			p = _Nf2;
		};
		;
	}
	;
	bool _tmPf0 = (op->PCount == write);
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(list, JB_LUB[1309]);
		return nil;
	}
	return _tmPf0;
}

void SC_flat_TotalInit(ASMFuncState* self) {
	MWrap* j = SC__flat_JSMSpace;
	(JB_Mrap_CapacitySet(j, 1048576));
	self->MaxLength = j->Capacity;
	self->Start = ((IR*)JB_Mrap_Ptr(j));
	self->Written = 0;
}

bool SC_flat_TrySmallConst(ASMFuncState* self, uint reg, int64 Value, Message* where) {
	int set1_test = (((int)Value) << 12) >> 12;
	if (set1_test == Value) {
		SC_flat_AddASM(self, where, kSC__ASM_SET1, reg, 0, 0, 0)->Rest = set1_test;
		return true;
	}
	ivec2 R = SC_uint64_LongestBitStretch(((~((uint64)Value))));
	if (R[0] >= 50) {
		Value = JB_int64_OperatorRotl(Value, 63 - R[1]);
		SC_flat_AddASM(self, where, kSC__ASM_SETK, reg, R[1], 0, 0)->Rest = ((int)Value);
		return true;
	}
	return false;
}

AsmReg SC_flat_Reg(ASMFuncState* self, Message* exp, AsmReg reg) {
	return (SC_Msg_ASMFunc(exp))(self, exp, reg);
}

AsmReg SC_flat_RegSaved(ASMFuncState* self, Message* exp) {
	AsmReg rz = ((AsmReg){});
	rz = SC_flat_Reg(self, exp, SC_int_Reg(0));
	self->UsedRegs = (self->UsedRegs | (1 << rz.Reg));
	return rz;
}

int SC_flat__Init_() {
	{
		SC__flat_Dummy = ((IR){});
		MWrap* _tmPf0 = JB_Incr(JB_Mrap__Object(0, 16));
		JB_SetRef(SC__flat_JSMSpace, _tmPf0);
		JB_Decr(_tmPf0);
	}
	;
	return 0;
}

int SC_flat__InitCode_() {
	return 0;
}



void SC_nil_BecomeRealSub(ArchonPurger* self, SCDecl* V) {
	V->NilDeclared = kSC__NilState_Real;
	if (SC_Decl_SyntaxIs(V, kSC__SCDeclInfo_Self)) {
		self->FnAbleToNilCheck = false;
	}
	if (SC_nil_NestDepth(self) > 0) {
		self->Realnesses = (self->Realnesses & (~(kSC__NilState_Nilish << (V->NilReg << 1))));
	}
}

NilRecord SC_nil_BranchEnter(ArchonPurger* self, Message* where) {
	NilRecord rz = 0;
	if (self->Neel >= self->RowEnd) {
		JB_Msg_SyntaxExpect(where, JB_LUB[675]);
		return 0;
	}
	rz = (*(self->Neel++));
	(*self->Neel) = rz;
	return rz;
}

NilState SC_nil_BranchExit(ArchonPurger* self, NilRecord A) {
	NilRecord B = SC_nil__Value();
	(*self->Neel--) = 0;
	SC_nil_SetAllNil(self, A | B);
	if (SC_nil_NestDepth(self) == 0) {
		self->Realnesses = -1;
	}
	return kSC__NilState_Real;
}

NilRecord SC_nil_BranchSwap(ArchonPurger* self, NilRecord A) {
	NilRecord rz = 0;
	rz = SC_nil__Value();
	SC_nil_SetAllNil(self, A);
	return rz;
}

void SC_nil_CheckNilCheck(ArchonPurger* self, SCFunction* f) {
	self->FnAbleToNilCheck = false;
	JB_SetRef(self->Return, f->ReturnType);
	SCDecl* s = ((SCDecl*)JB_Array_First(f->Args));
	if (s) {
		if ((SC_NilState_SyntaxIs(s->NilDeclared, kSC__NilState_Nilish)) and (SC_Decl_TypeSuffers(s) and SC_Decl_CanNilCheck(self->Return))) {
			self->FnAbleToNilCheck = true;
		}
	}
}

NilState SC_nil_Declare(ArchonPurger* self, SCDecl* D, NilState nd) {
	NilState rz = 0;
	rz = SC_nil_DeclareSub(self, D, nd);
	return rz;
}

NilState SC_nil_DeclareSub(ArchonPurger* self, SCDecl* D, NilState nd) {
	nd = (nd & kSC__NilState_Either);
	uint N = SC_NRD_DepthOfVars(SC_nil_Value(self)) + 1;
	if (N >= 31) {
		SC_SCObject_Fail(D, JB_LUB[1312]);
		return 0;
	}
	self->Decls[N] = D;
	D->NilReg = (N * SC_Decl_TypeSuffers(D));
	D->DReg.Reg = N;
	D->NilAllocDepth = SC_nil_NestDepth(self);
	NilRecorder* P = ((NilRecorder*)(self->Neel));
	(SC_NRC_SyntaxCallSet((P), N, nd));
	return nd;
}

void SC_nil_Destructor(ArchonPurger* self) {
	JB_Clear(self->Return);
}

void SC_nil_FinishNil(ArchonPurger* self, SCFunction* f) {
	SCDecl* r = f->ReturnType;
	if (r) {
		r->NilDeclared = (r->NilDeclared | kSC__NilState_Stated);
	}
	{
		Array* _LoopSrcf2 = f->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* a = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (a == nil) {
				break;
			}
			a->NilDeclared = (a->NilDeclared | kSC__NilState_Stated);
			_if0++;
		};
	};
}

int SC_nil_NestDepth(ArchonPurger* self) {
	return ((int)(self->Neel - (&self->Rows[0])));
}

NilState SC_nil_Self(ArchonPurger* self) {
	return SC_NRD_SyntaxAccess((SC_nil_Value(self)), 1);
}

Message* SC_nil_StartNil(ArchonPurger* self, SCFunction* f) {
	if ((!SC_Func_CanNil(f))) {
		return nil;
	}
	JB_SetRef(SC__Func_CurrFunc, f);
	self->Rows[0] = kSC__NilState_Basic;
	self->Neel = (&self->Rows[0]);
	self->RowEnd = (self->Neel + 63);
	self->Realnesses = -1;
	SC__nil_Loops = ((LoopInfo){});
	self->AnyReturns = false;
	self->RootReturned = false;
	SC_nil_CheckNilCheck(self, f);
	{
		Array* _LoopSrcf2 = f->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* d = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (d == nil) {
				break;
			}
			SC_nil_DeclareSub(self, d, d->NilDeclared);
			_if0++;
		};
	}
	;
	SCDecl* r = f->ReturnType;
	if (r) {
		if ((!SC_Decl_NilStated(r))) {
			r->NilDeclared = 0;
		}
	}
	return SC_Func_SourceArg(f);
}

NilState SC_nil__Access(Message* msg, NilCheckMode Test) {
	return SC_nil__UseChildAsReal(msg, Test, kSC__NilReason_Accessing);
}

NilState SC_nil__arel(Message* msg, NilCheckMode Test) {
	NilState rz = 0;
	Message* ch = ((Message*)JB_Ring_First(msg));
	if (ch) {
		rz = SC_nil__Jump(ch, Test);
		byte b = JB_Str_First(msg->Name);
		if (b == '!') {
			rz = (rz & (~kSC__NilState_Nilish));
			rz = (rz | kSC__NilState_Realish);
		}
	}
	return rz;
}

NilState SC_nil__Argument(Message* msg, NilCheckMode Test) {
	NilState rz = 0;
	uint v = SC_NRD_DepthOfVars(SC_nil__Value()) + 1;
	{
		Message* s = ((Message*)JB_Ring_First(msg));
		while (s) {
			NilCheckMode t = Test & (-JB_Tree_IsLast(s));
			NilState prev = rz;
			rz = SC_nil__Jump(s, t | kSC__khalai_Disappears);
			if (SC_NilState_SyntaxIs(prev, kSC__NilState_Borked)) {
				JB__Err_AutoPrint = SC__nil_OldPrint;
				if (JB_Rec_OK(JB_StdErr)) {
					JB_Msg_SyntaxExpect(s, JB_LUB[673]);
					return 0;
				}
				JB_FreeIfDead(JB_Rec_Pop(JB_StdErr));
			}
			if (SC_NilState_SyntaxIs(rz, kSC__NilState_Killer)) {
				break;
			}
			s = ((Message*)JB_Ring_NextSib(s));
		};
		;
	}
	;
	int64 Allowed = (((uint64)1) << (v << 1)) - ((uint64)1);
	SC_nil_SetAllNil((&SC__nil_T), SC_nil__Value() & Allowed);
	return rz;
}

NilState SC_nil__BecomeReal(SCDecl* sent, Message* where, NilReason reason, SCDecl* recv, SCFunction* To) {
	NilState Curr = SC_Decl_NilCurr(sent);
	if (Curr == kSC__NilState_Realish) {
		return Curr;
	}
	return SC_nil__BecomeRealSub(sent, where, reason, recv, To, Curr);
}

NilState SC_nil__BecomeRealSub(SCDecl* sent, Message* where, NilReason reason, SCDecl* recv, SCFunction* To, NilState curr) {
	if ((curr == kSC__NilState_Either) and SC_Decl_IsUnknownParam(sent)) {
		SC_nil_BecomeRealSub((&SC__nil_T), sent);
		return SC_nil_SetNilness((&SC__nil_T), sent, kSC__NilState_Real);
	}
	if (((bool)recv) and (!SC_Decl_TypeSuffers(recv))) {
		return kSC__NilState_Real;
	}
	return SC_nil__FailedReal(To, where, reason, curr);
}

NilState SC_nil__BooleanLogic(Message* msg, NilCheckMode Test) {
	Message* AA = ((Message*)JB_Ring_First(msg));
	Message* BB = ((Message*)JB_Ring_Last(msg));
	bool IsAnd = SC_khalai_SyntaxIs(Test, kSC__khalai_And);
	Test = (SC_khalai_SyntaxIsSet(Test, kSC__khalai_And, false));
	if (IsAnd == (SC_khalai_SyntaxIs(Test, kSC__khalai_Positive))) {
		NilState NC = SC_nil__Jump(AA, Test);
		NC = (NC | SC_nil__Jump(BB, Test));
		return kSC__NilState_Real | (NC & kSC__NilState_FnBecomesNilCh);
	}
	NilRecord Orig = SC_nil_BranchEnter((&SC__nil_T), AA);
	if ((!Orig)) {
		return 0;
	}
	//"test A+";
	SC_nil__Jump(AA, Test);
	NilRecord First = SC_nil_BranchSwap((&SC__nil_T), Orig);
	//"test A-B+";
	SC_nil__Jump(AA, SC_khalai_Negate(Test));
	SC_nil__Jump(BB, Test);
	return SC_nil_BranchExit((&SC__nil_T), First);
}

NilState SC_nil__Bracket(Message* msg, NilCheckMode Test) {
	if (JB_Msg_Length(msg)) {
		Test = (Test | kSC__khalai_Soft);
	}
	return SC_nil__Jump((((Message*)JB_Ring_First(msg))), Test);
}

NilState SC_nil__Brel(Message* msg, NilCheckMode Test) {
	byte b = JB_Str_First(msg->Name);
	if (b == '*') {
		return SC_nil__UseChildAsReal(msg, Test, kSC__NilReason_Accessing);
	}
	Message* ch = (((Message*)JB_Ring_First(msg)));
	if ((b == '-') or (b == '+')) {
		return SC_nil__Jump(ch, Test);
	}
	if (b == '!') {
		return SC_nil__Not(ch, Test);
	}
	SC_nil__Jump(ch, Test);
	return kSC__NilState_Real;
}

NilState SC_nil__Char(Message* msg, NilCheckMode Test) {
	return SC_nil__RealBool(SC_Str_Isnull(msg->Name));
}

NilState SC_nil__CompareObjs(Message* ll, Message* rr, NilCheckMode test, SCOperator* scop) {
	int LNil = SC_Msg_IsNowNil(ll);
	int RNil = SC_Msg_IsNowNil(rr);
	if ((!LNil) and (!RNil)) {
		return SC_nil__SuperSmartMagicCompare(ll, rr, test, scop);
	}
	if (((bool)LNil) and ((bool)RNil)) {
		SCDecl* lld = SC_Msg_FastDecl(ll);
		if (lld->NilAllocDepth >= SC__nil_Loops.NestDepth) {
			return SC_Msg_RedundantVar(ll, lld, test);
		}
		if ((LNil + RNil) != 3) {
			return kSC__NilState_Real;
		}
	}
	 else if (2 == (LNil + RNil)) {
		SC_nil__Jump(ll, 0);
		SC_nil__Jump(rr, 0);
		return kSC__NilState_Real;
	}
	if (SC_Opp_SyntaxIs(scop, kSC__OpMode_NilTest)) {
		Message* side = ((Message*)JB_Ternary(LNil == 1, rr, ll));
		if (SC_khalai_SyntaxIs(test, kSC__khalai_Active)) {
			test = (SC_khalai_SyntaxIsSet(test, kSC__khalai_Reversed, ((bool)SC_Opp_SyntaxIs(scop, kSC__OpMode_ExactlyEquals))));
			test = SC_khalai_Activate(test);
		}
		return SC_nil__Jump(side, test);
	}
	if (true) {
		JB_Msg_SyntaxExpect(((Message*)JB_Ring_NextSib(ll)), JB_LUB[1058]);
	}
	return 0;
}

NilState SC_nil__Continue(Message* msg, NilCheckMode Test) {
	SC__nil_Loops.ContRecord = (SC__nil_Loops.ContRecord | SC_nil__EndBlock());
	return 0;
}

NilState SC_nil__Debugger(Message* msg, NilCheckMode Test) {
	return 0;
}

NilState SC_nil__Declaration(Message* msg, NilCheckMode Test) {
	Message* rel = ((Message*)JB_Ring_Last(msg));
	if ((!JB_Msg_EqualsSyx(rel, JB_SyxThg, false))) {
		SCDecl* d = SC_Msg_FastDecl(((Message*)JB_Ring_First(rel)));
		NilState J = SC_nil__Jump(((Message*)JB_Ring_Last(rel)), 0);
		if (SC_Decl_IsReg(d)) {
			return SC_nil_Declare((&SC__nil_T), d, J);
		}
	}
	return 0;
}

NilState SC_nil__DetectStillChecks(Message* first) {
	NilState rz = 0;
	if ((!first)) {
		return 0;
	}
	rz = SC_nil__Jump(first, 0);
	if ((!SC__nil_T.FnAbleToNilCheck) or (SC_NilState_SyntaxIs(rz, kSC__NilState_FnBecomesNilCh))) {
		return rz;
	}
	MaybeBool F = SC_Msg_Trueness(first, rz);
	bool SelfNil = SC_NilState_SyntaxIs(SC_nil_Self((&SC__nil_T)), kSC__NilState_Nilish);
	if (JB_MaybeBool_IsFalse(F)) {
		if ((!SelfNil)) {
			SC__nil_T.FnAbleToNilCheck = false;
		}
	}
	 else if (SC_NilState_SyntaxIs(rz, kSC__NilState_FnBecomesNilCh)) {
		0;
	}
	 else if (SelfNil) {
		SC__nil_T.FnAbleToNilCheck = false;
	}
	return rz;
}

NilState SC_nil__Dummy(Message* msg, NilCheckMode Test) {
	debugger;
	return 0;
}

NilState SC_nil__Exit(Message* msg, NilCheckMode Test) {
	SC__nil_Loops.ExitRecord = (SC__nil_Loops.ExitRecord | SC_nil__EndBlock());
	SC__nil_Loops.HasEscape = true;
	return 0;
}

void SC_nil__ExterminateZergBugs(SCFunction* f) {
	Message* arg = SC_nil_StartNil((&SC__nil_T), f);
	if (arg) {
		SC_nil__Argument(arg, 0);
		if (SC__nil_T.FnAbleToNilCheck and (!f->IsNilChecker)) {
			f->IsNilChecker = 1;
		}
	}
	SC_nil_FinishNil((&SC__nil_T), f);
}

NilState SC_nil__Fail(Message* msg, NilCheckMode Test) {
	SC__nil_OldPrint = JB__Err_AutoPrint;
	JB__Err_AutoPrint = 0;
	return kSC__NilState_Borked;
}

NilState SC_nil__FailedReal(SCFunction* To, Message* where, NilReason reason, NilState state) {
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	JB_StringC* _tmPf0 = JB_Incr(((JB_StringC*)JB_Array_Value(SC__NilReason_values, reason)));
	JB_FS_AppendString(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_String* raw = JB_Incr(SC_NilState_RawName(state));
	if ((!SC_Msg_OperatorIsThing(where, raw))) {
		JB_FS_AppendByte(fs, ' ');
		JB_FS_AppendString(fs, raw);
	}
	JB_Decr(raw);
	JB_FS_AppendByte(fs, ':');
	JB_FS_AppendByte(fs, ' ');
	JB_FreeIfDead(SC_Msg_OrigRender(where, fs));
	if (To) {
		JB_FS_AppendString(fs, JB_LUB[199]);
		if (JB_Tree_IsFirst(where) and ((bool)To->Cls)) {
			JB_FS_AppendString(fs, To->Name);
		}
		 else {
			JB_FreeIfDead(SC_Func_RenderTitle(To, true, fs));
		}
	}
	if (true) {
		JB_String* _tmPf1 = JB_Incr(JB_FS_SyntaxCast(fs));
		JB_Msg_SyntaxExpect(where, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(fs);
	return 0;
}

void SC_nil__FixArchons() {
	//using;
	ErrorSeverity _usingf0 = JB_ErrorSeverity_SyntaxUsing(SC__Options_NilStrength);
	JB_ErrorReceiver* Old = JB_StdErr;
	JB_ErrorReceiver* Rec = JB_Rec_Constructor(nil);
	if (true) {
		JB_ErrorReceiver* _usingf1 = JB_Rec_SyntaxUsing(Rec);
		{
			Array* _LoopSrcf4 = SC__Comp_FuncList;
			int _if2 = 0;
			while (true) {
				SCFunction* xoxo = ((SCFunction*)JB_Array_Value(_LoopSrcf4, _if2));
				if (xoxo == nil) {
					break;
				}
				int i = _if2;
				SC_nil__ExterminateZergBugs(xoxo);
				SC_Rec_ReturnErrors(Rec, Old);
				_if2++;
			};
		}
		;
		JB_Rec_SyntaxUsingComplete(_usingf1);
	}
	JB_SetRef(SC__Func_CurrFunc, nil);
	JB_ErrorSeverity_SyntaxUsingComplete(_usingf0);
}

NilState SC_nil__Function(Message* msg, NilCheckMode Test) {
	NilState rz = 0;
	Test = (Test & (~kSC__khalai_Disappears));
	Message* fp = ((Message*)JB_Ring_First(msg));
	Message* prms = ((Message*)JB_Ring_NextSib(fp));
	if (SC_Msg_TmpType(msg) == kSC__ASMtmp_kTern) {
		return SC_nil__Tern(prms, Test);
	}
	SCFunction* fn = ((SCFunction*)prms->Obj);
	if ((!fn)) {
		if (fp->Func != JB_SyxBra) {
			JB_Msg_SyntaxExpect(prms, JB__Rec_NonFatal);
			return 0;
		}
		fn = SC_Msg_GetFunctionPointer(fp);
		if ((!(((bool)fn) and ((bool)SC_nil__UseChildAsReal(fp, 0, kSC__NilReason_Accessing))))) {
			return 0;
		}
	}
	if ((!((fn != SC__Func_CurrFunc) or (SC__nil_T.AnyReturns or (SC_nil_NestDepth((&SC__nil_T)) > 0))))) {
		JB_Msg_SyntaxExpect(msg, JB_LUB[1169]);
		return 0;
	}
	if ((SC_khalai_SyntaxIs(Test, kSC__khalai_Active)) and ((bool)fn->IsNilChecker)) {
		if (fn->IsNilChecker != 3) {
			Test = (Test | kSC__khalai_Soft);
		}
		if (SC__nil_T.FnAbleToNilCheck) {
			rz = kSC__NilState_FnBecomesNilCh;
		}
	}
	 else {
		Test = 0;
	}
	Message* P = ((Message*)JB_Ring_First(prms));
	bool HasAddrs = false;
	{
		Array* _LoopSrcf2 = fn->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* recv = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (recv == nil) {
				break;
			}
			if ((SC_NilState_SyntaxIs(recv->NilDeclared, kSC__NilState_Optional)) and (fn->IsNilChecker != 3)) {
				Test = (Test | kSC__khalai_Soft);
			}
			if ((!P)) {
				JB_Msg_SyntaxExpect(msg, JB_LUB[775]);
				return 0;
			}
			NilState v = SC_nil__Jump(P, Test);
			if (((bool)rz) and ((!(SC_NilState_SyntaxIs(v, kSC__NilState_FnBecomesNilCh))) and JB_Tree_IsFirst(P))) {
				rz = 0;
			}
			SCDecl* sent = SC_Msg_FastDecl(P);
			if ((!(HasAddrs))) {
				HasAddrs = ((bool)SC_Decl_CanUpgradeInternalPointer(sent));
			}
			if (SC_NilState_SyntaxIs(v, kSC__NilState_Nilish)) {
				SC_nil__NilParamPass(recv, sent, P, fn, v);
			}
			Test = 0;
			P = ((Message*)JB_Ring_NextSib(P));
			_if0++;
		};
	}
	;
	if (HasAddrs) {
		P = ((Message*)JB_Ring_First(prms));
		{
			Array* _LoopSrcf5 = fn->Args;
			int _if3 = 0;
			while (true) {
				SCDecl* recv = ((SCDecl*)JB_Array_Value(_LoopSrcf5, _if3));
				if (recv == nil) {
					break;
				}
				SCDecl* infernal = SC_Decl_CanUpgradeInternalPointer(SC_Msg_FastDecl(P));
				if (infernal) {
					SCDecl* ri = recv->Internal;
					SC_nil__VariableSet(infernal, recv->Source, ri, P, SC_Decl_NilCurr(ri));
				}
				P = ((Message*)JB_Ring_NextSib(P));
				_if3++;
			};
		};
	}
	if (fn->IsKiller) {
		SC_nil__DeclKill();
		if ((SC_nil_NestDepth((&SC__nil_T)) == 0) and (!SC__nil_T.AnyReturns)) {
			SC__Func_CurrFunc->IsKiller = true;
		}
		return kSC__NilState_Killer;
	}
	SCDecl* ret = fn->ReturnType;
	if (ret) {
		rz = (rz | ret->NilDeclared);
		if ((!((SC_NilState_SyntaxIs(rz, kSC__NilState_Stated)) or (!SC_Decl_TypeSuffers(ret))))) {
			JB_Msg_SyntaxExpect(msg, JB_Str_OperatorPlus(JB_LUB[1061], SC_Func_RenderName(fn, nil)));
		}
	}
	return rz;
}

NilState SC_nil__If(Message* msg, NilCheckMode Test) {
	Message* cond = ((Message*)JB_Ring_First(msg));
	Message* arg1 = ((Message*)JB_Ring_NextSib(cond));
	Message* Else = ((Message*)JB_Ring_NextSib(arg1));
	Message* arg2 = ((Message*)JB_Ring_First(Else));
	MaybeBool Always = SC_Msg_IsAlwaysBool(cond);
	if (JB_MaybeBool_IsTrue(Always)) {
		return SC_nil__Argument(arg1, 0);
	}
	if (JB_MaybeBool_IsFalse(Always)) {
		return SC_nil__Argument(arg2, 0);
	}
	if (SC__nil_NilTrapper) {
		debugger;
	}
	NilRecord Orig = SC_nil_BranchEnter((&SC__nil_T), msg);
	if ((!Orig)) {
		return 0;
	}
	//"First Branch";
	SC_nil__Jump(cond, kSC__khalai_Positive);
	SC_nil__Argument(arg1, 0);
	NilRecord First = SC_nil_BranchSwap((&SC__nil_T), Orig);
	//"Second Branch";
	SC_nil__Jump(cond, kSC__khalai_Negative);
	if (JB_Ring_HasChildren(arg2)) {
		if (JB_Tree_IsLast(arg2)) {
			SC_nil__Argument(arg2, 0);
		}
		 else {
			SC_nil__If(Else, 0);
		}
	}
	return SC_nil_BranchExit((&SC__nil_T), First);
}

NilState SC_nil__Ignore(Message* msg, NilCheckMode Test) {
	return 0;
}

int SC_nil__Init_() {
	{
		SC__nil_Loops = ((LoopInfo){});
		SC__nil_T = ((ArchonPurger){});
		SC__nil_OldPrint = 0;
		SC__nil_NilTrapper = 0;
		SC__nil_NilSyxes[10] = (&SC_nil__Thing);
		SC__nil_NilSyxes[31] = (&SC_nil__Bracket);
		SC__nil_NilSyxes[3] = (&SC_nil__Type);
		SC__nil_NilSyxes[25] = (&SC_nil__Function);
		SC__nil_NilSyxes[5] = (&SC_nil__StatementJump);
		SC__nil_NilSyxes[23] = (&SC_nil__Property);
		SC__nil_NilSyxes[29] = (&SC_nil__Access);
		SC__nil_NilSyxes[30] = (&SC_nil__Item);
		SC__nil_NilSyxes[26] = (&SC_nil__Brel);
		SC__nil_NilSyxes[21] = (&SC_nil__arel);
		SC__nil_NilSyxes[37] = (&SC_nil__Rel);
		SC__nil_NilSyxes[32] = (&SC_nil__List);
		SC__nil_NilSyxes[4] = (&SC_nil__Declaration);
		SC__nil_NilSyxes[1] = (&SC_nil__Argument);
		SC__nil_NilSyxes[11] = (&SC_nil__Ignore);
		SC__nil_NilSyxes[15] = (&SC_nil__String);
		SC__nil_NilSyxes[19] = (&SC_nil__String);
		SC__nil_NilSyxes[14] = (&SC_nil__Number);
		SC__nil_NilSyxes[17] = (&SC_nil__Char);
		SC__nil_NilSyxes[63] = (&SC_NilSyxes_63);
		//;
		SC__nil_NilTmps[(kSC__ASMtmp_kIf)] = (&SC_nil__If);
		SC__nil_NilTmps[(kSC__ASMtmp_kWhile)] = (&SC_nil__While);
		SC__nil_NilTmps[(kSC__ASMtmp_kContinue)] = (&SC_nil__Continue);
		SC__nil_NilTmps[(kSC__ASMtmp_kExit)] = (&SC_nil__Exit);
		SC__nil_NilTmps[(kSC__ASMtmp_kReturn)] = (&SC_nil__Return);
		SC__nil_NilTmps[(kSC__ASMtmp_kDebugger)] = (&SC_nil__Debugger);
		SC__nil_NilTmps[(kSC__ASMtmp_kFail)] = (&SC_nil__Fail);
		SC__nil_NilTmps[(kSC__ASMtmp_kRejoin)] = (&SC_nil__Rejoin);
		SC__nil_NilTmps[63] = (&SC_NilTmps_63);
		//;
	}
	;
	return 0;
}

int SC_nil__InitCode_() {
	{
	}
	;
	SC_nil__TrackerDummies();
	return 0;
}

NilState SC_nil__Item(Message* msg, NilCheckMode Test) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(msg)));
	NilState _tmPf1 = SC_nil__Jump(_tmPf0, Test);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

NilState SC_nil__List(Message* msg, NilCheckMode Test) {
	{
		Message* s = ((Message*)JB_Ring_First(msg));
		while (s) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(s));
			SC_nil__Jump(s, 0);
			s = _Nf1;
		};
		;
	}
	;
	return kSC__NilState_Real;
}

void ndb4() {
	//visible;
	ndb5(((*SC__nil_T.Neel)));
}

void SC_nil__NilParamPass(SCDecl* Recv, SCDecl* Sent, Message* where, SCFunction* f, NilState v) {
	if (SC_Decl_StatedReal(Recv)) {
		SC_nil__BecomeRealSub(Sent, where, kSC__NilReason_Passing, Recv, f, v);
	}
	 else if ((!SC_Decl_NilStated(Recv)) and (f != SC__Func_CurrFunc)) {
		SC_Decl_NilPrmFail(Recv, where, f);
	}
}

NilState SC_nil__Not(Message* msg, NilCheckMode Test) {
	Test = SC_khalai_Activate((Test | kSC__khalai_Reversed));
	NilState a = SC_nil__Jump(msg, Test);
	return a & (~kSC__NilState_FnBecomesNilCh);
}

NilState SC_nil__Number(Message* msg, NilCheckMode Test) {
	return SC_nil__RealBool(SC_Str_IsZero(msg->Name));
}

NilState SC_nil__ProcessCondRel(Message* msg, NilCheckMode Test) {
	Message* ll = ((Message*)JB_Ring_First(msg));
	Message* op = ((Message*)JB_Ring_NextSib(ll));
	SCOperator* scop = ((SCOperator*)op->Obj);
	Message* rr = ((Message*)JB_Ring_NextSib(op));
	if (SC_Opp_SyntaxIs(scop, kSC__OpMode_Compare)) {
		return SC_nil__CompareObjs(ll, rr, Test, scop);
	}
	OpMode AndOr = SC_Opp_SyntaxIs(scop, kSC__OpMode_AndOr);
	if (AndOr) {
		Test = (SC_khalai_SyntaxIsSet(Test, kSC__khalai_And, (AndOr == kSC__OpMode_AND)));
		return SC_nil__BooleanLogic(msg, SC_khalai_Activate(Test));
	}
	NilState L = SC_nil__Jump(ll, 0) & kSC__NilState_Either;
	NilState R = SC_nil__Jump(rr, 0) & kSC__NilState_Either;
	SCDecl* D = SC_Msg_FastDecl(msg);
	if ((!SC_Decl_TypeSuffers(D))) {
		return kSC__NilState_Real;
	}
	if ((kSC__NilState_Nilish == L) or (kSC__NilState_Nilish == R)) {
		return kSC__NilState_Nilish;
	}
	return L | R;
}

NilState SC_nil__Property(Message* msg, NilCheckMode Test) {
	return SC_nil__UseChildAsReal(msg, Test, kSC__NilReason_Property);
}

NilState SC_nil__PropertyToFunc(Message* dot, SCFunction* fn) {
	dot->Func = JB_SyxFunc;
	Message* upon = ((Message*)JB_Ring_First(dot));
	Message* Prms = ((Message*)JB_Ring_Last(dot));
	JB_SetRef(Prms->Obj, fn);
	Prms->Func = JB_SyxPrm;
	(JB_Ring_FirstSet(Prms, upon));
	JB_Mem_Use(JB_ObjLayer(dot));
	(JB_Ring_FirstSet(dot, JB_Msg_ConstructorRange(nil, nil, JB_SyxThg, dot->Position, fn->ExportName, 0)));
	return kSC__NilState_Real;
}

NilState SC_nil__RealBool(bool b) {
	NilState rz = 0;
	rz = kSC__NilState_Real;
	rz = (rz | (kSC__NilState_TrueValue >> b));
	return rz;
}

NilState SC_nil__Rejoin(Message* msg, NilCheckMode Test) {
	return SC_nil__Jump(((Message*)JB_Ring_First(msg)), Test);
}

NilState SC_nil__Rel(Message* msg, NilCheckMode Test) {
	if (SC_ASMtmp_SyntaxIs(SC_Msg_TmpType(msg), kSC__ASMtmp_kSetVar)) {
		return SC_nil__SetRel(msg, Test);
	}
	return SC_nil__ProcessCondRel(msg, Test);
}

NilState SC_nil__Return(Message* msg, NilCheckMode Test) {
	NilState v = SC_nil__DetectStillChecks(((Message*)JB_Ring_First(msg)));
	SC__nil_Loops.ExitRecord = (SC__nil_Loops.ExitRecord | kSC__NilState_Basic);
	SC_nil__DeclKill();
	SC__nil_T.AnyReturns = true;
	SCDecl* ret = SC__nil_T.Return;
	if (((bool)ret) and SC_Decl_TypeSuffers(ret)) {
		if (SC_Decl_StatedReal(ret)) {
			if ((!(!SC_NilState_SyntaxIs(v, kSC__NilState_Nilish)))) {
				JB_Msg_SyntaxExpect(msg, JB_Str_OperatorPlus(JB_LUB[816], SC_NilState_RawName(v)));
				return 0;
			}
		}
		ret->NilDeclared = (ret->NilDeclared | (v & kSC__NilState_Either));
	}
	return 0;
}

NilState SC_nil__SetRel(Message* msg, NilCheckMode Test) {
	Message* R = ((Message*)JB_Ring_Last(msg));
	Message* L = ((Message*)JB_Ring_First(msg));
	SCDecl* LD = SC_Msg_FastDecl(L);
	Test = ((kSC__khalai_Soft) * ((!SC_Decl_SyntaxIs(LD, kSC__SCDeclInfo_Local)) and (LD->NilDeclared == kSC__NilState_Optional)));
	NilState RN = SC_nil__Jump(R, Test);
	SC_nil__Jump(L, 0);
	return SC_nil__VariableSet(LD, L, SC_Msg_FastDecl(R), R, RN);
}

NilState SC_nil__StatementJump(Message* msg, NilCheckMode Test) {
	return (SC__nil_NilTmps[SC_Msg_TmpType(msg)])(msg, 0);
}

NilState SC_nil__String(Message* msg, NilCheckMode Test) {
	SC_Crkt__CollectString(msg);
	return SC_nil__RealBool((!JB_Msg_Length(msg)));
}

NilState SC_nil__SuperSmartMagicCompare(Message* ll, Message* rr, NilCheckMode test, SCOperator* scop) {
	int todo = 3;
	if ((ll->Func == JB_SyxThg) and ((rr->Func == JB_SyxThg) and SC_khalai_SyntaxIs(test, kSC__khalai_Active))) {
		if (((bool)SC_Opp_SyntaxIs(scop, kSC__OpMode_EqualOrNot)) and ((SC_khalai_SyntaxIs(test, kSC__khalai_Positive)) == ((bool)(SC_Opp_SyntaxIs(scop, kSC__OpMode_ExactlyEquals))))) {
			SCDecl* ld = ((SCDecl*)ll->Obj);
			SCDecl* rd = ((SCDecl*)rr->Obj);
			bool ldl = SC_Decl_SyntaxIs(ld, kSC__SCDeclInfo_Local);
			bool rdl = SC_Decl_SyntaxIs(rd, kSC__SCDeclInfo_Local);
			if (ldl or rdl) {
				if (rdl and (SC_Decl_NilCurr(ld) == kSC__NilState_Realish)) {
					SC_nil_SetNilness((&SC__nil_T), rd, kSC__NilState_Real);
					todo = (todo & (~2));
				}
				if (ldl and (SC_Decl_NilCurr(rd) == kSC__NilState_Realish)) {
					SC_nil_SetNilness((&SC__nil_T), ld, kSC__NilState_Real);
					todo = (todo & (~1));
				}
			}
		}
	}
	if (((bool)(todo & 1))) {
		SC_nil__Jump(ll, kSC__khalai_Soft);
	}
	if (((bool)(todo & 2))) {
		SC_nil__Jump(rr, kSC__khalai_Soft);
	}
	return kSC__NilState_Real;
}

NilState SC_nil__Tern(Message* msg, NilCheckMode Test) {
	NilState rz = 0;
	NilRecord Orig = SC_nil_BranchEnter((&SC__nil_T), msg);
	if ((!Orig)) {
		return 0;
	}
	Message* tC = ((Message*)JB_Ring_First(msg));
	Message* tA = ((Message*)JB_Ring_NextSib(tC));
	Message* tB = ((Message*)JB_Ring_NextSib(tA));
	//"First Branch";
	SC_nil__Jump(tC, kSC__khalai_Positive);
	rz = SC_nil__Jump(tA, Test);
	NilRecord First = SC_nil_BranchSwap((&SC__nil_T), Orig);
	//"Second Branch";
	SC_nil__Jump(tC, kSC__khalai_Negative);
	rz = (rz | SC_nil__Jump(tB, Test));
	SC_nil_BranchExit((&SC__nil_T), First);
	rz = (rz & (~kSC__NilState_FnBecomesNilCh));
	return rz;
}

NilState SC_nil__Thing(Message* msg, NilCheckMode Test) {
	NilState rz = 0;
	SCDecl* dcl = SC_Msg_FastDecl(msg);
	rz = SC_nil__ThingSub(msg, Test, dcl);
	msg->Indent = rz;
	if (SC__nil_T.FnAbleToNilCheck and SC_Decl_SyntaxIs(dcl, kSC__SCDeclInfo_Self)) {
		rz = (rz | kSC__NilState_FnBecomesNilCh);
	}
	return rz;
}

NilState SC_nil__ThingSub(Message* msg, NilCheckMode test, SCDecl* dcl) {
	if ((!dcl->NilReg)) {
		return dcl->NilDeclared;
	}
	NilState Y = SC_Decl_NilCurr(dcl);
	bool Unknown = SC_Decl_IsUnknownParam(dcl);
	if (Unknown and ((!SC_khalai_SyntaxIs(test, kSC__khalai_Soft)) and (!SC_khalai_SyntaxIs(test, kSC__khalai_Disappears)))) {
		if (!(SC_khalai_SyntaxIs(test, kSC__khalai_Active))) {
			return SC_nil__BecomeReal(dcl, msg, kSC__NilReason_Reading, nil, nil);
		}
		dcl->NilDeclared = kSC__NilState_Optional;
	}
	if ((!SC_khalai_SyntaxIs(test, kSC__khalai_Active)) or (SC_khalai_SyntaxIs(test, kSC__khalai_Soft) and SC_khalai_SyntaxIs(test, kSC__khalai_Negative))) {
		return Y;
	}
	if (Unknown or (Y != test)) {
		return SC_nil_SetNilness((&SC__nil_T), dcl, test);
	}
	return SC_Msg_RedundantVar(msg, dcl, test);
}

void SC_nil__TrackerDummies() {
	{
		int i = 0;
		while (i < 64) {
			if ((!(SC__nil_NilSyxes[i]))) {
				SC__nil_NilSyxes[i] = SC_nil__Dummy;
			}
			if ((!(SC__nil_NilTmps[i]))) {
				SC__nil_NilTmps[i] = SC_nil__Dummy;
			}
			i++;
		};
	};
}

NilState SC_nil__Type(Message* msg, NilCheckMode Test) {
	Message* F = ((Message*)JB_Ring_First(msg));
	NilState ns = SC_nil__Jump(F, Test) & (~kSC__NilState_FnBecomesNilCh);
	SCDecl* d = SC_Msg_FastDecl(msg);
	if ((!SC_Decl_TypeSuffers(d))) {
		return kSC__NilState_Real;
	}
	SCDecl* fd = SC_Msg_FastDecl(F);
	if (SC_Decl_TypeSuffers(fd)) {
		return ns;
	}
	return d->NilDeclared;
}

NilState SC_nil__UseChildAsReal(Message* msg, NilCheckMode test, NilReason reason) {
	SCDecl* dcl = SC_Msg_FastDecl(msg);
	if (SC_Decl_SyntaxIs(dcl, kSC__SCDeclInfo_Global)) {
		return dcl->NilDeclared;
	}
	Message* ch = ((Message*)JB_Ring_First(msg));
	if (ch) {
		NilState actual = SC_nil__Jump(ch, 0);
		if (SC_NilState_SyntaxIs(actual, kSC__NilState_Nilish)) {
			SCFunction* ddd = dcl->HiderFunc;
			if (((bool)ddd) and ((SC_NilReason_SyntaxIs(reason, kSC__NilReason_Property)) and (!ddd->IsAssigns))) {
				return SC_nil__PropertyToFunc(msg, ddd);
			}
			SC_nil__BecomeReal(SC_Msg_FastDecl(ch), ch, reason, nil, nil);
		}
		NilState nd = dcl->NilDeclared;
		if ((!SC_khalai_SyntaxIs(test, kSC__khalai_Active)) or SC_khalai_SyntaxIs(test, kSC__khalai_Soft)) {
			return nd;
		}
		if (((bool)SC_NilState_StatedReal(nd)) and SC_Decl_TypeSuffers(dcl)) {
			return SC_Msg_RedundantDeclare(msg, nd);
		}
		return nd;
	}
	debugger;
	return 0;
}

NilState SC_nil__VariableSet(SCDecl* Recv, Message* RecvMsg, SCDecl* Sent, Message* SentMsg, NilState SentState) {
	if ((!SC_Decl_TypeSuffers(Recv))) {
		return kSC__NilState_Real;
	}
	if (SC_Decl_IsUnknownParam(Recv)) {
		JB_Msg_SyntaxExpect(RecvMsg, SC_Decl_PrmStateMsg(Recv, JB_LUB[1053], nil));
		return 0;
	}
	if (((bool)SC_Decl_StatedReal(Recv)) and (!SC_Decl_SyntaxIs(Recv, kSC__SCDeclInfo_Local))) {
		if (!(SC_NilState_SyntaxIs(SentState, kSC__NilState_Nilish))) {
			return SentState;
		}
		if (SC_NilState_SyntaxIs(SentState, kSC__NilState_Realish)) {
			return SC_nil__BecomeReal(Sent, SentMsg, kSC__NilReason_Using, nil, nil);
		}
		if ((SC_Decl_SyntaxIs(Recv, kSC__SCDeclInfo_Property)) and (RecvMsg->Func == JB_SyxDot)) {
			if ((SC_Func_SyntaxIs(SC__Func_CurrFunc, kSC__FunctionType_Constructor)) and (SC_Decl_SyntaxIs(SC_Msg_FastDecl(((Message*)JB_Ring_First(RecvMsg))), kSC__SCDeclInfo_Self))) {
				if (true) {
					JB_Msg_SyntaxExpect(RecvMsg, JB_Str_OperatorPlus(JB_LUB[1146], Recv->Name));
				}
				return kSC__NilState_Real;
			}
		}
		if (true) {
			JB_Msg_SyntaxExpect(RecvMsg, JB_Str_OperatorPlus(JB_LUB[1059], SC_Msg_OrigRender(RecvMsg, nil)));
		}
		return kSC__NilState_Real;
	}
	if (Recv->NilReg) {
		return SC_nil_SetNilness((&SC__nil_T), Recv, SentState);
	}
	return 0;
}

NilState SC_nil__While(Message* msg, NilCheckMode Test) {
	Message* cond = ((Message*)JB_Ring_First(msg));
	MaybeBool CondTest = SC_Msg_IsAlwaysBool(cond);
	if ((!((!JB_MaybeBool_IsFalse(CondTest)) and ((bool)SC_nil_BranchEnter((&SC__nil_T), msg))))) {
		return 0;
	}
	LoopInfo W = SC_LoopInfo_BeginLoop((&SC__nil_Loops), (!JB_MaybeBool_IsTrue(CondTest)));
	SC_nil__WhileInner(cond);
	if ((!JB_MaybeBool_IsTrue(CondTest))) {
		SC_nil__Jump(cond, kSC__khalai_WhileNeg);
		SC__nil_Loops.ExitRecord = (SC__nil_Loops.ExitRecord | SC_nil__Value());
	}
	SC_LoopInfo_FinishLoop((&SC__nil_Loops), msg);
	SC__nil_Loops = W;
	return SC_nil_BranchExit((&SC__nil_T), 0);
}

void SC_nil__WhileInner(Message* Cond) {
	{
		int i = 0;
		while (i < 3) {
			SC_nil__Jump(Cond, kSC__khalai_WhilePos);
			SC_nil__Argument(((Message*)JB_Ring_NextSib(Cond)), 0);
			SC_LoopInfo_NextLoop((&SC__nil_Loops));
			i++;
		};
	};
}


void SC_ArgArrayCounter_Check(ArgArrayCounter* self, Message* exp) {
	if (self->IsItem and self->IsNotItem) {
		if (true) {
			JB_Msg_SyntaxExpect(exp, JB_LUB[1026]);
		}
	}
}

Message* SC_ArgArrayCounter_Do(ArgArrayCounter* self, JB_String* name, Message* item, SCNode* name_space) {
	Message* acc = (JB_Syx_Msg(JB_SyxAcc, JB_LUB[0]));
	JB_Tree_SyntaxAppend(acc, (JB_Syx_Msg(JB_SyxThg, name)));
	Message* arr = JB_Msg_Msg(acc, JB_SyxArr, JB_LUB[0]);
	Message* value = item;
	if (JB_Msg_EqualsSyx(value, JB_SyxItem, false)) {
		self->IsItem = true;
		Message* key = JB_Msg_NeedSyx(item, JB_SyxNil);
		if (key) {
			int64 v = 0;
			bool _tmPf0 = SC_Msg_ConstIntValue(key, name_space, (&v));
			if ((!_tmPf0)) {
				JB_Msg_SyntaxExpect(item, JB_LUB[712]);
			}
			if (_tmPf0) {
				self->max = JB_int_OperatorMax(self->max, v);
			}
			JB_Tree_SyntaxAppend(arr, key);
			value = ((Message*)JB_Ring_First(item));
		}
	}
	 else {
		self->IsNotItem = true;
		JB_Msg_AppendNum(arr, (self->i)++);
		self->max = self->i;
	}
	return SC_NewEqRelWithMsgMsg(acc, value);
}




JB_MemoryLayer* JB_ClassData_CreateUseLayer(JB_Class* self, JB_Object* obj, JB_Object* obj2) {
	JB_MemoryLayer* rz = nil;
	JB_SetRef(rz, JB_Mem_CreateLayer(self, obj));
	JB_Mem_Use(rz);
	JB_SetRef(rz->Obj2, obj2);
	JB_SafeDecr(rz);
	return rz;
}

void JB_ClassData_Restore(JB_Class* self) {
	JB_MemoryLayer* _tmPf0 = JB_Incr(JB_Class_DefaultLayer(self));
	JB_Mem_Use(_tmPf0);
	JB_Decr(_tmPf0);
}


void JB_MzSt_Clear(CompressionStats* self) {
	self->Duration = nil;
	self->In = nil;
	self->Out = nil;
}

float JB_MzSt_Durr(CompressionStats* self) {
	Date d = self->Duration;
	if (d < 0) {
		d = (d + JB_Date__New0());
	}
	return JB_Date_Seconds(d);
}

void JB_MzSt_End(CompressionStats* self) {
	self->Duration = (self->Duration + JB_Date__New0());
}

void JB_MzSt_LiveUpdate(CompressionStats* self, int inn, int outt) {
	self->In = (self->In + inn);
	self->Out = (self->Out + outt);
	if (self->Live) {
		JB_MzSt_Print(self);
	}
}

void JB_MzSt_Print(CompressionStats* self) {
	JB_String* _tmPf0 = JB_Incr(JB_MzSt_Render(self, nil));
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
}

JB_String* JB_MzSt_Render(CompressionStats* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_RenderSpeed(fs, JB_MzSt_Durr(self), self->In, self->Out, JB_LUB[0]);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_MzSt_Start(CompressionStats* self) {
	self->Duration = (self->Duration - JB_Date__New0());
}

int JB_MzSt__Init_() {
	{
		JB__MzSt_All = ((CompressionStats){});
	}
	;
	return 0;
}

int JB_MzSt__InitCode_() {
	return 0;
}



bool JB_FastBuff_Alloc(FastBuff* self, int n) {
	byte* mem = JB_Mrap__Zalloc(n);
	if ((!mem)) {
		return nil;
	}
	self->Start = mem;
	self->Curr = mem;
	self->End = (mem + n);
	JB_SetRef(self->ReadFrom, nil);
	return ((bool)self->Start);
}

byte JB_FastBuff_Byte(FastBuff* self) {
	return (*self->Curr++);
}

byte* JB_FastBuff_Clip(FastBuff* self, int v, int reduce) {
	if (v <= 0) {
		return self->Start;
	}
	v = JB_int_OperatorMin(v, (JB_FastBuff_Size(self) - reduce));
	return self->Start + v;
}

uint JB_FastBuff_CopyTo(FastBuff* self, byte* Dest, int Length) {
	uint rz = 0;
	byte* A = self->Curr;
	if ((!((A < self->End) and (Length > 0)))) {
		return 0;
	}
	byte* B = A + Length;
	if (B > self->End) {
		B = self->End;
	}
	rz = (B - A);
	self->Curr = B;
	memcpy(Dest, A, rz);
	return rz;
}

void JB_FastBuff_Destructor(FastBuff* self) {
	//visible;
	JB_Clear(self->ReadFrom);
}

bool JB_FastBuff_Has(FastBuff* self, int n) {
	return (self->End - self->Curr) >= n;
}

bool JB_FastBuff_HasAny(FastBuff* self) {
	return self->End > self->Curr;
}

int JB_FastBuff_Length(FastBuff* self) {
	if (self) {
		return self->Curr - self->Start;
	}
	return 0;
}

bool JB_FastBuff_NeedAlloc(FastBuff* self, int n) {
	if (JB_FastBuff_Alloc(self, n)) {
		return true;
	}
	if (true) {
		JB_Str_SyntaxExpect(JB_LUB[694]);
	}
	return false;
}

int64 JB_FastBuff_Position(FastBuff* self) {
	return self->Curr - self->Start;
}

void JB_FastBuff_PositionSet(FastBuff* self, int64 Value) {
	byte* c = self->Start + Value;
	if ((c < self->Start) or (c > self->End)) {
		if (true) {
			JB_FastBuff_SyntaxExpect(self, JB_LUB[1236]);
		}
		c = self->End;
	}
	self->Curr = c;
}

void JB_FastBuff_ReadFromSet(FastBuff* self, JB_String* Value) {
	JB_SetRef(self->ReadFrom, Value);
	self->Start = JB_Str_Address(Value);
	self->End = (self->Start + JB_Str_Length(Value));
	self->Curr = self->Start;
}

int64 JB_FastBuff_Remaining(FastBuff* self) {
	return self->End - self->Curr;
}

int JB_FastBuff_Size(FastBuff* self) {
	if (self) {
		return self->End - self->Start;
	}
	return 0;
}

JB_String* JB_FastBuff_AccessStr(FastBuff* self, int pos, int after) {
	JB_String* r = self->ReadFrom;
	if (r != nil) {
		return JB_Str_Range(r, pos, after);
	}
	byte* A = JB_FastBuff_Clip(self, pos, 1);
	byte* B = JB_FastBuff_Clip(self, after, 0);
	if (B >= A) {
		return JB_Str_CopyFromPtr(A, B - A);
	}
	return JB_LUB[0];
}

void JB_FastBuff_SyntaxExpect(FastBuff* self, JB_String* s) {
	if ((!self->ErrorReported)) {
		if (true) {
			JB_Str_SyntaxExpect(s);
		}
	}
	self->ErrorReported++;
}

JB_String* JB_FastBuff_TmpStr(FastBuff* self) {
	return JB_StrFromPtr(self->Start, JB_FastBuff_Length(self), nil, nil);
}




void SC_IR_AddRegParam(IR* self, Message* src, uint write) {
	uint Num = SC_Msg_RegOrNum(src, false);
	if (write < 4) {
		self->r[write] = Num;
		if (self->r[write] != Num) {
			JB_Msg_SyntaxExpect(src, JB_LUB[1100]);
		}
	}
	 else if (write == 4) {
		self->Rest = Num;
	}
	 else {
		debugger;
	}
}

Ind SC_IR_BytePos(IR* self) {
	return self->Debug & JB_int_Bits(kSC__IR_MsgDebugPosShift);
}

void SC_IR_DebugSet(IR* self, Message* Value) {
	Ind FilePos = Value->Position & JB_int_Bits(kSC__IR_MsgDebugPosShift);
	self->Debug = (SC__IR_CurrFileNum | FilePos);
}

ASM SC_IR_Encode(IR* self) {
	return (SC__ASM_Encoders[self->Op])(self);
}

JB_String* SC_IR_File(IR* self) {
	JB_String* s = JB_Incr(((JB_String*)JB_Array_Value(SC__IR_Resources, SC_IR_FilePos(self))));
	if (JB_Str_Exists(s)) {
		JB_SafeDecr(s);
		return s;
	}
	JB_Decr(s);
	return JB_LUB[0];
}

int SC_IR_FilePos(IR* self) {
	return self->Debug >> kSC__IR_MsgDebugPosShift;
}

void SC_IR_FS(IR* self, FastString* fs) {
	Instruction* op = SC__Instruction_TypeList[self->Op];
	if ((!op)) {
		debugger;
		return;
	}
	JB_FS_AppendString(fs, op->Name);
	JB_FS_AppendByte(fs, ':');
	JB_FS_AppendMultiByte(fs, ' ', 5 - JB_Str_Length(op->Name));
	JB_String* GotAny = JB_LUB[0];
	int Remain = 25;
	xC2xB5Form* f = op->Sizes;
	{
		int i = 0;
		while (i < 5) {
			uint bs = SC_xC2xB5Param_BitSize(SC_xC2xB5Form_AccessInt(f, i));
			if ((Remain > 0) and (Remain > bs)) {
				JB_FS_AppendString(fs, GotAny);
				GotAny = JB_LUB[303];
				if (SC_xC2xB5Param_IsReg(SC_xC2xB5Form_AccessInt(f, i))) {
					JB_FS_AppendByte(fs, 'r');
				}
				if (i >= 4) {
					JB_FS_AppendInt32(fs, self->Rest);
				}
				 else {
					JB_FS_AppendByte(fs, self->r[i]);
				}
				Remain = (Remain + bs);
			}
			i++;
		};
	};
}

bool SC_IR_OperatorIsa(IR* self, int m) {
	return m == self->Op;
}

void SC_IR_Print(IR* self) {
	//visible;
	if (SC__ASM_NoisyASM >= 3) {
		JB_String* _tmPf0 = JB_Incr(SC_IR_Render(self, nil));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
}

JB_String* SC_IR_Render(IR* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	SC_IR_FS(self, fs);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_IR_SyntaxExpect(IR* self, JB_String* Error) {
	JB_String* _tmPf0 = JB_Incr(SC_IR_File(self));
	JB_Error* err = JB_Incr(JB_Err_Constructor(nil, nil, Error, kJB__ErrorSeverity_Error, _tmPf0));
	JB_Decr(_tmPf0);
	err->Position = SC_IR_BytePos(self);
	JB_Rec_AppendErr(JB_StdErr, err);
	JB_Decr(err);
}

int SC_IR__Init_() {
	{
		JB_SetRef(SC__IR_Resources, JB_Array_Constructor0(nil));
		SC__IR_CurrFileNum = 0;
	}
	;
	return 0;
}

int SC_IR__InitCode_() {
	return 0;
}



int SC_IsaTester__Init_() {
	{
		SC__IsaTester_T = ((IsaTester){});
	}
	;
	return 0;
}

int SC_IsaTester__InitCode_() {
	return 0;
}

void SC_IsaTester__SyntaxAppend(Message* o) {
	if (SC__IsaTester_T.Count < 4) {
		SC__IsaTester_T.Items[SC__IsaTester_T.Count++] = o;
	}
}


LoopInfo SC_LoopInfo_BeginLoop(LoopInfo* self, bool HasExitCond) {
	LoopInfo rz = ((LoopInfo){});
	rz = (*self);
	NilRecord v = SC_nil__Value();
	self->ExitRecord = (((NilRecord)HasExitCond) * v);
	self->HasEscape = HasExitCond;
	self->ContRecord = v;
	self->VarCount = SC_NRD_DepthOfVars(v);
	self->NestDepth = SC_nil_NestDepth((&SC__nil_T));
	return rz;
}

void SC_LoopInfo_FinishLoop(LoopInfo* self, Message* msg) {
	NilRecord Ex = self->ExitRecord;
	if ((!Ex)) {
		JB_Msg_SyntaxExpect(msg, JB_LUB[998]);
	}
	if ((!self->HasEscape) and (!JB_Tree_IsLast(msg))) {
		SC_Msg_KinderRemoveAfter(msg);
	}
	SC_nil_SetAllNil((&SC__nil_T), Ex);
}

void SC_LoopInfo_NextLoop(LoopInfo* self) {
	self->ContRecord = (self->ContRecord | SC_nil__Value());
	SC_nil_SetAllNil((&SC__nil_T), self->ContRecord);
}




void JB_MsgPos_Destructor(MessagePosition* self) {
	JB__Tk_Using = (*self);
	JB_Mem_Use(self->Layer);
}

void JB_MsgPos_SyntaxUsingComplete(MessagePosition* self) {
}



void SC_NameAndMsg_Destructor(NameAndMsg* self) {
	JB_Clear(self->Msg);
	JB_Clear(self->Name);
	JB_Clear(self->Arg);
}

void SC_NameAndMsg_SyntaxAppend(NameAndMsg* self, Message* m) {
	Message* msg = self->Msg;
	if (msg) {
		(JB_Ring_PrevSibSet(msg, m));
	}
	 else {
		JB_Tree_SyntaxAppend(self->Arg, m);
	}
}


void SC_NRC_SyntaxCallSet(NilRecorder* self, uint64 item, uint64 value) {
	value = (value & kSC__NilState_Either);
	item = (item << 1);
	uint64 Mask = ((uint64)kSC__NilState_Either) << item;
	NilRecord Prev = self->Value;
	self->Value = ((Prev & (~Mask)) | (value << item));
}


void JB_LD_Destructor(ObjectLoader* self) {
	JB_Clear(self->Result);
}

void JB_LD_Finish(ObjectLoader* self) {
	JB_SetRef(self->Result, nil);
	if (self->NoClass) {
		JB_Msg_SyntaxExpect(self->DataError, JB_LUB[1345]);
	}
	if (self->DataError) {
		JB_Msg_SyntaxExpect(self->DataError, JB_LUB[659]);
	}
	if (self->CouldntLoad) {
		JB_Object_Fail(self->CouldntLoad, JB_LUB[1281]);
	}
}

JB_Class* JB_LD_GetClassOf(ObjectLoader* self, Message* msg) {
	DTWrap* Data = ((DTWrap*)JB_Dict_ValueStr(JB__LD_ClassList, msg->Name));
	if (Data) {
		return ((JB_Class*)(JB_Wrap_First(Data)));
	}
	self->NoClass = msg;
	return nil;
}

bool JB_LD_HasItem(ObjectLoader* self) {
	return ((bool)self->CurrItem);
}

int64 JB_LD_Int(ObjectLoader* self) {
	Message* C = JB_LD_Next(self);
	if (C) {
		return JB_Msg_Int(C, 0);
	}
	return 0;
}

int64 JB_LD_ItemInt(ObjectLoader* self) {
	Message* c = self->CurrItem;
	if ((!c)) {
		return 0;
	}
	self->CurrItem = ((Message*)JB_Ring_NextSib(c));
	return JB_Msg_Int(((Message*)JB_Ring_Last(c)), 0);
}

bool JB_LD_ItemIsInt(ObjectLoader* self) {
	Message* C = self->CurrItem;
	return ((JB_Msg_EqualsSyx(((Message*)JB_Ring_Last(C)), JB_SyxNum, false)));
}

JB_String* JB_LD_ItemName(ObjectLoader* self) {
	Message* c = self->CurrItem;
	return JB_Str_Unshare(JB_Msg_FirstName(c));
}

JB_Object* JB_LD_ItemObject(ObjectLoader* self) {
	Message* c = self->CurrItem;
	if ((!c)) {
		return nil;
	}
	self->CurrItem = ((Message*)JB_Ring_NextSib(c));
	return JB_LD_ObjectSub(self, ((Message*)JB_Ring_Last(c)));
}

void JB_LD_LoadClass(ObjectLoader* self, Message* msg, Dictionary* dict) {
	JB_Class* Cls = JB_LD_GetClassOf(self, msg);
	if ((!Cls)) {
		return;
	}
	Message* items = ((Message*)JB_Ring_Last(msg));
	if ((!JB_Msg_EqualsSyx(items, JB_SyxList, false))) {
		JB_Msg_SyntaxExpect(items, nil);
		return;
	}
	{
		Message* line = ((Message*)JB_Ring_First(items));
		while (line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(line));
			JB_LD_LoadObject(self, line, dict, Cls);
			line = _Nf1;
		};
		;
	};
}

void JB_LD_LoadForReal(ObjectLoader* self, Message* root, Dictionary* d) {
	self->Dict = d;
	{
		Message* Cls = ((Message*)JB_Ring_First(root));
		while (Cls) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Cls));
			if (JB_Msg_EqualsSyx(Cls, JB_SyxTmp, false)) {
				{
					Message* _LoopSrcf4 = ((Message*)JB_Ring_Last(Cls));
					Message* line = ((Message*)JB_Ring_First(_LoopSrcf4));
					while (line) {
						Message* _Nf3 = ((Message*)JB_Ring_NextSib(line));
						Message* name = ((Message*)JB_Ring_First(line));
						if (name) {
							Saveable* result = ((Saveable*)JB_Dict_ValueStr(d, name->Name));
							if (result) {
								self->CurrItem = ((Message*)JB_Ring_First(((Message*)JB_Ring_Last(line))));
								JB_Sav___LoadProperties__(result, self);
							}
						}
						line = _Nf3;
					};
					;
				};
			}
			 else if (JB_Msg_EqualsSyx(Cls, JB_SyxName, false)) {
				JB_SetRef(self->Result, ((Saveable*)JB_Dict_ValueStr(d, Cls->Name)));
			}
			Cls = _Nf1;
		};
		;
	};
}

void JB_LD_LoadObject(ObjectLoader* self, Message* msg, Dictionary* dict, JB_Class* Cls) {
	if ((!JB_Msg_EqualsSyx(msg, JB_SyxItem, false))) {
		return;
	}
	Message* name = ((Message*)JB_Ring_First(msg));
	if ((!name)) {
		return;
	}
	Saveable* Result = ((Saveable*)((JB_Object*)JB_Ternary(((bool)Cls), JB_Class_AllocZeroed(Cls), nil)));
	if (Result) {
		(JB_Dict_ValueSet(dict, name->Name, Result));
	}
}

Message* JB_LD_Next(ObjectLoader* self) {
	Message* C = self->CurrItem;
	if (C) {
		self->CurrItem = ((Message*)JB_Ring_NextSib(C));
		return C;
	}
	return nil;
}

JB_Object* JB_LD_Object(ObjectLoader* self) {
	return JB_LD_ObjectSub(self, JB_LD_Next(self));
}

JB_Object* JB_LD_ObjectSub(ObjectLoader* self, Message* c) {
	if (JB_Msg_EqualsSyx(c, JB_SyxThg, false)) {
		return JB_Dict_ValueStr(self->Dict, c->Name);
	}
	 else if (JB_Msg_EqualsSyx(c, JB_SyxStr, false)) {
		return JB_Str_Unshare(c->Name);
	}
	return nil;
}

void JB_LD_Preload(ObjectLoader* self, Message* root, Dictionary* dict) {
	{
		Message* Cls = ((Message*)JB_Ring_First(root));
		while (Cls) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(Cls));
			if (JB_Msg_EqualsSyx(Cls, JB_SyxTmp, false)) {
				JB_LD_LoadClass(self, Cls, dict);
			}
			Cls = _Nf1;
		};
		;
	};
}

JB_String* JB_LD_String(ObjectLoader* self) {
	Message* C = JB_LD_Next(self);
	if ((!C)) {
		return JB_LUB[0];
	}
	return JB_Str_Unshare(C->Name);
}

bool JB_LD_VerifyFormat(ObjectLoader* self, Message* root) {
	JB_LD__Init();
	Message* m1 = JB_Msg_NeedSyx(root, JB_SyxName);
	if ((!m1)) {
		return nil;
	}
	return true;
}

void JB_LD__Init() {
	if (JB__LD_ClassList) {
		return;
	}
	JB_SetRef(JB__LD_ClassList, JB_Dict_Constructor(nil));
	JB_InitClassList((&JB_LD__LoadOne));
}

int JB_LD__Init_() {
	{
	}
	;
	return 0;
}

int JB_LD__InitCode_() {
	return 0;
}

void JB_LD__LoadOne(JB_Class* cls, char* Data) {
	JB_StringC* _tmPf0 = JB_Incr(JB_Str__Wrap(cls->Name));
	JB_String* name = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	DTWrap* _tmPf1 = JB_Incr(JB_Wrap_ConstructorInt(nil, ((int64)cls)));
	(JB_Dict_ValueSet(JB__LD_ClassList, name, _tmPf1));
	JB_Decr(name);
	JB_Decr(_tmPf1);
}


void JB_Saver_AppendInt(ObjectSaver* self, int64 i) {
	JB_FS_AppendInt64(self->Dest, i);
	JB_FS_AppendByte(self->Dest, ',');
}

void JB_Saver_AppendObject(ObjectSaver* self, JB_Object* o) {
	JB_FS_AppendObjectOrNil(self->Dest, o);
	JB_FS_AppendByte(self->Dest, ',');
}

void JB_Saver_AppendString(ObjectSaver* self, JB_String* s) {
	JB_FS_AppendByte(self->Dest, '`');
	JB_FreeIfDead(JB_Str_ReplaceAll(s, JB_LUB[1464], JB_LUB[1466], false, self->Dest));
	JB_FS_AppendByte(self->Dest, '`');
	JB_FS_AppendByte(self->Dest, ',');
}

void JB_Saver_Destructor(ObjectSaver* self) {
	if (self->CantSaveThis) {
		JB_Object_Fail(self->CantSaveThis, JB_LUB[1282]);
	}
	JB_Clear(self->Dest);
}

void JB_Saver_Finish(ObjectSaver* self, Saveable* first) {
	FastString* fs = self->Dest;
	JB_FS_AppendByte(fs, '\n');
	JB_FS_AppendByte(fs, '@');
	JB_FS_AppendObjectID(fs, first);
	JB_FS_AppendByte(fs, '\n');
	JB_FS_AppendString(fs, kJB_kSaverEnd);
}

void JB_Saver__Init() {
	if (JB_Array_SyntaxCast(JB__Saver_SaveableList)) {
		return;
	}
	JB_InitClassList((&JB_Saver__LoadOne));
}

int JB_Saver__Init_() {
	{
	}
	;
	return 0;
}

int JB_Saver__InitCode_() {
	return 0;
}

void JB_Saver__LoadOne(JB_Class* cls, char* Data) {
	SaverClassInfo* N = JB_Incr(JB_sci_Constructor(nil, cls, Data));
	cls->SaveInfo = ((byte*)N);
	JB_SetRef(N->NextInfo, JB__Saver_SaveableList);
	JB_SetRef(JB__Saver_SaveableList, N);
	JB_Decr(N);
}

ObjectSaver JB_Saver__New() {
	JB_Saver__Init();
	ObjectSaver Result = ((ObjectSaver){});
	return Result;
}




JB_String* JB_Pico_Get(PicoComms* self, float T) {
	return JB_Str__FromPico(PicoGet(self, T));
}

bool JB_Pico_SendFS(PicoComms* self, FastString* fs, bool Wait) {
	bool rz = false;
	rz = PicoSend(self, JB_Pico__FromFS(fs), Wait);
	(JB_FS_LengthSet(fs, 0));
	return rz;
}

int JB_Pico__Init_() {
	{
	}
	;
	return 0;
}

int JB_Pico__InitCode_() {
	return 0;
}

PicoComms* JB_Pico__New(JB_StringC* name, int bits) {
	PicoComms* p = PicoCreate();
	if (p) {
		PicoConfig* c = PicoCommsConf(p);
		c->Name = JB_Str_SyntaxCast(name);
		c->Bits = bits;
		return p;
	}
	PicoGlobalStats St = ((PicoGlobalStats){});
	PicoStats((&St));
	if (true) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_PlusByte(JB_LUB[793], St.OpenPicos));
		JB_Str_SyntaxExpect(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return nil;
}

PicoComms* JB_Pico__Parent() {
	PicoComms* rz = nil;
	PicoComms* p = JB__Pico_Parent_;
	if (p) {
		return p;
	}
	if ((!PicoHasParentSocket())) {
		return nil;
	}
	rz = JB_Pico__New(JB_LUB[0], 16);
	JB__Pico_Parent_ = rz;
	if (rz) {
		PicoCompleteExec(rz);
	}
	return rz;
}





PicoMessage JB_Pico__FromFS(FastString* fs) {
	PicoMessage rz = ((PicoMessage){});
	rz.Length = fs->Length;
	rz.Data = ((char*)fs->ResultPtr);
	return rz;
}


double JB_Rnd_Double(Random* self) {
	double rz = 0.0f;
	rz = ((double)((uint64)JB_Rnd_RndInt(self)));
	rz = (rz / 18446744073709551616.0f);
	return rz;
}

float JB_Rnd_Float(Random* self) {
	return JB_Rnd_Double(self);
}

int64 JB_Rnd_RndInt(Random* self) {
	int64 rz = 0;
	uint64 s = (++self->State);
	rz = JB_uint64_hash((self->Store + s));
	self->Store = rz;
	return rz;
}

void JB_Rnd_LoadProperties(Random* self, ObjectLoader* Loader) {
	//visible;
	self->Store = ((uint64)JB_LD_Int(Loader));
	self->State = ((uint64)JB_LD_Int(Loader));
}

void JB_Rnd_SaveWrite(Random* self, ObjectSaver* Saver) {
	//visible;
	JB_Saver_AppendInt(Saver, self->Store);
	JB_Saver_AppendInt(Saver, self->State);
}

void JB_Rnd_SeedSet(Random* self, uint64 Value) {
	self->Store = Value;
	self->State = 1;
}

double JB_Rnd_SyntaxAccess(Random* self) {
	return JB_Rnd_Double(self);
}

void JB_Rnd_TimeSeed(Random* self) {
	(JB_Rnd_SeedSet(self, JB_Date__New0()));
}

int JB_Rnd__Init_() {
	{
		JB__Rnd_Shared = ((Random){});
	}
	;
	return 0;
}

int JB_Rnd__InitCode_() {
	{
	}
	;
	JB_Rnd_TimeSeed((&JB__Rnd_Shared));
	return 0;
}






void JB_StructSaveTest_Destructor(StructSaveTest* self) {
	JB_Clear(self->Sav);
	JB_Clear(self->Str);
}

void JB_StructSaveTest_LoadProperties(StructSaveTest* self, ObjectLoader* Loader) {
	//visible;
	JB_SetRef(self->Sav, ((Saveable*)JB_LD_Object(Loader)));
	self->Intt = ((int64)JB_LD_Int(Loader));
	JB_SetRef(self->Str, ((JB_String*)JB_LD_String(Loader)));
}

void JB_StructSaveTest_SaveWrite(StructSaveTest* self, ObjectSaver* Saver) {
	//visible;
	JB_Saver_AppendObject(Saver, self->Sav);
	JB_Saver_AppendInt(Saver, self->Intt);
	JB_Saver_AppendString(Saver, self->Str);
}





































































SCDecl* SC_Object_AsDecl(JB_Object* self) {
	if (JB_Object_FastIsa(self, &SCClassData)) {
		return ((SCClass*)self)->TypeNormal;
	}
	 else if (JB_Object_FastIsa(self, &SCModuleData)) {
		SCClass* c = ((SCModule*)self)->Cls;
		if (c) {
			return c->TypeNormal;
		}
	}
	 else {
		return SC_Object_BaseAsDecl(self);
	}
	return nil;
}

SCDecl* SC_Object_BaseAsDecl(JB_Object* self) {
	if (JB_Object_FastIsa(self, &SCDeclData)) {
		return ((SCDecl*)self);
	}
	if (JB_Object_FastIsa(self, &SCFunctionData)) {
		return ((SCFunction*)self)->ReturnType;
	}
	return nil;
}

SCNode* SC_Object_ClassOrModule(JB_Object* self) {
	if (JB_Object_FastIsa(self, &SCModuleData)) {
		SCClass* c = ((SCModule*)self)->Cls;
		if (c) {
			return c;
		}
		return ((SCModule*)self);
	}
	return nil;
}

__lib__ void jdb(JB_Object* self) {
	//visible;
	if (self) {
		JB_StringC* _tmPf0 = JB_Incr(JB_Str__Wrap(JB_ObjClass(self)->Name));
		JB_Str_Print(_tmPf0);
		JB_Decr(_tmPf0);
		JB_Str_Print(JB_LUB[560]);
	}
	JB_String* _tmPf1 = JB_Incr(JB_ObjRender(self, nil));
	JB_PrintLine(_tmPf1);
	JB_Decr(_tmPf1);
}

bool JB_Object_MustBe(JB_Object* self, JB_Class* x, Message* ErrNode) {
	if (JB_Object_Isa(self, x)) {
		return true;
	}
	if (self) {
		JB_FreeIfDead(JB_Object_TypeFailed(self, x, ErrNode));
	}
	return false;
}

JB_Object* JB_Object_As(JB_Object* self, JB_Class* x) {
	if (JB_Object_Isa(self, x)) {
		return self;
	}
	if (self) {
		return JB_Object_TypeFailed(self, x, nil);
	}
	return nil;
}

JB_Object* JB_Object_FastAs(JB_Object* self, JB_Class* x) {
	if (self) {
		if (JB_ObjClass(self) == x) {
			return self;
		}
		return JB_Object_TypeFailed(self, x, nil);
	}
	return nil;
}

bool JB_Object_FastIsa(JB_Object* self, JB_Class* x) {
	return ((bool)(self)) and (JB_ObjClass(self) == x);
}

bool JB_Object_Isa(JB_Object* self, JB_Class* cls) {
	if (self) {
		JB_Class* P = JB_ObjClass(self);
		while (P) {
			if (P == cls) {
				return true;
			}
			P = P->Parent;
		};
	}
	return false;
}

bool JB_Object_OperatorMustBe(JB_Object* self, JB_Class* x) {
	return JB_Object_MustBe(self, x, nil);
}

void JB_Object_SaveTryCollect(JB_Object* self, ObjectSaver* Saver) {
	if (JB_Object_Isa(self, &SaveableData)) {
		if ((!JB_Sav_SaveMark(((Saveable*)self)))) {
			return;
		}
		JB_Array_SyntaxAppend(JB_Sav_SaverInfo(((Saveable*)self)), ((Saveable*)self));
		JB_Sav___SaveCollect__(((Saveable*)self), Saver);
	}
	 else if ((bool)(self)) {
		if ((!JB_Object_Isa(self, &JB_StringData))) {
			Saver->CantSaveThis = self;
		}
	}
}

void JB_Object_Fail(JB_Object* self, JB_String* Error) {
	//visible;
	if (JB_Object_Isa(self, &MessageData)) {
		JB_Rec__NewErrorWithNode(((Message*)self), Error, nil);
	}
	 else {
		JB_Rec__NewErrorWithNode(nil, Error, nil);
	}
}

void JB_Object_SyntaxExpect(JB_Object* self) {
	JB_PrintLine(JB__Rec_NonFatal);
	JB_CrashTracer();
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_String* _tmPf1 = JB_Incr(JB_int64_StrSize(JB_MemCount(), nil));
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(_fsf0, JB_LUB[189]);
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf2);
	JB_Decr(_tmPf2);
	JB_Rec__NewErrorWithNode(nil, JB__Rec_NonFatal, nil);
}

JB_Object* JB_Object_TypeFailed(JB_Object* self, JB_Class* Cls, Message* where) {
	JB_String* name = JB_Incr(JB_cstring_Str(JB_ObjClass(self)->Name));
	if (true) {
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlusWithCstring(JB_LUB[128], Cls->Name));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(name, _tmPf1));
		JB_Decr(_tmPf1);
		JB_Msg_SyntaxExpect(where, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(name);
	JB_Platform__Log(JB_LUB[1332]);
	JB_String* _tmPf2 = JB_Incr(JB_App__StackTrace(2, nil));
	JB_Platform__Log(_tmPf2);
	JB_Decr(_tmPf2);
	debugger;
	return nil;
}


JB_String* JB_AppArgument_Name(JB_Object* self) {
	if (JB_Object_Isa(self, &JB_StringData)) {
		return JB_Str_ArgName(((JB_String*)self));
	}
	if (JB_Object_Isa(self, &MessageData)) {
		return JB_Msg_ArgName(((Message*)self));
	}
	return JB_LUB[0];
}

JB_String* JB_AppArgument_Value(JB_Object* self) {
	if (JB_Object_Isa(self, &JB_StringData)) {
		return JB_Str_ArgValue(((JB_String*)self));
	}
	if (JB_Object_Isa(self, &MessageData)) {
		return JB_Msg_ArgValue(((Message*)self));
	}
	return JB_LUB[0];
}



Array* JB_CS_Bytes(CharSet* self) {
	Array* rz = ((Array*)JB_Array_Constructor0(nil));
	{
		int _if0 = -1;
		while (JB_CS_NextInCharset(self, (&_if0))) {
			byte b = ((byte)_if0);
			JB_Array_SyntaxAppend(rz, JB_byte_Render(b, nil));
		};
	}
	;
	return rz;
}

bool JB_CS_NextInCharset(CharSet* self, int* p) {
	int i = (*p);
	while ((++i) < 256) {
		if (JB_CS_HasChar(self, i)) {
			(*p) = i;
			return true;
		}
	};
	return false;
}

bool JB_CS_OperatorContains(CharSet* self, JB_String* Data) {
	return (!JB_Ind_SyntaxCast(JB_Str_OutCharSet(Data, self, 0, JB_int__Max())));
}


void SC_CppRefs_AddOne(CppRefs* self, Message* C) {
	if (JB_Msg_SyntaxEquals(C, JB_LUB[1811], true)) {
	}
	 else if (JB_Msg_SyntaxEquals(C, JB_LUB[1934], true)) {
		self->DisturbParams = (self->DisturbParams | 1);
	}
	 else if (JB_Msg_EqualsSyx(C, JB_SyxNum, false)) {
		self->DisturbParams = (self->DisturbParams | (JB_Msg_Int(C, 0) << 1));
	}
	 else {
		JB_Array_SyntaxAppend(SC_CppRefs_DisturbsGet(self), C->Name);
	}
}

CppRefs* SC_CppRefs_Constructor(CppRefs* self, Message* s) {
	if (self == nil) {
		self = ((CppRefs*)JB_NewClass(&CppRefsData));
	}
	self->DisturbParams = 0;
	self->Owned = false;
	Array* _tmPf0 = JB_Array_Constructor0(nil);
	self->Disturbs = JB_Incr(_tmPf0);
	if (s) {
		SC_CppRefs_Read(self, s);
	}
	return self;
}

void SC_CppRefs_Destructor(CppRefs* self) {
	JB_Clear(self->Disturbs);
}

Array* SC_CppRefs_DisturbsGet(CppRefs* self) {
	Array* rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	Array* ds = JB_Incr(self->Disturbs);
	if (JB_Array_SyntaxCast(ds)) {
		JB_Decr(rz);
		JB_SafeDecr(ds);
		return ds;
	}
	JB_SetRef(rz, JB_Array_Constructor0(nil));
	JB_SetRef(self->Disturbs, ds);
	JB_Decr(ds);
	JB_SafeDecr(rz);
	return rz;
}

void SC_CppRefs_Read(CppRefs* self, Message* node) {
	SC_CppRefs_SetDefaultRefStatus(self);
	Message* arg = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxArg));
	if ((!arg)) {
		JB_Decr(arg);
		return;
	}
	JB_Msg_ExpectLast(arg, JB_LUB[0]);
	{
		Message* c = JB_Incr(((Message*)JB_Ring_First(arg)));
		while (c) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(c)));
			JB_Msg_Expect(c, JB_SyxTmp, nil);
			if ((!((JB_Msg_SyntaxEquals(c, JB_LUB[1614], false)) or (JB_Msg_SyntaxEquals(c, JB_LUB[1610], false))))) {
				JB_Msg_SyntaxExpect(c, JB_LUB[1220]);
				JB_Decr(_Nf1);
				JB_Decr(c);
				JB_Decr(arg);
				return;
			}
			Message* ch = JB_Incr(((Message*)JB_Ring_First(c)));
			if (JB_Msg_EqualsSyx(ch, JB_SyxBra, false)) {
				ch->Func = JB_SyxPrm;
			}
			if ((!((JB_Msg_EqualsSyx(ch, JB_SyxThg, false)) or ((JB_Msg_EqualsSyx(ch, JB_SyxPrm, false)) or (JB_Msg_EqualsSyx(ch, JB_SyxNum, false)))))) {
				JB_Msg_SyntaxExpect(ch, nil);
				JB_Decr(ch);
				JB_Decr(_Nf1);
				JB_Decr(c);
				JB_Decr(arg);
				return;
			}
			JB_Msg_ExpectLast(ch, JB_LUB[0]);
			JB_Decr(ch);
			JB_SetRef(c, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(c);
		;
	}
	;
	if ((!JB_Rec_OK(JB_StdErr))) {
		JB_Decr(arg);
		return;
	}
	Message* _tmPf4 = JB_Incr(JB_Msg_FindSyxName(arg, JB_SyxTmp, JB_LUB[1901], false));
	Message* Disown = JB_Incr(((Message*)JB_Tree_Get(_tmPf4, 0)));
	JB_Decr(_tmPf4);
	if (Disown) {
		self->Owned = (!SC_Msg_TrueOrFalse(Disown));
	}
	JB_Decr(Disown);
	Message* _tmPf5 = JB_Incr(JB_Msg_FindSyxName(arg, JB_SyxTmp, JB_LUB[1614], false));
	JB_Decr(arg);
	Message* Stuff = JB_Incr(((Message*)JB_Tree_Get(_tmPf5, 0)));
	JB_Decr(_tmPf5);
	if (Stuff) {
		JB_Array_Clear(self->Disturbs);
		self->DisturbParams = 0;
		if ((!JB_Msg_EqualsSyx(Stuff, JB_SyxList, false))) {
			SC_CppRefs_AddOne(self, Stuff);
		}
		 else {
			{
				Message* c = JB_Incr(((Message*)JB_Ring_First(Stuff)));
				while (c) {
					Message* _Nf3 = JB_Incr(((Message*)JB_Ring_NextSib(c)));
					SC_CppRefs_AddOne(self, c);
					JB_SetRef(c, _Nf3);
					JB_Decr(_Nf3);
				};
				JB_Decr(c);
				;
			};
		}
	}
	JB_Decr(Stuff);
}

void SC_CppRefs_SetDefaultRefStatus(CppRefs* self) {
	self->Owned = false;
	JB_SetRef(self->Disturbs, JB_Array_Constructor0(nil));
	self->DisturbParams = -1;
	Array* _tmPf0 = JB_Incr(SC_CppRefs_DisturbsGet(self));
	JB_Array_SyntaxAppend(_tmPf0, JB_LUB[1837]);
	JB_Decr(_tmPf0);
}

SCNode* SC_CppRefs__Linkage(Message* node, SCNode* name_space, Message* ErrPlace) {
	Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxArg));
	SCNode* _tmPf1 = JB_Incr(SC_Base_ProcessLinkage(name_space, _tmPf0, JB_ClassLinkageTable));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCNode* SC_CppRefs__ReadIntoCppRefs(Message* node, SCNode* name_space, Message* ErrPlace) {
	SCModule* _tmPf0 = JB_Incr(SC_Base_SpaceModule(name_space, nil));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	SC_CppRefs_Read(_tmPf0->DefaultRefs, node);
	JB_Decr(_tmPf0);
	return SC__Comp_program;
}


void SC_Cpp_AppendCppField(Cpp_Export* self, JB_String* prop, FastStringCpp* fs) {
	JB_FS_AppendString(fs, JB_LUB[43]);
	JB_FS_AppendString(fs, prop);
	JB_FS_AppendByte(fs, ';');
}

void SC_Cpp_AppendPropField(Cpp_Export* self, SCDecl* prop, FastStringCpp* fs) {
	JB_FS_AppendString(fs, JB_LUB[43]);
	SC_Cpp__WriteDecl(prop, fs, nil);
	JB_FS_AppendByte(fs, ';');
}

bool SC_Cpp_CanExportFunc(Cpp_Export* self, SCFunction* F) {
	if ((!SC_Func_NeedsExport(F))) {
		return nil;
	}
	if ((!F->IsExternalLib)) {
		if ((!((!F->IsWrapper) and (!F->IsMacro)))) {
			return nil;
		}
	}
	return (!SC_Func_SyntaxIs(F, kSC__FunctionType_NewStruct)) and (!SC_Func_SyntaxIs(F, kSC__FunctionType_AlreadyExported));
}

bool SC_Cpp_CanOpt(Cpp_Export* self, bool force) {
	if (force) {
		return true;
	}
	SCClass* c = SC__Cpp_CurrClass;
	if (c) {
		return (!c->MinOpt);
	}
	return false;
}

void SC_Cpp_Codify(Cpp_Export* self, SCModule* scb, JB_String* fName) {
	JB_Incr(fName);
	SCClass* cls = JB_Incr(scb->Cls);
	if ((!JB_Str_Exists(fName))) {
		if (cls) {
			JB_SetRef(fName, cls->ExportName);
		}
		 else {
			JB_SetRef(fName, scb->ExportName);
		}
	}
	if (scb == SC__Comp_program) {
		JB_SetRef(fName, JB_LUB[1777]);
	}
	Array* ModuleFuncs = JB_Incr(SC_Base_ListFunctions(scb));
	if ((!(((bool)cls) or (JB_Array_SyntaxCast(ModuleFuncs) or ((bool)scb->Access))))) {
		JB_Decr(fName);
		JB_Decr(ModuleFuncs);
		JB_Decr(cls);
		return;
	}
	JB_SetRef(SC__Cpp_CurrClass, cls);
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(fName, JB_LUB[367]));
	FastStringCpp* File = JB_Incr(SC_Cpp_StreamChild(self, _tmPf0));
	JB_Decr(_tmPf0);
	JB_FS_AppendString(self->HeaderProj, JB_LUB[56]);
	JB_FS_AppendString(self->HeaderProj, fName);
	JB_Decr(fName);
	JB_FS_AppendByte(self->HeaderProj, '\n');
	SC_Cpp_ExportModuleProperties(self, scb, self->ModuleProperties);
	if (((bool)cls) and SC_Class_NeedsExport(cls)) {
		SC_Cpp_ExportClass(self, cls, self->ModuleProperties);
		SC_Cpp_OptStart(self, File, cls->MinOpt, true);
		Array* _tmPf1 = JB_Incr(SC_Base_ListFunctions(cls));
		SC_Cpp_CodifyFuncs(self, File, _tmPf1);
		JB_Decr(_tmPf1);
		SC_Cpp_OptEnd(self, File, cls->MinOpt, true);
	}
	JB_Decr(cls);
	SC_Cpp_CodifyFuncs(self, File, ModuleFuncs);
	JB_Decr(ModuleFuncs);
	JB_Decr(File);
	JB_SetRef(SC__Cpp_CurrClass, nil);
}

void SC_Cpp_CodifyFuncs(Cpp_Export* self, FastStringCpp* file, Array* list) {
	{
		int _if0 = 0;
		while (true) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(list, _if0));
			if (f == nil) {
				break;
			}
			if ((!f->IsInline) and SC_Cpp_CanExportFunc(self, f)) {
				SC_Cpp_CppFunc(self, file, f);
			}
			_if0++;
		};
	}
	;
	JB_SetRef(SC__Func_CurrFunc, nil);
}

void SC_Cpp_CodifyInlines(Cpp_Export* self) {
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (f == nil) {
				break;
			}
			if (f->IsInline and SC_Cpp_CanExportFunc(self, f)) {
				SC_Cpp_CppFunc(self, self->Inlines, f);
			}
			_if0++;
		};
	}
	;
	JB_SetRef(SC__Func_CurrFunc, nil);
}

Cpp_Export* SC_Cpp_Constructor(Cpp_Export* self) {
	if (self == nil) {
		self = ((Cpp_Export*)JB_NewClass(&Cpp_ExportData));
	}
	Array* _tmPf0 = JB_Incr((JB_Array_Constructor0(nil)));
	self->Outputs_cpp = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Array* _tmPf1 = JB_Incr((JB_Array_Constructor0(nil)));
	self->Outputs_h = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	FastStringCpp* _tmPf7 = SC_FastStringCpp_Constructor(nil, JB_LUB[0]);
	self->T = JB_Incr(_tmPf7);
	FastStringCpp* _tmPf6 = SC_Cpp_StreamChild(self, JB_LUB[629]);
	self->AllTypes = JB_Incr(_tmPf6);
	FastStringCpp* _tmPf5 = SC_Cpp_StreamChild(self, JB_LUB[1145]);
	self->TypesProj = JB_Incr(_tmPf5);
	FastStringCpp* _tmPf4 = SC_Cpp_StreamChild(self, JB_LUB[945]);
	self->HeaderProj = JB_Incr(_tmPf4);
	FastStringCpp* _tmPf3 = SC_Cpp_StreamChild(self, JB_LUB[920]);
	self->Inlines = JB_Incr(_tmPf3);
	FastStringCpp* _tmPf2 = SC_Cpp_StreamChild(self, JB_LUB[1029]);
	self->ModuleProperties = JB_Incr(_tmPf2);
	SC_Cpp__Init();
	return self;
}

void SC_Cpp_CppFunc(Cpp_Export* self, FastStringCpp* fs, SCFunction* F) {
	JB_SetRef(SC__Func_CurrFunc, F);
	(SC_Func_SyntaxIsSet(F, kSC__FunctionType_AlreadyExported, true));
	JB_String* funcheader = SC_Cpp_FuncHeader(self, fs, F);
	if ((!JB_Str_Exists(funcheader))) {
		return;
	}
	SC_Cpp_SetupFlow(self, F);
	SC_Cpp_FuncStart(self, fs, F, funcheader);
	JB_Msg_Export(SC_Func_SourceArg(F), fs);
	SC_Cpp_OptEnd(self, fs, F->MinOpt, 0);
	JB_FS_AppendString(fs, JB_LUB[49]);
}

void SC_Cpp_Destructor(Cpp_Export* self) {
	JB_Clear(self->Outputs_cpp);
	JB_Clear(self->Outputs_h);
	JB_Clear(self->T);
	JB_Clear(self->AllTypes);
	JB_Clear(self->TypesProj);
	JB_Clear(self->HeaderProj);
	JB_Clear(self->Inlines);
	JB_Clear(self->ModuleProperties);
}

void SC_Cpp_DoInterpreter(Cpp_Export* self) {
	if ((!SC__Options_ListAllLib)) {
		return;
	}
	SC_Cpp_ListAllFuncs(self, self->ModuleProperties);
}

void SC_Cpp_ExportBehaviourHeader(Cpp_Export* self, SCClass* cls) {
	if (cls->IsRole) {
		return;
	}
	SCBehaviour* b = JB_Incr(cls->Behaviour);
	if (b) {
		SC_Cpp_ExportStruct(self, b->FuncTable->Cls, true);
	}
	JB_Decr(b);
}

bool SC_Cpp_ExportBehaviourInstance(Cpp_Export* self, SCClass* cls, FastStringCpp* fs) {
	SCBehaviour* b = JB_Incr(cls->Behaviour);
	if ((!b)) {
		JB_Decr(b);
		return nil;
	}
	SCClass* TableCls = JB_Incr(b->FuncTable->Cls);
	JB_String* N = JB_Incr(SC_Class_CStructName(TableCls));
	JB_Decr(TableCls);
	JB_String* CN = JB_Incr(SC_Class_CStructName(cls));
	JB_FS_AppendString(fs, N);
	JB_FS_AppendString(fs, JB_LUB[158]);
	JB_FS_AppendString(fs, CN);
	JB_FS_AppendString(fs, JB_LUB[1427]);
	JB_FS_AppendString(fs, N);
	JB_FS_AppendString(fs, JB_LUB[160]);
	SC_FastStringCpp_AppendBehaviour(fs, JB_LUB[0], cls->DestructorFunc, nil);
	while (b) {
		{
			Dictionary* _LoopSrcf3 = JB_Incr(b->Interfaces);
			DictionaryReader* _navf1 = JB_Incr(JB_Dict_Navigate(_LoopSrcf3));
			JB_Decr(_LoopSrcf3);
			while (true) {
				SCModule* M = JB_Incr(((SCModule*)JB_DictionaryReader_NextValue(_navf1)));
				if (M == nil) {
					JB_Decr(M);
					break;
				}
				JB_String* s = JB_Incr(SC_Str_InterfaceToBehaviour(M->Name));
				SCFunction* fn = JB_Incr(SC_Class_BestBehaviourFor(cls, s));
				if (fn) {
					SCClass* BaseClass = JB_Incr(SC_Class_InterfaceForBehaviour(cls, fn));
					if (BaseClass) {
						if (M->IsRequiredInterface and (!JB_FreeIfDead(SC_Base_SyntaxAccess(cls->Behaviour, s)))) {
							JB_String* msg = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1015], cls->Name));
							if (true) {
								JB_Msg_SyntaxExpect(cls->Source, msg);
							}
							if (true) {
								JB_Msg_SyntaxExpect(BaseClass->FuncProto->Source, msg);
							}
							JB_Decr(msg);
						}
						SC_FastStringCpp_AppendBehaviour(fs, s, fn, BaseClass);
					}
					JB_Decr(BaseClass);
				}
				 else {
					if (true) {
						JB_String* _tmPf4 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1015], s));
						JB_Msg_SyntaxExpect(cls->Source, _tmPf4);
						JB_Decr(_tmPf4);
					}
				}
				JB_Decr(M);
				JB_Decr(s);
				JB_Decr(fn);
			};
			JB_Decr(_navf1);
		}
		;
		JB_SetRef(b, SC_Beh_Upwards(b));
	};
	JB_Decr(b);
	JB_FS_AppendString(fs, JB_LUB[40]);
	//;
	JB_FS_AppendString(fs, N);
	JB_Decr(N);
	JB_FS_AppendByte(fs, ' ');
	JB_FS_AppendString(fs, CN);
	JB_FS_AppendString(fs, JB_LUB[1435]);
	JB_FS_AppendString(fs, CN);
	JB_Decr(CN);
	JB_FS_AppendString(fs, JB_LUB[1428]);
	//;
	return true;
}

void SC_Cpp_ExportClass(Cpp_Export* self, SCClass* cls, FastStringCpp* CppFile) {
	JB_Incr(cls);
	if (SC_Class_IsDataTypeOrFP(cls)) {
		JB_Decr(cls);
		return;
	}
	if (SC_Class_IsBehaviourTable(cls)) {
		JB_Decr(cls);
		return;
	}
	if (cls->IsRole == 1) {
		JB_Decr(cls);
		return;
	}
	if (cls->IsRole != 2) {
		if (cls->IsWrapper) {
			SC_Cpp_ExportBehaviourHeader(self, cls);
		}
		if (cls->IsWrapper) {
			JB_Decr(cls);
			return;
		}
		if (SC_Class_IsStruct(cls)) {
			SC_Cpp_ExportStruct(self, cls, false);
			JB_Decr(cls);
			return;
		}
	}
	FastStringCpp* HFile = JB_Incr(self->TypesProj);
	if ((!cls->IsRole)) {
		SC_Cpp_ExportBehaviourHeader(self, cls);
	}
	JB_FS_AppendString(HFile, JB_LUB[74]);
	JB_String* _tmPf4 = JB_Incr(SC_Class_CStructName(cls));
	JB_FS_AppendString(HFile, _tmPf4);
	JB_Decr(_tmPf4);
	JB_FS_AppendString(HFile, JB_LUB[137]);
	if (cls->Super) {
		JB_String* _tmPf5 = JB_Incr(SC_Class_CStructName(cls->Super));
		JB_FS_AppendString(HFile, _tmPf5);
		JB_Decr(_tmPf5);
	}
	 else {
		JB_FS_AppendString(HFile, JB_LUB[966]);
	}
	JB_FS_AppendString(HFile, JB_LUB[137]);
	{
		Array* _LoopSrcf3 = JB_Incr(cls->Properties);
		int _if1 = 0;
		while (true) {
			SCDecl* prop = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1)));
			if (prop == nil) {
				JB_Decr(prop);
				break;
			}
			JB_FS_AppendString(HFile, JB_LUB[43]);
			SC_Cpp__WriteDecl(prop, HFile, nil);
			JB_Decr(prop);
			JB_FS_AppendByte(HFile, ';');
			_if1++;
		};
		JB_Decr(_LoopSrcf3);
	}
	;
	JB_FS_AppendString(HFile, JB_LUB[67]);
	JB_Decr(HFile);
	if ((!cls->IsRole)) {
		bool HasTable = SC_Cpp_ExportBehaviourInstance(self, cls, CppFile);
		//;
		JB_FS_AppendString(CppFile, JB_LUB[946]);
		JB_String* _tmPf6 = JB_Incr(SC_Class_CStructName(cls));
		JB_FS_AppendString(CppFile, _tmPf6);
		JB_Decr(_tmPf6);
		JB_FS_AppendString(CppFile, JB_LUB[303]);
		JB_String* _tmPf7 = JB_Incr(SC_Class_CSuperStructName(cls));
		JB_FS_AppendString(CppFile, _tmPf7);
		JB_Decr(_tmPf7);
		JB_FS_AppendString(CppFile, JB_LUB[303]);
		//;
		if ((!HasTable)) {
			JB_SetRef(cls, JB_TypeObject);
		}
		JB_String* _tmPf8 = JB_Incr(SC_Class_CStructName(cls));
		JB_FS_AppendString(CppFile, _tmPf8);
		JB_Decr(_tmPf8);
		JB_FS_AppendString(CppFile, JB_LUB[1436]);
	}
	JB_Decr(cls);
}

void SC_Cpp_ExportModuleProperties(Cpp_Export* self, SCModule* modl, FastStringCpp* IntoModule) {
	FastStringCpp* fs = JB_Incr(IntoModule);
	if ((!fs)) {
		JB_SetRef(fs, self->TypesProj);
	}
	{
		DictionaryReader* _df0 = JB_Incr(JB_Dict_Navigate(modl->Access));
		while (JB_Nav_MoveNext(_df0)) {
			SCDecl* prop = JB_Incr(SC_DictionaryReader_ValueDecl(_df0));
			if ((!prop)) {
				0;
			}
			 else if (SC_Decl_SyntaxIs(prop, kSC__SCDeclInfo_Const)) {
				if ((!IntoModule)) {
					SC_Cpp__WriteConst(prop, fs);
					JB_FS_AppendByte(fs, '\n');
				}
			}
			 else if (SC_Decl_TypeIsReached(prop)) {
				if ((!IntoModule)) {
					JB_FS_AppendString(fs, JB_LUB[1645]);
				}
				 else if (SC_Decl_SyntaxIs(prop, kSC__SCDeclInfo_API)) {
					JB_FS_AppendString(fs, JB_LUB[1450]);
				}
				if (((bool)IntoModule) and SC_Decl_SyntaxIs(prop, kSC__SCDeclInfo_GameFlyingMem)) {
					JB_FreeIfDead(JB_Str_ReplaceAll(prop->StringData, JB_LUB[237], prop->Name, false, fs));
				}
				 else {
					SC_Cpp__WriteDecl(prop, fs, nil);
				}
				JB_FS_AppendByte(fs, ';');
				JB_FS_AppendByte(fs, '\n');
			}
			JB_Decr(prop);
		};
		JB_Decr(_df0);
	}
	;
	JB_Decr(fs);
}

bool SC_Cpp_ExportOneProperty(Cpp_Export* self, SCClass* cls, FastStringCpp* fs, JB_String* Only) {
	{
		Array* _LoopSrcf2 = JB_Incr(cls->Properties);
		int _if0 = 0;
		while (true) {
			SCDecl* prop = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (prop == nil) {
				JB_Decr(prop);
				break;
			}
			if (JB_Str_Equals(prop->Name, Only, false)) {
				SC_Cpp_AppendPropField(self, prop, fs);
				JB_Decr(prop);
				JB_Decr(_LoopSrcf2);
				return true;
			}
			JB_Decr(prop);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	return false;
}

void SC_Cpp_ExportOneSyx(Cpp_Export* self, int i, FastStringCpp* fs) {
	JB_String* _tmPf1 = JB_Incr(((JB_String*)JB_Array_Value(SC__Comp_SyxArray, i)));
	JB_String* syx = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	//;
	JB_FS_AppendString(fs, JB_LUB[231]);
	JB_FS_AppendString(fs, syx);
	JB_Decr(syx);
	JB_FS_AppendByte(fs, ' ');
	JB_FS_AppendInt32(fs, i);
	JB_FS_AppendByte(fs, '\n');
	//;
}

void SC_Cpp_ExportProperties(Cpp_Export* self, SCClass* cls, FastStringCpp* fs, JB_String* Ignore) {
	{
		Array* _LoopSrcf2 = JB_Incr(cls->Properties);
		int _if0 = 0;
		while (true) {
			SCDecl* prop = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (prop == nil) {
				JB_Decr(prop);
				break;
			}
			if ((!JB_Str_Equals(prop->Name, Ignore, false))) {
				SC_Cpp_AppendPropField(self, prop, fs);
			}
			JB_Decr(prop);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	};
}

void SC_Cpp_ExportStruct(Cpp_Export* self, SCClass* cls, bool IsBehaviour) {
	FastStringCpp* fs = JB_Incr(self->TypesProj);
	SC_Class_WriteStructOrUnion(cls, fs);
	if (cls->IsModel) {
		JB_FS_AppendString(fs, JB_LUB[1446]);
	}
	JB_String* _tmPf0 = JB_Incr(SC_Class_CStructName(cls));
	JB_FS_AppendString(fs, _tmPf0);
	JB_Decr(_tmPf0);
	if (cls->Super) {
		JB_FS_AppendString(fs, JB_LUB[560]);
		JB_String* _tmPf1 = JB_Incr(SC_Class_CStructName(cls->Super));
		JB_FS_AppendString(fs, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_FS_AppendString(fs, JB_LUB[205]);
	if (IsBehaviour) {
		if ((!cls->Super)) {
			SC_Cpp_AppendCppField(self, JB_LUB[2043], fs);
			SC_Cpp_ExportOneProperty(self, cls, fs, JB_LUB[1895]);
		}
		SC_Cpp_ExportProperties(self, cls, fs, JB_LUB[1895]);
	}
	 else {
		SC_Cpp_ExportProperties(self, cls, fs, nil);
	}
	JB_FS_AppendString(fs, JB_LUB[87]);
	JB_Decr(fs);
}

void SC_Cpp_ExportSyx(Cpp_Export* self) {
	if ((!JB_Array_SyntaxCast(SC__Comp_SyxArray))) {
		return;
	}
	FastStringCpp* fs = JB_Incr(SC_Cpp_StreamChild(self, JB_LUB[1255]));
	{
		int _LoopSrcf1 = JB_Array_Size(SC__Comp_SyxArray);
		int i = 0;
		while (i < _LoopSrcf1) {
			SC_Cpp_ExportOneSyx(self, i, fs);
			i++;
		};
	}
	;
	JB_Decr(fs);
}

void SC_Cpp_FinalMergeOutputIntoACpp(Cpp_Export* self) {
	FastStringCpp* fs = JB_Incr(SC_FastStringCpp_Constructor(nil, JB_LUB[0]));
	JB_FS_AppendString(fs, JB_LUB[70]);
	JB_String* _tmPf10 = JB_Incr(SC_Cpp__CppLicence());
	JB_FS_AppendString(fs, _tmPf10);
	JB_Decr(_tmPf10);
	SC_FS_IncludeH(fs, JB_LUB[974]);
	SC_FS_IncludeH(fs, JB_LUB[945]);
	{
		Array* _LoopSrcf3 = JB_Incr(SC__Cpp_H_PostInput);
		int _if1 = 0;
		while (true) {
			JB_String* h = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf3, _if1)));
			if (h == nil) {
				JB_Decr(h);
				break;
			}
			SC_FS_IncludeH(fs, h);
			JB_Decr(h);
			_if1++;
		};
		JB_Decr(_LoopSrcf3);
	}
	;
	JB_FS_AppendString(fs, JB_LUB[64]);
	JB_FS_AppendString(fs, JB_LUB[1645]);
	SC_Cpp__GenLub(fs);
	//;
	JB_FS_AppendString(fs, JB_LUB[1645]);
	JB_String* _tmPf11 = JB_Incr(SC_Class_CStructName(JB_TypeObject->Behaviour->FuncTable->Cls));
	JB_FS_AppendString(fs, _tmPf11);
	JB_Decr(_tmPf11);
	JB_FS_AppendString(fs, JB_LUB[159]);
	//;
	if (SC_Cpp__DoSavers()) {
		SC_Cpp__CreateClassListHeader(fs, JB_LUB[568]);
	}
	SC_Cpp__GenStrings(self->ModuleProperties);
	JB_String* _tmPf12 = JB_Incr(JB_FS_SyntaxCast(self->ModuleProperties));
	JB_File* _tmPf13 = JB_Incr(SC_Cpp__Product(JB_LUB[960]));
	SC_Cpp__SmartWrite(_tmPf12, _tmPf13);
	JB_Decr(_tmPf12);
	JB_Decr(_tmPf13);
	(JB_FS_LengthSet(self->ModuleProperties, 0));
	{
		Array* _LoopSrcf6 = JB_Incr(self->Outputs_cpp);
		int _if4 = 0;
		while (true) {
			FastStringCpp* f = JB_Incr(((FastStringCpp*)JB_Array_Value(_LoopSrcf6, _if4)));
			if (f == nil) {
				JB_Decr(f);
				break;
			}
			JB_String* _tmPf14 = JB_Incr(SC_Cpp__SplitCpp(f, f->Cpp_Name));
			JB_Decr(f);
			JB_FS_AppendString(fs, _tmPf14);
			JB_Decr(_tmPf14);
			_if4++;
		};
		JB_Decr(_LoopSrcf6);
	}
	;
	if (SC_Cpp__DoSavers()) {
		SC_Cpp__CreateClassListFunc(fs);
	}
	JB_FS_AppendString(fs, JB_LUB[2082]);
	{
		Array* _LoopSrcf9 = JB_Incr(SC__Cpp_Cpp_Includes);
		int _if7 = 0;
		while (true) {
			JB_String* i = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf9, _if7)));
			if (i == nil) {
				JB_Decr(i);
				break;
			}
			JB_FS_AppendByte(fs, ' ');
			JB_FS_AppendString(fs, i);
			JB_Decr(i);
			_if7++;
		};
		JB_Decr(_LoopSrcf9);
	}
	;
	JB_String* _tmPf15 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_File* _tmPf16 = JB_Incr(SC_Cpp__CppProduct());
	SC_Cpp__SmartWrite(_tmPf15, _tmPf16);
	JB_Decr(_tmPf15);
	JB_Decr(_tmPf16);
}

JB_String* SC_Cpp_FuncHeader(Cpp_Export* self, FastStringCpp* fs, SCFunction* F) {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	SC_Cpp__WriteFunctionHeader(F, self->T);
	JB_SetRef(rz, JB_FS_GetResult(self->T));
	JB_FS_AppendString(self->HeaderProj, rz);
	JB_FS_AppendString(self->HeaderProj, JB_LUB[569]);
	if (F->IsExternalLib) {
		JB_SetRef(rz, JB_LUB[0]);
	}
	JB_SafeDecr(rz);
	return rz;
}

void SC_Cpp_FuncStart(Cpp_Export* self, FastStringCpp* fs, SCFunction* f, JB_String* funcheader) {
	if (f->IsAPI) {
		JB_FS_AppendString(fs, JB_LUB[1450]);
	}
	SC_Cpp_OptStart(self, fs, f->MinOpt, 0);
	JB_FS_AppendString(fs, funcheader);
	(JB_FS_LengthSet(self->T, 0));
	JB_FS_AppendByte(fs, ' ');
}

void SC_Cpp_ListAllFuncs(Cpp_Export* self, FastStringCpp* fs) {
	JB_FS_AppendString(fs, JB_LUB[396]);
	{
		Array* _LoopSrcf3 = JB_Incr(SC__ExecTable_Funcs);
		int _if1 = 0;
		while (true) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf3, _if1)));
			if (f == nil) {
				JB_Decr(f);
				break;
			}
			if (SC_Base_IsSTDLib(f) and (f->IsCppInBuilt == 1)) {
				SC_Cpp_MakeWrapperFor(self, fs, f);
			}
			JB_Decr(f);
			_if1++;
		};
		JB_Decr(_LoopSrcf3);
	}
	;
	JB_FS_AppendString(fs, JB_LUB[76]);
	FastString* bs = JB_Incr(JB_bin_Constructor(nil, JB_SyxArg, JB_LUB[0]));
	{
		Array* _LoopSrcf6 = JB_Incr(SC__ExecTable_Funcs);
		int _if4 = 0;
		while (true) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf6, _if4)));
			if (f == nil) {
				JB_Decr(f);
				break;
			}
			if (SC_Base_IsSTDLib(f)) {
				JB_FS_AppendString(fs, JB_LUB[35]);
				JB_String* _tmPf7 = JB_Incr(SC_Func_WrappedName(f));
				JB_bin_Add(bs, JB_SyxTmp, _tmPf7, false);
				JB_Decr(_tmPf7);
				JB_String* _tmPf8 = JB_Incr(SC_Func_WrappedName(f));
				JB_FS_AppendString(fs, _tmPf8);
				JB_Decr(_tmPf8);
				JB_FS_AppendString(fs, JB_LUB[302]);
			}
			JB_Decr(f);
			_if4++;
		};
		JB_Decr(_LoopSrcf6);
	}
	;
	JB_FS_AppendString(fs, JB_LUB[449]);
	JB_String* str = JB_Incr(JB_FS_GetResult(bs));
	JB_Decr(bs);
	JB_String* s = JB_Incr(JB_Str_Compress(str, kJB__MZLab_Default, nil));
	JB_Decr(str);
	Message* cmp_test = JB_Incr(JB_Str_Parse(s, JB_SyxArg, true));
	if ((!cmp_test)) {
		JB_Str_SyntaxExpect(JB_LUB[452]);
	}
	JB_FS_AppendString(fs, JB_LUB[1452]);
	SC_FS_AppendCpp(fs, s);
	JB_FS_AppendString(fs, JB_LUB[568]);
	//;
	JB_FS_AppendString(fs, JB_LUB[78]);
	JB_FS_AppendInt32(fs, JB_Str_Length(s));
	JB_Decr(s);
	JB_FS_AppendString(fs, JB_LUB[293]);
	//;
	JB_Decr(cmp_test);
}

void SC_Cpp_MakeWrapperFor(Cpp_Export* self, FastStringCpp* fs, SCFunction* f) {
	JB_String* n = JB_Incr(SC_Func_WrappedName(f));
	SC_Cpp__WriteFuncSub(f, n, fs);
	JB_Decr(n);
	JB_FS_AppendString(fs, JB_LUB[207]);
	if (f->ReturnType) {
		JB_FS_AppendString(fs, JB_LUB[1900]);
	}
	JB_FS_AppendString(fs, f->ExportName);
	SC_Cpp__WriteFuncArgs(f, fs, true);
	JB_FS_AppendString(fs, JB_LUB[571]);
}

void SC_Cpp_OptEnd(Cpp_Export* self, FastStringCpp* fs, int m, bool force) {
	if (((bool)m) and SC_Cpp_CanOpt(self, force)) {
		JB_FS_AppendString(fs, JB_LUB[63]);
	}
}

#pragma GCC optimize ("O3")
void SC_Cpp_OptStart(Cpp_Export* self, FastStringCpp* fs, int m, bool force) {
	if (((bool)m) and SC_Cpp_CanOpt(self, force)) {
		JB_String* s = JB_Incr(JB_LUB[1911]);
		if (m <= 3) {
			JB_SetRef(s, JB_int_RenderFS(m, nil));
		}
		//;
		JB_FS_AppendString(fs, JB_LUB[233]);
		JB_FS_AppendString(fs, s);
		JB_Decr(s);
		JB_FS_AppendString(fs, JB_LUB[221]);
		//;
	}
}
#pragma GCC reset_options



void SC_Cpp_PreRun(Cpp_Export* self) {
	JB_File* _tmPf2 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_File* _tmPf1 = JB_Incr(JB_File_SyntaxAccess(_tmPf2, JB_LUB[1970]));
	JB_Decr(_tmPf2);
	SC_Crkt__Correct(_tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(self->AllTypes, JB_LUB[62]);
	JB_FS_AppendByte(self->HeaderProj, '\n');
	JB_FS_AppendString(self->ModuleProperties, JB_LUB[395]);
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[1562]);
	JB_FS_AppendString(_fsf0, SC__Comp_ProjectName);
	JB_FS_AppendString(_fsf0, JB_LUB[368]);
	JB_String* str = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_FS_AppendString(self->ModuleProperties, str);
	JB_Decr(str);
}

void SC_Cpp_Run(Cpp_Export* self) {
	{
		Array* _LoopSrcf2 = JB_Incr(SC__Comp_ClassList);
		int _if0 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			if ((!SC_Class_IsFunc(c))) {
				SC_Cpp__WriteType(c, self->AllTypes, true);
			}
			JB_Decr(c);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	{
		Array* _LoopSrcf5 = JB_Incr(SC__Comp_ClassList);
		int _if3 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf5, _if3)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			if (SC_Class_IsFunc(c)) {
				SC_Cpp__WriteType(c, self->AllTypes, false);
			}
			JB_Decr(c);
			_if3++;
		};
		JB_Decr(_LoopSrcf5);
	}
	;
	{
		Array* _LoopSrcf8 = JB_Incr(SC__Comp_ModuleList);
		int _if6 = 0;
		while (true) {
			SCModule* c = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf8, _if6)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Cpp_Codify(self, c, JB_LUB[0]);
			JB_Decr(c);
			_if6++;
		};
		JB_Decr(_LoopSrcf8);
	}
	;
	{
		Array* _LoopSrcf11 = JB_Incr(SC__Comp_ModuleList);
		int _if9 = 0;
		while (true) {
			SCModule* c = JB_Incr(((SCModule*)JB_Array_Value(_LoopSrcf11, _if9)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Cpp_ExportModuleProperties(self, c, nil);
			JB_Decr(c);
			_if9++;
		};
		JB_Decr(_LoopSrcf11);
	}
	;
	SC_Cpp_CodifyInlines(self);
	if (SC__Options_ProjectIsLibrary) {
		JB_File* WriteTo = JB_Incr(SC_Cpp__APIHeader());
		if (JB_File_SyntaxCast(WriteTo)) {
			FastStringCpp* File = JB_Incr(SC_Cpp_StreamChild(self, JB_LUB[612]));
			JB_FS_AppendString(File, JB_LUB[71]);
			JB_FS_AppendString(File, JB_LUB[235]);
			SC_Cpp_CodifyFuncs(self, File, SC__Comp_API_Funcs);
			JB_FS_AppendString(File, JB_LUB[234]);
			JB_FS_AppendString(File, JB_LUB[397]);
			JB_Decr(File);
			SC_Cpp_WriteAPIHeader(self, WriteTo);
		}
		JB_Decr(WriteTo);
	}
}

void SC_Cpp_SetupFlow(Cpp_Export* self, SCFunction* f) {
	JB_SetRef(SC__Func_CurrFunc, f);
	if (SC__Options_GenFlowControlCode and (!f->FlowDisabled)) {
		JB_SetRef(SC__Cpp_IfName, JB_LUB[1703]);
		JB_SetRef(SC__Cpp_WhileName, JB_LUB[2053]);
		JB_SetRef(SC__Comp_TernaryFunc->ExportName, JB_LUB[973]);
	}
	 else {
		JB_SetRef(SC__Cpp_IfName, JB_LUB[1698]);
		JB_SetRef(SC__Cpp_WhileName, JB_LUB[2048]);
		JB_SetRef(SC__Comp_TernaryFunc->ExportName, JB_LUB[972]);
	}
}

FastStringCpp* SC_Cpp_StreamChild(Cpp_Export* self, JB_String* s) {
	FastStringCpp* rz = nil;
	JB_String* _tmPf0 = JB_Incr(JB_Str_TrimExtAndPath(s, true));
	JB_SetRef(rz, SC_FastStringCpp_Constructor(nil, _tmPf0));
	JB_Decr(_tmPf0);
	if (JB_Str_OperatorIsa(s, JB_LUB[1688])) {
		JB_Array_SyntaxAppend(self->Outputs_h, rz);
		JB_FS_AppendString(rz, JB_LUB[398]);
		JB_FS_AppendString(rz, s);
	}
	 else {
		JB_Array_SyntaxAppend(self->Outputs_cpp, rz);
	}
	JB_FS_AppendByte(rz, '\n');
	JB_SafeDecr(rz);
	return rz;
}

void SC_Cpp_WriteAPIFuncHeader(Cpp_Export* self, SCFunction* F, FastStringCpp* fs) {
	SC__Cpp_WriteAPI = true;
	SC_Cpp__WriteFunctionHeader(F, fs);
	SC__Cpp_WriteAPI = false;
}

void SC_Cpp_WriteAPIHeader(Cpp_Export* self, JB_File* destfile) {
	if (destfile == nil) {
		return;
	}
	FastStringCpp* fs = JB_Incr(SC_FastStringCpp_Constructor(nil, JB_LUB[0]));
	JB_String* _tmPf14 = JB_Incr(SC_Cpp__CppLicence());
	JB_FS_AppendString(fs, _tmPf14);
	JB_Decr(_tmPf14);
	JB_FS_AppendString(fs, JB_LUB[51]);
	{
		Array* _LoopSrcf7 = JB_Incr(SC__Comp_API_List);
		int _if5 = 0;
		while (true) {
			Message* m = JB_Incr(((Message*)JB_Array_Value(_LoopSrcf7, _if5)));
			if (m == nil) {
				JB_Decr(m);
				break;
			}
			if (JB_Msg_SyntaxEquals(m, JB_LUB[1546], false)) {
				Message* f = JB_Incr(((Message*)JB_Ring_First(m)));
				SCClass* cls = JB_Incr(SC_Comp__SyntaxAccess(f));
				JB_Decr(f);
				if ((!cls)) {
					JB_Decr(cls);
					JB_Decr(m);
					JB_Decr(_LoopSrcf7);
					JB_Decr(fs);
					return;
				}
				if (SC_Class_IsObject(cls)) {
					//;
					JB_FS_AppendString(fs, JB_LUB[1974]);
					JB_String* _tmPf15 = JB_Incr(SC_Class_APIStructName(cls));
					JB_FS_AppendString(fs, _tmPf15);
					JB_Decr(_tmPf15);
					JB_FS_AppendString(fs, JB_LUB[153]);
					//;
				}
				 else if (SC_Class_IsDataTypeOrFP(cls)) {
					//;
					JB_FS_AppendString(fs, JB_LUB[2007]);
					JB_String* _tmPf16 = JB_Incr(SC_Class_CStructName(cls->Super));
					JB_FS_AppendString(fs, _tmPf16);
					JB_Decr(_tmPf16);
					JB_FS_AppendByte(fs, ' ');
					JB_String* _tmPf17 = JB_Incr(SC_Class_APIStructName(cls));
					JB_FS_AppendString(fs, _tmPf17);
					JB_Decr(_tmPf17);
					JB_FS_AppendString(fs, JB_LUB[568]);
					//;
				}
				 else {
					if (true) {
						JB_Msg_SyntaxExpect(m, JB_LUB[700]);
					}
				}
				JB_Decr(cls);
			}
			JB_Decr(m);
			_if5++;
		};
		JB_Decr(_LoopSrcf7);
	}
	;
	SCClass* PrevCls = nil;
	{
		Array* _LoopSrcf10 = JB_Incr(SC__Comp_API_Funcs);
		int _if8 = 0;
		while (true) {
			SCFunction* f = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf10, _if8)));
			if (f == nil) {
				JB_Decr(f);
				break;
			}
			if (f->Cls != PrevCls) {
				JB_SetRef(PrevCls, f->Cls);
				JB_FS_AppendString(fs, JB_LUB[50]);
				if (PrevCls) {
					JB_FS_AppendString(fs, PrevCls->Name);
				}
				 else {
					JB_FS_AppendString(fs, JB_LUB[900]);
				}
				JB_FS_AppendString(fs, JB_LUB[178]);
			}
			if ((!f->IsWrapper)) {
				SC_Cpp_WriteAPIFuncHeader(self, f, fs);
			}
			JB_FS_AppendByte(fs, ';');
			if (JB_Str_Exists(f->Description)) {
				//;
				JB_FS_AppendString(fs, JB_LUB[150]);
				JB_FS_AppendString(fs, f->Description);
				JB_FS_AppendString(fs, JB_LUB[136]);
				//;
			}
			JB_Decr(f);
			JB_FS_AppendByte(fs, '\n');
			_if8++;
		};
		JB_Decr(_LoopSrcf10);
	}
	;
	JB_Decr(PrevCls);
	if (JB_Array_SyntaxCast(SC__Comp_SyxArray)) {
		JB_FS_AppendString(fs, JB_LUB[52]);
		{
			Array* _LoopSrcf13 = JB_Incr(SC__Comp_SyxArray);
			int _if11 = 0;
			while (true) {
				JB_String* s = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf13, _if11)));
				if (s == nil) {
					JB_Decr(s);
					break;
				}
				JB_String* slower = JB_Incr(JB_Str_LowerCase(s));
				SyntaxObj* _tmPf18 = JB_Incr(((SyntaxObj*)JB_Dict_ValueStr(JB__SyxDict_, slower)));
				int id = ((int)_tmPf18->ID);
				JB_Decr(_tmPf18);
				//;
				JB_FS_AppendString(fs, JB_LUB[230]);
				JB_FS_AppendString(fs, s);
				JB_Decr(s);
				JB_FS_AppendByte(fs, ' ');
				JB_FS_AppendInt32(fs, id);
				JB_FS_AppendString(fs, JB_LUB[568]);
				//;
				//;
				JB_FS_AppendString(fs, JB_LUB[229]);
				JB_FS_AppendString(fs, slower);
				JB_Decr(slower);
				JB_FS_AppendByte(fs, ' ');
				JB_FS_AppendInt32(fs, id);
				JB_FS_AppendByte(fs, '\n');
				//;
				_if11++;
			};
			JB_Decr(_LoopSrcf13);
		};
	}
	JB_FS_AppendString(fs, JB_LUB[54]);
	JB_String* _tmPf19 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	SC_Cpp__SmartWrite(_tmPf19, destfile);
	JB_Decr(_tmPf19);
}

void SC_Cpp_WriteHeader(Cpp_Export* self) {
	FastStringCpp* fs = JB_Incr(SC_FastStringCpp_Constructor(nil, JB_LUB[0]));
	JB_FS_AppendString(fs, JB_LUB[53]);
	JB_String* _tmPf6 = JB_Incr(SC_Cpp__CppLicence());
	JB_FS_AppendString(fs, _tmPf6);
	JB_Decr(_tmPf6);
	JB_FS_AppendString(fs, JB_LUB[61]);
	{
		Array* _LoopSrcf2 = JB_Incr(SC__Cpp_H_Input);
		int _if0 = 0;
		while (true) {
			JB_String* h = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (h == nil) {
				JB_Decr(h);
				break;
			}
			SC_FS_IncludeH(fs, h);
			JB_Decr(h);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_FS_AppendString(fs, JB_LUB[55]);
	{
		Array* _LoopSrcf5 = JB_Incr(self->Outputs_h);
		int _if3 = 0;
		while (true) {
			FastStringCpp* f = JB_Incr(((FastStringCpp*)JB_Array_Value(_LoopSrcf5, _if3)));
			if (f == nil) {
				JB_Decr(f);
				break;
			}
			JB_FS_AppendFastString(fs, f);
			JB_Decr(f);
			JB_FS_AppendByte(fs, '\n');
			_if3++;
		};
		JB_Decr(_LoopSrcf5);
	}
	;
	JB_FS_AppendString(fs, JB_LUB[86]);
	JB_String* _tmPf7 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_File* _tmPf8 = JB_Incr(SC_Cpp__HProduct());
	SC_Cpp__SmartWrite(_tmPf7, _tmPf8);
	JB_Decr(_tmPf7);
	JB_Decr(_tmPf8);
}

JB_File* SC_Cpp__APIHeader() {
	JB_File* rz = nil;
	Message* arg = JB_Incr(JB_Msg_Last(SC__Comp_API_Place, JB_SyxArg));
	Message* _tmPf1 = JB_Incr(JB_Msg_FindSyxName(arg, JB_SyxTmp, JB_LUB[1752], false));
	Message* ForLib = JB_Incr(JB_Msg_NeedSyx(_tmPf1, JB_SyxStr));
	JB_Decr(_tmPf1);
	if (ForLib) {
		Message* _tmPf2 = JB_Incr(JB_Msg_FindSyxName(arg, JB_SyxTmp, JB_LUB[1640], false));
		Message* FolName = JB_Incr(JB_Msg_NeedSyx(_tmPf2, JB_SyxStr));
		JB_Decr(_tmPf2);
		if (FolName) {
			JB_File* Fol = JB_Incr(JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, FolName->Name));
			if (JB_File_SyntaxCast(Fol)) {
				FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
				JB_FS_AppendString(_fsf0, JB_LUB[797]);
				JB_String* _tmPf3 = JB_Incr(SC_Msg_FileLocation(arg));
				JB_FS_AppendString(_fsf0, _tmPf3);
				JB_Decr(_tmPf3);
				JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf0));
				JB_Decr(_fsf0);
				if (JB_File_MustExist(Fol, _tmPf4)) {
					JB_String* _tmPf5 = JB_Incr(JB_Str_OperatorPlus(SC__Comp_ProjectName, JB_LUB[1458]));
					JB_SetRef(rz, JB_File_SyntaxAccess(Fol, _tmPf5));
					JB_Decr(_tmPf5);
				}
				JB_Decr(_tmPf4);
			}
			JB_Decr(Fol);
		}
		JB_Decr(FolName);
	}
	JB_Decr(arg);
	JB_Decr(ForLib);
	JB_SafeDecr(rz);
	return rz;
}

void SC_Cpp__C_FSListComma(Message* self, FastStringCpp* fs) {
	{
		Message* item = JB_Incr(((Message*)JB_Ring_First(self)));
		Message* _firstf2 = JB_Incr(item);
		while (item) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(item)));
			if (_firstf2 != item) {
				JB_FS_AppendString(fs, JB_LUB[303]);
			}
			//start;
			JB_Msg_Export(item, fs);
			JB_SetRef(item, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(item);
		JB_Decr(_firstf2);
		;
	};
}

bool SC_Cpp__C_OneParamType(FastStringCpp* fs, Message* Curr, SCDecl* D) {
	if ((!D)) {
		return nil;
	}
	SCClass* ActualType = JB_Incr(SC_ClassOfObjForC(Curr));
	if ((!ActualType)) {
		JB_Decr(ActualType);
		return nil;
	}
	if (ActualType != D->Type) {
		JB_FS_AppendByte(fs, '(');
		JB_FS_AppendByte(fs, '(');
		SC_Cpp__WriteDeclNoName(D, fs);
		JB_FS_AppendByte(fs, ')');
		JB_Decr(ActualType);
		return true;
	}
	JB_Decr(ActualType);
	return false;
}

void SC_Cpp__C_ParamsRender(Message* self, FastStringCpp* fs) {
	JB_FS_AppendByte(fs, '(');
	SC_Cpp__C_FSListComma(self, fs);
	JB_FS_AppendByte(fs, ')');
}

void SC_Cpp__C_RenderAcc(Message* self, FastStringCpp* fs) {
	JB_Msg_Export(((Message*)JB_Ring_First(self)), fs);
	JB_FS_AppendByte(fs, '[');
	JB_Msg_Export(((Message*)JB_Ring_First(((Message*)JB_Tree_Second(self)))), fs);
	JB_FS_AppendByte(fs, ']');
}

void SC_Cpp__C_RenderArel(Message* self, FastStringCpp* fs) {
	JB_Msg_Export(((Message*)JB_Ring_First(self)), fs);
	byte s = JB_Str_First(self->Name);
	if ((s != '&') and (s != '!')) {
		JB_FS_AppendString(fs, self->Name);
	}
}

void SC_Cpp__C_RenderArg(Message* self, FastStringCpp* fs) {
	JB_FS_AppendByte(fs, '{');
	fs->Indent++;
	{
		Message* ch = ((Message*)JB_Ring_First(self));
		while (ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(ch));
			JB_FS_LineIndent(fs);
			JB_Msg_Export(ch, fs);
			if ((!(SC_Msg_OperatorIsTmp(ch, JB_LUB[1698]) or (SC_Msg_OperatorIsTmp(ch, JB_LUB[1624]) or SC_Msg_OperatorIsTmp(ch, JB_LUB[1622]))))) {
				JB_FS_AppendByte(fs, ';');
			}
			ch = _Nf1;
		};
		;
	}
	;
	fs->Indent--;
	JB_FS_LineIndent(fs);
	JB_FS_AppendByte(fs, '}');
	if (((Message*)JB_Ring_NextSib(self))) {
		JB_FS_LineIndent(fs);
	}
}

void SC_Cpp__C_RenderBak(Message* self, FastStringCpp* fs) {
	JB_FS_AppendString(fs, self->Name);
}

void SC_Cpp__C_RenderBra(Message* self, FastStringCpp* fs) {
	Message* f = ((Message*)JB_Ring_First(self));
	if ((!(JB_Msg_OperatorIn(self, JB_SyxArg) and (JB_Msg_EqualsSyx(f, JB_SyxThg, false))))) {
		JB_FS_AppendByte(fs, '(');
		JB_Msg_Export(f, fs);
		JB_FS_AppendByte(fs, ')');
	}
}

void SC_Cpp__C_RenderBrel(Message* self, FastStringCpp* fs) {
	JB_FS_AppendByte(fs, '(');
	JB_String* s = self->Name;
	if (JB_Str_Equals(s, JB_LUB[2083], false)) {
		s = JB_LUB[2083];
	}
	JB_FS_AppendString(fs, s);
	SC_Cpp__RenderInBracketsIfRel(((Message*)JB_Ring_First(self)), fs);
	JB_FS_AppendByte(fs, ')');
}

void SC_Cpp__C_RenderChr(Message* self, FastStringCpp* fs) {
	JB_FS_AppendByte(fs, '\'');
	byte b = JB_Str_First(self->Name);
	if ((b < 32) and ((b != 9) and (b != 10))) {
		JB_FS_AppendString(fs, JB_LUB[1419]);
		JB_FS_AppendHex(fs, b, 2);
	}
	 else {
		JB_String* _tmPf0 = JB_Incr(JB_Str_EscapeChr(self->Name));
		JB_FS_AppendString(fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_FS_AppendByte(fs, '\'');
}

void SC_Cpp__C_RenderDcl(Message* self, FastStringCpp* fs) {
	Message* name = SC_Msg_GetDclName(self, false);
	SCDecl* d = SC_Msg_AsDecl(name);
	if ((!d)) {
		JB_Object_SyntaxExpect(nil);
		return;
	}
	SC_Cpp__WriteDecl(d, fs, SC_DeclsDefault(((Message*)JB_Ring_Last(self))));
}

void SC_Cpp__C_RenderDot(Message* self, FastStringCpp* fs) {
	SCDecl* obj = SC_Msg_DotMustBeProperty(self);
	if ((!obj)) {
		return;
	}
	Message* ch = ((Message*)JB_Ring_First(self));
	if (JB_Object_FastIsa(ch->Obj, &SCModuleData)) {
		SC_Str_Safe(obj->ExportName, fs);
	}
	 else {
		JB_String* CloseStr = SC_Cpp__CDotType(self, obj, fs);
		JB_Msg_Export(ch, fs);
		SCDecl* ch_decl = SC_DeclOfObjForC(ch);
		if (ch_decl) {
			if (SC_Cpp__NeedsDotForC(ch_decl)) {
				JB_FS_AppendByte(fs, '.');
			}
			 else {
				JB_FS_AppendString(fs, JB_LUB[327]);
			}
		}
		SC_Str_Safe(obj->ExportName, fs);
		JB_FS_AppendString(fs, CloseStr);
	}
}

void SC_Cpp__C_RenderFnc(Message* self, FastStringCpp* fs) {
	Message* F = ((Message*)JB_Ring_First(self));
	Message* ch1 = ((Message*)JB_Ring_NextSib(F));
	SCFunction* fn = ((SCFunction*)ch1->Obj);
	bool PostBracket = false;
	if ((JB_Object_FastIsa(fn, &SCFunctionData)) and (!fn->ProtoType)) {
		if (((bool)((SCFunction*)fn)->ReturnType) and ((!JB_Msg_EqualsSyx(((Message*)JB_Ring_Parent(self)), JB_SyxArg, false)))) {
			PostBracket = SC_Cpp__C_OneParamType(fs, self, SC_Msg_BraDeclfind(self));
		}
		JB_FS_AppendString(fs, ((SCFunction*)fn)->ExportName);
	}
	 else {
		JB_Msg_Export(F, fs);
	}
	SC_Cpp__C_ParamsRender(ch1, fs);
	if (PostBracket) {
		JB_FS_AppendByte(fs, ')');
	}
}

void SC_Cpp__C_RenderItem(Message* self, FastStringCpp* fs) {
	JB_Msg_Export(((Message*)JB_Tree_Second(self)), fs);
}

void SC_Cpp__C_RenderList(Message* self, FastStringCpp* fs) {
	JB_Object* d = self->Obj;
	if (JB_Object_FastIsa(d, &SCDeclData)) {
		JB_FS_AppendString(fs, ((SCDecl*)d)->Type->Name);
		SC_Msg_MiniArgCpp(self, fs);
	}
}

void SC_Cpp__C_RenderNum(Message* self, FastStringCpp* fs) {
	JB_FS_AppendString(fs, self->Name);
	SCDecl* d = SC_Msg_AsDecl(self);
	if (d) {
		if (d->Type->TypeInfo == kJB__TC_Float) {
			JB_FS_AppendByte(fs, 'f');
		}
	}
}

void SC_Cpp__C_RenderOpp(Message* self, FastStringCpp* fs) {
	JB_String* s = self->Name;
	if (JB_Str_Equals(s, kJB_kBitOr, false)) {
		JB_FS_AppendByte(fs, '|');
	}
	 else if (JB_Str_Equals(s, JB_LUB[242], false)) {
		JB_FS_AppendByte(fs, '&');
	}
	 else if (JB_Str_Equals(s, JB_LUB[1424], false)) {
		JB_FS_AppendByte(fs, '^');
	}
	 else if (JB_Str_Equals(s, JB_LUB[2083], false)) {
		JB_FS_AppendByte(fs, '~');
	}
	 else if (JB_Str_Equals(s, JB_LUB[1795], false)) {
		JB_FS_AppendByte(fs, '%');
	}
	 else {
		JB_FS_AppendString(fs, s);
	}
}

void SC_Cpp__C_RenderRel(Message* self, FastStringCpp* fs) {
	Message* first = ((Message*)JB_Ring_First(self));
	Message* ch = first;
	SC_Cpp__RenderInBracketsIfRel(ch, fs);
	JB_FS_AppendByte(fs, ' ');
	ch = ((Message*)JB_Ring_NextSib(ch));
	JB_Msg_Export(ch, fs);
	JB_FS_AppendByte(fs, ' ');
	ch = ((Message*)JB_Ring_NextSib(ch));
	SC_Cpp__RenderInBracketsIfRel(ch, fs);
}

void SC_Cpp__C_RenderShe(Message* self, FastStringCpp* fs) {
	JB_FS_AppendString(fs, JB_LUB[393]);
	JB_FS_AppendString(fs, self->Name);
}

void SC_Cpp__C_RenderSStr(Message* self, FastStringCpp* fs) {
	JB_String* n = self->Name;
	if ((!JB_Str_Exists(n))) {
		JB_FS_AppendString(fs, JB_LUB[963]);
	}
	 else if (JB_Object_FastIsa(n, &MessageIDData)) {
		int ID = ((MessageID*)((MessageID*)n))->ID;
		JB_FS_AppendString(fs, JB_LUB[962]);
		if ((ID < 1) or (ID > 10000)) {
			debugger;
		}
		JB_FS_AppendInt32(fs, (ID + 1));
		JB_FS_AppendByte(fs, ']');
	}
	 else {
		debugger;
	}
}

void SC_Cpp__C_RenderStr(Message* self, FastStringCpp* fs) {
	SC_FS_AppendCpp(fs, self->Name);
}

void SC_Cpp__C_RenderThg(Message* self, FastStringCpp* fs) {
	JB_Object* o = self->Obj;
	if (JB_Object_FastIsa(o, &SCDeclData)) {
		SC_Cpp__WriteThgMaybeTypeToo(self, ((SCDecl*)o), fs);
		return;
	}
	JB_PrintLine(JB_Str_PlusByte(JB_LUB[885], JB_ObjectID(self)));
	debugger;
	SC_Msg_Safe(self, fs);
}

void SC_Cpp__C_RenderTmp(Message* self, FastStringCpp* fs) {
	JB_String* name = self->Name;
	if (JB_Str_Equals(name, JB_LUB[1635], false)) {
		JB_FS_AppendString(fs, JB_LUB[1525]);
	}
	 else if (JB_Str_Equals(name, JB_LUB[1698], false)) {
		JB_FS_AppendString(fs, SC__Cpp_IfName);
	}
	 else if (JB_Str_Equals(name, JB_LUB[2048], false)) {
		JB_FS_AppendString(fs, SC__Cpp_WhileName);
	}
	 else if (JB_Str_Equals(name, JB_LUB[1624], false)) {
		JB_FS_AppendString(fs, JB_LUB[1623]);
		JB_FS_AppendString(fs, SC__Cpp_IfName);
	}
	 else if (JB_Str_Equals(name, JB_LUB[1700], false)) {
		return;
	}
	 else if (JB_Str_Equals(name, JB_LUB[1892], false)) {
		0;
	}
	 else if (JB_Str_Equals(name, JB_LUB[1976], false)) {
		JB_FS_AppendString(fs, JB_LUB[971]);
		JB_DoAt(1);
		SC_Cpp__C_ParamsRender(self, fs);
		return;
	}
	 else {
		JB_FS_AppendString(fs, name);
	}
	{
		Message* mv = ((Message*)JB_Ring_First(self));
		while (mv) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(mv));
			JB_FS_AppendByte(fs, ' ');
			JB_Msg_Export(mv, fs);
			mv = _Nf1;
		};
		;
	};
}

void SC_Cpp__C_RenderTyp(Message* self, FastStringCpp* fs) {
	int Saveness = SC_Cpp__DontNeedMoreBrackets(self);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	Message* fc = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	if (Saveness == kSC__Cpp_kNeedsNoBrackets) {
		JB_Msg_Export(fc, fs);
		JB_Decr(fc);
		return;
	}
	if (Saveness == kSC__Cpp_kNeedsOuterBrackets) {
		JB_FS_AppendByte(fs, '(');
	}
	SC_Cpp__WriteDeclBrackets(self, fs);
	if (JB_Msg_EqualsSyx(fc, JB_SyxRel, false)) {
		JB_FS_AppendByte(fs, '(');
	}
	if (JB_Msg_EqualsSyx(fc, JB_SyxArg, false)) {
		SC_Msg_MiniArgCpp(fc, fs);
	}
	 else {
		JB_Msg_Export(fc, fs);
	}
	if (JB_Msg_EqualsSyx(fc, JB_SyxRel, false)) {
		JB_FS_AppendByte(fs, ')');
	}
	JB_Decr(fc);
	if (Saveness == kSC__Cpp_kNeedsOuterBrackets) {
		JB_FS_AppendByte(fs, ')');
	}
}

void SC_Cpp__C_RenderUnt(Message* self, FastStringCpp* fs) {
	if ((!JB_Msg_SyntaxEquals(self, JB_LUB[2054], false))) {
		JB_Object_SyntaxExpect(nil);
		return;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	Message* num = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	JB_String* s = JB_Incr(JB_Str_ReplaceAll(num->Name, JB_LUB[1426], JB_LUB[0], false, nil));
	JB_Decr(num);
	JB_FS_AppendString(fs, JB_LUB[448]);
	if ((((bool)(JB_Str_Length(s) % 2))) and JB_byte_IsLetter((JB_Str_First(s)))) {
		JB_FS_AppendByte(fs, '0');
	}
	JB_FS_AppendString(fs, s);
	JB_Decr(s);
}

JB_String* SC_Cpp__CDotType(Message* msg, SCDecl* Type, FastStringCpp* fs) {
	if ((!SC_Decl_SyntaxIs(Type, kSC__SCDeclInfo_UpgradeableContained))) {
		return JB_LUB[0];
	}
	if (SC_Msg_IsFirstOfSetRel(msg)) {
		return JB_LUB[0];
	}
	Message* p = ((Message*)JB_Ring_Parent(msg));
	if (p) {
		JB_Object* fn = p->Obj;
		if (JB_Object_FastIsa(fn, &SCFunctionData)) {
			if (SC_Func_SyntaxIs(((SCFunction*)fn), kSC__FunctionType_Reffer)) {
				return JB_LUB[0];
			}
		}
	}
	JB_FS_AppendString(fs, JB_LUB[267]);
	SC_Cpp__WriteDeclNoName(Type, fs);
	JB_FS_AppendString(fs, JB_LUB[286]);
	return JB_LUB[288];
}

JB_String* SC_Cpp__CppLicence() {
	if ((!JB_Str_Exists(SC__Cpp_CppLicenceStr))) {
		JB_File* f = JB_Incr(SC_Comp__InputFile(nil, JB_LUB[1754], nil));
		if (JB_File_SyntaxCast(f)) {
			JB_SetRef(SC__Cpp_CppLicenceStr, JB_File_ReadAll(f, 16384, true));
		}
		JB_Decr(f);
		if ((!(JB_Str_Exists(SC__Cpp_CppLicenceStr)))) {
			JB_SetRef(SC__Cpp_CppLicenceStr, JB_LUB[100]);
		}
	}
	return SC__Cpp_CppLicenceStr;
}

JB_File* SC_Cpp__CppProduct() {
	JB_File* _tmPf1 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_File* _tmPf0 = JB_Incr(JB_File_SyntaxAccess(_tmPf1, JB_LUB[944]));
	JB_Decr(_tmPf1);
	JB_File* _tmPf2 = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void SC_Cpp__CreateClassListFunc(FastString* dest) {
	FastStringCpp* fs = JB_Incr(SC_FastStringCpp_Constructor(nil, JB_LUB[0]));
	SC_Cpp__CreateClassListHeader(fs, JB_LUB[206]);
	{
		Array* _LoopSrcf2 = JB_Incr(SC__Comp_ClassList);
		int _if0 = 0;
		while (true) {
			SCClass* c = JB_Incr(((SCClass*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			if (SC_Class_IsSaveableObject(c) and ((bool)c->MyReacher)) {
				JB_FS_AppendString(fs, JB_LUB[39]);
				JB_String* _tmPf3 = JB_Incr(SC_Class_CStructName(c));
				JB_FS_AppendString(fs, _tmPf3);
				JB_Decr(_tmPf3);
				JB_FS_AppendString(fs, JB_LUB[809]);
				SC_Class_RenderSaveable(c, fs);
				JB_FS_AppendString(fs, JB_LUB[292]);
			}
			JB_Decr(c);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_FS_AppendString(fs, JB_LUB[2081]);
	JB_String* _tmPf4 = JB_Incr(SC_Cpp__SplitCpp(fs, JB_LUB[1922]));
	JB_Decr(fs);
	JB_FS_AppendString(dest, _tmPf4);
	JB_Decr(_tmPf4);
}

void SC_Cpp__CreateClassListHeader(FastString* fs, JB_String* s) {
	JB_FS_AppendString(fs, JB_LUB[2041]);
	JB_FS_AppendString(fs, s);
}

int SC_Cpp__DontNeedMoreBrackets(Message* msg) {
	if (JB_Msg_EqualsSyx(((Message*)JB_Ring_First(msg)), JB_SyxRel, false)) {
		return kSC__Cpp_kNeedsOuterBrackets;
	}
	Message* P = ((Message*)JB_Ring_Parent(msg));
	int Result = kSC__Cpp_kNeedsOuterBrackets;
	while (JB_Msg_EqualsSyx(P, JB_SyxBra, false)) {
		P = ((Message*)JB_Ring_Parent(P));
		Result = kSC__Cpp_kNeedsInnerBrackets;
	};
	if (SC_Msg_OperatorIsBRel(P, JB_LUB[215])) {
		return kSC__Cpp_kNeedsNoBrackets;
	}
	if (SC_Msg_OperatorIsTmp(P, JB_LUB[1698]) or SC_Msg_OperatorIsTmp(P, JB_LUB[2048])) {
		return kSC__Cpp_kNeedsNoBrackets;
	}
	return Result;
}

bool SC_Cpp__DoSavers() {
	return SC_Comp__Reached(JB_LUB[1208]) and SC_Comp__Reached(JB_LUB[1923]);
}

void SC_Cpp__ExportAllSource() {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	Cpp_Export* exp = JB_Incr(SC_Cpp_Constructor(nil));
	SC_Cpp_PreRun(exp);
	SC_Cpp_Run(exp);
	SC_Cpp_ExportSyx(exp);
	SC_Cpp_WriteHeader(exp);
	SC_Cpp_DoInterpreter(exp);
	SC_Cpp_FinalMergeOutputIntoACpp(exp);
	JB_Decr(exp);
}

void SC_Cpp__GenLub(FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[970]);
	JB_FS_AppendInt32(fs, SC_Crkt__Count() + 1);
	JB_FS_AppendString(fs, JB_LUB[1422]);
}

void SC_Cpp__GenStrings(FastString* fs) {
	FastString* sl2 = JB_Incr(JB_FS_Constructor(nil));
	JB_String* blob = JB_Incr(SC_Cpp__WriteStrings(sl2));
	JB_String* lengths = JB_Incr(JB_FS_GetResult(sl2));
	JB_Decr(sl2);
	SC_Cpp__GenLub(fs);
	FastString* blob2 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_EncodeLength(blob2, JB_Str_Length(lengths));
	JB_FS_EncodeLength(blob2, JB_Str_Length(blob));
	JB_FS_EncodeLength(blob2, SC_Crkt__Count());
	JB_FS_AppendString(blob2, lengths);
	JB_Decr(lengths);
	JB_FS_AppendString(blob2, blob);
	JB_SetRef(blob, JB_FS_GetResult(blob2));
	JB_Decr(blob2);
	SC__Cpp_LubHash = JB_Str_CRC(blob, 0);
	//;
	JB_FS_AppendString(fs, JB_LUB[1964]);
	JB_FS_AppendInt64(fs, ((int64)SC__Cpp_LubHash));
	JB_FS_AppendString(fs, JB_LUB[568]);
	//;
	JB_FS_AppendString(fs, JB_LUB[1963]);
	SC_FS_AppendCppAll(fs, blob);
	JB_Decr(blob);
	JB_FS_AppendString(fs, JB_LUB[568]);
	JB_String* FlowStr = JB_Incr(JB_bool_Render0(SC__Options_GenFlowControlCode));
	JB_String* _tmPf1 = JB_Incr(JB_Str_ReplaceAll(SC__Cpp_FindGlobalsCpp, JB_LUB[604], FlowStr, false, nil));
	JB_Decr(FlowStr);
	JB_FS_AppendString(fs, _tmPf1);
	JB_Decr(_tmPf1);
}

JB_File* SC_Cpp__HProduct() {
	JB_File* _tmPf1 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_File* _tmPf0 = JB_Incr(JB_File_SyntaxAccess(_tmPf1, JB_LUB[945]));
	JB_Decr(_tmPf1);
	JB_File* _tmPf2 = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void SC_Cpp__Init() {
	SC__Cpp_WroteAny = false;
	JB_SetRef(SC__Cpp_Cpp_Includes, (JB_Array_Constructor0(nil)));
	(JB_Syx_ExportAddrSet(JB_SyxAcc, ((FP_fpMsgRender)SC_Cpp__C_RenderAcc)));
	(JB_Syx_ExportAddrSet(JB_SyxItem, ((FP_fpMsgRender)SC_Cpp__C_RenderItem)));
	(JB_Syx_ExportAddrSet(JB_SyxList, ((FP_fpMsgRender)SC_Cpp__C_RenderList)));
	(JB_Syx_ExportAddrSet(JB_SyxPrm, ((FP_fpMsgRender)SC_Cpp__C_RenderList)));
	(JB_Syx_ExportAddrSet(JB_SyxArg, ((FP_fpMsgRender)SC_Cpp__C_RenderArg)));
	(JB_Syx_ExportAddrSet(JB_SyxDot, ((FP_fpMsgRender)SC_Cpp__C_RenderDot)));
	(JB_Syx_ExportAddrSet(JB_SyxDecl, ((FP_fpMsgRender)SC_Cpp__C_RenderDcl)));
	(JB_Syx_ExportAddrSet(JB_SyxFunc, ((FP_fpMsgRender)SC_Cpp__C_RenderFnc)));
	(JB_Syx_ExportAddrSet(JB_SyxThg, ((FP_fpMsgRender)SC_Cpp__C_RenderThg)));
	(JB_Syx_ExportAddrSet(JB_SyxType, ((FP_fpMsgRender)SC_Cpp__C_RenderTyp)));
	(JB_Syx_ExportAddrSet(JB_SyxTmp, ((FP_fpMsgRender)SC_Cpp__C_RenderTmp)));
	(JB_Syx_ExportAddrSet(JB_SyxOpp, ((FP_fpMsgRender)SC_Cpp__C_RenderOpp)));
	(JB_Syx_ExportAddrSet(JB_SyxBRel, ((FP_fpMsgRender)SC_Cpp__C_RenderBrel)));
	(JB_Syx_ExportAddrSet(JB_SyxRel, ((FP_fpMsgRender)SC_Cpp__C_RenderRel)));
	(JB_Syx_ExportAddrSet(JB_SyxNum, ((FP_fpMsgRender)SC_Cpp__C_RenderNum)));
	(JB_Syx_ExportAddrSet(JB_SyxUnit, ((FP_fpMsgRender)SC_Cpp__C_RenderUnt)));
	(JB_Syx_ExportAddrSet(JB_SyxBra, ((FP_fpMsgRender)SC_Cpp__C_RenderBra)));
	(JB_Syx_ExportAddrSet(JB_SyxARel, ((FP_fpMsgRender)SC_Cpp__C_RenderArel)));
	(JB_Syx_ExportAddrSet(JB_SyxChar, ((FP_fpMsgRender)SC_Cpp__C_RenderChr)));
	(JB_Syx_ExportAddrSet(JB_SyxStr, ((FP_fpMsgRender)SC_Cpp__C_RenderStr)));
	(JB_Syx_ExportAddrSet(JB_SyxSStr, ((FP_fpMsgRender)SC_Cpp__C_RenderSStr)));
	(JB_Syx_ExportAddrSet(JB_SyxBack, ((FP_fpMsgRender)SC_Cpp__C_RenderBak)));
	(JB_Syx_ExportAddrSet(JB_SyxSheb, ((FP_fpMsgRender)SC_Cpp__C_RenderShe)));
}

int SC_Cpp__Init_() {
	{
		SC__Cpp_WriteAPI = false;
		SC__Cpp_WroteAny = false;
		JB_SetRef(SC__Cpp_H_Input, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Cpp_H_PostInput, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Cpp_Cpp_Input, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Cpp_Cpp_Includes, JB_Array_Constructor0(nil));
		JB_SetRef(SC__Cpp_IfName, JB_LUB[0]);
		JB_SetRef(SC__Cpp_WhileName, JB_LUB[0]);
		SC__Cpp_LubHash = 0;
		JB_SetRef(SC__Cpp_FindGlobalsCpp, (JB_LUB[34]));
		JB_SetRef(SC__Cpp_CppLicenceStr, JB_LUB[0]);
	}
	;
	return 0;
}

int SC_Cpp__InitCode_() {
	return 0;
}

bool SC_Cpp__MsgOKToImprove(Message* msg) {
	Message* p = ((Message*)JB_Ring_Parent(msg));
	if (JB_Msg_EqualsSyx(p, JB_SyxPrm, false)) {
		return (SC_Msg_AsFunc(p) != SC__Comp_RefSetRef);
	}
	if ((JB_Msg_EqualsSyx(p, JB_SyxRel, false)) and (msg == ((Message*)JB_Ring_First(p)))) {
		return false;
	}
	return true;
}

bool SC_Cpp__NeedsDotForC(SCDecl* d) {
	if (d->PointerCount) {
		return nil;
	}
	if (SC_Class_IsStruct(d->Type)) {
		return true;
	}
	return false;
}

JB_File* SC_Cpp__Product(JB_String* name) {
	JB_File* _tmPf1 = JB_Incr(SC_Comp__GeneratedCppsFolder());
	JB_File* _tmPf0 = JB_Incr(JB_File_SyntaxAccess(_tmPf1, name));
	JB_Decr(_tmPf1);
	JB_File* _tmPf2 = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void SC_Cpp__RenderInBracketsIfRel(Message* self, FastStringCpp* fs) {
	if (JB_Msg_EqualsSyx(self, JB_SyxRel, false)) {
		JB_FS_AppendByte(fs, '(');
	}
	JB_Msg_Export(self, fs);
	if (JB_Msg_EqualsSyx(self, JB_SyxRel, false)) {
		JB_FS_AppendByte(fs, ')');
	}
}

void SC_Cpp__SmartWrite(JB_String* S, JB_File* F) {
	//;
	JB__Flow_Disabled++;
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(((int64)JB_Str_CRC(S, 0)), nil));
	JB_Array_SyntaxAppend(SC__Cpp_Cpp_Includes, _tmPf0);
	JB_Decr(_tmPf0);
	if (JB_File_SyntaxCast(F) and (!JB_File_CompareData(F, S, JB_LUB[0]))) {
		SC__Cpp_WroteAny = true;
		(JB_File_DataSet(F, S));
	}
	JB__Flow_Disabled--;
}

JB_String* SC_Cpp__SplitCpp(FastStringCpp* fs, JB_String* name) {
	JB_Incr(name);
	if (SC__Options_SingleCppOutput) {
		JB_Decr(name);
		return JB_FS_SyntaxCast(fs);
	}
	if (fs->Length <= 1) {
		JB_Decr(name);
		return JB_LUB[0];
	}
	JB_SetRef(name, JB_Str_OperatorPlus(name, JB_LUB[373]));
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_File* _tmPf1 = JB_Incr(SC_Cpp__Product(name));
	SC_Cpp__SmartWrite(_tmPf0, _tmPf1);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	SC_FS_IncludeH(fs, name);
	JB_Decr(name);
	return JB_FS_SyntaxCast(fs);
}

void SC_Cpp__WriteClass(SCClass* C, FastStringCpp* T) {
	if (SC__Cpp_WriteAPI) {
		JB_String* _tmPf0 = JB_Incr(SC_Class_APIStructName(C));
		JB_FS_AppendString(T, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_String* _tmPf1 = JB_Incr(SC_Class_CStructName(C));
		JB_FS_AppendString(T, _tmPf1);
		JB_Decr(_tmPf1);
	}
	if (SC_Class_IsObject(C)) {
		JB_FS_AppendByte(T, '*');
	}
}

void SC_Cpp__WriteConst(SCDecl* D, FastStringCpp* T) {
	JB_FS_AppendString(T, JB_LUB[228]);
	SC_Str_Safe(D->ExportName, T);
	JB_FS_AppendString(T, JB_LUB[122]);
	JB_Msg_Export(D->Default, T);
	JB_FS_AppendByte(T, ')');
}

void SC_Cpp__WriteDecl(SCDecl* D, FastStringCpp* T, Message* equality) {
	if ((!D)) {
		JB_FS_AppendString(T, JB_LUB[2040]);
		return;
	}
	if (SC_Decl_IsCArray(D)) {
		SC_Cpp__WriteDeclNoName(D->Internal, T);
	}
	 else {
		SC_Cpp__WriteDeclNoName(D, T);
	}
	if (JB_Str_Exists(D->ExportName)) {
		JB_FS_AppendByte(T, ' ');
		SC_Str_Safe(D->ExportName, T);
		if (SC_Decl_IsCArray(D)) {
			JB_FS_AppendByte(T, '[');
			JB_FS_AppendInt32(T, D->C_Array);
			JB_FS_AppendByte(T, ']');
		}
	}
	if (equality) {
		JB_FS_AppendString(T, JB_LUB[156]);
		JB_Msg_Export(equality, T);
	}
}

void SC_Cpp__WriteDeclBrackets(Message* self, FastStringCpp* fs) {
	JB_FS_AppendByte(fs, '(');
	SCDecl* d = JB_Incr(SC_Msg_AsDecl(self));
	if (d) {
		SC_Cpp__WriteDeclNoName(d, fs);
	}
	 else {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Tree_Second(self)));
		JB_Msg_Export(_tmPf0, fs);
		JB_Decr(_tmPf0);
	}
	JB_Decr(d);
	JB_FS_AppendByte(fs, ')');
}

void SC_Cpp__WriteDeclNoName(SCDecl* D, FastStringCpp* T) {
	SC_Cpp__WriteClass(D->Type, T);
	JB_FS_AppendMultiByte(T, '*', D->PointerCount);
}

void SC_Cpp__WriteFuncArgs(SCFunction* F, FastStringCpp* T, bool names_only) {
	JB_FS_AppendByte(T, '(');
	bool N = false;
	{
		Array* _LoopSrcf2 = F->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* a = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (a == nil) {
				break;
			}
			if (N) {
				JB_FS_AppendString(T, JB_LUB[303]);
			}
			N = true;
			if (names_only) {
				JB_FS_AppendString(T, a->Name);
			}
			 else {
				SC_Cpp__WriteDecl(a, T, nil);
			}
			_if0++;
		};
	}
	;
	JB_FS_AppendByte(T, ')');
}

void SC_Cpp__WriteFuncSub(SCFunction* F, JB_String* E, FastStringCpp* T) {
	SC_Cpp__WriteDecl(F->ReturnType, T, nil);
	JB_FS_AppendByte(T, ' ');
	JB_FS_AppendString(T, E);
	SC_Cpp__WriteFuncArgs(F, T, false);
}

void SC_Cpp__WriteFunctionHeader(SCFunction* F, FastStringCpp* T) {
	if (F->IsInline) {
		JB_FS_AppendString(T, JB_LUB[1713]);
	}
	SC_Cpp__WriteFuncSub(F, F->ExportName, T);
}

void SC_Cpp__WriteName(JB_String* name, FastString* blob, FastString* lengths) {
	JB_FS_AppendString(blob, name);
	JB_FS_AppendByte(blob, ((byte)0));
	JB_FS_EncodeLength(lengths, JB_Str_Length(name));
}

JB_String* SC_Cpp__WriteStrings(FastString* Lengths) {
	FastString* fs = JB_FS_Constructor(nil);
	{
		Array* _LoopSrcf2 = SC__Crkt_List;
		int _if0 = 0;
		while (true) {
			MessageID* s = ((MessageID*)JB_Array_Value(_LoopSrcf2, _if0));
			if (s == nil) {
				break;
			}
			SC_Cpp__WriteName(s, fs, Lengths);
			_if0++;
		};
	}
	;
	return JB_FS_SyntaxCast(fs);
}

void SC_Cpp__WriteThgMaybeTypeToo(Message* msg, SCDecl* d, FastStringCpp* fs) {
	if ((!JB_Str_Exists(d->ExportName))) {
		SC_Msg_Safe(msg, fs);
		JB_PrintLine(JB_LUB[606]);
	}
	 else if ((SC_Decl_SyntaxIs(d, kSC__SCDeclInfo_TypeImprove)) and (SC_Cpp__MsgOKToImprove(msg))) {
		JB_FS_AppendByte(fs, '(');
		SC_Cpp__WriteDeclBrackets(msg, fs);
		SC_Str_Safe(d->ExportName, fs);
		JB_FS_AppendByte(fs, ')');
	}
	 else {
		SC_Str_Safe(d->ExportName, fs);
	}
}

void SC_Cpp__WriteType(SCClass* c, FastStringCpp* fs, bool always) {
	if (c->IsBuiltin) {
		return;
	}
	if ((!always)) {
		if ((!SC_Class_NeedsExport(c))) {
			return;
		}
	}
	SCFunction* f = JB_Incr(c->FuncProto);
	if (f) {
		JB_FS_AppendString(fs, JB_LUB[82]);
		SC_Cpp__WriteDecl(f->ReturnType, fs, nil);
		//;
		JB_FS_AppendString(fs, JB_LUB[123]);
		JB_String* _tmPf2 = JB_Incr(SC_Class_CStructName(c));
		JB_FS_AppendString(fs, _tmPf2);
		JB_Decr(_tmPf2);
		JB_FS_AppendByte(fs, ')');
		//;
		SC_Cpp__WriteFuncArgs(f, fs, false);
	}
	 else {
		if (SC_Class_IsDataTypeOrFP(c)) {
			JB_String* name = JB_Incr(SC_Class_CStructName(c->Super));
			if ((!JB_Str_Exists(name))) {
				JB_Decr(name);
				JB_Decr(f);
				return;
			}
			//;
			JB_FS_AppendString(fs, JB_LUB[82]);
			JB_FS_AppendString(fs, name);
			JB_Decr(name);
			JB_FS_AppendByte(fs, ' ');
			//;
		}
		 else {
			if (c->IsWrapper) {
				JB_Decr(f);
				return;
			}
			SC_Class_WriteStructOrUnion(c, fs);
		}
		JB_String* _tmPf3 = JB_Incr(SC_Class_CStructName(c));
		JB_FS_AppendString(fs, _tmPf3);
		JB_Decr(_tmPf3);
	}
	JB_Decr(f);
	JB_FS_AppendString(fs, JB_LUB[568]);
}


DTWrap* JB_Wrap_ConstructorInt(DTWrap* self, int64 v) {
	if (self == nil) {
		self = ((DTWrap*)JB_NewClass(&DTWrapData));
	}
	self->DeathAction = 0;
	self->DataType = kJB__TC_s64;
	self->PrivValue = v;
	return self;
}

DTWrap* JB_Wrap_ConstructorVoidPtr(DTWrap* self, void* p) {
	if (self == nil) {
		self = ((DTWrap*)JB_NewClass(&DTWrapData));
	}
	self->DeathAction = 0;
	self->DataType = kJB__TC_UnusedType;
	self->PrivValue = ((int64)p);
	return self;
}

void JB_Wrap_Destructor(DTWrap* self) {
	if (self->DeathAction == kJB__Wrap_kFree) {
		JB_free(((void*)self->PrivValue));
	}
}

int64 JB_Wrap_First(DTWrap* self) {
	return self->PrivValue;
}

double JB_Wrap_FloatValue(DTWrap* self) {
	if (self) {
		return JB_int64_AsFloat(self->PrivValue);
	}
	return 0.0f;
}

JB_String* JB_Wrap_Render(DTWrap* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	//visible;
	if (JB_TC_IsFloat(self->DataType)) {
		JB_FS_AppendDoubleAsText0(fs, JB_Wrap_FloatValue(self));
	}
	 else if (self->DataType == kJB__TC_UnusedType) {
		JB_FS_AppendString(fs, JB_LUB[448]);
		JB_FS_AppendHex(fs, self->PrivValue, 2);
	}
	 else if (self->DataType == kJB__TC_bool) {
		JB_StringC* _tmPf0 = JB_Incr(((JB_StringC*)JB_Ternary(((bool)self->PrivValue), JB_LUB[2005], JB_LUB[1649])));
		JB_FS_AppendString(fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_FS_AppendInt64(fs, self->PrivValue);
	}
	JB_String* _tmPf1 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int64 JB_Wrap_Value(DTWrap* self) {
	if (self) {
		return self->PrivValue;
	}
	return 0;
}


JB_Object* JB_DictionaryReader_NextValue(DictionaryReader* self) {
	if (JB_Nav_MoveNext(self)) {
		return JB_Nav_Value(self);
	}
	return nil;
}

SCDecl* SC_DictionaryReader_ValueDecl(DictionaryReader* self) {
	JB_Object* t = JB_Nav_Value(self);
	if (JB_Object_FastIsa(t, &SCDeclData)) {
		if ((!((SCDecl*)t)->IsLookupOnly)) {
			return ((SCDecl*)t);
		}
	}
	return nil;
}


int JB_Rec_BadCount(JB_ErrorReceiver* self) {
	//visible;
	return self->ErrorCount + self->ProblemCount;
}

bool JB_Rec_CanAddMore(JB_ErrorReceiver* self, ErrorSeverity level) {
	if ((!((!self->BlockErrors) and (!JB_OutOfMemoryOccurred())))) {
		return nil;
	}
	if (level == kJB__ErrorSeverity_Problem) {
		return (self->ProblemCount < self->MaxProblems);
	}
	if (level >= kJB__ErrorSeverity_Error) {
		return (self->ErrorCount < self->MaxErrors);
	}
	return (self->WarnCount < self->MaxErrors);
}

void JB_Rec_Clear(JB_ErrorReceiver* self) {
	JB_Tree_Clear(self->Errors);
	self->ErrorCount = 0;
	self->WarnCount = 0;
	self->ProblemCount = 0;
}

JB_ErrorReceiver* JB_Rec_Constructor(JB_ErrorReceiver* self) {
	if (self == nil) {
		self = ((JB_ErrorReceiver*)JB_NewClass(&JB_ErrorReceiverData));
	}
	self->_LogFunc = nil;
	self->_LogObj = nil;
	self->ErrorCount = 0;
	self->ProblemCount = 0;
	self->WarnCount = 0;
	self->LowerErrorsTo = 0;
	self->BlockErrors = false;
	JB_StringC* _tmPf1 = JB_LUB[0];
	self->Source = JB_Incr(_tmPf1);
	JB_Error* _tmPf0 = JB_Err_ConstructorNothing(nil);
	self->Errors = JB_Incr(_tmPf0);
	self->MaxErrors = 512;
	self->MaxProblems = 16;
	JB__API_NilHappened = nil;
	return self;
}

void JB_Rec_Destructor(JB_ErrorReceiver* self) {
	JB_Clear(self->Errors);
	JB_Clear(self->_LogObj);
	JB_Clear(self->Source);
}

bool JB_Rec_HasAnything(JB_ErrorReceiver* self) {
	return ((bool)self) and (((bool)(self->ErrorCount | (self->ProblemCount | self->WarnCount))));
}

bool JB_Rec_HasProblems(JB_ErrorReceiver* self) {
	return ((bool)self) and (((bool)(self->ErrorCount | self->ProblemCount)));
}

void JB_Rec_Incr(JB_ErrorReceiver* self, JB_Error* err, bool add) {
	int n = JB_Ternary(add, 1, -1);
	if (err->Severity == kJB__ErrorSeverity_Problem) {
		self->ProblemCount = (self->ProblemCount + n);
	}
	 else if (JB_Err_IsError(err)) {
		self->ErrorCount = (self->ErrorCount + n);
	}
	 else if (JB_Err_IsWarning(err)) {
		self->WarnCount = (self->WarnCount + n);
	}
}

JB_Error* JB_Rec_LastError(JB_ErrorReceiver* self) {
	//visible;
	{
		JB_Error* _LoopSrcf1 = self->Errors;
		JB_Error* err = ((JB_Error*)JB_Ring_Last(_LoopSrcf1));
		while (err) {
			if (JB_Err_IsError(err)) {
				return err;
			}
			err = ((JB_Error*)JB_Ring_PrevSib(err));
		};
		;
	}
	;
	return nil;
}

void JB_Rec_LogFileWriter(JB_ErrorReceiver* self, JB_String* Data) {
	//visible;
	JB_Object* f = self->_LogObj;
	if (JB_Object_Isa(f, &JB_FileData)) {
		if ((!JB_File_Opened(((JB_File*)f)))) {
			JB_File_OpenBlank(((JB_File*)f));
		}
		JB_File_SyntaxAppend(((JB_File*)f), Data);
	}
}

ErrorMarker JB_Rec_Mark(JB_ErrorReceiver* self) {
	return self->ErrorCount;
}

bool JB_Rec_OK(JB_ErrorReceiver* self) {
	return ((bool)self) and (!self->ErrorCount);
}

JB_Error* JB_Rec_Pop(JB_ErrorReceiver* self) {
	JB_Error* err = ((JB_Error*)JB_Tree_Pop(self->Errors));
	if (err) {
		JB_Rec_Incr(self, err, false);
		return err;
	}
	return nil;
}

void SC_Rec_PrePrintErrors(JB_ErrorReceiver* self) {
	{
		JB_Error* _LoopSrcf2 = JB_Incr(self->Errors);
		JB_Error* err = JB_Incr(((JB_Error*)JB_Ring_First(_LoopSrcf2)));
		while (err) {
			JB_Error* _Nf1 = JB_Incr(((JB_Error*)JB_Ring_NextSib(err)));
			SC_Err_Improve(err);
			JB_SetRef(err, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(err);
		;
		JB_Decr(_LoopSrcf2);
	}
	;
	if ((!SC__Options_KeepAllErrors)) {
		{
			JB_Error* _LoopSrcf5 = JB_Incr(self->Errors);
			JB_Error* err = JB_Incr(((JB_Error*)JB_Ring_First(_LoopSrcf5)));
			while (err) {
				JB_Error* _Nf4 = JB_Incr(((JB_Error*)JB_Ring_NextSib(err)));
				if ((!SC_Errors__SyntaxAccess(err))) {
					JB_Tree_Remove(err);
				}
				JB_SetRef(err, _Nf4);
				JB_Decr(_Nf4);
			};
			JB_Decr(err);
			;
			JB_Decr(_LoopSrcf5);
		};
	}
}

int JB_Rec_PrintErrorsMain(JB_ErrorReceiver* self, ErrorSeverity Level, bool PrintCount, bool shell) {
	JB_ErrorReceiver* rec = JB_Incr(JB_StdErr);
	if (self) {
		JB_SetRef(rec, self);
	}
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	int Count = JB_Rec_RenderErrors(rec, fs, Level, shell);
	JB_Decr(rec);
	if ((!Count)) {
		JB_Decr(fs);
		return 0;
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_GetResult(fs));
	JB_Str_PrintError(_tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_ProblemsFound(fs, Count);
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(fs));
	JB_Decr(fs);
	JB_Str_PrintError(_tmPf1);
	JB_Decr(_tmPf1);
	if (Count) {
		return -1;
	}
	return 0;
}

JB_String* JB_Rec_Render(JB_ErrorReceiver* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_Rec_RenderErrors(self, fs, 0, false);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

int JB_Rec_RenderErrors(JB_ErrorReceiver* self, FastString* fs, ErrorSeverity Level, bool shell) {
	int rz = 0;
	if ((!self)) {
		return 0;
	}
	{
		JB_Error* err = ((JB_Error*)JB_Ring_First(self->Errors));
		while (err) {
			JB_Error* _Nf1 = ((JB_Error*)JB_Ring_NextSib(err));
			if (err->Severity >= Level) {
				rz++;
				if (shell) {
					JB_FreeIfDead(JB_Err_RenderClang(err, fs));
				}
				 else {
					JB_FreeIfDead(JB_Err_Render(err, fs));
				}
				JB_FS_AppendByte(fs, '\n');
			}
			err = _Nf1;
		};
	}
	;
	return rz;
}

int SC_Rec_ReturnErrors(JB_ErrorReceiver* self, JB_ErrorReceiver* To) {
	int rz = 0;
	{
		JB_Error* e = ((JB_Error*)JB_Ring_First(self->Errors));
		while (e) {
			JB_Error* _Nf1 = ((JB_Error*)JB_Ring_NextSib(e));
			JB_Rec_AppendErr(To, e);
			rz++;
			e = _Nf1;
		};
	}
	;
	return rz;
}

int JB_Rec_ShellPrintErrors(JB_ErrorReceiver* self) {
	//visible;
	return JB_Rec_PrintErrorsMain(self, kJB__ErrorSeverity_Problem, false, true);
}

void JB_Rec_AppendErr(JB_ErrorReceiver* self, JB_Error* Err) {
	bool CanPrint = false;
	//"Speedie" // useful marker for debugging...;
	JB_Rec_Incr(self, Err, true);
	if ((!(JB_Str_Exists(Err->Path)))) {
		JB_SetRef(Err->Path, self->Source);
	}
	if (JB__Err_KeepStackTrace) {
		if ((!(JB_Str_Exists(Err->StackTrace)))) {
			JB_SetRef(Err->StackTrace, JB_App__StackTrace(2, nil));
		}
	}
	FP_fnErrorLogger log = self->_LogFunc;
	if (log) {
		JB_String* _tmPf0 = JB_Incr(JB_Err_Render(Err, nil));
		(log)(self, _tmPf0);
		JB_Decr(_tmPf0);
	}
	if (CanPrint and JB_Err_IsBad(Err)) {
		JB_String* _tmPf1 = JB_Incr(JB_Err_Render(Err, nil));
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
	if (((bool)JB__Err_AutoPrint) and (Err->Severity >= kJB__ErrorSeverity_Problem)) {
		JB_DoAt(1);
	}
	if (JB__Err_AutoPrint != kJB__ErrorFlags_PrintAndRemove) {
		JB_Tree_SyntaxAppend(self->Errors, Err);
	}
}

JB_ErrorReceiver* JB_Rec_SyntaxUsing(JB_ErrorReceiver* self) {
	JB_ErrorReceiver* old = JB_Incr(JB_StdErr);
	JB_SetRef(JB_StdErr, self);
	JB_SafeDecr(old);
	return old;
}

void JB_Rec_SyntaxUsingComplete(JB_ErrorReceiver* self) {
	JB_SetRef(JB_StdErr, self);
}

int JB_Rec__Init_() {
	{
		JB__Rec_Progress = 0.0f;
		JB_SetRef(JB__Rec_NonFatal, JB_LUB[1088]);
	}
	;
	return 0;
}

int JB_Rec__InitCode_() {
	return 0;
}

void JB_Rec__NewErrorWithNode(Message* node, JB_String* Desc, JB_String* path) {
	int sev = JB_StdErr->LowerErrorsTo;
	if ((!sev)) {
		sev = kJB__ErrorSeverity_Error;
	}
	JB_Rec__NewErrorSub(node, Desc, path, sev);
}

void JB_Rec__NewErrorSub(Message* node, JB_String* Desc, JB_String* path, int sev) {
	if (JB_Rec_CanAddMore(JB_StdErr, sev)) {
		if (Desc == nil) {
			Desc = JB_Msg_MiniName(node, JB_LUB[1341]);
		}
		JB_String* _tmP0 = path;
		if ((!JB_Str_Exists(_tmP0))) {
			_tmP0 = JB_LUB[0];
		}
		JB_Rec_AppendErr(JB_StdErr, JB_Err_Constructor(nil, JB_Msg_FindNotInserted(node), Desc, sev, _tmP0));
	}
}

void JB_Rec__NewProblem(Message* node, JB_String* Desc, JB_String* path) {
	JB_Rec__NewErrorSub(node, Desc, path, kJB__ErrorSeverity_Problem);
}

void JB_Rec__NewWarning(Message* node, JB_String* Desc, JB_String* path) {
	JB_Rec__NewErrorSub(node, Desc, path, kJB__ErrorSeverity_Warning);
}


void SC_FS_AppendCpp(FastString* self, JB_String* s) {
	JB_FS_AppendByte(self, '"');
	{
		byte* _Startf0 = JB_Str_Address(s);
		byte* _Endf1 = _Startf0 + JB_Str_Length(s);
		while (_Startf0 < _Endf1) {
			int i = _Startf0 - s->Addr;
			byte c = _Startf0[0];
			if (c == '?') {
				JB_FS_AppendString(self, JB_LUB[1411]);
			}
			 else if (c == '\\') {
				JB_FS_AppendString(self, JB_LUB[1412]);
			}
			 else if (c == 9) {
				JB_FS_AppendString(self, JB_LUB[1418]);
			}
			 else if (c == 10) {
				JB_FS_AppendString(self, JB_LUB[1415]);
			}
			 else if (c == 13) {
				JB_FS_AppendString(self, JB_LUB[1417]);
			}
			 else if ((c >= 32) and ((c != '"') and (c <= 127))) {
				JB_FS_AppendByte(self, c);
			}
			 else {
				JB_FS_AppendString(self, JB_LUB[1419]);
				JB_FS_AppendHex(self, c, 2);
				if (JB_byte_IsHex(JB_Str_ByteValue(s, i + 1))) {
					JB_FS_AppendString(self, JB_LUB[220]);
				}
			}
			_Startf0++;
		};
	}
	;
	JB_FS_AppendByte(self, '"');
}

void SC_FS_AppendCppAll(FastString* self, JB_String* s) {
	JB_FS_AppendByte(self, '"');
	{
		byte* _Startf0 = JB_Str_Address(s);
		byte* _Endf1 = _Startf0 + JB_Str_Length(s);
		while (_Startf0 < _Endf1) {
			int i = _Startf0 - s->Addr;
			byte c = _Startf0[0];
			JB_FS_AppendString(self, JB_LUB[1419]);
			JB_FS_AppendHex(self, c, 2);
			_Startf0++;
		};
	}
	;
	JB_FS_AppendByte(self, '"');
}

void JB_FS_AppendEscape(FastString* self, JB_String* s) {
	JB_FS_AppendMultiReplace(self, s, JB__Constants_EscapeStr, JB_StdErr);
}

void JB_FS_AppendHexStr(FastString* self, JB_String* Data) {
	if (JB_Str_Exists(Data)) {
		JB_FS_AppendHexData(self, Data->Addr, JB_Str_Length(Data), 0);
	}
}

void JB_FS_AppendObjectID(FastString* self, Saveable* o) {
	JB_FS_AppendHex3(self, JB_ObjectID(o));
}

void JB_FS_AppendObjectOrNil(FastString* self, JB_Object* o) {
	if (JB_Object_Isa(o, &SaveableData)) {
		if (JB_Sav_IsSaveMarked(((Saveable*)o))) {
			JB_FS_AppendObjectID(self, ((Saveable*)o));
		}
		 else {
			//"Valid behaviour! For example we save a level, but we don't save the player along with the level. Like terraria.";
			JB_FS_AppendString(self, JB_LUB[1811]);
		}
	}
	 else if (JB_Object_Isa(o, &JB_StringData)) {
		JB_FreeIfDead(JB_ObjRender(((JB_String*)o), self));
	}
	 else {
		JB_FS_AppendString(self, JB_LUB[1811]);
	}
}

void JB_FS_AppendQuotedEscape(FastString* self, JB_String* s) {
	JB_FS_AppendByte(self, '"');
	JB_FS_AppendEscape(self, s);
	JB_FS_AppendByte(self, '"');
}

void SC_FS_AppendWidth(FastString* self, JB_String* s, int Width) {
	JB_FS_AppendString(self, s);
	JB_FS_AppendMultiByte(self, ' ', Width - JB_Str_Length(s));
}

void SC_FS_CArrayAdd(FastString* self, JB_String* s) {
	{
		byte* _Startf0 = JB_Str_Address(s);
		byte* _Endf1 = _Startf0 + JB_Str_Length(s);
		while (_Startf0 < _Endf1) {
			byte B = _Startf0[0];
			SC_FS_CArrayAddB(self, B);
			_Startf0++;
		};
	}
	;
	SC_FS_CArrayAddB(self, 0);
}

void SC_FS_CArrayAddB(FastString* self, byte B) {
	if ((!B)) {
		JB_FS_AppendByte(self, '0');
	}
	 else {
		JB_FS_AppendByte(self, '\'');
		if (JB_CS_HasChar(JB_C_Letters, B)) {
			JB_FS_AppendByte(self, B);
		}
		 else {
			JB_FS_AppendString(self, JB_LUB[1419]);
			JB_FS_AppendHex(self, B, 2);
		}
		JB_FS_AppendByte(self, '\'');
	}
	JB_FS_AppendString(self, JB_LUB[303]);
}

void SC_FS_CArrayAddB0(FastString* self, byte B) {
	SC_FS_CArrayAddB(self, B);
	SC_FS_CArrayAddB(self, 0);
}

void JB_FS_EncodeLength(FastString* self, uint64 N) {
	int lim = 256 - 8;
	byte L2 = ((byte)N);
	if (N >= lim) {
		L2 = (lim + JB_uint64_LELength(N));
	}
	JB_FS_AppendByte(self, ((byte)L2));
	if (N >= lim) {
		JB_FS_lInt(self, N);
	}
}

void JB_FS_AppendInfo(FastString* self, JB_String* name, JB_String* data) {
	if (JB_Str_Exists(data)) {
		JB_FS_FieldStart(self, name);
		JB_FS_AppendQuotedEscape(self, data);
	}
}

void JB_FS_AppendInfoNum(FastString* self, JB_String* name, int64 data) {
	if (data) {
		JB_FS_FieldStart(self, name);
		JB_FS_AppendInt64(self, data);
	}
}

void JB_FS_AppendInfoFloat(FastString* self, JB_String* name, double data) {
	if (data) {
		JB_FS_FieldStart(self, name);
		JB_FS_AppendDoubleAsText0(self, data);
	}
}

void JB_FS_FieldStart(FastString* self, JB_String* name) {
	JB_FS_LineIndent(self);
	if (JB_Str_Exists(name)) {
		JB_FS_AppendString(self, name);
		JB_FS_AppendByte(self, ' ');
	}
}

void JB_FS_hInt(FastString* self, uint64 n) {
	while (true) {
		if (n <= 127) {
			JB_FS_AppendByte(self, ((byte)(n)));
			break;
		}
		JB_FS_AppendByte(self, ((byte)(n | 128)));
		n = (n >> 7);
	};
}

void SC_FS_IncludeH(FastString* self, JB_String* name) {
	JB_FS_AppendString(self, JB_LUB[232]);
	JB_FS_AppendString(self, name);
	JB_FS_AppendByte(self, '"');
	JB_FS_AppendByte(self, '\n');
}

void JB_FS_lInt(FastString* self, uint64 n) {
	while (n) {
		JB_FS_AppendByte(self, ((byte)n));
		n = (n >> 8);
	};
}

void JB_FS_MsgErrorName(FastString* self, JB_String* name) {
	if (JB_Str_Exists(name)) {
		JB_FS_AppendString(self, JB_LUB[121]);
		JB_FS_AppendString(self, name);
		JB_FS_AppendString(self, JB_LUB[252]);
	}
}

void JB_FS_Normal(FastString* self, JB_String* s) {
	if (JB__ErrorColors_Enabled) {
		JB_FS_AppendString(self, kJB__ErrorColors_normal);
	}
	JB_FS_AppendByte(self, '\n');
	JB_FS_AppendString(self, s);
	JB_FS_AppendByte(self, ':');
	JB_FS_AppendMultiByte(self, ' ', 18 - JB_Str_Length(s));
	if (JB__ErrorColors_Enabled) {
		JB_FS_AppendString(self, kJB__ErrorColors_good);
	}
}

void JB_FS_PrintNicely(FastString* self, JB_String* s) {
	int Cause = JB_Str_UnPrintable(s);
	if (Cause < 0) {
		//;
		JB_FS_AppendString(self, JB_LUB[226]);
		JB_String* _tmPf1 = JB_Incr(JB_Str_Hex(s, 0, nil));
		JB_FS_AppendString(self, _tmPf1);
		JB_Decr(_tmPf1);
		JB_FS_AppendString(self, JB_LUB[285]);
		//;
	}
	 else if (Cause == '\n') {
		JB_FreeIfDead(JB_Str_ReplaceAll(s, JB_LUB[42], JB_LUB[1415], false, self));
	}
	 else {
		JB_FS_AppendString(self, s);
	}
}

void JB_FS_ProblemsFound(FastString* self, int count) {
	JB_FS_AppendInt32(self, count);
	JB_FS_AppendString(self, JB_LUB[185]);
	if (count > 1) {
		JB_FS_AppendByte(self, 's');
	}
	JB_FS_AppendString(self, JB_LUB[177]);
}

JB_String* JB_FS_Render(FastString* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendFastString(fs, self);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_FS_RenderSpeed(FastString* self, float seconds, int64 BytesIn, int64 BytesOut, JB_String* Name) {
	if (JB_Str_Exists(Name)) {
		JB_FS_AppendString(self, Name);
		JB_FS_AppendString(self, JB_LUB[560]);
	}
	JB_FreeIfDead(JB_int64_StrSize(BytesIn, self));
	if (BytesOut) {
		JB_FS_AppendString(self, JB_LUB[199]);
		JB_FreeIfDead(JB_int64_StrSize(BytesOut, self));
		JB_FS_AppendString(self, JB_LUB[122]);
		float ratio = ((((float)BytesOut) / ((float)BytesIn)) * 100.0f);
		JB_FS_AppendDoubleAsText(self, ratio, 1, false, false);
		JB_FS_AppendString(self, JB_LUB[241]);
	}
	JB_FS_AppendString(self, JB_LUB[181]);
	if (seconds < 0.01f) {
		JB_FS_AppendDoubleAsText(self, seconds * 1000.0f, 2, false, false);
		JB_FS_AppendByte(self, 'm');
	}
	 else {
		JB_FS_AppendDoubleAsText(self, seconds, 2, false, false);
	}
	JB_FS_AppendByte(self, 's');
	if ((!seconds)) {
		return;
	}
	float scale = 1048576.0f;
	byte unit = 'M';
	float rate = ((float)BytesIn) / (scale * seconds);
	if (rate >= 1024.0f) {
		rate = (rate / 1024.0f);
		unit = 'G';
	}
	 else if (rate <= 1.0f) {
		rate = (rate * 1024.0f);
		unit = 'K';
	}
	int dp = JB_Ternary(rate <= 0.01f, 5, 2);
	JB_FS_AppendString(self, JB_LUB[114]);
	JB_FS_AppendDoubleAsText(self, rate, dp, false, false);
	JB_FS_AppendByte(self, unit);
	JB_FS_AppendByte(self, 'B');
	JB_FS_AppendString(self, JB_LUB[414]);
}

void JB_FS_AppendMultiStr(FastString* self, JB_String* data, int count) {
	int needed = JB_Str_Length(data) * count;
	if (JB_FS_FreeSize(self) < needed) {
		(JB_FS_NeedSpare(self, needed));
	}
	{
		int _Valuef1 = 0;
		while (_Valuef1 < count) {
			JB_FS_AppendString(self, data);
			_Valuef1++;
		};
	};
}

void JB_FS_AppendFastString(FastString* self, FastString* fs) {
	JB_FS_AppendMem_(self, fs->ResultPtr, fs->Length);
}

void JB_FS_AppendInt64(FastString* self, int64 data) {
	JB_FS_AppendIntegerAsText(self, data, 1);
}

void JB_FS_AppendInt32(FastString* self, int data) {
	JB_FS_AppendIntegerAsText(self, data, 1);
}

void JB_FS_AppendFloatAsText(FastString* self, float F) {
	JB_FS_AppendDoubleAsText0(self, ((double)F));
}

void JB_FS_AppendBool(FastString* self, bool B) {
	JB_StringC* _tmPf0 = JB_Incr(((JB_StringC*)JB_Ternary(B, JB_LUB[2005], JB_LUB[1649])));
	JB_FS_AppendString(self, _tmPf0);
	JB_Decr(_tmPf0);
}

void JB_FS_SyntaxAppend(FastString* self, Message* msg) {
	if (msg) {
		(JB_Syx_RenderAddr(msg->Func))(msg, self);
	}
}

FastString* JB_FS__Use(JB_Object* other) {
	if (JB_Object_Isa(other, &FastStringData)) {
		return ((FastString*)other);
	}
	if (JB_Object_Isa(other, &JB_StringData)) {
		return JB_Str_Out(((JB_String*)other), true);
	}
	if (other) {
		if (true) {
			JB_Object_Fail(other, JB_LUB[872]);
		}
	}
	return nil;
}




void JB_Flow_AddByte(FlowControl* self, byte value) {
	//;
	if (JB_FastBuff_AppendByte((&self->Buff), value)) {
		JB_Flow_Flush(self);
	}
}

bool JB_Flow_Cond(FlowControl* self, byte value) {
	//;
	//visible;
	JB_Flow_AddByte(self, value);
	StringReader* r = self->ReadInput;
	if (r == nil) {
		return true;
	}
	int b = JB_SS_Byte(r);
	if (b == value) {
		return true;
	}
	JB_Flow_Fail(self, JB_Str__Byte(value), JB_Str__Byte(b), JB_LUB[0]);
	return false;
}

FlowControl* JB_Flow_Constructor(FlowControl* self) {
	if (self == nil) {
		self = ((FlowControl*)JB_NewClass(&FlowControlData));
	}
	self->Buff = ((FastBuff){});
	self->ReadInput = nil;
	self->Write = nil;
	//;
	JB_FastBuff_NeedAlloc((&self->Buff), 1048576);
	FastString* _tmPf0 = JB_FS_Constructor(nil);
	self->Excuse = JB_Incr(_tmPf0);
	return self;
}

void JB_Flow_Destructor(FlowControl* self) {
	//;
	JB__Flow_Disabled = JB_int__Max();
	JB_Flow_Flush(self);
	if (self->ReadInput != nil) {
		JB_PrintLine(JB_LUB[881]);
	}
	JB_MzSt_Print((&JB__Flow_Stats));
	JB_MzSt_Clear((&JB__Flow_Stats));
	JB_FastBuff_Destructor((&self->Buff));
	JB_Clear(self->ReadInput);
	JB_Clear(self->Write);
	JB_Clear(self->Excuse);
}

void JB_Flow_Fail(FlowControl* self, JB_String* found, JB_String* expected, JB_String* InputName) {
	//;
	FastString* fs = self->Excuse;
	if ((!fs)) {
		debugger;
		return;
	}
	if (JB_Str_Exists(InputName)) {
		//;
		JB_FS_AppendString(fs, JB_LUB[823]);
		JB_FS_AppendString(fs, InputName);
		JB_FS_AppendString(fs, JB_LUB[355]);
		//;
	}
	if ((!JB_SS_HasAny(self->ReadInput))) {
		JB_FS_AppendString(fs, JB_LUB[1057]);
	}
	 else {
		JB_FS_AppendString(fs, JB_LUB[860]);
		JB_FS_PrintNicely(fs, expected);
		JB_FS_AppendString(fs, JB_LUB[169]);
		JB_FS_PrintNicely(fs, found);
	}
	JB_FS_AppendByte(fs, '\n');
	if ((!JB_Str_Exists(InputName))) {
		JB_FreeIfDead(JB_App__StackTrace(3, fs));
		JB_PrintLine(JB_FS_GetResult(fs));
		JB_SetRef(self->Excuse, nil);
		JB_SetRef(self->ReadInput, nil);
	}
	if (JB__Flow_BreakOnFail) {
		debugger;
	}
}

void JB_Flow_Flush(FlowControl* self) {
	//;
	if (self->Write) {
		JB_String* _tmPf0 = JB_Incr(JB_FastBuff_TmpStr((&self->Buff)));
		JB_Str_CompressInto(_tmPf0, self->Write, kJB__MZLab_Default, (&JB__Flow_Stats));
		JB_Decr(_tmPf0);
	}
	self->Buff.Curr = self->Buff.Start;
}

void JB_Flow_Init(FlowControl* self, JB_String* path, JB_String* DateStr) {
	//;
	if (JB_Flow_LoadPath(self, path, false) or JB_Flow_LoadPath(self, path, true)) {
		JB_Str_Print(JB_LUB[203]);
	}
	 else {
		JB_Str_Print(JB_LUB[758]);
	}
	JB_PrintLine(path);
	JB_SetRef(self->Write, JB_Str_Out(path, true));
	JB__Flow_Disabled = 0;
	if (JB__Flow_FlowMode >= kJB__Flow_Validate) {
		JB_Flow__Input(DateStr, JB_LUB[636]);
	}
}

bool JB_Flow_LoadPath(FlowControl* self, JB_String* path, bool IsPrev) {
	bool rz = false;
	//;
	if (JB__Flow_FlowMode < kJB__Flow_Validate) {
		return nil;
	}
	JB_String* name = JB_Incr(((JB_StringC*)JB_Ternary((!IsPrev), JB_LUB[370], JB_LUB[379])));
	JB_String* CmpFile = JB_Incr(JB_Str_AddExt(path, name));
	JB_Decr(name);
	if (IsPrev) {
		if (JB__Flow_AlwaysMove or ((!JB_Str_FileSize(CmpFile)) and ((bool)JB_Str_FileSize(path)))) {
			JB_File* f = JB_Incr(JB_Str_AsFile(path));
			if (JB_File_Exists(f, false)) {
				if ((!JB_ErrorInt_SyntaxCast(JB_File_MoveTo(f, CmpFile)))) {
					JB_Decr(f);
					JB_Decr(CmpFile);
					return nil;
				}
			}
			JB_Decr(f);
		}
	}
	if (JB_Str_FileSize(CmpFile)) {
		JB_String* S = JB_Incr(JB_Str_ReadFile(CmpFile, 1073741824, true));
		if (JB_Safe_SyntaxCast(S)) {
			JB_String* _tmPf0 = JB_Incr(JB_Str_Decompress(S, 268435456, nil));
			JB_SetRef(self->ReadInput, JB_Str_Stream(_tmPf0));
			JB_Decr(_tmPf0);
			rz = JB_SS_HasAny(self->ReadInput);
			if (rz) {
				JB_Str_Print(JB_LUB[1106]);
				JB_Str_Print(CmpFile);
			}
		}
		JB_Decr(S);
	}
	JB_Decr(CmpFile);
	return rz;
}

FlowControlStopper JB_Flow__FlowAllow(JB_String* name, uint64 StartCode) {
	//;
	if ((!JB__Flow_FlowMode)) {
		return 0;
	}
	JB__Flow_Disabled = JB_int__Max();
	FlowControl* f = JB_Incr(JB_Flow_Constructor(nil));
	JB_SetRef(JB__Flow_Flow, f);
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(name, JB_LUB[384]));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[416], _tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(JB_int64_Hex(((int64)StartCode), nil));
	JB_Flow_Init(f, _tmPf0, _tmPf2);
	JB_Decr(f);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf2);
	return 0;
}

int JB_Flow__Init_() {
	{
		JB__Flow_Stats = ((CompressionStats){});
		JB__Flow_Disabled = JB_int__Max();
		JB__Flow_FlowMode = kJB__Flow_Validate;
		JB__Flow_AlwaysMove = true;
		JB__Flow_BreakOnFail = false;
	}
	;
	return 0;
}

int JB_Flow__InitCode_() {
	return 0;
}

bool JB_Flow__InputStrings(Array* lines, JB_String* name) {
	//;
	JB_String* _tmPf0 = JB_Incr(JB_Array_join(lines, JB_LUB[42]));
	JB_Flow__Input(_tmPf0, name);
	JB_Decr(_tmPf0);
	return false;
}

void JB_Flow__Input(JB_String* data, JB_String* name) {
	//visible;
	//;
	if (JB__Flow_Disabled) {
		return;
	}
	JB__Flow_Disabled = 1;
	FlowControl* f = JB__Flow_Flow;
	StringReader* r = f->ReadInput;
	if (r != nil) {
		JB_String* str = JB_Incr(JB_SS_Str(r, JB_Str_Length(data), 0));
		if ((!JB_Str_Equals(str, data, false))) {
			JB_Flow_Fail(f, str, data, name);
		}
		JB_Decr(str);
	}
	{
		byte* _Startf0 = JB_Str_Address(data);
		byte* _Endf1 = _Startf0 + JB_Str_Length(data);
		while (_Startf0 < _Endf1) {
			byte c = _Startf0[0];
			JB_Flow_AddByte(f, c);
			_Startf0++;
		};
	}
	;
	JB__Flow_Disabled = 0;
}

void JB_Flow__Stop() {
	//;
	JB__Flow_Disabled = JB_int__Max();
	JB_SetRef(JB__Flow_Flow, nil);
}

bool JB_Flow__Cond(bool value) {
	//visible;
	//;
	if (JB__Flow_Disabled) {
		return value;
	}
	JB__Flow_Disabled = 1;
	JB_Flow_Cond(JB__Flow_Flow, ((byte)JB_Ternary(value, 'T', 'F')));
	JB__Flow_Disabled = 0;
	return value;
}


void SC_Instruction_Const(Instruction* self) {
	self->aType = kSC__Instruction_kTypeConst;
}

Instruction* SC_Instruction_Constructor(Instruction* self, JB_String* FormName, JB_String* name, int pos) {
	if (self == nil) {
		self = ((Instruction*)JB_NewClass(&InstructionData));
	}
	self->aType = 0;
	self->FormName = JB_Incr(FormName);
	self->OpCode = pos;
	self->Name = JB_Incr(name);
	xC2xB5Form* _tmPf0 = SC_xC2xB5Form__Needform(self->FormName);
	self->Sizes = JB_Incr(_tmPf0);
	self->PCount = self->Sizes->Count;
	return self;
}

void SC_Instruction_Destructor(Instruction* self) {
	JB_Clear(self->Sizes);
	JB_Clear(self->FormName);
	JB_Clear(self->Name);
}

bool SC_Instruction_IsSetConst(Instruction* self) {
	return self->aType == kSC__Instruction_kTypeConst;
}

JB_String* SC_Instruction_Render(Instruction* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendString(fs, self->Name);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Instruction__Add(JB_String* FormName, JB_String* name, int pos) {
	Instruction* ins = JB_Incr(SC_Instruction_Constructor(nil, FormName, name, pos));
	JB_SetRef(SC__Instruction_TypeList[pos], ins);
	(JB_Dict_ValueSet(SC__Instruction_TypeDict, name, ins));
	JB_Decr(ins);
}

int SC_Instruction__Init_() {
	{
		JB_SetRef(SC__Instruction_TypeDict, JB_Dict_Constructor(nil));
	}
	;
	return 0;
}

int SC_Instruction__InitCode_() {
	return 0;
}

void SC_Instruction__InstructionInit() {
	//;
	SC_Instruction__Add(JB_LUB[2008], JB_LUB[832], 0);
	SC_Instruction__Add(JB_LUB[2008], JB_LUB[901], 1);
	SC_Instruction__Add(JB_LUB[2008], JB_LUB[1199], 2);
	SC_Instruction__Add(JB_LUB[1976], JB_LUB[1202], 3);
	SC_Instruction__Add(JB_LUB[1902], JB_LUB[1161], 4);
	SC_Instruction__Add(JB_LUB[1742], JB_LUB[982], 5);
	SC_Instruction__Add(JB_LUB[1749], JB_LUB[1162], 6);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[1153], 7);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[687], 8);
	SC_Instruction__Add(JB_LUB[1908], JB_LUB[1189], 9);
	SC_Instruction__Add(JB_LUB[1560], JB_LUB[1190], 10);
	SC_Instruction__Add(JB_LUB[1906], JB_LUB[610], 11);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[609], 12);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[1200], 13);
	SC_Instruction__Add(JB_LUB[2013], JB_LUB[1004], 14);
	SC_Instruction__Add(JB_LUB[2013], JB_LUB[805], 15);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[1193], 16);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[1194], 17);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[1192], 18);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[644], 19);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[648], 20);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[653], 21);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[647], 22);
	SC_Instruction__Add(JB_LUB[1515], JB_LUB[645], 23);
	SC_Instruction__Add(JB_LUB[1515], JB_LUB[646], 24);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[651], 25);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[652], 26);
	SC_Instruction__Add(JB_LUB[1549], JB_LUB[684], 27);
	SC_Instruction__Add(JB_LUB[1549], JB_LUB[683], 28);
	SC_Instruction__Add(JB_LUB[1550], JB_LUB[682], 29);
	SC_Instruction__Add(JB_LUB[1550], JB_LUB[685], 30);
	SC_Instruction__Add(JB_LUB[1524], JB_LUB[649], 31);
	SC_Instruction__Add(JB_LUB[1560], JB_LUB[650], 32);
	SC_Instruction__Add(JB_LUB[1905], JB_LUB[985], 33);
	SC_Instruction__Add(JB_LUB[1905], JB_LUB[984], 34);
	SC_Instruction__Add(JB_LUB[1907], JB_LUB[1163], 35);
	SC_Instruction__Add(JB_LUB[2013], JB_LUB[1164], 36);
	SC_Instruction__Add(JB_LUB[2010], JB_LUB[1152], 37);
	SC_Instruction__Add(JB_LUB[1783], JB_LUB[1155], 38);
	SC_Instruction__Add(JB_LUB[1783], JB_LUB[1154], 39);
	SC_Instruction__Add(JB_LUB[1783], JB_LUB[1157], 40);
	SC_Instruction__Add(JB_LUB[1783], JB_LUB[1156], 41);
	SC_Instruction__Add(JB_LUB[1783], JB_LUB[1159], 42);
	SC_Instruction__Add(JB_LUB[1783], JB_LUB[1158], 43);
	SC_Instruction__Add(JB_LUB[1783], JB_LUB[1160], 44);
	SC_Instruction__Add(JB_LUB[1783], JB_LUB[1195], 45);
	SC_Instruction__Add(JB_LUB[1783], JB_LUB[1196], 46);
	SC_Instruction__Add(JB_LUB[1783], JB_LUB[1197], 47);
	SC_Instruction__Add(JB_LUB[1783], JB_LUB[1198], 48);
	SC_Instruction__Add(JB_LUB[1552], JB_LUB[686], 49);
	SC_Instruction__Add(JB_LUB[1906], JB_LUB[1003], 50);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[863], 51);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[869], 52);
	SC_Instruction__Add(JB_LUB[2013], JB_LUB[865], 53);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[864], 54);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[803], 55);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[807], 56);
	SC_Instruction__Add(JB_LUB[2013], JB_LUB[806], 57);
	SC_Instruction__Add(JB_LUB[2011], JB_LUB[804], 58);
	SC_Instruction__Add(JB_LUB[2008], JB_LUB[1120], 59);
	SC_Instruction__Add(JB_LUB[1671], JB_LUB[866], 112);
	SC_Instruction__Add(JB_LUB[1671], JB_LUB[867], 113);
	SC_Instruction__Add(JB_LUB[1939], JB_LUB[1191], 114);
}

Instruction* SC_Instruction__SyntaxAccessWithMsg(Message* m) {
	Instruction* _tmPf0 = ((Instruction*)JB_Dict_ValueLower(SC__Instruction_TypeDict, m->Name));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(m, JB_LUB[941]);
		return nil;
	}
	return _tmPf0;
}

Instruction* SC_Instruction__SyntaxAccessWithInt(int pos) {
	return SC__Instruction_TypeList[pos];
}


LeakTester* JB_Lk_Constructor(LeakTester* self, JB_String* name) {
	if (self == nil) {
		self = ((LeakTester*)JB_NewClass(&LeakTesterData));
	}
	self->MemUsedStart = JB_MemCount();
	self->Name = JB_Incr(name);
	JB_Mem_Mark();
	return self;
}

void JB_Lk_Destructor(LeakTester* self) {
	JB_Clear(self->Name);
}

void JB_Lk_FinalTest(LeakTester* self) {
	JB_Lk_Test2(self);
	self->MemUsedStart = nil;
	JB_Mem_Unmark();
}

void JB_Lk_Test2(LeakTester* self) {
	if ((!self->MemUsedStart)) {
		return;
	}
	int NewAmount = JB_MemCount();
	int Diff = NewAmount - self->MemUsedStart;
	if (Diff > 0) {
		debugger;
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[990]);
		JB_FS_AppendInt32(_fsf0, Diff);
		JB_FS_AppendString(_fsf0, JB_LUB[171]);
		JB_FS_AppendString(_fsf0, self->Name);
		JB_FS_AppendString(_fsf0, JB_LUB[356]);
		JB_FS_AppendInt32(_fsf0, NewAmount);
		JB_FS_AppendByte(_fsf0, '.');
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
}


Macro* SC_Macro_clean(Macro* self) {
	if ((!self->Cleaned)) {
		self->Cleaned = true;
		Message* s = JB_Incr(JB_Macro_Source(self));
		if (s) {
			SC_Msg_Clean(s, false);
		}
		JB_Decr(s);
	}
	return self;
}

Macro* JB_Macro_ConstructorStr(Macro* self, JB_String* s) {
	if (self == nil) {
		self = ((Macro*)JB_NewClass(&MacroData));
	}
	self->Cleaned = false;
	self->_Parsed = nil;
	self->Input = JB_Incr(s);
	return self;
}

Macro* JB_Macro_ConstructorMsg(Macro* self, Message* s) {
	if (self == nil) {
		self = ((Macro*)JB_NewClass(&MacroData));
	}
	self->Cleaned = false;
	JB_StringC* _tmPf0 = JB_LUB[0];
	self->Input = JB_Incr(_tmPf0);
	self->_Parsed = JB_Incr(s);
	return self;
}

void JB_Macro_Destructor(Macro* self) {
	JB_Clear(self->Input);
	JB_Clear(self->_Parsed);
}

Message* JB_Macro_Run(Macro* self, Array* prms) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Msg_ConstructorEmpty(nil));
	JB_Msg_BecomeMacro(rz, self, prms);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Macro_CallFast(Macro* self, Message* prm1, Message* prm2) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Msg_ConstructorEmpty(nil));
	JB_Array_SyntaxAppend(JB__Macro_TmpPrms, prm1);
	JB_Array_SyntaxAppend(JB__Macro_TmpPrms, prm2);
	JB_Msg_BecomeMacro(rz, self, JB__Macro_TmpPrms);
	JB_Array_Clear(JB__Macro_TmpPrms);
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Macro_Source(Macro* self) {
	Message* rz = nil;
	rz = self->_Parsed;
	if ((!rz)) {
		rz = JB_Str_Parse(self->Input, JB_SyxArg, true);
		if (rz) {
			JB_Msg_WipePositions(rz);
			JB_SetRef(self->_Parsed, rz);
		}
	}
	return rz;
}

int JB_Macro__Init_() {
	{
		JB_SetRef(JB__Macro_TmpPrms, JB_Array_Constructor0(nil));
	}
	;
	return 0;
}

int JB_Macro__InitCode_() {
	return 0;
}


void JB_Mrap_CapacitySet(MWrap* self, int Value) {
	JB_Mrap_SetCap(self, Value);
}

MWrap* JB_Mrap_ConstructorPtr(MWrap* self, int ItemCount, uint ItemSize, byte* ptr, byte DeathAction) {
	if (self == nil) {
		self = ((MWrap*)JB_NewClass(&MWrapData));
	}
	self->DataType = kJB__TC_UnusedType;
	self->DeathAction = 0;
	self->ItemSize = ItemSize;
	self->Length = 0;
	self->Capacity = ItemCount;
	self->_Ptr = ptr;
	return self;
}

void JB_Mrap_Destructor(MWrap* self) {
	if (self->DeathAction == kJB__Wrap_kFree) {
		JB_free(self->_Ptr);
	}
}

byte* JB_Mrap_Ptr(MWrap* self) {
	return ((byte*)self->_Ptr);
}

bool JB_Mrap_SetCap(MWrap* self, int value) {
	if (self->DeathAction != kJB__Wrap_kFree) {
		return nil;
	}
	int S = ((int)self->ItemSize);
	int old = S * self->Capacity;
	int New = S * value;
	byte* Mem = JB_realloc(self->_Ptr, New);
	if (Mem) {
		self->_Ptr = Mem;
		self->Capacity = value;
		if (New > old) {
			memzero((Mem + old), New - old);
		}
		return true;
	}
	if (true) {
		JB_String* _tmPf1 = JB_Incr(JB_int_RenderFS(New, nil));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[693], _tmPf1));
		JB_Decr(_tmPf1);
		JB_Object_Fail(self, _tmPf0);
		JB_Decr(_tmPf0);
	}
	return false;
}

Array* JB_Mrap__CollectLeaks_(JB_Object* self) {
	Array* rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	JB_FindLeakedObject(self, rz);
	JB_SafeDecr(rz);
	return rz;
}

int JB_Mrap__Init_() {
	{
	}
	;
	return 0;
}

int JB_Mrap__InitCode_() {
	return 0;
}

MWrap* JB_Mrap__Object(int Count, int ItemSize) {
	//visible;
	byte* p = JB_zalloc(Count * ItemSize);
	if (p) {
		return JB_Mrap_ConstructorPtr(nil, Count, ItemSize, p, kJB__Wrap_kFree);
	}
	return nil;
}

void jbl(JB_Object* self) {
	//visible;
	{
		Array* _LoopSrcf2 = JB_Incr(JB_Mrap__CollectLeaks_(self));
		int _if0 = 0;
		while (true) {
			JB_Object* bad = JB_Incr(JB_Array_Value(_LoopSrcf2, _if0));
			if (bad == nil) {
				JB_Decr(bad);
				break;
			}
			jdb(bad);
			JB_Decr(bad);
			debugger;
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	};
}

byte* JB_Mrap__Zalloc(int n) {
	return JB_zalloc(n);
}



NilTest* SC_NilTest_Constructor(NilTest* self) {
	if (self == nil) {
		self = ((NilTest*)JB_NewClass(&NilTestData));
	}
	self->V = 0;
	JB_StringC* _tmPf0 = JB_LUB[0];
	self->V2 = JB_Incr(_tmPf0);
	self->V4 = ((byte*)((&SC__NilTest_NilTestByte)));
	self->V3 = ((byte*)0);
	return self;
}

void SC_NilTest_Destructor(NilTest* self) {
	JB_Clear(self->V2);
}

NilTest* SC_NilTest_Exists3(NilTest* self, NilTest* p) {
	if (SC_NilTest_SyntaxCast(p)) {
		return p;
	}
	return self;
}

NilTest* SC_NilTest_Exists4(NilTest* self) {
	return ((NilTest*)JB_Ternary((!SC_NilTest_SyntaxCast(self)), SC_NilTest_Constructor(nil), self));
}

NilTest* SC_NilTest_Exists5(NilTest* self) {
	while (SC_NilTest_SyntaxCast(self)) {
		return self;
	};
	return SC_NilTest_Exists4(self);
}

NilTest* SC_NilTest_Exists7(NilTest* self) {
	{
		int _Valuef1 = 0;
		while (_Valuef1 < 100) {
			NilTest* x = JB_Incr(SC_NilTest_Exists5(self));
			if (SC_NilTest_SyntaxCast(x)) {
				JB_SafeDecr(x);
				return x;
			}
			JB_Decr(x);
			_Valuef1++;
		};
	}
	;
	return SC_NilTest_Exists3(self, nil);
}

int SC_NilTest__Init_() {
	{
		SC__NilTest_NilTestByte = 0;
		JB_SetRef(SC__NilTest_x1, SC_NilTest_Constructor(nil));
		JB_SetRef(SC__NilTest_x2, SC_NilTest_Exists7(SC__NilTest_x1));
		JB_SetRef(SC__NilTest_x3, JB_LUB[0]);
	}
	;
	return 0;
}

int SC_NilTest__InitCode_() {
	return 0;
}


bool JB_PID_IsRunning(ProcessOwner* self) {
	return JB_PID_Exit(self) == -1;
}


bool SC_Imp_CanBan(SCImport* self, SCFile* scf) {
	bool rz = false;
	if ((!SC__Imp_STDLibTime)) {
		return true;
	}
	if (SC__Options_ProjectIsMiniLib) {
		JB_File* p = JB_Incr(SC__Comp_BaseProjectPath);
		if (JB_File_SyntaxCast(p)) {
			JB_String* _tmPf0 = JB_Incr(JB_File_Path(scf));
			rz = JB_File_DirectoryContains(p, _tmPf0);
			JB_Decr(_tmPf0);
		}
		JB_Decr(p);
	}
	return rz;
}

SCImport* SC_Imp_Constructor(SCImport* self, JB_File* F, bool Builtin) {
	if (self == nil) {
		self = ((SCImport*)JB_NewClass(&SCImportData));
	}
	self->Depth = 0;
	Array* _tmPf3 = JB_Array_Constructor0(nil);
	self->Files = JB_Incr(_tmPf3);
	self->IsSTDLib = SC__Imp_STDLibTime;
	self->WarnUnusedFuncs = (!self->IsSTDLib);
	Dictionary* _tmPf2 = JB_Dict_Constructor(nil);
	self->Resources = JB_Incr(_tmPf2);
	self->BlindCast = JB_Ternary(Builtin, 0, ((int)kJB__ErrorSeverity_Error));
	JB_MemoryLayer* _tmPf1 = JB_Mem_CreateLayer((&SCDeclData), self);
	self->DeclLayer = JB_Incr(_tmPf1);
	SCNode* _tmPf0 = JB_Incr(SC_Mod__NeuModule(nil, SC__Comp_program, nil));
	SCModule* M = JB_Incr(((SCModule*)_tmPf0));
	JB_Decr(_tmPf0);
	self->Mod = JB_Incr(M);
	M->Project = self;
	M->IsImport = true;
	self->Where = JB_Incr(F);
	if (F != nil) {
		JB_SetRef(M->Name, JB_Str_Name(F));
		SC__Imp_Recent = JB_int64_OperatorMax(SC__Imp_Recent, JB_File_Modified(F));
	}
	JB_Decr(M);
	return self;
}

void SC_Imp_Destructor(SCImport* self) {
	JB_Clear(self->Where);
	JB_Clear(self->Files);
	JB_Clear(self->DeclLayer);
	JB_Clear(self->Mod);
	JB_Clear(self->Resources);
}

SCFile* SC_Imp_ImportDir(SCImport* self, JB_File* f) {
	SCFile* rz = nil;
	{
		Array* _LoopSrcf2 = JB_Incr(JB_File_List(f, false));
		int _if0 = 0;
		while (true) {
			JB_String* cName = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (cName == nil) {
				JB_Decr(cName);
				break;
			}
			JB_File* _tmPf3 = JB_Incr(JB_File_SyntaxAccess(f, cName));
			JB_File* c = JB_Incr(_tmPf3);
			JB_Decr(_tmPf3);
			JB_String* ext = JB_Incr(JB_Str_Ext(cName));
			if (JB_Str_ContainsString(cName, JB_LUB[274])) {
				0;
			}
			 else if (JB_File_IsDir(c)) {
				JB_FreeIfDead(SC_Imp_ImportDir(self, c));
			}
			 else if (SC_Str_IsSpeedieSrc(cName)) {
				SCFile* B = JB_Incr(SC_Imp_ImportSpd(self, c));
				if (JB_Str_Equals(cName, JB_LUB[1709], true)) {
					JB_SetRef(rz, B);
				}
				JB_Decr(B);
			}
			 else if ((JB_Str_Equals(ext, JB_LUB[2035], false)) or ((JB_Str_Equals(ext, JB_LUB[1667], false)) or ((JB_Str_Equals(ext, JB_LUB[1942], false)) or (JB_Str_Equals(ext, JB_LUB[1930], false))))) {
				if ((!(SC__Imp_Shaders))) {
					JB_SetRef(SC__Imp_Shaders, JB_Dict_Constructor(nil));
				}
				(JB_Dict_ValueSet(SC__Imp_Shaders, cName, c));
			}
			 else if (SC_Str_isCLike(ext)) {
				JB_String* _tmPf4 = JB_Incr(JB_File_Path(c));
				JB_Array_SyntaxAppend(SC__Cpp_Cpp_Input, _tmPf4);
				JB_Decr(_tmPf4);
			}
			 else {
				(JB_Dict_ValueLowerSet(self->Resources, cName, c));
			}
			JB_Decr(cName);
			JB_Decr(c);
			JB_Decr(ext);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

void SC_Imp_ImportMsg(SCImport* self, Message* j) {
	Message* l = JB_Incr(JB_Msg_Last(j, JB_SyxStr));
	if ((!l)) {
		JB_Decr(l);
		return;
	}
	JB_String* Name = JB_Incr(l->Name);
	JB_Decr(l);
	JB_File* P = JB_Incr(SC_Comp__FindProject(Name, true));
	if ((!JB_File_SyntaxCast(P))) {
		if (JB_Str_ByteValue(Name, 0) != '/') {
			JB_String* _tmPf2 = JB_Incr(SC_Comp__Projects());
			JB_String* _tmPf1 = JB_Incr(JB_Str_SyntaxAccess(_tmPf2, Name));
			JB_Decr(_tmPf2);
			JB_SetRef(P, JB_Str_FileThatExists(_tmPf1, JB_LUB[1474]));
			JB_Decr(_tmPf1);
		}
		 else {
			JB_SetRef(P, JB_Str_FileThatExists(Name, JB_LUB[1474]));
		}
	}
	if ((!JB_File_SyntaxCast(P))) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[734]);
		JB_FS_AppendString(_fsf0, Name);
		JB_FS_AppendByte(_fsf0, '\'');
		JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Msg_SyntaxExpect(j, _tmPf3);
		JB_Decr(_tmPf3);
		JB_Decr(P);
		JB_Decr(Name);
		return;
	}
	SC__Imp_CurrIsManuallyImported++;
	JB_FreeIfDead(SC_Imp__ImportPath(Name, P, self->Depth + 1, false));
	JB_Decr(Name);
	JB_Decr(P);
	SC__Imp_CurrIsManuallyImported--;
}

SCFile* SC_Imp_ImportSpd(SCImport* self, JB_File* c) {
	SCFile* rz = nil;
	JB_String* path = JB_Incr(JB_Str_LowerCase(c));
	SCFile* _tmPf0 = JB_Incr(((SCFile*)JB_Dict_ValueStr(SC__Comp_Files, path)));
	if ((JB_File_SyntaxCast(_tmPf0))) {
		JB_File_Fail(c, JB_LUB[874]);
	}
	JB_Decr(_tmPf0);
	JB_SetRef(rz, SC_SCFile_Constructor(nil, c, self));
	(JB_Dict_ValueSet(SC__Comp_Files, path, rz));
	JB_Decr(path);
	JB_Array_SyntaxAppend(self->Files, rz);
	int n = JB_Array_Size(SC__Imp_AllFiles);
	if (n >= 65536) {
		JB_File_Fail(c, JB_LUB[1314]);
	}
	rz->filenum = n;
	JB_Array_SyntaxAppend(SC__Imp_AllFiles, rz);
	JB_SafeDecr(rz);
	return rz;
}

void SC_Imp_IncludeCHeaders(SCImport* self, JB_File* f, Array* output) {
	{
		JB_File_ListStart(f);
		while (JB_File_MoveNext(f)) {
			JB_String* _tmPf2 = JB_Incr(JB_File_CurrChild(f));
			JB_File* _tmPf1 = JB_Incr(JB_File_Child(f, _tmPf2));
			JB_Decr(_tmPf2);
			JB_File* c = JB_Incr(_tmPf1);
			JB_Decr(_tmPf1);
			if (((!JB_File_IsDir(c))) and (JB_Str_OperatorIsa(c, JB_LUB[1688]))) {
				JB_Array_SyntaxAppend(output, c);
			}
			JB_Decr(c);
		};
		JB_File_ListEnd(f);
	};
}

void SC_Imp_IndexConf(SCImport* self, Message* conf) {
	Message* arg = JB_Incr(JB_Msg_NeedSyx(conf, JB_SyxArg));
	if (arg) {
		JB_Tree_Remove(arg);
		JB_SetRef(SC__Comp_ConfMsg, arg);
		JB_String* str = JB_Incr(((JB_String*)JB_Ternary(SC__Options_SelfReplacement, JB_Msg_Render(arg, nil), JB_Msg_RenderJbin(arg, JB_LUB[0], nil))));
		Message* _tmPf0 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxStr, str));
		JB_Decr(str);
		Message* x = JB_Incr(SC_MakeDecl(JB_LUB[0], JB_LUB[1441], _tmPf0, 0));
		JB_Decr(_tmPf0);
		JB_Msg_BecomeMsg(conf, x);
		JB_Decr(x);
		SC_Mod_MoveToInitFunc(SC__Comp_program, conf);
	}
	JB_Decr(arg);
}

void SC_Imp_IndexLinkage(SCImport* self, Message* link, SCFile* scf) {
	Message* _tmPf0 = JB_Incr(JB_Msg_GetConf(link, JB_LUB[2006], false));
	if (JB_Msg_SyntaxEquals(_tmPf0, JB_LUB[1751], true)) {
		self->IsSTDLib = true;
		self->WarnUnusedFuncs = false;
	}
	if (SC_Imp_CanBan(self, scf)) {
		Message* _tmPf1 = JB_Incr(JB_Msg_GetConf(link, JB_LUB[1510], false));
		SC_Imp_LoadBanned(self, _tmPf1);
		JB_Decr(_tmPf1);
	}
	Message* arg = JB_Incr(JB_Msg_NeedSyx(link, JB_SyxArg));
	Message* name = JB_Incr(JB_Msg_GetConf(arg, JB_LUB[1576], false));
	if (name) {
		JB_SetRef(scf->ExportName, name->Name);
		JB_SetRef(self->Mod->ExportName, name->Name);
	}
	Message* blind = JB_Incr(JB_Msg_GetConf(arg, JB_LUB[1519], false));
	if (blind) {
		self->BlindCast = SC_Msg_Blind(blind);
	}
	 else if (SC__Options_SelfReplacement) {
		self->BlindCast = 0;
	}
	Message* Nil = JB_Incr(JB_Msg_GetConf(arg, JB_LUB[1811], false));
	JB_Decr(arg);
	if (Nil) {
		if ((!JB_Msg_Yes(Nil))) {
			SC__Options_NilStrength = 0;
		}
	}
	JB_Tree_Remove(link);
	JB_Decr(Nil);
	JB_Decr(blind);
	JB_Decr(name);
	JB_Decr(_tmPf0);
}

void SC_Imp_IndexTargets(SCImport* self, Message* tar) {
	{
		Message* _LoopSrcf2 = JB_Msg_Arg(tar);
		Message* t = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (t) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(t));
			if (JB_Msg_Expect(t, JB_SyxTmp, nil)) {
				Message* ch = ((Message*)JB_Ring_First(t));
				if (ch) {
					if (true) {
						JB_Msg_SyntaxExpect(ch, nil);
					}
				}
				 else {
					(SC_SC_Targets__SyntaxAccessSet(t->Name, true));
				}
			}
			t = _Nf1;
		};
		;
	}
	;
	JB_Tree_Remove(tar);
}

void SC_Imp_LoadBanned(SCImport* self, Message* list) {
	if ((!JB_Msg_Expect(list, JB_SyxList, nil))) {
		return;
	}
	Dictionary* x = ({
		Dictionary* _X = SC__Options_BannedClasses;
		if ((!_X)) {
			_X = JB_Dict_Constructor(nil);
			JB_SetRef(SC__Options_BannedClasses, _X);
		}
		 _X;
	});
	{
		Message* item = ((Message*)JB_Ring_First(list));
		while (item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(item));
			JB_Msg_Expect(item, JB_SyxThg, nil);
			(JB_Dict_ValueLowerSet(x, item->Name, JB_LUB[2054]));
			item = _Nf1;
		};
		;
	};
}

void SC_Imp_LoadConf(SCImport* self, SCFile* scf) {
	JB_SetRef(self->Mod->ExportName, JB_LUB[635]);
	if ((!JB_File_SyntaxCast(scf))) {
		return;
	}
	{
		Message* _LoopSrcf2 = SC_SCFile_AST(scf);
		Message* s = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (s) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(s));
			if ((!JB_Msg_EqualsSyx(s, JB_SyxTmp, false))) {
				0;
			}
			 else if (JB_Msg_SyntaxEquals(s, JB_LUB[1759], true)) {
				SC_Imp_IndexLinkage(self, s, scf);
			}
			 else if (JB_Msg_SyntaxEquals(s, JB_LUB[1558], true)) {
				SC_Imp_IndexConf(self, s);
			}
			 else if (JB_Msg_SyntaxEquals(s, JB_LUB[1987], true)) {
				SC_Imp_IndexTargets(self, s);
			}
			s = _Nf1;
		};
		;
	};
}

void SC_Imp_PrepareAll(SCImport* self) {
	{
		Array* _LoopSrcf2 = self->Files;
		int _if0 = 0;
		while (true) {
			SCFile* f = ((SCFile*)JB_Array_Value(_LoopSrcf2, _if0));
			if (f == nil) {
				break;
			}
			JB_FreeIfDead(SC_SCFile_AST(f));
			_if0++;
		};
	};
}

void SC_Imp_ReloadImports(SCImport* self, SCFile* index) {
	{
		Message* _LoopSrcf2 = SC_SCFile_AST(index);
		Message* j = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (j) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(j));
			if (SC_Msg_OperatorIsTmp(j, JB_LUB[1706])) {
				JB_Err__SourceAdd(j);
				SC_Imp_ImportMsg(self, j);
				JB_Err__SourceRemove();
			}
			j = _Nf1;
		};
		;
	};
}

JB_String* SC_Imp_Render(SCImport* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendString(fs, self->Mod->Name);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Imp_Use(SCImport* self) {
	if (self) {
		JB_Mem_Use(self->DeclLayer);
		SC__Imp_Curr = self;
	}
}

void SC_Imp__ExportShaders() {
	if ((!SC__Imp_Shaders)) {
		return;
	}
	SC_Comp__Stage(JB_LUB[790]);
	SC_Comp__Timer(JB_LUB[790]);
	JB_File* _tmPf2 = JB_Incr(SC_Comp__BuildFolder());
	JB_File* P = JB_Incr(JB_File_SyntaxAccess(_tmPf2, JB_LUB[1178]));
	JB_Decr(_tmPf2);
	if ((!JB_File_SyntaxCast(P))) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(P);
		return;
	}
	JB_FreeIfDead(SC_Str_MakeAndGoInto(P));
	{
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(SC__Imp_Shaders));
		while (true) {
			JB_Object* f = JB_Incr(JB_DictionaryReader_NextValue(_navf0));
			if (f == nil) {
				JB_Decr(f);
				break;
			}
			JB_String* sh_name = JB_Incr(JB_Nav_Name(_navf0));
			if (JB_Object_Isa(f, &JB_FileData)) {
				JB_String* name = JB_Incr(JB_Str_Name(((JB_File*)f)));
				JB_File* _tmPf3 = JB_Incr(JB_File_SyntaxAccess(P, name));
				JB_Decr(name);
				JB_File* Dest = JB_Incr(_tmPf3);
				JB_Decr(_tmPf3);
				JB_String* _tmPf5 = JB_Incr(JB_File_ReadAll(((JB_File*)f), 134217728, true));
				JB_String* _tmPf4 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[69], _tmPf5));
				JB_Decr(_tmPf5);
				(JB_File_DataSet(Dest, _tmPf4));
				JB_Decr(Dest);
				JB_Decr(_tmPf4);
			}
			 else if (JB_Object_Isa(f, &JB_StringData)) {
				JB_File* _tmPf6 = JB_Incr(JB_File_SyntaxAccess(P, sh_name));
				JB_File* Dest = JB_Incr(_tmPf6);
				JB_Decr(_tmPf6);
				debugger;
				(JB_File_DataSet(Dest, ((JB_String*)f)));
				JB_Decr(Dest);
			}
			JB_Decr(f);
			JB_Decr(sh_name);
		};
		JB_Decr(_navf0);
	}
	;
	JB_Decr(P);
}

SCImport* SC_Imp__FindImport(JB_String* s) {
	{
		Array* _LoopSrcf2 = SC__Comp_ImportedList;
		int _if0 = 0;
		while (true) {
			SCImport* imp = ((SCImport*)JB_Array_Value(_LoopSrcf2, _if0));
			if (imp == nil) {
				break;
			}
			if (JB_Str_Equals(s, imp->Where, true)) {
				return imp;
			}
			_if0++;
		};
	}
	;
	return nil;
}

JB_File* SC_Imp__FindInputFolder(JB_File* f) {
	JB_String* FirstName = JB_Incr(JB_LUB[0]);
	{
		JB_File_ListStart(f);
		while (JB_File_MoveNext(f)) {
			JB_String* name = JB_Incr(JB_File_CurrChild(f));
			if (SC_Imp__IsInputName(name)) {
				if ((!JB_Str_Exists(FirstName))) {
					JB_SetRef(FirstName, name);
				}
				 else {
					if (true) {
						FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
						JB_FS_AppendString(_fsf0, JB_LUB[1036]);
						JB_FS_AppendString(_fsf0, name);
						JB_FS_AppendString(_fsf0, JB_LUB[254]);
						JB_FS_AppendString(_fsf0, FirstName);
						JB_FS_AppendByte(_fsf0, '\'');
						JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf0));
						JB_Decr(_fsf0);
						JB_Object_Fail(nil, _tmPf3);
						JB_Decr(_tmPf3);
					}
				}
			}
			JB_Decr(name);
		};
		JB_File_ListEnd(f);
	}
	;
	if ((!JB_Str_Exists(FirstName))) {
		FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf1, JB_LUB[703]);
		JB_FS_AppendString(_fsf1, f);
		JB_FS_AppendString(_fsf1, JB_LUB[411]);
		JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		JB_File_Fail(f, _tmPf4);
		JB_Decr(_tmPf4);
		JB_Decr(FirstName);
		return nil;
	}
	JB_File* _tmPf5 = JB_Incr(JB_File_SyntaxAccess(f, FirstName));
	JB_Decr(FirstName);
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

SCImport* SC_Imp__ImportPath(JB_String* path, JB_File* f, int ImportDepth, bool Builtin) {
	JB_Incr(f);
	SCImport* rz = nil;
	if ((!(JB_File_MustExist(f, JB_LUB[0]) and SC_Str_IsOKForImport(path)))) {
		JB_Decr(f);
		JB_Decr(rz);
		return nil;
	}
	JB_String* _tmPf0 = JB_Incr(JB_File_Path(f));
	JB_String* fpl = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	SCImport* old = JB_Incr(((SCImport*)JB_Dict_ValueStr(SC__Comp_ImportedNames, fpl)));
	if (old) {
		JB_Decr(f);
		JB_Decr(fpl);
		JB_Decr(rz);
		JB_SafeDecr(old);
		return old;
	}
	JB_Decr(old);
	JB_SetRef(rz, SC_Imp_Constructor(nil, f, Builtin));
	JB_Array_SyntaxAppend(SC__Comp_ImportedList, rz);
	rz->Depth = ImportDepth;
	(JB_Dict_ValueSet(SC__Comp_ImportedNames, fpl, rz));
	JB_Decr(fpl);
	SCFile* conf = nil;
	if (JB_Str_Exists(SC__Options_SingleFileInput) and (!JB_Str_Exists(path))) {
		JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(SC__Options_SingleFileInput));
		JB_SetRef(conf, SC_Imp_ImportSpd(rz, _tmPf1));
		JB_Decr(_tmPf1);
	}
	 else if ((!JB_File_IsDir(f))) {
		JB_SetRef(conf, SC_Imp_ImportSpd(rz, f));
	}
	 else {
		if ((!((JB_Str_ContainsString(path, JB_LUB[388])) and (JB_Str_ByteValue(path, 0) != '/')))) {
			JB_SetRef(f, SC_Imp__FindInputFolder(f));
			if ((!(JB_File_SyntaxCast(f) and JB_File_MustExist(f, JB_LUB[0])))) {
				JB_Decr(f);
				JB_Decr(conf);
				JB_Decr(rz);
				return nil;
			}
		}
		JB_SetRef(conf, SC_Imp_ImportDir(rz, f));
	}
	SC_Imp_LoadConf(rz, conf);
	JB_File* _tmPf2 = JB_Incr(JB_File_SyntaxAccess(f, JB_LUB[1533]));
	SC_Imp_IncludeCHeaders(rz, _tmPf2, SC__Cpp_H_Input);
	JB_Decr(_tmPf2);
	JB_File* _tmPf3 = JB_Incr(JB_File_SyntaxAccess(f, JB_LUB[1534]));
	JB_Decr(f);
	SC_Imp_IncludeCHeaders(rz, _tmPf3, SC__Cpp_H_PostInput);
	JB_Decr(_tmPf3);
	if (JB_File_SyntaxCast(conf)) {
		SC_Imp_ReloadImports(rz, conf);
	}
	JB_Decr(conf);
	JB_SafeDecr(rz);
	return rz;
}

int SC_Imp__Init_() {
	{
		JB_SetRef(SC__Imp_AllFiles, JB_Array_Constructor0(nil));
		SC__Imp_Recent = 0;
		SC__Imp_STDLibTime = false;
		SC__Imp_CurrIsManuallyImported = 0;
	}
	;
	return 0;
}

int SC_Imp__InitCode_() {
	return 0;
}

bool SC_Imp__IsInputName(JB_String* name) {
	if ((JB_Str_Equals(name, JB_LUB[1714], true)) or JB_Str_OperatorIsa(name, JB_LUB[1714])) {
		return true;
	}
	return false;
}

void SC_Imp__NoProj() {
	SC__Imp_Curr = nil;
	JB_ClassData_Restore((&SCDeclData));
}


void SC_NR_Collect(SCNodeRenamer* self, Message* msg, JB_String* name, Message* after) {
	JB_Incr(msg);
	JB_SetRef(self->Name, name);
	while (msg != after) {
		if (SC_Msg_OperatorIsThing(msg, name)) {
			JB_Array_SyntaxAppend(self->Nodes, msg);
		}
		JB_SetRef(msg, ((Message*)JB_Ring_FlatNext0(msg)));
	};
	JB_Decr(msg);
}

void SC_NR_CollectDclThg(SCNodeRenamer* self, Message* DclThg) {
	Message* Dcl = JB_Msg_Ancestor(DclThg, JB_SyxDecl);
	if ((!(((bool)Dcl) and (JB_Msg_EqualsSyx(DclThg, JB_SyxThg, false))))) {
		JB_Msg_SyntaxExpect(DclThg, nil);
		return;
	}
	SC_NR_Collect(self, DclThg, DclThg->Name, SC_Msg_FullAfter(Dcl));
}

void SC_NR_CollectSelfs(SCNodeRenamer* self, Message* root) {
	{
		Message* Msg = JB_Incr(root);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(root)));
		while (((bool)(Msg)) and (Msg != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(Msg)));
			if (JB_Msg_EqualsSyx(Msg, JB_SyxSDot, false)) {
				SC_Func__Tran_Sdt(Msg);
			}
			JB_SetRef(Msg, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(Msg);
		JB_Decr(_afterf1);
		;
	}
	;
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_FlatAfter(root)));
	SC_NR_Collect(self, root, JB_LUB[1934], _tmPf3);
	JB_Decr(_tmPf3);
}

SCNodeRenamer* SC_NR_Constructor(SCNodeRenamer* self) {
	if (self == nil) {
		self = ((SCNodeRenamer*)JB_NewClass(&SCNodeRenamerData));
	}
	JB_StringC* _tmPf1 = JB_LUB[0];
	self->Name = JB_Incr(_tmPf1);
	Array* _tmPf0 = JB_Array_Constructor0(nil);
	self->Nodes = JB_Incr(_tmPf0);
	return self;
}

void SC_NR_Destructor(SCNodeRenamer* self) {
	JB_Clear(self->Name);
	JB_Clear(self->Nodes);
}

void SC_NR_Rename(SCNodeRenamer* self, Message* name) {
	if (JB_Ring_HasChildren(name)) {
		JB_Msg_SyntaxExpect(name, JB_LUB[1376]);
		return;
	}
	{
		Array* _LoopSrcf2 = self->Nodes;
		int _if0 = 0;
		while (true) {
			Message* n = ((Message*)JB_Array_Value(_LoopSrcf2, _if0));
			if (n == nil) {
				break;
			}
			n->Func = name->Func;
			JB_SetRef(n->Name, name->Name);
			n->Position = name->Position;
			_if0++;
		};
	};
}

void SC_NR_Uniqueify(SCNodeRenamer* self, SCNode* p) {
	JB_String* _tmPf1 = JB_Incr(SC_UniqueTmpVar(p, self->Name));
	Message* _tmPf0 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, _tmPf1));
	JB_Decr(_tmPf1);
	SC_NR_Rename(self, _tmPf0);
	JB_Decr(_tmPf0);
}


Message* SC_SCObject_AnySource(SCObject* self) {
	Message* s = self->Source;
	if (s) {
		return s;
	}
	if (JB_Object_FastIsa(self, &SCModuleData)) {
		SCClass* c = ((SCModule*)self)->Cls;
		if (c) {
			return SC_Base_SourceArg(c);
		}
	}
	return nil;
}

int SC_SCObject_Auto_Type(SCObject* self) {
	if (JB_Object_FastIsa(self, &SCDeclData)) {
		if (SC_Decl_SyntaxIs(((SCDecl*)self), kSC__SCDeclInfo_Property)) {
			return -2;
		}
		if (SC_Decl_SyntaxIs(((SCDecl*)self), kSC__SCDeclInfo_Const)) {
			return 5;
		}
		return 0;
	}
	if (JB_Object_FastIsa(self, &SCFunctionData)) {
		if (SC_Func_SyntaxIs(((SCFunction*)self), kSC__FunctionType_VirtualCaller)) {
			return 4;
		}
		return 1;
	}
	if (JB_Object_Isa(self, &SCClassData) or JB_Object_Isa(self, &SCModuleData)) {
		return 2;
	}
	return 3;
}

int SC_SCObject_AutoCompleteType(SCObject* self) {
	if (JB_Object_FastIsa(self, &SCModuleData)) {
		if (((SCModule*)self)->Cls) {
			int r = 1;
			if (SC_Class_EqualsType(((SCModule*)self)->Cls, kSC__SCNodeType_FuncProto, false)) {
				r = (r | 8);
			}
			return r;
		}
		return 2;
	}
	return 4;
}

JB_String* SC_SCObject_BaseIcon(SCObject* self) {
	if (JB_Object_FastIsa(self, &SCModuleData)) {
		if (((SCModule*)self)->Cls) {
			return JB_LUB[105];
		}
		return JB_LUB[103];
	}
	if (JB_Object_FastIsa(self, &SCFunctionData)) {
		if (SC_Func_IsBehaviour(((SCFunction*)self))) {
			return JB_LUB[167];
		}
		if (SC_Func_SyntaxIs(((SCFunction*)self), kSC__FunctionType_VirtualCaller)) {
			return JB_LUB[200];
		}
		return JB_LUB[175];
	}
	if (JB_Object_FastIsa(self, &SCClassData)) {
		return JB_LUB[104];
	}
	if (JB_Object_FastIsa(self, &SCDeclData)) {
		if (SC_Decl_SyntaxIs(((SCDecl*)self), kSC__SCDeclInfo_Property)) {
			return JB_LUB[106];
		}
		if (SC_Decl_SyntaxIs(((SCDecl*)self), kSC__SCDeclInfo_Const)) {
			return JB_LUB[186];
		}
	}
	if (JB_Object_FastIsa(self, &SCIteratorData)) {
		return JB_LUB[102];
	}
	return JB_LUB[108];
}

JB_String* SC_SCObject_CallFromName(SCObject* self) {
	if (JB_Object_FastIsa(self, &SCFunctionData)) {
		return SC_Func_RenderName(((SCFunction*)self), nil);
	}
	if (JB_Object_FastIsa(self, &SCDeclData)) {
		return SC_Decl_AutoCompleteName(((SCDecl*)self));
	}
	if (JB_Object_Isa(self, &SCNamedData)) {
		return ((SCNamed*)self)->Name;
	}
	return JB_LUB[0];
}

JB_String* SC_SCObject_CanAuto(SCObject* self, JB_String* search) {
	JB_String* rz = JB_LUB[0];
	rz = SC_SCObject_CanAutoSub(self, search);
	if (JB_Str_Exists(rz)) {
		bool IsExact = (JB_Str_Equals(rz, search, true));
		if (JB_Object_FastIsa(self, &SCFunctionData)) {
			if (SC_Func_VisibleArgs(((SCFunction*)self))) {
				rz = JB_Str_OperatorPlus(rz, JB_LUB[270]);
			}
		}
		if ((!IsExact) and ((bool)self->NoAutoComplete)) {
			rz = JB_LUB[0];
		}
	}
	return rz;
}

JB_String* SC_SCObject_CanAutoSub(SCObject* self, JB_String* search) {
	if (JB_Object_FastIsa(self, &SCFunctionData)) {
		if ((!((!((SCFunction*)self)->NoAutoComplete) or ((JB_Str_Equals(((SCFunction*)self)->Name, search, true)))))) {
			return JB_LUB[0];
		}
		if ((JB_Str_OperatorStarts(((SCFunction*)self)->Name, JB_LUB[1846])) and (!(JB_Str_OperatorStarts(search, JB_LUB[1845])))) {
			return JB_LUB[0];
		}
	}
	 else if (JB_Object_FastIsa(self, &SCDeclData)) {
		return SC_Decl_RealName(((SCDecl*)self));
	}
	 else if (JB_Object_FastIsa(self, &SCModuleData)) {
		SCClass* cls = ((SCModule*)self)->Cls;
		if (cls) {
			if (((bool)cls->NoAutoComplete) or SC_Class_IsBehaviourTable(cls)) {
				return JB_LUB[0];
			}
		}
	}
	if (JB_Object_Isa(self, &SCNamedData)) {
		return ((SCNamed*)self)->Name;
	}
	return JB_LUB[0];
}

SCObject* SC_SCObject_Constructor(SCObject* self) {
	if (self == nil) {
		self = ((SCObject*)JB_NewClass(&SCObjectData));
	}
	self->Source = nil;
	self->NoAutoComplete = 0;
	self->AllocSource = 0;
	self->LinkedFrom = 0;
	self->NodeInfo = 0;
	self->LinkFrom = nil;
	return self;
}

void SC_SCObject_Destructor(SCObject* self) {
	JB_Clear(self->LinkFrom);
	JB_Clear(self->Source);
}

SCFunction* SC_SCObject_Disambiguate(SCObject* self, Message* src) {
	SCFunction* rz = nil;
	if (JB_Object_FastIsa(self, &SCDeclData)) {
		rz = ((SCDecl*)self)->HiderFunc;
	}
	if (JB_Object_FastIsa(self, &SCFunctionData)) {
		rz = ((SCFunction*)self);
	}
	rz = SC_Func_Disambiguate(rz, src);
	return rz;
}

JB_String* SC_SCObject_Display(SCObject* self, bool exact) {
	if (JB_Object_FastIsa(self, &SCFunctionData)) {
		if (SC_Func_IsAllocOrNew(((SCFunction*)self)) or ((SCFunction*)self)->IsDisabled) {
			return JB_LUB[0];
		}
		return ((JB_String*)JB_Ternary(exact, SC_Func_RenderTitle(((SCFunction*)self), false, nil), ((SCFunction*)self)->Name));
	}
	if (JB_Object_FastIsa(self, &SCDeclData)) {
		return SC_Decl_AutoCompleteName(((SCDecl*)self));
	}
	if (JB_Object_FastIsa(self, &SCIteratorData)) {
		return JB_LUB[0];
	}
	if (JB_Object_Isa(self, &SCNamedData)) {
		return ((SCNamed*)self)->Name;
	}
	return JB_LUB[0];
}

SCFile* SC_SCObject_File(SCObject* self) {
	Message* src = self->Source;
	if (src) {
		return SC_Msg_SCFile(src);
	}
	if (JB_Object_FastIsa(self, &SCModuleData)) {
		return ({
			SCClass* _t = ((SCModule*)self)->Cls;
			 ((SCFile*)JB_Ternary(((bool)_t), SC_SCObject_File(_t), nil));
		});
	}
	return nil;
}

bool SC_SCObject_IsVisible(SCObject* self) {
	return SC_SCObject_SyntaxIs(self, kSC__SCNodeInfo_Visible);
}

void SC_SCObject_IsVisibleSet(SCObject* self, bool Value) {
	((SC_SCObject_SyntaxIsSet(self, kSC__SCNodeInfo_Visible, Value)));
}

SCObject* SC_SCObject_NextDisplay(SCObject* self, bool exact) {
	if (exact) {
		if (JB_Object_FastIsa(self, &SCFunctionData)) {
			return ((SCFunction*)self)->NextFunc;
		}
		if (JB_Object_FastIsa(self, &SCDeclData)) {
			return ((SCDecl*)self)->HiderFunc;
		}
	}
	return nil;
}

void SC_SCObject_Fail(SCObject* self, JB_String* Error) {
	JB_Rec__NewErrorWithNode(self->Source, Error, nil);
}

bool SC_SCObject_SyntaxIs(SCObject* self, SCNodeInfo i) {
	return JB_int_SyntaxAccess(self->NodeInfo, i);
}

void SC_SCObject_SyntaxIsSet(SCObject* self, SCNodeInfo i, bool Value) {
	int x = self->NodeInfo;
	x = JB_int_SyntaxAccessSet(x, i, Value);
	self->NodeInfo = x;
}


JB_String* SC_Opp_CaseAwareStr(SCOperator* self) {
	return JB_bool_Render0(((bool)(SC_Opp_SyntaxIs(self, kSC__OpMode_CaseAware))));
}

SCOperator* SC_Opp_Constructor(SCOperator* self, JB_String* name, fn_OpASM ASM, OpMode mode) {
	if (self == nil) {
		self = ((SCOperator*)JB_NewClass(&SCOperatorData));
	}
	self->Score = 0;
	JB_StringC* _tmPf2 = JB_LUB[0];
	self->CompOp = JB_Incr(_tmPf2);
	JB_StringC* _tmPf1 = JB_LUB[0];
	self->CompParam = JB_Incr(_tmPf1);
	JB_StringC* _tmPf0 = JB_LUB[0];
	self->FuncName = JB_Incr(_tmPf0);
	self->Opposite = nil;
	self->Name = JB_Incr(name);
	self->Kind = mode;
	self->ASM = ASM;
	(JB_Dict_ValueSet(SC__Opp_Dict, name, self));
	return self;
}

void SC_Opp_Destructor(SCOperator* self) {
	JB_Clear(self->Name);
	JB_Clear(self->CompOp);
	JB_Clear(self->CompParam);
	JB_Clear(self->FuncName);
}

void SC_Opp_InitComp(SCOperator* self, JB_String* name_) {
	if (JB_Str_First(name_) == '~') {
		self->Kind = (self->Kind | kSC__OpMode_CaseAware);
	}
	self->Kind = (self->Kind | kSC__OpMode_Compare);
	JB_SetRef(self->FuncName, JB_LUB[1112]);
	JB_String* s = JB_Incr(SC_Opp_SimpleName(self));
	if (JB_Str_Length(s) == 2) {
		JB_SetRef(self->CompOp, s);
	}
	 else {
		JB_SetRef(self->CompOp, JB_LUB[591]);
	}
	if (JB_Str_Equals(s, JB_LUB[573], false)) {
		JB_SetRef(self->CompParam, JB_LUB[324]);
		JB_SetRef(self->CompOp, JB_LUB[582]);
	}
	 else if (JB_Str_Equals(s, JB_LUB[592], false)) {
		JB_SetRef(self->CompParam, JB_LUB[450]);
		JB_SetRef(self->CompOp, JB_LUB[594]);
	}
	 else if (((JB_Str_Equals(s, JB_LUB[582], false))) or ((JB_Str_Equals(s, JB_LUB[594], false)))) {
		JB_SetRef(self->CompParam, JB_LUB[441]);
	}
	 else {
		JB_SetRef(self->CompParam, JB_LUB[441]);
	}
	JB_Decr(s);
}

bool SC_Opp_IsCompSet(SCOperator* self) {
	return ((bool)SC_Opp_SyntaxIs(self, kSC__OpMode_CompSet));
}

void SC_Opp_SetFuncNameSet(SCOperator* self, JB_String* s) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_UpperFirst(s));
	JB_SetRef(self->FuncName, JB_Str_OperatorPlus(JB_LUB[1111], _tmPf0));
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_Incr(JB_Str_LowerCase(s));
	(JB_Dict_ValueSet(SC__Opp_Dict, _tmPf1, self));
	JB_Decr(_tmPf1);
}

JB_String* SC_Opp_SimpleName(SCOperator* self) {
	JB_String* n = self->Name;
	if (SC_Opp_SyntaxIs(self, kSC__OpMode_CaseAware)) {
		return JB_Str_Range(n, (1), JB_int__Max());
	}
	return n;
}

bool SC_Opp_SyntaxEquals(SCOperator* self, JB_String* s, bool aware) {
	return JB_Str_Equals(self->Name, s, aware);
}

OpMode SC_Opp_SyntaxIs(SCOperator* self, OpMode x) {
	return self->Kind & x;
}

void SC_Opp__AddAssign(JB_String* s) {
	SC_Opp_Constructor(nil, s, (&SC_asmOps__Assign), kSC__OpMode_Assigns);
}

void SC_Opp__AddBit(JB_String* s, JB_String* FuncName, fn_OpASM ASM, OpMode Mode) {
	SCOperator* opp = JB_Incr(SC_Opp_Constructor(nil, s, ASM, Mode | kSC__OpMode_Bit));
	(SC_Opp_SetFuncNameSet(opp, FuncName));
	JB_Decr(opp);
}

void SC_Opp__AddComp(JB_String* s, fn_OpASM ASM, OpMode Mode) {
	SCOperator* opp = JB_Incr(SC_Opp_Constructor(nil, s, ASM, Mode | kSC__OpMode_Compare));
	SC_Opp_InitComp(opp, s);
	JB_Decr(opp);
	JB_String* newname = JB_Incr(((JB_String*)JB_Ternary((!JB_Str_Equals(s, JB_LUB[591], false)), ((JB_String*)JB_Str_OperatorPlus(JB_LUB[2083], s)), ((JB_String*)JB_LUB[2092]))));
	Mode = (Mode & (~kSC__OpMode_NilTest));
	SCOperator* _tmPf0 = JB_Incr(SC_Opp_Constructor(nil, newname, nil, Mode | kSC__OpMode_Custom));
	SC_Opp_InitComp(_tmPf0, newname);
	JB_Decr(newname);
	JB_Decr(_tmPf0);
}

SCOperator* SC_Opp__AddCustom(JB_String* s) {
	SCOperator* opp = JB_Incr(SC_Opp_Constructor(nil, s, nil, kSC__OpMode_Custom));
	opp->Score = SC__Opp_CustomOperatorScore;
	(SC_Opp_SetFuncNameSet(opp, s));
	JB_SafeDecr(opp);
	return opp;
}

SCOperator* SC_Opp__AddMath(JB_String* s, JB_String* FuncName, fn_OpASM ASM, OpMode Mode) {
	SCOperator* opp = JB_Incr(SC_Opp_Constructor(nil, s, ASM, Mode | kSC__OpMode_Math));
	(SC_Opp_SetFuncNameSet(opp, FuncName));
	JB_SafeDecr(opp);
	return opp;
}

void SC_Opp__BuildOrder() {
	JB_String* Strs = JB_Incr(JB_LUB[80]);
	Array* order = JB_Incr(JB_Str_Split(Strs, '\n'));
	JB_Decr(Strs);
	Message* fake = JB_Incr((JB_Syx_Msg(JB_SyxOpp, JB_LUB[0])));
	{
		int _if0 = 0;
		while (true) {
			JB_String* wi = JB_Incr(((JB_String*)JB_Array_Value(order, _if0)));
			if (wi == nil) {
				JB_Decr(wi);
				break;
			}
			int i = _if0;
			{
				Array* _LoopSrcf4 = JB_Incr(JB_Str_Words(wi));
				int _if2 = 0;
				while (true) {
					JB_String* s2 = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf4, _if2)));
					if (s2 == nil) {
						JB_Decr(s2);
						break;
					}
					if (JB_Str_Exists(s2)) {
						JB_SetRef(fake->Name, s2);
						SCOperator* _tmPf5 = JB_Incr(SC_Opp__Lookup(fake));
						_tmPf5->Score = i;
						JB_Decr(_tmPf5);
					}
					JB_Decr(s2);
					_if2++;
				};
				JB_Decr(_LoopSrcf4);
			}
			;
			JB_Decr(wi);
			_if0++;
		};
	}
	;
	JB_Decr(order);
	JB_Decr(fake);
	SCOperator* _tmPf6 = JB_Incr(((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, JB_LUB[587])));
	_tmPf6->Score = 100;
	JB_Decr(_tmPf6);
	SCOperator* _tmPf7 = JB_Incr(((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, JB_LUB[1582])));
	SC__Opp_CustomOperatorScore = _tmPf7->Score;
	JB_Decr(_tmPf7);
}

void SC_Opp__Init() {
	SC_Opp__AddComp(JB_LUB[591], (&SC_asmOps__Equals), kSC__OpMode_ExactEquals);
	SC_Opp__AddComp(JB_LUB[573], (&SC_asmOps__Less), 0);
	SC_Opp__AddComp(JB_LUB[592], (&SC_asmOps__More), 0);
	SC_Opp__AddComp(JB_LUB[582], (&SC_asmOps__LessEq), 0);
	SC_Opp__AddComp(JB_LUB[594], (&SC_asmOps__MoreEq), 0);
	SC_Opp__AddComp(JB_LUB[216], (&SC_asmOps__NotEq), kSC__OpMode_ExactNotEquals);
	SC_Opp__OppositeComp(JB_LUB[591], JB_LUB[216]);
	SC_Opp__OppositeComp(JB_LUB[573], JB_LUB[594]);
	SC_Opp__OppositeComp(JB_LUB[592], JB_LUB[582]);
	SC_Opp__AddAssign(JB_LUB[587]);
	JB_FreeIfDead(SC_Opp__AddMath(JB_LUB[1795], JB_LUB[1795], (&SC_asmOps__Mod), 0));
	JB_FreeIfDead(SC_Opp__AddMath(JB_LUB[298], JB_LUB[1134], (&SC_asmOps__Plus), kSC__OpMode_Addition));
	JB_FreeIfDead(SC_Opp__AddMath(JB_LUB[307], JB_LUB[1011], (&SC_asmOps__Minus), kSC__OpMode_MakesSigned + kSC__OpMode_Addition));
	JB_FreeIfDead(SC_Opp__AddMath(JB_LUB[295], JB_LUB[1032], (&SC_asmOps__Mul), 0));
	JB_FreeIfDead(SC_Opp__AddMath(JB_LUB[388], JB_LUB[826], (&SC_asmOps__Div), 0));
	SC_Opp__AddBit(JB_LUB[581], JB_LUB[1183], (&SC_asmOps__ROL), kSC__OpMode_Left);
	SC_Opp__AddBit(JB_LUB[596], JB_LUB[1184], (&SC_asmOps__ROR), kSC__OpMode_Left);
	SC_Opp__AddBit(JB_LUB[595], JB_LUB[1219], (&SC_asmOps__SHR), kSC__OpMode_Left);
	SC_Opp__AddBit(JB_LUB[580], JB_LUB[1218], (&SC_asmOps__SHL), 0);
	SC_Opp__AddBit(JB_LUB[278], JB_LUB[669], (&SC_asmOps__BitOr), 0);
	SC_Opp__AddBit(JB_LUB[242], JB_LUB[668], (&SC_asmOps__BitAnd), kSC__OpMode_SameOrLessBits);
	SC_Opp__AddBit(JB_LUB[1424], JB_LUB[1397], (&SC_asmOps__BitXor), kSC__OpMode_NoExtraBits);
	SCOperator* BitOr = JB_Incr(((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, JB_LUB[278])));
	(JB_Dict_ValueSet(SC__Opp_Dict, JB_LUB[2069], BitOr));
	(JB_Dict_ValueSet(SC__Opp_Dict, JB_LUB[2078], BitOr));
	JB_Decr(BitOr);
	SC_Opp__AddBit(JB_LUB[1728], JB_LUB[1728], nil, 0);
	SC_Opp__AddBit(JB_LUB[1730], JB_LUB[1730], nil, 0);
	SC_Opp__BuildOrder();
}

int SC_Opp__Init_() {
	{
		JB_SetRef(SC__Opp_Dict, JB_Dict_Constructor(nil));
		SC__Opp_CustomOperatorScore = 0;
	}
	;
	return 0;
}

int SC_Opp__InitCode_() {
	return 0;
}

SCOperator* SC_Opp__Lookup(Message* opch) {
	SCOperator* result = ((SCOperator*)opch->Obj);
	if (result) {
		if ((!((bool)SC_Opp_SyntaxIs(result, kSC__OpMode_Custom)))) {
			JB_SetRef(opch->Name, result->Name);
		}
		return result;
	}
	JB_String* op = opch->Name;
	result = ((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, op));
	if ((!result)) {
		result = SC_Opp__AddCustom(op);
	}
	 else if ((!JB_Str_Equals(op, result->Name, false))) {
		if ((!((bool)SC_Opp_SyntaxIs(result, kSC__OpMode_Custom)))) {
			JB_SetRef(opch->Name, result->Name);
		}
	}
	if (JB_Str_Equals(op, JB_LUB[1856], false)) {
		result->Kind = (result->Kind | kSC__OpMode_OR);
	}
	 else if (JB_Str_Equals(op, JB_LUB[1482], false)) {
		result->Kind = (result->Kind | kSC__OpMode_AND);
	}
	return result;
}

void SC_Opp__OppositeComp(JB_String* A, JB_String* B) {
	SCOperator* pA = ((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, A));
	SCOperator* pB = ((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, B));
	if (((bool)pA) and ((bool)pB)) {
		pA->Opposite = pB;
		pB->Opposite = pA;
	}
}


void SC_PA_AddParam(SCParamArray* self, Message* item) {
	SC_PA_addsub(self, item);
	self->HasProperParams = true;
}

void SC_PA_addsub(SCParamArray* self, Message* m) {
	if (self->Size >= 11) {
		JB_Msg_SyntaxExpect(m, JB_LUB[1320]);
		return;
	}
	s16 i = self->Size++;
	self->Items[i] = m;
}

bool SC_PA_AddTestedParam(SCParamArray* self, Message* item, SCNode* name_space) {
	if ((!SC_TypeOfExpr(item, name_space, nil))) {
		JB_Msg_SyntaxExpect(item, JB_LUB[740]);
		return nil;
	}
	SC_PA_AddParam(self, item);
	return true;
}

SCFunction* SC_PA_ArgsMatchError(SCParamArray* self, int TypeCast, SCFunction* f, SCFunction* R) {
	if ((!SC_PA_MadeError(self))) {
		if (true) {
			JB_String* _tmPf0 = JB_Incr(SC_Str_ArgsMatchError(JB_LUB[1037], TypeCast != 0));
			JB_Msg_SyntaxExpect(self->Exp, _tmPf0);
			JB_Decr(_tmPf0);
		}
		if (true) {
			JB_Msg_SyntaxExpect(f->Source, JB_LUB[725]);
		}
		if (true) {
			JB_Msg_SyntaxExpect(R->Source, JB_LUB[726]);
		}
	}
	return nil;
}

SCParamArray* SC_PA_Constructor(SCParamArray* self, Message* exp) {
	if (self == nil) {
		self = ((SCParamArray*)JB_NewClass(&SCParamArrayData));
	}
	self->Cls = nil;
	self->Size = 0;
	self->IsAssigns = false;
	self->HasProperParams = false;
	self->IsNotModule = false;
	self->IsSelf = false;
	self->IsSuper = false;
	self->Found = false;
	self->AllowSelfToConstructor = false;
	self->Exp = exp;
	self->IsDot = ((JB_Msg_EqualsSyx(exp, JB_SyxDot, false)));
	self->IsAddress = (((bool)exp) and SC_Msg_OperatorIsBRel(SC_Msg_NiceParent(exp), JB_LUB[242]));
	self->ErrCount = JB_StdErr->ErrorCount;
	return self;
}

Array* SC_PA_CopyArgs(SCParamArray* self) {
	Array* rz = ((Array*)JB_Array_Constructor0(nil));
	{
		int _nf0 = self->Size;
		int _if1 = 0;
		while (_if1 < _nf0) {
			Message* s = self->Items[_if1];
			JB_Array_SyntaxAppend(rz, s);
			_if1++;
		};
	}
	;
	return rz;
}

SCNode* SC_PA_DetectDotSuper(SCParamArray* self, SCNode* curr, SCNode* arg_space) {
	self->IsNotModule = (!SC_Base_IsModuleFunc(curr));
	if (self->IsDot) {
		Message* Exp0 = ((Message*)JB_Ring_First(self->Exp));
		if (Exp0) {
			self->IsSelf = ((JB_Msg_SyntaxEquals(Exp0, JB_LUB[1934], true)));
			if (self->IsNotModule) {
				SCDecl* ty = SC_TypeOfExpr(Exp0, arg_space, nil);
				if (ty) {
					self->Cls = ty->Type;
				}
				SC_PA_addsub(self, Exp0);
				if (SC_Msg_OperatorIsThing(Exp0, JB_LUB[1975])) {
					self->IsSuper = true;
					JB_SetRef(Exp0->Name, JB_LUB[1934]);
					return curr->Parent;
				}
			}
		}
	}
	return curr;
}

int SC_PA_IgnoreSelfContain(SCParamArray* self) {
	int rz = 0;
	SCClass* cls = self->Cls;
	if (cls) {
		if (self->IsDot and self->IsNotModule) {
			if (SC_Class_IsStruct(cls)) {
				rz = (rz | kJB_kTypeCastIgnoreAddressOf);
			}
			if (cls->IgnoreContainedSelf) {
				rz = (rz | kJB_kTypeCastIgnoreContained);
			}
		}
	}
	return rz;
}

bool SC_PA_IsModule(SCParamArray* self) {
	return (!self->IsNotModule);
}

bool SC_PA_IsSelfCon(SCParamArray* self) {
	return (self->IsSelf or self->IsSuper) and (SC_Func_SyntaxIs(SC__Func_CurrFunc, kSC__FunctionType_Constructor));
}

int SC_PA_MacroSize(SCParamArray* self) {
	if (self->IsAssigns) {
		return self->Size - 1;
	}
	return self->Size;
}

bool SC_PA_MadeError(SCParamArray* self) {
	return JB_StdErr->ErrorCount > self->ErrCount;
}

JB_String* SC_PA_ModuleName(SCParamArray* self) {
	Message* p = SC_PA_SyntaxAccess(self, 0);
	if ((!self->IsNotModule)) {
		p = ((Message*)JB_Ring_First(self->Exp));
	}
	if (p) {
		return SC_Msg_RenderType(p);
	}
	return JB_LUB[0];
}

bool SC_PA_PreReadTypes(SCParamArray* self, SCNode* Name_Space, Message* P, Message* side) {
	if (((bool)P) and (!self->Exp)) {
		self->Exp = P;
	}
	{
		Message* Item = JB_Incr(((Message*)JB_Ring_First(P)));
		while (Item) {
			if ((!SC_PA_AddTestedParam(self, Item, Name_Space))) {
				JB_Decr(Item);
				return nil;
			}
			JB_SetRef(Item, ((Message*)JB_Ring_NextSib(Item)));
		};
		JB_Decr(Item);
		;
	}
	;
	(SC_PA_SideSet(self, side));
	return true;
}

JB_String* SC_PA_Render(SCParamArray* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	{
		int _LoopSrcf1 = ((int)self->Size);
		int i = 0;
		int _firstf2 = i;
		while (i < _LoopSrcf1) {
			if (_firstf2 != i) {
				JB_FS_AppendByte(fs, ' ');
				JB_FS_AppendByte(fs, ',');
			}
			//start;
			Message* obj = JB_Incr(self->Items[i]);
			JB_FreeIfDead(JB_Msg_Render(obj, fs));
			SCDecl* ty = JB_Incr(SC_TypeOfExpr(obj, nil, nil));
			JB_Decr(obj);
			if (ty) {
				JB_FreeIfDead(SC_Decl_Render(ty, fs));
			}
			JB_Decr(ty);
			i++;
		};
	}
	;
	JB_String* _tmPf3 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

JB_String* SC_PA_RenderKind(SCParamArray* self) {
	if (self->IsNotModule) {
		return JB_LUB[1545];
	}
	return JB_LUB[1799];
}

void SC_PA_SideSet(SCParamArray* self, Message* Value) {
	if (Value) {
		SC_PA_addsub(self, Value);
		self->IsAssigns = true;
	}
}

Message* SC_PA_SyntaxAccess(SCParamArray* self, int i) {
	if (i < self->Size) {
		return self->Items[i];
	}
	return nil;
}


bool JB_Sav_IsSaveMarked(Saveable* self) {
	int* p = ((int*)self);
	return (((bool)(p[0] & kJB__Saver_RefMark)));
}

void JB_Sav_LoadProperties(Saveable* self, ObjectLoader* Loader) {
	Loader->CouldntLoad = self;
}

void JB_Sav_SaveCollect(Saveable* self, ObjectSaver* Saver) {
}

bool JB_Sav_SaveMark(Saveable* self) {
	int* p = ((int*)self);
	int rc = p[0];
	if ((((bool)(rc & kJB__Saver_RefMark)))) {
		return nil;
	}
	p[0] = (rc | kJB__Saver_RefMark);
	return true;
}

SaverClassInfo* JB_Sav_SaverInfo(Saveable* self) {
	return ((SaverClassInfo*)JB_ObjClass(self)->SaveInfo);
}

void JB_Sav_SaveToFile(Saveable* self, JB_File* f) {
	FastString* it = JB_Incr(JB_Str_Out(f, true));
	if (it) {
		JB_FreeIfDead(JB_Sav_SaveTo(self, it));
	}
	JB_Decr(it);
}

JB_String* JB_Sav_SaveTo(Saveable* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	ObjectSaver Saver = JB_Saver__New();
	JB_SetRef(Saver.Dest, fs);
	Saver.Root = self;
	JB_FS_AppendString(fs, kJB_kSaverStart1);
	JB_Object_SaveTryCollect(self, (&Saver));
	SaverClassInfo* sci = JB__Saver_SaveableList;
	while (sci != nil) {
		JB_sci_Output(sci, (&Saver));
		sci = sci->NextInfo;
	};
	sci = JB__Saver_SaveableList;
	while (sci != nil) {
		JB_sci_Clear(sci);
		sci = sci->NextInfo;
	};
	JB_Saver_Finish((&Saver), self);
	JB_String* result = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SetRef(Saver.Dest, nil);
	Saver.CantSaveThis = nil;
	JB_SafeDecr(result);
	JB_Saver_Destructor((&Saver));
	return result;
}

void JB_Sav_SaveUnMark(Saveable* self) {
	int* p = ((int*)self);
	p[0] = (p[0] & (~kJB__Saver_RefMark));
}

void JB_Sav_SaveWrite(Saveable* self, ObjectSaver* Saver) {
	Saver->CantSaveThis = self;
	JB_FS_AppendString(Saver->Dest, JB_LUB[1812]);
}


Selector* JB_Sel_Constructor(Selector* self, Selector* Next, Selector** Place, JB_String* name) {
	if (self == nil) {
		self = ((Selector*)JB_NewClass(&SelectorData));
	}
	self->ID = 0;
	self->Name = JB_Incr(name);
	self->Next = JB_Incr(Next);
	JB_SetRef((*Place), self);
	return self;
}

void JB_Sel_Destructor(Selector* self) {
	JB_Clear(self->Name);
	JB_Clear(self->Next);
}

void JB_Sel_GiveIDs(Selector* self) {
	int ID = 0;
	{
		Selector* curr = self;
		while (curr) {
			curr->ID = ID;
			ID++;
			curr = ((Selector*)(curr->Next));
		};
	};
}


JB_String* JB_Str_AddExt(JB_String* self, JB_String* ext) {
	JB_Incr(ext);
	if ((!JB_Str_Exists(ext))) {
		JB_Decr(ext);
		return self;
	}
	if (JB_Str_First(ext) != '.') {
		JB_SetRef(ext, JB_Str_OperatorPlus(JB_LUB[354], ext));
	}
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(self, ext));
	JB_Decr(ext);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Str_AfterByte(JB_String* self, byte b, int Last) {
	Ind Start = JB_Str_FindByte(self, b, Last, 0);
	return JB_Str_Range(self, Start + 1, Last);
}

JB_String* JB_Str_ArgName(JB_String* self) {
	if (JB_Str_First(self) == '-') {
		Ind i = JB_Str_FindByte(self, '=', 0, JB_int__Max());
		if ((!JB_Ind_SyntaxCast(i))) {
			i = JB_int__Max();
		}
		JB_String* S = JB_Incr(JB_Str_Range(self, 0, i));
		JB_SetRef(S, JB_Str_TrimFirst(S, '-'));
		JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(S));
		JB_Decr(S);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	return JB_LUB[0];
}

JB_String* SC_Str_ArgsMatchError(JB_String* self, bool TypeCast) {
	if ((!TypeCast)) {
		return self;
	}
	return JB_Str_OperatorPlus(self, JB_LUB[126]);
}

JB_String* JB_Str_ArgValue(JB_String* self) {
	if (JB_Str_First(self) != '-') {
		return self;
	}
	Ind it = JB_Str_FindByte(self, '=', 0, JB_int__Max());
	if (JB_Ind_SyntaxCast(it)) {
		return JB_Str_Range(self, it + (1), JB_int__Max());
	}
	return JB_LUB[2005];
}

uint SC_Str_ASMint(JB_String* self) {
	uint rz = 0;
	rz = JB_Str_Int(self);
	if ((!JB_int_OperatorInRange(((int)rz), 32))) {
		debugger;
		return 0;
	}
	return rz;
}

JB_String* SC_Str_ASMNormalise(JB_String* self) {
	int n = 0;
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte c = _Startf0[0];
			c = JB_byte_LowerCase(c);
			if ((c == 'r') or (c == 'n')) {
				n++;
			}
			 else if ((c == 'l') or ((c == 's') or (c == 'j'))) {
				0;
			}
			 else {
				return self;
			}
			_Startf0++;
		};
	}
	;
	return JB_Str_PlusByte(JB_LUB[1334], ('0' + n));
}

JB_String* JB_Str_BackToApp(JB_String* self) {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	JB_String* s = JB_Incr(JB_Str_TrimSlashes(self, false));
	JB_String* _tmPf0 = JB_Incr(JB_Str_Name(self));
	JB_String* Final = JB_Incr(JB_Str_OperatorPlus(JB_LUB[366], _tmPf0));
	JB_Decr(_tmPf0);
	if (JB_Str_OperatorEndsWith(s, Final)) {
		JB_SetRef(rz, JB_Str_Range(s, 0, 4 + (JB_Str_OperatorMinus(s, Final))));
	}
	 else {
		JB_SetRef(rz, self);
	}
	JB_Decr(s);
	JB_Decr(Final);
	JB_SafeDecr(rz);
	return rz;
}

JB_String* JB_Str_Before(JB_String* self, JB_String* s) {
	Ind f = JB_Str_InStr(self, s, 0, JB_int__Max(), false);
	if (JB_Ind_SyntaxCast(f)) {
		return JB_Str_Range(self, 0, f);
	}
	return self;
}

JB_String* JB_Str_BeforeLastByte(JB_String* self, byte b, int fudge) {
	int Last = JB_Str_TrimLastSub(self, b);
	Ind Start = JB_Str_FindByte(self, b, Last, 0);
	return JB_Str_Range(self, 0, Start + fudge);
}

Array* JB_Str_ByteSplit(JB_String* self) {
	Array* rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	{
		int _LoopSrcf1 = JB_Str_Length(self);
		int n = 0;
		while (n < _LoopSrcf1) {
			JB_String* _tmPf2 = JB_Incr(JB_Str__Byte(JB_Str_ByteValue(self, n)));
			JB_Array_SyntaxAppend(rz, _tmPf2);
			JB_Decr(_tmPf2);
			n++;
		};
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

CharSet* JB_Str_CharSetWithBool(JB_String* self, bool Range) {
	return JB_CS_Constructor(nil, self, Range);
}

JB_String* JB_Str_Child(JB_String* self, JB_String* cname) {
	if ((!JB_Str_Exists(self))) {
		return cname;
	}
	int C = ((int)(JB_Str_Last(self, 0) == '/'));
	C = (C + (JB_Str_First(cname) == '/'));
	if (C == 1) {
		return JB_Str_OperatorPlus(self, cname);
	}
	if (C == 0) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[388], cname));
		JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(self, _tmPf0));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(cname, 1, JB_int__Max()));
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(self, _tmPf1));
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

Array* JB_Str_Components(JB_String* self) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_TrimSlashes(self, false));
	Array* _tmPf1 = JB_Incr(JB_Str_Split(_tmPf0, '/'));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Str_Compress(JB_String* self, int Strength, CompressionStats* st) {
	FastString* j = JB_Incr(JB_bin_Constructor0(nil, 0));
	JB_Str_CompressInto(self, j, Strength, st);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(j));
	JB_Decr(j);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_Str_CompressInto(JB_String* self, JB_Object* fs, int Strength, CompressionStats* st) {
	StringReader* _tmPf0 = JB_Incr(JB_Str_Stream(self));
	JB_SS_CompressInto(_tmPf0, fs, Strength, st);
	JB_Decr(_tmPf0);
}

bool JB_Str_CompressTest(JB_String* self, bool report, int which) {
	if (((bool)(which & 1))) {
		if ((!JB_Str_CompressTestSub(self, kJB__MZLab_Strong, report))) {
			return nil;
		}
	}
	if (((bool)(which & 2))) {
		if ((!JB_Str_CompressTestSub(self, kJB__MZLab_Fast, report))) {
			return nil;
		}
	}
	return true;
}

bool JB_Str_CompressTestSub(JB_String* self, int Strength, bool report) {
	bool rz = false;
	CompressionStats stats = ((CompressionStats){});
	JB_String* c = JB_Incr(JB_Str_Compress(self, Strength, (&stats)));
	if (report) {
		JB_MzSt_Print((&stats));
	}
	stats = ((CompressionStats){});
	JB_String* decomp = JB_Incr(JB_Str_Decompress(c, JB_int__Max(), (&stats)));
	rz = (JB_Str_Equals(self, decomp, false));
	if ((!rz)) {
		if (true) {
			JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[817], self));
			JB_Str_SyntaxExpect(_tmPf0);
			JB_Decr(_tmPf0);
		}
		JB_SetRef(decomp, JB_Str_Decompress(c, JB_int__Max(), nil));
	}
	 else if (report) {
		JB_String* _tmPf1 = JB_Incr(JB_MzSt_Render((&stats), nil));
		JB_PrintLine(_tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(c);
	JB_Decr(decomp);
	return rz;
}

JB_String* SC_Str_ContainerName(JB_String* self, JB_String* ext) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_PathDir(ext));
	Ind After = JB_Str_InStr(self, _tmPf0, 0, JB_int__Max(), false);
	JB_Decr(_tmPf0);
	if (JB_Ind_SyntaxCast(After)) {
		JB_String* _tmPf1 = JB_Incr(JB_Str_Range(self, 0, After));
		JB_String* _tmPf2 = JB_Incr(JB_Str_Name(_tmPf1));
		JB_Decr(_tmPf1);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	return JB_LUB[0];
}

ErrorInt JB_Str_CopyFileTo(JB_String* self, JB_String* Dest, bool AttrOnly) {
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(self));
	JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(Dest));
	ErrorInt _tmPf2 = JB_File_Copy(_tmPf0, _tmPf1, AttrOnly);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	return _tmPf2;
}

int JB_Str_Count(JB_String* self, byte b) {
	int rz = 0;
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte c = _Startf0[0];
			rz = (rz + (c == b));
			_Startf0++;
		};
	}
	;
	return rz;
}

ErrorInt2 SC_Str_DebugExecute(JB_String* self, Array* Args, FastString* Out, FastString* Errs) {
	if (JB__File_DebugExecute) {
		JB_Str_Print(self);
		JB_Str_Print(JB_LUB[100]);
		JB_String* _tmPf0 = JB_Incr(JB_Array_Render(Args, nil));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return JB_Str_Execute(self, Args, Out, Errs, false);
}

void SC_Str_DebugFunc(JB_String* self) {
	//visible;
	if (SC_Func_SyntaxEquals(SC__Func_CurrFunc, self, true)) {
		debugger;
	}
}

JB_String* JB_Str_Decompress(JB_String* self, int lim, CompressionStats* st) {
	StringReader* _tmPf0 = JB_Incr(JB_Str_Stream(self));
	JB_String* _tmPf1 = JB_Incr(JB_SS_Decompress(_tmPf0, lim, st, true));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Dictionary* JB_Str_Dict(JB_String* self, byte sep) {
	Dictionary* rz = JB_Incr(((Dictionary*)nil));
	JB_SetRef(rz, JB_Dict_Constructor(nil));
	if (JB_Str_Exists(self)) {
		{
			StringFields* _LoopSrcf2 = JB_Incr(JB_FI_Constructor(nil, self, sep));
			int _Prevf0 = 0;
			while (true) {
				Ind _Curr_f1 = JB_FI_NextSep(_LoopSrcf2, _Prevf0);
				JB_String* l = JB_Incr(JB_FI_Field(_LoopSrcf2, _Prevf0, _Curr_f1));
				(JB_Dict_ValueSet(rz, l, JB_LUB[2054]));
				JB_Decr(l);
				_Prevf0 = (_Curr_f1 + 1);
				if ((!JB_Ind_SyntaxCast(_Curr_f1))) {
					break;
				}
			};
			JB_Decr(_LoopSrcf2);
		};
	}
	JB_SafeDecr(rz);
	return rz;
}

JB_String* JB_Str_Digest(JB_String* self) {
	if (JB_Ind_SyntaxCast(JB_Str_IsJbin(self))) {
		return self;
	}
	Message* _tmPf0 = JB_Incr(JB_Str_Parse(self, JB_SyxArg, true));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return JB_LUB[0];
	}
	JB_String* _tmPf1 = JB_Incr(JB_Msg_RenderJbin(_tmPf0, JB_LUB[0], nil));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool JB_Str_EndsWith(JB_String* self, JB_String* s, bool aware) {
	int n = JB_Str_Length(s);
	int L = JB_Str_Length(self);
	{
		IntRange _LoopSrcf2 = JB_int_OperatorTo(1, n);
		int __Endf0 = _LoopSrcf2[1];
		int i = _LoopSrcf2[0];
		while (i < __Endf0) {
			byte a = JB_Str_ByteValue(self, L - i);
			byte b = JB_Str_ByteValue(s, n - i);
			if (aware) {
				a = JB_byte_LowerCase(a);
				b = JB_byte_LowerCase(b);
			}
			if (a != b) {
				return nil;
			}
			i++;
		};
	}
	;
	return true;
}

JB_String* JB_Str_Escape(JB_String* self) {
	return JB_Str_MultiReplaceAll(self, JB__Constants_EscapeStr, JB_StdErr);
}

JB_String* JB_Str_EscapeChr(JB_String* self) {
	return JB_Str_MultiReplaceAll(self, JB__Constants_EscapeChr, JB_StdErr);
}

bool JB_Str_EscapeTest(JB_String* self) {
	JB_String* esc = JB_Incr(JB_Str_Escape(self));
	JB_String* back = JB_Incr(JB_Str_Unescape(esc));
	JB_Decr(esc);
	bool _tmPf0 = ((JB_Str_Equals(back, self, false)));
	JB_Decr(back);
	return _tmPf0;
}

JB_String* JB_Str_Ext(JB_String* self) {
	Ind i = JB_Str_FindByte(self, '.', JB_int__Max(), 0);
	if ((!JB_Ind_SyntaxCast(i))) {
		return JB_LUB[0];
	}
	Ind n = JB_Str_OutByteWithByteIntInt(self, '/', JB_int__Max(), 0);
	if ((!JB_Ind_SyntaxCast(n))) {
		n = JB_Str_Length(self);
	}
	return JB_Str_Range(self, i + 1, n + 1);
}

JB_File* JB_Str_AsFile(JB_String* self) {
	if (JB_Object_Isa(self, &JB_FileData)) {
		return ((JB_File*)self);
	}
	return JB_Str_File(self);
}

JB_File* JB_Str_ChildFile(JB_String* self, JB_String* ch) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Child(self, ch));
	JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool JB_Str_FileExists(JB_String* self) {
	JB_File* f = JB_Incr(JB_Str_AsFile(self));
	bool _tmPf0 = JB_File_Exists(f, false);
	JB_Decr(f);
	return _tmPf0;
}

int64 JB_Str_FileSize(JB_String* self) {
	JB_File* f = JB_Incr(JB_Str_AsFile(self));
	int64 _tmPf0 = JB_File_Size(f);
	JB_Decr(f);
	return _tmPf0;
}

JB_File* JB_Str_FileThatExists(JB_String* self, JB_String* operation) {
	JB_File* f = JB_Incr(JB_Str_AsFile(self));
	if (JB_File_MustExist(f, operation)) {
		JB_SafeDecr(f);
		return f;
	}
	JB_Decr(f);
	return nil;
}

Ind JB_Str_FindByte(JB_String* self, byte find, int Start, int After) {
	return JB_Str_InByte(self, Start, After, find);
}

Ind JB_Str_Find(JB_String* self, CharSet* cs, int Start, int After) {
	return JB_Str_CharSet(self, Start, After, cs, true);
}

Ind JB_Str_FindSlash(JB_String* self, int from) {
	Ind rz = -1;
	if (from < JB_Str_Length(self)) {
		rz = JB_Str_FindByte(self, '/', from, JB_int__Max());
		if ((!JB_Ind_SyntaxCast(rz))) {
			rz = JB_Str_Length(self);
		}
	}
	return rz;
}

int JB_Str_FindTrailingSlashes(JB_String* self) {
	int rz = 0;
	rz = JB_Str_Length(self);
	while (JB_Str_ByteValue(self, rz - 1) == '/') {
		rz--;
	};
	return rz;
}

int64 JB_Str_Int(JB_String* self) {
	return JB_Str_TextIntegerValid(self, nil);
}

JB_String* SC_Str_InterfaceToBehaviour(JB_String* self) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Range(self, 2, JB_Str_Length(self) - 2));
	JB_String* _tmPf1 = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Ind JB_Str_InWhite(JB_String* self, int Start, int After) {
	return JB_Str_WhiteSpace(self, Start, After, true);
}

bool SC_Str_isCLike(JB_String* self) {
	if (JB_Platform__OSX()) {
		return ((JB_Str_Equals(self, JB_LUB[1569], true)) or ((JB_Str_Equals(self, JB_LUB[1771], true)) or (JB_Str_Equals(self, JB_LUB[1794], true))));
	}
	 else {
		return ((JB_Str_Equals(self, JB_LUB[1569], true)));
	}
}

bool JB_Str_IsCompressed(JB_String* self) {
	return JB_Ind_SyntaxCast(JB_Str_IsJbin(self)) and JB_Str_MidEquals(self, JB_Str_Length(JB__JbinHeader), JB_LUB[88], false);
}

int JB_Str_IsHexLike(JB_String* self, int N) {
	if (JB_Str_ByteValue(self, N + 0) == '0') {
		byte X = JB_Str_ByteValue(self, N + 1);
		if (JB_byte_IsLetter(X)) {
			return 2;
		}
	}
	return 0;
}

bool JB_Str_IsInt(JB_String* self) {
	return JB_Str_IsIntFrom(self, 0);
}

bool JB_Str_IsIntFrom(JB_String* self, int i) {
	if ((!JB_Str_Exists(self))) {
		return nil;
	}
	while (i < JB_Str_Length(self)) {
		if ((!JB_byte_IsInt(JB_Str_ByteValue(self, i++)))) {
			return nil;
		}
	};
	return true;
}

Ind JB_Str_IsJbin(JB_String* self) {
	if ((JB_Str_First(self) == '#') and (JB_Str_ByteValue(self, 1) == '!')) {
		Ind nl = JB_Str_FindByte(self, '\n', 0, JB_int__Max());
		if (JB_Ind_SyntaxCast(nl)) {
			nl++;
			if (JB_Str_MidEquals(self, nl, JB__JbinHeader, false)) {
				return nl;
			}
		}
	}
	 else if (JB_Str_MidEquals(self, 0, JB__JbinHeader, false)) {
		return 0;
	}
	return -1;
}

bool JB_Str_IsLower(JB_String* self) {
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte s = _Startf0[0];
			if (JB_byte_IsUpper(s)) {
				return nil;
			}
			_Startf0++;
		};
	}
	;
	return true;
}

bool SC_Str_Isnull(JB_String* self) {
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte c = _Startf0[0];
			if (c != '\x00') {
				return nil;
			}
			_Startf0++;
		};
	}
	;
	return true;
}

bool JB_Str_IsOK(JB_String* self) {
	return (self != nil) and (((JB_Object*)self) != ((JB_Object*)JB_Str__Error()));
}

bool SC_Str_IsOKForImport(JB_String* self) {
	JB_String* X = JB_Incr(self);
	if (JB_Str_OperatorStarts(self, JB_LUB[994])) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(self, (6), JB_int__Max()));
		bool _tmPf1 = SC_Str_IsOKForImport(_tmPf0);
		JB_Decr(_tmPf0);
		JB_Decr(X);
		return _tmPf1;
	}
	while (JB_Str_First(X) == '/') {
		JB_SetRef(X, JB_Str_Range(X, (1), JB_int__Max()));
	};
	if ((!JB_Str_Exists(X)) or JB_CS_HasChar(JB__Constants_CSWordStart, JB_Str_First(X))) {
		JB_Decr(X);
		return true;
	}
	if (true) {
		JB_Object_Fail(X, JB_LUB[937]);
	}
	JB_Decr(X);
	return false;
}

bool SC_Str_IsSpeedieSrc(JB_String* self) {
	return (JB_Str_OperatorIsa(self, JB_LUB[1954]));
}

bool JB_Str_IsStatementName(JB_String* self) {
	return (JB_CS_OperatorContains(JB__Constants_CSWordMiddle, self)) and ((!JB_byte_IsInt((JB_Str_First(self)))));
}

int SC_Str_IsSwizzle(JB_String* self, int Width) {
	int N = JB_Str_Length(self);
	int Total = 0;
	int i = 0;
	int shift = 0;
	int c = 0;
	int dold = 0;
	if (N > 8) {
		return 0;
	}
	bool HasLetter = false;
	while (i < N) {
		byte d = JB_byte_LowerCase(JB_Str_ByteValue(self, i++));
		if (d != '_') {
			HasLetter = true;
			if ((!(((!c)) or (((d >= 'w') == (dold >= 'w')) or (dold == '_'))))) {
				return 0;
			}
		}
		c = d;
		dold = d;
		if ((c == 'r') or (c == 'x')) {
			c = 0;
		}
		 else if ((c == 'g') or (c == 'y')) {
			c = 1;
		}
		 else if ((c == 'b') or (c == 'z')) {
			c = 2;
		}
		 else if ((c == 'a') or (c == 'w')) {
			c = 3;
		}
		 else if (c == '_') {
			c = 4;
		}
		if (i < N) {
			int c2 = JB_byte_LowerCase(JB_Str_ByteValue(self, i));
			if (c2 == '1') {
				i++;
			}
			 else if (c2 == '2') {
				i++;
				if (Width == 3) {
					return 0;
				}
				c = (c + (Width >> 1));
			}
		}
		if ((!((c <= 4) and (c >= 0)))) {
			return 0;
		}
		Total = (Total | (c << (shift++ * 3)));
	};
	if (HasLetter) {
		return Total | (shift << 16);
	}
	return 0;
}

bool SC_Str_IsZero(JB_String* self) {
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte c = _Startf0[0];
			if ((!((c == '.') or (c == '0')))) {
				return nil;
			}
			_Startf0++;
		};
	}
	;
	return true;
}

Ind JB_Str_JBFind(JB_String* self, byte find, int Off, int After) {
	After = JB_int_OperatorMin(After, JB_Str_Length(self));
	while (Off < After) {
		byte c = JB_Str_ByteValue(self, Off++);
		if (c == '\\') {
			Off++;
		}
		 else if (c == find) {
			if (find == '$') {
				if (Off >= After) {
					break;
				}
				byte nxt = JB_Str_ByteValue(self, Off);
				if ((!(((nxt == '{') or (nxt == '.')) or JB_CS_HasChar(JB__Constants_CSWordStart, nxt)))) {
					continue;
				}
			}
			return Off - 1;
		}
	};
	return -1;
}

byte JB_Str_Last(JB_String* self, int minus) {
	return JB_Str_ByteValue(self, JB_Str_Length(self) - (1 + minus));
}

int JB_Str_LineCount(JB_String* self) {
	if ((!JB_Str_Exists(self))) {
		return 1;
	}
	return JB_Str_Count(self, '\n') + 1;
}

JB_File* SC_Str_MakeAndGoInto(JB_String* self) {
	JB_File* rz = nil;
	JB_SetRef(rz, JB_Str_AsFile(self));
	JB_Str_MakeEntirePath(rz, true);
	(JB_App__CWDSet(self));
	JB_SafeDecr(rz);
	return rz;
}

ErrorInt JB_Str_MakeEntirePath(JB_String* self, bool Last) {
	ErrorInt rz = 0;
	//visible;
	JB_String* p = ((JB_String*)JB_Ternary(Last, self, JB_Str_Parent(self)));
	{
		JB_String* _Pf0 = JB_Incr(JB_Str_TrimSlashes(p, true));
		Ind _if1 = JB_Str_FindSlash(_Pf0, 1);
		while (_if1 > 0) {
			JB_String* S = JB_Incr(JB_Str_Range(_Pf0, 0, _if1));
			int err = ((int)JB_Str_MakeDir(S));
			JB_Decr(S);
			if (err) {
				rz = err;
				break;
			}
			_if1 = JB_Str_FindSlash(_Pf0, _if1 + 1);
		};
		JB_Decr(_Pf0);
	}
	;
	return rz;
}

JB_String* JB_Str_Moat(JB_String* self) {
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	(JB_FS_SizeSet(fs, JB_Str_Length(self) + 4));
	JB_FS_AppendString(fs, JB_LUB[1440]);
	JB_FS_AppendString(fs, self);
	JB_FS_AppendString(fs, JB_LUB[1440]);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* JB_Str_Msg(JB_String* self) {
	return JB_Syx_OperatorPlus(JB_SyxStr, self);
}

JB_String* JB_Str_Name(JB_String* self) {
	int Last = JB_Str_TrimLastSub(self, '/');
	return JB_Str_AfterByte(self, '/', Last);
}

bool JB_Str_ContainsString(JB_String* self, JB_String* s) {
	return JB_Ind_SyntaxCast(JB_Str_InStr(self, s, 0, JB_int__Max(), true));
}

bool JB_Str_ContainsByte(JB_String* self, byte b) {
	return JB_Ind_SyntaxCast(JB_Str_FindByte(self, b, 0, JB_int__Max()));
}

Array* JB_Str_OperatorDivide(JB_String* self, byte sep) {
	return JB_Str_Split(self, sep);
}

bool JB_Str_OperatorEndsWith(JB_String* self, JB_String* s) {
	return JB_Str_EndsWith(self, s, true);
}

bool JB_Str_OperatorIsa(JB_String* self, JB_String* s) {
	if (JB_Str_Exists(self)) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Ext(self));
		bool _tmPf1 = (JB_Str_Equals(_tmPf0, s, true));
		JB_Decr(_tmPf0);
		return _tmPf1;
	}
	return false;
}

int JB_Str_OperatorMinus(JB_String* self, JB_String* s) {
	return JB_Str_Length(self) - JB_Str_Length(s);
}

JB_String* JB_Str_MulBool(JB_String* self, bool b) {
	return ((JB_String*)JB_Ternary(b, ((JB_String*)self), ((JB_String*)JB_LUB[0])));
}

JB_String* JB_Str_OperatorMul(JB_String* self, int n) {
	if (n <= 1) {
		return JB_Str_MulBool(self, n == 1);
	}
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	(JB_FS_SizeSet(fs, n * JB_Str_Length(self)));
	JB_FS_AppendMultiStr(fs, self, n);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Str_PlusByte(JB_String* self, byte B) {
	return JB_Str_OperatorPlus(self, JB_Str__Byte(B));
}

JB_String* JB_Str_OperatorPlusWithCstring(JB_String* self, _cstring c) {
	if (JB_Str_Exists(self)) {
		FakeJBString tmp = JB_cstring_temp(c);
		return JB_Str_OperatorPlus(self, ((JB_String*)((&tmp))));
	}
	return JB_cstring_Str(c);
}

bool JB_Str_OperatorStarts(JB_String* self, JB_String* s) {
	return JB_Str_MidEquals(self, 0, s, true);
}

bool SC_Str_OptionBool(JB_String* self) {
	return ((JB_Str_Equals(self, JB_LUB[0], true)) or ((JB_Str_Equals(self, JB_LUB[2005], true)) or (JB_Str_Equals(self, JB_LUB[2064], true))));
}

int SC_Str_OptionInt(JB_String* self) {
	if (SC_Str_OptionBool(self)) {
		return 1;
	}
	return JB_Str_Int(self);
}

FastString* JB_Str_Out(JB_String* self, bool Clear) {
	FastString* rz = nil;
	JB_File* f = JB_Incr(JB_Str_AsFile(self));
	if (Clear and (!JB_File_IsPipe(f))) {
		JB_File_Close(f);
		if ((!JB_File_OpenBlank(f))) {
			JB_Decr(f);
			JB_Decr(rz);
			return nil;
		}
	}
	JB_SetRef(rz, JB_FS_Constructor(nil));
	(JB_FS_FileSet(rz, f));
	JB_Decr(f);
	JB_SafeDecr(rz);
	return rz;
}

Ind JB_Str_OutByteWithByteIntInt(JB_String* self, byte find, int Start, int After) {
	return JB_Str_OutByte(self, Start, After, find);
}

Ind JB_Str_OutCharSet(JB_String* self, CharSet* cs, int Start, int After) {
	return JB_Str_CharSet(self, Start, After, cs, false);
}

Ind JB_Str_OutWhite(JB_String* self, int Start, int After) {
	return JB_Str_WhiteSpace(self, Start, After, false);
}

JB_String* JB_Str_Parent(JB_String* self) {
	if ((!JB_Str_Equals(self, JB_LUB[388], false))) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_TrimSlashes(self, false));
		JB_String* _tmPf1 = JB_Incr(JB_Str_BeforeLastByte(_tmPf0, '/', 1));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf1);
		return _tmPf1;
	}
	return JB_LUB[0];
}

Message* JB_Str_Parse(JB_String* self, Syntax owner, bool AllowDecomp) {
	Message* rz = JB_Incr(((Message*)nil));
	JB_String* data = JB_Incr(JB_Str_Range(self, JB_int_OperatorMax(JB_Str_IsJbin(self), 0), JB_int__Max()));
	if (AllowDecomp and JB_Str_IsCompressed(data)) {
		JB_SetRef(data, JB_Str_Decompress(data, JB_int__Max(), nil));
	}
	Ind j2 = JB_Str_IsJbin(data);
	if (JB_Ind_SyntaxCast(j2)) {
		JB_SetRef(data, JB_Str_Range(data, j2, JB_int__Max()));
		JB_SetRef(rz, JB_Str_ParseJbin(data, kJB__int64_max));
	}
	 else {
		JB_SetRef(rz, JB_Str_ParseSub(data, owner, AllowDecomp));
	}
	JB_Decr(data);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Str_ParseClean(JB_String* self) {
	Message* rz = nil;
	SC__Comp_stTotalSourceSize = (SC__Comp_stTotalSourceSize + JB_Str_Length(self));
	Date P1 = JB_Date__Now();
	JB_SetRef(rz, JB_Str_Parse(self, JB_SyxArg, true));
	if ((!rz)) {
		JB_Decr(rz);
		return nil;
	}
	SC__Comp_stParseTime = (SC__Comp_stParseTime + ((int)(JB_Date__Now() - P1)));
	SC_Msg_Clean(rz, true);
	SC_Msg_PrepareAST(rz, JB_LUB[0]);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Str_ParseCleanWipe(JB_String* self) {
	Message* rz = nil;
	JB_SetRef(rz, SC_Str_ParseClean(self));
	if (rz) {
		JB_Msg_WipePositions(rz);
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* JB_Str_ParseJbin(JB_String* self, int64 max) {
	StringReader* _tmPf0 = JB_Incr(JB_Str_Stream(self));
	Message* _tmPf1 = JB_Incr(JB_SS_ParseJbin(_tmPf0, max));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_Str_ParseSub(JB_String* self, Syntax owner, bool AllowDecomp) {
	if ((!JB_Tk__CppInited())) {
		JB_Tk__Init();
	}
	JB_Tk__StartParse(self);
	JB__Tk_StopBars = 0;
	ErrorMarker OK = JB_Rec_Mark(JB_StdErr);
	int Flags = kJB__Tk_kTemporal;
	Message* into = JB_Incr(JB_Msg_ConstructorRange(nil, nil, owner, 0, JB_LUB[0], 0));
	bool lines = JB_Tk__ParseLoopFlags(into, JB_LUB[0], Flags);
	if ((!lines) and JB_Ring_HasChildCount(into, 1)) {
		JB_SetRef(into, ((Message*)JB_Ring_First(into)));
	}
	JB_Tk__CleanSpaces();
	if (JB_Tk__Running()) {
		JB_Tk__Expect(0);
	}
	JB_Tk__StopParse();
	if ((!JB_ErrorMarker_SyntaxCast(OK))) {
		JB_SetRef(into, nil);
	}
	JB_SafeDecr(into);
	return ((Message*)into);
}

Message* JB_Str_ParseWithError(JB_String* self, JB_Error** rec) {
	Message* rz = JB_Incr(((Message*)nil));
	JB_SetRef(rz, JB_Str_Parse(self, JB_SyxArg, true));
	if ((!rz)) {
		JB_Error* r = JB_Incr(JB_Rec_Pop(JB_StdErr));
		if (rec) {
			JB_SetRef((*rec), r);
		}
		JB_Decr(r);
	}
	JB_SafeDecr(rz);
	return rz;
}

JB_String* JB_Str_PathDir(JB_String* self) {
	if (JB_Str_Exists(self) and (JB_Str_Last(self, 0) != '/')) {
		return JB_Str_OperatorPlus(self, JB_LUB[388]);
	}
	return self;
}

JB_String* JB_Str_Preview(JB_String* self, int N) {
	//visible;
	if (JB_Str_Length(self) <= N) {
		return self;
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(self, 0, N));
	JB_String* _tmPf0 = JB_Incr(JB_Str_UnicodeSync(_tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, JB_LUB[358]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void JB_Str_PrintlineColor(JB_String* self, JB_String* color) {
	if (JB__ErrorColors_Enabled) {
		JB_Str_Print(color);
	}
	JB_PrintLine(self);
	if (JB__ErrorColors_Enabled) {
		JB_Str_Print(kJB__ErrorColors_normal);
	}
}

JB_String* JB_Str_ReadFile(JB_String* self, int lim, bool AllowMissing) {
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(self));
	JB_String* _tmPf1 = JB_Incr(JB_File_ReadAll(_tmPf0, lim, AllowMissing));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Str_ReplacePathComponent(JB_String* self, int num, JB_String* With) {
	Array* R = JB_Incr(JB_Str_Components(self));
	if (num < 0) {
		num = (num + JB_Array_Size(R));
	}
	(JB_Array_ValueSet(R, num, With));
	JB_String* _tmPf0 = JB_Incr(JB_Array_join(R, JB_LUB[388]));
	JB_Decr(R);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Str_ResolveSpd(JB_String* self) {
	if (JB_Str_MidEquals(self, 0, JB_LUB[605], false)) {
		JB_String* _tmPf1 = JB_Incr(SC_Comp__FindSpeedieRoot());
		JB_String* _tmPf2 = JB_Incr(JB_Str_Range(self, (5), JB_int__Max()));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(_tmPf1, _tmPf2));
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf2);
		JB_String* _tmPf3 = JB_Incr(JB_Str_ResolvePath((_tmPf0), kJB__FileResolveMode_AllowMissing));
		JB_Decr(_tmPf0);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	return JB_Str_ResolvePath(self, kJB__FileResolveMode_AllowMissing);
}

void SC_Str_Safe(JB_String* self, FastString* fs) {
	if (JB_Str_IsASCII(self)) {
		JB_FS_AppendString(fs, self);
		return;
	}
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte s = _Startf0[0];
			if (JB_byte_IsUpper(s) or (JB_byte_IsLower(s) or (JB_byte_IsInt(s) or (s == '_')))) {
				JB_FS_AppendByte(fs, s);
			}
			 else {
				JB_FS_AppendByte(fs, 'x');
				JB_FS_AppendHex(fs, s, 2);
			}
			_Startf0++;
		};
	};
}

JB_String* SC_Str_ScriptContainer(JB_String* self, JB_String* container) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(JB_int64_Abs(((int64)JB_Str_CRC(self, 0))), nil));
	JB_String* _tmPf1 = JB_Incr(JB_Str_SyntaxAccess(container, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Str_ScriptLocation(JB_String* self, JB_String* container) {
	JB_String* full = JB_Incr(JB_Str_ResolvePath(self, false));
	if ((!JB_Str_Exists(full))) {
		JB_SetRef(full, self);
	}
	JB_String* dest = JB_Incr(SC_Str_ScriptContainer(full, container));
	JB_Str_MakeEntirePath(dest, true);
	JB_String* _tmPf0 = JB_Incr(SC_Str_SpdScriptName(full));
	JB_Decr(full);
	JB_String* _tmPf1 = JB_Incr(JB_Str_SyntaxAccess(dest, _tmPf0));
	JB_Decr(dest);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* JB_Str_Sibling(JB_String* self, JB_String* name) {
	return JB_Str_ReplacePathComponent(self, -1, name);
}

ErrorInt2 JB_Str_SilentExecute(JB_String* self, Array* Args, FastString* Out, FastString* Errs) {
	return JB_Str_Execute(self, Args, Out, Errs, false);
}

JB_String* SC_Str_SpdScriptName(JB_String* self) {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	JB_SetRef(rz, SC_Str_ContainerName(self, JB_LUB[380]));
	if ((!(JB_Str_Exists(rz)))) {
		JB_SetRef(rz, SC_Str_ContainerName(self, JB_LUB[385]));
	}
	if ((!(JB_Str_Exists(rz)))) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Name(self));
		JB_SetRef(rz, JB_Str_TrimExtAndPath(_tmPf0, true));
		JB_Decr(_tmPf0);
	}
	JB_SafeDecr(rz);
	return rz;
}

Array* JB_Str_Split(JB_String* self, byte sep) {
	Array* rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	{
		StringFields* _LoopSrcf2 = JB_Incr(JB_FI_Constructor(nil, self, sep));
		int _Prevf0 = 0;
		while (true) {
			Ind _Curr_f1 = JB_FI_NextSep(_LoopSrcf2, _Prevf0);
			JB_String* field = JB_Incr(JB_FI_Field(_LoopSrcf2, _Prevf0, _Curr_f1));
			JB_Array_SyntaxAppend(rz, field);
			JB_Decr(field);
			_Prevf0 = (_Curr_f1 + 1);
			if ((!JB_Ind_SyntaxCast(_Curr_f1))) {
				break;
			}
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

JB_String* JB_Str_Squeeze(JB_String* self) {
	//visible;
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	bool broken = false;
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte c = _Startf0[0];
			if (JB_byte_IsWhite(c)) {
				broken = ((bool)fs->Length);
			}
			 else {
				if (broken) {
					JB_FS_AppendByte(fs, ' ');
				}
				JB_FS_AppendByte(fs, c);
				broken = false;
			}
			_Startf0++;
		};
	}
	;
	JB_String* _tmPf3 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

StringReader* JB_Str_Stream(JB_String* self) {
	return JB_SS_Constructor(nil, self);
}

JB_String* JB_Str_SyntaxAccess(JB_String* self, JB_String* s) {
	return JB_Str_Child(self, s);
}

bool JB_Str_SyntaxAppend(JB_String* self, JB_String* s) {
	return JB_Str_WriteSet(self, s);
}

int JB_Str_CompareStr(JB_String* self, JB_String* Other, bool Aware) {
	return JB_Str_Compare(self, Other, Aware);
}

int JB_Str_CompareInt(JB_String* self, int Other, bool Aware) {
	return JB_Str_Length(self) - Other;
}

bool JB_Str_EqualsInt(JB_String* self, int Other, bool Aware) {
	return JB_Str_Length(self) == Other;
}

void JB_Str_SyntaxExpect(JB_String* self) {
	//visible;
	JB_Rec__NewErrorWithNode(nil, self, nil);
}

JB_String* JB_Str_TitleCase(JB_String* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendByte(fs, JB_byte_UpperCase((JB_Str_First(self))));
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(self, 1, JB_int__Max()));
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(_tmPf1));
	JB_Decr(_tmPf1);
	JB_FS_AppendString(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_String* _tmPf2 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_String* JB_Str_Shorten(JB_String* self, int n) {
	return JB_Str_Range(self, 0, JB_Str_Length(self) - n);
}

JB_String* JB_Str_TrimExtAndPath(JB_String* self, bool KeepPath) {
	int N = JB_Str_FindTrailingSlashes(self);
	Ind slash = JB_Str_FindByte(self, '/', N - 1, 0) + 1;
	Ind dot = JB_Str_FindByte(self, '.', N - 1, slash);
	if ((!(JB_Ind_SyntaxCast(dot)))) {
		dot = N;
	}
	if ((!KeepPath)) {
		slash = 0;
	}
	return JB_Str_Range(self, slash, dot);
}

JB_String* JB_Str_TrimFirst(JB_String* self, byte b) {
	Ind s = JB_Str_OutByteWithByteIntInt(self, b, 0, JB_int__Max());
	return JB_Str_Range(self, (s), JB_int__Max());
}

int JB_Str_TrimLastSub(JB_String* self, byte b) {
	int N = JB_Str_Length(self);
	while (JB_Str_ByteValue(self, N - 1) == b) {
		N--;
	};
	return N;
}

JB_String* JB_Str_TrimSlashes(JB_String* self, bool Pathfix) {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	JB_String* p = JB_Incr(((JB_String*)JB_Ternary(Pathfix, JB_File_PathFix_(self), self)));
	if ((!((JB_Str_Last(p, 0) == '/') or JB_Str_ContainsString(p, JB_LUB[393])))) {
		JB_Decr(rz);
		JB_SafeDecr(p);
		return p;
	}
	JB_Decr(p);
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	int prev = 0;
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte c = _Startf0[0];
			if ((c != '/') or (prev != '/')) {
				JB_FS_AppendByte(fs, c);
			}
			prev = c;
			_Startf0++;
		};
	}
	;
	if (prev == '/') {
		(JB_FS_LengthSet(fs, fs->Length - 1));
	}
	JB_SetRef(rz, JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	if ((!JB_Str_Exists(rz)) and JB_Str_Exists(self)) {
		JB_SetRef(rz, JB_LUB[388]);
	}
	JB_SafeDecr(rz);
	return rz;
}

JB_String* JB_Str_TrimStart(JB_String* self, JB_String* s, bool All) {
	int i = 0;
	while (JB_Str_MidEquals(self, i, s, false)) {
		i = (i + JB_Str_Length(s));
		if ((!All)) {
			break;
		}
	};
	return JB_Str_Range(self, i, JB_int__Max());
}

bool SC_Str_UnderScoreAtAnyEnd(JB_String* self) {
	return (JB_Str_First(self) == '_') or (JB_Str_ByteValue(self, -1) == '_');
}

JB_String* JB_Str_Unescape(JB_String* self) {
	return JB_Str_MultiReplaceAll(self, JB__Constants_UnEscapeStr, JB_StdErr);
}

JB_String* SC_Str_UnicodeSafeName(JB_String* self, FastString* fs_in) {
	if (JB_Str_IsASCII(self)) {
		if (fs_in) {
			JB_FS_AppendString(fs_in, self);
		}
		return self;
	}
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte s = _Startf0[0];
			if (JB_CS_HasChar(JB_C_Letters, s)) {
				JB_FS_AppendByte(fs, s);
			}
			 else {
				JB_FS_AppendByte(fs, 'x');
				JB_FS_AppendHex(fs, s, 2);
			}
			_Startf0++;
		};
	}
	;
	JB_String* _tmPf3 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

CharSet* JB_Str_UniCS(JB_String* self) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(self, JB_LUB[2094]));
	CharSet* _tmPf1 = JB_Incr(JB_Str_CharSetWithBool((_tmPf0), true));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_Str_UnPrintable(JB_String* self) {
	if (JB_Ind_SyntaxCast(JB_Str_BadUTF8(self, 0))) {
		return -1;
	}
	{
		byte* _Startf0 = JB_Str_Address(self);
		byte* _Endf1 = _Startf0 + JB_Str_Length(self);
		while (_Startf0 < _Endf1) {
			byte c = _Startf0[0];
			if ((!((c >= ' ') or (c == 9)))) {
				if (JB_byte_IsTextLine(c)) {
					return '\n';
				}
				return -2;
			}
			_Startf0++;
		};
	}
	;
	return 0;
}

JB_String* JB_Str_UpperFirst(JB_String* self) {
	if (JB_byte_IsUpper((JB_Str_First(self)))) {
		return self;
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(self, 0, 1));
	JB_String* _tmPf0 = JB_Incr(JB_Str_UpperCase(_tmPf1));
	JB_Decr(_tmPf1);
	JB_String* _tmPf2 = JB_Incr(JB_Str_Range(self, (1), JB_int__Max()));
	JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf2));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf2);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

bool JB_Str_Visible(JB_String* self) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Name(self));
	bool _tmPf1 = JB_Str_First(_tmPf0) != '.';
	JB_Decr(_tmPf0);
	return _tmPf1;
}

Array* JB_Str_Words(JB_String* self) {
	return JB_Str_Split(self, ' ');
}

bool JB_Str_WriteSet(JB_String* self, JB_String* Value) {
	JB_File* _tmPf0 = JB_Incr(JB_Str_AsFile(self));
	bool _tmPf1 = JB_File_DataSet(_tmPf0, Value);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool JB_Str_Yes(JB_String* self) {
	if ((!JB_Str_Exists(self))) {
		return false;
	}
	if ((JB_Str_Equals(self, JB_LUB[1813], true)) or ((JB_Str_Equals(self, JB_LUB[1649], true)) or ((JB_Str_Equals(self, JB_LUB[1840], true)) or ((JB_Str_Equals(self, JB_LUB[441], true)) or (JB_Str_Equals(self, JB_LUB[0], true)))))) {
		return false;
	}
	if ((JB_Str_Equals(self, JB_LUB[2064], true)) or ((JB_Str_Equals(self, JB_LUB[2005], true)) or ((JB_Str_Equals(self, JB_LUB[1842], true)) or (JB_Str_Equals(self, JB_LUB[450], true))))) {
		return true;
	}
	if (true) {
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(self, JB_LUB[250]));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1089], _tmPf1));
		JB_Decr(_tmPf1);
		JB_Str_SyntaxExpect(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return false;
}

JB_String* JB_Str__FromPico(PicoMessage M) {
	byte* x = ((byte*)M.Data);
	if (x) {
		return JB_Str__Freeable(x, M.Length);
	}
	return JB_LUB[0];
}

bool JB_Str__Sorter(JB_Object* a, JB_Object* b) {
	return JB_Str_CompareStr(((JB_String*)a), ((JB_String*)b), false) <= -1;
}

JB_StringC* JB_Str__Wrap(_cstring Addr) {
	return JB_StrC(Addr);
}


StringFields* JB_FI_Constructor(StringFields* self, JB_String* Source, byte Sep) {
	if (self == nil) {
		self = ((StringFields*)JB_NewClass(&StringFieldsData));
	}
	self->Data = JB_Incr(Source);
	self->Sep = Sep;
	return self;
}

void JB_FI_Destructor(StringFields* self) {
	JB_Clear(self->Data);
}

JB_String* JB_FI_Field(StringFields* self, Ind Prev, Ind Curr) {
	if ((!(JB_Ind_SyntaxCast(Curr)))) {
		Curr = JB_Str_Length(self->Data);
	}
	return JB_Str_Range(self->Data, Prev, Curr);
}

Ind JB_FI_NextSep(StringFields* self, int Prev) {
	return JB_Str_FindByte(self->Data, self->Sep, Prev, JB_int__Max());
}


int JB_SS_Byte(StringReader* self) {
	if (JB_FastBuff_HasAny((&self->Data))) {
		return JB_FastBuff_Byte((&self->Data));
	}
	if (JB_SS_NextChunk(self)) {
		return JB_FastBuff_Byte((&self->Data));
	}
	return -1;
}

void JB_SS_CompressInto(StringReader* self, JB_Object* dest, int Strength, CompressionStats* st) {
	if (self == nil) {
		JB_Str_SyntaxExpect(JB_LUB[1060]);
		return;
	}
	FastString* j = JB_Incr(JB_FS__Use(dest));
	if ((!j)) {
		JB_Decr(j);
		return;
	}
	if ((!st)) {
		st = (&JB__MzSt_All);
	}
	JB_MzSt_Start(st);
	JB_FS_AppendString(j, JB__JbinHeader);
	JB_bin_Enter(j, JB_SyxTmp, JB_LUB[2099]);
	JB_bin_AddInt(j, self->Length);
	JB_bin_Enter(j, JB_SyxArg, JB_LUB[0]);
	while (JB_SS_HasAny(self)) {
		JB_String* str = JB_Incr(JB_SS_Str(self, 1048576, 0));
		int Place = JB_bin_OpenSection(j);
		JB_Str_CompressChunk(j, str);
		JB_bin_CloseSection(j, Place);
		JB_MzSt_LiveUpdate(st, JB_Str_Length(str), j->Length - Place);
		JB_Decr(str);
		if ((!JB_SS_NoMoreChunks(self))) {
			JB_FS_Flush(j);
		}
	};
	JB_bin_Up(j, 2);
	JB_FS_Flush(j);
	JB_Str_CompressChunk(j, nil);
	JB_Decr(j);
	JB_MzSt_End(st);
}

StringReader* JB_SS_Constructor(StringReader* self, JB_String* Data) {
	if (self == nil) {
		self = ((StringReader*)JB_NewClass(&StringReaderData));
	}
	self->Data = ((FastBuff){});
	self->File = nil;
	self->UserObj = nil;
	self->ChunkSize = 0;
	self->StartFrom = 0;
	(JB_FastBuff_ReadFromSet((&self->Data), Data));
	self->Length = JB_Str_Length(Data);
	self->_NoMoreChunks = true;
	return self;
}

JB_String* JB_SS_Decompress(StringReader* self, int lim, CompressionStats* st, bool Multi) {
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	while (JB_SS_HasAny(self)) {
		if ((!JB_SS_DecompressInto(self, fs, lim, st))) {
			JB_Decr(fs);
			return JB_Str__Error();
		}
		if ((!Multi)) {
			break;
		}
	};
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

bool JB_SS_DecompressInto(StringReader* self, JB_Object* dest, int lim, CompressionStats* st) {
	FastString* fs = JB_Incr(JB_FS__Use(dest));
	if ((!fs)) {
		JB_Decr(fs);
		return nil;
	}
	if ((!JB_SS_IsCompressed(self))) {
		JB_String* _tmPf0 = JB_Incr(JB_SS_ReadAll(self));
		JB_FS_AppendString(fs, _tmPf0);
		JB_Decr(_tmPf0);
		JB_Decr(fs);
		return true;
	}
	if ((!(st))) {
		st = (&JB__MzSt_All);
	}
	ErrorMarker OK = JB_Rec_Mark(JB_StdErr);
	if ((!JB_SS_IsJBin(self))) {
		JB_SS_SyntaxExpect(self, JB__jBinNotJbin);
	}
	Message* mz = JB_Incr(JB_SS_NextMsg(self));
	if (JB_Msg_EqualsSyx(mz, JB_SyxArg, false)) {
		JB_SetRef(mz, JB_SS_NextMsgExpect(self, nil, JB_SyxTmp, nil));
	}
	 else if ((!JB_Msg_Expect(mz, JB_SyxTmp, nil))) {
		JB_SetRef(mz, nil);
	}
	if ((!mz)) {
		JB_Decr(mz);
		JB_Decr(fs);
		return nil;
	}
	JB_MzSt_Start(st);
	Message* size = JB_Incr(JB_SS_NextMsgExpect(self, mz, JB_SyxNum, nil));
	Message* arg = JB_Incr(JB_SS_NextMsgExpect(self, mz, JB_SyxArg, nil));
	int64 Remaining = JB_Msg_Int(size, 0);
	if ((!(((bool)size) and (((bool)arg) and (Remaining <= lim))))) {
		if (Remaining > lim) {
			if (true) {
				JB_SS_SyntaxExpect(self, JB_LUB[1805]);
			}
		}
		 else {
			if (true) {
				JB_SS_SyntaxExpect(self, JB_LUB[935]);
			}
		}
	}
	 else {
		JB_SetRef(mz->Name, JB_LUB[0]);
		JB_SetRef(size->Name, JB_LUB[0]);
		while (true) {
			Message* c = JB_Incr(JB_SS_NextMsgExpect(self, arg, JB_SyxBin, nil));
			if ((!c)) {
				JB_Decr(c);
				break;
			}
			JB_String* s = JB_Incr(c->Name);
			JB_Decr(s);
			int64 Expected = JB_int64_OperatorMin(Remaining, 1048576);
			if ((!JB_Str_DecompressChunk(fs, c->Name, Expected))) {
				JB_Decr(c);
				break;
			}
			Remaining = (Remaining - Expected);
			JB_FS_Flush(fs);
			JB_MzSt_LiveUpdate(st, JB_Msg_Length(c), Expected);
			JB_Tree_Remove(c);
			JB_Decr(c);
		};
	}
	JB_Decr(fs);
	JB_Decr(mz);
	JB_Decr(size);
	JB_Decr(arg);
	JB_MzSt_End(st);
	return JB_ErrorMarker_SyntaxCast(OK);
}

void JB_SS_Destructor(StringReader* self) {
	JB_FastBuff_Destructor((&self->Data));
	JB_Clear(self->File);
}

bool JB_SS_HasAny(StringReader* self) {
	if (self == nil) {
		return nil;
	}
	if (JB_FastBuff_HasAny((&self->Data))) {
		return true;
	}
	return JB_SS_NextChunk(self);
}

int64 JB_SS_hInt(StringReader* self) {
	int sh = 0;
	int v = 0;
	while (true) {
		int b = JB_SS_Byte(self);
		if (b < 0) {
			break;
		}
		v = (v | ((b & 127) << sh));
		if (b <= 127) {
			return v;
		}
		sh = (sh + 7);
		if (sh > 57) {
			JB_SS_SyntaxExpect(self, JB_LUB[791]);
			return 0;
		}
	};
	return 0;
}

bool JB_SS_IsCompressed(StringReader* self) {
	JB_String* str = JB_Incr(JB_SS_StrNoAdvance(self, 16, 0));
	bool _tmPf0 = JB_Str_IsCompressed(str);
	JB_Decr(str);
	return _tmPf0;
}

bool JB_SS_IsJBin(StringReader* self) {
	JB_String* _tmPf0 = JB_Incr(JB_SS_Str(self, 4, 0));
	bool _tmPf1 = JB_Ind_SyntaxCast(JB_Str_IsJbin(_tmPf0));
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool JB_SS_NextChunk(StringReader* self) {
	JB_File* f = self->File;
	if (JB_File_SyntaxCast(f)) {
		self->StartFrom = (self->StartFrom + JB_FastBuff_Size((&self->Data)));
		if (JB_SS_ReadChunk(self, f)) {
			return true;
		}
		JB_SetRef(self->File, nil);
	}
	return false;
}

Message* JB_SS_NextMsgExpect(StringReader* self, Message* parent, Syntax fn, JB_String* name) {
	Message* rz = nil;
	rz = JB_SS_NextMsg(self);
	if ((!rz)) {
		return nil;
	}
	if ((!(JB_Msg_Expect(rz, fn, name) and (((Message*)JB_Ring_Parent(rz)) == parent)))) {
		JB_Msg_SyntaxExpect(rz, nil);
		return nil;
	}
	return rz;
}

Message* JB_SS_NextMsg(StringReader* self) {
	return ((Message*)JB_SS_NextMsgInfo(self));
}

uint64 JB_SS_NextMsgInfo(StringReader* self) {
	Message* Msg = ((Message*)self->UserObj);
	int info = 0;
	while (true) {
		info = JB_SS_NonZeroByte(self);
		if (info <= 239) {
			break;
		}
		Msg = ((Message*)JB_Tree_Upward(Msg, info - 239));
		self->UserObj = Msg;
		if ((!Msg)) {
			return 0;
		}
	};
	Syntax T = ((Syntax)(info >> 1));
	if ((T < JB_Syxmax) and (T > JB_SyxNil)) {
		Msg = JB_Msg_Msg(Msg, T, JB_SS_Str(self, JB_SS_hInt(self), 0));
		if (((bool)(info & 1))) {
			self->UserObj = Msg;
		}
		return ((uint64)Msg);
	}
	self->UserObj = nil;
	if (info >= 0) {
		if (T <= JB_SyxNil) {
			JB_SS_SyntaxExpect(self, JB_LUB[1240]);
			return 0;
		}
		if (true) {
			JB_SS_SyntaxExpect(self, JB_LUB[792]);
		}
	}
	return 0;
}

bool JB_SS_NoMoreChunks(StringReader* self) {
	if (self->_NoMoreChunks) {
		return true;
	}
	if (JB_FastBuff_Remaining((&self->Data)) <= 0) {
		if ((!JB_File_SyntaxCast(self->File))) {
			return true;
		}
		if (self->Length <= self->StartFrom) {
			return true;
		}
	}
	return false;
}

int JB_SS_NonZeroByte(StringReader* self) {
	while (true) {
		int b = JB_SS_Byte(self);
		if (b) {
			return b;
		}
	};
}

Message* JB_SS_ParseJbin(StringReader* self, int64 Remain) {
	Message* rz = JB_Incr(((Message*)nil));
	if ((!JB_SS_IsJBin(self))) {
		JB_SS_SyntaxExpect(self, JB__jBinNotJbin);
		JB_Decr(rz);
		return nil;
	}
	self->UserObj = nil;
	JB_SetRef(rz, JB_SS_NextMsg(self));
	while ((--Remain) > 0) {
		if ((!JB_SS_NextMsgInfo(self))) {
			break;
		}
	};
	if (self->Data.ErrorReported) {
		JB_SetRef(rz, nil);
	}
	JB_SafeDecr(rz);
	return rz;
}

int64 JB_SS_Position(StringReader* self) {
	return JB_FastBuff_Position((&self->Data)) + self->StartFrom;
}

void JB_SS_PositionSet(StringReader* self, int64 Value) {
	(JB_FastBuff_PositionSet((&self->Data), Value - self->StartFrom));
}

JB_String* JB_SS_ReadAll(StringReader* self) {
	return JB_SS_Str(self, self->Length - self->StartFrom, 0);
}

bool JB_SS_ReadChunk(StringReader* self, JB_File* f) {
	JB_String* _tmPf0 = JB_Incr(JB_File_Read(f, self->ChunkSize, true));
	(JB_FastBuff_ReadFromSet((&self->Data), _tmPf0));
	JB_Decr(_tmPf0);
	if (JB_Str_Length(self->Data.ReadFrom) < self->ChunkSize) {
		self->_NoMoreChunks = true;
	}
	return JB_Str_Exists(self->Data.ReadFrom);
}

int JB_SS_Remaining(StringReader* self) {
	return self->Length - JB_SS_Position(self);
}

JB_String* JB_SS_Str(StringReader* self, int n, int skip) {
	if ((!((n > 0) and (skip < n)))) {
		return JB_LUB[0];
	}
	if ((JB_FastBuff_Has((&self->Data), n)) or (JB_SS_NoMoreChunks(self))) {
		n = JB_int_OperatorMin(n, JB_SS_Remaining(self));
		int64 pos = JB_FastBuff_Position((&self->Data));
		(JB_FastBuff_PositionSet((&self->Data), n + pos));
		return JB_FastBuff_AccessStr((&self->Data), pos + skip, JB_FastBuff_Position((&self->Data)));
	}
	int Remaining = n - skip;
	JB_String* r = JB_Incr(JB_Str_New(Remaining));
	if ((!JB_Str_Exists(r))) {
		JB_Decr(r);
		return JB_LUB[0];
	}
	byte* Dest = JB_Str_Address(r);
	while (true) {
		uint Copied = JB_FastBuff_CopyTo((&self->Data), Dest, JB_int64_OperatorMin(JB_FastBuff_Remaining((&self->Data)), Remaining));
		Remaining = (Remaining - Copied);
		Dest = (Dest + Copied);
		if (Remaining <= 0) {
			break;
		}
		if ((!JB_SS_NextChunk(self))) {
			JB_String* _tmPf0 = JB_Incr(JB_Str_Range(r, 0, JB_Str_Length(r) - Remaining));
			JB_SetRef(r, JB_Str_Copy(_tmPf0));
			JB_Decr(_tmPf0);
			break;
		}
	};
	JB_SafeDecr(r);
	return r;
}

JB_String* JB_SS_StrNoAdvance(StringReader* self, int n, int skip) {
	JB_String* rz = JB_Incr(JB_LUB[0]);
	int64 p = JB_SS_Position(self);
	JB_SetRef(rz, JB_SS_Str(self, n, 0));
	(JB_SS_PositionSet(self, p));
	JB_SafeDecr(rz);
	return rz;
}

void JB_SS_SyntaxExpect(StringReader* self, JB_String* Error) {
	self->UserObj = nil;
	uint D = self->Data.ErrorReported++;
	if (D) {
		return;
	}
	if ((!JB_Str_Exists(Error))) {
		if (JB_File_SyntaxCast(self->File)) {
			Error = JB_LUB[841];
		}
		 else {
			Error = JB_LUB[840];
		}
	}
	JB_Rec__NewErrorWithNode(nil, Error, self->File);
}


SyntaxObj* JB_Fn_Constructor(SyntaxObj* self, FP_fpMsgRender msg, JB_String* name, int ID) {
	if (self == nil) {
		self = ((SyntaxObj*)JB_NewClass(&SyntaxObjData));
	}
	JB_StringC* _tmPf0 = JB_LUB[0];
	self->LongName = JB_Incr(_tmPf0);
	self->RenderAddr = msg;
	self->Name = JB_Incr(name);
	self->ID = ((Syntax)ID);
	self->ExportAddr = JB_Msg_Dummy;
	return self;
}

void JB_Fn_Destructor(SyntaxObj* self) {
	JB_Clear(self->Name);
	JB_Clear(self->LongName);
}

JB_String* JB_Fn_Render(SyntaxObj* self, FastString* fs_in) {
	if ((!fs_in)) {
		return JB_Str_LowerCase(self->LongName);
	}
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(self->LongName));
	JB_FS_AppendString(fs_in, _tmPf0);
	JB_Decr(_tmPf0);
	return JB_LUB[0];
}




DTWrap* SC___junktest_6____AbcVis() {
	//visible;
	JB_String* x = ({
		JB_String* y = JB_Incr(JB_LUB[1467]);
		JB_SafeDecr(nil);
		 y;
	});
	JB_Decr(x);
	return nil;
}


autoitem* SC_autoitem_ConstructorAuto(autoitem* self, JB_String* Sort, JB_String* Insert, SCObject* Value, JB_String* Display, bool Exact, int type) {
	if (self == nil) {
		self = ((autoitem*)JB_NewClass(&autoitemData));
	}
	self->Sort = JB_Incr(Sort);
	self->Insert = JB_Incr(Insert);
	self->Value = JB_Incr(Value);
	self->Display = JB_Incr(Display);
	self->Exact = Exact;
	self->type = type;
	return self;
}

void SC_autoitem_Destructor(autoitem* self) {
	JB_Clear(self->Sort);
	JB_Clear(self->Insert);
	JB_Clear(self->Value);
	JB_Clear(self->Display);
}

bool SC_autoitem_OKBy(autoitem* self, autoitem* prev) {
	if ((!prev)) {
		return true;
	}
	if ((!JB_Str_Equals(self->Insert, prev->Insert, true))) {
		return true;
	}
	if (self->Exact != prev->Exact) {
		return true;
	}
	return false;
}


void SC_xC2xB5Form_AddRemainder(xC2xB5Form* self, uint U) {
	SC_xC2xB5Form_SyntaxAppend(self, kSC__ASM_Num | (kSC__ASM_Remainder | U));
}

xC2xB5Form* SC_xC2xB5Form_ConstructorWithStr(xC2xB5Form* self, JB_String* data) {
	if (self == nil) {
		self = ((xC2xB5Form*)JB_NewClass(&xC2xB5FormData));
	}
	self->Count = 0;
	self->Varies = false;
	self->Name = JB_Incr(data);
	{
		byte* _Startf0 = JB_Str_Address(data);
		byte* _Endf1 = _Startf0 + JB_Str_Length(data);
		while (_Startf0 < _Endf1) {
			byte param = _Startf0[0];
			SC_xC2xB5Form_LoadParam(self, JB_Str__Byte(param), nil);
			_Startf0++;
		};
	}
	;
	SC_xC2xB5Form_Finish(self);
	self->Index = (++SC__xC2xB5Form_Count);
	return self;
}

xC2xB5Form* SC_xC2xB5Form_ConstructorWithMsg(xC2xB5Form* self, Message* tmp) {
	if (self == nil) {
		self = ((xC2xB5Form*)JB_NewClass(&xC2xB5FormData));
	}
	self->Count = 0;
	self->Varies = false;
	JB_String* _tmPf3 = tmp->Name;
	self->Name = JB_Incr(_tmPf3);
	{
		Message* _LoopSrcf2 = JB_Msg_Last(tmp, JB_SyxArg);
		Message* line = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(line));
			Message* f = JB_Msg_NeedFirst(line);
			SC_xC2xB5Form_LoadParam(self, JB_Msg_Name(f), f);
			line = _Nf1;
		};
		;
	}
	;
	SC_xC2xB5Form_Finish(self);
	self->Index = (++SC__xC2xB5Form_Count);
	return self;
}

void SC_xC2xB5Form_Destructor(xC2xB5Form* self) {
	JB_Clear(self->Name);
}

void SC_xC2xB5Form_Finish(xC2xB5Form* self) {
	int total = 0;
	{
		int _if0 = 0;
		while (_if0 < self->Count) {
			int i = _if0;
			ASMParam s = SC_xC2xB5Form_AccessInt(self, _if0);
			if (((bool)(s & kSC__ASM_Remainder))) {
				s = (s | (25 - total));
			}
			(SC_xC2xB5Form_SyntaxAccessSet(self, i, s | (total << 11)));
			total = (total + SC_xC2xB5Param_BitSize(s));
			_if0++;
		};
	};
}

void SC_xC2xB5Form_LoadParam(xC2xB5Form* self, JB_String* pl, Message* place) {
	if (JB_Str_IsInt(pl)) {
		SC_xC2xB5Form_SyntaxAppend(self, SC_Str_ASMint(pl) | kSC__ASM_Num);
		return;
	}
	if ((!JB_Str_EqualsInt(pl, 1, false))) {
		JB_Object_SyntaxExpect(self);
		return;
	}
	byte p = JB_Str_First(pl);
	if (p == 'r') {
		SC_xC2xB5Form_SyntaxAppend(self, 5);
	}
	 else if (p == 'n') {
		SC_xC2xB5Form_SyntaxAppend(self, 5 | kSC__ASM_Num);
	}
	 else if (p == 'l') {
		SC_xC2xB5Form_AddRemainder(self, 0);
	}
	 else if (p == 'L') {
		SC_xC2xB5Form_AddRemainder(self, kSC__ASM_NoExpect);
	}
	 else if (p == 's') {
		SC_xC2xB5Form_AddRemainder(self, kSC__ASM_Signed);
	}
	 else if (p == 'S') {
		SC_xC2xB5Form_AddRemainder(self, kSC__ASM_Signed + kSC__ASM_NoExpect);
	}
	 else if (p == 'j') {
		SC_xC2xB5Form_AddRemainder(self, kSC__ASM_Signed + kSC__ASM_Jump);
	}
	 else if ((bool)place) {
		if (true) {
			JB_Msg_SyntaxExpect(place, nil);
		}
	}
	 else {
		if (true) {
			JB_Object_SyntaxExpect(self);
		}
	}
}

ASMParam SC_xC2xB5Form_AccessInt(xC2xB5Form* self, int i) {
	return self->Params[i];
}

void SC_xC2xB5Form_SyntaxAccessSet(xC2xB5Form* self, int i, ASMParam Value) {
	self->Params[i] = Value;
}

void SC_xC2xB5Form_SyntaxAppend(xC2xB5Form* self, ASMParam P) {
	int i = self->Count++;
	if (i < 8) {
		self->Params[i] = P;
	}
}

int SC_xC2xB5Form__Init_() {
	{
		JB_SetRef(SC__xC2xB5Form_Forms, JB_Dict_Constructor(nil));
		SC__xC2xB5Form_Count = 0;
	}
	;
	return 0;
}

int SC_xC2xB5Form__InitCode_() {
	return 0;
}

xC2xB5Form* SC_xC2xB5Form__Needform(JB_String* Form) {
	return ({
		xC2xB5Form* _X = ((xC2xB5Form*)JB_Dict_ValueLower(SC__xC2xB5Form_Forms, Form));
		if ((!_X)) {
			_X = SC_xC2xB5Form_ConstructorWithStr(nil, Form);
			(JB_Dict_ValueLowerSet(SC__xC2xB5Form_Forms, Form, _X));
		}
		 _X;
	});
}


ASMFunc* SC_ASMFunc_Constructor(ASMFunc* self, SCFunction* fn) {
	if (self == nil) {
		self = ((ASMFunc*)JB_NewClass(&ASMFuncData));
	}
	self->Start = 0;
	self->Length = 0;
	self->OK = false;
	self->Fn = JB_Incr(fn);
	JB_SetRef(fn->ASM, self);
	return self;
}

void SC_ASMFunc_Destructor(ASMFunc* self) {
	JB_Clear(self->Fn);
}

ASMFunc2* SC_ASMFunc_Finish(ASMFunc* self) {
	return nil;
}

JB_String* SC_ASMFunc_Render(ASMFunc* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	//;
	JB_FS_AppendString(fs, JB_LUB[1496]);
	JB_FS_AppendString(fs, self->Fn->Name);
	JB_FS_AppendByte(fs, '\n');
	//;
	{
		int _CurrInstf1 = 0;
		IR* _Addrf2 = ((IR*)JB_Mrap_Ptr(SC__flat_JSMSpace)) + self->Start;
		while (_CurrInstf1 < self->Length) {
			IR* xC2xB5 = _Addrf2 + _CurrInstf1;
			if ((!SC_IR_OperatorIsa(xC2xB5, kSC__ASM_Extended))) {
				JB_FS_AppendByte(fs, '\t');
				JB_FreeIfDead(SC_IR_Render(xC2xB5, fs));
				JB_FS_AppendByte(fs, '\n');
			}
			_CurrInstf1++;
		};
	}
	;
	JB_String* _tmPf4 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}


void SC_Array_AddCStr(Array* self, JB_String* s) {
	if (JB_Str_Exists(s)) {
		JB_Array_SyntaxAppend(self, JB_Str_MakeC(s));
	}
}

void SC_Array_AppendWords(Array* self, JB_String* R) {
	{
		Array* _LoopSrcf2 = JB_Incr(JB_Str_OperatorDivide(R, ' '));
		int _if0 = 0;
		while (true) {
			JB_String* S = JB_Incr(((JB_String*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (S == nil) {
				JB_Decr(S);
				break;
			}
			SC_Array_AddCStr(self, S);
			JB_Decr(S);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	};
}

void JB_Array_Clear(Array* self) {
	if (self != nil) {
		(JB_Array_SizeSet(self, 0));
	}
}

JB_Object* JB_Array_First(Array* self) {
	return JB_Array_Value(self, 0);
}

JB_String* JB_Array_join(Array* self, JB_String* sep) {
	int sl = JB_Str_Length(sep);
	int n = (-sl);
	{
		int _if0 = 0;
		while (true) {
			JB_String* s = JB_Incr(((JB_String*)JB_Array_Value(self, _if0)));
			if (s == nil) {
				JB_Decr(s);
				break;
			}
			n = (n + (JB_Str_Length(s) + sl));
			JB_Decr(s);
			_if0++;
		};
	}
	;
	FastString* fs = JB_Incr(JB_FS_ConstructorSize(nil, n));
	{
		int _if2 = 0;
		int _firstf4 = _if2;
		while (true) {
			JB_String* s = JB_Incr(((JB_String*)JB_Array_Value(self, _if2)));
			if (s == nil) {
				JB_Decr(s);
				break;
			}
			if (_firstf4 != _if2) {
				JB_FS_AppendString(fs, sep);
			}
			//start;
			JB_FS_AppendString(fs, s);
			JB_Decr(s);
			_if2++;
		};
	}
	;
	JB_String* _tmPf5 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

JB_Object* JB_Array_Last(Array* self) {
	return JB_Array_Value(self, JB_Array_Size(self) - 1);
}

void JB_Array_LoadProperties(Array* self, ObjectLoader* Loader) {
	while (JB_LD_HasItem(Loader)) {
		JB_Array_SyntaxAppend(self, JB_LD_Object(Loader));
	};
}

void JB_Array_SaveCollect(Array* self, ObjectSaver* Saver) {
	{
		int _if0 = 0;
		while (true) {
			JB_Object* v = JB_Array_Value(self, _if0);
			if (v == nil) {
				break;
			}
			JB_Object_SaveTryCollect(v, Saver);
			_if0++;
		};
	};
}

void JB_Array_SaveWrite(Array* self, ObjectSaver* Saver) {
	FastString* D = Saver->Dest;
	{
		int _if0 = 0;
		int _firstf2 = _if0;
		while (true) {
			JB_Object* v = JB_Array_Value(self, _if0);
			if (v == nil) {
				break;
			}
			if (_firstf2 != _if0) {
				JB_FS_AppendString(D, JB_LUB[303]);
			}
			//start;
			JB_FS_AppendObjectOrNil(D, v);
			_if0++;
		};
	};
}

void JB_Array_SyntaxAppend(Array* self, JB_Object* item) {
	JB_Array_AppendCount(self, item, 1);
}

int JB_Array_SyntaxCompare(Array* self, int n, bool Aware) {
	return JB_Array_Size(self) - n;
}

bool JB_Array_SyntaxEquals(Array* self, int n, bool Aware) {
	return JB_Array_Size(self) == n;
}


JB_Object* JB_Dict_Expect(Dictionary* self, Message* m) {
	JB_Object* _tmPf0 = JB_Incr(JB_Dict_ValueStr(self, m->Name));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(m, nil);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_Dict_LoadProperties(Dictionary* self, ObjectLoader* Loader) {
	while (JB_LD_HasItem(Loader)) {
		JB_String* name = JB_LD_ItemName(Loader);
		if (JB_LD_ItemIsInt(Loader)) {
			(JB_Dict_ValueSet(self, name, JB_Wrap_ConstructorInt(nil, JB_LD_ItemInt(Loader))));
		}
		 else {
			(JB_Dict_ValueSet(self, name, JB_LD_ItemObject(Loader)));
		}
	};
}

void JB_Dict_SaveCollect(Dictionary* self, ObjectSaver* Saver) {
	{
		DictionaryReader* _navf0 = JB_Dict_Navigate(self);
		while (true) {
			JB_Object* v = JB_DictionaryReader_NextValue(_navf0);
			if (v == nil) {
				break;
			}
			JB_Object_SaveTryCollect(v, Saver);
		};
	};
}

void JB_Dict_SaveWrite(Dictionary* self, ObjectSaver* Saver) {
	FastString* D = Saver->Dest;
	DictionaryReader* L = JB_Dict_Navigate(self);
	while (JB_Nav_MoveNext(L)) {
		JB_FS_AppendString(D, JB_Nav_Name(L));
		JB_FS_AppendString(D, JB_LUB[560]);
		JB_FS_AppendObjectOrNil(D, JB_Nav_Value(L));
		JB_FS_AppendByte(D, ',');
	};
}

void JB_Dict_SetValue(Dictionary* self, JB_String* key, int64 Value) {
	DTWrap* _tmPf0 = JB_Incr(JB_Wrap_ConstructorInt(nil, Value));
	(JB_Dict_ValueSet(self, key, _tmPf0));
	JB_Decr(_tmPf0);
}

JB_Object* JB_Dict_Syntax(Dictionary* self, JB_String* Key) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_FastLower(Key));
	JB_Object* _tmPf1 = JB_Incr(JB_Dict_ValueStr(self, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_Object* JB_Dict_ValueStr(Dictionary* self, JB_String* Key) {
	return JB_Dict_Value(self, Key, nil);
}

void JB_Dict_SetInt(Dictionary* self, uint64 Key, JB_Object* Value) {
	(JB_Dict_ValueSet(self, JB_int64_DictName(((int64)Key)), Value));
}

JB_Object* JB_Dict_ValueInt(Dictionary* self, uint64 Key) {
	return JB_Dict_ValueStr(self, JB_int64_DictName(((int64)Key)));
}

JB_Object* JB_Dict_ValueLower(Dictionary* self, JB_String* s) {
	if (JB_Str_IsLower(s)) {
		return JB_Dict_ValueStr(self, s);
	}
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(s));
	JB_Object* _tmPf1 = JB_Incr(JB_Dict_ValueStr(self, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void JB_Dict_ValueLowerSet(Dictionary* self, JB_String* s, JB_Object* Value) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(s));
	(JB_Dict_ValueSet(self, _tmPf0, Value));
	JB_Decr(_tmPf0);
}

Dictionary* JB_Dict__Copy(Dictionary* Dict) {
	Dictionary* rz = JB_Incr(((Dictionary*)nil));
	JB_SetRef(rz, JB_Dict_Constructor(nil));
	{
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(Dict));
		while (true) {
			JB_String* value = JB_Incr(((JB_String*)JB_DictionaryReader_NextValue(_navf0)));
			if (value == nil) {
				JB_Decr(value);
				break;
			}
			JB_String* key = JB_Incr(JB_Nav_Name(_navf0));
			(JB_Dict_ValueSet(rz, key, value));
			JB_Decr(value);
			JB_Decr(key);
		};
		JB_Decr(_navf0);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

Dictionary* JB_Dict__Reverse(Dictionary* Dict) {
	Dictionary* rz = JB_Incr(((Dictionary*)nil));
	JB_SetRef(rz, JB_Dict_Constructor(nil));
	{
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(Dict));
		while (true) {
			JB_String* value = JB_Incr(((JB_String*)JB_DictionaryReader_NextValue(_navf0)));
			if (value == nil) {
				JB_Decr(value);
				break;
			}
			JB_String* key = JB_Incr(JB_Nav_Name(_navf0));
			(JB_Dict_ValueSet(rz, value, key));
			JB_Decr(value);
			JB_Decr(key);
		};
		JB_Decr(_navf0);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}


void SC_FastStringCpp_AppendBehaviour(FastStringCpp* self, JB_String* name, SCFunction* fn, SCClass* Type) {
	JB_FS_AppendString(self, JB_LUB[37]);
	if (JB_Str_Exists(name)) {
		JB_FS_AppendString(self, name);
	}
	 else {
		JB_FS_AppendString(self, JB_LUB[1448]);
	}
	JB_FS_AppendString(self, JB_LUB[156]);
	if ((!fn)) {
		JB_FS_AppendString(self, JB_LUB[1811]);
	}
	 else {
		JB_FS_AppendByte(self, '(');
		if (Type) {
			JB_String* _tmPf0 = SC_Class_CStructName(Type);
			if ((!JB_Str_Exists(_tmPf0))) {
				JB_Object_SyntaxExpect(nil);
				return;
			}
			JB_FS_AppendString(self, (_tmPf0));
		}
		 else {
			JB_FS_AppendString(self, JB_LUB[2042]);
		}
		JB_FS_AppendByte(self, ')');
		JB_FS_AppendString(self, fn->ExportName);
	}
	JB_FS_AppendString(self, JB_LUB[568]);
}

FastStringCpp* SC_FastStringCpp_Constructor(FastStringCpp* self, JB_String* name) {
	if (self == nil) {
		self = ((FastStringCpp*)JB_NewClass(&FastStringCppData));
	}
	JB_FS_Constructor(self);
	self->Cpp_Name = JB_Incr(name);
	return self;
}

void SC_FastStringCpp_Destructor(FastStringCpp* self) {
	JB_Clear(self->Cpp_Name);
	JB_FS_Destructor(self);
}


JB_File* JB_File_Child(JB_File* self, JB_String* name) {
	JB_String* name2 = JB_Incr(JB_Str_TrimStart(name, JB_LUB[388], true));
	if (JB_Str_Exists(name2)) {
		JB_String* _tmPf1 = JB_Incr(JB_Str_PathDir(self));
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(_tmPf1, name));
		JB_Decr(_tmPf1);
		JB_File* _tmPf3 = JB_Incr(JB_File_Constructor(nil, _tmPf0));
		JB_Decr(_tmPf0);
		JB_Decr(name2);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	JB_Decr(name2);
	if (true) {
		JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1078], self));
		JB_File_Fail(self, _tmPf2);
		JB_Decr(_tmPf2);
	}
	return nil;
}

ErrorInt2 SC_File_CodeSign(JB_File* self, JB_String* sign) {
	ErrorInt2 rz = ((ErrorInt2){});
	if ((!JB_Platform__OSX())) {
		return ((ErrorInt2)ivec2{-1, -1});
	}
	//using;
	ErrorSeverity _usingf0 = JB_ErrorSeverity_SyntaxUsing(kJB__ErrorSeverity_Warning);
	Array* args = JB_Incr((JB_Array_Constructor0(nil)));
	JB_Array_SyntaxAppend(args, JB_LUB[313]);
	JB_Array_SyntaxAppend(args, JB_LUB[315]);
	if (SC__Options_PrintCompileString) {
		JB_Array_SyntaxAppend(args, JB_LUB[322]);
	}
	JB_Array_SyntaxAppend(args, JB_LUB[351]);
	JB_StringC* _tmPf1 = JB_Incr(JB_Str_MakeC(sign));
	JB_Array_SyntaxAppend(args, _tmPf1);
	JB_Decr(_tmPf1);
	JB_StringC* _tmPf2 = JB_Incr(JB_Str_MakeC(self));
	JB_Array_SyntaxAppend(args, _tmPf2);
	JB_Decr(_tmPf2);
	rz = SC_Str_DebugExecute(JB_LUB[425], args, nil, nil);
	JB_SetRef(args, (JB_Array_Constructor0(nil)));
	JB_Array_SyntaxAppend(args, JB_LUB[323]);
	if (SC__Options_PrintCompileString) {
		JB_Array_SyntaxAppend(args, JB_LUB[322]);
	}
	JB_Array_SyntaxAppend(args, self);
	if (JB_Err2_SyntaxCast(rz)) {
		rz = SC_Str_DebugExecute(JB_LUB[425], args, nil, nil);
	}
	if (JB_Err2_SyntaxCast(rz)) {
		(JB_Array_ValueSet(args, 0, JB_LUB[335]));
		rz = SC_Str_DebugExecute(JB_LUB[438], args, nil, nil);
	}
	JB_Decr(args);
	JB_ErrorSeverity_SyntaxUsingComplete(_usingf0);
	return rz;
}

bool JB_File_CompareData(JB_File* self, JB_String* A, JB_String* Error) {
	//;
	int code = 0;
	JB_String* _tmPf0 = JB_Incr(JB_File_ReadAll(self, 134217728, true));
	if (JB_File_Size(self) != JB_Str_Length(A)) {
		code = 1;
	}
	 else if ((!JB_Str_Equals(_tmPf0, A, false))) {
		code = 2;
	}
	JB_Decr(_tmPf0);
	return JB_File_CompareMsg(self, code, Error);
}

bool JB_File_FileCompare(JB_File* self, JB_File* A, JB_String* Error) {
	bool rz = false;
	JB__Flow_Disabled++;
	ErrorInt code = JB_File_FileCompareSub(self, A);
	JB_File_Close(self);
	JB_File_Close(A);
	rz = JB_File_CompareMsg(self, code, Error);
	JB__Flow_Disabled--;
	return rz;
}

bool JB_File_CompareMsg(JB_File* self, ErrorInt code, JB_String* Error) {
	//;
	if ((code == 0) or (!JB_Str_Exists(Error))) {
		return code == 0;
	}
	JB_String* msg = JB_Incr(self);
	if (code == 1) {
		JB_SetRef(msg, JB_Str_OperatorPlus(msg, JB_LUB[180]));
	}
	 else {
		JB_SetRef(msg, JB_Str_OperatorPlus(msg, JB_LUB[179]));
	}
	JB_SetRef(msg, JB_Str_OperatorPlus(msg, Error));
	if (true) {
		JB_Str_SyntaxExpect(msg);
	}
	JB_Decr(msg);
	return false;
}

ErrorInt JB_File_FileCompareSub(JB_File* self, JB_File* A) {
	ErrorInt rz = 0;
	//;
	if (JB_File_Size(self) != JB_File_Size(A)) {
		return 1;
	}
	JB_File_Close(A);
	JB_File_Close(self);
	JB_File_Open(self, kJB__File_O_RDONLY, false);
	JB_File_Open(A, kJB__File_O_RDONLY, false);
	while (true) {
		JB_String* S_ = JB_Incr(JB_File_Read(self, 65536, true));
		JB_String* SA = JB_Incr(JB_File_Read(A, 65536, true));
		if ((!JB_Str_Equals(S_, SA, false))) {
			rz = 2;
			JB_Decr(SA);
			JB_Decr(S_);
			break;
		}
		JB_Decr(SA);
		if ((!JB_Str_Exists(S_))) {
			JB_Decr(S_);
			break;
		}
		JB_Decr(S_);
	};
	return rz;
}

Message* JB_File_Conf(JB_File* self, int lim) {
	Message* rz = ((Message*)nil);
	if (JB_File_Exists(self, false)) {
		rz = ((Message*)JB_File_Parse(self, lim, false));
	}
	if ((!(rz))) {
		rz = JB_Msg_ConstructorEmpty(nil);
	}
	JB_SetRef(rz->Obj, self);
	return rz;
}

ErrorInt JB_File_CopyAll(JB_File* self, JB_String* Dest, bool AttrOnly) {
	ErrorInt rz = 0;
	if ((!JB_File_IsDir(self))) {
		JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(Dest));
		ErrorInt _tmPf4 = JB_File_Copy(self, _tmPf1, AttrOnly);
		JB_Decr(_tmPf1);
		return _tmPf4;
	}
	{
		JB_File_ListStart(self);
		while (JB_File_MoveNext(self)) {
			JB_String* f = JB_Incr(JB_File_CurrChild(self));
			JB_File* _tmPf2 = JB_Incr(JB_File_Child(self, f));
			JB_String* _tmPf3 = JB_Incr(JB_Str_SyntaxAccess(Dest, f));
			JB_Decr(f);
			rz = JB_File_CopyAll(_tmPf2, _tmPf3, false);
			JB_Decr(_tmPf2);
			JB_Decr(_tmPf3);
			if ((!JB_ErrorInt_SyntaxCast(rz))) {
				break;
			}
		};
		JB_File_ListEnd(self);
	}
	;
	return rz;
}

ErrorInt JB_File_DeleteAll(JB_File* self) {
	ErrorInt rz = 0;
	if ((JB_Str_Equals(self, JB_LUB[388], false)) or (JB_Str_Equals(self, JB_LUB[0], false))) {
		return -1;
	}
	if (JB_File_IsDir(self)) {
		{
			JB_File_ListStart(self);
			while (JB_File_MoveNext(self)) {
				JB_String* _tmPf2 = JB_Incr(JB_File_CurrChild(self));
				JB_File* _tmPf1 = JB_Incr(JB_File_Child(self, _tmPf2));
				JB_Decr(_tmPf2);
				JB_File* C = JB_Incr(_tmPf1);
				JB_Decr(_tmPf1);
				ErrorInt tmp = JB_File_DeleteAll(C);
				JB_Decr(C);
				if (rz == 0) {
					rz = tmp;
				}
			};
			JB_File_ListEnd(self);
		};
	}
	if (rz == 0) {
		rz = JB_File_Delete(self);
	}
	return rz;
}

bool JB_File_DirectoryContains(JB_File* self, JB_String* path) {
	JB_String* _tmPf0 = JB_Incr(JB_File_PathFix_(path));
	JB_String* _tmPf1 = JB_Incr(JB_Str_PathDir(self));
	bool _tmPf2 = JB_Str_OperatorStarts(_tmPf0, _tmPf1);
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	return _tmPf2;
}

ErrorInt JB_File_LinkToSet(JB_File* self, JB_String* Value) {
	JB_StringC* _tmPf0 = JB_Incr(JB_Str_MakeC(Value));
	ErrorInt _tmPf1 = JB_Str_SymLink(_tmPf0, self);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

Array* JB_File_List(JB_File* self, bool invis) {
	Array* rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	//;
	{
		JB_File_ListStart(self);
		while (JB_File_MoveNext(self)) {
			JB_String* name = JB_Incr(JB_File_CurrChild(self));
			if ((invis) or (JB_Str_First(name) != '.')) {
				JB_Array_SyntaxAppend(rz, name);
			}
			JB_Decr(name);
		};
		JB_File_ListEnd(self);
	}
	;
	JB_Array_Sort(rz, (&JB_Str__Sorter), false);
	if ((!JB__Flow_Disabled)) {
		JB_Flow__InputStrings(rz, self);
	}
	JB_SafeDecr(rz);
	return rz;
}

bool JB_File_MustExist(JB_File* self, JB_String* operation) {
	if (JB_File_Exists(self, false)) {
		return true;
	}
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(fs, JB_LUB[873]);
	if (JB_Str_First(self) != '/') {
		JB_FS_AppendString(fs, JB_LUB[165]);
		JB_String* _tmPf0 = JB_Incr(JB_File__CWD());
		JB_FS_AppendString(fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	if (JB_Str_Exists(operation)) {
		JB_FS_AppendString(fs, JB_LUB[306]);
		JB_FS_AppendString(fs, operation);
	}
	JB_FS_AppendByte(fs, ' ');
	JB_FS_AppendString(fs, self);
	if (true) {
		JB_String* _tmPf1 = JB_Incr(JB_FS_SyntaxCast(fs));
		JB_File_Fail(self, _tmPf1);
		JB_Decr(_tmPf1);
	}
	JB_Decr(fs);
	return false;
}

bool JB_File_Opened(JB_File* self) {
	return self->Descriptor >= 0;
}

bool JB_File_OperatorInside(JB_File* self, JB_File* f) {
	JB_String* fp = JB_Incr(JB_Str_PathDir(f));
	JB_String* _tmPf0 = JB_Incr(JB_Str_Range(self, 0, JB_Str_Length(fp)));
	bool _tmPf1 = (JB_Str_Equals(_tmPf0, fp, false));
	JB_Decr(fp);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

bool JB_File_NewerThanFile(JB_File* self, JB_File* F) {
	return JB_File_OperatorIsNewerThan(self, JB_File_Modified(F));
}

bool JB_File_OperatorIsNewerThan(JB_File* self, Date F) {
	return (JB_File_Modified(self) > F);
}

JB_File* JB_File_Parent(JB_File* self) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Parent(self));
	JB_File* _tmPf1 = JB_Incr(JB_File_Constructor(nil, _tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* JB_File_Parse(JB_File* self, int lim, bool AllowMissing) {
	Message* rz = JB_Incr(((Message*)nil));
	JB_String* _tmPf0 = JB_Incr(JB_Str_ResolvePath(self, AllowMissing));
	JB_File* f = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_String* S = JB_Incr(JB_File_ReadAll(f, lim, AllowMissing));
	if (JB_Str_IsCompressed(S)) {
		JB_SetRef(S, JB_Str_Decompress(S, lim, nil));
	}
	if (JB_Safe_SyntaxCast(S)) {
		JB_MemoryLayer* L = JB_ClassData_CreateUseLayer((&MessageData), f, S);
		JB_SetRef(rz, JB_Str_Parse(S, JB_SyxArg, false));
		JB_ClassData_Restore((&MessageData));
	}
	JB_Decr(f);
	JB_Decr(S);
	JB_SafeDecr(rz);
	return rz;
}

JB_File* JB_File_Sibling(JB_File* self, JB_String* name) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_Sibling(self, name));
	JB_File* _tmPf1 = JB_Incr(JB_Str_AsFile(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool JB_File_SmartDataSet(JB_File* self, JB_String* nieu) {
	if ((JB_File_Size(self) != JB_Str_Length(nieu)) or ((!({
		JB_String* _tmPf1 = JB_Incr(JB_File_ReadAll(self, 134217728, true));
		bool _tmPf0 = JB_Str_Equals(_tmPf1, nieu, false);
		JB_Decr(_tmPf1);
		 _tmPf0;
	})))) {
		return JB_File_DataSet(self, nieu);
	}
	return false;
}

JB_File* JB_File_SyntaxAccess(JB_File* self, JB_String* name) {
	return JB_File_Child(self, name);
}

void JB_File_SyntaxAppend(JB_File* self, JB_String* data) {
	JB_File_Write(self, data);
}

void JB_File_Fail(JB_File* self, JB_String* Error) {
	JB_Rec__NewErrorWithNode(nil, Error, ((JB_String*)JB_Ternary(JB_File_SyntaxCast(self), ((JB_String*)JB_File_Path(self)), ((JB_String*)JB_LUB[0]))));
}

bool SC_File_TestBatch(JB_File* self) {
	JB_File* _tmPf3 = JB_Incr(JB_File_SyntaxAccess(SC__Comp_BaseProjectPath, JB_LUB[663]));
	JB_File* batch = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	bool Printed = false;
	JB_Str_Print(JB_LUB[1276]);
	{
		JB_File_ListStart(batch);
		while (JB_File_MoveNext(batch)) {
			JB_String* _tmPf5 = JB_Incr(JB_File_CurrChild(batch));
			JB_File* _tmPf4 = JB_Incr(JB_File_Child(batch, _tmPf5));
			JB_Decr(_tmPf5);
			JB_File* c = JB_Incr(_tmPf4);
			JB_Decr(_tmPf4);
			if (JB_Str_Visible(c) and JB_Str_OperatorIsa(c, JB_LUB[1954])) {
				if (Printed) {
					JB_Str_Print(JB_LUB[303]);
				}
				Printed = true;
				JB_String* _tmPf6 = JB_Incr(JB_Str_Name(c));
				JB_Str_Print(_tmPf6);
				JB_Decr(_tmPf6);
				Array* _tmPf1 = JB_Incr((JB_Array_Constructor0(nil)));
				JB_Array_SyntaxAppend(_tmPf1, c);
				JB_Array_SyntaxAppend(_tmPf1, JB_LUB[317]);
				JB_Array_SyntaxAppend(_tmPf1, JB_LUB[319]);
				JB_Str_SilentExecute(self, _tmPf1, nil, nil);
				JB_Decr(_tmPf1);
			}
			JB_Decr(c);
		};
		JB_File_ListEnd(batch);
	}
	;
	JB_PrintLine(JB_LUB[0]);
	{
		JB_File_ListStart(batch);
		while (JB_File_MoveNext(batch)) {
			JB_String* _tmPf8 = JB_Incr(JB_File_CurrChild(batch));
			JB_File* _tmPf7 = JB_Incr(JB_File_Child(batch, _tmPf8));
			JB_Decr(_tmPf8);
			JB_File* c = JB_Incr(_tmPf7);
			JB_Decr(_tmPf7);
			if (JB_Str_OperatorIsa(c, JB_LUB[1569]) or JB_Str_OperatorIsa(c, JB_LUB[1688])) {
				JB_Str_Print(JB_LUB[1286]);
				JB_PrintLine(c);
				debugger;
			}
			JB_Decr(c);
		};
		JB_File_ListEnd(batch);
	}
	;
	JB_Decr(batch);
	return JB_Rec_OK(JB_StdErr);
}

bool SC_File_TestSpeedie(JB_File* self, JB_String* v) {
	if ((!JB_File_MustExist(self, JB_LUB[0]))) {
		return nil;
	}
	JB_String* _tmPf0 = JB_Incr(JB_File_Path(self));
	if (JB_Str_ContainsString(_tmPf0, JB_LUB[100])) {
		JB_String* _tmPf2 = JB_Incr(JB_File_Path(self));
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1128], _tmPf2));
		JB_Decr(_tmPf2);
		JB_Str_SyntaxExpect(_tmPf1);
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_Decr(_tmPf0);
	JB_String* variant = JB_Incr(JB_Str_OperatorPlus(JB_LUB[321], v));
	Array* cmd_args = JB_Incr((JB_Array_Constructor0(nil)));
	JB_Array_SyntaxAppend(cmd_args, JB_LUB[320]);
	JB_Array_SyntaxAppend(cmd_args, JB_LUB[316]);
	JB_Array_SyntaxAppend(cmd_args, variant);
	if (JB_Str_Equals(variant, JB_LUB[494], false)) {
		JB_Array_SyntaxAppend(cmd_args, JB_LUB[314]);
	}
	if (SC__Options_PrintCompileString) {
		JB_Array_SyntaxAppend(cmd_args, JB_LUB[318]);
	}
	if (JB_Str_Exists(SC__Options_Arch)) {
		JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[312], SC__Options_Arch));
		JB_Array_SyntaxAppend(cmd_args, _tmPf3);
		JB_Decr(_tmPf3);
	}
	JB_String* p = JB_Incr(JB_File_Path(self));
	JB_Str_Execute(p, cmd_args, nil, nil, true);
	JB_Decr(cmd_args);
	JB_Decr(p);
	JB_String* TestProd = JB_Incr(JB_Str_OperatorPlus(JB_LUB[437], v));
	JB_File* _tmPf4 = JB_Incr(JB_Str_AsFile(TestProd));
	JB_Decr(TestProd);
	JB_File_MustExist(_tmPf4, JB_LUB[774]);
	JB_Decr(_tmPf4);
	JB_String* _tmPf6 = JB_Incr(SC_Ext__TmpOut(variant));
	JB_String* _tmPf5 = JB_Incr(JB_Str_ReadFile(_tmPf6, 1073741824, true));
	JB_Decr(_tmPf6);
	JB_Str_Print(_tmPf5);
	JB_Decr(_tmPf5);
	JB_String* _tmPf7 = JB_Incr(SC_Ext__TmpErr(variant));
	JB_Decr(variant);
	JB_String* test_err = JB_Incr(JB_Str_ReadFile(_tmPf7, 1073741824, true));
	JB_Decr(_tmPf7);
	if (JB_Str_Length(test_err)) {
		if (true) {
			JB_Str_SyntaxExpect(test_err);
		}
	}
	JB_Decr(test_err);
	return JB_Rec_OK(JB_StdErr);
}

ErrorInt2 JB_File_Touch(JB_File* self) {
	Array* _tmPf0 = JB_Incr((JB_Array_Constructor0(nil)));
	JB_Array_SyntaxAppend(_tmPf0, self);
	ErrorInt2 _tmPf1 = JB_Str_SilentExecute(JB_LUB[431], _tmPf0, nil, nil);
	JB_Decr(_tmPf0);
	return _tmPf1;
}

JB_String* JB_File__AppPrefs(JB_String* name) {
	JB_Incr(name);
	if ((!JB_Str_Exists(name))) {
		JB_String* _tmPf0 = JB_Incr(JB_App__FileName());
		JB_SetRef(name, JB_Str_LowerCase(_tmPf0));
		JB_Decr(_tmPf0);
		if ((!(JB_Str_Exists(name)))) {
			JB_SetRef(name, JB_App__Conf(JB_LUB[1806]));
		}
		JB_SetRef(name, JB_Str_OperatorPlus(name, JB_LUB[378]));
	}
	JB_String* _tmPf1 = JB_Incr(JB_File__PreferencesPath());
	JB_String* _tmPf2 = JB_Incr(JB_Str_Child(_tmPf1, name));
	JB_Decr(_tmPf1);
	JB_Decr(name);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

int JB_File__Init_() {
	{
		JB__File_DebugExecute = false;
	}
	;
	return 0;
}

int JB_File__InitCode_() {
	return 0;
}

JB_File* JB_File__Logs() {
	return JB_Str_AsFile(JB_LUB[424]);
}

JB_String* JB_File__PreferencesPath() {
	if (JB_Platform__OSX()) {
		return JB_LUB[2090];
	}
	if (JB_Platform__Win()) {
		return JB_LUB[2084];
	}
	if (JB_Platform__Lin()) {
		return JB_LUB[2087];
	}
	return JB_LUB[0];
}

JB_File* JB_File__PrefsFolder() {
	return JB_Str_AsFile(JB_LUB[2090]);
}


void JB_bin_Add(FastString* self, Syntax type, JB_String* data, bool into) {
	int L = JB_Str_Length(data);
	byte* addr = ((byte*)JB_Ternary(((bool)L), data->Addr, nil));
	JB_bin_AddMemory(self, type, addr, into, L);
}

void JB_bin_AddInt(FastString* self, int64 data) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(data, nil));
	JB_bin_Add(self, JB_SyxNum, _tmPf0, false);
	JB_Decr(_tmPf0);
}

void JB_bin_AddMemory(FastString* self, Syntax type, byte* data, bool GoIn, uint64 L) {
	uint T = (((uint)type) << 1) | (GoIn);
	JB_FS_AppendByte(self, ((byte)T));
	JB_FS_hInt(self, L);
	if (data) {
		JB_FS_AppendMem_(self, data, ((int)L));
	}
}

void JB_bin_CloseSection(FastString* self, uint c) {
	int CurrLen = self->Length;
	if (CurrLen < c) {
		JB_Object_Fail(self, JB_LUB[1336]);
		return;
	}
	self->Length = (c - 6);
	int blen = 5;
	c = (CurrLen - c);
	uint Actual = c;
	while (true) {
		Actual = (Actual >> 7);
		blen--;
		if ((!Actual)) {
			break;
		}
	};
	JB_FS_AppendMultiByte(self, ((byte)0), blen);
	JB_FS_AppendByte(self, ((byte)(((int)JB_SyxBin) << 1)));
	JB_FS_hInt(self, c);
	self->Length = CurrLen;
	self->NoFlush--;
}

FastString* JB_bin_Constructor(FastString* self, Syntax type, JB_String* data) {
	if (self == nil) {
		self = ((FastString*)JB_NewClass(&FastStringData));
	}
	JB_FS_Constructor(self);
	JB_FS_AppendString(self, JB__JbinHeader);
	JB_bin_Enter(self, type, data);
	return self;
}

FastString* JB_bin_Constructor0(FastString* self, int n) {
	if (self == nil) {
		self = ((FastString*)JB_NewClass(&FastStringData));
	}
	JB_FS_Constructor(self);
	if (n) {
		debugger;
	}
	return self;
}

void JB_bin_Enter(FastString* self, Syntax type, JB_String* data) {
	JB_bin_Add(self, type, data, true);
}

int JB_bin_OpenSection(FastString* self) {
	self->NoFlush++;
	self->Length = (self->Length + 6);
	return self->Length;
}

void JB_bin_Sheb(FastString* self, JB_String* data) {
	JB_FS_AppendByte(self, '#');
	JB_FS_AppendByte(self, '!');
	JB_FS_AppendString(self, data);
	JB_FS_AppendByte(self, '\n');
}

void JB_bin_Up(FastString* self, int amount) {
	int add = 239;
	while (amount > 0) {
		int B = JB_int_OperatorMin((add + amount), (255));
		JB_FS_AppendByte(self, ((byte)B));
		amount = (amount - (B - add));
	};
}


MaterialsLol* SC_MaterialsLol_Constructor(MaterialsLol* self, Selector* Next, Selector** Place, JB_String* name1) {
	if (self == nil) {
		self = ((MaterialsLol*)JB_NewClass(&MaterialsLolData));
	}
	JB_Sel_Constructor(self, Next, Place, name1);
	JB_StringC* _tmPf0 = JB_LUB[0];
	self->oof = JB_Incr(_tmPf0);
	return self;
}

void SC_MaterialsLol_Destructor(MaterialsLol* self) {
	JB_Clear(self->oof);
	JB_Sel_Destructor(self);
}

void SC_MaterialsLol____LoadSel(MaterialsLol** Place, JB_String* Name) {
	//visible;
	JB_SetRef(SC__MaterialsLol___First, SC_MaterialsLol_Constructor(nil, SC__MaterialsLol___First, ((Selector**)Place), Name));
}

int SC_MaterialsLol__Init_() {
	{
	}
	;
	return 0;
}

int SC_MaterialsLol__InitCode_() {
	{
	}
	;
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_WierdBlock), JB_LUB[1378]);
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_Iron), JB_LUB[940]);
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_Wood), JB_LUB[1382]);
	SC_MaterialsLol____LoadSel((&SC__MaterialsLol_Pellets), JB_LUB[1129]);
	JB_Sel_GiveIDs(SC__MaterialsLol___First);
	return 0;
}



JB_String* JB_Sh_Render(ShellStream* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	//;
	JB_FS_AppendString(fs, JB_LUB[1119]);
	JB_FS_AppendInt32(fs, self->PID);
	JB_FS_AppendString(fs, JB_LUB[304]);
	JB_String* _tmPf1 = JB_Incr(JB_Str_Name(self->Path));
	JB_FS_AppendString(fs, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendByte(fs, ' ');
	JB_FS_AppendBool(fs, JB_Array_SyntaxCast(self->Params));
	//;
	JB_String* _tmPf2 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}


SCNamed* SC_Named_Constructor(SCNamed* self) {
	if (self == nil) {
		self = ((SCNamed*)JB_NewClass(&SCNamedData));
	}
	SC_SCObject_Constructor(self);
	JB_StringC* _tmPf1 = JB_LUB[0];
	self->Name = JB_Incr(_tmPf1);
	JB_StringC* _tmPf0 = JB_LUB[0];
	self->ExportName = JB_Incr(_tmPf0);
	return self;
}

void SC_Named_Destructor(SCNamed* self) {
	JB_Clear(self->Name);
	JB_Clear(self->ExportName);
	SC_SCObject_Destructor(self);
}

JB_String* SC_Named_Render(SCNamed* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	_cstring cname = ((_cstring)(((uint64)JB_ObjClass(self)->Name) + 2));
	JB_FS_AppendCString(fs, cname);
	JB_FS_AppendString(fs, JB_LUB[560]);
	JB_FS_AppendString(fs, self->Name);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}


SavingTest* SC_SavingTest_Constructor(SavingTest* self, int n) {
	if (self == nil) {
		self = ((SavingTest*)JB_NewClass(&SavingTestData));
	}
	JB_Sav_Constructor(self);
	JB_String* _tmPf0 = JB_Incr(JB_int_RenderFS(n, nil));
	JB_String* _tmPf1 = JB_Str_OperatorPlus(JB_LUB[1669], _tmPf0);
	JB_Decr(_tmPf0);
	self->Name = JB_Incr(_tmPf1);
	self->Value = (1000 + n);
	return self;
}

void SC_SavingTest_Destructor(SavingTest* self) {
	JB_Clear(self->Name);
}

void SC_SavingTest_LoadProperties(SavingTest* self, ObjectLoader* Loader) {
	JB_SetRef(self->Name, ((JB_String*)JB_LD_String(Loader)));
	self->Value = ((int)JB_LD_Int(Loader));
	{
		int i = 0;
		while (i < 1) {
			self->ABC[i] = ((int)JB_LD_Int(Loader));
			i++;
		};
	};
}

void SC_SavingTest_SaveWrite(SavingTest* self, ObjectSaver* Saver) {
	JB_Saver_AppendString(Saver, self->Name);
	JB_Saver_AppendInt(Saver, self->Value);
	{
		int i = 0;
		while (i < 1) {
			JB_Saver_AppendInt(Saver, self->ABC[i]);
			i++;
		};
	};
}

bool SC_SavingTest__IsEqual(JB_Object* A, JB_Object* B) {
	if ((!(((bool)A) and ((bool)B)))) {
		return (B == A);
	}
	if (JB_Object_FastIsa(A, &SavingTestData)) {
		if (JB_Object_FastIsa(B, &SavingTestData)) {
			return (((SavingTest*)A)->Value == ((SavingTest*)B)->Value) and ((JB_Str_Equals(((SavingTest*)A)->Name, ((SavingTest*)B)->Name, false)));
		}
	}
	return false;
}




_cstring JB_Str_CString(JB_StringC* self) {
	return ((_cstring)self->Addr);
}


void JB_Tree_AppendAfter(JB_List* self, JB_List* item, JB_List* after) {
	if (after) {
		(JB_Ring_NextSibSet(after, item));
	}
	 else {
		(JB_Ring_FirstSet(self, item));
	}
}

void JB_Tree_AppendBefore(JB_List* self, JB_List* item, JB_List* Before) {
	if (Before) {
		(JB_Ring_PrevSibSet(Before, item));
	}
	 else {
		(JB_Ring_LastSet(self, item));
	}
}

int JB_Tree_BackDist(JB_List* self, JB_List* B) {
	int c = 0;
	while (B) {
		if (self == B) {
			return c;
		}
		B = JB_Ring_PrevSib(B);
		c--;
	};
	return 0;
}

void JB_Tree_Clear(JB_List* self) {
	while (true) {
		JB_List* _tmPf0 = JB_Ring_First(self);
		if ((!_tmPf0)) {
			return;
		}
		JB_Tree_Remove(_tmPf0);
	};
}

int JB_Tree_Dist(JB_List* self, JB_List* r) {
	if ((!(((bool)self) and ((bool)r)))) {
		return 0;
	}
	if (JB_Ring_Parent(r) != JB_Ring_Parent(self)) {
		debugger;
		return 0;
	}
	if (r != self) {
		int _tmP0 = JB_Tree_FwdDist(self, r);
		if ((!_tmP0)) {
			_tmP0 = JB_Tree_BackDist(self, r);
		}
		return _tmP0;
	}
	return 0;
}

JB_List* JB_Tree_FlatLast(JB_List* self) {
	JB_List* rz = nil;
	rz = self;
	while (true) {
		JB_List* _tmPf0 = JB_Ring_Last(rz);
		if ((!_tmPf0)) {
			break;
		}
		rz = _tmPf0;
	};
	return rz;
}

int JB_Tree_FwdDist(JB_List* self, JB_List* F) {
	int c = 0;
	while (F) {
		if (self == F) {
			return c;
		}
		F = JB_Ring_NextSib(F);
		c++;
	};
	return 0;
}

bool JB_Tree_HasOneChild(JB_List* self) {
	return JB_Ring_HasChildCount(self, 1);
}

bool JB_Tree_IsFirst(JB_List* self) {
	return JB_Ring_PrevSib(self) == nil;
}

bool JB_Tree_IsLast(JB_List* self) {
	return JB_Ring_NextSib(self) == nil;
}

bool JB_Tree_IsOnlyChild(JB_List* self) {
	return JB_Tree_IsLast(self) and JB_Tree_IsFirst(self);
}

__lib__ void jdb2(JB_List* self) {
	//visible;
	if (self) {
		JB_String* _tmPf0 = JB_Incr(JB_Msg_JDB_(((Message*)self), nil, 1));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_PrintLine(JB_LUB[276]);
	}
}

__lib__ void jdb3(JB_List* self) {
	//visible;
	if (self) {
		JB_String* _tmPf0 = JB_Incr(JB_Msg_JDB_(((Message*)self), nil, 3));
		JB_PrintLine(_tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_PrintLine(JB_LUB[276]);
	}
}

bool JB_Tree_OperatorLessOrEqual(JB_List* self, int N) {
	JB_List* c = JB_Ring_First(self);
	while (c) {
		if (N <= 0) {
			return nil;
		}
		N--;
		c = JB_Ring_NextSib(c);
	};
	return true;
}

JB_List* JB_Tree_Pop(JB_List* self) {
	JB_List* rz = nil;
	JB_SetRef(rz, JB_Ring_Last(self));
	if (rz) {
		JB_Tree_Remove(rz);
	}
	JB_SafeDecr(rz);
	return rz;
}

void JB_Tree_Remove(JB_List* self) {
	(JB_Ring_ParentSet(self, nil));
}

void JB_Tree_RemoveAfter(JB_List* self) {
	while ((true)) {
		JB_List* x = JB_Ring_NextSib(self);
		if ((!x)) {
			break;
		}
		JB_Tree_Remove(x);
	};
}

JB_String* JB_List_Render(JB_List* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	//visible;
	JB_FS_AppendByte(fs, '(');
	{
		JB_List* f = JB_Incr(JB_Ring_First(self));
		while (f) {
			JB_List* _Nf1 = JB_Incr((JB_Ring_NextSib(f)));
			JB_FreeIfDead(JB_Object___Render__(f, fs));
			JB_FS_AppendByte(fs, ',');
			JB_FS_AppendByte(fs, ' ');
			JB_SetRef(f, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(f);
		;
	}
	;
	JB_FS_AppendByte(fs, ')');
	JB_String* _tmPf2 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

JB_List* JB_Tree_Second(JB_List* self) {
	JB_List* x = JB_Ring_First(self);
	if (x) {
		return JB_Ring_NextSib(x);
	}
	return nil;
}

JB_List* JB_Tree_Get(JB_List* self, int n) {
	JB_List* rz = nil;
	if (self) {
		if (n >= 0) {
			rz = JB_Ring_First(self);
			while (((bool)rz) and ((--n) >= 0)) {
				rz = JB_Ring_NextSib(rz);
			};
		}
		 else {
			rz = JB_Ring_Last(self);
			while (((bool)rz) and ((++n) < 0)) {
				rz = JB_Ring_PrevSib(rz);
			};
		}
	}
	return rz;
}

void JB_Tree_SyntaxAppend(JB_List* self, JB_List* Last) {
	(JB_Ring_LastSet(self, Last));
}

bool JB_Tree_SyntaxEquals(JB_List* self, int n, bool Aware) {
	return JB_Ring_HasChildCount(self, n);
}

void JB_Tree_TakeAllFrom(JB_List* self, JB_List* src) {
	while (JB_Ring_HasChildren(src)) {
		(JB_Ring_FirstSet(self, JB_Ring_Last(src)));
	};
}

JB_List* JB_Tree_Upward(JB_List* self, int n) {
	while (((bool)self) and (n-- >= 1)) {
		self = JB_Ring_Parent(self);
	};
	return self;
}

JB_List* JB_Tree_WrapWith(JB_List* self, JB_List* W) {
	(JB_Ring_PrevSibSet(self, W));
	(JB_Ring_FirstSet(W, self));
	return W;
}


void SC_ASMFunc2_Destructor(ASMFunc2* self) {
	JB_Mrap_Destructor(self);
}

int64 SC_ASMFunc2_RunArgs(ASMFunc2* self, int64* Args, int ArgCount) {
	if ((!self)) {
		return 0;
	}
	if (Args) {
		int64* r = JB_ASM_ClearRegisters(JB_ASM_VM(), ArgCount);
		{
			int i = 0;
			while (i < ArgCount) {
				r[i] = Args[i];
				i++;
			};
		};
	}
	return JB_ASM_Run(((ASM*)JB_Mrap_Ptr(self)), self->Length);
}

void SC_ASMFunc2_Visible(ASMFunc2* self) {
	//visible;
}




void JB_Msg_Acc__(Message* self, FastString* fs) {
	Message* f = JB_Incr(((Message*)JB_Ring_First(self)));
	if (f) {
		JB_FS_SyntaxAppend(fs, f);
		JB_SetRef(f, ((Message*)JB_Ring_NextSib(f)));
		if (f) {
			JB_Msg_RenderPrm(f, fs, '[', ']');
		}
	}
	JB_Decr(f);
}

Message* JB_Msg_AccessAdd(Message* self, JB_String* key) {
	Message* l = self;
	if (JB_Msg_EqualsSyx(self, JB_SyxTmp, false)) {
		l = ((Message*)JB_Ring_Last(self));
		if ((!JB_Msg_EqualsSyx(l, JB_SyxArg, false))) {
			l = JB_Msg_Msg(self, JB_SyxArg, JB_LUB[0]);
		}
	}
	{
		Message* tmp = ((Message*)JB_Ring_First(l));
		while (tmp) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(tmp)));
			if (JB_Msg_SyntaxEquals(tmp, key, true)) {
				{
					Message* _t = ((Message*)JB_Ring_Last(tmp));
					if (_t) {
						JB_Tree_Remove(_t);
					}
				}
				;
				return tmp;
			}
			tmp = _Nf1;
		};
		;
	}
	;
	return JB_Msg_Msg(l, JB_SyxTmp, key);
}

void JB_Msg_CantFind(Message* self, Syntax s, JB_String* name, Message* found) {
	JB_Incr(found);
	if ((!self)) {
		JB_API__NilHandler();
		JB_Decr(found);
		return;
	}
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	if (found) {
		JB_FS_AppendString(fs, JB_LUB[846]);
		JB_FS_MsgErrorName(fs, name);
		JB_String* _tmPf0 = JB_Incr(JB_Syx_LongName(s));
		JB_FS_AppendString(fs, _tmPf0);
		JB_Decr(_tmPf0);
		JB_FS_AppendString(fs, JB_LUB[168]);
		JB_String* _tmPf1 = JB_Incr(JB_Syx_LongName(found->Func));
		JB_FS_AppendString(fs, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else {
		if (s) {
			JB_FS_AppendString(fs, JB_LUB[1012]);
			JB_String* _tmPf2 = JB_Incr(JB_Syx_LongName(s));
			JB_FS_AppendString(fs, _tmPf2);
			JB_Decr(_tmPf2);
		}
		 else {
			JB_FS_AppendString(fs, JB_LUB[1021]);
		}
		JB_FS_MsgErrorName(fs, name);
		JB_SetRef(found, self);
	}
	JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(fs));
	JB_Decr(fs);
	JB_Rec__NewErrorWithNode(found, _tmPf3, nil);
	JB_Decr(_tmPf3);
	JB_Decr(found);
}

bool SC_Msg_ACInIsa(Message* self) {
	if ((!(((JB_Msg_EqualsSyx(self, JB_SyxThg, false))) and JB_Tree_IsLast(self)))) {
		return nil;
	}
	Message* p = ((Message*)JB_Ring_Parent(self));
	if ((!p)) {
		return nil;
	}
	if (JB_Msg_EqualsSyx(p, JB_SyxRel, false)) {
		Message* pr = ((Message*)JB_Ring_PrevSib(self));
		if ((JB_Msg_SyntaxEquals(pr, JB_LUB[1729], true)) or ((JB_Msg_SyntaxEquals(pr, JB_LUB[1493], true)) or (JB_Msg_SyntaxEquals(pr, JB_LUB[1804], true)))) {
			return true;
		}
	}
	SCFunction* pfn = SC_Msg_AsFunc(p);
	if (pfn) {
		if (JB_Str_Equals(pfn->Name, JB_LUB[1729], true)) {
			return true;
		}
	}
	return false;
}

void SC_Msg_AddBefore(Message* self, Message* before, Message* NewItem) {
	if (before) {
		(JB_Ring_PrevSibSet(before, NewItem));
	}
	 else {
		JB_Tree_SyntaxAppend(self, NewItem);
	}
}

void JB_Msg_Adj__(Message* self, FastString* fs) {
	Message* f = ((Message*)JB_Ring_First(self));
	if (f) {
		Message* l = ((Message*)JB_Ring_NextSib(f));
		if (l) {
			JB_FS_SyntaxAppend(fs, f);
			JB_FS_AppendString(fs, JB_LUB[210]);
			JB_FS_SyntaxAppend(fs, l);
		}
	}
}

int JB_Msg_After(Message* self) {
	return self->Position + self->RangeLength;
}

void JB_Msg_AfterSet(Message* self, int Value) {
	self->RangeLength = (Value - self->Position);
}

bool SC_Msg_AllowedMoveToInit(Message* self) {
	Syntax type = self->Func;
	if ((type == JB_SyxDot) or ((type == JB_SyxSDot) or ((type == JB_SyxFunc) or ((type == JB_SyxRel) or (type == JB_SyxDecl))))) {
		return true;
	}
	if (SC_Msg_OperatorIsTmp(self, JB_LUB[1843])) {
		return true;
	}
	return false;
}

Message* JB_Msg_Ancestor(Message* self, Syntax f) {
	if (self) {
		{
			Message* _LoopSrcf1 = ((Message*)JB_Ring_Parent(self));
			Message* ch = _LoopSrcf1;
			while (ch) {
				if (JB_Msg_EqualsSyx(ch, f, false)) {
					return ch;
				}
				ch = ((Message*)JB_Ring_Parent(ch));
			};
			;
		};
	}
	return nil;
}

uint SC_Msg_AndOrExpansionTest(Message* self) {
	Message* ln = ((Message*)JB_Ring_First(self));
	if (JB_Msg_EqualsSyx(self, JB_SyxBra, false)) {
		return SC_Msg_AndOrExpansionTest(ln);
	}
	if ((!JB_Msg_EqualsSyx(self, JB_SyxRel, false))) {
		return 0;
	}
	Message* op = ((Message*)JB_Ring_NextSib(ln));
	if (JB_Msg_SyntaxEquals(op, JB_LUB[587], false)) {
		return 0;
	}
	Message* rn = ((Message*)JB_Ring_NextSib(op));
	if ((!rn)) {
		return 0;
	}
	uint ls = SC_Msg_AndOrExpansionTest(ln);
	uint rs = SC_Msg_AndOrExpansionTest(rn);
	uint bs = ls | rs;
	int orand = 1;
	if ((JB_Msg_SyntaxEquals(op, JB_LUB[1856], false)) or (JB_Msg_SyntaxEquals(op, JB_LUB[1482], false))) {
		return orand | bs;
	}
	if (((ls == 2) or (ls == 0)) and (rs == orand)) {
		SC_Msg_BunchlessFix(self);
		return -1;
	}
	return 2 + bs;
}

JB_String* SC_Msg_APICppProject(Message* self) {
	SCFile* f = SC_Msg_SCFile(self);
	if (JB_File_SyntaxCast(f)) {
		JB_String* it = f->ExportName;
		if (JB_Str_Exists(it)) {
			return JB_Str_LowerCase(it);
		}
		SCImport* a = f->Proj;
		SCModule* b = a->Mod;
		JB_String* c = b->ExportName;
		if (JB_Str_Exists(c)) {
			return JB_Str_LowerCase(c);
		}
	}
	return JB_LUB[1484];
}

void SC_Msg_AppendAllInto(Message* self, Message* Dest) {
	while (JB_Ring_HasChildren(self)) {
		(JB_Ring_LastSet(Dest, ((Message*)JB_Ring_First(self))));
	};
}

void JB_Msg_AppendMacro(Message* self, Macro* M, Array* prms) {
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
	{
		int _if1 = 0;
		while (true) {
			Message* r = ((Message*)JB_Array_Value(prms, _if1));
			if (r == nil) {
				break;
			}
			(JB_Msg_SyntaxIsSet(r, kJB__MsgParseFlags_MacroMade, (!true)));
			_if1++;
		};
	}
	;
	JB_Msg_MacroCopy(JB_Macro_Source(M), self, prms, self);
	{
		int _if3 = 0;
		while (true) {
			Message* r = ((Message*)JB_Array_Value(prms, _if3));
			if (r == nil) {
				break;
			}
			if ((!JB_Msg_SyntaxIs(r, kJB__MsgParseFlags_MacroMade))) {
				JB_Msg_SyntaxExpect(r, JB_LUB[1352]);
			}
			_if3++;
		};
	}
	;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void JB_Msg_ARel__(Message* self, FastString* fs) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendString(fs, self->Name);
}

Message* JB_Msg_Arg(Message* self) {
	return JB_Msg_Last(self, JB_SyxArg);
}

void JB_Msg_Arg__(Message* self, FastString* fs) {
	bool Braces = (((bool)((Message*)JB_Ring_Parent(self))) and (!JB_Msg_SyntaxIs(self, kJB__MsgParseFlags_Style2))) or ((!JB_Ring_HasChildren(self)) or (JB_Str_Exists(self->Name) or (JB_Msg_OperatorIn(self, JB_SyxArg))));
	if (Braces) {
		JB_FS_AppendByte(fs, '{');
	}
	JB_Msg_FSListArg(self, fs, Braces);
	if (Braces) {
		JB_FS_AppendIndent(fs);
		JB_FS_AppendByte(fs, '}');
		JB_FS_AppendByte(fs, '\n');
	}
	if ((!((Message*)JB_Ring_Parent(self)))) {
		JB_FS_AppendByte(fs, '\n');
	}
}

JB_String* JB_Msg_ArgName(Message* self) {
	if ((!JB_Msg_EqualsSyx(self, JB_SyxItem, false))) {
		return JB_LUB[0];
	}
	return JB_Str_LowerCase(JB_Msg_FirstName(self));
}

JB_String* JB_Msg_ArgValue(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxItem, false)) {
		JB_String* _tmP0 = JB_Msg_Name(((Message*)JB_Tree_Second(self)));
		if ((!JB_Str_Exists(_tmP0))) {
			_tmP0 = JB_LUB[2005];
		}
		return _tmP0;
	}
	return self->Name;
}

void JB_Msg_Arr__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '[');
	JB_Msg_FSListSep(self, fs, JB_LUB[303]);
	JB_FS_AppendByte(fs, ']');
}

SCArg* SC_Msg_AsArg(Message* self) {
	JB_Object* obj = self->Obj;
	if (JB_Object_FastIsa(obj, &SCArgData)) {
		return ((SCArg*)obj);
	}
	return nil;
}

SCDecl* SC_Msg_AsDecl(Message* self) {
	JB_Object* obj = self->Obj;
	if (JB_Object_FastIsa(obj, &SCDeclData)) {
		return ((SCDecl*)obj);
	}
	return nil;
}

SCFunction* SC_Msg_AsFunc(Message* self) {
	JB_Object* obj = self->Obj;
	if (JB_Object_FastIsa(obj, &SCFunctionData)) {
		return ((SCFunction*)obj);
	}
	return nil;
}

void JB_Msg_Ask__(Message* self, FastString* fs) {
	JB_Msg_BinnRender(self, fs, JB_LUB[2113], JB_LUB[0]);
}

uint64 SC_Msg_ASMConst(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxUnit, false)) {
		if ((!JB_Msg_Expect(self, JB_SyxNil, JB_LUB[1583]))) {
			return 0;
		}
		return JB_dbl_AsInt(JB_Msg_Float(((Message*)JB_Ring_First(self))));
	}
	if ((!JB_Msg_Expect(self, JB_SyxNum, nil))) {
		return 0;
	}
	if (JB_Str_ContainsByte(self->Name, '.')) {
		return JB_f_AsInt(JB_Msg_Float32(self));
	}
	return JB_Msg_Int(self, 0);
}

fn_asm SC_Msg_ASMFunc(Message* self) {
	fn_asm rz = nil;
	ASMtmp ASM = SC_Msg_TmpType(self);
	if ((!(ASM))) {
		ASM = ((int)self->Func);
	}
	rz = JB_fn_asm_table[ASM];
	return rz;
}

void SC_Msg_AssignsFix(Message* self, SCFunction* f) {
	Message* RP = JB_Incr(SC_Msg_NiceParent(self));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(RP)));
	Message* RightSide = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(self)));
	Message* List = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(self)));
	Message* Upon = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	JB_Tree_SyntaxAppend(List, RightSide);
	JB_Decr(RightSide);
	List->Func = JB_SyxPrm;
	JB_Decr(List);
	Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_Last(RP)));
	Message* L = JB_Incr(_tmPf4);
	JB_Decr(_tmPf4);
	JB_Tree_Remove(L);
	SCClass* c = JB_Incr(f->Cls);
	if (((bool)f->ReturnType) and (((bool)c) and SC_Class_IsDataTypeOrFP(c))) {
		//using;
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
		(JB_Ring_FirstSet(RP, L));
		Message* _tmPf5 = JB_Incr(SC_Msg_FailOrCopy(Upon, RP));
		(JB_Ring_FirstSet(RP, _tmPf5));
		JB_Decr(_tmPf5);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	 else {
		RP->Func = JB_SyxBra;
	}
	JB_Decr(RP);
	JB_Decr(Upon);
	JB_Decr(L);
	JB_Decr(c);
}

int SC_Msg_Autocomplete_State(Message* self) {
	int rz = 0;
	JB_String* s = JB_Incr(self->Name);
	rz = (rz + ((JB_Str_ContainsByte(s, 'R')) << ((bool)0)));
	rz = (rz + ((JB_Str_ContainsByte(s, 'M')) << ((bool)1)));
	rz = (rz + ((JB_Str_ContainsByte(s, 'C')) << ((bool)2)));
	rz = (rz + ((JB_Str_ContainsByte(s, 'L')) << ((bool)3)));
	JB_Decr(s);
	return rz;
}

SCFunction* SC_Msg_AutoMsgFunc(Message* self) {
	SCFunction* rz = nil;
	rz = SC_Msg_MsgFunc(self);
	if ((!(rz))) {
		rz = SC_Msg_MsgFunc(((Message*)JB_Ring_Parent(self)));
	}
	return rz;
}

SCFunction* SC_Msg_AutoMsgFuncFn(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxName, false)) {
		SCClass* cls = SC_Comp__SyntaxAccess(self);
		if (cls) {
			return cls->ConstructorFunc;
		}
	}
	Message* tmp = self;
	if ((!JB_Msg_EqualsSyx(tmp, JB_SyxTmp, false))) {
		tmp = ((Message*)JB_Ring_Parent(self));
		if (JB_Msg_EqualsSyx(tmp, JB_SyxDot, false)) {
			tmp = ((Message*)JB_Ring_Parent(tmp));
		}
	}
	if (JB_Msg_EqualsSyx(tmp, JB_SyxTmp, false)) {
		SCFunction* fn = SC_Msg_AsFunc(tmp);
		if (fn) {
			return fn;
		}
	}
	return nil;
}

void SC_Msg_AvoidSafeDecr(Message* self) {
	Message* arg = ((Message*)JB_Ring_First(self));
	Message* decr = ((Message*)JB_Ring_PrevSib(((Message*)JB_Ring_Last(arg))));
	Message* prms = ((Message*)JB_Ring_Last(decr));
	if (prms) {
		if (prms->Obj == SC__Comp_RefSafeDecr) {
			{
				Message* _t = ((Message*)JB_Ring_First(prms));
				if (_t) {
					SC_Msg_BecomeNil(_t);
				}
			};
		}
	}
}

void JB_Msg_Back__(Message* self, FastString* fs) {
	if (JB_Ind_SyntaxCast(JB_Str_FindByte(self->Name, '`', 0, JB_int__Max()))) {
		JB_Msg_Str__(self, fs);
	}
	 else {
		JB_FS_AppendByte(fs, '`');
		JB_FS_AppendString(fs, self->Name);
		JB_FS_AppendByte(fs, '`');
	}
}

void JB_Msg_Badj__(Message* self, FastString* fs) {
	Message* f = ((Message*)JB_Ring_First(self));
	if (f) {
		Message* l = ((Message*)JB_Ring_NextSib(f));
		if (l) {
			JB_FS_SyntaxAppend(fs, l);
			JB_FS_AppendString(fs, JB_LUB[214]);
			JB_FS_SyntaxAppend(fs, f);
		}
	}
}

void JB_Msg_BecomeStr(Message* self, Syntax fn, JB_String* name) {
	self->Func = fn;
	JB_SetRef(self->Name, name);
}

void JB_Msg_BecomeNum(Message* self, int64 num) {
	JB_Tree_Clear(self);
	self->Func = JB_SyxNum;
	JB_SetRef(self->Name, JB_int64_Render(num, nil));
}

void JB_Msg_BecomeMsg(Message* self, Message* src) {
	self->Func = src->Func;
	JB_SetRef(self->Name, src->Name);
	JB_Tree_Clear(self);
	JB_Tree_TakeAllFrom(self, src);
}

void SC_Msg_Become(Message* self, SCOperator* op) {
	JB_SetRef(self->Obj, op);
	JB_SetRef(self->Name, op->Name);
}

void SC_Msg_BecomeAppend(Message* self, JB_String* s) {
	Message* p = ((Message*)JB_Ring_Parent(self));
	if ((!JB_Msg_Expect(p, JB_SyxRel, nil))) {
		return;
	}
	JB_Msg_BecomeStr(p, JB_SyxDot, s);
	self->Func = JB_SyxPrm;
	Message* n = ((Message*)JB_Ring_NextSib(self));
	if (JB_Msg_EqualsSyx(n, JB_SyxList, false)) {
		JB_FreeIfDead(SC_Msg_ReplaceWith(self, n));
		n->Func = JB_SyxPrm;
	}
	 else {
		(JB_Ring_LastSet(self, n));
	}
}

void JB_Msg_BecomeMacro(Message* self, Macro* M, Array* prms) {
	Message* s = JB_Macro_Source(M);
	if (s) {
		JB_Tree_Clear(self);
		self->Func = s->Func;
		JB_SetRef(self->Name, s->Name);
		JB_Msg_AppendMacro(self, M, prms);
	}
}

void SC_Msg_BecomeNil(Message* self) {
	JB_SetRef(self->Name, JB_LUB[1811]);
	JB_SetRef(self->Obj, JB_TypeNil);
	JB_Tree_Clear(self);
}

void SC_Msg_BecomeSyx(Message* self) {
	self->Func = JB_SyxThg;
	JB_SetRef(self->Name, JB_Str_OperatorPlus(JB_LUB[1982], self->Name));
}

void JB_Msg_Bin__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[226]);
	JB_FS_AppendHexStr(fs, self->Name);
	JB_FS_AppendString(fs, JB_LUB[285]);
}

void JB_Msg_binn__(Message* self, FastString* fs) {
	JB_Msg_BinnRender(self, fs, JB_LUB[598], JB_LUB[0]);
}

void JB_Msg_BinnRender(Message* self, FastString* fs, JB_String* sepa, JB_String* sepb) {
	Message* f = ((Message*)JB_Ring_First(self));
	if ((!f)) {
		return;
	}
	Message* opp = ((Message*)JB_Ring_NextSib(f));
	if ((!opp)) {
		return;
	}
	Message* l = ((Message*)JB_Ring_NextSib(opp));
	Message* OF = ((Message*)JB_Ring_First(opp));
	JB_FS_AppendString(fs, sepa);
	JB_FS_SyntaxAppend(fs, ((Message*)JB_Ternary(((bool)OF), OF, opp)));
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, f);
	if ((!OF)) {
		if (l) {
			debugger;
		}
		return;
	}
	Message* ON = ((Message*)JB_Ring_NextSib(OF));
	if (ON) {
		JB_FS_AppendByte(fs, ' ');
		JB_FS_SyntaxAppend(fs, ON);
	}
	if (l) {
		JB_FS_AppendByte(fs, ' ');
		JB_FS_SyntaxAppend(fs, l);
	}
}

ErrorSeverity SC_Msg_Blind(Message* self) {
	return JB_ErrorSeverity__Find(self->Name, self);
}

SCBlockage SC_Msg_Blocks(Message* self) {
	if (self) {
		return self->Tag & kSC__SCBlockage_Bits;
	}
	return 0;
}

void SC_Msg_BlocksSet(Message* self, int Value) {
	self->Tag = ((self->Tag & (~kSC__SCBlockage_Bits)) | Value);
}

void JB_Msg_Bra__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '(');
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(fs, ')');
}

SCDecl* SC_Msg_BraDeclfind(Message* self) {
	SCDecl* rz = nil;
	while (true) {
		SCDecl* d = SC_Msg_AsDecl(self);
		if (d) {
			rz = d;
		}
		self = ((Message*)JB_Ring_Parent(self));
		if ((!JB_Msg_EqualsSyx(self, JB_SyxBra, false))) {
			break;
		}
	};
	return rz;
}

void JB_Msg_BRel__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
}

bool SC_Msg_BuildRunTask(Message* self, Message* fields, int level) {
	Message* prms = ((Message*)JB_Ring_First(self));
	bool NoPrms = (!prms) or (JB_Msg_EqualsSyx(prms, JB_SyxArg, false));
	if (NoPrms) {
		prms = JB_Syx_Msg(JB_SyxList, JB_LUB[0]);
		(JB_Ring_FirstSet(self, prms));
		if (level == 3) {
			Message* ss = ((Message*)JB_Ring_First(fields));
			if (ss) {
				JB_Tree_SyntaxAppend(prms, JB_Msg_Copy(ss, nil));
			}
		}
	}
	 else {
		Syntax pf = JB_Msg_Func(prms);
		if ((!((pf == JB_SyxBra) or (pf == JB_SyxList)))) {
			JB_Msg_SyntaxExpect(prms, nil);
			return nil;
		}
	}
	Message* arg = ((Message*)JB_Ring_NextSib(prms));
	if (arg) {
		JB_Msg_Expect(arg, JB_SyxArg, nil);
		if ((!JB_Msg_ExpectLast(arg, JB_LUB[0]))) {
			return nil;
		}
	}
	 else {
		arg = JB_Msg_Msg(self, JB_SyxArg, JB_LUB[0]);
	}
	Message* p1 = ((Message*)JB_Ring_First(prms));
	Message* ff = ((Message*)JB_Ring_First(fields));
	if (((JB_Msg_EqualsSyx(p1, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(p1, JB_SyxDot, false))) and (JB_Msg_EqualsSyx(ff, JB_SyxSDot, false))) {
		JB_SetRef(ff->Name, JB_LUB[1988]);
		ff->Func = JB_SyxThg;
	}
	Syntax f = JB_Msg_Func(p1);
	if ((!((f == JB_SyxThg) or (f == JB_SyxDot)))) {
		Message* brah = JB_Syx_Msg(JB_SyxBra, JB_LUB[0]);
		JB_Msg_AppendSyx(brah, JB_SyxThg, JB_LUB[1726]);
		(JB_Ring_FirstSet(self, brah));
		Message* pr = ((Message*)JB_Ring_Parent(self));
		Array* _tmPf0 = (JB_Array_Constructor0(nil));
		JB_Array_SyntaxAppend(_tmPf0, prms);
		JB_Msg_AppendMacro(pr, SC__SCTasks_TaskMacro, _tmPf0);
		Message* callprms = ((Message*)JB_Tree_FlatLast(pr));
		JB_Msg_AppendSyx(callprms, JB_SyxThg, JB_LUB[1934]);
		{
			Message* p = ((Message*)JB_Ring_First(prms));
			while (p) {
				Message* _Nf2 = ((Message*)JB_Ring_NextSib(p));
				Message* ty = ((Message*)JB_Tree_Second(p));
				if (ty) {
					JB_Tree_SyntaxAppend(callprms, JB_Msg_Copy(ty, nil));
				}
				p = _Nf2;
			};
			;
		};
	}
	JB_SetRef(self->Name, JB_LUB[1674]);
	(JB_Ring_FirstSet(self, JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[1909])));
	return true;
}

void SC_Msg_BuildTask(Message* self, Message* fields, Message* root, int level) {
	Array* Runs = JB_Incr(JB_Msg_FindAll(self, JB_SyxTmp, JB_LUB[1909]));
	Message* run = JB_Incr(((Message*)JB_Array_Value(Runs, 0)));
	if (JB_Array_SyntaxCompare(Runs, 1, false) >= 1) {
		JB_Msg_SyntaxExpect(run, JB_LUB[1039]);
	}
	JB_Decr(Runs);
	if (JB_Msg_SyntaxEquals(root, JB_LUB[2114], false)) {
		if (run) {
			if (true) {
				JB_Msg_SyntaxExpect(run, nil);
			}
		}
		JB_SetRef(run, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1909]));
		Message* _tmPf0 = JB_Incr(JB_Msg_Msg(run, JB_SyxArg, JB_LUB[0]));
		JB_Tree_TakeAllFrom(_tmPf0, self);
		JB_Decr(_tmPf0);
		JB_Tree_SyntaxAppend(self, run);
	}
	 else {
		if ((!run)) {
			JB_Msg_SyntaxExpect(self, JB_LUB[1451]);
			JB_Decr(run);
			return;
		}
	}
	if (SC_Msg_BuildRunTask(run, fields, level) and (!({
		Array* _tmPf2 = JB_Incr(JB_Msg_FindAll(self, JB_SyxTmp, JB_LUB[1564]));
		bool _tmPf1 = JB_Array_SyntaxCast(_tmPf2);
		JB_Decr(_tmPf2);
		 _tmPf1;
	}))) {
		Message* _tmPf3 = JB_Incr(JB_Str_ParseJbin(((JB_LUB[22])), kJB__int64_max));
		(JB_Ring_PrevSibSet(run, _tmPf3));
		JB_Decr(_tmPf3);
	}
	JB_Decr(run);
}

void SC_Msg_BunchFix(Message* self) {
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
	Message* P = JB_Incr(SC_Msg_BunchFixPrepare(self));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(P)));
	Message* subject = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	Message* multi_opp = JB_Incr(((Message*)JB_Ring_NextSib(subject)));
	if (multi_opp) {
		SC_Msg_RelFix(self, false);
		JB_FreeIfDead(SC_Msg_ReplaceWith(P, self));
		SC_Msg_BunchFixSub(multi_opp, subject, self);
	}
	JB_Decr(P);
	JB_Decr(subject);
	JB_Decr(multi_opp);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Msg_BunchFixPrepare(Message* self) {
	Message* P = SC_Msg_NiceParent(self);
	if (JB_Msg_EqualsSyx(P, JB_SyxRel, false)) {
		return P;
	}
	return ((Message*)JB_Ring_Last(SC_Func__TypedTempMoveOut(self, JB_LUB[0])));
}

void SC_Msg_BunchFixSub(Message* self, Message* subject, Message* stuff) {
	JB_Incr(stuff);
	JB_Incr(subject);
	while (stuff) {
		Message* test = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
		JB_Tree_SyntaxAppend(test, subject);
		Message* _tmPf0 = JB_Incr(JB_Msg_Copy(self, nil));
		JB_Tree_SyntaxAppend(test, _tmPf0);
		JB_Decr(_tmPf0);
		if ((!JB_Msg_EqualsSyx(stuff, JB_SyxRel, false))) {
			JB_FreeIfDead(JB_Msg_ReplaceInto(stuff, test));
			JB_Decr(test);
			break;
		}
		Message* R = JB_Incr(((Message*)JB_Tree_Get(stuff, 2)));
		if ((!R)) {
			JB_Msg_SyntaxExpect(stuff, JB_LUB[1171]);
			JB_Decr(subject);
			JB_Decr(stuff);
			JB_Decr(R);
			JB_Decr(test);
			return;
		}
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(stuff)));
		JB_FreeIfDead(JB_Msg_ReplaceInto(_tmPf1, test));
		JB_Decr(test);
		JB_Decr(_tmPf1);
		JB_SetRef(stuff, R);
		JB_Decr(R);
		JB_SetRef(subject, JB_Msg_Copy(subject, nil));
	};
	JB_Decr(stuff);
	JB_Decr(subject);
}

void SC_Msg_BunchlessFix(Message* self) {
	Message* subject = JB_Incr(((Message*)JB_Ring_First(self)));
	Message* multi_opp = JB_Incr(((Message*)JB_Ring_NextSib(subject)));
	if ((!multi_opp)) {
		JB_Decr(multi_opp);
		JB_Decr(subject);
		return;
	}
	Message* c = JB_Incr(((Message*)JB_Ring_NextSib(multi_opp)));
	if ((!c)) {
		JB_Decr(c);
		JB_Decr(multi_opp);
		JB_Decr(subject);
		return;
	}
	JB_Msg_BecomeMsg(self, c);
	JB_Decr(c);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
	SC_Msg_BunchFixSub(multi_opp, subject, self);
	JB_Decr(subject);
	JB_Decr(multi_opp);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

bool SC_Msg_CanGetAddress(Message* self, SCNode* name_space) {
	Message* curr = SC_Msg_UnBra(self);
	if (JB_Msg_EqualsSyx(curr, JB_SyxAcc, false)) {
		Message* f = ((Message*)JB_Ring_First(curr));
		SCDecl* T = SC_TypeOfExpr(f, name_space, nil);
		if ((!T)) {
			return nil;
		}
		bool _tmPf0 = (SC_Decl_IsNumeric(T) <= 1);
		if ((!_tmPf0)) {
			JB_Msg_SyntaxExpect(curr, JB_LUB[707]);
			return nil;
		}
		return _tmPf0;
	}
	SCDecl* T2 = SC_TypeOfExpr(curr, name_space, nil);
	if ((!T2)) {
		return nil;
	}
	if ((!((JB_Msg_EqualsSyx(curr, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(curr, JB_SyxDot, false))))) {
		JB_Msg_SyntaxExpect(curr, JB_LUB[706]);
		return nil;
	}
	if ((!(!SC_Decl_SyntaxIs(T2, kSC__SCDeclInfo_DataOnlyConst)))) {
		JB_Msg_SyntaxExpect(curr, JB_LUB[708]);
		return nil;
	}
	if (((JB_Msg_EqualsSyx(curr, JB_SyxThg, false))) and ((SC_Decl_SyntaxIs(T2, kSC__SCDeclInfo_Local)) and (!(SC_Decl_IsNormalStruct(T2) or SC_Decl_IsCArray(T2))))) {
		Message* p = SC_Msg_ParentForAddress(self);
		if ((!JB_Msg_EqualsSyx(p, JB_SyxPrm, false))) {
			JB_Msg_SyntaxExpect(curr, JB_LUB[716]);
			return nil;
		}
	}
	return true;
}

Message* SC_Msg_CastedParent(Message* self) {
	Message* rz = nil;
	rz = ((Message*)JB_Ring_Parent(SC_Msg_UnBra(self)));
	if (JB_Msg_EqualsSyx(rz, JB_SyxPrm, false)) {
		rz = ((Message*)JB_Ring_Parent(rz));
	}
	return rz;
}

int SC_Msg_CastFPToVoidPtr(Message* self) {
	Message* cst = JB_Incr(JB_Syx_OperatorPlus(JB_SyxType, JB_LUB[564]));
	(JB_Ring_PrevSibSet(self, cst));
	JB_Tree_SyntaxAppend(cst, self);
	Message* _tmPf0 = JB_Incr(JB_Msg_Msg(cst, JB_SyxEmb, JB_LUB[0]));
	JB_SetRef(_tmPf0->Obj, JB_TypeVoidPtr);
	JB_Decr(_tmPf0);
	JB_SetRef(cst->Obj, JB_TypeVoidPtr);
	JB_Decr(cst);
	return kJB_kCastedMatch;
}

int SC_Msg_CastToBool(Message* self, SCNode* name_space) {
	return SC_Msg_CastToType(self, JB_LUB[1521], JB_TypeBool, name_space, kJB_kLossyCastedMatch);
}

int SC_Msg_CastToClass(Message* self, SCClass* type, SCNode* name_space) {
	return SC_Msg_CastToType(self, type->Name, type, name_space, kJB_kCastedMatch);
}

int SC_Msg_CastToType(Message* self, JB_String* TypeName, SCClass* type, SCNode* name_space, int loss) {
	if ((!self)) {
		return kJB_kNeedsTypeCast | loss;
	}
	if (name_space) {
		JB_FreeIfDead(SC_TypeOfExpr(self, name_space, nil));
	}
	 else if ((bool)(self->Obj)) {
		SCDecl* FoundType = JB_Incr(SC_TypeOfExpr(self, name_space, nil));
		if (((bool)FoundType) and SC_Class_IsStruct(FoundType->Type)) {
			if ((!FoundType->PointerCount)) {
				JB_Msg_SyntaxExpect(self, JB_LUB[720]);
				JB_Decr(FoundType);
				return 0;
			}
		}
		JB_Decr(FoundType);
	}
	Message* cst = JB_Incr((JB_Syx_Msg(JB_SyxType, JB_LUB[564])));
	(JB_Ring_PrevSibSet(self, cst));
	JB_Tree_SyntaxAppend(cst, self);
	Message* _tmPf0 = JB_Incr(JB_Msg_Msg(cst, JB_SyxThg, TypeName));
	JB_SetRef(_tmPf0->Obj, type->TypeNormal);
	JB_Decr(_tmPf0);
	JB_SetRef(cst->Obj, type->TypeNormal);
	JB_Decr(cst);
	return loss;
}

Message* SC_Msg_CausesUnReachable(Message* self, Message* arg, Message* Dcl, Message* LastPlace) {
	Message* Curr = Dcl;
	if ((!Curr)) {
		Curr = ((Message*)JB_Ring_First(self));
	}
	while (((bool)Curr) and (Curr != LastPlace)) {
		if (JB_Msg_EqualsSyx(Curr, JB_SyxTmp, false)) {
			JB_String* s = Curr->Name;
			if (JB_Str_Equals(s, JB_LUB[1899], false)) {
				return Curr;
			}
			if ((JB_Str_Equals(s, JB_LUB[1635], false)) or (JB_Str_Equals(s, JB_LUB[1566], false))) {
				if (SC_Refs__ExitHitsOrGoesPast(Curr, arg)) {
					return Curr;
				}
			}
			 else if (((JB_Str_Equals(s, JB_LUB[1892], false))) and (self == arg)) {
				return Curr;
			}
		}
		Curr = ((Message*)JB_Ring_NextSib(Curr));
	};
	return nil;
}

void JB_Msg_Char__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '\'');
	JB_String* _tmPf0 = JB_Incr(JB_Str_EscapeChr(self->Name));
	JB_FS_AppendString(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(fs, '\'');
}

void SC_Msg_CheckContinuesAndExits(Message* self) {
	{
		Message* msg = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)(msg)) and (msg != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(msg)));
			if (JB_Msg_EqualsSyx(msg, JB_SyxTmp, false)) {
				if ((JB_Msg_SyntaxEquals(msg, JB_LUB[1661], false)) or (JB_Msg_SyntaxEquals(msg, JB_LUB[2048], false))) {
					msg = ((Message*)JB_Ring_FlatAfter(msg));
					continue;
				}
				 else if (JB_Msg_SyntaxEquals(msg, JB_LUB[1566], false)) {
					SC_Msg_LoopContinue(msg);
				}
				 else if (JB_Msg_SyntaxEquals(msg, JB_LUB[1635], false)) {
					SC_Msg_LoopExit(msg);
				}
			}
			msg = _N_f2;
		};
		;
	};
}

void SC_Msg_CheckNotInStateExpr(Message* self, Message* top) {
	Message* node = self;
	while (((bool)node) and (node != top)) {
		if (SC_Msg_IsStatementExpr(node)) {
			JB_Msg_SyntaxExpect(self, JB_Str_OperatorPlus(JB_LUB[1234], self->Name));
		}
		node = ((Message*)JB_Ring_Parent(node));
	};
}

void SC_Msg_CheckSuperDotSave(Message* self, JB_String* name, bool ShouldBe) {
	bool Match = ((SC_Msg_OperatorIsDot(self, name)) and (({
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(self)));
		bool _tmPf1 = SC_Msg_OperatorIsThing(_tmPf2, JB_LUB[1975]);
		JB_Decr(_tmPf2);
		 _tmPf1;
	})));
	if (Match != ShouldBe) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[878]);
		JB_FS_AppendString(_fsf0, name);
		JB_String* _tmPf3 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Msg_SyntaxWarn(self, _tmPf3);
		JB_Decr(_tmPf3);
	}
}

void SC_Msg_Clean(Message* self, bool erl) {
	int pos = JB__Tk_Using.Position;
	uint Len = JB__Tk_Using.Length;
	u16 Tag = JB__Tk_Using.Tag;
	Message* QEscape = nil;
	Message* IgnoreArg = nil;
	if (JB_FreeIfDead(JB_Class_Layer((&MessageData))) == JB_FreeIfDead(JB_Class_DefaultLayer((&MessageData)))) {
		pos = -1;
	}
	{
		Message* curr = JB_Incr(self);
		Message* _afterf2 = JB_Incr(((Message*)JB_Ring_FlatAfter(self)));
		while (((bool)(curr)) and (curr != _afterf2)) {
			Message* _N_f3 = JB_Incr((((Message*)JB_Ring_FlatNext0(curr))));
			if (pos >= 0) {
				curr->Position = pos;
				curr->RangeLength = Len;
				curr->Tag = Tag;
			}
			if (curr == QEscape) {
				QEscape = nil;
			}
			Syntax f = curr->Func;
			if ((f != JB_SyxBack) and ((f != JB_SyxStr) and ((f != JB_SyxSStr) and (f != JB_SyxBin)))) {
				if (JB_Str_ContainsString(curr->Name, JB_LUB[2095])) {
					JB_Msg_SyntaxExpect(curr, JB_LUB[1086]);
					JB_Decr(_N_f3);
					JB_Decr(_afterf2);
					JB_Decr(curr);
					JB_Decr(IgnoreArg);
					return;
				}
			}
			if (f == JB_SyxArg) {
				JB_SetRef(curr->Name, JB_LUB[0]);
			}
			 else if ((f == JB_SyxBack) or ((f == JB_SyxSStr) or (f == JB_SyxBin))) {
				curr->Func = JB_SyxStr;
			}
			 else if (f == JB_SyxRel) {
				SC_Msg_RelFix(curr, false);
			}
			 else if (erl and (f == JB_SyxERel)) {
				JB_SetRef(curr->Name, JB_Str_LowerCase(curr->Name));
				SC_Msg_FixErl(curr);
			}
			 else if (f == JB_SyxARel) {
				if ((!QEscape) and (JB_Msg_SyntaxEquals(curr, JB_LUB[599], false))) {
					SC_Msg_Tran_QMark(curr);
					JB_SetRef(curr, ((Message*)JB_Ring_FlatNext0(curr)));
					JB_Decr(_N_f3);
					continue;
				}
			}
			 else if (f == JB_SyxDecl) {
				Message* l = JB_Incr(((Message*)JB_Ring_Last(curr)));
				if (JB_Msg_EqualsSyx(l, JB_SyxArg, false)) {
					Message* types = JB_Incr(((Message*)JB_Ring_First(curr)));
					Message* names = JB_Incr(((Message*)JB_Ring_NextSib(types)));
					if (((bool)types) and (((bool)names) and (JB_FreeIfDead(((Message*)JB_Ring_NextSib(names))) == l))) {
						SC_Msg_WithDeclTransform(l, curr, names, l);
					}
					JB_Decr(types);
					JB_Decr(names);
				}
				JB_Decr(l);
				Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(curr)));
				QEscape = ((Message*)JB_Ring_FlatAfter(_tmPf4));
				JB_Decr(_tmPf4);
			}
			 else if ((f == JB_SyxOpp) or ((f == JB_SyxCnj) or (f == JB_SyxERel))) {
				if (JB_Msg_SyntaxEquals(curr, JB_LUB[583], false)) {
					(JB_Msg_SyntaxDeprecate(curr, JB_LUB[1356]));
					JB_SetRef(curr->Name, JB_LUB[216]);
				}
				 else if (JB_Msg_SyntaxEquals(curr, JB_LUB[2091], false)) {
					(JB_Msg_SyntaxDeprecate(curr, JB_LUB[1367]));
					JB_SetRef(curr->Name, JB_LUB[2085]);
				}
				 else if (JB_Msg_SyntaxEquals(curr, JB_LUB[585], false)) {
					SC_Msg_BecomeAppend(curr, JB_LUB[1251]);
				}
				 else if (JB_Msg_SyntaxEquals(curr, JB_LUB[2093], false)) {
					SC_Msg_BecomeAppend(curr, JB_LUB[1259]);
				}
				 else if (SC_Msg_OppExpand(curr)) {
					0;
				}
				 else if (JB_CS_HasChar(JB__Constants_CSWordStart, JB_Str_First((curr->Name)))) {
					JB_SetRef(curr->Name, JB_Str_LowerCase(curr->Name));
				}
			}
			 else if (f == JB_SyxTmp) {
				if (JB_FreeIfDead(((Message*)JB_Ring_Parent(curr))) != IgnoreArg) {
					JB_String* s = JB_Incr(JB_Str_LowerCase(curr->Name));
					JB_SetRef(curr->Name, s);
					if ((JB_Str_Equals(s, JB_LUB[1698], false)) or ((JB_Str_Equals(s, JB_LUB[1624], false)) or (JB_Str_Equals(s, JB_LUB[1699], false)))) {
						SC_Msg_FixElseif(curr);
					}
					 else if (JB_Str_Equals(s, JB_LUB[1985], false)) {
						JB_SetRef(curr, SC_Msg_Tran_Target(curr));
						JB_Decr(s);
						JB_Decr(_N_f3);
						continue;
					}
					 else if ((JB_Str_Equals(s, JB_LUB[1728], false)) or (JB_Str_Equals(s, JB_LUB[1730], false))) {
						SC_Msg_Tran_Isnt(curr, JB_LUB[1934]);
					}
					 else if (((bool)SC__SC_UniqueNum) and SC_AutoComplete__IsAFunc(s)) {
						SC__SC_UniqueNum = 0;
					}
					 else if ((JB_Str_Equals(s, JB_LUB[1611], false)) or ((JB_Str_Equals(s, JB_LUB[1680], false)) or ((JB_Str_Equals(s, JB_LUB[1657], false)) or (JB_Str_Equals(s, JB_LUB[1563], false))))) {
						JB_SetRef(IgnoreArg, ((Message*)JB_Ring_Last(curr)));
					}
					 else if (JB_Str_Equals(s, JB_LUB[2051], false)) {
						SC_Msg_Tran_With(curr);
					}
					 else if (JB_Str_Equals(s, JB_LUB[1607], false)) {
						if (SC__Options_IsDirectTest) {
							JB_SetRef(curr->Name, JB_LUB[1698]);
							//using;
							MessagePosition _usingf0 = JB_Msg_SyntaxUsing(curr);
							Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[2005]));
							(JB_Ring_FirstSet(curr, (_tmPf5)));
							JB_Decr(_tmPf5);
							JB_MsgPos_SyntaxUsingComplete((&_usingf0));
							JB_MsgPos_Destructor((&_usingf0));
						}
						 else {
							JB_SetRef(curr->Name, JB_LUB[1700]);
						}
					}
					JB_Decr(s);
				}
			}
			JB_SetRef(curr, _N_f3);
			JB_Decr(_N_f3);
		};
		JB_Decr(curr);
		JB_Decr(_afterf2);
		;
	}
	;
	JB_Decr(IgnoreArg);
}

int JB_Msg_CleanIndent(Message* self) {
	return self->Indent & (~1);
}

Message* SC_Msg_CmdImprove(Message* self) {
	if ((!JB_Msg_EqualsSyx(self, JB_SyxRel, false))) {
		return self;
	}
	Message* ch = ((Message*)JB_Ring_First(self));
	if (JB_Msg_EqualsSyx(ch, JB_SyxFunc, false)) {
		return ch;
	}
	return self;
}

void JB_Msg_Cnj__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '#');
	JB_FS_AppendString(fs, self->Name);
}

bool SC_Msg_CollectAGlobalDecl(Message* self, SCNode* scarg) {
	SCDecl* dcl = SC_Msg_CollectDecl(self, scarg, scarg, kSC__DeclMode_Globals, nil, nil);
	if (dcl) {
		Message* def = dcl->Default;
		if (((bool)def) and (!SC_Decl_NilStated(dcl))) {
			SCDecl* d = SC_Msg_MsgDecl(def);
			if (((bool)d) and ((bool)SC_Decl_StatedReal(d))) {
				dcl->NilDeclared = kSC__NilState_Real;
			}
		}
		(SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_Property, true));
		(SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_Global, true));
		return true;
	}
	return false;
}

Message* SC_Msg_CollectDclName(Message* self) {
	if (self) {
		Message* thg = self;
		if (JB_Msg_EqualsSyx(thg, JB_SyxRel, false)) {
			thg = ((Message*)JB_Ring_First(thg));
		}
		if (JB_Msg_EqualsSyx(thg, JB_SyxThg, false)) {
			return thg;
		}
		if (true) {
			JB_Msg_SyntaxExpect(self, nil);
		}
	}
	return nil;
}

SCDecl* SC_Msg_CollectDecl(Message* self, SCNode* P, SCNode* Recv, int Mode, SCClass* cls, SCFunction* FuncPrms) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	Message* Types = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* Names = JB_Incr(((Message*)JB_Ring_NextSib(Types)));
	if ((!(((bool)FuncPrms) or ((bool)Names)))) {
		JB_Msg_SyntaxExpect(self, JB_LUB[1077]);
		JB_Decr(Names);
		JB_Decr(Types);
		return nil;
	}
	Message* Default = JB_Incr(SC_DeclsDefault(Names));
	SCDecl* Sdcl = JB_Incr(SC_ExtractDecl(Types, P, Mode));
	if ((!Sdcl) and ((!Default) and (JB_Object_FastIsa(P, &SCArgData)))) {
		JB_SetRef(Sdcl, ((SCArg*)P)->ParentFunc->ReturnType);
	}
	Message* NameItm = JB_Incr(SC_Msg_CollectDclName(Names));
	SCDecl* DefaultDcl = nil;
	if (FuncPrms) {
		0;
	}
	 else if (((bool)Default) and (Mode != kSC__DeclMode_Properties)) {
		DefaultDcl = SC_TypeOfExprNeeded(Default, P);
		if ((!DefaultDcl)) {
			JB_Decr(NameItm);
			JB_Decr(Sdcl);
			JB_Decr(Default);
			JB_Decr(Names);
			JB_Decr(Types);
			return nil;
		}
		DefaultDcl = SC_Decl_DownGrade(DefaultDcl);
		if (Sdcl) {
			JB_SetRef(Default, SC_Decl_ExpectMatch(Sdcl, DefaultDcl, kJB_kTypeCastTrue, Default, nil));
		}
	}
	 else if (((!cls)) and (((bool)(Sdcl)) and (SC_Decl_CanUseDefault(Sdcl)))) {
		JB_SetRef(Default, SC_Decl_CreateDefault(Sdcl, Types, Mode >= 4));
		if (Default) {
			JB_FreeIfDead(SC_TypeOfExpr(Default, P, nil));
			JB_SetRef(Names, SC_DefaultStitch(Default, self));
		}
	}
	bool NoOriginalDcl = false;
	if ((!Sdcl)) {
		NoOriginalDcl = true;
		if (((bool)(cls)) and ((bool)(cls->Contained))) {
			JB_SetRef(Sdcl, cls->Contained);
		}
		 else {
			if ((!((!FuncPrms) and ((bool)DefaultDcl)))) {
				JB_StringC* _tmPf1 = JB_Incr(((JB_StringC*)JB_Ternary((!FuncPrms), JB_LUB[1022], JB_LUB[1023])));
				JB_Msg_SyntaxExpect(self, _tmPf1);
				JB_Decr(_tmPf1);
				JB_Decr(NameItm);
				JB_Decr(Sdcl);
				JB_Decr(Default);
				JB_Decr(Names);
				JB_Decr(Types);
				return nil;
			}
			JB_SetRef(Sdcl, DefaultDcl);
		}
	}
	if (SC_Decl_NeedsContainedfix(Sdcl)) {
		JB_SetRef(Sdcl, SC_Decl_Containedfix(Sdcl));
	}
	SCDecl* dcl = JB_Incr(SC_Decl_CopyDecl(Sdcl, false));
	if ((!NameItm)) {
		if ((!JB_Tree_IsLast(self))) {
			JB_Msg_SyntaxExpect(self, JB_LUB[1122]);
		}
		if (FuncPrms) {
			if (SC_Func_CollectReturnAsReal(FuncPrms)) {
				dcl->NilDeclared = kSC__NilState_Real;
			}
			JB_SetRef(FuncPrms->ReturnType, dcl);
		}
		JB_Decr(dcl);
		JB_Decr(NameItm);
		JB_Decr(Sdcl);
		JB_Decr(Default);
		JB_Decr(Names);
		JB_Decr(Types);
		return nil;
	}
	if ((!Default)) {
		JB_Msg_ExpectLast(Names, JB_LUB[0]);
	}
	JB_Decr(Names);
	if (Mode != kSC__DeclMode_Properties) {
		JB_SetRef(NameItm->Obj, dcl);
	}
	if ((((bool)(Mode & 8))) and NoOriginalDcl) {
		if (!(SC_Decl_SyntaxIs(Sdcl, kSC__SCDeclInfo_StayBorrowed))) {
			(SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_Borrowed, (!true)));
		}
		dcl->NilDeclared = (kSC__NilState_Real >> SC_Decl_TypeSuffers(dcl));
	}
	JB_Decr(Sdcl);
	if (JB_Msg_OperatorIn(NameItm, JB_SyxRel)) {
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Parent(NameItm)));
		JB_SetRef(_tmPf2->Obj, dcl);
		JB_Decr(_tmPf2);
	}
	JB_SetRef(self->Obj, dcl);
	JB_SetRef(Types->Obj, dcl);
	JB_Decr(Types);
	JB_SetRef(dcl->Default, Default);
	(SC_Decl_NameSet(dcl, NameItm->Name));
	JB_Decr(NameItm);
	JB_SetRef(dcl->Source, self);
	(SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_Const, (!true)));
	if (((bool)Default) and ((bool)DefaultDcl)) {
		SC_Decl_ConstCheck(dcl, nil, Default, DefaultDcl);
	}
	JB_Decr(Default);
	if (Recv) {
		SC_Base_TryAdd(Recv, self, dcl, dcl->Name);
	}
	JB_SafeDecr(dcl);
	return dcl;
}

bool SC_Msg_CollectFromBody(Message* self, SCNode* scarg) {
	SCDecl* dcl = SC_Msg_CollectDecl(self, scarg, scarg, kSC__DeclMode_FunctionBody, nil, nil);
	if (dcl) {
		(SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_Body, true));
		(SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_DataConst, (!true)));
		Message* def = dcl->Default;
		if (def) {
			if ((!((!JB_Msg_EqualsSyx(def, JB_SyxThg, false)) or (!JB_Str_Equals(def->Name, dcl->Name, true))))) {
				JB_Msg_SyntaxExpect(def, JB_LUB[1204]);
			}
		}
		return true;
	}
	return false;
}

JB_String* SC_Msg_CollectFuncTableName(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxName, false)) {
		return JB_Str_UpperCase(self->Name);
	}
	if (JB_Str_Exists(self->Name) and (!JB_Msg_EqualsSyx(self, JB_SyxDot, false))) {
		return self->Name;
	}
	return JB_Msg_FirstName(self);
}

Message* SC_Msg_CollectionPlace(Message* self) {
	Message* msg = JB_Incr(self);
	while (msg) {
		Message* p = JB_Incr(((Message*)JB_Ring_Parent(msg)));
		if (JB_Msg_EqualsSyx(msg, JB_SyxArg, false)) {
			if ((!p)) {
				JB_Decr(p);
				JB_SafeDecr(msg);
				return msg;
			}
			if (SC_Msg_OperatorIsTmp(p, JB_LUB[1545]) or SC_Msg_OperatorIsTmp(p, JB_LUB[1799])) {
				JB_Decr(p);
				JB_SafeDecr(msg);
				return msg;
			}
		}
		JB_SetRef(msg, p);
		JB_Decr(p);
	};
	JB_Decr(msg);
	return nil;
}

bool SC_Msg_CollectOneParam(Message* self, SCFunction* func, SCNode* Recv, SCClass* cls) {
	if ((func->IsAssigns == 2) and JB_Tree_IsLast(self)) {
		if ((!cls)) {
			if (true) {
				JB_Msg_SyntaxExpect(self, JB_LUB[757]);
			}
		}
		 else {
			func->IsAssigns = 3;
			if (SC_Class_IsDataTypeOrFP(cls)) {
				(JB_Ring_NextSibSet(self, JB_Msg_Copy(self, nil)));
			}
			SC_Msg_AddValue(self, func);
		}
	}
	if ((JB_Msg_EqualsSyx(self, JB_SyxItem, false)) and (JB_Msg_SyntaxEquals(((Message*)JB_Ring_First(self)), JB_LUB[1498], false))) {
		self = ((Message*)JB_Ring_Last(self));
		func->IsAssigns = 1;
		SC_Msg_AddValue(self, func);
	}
	if ((!JB_Msg_Expect(self, JB_SyxDecl, nil))) {
		return nil;
	}
	SCDecl* dcl = SC_Msg_CollectDecl(self, func, Recv, kSC__DeclMode_FuncParam, cls, func);
	if ((!dcl)) {
		return nil;
	}
	if (SC_Msg_OperatorIsThing(dcl->Default, JB_LUB[1811])) {
		dcl->NilDeclared = kSC__NilState_Optional;
	}
	JB_Array_SyntaxAppend(func->Args, dcl);
	(SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_DataConst, (!true)));
	if (JB_Str_Exists(dcl->Name)) {
		(SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_Param, true));
		(SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_Altered, (!true)));
	}
	 else {
		(SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_Return, true));
	}
	return true;
}

JB_String* SC_Msg_CollectUsage(Message* self) {
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(fs, JB_LUB[1355]);
	{
		Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
		while (ch) {
			Message* _Nf2 = JB_Incr((((Message*)JB_Ring_NextSib(ch))));
			if (JB_Msg_Expect(ch, JB_SyxDecl, nil)) {
				if ((!JB_Tree_IsFirst(ch))) {
					JB_FS_AppendString(fs, JB_LUB[108]);
				}
				Message* name = JB_Incr(SC_Msg_DeclName(ch));
				Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(ch)));
				bool optional = ((JB_Msg_EqualsSyx(_tmPf3, JB_SyxRel, false)));
				JB_Decr(_tmPf3);
				if (optional) {
					JB_FS_AppendByte(fs, '[');
				}
				Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(ch)));
				Message* ty = JB_Incr(_tmPf4);
				JB_Decr(_tmPf4);
				JB_FS_SyntaxAppend(fs, name);
				JB_Decr(name);
				Syntax tyfn = ty->Func;
				if (tyfn == JB_SyxArr) {
					JB_SetRef(ty, ((Message*)JB_Ring_First(ty)));
				}
				JB_String* type = JB_Incr(JB_Msg_Name(ty));
				JB_Decr(ty);
				if (JB_Str_ContainsString(type, JB_LUB[1651])) {
					JB_SetRef(type, JB_LUB[1652]);
				}
				 else if ((!JB_Str_Equals(type, JB_LUB[1969], true))) {
					//;
					JB_FS_AppendString(fs, JB_LUB[122]);
					JB_FS_AppendString(fs, type);
					JB_FS_AppendByte(fs, ')');
					//;
				}
				JB_Decr(type);
				if (optional) {
					JB_FS_AppendByte(fs, ']');
				}
				if (tyfn == JB_SyxArr) {
					JB_FS_AppendString(fs, JB_LUB[161]);
				}
			}
			JB_SetRef(ch, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(ch);
		;
	}
	;
	JB_String* _tmPf5 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

Message* JB_Msg_ConfArg(Message* self) {
	if ((JB_Msg_EqualsSyx(self, JB_SyxArg, false)) or (self == nil)) {
		return self;
	}
	Message* w = ((Message*)JB_Ternary((JB_Msg_EqualsSyx(self, JB_SyxTmp, false)), ((Message*)JB_Ring_Last(self)), ((Message*)JB_Ring_NextSib(self))));
	if (JB_Msg_EqualsSyx(w, JB_SyxArg, false)) {
		return w;
	}
	return nil;
}

void SC_Msg_ConfTake(Message* self, Message* dest, JB_String* name) {
	Message* F = JB_Msg_GetConf(self, name, false);
	if (F) {
		JB_Tree_TakeAllFrom(dest, F);
		JB_Tree_Remove(((Message*)JB_Ring_Parent(F)));
	}
}

Message* SC_Msg_ConstantExpandSub(Message* self) {
	Message* rz = nil;
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
	{
		Message* item = JB_Incr(((Message*)JB_Ring_First(self)));
		while (item) {
			Message* _Nf2 = JB_Incr((((Message*)JB_Ring_NextSib(item))));
			if (rz) {
				Message* _tmPf3 = JB_Incr(JB_Msg_Copy(item, nil));
				JB_SetRef(rz, SC_NewRel(rz, _tmPf3, JB_LUB[2078]));
				JB_Decr(_tmPf3);
			}
			 else {
				JB_SetRef(rz, JB_Msg_Copy(item, nil));
			}
			JB_SetRef(item, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(item);
		;
	}
	;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(rz);
	return rz;
}

bool SC_Msg_ConstIntValue(Message* self, SCNode* name_space, int64* v) {
	if (SC_Msg_ConstIntValueSub(self, name_space, v)) {
		return true;
	}
	SCDecl* t = SC_TypeOfExpr(self, name_space, nil);
	if (t) {
		Message* d = t->Default;
		if (d) {
			return SC_Msg_ConstIntValueSub(d, name_space, v);
		}
	}
	return false;
}

bool SC_Msg_ConstIntValueSub(Message* self, SCNode* name_space, int64* v) {
	Message* s = self;
	while (JB_Msg_EqualsSyx(s, JB_SyxBra, false)) {
		s = ((Message*)JB_Ring_First(s));
	};
	if (JB_Msg_EqualsSyx(s, JB_SyxNum, false)) {
		(*v) = JB_Msg_Int(s, 0);
		return true;
	}
	if (((bool)JB_SyxThg) and JB_Str_MidEquals(s->Name, 0, JB_LUB[1982], false)) {
		SyntaxObj* find = ((SyntaxObj*)JB_Dict_ValueLower(JB__SyxDict_, JB_Str_Range(s->Name, (3), JB_int__Max())));
		if (find) {
			(*v) = ((int64)find->ID);
			JB_Msg_BecomeStr(s, JB_SyxNum, JB_int64_Render(((*v)), nil));
			return true;
		}
	}
	return false;
}

Message* JB_Msg_ConstructorCopy(Message* self, Message* other) {
	if (self == nil) {
		self = ((Message*)JB_NewClass(&MessageData));
	}
	JB_Ring_Constructor0(self);
	self->Position = other->Position;
	JB_String* _tmPf1 = other->Name;
	self->Name = JB_Incr(_tmPf1);
	self->Func = other->Func;
	JB_Object* _tmPf0 = other->Obj;
	self->Obj = JB_Incr(_tmPf0);
	self->Indent = other->Indent;
	self->Flags = (other->Flags | JB__Tk_Using.Flags);
	self->RangeLength = other->RangeLength;
	self->Tag = other->Tag;
	return self;
}

Message* JB_Msg_ConstructorEmpty(Message* self) {
	if (self == nil) {
		self = ((Message*)JB_NewClass(&MessageData));
	}
	JB_Ring_Constructor0(self);
	JB_StringC* _tmPf0 = JB_LUB[0];
	self->Name = JB_Incr(_tmPf0);
	self->Obj = nil;
	self->Indent = 0;
	self->Func = JB_SyxArg;
	self->Position = JB__Tk_Using.Position;
	self->Flags = JB__Tk_Using.Flags;
	self->RangeLength = JB__Tk_Using.Length;
	self->Tag = JB__Tk_Using.Tag;
	return self;
}

Message* JB_Msg_ConstructorNormal(Message* self, Syntax Func, JB_String* Name) {
	if (self == nil) {
		self = ((Message*)JB_NewClass(&MessageData));
	}
	JB_Ring_Constructor0(self);
	self->Obj = nil;
	self->Indent = 0;
	self->Name = JB_Incr(Name);
	self->Func = Func;
	self->Position = JB__Tk_Using.Position;
	self->Flags = JB__Tk_Using.Flags;
	self->RangeLength = JB__Tk_Using.Length;
	self->Tag = JB__Tk_Using.Tag;
	return self;
}

Message* JB_Msg_ConstructorRange(Message* self, Message* Parent, Syntax Func, int BytePos, JB_String* name, int RangeLength) {
	if (self == nil) {
		self = ((Message*)JB_NewClass(&MessageData));
	}
	JB_Ring_Constructor(self, Parent);
	self->Obj = nil;
	self->Indent = 0;
	self->Name = JB_Incr(name);
	self->Position = BytePos;
	self->Func = Func;
	self->RangeLength = RangeLength;
	self->Flags = JB__Tk_Using.Flags;
	self->Tag = JB__Tk_Using.Tag;
	return self;
}

void SC_Msg_ConstructorAddNil(Message* self, bool isdot) {
	if (isdot) {
		Message* p = ((Message*)JB_Ring_Parent(self));
		(JB_Ring_FirstSet(self, ((Message*)JB_Ring_First(p))));
		self = p;
	}
	(JB_Ring_FirstSet(self, SC_Msg_CreateNil(self)));
}

bool JB_Msg_ContainsInd(Message* self, Ind p, bool AllowJustAfter) {
	return (self->Position <= p) and ((JB_Msg_After(self) + AllowJustAfter) > p);
}

Message* JB_Msg_Copy(Message* self, Message* pos_msg) {
	Message* rz = nil;
	rz = pos_msg;
	if ((!rz)) {
		rz = self;
	}
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(rz);
		rz = JB_Msg_CopySub(self, pos_msg);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	return rz;
}

void SC_Msg_CopyAllAfter(Message* self, Message* after, Message* copylayer) {
	Message* curr = ((Message*)JB_Ring_NextSib(self));
	while (curr) {
		Message* cpy = SC_Msg_LayerWipeCopy(curr, copylayer);
		(JB_Ring_NextSibSet(after, cpy));
		after = cpy;
		curr = ((Message*)JB_Ring_NextSib(curr));
	};
}

void SC_Msg_CopyAllAfterBefore(Message* self, Message* Before, Message* copylayer) {
	Message* exp = ((Message*)JB_Ring_NextSib(self));
	while (exp) {
		(JB_Ring_PrevSibSet(Before, SC_Msg_LayerWipeCopy(exp, copylayer)));
		exp = ((Message*)JB_Ring_NextSib(exp));
	};
}

void SC_Msg_CopyAllAfterInto(Message* self, Message* into, Message* copylayer) {
	Message* curr = ((Message*)JB_Ring_NextSib(self));
	while (curr) {
		JB_Tree_SyntaxAppend(into, JB_Msg_Copy(curr, copylayer));
		curr = ((Message*)JB_Ring_NextSib(curr));
	};
}

void SC_Msg_CopyAllBefore(Message* self, Message* Before, Message* copylayer) {
	Message* curr = ((Message*)JB_Ring_PrevSib(self));
	while (curr) {
		Message* cpy = JB_Msg_Copy(curr, copylayer);
		(JB_Ring_PrevSibSet(Before, cpy));
		Before = cpy;
		curr = ((Message*)JB_Ring_PrevSib(curr));
	};
}

void SC_Msg_CopyAllBeforeInto(Message* self, Message* into, Message* copylayer) {
	Message* curr = ((Message*)JB_Ring_PrevSib(self));
	while (curr) {
		(JB_Ring_FirstSet(into, JB_Msg_Copy(curr, copylayer)));
		curr = ((Message*)JB_Ring_PrevSib(curr));
	};
}

void SC_Msg_CopyAllInto(Message* self, Message* j, bool wipe) {
	{
		Message* c = ((Message*)JB_Ring_First(self));
		while (c) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(c)));
			JB_Tree_SyntaxAppend(j, JB_Msg_Copy(c, j));
			c = _Nf1;
		};
		;
	};
}

JB_String* JB_Msg_CopyID(Message* self) {
	return JB_LUB[0];
}

Message* JB_Msg_CopySub(Message* self, Message* P) {
	Message* rz = nil;
	rz = JB_Msg_ConstructorCopy(nil, self);
	if (P) {
		rz->Position = P->Position;
		rz->RangeLength = P->RangeLength;
	}
	{
		Message* v = ((Message*)JB_Ring_First(self));
		while (v) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(v)));
			JB_Tree_SyntaxAppend(rz, JB_Msg_CopySub(v, P));
			v = _Nf1;
		};
		;
	}
	;
	return rz;
}

JB_String* SC_Msg_Cpp_Wrapper(Message* self) {
	if (self) {
		if (JB_Msg_EqualsSyx(self, JB_SyxBra, false)) {
			return JB_Msg_FirstName(self);
		}
		return self->Name;
	}
	return JB_LUB[0];
}

Message* SC_Msg_CreateNil(Message* self) {
	Message* rz = nil;
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
	JB_SetRef(rz, (JB_Syx_Msg(JB_SyxThg, JB_LUB[1811])));
	JB_SetRef(rz->Obj, JB_TypeNil);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Msg_CreateOwnBlock(Message* self) {
	Message* rz = nil;
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
	Message* bra = JB_Incr(JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
	JB_SetRef(bra->Obj, self->Obj);
	JB_SetRef(rz, JB_Msg_Msg(bra, JB_SyxArg, JB_LUB[0]));
	JB_FreeIfDead(SC_Msg_ReplaceWith(self, bra));
	SCArg* NewObj = JB_Incr(SC_Msg_SCArg(rz, nil, nil));
	if (NewObj) {
		JB_SetRef(NewObj->TmpMovedOutFor, self);
		(SC_Msg_StatementExprSet(bra, NewObj));
	}
	JB_Decr(bra);
	JB_Decr(NewObj);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Msg_CutifyCopy(Message* self) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Msg_ConstructorCopy(nil, self));
	{
		Message* v = JB_Incr(((Message*)JB_Ring_First(self)));
		while (v) {
			Message* _Nf1 = JB_Incr((((Message*)JB_Ring_NextSib(v))));
			if (JB_Msg_EqualsSyx(v, JB_SyxArg, false)) {
				0;
			}
			 else if (SC_Msg_IsReffer(v)) {
				Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(v)));
				Message* vll = JB_Incr(((Message*)JB_Ring_Last(_tmPf2)));
				JB_Decr(_tmPf2);
				if (vll) {
					Message* _tmPf3 = JB_Incr(SC_Msg_CutifyCopy(vll));
					JB_Tree_SyntaxAppend(rz, _tmPf3);
					JB_Decr(_tmPf3);
				}
				 else {
					debugger;
				}
				JB_Decr(vll);
			}
			 else {
				Message* _tmPf4 = JB_Incr(SC_Msg_CutifyCopy(v));
				JB_Tree_SyntaxAppend(rz, _tmPf4);
				JB_Decr(_tmPf4);
			}
			JB_SetRef(v, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(v);
		;
	}
	;
	SCFunction* fn = JB_Incr(SC_Msg_MsgFunc(rz));
	if (fn) {
		SCClass* cls = JB_Incr(fn->Cls);
		JB_String* modname = JB_Incr(JB_LUB[0]);
		SCNode* space = JB_Incr(fn->Parent);
		if (JB_Object_FastIsa(space, &SCModuleData)) {
			JB_SetRef(modname, ((SCModule*)space)->Name);
		}
		if (((bool)cls) or JB_Str_Exists(modname)) {
			Message* name = JB_Incr(((Message*)JB_Ring_First(rz)));
			if (JB_Msg_EqualsSyx(name, JB_SyxThg, false)) {
				Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_NextSib(name)));
				Message* prm = JB_Incr(_tmPf5);
				JB_Decr(_tmPf5);
				JB_Msg_BecomeStr(rz, JB_SyxDot, fn->Name);
				if (cls) {
					Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_First(prm)));
					(JB_Ring_FirstSet(rz, _tmPf6));
					JB_Decr(_tmPf6);
				}
				 else if (space != SC__Comp_program) {
					Message* mod = JB_Incr(JB_Syx_Msg(JB_SyxThg, modname));
					JB_SetRef(mod->Obj, space);
					(JB_Ring_FirstSet(rz, mod));
					JB_Decr(mod);
				}
				if ((!JB_Ring_HasChildren(prm))) {
					prm->Func = JB_SyxEmb;
				}
				JB_Decr(prm);
				JB_Tree_Remove(name);
			}
			JB_Decr(name);
		}
		JB_Decr(cls);
		JB_Decr(modname);
		JB_Decr(space);
	}
	JB_Decr(fn);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Msg_DclExp(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxDecl, false)) {
		return ((Message*)JB_Tree_Second(self));
	}
	return self;
}

void JB_Msg_Decl__(Message* self, FastString* fs) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	JB_FS_AppendByte(fs, '|');
	JB_FS_SyntaxAppend(fs, ch);
	JB_FS_AppendByte(fs, '|');
	JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
	while (ch) {
		JB_FS_AppendByte(fs, ' ');
		JB_FS_SyntaxAppend(fs, ch);
		JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
	};
	JB_Decr(ch);
}

Message* SC_Msg_DeclName(Message* self) {
	Message* dcl = SC_Msg_DclExp(self);
	if (JB_Msg_EqualsSyx(dcl, JB_SyxRel, false)) {
		return JB_Msg_NeedSyx(dcl, JB_SyxThg);
	}
	if (JB_Msg_EqualsSyx(dcl, JB_SyxThg, false)) {
		return dcl;
	}
	if (JB_Msg_EqualsSyx(dcl, JB_SyxEmb, false)) {
		JB_Msg_SyntaxExpect(self, nil);
		return nil;
	}
	return nil;
}

bool JB_Msg_DeepEquals(Message* self, Message* B, bool Aware) {
	Message* A = self;
	Message* A2 = ((Message*)JB_Ring_FlatAfter(self));
	Message* B2 = ((Message*)JB_Ring_FlatAfter(B));
	while (true) {
		bool ADone = A == A2;
		bool BDone = B == B2;
		if (ADone and BDone) {
			return true;
		}
		if ((ADone != BDone) or ((!JB_Msg_ShallowEquals(A, B, Aware)))) {
			return false;
		}
		A = ((Message*)JB_Ring_FlatNext0(A));
		B = ((Message*)JB_Ring_FlatNext0(B));
	};
}

Message* SC_Msg_Deepest(Message* self, Syntax Tmp, JB_String* name) {
	{
		Message* ch = ((Message*)JB_Ring_First(self));
		while (ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(ch)));
			Message* best = SC_Msg_Deepest(ch, Tmp, name);
			if (best) {
				return best;
			}
			ch = _Nf1;
		};
		;
	}
	;
	if ((JB_Msg_EqualsSyx(self, JB_SyxTmp, false)) and (JB_Msg_SyntaxEquals(self, name, false))) {
		return self;
	}
	return nil;
}

int SC_Msg_DeprecatedClassOption(Message* self, JB_String* name, JB_String* Kind) {
	Message* place = JB_Incr(JB_Msg_FindSyxName(self, JB_SyxTmp, name, false));
	if ((!place)) {
		JB_Decr(place);
		return 0;
	}
	int num = 1;
	if ((!JB_Str_Equals(Kind, JB_LUB[215], false))) {
		Message* ch = JB_Incr(((Message*)JB_Ring_First(place)));
		if ((!(((bool)ch) and (JB_Msg_Expect(ch, JB_SyxThg, nil) and (JB_Msg_SyntaxEquals(ch, Kind, true)))))) {
			JB_Decr(ch);
			JB_Decr(place);
			return 0;
		}
		Message* num_msg = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
		JB_Decr(ch);
		if (num_msg) {
			JB_Msg_Expect(num_msg, JB_SyxNum, nil);
			num = JB_Msg_Int(num_msg, 0);
		}
		JB_Decr(num_msg);
	}
	JB_Tree_Remove(place);
	JB_Decr(place);
	return num;
}

void JB_Msg_Destructor(Message* self) {
	JB_Clear(self->Name);
	JB_Clear(self->Obj);
	JB_Ring_Destructor(self);
}

Dictionary* JB_Msg_Dict(Message* self, bool DoCount) {
	Dictionary* rz = ((Dictionary*)nil);
	rz = JB_Dict_Constructor(nil);
	int i = 0;
	{
		Message* s = ((Message*)JB_Ring_First(self));
		while (s) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(s)));
			(JB_Dict_ValueSet(rz, s->Name, s));
			if (DoCount) {
				s->Position = i++;
			}
			s = _Nf1;
		};
		;
	}
	;
	return rz;
}

bool SC_Msg_DoesAnything(Message* self) {
	if (self) {
		if ((!((!JB_Msg_EqualsSyx(self, JB_SyxThg, false)) and ((!JB_Msg_EqualsSyx(self, JB_SyxNum, false)) and ((!JB_Msg_EqualsSyx(self, JB_SyxStr, false)) and (!JB_Msg_EqualsSyx(self, JB_SyxChar, false))))))) {
			return nil;
		}
		return true;
	}
	return false;
}

void JB_Msg_Dot__(Message* self, FastString* fs) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	if (ch) {
		JB_FS_SyntaxAppend(fs, ch);
	}
	JB_FS_AppendByte(fs, '.');
	JB_FS_AppendString(fs, self->Name);
	if (ch) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
		JB_FS_SyntaxAppend(fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(ch);
}

SCDecl* SC_Msg_DotMustBeProperty(Message* self) {
	JB_Object* obj = self->Obj;
	if (JB_Object_OperatorMustBe(obj, &SCDeclData)) {
		if (JB_Str_Exists(((SCDecl*)obj)->Name)) {
			return ((SCDecl*)obj);
		}
		SCDecl* Backup = ((SCDecl*)JB_Object_FastAs(((Message*)JB_Ring_Last(self))->Obj, &SCDeclData));
		if (Backup) {
			if (JB_Str_Exists(Backup->Name)) {
				return Backup;
			}
		}
		if (true) {
			JB_Msg_SyntaxExpect(self, JB_LUB[1019]);
		}
	}
	return nil;
}

SCObject* SC_Msg_DotSpace(Message* self, SCNode* name_space) {
	SCObject* rz = nil;
	if ((!JB_Msg_EqualsSyx(self, JB_SyxThg, false))) {
		return SC_TypeOfExprModulesOK(self, name_space, nil);
	}
	rz = SC_Base_LookUpVar(name_space, self->Name, self, nil);
	JB_SetRef(self->Obj, rz);
	return rz;
}

DotUseType SC_Msg_DotType(Message* self) {
	if (self->Func == JB_SyxDot) {
		JB_Object* d = self->Obj;
		if (JB_Object_FastIsa(d, &SCDeclData)) {
			return (SC_Decl_SyntaxIs(((SCDecl*)d), kSC__SCDeclInfo_Property)) * ((bool)kSC__DotUseType_Property);
		}
	}
	return 0;
}

void JB_Msg_Dummy(Message* self, FastString* fs) {
}

void SC_Msg_ElseNeverFires(Message* self) {
	Message* arg = ((Message*)JB_Ring_NextSib(self));
	Message* after = ((Message*)JB_Ring_NextSib(arg));
	if ((!after)) {
		Message* p = ((Message*)JB_Ring_Parent(self));
		if (p) {
			SC_Msg_SafeRemove(p, JB_SyxSheb);
		}
		return;
	}
	if (JB_Msg_EqualsSyx(arg, JB_SyxArg, false)) {
		JB_Tree_Clear(arg);
		arg->Tag = (arg->Tag | kSC__SCBlockage_Return);
	}
	JB_FreeIfDead(SC_Msg_NeedBra(self));
}

void JB_Msg_Emb__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
	if ((!JB_Ring_HasChildren(self))) {
		return;
	}
	JB_Msg_RenderWithSpaces(self, fs, nil);
}

void JB_Msg_ERel__(Message* self, FastString* fs) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	JB_FS_SyntaxAppend(fs, ch);
	JB_FS_AppendByte(fs, ' ');
	JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	JB_FS_SyntaxAppend(fs, ch);
	JB_FS_AppendString(fs, JB_LUB[588]);
	JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	JB_FS_SyntaxAppend(fs, ch);
	JB_Decr(ch);
}

bool JB_Msg_Expect(Message* self, Syntax type, JB_String* name) {
	if ((!self)) {
		return nil;
	}
	if ((!type) or (self->Func == type)) {
		if ((name == nil) or ((JB_Str_Equals(self->Name, name, true)))) {
			return true;
		}
	}
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(fs, JB_LUB[846]);
	if (type) {
		JB_String* _tmPf0 = JB_Incr(JB_Syx_LongName(type));
		JB_FS_AppendString(fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_FS_MsgErrorName(fs, name);
	JB_FS_AppendString(fs, JB_LUB[305]);
	JB_String* _tmPf1 = JB_Incr(JB_Syx_LongName(self->Func));
	JB_FS_AppendString(fs, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_MsgErrorName(fs, self->Name);
	if (true) {
		JB_String* _tmPf2 = JB_Incr(JB_FS_SyntaxCast(fs));
		JB_Msg_SyntaxExpect(self, _tmPf2);
		JB_Decr(_tmPf2);
	}
	JB_Decr(fs);
	return false;
}

bool SC_Msg_ExpectClass(Message* self, SCDecl* slf, SCClass* Cls) {
	return ((bool)JB_FreeIfDead(SC_Decl_ExpectMatch(slf, Cls->TypeNormal, 0, self, self)));
}

void SC_Msg_ExpectEmpty(Message* self) {
	Message* f = ((Message*)JB_Ring_First(self));
	if (f) {
		if (true) {
			JB_Msg_SyntaxExpect(f, nil);
		}
	}
}

bool SC_Msg_ExpectInt(Message* self, SCDecl* type) {
	if ((!JB_TC_IsInt(type->Type->TypeInfo))) {
		JB_Msg_SyntaxExpect(self, JB_LUB[854]);
		return nil;
	}
	return true;
}

bool JB_Msg_ExpectLast(Message* self, JB_String* err) {
	if (self) {
		Message* N = ((Message*)JB_Ring_NextSib(self));
		if (N) {
			JB_Msg_SyntaxExpect(N, err);
		}
		 else {
			return true;
		}
	}
	return false;
}

bool SC_Msg_ExpectMatch(Message* self, SCNode* name_space, SCClass* With) {
	SCDecl* T = SC_TypeOfExprNeeded(self, name_space);
	if (T) {
		return SC_Msg_ExpectClass(self, T, With);
	}
	return false;
}

Message* SC_Msg_ExpectParamsTransform(Message* self, int P, Message* errnode, JB_String* Type) {
	JB_Incr(Type);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(errnode);
	Message* L = JB_Incr(self);
	Message* On = JB_Incr(L);
	if ((!JB_Str_Equals(Type, JB_LUB[2044], false))) {
		JB_SetRef(Type, JB_LUB[1636]);
	}
	if ((!L)) {
		JB_SetRef(On, JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[1811]));
	}
	 else if ((JB_Msg_EqualsSyx(L, JB_SyxList, false)) or ((JB_Msg_EqualsSyx(L, JB_SyxBra, false)) or (JB_Msg_EqualsSyx(L, JB_SyxPrm, false)))) {
		L->Func = JB_SyxPrm;
		JB_SetRef(On, ((Message*)JB_Ring_First(L)));
	}
	 else {
		JB_SetRef(L, nil);
	}
	Message* l2 = JB_Incr(L);
	if ((!JB_Msg_EqualsSyx(L, JB_SyxPrm, false))) {
		JB_SetRef(l2, JB_Syx_Msg(JB_SyxPrm, JB_LUB[0]));
		JB_Tree_SyntaxAppend(l2, L);
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1977], Type));
	JB_Decr(Type);
	Message* tmp = JB_Incr(JB_Syx_OperatorPlus(JB_SyxDot, (_tmPf1)));
	JB_Decr(_tmPf1);
	JB_Tree_SyntaxAppend(tmp, On);
	JB_Decr(On);
	JB_Tree_SyntaxAppend(tmp, l2);
	JB_Decr(l2);
	JB_SetRef(L, tmp);
	JB_Decr(tmp);
	L->Position = P;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_SafeDecr(L);
	JB_MsgPos_Destructor((&_usingf0));
	return L;
}

bool JB_Msg_ExpectString(Message* self) {
	if (JB_Msg_IsString(self)) {
		return true;
	}
	if (true) {
		JB_Msg_SyntaxExpect(self, JB_LUB[1093]);
	}
	return false;
}

SCFunction* SC_Msg_ExpFunc(Message* self) {
	Message* it = ((Message*)JB_Ring_Last(SC_Msg_UnBra(self)));
	if (it) {
		JB_Object* fn = it->Obj;
		if (JB_Object_FastIsa(fn, &SCFunctionData)) {
			return ((SCFunction*)fn);
		}
	}
	return nil;
}

void JB_Msg_Export(Message* self, FastString* fs) {
	FP_fpMsgRender fn = (JB_Syx_ExportAddr(self->Func));
	(fn)(self, fs);
}

Message* SC_Msg_FailOrCopy(Message* self, Message* p) {
	if (JB_Msg_EqualsSyx(self, JB_SyxThg, false)) {
		return JB_Msg_Copy(self, nil);
	}
	if (true) {
		JB_Msg_SyntaxExpect(p, JB_LUB[1132]);
	}
	return nil;
}

Message* SC_Msg_FalsifyNil(Message* self) {
	SCDecl* ret = SC__Func_CurrFunc->ReturnType;
	if (((bool)ret) and SC_Decl_IsNormal(ret)) {
		return SC_Class_Falsify(ret->Type, self);
	}
	self->Func = JB_SyxThg;
	JB_SetRef(self->Obj, JB_TypeNil);
	return nil;
}

SCDecl* SC_Msg_FastDecl(Message* self) {
	SCDecl* obj = ((SCDecl*)self->Obj);
	if (obj) {
		JB_Object* l = obj->IsLookupOnly;
		if ((!l)) {
			return obj;
		}
		if (JB_Object_FastIsa(l, &SCDeclData)) {
			return ((SCDecl*)l);
		}
		return obj;
	}
	if (true) {
		JB_Msg_SyntaxExpect(self, JB_LUB[777]);
	}
	return JB_TypeVoid;
}

void JB_Msg_File__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
	self->Indent++;
	{
		Message* ch = ((Message*)JB_Ring_First(self));
		while (ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(ch)));
			JB_FS_LineIndent(fs);
			JB_FS_SyntaxAppend(fs, ch);
			ch = _Nf1;
		};
		;
	}
	;
	self->Indent--;
}

JB_String* SC_Msg_FileLocation(Message* self) {
	SCFile* _tmPf0 = SC_Msg_SCFile(self);
	if ((!JB_File_SyntaxCast(_tmPf0))) {
		return JB_LUB[0];
	}
	return JB_File_Path(_tmPf0);
}

JB_String* JB_Msg_FilePath(Message* self) {
	JB_Object* O = JB_ObjLayer(self)->Obj;
	if ((!false) and (JB_Object_Isa(O, &JB_FileData))) {
		return JB_File_Path(((JB_File*)O));
	}
	if (JB_Object_Isa(O, &JB_StringData)) {
		return ((JB_String*)O);
	}
	return JB_LUB[0];
}

Message* JB_Msg_FindSyx(Message* self, Syntax s) {
	{
		Message* ch = ((Message*)JB_Ring_First(self));
		while (ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(ch)));
			if (JB_Msg_EqualsSyx(ch, s, false)) {
				return ch;
			}
			ch = _Nf1;
		};
		;
	}
	;
	return nil;
}

Message* JB_Msg_FindSyxName(Message* self, Syntax s, JB_String* name, bool Err) {
	{
		Message* ch = ((Message*)JB_Ring_First(self));
		while (ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(ch)));
			if ((JB_Msg_EqualsSyx(ch, s, false)) and (JB_Msg_SyntaxEquals(ch, name, true))) {
				return ch;
			}
			ch = _Nf1;
		};
		;
	}
	;
	if (Err) {
		JB_Msg_CantFind(self, s, name, nil);
	}
	return nil;
}

Message* JB_Msg_FindName(Message* self, JB_String* name) {
	{
		Message* ch = ((Message*)JB_Ring_First(self));
		while (ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(ch)));
			if (JB_Msg_SyntaxEquals(ch, name, true)) {
				return ch;
			}
			ch = _Nf1;
		};
		;
	}
	;
	return nil;
}

Array* JB_Msg_FindAll(Message* self, Syntax fn, JB_String* name) {
	Array* rz = ((Array*)JB_Array_Constructor0(nil));
	{
		Message* s = ((Message*)JB_Ring_First(self));
		while (s) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(s)));
			if ((s->Func == fn) and (JB_Str_Equals(s->Name, name, false))) {
				JB_Array_SyntaxAppend(rz, s);
			}
			s = _Nf1;
		};
		;
	}
	;
	return rz;
}

JB_String* SC_Msg_FindAndRemove(Message* self, JB_String* name, bool NothingOK, bool IsClass) {
	Message* _tmPf0 = JB_Incr(SC_Msg_FindAndRemoveSub(self, name, NothingOK, IsClass));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return JB_LUB[0];
	}
	JB_String* _tmPf1 = JB_Incr(_tmPf0->Name);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

Message* SC_Msg_FindAndRemove2(Message* self, Message* place, bool NothingOK, bool IsClass) {
	JB_Tree_Remove(place);
	Message* ch = JB_Incr(((Message*)JB_Ring_First(place)));
	if (NothingOK and (!ch)) {
		JB_SetRef(place->Name, JB_LUB[0]);
		JB_Decr(ch);
		return place;
	}
	if ((JB_Msg_EqualsSyx(ch, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(ch, JB_SyxBra, false))) {
		if (IsClass) {
			Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(self)));
			if ((!SC_Msg_OperatorIsTmp(_tmPf0, JB_LUB[1759]))) {
				JB_Msg_SyntaxExpect(ch, JB_LUB[1148]);
				JB_Decr(_tmPf0);
				JB_Decr(ch);
				return nil;
			}
			JB_Decr(_tmPf0);
		}
		JB_SafeDecr(ch);
		return ch;
	}
	JB_Decr(ch);
	JB_FreeIfDead(JB_Msg_NeedSyx(place, JB_SyxThg));
	return nil;
}

Message* SC_Msg_FindAndRemoveSub(Message* self, JB_String* name, bool NothingOK, bool IsClass) {
	Message* place = JB_Incr(JB_Msg_FindSyxName(self, JB_SyxTmp, name, false));
	if (place) {
		Message* _tmPf0 = JB_Incr(SC_Msg_FindAndRemove2(self, place, NothingOK, IsClass));
		JB_Decr(place);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(place);
	return nil;
}

Message* SC_Msg_FindDestructor(Message* self) {
	{
		Message* c = ((Message*)JB_Ring_First(self));
		while (c) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(c)));
			if (JB_Msg_EqualsSyx(c, JB_SyxFunc, false)) {
				Message* cl = ((Message*)JB_Ring_Last(c));
				if (cl) {
					SCFunction* fn = SC_Msg_AsFunc(cl);
					if (fn) {
						if (SC_Func_SyntaxIs(fn, kSC__FunctionType_Destructor)) {
							return c;
						}
					}
				}
			}
			c = _Nf1;
		};
		;
	}
	;
	return nil;
}

Message* JB_Msg_FindNested(Message* self, Syntax fn, JB_String* name, bool Err) {
	{
		Message* curr = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)(curr)) and (curr != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(curr)));
			if ((JB_Msg_EqualsSyx(curr, fn, false)) or (fn == nil)) {
				if ((name == nil) or (JB_Msg_SyntaxEquals(curr, name, true))) {
					return curr;
				}
			}
			curr = _N_f2;
		};
		;
	}
	;
	if (Err) {
		JB_Msg_CantFind(self, fn, name, nil);
	}
	return nil;
}

Message* JB_Msg_FindNotInserted(Message* self) {
	{
		Message* c = self;
		while (c) {
			if (c->Position > -1) {
				return c;
			}
			c = ((Message*)JB_Ring_Parent(c));
		};
		;
	}
	;
	return self;
}

Message* SC_Msg_FindPos(Message* self, int fr, int len) {
	Message* _tmP0 = JB_Incr(SC_Msg_FindPosSub(self, fr, len, true));
	if ((!_tmP0)) {
		JB_SetRef(_tmP0, SC_Msg_FindPosSub(self, fr, len, false));
	}
	JB_SafeDecr(_tmP0);
	return _tmP0;
}

Message* SC_Msg_FindPosSub(Message* self, int fr, int len, bool Exact) {
	Message* rz = nil;
	int Strength = 1;
	{
		Message* ch = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)(ch)) and (ch != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(ch)));
			if (ch->Position == fr) {
				int CurrStrength = (ch->RangeLength == len) + (!Exact);
				if (CurrStrength >= Strength) {
					if (!(JB_Msg_SyntaxIs(ch, kJB__MsgParseFlags_Inserted))) {
						return SC_Msg_UnBra(ch);
					}
					Strength = CurrStrength;
					rz = ch;
				}
			}
			ch = _N_f2;
		};
		;
	}
	;
	return rz;
}

Message* SC_Msg_FindRef(Message* self, SCFunction* fn, JB_String* name) {
	{
		Message* curr = self;
		while (curr) {
			if (JB_Msg_EqualsSyx(curr, JB_SyxFunc, false)) {
				Message* prms = ((Message*)JB_Ring_Last(curr));
				if (((bool)(prms)) and ((prms->Obj == fn) and (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(prms)), name)))) {
					return curr;
				}
			}
			curr = ((Message*)JB_Ring_NextSib(curr));
		};
		;
	}
	;
	return nil;
}

Message* SC_Msg_FindShader(Message* self, JB_String* TypeName) {
	Message* U = JB_Incr(JB_Msg_FindSyxName(self, JB_SyxTmp, JB_LUB[2006], false));
	if ((!U)) {
		JB_Decr(U);
		return nil;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(U)));
	Message* C = JB_Incr(SC_Msg_ModelType(_tmPf0));
	JB_Decr(_tmPf0);
	if ((!C)) {
		JB_Decr(C);
		JB_Decr(U);
		return nil;
	}
	JB_String* N = JB_Incr(JB_Str_LowerCase(C->Name));
	if (JB_Str_Last(N, 0) == 's') {
		JB_SetRef(N, JB_Str_Range(N, 0, JB_Str_Length(N) - 1));
	}
	JB_String* F = JB_Incr(((JB_StringC*)JB_Dict_ValueStr(SC__SCGame3D_Types, N)));
	JB_Decr(N);
	if ((!JB_Str_Exists(F))) {
		JB_Msg_SyntaxExpect(U, JB_LUB[660]);
		JB_Decr(F);
		JB_Decr(C);
		JB_Decr(U);
		return nil;
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(TypeName, JB_LUB[371]));
	if ((!SC_SCGame3D__NeedShader(_tmPf1))) {
		JB_Decr(_tmPf1);
		JB_Decr(F);
		JB_Decr(C);
		JB_Decr(U);
		return nil;
	}
	JB_Decr(_tmPf1);
	if (JB_Str_Length(F) >= 2) {
		JB_SetRef(F, JB_Str_Range(F, 0, 1));
	}
	 else {
		JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(TypeName, JB_LUB[386]));
		if ((!SC_SCGame3D__NeedShader(_tmPf2))) {
			JB_Decr(_tmPf2);
			JB_Decr(F);
			JB_Decr(C);
			JB_Decr(U);
			return nil;
		}
		JB_Decr(_tmPf2);
	}
	JB_SetRef(C->Name, F);
	JB_Decr(F);
	JB_SetRef(C, ((Message*)JB_Tree_Get(U, 0)));
	JB_Tree_Remove(U);
	JB_Decr(U);
	JB_SafeDecr(C);
	return C;
}

Message* JB_Msg_FindTightest(Message* self, int pos, bool named, bool SamePosition) {
	Message* rz = nil;
	int size = JB_int__Max();
	{
		Message* ch = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)(ch)) and (ch != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(ch)));
			u16 r = ch->RangeLength;
			if ((!r)) {
				0;
			}
			 else if ((JB_Msg_ContainsInd(ch, pos, true)) and ((!named) or (JB_Str_Exists(ch->Name) or ((JB_Msg_EqualsSyx(ch, JB_SyxDot, false)) or (JB_Msg_EqualsSyx(ch, JB_SyxSDot, false)))))) {
				if (SamePosition and (ch->Position != pos)) {
					0;
				}
				 else if ((r < size) or ((rz != nil) and ((pos == rz->Position) and (pos == JB_Msg_After(ch))))) {
					rz = ch;
					size = r;
				}
			}
			ch = _N_f2;
		};
		;
	}
	;
	return rz;
}

JB_String* JB_Msg_FirstName(Message* self) {
	Message* f = ((Message*)JB_Ring_First(self));
	if (f) {
		return f->Name;
	}
	return JB_LUB[0];
}

void SC_Msg_FixElseif(Message* self) {
	Message* curr = JB_Incr(((Message*)JB_Ring_NextSib(self)));
	Message* f = JB_Incr(((Message*)JB_Ring_First(self)));
	bool needarg = ((bool)f) and ((!({
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(f)));
		bool _tmPf1 = JB_Msg_EqualsSyx(_tmPf2, JB_SyxArg, false);
		JB_Decr(_tmPf2);
		 _tmPf1;
	})));
	JB_Decr(f);
	while (SC_Msg_OperatorIsTmp(curr, JB_LUB[1622]) or SC_Msg_OperatorIsTmp(curr, JB_LUB[1624])) {
		Message* n = JB_Incr(((Message*)JB_Ring_NextSib(curr)));
		if (needarg) {
			if (true) {
				MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
				JB_Msg_AppendSyx(self, JB_SyxArg, JB_LUB[0]);
				needarg = false;
				JB_MsgPos_SyntaxUsingComplete((&_usingf0));
				JB_MsgPos_Destructor((&_usingf0));
			}
		}
		JB_Tree_SyntaxAppend(self, curr);
		JB_SetRef(curr, n);
		JB_Decr(n);
	};
	JB_Decr(curr);
}

void SC_Msg_FixErl(Message* self) {
	Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_First(self)));
	Message* ch = JB_Incr(_tmPf5);
	JB_Decr(_tmPf5);
	Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	Message* opp = JB_Incr(_tmPf6);
	JB_Decr(_tmPf6);
	Message* last = JB_Incr(((Message*)JB_Ring_NextSib(opp)));
	JB_String* name = JB_Incr(opp->Name);
	if (((JB_Str_Equals(name, JB_LUB[567], false))) and ((!({
		Message* _tmPf8 = JB_Incr(SC_Msg_NiceParent(self));
		bool _tmPf7 = JB_Msg_EqualsSyx(_tmPf8, JB_SyxArg, false);
		JB_Decr(_tmPf8);
		 _tmPf7;
	})))) {
		Array* _tmPf1 = JB_Incr((JB_Array_Constructor0(nil)));
		JB_Array_SyntaxAppend(_tmPf1, ch);
		Message* _tmPf9 = JB_Incr(((Message*)JB_Ring_Last(self)));
		JB_Array_SyntaxAppend(_tmPf1, _tmPf9);
		JB_Decr(_tmPf9);
		JB_Msg_BecomeMacro(self, SC__Macros_InitExpand, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else {
		//using;
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(opp);
		while (JB_Msg_OperatorIn(self, JB_SyxBra)) {
			Message* _tmPf10 = JB_Incr(((Message*)JB_Ring_Parent(self)));
			JB_FreeIfDead(SC_Msg_ReplaceWith(_tmPf10, self));
			JB_Decr(_tmPf10);
		};
		bool IsBitOr = ((JB_Str_Equals(name, JB_LUB[567], false)));
		self->Func = JB_SyxRel;
		JB_SetRef(opp->Name, JB_LUB[587]);
		JB_SetRef(ch, JB_Msg_Copy(ch, nil));
		if (IsBitOr) {
			Message* new_if = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1698])));
			Message* _tmPf11 = ({
				Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[215])));
				Message* _tmPf12 = JB_Incr(SC_Msg_NeedBra(ch));
				JB_Tree_SyntaxAppend(__imPf2, _tmPf12);
				JB_Decr(_tmPf12);
				JB_SafeDecr(nil);
				 __imPf2;
			});
			JB_Tree_SyntaxAppend(new_if, _tmPf11);
			JB_Decr(_tmPf11);
			(JB_Ring_PrevSibSet(self, new_if));
			Message* _tmPf13 = JB_Incr(JB_Msg_Msg(new_if, JB_SyxArg, JB_LUB[0]));
			JB_Decr(new_if);
			JB_Tree_SyntaxAppend(_tmPf13, self);
			JB_Decr(_tmPf13);
		}
		 else {
			if (JB_Msg_EqualsSyx(last, JB_SyxRel, false)) {
				JB_SetRef(last, ({
					Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
					JB_Tree_SyntaxAppend(__imPf3, last);
					JB_SafeDecr(__imPf3);
					 __imPf3;
				}));
			}
			Message* _tmPf14 = ({
				Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
				JB_Tree_SyntaxAppend(__imPf4, ch);
				Message* _tmPf15 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, name));
				JB_Tree_SyntaxAppend(__imPf4, (_tmPf15));
				JB_Decr(_tmPf15);
				JB_Tree_SyntaxAppend(__imPf4, last);
				JB_SafeDecr(nil);
				 __imPf4;
			});
			(JB_Ring_NextSibSet(opp, _tmPf14));
			JB_Decr(_tmPf14);
		}
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(ch);
	JB_Decr(opp);
	JB_Decr(last);
	JB_Decr(name);
}

void SC_Msg_FixMultiArr(Message* self) {
	{
		Message* item = ((Message*)JB_Ring_First(self));
		while (item) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(item)));
			Message* kkey = ((Message*)JB_Ring_First(item));
			if (JB_Msg_EqualsSyx(kkey, JB_SyxList, false)) {
				Message* val = ((Message*)JB_Ring_NextSib(kkey));
				if (val) {
					while ((true)) {
						Message* c = ((Message*)JB_Ring_First(kkey));
						if ((!c)) {
							break;
						}
						Message* i2 = JB_Syx_Msg(JB_SyxItem, JB_LUB[0]);
						JB_Tree_SyntaxAppend(i2, c);
						JB_Tree_SyntaxAppend(i2, JB_Msg_Copy(val, nil));
						(JB_Ring_PrevSibSet(item, i2));
					};
				}
				JB_Tree_Remove(item);
			}
			item = _Nf1;
		};
		;
	};
}

double JB_Msg_Float(Message* self) {
	if (self) {
		return JB_Str_TextDouble(self->Name, self);
	}
	return 0.0f;
}

float JB_Msg_Float32(Message* self) {
	double d = JB_Msg_Float(self);
	if (fabs(d) > JB_f__max()) {
		JB_Str_SyntaxExpect(JB_LUB[880]);
		return 0;
	}
	return d;
}

void JB_Msg_FSListArg(Message* self, FastString* fs, bool AddLine) {
	bool hasp = ((Message*)JB_Ring_Parent(self)) != nil;
	fs->Indent = (fs->Indent + hasp);
	AddLine = ((bool)(AddLine | hasp));
	if (JB_Str_Exists(self->Name)) {
		AddLine = true;
		JB_FS_LineIndent(fs);
		JB_FS_AppendByte(fs, '^');
		JB_FS_AppendQuotedEscape(fs, self->Name);
	}
	{
		Message* ch = ((Message*)JB_Ring_First(self));
		while (ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(ch)));
			if (AddLine) {
				JB_FS_LineIndent(fs);
			}
			JB_FS_SyntaxAppend(fs, ch);
			AddLine = true;
			ch = _Nf1;
		};
		;
	}
	;
	fs->Indent = (fs->Indent - hasp);
	if (hasp and (JB_FS_Last(fs, 0) != '\n')) {
		JB_FS_AppendByte(fs, '\n');
	}
}

void JB_Msg_FSListSep(Message* self, FastString* fs, JB_String* sep) {
	{
		Message* ch = ((Message*)JB_Ring_First(self));
		Message* _firstf2 = ch;
		while (ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(ch)));
			if (_firstf2 != ch) {
				JB_FS_AppendString(fs, sep);
			}
			//start;
			JB_FS_SyntaxAppend(fs, ch);
			ch = _Nf1;
		};
		;
	};
}

Message* SC_Msg_FullAfter(Message* self) {
	Message* P = ((Message*)JB_Ring_Parent(self));
	Message* N = ((Message*)JB_Ring_NextSib(P));
	while (N) {
		P = N;
		N = ((Message*)JB_Ring_NextSib(P));
	};
	return ((Message*)JB_Ring_FlatAfter(P));
}

void JB_Msg_Func__(Message* self, FastString* fs) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	JB_FS_SyntaxAppend(fs, ch);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	JB_Decr(ch);
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
}

JB_String* JB_Msg_FuncName(Message* self) {
	JB_String* _tmPf0 = JB_Incr(JB_Syx_LongName(self->Func));
	JB_String* _tmPf1 = JB_Incr(JB_Str_LowerCase(_tmPf0));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int SC_Msg_FuncPos(Message* self, SCFunction* fn) {
	{
		Message* ss = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)(ss)) and (ss != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(ss)));
			if (ss->Obj == fn) {
				return ss->Position;
			}
			ss = _N_f2;
		};
		;
	}
	;
	return self->Position;
}

void SC_Msg_FuncWrap(Message* self, Message* fnc) {
	(JB_Ring_PrevSibSet(self, fnc));
	JB_Tree_SyntaxAppend(((Message*)JB_Ring_Last(fnc)), self);
}

int SC_Msg_GetAddressOf(Message* self, SCDecl* Type, bool WasCArray) {
	if ((!self)) {
		return kJB_kNeedsAddressOf;
	}
	Message* Addr = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[242])));
	JB_FreeIfDead(SC_Msg_ReplaceWith(self, Addr));
	Message* inside = JB_Incr(self);
	if (WasCArray) {
		JB_SetRef(inside, ({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxAcc, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf0, self);
			Message* _tmPf2 = ({
				Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxArr, JB_LUB[0])));
				Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxNum, JB_LUB[441]));
				JB_Tree_SyntaxAppend(__imPf1, (_tmPf3));
				JB_Decr(_tmPf3);
				JB_SafeDecr(nil);
				 __imPf1;
			});
			JB_Tree_SyntaxAppend(__imPf0, _tmPf2);
			JB_Decr(_tmPf2);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
	}
	JB_Tree_SyntaxAppend(Addr, inside);
	JB_Decr(inside);
	JB_SetRef(Addr->Obj, Type);
	JB_Decr(Addr);
	return kJB_kAddressOfMatch;
}

Message* SC_Msg_GetASMFunc(Message* self) {
	if (SC_Msg_Reg(self) >= 0) {
		Message* op = JB_Msg_NextOfName(self, JB_SyxOpp, JB_LUB[587]);
		if ((!op)) {
			return nil;
		}
		Message* Adj = JB_Msg_NextOf(op, JB_SyxAdj);
		if ((!Adj)) {
			return nil;
		}
		return JB_Msg_NeedSyx(Adj, JB_SyxFunc);
	}
	return nil;
}

Message* SC_Msg_GetDclName(Message* self, bool IsConstructor) {
	Message* rz = nil;
	if (IsConstructor) {
		if ((!JB_Tree_SyntaxEquals(self, 2, false))) {
			JB_Msg_SyntaxExpect(self, JB_LUB[787]);
			return nil;
		}
	}
	rz = JB_Msg_NeedSyxInt(self, JB_SyxNil, 1);
	if (JB_Msg_EqualsSyx(rz, JB_SyxRel, false)) {
		rz = JB_Msg_NeedSyx(rz, JB_SyxThg);
	}
	if ((!rz)) {
		if (true) {
			JB_Msg_SyntaxExpect(self, JB_LUB[1068]);
		}
	}
	return rz;
}

SCFunction* SC_Msg_GetFunctionPointer(Message* self) {
	SCDecl* d = ((SCDecl*)JB_Object_FastAs(self->Obj, &SCDeclData));
	if ((!d)) {
		return nil;
	}
	if (SC_Decl_IsNormal(d)) {
		SCClass* t = d->Type;
		return t->FuncProto;
	}
	return nil;
}

Message* SC_Msg_GetMarker(Message* self, JB_String* s) {
	{
		Message* a = ((Message*)JB_Ring_First(self));
		while (a) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(a)));
			if (SC_Msg_OperatorIsTmp(a, s)) {
				return a;
			}
			a = _Nf1;
		};
		;
	}
	;
	return nil;
}

Message* SC_Msg_GetTypeLimiter(Message* self) {
	if ((!self)) {
		return nil;
	}
	Message* rel = ((Message*)JB_Ring_Parent(self));
	if (((JB_Msg_EqualsSyx(rel, JB_SyxRel, false))) and (JB_Tree_IsLast(self) and (!(JB_Msg_OperatorIn(rel, JB_SyxDecl))))) {
		return rel;
	}
	return nil;
}

Message* JB_Msg_GiveArg(Message* self) {
	Message* r = ((Message*)JB_Ring_Last(self));
	if (JB_Msg_EqualsSyx(r, JB_SyxArg, false)) {
		return r;
	}
	return JB_Msg_Msg(self, JB_SyxArg, JB_LUB[0]);
}

Message* JB_Msg_GoIntoInvisArg(Message* self, Message* tmp, int pos) {
	int i = JB_int_OperatorAlign(((int)self->Indent), 4);
	Syntax f = tmp->Func;
	if ((!((f == JB_SyxTmp) or ((f == JB_SyxItem) or (f == JB_SyxDecl))))) {
		return JB_Tk__ErrorAdd(JB_LUB[914], tmp->Position);
	}
	Message* it = JB_Tk__MakeInvisArg(tmp, i);
	if (it) {
		it->Indent = i;
		(JB_Msg_RangeSet(it, ((IntRange)ivec2{pos, pos})));
		JB_Tree_SyntaxAppend(it, self);
		return it;
	}
	return nil;
}

Message* SC_Msg_HasOwnBlock(Message* self) {
	Message* arg = ((Message*)JB_Ring_Parent(self));
	if ((!JB_Msg_EqualsSyx(arg, JB_SyxRel, false))) {
		return nil;
	}
	arg = ((Message*)JB_Ring_Parent(arg));
	if ((!JB_Msg_EqualsSyx(arg, JB_SyxDecl, false))) {
		return nil;
	}
	arg = ((Message*)JB_Ring_Parent(arg));
	if ((!JB_Msg_EqualsSyx(arg, JB_SyxArg, false))) {
		return nil;
	}
	SCArg* obj = SC_Msg_AsArg(arg);
	if (((bool)obj) and (obj->TmpMovedOutFor == self)) {
		return arg;
	}
	return nil;
}

bool JB_Msg_HasPosition(Message* self) {
	return self->Position >= 0;
}

bool SC_Msg_HasSelfAsFirst(Message* self) {
	Message* d = ((Message*)JB_Ring_First(self));
	if (d) {
		Message* msg = SC_Msg_DeclName(d);
		if (msg) {
			return (JB_Str_Equals(msg->Name, JB_LUB[1934], true));
		}
	}
	return false;
}

void SC_Msg_HateUnusedFuncs(Message* self) {
	SCImport* imp = SC_Imp__FindImport(self->Name);
	if (imp) {
		imp->WarnUnusedFuncs = true;
	}
	 else {
		JB_Msg_Expect(self, self->Func, JB_LUB[704]);
	}
}

SCFunction* SC_Msg_IdentifyFunc(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxTmp, false)) {
		if ((!((!JB_Msg_SyntaxEquals(self, JB_LUB[1545], false)) and (!JB_Msg_SyntaxEquals(self, JB_LUB[1799], false))))) {
			return nil;
		}
	}
	JB_Object* obj = self->Obj;
	if (JB_Object_FastIsa(obj, &SCFunctionData)) {
		return ((SCFunction*)obj);
	}
	return nil;
}

Message* SC_Msg_InBuiltSizeOf(Message* self, SCNode* name_space, SCDecl* sulf, Message* sulf_exp) {
	SCDecl* _tmPf0 = JB_Incr(SC_Decl_Constructor(nil, JB_TypeInt));
	Message* _tmPf1 = JB_Incr(SC_NewDeclNum(_tmPf0, SC_Decl_ByteSize(sulf), JB_LUB[0]));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

int JB_Msg_IndentScore(Message* self) {
	int ind = JB_Msg_CleanIndent(self);
	if ((JB_Msg_EqualsSyx(self, JB_SyxTmp, false)) or (JB_Msg_EqualsSyx(self, JB_SyxItem, false))) {
		return ind + 2;
	}
	if (JB_Msg_EqualsSyx(self, JB_SyxArg, false)) {
		return ind;
	}
	return JB_Msg_CleanIndent(self);
}

bool JB_Msg_InInvisArg(Message* self) {
	Message* p = ((Message*)JB_Ring_Parent(self));
	return ((JB_Msg_EqualsSyx(p, JB_SyxArg, false))) and (JB_Msg_SyntaxIs(p, kJB__MsgParseFlags_Style2));
}

bool SC_Msg_InitExpand(Message* self) {
	Message* rel = ((Message*)JB_Ring_Parent(self));
	JB_SetRef(self->Name, JB_LUB[567]);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
	SC_Msg_FixErl(rel);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return true;
}

bool SC_Msg_InitRootDecl(Message* self, Message* before, SCNode* name_space) {
	if ((!JB_Msg_Expect(self, JB_SyxThg, nil))) {
		return nil;
	}
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(self)));
	Message* NewDefault = JB_Incr(((Message*)JB_Ternary((JB_Msg_EqualsSyx(P, JB_SyxRel, false)), ((Message*)JB_Ring_Last(P)), nil)));
	JB_Decr(P);
	SCObject* O = JB_Incr(SC_Base_LookUpVarRootDecl(name_space, self->Name, self));
	if ((!JB_Object_Isa(O, &SCDeclData))) {
		JB_Decr(O);
		JB_Decr(NewDefault);
		return nil;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
	SCDecl* Decl = JB_Incr(((SCDecl*)O));
	JB_Decr(O);
	if ((!NewDefault)) {
		if ((!SC_Decl_IsNormal(Decl))) {
			JB_Decr(Decl);
			JB_MsgPos_Destructor((&_usingf0));
			JB_Decr(NewDefault);
			return true;
		}
		JB_SetRef(NewDefault, SC_Decl_CreateDefault(Decl, self, true));
		if (((bool)NewDefault) and ((bool)Decl->Contains)) {
			JB_SetRef(NewDefault, SC_Decl_WriteTypeCast(Decl, NewDefault));
			JB_SetRef(NewDefault->Obj, nil);
		}
	}
	JB_Decr(Decl);
	if ((!JB_Msg_SyntaxEquals(NewDefault, JB_LUB[1811], false))) {
		Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxThg, self->Name));
		Message* _tmPf1 = JB_Incr(SC_NewRel((_tmPf2), NewDefault, JB_LUB[587]));
		JB_Decr(_tmPf2);
		(JB_Ring_PrevSibSet(before, _tmPf1));
		JB_Decr(_tmPf1);
	}
	JB_Decr(NewDefault);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return true;
}

void SC_Msg_InsertAfter(Message* self, Message* ins, Message* after) {
	if (after) {
		(JB_Ring_NextSibSet(after, ins));
	}
	 else {
		(JB_Ring_FirstSet(self, ins));
	}
}

void SC_Msg_InsertBefore(Message* self, Message* j, Message* ch) {
	if (((Message*)JB_Ring_Parent(ch)) == self) {
		(JB_Ring_PrevSibSet(ch, j));
	}
	 else {
		(JB_Ring_LastSet(self, j));
	}
}

void SC_Msg_InsertMainArgs(Message* self, Message* prms) {
	JB_String* usage = SC_Msg_CollectUsage(prms);
	Macro* FirstArg = JB_Macro_ConstructorStr(nil, (JB_LUB[10]));
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(prms);
	Array* _tmPf1 = (JB_Array_Constructor0(nil));
	JB_Array_SyntaxAppend(_tmPf1, JB_Str_Msg(usage));
	JB_Msg_AppendMacro(self, FirstArg, _tmPf1);
	int i = 0;
	int Found = 0;
	{
		Message* ch = ((Message*)JB_Ring_First(prms));
		while (ch) {
			Message* _Nf3 = ((Message*)JB_Ring_NextSib(ch));
			Found = (Found | SC_Msg_MainOneArg(ch, self, i++, Found));
			ch = _Nf3;
		};
		;
	}
	;
	if ((!((bool)(Found & 1)))) {
		JB_FreeIfDead(SC_Macro_clean(SC__Macros_MainArgNoNE));
		Array* _tmPf4 = (JB_Array_Constructor0(nil));
		JB_Array_SyntaxAppend(_tmPf4, JB_int_Msg(i));
		JB_Msg_AppendMacro(self, SC__Macros_MainArgNoNE, _tmPf4);
	}
	JB_Tree_SyntaxAppend(self, JB_Str_ParseJbin(((JB_LUB[20])), kJB__int64_max));
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

SCFunction* SC_Msg_InsideFunc(Message* self) {
	{
		Message* ch = self;
		while (ch) {
			if (JB_Msg_EqualsSyx(ch, JB_SyxTmp, false)) {
				SCFunction* fn = SC_Msg_AsFunc(ch);
				if (fn) {
					return fn;
				}
			}
			ch = ((Message*)JB_Ring_Parent(ch));
		};
		;
	}
	;
	return nil;
}

int64 JB_Msg_Int(Message* self, int i) {
	if (self) {
		Message* f = ((Message*)JB_Ring_First(self));
		if ((!f) or (!JB_Msg_EqualsSyx(self, JB_SyxUnit, false))) {
			return JB_Str_TextIntegerSection(self->Name, i, self);
		}
		if (JB_Msg_SyntaxEquals(self, JB_LUB[2054], false)) {
			return JB_Str_HexIntegerSection(f->Name, i, f);
		}
		double mul = JB_Str_TextDouble(f->Name, nil);
		if (JB_Msg_SyntaxEquals(self, JB_LUB[979], false)) {
			mul = (mul * ((float)1024));
		}
		 else if (JB_Msg_SyntaxEquals(self, JB_LUB[1001], false)) {
			mul = (mul * ((float)1048576));
		}
		 else if (JB_Msg_SyntaxEquals(self, JB_LUB[894], false)) {
			mul = (mul * ((float)1073741824));
		}
		 else {
			if (true) {
				JB_Msg_SyntaxExpect(self, JB_LUB[939]);
			}
			mul = 0.0f;
		}
		return ((int64)mul);
	}
	return 0;
}

NameAndMsg SC_Msg_IntoVariable(Message* self, SCNode* name_space) {
	NameAndMsg rz = ((NameAndMsg){});
	Message* P = JB_Incr(SC_Msg_NiceParent(self));
	Message* Place = JB_Incr(SC_Msg_IsInDeclInBlock(P));
	if (Place) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(P)));
		Message* NameMsg = JB_Incr(SC_Msg_UseNonRefChangers(_tmPf0, false));
		JB_Decr(_tmPf0);
		if (JB_Msg_EqualsSyx(NameMsg, JB_SyxThg, false)) {
			JB_SetRef(rz.Name, NameMsg->Name);
			Message* _tmPf1 = JB_Incr(JB_Msg_Ancestor(Place, JB_SyxArg));
			JB_SetRef(rz.Arg, _tmPf1);
			JB_Decr(_tmPf1);
			JB_SetRef(rz.Msg, ((Message*)JB_Ring_NextSib(Place)));
			JB_Decr(NameMsg);
			JB_Decr(Place);
			JB_Decr(P);
			return rz;
		}
		JB_Decr(NameMsg);
	}
	JB_Decr(Place);
	Message* Block = JB_Incr(SC_Msg_CreateOwnBlock(self));
	if ((!Block)) {
		JB_Decr(Block);
		JB_Decr(P);
		NameAndMsg _tmPf5 = ((NameAndMsg){});
		SC_NameAndMsg_Destructor((&rz));
		return _tmPf5;
	}
	JB_String* name = JB_Incr(SC_UniqueTmpVar(name_space, JB_LUB[1459]));
	Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name));
	JB_SetRef(P, SC_NewEqRelWithMsgMsg(_tmPf2, self));
	JB_Decr(_tmPf2);
	SCArg* _tmPf3 = JB_Incr(SC_Msg_AsArg(Block));
	SCArg* arg = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	Message* decl = JB_Incr(JB_Msg_Msg(Block, JB_SyxDecl, JB_LUB[0]));
	JB_Msg_AppendSyx(decl, JB_SyxEmb, JB_LUB[0]);
	JB_Tree_SyntaxAppend(decl, P);
	SC_Msg_CollectFromBody(decl, arg);
	JB_Decr(decl);
	Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_Parent(Block)));
	JB_SetRef(_tmPf4->Obj, SC_Base_SyntaxAccess(arg, name));
	JB_Decr(arg);
	JB_Decr(_tmPf4);
	Message* last = JB_Incr(SC_NewRejoin());
	Message* RetVal = JB_Incr(JB_Msg_Msg(last, JB_SyxThg, name));
	JB_SetRef(RetVal->Obj, P->Obj);
	JB_Decr(P);
	JB_Decr(RetVal);
	JB_Tree_SyntaxAppend(Block, last);
	JB_SetRef(rz.Msg, last);
	JB_Decr(last);
	JB_SetRef(rz.Arg, Block);
	JB_Decr(Block);
	JB_SetRef(rz.Name, name);
	JB_Decr(name);
	return rz;
}

MaybeBool SC_Msg_IsAlwaysBool(Message* self) {
	SCDecl* d = ((SCDecl*)JB_Object_FastAs(self->Obj, &SCDeclData));
	if (d) {
		if (SC_Decl_IsConstOf(d, JB_FalseBool)) {
			return ((MaybeBool)false);
		}
		if (SC_Decl_IsConstOf(d, JB_TrueBool)) {
			return ((MaybeBool)true);
		}
	}
	return ((MaybeBool)8);
}

bool SC_Msg_IsAlwaysFalse(Message* self) {
	return JB_MaybeBool_IsFalse(SC_Msg_IsAlwaysBool(self));
}

bool SC_Msg_IsAssignable(Message* self) {
	Syntax f = self->Func;
	return (f != JB_SyxFunc) and ((f != JB_SyxType) and (f != JB_SyxNum));
}

bool SC_Msg_IsBehaviour(Message* self) {
	return (JB_Str_Equals(self->Name, JB_LUB[1513], false)) or (JB_Str_Equals(self->Name, JB_LUB[1475], false));
}

bool SC_Msg_IsClassType(Message* self) {
	return (JB_Msg_SyntaxEquals(self, JB_LUB[1545], true)) or ((JB_Msg_SyntaxEquals(self, JB_LUB[1586], true)) or ((JB_Msg_SyntaxEquals(self, JB_LUB[1973], true)) or (JB_Msg_SyntaxEquals(self, JB_LUB[1903], true))));
}

bool SC_Msg_IsFirstOfSetRel(Message* self) {
	return JB_Tree_IsFirst(self) and SC_Msg_IsSetRel(((Message*)JB_Ring_Parent(self)));
}

Message* SC_Msg_IsInDeclInBlock(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxRel, false)) {
		Message* P = SC_Msg_NiceParent(self);
		if (((JB_Msg_EqualsSyx(P, JB_SyxDecl, false))) and (JB_Msg_OperatorIn(P, JB_SyxArg))) {
			return P;
		}
	}
	return nil;
}

bool SC_Msg_IsInt(Message* self) {
	return ((JB_Msg_EqualsSyx(self, JB_SyxNum, false))) and (!JB_Ind_SyntaxCast(JB_Str_FindByte(self->Name, '.', 0, JB_int__Max())));
}

bool SC_Msg_IsLinkageType(Message* self) {
	return (JB_Msg_SyntaxEquals(self, JB_LUB[1759], true));
}

bool SC_Msg_IsModuleType(Message* self) {
	return (JB_Msg_SyntaxEquals(self, JB_LUB[1799], true)) or (JB_Msg_SyntaxEquals(self, JB_LUB[1643], true));
}

int SC_Msg_IsNowNil(Message* self) {
	SCDecl* d = ((SCDecl*)self->Obj);
	if (d) {
		if (d == JB_TypeNil) {
			return 1;
		}
		if (SC_Decl_NilCurr(d) == kSC__NilState_Nilish) {
			return 2;
		}
	}
	return 0;
}

SCFunction* SC_Msg_IsParentConCall(Message* self) {
	if ((!JB_Msg_EqualsSyx(self, JB_SyxFunc, false))) {
		return nil;
	}
	SCFunction* f = SC_Msg_MsgFunc(self);
	if (((bool)f) and SC_Func_SyntaxIs(f, kSC__FunctionType_ConOrDes)) {
		return f;
	}
	return nil;
}

bool SC_Msg_IsProperty(Message* self) {
	return SC_DotUseType_SyntaxIs(SC_Msg_DotType(self), kSC__DotUseType_Property);
}

bool SC_Msg_IsReffer(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxFunc, false)) {
		Message* l = ((Message*)JB_Ring_Last(self));
		if (l) {
			SCFunction* fn = SC_Msg_AsFunc(l);
			if (fn) {
				return SC_Func_SyntaxIs(fn, kSC__FunctionType_Reffer);
			}
		}
	}
	return false;
}

bool SC_Msg_IsReturnOrRejoin(Message* self) {
	return ((JB_Msg_EqualsSyx(self, JB_SyxTmp, false))) and ((JB_Msg_SyntaxEquals(self, JB_LUB[1899], false)) or (JB_Msg_SyntaxEquals(self, JB_LUB[1892], false)));
}

Message* SC_Msg_IsSetIntoPlace(Message* self) {
	Message* p = SC_Msg_NiceParent(self);
	if (SC_Msg_IsSetRel(p)) {
		return ((Message*)JB_Ring_First(p));
	}
	return nil;
}

Message* SC_Msg_IsSetIntoVar(Message* self) {
	Message* thg = SC_Msg_IsSetIntoPlace(self);
	if (JB_Msg_EqualsSyx(thg, JB_SyxThg, false)) {
		return thg;
	}
	return nil;
}

bool SC_Msg_IsSetRel(Message* self) {
	if ((!JB_Msg_EqualsSyx(self, JB_SyxRel, false))) {
		return nil;
	}
	Message* s = ((Message*)JB_Tree_Second(self));
	if (s) {
		return ((JB_Str_Equals(s->Name, JB_LUB[587], false)));
	}
	return false;
}

bool SC_Msg_IsSettablePlace(Message* self) {
	Message* p = ((Message*)JB_Ring_Parent(self));
	while (JB_Msg_EqualsSyx(p, JB_SyxBra, false)) {
		self = p;
		p = ((Message*)JB_Ring_Parent(p));
	};
	return SC_Msg_IsFirstOfSetRel(self);
}

bool SC_Msg_IsSmallInt(Message* self, SCDecl* T) {
	if (((bool)T) and (self->Func == JB_SyxNum)) {
		if (JB_Str_ContainsString(self->Name, JB_LUB[354])) {
			return false;
		}
		int64 i = JB_Msg_Int(self, 0);
		return (i <= 16777216) and (i >= -16777216);
	}
	return false;
}

bool SC_Msg_IsStatementExpr(Message* self) {
	return SC_Msg_TmpType(self) == kSC__ASMtmp_kStatementExpression;
}

bool JB_Msg_IsString(Message* self) {
	if (self) {
		return JB_Syx_IsString(self->Func);
	}
	return false;
}

bool JB_Msg_IsTypeOfDecl(Message* self) {
	return JB_Msg_WithinType(self, 1);
}

bool SC_Msg_IsVarAltered(Message* self, JB_String* name) {
	{
		Message* msg = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)(msg)) and (msg != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(msg)));
			if (((JB_Msg_EqualsSyx(msg, JB_SyxRel, false))) and ((JB_Msg_OperatorIn(msg, JB_SyxArg)) and (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(msg)), name)))) {
				return true;
			}
			msg = _N_f2;
		};
		;
	}
	;
	return false;
}

bool SC_Msg_IsVarUseableInLoop(Message* self, JB_String* name) {
	if (JB_Str_Equals(name, JB_LUB[1934], false)) {
		return false;
	}
	return SC_Msg_IsVarAltered(self, name);
}

bool SC_Msg_IsZero(Message* self) {
	return ((JB_Msg_EqualsSyx(self, JB_SyxNum, false))) and (SC_Str_IsZero(self->Name));
}

void JB_Msg_Item__(Message* self, FastString* fs) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	JB_FS_SyntaxAppend(fs, ch);
	JB_FS_AppendString(fs, JB_LUB[560]);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	JB_Decr(ch);
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
}

bool JB_Msg_jbinTest(Message* self) {
	JB_String* _tmPf0 = JB_Incr(JB_Msg_RenderJbin(self, JB_LUB[0], nil));
	Message* msg = JB_Incr(JB_Str_ParseJbin(_tmPf0, kJB__int64_max));
	JB_Decr(_tmPf0);
	bool _tmPf1 = JB_Msg__TreeCompare(self, msg, false);
	JB_Decr(msg);
	return _tmPf1;
}

JB_String* JB_Msg_JDB2_(Message* self, int Flags, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	if (((bool)(Flags & 1))) {
		JB_FS_AppendString(fs, JB_LUB[2096]);
	}
	JB_String* _tmPf2 = JB_Incr(JB_Syx_Name(self->Func));
	JB_FS_AppendString(fs, _tmPf2);
	JB_Decr(_tmPf2);
	JB_FS_AppendByte(fs, ' ');
	if (JB_Str_Exists(self->Name)) {
		JB_String* _tmPf3 = JB_Incr(((JB_String*)JB_Ternary(((bool)(Flags & 2)), JB_Str_Range(self->Name, 0, 32), self->Name)));
		JB_FS_AppendQuotedEscape(fs, _tmPf3);
		JB_Decr(_tmPf3);
	}
	if (JB_Ring_HasChildren(self)) {
		fs->Indent++;
		{
			Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
			while (ch) {
				Message* _Nf1 = JB_Incr((((Message*)JB_Ring_NextSib(ch))));
				JB_FS_LineIndent(fs);
				JB_FreeIfDead(JB_Msg_JDB2_(ch, Flags, fs));
				JB_SetRef(ch, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(ch);
			;
		}
		;
		fs->Indent--;
		if (((bool)(Flags & 1))) {
			JB_FS_LineIndent(fs);
		}
	}
	if (((bool)(Flags & 1))) {
		JB_FS_AppendString(fs, JB_LUB[2100]);
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

__lib__ JB_String* jdb4(Message* self) {
	//visible;
	JB_String* _tmPf0 = JB_Incr(SC_Msg_JDB4_(self, nil));
	JB_PrintLine(_tmPf0);
	JB_Decr(_tmPf0);
	return JB_LUB[0];
}

JB_String* SC_Msg_JDB4_(Message* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_String* _tmPf2 = JB_Incr(JB_Syx_Name(self->Func));
	JB_FS_AppendString(fs, _tmPf2);
	JB_Decr(_tmPf2);
	JB_FS_AppendByte(fs, ' ');
	if (JB_Str_Exists(self->Name)) {
		JB_FS_AppendByte(fs, '"');
		JB_String* _tmPf3 = JB_Incr(JB_Str_Range(self->Name, 0, 32));
		JB_FS_AppendEscape(fs, _tmPf3);
		JB_Decr(_tmPf3);
		JB_FS_AppendByte(fs, '"');
	}
	if (self->Obj) {
		if ((!JB_Object_Isa(self->Obj, &MessageData))) {
			JB_FS_AppendByte(fs, ' ');
			JB_FreeIfDead(JB_ObjRender(self->Obj, fs));
		}
	}
	if (JB_Ring_HasChildren(self)) {
		fs->Indent++;
		{
			Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
			while (ch) {
				Message* _Nf1 = JB_Incr((((Message*)JB_Ring_NextSib(ch))));
				JB_FS_LineIndent(fs);
				JB_FreeIfDead(SC_Msg_JDB4_(ch, fs));
				JB_SetRef(ch, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(ch);
			;
		}
		;
		fs->Indent--;
		JB_FS_LineIndent(fs);
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_String* JB_Msg_JDB_(Message* self, FastString* fs_in, int flags) {
	return JB_Msg_JDB2_(self, flags, fs_in);
}

void SC_Msg_KinderRemoveAfter(Message* self) {
	while ((true)) {
		Message* x = ((Message*)JB_Ring_NextSib(self));
		if ((!x)) {
			break;
		}
		if ((!JB_Msg_SyntaxIs(x, kJB__MsgParseFlags_Inserted))) {
			JB_Msg_SyntaxExpect(x, JB_LUB[1351]);
		}
		JB_Tree_Remove(x);
	};
}

Message* JB_Msg_Last(Message* self, Syntax Need) {
	Message* ch = ((Message*)JB_Ring_Last(self));
	if (((bool)ch) and ((!Need) or (JB_Msg_EqualsSyx(ch, Need, false)))) {
		return ch;
	}
	JB_Msg_CantFind(self, Need, nil, ch);
	return nil;
}

void SC_Msg_LastInBlock(Message* self, SCBlockage Reason) {
	JB_Tree_RemoveAfter(self);
	Message* arg = ((Message*)JB_Ring_Parent(self));
	(SC_Msg_BlocksSet(arg, Reason));
	(SC_Msg_BlocksSet(self, Reason));
	Message* Test = ((Message*)JB_Ring_Parent(arg));
	if ((!SC_Msg_OperatorIsTmp(Test, JB_LUB[1622]))) {
		return;
	}
	while (Test) {
		arg = ((Message*)JB_Ring_PrevSib(Test));
		SCBlockage B = SC_Msg_Blocks(arg);
		if ((!B)) {
			return;
		}
		Reason = SC_SCBlockage_BlockCombine(Reason, B);
		Test = ((Message*)JB_Ring_Parent(arg));
		if (SC_ASMtmp_SyntaxIs(SC_Msg_TmpType(Test), kSC__ASMtmp_kIf)) {
			return SC_Msg_LastInBlock(Test, Reason);
		}
		 else {
			(SC_Msg_BlocksSet(Test, Reason));
		}
	};
}

Message* SC_Msg_LastUsedFix(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxDecl, false)) {
		Message* Ch = ((Message*)JB_Ring_First(((Message*)JB_Tree_Second(self))));
		if ((!JB_Msg_EqualsSyx(Ch, JB_SyxThg, false))) {
			JB_Object_SyntaxExpect(nil);
			return nil;
		}
		if (SC_Refs__RefBasis(Ch, true) == kSC__Refs_kBasisObj) {
			Message* it = SC_Msg_FindRef(self, SC__Comp_RefIncr, Ch->Name);
			if (it) {
				return ((Message*)JB_Ring_NextSib(it));
			}
		}
	}
	return ((Message*)JB_Ring_NextSib(self));
}

int JB_Msg_Length(Message* self) {
	return JB_Str_Length(self->Name);
}

void JB_Msg_List__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '(');
	int count = 0;
	JB_String* sep = JB_LUB[303];
	if (JB_Msg_SyntaxIs(self, kJB__MsgParseFlags_Style2)) {
		sep = JB_LUB[42];
		JB_FS_AppendString(fs, sep);
	}
	{
		Message* ch = ((Message*)JB_Ring_First(self));
		while (ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(ch)));
			if ((++count) > 1) {
				JB_FS_AppendString(fs, sep);
			}
			JB_FS_SyntaxAppend(fs, ch);
			if (JB_Msg_EqualsSyx(ch, JB_SyxItem, false)) {
				count++;
			}
			ch = _Nf1;
		};
		;
	}
	;
	if ((count == 1) or JB_Msg_SyntaxIs(self, kJB__MsgParseFlags_Style2)) {
		JB_FS_AppendString(fs, sep);
	}
	JB_FS_AppendByte(fs, ')');
}

Array* SC_Msg_ListAll(Message* self) {
	Array* rz = ((Array*)JB_Array_Constructor0(nil));
	{
		Message* A = ((Message*)JB_Ring_First(self));
		while (A) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(A)));
			JB_Array_SyntaxAppend(rz, A);
			A = _Nf1;
		};
		;
	}
	;
	return rz;
}

bool JB_Msg_ListViewable(Message* self) {
	return ((bool)self) and JB_Syx_ListViewable(self->Func);
}

JB_String* JB_Msg_Locate(Message* self) {
	if ((!self)) {
		return JB_LUB[276];
	}
	JB_String* s = JB_Incr(JB_Msg_Render(self, nil));
	JB_String* fname = JB_Incr(JB_Syx_Name(self->Func));
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FreeIfDead(JB_ObjRender(self->Name, fs));
	JB_FS_AppendByte(fs, '@');
	JB_FS_AppendString(fs, fname);
	JB_Decr(fname);
	JB_FS_AppendString(fs, JB_LUB[562]);
	JB_FS_AppendString(fs, s);
	JB_Decr(s);
	JB_FS_AppendByte(fs, '\'');
	if (self->Position >= 0) {
		JB_FS_AppendString(fs, JB_LUB[166]);
		JB_FS_AppendInt32(fs, self->Position);
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Root(self)));
		JB_Object* r = JB_Incr(_tmPf0->Obj);
		JB_Decr(_tmPf0);
		if (JB_Object_Isa(r, &JB_StringData)) {
			if (JB_Str_Length(((JB_String*)r))) {
				JB_FS_AppendString(fs, JB_LUB[181]);
				JB_FS_AppendString(fs, ((JB_String*)r));
			}
		}
		JB_Decr(r);
	}
	JB_FS_AppendByte(fs, '\n');
	JB_String* _tmPf1 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Msg_LoopContinue(Message* self) {
	SC_Msg_LoopExitter(self, kSC__ASMtmp_kContinue, kSC__SCBlockage_Continue);
}

void SC_Msg_LoopExit(Message* self) {
	SC_Msg_LoopExitter(self, kSC__ASMtmp_kExit, kSC__SCBlockage_Exit);
}

void SC_Msg_LoopExitter(Message* self, int ASMType, SCBlockage ExitCode) {
	SC_Msg_ExpectEmpty(self);
	(SC_Msg_TmpTypeSet(self, ASMType));
	SC_Msg_LastInBlock(self, ExitCode);
}

Message* JB_Msg_MacroAvoidCopy(Message* self) {
	if (!(JB_Msg_SyntaxIs(self, kJB__MsgParseFlags_MacroMade))) {
		(JB_Msg_SyntaxIsSet(self, kJB__MsgParseFlags_MacroMade, true));
		return self;
	}
	return JB_Msg_Copy(self, nil);
}

void JB_Msg_MacroCopy(Message* self, Message* root, Array* prms, Message* dest) {
	{
		Message* v = ((Message*)JB_Ring_First(self));
		while (v) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(v)));
			JB_Tree_SyntaxAppend(dest, JB_Msg_MacroPrm(v, root, prms, dest));
			v = _Nf1;
		};
		;
	};
}

void SC_Msg_MacroFixSub(Message* self, SCDecl* contains) {
	{
		Message* s = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)(s)) and (s != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(s)));
			if (((JB_Msg_EqualsSyx(s, JB_SyxSThg, false)) and (JB_Msg_SyntaxEquals(s, JB_LUB[358], false))) and JB_Msg_WithinType(s, 3)) {
				if ((!contains)) {
					JB_Msg_SyntaxExpect(self, JB_LUB[788]);
					return;
				}
				JB_FreeIfDead(SC_Msg_ReplaceWith(s, SC_Decl_WriteType(contains, 0)));
			}
			s = _N_f2;
		};
		;
	};
}

Message* JB_Msg_MacroPrm(Message* self, Message* root, Array* prms, Message* dest) {
	Message* rz = nil;
	JB_String* n = self->Name;
	byte c = JB_Str_First(n);
	if ((c == '*') and ((JB_Msg_EqualsSyx(self, JB_SyxBRel, false)))) {
		Message* f = ((Message*)JB_Ring_First(self));
		if ((JB_Msg_SyntaxEquals(f, JB_LUB[1426], false)) and (JB_Msg_EqualsSyx(f, JB_SyxThg, false))) {
			{
				int _if0 = 0;
				while (true) {
					Message* p = ((Message*)JB_Array_Value(prms, _if0));
					if (p == nil) {
						break;
					}
					if (!(JB_Msg_SyntaxIs(p, kJB__MsgParseFlags_MacroMade))) {
						JB_Tree_SyntaxAppend(dest, JB_Msg_MacroAvoidCopy(p));
					}
					_if0++;
				};
			}
			;
			return nil;
		}
	}
	if (((c == '_') and (JB_Str_CompareInt(n, 1, false) >= 1)) and JB_Str_IsIntFrom(n, 1)) {
		Message* oop = ((Message*)JB_Array_Value(prms, ((int)JB_Str_Int(n))));
		if ((!oop)) {
			JB_Msg_SyntaxExpect(root, JB_LUB[1096]);
			return nil;
		}
		Syntax f = self->Func;
		if ((f == JB_SyxDot) or ((f == JB_SyxSDot) or ((f == JB_SyxStr) or ((f == JB_SyxSStr) or (f == JB_SyxChar))))) {
			return JB_Msg_MacroSame(self, oop);
		}
		return JB_Msg_MacroAvoidCopy(oop);
	}
	rz = JB_Msg_ConstructorCopy(nil, self);
	JB_Msg_MacroCopy(self, root, prms, rz);
	return rz;
}

Message* JB_Msg_MacroSame(Message* self, Message* prm) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Msg_Copy(self, nil));
	(JB_Msg_SyntaxIsSet(prm, kJB__MsgParseFlags_MacroMade, true));
	JB_SetRef(rz->Name, prm->Name);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Msg_MainFix(Message* self) {
	Message* prms = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!prms)) {
		JB_SetRef(prms, JB_Msg_GiveArg(self));
		JB_Msg_AppendString(prms, JB_LUB[1690]);
	}
	JB_SetRef(self->Name, JB_LUB[1674]);
	Message* fn_src = JB_Incr(SC_Str_ParseClean(JB_LUB[1678]));
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(fn_src)));
	Message* src_arg = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Syntax fn = prms->Func;
	Message* inc_arg = nil;
	if ((fn == JB_SyxList) or (fn == JB_SyxBra)) {
		JB_SetRef(inc_arg, JB_Msg_NextOf(prms, JB_SyxArg));
		fn = JB_SyxPrm;
	}
	 else {
		JB_SetRef(inc_arg, JB_Msg_NeedSyx(self, JB_SyxArg));
	}
	if (inc_arg) {
		if (fn == JB_SyxPrm) {
			SC_Msg_InsertMainArgs(src_arg, prms);
		}
		JB_Tree_SyntaxAppend(fn_src, inc_arg);
		JB_Msg_ExpectLast(inc_arg, JB_LUB[0]);
		JB_Tree_Remove(src_arg);
		JB_Tree_TakeAllFrom(inc_arg, src_arg);
		JB_Decr(inc_arg);
		JB_Decr(src_arg);
		JB_Decr(prms);
		JB_SafeDecr(fn_src);
		return fn_src;
	}
	JB_Decr(prms);
	JB_Decr(fn_src);
	JB_Decr(src_arg);
	JB_Decr(inc_arg);
	return nil;
}

void SC_Msg_mainfix2(Message* self) {
	Message* m = JB_Incr(SC_Msg_MainFix(self));
	if (m) {
		JB_Msg_BecomeMsg(self, m);
	}
	JB_Decr(m);
}

int SC_Msg_MainOneArg(Message* self, Message* arg, int i, int found) {
	Message* type = JB_Msg_NeedSyx(self, JB_SyxNil);
	Message* name = JB_Msg_NextOf(type, JB_SyxNil);
	if ((!name)) {
		return 0;
	}
	bool IsArray = (JB_Msg_EqualsSyx(type, JB_SyxArr, false));
	if (IsArray) {
		if ((!JB_Msg_ExpectLast(self, JB_LUB[0]))) {
			return 0;
		}
		type = ((Message*)JB_Ring_First(type));
	}
	bool MaybeNil = SC_Msg_OperatorIsARel(type, JB_LUB[599]);
	if (MaybeNil) {
		type = ((Message*)JB_Ring_First(type));
	}
	if ((!JB_Msg_Expect(type, JB_SyxThg, nil))) {
		return 0;
	}
	SCClass* cls = SC_Comp__SyntaxAccess(type);
	if ((!cls)) {
		return 0;
	}
	if ((!MaybeNil)) {
		MaybeNil = SC_Class_IsDataTypeOnly(cls);
	}
	Array* prms = (JB_Array_Constructor0(nil));
	JB_Array_SyntaxAppend(prms, name);
	JB_Array_SyntaxAppend(prms, type);
	JB_Array_SyntaxAppend(prms, JB_int_Msg(i));
	if ((!JB_Array_SyntaxEquals(prms, 3, false))) {
		return 0;
	}
	if ((((bool)(found & 1)))) {
		JB_Msg_SyntaxExpect(arg, JB_LUB[695]);
	}
	if (IsArray) {
		JB_Msg_AppendMacro(arg, SC_Macro_clean(SC__Macros_MainArgArray), prms);
		return 1;
	}
	if ((!JB_Msg_EqualsSyx(name, JB_SyxRel, false))) {
		if ((((bool)(found & 4)))) {
			JB_Msg_SyntaxExpect(arg, JB_LUB[696]);
		}
		if (MaybeNil) {
			JB_Msg_AppendMacro(arg, SC_Macro_clean(SC__Macros_MainArgBasic), prms);
		}
		 else {
			JB_Msg_AppendMacro(arg, SC_Macro_clean(SC__Macros_MainArgBasicReq), prms);
		}
		return 2;
	}
	name = JB_Msg_NeedSyx(name, JB_SyxThg);
	if ((!name)) {
		return 0;
	}
	(JB_Array_ValueSet(prms, 0, name));
	Message* opp = JB_Msg_NextOfName(name, JB_SyxOpp, JB_LUB[587]);
	Message* l = JB_Msg_NextOf(opp, JB_SyxNil);
	if (l) {
		JB_Array_SyntaxAppend(prms, l);
	}
	if ((!JB_Array_SyntaxEquals(prms, 4, false))) {
		return 0;
	}
	JB_Msg_AppendMacro(arg, SC_Macro_clean(SC__Macros_MainArgDefault), prms);
	return 4;
}

void SC_Msg_MakeTaskVar(Message* self, Message* con, Message* before, bool First) {
	Message* prm = ((Message*)JB_Tree_Second(con));
	Message* arg = ((Message*)JB_Ring_NextSib(prm));
	JB_String* name = SC_Msg_VarName(self);
	if (JB_Str_Exists(name)) {
		if (First) {
			(JB_Ring_PrevSibSet(before, SC_NewEqRelWithMsgMsg(JB_Syx_OperatorPlus(JB_SyxSDot, name), JB_Syx_OperatorPlus(JB_SyxThg, name))));
		}
		JB_Tree_SyntaxAppend(prm, JB_Msg_Copy(self, nil));
	}
}

void JB_Msg_max__(Message* self, FastString* fs) {
	0;
}

void SC_Msg_MiniArgCpp(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '{');
	{
		Message* ch = ((Message*)JB_Ring_First(self));
		Message* _firstf2 = ch;
		while (ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(ch)));
			if (_firstf2 != ch) {
				JB_FS_AppendString(fs, JB_LUB[303]);
			}
			//start;
			JB_Msg_Export(ch, fs);
			ch = _Nf1;
		};
		;
	}
	;
	JB_FS_AppendByte(fs, '}');
}

JB_String* JB_Msg_MiniName(Message* self, JB_String* prefix) {
	if ((!self)) {
		return JB_LUB[0];
	}
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, prefix);
	JB_String* _tmPf1 = JB_Incr(JB_Msg_FuncName(self));
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(_fsf0, JB_LUB[212]);
	JB_String* _tmPf3 = JB_Incr(JB_Str_Range(self->Name, 0, 64));
	JB_String* _tmPf2 = JB_Incr(JB_Str_UnicodeSync(_tmPf3));
	JB_Decr(_tmPf3);
	JB_FS_AppendString(_fsf0, _tmPf2);
	JB_Decr(_tmPf2);
	JB_FS_AppendString(_fsf0, JB_LUB[2110]);
	JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

void SC_Msg_MiniTran(Message* self, SCNode* name_space, JB_String* On) {
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
		Message* _tmPf2 = ({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(self)));
			JB_Tree_SyntaxAppend(__imPf1, _tmPf3);
			JB_Decr(_tmPf3);
			JB_SafeDecr(nil);
			 __imPf1;
		});
		JB_Tree_SyntaxAppend(self, _tmPf2);
		JB_Decr(_tmPf2);
		Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, On));
		(JB_Ring_FirstSet(self, (_tmPf4)));
		JB_Decr(_tmPf4);
		self->Func = JB_SyxDot;
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_FreeIfDead(SC_TypeOfExpr(self, name_space, nil));
}

int SC_Msg_ModelMode(Message* self) {
	int rz = 0;
	if ((!JB_Msg_EqualsSyx(self, JB_SyxRel, false))) {
		return 0;
	}
	{
		Message* _LoopSrcf3 = JB_Incr(((Message*)JB_Ring_Last(self)));
		Message* C = JB_Incr(_LoopSrcf3);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(_LoopSrcf3)));
		while (((bool)(C)) and (C != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(C)));
			if (SC_Msg_OperatorIsThing(C, JB_LUB[1481])) {
				rz = (rz | 1);
			}
			 else if (SC_Msg_OperatorIsThing(C, JB_LUB[1819])) {
				rz = (rz | 2);
			}
			 else {
				if ((!((JB_Msg_EqualsSyx(C, JB_SyxRel, false)) or (JB_Msg_SyntaxEquals(C, JB_LUB[298], false))))) {
					JB_Msg_SyntaxExpect(C, nil);
					JB_Decr(_N_f2);
					JB_Decr(_afterf1);
					JB_Decr(C);
					JB_Decr(_LoopSrcf3);
					return 0;
				}
			}
			JB_SetRef(C, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(C);
		JB_Decr(_afterf1);
		;
		JB_Decr(_LoopSrcf3);
	}
	;
	return rz;
}

Message* SC_Msg_ModelType(Message* self) {
	Message* rz = nil;
	JB_SetRef(rz, self);
	if (JB_Msg_EqualsSyx(rz, JB_SyxRel, false)) {
		JB_SetRef(rz, ((Message*)JB_Ring_First(rz)));
	}
	if ((!JB_Msg_EqualsSyx(rz, JB_SyxThg, false))) {
		JB_Msg_SyntaxExpect(self, nil);
		JB_Decr(rz);
		return nil;
	}
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Msg_ModuleSrc(Message* self) {
	JB_String* name = self->Name;
	if (JB_Str_Exists(name)) {
		SCModule* found = SC_Base_FindModule(SC__Comp_program, name, nil, 0);
		if (found) {
			SCClass* c = found->Cls;
			if (c) {
				SCFunction* fp = c->FuncProto;
				if (fp) {
					return fp->Source;
				}
				 else {
					return SC_Base_SourceArg(c);
				}
			}
			return found->Source;
		}
	}
	return nil;
}

void SC_Msg_Move(Message* self, Message* last, Message* into) {
	Message* curr = self;
	while (curr != last) {
		Message* next_ = ((Message*)JB_Ring_NextSib(curr));
		(JB_Ring_FirstSet(into, curr));
		curr = next_;
	};
}

void SC_Msg_MoveAllAfter(Message* self, Message* after) {
	while (JB_Ring_HasChildren(self)) {
		(JB_Ring_NextSibSet(after, ((Message*)JB_Ring_Last(self))));
	};
}

Message* JB_Msg_Msg(Message* self, Syntax fn, JB_String* name) {
	return JB_Msg_ConstructorRange(nil, self, fn, JB__Tk_Using.Position, name, JB_Str_Length(name));
}

void JB_Msg_Msg__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[2096]);
	JB_Msg_FSListSep(self, fs, JB_LUB[303]);
	JB_FS_AppendString(fs, JB_LUB[211]);
}

SCArg* SC_Msg_MsgArg(Message* self) {
	{
		Message* ch = self;
		while (ch) {
			JB_Object* O = ch->Obj;
			if (JB_Object_FastIsa(O, &SCArgData)) {
				return ((SCArg*)O);
			}
			ch = ((Message*)JB_Ring_Parent(ch));
		};
		;
	}
	;
	return nil;
}

SCDecl* SC_Msg_MsgDecl(Message* self) {
	Message* d = SC_Msg_DclExp(self);
	if (d) {
		return SC_Msg_AsDecl(d);
	}
	return nil;
}

SCFunction* SC_Msg_MsgFunc(Message* self) {
	if ((JB_Msg_EqualsSyx(self, JB_SyxDot, false)) or (JB_Msg_EqualsSyx(self, JB_SyxFunc, false))) {
		Message* sc = ((Message*)JB_Tree_Second(self));
		if (sc) {
			return SC_Msg_AsFunc(sc);
		}
	}
	return nil;
}

SCFunction* SC_Msg_MsgOwningFunc(Message* self) {
	{
		Message* ch = self;
		while (ch) {
			JB_Object* O = ch->Obj;
			if (JB_Object_FastIsa(O, &SCArgData)) {
				SCFunction* pf = ((SCArg*)O)->ParentFunc;
				if (pf) {
					return pf;
				}
			}
			 else if ((JB_Object_FastIsa(O, &SCFunctionData)) and ((!JB_Msg_EqualsSyx(ch, JB_SyxPrm, false)))) {
				return ((SCFunction*)O);
			}
			ch = ((Message*)JB_Ring_Parent(ch));
		};
		;
	}
	;
	return nil;
}

void JB_Msg_Name__(Message* self, FastString* fs) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	if (ch) {
		JB_FS_AppendString(fs, self->Name);
		JB_FS_AppendString(fs, JB_LUB[157]);
		JB_FS_SyntaxAppend(fs, ch);
	}
	 else {
		JB_FS_AppendByte(fs, '@');
		JB_FS_AppendString(fs, self->Name);
	}
	JB_Decr(ch);
}

Message* SC_Msg_NeedBra(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxBra, false)) {
		return self;
	}
	return SC_Msg_WrapWith(self, JB_SyxBra, JB_LUB[0]);
}

Message* JB_Msg_NeedFirst(Message* self) {
	Message* f = ((Message*)JB_Ring_First(self));
	if (f) {
		return f;
	}
	JB_Msg_CantFind(self, JB_SyxNil, nil, nil);
	return nil;
}

Message* SC_Msg_NeedMarker(Message* self, JB_String* s, bool b) {
	Message* rz = nil;
	Message* f = JB_Msg_FindSyxName(self, JB_SyxTmp, s, false);
	if (f) {
		return f;
	}
	rz = JB_Syx_Msg(JB_SyxTmp, s);
	if (b) {
		(JB_Ring_LastSet(self, rz));
	}
	 else {
		(JB_Ring_FirstSet(self, rz));
	}
	return rz;
}

bool SC_Msg_NeedsPreprocess(Message* self) {
	if ((JB_Msg_EqualsSyx(self, JB_SyxTRel, false)) or SC_Msg_OperatorIsARel(self, JB_LUB[236])) {
		return true;
	}
	if (JB_Msg_EqualsSyx(self, JB_SyxTmp, false)) {
		return (JB_Str_Equals(self->Name, JB_LUB[2027], false)) or ((JB_Str_Equals(self->Name, JB_LUB[1636], false)) or ((JB_Str_Equals(self->Name, JB_LUB[1897], false)) or ((JB_Str_Equals(self->Name, JB_LUB[1591], false)) or ((JB_Str_Equals(self->Name, JB_LUB[2044], false)) or ((JB_Str_Equals(self->Name, JB_LUB[1633], false)) or ((JB_Str_Equals(self->Name, JB_LUB[1541], false)) or (JB_Str_Equals(self->Name, JB_LUB[1766], false))))))));
	}
	if ((!JB_Msg_EqualsSyx(self, JB_SyxRel, false))) {
		return nil;
	}
	Message* L = ((Message*)JB_Ring_First(self));
	if (((JB_Msg_EqualsSyx(L, JB_SyxRel, false))) and ((JB_Msg_SyntaxEquals(((Message*)JB_Ring_NextSib(L)), JB_LUB[1856], false)))) {
		return ((JB_Msg_SyntaxEquals(((Message*)JB_Tree_Second(L)), JB_LUB[587], false))) and ((JB_Msg_SyntaxEquals(((Message*)JB_Tree_Second(((Message*)JB_Ring_Last(self)))), JB_LUB[587], false)));
	}
	return false;
}

Message* SC_Msg_Negate(Message* self) {
	Message* rz = nil;
	Message* upon = self;
	Syntax f = self->Func;
	if (f == JB_SyxThg) {
		return SC_Msg_NegateThg(self);
	}
	if (f == JB_SyxBra) {
		upon = SC_Msg_UnBra(self);
		if (upon->Func == JB_SyxThg) {
			JB_FreeIfDead(SC_Msg_NegateThg(upon));
			JB_SetRef(self->Obj, upon->Obj);
			return self;
		}
	}
	if (SC_Msg_OperatorIsBRel(upon, JB_LUB[215])) {
		JB_Msg_BecomeStr(upon, JB_SyxBra, JB_LUB[0]);
		return self;
	}
	if (upon->Func == JB_SyxRel) {
		Message* opmsg = ((Message*)JB_Tree_Second(upon));
		SCOperator* op = ((SCOperator*)JB_Dict_ValueStr(SC__Opp_Dict, opmsg->Name));
		if (op) {
			SCOperator* nega = op->Opposite;
			if (nega) {
				SC_Msg_Become(opmsg, nega);
				return self;
			}
		}
	}
	if (f == JB_SyxBra) {
		JB_Msg_BecomeStr(self, JB_SyxBRel, JB_LUB[215]);
		return self;
	}
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
		rz = SC_Msg_WrapWith(self, JB_SyxBRel, JB_LUB[215]);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	return rz;
}

Message* SC_Msg_NegateThg(Message* self) {
	if (JB_Str_Equals(self->Name, JB_LUB[2005], false)) {
		JB_SetRef(self->Name, JB_LUB[1649]);
		JB_SetRef(self->Obj, JB_FalseBool);
		return self;
	}
	if (JB_Str_Equals(self->Name, JB_LUB[1649], false)) {
		JB_SetRef(self->Name, JB_LUB[2005]);
		JB_SetRef(self->Obj, JB_TrueBool);
		return self;
	}
	return SC_Msg_WrapWith(self, JB_SyxBRel, JB_LUB[215]);
}

Message* JB_Msg_NextOfName(Message* self, Syntax Need, JB_String* Name) {
	Message* ch = JB_Msg_NextOf(self, Need);
	if ((!ch)) {
		return nil;
	}
	if (JB_Msg_SyntaxEquals(ch, Name, true)) {
		return ch;
	}
	JB_Msg_CantFind(self, Need, nil, ch);
	return nil;
}

Message* JB_Msg_NextOf(Message* self, Syntax Need) {
	if (self) {
		Message* ch = ((Message*)JB_Ring_NextSib(self));
		if (((bool)ch) and ((!Need) or (JB_Msg_EqualsSyx(ch, Need, false)))) {
			return ch;
		}
		JB_Msg_CantFind(self, Need, nil, ch);
	}
	return nil;
}

void SC_Msg_Next_Index(Message* self, SCIterator* iter, Message* node2) {
	Message* i = JB_Incr(iter->Index);
	if (i) {
		Message* _tmPf1 = JB_Incr(JB_Msg_Copy(i, node2));
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(self)));
		Message* _tmPf0 = JB_Incr(SC_NewEqRelWithMsgMsg(_tmPf1, _tmPf2));
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf2);
		(JB_Ring_PrevSibSet(self, _tmPf0));
		JB_Decr(_tmPf0);
	}
	 else {
		debugger;
	}
	JB_Decr(i);
}

SCDecl* SC_Msg_NiceIsFlagSyntax(Message* self, Message* opch, Message* RN, SCNode* name_space, Message* side) {
	JB_Incr(side);
	SCDecl* cls = JB_Incr(SC_TypeOfExpr(self, name_space, nil));
	if ((!(((bool)cls) and SC_Decl_IsNormal(cls)))) {
		JB_Decr(side);
		JB_Decr(cls);
		return nil;
	}
	SCClass* ty = JB_Incr(cls->Type);
	JB_Decr(cls);
	SCFunction* fn = JB_Incr(ty->TheIsFunc);
	if ((!fn)) {
		FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf1, ty->Name);
		JB_FS_AppendString(_fsf1, JB_LUB[173]);
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		JB_Msg_SyntaxExpect(opch, _tmPf2);
		JB_Decr(_tmPf2);
		JB_Decr(side);
		JB_Decr(fn);
		JB_Decr(ty);
		return nil;
	}
	JB_Decr(ty);
	SCDecl* arg1 = JB_Incr(((SCDecl*)JB_Array_Value(fn->Args, 1)));
	if ((!arg1)) {
		JB_Msg_SyntaxExpect(fn->Source, JB_LUB[1287]);
		JB_Decr(side);
		JB_Decr(arg1);
		JB_Decr(fn);
		return nil;
	}
	JB_Decr(fn);
	SCClass* LookupType = JB_Incr(arg1->Type);
	JB_Decr(arg1);
	if ((!JB_Msg_Expect(RN, JB_SyxThg, nil))) {
		JB_Decr(side);
		JB_Decr(LookupType);
		return nil;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(RN);
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Parent(self)));
	Message* exp = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	if ((!side)) {
		Message* bra = JB_Incr(((Message*)JB_Ring_Parent(exp)));
		if ((!JB_Msg_EqualsSyx(bra, JB_SyxBra, false))) {
			JB_SetRef(bra, exp);
		}
		if (JB_Msg_OperatorIn(bra, JB_SyxArg)) {
			if (bra == exp) {
				JB_SetRef(bra, SC_Msg_WrapWith(exp, JB_SyxBra, JB_LUB[0]));
			}
			bra->Func = JB_SyxRel;
			Message* eq = JB_Incr(JB_Msg_Msg(bra, JB_SyxOpp, JB_LUB[587]));
			JB_SetRef(eq->Obj, opch->Obj);
			JB_Decr(eq);
			JB_Msg_AppendSyx(bra, JB_SyxThg, JB_LUB[2005]);
			JB_SetRef(side, ((Message*)JB_Ring_Last(bra)));
		}
		JB_Decr(bra);
	}
	exp->Func = JB_SyxDot;
	bool OpchIsnt = (JB_Msg_SyntaxEquals(opch, JB_LUB[1730], false));
	if (OpchIsnt) {
		JB_SetRef(exp->Name, JB_LUB[1981]);
	}
	 else {
		JB_SetRef(exp->Name, JB_LUB[1980]);
	}
	JB_Msg_BecomeStr(opch, JB_SyxPrm, JB_LUB[0]);
	JB_SetRef(opch->Obj, nil);
	RN->Func = JB_SyxDot;
	while (JB_Ring_HasChildren(RN)) {
		Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(RN)));
		JB_Tree_SyntaxAppend(opch, _tmPf4);
		JB_Decr(_tmPf4);
	};
	JB_Msg_AppendSyx(RN, JB_SyxThg, LookupType->Name);
	JB_Decr(LookupType);
	JB_Tree_SyntaxAppend(RN, opch);
	Message* _tmPf5 = JB_Incr(JB_Msg_Msg(exp, JB_SyxPrm, JB_LUB[0]));
	JB_Tree_SyntaxAppend(_tmPf5, RN);
	JB_Decr(_tmPf5);
	if (OpchIsnt) {
		Message* NOT = JB_Incr(JB_Syx_OperatorPlus(JB_SyxBRel, JB_LUB[215]));
		JB_SetRef(exp->Name, JB_LUB[1980]);
		if ((!side)) {
			(JB_Ring_NextSibSet(exp, NOT));
			JB_Tree_SyntaxAppend(NOT, exp);
			JB_SetRef(exp, NOT);
		}
		 else {
			(JB_Ring_NextSibSet(side, NOT));
			JB_Tree_SyntaxAppend(NOT, side);
			JB_SetRef(side, NOT);
			JB_FreeIfDead(SC_TypeOfExpr(side, name_space, nil));
		}
		JB_Decr(NOT);
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	SCDecl* _tmPf6 = JB_Incr(SC_TypeOfExpr(exp, name_space, side));
	JB_Decr(exp);
	JB_Decr(side);
	JB_SafeDecr(_tmPf6);
	JB_MsgPos_Destructor((&_usingf0));
	return _tmPf6;
}

Message* SC_Msg_NiceParent(Message* self) {
	return SC_Msg_UseNonRefChangers(self, true);
}

void JB_Msg_Nil__(Message* self, FastString* fs) {
	JB_DoAt(1);
}

int SC_Msg_NilCheckMode(Message* self, bool ok) {
	int rz = 0;
	rz = (2 * ok);
	if (rz) {
		Message* f = ((Message*)JB_Ring_First(self));
		if (f) {
			rz = (rz + JB_Msg_DeepEquals(f, SC_Msg__NilchCompare(), false));
		}
	}
	return rz;
}

Message* SC_Msg_NormaliseFunc(Message* self, SCClass* AddSelf) {
	Message* rz = nil;
	Message* name = JB_Msg_NeedSyx(self, JB_SyxThg);
	if ((!name)) {
		return nil;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(name);
	Message* prm = ((Message*)JB_Ring_NextSib(name));
	if (JB_Msg_EqualsSyx(prm, JB_SyxArg, false)) {
		prm = JB_Syx_Msg(JB_SyxPrm, JB_LUB[0]);
		(JB_Ring_NextSibSet(name, prm));
	}
	 else if ((!prm)) {
		prm = JB_Msg_Msg(self, JB_SyxPrm, JB_LUB[0]);
	}
	 else {
		Syntax fn = prm->Func;
		if ((!((fn == JB_SyxBra) or ((fn == JB_SyxList) or (fn == JB_SyxPrm))))) {
			JB_Msg_SyntaxExpect(prm, nil);
			JB_MsgPos_Destructor((&_usingf0));
			return nil;
		}
		prm->Func = JB_SyxPrm;
	}
	if (AddSelf) {
		Message* d = ((Message*)JB_Ring_First(prm));
		if ((!(((JB_Msg_EqualsSyx(d, JB_SyxDecl, false))) and (SC_Msg_OperatorIsThing(((Message*)JB_Tree_Second(d)), JB_LUB[1934]))))) {
			d = JB_Syx_Msg(JB_SyxDecl, JB_LUB[0]);
			JB_Msg_AppendSyx(d, JB_SyxThg, AddSelf->Name);
			JB_Msg_AppendSyx(d, JB_SyxThg, JB_LUB[1934]);
			(JB_Ring_FirstSet(prm, d));
		}
	}
	rz = ((Message*)JB_Ring_NextSib(prm));
	if (rz) {
		JB_Msg_Expect(rz, JB_SyxArg, nil);
	}
	 else {
		rz = JB_Msg_Msg(self, JB_SyxArg, JB_LUB[0]);
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return rz;
}

void SC_Msg_NotNilRZ(Message* self, SCDecl* type, SCNode* space) {
	Message* rel = ((Message*)JB_Ring_Last(self));
	if ((!rel)) {
		return;
	}
	Message* Nel = ((Message*)JB_Ring_Last(rel));
	if ((!Nel)) {
		return;
	}
	if (JB_Msg_EqualsSyx(Nel, JB_SyxType, false)) {
		Nel = ((Message*)JB_Ring_First(Nel));
	}
	if ((SC_Msg_OperatorIsThing(Nel, JB_LUB[1811])) and SC_Decl_IsNormalObject(type)) {
		JB_Msg_BecomeStr(Nel, JB_SyxDot, JB_LUB[1808]);
		JB_Tree_SyntaxAppend(Nel, (JB_Syx_Msg(JB_SyxThg, type->Type->Name)));
		JB_Msg_AppendSyx(Nel, JB_SyxPrm, JB_LUB[0]);
		JB_SetRef(Nel->Obj, nil);
		JB_FreeIfDead(SC_TypeOfExpr(Nel, space, nil));
	}
}

void JB_Msg_Num__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
}

bool SC_Msg_OarExpand(Message* self) {
	if (JB_Msg_OperatorIn(self, JB_SyxRel)) {
		if (JB_Msg_SyntaxEquals(self, JB_LUB[1835], true)) {
			(JB_Msg_SyntaxDeprecate(self, JB_LUB[1136]));
		}
		JB_SetRef(self->Name, JB_LUB[1856]);
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(self)));
		SC_Msg_BunchFix(_tmPf0);
		JB_Decr(_tmPf0);
	}
	return true;
}

void JB_Msg_Oat__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '%');
	JB_Msg_RenderWithSpaces(self, fs, nil);
}

SCClass* SC_Msg_ObjCls(Message* self) {
	SCDecl* o = ((SCDecl*)JB_Object_FastAs(self->Obj, &SCDeclData));
	if (o) {
		if (SC_Decl_SyntaxIs(o, kSC__SCDeclInfo_ClassObj)) {
			return o->Contains->Type;
		}
	}
	return nil;
}

bool JB_Msg_ContainsStr(Message* self, JB_String* s) {
	return ((bool)JB_Msg_FindNested(self, JB_SyxNil, s, false));
}

bool JB_Msg_InMsg(Message* self, Message* f) {
	return ((Message*)JB_Ring_Parent(self)) == f;
}

bool JB_Msg_OperatorIn(Message* self, Syntax f) {
	Message* p = ((Message*)JB_Ring_Parent(self));
	if (p) {
		return p->Func == f;
	}
	return false;
}

bool SC_Msg_OperatorIsARel(Message* self, JB_String* name) {
	return ((bool)(self)) and ((self->Func == JB_SyxARel) and ((JB_Str_Equals(self->Name, name, false))));
}

bool SC_Msg_OperatorIsBRel(Message* self, JB_String* name) {
	return ((bool)(self)) and ((self->Func == JB_SyxBRel) and ((JB_Str_Equals(self->Name, name, false))));
}

bool SC_Msg_OperatorIsDot(Message* self, JB_String* name) {
	return ((bool)(self)) and ((self->Func == JB_SyxDot) and ((JB_Str_Equals(self->Name, name, true))));
}

bool SC_Msg_OperatorIsOpp(Message* self, JB_String* name) {
	return ((bool)(self)) and ((self->Func == JB_SyxOpp) and ((JB_Str_Equals(self->Name, name, true))));
}

bool SC_Msg_OperatorIsThing(Message* self, JB_String* name) {
	return ((bool)(self)) and ((self->Func == JB_SyxThg) and ((JB_Str_Equals(self->Name, name, true))));
}

bool SC_Msg_OperatorIsTmp(Message* self, JB_String* name) {
	return ((bool)(self)) and ((self->Func == JB_SyxTmp) and ((JB_Str_Equals(self->Name, name, false))));
}

bool JB_Msg_OperatorMatches(Message* self, Message* m) {
	return (self->Func == m->Func) and (JB_Str_Equals(self->Name, m->Name, true));
}

bool JB_Msg_OperatorStarts(Message* self, JB_String* s) {
	return JB_Str_MidEquals(self->Name, 0, s, true);
}

void JB_Msg_Opp__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
}

bool SC_Msg_OppExpand(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxOpp, false)) {
		if ((JB_Msg_SyntaxEquals(self, JB_LUB[1835], true)) or (JB_Msg_SyntaxEquals(self, JB_LUB[601], true))) {
			return SC_Msg_OarExpand(self);
		}
		if (JB_Msg_SyntaxEquals(self, JB_LUB[1710], true)) {
			return SC_Msg_InitExpand(self);
		}
	}
	return false;
}

int SC_Msg_OpScore(Message* self) {
	JB_Object* o = self->Obj;
	if (o) {
		return ((SCOperator*)o)->Score;
	}
	SCOperator* op = ((SCOperator*)JB_Dict_ValueLower(SC__Opp_Dict, self->Name));
	if (op) {
		JB_SetRef(self->Obj, op);
		return op->Score;
	}
	return SC__Opp_CustomOperatorScore;
}

JB_String* JB_Msg_OriginalParseData(Message* self) {
	JB_Object* D = JB_ObjLayer(self)->Obj2;
	if (JB_Object_Isa(D, &JB_StringData)) {
		return ((JB_String*)D);
	}
	return JB_LUB[0];
}

Message* SC_Msg_OrigMsg(Message* self) {
	SCFile* f = SC_Msg_SCFile(self);
	if (JB_File_SyntaxCast(f)) {
		return JB_Msg_FindTightest(SC_SCFile_Orig(f), self->Position, false, true);
	}
	return nil;
}

JB_String* SC_Msg_OrigRender(Message* self, FastString* fs) {
	Message* n = SC_Msg_OrigMsg(self);
	if (n) {
		return JB_Msg_Render(n, fs);
	}
	return JB_Msg_Render(self, fs);
}

Message* SC_Msg_ParentForAddress(Message* self) {
	int gotaddr = 0;
	Message* p = ((Message*)JB_Ring_Parent(self));
	while (p) {
		Syntax f = p->Func;
		if ((f != JB_SyxBra) and (f != JB_SyxType)) {
			if ((f == JB_SyxBRel) and (JB_Msg_SyntaxEquals(p, JB_LUB[242], false))) {
				gotaddr++;
				if (gotaddr > 1) {
					return nil;
				}
			}
			 else {
				return p;
			}
		}
		p = ((Message*)JB_Ring_Parent(p));
	};
	return nil;
}

Message* SC_Msg_ParentPoint(Message* self) {
	Message* curr = self;
	while (curr) {
		Message* OldMsg = curr;
		curr = ((Message*)JB_Ring_Parent(curr));
		if (JB_Msg_EqualsSyx(curr, JB_SyxArg, false)) {
			return OldMsg;
		}
	};
	return nil;
}

Message* SC_Msg_ParseShaderSub(Message* self) {
	Message* rz = nil;
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Parent(self)));
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(_tmPf2)));
	JB_Decr(_tmPf2);
	JB_String* Name = JB_Incr(_tmPf1->Name);
	JB_Decr(_tmPf1);
	if ((!JB_Str_Exists(Name))) {
		Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Parent(self)));
		JB_Msg_SyntaxExpect(_tmPf3, JB_LUB[850]);
		JB_Decr(_tmPf3);
		JB_Decr(Name);
		JB_Decr(rz);
		return nil;
	}
	JB_SetRef(rz, SC_Msg_FindShader(self, Name));
	if ((!rz)) {
		JB_Decr(Name);
		JB_Decr(rz);
		return nil;
	}
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[1676]);
	JB_FS_AppendString(_fsf0, Name);
	JB_FS_AppendString(_fsf0, JB_LUB[2075]);
	JB_FS_AppendString(_fsf0, Name);
	JB_Decr(Name);
	JB_FS_AppendString(_fsf0, JB_LUB[2079]);
	JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	Message* StaticAdditions = JB_Incr(JB_Str_Parse(_tmPf4, JB_SyxArg, true));
	JB_Decr(_tmPf4);
	SC_AddToStaticSection(self, StaticAdditions);
	JB_Decr(StaticAdditions);
	JB_SafeDecr(rz);
	return rz;
}

void JB_Msg_pinn__(Message* self, FastString* fs) {
	Message* f = ((Message*)JB_Ring_First(self));
	Message* opp = ((Message*)JB_Ring_NextSib(f));
	Message* l = ((Message*)JB_Ring_NextSib(opp));
	JB_FS_SyntaxAppend(fs, f);
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, ((Message*)JB_Ring_Last(opp)));
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, l);
	JB_FS_AppendString(fs, JB_LUB[155]);
	JB_FS_SyntaxAppend(fs, ((Message*)JB_Ring_First(opp)));
}

Message* JB_Msg_PoorAnt(Message* self) {
	if (self) {
		return ((Message*)JB_Ring_Parent(self));
	}
	return nil;
}

void SC_Msg_PrepareAST(Message* self, JB_String* path) {
	Message* After = ((Message*)JB_Ring_FlatAfter(self));
	Message* msg = self;
	while (msg != After) {
		if (((JB_Msg_EqualsSyx(msg, JB_SyxTmp, false))) and ((JB_Msg_SyntaxEquals(msg, JB_LUB[1680], false)) or (JB_Msg_SyntaxEquals(msg, JB_LUB[1611], false)))) {
			SC_Func__Tran_FuncTable(msg);
		}
		msg = ((Message*)JB_Ring_FlatNext0(msg));
	};
}

int JB_Msg_PrevIndentCheck(Message* self, Message* pr) {
	int prin = JB_Msg_CleanIndent(pr);
	int chin = JB_Msg_CleanIndent(self);
	if ((!((prin != chin) and ((prin != 254) and (chin != 254))))) {
		return 0;
	}
	int IndExtra = chin - prin;
	if (JB_int_OperatorIsa(IndExtra, 2)) {
		if (IndExtra == 4) {
			return IndExtra;
		}
		if (IndExtra < 0) {
			if ((JB_int_OperatorIsa(IndExtra, 4)) or ((JB_int_OperatorIsa(chin, 4)) or (JB_Msg_InInvisArg(self)))) {
				return IndExtra;
			}
		}
		if ((IndExtra > 0) and ((JB_Msg_EqualsSyx(pr, JB_SyxTmp, false)))) {
			return IndExtra;
		}
	}
	FastString* _fsf0 = JB_FS_Constructor(nil);
	JB_FS_AppendString(_fsf0, JB_LUB[915]);
	JB_FS_AppendInt32(_fsf0, prin);
	JB_FS_AppendString(_fsf0, JB_LUB[202]);
	JB_FS_AppendInt32(_fsf0, chin);
	JB_FS_AppendString(_fsf0, JB_LUB[197]);
	JB_FreeIfDead(JB_Tk__ErrorAlwaysAdd(JB_FS_GetResult(_fsf0), self->Position));
	return 0;
}

void JB_Msg_Prm__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '(');
	{
		Message* ch = ((Message*)JB_Ring_First(self));
		Message* _firstf2 = ch;
		while (ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(ch)));
			if (_firstf2 != ch) {
				JB_FS_AppendString(fs, JB_LUB[303]);
			}
			//start;
			JB_FS_SyntaxAppend(fs, ch);
			ch = _Nf1;
		};
		;
	}
	;
	JB_FS_AppendByte(fs, ')');
}

Message* SC_Msg_QMarkRel(Message* self) {
	Message* x = self;
	while (true) {
		Message* p = ((Message*)JB_Ring_Parent(x));
		if ((SC_Msg_IsSetRel(p)) and JB_Tree_IsFirst(x)) {
			if (JB_Msg_OperatorIn(p, JB_SyxDecl)) {
				JB_Msg_SyntaxExpect(self, nil);
				return nil;
			}
			return p;
		}
		x = p;
		if ((!JB_Msg_EqualsSyx(x, JB_SyxDot, false))) {
			return nil;
		}
	};
}

void JB_Msg_Ques__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[2108]);
	JB_FS_AppendString(fs, self->Name);
	Message* n = JB_Incr(((Message*)JB_Ring_First(self)));
	if (n) {
		JB_FS_AppendByte(fs, ' ');
		JB_FS_SyntaxAppend(fs, n);
	}
	JB_Decr(n);
}

void JB_Msg_Quot__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[2109]);
	{
		Message* ch = ((Message*)JB_Ring_First(self));
		while (ch) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(ch)));
			JB_FS_SyntaxAppend(fs, ch);
			if (((Message*)JB_Ring_NextSib(ch))) {
				JB_FS_AppendString(fs, JB_LUB[303]);
			}
			ch = _Nf1;
		};
		;
	}
	;
	JB_FS_AppendString(fs, JB_LUB[213]);
}

IntRange JB_Msg_Range(Message* self) {
	return ((IntRange)ivec2{self->Position, self->Position + self->RangeLength});
}

void JB_Msg_RangeSet(Message* self, IntRange r) {
	self->Position = r[0];
	self->RangeLength = JB_Rg_Width(r);
}

int SC_Msg_RC_HasTemporary(Message* self) {
	if (((JB_Msg_EqualsSyx(self, JB_SyxFunc, false))) or (SC_Msg_IsStatementExpr(self))) {
		return SC_Refs__RefBasisStruct(self, false);
	}
	return 0;
}

NilState SC_Msg_RedundantDeclare(Message* self, NilState D) {
	JB_String* _tmPf0 = JB_Incr(SC_Msg_OrigRender(self, nil));
	JB_String* str = JB_Incr(JB_Str_OperatorPlus(_tmPf0, JB_LUB[196]));
	JB_Decr(_tmPf0);
	if (true) {
		JB_Msg_SyntaxExpect(self, str);
	}
	JB_Decr(str);
	return D;
}

NilState SC_Msg_RedundantVar(Message* self, SCDecl* dcl, NilCheckMode Test) {
	if (SC_khalai_SyntaxIs(Test, kSC__khalai_Soft) or SC_khalai_SyntaxIs(Test, kSC__khalai_While)) {
		return Test & kSC__NilState_Either;
	}
	if (SC__nil_Loops.NestDepth == 0) {
		JB_String* _tmPf0 = JB_Incr(SC_Msg_OrigRender(self, nil));
		JB_String* _tmPf2 = JB_Incr(SC_NilState_RawName(SC_Decl_NilCurr(dcl)));
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[195], _tmPf2));
		JB_Decr(_tmPf2);
		JB_String* str = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf1));
		JB_Decr(_tmPf0);
		JB_Decr(_tmPf1);
		if (true) {
			JB_Msg_SyntaxExpect(self, str);
		}
		JB_Decr(str);
	}
	return Test & kSC__NilState_Either;
}

bool SC_Msg_RefDisappears(Message* self) {
	if (self->Func == JB_SyxFunc) {
		self = ((Message*)JB_Ring_Parent(self));
	}
	{
		Message* P = self;
		while (P) {
			Syntax f = P->Func;
			if (f == JB_SyxBra) {
				0;
			}
			 else if (f == JB_SyxType) {
				SCDecl* D = SC_Msg_AsDecl(P);
				if ((!D)) {
					debugger;
					return nil;
				}
				if ((!SC_Decl_IsNormalObject(D))) {
					return true;
				}
			}
			 else if (f == JB_SyxPrm) {
				return false;
			}
			 else if (f == JB_SyxArg) {
				return true;
			}
			 else if (f == JB_SyxRel) {
				JB_Object* comp = ((Message*)JB_Tree_Second(P))->Obj;
				if (JB_Object_FastIsa(comp, &SCOperatorData)) {
					return (((bool)SC_Opp_SyntaxIs(((SCOperator*)comp), kSC__OpMode_Compare)) and (!((bool)SC_Opp_SyntaxIs(((SCOperator*)comp), kSC__OpMode_Custom))));
				}
				return false;
			}
			 else {
				return false;
			}
			P = ((Message*)JB_Ring_Parent(P));
		};
		;
	}
	;
	return false;
}

uint SC_Msg_Reg(Message* self) {
	return SC_Msg_RegOrNum(self, true);
}

uint SC_Msg_RegOrNum(Message* self, bool NeedReg) {
	if ((!NeedReg) and (JB_byte_LowerCase((JB_Str_First(self->Name))) != 'r')) {
		return JB_Msg_Int(self, 0);
	}
	int64 reg = JB_Msg_Int(self, 1);
	if (reg <= 31) {
		return ((uint)reg);
	}
	if (true) {
		JB_Msg_SyntaxExpect(self, JB_LUB[856]);
	}
	return 0;
}

void JB_Msg_Rel__(Message* self, FastString* fs) {
	JB_Msg_RenderWithSpaces(self, fs, nil);
}

bool SC_Msg_RelFix(Message* self, bool force) {
	bool rz = false;
	if (SC_Msg_AndOrExpansionTest(self) == -1) {
		return nil;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	Message* One = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_NextSib(One)));
	Message* Plus = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (force or (!Plus->Obj)) {
		int PlusScore = SC_Msg_OpScore(Plus);
		Message* SubRel = JB_Incr(((Message*)JB_Ring_NextSib(Plus)));
		if (JB_Msg_SyntaxEquals(Plus, JB_LUB[567], false)) {
			SC_Msg_FixErl(self);
		}
		 else if (JB_Msg_EqualsSyx(SubRel, JB_SyxRel, false)) {
			rz = SC_Msg_RelFix(SubRel, true);
			if ((!(JB_Msg_OperatorIn(self, JB_SyxDecl) or JB_Msg_OperatorIn(self, JB_SyxArg)))) {
				Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(SubRel)));
				Message* Two = JB_Incr(_tmPf2);
				JB_Decr(_tmPf2);
				Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_NextSib(Two)));
				JB_Decr(Two);
				Message* LessThan = JB_Incr(_tmPf3);
				JB_Decr(_tmPf3);
				Message* Last = JB_Incr(((Message*)JB_Ring_NextSib(LessThan)));
				if (SC_Msg_OpScore(LessThan) > PlusScore) {
					JB_Tree_SyntaxAppend(self, LessThan);
					JB_Tree_SyntaxAppend(self, Last);
					(JB_Ring_FirstSet(SubRel, Plus));
					(JB_Ring_FirstSet(SubRel, One));
					SC_Msg_RelFix(SubRel, true);
					rz = true;
				}
				JB_Decr(LessThan);
				JB_Decr(Last);
			}
		}
		JB_Decr(SubRel);
	}
	JB_Decr(One);
	JB_Decr(Plus);
	return rz;
}

Message* SC_Msg_RemoveTypeCasts(Message* self) {
	Message* rz = nil;
	while (((bool)rz) and ((JB_Msg_EqualsSyx(rz, JB_SyxBra, false)) or (JB_Msg_EqualsSyx(rz, JB_SyxType, false)))) {
		rz = ((Message*)JB_Ring_First(rz));
	};
	return rz;
}

JB_String* JB_Msg_Render(Message* self, FastString* fs_in) {
	FastString* fs = JB_FS__FastNew(fs_in);
	JB_FS_SyntaxAppend(fs, self);
	return JB_FS_SmartResult(fs, fs_in);
}

void JB_Msg_render_jbin_sub(Message* self, FastString* js) {
	Message* ch = self;
	Message* after = ((Message*)JB_Ring_FlatAfter(self));
	while (((bool)ch) and (ch != after)) {
		int Depth = 0;
		Message* curr = ch;
		ch = ((Message*)JB_Ring_FlatNextDepth(curr, (&Depth), true));
		JB_bin_Add(js, curr->Func, curr->Name, Depth > 0);
		JB_bin_Up(js, (-Depth));
	};
}

JB_String* JB_Msg_RenderJbin(Message* self, JB_String* shell_path, FastString* fs_in) {
	FastString* fs = JB_FS__FastNew(fs_in);
	if ((!self)) {
		return JB_LUB[0];
	}
	FastString* js = ((FastString*)fs);
	if (JB_Str_Exists(shell_path)) {
		JB_bin_Sheb(js, shell_path);
	}
	JB_FS_AppendString(js, JB__JbinHeader);
	JB_Msg_render_jbin_sub(self, js);
	return JB_FS_SmartResult(fs, fs_in);
}

void JB_Msg_RenderPrm(Message* self, FastString* fs, byte b1, byte b2) {
	JB_FS_AppendByte(fs, b1);
	JB_Msg_FSListSep(self, fs, JB_LUB[303]);
	JB_FS_AppendByte(fs, b2);
}

JB_String* SC_Msg_RenderType(Message* self) {
	JB_Object* D = self->Obj;
	if (JB_Object_FastIsa(D, &SCDeclData)) {
		return JB_Msg_Render(SC_Decl_WriteSimpleType(((SCDecl*)D)), nil);
	}
	if (JB_Object_FastIsa(D, &SCModuleData)) {
		return ((SCModule*)D)->Name;
	}
	return JB_Msg_Render(self, nil);
}

JB_String* SC_Msg_RenderTypeAndName(Message* self) {
	SCDecl* d = JB_Incr(SC_Msg_MsgDecl(self));
	if (d) {
		JB_String* _tmPf0 = JB_Incr(SC_Decl_RenderTypeAndName(d, 1));
		JB_Decr(d);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(d);
	return JB_Msg_Render(self, nil);
}

void JB_Msg_RenderWithSpaces(Message* self, FastString* fs, Message* ch) {
	if ((!(ch))) {
		ch = ((Message*)JB_Ring_First(self));
	}
	while (ch) {
		JB_FS_SyntaxAppend(fs, ch);
		ch = ((Message*)JB_Ring_NextSib(ch));
		if ((!ch)) {
			return;
		}
		JB_FS_AppendByte(fs, ' ');
	};
}

Message* SC_Msg_ReplaceInbuiltSub(Message* self, SCNode* name_space, SCDecl* self_decl) {
	if (JB_Msg_SyntaxEquals(self, JB_LUB[1811], false)) {
		return SC_Msg_FalsifyNil(self);
	}
	 else if (JB_Msg_SyntaxEquals(self, JB_LUB[1568], false)) {
		if ((!(((bool)self_decl) and SC_Decl_IsCArray(self_decl)))) {
			JB_Msg_SyntaxExpect(self, JB_LUB[1292]);
			return nil;
		}
		return JB_int_Msg(self_decl->C_Array);
	}
	 else if (JB_Msg_SyntaxEquals(self, JB_LUB[1605], false)) {
		Message* f = JB_Msg_NeedSyx(self, JB_SyxSStr);
		if (f) {
			ErrorMarker IsOK = JB_Rec_Mark(JB_StdErr);
			JB_SetRef(f->Name, JB_Str_Digest(f->Name));
			if ((!JB_ErrorMarker_SyntaxCast(IsOK)) and JB_Rec_CanAddMore(JB_StdErr, kJB__ErrorSeverity_Error)) {
				JB_Error* err = ((JB_Error*)JB_Ring_Last(JB_StdErr->Errors));
				if (err) {
					JB_Err_ShiftPosition(err, f->Position);
				}
			}
		}
		JB_Msg_BecomeStr(self, JB_SyxBra, JB_LUB[0]);
	}
	 else if (JB_Msg_SyntaxEquals(self, JB_LUB[1557], false)) {
		Message* f = JB_Msg_NeedSyx(self, JB_SyxSStr);
		if (f) {
			JB_SetRef(f->Name, JB_Str_Compress(f->Name, kJB__MZLab_Default, nil));
		}
		JB_Msg_BecomeStr(self, JB_SyxBra, JB_LUB[0]);
	}
	 else if (JB_Msg_SyntaxEquals(self, JB_LUB[1989], false)) {
		SCClass* cls = SC__Func_CurrFunc->Cls;
		if ((!cls)) {
			JB_Msg_SyntaxExpect(self, nil);
			return nil;
		}
		JB_Msg_BecomeNum(self, cls->TaskObjectCount);
	}
	 else if (JB_Msg_SyntaxEquals(self, JB_LUB[1950], false)) {
		if ((!self_decl)) {
			JB_Msg_SyntaxExpect(self, JB_LUB[1339]);
			return nil;
		}
		return SC_Msg_InBuiltSizeOf(self, name_space, self_decl, self);
	}
	 else if ((JB_Msg_SyntaxEquals(self, JB_LUB[1187], false)) or (JB_Msg_SyntaxEquals(self, JB_LUB[1188], false))) {
		SC_Create_JeeboxTest(self);
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(self, nil);
		}
	}
	return nil;
}

Message* JB_Msg_ReplaceInto(Message* self, Message* w) {
	(JB_Ring_PrevSibSet(self, w));
	JB_Tree_SyntaxAppend(w, self);
	return w;
}

Message* SC_Msg_ReplaceWith(Message* self, Message* j) {
	(JB_Ring_PrevSibSet(self, j));
	JB_Tree_Remove(self);
	return j;
}

Message* SC_Msg_ReplaceWithChild(Message* self) {
	Message* rz = nil;
	JB_SetRef(rz, ((Message*)JB_Ring_First(self)));
	(JB_Ring_PrevSibSet(self, rz));
	JB_Tree_Remove(self);
	JB_SafeDecr(rz);
	return rz;
}

JB_Object* JB_Msg_RestoreLoad(Message* self) {
	JB_Object* rz = nil;
	ObjectLoader L = ((ObjectLoader){});
	if ((!JB_LD_VerifyFormat((&L), self))) {
		JB_LD_Destructor((&L));
		JB_Decr(rz);
		return nil;
	}
	Dictionary* objs = JB_Incr(JB_Dict_Constructor(nil));
	JB_LD_Preload((&L), self, objs);
	if (JB_Rec_OK(JB_StdErr)) {
		JB_LD_LoadForReal((&L), self, objs);
	}
	JB_SetRef(rz, L.Result);
	JB_LD_Finish((&L));
	JB_ObjClass(objs);
	JB_Decr(objs);
	JB_LD_Destructor((&L));
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Msg_Resync(Message* self, Message* parent) {
	Message* curr = JB_Incr(self);
	while (((bool)curr) and (JB_FreeIfDead(((Message*)JB_Ring_Parent(curr))) != parent)) {
		JB_SetRef(curr, ((Message*)JB_Ring_Parent(curr)));
	};
	JB_SafeDecr(curr);
	return curr;
}

void SC_Msg_Safe(Message* self, FastString* fs) {
	SC_Str_Safe(self->Name, fs);
}

void SC_Msg_SafeRemove(Message* self, Syntax T) {
	if (self) {
		JB_Msg_BecomeStr(self, T, JB_LUB[0]);
		(JB_Msg_SyntaxIsSet(self, kJB__MsgParseFlags_Inserted, true));
		{
			Message* c = JB_Incr(((Message*)JB_Ring_First(self)));
			while (c) {
				Message* _Nf1 = JB_Incr((((Message*)JB_Ring_NextSib(c))));
				JB_Tree_Remove(c);
				JB_SetRef(c, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(c);
			;
		};
	}
}

void SC_Msg_SafeReplaceWith(Message* self, Message* Incoming) {
	SC_Msg_SafeRemove(self, JB_SyxBra);
	JB_Tree_SyntaxAppend(self, Incoming);
}

SCArg* SC_Msg_SCArg(Message* self, SCNode* p, Message* avoid) {
	if ((!self)) {
		return nil;
	}
	if (((bool)avoid) and ((!JB_Msg_EqualsSyx(avoid, JB_SyxArg, false)) and (!JB_Msg_EqualsSyx(avoid, JB_SyxTmp, false)))) {
		if (JB_Object_FastIsa(p, &SCArgData)) {
			return ((SCArg*)p);
		}
		debugger;
		return nil;
	}
	SCArg* R = SC_Msg_AsArg(self);
	if ((!(p))) {
		p = SC_Msg_MsgArg(self);
	}
	if ((!R) and ((bool)p)) {
		R = SC_Arg_Constructor(nil, self);
		if (JB_Object_FastIsa(p, &SCArgData)) {
			JB_SetRef(R->ParentFunc, ((SCArg*)p)->ParentFunc);
			R->IsClassArg = ((SCArg*)p)->IsClassArg;
			R->Parent = ((SCArg*)p);
		}
		 else if (JB_Object_FastIsa(p, &SCFunctionData)) {
			JB_SetRef(R->ParentFunc, p);
			R->IsClassArg = ((bool)((SCFunction*)p)->Cls);
			R->Parent = ((SCFunction*)p)->Parent;
		}
		JB_SetRef(self->Obj, R);
	}
	if (((bool)p) and ((bool)R)) {
		R->Project = p->Project;
	}
	return R;
}

SCArg* SC_Msg_SCArgNested(Message* self, Message* base, SCNode* p) {
	while (true) {
		Message* cp = JB_Msg_Ancestor(self, JB_SyxArg);
		if (cp == base) {
			return SC_Msg_SCArg(self, p, nil);
		}
		if ((!cp)) {
			return nil;
		}
		self = cp;
	};
}

SCFile* SC_Msg_SCFile(Message* self) {
	{
		Message* S = self;
		while (S) {
			JB_Object* r = JB_ObjLayer(S)->Obj;
			if (JB_Object_FastIsa(r, &SCFileData)) {
				return ((SCFile*)r);
			}
			if (JB_Msg_EqualsSyx(S, JB_SyxArg, false)) {
				return nil;
			}
			S = ((Message*)JB_Ring_Parent(S));
		};
		;
	}
	;
	return nil;
}

void JB_Msg_SCnj__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
}

void JB_Msg_SCom__(Message* self, FastString* fs) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!ch)) {
		JB_FS_AppendString(fs, JB_LUB[149]);
		JB_Decr(ch);
		return;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendString(fs, JB_LUB[149]);
	if (JB_Tree_HasOneChild(ch)) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(ch)));
		JB_FS_SyntaxAppend(fs, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else {
		JB_Msg_FSListArg(ch, fs, false);
		JB_FS_AppendByte(fs, '\n');
	}
	JB_Decr(ch);
	JB_FS_AppendString(fs, JB_LUB[120]);
}

void JB_Msg_SDot__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '.');
	JB_FS_AppendString(fs, self->Name);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
}

int SC_Msg_SelfUsedForProperty(Message* self) {
	Message* R = ((Message*)JB_Ring_Parent(self));
	if ((!(((bool)R) and ((self->Func == JB_SyxDot) and (R->Func == JB_SyxRel))))) {
		return 0;
	}
	if (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(self)), JB_LUB[1934])) {
		if (SC_Msg_DotType(self)) {
			return 1 + ((!JB_Str_Equals(JB_Msg_Name(((Message*)JB_Tree_Second(R))), JB_LUB[587], false)));
		}
	}
	return 0;
}

Message* SC_Msg_SendPerryErrors(Message* self) {
	JB_Tree_Clear(self);
	Message* _tmPf0 = JB_Incr(SC_AC__ErrorsToPerry());
	JB_Tree_SyntaxAppend(self, _tmPf0);
	JB_Decr(_tmPf0);
	return self;
}

bool SC_Msg_SettingToNil(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxDecl, false)) {
		Message* d = JB_Incr(((Message*)JB_Ring_Last(self)));
		if (((JB_Msg_EqualsSyx(d, JB_SyxRel, false))) and ((({
			Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(d)));
			bool _tmPf0 = JB_Msg_SyntaxEquals(_tmPf1, JB_LUB[1811], true);
			JB_Decr(_tmPf1);
			 _tmPf0;
		})))) {
			JB_Decr(d);
			return true;
		}
		JB_Decr(d);
	}
	return false;
}

DotUseType SC_Msg_SetType(Message* self) {
	DotUseType d = SC_Msg_DotType(self);
	if (d) {
		return d;
	}
	if (self->Func == JB_SyxAcc) {
		return kSC__DotUseType_Memory;
	}
	if (SC_Msg_OperatorIsBRel(self, JB_LUB[295])) {
		return kSC__DotUseType_Memory;
	}
	return 0;
}

bool JB_Msg_ShallowEquals(Message* self, Message* B, bool Aware) {
	return (self->Func == B->Func) and JB_Str_Equals(self->Name, B->Name, Aware);
}

void JB_Msg_Sheb__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[224]);
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendByte(fs, '\n');
}

void SC_Msg_SlidePositions(Message* self, int add) {
	{
		Message* s = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)(s)) and (s != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(s)));
			if (s->Position >= 0) {
				s->Position = (s->Position + add);
			}
			s = _N_f2;
		};
		;
	};
}

void JB_Msg_SStr__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[577]);
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendString(fs, JB_LUB[1465]);
}

void SC_Msg_StartUsingAfter(Message* self) {
	int biggest = -1;
	JB_MemoryLayer* L = JB_ObjLayer(self);
	JB_String* d = JB_Msg_OriginalParseData(self);
	if (JB_Str_Exists(d)) {
		{
			Message* s = self;
			Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
			while (((bool)(s)) and (s != _afterf1)) {
				Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(s)));
				if ((s->Position >= 0) and (JB_ObjLayer(s) == L)) {
					biggest = JB_int_OperatorMax(biggest, JB_Msg_After(s));
				}
				s = _N_f2;
			};
			;
		}
		;
		Ind b2 = JB_Str_InStr(d, JB_LUB[42], biggest, JB_int__Max(), false);
		if (JB_Ind_SyntaxCast(b2)) {
			biggest = b2;
		}
		biggest++;
	}
	JB__Tk_Using.Position = biggest;
	JB__Tk_Using.Flags = kJB__MsgParseFlags_Inserted;
	JB_Mem_Use(JB_ObjLayer(self));
}

void SC_Msg_StatementExprSet(Message* self, SCArg* arg) {
	(SC_Msg_TmpTypeSet(self, kSC__ASMtmp_kStatementExpression));
	arg->IsStatementExpr = true;
}

void JB_Msg_SThg__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
}

void JB_Msg_Str__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '"');
	JB_FS_AppendEscape(fs, self->Name);
	{
		Message* ch = JB_Incr(((Message*)JB_Ring_First(self)));
		while (ch) {
			Message* _Nf1 = JB_Incr((((Message*)JB_Ring_NextSib(ch))));
			if (JB_Msg_EqualsSyx(ch, JB_SyxEmb, false)) {
				JB_FS_AppendEscape(fs, ch->Name);
			}
			 else {
				JB_FS_AppendByte(fs, '$');
				JB_FS_AppendByte(fs, '{');
				JB_FS_SyntaxAppend(fs, ch);
				JB_FS_AppendByte(fs, '}');
			}
			JB_SetRef(ch, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(ch);
		;
	}
	;
	JB_FS_AppendByte(fs, '"');
}

Message* JB_Msg_NeedSyxOK(Message* self, Syntax Need, Syntax OK) {
	if (self) {
		Message* found = ((Message*)JB_Ring_First(self));
		if (found) {
			if ((JB_Msg_EqualsSyx(found, OK, false)) or ((JB_Msg_EqualsSyx(found, Need, false)) or (OK == JB_SyxNil))) {
				return found;
			}
		}
		if (OK != JB_SyxNil) {
			JB_Msg_CantFind(self, Need, nil, found);
		}
	}
	return nil;
}

Message* JB_Msg_NeedSyx(Message* self, Syntax s) {
	Message* found = ((Message*)JB_Ring_First(self));
	if (found) {
		if ((s == nil) or (JB_Msg_EqualsSyx(found, s, false))) {
			return found;
		}
	}
	if (self) {
		JB_Msg_CantFind(self, s, JB_LUB[0], found);
	}
	return nil;
}

Message* JB_Msg_NeedSyxInt(Message* self, Syntax s, int n) {
	Message* Ch = ((Message*)JB_Tree_Get(self, n));
	if (Ch) {
		if ((!s) or (Ch->Func == s)) {
			return Ch;
		}
	}
	JB_Msg_CantFind(self, s, nil, Ch);
	return nil;
}

Message* JB_Msg_NeedSyxName(Message* self, Syntax s, JB_String* name) {
	Message* f = JB_Msg_NeedSyx(self, s);
	if (JB_Msg_Expect(f, JB_SyxNil, name)) {
		return f;
	}
	return nil;
}

void JB_Msg_SetStr(Message* self, JB_String* key, JB_String* Value) {
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxStr, Value));
	(JB_Msg_SetMsg(self, key, _tmPf0));
	JB_Decr(_tmPf0);
}

void JB_Msg_SetMsg(Message* self, JB_String* key, Message* Value) {
	JB_Tree_SyntaxAppend(JB_Msg_AccessAdd(self, key), Value);
}

Message* JB_Msg_GetConf(Message* self, JB_String* key, bool Err) {
	{
		Message* _LoopSrcf1 = JB_Msg_ConfArg(self);
		Message* item = JB_config_ConfFirst(_LoopSrcf1);
		while (item) {
			if (JB_Msg_SyntaxEquals(item, key, true)) {
				Message* f = ((Message*)JB_Ring_First(item));
				if (f) {
					return f;
				}
				return item;
			}
			item = ((Message*)JB_Ring_NextSib(item));
		};
	}
	;
	if (Err) {
		if (true) {
			JB_Msg_SyntaxExpect(self, JB_Str_OperatorPlus(key, JB_LUB[191]));
		}
	}
	return nil;
}

void JB_Msg_AppendString(Message* self, JB_String* key) {
	JB_Msg_AppendSyx(self, JB_SyxStr, key);
}

void JB_Msg_AppendSyx(Message* self, Syntax Fn, JB_String* name) {
	JB_FreeIfDead(JB_Msg_Msg(self, Fn, name));
}

void JB_Msg_AppendNum(Message* self, int64 Num) {
	JB_String* _tmPf0 = JB_Incr(JB_int64_Render(Num, nil));
	JB_Msg_AppendSyx(self, JB_SyxNum, _tmPf0);
	JB_Decr(_tmPf0);
}

void JB_Msg_SyntaxDeprecate(Message* self, JB_String* Error) {
	JB_Rec__NewProblem(self, Error, nil);
}

bool JB_Msg_SyntaxEquals(Message* self, JB_String* name, bool Aware) {
	return ((bool)self) and JB_Str_Equals(self->Name, name, Aware);
}

bool JB_Msg_EqualsSyx(Message* self, Syntax X, bool Aware) {
	return ((bool)self) and (self->Func == X);
}

void JB_Msg_SyntaxExpect(Message* self, JB_String* Error) {
	JB_Rec__NewErrorWithNode(self, Error, nil);
}

bool JB_Msg_SyntaxIs(Message* self, MsgParseFlags F) {
	if (self) {
		return ((bool)(self->Flags & F));
	}
	return false;
}

void JB_Msg_SyntaxIsSet(Message* self, MsgParseFlags F, bool Value) {
	if (self) {
		if (Value) {
			self->Flags = (self->Flags | F);
		}
		 else {
			self->Flags = (self->Flags & (~F));
		}
	}
}

MessagePosition JB_Msg_SyntaxUsing(Message* self) {
	MessagePosition rz = ((MessagePosition){});
	rz = JB__Tk_Using;
	rz.Layer = JB_Class_Layer((&MessageData));
	JB__Tk_Using.Position = self->Position;
	JB__Tk_Using.Length = self->RangeLength;
	JB__Tk_Using.Tag = self->Tag;
	JB__Tk_Using.Flags = kJB__MsgParseFlags_Inserted;
	JB_Mem_Use(JB_ObjLayer(self));
	return rz;
}

void JB_Msg_SyntaxWarn(Message* self, JB_String* Error) {
	JB_Rec__NewWarning(self, Error, nil);
}

bool SC_Msg_TargetTest(Message* self) {
	JB_Msg_Expect(self, JB_SyxThg, nil);
	if ((!((!JB_Msg_SyntaxEquals(self, JB_LUB[1774], true)) or (!JB_Msg_SyntaxEquals(self, JB_LUB[1775], true))))) {
		JB_Msg_SyntaxExpect(self, JB_LUB[1360]);
		return nil;
	}
	if ((!(!JB_Msg_SyntaxEquals(self, JB_LUB[1760], true)))) {
		JB_Msg_SyntaxExpect(self, JB_LUB[1365]);
		return nil;
	}
	if ((!(!JB_Msg_SyntaxEquals(self, JB_LUB[2050], true)))) {
		JB_Msg_SyntaxExpect(self, JB_LUB[1366]);
		return nil;
	}
	if ((!(!JB_Msg_SyntaxEquals(self, JB_LUB[1706], true)))) {
		JB_Msg_SyntaxExpect(self, JB_LUB[1364]);
		return nil;
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[1590], true)) {
		return SC__Options_TargetDebug;
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[1894], true)) {
		return (!SC__Options_TargetDebug);
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[1868], true)) {
		return ((bool)SC__Options_PerryOutput);
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[1787], true)) {
		return SC__Options_ProjectIsMiniLib;
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[1707], true)) {
		return ((bool)SC__Imp_CurrIsManuallyImported);
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[2005], true)) {
		return true;
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[1649], true)) {
		return false;
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[1857], true)) {
		return JB_Platform__OSX();
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[2049], true)) {
		return JB_Platform__Win();
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[1755], true)) {
		return JB_Platform__Lin();
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[1606], true)) {
		return SC__Options_IsDirectTest;
	}
	return SC_SC_Targets__SyntaxAccess(self->Name);
}

Message* SC_Msg_TaskConBefore(Message* self) {
	Message* marker = JB_Msg_FindSyxName(self, JB_SyxDot, JB_LUB[1564], false);
	if (marker) {
		marker = ((Message*)JB_Ring_NextSib(marker));
	}
	 else {
		marker = ((Message*)JB_Ring_First(self));
	}
	if (marker) {
		return marker;
	}
	return JB_Msg_Msg(self, JB_SyxSheb, JB_LUB[1988]);
}

Message* SC_Msg_TempIntoBlock(Message* self, Message* ParentPlace) {
	Message* rz = nil;
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(self)));
	Message* FuncMsg = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	if (((JB_Msg_EqualsSyx(FuncMsg, JB_SyxDot, false))) and (JB_FreeIfDead(((Message*)JB_Ring_First(FuncMsg))) == self)) {
		0;
	}
	 else {
		if ((!JB_Msg_EqualsSyx(FuncMsg, JB_SyxPrm, false))) {
			SC_Msg_RefDisappears(self);
			JB_Decr(FuncMsg);
			JB_Decr(rz);
			return nil;
		}
		JB_SetRef(FuncMsg, ((Message*)JB_Ring_Parent(FuncMsg)));
	}
	SCFunction* fn = JB_Incr(SC_Msg_MsgFunc(FuncMsg));
	if ((!(((JB_Msg_EqualsSyx(FuncMsg, JB_SyxFunc, false)) or (JB_Msg_EqualsSyx(FuncMsg, JB_SyxDot, false))) and ((!fn) or (JB_ObjClass(fn) == &SCFunctionData))))) {
		debugger;
		JB_Decr(fn);
		JB_Decr(FuncMsg);
		JB_Decr(rz);
		return nil;
	}
	if ((!(((bool)fn) and ((bool)fn->ReturnType)))) {
		JB_FreeIfDead(SC_Func__TempMoveOut(self, ParentPlace));
		JB_Decr(fn);
		JB_Decr(FuncMsg);
		JB_Decr(rz);
		return nil;
	}
	JB_Decr(fn);
	MessagePosition Using = JB_Msg_SyntaxUsing(self);
	Message* arg = JB_Incr(SC_Msg_HasOwnBlock(FuncMsg));
	Message* TmpFuncThg = nil;
	Message* TmpFuncDecl = nil;
	if (arg) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Parent(FuncMsg)));
		Message* rel = JB_Incr(_tmPf1);
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Parent(rel)));
		JB_SetRef(TmpFuncDecl, _tmPf2);
		JB_Decr(_tmPf2);
		Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(rel)));
		JB_Decr(rel);
		JB_SetRef(TmpFuncThg, _tmPf3);
		JB_Decr(_tmPf3);
	}
	 else {
		JB_SetRef(arg, SC_Msg_CreateOwnBlock(FuncMsg));
		if ((!arg)) {
			JB_Decr(TmpFuncDecl);
			JB_Decr(TmpFuncThg);
			JB_Decr(arg);
			JB_MsgPos_Destructor((&Using));
			JB_Decr(FuncMsg);
			JB_Decr(rz);
			return nil;
		}
		JB_String* TmpFuncVar = JB_Incr(SC_UniqueTmpVar(SC__Func_CurrFunc, JB_LUB[1997]));
		JB_SetRef(TmpFuncDecl, SC_MakeDecl(JB_LUB[0], TmpFuncVar, FuncMsg, kSC__SCDeclInfo_Body));
		JB_SetRef(TmpFuncThg, (JB_Syx_Msg(JB_SyxThg, TmpFuncVar)));
		JB_Decr(TmpFuncVar);
		JB_SetRef(TmpFuncThg->Obj, TmpFuncDecl->Obj);
		JB_Tree_SyntaxAppend(arg, TmpFuncDecl);
		Message* rej = JB_Incr(SC_NewRejoin());
		JB_Tree_SyntaxAppend(rej, TmpFuncThg);
		JB_Tree_SyntaxAppend(arg, rej);
		JB_Decr(rej);
	}
	JB_Decr(FuncMsg);
	JB_Decr(arg);
	JB_Decr(TmpFuncThg);
	JB_String* TmpParamName = JB_Incr(SC_UniqueTmpVar(SC__Func_CurrFunc, JB_LUB[1997]));
	JB_SetRef(rz, JB_Syx_OperatorPlus(JB_SyxThg, TmpParamName));
	JB_FreeIfDead(SC_Msg_ReplaceWith(self, rz));
	Message* TmpParamDecl = JB_Incr(SC_MakeDecl(JB_LUB[0], TmpParamName, self, kSC__SCDeclInfo_Body));
	JB_Decr(TmpParamName);
	JB_SetRef(rz->Obj, TmpParamDecl->Obj);
	(JB_Ring_PrevSibSet(TmpFuncDecl, TmpParamDecl));
	JB_Decr(TmpFuncDecl);
	JB_Decr(TmpParamDecl);
	JB_MsgPos_Destructor((&Using));
	JB_SafeDecr(rz);
	return rz;
}

void JB_Msg_Test(Message* self, JB_String* new_render, JB_String* name) {
	if ((!JB_Msg_TestSub(self, new_render, name))) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1274]);
		JB_FS_AppendString(_fsf0, name);
		JB_FS_AppendString(_fsf0, JB_LUB[563]);
		JB_FS_AppendString(_fsf0, new_render);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Str_Print(_tmPf1);
		JB_Decr(_tmPf1);
		JB_Rec_Clear(JB_StdErr);
	}
}

void JB_Msg_test_style(Message* self) {
	bool b = false;
	{
		Message* s = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)(s)) and (s != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(s)));
			if ((JB_Msg_EqualsSyx(s, JB_SyxArg, false)) or (JB_Msg_EqualsSyx(s, JB_SyxList, false))) {
				b = (!b);
				((JB_Msg_SyntaxIsSet(s, kJB__MsgParseFlags_Style2, b)));
			}
			s = _N_f2;
		};
		;
	};
}

bool SC_Msg_TestFuncName(Message* self) {
	Syntax fn = self->Func;
	if ((!((fn != JB_SyxFunc) and ((fn != JB_SyxPrm) and (fn != JB_SyxList))))) {
		JB_Msg_SyntaxExpect(self, JB_LUB[1052]);
		return nil;
	}
	if (fn != JB_SyxThg) {
		JB_Msg_SyntaxExpect(self, JB_LUB[827]);
		return nil;
	}
	return true;
}

bool JB_Msg_TestSub(Message* self, JB_String* new_render, JB_String* name) {
	LeakTester* LKT = JB_Incr(JB_Lk_Constructor(nil, name));
	{
		Message* reparse = JB_Incr(JB_Str_Parse(new_render, JB_SyxArg, true));
		if ((!reparse)) {
			JB_Decr(reparse);
			JB_Decr(LKT);
			return nil;
		}
		JB_Msg_test_style(reparse);
		JB_Msg_test_style(self);
		if ((!JB_Msg__TreeCompare(self, reparse, false))) {
			JB_Decr(reparse);
			JB_Decr(LKT);
			return nil;
		}
		JB_String* self_render = JB_Incr(JB_Msg_Render(self, nil));
		if ((!JB_Str_Exists(self_render))) {
			JB_Decr(self_render);
			JB_Decr(reparse);
			JB_Decr(LKT);
			return nil;
		}
		JB_String* reparse_render = JB_Incr(JB_Msg_Render(reparse, nil));
		if ((!JB_Str_Exists(reparse_render))) {
			JB_Decr(reparse_render);
			JB_Decr(self_render);
			JB_Decr(reparse);
			JB_Decr(LKT);
			return nil;
		}
		if ((!(JB_Rec_OK(JB_StdErr) and ((JB_Str_Equals(self_render, reparse_render, false)))))) {
			JB_Decr(reparse_render);
			JB_Decr(self_render);
			JB_Decr(reparse);
			JB_Decr(LKT);
			return nil;
		}
		JB_Decr(self_render);
		JB_Decr(reparse_render);
		JB_Decr(reparse);
	}
	;
	(JB_Lk_FinalTest(LKT));
	JB_Decr(LKT);
	return true;
}

JB_String* JB_Msg_Text(Message* self, int i) {
	if (i == 0) {
		return JB_Msg_TViewCH(self)->Name;
	}
	return JB_LUB[0];
}

bool JB_Msg_TextSet(Message* self, int i, JB_String* v) {
	if (i == 0) {
		JB_SetRef(JB_Msg_TViewCH(self)->Name, v);
		return true;
	}
	return false;
}

void JB_Msg_Thg__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
}

void JB_Msg_Tmp__(Message* self, FastString* fs) {
	if (JB_Str_IsStatementName(self->Name)) {
		JB_FS_AppendString(fs, self->Name);
	}
	 else {
		JB_FS_AppendByte(fs, '+');
		JB_FS_AppendQuotedEscape(fs, self->Name);
	}
	if ((!JB_Ring_HasChildren(self))) {
		return;
	}
	Message* ch = ((Message*)JB_Ring_First(self));
	bool HasArg = false;
	while (ch) {
		if (HasArg) {
			JB_FS_LineIndent(fs);
		}
		JB_FS_AppendByte(fs, ' ');
		JB_FS_SyntaxAppend(fs, ch);
		if (JB_Msg_EqualsSyx(ch, JB_SyxArg, false)) {
			HasArg = true;
		}
		ch = ((Message*)JB_Ring_NextSib(ch));
	};
}

ASMtmp SC_Msg_TmpType(Message* self) {
	ASMtmp rz = 0;
	rz = (self->Flags & 63);
	return rz;
}

void SC_Msg_TmpTypeSet(Message* self, ASMtmp Value) {
	Value = ((self->Flags & (~63)) | Value);
	self->Flags = Value;
}

void JB_Msg_Todo__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
	JB_Msg_FSListSep(self, fs, JB_LUB[100]);
}

void SC_Msg_Tran_Isnt(Message* self, JB_String* name) {
	Message* type = JB_Incr(JB_Msg_NeedFirst(self));
	if ((!JB_Msg_ExpectLast(type, JB_LUB[0]))) {
		JB_Decr(type);
		return;
	}
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
		self->Func = JB_SyxRel;
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name));
		JB_Tree_SyntaxAppend(self, (_tmPf1));
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, self->Name));
		JB_Tree_SyntaxAppend(self, (_tmPf2));
		JB_Decr(_tmPf2);
		JB_Tree_SyntaxAppend(self, type);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(type);
}

void SC_Msg_Tran_QMark(Message* self) {
	Message* thedot = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!thedot)) {
		JB_Decr(thedot);
		return;
	}
	bool IsNormal = ((JB_Msg_EqualsSyx(thedot, JB_SyxDot, false)) or ((JB_Msg_EqualsSyx(thedot, JB_SyxSDot, false)) or (JB_Msg_EqualsSyx(thedot, JB_SyxFunc, false))));
	if ((!IsNormal)) {
		if ((!JB_Msg_EqualsSyx(thedot, JB_SyxThg, false))) {
			JB_Msg_SyntaxExpect(thedot, JB_LUB[1150]);
			JB_Decr(thedot);
			return;
		}
		self->Func = JB_SyxBra;
		JB_Decr(thedot);
		return;
	}
	if (JB_Msg_EqualsSyx(thedot, JB_SyxSDot, false)) {
		SC_Func__Tran_Sdt(thedot);
	}
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(thedot)));
	Message* inside = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (JB_Msg_EqualsSyx(thedot, JB_SyxFunc, false)) {
		if ((!JB_Msg_Expect(inside, JB_SyxBra, nil))) {
			JB_Decr(inside);
			JB_Decr(thedot);
			return;
		}
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(inside)));
		JB_SetRef(inside, _tmPf2);
		JB_Decr(_tmPf2);
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
	Message* rel = JB_Incr(SC_Msg_QMarkRel(self));
	if (rel) {
		(JB_Ring_PrevSibSet(self, thedot));
		(JB_Ring_NextSibSet(rel, self));
		JB_Msg_BecomeStr(self, JB_SyxArg, JB_LUB[0]);
		Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1461]));
		JB_FreeIfDead(SC_Msg_ReplaceWith(inside, _tmPf3));
		JB_Decr(_tmPf3);
		Message* decl = JB_Incr(SC_MakeDecl(JB_LUB[0], JB_LUB[1461], inside, 0));
		JB_Tree_SyntaxAppend(self, decl);
		Message* _tmPf4 = JB_Incr(JB_Msg_Msg(decl, JB_SyxArg, JB_LUB[0]));
		JB_Decr(decl);
		JB_Tree_SyntaxAppend(_tmPf4, rel);
		JB_Decr(_tmPf4);
		JB_Decr(rel);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(inside);
		JB_Decr(thedot);
		return;
	}
	JB_Decr(rel);
	Message* tern = JB_Incr(self);
	if (JB_Msg_OperatorIn(self, JB_SyxArg)) {
		JB_Msg_BecomeStr(self, JB_SyxArg, JB_LUB[0]);
		(JB_Msg_SyntaxIsSet(self, kJB__MsgParseFlags_Style2, true));
	}
	 else if (JB_Msg_EqualsSyx(inside, JB_SyxThg, false)) {
		self->Func = JB_SyxFunc;
	}
	 else {
		self->Func = JB_SyxBra;
		JB_SetRef(tern, JB_Msg_Msg(self, JB_SyxArg, JB_LUB[0]));
		(JB_Msg_SyntaxIsSet(tern, kJB__MsgParseFlags_Style2, true));
		JB_SetRef(tern, JB_Msg_Msg(tern, JB_SyxFunc, JB_LUB[0]));
	}
	Message* Cond = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, inside->Name));
	if (JB_Msg_OperatorIn(self, JB_SyxArg)) {
		JB_SetRef(tern, JB_Msg_Msg(self, JB_SyxTmp, JB_LUB[1698]));
		JB_Tree_SyntaxAppend(tern, Cond);
		Message* _tmPf5 = JB_Incr(JB_Msg_Msg(tern, JB_SyxArg, JB_LUB[0]));
		JB_Tree_SyntaxAppend(_tmPf5, thedot);
		JB_Decr(_tmPf5);
	}
	 else {
		Message* options = JB_Incr(JB_Msg_Msg(tern, JB_SyxList, JB_LUB[0]));
		Message* _tmPf6 = JB_Incr(JB_Msg_Msg(tern, JB_SyxPrm, JB_LUB[0]));
		JB_Tree_SyntaxAppend(_tmPf6, Cond);
		JB_Decr(_tmPf6);
		JB_Tree_SyntaxAppend(options, thedot);
		JB_Msg_AppendSyx(options, JB_SyxThg, JB_LUB[1811]);
		JB_Decr(options);
	}
	JB_Decr(thedot);
	if ((!JB_Msg_EqualsSyx(inside, JB_SyxThg, false))) {
		JB_SetRef(Cond->Name, JB_LUB[1461]);
		Message* _tmPf7 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1461]));
		JB_FreeIfDead(SC_Msg_ReplaceWith(inside, _tmPf7));
		JB_Decr(_tmPf7);
		Message* _tmPf8 = JB_Incr(SC_MakeDecl(JB_LUB[0], JB_LUB[1461], inside, 0));
		(JB_Ring_PrevSibSet(tern, _tmPf8));
		JB_Decr(_tmPf8);
	}
	JB_Decr(inside);
	JB_Decr(tern);
	JB_Decr(Cond);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Msg_Tran_Target(Message* self) {
	Message* rz = nil;
	SC_Msg_Tran_TargetSub(self);
	JB_SetRef(rz, ((Message*)JB_Ring_NextSib(self)));
	if ((!(rz))) {
		JB_SetRef(rz, ((Message*)JB_Ring_FlatAfter(self)));
	}
	JB_Tree_Remove(self);
	JB_SafeDecr(rz);
	return rz;
}

void SC_Msg_Tran_TargetSub(Message* self) {
	Message* value = JB_Msg_NeedFirst(self);
	if ((!value)) {
		return;
	}
	bool IsFalse = ((JB_Msg_EqualsSyx(value, JB_SyxBRel, false)) and (JB_Msg_SyntaxEquals(value, JB_LUB[215], false)));
	if (IsFalse) {
		value = ((Message*)JB_Ring_First(value));
	}
	Message* arg = JB_Msg_NeedSyxInt(self, JB_SyxArg, 1);
	if ((!arg)) {
		return;
	}
	if (SC_Msg_TargetTest(value) == IsFalse) {
		arg = JB_Msg_NeedSyx(((Message*)JB_Tree_Get(self, 2)), JB_SyxArg);
	}
	while (JB_Ring_HasChildren(arg)) {
		(JB_Ring_NextSibSet(self, ((Message*)JB_Tree_Pop(arg))));
	};
}

void SC_Msg_Tran_With(Message* self) {
	Message* obj = JB_Incr(JB_Msg_NeedFirst(self));
	if ((!obj)) {
		JB_Decr(obj);
		return;
	}
	Message* arg = JB_Incr(JB_Msg_NextOf(obj, JB_SyxArg));
	if (JB_Msg_EqualsSyx(obj, JB_SyxRel, false)) {
		if (true) {
			JB_Msg_SyntaxExpect(obj, nil);
		}
	}
	if ((!(((bool)arg) and (!JB_Msg_EqualsSyx(obj, JB_SyxRel, false))))) {
		JB_Decr(arg);
		JB_Decr(obj);
		return;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(obj);
	JB_String* name = JB_Incr(obj->Name);
	Message* If = JB_Incr(self);
	if (obj->Func == JB_SyxThg) {
		JB_SetRef(self->Name, JB_LUB[1698]);
	}
	 else {
		JB_Msg_BecomeStr(self, JB_SyxArg, JB_LUB[0]);
		JB_SetRef(If, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1698]));
		(JB_Ring_FirstSet(self, If));
		JB_Tree_SyntaxAppend(If, obj);
		JB_Tree_SyntaxAppend(If, arg);
		Message* dcl = JB_Incr(SC_Func__TypedTempMoveOut(obj, JB_LUB[0]));
		Message* _tmPf4 = JB_Incr(SC_Msg_DeclName(dcl));
		JB_Decr(dcl);
		JB_SetRef(name, _tmPf4->Name);
		JB_Decr(_tmPf4);
	}
	JB_Decr(obj);
	Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_First(If)));
	JB_Decr(If);
	JB_FreeIfDead(SC_Msg_WrapWith(_tmPf5, JB_SyxBra, JB_LUB[599]));
	{
		Message* ch = JB_Incr(arg);
		Message* _afterf2 = JB_Incr(((Message*)JB_Ring_FlatAfter(arg)));
		while (((bool)(ch)) and (ch != _afterf2)) {
			Message* _N_f3 = JB_Incr(((Message*)JB_Ring_FlatNext0(ch)));
			if (JB_Msg_EqualsSyx(ch, JB_SyxTmp, false)) {
				if ((JB_Msg_SyntaxEquals(ch, JB_LUB[1728], false)) or (JB_Msg_SyntaxEquals(ch, JB_LUB[1730], false))) {
					SC_Msg_Tran_Isnt(ch, JB_LUB[1731]);
					JB_SetRef(ch, ch);
					JB_Decr(_N_f3);
					continue;
				}
				 else if (JB_Msg_SyntaxEquals(ch, JB_LUB[2051], false)) {
					JB_SetRef(ch, ((Message*)JB_Ring_FlatAfter(ch)));
					JB_Decr(_N_f3);
					continue;
				}
			}
			 else if (JB_Msg_EqualsSyx(ch, JB_SyxSDot, false)) {
				ch->Func = JB_SyxDot;
				Message* _tmPf6 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name));
				(JB_Ring_FirstSet(ch, (_tmPf6)));
				JB_Decr(_tmPf6);
			}
			 else if (JB_Msg_EqualsSyx(ch, JB_SyxThg, false)) {
				if (JB_Msg_SyntaxEquals(ch, JB_LUB[1731], false)) {
					JB_SetRef(ch->Name, name);
				}
			}
			JB_SetRef(ch, _N_f3);
			JB_Decr(_N_f3);
		};
		JB_Decr(ch);
		JB_Decr(_afterf2);
		;
		JB_Decr(_tmPf5);
	}
	;
	JB_Decr(arg);
	JB_Decr(name);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Msg_TranModel(Message* self) {
	Message* Arg = JB_Incr(JB_Msg_Last(self, JB_SyxArg));
	if ((!Arg)) {
		JB_Decr(Arg);
		return nil;
	}
	Message* Shader = JB_Incr(SC_Msg_ParseShaderSub(Arg));
	JB_Decr(Arg);
	if ((!Shader)) {
		JB_Decr(Shader);
		return nil;
	}
	JB_SetRef(self->Name, JB_LUB[1973]);
	JB_SafeDecr(Shader);
	return Shader;
}

void JB_Msg_TRel__(Message* self, FastString* fs) {
	JB_Msg_RenderWithSpaces(self, fs, nil);
}

void JB_Msg_Tril__(Message* self, FastString* fs) {
	Message* f = ((Message*)JB_Ring_First(self));
	if ((!f)) {
		return;
	}
	JB_FS_AppendByte(fs, '#');
	JB_FS_SyntaxAppend(fs, f);
	Message* s = ((Message*)JB_Ring_NextSib(f));
	if ((!s)) {
		return;
	}
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, s);
	Message* l = ((Message*)JB_Ring_NextSib(s));
	if ((!l)) {
		return;
	}
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, l);
}

MaybeBool SC_Msg_Trueness(Message* self, NilState found) {
	SCDecl* d = SC_Msg_FastDecl(self);
	SCDecl* ret = SC__nil_T.Return;
	if ((!ret)) {
		return nil;
	}
	if (SC_Decl_FastMatch(d, ret)) {
		NilState n = d->NilDeclared;
		if (((bool)(n & kSC__NilState_KnownValue))) {
			return ((MaybeBool)SC_NilState_SyntaxIs(n, kSC__NilState_TrueValue));
		}
		if (((bool)(found & kSC__NilState_KnownValue))) {
			return ((MaybeBool)SC_NilState_SyntaxIs(found, kSC__NilState_TrueValue));
		}
	}
	 else if (SC_Decl_IsDataTypeOnly(ret) and SC_Decl_IsDataTypeOnly(d)) {
		while ((JB_Msg_EqualsSyx(self, JB_SyxArg, false)) or (JB_Msg_EqualsSyx(self, JB_SyxBra, false))) {
			self = ((Message*)JB_Ring_Last(self));
		};
		Message* rtf = ret->Type->False;
		if (((bool)rtf) and (((bool)self) and JB_Msg_OperatorMatches(self, rtf))) {
			return ((MaybeBool)false);
		}
	}
	return ((MaybeBool)8);
}

bool SC_Msg_TrueOrFalse(Message* self) {
	if (JB_Msg_SyntaxEquals(self, JB_LUB[2005], true)) {
		return true;
	}
	if (JB_Msg_SyntaxEquals(self, JB_LUB[1649], true)) {
		return false;
	}
	if (true) {
		JB_Msg_SyntaxExpect(self, JB_LUB[1305]);
	}
	return false;
}

Message* JB_Msg_TViewCH(Message* self) {
	if ((!JB_Msg_EqualsSyx(self, JB_SyxTmp, false))) {
		return self;
	}
	Message* ch = ((Message*)JB_Ring_First(self));
	if (ch) {
		Message* ch2 = ((Message*)JB_Ring_NextSib(ch));
		if (JB_Msg_ListViewable(ch2)) {
			return ch2;
		}
		if (JB_Msg_ListViewable(ch)) {
			return ch;
		}
	}
	return self;
}

void JB_Msg_Type__(Message* self, FastString* fs) {
	Message* obj = JB_Incr(((Message*)JB_Ring_First(self)));
	if ((!obj)) {
		JB_Decr(obj);
		return;
	}
	Message* type = JB_Incr(((Message*)JB_Ring_NextSib(obj)));
	JB_FS_SyntaxAppend(fs, obj);
	JB_Decr(obj);
	JB_FS_AppendByte(fs, '|');
	if (type) {
		JB_FS_SyntaxAppend(fs, type);
	}
	JB_Decr(type);
	JB_FS_AppendByte(fs, '|');
}

Message* SC_Msg_TypeOfArrItem(Message* self) {
	if (JB_Msg_EqualsSyx(self, JB_SyxList, false)) {
		return ((Message*)JB_Ring_First(self));
	}
	if (((JB_Msg_EqualsSyx(self, JB_SyxRel, false))) and (({
		Message* _tmPf1 = JB_Incr(((Message*)JB_Tree_Second(self)));
		bool _tmPf0 = SC_Msg_OperatorIsThing(_tmPf1, JB_LUB[1661]);
		JB_Decr(_tmPf1);
		 _tmPf0;
	}))) {
		return ((Message*)JB_Ring_First(self));
	}
	return self;
}

Message* SC_Msg_UnBra(Message* self) {
	while ((JB_Msg_EqualsSyx(self, JB_SyxBra, false)) and (!JB_Msg_EqualsSyx(((Message*)JB_Ring_First(self)), JB_SyxArg, false))) {
		self = ((Message*)JB_Ring_First(self));
	};
	return self;
}

Message* SC_Msg_UnBraType(Message* self) {
	while (((JB_Msg_EqualsSyx(self, JB_SyxType, false))) or ((JB_Msg_EqualsSyx(self, JB_SyxBra, false)) and (!JB_Msg_EqualsSyx(((Message*)JB_Ring_First(self)), JB_SyxArg, false)))) {
		self = ((Message*)JB_Ring_First(self));
	};
	return self;
}

void JB_Msg_UnEmbedStr(Message* self) {
	Message* s1 = JB_Incr(((Message*)JB_Ring_First(self)));
	if (((JB_Msg_EqualsSyx(s1, JB_SyxEmb, false))) and (!JB_FreeIfDead(((Message*)JB_Ring_NextSib(s1))))) {
		JB_Tree_Remove(s1);
		JB_SetRef(self->Name, s1->Name);
	}
	JB_Decr(s1);
}

void JB_Msg_Unit__(Message* self, FastString* fs) {
	JB_String* num = JB_Incr(JB_Msg_FirstName(self));
	JB_FS_AppendString(fs, num);
	if (((bool)JB_Str_IsHexLike(num, 0)) and (JB_Str_Last(num, 0) != '_')) {
		JB_FS_AppendByte(fs, '_');
	}
	JB_Decr(num);
	JB_FS_AppendString(fs, self->Name);
}

bool SC_Msg_UnitMatch(Message* self, JB_String* a, JB_String* b) {
	JB_String* unit = self->Name;
	if (JB_Str_Equals(unit, a, false)) {
		return true;
	}
	if (JB_Str_Equals(unit, b, false)) {
		if (true) {
			JB_Msg_SyntaxExpect(self, JB_Str_OperatorPlus(JB_LUB[1344], a));
		}
	}
	return false;
}

Message* SC_Msg_UnReachable(Message* self) {
	return SC_Msg_CausesUnReachable(self, self, nil, nil);
}

Message* SC_Msg_UpToType(Message* self) {
	Message* c = self;
	while (c) {
		Message* p = ((Message*)JB_Ring_Parent(c));
		if (JB_Msg_EqualsSyx(p, JB_SyxType, false)) {
			if ((!JB_Tree_IsLast(c))) {
				return nil;
			}
			return p;
		}
		c = p;
	};
	return nil;
}

void JB_Msg_url__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendString(fs, JB_LUB[565]);
	Message* f = JB_Incr(((Message*)JB_Ring_First(self)));
	if (f) {
		JB_FS_AppendString(fs, f->Name);
	}
	JB_Decr(f);
}

Message* SC_Msg_UseNonRefChangers(Message* self, bool parent) {
	Message* Last = self;
	Message* Curr = self;
	while (true) {
		Curr = ((Message*)JB_Ring_Parent(Curr));
		if ((!Curr)) {
			return Last;
		}
		Syntax f = Curr->Func;
		if (f == JB_SyxBra) {
		}
		 else if (f != JB_SyxType) {
			return ((Message*)JB_Ternary(parent, Curr, Last));
		}
		 else {
			JB_Object* D = Curr->Obj;
			if (JB_Object_FastIsa(D, &SCDeclData)) {
				if ((!SC_Decl_IsNormalObject(((SCDecl*)D)))) {
					return ((Message*)JB_Ternary(parent, Curr, Last));
				}
			}
		}
		Last = Curr;
	};
}

JB_String* JB_Msg_Value(Message* self) {
	if (self) {
		if ((JB_Msg_EqualsSyx(self, JB_SyxTmp, false)) and JB_Msg_OperatorIn(self, JB_SyxArg)) {
			return JB_Msg_FirstName(self);
		}
		if ((!JB_Msg_EqualsSyx(self, JB_SyxArg, false))) {
			return self->Name;
		}
	}
	return JB_LUB[0];
}

JB_String* SC_Msg_VarName(Message* self) {
	Message* ch = JB_Msg_NeedSyxInt(self, JB_SyxNil, 1);
	if (ch) {
		Syntax f = ch->Func;
		if (f == JB_SyxRel) {
			ch = ((Message*)JB_Ring_First(ch));
			f = ch->Func;
		}
		if (f == JB_SyxThg) {
			return ch->Name;
		}
		if (true) {
			JB_Msg_SyntaxExpect(ch, nil);
		}
	}
	return JB_LUB[0];
}

Message* SC_Msg_LayerWipeCopy(Message* self, Message* oof) {
	Message* rz = nil;
	if ((!oof)) {
		JB_Decr(rz);
		return SC_Msg_WipeCopy(self);
	}
	JB_MemoryLayer* old = JB_Incr(JB_Class_Layer((&MessageData)));
	JB_MemoryLayer* _tmPf0 = JB_Incr(JB_ObjLayer(oof));
	JB_Mem_Use(_tmPf0);
	JB_Decr(_tmPf0);
	JB_SetRef(rz, SC_Msg_WipeCopy(self));
	JB_Mem_Use(old);
	JB_Decr(old);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Msg_WipeCopy(Message* self) {
	Message* rz = nil;
	rz = JB_Msg_ConstructorCopy(nil, self);
	rz->Position = -1;
	{
		Message* v = ((Message*)JB_Ring_First(self));
		while (v) {
			Message* _Nf1 = (((Message*)JB_Ring_NextSib(v)));
			JB_Tree_SyntaxAppend(rz, SC_Msg_WipeCopy(v));
			v = _Nf1;
		};
		;
	}
	;
	return rz;
}

void JB_Msg_WipePositions(Message* self) {
	{
		Message* v = self;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(self));
		while (((bool)(v)) and (v != _afterf1)) {
			Message* _N_f2 = (((Message*)JB_Ring_FlatNext0(v)));
			v->Position = -1;
			v = _N_f2;
		};
		;
	};
}

void SC_Msg_WithDeclTransform(Message* self, Message* decl, Message* rel, Message* arg) {
	if ((!JB_Msg_Expect(rel, JB_SyxRel, nil))) {
		return;
	}
	Message* name = JB_Incr(JB_Msg_NeedSyx(rel, JB_SyxThg));
	if (name) {
		//using;
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(arg);
		Message* IF = JB_Incr(JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1698]));
		(JB_Ring_NextSibSet(decl, IF));
		JB_Msg_AppendSyx(IF, JB_SyxThg, name->Name);
		JB_Tree_SyntaxAppend(IF, arg);
		JB_Decr(IF);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(name);
}

bool SC_Msg_WithinLoop(Message* self, Message* stop) {
	while ((self != stop) and ((bool)self)) {
		if (SC_Msg_OperatorIsTmp(self, JB_LUB[2048]) or SC_Msg_OperatorIsTmp(self, JB_LUB[1661])) {
			return true;
		}
		self = ((Message*)JB_Ring_Parent(self));
	};
	return false;
}

bool JB_Msg_WithinType(Message* self, int Allowed) {
	Message* p = ((Message*)JB_Ring_Parent(self));
	Message* msg = self;
	while (((bool)p) and (!JB_Msg_EqualsSyx(p, JB_SyxArg, false))) {
		if ((((bool)(Allowed & 1))) and ((JB_Msg_EqualsSyx(p, JB_SyxDecl, false)))) {
			return JB_Tree_IsFirst(msg);
		}
		if ((((bool)(Allowed & 2))) and ((JB_Msg_EqualsSyx(p, JB_SyxType, false)))) {
			return JB_Tree_IsLast(msg);
		}
		msg = p;
		p = ((Message*)JB_Ring_Parent(p));
	};
	return false;
}

int SC_Msg_WrapExpr(Message* self, SCDecl* src) {
	if ((!self)) {
		return kJB_kNeedsTypeCast;
	}
	Message* W = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1808])));
	Message* _tmPf0 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1585]));
	JB_Tree_SyntaxAppend(W, (_tmPf0));
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(W, (_tmPf1));
	JB_Decr(_tmPf1);
	if (SC_Decl_IsFloat(src)) {
		JB_SetRef(W->Name, JB_LUB[1809]);
	}
	JB_FreeIfDead(SC_Msg_ReplaceWith(self, W));
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(W)));
	JB_Tree_SyntaxAppend(_tmPf2, self);
	JB_Decr(_tmPf2);
	JB_FreeIfDead(SC_TypeOfExpr(W, SC__Comp_program, nil));
	SCDecl* D = JB_Incr(SC_Msg_AsDecl(self));
	if (D) {
		JB_SetRef(W->Obj, SC_Decl_NewWrapper(D, D));
	}
	 else {
		debugger;
	}
	JB_Decr(W);
	JB_Decr(D);
	return kJB_kCastedMatch;
}

void SC_Msg_WrapFloatOrInt(Message* self, DataTypeCode T, int N, SCDecl* D) {
	if ((!((!JB_TC_SyntaxIs(T, kJB__TC_Float)) and (!JB_TC_SyntaxIs(T, kJB__TC_Int))))) {
		return;
	}
	SCClass* V = JB_Incr(SC_VecType(JB_TC_IsFloat(T), N));
	if ((!SC_Decl_OperatorExact_isa(D, V))) {
		//using;
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self);
		Message* W = JB_Incr(JB_Syx_Msg(JB_SyxType, JB_LUB[0]));
		Message* thg = JB_Incr(JB_Msg_Msg(W, JB_SyxThg, V->Name));
		JB_SetRef(thg->Obj, V->TypeNormal);
		JB_Decr(thg);
		JB_SetRef(W->Obj, V->TypeNormal);
		JB_FreeIfDead(((Message*)JB_Tree_WrapWith(self, W)));
		JB_Decr(W);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(V);
}

Message* SC_Msg_WrapWith(Message* self, Syntax f, JB_String* s) {
	Message* rz = nil;
	rz = JB_Syx_OperatorPlus(f, s);
	(JB_Ring_PrevSibSet(self, rz));
	JB_Tree_SyntaxAppend(rz, self);
	return rz;
}

void JB_Msg_XAtt__(Message* self, FastString* fs) {
	//;
	JB_FS_AppendByte(fs, ' ');
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendString(fs, JB_LUB[590]);
	JB_FS_SyntaxAppend(fs, ((Message*)JB_Ring_First(self)));
	JB_FS_AppendByte(fs, '"');
	//;
}

void JB_Msg_XCDT__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[576]);
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendString(fs, JB_LUB[1423]);
}

void JB_Msg_XCom__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[574]);
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendString(fs, JB_LUB[310]);
}

void JB_Msg_XML__(Message* self, FastString* fs) {
	JB_FS_AppendByte(fs, '<');
	JB_FS_AppendString(fs, self->Name);
	Message* atts = ((Message*)JB_Ring_First(self));
	{
		Message* A = ((Message*)JB_Ring_First(atts));
		while (A) {
			Message* _Nf2 = ((Message*)JB_Ring_NextSib(A));
			JB_FS_SyntaxAppend(fs, A);
			A = _Nf2;
		};
		;
	}
	;
	Message* Children = ((Message*)JB_Ternary(((bool)atts), ((Message*)JB_Ring_NextSib(atts)), nil));
	if ((!Children)) {
		JB_FS_AppendString(fs, JB_LUB[401]);
		return;
	}
	JB_FS_AppendByte(fs, '>');
	bool SingleText = ((JB_Msg_EqualsSyx(Children, JB_SyxXTxt, false))) and ((!((Message*)JB_Ring_NextSib(Children))));
	if (SingleText) {
		JB_FS_SyntaxAppend(fs, Children);
	}
	 else {
		fs->Indent++;
		{
			Message* ch = Children;
			while (ch) {
				JB_FS_LineIndent(fs);
				JB_FS_SyntaxAppend(fs, ch);
				ch = ((Message*)JB_Ring_NextSib(ch));
			};
			;
		}
		;
		fs->Indent--;
		JB_FS_LineIndent(fs);
	}
	//;
	JB_FS_AppendString(fs, JB_LUB[578]);
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendByte(fs, '>');
	//;
}

void JB_Msg_XPI__(Message* self, FastString* fs) {
	JB_FS_AppendString(fs, JB_LUB[584]);
	if (JB_Ring_HasChildCount(self, 1)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(self)));
		JB_FS_SyntaxAppend(fs, _tmPf0);
		JB_Decr(_tmPf0);
	}
	 else {
		JB_Msg_FSListArg(self, fs, false);
		JB_FS_AppendByte(fs, '\n');
	}
	JB_FS_AppendString(fs, JB_LUB[600]);
}

void JB_Msg_XTxt__(Message* self, FastString* fs) {
	JB_FS_AppendMultiReplace(fs, self->Name, JB__Constants_XML_EscapeStr, JB_StdErr);
}

bool JB_Msg_Yes(Message* self) {
	if (self) {
		return JB_Str_Yes(self->Name);
	}
	return false;
}

void JB_Msg_Yoda__(Message* self, FastString* fs) {
	Message* f = ((Message*)JB_Ring_First(self));
	Message* s = ((Message*)JB_Ring_NextSib(f));
	Message* l = ((Message*)JB_Ring_NextSib(s));
	JB_FS_AppendString(fs, JB_LUB[2098]);
	JB_FS_SyntaxAppend(fs, l);
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, f);
	JB_FS_AppendByte(fs, ' ');
	JB_FS_SyntaxAppend(fs, s);
}

SyntaxObj* JB_Msg__GetFunc(Message* msg) {
	SyntaxObj* _tmPf0 = JB_Incr(((SyntaxObj*)JB_Dict_Syntax(JB__SyxDict_, msg->Name)));
	if ((!_tmPf0)) {
		FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf1, JB_LUB[738]);
		JB_FS_AppendString(_fsf1, msg->Name);
		JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		JB_Msg_SyntaxExpect(msg, _tmPf2);
		JB_Decr(_tmPf2);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* SC_Msg__NilchCompare() {
	if (JB_ReturnSelfEqNil) {
		return JB_ReturnSelfEqNil;
	}
	Message* _tmPf0 = JB_Incr(JB_Str_ParseJbin(((JB_LUB[19])), kJB__int64_max));
	JB_SetRef(JB_ReturnSelfEqNil, _tmPf0);
	JB_Decr(_tmPf0);
	return JB_ReturnSelfEqNil;
}

bool JB_Msg__TreeCompare(Message* orig, Message* reparse, bool PrintIfSame) {
	if ((!(((bool)orig) and ((bool)reparse)))) {
		return JB_CompareError(orig, reparse);
	}
	if ((orig->Func != reparse->Func) or ((!JB_Str_Equals(orig->Name, reparse->Name, false)))) {
		return JB_CompareError(orig, reparse);
	}
	Message* r1 = ((Message*)JB_Ring_First(reparse));
	Message* s1 = ((Message*)JB_Ring_First(orig));
	while (((bool)r1) or ((bool)s1)) {
		if ((!JB_Msg__TreeCompare(s1, r1, false))) {
			return nil;
		}
		r1 = ((Message*)JB_Ring_NextSib(r1));
		s1 = ((Message*)JB_Ring_NextSib(s1));
	};
	if (PrintIfSame) {
		JB_Msg__TreeComparePrint(orig);
	}
	return true;
}

void JB_Msg__TreeComparePrint(Message* orig) {
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[1329]);
	JB_String* _tmPf1 = JB_Incr(JB_Msg_MiniName(orig, JB_LUB[0]));
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(_fsf0, JB_LUB[163]);
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_PrintLine(_tmPf2);
	JB_Decr(_tmPf2);
}


MessageID* JB_ID_Constructor(MessageID* self, JB_String* Name, Syntax Fn, uint64 ID) {
	if (self == nil) {
		self = ((MessageID*)JB_NewClass(&MessageIDData));
	}
	JB_Str_Clone(self, Name);
	self->Func = Fn;
	self->Obj = nil;
	self->ID = ID;
	return self;
}

void JB_ID_Destructor(MessageID* self) {
	JB_Clear(self->Obj);
}

JB_String* JB_ID_Render(MessageID* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_String* _tmPf0 = JB_Incr(JB_Syx_Name(self->Func));
	JB_FS_AppendString(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(fs, '@');
	JB_FS_AppendQuotedEscape(fs, self);
	JB_String* _tmPf1 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

bool JB_ID__IDSorter(JB_Object* a, JB_Object* b) {
	MessageID* aa = ((MessageID*)a);
	MessageID* bb = ((MessageID*)b);
	int64 diff = bb->ID - aa->ID;
	if (diff) {
		return diff > 0;
	}
	return ((uint64)aa) < ((uint64)bb);
}


bool SC_Decl_AlreadyContains(SCDecl* self) {
	SCDecl* ty = self->Type->Contained;
	SCDecl* c = self->Contains;
	if (((bool)ty) and ((bool)c)) {
		return SC_Decl_MiniMatch(c, ty, 0);
	}
	return false;
}

JB_String* SC_Decl_AutoCompleteName(SCDecl* self) {
	JB_String* n = JB_Incr(SC_Decl_RealName(self));
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(fs, n);
	JB_FS_AppendMultiByte(fs, ' ', JB_int_OperatorMax((32 - JB_Str_Length(n)), 1));
	JB_Decr(n);
	JB_FS_AppendByte(fs, '|');
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteType(self, 0));
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_FS_AppendByte(fs, '|');
	JB_String* _tmPf1 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Decl_BecomeReal(SCDecl* self) {
	if (!(SC_NilState_SyntaxIs(self->NilDeclared, kSC__NilState_Stated))) {
		self->NilDeclared = kSC__NilState_Real;
	}
}

SCDecl* SC_Decl_Better_Numeric(SCDecl* self, SCDecl* o, OpMode Mode) {
	DataTypeCode S = self->Type->TypeInfo;
	DataTypeCode T = o->Type->TypeInfo;
	if (!(SC_OpMode_SyntaxIs(Mode, kSC__OpMode_MakesSigned))) {
		if ((S & (~kJB__TC_sign)) == (T & (~kJB__TC_sign))) {
			return self;
		}
	}
	SCClass* cls = SC_TC_Better_Numeric_Sub(S, T, Mode);
	if (cls->TypeInfo == S) {
		return self;
	}
	if (cls->TypeInfo == T) {
		return o;
	}
	return cls->TypeNormal;
}

int SC_Decl_ByteSize(SCDecl* self) {
	if (self->PointerCount) {
		return JB_Platform__PointerBytes();
	}
	int n = SC_Class_CalculateSize(self->Type, 0);
	if (SC_Decl_IsCArray(self)) {
		n = (n * self->C_Array);
	}
	return n;
}

bool SC_Decl_CanNilCheck(SCDecl* self) {
	if ((!self)) {
		return nil;
	}
	if (self->PointerCount) {
		return true;
	}
	if (SC_Decl_IsCArray(self)) {
		return false;
	}
	return self->Type->HasNilChecker;
}

bool SC_Decl_CantBeNilInCpp(SCDecl* self) {
	if (self->PointerCount) {
		return nil;
	}
	return (SC_Decl_IsCArray(self)) or ((SC_Class_IsStruct(self->Type)) or (SC_Decl_IsNumeric(self) > 1));
}

SCDecl* SC_Decl_CanUpgradeInternalPointer(SCDecl* self) {
	SCDecl* infernal = self->Internal;
	if ((SC_Decl_SyntaxIs(infernal, kSC__SCDeclInfo_Local)) and ((bool)infernal->NilReg)) {
		return infernal;
	}
	return nil;
}

bool SC_Decl_CanUseDefault(SCDecl* self) {
	if (SC_Decl_IsNil(self)) {
		debugger;
		return false;
	}
	if (SC_Class_IsStruct(self->Type) and (!self->PointerCount)) {
		return (SC_Decl_IsNormalStruct(self));
	}
	return true;
}

bool SC_Decl_CanWrap(SCDecl* self) {
	if (((bool)self->PointerCount) or ((bool)self->Type->FuncProto)) {
		return true;
	}
	if (SC_Decl_IsNormalStruct(self)) {
		return nil;
	}
	if (SC_Decl_IsCArray(self)) {
		return nil;
	}
	if (self->Type->TypeInfo == kJB__TC_UnusedType) {
		return nil;
	}
	return true;
}

SCDecl* SC_Decl_CheckMath(SCDecl* self, Message* exp) {
	if (self->PointerCount == 1) {
		if (self->Type == JB_TypeVoid_) {
			JB_Msg_SyntaxExpect(exp, JB_LUB[699]);
		}
	}
	return self;
}

bool SC_Decl_ConstCheck(SCDecl* self, Message* ln, Message* RN, SCDecl* rc) {
	if (ln) {
		if ((!((SC_Msg_IsAssignable(ln)) and ((!SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_Const)))))) {
			JB_Msg_SyntaxExpect(ln, JB_LUB[1095]);
			return nil;
		}
		if ((!RN)) {
			return true;
		}
	}
	bool _tmPf0 = ((!RN) or (SC_Decl_ConstInRange(self, RN, rc)));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(RN, JB_LUB[1000]);
		return nil;
	}
	return _tmPf0;
}

bool SC_Decl_ConstInRange(SCDecl* self, Message* RN, SCDecl* rt) {
	if (JB_Msg_EqualsSyx(RN, JB_SyxNum, false)) {
		if (SC_Msg_IsInt(RN)) {
			return SC_Decl_ConstInRangeSub(self, JB_Msg_Int(RN, 0));
		}
	}
	 else if (((JB_Msg_EqualsSyx(RN, JB_SyxThg, false))) and ((SC_Decl_SyntaxIs(rt, kSC__SCDeclInfo_DataOnlyConst)) and (SC_Decl_IsNormalNumber(rt) and SC_Decl_IsInteger(rt)))) {
		Message* def = rt->Default;
		if (def) {
			return SC_Decl_ConstInRangeSub(self, JB_Msg_Int(def, 0));
		}
	}
	return true;
}

bool SC_Decl_ConstInRangeSub(SCDecl* self, int64 Value) {
	DataTypeCode T = self->Type->TypeInfo;
	int S = JB_TC_ByteSize(T);
	if (S == 8) {
		return true;
	}
	if (JB_TC_IsInt(T)) {
		bool ign = JB_TC_IsSigned(T);
		if (S == 4) {
			if (ign) {
				return (Value >= JB_int__Min()) and (Value <= JB_int__Max());
			}
			 else {
				return (Value >= -1) and (Value <= 4294967295);
			}
		}
		 else if (S == 2) {
			if (ign) {
				return (Value >= kJB__int16_min) and (Value <= kJB__int16_max);
			}
			 else {
				return (Value >= -1) and (Value <= 65535);
			}
		}
		 else if (S == 1) {
			if (ign) {
				return (Value >= kJB__char_min) and (Value <= kJB__char_max);
			}
			 else {
				return (Value >= -1) and (Value <= 255);
			}
		}
	}
	return true;
}

SCDecl* SC_Decl_Constructor(SCDecl* self, SCClass* type) {
	if (self == nil) {
		self = ((SCDecl*)JB_NewClass(&SCDeclData));
	}
	SC_Named_Constructor(self);
	self->C_Array = 0;
	self->HiderFunc = nil;
	self->IsLookupOnly = nil;
	JB_StringC* _tmPf0 = JB_LUB[0];
	self->StringData = JB_Incr(_tmPf0);
	self->Internal = nil;
	self->Contains = nil;
	self->Default = nil;
	self->DReg = ((AsmReg){});
	self->PointerCount = 0;
	self->NilReg = 0;
	self->NilAllocDepth = 0;
	self->Type = JB_Incr(type);
	self->NilDeclared = kSC__NilState_Either;
	self->Info = kSC__SCDeclInfo_Altered;
	return self;
}

SCDecl* SC_Decl_Containedfix(SCDecl* self) {
	SCDecl* rz = nil;
	SCClass* t = self->Type;
	rz = ((SCDecl*)JB_Ternary(t->TypeNormal == self, SC_Decl_CopyDecl(self, false), self));
	JB_SetRef(rz->Contains, t->SelfDecl->Contains);
	return rz;
}

SCDecl* SC_Decl_ContainedReplace(SCDecl* self, SCDecl* contains, bool NeedsName) {
	if (SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_UpgradeableContained)) {
		if (((!NeedsName) or (!JB_Str_Exists(self->Name))) and SC_Decl_SameForReplace(self, contains)) {
			return contains;
		}
		SCClass* CType = contains->Type;
		bool SameType = CType == self->Type;
		if (SameType) {
			if (SC_Decl_SameForReplace(self, contains)) {
				return self;
			}
		}
		SCDecl* C = SC_Decl_CopyDecl(self, false);
		JB_SetRef(C->Type, CType);
		JB_SetRef(C->Contains, contains->Contains);
		((SC_Decl_SyntaxIsSet(C, kSC__SCDeclInfo_UpgradeableContained, (!SameType))));
		return C;
	}
	SCDecl* inside = self->Contains;
	if (((bool)inside) and ((inside != contains) and SC_Decl_SyntaxIs(inside, kSC__SCDeclInfo_UpgradeableContained))) {
		self = SC_Decl_CopyDecl(self, false);
		JB_SetRef(self->Contains, contains);
	}
	return self;
}

bool SC_Decl_ContainsMatch(SCDecl* self, SCDecl* o, int TypeCast) {
	if (((bool)(TypeCast & kJB_kTypeCastIgnoreContained))) {
		return true;
	}
	SCDecl* oc = SC_Decl_ReallyContains(o);
	SCDecl* sc = SC_Decl_ReallyContains(self);
	if ((oc == sc) or ((!(((bool)sc) and ((bool)oc))) or (!o->Contains))) {
		return true;
	}
	return SC_uint_IsNormalMatch(SC_Decl_TypeMatch(sc, oc, 0, nil));
}

SCDecl* SC_Decl_CopyDecl(SCDecl* self, bool ForNewVariable) {
	SCDecl* dcl = JB_Incr(SC_Decl_Constructor(nil, self->Type));
	SC_Decl_CopyTypeInfoTo(self, dcl);
	(SC_Decl_NameSet(dcl, self->Name));
	JB_SetRef(dcl->Default, self->Default);
	((SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_Borrowed, (!ForNewVariable) and (SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_Borrowed)))));
	JB_SafeDecr(dcl);
	return dcl;
}

void SC_Decl_CopyTypeInfoTo(SCDecl* self, SCDecl* Dcl) {
	JB_SetRef(Dcl->Type, self->Type);
	Dcl->PointerCount = self->PointerCount;
	JB_SetRef(Dcl->Contains, self->Contains);
	JB_SetRef(Dcl->Internal, self->Internal);
	SCDeclInfo cpyflags = kSC__SCDeclInfo_DclCopied;
	Dcl->Info = (Dcl->Info & (~cpyflags));
	Dcl->Info = (Dcl->Info | (self->Info & cpyflags));
	Dcl->C_Array = self->C_Array;
	Dcl->NilDeclared = self->NilDeclared;
}

bool SC_Decl_CouldUpgradeToReal(SCDecl* self) {
	return SC_Decl_TypeSuffers(self) and (!SC_Decl_NilStated(self));
}

Message* SC_Decl_CreateDefault(SCDecl* self, Message* errs, bool isfunc) {
	if (SC_Decl_CantBeNilInCpp(self)) {
		if (isfunc) {
			return SC_Decl_CreateStructNil(self, errs);
		}
		return nil;
	}
	if (self->PointerCount) {
		if (isfunc) {
			return SC_Msg_CreateNil(errs);
		}
		return nil;
	}
	Message* d = JB_Incr(self->Type->Defawlt);
	if (d) {
		Message* _tmPf0 = JB_Incr(JB_Msg_Copy(d, errs));
		JB_Decr(d);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(d);
	return nil;
}

Message* SC_Decl_CreateSimpleTypeCast(SCDecl* self, Message* exp) {
	Message* rz = nil;
	Message* Curr = JB_Incr(exp);
	while (JB_Msg_EqualsSyx(Curr, JB_SyxBra, false)) {
		JB_SetRef(Curr->Obj, self);
		JB_SetRef(Curr, ((Message*)JB_Ring_First(Curr)));
	};
	JB_Decr(Curr);
	JB_SetRef(rz, JB_Syx_Msg(JB_SyxType, JB_LUB[564]));
	(JB_Ring_PrevSibSet(exp, rz));
	JB_Tree_SyntaxAppend(rz, exp);
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteType(self, 0));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SetRef(rz->Obj, self);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Decl_CreateStructNil(SCDecl* self, Message* where) {
	Message* rz = nil;
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(where);
	JB_SetRef(rz, SC_Decl_CreateStructNilSub(self));
	JB_SetRef(rz->Obj, self);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Decl_CreateStructNilSub(SCDecl* self) {
	Message* rz = nil;
	if (SC_Decl_IsCArray(self)) {
		JB_Decr(rz);
		return JB_Syx_Msg(JB_SyxArg, JB_LUB[0]);
	}
	JB_SetRef(rz, JB_Syx_OperatorPlus(JB_SyxType, JB_LUB[564]));
	JB_Msg_AppendSyx(rz, JB_SyxArg, JB_LUB[0]);
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteType(self, 0));
	JB_Tree_SyntaxAppend(rz, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SafeDecr(rz);
	return rz;
}

Message* SC_Decl_DeclToAddr(SCDecl* self, SCDecl* P0) {
	Message* rz = nil;
	rz = JB_Syx_OperatorPlus(JB_SyxBRel, JB_LUB[242]);
	JB_Tree_SyntaxAppend(rz, SC_Decl_DeclToDot(self, P0));
	JB_SetRef(rz->Obj, SC_Decl_GetAddress(self, kSC__DeclMode_Always));
	return rz;
}

Message* SC_Decl_DeclToDot(SCDecl* self, SCDecl* P0) {
	Message* rz = nil;
	rz = JB_Syx_OperatorPlus(JB_SyxDot, self->Name);
	JB_SetRef(JB_Msg_Msg(rz, JB_SyxThg, JB_LUB[1934])->Obj, P0);
	JB_Msg_AppendSyx(rz, JB_SyxEmb, JB_LUB[0]);
	JB_SetRef(rz->Obj, self);
	return rz;
}

SCDecl* SC_Decl_DefaultToReal(SCDecl* self) {
	return SC_Decl_MakeExistance(self, kSC__NilState_Real, nil);
}

SCDecl* SC_Decl_DeReference(SCDecl* self, Message* brel, SCNode* name_space, bool IsAccess) {
	SCDecl* c = SC_Decl_DeReferenceSub(self, brel, name_space, IsAccess);
	if (c) {
		return c;
	}
	if (true) {
		JB_Msg_SyntaxExpect(((Message*)JB_Ring_First(brel)), JB_LUB[698]);
	}
	return nil;
}

SCDecl* SC_Decl_DeReferenceSub(SCDecl* self, Message* brel, SCNode* name_space, bool IsAccess) {
	if (SC_Decl_IsCArray(self)) {
		if ((!IsAccess)) {
			JB_Msg_SyntaxExpect(brel, JB_LUB[1361]);
		}
		SCDecl* i = self->Internal;
		if ((!i)) {
			return nil;
		}
		if (SC_Decl_TypeSuffers(i)) {
			return SC_Decl_MakeNewOptional(i);
		}
		return i;
	}
	if (self->PointerCount > 0) {
		return self->Internal;
	}
	if ((!IsAccess) and SC_Decl_IsNormalObject(self)) {
		JB_Msg_BecomeStr(brel, JB_SyxDot, JB_LUB[1656]);
		JB_Msg_AppendSyx(brel, (JB_SyxPrm), JB_LUB[0]);
		return SC_TypeOfExpr(brel, name_space, nil);
	}
	return nil;
}

void SC_Decl_Destructor(SCDecl* self) {
	JB_Clear(self->IsLookupOnly);
	JB_Clear(self->StringData);
	JB_Clear(self->Internal);
	JB_Clear(self->Contains);
	JB_Clear(self->Default);
	JB_Clear(self->Type);
	SC_Named_Destructor(self);
}

SCDecl* SC_Decl_DownGrade(SCDecl* self) {
	if ((!SC_Decl_IsNormalObject(self))) {
		return self;
	}
	SCClass* y = self->Type->DowngradeTo;
	if (y) {
		return y->TypeNormal;
	}
	return self;
}

void SC_Decl_ExpectFail(SCDecl* self, SCDecl* o, Message* errnode, Message* backup) {
	JB_Incr(errnode);
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(fs, JB_LUB[1330]);
	JB_FreeIfDead(SC_Decl_RenderTypeName(self, fs));
	JB_FS_AppendString(fs, JB_LUB[255]);
	JB_FreeIfDead(SC_Decl_RenderTypeNameNicer(o, fs));
	JB_FS_AppendString(fs, JB_LUB[258]);
	if ((!(errnode))) {
		JB_SetRef(errnode, backup);
	}
	if (true) {
		JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(fs));
		JB_Msg_SyntaxExpect(errnode, _tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(fs);
	JB_Decr(errnode);
}

Message* SC_Decl_ExpectMatch(SCDecl* self, SCDecl* O, int TypeCast, Message* exp, Message* ErrNode) {
	if (((bool)exp) and SC_Msg_IsSmallInt(exp, O)) {
		TypeCast = (TypeCast | kJB_kTypeCastFromZero);
	}
	uint Matched = SC_Decl_TypeMatch(self, O, TypeCast, exp);
	if ((Matched == kJB_kCastedMatch) or (Matched == kJB_kLossyCastedMatch)) {
		return SC_Msg_CastedParent(exp);
	}
	if (Matched == kJB_kNoMatch) {
		SC_Decl_ExpectFail(self, O, ErrNode, exp);
		SC_Decl_TypeMatch(self, O, TypeCast, exp);
	}
	return exp;
}

void SC_Decl_ExpectRelMatch(SCDecl* self, SCDecl* O, Message* exp, Message* side, Message* ErrNode) {
	int Cast = kJB_kTypeCastTrue;
	if ((!side)) {
		Cast = (Cast | kJB_kTypeCastBothWays);
	}
	JB_FreeIfDead(SC_Decl_ExpectMatch(self, O, Cast, exp, ErrNode));
	if ((SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_Self)) and (SC_Func_SyntaxIs(SC__Func_CurrFunc, kSC__FunctionType_Destructor))) {
		if (true) {
			JB_Msg_SyntaxExpect(exp, JB_LUB[1399]);
		}
	}
	 else if (((bool)side) and ((SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_Local)) and SC_Decl_IsObject(self))) {
		SC_Decl_MarkAsRefAltered(self);
	}
}

SCDecl* SC_Decl_ExtractAmount(SCDecl* self, Message* Prms, SCNode* name_space) {
	SCDecl* rz = nil;
	JB_SetRef(rz, SC_Decl_ExtractAmountSub(self, Prms, name_space));
	if ((!rz)) {
		JB_Msg_SyntaxExpect(Prms, JB_LUB[857]);
	}
	JB_SafeDecr(rz);
	return rz;
}

SCDecl* SC_Decl_ExtractAmountSub(SCDecl* self, Message* Prms, SCNode* name_space) {
	SCDecl* rz = nil;
	Message* num = JB_Incr(((Message*)JB_Ring_First(Prms)));
	if (JB_Msg_EqualsSyx(num, JB_SyxUnit, false)) {
		JB_FreeIfDead(SC_TypeOfUnit(num, nil, nil));
	}
	if (JB_Msg_Expect(num, JB_SyxNum, nil) and JB_Msg_ExpectLast(num, JB_LUB[0])) {
		JB_SetRef(rz, SC_Decl_CopyDecl(self, false));
		SC_Decl_IsCarray(rz, JB_Msg_Int(num, 0), self);
		JB_SetRef(rz->Default, JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
	}
	JB_Decr(num);
	JB_SafeDecr(rz);
	return rz;
}

bool SC_Decl_FastMatch(SCDecl* self, SCDecl* O) {
	if (O->Type != self->Type) {
		return nil;
	}
	if (O->PointerCount != self->PointerCount) {
		return nil;
	}
	return O->C_Array == self->C_Array;
}

bool SC_Decl_Found(SCDecl* self) {
	if (self) {
		if (self->Type != JB_TypeVoid_) {
			return true;
		}
		if (self->PointerCount) {
			return true;
		}
	}
	return false;
}

DataTypeCode SC_Decl_GameType(SCDecl* self) {
	if ((self->PointerCount)) {
		JB_Msg_SyntaxExpect(self->Source, JB_LUB[728]);
		return 0;
	}
	SCClass* T = JB_Incr(self->Type);
	if ((!SC_Class_HasGameType(T))) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1186]);
		JB_FS_AppendString(_fsf0, self->Type->Name);
		JB_FS_AppendString(_fsf0, JB_LUB[258]);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Msg_SyntaxExpect(self->Source, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Decr(T);
		return 0;
	}
	DataTypeCode _tmPf2 = T->TypeInfo;
	JB_Decr(T);
	return _tmPf2;
}

SCDecl* SC_Decl_GetAddress(SCDecl* self, DeclMode Purpose) {
	SCDecl* rz = nil;
	JB_SetRef(rz, SC_Decl_Constructor(nil, self->Type));
	SC_Decl_CopyTypeInfoTo(self, rz);
	JB_SetRef(rz->Internal, self);
	rz->PointerCount++;
	rz->C_Array = 0;
	NilState ns = kSC__NilState_Realish;
	if (Purpose == kSC__DeclMode_Globals) {
		ns = kSC__NilState_Optional;
	}
	 else if (!(SC_DeclMode_SyntaxIs(Purpose, kSC__DeclMode_FuncParam))) {
		ns = (ns | kSC__NilState_Stated);
	}
	rz->NilDeclared = ns;
	if (rz->PointerCount > 4) {
		JB_Msg_SyntaxExpect(self->Source, JB_LUB[1324]);
	}
	JB_SafeDecr(rz);
	return rz;
}

SCDecl* SC_Decl_GetCArray(SCDecl* self, int Amount) {
	SCDecl* rz = nil;
	JB_SetRef(rz, SC_Decl_Constructor(nil, self->Type));
	SC_Decl_CopyTypeInfoTo(self, rz);
	SC_Decl_IsCarray(rz, Amount, self);
	JB_SafeDecr(rz);
	return rz;
}

SCIterator* SC_Decl_GetIteratorAny(SCDecl* self, JB_String* name, Message* node) {
	if (SC_Decl_IsCArray(self)) {
		return SC__Iter_carray;
	}
	SCClass* cls = JB_Incr(self->Type);
	if (((bool)self->PointerCount) and (!SC_Class_IsStruct(cls))) {
		JB_Decr(cls);
		return SC__Iter_pointer;
	}
	SCIterator* _tmPf0 = JB_Incr(SC_Class_GetIteratorAny(cls, name, node));
	JB_Decr(cls);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

bool SC_Decl_HasStruct(SCDecl* self) {
	return (!self->PointerCount) and SC_Class_IsStruct(self->Type);
}

SCFunction* SC_Decl_HasStructDestructor(SCDecl* self) {
	if (SC_Decl_HasStruct(self)) {
		return self->Type->DestructorFunc;
	}
	return nil;
}

SCDecl* SC_Decl_HighestArrayContainMatch(SCDecl* self, SCDecl* Other, Message* exp) {
	SCDecl* rz = nil;
	JB_SetRef(rz, SC_Decl_HighestMatch(self, Other, exp));
	if ((!(rz))) {
		JB_SetRef(rz, self);
	}
	JB_SafeDecr(rz);
	return rz;
}

SCDecl* SC_Decl_HighestMatch(SCDecl* self, SCDecl* Other, Message* exp) {
	if ((!Other)) {
		return nil;
	}
	SCClass* M = self->Type;
	SCClass* o = Other->Type;
	if (o == M) {
		return nil;
	}
	if (o->Depth > M->Depth) {
		o = SC_Class_GoUpTo(o, M->Depth);
	}
	 else if (o->Depth < M->Depth) {
		M = SC_Class_GoUpTo(M, o->Depth);
	}
	while (o != M) {
		SCClass* o2 = o->Super;
		if ((!o2)) {
			break;
		}
		o2->IsBuiltin;
		o = o2;
		M = M->Super;
		if ((!M)) {
			return nil;
		}
	};
	return o->TypeNormal;
}

void SC_Decl_IsCarray(SCDecl* self, int Size, SCDecl* Of) {
	self->PointerCount = 0;
	self->C_Array = Size;
	self->NilDeclared = kSC__NilState_Real;
	JB_SetRef(self->Internal, Of);
	self->NilDeclared = kSC__NilState_Realish;
}

bool SC_Decl_IsCArray(SCDecl* self) {
	return self->C_Array > 0;
}

bool SC_Decl_IsConstOf(SCDecl* self, SCDecl* b) {
	if ((!SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_Const))) {
		return nil;
	}
	if (self == b) {
		return true;
	}
	Message* _tmPf0 = self->Default;
	if ((!_tmPf0)) {
		return nil;
	}
	return _tmPf0->Obj == b;
}

bool SC_Decl_IsDataTypeOnly(SCDecl* self) {
	return SC_Class_IsDataTypeOnly(self->Type) and ((!self->PointerCount) and (!SC_Decl_IsCArray(self)));
}

bool SC_Decl_IsFloat(SCDecl* self) {
	return JB_TC_IsFloat(self->Type->TypeInfo);
}

bool SC_Decl_IsInteger(SCDecl* self) {
	return SC_Decl_IsNormal(self) and JB_TC_IsInt(self->Type->TypeInfo);
}

bool SC_Decl_IsNil(SCDecl* self) {
	return self == JB_TypeNil;
}

bool SC_Decl_IsNormal(SCDecl* self) {
	return (!self->PointerCount) and ((!SC_Decl_IsNil(self)) and (!SC_Decl_IsCArray(self)));
}

bool SC_Decl_IsNormalBool(SCDecl* self) {
	return ((!SC_Decl_IsCArray(self))) and (((!self->PointerCount)) and (self->Type == JB_TypeBool));
}

bool SC_Decl_IsNormalNumber(SCDecl* self) {
	return ((!SC_Decl_IsCArray(self))) and (((!self->PointerCount)) and (SC_Class_NumericCount(self->Type) == 1));
}

bool SC_Decl_IsNormalObject(SCDecl* self) {
	return ((!self->PointerCount)) and (((!SC_Decl_IsNil(self))) and SC_Decl_IsObject(self));
}

bool SC_Decl_IsNormalStruct(SCDecl* self) {
	return SC_Class_IsStruct(self->Type) and ((!self->PointerCount) and (!SC_Decl_IsCArray(self)));
}

bool SC_Decl_IsntReallyCastable(SCDecl* self, Message* side) {
	if ((!((SC_Class_IsStruct(self->Type) or SC_Decl_IsCArray(self)) and ((!self->PointerCount))))) {
		return nil;
	}
	Message* _tmPf0 = JB_Incr(SC_Msg_RemoveTypeCasts(side));
	bool _tmPf1 = ((!JB_Msg_EqualsSyx(_tmPf0, JB_SyxArg, false)));
	JB_Decr(_tmPf0);
	return _tmPf1;
}

int SC_Decl_IsNumeric(SCDecl* self) {
	if (((!SC_Decl_IsCArray(self))) and ((!self->PointerCount))) {
		return SC_Class_NumericCount(self->Type);
	}
	return 0;
}

bool SC_Decl_IsObject(SCDecl* self) {
	return SC_Class_IsObject(self->Type) and (!SC_Decl_IsCArray(self));
}

bool SC_Decl_IsReffable(SCDecl* self, bool SetOnly) {
	if ((!(((!self->PointerCount)) and (SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_Altered))))) {
		return nil;
	}
	if (SetOnly and (SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_Borrowed))) {
		return nil;
	}
	return SC_Class_IsObject(self->Type);
}

bool SC_Decl_IsReg(SCDecl* self) {
	if (SC_Decl_IsCArray(self)) {
		return nil;
	}
	if (self->PointerCount) {
		return true;
	}
	return (!SC_Class_IsStruct(self->Type));
}

JB_String* SC_Decl_IsSaveable(SCDecl* self) {
	if (self->PointerCount) {
		return JB_LUB[0];
	}
	return self->Type->SaveAs;
}

void SC_Decl_IsTypeImproveSet(SCDecl* self, bool Value) {
	self->Info = SC_SCDeclInfo_Set(self->Info, kSC__SCDeclInfo_TypeImprove, Value);
}

bool SC_Decl_IsUintLike(SCDecl* self) {
	DataTypeCode t = self->Type->TypeInfo;
	if (SC_Decl_IsNormal(self) and JB_TC_IsInt(t)) {
		return (!JB_TC_IsSigned(t));
	}
	return false;
}

bool SC_Decl_IsVoidPtr(SCDecl* self) {
	return ((self->PointerCount == 1) and (self->Type == JB_TypeVoid_));
}

bool SC_Decl_LoadContained(SCDecl* self, Message* Contained, Message* wrap, SCNode* Name_Space, DeclMode Purpose) {
	if ((JB_Msg_EqualsSyx(Contained, JB_SyxThg, false)) and (JB_Msg_SyntaxEquals(Contained, JB_LUB[1962], false))) {
		return SC_Decl_MakeStatic(self, wrap, Name_Space, Purpose);
	}
	SCDecl* Cont = JB_Incr(SC_ExtractDecl(Contained, Name_Space, Purpose));
	if (Cont) {
		bool _tmPf0 = SC_Decl_LoadContainedSub(self, Cont, wrap, Name_Space, Purpose);
		JB_Decr(Cont);
		return _tmPf0;
	}
	JB_Decr(Cont);
	return false;
}

bool SC_Decl_LoadContainedSub(SCDecl* self, SCDecl* Cont, Message* wrap, SCNode* Name_Space, DeclMode Purpose) {
	SCDecl* R = JB_Incr(SC_ExtractDecl(wrap, Name_Space, Purpose));
	if ((!R)) {
		JB_Decr(R);
		return nil;
	}
	SC_Decl_CopyTypeInfoTo(R, self);
	JB_SetRef(self->Contains, SC_Decl_MakeContainedOptional(Cont));
	if (SC_uint_IsNormalMatch(SC_Decl_TypeMatch(JB_TypeWrapper->TypeNormal, R, kJB_kTypeCastFalse, nil))) {
		if (SC_Decl_IsNormalObject(Cont)) {
			JB_Msg_SyntaxExpect(wrap, JB_LUB[810]);
		}
	}
	 else {
		SCDecl* RCont = JB_Incr(R->Type->Contained);
		if ((!RCont)) {
			JB_Msg_SyntaxExpect(wrap, JB_LUB[1091]);
			JB_Decr(RCont);
			JB_Decr(R);
			return nil;
		}
		if ((RCont->Type != JB_TypeObject) and SC_Decl_IsNormalObject(RCont)) {
			JB_FreeIfDead(SC_Decl_ExpectMatch(RCont, Cont, 0, nil, wrap));
		}
		JB_Decr(RCont);
	}
	JB_Decr(R);
	return true;
}

SCDecl* SC_Decl_MakeAsObject(SCDecl* self, SCDecl* Container, Message* ErrPlace) {
	SCDecl* NormalContained = JB_Incr(Container->Type->Contained);
	if ((!NormalContained)) {
		JB_Decr(NormalContained);
		return nil;
	}
	if (SC_Decl_IsNormalObject(self)) {
		if ((!SC_Decl_IsNormalObject(NormalContained))) {
			JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1283]);
		}
		JB_Decr(NormalContained);
		return self;
	}
	 else if ((!SC_Decl_IsNormalObject(NormalContained))) {
		JB_Decr(NormalContained);
		return self;
	}
	JB_Decr(NormalContained);
	if ((!SC_Decl_CanWrap(self))) {
		JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[717]);
	}
	return SC_Decl_NewWrapper(self, self);
}

SCDecl* SC_Decl_MakeBorrowed(SCDecl* self, bool StayBorrowed) {
	SCDecl* rz = nil;
	if (SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_Borrowed)) {
		JB_Decr(rz);
		return self;
	}
	JB_SetRef(rz, SC_Decl_CopyDecl(self, false));
	(SC_Decl_SyntaxIsSet(rz, kSC__SCDeclInfo_Borrowed, true));
	if (StayBorrowed) {
		(SC_Decl_SyntaxIsSet(rz, kSC__SCDeclInfo_StayBorrowed, true));
	}
	JB_SafeDecr(rz);
	return rz;
}

void SC_Decl_MakeContainedObject(SCDecl* self, Message* ErrPlace) {
	SCDecl* c = self->Contains;
	if (c) {
		JB_SetRef(self->Contains, SC_Decl_MakeAsObject(c, self, ErrPlace));
	}
}

SCDecl* SC_Decl_MakeContainedOptional(SCDecl* self) {
	if (SC_Decl_NilStated(self)) {
		return self;
	}
	return SC_Decl_MakeExistance(self, kSC__NilState_Optional, self->Type->TypeOptional);
}

SCDecl* SC_Decl_MakeDataObject(SCDecl* self, SCNode* Name_Space, DeclMode Purpose) {
	SCDecl* rz = nil;
	Message* wrapp = JB_Incr((JB_Syx_Msg(JB_SyxThg, JB_LUB[1585])));
	JB_SetRef(rz, SC_Decl_Constructor(nil, self->Type));
	SC_Decl_LoadContainedSub(rz, self, wrapp, Name_Space, Purpose);
	JB_Decr(wrapp);
	JB_SafeDecr(rz);
	return rz;
}

SCDecl* SC_Decl_MakeExistance(SCDecl* self, NilState type, SCDecl* Default) {
	SCDecl* rz = nil;
	if (self->NilDeclared == type) {
		return self;
	}
	if (((bool)Default) and (self == self->Type->TypeNormal)) {
		return Default;
	}
	rz = SC_Decl_CopyDecl(self, false);
	rz->NilDeclared = type;
	return rz;
}

void SC_Decl_MakeGameFlying(SCDecl* self, SCClass* oof, Message* m) {
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(fs, JB_LUB[1561]);
	SC_FS_CArrayAdd(fs, oof->Name);
	Message* _tmPf3 = JB_Incr(SC_Msg_ModelType(m));
	SC_FS_CArrayAddB(fs, JB_Str_First(_tmPf3->Name));
	JB_Decr(_tmPf3);
	SC_FS_CArrayAddB0(fs, 8);
	SC_FS_CArrayAddB0(fs, SC_Msg_ModelMode(m));
	{
		Array* _LoopSrcf2 = JB_Incr(oof->Properties);
		int _if0 = 0;
		while (true) {
			SCDecl* p = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (p == nil) {
				JB_Decr(p);
				break;
			}
			SC_FS_CArrayAddB(fs, ((byte)SC_Decl_GameType(p)));
			JB_String* _tmPf4 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1426], p->Name));
			JB_Decr(p);
			SC_FS_CArrayAdd(fs, _tmPf4);
			JB_Decr(_tmPf4);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	JB_FS_AppendString(fs, JB_LUB[442]);
	JB_FS_AppendString(fs, JB_LUB[898]);
	(SC_Decl_SyntaxIsSet(self, kSC__SCDeclInfo_GameFlyingMem, true));
	JB_SetRef(self->StringData, JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
}

SCDecl* SC_Decl_MakeNewNil(SCDecl* self) {
	if (self->PointerCount) {
		self->NilDeclared = kSC__NilState_ActuallyNil;
		return self;
	}
	return SC_Decl_MakeExistance(self, kSC__NilState_ActuallyNil, nil);
}

SCDecl* SC_Decl_MakeNewOptional(SCDecl* self) {
	return SC_Decl_MakeExistance(self, kSC__NilState_Optional, self->Type->TypeOptional);
}

SCDecl* SC_Decl_MakeNewReal(SCDecl* self) {
	if (self->PointerCount) {
		self->NilDeclared = kSC__NilState_Real;
		return self;
	}
	return SC_Decl_MakeReal(self);
}

SCDecl* SC_Decl_MakeReal(SCDecl* self) {
	return SC_Decl_MakeExistance(self, kSC__NilState_Real, self->Type->TypeReal);
}

bool SC_Decl_MakeStatic(SCDecl* self, Message* wrap, SCNode* Name_Space, DeclMode Purpose) {
	SCDecl* R = JB_Incr(SC_ExtractDecl(wrap, Name_Space, Purpose));
	if (R) {
		SC_Decl_CopyTypeInfoTo(R, self);
		(SC_Decl_SyntaxIsSet(self, kSC__SCDeclInfo_Static, true));
		JB_Decr(R);
		return true;
	}
	JB_Decr(R);
	return false;
}

void SC_Decl_MarkAsRefAltered(SCDecl* self) {
	(SC_Decl_SyntaxIsSet(self, kSC__SCDeclInfo_Altered, true));
	if (SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_TypeImprove)) {
		JB_Object* orig = self->IsLookupOnly;
		if (JB_Object_FastIsa(orig, &SCDeclData)) {
			(SC_Decl_SyntaxIsSet(((SCDecl*)orig), kSC__SCDeclInfo_Altered, true));
		}
	}
}

bool SC_Decl_MatchC(SCDecl* self, SCDecl* O) {
	return ((bool)SC_Decl_TypeMatch(self, O, kJB_kTypeCastTrue, nil));
}

bool SC_Decl_MiniMatch(SCDecl* self, SCDecl* O, int TypeCast) {
	return ((bool)SC_Decl_TypeMatch(self, O, TypeCast, nil));
}

void SC_Decl_NameSet(SCDecl* self, JB_String* Value) {
	JB_SetRef(self->ExportName, Value);
	JB_SetRef(self->Name, Value);
}

bool SC_Decl_NeedsContainedfix(SCDecl* self) {
	if ((!self->AllocSource) and (!self->Contains)) {
		return ((bool)SC_Decl_ReallyContains(self));
	}
	return false;
}

SCDecl* SC_Decl_NewWrapper(SCDecl* self, SCDecl* CastTo) {
	bool IsNormal = ((bool)CastTo) and SC_Decl_IsNormal(CastTo);
	if (IsNormal) {
		SCDecl* it = self->Type->DataObject;
		if (it) {
			return it;
		}
	}
	SCDecl* dcl = SC_Decl_Constructor(nil, JB_TypeWrapper);
	JB_SetRef(dcl->Contains, CastTo);
	if (IsNormal) {
		JB_SetRef(self->Type->DataObject, dcl);
	}
	return dcl;
}

SCDecl* SC_Decl_NilConstructor(SCDecl* self, NilState type) {
	SCDecl* rz = nil;
	if (type == 0) {
		return self;
	}
	rz = SC_Decl_CopyDecl(self, false);
	rz->NilDeclared = type;
	return rz;
}

NilState SC_Decl_NilCurr(SCDecl* self) {
	if (!(SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_Local))) {
		return self->NilDeclared & kSC__NilState_Either;
	}
	return SC_NRD_SyntaxAccess((SC_nil__Value()), self->NilReg);
}

void SC_Decl_NilPrmFail(SCDecl* self, Message* where, SCFunction* f) {
	if (true) {
		JB_String* _tmPf0 = JB_Incr(SC_Decl_PrmStateMsg(self, JB_LUB[0], f));
		JB_Msg_SyntaxExpect(f->Source, _tmPf0);
		JB_Decr(_tmPf0);
	}
}

bool SC_Decl_NilStated(SCDecl* self) {
	return SC_NilState_SyntaxIs(self->NilDeclared, kSC__NilState_Stated);
}

void SC_Decl_NoBlindCasts(SCDecl* self, SCDecl* old, Message* exp, SCNode* name_space) {
	SCFunction* fn = SC__Func_CurrFunc;
	if (((bool)fn) and (((!SC_Func_SyntaxIs(fn, kSC__FunctionType_Constructor))) and ((bool)fn->BlindCasts))) {
		if (SC_Decl_IsNormalObject(old) and SC_Decl_IsNormalObject(self)) {
			if ((!SC_Class_Real_Isa2(old->Type, self->Type))) {
				JB_Rec_AppendErr(JB_StdErr, JB_Err_Constructor(nil, exp, JB_LUB[670], fn->BlindCasts, JB_LUB[0]));
			}
		}
	}
}

bool SC_Decl_NoFloat(SCDecl* self, Message* exp) {
	DataTypeCode T = self->Type->TypeInfo;
	if (T == kJB__TC_UnusedType) {
		JB_Msg_SyntaxExpect(exp, JB_LUB[731]);
		return nil;
	}
	if (JB_TC_IsFloat(T)) {
		JB_Msg_SyntaxExpect(exp, JB_LUB[730]);
		return nil;
	}
	return true;
}

bool SC_Decl_OperatorExact_isa(SCDecl* self, SCClass* v) {
	return SC_Decl_IsNormal(self) and (self->Type == v);
}

bool SC_Decl_MatchesDecl(SCDecl* self, SCDecl* O) {
	return SC_Decl_MatchC(self, O);
}

bool SC_Decl_OperatorMatches(SCDecl* self, SCClass* O) {
	if (((bool)O) and ((bool)self)) {
		return SC_Decl_MatchesDecl(self, O->TypeNormal);
	}
	return false;
}

bool SC_Decl_PointeryMatch(SCDecl* self, SCDecl* O) {
	if (O->PointerCount == self->PointerCount) {
		return (SC_Decl_IsCArray(O) == SC_Decl_IsCArray(self));
	}
	return false;
}

uint SC_Decl_PointeryMatchSub(SCDecl* self, SCDecl* O, int TypeCast) {
	SCClass* OType = O->Type;
	SCClass* t = self->Type;
	byte tica = t->IsRole;
	if (tica == OType->IsRole) {
	}
	 else if ((bool)tica) {
		while (t->IsRole) {
			t = t->Super;
			if ((!t)) {
				return 0;
			}
		};
	}
	 else {
		while (OType->IsRole) {
			OType = OType->Super;
			if ((!OType)) {
				return 0;
			}
		};
	}
	int dist = 0;
	{
		SCClass* CurrSuper = OType;
		while (CurrSuper) {
			if (t == CurrSuper) {
				if (((bool)O->AllocSource) or SC_Decl_ContainsMatch(self, O, TypeCast)) {
					if ((!dist)) {
						return kJB_kSimpleMatch;
					}
					if (((bool)(TypeCast & kJB_kTypeCastWantSuperDistance))) {
						return kJB_kSuperClassMatch | dist;
					}
					return kJB_kSuperClassMatch;
				}
			}
			dist++;
			CurrSuper = CurrSuper->Super;
		};
	}
	;
	return 0;
}

void SC_Decl_PrefixedName(SCDecl* self, FastString* fs, SCModule* M) {
	if (SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_Const)) {
		JB_FS_AppendByte(fs, 'k');
	}
	JB_FS_AppendString(fs, SC_Decl_Project(self)->Mod->ExportName);
	JB_FS_AppendByte(fs, '_');
	if (JB_Str_Exists(M->CppPart)) {
		JB_FS_AppendByte(fs, '_');
		JB_FS_AppendString(fs, M->CppPart);
		JB_FS_AppendByte(fs, '_');
	}
	JB_FreeIfDead(SC_Str_UnicodeSafeName(self->Name, fs));
	JB_SetRef(self->ExportName, JB_FS_SyntaxCast(fs));
}

JB_String* SC_Decl_PrmStateMsg(SCDecl* self, JB_String* Needed, SCFunction* f) {
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(fs, JB_LUB[1133]);
	if (SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_Self)) {
		JB_FS_AppendString(fs, JB_LUB[1934]);
	}
	 else {
		JB_FS_AppendString(fs, JB_LUB[1861]);
		JB_FS_AppendString(fs, self->Name);
	}
	JB_FS_AppendString(fs, JB_LUB[262]);
	JB_FS_AppendString(fs, Needed);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

SCDecl* SC_Decl_ProcessAs(SCDecl* self, Message* msg) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(msg)));
	Message* P = JB_Incr(SC_Msg_UnBra(_tmPf0));
	JB_Decr(_tmPf0);
	if (SC_Msg_OperatorIsBRel(P, JB_LUB[242])) {
		JB_Decr(P);
		return self;
	}
	JB_Decr(P);
	SCDecl* T = JB_Incr(self->Type->ProcessAs->TypeNormal);
	JB_FreeIfDead(SC_Decl_CreateSimpleTypeCast(T, msg));
	Message* L = JB_Incr(((Message*)JB_Ring_Last(msg)));
	if (L) {
		JB_SetRef(L->Obj, self);
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(msg, nil);
		}
	}
	JB_Decr(L);
	JB_SafeDecr(T);
	return T;
}

SCImport* SC_Decl_Project(SCDecl* self) {
	return (((SCImport*)JB_Object_FastAs(JB_ObjLayer(self)->Obj, &SCImportData)));
}

SCDecl* SC_Decl_ReallyContains(SCDecl* self) {
	SCDecl* c = self->Contains;
	if ((!c)) {
		c = self->Type->Contained;
	}
	if (((bool)c) and (c->Type != self->Type)) {
		return c;
	}
	return nil;
}

JB_String* SC_Decl_RealName(SCDecl* self) {
	JB_Object* l = self->IsLookupOnly;
	if (JB_Object_Isa(l, &SCObjectData)) {
		return JB_LUB[0];
	}
	Message* s = self->Source;
	if ((JB_Msg_EqualsSyx(s, JB_SyxThg, false)) and JB_Msg_OperatorIn(s, JB_SyxRel)) {
		s = ((Message*)JB_Ring_Parent(s));
	}
	if ((JB_Msg_EqualsSyx(s, JB_SyxRel, false)) or (JB_Msg_EqualsSyx(s, JB_SyxDecl, false))) {
		return JB_Msg_Name(SC_Msg_DeclName(s));
	}
	return self->Name;
}

Message* SC_Decl_RefDestructor(SCDecl* self) {
	Message* m = SC_Decl_DeclToDot(self, SC_Func_Self(SC__Func_CurrFunc));
	if (SC_Decl_IsCArray(self)) {
		return SC_Refs__DecrMulti(self, m);
	}
	return SC_Refs__RefClearMsg(m);
}

SCDecl* SC_Decl_RefineDecl(SCDecl* self, Message* list) {
	SCDecl* rz = nil;
	JB_SetRef(rz, SC_Decl_CopyDecl(self, false));
	{
		Message* p = JB_Incr(((Message*)JB_Ring_First(list)));
		while (p) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(p)));
			if (SC_Msg_OperatorIsThing(p, JB_LUB[1984])) {
				((SC_Decl_SyntaxIsSet(rz, kSC__SCDeclInfo_Borrowed, SC__Options_ProjectIsLibrary)));
			}
			 else if (SC_Msg_OperatorIsThing(p, JB_LUB[1483])) {
				(SC_Decl_SyntaxIsSet(rz, kSC__SCDeclInfo_API, true));
			}
			 else {
				if (true) {
					JB_Msg_SyntaxExpect(p, nil);
				}
			}
			JB_SetRef(p, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(p);
		;
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

DataTypeCode SC_Decl_RegType(SCDecl* self) {
	if ((!self)) {
		return 0;
	}
	DataTypeCode T = self->Type->TypeInfo;
	if (JB_TC_IsInt(T)) {
		return kJB__TC_int64;
	}
	if (JB_TC_ByteSize(T) == 4) {
		return kJB__TC_Float;
	}
	return kJB__TC_Double;
}

JB_String* SC_Decl_Render(SCDecl* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	if (self) {
		Message* _tmPf0 = JB_Incr(SC_Decl_WriteDeclFull(self, JB_LUB[0], 2));
		JB_FreeIfDead(JB_Msg_Render(_tmPf0, fs));
		JB_Decr(_tmPf0);
	}
	JB_String* _tmPf1 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Decl_RenderTypeAndName(SCDecl* self, int minimal) {
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteDeclTypeAndName(self, JB_LUB[0], minimal));
	JB_String* _tmPf1 = JB_Incr(JB_Msg_Render(_tmPf0, nil));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

JB_String* SC_Decl_RenderTypeName(SCDecl* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	if ((!self)) {
		JB_FS_AppendString(fs, JB_LUB[275]);
	}
	 else {
		if (SC_Decl_IsNil(self)) {
			JB_FS_AppendString(fs, JB_LUB[1811]);
		}
		 else {
			JB_FS_AppendMultiByte(fs, '&', self->PointerCount);
			JB_FS_AppendString(fs, self->Type->Name);
		}
		if (SC_Decl_IsCArray(self)) {
			JB_FS_AppendByte(fs, '[');
			JB_FS_AppendInt32(fs, self->C_Array);
			JB_FS_AppendByte(fs, ']');
		}
		SCDecl* c = JB_Incr(self->Contains);
		if (((bool)c) and (!SC_Decl_MiniMatch(c, self->Type->Contained, 0))) {
			JB_FS_AppendString(fs, JB_LUB[193]);
			JB_FS_AppendString(fs, c->Type->Name);
		}
		JB_Decr(c);
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Decl_RenderTypeNameNicer(SCDecl* self, FastString* fs_in) {
	return SC_Decl_RenderTypeName(SC_Decl_DownGrade(self), fs_in);
}

bool SC_Decl_SafelyWrappable(SCDecl* self) {
	int n = SC_Decl_IsNumeric(self);
	if ((n <= 1) or (self == JB_TypeBool->TypeNormal)) {
		return true;
	}
	SCFunction* fns = ((SCFunction*)SC_Base_SyntaxAccess(JB_TypeWrapper->Modul, JB_LUB[1808]));
	if ((!JB_Object_Isa(fns, &SCFunctionData))) {
		return nil;
	}
	{
		SCFunction* f = fns;
		while (f) {
			Array* p = f->Args;
			if ((JB_Array_Size(p) == 1) and ((bool)SC_Decl_TypeMatch(((SCDecl*)JB_Array_Value(p, 0)), self, 0, nil))) {
				return true;
			}
			f = f->NextFunc;
		};
	}
	;
	return false;
}

bool SC_Decl_SameForReplace(SCDecl* self, SCDecl* c) {
	if ((SC_Decl_SyntaxIs(c, kSC__SCDeclInfo_Borrowed)) != (SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_Borrowed))) {
		return nil;
	}
	if (c->PointerCount != self->PointerCount) {
		return nil;
	}
	if (self->NilDeclared != c->NilDeclared) {
		return false;
	}
	return c->C_Array == self->C_Array;
}

NilState SC_Decl_StatedOptional(SCDecl* self) {
	if ((self->NilDeclared & kSC__NilState_Optional) == kSC__NilState_Optional) {
		return kSC__NilState_Optional;
	}
	return 0;
}

NilState SC_Decl_StatedReal(SCDecl* self) {
	return SC_NilState_StatedReal(self->NilDeclared);
}

void SC_Decl_SyntaxAppend(SCDecl* self, SCDeclInfo d) {
	self->Info = (self->Info | d);
}

bool SC_Decl_SyntaxIs(SCDecl* self, SCDeclInfo d) {
	if (self) {
		return ((bool)(self->Info & d));
	}
	return false;
}

void SC_Decl_SyntaxIsSet(SCDecl* self, SCDeclInfo d, bool Value) {
	self->Info = SC_SCDeclInfo_Set(self->Info, d, Value);
}

int SC_Decl_TryTypeCast(SCDecl* self, SCDecl* O, Message* exp, int TypeCast) {
	SCClass* t = self->Type;
	SCClass* ot = O->Type;
	if (self->PointerCount == (O->PointerCount + 1)) {
		int found = SC_Decl_TryTypeCastPointer(self, O, exp, TypeCast, false);
		if (found) {
			return found;
		}
	}
	if ((SC_Decl_IsCArray(O)) and (self->PointerCount == 1)) {
		int found = SC_Decl_TryTypeCastPointer(self, O, exp, TypeCast, true);
		if (found) {
			return found;
		}
	}
	if ((!((bool)(TypeCast & kJB_kNoBoolTypeCast)))) {
		if ((t == JB_TypeBool) and ((SC_Decl_IsNormal(self)) and ((bool)O->PointerCount))) {
			return SC_Msg_CastToBool(exp, nil);
		}
	}
	if (((bool)(TypeCast & (kJB_kTypeCastMost | kJB_kTypeCastNumbers)))) {
		SCDecl* CounterPart = t->Signed;
		if (CounterPart) {
			if ((CounterPart->Type == ot) and (SC_uint_IsNormalMatch(SC_Decl_TypeMatch(CounterPart, O, TypeCast, exp)))) {
				return kJB_kSimpleMatch;
			}
		}
	}
	bool NoBools = (((bool)(TypeCast & kJB_kTypeCastBothWays))) or (((bool)(TypeCast & kJB_kNoBoolTypeCast)));
	if (((bool)(TypeCast & kJB_kTypeCastMost))) {
		{
			SCClass* b = ot;
			while (b) {
				{
					Array* _LoopSrcf3 = b->Casts;
					int _if1 = 0;
					while (true) {
						SCFunction* C = ((SCFunction*)JB_Array_Value(_LoopSrcf3, _if1));
						if (C == nil) {
							break;
						}
						if ((!(NoBools and (C->ReturnType == JB_TypeBool->TypeNormal)))) {
							if (SC_uint_IsNormalMatch(SC_Decl_TypeMatch(self, C->ReturnType, 0, nil))) {
								return SC_Func_CreateTypeCast(C, O, exp, kJB_kCastedMatch);
							}
						}
						_if1++;
					};
				}
				;
				b = b->Super;
			};
		}
		;
		bool IsaBool = (t == JB_TypeBool) and (SC_Decl_IsNormal(self));
		if (((!NoBools)) and IsaBool) {
			return SC_Msg_CastToBool(exp, nil);
		}
		if (((!IsaBool) or (!NoBools)) and SC_Decl_CanWrap(O)) {
			if (SC_uint_IsNormalMatch(SC_Decl_TypeMatch(JB_TypeWrapper->TypeNormal, self, 0, nil))) {
				SCDecl* it = self->Contains;
				if (it) {
					if ((!SC_Decl_TypeMatch(it, O, kJB_kTypeCastNumbers, nil))) {
						return 0;
					}
					return SC_Msg_WrapExpr(exp, O);
				}
			}
			if (SC_uint_IsNormalMatch(SC_Decl_TypeMatch(self, JB_TypeWrapper->TypeNormal, 0, nil)) and SC_Decl_SafelyWrappable(O)) {
				return SC_Msg_WrapExpr(exp, O);
			}
		}
	}
	if (((bool)(TypeCast & kJB_kTypeCastNumbers))) {
		if (SC_Decl_IsNil(O) and ((bool)SC_Decl_IsNumeric(self))) {
			return kJB_kNumericMatch;
		}
		bool OIsNum = SC_Decl_IsNormalNumber(O);
		bool SIsNum = SC_Decl_IsNormalNumber(self);
		if (OIsNum and SIsNum) {
			if (((bool)(TypeCast & kJB_kTypeCastFromZero)) or (SC_Decl_IsFloat(O) == SC_Decl_IsFloat(self))) {
				return kJB_kNumericMatch;
			}
		}
		if (((bool)(TypeCast & kJB_kTypeCastBothWays))) {
			if (OIsNum and SC_Decl_IsNormalBool(self)) {
				return kJB_kNumericMatch;
			}
			if (SIsNum and SC_Decl_IsNormalBool(O)) {
				return kJB_kNumericMatch;
			}
		}
	}
	if (SC_Func_EqualOrMoreSpecific(ot->FuncProto, t->FuncProto) and SC_Decl_PointeryMatch(self, O)) {
		return SC_Msg_CastToClass(exp, t, nil);
	}
	return 0;
}

int SC_Decl_TryTypeCastPointer(SCDecl* self, SCDecl* O, Message* exp, int TypeCast, bool CArray) {
	int rz = 0;
	SCDecl* i = JB_Incr(self->Internal);
	if (((bool)i) and SC_Decl_MiniMatch(i, O, 0)) {
		SCDecl* OAddr = JB_Incr(SC_Decl_GetAddress(O, kSC__DeclMode_Always));
		if (CArray) {
			OAddr->C_Array = 0;
		}
		if (SC_Decl_MiniMatch(self, OAddr, TypeCast) and ((!exp) or SC_Msg_CanGetAddress(exp, nil))) {
			rz = SC_Msg_GetAddressOf(exp, OAddr, CArray);
		}
		JB_Decr(OAddr);
	}
	JB_Decr(i);
	return rz;
}

JB_String* SC_Decl_TryUseSaveable(SCDecl* self, bool IsSave, SCClass* cls) {
	JB_String* type = JB_Incr(SC_Decl_IsSaveable(self));
	if ((!JB_Str_Exists(type)) or (JB_Str_Equals(type, JB_LUB[1648], false))) {
		if ((!SC__Options_IgnoreCantSaveErrors)) {
			if ((!IsSave)) {
				FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
				JB_FS_AppendString(_fsf0, JB_LUB[750]);
				JB_FS_AppendString(_fsf0, self->Name);
				JB_FS_AppendString(_fsf0, JB_LUB[122]);
				JB_FS_AppendString(_fsf0, self->Type->Name);
				JB_FS_AppendByte(_fsf0, ')');
				JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
				JB_Decr(_fsf0);
				JB_Msg_SyntaxExpect(self->Source, _tmPf1);
				JB_Decr(_tmPf1);
				JB_Decr(type);
				return JB_LUB[0];
			}
		}
		JB_SafeDecr(type);
		return type;
	}
	if (JB_Str_Equals(type, JB_LUB[1811], false)) {
		JB_Decr(type);
		return JB_LUB[0];
	}
	if (self->Type->SavingCanSkip) {
		SCDecl* Con = JB_Incr(self->Contains);
		if (Con) {
			JB_String* _tmPf2 = JB_Incr(SC_Decl_TryUseSaveable(Con, true, cls));
			if ((!JB_Str_Exists(_tmPf2))) {
				JB_Decr(_tmPf2);
				JB_Decr(Con);
				JB_Decr(type);
				return JB_LUB[0];
			}
			JB_Decr(_tmPf2);
		}
		JB_Decr(Con);
	}
	JB_SafeDecr(type);
	return type;
}

DataTypeCode SC_Decl_TypeInfo(SCDecl* self) {
	if (((!SC_Decl_IsCArray(self))) and ((!self->PointerCount))) {
		return self->Type->TypeInfo;
	}
	return kJB__TC_UnusedType;
}

bool SC_Decl_TypeIsReached(SCDecl* self) {
	return ((bool)self->Type->MyReacher);
}

uint SC_Decl_TypeMatch(SCDecl* self, SCDecl* O, int TypeCast, Message* exp) {
	if (O == nil) {
		if ((!self->Default)) {
			return 0;
		}
		return kJB_kUseDefaultParams;
	}
	if (O == self) {
		return kJB_kSimpleMatch;
	}
	if (SC_Decl_IsNil(O) and (((bool)(TypeCast & kJB_kTypeCastTrue)))) {
		if (SC_Decl_CantBeNilInCpp(self)) {
			if ((!exp)) {
				return kJB_kNeedsTypeCast;
			}
			Message* NilStruct = JB_Incr(SC_Decl_CreateStructNil(self, exp));
			JB_FreeIfDead(SC_Msg_ReplaceWith(exp, NilStruct));
			JB_Decr(NilStruct);
			return kJB_kCastedMatch;
		}
		return kJB_kSimpleMatch;
	}
	if (SC_Decl_PointeryMatch(O, self)) {
		uint ooop = SC_Decl_PointeryMatchSub(self, O, TypeCast);
		if ((!ooop) and ((((bool)(TypeCast & kJB_kTypeCastBothWays))) and (SC_Decl_IsNormalObject(O) and SC_Decl_IsNormalObject(self)))) {
			ooop = SC_Decl_PointeryMatchSub(O, self, TypeCast);
		}
		if (ooop) {
			return ooop;
		}
	}
	if ((((bool)(TypeCast & kJB_kTypeCastTrue))) and ((SC_Decl_IsVoidPtr(self)) and (((bool)O->PointerCount) or ((bool)O->Type->FuncProto)))) {
		if ((!exp)) {
			return kJB_kNeedsTypeCast | kJB_kVoidPtrMatch;
		}
		if (O->Type->FuncProto) {
			return SC_Msg_CastFPToVoidPtr(exp);
		}
		return kJB_kCastedMatch;
	}
	if (((bool)(TypeCast & kJB_kActualTypecasts))) {
		return SC_Decl_TryTypeCast(self, O, exp, TypeCast);
	}
	return 0;
}

void SC_Decl_TypeReach(SCDecl* self, SCNode* from, Message* src) {
	//;
	if (self) {
		return SC_Class_Reach(self->Type, from, src);
	}
}

bool SC_Decl_TypeSuffers(SCDecl* self) {
	if (SC_Decl_IsCArray(self)) {
		return false;
	}
	if (self->PointerCount) {
		return true;
	}
	SCNodeType d = self->Type->BaseType;
	return (d == kSC__SCNodeType_FuncProto) or (d == kSC__SCNodeType_Object);
}

Message* SC_Decl_WriteDeclFull(SCDecl* self, JB_String* DeclName, int minimal) {
	JB_Incr(DeclName);
	if ((!(JB_Str_Exists(DeclName)))) {
		JB_SetRef(DeclName, self->Name);
	}
	if ((!(JB_Str_Exists(DeclName) or (!self->Default)))) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(DeclName);
		return nil;
	}
	if (JB_Str_Exists(DeclName)) {
		Message* _tmPf2 = JB_Incr(SC_Decl_WriteDeclSub(self, DeclName, minimal));
		JB_Decr(DeclName);
		JB_SafeDecr(_tmPf2);
		return _tmPf2;
	}
	JB_Decr(DeclName);
	return ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxDecl, JB_LUB[0])));
		Message* _tmPf1 = JB_Incr(SC_Decl_WriteType(self, minimal));
		JB_Tree_SyntaxAppend(__imPf0, _tmPf1);
		JB_Decr(_tmPf1);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	});
}

Message* SC_Decl_WriteDeclSub(SCDecl* self, JB_String* Name, int minimal) {
	Message* dcl = JB_Incr((JB_Syx_Msg(JB_SyxDecl, JB_LUB[0])));
	Message* _tmPf2 = JB_Incr(SC_Decl_WriteType(self, minimal));
	JB_Tree_SyntaxAppend(dcl, _tmPf2);
	JB_Decr(_tmPf2);
	Message* def = JB_Incr(self->Default);
	if ((!def) and (minimal >= 2)) {
		JB_FreeIfDead(JB_Msg_Msg(dcl, JB_SyxThg, Name));
		JB_Decr(def);
		JB_SafeDecr(dcl);
		return dcl;
	}
	if ((!(def))) {
		JB_SetRef(def, self->Type->Defawlt);
	}
	if ((!def) or (((bool)self->PointerCount) and (minimal < 2))) {
		JB_SetRef(def, (JB_Syx_Msg(JB_SyxThg, JB_LUB[1811])));
	}
	 else {
		JB_SetRef(def, JB_Msg_Copy(def, nil));
	}
	SCDecl* c = JB_Incr(self->Contains);
	if (c) {
		JB_SetRef(def, ({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxType, JB_LUB[564])));
			JB_Tree_SyntaxAppend(__imPf0, def);
			Message* _tmPf3 = ({
				Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
				Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, self->Type->Name));
				JB_Tree_SyntaxAppend(__imPf1, (_tmPf4));
				JB_Decr(_tmPf4);
				Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[1839]));
				JB_Tree_SyntaxAppend(__imPf1, (_tmPf5));
				JB_Decr(_tmPf5);
				Message* _tmPf6 = JB_Incr(JB_Syx_Msg(JB_SyxThg, c->Type->Name));
				JB_Tree_SyntaxAppend(__imPf1, (_tmPf6));
				JB_Decr(_tmPf6);
				JB_SafeDecr(nil);
				 __imPf1;
			});
			JB_Tree_SyntaxAppend(__imPf0, _tmPf3);
			JB_Decr(_tmPf3);
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
	}
	JB_Decr(c);
	Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Name));
	Message* _tmPf7 = JB_Incr(SC_NewEqRelWithMsgMsg((_tmPf8), def));
	JB_Decr(def);
	JB_Decr(_tmPf8);
	JB_Tree_SyntaxAppend(dcl, _tmPf7);
	JB_Decr(_tmPf7);
	JB_SafeDecr(dcl);
	return dcl;
}

Message* SC_Decl_WriteDeclTypeAndName(SCDecl* self, JB_String* Name, int minimal) {
	JB_Incr(Name);
	if ((!(JB_Str_Exists(Name)))) {
		JB_SetRef(Name, self->Name);
	}
	Message* _tmPf3 = JB_Incr(({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxDecl, JB_LUB[0])));
		Message* _tmPf1 = JB_Incr(SC_Decl_WriteType(self, minimal));
		JB_Tree_SyntaxAppend(__imPf0, _tmPf1);
		JB_Decr(_tmPf1);
		Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Name));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf2));
		JB_Decr(_tmPf2);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	JB_Decr(Name);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

Message* SC_Decl_WriteNilDecl(SCDecl* self) {
	Message* l = SC_Decl_WriteNilRel(self);
	Message* dcl = (JB_Syx_Msg(JB_SyxDecl, JB_LUB[0]));
	JB_Tree_SyntaxAppend(dcl, SC_Decl_WriteType(self, 0));
	JB_Tree_SyntaxAppend(dcl, l);
	JB_SetRef(dcl->Obj, self);
	JB_SetRef(l->Obj, self);
	JB_SetRef(((Message*)JB_Ring_First(l))->Obj, self);
	return dcl;
}

Message* SC_Decl_WriteNilRel(SCDecl* self) {
	return SC_NewEqRelWithStrStr(self->Name, JB_LUB[1811]);
}

Message* SC_Decl_WriteSimpleType(SCDecl* self) {
	Message* rz = nil;
	rz = SC_Decl_WriteVerySimpleType(self);
	if (SC_Decl_SyntaxIs(self, kSC__SCDeclInfo_Borrowed)) {
		rz = SC_Msg_WrapWith(rz, JB_SyxARel, JB_LUB[309]);
	}
	if (SC_Decl_TypeSuffers(self) and SC_Decl_NilStated(self)) {
		if (SC_Decl_StatedOptional(self)) {
			rz = SC_Msg_WrapWith(rz, JB_SyxBRel, JB_LUB[599]);
		}
		 else if (((bool)SC_Decl_StatedReal(self)) and JB_IsDebug()) {
			rz = SC_Msg_WrapWith(rz, JB_SyxBRel, JB_LUB[215]);
		}
	}
	return rz;
}

Message* SC_Decl_WriteType(SCDecl* self, int minimal) {
	Message* rz = nil;
	Message* simple = SC_Decl_WriteSimpleType(self);
	SCDecl* c = self->Contains;
	if ((!c) or (((bool)minimal) and SC_Decl_AlreadyContains(self))) {
		return simple;
	}
	rz = JB_Syx_Msg(JB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(rz, simple);
	JB_Msg_AppendSyx(rz, JB_SyxOpp, JB_LUB[1839]);
	JB_Tree_SyntaxAppend(rz, SC_Decl_WriteType(c, minimal));
	return rz;
}

Message* SC_Decl_WriteTypeCast(SCDecl* self, Message* msg) {
	Message* TheType = JB_Incr((JB_Syx_Msg(JB_SyxType, JB_LUB[564])));
	JB_Tree_SyntaxAppend(TheType, msg);
	Message* _tmPf0 = JB_Incr(SC_Decl_WriteType(self, 0));
	JB_Tree_SyntaxAppend(TheType, _tmPf0);
	JB_Decr(_tmPf0);
	JB_SetRef(TheType->Obj, self);
	JB_SafeDecr(TheType);
	return TheType;
}

Message* SC_Decl_WriteVerySimpleType(SCDecl* self) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Syx_OperatorPlus(JB_SyxThg, self->Type->Name));
	{
		int _LoopSrcf1 = ((int)self->PointerCount);
		int _Valuef2 = 0;
		while (_Valuef2 < _LoopSrcf1) {
			JB_SetRef(rz, SC_Msg_WrapWith(rz, JB_SyxBRel, JB_LUB[242]));
			_Valuef2++;
		};
	}
	;
	if (SC_Decl_IsCArray(self)) {
		JB_SetRef(rz, SC_Msg_WrapWith(rz, JB_SyxAcc, JB_LUB[0]));
		Message* _tmPf3 = JB_Incr(JB_Msg_Msg(rz, JB_SyxArr, JB_LUB[0]));
		JB_Msg_AppendNum(_tmPf3, self->C_Array);
		JB_Decr(_tmPf3);
	}
	JB_SafeDecr(rz);
	return rz;
}


Message* SC_SCFile_AST(SCFile* self) {
	return ({
		Message* _X = self->LiveAST;
		if ((!_X)) {
			_X = SC_SCFile_ASTSub(self, false);
			JB_SetRef(self->LiveAST, _X);
		}
		 _X;
	});
}

Message* SC_SCFile_ASTSub(SCFile* self, bool Orig) {
	Message* rz = nil;
	JB_Flow__Input(self, JB_LUB[615]);
	JB_String* _tmPf0 = JB_Incr(JB_File_ReadAll(self, 134217728, true));
	JB_String* str = JB_Incr(JB_Str_Decompress(_tmPf0, 268435456, nil));
	JB_Decr(_tmPf0);
	if (JB_Safe_SyntaxCast(str)) {
		JB_MemoryLayer* Layer = JB_Incr(JB_ClassData_CreateUseLayer((&MessageData), self, str));
		JB_Decr(Layer);
		JB_SetRef(self->FData, str);
		JB_SetRef(JB_StdErr->Source, JB_File_Path(self));
		JB__Tk_DotInsertAllow = true;
		byte oldimp = SC__Imp_CurrIsManuallyImported;
		SC__Imp_CurrIsManuallyImported = self->Proj->Depth;
		JB__Tk_Using.Tag = 0;
		if ((!Orig)) {
			JB_SetRef(rz, SC_Str_ParseClean(self->FData));
		}
		 else {
			JB_SetRef(rz, JB_Str_Parse(self->FData, JB_SyxArg, true));
		}
		SC__Imp_CurrIsManuallyImported = oldimp;
		SC_SCFile_DetectInsecureWords(self);
		JB__Tk_Using.Tag = 0;
		JB__Tk_DotInsertAllow = false;
		JB_SetRef(JB_StdErr->Source, JB_LUB[0]);
	}
	JB_Decr(str);
	JB_ClassData_Restore((&MessageData));
	JB_SafeDecr(rz);
	return rz;
}

void SC_SCFile_CollectGlobals(SCFile* self, SCNode* p) {
	SC_Imp_Use(self->Proj);
	SC_CollectDeclsGlobals(self->LiveAST, p);
}

SCFile* SC_SCFile_Constructor(SCFile* self, JB_File* f, SCImport* p) {
	if (self == nil) {
		self = ((SCFile*)JB_NewClass(&SCFileData));
	}
	JB_String* _tmPf0 = JB_Incr(((JB_String*)JB_Ternary(f != nil, ((JB_String*)JB_File_Path(f)), ((JB_String*)JB_LUB[0]))));
	JB_File_Constructor(self, _tmPf0);
	JB_Decr(_tmPf0);
	JB_StringC* _tmPf3 = JB_LUB[0];
	self->ExportName = JB_Incr(_tmPf3);
	JB_StringC* _tmPf2 = JB_LUB[0];
	self->FData = JB_Incr(_tmPf2);
	self->OrigAST = nil;
	self->filenum = 0;
	//;
	self->Proj = JB_Incr(p);
	self->IsInternal = (f == nil);
	Message* _tmPf1 = SC_SCFile_Start_AST(self);
	self->LiveAST = JB_Incr(_tmPf1);
	SC__Comp_stTotalFileCount = (SC__Comp_stTotalFileCount + self->IsInternal);
	SC__Imp_Recent = JB_int64_OperatorMax(SC__Imp_Recent, JB_File_Modified(f));
	return self;
}

void SC_SCFile_Destructor(SCFile* self) {
	JB_Clear(self->ExportName);
	JB_Clear(self->Proj);
	JB_Clear(self->FData);
	JB_Clear(self->LiveAST);
	JB_Clear(self->OrigAST);
	JB_File_Destructor(self);
}

void SC_SCFile_DetectInsecureWords(SCFile* self) {
	if ((!SC__Options_PerryOutput)) {
		return;
	}
	Dictionary* words = SC__Comp_InsecureWords;
	if ((!words)) {
		return;
	}
	ivec2 where = ivec2{0, 0};
	JB_Object* found = JB_Dict_FindStr(words, self->FData, (&where));
	if (found) {
		Message* place = JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[0]);
		(JB_Msg_RangeSet(place, ((IntRange)where)));
		JB_Rec__NewErrorWithNode(place, JB_LUB[924], JB_File_Path(self));
	}
}

Message* SC_SCFile_GetMsg(SCFile* self, int pos) {
	{
		Message* _LoopSrcf3 = SC_SCFile_Orig(self);
		Message* f = _LoopSrcf3;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(_LoopSrcf3));
		while (((bool)(f)) and (f != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(f));
			if (JB_Str_Exists(f->Name) and JB_Rg_Contains1(JB_Msg_Range(f), pos)) {
				return f;
			}
			f = _N_f2;
		};
		;
	}
	;
	return nil;
}

Message* SC_SCFile_Orig(SCFile* self) {
	if ((!self->OrigAST)) {
		JB_SetRef(self->OrigAST, SC_SCFile_ASTSub(self, true));
	}
	return self->OrigAST;
}

Message* SC_SCFile_Start_AST(SCFile* self) {
	Message* rz = nil;
	if (self->IsInternal) {
		JB_MemoryLayer* _tmPf0 = JB_Incr(JB_Mem_CreateLayer((&MessageData), self));
		JB_Mem_Use(_tmPf0);
		JB_Decr(_tmPf0);
		JB_SetRef(rz, JB_Msg_ConstructorNormal(nil, JB_SyxArg, JB_LUB[0]));
		JB_ClassData_Restore((&MessageData));
	}
	JB_SafeDecr(rz);
	return rz;
}

void SC_SCFile_Use(SCFile* self) {
	SC__Imp_Curr = self->Proj;
	Message* l = JB_Incr(self->LiveAST);
	if (l) {
		JB_MemoryLayer* _tmPf0 = JB_Incr(JB_ObjLayer(l));
		JB_Mem_Use(_tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(l);
}


void SC_Iter_Check(SCIterator* self, SCClass* cls) {
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self->Source);
	JB_String* dot = JB_Incr(((JB_String*)JB_Ternary(JB_Str_Exists(self->Name), ((JB_String*)JB_Str_OperatorPlus(JB_LUB[354], self->Name)), ((JB_String*)JB_LUB[0]))));
	FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf1, JB_LUB[1737]);
	JB_FS_AppendString(_fsf1, dot);
	JB_Decr(dot);
	JB_FS_AppendString(_fsf1, JB_LUB[182]);
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf1));
	JB_Decr(_fsf1);
	Message* msg = JB_Incr(SC_Str_ParseClean(_tmPf2));
	JB_Decr(_tmPf2);
	SCFunction* fnc = JB_Incr(((SCFunction*)SC_Func__NewFunc(msg, cls, self->Source)));
	JB_Decr(msg);
	if (fnc) {
		SC_Func_FuncDecls(fnc);
		SC_Func_Transform(fnc);
	}
	JB_Decr(fnc);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

SCIterator* SC_Iter_Constructor(SCIterator* self, SCClass* parent, Message* msg) {
	if (self == nil) {
		self = ((SCIterator*)JB_NewClass(&SCIteratorData));
	}
	SC_Named_Constructor(self);
	self->ValueRenamer = nil;
	self->Parent = JB_Incr(parent);
	Message* thg = JB_Incr(((Message*)JB_Ring_First(msg)));
	JB_String* x = JB_Incr(JB_Msg_Name(thg));
	JB_Decr(thg);
	if ((!JB_Str_Exists(x))) {
		JB_SetRef(x, JB_LUB[818]);
	}
	self->Name = JB_Incr(x);
	JB_Decr(x);
	ErrorMarker M = JB_Rec_Mark(JB_StdErr);
	Message* src = JB_Incr(JB_Msg_Last(msg, JB_SyxArg));
	if ((!src)) {
		JB_Msg_SyntaxExpect(msg, nil);
	}
	self->Source = JB_Incr(src);
	Message* _tmPf0 = JB_Incr(JB_Msg_FindSyxName(self->Source, JB_SyxTmp, JB_LUB[2048], false));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(msg, JB_LUB[1793]);
	}
	self->WhileLoop = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* WhileArg = JB_Incr(JB_Msg_FindSyx(self->WhileLoop, JB_SyxArg));
	if ((!WhileArg)) {
		JB_Msg_SyntaxExpect(self->WhileLoop, JB_LUB[1790]);
	}
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(WhileArg)));
	Message* _tmPf4 = ((Message*)JB_Ring_First(_tmPf2));
	JB_Decr(_tmPf2);
	self->LoopEndCond = JB_Incr(_tmPf4);
	Message* Cond = JB_Incr(((Message*)JB_Ring_First(self->WhileLoop)));
	if (Cond == WhileArg) {
		JB_SetRef(Cond, (JB_Syx_Msg(JB_SyxThg, JB_LUB[2005])));
	}
	 else if ((bool)Cond) {
		JB_SetRef(Cond, SC_Msg_NeedBra(Cond));
	}
	self->LoopCond = JB_Incr(Cond);
	JB_Decr(Cond);
	Message* w = nil;
	if (WhileArg) {
		JB_SetRef(w, JB_Msg_FindNested(WhileArg, JB_SyxTmp, JB_LUB[2065], false));
		if ((!w)) {
			JB_Msg_SyntaxExpect(WhileArg, JB_LUB[1025]);
		}
	}
	JB_Decr(WhileArg);
	self->Yield = JB_Incr(w);
	JB_Decr(w);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(self->Yield)));
	if ((!_tmPf1)) {
		JB_Msg_SyntaxExpect(self->Yield, JB_LUB[1024]);
	}
	self->Value = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	Message* i = JB_Incr(((Message*)JB_Tree_Second(self->Yield)));
	if (i) {
		JB_Msg_Expect(i, JB_SyxBra, nil);
		JB_SetRef(i, ((Message*)JB_Ring_First(i)));
	}
	self->Index = JB_Incr(i);
	JB_Decr(i);
	SCNodeRenamer* sn = JB_Incr(SC_NR_Constructor(nil));
	self->selfs = JB_Incr(sn);
	if (src) {
		SC_NR_CollectSelfs(sn, src);
	}
	JB_Decr(sn);
	Array* _tmPf3 = SC_Iter_Uniqueify(self, src);
	JB_Decr(src);
	self->Names = JB_Incr(_tmPf3);
	self->OK = JB_ErrorMarker_SyntaxCast(M);
	return self;
}

void SC_Iter_Destructor(SCIterator* self) {
	JB_Clear(self->Names);
	JB_Clear(self->selfs);
	JB_Clear(self->ValueRenamer);
	JB_Clear(self->Index);
	JB_Clear(self->LoopCond);
	JB_Clear(self->LoopEndCond);
	JB_Clear(self->Value);
	JB_Clear(self->WhileLoop);
	JB_Clear(self->Yield);
	JB_Clear(self->Parent);
	SC_Named_Destructor(self);
}

Message* SC_Iter_MakeWhile(SCIterator* self, Message* arg, Message* postcond) {
	Message* result = JB_Incr(JB_Msg_Copy(self->WhileLoop, arg));
	Message* Loop = JB_Incr(SC_Msg_Deepest(result, JB_SyxTmp, JB_LUB[2048]));
	if ((!Loop)) {
		JB_Decr(Loop);
		JB_Decr(result);
		return nil;
	}
	Message* larg = JB_Incr(JB_Msg_FindSyx(Loop, JB_SyxArg));
	if ((!larg)) {
		JB_Decr(larg);
		JB_Decr(Loop);
		JB_Decr(result);
		return nil;
	}
	Message* it = JB_Incr(((Message*)JB_Ring_NextSib(larg)));
	if (it) {
		JB_Tree_Remove(it);
	}
	JB_Decr(it);
	JB_FreeIfDead(SC_Msg_ReplaceWith(larg, arg));
	JB_Decr(larg);
	JB_Tree_SyntaxAppend(Loop, postcond);
	JB_Decr(Loop);
	JB_SafeDecr(result);
	return result;
}

void SC_Iter_RenameSelf(SCIterator* self, Message* Name) {
	SC_NR_Rename(self->selfs, Name);
}

void SC_Iter_RenameValue(SCIterator* self, Message* s) {
	SCNodeRenamer* v = JB_Incr(self->ValueRenamer);
	if ((!v)) {
		JB_SetRef(v, SC_NR_Constructor(nil));
		JB_SetRef(self->ValueRenamer, v);
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_FlatAfter(self->Source)));
		SC_NR_Collect(v, self->Source, self->Value->Name, _tmPf0);
		JB_Decr(_tmPf0);
	}
	SC_NR_Rename(v, s);
	JB_Decr(v);
}

void SC_Iter_Renuqify(SCIterator* self, SCNode* p) {
	{
		Array* _LoopSrcf2 = self->Names;
		int _if0 = 0;
		while (true) {
			SCNodeRenamer* n = ((SCNodeRenamer*)JB_Array_Value(_LoopSrcf2, _if0));
			if (n == nil) {
				break;
			}
			SC_NR_Uniqueify(n, p);
			_if0++;
		};
	};
}

Array* SC_Iter_Uniqueify(SCIterator* self, Message* msg) {
	Array* rz = ((Array*)JB_Array_Constructor0(nil));
	{
		Message* dcl = msg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(msg));
		while (((bool)(dcl)) and (dcl != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(dcl));
			if (JB_Msg_EqualsSyx(dcl, JB_SyxDecl, false)) {
				Message* CurrName = SC_Msg_GetDclName(dcl, false);
				if (CurrName) {
					SCNodeRenamer* ren = SC_NR_Constructor(nil);
					SC_NR_CollectDclThg(ren, CurrName);
					JB_Array_SyntaxAppend(rz, ren);
				}
			}
			dcl = _N_f2;
		};
		;
	}
	;
	return rz;
}

int SC_Iter__Init_() {
	{
	}
	;
	return 0;
}

int SC_Iter__InitCode_() {
	{
	}
	;
	JB_SetRef(SC__Iter_carray, SC_Iter__SimpleIter(JB_LUB[1735]));
	JB_SetRef(SC__Iter_pointer, SC_Iter__SimpleIter(JB_LUB[1736]));
	return 0;
}

SCNode* SC_Iter__NeuIter(Message* node, SCNode* name_space, Message* ErrPlace) {
	if (JB_Object_MustBe(name_space, &SCClassData, node)) {
		SCIterator* it = JB_Incr(SC_Iter_Constructor(nil, ((SCClass*)name_space), node));
		if (it->OK) {
			SC_Base_TryAdd(((SCClass*)name_space), node, it, it->Name);
			JB_Decr(it);
			return SC__Comp_program;
		}
		JB_Decr(it);
	}
	return nil;
}

SCIterator* SC_Iter__SimpleIter(JB_String* src) {
	SCIterator* rz = nil;
	Message* _tmPf1 = JB_Incr(JB_Str_Parse(src, JB_SyxArg, true));
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(_tmPf1)));
	Message* s = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	SCIterator* it = JB_Incr(SC_Iter_Constructor(nil, nil, s));
	JB_Decr(s);
	if (it->OK) {
		JB_SetRef(rz, it);
	}
	JB_Decr(it);
	JB_Decr(_tmPf1);
	JB_SafeDecr(rz);
	return rz;
}


JB_String* SC_Base_AutoCompleteKind(SCNode* self) {
	if (JB_Object_FastIsa(self, &SCModuleData)) {
		return JB_LUB[1799];
	}
	if (JB_Object_FastIsa(self, &SCClassData)) {
		if (((SCClass*)self)->FuncProto) {
			return JB_LUB[1679];
		}
		if (SC_Class_IsDataTypeOnly(((SCClass*)self))) {
			return JB_LUB[1586];
		}
		if (SC_Class_IsStruct(((SCClass*)self))) {
			return JB_LUB[1973];
		}
		if (SC_Class_IsObject(((SCClass*)self))) {
			return JB_LUB[1545];
		}
	}
	return JB_LUB[2021];
}

void SC_Base_Collect(SCNode* self, Message* AST, bool Visible, Message* dest) {
	if ((!(self->Source))) {
		JB_SetRef(self->Source, AST);
	}
	Array* r = JB_Incr(SC_Msg_ListAll(AST));
	{
		int _if0 = 0;
		while (true) {
			Message* c = JB_Incr(((Message*)JB_Array_Value(r, _if0)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			SC_Base_CollectOne(self, c, Visible);
			JB_Decr(c);
			_if0++;
		};
	}
	;
	if ((!dest)) {
		JB_Decr(r);
		return;
	}
	{
		int _if2 = 0;
		while (true) {
			Message* c = JB_Incr(((Message*)JB_Array_Value(r, _if2)));
			if (c == nil) {
				JB_Decr(c);
				break;
			}
			if (JB_FreeIfDead(((Message*)JB_Ring_Parent(c))) == AST) {
				JB_Tree_SyntaxAppend(dest, c);
			}
			JB_Decr(c);
			_if2++;
		};
	}
	;
	JB_Decr(r);
}

void SC_Base_CollectConstantsSub(SCNode* self, Message* ch) {
	Message* FuncName = JB_Incr(((Message*)JB_Ring_First(ch)));
	if ((!FuncName)) {
		JB_Decr(FuncName);
		return;
	}
	Message* arg = JB_Incr(((Message*)JB_Tree_Get(ch, -1)));
	Message* vs = JB_Incr(FuncName);
	if (JB_Msg_EqualsSyx(FuncName, JB_SyxThg, false)) {
		JB_SetRef(vs, ((Message*)JB_Ring_NextSib(FuncName)));
	}
	 else {
		JB_SetRef(FuncName, nil);
	}
	if (arg != vs) {
		JB_Msg_SyntaxExpect(vs, nil);
		JB_Decr(vs);
		JB_Decr(arg);
		JB_Decr(FuncName);
		return;
	}
	JB_Decr(vs);
	if ((!((JB_Msg_EqualsSyx(arg, JB_SyxArg, false)) or (JB_Msg_EqualsSyx(arg, JB_SyxList, false))))) {
		JB_Msg_SyntaxExpect(arg, nil);
		JB_Decr(arg);
		JB_Decr(FuncName);
		return;
	}
	uint64 NextNum = 0 + ((JB_Msg_SyntaxEquals(ch, JB_LUB[1657], false)));
	uint64 StartNum = NextNum;
	uint64 LastFlag = 0;
	Array* FixLater = JB_Incr(JB_Array_Constructor0(nil));
	Array* NameList = JB_Incr(JB_Array_Constructor0(nil));
	SCDecl* CurrType = nil;
	{
		Message* line = JB_Incr(((Message*)JB_Ring_First(arg)));
		while (line) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(line)));
			if ((((JB_Msg_EqualsSyx(line, JB_SyxRel, false))) and ((({
				Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_First(line)));
				bool _tmPf7 = JB_Msg_EqualsSyx(_tmPf8, JB_SyxList, false);
				JB_Decr(_tmPf8);
				 _tmPf7;
			})))) or ((({
				Message* _tmPf10 = JB_Incr(((Message*)JB_Ring_Last(line)));
				bool _tmPf9 = JB_Msg_EqualsSyx(_tmPf10, JB_SyxList, false);
				JB_Decr(_tmPf10);
				 _tmPf9;
			})))) {
				SC_Base_ConstantExpand(self, line);
			}
			 else if (JB_Msg_EqualsSyx(line, JB_SyxTmp, false)) {
				if (JB_Ring_HasChildren(line)) {
					JB_Msg_SyntaxExpect(line, nil);
					JB_Decr(_Nf2);
					JB_Decr(line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(arg);
					JB_Decr(FuncName);
					return;
				}
				line->Func = JB_SyxThg;
			}
			JB_SetRef(line, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(line);
		;
	}
	;
	{
		Message* Line = JB_Incr(((Message*)JB_Ring_First(arg)));
		while (Line) {
			Message* _Nf4 = JB_Incr(((Message*)JB_Ring_NextSib(Line)));
			if (JB_Msg_EqualsSyx(Line, JB_SyxDecl, false)) {
				Message* _tmPf11 = JB_Incr(((Message*)JB_Ring_First(Line)));
				JB_SetRef(CurrType, SC_ExtractDecl(_tmPf11, self, kSC__DeclMode_Globals));
				JB_Decr(_tmPf11);
				if ((!CurrType)) {
					JB_Msg_SyntaxExpect(Line, nil);
					JB_Decr(_Nf4);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(arg);
					JB_Decr(FuncName);
					return;
				}
				JB_Tree_Remove(Line);
				JB_SetRef(Line, _Nf4);
				JB_Decr(_Nf4);
				continue;
			}
			if (JB_Msg_SyntaxEquals(Line, JB_LUB[358], false)) {
				NextNum = StartNum;
				JB_SetRef(Line, _Nf4);
				JB_Decr(_Nf4);
				continue;
			}
			SCDecl* NewItem = nil;
			if (JB_Msg_EqualsSyx(Line, JB_SyxThg, false)) {
				//using;
				MessagePosition _usingf0 = JB_Msg_SyntaxUsing(Line);
				JB_SetRef(NewItem, SC_Decl_Constructor(nil, JB_TypeInt));
				Message* NewNum = JB_Incr(SC_NewDeclNum(NewItem, NextNum, Line->Name));
				JB_SetRef(NewItem->Source, Line);
				if (JB_Msg_SyntaxEquals(ch, JB_LUB[1657], false)) {
					LastFlag++;
					NextNum = (NextNum << 1);
				}
				 else {
					NextNum++;
				}
				if (CurrType) {
					SC_Decl_ConstCheck(CurrType, nil, NewNum, CurrType);
					SC_Decl_CopyTypeInfoTo(CurrType, NewItem);
				}
				JB_Decr(NewNum);
				JB_MsgPos_SyntaxUsingComplete((&_usingf0));
				JB_MsgPos_Destructor((&_usingf0));
			}
			 else {
				if ((!(JB_Msg_Expect(Line, JB_SyxRel, nil) and ({
					Message* _tmPf13 = JB_Incr(JB_Msg_NeedSyxInt(Line, JB_SyxOpp, 1));
					bool _tmPf12 = JB_Msg_Expect(_tmPf13, JB_SyxOpp, JB_LUB[587]);
					JB_Decr(_tmPf13);
					 _tmPf12;
				})))) {
					JB_Decr(NewItem);
					JB_Decr(_Nf4);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(arg);
					JB_Decr(FuncName);
					return;
				}
				Message* ValueNode = JB_Incr(((Message*)JB_Tree_Get(Line, 2)));
				if ((!ValueNode)) {
					JB_Msg_SyntaxExpect(Line, nil);
					JB_Decr(ValueNode);
					JB_Decr(NewItem);
					JB_Decr(_Nf4);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(arg);
					JB_Decr(FuncName);
					return;
				}
				Message* thg = JB_Incr(JB_Msg_NeedSyx(Line, JB_SyxThg));
				if ((!thg)) {
					JB_Decr(thg);
					JB_Decr(ValueNode);
					JB_Decr(NewItem);
					JB_Decr(_Nf4);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(arg);
					JB_Decr(FuncName);
					return;
				}
				SCDecl* OMGType = JB_Incr(SC_TypeOfExpr(ValueNode, self, nil));
				if ((!OMGType)) {
					JB_Decr(OMGType);
					JB_Decr(thg);
					JB_Decr(ValueNode);
					JB_Decr(NewItem);
					JB_Decr(_Nf4);
					JB_Decr(Line);
					JB_Decr(CurrType);
					JB_Decr(NameList);
					JB_Decr(FixLater);
					JB_Decr(arg);
					JB_Decr(FuncName);
					return;
				}
				SCDecl* NewType = JB_Incr(CurrType);
				if ((!((NewType)))) {
					JB_SetRef(NewType, OMGType);
				}
				JB_SetRef(NewItem, SC_Decl_Constructor(nil, NewType->Type));
				if (JB_Msg_EqualsSyx(ValueNode, JB_SyxStr, false)) {
					SC_Func__ObjectifyString(ValueNode);
					JB_SetRef(ValueNode->Obj, JB_TypeString->TypeNormal);
				}
				 else if ((SC_Msg_IsInt(ValueNode)) or ((JB_Msg_EqualsSyx(ValueNode, JB_SyxUnit, false)))) {
					SC_Decl_ConstCheck(NewType, nil, ValueNode, OMGType);
					NextNum = (JB_Msg_Int(ValueNode, 0) + 1);
				}
				JB_Decr(OMGType);
				JB_Array_SyntaxAppend(FixLater, NewItem);
				SC_Decl_CopyTypeInfoTo(NewType, NewItem);
				JB_Decr(NewType);
				(SC_Decl_NameSet(NewItem, thg->Name));
				JB_SetRef(NewItem->Default, ValueNode);
				JB_Decr(ValueNode);
				JB_SetRef(NewItem->Source, thg);
				JB_Decr(thg);
			}
			NewItem->NilDeclared = kSC__NilState_Real;
			SC_Comp__NewConst(NewItem);
			JB_Array_SyntaxAppend(NameList, NewItem->Source);
			SC_Base_TryAdd(self, Line, NewItem, NewItem->Name);
			JB_Decr(NewItem);
			JB_SetRef(Line, _Nf4);
			JB_Decr(_Nf4);
		};
		JB_Decr(Line);
		;
	}
	;
	JB_Decr(arg);
	JB_Decr(CurrType);
	if (JB_Msg_SyntaxEquals(ch, JB_LUB[1657], false)) {
		SCDecl* NewItem = JB_Incr(SC_Decl_Constructor(nil, JB_TypeInt));
		SC_Comp__NewConst(NewItem);
		JB_String* s = JB_Incr(((JB_String*)JB_Ternary(((bool)FuncName), ((JB_String*)FuncName->Name), ((JB_String*)JB_LUB[879]))));
		JB_String* _tmPf14 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[988], s));
		JB_Decr(s);
		JB_FreeIfDead(SC_NewDeclNum(NewItem, JB_int_Bits(((int)LastFlag)), _tmPf14));
		JB_Decr(_tmPf14);
		SC_Base_TryAdd(self, ch, NewItem, NewItem->Name);
		JB_Decr(NewItem);
	}
	{
		int _if5 = 0;
		while (true) {
			SCDecl* D = JB_Incr(((SCDecl*)JB_Array_Value(FixLater, _if5)));
			if (D == nil) {
				JB_Decr(D);
				break;
			}
			SC_Base_Tran_Const(self, D, self);
			JB_Decr(D);
			_if5++;
		};
	}
	;
	JB_Decr(FixLater);
	if (FuncName) {
		SC_Base_CreateNameDict(self, FuncName, NameList);
	}
	JB_Decr(FuncName);
	JB_Decr(NameList);
}

void SC_Base_CollectOne(SCNode* self, Message* c, bool Visible) {
	if (SC_Msg_OperatorIsTmp(c, JB_LUB[2037])) {
		SC_Base_LoadVisibility(self, c);
		JB_Tree_Remove(c);
		return;
	}
	bool Old = SC__Base_CurrVisibility;
	SC__Base_CurrVisibility = Visible;
	if ((!JB_FreeIfDead(SC_Base_CollectSub(self, c))) and (JB_Object_FastIsa(self, &SCModuleData))) {
		SC_Mod_MoveToInitFunc(((SCModule*)self), c);
	}
	SC__Base_CurrVisibility = Old;
}

void SC_Base_CollectOneConstants(SCNode* self, Message* ch) {
	SC__Base_ConstantsLoadingOverride = true;
	SC_Imp_Use(self->Project);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(ch);
	SC_Base_CollectConstantsSub(self, ch);
	SC__Base_ConstantsLoadingOverride = false;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Base_CollectString(SCNode* self, JB_String* s) {
	Message* rz = nil;
	JB_SetRef(rz, SC_Str_ParseClean(s));
	SC_Base_Collect(self, rz, false, nil);
	JB_SafeDecr(rz);
	return rz;
}

SCNode* SC_Base_CollectSub(SCNode* self, Message* c) {
	Dictionary* T = JB_Incr(JB_ClsCollectTable);
	if ((self == SC__Comp_program) or JB_Object_Isa(self, &SCModuleData)) {
		JB_SetRef(T, JB_RootCollectTable);
	}
	if ((!JB_Msg_EqualsSyx(c, JB_SyxTmp, false))) {
		if (JB_Object_FastIsa(self, &SCClassData)) {
			JB_Msg_Expect(c, JB_SyxDecl, nil);
		}
		JB_Decr(T);
		return nil;
	}
	DTWrap* FnObj = JB_Incr(((DTWrap*)JB_Dict_ValueStr(T, c->Name)));
	JB_Decr(T);
	if ((!FnObj)) {
		JB_Msg_SyntaxExpect(c, nil);
		JB_Decr(FnObj);
		return nil;
	}
	SCNode* base = JB_Incr((((FP_CollectFunc)JB_Wrap_First(FnObj)))(c, self, c));
	JB_Decr(FnObj);
	if ((!base)) {
		JB_Decr(base);
		return nil;
	}
	if (base != SC__Comp_program) {
		SC_Base_TryAdd(self, c, base, base->Name);
	}
	JB_SafeDecr(base);
	return base;
}

void SC_Base_ConstantExpand(SCNode* self, Message* ch) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(ch)));
	Message* L = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_NextSib(L)));
	Message* op = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(op)));
	Message* R = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	if ((!(((JB_Msg_SyntaxEquals(op, JB_LUB[587], false))) and ((JB_Msg_EqualsSyx(L, JB_SyxThg, false)))))) {
		JB_Msg_SyntaxExpect(op, JB_LUB[847]);
		JB_Decr(R);
		JB_Decr(op);
		JB_Decr(L);
		return;
	}
	JB_Decr(op);
	Message* Rel = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
	JB_Tree_SyntaxAppend(Rel, L);
	JB_Decr(L);
	Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[587]));
	JB_Tree_SyntaxAppend(Rel, (_tmPf3));
	JB_Decr(_tmPf3);
	Message* _tmPf4 = JB_Incr(SC_Msg_ConstantExpandSub(R));
	JB_Tree_SyntaxAppend(Rel, _tmPf4);
	JB_Decr(_tmPf4);
	(JB_Ring_NextSibSet(ch, Rel));
	JB_Decr(Rel);
	SC_Msg_MoveAllAfter(R, ch);
	JB_Decr(R);
	JB_Tree_Remove(ch);
}

SCNode* SC_Base_Constructor0(SCNode* self) {
	if (self == nil) {
		self = ((SCNode*)JB_NewClass(&SCNodeData));
	}
	SC_Named_Constructor(self);
	self->Access = nil;
	self->Parent = nil;
	self->MyReacher = nil;
	self->Project = SC__Imp_Curr;
	(SC_SCObject_IsVisibleSet(self, SC__Base_CurrVisibility));
	return self;
}

SCNode* SC_Base_ConstructorStr(SCNode* self, JB_String* Name, bool Dummy) {
	if (self == nil) {
		self = ((SCNode*)JB_NewClass(&SCNodeData));
	}
	SC_Named_Constructor(self);
	self->Access = nil;
	self->Parent = nil;
	self->MyReacher = nil;
	self->Project = SC__Imp_Curr;
	self->Name = JB_Incr(Name);
	return self;
}

SCNode* SC_Base_ConstructorMsg(SCNode* self, Message* node) {
	if (self == nil) {
		self = ((SCNode*)JB_NewClass(&SCNodeData));
	}
	SC_Named_Constructor(self);
	self->Access = nil;
	self->Parent = nil;
	self->MyReacher = nil;
	self->Source = JB_Incr(node);
	(SC_SCObject_IsVisibleSet(self, SC__Base_CurrVisibility));
	self->Project = SC__Imp_Curr;
	return self;
}

void SC_Base_CreateNameDict(SCNode* self, Message* FuncName, Array* NameList) {
	if ((!JB_Msg_EqualsSyx(FuncName, JB_SyxThg, false))) {
		JB_Msg_SyntaxExpect(FuncName, JB_LUB[1048]);
		return;
	}
	JB_String* AllSameType = JB_Incr(JB_LUB[0]);
	{
		int _if2 = 0;
		while (true) {
			Message* n = JB_Incr(((Message*)JB_Array_Value(NameList, _if2)));
			if (n == nil) {
				JB_Decr(n);
				break;
			}
			SCDecl* Type = JB_Incr(SC_TypeOfExpr(n, self, nil));
			if ((!Type)) {
				JB_Decr(Type);
				JB_Decr(n);
				JB_Decr(AllSameType);
				return;
			}
			if ((!SC_Decl_IsNormal(Type))) {
				JB_Msg_SyntaxExpect(n, JB_LUB[1280]);
				JB_Decr(Type);
				JB_Decr(n);
				JB_Decr(AllSameType);
				return;
			}
			JB_Decr(n);
			JB_String* NewType = JB_Incr(Type->Type->Name);
			JB_Decr(Type);
			if ((JB_Str_Equals(AllSameType, NewType, false)) or (JB_Str_Equals(AllSameType, JB_LUB[0], false))) {
				JB_SetRef(AllSameType, NewType);
			}
			 else {
				JB_SetRef(AllSameType, JB_LUB[1837]);
			}
			JB_Decr(NewType);
			_if2++;
		};
	}
	;
	if ((!(JB_Str_Exists(AllSameType)))) {
		JB_SetRef(AllSameType, JB_LUB[1837]);
	}
	JB_String* Name = JB_Incr(FuncName->Name);
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	//;
	JB_FS_AppendString(fs, JB_LUB[79]);
	JB_FS_AppendString(fs, Name);
	JB_FS_AppendString(fs, JB_LUB[133]);
	JB_FS_AppendString(fs, AllSameType);
	JB_FS_AppendString(fs, JB_LUB[2074]);
	JB_FS_AppendString(fs, Name);
	JB_FS_AppendString(fs, JB_LUB[1432]);
	JB_FS_AppendString(fs, Name);
	JB_FS_AppendString(fs, JB_LUB[1433]);
	//;
	{
		int _if4 = 0;
		while (true) {
			Message* s = JB_Incr(((Message*)JB_Array_Value(NameList, _if4)));
			if (s == nil) {
				JB_Decr(s);
				break;
			}
			JB_FS_AppendString(fs, JB_LUB[38]);
			JB_String* _tmPf6 = JB_Incr(JB_Str_LowerCase(s->Name));
			JB_FS_AppendString(fs, _tmPf6);
			JB_Decr(_tmPf6);
			JB_FS_AppendString(fs, JB_LUB[222]);
			JB_FS_SyntaxAppend(fs, s);
			JB_Decr(s);
			JB_FS_AppendString(fs, JB_LUB[280]);
			_if4++;
		};
	}
	;
	JB_FS_AppendString(fs, JB_LUB[46]);
	JB_String* FuncSrc = JB_Incr(JB_FS_GetResult(fs));
	JB_Decr(fs);
	Message* _tmPf7 = JB_Incr(SC_Str_ParseClean(FuncSrc));
	JB_Decr(FuncSrc);
	Message* msg = JB_Incr(((Message*)JB_Tree_Get(_tmPf7, 0)));
	JB_Decr(_tmPf7);
	if ((!msg)) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(msg);
		JB_Decr(Name);
		JB_Decr(AllSameType);
		return;
	}
	JB_FreeIfDead(SC_Base_CollectSub(self, msg));
	JB_Decr(msg);
	FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf1, JB_LUB[2077]);
	JB_FS_AppendString(_fsf1, AllSameType);
	JB_Decr(AllSameType);
	JB_FS_AppendString(_fsf1, JB_LUB[2071]);
	JB_FS_AppendString(_fsf1, Name);
	JB_Decr(Name);
	JB_FS_AppendString(_fsf1, JB_LUB[1434]);
	JB_String* DclSrc = JB_Incr(JB_FS_GetResult(_fsf1));
	JB_Decr(_fsf1);
	Message* DclMsg = JB_Incr(SC_Str_ParseClean(DclSrc));
	JB_Decr(DclSrc);
	if (DclMsg) {
		SC_Msg_CollectFromBody(DclMsg, self);
	}
	JB_Decr(DclMsg);
}

void SC_Base_Destructor(SCNode* self) {
	JB_Clear(self->Access);
	SC_Named_Destructor(self);
}

Message* SC_Base_DiissplayObj(SCNode* self, Message* rz) {
	JB_String* _tmPf1 = JB_Incr(SC_Base_AutoCompleteKind(self));
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[100], self->Name));
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(_tmPf1, _tmPf2));
	JB_Decr(_tmPf1);
	JB_Decr(_tmPf2);
	JB_Msg_AppendSyx(rz, JB_SyxEmb, _tmPf0);
	JB_Decr(_tmPf0);
	return rz;
}

bool SC_Base_ExpectModule(SCNode* self, Message* errplace) {
	if ((!JB_Object_Isa(self, &SCModuleData))) {
		JB_Msg_SyntaxExpect(errplace, JB_LUB[1042]);
		return nil;
	}
	return true;
}

SCClass* SC_Base_FindClass(SCNode* self, JB_String* name, Message* where, SCNodeFindMode Mode) {
	SCModule* Mod = SC_Base_FindModule(self, name, where, Mode);
	if (Mod) {
		if (Mod->Cls) {
			return Mod->Cls;
		}
		if (!(SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_NoErrors))) {
			if (true) {
				JB_Msg_SyntaxExpect(where, JB_LUB[848]);
			}
		}
	}
	return nil;
}

SCClass* SC_Base_FindClassMsg(SCNode* self, Message* where, SCNodeFindMode Mode) {
	SCModule* mod = SC_Base_FindModuleMsg(self, where, Mode);
	if (mod) {
		SCClass* C = mod->Cls;
		if (C) {
			return C;
		}
		if (!(SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_NoErrors))) {
			if (true) {
				JB_Msg_SyntaxExpect(where, JB_LUB[848]);
			}
		}
	}
	return nil;
}

Message* SC_Base_FindCppWrapper(SCNode* self, Message* place, bool isclass) {
	if (JB_Object_FastIsa(self, &SCFunctionData)) {
		Message* pl = JB_Incr(SC_Func_FindCppWrapperFunc(((SCFunction*)self), place));
		if (pl) {
			Message* _tmPf0 = JB_Incr(SC_Msg_FindAndRemove2(place, pl, true, false));
			JB_Decr(pl);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(pl);
	}
	return SC_Msg_FindAndRemoveSub(place, JB_LUB[1578], true, isclass);
}

SCModule* SC_Base_FindModule(SCNode* self, JB_String* name, Message* where, SCNodeFindMode Mode) {
	SCNode* Upon = self;
	while (Upon) {
		if (JB_Str_Equals(name, Upon->Name, true)) {
			if (JB_Object_FastIsa(Upon, &SCModuleData)) {
				return ((SCModule*)Upon);
			}
		}
		SCObject* Obj = SC_Base_SyntaxAccess(Upon, name);
		if (JB_Object_FastIsa(Obj, &SCModuleData)) {
			return ((SCModule*)Obj);
		}
		if (SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_DontGoUp)) {
			break;
		}
		Upon = SC_Base_FindModuleParent(Upon, Mode);
	};
	if (((bool)where) and ((!SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_NoErrors)))) {
		if (true) {
			JB_Msg_SyntaxExpect(where, JB_Str_OperatorPlus(JB_LUB[735], name));
		}
	}
	return nil;
}

SCModule* SC_Base_FindModuleMsg(SCNode* self, Message* where, SCNodeFindMode Mode) {
	Syntax fn = where->Func;
	if (fn == JB_SyxDot) {
		Message* f = ((Message*)JB_Ring_First(where));
		JB_Msg_Expect(((Message*)JB_Ring_NextSib(f)), JB_SyxEmb, nil);
		self = SC_Base_FindModuleMsg(self, f, Mode);
		if ((!self)) {
			return nil;
		}
	}
	 else {
		if ((!((fn == JB_SyxThg) or (fn == JB_SyxName)))) {
			JB_Msg_SyntaxExpect(where, nil);
			return nil;
		}
	}
	return SC_Base_FindModule(self, where->Name, where, Mode);
}

SCNode* SC_Base_FindModuleParent(SCNode* self, SCNodeFindMode Mode) {
	if (SC_SCNodeFindMode_SyntaxIs(Mode, kSC__SCNodeFindMode_WantAType)) {
		SCClass* cls = ((SCModule*)self)->Cls;
		if (cls) {
			SCClass* p = ((SCClass*)cls->Parent);
			if (p) {
				SCModule* mod = p->Modul;
				if (mod->Parent != self) {
					return mod;
				}
			}
		}
	}
	return self->Parent;
}

bool SC_Base_FindVis(SCNode* self, Message* c) {
	if ((!c)) {
		return true;
	}
	if (JB_Msg_EqualsSyx(c, JB_SyxThg, false)) {
		return SC_Msg_TrueOrFalse(c);
	}
	if (JB_Msg_EqualsSyx(c, JB_SyxAdj, false)) {
		Message* first = JB_Msg_NeedSyx(c, JB_SyxThg);
		JB_Msg_Expect(first, JB_SyxThg, JB_LUB[1545]);
		JB_String* name = JB_Msg_Name(JB_Msg_NeedSyxInt(c, JB_SyxThg, 1));
		SCClass* cls = SC_Comp__FindClassName(name);
		return ((bool)cls) and (!cls->Banned);
	}
	if (true) {
		JB_Msg_SyntaxExpect(c, nil);
	}
	return false;
}

Message* SC_Base_FuncSrc(SCNode* self) {
	SCFunction* _tmPf0 = JB_Incr(SC_Base_OwningFunc(self));
	if ((!_tmPf0)) {
		JB_Decr(_tmPf0);
		return nil;
	}
	Message* _tmPf1 = JB_Incr(_tmPf0->Source);
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Base_ImportFile(SCNode* self, SCFile* file) {
	Message* AST = JB_Incr(SC_SCFile_AST(file));
	if ((!AST)) {
		JB_Decr(AST);
		return;
	}
	SC__Base_CurrVisibility = false;
	SC_SCFile_Use(file);
	SC_Base_Collect(SC__Comp_program, AST, false, nil);
	JB_Decr(AST);
}

bool SC_Base_IsModuleFunc(SCNode* self) {
	if (JB_Object_FastIsa(self, &SCArgData)) {
		return (!((SCArg*)self)->IsClassArg);
	}
	return (JB_Object_Isa(self, &SCModuleData));
}

SCClass* SC_Base_IsNormalObject(SCNode* self) {
	if (JB_Object_FastIsa(self, &SCClassData)) {
		if (SC_Class_IsObject(((SCClass*)self))) {
			return ((SCClass*)self);
		}
	}
	return nil;
}

bool SC_Base_IsSTDLib(SCNode* self) {
	return ({
		SCImport* _t = self->Project;
		 ((bool)JB_Ternary(((bool)_t), _t->IsSTDLib, nil));
	});
}

JB_String* SC_Base_LateAddTempory(SCNode* self, JB_String* type, JB_String* name1, Message* Value, Message* err) {
	JB_String* name = JB_Incr(SC_UniqueTmpVar(SC__Comp_program, name1));
	JB_FreeIfDead(SC_TypeOfExpr(Value, self, nil));
	Message* msg = JB_Incr(SC_MakeDecl(type, name, Value, kSC__SCDeclInfo_Body));
	SCDecl* D = JB_Incr(SC_TypeOfExpr(msg, self, nil));
	if ((!D)) {
		JB_Decr(D);
		JB_Decr(msg);
		JB_Decr(name);
		return JB_LUB[0];
	}
	((SC_Decl_SyntaxIsSet(D, kSC__SCDeclInfo_DataConst, false)));
	JB_Tree_SyntaxAppend(self->Source, msg);
	JB_Decr(msg);
	SC_Base_TryAdd(self, err, D, name);
	JB_Decr(D);
	JB_SafeDecr(name);
	return name;
}

Message* SC_Base_LinkagePlace(SCNode* self) {
	Message* Place = JB_Incr(SC_Base_SourceArg(self));
	Message* Link = JB_Incr(JB_Msg_FindSyxName(Place, JB_SyxTmp, JB_LUB[1759], false));
	Message* _tmP0 = JB_Incr(JB_Msg_NeedSyx(Link, JB_SyxArg));
	JB_Decr(Link);
	if ((!_tmP0)) {
		JB_SetRef(_tmP0, Place);
	}
	JB_Decr(Place);
	JB_SafeDecr(_tmP0);
	return _tmP0;
}

Array* SC_Base_ListFunctions(SCNode* self) {
	Array* rz = JB_Incr(((Array*)JB_Array_Constructor0(nil)));
	if ((!self->Access)) {
		Array* _tmPf0 = JB_Incr((JB_Array_Constructor0(nil)));
		JB_Decr(rz);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	{
		Dictionary* _LoopSrcf3 = JB_Incr(self->Access);
		DictionaryReader* _navf1 = JB_Incr(JB_Dict_Navigate(_LoopSrcf3));
		JB_Decr(_LoopSrcf3);
		while (true) {
			SCObject* o = JB_Incr(((SCObject*)JB_DictionaryReader_NextValue(_navf1)));
			if (o == nil) {
				JB_Decr(o);
				break;
			}
			SC_ListFunctionsSub(o, rz);
			JB_Decr(o);
		};
		JB_Decr(_navf1);
	}
	;
	JB_SafeDecr(rz);
	return rz;
}

void SC_Base_LoadExportName(SCNode* self) {
	if (JB_Str_Exists(self->ExportName)) {
		return;
	}
	Message* place = JB_Incr(SC_Base_LinkagePlace(self));
	bool IsClass = (JB_Object_Isa(self, &SCClassData));
	Message* CW = JB_Incr(SC_Base_FindCppWrapper(self, place, IsClass));
	JB_String* CppName = JB_Incr(SC_Msg_FindAndRemove(place, JB_LUB[1574], false, IsClass));
	JB_String* CppPart = JB_Incr(SC_Msg_FindAndRemove(place, JB_LUB[1576], false, IsClass));
	if (JB_Object_FastIsa(self, &SCFunctionData)) {
		if ((!(((SCFunction*)self)->IsCppInBuilt))) {
			(SC_Func_IsCppInBuiltSet(((SCFunction*)self), ((int)((JB_Msg_EqualsSyx(CW, JB_SyxBra, false))))));
		}
		JB_String* CppWrapper = JB_Incr(SC_Msg_Cpp_Wrapper(CW));
		if (JB_Str_Exists(CppWrapper)) {
			SC_Func_MakeParamsReal(((SCFunction*)self));
		}
		if ((!((!SC_Func_UseExportWrapper(((SCFunction*)self), CppWrapper)) and ((!SC_Func_UseCppName(((SCFunction*)self), CppName)) and (!((SCFunction*)self)->IsDisabled))))) {
			JB_Decr(CppWrapper);
			JB_Decr(CppPart);
			JB_Decr(CppName);
			JB_Decr(CW);
			JB_Decr(place);
			return;
		}
		JB_Decr(CppWrapper);
		JB_SetRef(CppName, SC_Func_ExportNameBuilder(((SCFunction*)self), CppPart));
		((SCFunction*)self)->IsWrapper = ((bool)CW);
	}
	 else {
		if ((!(JB_Str_Exists(CppPart)))) {
			JB_SetRef(CppPart, self->Name);
		}
		if ((!(JB_Str_Exists(CppName)))) {
			JB_SetRef(CppName, CppPart);
		}
		if (JB_Object_FastIsa(self, &SCModuleData)) {
			JB_SetRef(((SCModule*)self)->CppPart, CppPart);
		}
		 else if (JB_Object_FastIsa(self, &SCClassData)) {
			JB_SetRef(((SCClass*)self)->Modul->CppPart, CppPart);
			JB_String* e = JB_Incr(SC_Msg_FindAndRemove(place, JB_LUB[1571], false, true));
			if (JB_Str_Exists(e)) {
				JB_SetRef(((SCClass*)self)->CppClass, SC_Str_UnicodeSafeName(e, nil));
			}
			JB_Decr(e);
			JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(CppPart, JB_LUB[1426]));
			SC_Base_SetExportName(((SCClass*)self)->Modul, _tmPf0, false);
			JB_Decr(_tmPf0);
		}
	}
	JB_Decr(place);
	JB_Decr(CW);
	JB_Decr(CppPart);
	SC_Base_SetExportName(self, CppName, false);
	JB_Decr(CppName);
}

void SC_Base_LoadVisibility(SCNode* self, Message* p) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(p)));
	SC__Base_CurrVisibility = SC_Base_FindVis(self, _tmPf0);
	JB_Decr(_tmPf0);
	(SC_SCObject_IsVisibleSet(self, SC__Base_CurrVisibility));
	SC_SC_MakeComment(p);
}

JB_Object* SC_Base_LookUpDot(SCNode* self, JB_String* name, Message* exp, SCNode* arg_space, SCDecl* contains, Message* side) {
	return SC_Base_LookUpSub(self, name, exp, ((Message*)JB_Ring_Last(exp)), arg_space, contains, side, kSC__Base_kPurposeDot);
}

SCFunction* SC_Base_LookUpFunc(SCNode* self, JB_String* name, Message* exp, Message* ParamsHere) {
	return ((SCFunction*)SC_Base_LookUpSub(self, name, exp, ParamsHere, self, nil, nil, kSC__Base_kPurposeFunc));
}

SCObject* SC_Base_LookUpSub(SCNode* self, JB_String* OrigName, Message* Exp, Message* ParamsHere, SCNode* Arg_Space, SCDecl* contains, Message* side, int Purpose) {
	SCParamArray* ParamsArray = JB_Incr(SC_PA_Constructor(nil, Exp));
	SCNode* Curr = JB_Incr(SC_PA_DetectDotSuper(ParamsArray, self, Arg_Space));
	SC_PA_PreReadTypes(ParamsArray, Arg_Space, ParamsHere, side);
	bool CanFunction = ((bool)(ParamsHere)) and ((!ParamsArray->IsAddress));
	SCFunction* Missing = nil;
	SCFunction* f = nil;
	SCClass* owning_cls = nil;
	bool AllowSelfToConstructor = false;
	if (SC__Func_CurrFunc) {
		JB_SetRef(owning_cls, SC__Func_CurrFunc->Cls);
		if (owning_cls) {
			AllowSelfToConstructor = SC_PA_IsSelfCon(ParamsArray);
		}
	}
	{
		SCNode* b = JB_Incr(Curr);
		while (b) {
			SCObject* o = JB_Incr(SC_Base_SyntaxAccess(b, OrigName));
			if ((!o)) {
				JB_SetRef(b, b->Parent);
				JB_Decr(o);
				continue;
			}
			if ((ParamsArray->IsDot) and ((SC_PA_IsModule(ParamsArray)) and (b == SC__Comp_program))) {
				JB_Decr(o);
				break;
			}
			if (JB_Object_FastIsa(o, &SCDeclData)) {
				if (SC_Func_HiderMatch(((SCDecl*)o)->HiderFunc, ParamsArray->IsAssigns) and (owning_cls != Curr)) {
					JB_SetRef(o, ((SCDecl*)((SCDecl*)o)->HiderFunc));
				}
				 else {
					if (((SCDecl*)o)->Type->FuncProto) {
						if ((!((ParamsArray->IsDot or (!ParamsHere)) and ((!SC_PA_SyntaxCast(ParamsArray)))))) {
							JB_Msg_SyntaxExpect(Exp, JB_LUB[1384]);
							JB_Decr(o);
							JB_Decr(b);
							JB_Decr(owning_cls);
							JB_Decr(f);
							JB_Decr(Missing);
							JB_Decr(Curr);
							JB_Decr(ParamsArray);
							return nil;
						}
						JB_Decr(b);
						JB_Decr(owning_cls);
						JB_Decr(f);
						JB_Decr(Missing);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(o);
						return ((SCDecl*)o);
					}
					if ((!side) and (ParamsArray->IsDot and ((bool)((SCDecl*)o)->Type->ProcessAs))) {
						if ((!Exp)) {
							debugger;
							JB_Decr(o);
							JB_Decr(b);
							JB_Decr(owning_cls);
							JB_Decr(f);
							JB_Decr(Missing);
							JB_Decr(Curr);
							JB_Decr(ParamsArray);
							return nil;
						}
						SCDecl* _tmPf6 = JB_Incr(SC_Decl_ProcessAs(((SCDecl*)o), Exp));
						JB_Decr(o);
						JB_Decr(b);
						JB_Decr(owning_cls);
						JB_Decr(f);
						JB_Decr(Missing);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(_tmPf6);
						return _tmPf6;
					}
				}
			}
			ParamsArray->AllowSelfToConstructor = AllowSelfToConstructor;
			if ((((bool)ParamsHere) and (ParamsHere->Func == JB_SyxPrm)) and (JB_Object_FastIsa(o, &SCModuleData))) {
				JB_SetRef(o, ((SCModule*)SC_Mod_GetTheNewer(((SCModule*)o))));
				ParamsArray->AllowSelfToConstructor = false;
			}
			if (CanFunction and (JB_Object_FastIsa(o, &SCFunctionData))) {
				JB_SetRef(f, o);
				JB_SetRef(o, SC_Func_ArgsMatch(f, contains, Arg_Space, ParamsArray, 0));
				if ((!((SCFunction*)o))) {
					0;
				}
				 else if ((bool)((SCFunction*)o)->IsMacro) {
					if (((SCFunction*)o)->IsMacro) {
						JB_SetRef(Missing, o);
					}
					JB_SetRef(o, nil);
				}
				 else {
					if (((SCFunction*)o)->IsDisabled) {
						if (true) {
							JB_Msg_SyntaxExpect(Exp, ((SCFunction*)o)->Description);
						}
						if (true) {
							JB_Msg_SyntaxExpect(((SCFunction*)o)->Source, JB_LUB[825]);
						}
					}
					if (ParamsHere) {
						JB_SetRef(ParamsHere->Obj, o);
						if ((!ParamsArray->AllowSelfToConstructor) and SC_Func_SyntaxIs(((SCFunction*)o), kSC__FunctionType_Constructor)) {
							SC_Msg_ConstructorAddNil(ParamsHere, ParamsArray->IsDot and (!(JB_Object_Isa(self, &SCModuleData))));
						}
					}
					JB_Decr(b);
					JB_Decr(owning_cls);
					JB_Decr(f);
					JB_Decr(Missing);
					JB_Decr(Curr);
					JB_Decr(ParamsArray);
					JB_SafeDecr(o);
					return ((SCFunction*)o);
				}
			}
			if (o) {
				ParamsArray->Found = true;
				if ((!SC_PA_SyntaxCast(ParamsArray))) {
					if ((Purpose == kSC__Base_kPurposeDot) and ((!ParamsArray->IsAddress) and (JB_Object_FastIsa(o, &SCDeclData)))) {
						JB_Decr(b);
						JB_Decr(owning_cls);
						JB_Decr(f);
						JB_Decr(Missing);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(o);
						return ((SCDecl*)o);
					}
					if ((!JB_Object_Isa(o, &SCFunctionData))) {
						JB_Decr(b);
						JB_Decr(owning_cls);
						JB_Decr(f);
						JB_Decr(Missing);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(o);
						return o;
					}
					if ((!JB_Msg_OperatorIn(Exp, JB_SyxDot))) {
						JB_String* err = JB_Incr(JB_LUB[892]);
						if (((bool)side) and (!SC_PA_MacroSize(ParamsArray))) {
							JB_SetRef(err, JB_LUB[1094]);
						}
						if ((!((SCFunction*)o)->ProtoDecl)) {
							JB_Msg_SyntaxExpect(Exp, err);
						}
						JB_Decr(err);
						SCDecl* _tmPf7 = JB_Incr(((SCFunction*)o)->ProtoDecl);
						JB_Decr(o);
						JB_Decr(b);
						JB_Decr(owning_cls);
						JB_Decr(f);
						JB_Decr(Missing);
						JB_Decr(Curr);
						JB_Decr(ParamsArray);
						JB_SafeDecr(_tmPf7);
						return _tmPf7;
					}
				}
			}
			JB_Decr(o);
			JB_SetRef(b, b->Parent);
		};
		JB_Decr(b);
	}
	;
	JB_Decr(Curr);
	JB_Decr(owning_cls);
	if (Missing) {
		JB_Decr(f);
		SCDecl* _tmPf8 = JB_Incr(SC_Func_MacroFix(Missing, contains, Arg_Space, ParamsArray));
		JB_Decr(Missing);
		JB_Decr(ParamsArray);
		JB_SafeDecr(_tmPf8);
		return _tmPf8;
	}
	JB_Decr(Missing);
	if ((!Exp)) {
		JB_Decr(f);
		JB_Decr(ParamsArray);
		return nil;
	}
	if (f) {
		if (f->IsDisabled) {
			if (true) {
				JB_Msg_SyntaxExpect(Exp, f->Description);
			}
		}
		 else if ((!SC_PA_MadeError(ParamsArray))) {
			JB_FreeIfDead(SC_Func_ArgsMatch(f, contains, Arg_Space, ParamsArray, kJB_kTypeCastDescribeErrors));
		}
		if (ParamsHere) {
			JB_SetRef(ParamsHere->Obj, f);
		}
		JB_Decr(ParamsArray);
		JB_SafeDecr(f);
		return f;
	}
	JB_Decr(f);
	JB_String* ErrMsg = JB_Incr(JB_LUB[0]);
	if (ParamsArray->Found) {
		JB_SetRef(ErrMsg, JB_LUB[1342]);
	}
	 else if ((!ParamsHere)) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[736]);
		JB_FS_AppendString(_fsf0, OrigName);
		JB_FS_AppendString(_fsf0, JB_LUB[2112]);
		JB_SetRef(ErrMsg, JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
	}
	 else if (ParamsArray->IsDot) {
		FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf1, JB_LUB[741]);
		JB_FS_AppendString(_fsf1, OrigName);
		JB_FS_AppendString(_fsf1, JB_LUB[2111]);
		JB_String* _tmPf4 = JB_Incr(SC_PA_RenderKind(ParamsArray));
		JB_FS_AppendString(_fsf1, _tmPf4);
		JB_Decr(_tmPf4);
		JB_FS_AppendString(_fsf1, JB_LUB[212]);
		JB_String* _tmPf5 = JB_Incr(SC_PA_ModuleName(ParamsArray));
		JB_FS_AppendString(_fsf1, _tmPf5);
		JB_Decr(_tmPf5);
		JB_FS_AppendString(_fsf1, JB_LUB[2112]);
		JB_SetRef(ErrMsg, JB_FS_GetResult(_fsf1));
		JB_Decr(_fsf1);
		if (JB_Object_FastIsa(self, &SCModuleData)) {
			SCClass* cls = JB_Incr(((SCModule*)self)->Cls);
			if (cls) {
				SCObject* found = JB_Incr(SC_Base_UpCheck(cls, OrigName, true));
				if (found) {
					JB_SetRef(ErrMsg, JB_Str_OperatorPlus(ErrMsg, JB_LUB[125]));
				}
				JB_Decr(found);
			}
			JB_Decr(cls);
		}
	}
	 else {
		FastString* _fsf2 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf2, JB_LUB[732]);
		JB_FS_AppendString(_fsf2, OrigName);
		JB_FS_AppendString(_fsf2, JB_LUB[2112]);
		JB_SetRef(ErrMsg, JB_FS_GetResult(_fsf2));
		JB_Decr(_fsf2);
	}
	JB_Decr(ParamsArray);
	if (true) {
		JB_Msg_SyntaxExpect(Exp, ErrMsg);
	}
	JB_Decr(ErrMsg);
	return nil;
}

SCObject* SC_Base_LookUpVar(SCNode* self, JB_String* name, Message* exp, Message* side) {
	SCObject* rz = nil;
	if (JB_Str_Equals(name, JB_LUB[1975], true)) {
		name = JB_LUB[1934];
	}
	rz = SC_Base_LookUpSub(self, name, exp, nil, self, nil, side, kSC__Base_kPurposeVar);
	if (JB_Object_FastIsa(rz, &SCDeclData)) {
		(SC_Decl_SyntaxIsSet(((SCDecl*)rz), kSC__SCDeclInfo_UsedByCode, true));
	}
	return rz;
}

SCDecl* SC_Base_LookUpVarDecl(SCNode* self, JB_String* name) {
	SCObject* result = JB_Incr(SC_Base_LookUpSub(self, name, nil, nil, self, nil, nil, kSC__Base_kPurposeVarDecl));
	if (JB_Object_FastIsa(result, &SCDeclData)) {
		JB_SafeDecr(result);
		return ((SCDecl*)result);
	}
	JB_Decr(result);
	return nil;
}

SCObject* SC_Base_LookUpVarRootDecl(SCNode* self, JB_String* name, Message* exp) {
	return SC_Base_LookUpSub(self, name, exp, nil, self, nil, nil, kSC__Base_kPurposeVarDecl);
}

bool SC_Base_NeedsExport(SCNode* self) {
	return ((bool)(self->MyReacher));
}

SCFunction* SC_Base_OwningFunc(SCNode* self) {
	if (JB_Object_FastIsa(self, &SCFunctionData)) {
		return ((SCFunction*)self);
	}
	if (JB_Object_FastIsa(self, &SCArgData)) {
		return ((SCArg*)self)->ParentFunc;
	}
	return nil;
}

SCNode* SC_Base_ProcessLinkage(SCNode* self, Message* node, Dictionary* Table) {
	SCFunction* fn = SC_Base_OwningFunc(self);
	{
		Message* ch = ((Message*)JB_Ring_First(node));
		while (ch) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(ch));
			if ((!JB_Msg_Expect(ch, JB_SyxTmp, nil))) {
				return nil;
			}
			DTWrap* linker = ((DTWrap*)JB_Dict_ValueStr(Table, ch->Name));
			if ((!linker)) {
				JB_Msg_SyntaxExpect(ch, nil);
				return nil;
			}
			(((FP_TranFunc)JB_Wrap_First(linker)))(fn, ch, self);
			ch = _Nf1;
		};
		;
	}
	;
	return SC__Comp_program;
}

SCNode* SC_Base_ProjectFix(SCNode* self) {
	if (self == SC__Comp_program) {
		SCImport* c = SC__Imp_Curr;
		if (c) {
			return c->Mod;
		}
	}
	return self;
}

JB_String* SC_Base_ReachedName(SCNode* self) {
	JB_String* rz = JB_LUB[0];
	SCNode* c = self->MyReacher;
	rz = JB_Str_OperatorPlus(JB_LUB[111], self->Name);
	if (JB_ObjClass(c) == &SCNodeData) {
		rz = JB_Str_OperatorPlus(rz, JB_LUB[130]);
	}
	return rz;
}

bool SC_Base_RehomeExport(SCNode* self) {
	if (SC_Base_IsSTDLib(self)) {
		SC_SCObject_Fail(self, JB_LUB[714]);
	}
	JB_String* newhome = JB_Incr(SC_Base_UniquifyExport(self, self->ExportName));
	if ((!JB_Str_Exists(newhome))) {
		JB_Decr(newhome);
		return nil;
	}
	(JB_Dict_ValueSet(SC__Comp_ExportNames, self->ExportName, nil));
	(JB_Dict_ValueSet(SC__Comp_ExportNames, newhome, self));
	JB_SetRef(self->ExportName, newhome);
	JB_Decr(newhome);
	return true;
}

SCDecl* SC_Base_RequireContained(SCNode* self, Message* exp) {
	SCClass* cls = nil;
	if (JB_Object_FastIsa(self, &SCFunctionData)) {
		JB_SetRef(cls, ((SCFunction*)self)->Cls);
		if ((!cls)) {
			SCModule* p = JB_Incr(((SCModule*)JB_Object_FastAs(((SCFunction*)self)->Parent, &SCModuleData)));
			if (p) {
				JB_SetRef(cls, p->Cls);
			}
			JB_Decr(p);
		}
	}
	 else if (JB_Object_FastIsa(self, &SCClassData)) {
		JB_SetRef(cls, self);
	}
	 else if (JB_Object_FastIsa(self, &SCModuleData)) {
		JB_SetRef(cls, ((SCModule*)self)->Cls);
	}
	 else if (JB_Object_FastIsa(self, &SCArgData)) {
		SCFunction* f = JB_Incr(((SCArg*)self)->ParentFunc);
		if (f) {
			JB_SetRef(cls, f->Cls);
		}
		JB_Decr(f);
	}
	if ((!(((bool)cls) and ((bool)cls->Contained)))) {
		JB_Msg_SyntaxExpect(exp, JB_LUB[753]);
		JB_Decr(cls);
		return nil;
	}
	SCDecl* _tmPf0 = JB_Incr(cls->Contained);
	JB_Decr(cls);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* SC_Base_Route(SCNode* self, JB_String* name) {
	Message* rz = nil;
	rz = JB_Syx_Msg(JB_SyxDot, name);
	Message* curr = rz;
	while (self) {
		SCModule* next = ((SCModule*)self->Parent);
		if ((!next) or ((next == SC__Comp_program) or next->IsImport)) {
			JB_Msg_AppendSyx(curr, JB_SyxThg, self->Name);
			break;
		}
		curr = JB_Msg_Msg(curr, JB_SyxDot, self->Name);
		self = next;
	};
	return rz;
}

void SC_Base_SetExportName(SCNode* self, JB_String* s, bool Explicit) {
	JB_Incr(s);
	if (JB_Object_FastIsa(self, &SCFunctionData)) {
		if (((SCFunction*)self)->IsMacro) {
			JB_Decr(s);
			return;
		}
	}
	JB_SetRef(s, SC_Str_UnicodeSafeName(s, nil));
	if ((!((JB_Object_Isa(self, &SCModuleData)) or (JB_Object_Isa(self, &SCClassData))))) {
		JB_SetRef(s, SC_Base_TestExportName(self, s, Explicit));
		if ((!JB_Str_Exists(s))) {
			JB_Decr(s);
			return;
		}
		(JB_Dict_ValueSet(SC__Comp_ExportNames, s, self));
	}
	((SC_SCObject_SyntaxIsSet(self, kSC__SCNodeInfo_ExplicitExport, Explicit)));
	JB_SetRef(self->ExportName, s);
	JB_Decr(s);
}

SCClass* SC_Base_ShouldBeClass(SCNode* self, Message* errplace) {
	SCClass* _tmPf0 = JB_Incr(SC_Base_IsNormalObject(self));
	if ((!_tmPf0)) {
		JB_Msg_SyntaxExpect(errplace, JB_LUB[691]);
		JB_Decr(_tmPf0);
		return nil;
	}
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

Message* SC_Base_SourceArg(SCNode* self) {
	Message* p = self->Source;
	if (p) {
		if (JB_Msg_EqualsSyx(p, JB_SyxArg, false)) {
			return p;
		}
		return JB_Msg_FindSyx(p, JB_SyxArg);
	}
	return nil;
}

SCModule* SC_Base_SpaceModule(SCNode* self, Message* errplace) {
	if (JB_Object_FastIsa(self, &SCModuleData)) {
		return ((SCModule*)self);
	}
	if (JB_Object_FastIsa(self, &SCClassData)) {
		return ((SCClass*)self)->Modul;
	}
	if (true) {
		JB_Msg_SyntaxExpect(errplace, JB_LUB[1301]);
	}
	return nil;
}

JB_String* SC_Base_SubProjName(SCNode* self) {
	return SC__Comp_program->ExportName;
}

SCObject* SC_Base_SyntaxAccess(SCNode* self, JB_String* s) {
	Dictionary* a = self->Access;
	if (a) {
		return ((SCObject*)JB_Dict_ValueLower(a, s));
	}
	return nil;
}

JB_String* SC_Base_TestExportName(SCNode* self, JB_String* s, bool Explicit) {
	SCNode* o = JB_Incr(((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, s)));
	if ((!o)) {
		JB_Decr(o);
		return s;
	}
	if ((!Explicit)) {
		if ((!SC_SCObject_SyntaxIs(o, kSC__SCNodeInfo_ExplicitExport))) {
			SC_Base_RehomeExport(o);
		}
		JB_String* it = JB_Incr(SC_Base_UniquifyExport(self, s));
		if (JB_Str_Exists(it)) {
			JB_Decr(o);
			JB_SafeDecr(it);
			return it;
		}
		JB_Decr(it);
	}
	 else if (!(SC_SCObject_SyntaxIs(o, kSC__SCNodeInfo_ExplicitExport))) {
		if (SC_Base_RehomeExport(o)) {
			JB_Decr(o);
			return s;
		}
	}
	JB_String* Err = JB_Incr(JB_Str_OperatorPlus(JB_LUB[862], s));
	if (true) {
		JB_Msg_SyntaxExpect(o->Source, Err);
	}
	JB_Decr(o);
	if (true) {
		JB_Msg_SyntaxExpect(self->Source, Err);
	}
	JB_Decr(Err);
	return JB_LUB[0];
}

void SC_Base_Tran_Const(SCNode* self, SCDecl* D, SCNode* base) {
	Message* root = JB_Incr(D->Default);
	MessagePosition Using = JB_Msg_SyntaxUsing(root);
	{
		Message* curr = JB_Incr(root);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(root)));
		while (((bool)(curr)) and (curr != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(curr)));
			if (JB_Msg_EqualsSyx(curr, JB_SyxThg, false)) {
				if ((!JB_FreeIfDead(SC_TypeOfExpr(curr, base, nil)))) {
					JB_Decr(_N_f2);
					JB_Decr(_afterf1);
					JB_Decr(curr);
					JB_MsgPos_Destructor((&Using));
					JB_Decr(root);
					return;
				}
				SCObject* actual = JB_Incr(SC_Base_SyntaxAccess(base, curr->Name));
				if (JB_Object_FastIsa(actual, &SCDeclData)) {
					Message* BetterVersion = JB_Incr(JB_Msg_Copy(((SCDecl*)actual)->Default, curr));
					JB_FreeIfDead(SC_Msg_ReplaceWith(curr, BetterVersion));
					JB_Decr(BetterVersion);
				}
				 else {
					if ((!((curr->Obj == JB_TypeString->TypeNormal) or (((JB_Msg_SyntaxEquals(curr, JB_LUB[2005], true))) or ((JB_Msg_SyntaxEquals(curr, JB_LUB[1649], true))))))) {
						JB_Msg_SyntaxExpect(curr, JB_LUB[1304]);
						JB_Decr(actual);
						JB_Decr(_N_f2);
						JB_Decr(_afterf1);
						JB_Decr(curr);
						JB_MsgPos_Destructor((&Using));
						JB_Decr(root);
						return;
					}
				}
				JB_Decr(actual);
			}
			 else if (JB_Msg_EqualsSyx(curr, JB_SyxUnit, false)) {
				if ((!JB_FreeIfDead(SC_TypeOfExpr(curr, base, nil)))) {
					JB_Decr(_N_f2);
					JB_Decr(_afterf1);
					JB_Decr(curr);
					JB_MsgPos_Destructor((&Using));
					JB_Decr(root);
					return;
				}
			}
			 else if (((JB_Msg_EqualsSyx(curr, JB_SyxStr, false))) or (((JB_Msg_EqualsSyx(curr, JB_SyxNum, false))) and (!({
				Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_Parent(curr)));
				bool _tmPf3 = JB_Msg_EqualsSyx(_tmPf4, JB_SyxUnit, false);
				JB_Decr(_tmPf4);
				 _tmPf3;
			})))) {
				if ((!JB_FreeIfDead(SC_TypeOfExpr(curr, base, nil)))) {
					JB_Decr(_N_f2);
					JB_Decr(_afterf1);
					JB_Decr(curr);
					JB_MsgPos_Destructor((&Using));
					JB_Decr(root);
					return;
				}
			}
			JB_SetRef(curr, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(curr);
		JB_Decr(_afterf1);
		;
	}
	;
	JB_Decr(root);
	JB_MsgPos_Destructor((&Using));
}

void SC_Base_TryAdd(SCNode* self, Message* ErrPlace, SCObject* IncObj, JB_String* name) {
	if ((!IncObj)) {
		return;
	}
	if ((!JB_int_OperatorInRange(JB_Str_Length(name), 64))) {
		JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1046]);
		return;
	}
	if (JB_Object_FastIsa(self, &SCClassData)) {
		JB_Class* scls = JB_ObjClass(IncObj);
		if ((scls == &SCClassData) or (scls == &SCModuleData)) {
			self = ((SCClass*)((SCClass*)self)->Modul);
		}
	}
	if ((!(self->Access))) {
		JB_SetRef(self->Access, JB_Dict_Constructor(nil));
	}
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(name));
	SC_Base_TryAddSub(self, ErrPlace, IncObj, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_Base_TryAddBase(SCNode* self, Message* c, SCNode* neu) {
	SC_Base_TryAdd(self, c, neu, neu->Name);
}

void SC_Base_TryAddSub(SCNode* self, Message* ErrPlace, SCObject* IncObj, JB_String* name) {
	SCObject* Old = SC_Base_UpCheck(self, name, (!(JB_Object_Isa(IncObj, &SCFunctionData))));
	if ((!Old)) {
		(JB_Dict_ValueSet(self->Access, name, IncObj));
		return;
	}
	if (Old == IncObj) {
		return;
	}
	if (JB_Object_FastIsa(Old, &SCFunctionData)) {
		if (JB_Object_FastIsa(IncObj, &SCFunctionData)) {
			if ((((SCFunction*)Old)->Cls == ((SCFunction*)IncObj)->Cls) or SC_Func_IsConstructorOnModule(((SCFunction*)IncObj), ((SCFunction*)Old))) {
				JB_SetRef(SC_Func_Last(((SCFunction*)Old))->NextFunc, IncObj);
				return;
			}
		}
		 else if (JB_Object_FastIsa(IncObj, &SCDeclData)) {
			if (((SCFunction*)Old)->HidesProperties) {
				if ((((SCDecl*)IncObj)->HiderFunc)) {
					JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1038]);
					return;
				}
				((SCDecl*)IncObj)->HiderFunc = ((SCFunction*)Old);
				(JB_Dict_ValueSet(self->Access, name, ((SCDecl*)IncObj)));
				return;
			}
		}
	}
	if (JB_Str_Equals(name, JB_LUB[1934], false)) {
		if (true) {
			JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[721]);
		}
	}
	 else {
		if (true) {
			JB_Msg_SyntaxExpect(ErrPlace, JB_kNameConf);
		}
		if (JB_Object_Isa(Old, &SCObjectData)) {
			if (true) {
				JB_Msg_SyntaxExpect(SC_SCObject_AnySource(((SCObject*)Old)), JB_kNameConf);
			}
		}
		 else {
			if (true) {
				JB_Object_Fail(JB_ObjRender(Old, nil), JB_kNameConf);
			}
		}
	}
}

JB_String* SC_Base_UniquifyExport(SCNode* self, JB_String* s) {
	if (JB_Object_FastIsa(self, &SCFunctionData)) {
		JB_String* s2 = JB_Incr(SC_Func_ParamUniquer(((SCFunction*)self), s));
		if ((!JB_FreeIfDead(((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, s2))))) {
			JB_SafeDecr(s2);
			return s2;
		}
		JB_Decr(s2);
	}
	int u = SC__SC_UniqueNum++;
	JB_String* _tmPf0 = JB_Incr(JB_int_RenderFS(u, nil));
	JB_String* s3 = JB_Incr(JB_Str_OperatorPlus(s, _tmPf0));
	JB_Decr(_tmPf0);
	if ((!JB_FreeIfDead(((SCNode*)JB_Dict_ValueStr(SC__Comp_ExportNames, s3))))) {
		JB_SafeDecr(s3);
		return s3;
	}
	JB_Decr(s3);
	return JB_LUB[0];
}

SCObject* SC_Base_UpCheck(SCNode* self, JB_String* name, bool LookUp) {
	if (LookUp and (JB_Object_FastIsa(self, &SCClassData))) {
		{
			SCClass* c = ((SCClass*)self);
			while (c) {
				SCObject* it = SC_Base_SyntaxAccess(c, name);
				if (it) {
					return it;
				}
				c = c->Super;
			};
		};
	}
	if ((!JB_Object_Isa(self, &SCArgData))) {
		return SC_Base_SyntaxAccess(self, name);
	}
	SCNode* curr = self;
	while (JB_Object_FastIsa(curr, &SCArgData)) {
		SCObject* found = SC_Base_SyntaxAccess(((SCArg*)curr), name);
		if (found) {
			return found;
		}
		if ((!LookUp)) {
			return nil;
		}
		curr = ((SCArg*)((SCArg*)curr)->Parent);
	};
	return nil;
}

SCNode* SC_Base_UpClass(SCNode* self, Message* f) {
	SCNode* rz = nil;
	rz = self->Parent;
	if ((JB_Msg_EqualsSyx(f, JB_SyxDot, false)) and JB_Object_FastIsa(rz, &SCModuleData)) {
		if (((SCModule*)rz)->IsImport) {
			return nil;
		}
	}
	return rz;
}

void SC_Base_Use(SCNode* self) {
	Message* s = JB_Incr(self->Source);
	if (s) {
		JB_MemoryLayer* _tmPf0 = JB_Incr(JB_ObjLayer(s));
		JB_Mem_Use(_tmPf0);
		JB_Decr(_tmPf0);
	}
	JB_Decr(s);
	SC_Imp_Use(self->Project);
}

int SC_Base__Init_() {
	{
		SC__Base_CurrVisibility = false;
		SC__Base_ConstantsLoadingOverride = false;
	}
	;
	return 0;
}

int SC_Base__InitCode_() {
	return 0;
}

SCNode* SC_Base__LoadCppPart(Message* node, SCNode* name_space, Message* ErrPlace) {
	if ((!((JB_Object_Isa(name_space, &SCClassData)) or (JB_Object_Isa(name_space, &SCModuleData))))) {
		return nil;
	}
	if (name_space == SC__Comp_program) {
		SCFile* file = JB_Incr(SC_Msg_SCFile(node));
		if (JB_File_SyntaxCast(file)) {
			Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
			if ((!_tmPf0)) {
				JB_Decr(_tmPf0);
				JB_Decr(file);
				return nil;
			}
			JB_SetRef(file->ExportName, _tmPf0->Name);
			JB_Decr(_tmPf0);
		}
		JB_Decr(file);
		JB_Tree_Remove(node);
	}
	return SC__Comp_program;
}


void JB_sci_Clear(SaverClassInfo* self) {
	if ((!JB_Array_SyntaxCast(self))) {
		return;
	}
	{
		int _if0 = 0;
		while (true) {
			Saveable* Obj = ((Saveable*)JB_Array_Value(self, _if0));
			if (Obj == nil) {
				break;
			}
			JB_Sav_SaveUnMark(Obj);
			_if0++;
		};
	}
	;
	JB_Array_Clear(self);
}

SaverClassInfo* JB_sci_Constructor(SaverClassInfo* self, JB_Class* Cls, char* Data) {
	if (self == nil) {
		self = ((SaverClassInfo*)JB_NewClass(&SaverClassInfoData));
	}
	JB_Array_Constructor0(self);
	self->NextInfo = nil;
	self->Cls = Cls;
	self->Data = Data;
	return self;
}

void JB_sci_Destructor(SaverClassInfo* self) {
	JB_Clear(self->NextInfo);
	JB_Array_Destructor(self);
}

bool JB_sci_HasData(SaverClassInfo* self) {
	return ((bool)self->Data[0]);
}

void JB_sci_Output(SaverClassInfo* self, ObjectSaver* Saver) {
	FastString* D = Saver->Dest;
	if ((!(((bool)D) and JB_Array_SyntaxCast(self)))) {
		return;
	}
	JB_FS_AppendByte(D, '\n');
	JB_FS_AppendString(D, JB_Str_LowerCase(JB_Str__Wrap(self->Cls->Name)));
	JB_FS_AppendByte(D, ' ');
	if (JB_sci_HasData(self)) {
		JB_FS_AppendByte(D, '(');
		JB_FS_AppendCString(D, ((_cstring)self->Data));
		JB_FS_AppendByte(D, ')');
		JB_FS_AppendByte(D, ' ');
	}
	JB_FS_AppendString(D, JB_LUB[264]);
	{
		int _if0 = 0;
		while (true) {
			Saveable* Obj = ((Saveable*)JB_Array_Value(self, _if0));
			if (Obj == nil) {
				break;
			}
			JB_FS_AppendByte(D, '\t');
			JB_FS_AppendObjectID(D, Obj);
			JB_FS_AppendByte(D, ':');
			JB_FS_AppendByte(D, '(');
			JB_Sav___SaveWrite__(Obj, Saver);
			JB_FS_RemoveByte(D, ',');
			JB_FS_AppendByte(D, ')');
			JB_FS_AppendByte(D, '\n');
			_if0++;
		};
	}
	;
	JB_FS_AppendByte(D, ')');
	JB_FS_AppendByte(D, '\n');
}



bool JB_Proc_Alive(SpdProcess* self) {
	if (self != nil) {
		return ((bool)JB_Ternary(self->WeAreParent, JB_Proc_ChildAlive(self), ((bool)JB_Proc_ParentAlive(self))));
	}
	return false;
}

bool JB_Proc_ChildAlive(SpdProcess* self) {
	if (self->SubProcess) {
		return JB_Proc_CommsOpen(self);
	}
	if (JB_PID_IsRunning(self)) {
		return true;
	}
	return false;
}

bool JB_Proc_CommsOpen(SpdProcess* self) {
	return ((bool)self) and (PicoError(self->Pico) == 0);
}

SpdProcess* JB_Proc_Constructor(SpdProcess* self, JB_String* path, FP_SpdMainFn fn, PicoComms* pico, Array* params, ProcessMode Mode) {
	if (self == nil) {
		self = ((SpdProcess*)JB_NewClass(&SpdProcessData));
	}
	JB_Sh_Constructor(self, path);
	self->DiedCount = 0;
	self->AlreadyWarnedDied = false;
	self->DeathLimit = 12;
	JB_StringC* _tmPf3 = JB_Str_CastZero(path);
	self->_DebugName = JB_Incr(_tmPf3);
	self->WeAreParent = ((!JB_Str_Equals(path, JB_LUB[0], false)) or (fn != nil));
	self->Params = JB_Incr(params);
	self->SubProcess = fn;
	self->Mode = Mode;
	FastString* _tmPf2 = ((FastString*)JB_Ternary(JB_ProcessMode_SyntaxIs(self->Mode, kJB__ProcessMode_CaptureStdOut), JB_FS_Constructor(nil), nil));
	self->Output = JB_Incr(_tmPf2);
	FastString* _tmPf1 = ((FastString*)JB_Ternary(JB_ProcessMode_SyntaxIs(self->Mode, kJB__ProcessMode_CaptureOrPrintErrors), JB_FS_Constructor(nil), nil));
	self->ErrorOutput = JB_Incr(_tmPf1);
	FastString* _tmPf0 = JB_FS_Constructor(nil);
	self->Writer = JB_Incr(_tmPf0);
	self->Pico = pico;
	return self;
}

void JB_Proc_Destructor(SpdProcess* self) {
	PicoDestroy((&self->Pico), JB_Str_SyntaxCast(JB_LUB[1601]));
	JB_Clear(self->Writer);
	JB_Clear(self->_DebugName);
	JB_Sh_Destructor(self);
}

void JB_Proc_Disconnect(SpdProcess* self, JB_StringC* Why) {
	JB_Sh_UpdatePipes(self);
	JB_PID_UnRegister(self);
	JB_Sh_ClosePipes(self);
	if (JB_Proc_Alive(self) and ((!JB_Str_Exists(Why)) and JB_Proc_CommsOpen(self))) {
		Why = JB_LUB[1350];
		debugger;
	}
	PicoClose(self->Pico, JB_Str_SyntaxCast(Why));
}

Message* JB_Proc_Get(SpdProcess* self, float T) {
	Message* rz = nil;
	if (self) {
		JB_Sh_UpdatePipes(self);
		JB_String* str = JB_Pico_Get(self->Pico, T);
		if (JB_Str_Exists(str)) {
			rz = JB_Str_Parse(str, JB_SyxArg, true);
		}
	}
	return rz;
}

bool JB_Proc_IsOpen(SpdProcess* self) {
	if ((!JB_Proc_CommsOpen(self))) {
		return nil;
	}
	if (self->WeAreParent) {
		return ((bool)self->SubProcess) or JB_PID_IsRunning(self);
	}
	return JB_App__ParentID() > 1;
}

bool JB_Proc_ParentAlive(SpdProcess* self) {
	if (JB_App__ParentID() > 1) {
		return true;
	}
	return false;
}

bool JB_Proc_Send(SpdProcess* self, Message* msg) {
	PicoComms* p = self->Pico;
	if (JB_ErrorInt_SyntaxCast(PicoError(p))) {
		JB_FreeIfDead(JB_Msg_RenderJbin(msg, JB_LUB[0], self->Writer));
		JB_Pico_SendFS(p, self->Writer, false);
		JB_Sh_UpdatePipes(self);
	}
	return false;
}

int JB_Proc__InitCode_() {
	{
	}
	;
	JB_Proc__InitOwner();
	return 0;
}

void JB_Proc__InitOwner() {
	PicoComms* p = JB_Pico__Parent();
	if (p) {
		JB_SetRef(JB__Proc_Parent, JB_Proc_Constructor(nil, JB_LUB[0], nil, p, nil, kJB__ProcessMode_AutoPrintErrors));
	}
}


JB_Task* JB_Task_Constructor(JB_Task* self, uint Obj, void* func) {
	if (self == nil) {
		self = ((JB_Task*)JB_NewClass(&JB_TaskData));
	}
	JB_Ring_Constructor0(self);
	self->State = 0;
	self->_Object = Obj;
	self->_func = func;
	return self;
}

void JB_Task_Destructor(JB_Task* self) {
	//visible;
	JB_Object** curr = ((JB_Object**)self);
	uint o = self->_Object;
	while (o) {
		uint i = JB_uint_LowestBit(o);
		o = (o & (~i));
		i = JB_Int_Log2(((int)i));
		JB_Decr(curr[i]);
	};
	JB_Ring_Destructor(self);
}

LessThan3* SC_Task_LessThan3_Constructor(LessThan3* self, JB_String* a, int b, JB_String* c) {
	if (self == nil) {
		self = ((LessThan3*)JB_Task_Constructor(nil, 640, ((void*)(&SC_Task_LessThan3_run))));
	}
	self->a = JB_Incr(a);
	self->b = b;
	self->c = JB_Incr(c);
	//task;
	return self;
}


JB_Error* JB_Err_Constructor(JB_Error* self, Message* node, JB_String* desc, ErrorSeverity level, JB_String* path) {
	if (self == nil) {
		self = ((JB_Error*)JB_NewClass(&JB_ErrorData));
	}
	//visible;
	JB_Msg_ConstructorEmpty(self);
	JB_StringC* _tmPf1 = JB_LUB[0];
	self->OriginalData = JB_Incr(_tmPf1);
	JB_StringC* _tmPf0 = JB_LUB[0];
	self->StackTrace = JB_Incr(_tmPf0);
	self->ErrorFlags = 0;
	self->Position = -1;
	self->Node = JB_Incr(node);
	self->Severity = level;
	self->Progress = JB__Rec_Progress;
	self->Name = JB_Incr(desc);
	self->Path = JB_Incr(path);
	self->When = JB_Date__New0();
	self->Func = JB_SyxSStr;
	JB_Err_UpgradeWithNode(self);
	return self;
}

JB_Error* JB_Err_ConstructorNothing(JB_Error* self) {
	if (self == nil) {
		self = ((JB_Error*)JB_NewClass(&JB_ErrorData));
	}
	JB_Msg_ConstructorEmpty(self);
	JB_StringC* _tmPf2 = JB_LUB[0];
	self->Path = JB_Incr(_tmPf2);
	JB_StringC* _tmPf1 = JB_LUB[0];
	self->OriginalData = JB_Incr(_tmPf1);
	JB_StringC* _tmPf0 = JB_LUB[0];
	self->StackTrace = JB_Incr(_tmPf0);
	self->Progress = 0.0f;
	self->Node = nil;
	self->ErrorFlags = 0;
	self->Position = -1;
	self->Severity = kJB__ErrorSeverity_OK;
	self->When = JB_Date__New0();
	self->Func = JB_SyxArg;
	return self;
}

void JB_Err_Destructor(JB_Error* self) {
	JB_Clear(self->Path);
	JB_Clear(self->OriginalData);
	JB_Clear(self->StackTrace);
	JB_Clear(self->Node);
	JB_Msg_Destructor(self);
}

void JB_Err_Fill(JB_Error* self, JB_String* path, JB_String* desc) {
	//visible;
	JB_SetRef(self->Path, path);
	((JB_Err_SyntaxIsSet(self, kJB__ErrorFlags_PreferNoRenderPath, JB_Str_ContainsString(desc, path))));
	JB_SetRef(self->Name, desc);
}

void JB_Err_GrabLine(JB_Error* self, FastString* fs, bool Usecolor) {
	if (Usecolor) {
		JB_FS_AppendString(fs, kJB__ErrorColors_normal);
	}
	JB_String* d = JB_Incr(self->OriginalData);
	if ((!(JB_Str_Exists(d) and JB_Err_HasPosition(self)))) {
		JB_Decr(d);
		return;
	}
	JB_FS_AppendByte(fs, '\n');
	Ind Start = JB_Str_Find(d, JB__Constants_CSLine, self->Position, 0) + 1;
	Ind Finish = JB_Str_Find(d, JB__Constants_CSLine, (self->Position), JB_int__Max());
	if (Finish == -1) {
		Finish = (JB_Str_Length(d) + 1);
	}
	JB_String* _tmPf1 = JB_Incr(JB_Str_Range(d, Start, Finish));
	JB_Decr(d);
	JB_String* _tmPf0 = JB_Incr(JB_Str_ReplaceAll(_tmPf1, JB_LUB[33], JB_LUB[100], false, nil));
	JB_Decr(_tmPf1);
	JB_FS_AppendString(fs, _tmPf0);
	JB_Decr(_tmPf0);
	Ind Spaces = (self->Position - Start);
	if (Spaces > 200) {
		Spaces = 0;
	}
	JB_FS_AppendByte(fs, '\n');
	if (Usecolor) {
		JB_FS_AppendString(fs, kJB__ErrorColors_underline);
	}
	JB_FS_AppendMultiByte(fs, ' ', Spaces);
	JB_FS_AppendByte(fs, '^');
}

bool JB_Err_HasPosition(JB_Error* self) {
	return self->Position >= 0;
}

void SC_Err_Improve(JB_Error* self) {
	Message* node = SC_FindBytePos(self->Node);
	if ((!node)) {
		return;
	}
	if ((!JB_Err_HasPosition(self))) {
		self->Position = node->Position;
	}
	if ((!JB_Str_Exists(self->Path))) {
		SCFile* SC = SC_Msg_SCFile(node);
		if ((!JB_File_SyntaxCast(SC))) {
			return;
		}
		if (SC != SC_Msg_SCFile(self->Node)) {
			JB_SetRef(self->Node, node);
		}
		if (JB_File_Exists(SC, false)) {
			JB_SetRef(self->Path, JB_File_Path(SC));
		}
	}
}

bool JB_Err_IsBad(JB_Error* self) {
	return (self->Severity >= kJB__ErrorSeverity_Problem);
}

bool JB_Err_IsError(JB_Error* self) {
	return (self->Severity >= kJB__ErrorSeverity_Error);
}

bool JB_Err_IsWarning(JB_Error* self) {
	return (self->Severity <= kJB__ErrorSeverity_Warning);
}

bool JB_Err_LineIdentifiers(JB_Error* self, FastString* fs, JB_String* path) {
	if ((!JB_Err_HasPosition(self))) {
		return nil;
	}
	JB_String* d = JB_Incr(self->OriginalData);
	if ((!JB_Str_Exists(d))) {
		JB_Decr(d);
		return nil;
	}
	if ((!JB_Str_Exists(path))) {
		JB_FS_AppendString(fs, JB_LUB[1757]);
	}
	JB_FS_AppendInt32(fs, JB_Err_LinePos(self, d));
	JB_FS_AppendByte(fs, ':');
	Ind Start = JB_Str_Find(d, JB__Constants_CSLine, self->Position, 0);
	JB_Decr(d);
	JB_FS_AppendInt32(fs, self->Position - Start);
	JB_FS_AppendByte(fs, ':');
	return true;
}

int JB_Err_LinePos(JB_Error* self, JB_String* data) {
	if (JB_Err_HasPosition(self)) {
		JB_String* _tmPf0 = JB_Incr(JB_Str_Range(data, 0, self->Position));
		int _tmPf1 = JB_Str_LineCount(_tmPf0);
		JB_Decr(_tmPf0);
		return _tmPf1;
	}
	return 0;
}

JB_String* JB_Err_Render(JB_Error* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendString(fs, JB_LUB[1633]);
	fs->Indent++;
	JB_FS_AppendInfo(fs, JB_LUB[0], self->Name);
	if (self->Position >= 0) {
		JB_FS_AppendInfoNum(fs, JB_LUB[1872], self->Position);
	}
	JB_FS_AppendInfo(fs, JB_LUB[1651], self->Path);
	JB_FS_AppendInfoNum(fs, JB_LUB[1941], self->Severity);
	if (self->Progress) {
		JB_FS_AppendInfoFloat(fs, JB_LUB[1883], self->Progress);
	}
	if (JB_Str_Exists(self->StackTrace)) {
		JB_FS_AppendInfo(fs, JB_LUB[1957], JB_LUB[0]);
		fs->Indent++;
		{
			JB_String* _LoopSrcf2 = JB_Incr(self->StackTrace);
			int _Prevf0 = 0;
			while (JB_Str_Exists(_LoopSrcf2)) {
				Ind _Curr_f1 = JB_Str_Find(_LoopSrcf2, JB__Constants_CSLine, _Prevf0, JB_int__Max());
				JB_String* fn = JB_Incr(JB_Str_Range(_LoopSrcf2, _Prevf0, _Curr_f1));
				JB_FS_AppendInfo(fs, JB_LUB[1660], fn);
				JB_Decr(fn);
				_Prevf0 = (_Curr_f1 + 1);
				if ((!JB_Ind_SyntaxCast(_Curr_f1))) {
					break;
				}
			};
			JB_Decr(_LoopSrcf2);
		}
		;
		fs->Indent--;
	}
	JB_FS_AppendByte(fs, '\n');
	fs->Indent--;
	JB_String* _tmPf4 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_String* SC_Err_Render_Unix(JB_Error* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	if (SC_Options__Color()) {
		JB_FS_AppendString(fs, kJB__ErrorColors_bold);
	}
	Message* node = JB_Incr(self->Node);
	JB_String* data = JB_Incr(SC_Err_SCOriginalData(self));
	if (JB_Str_Exists(data)) {
		JB_String* p = JB_Incr(SC_Err_SCOriginalPath(self));
		if ((!JB_Str_Exists(p))) {
			JB_SetRef(p, JB_LUB[277]);
		}
		JB_FS_AppendString(fs, p);
		JB_Decr(p);
		JB_FS_AppendByte(fs, ':');
		SC_Err_SCLineIdentifiers(self, fs, data);
	}
	 else if ((bool)node) {
		JB_FreeIfDead(JB_Msg_Render(node, fs));
		SCFunction* fn = JB_Incr(SC_Msg_MsgOwningFunc(node));
		if (fn) {
			JB_FS_AppendString(fs, JB_LUB[183]);
			JB_FreeIfDead(SC_Func_Render(fn, fs));
		}
		JB_Decr(fn);
	}
	JB_Decr(node);
	JB_Decr(data);
	JB_FS_AppendByte(fs, ' ');
	if (SC_Options__Color()) {
		if (JB_Err_IsWarning(self)) {
			JB_FS_AppendString(fs, kJB__ErrorColors_warn);
		}
		 else {
			JB_FS_AppendString(fs, kJB__ErrorColors_error);
		}
	}
	if (JB_ErrorSeverity_SyntaxIs(self->Severity, kJB__ErrorSeverity_Problem)) {
		JB_FS_AppendString(fs, JB_LUB[2045]);
	}
	 else {
		JB_FreeIfDead(JB_ErrorSeverity_Render(self->Severity, fs));
	}
	JB_FS_AppendString(fs, JB_LUB[560]);
	if (SC_Options__Color()) {
		JB_FS_AppendString(fs, kJB__ErrorColors_bold);
	}
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendByte(fs, '\n');
	SC_Err_SCGrabLine(self, fs, SC_Options__Color());
	JB_FS_AppendByte(fs, '\n');
	if (SC_Options__Color()) {
		JB_FS_AppendString(fs, kJB__ErrorColors_normal);
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* JB_Err_RenderClang(JB_Error* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	int M = JB_FS_Mark(fs);
	JB_String* p = JB_Incr(self->Path);
	if (((!JB_Err_SyntaxIs(self, kJB__ErrorFlags_PreferNoRenderPath))) and JB_Str_Exists(p)) {
		JB_FS_AppendString(fs, self->Path);
		JB_FS_AppendByte(fs, ':');
	}
	if ((!JB_Err_LineIdentifiers(self, fs, p)) and ((bool)self->Node)) {
		JB_FreeIfDead(JB_Msg_Render(self->Node, fs));
	}
	JB_Decr(p);
	if (JB_FS_Grew(fs, M)) {
		JB_FS_AppendByte(fs, ' ');
	}
	JB_FreeIfDead(JB_ErrorSeverity_Render(self->Severity, fs));
	JB_FS_AppendString(fs, JB_LUB[560]);
	JB_FS_AppendString(fs, self->Name);
	JB_Err_GrabLine(self, fs, false);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Err_SCGrabLine(JB_Error* self, FastString* fs, bool Usecolor) {
	if (Usecolor) {
		JB_FS_AppendString(fs, kJB__ErrorColors_normal);
	}
	JB_String* d = JB_Incr(SC_Err_SCOriginalData(self));
	if ((!JB_Str_Exists(d))) {
		JB_Decr(d);
		return;
	}
	if ((!JB_Err_HasPosition(self))) {
		JB_Decr(d);
		return;
	}
	Ind Start = JB_Str_Find(d, JB__Constants_CSLine, self->Position, 0) + 1;
	Ind Finish = JB_Str_Find(d, JB__Constants_CSLine, (self->Position), JB_int__Max());
	if (Finish == -1) {
		Finish = (JB_Str_Length(d) + 1);
	}
	JB_String* Line = JB_Incr(JB_Str_Range(d, Start, Finish));
	JB_Decr(d);
	JB_SetRef(Line, JB_Str_ReplaceAll(Line, JB_LUB[33], JB_LUB[100], false, nil));
	JB_FS_AppendString(fs, Line);
	JB_Decr(Line);
	Ind Spaces = (self->Position - Start);
	JB_FS_AppendByte(fs, '\n');
	if (Usecolor) {
		JB_FS_AppendString(fs, kJB__ErrorColors_underline);
	}
	JB_FS_AppendMultiByte(fs, ' ', JB_int_OperatorMin(Spaces, 100));
	JB_FS_AppendByte(fs, '^');
}

int SC_Err_SCLineCount(JB_Error* self) {
	JB_String* f = JB_Incr(SC_Err_SCOriginalData(self));
	if ((!JB_Str_Exists(f))) {
		JB_Decr(f);
		return 0;
	}
	int _tmPf0 = JB_Err_LinePos(self, f);
	JB_Decr(f);
	return _tmPf0;
}

void SC_Err_SCLineIdentifiers(JB_Error* self, FastString* fs, JB_String* Data) {
	if ((!JB_Err_HasPosition(self))) {
		SCFunction* fn = JB_Incr(SC_Msg_MsgOwningFunc(self->Node));
		if ((!fn)) {
			JB_Decr(fn);
			return;
		}
		JB_FS_AppendString(fs, fn->ExportName);
		JB_Decr(fn);
	}
	 else {
		int _tmPf0 = SC_Err_SCLineCount(self);
		if ((!_tmPf0)) {
			return;
		}
		JB_FS_AppendInt32(fs, (_tmPf0));
		JB_FS_AppendByte(fs, ':');
		Ind Start = JB_Str_Find(Data, JB__Constants_CSLine, self->Position, 0);
		JB_FS_AppendInt32(fs, self->Position - Start);
		JB_FS_AppendByte(fs, ':');
	}
}

JB_String* SC_Err_SCOriginalData(JB_Error* self) {
	JB_String* p = JB_Incr(SC_Err_SCOriginalPath(self));
	if (JB_Str_Exists(p)) {
		JB_File* f = JB_Incr(JB_Str_AsFile(p));
		if (JB_File_Exists(f, false) and (!JB_File_IsDir(f))) {
			JB_String* _tmPf0 = JB_Incr(JB_File_ReadAll(f, 134217728, true));
			JB_Decr(f);
			JB_Decr(p);
			JB_SafeDecr(_tmPf0);
			return _tmPf0;
		}
		JB_Decr(f);
	}
	JB_Decr(p);
	return self->OriginalData;
}

JB_String* SC_Err_SCOriginalPath(JB_Error* self) {
	JB_String* _tmP0 = JB_Incr(SC_Msg_FileLocation(self->Node));
	if ((!JB_Str_Exists(_tmP0))) {
		JB_SetRef(_tmP0, self->Path);
	}
	JB_SafeDecr(_tmP0);
	return _tmP0;
}

JB_String* SC_Err_SCRender(JB_Error* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	if ((!(JB_Str_Exists(self->Path)))) {
		JB_SetRef(self->Path, SC_Err_SCOriginalPath(self));
		if ((!JB_Str_Exists(self->Path))) {
			JB_SetRef(self->Path, JB_LUB[277]);
		}
	}
	if (SC__Options_PerryOutput) {
		JB_FreeIfDead(JB_Err_Render(self, fs));
	}
	 else {
		JB_FreeIfDead(SC_Err_Render_Unix(self, fs));
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void JB_Err_ShiftPosition(JB_Error* self, int i) {
	self->Position = (self->Position + i);
	Message* node = self->Node;
	if (node) {
		node->Position = (node->Position + i);
	}
}

bool JB_Err_SyntaxIs(JB_Error* self, ErrorFlags F) {
	return ((bool)self) and ((bool)(self->ErrorFlags & F));
}

void JB_Err_SyntaxIsSet(JB_Error* self, ErrorFlags F, bool Value) {
	if (Value) {
		self->ErrorFlags = (self->ErrorFlags | F);
	}
	 else {
		self->ErrorFlags = (self->ErrorFlags & (~F));
	}
}

void JB_Err_UpgradeWithNode(JB_Error* self) {
	Message* node = self->Node;
	if ((!node)) {
		node = ((Message*)JB_Array_Last(JB__Err_CurrSource));
		if ((!node)) {
			return;
		}
		JB_SetRef(self->Node, node);
	}
	self->Position = node->Position;
	if ((!JB_Str_Exists(self->Path))) {
		JB_SetRef(self->Path, JB_Msg_FilePath(node));
	}
	JB_SetRef(self->OriginalData, JB_Msg_OriginalParseData(node));
}

void JB_Err__CantParseNum(Message* Where, JB_String* num, int Pos) {
	//visible;
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[747]);
	JB_String* _tmPf1 = JB_Incr(JB_Str_Preview(num, 100));
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendString(_fsf0, JB_LUB[253]);
	JB_FS_AppendByte(_fsf0, JB_Str_ByteValue(num, Pos));
	JB_FS_AppendString(_fsf0, JB_LUB[257]);
	JB_String* str = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_Error* _tmPf2 = JB_Incr(JB_Err_Constructor(nil, Where, str, kJB__ErrorSeverity_Error, JB_LUB[0]));
	JB_Decr(str);
	JB_Rec_AppendErr(JB_StdErr, _tmPf2);
	JB_Decr(_tmPf2);
}

int JB_Err__Init_() {
	{
		JB_SetRef(JB__Err_CurrSource, JB_Array_Constructor0(nil));
		JB__Err_AutoPrint = 0;
		JB__Err_KeepStackTrace = false;
	}
	;
	return 0;
}

int JB_Err__InitCode_() {
	return 0;
}

void JB_Err__SourceAdd(Message* m) {
	JB_Array_SyntaxAppend(JB__Err_CurrSource, m);
}

void JB_Err__SourceRemove() {
	JB_FreeIfDead(((Message*)JB_Array_Pop(JB__Err_CurrSource)));
}




SCArg* SC_Arg_Constructor(SCArg* self, Message* node) {
	if (self == nil) {
		self = ((SCArg*)JB_NewClass(&SCArgData));
	}
	SC_Base_ConstructorMsg(self, node);
	self->ParentFunc = nil;
	self->TmpMovedOutFor = nil;
	self->IsClassArg = false;
	self->IsStatementExpr = false;
	return self;
}

void SC_Arg_Destructor(SCArg* self) {
	JB_Clear(self->ParentFunc);
	JB_Clear(self->TmpMovedOutFor);
	SC_Base_Destructor(self);
}

JB_String* SC_Arg_Render(SCArg* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendString(fs, JB_LUB[1185]);
	JB_FS_SyntaxAppend(fs, self->Source);
	JB_FS_AppendString(fs, JB_LUB[280]);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}


void SC_Beh_Add(SCBehaviour* self, SCNode* fn) {
	if ((!fn)) {
		return;
	}
	SCNode* Old = ((SCNode*)SC_Base_SyntaxAccess(self, fn->Name));
	if (Old) {
		if (true) {
			JB_Msg_SyntaxExpect(fn->Source, JB_kNameConf);
		}
		if (true) {
			JB_Msg_SyntaxExpect(Old->Source, JB_kNameConf);
		}
	}
	 else {
		SC_Base_TryAdd(self, fn->Source, fn, fn->Name);
	}
}

SCClass* SC_Beh_Cls(SCBehaviour* self) {
	return ((SCClass*)self->Parent);
}

SCBehaviour* SC_Beh_Constructor(SCBehaviour* self, SCClass* parent) {
	if (self == nil) {
		self = ((SCBehaviour*)JB_NewClass(&SCBehaviourData));
	}
	SC_Base_Constructor0(self);
	self->FuncTable = nil;
	Array* _tmPf1 = JB_Array_Constructor0(nil);
	self->WrapperFuncs = JB_Incr(_tmPf1);
	self->Project = parent->Project;
	self->Parent = parent;
	Dictionary* _tmPf0 = JB_Dict_Constructor(nil);
	self->Interfaces = JB_Incr(_tmPf0);
	return self;
}

void SC_Beh_CreateFuncTable(SCBehaviour* self, Message* ErrPlace) {
	if (self->FuncTable) {
		JB_Object_SyntaxExpect(nil);
		return;
	}
	SCClass* _tmPf1 = JB_Incr(SC_Beh_Cls(self));
	JB_String* name = JB_Incr(SC_Class_BehaviourName(_tmPf1));
	JB_Decr(_tmPf1);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(ErrPlace);
	Message* msg = JB_Incr(JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1973]));
	JB_Msg_AppendSyx(msg, JB_SyxThg, name);
	JB_Decr(name);
	JB_Msg_AppendSyx(msg, JB_SyxArg, JB_LUB[0]);
	SC_Imp_Use(self->Project);
	SCModule* F = JB_Incr(((SCModule*)SC_Class__NewStruct(msg, SC__Comp_program, ErrPlace)));
	JB_Decr(msg);
	if (F) {
		F->Cls->IsBehaviour = kSC__Beh_kBehaviourTable;
		SCClass* _tmPf2 = JB_Incr(SC_Beh_Cls(self));
		F->Cls->IsRole = _tmPf2->IsRole;
		JB_Decr(_tmPf2);
		SC_Base_TryAddBase(SC__Comp_program, ErrPlace, F);
		JB_SetRef(self->FuncTable, F);
		SC_Imp__NoProj();
	}
	JB_Decr(F);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Beh_Destructor(SCBehaviour* self) {
	JB_Clear(self->FuncTable);
	JB_Clear(self->Interfaces);
	JB_Clear(self->WrapperFuncs);
	SC_Base_Destructor(self);
}

SCBehaviour* SC_Beh_Upwards(SCBehaviour* self) {
	SCClass* curr = SC_Beh_Cls(self);
	while (curr) {
		curr = curr->Super;
		if ((!curr)) {
			return nil;
		}
		SCBehaviour* b = curr->Behaviour;
		if (b) {
			return b;
		}
	};
	return nil;
}

SCFunction* SC_Beh__MakeVirtualCaller(SCModule* Mod, SCClass* Cls, Message* ErrPlace) {
	SCFunction* rz = nil;
	JB_String* InterName = JB_Incr(Mod->Name);
	JB_String* Type = JB_Incr(SC_Class_BehaviourName(Cls));
	JB_String* FuncName = JB_Incr(SC_Str_InterfaceToBehaviour(InterName));
	FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf1, JB_LUB[79]);
	JB_FS_AppendString(_fsf1, InterName);
	JB_FS_AppendString(_fsf1, JB_LUB[124]);
	JB_FS_AppendString(_fsf1, InterName);
	JB_Decr(InterName);
	JB_FS_AppendString(_fsf1, JB_LUB[281]);
	JB_FS_AppendString(_fsf1, Type);
	JB_Decr(Type);
	JB_FS_AppendString(_fsf1, JB_LUB[2070]);
	JB_FS_AppendString(_fsf1, FuncName);
	JB_Decr(FuncName);
	JB_FS_AppendString(_fsf1, JB_LUB[287]);
	JB_String* FNStr = JB_Incr(JB_FS_GetResult(_fsf1));
	JB_Decr(_fsf1);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(ErrPlace);
	Message* FNSrc = JB_Incr(SC_Str_ParseClean(FNStr));
	JB_Decr(FNStr);
	if (FNSrc) {
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(FNSrc)));
		JB_SetRef(rz, ((SCFunction*)SC_Func__NewFunc(_tmPf2, Cls, ErrPlace)));
		JB_Decr(_tmPf2);
		if (rz) {
			(SC_Func_SyntaxIsSet(rz, kSC__FunctionType_Behaviour, true));
			(SC_Func_SyntaxIsSet(rz, kSC__FunctionType_ExpectsRealVars, true));
			JB_Array_SyntaxAppend(Cls->Behaviour->WrapperFuncs, rz);
		}
	}
	JB_Decr(FNSrc);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(rz);
	return rz;
}

SCNode* SC_Beh__NewActual(Message* node, SCNode* name_space, Message* ErrPlace) {
	SCClass* cls = JB_Incr(SC_Base_ShouldBeClass(name_space, ErrPlace));
	if (((bool)cls) and SC_Beh__Tran_Behaviour(node, cls)) {
		SCFunction* fn = JB_Incr(((SCFunction*)SC_Func__NewFunc(node, cls, node)));
		if (fn) {
			SC_Class_AddBehaviourOrInterface(cls, fn, ErrPlace);
			(SC_Func_SyntaxIsSet(fn, kSC__FunctionType_Behaviour, true));
			(SC_Func_SyntaxIsSet(fn, kSC__FunctionType_ExpectsRealVars, true));
			JB_Decr(cls);
			JB_SafeDecr(fn);
			return fn;
		}
		JB_Decr(fn);
	}
	JB_Decr(cls);
	return nil;
}

SCNode* SC_Beh__NewVirtual(Message* node, SCNode* name_space, Message* ErrPlace) {
	if ((!ErrPlace)) {
		return nil;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(ErrPlace);
	SCClass* cls = JB_Incr(SC_Base_ShouldBeClass(name_space, ErrPlace));
	if (cls) {
		Message* arg = JB_Incr(JB_Msg_FindSyx(node, JB_SyxArg));
		if (arg) {
			Message* Beh = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1513])));
			Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(node)));
			Message* _tmPf1 = JB_Incr(JB_Msg_Copy(_tmPf2, nil));
			JB_Decr(_tmPf2);
			JB_Tree_SyntaxAppend(Beh, _tmPf1);
			JB_Decr(_tmPf1);
			JB_Tree_SyntaxAppend(Beh, arg);
			(JB_Ring_NextSibSet(node, Beh));
			SC_Base_CollectOne(name_space, Beh, true);
			JB_Decr(Beh);
		}
		JB_Decr(arg);
		SCModule* Mod = JB_Incr(SC_Beh__NewVirtualSub(node, cls, ErrPlace));
		if (Mod) {
			SCFunction* _tmPf3 = JB_Incr(SC_Beh__MakeVirtualCaller(Mod, cls, ErrPlace));
			JB_Decr(Mod);
			JB_Decr(cls);
			JB_SafeDecr(_tmPf3);
			JB_MsgPos_Destructor((&_usingf0));
			return _tmPf3;
		}
		JB_Decr(Mod);
	}
	JB_Decr(cls);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return nil;
}

SCModule* SC_Beh__NewVirtualSub(Message* node, SCClass* cls, Message* ErrPlace) {
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(node)));
	Message* Thg = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	bool required = (SC_Msg_OperatorIsARel(Thg, JB_LUB[299]));
	if (required) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(Thg)));
		JB_SetRef(Thg, SC_Msg_ReplaceWith(Thg, _tmPf1));
		JB_Decr(_tmPf1);
	}
	if ((!JB_Msg_EqualsSyx(Thg, JB_SyxThg, false))) {
		JB_Msg_SyntaxExpect(node, JB_LUB[930]);
		JB_Decr(Thg);
		return nil;
	}
	JB_String* s = JB_Incr(Thg->Name);
	if (SC_Str_UnderScoreAtAnyEnd(s)) {
		JB_Msg_SyntaxExpect(Thg, JB_LUB[931]);
		JB_Decr(s);
		JB_Decr(Thg);
		return nil;
	}
	if ((!(!JB_Str_Equals(s, JB_LUB[1601], true)))) {
		JB_Msg_SyntaxExpect(Thg, JB_LUB[661]);
		JB_Decr(s);
		JB_Decr(Thg);
		return nil;
	}
	JB_SetRef(Thg->Name, JB_Str_Moat(s));
	JB_Decr(Thg);
	SCModule* Mod = JB_Incr(SC_Func__NewProtoTypeSub(node, cls, ErrPlace, s));
	JB_Decr(s);
	if ((!Mod)) {
		JB_Decr(Mod);
		return nil;
	}
	Mod->IsRequiredInterface = required;
	SC_Class_AddBehaviourOrInterface(cls, Mod, ErrPlace);
	Mod->Cls->IsBehaviour = kSC__Beh_kBehaviourProto;
	if (required) {
		Mod->Cls->IsBehaviour = kSC__Beh_kBehaviourProtoRequired;
	}
	JB_SafeDecr(Mod);
	return Mod;
}

bool SC_Beh__Tran_Behaviour(Message* node, SCClass* cls) {
	if ((!node)) {
		return nil;
	}
	if (cls->IsRole) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1904]);
		return nil;
	}
	Message* name = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	if ((!name)) {
		JB_Decr(name);
		return nil;
	}
	Message* lst = JB_Incr(((Message*)JB_Ring_NextSib(name)));
	if (lst) {
		if ((!((!JB_Msg_EqualsSyx(lst, JB_SyxBra, false)) and ((!JB_Msg_EqualsSyx(lst, JB_SyxPrm, false)) and (!JB_Msg_EqualsSyx(lst, JB_SyxList, false)))))) {
			JB_Msg_SyntaxExpect(lst, JB_LUB[666]);
			JB_Decr(lst);
			JB_Decr(name);
			return nil;
		}
	}
	JB_Decr(lst);
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
		Message* it = JB_Incr(((Message*)JB_Ring_NextSib(name)));
		if (it) {
			JB_Msg_Expect(it, JB_SyxArg, nil);
		}
		 else {
			Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
			JB_Tree_SyntaxAppend(node, (_tmPf2));
			JB_Decr(_tmPf2);
		}
		JB_Decr(it);
		Message* _tmPf3 = ({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			JB_String* _tmPf5 = JB_Incr(JB_Str_Moat(name->Name));
			Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, _tmPf5));
			JB_Decr(_tmPf5);
			JB_Tree_SyntaxAppend(__imPf1, (_tmPf4));
			JB_Decr(_tmPf4);
			JB_SafeDecr(nil);
			 __imPf1;
		});
		(JB_Ring_NextSibSet(name, _tmPf3));
		JB_Decr(_tmPf3);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(name);
	return true;
}


void SC_Class_AddBehaviourOrInterface(SCClass* self, SCNode* M, Message* ErrPlace) {
	SCBehaviour* b = JB_Incr(self->Behaviour);
	if ((!b)) {
		JB_SetRef(b, SC_Beh_Constructor(nil, self));
		JB_SetRef(self->Behaviour, b);
	}
	if (JB_Object_FastIsa(M, &SCModuleData)) {
		(JB_Dict_ValueLowerSet(b->Interfaces, ((SCModule*)M)->Name, ((SCModule*)M)));
	}
	 else {
		SC_Beh_Add(b, M);
	}
	JB_Decr(b);
}

void SC_Class_AfterAfterFuncs(SCClass* self) {
	SCClass* s = JB_Incr(self->Super);
	if (s) {
		if ((!(self->HasCompareFunc))) {
			self->HasCompareFunc = s->HasCompareFunc;
		}
		if ((!(self->HasEqualsFunc))) {
			self->HasEqualsFunc = s->HasEqualsFunc;
		}
	}
	JB_Decr(s);
	Message* def = JB_Incr(self->Defawlt);
	if (def) {
		SCDecl* D = JB_Incr(SC_TypeOfExpr(def, self->Modul, nil));
		if (((bool)D) and self->DefaultsToReal) {
			if ((!SC_Decl_StatedReal(D))) {
				JB_Msg_SyntaxExpect(def, JB_LUB[1104]);
			}
		}
		JB_Decr(D);
	}
	JB_Decr(def);
	SC_Class_DeclModel(self);
}

void SC_Class_AfterFuncsDecled(SCClass* self) {
	SC_Class_OverrideSyntax(self);
	SCFunction* c = JB_Incr(self->ConstructorFunc);
	if (c) {
		SC_Class_CheckAllocVsWrapper(self, c, true);
	}
	JB_Decr(c);
	SCFunction* d = JB_Incr(self->DestructorFunc);
	if (d) {
		if ((d->NextFunc)) {
			JB_Msg_SyntaxExpect(d->Source, JB_LUB[745]);
		}
		if (JB_Array_Size(d->Args) != 1) {
			JB_Msg_SyntaxExpect(d->Source, JB_LUB[821]);
		}
		if ((d->ReturnType)) {
			JB_Msg_SyntaxExpect(d->Source, JB_LUB[820]);
		}
		SC_Class_CheckAllocVsWrapper(self, d, false);
	}
	JB_Decr(d);
	SCDecl* cls = JB_Incr(self->ClassType);
	if (cls) {
		JB_String* _tmPf2 = JB_Incr(SC_Class_CStructName(self));
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(_tmPf2, JB_LUB[808]));
		JB_Decr(_tmPf2);
		JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[242], _tmPf1));
		JB_Decr(_tmPf1);
		(SC_Decl_NameSet(cls, _tmPf0));
		JB_Decr(_tmPf0);
	}
	JB_Decr(cls);
}

JB_String* SC_Class_APIStructName(SCClass* self) {
	if (SC_Class_IsObject(self) or ((bool)self->Super)) {
		Message* _tmPf1 = JB_Incr(SC_Base_SourceArg(self));
		JB_String* _tmPf0 = JB_Incr(SC_Msg_APICppProject(_tmPf1));
		JB_Decr(_tmPf1);
		JB_String* _tmPf2 = JB_Incr(JB_Str_LowerCase(self->Name));
		JB_String* _tmPf3 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf2));
		JB_Decr(_tmPf0);
		JB_Decr(_tmPf2);
		JB_SafeDecr(_tmPf3);
		return _tmPf3;
	}
	return SC_Class_CStructName(self);
}

void SC_Class_BannedCheck(SCClass* self, Message* src) {
	if ((!SC_Class_TestBanned(self))) {
		return;
	}
	if (true) {
		SC_SCObject_Fail(self, JB_Str_OperatorPlus(JB_LUB[662], self->Name));
	}
	SCNode* curr = self->MyReacher;
	{
		int _Valuef1 = 0;
		while (_Valuef1 < 16) {
			if ((!curr) or (JB_ObjClass(curr) == &SCNodeData)) {
				break;
			}
			if (src) {
				if (true) {
					JB_Msg_SyntaxExpect(src, SC_Base_ReachedName(curr));
				}
				src = nil;
			}
			 else {
				if (true) {
					SC_SCObject_Fail(curr, SC_Base_ReachedName(curr));
				}
			}
			curr = curr->MyReacher;
			_Valuef1++;
		};
	};
}

JB_String* SC_Class_BehaviourName(SCClass* self) {
	return JB_Str_OperatorPlus(self->Name, JB_LUB[1431]);
}

SCFunction* SC_Class_BestBehaviourFor(SCClass* self, JB_String* name) {
	SCBehaviour* b = self->Behaviour;
	while (b) {
		SCObject* fn = SC_Base_SyntaxAccess(b, name);
		if (JB_Object_FastIsa(fn, &SCFunctionData)) {
			return ((SCFunction*)fn);
		}
		b = SC_Beh_Upwards(b);
	};
	return nil;
}

int SC_Class_CalculateSize(SCClass* self, int Depth) {
	SC_Class_CalculateSizeRaw(self, Depth);
	return self->Size;
}

int SC_Class_CalculateSizeRaw(SCClass* self, int Depth) {
	u16 si = self->Size;
	if (si) {
		return si;
	}
	if (SC_Class_IsFunc(self)) {
		self->Size = JB_Platform__PointerBytes();
		return self->Size;
	}
	if (SC_Class_IsDataTypeOnly(self)) {
		self->Size = JB_TC_ByteSize(self->TypeInfo);
		return self->Size;
	}
	if (Depth >= 16) {
		Message* _tmPf3 = JB_Incr(SC_Base_SourceArg(self));
		JB_Msg_SyntaxExpect(_tmPf3, JB_LUB[763]);
		JB_Decr(_tmPf3);
		return 0;
	}
	int Count = 0;
	if (self == JB_TypeObject) {
		Count = 4;
	}
	SCClass* s = JB_Incr(self->Super);
	if (s) {
		Count = SC_Class_CalculateSizeRaw(s, 0);
		if ((!Count)) {
			debugger;
			JB_Decr(s);
			return 0;
		}
	}
	JB_Decr(s);
	int bits = 0;
	{
		Array* _LoopSrcf2 = JB_Incr(self->Properties);
		int _if0 = 0;
		while (true) {
			SCDecl* p = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (p == nil) {
				JB_Decr(p);
				break;
			}
			int curr = JB_Platform__PointerBytes();
			if ((!(SC_Class_IsObject(p->Type) or ((bool)p->PointerCount)))) {
				curr = SC_Class_CalculateSize(p->Type, Depth + 1);
				if ((!curr)) {
					JB_Decr(p);
					JB_Decr(_LoopSrcf2);
					return 0;
				}
			}
			if ((SC_Decl_SyntaxIs(p, kSC__SCDeclInfo_Task)) and SC_Decl_IsObject(p)) {
				bits = JB_int_SyntaxAccessSet(bits, (Count + (JB_Platform__PointerBytes() - 1)) >> 3, true);
			}
			Count = JB_int_OperatorAlign(Count, curr);
			int Mul = p->C_Array;
			JB_Decr(p);
			if ((!Mul)) {
				Mul = 1;
			}
			Count = (Count + (curr * Mul));
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	self->Size = JB_int_OperatorAlign(Count, 4);
	if (SC_Class_IsTask(self)) {
		self->TaskObjectCount = (self->Super->TaskObjectCount | bits);
		if (self->Size > 128) {
			JB_Msg_SyntaxExpect(self->Source, JB_LUB[1266]);
		}
	}
	return Count;
}

bool SC_Class_CanCompare(SCClass* self, SCDecl* Against, bool AsEquals) {
	bool CanUseEquals = AsEquals and self->HasEqualsFunc;
	if ((!self->HasCompareFunc) and (!CanUseEquals)) {
		return false;
	}
	if (CanUseEquals and SC_Class_CanCompareSub(self, JB_LUB[1979], Against)) {
		return true;
	}
	if (self->HasCompareFunc) {
		return SC_Class_CanCompareSub(self, JB_LUB[1978], Against);
	}
	return false;
}

bool SC_Class_CanCompareSub(SCClass* self, JB_String* s, SCDecl* against) {
	{
		SCClass* b = self;
		while (b) {
			SCObject* o = ((SCObject*)JB_Dict_ValueStr(b->Access, s));
			if (JB_Object_FastIsa(o, &SCFunctionData)) {
				if (SC_Func_CanCompare(((SCFunction*)o), against)) {
					return true;
				}
			}
			b = b->Super;
		};
	}
	;
	return false;
}

bool SC_Class_CanHaveEmptyConstructor(SCClass* self) {
	{
		Array* _LoopSrcf2 = self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* p = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (p == nil) {
				break;
			}
			if (SC_Decl_TypeSuffers(p) and ((bool)SC_Decl_StatedReal(p))) {
				if ((!p->Type->DefaultsToReal)) {
					return nil;
				}
			}
			_if0++;
		};
	}
	;
	return true;
}

void SC_Class_CheckAllocVsWrapper(SCClass* self, SCFunction* f, bool IsConstructor) {
	if ((!(((bool)self->IsWrapper) and (SC_Class_IsObject(self) and ((bool)self->Super))))) {
		return;
	}
	if ((!f) != IsConstructor) {
		return;
	}
	if ((!IsConstructor)) {
		if ((!JB_FreeIfDead(SC_Class_FirstDestructor(self)))) {
			return;
		}
	}
	if ((!f->IsWrapper)) {
		if (true) {
			JB_Msg_SyntaxExpect(self->Source, JB_LUB[1385]);
		}
	}
}

void SC_Class_CheckIterator(SCClass* self) {
	{
		Dictionary* _LoopSrcf2 = self->Access;
		DictionaryReader* _navf0 = JB_Dict_Navigate(_LoopSrcf2);
		while (true) {
			SCObject* i = ((SCObject*)JB_DictionaryReader_NextValue(_navf0));
			if (i == nil) {
				break;
			}
			if (JB_Object_FastIsa(i, &SCIteratorData)) {
				SC_Iter_Check(((SCIterator*)i), self);
			}
		};
	};
}

void SC_Class_ClassCollect(SCClass* self) {
	Message* _tmPf0 = JB_Incr(SC_Base_SourceArg(self));
	SC_Base_Collect(self, _tmPf0, SC_SCObject_IsVisible(self), nil);
	JB_Decr(_tmPf0);
}

bool SC_Class_CollectProp(SCClass* self, Message* msg) {
	SCDecl* dcl = SC_Msg_CollectDecl(msg, self->Modul, self, kSC__DeclMode_Properties, self, nil);
	if (dcl) {
		JB_Array_SyntaxAppend(self->Properties, dcl);
		(SC_Decl_SyntaxIsSet(dcl, kSC__SCDeclInfo_Property, true));
		SC_Decl_BecomeReal(dcl);
		return true;
	}
	return false;
}

void SC_Class_CollectProperties(SCClass* self) {
	if (SC_Class_IsBehaviourTable(self)) {
		return;
	}
	SC__Mod_Curr = self->Modul;
	{
		Message* _LoopSrcf2 = SC_Base_SourceArg(self);
		Message* item = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(item));
			if (JB_Msg_EqualsSyx(item, JB_SyxDecl, false)) {
				SC_Class_CollectProp(self, item);
			}
			item = _Nf1;
		};
		;
	}
	;
	if (SC_Class_IsTask(self)) {
		SC_Class_TaskProperties(self);
	}
	 else {
		SCDecl* it = ((SCDecl*)JB_Array_First(self->Properties));
		if (it) {
			if ((self->IsRole)) {
				JB_Msg_SyntaxExpect(it->Source, JB_LUB[1182]);
				return;
			}
		}
	}
	if (self->IsModel) {
		SC_Class_ModelDecls(self);
	}
}

SCFunction* SC_Class_ConOrDesForCall(SCClass* self, bool IsConstructor, int Task) {
	if ((!IsConstructor)) {
		return SC_Class_FirstDestructor(self);
	}
	if (Task <= 1) {
		return SC_Func_ParamlessConstructor(self->ConstructorFunc);
	}
	return self->ConstructorFunc;
}

SCClass* SC_Class_Constructor(SCClass* self, Message* node, SCNode* parent, bool HasPtrs, SCModule* m) {
	if (self == nil) {
		self = ((SCClass*)JB_NewClass(&SCClassData));
	}
	SC_Base_Constructor0(self);
	self->Super = nil;
	self->Defawlt = nil;
	self->False = nil;
	Array* _tmPf7 = JB_Array_Constructor0(nil);
	self->Properties = JB_Incr(_tmPf7);
	Array* _tmPf6 = JB_Array_Constructor0(nil);
	self->Casts = JB_Incr(_tmPf6);
	Array* _tmPf5 = JB_Array_Constructor0(nil);
	self->Children = JB_Incr(_tmPf5);
	self->Contained = nil;
	self->Signed = nil;
	self->_NotConst = nil;
	self->FuncProto = nil;
	self->TheIsFunc = nil;
	self->ConstructorFunc = nil;
	self->DestructorFunc = nil;
	JB_StringC* _tmPf4 = JB_LUB[0];
	self->CppClass = JB_Incr(_tmPf4);
	self->ClassType = nil;
	self->IsModel = nil;
	self->Behaviour = nil;
	self->ProcessAs = nil;
	self->DowngradeTo = nil;
	self->DataObject = nil;
	self->TaskObjectCount = 0;
	self->Size = 0;
	self->Depth = 0;
	self->StructContainerDepth = 0;
	self->MinOpt = 0;
	self->IsBehaviour = 0;
	self->IsWrapper = 0;
	self->ContainsParentClass = false;
	self->IgnoreContainedSelf = false;
	self->HasCompareFunc = false;
	self->HasEqualsFunc = false;
	self->HasSubClass = false;
	self->NoEarlyFree = false;
	self->AutoGeneratedSavers = false;
	self->SavingCanSkip = false;
	self->TreatAsBaseType = false;
	self->HasNilChecker = false;
	self->DefaultsToReal = false;
	self->IsRole = 0;
	self->IsBuiltin = false;
	self->BaseType = 0;
	self->IsASM = false;
	self->NumericReduction = 0;
	SC__Comp_stClasses++;
	JB_SetRef(node->Obj, self);
	JB_String* _tmPf3 = SC_Class__LoadClassName(node);
	self->Name = JB_Incr(_tmPf3);
	self->Source = JB_Incr(node);
	self->Modul = JB_Incr(m);
	(SC_SCObject_IsVisibleSet(self, SC__Base_CurrVisibility));
	JB_StringC* _tmPf2 = JB_LUB[0];
	self->SaveAs = JB_Incr(_tmPf2);
	self->TypeInfo = kJB__TC_UnusedType;
	self->Banned = SC_Class_TestBanned(self);
	SCDecl* T = JB_Incr(SC_Decl_Constructor(nil, self));
	T->NilDeclared = (kSC__NilState_Real >> HasPtrs);
	self->TypeNormal = JB_Incr(T);
	SCDecl* _tmPf1 = SC_Decl_NilConstructor(T, kSC__NilState_Optional * HasPtrs);
	self->TypeOptional = JB_Incr(_tmPf1);
	SCDecl* _tmPf0 = SC_Decl_NilConstructor(T, kSC__NilState_Real * HasPtrs);
	self->TypeReal = JB_Incr(_tmPf0);
	if (JB_Msg_SyntaxEquals(node, JB_LUB[1973], false)) {
		JB_SetRef(T, SC_Decl_GetAddress(T, kSC__DeclMode_FuncParam));
	}
	 else {
		JB_SetRef(T, SC_Decl_CopyDecl(T, false));
	}
	self->SelfDecl = JB_Incr(T);
	(SC_Decl_NameSet(T, JB_LUB[1934]));
	(SC_Decl_SyntaxIsSet(T, kSC__SCDeclInfo_SelfImplicit, true));
	(SC_Decl_SyntaxIsSet(T, kSC__SCDeclInfo_Altered, (!true)));
	JB_Decr(T);
	return self;
}

void SC_Class_ContainedTypeLoad(SCClass* self) {
	SC_Base_Use(self);
	SCClass* sup = JB_Incr(self->Super);
	if (sup) {
		JB_SetRef(self->Contained, sup->Contained);
		JB_SetRef(self->SelfDecl->Contains, sup->SelfDecl->Contains);
		if (self->NumericReduction == sup->NumericReduction) {
			SC_Class_NeedsDefaultValue(self, sup->Defawlt, (&self->Defawlt), JB_LUB[1597]);
			SC_Class_NeedsDefaultValue(self, sup->False, (&self->False), JB_LUB[1649]);
		}
		self->IgnoreContainedSelf = ((bool)(self->IgnoreContainedSelf | sup->IgnoreContainedSelf));
		self->ContainsParentClass = sup->ContainsParentClass;
	}
	JB_Decr(sup);
	if ((!(self->Defawlt))) {
		JB_SetRef(self->Defawlt, (JB_Syx_Msg(JB_SyxThg, JB_LUB[1811])));
	}
	if (self->False) {
	}
	 else if (SC_Class_NumericCount(self) == 1) {
		JB_SetRef(self->False, (JB_Syx_Msg(JB_SyxNum, JB_LUB[441])));
	}
	 else {
		JB_SetRef(self->False, (JB_Syx_Msg(JB_SyxThg, JB_LUB[1811])));
	}
	SCClass* cls = JB_Incr(SC_Class_FindContainedClass(self));
	if ((!cls)) {
		JB_Decr(cls);
		return;
	}
	SCDecl* TN = JB_Incr(cls->TypeOptional);
	SCDecl* cont = JB_Incr(SC_Decl_CopyDecl(TN, false));
	(SC_Decl_SyntaxIsSet(cont, kSC__SCDeclInfo_UpgradeableContained, true));
	JB_SetRef(self->Contained, cont);
	JB_Decr(cont);
	self->IgnoreContainedSelf = ((bool)(self->IgnoreContainedSelf | SC_Class_IsDataTypeOrFP(cls)));
	JB_Decr(cls);
	JB_SetRef(self->SelfDecl->Contains, TN);
	JB_Decr(TN);
}

SCFunction* SC_Class_CreateAutoConstructor(SCClass* self) {
	SCFunction* rz = nil;
	rz = SC_Class_CreateEmptyFunc(self, JB_LUB[785], JB_LUB[786]);
	if ((!rz)) {
		return nil;
	}
	Message* node = rz->Source;
	Message* prms = ((Message*)JB_Tree_Second(node));
	Message* arg = ((Message*)JB_Ring_NextSib(prms));
	{
		Array* _LoopSrcf2 = self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* prop = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (prop == nil) {
				break;
			}
			if ((!SC_Decl_IsCArray(prop))) {
				JB_String* name = prop->Name;
				if (JB_Str_Equals(name, JB_LUB[1975], true)) {
					name = JB_LUB[1953];
				}
				if (JB_Str_Equals(name, JB_LUB[1456], false)) {
					JB_Msg_SyntaxExpect(prop->Source, JB_LUB[936]);
				}
				JB_Tree_SyntaxAppend(prms, SC_Decl_WriteDeclTypeAndName(prop, name, 0));
				Message* rel = JB_Msg_Msg(arg, JB_SyxRel, JB_LUB[0]);
				JB_Msg_AppendSyx(rel, JB_SyxSDot, name);
				JB_Msg_AppendSyx(rel, JB_SyxOpp, JB_LUB[587]);
				JB_Msg_AppendSyx(rel, JB_SyxThg, name);
			}
			_if0++;
		};
	}
	;
	return rz;
}

void SC_Class_CreateBehaviour(SCClass* self) {
	if ((!(SC_Class_IsObject(self) and (!self->IsRole)))) {
		return;
	}
	if ((!(self->Behaviour))) {
		JB_SetRef(self->Behaviour, SC_Beh_Constructor(nil, self));
	}
	Message* _tmPf0 = JB_Incr(SC_Base_SourceArg(self));
	SC_Beh_CreateFuncTable(self->Behaviour, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_Class_CreateConstructors(SCClass* self) {
	if (SC_Class_IsObject(self)) {
		SCFunction* Con = JB_Incr(SC_Class_FindAllocFunc(self, JB_LUB[785], true));
		if (self->IsRole) {
			SCClass* s = JB_Incr(self->Super);
			if ((!((!Con) or ((bool)s->ConstructorFunc)))) {
				JB_Msg_SyntaxExpect(Con->Source, JB_LUB[1181]);
			}
			if ((!(Con))) {
				JB_SetRef(Con, s->ConstructorFunc);
			}
			JB_SetRef(self->DestructorFunc, s->DestructorFunc);
			JB_Decr(s);
			if ((!Con)) {
				JB_Decr(Con);
				return;
			}
		}
		//using;
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self->Source);
		if ((!Con) and (!self->IsWrapper)) {
			JB_SetRef(Con, SC_Class_CreateEmptyConstructors(self));
		}
		JB_SetRef(self->ConstructorFunc, Con);
		if (Con) {
			SC_Base_TryAdd(self->Modul, Con->Source, Con, JB_LUB[1808]);
			SC_Class_FillRoleConstructor(self, Con);
		}
		JB_Decr(Con);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	if ((!self->IsRole)) {
		bool NeedsDestructor = SC_Class_IsObject(self) or (SC_Class_IsStruct(self) and SC_Class_HasObjectProperties(self));
		JB_SetRef(self->DestructorFunc, SC_Class_FindAllocFunc(self, JB_LUB[819], (!NeedsDestructor)));
	}
	 else if (self->IsRole == 3) {
		if (self->Super->IsRole != 2) {
			SC_SCObject_Fail(self, JB_LUB[1267]);
		}
	}
}

SCFunction* SC_Class_CreateEmptyConstructors(SCClass* self) {
	SCFunction* rz = nil;
	if (SC_Class_CanHaveEmptyConstructor(self)) {
		JB_SetRef(rz, SC_Class_CreateEmptyFunc(self, JB_LUB[785], JB_LUB[0]));
		if ((!rz)) {
			JB_Decr(rz);
			return nil;
		}
		(SC_Func_SyntaxIsSet(rz, kSC__FunctionType_EmptyConstructor, true));
	}
	int pc = SC_Class_PassableCount(self);
	SCClass* s = JB_Incr(self->Super);
	if (((bool)s) and (((bool)rz) and (s != JB_TypeObject))) {
		Message* l = JB_Incr(SC_Func_Prms(s->ConstructorFunc));
		if (JB_Ring_HasChildren(l)) {
			SC_Func_CopyParams(rz, l);
			pc = 0;
		}
		JB_Decr(l);
	}
	JB_Decr(s);
	if ((pc >= 1) and (pc <= 8)) {
		SCFunction* f2 = JB_Incr(SC_Class_CreateAutoConstructor(self));
		if ((!(rz))) {
			JB_SetRef(rz, f2);
		}
		JB_Decr(f2);
	}
	JB_SafeDecr(rz);
	return rz;
}

SCFunction* SC_Class_CreateEmptyFunc(SCClass* self, JB_String* fname, JB_String* cpp_name) {
	JB_Incr(cpp_name);
	SCFunction* rz = nil;
	SC__Base_CurrVisibility = SC_SCObject_IsVisible(self);
	if ((!(JB_Str_Exists(cpp_name)))) {
		JB_SetRef(cpp_name, fname);
	}
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[1675]);
	JB_FS_AppendString(_fsf0, fname);
	JB_FS_AppendString(_fsf0, JB_LUB[208]);
	JB_FS_AppendString(_fsf0, cpp_name);
	JB_Decr(cpp_name);
	JB_FS_AppendString(_fsf0, JB_LUB[209]);
	JB_String* e = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	Message* msg = JB_Incr(SC_Str_ParseClean(e));
	JB_Decr(e);
	JB_SetRef(rz, ((SCFunction*)SC_Func__NewFunc(msg, self, self->Source)));
	if (rz) {
		SC_Base_TryAdd(self, msg, rz, fname);
		(SC_SCObject_IsVisibleSet(rz, false));
	}
	JB_Decr(msg);
	JB_SafeDecr(rz);
	return rz;
}

JB_String* SC_Class_CStructName(SCClass* self) {
	if ((!self)) {
		return JB_LUB[0];
	}
	if (self->IsRole == 1) {
		return SC_Class_CStructNameSub(SC_Class_RealClass(self));
	}
	return SC_Class_CStructNameSub(self);
}

JB_String* SC_Class_CStructNameSub(SCClass* self) {
	return ({
		JB_String* _X = self->CppClass;
		if ((!JB_Str_Exists(_X))) {
			_X = SC_Str_UnicodeSafeName(self->Name, nil);
			JB_SetRef(self->CppClass, _X);
		}
		 _X;
	});
}

JB_String* SC_Class_CSuperStructName(SCClass* self) {
	SCClass* sup = JB_Incr(SC_Class_RealSuper(self));
	if ((!sup)) {
		JB_Decr(sup);
		return JB_LUB[441];
	}
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[949]);
	JB_String* _tmPf1 = JB_Incr(SC_Class_CStructName(sup));
	JB_Decr(sup);
	JB_FS_AppendString(_fsf0, _tmPf1);
	JB_Decr(_tmPf1);
	JB_FS_AppendByte(_fsf0, ')');
	JB_String* _tmPf2 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

void SC_Class_DataTypePostLoad(SCClass* self) {
	if ((!SC_Class_IsDataTypeOnly(self))) {
		return;
	}
	Message* node = JB_Incr(self->Source);
	SCClass* sup = JB_Incr(self->Super);
	if (sup) {
		self->Size = sup->Size;
		if ((!self->NumericReduction)) {
			self->TypeInfo = sup->TypeInfo;
			if ((!(self->Defawlt))) {
				JB_SetRef(self->Defawlt, sup->Defawlt);
			}
		}
	}
	JB_String* N = JB_Incr(JB_Str_LowerCase(self->Name));
	Dictionary* _tmPf0 = JB_Incr(JB_TC__Types());
	DTWrap* Td = JB_Incr(((DTWrap*)JB_Dict_ValueStr(_tmPf0, N)));
	JB_Decr(N);
	JB_Decr(_tmPf0);
	if (Td) {
		DataTypeCode t = ((DataTypeCode)JB_Wrap_First(Td));
		if (t != 255) {
			self->Size = JB_TC_ByteSize(t);
			if ((t == kJB__TC_Vec3) or (t == kJB__TC_iVec3)) {
				self->Size = 16;
			}
			self->TypeInfo = t;
			self->IsBuiltin = true;
			if ((!(JB_TC_IsInt(t) and (!self->Signed)))) {
				JB_Decr(Td);
				JB_Decr(sup);
				JB_Decr(node);
				return;
			}
			SCClass* s2 = JB_Incr(SC_TC_CreateSignedStuff(t));
			if (s2) {
				JB_SetRef(self->Signed, s2->TypeNormal);
				JB_SetRef(s2->Signed, self->TypeNormal);
			}
			JB_Decr(s2);
		}
	}
	JB_Decr(Td);
	if ((!(((bool)sup) or SC_Class_HasGameType(self)))) {
		JB_Msg_SyntaxExpect(node, JB_LUB[813]);
		JB_Decr(sup);
		JB_Decr(node);
		return;
	}
	JB_Decr(node);
	JB_Decr(sup);
}

void SC_Class_DeclModel(SCClass* self) {
	Message* m = self->IsModel;
	if ((!m)) {
		return;
	}
	if ((!JB_Array_SyntaxCast(self->Properties))) {
		JB_Msg_SyntaxExpect(self->Source, JB_LUB[1051]);
		return;
	}
	SCObject* Dcl = SC_Base_SyntaxAccess(self->Modul, JB_LUB[1430]);
	if (JB_Object_FastIsa(Dcl, &SCDeclData)) {
		SC_Decl_MakeGameFlying(((SCDecl*)Dcl), self, m);
	}
	 else {
		debugger;
	}
}

void SC_Class_Destructor(SCClass* self) {
	JB_Clear(self->Super);
	JB_Clear(self->Defawlt);
	JB_Clear(self->False);
	JB_Clear(self->Modul);
	JB_Clear(self->Properties);
	JB_Clear(self->TypeNormal);
	JB_Clear(self->TypeOptional);
	JB_Clear(self->TypeReal);
	JB_Clear(self->Casts);
	JB_Clear(self->Children);
	JB_Clear(self->Contained);
	JB_Clear(self->Signed);
	JB_Clear(self->_NotConst);
	JB_Clear(self->FuncProto);
	JB_Clear(self->TheIsFunc);
	JB_Clear(self->ConstructorFunc);
	JB_Clear(self->DestructorFunc);
	JB_Clear(self->CppClass);
	JB_Clear(self->ClassType);
	JB_Clear(self->SelfDecl);
	JB_Clear(self->IsModel);
	JB_Clear(self->Behaviour);
	JB_Clear(self->SaveAs);
	JB_Clear(self->ProcessAs);
	JB_Clear(self->DowngradeTo);
	JB_Clear(self->DataObject);
	SC_Base_Destructor(self);
}

SCFunction* SC_Class_DoSaver(SCClass* self, JB_String* name, int stage) {
	if (SC_Class_IsA(self, JB_TypeString)) {
		return nil;
	}
	SCObject* Fn = JB_Incr(SC_Base_SyntaxAccess(self, name));
	if ((!stage) and (!Fn)) {
		SC_Class_StartupSaver(self, name);
	}
	 else if (JB_Object_FastIsa(Fn, &SCFunctionData)) {
		if (stage == 1) {
			SC_Func_FillInSaver(((SCFunction*)Fn), name);
		}
		if (stage == 2) {
			SC_Func_ValidateSaver(((SCFunction*)Fn), name);
		}
		JB_SafeDecr(Fn);
		return ((SCFunction*)Fn);
	}
	 else if (stage == 2) {
		if (true) {
			FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
			JB_FS_AppendString(_fsf0, JB_LUB[1082]);
			JB_FS_AppendString(_fsf0, name);
			JB_FS_AppendString(_fsf0, JB_LUB[204]);
			JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
			JB_Decr(_fsf0);
			JB_Msg_SyntaxExpect(self->Source, _tmPf1);
			JB_Decr(_tmPf1);
		}
	}
	JB_Decr(Fn);
	return nil;
}

Message* SC_Class_Falsify(SCClass* self, Message* ques) {
	Message* f = self->False;
	if ((!f)) {
		debugger;
		return nil;
	}
	if (JB_Ring_HasChildren(f)) {
		return JB_Msg_Copy(f, nil);
	}
	ques->Func = f->Func;
	if (SC_Msg_OperatorIsThing(f, JB_LUB[1811])) {
		JB_SetRef(ques->Obj, JB_TypeNil);
	}
	 else {
		JB_SetRef(ques->Name, f->Name);
	}
	return nil;
}

void SC_Class_FillInterFaceIn(SCClass* self, SCFunction* fn, bool Late) {
	SCClass* Interface = JB_Incr(SC_Class_InterfaceForBehaviour(self, fn));
	if ((!Interface)) {
		JB_Decr(Interface);
		return;
	}
	Message* prm = JB_Incr(JB_Msg_FindSyx(fn->Source, JB_SyxPrm));
	if ((!prm)) {
		JB_Msg_SyntaxExpect(fn->Source, JB_LUB[1079]);
		JB_Decr(prm);
		JB_Decr(Interface);
		return;
	}
	Message* f = JB_Incr(((Message*)JB_Ring_First(prm)));
	JB_Decr(prm);
	if (f) {
		SC_Func_DeclsPrototypeInterface(fn, f, Interface, Late);
	}
	JB_Decr(Interface);
	JB_Decr(f);
}

void SC_Class_FillInterFaceWrapper(SCClass* self, SCFunction* fn) {
	SCClass* Interface = JB_Incr(SC_Class_InterfaceForBehaviour(self, fn));
	if ((!Interface)) {
		JB_Decr(Interface);
		return;
	}
	Message* prm = JB_Incr(JB_Msg_FindSyx(fn->Source, JB_SyxPrm));
	if ((!prm)) {
		JB_Msg_SyntaxExpect(fn->Source, JB_LUB[1079]);
		JB_Decr(prm);
		JB_Decr(Interface);
		return;
	}
	Message* f = JB_Incr(((Message*)JB_Ring_First(prm)));
	JB_Decr(prm);
	if ((!f)) {
		JB_Decr(f);
		JB_Decr(Interface);
		return;
	}
	SC_Func_DeclsProtoCleanup(fn, Interface, f, true, false, nil);
	JB_Decr(Interface);
	JB_Decr(f);
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	Message* prms = JB_Incr(JB_Msg_FindNested(fn->Source, JB_SyxSThg, JB_LUB[358], false));
	if ((!prms)) {
		JB_Object_SyntaxExpect(nil);
		JB_Decr(prms);
		return;
	}
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Parent(prms)));
	Message* WriteTo = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	WriteTo->Func = JB_SyxPrm;
	JB_Tree_Remove(prms);
	JB_Decr(prms);
	MessagePosition Using = JB_Msg_SyntaxUsing(fn->Source);
	Message* CopyFrom = JB_Incr(((Message*)JB_Tree_Second(fn->Source)));
	JB_Msg_AppendSyx(WriteTo, JB_SyxThg, JB_LUB[1934]);
	{
		Message* C = JB_Incr(((Message*)JB_Ring_First(CopyFrom)));
		while (C) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(C)));
			if (JB_Msg_EqualsSyx(C, JB_SyxDecl, false)) {
				Message* it = JB_Incr(SC_Msg_DeclName(C));
				if (it) {
					JB_Msg_AppendSyx(WriteTo, JB_SyxThg, it->Name);
				}
				JB_Decr(it);
			}
			JB_SetRef(C, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(C);
		;
	}
	;
	JB_Decr(WriteTo);
	JB_Decr(CopyFrom);
	JB_MsgPos_Destructor((&Using));
}

void SC_Class_FillRoleConstructor(SCClass* self, SCFunction* con) {
	{
		SCFunction* f = con;
		while (f) {
			(SC_Func_SyntaxIsSet(f, kSC__FunctionType_Constructor, true));
			if (SC_Class_IsTask(self)) {
				SC_Class_FillTaskConstructor(self, f);
			}
			f = f->NextFunc;
		};
	};
}

void SC_Class_FillTaskConstructor(SCClass* self, SCFunction* con) {
	Message* src = con->Source;
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(src);
	SC_Class_FillTaskConstructorSub(self, src, SC_Msg_TaskConBefore(((Message*)JB_Ring_Last(src))), 0);
	SCModule* p = ((SCModule*)JB_Object_FastAs(self->Modul->Parent, &SCModuleData));
	if (p) {
		SCClass* c = p->Cls;
		if (c) {
			SC_Base_TryAdd(c, src, con, self->Name);
		}
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Class_FillTaskConstructorSub(SCClass* self, Message* con, Message* before, int depth) {
	if (depth > 16) {
		JB_Msg_SyntaxExpect(con, JB_LUB[1169]);
		return;
	}
	SCClass* pr = self->Super;
	if (SC_Class_IsTask(pr)) {
		SC_Class_FillTaskConstructorSub(pr, con, before, depth + 1);
	}
	{
		Array* _LoopSrcf2 = self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* p = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (p == nil) {
				break;
			}
			SC_Msg_MakeTaskVar(p->Source, con, before, depth == 0);
			_if0++;
		};
	};
}

SCFunction* SC_Class_FindAllocFunc(SCClass* self, JB_String* fname, bool DontCreate) {
	SCFunction* it = SC_Class_FindSpecialFunc(self, fname, false);
	if (it) {
		return it;
	}
	if ((!DontCreate) and (!self->IsWrapper)) {
		return SC_Class_CreateEmptyFunc(self, fname, JB_LUB[0]);
	}
	return nil;
}

SCClass* SC_Class_FindContainedClass(SCClass* self) {
	Message* C = JB_Msg_NeedSyx(JB_Msg_FindSyxName(SC_Base_SourceArg(self), JB_SyxTmp, JB_LUB[1565], false), JB_SyxNil);
	if ((!C)) {
		if (self->ContainsParentClass) {
			SCNode* P = self->Modul->Parent;
			if (JB_Object_FastIsa(P, &SCModuleData)) {
				return ((SCModule*)P)->Cls;
			}
		}
		return nil;
	}
	SCModule* m = self->Modul;
	if (JB_Msg_EqualsSyx(C, JB_SyxQues, false)) {
		if ((!JB_Msg_SyntaxEquals(C, JB_LUB[1865], false))) {
			JB_Msg_SyntaxExpect(C, nil);
			return nil;
		}
		SCModule* p = ((SCModule*)m->Parent);
		if ((!(((bool)p) and ((bool)p->Cls)))) {
			JB_Msg_SyntaxExpect(C, JB_LUB[1081]);
			return nil;
		}
		self->ContainsParentClass = true;
		return p->Cls;
	}
	SCClass* cls = SC_Base_FindClassMsg(m, C, kSC__SCNodeFindMode_WantAType);
	if (cls) {
		self->ContainsParentClass = false;
		return cls;
	}
	return nil;
}

SCFunction* SC_Class_FindFunc(SCClass* self, JB_String* keyword, bool CheckParents, bool DoError) {
	{
		SCClass* b = self;
		while (b) {
			SCObject* o = ((SCObject*)JB_Dict_ValueStr(b->Access, keyword));
			if (o) {
				if (JB_Object_FastIsa(o, &SCFunctionData)) {
					return ((SCFunction*)o);
				}
				if ((!((!SC_Class_IsObject(self)) or (!DoError)))) {
					JB_Msg_SyntaxExpect(b->Source, JB_Str_OperatorPlus(keyword, JB_LUB[187]));
					return nil;
				}
			}
			if ((!CheckParents)) {
				break;
			}
			b = b->Super;
		};
	}
	;
	return nil;
}

SCFunction* SC_Class_FindSpecialFunc(SCClass* self, JB_String* keyword, bool CheckParents) {
	JB_String* _tmPf0 = JB_Incr(JB_Str_LowerCase(keyword));
	SCFunction* _tmPf1 = JB_Incr(SC_Class_FindFunc(self, _tmPf0, CheckParents, true));
	JB_Decr(_tmPf0);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

SCFunction* SC_Class_FirstDestructor(SCClass* self) {
	{
		SCClass* p = self;
		while (p) {
			SCFunction* fn = p->DestructorFunc;
			if ((!fn)) {
				int a = 1;
			}
			 else if (((bool)p->IsWrapper) and ((bool)p->Super)) {
				return fn;
			}
			 else if (SC_Class_HasStuffToHandleInDestructor(p) or JB_Ring_HasChildren(SC_Func_SourceArg(fn))) {
				return fn;
			}
			p = p->Super;
		};
	}
	;
	return nil;
}

void SC_Class_GetDepth(SCClass* self) {
	if ((!self->Depth)) {
		self->Depth = 1;
		{
			SCClass* c = self;
			while (c) {
				self->Depth++;
				c = c->Super;
			};
		};
	}
	Message* msg = self->Defawlt;
	if (((bool)msg) and (SC_Class_IsObject(self) and (!(SC_Msg_OperatorIsThing(msg, JB_LUB[1811]))))) {
		self->DefaultsToReal = true;
		self->TypeNormal->NilDeclared = kSC__NilState_Real;
	}
}

SCClass* SC_Class_GetFlyingMemClassFor(SCClass* self) {
	return SC_Comp__FindClassName(JB_LUB[897]);
}

SCDecl* SC_Class_GetFlyingMemory(SCClass* self, Message* exp) {
	SCObject* Decl = JB_Incr(SC_Base_SyntaxAccess(self->Modul, JB_LUB[1430]));
	if (JB_Object_FastIsa(Decl, &SCDeclData)) {
		if ((!JB_Msg_EqualsSyx(exp, JB_SyxThg, false))) {
			JB_Object_SyntaxExpect(nil);
			JB_Decr(Decl);
			return nil;
		}
		Message* Thg = JB_Incr((JB_Syx_Msg(JB_SyxThg, exp->Name)));
		JB_SetRef(Thg->Obj, Decl);
		JB_Tree_SyntaxAppend(exp, Thg);
		JB_Decr(Thg);
		JB_Msg_BecomeStr(exp, JB_SyxBRel, JB_LUB[242]);
		if ((!((SCDecl*)Decl)->PointerCount)) {
			JB_SetRef(Decl, SC_Decl_GetAddress(((SCDecl*)Decl), kSC__DeclMode_Always));
		}
		JB_SafeDecr(Decl);
		return ((SCDecl*)Decl);
	}
	JB_Decr(Decl);
	return nil;
}

SCIterator* SC_Class_GetIteratorAny(SCClass* self, JB_String* name, Message* node) {
	if ((!(JB_Str_Exists(name)))) {
		name = JB_LUB[818];
	}
	{
		SCClass* c = self;
		while (c) {
			SCObject* R = SC_Base_SyntaxAccess(c, name);
			if (JB_Object_FastIsa(R, &SCIteratorData)) {
				return ((SCIterator*)R);
			}
			c = c->Super;
		};
	}
	;
	SC_Class_Iterfailed(self, name, node);
	return nil;
}

void SC_Class_GetStructDepth(SCClass* self) {
	if (self->StructContainerDepth == -1) {
		SC_SCObject_Fail(self, JB_LUB[1303]);
		return;
	}
	self->StructContainerDepth = -1;
	int r = 0;
	{
		Array* _LoopSrcf2 = self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* p = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (p == nil) {
				break;
			}
			SCClass* t = p->Type;
			if ((SC_Class_IsStruct(t)) and (p->PointerCount == 0)) {
				SC_Class_GetStructDepth(t);
				r = JB_int_OperatorMax(r, t->StructContainerDepth + 1);
			}
			_if0++;
		};
	}
	;
	self->StructContainerDepth = r;
}

SCClass* SC_Class_GoUpTo(SCClass* self, int d) {
	SCClass* s = self;
	while (((bool)s) and (s->Depth > d)) {
		s = s->Super;
	};
	return s;
}

bool SC_Class_HasGameType(SCClass* self) {
	return (self->TypeInfo != kJB__TC_UnusedType);
}

bool SC_Class_HasObjectProperties(SCClass* self) {
	{
		Array* _LoopSrcf2 = self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* p = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (p == nil) {
				break;
			}
			if (SC_Decl_IsNormalObject(p)) {
				return true;
			}
			_if0++;
		};
	}
	;
	return false;
}

bool SC_Class_HasOperator(SCClass* self, JB_String* op) {
	SCObject* obj = SC_Base_SyntaxAccess(self, op);
	if (JB_Object_FastIsa(obj, &SCFunctionData)) {
		return true;
	}
	return false;
}

bool SC_Class_HasStuffToHandleInDestructor(SCClass* self) {
	{
		SCClass* p = self;
		while (p) {
			{
				Array* _LoopSrcf3 = p->Properties;
				int _if1 = 0;
				while (true) {
					SCDecl* d = ((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1));
					if (d == nil) {
						break;
					}
					if (SC_Decl_HasStructDestructor(d)) {
						return true;
					}
					if (SC_Decl_IsReffable(d, true)) {
						return true;
					}
					_if1++;
				};
			}
			;
			p = p->Super;
		};
	}
	;
	return false;
}

SCClass* SC_Class_InterfaceFor(SCClass* self, JB_String* name, Message* errplace) {
	SCModule* Result = nil;
	{
		SCClass* C = self;
		while (C) {
			SCBehaviour* B = C->Behaviour;
			if (B) {
				SCModule* I = ((SCModule*)JB_Dict_ValueStr(B->Interfaces, name));
				if (I) {
					Result = SC_Mod_OneOrOther(Result, I);
				}
			}
			C = C->Super;
		};
	}
	;
	if ((!Result)) {
		JB_Msg_SyntaxExpect(errplace, JB_LUB[1073]);
		return nil;
	}
	return Result->Cls;
}

SCClass* SC_Class_InterfaceForBehaviour(SCClass* self, SCFunction* Fn) {
	JB_String* name = JB_Incr(JB_Str_LowerCase(Fn->Name));
	if (SC_Str_UnderScoreAtAnyEnd(name)) {
		JB_SetRef(name, SC_Str_InterfaceToBehaviour(name));
	}
	if (JB_Str_Last(name, 0) == '0') {
		JB_SetRef(name, JB_Str_Range(name, 0, JB_Str_Length(name) - 1));
	}
	if ((!SC_Str_UnderScoreAtAnyEnd(name))) {
		JB_SetRef(name, JB_Str_Moat(name));
	}
	SCClass* _tmPf0 = JB_Incr(SC_Class_InterfaceFor(self, name, Fn->Source));
	JB_Decr(name);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

bool SC_Class_IsA(SCClass* self, SCClass* S) {
	{
		SCClass* p = self;
		while (p) {
			if (p == S) {
				return true;
			}
			p = p->Super;
		};
	}
	;
	return false;
}

bool SC_Class_IsBehaviourTable(SCClass* self) {
	if ((!self)) {
		return nil;
	}
	return self->IsBehaviour == kSC__Beh_kBehaviourTable;
}

bool SC_Class_IsDataTypeOnly(SCClass* self) {
	return SC_SCNodeType_SyntaxIs(self->BaseType, kSC__SCNodeType_DataType);
}

bool SC_Class_IsDataTypeOrFP(SCClass* self) {
	return SC_SCNodeType_SyntaxIs(self->BaseType, kSC__SCNodeType_DataType) or SC_SCNodeType_SyntaxIs(self->BaseType, kSC__SCNodeType_FuncProto);
}

bool SC_Class_IsFunc(SCClass* self) {
	return ((bool)self->FuncProto);
}

bool SC_Class_IsInterface(SCClass* self) {
	if (self) {
		return ((bool)(self->IsBehaviour & kSC__Beh_kBehaviourProto));
	}
	return false;
}

bool SC_Class_IsMArray(SCClass* self, Message* arr) {
	if ((!arr) or JB_Tree_HasOneChild(arr)) {
		return SC_Class_IsDataTypeOrFP(self) or SC_Class_IsStruct(self);
	}
	return false;
}

bool SC_Class_IsObject(SCClass* self) {
	return ((!SC_Class_IsDataTypeOrFP(self))) and ((!SC_Class_IsStruct(self)));
}

bool SC_Class_IsSaveableObject(SCClass* self) {
	if ((!SC_Class_IsObject(self))) {
		return nil;
	}
	JB_String* S = JB_Incr(self->SaveAs);
	bool _tmPf0 = JB_Str_Exists(S) and ((!JB_Str_Equals(S, JB_LUB[1811], false)));
	JB_Decr(S);
	return _tmPf0;
}

bool SC_Class_IsSaveableStruct(SCClass* self) {
	if ((!SC_Class_IsStruct(self))) {
		return nil;
	}
	return ((JB_Str_Equals(self->SaveAs, JB_LUB[1973], false)));
}

bool SC_Class_IsStruct(SCClass* self) {
	return SC_SCNodeType_SyntaxIs(self->BaseType, kSC__SCNodeType_Struct);
}

bool SC_Class_IsTask(SCClass* self) {
	return ((bool)self) and ((bool)(self->IsRole & 2));
}

void SC_Class_Iterfailed(SCClass* self, JB_String* name, Message* node) {
	if (true) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1074]);
		JB_FS_AppendString(_fsf0, name);
		JB_FS_AppendString(_fsf0, JB_LUB[176]);
		JB_FS_AppendString(_fsf0, self->Name);
		JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
		JB_Msg_SyntaxExpect(node, _tmPf1);
		JB_Decr(_tmPf1);
	}
}

void SC_Class_LoadClassType(SCClass* self) {
	if (SC_Class_IsObject(self)) {
		JB_SetRef(self->ClassType, SC_Class_MakeClassType(self, self->TypeNormal));
	}
}

void SC_Class_LoadConstructors(SCClass* self) {
	SC_Base_Use(self);
	SC__Base_CurrVisibility = false;
	SC_Class_CreateConstructors(self);
	SCClass* s = JB_Incr(self->Super);
	if (s) {
		if ((!(self->NoEarlyFree))) {
			self->NoEarlyFree = s->NoEarlyFree;
		}
	}
	JB_Decr(s);
	JB_ClassData_Restore((&MessageData));
}

void SC_Class_LoadLinkage(SCClass* self) {
	Message* Arg = SC_Base_LinkagePlace(self);
	if ((!Arg)) {
		return;
	}
	self->NoAutoComplete = SC_Msg_DeprecatedClassOption(Arg, JB_LUB[1815], JB_LUB[215]);
	self->NoEarlyFree = ((bool)SC_Msg_DeprecatedClassOption(Arg, JB_LUB[1874], JB_LUB[1084]));
	self->TreatAsBaseType = ((bool)SC_Msg_DeprecatedClassOption(Arg, JB_LUB[1874], JB_LUB[1328]));
	self->MinOpt = SC_Msg_DeprecatedClassOption(Arg, JB_LUB[1853], JB_LUB[1786]);
}

void SC_Class_LoadModuleForCls(SCClass* self, Message* node, SCNode* P) {
	SCModule* M = JB_Incr(self->Modul);
	M->Project = SC__Imp_Curr;
	M->Parent = P;
	JB_SetRef(M->Cls, self);
	JB_SetRef(M->Name, self->Name);
	if (node) {
		SC_MoveFutureStaticsIn(node);
		SC_Mod_LoadModule(M, node);
	}
	 else {
		JB_SetRef(M->Source, self->Source);
	}
	JB_Decr(M);
}

void SC_Class_LoadSaver(SCClass* self) {
	while (true) {
		Message* _tmPf1 = JB_Incr(SC_Base_SourceArg(self));
		Message* Msg = JB_Incr(JB_Msg_FindSyxName(_tmPf1, JB_SyxTmp, JB_LUB[1919], false));
		JB_Decr(_tmPf1);
		if ((!Msg)) {
			JB_Decr(Msg);
			break;
		}
		Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(Msg, JB_SyxThg));
		if ((!_tmPf0)) {
			JB_Decr(_tmPf0);
			JB_Decr(Msg);
			return;
		}
		JB_String* S = JB_Incr(JB_Str_LowerCase(_tmPf0->Name));
		JB_Decr(_tmPf0);
		if ((JB_Str_Equals(S, JB_LUB[1811], false)) or ((JB_Str_Equals(S, JB_LUB[1648], false)) or (JB_Str_Equals(S, JB_LUB[1973], false)))) {
			JB_SetRef(self->SaveAs, S);
		}
		 else if (JB_Str_Equals(S, JB_LUB[1536], false)) {
			self->SavingCanSkip = true;
		}
		 else {
			JB_SetRef(self->SaveAs, S);
			if ((!JB_FreeIfDead(SC_Comp__SyntaxAccess(Msg)))) {
				JB_Decr(S);
				JB_Decr(Msg);
				return;
			}
		}
		JB_Decr(S);
		JB_Tree_Remove(Msg);
		JB_Decr(Msg);
	};
	if ((!(JB_Str_Exists(self->SaveAs)))) {
		JB_SetRef(self->SaveAs, SC_Class_LoadSaverSub(self));
	}
}

JB_String* SC_Class_LoadSaverSub(SCClass* self) {
	if (self == JB_TypeBool) {
		return JB_LUB[1521];
	}
	 else if (SC_Class_NumericCount(self) == 1) {
		if (SC_Class_IsA(self, JB_Typefloat)) {
			return JB_LUB[1658];
		}
		 else if (SC_Class_IsA(self, JB_Typef64)) {
			return JB_LUB[1647];
		}
		 else {
			return JB_LUB[1716];
		}
	}
	 else if ((bool)SC_Class_NumericCount(self)) {
		DataTypeCode d = self->TypeInfo;
		if (JB_TC_IsFloat(d)) {
			if (JB_TC_ItemBitCount(d) == 32) {
				return JB_LUB[1658];
			}
		}
		 else {
			if (JB_TC_ItemBitCount(d) == 32) {
				return JB_LUB[1716];
			}
		}
		return JB_LUB[0];
	}
	 else if (SC_Class_IsObject(self)) {
		if (self == JB_TypeString) {
			return JB_LUB[1969];
		}
		 else if (self == JB_TypeSaveable) {
			return JB_LUB[1837];
		}
	}
	SCClass* s = self->Super;
	if (s) {
		return s->SaveAs;
	}
	return JB_LUB[0];
}

void SC_Class_LoadSuperBehaviours(SCClass* self) {
	SCClass* s = self->Super;
	SCBehaviour* b = self->Behaviour;
	if (b) {
		while (((bool)s) and (!s->Behaviour)) {
			s = s->Super;
		};
		if (s) {
			JB_SetRef(b->FuncTable->Cls->Super, s->Behaviour->FuncTable->Cls);
		}
	}
}

void SC_Class_LoadSuperClass(SCClass* self) {
	SCNode* OldMod = self->Modul->Parent;
	if ((!OldMod)) {
		self->Modul->Parent = SC__Comp_program;
	}
	Message* p = self->Source;
	if ((!p)) {
		return;
	}
	Message* supc = ((Message*)JB_Tree_Second(p));
	SCClass* S = nil;
	if ((!JB_Msg_EqualsSyx(supc, JB_SyxBra, false))) {
		if (supc) {
			if ((!JB_Msg_EqualsSyx(supc, JB_SyxArg, false))) {
				JB_Msg_SyntaxExpect(supc, nil);
				return;
			}
		}
		if ((SC_Class_IsObject(self)) and (self != JB_TypeObject)) {
			S = JB_TypeObject;
		}
	}
	 else {
		Message* thg = JB_Msg_NeedSyx(supc, JB_SyxNil);
		if ((!thg)) {
			return;
		}
		if (JB_Msg_EqualsSyx(thg, JB_SyxSDot, false)) {
			thg->Func = JB_SyxThg;
			S = SC_Base_FindClassMsg(self->Modul, thg, 0);
		}
		 else if ((bool)OldMod) {
			S = SC_Base_FindClassMsg(OldMod, thg, kSC__SCNodeFindMode_WantAType);
		}
		 else {
			S = SC_Comp__SyntaxAccess(thg);
		}
		if ((!S)) {
			0;
		}
		 else if ((bool)(self->FuncProto)) {
			if (true) {
				JB_Msg_SyntaxExpect(supc, JB_LUB[718]);
			}
		}
		 else if (SC_Class_IsDataTypeOnly(self)) {
			if ((!SC_Class_IsDataTypeOnly(S))) {
				JB_Msg_SyntaxExpect(supc, JB_LUB[811]);
			}
		}
		 else if (SC_Class_IsStruct(self)) {
			if ((!SC_Class_IsStruct(S))) {
				JB_Msg_SyntaxExpect(supc, JB_LUB[1244]);
			}
		}
		 else {
			if ((!SC_Class_IsObject(S))) {
				JB_Msg_SyntaxExpect(supc, JB_LUB[765]);
			}
		}
	}
	if (S) {
		JB_SetRef(self->Super, S);
		if (SC__Options_ListAllLib) {
			JB_Array_SyntaxAppend(S->Children, self);
		}
		if ((!self->IsRole)) {
			S->HasSubClass = true;
		}
		 else if ((!OldMod)) {
			self->Modul->Parent = S->Modul;
		}
		self->Parent = S;
	}
}

SCDecl* SC_Class_MakeClassType(SCClass* self, SCDecl* d) {
	SCDecl* c = SC_Decl_Constructor(nil, JB_TypeJBClass);
	(SC_Decl_NameSet(c, JB_Str_LowerCase(self->Name)));
	JB_SetRef(c->Source, self->Source);
	c->PointerCount = 1;
	(SC_Decl_SyntaxIsSet(c, kSC__SCDeclInfo_ClassObj, true));
	c->NilDeclared = kSC__NilState_Real;
	JB_SetRef(c->Contains, d);
	return c;
}

void SC_Class_ModelDecls(SCClass* self) {
	SCClass* M = JB_Incr(SC_Class_GetFlyingMemClassFor(self));
	if (M) {
		SC_Class_NewDeclInClassModule(self, JB_LUB[1430], M);
	}
	JB_Decr(M);
}

void SC_Class_NeedsDefaultValue(SCClass* self, Message* def, Message** place, JB_String* name) {
	if ((*place)) {
		return;
	}
	if (SC_Class_IsObject(self) and (!self->IsRole)) {
		if (((bool)def) and (!(SC_Msg_OperatorIsThing(def, JB_LUB[1811])))) {
			if (true) {
				JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[201], self->Name));
				JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(name, _tmPf2));
				JB_Decr(_tmPf2);
				JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1012], _tmPf1));
				JB_Decr(_tmPf1);
				SC_SCObject_Fail(self, _tmPf0);
				JB_Decr(_tmPf0);
			}
		}
	}
	JB_SetRef((*place), def);
}

bool SC_Class_NeedsExport(SCClass* self) {
	return SC_Base_NeedsExport(self) or SC_Class_IsBehaviourTable(self);
}

void SC_Class_NewDeclInClassModule(SCClass* self, JB_String* S, SCClass* T) {
	SCDecl* Dcl = JB_Incr(SC_Decl_Constructor(nil, T));
	(SC_Decl_NameSet(Dcl, S));
	SC_Base_TryAdd(self->Modul, self->IsModel, Dcl, S);
	JB_Decr(Dcl);
}

SCDecl* SC_Class_NotConst(SCClass* self) {
	if ((!self)) {
		return nil;
	}
	SCDecl* d = self->_NotConst;
	if (d) {
		return d;
	}
	d = self->TypeNormal;
	if (SC_Decl_SyntaxIs(d, kSC__SCDeclInfo_DataOnlyConst)) {
		d = SC_Decl_CopyDecl(d, false);
		(SC_Decl_SyntaxIsSet(d, kSC__SCDeclInfo_DataOnlyConst, (!true)));
	}
	JB_SetRef(self->_NotConst, d);
	return d;
}

int SC_Class_NumericCount(SCClass* self) {
	if (self) {
		return JB_TC_NumericCount(self->TypeInfo);
	}
	return 0;
}

void SC_Class_OverrideSyntax(SCClass* self) {
	if ((!JB_Rec_OK(JB_StdErr))) {
		return;
	}
	SCFunction* cast = JB_Incr(SC_Class_FindSpecialFunc(self, JB_LUB[1253], false));
	JB_SetRef(self->Casts, JB_Array_Constructor0(nil));
	if ((!SC_Class_IsStruct(self))) {
		self->HasNilChecker = true;
	}
	{
		SCFunction* f = JB_Incr(cast);
		while (f) {
			f->IsInline = true;
			if ((!JB_Array_SyntaxEquals(f->Args, 1, false))) {
				JB_Msg_SyntaxExpect(f->Source, JB_LUB[1080]);
			}
			SCDecl* ret = JB_Incr(f->ReturnType);
			if ((!ret)) {
				JB_Msg_SyntaxExpect(f->Source, JB_LUB[1049]);
				JB_Decr(ret);
				JB_Decr(f);
				JB_Decr(cast);
				return;
			}
			SC_Func_DontWantSameReturnType(f->NextFunc, f);
			JB_Array_SyntaxAppend(self->Casts, f);
			if (SC_Decl_IsNormalBool(ret)) {
				bool OK = (!f->IsDisabled);
				if (OK) {
					SCDecl* _tmPf1 = JB_Incr(((SCDecl*)JB_Array_First(f->Args)));
					_tmPf1->NilDeclared = kSC__NilState_Optional;
					JB_Decr(_tmPf1);
				}
				Message* _tmPf2 = JB_Incr(SC_Func_SourceArg(f));
				int Mode = SC_Msg_NilCheckMode(_tmPf2, OK);
				JB_Decr(_tmPf2);
				f->IsNilChecker = Mode;
				self->HasNilChecker = true;
			}
			JB_Decr(ret);
			JB_SetRef(f, f->NextFunc);
		};
		JB_Decr(f);
	}
	;
	JB_Decr(cast);
	self->HasCompareFunc = ((bool)JB_FreeIfDead(SC_Class_FindSpecialFunc(self, JB_LUB[1254], true)));
	self->HasEqualsFunc = ((bool)JB_FreeIfDead(SC_Class_FindSpecialFunc(self, JB_LUB[1257], true)));
	JB_SetRef(self->TheIsFunc, SC_Class_FindSpecialFunc(self, JB_LUB[1258], true));
}

int SC_Class_PassableCount(SCClass* self) {
	int rz = 0;
	{
		Array* _LoopSrcf2 = self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* p = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (p == nil) {
				break;
			}
			rz = (rz + (!SC_Decl_IsCArray(p)));
			_if0++;
		};
	}
	;
	return rz;
}

void SC_Class_ProcessBehaviours(SCClass* self) {
	SCBehaviour* B = JB_Incr(self->Behaviour);
	if ((!B)) {
		JB_Decr(B);
		return;
	}
	SCModule* Table = JB_Incr(B->FuncTable);
	if ((!Table)) {
		JB_Decr(Table);
		JB_Decr(B);
		return;
	}
	SCClass* TableCls = JB_Incr(Table->Cls);
	JB_Decr(Table);
	if ((!TableCls)) {
		JB_Decr(TableCls);
		JB_Decr(B);
		return;
	}
	{
		DictionaryReader* _FnListf0 = JB_Incr(JB_Dict_Navigate(B->Access));
		while (true) {
			SCObject* _valuef1 = JB_Incr(((SCObject*)JB_DictionaryReader_NextValue(_FnListf0)));
			if ((!_valuef1)) {
				JB_Decr(_valuef1);
				break;
			}
			SCFunction* fn = JB_Incr(((SCFunction*)_valuef1));
			JB_Decr(_valuef1);
			SC_Class_FillInterFaceIn(self, fn, false);
			JB_Decr(fn);
		};
		JB_Decr(_FnListf0);
	}
	;
	{
		Array* _LoopSrcf5 = JB_Incr(B->WrapperFuncs);
		int _if3 = 0;
		while (true) {
			SCFunction* W = JB_Incr(((SCFunction*)JB_Array_Value(_LoopSrcf5, _if3)));
			if (W == nil) {
				JB_Decr(W);
				break;
			}
			SC_Class_FillInterFaceWrapper(self, W);
			JB_Decr(W);
			_if3++;
		};
		JB_Decr(_LoopSrcf5);
	}
	;
	{
		Dictionary* _LoopSrcf8 = JB_Incr(B->Interfaces);
		DictionaryReader* _navf6 = JB_Incr(JB_Dict_Navigate(_LoopSrcf8));
		JB_Decr(_LoopSrcf8);
		while (true) {
			SCModule* interface = JB_Incr(((SCModule*)JB_DictionaryReader_NextValue(_navf6)));
			if (interface == nil) {
				JB_Decr(interface);
				break;
			}
			SC_Mod_AddInterfaceToTable(interface, TableCls);
			JB_Decr(interface);
		};
		JB_Decr(_navf6);
	}
	;
	JB_Decr(B);
	JB_Decr(TableCls);
}

void SC_Class_ProcessInterfaces(SCClass* self) {
	if ((!SC_Class_IsInterface(self))) {
		return;
	}
	SCFunction* fn = JB_Incr(self->FuncProto);
	if ((!fn)) {
		JB_Decr(fn);
		return;
	}
	SCNode* L = JB_Incr(fn->Parent);
	if (JB_Object_FastIsa(L, &SCModuleData)) {
		SCClass* cls = JB_Incr(((SCModule*)L)->Cls);
		if (cls) {
			SC_Func_AddSelfPrm(fn, cls);
		}
		JB_Decr(cls);
	}
	JB_Decr(fn);
	JB_Decr(L);
}

void SC_Class_Reach(SCClass* self, SCNode* from, Message* src) {
	//;
	if (self->MyReacher) {
		return;
	}
	self->MyReacher = from;
	SC__Comp_stReachedClass++;
	if (SC__Options_BannedClasses) {
		SC_Class_BannedCheck(self, src);
	}
	SCClass* s = self->Super;
	if (s) {
		SC_Class_Reach(s, self, nil);
	}
	SCBehaviour* b = self->Behaviour;
	if (b) {
		SC_Class_Reach(b->FuncTable->Cls, self, nil);
	}
	SCFunction* df = self->DestructorFunc;
	if (df) {
		SC_Func_FindReached(df, self);
	}
	{
		Array* _LoopSrcf2 = self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* d = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (d == nil) {
				break;
			}
			SC_Decl_TypeReach(d, self, d->Source);
			SC_Decl_TypeReach(d->Contains, self, d->Source);
			_if0++;
		};
	};
}

void SC_Class_ReachBehaviours(SCClass* self) {
	//;
	{
		Dictionary* _LoopSrcf2 = JB_Incr(self->Access);
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf2));
		JB_Decr(_LoopSrcf2);
		while (true) {
			SCObject* f = JB_Incr(((SCObject*)JB_DictionaryReader_NextValue(_navf0)));
			if (f == nil) {
				JB_Decr(f);
				break;
			}
			if (JB_Object_FastIsa(f, &SCFunctionData)) {
				if (SC_Func_IsBehaviour(((SCFunction*)f))) {
					SC_Func_FindReached(((SCFunction*)f), self);
				}
			}
			JB_Decr(f);
		};
		JB_Decr(_navf0);
	};
}

bool SC_Class_Real_Isa(SCClass* self, SCClass* cls) {
	return SC_Class_IsA(SC_Class_RealClass(self), cls);
}

bool SC_Class_Real_Isa2(SCClass* self, SCClass* cls) {
	return SC_Class_IsA(SC_Class_RealClass(self), SC_Class_RealClass(cls));
}

SCClass* SC_Class_RealClass(SCClass* self) {
	SCClass* s = self;
	while (((bool)s) and ((bool)s->IsRole)) {
		s = s->Super;
	};
	return s;
}

SCClass* SC_Class_RealSuper(SCClass* self) {
	SCClass* s = self->Super;
	if (s) {
		return SC_Class_RealClass(s);
	}
	return nil;
}

void SC_Class_RenameInterfaces(SCClass* self) {
	SCBehaviour* b = JB_Incr(self->Behaviour);
	if ((!b)) {
		JB_Decr(b);
		return;
	}
	{
		Dictionary* _LoopSrcf2 = JB_Incr(b->Interfaces);
		DictionaryReader* _navf0 = JB_Incr(JB_Dict_Navigate(_LoopSrcf2));
		JB_Decr(_LoopSrcf2);
		while (true) {
			SCModule* f = JB_Incr(((SCModule*)JB_DictionaryReader_NextValue(_navf0)));
			if (f == nil) {
				JB_Decr(f);
				break;
			}
			SCClass* it = JB_Incr(f->Cls);
			JB_Decr(f);
			if (it) {
				JB_SetRef(it->Name, JB_Str_OperatorPlus(it->CppClass, it->Name));
			}
			JB_Decr(it);
		};
		JB_Decr(_navf0);
	}
	;
	JB_Decr(b);
}

JB_String* SC_Class_Render(SCClass* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FreeIfDead(SC_Named_Render(self, fs));
	if (SC_Class_IsStruct(self)) {
		JB_FS_AppendString(fs, JB_LUB[198]);
	}
	if (SC_Class_NumericCount(self)) {
		JB_FS_AppendString(fs, JB_LUB[192]);
	}
	if (self->FuncProto) {
		JB_FS_AppendString(fs, JB_LUB[194]);
	}
	 else if (SC_Class_IsDataTypeOnly(self)) {
		JB_FS_AppendString(fs, JB_LUB[172]);
	}
	if (self->IsModel) {
		JB_FS_AppendString(fs, JB_LUB[190]);
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

void SC_Class_RenderSaveable(SCClass* self, FastString* fs) {
	JB_FS_AppendByte(fs, '"');
	SC_Class_RenderSaveableSub(self, fs);
	JB_FS_RemoveByte(fs, ' ');
	JB_FS_RemoveByte(fs, ',');
	JB_FS_AppendByte(fs, '"');
}

bool SC_Class_RenderSaveableSub(SCClass* self, FastString* fs) {
	SCClass* s = JB_Incr(self->Super);
	if (s) {
		if ((!(SC_Class_RenderSaveableSub(s, fs) or true))) {
			JB_Decr(s);
			return nil;
		}
	}
	{
		Array* _LoopSrcf2 = JB_Incr(self->Properties);
		int _if0 = 0;
		while (true) {
			SCDecl* p = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (p == nil) {
				JB_Decr(p);
				break;
			}
			JB_String* ST = JB_Incr(SC_Decl_IsSaveable(p));
			if (JB_Str_Exists(ST) and (!JB_Str_Equals(ST, JB_LUB[1811], false))) {
				if (JB_Str_Equals(ST, JB_LUB[1973], false)) {
					JB_SetRef(ST, p->Type->Name);
				}
				JB_FS_AppendByte(fs, '|');
				JB_FS_AppendString(fs, ST);
				JB_FS_AppendByte(fs, '|');
				JB_FS_AppendByte(fs, ' ');
				JB_FS_AppendString(fs, p->Name);
				JB_FS_AppendByte(fs, ',');
				JB_FS_AppendByte(fs, ' ');
			}
			JB_Decr(p);
			JB_Decr(ST);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
		JB_Decr(s);
	}
	;
	return true;
}

void SC_Class_StartupSaver(SCClass* self, JB_String* Name) {
	FastString* dest = JB_Incr(JB_FS_Constructor(nil));
	bool IsStruct = ((JB_Str_Equals(self->SaveAs, JB_LUB[1973], false)));
	bool IsSave = (JB_Str_ContainsString(Name, JB_LUB[1205]));
	MessagePosition Using = JB_Msg_SyntaxUsing(self->Source);
	if (IsStruct) {
		JB_FS_AppendString(dest, JB_LUB[1675]);
	}
	 else {
		JB_FS_AppendString(dest, JB_LUB[1514]);
	}
	JB_FS_AppendString(dest, Name);
	if (IsStruct) {
		if (IsSave) {
			JB_FS_AppendString(dest, JB_LUB[132]);
		}
		 else {
			JB_FS_AppendString(dest, JB_LUB[131]);
		}
	}
	JB_FS_AppendString(dest, JB_LUB[206]);
	if (IsStruct) {
		JB_FS_AppendString(dest, JB_LUB[2038]);
	}
	 else if (self->Super != JB_TypeSaveable) {
		JB_FS_AppendString(dest, JB_LUB[41]);
		JB_FS_AppendString(dest, Name);
		JB_FS_AppendByte(dest, '(');
		if (IsSave) {
			JB_FS_AppendString(dest, JB_LUB[1920]);
		}
		 else {
			JB_FS_AppendString(dest, JB_LUB[1762]);
		}
		JB_FS_AppendByte(dest, ')');
	}
	JB_FS_AppendString(dest, JB_LUB[84]);
	JB_String* str = JB_Incr(JB_FS_GetResult(dest));
	JB_Decr(dest);
	Message* src = JB_Incr(JB_Str_Parse(str, JB_SyxArg, true));
	JB_Decr(str);
	SCNode* fn = JB_Incr(SC_Base_CollectSub(self, src));
	if (JB_Object_FastIsa(fn, &SCFunctionData)) {
		((SCFunction*)fn)->AutoGeneratedSaver = true;
		self->AutoGeneratedSavers = true;
	}
	JB_Decr(fn);
	JB_Decr(src);
	JB_MsgPos_Destructor((&Using));
}

JB_String* SC_Class_StructName(SCClass* self) {
	if (SC_Class_IsDataTypeOrFP(self)) {
		return self->Name;
	}
	JB_String* _tmPf0 = JB_Incr(SC_Base_SubProjName(self));
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1426], self->Name));
	JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(_tmPf0, _tmPf1));
	JB_Decr(_tmPf0);
	JB_Decr(_tmPf1);
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

bool SC_Class_EqualsType(SCClass* self, SCNodeType d, bool aware) {
	if (((bool)self) and (d > kSC__SCNodeType_Nil)) {
		return self->BaseType == d;
	}
	return false;
}

void SC_Class_TaskProperties(SCClass* self) {
	{
		Array* _LoopSrcf2 = self->Properties;
		int _if0 = 0;
		while (true) {
			SCDecl* p = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (p == nil) {
				break;
			}
			int i = _if0;
			(SC_Decl_SyntaxIsSet(p, kSC__SCDeclInfo_Task, true));
			_if0++;
		};
	};
}

bool SC_Class_TestBanned(SCClass* self) {
	return SC_Comp__Banned(self->Name);
}

void SC_Class_TryAddToProject(SCClass* self) {
	if (self->FuncProto) {
		return;
	}
	Message* NameNode = ((Message*)JB_Ring_First(self->Source));
	SCModule* mod = SC__Comp_DisamClasses;
	if (JB_Msg_EqualsSyx(NameNode, JB_SyxDot, false)) {
		mod = SC_Comp__FindModuleMsg(((Message*)JB_Ring_First(NameNode)), 0);
		if ((!mod)) {
			return;
		}
	}
	 else {
		if ((JB_Str_Equals(self->Name, JB_LUB[1726], false)) and JB_Object_FastIsa(self, &SCClassData)) {
			if (((SCClass*)self)->IsRole == 1) {
				return;
			}
		}
	}
	SC_Base_TryAdd(mod, SC_Base_SourceArg(self), self->Modul, self->Name);
}

void SC_Class_WriteStructOrUnion(SCClass* self, FastStringCpp* fs) {
	if (self->IsWrapper == 2) {
		JB_FS_AppendString(fs, JB_LUB[83]);
	}
	 else {
		JB_FS_AppendString(fs, JB_LUB[81]);
	}
}

SCNode* SC_Class__DataType(Message* node, SCNode* name_space, Message* ErrPlace) {
	return SC_Class__DataTypeSub(node, name_space, ErrPlace, JB_LUB[0], kSC__SCNodeType_DataType);
}

SCModule* SC_Class__DataTypeSub(Message* Node, SCNode* Parent, Message* ErrPlace, JB_String* ForInterface, SCNodeType BaseType) {
	if (Node->Obj) {
		return SC__Comp_program;
	}
	SC__Base_CurrVisibility = false;
	JB_FreeIfDead(JB_Msg_GiveArg(Node));
	SCClass* it = JB_Incr(SC_Class__NeuClassSub(Node, Parent, ErrPlace, ForInterface, BaseType));
	if (it) {
		SC_Class_ClassCollect(it);
		if ((JB_Array_SyntaxCast(it->Properties))) {
			JB_Msg_SyntaxExpect(it->Source, JB_LUB[812]);
			JB_Decr(it);
			return nil;
		}
		SCModule* m = JB_Incr(it->Modul);
		JB_SetRef(Node->Obj, m);
		JB_Decr(it);
		JB_SafeDecr(m);
		return m;
	}
	JB_Decr(it);
	return nil;
}

SCNode* SC_Class__ExtendOneFunc(Message* node, SCNode* name_space, Message* ErrPlace) {
	JB_Tree_SyntaxAppend(SC__Comp_ExtendList, node);
	JB_SetRef(node->Obj, SC__Imp_Curr);
	Message* dot = JB_Incr(((Message*)JB_Ring_First(node)));
	Message* name = JB_Incr(((Message*)JB_Ring_First(dot)));
	JB_Decr(dot);
	if ((!((JB_Msg_EqualsSyx(name, JB_SyxThg, false)) or ((JB_Msg_EqualsSyx(name, JB_SyxName, false)) or (JB_Msg_EqualsSyx(name, JB_SyxBra, false)))))) {
		JB_Msg_SyntaxExpect(name, nil);
	}
	Message* emb = JB_Incr(((Message*)JB_Ring_NextSib(name)));
	JB_Decr(name);
	if (emb) {
		if (JB_Msg_EqualsSyx(emb, JB_SyxPrm, false)) {
			JB_Msg_SyntaxExpect(emb, JB_LUB[1052]);
		}
		JB_Tree_Remove(emb);
	}
	JB_Decr(emb);
	return SC__Comp_program;
}

SCNode* SC_Class__GetDefault(Message* node, SCNode* name_space, Message* ErrPlace) {
	SCClass* cls = JB_Incr(((SCClass*)JB_Object_FastAs(name_space, &SCClassData)));
	if (cls) {
		JB_SetRef(cls->Defawlt, JB_Msg_NeedFirst(node));
	}
	JB_Decr(cls);
	return nil;
}

SCNode* SC_Class__GetFalse(Message* node, SCNode* name_space, Message* ErrPlace) {
	if (JB_Object_FastIsa(name_space, &SCClassData)) {
		JB_SetRef(((SCClass*)name_space)->False, JB_Msg_NeedFirst(node));
	}
	return nil;
}

JB_String* SC_Class__LoadClassName(Message* node) {
	Message* S = JB_Incr(((Message*)JB_Ring_First(node)));
	if ((JB_Msg_EqualsSyx(S, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(S, JB_SyxDot, false))) {
		JB_String* _tmPf0 = JB_Incr(S->Name);
		JB_Decr(S);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(S);
	if (SC_Msg_OperatorIsTmp(node, JB_LUB[1545])) {
		if (true) {
			JB_Msg_SyntaxExpect(node, JB_LUB[701]);
		}
	}
	return JB_LUB[0];
}

SCNode* SC_Class__LoadSyntax(Message* node, SCNode* name_space, Message* ErrPlace) {
	JB_String* name = JB_Incr(JB_Str_UpperFirst(node->Name));
	Message* AlreadyName = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	if ((!AlreadyName)) {
		JB_Decr(AlreadyName);
		JB_Decr(name);
		return nil;
	}
	JB_SetRef(node->Name, JB_LUB[1674]);
	JB_String* _tmPf0 = JB_Incr(JB_Str_UpperFirst(AlreadyName->Name));
	JB_SetRef(AlreadyName->Name, JB_Str_OperatorPlus(name, _tmPf0));
	JB_Decr(name);
	JB_Decr(AlreadyName);
	JB_Decr(_tmPf0);
	return SC_Func__NewFunc(node, name_space, ErrPlace);
}

SCNode* SC_Class__NeuClass(Message* node, SCNode* name_space, Message* ErrPlace) {
	SCNode* rz = nil;
	SCClass* cls = JB_Incr(SC_Class__NeuClassSub(node, name_space, ErrPlace, JB_LUB[0], kSC__SCNodeType_Object));
	if (cls) {
		SC_Class_ClassCollect(cls);
		JB_SetRef(rz, cls->Modul);
	}
	JB_Decr(cls);
	JB_SafeDecr(rz);
	return rz;
}

SCClass* SC_Class__NeuClassSub(Message* node, SCNode* parent, Message* ErrPlace, JB_String* ForInterface, SCNodeType base) {
	if ((!JB_Str_Exists(ForInterface))) {
		if ((!SC_Base_ExpectModule(parent, ErrPlace))) {
			return nil;
		}
	}
	Message* arg = JB_Incr(JB_Msg_GiveArg(node));
	SCModule* _tmPf1 = JB_Incr(SC_Mod_Constructor(nil));
	SCClass* cls = JB_Incr(SC_Class_Constructor(nil, node, parent, SC_SCNodeType_HasPtrs(base), _tmPf1));
	JB_Decr(_tmPf1);
	cls->BaseType = base;
	cls->IsRole = (((MaybeBool)JB_Msg_SyntaxEquals(node, JB_LUB[1903], true)));
	Message* SA = JB_Incr(SC_Base_SourceArg(cls));
	JB_Decr(SA);
	SC_Class_LoadLinkage(cls);
	JB_Array_SyntaxAppend(SC__Comp_ClassList, cls);
	Message* Module = JB_Incr(JB_Msg_FindSyxName(arg, JB_SyxTmp, JB_LUB[1799], false));
	JB_Decr(arg);
	SC_Class_LoadModuleForCls(cls, Module, parent);
	JB_Decr(Module);
	if (JB_Str_Exists(ForInterface) and JB_Object_FastIsa(parent, &SCModuleData)) {
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1440]);
		JB_String* _tmPf2 = JB_Incr(SC_Str_UnicodeSafeName(((SCModule*)parent)->Cls->Name, nil));
		JB_FS_AppendString(_fsf0, _tmPf2);
		JB_Decr(_tmPf2);
		JB_FS_AppendByte(_fsf0, '_');
		JB_String* _tmPf3 = JB_Incr(SC_Str_UnicodeSafeName(ForInterface, nil));
		JB_FS_AppendString(_fsf0, _tmPf3);
		JB_Decr(_tmPf3);
		JB_FS_AppendString(_fsf0, JB_LUB[1440]);
		JB_SetRef(cls->CppClass, JB_FS_GetResult(_fsf0));
		JB_Decr(_fsf0);
	}
	JB_SafeDecr(cls);
	return cls;
}

SCNode* SC_Class__NeuRole(Message* node, SCNode* name_space, Message* ErrPlace) {
	SCModule* mod = JB_Incr(((SCModule*)SC_Class__NeuClass(node, name_space, ErrPlace)));
	if ((!mod)) {
		JB_Decr(mod);
		return nil;
	}
	SCClass* cls = JB_Incr(mod->Cls);
	if ((!cls)) {
		JB_Decr(cls);
		JB_Decr(mod);
		return nil;
	}
	cls->IsRole = ((MaybeBool)true);
	if ((!(JB_Array_SyntaxCast(cls->Properties)))) {
		JB_Decr(cls);
		JB_SafeDecr(mod);
		return mod;
	}
	JB_Decr(mod);
	JB_Decr(cls);
	return nil;
}

SCNode* SC_Class__NewInnerClass(Message* node, SCNode* name_space, Message* ErrPlace) {
	if (JB_Object_FastIsa(name_space, &SCClassData)) {
		return SC_Class__NeuClass(node, ((SCClass*)name_space)->Modul, ErrPlace);
	}
	return nil;
}

SCNode* SC_Class__NewStruct(Message* node, SCNode* name_space, Message* ErrPlace) {
	SCClass* it = JB_Incr(SC_Class__NeuClassSub(node, name_space, ErrPlace, JB_LUB[0], kSC__SCNodeType_Struct));
	if (it) {
		it->BaseType = kSC__SCNodeType_Struct;
		SC_Class_ClassCollect(it);
		SCModule* _tmPf0 = JB_Incr(it->Modul);
		JB_Decr(it);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(it);
	return nil;
}

SCNode* SC_Class__ProcessAs(Message* node, SCNode* name_space, Message* ErrPlace) {
	Message* Name = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	if ((!Name)) {
		JB_Decr(Name);
		return nil;
	}
	SCClass* Cls = JB_Incr(SC_Comp__SyntaxAccess(Name));
	JB_Decr(Name);
	if ((!Cls)) {
		JB_Decr(Cls);
		return nil;
	}
	if (JB_Object_MustBe(name_space, &SCClassData, node)) {
		JB_SetRef(((SCClass*)name_space)->ProcessAs, Cls);
	}
	JB_Decr(Cls);
	return SC__Comp_program;
}

SCFunction* SC_Class__ProcessExtend(Message* c, bool PreferClass, SCModule* m) {
	JB_Incr(m);
	if ((JB_Msg_EqualsSyx(c, JB_SyxTmp, false)) and ((JB_Msg_SyntaxEquals(c, JB_LUB[1643], false)) or (JB_Msg_SyntaxEquals(c, JB_LUB[1641], false)))) {
		SC_Class__ProcessExtendOld(c, PreferClass);
		JB_Decr(m);
		return nil;
	}
	Message* dot = JB_Incr(JB_Msg_NeedSyx(c, JB_SyxDot));
	if ((!dot)) {
		JB_Decr(m);
		JB_Decr(dot);
		return nil;
	}
	Message* name = JB_Incr(JB_Msg_NeedSyx(dot, JB_SyxNil));
	if ((!name)) {
		JB_Decr(m);
		JB_Decr(name);
		JB_Decr(dot);
		return nil;
	}
	if ((!((JB_Msg_EqualsSyx(name, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(name, JB_SyxName, false))))) {
		JB_Msg_SyntaxExpect(name, nil);
		JB_Decr(m);
		JB_Decr(name);
		JB_Decr(dot);
		return nil;
	}
	if ((!(m))) {
		JB_SetRef(m, SC_Comp__FindModuleMsg(name, 0));
	}
	if ((!m)) {
		JB_Decr(m);
		JB_Decr(name);
		JB_Decr(dot);
		return nil;
	}
	JB_Tree_Clear(dot);
	dot->Func = JB_SyxThg;
	JB_Decr(dot);
	SCNode* B = JB_Incr(m);
	if (JB_Msg_EqualsSyx(name, JB_SyxName, false)) {
		PreferClass = false;
	}
	SCClass* mcls = JB_Incr(m->Cls);
	JB_Decr(m);
	if (PreferClass and ((bool)mcls)) {
		JB_SetRef(B, mcls);
	}
	JB_Decr(mcls);
	name->Func = JB_SyxThg;
	JB_Decr(name);
	SCImport* imp = JB_Incr(((SCImport*)JB_Object_FastAs(c->Obj, &SCImportData)));
	if (imp) {
		SC_Imp_Use(imp);
	}
	 else {
		SC_Imp_Use(B->Project);
	}
	JB_Decr(imp);
	SCFunction* fn = JB_Incr(SC_Func__NewFuncSub(c, B));
	SC_Func_TryAdd(fn, B);
	JB_Decr(B);
	JB_SafeDecr(fn);
	return fn;
}

void SC_Class__ProcessExtendOld(Message* c, bool PreferClass) {
	Message* name = JB_Incr(JB_Msg_NeedSyx(c, JB_SyxThg));
	if (name) {
		Message* arg = JB_Incr(JB_Msg_Last(c, JB_SyxArg));
		SCModule* M = JB_Incr(SC_Comp__FindModuleMsg(name, 0));
		if (((bool)M) and ((bool)arg)) {
			SCNode* B = JB_Incr(M);
			SCClass* cls = JB_Incr(M->Cls);
			if (PreferClass and ((bool)cls)) {
				JB_SetRef(B, cls);
			}
			JB_Decr(cls);
			SCImport* imp = JB_Incr(((SCImport*)JB_Object_FastAs(c->Obj, &SCImportData)));
			if (imp) {
				SC_Imp_Use(imp);
			}
			 else {
				SC_Imp_Use(B->Project);
			}
			JB_Decr(imp);
			Message* _tmPf0 = JB_Incr(SC_Base_SourceArg(M));
			SC_Base_Collect(B, arg, SC__Base_CurrVisibility, _tmPf0);
			JB_Decr(B);
			JB_Decr(_tmPf0);
		}
		JB_Decr(arg);
		JB_Decr(M);
	}
	JB_Decr(name);
}

SCNode* SC_Class__SetSize(Message* node, SCNode* name_space, Message* ErrPlace) {
	if (JB_Object_FastIsa(name_space, &SCClassData)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(node)));
		((SCClass*)name_space)->Size = JB_Msg_Int(_tmPf0, 0);
		JB_Decr(_tmPf0);
	}
	return SC__Comp_program;
}

SCNode* SC_Class__StoreExtend(Message* node, SCNode* name_space, Message* ErrPlace) {
	JB_Tree_SyntaxAppend(SC__Comp_ExtendList, node);
	JB_SetRef(node->Obj, SC__Imp_Curr);
	return SC__Comp_program;
}

SCNode* SC_Class__StoreExtendModule(Message* node, SCNode* name_space, Message* ErrPlace) {
	JB_Array_SyntaxAppend(SC__Comp_ExtendModuleList, node);
	JB_SetRef(node->Obj, SC__Imp_Curr);
	return SC__Comp_program;
}


void SC_Func_AddConstructorReturn(SCFunction* self, Message* prms) {
	SCClass* c = self->Cls;
	if (c) {
		if ((!SC_Class_IsObject(c))) {
			return;
		}
		(SC_Func_SyntaxIsSet(self, kSC__FunctionType_NewNew, true));
		//using;
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(prms);
		Message* dcl = JB_Msg_Msg(prms, JB_SyxDecl, JB_LUB[0]);
		JB_Msg_AppendSyx(JB_Msg_Msg(dcl, JB_SyxARel, JB_LUB[215]), JB_SyxThg, self->Cls->Name);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
}

void SC_Func_AddConstructorReturn2(SCFunction* self) {
	if ((!((!self->IsWrapper) and SC_Func_SyntaxIs(self, kSC__FunctionType_NewNew)))) {
		return;
	}
	Message* args = JB_Incr(JB_Msg_NeedSyxInt(self->Source, JB_SyxArg, 2));
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(self->Source);
	Message* type = JB_Incr(JB_Msg_ConstructorNormal(nil, JB_SyxThg, self->Cls->Name));
	if (SC_Class_IsTask(self->Cls)) {
		Message* _tmPf1 = JB_Incr(JB_Macro_CallFast(SC__Macros_ConstructorNewTask, type, nil));
		(JB_Ring_FirstSet(args, _tmPf1));
		JB_Decr(_tmPf1);
	}
	 else {
		Message* _tmPf2 = JB_Incr(JB_Macro_CallFast(SC__Macros_ConstructorNew, type, nil));
		(JB_Ring_FirstSet(args, _tmPf2));
		JB_Decr(_tmPf2);
	}
	JB_Decr(type);
	Message* _tmPf3 = JB_Incr(JB_Msg_Msg(args, JB_SyxTmp, JB_LUB[1899]));
	JB_Decr(args);
	JB_Msg_AppendSyx(_tmPf3, JB_SyxThg, JB_LUB[1934]);
	JB_Decr(_tmPf3);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_AddSelfPrm(SCFunction* self, SCClass* cls) {
	Message* prms = JB_Incr(JB_Msg_FindSyx(self->Source, JB_SyxPrm));
	Message* name = JB_Incr(((Message*)JB_Ring_First(self->Source)));
	if ((!name)) {
		JB_Msg_SyntaxExpect(self->Source, JB_LUB[1076]);
		JB_Decr(name);
		JB_Decr(prms);
		return;
	}
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(name);
		if ((!prms)) {
			JB_SetRef(prms, (JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			(JB_Ring_NextSibSet(name, prms));
		}
		Message* _tmPf1 = JB_Incr(SC_MakeDecl(cls->Name, JB_LUB[1934], nil, 0));
		(JB_Ring_FirstSet(prms, _tmPf1));
		JB_Decr(_tmPf1);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(prms);
	JB_Decr(name);
}

void SC_Func_AddSelfToFunc(SCFunction* self, SCClass* cls, SCNode* space) {
	SCDecl* sl = cls->SelfDecl;
	if (SC_Decl_TypeSuffers(sl)) {
		sl = SC_Decl_CopyDecl(sl, false);
		if (SC_Func_SyntaxIs(self, kSC__FunctionType_Destructor)) {
			sl = SC_Decl_MakeNewReal(sl);
		}
		 else if ((SC_Func_SyntaxIs(self, kSC__FunctionType_Constructor)) and SC_Class_IsObject(cls)) {
			sl = SC_Decl_MakeNewOptional(sl);
		}
		(SC_Decl_SyntaxIsSet(sl, kSC__SCDeclInfo_SelfImplicit, true));
	}
	SC_Base_TryAdd(space, SC_Base_FuncSrc(space), sl, JB_LUB[1934]);
	JB_Array_SyntaxAppend(self->Args, sl);
}

void SC_Func_AnalyseRefs(SCFunction* self, Array* list) {
	Message* root = JB_Incr(SC_Func_SourceArg(self));
	bool IsConstructor = SC_Func_SyntaxIs(self, kSC__FunctionType_Constructor);
	{
		Message* msg = JB_Incr(root);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(root)));
		while (((bool)(msg)) and (msg != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(msg)));
			int it = SC_Msg_RC_HasTemporary(msg);
			if (it) {
				if (SC_Func_doRefs(self) or (it != kSC__Refs_kBasisObj)) {
					SC_Refs__RC_HandleDisappearing(self, msg, it);
				}
			}
			JB_SetRef(msg, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(msg);
		JB_Decr(_afterf1);
		;
	}
	;
	{
		Message* msg = JB_Incr(((Message*)JB_Ring_First(root)));
		Message* _After_f4 = JB_Incr(((Message*)JB_Ring_FlatAfter(root)));
		while (((bool)msg) and (msg != _After_f4)) {
			Message* _tmPf10 = JB_Incr(((Message*)JB_Ring_Parent(msg)));
			if ((!JB_Msg_EqualsSyx(_tmPf10, JB_SyxArg, false))) {
				JB_SetRef(msg, ((Message*)JB_Ring_FlatNext0(msg)));
				JB_Decr(_tmPf10);
				continue;
			}
			JB_Decr(_tmPf10);
			JB_Array_SyntaxAppend(list, msg);
			JB_SetRef(msg, ((Message*)JB_Ring_FlatNext0(msg)));
		};
		JB_Decr(msg);
		JB_Decr(_After_f4);
	}
	;
	JB_Decr(root);
	if (SC_Func_doRefs(self)) {
		{
			Array* _LoopSrcf7 = JB_Incr(self->Args);
			int _if5 = 0;
			while (true) {
				SCDecl* ar = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf7, _if5)));
				if (ar == nil) {
					JB_Decr(ar);
					break;
				}
				if ((SC_Decl_SyntaxIs(ar, kSC__SCDeclInfo_Altered)) and (SC_Decl_IsNormalObject(ar))) {
					SC_Refs__RC_DeclArg(ar, self);
				}
				JB_Decr(ar);
				_if5++;
			};
			JB_Decr(_LoopSrcf7);
		};
	}
	{
		int _if8 = JB_Array_Size(list) - 1;
		while (true) {
			Message* msg = JB_Incr(((Message*)JB_Array_Value(list, _if8)));
			if (msg == nil) {
				JB_Decr(msg);
				break;
			}
			Syntax f = msg->Func;
			if (f == JB_SyxRel) {
				if (IsConstructor and SC_SettingSelfProperty(msg)) {
					SC_Refs__RC_RelConstructor(msg);
				}
				 else if (SC_Func_doRefs(self) or SC_SettingMemory(msg)) {
					SC_Refs__RC_Rel(msg);
				}
			}
			 else if (f == JB_SyxDot) {
				SC_Refs__RC_IgnoreReturn(msg, SC_Func_doRefs(self));
			}
			 else if (f == JB_SyxFunc) {
				SC_Refs__RC_CheckFuncAllocOK(self, msg);
				SC_Refs__RC_IgnoreReturn(msg, SC_Func_doRefs(self));
			}
			 else if (SC_Msg_IsStatementExpr(msg)) {
				SC_Refs__RC_IgnoreReturn(msg, SC_Func_doRefs(self));
			}
			 else if (f == JB_SyxDecl) {
				SC_Refs__DeclInit(msg, self, false);
			}
			JB_Decr(msg);
			_if8--;
		};
	};
}

int SC_Func_ApparantArgCount(SCFunction* self) {
	int a = JB_Array_Size(self->Args);
	a = (a - ((bool)self->Cls));
	a = (a - (self->IsAssigns));
	return a;
}

SCFunction* SC_Func_ArgsMatch(SCFunction* self, SCDecl* base, SCNode* name_space, SCParamArray* Incoming, int Options) {
	SCFunction* rz = nil;
	if ((!Options)) {
		rz = SC_Func_ArgsMatch1(self, base, name_space, Incoming, 0);
		if ((!rz)) {
			rz = SC_Func_ArgsMatch1(self, base, name_space, Incoming, kJB_kTypeCastAssigns);
		}
	}
	 else {
		JB_FreeIfDead(SC_Func_ArgsMatch1(self, base, name_space, Incoming, kJB_kTypeCastAssigns | Options));
		JB_FreeIfDead(SC_Func_ArgsMatch1(self, base, name_space, Incoming, Options));
		if ((!SC_PA_MadeError(Incoming))) {
			if (true) {
				JB_Msg_SyntaxExpect(Incoming->Exp, JB_Str_OperatorPlus(JB_LUB[1388], SC_Func_RenderTitle(self, true, nil)));
			}
		}
	}
	return rz;
}

SCFunction* SC_Func_ArgsMatch1(SCFunction* self, SCDecl* base, SCNode* name_space, SCParamArray* Incoming, int Cast) {
	SCFunction* f = SC_Func_ArgsMatch2(self, base, kJB_kTypeCastFalse | Cast, name_space, Incoming);
	SCFunction* macro = f;
	if ((!SC_Func_IsReal(f))) {
		f = SC_Func_ArgsMatch2(self, base, kJB_kTypeCastNumbers | Cast, name_space, Incoming);
		if (f) {
			macro = f;
		}
		if ((!SC_Func_IsReal(f))) {
			f = SC_Func_ArgsMatch2(self, base, kJB_kTypeCastTrue | Cast, name_space, Incoming);
		}
	}
	if (SC_Func_IsReal(f) and Incoming->IsAssigns) {
		SC_Msg_AssignsFix(Incoming->Exp, f);
	}
	if (f) {
		return f;
	}
	return macro;
}

SCFunction* SC_Func_ArgsMatch2(SCFunction* self, SCDecl* base, int TypeCast, SCNode* name_space, SCParamArray* Incoming) {
	bool NeedsAlter = false;
	int OldMatch = 0;
	SCFunction* Result = nil;
	SCFunction* Missing = nil;
	{
		SCFunction* f = JB_Incr(self);
		while (f) {
			if (f->IsMacro) {
				JB_SetRef(Missing, f);
				JB_SetRef(f, f->NextFunc);
				continue;
			}
			int Match = SC_Func_ArgsMatch3(f, TypeCast, base, false, name_space, Incoming);
			if (Match) {
				if (Result) {
					SCFunction* CanKeepBetter = JB_Incr(SC_Func_TryKeepBetter(Result, OldMatch, f, Match));
					if ((!CanKeepBetter)) {
						JB_Decr(CanKeepBetter);
						SCFunction* _tmPf2 = JB_Incr(SC_PA_ArgsMatchError(Incoming, TypeCast, f, Result));
						JB_Decr(f);
						JB_Decr(Missing);
						JB_Decr(Result);
						JB_SafeDecr(_tmPf2);
						return _tmPf2;
					}
					JB_SetRef(Result, CanKeepBetter);
					JB_Decr(CanKeepBetter);
				}
				if ((((bool)(Match & kJB_kNeeds))) or (Match == kJB_kUseDefaultParams)) {
					NeedsAlter = ((bool)Match);
				}
				if ((!(Result))) {
					JB_SetRef(Result, f);
				}
				OldMatch = Match;
			}
			JB_SetRef(f, f->NextFunc);
		};
		JB_Decr(f);
	}
	;
	if (NeedsAlter) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(Incoming->Exp)));
		_tmPf1->Func = JB_SyxPrm;
		JB_Decr(_tmPf1);
		SC_Func_ArgsMatch3(Result, TypeCast, base, true, name_space, Incoming);
	}
	if (Result) {
		JB_Decr(Missing);
		JB_SafeDecr(Result);
		return Result;
	}
	JB_Decr(Result);
	JB_SafeDecr(Missing);
	return Missing;
}

int SC_Func_ArgsMatch3(SCFunction* self, int TypeCast, SCDecl* base, bool ThisAlter, SCNode* name_space, SCParamArray* Incoming) {
	if ((self->IsAssigns != 0) != Incoming->IsAssigns) {
		if ((!((((bool)(TypeCast & kJB_kTypeCastAssigns))) and ((!Incoming->IsAssigns))))) {
			return 0;
		}
	}
	int Pos = 0;
	int Result = kJB_kSimpleMatch;
	int SelfCast = SC_PA_IgnoreSelfContain(Incoming);
	TypeCast = (TypeCast | (kJB_kNoBoolTypeCast | kJB_kTypeCastWantSuperDistance));
	if (SC_Func_SyntaxIs(self, kSC__FunctionType_NumberCreator)) {
		TypeCast = (TypeCast | kJB_kTypeCastFromZero);
	}
	int fin = JB_Array_Size(self->Args);
	int fi = ((int)((SC_Func_SyntaxIs(self, kSC__FunctionType_Constructor)) and (!Incoming->AllowSelfToConstructor)));
	JB_DoAt(0);
	while (fi < fin) {
		SCDecl* _tmPf0 = JB_Incr(((SCDecl*)JB_Array_Value(self->Args, fi)));
		SCDecl* FuncArg = JB_Incr(_tmPf0);
		JB_Decr(_tmPf0);
		Message* PArg_Ch = JB_Incr(SC_PA_SyntaxAccess(Incoming, Pos));
		SCDecl* PArg_Type = JB_Incr(SC_TypeOfExpr(PArg_Ch, name_space, nil));
		if (base) {
			JB_SetRef(FuncArg, SC_Decl_ContainedReplace(FuncArg, base, false));
		}
		Message* LArg_ch = JB_Incr(((Message*)JB_Ternary(ThisAlter, PArg_Ch, nil)));
		int Cast = TypeCast | SelfCast;
		if (SC_Msg_IsSmallInt(PArg_Ch, PArg_Type)) {
			Cast = (Cast | kJB_kTypeCastFromZero);
		}
		uint Matched = SC_Decl_TypeMatch(FuncArg, PArg_Type, Cast, LArg_ch);
		JB_Decr(PArg_Type);
		JB_Decr(LArg_ch);
		SelfCast = 0;
		if ((Matched != kJB_kNoMatch) and (!((Matched == kJB_kUseDefaultParams) and ThisAlter))) {
			if (Matched > Result) {
				Result = Matched;
			}
			 else if (((bool)((Matched | Result) & kJB_kNeedsAddressOfButAlsoNeedsSuperMatch))) {
				Result = kJB_kNeedsAddressOfButAlsoNeedsSuperMatch;
			}
			Pos++;
		}
		 else if ((!FuncArg->Default)) {
			if (((bool)(TypeCast & kJB_kTypeCastDescribeErrors))) {
				SC_Func_DescribeParamFail(self, Incoming, fi);
			}
			JB_Decr(PArg_Ch);
			JB_Decr(FuncArg);
			return kJB_kNoMatch;
		}
		 else if (ThisAlter) {
			Message* def = JB_Incr(JB_Msg_Copy(FuncArg->Default, nil));
			Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Last(Incoming->Exp)));
			SC_Msg_InsertBefore(_tmPf1, def, PArg_Ch);
			JB_Decr(_tmPf1);
			JB_FreeIfDead(SC_TypeOfExpr(def, name_space, nil));
			JB_Decr(def);
		}
		 else {
			Result = kJB_kUseDefaultParams;
		}
		JB_Decr(FuncArg);
		JB_Decr(PArg_Ch);
		fi++;
	};
	if (Pos >= Incoming->Size) {
		return Result;
	}
	if ((((bool)(TypeCast & kJB_kTypeCastDescribeErrors))) and (!SC_PA_MadeError(Incoming))) {
		if (true) {
			JB_String* _tmPf3 = JB_Incr(SC_Func_RenderTitle(self, true, nil));
			JB_String* _tmPf2 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1322], _tmPf3));
			JB_Decr(_tmPf3);
			JB_Msg_SyntaxExpect(Incoming->Exp, _tmPf2);
			JB_Decr(_tmPf2);
		}
		if (true) {
			JB_Msg_SyntaxExpect(self->Source, JB_LUB[891]);
		}
	}
	return 0;
}

bool SC_Func_Borked(SCFunction* self) {
	return ((bool)(self->Badness & 128));
}

void SC_Func_BuildConstructorDestructor(SCFunction* self) {
	Message* TheCall = SC_Func_FindCallParents(self);
	bool IsConstructor = SC_Func_SyntaxIs(self, kSC__FunctionType_Constructor);
	Message* root = SC_Func_SourceArg(self);
	SC_Func_CheckConstructorAndDestructor(self, root, IsConstructor);
	if (IsConstructor) {
		if ((!TheCall)) {
			TheCall = ((Message*)JB_Ring_First(root));
		}
		SC_Func_FillInMissingConstructorDefaults(self, root, TheCall);
	}
	if ((!(JB_Rec_OK(JB_StdErr) and (!IsConstructor)))) {
		return;
	}
	SCClass* c = self->Cls;
	if ((!SC_Class_HasStuffToHandleInDestructor(c))) {
		if ((!JB_Ring_HasChildren(root))) {
			JB_SetRef(c->DestructorFunc, nil);
		}
	}
	 else if ((!c->IsWrapper)) {
		SC_Func_FillInDestructor(self);
	}
}

void SC_Func_CallParents(SCFunction* self) {
	if ((!(SC_Func_SyntaxIs(self, kSC__FunctionType_Constructor) or SC_Func_SyntaxIs(self, kSC__FunctionType_Destructor)))) {
		return;
	}
	if ((!(SC_Func_IsARealSpdFunc(self) and (!SC_Func_FindCallParents(self))))) {
		return;
	}
	SCClass* c = self->Cls;
	if ((!c)) {
		return;
	}
	SCClass* parent = SC_Class_RealSuper(c);
	if ((!(((bool)parent) and (parent != JB_TypeObject)))) {
		return;
	}
	byte t = c->IsRole;
	if (t == 2) {
		return;
	}
	SCFunction* fn = SC_Func_ConOrDesForCall(self, c, SC_Func_SyntaxIs(self, kSC__FunctionType_Constructor), t);
	if (fn) {
		SC_Func_CallSuperMem(self, fn);
	}
}

void SC_Func_CallSuperMem(SCFunction* self, SCFunction* fn) {
	Message* root = SC_Func_SourceArg(self);
	if ((!root)) {
		return;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(root);
	Message* PCon = SC_NewFnc(fn->ExportName);
	Message* lst = ((Message*)JB_Ring_Last(PCon));
	JB_SetRef(lst->Obj, fn);
	{
		Array* _LoopSrcf3 = fn->Args;
		int _if1 = 0;
		while (true) {
			SCDecl* a = ((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1));
			if (a == nil) {
				break;
			}
			int i = _if1;
			JB_SetRef(JB_Msg_Msg(lst, JB_SyxThg, a->Name)->Obj, ((SCDecl*)JB_Array_Value(self->Args, i)));
			_if1++;
		};
	}
	;
	if (SC_Func_SyntaxIs(self, kSC__FunctionType_Constructor)) {
		JB_SetRef(PCon->Obj, fn->ReturnType);
		(JB_Ring_NextSibSet(((Message*)JB_Ring_First(root)), PCon));
	}
	 else {
		JB_SetRef(PCon->Obj, JB_TypeVoid);
		JB_Tree_SyntaxAppend(root, PCon);
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

bool SC_Func_CanBuildConstructor(SCFunction* self) {
	if ((SC_Func_SyntaxIs(self, kSC__FunctionType_ConOrDes)) and SC_Func_IsARealSpdFunc(self)) {
		return true;
	}
	return false;
}

bool SC_Func_CanCompare(SCFunction* self, SCDecl* Against) {
	{
		SCFunction* f = self;
		while (f) {
			SCDecl* arg = ((SCDecl*)JB_Array_Value(f->Args, 1));
			if (SC_Decl_MatchesDecl(Against, arg)) {
				return true;
			}
			f = f->NextFunc;
		};
	}
	;
	return false;
}

bool SC_Func_CanLibLoad(SCFunction* self) {
	if ((!((!self->IsMacro) and ((!self->IsDisabled) and (self->IsCppInBuilt != 2))))) {
		return nil;
	}
	if ((!JB_Str_Exists(self->ExportName))) {
		debugger;
	}
	return true;
}

bool SC_Func_CanLinkTo(SCFunction* self, SCNode* To) {
	if (To->LinkedFrom < SC__LinkMap_CurrID) {
		To->LinkedFrom = SC__LinkMap_CurrID;
		return true;
	}
	return false;
}

bool SC_Func_CanNil(SCFunction* self) {
	if ((self->Badness != 0) and (self->Badness != 128)) {
		return false;
	}
	return (!self->IsMacro) and ((!self->IsWrapper) and (!self->IsDisabled));
}

void SC_Func_CheckConstructorAndDestructor(SCFunction* self, Message* root, bool IsConstructor) {
	if (self->Badness) {
		return;
	}
	SCClass* Supper = self->Cls->Super;
	bool GotSuperConstructor = false;
	if (Supper) {
		GotSuperConstructor = ((Supper == JB_TypeObject) or ((JB_TypeTask == Supper->Parent) or (JB_TypeTask == Supper)));
	}
	JB_String* NoNesting = JB_LUB[1300];
	{
		Message* dot = root;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(root));
		while (((bool)(dot)) and (dot != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(dot));
			if (JB_Msg_EqualsSyx(dot, JB_SyxFunc, false)) {
				Message* prms = ((Message*)JB_Ring_Last(dot));
				SCFunction* fn = (((SCFunction*)JB_Object_FastAs(prms->Obj, &SCFunctionData)));
				if (SC_Func_SyntaxIs(fn, kSC__FunctionType_Constructor) and SC_Decl_SyntaxIs(((SCDecl*)((Message*)JB_Ring_First(prms))->Obj), kSC__SCDeclInfo_Self)) {
					GotSuperConstructor = true;
					if ((!JB_Msg_InMsg(dot, root))) {
						JB_Msg_SyntaxExpect(dot, NoNesting);
					}
				}
			}
			int UsedAtAll = SC_Msg_SelfUsedForProperty(dot);
			if (UsedAtAll) {
				SCDecl* t = SC_TypeOfExpr(dot, nil, nil);
				if (t) {
					bool IsSet = UsedAtAll == 1;
					if ((!SC_Decl_IsNormalObject(t))) {
						0;
					}
					 else if (IsConstructor) {
						if ((!GotSuperConstructor)) {
							JB_Msg_SyntaxExpect(dot, JB_LUB[692]);
						}
						if ((!(JB_Tree_IsFirst(dot) and IsSet))) {
							if ((!SC_Decl_SyntaxIs(t, kSC__SCDeclInfo_PropertyWasConstructed))) {
								JB_Msg_SyntaxExpect(dot, JB_LUB[1105]);
							}
						}
						if ((!(!SC_Decl_SyntaxIs(t, kSC__SCDeclInfo_PropertyWasConstructed)))) {
							JB_Msg_SyntaxExpect(dot, JB_LUB[752]);
						}
						if ((!JB_Msg_InMsg(((Message*)JB_Ring_Parent(dot)), root))) {
							JB_Msg_SyntaxExpect(dot, NoNesting);
						}
					}
					 else {
						if ((!(JB_Tree_IsLast(dot) or (!IsSet)))) {
							JB_Msg_SyntaxExpect(dot, JB_LUB[751]);
						}
					}
					if (IsConstructor) {
						(SC_Decl_SyntaxIsSet(t, kSC__SCDeclInfo_PropertyWasConstructed, true));
					}
				}
			}
			dot = _N_f2;
		};
		;
	};
}

void SC_Func_CheckNotBadName(SCFunction* self) {
	if ((!SC_Func_ApparantArgCount(self)) and ((bool)self->Cls)) {
		int W = SC_Class_NumericCount(self->Cls);
		if ((W > 1) and ((bool)SC_Str_IsSwizzle(self->Name, W))) {
			if (true) {
				JB_Msg_SyntaxExpect(self->Source, JB_LUB[722]);
			}
		}
	}
}

void SC_Func_CheckReturnValue(SCFunction* self, Message* msg) {
	Message* c = JB_Incr(((Message*)JB_Ring_First(msg)));
	if ((!c)) {
		if ((self->ReturnType)) {
			JB_Msg_SyntaxExpect(msg, JB_LUB[1054]);
		}
		JB_Decr(c);
		return;
	}
	if ((!JB_Tree_IsOnlyChild(c))) {
		JB_Msg_SyntaxExpect(msg, JB_LUB[749]);
		JB_Decr(c);
		return;
	}
	if ((!self->ReturnType) and (((JB_Msg_SyntaxEquals(c, JB_LUB[1811], false))) and ((JB_Msg_EqualsSyx(c, JB_SyxThg, false)) or (JB_Msg_EqualsSyx(c, JB_SyxQues, false))))) {
		JB_Tree_Remove(c);
		JB_Decr(c);
		return;
	}
	SCArg* _tmPf0 = JB_Incr(SC_Msg_MsgArg(msg));
	SCDecl* FoundReturnType = JB_Incr(SC_TypeOfExpr(c, _tmPf0, nil));
	JB_Decr(_tmPf0);
	if (FoundReturnType == JB_TypeVoid) {
		JB_SetRef(FoundReturnType, nil);
	}
	SCDecl* r = JB_Incr(self->ReturnType);
	if (r) {
		if ((!FoundReturnType)) {
			JB_Msg_SyntaxExpect(msg, JB_LUB[905]);
			JB_Decr(r);
			JB_Decr(FoundReturnType);
			JB_Decr(c);
			return;
		}
		if ((FoundReturnType == JB_TypeNil) and (SC_Decl_CantBeNilInCpp(r))) {
			Message* def = JB_Incr(SC_Decl_CreateDefault(r, c, true));
			if (def) {
				JB_FreeIfDead(SC_Msg_ReplaceWith(c, def));
			}
			 else {
				if (true) {
					JB_Msg_SyntaxExpect(msg, JB_LUB[715]);
				}
			}
			JB_Decr(def);
		}
		 else {
			JB_FreeIfDead(SC_Decl_ExpectMatch(r, FoundReturnType, kJB_kTypeCastTrue, c, nil));
		}
	}
	 else {
		if ((FoundReturnType)) {
			JB_Msg_SyntaxExpect(msg, JB_LUB[1290]);
		}
	}
	JB_Decr(c);
	JB_Decr(FoundReturnType);
	JB_Decr(r);
}

void SC_Func_Cleanupfunc(SCFunction* self, Message* s) {
	JB_String* n = JB_Incr(s->Name);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(s);
	SCClass* cls = JB_Incr(SC_Base_IsNormalObject(self->Cls));
	if ((JB_Msg_SyntaxEquals(s, JB_LUB[1564], true)) or (JB_Msg_SyntaxEquals(s, JB_LUB[1601], true))) {
		JB_SetRef(s->Name, JB_LUB[1674]);
		Message* _tmPf1 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, n));
		(JB_Ring_FirstSet(s, _tmPf1));
		JB_Decr(_tmPf1);
	}
	 else if (JB_Msg_SyntaxEquals(s, JB_LUB[1895], true)) {
		if (SC_Func__Tran_Render(s, cls)) {
			JB_SetRef(s->Name, JB_LUB[1513]);
		}
	}
	JB_Decr(n);
	if (SC_Msg_IsBehaviour(s) and ((bool)cls)) {
		SC_Beh__Tran_Behaviour(s, cls);
		SC_Class_FillInterFaceIn(cls, self, true);
	}
	JB_Decr(cls);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_CollectDeclsParams(SCFunction* self, Message* prms, SCNode* AddToSpace) {
	SC__Mod_Curr = ((SCModule*)self->Parent);
	SCClass* cls = self->Cls;
	if ((!cls)) {
		cls = ((SCModule*)self->Parent)->Cls;
	}
	 else if ((!SC_Msg_HasSelfAsFirst(prms))) {
		if ((!AddToSpace)) {
			JB_Msg_SyntaxExpect(prms, nil);
			return;
		}
		SC_Func_AddSelfToFunc(self, cls, AddToSpace);
	}
	{
		Message* item = ((Message*)JB_Ring_First(prms));
		while (item) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(item));
			SC_Msg_CollectOneParam(item, self, AddToSpace, cls);
			item = _Nf1;
		};
		;
	}
	;
	NilState ns = self->NilSelf;
	if (ns) {
		SC_Func_WantAs(self, ns);
	}
	SCDecl* r = self->ReturnType;
	if (((bool)r) and self->HidesProperties) {
		JB_SetRef(self->ReturnType, SC_Decl_MakeReal(r));
	}
}

void SC_Func_CollectLinks(SCFunction* self, JB_Object* obj) {
	while (true) {
		if (JB_Object_FastIsa(obj, &SCFunctionData)) {
			return SC_Func_DoLinkBoth(self, ((SCFunction*)obj));
		}
		if (JB_Object_FastIsa(obj, &SCClassData)) {
			return SC_Func_DoLinkTo(self, ((SCClass*)obj));
		}
		if (JB_Object_FastIsa(obj, &SCDeclData)) {
			SC_Func_DoLinkTo(self, ((SCDecl*)obj)->Type);
			obj = ((SCDecl*)((SCDecl*)obj)->IsLookupOnly);
			if ((!((SCDecl*)obj))) {
				return;
			}
		}
		 else {
			return;
		}
	};
}

bool SC_Func_CollectReturnAsReal(SCFunction* self) {
	if (SC_Func_IsAllocOrNew(self) and SC__Options_NilTestAllocNeverFails) {
		return true;
	}
	return false;
}

SCFunction* SC_Func_ConOrDesForCall(SCFunction* self, SCClass* c, bool IsConstructor, int Task) {
	SCClass* parent = c->Super;
	if ((!parent)) {
		return nil;
	}
	SCFunction* fn = SC_Class_ConOrDesForCall(parent, IsConstructor, Task);
	if (fn) {
		return fn;
	}
	if (SC_Func_SyntaxIs(self, kSC__FunctionType_Constructor)) {
		if ((!((self->Cls == JB_TypeObject) or (self->Cls->Super == JB_TypeObject)))) {
			SC_SCObject_Fail(self, JB_LUB[1050]);
			return nil;
		}
	}
	return nil;
}

SCFunction* SC_Func_Constructor(SCFunction* self, Message* msg) {
	if (self == nil) {
		self = ((SCFunction*)JB_NewClass(&SCFunctionData));
	}
	SC_Base_ConstructorMsg(self, msg);
	Array* _tmPf1 = JB_Array_Constructor0(nil);
	self->Args = JB_Incr(_tmPf1);
	self->Cls = nil;
	JB_StringC* _tmPf0 = JB_LUB[0];
	self->Description = JB_Incr(_tmPf0);
	self->Refs = nil;
	self->CounterPart = nil;
	self->NextFunc = nil;
	self->ASM = nil;
	self->ProtoDecl = nil;
	self->ProtoType = nil;
	self->ReturnType = nil;
	self->DepthFinder = nil;
	self->IsMacro = nil;
	self->LinkDepth = 0;
	self->TmpCounter = 0;
	self->TableId = 0;
	self->AllocCode = 0;
	self->MinOpt = 0;
	self->IsAssigns = 0;
	self->IsCppInBuilt = 0;
	self->BlindCasts = 0;
	self->FlowDisabled = false;
	self->IsExternalLib = false;
	self->IsWrapper = false;
	self->IsNilChecker = 0;
	self->NilSelf = 0;
	self->IsInline = false;
	self->IsKiller = false;
	self->IsDisabled = false;
	self->IsAPI = false;
	self->NoRefCounts = false;
	self->AutoGeneratedSaver = false;
	self->HidesProperties = false;
	self->Badness = 0;
	self->LinkTo = nil;
	if (msg) {
		SC__Comp_stFuncs++;
	}
	return self;
}

Message* SC_Func_ConstructorLinePlace(SCFunction* self) {
	Message* s = self->Source;
	if (s) {
		if (JB_Msg_HasPosition(s)) {
			return s;
		}
	}
	SCClass* c = self->Cls;
	if (c) {
		return c->Source;
	}
	return nil;
}

void SC_Func_CopyParams(SCFunction* self, Message* list) {
	Message* p = JB_Incr(SC_Func_Prms(self));
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(list);
	Message* a = JB_Incr(JB_Msg_GiveArg(self->Source));
	Message* dot = JB_Incr(JB_Syx_Msg(JB_SyxDot, JB_LUB[785]));
	(JB_Ring_FirstSet(a, dot));
	JB_Decr(a);
	Message* name = JB_Incr(JB_Msg_Msg(dot, JB_SyxThg, JB_LUB[1975]));
	JB_Decr(name);
	Message* SubPrms = JB_Incr(JB_Msg_Msg(dot, JB_SyxPrm, JB_LUB[0]));
	{
		Message* s = JB_Incr(((Message*)JB_Ring_First(list)));
		while (s) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(s)));
			Message* _tmPf3 = JB_Incr(JB_Msg_Copy(s, nil));
			JB_Tree_SyntaxAppend(p, _tmPf3);
			JB_Decr(_tmPf3);
			Message* c = JB_Incr(SC_Msg_DeclName(s));
			if (c) {
				Message* _tmPf4 = JB_Incr(JB_Msg_Copy(c, nil));
				JB_Tree_SyntaxAppend(SubPrms, _tmPf4);
				JB_Decr(_tmPf4);
			}
			JB_Decr(c);
			JB_SetRef(s, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(s);
		;
		JB_Decr(dot);
	}
	;
	JB_Decr(p);
	JB_Decr(SubPrms);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Func_CountCallsToParentAlloc(SCFunction* self, Message* root) {
	Message* rz = nil;
	int FoundCount = 0;
	SCClass* c = self->Cls;
	if ((!c)) {
		return nil;
	}
	{
		Message* curr = ((Message*)JB_Ring_First(root));
		while (curr) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(curr));
			SCFunction* f = SC_Msg_IsParentConCall(curr);
			if (f) {
				SCClass* fcls = f->Cls;
				if ((!((f->Cls == SC_Class_RealSuper(c)) or (f->Cls == c->Super)))) {
					JB_Msg_SyntaxExpect(curr, JB_LUB[893]);
					return nil;
				}
				if ((!(rz))) {
					rz = curr;
				}
				FoundCount++;
				if (FoundCount >= 2) {
					JB_Msg_SyntaxExpect(curr, JB_LUB[1033]);
					return nil;
				}
			}
			curr = _Nf1;
		};
		;
	}
	;
	return rz;
}

int SC_Func_CreateTypeCast(SCFunction* self, SCDecl* MyType, Message* exp, int Loss) {
	JB_Incr(exp);
	if ((!exp)) {
		JB_Decr(exp);
		return kJB_kNeedsTypeCast;
	}
	if (self->IsDisabled) {
		JB_Msg_SyntaxExpect(exp, self->Description);
		JB_Decr(exp);
		return 0;
	}
	while (JB_Msg_EqualsSyx(exp, JB_SyxBra, false)) {
		JB_SetRef(exp->Obj, self->ReturnType);
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(exp)));
		JB_SetRef(exp, _tmPf0);
		JB_Decr(_tmPf0);
		if (JB_Msg_EqualsSyx(exp, JB_SyxArg, false)) {
			Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Parent(exp)));
			JB_SetRef(exp, _tmPf1);
			JB_Decr(_tmPf1);
			break;
		}
	};
	MessagePosition Using = JB_Msg_SyntaxUsing(exp);
	Message* cst = JB_Incr(SC_Func_IsSimpleCast(self));
	if (cst) {
		JB_SetRef(cst, JB_Msg_Copy(cst, nil));
		JB_FreeIfDead(SC_Msg_ReplaceWith(exp, cst));
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(cst)));
		JB_FreeIfDead(SC_Msg_ReplaceWith(_tmPf2, exp));
		JB_Decr(_tmPf2);
	}
	 else {
		Message* _tmPf3 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, self->ExportName));
		JB_SetRef(cst, SC_Msg_WrapWith((_tmPf3), JB_SyxFunc, JB_LUB[0]));
		JB_Decr(_tmPf3);
		(JB_Ring_NextSibSet(exp, cst));
		Message* _tmPf4 = JB_Incr(JB_Msg_Msg(cst, JB_SyxPrm, JB_LUB[0]));
		JB_Tree_SyntaxAppend(_tmPf4, exp);
		JB_Decr(_tmPf4);
		if (SC_Decl_IsNormalStruct(MyType)) {
			SC_Msg_GetAddressOf(exp, MyType, false);
		}
		Message* _tmPf5 = JB_Incr(((Message*)JB_Ring_Last(cst)));
		JB_SetRef(_tmPf5->Obj, self);
		JB_Decr(_tmPf5);
	}
	JB_Decr(exp);
	JB_SetRef(cst->Obj, self->ReturnType);
	JB_Decr(cst);
	JB_MsgPos_Destructor((&Using));
	return Loss;
}

void SC_Func_DeclsProtoCleanup(SCFunction* self, SCClass* fpType, Message* ch0, bool AssumeSelf, bool late, Message* Route) {
	SCFunction* Proto = JB_Incr(fpType->FuncProto);
	if ((!Proto)) {
		JB_Msg_SyntaxExpect(ch0, JB_LUB[1296]);
		JB_Decr(Proto);
		return;
	}
	Message* fProtoParams = JB_Incr(JB_Msg_NeedSyxInt(Proto->Source, JB_SyxPrm, 1));
	JB_Decr(Proto);
	if ((!fProtoParams)) {
		JB_Decr(fProtoParams);
		return;
	}
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Parent(ch0)));
	Message* p = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	p->Func = JB_SyxPrm;
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(ch0);
		SC_Msg_CopyAllInto(fProtoParams, p, false);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(fProtoParams);
	if (Route) {
		Message* nxt = JB_Incr(((Message*)JB_Ring_NextSib(ch0)));
		Message* first = JB_Incr(((Message*)JB_Ring_First(nxt)));
		JB_Decr(nxt);
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(first)));
		if (SC_Msg_OperatorIsThing(_tmPf2, JB_LUB[1934])) {
			JB_FreeIfDead(SC_Msg_ReplaceWith(first, Route));
		}
		JB_Decr(first);
		JB_Decr(_tmPf2);
	}
	JB_Tree_Remove(ch0);
	SCClass* c = JB_Incr(self->Cls);
	if ((!c)) {
		JB_Decr(c);
		JB_Decr(p);
		return;
	}
	if (late) {
		Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_First(p)));
		JB_Tree_Remove(_tmPf3);
		JB_Decr(_tmPf3);
	}
	if ((!AssumeSelf)) {
		Message* d = JB_Incr(JB_Msg_NeedSyx(p, JB_SyxDecl));
		Message* ch = JB_Incr(JB_Msg_NeedSyx(d, JB_SyxNil));
		if ((!ch)) {
			JB_Decr(ch);
			JB_Decr(d);
			JB_Decr(c);
			JB_Decr(p);
			return;
		}
		SCDecl* decl = JB_Incr(SC_ExtractDecl(ch, nil, kSC__DeclMode_ProtoParam));
		JB_Decr(ch);
		if ((!decl)) {
			JB_Msg_SyntaxExpect(p, nil);
			JB_Decr(decl);
			JB_Decr(d);
			JB_Decr(c);
			JB_Decr(p);
			return;
		}
		if ((!SC_Decl_MatchesDecl(decl, c->TypeNormal))) {
			SC_SCObject_Fail(self, JB_LUB[1168]);
			JB_Decr(decl);
			JB_Decr(d);
			JB_Decr(c);
			JB_Decr(p);
			return;
		}
		JB_Decr(decl);
		JB_Tree_Remove(d);
		JB_Decr(d);
	}
	JB_Decr(p);
	JB_Decr(c);
}

SCDecl* SC_Func_DeclsProtoTypeAdd(SCFunction* self, SCClass* fpType) {
	SCDecl* Dcl = JB_Incr(SC_Decl_Constructor(nil, fpType));
	JB_SetRef(Dcl->IsLookupOnly, self);
	(SC_Decl_NameSet(Dcl, self->Name));
	SC_Comp__NewConst(Dcl);
	Dcl->NilDeclared = kSC__NilState_Real;
	JB_SetRef(self->ProtoDecl, Dcl);
	if (self->Cls) {
		SC_Base_TryAdd(self->Parent, self->Source, Dcl, self->Name);
	}
	JB_SafeDecr(Dcl);
	return Dcl;
}

void SC_Func_DeclsPrototypeClass(SCFunction* self, Message* ch0) {
	SCModule* p = ((SCModule*)JB_Object_FastAs(self->Parent, &SCModuleData));
	if ((!p)) {
		return;
	}
	SCClass* fpType = SC_Base_FindClassMsg(p, ch0, kSC__SCNodeFindMode_WantAType);
	if ((!fpType)) {
		return;
	}
	Message* Route = nil;
	if ((!fpType->FuncProto)) {
		SCClass* task = SC_Base_FindClass(fpType->Modul, JB_LUB[1726], nil, kSC__Base_DontGoUp);
		if (task) {
			fpType = task;
			Route = SC_Base_Route(fpType->Modul->Parent, JB_LUB[1726]);
		}
		SCClass* task_proto = SC_Base_FindClass(fpType->Modul, JB_LUB[1884], nil, kSC__Base_DontGoUp);
		if (task_proto) {
			fpType = task_proto;
		}
	}
	SC_Func_DeclsProtoCleanup(self, fpType, ch0, false, false, Route);
	JB_FreeIfDead(SC_Func_DeclsProtoTypeAdd(self, fpType));
}

void SC_Func_DeclsPrototypeInterface(SCFunction* self, Message* ch0, SCClass* fpType, bool late) {
	SC_Func_DeclsProtoCleanup(self, fpType, ch0, true, late, nil);
	if ((!late)) {
		JB_FreeIfDead(SC_Func_DeclsProtoTypeAdd(self, fpType));
	}
}

JB_String* SC_Func_Describe(SCFunction* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendString(fs, JB_LUB[1675]);
	JB_FS_AppendString(fs, self->Name);
	JB_FS_AppendByte(fs, ' ');
	Message* _tmPf0 = JB_Incr(((Message*)JB_Tree_Second(self->Source)));
	JB_FS_SyntaxAppend(fs, _tmPf0);
	JB_Decr(_tmPf0);
	JB_String* _tmPf1 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf1);
	return _tmPf1;
}

void SC_Func_DescribeParamFail(SCFunction* self, SCParamArray* params, int bad) {
	if (SC_PA_MadeError(params)) {
		return;
	}
	bool IsSelf = (bad == 0) and (params->IsDot and params->IsNotModule);
	Message* P = JB_Incr(SC_PA_SyntaxAccess(params, bad));
	if (P) {
		bad++;
		FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
		JB_FS_AppendString(_fsf0, JB_LUB[1387]);
		JB_FS_AppendInt32(_fsf0, bad);
		JB_FS_AppendString(_fsf0, JB_LUB[291]);
		JB_String* str = JB_Incr(((JB_String*)JB_Ternary(IsSelf, ((JB_String*)JB_LUB[1389]), ((JB_String*)JB_FS_GetResult(_fsf0)))));
		JB_Decr(_fsf0);
		SCDecl* Type = JB_Incr(SC_TypeOfExpr(P, nil, nil));
		if (Type) {
			JB_String* _tmPf2 = JB_Incr(SC_Decl_RenderTypeName(Type, nil));
			JB_SetRef(str, JB_Str_OperatorPlus(str, _tmPf2));
			JB_Decr(_tmPf2);
		}
		 else {
			JB_SetRef(str, JB_Str_OperatorPlus(str, JB_LUB[272]));
		}
		JB_Decr(Type);
		if (true) {
			JB_Msg_SyntaxExpect(P, str);
		}
		JB_Decr(str);
	}
	 else {
		int64 Num = bad - IsSelf;
		if (true) {
			FastString* _fsf1 = JB_Incr(JB_FS_Constructor(nil));
			JB_FS_AppendString(_fsf1, JB_LUB[1018]);
			JB_FS_AppendInt64(_fsf1, Num);
			JB_FS_AppendString(_fsf1, JB_LUB[560]);
			SCDecl* _tmPf3 = JB_Incr(((SCDecl*)JB_Array_Value(self->Args, bad)));
			JB_FreeIfDead(SC_Decl_Render(_tmPf3, _fsf1));
			JB_Decr(_tmPf3);
			JB_String* _tmPf4 = JB_Incr(JB_FS_GetResult(_fsf1));
			JB_Decr(_fsf1);
			JB_Msg_SyntaxExpect(params->Exp, _tmPf4);
			JB_Decr(_tmPf4);
		}
	}
	JB_Decr(P);
	if (true) {
		JB_String* _tmPf6 = JB_Incr(SC_Func_RenderTitle(self, true, nil));
		JB_String* _tmPf5 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1999], _tmPf6));
		JB_Decr(_tmPf6);
		JB_Msg_SyntaxExpect(self->Source, _tmPf5);
		JB_Decr(_tmPf5);
	}
}

void SC_Func_Destructor(SCFunction* self) {
	JB_Clear(self->LinkTo);
	JB_Clear(self->Args);
	JB_Clear(self->Cls);
	JB_Clear(self->Description);
	JB_Clear(self->Refs);
	JB_Clear(self->CounterPart);
	JB_Clear(self->NextFunc);
	JB_Clear(self->ASM);
	JB_Clear(self->ProtoDecl);
	JB_Clear(self->ProtoType);
	JB_Clear(self->ReturnType);
	JB_Clear(self->IsMacro);
	SC_Base_Destructor(self);
}

SCFunction* SC_Func_Disambiguate(SCFunction* self, Message* src) {
	if ((!self) or (!self->NextFunc)) {
		return self;
	}
	{
		SCFunction* curr = self;
		while (curr) {
			Message* s = curr->Source;
			if (JB_Msg_DeepEquals(s, src, false)) {
				return curr;
			}
			Message* ss = ((Message*)JB_Tree_Second(s));
			if (ss) {
				if (JB_Msg_DeepEquals(ss, ((Message*)JB_Tree_Second(src)), false)) {
					return curr;
				}
			}
			curr = curr->NextFunc;
		};
	}
	;
	return self;
}

void SC_Func_DoLinkBoth(SCFunction* self, SCNode* To) {
	if (SC_Func_CanLinkTo(self, To)) {
		SC_LinkMap__Store((&self->LinkTo), To);
		if (SC__Comp_InPerry) {
			SC_LinkMap__Store((&To->LinkFrom), self);
		}
	}
}

void SC_Func_DoLinkTo(SCFunction* self, SCNode* To) {
	if (SC_Func_CanLinkTo(self, To)) {
		SC_LinkMap__Store((&self->LinkTo), To);
	}
}

void SC_Func_DontWantSameReturnType(SCFunction* self, SCFunction* f) {
	if ((!self)) {
		return;
	}
	SCDecl* r = JB_Incr(f->ReturnType);
	if ((!r)) {
		debugger;
		JB_Decr(r);
		return;
	}
	if (SC_Decl_MiniMatch(r, self->ReturnType, 0)) {
		if (true) {
			JB_Msg_SyntaxExpect(self->Source, JB_LUB[1034]);
		}
		if (true) {
			JB_Msg_SyntaxExpect(f->Source, JB_LUB[1035]);
		}
	}
	JB_Decr(r);
}

bool SC_Func_doRefs(SCFunction* self) {
	return (!self->NoRefCounts);
}

void SC_Func_DotFuncToNormalFunc(SCFunction* self, Message* dot) {
	JB_Msg_BecomeStr(dot, JB_SyxFunc, JB_LUB[0]);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(dot)));
	Message* first = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_Last(dot)));
	Message* L = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	JB_SetRef(L->Obj, self);
	L->Func = JB_SyxPrm;
	if (JB_Object_FastIsa(first->Obj, &SCModuleData)) {
		JB_Tree_Remove(first);
	}
	 else {
		(JB_Ring_FirstSet(L, first));
	}
	JB_Decr(first);
	JB_Decr(L);
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(dot);
		Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxThg, self->ExportName));
		(JB_Ring_FirstSet(dot, (_tmPf3)));
		JB_Decr(_tmPf3);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	if (self->IsKiller) {
		SC_Msg_LastInBlock(dot, kSC__SCBlockage_Quit);
	}
}

bool SC_Func_EqualOrMoreSpecific(SCFunction* self, SCFunction* f) {
	if ((!(((bool)self) and ((bool)f)))) {
		return nil;
	}
	if (((bool)(f->ReturnType)) != ((bool)(self->ReturnType))) {
		return nil;
	}
	if (JB_Array_Size(f->Args) != JB_Array_Size(self->Args)) {
		return nil;
	}
	SCDecl* r = f->ReturnType;
	if (r) {
		if ((!SC_Decl_MatchesDecl(r, self->ReturnType))) {
			return nil;
		}
	}
	{
		Array* _LoopSrcf2 = self->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* a = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (a == nil) {
				break;
			}
			int i = _if0;
			if ((!SC_Decl_MatchesDecl(((SCDecl*)JB_Array_Value(f->Args, i)), a))) {
				return nil;
			}
			_if0++;
		};
	}
	;
	return true;
}

JB_String* SC_Func_ExportNameBuilder(SCFunction* self, JB_String* CppPart) {
	JB_Incr(CppPart);
	JB_String* rz = JB_Incr(JB_LUB[0]);
	if ((!JB_Str_Exists(CppPart))) {
		JB_SetRef(CppPart, self->Name);
		if (((bool)self->IsAssigns) and (!(JB_Str_OperatorEndsWith(CppPart, JB_LUB[908])))) {
			JB_SetRef(CppPart, JB_Str_OperatorPlus(CppPart, JB_LUB[1214]));
		}
	}
	JB_String* SubSection = JB_Incr(JB_LUB[0]);
	JB_String* AfterSub = JB_Incr(JB_LUB[0]);
	SCClass* c = JB_Incr(self->Cls);
	if (c) {
		JB_SetRef(SubSection, SC_Mod_CppPath(c->Modul));
		JB_SetRef(AfterSub, JB_LUB[1426]);
		if ((SC_Func_SyntaxIs(self, kSC__FunctionType_Constructor)) and (!(JB_Str_ContainsString(CppPart, JB_LUB[785])))) {
			JB_SetRef(CppPart, JB_Str_OperatorPlus(JB_LUB[785], CppPart));
		}
	}
	 else {
		SCNode* L = JB_Incr(self->Parent);
		if (JB_Object_FastIsa(L, &SCModuleData)) {
			if (JB_Str_Exists(((SCModule*)L)->CppPart)) {
				JB_SetRef(SubSection, SC_Mod_CppPath(((SCModule*)L)));
				JB_SetRef(AfterSub, JB_LUB[1440]);
			}
		}
		JB_Decr(L);
	}
	JB_Decr(c);
	SCImport* P = JB_Incr(self->Project);
	if (P) {
		JB_String* wanted = JB_Incr(P->Mod->ExportName);
		if ((!JB_Str_Equals(wanted, SubSection, false))) {
			JB_SetRef(rz, (JB_Str_OperatorPlus(wanted, JB_LUB[1426])));
		}
		JB_Decr(wanted);
	}
	JB_Decr(P);
	JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(AfterSub, CppPart));
	JB_Decr(AfterSub);
	JB_Decr(CppPart);
	JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(SubSection, _tmPf1));
	JB_Decr(SubSection);
	JB_Decr(_tmPf1);
	JB_SetRef(rz, JB_Str_OperatorPlus(rz, (_tmPf0)));
	JB_Decr(_tmPf0);
	JB_SafeDecr(rz);
	return rz;
}

void SC_Func_FillInDestructor(SCFunction* self) {
	Message* s = SC_Func_SourceArg(self);
	Message* first = SC_Msg_FindDestructor(s);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(s);
	{
		Array* _LoopSrcf3 = self->Cls->Properties;
		int _if1 = 0;
		while (true) {
			SCDecl* d = ((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1));
			if (d == nil) {
				break;
			}
			if (SC_Decl_IsReffable(d, true)) {
				SC_Msg_AddBefore(s, first, SC_Decl_RefDestructor(d));
			}
			 else {
				SCFunction* Destr = SC_Decl_HasStructDestructor(d);
				if (Destr) {
					Message* Addr = SC_Decl_DeclToAddr(d, SC_Func_Self(self));
					SC_Msg_AddBefore(s, first, SC_Refs__RefDestructorMsg(Addr, Destr));
				}
			}
			_if1++;
		};
	}
	;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_FillInMissingConstructorDefaults(SCFunction* self, Message* root, Message* AfterHere) {
	SCClass* cls = self->Cls;
	if ((!cls)) {
		return;
	}
	Message* oof = SC_Func_ConstructorLinePlace(self);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(oof);
	{
		Array* _LoopSrcf3 = cls->Properties;
		int _if1 = JB_Array_Size(_LoopSrcf3) - 1;
		while (true) {
			SCDecl* d = ((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1));
			if (d == nil) {
				break;
			}
			if (!(SC_Decl_SyntaxIs(d, kSC__SCDeclInfo_PropertyWasConstructed))) {
				Message* Made = SC_Func_NewDefaultRel(self, oof, d);
				SC_Msg_InsertAfter(root, Made, AfterHere);
			}
			_if1--;
		};
	}
	;
	while (cls) {
		{
			Array* _LoopSrcf6 = cls->Properties;
			int _if4 = 0;
			while (true) {
				SCDecl* d = ((SCDecl*)JB_Array_Value(_LoopSrcf6, _if4));
				if (d == nil) {
					break;
				}
				(SC_Decl_SyntaxIsSet(d, kSC__SCDeclInfo_PropertyWasConstructed, (!true)));
				_if4++;
			};
		}
		;
		cls = cls->Super;
	};
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_FillInSaver(SCFunction* self, JB_String* name) {
	if ((!self->AutoGeneratedSaver)) {
		return;
	}
	SCClass* cls = JB_Incr(self->Cls);
	bool IsSave = (JB_Str_ContainsString(name, JB_LUB[1205]));
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	self->BlindCasts = 0;
	{
		Array* _LoopSrcf3 = JB_Incr(cls->Properties);
		int _if1 = 0;
		while (true) {
			SCDecl* item = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf3, _if1)));
			if (item == nil) {
				JB_Decr(item);
				break;
			}
			JB_String* type = JB_Incr(SC_Decl_TryUseSaveable(item, IsSave, cls));
			if ((!JB_Str_Exists(type))) {
				_if1++;
				JB_Decr(type);
				JB_Decr(item);
				continue;
			}
			JB_FS_AppendString(fs, JB_LUB[43]);
			int Count = item->C_Array;
			DataTypeCode T = item->Type->TypeInfo;
			bool AppendAsData = (JB_TC_ExistsButBadlyNamedOrDesigned(T) and JB_TC_IsFloat(T));
			if ((!AppendAsData) and ((bool)Count)) {
				//;
				JB_FS_AppendString(fs, JB_LUB[1662]);
				JB_FS_AppendInt32(fs, Count);
				JB_FS_AppendString(fs, JB_LUB[284]);
				//;
			}
			if (AppendAsData) {
				JB_SetRef(type, JB_LUB[1890]);
				if ((!(Count))) {
					Count = 1;
				}
			}
			if (IsSave) {
				if (JB_Str_Equals(type, JB_LUB[1973], false)) {
					JB_FS_AppendByte(fs, '.');
					JB_FS_AppendString(fs, item->Name);
					JB_FS_AppendString(fs, JB_LUB[361]);
					if (Count) {
						JB_FS_AppendString(fs, JB_LUB[1402]);
					}
				}
				 else {
					JB_FS_AppendString(fs, JB_LUB[1921]);
					JB_FS_AppendString(fs, type);
					JB_FS_AppendByte(fs, '(');
					if (AppendAsData) {
						JB_FS_AppendString(fs, JB_LUB[266]);
					}
					JB_FS_AppendByte(fs, '.');
					JB_FS_AppendString(fs, item->Name);
					if (AppendAsData) {
						JB_FS_AppendString(fs, JB_LUB[294]);
						JB_FS_AppendInt32(fs, JB_TC_ByteSize(T) * Count);
					}
					 else if ((bool)Count) {
						JB_FS_AppendString(fs, JB_LUB[1402]);
					}
					JB_FS_AppendByte(fs, ')');
				}
			}
			 else if (AppendAsData) {
				JB_FS_AppendString(fs, JB_LUB[1764]);
				JB_FS_AppendString(fs, item->Name);
				JB_FS_AppendString(fs, JB_LUB[294]);
				JB_FS_AppendInt32(fs, JB_TC_ByteSize(T) * Count);
				JB_FS_AppendString(fs, JB_LUB[280]);
			}
			 else {
				JB_FS_AppendByte(fs, '.');
				JB_FS_AppendString(fs, item->Name);
				if (Count) {
					JB_FS_AppendString(fs, JB_LUB[1402]);
				}
				if (JB_Str_Equals(type, JB_LUB[1973], false)) {
					JB_FS_AppendString(fs, JB_LUB[360]);
				}
				 else {
					JB_FS_AppendString(fs, JB_LUB[156]);
					JB_FS_AppendString(fs, JB_LUB[1763]);
					JB_FS_AppendString(fs, type);
					SCClass* it = JB_Incr(item->Type);
					if ((SC_Class_NumericCount(it) <= 1) and ((!JB_Str_Equals(type, self->Name, false)))) {
						JB_FS_AppendByte(fs, '|');
						JB_FS_AppendString(fs, it->Name);
						JB_FS_AppendByte(fs, '|');
					}
					JB_Decr(it);
				}
			}
			JB_Decr(item);
			JB_Decr(type);
			if ((!AppendAsData) and ((bool)Count)) {
				JB_FS_AppendString(fs, JB_LUB[85]);
			}
			_if1++;
		};
		JB_Decr(_LoopSrcf3);
	}
	;
	JB_Decr(cls);
	MessagePosition Using = JB_Msg_SyntaxUsing(self->Source);
	JB_String* SrcStr = JB_Incr(JB_FS_GetResult(fs));
	JB_Decr(fs);
	Message* Msg = JB_Incr(JB_Str_Parse(SrcStr, JB_SyxArg, true));
	JB_Decr(SrcStr);
	Message* _tmPf6 = JB_Incr(SC_Func_SourceArg(self));
	Message* dest = JB_Incr(_tmPf6);
	{
		Message* line = JB_Incr(((Message*)JB_Ring_First(Msg)));
		while (line) {
			Message* _Nf5 = JB_Incr((((Message*)JB_Ring_NextSib(line))));
			JB_Tree_SyntaxAppend(dest, line);
			JB_SetRef(line, _Nf5);
			JB_Decr(_Nf5);
		};
		JB_Decr(line);
		;
		JB_Decr(_tmPf6);
	}
	;
	JB_Decr(dest);
	JB_Decr(Msg);
	JB_MsgPos_Destructor((&Using));
}

Message* SC_Func_FindCallParents(SCFunction* self) {
	Message* rz = nil;
	Message* s = SC_Func_SourceArg(self);
	if (s) {
		rz = SC_Func_CountCallsToParentAlloc(self, s);
	}
	return rz;
}

Message* SC_Func_FindCppWrapperFunc(SCFunction* self, Message* place) {
	{
		Message* cpp = ((Message*)JB_Ring_First(place));
		while (cpp) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(cpp));
			if ((JB_Str_OperatorStarts(cpp->Name, JB_LUB[1570])) and SC_Func_FoundOneCpp(self, cpp->Name)) {
				return cpp;
			}
			cpp = _Nf1;
		};
		;
	}
	;
	return nil;
}

int SC_Func_FindDepths(SCFunction* self) {
	int rz = 0;
	//;
	if (self->LinkDepth) {
		return self->LinkDepth;
	}
	rz = 1;
	{
		Array* _LoopSrcf2 = self->LinkTo;
		int _if0 = 0;
		while (true) {
			SCNode* f = ((SCNode*)JB_Array_Value(_LoopSrcf2, _if0));
			if (f == nil) {
				break;
			}
			if (JB_Object_FastIsa(f, &SCFunctionData)) {
				if ((f == self) or ((bool)((SCFunction*)f)->DepthFinder)) {
					SC_Func_MarkRecursive(self, ((SCFunction*)f));
				}
				 else {
					((SCFunction*)f)->DepthFinder = self;
					int D = SC_Func_FindDepths(((SCFunction*)f)) + 1;
					rz = JB_int_OperatorMax(rz, D);
					((SCFunction*)f)->DepthFinder = nil;
				}
			}
			_if0++;
		};
	}
	;
	self->LinkDepth = rz;
	return rz;
}

bool SC_Func_FindReached(SCFunction* self, SCNode* from) {
	bool rz = false;
	//;
	if (SC_Func_Borked(self)) {
		if (true) {
			JB_Msg_SyntaxExpect(self->Source, JB_LUB[672]);
		}
		if (true) {
			JB_Msg_SyntaxExpect(from->Source, SC_Base_ReachedName(from));
		}
	}
	if (self->MyReacher) {
		return nil;
	}
	self->MyReacher = from;
	SC__Comp_stReachedFunc++;
	{
		SCClass* _t = self->Cls;
		if (_t) {
			SC_Class_Reach(_t, self, nil);
		}
	}
	;
	{
		Array* _LoopSrcf2 = self->LinkTo;
		int _if0 = 0;
		while (true) {
			SCNode* o = ((SCNode*)JB_Array_Value(_LoopSrcf2, _if0));
			if (o == nil) {
				break;
			}
			if (o->MyReacher) {
			}
			 else if (JB_Object_FastIsa(o, &SCFunctionData)) {
				SC_Func_FindReached(((SCFunction*)o), self);
				rz = true;
			}
			 else if (JB_Object_FastIsa(o, &SCClassData)) {
				SC_Class_Reach(((SCClass*)o), self, nil);
			}
			_if0++;
		};
	}
	;
	return rz;
}

void SC_Func_FixCnj(SCFunction* self, Message* exp) {
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(exp);
	SC_Func_FixCnjSub(self, exp);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func_FixCnjSub(SCFunction* self, Message* exp) {
	if (JB_Msg_EqualsSyx(exp, JB_SyxARel, false)) {
		JB_Msg_BecomeStr(exp, JB_SyxTRel, JB_LUB[0]);
		JB_Msg_AppendSyx(exp, JB_SyxOpp, JB_LUB[1897]);
	}
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(exp)));
	Message* ch = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	JB_String* name = JB_Incr(_tmPf2->Name);
	JB_Decr(_tmPf2);
	bool CreatesError = ((JB_Str_Equals(name, JB_LUB[1636], false)) or (JB_Str_Equals(name, JB_LUB[1541], false)));
	bool DoesReturn = ((!JB_Str_Equals(name, JB_LUB[1766], false)) and (!JB_Str_Equals(name, JB_LUB[1541], false)));
	if ((!(CreatesError or ((JB_Str_Equals(name, JB_LUB[1591], false)) or ((JB_Str_Equals(name, JB_LUB[1897], false)) or ((JB_Str_Equals(name, JB_LUB[1566], false)) or (JB_Str_Equals(name, JB_LUB[1766], false)))))))) {
		if (true) {
			JB_Msg_SyntaxExpect(exp, JB_LUB[1043]);
		}
		JB_SetRef(ch->Name, JB_LUB[1897]);
		JB_SetRef(name, JB_LUB[1897]);
	}
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	Message* nxt = JB_Incr(_tmPf3);
	JB_Decr(_tmPf3);
	if (((JB_Msg_EqualsSyx(ch, JB_SyxRel, false))) and ((JB_Msg_OperatorIn(exp, JB_SyxArg) or JB_Msg_OperatorIn(exp, JB_SyxDecl)) and ((JB_Str_Equals(((Message*)JB_Tree_Second(ch))->Name, JB_LUB[587], false))))) {
		Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(ch)));
		if ((!SC_Msg_IsAssignable(_tmPf4))) {
			FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
			JB_FS_AppendString(_fsf0, JB_LUB[1363]);
			JB_FS_SyntaxAppend(_fsf0, ch);
			JB_FS_AppendString(_fsf0, JB_LUB[283]);
			JB_FS_AppendString(_fsf0, name);
			JB_FS_AppendString(_fsf0, JB_LUB[2110]);
			JB_String* _tmPf5 = JB_Incr(JB_FS_GetResult(_fsf0));
			JB_Decr(_fsf0);
			JB_Msg_SyntaxExpect(exp, _tmPf5);
			JB_Decr(_tmPf5);
			JB_Decr(_tmPf4);
			JB_Decr(nxt);
			JB_Decr(name);
			JB_Decr(ch);
			return;
		}
		JB_Decr(_tmPf4);
		JB_FreeIfDead(SC_Msg_ReplaceWith(exp, ch));
		Message* _tmPf6 = JB_Incr(((Message*)JB_Ring_Last(ch)));
		Message* RightSide = JB_Incr(_tmPf6);
		JB_Decr(_tmPf6);
		Message* bra = JB_Incr(JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
		JB_FreeIfDead(SC_Msg_ReplaceWith(RightSide, bra));
		JB_Tree_SyntaxAppend(bra, RightSide);
		JB_Decr(RightSide);
		JB_FreeIfDead(((Message*)JB_Tree_WrapWith(bra, exp)));
		Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_First(bra)));
		JB_FreeIfDead(SC_Msg_ReplaceWith(bra, _tmPf7));
		JB_Decr(bra);
		JB_Decr(_tmPf7);
	}
	if (JB_Str_Equals(name, JB_LUB[1897], false)) {
		JB_SetRef(nxt->Name, JB_LUB[1899]);
		JB_SetRef(name, JB_LUB[1899]);
	}
	JB_Decr(nxt);
	Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_First(exp)));
	JB_SetRef(ch, _tmPf8);
	JB_Decr(_tmPf8);
	JB_Tree_Remove(ch);
	JB_FreeIfDead(SC_Msg_ReplaceWith(exp, ch));
	Message* Thg = nil;
	Message* pp = nil;
	Message* RemoveMe = nil;
	bool UsePrev = false;
	if ((SC_Msg_OperatorIsBRel(ch, JB_LUB[299])) and ((JB_Msg_OperatorIn(ch, JB_SyxArg)) and ((({
		Message* _tmPf10 = JB_Incr(((Message*)JB_Ring_First(ch)));
		bool _tmPf9 = JB_Msg_EqualsSyx(_tmPf10, JB_SyxThg, false);
		JB_Decr(_tmPf10);
		 _tmPf9;
	}))))) {
		Message* _tmPf11 = JB_Incr(((Message*)JB_Ring_First(ch)));
		JB_SetRef(Thg, JB_Syx_OperatorPlus(JB_SyxThg, _tmPf11->Name));
		JB_Decr(_tmPf11);
		JB_SetRef(pp, ch);
	}
	 else {
		Message* _tmPf12 = JB_Incr(SC_Msg_NiceParent(ch));
		JB_SetRef(pp, _tmPf12);
		JB_Decr(_tmPf12);
		bool Done = false;
		if ((((({
			Message* _tmPf14 = JB_Incr(SC_Msg_UnBra(ch));
			bool _tmPf13 = JB_Msg_EqualsSyx(_tmPf14, JB_SyxThg, false);
			JB_Decr(_tmPf14);
			 _tmPf13;
		})))) or (((JB_Msg_EqualsSyx(pp, JB_SyxArg, false))) and (!CreatesError))) {
			Message* _tmPf15 = JB_Incr(JB_Msg_Copy(ch, nil));
			JB_SetRef(Thg, _tmPf15);
			JB_Decr(_tmPf15);
			if (JB_Msg_EqualsSyx(pp, JB_SyxArg, false)) {
				JB_SetRef(RemoveMe, ch);
			}
			Message* _tmPf16 = JB_Incr(SC_Msg_ParentPoint(ch));
			JB_SetRef(pp, _tmPf16);
			JB_Decr(_tmPf16);
			UsePrev = true;
			Done = ((bool)1);
		}
		 else if (SC_Msg_IsSetRel(pp) and (({
			Message* _tmPf18 = JB_Incr(((Message*)JB_Ring_First(pp)));
			bool _tmPf17 = JB_Msg_EqualsSyx(_tmPf18, JB_SyxThg, false);
			JB_Decr(_tmPf18);
			 _tmPf17;
		}))) {
			bool IsDecl = (JB_Msg_OperatorIn(pp, JB_SyxDecl));
			if (IsDecl or ((!JB_Str_Equals(name, JB_LUB[1766], false)))) {
				Done = ((bool)1);
				Message* _tmPf19 = JB_Incr(((Message*)JB_Ring_First(pp)));
				JB_SetRef(Thg, JB_Syx_OperatorPlus(JB_SyxThg, _tmPf19->Name));
				JB_Decr(_tmPf19);
				if (IsDecl) {
					Message* _tmPf20 = JB_Incr(((Message*)JB_Ring_Parent(pp)));
					JB_SetRef(pp, _tmPf20);
					JB_Decr(_tmPf20);
				}
			}
		}
		if ((!Done)) {
			Message* _tmPf21 = JB_Incr(SC_Func__TypedTempMoveOut(ch, JB_LUB[0]));
			JB_SetRef(pp, _tmPf21);
			JB_Decr(_tmPf21);
			Message* _tmPf22 = JB_Incr(SC_Msg_DeclName(pp));
			JB_SetRef(Thg, JB_Syx_OperatorPlus(JB_SyxThg, _tmPf22->Name));
			JB_Decr(_tmPf22);
		}
	}
	JB_Decr(ch);
	Message* arg = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
	if (CreatesError) {
		Message* _tmPf24 = JB_Incr(((Message*)JB_Ring_First(exp)));
		Message* _tmPf23 = JB_Incr(((Message*)JB_Ring_NextSib(_tmPf24)));
		JB_Decr(_tmPf24);
		Message* L = JB_Incr(_tmPf23);
		JB_Decr(_tmPf23);
		if ((!JB_Str_Equals(name, JB_LUB[1637], false))) {
			JB_SetRef(L, SC_Msg_ExpectParamsTransform(L, exp->Position, exp, JB_LUB[0]));
		}
		 else {
			if (true) {
				JB_Msg_SyntaxExpect(exp, nil);
			}
		}
		JB_Tree_SyntaxAppend(arg, L);
		JB_Decr(L);
	}
	if (JB_Str_Equals(name, JB_LUB[1591], false)) {
		JB_Msg_AppendSyx(arg, JB_SyxTmp, JB_LUB[1593]);
	}
	if (((JB_Str_Equals(name, JB_LUB[1566], false))) and ({
		Message* _tmPf26 = JB_Incr(SC_Func_SourceArg(self));
		bool _tmPf25 = SC_Msg_WithinLoop(pp, _tmPf26);
		JB_Decr(_tmPf26);
		 _tmPf25;
	})) {
		JB_Msg_AppendSyx(arg, JB_SyxTmp, JB_LUB[1566]);
	}
	 else if (((JB_Str_Equals(name, JB_LUB[1766], false))) and ({
		Message* _tmPf28 = JB_Incr(SC_Func_SourceArg(self));
		bool _tmPf27 = SC_Msg_WithinLoop(pp, _tmPf28);
		JB_Decr(_tmPf28);
		 _tmPf27;
	})) {
		JB_Msg_AppendSyx(arg, JB_SyxTmp, JB_LUB[1635]);
	}
	 else if (DoesReturn) {
		Message* _tmPf29 = JB_Incr(JB_Msg_Msg(arg, JB_SyxTmp, JB_LUB[1899]));
		JB_Msg_AppendSyx(_tmPf29, JB_SyxQues, JB_LUB[1811]);
		JB_Decr(_tmPf29);
	}
	JB_Decr(name);
	JB_SetRef(Thg, SC_Msg_Negate(Thg));
	Message* if_ = JB_Incr(JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1698]));
	JB_Tree_SyntaxAppend(if_, Thg);
	JB_Decr(Thg);
	JB_Tree_SyntaxAppend(if_, arg);
	JB_Decr(arg);
	if (UsePrev) {
		(JB_Ring_PrevSibSet(pp, if_));
	}
	 else {
		(JB_Ring_NextSibSet(pp, if_));
	}
	JB_Decr(pp);
	JB_Decr(if_);
	JB_Tree_Remove(RemoveMe);
	JB_Decr(RemoveMe);
}

void SC_Func_Flatten(SCFunction* self) {
	fn_asm fp = JB_fn_asm_table[JB_SyxArg];
	Message* _tmPf0 = JB_Incr(SC_Func_SourceArg(self));
	(fp)((&SC__TreeAssembler_StdState), _tmPf0, SC_int_Reg(0));
	JB_Decr(_tmPf0);
}

void SC_Func_FLookupSet(SCFunction* self, SCNode* Value) {
	if (JB_Object_FastIsa(Value, &SCClassData)) {
		JB_SetRef(self->Cls, Value);
		self->Parent = ((SCClass*)Value)->Modul;
	}
	 else {
		self->Parent = SC_Base_ProjectFix(Value);
	}
	if (SC__Imp_Curr) {
		self->Project = SC__Imp_Curr;
		return;
	}
	Message* S = JB_Incr(self->Source);
	if (S) {
		SCFile* f = JB_Incr(SC_Msg_SCFile(S));
		if (JB_File_SyntaxCast(f)) {
			self->Project = f->Proj;
		}
		JB_Decr(f);
	}
	JB_Decr(S);
}

bool SC_Func_FoundOneCpp(SCFunction* self, JB_String* n) {
	if (JB_Str_Equals(n, JB_LUB[1575], false)) {
		self->NoAutoComplete = 1;
		self->IsCppInBuilt = 2;
		return true;
	}
	if (JB_Str_Equals(n, JB_LUB[1572], false)) {
		self->NoAutoComplete = 1;
		self->IsCppInBuilt = 1;
		return true;
	}
	if (JB_Str_Equals(n, JB_LUB[1573], false)) {
		self->NoAutoComplete = 1;
		self->IsExternalLib = true;
		return true;
	}
	return false;
}

void SC_Func_FuncDecls(SCFunction* self) {
	JB_SetRef(SC__Func_CurrFunc, self);
	Message* P = JB_Incr(((Message*)JB_Tree_Second(self->Source)));
	if ((!P)) {
		JB_Decr(P);
		return;
	}
	if (SC_Func_SyntaxIs(self, kSC__FunctionType_Constructor)) {
		SC_Func_AddConstructorReturn(self, P);
	}
	Message* fc = JB_Incr(((Message*)JB_Ring_First(P)));
	if (fc) {
		if ((fc->Func == JB_SyxThg) or (fc->Func == JB_SyxDot)) {
			SC_Func_DeclsPrototypeClass(self, fc);
		}
	}
	JB_Decr(fc);
	Message* A = JB_Incr(SC_Func_SourceArg(self));
	SCArg* space = JB_Incr(SC_Msg_SCArg(A, self, nil));
	JB_Decr(A);
	if ((JB_Msg_EqualsSyx(P, JB_SyxList, false)) or ((JB_Msg_EqualsSyx(P, JB_SyxBra, false)) or (JB_Msg_EqualsSyx(P, JB_SyxPrm, false)))) {
		P->Func = JB_SyxPrm;
		SC_Func_CollectDeclsParams(self, P, space);
	}
	JB_Decr(P);
	SC__Func_FuncStats[JB_int_OperatorMin(JB_Array_Size(self->Args), 11)]++;
	if (((bool)space) and (!self->Cls)) {
		SCNode* L = JB_Incr(self->Parent);
		if ((JB_Object_FastIsa(L, &SCModuleData)) and (SC_Mod_IsProperModule(((SCModule*)L)))) {
			SC_Mod_AddModuleToFunc(((SCModule*)L), space);
		}
		JB_Decr(L);
	}
	JB_Decr(space);
	if (self->AllocCode) {
		SCDecl* r = JB_Incr(self->ReturnType);
		if (r) {
			if (r == r->Type->TypeNormal) {
				JB_SetRef(r, SC_Decl_CopyDecl(r, false));
				JB_SetRef(self->ReturnType, r);
			}
			r->AllocSource = self->AllocCode;
		}
		JB_Decr(r);
	}
}

bool SC_Func_HiderMatch(SCFunction* self, bool IsAssigns) {
	if (((bool)self) and ((bool)self->IsAssigns)) {
		return IsAssigns;
	}
	return false;
}

void SC_Func_Init_Sub(SCFunction* self, Message* node, SCNode* name_space) {
	Message* arg = JB_Incr(SC_Msg_NormaliseFunc(node, nil));
	JB_SetRef(node->Obj, self);
	if (name_space) {
		if ((!JB_Msg_SyntaxEquals(node, JB_LUB[1734], false))) {
			JB_Array_SyntaxAppend(SC__Comp_FuncList, self);
		}
		(SC_Func_FLookupSet(self, name_space));
		SCModule* _tmPf0 = JB_Incr(SC_Base_SpaceModule(name_space, nil));
		if ((!_tmPf0)) {
			JB_Decr(_tmPf0);
			JB_Decr(arg);
			return;
		}
		JB_SetRef(self->Refs, _tmPf0->DefaultRefs);
		JB_Decr(_tmPf0);
		JB_SetRef(SC__Func_CurrFunc, self);
	}
	SC_Func_ParseName(self, node);
	if (true) {
		JB_ErrorReceiver* _usingf1 = JB_Incr(JB_Rec_SyntaxUsing(JB_ErrorDelayer));
		SC_Func_PreProcessExpects(self);
		SC_Func_TranStrings(self);
		JB_Rec_SyntaxUsingComplete(_usingf1);
		JB_Decr(_usingf1);
	}
	SC_Func_PreRead(self, arg);
	SC_Func_SetBlindCasts(self, name_space);
	if (JB_Msg_SyntaxEquals(node, JB_LUB[1776], false)) {
		SC_Func_MakeMacro(self, arg);
	}
	JB_Decr(arg);
}

SCObject* SC_Func_InsertIn(SCFunction* self, SCNode* parent, JB_String* name) {
	JB_SetRef(self->Name, name);
	if (JB_Object_FastIsa(parent, &SCClassData)) {
		JB_SetRef(self->Cls, parent);
		self->Parent = ((SCClass*)parent)->Modul;
	}
	 else {
		JB_SetRef(self->Cls, nil);
		self->Parent = parent;
	}
	return SC_Base_SyntaxAccess(parent, name);
}

bool SC_Func_IsAllocOrNew(SCFunction* self) {
	return SC_Func_SyntaxIs(self, kSC__FunctionType_Constructor);
}

bool SC_Func_IsARealSpdFunc(SCFunction* self) {
	if (self->IsWrapper or ((bool)self->IsMacro)) {
		return false;
	}
	JB_SetRef(SC__Func_CurrFunc, self);
	return true;
}

bool SC_Func_IsBehaviour(SCFunction* self) {
	SCDecl* _tmPf0 = self->ProtoDecl;
	if ((!_tmPf0)) {
		return nil;
	}
	return SC_Class_IsInterface(_tmPf0->Type);
}

bool SC_Func_IsConstructorOnModule(SCFunction* self, SCFunction* old) {
	if (SC_Func_SyntaxIs(self, kSC__FunctionType_Constructor)) {
		SCNode* p = old->Parent;
		return p == self->Cls->Modul;
	}
	return false;
}

void SC_Func_IsCppInBuiltSet(SCFunction* self, int Value) {
	if (((bool)Value) and (!self->IsCppInBuilt)) {
		SC_Func_MakeParamsReal(self);
	}
	self->IsCppInBuilt = Value;
}

bool SC_Func_IsReal(SCFunction* self) {
	return (self != nil) and (!self->IsMacro);
}

Message* SC_Func_IsSimpleCast(SCFunction* self) {
	if ((!self->Source)) {
		JB_Object_SyntaxExpect(nil);
		return nil;
	}
	Message* found = ((Message*)JB_Ring_First(JB_Msg_Last(self->Source, JB_SyxArg)));
	if ((!(((bool)found) and (JB_Tree_IsLast(found) and (SC_Msg_OperatorIsTmp(found, JB_LUB[1899])))))) {
		return nil;
	}
	found = ((Message*)JB_Ring_First(found));
	if ((!((JB_Tree_IsLast(found)) and (((JB_Msg_EqualsSyx(found, JB_SyxType, false))) and (SC_Msg_OperatorIsThing(((Message*)JB_Ring_First(found)), JB_LUB[1934])))))) {
		return nil;
	}
	return found;
}

bool SC_Func_IsUnused(SCFunction* self) {
	SCImport* p = self->Project;
	if (p) {
		if ((!p->WarnUnusedFuncs)) {
			return nil;
		}
	}
	return (!self->MyReacher) and ((!self->IsDisabled) and ((!SC_SCObject_IsVisible(self)) and (((!SC_Func_SyntaxIs(self, kSC__FunctionType_ConOrDes))) and (!SC_Func_IsAllocOrNew(self)))));
}

SCFunction* SC_Func_Last(SCFunction* self) {
	SCFunction* rz = nil;
	rz = self;
	while (true) {
		SCFunction* _tmPf0 = rz->NextFunc;
		if ((!_tmPf0)) {
			break;
		}
		rz = _tmPf0;
	};
	return rz;
}

SCDecl* SC_Func_MacroFix(SCFunction* self, SCDecl* contains, SCNode* name_space, SCParamArray* Incoming) {
	SCDecl* rz = nil;
	Message* Orig = JB_Incr(Incoming->Exp);
	if ((!Orig)) {
		debugger;
		JB_Decr(Orig);
		JB_Decr(rz);
		return nil;
	}
	Array* R = JB_Incr(SC_PA_CopyArgs(Incoming));
	JB_Msg_BecomeMacro(Orig, self->IsMacro, R);
	JB_Decr(R);
	SC_Msg_MacroFixSub(Orig, contains);
	JB_SetRef(rz, SC_TypeOfExpr(Orig, name_space, nil));
	JB_Decr(Orig);
	if ((!(rz))) {
		JB_SetRef(rz, JB_TypeVoid);
	}
	JB_SafeDecr(rz);
	return rz;
}

void SC_Func_MakeMacro(SCFunction* self, Message* arg) {
	Message* C = ((Message*)JB_Ring_First(arg));
	Message* prm = ((Message*)JB_Ring_PrevSib(arg));
	if ((!(((bool)C) and (!((Message*)JB_Ring_NextSib(C)))))) {
		SC_SCObject_Fail(self, JB_LUB[1006]);
	}
	if (JB_Ring_HasChildren(prm)) {
		JB_Str_SyntaxExpect(JB_LUB[1005]);
	}
	JB_SetRef(self->IsMacro, JB_Macro_ConstructorMsg(nil, C));
}

void SC_Func_MakeNilChecker(SCFunction* self, Message* msg) {
	SC_Func_NilSelff(self, msg, kSC__NilState_Optional);
	self->IsNilChecker = 1;
}

void SC_Func_MakeParamsReal(SCFunction* self) {
	{
		Array* _LoopSrcf2 = self->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* a = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (a == nil) {
				break;
			}
			int i = _if0;
			if (SC_Decl_CouldUpgradeToReal(a)) {
				(JB_Array_ValueSet(self->Args, i, SC_Decl_DefaultToReal(a)));
			}
			_if0++;
		};
	}
	;
	SCDecl* r = self->ReturnType;
	if (r) {
		if (SC_Decl_CouldUpgradeToReal(r)) {
			JB_SetRef(self->ReturnType, SC_Decl_DefaultToReal(r));
		}
	}
}

JB_String* SC_Func_MakeProtoClassName(SCFunction* self, JB_String* start) {
	JB_String* name = JB_Incr(start);
	SCNode* p = self->Parent;
	while (p) {
		if (JB_Object_FastIsa(p, &SCModuleData)) {
			SCClass* CurrCls = ((SCModule*)p)->Cls;
			if ((!CurrCls)) {
				break;
			}
			JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1426], name));
			JB_SetRef(name, JB_Str_OperatorPlus(CurrCls->Name, _tmPf0));
			JB_Decr(_tmPf0);
		}
		p = p->Parent;
	};
	if ((!JB_Ind_SyntaxCast(JB_Str_FindByte(name, '_', 0, JB_int__Max())))) {
		JB_SetRef(name, JB_Str_OperatorPlus(JB_LUB[868], name));
	}
	JB_SafeDecr(name);
	return name;
}

void SC_Func_MarkRecursive(SCFunction* self, SCFunction* EndAt) {
	SCFunction* s = self;
	while (true) {
		(SC_Func_SyntaxIsSet(s, kSC__FunctionType_Recursive, true));
		if (s == EndAt) {
			return;
		}
		s = s->DepthFinder;
		if ((!((s != nil) and (s != EndAt)))) {
			return;
		}
	};
}

bool SC_Func_NeedsExport(SCFunction* self) {
	return ((bool)(self->MyReacher)) or self->IsAPI;
}

Message* SC_Func_NewDefaultRel(SCFunction* self, Message* place, SCDecl* d) {
	if ((!SC_Decl_IsCArray(d))) {
		Message* def = d->Default;
		if ((!(def))) {
			def = SC_Decl_CreateDefault(d, place, true);
		}
		return SC_NewEqRelWithMsgMsg(SC_Decl_DeclToDot(d, SC_Func_Self(self)), def);
	}
	return nil;
}

void SC_Func_NilSelff(SCFunction* self, Message* where, NilState v) {
	if ((self->NilSelf)) {
		JB_Msg_SyntaxExpect(where, JB_LUB[633]);
		return;
	}
	self->NilSelf = v;
}

SCFunction* SC_Func_ParamlessConstructor(SCFunction* self) {
	{
		SCFunction* f = self;
		while (f) {
			Message* prm = JB_Msg_NeedSyxInt(f->Source, JB_SyxPrm, 1);
			Message* last = ((Message*)JB_Ring_Last(prm));
			if ((!last)) {
				return f;
			}
			if ((JB_Msg_EqualsSyx(last, JB_SyxDecl, false)) and (JB_Tree_SyntaxEquals(last, 1, false))) {
				return f;
			}
			f = f->NextFunc;
		};
	}
	;
	return nil;
}

JB_String* SC_Func_ParamUniquer(SCFunction* self, JB_String* s) {
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(fs, s);
	JB_FS_AppendString(fs, JB_LUB[1381]);
	int first = 0 + (self->Cls != nil);
	int last = JB_Array_Size(self->Args) - 1;
	if (last < first) {
		JB_FS_AppendByte(fs, '0');
	}
	 else {
		{
			IntRange _LoopSrcf2 = JB_int_OperatorTo(first, last);
			int __Endf0 = _LoopSrcf2[1];
			int i = _LoopSrcf2[0];
			while (i < __Endf0) {
				SCDecl* a = JB_Incr(((SCDecl*)JB_Array_Value(self->Args, i)));
				if (a) {
					JB_String* _tmPf3 = JB_Incr(JB_Str_TitleCase(a->Type->Modul->CppPart, nil));
					JB_FS_AppendString(fs, _tmPf3);
					JB_Decr(_tmPf3);
				}
				JB_Decr(a);
				i++;
			};
		};
	}
	JB_String* _tmPf4 = JB_Incr(JB_FS_SyntaxCast(fs));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf4);
	return _tmPf4;
}

JB_String* SC_Func_ParentName(SCFunction* self) {
	SCClass* c = self->Cls;
	if (c) {
		return c->Name;
	}
	SCNode* Mod = self->Parent;
	if (JB_Object_FastIsa(Mod, &SCModuleData)) {
		if ((!((SCModule*)Mod)->IsImport)) {
			return ((SCModule*)Mod)->Name;
		}
	}
	return JB_LUB[0];
}

bool SC_Func_ParseName(SCFunction* self, Message* node) {
	JB_String* fType = node->Name;
	Message* cname = ((Message*)JB_Ring_First(node));
	if ((!cname)) {
		return nil;
	}
	cname->Func = JB_SyxThg;
	JB_SetRef(self->Name, cname->Name);
	if (JB_Str_Equals(fType, JB_LUB[1692], false)) {
		self->NoAutoComplete = 2;
	}
	 else if (JB_Str_Equals(fType, JB_LUB[1483], false)) {
		self->IsAPI = true;
	}
	 else if (JB_Str_Equals(fType, JB_LUB[1940], false)) {
		self->IsAssigns = 2;
		self->HidesProperties = true;
	}
	 else if (JB_Str_Equals(fType, JB_LUB[1685], false)) {
		self->HidesProperties = true;
	}
	if ((!self->Cls)) {
		0;
	}
	 else if (JB_Msg_SyntaxEquals(cname, JB_LUB[1564], true)) {
		(SC_Func_SyntaxIsSet(self, kSC__FunctionType_Constructor, true));
	}
	 else if (JB_Msg_SyntaxEquals(cname, JB_LUB[1601], true)) {
		(SC_Func_SyntaxIsSet(self, kSC__FunctionType_Destructor, true));
	}
	return SC_Msg_TestFuncName(cname);
}

void SC_Func_PreProcessExpects(SCFunction* self) {
	Array* list = nil;
	{
		Message* _LoopSrcf3 = JB_Incr(SC_Func_SourceArg(self));
		Message* ch = JB_Incr(_LoopSrcf3);
		Message* _afterf1 = JB_Incr(((Message*)JB_Ring_FlatAfter(_LoopSrcf3)));
		while (((bool)(ch)) and (ch != _afterf1)) {
			Message* _N_f2 = JB_Incr(((Message*)JB_Ring_FlatNext0(ch)));
			if (SC_Msg_NeedsPreprocess(ch)) {
				if ((!(JB_Array_SyntaxCast(list)))) {
					JB_SetRef(list, JB_Array_Constructor0(nil));
				}
				JB_Array_SyntaxAppend(list, ch);
			}
			JB_SetRef(ch, _N_f2);
			JB_Decr(_N_f2);
		};
		JB_Decr(ch);
		JB_Decr(_afterf1);
		;
		JB_Decr(_LoopSrcf3);
	}
	;
	if (list == nil) {
		JB_Decr(list);
		return;
	}
	{
		int _if4 = 0;
		while (true) {
			Message* ch = JB_Incr(((Message*)JB_Array_Value(list, _if4)));
			if (ch == nil) {
				JB_Decr(ch);
				break;
			}
			if ((JB_Msg_EqualsSyx(ch, JB_SyxTRel, false)) or (JB_Msg_EqualsSyx(ch, JB_SyxARel, false))) {
				SC_Func_FixCnj(self, ch);
			}
			 else if (JB_Msg_EqualsSyx(ch, JB_SyxRel, false)) {
				SC_RelSetOrExpansion(ch);
			}
			 else if ((!JB_Msg_SyntaxEquals(ch, JB_LUB[2027], false))) {
				SC_Func__Tran_Expect(self, ch, nil);
			}
			JB_Decr(ch);
			_if4++;
		};
	}
	;
	{
		int _if6 = 0;
		while (true) {
			Message* ch = JB_Incr(((Message*)JB_Array_Value(list, _if6)));
			if (ch == nil) {
				JB_Decr(ch);
				break;
			}
			if (JB_Msg_SyntaxEquals(ch, JB_LUB[1996], false)) {
				JB_SetRef(ch->Name, JB_LUB[2027]);
				Message* w = JB_Incr(((Message*)JB_Ring_First(ch)));
				if ((!(w))) {
					JB_SetRef(w, JB_Msg_Msg(ch, JB_SyxStr, JB_LUB[1307]));
				}
				JB_FreeIfDead(SC_Msg_NeedBra(w));
				JB_Decr(w);
			}
			 else if (JB_Msg_SyntaxEquals(ch, JB_LUB[2027], false)) {
				SC_Func__Tran_Using(self, ch, nil);
			}
			JB_Decr(ch);
			_if6++;
		};
	}
	;
	JB_Decr(list);
}

void SC_Func_PreRead(SCFunction* self, Message* Arg) {
	{
		Message* s = ((Message*)JB_Ring_First(Arg));
		while (s) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(s));
			if (JB_Msg_EqualsSyx(s, JB_SyxTmp, false)) {
				DTWrap* fn = ((DTWrap*)JB_Dict_ValueStr(JB_FuncPreReader, s->Name));
				if (fn) {
					(((FP_fnPreReader)JB_Wrap_First(fn)))(self, s);
					JB_Tree_Remove(s);
				}
			}
			s = _Nf1;
		};
		;
	};
}

Message* SC_Func_Prms(SCFunction* self) {
	return JB_Msg_FindSyx(self->Source, JB_SyxPrm);
}

void SC_Func_ProtoExportName(SCFunction* self) {
	SCClass* cls = self->ProtoType;
	if (((bool)cls) and (!JB_Str_Exists(cls->CppClass))) {
		JB_SetRef(cls->CppClass, SC_Func_MakeProtoClassName(self, cls->Name));
	}
}

void SC_Func_RefFunc(SCFunction* self, Message* prm, Message* after) {
	JB__Tk_Using.Position = -1;
	Message* rz = (JB_Syx_Msg(JB_SyxFunc, JB_LUB[0]));
	(JB_Ring_NextSibSet(after, rz));
	JB_Msg_AppendSyx(rz, JB_SyxThg, self->ExportName);
	JB_SetRef(rz->Obj, prm->Obj);
	Message* lst = JB_Msg_Msg(rz, JB_SyxPrm, JB_LUB[0]);
	JB_SetRef(lst->Obj, SC__Comp_RefIncr);
	JB_Tree_SyntaxAppend(lst, prm);
}

DataTypeCode SC_Func_RegType(SCFunction* self) {
	if (self) {
		return SC_Decl_RegType(self->ReturnType);
	}
	return kJB__TC_UnusedType;
}

JB_String* SC_Func_Render(SCFunction* self, FastString* fs_in) {
	Message* it = JB_Incr(self->Source);
	if (it) {
		JB_String* _tmPf0 = JB_Incr(JB_Msg_Render(it, fs_in));
		JB_Decr(it);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(it);
	return SC_Func_Describe(self, fs_in);
}

JB_String* SC_Func_RenderName(SCFunction* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_String* pname = JB_Incr(SC_Func_ParentName(self));
	if (JB_Str_Exists(pname)) {
		JB_FS_AppendString(fs, pname);
		JB_FS_AppendByte(fs, '.');
	}
	JB_Decr(pname);
	JB_FS_AppendString(fs, self->Name);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Func_RenderParams(SCFunction* self, bool ForErrors, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendByte(fs, '(');
	JB_String* sep = JB_Incr(JB_LUB[0]);
	{
		Array* _LoopSrcf2 = JB_Incr(self->Args);
		int _if0 = 0;
		while (true) {
			SCDecl* a = JB_Incr(((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0)));
			if (a == nil) {
				JB_Decr(a);
				break;
			}
			if (a->Source) {
				JB_FS_AppendString(fs, sep);
				JB_SetRef(sep, JB_LUB[303]);
				JB_FS_SyntaxAppend(fs, a->Source);
			}
			JB_Decr(a);
			_if0++;
		};
		JB_Decr(_LoopSrcf2);
	}
	;
	if ((!ForErrors) and ((bool)self->ReturnType)) {
		JB_FS_AppendString(fs, sep);
		JB_FreeIfDead(SC_Decl_Render(self->ReturnType, fs));
	}
	JB_Decr(sep);
	JB_FS_AppendByte(fs, ')');
	JB_String* _tmPf3 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf3);
	return _tmPf3;
}

JB_String* SC_Func_RenderTitle(SCFunction* self, bool ForErrors, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	JB_FS_AppendString(fs, self->Name);
	if (JB_Array_SyntaxCast(self->Args) or ((!ForErrors) and ((bool)self->ReturnType))) {
		JB_FS_AppendByte(fs, ' ');
		JB_FreeIfDead(SC_Func_RenderParams(self, ForErrors, fs));
	}
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

SCDecl* SC_Func_Self(SCFunction* self) {
	return ((SCDecl*)JB_Array_Value(self->Args, 0));
}

void SC_Func_SetBlindCasts(SCFunction* self, SCNode* name_space) {
	if (name_space) {
		SCImport* p = name_space->Project;
		if (p) {
			self->BlindCasts = p->BlindCast;
		}
	}
	 else {
		SCImport* c = SC__Imp_Curr;
		if (c) {
			self->BlindCasts = c->BlindCast;
		}
	}
}

Message* SC_Func_SourceArg(SCFunction* self) {
	Message* arg = ((Message*)JB_Ring_Last(self->Source));
	if (JB_Msg_EqualsSyx(arg, JB_SyxArg, false)) {
		return arg;
	}
	return nil;
}

void SC_Func_StripTest(SCFunction* self) {
	SCNode* Base = SC__Comp_VisibleFuncs;
	if ((!SC_SCObject_IsVisible(self))) {
		if ((!(SC__Options_ListAllLib and (!self->IsDisabled)))) {
			return;
		}
		Base = SC__Comp_Interpreter;
	}
	SC_Func_FindReached(self, Base);
}

bool SC_Func_SyntaxEquals(SCFunction* self, JB_String* name, bool Aware) {
	if ((!self)) {
		return nil;
	}
	if (JB_Str_Equals(self->ExportName, name, true)) {
		return true;
	}
	return JB_Str_Equals(self->Name, name, true);
}

bool SC_Func_SyntaxIs(SCFunction* self, FunctionType k) {
	if (self) {
		return ((bool)(self->AllocCode & k));
	}
	return false;
}

void SC_Func_SyntaxIsSet(SCFunction* self, FunctionType k, bool Value) {
	if (Value) {
		self->AllocCode = (self->AllocCode | k);
	}
	 else {
		self->AllocCode = (self->AllocCode & (~k));
	}
}

void SC_Func_Transform(SCFunction* self) {
	SC_Func_CheckNotBadName(self);
	if (self->IsMacro) {
		return;
	}
	JB_SetRef(SC__Func_CurrFunc, self);
	SC__Mod_Curr = ((SCModule*)JB_Object_FastAs(self->Parent, &SCModuleData));
	self->Badness = 0;
	ErrorMarker StillOK = JB_Rec_Mark(JB_StdErr);
	Message* n = SC_Func_SourceArg(self);
	if ((!n)) {
		return;
	}
	SCArg* Space = SC_Msg_SCArg(n, self, nil);
	if ((!Space)) {
		return;
	}
	if (self->IsWrapper) {
		JB_FreeIfDead(SC_Base_ProcessLinkage(Space, n, JB_FuncLinkageTable));
	}
	 else {
		Message* r_z = SC_Func__Tran_Result(self);
		SC_Func__Tran_All(self, n, Space);
		if (r_z) {
			SC_Func__Tran_ResultFinish(self, r_z, Space);
		}
	}
	if ((!JB_ErrorMarker_SyntaxCast(StillOK))) {
		self->Badness = (self->Badness | 1);
	}
	 else {
		SC_Func_CallParents(self);
	}
	SC__Func_CurrFunc = nil;
	SC__Mod_Curr = nil;
}

void SC_Func_TranStrings(SCFunction* self) {
	Message* S = JB_Incr(SC_Func_SourceArg(self));
	if (((bool)S) and (!self->IsWrapper)) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Parent(S)));
		SC_Func__Tran_Strings(_tmPf0, self);
		JB_Decr(_tmPf0);
	}
	JB_Decr(S);
}

void SC_Func_TryAdd(SCFunction* self, SCNode* b) {
	SC_Base_TryAdd(b, self->Source, self, self->Name);
}

SCFunction* SC_Func_TryKeepBetter(SCFunction* self, int OldMatch, SCFunction* f, int Match) {
	if ((((bool)(OldMatch & kJB_kSuperClassMatch))) and (SC_int_IsSimpleOrPointerCast(Match))) {
		return f;
	}
	if ((((bool)(Match & kJB_kSuperClassMatch))) and (SC_int_IsSimpleOrPointerCast(OldMatch))) {
		return self;
	}
	if ((((bool)(OldMatch & kJB_kTypeCastBothWays))) and (!(((bool)(Match & kJB_kTypeCastBothWays))))) {
		return self;
	}
	if ((((bool)(Match & kJB_kTypeCastBothWays))) and (!(((bool)(OldMatch & kJB_kTypeCastBothWays))))) {
		return f;
	}
	if ((OldMatch == kJB_kSimpleMatch) and (Match != kJB_kSimpleMatch)) {
		return self;
	}
	if ((Match == kJB_kSimpleMatch) and (OldMatch != kJB_kSimpleMatch)) {
		return f;
	}
	if (OldMatch < Match) {
		return self;
	}
	if (Match < OldMatch) {
		return f;
	}
	return nil;
}

bool SC_Func_Update_Source(SCFunction* self, int start, JB_String* text, SCFile* myfile, SCObject* orig) {
	bool rz = false;
	JB_SetRef(SC__Func_CurrFunc, self);
	JB__Tk_Using.Position = -1;
	JB__Tk_Using.Flags = 0;
	JB__Tk_Using.Tag = 0;
	Message* source = JB_Incr(SC_Str_ParseClean(text));
	if (((bool)source) and (!JB_Msg_EqualsSyx(source, JB_SyxTmp, false))) {
		JB_SetRef(source, JB_Msg_NeedSyx(source, JB_SyxTmp));
	}
	if (source) {
		SC_Msg_SlidePositions(source, start);
		JB_SetRef(self->Source, source);
		SC_Func_Cleanupfunc(self, source);
		JB__Tk_Using.Flags = kJB__MsgParseFlags_Inserted;
		rz = SC_Func_UpdateSourceSub(self, source);
		JB_SetRef(source->Obj, SC_SCObject_Disambiguate(orig, source));
	}
	JB_Decr(source);
	JB__Tk_Using.Flags = 0;
	JB__Tk_Using.Tag = 0;
	return rz;
}

bool SC_Func_UpdateSourceSub(SCFunction* self, Message* src) {
	bool rz = false;
	if ((JB_Msg_EqualsSyx(src, JB_SyxTmp, true)) and (JB_Msg_SyntaxEquals(src, JB_LUB[1777], true))) {
		SC_Msg_mainfix2(src);
	}
	Message* f = ((Message*)JB_Ring_First(src));
	if ((!f)) {
		return nil;
	}
	if (JB_Msg_EqualsSyx(f, JB_SyxDot, false)) {
		f->Func = JB_SyxThg;
		JB_Tree_Clear(f);
	}
	rz = JB_Rec_OK(JB_StdErr);
	SC_Func_Init_Sub(self, src, nil);
	rz = JB_Rec_OK(JB_StdErr);
	if (rz) {
		SC_Func_FuncDecls(self);
		SC_Func_Transform(self);
		JB_Rec_Clear(JB_StdErr);
	}
	return rz;
}

bool SC_Func_UseCppName(SCFunction* self, JB_String* CppName) {
	if ((!JB_Str_Exists(CppName))) {
		return nil;
	}
	SC_Base_SetExportName(self, CppName, true);
	return true;
}

bool SC_Func_UseExportWrapper(SCFunction* self, JB_String* CppWrapper) {
	if (JB_Str_Exists(CppWrapper)) {
		self->IsWrapper = ((bool)1);
		SC_Base_SetExportName(self, CppWrapper, true);
		return true;
	}
	return false;
}

void SC_Func_ValidateSaver(SCFunction* self, JB_String* name) {
	SCClass* Cls = self->Cls;
	if ((!Cls)) {
		JB_Object_SyntaxExpect(nil);
		return;
	}
	if (Cls == JB_TypeSaveable) {
		return;
	}
	Message* First = ((Message*)JB_Ring_First(SC_Func_SourceArg(self)));
	if ((!First)) {
		JB_Msg_SyntaxWarn(self->Source, JB_LUB[1288]);
	}
	{
		Message* _LoopSrcf2 = SC_Func_SourceArg(self);
		Message* line = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (line) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(line));
			if (Cls->Super != JB_TypeSaveable) {
				SC_Msg_CheckSuperDotSave(line, name, First == line);
			}
			if ((!JB_Rec_OK(JB_StdErr))) {
				return;
			}
			line = _Nf1;
		};
		;
	};
}

int SC_Func_VisibleArgs(SCFunction* self) {
	int rz = 0;
	{
		Array* _LoopSrcf2 = self->Args;
		int _if0 = 0;
		while (true) {
			SCDecl* s = ((SCDecl*)JB_Array_Value(_LoopSrcf2, _if0));
			if (s == nil) {
				break;
			}
			if ((!s->Default)) {
				rz++;
			}
			_if0++;
		};
	}
	;
	rz = (rz - (self->Cls != nil));
	return rz;
}

void SC_Func_WantAs(SCFunction* self, NilState NS) {
	SCDecl* dcl = ((SCDecl*)JB_Array_First(self->Args));
	if ((!(((bool)dcl) and (SC_Decl_TypeSuffers(dcl) and ((bool)self->Cls))))) {
		JB_Msg_SyntaxExpect(self->Source, JB_LUB[1291]);
		return;
	}
	dcl->NilDeclared = NS;
}

JB_String* SC_Func_WrappedName(SCFunction* self) {
	if (self->IsCppInBuilt) {
		return JB_Str_OperatorPlus(self->ExportName, JB_LUB[1383]);
	}
	 else {
		return self->ExportName;
	}
}

Message* SC_Func__AlterPostCond(Message* PostCond, Message* IterPostCond, Message* NodeSrc) {
	if ((!IterPostCond)) {
		return PostCond;
	}
	IterPostCond = JB_Msg_Copy(IterPostCond, NodeSrc);
	if ((!PostCond)) {
		return IterPostCond;
	}
	return SC_NewRel(({
		Message* __imPf0 = (JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf0, PostCond);
		 __imPf0;
	}), ({
		Message* __imPf1 = (JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf1, IterPostCond);
		 __imPf1;
	}), JB_LUB[1856]);
}

Message* SC_Func__ArgToFunc(JB_String* NewName, Message* Params, Message* arg) {
	Message* rz = nil;
	JB_SetRef(rz, JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1674]));
	JB_Msg_AppendSyx(rz, JB_SyxThg, NewName);
	if (JB_Msg_EqualsSyx(Params, JB_SyxPrm, false)) {
		JB_Tree_SyntaxAppend(rz, Params);
	}
	 else if (JB_Msg_EqualsSyx(Params, JB_SyxThg, false)) {
		Message* _tmPf0 = JB_Incr(JB_Msg_Msg(rz, JB_SyxBra, JB_LUB[0]));
		JB_Tree_SyntaxAppend(_tmPf0, Params);
		JB_Decr(_tmPf0);
	}
	 else {
		debugger;
	}
	JB_Tree_SyntaxAppend(rz, arg);
	rz->Position = arg->Position;
	JB_SafeDecr(rz);
	return rz;
}

bool SC_Func__CanKeepAsSource(Message* list, Message* arg, SCDecl* d) {
	if (((JB_Msg_EqualsSyx(list, JB_SyxThg, false))) and (!SC_Msg_IsVarUseableInLoop(arg, list->Name))) {
		return true;
	}
	if (JB_Msg_EqualsSyx(list, JB_SyxNum, false)) {
		return true;
	}
	if (SC_Decl_IsCArray(d)) {
		return true;
	}
	return false;
}

bool SC_Func__CanKeepAsValue(SCIterator* iter, Message* arg, SCDecl* dcl, Message* value) {
	if ((!JB_Msg_EqualsSyx(iter->Value, JB_SyxThg, false))) {
		return nil;
	}
	if ((!value)) {
		return nil;
	}
	if (SC_Msg_IsVarUseableInLoop(arg, value->Name)) {
		return nil;
	}
	if (SC_Decl_IsCArray(dcl)) {
		return nil;
	}
	return true;
}

void SC_Func__FastStringOpt(Message* s, SCNode* name_space) {
	SCFunction* fn = SC_Msg_MsgFunc(s);
	Message* prms = ((Message*)JB_Tree_Second(s));
	if ((!(((bool)prms) and ((bool)fn)))) {
		return;
	}
	if ((!JB_Str_Equals(fn->ExportName, JB_LUB[957], false))) {
		return;
	}
	Message* item = ((Message*)JB_Ring_Last(prms));
	if (SC_Func_SyntaxEquals(SC_Msg_MsgFunc(item), JB_LUB[958], false)) {
		SC_FastStringOpts__FS(s, item);
	}
	 else {
		SC_FastStringOpts__String(s, item);
	}
}

Message* SC_Func__GetFileString(Message* msg, JB_String* name) {
	JB_Incr(name);
	if ((!((JB_Msg_SyntaxEquals(msg, JB_LUB[1651], true)) or (JB_Msg_SyntaxEquals(msg, JB_LUB[1705], true))))) {
		JB_Msg_SyntaxExpect(msg, nil);
		JB_Decr(name);
		return nil;
	}
	bool OK = JB_Str_Last(name, 0) == '?';
	if (OK) {
		JB_SetRef(name, JB_Str_Shorten(name, 1));
	}
	JB_String* data = JB_Incr(JB_LUB[0]);
	JB_File* f = JB_Incr(SC_Comp__InputFile(nil, name, msg));
	JB_Decr(name);
	if (JB_File_SyntaxCast(f)) {
		JB_SetRef(data, JB_File_ReadAll(f, 134217728, true));
		if (JB_Msg_SyntaxEquals(msg, JB_LUB[1705], true)) {
			JB_SetRef(data, SC_image__ConvertPNGToVOI(data));
		}
		OK = JB_Str_Exists(data);
	}
	if (OK) {
		JB_Msg_BecomeStr(msg, JB_SyxStr, data);
		SC__Imp_Recent = JB_int64_OperatorMax(SC__Imp_Recent, JB_File_Modified(f));
		JB_Tree_Clear(msg);
		SC_Func__ObjectifyString(msg);
		JB_Decr(f);
		JB_Decr(data);
		return msg;
	}
	JB_Decr(data);
	JB_Decr(f);
	if (true) {
		JB_Msg_SyntaxExpect(msg, JB_LUB[873]);
	}
	return nil;
}

bool SC_Func__InBuiltFunc(Message* self, JB_String* name) {
	if ((!JB_Msg_OperatorIn(self, JB_SyxQues))) {
		return nil;
	}
	if (JB_Msg_SyntaxEquals(self, name, false)) {
		Message* f = ((Message*)JB_Ring_First(self));
		if (f) {
			if (true) {
				JB_Msg_SyntaxExpect(f, nil);
			}
		}
		JB_Msg_BecomeStr(self, JB_SyxBra, JB_LUB[0]);
		return true;
	}
	return false;
}

int SC_Func__Init_() {
	{
		SC__Func_DisabledPoints = 0;
		SC__Func_OnceCount = 0;
		JB_SetRef(SC__Func_TemporalStatements, (JB_Dict_Constructor(nil)));
		DTWrap* _tmPf0 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_CppRefs)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1577], _tmPf0));
		JB_Decr(_tmPf0);
		DTWrap* _tmPf1 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_For)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1661], _tmPf1));
		JB_Decr(_tmPf1);
		DTWrap* _tmPf2 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Swap)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1976], _tmPf2));
		JB_Decr(_tmPf2);
		DTWrap* _tmPf3 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_While)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2048], _tmPf3));
		JB_Decr(_tmPf3);
		DTWrap* _tmPf4 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Description)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1600], _tmPf4));
		JB_Decr(_tmPf4);
		DTWrap* _tmPf5 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_If)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1698], _tmPf5));
		JB_Decr(_tmPf5);
		DTWrap* _tmPf6 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Else)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1624], _tmPf6));
		JB_Decr(_tmPf6);
		DTWrap* _tmPf7 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Else)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1622], _tmPf7));
		JB_Decr(_tmPf7);
		DTWrap* _tmPf8 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Once)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1843], _tmPf8));
		JB_Decr(_tmPf8);
		DTWrap* _tmPf9 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Ifn)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1699], _tmPf9));
		JB_Decr(_tmPf9);
		DTWrap* _tmPf10 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Debugger)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1593], _tmPf10));
		JB_Decr(_tmPf10);
		DTWrap* _tmPf11 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_crash))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1579], _tmPf11));
		JB_Decr(_tmPf11);
		DTWrap* _tmPf12 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Deprecate)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1599], _tmPf12));
		JB_Decr(_tmPf12);
		DTWrap* _tmPf13 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Fails)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1523], _tmPf13));
		JB_Decr(_tmPf13);
		DTWrap* _tmPf14 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_BlindCasts)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1520], _tmPf14));
		JB_Decr(_tmPf14);
		DTWrap* _tmPf15 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_DoAt)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1592], _tmPf15));
		JB_Decr(_tmPf15);
		DTWrap* _tmPf16 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_DoAt)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1617], _tmPf16));
		JB_Decr(_tmPf16);
		DTWrap* _tmPf17 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Visible)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2037], _tmPf17));
		JB_Decr(_tmPf17);
		DTWrap* _tmPf18 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Tran_Flow)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1659], _tmPf18));
		JB_Decr(_tmPf18);
		DTWrap* _tmPf19 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Print)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1877], _tmPf19));
		JB_Decr(_tmPf19);
		DTWrap* _tmPf20 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Print)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1879], _tmPf20));
		JB_Decr(_tmPf20);
		DTWrap* _tmPf21 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Print)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[2067], _tmPf21));
		JB_Decr(_tmPf21);
		DTWrap* _tmPf22 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Print)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1878], _tmPf22));
		JB_Decr(_tmPf22);
		DTWrap* _tmPf23 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Log)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1765], _tmPf23));
		JB_Decr(_tmPf23);
		DTWrap* _tmPf24 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Beep)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1511], _tmPf24));
		JB_Decr(_tmPf24);
		DTWrap* _tmPf25 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_ignore))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1700], _tmPf25));
		JB_Decr(_tmPf25);
		DTWrap* _tmPf26 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_alert))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1479], _tmPf26));
		JB_Decr(_tmPf26);
		DTWrap* _tmPf27 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_break))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1525], _tmPf27));
		JB_Decr(_tmPf27);
		DTWrap* _tmPf28 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_TemporalStatements_do))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1615], _tmPf28));
		JB_Decr(_tmPf28);
		DTWrap* _tmPf29 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_VM_Builder__BuildInstructions)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1449], _tmPf29));
		JB_Decr(_tmPf29);
		DTWrap* _tmPf30 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_NotAllowed))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1566], _tmPf30));
		JB_Decr(_tmPf30);
		DTWrap* _tmPf31 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)(&SC_Func__Tran_NotAllowed))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1635], _tmPf31));
		JB_Decr(_tmPf31);
		DTWrap* _tmPf32 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Quit)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1887], _tmPf32));
		JB_Decr(_tmPf32);
		DTWrap* _tmPf33 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Return)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1899], _tmPf33));
		JB_Decr(_tmPf33);
		DTWrap* _tmPf34 = JB_Incr(JB_Wrap_ConstructorVoidPtr(nil, ((void*)((&SC_Func__Tran_Rejoin)))));
		(JB_Dict_ValueSet(SC__Func_TemporalStatements, JB_LUB[1892], _tmPf34));
		JB_Decr(_tmPf34);
	}
	;
	return 0;
}

int SC_Func__InitCode_() {
	{
	}
	;
	JB_SetRef(SC__SCStrings_RenderInsides, SC_Str_ParseCleanWipe(JB_LUB[48]));
	JB_SetRef(SC__SCStrings_RenderNewParams, SC_Str_ParseCleanWipe(JB_LUB[47]));
	JB_SetRef(SC__SCStrings_RenderFinish, JB_Msg_FindSyxName(SC__SCStrings_RenderInsides, JB_SyxTmp, JB_LUB[1655], false));
	return 0;
}

void SC_Func__Link(SCFunction* fn) {
	ASMFunc* mu = fn->ASM;
	if ((!mu)) {
		return;
	}
}

void SC_Func__LinkAll(Array* Funcs) {
	{
		int _if0 = 0;
		while (true) {
			SCFunction* fn = ((SCFunction*)JB_Array_Value(Funcs, _if0));
			if (fn == nil) {
				break;
			}
			if (fn->MyReacher) {
				SC_Func__Link(fn);
			}
			_if0++;
		};
	};
}

SCNode* SC_Func__NeuLibrary(Message* node, SCNode* name_space, Message* ErrPlace) {
	if (true) {
		JB_Msg_SyntaxExpect(node, JB_LUB[755]);
	}
	SC__Options_ProjectIsLibrary = true;
	return SC_Func__NeuMain(node, name_space, ErrPlace);
}

SCNode* SC_Func__NeuMain(Message* node, SCNode* name_space, Message* ErrPlace) {
	SCNode* rz = nil;
	if (name_space != SC__Comp_program) {
		JB_Msg_SyntaxExpect(node, JB_LUB[743]);
		JB_Decr(rz);
		return nil;
	}
	Message* fn_src = JB_Incr(SC_Msg_MainFix(node));
	if (fn_src) {
		SC__Comp_HasMainFunc = true;
		SCModule* m = JB_Incr(SC__Comp_Project->Mod);
		JB_SetRef(rz, SC_Func__NewFunc(fn_src, m, ErrPlace));
		if (JB_Object_FastIsa(rz, &SCModuleData)) {
			JB_SetRef(SC__Comp_MainFunc, SC_Class__ProcessExtend(fn_src, false, m));
			JB_Tree_Remove(fn_src);
		}
		JB_Decr(m);
	}
	JB_Decr(fn_src);
	JB_SafeDecr(rz);
	return rz;
}

SCNode* SC_Func__NeuSyx(Message* node, SCNode* name_space, Message* ErrPlace) {
	SCNode* rz = nil;
	MessagePosition Using = JB_Msg_SyntaxUsing(node);
	Message* NewNode = JB_Incr(SC_Func__Tran_Syx(node));
	if (NewNode) {
		JB_SetRef(rz, SC_Func__NewHelper(NewNode, name_space, ErrPlace));
	}
	JB_Decr(NewNode);
	JB_MsgPos_Destructor((&Using));
	JB_SafeDecr(rz);
	return rz;
}

SCNode* SC_Func__NewConstructor(Message* node, SCNode* name_space, Message* ErrPlace) {
	JB_SetRef(node->Name, JB_LUB[1674]);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
	Message* _tmPf1 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[785]));
	(JB_Ring_FirstSet(node, _tmPf1));
	JB_Decr(_tmPf1);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	SCNode* _tmPf2 = JB_Incr(SC_Func__NewFunc(node, name_space, ErrPlace));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(_tmPf2);
	return _tmPf2;
}

SCNode* SC_Func__NewCppWrapper(Message* node, SCNode* name_space, Message* ErrPlace) {
	SCNode* rz = nil;
	Message* name = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	if ((!name)) {
		JB_Decr(name);
		JB_Decr(rz);
		return nil;
	}
	Message* prm = JB_Incr(((Message*)JB_Ring_NextSib(name)));
	if ((!prm)) {
		JB_Decr(prm);
		JB_Decr(name);
		JB_Decr(rz);
		return nil;
	}
	if ((!JB_Tree_IsLast(prm))) {
		JB_Msg_SyntaxExpect(prm, nil);
		JB_Decr(prm);
		JB_Decr(name);
		JB_Decr(rz);
		return nil;
	}
	JB_Decr(prm);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(name);
	Message* thg = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, name->Name));
	JB_Decr(name);
	if (JB_Msg_SyntaxEquals(node, JB_LUB[1572], false)) {
		JB_SetRef(thg, SC_Msg_WrapWith(thg, JB_SyxBra, JB_LUB[0]));
	}
	bool IsNothing = (JB_Msg_SyntaxEquals(node, JB_LUB[1575], false));
	bool IsLib = (JB_Msg_SyntaxEquals(node, JB_LUB[1573], false));
	JB_SetRef(node->Name, JB_LUB[1674]);
	Message* _tmPf2 = JB_Incr(JB_Msg_Msg(node, JB_SyxArg, JB_LUB[0]));
	Message* _tmPf1 = JB_Incr(JB_Msg_Msg(_tmPf2, JB_SyxTmp, JB_LUB[1578]));
	JB_Decr(_tmPf2);
	JB_Tree_SyntaxAppend(_tmPf1, thg);
	JB_Decr(thg);
	JB_Decr(_tmPf1);
	JB_SetRef(rz, SC_Func__NewFunc(node, name_space, ErrPlace));
	if (JB_Object_FastIsa(rz, &SCFunctionData)) {
		((SCFunction*)rz)->NoAutoComplete = 1;
		if (IsNothing) {
			(SC_Func_IsCppInBuiltSet(((SCFunction*)rz), 2));
		}
		 else if (JB_Msg_SyntaxEquals(node, JB_LUB[1572], false)) {
			(SC_Func_IsCppInBuiltSet(((SCFunction*)rz), 1));
		}
		((SCFunction*)rz)->IsExternalLib = IsLib;
		SC_Func_MakeParamsReal(((SCFunction*)rz));
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(rz);
	return rz;
}

SCNode* SC_Func__NewDestructor(Message* node, SCNode* name_space, Message* ErrPlace) {
	if (JB_Object_FastIsa(name_space, &SCClassData)) {
		if ((((SCClass*)name_space)->IsRole)) {
			JB_Msg_SyntaxExpect(node, JB_LUB[1602]);
			return nil;
		}
		JB_SetRef(node->Name, JB_LUB[1674]);
		if (true) {
			MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
			Message* _tmPf1 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[819]));
			(JB_Ring_FirstSet(node, _tmPf1));
			JB_Decr(_tmPf1);
			JB_MsgPos_SyntaxUsingComplete((&_usingf0));
			JB_MsgPos_Destructor((&_usingf0));
		}
		return SC_Func__NewFunc(node, ((SCClass*)name_space), ErrPlace);
	}
	return nil;
}

SCNode* SC_Func__NewFunc(Message* node, SCNode* name_space, Message* ErrPlace) {
	if ((!node)) {
		return nil;
	}
	Message* name = JB_Incr(((Message*)JB_Ring_First(node)));
	if ((!name)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1071]);
		JB_Decr(name);
		return nil;
	}
	if (JB_Msg_EqualsSyx(name, JB_SyxDot, false)) {
		JB_Decr(name);
		return SC_Class__ExtendOneFunc(node, nil, ErrPlace);
	}
	JB_Decr(name);
	return SC_Func__NewFuncSub(node, name_space);
}

SCFunction* SC_Func__NewFuncSub(Message* node, SCNode* name_space) {
	SCFunction* fn = JB_Incr(SC_Func_Constructor(nil, node));
	SC_Func_Init_Sub(fn, node, name_space);
	JB_SafeDecr(fn);
	return fn;
}

SCNode* SC_Func__NewHelper(Message* node, SCNode* name_space, Message* ErrPlace) {
	if ((!JB_Str_IsLower(node->Name))) {
		(JB_Msg_SyntaxDeprecate(node, JB_LUB[906]));
	}
	return SC_Func__NewFunc(node, name_space, ErrPlace);
}

SCNode* SC_Func__NewHider(Message* node, SCNode* name_space, Message* ErrPlace) {
	if ((!JB_Object_Isa(name_space, &SCClassData))) {
		JB_Msg_SyntaxExpect(ErrPlace, JB_LUB[1044]);
		return nil;
	}
	return SC_Func__NewFunc(node, name_space, ErrPlace);
}

SCNode* SC_Func__NewMacro(Message* node, SCNode* name_space, Message* ErrPlace) {
	return SC_Func__NewFunc(node, name_space, ErrPlace);
}

SCNode* SC_Func__NewProtoType(Message* node, SCNode* name_space, Message* ErrPlace) {
	return SC_Func__NewProtoTypeSub(node, name_space, ErrPlace, JB_LUB[0]);
}

SCModule* SC_Func__NewProtoTypeSub(Message* node, SCNode* parent, Message* ErrPlace, JB_String* ForInterface) {
	if (JB_Object_FastIsa(parent, &SCClassData)) {
		if ((!JB_Str_Exists(ForInterface))) {
			JB_FreeIfDead(SC_Msg_NormaliseFunc(node, ((SCClass*)parent)));
		}
		parent = ((SCClass*)((SCClass*)parent)->Modul);
	}
	 else {
		if ((!SC_Base_ExpectModule(parent, node))) {
			return nil;
		}
	}
	SCFunction* f = JB_Incr(((SCFunction*)SC_Func__NewFunc(node, parent, ErrPlace)));
	if ((!f)) {
		JB_Decr(f);
		return nil;
	}
	JB_FreeIfDead(((SCFunction*)JB_Array_Pop(SC__Comp_FuncList)));
	MessagePosition Using = JB_Msg_SyntaxUsing(node);
	Message* tmp = JB_Incr(JB_Syx_OperatorPlus(JB_SyxTmp, JB_LUB[1586]));
	JB_Msg_AppendSyx(tmp, JB_SyxThg, f->Name);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(node)));
	JB_Tree_SyntaxAppend(tmp, _tmPf0);
	JB_Decr(_tmPf0);
	SCModule* modul = JB_Incr(SC_Class__DataTypeSub(tmp, parent, node, ForInterface, kSC__SCNodeType_FuncProto));
	JB_Decr(tmp);
	if (modul) {
		SCClass* clss = JB_Incr(modul->Cls);
		clss->BaseType = kSC__SCNodeType_FuncProto;
		clss->IsBuiltin = false;
		JB_SetRef(clss->FuncProto, f);
		JB_SetRef(f->ProtoType, clss);
		JB_Decr(clss);
		JB_Array_SyntaxAppend(SC__Comp_ProtoTypes, f);
		SC_Base_TryAdd(parent, node, modul, modul->Name);
		if ((!JB_Str_Exists(ForInterface))) {
			JB_SetRef(modul, SC__Comp_program);
		}
	}
	JB_Decr(f);
	JB_SafeDecr(modul);
	JB_MsgPos_Destructor((&Using));
	return modul;
}

SCNode* SC_Func__NewRender(Message* node, SCNode* name_space, Message* ErrPlace) {
	SCNode* rz = nil;
	SCClass* cls = JB_Incr(SC_Base_IsNormalObject(name_space));
	if (SC_Func__Tran_Render(node, cls)) {
		JB_SetRef(rz, SC_Beh__NewActual(node, name_space, ErrPlace));
	}
	 else {
		JB_SetRef(rz, SC_Func__NewFunc(node, name_space, ErrPlace));
	}
	JB_Decr(cls);
	if (rz) {
		(SC_Func_SyntaxIsSet(((SCFunction*)rz), kSC__FunctionType_Render, true));
	}
	JB_SafeDecr(rz);
	return rz;
}

void SC_Func__ObjectifyString(Message* msg) {
	msg->Func = JB_SyxSStr;
}

void SC_Func__String_Expand(Message* msg, SCFunction* fn) {
	JB_Incr(msg);
	Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_Parent(msg)));
	Message* P = JB_Incr(_tmPf7);
	JB_Decr(_tmPf7);
	if (SC_Msg_OperatorIsTmp(P, JB_LUB[1609]) or SC_Msg_OperatorIsTmp(P, JB_LUB[1600])) {
		msg->Func = JB_SyxStr;
		JB_Decr(msg);
		JB_Decr(P);
		return;
	}
	bool URL = JB_Msg_OperatorIn(msg, JB_Syxurl);
	if (URL) {
		JB_FreeIfDead(SC_Func__GetFileString(P, msg->Name));
		JB_SetRef(msg, P);
	}
	if (SC_Func__InBuiltFunc(msg, JB_LUB[1605])) {
		JB_SetRef(msg->Name, JB_Str_Digest(msg->Name));
	}
	 else if (JB_Msg_EqualsSyx(P, JB_SyxArg, false)) {
		JB_FreeIfDead(SC_Msg_WrapWith(msg, JB_SyxTmp, JB_LUB[1879]));
	}
	JB_Decr(P);
	if ((!JB_FreeIfDead(((Message*)JB_Ring_First(msg))))) {
		SC_Func__ObjectifyString(msg);
		JB_Decr(msg);
		return;
	}
	if ((!fn)) {
		JB_Decr(msg);
		return;
	}
	Message* _tmPf8 = JB_Incr(SC_Msg_ParentPoint(msg));
	Message* Point = JB_Incr(_tmPf8);
	JB_Decr(_tmPf8);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(msg);
	JB_String* FSName = JB_Incr(SC_UniqueTmpVar(fn, JB_LUB[1670]));
	JB_String* StrName = JB_Incr(JB_Str_OperatorPlus(FSName, JB_LUB[1460]));
	JB_Decr(StrName);
	Message* Dot = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1808])));
	Message* _tmPf9 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[871]));
	JB_Tree_SyntaxAppend(Dot, (_tmPf9));
	JB_Decr(_tmPf9);
	Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(Dot, (_tmPf10));
	JB_Decr(_tmPf10);
	Message* decl = JB_Incr(SC_MakeDecl(JB_LUB[871], FSName, Dot, 0));
	JB_Decr(Dot);
	(JB_Ring_PrevSibSet(Point, decl));
	Message* errpos = JB_Incr(msg);
	{
		Message* item = JB_Incr(((Message*)JB_Ring_First(msg)));
		while (item) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(item)));
			Syntax syx = item->Func;
			if ((syx == JB_SyxEmb) or (syx == JB_SyxStr)) {
				if (syx == JB_SyxEmb) {
					JB_SetRef(errpos, item);
				}
				SC_Func__ObjectifyString(item);
			}
			JB_SetRef(item, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(item);
		;
	}
	;
	if ((SC__Mod_Curr)) {
		JB_Msg_SyntaxExpect(errpos, JB_LUB[1242]);
	}
	{
		Message* item = JB_Incr(((Message*)JB_Ring_First(msg)));
		while (item) {
			Message* _Nf4 = JB_Incr(((Message*)JB_Ring_NextSib(item)));
			Message* _tmPf11 = ({
				Message* __imPf5 = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1251])));
				Message* _tmPf12 = JB_Incr(JB_Syx_Msg(JB_SyxThg, FSName));
				JB_Tree_SyntaxAppend(__imPf5, (_tmPf12));
				JB_Decr(_tmPf12);
				Message* _tmPf13 = ({
					Message* __imPf6 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
					JB_Tree_SyntaxAppend(__imPf6, item);
					JB_SafeDecr(nil);
					 __imPf6;
				});
				JB_Tree_SyntaxAppend(__imPf5, _tmPf13);
				JB_Decr(_tmPf13);
				JB_SafeDecr(nil);
				 __imPf5;
			});
			(JB_Ring_PrevSibSet(Point, _tmPf11));
			JB_Decr(_tmPf11);
			JB_SetRef(item, _Nf4);
			JB_Decr(_Nf4);
		};
		JB_Decr(item);
		;
		JB_Decr(errpos);
	}
	;
	JB_Decr(Point);
	bool WeAreAppending = false;
	Message* fnc = JB_Incr(((Message*)JB_Ring_Parent(msg)));
	if (JB_Msg_EqualsSyx(fnc, JB_SyxPrm, false)) {
		JB_SetRef(fnc, ((Message*)JB_Ring_Parent(fnc)));
		if ((JB_Msg_EqualsSyx(fnc, JB_SyxDot, true)) and (JB_Msg_SyntaxEquals(fnc, JB_LUB[1251], true))) {
			WeAreAppending = true;
		}
	}
	JB_Decr(fnc);
	JB_Msg_BecomeStr(msg, JB_SyxDot, JB_LUB[1684]);
	Message* _tmPf14 = JB_Incr(JB_Syx_Msg(JB_SyxThg, FSName));
	JB_Decr(FSName);
	JB_Tree_SyntaxAppend(msg, (_tmPf14));
	JB_Decr(_tmPf14);
	Message* _tmPf15 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(msg, (_tmPf15));
	JB_Decr(_tmPf15);
	JB_Decr(msg);
	;
	JB_Decr(decl);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

Message* SC_Func__TypedTempMoveOut(Message* msg, JB_String* name) {
	JB_Incr(name);
	MessagePosition Using = JB_Msg_SyntaxUsing(msg);
	if ((!(JB_Str_Exists(name)))) {
		SCFunction* _tmPf1 = JB_Incr(SC_Msg_MsgOwningFunc(msg));
		JB_SetRef(name, SC_UniqueTmpVar(_tmPf1, JB_LUB[1997]));
		JB_Decr(_tmPf1);
	}
	Message* repl = JB_Incr((JB_Syx_Msg(JB_SyxThg, name)));
	JB_FreeIfDead(SC_Msg_ReplaceWith(msg, repl));
	Message* _tmPf2 = JB_Incr(SC_Msg_ParentPoint(repl));
	Message* p = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	Message* insert = JB_Incr(msg);
	if (JB_Msg_EqualsSyx(msg, JB_SyxRel, false)) {
		JB_SetRef(insert, ({
			Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf0, (msg));
			JB_SafeDecr(__imPf0);
			 __imPf0;
		}));
	}
	Message* dcl = JB_Incr(SC_MakeDecl(JB_LUB[0], name, insert, 0));
	(JB_Ring_PrevSibSet(p, dcl));
	JB_Decr(p);
	if (JB_Msg_OperatorIn(repl, JB_SyxArg)) {
		JB_Tree_Remove(repl);
	}
	SCDecl* OldDcl = JB_Incr(SC_Msg_AsDecl(msg));
	if (OldDcl) {
		JB_SetRef(insert->Obj, OldDcl);
		JB_SetRef(OldDcl, SC_Decl_CopyDecl(OldDcl, false));
		(SC_Decl_NameSet(OldDcl, name));
		JB_SetRef(repl->Obj, OldDcl);
		JB_SetRef(dcl->Obj, OldDcl);
	}
	JB_Decr(repl);
	JB_Decr(insert);
	JB_Decr(OldDcl);
	JB_Decr(name);
	JB_SafeDecr(dcl);
	JB_MsgPos_Destructor((&Using));
	return dcl;
}

Message* SC_Func__TempMoveOut(Message* msg, Message* parent) {
	SCDecl* OldDecl = JB_Incr(SC_Msg_AsDecl(msg));
	if ((!OldDecl)) {
		(JB_Ring_PrevSibSet(parent, msg));
		JB_Decr(OldDecl);
		return msg;
	}
	JB_Decr(OldDecl);
	MessagePosition Using = JB_Msg_SyntaxUsing(msg);
	SCFunction* _tmPf0 = JB_Incr(SC_Msg_MsgOwningFunc(msg));
	JB_String* Name = JB_Incr(SC_UniqueTmpVar(_tmPf0, JB_LUB[1997]));
	JB_Decr(_tmPf0);
	Message* NameThing = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, Name));
	JB_FreeIfDead(SC_Msg_ReplaceWith(msg, NameThing));
	Message* declmsg = JB_Incr(SC_MakeDecl(JB_LUB[0], Name, msg, kSC__SCDeclInfo_Body));
	JB_Decr(Name);
	(JB_Ring_PrevSibSet(parent, declmsg));
	SCDecl* d = JB_Incr(((SCDecl*)declmsg->Obj));
	JB_Decr(declmsg);
	JB_SetRef(NameThing->Obj, d);
	JB_Decr(d);
	JB_SafeDecr(NameThing);
	JB_MsgPos_Destructor((&Using));
	return NameThing;
}

SCDecl* SC_Func__Tran_AfterRel(Message* msg, SCNode* name_space, Message* side) {
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(msg)));
	Message* exp = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	if (JB_Msg_SyntaxEquals(msg, JB_LUB[215], false)) {
		SCDecl* ty = JB_Incr(SC_TypeOfExpr(exp, name_space, nil));
		if ((!ty)) {
			JB_Decr(ty);
			JB_Decr(exp);
			return nil;
		}
		SCDecl* _tmPf6 = JB_Incr(SC_Decl_MakeReal(ty));
		JB_Decr(ty);
		JB_Decr(exp);
		JB_SafeDecr(_tmPf6);
		return _tmPf6;
	}
	if ((!((JB_Msg_SyntaxEquals(msg, JB_LUB[309], false)) or (JB_Msg_SyntaxEquals(msg, JB_LUB[299], false))))) {
		JB_Msg_SyntaxExpect(msg, nil);
		JB_Decr(exp);
		return nil;
	}
	Message* P = JB_Incr(((Message*)JB_Ring_Parent(msg)));
	JB_Decr(P);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(exp);
	Message* exp_copy = nil;
	if ((!JB_Msg_EqualsSyx(exp, JB_SyxThg, false))) {
		JB_SetRef(exp_copy, JB_Msg_Copy(exp, nil));
	}
	SCDecl* Type = JB_Incr(SC_TypeOfExpr(exp, name_space, nil));
	if ((!Type)) {
		JB_Decr(Type);
		JB_Decr(exp_copy);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(exp);
		return nil;
	}
	if (Type->PointerCount > 0) {
		SCDecl* _tmPf4 = JB_Incr(SC_Decl_CheckMath(Type, msg));
		JB_Decr(Type);
		JB_Decr(exp_copy);
		JB_SafeDecr(_tmPf4);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(exp);
		return _tmPf4;
	}
	int numc = SC_Class_NumericCount(Type->Type);
	if ((!SC_Class_IsObject(Type->Type)) and ((!Type->HiderFunc) and (numc <= 1))) {
		JB_Decr(exp_copy);
		JB_SafeDecr(Type);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(exp);
		return Type;
	}
	Message* R = nil;
	if (((bool)numc) or ((bool)Type->HiderFunc)) {
		Message* _tmPf2 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxNum, JB_LUB[450]));
		JB_String* _tmPf3 = JB_Incr(JB_Str_Range(msg->Name, 0, 1));
		JB_SetRef(R, SC_NewRel(exp, _tmPf2, _tmPf3));
		JB_Decr(_tmPf2);
		JB_Decr(_tmPf3);
	}
	 else {
		JB_String* name = JB_Incr(((JB_StringC*)JB_Ternary((JB_Msg_SyntaxEquals(msg, JB_LUB[299], false)), JB_LUB[1810], JB_LUB[1876])));
		JB_SetRef(R, JB_Syx_OperatorPlus(JB_SyxDot, name));
		JB_Decr(name);
		JB_Tree_SyntaxAppend(R, exp);
		JB_Msg_AppendSyx(R, JB_SyxEmb, JB_LUB[0]);
	}
	JB_Decr(Type);
	if ((!exp_copy)) {
		JB_SetRef(exp_copy, JB_Msg_Copy(exp, nil));
	}
	JB_Decr(exp);
	JB_Msg_BecomeStr(msg, JB_SyxRel, JB_LUB[0]);
	JB_Tree_SyntaxAppend(msg, exp_copy);
	JB_Decr(exp_copy);
	JB_Msg_AppendSyx(msg, JB_SyxOpp, JB_LUB[587]);
	JB_Tree_SyntaxAppend(msg, R);
	JB_Decr(R);
	JB_SetRef(msg->Obj, nil);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	SCDecl* _tmPf5 = JB_Incr(SC_TypeOfExpr(msg, name_space, nil));
	JB_MsgPos_Destructor((&_usingf0));
	JB_SafeDecr(_tmPf5);
	return _tmPf5;
}

void SC_Func__Tran_All(SCFunction* fn, Message* s, SCNode* p) {
	JB_Incr(p);
	JB_Incr(s);
	if (SC_TooManyErrors()) {
		JB_Decr(s);
		JB_Decr(p);
		return;
	}
	Syntax f = s->Func;
	if (f == JB_SyxArg) {
		Message* pr = JB_Incr(((Message*)JB_Ring_Parent(s)));
		if ((!((!JB_Msg_EqualsSyx(pr, JB_SyxBra, false)) and (!JB_Msg_EqualsSyx(pr, JB_SyxType, false))))) {
			JB_Decr(s);
			JB_Decr(p);
			JB_Decr(pr);
			return;
		}
		JB_Decr(pr);
		SC_CollectDeclsFuncBody(s, p);
	}
	 else if (f == JB_SyxDecl) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(s)));
		JB_SetRef(s, SC_DeclsDefault(_tmPf0));
		JB_Decr(_tmPf0);
		if (s) {
			SC_Func__Tran_All(fn, s, p);
		}
		JB_Decr(s);
		JB_Decr(p);
		return;
	}
	 else if (f == JB_SyxArr) {
		SC_Func__Tran_Array(s, p);
	}
	 else if (f == JB_SyxType) {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(s)));
		SC_Func__Tran_All(fn, _tmPf1, p);
		JB_Decr(_tmPf1);
		JB_Decr(s);
		JB_Decr(p);
		return;
	}
	 else if (f == JB_SyxTmp) {
		SC_Func__Tran_Temporal(fn, s, p);
		if (JB_Msg_SyntaxEquals(s, JB_LUB[1700], false)) {
			JB_Decr(s);
			JB_Decr(p);
			return;
		}
	}
	 else if (f == JB_SyxList) {
		Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_First(s)));
		if (JB_Msg_EqualsSyx(_tmPf2, JB_SyxItem, false)) {
			SC_Tran_MsgList(fn, s, p);
		}
		JB_Decr(_tmPf2);
	}
	 else if (f == JB_SyxMsg) {
		SC_Tran_Msg(fn, s, p);
	}
	 else if ((!((f == JB_SyxThg) or ((f == JB_SyxOpp) or ((f == JB_SyxItem) or (f == JB_SyxPrm)))))) {
		JB_FreeIfDead(SC_TypeOfExpr(s, p, nil));
		if (JB_Msg_EqualsSyx(s, JB_SyxFunc, false)) {
			SC_Func__FastStringOpt(s, p);
		}
	}
	 else if (f == JB_SyxUnit) {
		JB_Decr(s);
		JB_Decr(p);
		return;
	}
	if (((JB_Msg_EqualsSyx(s, JB_SyxArg, false))) and (f != JB_SyxArg)) {
		SCArg* _tmPf3 = JB_Incr(SC_Msg_SCArg(s, p, nil));
		JB_SetRef(p, _tmPf3);
		JB_Decr(_tmPf3);
	}
	Message* ch = JB_Incr(((Message*)JB_Ring_First(s)));
	while (ch) {
		Message* n = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
		if (JB_Msg_EqualsSyx(ch, JB_SyxArg, false)) {
			SCArg* _tmPf4 = JB_Incr(SC_Msg_SCArg(ch, p, s));
			SC_Func__Tran_All(fn, ch, _tmPf4);
			JB_Decr(_tmPf4);
		}
		 else {
			SC_Func__Tran_All(fn, ch, p);
		}
		JB_SetRef(ch, ((Message*)JB_Ring_NextSib(ch)));
		if ((!ch) and (((bool)n) and ((bool)JB_FreeIfDead(((Message*)JB_Ring_Parent(n)))))) {
			JB_SetRef(ch, n);
		}
		JB_Decr(n);
	};
	JB_Decr(ch);
	JB_Decr(p);
	JB_Decr(s);
}

void SC_Func__Tran_Array(Message* S, SCNode* name_space) {
	SCDecl* Type = JB_Incr(SC_Msg_AsDecl(S));
	if ((!Type)) {
		JB_Decr(Type);
		return;
	}
	Message* thg = JB_Incr(SC_Msg_IsSetIntoVar(S));
	if ((!thg)) {
		Message* _tmPf6 = JB_Incr(SC_Msg_ParentPoint(S));
		JB_SetRef(thg, SC_Func__TempMoveOut(S, _tmPf6));
		JB_Decr(_tmPf6);
		SCDecl* _tmPf7 = JB_Incr(SC_Msg_AsDecl(thg));
		SC_Base_TryAdd(name_space, thg, _tmPf7, thg->Name);
		JB_Decr(_tmPf7);
	}
	Message* _tmPf8 = JB_Incr(SC_Msg_NiceParent(S));
	Message* P = JB_Incr(_tmPf8);
	JB_Decr(_tmPf8);
	Message* _tmPf9 = JB_Incr(SC_Msg_ParentPoint(P));
	Message* Place = JB_Incr(_tmPf9);
	JB_Decr(_tmPf9);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(S);
	Message* DotNew = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1808])));
	Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxThg, Type->Type->Name));
	JB_Decr(Type);
	JB_Tree_SyntaxAppend(DotNew, (_tmPf10));
	JB_Decr(_tmPf10);
	Message* _tmPf11 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(DotNew, (_tmPf11));
	JB_Decr(_tmPf11);
	if (JB_Msg_OperatorIn(P, JB_SyxDecl)) {
		SCDecl* d = JB_Incr(SC_Msg_AsDecl(P));
		if ((!d)) {
			JB_Decr(d);
			JB_Decr(DotNew);
			JB_MsgPos_Destructor((&_usingf0));
			JB_Decr(Place);
			JB_Decr(P);
			JB_Decr(thg);
			return;
		}
		JB_SetRef(d->Default, DotNew);
		JB_Decr(d);
	}
	JB_Decr(P);
	SC_Msg_FixMultiArr(S);
	{
		Message* item = JB_Incr(((Message*)JB_Ring_First(S)));
		while (item) {
			Message* _Nf2 = JB_Incr(((Message*)JB_Ring_NextSib(item)));
			Message* Rel = nil;
			if (JB_Msg_EqualsSyx(item, JB_SyxItem, false)) {
				JB_Tree_Remove(item);
				JB_SetRef(Rel, ({
					Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
					Message* _tmPf12 = ({
						Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxAcc, JB_LUB[0])));
						Message* _tmPf13 = JB_Incr(JB_Syx_Msg(JB_SyxThg, thg->Name));
						JB_Tree_SyntaxAppend(__imPf4, (_tmPf13));
						JB_Decr(_tmPf13);
						Message* _tmPf14 = ({
							Message* __imPf5 = JB_Incr((JB_Syx_Msg(JB_SyxArr, JB_LUB[0])));
							Message* _tmPf15 = JB_Incr(((Message*)JB_Ring_First(item)));
							JB_Tree_SyntaxAppend(__imPf5, _tmPf15);
							JB_Decr(_tmPf15);
							JB_SafeDecr(nil);
							 __imPf5;
						});
						JB_Tree_SyntaxAppend(__imPf4, _tmPf14);
						JB_Decr(_tmPf14);
						JB_SafeDecr(nil);
						 __imPf4;
					});
					JB_Tree_SyntaxAppend(__imPf3, _tmPf12);
					JB_Decr(_tmPf12);
					Message* _tmPf16 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[587]));
					JB_Tree_SyntaxAppend(__imPf3, (_tmPf16));
					JB_Decr(_tmPf16);
					Message* _tmPf17 = JB_Incr(((Message*)JB_Ring_Last(item)));
					JB_Tree_SyntaxAppend(__imPf3, _tmPf17);
					JB_Decr(_tmPf17);
					JB_SafeDecr(__imPf3);
					 __imPf3;
				}));
			}
			 else {
				JB_SetRef(Rel, JB_Syx_Msg(JB_SyxDot, JB_LUB[1251]));
				JB_Msg_AppendSyx(Rel, JB_SyxThg, thg->Name);
				Message* _tmPf18 = JB_Incr(JB_Msg_Msg(Rel, JB_SyxPrm, JB_LUB[0]));
				JB_Tree_SyntaxAppend(_tmPf18, item);
				JB_Decr(_tmPf18);
			}
			(JB_Ring_NextSibSet(Place, Rel));
			JB_SetRef(Place, Rel);
			JB_FreeIfDead(SC_TypeOfExpr(Rel, name_space, nil));
			JB_Decr(Rel);
			JB_SetRef(item, _Nf2);
			JB_Decr(_Nf2);
		};
		JB_Decr(item);
		;
	}
	;
	JB_Decr(thg);
	JB_Decr(Place);
	JB_FreeIfDead(SC_TypeOfExpr(DotNew, name_space, nil));
	SC_Msg_SafeReplaceWith(S, DotNew);
	JB_Decr(DotNew);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__Tran_Beep(SCFunction* fn, Message* node, SCNode* name_space) {
	SC_Msg_MiniTran(node, name_space, JB_LUB[1484]);
}

void SC_Func__Tran_BlindCasts(SCFunction* fn, Message* node, SCNode* name_space) {
	if ((!fn)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1108]);
		return;
	}
	Message* thg = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxThg));
	if (thg) {
		JB_Tree_Remove(node);
		fn->BlindCasts = SC_Msg_Blind(thg);
	}
	JB_Decr(thg);
}

void SC_Func__Tran_CppRefs(SCFunction* fn, Message* node, SCNode* name_space) {
	if ((!fn)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1108]);
		return;
	}
	JB_SetRef(fn->Refs, SC_CppRefs_Constructor(nil, node));
	JB_Tree_Remove(node);
}

void SC_Func__Tran_Debugger(SCFunction* fn, Message* node, SCNode* name_space) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(node)));
	if ((!ch)) {
		JB_SetRef(node->Name, JB_LUB[1593]);
		(SC_Msg_TmpTypeSet(node, kSC__ASMtmp_kDebugger));
		JB_Decr(ch);
		return;
	}
	if ((!(((JB_Msg_SyntaxEquals(node, JB_LUB[1593], false))) and ((!JB_FreeIfDead(((Message*)JB_Ring_NextSib(ch)))))))) {
		JB_Msg_SyntaxExpect(node, nil);
		JB_Decr(ch);
		return;
	}
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
		JB_FreeIfDead(SC_ExpandToBool(ch, name_space));
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(node)));
		JB_FreeIfDead(SC_Msg_Negate(_tmPf1));
		JB_Decr(_tmPf1);
		JB_SetRef(node->Name, JB_LUB[1698]);
		Message* _tmPf2 = JB_Incr(JB_Msg_Msg(node, JB_SyxArg, JB_LUB[0]));
		Message* dbg = JB_Incr(JB_Msg_Msg(_tmPf2, JB_SyxTmp, JB_LUB[1593]));
		JB_Decr(_tmPf2);
		(SC_Msg_TmpTypeSet(dbg, kSC__ASMtmp_kDebugger));
		JB_Decr(dbg);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(ch);
	SC_Func__Tran_If(fn, node, name_space);
}

void SC_Func__Tran_Deprecate(SCFunction* fn, Message* node, SCNode* name_space) {
	Message* stuff = JB_Incr(JB_Msg_NeedFirst(node));
	if ((!stuff)) {
		JB_Decr(stuff);
		return;
	}
	if ((!JB_Msg_ExpectLast(stuff, JB_LUB[0]))) {
		JB_Decr(stuff);
		return;
	}
	if ((!JB_Msg_EqualsSyx(stuff, JB_SyxList, false)) and (!JB_Msg_EqualsSyx(stuff, JB_SyxBra, false))) {
		JB_SetRef(stuff, SC_Msg_WrapWith(stuff, JB_SyxList, JB_LUB[0]));
	}
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
		stuff->Func = JB_SyxPrm;
		JB_Msg_BecomeStr(node, JB_SyxBra, JB_LUB[0]);
		Message* Dot = JB_Incr(JB_Msg_Msg(node, JB_SyxDot, JB_LUB[1256]));
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(stuff)));
		JB_Tree_SyntaxAppend(Dot, _tmPf1);
		JB_Decr(_tmPf1);
		JB_Tree_SyntaxAppend(Dot, stuff);
		JB_Decr(Dot);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(stuff);
	JB_FreeIfDead(SC_TypeOfExpr(node, name_space, nil));
}

void SC_Func__Tran_Description(SCFunction* fn, Message* node, SCNode* name_space) {
	if ((!fn)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1108]);
		return;
	}
	Message* str = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxStr));
	if (str) {
		if ((!fn->IsDisabled)) {
			if (JB_Str_Exists(fn->Description)) {
				JB_Msg_SyntaxExpect(node, JB_LUB[744]);
			}
			JB_SetRef(fn->Description, str->Name);
		}
		JB_Tree_Remove(node);
	}
	JB_Decr(str);
}

void SC_Func__Tran_DoAt(SCFunction* fn, Message* node, SCNode* name_space) {
	Message* ch = JB_Incr(((Message*)JB_Ring_First(node)));
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
		JB_Msg_BecomeStr(node, JB_SyxFunc, JB_LUB[0]);
		JB_FreeIfDead(JB_Msg_Msg(node, JB_SyxThg, JB_LUB[814]));
		Message* _tmPf1 = JB_Incr(JB_Msg_Msg(node, JB_SyxPrm, JB_LUB[0]));
		JB_Tree_SyntaxAppend(_tmPf1, ch);
		JB_Decr(_tmPf1);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(ch);
	JB_FreeIfDead(SC_TypeOfExpr(node, name_space, nil));
}

void SC_Func__Tran_Else(SCFunction* fn, Message* node, SCNode* name_space) {
	Message* p = ((Message*)JB_Ring_Parent(node));
	if ((!((JB_Msg_EqualsSyx(p, JB_SyxTmp, false)) and ((JB_Msg_SyntaxEquals(p, JB_LUB[1698], false)) or (JB_Msg_SyntaxEquals(p, JB_LUB[1624], false)))))) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1299]);
		return;
	}
}

void SC_Func__Tran_Expect(SCFunction* fn, Message* node, SCNode* name_space) {
	Message* ch = JB_Incr(JB_Msg_NeedFirst(node));
	if ((!ch)) {
		JB_Decr(ch);
		return;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
	Message* Ch1 = JB_Incr(((Message*)JB_Ring_NextSib(ch)));
	JB_String* N = JB_Incr(node->Name);
	JB_SetRef(node->Name, JB_LUB[1698]);
	if (JB_Str_Equals(N, JB_LUB[1633], false)) {
		JB_SetRef(N, JB_LUB[1541]);
		JB_Msg_ExpectLast(ch, JB_LUB[0]);
	}
	bool NewStyle = ((JB_Str_Equals(N, JB_LUB[1541], false)) or (JB_Str_Equals(N, JB_LUB[2044], false)));
	if (NewStyle and (!Ch1)) {
		JB_SetRef(Ch1, ch);
		JB_SetRef(ch, JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[1649]));
		(JB_Ring_PrevSibSet(Ch1, ch));
	}
	if (name_space) {
		JB_FreeIfDead(SC_TypeOfExpr(ch, name_space, nil));
	}
	JB_SetRef(ch, SC_Msg_Negate(ch));
	Message* arg = JB_Incr(JB_Msg_Msg(node, JB_SyxArg, JB_LUB[0]));
	if (((JB_Str_Equals(N, JB_LUB[1636], false))) or (NewStyle)) {
		Message* _tmPf1 = JB_Incr(SC_Msg_ExpectParamsTransform(Ch1, node->Position, ch, N));
		JB_Tree_SyntaxAppend(arg, _tmPf1);
		JB_Decr(_tmPf1);
	}
	 else if (JB_Str_Equals(N, JB_LUB[1591], false)) {
		JB_Msg_AppendSyx(arg, JB_SyxTmp, JB_LUB[1593]);
	}
	JB_Decr(ch);
	JB_Decr(Ch1);
	if ((!NewStyle)) {
		if (JB_Str_Equals(N, JB_LUB[1766], false)) {
			JB_Msg_AppendSyx(arg, JB_SyxTmp, JB_LUB[1635]);
		}
		 else {
			Message* _tmPf2 = JB_Incr(JB_Msg_Msg(arg, JB_SyxTmp, JB_LUB[1899]));
			JB_Msg_AppendSyx(_tmPf2, JB_SyxQues, JB_LUB[1811]);
			JB_Decr(_tmPf2);
		}
	}
	JB_Decr(N);
	JB_Decr(arg);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__Tran_Fails(SCFunction* fn, Message* node, SCNode* name_space) {
	if ((!fn)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1108]);
		return;
	}
	(SC_Msg_TmpTypeSet(node, kSC__ASMtmp_kFail));
	fn->Badness = (fn->Badness | 128);
	if (JB_Tree_IsLast(node)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1147]);
		return;
	}
}

void SC_Func__Tran_For(SCFunction* fn, Message* node, SCNode* name_space) {
	JB_Incr(name_space);
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
		JB_Msg_BecomeStr(node, JB_SyxArg, JB_LUB[0]);
		JB_SetRef(name_space, SC_Msg_SCArg(node, name_space, nil));
		SC_Func__Tran_ForSub(fn, node, name_space);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(name_space);
}

void SC_Func__Tran_ForStart(Message* arg, Message* index, SCNode* p) {
	Message* start = JB_Incr(SC_Msg_GetMarker(arg, JB_LUB[1959]));
	if ((!start)) {
		JB_Decr(start);
		return;
	}
	if ((!index)) {
		JB_Msg_SyntaxExpect(arg, JB_LUB[1072]);
		JB_Decr(start);
		return;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(arg);
	JB_String* CondName = JB_Incr(SC_UniqueTmpVar(p, JB_LUB[1656]));
	Message* _tmPf3 = JB_Incr(((Message*)JB_Ring_Parent(arg)));
	Message* _tmPf5 = JB_Incr(JB_Msg_Copy(index, arg));
	Message* _tmPf4 = JB_Incr(SC_MakeDecl(JB_LUB[0], CondName, _tmPf5, 0));
	JB_Decr(_tmPf5);
	(JB_Ring_PrevSibSet(_tmPf3, _tmPf4));
	JB_Decr(_tmPf3);
	JB_Decr(_tmPf4);
	Message* IfTest = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1698])));
	Message* _tmPf6 = ({
		Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
		Message* _tmPf7 = ({
			Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxRel, JB_LUB[0])));
			Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxThg, CondName));
			JB_Tree_SyntaxAppend(__imPf2, (_tmPf8));
			JB_Decr(_tmPf8);
			Message* _tmPf9 = JB_Incr(JB_Syx_Msg(JB_SyxOpp, JB_LUB[216]));
			JB_Tree_SyntaxAppend(__imPf2, (_tmPf9));
			JB_Decr(_tmPf9);
			Message* _tmPf10 = JB_Incr(JB_Msg_Copy(index, arg));
			JB_Tree_SyntaxAppend(__imPf2, _tmPf10);
			JB_Decr(_tmPf10);
			JB_SafeDecr(nil);
			 __imPf2;
		});
		JB_Tree_SyntaxAppend(__imPf1, _tmPf7);
		JB_Decr(_tmPf7);
		JB_SafeDecr(nil);
		 __imPf1;
	});
	JB_Decr(CondName);
	JB_Tree_SyntaxAppend(IfTest, _tmPf6);
	JB_Decr(_tmPf6);
	Message* _tmPf11 = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
	JB_Tree_SyntaxAppend(IfTest, (_tmPf11));
	JB_Decr(_tmPf11);
	(JB_Ring_FirstSet(arg, IfTest));
	Message* _tmPf12 = JB_Incr(((Message*)JB_Ring_NextSib(IfTest)));
	Message* _tmPf13 = JB_Incr(((Message*)JB_Ring_Last(IfTest)));
	JB_Decr(IfTest);
	SC_Msg_Move(_tmPf12, start, _tmPf13);
	JB_Decr(_tmPf12);
	JB_Decr(_tmPf13);
	SC_SC_MakeComment(start);
	JB_Decr(start);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__Tran_ForSub(SCFunction* fn, Message* node, SCNode* name_space) {
	Message* list = JB_Incr(JB_Msg_NeedFirst(node));
	if ((!list)) {
		JB_Decr(list);
		return;
	}
	int Bad = 0;
	Message* index = JB_Incr(((Message*)JB_Ring_NextSib(list)));
	Message* arg = nil;
	if (JB_Msg_EqualsSyx(index, JB_SyxArg, false)) {
		JB_SetRef(arg, index);
		JB_SetRef(index, nil);
	}
	 else {
		if (index) {
			JB_SetRef(arg, ((Message*)JB_Ring_NextSib(index)));
		}
		if (arg) {
			Bad = (Bad + (!JB_Msg_Expect(arg, JB_SyxArg, nil)));
		}
		 else {
			JB_SetRef(arg, JB_Msg_Msg(node, JB_SyxArg, JB_LUB[0]));
		}
	}
	Message* value = nil;
	JB_String* IterName = JB_Incr(JB_LUB[0]);
	JB_SetRef(list, SC_Msg_UnBra(list));
	if (JB_Msg_EqualsSyx(list, JB_SyxRel, false)) {
		JB_SetRef(value, ((Message*)JB_Ring_First(list)));
		Message* opp = JB_Incr(((Message*)JB_Ring_NextSib(value)));
		if (SC_Msg_OperatorIsOpp(opp, JB_LUB[1708])) {
			JB_SetRef(list, ((Message*)JB_Ring_NextSib(opp)));
			Bad = (Bad + (!list));
			if (JB_Msg_EqualsSyx(value, JB_SyxDot, false)) {
				JB_SetRef(IterName, value->Name);
				JB_SetRef(value, JB_Msg_NeedSyx(value, JB_SyxThg));
				Bad = (Bad + (!value));
			}
		}
		 else {
			Bad++;
		}
		JB_Decr(opp);
	}
	SCIterator* iter = nil;
	SCDecl* dcl = nil;
	if ((!Bad)) {
		JB_SetRef(dcl, SC_TypeOfExpr(list, name_space, nil));
		if ((!dcl)) {
			JB_Msg_SyntaxExpect(list, JB_LUB[1066]);
		}
	}
	if (dcl) {
		JB_SetRef(iter, SC_Decl_GetIteratorAny(dcl, IterName, node));
		if (iter) {
			SC_Iter_Renuqify(iter, name_space);
			Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_Parent(iter->Yield)));
			Bad = (Bad + (!JB_Msg_Expect(_tmPf7, JB_SyxArg, nil)));
			JB_Decr(_tmPf7);
			if (index == arg) {
				JB_SetRef(index, nil);
			}
			 else if ((bool)index) {
				Bad = (Bad + (!JB_FreeIfDead(JB_Msg_NeedSyx(index, JB_SyxThg))));
			}
		}
	}
	JB_Decr(IterName);
	if ((!(((bool)dcl) and ((!Bad) and (((bool)iter) and ((bool)list)))))) {
		JB_Decr(dcl);
		JB_Decr(iter);
		JB_Decr(value);
		JB_Decr(arg);
		JB_Decr(index);
		JB_Decr(list);
		return;
	}
	if (index) {
		JB_Tree_Remove(index);
		JB_SetRef(index, ((Message*)JB_Ring_First(index)));
	}
	Message* _tmPf8 = JB_Incr(((Message*)JB_Ring_First(node)));
	JB_Tree_Remove(_tmPf8);
	JB_Decr(_tmPf8);
	bool CanKeepSource = SC_Func__CanKeepAsSource(list, arg, dcl);
	int CanKeepValue = ((int)SC_Func__CanKeepAsValue(iter, arg, dcl, value));
	Message* ListName = JB_Incr(list);
	if ((!CanKeepSource)) {
		JB_String* _tmPf9 = JB_Incr(SC_UniqueTmpVar(name_space, JB_LUB[999]));
		JB_SetRef(ListName, (JB_Syx_Msg(JB_SyxThg, _tmPf9)));
		JB_Decr(_tmPf9);
		JB_FreeIfDead(SC_MakeDeclOrRel(node, ListName, list));
	}
	 else if (SC_Decl_IsCArray(dcl)) {
		JB_SetRef(ListName, (JB_Syx_Msg(JB_SyxQues, JB_LUB[354])));
	}
	SC_Iter_RenameSelf(iter, ListName);
	JB_Decr(ListName);
	if (CanKeepValue) {
		SC_Iter_RenameValue(iter, value);
	}
	 else {
		JB_String* _tmPf11 = JB_Incr(SC_UniqueTmpVar(name_space, JB_LUB[1370]));
		Message* _tmPf10 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, _tmPf11));
		JB_Decr(_tmPf11);
		SC_Iter_RenameValue(iter, _tmPf10);
		JB_Decr(_tmPf10);
	}
	Message* _tmPf12 = JB_Incr(((Message*)JB_Ring_NextSib(arg)));
	Message* PostCond = JB_Incr(SC_Func__AlterPostCond(_tmPf12, iter->LoopEndCond, node));
	JB_Decr(_tmPf12);
	if (PostCond) {
		JB_SetRef(PostCond, SC_Msg_NeedBra(PostCond));
	}
	Message* node2 = JB_Incr(SC_Iter_MakeWhile(iter, arg, PostCond));
	JB_Decr(PostCond);
	if ((!node2)) {
		JB_Decr(node2);
		JB_Decr(dcl);
		JB_Decr(iter);
		JB_Decr(value);
		JB_Decr(arg);
		JB_Decr(index);
		JB_Decr(list);
		return;
	}
	JB_Tree_SyntaxAppend(node, node2);
	Message* iterwhile = JB_Incr(iter->WhileLoop);
	SC_Msg_CopyAllBefore(iterwhile, node2, node);
	SC_Msg_CopyAllAfter(iterwhile, node2, node);
	JB_Decr(iterwhile);
	SC_Func__Tran_ForStart(arg, iter->Index, name_space);
	Message* FirstInLoop = JB_Incr(((Message*)JB_Ring_First(arg)));
	if ((!FirstInLoop)) {
		JB_SetRef(FirstInLoop, (JB_Syx_Msg(JB_SyxSheb, JB_LUB[1626])));
		JB_Tree_SyntaxAppend(arg, FirstInLoop);
	}
	Message* EndLoopMarker = JB_Incr(SC_Msg_NeedMarker(arg, JB_LUB[1655], true));
	SC_Msg_CopyAllAfter(iter->Yield, EndLoopMarker, node);
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(arg);
		SC_Msg_CopyAllBeforeInto(iter->Yield, arg, node);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	if (SC_Decl_IsCArray(dcl)) {
		{
			Message* c = JB_Incr(node);
			Message* _afterf2 = JB_Incr(((Message*)JB_Ring_FlatAfter(node)));
			while (((bool)(c)) and (c != _afterf2)) {
				Message* _N_f3 = JB_Incr(((Message*)JB_Ring_FlatNext0(c)));
				if ((JB_Msg_EqualsSyx(c, JB_SyxQues, false)) and (JB_Msg_SyntaxEquals(c, JB_LUB[354], false))) {
					Message* _tmPf13 = JB_Incr(JB_Msg_Copy(list, nil));
					JB_FreeIfDead(SC_Msg_ReplaceWith(c, _tmPf13));
					JB_Decr(_tmPf13);
				}
				JB_SetRef(c, _N_f3);
				JB_Decr(_N_f3);
			};
			JB_Decr(c);
			JB_Decr(_afterf2);
			;
		};
	}
	{
		Message* msg = JB_Incr(arg);
		Message* _afterf5 = JB_Incr(((Message*)JB_Ring_FlatAfter(arg)));
		while (((bool)(msg)) and (msg != _afterf5)) {
			Message* _N_f6 = JB_Incr(((Message*)JB_Ring_FlatNext0(msg)));
			if (JB_Msg_EqualsSyx(msg, JB_SyxTmp, false)) {
				if ((JB_Msg_SyntaxEquals(msg, JB_LUB[1661], false)) or (JB_Msg_SyntaxEquals(msg, JB_LUB[2048], false))) {
					JB_SetRef(msg, ((Message*)JB_Ring_FlatAfter(msg)));
					JB_Decr(_N_f6);
					continue;
				}
				 else if (JB_Msg_SyntaxEquals(msg, JB_LUB[1566], false)) {
					SC_Msg_ExpectEmpty(msg);
					SC_Msg_CopyAllAfterBefore(iter->Yield, msg, node);
				}
				 else if (JB_Msg_SyntaxEquals(msg, JB_LUB[1567], false)) {
					JB_SetRef(msg->Name, JB_LUB[1566]);
					SC_Msg_Next_Index(msg, iter, node2);
					JB_SetRef(msg, ((Message*)JB_Ring_FlatAfter(msg)));
					JB_Decr(_N_f6);
					continue;
				}
			}
			 else if (JB_Msg_EqualsSyx(msg, JB_SyxThg, false)) {
				if ((CanKeepValue == 1) and (JB_Msg_SyntaxEquals(msg, value->Name, false))) {
					JB_FreeIfDead(SC_Msg_ReplaceWith(msg, value));
					CanKeepValue = 2;
				}
			}
			 else if (JB_Msg_EqualsSyx(msg, JB_SyxType, false)) {
				Message* ty = JB_Incr(((Message*)JB_Ring_Last(msg)));
				if (JB_Msg_SyntaxEquals(ty, JB_LUB[358], false)) {
					if (dcl->Contains) {
						JB_Msg_BecomeStr(msg, JB_SyxBra, JB_LUB[0]);
						JB_SetRef(msg->Obj, dcl->Contains);
						JB_Tree_Remove(ty);
					}
					 else {
						Message* _tmPf14 = JB_Incr(((Message*)JB_Ring_First(msg)));
						JB_FreeIfDead(SC_Msg_ReplaceWith(msg, _tmPf14));
						JB_Decr(_tmPf14);
					}
				}
				JB_Decr(ty);
			}
			JB_SetRef(msg, _N_f6);
			JB_Decr(_N_f6);
		};
		JB_Decr(msg);
		JB_Decr(_afterf5);
		;
		JB_Decr(list);
	}
	;
	JB_Decr(dcl);
	SCArg* p2 = JB_Incr(SC_Msg_SCArgNested(arg, node, name_space));
	if ((!p2)) {
		if (true) {
			JB_Msg_SyntaxExpect(arg, JB_LUB[697]);
		}
	}
	 else {
		if (index) {
			Message* it_ind = JB_Incr(iter->Index);
			if (it_ind) {
				Message* _tmPf16 = JB_Incr(JB_Msg_Copy(it_ind, index));
				Message* _tmPf15 = JB_Incr(SC_MakeDeclOrRel(arg, index, _tmPf16));
				JB_Decr(_tmPf16);
				(JB_Ring_PrevSibSet(FirstInLoop, _tmPf15));
				JB_Decr(_tmPf15);
			}
			 else {
				if (true) {
					JB_Msg_SyntaxExpect(index, JB_LUB[1297]);
				}
			}
			JB_Decr(it_ind);
		}
		if (((bool)value) and (!CanKeepValue)) {
			Message* _tmPf18 = JB_Incr(JB_Msg_Copy(iter->Value, value));
			Message* _tmPf17 = JB_Incr(SC_MakeDeclOrRel(arg, value, _tmPf18));
			JB_Decr(_tmPf18);
			(JB_Ring_PrevSibSet(FirstInLoop, _tmPf17));
			JB_Decr(_tmPf17);
		}
		SC_CollectDeclsFuncBodyJustWhatWeNewlyMade(node, name_space);
		SC_Func__Tran_While(fn, node2, p2);
	}
	JB_Decr(index);
	JB_Decr(arg);
	JB_Decr(value);
	JB_Decr(iter);
	JB_Decr(node2);
	JB_Decr(FirstInLoop);
	JB_Decr(p2);
	JB_Tree_Remove(EndLoopMarker);
	JB_Decr(EndLoopMarker);
}

bool SC_Func__Tran_FuncTable(Message* msg) {
	Message* nameMsg = JB_Incr(JB_Msg_NeedSyx(msg, JB_SyxThg));
	if ((!nameMsg)) {
		JB_Decr(nameMsg);
		return nil;
	}
	Message* protoMsg = JB_Incr(((Message*)JB_Ring_NextSib(nameMsg)));
	if ((!protoMsg)) {
		JB_Decr(protoMsg);
		JB_Decr(nameMsg);
		return nil;
	}
	if ((!((JB_Msg_EqualsSyx(protoMsg, JB_SyxBra, false)) or ((JB_Msg_EqualsSyx(protoMsg, JB_SyxPrm, false)) or (JB_Msg_EqualsSyx(protoMsg, JB_SyxList, false)))))) {
		JB_Msg_SyntaxExpect(protoMsg, nil);
		JB_Decr(protoMsg);
		JB_Decr(nameMsg);
		return nil;
	}
	Message* items = JB_Incr(JB_Msg_NextOf(protoMsg, JB_SyxArg));
	if ((!items)) {
		JB_Decr(items);
		JB_Decr(protoMsg);
		JB_Decr(nameMsg);
		return nil;
	}
	Message* _tmPf4 = JB_Incr(((Message*)JB_Ring_First(protoMsg)));
	Message* ProtoFirst = JB_Incr(_tmPf4);
	JB_Decr(_tmPf4);
	JB_String* name = JB_Incr(nameMsg->Name);
	JB_Decr(nameMsg);
	JB_String* protoName = JB_Incr(ProtoFirst->Name);
	if ((!JB_Msg_EqualsSyx(ProtoFirst, JB_SyxThg, false))) {
		Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxThg, protoName));
		JB_FreeIfDead(SC_Msg_ReplaceWith(protoMsg, (_tmPf5)));
		JB_Decr(_tmPf5);
		JB_SetRef(protoName, JB_Str_OperatorPlus(JB_LUB[882], name));
		protoMsg->Func = JB_SyxPrm;
		Message* protoMsg2 = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1884])));
		Message* _tmPf6 = JB_Incr(JB_Syx_Msg(JB_SyxThg, protoName));
		JB_Tree_SyntaxAppend(protoMsg2, (_tmPf6));
		JB_Decr(_tmPf6);
		JB_Tree_SyntaxAppend(protoMsg2, protoMsg);
		(JB_Ring_NextSibSet(msg, protoMsg2));
		JB_Decr(protoMsg2);
	}
	JB_Decr(protoMsg);
	JB_Decr(ProtoFirst);
	JB_SetRef(items->Name, JB_LUB[1611]);
	items->Func = JB_SyxArr;
	JB_Tree_Clear(msg);
	msg->Func = JB_SyxDecl;
	Message* _tmPf7 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(msg, (_tmPf7));
	JB_Decr(_tmPf7);
	Message* _tmPf9 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name));
	Message* _tmPf8 = JB_Incr(SC_NewEqRelWithMsgMsg((_tmPf9), items));
	JB_Decr(_tmPf9);
	JB_Tree_SyntaxAppend(msg, _tmPf8);
	{
		Message* _Valuef2 = JB_Incr(((Message*)JB_Ring_First(items)));
		while (_Valuef2) {
			Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(_Valuef2)));
			Message* I = JB_Incr(_Valuef2);
			Message* item_value = JB_Incr(((Message*)JB_Ring_Last(I)));
			Message* item_name = JB_Incr(((Message*)JB_Ring_First(I)));
			Message* table_name = JB_Incr(item_name);
			Message* sigh = JB_Incr(item_name);
			bool ListOK = ((JB_Msg_EqualsSyx(item_name, JB_SyxPrm, false))) and ((JB_Msg_EqualsSyx(I, JB_SyxItem, false)));
			if (ListOK) {
				JB_String* _tmPf10 = JB_Incr(JB_Msg_FirstName(item_name));
				JB_Msg_BecomeStr(I, JB_SyxTmp, _tmPf10);
				JB_Decr(_tmPf10);
			}
			if (JB_Msg_EqualsSyx(I, JB_SyxTmp, false)) {
				if (JB_Msg_EqualsSyx(table_name, JB_SyxPrm, false)) {
					if ((!ListOK)) {
						JB_Msg_SyntaxExpect(I, JB_LUB[1222]);
					}
					JB_SetRef(table_name, ((Message*)JB_Ring_First(table_name)));
					JB_Tree_Remove(sigh);
				}
				 else {
					JB_SetRef(table_name, I);
				}
				JB_SetRef(item_name, I);
				if ((!item_value)) {
					JB_Msg_SyntaxExpect(I, JB_LUB[942]);
				}
			}
			 else {
				JB_Msg_Expect(I, JB_SyxItem, nil);
				if (item_value == item_name) {
					JB_Msg_Expect(I, JB_SyxNil, nil);
				}
			}
			Message* ARel = nil;
			JB_String* NewName = JB_Incr(JB_LUB[0]);
			if (SC_Msg_OperatorIsBRel(item_value, JB_LUB[242])) {
				JB_SetRef(ARel, item_value);
				JB_SetRef(item_value, ((Message*)JB_Ring_First(item_value)));
			}
			while (item_value) {
				if ((JB_Msg_EqualsSyx(item_value, JB_SyxThg, false)) or ((JB_Msg_EqualsSyx(item_value, JB_SyxDot, false)) or (JB_Msg_EqualsSyx(item_value, JB_SyxBra, false)))) {
					if ((!ARel)) {
						JB_SetRef(ARel, (JB_Syx_Msg(JB_SyxBRel, JB_LUB[242])));
					}
					 else {
						JB_SetRef(ARel, JB_Msg_Copy(ARel, nil));
					}
					Message* _tmPf11 = JB_Incr(SC_Msg_UnBra(item_value));
					JB_SetRef(item_value, ((Message*)JB_Tree_WrapWith(_tmPf11, ARel)));
					JB_Decr(_tmPf11);
				}
				 else {
					if (JB_Msg_EqualsSyx(item_value, JB_SyxEmb, false)) {
						JB_Msg_SyntaxExpect(item_value, JB_LUB[1362]);
					}
					if ((!JB_Msg_EqualsSyx(item_value, JB_SyxArg, false))) {
						Message* _tmPf12 = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
						JB_SetRef(item_value, ((Message*)JB_Tree_WrapWith(item_value, _tmPf12)));
						JB_Decr(_tmPf12);
					}
					if ((!JB_Str_Exists(NewName))) {
						JB_String* _tmPf14 = JB_Incr(SC_Msg_CollectFuncTableName(item_name));
						JB_String* _tmPf13 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1426], _tmPf14));
						JB_Decr(_tmPf14);
						JB_SetRef(NewName, JB_Str_OperatorPlus(name, _tmPf13));
						JB_Decr(_tmPf13);
						Message* _tmPf15 = JB_Incr(SC_Msg_CollectionPlace(msg));
						Message* _tmPf17 = JB_Incr(JB_Syx_Msg(JB_SyxThg, protoName));
						Message* _tmPf16 = JB_Incr(SC_Func__ArgToFunc(NewName, (_tmPf17), item_value));
						JB_Decr(_tmPf17);
						JB_Tree_SyntaxAppend(_tmPf15, _tmPf16);
						JB_Decr(_tmPf15);
						JB_Decr(_tmPf16);
					}
					Message* _tmPf18 = ({
						Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxBRel, JB_LUB[242])));
						Message* _tmPf19 = JB_Incr(JB_Syx_Msg(JB_SyxThg, NewName));
						JB_Tree_SyntaxAppend(__imPf3, (_tmPf19));
						JB_Decr(_tmPf19);
						JB_SafeDecr(nil);
						 __imPf3;
					});
					JB_Tree_SyntaxAppend(I, _tmPf18);
					JB_Decr(_tmPf18);
				}
				JB_String* iname = JB_Incr(I->Name);
				if (((JB_Msg_EqualsSyx(I, JB_SyxTmp, false))) and ((bool)table_name)) {
					Message* _tmPf20 = JB_Incr(JB_Syx_Msg(JB_SyxStr, table_name->Name));
					(JB_Ring_FirstSet(I, (_tmPf20)));
					JB_Decr(_tmPf20);
					JB_Msg_BecomeStr(I, JB_SyxItem, JB_LUB[0]);
				}
				if (((!JB_Msg_EqualsSyx(sigh, JB_SyxPrm, false))) or JB_Tree_IsLast(table_name)) {
					JB_Decr(iname);
					break;
				}
				Message* newi = JB_Incr((JB_Syx_Msg(JB_SyxTmp, iname)));
				JB_Decr(iname);
				(JB_Ring_PrevSibSet(I, newi));
				JB_SetRef(I, newi);
				JB_Decr(newi);
			};
			JB_Decr(I);
			JB_Decr(item_value);
			JB_Decr(item_name);
			JB_Decr(table_name);
			JB_Decr(ARel);
			JB_Decr(NewName);
			;
			JB_Decr(sigh);
			JB_SetRef(_Valuef2, _Nf1);
			JB_Decr(_Nf1);
		};
		JB_Decr(_Valuef2);
		;
		JB_Decr(_tmPf8);
	}
	;
	JB_Decr(items);
	JB_Decr(name);
	JB_Decr(protoName);
	return false;
}

void SC_Func__Tran_If(SCFunction* fn, Message* node, SCNode* name_space) {
	(SC_Msg_TmpTypeSet(node, kSC__ASMtmp_kIf));
	SC_Func__Tran_IfSub(node, name_space);
}

void SC_Func__Tran_Ifn(SCFunction* fn, Message* node, SCNode* name_space) {
	Message* f = JB_Incr(JB_Msg_NeedFirst(node));
	if (f) {
		JB_SetRef(node->Name, JB_LUB[1698]);
		JB_FreeIfDead(SC_Msg_Negate(f));
		SC_Func__Tran_If(fn, node, name_space);
	}
	JB_Decr(f);
}

void SC_Func__Tran_IfSub(Message* node, SCNode* name_space) {
	Message* cond = JB_Msg_NeedFirst(node);
	if ((!cond)) {
		return;
	}
	Message* arg = ((Message*)JB_Ring_NextSib(cond));
	if (arg) {
		if ((!JB_Msg_Expect(arg, JB_SyxArg, nil))) {
			return;
		}
	}
	 else {
		arg = JB_Syx_Msg(JB_SyxArg, JB_LUB[0]);
		if (JB_Msg_SyntaxEquals(node, JB_LUB[1698], false)) {
			JB_Msg_AppendSyx(arg, JB_SyxTmp, JB_LUB[1593]);
		}
		(JB_Ring_NextSibSet(cond, arg));
	}
	Message* SubTest = ((Message*)JB_Ring_NextSib(arg));
	if (SubTest) {
		if ((!(SC_Msg_OperatorIsTmp(SubTest, JB_LUB[1624]) or SC_Msg_OperatorIsTmp(SubTest, JB_LUB[1622])))) {
			JB_Msg_SyntaxExpect(SubTest, nil);
			return;
		}
		JB_Msg_ExpectLast(SubTest, JB_LUB[0]);
		if (JB_Msg_SyntaxEquals(SubTest, JB_LUB[1624], false)) {
			(SC_Msg_TmpTypeSet(SubTest, kSC__ASMtmp_kElseIf));
			SC_Func__Tran_IfSub(SubTest, name_space);
		}
		 else {
			Message* ElseArg = ((Message*)JB_Ring_First(SubTest));
			if (ElseArg) {
				if ((!(!JB_Msg_SyntaxEquals(ElseArg, JB_LUB[1698], true)))) {
					JB_Msg_SyntaxExpect(ElseArg, JB_LUB[1357]);
				}
				JB_Msg_Expect(ElseArg, JB_SyxArg, nil);
			}
			 else {
				JB_FreeIfDead(JB_Msg_Msg(SubTest, JB_SyxArg, JB_LUB[0]));
			}
		}
	}
	name_space = SC_Msg_SCArg(arg, name_space, nil);
	if ((!name_space)) {
		return;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
	cond = SC_ExpandToBool(cond, name_space);
	if ((!cond)) {
		0;
	}
	 else if (SC_Msg_IsAlwaysFalse(cond)) {
		SC_Msg_ElseNeverFires(cond);
	}
	 else {
		JB_FreeIfDead(SC_Msg_NeedBra(cond));
		if (JB_Msg_EqualsSyx(((Message*)JB_Ring_First(cond)), JB_SyxArg, false)) {
			JB_SetRef(SC_Msg_WrapWith(cond, JB_SyxBra, JB_LUB[0])->Obj, cond->Obj);
		}
		SC_Func__Tran_Isa(node, name_space);
	}
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__Tran_Isa(Message* S, SCNode* p) {
	if (SC__IsaTester_T.InUse) {
		JB_Msg_SyntaxExpect(S, JB_LUB[1319]);
		return;
	}
	SC__IsaTester_T.InUse = true;
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(S)));
	if (SC_Comp__CollectIsaTests(_tmPf1)) {
		int n = SC__IsaTester_T.Count;
		{
			int i = 0;
			while (i < n) {
				Message* isa_ = JB_Incr(SC__IsaTester_T.Items[i]);
				Message* _tmPf2 = JB_Incr(JB_Msg_FindSyx(S, JB_SyxArg));
				SC_Func__Tran_OneIsa(isa_, _tmPf2, p);
				JB_Decr(isa_);
				JB_Decr(_tmPf2);
				i++;
			};
		};
	}
	JB_Decr(_tmPf1);
	SC__IsaTester_T.InUse = false;
	SC__IsaTester_T.Count = 0;
}

void SC_Func__Tran_Log(SCFunction* fn, Message* node, SCNode* name_space) {
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
		Message* f = JB_Incr(((Message*)JB_Ring_First(node)));
		JB_Msg_AppendSyx(node, JB_SyxThg, JB_LUB[1870]);
		Message* _tmPf1 = JB_Incr(JB_Msg_Msg(node, JB_SyxPrm, JB_LUB[0]));
		JB_Tree_SyntaxAppend(_tmPf1, f);
		JB_Decr(f);
		JB_Decr(_tmPf1);
		node->Func = JB_SyxDot;
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_FreeIfDead(SC_TypeOfExpr(node, name_space, nil));
}

void SC_Func__Tran_NotAllowed(SCFunction* fn, Message* node, SCNode* name_space) {
	if ((!SC_Msg_TmpType(node))) {
		if (true) {
			JB_Msg_SyntaxExpect(node, nil);
		}
	}
}

void SC_Func__Tran_Once(SCFunction* fn, Message* node, SCNode* name_space) {
	Message* arg = JB_Incr(JB_Msg_NeedSyx(node, JB_SyxArg));
	if ((!arg)) {
		JB_Decr(arg);
		return;
	}
	if ((!JB_Msg_ExpectLast(arg, JB_LUB[0]))) {
		JB_Decr(arg);
		return;
	}
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
		JB_SetRef(node->Name, JB_LUB[1698]);
		JB_String* _tmPf2 = JB_Incr(JB_int_RenderFS(((++SC__Func_OnceCount)), nil));
		JB_String* _tmPf1 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1843], _tmPf2));
		JB_Decr(_tmPf2);
		Message* _tmPf3 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[1649]));
		JB_String* obj = JB_Incr(SC_Base_LateAddTempory(SC__Comp_program, JB_LUB[1521], _tmPf1, _tmPf3, node));
		JB_Decr(_tmPf1);
		JB_Decr(_tmPf3);
		Message* rel = JB_Incr(JB_Syx_OperatorPlus(JB_SyxRel, JB_LUB[0]));
		JB_Msg_AppendSyx(rel, JB_SyxThg, obj);
		JB_Msg_AppendSyx(rel, JB_SyxOpp, JB_LUB[587]);
		JB_Msg_AppendSyx(rel, JB_SyxThg, JB_LUB[2005]);
		(JB_Ring_FirstSet(arg, rel));
		JB_Decr(rel);
		Message* brel = JB_Incr(JB_Syx_OperatorPlus(JB_SyxBRel, JB_LUB[215]));
		JB_Msg_AppendSyx(brel, JB_SyxThg, obj);
		JB_Decr(obj);
		(JB_Ring_FirstSet(node, brel));
		JB_Decr(brel);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_Decr(arg);
	SC_Func__Tran_If(fn, node, name_space);
}

void SC_Func__Tran_OneIsa(Message* isa_f, Message* arg, SCNode* space) {
	if ((!arg)) {
		return;
	}
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_Last(isa_f)));
	Message* List = JB_Incr(_tmPf0);
	JB_Decr(_tmPf0);
	Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_First(List)));
	JB_Decr(List);
	Message* L = JB_Incr(_tmPf1);
	JB_Decr(_tmPf1);
	Message* _tmPf2 = JB_Incr(((Message*)JB_Ring_NextSib(L)));
	Message* R = JB_Incr(_tmPf2);
	JB_Decr(_tmPf2);
	SCClass* cls = JB_Incr(SC_Msg_ObjCls(R));
	if ((!cls)) {
		JB_Msg_SyntaxExpect(R, JB_LUB[1293]);
		JB_Decr(cls);
		JB_Decr(R);
		JB_Decr(L);
		return;
	}
	if ((cls->IsRole)) {
		JB_Msg_SyntaxExpect(R, JB_LUB[1294]);
		JB_Decr(cls);
		JB_Decr(R);
		JB_Decr(L);
		return;
	}
	JB_Decr(R);
	SCDecl* OldDecl = JB_Incr(SC_Base_LookUpVarDecl(space, L->Name));
	if ((!OldDecl)) {
		JB_Decr(OldDecl);
		JB_Decr(cls);
		JB_Decr(L);
		return;
	}
	SCDecl* NewDecl = JB_Incr(SC_Decl_CopyDecl(OldDecl, false));
	(SC_Decl_IsTypeImproveSet(NewDecl, true));
	JB_SetRef(NewDecl->IsLookupOnly, OldDecl);
	JB_Decr(OldDecl);
	JB_SetRef(NewDecl->Type, cls);
	SCDecl* oldcont = JB_Incr(NewDecl->Contains);
	SCDecl* it = JB_Incr(cls->Contained);
	JB_Decr(cls);
	if (it) {
		if ((!oldcont) or SC_Class_Real_Isa(it->Type, oldcont->Type)) {
			JB_SetRef(NewDecl->Contains, it);
		}
	}
	JB_Decr(oldcont);
	JB_Decr(it);
	if ((!(space->Access))) {
		JB_SetRef(space->Access, JB_Dict_Constructor(nil));
	}
	JB_String* _tmPf3 = JB_Incr(JB_Str_LowerCase(L->Name));
	JB_Decr(L);
	(JB_Dict_ValueSet(space->Access, _tmPf3, NewDecl));
	JB_Decr(NewDecl);
	JB_Decr(_tmPf3);
}

void SC_Func__Tran_Print(SCFunction* fn, Message* node, SCNode* name_space) {
	if (true) {
		MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
		Message* prm = JB_Incr(JB_Syx_Msg(JB_SyxPrm, JB_LUB[0]));
		JB_Tree_TakeAllFrom(prm, node);
		JB_Tree_SyntaxAppend(node, prm);
		JB_Decr(prm);
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxThg, node->Name));
		(JB_Ring_FirstSet(node, (_tmPf1)));
		JB_Decr(_tmPf1);
		JB_Msg_BecomeStr(node, JB_SyxFunc, JB_LUB[0]);
		JB_MsgPos_SyntaxUsingComplete((&_usingf0));
		JB_MsgPos_Destructor((&_usingf0));
	}
	JB_FreeIfDead(SC_TypeOfExpr(node, name_space, nil));
}

void SC_Func__Tran_Quit(SCFunction* fn, Message* node, SCNode* name_space) {
	SC_Msg_MiniTran(node, name_space, JB_LUB[1484]);
}

void SC_Func__Tran_Rejoin(SCFunction* fn, Message* node, SCNode* name_space) {
	(SC_Msg_TmpTypeSet(node, kSC__ASMtmp_kRejoin));
	Message* p = JB_Incr(((Message*)JB_Ring_First(node)));
	if (JB_Msg_EqualsSyx(p, JB_SyxArg, false)) {
		SCArg* arg = JB_Incr(SC_Msg_AsArg(p));
		if ((!(((bool)arg) and arg->IsStatementExpr))) {
			JB_Msg_SyntaxExpect(node, JB_LUB[723]);
			JB_Decr(arg);
			JB_Decr(p);
			return;
		}
		JB_Decr(arg);
		Message* n = JB_Incr(((Message*)JB_Ring_NextSib(p)));
		if (n) {
			JB_Msg_SyntaxExpect(node, JB_LUB[671]);
			JB_Decr(n);
			JB_Decr(p);
			return;
		}
		JB_Decr(n);
	}
	JB_Decr(p);
}

bool SC_Func__Tran_Render(Message* msg, SCClass* Cls) {
	MessagePosition using2 = JB_Msg_SyntaxUsing(msg);
	bool _tmPf0 = SC_Func__Tran_RenderSub(msg, Cls);
	JB_MsgPos_Destructor((&using2));
	return _tmPf0;
}

bool SC_Func__Tran_RenderSub(Message* msg, SCClass* Cls) {
	JB_SetRef(msg->Name, JB_LUB[1674]);
	Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(msg)));
	bool IsPureRender = (!JB_Msg_EqualsSyx(_tmPf0, JB_SyxThg, false));
	JB_Decr(_tmPf0);
	if (IsPureRender) {
		Message* _tmPf1 = JB_Incr(JB_Syx_OperatorPlus(JB_SyxThg, JB_LUB[1175]));
		(JB_Ring_FirstSet(msg, _tmPf1));
		JB_Decr(_tmPf1);
		if (Cls) {
			JB_SetRef(msg->Name, JB_LUB[1513]);
		}
	}
	Message* arg = JB_Incr(SC_Msg_NormaliseFunc(msg, nil));
	Message* name = JB_Incr(((Message*)JB_Ring_First(msg)));
	Message* params = JB_Incr(((Message*)JB_Ring_NextSib(name)));
	JB_Decr(name);
	if (SC_Msg_IsBehaviour(msg)) {
		JB_Msg_AppendSyx(params, JB_SyxThg, JB_LUB[1895]);
	}
	 else {
		SC_Msg_CopyAllInto(SC__SCStrings_RenderNewParams, params, false);
	}
	JB_Decr(params);
	if (JB_FreeIfDead(JB_Msg_FindNested(msg, JB_SyxThg, JB_LUB[1670], false))) {
		SC_Msg_CopyAllBeforeInto(SC__SCStrings_RenderFinish, arg, nil);
		SC_Msg_CopyAllAfterInto(SC__SCStrings_RenderFinish, arg, nil);
	}
	JB_Decr(arg);
	if (SC_Msg_IsBehaviour(msg)) {
		Message* _tmPf2 = JB_Incr(((Message*)JB_Tree_Second(msg)));
		JB_Tree_Remove(_tmPf2);
		JB_Decr(_tmPf2);
		return true;
	}
	return false;
}

Message* SC_Func__Tran_Result(SCFunction* f) {
	SCDecl* Type = f->ReturnType;
	Message* Src = SC_Func_SourceArg(f);
	if ((!(((bool)Type) and (((bool)Src) and (!(SC_Msg_OperatorIsTmp(((Message*)JB_Ring_Last(Src)), JB_LUB[1899]))))))) {
		return nil;
	}
	Message* errs = ((Message*)JB_Ring_Last(Src));
	if ((!errs)) {
		errs = Src;
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(errs);
	JB__Tk_Using.Position = -1;
	Message* ret = SC_Decl_WriteDeclFull(Type, JB_LUB[1910], 0);
	(JB_Ring_FirstSet(Src, ret));
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return ret;
}

void SC_Func__Tran_ResultFinish(SCFunction* f, Message* r_z, SCNode* space) {
	Message* Src = SC_Func_SourceArg(f);
	SCDecl* d = SC_Msg_MsgDecl(r_z);
	bool Used = (((bool)d) and SC_Decl_SyntaxIs(d, kSC__SCDeclInfo_UsedByCode));
	SC_Msg_StartUsingAfter(Src);
	if ((!Used)) {
		JB_Tree_Remove(r_z);
	}
	 else if (!(SC_Decl_SyntaxIs(d, kSC__SCDeclInfo_SetTo))) {
		SC_Msg_NotNilRZ(r_z, f->ReturnType, space);
	}
	if ((!((SC_SCBlockage_SyntaxIs(SC_Msg_Blocks(Src), kSC__SCBlockage_Return)) or (SC_Msg_OperatorIsTmp(((Message*)JB_Ring_Last(Src)), JB_LUB[1899]))))) {
		Message* ret = JB_Msg_Msg(Src, JB_SyxTmp, JB_LUB[1899]);
		(SC_Msg_TmpTypeSet(ret, kSC__ASMtmp_kReturn));
		if (Used) {
			JB_SetRef(JB_Msg_Msg(ret, JB_SyxThg, JB_LUB[1910])->Obj, d);
		}
		 else {
			JB_Tree_SyntaxAppend(ret, SC_Decl_CreateDefault(f->ReturnType, Src, true));
		}
	}
	JB__Tk_Using.Flags = 0;
}

void SC_Func__Tran_Return(SCFunction* fn, Message* node, SCNode* name_space) {
	if ((!fn)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1108]);
		return;
	}
	if (SC_Msg_TmpType(node) == kSC__ASMtmp_kReturn) {
		JB_DoAt(1);
	}
	(SC_Msg_TmpTypeSet(node, kSC__ASMtmp_kReturn));
	if ((!JB_Tree_IsLast(node))) {
		if ((!(!SC_Func_SyntaxIs(fn, kSC__FunctionType_ConOrDes)))) {
			JB_Msg_SyntaxExpect(node, JB_LUB[1400]);
			return;
		}
	}
	SC_Func_CheckReturnValue(fn, node);
	SC_Msg_LastInBlock(node, kSC__SCBlockage_Return);
	Message* _tmPf0 = JB_Incr(SC_Func_SourceArg(fn));
	SC_Msg_CheckNotInStateExpr(node, _tmPf0);
	JB_Decr(_tmPf0);
}

void SC_Func__Tran_Sdt(Message* exp) {
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(exp);
	Message* f = JB_Incr((JB_Syx_Msg(JB_SyxThg, JB_LUB[1934])));
	f->RangeLength = 1;
	(JB_Ring_FirstSet(exp, f));
	JB_Decr(f);
	exp->Func = JB_SyxDot;
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__Tran_Strings(Message* start, SCFunction* fn) {
	{
		Message* msg = start;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(start));
		while (((bool)(msg)) and (msg != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(msg));
			Syntax f = msg->Func;
			if (f == JB_SyxStr) {
				SC_Func__String_Expand(msg, fn);
			}
			msg = _N_f2;
		};
		;
	};
}

void SC_Func__Tran_Swap(SCFunction* fn, Message* node, SCNode* name_space) {
	(SC_Msg_TmpTypeSet(node, kSC__ASMtmp_kSwap));
	if ((!JB_Tree_SyntaxEquals(node, 2, false))) {
		JB_Msg_SyntaxExpect(node, JB_LUB[978]);
		return;
	}
	JB_SetRef(node->Name, JB_LUB[971]);
	SC_Func__Tran_Print(fn, node, name_space);
}

Message* SC_Func__Tran_Syx(Message* msg) {
	JB_SetRef(msg->Name, JB_LUB[1692]);
	Message* name = JB_Incr(JB_Msg_NeedSyx(msg, JB_SyxThg));
	if ((!name)) {
		JB_Decr(name);
		return nil;
	}
	Message* arg = JB_Incr(JB_Msg_Last(msg, JB_SyxArg));
	if ((!arg)) {
		JB_Decr(arg);
		JB_Decr(name);
		return nil;
	}
	JB_Decr(arg);
	Message* _tmPf5 = JB_Incr(JB_Msg_FindSyx(msg, JB_SyxBra));
	Message* Params = JB_Incr(JB_Msg_FindSyx(_tmPf5, JB_SyxThg));
	JB_Decr(_tmPf5);
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(msg);
	if ((!Params)) {
		JB_SetRef(Params, (JB_Syx_Msg(JB_SyxThg, JB_LUB[0])));
		Message* _tmPf6 = ({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxBra, JB_LUB[0])));
			JB_Tree_SyntaxAppend(__imPf1, Params);
			JB_SafeDecr(nil);
			 __imPf1;
		});
		(JB_Ring_NextSibSet(name, _tmPf6));
		JB_Decr(_tmPf6);
	}
	JB_String* name2 = JB_Incr(Params->Name);
	JB_String* OldName = JB_Incr(name->Name);
	JB_String* SyxName = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1262], OldName));
	JB_SetRef(name->Name, JB_Str_OperatorPlus(OldName, JB_LUB[1440]));
	JB_SetRef(Params->Name, JB_LUB[1666]);
	JB_Decr(Params);
	if (JB_Str_Length(OldName) > 4) {
		JB_Msg_SyntaxExpect(msg, JB_LUB[1047]);
		JB_Decr(SyxName);
		JB_Decr(OldName);
		JB_Decr(name2);
		JB_MsgPos_Destructor((&_usingf0));
		JB_Decr(name);
		return nil;
	}
	Message* DotNew = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1235])));
	Message* _tmPf7 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1977]));
	JB_Tree_SyntaxAppend(DotNew, (_tmPf7));
	JB_Decr(_tmPf7);
	Message* _tmPf8 = ({
		Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		Message* _tmPf9 = ({
			Message* __imPf3 = JB_Incr((JB_Syx_Msg(JB_SyxDot, name->Name)));
			Message* _tmPf10 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1008]));
			JB_Tree_SyntaxAppend(__imPf3, (_tmPf10));
			JB_Decr(_tmPf10);
			Message* _tmPf11 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
			JB_Tree_SyntaxAppend(__imPf3, (_tmPf11));
			JB_Decr(_tmPf11);
			JB_SafeDecr(nil);
			 __imPf3;
		});
		JB_Tree_SyntaxAppend(__imPf2, _tmPf9);
		JB_Decr(_tmPf9);
		JB_String* _tmPf13 = JB_Incr(JB_Str_LowerCase(OldName));
		Message* _tmPf12 = JB_Incr(JB_Syx_Msg(JB_SyxStr, _tmPf13));
		JB_Decr(_tmPf13);
		JB_Tree_SyntaxAppend(__imPf2, (_tmPf12));
		JB_Decr(_tmPf12);
		Message* _tmPf14 = JB_Incr(JB_Syx_Msg(JB_SyxStr, name2));
		JB_Tree_SyntaxAppend(__imPf2, (_tmPf14));
		JB_Decr(_tmPf14);
		JB_SafeDecr(nil);
		 __imPf2;
	});
	JB_Decr(name);
	JB_Decr(name2);
	JB_Tree_SyntaxAppend(DotNew, _tmPf8);
	JB_Decr(_tmPf8);
	Message* _tmPf15 = JB_Incr(JB_Msg_Ancestor(msg, JB_SyxArg));
	Message* ArgPlace = JB_Incr(JB_Msg_Ancestor(_tmPf15, JB_SyxArg));
	JB_Decr(_tmPf15);
	Message* dcl = JB_Incr(SC_MakeDecl(JB_LUB[1977], SyxName, DotNew, 0));
	JB_Decr(SyxName);
	JB_Decr(DotNew);
	JB_Tree_SyntaxAppend(ArgPlace, dcl);
	JB_Decr(ArgPlace);
	Message* fn_msg = JB_Incr((JB_Syx_Msg(JB_SyxFunc, JB_LUB[0])));
	Message* _tmPf16 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1977]));
	JB_Tree_SyntaxAppend(fn_msg, (_tmPf16));
	JB_Decr(_tmPf16);
	Message* _tmPf17 = ({
		Message* __imPf4 = JB_Incr((JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
		Message* _tmPf18 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[1483]));
		JB_Tree_SyntaxAppend(__imPf4, (_tmPf18));
		JB_Decr(_tmPf18);
		JB_SafeDecr(nil);
		 __imPf4;
	});
	JB_Tree_SyntaxAppend(fn_msg, _tmPf17);
	JB_Decr(_tmPf17);
	Message* _tmPf19 = JB_Incr(((Message*)JB_Ring_First(dcl)));
	JB_FreeIfDead(SC_Msg_ReplaceWith(_tmPf19, fn_msg));
	JB_Decr(fn_msg);
	JB_Decr(_tmPf19);
	JB_Array_SyntaxAppend(SC__Comp_SyxArray, OldName);
	JB_Decr(OldName);
	SC_Comp__Collect(dcl, true);
	JB_Decr(dcl);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
	return msg;
}

void SC_Func__Tran_Temporal(SCFunction* fn, Message* s, SCNode* name_space) {
	DTWrap* TmpInt = ((DTWrap*)JB_Dict_ValueStr(SC__Func_TemporalStatements, s->Name));
	if ((!TmpInt)) {
		JB_Msg_SyntaxExpect(s, nil);
		return;
	}
	(((FP_TranFunc)JB_Wrap_First(TmpInt)))(fn, s, name_space);
}

void SC_Func__Tran_Using(SCFunction* fn, Message* node, SCNode* name_space) {
	Message* With = JB_Incr(JB_Msg_NeedFirst(node));
	if ((!With)) {
		JB_Decr(With);
		return;
	}
	Message* Start = JB_Incr(node);
	Message* Arg = JB_Incr(((Message*)JB_Ring_NextSib(With)));
	if (Arg) {
		if ((!(JB_Msg_Expect(Arg, JB_SyxArg, nil) and JB_Msg_ExpectLast(Arg, JB_LUB[0])))) {
			JB_Decr(Arg);
			JB_Decr(Start);
			JB_Decr(With);
			return;
		}
		JB_SetRef(Start, nil);
	}
	 else {
		Message* _tmPf1 = JB_Incr(((Message*)JB_Ring_Parent(node)));
		JB_SetRef(Arg, _tmPf1);
		JB_Decr(_tmPf1);
	}
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
	JB_String* name = JB_Incr(SC_UniqueTmpVar(SC__Func_CurrFunc, JB_LUB[2027]));
	Message* WithFirst = JB_Incr(((Message*)JB_Ring_First(With)));
	if ((!JB_Msg_EqualsSyx(With, JB_SyxBra, false))) {
		JB_SetRef(WithFirst, With);
		Message* _tmPf2 = JB_Incr(JB_Syx_Msg(JB_SyxBra, JB_LUB[0]));
		(JB_Ring_FirstSet(node, _tmPf2));
		JB_Decr(_tmPf2);
	}
	JB_Decr(With);
	Message* UsingObj = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1260])));
	JB_Tree_SyntaxAppend(UsingObj, WithFirst);
	JB_Decr(WithFirst);
	Message* _tmPf3 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(UsingObj, (_tmPf3));
	JB_Decr(_tmPf3);
	Message* item = JB_Incr((JB_Syx_Msg(JB_SyxDot, JB_LUB[1261])));
	Message* _tmPf4 = JB_Incr(JB_Syx_Msg(JB_SyxThg, name));
	JB_Tree_SyntaxAppend(item, (_tmPf4));
	JB_Decr(_tmPf4);
	Message* _tmPf5 = JB_Incr(JB_Syx_Msg(JB_SyxEmb, JB_LUB[0]));
	JB_Tree_SyntaxAppend(item, (_tmPf5));
	JB_Decr(_tmPf5);
	Message* Decl = JB_Incr(SC_MakeDecl(JB_LUB[0], name, UsingObj, 0));
	JB_Decr(name);
	JB_Decr(UsingObj);
	JB_Tree_AppendAfter(Arg, Decl, Start);
	JB_Decr(Start);
	JB_Decr(Decl);
	Message* _tmPf6 = JB_Incr(SC_Msg_UnReachable(Arg));
	JB_Tree_AppendBefore(Arg, item, _tmPf6);
	JB_Decr(item);
	JB_Decr(_tmPf6);
	if (JB_FreeIfDead(((Message*)JB_Ring_Parent(Arg))) == node) {
		JB_SetRef(node->Name, JB_LUB[1698]);
		Message* _tmPf7 = JB_Incr(((Message*)JB_Ring_First(node)));
		Message* _tmPf8 = JB_Incr(JB_Syx_Msg(JB_SyxThg, JB_LUB[2005]));
		JB_Tree_SyntaxAppend(_tmPf7, (_tmPf8));
		JB_Decr(_tmPf7);
		JB_Decr(_tmPf8);
	}
	 else {
		SC_SC_MakeComment(node);
	}
	JB_Decr(Arg);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__Tran_Visible(SCFunction* fn, Message* node, SCNode* name_space) {
	if ((!fn)) {
		JB_Msg_SyntaxExpect(node, JB_LUB[1108]);
		return;
	}
	SC_Base_LoadVisibility(fn, node);
}

void SC_Func__Tran_While(SCFunction* fn, Message* node, SCNode* name_space) {
	if (SC_Msg_TmpType(node) == kSC__ASMtmp_kWhile) {
		return;
	}
	JB_SetRef(node->Name, JB_LUB[2048]);
	(SC_Msg_TmpTypeSet(node, kSC__ASMtmp_kWhile));
	Message* Cond = JB_Incr(JB_Msg_NeedFirst(node));
	if ((!Cond)) {
		JB_Decr(Cond);
		return;
	}
	Message* arg = JB_Incr(((Message*)JB_Ring_NextSib(Cond)));
	//using;
	MessagePosition _usingf0 = JB_Msg_SyntaxUsing(node);
	if (JB_Msg_EqualsSyx(Cond, JB_SyxArg, false)) {
		JB_SetRef(Cond, (JB_Syx_Msg(JB_SyxThg, JB_LUB[2005])));
		(JB_Ring_FirstSet(node, Cond));
		JB_SetRef(arg, ((Message*)JB_Ring_NextSib(Cond)));
	}
	 else {
		if ((!(arg))) {
			JB_SetRef(arg, JB_Msg_GiveArg(node));
		}
		Message* decl = JB_Incr(((Message*)JB_Ring_First(Cond)));
		if (JB_Msg_EqualsSyx(decl, JB_SyxDecl, false)) {
			Cond->Func = JB_SyxBra;
			JB_SetRef(Cond, JB_Msg_Msg(Cond, JB_SyxThg, JB_LUB[2005]));
			(JB_Ring_FirstSet(arg, decl));
			Message* dname = JB_Incr(SC_Msg_DeclName(decl));
			if (dname) {
				Message* _tmPf4 = JB_Incr(JB_Msg_Copy(dname, nil));
				Message* _tmPf3 = JB_Incr(JB_Macro_CallFast(SC__Macros_WhileDecl, _tmPf4, nil));
				JB_Decr(_tmPf4);
				(JB_Ring_NextSibSet(decl, _tmPf3));
				JB_Decr(_tmPf3);
			}
			JB_Decr(dname);
		}
		 else {
			JB_SetRef(Cond, SC_ExpandToBool(Cond, name_space));
			if ((!Cond)) {
				JB_Decr(decl);
				JB_MsgPos_Destructor((&_usingf0));
				JB_Decr(arg);
				JB_Decr(Cond);
				return;
			}
		}
		JB_Decr(decl);
	}
	JB_FreeIfDead(SC_Msg_NeedBra(Cond));
	SC_Msg_CheckContinuesAndExits(arg);
	SC_Func__Tran_Isa(node, name_space);
	Message* ExitCond = JB_Incr(((Message*)JB_Ring_NextSib(arg)));
	if (JB_Msg_Expect(ExitCond, JB_SyxBra, nil)) {
		JB_Tree_Remove(ExitCond);
		JB_SetRef(ExitCond, SC_Msg_Negate(ExitCond));
		Message* Exit = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1635])));
		Message* _tmPf5 = ({
			Message* __imPf1 = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1698])));
			Message* _tmPf6 = JB_Incr(SC_Msg_NeedBra(ExitCond));
			JB_Tree_SyntaxAppend(__imPf1, _tmPf6);
			JB_Decr(_tmPf6);
			Message* _tmPf7 = ({
				Message* __imPf2 = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
				JB_Tree_SyntaxAppend(__imPf2, Exit);
				JB_SafeDecr(nil);
				 __imPf2;
			});
			JB_Tree_SyntaxAppend(__imPf1, _tmPf7);
			JB_Decr(_tmPf7);
			JB_SafeDecr(nil);
			 __imPf1;
		});
		JB_Tree_SyntaxAppend(arg, _tmPf5);
		JB_Decr(_tmPf5);
		SC_Msg_LoopExit(Exit);
		JB_Decr(Exit);
		JB_SetRef(Cond, ExitCond);
	}
	JB_Decr(Cond);
	JB_Decr(arg);
	JB_Decr(ExitCond);
	JB_MsgPos_SyntaxUsingComplete((&_usingf0));
	JB_MsgPos_Destructor((&_usingf0));
}

void SC_Func__TransformAll() {
	{
		Array* _LoopSrcf2 = SC__Comp_FuncList;
		int _if0 = 0;
		while (true) {
			SCFunction* f = ((SCFunction*)JB_Array_Value(_LoopSrcf2, _if0));
			if (f == nil) {
				break;
			}
			if (SC_TooManyErrors()) {
				return;
			}
			SC_Func_Transform(f);
			_if0++;
		};
	};
}


void SC_Mod_AddDelayedInit(SCModule* self, Message* src, Message* dest, JB_String* fn_name) {
	if (((bool)src) and (SC_Mod_HasActualCode(self, src) and (self != SC__Comp_program))) {
		JB_Tree_SyntaxAppend(dest, (JB_Syx_Msg(JB_SyxSheb, JB_Str_OperatorPlus(JB_LUB[394], self->Name))));
		JB_Tree_SyntaxAppend(dest, ({
			Message* __imPf0 = (JB_Syx_Msg(JB_SyxDot, fn_name));
			JB_Tree_SyntaxAppend(__imPf0, (JB_Syx_Msg(JB_SyxThg, self->Name)));
			JB_Tree_SyntaxAppend(__imPf0, (JB_Syx_Msg(JB_SyxPrm, JB_LUB[0])));
			 __imPf0;
		}));
	}
}

void SC_Mod_AddInterfaceToTable(SCModule* self, SCClass* TableCls) {
	SCDecl* d = JB_Incr(SC_Decl_Constructor(nil, self->Cls));
	d->NilDeclared = kSC__NilState_Real;
	JB_String* _tmPf0 = JB_Incr(SC_Str_InterfaceToBehaviour(self->Name));
	(SC_Decl_NameSet(d, _tmPf0));
	JB_Decr(_tmPf0);
	JB_Array_SyntaxAppend(TableCls->Properties, d);
	SC_Base_TryAdd(TableCls, self->Source, d, d->Name);
	JB_Decr(d);
}

void SC_Mod_AddModuleToFunc(SCModule* self, SCNode* space) {
	if ((!JB_FreeIfDead(SC_Base_SyntaxAccess(space, JB_LUB[1934])))) {
		Message* _tmPf0 = JB_Incr(SC_Base_FuncSrc(space));
		SC_Base_TryAdd(space, _tmPf0, self, JB_LUB[1934]);
		JB_Decr(_tmPf0);
	}
}

void SC_Mod_BaseDecls(SCModule* self) {
	SC_Base_Use(self);
	SC_CollectDeclsGlobals(self->Source, self);
}

Message* SC_Mod_BuildInitArg(SCModule* self) {
	Message* rz = nil;
	JB_SetRef(rz, ({
		Message* __imPf0 = JB_Incr((JB_Syx_Msg(JB_SyxArg, JB_LUB[0])));
		Message* _tmPf1 = JB_Incr(JB_Syx_Msg(JB_SyxArg, JB_LUB[0]));
		JB_Tree_SyntaxAppend(__imPf0, (_tmPf1));
		JB_Decr(_tmPf1);
		JB_SafeDecr(__imPf0);
		 __imPf0;
	}));
	if (self->Source) {
		Message* ig = JB_Incr((JB_Syx_Msg(JB_SyxTmp, JB_LUB[1700])));
		JB_Tree_SyntaxAppend(ig, rz);
		JB_SetRef(ig->Obj, self);
		JB_Tree_SyntaxAppend(self->Source, ig);
		JB_Decr(ig);
	}
	JB_SafeDecr(rz);
	return rz;
}

SCModule* SC_Mod_Constructor(SCModule* self) {
	if (self == nil) {
		self = ((SCModule*)JB_NewClass(&SCModuleData));
	}
	SC_Base_Constructor0(self);
	self->Cls = nil;
	self->InitVarsArg = nil;
	self->InitCodeArg = nil;
	JB_StringC* _tmPf2 = JB_LUB[0];
	self->CppPart = JB_Incr(_tmPf2);
	self->InitAfter = nil;
	JB_StringC* _tmPf1 = JB_LUB[0];
	self->SubsFrom = JB_Incr(_tmPf1);
	self->Grabbed = false;
	self->IsImport = false;
	self->Inited = false;
	self->IsRequiredInterface = false;
	CppRefs* _tmPf0 = SC_CppRefs_Constructor(nil, nil);
	self->DefaultRefs = JB_Incr(_tmPf0);
	if (SC__Comp_ModuleList != nil) {
		JB_Array_SyntaxAppend(SC__Comp_ModuleList, self);
	}
	return self;
}

JB_String* SC_Mod_CppPath(SCModule* self) {
	JB_Incr(self);
	JB_String* f = JB_Incr(self->CppPart);
	while (true) {
		SCNode* p = JB_Incr(self->Parent);
		if (JB_Object_FastIsa(p, &SCModuleData)) {
			if ((!((SCModule*)p)->IsImport)) {
				JB_SetRef(self, p);
				JB_String* _tmPf0 = JB_Incr(JB_Str_OperatorPlus(JB_LUB[1426], f));
				JB_SetRef(f, JB_Str_OperatorPlus(((SCModule*)p)->CppPart, _tmPf0));
				JB_Decr(_tmPf0);
				JB_Decr(p);
				continue;
			}
		}
		JB_Decr(p);
		break;
	};
	JB_Decr(self);
	JB_SafeDecr(f);
	return f;
}

void SC_Mod_DelayedInitFuncTransform(SCModule* self) {
	Message* v = JB_Incr(self->InitVarsArg);
	Message* it = JB_Incr(((Message*)JB_Ring_First(v)));
	if (it) {
		{
			Message* msg = JB_Incr(((Message*)JB_Ring_First(it)));
			while (msg) {
				Message* _Nf1 = JB_Incr(((Message*)JB_Ring_NextSib(msg)));
				if (JB_Msg_EqualsSyx(msg, JB_SyxDecl, false)) {
					Message* name = JB_Incr(SC_Msg_GetDclName(msg, false));
					if (name) {
						if (SC_Msg_InitRootDecl(name, msg, self)) {
							JB_Tree_Remove(msg);
						}
					}
					JB_Decr(name);
				}
				JB_SetRef(msg, _Nf1);
				JB_Decr(_Nf1);
			};
			JB_Decr(msg);
			;
		}
		;
		SC_Mod_AddDelayedInit(self, v, SC__Comp_program->InitVarsArg, JB_LUB[917]);
	}
	JB_Decr(v);
	JB_Decr(it);
	SC_Mod_AddDelayedInit(self, self->InitCodeArg, SC__Comp_program->InitCodeArg, JB_LUB[916]);
}

void SC_Mod_Destructor(SCModule* self) {
	JB_Clear(self->Cls);
	JB_Clear(self->InitVarsArg);
	JB_Clear(self->InitCodeArg);
	JB_Clear(self->CppPart);
	JB_Clear(self->DefaultRefs);
	JB_Clear(self->InitAfter);
	JB_Clear(self->SubsFrom);
	SC_Base_Destructor(self);
}

SCObject* SC_Mod_GetTheNewer(SCModule* self) {
	while (self) {
		SCObject* o2 = SC_Base_SyntaxAccess(self, JB_LUB[1808]);
		if (o2) {
			return o2;
		}
		SCClass* cls = self->Cls;
		if ((!cls)) {
			return nil;
		}
		if ((!cls->IsRole)) {
			return nil;
		}
		self = SC_Mod_SuperMod(self);
	};
	return nil;
}

void SC_Mod_GlobalsFix(SCModule* self) {
	FastString* fs = JB_Incr(JB_FS_Constructor(nil));
	{
		DictionaryReader* _df0 = JB_Incr(JB_Dict_Navigate(self->Access));
		while (JB_Nav_MoveNext(_df0)) {
			SCDecl* decl = JB_Incr(SC_DictionaryReader_ValueDecl(_df0));
			if (decl) {
				SC_Decl_PrefixedName(decl, fs, self);
			}
			JB_Decr(decl);
		};
		JB_Decr(_df0);
	}
	;
	JB_Decr(fs);
}

bool SC_Mod_HasActualCode(SCModule* self, Message* arg) {
	{
		Message* curr = arg;
		Message* _afterf1 = ((Message*)JB_Ring_FlatAfter(arg));
		while (((bool)(curr)) and (curr != _afterf1)) {
			Message* _N_f2 = ((Message*)JB_Ring_FlatNext0(curr));
			if (JB_Msg_EqualsSyx(curr, JB_SyxDecl, false)) {
				curr = ((Message*)JB_Ring_FlatAfter(curr));
				continue;
			}
			 else if ((!JB_Msg_EqualsSyx(curr, JB_SyxArg, false))) {
				return true;
			}
			curr = _N_f2;
		};
		;
	}
	;
	return false;
}

void SC_Mod_InitDecls(SCModule* self) {
	Message* a = JB_Incr(((Message*)JB_Ring_First(self->InitVarsArg)));
	if (JB_Ring_HasChildren(a)) {
		SC_Imp_Use(self->Project);
		SC_CollectDeclsGlobals(a, self);
	}
	JB_Decr(a);
}

bool SC_Mod_IsProperModule(SCModule* self) {
	if ((!self->Parent)) {
		return nil;
	}
	if ((self->Parent == SC__Comp_program) and (self->Source == nil)) {
		return false;
	}
	return true;
}

void SC_Mod_LoadInitFunc(SCModule* self) {
	SC__Base_CurrVisibility = true;
	SC__Mod_Curr = self;
	Message* arg = JB_Incr(self->InitCodeArg);
	if (arg) {
		SC_Mod_LoadInitFuncSub(self, arg, JB_LUB[916]);
	}
	JB_SetRef(arg, self->InitVarsArg);
	if (arg) {
		SC_Mod_LoadInitFuncSub(self, arg, JB_LUB[917]);
	}
	JB_Decr(arg);
	SC__Mod_Curr = nil;
}

void SC_Mod_LoadInitFuncSub(SCModule* self, Message* init, JB_String* name) {
	FastString* _fsf0 = JB_Incr(JB_FS_Constructor(nil));
	JB_FS_AppendString(_fsf0, JB_LUB[1693]);
	JB_FS_AppendString(_fsf0, name);
	JB_FS_AppendString(_fsf0, JB_LUB[134]);
	JB_String* _tmPf1 = JB_Incr(JB_FS_GetResult(_fsf0));
	JB_Decr(_fsf0);
	Message* msg = JB_Incr(SC_Str_ParseClean(_tmPf1));
	JB_Decr(_tmPf1);
	JB_Tree_SyntaxAppend(msg, init);
	SCFunction* fn = JB_Incr(SC_Mod_NewModuleFunc(self, msg));
	JB_Decr(msg);
	if (fn) {
		(SC_Func_SyntaxIsSet(fn, kSC__FunctionType_InitFunc, true));
		Message* L = JB_Incr(((Message*)JB_Ring_Last(init)));
		if ((!JB_Ring_HasChildren(L))) {
			JB_Tree_Remove(L);
		}
		JB_Decr(L);
	}
	JB_Decr(fn);
}

void SC_Mod_LoadModule(SCModule* self, Message* node) {
	JB_SetRef(node->Obj, self);
	Message* NameMsg = JB_Incr(((Message*)JB_Ring_First(node)));
	if ((!self->Cls)) {
		JB_Msg_Expect(NameMsg, JB_SyxThg, nil);
	}
	Message* arg = JB_Incr(NameMsg);
	if (JB_Msg_EqualsSyx(NameMsg, JB_SyxThg, false)) {
		JB_SetRef(self->Name, NameMsg->Name);
		Message* sub = JB_Incr(((Message*)JB_Ring_NextSib(NameMsg)));
		JB_SetRef(arg, sub);
		if (JB_Msg_EqualsSyx(sub, JB_SyxBra, false)) {
			Message* _tmPf0 = JB_Incr(JB_Msg_NeedSyx(sub, JB_SyxThg));
			if ((!_tmPf0)) {
				JB_Decr(_tmPf0);
				JB_Decr(sub);
				JB_Decr(arg);
				JB_Decr(NameMsg);
				return;
			}
			JB_SetRef(self->SubsFrom, _tmPf0->Name);
			JB_Decr(_tmPf0);
			JB_SetRef(arg, ((Message*)JB_Ring_NextSib(sub)));
		}
		JB_Decr(sub);
	}
	JB_Decr(NameMsg);
	JB_Msg_Expect(arg, JB_SyxArg, nil);
	if ((!JB_Msg_ExpectLast(arg, JB_LUB[0]))) {
		JB_Decr(arg);
		return;
	}
	JB_SetRef(self->Source, arg);
	JB_Decr(arg);
	JB_String* _tmPf1 = JB_Incr(SC_Mod_SafeName(self));
	SC_Base_TryAdd(SC__Comp_DisamModules, nil, self, _tmPf1);
	JB_Decr(_tmPf1);
	SC_Base_Collect(self, self->Source, SC__Base_CurrVisibility, nil);
}

void SC_Mod_MoveToInitFunc(SCModule* self, Message* c) {
	if ((JB_Msg_EqualsSyx(c, JB_SyxSheb, false)) or (JB_Msg_EqualsSyx(c, JB_Syxurl, false))) {
		JB_Tree_Remove(c);
		return;
	}
	if ((!SC_Msg_AllowedMoveToInit(c))) {
		JB_Msg_SyntaxExpect(c, nil);
		return;
	}
	if (JB_Msg_EqualsSyx(c, JB_SyxDecl, false)) {
		if (SC_Msg_SettingToNil(c)) {
			return;
		}
	}
	if ((!(self->InitCodeArg))) {
		JB_SetRef(self->InitCodeArg, SC_Mod_BuildInitArg(self));
	}
	if (JB_Msg_EqualsSyx(c, JB_SyxDecl, false)) {
		if ((!(self->InitVarsArg))) {
			JB_SetRef(self->InitVarsArg, SC_Mod_BuildInitArg(self));
		}
		JB_Tree_SyntaxAppend(((Message*)JB_Ring_First(self->InitVarsArg)), c);
	}
	 else {
		JB_Tree_SyntaxAppend(self->InitCodeArg, c);
	}
}

SCFunction* SC_Mod_NewModuleFunc(SCModule* self, Message* src) {
	SCFunction* rz = nil;
	JB_SetRef(rz, ((SCFunction*)SC_Func__NewFunc(src, self, src)));
	if (rz) {
		SC_Base_TryAddBase(self, src, rz);
	}
	JB_SafeDecr(rz);
	return rz;
}

SCModule* SC_Mod_OneOrOther(SCModule* self, SCModule* B) {
	if (((bool)self) and ((bool)B)) {
		if (true) {
			JB_Msg_SyntaxExpect(self->Source, JB_kNameConf);
		}
		if (true) {
			JB_Msg_SyntaxExpect(B->Source, JB_kNameConf);
		}
	}
	return B;
}

JB_String* SC_Mod_Render(SCModule* self, FastString* fs_in) {
	FastString* fs = JB_Incr(JB_FS__FastNew(fs_in));
	SCClass* c = JB_Incr(self->Cls);
	if (c) {
		JB_FS_AppendString(fs, JB_LUB[1800]);
		JB_FreeIfDead(SC_Class_Render(c, fs));
	}
	 else {
		JB_FreeIfDead(SC_Named_Render(self, fs));
	}
	JB_Decr(c);
	JB_String* _tmPf0 = JB_Incr(JB_FS_SmartResult(fs, fs_in));
	JB_Decr(fs);
	JB_SafeDecr(_tmPf0);
	return _tmPf0;
}

JB_String* SC_Mod_SafeName(SCModule* self) {
	JB_String* n = self->Name;
	if (JB_Str_Exists(n)) {
		return n;
	}
	SCClass* c = self->Cls;
	if (c) {
		return c->Name;
	}
	return JB_LUB[0];
}

SCModule* SC_Mod_SuperMod(SCModule* self) {
	SCClass* c = self->Cls;
	if (c) {
		SCClass* s = c->Super;
		if (s) {
			return s->Modul;
		}
	}
	return nil;
}

bool SC_Mod_TryInit(SCModule* self, Array* req) {
	{
		Message* _LoopSrcf2 = self->InitAfter;
		Message* name = ((Message*)JB_Ring_First(_LoopSrcf2));
		while (name) {
			Message* _Nf1 = ((Message*)JB_Ring_NextSib(name));
			if ((!JB_Msg_Expect(name, JB_SyxThg, nil))) {
				return nil;
			}
			SCModule* m = SC_Comp__FindModuleMsg(name, 0);
			if ((!(((bool)m) and m->Inited))) {
				return nil;
			}
			name = _Nf1;
		};
		;
	}
	;
	self->Inited = true;
	JB_Array_SyntaxAppend(req, self);
	return true;
}

SCNode* SC_Mod__ConstantCollector(Message* node, SCNode* name_space, Message* ErrPlace) {
	JB_Tree_SyntaxAppend(SC__Comp_ConstantsList, node);
	if (JB_Object_FastIsa(name_space, &SCClassData)) {
		JB_SetRef(node->Obj, ((SCClass*)name_space)->Modul);
	}
	 else {
		JB_SetRef(node->Obj, name_space);
	}
	return SC__Comp_program;
}

SCNode* SC_Mod__DoInitAfter(Message* node, SCNode* name_space, Message* ErrPlace) {
	SCModule* mod = SC_Base_SpaceModule(name_space, node);
	if ((!mod)) {
		return nil;
	}
	JB_SetRef(mod->InitAfter, JB_Msg_NeedSyxOK(node, JB_SyxPrm, JB_SyxBra));
	return SC__Comp_program;
}

int SC_Mod__Init_() {
	{
	}
	;
	return 0;
}

int SC_Mod__InitCode_() {
	return 0;
}

SCNode* SC_Mod__NeuModule(Message* node, SCNode* name_space, Message* ErrPlace) {
	SCModule* m = JB_Incr(SC_Mod_Constructor(nil));
	m->Project = SC__Imp_Curr;
	m->Parent = SC_Base_ProjectFix(name_space);
	if (node) {
		SC_Mod_LoadModule(m, node);
	}
	JB_SafeDecr(m);
	return m;
}

SCModule* SC_Mod__NewContainer(JB_String* s) {
	SCModule* rz = nil;
	JB_SetRef(rz, SC_Mod_Constructor(nil));
	JB_SetRef(rz->Name, s);
	SC_Base_TryAdd(SC__Comp_program, nil, rz, s);
	JB_SafeDecr(rz);
	return rz;
}


Message* JB_config_ConfFirst(Message* self) {
	Message* l = JB_Incr(JB_Msg_ConfArg(self));
	if (l) {
		Message* _tmPf0 = JB_Incr(((Message*)JB_Ring_First(((Message*)l))));
		JB_Decr(l);
		JB_SafeDecr(_tmPf0);
		return _tmPf0;
	}
	JB_Decr(l);
	return nil;
}

bool JB_config_Save(Message* self) {
	JB_File* f = JB_Incr(((JB_File*)JB_Object_As(self->Obj, &JB_FileData)));
	if (JB_File_SyntaxCast(f)) {
		JB_String* p = JB_Incr(JB_Msg_Render(self, nil));
		if (JB_FreeIfDead(JB_Str_ParseWithError(p, nil))) {
			bool _tmPf0 = JB_File_SmartDataSet(f, p);
			JB_Decr(p);
			JB_Decr(f);
			return _tmPf0;
		}
		JB_Decr(p);
	}
	JB_Decr(f);
	return false;
}


bool SC_Task_LessThan3_interface_SyntaxCall(JB_Task* self, int i) {
	return ((Task_LessThan3_interface_prototype)self->_func)(self, i);
}


bool SC_Task_LessThan3_run(LessThan3* self, int i) {
	return i < self->b;
}

void JB_InitClassList(SaverLoadClass fn) {
	fn(&SaveableData, (char*)"");
	fn(&JB_StringData, (char*)"|int| Length_");
	fn(&ArrayData, (char*)"|int| Marker");
	fn(&DictionaryData, (char*)"");
	fn(&JB_FileData, (char*)"|int| Length_, |int| Descriptor");
	fn(&SavingTestData, (char*)"|string| Name, |int| Value, |int| ABC");
	fn(&JB_StringSharedData, (char*)"|int| Length_");
	fn(&JB_StringData, (char*)"|int| Length_");
	fn(&JB_StringCData, (char*)"|int| Length_");
	fn(&MessageIDData, (char*)"|int| Length_, |int| ID, |int| Func");
	fn(&SCFileData, (char*)"|int| Length_, |int| Descriptor, |string| ExportName, |string| FData, |int| filenum, |bool| IsInternal");
}
}

// -4287877000682403900 6508669408345204944