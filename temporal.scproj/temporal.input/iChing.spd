

role YingYang (message)
	function Opposite (|string|)
		return .firstName
	
	module
		|[yingyang]| _Items = nil
		function States (|[yingyang]|)
			if ._Items!=nil: return ._Items
			|| databank = –digest file://yingyang.jb
			._Items = DataBank.parse.list
			return ._Items	



role Hexagram (message)
	render Describe (|bool| Long=false)
		if self
			|| meaning = self["meaning"]
			|| judgement = self["judgement"]
			|| image = self["image"]

			fs <~ "\t\t --- "
			fs <~ .name
			fs <~ " ("
			fs <~ meaning.name
			fs <~ ", "
			.first.first.render(fs)
			fs <~ ") ---\n"
			if long
				fs <~ "Meaning: "
				fs <~ meaning.next.firstname
				fs <~ "\n\n"
				fs <~ "Judgement: "
			fs <~ judgement.name
			fs <~ "\n\n"
			if long
				fs <~ "\tExplanation: "
				fs <~ judgement.next.firstname
				fs <~ "\n\n"
				fs <~ "Image: "
			fs <~ image.name
			if long
				fs <~ "\n\n"
				fs <~ "\tExplanation: "
				fs <~ image.next.firstname
				// only the marked lines left!
		  else
			fs <~ "(nil)"
		fs <~ "\n"

	render LongDescription

/*

Hsieh (THUNDER UPON WATER) {
	meaning Deliverance {
		`Here the movement goes out of the sphere of danger. The obstacle has been removed, the difficulties are being resolved. Deliverance is not yet achieved; it is just in its beginning, and the hexagram represents its various stages.`
	}

	judgement `DELIVERANCE. The southwest furthers. If there is no longer anything where one has to go, Return brings good fortune. If there is still something where one has to go, Hastening brings good fortune.` {
		`This refers to a time in which tensions and complications begin to be eased. At such times we ought to make our way back to ordinary conditions as soon as possible; this is the meaning of "the southwest." These periods of sudden change have great importance. Just as rain relieves atmospheric tension, making all the buds burst open, so a time of deliverance from burdensome pressure has a liberating and stimulating effect on life. One thing is important, however: in such times we must not overdo our triumph. The point is not to push on farther than is necessary. Returning to the regular order of life as soon as deliverance is achieved brings good fortune. If there are any residual matters that ought to be attended to, it should be done as quickly as possible, so that a clean sweep is made and no retardations occur.`
	}

	image `Thus the superior man pardons mistakes  And forgives misdeeds.` {
		`A thunderstorm has the effect of clearing the air; the superior man produces a similar effect when dealing with mistakes and sins of men that induce a condition of tension. Through clarity he brings deliverance. However, when failings come to light, he does not dwell on them; he simply passes over mistakes, the unintentional transgressions, just as thunder dies away. He forgives misdeeds, the intentional transgressions, just as water washes everything clean.`
	}

	markedlines {
		line `One kills three foxes in the field And receives a yellow arrow. Perseverance brings good fortune.`
		line `If a man carries a burden on his back And nonetheless rides in a carriage, He thereby encourages robbers to draw near. Perseverance leads to humiliation.`
		line `Deliver yourself from your great toe. Then the companion comes, And him you can trust.`
	}
}
*/
	
	function Render (|FastString| fs=nil, |string|)
		return .describe(fs)
	
		
		
module iChing
	|message| _DatabankMsg
	function Tome (|message of hexagram|)
		|| d = ._DatabankMsg
			return d
		d = ( –digest file://iching.jb ).parse // what about compress? D:
		if d
			d = d["hexagrams"]
		
		d := StdErr.LastError
		d := .ClosedBook
		._DatabankMsg = d
		return d
		
	function ClosedBook (|message|)
		return Message(@str, "Tome remains closed.")
	
	function hexagram.Clean (|hexagram|)
		rz = .copy
		rz.arg.first.remove
		
	function Divination (|stevemachine| machine=nil, |Hexagram|)
		machine := SteveMachine.create(9,64K)
		if !machine
			return .ClosedBook
		machine.Hash
		|| Coins = machine.Walk(6, 9*9)
		|| hex = .Tome[coins]
		if !hex
			return .ClosedBook
		rz = hex.clean
		|| Marks = machine.Walk(6, 9*9)
		|| lines = rz["markedlines"]
		for (i.highbits in marks) (x)
			lines[x].Remove

	function New (|int| num, |Hexagram|)
		cpp_part Select
		|| t = .Tome[num-1]
			return t.Clean
	
	function New (|stevemachine| machine=nil, |Hexagram|)
		return .Divination(machine)
