

class YingYang
	|string| Name
	|string| Opposite
	constructor (|message| line)
		.name = line.name
		.Opposite = line.firstName
	
	module
		|[yingyang]| _Items
		function States (|[yingyang]|)
			if ._Items: return ._Items
			._Items = rz
			for line in DataBank.parse
				rz <~ YingYang(line)
	
	
		|| DataBank = –digest file://yingyang.jb


module iChing
	|| DataBank = –digest file://iching.jb // what about compress? D:
	
	|| Items = "Creative/Receptive/Difficulty/Folly/Waiting/Conflict/Army/Union/Taming/Treading/Peace/Standstill/Fellowship/Possession/Modesty/Enthusiasm/Following/Decay/Approach/View/Biting/Grace/Splitting/Return/Innocence/Taming/Mouth/Preponderance/Abysmal/Clinging/Influence/Duration/Retreat/Power/Progress/Darkening/Family/Opposition/Obstruction/Deliverance/Decrease/Increase/Resoluteness/Coming/Gathering/Pushing/Oppression/Well/Revolution/Cauldron/Arousing/Still/Development/Marrying/Abundance/Wanderer/Gentle/Joyous/Dispersion/Limitation/Truth/Small/After Completion/Before Completion".split('/')


	function Byte.iching (|string|)
		return iching.items[self&63]!
		
	render Name (|string| self)
		for c in self
			fs <~ c.iching


		
		


// notes:
// don't some things come in 3? Like 'being' 'doing' 'having'?
// creation movement destruction... negative balanced positive
// i wonder if there's an iChing which comes in 3 states?
// for now... just leave it. No worth disrupting the entire thing just to fix it.
// if we try that we'll never get anywhere. we can look into it some other year.

