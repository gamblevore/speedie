#!/usr/local/bin/spd

// README:
// Run this using sudo. like: sudo make.spd

// ANTI-MAKE THEORY:
	// NO: unix 'make' or cmake
	// NO: bash programming (control-flow / vars)
	// DO: Create the command-lines from your fav language!
// "Death to make-tools!"


|| Speedie = "/usr/local/speedie"
|| ExecFlags = ""
target osx:  || LibName = "libjeebox.dylib" 
target win:  || LibName = "libjeebox.lib" 
target lnx:  || LibName = "libjeebox.so" 

function comp (|string| name, |string|)
	rz = "echo \"Compiling ${name}.cpp\"
g++ -o Build/$name  $ExecFlags  ${name}.cpp"

main {

expect !app.args (app.args, "This script takes no arguments.")

|| CFlags   = "-std=gnu++17 -stdlib=libc++ -m64 -L/usr/local/lib/ -I /usr/local/include -I $Speedie/Library/CppLib -w -Wno-return-type-c-linkage -lc++ -Os -ffast-math -flto -mtune=native -D TARGET_UNIX=1 -D __SPEEDIE__=1"
|| LibFlags = "$CFlags -dynamiclib  -D AS_LIBRARY=1 "
ExecFlags   = "$CFlags -g -ljeebox"
|| BuildFol = "$Speedie/jeebox.scproj/Examples/Build".file
|| CppLib   = "$Speedie/Library/CppLib".file
|| SpdSrc   = "$Speedie/Speedie.scproj/Build"
|| SpdTerm  = "$Speedie/Terminal/Speedie"
|| LibPath  = "/usr/local/lib/$LibName"

|| tocompile = FastString()
|| Count = 2 //jb.cpp and jb_globals.cpp
for ch in CppLib
	if ch isa "cpp"
		tocompile <~ ch
		tocompile <~ ' '
		Count++
|| list = tocompile.render


////////////////////////////
<(`    (((generating cpp files)))    `)>
////////////////////////////

expect !(Speedie contains ' ') ("The path: '$speedie' contains spaces and can't be compiled.")
app.cwd = Speedie.child("jeebox.scproj").resolve
|| ScriptOut = "$Speedie/Terminal/make.sh".file
|| PrepareCpp = "$Speedie/Terminal/PrepareSpeedie.sh".file


PrepareCpp.data = `#!/bin/bash
echo "Prebuild .cpp files"
sudo -u $(logname) /usr/local/bin/speedie . --x --nocompile
sudo -u $(logname) /usr/local/bin/speedie --self --x --nocompile
`
// sudo -u $(logname) will "drop root permissions". This allows us to
// NOT run speedie as root, causing speedie to create folders owned
// by root. Meaning now we can't use those folders unless we sudo everything.
PrepareCpp.SilentExecute


////////////////////////////
<(`    (((generating script)))    `)>
////////////////////////////

scriptout.data = "#!/bin/bash
echo \"Started Building Speedie\"
set -e
cd $CppLib

echo \"Compiling $LibPath\"
g++ -o $LibPath  $LibFlags  $list   $Speedie/jeebox.scproj/Cpp/JB.cpp   $Speedie/jeebox.scproj/Cpp/JB_Globals.cpp

echo \"Compiling Speedie to $SpdTerm\"
g++ -o $SpdTerm  $CFlags  $list  -I $SpdSrc  $SpdSrc/JB.cpp  $SpdSrc/JB_Globals.cpp


echo \"Cleaning old files\"
cd $Speedie/jeebox.scproj/Examples
sudo -u \$(logname) mkdir -p Build
rm -rf Build/*

echo \"Installing headers\"
sudo -u \$(logname) cp *.h /usr/local/include/

${comp(`jb`)}
${comp(`xml`)}
${comp(`test`)}
${comp(`users`)}

echo \"\"
echo \"Build Complete.\"

echo \"Speedie Compiling Perry\"
sudo -u \$(logname) $SpdTerm $Speedie/Perry.scproj
"


require StdErr.ok
"Script generated at: $scriptout
Running Script: $scriptout ($Count+ .cpp files)\n\n"
scriptout.Execute

}