#!/usr/local/bin/spd

// README:
// Run this using sudo. like:
// sudo make.spd


// ANTI-MAKE THEORY:
// This demonstrates the 'anti-make theory'.
// Basically: "Don't use the unix 'make' or cmake,
// just create a command-lines from your favourite programming language!
// And don't use bash features like control-flow or vars!
// "Death to make-tools!"


// CONFIG
|| Speedie = "~/Speedie".resolve // change this later
|| LibName = "libjeebox.dylib"
// END CONF

|| ExecFlags = ""

function comp (|string| name, |string|)
	rz = "
echo \"Compiling ${name}.cpp\"
clang -o Build/$name  $ExecFlags  ${name}.cpp
"

main {

expect !app.args (app.args, "This script takes no arguments.")

|| CFlags = "-std=gnu++17 -stdlib=libc++ -m64 -L/usr/local/lib/ -I /usr/local/include -I $Speedie/Library/CppLib -w -Wno-return-type-c-linkage -lc++ -Os -ffast-math -flto -mtune=native -D TARGET_UNIX=1 -D __SPEEDIE__=1"
|| LibFlags = "$CFlags -dynamiclib  -F/Library/Frameworks  -D AS_LIBRARY=1 "
ExecFlags = "$CFlags -g -ljeebox"
|| BuildFol = "$Speedie/jeebox.scproj/Examples/Build".file
|| CppLib = "$Speedie/Library/CppLib".file
|| tocompile = FastString()
|| SpdSrc = "$Speedie/Speedie.scproj/BuildTest"
|| SpdTerm = "$Speedie/Terminal/Speedie"
|| LibPath = "/usr/local/lib/$LibName"
|| Count = 2 //jb.cpp and jb_globals.cpp
for ch in CppLib
	if ch isa "cpp"
		tocompile <~ ch
		tocompile <~ ' '
		Count++
|| list = tocompile.render

////////////////////////////
<(`    (((generating cpp files)))    `)>
////////////////////////////

expect !(Speedie contains ' ') ("The path: '$speedie' contains spaces and can't be compiled.")
app.cwd = Speedie.child("jeebox.scproj").resolve

"Death to make-tools!"

"/usr/local/bin/spd".silentexecute([".", "--x", "--nocompile"])$
"/usr/local/bin/spd".silentexecute(["--self", "--x", "--nocompile"])$
|| scriptout = "$Speedie/Terminal/make.sh".file


////////////////////////////
<(`    (((generating script)))    `)>
////////////////////////////


scriptout.data = "#!/bin/bash
echo \"Started Speedie Build Script\"
set -e
cd $CppLib

echo \"Compiling $LibPath\"
clang -o $LibPath  $LibFlags  $list   $Speedie/jeebox.scproj/Cpp/JB.cpp   $Speedie/jeebox.scproj/Cpp/JB_Globals.cpp


echo \"Compiling Speedie to $SpdTerm\"
clang -o $SpdTerm  $CFlags  $list  -I $SpdSrc  $SpdSrc/JB.cpp  $SpdSrc/JB_Globals.cpp


echo \"Cleaning old files\"
cd $Speedie/jeebox.scproj/Examples
mkdir -p Build
rm -rf Build/*

echo \"Installing headers\"
cp *.h /usr/local/include/

${comp(`jb`)}
${comp(`xml`)}
${comp(`test`)}
${comp(`users`)}

echo \"\"
echo \"Build Complete. Also built some example .cpp files in $BuildFol\"
"


require StdErr.ok
"Script generated at: $scriptout
Running Script: $scriptout ($Count+ .cpp files)\n\n"
scriptout.Execute

}